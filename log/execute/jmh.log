WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Java Microbenchmark Harness Parent                                 [pom]
[INFO] JMH Core                                                           [jar]
[INFO] JMH Generators: Annotation Processors                              [jar]
[INFO] JMH Core Integration Tests                                         [jar]
[INFO] JMH Generators: Reflection                                         [jar]
[INFO] JMH Generators: ASM                                                [jar]
[INFO] JMH Core Compilation Tests                                         [jar]
[INFO] JMH Core Benchmarks                                                [jar]
[INFO] JMH Samples                                                        [jar]
[INFO] JMH Generators: Bytecode                                           [jar]
[INFO] JMH Archetypes                                                     [pom]
[INFO] JMH Benchmark Archetype: Java                          [maven-archetype]
[INFO] JMH Benchmark Archetype: Scala                         [maven-archetype]
[INFO] JMH Benchmark Archetype: Groovy                        [maven-archetype]
[INFO] JMH Benchmark Archetype: Kotlin                        [maven-archetype]
[INFO] 
[INFO] ---------------------< org.openjdk.jmh:jmh-parent >---------------------
[INFO] Building Java Microbenchmark Harness Parent 1.29-SNAPSHOT         [1/15]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-parent >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-parent ---
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-parent <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-parent ---
[INFO] 
[INFO] ----------------------< org.openjdk.jmh:jmh-core >----------------------
[INFO] Building JMH Core 1.29-SNAPSHOT                                   [2/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-core >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-core ---
[INFO] Fork Value is true
[INFO] Done SpotBugs Analysis....
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-core <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-core ---
[INFO] BugInstance size is 19
[INFO] Error size is 0
[INFO] Total bugs: 19
[ERROR] Low: org.openjdk.jmh.generators.core.BenchmarkGenerator.INDENTS is a volatile reference to an array; the array elements are non-volatile [org.openjdk.jmh.generators.core.BenchmarkGenerator] In BenchmarkGenerator.java VO_VOLATILE_REFERENCE_TO_ARRAY
[ERROR] Low: org.openjdk.jmh.generators.core.FileSystemDestination.getResource(String) uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.generators.core.FileSystemDestination] At FileSystemDestination.java:[line 59] IIO_INEFFICIENT_LAST_INDEX_OF
[ERROR] Low: org.openjdk.jmh.generators.core.FileSystemDestination.newClass(String) uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.generators.core.FileSystemDestination] At FileSystemDestination.java:[line 69] IIO_INEFFICIENT_LAST_INDEX_OF
[ERROR] Low: org.openjdk.jmh.generators.core.FileSystemDestination.newResource(String) uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.generators.core.FileSystemDestination] At FileSystemDestination.java:[line 49] IIO_INEFFICIENT_LAST_INDEX_OF
[ERROR] Low: org.openjdk.jmh.profile.LinuxPerfAsmProfiler.parsePerfLine(String) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.profile.LinuxPerfAsmProfiler] At LinuxPerfAsmProfiler.java:[line 152] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.profile.LinuxPerfAsmProfiler.parsePerfLine(String) uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.profile.LinuxPerfAsmProfiler] At LinuxPerfAsmProfiler.java:[line 138] IIO_INEFFICIENT_LAST_INDEX_OF
[ERROR] Low: org.openjdk.jmh.profile.LinuxPerfAsmProfiler.parsePerfLine(String) uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.profile.LinuxPerfAsmProfiler] At LinuxPerfAsmProfiler.java:[line 145] IIO_INEFFICIENT_LAST_INDEX_OF
[ERROR] High: Incorrect combination of Math.max and Math.min: this code always returns 1.0 [org.openjdk.jmh.profile.LinuxPerfNormProfiler] At LinuxPerfNormProfiler.java:[line 273] DM_INVALID_MIN_MAX
[ERROR] Low: org.openjdk.jmh.profile.LinuxPerfNormProfiler.process(BenchmarkResult, File, File) uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.profile.LinuxPerfNormProfiler] At LinuxPerfNormProfiler.java:[line 292] IIO_INEFFICIENT_LAST_INDEX_OF
[ERROR] Low: org.openjdk.jmh.profile.WinPerfAsmProfiler.readEvents(double, double) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.profile.WinPerfAsmProfiler] At WinPerfAsmProfiler.java:[line 221] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.profile.WinPerfAsmProfiler.readEvents(double, double) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.profile.WinPerfAsmProfiler] At WinPerfAsmProfiler.java:[line 222] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: new org.openjdk.jmh.runner.options.CommandLineOptions(String[]) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.runner.options.CommandLineOptions] At CommandLineOptions.java:[line 365] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.runner.options.TimeValue.fromString(String) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.runner.options.TimeValue] At TimeValue.java:[line 179] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.runner.options.TimeValue.fromString(String) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.runner.options.TimeValue] At TimeValue.java:[line 182] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.util.JDKVersion.parseMajor(String) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.util.JDKVersion] At JDKVersion.java:[line 32] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.util.JDKVersion.parseMajor(String) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.util.JDKVersion] At JDKVersion.java:[line 41] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.util.JDKVersion.parseMajor(String) uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.util.JDKVersion] At JDKVersion.java:[line 50] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.util.Utils.getPid() uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.util.Utils] At Utils.java:[line 429] IIO_INEFFICIENT_INDEX_OF
[ERROR] Low: org.openjdk.jmh.util.Utils.getPid() uses String.indexOf(String) instead of String.indexOf(int) [org.openjdk.jmh.util.Utils] At Utils.java:[line 432] IIO_INEFFICIENT_INDEX_OF
[INFO] 


To see bug detail using the Spotbugs GUI, use the following command "mvn spotbugs:gui"



[INFO] 
[INFO] --------------< org.openjdk.jmh:jmh-generator-annprocess >--------------
[INFO] Building JMH Generators: Annotation Processors 1.29-SNAPSHOT      [3/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-generator-annprocess >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-generator-annprocess ---
[INFO] Fork Value is true
[INFO] Done SpotBugs Analysis....
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-generator-annprocess <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-generator-annprocess ---
[INFO] BugInstance size is 0
[INFO] Error size is 0
[INFO] No errors/warnings found
[INFO] 
[INFO] --------------------< org.openjdk.jmh:jmh-core-it >---------------------
[INFO] Building JMH Core Integration Tests 1.29-SNAPSHOT                 [4/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-core-it >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-core-it ---
[INFO] Fork Value is true
[INFO] Done SpotBugs Analysis....
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-core-it <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-core-it ---
[INFO] BugInstance size is 0
[INFO] Error size is 0
[INFO] No errors/warnings found
[INFO] 
[INFO] --------------< org.openjdk.jmh:jmh-generator-reflection >--------------
[INFO] Building JMH Generators: Reflection 1.29-SNAPSHOT                 [5/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-generator-reflection >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-generator-reflection ---
[INFO] Fork Value is true
[INFO] Done SpotBugs Analysis....
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-generator-reflection <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-generator-reflection ---
[INFO] BugInstance size is 1
[INFO] Error size is 0
[INFO] Total bugs: 1
[ERROR] Low: org.openjdk.jmh.generators.reflection.RFClassInfo.getName() uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.generators.reflection.RFClassInfo] At RFClassInfo.java:[line 59] IIO_INEFFICIENT_LAST_INDEX_OF
[INFO] 


To see bug detail using the Spotbugs GUI, use the following command "mvn spotbugs:gui"



[INFO] 
[INFO] -----------------< org.openjdk.jmh:jmh-generator-asm >------------------
[INFO] Building JMH Generators: ASM 1.29-SNAPSHOT                        [6/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-generator-asm >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-generator-asm ---
[INFO] Fork Value is true
[INFO] Done SpotBugs Analysis....
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-generator-asm <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-generator-asm ---
[INFO] BugInstance size is 15
[INFO] Error size is 0
[INFO] Total bugs: 15
[ERROR] Medium: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMClassInfo.isEnum() [org.openjdk.jmh.generators.asm.ASMClassInfo] At ASMClassInfo.java:[line 215] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMClassInfo.isAbstract() [org.openjdk.jmh.generators.asm.ASMClassInfo] At ASMClassInfo.java:[line 190] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMClassInfo.isFinal() [org.openjdk.jmh.generators.asm.ASMClassInfo] At ASMClassInfo.java:[line 205] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMClassInfo.isPublic() [org.openjdk.jmh.generators.asm.ASMClassInfo] At ASMClassInfo.java:[line 195] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMClassInfo.isStrictFP() [org.openjdk.jmh.generators.asm.ASMClassInfo] At ASMClassInfo.java:[line 200] BIT_SIGNED_CHECK
[ERROR] Low: org.openjdk.jmh.generators.asm.ASMClassInfo.visit(int, int, String, String, String, String[]) uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.generators.asm.ASMClassInfo] At ASMClassInfo.java:[line 83] IIO_INEFFICIENT_LAST_INDEX_OF
[ERROR] Low: org.openjdk.jmh.generators.asm.ASMClassInfo.visit(int, int, String, String, String, String[]) uses String.lastIndexOf(String) instead of String.lastIndexOf(int) [org.openjdk.jmh.generators.asm.ASMClassInfo] At ASMClassInfo.java:[line 86] IIO_INEFFICIENT_LAST_INDEX_OF
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMFieldInfo.isFinal() [org.openjdk.jmh.generators.asm.ASMFieldInfo] At ASMFieldInfo.java:[line 78] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMFieldInfo.isPublic() [org.openjdk.jmh.generators.asm.ASMFieldInfo] At ASMFieldInfo.java:[line 68] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMFieldInfo.isStatic() [org.openjdk.jmh.generators.asm.ASMFieldInfo] At ASMFieldInfo.java:[line 73] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMMethodInfo.isAbstract() [org.openjdk.jmh.generators.asm.ASMMethodInfo] At ASMMethodInfo.java:[line 121] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMMethodInfo.isPublic() [org.openjdk.jmh.generators.asm.ASMMethodInfo] At ASMMethodInfo.java:[line 116] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMMethodInfo.isStatic() [org.openjdk.jmh.generators.asm.ASMMethodInfo] At ASMMethodInfo.java:[line 136] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMMethodInfo.isStrictFP() [org.openjdk.jmh.generators.asm.ASMMethodInfo] At ASMMethodInfo.java:[line 131] BIT_SIGNED_CHECK
[ERROR] Low: Check for sign of bitwise operation in org.openjdk.jmh.generators.asm.ASMMethodInfo.isSynchronized() [org.openjdk.jmh.generators.asm.ASMMethodInfo] At ASMMethodInfo.java:[line 126] BIT_SIGNED_CHECK
[INFO] 


To see bug detail using the Spotbugs GUI, use the following command "mvn spotbugs:gui"



[INFO] 
[INFO] --------------------< org.openjdk.jmh:jmh-core-ct >---------------------
[INFO] Building JMH Core Compilation Tests 1.29-SNAPSHOT                 [7/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-core-ct >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-core-ct ---
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-core-ct <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-core-ct ---
[INFO] 
[INFO] ----------------< org.openjdk.jmh:jmh-core-benchmarks >-----------------
[INFO] Building JMH Core Benchmarks 1.29-SNAPSHOT                        [8/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-core-benchmarks >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-core-benchmarks ---
[INFO] Fork Value is true
[INFO] Done SpotBugs Analysis....
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-core-benchmarks <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-core-benchmarks ---
[INFO] BugInstance size is 7
[INFO] Error size is 0
[INFO] Total bugs: 7
[ERROR] Medium: Format string should use %n rather than \n in org.openjdk.jmh.validation.tests.BlackholeConsumeCPUTest.runWith(PrintWriter, Options) [org.openjdk.jmh.validation.tests.BlackholeConsumeCPUTest] At BlackholeConsumeCPUTest.java:[line 72] VA_FORMAT_STRING_USES_NEWLINE
[ERROR] Medium: Format string should use %n rather than \n in org.openjdk.jmh.validation.tests.CompilerHintsTest.doWith(Options, PrintWriter, String, String) [org.openjdk.jmh.validation.tests.CompilerHintsTest] At CompilerHintsTest.java:[line 83] VA_FORMAT_STRING_USES_NEWLINE
[ERROR] Medium: Format string should use %n rather than \n in org.openjdk.jmh.validation.tests.HelperMethodsTest.runWith(PrintWriter, Options) [org.openjdk.jmh.validation.tests.HelperMethodsTest] At HelperMethodsTest.java:[line 67] VA_FORMAT_STRING_USES_NEWLINE
[ERROR] Medium: Format string should use %n rather than \n in org.openjdk.jmh.validation.tests.HelperMethodsTest.runWith(PrintWriter, Options) [org.openjdk.jmh.validation.tests.HelperMethodsTest] At HelperMethodsTest.java:[line 85] VA_FORMAT_STRING_USES_NEWLINE
[ERROR] Medium: Format string should use %n rather than \n in org.openjdk.jmh.validation.tests.TimingMeasurementsTest.doCurrentTimeMillis(PrintWriter, Options, String, boolean) [org.openjdk.jmh.validation.tests.TimingMeasurementsTest] At TimingMeasurementsTest.java:[line 138] VA_FORMAT_STRING_USES_NEWLINE
[ERROR] Medium: Format string should use %n rather than \n in org.openjdk.jmh.validation.tests.TimingMeasurementsTest.doEmpty(PrintWriter, Options, Mode, boolean) [org.openjdk.jmh.validation.tests.TimingMeasurementsTest] At TimingMeasurementsTest.java:[line 106] VA_FORMAT_STRING_USES_NEWLINE
[ERROR] Medium: Format string should use %n rather than \n in org.openjdk.jmh.validation.tests.TimingMeasurementsTest.doNanoTime(PrintWriter, Options, String, boolean) [org.openjdk.jmh.validation.tests.TimingMeasurementsTest] At TimingMeasurementsTest.java:[line 122] VA_FORMAT_STRING_USES_NEWLINE
[INFO] 


To see bug detail using the Spotbugs GUI, use the following command "mvn spotbugs:gui"



[INFO] 
[INFO] --------------------< org.openjdk.jmh:jmh-samples >---------------------
[INFO] Building JMH Samples 1.29-SNAPSHOT                                [9/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-samples >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-samples ---
[INFO] Fork Value is true
[INFO] Done SpotBugs Analysis....
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-samples <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-samples ---
[INFO] BugInstance size is 4
[INFO] Error size is 0
[INFO] Total bugs: 4
[ERROR] Medium: The method name org.openjdk.jmh.samples.jmh_generated.JMHSample_30_Interrupts_Q_jmhTest.Q_AverageTime(InfraControl, ThreadParams) doesn't start with a lower case letter [org.openjdk.jmh.samples.jmh_generated.JMHSample_30_Interrupts_Q_jmhTest] At JMHSample_30_Interrupts_Q_jmhTest.java:[lines 232-371] NM_METHOD_NAMING_CONVENTION
[ERROR] Medium: The method name org.openjdk.jmh.samples.jmh_generated.JMHSample_30_Interrupts_Q_jmhTest.Q_SampleTime(InfraControl, ThreadParams) doesn't start with a lower case letter [org.openjdk.jmh.samples.jmh_generated.JMHSample_30_Interrupts_Q_jmhTest] At JMHSample_30_Interrupts_Q_jmhTest.java:[lines 402-543] NM_METHOD_NAMING_CONVENTION
[ERROR] Medium: The method name org.openjdk.jmh.samples.jmh_generated.JMHSample_30_Interrupts_Q_jmhTest.Q_SingleShotTime(InfraControl, ThreadParams) doesn't start with a lower case letter [org.openjdk.jmh.samples.jmh_generated.JMHSample_30_Interrupts_Q_jmhTest] At JMHSample_30_Interrupts_Q_jmhTest.java:[lines 612-711] NM_METHOD_NAMING_CONVENTION
[ERROR] Medium: The method name org.openjdk.jmh.samples.jmh_generated.JMHSample_30_Interrupts_Q_jmhTest.Q_Throughput(InfraControl, ThreadParams) doesn't start with a lower case letter [org.openjdk.jmh.samples.jmh_generated.JMHSample_30_Interrupts_Q_jmhTest] At JMHSample_30_Interrupts_Q_jmhTest.java:[lines 62-201] NM_METHOD_NAMING_CONVENTION
[INFO] 


To see bug detail using the Spotbugs GUI, use the following command "mvn spotbugs:gui"



[INFO] 
[INFO] ---------------< org.openjdk.jmh:jmh-generator-bytecode >---------------
[INFO] Building JMH Generators: Bytecode 1.29-SNAPSHOT                  [10/15]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-generator-bytecode >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-generator-bytecode ---
[INFO] Fork Value is true
[INFO] Done SpotBugs Analysis....
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-generator-bytecode <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-generator-bytecode ---
[INFO] BugInstance size is 0
[INFO] Error size is 0
[INFO] No errors/warnings found
[INFO] 
[INFO] -------------------< org.openjdk.jmh:jmh-archetypes >-------------------
[INFO] Building JMH Archetypes 1.29-SNAPSHOT                            [11/15]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-archetypes >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-archetypes ---
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-archetypes <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-archetypes ---
[INFO] 
[INFO] ------------< org.openjdk.jmh:jmh-java-benchmark-archetype >------------
[INFO] Building JMH Benchmark Archetype: Java 1.29-SNAPSHOT             [12/15]
[INFO] --------------------------[ maven-archetype ]---------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-java-benchmark-archetype >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-java-benchmark-archetype ---
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-java-benchmark-archetype <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-java-benchmark-archetype ---
[INFO] 
[INFO] -----------< org.openjdk.jmh:jmh-scala-benchmark-archetype >------------
[INFO] Building JMH Benchmark Archetype: Scala 1.29-SNAPSHOT            [13/15]
[INFO] --------------------------[ maven-archetype ]---------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-scala-benchmark-archetype >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-scala-benchmark-archetype ---
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-scala-benchmark-archetype <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-scala-benchmark-archetype ---
[INFO] 
[INFO] -----------< org.openjdk.jmh:jmh-groovy-benchmark-archetype >-----------
[INFO] Building JMH Benchmark Archetype: Groovy 1.29-SNAPSHOT           [14/15]
[INFO] --------------------------[ maven-archetype ]---------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-groovy-benchmark-archetype >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-groovy-benchmark-archetype ---
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-groovy-benchmark-archetype <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-groovy-benchmark-archetype ---
[INFO] 
[INFO] -----------< org.openjdk.jmh:jmh-kotlin-benchmark-archetype >-----------
[INFO] Building JMH Benchmark Archetype: Kotlin 1.29-SNAPSHOT           [15/15]
[INFO] --------------------------[ maven-archetype ]---------------------------
[INFO] 
[INFO] >>> spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) > :spotbugs @ jmh-kotlin-benchmark-archetype >>>
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:spotbugs (spotbugs) @ jmh-kotlin-benchmark-archetype ---
[INFO] 
[INFO] <<< spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) < :spotbugs @ jmh-kotlin-benchmark-archetype <<<
[INFO] 
[INFO] 
[INFO] --- spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) @ jmh-kotlin-benchmark-archetype ---
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for Java Microbenchmark Harness Parent 1.29-SNAPSHOT:
[INFO] 
[INFO] Java Microbenchmark Harness Parent ................. SUCCESS [  0.866 s]
[INFO] JMH Core ........................................... FAILURE [  6.447 s]
[INFO] JMH Generators: Annotation Processors .............. SUCCESS [  2.111 s]
[INFO] JMH Core Integration Tests ......................... SUCCESS [  1.562 s]
[INFO] JMH Generators: Reflection ......................... FAILURE [  1.580 s]
[INFO] JMH Generators: ASM ................................ FAILURE [  2.014 s]
[INFO] JMH Core Compilation Tests ......................... SUCCESS [  0.013 s]
[INFO] JMH Core Benchmarks ................................ FAILURE [  6.501 s]
[INFO] JMH Samples ........................................ FAILURE [  6.792 s]
[INFO] JMH Generators: Bytecode ........................... SUCCESS [  1.563 s]
[INFO] JMH Archetypes ..................................... SUCCESS [  0.003 s]
[INFO] JMH Benchmark Archetype: Java ...................... SUCCESS [  0.351 s]
[INFO] JMH Benchmark Archetype: Scala ..................... SUCCESS [  0.005 s]
[INFO] JMH Benchmark Archetype: Groovy .................... SUCCESS [  0.004 s]
[INFO] JMH Benchmark Archetype: Kotlin .................... SUCCESS [  0.017 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  30.089 s
[INFO] Finished at: 2022-01-16T13:27:34+08:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal com.github.spotbugs:spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) on project jmh-core: failed with 19 bugs and 0 errors -> [Help 1]
[ERROR] Failed to execute goal com.github.spotbugs:spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) on project jmh-generator-reflection: failed with 1 bugs and 0 errors -> [Help 1]
[ERROR] Failed to execute goal com.github.spotbugs:spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) on project jmh-generator-asm: failed with 15 bugs and 0 errors -> [Help 1]
[ERROR] Failed to execute goal com.github.spotbugs:spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) on project jmh-core-benchmarks: failed with 7 bugs and 0 errors -> [Help 1]
[ERROR] Failed to execute goal com.github.spotbugs:spotbugs-maven-plugin:4.2.3-SNAPSHOT:check (default-cli) on project jmh-samples: failed with 4 bugs and 0 errors -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <args> -rf :jmh-core
[INFO] Build failures were ignored.
