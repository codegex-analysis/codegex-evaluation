JUA:  Asserting value of instanceof in tests is not recommended.  (JUA_DONT_ASSERT_INSTANCEOF_IN_TESTS)
CNT: Rough value of known constant found (CNT_ROUGH_CONSTANT_VALUE)
NP: Method with Boolean return type returns explicit null (NP_BOOLEAN_RETURN_NULL)
SW: Certain swing methods needs to be invoked in Swing thread (SW_SWING_METHODS_INVOKED_IN_SWING_THREAD)
FI: Finalizer only nulls fields (FI_FINALIZER_ONLY_NULLS_FIELDS)
FI: Finalizer nulls fields (FI_FINALIZER_NULLS_FIELDS)
UI: Usage of GetResource may be unsafe if class is extended (UI_INHERITANCE_UNSAFE_GETRESOURCE)
AM: Creates an empty zip file entry (AM_CREATES_EMPTY_ZIP_FILE_ENTRY)
AM: Creates an empty jar file entry (AM_CREATES_EMPTY_JAR_FILE_ENTRY)
IMSE: Dubious catching of IllegalMonitorStateException (IMSE_DONT_CATCH_IMSE)
CN: Class defines clone() but doesn’t implement Cloneable (CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE)
CN: Class implements Cloneable but does not define or use clone method (CN_IDIOM)
CN: clone method does not call super.clone() (CN_IDIOM_NO_SUPER_CALL)
DE: Method might drop exception (DE_MIGHT_DROP)
DE: Method might ignore exception (DE_MIGHT_IGNORE)
Dm: Method invokes System.exit(…) (DM_EXIT)
Nm: Use of identifier that is a keyword in later versions of Java (NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER)
Nm: Use of identifier that is a keyword in later versions of Java (NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER)
JCIP: Fields of immutable classes should be final (JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS)
Dm: Method invokes dangerous method runFinalizersOnExit (DM_RUN_FINALIZERS_ON_EXIT)
NP: equals() method does not check for null argument (NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT)
FI: Empty finalizer should be deleted (FI_EMPTY)
FI: Finalizer nullifies superclass finalizer (FI_NULLIFY_SUPER)
FI: Finalizer does nothing but call superclass finalizer (FI_USELESS)
FI: Finalizer does not call superclass finalizer (FI_MISSING_SUPER_CALL)
FI: Explicit invocation of finalizer (FI_EXPLICIT_INVOCATION)
Eq: Equals checks for incompatible operand (EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS)
Eq: equals method fails for subtypes (EQ_GETCLASS_AND_CLASS_CONSTANT)
Eq: Covariant equals() method defined (EQ_SELF_NO_OBJECT)
Co: Covariant compareTo() method defined (CO_SELF_NO_OBJECT)
Co: compareTo()/compare() returns Integer.MIN_VALUE (CO_COMPARETO_RESULTS_MIN_VALUE)
Co: compareTo()/compare() incorrectly handles float or double value (CO_COMPARETO_INCORRECT_FLOATING)
RV: Negating the result of compareTo()/compare() (RV_NEGATING_RESULT_OF_COMPARETO)
ES: Comparison of String objects using == or != (ES_COMPARING_STRINGS_WITH_EQ)
ES: Comparison of String parameter using == or != (ES_COMPARING_PARAMETER_STRING_WITH_EQ)
Eq: Class defines compareTo(…) and uses Object.equals() (EQ_COMPARETO_USE_OBJECT_EQUALS)
HE: Class defines hashCode() and uses Object.equals() (HE_HASHCODE_USE_OBJECT_EQUALS)
HE: Class defines hashCode() but not equals() (HE_HASHCODE_NO_EQUALS)
HE: Class defines equals() and uses Object.hashCode() (HE_EQUALS_USE_HASHCODE)
HE: Class inherits equals() and uses Object.hashCode() (HE_INHERITS_EQUALS_USE_HASHCODE)
HE: Class defines equals() but not hashCode() (HE_EQUALS_NO_HASHCODE)
Eq: Abstract class defines covariant equals() method (EQ_ABSTRACT_SELF)
Co: Abstract class defines covariant compareTo() method (CO_ABSTRACT_SELF)
IC: Superclass uses subclass during initialization (IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION)
SI: Static initializer creates instance before all static final fields assigned (SI_INSTANCE_BEFORE_FINALS_ASSIGNED)
It: Iterator next() method can’t throw NoSuchElementException (IT_NO_SUCH_ELEMENT)
ME: Enum field is public and mutable (ME_MUTABLE_ENUM_FIELD)
ME: Public enum method unconditionally sets its field (ME_ENUM_FIELD_SETTER)
Nm: Method names should start with a lower case letter (NM_METHOD_NAMING_CONVENTION)
Nm: Field names should start with a lower case letter (NM_FIELD_NAMING_CONVENTION)
Nm: Class names shouldn’t shadow simple name of implemented interface (NM_SAME_SIMPLE_NAME_AS_INTERFACE)
Nm: Class names shouldn’t shadow simple name of superclass (NM_SAME_SIMPLE_NAME_AS_SUPERCLASS)
Nm: Class names should start with an upper case letter (NM_CLASS_NAMING_CONVENTION)
Nm: Very confusing method names (but perhaps intentional) (NM_VERY_CONFUSING_INTENTIONAL)
Nm: Method doesn’t override method in superclass due to wrong package for parameter (NM_WRONG_PACKAGE_INTENTIONAL)
Nm: Confusing method names (NM_CONFUSING)
Nm: Class is not derived from an Exception, even though it is named as such (NM_CLASS_NOT_EXCEPTION)
RR: Method ignores results of InputStream.read() (RR_NOT_CHECKED)
RR: Method ignores results of InputStream.skip() (SR_NOT_CHECKED)
Se: Class is Serializable but its superclass doesn’t define a void constructor (SE_NO_SUITABLE_CONSTRUCTOR)
Se: Class is Externalizable but doesn’t define a void constructor (SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION)
Se: Comparator doesn’t implement Serializable (SE_COMPARATOR_SHOULD_BE_SERIALIZABLE)
SnVI: Class is Serializable, but doesn’t define serialVersionUID (SE_NO_SERIALVERSIONID)
Se: The readResolve method must be declared with a return type of Object. (SE_READ_RESOLVE_MUST_RETURN_OBJECT)
Se: Transient field that isn’t set by deserialization. (SE_TRANSIENT_FIELD_NOT_RESTORED)
Se: serialVersionUID isn’t final (SE_NONFINAL_SERIALVERSIONID)
Se: serialVersionUID isn’t static (SE_NONSTATIC_SERIALVERSIONID)
Se: serialVersionUID isn’t long (SE_NONLONG_SERIALVERSIONID)
Se: Non-transient non-serializable instance field in serializable class (SE_BAD_FIELD)
Se: Serializable inner class (SE_INNER_CLASS)
Se: Non-serializable class has a serializable inner class (SE_BAD_FIELD_INNER_CLASS)
Se: Non-serializable value stored into instance field of a serializable class (SE_BAD_FIELD_STORE)
RV: Method ignores exceptional return value (RV_RETURN_VALUE_IGNORED_BAD_PRACTICE)
NP: toString method may return null (NP_TOSTRING_COULD_RETURN_NULL)
NP: Clone method may return null (NP_CLONE_COULD_RETURN_NULL)
OS: Method may fail to close stream (OS_OPEN_STREAM)
OS: Method may fail to close stream on exception (OS_OPEN_STREAM_EXCEPTION_PATH)
RC: Suspicious reference comparison to constant (RC_REF_COMPARISON_BAD_PRACTICE)
RC: Suspicious reference comparison of Boolean values (RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN)
FS: Format string should use %n rather than n (VA_FORMAT_STRING_USES_NEWLINE)
BIT: Check for sign of bitwise operation (BIT_SIGNED_CHECK)
ODR: Method may fail to close database resource (ODR_OPEN_DATABASE_RESOURCE)
ODR: Method may fail to close database resource on exception (ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH)
ISC: Needless instantiation of class that only supplies static methods (ISC_INSTANTIATE_STATIC_CLASS)
DMI: Random object created and used only once (DMI_RANDOM_USED_ONLY_ONCE)
BC: Equals method should not assume anything about the type of its argument (BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS)
J2EE: Store of non serializable object into HttpSession (J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION)
GC: Unchecked type in generic call (GC_UNCHECKED_TYPE_IN_GENERIC_CALL)
PZ: Don’t reuse entry objects in iterators (PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS)
DMI: Adding elements of an entry set may fail due to reuse of Entry objects (DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS)
DMI: Don’t use removeAll to clear a collection (DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION)
CN: Super method is annotated with @OverridingMethodsMustInvokeSuper, but the overriding method isn’t calling the super method. (OVERRIDING_METHODS_MUST_INVOKE_SUPER)
NP: Method with Optional return type returns explicit null (NP_OPTIONAL_RETURN_NULL)
NP: Non-null field is not initialized (NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR)
VR: Class makes reference to unresolvable class or method (VR_UNRESOLVABLE_REFERENCE)
IL: An apparent infinite loop (IL_INFINITE_LOOP)
IO: Doomed attempt to append to an object output stream (IO_APPENDING_TO_OBJECT_OUTPUT_STREAM)
IL: An apparent infinite recursive loop (IL_INFINITE_RECURSIVE_LOOP)
IL: A collection is added to itself (IL_CONTAINER_ADDED_TO_ITSELF)
RpC: Repeated conditional tests (RpC_REPEATED_CONDITIONAL_TEST)
FL: Method performs math using floating point precision (FL_MATH_USING_FLOAT_PRECISION)
CAA: Possibly incompatible element is stored in covariant array (CAA_COVARIANT_ARRAY_ELEMENT_STORE)
Dm: Useless/vacuous call to EasyMock method (DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD)
Dm: Futile attempt to change max pool size of ScheduledThreadPoolExecutor (DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR)
DMI: BigDecimal constructed from double that isn’t represented precisely (DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE)
Dm: Creation of ScheduledThreadPoolExecutor with zero core threads (DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS)
Dm: Can’t use reflection to check for presence of annotation without runtime retention (DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION)
NP: Method does not check for null argument (NP_ARGUMENT_MIGHT_BE_NULL)
RV: Bad attempt to compute absolute value of signed random integer (RV_ABSOLUTE_VALUE_OF_RANDOM_INT)
RV: Bad attempt to compute absolute value of signed 32-bit hashcode (RV_ABSOLUTE_VALUE_OF_HASHCODE)
RV: Random value from 0 to 1 is coerced to the integer 0 (RV_01_TO_INT)
Dm: Incorrect combination of Math.max and Math.min (DM_INVALID_MIN_MAX)
Eq: equals method compares class names rather than class objects (EQ_COMPARING_CLASS_NAMES)
Eq: equals method always returns true (EQ_ALWAYS_TRUE)
Eq: equals method always returns false (EQ_ALWAYS_FALSE)
Eq: equals method overrides equals in superclass and may not be symmetric (EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC)
Eq: Covariant equals() method defined for enum (EQ_DONT_DEFINE_EQUALS_FOR_ENUM)
Eq: Covariant equals() method defined, Object.equals(Object) inherited (EQ_SELF_USE_OBJECT)
Eq: equals() method defined that doesn’t override Object.equals(Object) (EQ_OTHER_USE_OBJECT)
Eq: equals() method defined that doesn’t override equals(Object) (EQ_OTHER_NO_OBJECT)
HE: Signature declares use of unhashable class in hashed construct (HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS)
HE: Use of class without a hashCode() method in a hashed data structure (HE_USE_OF_UNHASHABLE_CLASS)
UR: Uninitialized read of field in constructor (UR_UNINIT_READ)
UR: Uninitialized read of field method called from constructor of superclass (UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR)
Nm: Very confusing method names (NM_VERY_CONFUSING)
Nm: Method doesn’t override method in superclass due to wrong package for parameter (NM_WRONG_PACKAGE)
Nm: Apparent method/constructor confusion (NM_METHOD_CONSTRUCTOR_CONFUSION)
Nm: Class defines hashcode(); should it be hashCode()? (NM_LCASE_HASHCODE)
Nm: Class defines tostring(); should it be toString()? (NM_LCASE_TOSTRING)
Nm: Class defines equal(Object); should it be equals(Object)? (NM_BAD_EQUAL)
Se: The readResolve method must not be declared as a static method. (SE_READ_RESOLVE_IS_STATIC)
Se: Method must be private in order for serialization to work (SE_METHOD_MUST_BE_PRIVATE)
SF: Dead store due to switch statement fall through (SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH)
SF: Dead store due to switch statement fall through to throw (SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW)
NP: Read of unwritten field (NP_UNWRITTEN_FIELD)
UwF: Field only ever set to null (UWF_NULL_FIELD)
UwF: Unwritten field (UWF_UNWRITTEN_FIELD)
SIC: Deadly embrace of non-static inner class and thread local (SIC_THREADLOCAL_DEADLY_EMBRACE)
RANGE: Array index is out of bounds (RANGE_ARRAY_INDEX)
RANGE: Array offset is out of bounds (RANGE_ARRAY_OFFSET)
RANGE: Array length is out of bounds (RANGE_ARRAY_LENGTH)
RANGE: String index is out of bounds (RANGE_STRING_INDEX)
RV: Method ignores return value (RV_RETURN_VALUE_IGNORED)
RV: Exception created and dropped rather than thrown (RV_EXCEPTION_NOT_THROWN)
RV: Code checks for specific values returned by compareTo (RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE)
NP: Null pointer dereference (NP_ALWAYS_NULL)
NP: close() invoked on a value that is always null (NP_CLOSING_NULL)
NP: Store of null value into field annotated @Nonnull (NP_STORE_INTO_NONNULL_FIELD)
NP: Null pointer dereference in method on exception path (NP_ALWAYS_NULL_EXCEPTION)
NP: Possible null pointer dereference (NP_NULL_ON_SOME_PATH)
NP: Possible null pointer dereference in method on exception path (NP_NULL_ON_SOME_PATH_EXCEPTION)
NP: Method call passes null for non-null parameter (NP_NULL_PARAM_DEREF)
NP: Non-virtual method call passes null for non-null parameter (NP_NULL_PARAM_DEREF_NONVIRTUAL)
NP: Method call passes null for non-null parameter (NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS)
NP: Method call passes null to a non-null parameter (NP_NONNULL_PARAM_VIOLATION)
NP: Method may return null, but is declared @Nonnull (NP_NONNULL_RETURN_VIOLATION)
NP: Null value is guaranteed to be dereferenced (NP_GUARANTEED_DEREF)
NP: Value is null and guaranteed to be dereferenced on exception path (NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH)
DMI: Reversed method arguments (DMI_ARGUMENTS_WRONG_ORDER)
RCN: Nullcheck of value previously dereferenced (RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE)
RC: Suspicious reference comparison (RC_REF_COMPARISON)
VA: Primitive array passed to function expecting a variable number of object arguments (VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG)
EC: Using pointer equality to compare different types (EC_UNRELATED_TYPES_USING_POINTER_EQUALITY)
EC: Call to equals() comparing different types (EC_UNRELATED_TYPES)
EC: equals() used to compare array and nonarray (EC_ARRAY_AND_NONARRAY)
EC: Call to equals(null) (EC_NULL_ARG)
EC: Call to equals() comparing different interface types (EC_UNRELATED_INTERFACES)
EC: Call to equals() comparing unrelated class and interface (EC_UNRELATED_CLASS_AND_INTERFACE)
SA: Self assignment of local rather than assignment to field (SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD)
INT: Bad comparison of int value with long constant (INT_BAD_COMPARISON_WITH_INT_VALUE)
INT: Bad comparison of signed byte (INT_BAD_COMPARISON_WITH_SIGNED_BYTE)
INT: Bad comparison of nonnegative value with negative constant or zero (INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE)
BIT: Bitwise add of signed byte value (BIT_ADD_OF_SIGNED_BYTE)
BIT: Bitwise OR of signed byte value (BIT_IOR_OF_SIGNED_BYTE)
BIT: Check for sign of bitwise operation involving negative number (BIT_SIGNED_CHECK_HIGH_BIT)
BIT: Incompatible bit masks (BIT_AND)
BIT: Check to see if ((…) & 0) == 0 (BIT_AND_ZZ)
BIT: Incompatible bit masks (BIT_IOR)
SA: Self assignment of field (SA_FIELD_SELF_ASSIGNMENT)
SA: Nonsensical self computation involving a field (e.g., x & x) (SA_FIELD_SELF_COMPUTATION)
SA: Nonsensical self computation involving a variable (e.g., x & x) (SA_LOCAL_SELF_COMPUTATION)
SA: Self comparison of field with itself (SA_FIELD_SELF_COMPARISON)
SA: Self comparison of value with itself (SA_LOCAL_SELF_COMPARISON)
UMAC: Uncallable method defined in anonymous class (UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS)
IJU: JUnit assertion in run method will not be noticed by JUnit (IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD)
IJU: TestCase declares a bad suite method (IJU_BAD_SUITE_METHOD)
IJU: TestCase defines setUp that doesn’t call super.setUp() (IJU_SETUP_NO_SUPER)
IJU: TestCase defines tearDown that doesn’t call super.tearDown() (IJU_TEARDOWN_NO_SUPER)
IJU: TestCase implements a non-static suite method (IJU_SUITE_NOT_STATIC)
IJU: TestCase has no tests (IJU_NO_TESTS)
BOA: Class overrides a method implemented in super class Adapter wrongly (BOA_BADLY_OVERRIDDEN_ADAPTER)
SQL: Method attempts to access a result set field with index 0 (SQL_BAD_RESULTSET_ACCESS)
SQL: Method attempts to access a prepared statement parameter with index 0 (SQL_BAD_PREPARED_STATEMENT_ACCESS)
SIO: Unnecessary type check done using instanceof operator (SIO_SUPERFLUOUS_INSTANCEOF)
BAC: Bad Applet Constructor relies on uninitialized AppletStub (BAC_BAD_APPLET_CONSTRUCTOR)
EC: equals(…) used to compare incompatible arrays (EC_INCOMPATIBLE_ARRAY_COMPARE)
EC: Invocation of equals() on an array, which is equivalent to == (EC_BAD_ARRAY_COMPARE)
STI: Unneeded use of currentThread() call, to call interrupted() (STI_INTERRUPTED_ON_CURRENTTHREAD)
STI: Static Thread.interrupted() method invoked on thread instance (STI_INTERRUPTED_ON_UNKNOWNTHREAD)
DLS: Useless increment in return statement (DLS_DEAD_LOCAL_INCREMENT_IN_RETURN)
DLS: Dead store of class literal (DLS_DEAD_STORE_OF_CLASS_LITERAL)
IP: A parameter is dead upon entry to a method but overwritten (IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN)
MF: Method defines a variable that obscures a field (MF_METHOD_MASKS_FIELD)
MF: Class defines field that masks a superclass field (MF_CLASS_MASKS_FIELD)
FE: Doomed test for equality to NaN (FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER)
ICAST: int value converted to long and used as absolute time (ICAST_INT_2_LONG_AS_INSTANT)
ICAST: Integral value cast to double and then passed to Math.ceil (ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL)
ICAST: int value cast to float and then passed to Math.round (ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND)
NP: A known null value is checked to see if it is an instance of a type (NP_NULL_INSTANCEOF)
DMI: Double.longBitsToDouble invoked on an int (DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT)
BC: Impossible cast (BC_IMPOSSIBLE_CAST)
BC: Impossible downcast (BC_IMPOSSIBLE_DOWNCAST)
BC: Impossible downcast of toArray() result (BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY)
BC: instanceof will always return false (BC_IMPOSSIBLE_INSTANCEOF)
RE: “.” or “|” used for regular expression (RE_POSSIBLE_UNINTENDED_PATTERN)
RE: Invalid syntax for regular expression (RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION)
RE: File.separator used for regular expression (RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION)
DLS: Overwritten increment (DLS_OVERWRITTEN_INCREMENT)
BSHIFT: 32 bit int shifted by an amount not in the range -31..31 (ICAST_BAD_SHIFT_AMOUNT)
BSHIFT: Possible bad parsing of shift operation (BSHIFT_WRONG_ADD_PRIORITY)
IM: Integer multiply of result of integer remainder (IM_MULTIPLYING_RESULT_OF_IREM)
DMI: Invocation of hashCode on an array (DMI_INVOKING_HASHCODE_ON_ARRAY)
USELESS_STRING: Invocation of toString on an array (DMI_INVOKING_TOSTRING_ON_ARRAY)
USELESS_STRING: Invocation of toString on an unnamed array (DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY)
DMI: Bad constant value for month (DMI_BAD_MONTH)
DMI: hasNext method invokes next (DMI_CALLING_NEXT_FROM_HASNEXT)
QBA: Method assigns boolean literal in boolean expression (QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT)
GC: No relationship between generic parameter and method argument (GC_UNRELATED_TYPES)
DMI: Vacuous call to collections (DMI_VACUOUS_SELF_COLLECTION_CALL)
DMI: D’oh! A nonsensical method invocation (DMI_DOH)
DMI: Collections should not contain themselves (DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES)
TQ: Value without a type qualifier used where a value is required to have that qualifier (TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED)
TQ: Comparing values with incompatible type qualifiers (TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS)
TQ: Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required (TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED)
TQ: Value annotated as never carrying a type qualifier used where value carrying that qualifier is required (TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED)
TQ: Value that might not carry a type qualifier is always used in a way requires that type qualifier (TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK)
TQ: Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier (TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK)
FB: Unexpected/undesired warning from SpotBugs (FB_UNEXPECTED_WARNING)
FB: Missing expected or desired warning from SpotBugs (FB_MISSING_EXPECTED_WARNING)
SKIPPED: Class too big for analysis (SKIPPED_CLASS_TOO_BIG)
TEST: Unknown bug pattern (UNKNOWN)
TEST: Testing (TESTING)
TEST: Testing 1 (TESTING1)
TEST: Testing 2 (TESTING2)
TEST: Testing 3 (TESTING3)
OBL: Method may fail to clean up stream or resource (OBL_UNSATISFIED_OBLIGATION)
OBL: Method may fail to clean up stream or resource on checked exception (OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE)
LG: Potential lost logger changes due to weak reference in OpenJDK (LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE)
Dm: Consider using Locale parameterized version of invoked method (DM_CONVERT_CASE)
Dm: Reliance on default encoding (DM_DEFAULT_ENCODING)
DP: Method invoked that should be only be invoked inside a doPrivileged block (DP_DO_INSIDE_DO_PRIVILEGED)
DP: Classloaders should only be created inside doPrivileged block (DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED)
FI: Finalizer should be protected, not public (FI_PUBLIC_SHOULD_BE_PROTECTED)
MS: Public static method may expose internal representation by returning array (MS_EXPOSE_REP)
EI: May expose internal representation by returning reference to mutable object (EI_EXPOSE_REP)
EI2: May expose internal representation by incorporating reference to mutable object (EI_EXPOSE_REP2)
MS: May expose internal static state by storing a mutable object into a static field (EI_EXPOSE_STATIC_REP2)
MS: Field should be moved out of an interface and made package protected (MS_OOI_PKGPROTECT)
MS: Field should be both final and package protected (MS_FINAL_PKGPROTECT)
MS: Field isn’t final but should be (MS_SHOULD_BE_FINAL)
MS: Field isn’t final but should be refactored to be so (MS_SHOULD_BE_REFACTORED_TO_BE_FINAL)
MS: Field should be package protected (MS_PKGPROTECT)
MS: Field is a mutable Hashtable (MS_MUTABLE_HASHTABLE)
MS: Field is a mutable array (MS_MUTABLE_ARRAY)
MS: Field is a mutable collection (MS_MUTABLE_COLLECTION)
MS: Field is a mutable collection which should be package protected (MS_MUTABLE_COLLECTION_PKGPROTECT)
MS: Field isn’t final and can’t be protected from malicious code (MS_CANNOT_BE_FINAL)
AT: Sequence of calls to concurrent abstraction may not be atomic (AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION)
STCAL: Static Calendar field (STCAL_STATIC_CALENDAR_INSTANCE)
STCAL: Static DateFormat (STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE)
STCAL: Call to static Calendar (STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE)
STCAL: Call to static DateFormat (STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE)
NP: Synchronize and null check on the same field. (NP_SYNC_AND_NULL_CHECK_FIELD)
VO: A volatile reference to an array doesn’t treat the array elements as volatile (VO_VOLATILE_REFERENCE_TO_ARRAY)
VO: An increment to a volatile field isn’t atomic (VO_VOLATILE_INCREMENT)
Dm: Monitor wait() called on Condition (DM_MONITOR_WAIT_ON_CONDITION)
Dm: A thread was created using the default empty run method (DM_USELESS_THREAD)
DC: Possible double check of field (DC_DOUBLECHECK)
DC: Possible exposure of partially initialized object (DC_PARTIALLY_CONSTRUCTED)
DL: Synchronization on interned String (DL_SYNCHRONIZATION_ON_SHARED_CONSTANT)
DL: Synchronization on Boolean (DL_SYNCHRONIZATION_ON_BOOLEAN)
DL: Synchronization on boxed primitive (DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE)
DL: Synchronization on boxed primitive values (DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE)
WL: Synchronization on getClass rather than class literal (WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL)
ESync: Empty synchronized block (ESync_EMPTY_SYNC)
MSF: Mutable servlet field (MSF_MUTABLE_SERVLET_FIELD)
IS: Inconsistent synchronization (IS2_INCONSISTENT_SYNC)
NN: Naked notify (NN_NAKED_NOTIFY)
Ru: Invokes run on a thread (did you mean to start it instead?) (RU_INVOKE_RUN)
SP: Method spins on field (SP_SPIN_ON_FIELD)
TLW: Wait with two locks held (TLW_TWO_LOCK_WAIT)
UW: Unconditional wait (UW_UNCOND_WAIT)
UG: Unsynchronized get method, synchronized set method (UG_SYNC_SET_UNSYNC_GET)
IS: Field not guarded against concurrent access (IS_FIELD_NOT_GUARDED)
ML: Synchronization on field in futile attempt to guard that field (ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD)
ML: Method synchronizes on an updated field (ML_SYNC_ON_UPDATED_FIELD)
WS: Class’s writeObject() method is synchronized but nothing else is (WS_WRITEOBJECT_SYNC)
RS: Class’s readObject() method is synchronized (RS_READOBJECT_SYNC)
SC: Constructor invokes Thread.start() (SC_START_IN_CTOR)
Wa: Wait not in loop (WA_NOT_IN_LOOP)
Wa: Condition.await() not in loop (WA_AWAIT_NOT_IN_LOOP)
No: Using notify() rather than notifyAll() (NO_NOTIFY_NOT_NOTIFYALL)
UL: Method does not release lock on all paths (UL_UNRELEASED_LOCK)
UL: Method does not release lock on all exception paths (UL_UNRELEASED_LOCK_EXCEPTION_PATH)
MWN: Mismatched wait() (MWN_MISMATCHED_WAIT)
MWN: Mismatched notify() (MWN_MISMATCHED_NOTIFY)
LI: Incorrect lazy initialization of static field (LI_LAZY_INIT_STATIC)
LI: Incorrect lazy initialization and update of static field (LI_LAZY_INIT_UPDATE_STATIC)
JLM: Synchronization performed on util.concurrent instance (JLM_JSR166_UTILCONCURRENT_MONITORENTER)
JLM: Using monitor style wait methods on util.concurrent abstraction (JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT)
JLM: Synchronization performed on Lock (JLM_JSR166_LOCK_MONITORENTER)
SWL: Method calls Thread.sleep() with a lock held (SWL_SLEEP_WITH_LOCK_HELD)
RV: Return value of putIfAbsent ignored, value passed to putIfAbsent reused (RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED)
NOISE: Bogus warning about a null pointer dereference (NOISE_NULL_DEREFERENCE)
NOISE: Bogus warning about a method call (NOISE_METHOD_CALL)
NOISE: Bogus warning about a field reference (NOISE_FIELD_REFERENCE)
NOISE: Bogus warning about an operation (NOISE_OPERATION)
HSC: Huge string constants is duplicated across multiple class files (HSC_HUGE_SHARED_STRING_CONSTANT)
Dm: The equals and hashCode methods of URL are blocking (DMI_BLOCKING_METHODS_ON_URL)
Dm: Maps and sets of URLs can be performance hogs (DMI_COLLECTION_OF_URLS)
Dm: Method invokes inefficient new String(String) constructor (DM_STRING_CTOR)
Dm: Method invokes inefficient new String() constructor (DM_STRING_VOID_CTOR)
Dm: Method invokes toString() method on a String (DM_STRING_TOSTRING)
Dm: Explicit garbage collection; extremely dubious except in benchmarking code (DM_GC)
Dm: Method invokes inefficient Boolean constructor; use Boolean.valueOf(…) instead (DM_BOOLEAN_CTOR)
Bx: Method invokes inefficient Number constructor; use static valueOf instead (DM_NUMBER_CTOR)
Bx: Method invokes inefficient floating-point Number constructor; use static valueOf instead (DM_FP_NUMBER_CTOR)
Bx: Method allocates a boxed primitive just to call toString (DM_BOXED_PRIMITIVE_TOSTRING)
Bx: Boxing/unboxing to parse a primitive (DM_BOXED_PRIMITIVE_FOR_PARSING)
Bx: Boxing a primitive to compare (DM_BOXED_PRIMITIVE_FOR_COMPARE)
Bx: Primitive value is unboxed and coerced for ternary operator (BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR)
Bx: Boxed value is unboxed and then immediately reboxed (BX_UNBOXING_IMMEDIATELY_REBOXED)
Bx: Primitive value is boxed and then immediately unboxed (BX_BOXING_IMMEDIATELY_UNBOXED)
Bx: Primitive value is boxed then unboxed to perform primitive coercion (BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION)
Dm: Method allocates an object, only to get the class object (DM_NEW_FOR_GETCLASS)
Dm: Use the nextInt method of Random rather than nextDouble to generate a random integer (DM_NEXTINT_VIA_NEXTDOUBLE)
SS: Unread field: should this field be static? (SS_SHOULD_BE_STATIC)
UuF: Unused field (UUF_UNUSED_FIELD)
UrF: Unread field (URF_UNREAD_FIELD)
SIC: Should be a static inner class (SIC_INNER_SHOULD_BE_STATIC)
SIC: Could be refactored into a static inner class (SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS)
SIC: Could be refactored into a named static inner class (SIC_INNER_SHOULD_BE_STATIC_ANON)
UPM: Private method is never called (UPM_UNCALLED_PRIVATE_METHOD)
SBSC: Method concatenates strings using + in a loop (SBSC_USE_STRINGBUFFER_CONCATENATION)
IIL: NodeList.getLength() called in a loop (IIL_ELEMENTS_GET_LENGTH_IN_LOOP)
IIL: Method calls prepareStatement in a loop (IIL_PREPARE_STATEMENT_IN_LOOP)
IIL: Method calls Pattern.compile in a loop (IIL_PATTERN_COMPILE_IN_LOOP)
IIL: Method compiles the regular expression in a loop (IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT)
IIO: Inefficient use of String.indexOf(String) (IIO_INEFFICIENT_INDEX_OF)
IIO: Inefficient use of String.lastIndexOf(String) (IIO_INEFFICIENT_LAST_INDEX_OF)
ITA: Method uses toArray() with zero-length array argument (ITA_INEFFICIENT_TO_ARRAY)
WMI: Inefficient use of keySet iterator instead of entrySet iterator (WMI_WRONG_MAP_ITERATOR)
UM: Method calls static Math class method on a constant value (UM_UNNECESSARY_MATH)
IMA: Method accesses a private member variable of owning class (IMA_INEFFICIENT_MEMBER_ACCESS)
XSS: Servlet reflected cross site scripting vulnerability in error page (XSS_REQUEST_PARAMETER_TO_SEND_ERROR)
XSS: Servlet reflected cross site scripting vulnerability (XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER)
XSS: JSP reflected cross site scripting vulnerability (XSS_REQUEST_PARAMETER_TO_JSP_WRITER)
HRS: HTTP Response splitting vulnerability (HRS_REQUEST_PARAMETER_TO_HTTP_HEADER)
HRS: HTTP cookie formed from untrusted input (HRS_REQUEST_PARAMETER_TO_COOKIE)
PT: Absolute path traversal in servlet (PT_ABSOLUTE_PATH_TRAVERSAL)
PT: Relative path traversal in servlet (PT_RELATIVE_PATH_TRAVERSAL)
Dm: Hardcoded constant database password (DMI_CONSTANT_DB_PASSWORD)
Dm: Empty database password (DMI_EMPTY_DB_PASSWORD)
SQL: Nonconstant string passed to execute or addBatch method on an SQL statement (SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE)
SQL: A prepared statement is generated from a nonconstant String (SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING)
CAA: Covariant array assignment to a field (CAA_COVARIANT_ARRAY_FIELD)
CAA: Covariant array is returned from the method (CAA_COVARIANT_ARRAY_RETURN)
CAA: Covariant array assignment to a local variable (CAA_COVARIANT_ARRAY_LOCAL)
Dm: Call to unsupported method (DMI_UNSUPPORTED_METHOD)
Dm: Thread passed where Runnable expected (DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED)
NP: Dereference of the result of readLine() without nullcheck (NP_DEREFERENCE_OF_READLINE_VALUE)
NP: Immediate dereference of the result of readLine() (NP_IMMEDIATE_DEREFERENCE_OF_READLINE)
RV: Remainder of 32-bit signed random integer (RV_REM_OF_RANDOM_INT)
RV: Remainder of hashCode could be negative (RV_REM_OF_HASHCODE)
Eq: Unusual equals method (EQ_UNUSUAL)
Eq: Class doesn’t override equals in superclass (EQ_DOESNT_OVERRIDE_EQUALS)
NS: Questionable use of non-short-circuit logic (NS_NON_SHORT_CIRCUIT)
NS: Potentially dangerous use of non-short-circuit logic (NS_DANGEROUS_NON_SHORT_CIRCUIT)
IC: Initialization circularity (IC_INIT_CIRCULARITY)
IA: Potentially ambiguous invocation of either an inherited or outer method (IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD)
Se: Private readResolve method not inherited by subclasses (SE_PRIVATE_READ_RESOLVE_NOT_INHERITED)
Se: Transient field of class that isn’t Serializable. (SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS)
SF: Switch statement found where one case falls through to the next case (SF_SWITCH_FALLTHROUGH)
SF: Switch statement found where default case is missing (SF_SWITCH_NO_DEFAULT)
UuF: Unused public or protected field (UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD)
UrF: Unread public/protected field (URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD)
QF: Complicated, subtle or wrong increment in for-loop (QF_QUESTIONABLE_FOR_LOOP)
NP: Read of unwritten public or protected field (NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD)
UwF: Field not initialized in constructor but dereferenced without null check (UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR)
UwF: Unwritten public or protected field (UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD)
UC: Useless non-empty void method (UC_USELESS_VOID_METHOD)
UC: Condition has no effect (UC_USELESS_CONDITION)
UC: Condition has no effect due to the variable type (UC_USELESS_CONDITION_TYPE)
UC: Useless object created (UC_USELESS_OBJECT)
UC: Useless object created on stack (UC_USELESS_OBJECT_STACK)
RV: Method ignores return value, is this OK? (RV_RETURN_VALUE_IGNORED_INFERRED)
RV: Return value of method without side effect is ignored (RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT)
RV: Method checks to see if result of String.indexOf is positive (RV_CHECK_FOR_POSITIVE_INDEXOF)
RV: Method discards result of readLine after checking if it is non-null (RV_DONT_JUST_NULL_CHECK_READLINE)
NP: Parameter must be non-null but is marked as nullable (NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE)
NP: Possible null pointer dereference due to return value of called method (NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE)
NP: Possible null pointer dereference on branch that might be infeasible (NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE)
NP: Load of known null value (NP_LOAD_OF_KNOWN_NULL_VALUE)
PZLA: Consider returning a zero length array rather than null (PZLA_PREFER_ZERO_LENGTH_ARRAYS)
UCF: Useless control flow (UCF_USELESS_CONTROL_FLOW)
UCF: Useless control flow to next line (UCF_USELESS_CONTROL_FLOW_NEXT_LINE)
RCN: Redundant nullcheck of value known to be null (RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE)
RCN: Redundant nullcheck of value known to be non-null (RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE)
RCN: Redundant comparison of two null values (RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES)
RCN: Redundant comparison of non-null value to null (RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE)
SA: Self assignment of local variable (SA_LOCAL_SELF_ASSIGNMENT)
INT: Integer remainder modulo 1 (INT_BAD_REM_BY_1)
INT: Vacuous comparison of integer value (INT_VACUOUS_COMPARISON)
INT: Vacuous bit mask operation on integer value (INT_VACUOUS_BIT_OPERATION)
SA: Double assignment of local variable (SA_LOCAL_DOUBLE_ASSIGNMENT)
SA: Double assignment of field (SA_FIELD_DOUBLE_ASSIGNMENT)
DLS: Useless assignment in return statement (DLS_DEAD_LOCAL_STORE_IN_RETURN)
DLS: Dead store to local variable (DLS_DEAD_LOCAL_STORE)
DLS: Dead store to local variable that shadows field (DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD)
DLS: Dead store of null to local variable (DLS_DEAD_LOCAL_STORE_OF_NULL)
REC: Exception is caught when Exception is not thrown (REC_CATCH_EXCEPTION)
FE: Test for floating point equality (FE_FLOATING_POINT_EQUALITY)
CD: Test for circular dependencies among classes (CD_CIRCULAR_DEPENDENCY)
RI: Class implements same interface as superclass (RI_REDUNDANT_INTERFACES)
MTIA: Class extends Struts Action class and uses instance variables (MTIA_SUSPECT_STRUTS_INSTANCE_FIELD)
MTIA: Class extends Servlet class and uses instance variables (MTIA_SUSPECT_SERVLET_INSTANCE_FIELD)
PS: Class exposes synchronization and semaphores in its public interface (PS_PUBLIC_SEMAPHORES)
ICAST: Result of integer multiplication cast to long (ICAST_INTEGER_MULTIPLY_CAST_TO_LONG)
ICAST: Integral division result cast to double or float (ICAST_IDIV_CAST_TO_DOUBLE)
BC: Questionable cast to concrete collection (BC_BAD_CAST_TO_CONCRETE_COLLECTION)
BC: Unchecked/unconfirmed cast (BC_UNCONFIRMED_CAST)
BC: Unchecked/unconfirmed cast of return value from method (BC_UNCONFIRMED_CAST_OF_RETURN_VALUE)
BC: instanceof will always return true (BC_VACUOUS_INSTANCEOF)
BC: Questionable cast to abstract collection (BC_BAD_CAST_TO_ABSTRACT_COLLECTION)
IM: Check for oddness that won’t work for negative numbers (IM_BAD_CHECK_FOR_ODD)
IM: Computation of average could overflow (IM_AVERAGE_COMPUTATION_COULD_OVERFLOW)
BSHIFT: Unsigned right shift cast to short/byte (ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT)
DMI: Code contains a hard coded reference to an absolute pathname (DMI_HARDCODED_ABSOLUTE_FILENAME)
DMI: Invocation of substring(0), which returns the original value (DMI_USELESS_SUBSTRING)
ST: Write to static field from instance method (ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD)
DMI: Non serializable object written to ObjectOutput (DMI_NONSERIALIZABLE_OBJECT_WRITTEN)
DB: Method uses the same code for two branches (DB_DUPLICATE_BRANCHES)
DB: Method uses the same code for two switch clauses (DB_DUPLICATE_SWITCH_CLAUSES)
XFB: Method directly allocates a specific implementation of xml interfaces (XFB_XML_FACTORY_BYPASS)
USM: Method superfluously delegates to parent class method (USM_USELESS_SUBCLASS_METHOD)
USM: Abstract Method is already defined in implemented interface (USM_USELESS_ABSTRACT_METHOD)
CI: Class is final but declares protected field (CI_CONFUSED_INHERITANCE)
TQ: Value required to not have type qualifier, but marked as unknown (TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK)
TQ: Value required to have type qualifier, but marked as unknown (TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK)
NP: Method relaxes nullness annotation on return value (NP_METHOD_RETURN_RELAXING_ANNOTATION)
NP: Method tightens nullness annotation on parameter (NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION)