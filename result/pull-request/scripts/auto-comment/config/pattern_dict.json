{"CNT_ROUGH_CONSTANT_VALUE": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "CNT: Rough value of known constant found (CNT_ROUGH_CONSTANT_VALUE)", "des_detail": "It's recommended to use the predefined library constant for code clarity and better precision.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#cnt-rough-value-of-known-constant-found-cnt-rough-constant-value"}, "UI_INHERITANCE_UNSAFE_GETRESOURCE": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "UI: Usage of GetResource may be unsafe if class is extended (UI_INHERITANCE_UNSAFE_GETRESOURCE)", "des_detail": "Calling this.getClass().getResource(...) could give results other than expected if this class is extended by a class in another package.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#ui-usage-of-getresource-may-be-unsafe-if-class-is-extended-ui-inheritance-unsafe-getresource"}, "IMSE_DONT_CATCH_IMSE": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "IMSE: Dubious catching of IllegalMonitorStateException (IMSE_DONT_CATCH_IMSE)", "des_detail": "IllegalMonitorStateException is generally only  thrown in case of a design flaw in your code (calling wait or  notify on an object you do not hold a lock on).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#imse-dubious-catching-of-illegalmonitorstateexception-imse-dont-catch-imse"}, "NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Nm: Use of identifier that is a keyword in later versions of Java (NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER)", "des_detail": "The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed in order to compile it in later versions of Java.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-use-of-identifier-that-is-a-keyword-in-later-versions-of-java-nm-future-keyword-used-as-identifier"}, "NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Nm: Use of identifier that is a keyword in later versions of Java (NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER)", "des_detail": "This identifier is used as a keyword in later versions of Java. This code, and any code that references this API, will need to be changed in order to compile it in later versions of Java.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-use-of-identifier-that-is-a-keyword-in-later-versions-of-java-nm-future-keyword-used-as-member-identifier"}, "DM_RUN_FINALIZERS_ON_EXIT": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Dm: Method invokes dangerous method runFinalizersOnExit (DM_RUN_FINALIZERS_ON_EXIT)", "des_detail": "*Never call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries.* -- Joshua Bloch\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dm-method-invokes-dangerous-method-runfinalizersonexit-dm-run-finalizers-on-exit"}, "FI_EXPLICIT_INVOCATION": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "FI: Explicit invocation of finalizer (FI_EXPLICIT_INVOCATION)", "des_detail": "This method contains an explicit invocation of the finalize()  method on an object.\u00a0 Because finalizer methods are supposed to be  executed once, and only by the VM, this is a bad idea.\nIf a connected set of objects beings finalizable, then the VM will invoke the finalize method on all the finalizable object, possibly at the same time in different threads. Thus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize on objects referenced by X, because they may already be getting finalized in a separate thread.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#fi-explicit-invocation-of-finalizer-fi-explicit-invocation"}, "ES_COMPARING_STRINGS_WITH_EQ": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "ES: Comparison of String objects using == or != (ES_COMPARING_STRINGS_WITH_EQ)", "des_detail": "This code compares java.lang.String objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the String.intern() method, the same string value may be represented by two different String objects. Consider using the equals(Object) method instead.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#es-comparison-of-string-objects-using-or-es-comparing-strings-with-eq"}, "NM_METHOD_NAMING_CONVENTION": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Nm: Method names should start with a lower case letter (NM_METHOD_NAMING_CONVENTION)", "des_detail": "Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-method-names-should-start-with-a-lower-case-letter-nm-method-naming-convention"}, "NM_SAME_SIMPLE_NAME_AS_INTERFACE": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Nm: Class names shouldn\u2019t shadow simple name of implemented interface (NM_SAME_SIMPLE_NAME_AS_INTERFACE)", "des_detail": "This class/interface has a simple name that is identical to that of an implemented/extended interface, except that the interface is in a different package (e.g., alpha.Foo extends beta.Foo). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-class-names-shouldn-t-shadow-simple-name-of-implemented-interface-nm-same-simple-name-as-interface"}, "NM_SAME_SIMPLE_NAME_AS_SUPERCLASS": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Nm: Class names shouldn\u2019t shadow simple name of superclass (NM_SAME_SIMPLE_NAME_AS_SUPERCLASS)", "des_detail": "This class has a simple name that is identical to that of its superclass, except that its superclass is in a different package (e.g., alpha.Foo extends beta.Foo). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-class-names-shouldn-t-shadow-simple-name-of-superclass-nm-same-simple-name-as-superclass"}, "NM_CLASS_NAMING_CONVENTION": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Nm: Class names should start with an upper case letter (NM_CLASS_NAMING_CONVENTION)", "des_detail": "Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-class-names-should-start-with-an-upper-case-letter-nm-class-naming-convention"}, "SE_READ_RESOLVE_MUST_RETURN_OBJECT": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Se: The readResolve method must be declared with a return type of Object. (SE_READ_RESOLVE_MUST_RETURN_OBJECT)", "des_detail": "In order for the readResolve method to be recognized by the serialization mechanism, it must be declared to have a return type of Object.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#se-the-readresolve-method-must-be-declared-with-a-return-type-of-object-se-read-resolve-must-return-object"}, "SE_NONFINAL_SERIALVERSIONID": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Se: serialVersionUID isn\u2019t final (SE_NONFINAL_SERIALVERSIONID)", "des_detail": "This class defines a serialVersionUID field that is not final.\u00a0 The field should be made final  if it is intended to specify  the version UID for purposes of serialization.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#se-serialversionuid-isn-t-final-se-nonfinal-serialversionid"}, "SE_NONSTATIC_SERIALVERSIONID": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Se: serialVersionUID isn\u2019t static (SE_NONSTATIC_SERIALVERSIONID)", "des_detail": "This class defines a serialVersionUID field that is not static.\u00a0 The field should be made static  if it is intended to specify  the version UID for purposes of serialization.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#se-serialversionuid-isn-t-static-se-nonstatic-serialversionid"}, "SE_NONLONG_SERIALVERSIONID": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "Se: serialVersionUID isn\u2019t long (SE_NONLONG_SERIALVERSIONID)", "des_detail": "This class defines a serialVersionUID field that is not long.\u00a0 The field should be made long  if it is intended to specify  the version UID for purposes of serialization.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#se-serialversionuid-isn-t-long-se-nonlong-serialversionid"}, "RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "RC: Suspicious reference comparison of Boolean values (RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN)", "des_detail": "This method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the new Boolean(b) constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using .equals(...).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#rc-suspicious-reference-comparison-of-boolean-values-rc-ref-comparison-bad-practice-boolean"}, "VA_FORMAT_STRING_USES_NEWLINE": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "FS: Format string should use %n rather than n (VA_FORMAT_STRING_USES_NEWLINE)", "des_detail": "This format string includes a newline character (\\n). In format strings, it is generally  preferable to use %n, which will produce the platform-specific line separator.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#fs-format-string-should-use-n-rather-than-n-va-format-string-uses-newline"}, "BIT_SIGNED_CHECK": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "BIT: Check for sign of bitwise operation (BIT_SIGNED_CHECK)", "des_detail": "This method compares an expression such as ((event.detail & SWT.SELECTED) > 0). Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results (of course depending on the value of SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate for a bug. Even when SWT.SELECTED is not negative, it seems good practice to use '!= 0' instead of '> 0'.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bit-check-for-sign-of-bitwise-operation-bit-signed-check"}, "DMI_RANDOM_USED_ONLY_ONCE": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "DMI: Random object created and used only once (DMI_RANDOM_USED_ONLY_ONCE)", "des_detail": "This code creates a java.util.Random object, uses it to generate one random number, and then discards the Random object. This produces mediocre quality random numbers and is inefficient. If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number is required invoke a method on the existing Random object to obtain it.\nIf it is important that the generated Random numbers not be guessable, you *must* not create a new Random for each random number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead (and avoid allocating a new SecureRandom for each random number needed).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dmi-random-object-created-and-used-only-once-dmi-random-used-only-once"}, "DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION": {"category_name": "Bad practice (BAD_PRACTICE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bad-practice-bad-practice", "des_title": "DMI: Don\u2019t use removeAll to clear a collection (DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION)", "des_detail": "If you want to remove all elements from a collection c, use c.clear, not c.removeAll(c). Calling c.removeAll(c) to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a ConcurrentModificationException.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dmi-don-t-use-removeall-to-clear-a-collection-dmi-using-removeall-to-clear-collection"}, "IL_CONTAINER_ADDED_TO_ITSELF": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "IL: A collection is added to itself (IL_CONTAINER_ADDED_TO_ITSELF)", "des_detail": "A collection is added to itself. As a result, computing the hashCode of this set will throw a StackOverflowException.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#il-a-collection-is-added-to-itself-il-container-added-to-itself"}, "RV_01_TO_INT": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "RV: Random value from 0 to 1 is coerced to the integer 0 (RV_01_TO_INT)", "des_detail": "A random value from 0 to 1 is being coerced to the integer value 0. You probably want to multiply the random value by something else before coercing it to an integer, or use the Random.nextInt(n) method.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#rv-random-value-from-0-to-1-is-coerced-to-the-integer-0-rv-01-to-int"}, "DM_INVALID_MIN_MAX": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "Dm: Incorrect combination of Math.max and Math.min (DM_INVALID_MIN_MAX)", "des_detail": "This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result (or NaN if the value is NaN).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dm-incorrect-combination-of-math-max-and-math-min-dm-invalid-min-max"}, "EQ_COMPARING_CLASS_NAMES": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "Eq: equals method compares class names rather than class objects (EQ_COMPARING_CLASS_NAMES)", "des_detail": "This method checks to see if two objects are the same class by checking to see if the names of their classes are equal. You can have different classes with the same name if they are loaded by different class loaders. Just check to see if the class objects are the same.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#eq-equals-method-compares-class-names-rather-than-class-objects-eq-comparing-class-names"}, "NM_LCASE_HASHCODE": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "Nm: Class defines hashcode(); should it be hashCode()? (NM_LCASE_HASHCODE)", "des_detail": "This class defines a method called hashcode().\u00a0 This method does not override the hashCode() method in java.lang.Object, which is probably what was intended.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-class-defines-hashcode-should-it-be-hashcode-nm-lcase-hashcode"}, "NM_LCASE_TOSTRING": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "Nm: Class defines tostring(); should it be toString()? (NM_LCASE_TOSTRING)", "des_detail": "This class defines a method called tostring().\u00a0 This method does not override the toString() method in java.lang.Object, which is probably what was intended.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-class-defines-tostring-should-it-be-tostring-nm-lcase-tostring"}, "NM_BAD_EQUAL": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "Nm: Class defines equal(Object); should it be equals(Object)? (NM_BAD_EQUAL)", "des_detail": "This class defines a method equal(Object).\u00a0 This method does not override the equals(Object) method in java.lang.Object, which is probably what was intended.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#nm-class-defines-equal-object-should-it-be-equals-object-nm-bad-equal"}, "SE_READ_RESOLVE_IS_STATIC": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "Se: The readResolve method must not be declared as a static method. (SE_READ_RESOLVE_IS_STATIC)", "des_detail": "In order for the readResolve method to be recognized by the serialization mechanism, it must not be declared as a static method.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#se-the-readresolve-method-must-not-be-declared-as-a-static-method-se-read-resolve-is-static"}, "SE_METHOD_MUST_BE_PRIVATE": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "Se: Method must be private in order for serialization to work (SE_METHOD_MUST_BE_PRIVATE)", "des_detail": "This class implements the Serializable interface, and defines a method for custom serialization/deserialization. But since that method isn't declared private, it will be silently ignored by the serialization/deserialization API.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#se-method-must-be-private-in-order-for-serialization-to-work-se-method-must-be-private"}, "RV_EXCEPTION_NOT_THROWN": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "RV: Exception created and dropped rather than thrown (RV_EXCEPTION_NOT_THROWN)", "des_detail": "This code creates an exception (or error) object, but doesn't do anything with it. For example, something like\nIt was probably the intent of the programmer to throw the created exception:\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#rv-exception-created-and-dropped-rather-than-thrown-rv-exception-not-thrown"}, "EC_NULL_ARG": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "EC: Call to equals(null) (EC_NULL_ARG)", "des_detail": "This method calls equals(Object), passing a null value as the argument. According to the contract of the equals() method, this call should always return false.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#ec-call-to-equals-null-ec-null-arg"}, "BIT_SIGNED_CHECK_HIGH_BIT": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "BIT: Check for sign of bitwise operation involving negative number (BIT_SIGNED_CHECK_HIGH_BIT)", "des_detail": "This method compares a bitwise expression such as ((val & CONSTANT) > 0) where CONSTANT is the negative number. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results. This comparison is unlikely to work as expected. The good practice is to use '!= 0' instead of '> 0'.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bit-check-for-sign-of-bitwise-operation-involving-negative-number-bit-signed-check-high-bit"}, "BIT_AND": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "BIT: Incompatible bit masks (BIT_AND)", "des_detail": "This method compares an expression of the form (e & C) to D, which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bit-incompatible-bit-masks-bit-and"}, "BIT_AND_ZZ": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "BIT: Check to see if ((\u2026) & 0) == 0 (BIT_AND_ZZ)", "des_detail": "This method compares an expression of the form (e & 0) to 0, which will always compare equal. This may indicate a logic error or typo.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bit-check-to-see-if-0-0-bit-and-zz"}, "BIT_IOR": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "BIT: Incompatible bit masks (BIT_IOR)", "des_detail": "This method compares an expression of the form (e | C) to D. which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.\nTypically, this bug occurs because the code wants to perform a membership test in a bit set, but uses the bitwise OR operator (\"|\") instead of bitwise AND (\"&\").\nAlso such bug may appear in expressions like (e & A | B) == C which is parsed like ((e & A) | B) == C while (e & (A | B)) == C was intended.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bit-incompatible-bit-masks-bit-ior"}, "SA_SELF_ASSIGNMENT": {"category_name": "Dodgy code (STYLE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dodgy-code-style", "des_title": "SA: Self assignment of local variable (SA_LOCAL_SELF_ASSIGNMENT)", "des_detail": "This method contains a self assignment of a local variable; e.g.\nSuch assignments are useless, and may indicate a logic error or typo.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#sa-self-assignment-of-local-variable-sa-local-self-assignment"}, "SA_SELF_COMPUTATION": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "SA: Nonsensical self computation involving a variable (e.g., x & x) (SA_LOCAL_SELF_COMPUTATION)", "des_detail": "This method performs a nonsensical computation of a local variable with another reference to the same variable (e.g., x&x or x-x). Because of the nature of the computation, this operation doesn't seem to make sense, and may indicate a typo or a logic error. Double check the computation.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#sa-nonsensical-self-computation-involving-a-variable-e-g-x-x-sa-local-self-computation"}, "SA_SELF_COMPARISON": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "SA: Self comparison of value with itself (SA_LOCAL_SELF_COMPARISON)", "des_detail": "This method compares a local variable with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#sa-self-comparison-of-value-with-itself-sa-local-self-comparison"}, "DLS_DEAD_LOCAL_INCREMENT_IN_RETURN": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "DLS: Useless increment in return statement (DLS_DEAD_LOCAL_INCREMENT_IN_RETURN)", "des_detail": "This statement has a return such as return x++;. A postfix increment/decrement does not impact the value of the expression, so this increment/decrement has no effect. Please verify that this statement does the right thing.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dls-useless-increment-in-return-statement-dls-dead-local-increment-in-return"}, "FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "FE: Doomed test for equality to NaN (FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER)", "des_detail": "This code checks to see if a floating point value is equal to the special Not A Number value (e.g., if (x == Double.NaN)). However, because of the special semantics of NaN, no value is equal to Nan, including NaN. Thus, x == Double.NaN always evaluates to false.  To check to see if a value contained in x is the special Not A Number value, use Double.isNaN(x) (or Float.isNaN(x) if x is floating point precision).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#fe-doomed-test-for-equality-to-nan-fe-test-if-equal-to-not-a-number"}, "BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "BC: Impossible downcast of toArray() result (BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY)", "des_detail": "This code is casting the result of calling toArray() on a collection to a type more specific than Object[], as in:\nThis will usually fail by throwing a ClassCastException. The toArray() of almost all collections return an Object[]. They can't really do anything else, since the Collection object has no reference to the declared generic type of the collection. The correct way to do get an array of a specific type from a collection is to use  c.toArray(new String[]);  or c.toArray(new String[c.size()]); (the latter is slightly more efficient). There is one common/known exception to this. The toArray() method of lists returned by Arrays.asList(...) will return a covariantly typed array. For example, Arrays.asArray(new String[] { \"a\" }).toArray() will return a String []. SpotBugs attempts to detect and suppress such cases, but may miss some.\nThe correct way to do get an array of a specific type from a collection is to use  c.toArray(new String[]);  or c.toArray(new String[c.size()]); (the latter is slightly more efficient). There is one common/known exception to this. The toArray() method of lists returned by Arrays.asList(...) will return a covariantly typed array. For example, Arrays.asArray(new String[] { \"a\" }).toArray() will return a String []. SpotBugs attempts to detect and suppress such cases, but may miss some.\nThere is one common/known exception to this. The toArray() method of lists returned by Arrays.asList(...) will return a covariantly typed array. For example, Arrays.asArray(new String[] { \"a\" }).toArray() will return a String []. SpotBugs attempts to detect and suppress such cases, but may miss some.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bc-impossible-downcast-of-toarray-result-bc-impossible-downcast-of-toarray"}, "RE_POSSIBLE_UNINTENDED_PATTERN": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "RE: \u201c.\u201d or \u201c|\u201d used for regular expression (RE_POSSIBLE_UNINTENDED_PATTERN)", "des_detail": "A String function is being invoked and \".\" or \"|\" is being passed to a parameter that takes a regular expression as an argument. Is this what you intended? For example\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#re-or-used-for-regular-expression-re-possible-unintended-pattern"}, "RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "RE: File.separator used for regular expression (RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION)", "des_detail": "The code here uses File.separator where a regular expression is required. This will fail on Windows platforms, where the File.separator is a backslash, which is interpreted in a regular expression as an escape character. Among other options, you can just use File.separatorChar=='\\\\' ? \"\\\\\\\\\" : File.separator instead of File.separator\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#re-file-separator-used-for-regular-expression-re-cant-use-file-separator-as-regular-expression"}, "DLS_OVERWRITTEN_INCREMENT": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "DLS: Overwritten increment (DLS_OVERWRITTEN_INCREMENT)", "des_detail": "The code performs an increment operation (e.g., i++) and then immediately overwrites it. For example, i = i++ immediately overwrites the incremented value with the original value.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dls-overwritten-increment-dls-overwritten-increment"}, "BSHIFT_WRONG_ADD_PRIORITY": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "BSHIFT: Possible bad parsing of shift operation (BSHIFT_WRONG_ADD_PRIORITY)", "des_detail": "The code performs an operation like (x << 8 + y). Although this might be correct, probably it was meant to perform (x << 8) + y, but shift operation has a lower precedence, so it's actually parsed as x << (8 + y).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#bshift-possible-bad-parsing-of-shift-operation-bshift-wrong-add-priority"}, "DMI_BAD_MONTH": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "DMI: Bad constant value for month (DMI_BAD_MONTH)", "des_detail": "This code passes a constant month value outside the expected range of 0..11 to a method.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dmi-bad-constant-value-for-month-dmi-bad-month"}, "QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "QBA: Method assigns boolean literal in boolean expression (QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT)", "des_detail": "This method assigns a literal boolean value (true or false) to a boolean variable inside an if or while expression. Most probably this was supposed to be a boolean comparison using ==, not an assignment using =.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#qba-method-assigns-boolean-literal-in-boolean-expression-qba-questionable-boolean-assignment"}, "DMI_VACUOUS_SELF_COLLECTION_CALL": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "DMI: Vacuous call to collections (DMI_VACUOUS_SELF_COLLECTION_CALL)", "des_detail": "This call doesn't make sense. For any collection c, calling c.containsAll(c) should always be true, and c.retainAll(c) should have no effect.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dmi-vacuous-call-to-collections-dmi-vacuous-self-collection-call"}, "DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES": {"category_name": "Correctness (CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#correctness-correctness", "des_title": "DMI: Collections should not contain themselves (DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES)", "des_detail": "This call to a generic collection's method would only make sense if a collection contained itself (e.g., if s.contains(s) were true). This is unlikely to be true and would cause problems if it were true (such as the computation of the hash code resulting in infinite recursion). It is likely that the wrong value is being passed as a parameter.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dmi-collections-should-not-contain-themselves-dmi-collections-should-not-contain-themselves"}, "FI_PUBLIC_SHOULD_BE_PROTECTED": {"category_name": "Malicious code vulnerability (MALICIOUS_CODE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#malicious-code-vulnerability-malicious-code", "des_title": "FI: Finalizer should be protected, not public (FI_PUBLIC_SHOULD_BE_PROTECTED)", "des_detail": "A class's finalize() method should have protected access,  not public.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#fi-finalizer-should-be-protected-not-public-fi-public-should-be-protected"}, "STCAL_STATIC_CALENDAR_INSTANCE": {"category_name": "Multithreaded correctness (MT_CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#multithreaded-correctness-mt-correctness", "des_title": "STCAL: Static Calendar field (STCAL_STATIC_CALENDAR_INSTANCE)", "des_detail": "Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().\nYou may also experience serialization problems.\nUsing an instance field is recommended.\nFor more information on this see [JDK Bug #6231579](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579) and [JDK Bug #6178997](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#stcal-static-calendar-field-stcal-static-calendar-instance"}, "STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE": {"category_name": "Multithreaded correctness (MT_CORRECTNESS)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#multithreaded-correctness-mt-correctness", "des_title": "STCAL: Static DateFormat (STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE)", "des_detail": "As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.\nYou may also experience serialization problems.\nUsing an instance field is recommended.\nFor more information on this see [JDK Bug #6231579](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579) and [JDK Bug #6178997](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997).\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#stcal-static-dateformat-stcal-static-simple-date-format-instance"}, "DM_STRING_CTOR": {"category_name": "Performance (PERFORMANCE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#performance-performance", "des_title": "Dm: Method invokes inefficient new String(String) constructor (DM_STRING_CTOR)", "des_detail": "Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.\u00a0 Just use the argument String directly.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dm-method-invokes-inefficient-new-string-string-constructor-dm-string-ctor"}, "DM_STRING_VOID_CTOR": {"category_name": "Performance (PERFORMANCE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#performance-performance", "des_title": "Dm: Method invokes inefficient new String() constructor (DM_STRING_VOID_CTOR)", "des_detail": "Creating a new java.lang.String object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant \"\".\u00a0 Java guarantees that identical string constants will be represented by the same String object.\u00a0 Therefore, you should just use the empty string constant directly.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dm-method-invokes-inefficient-new-string-constructor-dm-string-void-ctor"}, "SA_DOUBLE_ASSIGNMENT": {"category_name": "Dodgy code (STYLE)", "category_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#dodgy-code-style", "des_title": "SA: Double assignment of field (SA_FIELD_DOUBLE_ASSIGNMENT)", "des_detail": "This method contains a double assignment of a field; e.g.\nAssigning to a field twice is useless, and may indicate a logic error or typo.\n", "pattern_href": "https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#sa-double-assignment-of-field-sa-field-double-assignment"}}