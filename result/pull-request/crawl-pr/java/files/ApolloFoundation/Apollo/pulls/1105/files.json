[
  {
    "sha": "87e9cf1c685ab28e363a112dda53484975d711cf",
    "filename": "apl-conf/pom.xml",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/76191f16b5338316042b6c1f6ad8573b115a5030/apl-conf/pom.xml",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/76191f16b5338316042b6c1f6ad8573b115a5030/apl-conf/pom.xml",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-conf/pom.xml?ref=76191f16b5338316042b6c1f6ad8573b115a5030",
    "patch": "@@ -16,6 +16,16 @@\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n     </dependency>\n+    <dependency>\n+          <groupId>org.projectlombok</groupId>\n+          <artifactId>lombok</artifactId>\n+          <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.apollocurrency</groupId>\n+      <artifactId>apl-utils</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>         \n     <!-- unit tests -->\n     <dependency>\n       <groupId>org.junit.platform</groupId>"
  },
  {
    "sha": "96099bb98a1150e5f7c76c7fae6b3ce3e0fc1cd4",
    "filename": "apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfPlaceholder.java",
    "status": "removed",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/2454ee8ce0fd5747d361a2e2cd6f652aeede589d/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfPlaceholder.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/2454ee8ce0fd5747d361a2e2cd6f652aeede589d/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfPlaceholder.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfPlaceholder.java?ref=2454ee8ce0fd5747d361a2e2cd6f652aeede589d",
    "patch": "@@ -1,9 +0,0 @@\n-package com.apollocurrency.aplwallet.apl.conf;\n-\n-/**\n- *\n- * @author al\n- */\n-public class ConfPlaceholder {\n-    \n-}"
  },
  {
    "sha": "d5f82b2e297953a9b760609350db2922f9a99917",
    "filename": "apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfigRecord.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/76191f16b5338316042b6c1f6ad8573b115a5030/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfigRecord.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/76191f16b5338316042b6c1f6ad8573b115a5030/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfigRecord.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfigRecord.java?ref=76191f16b5338316042b6c1f6ad8573b115a5030",
    "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright © 2018-2021 Apollo Foundation\n+ */\n+package com.apollocurrency.aplwallet.apl.conf;\n+\n+import com.apollocurrency.aplwallet.apl.util.Version;\n+import lombok.Builder;\n+import lombok.Builder.Default;\n+\n+/**\n+ *\n+ * @author Oleksiy Lukin alukin@gmail.com\n+ */\n+@Builder\n+public class ConfigRecord {\n+    public String name;\n+    @Default\n+    public String defaultValue=\"\";\n+    public String description;\n+    @Default\n+    public Version sinceRelease = new Version(\"1.0.0\");\n+    public Version deprecatedSince;\n+    @Default\n+    public String cmdLineOpt=\"\";\n+    @Default\n+    public String envVar=\"\";\n+    @Default\n+    public boolean isRequired = false;\n+}"
  },
  {
    "sha": "71638cb3ae512fb0f02552da0cfb4d17bf17da2f",
    "filename": "apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfigVerifier.java",
    "status": "added",
    "additions": 162,
    "deletions": 0,
    "changes": 162,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/76191f16b5338316042b6c1f6ad8573b115a5030/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfigVerifier.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/76191f16b5338316042b6c1f6ad8573b115a5030/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfigVerifier.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-conf/src/main/java/com/apollocurrency/aplwallet/apl/conf/ConfigVerifier.java?ref=76191f16b5338316042b6c1f6ad8573b115a5030",
    "patch": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright © 2018-2021 Apollo Foundation\n+ */\n+package com.apollocurrency.aplwallet.apl.conf;\n+\n+\n+import com.apollocurrency.aplwallet.apl.util.Version;\n+import java.io.OutputStream;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Config Properies known by Apollo application\n+ * @author Oleksiy Lukin alukin@gmail.com\n+ */\n+@Slf4j\n+public class ConfigVerifier {\n+    private final static String FIRST_RELEASE = \"1.0.0\";\n+    private final static String DEX_RELEASE = \"1.35.0\";\n+    private final static String SHARDING_RELEASE = \"1.36.0\";\n+    private final static String MARIADB_RELEASE = \"1.36.0\";\n+\n+    private ConfigVerifier() {\n+    }\n+    \n+    /**\n+     * propery nanme mapoped to parameters\n+     */\n+    @Getter\n+    private Map<String,ConfigRecord> knownProps;\n+    \n+    public boolean isSupported(String propName){\n+        ConfigRecord rec = knownProps.get(propName);\n+        return rec!=null;    \n+    }    \n+    \n+    public ConfigRecord get(String propName){\n+        return knownProps.get(propName);\n+    }\n+    \n+    private void put(String name, ConfigRecord pr){\n+        pr.name = name;\n+        knownProps.put(name, pr);\n+    }\n+    \n+    public List<ConfigRecord> listDeprecated(Version currVersion){\n+        List<ConfigRecord> res = new ArrayList<>();\n+        knownProps.values().stream().filter(pr -> (pr.deprecatedSince.lessThan(currVersion))).forEachOrdered(pr -> {\n+            res.add(pr);\n+        });\n+        return res;\n+    }\n+    \n+    public List<ConfigRecord> listNewAfter(Version ver){\n+        List<ConfigRecord> res = new ArrayList<>();\n+        knownProps.values().stream().filter(pr -> (pr.sinceRelease.greaterThan(ver))).forEachOrdered(pr -> {\n+            res.add(pr);\n+        });\n+        return res;\n+    }\n+    \n+ /**\n+  * Dumps all known properties with comment lines\n+  * containing all available information about config propery\n+  * @param pos output stream where to dump\n+  */   \n+    public void dumpToProperties(OutputStream pos){\n+        //TODO: implement\n+    }\n+\n+    \n+/**\n+ * Parse properties file comparing to known properties and fillimng undefined with defaults\n+ * @param config Properties file from resource or disk.\n+ * Unknown proerties will be logged with WARN level; missing required properties will\n+ * be filled with default and warning will be logged\n+ * @return reaqdy to use properties\n+ */\n+    public Properties parse(Properties config){\n+        //go trough suppied config and check it: warn on deprecated and on unknown\n+        for(Object propery: config.entrySet()){\n+            \n+        }\n+        //define required properties, warn on undefined\n+        for(ConfigRecord pr: knownProps.values()){\n+            \n+        }\n+        return config;\n+    }\n+/**\n+ * All known properties must be inited in this method; \n+ * @return created properties fully inited with default values\n+ */\n+    public static ConfigVerifier create(){\n+        ConfigVerifier kp = new ConfigVerifier();\n+        \n+        kp.put(\"apl.shareMyAddress\", \n+            ConfigRecord.builder()\n+                  .defaultValue(\"true\")\n+                  .description(\"Announce my IP address/hostname to peers and allow them to share it with other peers. If disabled, peer networking servlet will not be started at all.\")\n+                  .sinceRelease(new Version(FIRST_RELEASE))  \n+            .build()\n+        );\n+        \n+    //TODO: hardcode all known properties with ddescription from properies in resources\n+    \n+    //\n+        kp.put(\"apl.customDbDir\", \n+            ConfigRecord.builder()\n+                  .defaultValue(\"\")\n+                  .description(\"Directory where database is located. Default location is $HOME/.apl-blockchain/apl-blockchain-db. Could be overrided by  env vars and cmd args\")\n+                  .sinceRelease(new Version(MARIADB_RELEASE))  \n+            .build()\n+        ); \n+        \n+        kp.put(\"apl.customVaultKeystoreDir\", \n+            ConfigRecord.builder()\n+                  .defaultValue(\"\")\n+                  .description(\"Absolute path to custom keystore dir. Could be overrided by env vars and cmd args\")\n+                  .sinceRelease(new Version(DEX_RELEASE))  \n+            .build()\n+        );\n+        \n+        kp.put(\"apl.customPidFile\", \n+            ConfigRecord.builder()\n+                  .defaultValue(\"\")\n+                  .description(\"Absolute path to  PID file. Could be overrided by env vars and cmd args\")\n+                  .sinceRelease(new Version(MARIADB_RELEASE))  \n+            .build()\n+        );      \n+        \n+        kp.put(\"apl.dir2FA\", \n+            ConfigRecord.builder()\n+                  .defaultValue(\"\")\n+                  .description(\"Absolute path to 2FAdata dir. Could be overrided by env vars and cmd args\")\n+                  .sinceRelease(new Version(DEX_RELEASE))  \n+            .build()\n+        );   \n+        \n+        kp.put(\"apl.customDataExportDir\", \n+            ConfigRecord.builder()\n+                  .defaultValue(\"\")\n+                  .description(\"Absolute path to custom data export dir (shard files and other data). Could be overrided by env vars and cmd args\")\n+                  .sinceRelease(new Version(SHARDING_RELEASE))  \n+            .build()\n+        );   \n+        \n+        kp.put(\"apl.customDexStorageDir\", \n+            ConfigRecord.builder()\n+                  .defaultValue(\"\")\n+                  .description(\"Absolute path to custom DEX storage. Could be overrided by env vars and cmd args\")\n+                  .sinceRelease(new Version(DEX_RELEASE))  \n+            .build()\n+        );        \n+        return kp;\n+    }\n+}"
  },
  {
    "sha": "b412054d3176ed3c4edc0aac77ac62900e59da2a",
    "filename": "apl-core/src/main/java/com/apollocurrency/aplwallet/apl/core/utils/LegacyDbUtil.java",
    "status": "removed",
    "additions": 0,
    "deletions": 27,
    "changes": 27,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/2454ee8ce0fd5747d361a2e2cd6f652aeede589d/apl-core/src/main/java/com/apollocurrency/aplwallet/apl/core/utils/LegacyDbUtil.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/2454ee8ce0fd5747d361a2e2cd6f652aeede589d/apl-core/src/main/java/com/apollocurrency/aplwallet/apl/core/utils/LegacyDbUtil.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-core/src/main/java/com/apollocurrency/aplwallet/apl/core/utils/LegacyDbUtil.java?ref=2454ee8ce0fd5747d361a2e2cd6f652aeede589d",
    "patch": "@@ -1,27 +0,0 @@\n-/*\n- *  Copyright © 2018-2021 Apollo Foundation\n- */\n-\n-package com.apollocurrency.aplwallet.apl.core.utils;\n-\n-import com.apollocurrency.aplwallet.apl.util.env.RuntimeEnvironment;\n-import com.apollocurrency.aplwallet.apl.util.env.dirprovider.DirProvider;\n-\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-public class LegacyDbUtil {\n-    public static Path getLegacyHomeDir() {\n-        Path homeDirPath;\n-        if (!RuntimeEnvironment.getInstance().isServiceMode()) {\n-            if (RuntimeEnvironment.getInstance().isWindowsRuntime()) {\n-                homeDirPath = Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Roaming\", \"APOLLO\");\n-            } else {\n-                homeDirPath = Paths.get(System.getProperty(\"user.home\"), \".apollo\");\n-            }\n-        } else {\n-            homeDirPath = DirProvider.getBinDir();\n-        }\n-        return homeDirPath;\n-    }\n-}"
  },
  {
    "sha": "2f9ec4e221ed9fea6ff5a0dc14413fa3a01708b5",
    "filename": "apl-exec/src/main/java/com/apollocurrency/aplwallet/apl/exec/Apollo.java",
    "status": "modified",
    "additions": 57,
    "deletions": 49,
    "changes": 106,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/76191f16b5338316042b6c1f6ad8573b115a5030/apl-exec/src/main/java/com/apollocurrency/aplwallet/apl/exec/Apollo.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/76191f16b5338316042b6c1f6ad8573b115a5030/apl-exec/src/main/java/com/apollocurrency/aplwallet/apl/exec/Apollo.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-exec/src/main/java/com/apollocurrency/aplwallet/apl/exec/Apollo.java?ref=76191f16b5338316042b6c1f6ad8573b115a5030",
    "patch": "@@ -5,13 +5,12 @@\n \n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.LoggerContext;\n-import com.apollocurrency.aplwallet.apl.conf.ConfPlaceholder;\n+import com.apollocurrency.aplwallet.apl.conf.ConfigVerifier;\n import com.apollocurrency.aplwallet.apl.core.app.AplCoreRuntime;\n import com.apollocurrency.aplwallet.apl.core.chainid.BlockchainConfig;\n import com.apollocurrency.aplwallet.apl.core.chainid.BlockchainConfigUpdater;\n import com.apollocurrency.aplwallet.apl.core.db.DbConfig;\n import com.apollocurrency.aplwallet.apl.core.service.appdata.SecureStorageService;\n-import com.apollocurrency.aplwallet.apl.core.utils.LegacyDbUtil;\n import com.apollocurrency.aplwallet.apl.udpater.intfce.UpdaterCore;\n import com.apollocurrency.aplwallet.apl.updater.core.UpdaterCoreImpl;\n import com.apollocurrency.aplwallet.apl.util.Constants;\n@@ -84,7 +83,9 @@\n     private static Logger log;\n     private static AplContainer container;\n     private static AplCoreRuntime aplCoreRuntime;\n-\n+    \n+    private static final  ConfigVerifier configVerifier = ConfigVerifier.create();\n+    \n     private static void setLogLevel(int logLevel) {\n         // let's SET LEVEL EXPLOCITLY only when it was passed via command line params\n         String packageName = \"com.apollocurrency.aplwallet.apl\";\n@@ -137,36 +138,55 @@ public static boolean saveStartParams(String[] argv, String pidPath, ConfigDirPr\n         return res;\n     }\n \n-    public static PredefinedDirLocations merge(CmdLineArgs args, EnvironmentVariables vars, CustomDirLocations customDirLocations) {\n-        return new PredefinedDirLocations(\n-            customDirLocations.getDbDir().isEmpty() ? StringUtils.isBlank(args.dbDir) ? vars.dbDir : args.dbDir : customDirLocations.getDbDir().get(),\n-            StringUtils.isBlank(args.logDir) ? vars.logDir : args.logDir,\n-            customDirLocations.getKeystoreDir().isEmpty() ? StringUtils.isBlank(args.vaultKeystoreDir) ? vars.vaultKeystoreDir : args.vaultKeystoreDir : customDirLocations.getKeystoreDir().get(),\n-            StringUtils.isBlank(args.pidFile) ? vars.pidFile : args.pidFile,\n-            StringUtils.isBlank(args.twoFactorAuthDir) ? vars.twoFactorAuthDir : args.twoFactorAuthDir,\n-            StringUtils.isBlank(args.dataExportDir) ? vars.dataExportDir : args.dataExportDir,\n-            StringUtils.isBlank(args.dexKeystoreDir) ? vars.dexKeystoreDir : args.dexKeystoreDir\n-        );\n+/**\n+ * Merge command line argumentsm environment variables and properties from config files\n+ * into one set of properties. Precedence: command line, environment vars, configs.\n+ * It means that command line can overwrite env vars and configs\n+ * @param args parsed command line arguments\n+ * @param vars parsed environment variables\n+ * @param props parsed application config files\n+ * @return properties, reqady to use in the application\n+ */     \n+    public static Properties merge(CmdLineArgs args, EnvironmentVariables vars, Properties props){\n+        \n+        //{\"--log-dir\", \"-l\"}\n+        String logDir = StringUtils.byPrecednce(args.logDir, vars.logDir, props.getProperty(\"apl.customLogDir\"));\n+        props.setProperty(\"apl.customLogDir\",logDir);\n+        //{\"--db-dir\"}\n+        String dbDir = StringUtils.byPrecednce(args.dbDir, vars.dbDir, props.getProperty(\"apl.customDbDir\"));\n+        props.setProperty(\"apl.customDbDir\", dbDir);\n+        // {\"--vault-key-dir\"}\n+        String vaultKeystoreDir = StringUtils.byPrecednce(args.vaultKeystoreDir, vars.vaultKeystoreDir, props.getProperty(\"apl.customVaultKeystoreDir\"));\n+        props.setProperty(\"apl.customVaultKeystoreDir\", vaultKeystoreDir);\n+        // {\"--dex-key-dir\"}\n+        String dexKeystoreDir = StringUtils.byPrecednce(args.dexKeystoreDir, vars.dexKeystoreDir, props.getProperty(\"apl.customDexStorageDir\"));\n+        props.setProperty(\"apl.customDexStorageDir\", dexKeystoreDir);\n+        // {\"--no-shard-import\"}\n+        String noShardImport = StringUtils.byPrecednce(args.noShardImport.toString(), props.getProperty(\"apl.noshardimport\"));\n+        props.setProperty(\"apl.noshardimport\",noShardImport);\n+        // {\"--no-shard-create\"}\n+        String  noShardCreate = StringUtils.byPrecednce(args.noShardCreate.toString(), props.getProperty(\"apl.noshardcreate\"));\n+        props.setProperty(\"apl.noshardcreate\",noShardCreate);\n+        // {\"--2fa-dir\"}\n+        String twoFactorAuthDir = StringUtils.byPrecednce(args.twoFactorAuthDir,vars.twoFactorAuthDir, props.getProperty(\"apl.dir2FA\"));\n+        props.setProperty(\"apl.dir2FA\",twoFactorAuthDir);\n+        // {\"--dexp-dir\"}\n+        String  dataExportDir  = StringUtils.byPrecednce(args.dataExportDir, vars.dataExportDir, props.getProperty(\"apl.customDataExportDir\"));\n+        props.setProperty(\"apl.customDataExportDir\",dataExportDir);\n+        // {\"--pid-file\"}\n+        String pidFile =  StringUtils.byPrecednce(args.pidFile, vars.pidFile, props.getProperty(\"apl.customPidFile\"));\n+        props.getProperty(\"apl.customPidFile\", pidFile);\n+        return props;\n     }\n-\n+    \n+ //TODO: check this piece of art   \n     public static void setSystemProperties(CmdLineArgs args){\n         System.setProperty(\"apl.runtime.mode\", args.serviceMode ? \"service\" : \"user\");\n         System.setProperty(\"javax.net.ssl.trustStore\", \"cacerts\");\n         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"changeit\");\n         System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n     }\n \n-    private static String getCustomDbPath(UUID chainId, Properties properties) { //maybe better to set dbUrl or add to dirProvider\n-        String customDbDir = properties.getProperty(CustomDirLocations.DB_DIR_PROPERTY_NAME);\n-        if (customDbDir != null) {\n-            Path legacyHomeDir = LegacyDbUtil.getLegacyHomeDir();\n-            Path customDbPath = legacyHomeDir.resolve(customDbDir).resolve(chainId.toString().substring(0, 6)).normalize();\n-            System.out.println(\"Using custom db path \" + customDbPath.toAbsolutePath().toString());\n-            return customDbPath.toAbsolutePath().toString();\n-        }\n-        return null;\n-    }\n-\n     private void initUpdater(String attachmentFilePath, boolean debug, PropertiesHolder propertiesHolder) {\n         if (!propertiesHolder.getBooleanProperty(\"apl.allowUpdates\", false)) {\n             return;\n@@ -243,8 +263,6 @@ public static void main(String[] argv) {\n         RuntimeEnvironment.getInstance().setMain(Apollo.class);\n //set some important system properties\n         setSystemProperties(args);\n-//cheat classloader to get access to \"conf\" package resources\n-        ConfPlaceholder ph = new ConfPlaceholder();\n \n //--------------- config locading section -------------------------------------\n \n@@ -277,7 +295,10 @@ public static void main(String[] argv) {\n // load everuthing into applicationProperies. This is the place where all configuration\n // is collected from configs, command line and environment variables\n         Properties applicationProperties = propertiesLoader.load();\n-\n+        \n+//verify and complete configuration        \n+        applicationProperties = configVerifier.parse(applicationProperties);\n+        \n         ChainsConfigLoader chainsConfigLoader = new ChainsConfigLoader(\n             configDirProvider,\n             configDir,\n@@ -287,27 +308,14 @@ public static void main(String[] argv) {\n // init chains configurations by loading chains.json file\n         Map<UUID, Chain> chains = chainsConfigLoader.load();\n         UUID chainId = ChainUtils.getActiveChain(chains).getChainId();\n-\n-//over-write config options from command line if set\n-\n-        if (args.noShardImport != null) {\n-            applicationProperties.setProperty(\"apl.noshardimport\", \"\" + args.noShardImport);\n-        }\n-        if (args.noShardCreate != null) {\n-            applicationProperties.setProperty(\"apl.noshardcreate\", \"\" + args.noShardCreate);\n-        }\n-//TODO: check this piece of art\n-        CustomDirLocations customDirLocations = new CustomDirLocations(\n-                getCustomDbPath(chainId, applicationProperties),\n-                applicationProperties.getProperty(CustomDirLocations.KEYSTORE_DIR_PROPERTY_NAME)\n-        );\n-\n-        DirProviderFactory.setup(args.serviceMode,\n-                chainId,\n-                Constants.APPLICATION_DIR_NAME,\n-                merge(args, envVars, customDirLocations)\n-        );\n-\n+       \n+        DirProviderFactory.setup( args.serviceMode, \n+                                  chainId, \n+                                  Constants.APPLICATION_DIR_NAME, \n+                                  new PredefinedDirLocations(merge(args,envVars,applicationProperties))\n+                                );\n+        \n+        \n         dirProvider = DirProviderFactory.getProvider();\n         RuntimeEnvironment.getInstance().setDirProvider(dirProvider);\n "
  },
  {
    "sha": "715a4a42039c7f1db78557e8a5034bf3c816ce64",
    "filename": "apl-exec/src/main/java/com/apollocurrency/aplwallet/apl/exec/CustomDirLocations.java",
    "status": "removed",
    "additions": 0,
    "deletions": 57,
    "changes": 57,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/2454ee8ce0fd5747d361a2e2cd6f652aeede589d/apl-exec/src/main/java/com/apollocurrency/aplwallet/apl/exec/CustomDirLocations.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/2454ee8ce0fd5747d361a2e2cd6f652aeede589d/apl-exec/src/main/java/com/apollocurrency/aplwallet/apl/exec/CustomDirLocations.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-exec/src/main/java/com/apollocurrency/aplwallet/apl/exec/CustomDirLocations.java?ref=2454ee8ce0fd5747d361a2e2cd6f652aeede589d",
    "patch": "@@ -1,57 +0,0 @@\n-/*\n- *  Copyright © 2018-2019 Apollo Foundation\n- */\n-\n-package com.apollocurrency.aplwallet.apl.exec;\n-\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.Properties;\n-\n-public class CustomDirLocations {\n-    public static final String DB_DIR_PROPERTY_NAME = \"apl.customDbDir\";\n-    public static final String KEYSTORE_DIR_PROPERTY_NAME = \"apl.customVaultKeystoreDir\";\n-    private String dbDir;\n-    private String keystoreDir;\n-\n-    public CustomDirLocations(String dbDir, String keystoreDir) {\n-        this.dbDir = dbDir;\n-        this.keystoreDir = keystoreDir;\n-    }\n-\n-    public CustomDirLocations(Properties properties) {\n-        Objects.requireNonNull(properties, \"Properties should not be null\");\n-        this.dbDir = properties.getProperty(DB_DIR_PROPERTY_NAME);\n-        this.keystoreDir = properties.getProperty(KEYSTORE_DIR_PROPERTY_NAME);\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (!(o instanceof CustomDirLocations)) return false;\n-        CustomDirLocations that = (CustomDirLocations) o;\n-        return Objects.equals(dbDir, that.dbDir) &&\n-            Objects.equals(keystoreDir, that.keystoreDir);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(dbDir, keystoreDir);\n-    }\n-\n-    public Optional<String> getDbDir() {\n-        return Optional.ofNullable(dbDir);\n-    }\n-\n-    public void setDbDir(String dbDir) {\n-        this.dbDir = dbDir;\n-    }\n-\n-    public Optional<String> getKeystoreDir() {\n-        return Optional.ofNullable(keystoreDir);\n-    }\n-\n-    public void setKeystoreDir(String keystoreDir) {\n-        this.keystoreDir = keystoreDir;\n-    }\n-}"
  },
  {
    "sha": "d0802f6ccc89c5528cb8d5c5d39b855328fbc5c2",
    "filename": "apl-utils/src/main/java/com/apollocurrency/aplwallet/apl/util/StringUtils.java",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/76191f16b5338316042b6c1f6ad8573b115a5030/apl-utils/src/main/java/com/apollocurrency/aplwallet/apl/util/StringUtils.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/76191f16b5338316042b6c1f6ad8573b115a5030/apl-utils/src/main/java/com/apollocurrency/aplwallet/apl/util/StringUtils.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-utils/src/main/java/com/apollocurrency/aplwallet/apl/util/StringUtils.java?ref=76191f16b5338316042b6c1f6ad8573b115a5030",
    "patch": "@@ -34,4 +34,21 @@ public static boolean equalsIgnoreCase(String str, List<String> l) {\n         }\n         return false;\n     }\n+    \n+    /**\n+     * Takes first not-empty value and ignores the rest of values\n+     * @param values strings or nulls\n+     * @return first not-empty value\n+     */\n+    public static String byPrecednce(String ...values){\n+        String res =\"\";\n+        String[] va = values;\n+        for (int i = 0; i<va.length; i++){\n+            if(!isBlank(va[i])){\n+               res=va[i];\n+               break;\n+            }\n+        }\n+        return res;\n+    }\n }"
  },
  {
    "sha": "7de633b6cfea80466bae3a3f24965d1b7cca157d",
    "filename": "apl-utils/src/main/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/PredefinedDirLocations.java",
    "status": "modified",
    "additions": 36,
    "deletions": 41,
    "changes": 77,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/76191f16b5338316042b6c1f6ad8573b115a5030/apl-utils/src/main/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/PredefinedDirLocations.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/76191f16b5338316042b6c1f6ad8573b115a5030/apl-utils/src/main/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/PredefinedDirLocations.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-utils/src/main/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/PredefinedDirLocations.java?ref=76191f16b5338316042b6c1f6ad8573b115a5030",
    "patch": "@@ -1,35 +1,57 @@\n /*\n  * Copyright © 2018 Apollo Foundation\n  */\n-\n package com.apollocurrency.aplwallet.apl.util.env.dirprovider;\n \n import com.apollocurrency.aplwallet.apl.util.StringUtils;\n \n import java.nio.file.InvalidPathException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-\n+import java.util.Properties;\n+import lombok.Getter;\n \n public class PredefinedDirLocations {\n-    private Path dbDir;\n-    private Path logsDir;\n-    private Path vaultKeystoreDir;\n-    private Path dexStorageDir;\n-    private Path pidFilePath;\n-    private Path twoFactorAuthDir;\n-    private Path dataExportDir; // path to keep exported CSV files\n \n-    public PredefinedDirLocations() {\n-        this(null, null, null, null, null, null, null);\n+    @Getter\n+    private final Path dbDir;\n+    @Getter\n+    private final Path logsDir;\n+    @Getter\n+    private final Path vaultKeystoreDir;\n+    @Getter\n+    private final Path dexKeystoreDir;\n+    @Getter\n+    private final Path pidFilePath;\n+    @Getter\n+    private final Path twoFactorAuthDir;\n+    @Getter\n+    private final Path dataExportDir; // path to keep exported CSV files\n+\n+    public PredefinedDirLocations(Properties properties) {\n+        this(\n+                (String) properties.get(\"apl.customDbDir\"),\n+                (String) properties.get(\"apl.customLogDir\"),\n+                (String) properties.get(\"apl.customVaultKeystoreDir\"),\n+                (String) properties.get(\"apl.customPidFile\"),\n+                (String) properties.get(\"apl.dir2FA\"),\n+                (String) properties.get(\"apl.customDataExportDir\"),\n+                (String) properties.get(\"apl.customDexStorageDir\")\n+        );\n     }\n \n-    public PredefinedDirLocations(String dbDir, String logsDir, String vaultKeystoreDir, String pidFilePath,\n-                                  String twoFactorAuthDir, String dataExportDir, String dexStorage) {\n+    public PredefinedDirLocations(String dbDir,\n+            String logsDir,\n+            String vaultKeystoreDir,\n+            String pidFilePath,\n+            String twoFactorAuthDir,\n+            String dataExportDir,\n+            String dexStorage) \n+    {\n         this.dbDir = getPath(dbDir);\n         this.logsDir = getPath(logsDir);\n         this.vaultKeystoreDir = getPath(vaultKeystoreDir);\n-        this.dexStorageDir = getPath(dexStorage);\n+        this.dexKeystoreDir = getPath(dexStorage);\n \n         this.pidFilePath = getPath(pidFilePath);\n         this.twoFactorAuthDir = getPath(twoFactorAuthDir);\n@@ -46,31 +68,4 @@ private Path getPath(String path) {\n         return null;\n     }\n \n-    public Path getDbDir() {\n-        return dbDir;\n-    }\n-\n-    public Path getLogsDir() {\n-        return logsDir;\n-    }\n-\n-    public Path getVaultKeystoreDir() {\n-        return vaultKeystoreDir;\n-    }\n-\n-    public Path getPidFilePath() {\n-        return pidFilePath;\n-    }\n-\n-    public Path getTwoFactorAuthDir() {\n-        return twoFactorAuthDir;\n-    }\n-\n-    public Path getDataExportDir() {\n-        return dataExportDir;\n-    }\n-\n-    public Path getDexKeystoreDir() {\n-        return dexStorageDir;\n-    }\n }"
  },
  {
    "sha": "68e642cdc6beb4d7ba19f95fcfd581a1f820a5a5",
    "filename": "apl-utils/src/test/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/DirProviderFactoryTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/76191f16b5338316042b6c1f6ad8573b115a5030/apl-utils/src/test/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/DirProviderFactoryTest.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/76191f16b5338316042b6c1f6ad8573b115a5030/apl-utils/src/test/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/DirProviderFactoryTest.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-utils/src/test/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/DirProviderFactoryTest.java?ref=76191f16b5338316042b6c1f6ad8573b115a5030",
    "patch": "@@ -5,6 +5,7 @@\n package com.apollocurrency.aplwallet.apl.util.env.dirprovider;\n \n import com.apollocurrency.aplwallet.apl.util.env.RuntimeEnvironment;\n+import java.util.Properties;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n@@ -42,7 +43,7 @@ void getInstance() {\n \n     @Test\n     void getInstance2() {\n-        PredefinedDirLocations dirLocations = new PredefinedDirLocations();\n+        PredefinedDirLocations dirLocations = new PredefinedDirLocations(new Properties());\n         DirProviderFactory.setup(true, UUID.randomUUID(), \"Default\", dirLocations);\n         DirProvider df = DirProviderFactory.getProvider();\n         assertNotNull(df.getAppBaseDir());"
  },
  {
    "sha": "bfb00b02da45be04d2fb066ac6ea208e61535a44",
    "filename": "apl-utils/src/test/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/PredefinedDirLocationsTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ApolloFoundation/Apollo/blob/76191f16b5338316042b6c1f6ad8573b115a5030/apl-utils/src/test/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/PredefinedDirLocationsTest.java",
    "raw_url": "https://github.com/ApolloFoundation/Apollo/raw/76191f16b5338316042b6c1f6ad8573b115a5030/apl-utils/src/test/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/PredefinedDirLocationsTest.java",
    "contents_url": "https://api.github.com/repos/ApolloFoundation/Apollo/contents/apl-utils/src/test/java/com/apollocurrency/aplwallet/apl/util/env/dirprovider/PredefinedDirLocationsTest.java?ref=76191f16b5338316042b6c1f6ad8573b115a5030",
    "patch": "@@ -4,6 +4,7 @@\n \n package com.apollocurrency.aplwallet.apl.util.env.dirprovider;\n \n+import java.util.Properties;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -13,7 +14,7 @@\n \n     @Test\n     void createWithNulls() {\n-        PredefinedDirLocations locations = new PredefinedDirLocations();\n+        PredefinedDirLocations locations = new PredefinedDirLocations(new Properties());\n         assertNull(locations.getDbDir());\n         assertNull(locations.getLogsDir());\n         assertNull(locations.getPidFilePath());"
  }
]
