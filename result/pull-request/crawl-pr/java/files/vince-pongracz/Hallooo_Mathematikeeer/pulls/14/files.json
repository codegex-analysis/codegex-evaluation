[
  {
    "sha": "4133fe9b973c660532d582fb4a7fba027a5bc4da",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/.gitignore",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/.gitignore",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/.gitignore?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -5,4 +5,13 @@ ideaProject/.gradle/*\n ideaProject/modules/\n ideaProject/logs/\n ideaProject/.idea/codestream.xml\n-ideaProject/.idea/misc.xml\n\\ No newline at end of file\n+ideaProject/.idea/misc.xml\n+ideaProject/.idea/sonarlint/issuestore/index.pb\n+ideaProject/callStacks/\n+.DS_Store\n+ideaProject/.DS_Store\n+ideaProject/src/.DS_Store\n+ideaProject/src/main/.DS_Store\n+ideaProject/src/main/java/.DS_Store\n+ideaProject/src/main/java/org/.DS_Store\n+ideaProject/src/main/java/org/asteroidapp/.DS_Store\n\\ No newline at end of file"
  },
  {
    "sha": "f654fb0ee51620a8bbcb513e22041138a2db114b",
    "filename": "gradleHELP.md",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/gradleHELP.md",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/gradleHELP.md",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/gradleHELP.md?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -5,4 +5,6 @@ command in project's terminal: gradlew\n build & run project: gradlew run\n help in gradle: gradlew --help\n \n+ha elcsesződik, és sok eddig nem piros kód pirosodott be: gradle fül oldalt idea-ban, sync ikon, *click* és oké :)\n+\n more info: https://docs.gradle.org/current/userguide/command_line_interface.html"
  },
  {
    "sha": "59377f44f0fa512c4fab9189100aaf2634b0ef18",
    "filename": "ideaProject/.idea/codestream.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/.idea/codestream.xml",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/.idea/codestream.xml",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/.idea/codestream.xml?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -2,6 +2,6 @@\n <project version=\"4\">\r\n   <component name=\"CodeStream\">\r\n     <option name=\"teamId\" value=\"602027b74df50962fcdb5ef7\" />\r\n-    <option name=\"webViewContext\" value=\"{&quot;chatProviderAccess&quot;:&quot;strict&quot;,&quot;newPostEntryPoint&quot;:&quot;JB Commit Detected&quot;,&quot;currentTeamId&quot;:&quot;602027b74df50962fcdb5ef7&quot;,&quot;currentStreamId&quot;:&quot;&quot;,&quot;pullRequestCheckoutBranch&quot;:false,&quot;isRepositioning&quot;:false,&quot;onboardStep&quot;:0,&quot;panelStack&quot;:[&quot;sidebar&quot;,&quot;landing-redirect&quot;],&quot;hasFocus&quot;:true,&quot;channelFilter&quot;:&quot;all&quot;,&quot;channelsMuteAll&quot;:false,&quot;codemarkFileFilter&quot;:&quot;all&quot;,&quot;codemarkTypeFilter&quot;:&quot;all&quot;,&quot;codemarkTagFilter&quot;:&quot;all&quot;,&quot;codemarkBranchFilter&quot;:&quot;all&quot;,&quot;codemarkAuthorFilter&quot;:&quot;all&quot;,&quot;codemarksFileViewStyle&quot;:&quot;inline&quot;,&quot;codemarksShowArchived&quot;:false,&quot;codemarksShowResolved&quot;:false,&quot;codemarksWrapComments&quot;:false,&quot;showFeedbackSmiley&quot;:true,&quot;route&quot;:{&quot;name&quot;:&quot;login&quot;,&quot;params&quot;:{}},&quot;spatialViewShowPRComments&quot;:false,&quot;isFirstPageview&quot;:false,&quot;currentReviewOptions&quot;:{&quot;includeLatestCommit&quot;:true},&quot;currentReviewId&quot;:&quot;&quot;}\" />\r\n+    <option name=\"webViewContext\" value=\"{&quot;chatProviderAccess&quot;:&quot;strict&quot;,&quot;newPostEntryPoint&quot;:&quot;JB Commit Detected&quot;,&quot;currentTeamId&quot;:&quot;602027b74df50962fcdb5ef7&quot;,&quot;currentStreamId&quot;:&quot;&quot;,&quot;pullRequestCheckoutBranch&quot;:false,&quot;isRepositioning&quot;:false,&quot;onboardStep&quot;:0,&quot;panelStack&quot;:[&quot;new-review&quot;,&quot;sidebar&quot;,&quot;landing-redirect&quot;],&quot;hasFocus&quot;:true,&quot;channelFilter&quot;:&quot;all&quot;,&quot;channelsMuteAll&quot;:false,&quot;codemarkFileFilter&quot;:&quot;all&quot;,&quot;codemarkTypeFilter&quot;:&quot;all&quot;,&quot;codemarkTagFilter&quot;:&quot;all&quot;,&quot;codemarkBranchFilter&quot;:&quot;all&quot;,&quot;codemarkAuthorFilter&quot;:&quot;all&quot;,&quot;codemarksFileViewStyle&quot;:&quot;inline&quot;,&quot;codemarksShowArchived&quot;:false,&quot;codemarksShowResolved&quot;:false,&quot;codemarksWrapComments&quot;:false,&quot;showFeedbackSmiley&quot;:true,&quot;route&quot;:{&quot;name&quot;:&quot;login&quot;,&quot;params&quot;:{}},&quot;spatialViewShowPRComments&quot;:false,&quot;isFirstPageview&quot;:false,&quot;currentReviewOptions&quot;:{&quot;includeLatestCommit&quot;:true},&quot;currentReviewId&quot;:&quot;&quot;,&quot;profileUserId&quot;:&quot;6020279b8b630d62fd1b75ce&quot;}\" />\r\n   </component>\r\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "8337fe09792113e3d6425e60e0af9c1ae70478dd",
    "filename": "ideaProject/.idea/ideaProject.iml",
    "status": "removed",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/311a98f5e82fc6cc51f318d3febe1d7bcbd7f3f2/ideaProject/.idea/ideaProject.iml",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/311a98f5e82fc6cc51f318d3febe1d7bcbd7f3f2/ideaProject/.idea/ideaProject.iml",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/.idea/ideaProject.iml?ref=311a98f5e82fc6cc51f318d3febe1d7bcbd7f3f2",
    "patch": "@@ -1,9 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<module external.linked.project.id=\"asteroids:main\" external.linked.project.path=\"$MODULE_DIR$\" external.root.project.path=\"$MODULE_DIR$\" external.system.id=\"GRADLE\" external.system.module.group=\"org.example\" external.system.module.version=\"1.0-SNAPSHOT\" type=\"JAVA_MODULE\" version=\"4\">\n-  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n-    <exclude-output />\n-    <content url=\"file://$MODULE_DIR$\" />\n-    <orderEntry type=\"inheritedJdk\" />\n-    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n-  </component>\n-</module>\n\\ No newline at end of file"
  },
  {
    "sha": "ee41125d44c30389c2121a9362773571a4939cdf",
    "filename": "ideaProject/.idea/misc.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/.idea/misc.xml",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/.idea/misc.xml?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,7 +1,10 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <project version=\"4\">\r\n   <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n-  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_14\" default=\"false\" project-jdk-name=\"15\" project-jdk-type=\"JavaSDK\">\r\n+  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n+    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\r\n+  </component>\r\n+  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_15\" default=\"true\" project-jdk-name=\"15\" project-jdk-type=\"JavaSDK\">\r\n     <output url=\"file://$PROJECT_DIR$/out\" />\r\n   </component>\r\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "3f80f1e97a70d0b24fc5865fc03885e003e1cba5",
    "filename": "ideaProject/.idea/sonarlint/issuestore/index.pb",
    "status": "modified",
    "additions": 5,
    "deletions": 7,
    "changes": 12,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/.idea/sonarlint/issuestore/index.pb",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/.idea/sonarlint/issuestore/index.pb",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/.idea/sonarlint/issuestore/index.pb?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -5,10 +5,6 @@\n \u000Bgradlew.bat\u0012,2\\a\\2a45a911a8f1836b0b6c5b758962572012d8f8c3\n 7\n \u0007gradlew\u0012,5\\b\\5bbfa66edb4db3c7c33c5181f43510990d3307f9\n-]\n--src/main/java/org/asteroidapp/Observable.java\u0012,d\\5\\d5015c097a5d6933e24b9b02cdcf4ced27e2b0fb\n-[\n-+src/main/java/org/asteroidapp/Observer.java\u0012,e\\5\\e55f6edd10816dd95b8a9b5e963f0d42e0a296c4\n ?\n \u000Fsettings.gradle\u0012,0\\5\\05efc8b1657769a27696d478ded1e95f38737233\n Y\n@@ -25,8 +21,6 @@ a\n 1src/main/java/org/asteroidapp/resources/Iron.java\u0012,2\\5\\25dcd1fc1d598d197d8e07f591e3f0cbf9ee97ac\n a\n 1src/main/java/org/asteroidapp/resources/Uran.java\u0012,9\\9\\99336c81a92e0da85456b7c6bc9b513f486e9e56\n-b\n-2src/main/java/org/asteroidapp/EventObservable.java\u0012,1\\5\\158fc34052c31f616ebbcfbd46e06dfb0adcc2a4\n m\n =src/main/java/org/asteroidapp/spaceobject/asteroid/Layer.java\u0012,c\\2\\c22044b1176eee2fde0780c7d820cfd8a797e0df\n c\n@@ -56,4 +50,8 @@ a\n `\n 0src/main/java/org/asteroidapp/AppController.java\u0012,d\\f\\df66229ac777f50cabb27a3634153c07e4a54258\n a\n-1src/main/java/org/asteroidapp/util/ConsoleUI.java\u0012,8\\8\\88331e60d01b79dd451ef7945ec96b20a102eb70\n\\ No newline at end of file\n+1src/main/java/org/asteroidapp/util/ConsoleUI.java\u0012,8\\8\\88331e60d01b79dd451ef7945ec96b20a102eb70\n+l\n+<src/main/java/org/asteroidapp/resources/ResourceStorage.java\u0012,1\\6\\163d01dd3a7b0212162c287020276078433c5bf5\n+g\n+7src/main/java/org/asteroidapp/util/CallStackViewer.java\u0012,6\\c\\6ca52822bafebdc39442ac68e8973926cce9906c\n\\ No newline at end of file"
  },
  {
    "sha": "902c6c2c20e3558982fffaedb036abc516ddbc8d",
    "filename": "ideaProject/build.gradle",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/build.gradle",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/build.gradle",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/build.gradle?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -3,6 +3,9 @@ plugins {\n     id 'application'\r\n     id 'org.openjfx.javafxplugin' version '0.0.8'\r\n }\r\n+run {\r\n+    standardInput(System.in)\r\n+}\r\n \r\n group 'org.example'\r\n version '1.0-SNAPSHOT'\r\n@@ -22,8 +25,6 @@ dependencies {\n     //log4j\r\n     compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'\r\n     compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'\r\n-\r\n-\r\n }\r\n \r\n javafx {\r"
  },
  {
    "sha": "62d4c053550b91381bbd28b1afc82d634bf73a8a",
    "filename": "ideaProject/gradle/wrapper/gradle-wrapper.jar",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/gradle/wrapper/gradle-wrapper.jar",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/gradle/wrapper/gradle-wrapper.jar",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/gradle/wrapper/gradle-wrapper.jar?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df"
  },
  {
    "sha": "442d9132ea32808ad980df4bd233b359f76341a7",
    "filename": "ideaProject/gradle/wrapper/gradle-wrapper.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/gradle/wrapper/gradle-wrapper.properties",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/gradle/wrapper/gradle-wrapper.properties",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/gradle/wrapper/gradle-wrapper.properties?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,5 +1,5 @@\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-6.5-bin.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-6.8.3-bin.zip\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists"
  },
  {
    "sha": "fbd7c515832dab7b01092e80db76e5e03fe32d29",
    "filename": "ideaProject/gradlew",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/gradlew",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/gradlew",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/gradlew?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -82,6 +82,7 @@ esac\n \n CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n \n+\n # Determine the Java command to use to start the JVM.\n if [ -n \"$JAVA_HOME\" ] ; then\n     if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n@@ -129,6 +130,7 @@ fi\n if [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n     APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n     CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n+    \n     JAVACMD=`cygpath --unix \"$JAVACMD\"`\n \n     # We build the pattern for arguments to be converted via cygpath"
  },
  {
    "sha": "a9f778a7a964b6f01c904ee667903f005d6df556",
    "filename": "ideaProject/gradlew.bat",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/gradlew.bat",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/gradlew.bat",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/gradlew.bat?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -84,6 +84,7 @@ set CMD_LINE_ARGS=%*\n \r\n set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n \r\n+\r\n @rem Execute Gradle\r\n \"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n \r"
  },
  {
    "sha": "a06e1a3928a6242038f25b6bdeea0f695f861b13",
    "filename": "ideaProject/src/main/java/org/asteroidapp/AppController.java",
    "status": "modified",
    "additions": 44,
    "deletions": 9,
    "changes": 53,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/AppController.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/AppController.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/AppController.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,15 +1,19 @@\n package org.asteroidapp;\r\n \r\n-import javafx.application.Application;\r\n-import javafx.scene.Scene;\r\n-import javafx.scene.control.Button;\r\n-import javafx.scene.layout.StackPane;\r\n-import javafx.stage.Stage;\r\n import org.apache.logging.log4j.Level;\r\n import org.apache.logging.log4j.LogManager;\r\n import org.apache.logging.log4j.Logger;\r\n+import org.asteroidapp.resources.Coal;\r\n+import org.asteroidapp.resources.FrozenWater;\r\n+import org.asteroidapp.resources.ResourceStorage;\r\n+import org.asteroidapp.resources.Uran;\r\n+import org.asteroidapp.util.CallStackViewer;\r\n import org.asteroidapp.util.ConsoleUI;\r\n \r\n+import java.util.ArrayDeque;\r\n+import java.util.Queue;\r\n+\r\n+\r\n //extends Application\r\n public class AppController {\r\n \r\n@@ -33,7 +37,7 @@ public void start(Stage primaryStage) throws Exception {\n     /*\r\n      *\r\n      */\r\n-    //TODO is it neccessary?\r\n+    //TODO is it necessary?\r\n     //questionable method...\r\n     private void startGame() {\r\n         log.log(Level.TRACE, \"Start game\");\r\n@@ -53,6 +57,9 @@ public void pauseAndResumeGame() {\n         log.log(Level.TRACE, \"Game is paused / resumed\");\r\n     }\r\n \r\n+    /**\r\n+     * Logger for AppController\r\n+     */\r\n     private static Logger log = LogManager.getLogger(AppController.class.getSimpleName());\r\n \r\n     private static boolean quitCondition = false;\r\n@@ -63,22 +70,33 @@ private void consoleDemo() {\n         log.log(Level.INFO, \"Hello team :)\");\r\n \r\n         while (!quitCondition) {\r\n-            ConsoleUI.getInstance().sendMessageToConsole(\"Type start to start!\");\r\n+            ConsoleUI.getInstance().sendMessageToConsole(\"Type start to start,\" +\r\n+                    \" help to show options, or quit to close application!\");\r\n             String response = ConsoleUI.getInstance().readLineFromConsole();\r\n             if (response != null) {\r\n                 if (response.equals(\"start\")) {\r\n                     //startGame();\r\n                     GameController.getInstance().setupGame();\r\n                     GameController.getInstance().inGame();\r\n-                    //wipe game data to probable restart --- solve this\r\n+                    //TODO wipe game data to probable restart, or rerun with current config --- solve this\r\n \r\n                 } else if (response.equals(\"help\")) {\r\n                     ConsoleUI.getInstance().sendMessageToConsole(\"help --> help msg\");\r\n                     ConsoleUI.getInstance().sendMessageToConsole(\"start --> start and config game\");\r\n                     ConsoleUI.getInstance().sendMessageToConsole(\"quit --> close app\");\r\n+                    ConsoleUI.getInstance().sendMessageToConsole(\"test1 --> run pre-defined config: test1\");\r\n                 } else if (response.equals(\"quit\")) {\r\n                     quitCondition = true;\r\n                     //delete/free resources\r\n+                } else if (response.equals(\"test1\")) {\r\n+                    Queue<String> autoCommands= new ArrayDeque<String>();\r\n+                    autoCommands.add(\"1\");\r\n+                    autoCommands.add(\"test1\");\r\n+                    autoCommands.add(\"1\");\r\n+                    ConsoleUI.getInstance().setAutoCommands(autoCommands);\r\n+\r\n+                    GameController.getInstance().setupGame();\r\n+                    GameController.getInstance().inGame();\r\n                 } else {\r\n                     //NOP\r\n                 }\r\n@@ -87,10 +105,27 @@ private void consoleDemo() {\n         }\r\n     }\r\n \r\n+    public void containerTest(){\r\n+        ResourceStorage storage = new ResourceStorage();\r\n+        storage.setAllCapacity(3);\r\n+        storage.pushResource(new FrozenWater());\r\n+        storage.pushMore(2, new Coal());\r\n+        storage.popResource(new Coal());\r\n+        storage.setAllCapacity(6);\r\n+        storage.pushMore(3, new Uran());\r\n+        storage.popMore(2, new Uran());\r\n+        storage.countOf(new Uran());\r\n+        storage.popMore(4, new Uran());\r\n+        storage.setAllCapacity(2);\r\n+        storage.pushResource(new FrozenWater());\r\n+    }\r\n+\r\n     public static void main(String[] args) {\r\n+        CallStackViewer.getInstance().methodStartsLogCall(\"___CALLSTACK:___\");\r\n+\r\n         AppController app = new AppController();\r\n         app.consoleDemo();\r\n \r\n-\r\n+        CallStackViewer.getInstance().methodReturns();\r\n     }\r\n }\n\\ No newline at end of file"
  },
  {
    "sha": "8a2f62a41cf94faac69e48a9a6c1e62a2de060ef",
    "filename": "ideaProject/src/main/java/org/asteroidapp/AsteroidZone.java",
    "status": "modified",
    "additions": 108,
    "deletions": 24,
    "changes": 132,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/AsteroidZone.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/AsteroidZone.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/AsteroidZone.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -5,6 +5,7 @@\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.util.CallStackViewer;\n \n import java.util.*;\n \n@@ -14,14 +15,22 @@\n  */\n public class AsteroidZone {\n \n-    int asteroidSize = 80;\n-    private static final Logger log = LogManager.getLogger(AsteroidZone.class.toString());\n+    private int asteroidSize = 80;\n+\n+    //only one random per class should exist otherwise it would give the same result (Position, Resource) for every asteroid\n+    private Random random = new Random(999); //seed: 999 is good for testing uran explosion\n+\n+\n+    /**\n+     * logger for AsteroidZone\n+     */\n+    private static final Logger log = LogManager.getLogger(AsteroidZone.class.getSimpleName());\n \n     /**\n      * Default constructor\n      */\n     private AsteroidZone() {\n-        spaceObjects = new HashSet<>();\n+        spaceObjects = Collections.synchronizedSet(new HashSet<>());\n     }\n \n     private static AsteroidZone instance = null;\n@@ -37,12 +46,12 @@ public static AsteroidZone getInstance() {\n      * The definition of what is too close to the sun (in pixels)\n      */\n     //TODO setter, or preset\n-    public static double defOfCloseToSun = 30;\n+    public static double defOfCloseToSun = 500;\n \n     /**\n      * It stores the objects e.g. asteroid, home asteroid, portals\n      */\n-    private Set<SteppableSpaceObject> spaceObjects;\n+    private Set<SteppableSpaceObject> spaceObjects = null;\n \n     /**\n      * store the sun\n@@ -60,36 +69,67 @@ public Sun getSun() {\n      * the home asteroid and the sun.\n      */\n     public void createZone() {\n+        CallStackViewer.getInstance().methodStartsLogCall(\"createZone() called\");\n+\n         //add home\n         int range = 1000;\n-        int numOfAsteroids = 8;\n-        Random rand = new Random();\n+        int numOfAsteroids = 23;\n+\n         Resource resource;\n         int layer;\n \n-        homeAsteroid = new HomeAsteroid(new Position(0, 0, 10), new Empty());\n-        spaceObjects.add(homeAsteroid);\n-\n         //For now the Sun is in the top-left Corner and has a size of 100 x 100\n-        sun = new Sun(new Position(0, 100, 50));\n+        sun = new Sun(new Position(150, 150, 50));\n         log.log(Level.TRACE, \"Sun has been created in the top-left corner\");\n \n-        int i = 0;\n-        while (i < numOfAsteroids) {\n+        homeAsteroid = new HomeAsteroid(new Position(400, 500, 5), new Empty());\n+        spaceObjects.add(homeAsteroid);\n+\n+        int numOfPlacedAsteroids = 0;\n+        while (numOfPlacedAsteroids < numOfAsteroids && numOfPlacedAsteroids <= 23) {\n             //TODO add minimal, maximal distance logic, namefaker for spacenames\n             Position randomPosition = generateRandomPosition(range);\n+\n             if (checkDistanceAtCreate(randomPosition)) {\n-                randomPosition.setRadius(30);\n+                randomPosition.setRadius(5);\n                 resource = generateRandomResource();\n-                layer = rand.nextInt(5) + 3;\n-                //Layer is between 3 and 8\n-                spaceObjects.add(new Asteroid(\"temp\" + i, randomPosition, resource, layer));\n+\n+                //Layer is between 3 and 6\n+                layer = random.nextInt(3) + 3;\n+\n+                spaceObjects.add(new Asteroid(\"temp\" + numOfPlacedAsteroids, randomPosition, resource, layer));\n                 log.log(Level.TRACE, \"Asteroid created at x={} y={} with a core of {} with layer={}\",\n                         (int) randomPosition.getX(), (int) randomPosition.getY(), resource.getName(), layer);\n-                i++;\n+                numOfPlacedAsteroids++;\n             }\n         }\n \n+        //TODO Slipping is not working\n+/*\n+        if(numOfAsteroids > 20){\n+            Position slippedPosition = null;\n+\n+            while(numOfPlacedAsteroids < numOfAsteroids){\n+                for(SteppableSpaceObject elem: spaceObjects){\n+                    slippedPosition = generateSlippedPosition(elem.getPosition(), range);\n+\n+                    if(slippedPosition != null){\n+                        resource = generateRandomResource();\n+                        layer = random.nextInt(3) + 3;\n+                        slippedPosition.setRadius(5);\n+                        spaceObjects.add(new Asteroid(\"temp\" + numOfPlacedAsteroids, slippedPosition, resource, layer));\n+                        log.log(Level.TRACE, \"Asteroid created at x={} y={} with a core of {} with layer={}\", (int) slippedPosition.getX(), (int) slippedPosition.getY(), resource.getName(), layer);\n+                        numOfPlacedAsteroids++;\n+                    }\n+\n+                    if(numOfPlacedAsteroids == numOfAsteroids)\n+                        break;\n+                }\n+                break;\n+            }\n+        }*/\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -98,11 +138,16 @@ public void createZone() {\n      * @param spaceObj The object that is going to added to the list of spaceObjects\n      */\n     public void addSpaceObject(SteppableSpaceObject spaceObj) {\n+        log.log(Level.INFO, \"addSpaceObject called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"addSpaceObject() called\");\n+\n         if (spaceObj != null) {\n             spaceObjects.add(spaceObj);\n         } else {\n-            //NOP\n+            log.log(Level.WARN, \"spaceObj is null\");\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -111,8 +156,16 @@ public void addSpaceObject(SteppableSpaceObject spaceObj) {\n      * @param removedSpaceObject The object that is going to removed to the list of spaceObjects\n      */\n     public void removeSpaceObject(SteppableSpaceObject removedSpaceObject) {\n-        //TODO nullcheck\n-        spaceObjects.remove(removedSpaceObject);\n+        log.log(Level.INFO, \"removeSpaceObject called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"removeSpaceObject() called\");\n+\n+        if (removedSpaceObject != null) {\n+            spaceObjects.remove(removedSpaceObject);\n+        } else {\n+            log.log(Level.WARN, \"removedSpaceObject is null\");\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -130,18 +183,49 @@ public void removeSpaceObject(SteppableSpaceObject removedSpaceObject) {\n      * @return A random position that an object owns on the screen\n      */\n     public Position generateRandomPosition(int range) {\n-        Random random = new Random();\n-        return new Position(random.nextInt(range - asteroidSize), random.nextInt(range - asteroidSize) + asteroidSize);\n+        //Round to the nearest number that can be divided by 5 for less possible Positions\n+        int x = random.nextInt(range - asteroidSize);\n+        int y = random.nextInt(range - asteroidSize) + asteroidSize;\n+        return new Position(x, y);\n     }\n \n+    //TODO Slipping the asteroids is not working :(\n+/*\n+    public Position generateSlippedPosition(Position currentPos, int range){\n+        Position slipped = null;\n+        boolean isNotCorrect = true;\n+        int x = 0;\n+\n+        while(x < range - asteroidSize && isNotCorrect){\n+            Position temp = new Position(x, currentPos.getY());\n+            if(checkDistanceAtCreate(temp)) {\n+                slipped = temp;\n+                isNotCorrect = true;\n+            }\n+            x += 1;\n+        }\n+\n+        int y = asteroidSize;\n+        if(slipped == null){\n+            while(y < range && isNotCorrect){\n+                Position temp = new Position(currentPos.getX(), y);\n+                if(checkDistanceAtCreate(temp)) {\n+                    slipped = temp;\n+                    isNotCorrect = true;\n+                }\n+                y += 1;\n+            }\n+        }\n+        return slipped;\n+    }\n+*/\n     /**\n      * It generates a randomly selected resource\n      *\n      * @return A randomly selected resource\n      */\n     public Resource generateRandomResource() {\n         //TODO solve: 5 of each Resources should not be near to the sun\n-        Random random = new Random();\n         int randNum = random.nextInt(5);\n         Resource result;\n "
  },
  {
    "sha": "b32644fa92fb6c87e53159e3eb4c7d34d0b003a8",
    "filename": "ideaProject/src/main/java/org/asteroidapp/GameController.java",
    "status": "modified",
    "additions": 74,
    "deletions": 44,
    "changes": 118,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/GameController.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/GameController.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/GameController.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -6,6 +6,8 @@\n import org.apache.logging.log4j.Logger;\n import org.asteroidapp.entities.AIRobot;\n import org.asteroidapp.entities.Settler;\n+import org.asteroidapp.resources.*;\n+import org.asteroidapp.util.CallStackViewer;\n import org.asteroidapp.util.ConsoleUI;\n \n import java.util.*;\n@@ -15,22 +17,26 @@\n  */\n public class GameController {\n \n+    /**\n+     * Logger for GameController\n+     */\n     private static final Logger log = LogManager.getLogger(GameController.class.getSimpleName());\n \n     /**\n      * Default constructor\n      */\n     private GameController() {\n         log.log(Level.INFO, \"GameController constructor called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"GameController constructor called\");\n \n         //default config?\n         //later set in setup\n         gameIsRunning = false;\n         currentRound = 1;\n-        playersNum = 1;\n-\n+        playersNum = 0;\n         settlerNum = 1;\n \n+\n         GsonBuilder gsonBuilder = new GsonBuilder();\n         log.log(Level.TRACE, \"jsonBuilder created\");\n         log.log(Level.INFO, \"\\nDefault config set:\\n{}\", gsonBuilder.setPrettyPrinting().create().toJson(this));\n@@ -41,6 +47,7 @@ private GameController() {\n         log.log(Level.TRACE, \"robots has their collection\");\n         log.log(Level.TRACE, \"players has their collection\");\n \n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     private static GameController instance = null;\n@@ -95,6 +102,7 @@ public static GameController getInstance() {\n      */\n     private void dropSettlers() {\n         log.log(Level.INFO, \"dropSettlers called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"dropSettlers() called\");\n         log.log(Level.TRACE, \"iterate on player(s) to create their settler(s)\");\n \n         //for every player\n@@ -108,7 +116,13 @@ private void dropSettlers() {\n                 String name = playerName + \"'s settler\" + i;\n \n                 //create new Settler (set name, startPlace, and owner), and bind to his/her owner\n-                var newSettler = new Settler(name, AsteroidZone.getInstance().findHome(), playerItem);\n+                var startPlace = AsteroidZone.getInstance().findHome();\n+                var newSettler = new Settler(name, startPlace, playerItem);\n+\n+                //bind settler to his/her asteroid (to get the notifications from his/her SteppableSpaceObject)\n+                startPlace.checkIn(newSettler);\n+                //bind settler to the sun (to get the notifications from sun)\n+                AsteroidZone.getInstance().getSun().checkIn(newSettler);\n \n                 //bind player to settler\n                 playerItem.addSettler(newSettler);\n@@ -118,6 +132,8 @@ private void dropSettlers() {\n \n             log.log(Level.INFO, \"Player {}'s settler(s): done\", playerName);\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -126,6 +142,7 @@ private void dropSettlers() {\n      */\n     private void createAndNamePlayers() {\n         log.log(Level.INFO, \"createAndNamePlayers called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"createAndNamePlayers() called\");\n \n         //create so many players, which was given in config\n         for (int i = 0; i < playersNum; ) {\n@@ -147,6 +164,8 @@ private void createAndNamePlayers() {\n                 ConsoleUI.getInstance().sendMessageToConsole(\"Wrong name\");\n             }\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -155,18 +174,19 @@ private void createAndNamePlayers() {\n     public void setupGame() {\n \n         log.log(Level.INFO, \"setupGame called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"setupGame() called\");\n \n         //get number and name of players\n-        ConsoleUI.getInstance().sendMessageToConsole(\"Setup...\");\n-        ConsoleUI.getInstance().sendMessageToConsole(\"#players\");\n+        log.log(Level.TRACE, \"Setup...\");\n+        ConsoleUI.getInstance().sendMessageToConsole(\"Type the number of desired players\");\n \n         playersNum = ConsoleUI.getInstance().readIntFromConsole();\n         createAndNamePlayers();\n \n-        ConsoleUI.getInstance().sendMessageToConsole(\"#settlers/player\");\n+        ConsoleUI.getInstance().sendMessageToConsole(\"Type the number of desired settlers for each player\");\n         settlerNum = ConsoleUI.getInstance().readIntFromConsole();\n \n-        ConsoleUI.getInstance().sendMessageToConsole(\"Initialize...\");\n+        log.log(Level.TRACE, \"Initialize...\");\n \n         //creating zone\n         AsteroidZone.getInstance().createZone();\n@@ -180,6 +200,8 @@ public void setupGame() {\n         ConsoleUI.getInstance().sendMessageToConsole(\"\");\n         ConsoleUI.getInstance().sendMessageToConsole(\"Setup ended\");\n         log.log(Level.INFO, \"setup ended\");\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -191,7 +213,11 @@ public void setupGame() {\n         log.log(Level.INFO, \"getIterOnPlayers called\");\n         log.log(Level.TRACE, \"return iterator on players collection\");\n \n-        return players.iterator();\n+        if (players == null || players.size() == 0) {\n+            return Collections.emptyIterator();\n+        } else {\n+            return players.iterator();\n+        }\n     }\n \n     /**\n@@ -200,26 +226,21 @@ public void setupGame() {\n      * @param name player's ame, which will be removed, if it's find in players collection\n      */\n     //TODO refactor (what's the goal of this method..?)\n-    public void removePlayer(String name) {\n+    private void removePlayer(String name) {\n         log.log(Level.INFO, \"removePlayer called\");\n \n-        log.log(Level.TRACE, \"check param\");\n-\n         if (name != null && !name.equals(\"\")) {\n             log.log(Level.INFO, \"Search player with name: {}\", name);\n \n             for (var player : players) {\n                 if (player.getName().equals(name)) {\n-\n-                    log.log(Level.TRACE, \"Player found\");\n-                    log.log(Level.INFO, \"Kill player...\");\n-                    player.killPlayer();\n-\n                     log.log(Level.INFO, \"Remove player from players collection\");\n                     players.remove(player);\n                     return;\n                 }\n             }\n+        } else {\n+            log.log(Level.INFO, \"No player found with name: {}\", name);\n         }\n     }\n \n@@ -235,9 +256,7 @@ public void leaveGame(Player playerLeaving) {\n         if (playerLeaving != null) {\n             log.log(Level.TRACE, \"kill and remove player: {}\", playerLeaving.getName());\n \n-            playerLeaving.killPlayer();\n             players.remove(playerLeaving);\n-\n         } else {\n             //NOP\n         }\n@@ -258,6 +277,7 @@ public int getRound() {\n      */\n     public void evaluateRound() {\n         log.log(Level.INFO, \"evaluateRound called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"evaluateRound() called\");\n \n         //eval flair\n         evaluateFlair();\n@@ -274,18 +294,7 @@ public void evaluateRound() {\n         else {\n             //TODO implement correctly... it's not easy to find out the way..\n \n-            //collect the collected resources in a map\n-            //String - name of the resource\n-            //Integer - piece of the resource\n-            Map<String, Integer> resources = new HashMap<>();\n-\n-            //init map\n-            //TODO refactor: add a private collection to this class, and if a reource created,\n-            //add this resource to this collection --> easier to extend\n-            resources.put(\"Coal\", 0);\n-            resources.put(\"FrozenWater\", 0);\n-            resources.put(\"Iron\", 0);\n-            resources.put(\"Uran\", 0);\n+            ResourceStorage resources = new ResourceStorage();\n \n             //iterate on players for their resources\n             for (var player : players) {\n@@ -302,12 +311,8 @@ public void evaluateRound() {\n                         //is there any collected resource?\n                         if (tempList != null) {\n                             //if yes, add them to the resources collection, what will be checked\n-                            for (var item : tempList) {\n-                                if (resources.containsKey(item.getName())) {\n-                                    resources.put(item.getName(), resources.get(item.getName()) + 1);\n-                                } else {\n-                                    resources.put(item.getName(), 1);\n-                                }\n+                            for (Resource item : tempList) {\n+                                resources.pushResource(item);\n                             }\n                         }\n                         //if no resource, send a log message... (not so important)\n@@ -329,9 +334,19 @@ public void evaluateRound() {\n             //check win:\n             //if all resource in resources are more than 3 --> WIN\n             //otherwise not\n+            //TODO ha csak pl szen és uranbol van 3-3 akkor is valszeg igazzal ter vissza mivel nem Map\n             boolean win = true;\n-            for (var item : resources.values()) {\n-                if (item.intValue() < 3) {\n+\n+            //It's not a map anymore therefore it doesn't know all the possible resources so\n+            //if it has zero resources it returns true or if it has just 3 irons it would also return true\n+            List<Resource> allResources = new ArrayList<>();\n+            allResources.add(new Coal());\n+            allResources.add(new Iron());\n+            allResources.add(new FrozenWater());\n+            allResources.add(new Uran());\n+\n+            for (var item : allResources) {\n+                if (resources.countOf(item) < 3) {\n                     win = false;\n                 }\n             }\n@@ -341,27 +356,32 @@ public void evaluateRound() {\n                 gameIsRunning = false;\n             }\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n      * Call and schedule flair events\n      */\n     private void evaluateFlair() {\n         //TODO logic to flair scheduling - long task\n-        log.log(Level.TRACE, \"evaluateFlair called\");\n+        log.log(Level.INFO, \"evaluateFlair called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"evaluateFlair() called\");\n \n-        if (getRound() % 5 == 0) {\n+        if (getRound() % 10 == 0) {\n             log.log(Level.TRACE, \"flair event will be launched\");\n \n             AsteroidZone.getInstance().getSun().notifyAboutDieEvent();\n-        } else if (getRound() % 5 == 2) {\n+        } else if (getRound() % 10 == 7) {\n             log.log(Level.TRACE, \"flair is coming in the future!\");\n \n             AsteroidZone.getInstance().getSun().notifyAboutDanger();\n         } else {\n             log.log(Level.TRACE, \"no flair event in this round\");\n             //NOP\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -377,36 +397,44 @@ public void addPlayer(Player newPlayer) {\n      * Game loop\n      */\n     public void inGame() {\n-        log.log(Level.TRACE, \"inGame called - this is the game loop\");\n+        log.log(Level.INFO, \"inGame called - this is the game loop\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"inGame()\");\n         gameIsRunning = true;\n         log.log(Level.TRACE, \"game is running: {}\", ((Boolean) gameIsRunning).toString());\n \n-        while (gameIsRunning && getRound() < 12) {\n+        while (gameIsRunning && getRound() < 22) {\n             log.log(Level.TRACE, \"new round started: {}\", getRound());\n             round();\n             evaluateRound();\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n      * Implements a round in the game\n      */\n     private void round() {\n         log.log(Level.INFO, \"round called: {} th round of the game\", currentRound);\n+        CallStackViewer.getInstance().methodStartsLogCall(\"round: \" + currentRound);\n+\n         currentRound++;\n \n         log.log(Level.TRACE, \"check on players\");\n         if (players != null && players.size() != 0) {\n             log.log(Level.INFO, \"Iterate on players\");\n+\n             for (var player : players) {\n \n                 var tempName = player.getName();\n                 log.log(Level.INFO, \"player: _{}_ is on move\", tempName);\n                 log.log(Level.TRACE, \"iterate on {}'s settlers\", tempName);\n \n                 var settlerIter = player.getIterOnMySettlers();\n+\n                 while (settlerIter.hasNext()) {\n-                    settlerIter.next().doAction();\n+                    var settlerItem = settlerIter.next();\n+                    settlerItem.doAction();\n                 }\n             }\n         }\n@@ -419,6 +447,8 @@ private void round() {\n                 bot.doAction();\n             }\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**"
  },
  {
    "sha": "474babdbb8772b494a234c48f003178a97333ce8",
    "filename": "ideaProject/src/main/java/org/asteroidapp/Player.java",
    "status": "modified",
    "additions": 24,
    "deletions": 9,
    "changes": 33,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/Player.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/Player.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/Player.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -3,33 +3,36 @@\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.asteroidapp.entities.Entity;\n import org.asteroidapp.entities.Settler;\n+import org.asteroidapp.util.CallStackViewer;\n \n import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n /**\n  *\n  */\n public class Player {\n \n-    private static final Logger log = LogManager.getLogger(Player.class.toString());\n+    /**\n+     * Logger for Player\n+     */\n+    private static final Logger log = LogManager.getLogger(Player.class.getSimpleName());\n \n     /**\n      * Default constructor\n      */\n     //TODO throw an exception, when name is incorrect\n     public Player(String name) {\n-        log.log(Level.TRACE, \"Player constructor called\");\n+        log.log(Level.INFO, \"Player constructor called\");\n \n         this.name = \"\";\n         this.setName(name);\n \n-        log.log(Level.TRACE, \"Player created with name: {}.\", this.name);\n+        log.log(Level.TRACE, \"Player created with name: {}\", this.name);\n \n-        this.mySettlers = new ArrayList<Settler>();\n+        this.mySettlers = new CopyOnWriteArrayList<Settler>();\n         log.log(Level.TRACE, \"List created for settlers\");\n-\n     }\n \n     /**\n@@ -58,14 +61,18 @@ public String getName() {\n     /**\n      *\n      */\n-    private List<Settler> mySettlers;\n+    private List<Settler> mySettlers = null;\n \n     /**\n      * @return\n      */\n     public Iterator<Settler> getIterOnMySettlers() {\n         log.log(Level.TRACE, \"getIterOnMySettlers called\");\n-        return mySettlers.iterator();\n+        if (mySettlers == null || mySettlers.size() == 0) {\n+            return Collections.emptyIterator();\n+        } else {\n+            return mySettlers.iterator();\n+        }\n     }\n \n     /**\n@@ -90,7 +97,15 @@ public void removeSettler(Settler removedEntity) {\n         mySettlers.remove(removedEntity);\n     }\n \n-    public void killPlayer(){\n+    public void killPlayer() {\n+        log.log(Level.INFO, \"killPlayer called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"killPlayer() called\");\n+\n+        GameController.getInstance().leaveGame(this);\n+        for (var settler : mySettlers) {\n+            settler.die();\n+        }\n \n+        CallStackViewer.getInstance().methodReturns();\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "1f0394732b3cd3df627ad7a8a61c1a4a37bf01d5",
    "filename": "ideaProject/src/main/java/org/asteroidapp/entities/AIRobot.java",
    "status": "modified",
    "additions": 49,
    "deletions": 9,
    "changes": 58,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/entities/AIRobot.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/entities/AIRobot.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/entities/AIRobot.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -6,6 +6,7 @@\n import org.asteroidapp.AsteroidZone;\n import org.asteroidapp.GameController;\n import org.asteroidapp.spaceobjects.SteppableSpaceObject;\n+import org.asteroidapp.util.CallStackViewer;\n \n import java.util.*;\n \n@@ -24,31 +25,46 @@\n      */\n     public AIRobot(String name, SteppableSpaceObject creationPlace) {\n         super(name, creationPlace);\n+\n         log.log(Level.INFO, \"AIRobot constructor called\");\n+\n+        CallStackViewer.getInstance().methodStartsLogCall(\"AIRobot constructor called\");\n+\n         if (creationPlace != null && name != null) {\n             onSpaceObject = creationPlace;\n         } else {\n             log.log(Level.FATAL, \"null parameters in constructor!\");\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n \n     @Override\n     public boolean drill() {\n         log.log(Level.INFO, \"drill called (AIRobot's drill)\");\n-        if (onSpaceObject.drillLayer()) {\n+\n+        CallStackViewer.getInstance().methodStartsLogCall(\"drill() called (AIRobot's drill)\");\n+\n+        //callStacklog miatt kell ez a kulon cucc... :/\n+        boolean ret = false;\n+        if (onSpaceObject.drillLayer() > 0) {\n             log.log(Level.INFO, \"drill success!\");\n-            return true;\n+            ret = true;\n         } else {\n             decisionCounterStratOne += 3;\n             log.log(Level.INFO, \"drill is not successful!\");\n-            return false;\n+            ret = false;\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return ret;\n     }\n \n     @Override\n     protected void die() {\n         log.log(Level.INFO, \"die called (AIRobot's die)\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"die() called (AIRobot)\");\n \n         //delete robot's reference from collections (every collections)\n         //checkout form onSpaceObject\n@@ -62,49 +78,68 @@ protected void die() {\n         //remove form game\n         GameController.getInstance().removeBot(this);\n \n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     @Override\n     protected SteppableSpaceObject chooseNeighbour(Set<SteppableSpaceObject> neighbours) {\n-        //TODO solve (OPT): don't choose a spaceObject, which is empty\n-        //TODO don't choose an asteroid, where robot came from\n+        //TODO (OPT): don't choose a spaceObject, which is empty\n+        //TODO (OPT): don't choose an asteroid, where robot came from\n+\n+        log.log(Level.INFO, \"chooseNeighbour called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"chooseNeighbour() called (AIRobot)\");\n \n-        log.log(Level.INFO, \"chooseNaighbour called\");\n         //nullcheck\n         if (neighbours != null) {\n             //convert set to a list to shuffle\n             var neighbourListToShuffle = new ArrayList<SteppableSpaceObject>(neighbours);\n             Collections.shuffle(neighbourListToShuffle);\n             //generate random to decision\n-            var randomNumber = new Random(neighbourListToShuffle.size()).nextInt();\n+            var randomNumber = new Random().nextInt(neighbourListToShuffle.size());\n+\n+            CallStackViewer.getInstance().methodReturns();\n+\n             return neighbourListToShuffle.get(randomNumber);\n         } else {\n             log.log(Level.FATAL, \"Given collection in parameter is null!\");\n+            CallStackViewer.getInstance().methodReturns();\n+\n             return null;\n         }\n     }\n \n     @Override\n     public void notifyFlairEvent() {\n         log.log(Level.INFO, \"notifyFlairEvent called\");\n-        log.log(Level.TRACE, \"in a flair, robot has to die\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"notifyFlairEvent() called (AIRobot)\");\n+\n         die();\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     @Override\n     public void notifyFlairDanger() {\n         //TODO AI in Robots... (opt)\n         log.log(Level.INFO, \"notifyFlairDanger called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"notifyFlairDanger() called (AIRobot)\");\n+\n         log.log(Level.INFO, \"Hey bot, you should hide!\");\n+\n         //NOP for Robots...\n         //or some logic required to make a hole and hide\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     @Override\n     public void notifyAsteroidExplosion() {\n         log.log(Level.INFO, \"notifyAsteroidExplosion called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"notifyAsteroidExplosion() called (AIRobot)\");\n+\n         //robot has to move (she/he is protected at the explosion)\n         move();\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -115,8 +150,12 @@ public void notifyAsteroidExplosion() {\n     @Override\n     public void doAction() {\n         log.log(Level.INFO, \"doAction called\");\n-        //TODO implement better action choose, and decisionmaking\n+        CallStackViewer.getInstance().methodStartsLogCall(\"doAction() called (AIRobot)\");\n+\n+        //TODO implement better action choose, and decisioning\n         stratOne();\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n@@ -126,6 +165,7 @@ public void doAction() {\n     private void stratOne() {\n         //TODO (OPT) create more strategies\n         log.log(Level.INFO, \"strat_1 called: AIRobot on strat1\");\n+\n         int mod = 4;\n         //1 move, than 3 drill\n         log.log(Level.TRACE, \"make decision\");"
  },
  {
    "sha": "66ea75385004ffc71cdaa9022aa3a7ff272c0454",
    "filename": "ideaProject/src/main/java/org/asteroidapp/entities/Entity.java",
    "status": "modified",
    "additions": 30,
    "deletions": 11,
    "changes": 41,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/entities/Entity.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/entities/Entity.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/entities/Entity.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -7,6 +7,7 @@\n import org.asteroidapp.interfaces.Observer;\n import org.asteroidapp.spaceobjects.SteppableSpaceObject;\n import org.asteroidapp.AsteroidZone;\n+import org.asteroidapp.util.CallStackViewer;\n \n import java.util.*;\n \n@@ -18,7 +19,10 @@\n  */\n public abstract class Entity implements Observer {\n \n-    private static final Logger log = LogManager.getLogger(Entity.class.toString());\n+    /**\n+     * Logger for Entity\n+     */\n+    private static final Logger log = LogManager.getLogger(Entity.class.getSimpleName());\n \n     /**\n      * Default constructor for an entity\n@@ -50,14 +54,24 @@ public String getName() {\n      * and then it will move to that specified object\n      */\n     public void move() {\n+        log.log(Level.INFO, \"move called\");\n+        CallStackViewer.getInstance().methodStartsLogCall( \"move() called (Entity)\");\n+\n         var neighbours = listMyNeighbours();\n         var nextSpaceObject = chooseNeighbour(neighbours);\n-        onSpaceObject.checkOut(this);\n-        setMySpaceObject(nextSpaceObject);\n-        nextSpaceObject.checkIn(this);\n-        log.log(Level.TRACE, \"Entity moved to {}\", nextSpaceObject.getName());\n+\n+        if (nextSpaceObject != null) {\n+            //TODO solve when it's null\n+            onSpaceObject.checkOut(this);\n+            setMySpaceObject(nextSpaceObject);\n+            nextSpaceObject.checkIn(this);\n+            log.log(Level.TRACE, \"Entity moved to {}\", nextSpaceObject.getName());\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n+\n     /**\n      * Abstract function for drill event. It will be implemented in AIRobot and Settler.\n      * It will thicken the layer of an asteroid if possible\n@@ -76,18 +90,24 @@ public void move() {\n      * @return list of the possible neighbours where the entity can move\n      */\n     public Set<SteppableSpaceObject> listMyNeighbours() {\n+        log.log(Level.INFO, \"listMyNeighbours called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"listMyNeighbours() called (Entity)\");\n+\n         Set<SteppableSpaceObject> neighbours = new HashSet<>();\n-        Iterator<SteppableSpaceObject> iter = AsteroidZone.getInstance().getIterOnSpaceObjects();\n-        Position sun = AsteroidZone.getInstance().getSun().getPosition();\n-        SteppableSpaceObject temp;\n+        var iter = AsteroidZone.getInstance().getIterOnSpaceObjects();\n+        //Position sun = AsteroidZone.getInstance().getSun().getPosition();\n+        SteppableSpaceObject temp = null;\n \n         while (iter.hasNext()) {\n             temp = iter.next();\n-            if (temp.getPosition().distanceFrom(onSpaceObject.getPosition()) > Position.getMaximalNeighbourDistance()) {\n+            double distance = temp.getPosition().distanceFrom(onSpaceObject.getPosition());\n+            if (distance < Position.getMaximalNeighbourDistance() && !temp.getName().equals(onSpaceObject.getName())) {\n                 neighbours.add(temp);\n-                log.log(Level.TRACE, \"Possible neighbour: \", temp.getName());\n+                log.log(Level.INFO, \"Possible neighbour: {}\", temp.getInfo());\n             }\n         }\n+\n+        CallStackViewer.getInstance().methodReturns();\n         return neighbours;\n     }\n \n@@ -145,5 +165,4 @@ public SteppableSpaceObject getMySpaceObject() {\n      * Decision, and interaction wit user about what he/she wnats to do\n      */\n     public abstract void doAction();\n-\n }\n\\ No newline at end of file"
  },
  {
    "sha": "762e175a569115bf029de189d17179197af176bf",
    "filename": "ideaProject/src/main/java/org/asteroidapp/entities/Settler.java",
    "status": "modified",
    "additions": 330,
    "deletions": 56,
    "changes": 386,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/entities/Settler.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/entities/Settler.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/entities/Settler.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -8,95 +8,229 @@\n import org.asteroidapp.resources.*;\n import org.asteroidapp.spaceobjects.Gate;\n import org.asteroidapp.Player;\n+import org.asteroidapp.spaceobjects.Position;\n import org.asteroidapp.spaceobjects.SteppableSpaceObject;\n+import org.asteroidapp.util.CallStackViewer;\n import org.asteroidapp.util.ConsoleUI;\n \n import java.util.*;\n \n /**\n- *\n+ * Settlers are Entities who can mine, create Robots and Gates\n+ * They also can manage their resources.\n  */\n public class Settler extends Entity {\n \n+    List<String> options = new ArrayList<>();\n+\n+    /**\n+     * Logger for Settler class\n+     */\n     private static final Logger log = LogManager.getLogger(Settler.class.getSimpleName());\n \n     /**\n-     *\n+     * It stores the name of the resource and how many does the player possess from that.\n      */\n-    private Map<Resource, Integer> resources = new HashMap<>();\n+    private ResourceStorage resources = new ResourceStorage();\n+\n \n     /**\n      * Default constructor\n      */\n     public Settler(String name, SteppableSpaceObject initPlace, Player owner) {\n         super(name, initPlace);\n-        resources.put(new Coal(), 0);\n-        resources.put(new Empty(), 0);\n-        resources.put(new FrozenWater(), 0);\n-        resources.put(new Iron(), 0);\n-        resources.put(new Uran(), 0);\n+\n+        log.log(Level.INFO, \"Settler constructor called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"Settler constructor called\");\n+\n+        options.add(\"move\");\n+        options.add(\"drill\");\n+        options.add(\"mine\");\n+        options.add(\"create gate\");\n+        options.add(\"build gate\");\n+        options.add(\"create robot\");\n+        options.add(\"deploy resource\");\n+        options.add(\"list neighbours\");\n \n         if (owner != null) {\n             this.owner = owner;\n+            createdGates = new ArrayList<Gate>();     ////// INITIALIZED GATE INVENTORY\n         } else {\n             log.log(Level.FATAL, \"owner is null!\");\n         }\n         log.log(Level.TRACE, \"Settler created with an empty resource list\");\n+\n+        //Fot the testing the create bot and portal functions\n+        resources.pushMore(2, new Coal());\n+        resources.pushMore(2, new Uran());\n+        resources.pushMore(1, new FrozenWater());\n+        resources.pushMore(3, new Iron());\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n+    /**\n+     * Overridden function for drill event.\n+     * It will thicken the layer of an asteroid if possible\n+     */\n     @Override\n     public boolean drill() {\n+        log.log(Level.INFO, \"Drill called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"drill() called (Settler)\");\n         log.log(Level.INFO, \"Settler tried to drill an object\");\n-        return onSpaceObject.drillLayer();\n+\n+        int oldThickness = onSpaceObject.getLayerThickness();\n+        int newThickness = onSpaceObject.drillLayer();\n+        boolean ret = false;\n+\n+        if (newThickness > 0 || (oldThickness == 1 && newThickness == 0)) {\n+            log.log(Level.INFO, \"Drill was successful\");\n+            ret = true;\n+        } else if (newThickness == 0) {\n+            log.log(Level.INFO, \"NO more drill needed, it's ready, you can mine\");\n+            ret = false;\n+        } else {\n+            log.log(Level.INFO, \"Drill was not successful\");\n+            ret = false;\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return ret;\n     }\n \n+    /**\n+     * Overridden function for drill event.\n+     * It will kill and remove the specified objects.\n+     */\n     @Override\n-    protected void die() {\n+    public void die() {\n         log.log(Level.INFO, \"Die method of player {}'s settler called\", this.owner.getName());\n-        AsteroidZone.getInstance().getSun().checkOut(this);\n+        CallStackViewer.getInstance().methodStartsLogCall(\"die() called (Settler)\");\n+\n         onSpaceObject.checkOut(this);\n         onSpaceObject = null;\n         owner.removeSettler(this);\n+\n+        //if this settler is the owner's last\n+        //kill the owner, because he won't play anymore (all his/her settlers are died)\n+        if (!owner.getIterOnMySettlers().hasNext()) {\n+            owner.killPlayer();\n+        }\n+\n+        AsteroidZone.getInstance().getSun().checkOut(this);\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n+    /**\n+     * Overridden function for chooseNeighbour. It chooses a neighbour where the player can move to\n+     *\n+     * @param neighbours the list of neighbours from where the player can choose where to move to\n+     * @return the chosen neighbour\n+     */\n     @Override\n     protected SteppableSpaceObject chooseNeighbour(Set<SteppableSpaceObject> neighbours) {\n-        return null;\n+        log.log(Level.INFO, \"ChooseNeighbour called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"chooseNeighbour() called (Settler)\");\n+\n+        SteppableSpaceObject selected = null;\n+\n+        if (neighbours != null) {\n+            boolean found = false;\n+\n+            while (!found) {\n+                ConsoleUI.getInstance().sendMessageToConsole(\"Choose destination:\");\n+\n+                //refactor this with a single ConsoleUI call.\n+                for (var item : neighbours) {\n+                    ConsoleUI.getInstance().sendMessageToConsole(item.getName());\n+                }\n+\n+                String name = ConsoleUI.getInstance().readLineFromConsole();\n+                for (var temp : neighbours) {\n+                    if (temp.getName().equals(name)) {\n+                        selected = temp;\n+                        found = true;\n+                        continue;\n+                    }\n+                }\n+                if (!found) {\n+                    ConsoleUI.getInstance().sendMessageToConsole(\"Wrong name\");\n+                }\n+            }\n+        } else {\n+            log.log(Level.WARN, \"neighbours is null, cannot choose from empty neighbour list\");\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return selected;\n     }\n \n+    /**\n+     * Overridden function for notifyFlairEvent.\n+     * It notifies the entity about a flair event is happening\n+     */\n     @Override\n     public void notifyFlairEvent() {\n+        log.log(Level.INFO, \"notifyFlairEvent called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"notifyFlairEvent() called (Settler)\");\n \n+        //TODO refactor: one Asteroid can hide just one entity..\n+        if (onSpaceObject.getLayerThickness() == 0 && onSpaceObject.mineResource().equals(new Empty())) {\n+            log.log(Level.INFO, \"You were hidden in an asteroid during the sunflair so you survived\");\n+        } else {\n+            log.log(Level.INFO, \"You were not hidden in an asteroid during the sunflair so you died\");\n+            die();\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n+    /**\n+     * Overridden function for notifyFlairDanger.\n+     * It notifies the entity about a coming flair event\n+     */\n     @Override\n     public void notifyFlairDanger() {\n+        log.log(Level.INFO, \"NotifyFlairDanger called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"notifyFlairDanger() called (Settler)\");\n \n+        log.log(Level.INFO, \"Be aware, a flair is coming in 2 rounds\");\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n+    /**\n+     * Overridden function for notifyAsteroidExplosion.\n+     * notifies the entity about an asteroid explosion\n+     */\n     @Override\n     public void notifyAsteroidExplosion() {\n+        log.log(Level.INFO, \"NotifyAsteroidExplosion called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"notifyAsteroidExplosion() called (Settler)\");\n \n+        //so you have to die\n+        die();\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n+    /**\n+     * Overridden function for doAction.\n+     * For easier handle the entities in GameController\n+     * Decision, and interaction wit user about what he/she wants to do\n+     */\n     @Override\n     public void doAction() {\n         log.log(Level.INFO, \"doAction called\");\n-        //TODO decisionmaking, and communication with user\n-\n-        List<String> options = new ArrayList<>();\n-        options.add(\"move\");\n-        options.add(\"drill\");\n-        options.add(\"mine\");\n-        options.add(\"create gate\");\n-        options.add(\"build gate\");\n-        options.add(\"deploy resource\");\n-        options.add(\"list neighbours\");\n-        ConsoleUI.getInstance().sendOptionListToConsole(options);\n-        var answer = ConsoleUI.getInstance().readIntFromConsole();\n+        //TODO kell ide callStack log?\n \n+        //choose an action.\n         boolean actionOK = false;\n         while (!actionOK) {\n+            ConsoleUI.getInstance().sendOptionListToConsole(options);\n+            var answer = ConsoleUI.getInstance().readIntFromConsole();\n+\n             switch (answer) {\n                 case 0:\n                     move();\n@@ -106,22 +240,24 @@ public void doAction() {\n                     actionOK = drill();\n                     break;\n                 case 2:\n-                    //TODO refactor, return with boolean\n-                    mine();\n+                    actionOK = mine();\n                     break;\n                 case 3:\n-                    //TODO refactor, return with boolean\n-                    createGate();\n+                    actionOK = createGate();\n                     break;\n                 case 4:\n                     //TODO refactor, return with boolean\n                     buildGate();\n                     break;\n                 case 5:\n+                    actionOK = createBot();\n+                    break;\n+                case 6:\n                     //TODO refactor, return with boolean\n                     deployResource();\n                     break;\n-                case 6:\n+                case 7:\n+                    //always have to list the neighbours - no excuse\n                     listMyNeighbours();\n                     actionOK = true;\n                     break;\n@@ -133,85 +269,223 @@ public void doAction() {\n \n \n     /**\n-     *\n+     * It stores the gates that the player created\n      */\n     private List<Gate> createdGates = null;\n \n     /**\n-     *\n+     * It stores the player where the settler belongs to\n      */\n-    private Player owner;\n+    private Player owner = null;\n \n     /**\n+     * This method creates a Robot if it has enough resources\n      *\n+     * @warn 2 return point\n      */\n-    public void createBot() {\n+    public boolean createBot() {\n+        log.log(Level.INFO, \"CreateBot called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"createBot() called (Settler)\");\n \n-        if (resources.get(new Coal()) >= 1 && resources.get(new Iron()) >= 1 && resources.get(new Uran()) >= 1) {\n+        if (resources.countOf(new Coal()) >= 1 && resources.countOf(new Iron()) >= 1 && resources.countOf(new Uran()) >= 1) {\n \n-            int numOfResource = resources.get(new Coal());\n-            resources.put(new Coal(), numOfResource - 1);\n-            numOfResource = resources.get(new Iron());\n-            resources.put(new Iron(), numOfResource - 1);\n-            numOfResource = resources.get(new Uran());\n-            resources.put(new Uran(), numOfResource - 1);\n+            resources.popResource(new Coal());\n+            resources.popResource(new Iron());\n+            resources.popResource(new Uran());\n \n             AIRobot bot = new AIRobot(\"Robot\", onSpaceObject);\n             GameController.getInstance().addBot(bot);\n             log.log(Level.INFO, \"Bot created at {} asteroid\", onSpaceObject.getName());\n+\n+            CallStackViewer.getInstance().methodReturns();\n+            return true;\n+\n         } else {\n             log.log(Level.INFO, \"Robot can not be created, not enough resources\");\n+\n+            CallStackViewer.getInstance().methodReturns();\n+            return false;\n         }\n     }\n \n     /**\n+     * A settler tries to mine an object and it gives back a resource or a massage why it is not possible\n      *\n+     * @return boolean success\n      */\n-    public void mine() {\n-        // TODO implement here\n+    public boolean mine() {\n+        log.log(Level.INFO, \"Mine called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"mine() called (Settler)\");\n+\n+        Resource res = onSpaceObject.mineResource();\n+        boolean mineSuccess = false;\n+\n+        //mining is successful\n+        if (res != null) {\n+            if (!res.equals(new Empty())) {\n+                addResource(res);\n+                log.log(Level.INFO, \"Settler mined a(n) {}\", res.getName());\n+                mineSuccess = true;\n+            } else {\n+                //but can't mine \"Empty\", so it will be denied\n+                log.log(Level.INFO, \"Settler could not mine a resource because it is empty\");\n+                mineSuccess = false;\n+            }\n+        } else {\n+            //unsuccessful mining\n+            log.log(Level.INFO, \"Settler could not mine a resource because the layer is not drilled trough\");\n+            mineSuccess = false;\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return mineSuccess;\n     }\n \n     /**\n-     *\n+     * It creates a gatePair if the settler has enough resources and\n+     * does not have any gate(s) in its inventory\n      */\n-    public void createGate() {\n-        // TODO implement here\n+    public boolean createGate() {\n+        log.log(Level.INFO, \"CreateGate called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"createGate() called (Settler)\");\n+\n+        boolean createSuccess = false;\n+        //TODO nullcheck on resources count, or init all resource with 0 count\n+        //TODO when createdGates has size() == 0 --> it's also OK\n+        if (createdGates.size() == 0 && resources.countOf(new FrozenWater()) >= 1 && resources.countOf(new Iron()) >= 2 && resources.countOf(new Uran()) >= 1) { ////CHANGED CREATEDGATES NULLCHECK  TO SIZE == 0\n+\n+            resources.popResource(new FrozenWater());\n+            resources.popMore(2, new Iron());\n+            resources.popResource(new Uran());\n+\n+            Gate gate1 = new Gate(new Position(400, 500));\n+            log.log(Level.INFO, \"Gate1 created for {}\", getName());\n+            Gate gate2 = new Gate(new Position(700, 700));\n+            log.log(Level.INFO, \"Gate2 created for {}\", getName());\n+\n+\n+            //TODO Gate class is not ready          This looks OK now -Abel\n+            createdGates.add(gate1);\n+            createdGates.add(gate2);\n+            CallStackViewer.getInstance().innerMethodCall(\"The 2 gates were added to the player\");\n+            gate1.setPair(gate2);\n+            gate2.setPair(gate1);\n+\n+            createSuccess = true;\n+        } else {\n+            log.log(Level.INFO, \"Gate can not be created. You either have 1 or more gates in your inventory or you do not have enough resources to build them.\");\n+            createSuccess = false;\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return createSuccess;\n     }\n \n     /**\n-     *\n+     * It selects a resource from the player and tries to put it in the core of the asteroid\n      */\n     public void deployResource() {\n-        // TODO implement here\n+        log.log(Level.INFO, \"DeployResource called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"deployResource() called (Settler)\");\n+\n+        listResources();\n+        var resource = chooseResource();\n+\n+        if (resources.countOf(resource) > 0) {\n+            log.log(Level.INFO, \"The selected resource can be chosen\");\n+            onSpaceObject.addResourceToCore(resource);\n+        } else {\n+            log.log(Level.INFO, \"The selected resource can not be chosen\");\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n-     *\n+     * If the player has gate(s) then it will build them on a certain position\n      */\n     public void buildGate() {\n-        // TODO implement here\n+        log.log(Level.INFO, \"BuildGate called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"buildGate() called (Settler)\");\n+\n+        if (createdGates.size() != 0) {     /////////////// SIZE CHECK INSTEAD OF NULL CHECK\n+            Gate gate = createdGates.remove(0);\n+            //TODO position for gate\n+            gate.setMyPosition(this.onSpaceObject.getPosition());  ////////ALTERED EMPTY POSITION TO SETTLERS (ASTEROIDS) POSITION FOR TESTING, SHOULD BE SOMEWHERE AROUND THE SETTLER\n+            AsteroidZone.getInstance().addSpaceObject(gate);\n+            log.log(Level.INFO, \"Gate placed at x = {}, y = {}\", gate.getPosition().getX(), gate.getPosition().getY());\n+        } else {\n+            log.log(Level.INFO, \"You do not have any gates to place\");\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n     /**\n+     * It lists the resources and their amount that the player collected\n      *\n+     * @return a map where the resources and their amount is stored\n      */\n     public List<Resource> listResources() {\n-        // TODO implement here\n-        return null;\n+        log.log(Level.INFO, \"ListResources called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"listResources() called (Settler)\");\n+\n+        resources.getResourceList().forEach((temp) -> System.out.println(temp.getName()));\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return resources.getResourceList();\n     }\n \n     /**\n-     * @return\n+     * From the collected Resources the player chooses one\n+     *\n+     * @return the chosen resource\n      */\n     public Resource chooseResource() {\n-        // TODO implement here\n-        return null;\n+\n+        //TODO refactor --- choose from storage, not from nothing!\n+        log.log(Level.INFO, \"chooseResource called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"chooseResource() called (Settler)\");\n+        log.log(Level.INFO, \"Write the number of the resource you would like to choose : 1 - Coal, 2 - FrozenWater, 3 - Iron, 4 - Uran\");\n+\n+        int resourceNum = ConsoleUI.getInstance().readIntFromConsole();\n+        Resource resource = null;\n+\n+        switch (resourceNum) {\n+            case (1):\n+                resource = new Coal();\n+                break;\n+            case (2):\n+                resource = new FrozenWater();\n+                break;\n+            case (3):\n+                resource = new Iron();\n+                break;\n+            case (4):\n+                resource = new Uran();\n+                break;\n+        }\n+        log.log(Level.TRACE, \"Choosen resource: {}\", resource.getName());\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return resource;\n     }\n \n     /**\n-     * @param resource\n+     * It ads a resource to the players resources\n+     *\n+     * @param resource the resource that will be added\n      */\n     private void addResource(Resource resource) {\n-        // TODO implement here\n+        log.log(Level.INFO, \"addResource called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"addResource called\");\n+        //TODO this can return null.. :/\n+        if (resource != null) {\n+            resources.pushResource(resource);\n+            log.log(Level.INFO, \"{} added to settler successfully\", resource.getName());\n+        } else {\n+            log.log(Level.INFO, \"Nothing can be added\");\n+        }\n+        CallStackViewer.getInstance().methodReturns();\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "077d2a91eced4bcbbcee8919595e80d976f7a18e",
    "filename": "ideaProject/src/main/java/org/asteroidapp/resources/Coal.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Coal.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Coal.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/resources/Coal.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,10 +1,20 @@\n package org.asteroidapp.resources;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.entities.AIRobot;\n+\n /**\n  * \n  */\n public class Coal extends Resource {\n \n+\t/**\n+\t * logger for Coal\n+\t */\n+\n+\tprivate static final Logger log = LogManager.getLogger(Coal.class.getSimpleName());\n+\n \t/**\n \t * Default constructor\n \t */"
  },
  {
    "sha": "0b71c081283455a4826b6701f7ae13e99ce9b8d2",
    "filename": "ideaProject/src/main/java/org/asteroidapp/resources/Empty.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Empty.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Empty.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/resources/Empty.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,10 +1,19 @@\n package org.asteroidapp.resources;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.entities.AIRobot;\n+\n /**\n  * \n  */\n public class Empty extends Resource {\n \n+\t/**\n+\t * logger for Empty\n+\t */\n+\n+\tprivate static final Logger log = LogManager.getLogger(Empty.class.getSimpleName());\n \t/**\n \t * Default constructor\n \t */\n@@ -17,7 +26,7 @@ public Empty() {\n \t */\n \t//TODO discuss (what else can we do here?)\n \tpublic String getName() {\n-\t\treturn null;\n+\t\treturn \"Empty\";\n \t}\n \n \t/**"
  },
  {
    "sha": "9a42b9f74f6a1409aaeed47ee6720c7ed7884f83",
    "filename": "ideaProject/src/main/java/org/asteroidapp/resources/FrozenWater.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/FrozenWater.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/FrozenWater.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/resources/FrozenWater.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,10 +1,20 @@\n package org.asteroidapp.resources;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.entities.AIRobot;\n+\n /**\n  * \n  */\n public class FrozenWater extends Resource {\n \n+\t/**\n+\t * logger for FrozenWater\n+\t */\n+\n+\tprivate static final Logger log = LogManager.getLogger(FrozenWater.class.getSimpleName());\n+\n \t/**\n \t * Default constructor\n \t */"
  },
  {
    "sha": "50e1b413c5b56106777ac07b5b75738d013bed9f",
    "filename": "ideaProject/src/main/java/org/asteroidapp/resources/Iron.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Iron.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Iron.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/resources/Iron.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,10 +1,19 @@\n package org.asteroidapp.resources;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.entities.AIRobot;\n+\n /**\n  * \n  */\n public class Iron extends Resource {\n \n+\t/**\n+\t * logger for Iron\n+\t */\n+\n+\tprivate static final Logger log = LogManager.getLogger(Iron.class.getSimpleName());\n \t/**\n \t * Default constructor\n \t */"
  },
  {
    "sha": "c15c4e98691cb90b79bb533630f83558f13eae99",
    "filename": "ideaProject/src/main/java/org/asteroidapp/resources/Resource.java",
    "status": "modified",
    "additions": 37,
    "deletions": 14,
    "changes": 51,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Resource.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Resource.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/resources/Resource.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,25 +1,48 @@\n package org.asteroidapp.resources;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.entities.AIRobot;\n+\n import java.util.*;\n \n /**\n- * \n+ *\n  */\n-public abstract class Resource implements Comparable<Resource>{\n+public abstract class Resource implements Comparable<Resource> {\n+\n+    /**\n+     * logger for Resource\n+     */\n+    private static final Logger log = LogManager.getLogger(Resource.class.getSimpleName());\n+\n+    /**\n+     *\n+     */\n+    public abstract String getName();\n \n-\t/**\n-\t * \n-\t */\n-\tpublic abstract String getName();\n+    /**\n+     * @return\n+     */\n+    public abstract boolean isRadioActive();\n \n-\t/**\n-\t * @return\n-\t */\n-\tpublic abstract boolean isRadioActive();\n+    @Override\n+    public int compareTo(Resource other) {\n+        return getName().compareTo(other.getName());\n+    }\n \n-\t@Override\n-\tpublic int compareTo(Resource other){\n-\t\treturn getName().compareTo(other.getName());\n-\t}\n+    @Override\n+    public boolean equals(Object obj) {\n \n+        if (obj != null && obj instanceof Resource) {\n+            //if the names are equals\n+            if (this.getName().equals(((Resource) obj).getName())) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "2cb9cbd37d1cdc94d43d5f123091db8c9165a93d",
    "filename": "ideaProject/src/main/java/org/asteroidapp/resources/ResourceStorage.java",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/ResourceStorage.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/ResourceStorage.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/resources/ResourceStorage.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -0,0 +1,128 @@\n+package org.asteroidapp.resources;\r\n+\r\n+import org.asteroidapp.util.CallStackViewer;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+public class ResourceStorage {\r\n+    private List<Resource> resourceList = new ArrayList<>();\r\n+\r\n+    public ResourceStorage() {\r\n+    }\r\n+\r\n+    public int getAllCapacity() {\r\n+        return allCapacity;\r\n+    }\r\n+\r\n+    public void setAllCapacity(int allCapacity) {\r\n+        this.allCapacity = Math.abs(allCapacity);\r\n+    }\r\n+\r\n+    //It should be set before, because otherwise the pushMore() function won't work properly\r\n+    private int allCapacity = 10;\r\n+\r\n+    private boolean storageIsFull() {\r\n+        if (allCapacity == resourceList.size()) {\r\n+            return true;\r\n+        } else {\r\n+            return false;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @param whatYouWant\r\n+     * @return null or a resource what was asked\r\n+     */\r\n+    public Resource popResource(Resource whatYouWant) {\r\n+        if (whatYouWant != null) {\r\n+            for (var res : resourceList) {\r\n+                if (res.equals(whatYouWant)) {\r\n+                    var retResource = res;\r\n+                    resourceList.remove(retResource);\r\n+                    return retResource;\r\n+                }\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    public Resource popRandomResource() {\r\n+        Resource result;\r\n+        CallStackViewer.getInstance().methodStartsLogCall(\"popRandomResource (ResourceStorage) called\");\r\n+        if (resourceList == null || resourceList.size() == 0) {\r\n+            CallStackViewer.getInstance().innerMethodCall(\"The resource was: Empty\");\r\n+            result = new Empty();\r\n+\r\n+        } else {\r\n+            Collections.shuffle(resourceList);\r\n+            result = resourceList.remove(0);\r\n+            CallStackViewer.getInstance().innerMethodCall(\"The resource was: \" + result.getName());\r\n+        }\r\n+\r\n+        CallStackViewer.getInstance().methodReturns();\r\n+        return result;\r\n+    }\r\n+\r\n+    public void pushResource(Resource whatYouWant) {\r\n+        if (whatYouWant != null && resourceList.size() <= allCapacity) {\r\n+            resourceList.add(whatYouWant);\r\n+        } else {\r\n+            //TODO log\r\n+        }\r\n+    }\r\n+\r\n+    public List<Resource> getResourceList() {\r\n+        return resourceList;\r\n+    }\r\n+\r\n+    public ResourceStorage popMore(int count, Resource typeFrom) {\r\n+        //if more asked, than exists\r\n+        if (count > this.countOf(typeFrom)) {\r\n+            return null;\r\n+        } else {\r\n+            ResourceStorage returnStorage = new ResourceStorage();\r\n+            returnStorage.setAllCapacity(count);\r\n+\r\n+            int i = 0;\r\n+            for (var res : resourceList) {\r\n+                if (res.equals(typeFrom) && i < count) {\r\n+                    returnStorage.pushResource(res);\r\n+                    i++;\r\n+                }\r\n+            }\r\n+\r\n+            if (returnStorage.storageIsFull()) {\r\n+                for (var remove : returnStorage.getResourceList()) {\r\n+                    resourceList.remove(remove);\r\n+                }\r\n+            }\r\n+            return returnStorage;\r\n+        }\r\n+    }\r\n+\r\n+    public boolean pushMore(int count, Resource typeFrom) {\r\n+        if (allCapacity - count >= resourceList.size()) {\r\n+            for (int i = 0; i < count; i++) {\r\n+                //TODO kellene copy ctor a resourcenal\r\n+                resourceList.add(typeFrom);\r\n+            }\r\n+            return true;\r\n+        } else {\r\n+            //cannot add this amount of resource\r\n+            return false;\r\n+        }\r\n+    }\r\n+\r\n+    public int countOf(Resource type) {\r\n+        int counter = 0;\r\n+\r\n+        for (var item : resourceList) {\r\n+            if (item.equals(type)) {\r\n+                ++counter;\r\n+            }\r\n+        }\r\n+        return counter;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "4f63520561a2640de7bb64932feae330aa2f34e2",
    "filename": "ideaProject/src/main/java/org/asteroidapp/resources/Uran.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Uran.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/resources/Uran.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/resources/Uran.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,14 +1,21 @@\n package org.asteroidapp.resources;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.entities.AIRobot;\n import org.asteroidapp.resources.Resource;\n \n /**\n  * \n  */\n public class Uran extends Resource {\n \n+\t/**\n+\t * logger for Uran\n+\t */\n+\n+\tprivate static final Logger log = LogManager.getLogger(Uran.class.getSimpleName());\n \n-\t//TODO log messages\n \t/**\n \t * Default constructor\n \t */"
  },
  {
    "sha": "a0408e75877bd037cf989c39d54c5ae6cca1fcc7",
    "filename": "ideaProject/src/main/java/org/asteroidapp/spaceobject/asteroid/Core.java",
    "status": "modified",
    "additions": 36,
    "deletions": 25,
    "changes": 61,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobject/asteroid/Core.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobject/asteroid/Core.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/spaceobject/asteroid/Core.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -3,55 +3,58 @@\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.asteroidapp.AppController;\n import org.asteroidapp.resources.Resource;\n+import org.asteroidapp.resources.ResourceStorage;\n+import org.asteroidapp.util.CallStackViewer;\n \n-import java.util.*;\n-\n-//TODO stack -esre kéne megcsinálni\n \n /**\n  * Its job is to store the raw materials inside the asteroid\n  */\n public class Core {\n \n-    private static Logger log = LogManager.getLogger(AppController.class.toString());\n+    /**\n+     * Logger for Core\n+     */\n+    private static Logger log = LogManager.getLogger(Core.class.getSimpleName());\n \n     /**\n      * Default constructor\n      */\n     public Core(Resource initResource) {\n-        resource = new ArrayList<>();\n-        resource.add(initResource);\n-    }\n \n-    public Core(int capacity, Resource initResource) {\n-        this.capacity = capacity;\n-        this.resource = new ArrayList<>();\n-        this.resource.add(initResource);\n+        resources = new ResourceStorage();\n+        resources.setAllCapacity(1);\n+        resources.pushResource(initResource);\n     }\n \n     /**\n-     * Indicates how many raw materials can be in the core.\n+     * Create Core with not default capacity and an initial resource\n+     *\n+     * @param capacity\n+     * @param initResource\n      */\n-    private int capacity = 1;\n+    public Core(int capacity, Resource initResource) {\n+        resources = new ResourceStorage();\n+        resources.setAllCapacity(Math.abs(capacity));\n+        resources.pushResource(initResource);\n+    }\n \n     /**\n-     *\n+     * Resource storage of core\n      */\n-    private List<Resource> resource;\n-\n+    ResourceStorage resources = null;\n \n     /**\n      * It returns with the raw material of the seed.\n      *\n      * @return returnList\n      */\n-    public Resource getResource() {\n-        Resource returnRessource = resource.get(0);\n-        log.log(Level.TRACE, \"getResource invited.  Return with the ressource: {}\", returnRessource);\n-        return returnRessource;\n-\n+    public Resource popResource() {\n+        log.log(Level.TRACE, \"popResource called.\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"popResource() called (Core)\");\n+        CallStackViewer.getInstance().methodReturns();\n+        return resources.popRandomResource();\n     }\n \n     /**\n@@ -60,9 +63,17 @@ public Resource getResource() {\n      * @param newResource\n      */\n     //TODO: esetek lefedése\n-    public void setResource(Resource newResource) {\n-        resource.add(newResource);\n-        log.log(Level.TRACE, \"setResource invited. The ressource was set to: {}\", newResource);\n+    public void pushResource(Resource newResource) {\n+        CallStackViewer.getInstance().methodStartsLogCall(\"pushResource() called (Core)\");\n+\n+        resources.pushResource(newResource);\n+        log.log(Level.TRACE, \"pushResource called. The ressource was set to: {}\", newResource.getName());\n+\n+        CallStackViewer.getInstance().methodReturns();\n+    }\n+\n+    public String getCoreInfo(){\n+        return resources.getResourceList().get(0).getName();\n     }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "40ec9e549a2af2f9697fbb7657893c33b7014e21",
    "filename": "ideaProject/src/main/java/org/asteroidapp/spaceobject/asteroid/Layer.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobject/asteroid/Layer.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobject/asteroid/Layer.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/spaceobject/asteroid/Layer.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -3,16 +3,17 @@\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.asteroidapp.AppController;\n-\n-import java.util.*;\n+import org.asteroidapp.util.CallStackViewer;\n \n /**\n  * It depicts the cortex of an asteroid, knows how thick it is and can reduce it.\n  */\n public class Layer {\n \n-    private static Logger log = LogManager.getLogger(AppController.class.toString());\n+    /**\n+     * Logger for Layer\n+     */\n+    private static Logger log = LogManager.getLogger(Layer.class.getSimpleName());\n \n     /**\n      * Default constructor\n@@ -32,11 +33,16 @@ public Layer(int initThickness) {\n      * @return thickness\n      */\n     public int thinIt() {\n+        CallStackViewer.getInstance().methodStartsLogCall(\"thinIt() called (Layer)\");\n+\n         if (thickness > 0) {\n             thickness--;\n         } else {\n             log.log(Level.TRACE, \"Thickness is already 0\");\n         }\n+\n+        CallStackViewer.getInstance().innerMethodCall(\"The layer thickness is after the drilling: \" + thickness);\n+        CallStackViewer.getInstance().methodReturns();\n         return thickness;\n     }\n \n@@ -47,5 +53,4 @@ public int thinIt() {\n     public int getThickness() {\n         return thickness;\n     }\n-\n }\n\\ No newline at end of file"
  },
  {
    "sha": "7e608b9e0c75feae7fdc92f037734c970e2b832e",
    "filename": "ideaProject/src/main/java/org/asteroidapp/spaceobjects/Asteroid.java",
    "status": "modified",
    "additions": 157,
    "deletions": 31,
    "changes": 188,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobjects/Asteroid.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobjects/Asteroid.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/spaceobjects/Asteroid.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,31 +1,63 @@\n package org.asteroidapp.spaceobjects;\n \n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.AsteroidZone;\n import org.asteroidapp.interfaces.EventObservable;\n+import org.asteroidapp.resources.Empty;\n+import org.asteroidapp.resources.FrozenWater;\n import org.asteroidapp.resources.Resource;\n import org.asteroidapp.spaceobject.asteroid.Core;\n import org.asteroidapp.spaceobject.asteroid.Layer;\n+import org.asteroidapp.util.CallStackViewer;\n+import org.asteroidapp.util.ConsoleUI;\n \n /**\n- *\n+ * class for Asteroid\n  */\n public class Asteroid extends SteppableSpaceObject implements EventObservable {\n \n+    /**\n+     * Logger for Asteroid class\n+     */\n+    private static final Logger log = LogManager.getLogger(Asteroid.class.getSimpleName());\n+\n     /**\n      * Default constructor\n      */\n     public Asteroid(String name, Position position, Resource initResource, int layer) {\n         super(position);\n+\n+        log.log(Level.INFO, \"Asteroid constructor called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"Asteroid constructor called\");\n+\n         this.name = \"\";\n         setName(name);\n \n         this.core = new Core(initResource);\n         this.layer = new Layer(layer);\n+\n+        closeToSun = position.distanceFrom(AsteroidZone.getInstance().getSun().getPosition()) < AsteroidZone.defOfCloseToSun;\n+\n+        log.log(Level.TRACE, \"new Asteroid created\");\n+        CallStackViewer.getInstance().methodReturns();\n     }\n \n+    /**\n+     * Setter on name\n+     *\n+     * @param name Asteroid's name\n+     */\n     private void setName(String name) {\n+        log.log(Level.TRACE, \"setName called\");\n         //TODO check name at AsteroidZone, exception, etc;\n+\n+        //check on name\n         if (name != null && !name.equals(\"\")) {\n             this.name = name;\n+        } else {\n+            log.log(Level.FATAL, \"name is null - name cannot set\");\n         }\n     }\n \n@@ -35,35 +67,94 @@ public String getName() {\n     }\n \n     @Override\n-    public boolean drillLayer() {\n-        int result = layer.thinIt();\n-\n-        if (result == 0 && core.getResource() != null) {\n-            var res = core.getResource();\n-            if (res.isRadioActive()) {\n-                explode();\n-            } else {\n-//TODO make it clear\n-            }\n-\n+    public int drillLayer() {\n+        log.log(Level.INFO, \"drillLayer called, before drill was the layer: {}\", layer.getThickness());\n+        CallStackViewer.getInstance().methodStartsLogCall(\"drillLayer() called (Asteroid)\");\n+\n+        //thin layer\n+        var result = layer.thinIt();\n+\n+        //like pop\n+        var resource = core.popResource();\n+\n+        //like push\n+        //because of stack behaviour (later come)\n+        core.pushResource(resource);\n+\n+        //TODO closeToSun part\n+        //check explosion conditions\n+        if (result == 0 && resource != null && resource.isRadioActive() && closeToSun) {\n+            //this calls explosion\n+            log.log(Level.INFO, \"Asteroid has radioactive core _and_ it's close to Sun --> EXPLODE\");\n+            notifyAboutDieEvent();\n+        } else if (result == 0 && resource != null && resource.equals(new FrozenWater()) && closeToSun) {\n+            //TODO hopefully this condition is enough to sublimate FrozenWater when it's close to sun\n+\n+            //when it is FrozenWater --> drop it, and set empty\n+            core.popResource();\n+            core.pushResource(new Empty());\n         }\n \n-        return false;\n+        CallStackViewer.getInstance().methodReturns();\n+        //return the actual thickness\n+        return result;\n     }\n \n+    /**\n+     * Overridden method to get layerThickness\n+     *\n+     * @return actual layer thickness, or -1, if it's not interpretable\n+     */\n+    @Override\n+    public int getLayerThickness() {\n+        return layer.getThickness();\n+    }\n+\n+    /**\n+     * can return with null! --- and it's okay, and good :)\n+     */\n     @Override\n     public Resource mineResource() {\n-        return null;\n+        log.log(Level.INFO, \"mineResource called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"mineResource() called (Asteroid)\");\n+\n+        Resource ret = null;\n+        //if no layer --> can be mined\n+        if (layer.getThickness() == 0) {\n+            CallStackViewer.getInstance().methodReturns();\n+            ret = core.popResource();\n+        } else {\n+            log.log(Level.INFO, \"Resource cannot mined - layer is too big!\");\n+            ret = null;\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return ret;\n     }\n \n     @Override\n     public boolean addResourceToCore(Resource resource) {\n+        log.log(Level.INFO, \"addResourceToCore called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"addResourceToCore() called (Asteroid)\");\n+\n+        if (resource != null) {\n+            if (layer.getThickness() == 0 && core.popResource().equals(new Empty())) {\n+                core.pushResource(resource);\n+\n+                CallStackViewer.getInstance().methodReturns();\n+                return true;\n+            } else {\n+                log.log(Level.INFO, \"Resource cannot mined - layer is too big or the core is not mined!\");\n+            }\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n         return false;\n     }\n \n     @Override\n     public void setMyPosition(Position newPosition) {\n-\n+        //NOP for asteroid\n     }\n \n \n@@ -79,48 +170,83 @@ public boolean setPair(Gate pairGate) {\n \n     @Override\n     public SteppableSpaceObject getPair() {\n+        log.log(Level.TRACE, \"No pair for asteroid - null returned\");\n         return null;\n     }\n \n     @Override\n     public String getInfo() {\n-        return null;\n+        //TODO write some valuable information here\n+        ConsoleUI.getInstance().sendMessageToConsole(\"name: \" + name + \", layer: \" + layer.getThickness() + \", core: \" + core.getCoreInfo() + \", isCloseToSun: \" + closeToSun +\n+                \", position: x=\" + position.getX() + \" y=\" + position.getY());\n+        return \"exampleInfo\";\n     }\n \n     /**\n-     *\n+     * name of the asteroid\n      */\n-    private String name;\n+    private String name = \"\";\n \n     /**\n-     *\n+     * definition of close to sun\n      */\n-    private boolean closeToSun;\n-\n-\n+    private boolean closeToSun = false;\n \n-    protected Core core;\n-    protected Layer layer;\n+    /**\n+     * core of the asteroid\n+     */\n+    protected Core core = null;\n+    /**\n+     * layer of the asteroid\n+     */\n+    protected Layer layer = null;\n \n     /**\n-     *\n+     * explode asteroid (and notify observers, what they have to do!)\n      */\n     protected void explode() {\n-        // TODO implement here\n+        log.log(Level.INFO, \"explode called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"explode() called (Asteroid)\");\n+\n+        //let these resources go\n+        core = null;\n+        layer = null;\n+\n+        //DO NOT handle the checkIn, checkOut here!\n+        //this is the entity's responsibility\n+        //for (var item : playersOnMe) {\n+          //  item.notifyAsteroidExplosion();\n+        //}\n+        var iter = entitiesOnMe.iterator();\n+        while(iter.hasNext()){\n+            var entityItem = iter.next();\n+            iter.remove();\n+            entityItem.notifyAsteroidExplosion();\n+        }\n+\n+        //remove from world\n+        AsteroidZone.getInstance().removeSpaceObject(this);\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        //gc eats this object sooner or later\n     }\n \n     /**\n-     *\n+     * Notify observers about danger\n+     * Asteroid don't send notification about its explosion (before it happens)\n      */\n     public void notifyAboutDanger() {\n-        // TODO implement here\n+        //NOP for asteroid\n     }\n \n     /**\n-     *\n+     * Notify observers, they have to die or handle this event\n      */\n     public void notifyAboutDieEvent() {\n-        // TODO implement here\n-    }\n+        CallStackViewer.getInstance().methodStartsLogCall(\"notifyAboutDieEvent() called (Asteroid)\");\n+\n+        explode();\n \n+        CallStackViewer.getInstance().methodReturns();\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "e6e991e9c4504a653c475c5c66e80841b363a4d1",
    "filename": "ideaProject/src/main/java/org/asteroidapp/spaceobjects/Gate.java",
    "status": "modified",
    "additions": 120,
    "deletions": 68,
    "changes": 188,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobjects/Gate.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobjects/Gate.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/spaceobjects/Gate.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,75 +1,127 @@\n package org.asteroidapp.spaceobjects;\n \n-import org.asteroidapp.entities.Entity;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.asteroidapp.interfaces.Observable;\n+import org.asteroidapp.resources.Empty;\n import org.asteroidapp.resources.Resource;\n-\n-import java.util.*;\n+import org.asteroidapp.util.CallStackViewer;\n \n /**\n- * \n+ * Class for teleport gates.\n  */\n-public class Gate extends SteppableSpaceObject {\n-\n-\t/**\n-\t * Default constructor\n-\t */\n-\tpublic Gate(Position position) {\n-\t\tsuper(position);\n-\t}\n-\n-\t@Override\n-\tpublic String getName() {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic boolean drillLayer() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic Resource mineResource() {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic boolean addResourceToCore(Resource resource) {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void setMyPosition(Position newPosition) {\n-\n-\t}\n-\n-\t@Override\n-\tpublic boolean isActive() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean setPair(Gate pairGate) {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic SteppableSpaceObject getPair() {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic String getInfo() {\n-\t\treturn null;\n-\t}\n-\n-\t/**\n-\t * \n-\t */\n-\tprivate Set<Entity> playersOnMe;\n-\n-\t/**\n-\t * \n-\t */\n-\tprivate Gate gatePair;\n-\n+public class Gate extends SteppableSpaceObject implements Observable {\n+\n+    /**\n+     * logger for Gate\n+     */\n+    private static final Logger log = LogManager.getLogger(Gate.class.getSimpleName());\n+\n+    /**\n+     * Another gate connected to this one, allowing travel between the two.\n+     */\n+    private Gate gatePair = null;\n+\n+    /**\n+     * Default constructor\n+     */\n+    public Gate(Position position) {\n+        super(position);\n+        CallStackViewer.getInstance().methodStartsLogCall(\"Gate constructor called\");\n+\n+        log.log(Level.TRACE, \"Gate constructor called.\");\n+        log.log(Level.INFO, \"New gate created.\");\n+\n+        CallStackViewer.getInstance().methodReturns();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        log.log(Level.TRACE, \"Gate's getName called: returns gate FOR NOW\");\n+        return \"gate\";\n+    }\n+\n+    @Override\n+    public int drillLayer() {\n+        log.log(Level.TRACE, \"Gate's drillLayer called: uninterpretable, returns -1\");\n+        return -1;\n+    }\n+\n+    /**\n+     * Overridden method to get layerThickness\n+     *\n+     * @return actual layer thickness, or -1, if it's not interpretable, it is not an asteroid so it is -1\n+     */\n+    @Override\n+    public int getLayerThickness() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public Resource mineResource() {\n+        log.log(Level.TRACE, \"Gate's mineResource called: no resource, returns null\");\n+        return new Empty();\n+    }\n+\n+    @Override\n+    public boolean addResourceToCore(Resource resource) {\n+        log.log(Level.TRACE, \"Gate's addResourceToCore called: can't hold resource, returns false\");\n+        return false;\n+    }\n+\n+    @Override\n+    public void setMyPosition(Position newPosition) {\n+        log.log(Level.TRACE, \"Gate's setMyPosition called\");\n+        this.position = newPosition;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        log.log(Level.TRACE, \"Gate's isActive called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"isActive() called\");\n+\n+        boolean ret = false;\n+        if (this.position != null && gatePair.position != null) {\n+            log.log(Level.INFO, \"This gate is active, you can teleport\");\n+            ret = true;\n+        } else {\n+            log.log(Level.INFO, \"This gate is inactive, its pair is yet to be placed\");\n+            ret = false;\n+        }\n+        CallStackViewer.getInstance().methodReturns();\n+        return ret;\n+    }\n+\n+    @Override\n+    public boolean setPair(Gate pairGate) {\n+        log.log(Level.TRACE, \"Gate's setPair called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"setPair() called (Gate)\");\n+\n+        boolean ret = false;\n+        if (pairGate != null) {\n+            this.gatePair = pairGate;\n+            ret = true;\n+        } else {\n+            ret = false;\n+        }\n+\n+        CallStackViewer.getInstance().methodReturns();\n+        return ret;\n+    }\n+\n+    @Override\n+    public SteppableSpaceObject getPair() {\n+        log.log(Level.TRACE, \"Gate's getPair called\");\n+        CallStackViewer.getInstance().methodStartsLogCall(\"getPair() called (Gate)\");\n+        CallStackViewer.getInstance().methodReturns();\n+        \n+        return gatePair;\n+    }\n+\n+    @Override\n+    public String getInfo() {\n+        log.log(Level.TRACE, \"Gate's getInfo called\");\n+        return \"Some example info\";\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "bf423dbe2965f31365bf5e16f5bc737961a275f6",
    "filename": "ideaProject/src/main/java/org/asteroidapp/spaceobjects/HomeAsteroid.java",
    "status": "modified",
    "additions": 23,
    "deletions": 3,
    "changes": 26,
    "blob_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/blob/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobjects/HomeAsteroid.java",
    "raw_url": "https://github.com/vince-pongracz/Hallooo_Mathematikeeer/raw/eea4bf3e04ea58dd83ef69d888879f7c994a24df/ideaProject/src/main/java/org/asteroidapp/spaceobjects/HomeAsteroid.java",
    "contents_url": "https://api.github.com/repos/vince-pongracz/Hallooo_Mathematikeeer/contents/ideaProject/src/main/java/org/asteroidapp/spaceobjects/HomeAsteroid.java?ref=eea4bf3e04ea58dd83ef69d888879f7c994a24df",
    "patch": "@@ -1,11 +1,20 @@\n package org.asteroidapp.spaceobjects;\r\n \r\n+import org.apache.logging.log4j.LogManager;\r\n+import org.apache.logging.log4j.Logger;\r\n import org.asteroidapp.resources.Empty;\r\n import org.asteroidapp.resources.Resource;\r\n import org.asteroidapp.spaceobject.asteroid.Core;\r\n import org.asteroidapp.spaceobject.asteroid.Layer;\r\n+import org.asteroidapp.util.CallStackViewer;\r\n \r\n public class HomeAsteroid extends Asteroid {\r\n+\r\n+    /**\r\n+     * logger for HomeAsteroid\r\n+     */\r\n+    private static final Logger log = LogManager.getLogger(HomeAsteroid.class.getSimpleName());\r\n+\r\n     /**\r\n      * Default constructor\r\n      *\r\n@@ -15,21 +24,32 @@\n     public HomeAsteroid(Position position, Resource initResource) {\r\n         super(\"Home\", position, initResource, 0);\r\n \r\n+        CallStackViewer.getInstance().methodStartsLogCall(\"HomeAsteroid constructor called\");\r\n+\r\n         //to override Asteroid core, layer constructions\r\n         core = null;\r\n         core = new Core(5, new Empty());\r\n         layer = null;\r\n         layer = new Layer(0);\r\n+\r\n+        CallStackViewer.getInstance().methodReturns();\r\n     }\r\n \r\n     @Override\r\n-    public boolean drillLayer() {\r\n-        return true;\r\n+    public int drillLayer() {\r\n+        CallStackViewer.getInstance().methodStartsLogCall(\"drillLayer() called (HomeAsteroid)\");\r\n+        CallStackViewer.getInstance().methodReturns();\r\n+        return 0;\r\n     }\r\n \r\n     @Override\r\n     public Resource mineResource() {\r\n-        return core.getResource();\r\n+        CallStackViewer.getInstance().methodStartsLogCall(\"mineResource() called (HomeAsteroid)\");\r\n+\r\n+        Resource temp = core.popResource();\r\n+\r\n+        CallStackViewer.getInstance().methodReturns();\r\n+        return temp;\r\n     }\r\n \r\n     @Override\r"
  }
]
