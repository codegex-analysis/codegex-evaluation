[
  {
    "sha": "971b132d8265860128e8313a98a6209c8a9a0f3b",
    "filename": "webanno-api-annotation/src/main/java/de/tudarmstadt/ukp/clarin/webanno/api/annotation/rendering/RelationRenderer.java",
    "status": "modified",
    "additions": 28,
    "deletions": 8,
    "changes": 36,
    "blob_url": "https://github.com/webanno/webanno/blob/d2393c9b522959d03995acd989643e187435b3e0/webanno-api-annotation/src/main/java/de/tudarmstadt/ukp/clarin/webanno/api/annotation/rendering/RelationRenderer.java",
    "raw_url": "https://github.com/webanno/webanno/raw/d2393c9b522959d03995acd989643e187435b3e0/webanno-api-annotation/src/main/java/de/tudarmstadt/ukp/clarin/webanno/api/annotation/rendering/RelationRenderer.java",
    "contents_url": "https://api.github.com/repos/webanno/webanno/contents/webanno-api-annotation/src/main/java/de/tudarmstadt/ukp/clarin/webanno/api/annotation/rendering/RelationRenderer.java?ref=d2393c9b522959d03995acd989643e187435b3e0",
    "patch": "@@ -119,6 +119,8 @@ public void render(final CAS aCas, List<AnnotationFeature> aFeatures, VDocument\n         // Index mapping annotations to the corresponding rendered arcs\n         Map<AnnotationFS, VArc> annoToArcIdx = new HashMap<>();\n \n+        List<String> warnings = new ArrayList<>();\n+\n         for (AnnotationFS fs : selectCovered(aCas, type, aWindowBegin, aWindowEnd)) {\n             if (typeAdapter.getAttachFeatureName() != null) {\n                 dependentFs = fs.getFeatureValue(dependentFeature).getFeatureValue(arcSpanFeature);\n@@ -136,8 +138,11 @@ public void render(final CAS aCas, List<AnnotationFeature> aFeatures, VDocument\n             if (dependentFs == null || governorFs == null) {\n                 StringBuilder message = new StringBuilder();\n \n-                message.append(\"Relation [\" + typeAdapter.getLayer().getName() + \"] with id [\"\n-                        + getAddr(fs) + \"] has loose ends - cannot render.\");\n+                message.append(\"Unable to render relation on layer [\"\n+                        + typeAdapter.getLayer().getName() + \"] with id [\" + getAddr(fs)\n+                        + \"] because no [\" + typeAdapter.getLayer().getAttachType()\n+                        + \"] annotations could be found at the source and target.\");\n+\n                 if (typeAdapter.getAttachFeatureName() != null) {\n                     message.append(\"\\nRelation [\" + typeAdapter.getLayer().getName()\n                             + \"] attached to feature [\" + typeAdapter.getAttachFeatureName()\n@@ -146,12 +151,7 @@ public void render(final CAS aCas, List<AnnotationFeature> aFeatures, VDocument\n                 message.append(\"\\nDependent: \" + dependentFs);\n                 message.append(\"\\nGovernor: \" + governorFs);\n \n-                RequestCycle requestCycle = RequestCycle.get();\n-                IPageRequestHandler handler = PageRequestHandlerTracker\n-                        .getLastHandler(requestCycle);\n-                Page page = (Page) handler.getPage();\n-                page.warn(message.toString());\n-\n+                warnings.add(message.toString());\n                 continue;\n             }\n \n@@ -179,6 +179,26 @@ public void render(final CAS aCas, List<AnnotationFeature> aFeatures, VDocument\n             }\n         }\n \n+        RequestCycle requestCycle = RequestCycle.get();\n+        IPageRequestHandler handler = PageRequestHandlerTracker.getLastHandler(requestCycle);\n+        Page page = (Page) handler.getPage();\n+        if (warnings.size() > 10) {\n+            warnings.forEach(page::warn);\n+        }\n+        else if (!warnings.isEmpty()) {\n+            StringBuilder message = new StringBuilder();\n+            message.append(\"Could not render [\");\n+            message.append(warnings.size());\n+            message.append(\"] relations because of missing [\");\n+            message.append(getTypeAdapter().getAttachTypeName());\n+            message.append(\"] spans.\");\n+            if (typeAdapter.getAttachFeatureName() != null) {\n+                message.append(\"\\nRelation [\" + typeAdapter.getLayer().getName()\n+                        + \"] attached to feature [\" + typeAdapter.getAttachFeatureName() + \"].\");\n+            }\n+            page.warn(message.toString());\n+        }\n+\n         for (RelationLayerBehavior behavior : behaviors) {\n             behavior.onRender(typeAdapter, aResponse, annoToArcIdx);\n         }"
  }
]
