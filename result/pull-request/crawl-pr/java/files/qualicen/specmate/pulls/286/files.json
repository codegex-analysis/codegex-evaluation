[
  {
    "sha": "b6223291da94197ae4c1941613e8c876e6e4c7c3",
    "filename": "bundles/specmate-connectors-api/src/com/specmate/connectors/api/ConnectorBase.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-connectors-api/src/com/specmate/connectors/api/ConnectorBase.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-connectors-api/src/com/specmate/connectors/api/ConnectorBase.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-connectors-api/src/com/specmate/connectors/api/ConnectorBase.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -22,6 +22,11 @@ public IProject getProject() {\n \t@Override\r\n \tpublic void setProject(IProject project) {\r\n \t\tthis.project = project;\r\n+\t}\t\r\n+\r\n+\t@Override\r\n+\tpublic String getLoginPointName() {\r\n+\t\treturn \"Project \" + project.getID();\r\n \t}\r\n \r\n }\r"
  },
  {
    "sha": "bfe050aad894b5f6e618ece06f13ecee80129d9e",
    "filename": "bundles/specmate-connectors-api/src/com/specmate/connectors/api/IConnector.java",
    "status": "modified",
    "additions": 19,
    "deletions": 4,
    "changes": 23,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-connectors-api/src/com/specmate/connectors/api/IConnector.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-connectors-api/src/com/specmate/connectors/api/IConnector.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-connectors-api/src/com/specmate/connectors/api/IConnector.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -60,8 +60,8 @@\n \tIContainer getContainerForRequirement(Requirement requirement) throws SpecmateException;\r\n \r\n \t/**\r\n-\t * Returns a set of projects given credentials have access to. Returns an empty set if\r\n-\t * credentials are invalid.\r\n+\t * Returns a set of projects given credentials have access to. Returns an empty\r\n+\t * set if credentials are invalid.\r\n \t *\r\n \t * @return Returns a set of projects the credentials can access. If successful,\r\n \t *         this set must contain at least the current project which the user\r\n@@ -71,7 +71,22 @@\n \t *         credentials do not match (for any project) an empty set must be\r\n \t *         returned.\r\n \t */\r\n-\tSet<IProject> authenticate(String username, String password)\r\n-\t\t\tthrows SpecmateException;\r\n+\tSet<IProject> authenticate(String username, String password) throws SpecmateException;\r\n \r\n+\t/**\r\n+\t * Generates a readable ID of this login point name. This feature is helpful for\r\n+\t * connectors which supports multi-project logins.\r\n+\t * \r\n+\t * For example, a jira connector (which supports multi-project logins) may\r\n+\t * generate a string like 'JIRA Server https://jira.company.com'. Therefore, all\r\n+\t * other connectors which connect to the same server can be identified folded\r\n+\t * toghether.\r\n+\t * \r\n+\t * Connector with identical login point names will listed as just one entry in\r\n+\t * the login dialog.\r\n+\t * \r\n+\t * If your connector does not support multi-project logins, just generate a\r\n+\t * unique name, for example, embedding your project name. 'Project ABC'.\r\n+\t */\r\n+\tString getLoginPointName();\r\n }\r"
  },
  {
    "sha": "d02fc198fc6eb2096ae31bb37413dfd59f82fc00",
    "filename": "bundles/specmate-connectors-api/src/com/specmate/connectors/api/IProjectService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-connectors-api/src/com/specmate/connectors/api/IProjectService.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-connectors-api/src/com/specmate/connectors/api/IProjectService.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-connectors-api/src/com/specmate/connectors/api/IProjectService.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -8,4 +8,5 @@\n \tIProject getProject(String projectName);\r\n \tSet<String> getProjectNames();\r\n \tMap<String, IProject> getProjects();\r\n+\tMap<String, String> getLoginPoints();\r\n }\r"
  },
  {
    "sha": "37bd451c1ad068d68d0ffe941b6a102cd5652337",
    "filename": "bundles/specmate-connectors/src/com/specmate/connectors/internal/ProjectServiceImpl.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-connectors/src/com/specmate/connectors/internal/ProjectServiceImpl.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-connectors/src/com/specmate/connectors/internal/ProjectServiceImpl.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-connectors/src/com/specmate/connectors/internal/ProjectServiceImpl.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -10,6 +10,7 @@\n import org.osgi.service.component.annotations.ReferenceCardinality;\r\n import org.osgi.service.component.annotations.ReferencePolicy;\r\n \r\n+import com.specmate.connectors.api.IConnector;\r\n import com.specmate.connectors.api.IProject;\r\n import com.specmate.connectors.api.IProjectService;\r\n \r\n@@ -41,4 +42,26 @@ public void removeProject(IProject project) {\n \tpublic Map<String, IProject> getProjects() {\r\n \t\treturn Collections.unmodifiableMap(projects);\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic Map<String, String> getLoginPoints() {\r\n+\r\n+\t\tMap<String, String> loginPoints = new HashMap<>();\r\n+\r\n+\t\tfor (Map.Entry<String, IProject> projectEntries : projects.entrySet()) {\r\n+\r\n+\t\t\tIConnector connector = projectEntries.getValue().getConnector();\r\n+\t\t\tif (connector == null) {\r\n+\t\t\t\tcontinue;\r\n+\t\t\t}\r\n+\r\n+\t\t\tString loginPointName = connector.getLoginPointName();\r\n+\r\n+\t\t\tif (!loginPoints.containsKey(loginPointName)) {\r\n+\t\t\t\tloginPoints.put(loginPointName, projectEntries.getKey());\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn loginPoints;\r\n+\t}\r\n }\r"
  },
  {
    "sha": "e2b0c01367f4e190cf845dd2e7923889c64f4a5a",
    "filename": "bundles/specmate-emfjson/src/com/specmate/emfjson/EMFJsonSerializer.java",
    "status": "modified",
    "additions": 53,
    "deletions": 32,
    "changes": 85,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfjson/src/com/specmate/emfjson/EMFJsonSerializer.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfjson/src/com/specmate/emfjson/EMFJsonSerializer.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-emfjson/src/com/specmate/emfjson/EMFJsonSerializer.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -1,6 +1,8 @@\n package com.specmate.emfjson;\r\n \r\n import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n \r\n import org.eclipse.emf.common.util.EList;\r\n import org.eclipse.emf.ecore.EClass;\r\n@@ -77,10 +79,9 @@ public boolean serializeContainedElements(EObject object) {\n \t/**\r\n \t * constructor\r\n \t *\r\n-\t * @param uriFactory\r\n-\t *            The IURIFactory that is used for generating URIs from EObjects\r\n-\t * @param stopPredicate\r\n-\t *            The stop predicate to indicate where to stop serializing\r\n+\t * @param uriFactory    The IURIFactory that is used for generating URIs from\r\n+\t *                      EObjects\r\n+\t * @param stopPredicate The stop predicate to indicate where to stop serializing\r\n \t */\r\n \tpublic EMFJsonSerializer(IURIFactory uriFactory, ISerializationConfiguration config) {\r\n \t\tthis.uriFactory = uriFactory;\r\n@@ -90,8 +91,7 @@ public EMFJsonSerializer(IURIFactory uriFactory, ISerializationConfiguration con\n \t/**\r\n \t * Serializes an {@link EObject} to JSON\r\n \t *\r\n-\t * @param eObject\r\n-\t *            The {@link EObject} to serialize\r\n+\t * @param eObject The {@link EObject} to serialize\r\n \t * @return The JSON representation of <code>object</code>\r\n \t * @throws JSONException\r\n \t * @throws SpecmateException\r\n@@ -107,11 +107,9 @@ public JSONObject serialize(EObject eObject) throws JSONException, SpecmateExcep\n \t/**\r\n \t * Serializes a list of {@link EObject} to JSON\r\n \t *\r\n-\t * @param list\r\n-\t *            The list of {@link EObject}s to serialize\r\n+\t * @param list The list of {@link EObject}s to serialize\r\n \t * @return The JSON representation of <code>list</code>\r\n-\t * @throws SpecmateException\r\n-\t *             If the object cannot be serialized\r\n+\t * @throws SpecmateException If the object cannot be serialized\r\n \t */\r\n \tpublic JSONArray serialize(List<?> list) throws JSONException, SpecmateException {\r\n \t\ttry {\r\n@@ -121,13 +119,27 @@ public JSONArray serialize(List<?> list) throws JSONException, SpecmateException\n \t\t}\r\n \t}\r\n \r\n+\t/**\r\n+\t * Serializes a list of {@link EObject} to JSON\r\n+\t *\r\n+\t * @param list The list of {@link EObject}s to serialize\r\n+\t * @return The JSON representation of <code>list</code>\r\n+\t * @throws SpecmateException If the object cannot be serialized\r\n+\t */\r\n+\tpublic JSONObject serialize(Map<?, ?> map) throws JSONException, SpecmateException {\r\n+\t\ttry {\r\n+\t\t\treturn serializeMap(map);\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tthrow new SpecmateInternalException(ErrorCode.SERALIZATION, e);\r\n+\t\t}\r\n+\t}\r\n+\r\n \t/**\r\n \t * Serializes an {@link EObject} to JSON at certain serializing depth. Stops\r\n \t * serializing if indicated by {@link ISerializerStopPredicate.stopAtDepth} from\r\n \t * the currently set stop predicate.\r\n \t *\r\n-\t * @param eObject\r\n-\t *            The {@link EObject} to serialize\r\n+\t * @param eObject The {@link EObject} to serialize\r\n \t * @return The JSON representation of <code>eObject</code>\r\n \t * @throws SpecmateException\r\n \t */\r\n@@ -144,10 +156,9 @@ private JSONObject serializeObject(EObject eObject) throws SpecmateException {\n \t * Serializes the type informations (namespace URI and class name) of eObject to\r\n \t * the given {@link JSONObject}.\r\n \t *\r\n-\t * @param eObject\r\n-\t *            The {@link EObject} for which to serialize the type information\r\n-\t * @param jsonObj\r\n-\t *            The JSON object where to put the serialized type information.\r\n+\t * @param eObject The {@link EObject} for which to serialize the type\r\n+\t *                information\r\n+\t * @param jsonObj The JSON object where to put the serialized type information.\r\n \t * @throws JSONException\r\n \t */\r\n \tprivate void serializeType(EObject eObject, JSONObject jsonObj) throws JSONException {\r\n@@ -161,10 +172,8 @@ private void serializeType(EObject eObject, JSONObject jsonObj) throws JSONExcep\n \t/**\r\n \t * Serializes the URI of eObject into the given {@link JSONObject}.\r\n \t *\r\n-\t * @param eObject\r\n-\t *            The {@link EObject} of which to serialize the URI\r\n-\t * @param jsonObj\r\n-\t *            The {@link JSONObject} where to put the serialized URI\r\n+\t * @param eObject The {@link EObject} of which to serialize the URI\r\n+\t * @param jsonObj The {@link JSONObject} where to put the serialized URI\r\n \t * @throws SpecmateException\r\n \t */\r\n \tprivate void serializeUri(EObject eObject, JSONObject jsonObj) throws SpecmateException {\r\n@@ -175,14 +184,15 @@ private void serializeUri(EObject eObject, JSONObject jsonObj) throws SpecmateEx\n \t * Serializes a value. EObjects and Lists are handled recursively, any other\r\n \t * type of object is serialized as String.\r\n \t *\r\n-\t * @param value\r\n-\t *            The value to serialize\r\n+\t * @param value The value to serialize\r\n \t * @return The JSON representation of <code>value</code>\r\n \t * @throws SpecmateException\r\n \t */\r\n \tprivate Object serializeValue(Object value) throws SpecmateException {\r\n \t\tif (value instanceof EList) {\r\n \t\t\treturn serializeList((EList<?>) value);\r\n+\t\t} else if (value instanceof Map<?, ?>) {\r\n+\t\t\treturn serializeMap((Map<?, ?>) value);\r\n \t\t} else if (value instanceof EObject) {\r\n \t\t\treturn serializeObject((EObject) value);\r\n \t\t} else if (value instanceof Double) {\r\n@@ -197,8 +207,7 @@ private Object serializeValue(Object value) throws SpecmateException {\n \t/**\r\n \t * Serializes a list of objects\r\n \t *\r\n-\t * @param list\r\n-\t *            The list of objects to serialize\r\n+\t * @param list The list of objects to serialize\r\n \t * @return A {@link JSONArray} containing the JSON representation of all members\r\n \t *         of <code>list</code>\r\n \t * @throws SpecmateException\r\n@@ -211,13 +220,28 @@ private JSONArray serializeList(List<?> list) throws SpecmateException {\n \t\treturn array;\r\n \t}\r\n \r\n+\t/**\r\n+\t * Serializes a list of objects\r\n+\t *\r\n+\t * @param map The map of objects to serialize\r\n+\t * @return A {@link JSONObject} containing the JSON representation of all\r\n+\t *         members of <code>map</code>\r\n+\t * @throws SpecmateException\r\n+\t */\r\n+\tprivate JSONObject serializeMap(Map<?, ?> map) throws SpecmateException {\r\n+\t\tJSONObject jsonobject = new JSONObject();\r\n+\t\tfor (Entry<?, ?> entry : map.entrySet()) {\r\n+\t\t\tjsonobject.put((String) serializeValue(entry.getKey()), serializeValue(entry.getValue()));\r\n+\t\t}\r\n+\t\treturn jsonobject;\r\n+\t}\r\n+\r\n \t/**\r\n \t * Serializes an EObject or a List as proxy JSON structures. That means\r\n \t * value<code>value</code> is not completely serialized but only the URI\r\n \t * inforamtion.\r\n \t *\r\n-\t * @param value\r\n-\t *            The value to serialize as proxy\r\n+\t * @param value The value to serialize as proxy\r\n \t * @return A JSON proxy structure\r\n \t * @throws SpecmateException\r\n \t */\r\n@@ -241,8 +265,7 @@ private Object serializeProxy(Object value) throws SpecmateException {\n \t * Transforms an {@link EObject} into a JSON proxy structure, i.e. a\r\n \t * {@link JSONObject} that contains the uri of the {@link EObject}.\r\n \t *\r\n-\t * @param eObject\r\n-\t *            The {@link EObject} for which to obtain a proxy\r\n+\t * @param eObject The {@link EObject} for which to obtain a proxy\r\n \t * @return The JSON proxy structure\r\n \t * @throws SpecmateException\r\n \t */\r\n@@ -258,10 +281,8 @@ public Object getProxy(EObject eObject) throws SpecmateException {\n \t * Serializes all feature of an {@link EObject} into the JSON object\r\n \t * <code>jsonObj</code>. For references the method obtains proxies.\r\n \t *\r\n-\t * @param eObject\r\n-\t *            The {@link EObject} for which to serialize all features\r\n-\t * @param jsonObj\r\n-\t *            The JSON object where to put all serialization results\r\n+\t * @param eObject The {@link EObject} for which to serialize all features\r\n+\t * @param jsonObj The JSON object where to put all serialization results\r\n \t * @throws JSONException\r\n \t * @throws SpecmateException\r\n \t */\r"
  },
  {
    "sha": "fa4e064ff1b457cebae24b7f47626c9860d07023",
    "filename": "bundles/specmate-emfrest/src/com/specmate/emfrest/authentication/LoginPoints.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/authentication/LoginPoints.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/authentication/LoginPoints.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-emfrest/src/com/specmate/emfrest/authentication/LoginPoints.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -0,0 +1,50 @@\n+package com.specmate.emfrest.authentication;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.GenericEntity;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+import com.specmate.connectors.api.IProjectService;\n+import com.specmate.emfrest.api.IRestService;\n+import com.specmate.emfrest.api.RestServiceBase;\n+import com.specmate.rest.RestResult;\n+\n+@Component(service = IRestService.class)\n+public class LoginPoints extends RestServiceBase {\n+\tpublic static final String SERVICE_NAME = \"loginpoints\";\n+\tprivate IProjectService projectService;\n+\n+\t@Override\n+\tpublic String getServiceName() {\n+\t\treturn SERVICE_NAME;\n+\t}\n+\n+\t@Override\n+\tpublic boolean canGet(Object target) {\n+\t\treturn (target instanceof Resource);\n+\t}\n+\n+\t@Override\n+\tpublic RestResult<?> get(Object object, MultivaluedMap<String, String> queryParams, String token) {\n+\n+\t\tMap<String, String> loginPoints = projectService.getLoginPoints();\n+\t\t\n+//\t\tGenericEntity entity = new GenericEntity<Map<String, String>>(loginPoints){};\n+//\t\treturn new RestResult<>(Response.Status.OK, entity);\n+\t\t\n+\t\treturn new RestResult<>(Response.Status.OK, loginPoints );\n+\t}\n+\n+\t@Reference\n+\tpublic void setProjectService(IProjectService projectService) {\n+\t\tthis.projectService = projectService;\n+\t}\n+}"
  },
  {
    "sha": "e7f4eeed60934f891543f54d8597354abc1853ae",
    "filename": "bundles/specmate-emfrest/src/com/specmate/emfrest/internal/EmfRestJerseyApplication.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/EmfRestJerseyApplication.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/EmfRestJerseyApplication.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/EmfRestJerseyApplication.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -6,14 +6,15 @@\n import com.specmate.emfrest.internal.metrics.MetricsDynamicFeature;\r\n import com.specmate.emfrest.internal.rest.JsonEObjectWriter;\r\n import com.specmate.emfrest.internal.rest.JsonListWriter;\r\n+import com.specmate.emfrest.internal.rest.JsonMapWriter;\r\n import com.specmate.emfrest.internal.rest.JsonReader;\r\n import com.specmate.emfrest.internal.rest.RootResource;\r\n \r\n class EmfRestJerseyApplication extends ResourceConfig {\r\n \r\n \tpublic EmfRestJerseyApplication() {\r\n-\t\tregisterClasses(RootResource.class, JsonEObjectWriter.class, JsonListWriter.class, JsonReader.class,\r\n-\t\t\t\tAuthenticationFilter.class, MetricsDynamicFeature.class);\r\n+\t\tregisterClasses(RootResource.class, JsonEObjectWriter.class, JsonListWriter.class, JsonMapWriter.class,\r\n+\t\t\t\tJsonReader.class, AuthenticationFilter.class, MetricsDynamicFeature.class);\r\n \r\n \t}\r\n }\r"
  },
  {
    "sha": "9f95e719e0dffe82e13d640dec5d4ffa99aab984",
    "filename": "bundles/specmate-emfrest/src/com/specmate/emfrest/internal/auth/AuthenticationFilter.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/auth/AuthenticationFilter.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/auth/AuthenticationFilter.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/auth/AuthenticationFilter.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -19,6 +19,7 @@\n import com.specmate.auth.api.IAuthenticationService;\r\n import com.specmate.common.exception.SpecmateException;\r\n import com.specmate.emfrest.authentication.Login;\r\n+import com.specmate.emfrest.authentication.LoginPoints;\r\n import com.specmate.emfrest.authentication.Logout;\r\n import com.specmate.emfrest.authentication.ProjectNames;\r\n import com.specmate.model.administration.AdministrationFactory;\r\n@@ -32,6 +33,7 @@\n \tprivate final String HEARTBEAT_PARAMETER = \"heartbeat\";\r\n \tprivate final String REST_URL = \".+services/rest/\";\r\n \tprivate Pattern loginPattern = Pattern.compile(REST_URL + Login.SERVICE_NAME);\r\n+\tprivate Pattern loginPointsPattern = Pattern.compile(REST_URL + LoginPoints.SERVICE_NAME);\r\n \tprivate Pattern logoutPattern = Pattern.compile(REST_URL + Logout.SERVICE_NAME);\r\n \tprivate Pattern projectNamesPattern = Pattern.compile(REST_URL + ProjectNames.SERVICE_NAME);\r\n \tprivate Pattern reindexPattern = Pattern.compile(REST_URL + REINDEX_SERVICE_NAME);\r\n@@ -54,8 +56,8 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n \r\n \t\t// Validate the Authorization header\r\n \t\tif (!AuthorizationHeader.isAuthenticationSet(requestContext)) {\r\n-\t\t\tlogService.log(LogService.LOG_INFO, \"No credentials set: on path \"\r\n-\t\t\t\t\t+ requestContext.getUriInfo().getAbsolutePath().toString());\r\n+\t\t\tlogService.log(LogService.LOG_INFO,\r\n+\t\t\t\t\t\"No credentials set: on path \" + requestContext.getUriInfo().getAbsolutePath().toString());\r\n \t\t\tabortWithUnauthorized(requestContext);\r\n \t\t\treturn;\r\n \t\t}\r\n@@ -104,10 +106,11 @@ private void abortWithUnauthorized(ContainerRequestContext requestContext) {\n \tprivate boolean isNotSecured(ContainerRequestContext requestContext) {\r\n \t\tString path = requestContext.getUriInfo().getAbsolutePath().toString();\r\n \t\tMatcher matcherLogin = loginPattern.matcher(path);\r\n+\t\tMatcher matcherLoginPoints = loginPointsPattern.matcher(path);\r\n \t\tMatcher matcherLogout = logoutPattern.matcher(path);\r\n \t\tMatcher matcherProjectNames = projectNamesPattern.matcher(path);\r\n \t\tMatcher matcherReindex = reindexPattern.matcher(path);\r\n-\t\treturn matcherLogin.matches() || matcherLogout.matches() || matcherProjectNames.matches()\r\n-\t\t\t\t|| matcherReindex.matches();\r\n+\t\treturn matcherLogin.matches() || matcherLoginPoints.matches() || matcherLogout.matches()\r\n+\t\t\t\t|| matcherProjectNames.matches() || matcherReindex.matches();\r\n \t}\r\n }\r"
  },
  {
    "sha": "987cb3b4630d2a63c0e26da9c4723310b07528e2",
    "filename": "bundles/specmate-emfrest/src/com/specmate/emfrest/internal/rest/JsonMapWriter.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/rest/JsonMapWriter.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/rest/JsonMapWriter.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/rest/JsonMapWriter.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -0,0 +1,52 @@\n+package com.specmate.emfrest.internal.rest;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.OutputStream;\r\n+import java.lang.annotation.Annotation;\r\n+import java.lang.reflect.Type;\r\n+import java.util.Map;\r\n+\r\n+import javax.ws.rs.WebApplicationException;\r\n+import javax.ws.rs.core.Context;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.MultivaluedMap;\r\n+import javax.ws.rs.ext.MessageBodyWriter;\r\n+import javax.ws.rs.ext.Provider;\r\n+\r\n+import org.osgi.service.log.LogService;\r\n+\r\n+import com.specmate.common.ISerializationConfiguration;\r\n+import com.specmate.urihandler.IURIFactory;\r\n+\r\n+/** MessageBodyWriter for Maps */\r\n+@Provider\r\n+public class JsonMapWriter implements MessageBodyWriter<Map<Object, Object>> {\r\n+\r\n+\t/** The wrapped JsonWriter */\r\n+\tprivate JsonWriter writer;\r\n+\r\n+\t/** constructor */\r\n+\tpublic JsonMapWriter(@Context LogService logService, @Context IURIFactory factory,\r\n+\t\t\t@Context ISerializationConfiguration serializationConfig) {\r\n+\t\tthis.writer = new JsonWriter(logService, factory, serializationConfig);\r\n+\t}\r\n+\r\n+\t/** {@inheritDoc} */\r\n+\t@Override\r\n+\tpublic long getSize(Map<Object, Object> obj, Class<?> clazz, Type type, Annotation[] annotation, MediaType mediaType) {\r\n+\t\treturn writer.getSize(obj, clazz, type, annotation, mediaType);\r\n+\t}\r\n+\r\n+\t/** {@inheritDoc} */\r\n+\t@Override\r\n+\tpublic boolean isWriteable(Class<?> clazz, Type type, Annotation[] annotation, MediaType mediaType) {\r\n+\t\treturn writer.isWriteable(clazz, type, annotation, mediaType);\r\n+\t}\r\n+\r\n+\t/** {@inheritDoc} */\r\n+\t@Override\r\n+\tpublic void writeTo(Map<Object, Object> obj, Class<?> clazz, Type type, Annotation[] annotations, MediaType mediaType,\r\n+\t\t\tMultivaluedMap<String, Object> headers, OutputStream stream) throws IOException, WebApplicationException {\r\n+\t\twriter.writeTo(obj, clazz, type, annotations, mediaType, headers, stream);\r\n+\t}\r\n+}\r"
  },
  {
    "sha": "1cb7dbf0c06eb9e1562adf5cd22e4845371c4a0a",
    "filename": "bundles/specmate-emfrest/src/com/specmate/emfrest/internal/rest/JsonWriter.java",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/rest/JsonWriter.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/rest/JsonWriter.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-emfrest/src/com/specmate/emfrest/internal/rest/JsonWriter.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -6,6 +6,7 @@\n import java.lang.annotation.Annotation;\r\n import java.lang.reflect.Type;\r\n import java.util.List;\r\n+import java.util.Map;\r\n \r\n import javax.ws.rs.WebApplicationException;\r\n import javax.ws.rs.core.MediaType;\r\n@@ -45,7 +46,8 @@ public long getSize(Object obj, Class<?> clazz, Type type, Annotation[] annotati\n \t/** {@inheritDoc} */\r\n \tpublic boolean isWriteable(Class<?> clazz, Type type, Annotation[] annotation, MediaType mediaType) {\r\n \t\treturn mediaType.toString().equals(MEDIA_TYPE)\r\n-\t\t\t\t&& (EObject.class.isAssignableFrom(clazz) || List.class.isAssignableFrom(clazz));\r\n+\t\t\t\t&& (EObject.class.isAssignableFrom(clazz) || List.class.isAssignableFrom(clazz)\r\n+\t\t\t\t\t\t|| Map.class.isAssignableFrom(clazz));\r\n \t}\r\n \r\n \t/**\r\n@@ -71,7 +73,14 @@ public void writeTo(Object obj, Class<?> clazz, Type type, Annotation[] annotati\n \t\t\t\tlogService.log(LogService.LOG_ERROR, \"Could not serialize object.\", e);\r\n \t\t\t\tthrow new WebApplicationException(e);\r\n \t\t\t}\r\n-\t\t} else {\r\n+\t\t} else if (obj instanceof Map) {\r\n+\t\t\ttry {\r\n+\t\t\t\tresult = serializer.serialize((Map<?, ?>) obj).toString();\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tlogService.log(LogService.LOG_ERROR, \"Could not serialize object.\", e);\r\n+\t\t\t\tthrow new WebApplicationException(e);\r\n+\t\t\t}\r\n+\t\t}else {\r\n \t\t\tthrow new WebApplicationException(\"Cannot serialize \" + clazz);\r\n \t\t}\r\n \r"
  },
  {
    "sha": "d137ba7b03f8c359d6f4561ac7c6816bc11bfb0f",
    "filename": "bundles/specmate-hp-connector/src/com/specmate/connectors/hpconnector/internal/services/HPConnector.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-hp-connector/src/com/specmate/connectors/hpconnector/internal/services/HPConnector.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-hp-connector/src/com/specmate/connectors/hpconnector/internal/services/HPConnector.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-hp-connector/src/com/specmate/connectors/hpconnector/internal/services/HPConnector.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -202,4 +202,9 @@ public void setProject(IProject project) {\n \tpublic void setLogService(LogService logService) {\r\n \t\tthis.logService = logService;\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic String getLoginPointName() {\r\n+\t\treturn \"Project \" + project.getID();\r\n+\t}\r\n }\r"
  },
  {
    "sha": "fe97713250af4337bf9e663fd020f7be24ed7ad3",
    "filename": "bundles/specmate-jira-connector/src/com/specmate/connectors/jira/internal/services/JiraConnector.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/qualicen/specmate/blob/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-jira-connector/src/com/specmate/connectors/jira/internal/services/JiraConnector.java",
    "raw_url": "https://github.com/qualicen/specmate/raw/34533d78e95d59393a4c4ac8c9b100b9658fc70b/bundles/specmate-jira-connector/src/com/specmate/connectors/jira/internal/services/JiraConnector.java",
    "contents_url": "https://api.github.com/repos/qualicen/specmate/contents/bundles/specmate-jira-connector/src/com/specmate/connectors/jira/internal/services/JiraConnector.java?ref=34533d78e95d59393a4c4ac8c9b100b9658fc70b",
    "patch": "@@ -504,4 +504,9 @@ public IProject getProject() {\n \tpublic void setProject(IProject project) {\r\n \t\tthis.project = project;\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic String getLoginPointName() {\r\n+\t\treturn \"Jira Server \" + this.url;\r\n+\t}\r\n }\r"
  }
]
