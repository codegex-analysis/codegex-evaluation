[
  {
    "sha": "3026acf982853a64df9080c981ce2b78d31aa7a5",
    "filename": "spring-10-AJAX/pom.xml",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/pom.xml",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/pom.xml",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/pom.xml?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,101 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>ru.otus</groupId>\n+    <artifactId>jpql-solution-final</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.4.1</version>\n+    </parent>\n+\n+    <!--<properties>\n+        <maven.compiler.source>11</maven.compiler.source>\n+        <maven.compiler.target>11</maven.compiler.target>\n+    </properties>-->\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>runtime</scope>\n+        </dependency>\n+\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+        </dependency>\n+\n+\n+\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>log4j</groupId>\n+            <artifactId>log4j</artifactId>\n+            <version>1.2.17</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.webjars</groupId>\n+            <artifactId>jquery</artifactId>\n+            <version>3.3.1</version>\n+        </dependency>\n+\n+        <!--Тестирование-->\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <version>${junit-jupiter.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <version>${junit-jupiter.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>"
  },
  {
    "sha": "998f3a3a780e69d18690ff3cbce750ee64c31389",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/OrmDemoApplication.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/OrmDemoApplication.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/OrmDemoApplication.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/OrmDemoApplication.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,26 @@\n+package ru.otus.spring;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import ru.otus.spring.service.LibraryService;\n+\n+import javax.annotation.PostConstruct;\n+\n+@SpringBootApplication\n+public class OrmDemoApplication {\n+\n+\t@Autowired\n+\tprivate LibraryService service;\n+\n+\tpublic static void main(String[] args) {\n+\t\tSpringApplication.run(OrmDemoApplication.class, args);\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\tservice.addBook(\"new Book\",\"author\", \"genre\");\n+\t\tservice.addBook(\"new Book 2\",\"author\", \"genre\");\n+\t}\n+\n+}"
  },
  {
    "sha": "a7abf0075eaec40ff08d5d433c33d1f13f7eb5bb",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/controller/LibraryController.java",
    "status": "added",
    "additions": 120,
    "deletions": 0,
    "changes": 120,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/controller/LibraryController.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/controller/LibraryController.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/controller/LibraryController.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,120 @@\n+package ru.otus.spring.controller;\n+\n+import org.hibernate.JDBCException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.*;\n+import ru.otus.spring.domain.Book;\n+import ru.otus.spring.domain.Comment;\n+import ru.otus.spring.domain.Genre;\n+import ru.otus.spring.dto.BookDto;\n+import ru.otus.spring.dto.CommentDTO;\n+import ru.otus.spring.dto.GenreDTO;\n+import ru.otus.spring.exception.NotFoundException;\n+import ru.otus.spring.service.LibraryService;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Controller\n+public class LibraryController {\n+\n+    private final LibraryService libraryService;\n+\n+    @Autowired\n+    public LibraryController(LibraryService libraryService) {\n+        this.libraryService = libraryService;\n+    }\n+\n+    @GetMapping(\"/\")\n+    public String getAllBooks(Model model) {\n+        return \"list\";\n+    }\n+\n+\n+\n+  @GetMapping(\"/edit\")\n+    public String showEditBook(@RequestParam(\"id\") long id, Model model) {\n+        Book book = libraryService.getBookById(id);\n+        BookDto bookDTO = BookDto.toDto(book);\n+\n+\n+        List<Genre> genres = libraryService.getAllGenres();\n+        List<GenreDTO> genreNames = new ArrayList<>();\n+        for (Genre genre: genres){\n+            genreNames.add(GenreDTO.toDto(genre));\n+        }\n+        bookDTO.setAllGenres(genreNames);\n+        model.addAttribute(\"book\", bookDTO);\n+        return \"edit\";\n+    }\n+\n+    @PostMapping(\"/edit\")\n+    public String editBook(\n+            @RequestParam(\"id\") Long id,\n+            @RequestParam(\"name\") String name,\n+            @RequestParam(name = \"author\") String author,\n+            @RequestParam(name = \"genre\") String genre\n+    ) {\n+        libraryService.updateBookInfo(id, name, author, genre);\n+        return \"redirect:/\";\n+    }\n+\n+    @PostMapping(\"/add\")\n+    public String createBook(@RequestParam(name = \"name\") String name,\n+                         @RequestParam(name = \"author\") String author,\n+                         @RequestParam(name = \"genre\") String genre,\n+                         Model model) {\n+        Book book = libraryService.addBook(name, author, genre);\n+        model.addAttribute(\"addResult\", book.getId());\n+        return \"redirect:/\";\n+    }\n+\n+    @GetMapping(\"/delete\")\n+    public String delete(@RequestParam(\"id\") long id) {\n+        libraryService.deleteBook(id);\n+        return \"redirect:/\";\n+    }\n+\n+\n+\n+   @GetMapping(\"/comment\")\n+    public String showCommentsForBookId(@RequestParam(name = \"id\") Long id, Model model) {\n+       model.addAttribute(\"bookId\", id);\n+        return \"comment\";\n+    }\n+\n+    @GetMapping(\"/addComment\")\n+    public String addNewComment(\n+            @RequestParam(\"id\") Long bookId, Model model\n+    ) {\n+        Book book = libraryService.getBookById(bookId);\n+        model.addAttribute(\"book\", BookDto.toDto(book));\n+\n+        return \"addComment\";\n+    }\n+\n+\n+    @PostMapping(\"/addComment\")\n+    public String addComment(\n+            @RequestParam(\"id\") Long bookId,\n+            @RequestParam(\"comment\") String comment\n+    ) {\n+        libraryService.addComment(bookId, comment);\n+        return \"redirect:/\";\n+    }\n+\n+    @ExceptionHandler(NotFoundException.class)\n+    public ResponseEntity<String> handleNotFound(NotFoundException ex) {\n+        return ResponseEntity.badRequest().body(\"Not found\");\n+    }\n+\n+    @ExceptionHandler(JDBCException.class)\n+    public ResponseEntity<String> handleException(JDBCException ex) {\n+        return ResponseEntity.badRequest().body(ex.getSQLException().getMessage());\n+    }\n+\n+}"
  },
  {
    "sha": "91bb3d8403ee122f13ff844dfac4f3fdb0c830cb",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/domain/Author.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Author.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Author.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Author.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,21 @@\n+package ru.otus.spring.domain;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import javax.persistence.*;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Entity\n+@Table(name = \"author\")\n+public class Author {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private long id;\n+\n+    @Column(name = \"name\", nullable = false, unique = true)\n+    private String name;\n+}"
  },
  {
    "sha": "96022e7bec00300f6979acef56a0dd80f109eb93",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/domain/Book.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Book.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Book.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Book.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,35 @@\n+package ru.otus.spring.domain;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import javax.persistence.*;\n+\n+\n+@Data\n+@NoArgsConstructor\n+@Entity\n+@Table(name = \"Book\")\n+public class Book {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private long id;\n+\n+    @Column(name = \"NAME\", nullable = false, unique = true)\n+    private String name;\n+\n+    @JoinColumn(name = \"AUTHORID\")\n+    @ManyToOne(targetEntity = Author.class )\n+    private Author author;\n+\n+    @JoinColumn(name = \"GENREID\")\n+    @ManyToOne(targetEntity = Genre.class )\n+    private Genre genre;\n+\n+\n+    public Book(long id, String name, Author author, Genre genre) {\n+        this.id = id;\n+        this.name = name;\n+        this.author = author;\n+        this.genre = genre;\n+    }\n+}"
  },
  {
    "sha": "80f392fd9ab74349ed5344efa728f2bcac526df9",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/domain/Comment.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Comment.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Comment.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Comment.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,39 @@\n+package ru.otus.spring.domain;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import javax.persistence.*;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Entity\n+@Table(name = \"comment\")\n+public class Comment {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private long id;\n+\n+    @Column(name = \"comment\", nullable = false)\n+    private String comment;\n+\n+\n+    @JoinColumn(name = \"BOOKID\")\n+    @ManyToOne(targetEntity = Book.class)\n+    private Book book;\n+\n+    public Comment(long id, String comment) {\n+        this.id = id;\n+        this.comment = comment;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Comment{\" +\n+                \"id=\" + id +\n+                \", comment='\" + comment + '\\'' +\n+                \", book=\" + book.getName() +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "466ad8724e453d43ef4e98f29df97f40bf4861b5",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/domain/Genre.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Genre.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Genre.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/domain/Genre.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,21 @@\n+package ru.otus.spring.domain;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import javax.persistence.*;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Entity\n+@Table(name = \"Genre\")\n+public class Genre {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private long id;\n+\n+    @Column(name = \"name\", nullable = false, unique = true)\n+    private String name;\n+}"
  },
  {
    "sha": "8444e61c54aa44dfc455aac099841c346cf8e369",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/dto/AuthorDTO.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/dto/AuthorDTO.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/dto/AuthorDTO.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/dto/AuthorDTO.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.otus.spring.dto;\n+\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import ru.otus.spring.domain.Author;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class AuthorDTO {\n+    private long id;\n+    private String name;\n+\n+    public static AuthorDTO toDto(Author book) {//todo: написать нормальные билдеры\n+        return new AuthorDTO(book.getId(), book.getName());\n+    }\n+}"
  },
  {
    "sha": "de041838e813d4ba5ae97bd6de181e8e7d8c235b",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/dto/BookDto.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/dto/BookDto.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/dto/BookDto.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/dto/BookDto.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,58 @@\n+package ru.otus.spring.dto;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import ru.otus.spring.domain.Book;\n+\n+import java.util.List;\n+\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class BookDto {\n+\n+    private long id;\n+\n+    private String name;\n+\n+    private String author;\n+\n+    private String genre;\n+\n+    private List<GenreDTO> allGenres;\n+\n+\n+    public BookDto(int id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    public BookDto(long id, String name, String author, String genre) {\n+        this.id = id;\n+        this.name = name;\n+        this.author = author;\n+        this.genre = genre;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public static BookDto toDto(Book book) {\n+        return new BookDto(book.getId(), book.getName(), book.getAuthor().getName(), book.getGenre().getName());\n+    }\n+}"
  },
  {
    "sha": "e8d7b11ec5ca09a18b670511b5d816e2bdbb5af6",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/dto/CommentDTO.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/dto/CommentDTO.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/dto/CommentDTO.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/dto/CommentDTO.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.otus.spring.dto;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import ru.otus.spring.domain.Comment;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class CommentDTO {\n+    private long id;\n+    private String bookName;\n+    private String comment;\n+\n+    @Override\n+    public String toString() {\n+        return \"Comment{\" +\n+                \"id=\" + id +\n+                \", comment='\" + comment + '\\'' +\n+                '}';\n+    }\n+\n+    public static CommentDTO toDto(Comment comment) {\n+        return new CommentDTO(comment.getId(), comment.getBook().getName(), comment.getComment());\n+    }\n+}"
  },
  {
    "sha": "1bc8c07564b4b521cfd9f16f34a8db5ee59c39ee",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/dto/GenreDTO.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/dto/GenreDTO.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/dto/GenreDTO.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/dto/GenreDTO.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.otus.spring.dto;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import ru.otus.spring.domain.Genre;\n+\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class GenreDTO {\n+\n+    private String name;\n+\n+    public static GenreDTO toDto(Genre author) {//todo: написать нормальные билдеры\n+        return new GenreDTO(author.getName());\n+    }\n+}"
  },
  {
    "sha": "9949bd359d9acda25eb08d9cb4a5df29c3f70d0e",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/exception/NotFoundException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/exception/NotFoundException.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/exception/NotFoundException.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/exception/NotFoundException.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.otus.spring.exception;\n+\n+public class NotFoundException extends RuntimeException {\n+\n+    public NotFoundException() {\n+    }\n+}"
  },
  {
    "sha": "4c92127470ff000c84ace0a451c3ac02fb2f1a97",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/repositories/AuthorRepository.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/AuthorRepository.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/AuthorRepository.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/AuthorRepository.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.otus.spring.repositories;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import ru.otus.spring.domain.Author;\n+import java.util.List;\n+\n+public interface AuthorRepository extends CrudRepository<Author, Long> {\n+\n+    List<Author> findAll();\n+    Author findByName(String name);\n+}"
  },
  {
    "sha": "f2f55ec6982e0f2798d53d97862b437e93e21829",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/repositories/BookRepository.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/BookRepository.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/BookRepository.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/BookRepository.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,10 @@\n+package ru.otus.spring.repositories;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import ru.otus.spring.domain.Book;\n+import java.util.List;\n+\n+public interface BookRepository extends CrudRepository<Book, Long> {\n+    List<Book> findAll();\n+    List<Book> findByName(String name);\n+}"
  },
  {
    "sha": "802c2975b4f2763e1a1aaf233a5123d1fbcb5d5c",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/repositories/CommentRepository.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/CommentRepository.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/CommentRepository.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/CommentRepository.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.otus.spring.repositories;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import ru.otus.spring.domain.Comment;\n+import java.util.List;\n+\n+public interface CommentRepository extends CrudRepository<Comment, Long> {\n+\n+    List<Comment> findAll();\n+    List<Comment> findByBookId(Long bookId);\n+\n+}"
  },
  {
    "sha": "63320b3e70b63b4cee6120c1fe39cd140a5741ad",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/repositories/GenreRepository.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/GenreRepository.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/GenreRepository.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/repositories/GenreRepository.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.otus.spring.repositories;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import ru.otus.spring.domain.Genre;\n+\n+import java.util.List;\n+\n+public interface GenreRepository extends CrudRepository<Genre, Long> {\n+    List<Genre> findAll();\n+    Genre findByName(String name);\n+}"
  },
  {
    "sha": "af1426a1febc1a2be251e1d67b314a45109f8312",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/rest/LibraryAjaxController.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/rest/LibraryAjaxController.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/rest/LibraryAjaxController.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/rest/LibraryAjaxController.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,41 @@\n+package ru.otus.spring.rest;\n+\n+import org.springframework.web.bind.annotation.*;\n+import ru.otus.spring.domain.Book;\n+import ru.otus.spring.domain.Comment;\n+import ru.otus.spring.dto.BookDto;\n+import ru.otus.spring.dto.CommentDTO;\n+import ru.otus.spring.service.LibraryService;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+public class LibraryAjaxController {\n+\n+    private final LibraryService libraryService;\n+\n+    public LibraryAjaxController(LibraryService libraryService) {\n+        this.libraryService = libraryService;\n+    }\n+\n+    @GetMapping(\"/comments\")\n+    public List<CommentDTO> getAllComments(@RequestParam(name = \"id\") Long id) {\n+        List<Comment> comments = libraryService.getCommentsByBook(id);\n+        List<CommentDTO> commentDtos = comments.stream()\n+                .map(CommentDTO::toDto)\n+                .collect(Collectors.toList());\n+        return commentDtos;\n+    }\n+\n+\n+      @GetMapping(\"/books\")\n+      public List<BookDto> showBooks() {\n+          List<Book> books = libraryService.getAllBooks();\n+          List<BookDto> bookDtos = books.stream()\n+                  .map(BookDto::toDto)\n+                  .collect(Collectors.toList());\n+          return bookDtos;\n+      }\n+\n+\n+}"
  },
  {
    "sha": "67a3ff8340f08a86c878b42ce7e1c570be939250",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/service/LibraryService.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/service/LibraryService.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/service/LibraryService.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/service/LibraryService.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,25 @@\n+package ru.otus.spring.service;\n+\n+import ru.otus.spring.domain.Author;\n+import ru.otus.spring.domain.Book;\n+import ru.otus.spring.domain.Comment;\n+import ru.otus.spring.domain.Genre;\n+\n+import java.util.List;\n+\n+public interface LibraryService {\n+\n+    public Book addBook(String bookName, String authorName, String genreName);\n+    public Book updateBookInfo(Long id, String bookName, String authorName, String genre);\n+    public void deleteBook(Long id);\n+    public Book getBookById(Long id);\n+    public Book getBookByName(String name);\n+    public List<Book> getAllBooks();\n+    public void deleteAuthor(Long id);\n+    public void deleteGenre(Long id);\n+    public Author getAuthorByName(String name);\n+    public Genre getGenreByName(String name);\n+    public List<Genre> getAllGenres();\n+    public void addComment(Long bookId,  String comment);\n+    public List<Comment> getCommentsByBook(Long bookId);\n+}"
  },
  {
    "sha": "29470cd2d239e33880c84b754e29c873fa2fb759",
    "filename": "spring-10-AJAX/src/main/java/ru/otus/spring/service/LibraryServiceImpl.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/service/LibraryServiceImpl.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/java/ru/otus/spring/service/LibraryServiceImpl.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/java/ru/otus/spring/service/LibraryServiceImpl.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,132 @@\n+package ru.otus.spring.service;\r\n+\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+import ru.otus.spring.domain.Author;\r\n+import ru.otus.spring.domain.Book;\r\n+import ru.otus.spring.domain.Comment;\r\n+import ru.otus.spring.domain.Genre;\r\n+import ru.otus.spring.exception.NotFoundException;\r\n+import ru.otus.spring.repositories.AuthorRepository;\r\n+import ru.otus.spring.repositories.BookRepository;\r\n+import ru.otus.spring.repositories.CommentRepository;\r\n+import ru.otus.spring.repositories.GenreRepository;\r\n+import java.util.List;\r\n+import java.util.Optional;\r\n+\r\n+@Service\r\n+public class LibraryServiceImpl implements LibraryService {\r\n+\r\n+    private final BookRepository bookRepository;\r\n+\r\n+    private final AuthorRepository authorRepository;\r\n+\r\n+    private final CommentRepository commentRepository;\r\n+\r\n+    private final GenreRepository genreRepository;\r\n+\r\n+    @Autowired\r\n+    public LibraryServiceImpl(BookRepository bookRepository, AuthorRepository authorRepository, GenreRepository genreRepository, CommentRepository commentRepository) {\r\n+        this.bookRepository = bookRepository;\r\n+        this.authorRepository = authorRepository;\r\n+        this.genreRepository = genreRepository;\r\n+        this.commentRepository=commentRepository;\r\n+    }\r\n+\r\n+\r\n+    @Override\r\n+    public Book addBook(String bookName, String authorName, String genreName) {\r\n+       Author author = getAuthorByName(authorName);\r\n+       if (author == null){\r\n+           author = new Author(0L, authorName);\r\n+           authorRepository.save(author);\r\n+       }\r\n+\r\n+        Genre genre = getGenreByName(genreName);\r\n+        if (genre == null){\r\n+            genre = new Genre(0L, genreName);\r\n+            genreRepository.save(genre);\r\n+        }\r\n+\r\n+        Book book = new Book(0L, bookName, author, genre);\r\n+        return bookRepository.save(book);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Book updateBookInfo(Long id, String bookName, String authorName, String genreName) {\r\n+        Book book = getBookById(id);\r\n+        book.setName(bookName);\r\n+        Author author = getAuthorByName(authorName);\r\n+        if (author == null){\r\n+            author = new Author(0L, authorName);\r\n+            authorRepository.save(author);\r\n+        }\r\n+        book.setAuthor(author);\r\n+        Genre genre = getGenreByName(genreName);\r\n+        if (genre == null){\r\n+            genre = new Genre(0L, genreName);\r\n+            genreRepository.save(genre);\r\n+        }\r\n+        book.setGenre(genre);\r\n+        return bookRepository.save(book);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void deleteBook(Long id) {\r\n+        bookRepository.deleteById(id);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Book getBookById(Long id) {\r\n+        Optional<Book> optionalBook = bookRepository.findById(id) ;\r\n+        return optionalBook.orElseThrow(NotFoundException::new);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Book getBookByName(String name) {\r\n+        List<Book> books = bookRepository.findByName(name);\r\n+        return (books!= null && books.size()!= 0)?books.get(0):null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<Book> getAllBooks() {\r\n+        return bookRepository.findAll();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void deleteAuthor(Long id) {\r\n+        authorRepository.deleteById(id);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void deleteGenre(Long id) {\r\n+        genreRepository.deleteById(id);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Author getAuthorByName(String name) {\r\n+        return authorRepository.findByName(name);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Genre getGenreByName(String name) {\r\n+        return genreRepository.findByName(name);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<Genre> getAllGenres() {\r\n+        return genreRepository.findAll();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void addComment(Long bookId,  String comment){\r\n+        Book book = getBookById(bookId);\r\n+        Comment commentEntity = new Comment(0L, comment, book) ;\r\n+        commentRepository.save(commentEntity);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<Comment> getCommentsByBook(Long bookId){\r\n+        return commentRepository.findByBookId(bookId);\r\n+    }\r\n+}\r"
  },
  {
    "sha": "5dbb502887e5f47ccb33f03a72939d3febce8995",
    "filename": "spring-10-AJAX/src/main/resources/application.yml",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/application.yml",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/resources/application.yml?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,20 @@\n+spring:\n+  datasource:\n+    url: jdbc:h2:mem:testdb\n+    initialization-mode: always\n+\n+  jpa:\n+    generate-ddl: false\n+    hibernate:\n+      ddl-auto: none\n+\n+    show-sql: true\n+\n+logging:\n+  level:\n+    ROOT: DEBUG\n+\n+org:\n+  hibernate:\n+    SQL: DEBUG\n+    type: TRACE"
  },
  {
    "sha": "18e7331c87c40c0ae0e950c7389a7569ac2d637a",
    "filename": "spring-10-AJAX/src/main/resources/schema.sql",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/schema.sql",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/schema.sql",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/resources/schema.sql?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,57 @@\n+DROP TABLE IF EXISTS AUTHOR;\n+CREATE TABLE AUTHOR(\n+        ID BIGSERIAL,\n+        NAME VARCHAR(255) UNIQUE,\n+        PRIMARY KEY(ID));\n+\n+DROP TABLE IF EXISTS GENRE;\n+CREATE TABLE GENRE(\n+        ID BIGSERIAL PRIMARY KEY,\n+        NAME VARCHAR(255) UNIQUE);\n+\n+\n+DROP TABLE IF EXISTS BOOK;\n+CREATE TABLE BOOK(\n+        ID BIGSERIAL PRIMARY KEY,\n+        NAME VARCHAR(255) UNIQUE,\n+        AUTHORID BIGINT REFERENCES AUTHOR(ID),\n+        GENREID BIGINT REFERENCES GENRE(ID));\n+\n+DROP TABLE IF EXISTS COMMENT;\n+CREATE TABLE COMMENT(\n+        ID BIGSERIAL,\n+        COMMENT VARCHAR(255),\n+        BOOKID BIGINT REFERENCES BOOK(ID),\n+        PRIMARY KEY(ID));\n+\n+create table avatars(\n+    id bigserial,\n+    photo_url varchar(8000),\n+    primary key (id)\n+);\n+\n+create table courses(\n+    id bigserial,\n+    name varchar(255),\n+    primary key (id)\n+);\n+\n+create table otus_students(\n+    id bigserial,\n+    name varchar(255),\n+    avatar_id bigint references avatars (id),\n+    primary key (id)\n+);\n+\n+create table emails(\n+    id bigserial,\n+    student_id bigint references otus_students(id) on delete cascade,\n+    email varchar(255),\n+    primary key (id)\n+);\n+\n+create table student_courses(\n+    student_id bigint references otus_students(id) on delete cascade,\n+    course_id bigint references courses(id),\n+    primary key (student_id, course_id)\n+);\n\\ No newline at end of file"
  },
  {
    "sha": "e3cc3fc6ca07253c8e4cad2da5e526fe55c299b9",
    "filename": "spring-10-AJAX/src/main/resources/templates/addComment.html",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/templates/addComment.html",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/templates/addComment.html",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/resources/templates/addComment.html?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,46 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\"/>\n+    <title>New comment</title>\n+    <style type=\"text/css\">\n+        body {\n+            padding: 50px;\n+        }\n+\n+        label {\n+            display: inline-block;\n+            width: 100px;\n+        }\n+\n+        input:read-only {\n+            background: lightgray;\n+        }\n+\n+        .row {\n+            margin-top: 10px;\n+        }\n+    </style>\n+</head>\n+<body>\n+\n+<form id=\"edit-form\" th:action=\"@{/addComment(id=${book.id})}\" th:method=\"post\" action=\"edit.html\" th:object=\"${book}\">\n+    <h1>Comment:</h1>\n+\n+    <div class=\"row\" hidden=\"hidden\">\n+        <label for=\"id-input\">ID:</label>\n+        <input id=\"id-input\" type=\"text\" readonly=\"readonly\" th:value=\"*{id}\" value=\"1\"/>\n+    </div>\n+\n+    <div class=\"row\">\n+        <label for=\"name-input\">Comment:</label>\n+        <input id=\"name-input\" name=\"comment\" type=\"text\" />\n+    </div>\n+\n+    <div class=\"row\">\n+        <button type=\"submit\">Save</button>\n+    </div>\n+</form>\n+\n+</body>\n+</html>"
  },
  {
    "sha": "ac117066c20d4a5818f93b5f0f52afeeb0cb2dbb",
    "filename": "spring-10-AJAX/src/main/resources/templates/comment.html",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/templates/comment.html",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/templates/comment.html",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/resources/templates/comment.html?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,50 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\"/>\n+    <title>Book Comments</title>\n+    <style type=\"text/css\">\n+        body {\n+            padding: 50px;\n+        }\n+\n+        .persons, .persons td {\n+            border: 1px solid lightgray;\n+            padding: 5px;\n+        }\n+    </style>\n+</head>\n+<script src=\"/webjars/jquery/3.3.1/jquery.min.js\"></script>\n+<body>\n+<h1>Comments:</h1>\n+\n+<table class=\"comments\">\n+    <thead>\n+    <tr>\n+        <th>Book</th>\n+        <th>Comment</th>\n+    </tr>\n+    </thead>\n+    <input id = \"bokId\" type=\"hidden\" name=\"id\" th:value=\"${bookId}\">\n+    <tbody>\n+\n+    </tbody>\n+</table>\n+\n+<script>\n+    $(function () {\n+        var bookId = $(bokId).serialize();\n+        $.get('/comments', bookId).done(function(comments) {\n+            comments.forEach(function (comment) {\n+                $('tbody').append(`\n+                    <tr>\n+                        <td>${comment.bookName}</td>\n+                        <td>${comment.comment}</td>\n+                    </tr>\n+                `)\n+            });\n+        })\n+    });\n+</script>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "61870df8ee68ad91048014f2e7ced425a68b9b20",
    "filename": "spring-10-AJAX/src/main/resources/templates/edit.html",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/templates/edit.html",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/templates/edit.html",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/resources/templates/edit.html?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,58 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\"/>\n+    <title>Edit book</title>\n+    <style type=\"text/css\">\n+        body {\n+            padding: 50px;\n+        }\n+\n+        label {\n+            display: inline-block;\n+            width: 100px;\n+        }\n+\n+        input:read-only {\n+            background: lightgray;\n+        }\n+\n+        .row {\n+            margin-top: 10px;\n+        }\n+    </style>\n+</head>\n+<body>\n+\n+<form id=\"edit-form\" th:action=\"@{/edit(id=${book.id})}\" th:method=\"post\" action=\"edit.html\" th:object=\"${book}\">\n+    <h1>Book Info:</h1>\n+\n+    <div class=\"row\">\n+        <label for=\"id-input\">ID:</label>\n+        <input id=\"id-input\" type=\"text\" readonly=\"readonly\" th:value=\"*{id}\" value=\"1\"/>\n+    </div>\n+\n+    <div class=\"row\">\n+        <label for=\"name-input\">Name:</label>\n+        <input id=\"name-input\" name=\"name\" type=\"text\" th:value=\"*{name}\" value=\"Book Name\"/>\n+    </div>\n+\n+    <div class=\"row\">\n+        <label for=\"author-input\">Author:</label>\n+        <input id=\"author-input\" name=\"author\" type=\"text\" th:value=\"*{author}\" value=\"Book Author\"/>\n+    </div>\n+\n+    <div class=\"row\">\n+        <label for=\"genre\">Genre:</label>\n+        <select id=\"genre\" name=\"genre\"/>\n+            <option th:each=\"item: ${book.allGenres}\" th:value=\"${item.name}\" th:text=\"${item.name}\" th:selected=\"${item.name}==*{genre}\"></option>\n+        </select>\n+    </div>\n+\n+    <div class=\"row\">\n+        <button type=\"submit\">Save</button>\n+    </div>\n+</form>\n+\n+</body>\n+</html>"
  },
  {
    "sha": "cda9f43a354548bde967e6c44935c94d776a5d20",
    "filename": "spring-10-AJAX/src/main/resources/templates/list.html",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/templates/list.html",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/main/resources/templates/list.html",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/main/resources/templates/list.html?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,91 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\"/>\n+    <title>Library</title>\n+    <style type=\"text/css\">\n+        body {\n+            padding: 50px;\n+        }\n+\n+        .persons, .persons td {\n+            border: 1px solid lightgray;\n+            padding: 5px;\n+        }\n+    </style>\n+</head>\n+<script src=\"/webjars/jquery/3.3.1/jquery.min.js\"></script>\n+<body>\n+<div id=\"table\">\n+<h1>Books:</h1>\n+\n+<table cellpadding = \"4\"  width=\"100%\">\n+    <thead>\n+    <tr>\n+        <th align = \"left\">ID</th>\t\t\n+        <th align = \"left\">Name</th>\t\t\n+        <th align = \"left\">Author</th>\t\t\n+        <th align = \"left\">Genre</th>\n+    </tr>\n+    </thead>\n+    <tbody id=\"bookTable\">\n+    </tbody>\n+</table>\n+</div>\n+\n+<div id=\"addform\">\n+<form id=\"add-form\"  action=\"/add\" method=\"post\">\n+    <h1>Add new Book:</h1>\n+<table>\n+<tr>\n+    <td>\n+        <label for=\"name-input\">Name:</label>\n+\t</td>\t\n+\t<td>\n+        <input id=\"name-input\" name=\"name\" type=\"text\" required/>\n+    </td>\n+</tr>\n+<tr>\n+    <td>\n+        <label for=\"author-input\">Author:</label>\n+\t</td>\t\n+\t<td>\n+        <input id=\"author-input\" name=\"author\" type=\"text\" required/>\n+    </td>\n+</tr>\n+<tr>\n+    <td>\n+        <label for=\"genre-input\">Genre:</label>\n+\t</td>\t\n+\t<td>\n+        <input id=\"genre-input\" name=\"genre\" type=\"text\" required/>\n+    </td>\n+</tr>\n+<tr>\n+    <td align=\"center\">\n+        <button type=\"submit\">Save</button>\n+   </td>\n+</tr>\n+</table>\t\n+</form>\n+</div>\n+<script>\n+        $(function () {\n+               $.get('/books').done(function (books) {\n+                   books.forEach(function (book) {\n+                   var options = '<tr><td>'+book.id+'</td><td>'\n+                   +book.name+'</td><td>'\n+                   +book.author+'</td><td>'\n+                   +book.genre+'</td>'\n+                   +'<td><a href=\"edit?id='+book.id+'\">Edit</a></td>'\n+                   +'<td><a href=\"comment?id='+book.id+'\">Comments</a></td>'\n+                   +'<td><a href=\"addComment?id='+book.id+'\">Add a new comment</a></td>'\n+                   +'<td><a href=\"delete?id='+book.id+'\">Delete</a></td>'\n+                   +'</tr>';\n+                   $('#bookTable').append(options)\n+                   });\n+               })\n+           });\n+</script>\n+</body>\n+</html>"
  },
  {
    "sha": "f97d4ab2571e5f05f6a1b4066870b69f0c661724",
    "filename": "spring-10-AJAX/src/test/java/ru/otus/spring/repositories/AuthorRepositoryTest.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/AuthorRepositoryTest.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/AuthorRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/AuthorRepositoryTest.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,76 @@\n+package ru.otus.spring.repositories;\n+\n+import lombok.val;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.otus.spring.domain.Author;\n+\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@DataJpaTest\n+class AuthorRepositoryTest {\n+\n+    private static final int EXPECTED_NUMBER_OF_COMMENTS = 2;\n+    private static final long FIRST_COMMENT_ID = 1L;\n+\n+    @Autowired\n+    private AuthorRepository authorRepository;\n+\n+    @Autowired\n+    private TestEntityManager em;\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldFindExpectedAuthorById() {\n+        val optionalActualAuthor = authorRepository.findById(FIRST_COMMENT_ID);\n+        val expectedAuthor = em.find(Author.class, FIRST_COMMENT_ID);\n+        assertThat(optionalActualAuthor).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(expectedAuthor);\n+    }\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldReturnCorrectBooksListWithAllInfo() {\n+\n+        val students = authorRepository.findAll();\n+        assertThat(students).isNotNull().hasSize(EXPECTED_NUMBER_OF_COMMENTS)\n+                .allMatch(s -> !s.getName().equals(\"\"));\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testSave() {\n+        val author = new Author(0L, \"author 2\");\n+\n+        Author savedAuthor = em.persist(author);\n+\n+        Optional<Author> optionalActualAuthor = authorRepository.findById(savedAuthor.getId());\n+\n+        assertThat(optionalActualAuthor).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(savedAuthor);\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testUpdate() {\n+        val author = new Author(0L, \"author 2\");\n+\n+        Author savedAuthor = em.persist(author);\n+        String newName = \"newName\";\n+        savedAuthor.setName(newName);\n+\n+        authorRepository.save(savedAuthor);\n+\n+        Optional<Author> optionalActualAuthor = authorRepository.findById(savedAuthor.getId());\n+\n+        assertThat(optionalActualAuthor).isPresent().get().extracting(\"name\")\n+                .isEqualTo(newName);\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "69dc8f8dc5ee1fb8b22e6a22efed8398ae6a8495",
    "filename": "spring-10-AJAX/src/test/java/ru/otus/spring/repositories/BookRepositoryJpaImplTest.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/BookRepositoryJpaImplTest.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/BookRepositoryJpaImplTest.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/BookRepositoryJpaImplTest.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,86 @@\n+package ru.otus.spring.repositories;\n+\n+import lombok.val;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.otus.spring.domain.Author;\n+import ru.otus.spring.domain.Book;\n+import ru.otus.spring.domain.Genre;\n+\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@DataJpaTest\n+class BookRepositoryJpaImplTest {\n+\n+    private static final int EXPECTED_NUMBER_OF_AUTHORS = 2;\n+    private static final long FIRST_AUTHOR_ID = 1L;\n+\n+    private static final int EXPECTED_QUERIES_COUNT = 3;\n+\n+    @Autowired\n+    private BookRepository bookRepositoryJpa;\n+\n+    @Autowired\n+    private AuthorRepository authorRepository;\n+\n+    @Autowired\n+    private TestEntityManager em;\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldFindExpectedBookById() {\n+        val optionalActualBook = bookRepositoryJpa.findById(FIRST_AUTHOR_ID);\n+        val expectedBook = em.find(Book.class, FIRST_AUTHOR_ID);\n+        assertThat(optionalActualBook).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(expectedBook);\n+    }\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldReturnCorrectBooksListWithAllInfo() {\n+\n+        val students = bookRepositoryJpa.findAll();\n+        assertThat(students).isNotNull().hasSize(EXPECTED_NUMBER_OF_AUTHORS)\n+                .allMatch(s -> !s.getName().equals(\"\"));\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testSave() {\n+        val author = new Author( 0L,\"Sidorov\");\n+        val genre = new Genre( 0L,\"Sience Fiction\");\n+\n+        val sidorov = new Book(0L, \"Third Book\", author , genre);\n+        Book book =\n+                em.persist(sidorov);\n+        Long bookId = book.getId();\n+\n+        Optional<Book> optionalActualBook = bookRepositoryJpa.findById(bookId);\n+\n+        assertThat(optionalActualBook).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(book);\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testSaveExisting() {\n+        Author author = em.find(Author.class, 1L);\n+        Genre genre = em.find(Genre.class, 1L);\n+\n+        val sidorov = new Book(0L, \"Third Book\", author , genre);\n+        Book book =\n+                em.persist(sidorov);\n+        Long bookId = book.getId();\n+\n+        Optional<Book> optionalActualBook = bookRepositoryJpa.findById(bookId);\n+\n+        assertThat(optionalActualBook).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(book);\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7f7502a10136afaaec5dcea2640ac0a37f6d2f10",
    "filename": "spring-10-AJAX/src/test/java/ru/otus/spring/repositories/CommentRepositoryTest.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/CommentRepositoryTest.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/CommentRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/CommentRepositoryTest.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,89 @@\n+package ru.otus.spring.repositories;\n+\n+import lombok.val;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.otus.spring.domain.Book;\n+import ru.otus.spring.domain.Comment;\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@DataJpaTest\n+class CommentRepositoryTest {\n+\n+    private static final int EXPECTED_NUMBER_OF_COMMENTS = 2;\n+    private static final long FIRST_COMMENT_ID = 1L;\n+    private static final long BOOK_ID = 1L;\n+\n+    @Autowired\n+    private CommentRepository commentRepository;\n+\n+    @Autowired\n+    private BookRepository bookRepository;\n+\n+    @Autowired\n+    private TestEntityManager em;\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldFindExpectedCommentById() {\n+        val optionalActualComment = commentRepository.findById(FIRST_COMMENT_ID);\n+        val expectedComment = em.find(Comment.class, FIRST_COMMENT_ID);\n+        assertThat(optionalActualComment).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(expectedComment);\n+    }\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldReturnCorrectBooksListWithAllInfo() {\n+\n+       val comments = commentRepository.findByBookId(BOOK_ID);\n+        assertThat(comments).isNotNull().hasSize(EXPECTED_NUMBER_OF_COMMENTS)\n+                .allMatch(s -> !s.getComment().equals(\"\"));\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testSave() {\n+\n+        Optional<Book> optionalBook = bookRepository.findById(1L);\n+        assertThat(optionalBook).isPresent();\n+\n+        val comment = new Comment(0L, \"comment 2\", optionalBook.get());\n+\n+        Comment savedComment = commentRepository.save(comment);\n+\n+        Optional<Comment> optionalActualComment = commentRepository.findById(savedComment.getId());\n+\n+        assertThat(optionalActualComment).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(savedComment);\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testUpdate() {\n+\n+        Optional<Comment> optionalComment = commentRepository.findById(1L);\n+        if (optionalComment.isPresent()){\n+            Comment comment = optionalComment.get();\n+\n+            String newComment = \"new comment\";\n+\n+            comment.setComment(newComment);\n+\n+            commentRepository.save(comment);\n+\n+            Optional<Comment> optionalActualComment = commentRepository.findById(comment.getId());\n+\n+            assertThat(optionalActualComment).isPresent();\n+            assertThat(optionalActualComment.get().getComment().equals(newComment));\n+\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bf7029852933dd027948467a3bb9574c6b584bd1",
    "filename": "spring-10-AJAX/src/test/java/ru/otus/spring/repositories/GenreRepositoryTest.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/GenreRepositoryTest.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/GenreRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/GenreRepositoryTest.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,59 @@\n+package ru.otus.spring.repositories;\n+\n+import lombok.val;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.otus.spring.domain.Genre;\n+\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@DataJpaTest\n+class GenreRepositoryTest {\n+\n+    private static final int EXPECTED_NUMBER_OF_COMMENTS = 2;\n+    private static final long FIRST_COMMENT_ID = 1L;\n+\n+    @Autowired\n+    private GenreRepository genreRepository;\n+\n+    @Autowired\n+    private TestEntityManager em;\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldFindExpectedGenreById() {\n+        val optionalActualGenre = genreRepository.findById(FIRST_COMMENT_ID);\n+        val expectedGenre = em.find(Genre.class, FIRST_COMMENT_ID);\n+        assertThat(optionalActualGenre).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(expectedGenre);\n+    }\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldReturnCorrectBooksListWithAllInfo() {\n+\n+        val students = genreRepository.findAll();\n+        assertThat(students).isNotNull().hasSize(EXPECTED_NUMBER_OF_COMMENTS)\n+                .allMatch(s -> !s.getName().equals(\"\"));\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testSave() {\n+        val genre = new Genre(0L, \"genre 2\");\n+\n+        Genre savedGenre = em.persist(genre);\n+\n+        Optional<Genre> optionalActualGenre = genreRepository.findById(savedGenre.getId());\n+\n+        assertThat(optionalActualGenre).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(savedGenre);\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f84be9ab859d948d45c76c08dac9155be7796f45",
    "filename": "spring-10-AJAX/src/test/java/ru/otus/spring/repositories/LibraryServiceTest.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/blob/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/LibraryServiceTest.java",
    "raw_url": "https://github.com/salnikovams/2020-11-otus-spring-salnikova/raw/a6dcdd4fb1c30db6e53091dece0a035845fe100d/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/LibraryServiceTest.java",
    "contents_url": "https://api.github.com/repos/salnikovams/2020-11-otus-spring-salnikova/contents/spring-10-AJAX/src/test/java/ru/otus/spring/repositories/LibraryServiceTest.java?ref=a6dcdd4fb1c30db6e53091dece0a035845fe100d",
    "patch": "@@ -0,0 +1,75 @@\n+package ru.otus.spring.repositories;\n+\n+import lombok.val;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\n+import org.springframework.transaction.annotation.Transactional;\n+import ru.otus.spring.domain.Author;\n+\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@DataJpaTest\n+class LibraryServiceTest {\n+\n+    private static final int EXPECTED_NUMBER_OF_COMMENTS = 2;\n+    private static final long FIRST_COMMENT_ID = 1L;\n+\n+    @Autowired\n+    private AuthorRepository authorRepository;\n+\n+    @Autowired\n+    private TestEntityManager em;\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldFindExpectedAuthorById() {\n+        val optionalActualAuthor = authorRepository.findById(FIRST_COMMENT_ID);\n+        val expectedAuthor = em.find(Author.class, FIRST_COMMENT_ID);\n+        assertThat(optionalActualAuthor).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(expectedAuthor);\n+    }\n+\n+    @Test\n+    @Transactional(readOnly = true)\n+    void shouldReturnCorrectBooksListWithAllInfo() {\n+\n+        val students = authorRepository.findAll();\n+        assertThat(students).isNotNull().hasSize(EXPECTED_NUMBER_OF_COMMENTS)\n+                .allMatch(s -> !s.getName().equals(\"\"));\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testSave() {\n+        val author = new Author(0L, \"author 2\");\n+\n+        Author savedAuthor = em.persist(author);\n+\n+        Optional<Author> optionalActualAuthor = authorRepository.findById(savedAuthor.getId());\n+\n+        assertThat(optionalActualAuthor).isPresent().get()\n+                .usingRecursiveComparison().isEqualTo(savedAuthor);\n+    }\n+\n+    @Test\n+    @Transactional\n+    void testUpdate() {\n+        val author = new Author(0L, \"author 2\");\n+\n+        Author savedAuthor = em.persist(author);\n+        String newName = \"newName\";\n+        savedAuthor.setName(newName);\n+\n+        authorRepository.save(savedAuthor);\n+\n+        Optional<Author> optionalActualAuthor = authorRepository.findById(savedAuthor.getId());\n+\n+        assertThat(optionalActualAuthor).isPresent().get().extracting(\"name\")\n+                .isEqualTo(newName);\n+    }\n+\n+}\n\\ No newline at end of file"
  }
]
