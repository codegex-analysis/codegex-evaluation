[
  {
    "sha": "fb58f34918da148d05a097df56563cb420cf0f1b",
    "filename": "BOJ/[BOJ]1976_여행 가자/BOJ1976.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/ssafy10-5-algo/algorithm/blob/84bfdb954038c4986ad21a52eff9a819d14e1696/BOJ/%5BBOJ%5D1976_%EC%97%AC%ED%96%89%20%EA%B0%80%EC%9E%90/BOJ1976.java",
    "raw_url": "https://github.com/ssafy10-5-algo/algorithm/raw/84bfdb954038c4986ad21a52eff9a819d14e1696/BOJ/%5BBOJ%5D1976_%EC%97%AC%ED%96%89%20%EA%B0%80%EC%9E%90/BOJ1976.java",
    "contents_url": "https://api.github.com/repos/ssafy10-5-algo/algorithm/contents/BOJ/%5BBOJ%5D1976_%EC%97%AC%ED%96%89%20%EA%B0%80%EC%9E%90/BOJ1976.java?ref=84bfdb954038c4986ad21a52eff9a819d14e1696",
    "patch": "@@ -0,0 +1,49 @@\n+import java.io.*;\n+import java.util.*;\n+\n+public class BOJ1976 {\n+    public static void main(String[] args) throws Exception{\n+        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+        int N = Integer.parseInt(br.readLine());    // 도시의 수\n+        int M = Integer.parseInt(br.readLine());    // 여행을 계획한 도시의 수\n+        List[] graph = new List[N+1];               // 연결된 도시\n+        int[] cities = new int[M];                // 계획한 도시\n+        boolean[] visited = new boolean[N+1];       // bfs 도시 방문체크\n+        Queue<Integer> q = new ArrayDeque<>();      // bfs 큐\n+        for (int i = 1; i <= N; i++) graph[i] = new ArrayList<Integer>();\n+        for (int i = 1; i <= N; i++) {\n+            StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n+            for (int j = 1; j <= N; j++) {\n+                int check = Integer.parseInt(st.nextToken());\n+                if (check == 1) graph[i].add(j);\n+            }\n+        }\n+        StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n+        for (int i = 0; i < M; i++) cities[i] = Integer.parseInt(st.nextToken());\n+\n+        // 방문할 도시의 첫번째 도시를 root로 해서 bfs 돌린다.\n+        q.add(cities[0]);\n+        visited[cities[0]] = true;\n+        while(!q.isEmpty()) {\n+            int now = q.poll();\n+\n+            // 현재 도시에서 방문하지 않은 연결된 도시들을 방문한다.\n+            for (int i = 0, size = graph[now].size(); i < size; i++) {\n+                int next = (int) graph[now].get(i);\n+                if (!visited[next]) {\n+                    q.add(next);\n+                    visited[next] = true;\n+                }\n+            }\n+        }\n+\n+        // 방문 예정인 도시들을 방문했는지 여부를 체크한다.\n+        for (int city : cities) {\n+            if (!visited[city]) {\n+                System.out.println(\"NO\");\n+                System.exit(0);\n+            }\n+        }\n+        System.out.println(\"YES\");\n+    }\n+}"
  },
  {
    "sha": "bfba753945eaae40cee141b23d8f76b427d17830",
    "filename": "BOJ/[BOJ]1976_여행 가자/README.md",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/ssafy10-5-algo/algorithm/blob/84bfdb954038c4986ad21a52eff9a819d14e1696/BOJ/%5BBOJ%5D1976_%EC%97%AC%ED%96%89%20%EA%B0%80%EC%9E%90/README.md",
    "raw_url": "https://github.com/ssafy10-5-algo/algorithm/raw/84bfdb954038c4986ad21a52eff9a819d14e1696/BOJ/%5BBOJ%5D1976_%EC%97%AC%ED%96%89%20%EA%B0%80%EC%9E%90/README.md",
    "contents_url": "https://api.github.com/repos/ssafy10-5-algo/algorithm/contents/BOJ/%5BBOJ%5D1976_%EC%97%AC%ED%96%89%20%EA%B0%80%EC%9E%90/README.md?ref=84bfdb954038c4986ad21a52eff9a819d14e1696",
    "patch": "@@ -0,0 +1,50 @@\n+# [백준 1976번: 여행 가자 🧳](https://www.acmicpc.net/problem/1976)\n+\n+### sudo ✍\n+이번 문제 진짜 10분컷으로 푼 것 같다. 후후 이런 문제만 있었으면 좋겠다...  \n+이 문제는 **같은 도시를 여러 번 방문하는 것도 가능**이라는 문구 덕분에 쉬웠다.. 만약에 저 문구가 없었다면 나는 머리털을 다 뽑아버렸을거야...\n+\n+<br/>\n+\n+#### 아이디어\n+1. 우선 도시의 연결 여부와 계획한 도시의 입력을 받아온다.\n+2. 방문할 도시의 첫 번째 도시를 root로 하여 bfs를 돌린다.\n+3. bfs로 돌리며 방문 여부(visited)를 갱신한다.\n+4. 계획한 도시들이 방문 여부에 존재하지 않으면 \"NO\"를 모두 방문했다면 \"YES\"를 출력한다.  \n+\n+같은 도시를 여러 번 방문 가능하므로 연결만 되어 있다면 돌아서라도 갈 수 있다. 그러므로 계획한 도시들이 서로 연결만 되어 있다면 무조건 순서에 맞춰서 갈 수 있다!😊 \n+\n+<br/>\n+\n+### algorithm 💻  \n+1. 방문을 계획한 도시의 첫 번째 도시를 root로 한다.\n+    ```java\n+    q.add(cities[0])\n+    visited[cities[0]] = true;\n+    ```\n+\n+2. 현재 갈 수 있는 모든 도시를 체크한다. (bfs를 돌린다.)  \n+    ``` java\n+     while(!q.isEmpty()) {\n+        int now = q.poll();\n+        for (int i = 0, size = graph[now].size(); i < size; i++) {\n+            int next = (int) graph[now].get(i);\n+            if (!visited[next]) {\n+                q.add(next);\n+                visited[next] = true;\n+            }\n+        }\n+     }\n+    ```\n+\n+3. 계획한 모든 도시가 첫 번째 도시에서 갈 수 있다면 \"YES\"\n+    한 도시라도 갈 수 없다면 \"NO\"  \n+    ```java\n+    for (int city : cities) {\n+        if (!visited[city]) {\n+            System.out.println(\"NO\");\n+            System.exit(0);\n+        }\n+    }\n+    System.out.println(\"YES\");\n+    ```\n\\ No newline at end of file"
  }
]
