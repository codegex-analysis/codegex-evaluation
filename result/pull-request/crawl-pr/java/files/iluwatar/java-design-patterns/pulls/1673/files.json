[
  {
    "sha": "0012a44f805653a61b6cade10621e82359c090f7",
    "filename": "money/pom.xml",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/pom.xml",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/pom.xml",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/pom.xml?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>java-design-patterns</artifactId>\n+        <groupId>com.iluwatar</groupId>\n+        <version>1.24.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>money</artifactId>\n+\n+    <properties>\n+        <maven.compiler.source>15</maven.compiler.source>\n+        <maven.compiler.target>15</maven.compiler.target>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "d870535751166ee3601f31792415acfc0f1ec99c",
    "filename": "money/src/main/java/com/iluwatar/money/Account.java",
    "status": "added",
    "additions": 144,
    "deletions": 0,
    "changes": 144,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/Account.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/Account.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/Account.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,144 @@\n+package com.iluwatar.money;\n+\n+import com.iluwatar.money.exception.BalanceDoesNotExistForAccountException;\n+import com.iluwatar.money.exception.CurrencyCannotBeExchangedException;\n+import com.iluwatar.money.exception.InsufficientFundsException;\n+import com.iluwatar.money.exception.SubtractionCannotOccurException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This class represents a User Account, which holds all the {@link Balance}s\n+ * that this user has created.\n+ */\n+public class Account {\n+\n+  private final int accountId;\n+  private final Set<Balance> accountBalances = new HashSet<>();\n+\n+  public Account(int accountId) {\n+    this.accountId = accountId;\n+  }\n+\n+  /**\n+   * Creates a new Balance object for the account.\n+   *\n+   * @param money Contains the information required to create the balance.\n+   */\n+  public Balance createBalance(Money money) {\n+    Balance createdBalance = new Balance(this, money);\n+    this.accountBalances.add(createdBalance);\n+    return createdBalance;\n+  }\n+\n+  /**\n+   * Deposits funds into the corresponding {@link Balance} within the {@link Account}.\n+   *\n+   * @param amountToDeposit The {@link Money} object containing the amount to deposit\n+   *                        and the {@link Currency}.\n+   */\n+  public void depositFundsIntoBalance(Balance balance, Money amountToDeposit) {\n+    balance.getMoney().addMoney(amountToDeposit);\n+  }\n+\n+  /**\n+   * Withdraws funds from an accounts balance.\n+   *\n+   * @param moneyToWithdraw The {@link Money} containing the amount and {@link Currency}\n+   *                        representation to be withdrawn.\n+   *\n+   * @throws InsufficientFundsException If the {@link Account} doesn't have sufficient funds.\n+   */\n+  public void withdrawFromBalance(Balance balance, Money moneyToWithdraw)\n+          throws InsufficientFundsException {\n+\n+\n+    if (balance.getMoney().getAmount() > moneyToWithdraw.getAmount()) {\n+\n+      try {\n+        balance.getMoney().subtractMoneyBy(moneyToWithdraw);\n+      } catch (SubtractionCannotOccurException e) {\n+        System.err.println(\"Insufficient funds in balance.\");\n+      }\n+\n+    } else {\n+\n+      try {\n+        Balance combinedBalance = combineAllAccountBalances(moneyToWithdraw.getCurrency());\n+\n+        if (combinedBalance.getMoney().getAmount() > moneyToWithdraw.getAmount()) {\n+          balance.getMoney().subtractMoneyBy(moneyToWithdraw);\n+        } else {\n+          throw new InsufficientFundsException(\"Not enough funds on the account.\");\n+        }\n+      } catch (SubtractionCannotOccurException e) {\n+        System.err.println(\"Error while trying to withdraw currency.\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Combines all of the account balances and adds them to the balance that is to be withdrawn from.\n+   *\n+   * @param currencyToBeCombinedInto The currency that the accounts balances should\n+   *                                 be combined into.\n+   * @return The combined {@link Balance} that contains all the converted funds.\n+   */\n+  private Balance combineAllAccountBalances(Currency currencyToBeCombinedInto) {\n+    Balance requestedBalance = null;\n+    try {\n+      requestedBalance = retrieveRequestedBalance(currencyToBeCombinedInto);\n+    } catch (BalanceDoesNotExistForAccountException e) {\n+      System.err.println(currencyToBeCombinedInto + \"Balance non-existent\");\n+    }\n+\n+    Balance finalRequestedBalance = requestedBalance;\n+    this.getAccountBalances().forEach(balance -> {\n+\n+      if (balance.getMoney().getCurrency() != currencyToBeCombinedInto) {\n+        try {\n+          Money convertedCurrency = CurrencyExchange.convertCurrency(balance.getMoney(),\n+                  ExchangeMethod.assignExchangeMethodBasedOnInput(\n+                          finalRequestedBalance.getMoney().getCurrency()));\n+\n+          finalRequestedBalance.getMoney().addMoney(convertedCurrency);\n+        } catch (CurrencyCannotBeExchangedException e) {\n+          System.err.println(\"Currency must not be the same to convert.\");\n+        }\n+      }\n+    });\n+\n+    return requestedBalance;\n+  }\n+\n+  /**\n+   * Retrieves the {@link Balance} corresponding with the {@link Currency}.\n+   *\n+   * @param currency The {@link Currency} of the {@link Balance} which is to be retrieved.\n+   *\n+   * @return The {@link Balance} that corresponds to the {@link Currency}.\n+   *\n+   * @throws BalanceDoesNotExistForAccountException If the {@link Balance} which was requested\n+   *        doesn't exist.\n+   */\n+  private Balance retrieveRequestedBalance(Currency currency)\n+          throws BalanceDoesNotExistForAccountException {\n+\n+    return this.getAccountBalances().stream()\n+            .filter(balance -> balance.getMoney().getCurrency() == currency).findFirst()\n+            .orElseThrow(BalanceDoesNotExistForAccountException::new);\n+  }\n+\n+  public void addExistingBalancesToAccount(Balance... balances) {\n+    this.accountBalances.addAll(Arrays.asList(balances));\n+  }\n+\n+  public int getAccountId() {\n+    return accountId;\n+  }\n+\n+  public Set<Balance> getAccountBalances() {\n+    return accountBalances;\n+  }\n+}"
  },
  {
    "sha": "3ce8e9958534f0a7f5a5863905818cab9229c77d",
    "filename": "money/src/main/java/com/iluwatar/money/Balance.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/Balance.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/Balance.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/Balance.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,65 @@\n+package com.iluwatar.money;\n+\n+public class Balance {\n+\n+  private final Money money;\n+  private final Account account;\n+  private boolean isPrimaryBalance;\n+\n+  /**\n+   * Constructs a {@link Balance} and links it to the account.\n+   *\n+   * @param account The account this balance belongs to.\n+   * @param money   The money that this balance has.\n+   */\n+  public Balance(Account account, Money money) {\n+    this.money = money;\n+    this.account = account;\n+\n+    account.addExistingBalancesToAccount(this);\n+  }\n+\n+  /**\n+   * Constructs a {@link Balance} and links it to the account.\n+   * Also sets the balance to the accounts primary balance.\n+   *\n+   * @param account        The account this balance blongs to.\n+   * @param money          The money that this balance has.\n+   * @param primaryBalance Is this balance the accounts primary balance.\n+   */\n+  public Balance(Account account, Money money, boolean primaryBalance) {\n+    this.isPrimaryBalance = primaryBalance;\n+    this.account = account;\n+    this.money = money;\n+\n+    account.addExistingBalancesToAccount(this);\n+  }\n+\n+  public Money getMoney() {\n+    return money;\n+  }\n+\n+  public Account getAccount() {\n+    return account;\n+  }\n+\n+  public boolean isPrimaryBalance() {\n+    return isPrimaryBalance;\n+  }\n+\n+  /**\n+   * Converts the {@link Balance} that contains the type of {@link Currency}\n+   * provided in the method parameters, into a primary balance.\n+   *\n+   * @param currency The type of {@link Currency} to assign primary.\n+   */\n+  public void convertBalanceToPrimary(Currency currency) {\n+\n+    account.getAccountBalances().stream().filter(balance ->\n+            balance.isPrimaryBalance && balance.getMoney().getCurrency() != currency)\n+            .findFirst().ifPresent(alreadyExistingPrimaryBalance ->\n+            alreadyExistingPrimaryBalance.isPrimaryBalance = false);\n+\n+    this.isPrimaryBalance = true;\n+  }\n+}"
  },
  {
    "sha": "a508adad91207c204ce44bbf623b451fca45e74c",
    "filename": "money/src/main/java/com/iluwatar/money/Currency.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/Currency.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/Currency.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/Currency.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,14 @@\n+package com.iluwatar.money;\n+\n+public enum Currency {\n+  USD(100, \"USD\"),\n+  EUR(100, \"USD\");\n+\n+  private int centFactor;\n+  private String stringRepresentation;\n+\n+  Currency(int centFactor, String stringRepresentation) {\n+    this.centFactor = centFactor;\n+    this.stringRepresentation = stringRepresentation;\n+  }\n+}"
  },
  {
    "sha": "26e3d9bd89198fd4edeccdfe63f03cfa031cd8ad",
    "filename": "money/src/main/java/com/iluwatar/money/CurrencyExchange.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/CurrencyExchange.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/CurrencyExchange.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/CurrencyExchange.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,27 @@\n+package com.iluwatar.money;\n+\n+import com.iluwatar.money.exception.CurrencyCannotBeExchangedException;\n+\n+public class CurrencyExchange {\n+\n+  /**\n+   * Converts the given {@link Money} objects {@link Currency} to another Currency.\n+   *\n+   * @param moneyToExchangeCurrency The {@link Money} object which is to be converted.\n+   * @param exchangeMethod          The {@link ExchangeMethod} which is to be used\n+   *                                in the conversion.\n+   * @return A new {@link Money} object with the converted amount and {@link Currency}.\n+   * @throws CurrencyCannotBeExchangedException If both {@link Currency} objects are the same.\n+   */\n+  public static Money convertCurrency(Money moneyToExchangeCurrency, ExchangeMethod exchangeMethod)\n+          throws CurrencyCannotBeExchangedException {\n+    if (moneyToExchangeCurrency.getCurrency() != exchangeMethod.getExchangedCurrency()) {\n+      return new Money(moneyToExchangeCurrency.multiplyMoneyBy(exchangeMethod.getExchangeRatio()),\n+              exchangeMethod.getExchangedCurrency());\n+    } else {\n+      throw new CurrencyCannotBeExchangedException(\n+              \"Currency cannot be the same in order to exchange.\");\n+    }\n+  }\n+\n+}"
  },
  {
    "sha": "add2f29607382ff5422cf1a0e3100857d5127ce0",
    "filename": "money/src/main/java/com/iluwatar/money/ExchangeMethod.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/ExchangeMethod.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/ExchangeMethod.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/ExchangeMethod.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,29 @@\n+package com.iluwatar.money;\n+\n+import java.util.Arrays;\n+\n+public enum ExchangeMethod {\n+  USD_TO_EUR(0.67, Currency.EUR),\n+  EUR_TO_USD(1.5, Currency.USD);\n+\n+  private final double exchangeRatio;\n+  private final Currency exchangedCurrency;\n+\n+  ExchangeMethod(double exchangeRatio, Currency resultingCurrency) {\n+    this.exchangeRatio = exchangeRatio;\n+    this.exchangedCurrency = resultingCurrency;\n+  }\n+\n+  public Currency getExchangedCurrency() {\n+    return exchangedCurrency;\n+  }\n+\n+  public double getExchangeRatio() {\n+    return exchangeRatio;\n+  }\n+\n+  public static ExchangeMethod assignExchangeMethodBasedOnInput(Currency currencyToExchangeTo) {\n+    return Arrays.stream(values()).filter(value ->\n+            value.getExchangedCurrency() == currencyToExchangeTo).findFirst().get();\n+  }\n+}"
  },
  {
    "sha": "966b9e316ff2058d842659c2148d663efb65d311",
    "filename": "money/src/main/java/com/iluwatar/money/Money.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/Money.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/Money.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/Money.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,66 @@\n+package com.iluwatar.money;\n+\n+import com.iluwatar.money.exception.SubtractionCannotOccurException;\n+\n+public class Money {\n+\n+  private long amount;\n+  private final Currency currency;\n+\n+\n+  public Money(long amount, Currency currency) {\n+    this.amount = amount;\n+    this.currency = currency;\n+  }\n+\n+  /**\n+   * Adds both {@link Money} objects {@code amount} to each other and returns a new\n+   * {@link Money} object with the sum of both amounts.\n+   *\n+   * @param moneyToAdd The {@link Money} object which is the be added to this object.\n+   * @return The sum of the amounts of both of the {@link Money} objects.\n+   */\n+  public long addMoney(Money moneyToAdd) {\n+    this.amount = this.amount + moneyToAdd.getAmount();\n+    return this.amount;\n+  }\n+\n+  /**\n+   * Subtracts from this objects amount with the {@link Money}\n+   * objects amount provided in the method params.\n+   *\n+   * @param moneyToSubtractBy The {@link Money} object containing the amount\n+   *                          that is to be subtracted from this object.\n+   * @return The difference between the amounts of the {@link Money} objects.\n+   * @throws SubtractionCannotOccurException If this objects amount is less than the {@link Money}\n+   *                                         objects amount which this object\n+   *                                         is to be subtracted by.\n+   */\n+  public long subtractMoneyBy(Money moneyToSubtractBy) throws SubtractionCannotOccurException {\n+    if (this.amount < moneyToSubtractBy.amount) {\n+      throw new SubtractionCannotOccurException(\n+              \"The amount to subtract is more than what we currently have.\");\n+    }\n+    this.amount = this.amount - moneyToSubtractBy.amount;\n+    return this.amount;\n+  }\n+\n+  /**\n+   * Multiplies this object with the multiplier provided in the method parameter.\n+   *\n+   * @param multiplier Represents the multiplier of which this objects amount\n+   *                   is to be multiplied by.\n+   * @return A new {@link Money} object with the product of {@code this.amount * multiplier}.\n+   */\n+  public long multiplyMoneyBy(double multiplier) {\n+    return Math.round(this.amount * multiplier);\n+  }\n+\n+  public long getAmount() {\n+    return amount;\n+  }\n+\n+  public Currency getCurrency() {\n+    return currency;\n+  }\n+}"
  },
  {
    "sha": "cc19927d9aaf10997a62369b989dbe87e214f59f",
    "filename": "money/src/main/java/com/iluwatar/money/exception/BalanceCouldNotBeCreatedException.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/BalanceCouldNotBeCreatedException.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/BalanceCouldNotBeCreatedException.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/exception/BalanceCouldNotBeCreatedException.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,25 @@\n+package com.iluwatar.money.exception;\n+\n+public class BalanceCouldNotBeCreatedException extends Exception {\n+\n+  public BalanceCouldNotBeCreatedException() {\n+  }\n+\n+  public BalanceCouldNotBeCreatedException(String message) {\n+    super(message);\n+  }\n+\n+  public BalanceCouldNotBeCreatedException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public BalanceCouldNotBeCreatedException(Throwable cause) {\n+    super(cause);\n+  }\n+\n+  public BalanceCouldNotBeCreatedException(String message, Throwable cause,\n+                                           boolean enableSuppression,\n+                                           boolean writableStackTrace) {\n+    super(message, cause, enableSuppression, writableStackTrace);\n+  }\n+}"
  },
  {
    "sha": "ea17eb893868d2589146f3c819f64e408ee42458",
    "filename": "money/src/main/java/com/iluwatar/money/exception/BalanceDoesNotExistForAccountException.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/BalanceDoesNotExistForAccountException.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/BalanceDoesNotExistForAccountException.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/exception/BalanceDoesNotExistForAccountException.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,25 @@\n+package com.iluwatar.money.exception;\n+\n+public class BalanceDoesNotExistForAccountException extends Exception {\n+\n+  public BalanceDoesNotExistForAccountException() {\n+  }\n+\n+  public BalanceDoesNotExistForAccountException(String message) {\n+    super(message);\n+  }\n+\n+  public BalanceDoesNotExistForAccountException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public BalanceDoesNotExistForAccountException(Throwable cause) {\n+    super(cause);\n+  }\n+\n+  public BalanceDoesNotExistForAccountException(String message, Throwable cause,\n+                                                boolean enableSuppression,\n+                                                boolean writableStackTrace) {\n+    super(message, cause, enableSuppression, writableStackTrace);\n+  }\n+}"
  },
  {
    "sha": "1095ed5912057ea58be57b853a89a3696a41c160",
    "filename": "money/src/main/java/com/iluwatar/money/exception/CurrencyCannotBeExchangedException.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/CurrencyCannotBeExchangedException.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/CurrencyCannotBeExchangedException.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/exception/CurrencyCannotBeExchangedException.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,26 @@\n+package com.iluwatar.money.exception;\n+\n+public class CurrencyCannotBeExchangedException extends Exception {\n+\n+  public CurrencyCannotBeExchangedException() {\n+    super();\n+  }\n+\n+  public CurrencyCannotBeExchangedException(String message) {\n+    super(message);\n+  }\n+\n+  public CurrencyCannotBeExchangedException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public CurrencyCannotBeExchangedException(Throwable cause) {\n+    super(cause);\n+  }\n+\n+  protected CurrencyCannotBeExchangedException(String message, Throwable cause,\n+                                               boolean enableSuppression,\n+                                               boolean writableStackTrace) {\n+    super(message, cause, enableSuppression, writableStackTrace);\n+  }\n+}"
  },
  {
    "sha": "4e22ba64482ff08b3c69f03b85b27a4ab1cc13f7",
    "filename": "money/src/main/java/com/iluwatar/money/exception/CurrencyMismatchException.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/CurrencyMismatchException.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/CurrencyMismatchException.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/exception/CurrencyMismatchException.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,26 @@\n+package com.iluwatar.money.exception;\n+\n+public class CurrencyMismatchException extends Exception {\n+\n+  public CurrencyMismatchException() {\n+    super();\n+  }\n+\n+  public CurrencyMismatchException(String message) {\n+    super(message);\n+  }\n+\n+  public CurrencyMismatchException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public CurrencyMismatchException(Throwable cause) {\n+    super(cause);\n+  }\n+\n+  protected CurrencyMismatchException(String message, Throwable cause,\n+                                      boolean enableSuppression,\n+                                      boolean writableStackTrace) {\n+    super(message, cause, enableSuppression, writableStackTrace);\n+  }\n+}"
  },
  {
    "sha": "ab6de23a500662d5d2f5691c1ecf7b5e19ddd9b1",
    "filename": "money/src/main/java/com/iluwatar/money/exception/InsufficientFundsException.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/InsufficientFundsException.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/InsufficientFundsException.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/exception/InsufficientFundsException.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,26 @@\n+package com.iluwatar.money.exception;\n+\n+public class InsufficientFundsException extends Exception {\n+\n+  public InsufficientFundsException() {\n+    super();\n+  }\n+\n+  public InsufficientFundsException(String message) {\n+    super(message);\n+  }\n+\n+  public InsufficientFundsException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public InsufficientFundsException(Throwable cause) {\n+    super(cause);\n+  }\n+\n+  protected InsufficientFundsException(String message, Throwable cause,\n+                                       boolean enableSuppression,\n+                                       boolean writableStackTrace) {\n+    super(message, cause, enableSuppression, writableStackTrace);\n+  }\n+}"
  },
  {
    "sha": "e4d67d9ff53295dddec19b3326a1fb5a9f46c465",
    "filename": "money/src/main/java/com/iluwatar/money/exception/PrimaryBalanceNotFoundException.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/PrimaryBalanceNotFoundException.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/PrimaryBalanceNotFoundException.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/exception/PrimaryBalanceNotFoundException.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,26 @@\n+package com.iluwatar.money.exception;\n+\n+public class PrimaryBalanceNotFoundException extends Exception {\n+\n+  public PrimaryBalanceNotFoundException() {\n+    super();\n+  }\n+\n+  public PrimaryBalanceNotFoundException(String message) {\n+    super(message);\n+  }\n+\n+  public PrimaryBalanceNotFoundException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public PrimaryBalanceNotFoundException(Throwable cause) {\n+    super(cause);\n+  }\n+\n+  protected PrimaryBalanceNotFoundException(String message, Throwable cause,\n+                                            boolean enableSuppression,\n+                                            boolean writableStackTrace) {\n+    super(message, cause, enableSuppression, writableStackTrace);\n+  }\n+}"
  },
  {
    "sha": "fe1542ed7a88002b587066cc9fec23ea6fb47978",
    "filename": "money/src/main/java/com/iluwatar/money/exception/SubtractionCannotOccurException.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/SubtractionCannotOccurException.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/main/java/com/iluwatar/money/exception/SubtractionCannotOccurException.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/main/java/com/iluwatar/money/exception/SubtractionCannotOccurException.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,26 @@\n+package com.iluwatar.money.exception;\n+\n+public class SubtractionCannotOccurException extends Exception {\n+\n+  public SubtractionCannotOccurException() {\n+    super();\n+  }\n+\n+  public SubtractionCannotOccurException(String message) {\n+    super(message);\n+  }\n+\n+  public SubtractionCannotOccurException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public SubtractionCannotOccurException(Throwable cause) {\n+    super(cause);\n+  }\n+\n+  protected SubtractionCannotOccurException(String message, Throwable cause,\n+                                            boolean enableSuppression,\n+                                            boolean writableStackTrace) {\n+    super(message, cause, enableSuppression, writableStackTrace);\n+  }\n+}"
  },
  {
    "sha": "a261aaebedb61993f6b041508c4ab4e04ce700a1",
    "filename": "money/src/test/java/com/iluwatar/money/AccountTest.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/test/java/com/iluwatar/money/AccountTest.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/test/java/com/iluwatar/money/AccountTest.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/test/java/com/iluwatar/money/AccountTest.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,78 @@\n+package com.iluwatar.money;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.iluwatar.money.exception.BalanceCouldNotBeCreatedException;\n+import com.iluwatar.money.exception.InsufficientFundsException;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+\n+class AccountTest {\n+\n+  private static Account testAccount;\n+\n+  @BeforeAll\n+  static void beforeAll() {\n+    testAccount = new Account(123);\n+  }\n+\n+  @AfterEach\n+  void tearDown() {\n+    testAccount.getAccountBalances().clear();\n+  }\n+\n+  @Test\n+  public void testAccountCanBeCreated() {\n+    assertEquals(543254, new Account(543254).getAccountId());\n+  }\n+\n+  @Test\n+  public void testCreateBalanceForExistingAccount_Successfully() {\n+    Money testMoney = new Money(541, Currency.USD);\n+\n+    Balance testBalance = testAccount.createBalance(testMoney);\n+\n+    assertNotNull(testBalance);\n+    assertTrue(testAccount.getAccountBalances().contains(testBalance));\n+  }\n+\n+  @Test\n+  public void testDepositFundsIntoAccount_Successfully() {\n+    Money testMoneyToDeposit = new Money(654, Currency.USD);\n+    Money moneyToInitiallyCreateBalance = new Money(0, Currency.USD);\n+\n+\n+    Balance testBalance = testAccount.createBalance(moneyToInitiallyCreateBalance);\n+    testAccount.depositFundsIntoBalance(testBalance, testMoneyToDeposit);\n+\n+    assertEquals(654, testBalance.getMoney().getAmount());\n+  }\n+\n+  @Test\n+  public void testWithdrawFromBalance_Successfully() throws InsufficientFundsException {\n+    Money testMoneyToWithdraw = new Money(500, Currency.USD);\n+    Money moneyToCreateBalance = new Money(1000, Currency.USD);\n+\n+    Balance testBalance = testAccount.createBalance(moneyToCreateBalance);\n+\n+    assertEquals(1000, testBalance.getMoney().getAmount());\n+    testAccount.withdrawFromBalance(testBalance, testMoneyToWithdraw);\n+    assertEquals(500, testBalance.getMoney().getAmount());\n+  }\n+\n+  @Test\n+  public void testWithdrawFundsFromAccount_FailedWithInsufficientFundsException() {\n+    Money testMoney = new Money(500, Currency.USD);\n+    Money testMoneyToWithdraw = new Money(700, Currency.USD);\n+\n+    Balance testBalance = testAccount.createBalance(testMoney);\n+\n+    assertThrows(InsufficientFundsException.class,\n+            () -> testAccount.withdrawFromBalance(testBalance, testMoneyToWithdraw));\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "67e9f274cab36f63dead7dae28839f8b85096493",
    "filename": "money/src/test/java/com/iluwatar/money/BalanceTest.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/test/java/com/iluwatar/money/BalanceTest.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/test/java/com/iluwatar/money/BalanceTest.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/test/java/com/iluwatar/money/BalanceTest.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,17 @@\n+package com.iluwatar.money;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class BalanceTest {\n+\n+  @Test\n+  void testOnBalanceCreationBalanceAddedToAccount() {\n+    Account account = new Account(123);\n+    Balance balance = new Balance(account, new Money(500, Currency.USD));\n+\n+    assertTrue(account.getAccountBalances().contains(balance));\n+  }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8989bdbb6d251dbb563bf2f91f34181dcbc142a8",
    "filename": "money/src/test/java/com/iluwatar/money/CurrencyExchangeTest.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/test/java/com/iluwatar/money/CurrencyExchangeTest.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/test/java/com/iluwatar/money/CurrencyExchangeTest.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/test/java/com/iluwatar/money/CurrencyExchangeTest.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,22 @@\n+package com.iluwatar.money;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.iluwatar.money.exception.CurrencyCannotBeExchangedException;\n+import org.junit.jupiter.api.Test;\n+\n+class CurrencyExchangeTest {\n+\n+  @Test\n+  void testConvertCurrency_Successfully() throws CurrencyCannotBeExchangedException {\n+    Money money = new Money(100, Currency.USD);\n+\n+    Money convertedMoney = CurrencyExchange.convertCurrency(\n+            money, ExchangeMethod.assignExchangeMethodBasedOnInput(Currency.EUR));\n+\n+    assertEquals(money.multiplyMoneyBy(\n+            ExchangeMethod.USD_TO_EUR.getExchangeRatio()), convertedMoney.getAmount());\n+\n+    assertEquals(Currency.EUR, convertedMoney.getCurrency());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d6739c245558286375a75db1e396423de2c869b4",
    "filename": "money/src/test/java/com/iluwatar/money/MoneyTest.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/test/java/com/iluwatar/money/MoneyTest.java",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/money/src/test/java/com/iluwatar/money/MoneyTest.java",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/money/src/test/java/com/iluwatar/money/MoneyTest.java?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -0,0 +1,52 @@\n+package com.iluwatar.money;\n+\n+import com.iluwatar.money.exception.SubtractionCannotOccurException;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class MoneyTest {\n+\n+    @Test\n+    public void testIfMoneyObjectCanBeCreated() {\n+        Money moneyObject = new Money(100, Currency.USD);\n+\n+        assertNotNull(moneyObject);\n+        assertEquals(100, moneyObject.getAmount());\n+        assertEquals(Currency.USD, moneyObject.getCurrency());\n+    }\n+\n+    @Test\n+    void testIfMoneyCanBeAdded() {\n+        Money moneyOne = new Money(100, Currency.USD);\n+        Money moneyTow = new Money(100, Currency.USD);\n+        Money moneySum = new Money(moneyOne.addMoney(moneyTow), Currency.USD);\n+\n+        assertEquals(200, moneySum.getAmount());\n+    }\n+\n+    @Test\n+    void testSubtractMoneyBy_ThrowsSubtractionCannotOccurException() {\n+        Money moneyOne = new Money(100, Currency.USD);\n+        Money moneyTwo = new Money(120, Currency.USD);\n+\n+        assertThrows(SubtractionCannotOccurException.class, () -> {\n+            moneyOne.subtractMoneyBy(moneyTwo);\n+        });\n+    }\n+\n+    @Test\n+    void testMoneyCanBeSubtracted_Sucessfully() throws SubtractionCannotOccurException {\n+        Money moneyOne = new Money(100, Currency.USD);\n+        Money moneyTwo = new Money(80, Currency.USD);\n+\n+        assertEquals(20, moneyOne.subtractMoneyBy(moneyTwo));\n+    }\n+\n+    @Test\n+    void testIfMoneyObjectCanBeMultiplied() {\n+        Money moneyOne = new Money(100, Currency.USD);\n+\n+        assertEquals(300, moneyOne.multiplyMoneyBy(3));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0e4c8e395a62fa59bbbe072482784005dff3ac79",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/iluwatar/java-design-patterns/blob/8703011544b3ac756a7e1e15aaaefeeb07f884de/pom.xml",
    "raw_url": "https://github.com/iluwatar/java-design-patterns/raw/8703011544b3ac756a7e1e15aaaefeeb07f884de/pom.xml",
    "contents_url": "https://api.github.com/repos/iluwatar/java-design-patterns/contents/pom.xml?ref=8703011544b3ac756a7e1e15aaaefeeb07f884de",
    "patch": "@@ -222,6 +222,7 @@\n         <module>special-case</module>\n         <module>parameter-object</module>\n         <module>active-object</module>\n+        <module>money</module>\n     </modules>\n \n     <repositories>"
  }
]
