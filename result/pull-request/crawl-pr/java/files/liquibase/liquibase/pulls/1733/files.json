[
  {
    "sha": "e6f1a6f01f25fdf70111cfb9c1c5ee3f0d5da360",
    "filename": "liquibase-core/src/main/java/liquibase/diff/output/changelog/DiffToChangeLog.java",
    "status": "modified",
    "additions": 64,
    "deletions": 1,
    "changes": 65,
    "blob_url": "https://github.com/liquibase/liquibase/blob/f941e27cb5497bf373c98628abacf5fa997ef92b/liquibase-core/src/main/java/liquibase/diff/output/changelog/DiffToChangeLog.java",
    "raw_url": "https://github.com/liquibase/liquibase/raw/f941e27cb5497bf373c98628abacf5fa997ef92b/liquibase-core/src/main/java/liquibase/diff/output/changelog/DiffToChangeLog.java",
    "contents_url": "https://api.github.com/repos/liquibase/liquibase/contents/liquibase-core/src/main/java/liquibase/diff/output/changelog/DiffToChangeLog.java?ref=f941e27cb5497bf373c98628abacf5fa997ef92b",
    "patch": "@@ -25,13 +25,16 @@\n import liquibase.structure.DatabaseObjectComparator;\n import liquibase.structure.core.Column;\n import liquibase.structure.core.StoredDatabaseLogic;\n+import liquibase.structure.core.Table;\n import liquibase.util.DependencyUtil;\n import liquibase.util.StringUtil;\n \n import javax.xml.parsers.ParserConfigurationException;\n import java.io.*;\n import java.text.SimpleDateFormat;\n import java.util.*;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n \n public class DiffToChangeLog {\n \n@@ -437,7 +440,49 @@ public int compare(DatabaseObject o1, DatabaseObject o2) {\n                         }\n                     });\n \n-                    toSort.addAll(toNotSort);\n+                    //\n+                    // Find the last Table position\n+                    // If there are no tables then the\n+                    // insertion position is 0\n+                    //\n+                    AtomicInteger i = new AtomicInteger(); // any mutable integer wrapper\n+                    int lastTableIndex = toSort.stream()\n+                                      .peek(v -> i.incrementAndGet())\n+                                      .anyMatch(item -> item instanceof Table) ? i.get() - 1 : -1;\n+                    if (lastTableIndex == -1) {\n+                        lastTableIndex = 0;\n+                    }\n+\n+                    //\n+                    // Iterate the list of objects which were not sorted\n+                    // If there are dependencies on the Columns where were not sorted\n+                    // then we will insert these columns in the list after the last Table\n+                    // otherwise they just get inserted at the end\n+                    //\n+                    for (DatabaseObject notSort : toNotSort) {\n+                        DatabaseObject objectWithDependency =\n+                          objects.stream()\n+                                 .filter(obj -> ! (obj instanceof Table))\n+                                 .filter(obj -> {\n+                                     Set<String> attributes = obj.getAttributes();\n+                                     String matched =\n+                                         attributes.stream()\n+                                                   .filter(sa -> {\n+                                                       return columnDependencyExists(notSort, obj, sa);\n+                                                   })\n+                                                   .findFirst()\n+                                                   .orElse(null);\n+                                     return matched != null;\n+                                 })\n+                                 .findFirst()\n+                                 .orElse(null);\n+                        if (objectWithDependency != null) {\n+                            toSort.add(lastTableIndex, notSort);\n+                        } else {\n+                            toSort.add(notSort);\n+                        }\n+                    }\n+\n                     return toSort;\n                 }\n             } catch (DatabaseException e) {\n@@ -448,6 +493,24 @@ public int compare(DatabaseObject o1, DatabaseObject o2) {\n         return new ArrayList<>(objects);\n     }\n \n+    //\n+    // Check each attribute to see if it contains a reference to the Column\n+    // Return true if there if the reference exists and false if not\n+    //\n+    private boolean columnDependencyExists(final DatabaseObject column, DatabaseObject obj, String sa) {\n+        Object attrValueObj = obj.getAttribute(sa, Object.class);\n+        if (attrValueObj instanceof ArrayList) {\n+            List<Object> values = (List<Object>) attrValueObj;\n+            return\n+                values.stream()\n+                      .filter(item -> item instanceof Column)\n+                      .anyMatch(item -> item == column);\n+        } else if (attrValueObj instanceof Column) {\n+            return attrValueObj == column;\n+        }\n+        return false;\n+    }\n+\n     private List<Map<String, ?>> queryForDependenciesOracle(Executor executor, List<String> schemas)\n             throws DatabaseException {\n         List<Map<String, ?>> rs = null;"
  }
]
