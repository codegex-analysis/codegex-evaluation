[
  {
    "sha": "be39de9db8a5b6b35d2ad3f0bca43ca2ac85c46d",
    "filename": "main.java",
    "status": "modified",
    "additions": 31,
    "deletions": 6,
    "changes": 37,
    "blob_url": "https://github.com/AimanK/OperatingSystemsProject1/blob/746500d1e9b22c7c55958f0c38ae6cfb964f568a/main.java",
    "raw_url": "https://github.com/AimanK/OperatingSystemsProject1/raw/746500d1e9b22c7c55958f0c38ae6cfb964f568a/main.java",
    "contents_url": "https://api.github.com/repos/AimanK/OperatingSystemsProject1/contents/main.java?ref=746500d1e9b22c7c55958f0c38ae6cfb964f568a",
    "patch": "@@ -17,6 +17,10 @@ public static void run()\n     //Arrival time: random int uniform dist.\n     //Total CPU Time: random int gaussian dist.\n     //Remaining CPU Time: initialized to Ti.\n+    \n+    \n+    process ob = new process(15,1,0,20,20,6);\n+    \n \n     Scanner scan = new Scanner(System.in);\n     \n@@ -29,8 +33,7 @@ public static void run()\n \n   //A value for k, which is the time interval during which processes may arrive\n     System.out.println(\"Enter a Time Interval Value: \");\n-    //int k = scan.nextInt();\n-    int k = 50;\n+    int k = scan.nextInt();\n     \n \n \n@@ -43,7 +46,7 @@ public static void run()\n  //The standard deviation of total CPU time, v\n     System.out.println(\"Enter The Standard Deviation CPU Time: \");\n \n-    int v = scan.nextInt();\n+    Double v = scan.nextDouble();\n \n     \n   //The quantum q, for the last scheduling algorithm.\n@@ -63,12 +66,22 @@ public static void run()\n     System.out.println(\"Standard Deviation CPU Time: \" + v);\n \n     System.out.println(\"Time Quantum is: \" + q);\n+    \n+     Random rand = new Random();\n+    \n+    \n+    //Total CPU Time, integer chosen randomly from gaussian distribution with an average d and a standard deviation v, where d and v are simulation parameters\n+    for (int i = 0; i < n; i++) \n+    {\n+      double cpuTime = rand.nextGaussian() *d+v;\n \n+      System.out.println( i + \")\\t\" + \"CPU Time generated: \" + cpuTime);\n \n+      double remainingCPUTime = cpuTime;\n+    }\n \n-    //Using a random number generator, derive m arrival times, Ai, for all processes, distributed uniformly within the interval [0:k].\n \n-    Random rand = new Random();\n+    //Using a random number generator, derive m arrival times, Ai, for all processes, distributed uniformly within the interval [0:k].\n \n     for (int i = 0; i < n;i++) \n     {\n@@ -78,7 +91,19 @@ public static void run()\n        System.out.println(\"Random arrival time generated is: \" + arrivalTime);\n \n     }\n+    \n+    //Priority level for the last algorithm\n+    for (int i = 0; i < n; i++) \n+  {\n \n+    int priorityLevel = rand.nextInt(10) + 1;\n+\n+    System.out.println(\"Priority level is: \" + priorityLevel);\n+  }\n+    \n+    \n+\n+    \n   }\n \n   public static int turnAroundTime(int currentTime, int arrivalTime)\n@@ -97,4 +122,4 @@ public static void FIFO (PriorityQueue <Integer> a)\n       a.remove();\n       System.out.println(a.peek());\n   }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "7c0bca9b495f819a93964ffc4f06ac74a9b26b13",
    "filename": "process.java",
    "status": "modified",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/AimanK/OperatingSystemsProject1/blob/746500d1e9b22c7c55958f0c38ae6cfb964f568a/process.java",
    "raw_url": "https://github.com/AimanK/OperatingSystemsProject1/raw/746500d1e9b22c7c55958f0c38ae6cfb964f568a/process.java",
    "contents_url": "https://api.github.com/repos/AimanK/OperatingSystemsProject1/contents/process.java?ref=746500d1e9b22c7c55958f0c38ae6cfb964f568a",
    "patch": "@@ -0,0 +1,36 @@\n+import java.text.DecimalFormat;\n+\n+public class process\n+{\n+    int indActive = 1; \n+    int indArrivalTime = 2;\n+    int indTotalCPUTime = 3;\n+    int indRemainingCPUTime = 4;\n+    int indTurnAroundTime = 5;\n+    int indPriorityLevel = 6;\n+    int processNum;\n+    int active;\n+    int arrivalTime;\n+    int totalCPUTimes;\n+    int RemainingCPUTimes;\n+    int turnAroundTime;\n+    int priorityLevel;\n+\n+    DecimalFormat numberFormatter = new DecimalFormat(\"#.00\");\n+\n+    public process(int PN, int A, int AT, int TCT,\n+    int RCT, int PL)\n+    {\n+        processNum = PN;\n+        active = A;\n+        arrivalTime = AT;\n+        totalCPUTimes = TCT;\n+        RemainingCPUTimes = RCT;\n+        priorityLevel = PL;\n+    }\n+\n+    int[][] mainArray = new int[processNum][7];\n+\n+    //look at pseudocode\n+\n+}\n\\ No newline at end of file"
  }
]
