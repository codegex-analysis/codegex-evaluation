[
  {
    "sha": "b8ead4e9c0ca1f63fb4f07ac65dc2f59511aa44e",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/src/model/nsn-data.ts",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/model/nsn-data.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/model/nsn-data.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/src/model/nsn-data.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -1,13 +1,13 @@\n import { DateTime } from 'aws-sdk/clients/devicefarm';\n \n export interface NsnData {\n-    group_id: number;\n+    group_id?: number;\n     routing_id: string;\n     owa: string;\n     is_civ_mgr: string;\n     is_mil_mgr: string;\n-    ric: string;\n-    type: string;\n+    ric?: string;\n+    type?: string;\n     update_date?: string;\n     updated_by?: string;\n     created_by?: string;"
  },
  {
    "sha": "2f3d86e161d17810dbbf5107017af393261b7401",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-create-processor.ts",
    "status": "modified",
    "additions": 49,
    "deletions": 11,
    "changes": 60,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-create-processor.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-create-processor.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-create-processor.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -4,23 +4,45 @@ import { NsnData } from '../model/nsn-data';\n import { APIGatewayProxyEvent, APIGatewayProxyResult, Context } from 'aws-lambda';\n import { dynamoDocumentClient, getSettings } from '../config';\n import { apiResponses } from '../model/responseAPI';\n-import { RSA_PSS_SALTLEN_MAX_SIGN } from 'constants';\n+import { DynamoDB } from 'aws-sdk';\n \n-export const postNsn = async (event: APIGatewayProxyEvent, context: Context): Promise<APIGatewayProxyResult> => {\n+export const postNsn = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n     console.log('Saving the NSN data - ' + event);\n     if (event.body === null) {\n         return apiResponses._400({ message: 'No routing data provided to create NSN routing record.' });\n     }\n     console.log('1 body - ' + event.body);\n \n-    const { group_id, routing_id, owa, is_civ_mgr, is_mil_mgr, ric, created_by } = JSON.parse(event.body);\n-    console.log('2 - ' + group_id);\n-    if (!group_id) {\n-        return apiResponses._400({ message: 'Group id is mandetory to create NSN record' });\n+    let { routing_id, owa, is_civ_mgr, is_mil_mgr, ric, created_by } = JSON.parse(event.body);\n+    if (!routing_id) {\n+        return apiResponses._400({ message: 'Routing is mandatory to create NSN record.' });\n     }\n-    if (isNaN(group_id)) {\n-        return apiResponses._400({ message: 'Group id should be numeric' });\n+    routing_id = routing_id.trim(); // trimming routing id for extra spaces\n+    if (isNaN(routing_id.substring(0, 4))) {\n+        return apiResponses._400({ message: 'Please check routing Id restrictions.' });\n     }\n+    if (routing_id.length < 4 && routing_id.length != 2) {\n+        return apiResponses._400({ message: 'Invalid routing Id, please check routing Id restrictions.' });\n+    }\n+    if (routing_id.length > 15) {\n+        return apiResponses._400({ message: 'Routing id can not be more than 15 characters.' });\n+    }\n+    let smallCaseRegex = /[a-z]/;\n+    if (!owa || owa.length > 1 || smallCaseRegex.test(owa) || owa === 'Y') {\n+        return apiResponses._400({\n+            message: 'Invalid owa value. Allowed values are  A through W, X, Z and 0 through 9.',\n+        });\n+    }\n+    // Setting valid values for Civ and Mil Manager\n+    is_civ_mgr = is_civ_mgr == 'Y' ? is_civ_mgr : 'N';\n+    is_mil_mgr = is_mil_mgr == 'Y' ? is_mil_mgr : 'N';\n+\n+    if ((is_civ_mgr == 'Y' || is_mil_mgr == 'Y') && !ric) {\n+        return apiResponses._400({ message: 'Routing identifier code is mandatory.' });\n+    }\n+\n+    let group_id = Number(routing_id.substring(0, 2));\n+\n     console.log('3 ' + routing_id);\n     const params = {\n         TableName: getSettings().TABLE_NAME,\n@@ -30,15 +52,15 @@ export const postNsn = async (event: APIGatewayProxyEvent, context: Context): Pr\n         },\n     };\n     console.log('4 - params - ' + params);\n-    let existingNsnData = await dynamoDocumentClient.get(params).promise();\n+    let existingNsnData = await getDocumentDbClient().get(params).promise();\n     console.log('5 existingNsnData - ' + existingNsnData);\n     if (existingNsnData.Item != null) {\n         return apiResponses._422({ message: 'NSN routing record already exists for the routing id - ' + routing_id });\n     }\n     console.log('6');\n \n     const nsnData: NsnData = {\n-        group_id,\n+        group_id: group_id,\n         routing_id,\n         owa,\n         is_civ_mgr,\n@@ -53,11 +75,27 @@ export const postNsn = async (event: APIGatewayProxyEvent, context: Context): Pr\n         console.log('8');\n         const model = { TableName: getSettings().TABLE_NAME, Item: nsnData };\n         console.log('9');\n-        await dynamoDocumentClient.put(model).promise();\n+        await getDocumentDbClient().put(model).promise();\n         console.log('10 ' + model.Item);\n         return apiResponses._201(model.Item);\n     } catch (err) {\n         console.log('Error ---- ' + err);\n         return apiResponses._500({ message: 'Error creating NSN record' });\n     }\n };\n+\n+const getDocumentDbClient = (): DynamoDB.DocumentClient => {\n+    let options = {};\n+\n+    if (process.env.IS_OFFLINE) {\n+        options = {\n+            region: 'localhost',\n+            endpoint: 'http://localhost:8000',\n+        };\n+    }\n+    return new DynamoDB.DocumentClient(options);\n+};\n+\n+module.exports = {\n+    postNsn,\n+};"
  },
  {
    "sha": "d81dd7bb7a9038d9a8572f3dd229fb6be09b6aeb",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-delete-processor.ts",
    "status": "modified",
    "additions": 21,
    "deletions": 4,
    "changes": 25,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-delete-processor.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-delete-processor.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-delete-processor.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -1,10 +1,11 @@\n 'use strict';\n \n import { APIGatewayProxyEvent, APIGatewayProxyResult, Context } from 'aws-lambda';\n-import { dynamoDocumentClient, getSettings } from '../config';\n+import { getSettings } from '../config';\n import { apiResponses } from '../model/responseAPI';\n+import { DynamoDB } from 'aws-sdk';\n \n-export const deleteNsn = async (event: APIGatewayProxyEvent, context: Context): Promise<APIGatewayProxyResult> => {\n+export const deleteNsn = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n     console.log('Getting the NSN data - ' + event.pathParameters);\n     if (event.pathParameters === null) {\n         return apiResponses._400({ message: 'Routing id is needed to delete NSN data' });\n@@ -24,18 +25,34 @@ export const deleteNsn = async (event: APIGatewayProxyEvent, context: Context):\n         };\n \n         console.log('Fetching data from dynamoDB...');\n-        const nsnData = await dynamoDocumentClient.get(params).promise();\n+        const nsnData = await getDocumentDbClient().get(params).promise();\n         console.log('Data fetched from DB - ' + nsnData.Item);\n \n         if (nsnData.Item == null) {\n             return apiResponses._404({ message: 'No NSN Data found for routingId - ' + routingId });\n         }\n         console.log('About to delete NSN record for routing id - ' + routingId);\n-        await dynamoDocumentClient.delete(params).promise();\n+        await getDocumentDbClient().delete(params).promise();\n         console.log('NSN record for routing id - ' + routingId);\n         return apiResponses._204({ message: 'NSN record for routing id ' + routingId + ' is deleted successfully!' });\n     } catch (err) {\n         console.log('Error >>>>>> ' + err);\n         return apiResponses._500({ message: 'Error deleting record for NSN id - ' + routingId });\n     }\n };\n+\n+const getDocumentDbClient = (): DynamoDB.DocumentClient => {\n+    let options = {};\n+\n+    if (process.env.IS_OFFLINE) {\n+        options = {\n+            region: 'localhost',\n+            endpoint: 'http://localhost:8000',\n+        };\n+    }\n+    return new DynamoDB.DocumentClient(options);\n+};\n+\n+module.exports = {\n+    deleteNsn,\n+};"
  },
  {
    "sha": "d8ef83f03743e467d20f145326b4af35134d8a72",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-get-processor.ts",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-get-processor.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-get-processor.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-get-processor.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -1,6 +1,6 @@\n 'use strict';\n import { NsnData } from '../model/nsn-data';\n-import { DynamoDB } from '../../node_modules/aws-sdk';\n+import { DynamoDB } from 'aws-sdk';\n import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\n import { apiResponses, response } from '../model/responseAPI';\n import { getSettings } from '../config';\n@@ -22,7 +22,6 @@ export const getNsn = async (event: APIGatewayProxyEvent): Promise<APIGatewayPro\n     if (isNaN(groupId)) {\n         return apiResponses._400({ message: 'First 2 characters are group id and needs to be numeric' });\n     }\n-    debugger;\n     let isGroupSearch: boolean = routingId.length == 2 ? true : false;\n     // If the search is for class, then group information also need to be fetched.\n     let searchStr = String(groupId);\n@@ -83,6 +82,7 @@ function groupBy(list: any, keyGetter: any, searchStr: string) {\n         ) {\n             const key = keyGetter(item);\n             const collection = map.get(key);\n+            delete item.group_id;\n             if (!collection) {\n                 map.set(key, [item]);\n             } else {\n@@ -98,3 +98,7 @@ function groupBy(list: any, keyGetter: any, searchStr: string) {\n     }\n     return map;\n }\n+\n+module.exports = {\n+    getNsn,\n+};"
  },
  {
    "sha": "6a11690d148afbcdaaebb8472d72f169d282a1e7",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-update-processor.ts",
    "status": "modified",
    "additions": 20,
    "deletions": 7,
    "changes": 27,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-update-processor.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-update-processor.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/src/processor/nsn-routing-update-processor.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -2,21 +2,22 @@\n \n import { NsnData } from '../model/nsn-data';\n import { APIGatewayProxyEvent, APIGatewayProxyResult, Context } from 'aws-lambda';\n-import { dynamoDocumentClient, getSettings } from '../config';\n+import { getSettings } from '../config';\n import { apiResponses } from '../model/responseAPI';\n+import { DynamoDB } from 'aws-sdk';\n \n-export const putNsn = async (event: APIGatewayProxyEvent, context: Context): Promise<APIGatewayProxyResult> => {\n+export const putNsn = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n     console.log('Updating the NSN data - ' + event);\n-    if (event.body === null) {\n+    if (event.body == null) {\n         return apiResponses._400({ message: 'No routing data provided to update NSN routing record.' });\n     }\n \n-    const { group_id, routing_id, owa, is_civ_mgr, is_mil_mgr, ric } = JSON.parse(event.body);\n+    const { routing_id, owa, is_civ_mgr, is_mil_mgr, ric } = JSON.parse(event.body);\n \n     if (!routing_id) {\n         return apiResponses._400({ message: 'Routing NSN number is mandetory to update NSN record' });\n     }\n-\n+    let group_id = routing_id.substring(0, 2);\n     console.log('Routing ID - ' + routing_id);\n     var params = {\n         TableName: getSettings().TABLE_NAME,\n@@ -27,7 +28,7 @@ export const putNsn = async (event: APIGatewayProxyEvent, context: Context): Pro\n     };\n \n     console.log('Fetching data from dynamoDB for update...');\n-    const updateNsnData = await dynamoDocumentClient.get(params).promise();\n+    const updateNsnData = await getDocumentDbClient().get(params).promise();\n     console.log('Data fetched from DB  to update - ' + updateNsnData.Item);\n \n     if (updateNsnData.Item == null) {\n@@ -49,10 +50,22 @@ export const putNsn = async (event: APIGatewayProxyEvent, context: Context): Pro\n \n     try {\n         const model = { TableName: getSettings().TABLE_NAME, Item: nsnData };\n-        await dynamoDocumentClient.put(model).promise();\n+        await getDocumentDbClient().put(model).promise();\n         return apiResponses._200(model);\n     } catch (err) {\n         console.log('Error while updating - ' + err);\n         return apiResponses._500({ message: 'Error updating NSN record for routing ID - ' + routing_id });\n     }\n };\n+\n+const getDocumentDbClient = (): DynamoDB.DocumentClient => {\n+    let options = {};\n+\n+    if (process.env.IS_OFFLINE) {\n+        options = {\n+            region: 'localhost',\n+            endpoint: 'http://localhost:8000',\n+        };\n+    }\n+    return new DynamoDB.DocumentClient(options);\n+};"
  },
  {
    "sha": "f44239712a90474e4dac5ed8a3632c20f63d7fe9",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-delete-processor.test.ts",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-delete-processor.test.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-delete-processor.test.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-delete-processor.test.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -0,0 +1,67 @@\n+import { deleteNsn } from '../../src/processor/nsn-routing-delete-processor';\n+import { expect } from 'chai';\n+import { APIGatewayProxyEvent } from 'aws-lambda';\n+import { mock, when, instance } from 'ts-mockito';\n+import * as AWS from 'aws-sdk';\n+import { DynamoDB } from 'aws-sdk';\n+import * as AWSMock from 'aws-sdk-mock';\n+import * as LambdaTester from 'lambda-tester';\n+import { GetItemInput } from 'aws-sdk/clients/dynamodb';\n+\n+describe('Delete test suit.', () => {\n+    let mockEvent: APIGatewayProxyEvent = mock(<APIGatewayProxyEvent>{});\n+    const proxyEvent: APIGatewayProxyEvent = instance(mockEvent);\n+\n+    it('Delete request with no path parameter.', async () => {\n+        let response = await deleteNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(400);\n+\n+        when(mockEvent.pathParameters).thenReturn(null);\n+\n+        response = await deleteNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(400);\n+    });\n+\n+    it('Delete request for non existing NSN', async () => {\n+        AWSMock.setSDKInstance(AWS);\n+\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'get',\n+            (params: DynamoDB.DocumentClient.GetItemInput, callback: Function) => {\n+                callback(null, { Item: null });\n+            }\n+        );\n+\n+        when(mockEvent.pathParameters).thenReturn({ routingId: '123411111111' });\n+\n+        let response = await deleteNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(404);\n+        AWSMock.restore('DynamoDB.DocumentClient');\n+    });\n+\n+    it('Delete request success for NSN', async () => {\n+        AWSMock.setSDKInstance(AWS);\n+\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'get',\n+            (params: DynamoDB.DocumentClient.GetItemInput, callback: Function) => {\n+                callback(null, { Item: {} });\n+            }\n+        );\n+\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'delete',\n+            (params: DynamoDB.DocumentClient.DeleteItemInput, callback: Function) => {\n+                callback(null, { Attributes: {} });\n+            }\n+        );\n+        when(mockEvent.pathParameters).thenReturn({ routingId: '123411111111' });\n+\n+        let response = await deleteNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(204);\n+        AWSMock.restore('DynamoDB.DocumentClient');\n+    });\n+});"
  },
  {
    "sha": "231970d606d33f7cf5a4eb6acde20e0ddb5ac4fa",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-get-processor.test.ts",
    "status": "modified",
    "additions": 74,
    "deletions": 11,
    "changes": 85,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-get-processor.test.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-get-processor.test.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-get-processor.test.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -10,7 +10,7 @@ import * as AWSMock from 'aws-sdk-mock';\n import * as LambdaTester from 'lambda-tester';\n import { GetItemInput } from 'aws-sdk/clients/dynamodb';\n \n-describe('errorTests', () => {\n+describe('Retrieve NSN test suit', () => {\n     let mockEvent: APIGatewayProxyEvent = mock(<APIGatewayProxyEvent>{});\n     const proxyEvent: APIGatewayProxyEvent = instance(mockEvent);\n \n@@ -59,21 +59,84 @@ describe('errorTests', () => {\n         AWSMock.restore('DynamoDB.DocumentClient');\n     });\n \n-    it('GetNsnSuccess200', async () => {\n+    it('Search by group id', async () => {\n         AWSMock.setSDKInstance(AWS);\n \n-        AWSMock.mock(\n-            'DynamoDB.DocumentClient',\n-            'query',\n-            (params: DynamoDB.DocumentClient.QueryInput, callback: Function) => {\n-                callback(null, { Items: [{ group_id: 12, routing_id: 123411111111 }] });\n-            }\n-        );\n+        mockDocumentClient();\n \n-        when(mockEvent.pathParameters).thenReturn({ routingId: '123411111111' });\n+        let searchStr: string;\n+\n+        searchStr = '12';\n+        when(mockEvent.pathParameters).thenReturn({ routingId: searchStr });\n+        let response = await getNsn(proxyEvent);\n+        validate200Response(response, searchStr);\n+\n+        AWSMock.restore('DynamoDB.DocumentClient');\n+    });\n+\n+    it('Search by class id', async () => {\n+        AWSMock.setSDKInstance(AWS);\n \n+        mockDocumentClient();\n+\n+        let searchStr: string;\n+\n+        searchStr = '1234';\n+        when(mockEvent.pathParameters).thenReturn({ routingId: searchStr });\n+        let response = await getNsn(proxyEvent);\n+        validate200Response(response, searchStr);\n+\n+        AWSMock.restore('DynamoDB.DocumentClient');\n+    });\n+\n+    it('Search by partial NSN id', async () => {\n+        AWSMock.setSDKInstance(AWS);\n+\n+        mockDocumentClient();\n+\n+        let searchStr: string;\n+\n+        searchStr = '12341';\n+        when(mockEvent.pathParameters).thenReturn({ routingId: searchStr });\n         let response = await getNsn(proxyEvent);\n-        expect(response.statusCode).to.equal(200);\n+        validate200Response(response, searchStr);\n+\n         AWSMock.restore('DynamoDB.DocumentClient');\n     });\n });\n+\n+function mockDocumentClient() {\n+    AWSMock.mock(\n+        'DynamoDB.DocumentClient',\n+        'query',\n+        (params: DynamoDB.DocumentClient.QueryInput, callback: Function) => {\n+            callback(null, {\n+                Items: [\n+                    { group_id: 12, routing_id: '123411111111', type: 'nsn' },\n+                    { group_id: 12, routing_id: '1234', type: 'class' },\n+                    { group_id: 12, routing_id: '12', type: 'group' },\n+                ],\n+            });\n+        }\n+    );\n+}\n+function validate200Response(response: any, searchStr: string) {\n+    expect(response.statusCode).to.equal(200);\n+\n+    let resObj: any = JSON.parse(response.body);\n+    if (searchStr.length == 2) {\n+        expect(resObj.length).to.equal(2);\n+        expect(resObj[0][0]).to.equal('class');\n+        expect(resObj[1][0]).to.equal('group');\n+        expect(resObj[0][1][0].routing_id).to.contains(searchStr);\n+        expect(resObj[1][1][0].routing_id).to.equal(searchStr);\n+    } else {\n+        expect(resObj.length).to.equal(3);\n+        expect(resObj[0][0]).to.equal('nsn');\n+        expect(resObj[1][0]).to.equal('class');\n+        expect(resObj[2][0]).to.equal('group');\n+        expect(resObj[0][1][0].routing_id).to.contains(searchStr);\n+        expect(resObj[1][1][0].routing_id).to.equal(searchStr.substring(0, 4));\n+        expect(resObj[2][1][0].routing_id).to.equal(searchStr.substring(0, 2));\n+    }\n+}"
  },
  {
    "sha": "62a2ce6b2251cd56c5d4039815f888e0ce4002ed",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-post-processor.test.ts",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-post-processor.test.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-post-processor.test.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-post-processor.test.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -0,0 +1,100 @@\n+import { postNsn } from '../../src/processor/nsn-routing-create-processor';\n+import { NsnData } from '../../src/model/nsn-data';\n+import * as appConfig from '../../src/config';\n+import * as nock from 'nock';\n+import { expect } from 'chai';\n+import { APIGatewayProxyEvent } from 'aws-lambda';\n+import { mock, when, instance } from 'ts-mockito';\n+import { DynamoDB } from 'aws-sdk';\n+import AWSMock from 'aws-sdk-mock';\n+import AWS from 'aws-sdk';\n+import * as LambdaTester from 'lambda-tester';\n+import { GetItemInput } from 'aws-sdk/clients/dynamodb';\n+\n+describe('Create NSN test suit', () => {\n+    let mockEvent: APIGatewayProxyEvent = mock(<APIGatewayProxyEvent>{});\n+    const proxyEvent: APIGatewayProxyEvent = instance(mockEvent);\n+\n+    it('Null or empty routing ID for create API', async () => {\n+        when(mockEvent.body).thenReturn(null);\n+\n+        let response = await postNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(400);\n+\n+        let body: string = '{}';\n+        when(mockEvent.body).thenReturn(body);\n+        expect(response.statusCode).to.equal(400);\n+    });\n+\n+    it('Invalid routing ID(NaN) for create API', async () => {\n+        when(mockEvent.body).thenReturn(null);\n+\n+        let body: string = '{\"routing_id\": \"ab33\"}';\n+        when(mockEvent.body).thenReturn(body);\n+        let response = await postNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(400);\n+    });\n+\n+    it('Invalid routing ID(3 digit number) for create API', async () => {\n+        when(mockEvent.body).thenReturn(null);\n+\n+        let body: string = '{\"routing_id\": \"123\"}';\n+        when(mockEvent.body).thenReturn(body);\n+        let response = await postNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(400);\n+    });\n+\n+    it('Invalid routing ID(more than 15 characters) for create API', async () => {\n+        when(mockEvent.body).thenReturn(null);\n+\n+        let body: string = '{\"routing_id\": \"1234234gjh323298934\"}';\n+        when(mockEvent.body).thenReturn(body);\n+        let response = await postNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(400);\n+    });\n+\n+    it('NSN record exists error for create API', async () => {\n+        when(mockEvent.body).thenReturn(null);\n+        let body: string = '{\"routing_id\": \"1111\"}';\n+        when(mockEvent.body).thenReturn(body);\n+        AWSMock.setSDKInstance(AWS);\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'get',\n+            (params: DynamoDB.DocumentClient.GetItemInput, callback: Function) => {\n+                callback(null, { Item: {} });\n+            }\n+        );\n+\n+        let response = await postNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(422);\n+        AWSMock.restore('DynamoDB.DocumentClient');\n+    });\n+\n+    it('NSN record success for create API', async () => {\n+        when(mockEvent.body).thenReturn(null);\n+        let body: string = '{\"routing_id\": \"1111\"}';\n+        when(mockEvent.body).thenReturn(body);\n+        AWS.config.update({ region: 'us-east-1' });\n+        AWSMock.setSDKInstance(AWS);\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'get',\n+            (params: DynamoDB.DocumentClient.GetItemInput, callback: Function) => {\n+                callback(null, { Attributes: {} });\n+            }\n+        );\n+\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'put',\n+            (params: DynamoDB.DocumentClient.PutItemInput, callback: Function) => {\n+                callback(null, { Attributes: {} });\n+            }\n+        );\n+\n+        let response = await postNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(201);\n+        AWSMock.restore('DynamoDB.DocumentClient');\n+    });\n+});"
  },
  {
    "sha": "e2b2c4203394648e953a63fd765400f60418b954",
    "filename": "services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-update-processor.test.ts",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/blob/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-update-processor.test.ts",
    "raw_url": "https://github.com/OctoConsulting/GSA_FSS19_DevOps/raw/bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-update-processor.test.ts",
    "contents_url": "https://api.github.com/repos/OctoConsulting/GSA_FSS19_DevOps/contents/services/nsn/modules/nodejs/nsn-get-routing/test/processor/nsn-routing-update-processor.test.ts?ref=bac54f8712f4f7550c9a3732bea3a7c6f1cb4cb6",
    "patch": "@@ -0,0 +1,72 @@\n+import { putNsn } from '../../src/processor/nsn-routing-update-processor';\n+import { expect } from 'chai';\n+import { APIGatewayProxyEvent } from 'aws-lambda';\n+import { mock, when, instance } from 'ts-mockito';\n+import * as AWS from 'aws-sdk';\n+import { DynamoDB } from 'aws-sdk';\n+import * as AWSMock from 'aws-sdk-mock';\n+import * as LambdaTester from 'lambda-tester';\n+import { GetItemInput } from 'aws-sdk/clients/dynamodb';\n+\n+describe('Update test suit.', () => {\n+    let mockEvent: APIGatewayProxyEvent = mock(<APIGatewayProxyEvent>{});\n+    const proxyEvent: APIGatewayProxyEvent = instance(mockEvent);\n+\n+    it('Update request with missing request body.', async () => {\n+        let response = await putNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(400);\n+\n+        when(mockEvent.body).thenReturn('{}');\n+\n+        response = await putNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(400);\n+    });\n+\n+    it('Update request for non existing NSN', async () => {\n+        AWSMock.setSDKInstance(AWS);\n+\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'get',\n+            (params: DynamoDB.DocumentClient.GetItemInput, callback: Function) => {\n+                callback(null, { Item: null });\n+            }\n+        );\n+\n+        let body: string = '{\"routing_id\": \"1111\"}';\n+        when(mockEvent.body).thenReturn(body);\n+\n+        let response = await putNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(404);\n+        AWSMock.restore('DynamoDB.DocumentClient');\n+    });\n+\n+    it('Update request success for NSN', async () => {\n+        AWSMock.setSDKInstance(AWS);\n+\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'get',\n+            (params: DynamoDB.DocumentClient.GetItemInput, callback: Function) => {\n+                callback(null, { Item: {} });\n+            }\n+        );\n+\n+        AWSMock.mock(\n+            'DynamoDB.DocumentClient',\n+            'put',\n+            (params: DynamoDB.DocumentClient.PutItemInput, callback: Function) => {\n+                callback(null, { Attributes: {} });\n+            }\n+        );\n+        when(mockEvent.body).thenReturn('{\"routing_id\": \"1111\"}');\n+\n+        let response = await putNsn(proxyEvent);\n+        expect(response.statusCode).to.equal(200);\n+        AWSMock.restore('DynamoDB.DocumentClient');\n+    });\n+});\n+\n+module.exports = {\n+    putNsn,\n+};"
  }
]
