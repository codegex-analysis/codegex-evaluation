[
  {
    "sha": "9eee5e8757dd66fe04e15f4a3b7b461651eaa662",
    "filename": ".github/workflows/workflow.yml",
    "status": "modified",
    "additions": 12,
    "deletions": 7,
    "changes": 19,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/.github/workflows/workflow.yml",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/.github/workflows/workflow.yml",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/.github/workflows/workflow.yml?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -27,13 +27,14 @@ jobs:\n         run: |\n           pushd ..\n           git clone https://github.com/cryptimeleon/craco.git\n-          popd\n+          pushd craco\n+          git checkout develop\n       - name: Checkout math\n         run: |\n           pushd ..\n           git clone https://github.com/cryptimeleon/math.git\n-\n-          popd\n+          pushd math\n+          git checkout develop\n       - uses: actions/setup-java@v1\n         with:\n           java-version: '15.0.2' # The JDK version to make available on the path.\n@@ -54,12 +55,14 @@ jobs:\n         run: |\n           pushd ..\n           git clone https://github.com/cryptimeleon/craco.git\n-          popd\n+          pushd craco\n+          git checkout develop\n       - name: Checkout math\n         run: |\n           pushd ..\n           git clone https://github.com/cryptimeleon/math.git\n-          popd\n+          pushd math\n+          git checkout develop\n       - uses: actions/setup-java@v1\n         with:\n           java-version: '15.0.2' # The JDK version to make available on the path.\n@@ -84,12 +87,14 @@ jobs:\n         run: |\n           pushd ..\n           git clone https://github.com/cryptimeleon/craco.git\n-          popd\n+          pushd craco\n+          git checkout develop\n       - name: Checkout math\n         run: |\n           pushd ..\n           git clone https://github.com/cryptimeleon/math.git\n-          popd\n+          pushd math\n+          git checkout develop\n       - uses: actions/setup-java@v1\n         with:\n           java-version: '15.0.2' # The JDK version to make available on the path."
  },
  {
    "sha": "dccb79b442c18faf05eb489dcb67454bda14c014",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/CHANGELOG.md",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/CHANGELOG.md?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -7,6 +7,7 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n \n ## Next Release\n \n+- Add credit-earn protocol [#27](https://github.com/upbcuk/incentive-services/pull/27)\n - Rename organization to cryptimeleon  [#18](https://github.com/upbcuk/incentive-services/pull/18)\n - Update gradle setup, basketserver authentication (shared secrets) and test structure, automatically generated swagger\n   files, client project with integration tests, move protocoldefinition to services, replace kubernetes with"
  },
  {
    "sha": "6d243fb84a148f95d9a7091953817f1ebcc464b3",
    "filename": "cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/IncentiveSystem.java",
    "status": "modified",
    "additions": 86,
    "deletions": 18,
    "changes": 104,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/IncentiveSystem.java",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/IncentiveSystem.java",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/IncentiveSystem.java?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -1,13 +1,15 @@\n package org.cryptimeleon.incentivesystem.cryptoprotocol;\n \n import org.cryptimeleon.craco.sig.sps.eq.SPSEQSignature;\n+import org.cryptimeleon.incentivesystem.cryptoprotocol.model.EarnRequest;\n import org.cryptimeleon.incentivesystem.cryptoprotocol.model.IncentivePublicParameters;\n import org.cryptimeleon.incentivesystem.cryptoprotocol.model.Token;\n import org.cryptimeleon.incentivesystem.cryptoprotocol.model.keys.provider.ProviderKeyPair;\n import org.cryptimeleon.incentivesystem.cryptoprotocol.model.keys.provider.ProviderPublicKey;\n import org.cryptimeleon.incentivesystem.cryptoprotocol.model.keys.user.UserKeyPair;\n import org.cryptimeleon.math.structures.rings.zn.Zn;\n \n+\n /*\n  * Contains all main algorithms of the incentive system.\n  */\n@@ -43,24 +45,90 @@ void generateJoinRequestResponse() {\n     void handleJoinRequestResponse() {\n     }\n \n-    void generateEarnRequest(Token token, UserKeyPair userKeyPair, ProviderPublicKey providerPublicKey) {\n-        // change representative call to blind commitment and certificate\n-        var pk = userKeyPair.getPk();\n-        var sk = userKeyPair.getSk();\n-\n-        Zn usedZn = pp.getBg().getZn(); // draw blinding value\n-        var s = usedZn.getUniformlyRandomNonzeroElement(); // s cannot be zero since we need to compute its inverse to unblind the signature\n-\n-        var certificate = token.getSignature();\n-        var provSPSPk = providerPublicKey.getPkSpsEq(); // store SPS EQ verification key from provider public key\n-        var blindedCommitment = token.getCommitment().pow(s); // computing another representative with blinding randomness (the implemented SPS-EQ is over R_exp)\n-        var blindedCertificate = (SPSEQSignature) pp.getSpsEq().chgRep(certificate, s, provSPSPk); // note: in contrast to formal specification, chgrep only takes three arguments (no message) and thus only updates the signature\n-    }\n-\n-    void generateEarnRequestResponse() {\n-    }\n-\n-    void handleEarnRequestResponse() {\n+    /**\n+     * Generate an earn request for adding to the value of users' tokens.\n+     *\n+     * @param token             the token to update\n+     * @param providerPublicKey the public key of the provider\n+     * @param s                 randomness, TODO replace by PRF(token)\n+     * @return request to give to a provider\n+     */\n+    public EarnRequest generateEarnRequest(Token token, ProviderPublicKey providerPublicKey, Zn.ZnElement s) {\n+        return new EarnRequest(\n+                (SPSEQSignature) pp.getSpsEq().chgRep(\n+                        token.getSignature(),\n+                        s,\n+                        providerPublicKey.getPkSpsEq()\n+                ),\n+                token.getC1().pow(s),\n+                token.getC2().pow(s)\n+        );\n+    }\n+\n+    /**\n+     * Generate the response for users' earn requests to update the blinded token.\n+     *\n+     * @param earnRequest     the earn request to process\n+     * @param k               the increase for the users token value\n+     * @param providerKeyPair the provider key pair\n+     * @return a signature on a blinded, updated token\n+     */\n+    public SPSEQSignature generateEarnRequestResponse(EarnRequest earnRequest, long k, ProviderKeyPair providerKeyPair) {\n+        var isSignatureValid = pp.getSpsEq().verify(\n+                providerKeyPair.getPk().getPkSpsEq(),\n+                earnRequest.getBlindedSignature(),\n+                earnRequest.getC1(),\n+                earnRequest.getC2()\n+        );\n+\n+        if (!isSignatureValid) {\n+            throw new IllegalArgumentException(\"Signature is not valid\");\n+        }\n+\n+        var C1 = earnRequest.getC1();\n+        var C2 = earnRequest.getC2();\n+        var q4 = providerKeyPair.getSk().getQ().get(4);\n+\n+        return (SPSEQSignature) pp.getSpsEq().sign(\n+                providerKeyPair.getSk().getSkSpsEq(),\n+                C1.op(C2.pow(q4.mul(k))),\n+                C2\n+        );\n+    }\n+\n+    /**\n+     * @param earnRequest       the earn request that was originally sent\n+     * @param changedSignature  the signature computed by the provider\n+     * @param k                 the increase for the users token value\n+     * @param token             the old token\n+     * @param userKeyPair       key pair of the user\n+     * @param providerPublicKey public key of the provider\n+     * @param s                 randomness TODO replace by PRF(token)\n+     * @return new token with value of the old token + k\n+     */\n+    public Token handleEarnRequestResponse(EarnRequest earnRequest, SPSEQSignature changedSignature, long k, Token token, UserKeyPair userKeyPair, ProviderPublicKey providerPublicKey, Zn.ZnElement s) {\n+\n+        var c1 = earnRequest.getC1().op((providerPublicKey.getH().get(4).pow(s)).pow(k));\n+        var c2 = earnRequest.getC2();\n+\n+        var signatureValid = pp.getSpsEq().verify(providerPublicKey.getPkSpsEq(), changedSignature, c1, c2);\n+        if (!signatureValid) {\n+            throw new IllegalArgumentException(\"Signature is not valid\");\n+        }\n+\n+        var newSignature = pp.getSpsEq().chgRep(changedSignature, s.inv(), providerPublicKey.getPkSpsEq());\n+\n+        return new Token(\n+                c1.pow(s.inv()),\n+                c2.pow(s.inv()),\n+                token.getEncryptionSecretKey(),\n+                token.getDoubleSpendRandomness0(),\n+                token.getDoubleSpendRandomness1(),\n+                token.getZ(),\n+                token.getT(),\n+                token.getPoints().add(pp.getBg().getZn().valueOf(k)),\n+                (SPSEQSignature) newSignature\n+        );\n     }\n \n     void generateSpendRequest() {"
  },
  {
    "sha": "ecd70b81f4b9074c58713799a695aade1c049522",
    "filename": "cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/Setup.java",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/Setup.java",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/Setup.java",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/Setup.java?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -53,8 +53,12 @@ public static IncentivePublicParameters trustedSetup(int securityParameter) {\n         // instantiate SPS-EQ scheme used in this instance of the incentive system\n         SPSEQSignatureScheme spsEq = new SPSEQSignatureScheme(new SPSEQPublicParameters(bg));\n \n+        // Random generators\n+        GroupElement g1 = bg.getG1().getGenerator();\n+        GroupElement g2 = bg.getG2().getGenerator();\n+\n         // wrap up all values\n-        return new IncentivePublicParameters(bg, w, h7, prf, spsEq);\n+        return new IncentivePublicParameters(bg, w, h7, g1, g2, prf, spsEq);\n     }\n \n     /**\n@@ -86,8 +90,7 @@ public static ProviderKeyPair providerKeyGen(IncentivePublicParameters pp) {\n         RingElementVector q = pp.getBg().getZn().getUniformlyRandomElements(6);\n \n         // compute above first 6 bases\n-        GroupElement g1Generator = pp.getBg().getG1().getGenerator();\n-        GroupElementVector h = g1Generator.pow(q);\n+        GroupElementVector h = pp.getG1().pow(q);\n \n         // generate PRF key for provider\n         PrfKey betaProv = pp.getPrf().generateKey();"
  },
  {
    "sha": "e4ff3a96f7c98b3c9b994650158266e126f23a9b",
    "filename": "cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/EarnRequest.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/EarnRequest.java",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/EarnRequest.java",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/EarnRequest.java?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -0,0 +1,42 @@\n+package org.cryptimeleon.incentivesystem.cryptoprotocol.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import lombok.experimental.NonFinal;\n+import org.cryptimeleon.craco.sig.sps.eq.SPSEQSignature;\n+import org.cryptimeleon.math.serialization.Representable;\n+import org.cryptimeleon.math.serialization.Representation;\n+import org.cryptimeleon.math.serialization.annotations.ReprUtil;\n+import org.cryptimeleon.math.serialization.annotations.Represented;\n+import org.cryptimeleon.math.structures.groups.GroupElement;\n+\n+/**\n+ * Data class for the request sent in the credit-earn protocol.\n+ */\n+@Value\n+@AllArgsConstructor\n+public class EarnRequest implements Representable {\n+    @NonFinal\n+    @Represented(restorer = \"SPSEQ\")\n+    SPSEQSignature blindedSignature;\n+\n+    @NonFinal\n+    @Represented(restorer = \"G1\")\n+    GroupElement c1; // first element of the tuple C\n+\n+    @NonFinal\n+    @Represented(restorer = \"G1\")\n+    GroupElement c2; // second element of the tuple C\n+\n+    @Override\n+    public Representation getRepresentation() {\n+        return ReprUtil.serialize(this);\n+    }\n+\n+    public EarnRequest(Representation repr, IncentivePublicParameters pp) {\n+        new ReprUtil(this)\n+                .register(pp.getBg().getG1(), \"G1\")\n+                .register(pp.getSpsEq(), \"SPSEQ\")\n+                .deserialize(repr);\n+    }\n+}"
  },
  {
    "sha": "6594bff08608eda796d4b1a9324b67e8dcfe5913",
    "filename": "cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/IncentivePublicParameters.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/IncentivePublicParameters.java",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/IncentivePublicParameters.java",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/IncentivePublicParameters.java?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -30,6 +30,14 @@\n     @Represented(restorer = \"bg::getG1\")\n     GroupElement h7;\n \n+    @NonFinal\n+    @Represented(restorer = \"bg::getG1\")\n+    GroupElement g1;\n+\n+    @NonFinal\n+    @Represented(restorer = \"bg::getG2\")\n+    GroupElement g2;\n+\n     @NonFinal\n     @Represented\n     AesPseudorandomFunction prf; // not in paper, but we need to store PRF that is used in incentive system instance somewhere"
  },
  {
    "sha": "d3ae83eab6f2b85d33c75df6be8c57e78f2c8487",
    "filename": "cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/Token.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/Token.java",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/Token.java",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/cryptoprotocol/src/main/java/org/cryptimeleon/incentivesystem/cryptoprotocol/model/Token.java?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -22,7 +22,11 @@\n public class Token implements Representable {\n     @NonFinal\n     @Represented(restorer = \"G1\")\n-    GroupElement commitment; // the Pedersen commitment computed from the bases and the exponents, representing the actual token\n+    GroupElement c1; // the vector containing Pedersen commitment\n+\n+    @NonFinal\n+    @Represented(restorer = \"G1\")\n+    GroupElement c2; // the vector containing usually g1\n \n     @NonFinal\n     @Represented(restorer = \"Zn\")"
  },
  {
    "sha": "cf68366bc3dc3a3852ccaf9e44da45761343499b",
    "filename": "cryptoprotocol/src/test/java/org/cryptimeleon/incetivesystem/cryptoprotocol/CreditEarnTest.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/test/java/org/cryptimeleon/incetivesystem/cryptoprotocol/CreditEarnTest.java",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/test/java/org/cryptimeleon/incetivesystem/cryptoprotocol/CreditEarnTest.java",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/cryptoprotocol/src/test/java/org/cryptimeleon/incetivesystem/cryptoprotocol/CreditEarnTest.java?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -0,0 +1,111 @@\n+package org.cryptimeleon.incetivesystem.cryptoprotocol;\n+\n+import org.cryptimeleon.craco.sig.sps.eq.SPSEQSignature;\n+import org.cryptimeleon.incentivesystem.cryptoprotocol.IncentiveSystem;\n+import org.cryptimeleon.incentivesystem.cryptoprotocol.model.EarnRequest;\n+import org.cryptimeleon.incentivesystem.cryptoprotocol.model.Token;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.logging.Logger;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests for the credit-earn protocol.\n+ */\n+public class CreditEarnTest {\n+\n+    Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+\n+    /**\n+     * Positive test for credit earn.\n+     */\n+    @Test\n+    void testSuccessFullCreditEarn() {\n+        logger.info(\"Setup test\");\n+        var pp = IncentiveSystem.setup();\n+        var incentiveSystem = new IncentiveSystem(pp);\n+        var providerKeyPair = incentiveSystem.generateProviderKeys();\n+        var userKeyPair = incentiveSystem.generateUserKeys();\n+        var earnAmount = 7;\n+\n+        // Create a dummy token.\n+        // This should be replaced by the actual methods that handle tokens when they are implemented.\n+        var zp = pp.getBg().getZn();\n+        var vectorH = providerKeyPair.getPk().getH();\n+\n+        var s = zp.getUniformlyRandomNonzeroElement(); // TODO this should become part of the methods using a PRF\n+\n+        // Manually create a token since issue-join is not yet implemented\n+        logger.info(\"Build token\");\n+        var encryptionSecretKey = zp.getUniformlyRandomNonzeroElement();\n+        var dsrd1 = zp.getUniformlyRandomElement();\n+        var dsrd2 = zp.getUniformlyRandomElement();\n+        var z = zp.getUniformlyRandomElement();\n+        var t = zp.getUniformlyRandomElement();\n+        var points = 0;\n+        var pointsZp = zp.valueOf(points);\n+        var c1 = vectorH.get(0).pow(userKeyPair.getSk().getUsk())\n+                .op(vectorH.get(1).pow(encryptionSecretKey))\n+                .op(vectorH.get(2).pow(dsrd1))\n+                .op(vectorH.get(3).pow(dsrd2))\n+                .op(vectorH.get(4).pow(pointsZp))\n+                .op(vectorH.get(5).pow(z))\n+                .op(pp.getH7().pow(t));\n+        var c2 = pp.getG1();\n+\n+        var token = new Token(\n+                c1,\n+                c2,\n+                encryptionSecretKey,\n+                dsrd1,\n+                dsrd2,\n+                z,\n+                t,\n+                pointsZp,\n+                (SPSEQSignature) pp.getSpsEq().sign(\n+                        providerKeyPair.getSk().getSkSpsEq(),\n+                        c1,\n+                        c2\n+                )\n+        );\n+\n+        assertTrue(pp.getSpsEq().verify(\n+                providerKeyPair.getPk().getPkSpsEq(),\n+                token.getSignature(),\n+                token.getC1(),\n+                token.getC2()\n+        ));\n+\n+        logger.info(\"start earn request\");\n+        var earnRequest = incentiveSystem.generateEarnRequest(token, providerKeyPair.getPk(), s);\n+\n+        // Test representation of earnRequest\n+        var restoredEarnRequest = new EarnRequest(earnRequest.getRepresentation(), pp);\n+        assertEquals(earnRequest, restoredEarnRequest);\n+\n+        logger.info(\"start earn response\");\n+        var signature = incentiveSystem.generateEarnRequestResponse(earnRequest, earnAmount, providerKeyPair);\n+\n+        // Test representation of signature (to be sure)\n+        var restoredSignature = new SPSEQSignature(signature.getRepresentation(), pp.getBg().getG1(), pp.getBg().getG2() );\n+        assertEquals(signature, restoredSignature);\n+\n+        logger.info(\"handle earn response\");\n+        var newToken = incentiveSystem.handleEarnRequestResponse(earnRequest, signature, earnAmount, token, userKeyPair, providerKeyPair.getPk(), s);\n+\n+\n+        assertEquals(\n+                newToken.getPoints().getInteger().longValue(),\n+                token.getPoints().getInteger().longValue() + earnAmount\n+        );\n+\n+        assertTrue(pp.getSpsEq().verify(\n+                providerKeyPair.getPk().getPkSpsEq(),\n+                newToken.getSignature(),\n+                newToken.getC1(),\n+                newToken.getC2()\n+        ));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b832cf9d618a3f734cfada2b91e111bc3499f710",
    "filename": "cryptoprotocol/src/test/java/org/cryptimeleon/incetivesystem/cryptoprotocol/TokenTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 9,
    "changes": 13,
    "blob_url": "https://github.com/cryptimeleon/incentive-system/blob/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/test/java/org/cryptimeleon/incetivesystem/cryptoprotocol/TokenTest.java",
    "raw_url": "https://github.com/cryptimeleon/incentive-system/raw/33ba89d654bb5b68be54b5d45218aab11c2a969d/cryptoprotocol/src/test/java/org/cryptimeleon/incetivesystem/cryptoprotocol/TokenTest.java",
    "contents_url": "https://api.github.com/repos/cryptimeleon/incentive-system/contents/cryptoprotocol/src/test/java/org/cryptimeleon/incetivesystem/cryptoprotocol/TokenTest.java?ref=33ba89d654bb5b68be54b5d45218aab11c2a969d",
    "patch": "@@ -1,7 +1,5 @@\n package org.cryptimeleon.incetivesystem.cryptoprotocol;\n \n-import org.cryptimeleon.craco.common.plaintexts.GroupElementPlainText;\n-import org.cryptimeleon.craco.common.plaintexts.MessageBlock;\n import org.cryptimeleon.craco.sig.sps.eq.SPSEQSignature;\n import org.cryptimeleon.incentivesystem.cryptoprotocol.IncentiveSystem;\n import org.cryptimeleon.incentivesystem.cryptoprotocol.model.Token;\n@@ -29,14 +27,10 @@ void testTokenSerialization() {\n         // This should be replaced by the actual methods that handle tokens when they are implemented.\n         var g1 = pp.getBg().getG1();\n         var zp = pp.getBg().getZn();\n-        var testMessages = new GroupElementPlainText[]{\n-                new GroupElementPlainText(pp.getBg().getG1().getUniformlyRandomElement()),\n-                new GroupElementPlainText(pp.getBg().getG1().getUniformlyRandomElement()),\n-        };\n-        var messageBlock = new MessageBlock(testMessages);\n \n         logger.info(\"Testing represention of tokens\");\n         var token = new Token(\n+                g1.getUniformlyRandomElement(),\n                 g1.getUniformlyRandomElement(),\n                 zp.getUniformlyRandomNonzeroElement(),\n                 zp.getUniformlyRandomElement(),\n@@ -45,8 +39,9 @@ void testTokenSerialization() {\n                 zp.getUniformlyRandomElement(),\n                 zp.getUniformlyRandomElement(),\n                 (SPSEQSignature) pp.getSpsEq().sign(\n-                        messageBlock,\n-                        providerKeyPair.getSk().getSkSpsEq()\n+                        providerKeyPair.getSk().getSkSpsEq(),\n+                        pp.getBg().getG1().getUniformlyRandomElement(),\n+                        pp.getBg().getG1().getUniformlyRandomElement()\n                 )\n         );\n "
  }
]
