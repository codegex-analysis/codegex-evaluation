[
  {
    "sha": "e2758a6297ec8cf9d8d2b26d53b4fa1bc28d69dd",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ThrottlingPoliciesApi.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ThrottlingPoliciesApi.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ThrottlingPoliciesApi.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ThrottlingPoliciesApi.java?ref=62c30622d3cd0a0f1e68589440ae7f03959e3d82",
    "patch": "@@ -1,6 +1,7 @@\n package org.wso2.carbon.apimgt.rest.api.publisher.v1;\n \n import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.SubscriptionPolicyDTO;\n import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.ThrottlingPolicyDTO;\n import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.ThrottlingPolicyListDTO;\n import org.wso2.carbon.apimgt.rest.api.publisher.v1.ThrottlingPoliciesApiService;\n@@ -58,13 +59,13 @@\n     @Path(\"/streaming/subscription\")\n     \n     @Produces({ \"application/json\" })\n-    @ApiOperation(value = \"Get subscription throttling policies based on quota type\", notes = \"This operation can be used to list the available subscription policies for a given tenent ID based on the given quota type. Quota Type should be provide as a query parameters and supported Quota types are \\\"requestCount\\\" ,\\\"bandwidthVolume\\\" and \\\"eventCount\\\" \", response = ThrottlingPolicyListDTO.class, authorizations = {\n+    @ApiOperation(value = \"Get subscription throttling policies based on quota type\", notes = \"This operation can be used to list the available subscription policies for a given tenent ID based on the given quota type. Quota Type should be provide as a query parameters and supported Quota types are \\\"requestCount\\\" ,\\\"bandwidthVolume\\\" and \\\"eventCount\\\" \", response = SubscriptionPolicyDTO.class, authorizations = {\n         @Authorization(value = \"OAuth2Security\", scopes = {\n             @AuthorizationScope(scope = \"apim:api_view\", description = \"View API\")\n         })\n     }, tags={ \"Throttling Policies\",  })\n     @ApiResponses(value = { \n-        @ApiResponse(code = 200, message = \"OK. List of subscription policies returned. \", response = ThrottlingPolicyListDTO.class),\n+        @ApiResponse(code = 200, message = \"OK. List of subscription policies returned. \", response = SubscriptionPolicyDTO.class),\n         @ApiResponse(code = 304, message = \"Not Modified. Empty body because the client has already the latest version of the requested resource (Will be supported in future). \", response = Void.class),\n         @ApiResponse(code = 406, message = \"Not Acceptable. The requested media type is not supported.\", response = ErrorDTO.class) })\n     public Response getSubscriptionThrottlingPolicies( @ApiParam(value = \"Filter the subscription base on tier quota type\")  @QueryParam(\"tierQuotaType\") String tierQuotaType,  @ApiParam(value = \"Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resource. \" )@HeaderParam(\"If-None-Match\") String ifNoneMatch) throws APIManagementException{"
  },
  {
    "sha": "b60f6592cf669bff3ca5c1b60664e6a4a581d973",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ThrottlingPoliciesApiService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ThrottlingPoliciesApiService.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ThrottlingPoliciesApiService.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ThrottlingPoliciesApiService.java?ref=62c30622d3cd0a0f1e68589440ae7f03959e3d82",
    "patch": "@@ -10,6 +10,7 @@\n import org.wso2.carbon.apimgt.api.APIManagementException;\n \n import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.SubscriptionPolicyDTO;\n import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.ThrottlingPolicyDTO;\n import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.ThrottlingPolicyListDTO;\n "
  },
  {
    "sha": "f83ab470b861ce644d116f98cdf217717abe93d5",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/resources/publisher-api.yaml",
    "status": "modified",
    "additions": 231,
    "deletions": 1,
    "changes": 232,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/resources/publisher-api.yaml",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/resources/publisher-api.yaml",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/resources/publisher-api.yaml?ref=62c30622d3cd0a0f1e68589440ae7f03959e3d82",
    "patch": "@@ -4634,7 +4634,8 @@ paths:\n           content:\n             application/json:\n               schema:\n-                $ref: '#/components/schemas/ThrottlingPolicyList'\n+                type: array\n+                $ref: '#/components/schemas/SubscriptionPolicy'\n         304:\n           description: |\n             Not Modified.\n@@ -9503,6 +9504,235 @@ components:\n             - ON_HOLD\n             - REJECTED\n             - TIER_UPDATE_PENDING\n+    ThrottlePolicy:\n+      title: Generic Throttling Policy\n+      required:\n+        - policyName\n+      type: object\n+      properties:\n+        policyId:\n+          type: string\n+          description: Id of policy\n+          readOnly: true\n+          example: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93\n+        policyName:\n+          maxLength: 60\n+          minLength: 1\n+          type: string\n+          description: Name of policy\n+          example: 30PerMin\n+        displayName:\n+          type: string\n+          description: Display name of the policy\n+          example: 30PerMin\n+          maxLength: 512\n+        description:\n+          maxLength: 1024\n+          type: string\n+          description: Description of the policy\n+          example: Allows 30 request per minute\n+        isDeployed:\n+          type: boolean\n+          description: Indicates whether the policy is deployed successfully or not.\n+          default: false\n+        type:\n+          type: string\n+          description: Indicates the type of throttle policy\n+      discriminator:\n+        propertyName: type\n+    GraphQLQuery:\n+      title: GraphQL Query\n+      type: object\n+      properties:\n+        graphQLMaxComplexity:\n+          type: integer\n+          description: Maximum Complexity of the GraphQL query\n+          example: 400\n+        graphQLMaxDepth:\n+          type: integer\n+          description: Maximum Depth of the GraphQL query\n+          example: 10\n+    ThrottleLimitBase:\n+      title: Throttle Limit Base\n+      required:\n+        - timeUnit\n+        - unitTime\n+      type: object\n+      properties:\n+        timeUnit:\n+          type: string\n+          description: Unit of the time. Allowed values are \"sec\", \"min\", \"hour\",\n+            \"day\"\n+          example: min\n+        unitTime:\n+          type: integer\n+          description: Time limit that the throttling limit applies.\n+          example: 10\n+    ThrottleLimit:\n+      title: Throttle Limit\n+      required:\n+        - type\n+      type: object\n+      properties:\n+        type:\n+          type: string\n+          description: |\n+            Type of the throttling limit. Allowed values are \"REQUESTCOUNTLIMIT\" and \"BANDWIDTHLIMIT\".\n+            Please see schemas of \"RequestCountLimit\" and \"BandwidthLimit\" throttling limit types in\n+            Definitions section.\n+          example: REQUESTCOUNTLIMIT\n+          enum:\n+            - REQUESTCOUNTLIMIT\n+            - BANDWIDTHLIMIT\n+            - EVENTCOUNTLIMIT\n+        requestCount:\n+          $ref: '#/components/schemas/RequestCountLimit'\n+        bandwidth:\n+          $ref: '#/components/schemas/BandwidthLimit'\n+        eventCount:\n+          $ref: '#/components/schemas/EventCountLimit'\n+    MonetizationInfo:\n+      title: API monetization details object\n+      required:\n+        - monetizationPlan\n+        - properties\n+      type: object\n+      properties:\n+        monetizationPlan:\n+          type: string\n+          description: Flag to indicate the monetization plan\n+          example: FixedRate\n+          enum:\n+            - FIXEDRATE\n+            - DYNAMICRATE\n+        properties:\n+          type: object\n+          additionalProperties:\n+            type: string\n+          description: Map of custom properties related to each monetization plan\n+    BandwidthLimit:\n+      title: Bandwidth Limit object\n+      allOf:\n+        - $ref: '#/components/schemas/ThrottleLimitBase'\n+        - required:\n+            - dataAmount\n+            - dataUnit\n+          type: object\n+          properties:\n+            dataAmount:\n+              type: integer\n+              description: Amount of data allowed to be transfered\n+              format: int64\n+              example: 1000\n+            dataUnit:\n+              type: string\n+              description: Unit of data allowed to be transfered. Allowed values are\n+                \"KB\", \"MB\" and \"GB\"\n+              example: KB\n+    RequestCountLimit:\n+      title: Request Count Limit object\n+      allOf:\n+        - $ref: '#/components/schemas/ThrottleLimitBase'\n+        - required:\n+            - requestCount\n+          type: object\n+          properties:\n+            requestCount:\n+              type: integer\n+              description: Maximum number of requests allowed\n+              format: int64\n+              example: 30\n+    EventCountLimit:\n+      title: Event Count Limit object\n+      allOf:\n+        - $ref: '#/components/schemas/ThrottleLimitBase'\n+        - required:\n+            - eventCount\n+          type: object\n+          properties:\n+            eventCount:\n+              type: integer\n+              description: Maximum number of events allowed\n+              format: int64\n+              example: 3000\n+    SubscriptionPolicy:\n+      title: Subscription Throttling Policy\n+      allOf:\n+        - $ref: '#/components/schemas/ThrottlePolicy'\n+        - $ref: '#/components/schemas/GraphQLQuery'\n+        - required:\n+            - defaultLimit\n+          type: object\n+          properties:\n+            defaultLimit:\n+              $ref: '#/components/schemas/ThrottleLimit'\n+            monetization:\n+              $ref: '#/components/schemas/MonetizationInfo'\n+            rateLimitCount:\n+              type: integer\n+              description: Burst control request count\n+              example: 10\n+            rateLimitTimeUnit:\n+              type: string\n+              description: Burst control time unit\n+              example: min\n+            subscriberCount:\n+              type: integer\n+              description: Number of subscriptions allowed\n+              example: 10\n+            customAttributes:\n+              type: array\n+              description: |\n+                Custom attributes added to the Subscription Throttling Policy\n+              example: [ ]\n+              items:\n+                $ref: '#/components/schemas/CustomAttribute'\n+            stopOnQuotaReach:\n+              type: boolean\n+              description: |\n+                This indicates the action to be taken when a user goes beyond the allocated quota. If checked, the user's requests will be dropped. If unchecked, the requests will be allowed to pass through.\n+              default: false\n+            billingPlan:\n+              type: string\n+              description: |\n+                define whether this is Paid or a Free plan. Allowed values are FREE or COMMERCIAL.\n+              example: FREE\n+            permissions:\n+              $ref: '#/components/schemas/SubscriptionThrottlePolicyPermission'\n+    CustomAttribute:\n+      title: Name-Value pair\n+      required:\n+        - name\n+        - value\n+      type: object\n+      properties:\n+        name:\n+          type: string\n+          description: Name of the custom attribute\n+          example: customAttr1\n+        value:\n+          type: string\n+          description: Value of the custom attribute\n+          example: value1\n+    SubscriptionThrottlePolicyPermission:\n+      title: SubscriptionThrottlePolicyPermission\n+      required:\n+        - permissionType\n+        - roles\n+      type: object\n+      properties:\n+        permissionType:\n+          type: string\n+          example: deny\n+          enum:\n+            - ALLOW\n+            - DENY\n+        roles:\n+          type: array\n+          example:\n+            - Internal/everyone\n+          items:\n+            type: string\n     APIMonetizationUsage:\n       title: API monetization usage object\n       type: object"
  },
  {
    "sha": "950d3aca366da0394715befa24e973536c9e6acb",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.throttling.siddhi.extension/src/main/java/org/wso2/carbon/apimgt/throttling/siddhi/extension/AsyncAPIThrottleStreamProcessor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.throttling.siddhi.extension/src/main/java/org/wso2/carbon/apimgt/throttling/siddhi/extension/AsyncAPIThrottleStreamProcessor.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.throttling.siddhi.extension/src/main/java/org/wso2/carbon/apimgt/throttling/siddhi/extension/AsyncAPIThrottleStreamProcessor.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.throttling.siddhi.extension/src/main/java/org/wso2/carbon/apimgt/throttling/siddhi/extension/AsyncAPIThrottleStreamProcessor.java?ref=62c30622d3cd0a0f1e68589440ae7f03959e3d82",
    "patch": "@@ -158,7 +158,7 @@ protected void process(ComplexEventChunk<StreamEvent> streamEventChunk, Processo\n                     throttleKey = streamEvent.getOutputData()[0].toString();\n                     if (throttledStateMap.containsKey(throttleKey)) {\n                         eventCount = throttledStateMap.get(throttleKey).incrementAndGet();\n-                        if (eventCount >= maxEventCount) {\n+                        if (eventCount > maxEventCount) {\n                             complexEventPopulater.populateComplexEvent(streamEvent, new Object[]{expireEventTime, true});\n                         } else {\n                             complexEventPopulater.populateComplexEvent(streamEvent, new Object[]{expireEventTime, false});"
  },
  {
    "sha": "854cebd4e919cdefe1427858cfb7714c51f35f85",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.throttling.siddhi.extension/src/test/java/org/wso2/carbon/apimgt/throttling/siddhi/extension/ThrottlingTimeLengthWindowTestCase.java",
    "status": "added",
    "additions": 166,
    "deletions": 0,
    "changes": 166,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.throttling.siddhi.extension/src/test/java/org/wso2/carbon/apimgt/throttling/siddhi/extension/ThrottlingTimeLengthWindowTestCase.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/62c30622d3cd0a0f1e68589440ae7f03959e3d82/components/apimgt/org.wso2.carbon.apimgt.throttling.siddhi.extension/src/test/java/org/wso2/carbon/apimgt/throttling/siddhi/extension/ThrottlingTimeLengthWindowTestCase.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.throttling.siddhi.extension/src/test/java/org/wso2/carbon/apimgt/throttling/siddhi/extension/ThrottlingTimeLengthWindowTestCase.java?ref=62c30622d3cd0a0f1e68589440ae7f03959e3d82",
    "patch": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.throttling.siddhi.extension;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.wso2.siddhi.core.ExecutionPlanRuntime;\n+import org.wso2.siddhi.core.SiddhiManager;\n+import org.wso2.siddhi.core.event.Event;\n+import org.wso2.siddhi.core.query.output.callback.QueryCallback;\n+import org.wso2.siddhi.core.stream.input.InputHandler;\n+import org.wso2.siddhi.core.util.EventPrinter;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class ThrottlingTimeLengthWindowTestCase {\n+\n+    private static final Log log = LogFactory.getLog(ThrottlingTimeLengthWindowTestCase.class);\n+    private int inEventCount;\n+    private int removeEventCount;\n+    private boolean eventArrived;\n+    private AtomicInteger count = new AtomicInteger();\n+\n+\n+    @Before\n+    public void init() {\n+        inEventCount = 0;\n+        removeEventCount = 0;\n+        eventArrived = false;\n+        count.set(0);\n+\n+    }\n+\n+    @Test\n+    public void throttleTimeLengthWindowTest1() throws InterruptedException {\n+\n+        SiddhiManager siddhiManager = new SiddhiManager();\n+\n+        String requestStream = \"\" +\n+                \"define stream RequestStream (messageID string, isEligible bool, throttleKey string);\";\n+        String query = \"\" +\n+                \"@info(name = 'query1') \" +\n+                \"from RequestStream#throttler:timeLength(10 sec,0, 2) \" +\n+                \"select throttleKey, isThrottled, expiryTimeStamp group by throttleKey \" +\n+                \"insert all events into outputStream ;\";\n+\n+        ExecutionPlanRuntime executionPlanRuntime = siddhiManager.createExecutionPlanRuntime(requestStream + query);\n+\n+        executionPlanRuntime.addCallback(\"query1\", new QueryCallback() {\n+            @Override\n+            public void receive(long timeStamp, Event[] inEvents, Event[] removeEvents) {\n+                EventPrinter.print(timeStamp, inEvents, removeEvents);\n+                if (inEvents != null) {\n+                    inEventCount = inEventCount + inEvents.length;\n+                    for (Event event : inEvents) {\n+                        switch (count.incrementAndGet()) {\n+                            case 1:\n+                            case 2:\n+                            case 4:\n+                                Assert.assertEquals(false, event.getData(1));\n+                                break;\n+                            case 3:\n+                                Assert.assertEquals(true, event.getData(1));\n+                                break;\n+                            default:\n+                                Assert.fail(\"Received more than expected number of events. Expected maximum : 4,\" +\n+                                        \"Received : \" + count.get());\n+                        }\n+                    }\n+                }\n+                eventArrived = true;\n+            }\n+\n+        });\n+\n+        InputHandler inputHandler = executionPlanRuntime.getInputHandler(\"RequestStream\");\n+        executionPlanRuntime.start();\n+        inputHandler.send(new Object[]{\"message123\", true, \"message123:1234\"});\n+        inputHandler.send(new Object[]{\"message123\", true, \"message123:1234\"});\n+        inputHandler.send(new Object[]{\"message123\", true, \"message123:1234\"});\n+        inputHandler.send(new Object[]{\"message456\", true, \"message456:1234\"});\n+        Assert.assertEquals(4, inEventCount);\n+        Assert.assertTrue(eventArrived);\n+        executionPlanRuntime.shutdown();\n+\n+    }\n+\n+\n+    @Test\n+    public void throttleTimeLengthWindowTest2() throws InterruptedException {\n+\n+        SiddhiManager siddhiManager = new SiddhiManager();\n+\n+        String requestStream = \"\" +\n+                \"define stream RequestStream (messageID string, isEligible bool, throttleKey string);\";\n+        String query = \"\" +\n+                \"@info(name = 'query1') \" +\n+                \"from RequestStream#throttler:timeLength(5 sec,0, 3) \" +\n+                \"select throttleKey, isThrottled, expiryTimeStamp group by throttleKey \" +\n+                \"insert all events into outputStream ;\";\n+\n+        ExecutionPlanRuntime executionPlanRuntime = siddhiManager.createExecutionPlanRuntime(requestStream + query);\n+\n+        executionPlanRuntime.addCallback(\"query1\", new QueryCallback() {\n+            @Override\n+            public void receive(long timeStamp, Event[] inEvents, Event[] removeEvents) {\n+                EventPrinter.print(timeStamp, inEvents, removeEvents);\n+                if (inEvents != null) {\n+                    inEventCount = inEventCount + inEvents.length;\n+                    for (Event event : inEvents) {\n+                        switch (count.incrementAndGet()) {\n+                            case 1:\n+                            case 2:\n+                            case 3:\n+                            case 5:\n+                                Assert.assertEquals(false, event.getData(1));\n+                                break;\n+                            case 4:\n+                                Assert.assertEquals(true, event.getData(1));\n+                                break;\n+                            default:\n+                                Assert.fail(\"Received more than expected number of events. Expected maximum : 4,\" +\n+                                        \"Received : \" + count.get());\n+                        }\n+                    }\n+                }\n+                eventArrived = true;\n+            }\n+\n+        });\n+\n+        InputHandler inputHandler = executionPlanRuntime.getInputHandler(\"RequestStream\");\n+        executionPlanRuntime.start();\n+        inputHandler.send(new Object[]{\"message123\", true, \"message123:1234\"});\n+        inputHandler.send(new Object[]{\"message123\", true, \"message123:1234\"});\n+        inputHandler.send(new Object[]{\"message123\", true, \"message123:1234\"});\n+        inputHandler.send(new Object[]{\"message123\", true, \"message123:1234\"});\n+        Thread.sleep(6000);\n+        inputHandler.send(new Object[]{\"message123\", true, \"message123:1234\"});\n+        Thread.sleep(1000);\n+        Assert.assertEquals(5, inEventCount);\n+        Assert.assertTrue(eventArrived);\n+        executionPlanRuntime.shutdown();\n+\n+    }\n+\n+}"
  }
]
