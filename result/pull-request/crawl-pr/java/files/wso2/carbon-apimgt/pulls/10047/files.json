[
  {
    "sha": "2ae69568e7bb0844d9dfbcf0d16d9d071d6a1b9c",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -2712,4 +2712,9 @@ private ConfigParameters() {\n         public static final String EXTENSION_TYPE = \"Type\";\n         public static final String EXTENSION_LISTENER_CLASS_NAME = \"ClassName\";\n     }\n+\n+    public static class GatewayArtifactConstants {\n+        public static final String DEPLOYMENT_DESCRIPTOR_FILE = \"deployments\";\n+        public static final String DEPLOYMENT_DESCRIPTOR_FILE_TYPE = \"deployments\";\n+    }\n }"
  },
  {
    "sha": "f68dc4de8a65031eb4a38f21bdc9d2acb60c2380",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -9606,6 +9606,7 @@ public void deployAPIRevision(String apiId, String apiRevisionId,\n         APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n         API api = getAPIbyUUID(apiId, apiRevision);\n         Set<String> environmentsToAdd = new HashSet<>();\n+        Map<String, String> gatewayVhosts = new HashMap<>();\n         Set<APIRevisionDeployment> environmentsToRemove = new HashSet<>();\n         for (APIRevisionDeployment apiRevisionDeployment : apiRevisionDeployments) {\n             for (APIRevisionDeployment currentapiRevisionDeployment : currentApiRevisionDeploymentList) {\n@@ -9615,13 +9616,15 @@ public void deployAPIRevision(String apiId, String apiRevisionId,\n                 }\n             }\n             environmentsToAdd.add(apiRevisionDeployment.getDeployment());\n+            gatewayVhosts.put(apiRevisionDeployment.getDeployment(), apiRevisionDeployment.getVhost());\n         }\n         if (environmentsToRemove.size() > 0) {\n             apiMgtDAO.removeAPIRevisionDeployment(apiId, environmentsToRemove);\n             removeFromGateway(api, environmentsToRemove, environmentsToAdd);\n         }\n         GatewayArtifactsMgtDAO.getInstance()\n-                .addAndRemovePublishedGatewayLabels(apiId, apiRevisionId, environmentsToAdd, environmentsToRemove);\n+                .addAndRemovePublishedGatewayLabels(apiId, apiRevisionId, environmentsToAdd, gatewayVhosts,\n+                        environmentsToRemove);\n         apiMgtDAO.addAPIRevisionDeployment(apiRevisionId, apiRevisionDeployments);\n         if (environmentsToAdd.size() > 0) {\n             gatewayManager.deployToGateway(api, tenantDomain, environmentsToAdd);\n@@ -9863,6 +9866,7 @@ public void deployAPIProductRevision(String apiProductId, String apiRevisionId,\n                 apiMgtDAO.getAPIRevisionDeploymentsByApiUUID(apiProductId);\n         APIGatewayManager gatewayManager = APIGatewayManager.getInstance();\n         Set<String> environmentsToAdd = new HashSet<>();\n+        Map<String, String> gatewayVhosts = new HashMap<>();\n         Set<APIRevisionDeployment> environmentsToRemove = new HashSet<>();\n         for (APIRevisionDeployment apiRevisionDeployment : apiRevisionDeployments) {\n             for (APIRevisionDeployment currentapiRevisionDeployment : currentApiRevisionDeploymentList) {\n@@ -9872,13 +9876,15 @@ public void deployAPIProductRevision(String apiProductId, String apiRevisionId,\n                 }\n             }\n             environmentsToAdd.add(apiRevisionDeployment.getDeployment());\n+            gatewayVhosts.put(apiRevisionDeployment.getDeployment(), apiRevisionDeployment.getVhost());\n         }\n         if (environmentsToRemove.size() > 0) {\n             apiMgtDAO.removeAPIRevisionDeployment(apiProductId,environmentsToRemove);\n             removeFromGateway(product, tenantDomain, environmentsToRemove, environmentsToAdd);\n         }\n         GatewayArtifactsMgtDAO.getInstance()\n-                .addAndRemovePublishedGatewayLabels(apiProductId, apiRevisionId, environmentsToAdd, environmentsToRemove);\n+                .addAndRemovePublishedGatewayLabels(apiProductId, apiRevisionId, environmentsToAdd, gatewayVhosts,\n+                        environmentsToRemove);\n         apiMgtDAO.addAPIRevisionDeployment(apiRevisionId, apiRevisionDeployments);\n         if (environmentsToAdd.size() > 0) {\n             gatewayManager.deployToGateway(product, tenantDomain, environmentsToAdd);"
  },
  {
    "sha": "eb0519b749349dca3262a5717c0619c18fc714a3",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java",
    "status": "modified",
    "additions": 7,
    "deletions": 26,
    "changes": 33,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -112,6 +112,7 @@\n import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n import org.wso2.carbon.apimgt.impl.utils.ApplicationUtils;\n import org.wso2.carbon.apimgt.impl.utils.RemoteUserManagerClient;\n+import org.wso2.carbon.apimgt.impl.utils.VHostUtils;\n import org.wso2.carbon.apimgt.impl.workflow.WorkflowConstants;\n import org.wso2.carbon.apimgt.impl.workflow.WorkflowExecutorFactory;\n import org.wso2.carbon.apimgt.impl.workflow.WorkflowStatus;\n@@ -15956,7 +15957,7 @@ public String getEarliestRevision(String apiUUID) throws APIManagementException\n                     if (!StringUtils.isEmpty(environmentName)) {\n                         apiRevisionDeployment.setDeployment(environmentName);\n                         String vhost = rs.getString(\"VHOST\");\n-                        apiRevisionDeployment.setVhost(getResolvedVhost(environmentName, vhost));\n+                        apiRevisionDeployment.setVhost(VHostUtils.resolveIfNullToDefaultVhost(environmentName, vhost));\n                         //apiRevisionDeployment.setRevisionUUID(rs.getString(8));\n                         apiRevisionDeployment.setDisplayOnDevportal(rs.getBoolean(\"DISPLAY_ON_DEVPORTAL\"));\n                         apiRevisionDeployment.setDeployedTime(rs.getString(\"DEPLOYED_TIME\"));\n@@ -16007,7 +16008,6 @@ public APIRevision checkAPIUUIDIsARevisionUUID(String apiUUID) throws APIManagem\n      */\n     public void addAPIRevisionDeployment(String apiRevisionId, List<APIRevisionDeployment> apiRevisionDeployments)\n             throws APIManagementException {\n-        Map<String, org.wso2.carbon.apimgt.impl.dto.Environment> readOnlyEnvs = APIUtil.getReadOnlyEnvironments();\n         try (Connection connection = APIMgtDBUtil.getConnection()) {\n             try {\n                 connection.setAutoCommit(false);\n@@ -16018,13 +16018,8 @@ public void addAPIRevisionDeployment(String apiRevisionId, List<APIRevisionDeplo\n                     String envName = apiRevisionDeployment.getDeployment();\n                     String vhost = apiRevisionDeployment.getVhost();\n                     // set VHost as null, if it is the default vhost of the read only environment\n-                    if (readOnlyEnvs.get(envName) != null\n-                            && StringUtils.equalsIgnoreCase(vhost,\n-                            APIUtil.getDefaultVhostOfReadOnlyEnvironment(envName).getHost())) {\n-                        vhost = null;\n-                    }\n                     statement.setString(1, apiRevisionDeployment.getDeployment());\n-                    statement.setString(2, vhost);\n+                    statement.setString(2, VHostUtils.resolveIfDefaultVhostToNull(envName, vhost));\n                     statement.setString(3, apiRevisionId);\n                     statement.setBoolean(4, apiRevisionDeployment.isDisplayOnDevportal());\n                     statement.addBatch();\n@@ -16060,7 +16055,7 @@ public APIRevisionDeployment getAPIRevisionDeploymentByName(String name) throws\n                     String environmentName = rs.getString(\"NAME\");\n                     String vhost = rs.getString(\"VHOST\");\n                     apiRevisionDeployment.setDeployment(environmentName);\n-                    apiRevisionDeployment.setVhost(getResolvedVhost(environmentName, vhost));\n+                    apiRevisionDeployment.setVhost(VHostUtils.resolveIfNullToDefaultVhost(environmentName, vhost));\n                     apiRevisionDeployment.setRevisionUUID(rs.getString(\"REVISION_UUID\"));\n                     apiRevisionDeployment.setDisplayOnDevportal(rs.getBoolean(\"DISPLAY_ON_DEVPORTAL\"));\n                     apiRevisionDeployment.setDeployedTime(rs.getString(\"DEPLOYED_TIME\"));\n@@ -16091,7 +16086,7 @@ public APIRevisionDeployment getAPIRevisionDeploymentByName(String name) throws\n                     String environmentName = rs.getString(\"NAME\");\n                     String vhost = rs.getString(\"VHOST\");\n                     apiRevisionDeployment.setDeployment(environmentName);\n-                    apiRevisionDeployment.setVhost(getResolvedVhost(environmentName, vhost));\n+                    apiRevisionDeployment.setVhost(VHostUtils.resolveIfNullToDefaultVhost(environmentName, vhost));\n                     apiRevisionDeployment.setRevisionUUID(rs.getString(\"REVISION_UUID\"));\n                     apiRevisionDeployment.setDisplayOnDevportal(rs.getBoolean(\"DISPLAY_ON_DEVPORTAL\"));\n                     apiRevisionDeployment.setDeployedTime(rs.getString(\"DEPLOYED_TIME\"));\n@@ -16124,7 +16119,7 @@ public APIRevisionDeployment getAPIRevisionDeploymentByName(String name) throws\n                     String environmentName = rs.getString(\"NAME\");\n                     String vhost = rs.getString(\"VHOST\");\n                     apiRevisionDeployment.setDeployment(environmentName);\n-                    apiRevisionDeployment.setVhost(getResolvedVhost(environmentName, vhost));\n+                    apiRevisionDeployment.setVhost(VHostUtils.resolveIfNullToDefaultVhost(environmentName, vhost));\n                     apiRevisionDeployment.setRevisionUUID(rs.getString(\"REVISION_UUID\"));\n                     apiRevisionDeployment.setDisplayOnDevportal(rs.getBoolean(\"DISPLAY_ON_DEVPORTAL\"));\n                     apiRevisionDeployment.setDeployedTime(rs.getString(\"DEPLOYED_TIME\"));\n@@ -16180,7 +16175,7 @@ private boolean isDeploymentAvailableByAPIUUID(Connection connection, String api\n                     String environmentName = rs.getString(\"NAME\");\n                     String vhost = rs.getString(\"VHOST\");\n                     apiRevisionDeployment.setDeployment(environmentName);\n-                    apiRevisionDeployment.setVhost(getResolvedVhost(environmentName, vhost));\n+                    apiRevisionDeployment.setVhost(VHostUtils.resolveIfNullToDefaultVhost(environmentName, vhost));\n                     apiRevisionDeployment.setRevisionUUID(rs.getString(\"REVISION_UUID\"));\n                     apiRevisionDeployment.setDisplayOnDevportal(rs.getBoolean(\"DISPLAY_ON_DEVPORTAL\"));\n                     apiRevisionDeployment.setDeployedTime(rs.getString(\"DEPLOYED_TIME\"));\n@@ -17012,18 +17007,4 @@ public void updateAPIServiceMapping(int apiId, String serviceKey, String md5, Co\n             statement.executeUpdate();\n         }\n     }\n-\n-    /**\n-     *\n-     * @param environmentName Environment name\n-     * @param vhost Host of the vhost\n-     * @return Resolved vhost\n-     * @throws APIManagementException if failed to find the read only environment\n-     */\n-    private String getResolvedVhost(String environmentName, String vhost) throws APIManagementException {\n-        if (StringUtils.isEmpty(vhost)) {\n-            return APIUtil.getDefaultVhostOfReadOnlyEnvironment(environmentName).getHost();\n-        }\n-        return vhost;\n-    }\n }"
  },
  {
    "sha": "6b7dc1e6627309969b555997595e7e3d0054561b",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java",
    "status": "modified",
    "additions": 32,
    "deletions": 10,
    "changes": 42,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/GatewayArtifactsMgtDAO.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -10,6 +10,7 @@\n import org.wso2.carbon.apimgt.impl.dto.APIRuntimeArtifactDto;\n import org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil;\n import org.wso2.carbon.apimgt.impl.utils.GatewayArtifactsMgtDBUtil;\n+import org.wso2.carbon.apimgt.impl.utils.VHostUtils;\n \n import java.io.*;\n import java.sql.Connection;\n@@ -19,6 +20,7 @@\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n public class GatewayArtifactsMgtDAO {\n@@ -206,6 +208,7 @@ private void updateGatewayPublishedAPIArtifacts(Connection connection, String ap\n     }\n \n     public void addAndRemovePublishedGatewayLabels(String apiId, String revision, Set<String> gatewayLabelsToDeploy,\n+                                                   Map<String, String> gatewayVhosts,\n                                                    Set<APIRevisionDeployment> gatewayLabelsToRemove)\n             throws APIManagementException {\n \n@@ -218,16 +221,18 @@ public void addAndRemovePublishedGatewayLabels(String apiId, String revision, Se\n                         statement.setString(1, apiId);\n                         statement.setString(2, apiRevisionDeployment.getRevisionUUID());\n                         statement.setString(3, apiRevisionDeployment.getDeployment());\n+                        // no need to set vhost when deleting API Deployment, it is unique for revision + label\n                         statement.addBatch();\n                     }\n                     statement.executeBatch();\n                 }\n                 try {\n                     if (gatewayLabelsToDeploy.size() > 0) {\n-                        addPublishedGatewayLabels(connection, apiId, revision, gatewayLabelsToDeploy);\n+                        addPublishedGatewayLabels(connection, apiId, revision, gatewayLabelsToDeploy, gatewayVhosts);\n                     }\n                     connection.commit();\n-                } catch (SQLException e) {\n+                } catch (SQLException | APIManagementException e) {\n+                    // APIManagementException if failed to revolve default vhost and set null to DB\n                     connection.rollback();\n                     throw new APIManagementException(\"Failed to attach labels\", e);\n                 }\n@@ -238,15 +243,18 @@ public void addAndRemovePublishedGatewayLabels(String apiId, String revision, Se\n     }\n \n     private void addPublishedGatewayLabels(Connection connection, String apiUUID, String revisionId,\n-                                           Set<String> gateways)\n-            throws SQLException {\n+                                           Set<String> gateways, Map<String, String> gatewayVhosts)\n+            throws SQLException, APIManagementException {\n \n         String addQuery = SQLConstants.ADD_GW_PUBLISHED_LABELS;\n         try (PreparedStatement preparedStatement = connection.prepareStatement(addQuery)) {\n             for (String gatewayLabel : gateways) {\n                 preparedStatement.setString(1, apiUUID);\n                 preparedStatement.setString(2, revisionId);\n                 preparedStatement.setString(3, gatewayLabel);\n+                String resolvedVhost = VHostUtils\n+                        .resolveIfDefaultVhostToNull(gatewayLabel, gatewayVhosts.get(gatewayLabel));\n+                preparedStatement.setString(4, resolvedVhost);\n                 preparedStatement.addBatch();\n             }\n             preparedStatement.executeBatch();\n@@ -316,7 +324,11 @@ public void deleteGatewayArtifacts(String apiId) throws APIManagementException {\n                     APIRuntimeArtifactDto apiRuntimeArtifactDto = new APIRuntimeArtifactDto();\n                     apiRuntimeArtifactDto.setTenantDomain(resultSet.getString(\"TENANT_DOMAIN\"));\n                     apiRuntimeArtifactDto.setApiId(apiId);\n-                    apiRuntimeArtifactDto.setLabel(resultSet.getString(\"LABEL\"));\n+                    String label = resultSet.getString(\"LABEL\");\n+                    String resolvedVhost = VHostUtils.resolveIfNullToDefaultVhost(label,\n+                            resultSet.getString(\"VHOST\"));\n+                    apiRuntimeArtifactDto.setLabel(label);\n+                    apiRuntimeArtifactDto.setVhost(resolvedVhost);\n                     apiRuntimeArtifactDto.setName(resultSet.getString(\"API_NAME\"));\n                     apiRuntimeArtifactDto.setVersion(resultSet.getString(\"API_VERSION\"));\n                     apiRuntimeArtifactDto.setProvider(resultSet.getString(\"API_PROVIDER\"));\n@@ -361,7 +373,11 @@ public void deleteGatewayArtifacts(String apiId) throws APIManagementException {\n                     APIRuntimeArtifactDto apiRuntimeArtifactDto = new APIRuntimeArtifactDto();\n                     apiRuntimeArtifactDto.setTenantDomain(resultSet.getString(\"TENANT_DOMAIN\"));\n                     apiRuntimeArtifactDto.setApiId(resultSet.getString(\"API_ID\"));\n-                    apiRuntimeArtifactDto.setLabel(resultSet.getString(\"LABEL\"));\n+                    String label = resultSet.getString(\"LABEL\");\n+                    String resolvedVhost = VHostUtils.resolveIfNullToDefaultVhost(label,\n+                            resultSet.getString(\"VHOST\"));\n+                    apiRuntimeArtifactDto.setLabel(label);\n+                    apiRuntimeArtifactDto.setVhost(resolvedVhost);\n                     apiRuntimeArtifactDto.setName(resultSet.getString(\"API_NAME\"));\n                     apiRuntimeArtifactDto.setVersion(resultSet.getString(\"API_VERSION\"));\n                     apiRuntimeArtifactDto.setProvider(resultSet.getString(\"API_PROVIDER\"));\n@@ -400,7 +416,11 @@ public void deleteGatewayArtifacts(String apiId) throws APIManagementException {\n                     APIRuntimeArtifactDto apiRuntimeArtifactDto = new APIRuntimeArtifactDto();\n                     apiRuntimeArtifactDto.setTenantDomain(resultSet.getString(\"TENANT_DOMAIN\"));\n                     apiRuntimeArtifactDto.setApiId(resultSet.getString(\"API_ID\"));\n-                    apiRuntimeArtifactDto.setLabel(resultSet.getString(\"LABEL\"));\n+                    String label = resultSet.getString(\"LABEL\");\n+                    String resolvedVhost = VHostUtils.resolveIfNullToDefaultVhost(label,\n+                            resultSet.getString(\"VHOST\"));\n+                    apiRuntimeArtifactDto.setLabel(label);\n+                    apiRuntimeArtifactDto.setVhost(resolvedVhost);\n                     apiRuntimeArtifactDto.setName(resultSet.getString(\"API_NAME\"));\n                     apiRuntimeArtifactDto.setVersion(resultSet.getString(\"API_VERSION\"));\n                     apiRuntimeArtifactDto.setProvider(resultSet.getString(\"API_PROVIDER\"));\n@@ -453,16 +473,18 @@ private void removePublishedGatewayLabels(Connection connection, String apiId, S\n         }\n     }\n \n-    public void addAndRemovePublishedGatewayLabels(String apiId, String revision, Set<String> gateways)\n+    public void addAndRemovePublishedGatewayLabels(String apiId, String revision, Set<String> gateways,\n+                                                   Map<String, String> gatewayVhosts)\n             throws APIManagementException {\n \n         try (Connection connection = GatewayArtifactsMgtDBUtil.getArtifactSynchronizerConnection()) {\n             try {\n                 connection.setAutoCommit(false);\n                 removePublishedGatewayLabels(connection, apiId, revision);\n-                addPublishedGatewayLabels(connection, apiId, revision, gateways);\n+                addPublishedGatewayLabels(connection, apiId, revision, gateways, gatewayVhosts);\n                 connection.commit();\n-            } catch (SQLException e) {\n+            } catch (SQLException | APIManagementException e) {\n+                // APIManagementException if failed to revolve default vhost and set null to DB\n                 connection.rollback();\n                 throw e;\n             }"
  },
  {
    "sha": "c4901590ac341b2e0683e298b7cdd202474d4c12",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -2718,7 +2718,7 @@\n     public static final String CHECK_ARTIFACT_EXISTS = \"SELECT 1 FROM AM_GW_API_ARTIFACTS\" +\n             \" WHERE API_ID = ? AND REVISION_ID = ?\";\n     public static final String ADD_GW_PUBLISHED_LABELS = \"INSERT INTO AM_GW_API_DEPLOYMENTS (API_ID,REVISION_ID,\" +\n-            \"LABEL) VALUES (?,?,?)\";\n+            \"LABEL,VHOST) VALUES (?,?,?,?)\";\n     public static final String DELETE_GW_PUBLISHED_LABELS = \"DELETE FROM AM_GW_API_DEPLOYMENTS WHERE API_ID = ? AND \" +\n             \"REVISION_ID = ?\";\n     public static final String DELETE_GW_PUBLISHED_LABELS_BY_API_ID_REVISION_ID_DEPLOYMENT = \"DELETE FROM \" +\n@@ -2738,7 +2738,7 @@\n                     \".API_PROVIDER AS API_PROVIDER,\" +\n                     \"AM_GW_PUBLISHED_API_DETAILS.API_NAME AS API_NAME,AM_GW_PUBLISHED_API_DETAILS.API_VERSION AS API_VERSION,\" +\n                     \"AM_GW_PUBLISHED_API_DETAILS.API_TYPE AS API_TYPE,AM_GW_API_ARTIFACTS.ARTIFACT AS ARTIFACT,\" +\n-                    \"AM_GW_API_DEPLOYMENTS.LABEL AS LABEL \" +\n+                    \"AM_GW_API_DEPLOYMENTS.LABEL AS LABEL,AM_GW_API_DEPLOYMENTS.VHOST AS VHOST \" +\n                     \"FROM \" +\n                     \"AM_GW_PUBLISHED_API_DETAILS,AM_GW_API_ARTIFACTS,AM_GW_API_DEPLOYMENTS WHERE \" +\n                     \"AM_GW_API_DEPLOYMENTS.API_ID= ? AND AM_GW_API_DEPLOYMENTS.LABEL IN (_GATEWAY_LABELS_) AND \" +\n@@ -2753,7 +2753,7 @@\n                     \".API_PROVIDER AS API_PROVIDER,\" +\n                     \"AM_GW_PUBLISHED_API_DETAILS.API_NAME AS API_NAME,AM_GW_PUBLISHED_API_DETAILS.API_VERSION AS API_VERSION,\" +\n                     \"AM_GW_PUBLISHED_API_DETAILS.API_TYPE AS API_TYPE,AM_GW_API_ARTIFACTS.ARTIFACT AS ARTIFACT,\" +\n-                    \"AM_GW_API_DEPLOYMENTS.LABEL AS LABEL \" +\n+                    \"AM_GW_API_DEPLOYMENTS.LABEL AS LABEL,AM_GW_API_DEPLOYMENTS.VHOST AS VHOST \" +\n                     \"FROM \" +\n                     \"AM_GW_PUBLISHED_API_DETAILS,AM_GW_API_ARTIFACTS,AM_GW_API_DEPLOYMENTS WHERE \" +\n                     \"AM_GW_API_DEPLOYMENTS.LABEL IN (_GATEWAY_LABELS_) AND AM_GW_PUBLISHED_API_DETAILS.TENANT_DOMAIN \" +\n@@ -2767,7 +2767,7 @@\n                     \"API_PROVIDER,AM_GW_PUBLISHED_API_DETAILS.API_NAME AS API_NAME,AM_GW_PUBLISHED_API_DETAILS.API_VERSION AS \" +\n                     \"API_VERSION,\" +\n                     \"AM_GW_PUBLISHED_API_DETAILS.API_TYPE AS API_TYPE,AM_GW_API_ARTIFACTS.ARTIFACT AS ARTIFACT,\" +\n-                    \"AM_GW_API_DEPLOYMENTS.LABEL AS LABEL \" +\n+                    \"AM_GW_API_DEPLOYMENTS.LABEL AS LABEL,AM_GW_API_DEPLOYMENTS.VHOST AS VHOST \" +\n                     \"FROM \" +\n                     \"AM_GW_PUBLISHED_API_DETAILS,AM_GW_API_ARTIFACTS,AM_GW_API_DEPLOYMENTS WHERE \" +\n                     \"AM_GW_PUBLISHED_API_DETAILS.API_ID=AM_GW_API_DEPLOYMENTS.API_ID AND \" +"
  },
  {
    "sha": "b532ce8a42c1d29c2c5927087d4d9a0cc08c333a",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/APIRuntimeArtifactDto.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/APIRuntimeArtifactDto.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/APIRuntimeArtifactDto.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/APIRuntimeArtifactDto.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -8,6 +8,7 @@\n     private String apiId;\n     private String revision;\n     private String label;\n+    private String vhost;\n     private String type;\n \n     public String getType() {\n@@ -89,4 +90,12 @@ public void setLabel(String label) {\n \n         this.label = label;\n     }\n+\n+    public String getVhost() {\n+        return vhost;\n+    }\n+\n+    public void setVhost(String vhost) {\n+        this.vhost = vhost;\n+    }\n }"
  },
  {
    "sha": "db55c703c5f4cbee41c313fdccb032e67738a389",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/MicroGatewayArtifactGenerator.java",
    "status": "modified",
    "additions": 34,
    "deletions": 7,
    "changes": 41,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/MicroGatewayArtifactGenerator.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/MicroGatewayArtifactGenerator.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/MicroGatewayArtifactGenerator.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -24,19 +24,22 @@\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.dto.APIRuntimeArtifactDto;\n import org.wso2.carbon.apimgt.impl.dto.RuntimeArtifactDto;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.dto.ApiProjectDto;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.dto.DeploymentDescriptorDto;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.dto.LabelDto;\n import org.wso2.carbon.apimgt.impl.importexport.APIImportExportException;\n+import org.wso2.carbon.apimgt.impl.importexport.ExportFormat;\n import org.wso2.carbon.apimgt.impl.importexport.utils.CommonUtil;\n \n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n-import java.util.UUID;\n+import java.util.Map;\n \n @Component(\n         name = \"microgateway.artifact.generator.service\",\n@@ -50,16 +53,40 @@ public RuntimeArtifactDto generateGatewayArtifact(List<APIRuntimeArtifactDto> ap\n             throws APIManagementException {\n \n         try {\n+            DeploymentDescriptorDto descriptorDto = new DeploymentDescriptorDto();\n+            Map<String, ApiProjectDto> deploymentsMap = new HashMap<>();\n+\n+            // \"tempDirectory\" is the root artifact directory\n             File tempDirectory = CommonUtil.createTempDirectory(null);\n             for (APIRuntimeArtifactDto apiRuntimeArtifactDto : apiRuntimeArtifactDtoList) {\n                 if (apiRuntimeArtifactDto.isFile()) {\n                     InputStream artifact = (InputStream) apiRuntimeArtifactDto.getArtifact();\n-                    Path path = Paths.get(tempDirectory.getAbsolutePath(),\n-                            apiRuntimeArtifactDto.getApiId().concat(\"-\").concat(apiRuntimeArtifactDto.getRevision())\n-                                    .concat(APIConstants.ZIP_FILE_EXTENSION));\n+                    String fileName = apiRuntimeArtifactDto.getApiId().concat(\"-\").concat(apiRuntimeArtifactDto.getRevision())\n+                            .concat(APIConstants.ZIP_FILE_EXTENSION);\n+                    Path path = Paths.get(tempDirectory.getAbsolutePath(), fileName);\n                     FileUtils.copyInputStreamToFile(artifact, path.toFile());\n+\n+                    ApiProjectDto apiProjectDto = deploymentsMap.get(fileName);\n+                    if (apiProjectDto == null) {\n+                        apiProjectDto = new ApiProjectDto();\n+                        deploymentsMap.put(fileName, apiProjectDto);\n+                        apiProjectDto.setApiFile(fileName);\n+                        apiProjectDto.setLabels(new HashSet<>());\n+                    }\n+                    // label is unique for a revision in a deployment\n+                    // create new label\n+                    LabelDto label = new LabelDto();\n+                    label.setName(apiRuntimeArtifactDto.getLabel());\n+                    label.setVhost(apiRuntimeArtifactDto.getVhost());\n+                    apiProjectDto.getLabels().add(label); // ignored if the name of the label is same\n                 }\n             }\n+            descriptorDto.setDeployments(new HashSet<>(deploymentsMap.values()));\n+            String descriptorFile = Paths.get(tempDirectory.getAbsolutePath(),\n+                    APIConstants.GatewayArtifactConstants.DEPLOYMENT_DESCRIPTOR_FILE).toString();\n+            CommonUtil.writeDtoToFile(descriptorFile, ExportFormat.JSON,\n+                    APIConstants.GatewayArtifactConstants.DEPLOYMENT_DESCRIPTOR_FILE_TYPE, descriptorDto);\n+\n             CommonUtil.archiveDirectory(tempDirectory.getAbsolutePath());\n             FileUtils.deleteQuietly(tempDirectory);\n             RuntimeArtifactDto runtimeArtifactDto = new RuntimeArtifactDto();"
  },
  {
    "sha": "f6a5291217146b86869aca0a29135f6c0b588ede",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/ApiProjectDto.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/ApiProjectDto.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/ApiProjectDto.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/ApiProjectDto.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.dto;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class ApiProjectDto {\n+    private String apiFile;\n+    private Set<LabelDto> labels = new HashSet<>();\n+\n+    public String getApiFile() {\n+        return apiFile;\n+    }\n+\n+    public void setApiFile(String apiFile) {\n+        this.apiFile = apiFile;\n+    }\n+\n+    public Set<LabelDto> getLabels() {\n+        return labels;\n+    }\n+\n+    public void setLabels(Set<LabelDto> labels) {\n+        this.labels = labels;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof ApiProjectDto)) {\n+            return false;\n+        }\n+\n+        ApiProjectDto apiProjectDto = (ApiProjectDto) obj;\n+        // check only file name\n+        return StringUtils.equals(this.apiFile, apiProjectDto.apiFile);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return (apiFile == null ? 0 : apiFile.hashCode());\n+    }\n+}"
  },
  {
    "sha": "5c7d42e3c28afbaa01aa090cbd0bd92e0cd0a75a",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/DeploymentDescriptorDto.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/DeploymentDescriptorDto.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/DeploymentDescriptorDto.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/DeploymentDescriptorDto.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.dto;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentDescriptorDto {\n+    private Set<ApiProjectDto> deployments = new HashSet<>();\n+\n+    public Set<ApiProjectDto> getDeployments() {\n+        return deployments;\n+    }\n+\n+    public void setDeployments(Set<ApiProjectDto> deployments) {\n+        this.deployments = deployments;\n+    }\n+}"
  },
  {
    "sha": "a545d0fc237d3c1d05609a2adf777ab71be8f0e6",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/LabelDto.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/LabelDto.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/LabelDto.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/dto/LabelDto.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.dto;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class LabelDto {\n+    private String name;\n+    private String vhost;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getVhost() {\n+        return vhost;\n+    }\n+\n+    public void setVhost(String vhost) {\n+        this.vhost = vhost;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+\n+        if (!(obj instanceof LabelDto)) {\n+            return false;\n+        }\n+\n+        LabelDto labelDto = (LabelDto) obj;\n+        // check only name (environment name or label name), no need to consider vhost\n+        return StringUtils.equals(this.name, labelDto.name);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return (name == null ? 0 : name.hashCode());\n+    }\n+}"
  },
  {
    "sha": "fd317c34a8f5263733fb330d59adcd712495a8ba",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/VHostUtils.java",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/VHostUtils.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/VHostUtils.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/VHostUtils.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -19,6 +19,7 @@\n package org.wso2.carbon.apimgt.impl.utils;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n import org.wso2.carbon.apimgt.api.model.VHost;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.dto.Environment;\n@@ -52,4 +53,37 @@ public static VHost getVhostFromEnvironment(Environment environment, String host\n                 .findAny()\n                 .orElse(defaultVhost);\n     }\n+\n+    /**\n+     * Resolve vhost to default vhost if the given vhost is null\n+     *\n+     * @param environmentName Environment name\n+     * @param vhost Host of the vhost\n+     * @return Resolved vhost\n+     * @throws APIManagementException if failed to find the read only environment\n+     */\n+    public static String resolveIfNullToDefaultVhost(String environmentName, String vhost) throws APIManagementException {\n+        if (StringUtils.isEmpty(vhost)) {\n+            return APIUtil.getDefaultVhostOfReadOnlyEnvironment(environmentName).getHost();\n+        }\n+        return vhost;\n+    }\n+\n+    /**\n+     * Resolve vhost to null if the given vhost is the default (first) vhost of read only environment\n+     *\n+     * @param environmentName Environment name\n+     * @param vhost Host of the vhost\n+     * @return Resolved vhost\n+     * @throws APIManagementException if failed to find the read only environment\n+     */\n+    public static String resolveIfDefaultVhostToNull(String environmentName, String vhost) throws APIManagementException {\n+        // set VHost as null, if it is the default vhost of the read only environment\n+        if (APIUtil.getReadOnlyEnvironments().get(environmentName) != null\n+                && StringUtils.equalsIgnoreCase(vhost,\n+                APIUtil.getDefaultVhostOfReadOnlyEnvironment(environmentName).getHost())) {\n+            return null;\n+        }\n+        return vhost;\n+    }\n }"
  },
  {
    "sha": "6824921536ec6a57f2f158b129af66932816cfca",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/dao/test/GatewayArtifactsMgtDAOTest.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -53,7 +53,9 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URL;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.UUID;\n \n @RunWith(PowerMockRunner.class)\n@@ -134,7 +136,10 @@ public void testAddGatewayAPIArtifactAndMetaData() throws APIManagementException\n                 APIConstants.HTTP_PROTOCOL, file);\n         String gatewayAPIId = gatewayArtifactsMgtDAO.getGatewayAPIId(name, version, \"carbon.super\");\n         Assert.assertEquals(gatewayAPIId, uuid);\n-        gatewayArtifactsMgtDAO.addAndRemovePublishedGatewayLabels(uuid, revision, Collections.asSet(\"label1\"));\n+        Map<String, String> gatewayVhosts = new HashMap<>();\n+        gatewayVhosts.put(\"label1\", \"dev.wso2.com\");\n+        gatewayArtifactsMgtDAO.addAndRemovePublishedGatewayLabels(uuid, revision, Collections.asSet(\"label1\"),\n+                gatewayVhosts);\n         List<APIRuntimeArtifactDto> artifacts = gatewayArtifactsMgtDAO.retrieveGatewayArtifactsByAPIIDAndLabel(uuid,\n                 new String[]{\"label1\"}, \"carbon.super\");\n         Assert.assertEquals(artifacts.size(), 1);\n@@ -143,8 +148,10 @@ public void testAddGatewayAPIArtifactAndMetaData() throws APIManagementException\n         APIRevisionDeployment apiRevisionDeployment = new APIRevisionDeployment();\n         apiRevisionDeployment.setRevisionUUID(revision);\n         apiRevisionDeployment.setDeployment(\"label1\");\n+        gatewayVhosts = new HashMap<>();\n+        gatewayVhosts.put(\"label2\", \"prod.wso2.com\");\n         gatewayArtifactsMgtDAO.addAndRemovePublishedGatewayLabels(uuid, revision, Collections.asSet(\"label2\"),\n-                Collections.asSet(apiRevisionDeployment));\n+                gatewayVhosts, Collections.asSet(apiRevisionDeployment));\n         artifacts = gatewayArtifactsMgtDAO.retrieveGatewayArtifactsByAPIIDAndLabel(uuid, new String[]{\"label1\"}, \"carbon.super\");\n         Assert.assertEquals(artifacts.size(), 0);\n         artifacts = gatewayArtifactsMgtDAO.retrieveGatewayArtifactsByAPIIDAndLabel(uuid, new String[]{\"label2\"},"
  },
  {
    "sha": "33672c15abdc775f96302df37e69a4f520b36946",
    "filename": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/impl/RuntimeArtifactsApiServiceImpl.java",
    "status": "modified",
    "additions": 11,
    "deletions": 6,
    "changes": 17,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/impl/RuntimeArtifactsApiServiceImpl.java",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/impl/RuntimeArtifactsApiServiceImpl.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/impl/RuntimeArtifactsApiServiceImpl.java?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -19,11 +19,8 @@\n \n package org.wso2.carbon.apimgt.internal.service.impl;\n \n-import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n-import org.hsqldb.lib.StringUtil;\n import org.wso2.carbon.apimgt.api.APIManagementException;\n-import org.wso2.carbon.apimgt.api.ExceptionCodes;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.dto.RuntimeArtifactDto;\n import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.RuntimeArtifactGeneratorUtil;\n@@ -32,11 +29,12 @@\n import org.wso2.carbon.apimgt.internal.service.utils.SubscriptionValidationDataUtil;\n import org.wso2.carbon.apimgt.rest.api.common.RestApiConstants;\n \n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.StreamingOutput;\n import java.io.File;\n+import java.nio.file.Files;\n import java.util.List;\n \n-import javax.ws.rs.core.Response;\n-\n /**\n  * Runtime Artifact Service implementation.\n  */\n@@ -53,7 +51,14 @@ public Response runtimeArtifactsGet(String xWSO2Tenant, String apiId, String gat\n         if (runtimeArtifactDto != null) {\n             if (runtimeArtifactDto.isFile()) {\n                 File artifact = (File) runtimeArtifactDto.getArtifact();\n-                return Response.ok(artifact).header(RestApiConstants.HEADER_CONTENT_DISPOSITION,\n+                StreamingOutput streamingOutput = (outputStream) -> {\n+                    try {\n+                        Files.copy(artifact.toPath(), outputStream);\n+                    } finally {\n+                        Files.delete(artifact.toPath());\n+                    }\n+                };\n+                return Response.ok(streamingOutput).header(RestApiConstants.HEADER_CONTENT_DISPOSITION,\n                         \"attachment; filename=apis.zip\").header(RestApiConstants.HEADER_CONTENT_TYPE,\n                         APIConstants.APPLICATION_ZIP).build();\n             } else {"
  },
  {
    "sha": "ae412401d7f2938f782beef3f646b21bc6061478",
    "filename": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/db2.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/db2.sql",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/db2.sql",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/db2.sql?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -2744,6 +2744,7 @@ CREATE TABLE IF NOT EXISTS AM_GW_API_DEPLOYMENTS (\n   API_ID VARCHAR(255) NOT NULL,\n   REVISION_ID VARCHAR(255) NOT NULL,\n   LABEL VARCHAR(255) NOT NULL,\n+  VHOST VARCHAR(255) NULL,\n   PRIMARY KEY (REVISION_ID, API_ID,LABEL),\n   FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID) ON UPDATE CASCADE ON DELETE NO ACTION\n )"
  },
  {
    "sha": "57071fcc237aabd1143447d6c37e2adea1e1a73a",
    "filename": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -2022,6 +2022,7 @@ CREATE TABLE IF NOT EXISTS AM_GW_API_DEPLOYMENTS (\n   API_ID VARCHAR(255) NOT NULL,\n   REVISION_ID VARCHAR(255) NOT NULL,\n   LABEL VARCHAR(255) NOT NULL,\n+  VHOST VARCHAR(255) NULL,\n   PRIMARY KEY (REVISION_ID, API_ID,LABEL),\n   FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID) ON UPDATE CASCADE ON DELETE NO ACTION\n );"
  },
  {
    "sha": "ae39b4c081dd8e3b7523db859e32886951f421d6",
    "filename": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mssql.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mssql.sql",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mssql.sql",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mssql.sql?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -2233,6 +2233,7 @@ CREATE TABLE AM_GW_API_DEPLOYMENTS (\n   API_ID VARCHAR(255) NOT NULL,\n   REVISION_ID VARCHAR(255) NOT NULL,\n   LABEL VARCHAR(255) NOT NULL,\n+  VHOST VARCHAR(255) NULL,\n   PRIMARY KEY (REVISION_ID, API_ID,LABEL),\n   FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID) ON UPDATE CASCADE ON DELETE NO ACTION\n ) ;"
  },
  {
    "sha": "bd2aad08eab6397f839a3535d03b1494bd3191e1",
    "filename": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -2059,6 +2059,7 @@ CREATE TABLE IF NOT EXISTS AM_GW_API_DEPLOYMENTS (\n   API_ID VARCHAR(255) NOT NULL,\n   REVISION_ID VARCHAR(255) NOT NULL,\n   LABEL VARCHAR(255) NOT NULL,\n+  VHOST VARCHAR(255) NULL,\n   PRIMARY KEY (REVISION_ID, API_ID,LABEL),\n   FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID) ON UPDATE CASCADE ON DELETE NO ACTION\n ) ENGINE=InnoDB;"
  },
  {
    "sha": "4f9e9ac8013312951138f154b64ad7c9ecb200f5",
    "filename": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql_cluster.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql_cluster.sql",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql_cluster.sql",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql_cluster.sql?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -2150,6 +2150,7 @@ CREATE TABLE IF NOT EXISTS AM_GW_API_DEPLOYMENTS (\n   API_ID VARCHAR(255) NOT NULL,\n   REVISION_ID VARCHAR(255) NOT NULL,\n   LABEL VARCHAR(255) NOT NULL,\n+  VHOST VARCHAR(255) NULL,\n   PRIMARY KEY (REVISION_ID, API_ID,LABEL),\n   FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID) ON UPDATE CASCADE ON DELETE NO ACTION\n ) ENGINE=InnoDB;"
  },
  {
    "sha": "dacd342564b333bd65dc5ce8a11c4b33c567f6be",
    "filename": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -3108,6 +3108,7 @@ CREATE TABLE AM_GW_API_DEPLOYMENTS (\n   API_ID VARCHAR(255) NOT NULL,\n   REVISION_ID VARCHAR(255) NOT NULL,\n   LABEL VARCHAR(255) NOT NULL,\n+  VHOST VARCHAR(255) NULL,\n   PRIMARY KEY (REVISION_ID, API_ID,LABEL),\n   FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID)\n )"
  },
  {
    "sha": "086ee487522c998439863c9e398b2b1005682349",
    "filename": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle_rac.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle_rac.sql",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle_rac.sql",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle_rac.sql?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -3098,6 +3098,7 @@ CREATE TABLE AM_GW_API_DEPLOYMENTS (\n   API_ID VARCHAR(255) NOT NULL,\n   REVISION_ID VARCHAR(255) NOT NULL,\n   LABEL VARCHAR(255) NOT NULL,\n+  VHOST VARCHAR(255) NULL,\n   PRIMARY KEY (REVISION_ID, API_ID,LABEL),\n   FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID) ON UPDATE CASCADE\n )"
  },
  {
    "sha": "320dc45eee226f4c5407e94f243871a74cc7c372",
    "filename": "features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/postgresql.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/carbon-apimgt/blob/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/postgresql.sql",
    "raw_url": "https://github.com/wso2/carbon-apimgt/raw/7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/postgresql.sql",
    "contents_url": "https://api.github.com/repos/wso2/carbon-apimgt/contents/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/postgresql.sql?ref=7cdbdcd67f4f03cbfc3a17f98e14cd4da3d446c6",
    "patch": "@@ -2316,6 +2316,7 @@ CREATE TABLE IF NOT EXISTS AM_GW_API_DEPLOYMENTS (\n   API_ID VARCHAR(255) NOT NULL,\n   REVISION_ID VARCHAR(255) NOT NULL,\n   LABEL VARCHAR(255) NOT NULL,\n+  VHOST VARCHAR(255) NULL,\n   PRIMARY KEY (REVISION_ID, API_ID,LABEL),\n   FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID) ON UPDATE CASCADE ON DELETE NO ACTION\n );"
  }
]
