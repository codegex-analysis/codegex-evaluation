[
  {
    "sha": "fc6aec93556ba47a15c707c5471983e7fdd3b5fc",
    "filename": "components/server-tools/plugins/org.wso2.integrationstudio.carbonserver44microei40/resources/server/deployment.toml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/wso2/integration-studio/blob/69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3/components/server-tools/plugins/org.wso2.integrationstudio.carbonserver44microei40/resources/server/deployment.toml",
    "raw_url": "https://github.com/wso2/integration-studio/raw/69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3/components/server-tools/plugins/org.wso2.integrationstudio.carbonserver44microei40/resources/server/deployment.toml",
    "contents_url": "https://api.github.com/repos/wso2/integration-studio/contents/components/server-tools/plugins/org.wso2.integrationstudio.carbonserver44microei40/resources/server/deployment.toml?ref=69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3",
    "patch": "@@ -110,7 +110,7 @@ heartbeat_interval = 15\n 'synapse.rest.CORSConfig.Access-Control-Allow-Headers' = \"content-type\"\n \n # [[service_catalog]]\n-# apimHost = \"https://localhost:9443\"\n+# apim_host = \"https://localhost:9443\"\n # enable = true\n # username = \"admin\"\n # password = \"admin\""
  },
  {
    "sha": "956f54dd1a081aa65a95a26f23d851af3ee6964b",
    "filename": "components/studio-platform/plugins/org.wso2.integrationstudio.distribution.project/src/org/wso2/integrationstudio/distribution/project/ui/wizard/DistributionProjectExportWizardPage.java",
    "status": "modified",
    "additions": 101,
    "deletions": 33,
    "changes": 134,
    "blob_url": "https://github.com/wso2/integration-studio/blob/69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3/components/studio-platform/plugins/org.wso2.integrationstudio.distribution.project/src/org/wso2/integrationstudio/distribution/project/ui/wizard/DistributionProjectExportWizardPage.java",
    "raw_url": "https://github.com/wso2/integration-studio/raw/69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3/components/studio-platform/plugins/org.wso2.integrationstudio.distribution.project/src/org/wso2/integrationstudio/distribution/project/ui/wizard/DistributionProjectExportWizardPage.java",
    "contents_url": "https://api.github.com/repos/wso2/integration-studio/contents/components/studio-platform/plugins/org.wso2.integrationstudio.distribution.project/src/org/wso2/integrationstudio/distribution/project/ui/wizard/DistributionProjectExportWizardPage.java?ref=69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3",
    "patch": "@@ -18,14 +18,18 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.maven.model.Dependency;\n import org.apache.maven.project.MavenProject;\n import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n import org.eclipse.core.resources.IProject;\n import org.eclipse.core.resources.ResourcesPlugin;\n import org.eclipse.jface.dialogs.MessageDialog;\n@@ -67,11 +71,18 @@\n public class DistributionProjectExportWizardPage extends WizardPage {\n \tprivate static IIntegrationStudioLog log = Logger.getLog(Activator.PLUGIN_ID);\n     \n+    private static final String METADATA_TYPE = \"synapse/metadata\";\n+    private static final String API_TYPE = \"synapse/api\";\n+    private static final String METADATA_SUFFIX = \"_metadata\";\n+    private static final String SWAGGER_SUFFIX = \"_swagger\";\n+\t\n \tprivate MavenProject mavenProject;\n \tprivate Map<String,Dependency> dependencyList;\n \tprivate Map<String,DependencyData> projectList;\n \tprivate Map<String,Dependency> missingDependencyList;\n \tprivate Map<String,String> serverRoleList = new HashMap<String, String>();\n+    private Map<String, String> projectListToDependencyMapping = new LinkedHashMap<String, String>();\n+    private Map<String, String> artifactIdToDependencyMapping = new LinkedHashMap<String, String>();\n \tprivate Tree trDependencies;\n \tprivate TreeEditor editor;\n \tprivate Map<String,TreeItem>  nodesWithSubNodes = new HashMap<String,TreeItem>();\n@@ -81,7 +92,6 @@\n \tprivate Composite container;\n \tprivate IFile selectedProjectPomFileRes;\n \tprivate IProject selectedCompositeProject;\n-\tprivate String METADATA_TYPE = \"synapse/metadata\";\n \tprivate String METADATA_FILE_TYPE = \"yaml\";\n \n \t// need to get the server roles via an extension point without hard-coding\n@@ -265,6 +275,24 @@ public void handleEvent(Event evt) {\n \t\tvalidate();\n \t}\n \t\n+    private void initializeProjectDetails() {\n+        ProjectList projectListProvider = new ProjectList();\n+        List<ListData> projectListData = projectListProvider.getListData(null, null);\n+        for (ListData data : projectListData) {\n+            DependencyData dependencyData = (DependencyData) data.getData();\n+            projectList.put(data.getCaption(), dependencyData);\n+            IProject mainProject = (IProject) ((DependencyData) data.getData()).getParent();\n+            IFolder metaFolder = mainProject.getFolder(\"src/main/resources/metadata\");\n+            if (metaFolder.exists()) {\n+                String caption = data.getCaption();\n+                String keyword = caption.substring(StringUtils.indexOf(caption, \":=\") + 2, caption.length());\n+                projectListToDependencyMapping.put(keyword, caption);\n+                artifactIdToDependencyMapping.put(((DependencyData) data.getData()).getDependency().getArtifactId(),\n+                        keyword);\n+            }\n+        }\n+    }\n+\t\n \tprivate void loadMavenProjectDetails() {\n \t\tselectedCompositeProject = ResourcesPlugin.getWorkspace().getRoot()\n \t\t\t\t.getProject(dataTransferObject.getCompositeName());\n@@ -617,42 +645,82 @@ public void handleEvent(Event e) {\n \t * Remove a project dependencies from the maven model\n \t * @param nodeData NodeData of selected treeitem\n \t */\n-\tprivate void removeDependency(NodeData nodeData){\n-\t\tDependency project = nodeData.getDependency();\n-\t\tString artifactInfo = DistProjectUtils\n-\t\t.getArtifactInfoAsString(project);\n-\t\t\n-\t\tif (getDependencyList().containsKey(artifactInfo)) {\n-\t\t\tgetDependencyList().remove(artifactInfo);\n-\t\t\tif(serverRoleList.containsKey(artifactInfo)){\n-\t\t\t\tserverRoleList.remove(artifactInfo);\n-\t\t\t}\n-\t\t}\n-\t}\n+    private void removeDependency(NodeData nodeData) {\n+        List<String> removingArtifacts = new ArrayList<>();\n+        Dependency project = nodeData.getDependency();\n+        String artifactInfo = DistProjectUtils.getArtifactInfoAsString(project);\n+        DependencyData dependencyData = projectList.get(projectListToDependencyMapping.get(artifactInfo));\n+        if (API_TYPE.equals(dependencyData.getCApptype())) {\n+            String medataName = project.getArtifactId() + METADATA_SUFFIX;\n+            String swaggerName = project.getArtifactId() + SWAGGER_SUFFIX;\n+            removingArtifacts.add(artifactIdToDependencyMapping.get(medataName));\n+            removingArtifacts.add(artifactIdToDependencyMapping.get(swaggerName));\n+        }\n+        removingArtifacts.add(artifactInfo);\n+        removeDependency(removingArtifacts);\n+    }\n \t\n+    private void removeDependency(List<String> artifacts) {\n+        for (String artifactInfo : artifacts) {\n+            if (getDependencyList().containsKey(artifactInfo)) {\n+                getDependencyList().remove(artifactInfo);\n+                if (serverRoleList.containsKey(artifactInfo)) {\n+                    serverRoleList.remove(artifactInfo);\n+                }\n+            }\n+        }\n+    }\n \t/**\n \t * Add a project dependencies to the maven model\n \t * @param nodeData NodeData of selected treeitem\n \t */\n-\tprivate void addDependency(NodeData nodeData){\n-\t\tDependency project = nodeData.getDependency();\n-\t\tString serverRole = nodeData.getServerRole();\n-\t\tString artifactInfo = DistProjectUtils\n-\t\t.getArtifactInfoAsString(project);\n-\t\t\n-\t\tif (!getDependencyList().containsKey(artifactInfo)) {\n-\t\t\t\n-\t\t\tDependency dependency = new Dependency();\n-\t\t\tdependency.setArtifactId(project.getArtifactId());\n-\t\t\tdependency.setGroupId(project.getGroupId());\n-\t\t\tdependency.setVersion(project.getVersion());\n-\t\t\tdependency.setType(project.getType());\n-\t\t\tif(!serverRoleList.containsKey(artifactInfo)){\n-\t\t\t\tserverRoleList.put(artifactInfo, \"capp/\" + serverRole);\n-\t\t\t}\n-\t\t\tgetDependencyList().put(artifactInfo, dependency);\n-\t\t}\n-\t}\n+    private void addDependency(NodeData nodeData) {\n+        Dependency project = nodeData.getDependency();\n+        String serverRole = nodeData.getServerRole();\n+        String artifactInfo = DistProjectUtils.getArtifactInfoAsString(project);\n+\n+        if (projectListToDependencyMapping.containsKey(artifactInfo)) {\n+            String dependencyMapping = projectListToDependencyMapping.get(artifactInfo);\n+            if (projectList.containsKey(dependencyMapping)) {\n+                DependencyData dependencyData = projectList.get(dependencyMapping);\n+                if (API_TYPE.equals(dependencyData.getCApptype())) {\n+                    String medataName = project.getArtifactId() + METADATA_SUFFIX;\n+                    String swaggerName = project.getArtifactId() + SWAGGER_SUFFIX;\n+                    String metadataArtifactInfo = artifactIdToDependencyMapping.get(medataName);\n+                    String swaggerArtifactInfo = artifactIdToDependencyMapping.get(swaggerName);\n+                    if (projectListToDependencyMapping.containsKey(metadataArtifactInfo)) {\n+                        Dependency metaDependency = projectList\n+                                .get(projectListToDependencyMapping.get(metadataArtifactInfo)).getDependency();\n+                        if (metaDependency != null && !getDependencyList().containsKey(metadataArtifactInfo)) {\n+                            serverRoleList.put(metadataArtifactInfo, \"capp/\" + serverRole);\n+                            getDependencyList().put(metadataArtifactInfo, metaDependency);\n+                        }\n+                    }\n+                    if (projectListToDependencyMapping.containsKey(swaggerArtifactInfo)) {\n+                        Dependency swaggerDependency = projectList\n+                                .get(projectListToDependencyMapping.get(swaggerArtifactInfo)).getDependency();\n+                        if (swaggerDependency != null && !getDependencyList().containsKey(swaggerArtifactInfo)) {\n+                            serverRoleList.put(swaggerArtifactInfo, \"capp/\" + serverRole);\n+                            getDependencyList().put(swaggerArtifactInfo, swaggerDependency);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!getDependencyList().containsKey(artifactInfo)) {\n+\n+            Dependency dependency = new Dependency();\n+            dependency.setArtifactId(project.getArtifactId());\n+            dependency.setGroupId(project.getGroupId());\n+            dependency.setVersion(project.getVersion());\n+            dependency.setType(project.getType());\n+            if(!serverRoleList.containsKey(artifactInfo)){\n+                serverRoleList.put(artifactInfo, \"capp/\" + serverRole);\n+            }\n+            getDependencyList().put(artifactInfo, dependency);\n+        }\n+    }\n \t\n \tprivate void validate() {\n \t\tif (getDependencyList().size() == 0) {\n@@ -673,7 +741,7 @@ public void setVisible(boolean visible) {\n \t\t\t\tvalidate();\n \t\t\t}\n \t\t}\n-\t\t\n+\t\tinitializeProjectDetails();\n \t\tcontainer.setVisible(visible);\n \t}\n }"
  },
  {
    "sha": "be0b9d9bbe0b9c95f828620e84acbe3ab62fbe44",
    "filename": "components/studio-platform/plugins/org.wso2.integrationstudio.docker.distribution/resources/deployment.toml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/wso2/integration-studio/blob/69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3/components/studio-platform/plugins/org.wso2.integrationstudio.docker.distribution/resources/deployment.toml",
    "raw_url": "https://github.com/wso2/integration-studio/raw/69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3/components/studio-platform/plugins/org.wso2.integrationstudio.docker.distribution/resources/deployment.toml",
    "contents_url": "https://api.github.com/repos/wso2/integration-studio/contents/components/studio-platform/plugins/org.wso2.integrationstudio.docker.distribution/resources/deployment.toml?ref=69d7ecd999d77f84ae0ef40ec2b95feca4cce3b3",
    "patch": "@@ -102,7 +102,7 @@ algorithm = \"AES\"\n # secret_key = \"[secret value]\"\n \n # [[service_catalog]]\n-# apimHost = \"https://localhost:9443\"\n+# apim_host = \"https://localhost:9443\"\n # enable = true\n # username = \"admin\"\n # password = \"admin\""
  }
]
