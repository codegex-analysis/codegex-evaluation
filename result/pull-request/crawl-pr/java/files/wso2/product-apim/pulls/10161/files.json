[
  {
    "sha": "688c5c9c3e91e501e14de7255d0a9cfef221bdb2",
    "filename": "modules/integration/tests-common/clients/publisher/api/openapi.yaml",
    "status": "modified",
    "additions": 339,
    "deletions": 0,
    "changes": 339,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/clients/publisher/api/openapi.yaml",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/clients/publisher/api/openapi.yaml",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-common/clients/publisher/api/openapi.yaml?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -8326,6 +8326,85 @@ paths:\n         source: 'curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\n           \"https://127.0.0.1:9443/api/am/publisher/v2/throttling-policies/api/Platinum\"'\n       x-accepts: application/json\n+  /throttling-policies/streaming/subscription:\n+    get:\n+      description: |\n+        This operation can be used to list the available subscription policies for a given tenent ID based on the given quota type.\n+        Quota Type should be provide as a query parameters and supported Quota types are \"requestCount\" ,\"bandwidthVolume\" and \"eventCount\"\n+      operationId: getSubscriptionThrottlingPolicies\n+      parameters:\n+      - description: Filter the subscription base on tier quota type\n+        explode: true\n+        in: query\n+        name: tierQuotaType\n+        required: false\n+        schema:\n+          type: string\n+        style: form\n+      - description: |\n+          Validator for conditional requests; based on the ETag of the formerly retrieved\n+          variant of the resource.\n+        explode: false\n+        in: header\n+        name: If-None-Match\n+        required: false\n+        schema:\n+          type: string\n+        style: simple\n+      responses:\n+        \"200\":\n+          content:\n+            application/json:\n+              schema:\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionPolicy'\n+                type: array\n+          description: |\n+            OK.\n+            List of subscription policies returned.\n+          headers:\n+            ETag:\n+              description: |\n+                Entity Tag of the response resource.\n+                Used by caches, or in conditional requests (Will be supported in future).\n+              explode: false\n+              schema:\n+                type: string\n+              style: simple\n+            Content-Type:\n+              description: The content type of the body.\n+              explode: false\n+              schema:\n+                type: string\n+              style: simple\n+        \"304\":\n+          content: {}\n+          description: |\n+            Not Modified.\n+            Empty body because the client has already the latest version of the requested resource (Will be supported in future).\n+        \"406\":\n+          content:\n+            application/json:\n+              example:\n+                code: 406\n+                message: Not Acceptable\n+                description: The requested media type is not supported\n+                moreInfo: \"\"\n+                error: []\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+          description: Not Acceptable. The requested media type is not supported.\n+      security:\n+      - OAuth2Security:\n+        - apim:api_view\n+      summary: Get subscription throttling policies based on quota type\n+      tags:\n+      - Throttling Policies\n+      x-code-samples:\n+      - lang: Curl\n+        source: 'curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\n+          \"https://127.0.0.1:9443/api/am/publisher/v2/throttling-policies/subscription?tierQuotaType=RequestCountLimit\"'\n+      x-accepts: application/json\n   /mediation-policies:\n     get:\n       description: |\n@@ -14455,6 +14534,15 @@ components:\n       schema:\n         type: string\n       style: simple\n+    tierQuotaType:\n+      description: Filter the subscription base on tier quota type\n+      explode: true\n+      in: query\n+      name: tierQuotaType\n+      required: false\n+      schema:\n+        type: string\n+      style: form\n   requestBodies:\n     threatProtectionPolicy:\n       content:\n@@ -16755,6 +16843,223 @@ components:\n       - throttlingPolicy\n       title: Subscription\n       type: object\n+    ThrottleLimitBase:\n+      properties:\n+        timeUnit:\n+          description: Unit of the time. Allowed values are \"sec\", \"min\", \"hour\",\n+            \"day\"\n+          example: min\n+          type: string\n+        unitTime:\n+          description: Time limit that the throttling limit applies.\n+          example: 10\n+          type: integer\n+      required:\n+      - timeUnit\n+      - unitTime\n+      title: Throttle Limit Base\n+      type: object\n+    ThrottleLimit:\n+      example:\n+        type: REQUESTCOUNTLIMIT\n+      properties:\n+        type:\n+          description: |\n+            Type of the throttling limit. Allowed values are \"REQUESTCOUNTLIMIT\" and \"BANDWIDTHLIMIT\".\n+            Please see schemas of \"RequestCountLimit\" and \"BandwidthLimit\" throttling limit types in\n+            Definitions section.\n+          enum:\n+          - REQUESTCOUNTLIMIT\n+          - BANDWIDTHLIMIT\n+          - EVENTCOUNTLIMIT\n+          example: REQUESTCOUNTLIMIT\n+          type: string\n+        requestCount:\n+          $ref: '#/components/schemas/RequestCountLimit'\n+        bandwidth:\n+          $ref: '#/components/schemas/BandwidthLimit'\n+        eventCount:\n+          $ref: '#/components/schemas/EventCountLimit'\n+      required:\n+      - type\n+      title: Throttle Limit\n+      type: object\n+    MonetizationInfo:\n+      example:\n+        monetizationPlan: FixedRate\n+        properties:\n+          key: properties\n+      properties:\n+        monetizationPlan:\n+          description: Flag to indicate the monetization plan\n+          enum:\n+          - FIXEDRATE\n+          - DYNAMICRATE\n+          example: FixedRate\n+          type: string\n+        properties:\n+          additionalProperties:\n+            type: string\n+          description: Map of custom properties related to each monetization plan\n+          type: object\n+      required:\n+      - monetizationPlan\n+      - properties\n+      title: API monetization details object\n+      type: object\n+    BandwidthLimit:\n+      allOf:\n+      - $ref: '#/components/schemas/ThrottleLimitBase'\n+      - $ref: '#/components/schemas/BandwidthLimit_allOf'\n+      title: Bandwidth Limit object\n+    RequestCountLimit:\n+      allOf:\n+      - $ref: '#/components/schemas/ThrottleLimitBase'\n+      - $ref: '#/components/schemas/RequestCountLimit_allOf'\n+      title: Request Count Limit object\n+    EventCountLimit:\n+      allOf:\n+      - $ref: '#/components/schemas/ThrottleLimitBase'\n+      - $ref: '#/components/schemas/EventCountLimit_allOf'\n+      title: Event Count Limit object\n+    SubscriptionPolicy:\n+      example:\n+        graphQLMaxComplexity: 400\n+        graphQLMaxDepth: 10\n+        stopOnQuotaReach: false\n+        policyName: 30PerMin\n+        displayName: 30PerMin\n+        monetization:\n+          monetizationPlan: FixedRate\n+          properties:\n+            key: properties\n+        rateLimitTimeUnit: min\n+        description: Allows 30 request per minute\n+        type: type\n+        rateLimitCount: 10\n+        policyId: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93\n+        permissions:\n+          permissionType: deny\n+          roles:\n+          - Internal/everyone\n+        isDeployed: false\n+        defaultLimit:\n+          type: REQUESTCOUNTLIMIT\n+        subscriberCount: 10\n+        billingPlan: FREE\n+        customAttributes: []\n+      properties:\n+        policyId:\n+          description: Id of policy\n+          example: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93\n+          readOnly: true\n+          type: string\n+        policyName:\n+          description: Name of policy\n+          example: 30PerMin\n+          maxLength: 60\n+          minLength: 1\n+          type: string\n+        displayName:\n+          description: Display name of the policy\n+          example: 30PerMin\n+          maxLength: 512\n+          type: string\n+        description:\n+          description: Description of the policy\n+          example: Allows 30 request per minute\n+          maxLength: 1024\n+          type: string\n+        isDeployed:\n+          default: false\n+          description: Indicates whether the policy is deployed successfully or not.\n+          type: boolean\n+        type:\n+          description: Indicates the type of throttle policy\n+          type: string\n+        defaultLimit:\n+          $ref: '#/components/schemas/ThrottleLimit'\n+        monetization:\n+          $ref: '#/components/schemas/MonetizationInfo'\n+        rateLimitCount:\n+          description: Burst control request count\n+          example: 10\n+          type: integer\n+        rateLimitTimeUnit:\n+          description: Burst control time unit\n+          example: min\n+          type: string\n+        subscriberCount:\n+          description: Number of subscriptions allowed\n+          example: 10\n+          type: integer\n+        customAttributes:\n+          description: |\n+            Custom attributes added to the Subscription Throttling Policy\n+          example: []\n+          items:\n+            $ref: '#/components/schemas/CustomAttribute'\n+          type: array\n+        stopOnQuotaReach:\n+          default: false\n+          description: |\n+            This indicates the action to be taken when a user goes beyond the allocated quota. If checked, the user's requests will be dropped. If unchecked, the requests will be allowed to pass through.\n+          type: boolean\n+        billingPlan:\n+          description: |\n+            define whether this is Paid or a Free plan. Allowed values are FREE or COMMERCIAL.\n+          example: FREE\n+          type: string\n+        permissions:\n+          $ref: '#/components/schemas/SubscriptionThrottlePolicyPermission'\n+        graphQLMaxComplexity:\n+          description: Maximum Complexity of the GraphQL query\n+          example: 400\n+          type: integer\n+        graphQLMaxDepth:\n+          description: Maximum Depth of the GraphQL query\n+          example: 10\n+          type: integer\n+      title: Subscription Throttling Policy\n+      type: object\n+    CustomAttribute:\n+      properties:\n+        name:\n+          description: Name of the custom attribute\n+          example: customAttr1\n+          type: string\n+        value:\n+          description: Value of the custom attribute\n+          example: value1\n+          type: string\n+      required:\n+      - name\n+      - value\n+      title: Name-Value pair\n+      type: object\n+    SubscriptionThrottlePolicyPermission:\n+      example:\n+        permissionType: deny\n+        roles:\n+        - Internal/everyone\n+      properties:\n+        permissionType:\n+          enum:\n+          - ALLOW\n+          - DENY\n+          example: deny\n+          type: string\n+        roles:\n+          example:\n+          - Internal/everyone\n+          items:\n+            type: string\n+          type: array\n+      required:\n+      - permissionType\n+      - roles\n+      title: SubscriptionThrottlePolicyPermission\n+      type: object\n     APIMonetizationUsage:\n       example:\n         properties:\n@@ -19251,6 +19556,39 @@ components:\n         outdated:\n           example: false\n           type: boolean\n+    BandwidthLimit_allOf:\n+      properties:\n+        dataAmount:\n+          description: Amount of data allowed to be transfered\n+          example: 1000\n+          format: int64\n+          type: integer\n+        dataUnit:\n+          description: Unit of data allowed to be transfered. Allowed values are \"KB\",\n+            \"MB\" and \"GB\"\n+          example: KB\n+          type: string\n+      required:\n+      - dataAmount\n+      - dataUnit\n+    RequestCountLimit_allOf:\n+      properties:\n+        requestCount:\n+          description: Maximum number of requests allowed\n+          example: 30\n+          format: int64\n+          type: integer\n+      required:\n+      - requestCount\n+    EventCountLimit_allOf:\n+      properties:\n+        eventCount:\n+          description: Maximum number of events allowed\n+          example: 3000\n+          format: int64\n+          type: integer\n+      required:\n+      - eventCount\n     Endpoint_endpointConfig:\n       properties:\n         endpointType:\n@@ -19592,6 +19930,7 @@ components:\n             apim:api_import_export: Import and export APIs related operations\n             apim:api_product_import_export: Import and export API Products related\n               operations\n+            apim:api_generate_key: Generate Internal Key\n           tokenUrl: https://localhost:9443/oauth2/token\n       type: oauth2\n "
  },
  {
    "sha": "caab2a9c76a58109bb1cdcf70bb0adcdcdc94214",
    "filename": "modules/integration/tests-common/clients/publisher/docs/ThrottlingPoliciesApi.md",
    "status": "modified",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/clients/publisher/docs/ThrottlingPoliciesApi.md",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/clients/publisher/docs/ThrottlingPoliciesApi.md",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-common/clients/publisher/docs/ThrottlingPoliciesApi.md?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -5,6 +5,7 @@ All URIs are relative to *https://apis.wso2.com/api/am/publisher/v2*\n Method | HTTP request | Description\n ------------- | ------------- | -------------\n [**getAllThrottlingPolicies**](ThrottlingPoliciesApi.md#getAllThrottlingPolicies) | **GET** /throttling-policies/{policyLevel} | Get All Throttling Policies for the Given Type\n+[**getSubscriptionThrottlingPolicies**](ThrottlingPoliciesApi.md#getSubscriptionThrottlingPolicies) | **GET** /throttling-policies/streaming/subscription | Get subscription throttling policies based on quota type\n [**getThrottlingPolicyByName**](ThrottlingPoliciesApi.md#getThrottlingPolicyByName) | **GET** /throttling-policies/{policyLevel}/{policyName} | Get Details of a Policy\n \n \n@@ -83,6 +84,77 @@ Name | Type | Description  | Notes\n **304** | Not Modified. Empty body because the client has already the latest version of the requested resource (Will be supported in future).  |  -  |\n **406** | Not Acceptable. The requested media type is not supported. |  -  |\n \n+<a name=\"getSubscriptionThrottlingPolicies\"></a>\n+# **getSubscriptionThrottlingPolicies**\n+> List&lt;SubscriptionPolicyDTO&gt; getSubscriptionThrottlingPolicies(tierQuotaType, ifNoneMatch)\n+\n+Get subscription throttling policies based on quota type\n+\n+This operation can be used to list the available subscription policies for a given tenent ID based on the given quota type. Quota Type should be provide as a query parameters and supported Quota types are \\&quot;requestCount\\&quot; ,\\&quot;bandwidthVolume\\&quot; and \\&quot;eventCount\\&quot; \n+\n+### Example\n+```java\n+// Import classes:\n+import org.wso2.am.integration.clients.publisher.api.ApiClient;\n+import org.wso2.am.integration.clients.publisher.api.ApiException;\n+import org.wso2.am.integration.clients.publisher.api.Configuration;\n+import org.wso2.am.integration.clients.publisher.api.auth.*;\n+import org.wso2.am.integration.clients.publisher.api.models.*;\n+import org.wso2.am.integration.clients.publisher.api.v1.ThrottlingPoliciesApi;\n+\n+public class Example {\n+  public static void main(String[] args) {\n+    ApiClient defaultClient = Configuration.getDefaultApiClient();\n+    defaultClient.setBasePath(\"https://apis.wso2.com/api/am/publisher/v2\");\n+    \n+    // Configure OAuth2 access token for authorization: OAuth2Security\n+    OAuth OAuth2Security = (OAuth) defaultClient.getAuthentication(\"OAuth2Security\");\n+    OAuth2Security.setAccessToken(\"YOUR ACCESS TOKEN\");\n+\n+    ThrottlingPoliciesApi apiInstance = new ThrottlingPoliciesApi(defaultClient);\n+    String tierQuotaType = \"tierQuotaType_example\"; // String | Filter the subscription base on tier quota type\n+    String ifNoneMatch = \"ifNoneMatch_example\"; // String | Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resource. \n+    try {\n+      List<SubscriptionPolicyDTO> result = apiInstance.getSubscriptionThrottlingPolicies(tierQuotaType, ifNoneMatch);\n+      System.out.println(result);\n+    } catch (ApiException e) {\n+      System.err.println(\"Exception when calling ThrottlingPoliciesApi#getSubscriptionThrottlingPolicies\");\n+      System.err.println(\"Status code: \" + e.getCode());\n+      System.err.println(\"Reason: \" + e.getResponseBody());\n+      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n+      e.printStackTrace();\n+    }\n+  }\n+}\n+```\n+\n+### Parameters\n+\n+Name | Type | Description  | Notes\n+------------- | ------------- | ------------- | -------------\n+ **tierQuotaType** | **String**| Filter the subscription base on tier quota type | [optional]\n+ **ifNoneMatch** | **String**| Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resource.  | [optional]\n+\n+### Return type\n+\n+[**List&lt;SubscriptionPolicyDTO&gt;**](SubscriptionPolicyDTO.md)\n+\n+### Authorization\n+\n+[OAuth2Security](../README.md#OAuth2Security)\n+\n+### HTTP request headers\n+\n+ - **Content-Type**: Not defined\n+ - **Accept**: application/json\n+\n+### HTTP response details\n+| Status code | Description | Response headers |\n+|-------------|-------------|------------------|\n+**200** | OK. List of subscription policies returned.  |  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).  <br>  * Content-Type - The content type of the body. <br>  |\n+**304** | Not Modified. Empty body because the client has already the latest version of the requested resource (Will be supported in future).  |  -  |\n+**406** | Not Acceptable. The requested media type is not supported. |  -  |\n+\n <a name=\"getThrottlingPolicyByName\"></a>\n # **getThrottlingPolicyByName**\n > ThrottlingPolicyDTO getThrottlingPolicyByName(policyName, policyLevel, ifNoneMatch)"
  },
  {
    "sha": "1d5c1da3ffbc604497709da156e06860b5518da3",
    "filename": "modules/integration/tests-common/clients/publisher/src/gen/java/org/wso2/am/integration/clients/publisher/api/v1/ThrottlingPoliciesApi.java",
    "status": "modified",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/clients/publisher/src/gen/java/org/wso2/am/integration/clients/publisher/api/v1/ThrottlingPoliciesApi.java",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/clients/publisher/src/gen/java/org/wso2/am/integration/clients/publisher/api/v1/ThrottlingPoliciesApi.java",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-common/clients/publisher/src/gen/java/org/wso2/am/integration/clients/publisher/api/v1/ThrottlingPoliciesApi.java?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -28,6 +28,7 @@\n \n \n import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;\n+import org.wso2.am.integration.clients.publisher.api.v1.dto.SubscriptionPolicyDTO;\n import org.wso2.am.integration.clients.publisher.api.v1.dto.ThrottlingPolicyDTO;\n import org.wso2.am.integration.clients.publisher.api.v1.dto.ThrottlingPolicyListDTO;\n \n@@ -199,6 +200,131 @@ public ThrottlingPolicyListDTO getAllThrottlingPolicies(String policyLevel, Inte\n         localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);\n         return localVarCall;\n     }\n+    /**\n+     * Build call for getSubscriptionThrottlingPolicies\n+     * @param tierQuotaType Filter the subscription base on tier quota type (optional)\n+     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resource.  (optional)\n+     * @param _callback Callback for upload/download progress\n+     * @return Call to execute\n+     * @throws ApiException If fail to serialize the request body object\n+     * @http.response.details\n+     <table summary=\"Response Details\" border=\"1\">\n+        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>\n+        <tr><td> 200 </td><td> OK. List of subscription policies returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).  <br>  * Content-Type - The content type of the body. <br>  </td></tr>\n+        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource (Will be supported in future).  </td><td>  -  </td></tr>\n+        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>\n+     </table>\n+     */\n+    public okhttp3.Call getSubscriptionThrottlingPoliciesCall(String tierQuotaType, String ifNoneMatch, final ApiCallback _callback) throws ApiException {\n+        Object localVarPostBody = null;\n+\n+        // create path and map variables\n+        String localVarPath = \"/throttling-policies/streaming/subscription\";\n+\n+        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+        if (tierQuotaType != null) {\n+            localVarQueryParams.addAll(localVarApiClient.parameterToPair(\"tierQuotaType\", tierQuotaType));\n+        }\n+\n+        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+        if (ifNoneMatch != null) {\n+            localVarHeaderParams.put(\"If-None-Match\", localVarApiClient.parameterToString(ifNoneMatch));\n+        }\n+\n+        Map<String, String> localVarCookieParams = new HashMap<String, String>();\n+        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n+        final String[] localVarAccepts = {\n+            \"application/json\"\n+        };\n+        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);\n+        if (localVarAccept != null) {\n+            localVarHeaderParams.put(\"Accept\", localVarAccept);\n+        }\n+\n+        final String[] localVarContentTypes = {\n+            \n+        };\n+        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);\n+        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+        String[] localVarAuthNames = new String[] { \"OAuth2Security\" };\n+        return localVarApiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private okhttp3.Call getSubscriptionThrottlingPoliciesValidateBeforeCall(String tierQuotaType, String ifNoneMatch, final ApiCallback _callback) throws ApiException {\n+        \n+\n+        okhttp3.Call localVarCall = getSubscriptionThrottlingPoliciesCall(tierQuotaType, ifNoneMatch, _callback);\n+        return localVarCall;\n+\n+    }\n+\n+    /**\n+     * Get subscription throttling policies based on quota type\n+     * This operation can be used to list the available subscription policies for a given tenent ID based on the given quota type. Quota Type should be provide as a query parameters and supported Quota types are \\&quot;requestCount\\&quot; ,\\&quot;bandwidthVolume\\&quot; and \\&quot;eventCount\\&quot; \n+     * @param tierQuotaType Filter the subscription base on tier quota type (optional)\n+     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resource.  (optional)\n+     * @return List&lt;SubscriptionPolicyDTO&gt;\n+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n+     * @http.response.details\n+     <table summary=\"Response Details\" border=\"1\">\n+        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>\n+        <tr><td> 200 </td><td> OK. List of subscription policies returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).  <br>  * Content-Type - The content type of the body. <br>  </td></tr>\n+        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource (Will be supported in future).  </td><td>  -  </td></tr>\n+        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>\n+     </table>\n+     */\n+    public List<SubscriptionPolicyDTO> getSubscriptionThrottlingPolicies(String tierQuotaType, String ifNoneMatch) throws ApiException {\n+        ApiResponse<List<SubscriptionPolicyDTO>> localVarResp = getSubscriptionThrottlingPoliciesWithHttpInfo(tierQuotaType, ifNoneMatch);\n+        return localVarResp.getData();\n+    }\n+\n+    /**\n+     * Get subscription throttling policies based on quota type\n+     * This operation can be used to list the available subscription policies for a given tenent ID based on the given quota type. Quota Type should be provide as a query parameters and supported Quota types are \\&quot;requestCount\\&quot; ,\\&quot;bandwidthVolume\\&quot; and \\&quot;eventCount\\&quot; \n+     * @param tierQuotaType Filter the subscription base on tier quota type (optional)\n+     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resource.  (optional)\n+     * @return ApiResponse&lt;List&lt;SubscriptionPolicyDTO&gt;&gt;\n+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n+     * @http.response.details\n+     <table summary=\"Response Details\" border=\"1\">\n+        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>\n+        <tr><td> 200 </td><td> OK. List of subscription policies returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).  <br>  * Content-Type - The content type of the body. <br>  </td></tr>\n+        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource (Will be supported in future).  </td><td>  -  </td></tr>\n+        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>\n+     </table>\n+     */\n+    public ApiResponse<List<SubscriptionPolicyDTO>> getSubscriptionThrottlingPoliciesWithHttpInfo(String tierQuotaType, String ifNoneMatch) throws ApiException {\n+        okhttp3.Call localVarCall = getSubscriptionThrottlingPoliciesValidateBeforeCall(tierQuotaType, ifNoneMatch, null);\n+        Type localVarReturnType = new TypeToken<List<SubscriptionPolicyDTO>>(){}.getType();\n+        return localVarApiClient.execute(localVarCall, localVarReturnType);\n+    }\n+\n+    /**\n+     * Get subscription throttling policies based on quota type (asynchronously)\n+     * This operation can be used to list the available subscription policies for a given tenent ID based on the given quota type. Quota Type should be provide as a query parameters and supported Quota types are \\&quot;requestCount\\&quot; ,\\&quot;bandwidthVolume\\&quot; and \\&quot;eventCount\\&quot; \n+     * @param tierQuotaType Filter the subscription base on tier quota type (optional)\n+     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resource.  (optional)\n+     * @param _callback The callback to be executed when the API call finishes\n+     * @return The request call\n+     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n+     * @http.response.details\n+     <table summary=\"Response Details\" border=\"1\">\n+        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>\n+        <tr><td> 200 </td><td> OK. List of subscription policies returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).  <br>  * Content-Type - The content type of the body. <br>  </td></tr>\n+        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource (Will be supported in future).  </td><td>  -  </td></tr>\n+        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>\n+     </table>\n+     */\n+    public okhttp3.Call getSubscriptionThrottlingPoliciesAsync(String tierQuotaType, String ifNoneMatch, final ApiCallback<List<SubscriptionPolicyDTO>> _callback) throws ApiException {\n+\n+        okhttp3.Call localVarCall = getSubscriptionThrottlingPoliciesValidateBeforeCall(tierQuotaType, ifNoneMatch, _callback);\n+        Type localVarReturnType = new TypeToken<List<SubscriptionPolicyDTO>>(){}.getType();\n+        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);\n+        return localVarCall;\n+    }\n     /**\n      * Build call for getThrottlingPolicyByName\n      * @param policyName Tier name  (required)"
  },
  {
    "sha": "76f61ee441f53effb330d38b54130cb4069a882a",
    "filename": "modules/integration/tests-common/clients/publisher/src/main/resources/publisher-api.yaml",
    "status": "modified",
    "additions": 318,
    "deletions": 0,
    "changes": 318,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/clients/publisher/src/main/resources/publisher-api.yaml",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/clients/publisher/src/main/resources/publisher-api.yaml",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-common/clients/publisher/src/main/resources/publisher-api.yaml?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -4636,6 +4636,58 @@ paths:\n           source: 'curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\n           \"https://127.0.0.1:9443/api/am/publisher/v2/throttling-policies/api/Platinum\"'\n \n+  ######################################################\n+  # The \"Subscription Throttling Based on Quota Type\" resource APIs\n+  ######################################################\n+  /throttling-policies/streaming/subscription:\n+    get:\n+      tags:\n+        - Throttling Policies\n+      summary: Get subscription throttling policies based on quota type\n+      description: |\n+        This operation can be used to list the available subscription policies for a given tenent ID based on the given quota type.\n+        Quota Type should be provide as a query parameters and supported Quota types are \"requestCount\" ,\"bandwidthVolume\" and \"eventCount\"\n+      operationId: getSubscriptionThrottlingPolicies\n+      parameters:\n+        - $ref: '#/components/parameters/tierQuotaType'\n+        - $ref: '#/components/parameters/If-None-Match'\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            List of subscription policies returned.\n+          headers:\n+            ETag:\n+              description: |\n+                Entity Tag of the response resource.\n+                Used by caches, or in conditional requests (Will be supported in future).\n+              schema:\n+                type: string\n+            Content-Type:\n+              description: The content type of the body.\n+              schema:\n+                type: string\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionPolicy'\n+        304:\n+          description: |\n+            Not Modified.\n+            Empty body because the client has already the latest version of the requested resource (Will be supported in future).\n+          content: {}\n+        406:\n+          $ref: '#/components/responses/NotAcceptable'\n+      security:\n+        - OAuth2Security:\n+            - apim:api_view\n+      x-code-samples:\n+        - lang: Curl\n+          source: 'curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\n+          \"https://127.0.0.1:9443/api/am/publisher/v2/throttling-policies/subscription?tierQuotaType=RequestCountLimit\"'\n+\n   ######################################################\n   # The \"Mediation Policy Collection\" resource APIs\n   ######################################################\n@@ -9409,6 +9461,266 @@ components:\n             - ON_HOLD\n             - REJECTED\n             - TIER_UPDATE_PENDING\n+#    ThrottlePolicy:\n+#      title: Generic Throttling Policy\n+#      required:\n+#        - policyName\n+#      type: object\n+#      properties:\n+#        policyId:\n+#          type: string\n+#          description: Id of policy\n+#          readOnly: true\n+#          example: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93\n+#        policyName:\n+#          maxLength: 60\n+#          minLength: 1\n+#          type: string\n+#          description: Name of policy\n+#          example: 30PerMin\n+#        displayName:\n+#          type: string\n+#          description: Display name of the policy\n+#          example: 30PerMin\n+#          maxLength: 512\n+#        description:\n+#          maxLength: 1024\n+#          type: string\n+#          description: Description of the policy\n+#          example: Allows 30 request per minute\n+#        isDeployed:\n+#          type: boolean\n+#          description: Indicates whether the policy is deployed successfully or not.\n+#          default: false\n+#        type:\n+#          type: string\n+#          description: Indicates the type of throttle policy\n+#      discriminator:\n+#        propertyName: type\n+#    GraphQLQuery:\n+#      title: GraphQL Query\n+#      type: object\n+#      properties:\n+#        graphQLMaxComplexity:\n+#          type: integer\n+#          description: Maximum Complexity of the GraphQL query\n+#          example: 400\n+#        graphQLMaxDepth:\n+#          type: integer\n+#          description: Maximum Depth of the GraphQL query\n+#          example: 10\n+    ThrottleLimitBase:\n+      title: Throttle Limit Base\n+      required:\n+        - timeUnit\n+        - unitTime\n+      type: object\n+      properties:\n+        timeUnit:\n+          type: string\n+          description: Unit of the time. Allowed values are \"sec\", \"min\", \"hour\",\n+            \"day\"\n+          example: min\n+        unitTime:\n+          type: integer\n+          description: Time limit that the throttling limit applies.\n+          example: 10\n+    ThrottleLimit:\n+      title: Throttle Limit\n+      required:\n+        - type\n+      type: object\n+      properties:\n+        type:\n+          type: string\n+          description: |\n+            Type of the throttling limit. Allowed values are \"REQUESTCOUNTLIMIT\" and \"BANDWIDTHLIMIT\".\n+            Please see schemas of \"RequestCountLimit\" and \"BandwidthLimit\" throttling limit types in\n+            Definitions section.\n+          example: REQUESTCOUNTLIMIT\n+          enum:\n+            - REQUESTCOUNTLIMIT\n+            - BANDWIDTHLIMIT\n+            - EVENTCOUNTLIMIT\n+        requestCount:\n+          $ref: '#/components/schemas/RequestCountLimit'\n+        bandwidth:\n+          $ref: '#/components/schemas/BandwidthLimit'\n+        eventCount:\n+          $ref: '#/components/schemas/EventCountLimit'\n+    MonetizationInfo:\n+      title: API monetization details object\n+      required:\n+        - monetizationPlan\n+        - properties\n+      type: object\n+      properties:\n+        monetizationPlan:\n+          type: string\n+          description: Flag to indicate the monetization plan\n+          example: FixedRate\n+          enum:\n+            - FIXEDRATE\n+            - DYNAMICRATE\n+        properties:\n+          type: object\n+          additionalProperties:\n+            type: string\n+          description: Map of custom properties related to each monetization plan\n+    BandwidthLimit:\n+      title: Bandwidth Limit object\n+      allOf:\n+        - $ref: '#/components/schemas/ThrottleLimitBase'\n+        - required:\n+            - dataAmount\n+            - dataUnit\n+          type: object\n+          properties:\n+            dataAmount:\n+              type: integer\n+              description: Amount of data allowed to be transfered\n+              format: int64\n+              example: 1000\n+            dataUnit:\n+              type: string\n+              description: Unit of data allowed to be transfered. Allowed values are\n+                \"KB\", \"MB\" and \"GB\"\n+              example: KB\n+    RequestCountLimit:\n+      title: Request Count Limit object\n+      allOf:\n+        - $ref: '#/components/schemas/ThrottleLimitBase'\n+        - required:\n+            - requestCount\n+          type: object\n+          properties:\n+            requestCount:\n+              type: integer\n+              description: Maximum number of requests allowed\n+              format: int64\n+              example: 30\n+    EventCountLimit:\n+      title: Event Count Limit object\n+      allOf:\n+        - $ref: '#/components/schemas/ThrottleLimitBase'\n+        - required:\n+            - eventCount\n+          type: object\n+          properties:\n+            eventCount:\n+              type: integer\n+              description: Maximum number of events allowed\n+              format: int64\n+              example: 3000\n+    SubscriptionPolicy:\n+      title: Subscription Throttling Policy\n+      type: object\n+      properties:\n+        policyId:\n+          type: string\n+          description: Id of policy\n+          readOnly: true\n+          example: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93\n+        policyName:\n+          maxLength: 60\n+          minLength: 1\n+          type: string\n+          description: Name of policy\n+          example: 30PerMin\n+        displayName:\n+          type: string\n+          description: Display name of the policy\n+          example: 30PerMin\n+          maxLength: 512\n+        description:\n+          maxLength: 1024\n+          type: string\n+          description: Description of the policy\n+          example: Allows 30 request per minute\n+        isDeployed:\n+          type: boolean\n+          description: Indicates whether the policy is deployed successfully or not.\n+          default: false\n+        type:\n+          type: string\n+          description: Indicates the type of throttle policy\n+        defaultLimit:\n+          $ref: '#/components/schemas/ThrottleLimit'\n+        monetization:\n+          $ref: '#/components/schemas/MonetizationInfo'\n+        rateLimitCount:\n+          type: integer\n+          description: Burst control request count\n+          example: 10\n+        rateLimitTimeUnit:\n+          type: string\n+          description: Burst control time unit\n+          example: min\n+        subscriberCount:\n+          type: integer\n+          description: Number of subscriptions allowed\n+          example: 10\n+        customAttributes:\n+          type: array\n+          description: |\n+            Custom attributes added to the Subscription Throttling Policy\n+          example: [ ]\n+          items:\n+            $ref: '#/components/schemas/CustomAttribute'\n+        stopOnQuotaReach:\n+          type: boolean\n+          description: |\n+            This indicates the action to be taken when a user goes beyond the allocated quota. If checked, the user's requests will be dropped. If unchecked, the requests will be allowed to pass through.\n+          default: false\n+        billingPlan:\n+          type: string\n+          description: |\n+            define whether this is Paid or a Free plan. Allowed values are FREE or COMMERCIAL.\n+          example: FREE\n+        permissions:\n+          $ref: '#/components/schemas/SubscriptionThrottlePolicyPermission'\n+        graphQLMaxComplexity:\n+          type: integer\n+          description: Maximum Complexity of the GraphQL query\n+          example: 400\n+        graphQLMaxDepth:\n+          type: integer\n+          description: Maximum Depth of the GraphQL query\n+          example: 10\n+    CustomAttribute:\n+      title: Name-Value pair\n+      required:\n+        - name\n+        - value\n+      type: object\n+      properties:\n+        name:\n+          type: string\n+          description: Name of the custom attribute\n+          example: customAttr1\n+        value:\n+          type: string\n+          description: Value of the custom attribute\n+          example: value1\n+    SubscriptionThrottlePolicyPermission:\n+      title: SubscriptionThrottlePolicyPermission\n+      required:\n+        - permissionType\n+        - roles\n+      type: object\n+      properties:\n+        permissionType:\n+          type: string\n+          example: deny\n+          enum:\n+            - ALLOW\n+            - DENY\n+        roles:\n+          type: array\n+          example:\n+            - Internal/everyone\n+          items:\n+            type: string\n     APIMonetizationUsage:\n       title: API monetization usage object\n       type: object\n@@ -11617,6 +11929,12 @@ components:\n       required: true\n       schema:\n         type: string\n+    tierQuotaType:\n+      name: tierQuotaType\n+      description: Filter the subscription base on tier quota type\n+      in: query\n+      schema:\n+        type: string\n   requestBodies:\n     threatProtectionPolicy:\n       description: |"
  },
  {
    "sha": "bbda9371e83389b74e5c7c781848423f3d2fedfa",
    "filename": "modules/integration/tests-common/integration-test-utils/src/main/java/org/wso2/am/integration/test/Constants.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/integration-test-utils/src/main/java/org/wso2/am/integration/test/Constants.java",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/integration-test-utils/src/main/java/org/wso2/am/integration/test/Constants.java",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-common/integration-test-utils/src/main/java/org/wso2/am/integration/test/Constants.java?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -56,4 +56,8 @@\n     public static final String XML = \".xml\";\n     public static final String CARBON_HOME = \"carbon.home\";\n     public static final String CARBON_HOME_VALUE = \"../../\";\n+\n+    public static final String BANDWIDTH_TYPE = \"bandwidthVolume\";\n+    public static final String REQUEST_COUNT_TYPE = \"requestCount\";\n+    public static final String EVENT_COUNT_TYPE = \"eventCount\";\n }"
  },
  {
    "sha": "f6d564a7aee203f50fc8fba1243470c736b15bb6",
    "filename": "modules/integration/tests-common/integration-test-utils/src/main/java/org/wso2/am/integration/test/impl/RestAPIPublisherImpl.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/integration-test-utils/src/main/java/org/wso2/am/integration/test/impl/RestAPIPublisherImpl.java",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-common/integration-test-utils/src/main/java/org/wso2/am/integration/test/impl/RestAPIPublisherImpl.java",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-common/integration-test-utils/src/main/java/org/wso2/am/integration/test/impl/RestAPIPublisherImpl.java?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -74,6 +74,7 @@\n import org.wso2.am.integration.clients.publisher.api.v1.dto.ScopeListDTO;\n import org.wso2.am.integration.clients.publisher.api.v1.dto.SearchResultListDTO;\n import org.wso2.am.integration.clients.publisher.api.v1.dto.SubscriptionListDTO;\n+import org.wso2.am.integration.clients.publisher.api.v1.dto.SubscriptionPolicyDTO;\n import org.wso2.am.integration.clients.publisher.api.v1.dto.ThrottlingPolicyListDTO;\n import org.wso2.am.integration.clients.publisher.api.v1.dto.WorkflowResponseDTO;\n import org.wso2.am.integration.test.Constants;\n@@ -83,6 +84,7 @@\n import org.wso2.am.integration.test.utils.bean.APIResourceBean;\n import org.wso2.am.integration.test.utils.bean.APIRevisionRequest;\n import org.wso2.am.integration.test.utils.bean.APIRevisionDeployUndeployRequest;\n+import org.wso2.carbon.apimgt.api.model.policy.SubscriptionPolicy;\n import org.wso2.carbon.automation.test.utils.http.client.HttpResponse;\n import org.wso2.am.integration.test.ClientAuthenticator;\n \n@@ -957,6 +959,15 @@ public ThrottlingPolicyListDTO getTiers(String policyLevel) throws ApiException\n \n     }\n \n+    public List<SubscriptionPolicyDTO> getSubscriptionPolicies(String tierQuotaTypes) throws ApiException {\n+        List<SubscriptionPolicyDTO> subscriptionPolicyList\n+                = throttlingPoliciesApi.getSubscriptionThrottlingPolicies(tierQuotaTypes, null);\n+        if (subscriptionPolicyList.size() > 0){\n+            return subscriptionPolicyList;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * This method is used to validate roles.\n      *"
  },
  {
    "sha": "16477f068d236d20d99f10826c29e70a04dc015d",
    "filename": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/graphqlqueryanalysis/GraphQLQueryAnalysisTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/graphqlqueryanalysis/GraphQLQueryAnalysisTest.java",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/graphqlqueryanalysis/GraphQLQueryAnalysisTest.java",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/graphqlqueryanalysis/GraphQLQueryAnalysisTest.java?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -11,9 +11,11 @@\n import org.testng.annotations.*;\n import org.wso2.am.integration.clients.admin.ApiResponse;\n import org.wso2.am.integration.clients.admin.api.dto.*;\n+import org.wso2.am.integration.clients.admin.api.dto.RequestCountLimitDTO;\n+import org.wso2.am.integration.clients.admin.api.dto.ThrottleLimitDTO;\n import org.wso2.am.integration.clients.publisher.api.v1.dto.*;\n import org.wso2.am.integration.clients.store.api.v1.dto.SubscriptionDTO;\n-import org.wso2.am.integration.clients.store.api.v1.dto.ApplicationDTO;\n+import org.wso2.am .integration.clients.store.api.v1.dto.ApplicationDTO;\n import org.wso2.am.integration.clients.store.api.v1.dto.ApplicationKeyDTO;\n import org.wso2.am.integration.clients.store.api.v1.dto.ApplicationKeyGenerateRequestDTO;\n import org.wso2.am.integration.test.Constants;"
  },
  {
    "sha": "960132380725504831c684e5b9fd37a6583e16aa",
    "filename": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/publisher/APIM634GetAllTheThrottlingTiersFromThePublisherRestAPITestCase.java",
    "status": "modified",
    "additions": 66,
    "deletions": 2,
    "changes": 68,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/publisher/APIM634GetAllTheThrottlingTiersFromThePublisherRestAPITestCase.java",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/publisher/APIM634GetAllTheThrottlingTiersFromThePublisherRestAPITestCase.java",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/publisher/APIM634GetAllTheThrottlingTiersFromThePublisherRestAPITestCase.java?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -66,6 +66,72 @@ public void testGetAllTheThrottlingTiers() throws Exception {\n         ThrottlingPolicyListDTO throttlingPolicyListDTO = restAPIPublisher.getTiers(\n                 ThrottlingPolicyDTO.PolicyLevelEnum.SUBSCRIPTION.getValue());\n         assertNotNull(throttlingPolicyListDTO, \"There are no API level policies available\");\n+\n+        ThrottlingPolicyDTO tierAsyncBronze = throttlingPolicyListDTO.getList().get(0);\n+        assertEquals(tierAsyncBronze.getDescription(), \"Allows 5000 events per day\",\n+                \"Invalid description of the tier Async Bronze\");\n+        assertEquals(tierAsyncBronze.getDisplayName(), \"AsyncBronze\",\n+                \"Invalid display name of the tier Async Bronze\");\n+        assertEquals(tierAsyncBronze.getName(), \"AsyncBronze\",\n+                \"Invalid name of the tier Async Bronze\");\n+\n+        ThrottlingPolicyDTO tierAsyncGold = throttlingPolicyListDTO.getList().get(1);\n+        assertEquals(tierAsyncGold.getDescription(), \"Allows 50000 events per day\",\n+                \"Invalid description of the tier Async Gold\");\n+        assertEquals(tierAsyncGold.getDisplayName(), \"AsyncGold\",\n+                \"Invalid display name of the tier Async Gold\");\n+        assertEquals(tierAsyncGold.getName(), \"AsyncGold\",\n+                \"Invalid name of the tier Async Gold\");\n+\n+        ThrottlingPolicyDTO tierAsyncSilver = throttlingPolicyListDTO.getList().get(2);\n+        assertEquals(tierAsyncSilver.getDescription(), \"Allows 25000 events per day\",\n+                \"Invalid description of the tier Async Silver\");\n+        assertEquals(tierAsyncSilver.getDisplayName(), \"AsyncSilver\",\n+                \"Invalid display name of the tier Async Silver\");\n+        assertEquals(tierAsyncSilver.getName(), \"AsyncSilver\",\n+                \"Invalid name of the tier Async Silver\");\n+\n+        ThrottlingPolicyDTO tierAsyncUnlimited = throttlingPolicyListDTO.getList().get(3);\n+        assertEquals(tierAsyncUnlimited.getDescription(), \"Allows unlimited events\",\n+                \"Invalid description of the tier Async Unlimited\");\n+        assertEquals(tierAsyncUnlimited.getDisplayName(), \"AsyncUnlimited\",\n+                \"Invalid display name of the tier Async Unlimited\");\n+        assertEquals(tierAsyncUnlimited.getName(), \"AsyncUnlimited\",\n+                \"Invalid name of the tier Async Unlimited\");\n+\n+        ThrottlingPolicyDTO tierAsyncWHBronze = throttlingPolicyListDTO.getList().get(4);\n+        assertEquals(tierAsyncWHBronze.getDescription(), \"Allows 1000 events per month and 500 active \" +\n+                        \"subscriptions\", \"Invalid description of the tier AsyncWHBronze\");\n+        assertEquals(tierAsyncWHBronze.getDisplayName(), \"AsyncWHBronze\",\n+                \"Invalid display name of the tier AsyncWHBronze\");\n+        assertEquals(tierAsyncWHBronze.getName(), \"AsyncWHBronze\",\n+                \"Invalid name of the tier AsyncWHBronze\");\n+\n+        ThrottlingPolicyDTO tierAsyncWHGold = throttlingPolicyListDTO.getList().get(5);\n+        assertEquals(tierAsyncWHGold.getDescription(), \"Allows 10000 events per month and 1000 active\" +\n+                        \" subscriptions\",  \"Invalid description of the tier AsyncWHGold\");\n+        assertEquals(tierAsyncWHGold.getDisplayName(), \"AsyncWHGold\",\n+                \"Invalid display name of the tier AsyncWHGold\");\n+        assertEquals(tierAsyncWHGold.getName(), \"AsyncWHGold\",\n+                \"Invalid name of the tier AsyncWHGold\");\n+\n+        ThrottlingPolicyDTO tierAsyncWHSilver = throttlingPolicyListDTO.getList().get(6);\n+        assertEquals(tierAsyncWHSilver.getDescription(), \"Allows 5000 events per month and 500 active \" +\n+                        \"subscriptions\", \"Invalid description of the tier AsyncWHSilver\");\n+        assertEquals(tierAsyncWHSilver.getDisplayName(), \"AsyncWHSilver\",\n+                \"Invalid display name of the tier AsyncWHSilver\");\n+        assertEquals(tierAsyncWHSilver.getName(), \"AsyncWHSilver\",\n+                \"Invalid name of the tier AsyncWHSilver\");\n+\n+        ThrottlingPolicyDTO tierAsyncWHUnlimited = throttlingPolicyListDTO.getList().get(7);\n+        assertEquals(tierAsyncWHUnlimited.getDescription(), \"Allows unlimited events and unlimited active \" +\n+                        \"subscriptions\", \"Invalid description of the tier AsyncWHUnlimited\");\n+        assertEquals(tierAsyncWHUnlimited.getDisplayName(), \"AsyncWHUnlimited\",\n+                \"Invalid display name of the tier Bronze\");\n+        assertEquals(tierAsyncWHUnlimited.getName(), \"AsyncWHUnlimited\",\n+                \"Invalid name of the tier AsyncWHUnlimited\");\n+\n+\n         //Validate the Tier Bronze\n         ThrottlingPolicyDTO tierBronze = throttlingPolicyListDTO.getList().get(8);\n         assertEquals(tierBronze.getDescription(), \"Allows 1000 requests per minute\",\n@@ -104,6 +170,4 @@ public void testGetAllTheThrottlingTiers() throws Exception {\n \n \n     }\n-\n-\n }"
  },
  {
    "sha": "91748b0657cd61321224b37e4e45eadbb833b4a0",
    "filename": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/publisher/APIMGetAllSubscriptionThrottlingPolicies.java",
    "status": "added",
    "additions": 131,
    "deletions": 0,
    "changes": 131,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/publisher/APIMGetAllSubscriptionThrottlingPolicies.java",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/publisher/APIMGetAllSubscriptionThrottlingPolicies.java",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/am/integration/tests/publisher/APIMGetAllSubscriptionThrottlingPolicies.java?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -0,0 +1,131 @@\n+/*\n+ *\n+ *   Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing,\n+ *   software distributed under the License is distributed on an\n+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *   KIND, either express or implied.  See the License for the\n+ *   specific language governing permissions and limitations\n+ *   under the License.\n+ *\n+ */\n+\n+package org.wso2.am.integration.tests.publisher;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.am.integration.clients.publisher.api.v1.dto.SubscriptionPolicyDTO;\n+import org.wso2.am.integration.test.utils.base.APIMIntegrationBaseTest;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.wso2.carbon.apimgt.api.model.policy.PolicyConstants.EVENT_COUNT_TYPE;\n+\n+public class APIMGetAllSubscriptionThrottlingPolicies extends APIMIntegrationBaseTest {\n+\n+    @Factory(dataProvider = \"userModeDataProvider\")\n+    public APIMGetAllSubscriptionThrottlingPolicies\n+            (TestUserMode userMode) {\n+        this.userMode = userMode;\n+    }\n+\n+    @DataProvider\n+    public static Object[][] userModeDataProvider() {\n+        return new Object[][]{\n+                new Object[]{TestUserMode.SUPER_TENANT_ADMIN},\n+//                new Object[]{TestUserMode.TENANT_ADMIN},\n+        };\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void setEnvironment() throws Exception {\n+        super.init(userMode);\n+    }\n+\n+    @Test(groups = {\"wso2.am\"}, description = \"Get all the subscription throttling polices for event count quota type \")\n+    public void testGetAllSubscriptionThrottlingPoliciesByQuotaType() throws Exception {\n+        List<SubscriptionPolicyDTO> subscriptionPolicyList = restAPIPublisher.getSubscriptionPolicies(EVENT_COUNT_TYPE);\n+        assertNotNull(subscriptionPolicyList, \"There are no subscription policies available\");\n+\n+        for (SubscriptionPolicyDTO subs : subscriptionPolicyList) {\n+            System.out.println(\"Name \" + subs.getDisplayName());\n+        }\n+\n+        SubscriptionPolicyDTO tierAsyncBronze = subscriptionPolicyList.get(2);\n+        assertEquals(tierAsyncBronze.getDescription(), \"Allows 5000 events per day\",\n+                \"Invalid description of the tier Async Bronze\");\n+        assertEquals(tierAsyncBronze.getDisplayName(), \"AsyncBronze\",\n+                \"Invalid display name of the tier Async Bronze\");\n+        assertEquals(tierAsyncBronze.getPolicyName(), \"AsyncBronze\",\n+                \"Invalid name of the tier Async Bronze\");\n+\n+        SubscriptionPolicyDTO tierAsyncGold = subscriptionPolicyList.get(0);\n+        assertEquals(tierAsyncGold.getDescription(), \"Allows 50000 events per day\",\n+                \"Invalid description of the tier Async Gold\");\n+        assertEquals(tierAsyncGold.getDisplayName(), \"AsyncGold\",\n+                \"Invalid display name of the tier Async Gold\");\n+        assertEquals(tierAsyncGold.getPolicyName(), \"AsyncGold\",\n+                \"Invalid name of the tier Async Gold\");\n+\n+        SubscriptionPolicyDTO tierAsyncSilver = subscriptionPolicyList.get(1);\n+        assertEquals(tierAsyncSilver.getDescription(), \"Allows 25000 events per day\",\n+                \"Invalid description of the tier Async Silver\");\n+        assertEquals(tierAsyncSilver.getDisplayName(), \"AsyncSilver\",\n+                \"Invalid display name of the tier Async Silver\");\n+        assertEquals(tierAsyncSilver.getPolicyName(), \"AsyncSilver\",\n+                \"Invalid name of the tier Async Silver\");\n+\n+        SubscriptionPolicyDTO tierAsyncUnlimited = subscriptionPolicyList.get(3);\n+        assertEquals(tierAsyncUnlimited.getDescription(), \"Allows unlimited events\",\n+                \"Invalid description of the tier Async Unlimited\");\n+        assertEquals(tierAsyncUnlimited.getDisplayName(), \"AsyncUnlimited\",\n+                \"Invalid display name of the tier Async Unlimited\");\n+        assertEquals(tierAsyncUnlimited.getPolicyName(), \"AsyncUnlimited\",\n+                \"Invalid name of the tier Async Unlimited\");\n+\n+        SubscriptionPolicyDTO tierAsyncWHBronze = subscriptionPolicyList.get(6);\n+        assertEquals(tierAsyncWHBronze.getDescription(), \"Allows 1000 events per month and 500 active \" +\n+                \"subscriptions\", \"Invalid description of the tier AsyncWHBronze\");\n+        assertEquals(tierAsyncWHBronze.getDisplayName(), \"AsyncWHBronze\",\n+                \"Invalid display name of the tier AsyncWHBronze\");\n+        assertEquals(tierAsyncWHBronze.getPolicyName(), \"AsyncWHBronze\",\n+                \"Invalid name of the tier AsyncWHBronze\");\n+\n+        SubscriptionPolicyDTO tierAsyncWHGold = subscriptionPolicyList.get(4);\n+        assertEquals(tierAsyncWHGold.getDescription(), \"Allows 10000 events per month and 1000 active\" +\n+                \" subscriptions\", \"Invalid description of the tier AsyncWHGold\");\n+        assertEquals(tierAsyncWHGold.getDisplayName(), \"AsyncWHGold\",\n+                \"Invalid display name of the tier AsyncWHGold\");\n+        assertEquals(tierAsyncWHGold.getPolicyName(), \"AsyncWHGold\",\n+                \"Invalid name of the tier AsyncWHGold\");\n+\n+        SubscriptionPolicyDTO tierAsyncWHSilver = subscriptionPolicyList.get(5);\n+        assertEquals(tierAsyncWHSilver.getDescription(), \"Allows 5000 events per month and 500 active \" +\n+                \"subscriptions\", \"Invalid description of the tier AsyncWHSilver\");\n+        assertEquals(tierAsyncWHSilver.getDisplayName(), \"AsyncWHSilver\",\n+                \"Invalid display name of the tier AsyncWHSilver\");\n+        assertEquals(tierAsyncWHSilver.getPolicyName(), \"AsyncWHSilver\",\n+                \"Invalid name of the tier AsyncWHSilver\");\n+\n+        SubscriptionPolicyDTO tierAsyncWHUnlimited = subscriptionPolicyList.get(7);\n+        assertEquals(tierAsyncWHUnlimited.getDescription(), \"Allows unlimited events and unlimited active \" +\n+                \"subscriptions\", \"Invalid description of the tier AsyncWHUnlimited\");\n+        assertEquals(tierAsyncWHUnlimited.getDisplayName(), \"AsyncWHUnlimited\",\n+                \"Invalid display name of the tier Bronze\");\n+        assertEquals(tierAsyncWHUnlimited.getPolicyName(), \"AsyncWHUnlimited\",\n+                \"Invalid name of the tier AsyncWHUnlimited\");\n+    }\n+}"
  },
  {
    "sha": "0de77c28a94bf1364a1a35e28ee6474faa9e6e00",
    "filename": "modules/integration/tests-integration/tests-backend/src/test/resources/testng.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2/product-apim/blob/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-integration/tests-backend/src/test/resources/testng.xml",
    "raw_url": "https://github.com/wso2/product-apim/raw/9a0c126631c6fd80941b1bfbd5a51c9698c20cff/modules/integration/tests-integration/tests-backend/src/test/resources/testng.xml",
    "contents_url": "https://api.github.com/repos/wso2/product-apim/contents/modules/integration/tests-integration/tests-backend/src/test/resources/testng.xml?ref=9a0c126631c6fd80941b1bfbd5a51c9698c20cff",
    "patch": "@@ -191,6 +191,7 @@\n             <class name=\"org.wso2.am.integration.tests.publisher.APIM625AddDocumentationToAnAPIWithDocTypeSupportForumThroughPublisherRestAPITestCase\"/>\n             <class name=\"org.wso2.am.integration.tests.publisher.APIM627AddDocumentationToAnAPIWithDocTypeOtherThroughPublisherRestAPITestCase\"/>\n             <class name=\"org.wso2.am.integration.tests.publisher.APIM634GetAllTheThrottlingTiersFromThePublisherRestAPITestCase\"/>\n+            <class name=\"org.wso2.am.integration.tests.publisher.APIMGetAllSubscriptionThrottlingPolicies\"/>\n             <class name=\"org.wso2.am.integration.tests.publisher.APIM638ValidateTheRoleOfAnExistingUserThroughThePublisherRestAPITestCase\"/>\n             <class name=\"org.wso2.am.integration.tests.publisher.APIM614AddDocumentationToAnAPIWithDocTypeSampleAndSDKThroughPublisherRestAPITestCase\"/>\n             <class name=\"org.wso2.am.integration.tests.publisher.APIResourceWithTemplateTestCase\"/>"
  }
]
