[
  {
    "sha": "4846365e5bcf3b53c62d1357d5985aea0e42ba6c",
    "filename": "components/ntask/org.wso2.carbon.ntask.core/src/main/java/org/wso2/carbon/ntask/core/impl/clustered/ClusteredTaskManager.java",
    "status": "modified",
    "additions": 17,
    "deletions": 11,
    "changes": 28,
    "blob_url": "https://github.com/wso2/carbon-commons/blob/3a4d6579f308f2f3deed173c2f279b312e1324e9/components/ntask/org.wso2.carbon.ntask.core/src/main/java/org/wso2/carbon/ntask/core/impl/clustered/ClusteredTaskManager.java",
    "raw_url": "https://github.com/wso2/carbon-commons/raw/3a4d6579f308f2f3deed173c2f279b312e1324e9/components/ntask/org.wso2.carbon.ntask.core/src/main/java/org/wso2/carbon/ntask/core/impl/clustered/ClusteredTaskManager.java",
    "contents_url": "https://api.github.com/repos/wso2/carbon-commons/contents/components/ntask/org.wso2.carbon.ntask.core/src/main/java/org/wso2/carbon/ntask/core/impl/clustered/ClusteredTaskManager.java?ref=3a4d6579f308f2f3deed173c2f279b312e1324e9",
    "patch": "@@ -43,7 +43,6 @@\n \n     private static final Log log = LogFactory.getLog(ClusteredTaskManager.class);\n \n-\n     public ClusteredTaskManager(TaskRepository taskRepository) throws TaskException {\n         super(taskRepository);\n         this.taskService = TasksDSComponent.getTaskService();\n@@ -212,27 +211,34 @@ public TaskState getTaskState(String taskName) throws TaskException {\n     public boolean deleteTask(String taskName) throws TaskException {\n         boolean result = true;\n         String memberId = null;\n+        String taskLockId = this.getTaskType() + \"_\" + this.getTenantId() + \"_\" + taskName;\n+        Lock lock = this.getClusterComm().getHazelcast().getLock(taskLockId);\n         try {\n+            lock.lock();\n             memberId = this.getMemberIdFromTaskName(taskName, false);\n+            String localMemberId = getMemberId();\n+            // deletion of tasks which are scheduled in other nodes are skipped\n+            if (localMemberId.equals(memberId)) {\n+                result = this.deleteTask(memberId, taskName);\n+                // delete from repository has to be done here, because, this would be the local node\n+                // with read/write registry access, and the remote node will not have write access\n+                result &= this.getTaskRepository().deleteTask(taskName);\n+            } else {\n+                result = false;\n+                log.info(\"The task \" + taskName + \" is not scheduled in this node, hence deletion is skipped.\");\n+            }\n         } catch (TaskException e) {\n             /* if the task is not scheduled anywhere, we can ignore this delete request to the\n              * remote server */\n             if (!Code.NO_TASK_EXISTS.equals(e.getCode())) {\n                 throw e;\n             }\n-        }\n-        try {\n-            /* only if the task is running somewhere, send a delete task call */\n-            if (memberId != null) {\n-                result = this.deleteTask(memberId, taskName);\n-            }\n         } catch (Exception e) {\n             throw new TaskException(\"Error in deleting task: \" + taskName + \" : \" + e.getMessage(),\n-                        Code.UNKNOWN, e);\n+                                    Code.UNKNOWN, e);\n+        } finally {\n+            lock.unlock();\n         }\n-        /* the delete from repository has to be done here, because, this would be the admin node\n-         * with read/write registry access, and the target slave will not have write access */\n-        result &= this.getTaskRepository().deleteTask(taskName);\n         return result;        \n     }\n "
  }
]
