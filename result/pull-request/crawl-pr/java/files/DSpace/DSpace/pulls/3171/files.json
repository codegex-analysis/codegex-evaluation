[
  {
    "sha": "4a07b39777302fc5cd66fe4702cea23930fa569a",
    "filename": "dspace-api/pom.xml",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/pom.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/pom.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/pom.xml?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -523,8 +523,15 @@\n         </dependency>\n         <dependency>\n             <groupId>org.mockito</groupId>\n-            <artifactId>mockito-core</artifactId>\n+            <artifactId>mockito-inline</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <!-- Different version provided by hibernate-ehcache -->\n+                <exclusion>\n+                    <groupId>net.bytebuddy</groupId>\n+                    <artifactId>byte-buddy</artifactId>\n+                </exclusion>\n+            </exclusions>\n         </dependency>\n         <dependency>\n             <groupId>org.springframework</groupId>\n@@ -546,6 +553,11 @@\n                     <groupId>net.bytebuddy</groupId>\n                     <artifactId>byte-buddy</artifactId>\n                 </exclusion>\n+                <!-- We use a later version of mockito -->\n+                <exclusion>\n+                    <groupId>org.mockito</groupId>\n+                    <artifactId>mockito-core</artifactId>\n+                </exclusion>\n             </exclusions>\n         </dependency>\n         <dependency>"
  },
  {
    "sha": "cb8714b80b2f9215c46e94d9acff14028592d90e",
    "filename": "dspace-api/src/main/java/org/dspace/core/Utils.java",
    "status": "modified",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/src/main/java/org/dspace/core/Utils.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/src/main/java/org/dspace/core/Utils.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/core/Utils.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -13,10 +13,13 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.math.BigInteger;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.net.UnknownHostException;\n import java.rmi.dgc.VMID;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n@@ -453,6 +456,40 @@ public static String getHostName(String uriString) {\n         }\n     }\n \n+    /**\n+     * Retrieve the IP address(es) of a given URI string.\n+     * <P>\n+     * At this time, DSpace only supports IPv4, so this method will only return IPv4 addresses.\n+     * @param uriString URI string\n+     * @return IP address(es) in a String array (or null if not found)\n+     */\n+    public static String[] getIPAddresses(String uriString) {\n+        String[] ipAddresses = null;\n+\n+        // First, get the hostname\n+        String hostname = getHostName(uriString);\n+\n+        if (StringUtils.isNotEmpty(hostname)) {\n+            try {\n+                // Then, get the list of all IPs for that hostname\n+                InetAddress[] inetAddresses = InetAddress.getAllByName(hostname);\n+\n+                // Convert array of InetAddress objects to array of IP address Strings\n+                ipAddresses = Arrays.stream(inetAddresses)\n+                                    // Filter our array to ONLY include IPv4 addresses\n+                                    .filter((address) -> address instanceof Inet4Address)\n+                                    // Call getHostAddress() on each to get the IPv4 address as a string\n+                                    .map((address) -> ((Inet4Address) address).getHostAddress())\n+                                    .toArray(String[]::new);\n+            } catch (UnknownHostException ex) {\n+                return null;\n+            }\n+        }\n+\n+        return ipAddresses;\n+    }\n+\n+\n     /**\n      * Replaces configuration placeholders within a String with the corresponding value\n      * from DSpace's Configuration Service."
  },
  {
    "sha": "eda516502c32dfd6f3afc86c51c0d2f8aea84fbf",
    "filename": "dspace-api/src/main/java/org/dspace/service/impl/ClientInfoServiceImpl.java",
    "status": "modified",
    "additions": 64,
    "deletions": 20,
    "changes": 84,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/src/main/java/org/dspace/service/impl/ClientInfoServiceImpl.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/src/main/java/org/dspace/service/impl/ClientInfoServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/service/impl/ClientInfoServiceImpl.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -11,6 +11,7 @@\n \n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.dspace.core.Utils;\n import org.dspace.service.ClientInfoService;\n import org.dspace.services.ConfigurationService;\n import org.dspace.statistics.util.IPTable;\n@@ -41,8 +42,7 @@\n     @Autowired(required = true)\n     public ClientInfoServiceImpl(ConfigurationService configurationService) {\n         this.configurationService = configurationService;\n-        this.trustedProxies = parseTrustedProxyRanges(\n-                configurationService.getArrayProperty(\"proxies.trusted.ipranges\"));\n+        this.trustedProxies = parseTrustedProxyRanges();\n     }\n \n     @Override\n@@ -62,9 +62,8 @@ public String getClientIp(String remoteIp, String xForwardedForHeaderValue) {\n             }\n \n         } else if (StringUtils.isNotBlank(xForwardedForHeaderValue)) {\n-            log.warn(\n-                    \"X-Forwarded-For header detected but useProxiesEnabled is not enabled. \" +\n-                            \"If your dspace is behind a proxy set it to true\");\n+            log.warn(\"X-Forwarded-For header sent from client, but useProxies is not enabled. \" +\n+                         \"To trust X-Forwarded-For headers, set useProxies=true.\");\n         }\n \n         return ip;\n@@ -74,40 +73,86 @@ public String getClientIp(String remoteIp, String xForwardedForHeaderValue) {\n     public boolean isUseProxiesEnabled() {\n         if (useProxiesEnabled == null) {\n             useProxiesEnabled = configurationService.getBooleanProperty(\"useProxies\", true);\n-            log.info(\"useProxies=\" + useProxiesEnabled);\n+            log.info(\"Proxies (useProxies) enabled? \" + useProxiesEnabled);\n         }\n \n         return useProxiesEnabled;\n     }\n \n-    private IPTable parseTrustedProxyRanges(String[] proxyProperty) {\n-        if (ArrayUtils.isEmpty(proxyProperty)) {\n-            return null;\n-        } else {\n-            //Load all supplied proxy IP ranges into the IP table\n-            IPTable ipTable = new IPTable();\n+    /**\n+     * Parse / Determine trusted proxies based on configuration. \"Trusted\" proxies are the IP addresses from which we'll\n+     * allow the X-FORWARDED-FOR header. We don't accept that header from any IP address, as the header could be used\n+     * to spoof/fake your IP address.\n+     * <P>\n+     * If \"proxies.trusted.ipranges\" configuration is specified, we trust ONLY those IP addresses.\n+     * <P>\n+     * If \"proxies.trusted.ipranges\" is UNSPECIFIED, we only trust the IP address(es) associated with ${dspace.ui.url}.\n+     * This is necessary to allow the Angular UI server-side rendering (SSR) to send us the X-FORWARDED-FOR header,\n+     * which it usually uses to specify the original client IP address.\n+     * @return IPTable of trusted IP addresses/ranges, or null if none could be found.\n+     */\n+    private IPTable parseTrustedProxyRanges() {\n+        IPTable ipTable = null;\n+        // Whether we had to look up the UI's IP address (based on its URL), or not\n+        boolean uiUrlLookup = false;\n+\n+        String[] ipAddresses = configurationService.getArrayProperty(\"proxies.trusted.ipranges\");\n+        String uiUrl = configurationService.getProperty(\"dspace.ui.url\");\n+\n+        // If configuration is empty, determine IPs of ${dspace.ui.url} as the default trusted proxy\n+        if (ArrayUtils.isEmpty(ipAddresses)) {\n+            // Get any IP address(es) associated with our UI\n+            ipAddresses = Utils.getIPAddresses(uiUrl);\n+            uiUrlLookup = true;\n+        }\n+\n+        // Only continue if we have IPs to trust.\n+        if (ArrayUtils.isNotEmpty(ipAddresses)) {\n+            ipTable = new IPTable();\n             try {\n-                for (String proxyRange : proxyProperty) {\n-                    ipTable.add(proxyRange);\n+                // Load all IPs into our IP Table\n+                for (String ipAddress : ipAddresses) {\n+                    ipTable.add(ipAddress);\n                 }\n             } catch (IPTable.IPFormatException e) {\n-                log.error(\"Property proxies.trusted.ipranges contains an invalid IP range\", e);\n+                if (uiUrlLookup) {\n+                    log.error(\"IP address found for dspace.ui.url={} was invalid\", uiUrl, e);\n+                } else {\n+                    log.error(\"Property 'proxies.trusted.ipranges' contains an invalid IP range\", e);\n+                }\n                 ipTable = null;\n             }\n+        }\n \n-            return ipTable;\n+        if (ipTable != null) {\n+            log.info(\"Trusted proxies (configure via 'proxies.trusted.ipranges'): {}\", ipTable.toSet().toString());\n         }\n+\n+        return ipTable;\n     }\n \n+    /**\n+     * Whether a request is from a trusted proxy or not. Only returns true if trusted proxies are specified\n+     * and the ipAddress is contained in those proxies. False in all other cases\n+     * @param ipAddress IP address to check for\n+     * @return true if trusted, false otherwise\n+     */\n     private boolean isRequestFromTrustedProxy(String ipAddress) {\n         try {\n-            return trustedProxies == null || trustedProxies.contains(ipAddress);\n+            return trustedProxies != null && trustedProxies.contains(ipAddress);\n         } catch (IPTable.IPFormatException e) {\n             log.error(\"Request contains invalid remote address\", e);\n             return false;\n         }\n     }\n \n+    /**\n+     * Get the first X-FORWARDED-FOR header value which does not match the IP or another proxy IP. This is the most\n+     * likely client IP address when proxies are in use.\n+     * @param remoteIp remote IP address\n+     * @param xForwardedForValue X-FORWARDED-FOR header value passed by that address\n+     * @return likely client IP address from X-FORWARDED-FOR header\n+     */\n     private String getXForwardedForIpValue(String remoteIp, String xForwardedForValue) {\n         String ip = null;\n \n@@ -119,9 +164,8 @@ private String getXForwardedForIpValue(String remoteIp, String xForwardedForValu\n                not equal to the proxy\n             */\n             if (!StringUtils.equals(remoteIp, xfip) && StringUtils.isNotBlank(xfip)\n-                    //if we have trusted proxies, we'll assume that they are not the client IP\n-                    && (trustedProxies == null || !isRequestFromTrustedProxy(xfip))) {\n-\n+                    // if we have trusted proxies, we'll assume that they are not the client IP\n+                    && !isRequestFromTrustedProxy(xfip)) {\n                 ip = xfip.trim();\n             }\n         }"
  },
  {
    "sha": "920fa69d6d31ab6226479e2cb53bf821b4e88597",
    "filename": "dspace-api/src/test/java/org/dspace/core/UtilsTest.java",
    "status": "modified",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/src/test/java/org/dspace/core/UtilsTest.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/src/test/java/org/dspace/core/UtilsTest.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/core/UtilsTest.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -7,13 +7,19 @@\n  */\n package org.dspace.core;\n \n+import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.mockStatic;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n \n import org.dspace.AbstractUnitTest;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.junit.Test;\n+import org.mockito.MockedStatic;\n \n /**\n  * Perform some basic unit tests for Utils Class\n@@ -73,6 +79,31 @@ public void testGetHostName() {\n         assertNull(\"Test invalid URI returns null\", Utils.getHostName(\"&+,?/@=\"));\n     }\n \n+    /**\n+     * Test of getIPAddresses method, of class Utils\n+     */\n+    @Test\n+    public void testGetIPAddresses() throws UnknownHostException {\n+        // Fake a URL & two fake corresponding IP addresses as an InetAddress\n+        String fakeUrl = \"https://dspace.org\";\n+        String fakeHostname = \"dspace.org\";\n+        InetAddress[] fakeInetAddresses =\n+            new InetAddress[] { InetAddress.getByName(\"1.2.3.4\"), InetAddress.getByName(\"5.6.7.8\") };\n+\n+        // Mock responses from InetAddress\n+        try (MockedStatic<InetAddress> mockedInetAddress = mockStatic(InetAddress.class)) {\n+            // When fakeHostname is passed to InetAddress, return fakeInetAddresses\n+            mockedInetAddress.when(() -> InetAddress.getAllByName(fakeHostname)).thenReturn(fakeInetAddresses);\n+\n+            assertNull(\"Test invalid URL returns null\",\n+                       Utils.getIPAddresses(\"not/a-real;url\"));\n+\n+            assertArrayEquals(\"Test fake URL returns fake IPs converted to String Array\",\n+                              new String[] {\"1.2.3.4\", \"5.6.7.8\"},\n+                              Utils.getIPAddresses(fakeUrl));\n+        }\n+    }\n+\n     /**\n      * Test of interpolateConfigsInString method, of class Utils\n      */"
  },
  {
    "sha": "9343ea9e2b804818bca57ac4ea7a5d2ccc84d06a",
    "filename": "dspace-api/src/test/java/org/dspace/service/impl/ClientInfoServiceImplTest.java",
    "status": "modified",
    "additions": 30,
    "deletions": 11,
    "changes": 41,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/src/test/java/org/dspace/service/impl/ClientInfoServiceImplTest.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-api/src/test/java/org/dspace/service/impl/ClientInfoServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/service/impl/ClientInfoServiceImplTest.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -10,14 +10,17 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mockStatic;\n \n import org.dspace.AbstractDSpaceTest;\n+import org.dspace.core.Utils;\n import org.dspace.service.ClientInfoService;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.dspace.statistics.util.DummyHttpServletRequest;\n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.MockedStatic;\n \n /**\n  * Unit test class for the {@link ClientInfoServiceImpl} class which implements\n@@ -100,26 +103,42 @@ public void getClientIpWithMultipleTrustedProxies() {\n \n     @Test\n     public void getClientIpWithoutTrustedProxies() {\n+        // Ensure proxies are on, but no trusted proxies defined\n         configurationService.setProperty(\"useProxies\", true);\n         configurationService.setProperty(\"proxies.trusted.ipranges\", \"\");\n \n-        clientInfoService = new ClientInfoServiceImpl(configurationService);\n+        // Set a URL for our UI, and a fake IP address associated with that url\n+        String fakeUI_URL = \"https://mydspace.edu/\";\n+        String fakeUI_IP  = \"1.2.3.4\";\n+        configurationService.setProperty(\"dspace.ui.url\", fakeUI_URL);\n \n-        String remoteIp = \"127.0.0.1\";\n-        String xForwardedFor = \"10.24.64.14\";\n+        try (MockedStatic<Utils> mockedUtils = mockStatic(Utils.class)) {\n+            // Mock an IP address for mydspace.edu (have it return 1.2.3.4 as the IP address)\n+            mockedUtils.when(() -> Utils.getIPAddresses(fakeUI_URL))\n+                       .thenReturn(new String[]{fakeUI_IP});\n \n-        assertEquals(\"10.24.64.14\",\n-                clientInfoService.getClientIp(remoteIp, xForwardedFor));\n+            ClientInfoService clientInfoServiceMock = new ClientInfoServiceImpl(configurationService);\n \n-        xForwardedFor = \"127.0.0.1,10.24.64.14\";\n+            // Define a fake X-FORWARDED-FOR value returned by our UI\n+            String xForwardedFor = \"10.24.64.14\";\n \n-        assertEquals(\"10.24.64.14\",\n-                clientInfoService.getClientIp(remoteIp, xForwardedFor));\n+            // Verify our UI is still a trusted proxy as its X-FORWARDED-FOR is accepted\n+            assertEquals(\"10.24.64.14\",\n+                         clientInfoServiceMock.getClientIp(fakeUI_IP, xForwardedFor));\n \n-        xForwardedFor = \"10.24.64.14,127.0.0.1\";\n+            // Verify if multiple X-FORWARDED-FOR values, the one NOT matching UI's IP is returned\n+            xForwardedFor = \"1.2.3.4,10.24.64.14\";\n+\n+            assertEquals(\"10.24.64.14\",\n+                         clientInfoServiceMock.getClientIp(fakeUI_IP, xForwardedFor));\n+\n+            xForwardedFor = \"10.24.64.14,1.2.3.4\";\n+\n+            assertEquals(\"10.24.64.14\",\n+                         clientInfoServiceMock.getClientIp(fakeUI_IP, xForwardedFor));\n+\n+        }\n \n-        assertEquals(\"10.24.64.14\",\n-                clientInfoService.getClientIp(remoteIp, xForwardedFor));\n     }\n \n     @Test"
  },
  {
    "sha": "efdb0e0a393e2d7ae3f6fd72efee4c787dbb49c1",
    "filename": "dspace-oai/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-oai/pom.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-oai/pom.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-oai/pom.xml?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -210,7 +210,7 @@\n         </dependency>\n         <dependency>\n             <groupId>org.mockito</groupId>\n-            <artifactId>mockito-core</artifactId>\n+            <artifactId>mockito-inline</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <dependency>"
  },
  {
    "sha": "0ec415dfd0eeb91a9dd71991329e749c67af4d3a",
    "filename": "dspace-server-webapp/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/pom.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/pom.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/pom.xml?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -443,7 +443,7 @@\n         </dependency>\n         <dependency>\n             <groupId>org.mockito</groupId>\n-            <artifactId>mockito-core</artifactId>\n+            <artifactId>mockito-inline</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <!-- Solr Core is needed for Integration Tests (to run a MockSolrServer)     -->"
  },
  {
    "sha": "46dbfea9dc4aab370509c2c2295c81140ec89326",
    "filename": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenHandler.java",
    "status": "modified",
    "additions": 11,
    "deletions": 21,
    "changes": 32,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenHandler.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenHandler.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenHandler.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -98,12 +98,6 @@\n      */\n     protected abstract String getTokenExpirationConfigurationKey();\n \n-    /**\n-     * Get the configuration property key for the include ip.\n-     * @return the configuration property key\n-     */\n-    protected abstract String getTokenIncludeIPConfigurationKey();\n-\n     /**\n      * Get the configuration property key for the encryption enable setting.\n      * @return the configuration property key\n@@ -227,10 +221,6 @@ public String getJwtKey() {\n         return secret;\n     }\n \n-    public boolean getIncludeIP() {\n-        return configurationService.getBooleanProperty(getTokenIncludeIPConfigurationKey(), true);\n-    }\n-\n     public long getExpirationPeriod() {\n         return configurationService.getLongProperty(getTokenExpirationConfigurationKey(), 1800000);\n     }\n@@ -288,7 +278,7 @@ protected boolean isValidToken(HttpServletRequest request, SignedJWT signedJWT,\n         if (ePerson == null || StringUtils.isBlank(ePerson.getSessionSalt())) {\n             return false;\n         } else {\n-            JWSVerifier verifier = new MACVerifier(buildSigningKey(request, ePerson));\n+            JWSVerifier verifier = new MACVerifier(buildSigningKey(ePerson));\n \n             //If token is valid and not expired return eperson in token\n             Date expirationTime = jwtClaimsSet.getExpirationTime();\n@@ -347,7 +337,7 @@ private SignedJWT createSignedJWT(HttpServletRequest request, EPerson ePerson, J\n         SignedJWT signedJWT = new SignedJWT(\n             new JWSHeader(JWSAlgorithm.HS256), claimsSet);\n \n-        JWSSigner signer = new MACSigner(buildSigningKey(request, ePerson));\n+        JWSSigner signer = new MACSigner(buildSigningKey(ePerson));\n         signedJWT.sign(signer);\n         return signedJWT;\n     }\n@@ -385,18 +375,18 @@ private JWTClaimsSet buildJwtClaimsSet(Context context, HttpServletRequest reque\n      * this way the key is always long enough for the HMAC using SHA-256 algorithm.\n      * More information: https://tools.ietf.org/html/rfc7518#section-3.2\n      *\n-     * @param request\n-     * @param ePerson\n-     * @return\n+     * @param ePerson currently authenticated EPerson\n+     * @return signing key for token\n      */\n-    protected String buildSigningKey(HttpServletRequest request, EPerson ePerson) {\n-        String ipAddress = \"\";\n-        if (getIncludeIP()) {\n-            ipAddress = getIpAddress(request);\n-        }\n-        return getJwtKey() + ePerson.getSessionSalt() + ipAddress;\n+    protected String buildSigningKey(EPerson ePerson) {\n+        return getJwtKey() + ePerson.getSessionSalt();\n     }\n \n+    /**\n+     * Get IP Address of client. Only used for logging purposes at this time\n+     * @param request current request\n+     * @return IP address of client\n+     */\n     private String getIpAddress(HttpServletRequest request) {\n         return clientInfoService.getClientIp(request);\n     }"
  },
  {
    "sha": "1fad84165809e2c501ace81c029a87a351473fb4",
    "filename": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/LoginJWTTokenHandler.java",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/LoginJWTTokenHandler.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/LoginJWTTokenHandler.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/LoginJWTTokenHandler.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -30,11 +30,6 @@ protected String getTokenExpirationConfigurationKey() {\n         return \"jwt.login.token.expiration\";\n     }\n \n-    @Override\n-    protected String getTokenIncludeIPConfigurationKey() {\n-        return \"jwt.login.token.include.ip\";\n-    }\n-\n     @Override\n     protected String getEncryptionEnabledConfigurationKey() {\n         return \"jwt.login.encryption.enabled\";"
  },
  {
    "sha": "fc4ab39407a436f093742acf0b1ed50280bf1a95",
    "filename": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/ShortLivedJWTTokenHandler.java",
    "status": "modified",
    "additions": 1,
    "deletions": 6,
    "changes": 7,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/ShortLivedJWTTokenHandler.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/ShortLivedJWTTokenHandler.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/ShortLivedJWTTokenHandler.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -45,7 +45,7 @@ protected boolean isValidToken(HttpServletRequest request, SignedJWT signedJWT,\n         if (ePerson == null || StringUtils.isBlank(ePerson.getSessionSalt())) {\n             return false;\n         } else {\n-            JWSVerifier verifier = new MACVerifier(buildSigningKey(request, ePerson));\n+            JWSVerifier verifier = new MACVerifier(buildSigningKey(ePerson));\n \n             //If token is valid and not expired return eperson in token\n             Date expirationTime = jwtClaimsSet.getExpirationTime();\n@@ -82,11 +82,6 @@ protected String getTokenExpirationConfigurationKey() {\n         return \"jwt.shortLived.token.expiration\";\n     }\n \n-    @Override\n-    protected String getTokenIncludeIPConfigurationKey() {\n-        return \"jwt.shortLived.token.include.ip\";\n-    }\n-\n     @Override\n     protected String getEncryptionEnabledConfigurationKey() {\n         return \"jwt.shortLived.encryption.enabled\";"
  },
  {
    "sha": "f48584a9572d7457c15d47950c22e1d66ef7c2cb",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AnonymousAdditionalAuthorizationFilterIT.java",
    "status": "modified",
    "additions": 19,
    "deletions": 1,
    "changes": 20,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/test/java/org/dspace/app/rest/AnonymousAdditionalAuthorizationFilterIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/test/java/org/dspace/app/rest/AnonymousAdditionalAuthorizationFilterIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/AnonymousAdditionalAuthorizationFilterIT.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -82,13 +82,22 @@ public void verifyIPAuthentication() throws Exception {\n                    .andExpect(status().isUnauthorized());\n \n         // Test that we can access the item using the IP that's configured for the Staff group\n+        // (in our test environment's local.cfg)\n+        getClient().perform(get(\"/api/core/items/\" + staffAccessItem1.getID()).with(ip(\"5.5.5.5\")))\n+                   .andExpect(status().isOk());\n+\n+        // Test that we also can access the item using that same IP via a proxy\n         getClient().perform(get(\"/api/core/items/\" + staffAccessItem1.getID())\n                                 .header(\"X-Forwarded-For\", \"5.5.5.5\"))\n                    .andExpect(status().isOk());\n \n         // Test that we can't access the item using the IP that's configured for the Students group\n+        getClient().perform(get(\"/api/core/items/\" + staffAccessItem1.getID()).with(ip(\"6.6.6.6\")))\n+                   .andExpect(status().isUnauthorized());\n+\n+        // Test that we also can't also access the item using that same IP via a proxy\n         getClient().perform(get(\"/api/core/items/\" + staffAccessItem1.getID())\n-                                .header(\"X-FORWARDED-FOR\", \"6.6.6.6\"))\n+                                .header(\"X-Forwarded-For\", \"6.6.6.6\"))\n                    .andExpect(status().isUnauthorized());\n     }\n \n@@ -103,11 +112,20 @@ public void verifyIPAndPasswordAuthentication() throws Exception {\n                    .andExpect(status().isUnauthorized());\n \n         // Test that we can access the item using the IP that's configured for the Staff group\n+        // (in our test environment's local.cfg)\n+        getClient().perform(get(\"/api/core/items/\" + staffAccessItem1.getID()).with(ip(\"5.5.5.5\")))\n+                   .andExpect(status().isOk());\n+\n+        // Test that we can also access the item using that same IP via a proxy\n         getClient().perform(get(\"/api/core/items/\" + staffAccessItem1.getID())\n                                 .header(\"X-Forwarded-For\", \"5.5.5.5\"))\n                    .andExpect(status().isOk());\n \n         // Test that we can't access the item using the IP that's configured for the Students group\n+        getClient().perform(get(\"/api/core/items/\" + staffAccessItem1.getID()).with(ip(\"6.6.6.6\")))\n+                   .andExpect(status().isUnauthorized());\n+\n+        // Test that we also can't also access the item using that same IP via a proxy\n         getClient().perform(get(\"/api/core/items/\" + staffAccessItem1.getID())\n                                 .header(\"X-Forwarded-For\", \"6.6.6.6\"))\n                    .andExpect(status().isUnauthorized());"
  },
  {
    "sha": "ae0a876ec6720fdbf6f2ba2fb8bb0ee920fb83cf",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java",
    "status": "modified",
    "additions": 12,
    "deletions": 34,
    "changes": 46,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -414,7 +414,7 @@ public void testRefreshTokenWithInvalidCSRF() throws Exception {\n     }\n \n     @Test\n-    // This test is verifying that Spring Security's CORS settings are working as we expect\n+    // This test (and next) is verifying that Spring Security's CORS settings are working as we expect\n     public void testCannotReuseTokenFromUntrustedOrigin() throws Exception {\n         // First, get a valid login token\n         String token = getAuthToken(eperson.getEmail(), password);\n@@ -439,42 +439,18 @@ public void testCannotReuseTokenFromUntrustedOrigin() throws Exception {\n     }\n \n     @Test\n-    public void testReuseTokenWithDifferentIPWhenIPStored() throws Exception {\n-        // Enable IP storage in JWT login token\n-        configurationService.setProperty(\"jwt.login.token.include.ip\", true);\n-\n-        String token = getAuthToken(eperson.getEmail(), password);\n-\n-        getClient(token).perform(get(\"/api/authn/status\"))\n-\n-                .andExpect(status().isOk())\n-                .andExpect(jsonPath(\"$.okay\", is(true)))\n-                .andExpect(jsonPath(\"$.authenticated\", is(true)))\n-                .andExpect(jsonPath(\"$.type\", is(\"status\")));\n-\n-        // Verify a different IP address (behind a proxy, i.e. X-FORWARDED-FOR)\n-        // is *not* able to authenticate with same token\n-        getClient(token).perform(get(\"/api/authn/status\")\n-                                     .header(\"X-FORWARDED-FOR\", \"1.1.1.1\"))\n-                        .andExpect(status().isOk())\n-                        .andExpect(jsonPath(\"$.okay\", is(true)))\n-                        .andExpect(jsonPath(\"$.authenticated\", is(false)))\n-                        .andExpect(jsonPath(\"$.type\", is(\"status\")));\n-\n-        // Verify a different IP address is *not* able to authenticate with same token\n-        getClient(token).perform(get(\"/api/authn/status\")\n-                                    .with(ip(\"1.1.1.1\")))\n-                .andExpect(status().isOk())\n-                .andExpect(jsonPath(\"$.okay\", is(true)))\n-                .andExpect(jsonPath(\"$.authenticated\", is(false)))\n-                .andExpect(jsonPath(\"$.type\", is(\"status\")));\n+    // This test (and previous) is verifying that Spring Security's CORS settings are working as we expect\n+    public void testCannotAuthenticateFromUntrustedOrigin() throws Exception {\n+        // Post a valid username & password from an *untrusted* Origin\n+        getClient().perform(post(\"/api/authn/login\").header(\"Origin\", \"https://example.org\")\n+                                .param(\"user\", eperson.getEmail())\n+                                .param(\"password\", password))\n+                   // should result in a 403 error as Spring Security returns that for untrusted origins\n+                   .andExpect(status().isForbidden());\n     }\n \n     @Test\n-    public void testReuseTokenWithDifferentIPWhenIPNotStored() throws Exception {\n-        // Disable IP storage in JWT login token\n-        configurationService.setProperty(\"jwt.login.token.include.ip\", false);\n-\n+    public void testReuseTokenWithDifferentIP() throws Exception {\n         String token = getAuthToken(eperson.getEmail(), password);\n \n         getClient(token).perform(get(\"/api/authn/status\"))\n@@ -486,6 +462,8 @@ public void testReuseTokenWithDifferentIPWhenIPNotStored() throws Exception {\n \n         // Verify a different IP address (behind a proxy, i.e. X-FORWARDED-FOR)\n         // is able to authenticate with same token\n+        // NOTE: We allow tokens to be used across several IPs to support environments where your IP is not static.\n+        // Also keep in mind that if a token is used from an untrusted Origin, it will be blocked (see prior test).\n         getClient(token).perform(get(\"/api/authn/status\")\n                                      .header(\"X-FORWARDED-FOR\", \"1.1.1.1\"))\n                         .andExpect(status().isOk())"
  },
  {
    "sha": "88a68b6a6e67bf51ba2210399de0c9c4be96316e",
    "filename": "dspace-services/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-services/pom.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace-services/pom.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-services/pom.xml?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -109,7 +109,7 @@\n         </dependency>\n         <dependency>\n             <groupId>org.mockito</groupId>\n-            <artifactId>mockito-core</artifactId>\n+            <artifactId>mockito-inline</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <!-- SPECIAL CASE - need JUNIT at build time and testing time -->"
  },
  {
    "sha": "1f0955d450f0dc49ca715b1a0a88a5aa746ee11e",
    "filename": "dspace-services/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "status": "removed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/DSpace/DSpace/blob/2292d89a6a95fae5d5b2dc9429cf1677e8892b28/dspace-services/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "raw_url": "https://github.com/DSpace/DSpace/raw/2292d89a6a95fae5d5b2dc9429cf1677e8892b28/dspace-services/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-services/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker?ref=2292d89a6a95fae5d5b2dc9429cf1677e8892b28",
    "patch": "@@ -1 +0,0 @@\n-mock-maker-inline"
  },
  {
    "sha": "2e9b9dbf0e9939dcdb4d8a4368a83bfcbd024e41",
    "filename": "dspace/config/dspace.cfg",
    "status": "modified",
    "additions": 16,
    "deletions": 13,
    "changes": 29,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/config/dspace.cfg",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/config/dspace.cfg",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace/config/dspace.cfg?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -335,21 +335,24 @@ http.proxy.host =\n # port number of proxy server\n http.proxy.port =\n \n-# If enabled, the logging and the Solr statistics system will look for\n-# an X-Forwarded-For header. If it finds it, it will use this for the user IP address\n-# Note that server-side rendered Angular UI requests always present the X-Forwarded-For header\n-# with the original client IP address.\n+# If enabled, the logging and the Solr statistics system will look for an X-Forwarded-For header.\n+# If it finds it, it will use this for the user IP address.\n+# NOTE: This is required to be enabled if you plan to use the Angular UI, as the server-side rendering provided in\n+# Angular always passes the original client IP Address to the REST API via the X-Forwarded-For header.\n useProxies = true\n \n # If \"useProxies\" is enabled, the authentication and statistics logging code will read the X-Forwarded-For header in\n # order to determine the correct client IP address. But they will only use that header value when the request is coming\n-# from a trusted proxy server location (e.g. HTTPD on localhost). Leave this property empty to trust X-Forwarded-For\n-# values of all requests. You can specify a range by only listing the first three ip-address blocks, e.g. 128.177.243\n+# from a trusted proxy server location.\n+# By default, ONLY requests from the IP address of ${dspace.ui.url} will be trusted. However, you can use this setting\n+# to override that default and specify additional IP addresses (or ranges) whose X-Forwarded-For header values will\n+# also be trusted.\n+# You can specify a range by only listing the first three ip-address blocks, e.g. 128.177.243\n # You can list multiple IP addresses or ranges by comma-separating them.\n-# If you are running REST & UI on different servers, you should add the UI servers (range) as a proxy.\n-# For example : proxies.trusted.ipranges = 127.0.0.1, 192.168.2\n-# This is necessary because Angular Universal will also behave as a proxy server.\n-proxies.trusted.ipranges = 127.0.0.1\n+# WARNING: If you customize this setting, be sure to include the IP address of ${dspace.ui.url}, otherwise\n+# authentication and other features may not work from the Angular UI.\n+# (Requires reboot of servlet container, e.g. Tomcat, to reload)\n+#proxies.trusted.ipranges = 127.0.0.1\n \n # Spring Boot proxy configuration (can be set in local.cfg or in application.properties).\n # By default, Spring Boot does not automatically use X-Forwarded-* Headers when generating links (and similar) in the\n@@ -1491,10 +1494,10 @@ orcid.api.url = https://pub.orcid.org/v3.0\n orcid.url = https://orcid.org/\n \n # ORCID Credentials\n-# Your public or member API Credentials, see \n+# Your public or member API Credentials, see\n # https://orcid.org/content/register-client-application-0\n-orcid.clientid = \n-orcid.clientsecret = \n+orcid.clientid =\n+orcid.clientsecret =\n \n #ORCID JWT Endpoint\n orcid.oauth.url = https://orcid.org/oauth/token"
  },
  {
    "sha": "d5d162851b73369d40b870e7d96f7f8397cbf826",
    "filename": "dspace/config/local.cfg.EXAMPLE",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/config/local.cfg.EXAMPLE",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/config/local.cfg.EXAMPLE",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace/config/local.cfg.EXAMPLE?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -159,8 +159,9 @@ db.schema = public\n #######################\n # PROXY CONFIGURATION #\n #######################\n-# uncomment and specify both properties if proxy server required\n-# proxy server for external http requests - use regular hostname without port number\n+# Uncomment and specify both properties if proxy server is required for external http requests\n+# (e.g. requests from DSpace to third party services like Creative Commons use this setting when enabled)\n+# Use regular hostname without port number\n #http.proxy.host =\n \n # port number of proxy server\n@@ -196,6 +197,15 @@ db.schema = public\n # Enabled by default in authentication.cfg\n #plugin.sequence.org.dspace.authenticate.AuthenticationMethod = org.dspace.authenticate.PasswordAuthentication\n \n+#####################\n+# REST API SETTINGS #\n+#####################\n+# Allowed Cross-Origin-Resource-Sharing (CORS) origins (in \"Access-Control-Allow-Origin\" header).\n+# Only these origins (client URLs) can successfully authenticate with your REST API.\n+# Defaults to ${dspace.ui.url} if unspecified (as the UI must have access to the REST API).\n+# Multiple allowed origin URLs may be comma separated. Wildcard value (*) is NOT SUPPORTED.\n+# (Requires reboot of servlet container, e.g. Tomcat, to reload)\n+#rest.cors.allowed-origins = ${dspace.ui.url}\n \n #################################################\n # SPRING BOOT SETTINGS (Used by Server Webapp)  #"
  },
  {
    "sha": "42031bd7a87f0102d7d3dab60c5b328a6235b098",
    "filename": "dspace/config/modules/authentication.cfg",
    "status": "modified",
    "additions": 0,
    "deletions": 13,
    "changes": 13,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/config/modules/authentication.cfg",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/config/modules/authentication.cfg",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace/config/modules/authentication.cfg?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -74,13 +74,6 @@ jwt.login.compression.enabled = true\n # Expiration time of a token in milliseconds\n jwt.login.token.expiration = 1800000\n \n-# Restrict tokens to a specific ip-address to prevent theft/session hijacking. This is achieved by making the ip-address\n-# a part of the JWT siging key. If this property is set to false then the ip-address won't be used as part of\n-# the signing key of a jwt token and tokens can be shared over multiple ip-addresses.\n-# For security reasons, this defaults to true\n-jwt.login.token.include.ip = true\n-\n-\n #---------------------------------------------------------------#\n #---Stateless JWT Authentication for downloads of bitstreams----#\n #----------------------among other things-----------------------#\n@@ -105,9 +98,3 @@ jwt.shortLived.compression.enabled = true\n \n # Expiration time of a token in milliseconds\n jwt.shortLived.token.expiration = 2000\n-\n-# Restrict tokens to a specific ip-address to prevent theft/session hijacking. This is achieved by making the ip-address\n-# a part of the JWT siging key. If this property is set to false then the ip-address won't be used as part of\n-# the signing key of a jwt token and tokens can be shared over multiple ip-addresses.\n-# For security reasons, this defaults to true\n-jwt.shortLived.token.include.ip = true"
  },
  {
    "sha": "4571205e18d691b0848d12b3836ff9122de2ed7b",
    "filename": "dspace/config/modules/rest.cfg",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/config/modules/rest.cfg",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/config/modules/rest.cfg",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace/config/modules/rest.cfg?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -3,7 +3,8 @@\n #---------------------------------------------------------------#\n # These configs are used by the RESTv7 module                   #\n #---------------------------------------------------------------#\n-# Allowed CORS origins (in \"Access-Control-Allow-Origin\" header).\n+# Allowed Cross-Origin-Resource-Sharing (CORS) origins (in \"Access-Control-Allow-Origin\" header).\n+# Only these origins (client URLs) can successfully authenticate with your REST API.\n # Defaults to ${dspace.ui.url} if unspecified (as the UI must have access to the REST API).\n # Multiple allowed origin URLs may be comma separated. Wildcard value (*) is NOT SUPPORTED.\n # (Requires reboot of servlet container, e.g. Tomcat, to reload)"
  },
  {
    "sha": "ecfd213879bf1b112ef0067d0be3c9e42a1cd014",
    "filename": "dspace/modules/additions/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/modules/additions/pom.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/modules/additions/pom.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace/modules/additions/pom.xml?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -295,7 +295,7 @@\n       </dependency>\n       <dependency>\n          <groupId>org.mockito</groupId>\n-         <artifactId>mockito-core</artifactId>\n+         <artifactId>mockito-inline</artifactId>\n          <scope>test</scope>\n       </dependency>\n "
  },
  {
    "sha": "bd1820853f137d021aab325031a74ae9fd5a064f",
    "filename": "dspace/modules/server/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 8,
    "changes": 9,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/modules/server/pom.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/dspace/modules/server/pom.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace/modules/server/pom.xml?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -321,15 +321,8 @@ just adding new jar in the classloader</description>\n         </dependency>\n         <dependency>\n             <groupId>org.mockito</groupId>\n-            <artifactId>mockito-core</artifactId>\n+            <artifactId>mockito-inline</artifactId>\n             <scope>test</scope>\n-            <exclusions>\n-                <!-- Newer version is pulled in by hibernate-ehcache -->\n-                <exclusion>\n-                    <groupId>net.bytebuddy</groupId>\n-                    <artifactId>byte-buddy</artifactId>\n-                </exclusion>\n-            </exclusions>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.solr</groupId>"
  },
  {
    "sha": "140e0a9c67e8bcca7dec2c095384619e67d383e4",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/DSpace/DSpace/blob/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/pom.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/baf831ad9956f4f89ee5a0ab09816f994ad6be1a/pom.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/pom.xml?ref=baf831ad9956f4f89ee5a0ab09816f994ad6be1a",
    "patch": "@@ -1196,10 +1196,15 @@\n                         <groupId>org.junit.vintage</groupId>\n                         <artifactId>junit-vintage-engine</artifactId>\n                     </exclusion>\n+                    <!-- We use a later version of Mockito -->\n                     <exclusion>\n                         <groupId>org.mockito</groupId>\n                         <artifactId>mockito-junit-jupiter</artifactId>\n                     </exclusion>\n+                    <exclusion>\n+                        <groupId>org.mockito</groupId>\n+                        <artifactId>mockito-core</artifactId>\n+                    </exclusion>\n                 </exclusions>\n             </dependency>\n \n@@ -1580,8 +1585,8 @@\n             </dependency>\n             <dependency>\n                 <groupId>org.mockito</groupId>\n-                <artifactId>mockito-core</artifactId>\n-                <version>3.1.0</version>\n+                <artifactId>mockito-inline</artifactId>\n+                <version>3.8.0</version>\n                 <scope>test</scope>\n             </dependency>\n             <!-- H2 is an in-memory database used for Unit/Integration tests -->"
  }
]
