[
  {
    "sha": "ea0863e9370a815bef7513f2d8ae8019e924010f",
    "filename": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAPublisherResponse.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAPublisherResponse.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAPublisherResponse.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAPublisherResponse.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -90,7 +90,7 @@ private void parseJSON(InputStream jsonData) throws IOException {\n                     for (int itemIndex = 0; itemIndex < items.length(); itemIndex++) {\n                         SHERPAPublisher sherpaPublisher = new SHERPAPublisher();\n \n-                        JSONObject item = items.getJSONObject(0);\n+                        JSONObject item = items.getJSONObject(itemIndex);\n \n                         // Parse system metadata (per-item / result information)\n                         if (item.has(\"system_metadata\")) {"
  },
  {
    "sha": "da373d4b203e0c507546a6147a6b0af13050f2aa",
    "filename": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -98,7 +98,7 @@ private void parseJSON(InputStream jsonData) throws IOException {\n                         SHERPAPublisher sherpaPublisher = new SHERPAPublisher();\n                         SHERPAJournal sherpaJournal = new SHERPAJournal();\n \n-                        JSONObject item = items.getJSONObject(0);\n+                        JSONObject item = items.getJSONObject(itemIndex);\n \n                         // Parse system metadata (per-item / result information)\n                         if (item.has(\"system_metadata\")) {"
  },
  {
    "sha": "94fe86dcb0de9c8012a237bc31c0bd1bf04b2f7e",
    "filename": "dspace-api/src/main/java/org/dspace/authority/orcid/Orcidv3.java",
    "status": "added",
    "additions": 214,
    "deletions": 0,
    "changes": 214,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/authority/orcid/Orcidv3.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/authority/orcid/Orcidv3.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/authority/orcid/Orcidv3.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,214 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.authority.orcid;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URLEncoder;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.log4j.Logger;\n+import org.dspace.authority.AuthorityValue;\n+import org.dspace.authority.SolrAuthorityInterface;\n+import org.dspace.external.OrcidRestConnector;\n+import org.dspace.external.provider.orcid.xml.XMLtoBio;\n+import org.json.JSONObject;\n+import org.orcid.jaxb.model.v3.release.common.OrcidIdentifier;\n+import org.orcid.jaxb.model.v3.release.record.Person;\n+import org.orcid.jaxb.model.v3.release.search.Result;\n+\n+/**\n+ * @author Jonas Van Goolen (jonas at atmire dot com)\n+ * This class contains all methods for retrieving \"Person\" objects calling the ORCID (version 2) endpoints.\n+ * Additionally, this can also create AuthorityValues based on these returned Person objects\n+ */\n+public class Orcidv3 implements SolrAuthorityInterface {\n+\n+    private static Logger log = Logger.getLogger(Orcidv3.class);\n+\n+    private OrcidRestConnector orcidRestConnector;\n+    private String OAUTHUrl;\n+    private String clientId;\n+    private String clientSecret;\n+\n+    private String accessToken;\n+\n+    public void setOAUTHUrl(String oAUTHUrl) {\n+        OAUTHUrl = oAUTHUrl;\n+    }\n+\n+    public void setClientId(String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    public void setClientSecret(String clientSecret) {\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     *  Initialize the accessToken that is required for all subsequent calls to ORCID\n+     */\n+    public void init() {\n+        if (StringUtils.isBlank(accessToken)\n+                && StringUtils.isNotBlank(clientSecret)\n+                && StringUtils.isNotBlank(clientId)\n+                && StringUtils.isNotBlank(OAUTHUrl)) {\n+            String authenticationParameters = \"?client_id=\" + clientId +\n+                    \"&client_secret=\" + clientSecret +\n+                    \"&scope=/read-public&grant_type=client_credentials\";\n+            try {\n+                HttpPost httpPost = new HttpPost(OAUTHUrl + authenticationParameters);\n+                httpPost.addHeader(\"Accept\", \"application/json\");\n+                httpPost.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+                HttpClient httpClient = HttpClientBuilder.create().build();\n+                HttpResponse getResponse = httpClient.execute(httpPost);\n+\n+                JSONObject responseObject = null;\n+                try (InputStream is = getResponse.getEntity().getContent();\n+                     BufferedReader streamReader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"))) {\n+                    String inputStr;\n+                    while ((inputStr = streamReader.readLine()) != null && responseObject == null) {\n+                        if (inputStr.startsWith(\"{\") && inputStr.endsWith(\"}\") && inputStr.contains(\"access_token\")) {\n+                            try {\n+                                responseObject = new JSONObject(inputStr);\n+                            } catch (Exception e) {\n+                                //Not as valid as I'd hoped, move along\n+                                responseObject = null;\n+                            }\n+                        }\n+                    }\n+                }\n+                if (responseObject != null && responseObject.has(\"access_token\")) {\n+                    accessToken = (String) responseObject.get(\"access_token\");\n+                }\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Error during initialization of the Orcid connector\", e);\n+            }\n+        }\n+    }\n+\n+    public void setOrcidRestConnector(OrcidRestConnector orcidRestConnector) {\n+        this.orcidRestConnector = orcidRestConnector;\n+    }\n+\n+    /**\n+     * Makes an instance of the AuthorityValue with the given information.\n+     * @param text search string\n+     * @return List<AuthorityValue>\n+     */\n+    @Override\n+    public List<AuthorityValue> queryAuthorities(String text, int max) {\n+        init();\n+        List<Person> bios = queryBio(text, max);\n+        List<AuthorityValue> result = new ArrayList<>();\n+        for (Person person : bios) {\n+            AuthorityValue orcidAuthorityValue = Orcidv3AuthorityValue.create(person);\n+            if (orcidAuthorityValue != null) {\n+                result.add(orcidAuthorityValue);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Create an AuthorityValue from a Person retrieved using the given orcid identifier.\n+     * @param id orcid identifier\n+     * @return AuthorityValue\n+     */\n+    public AuthorityValue queryAuthorityID(String id) {\n+        init();\n+        Person person = getBio(id);\n+        AuthorityValue valueFromPerson = Orcidv3AuthorityValue.create(person);\n+        return valueFromPerson;\n+    }\n+\n+    /**\n+     * Retrieve a Person object based on a given orcid identifier\n+     * @param id orcid identifier\n+     * @return Person\n+     */\n+    public Person getBio(String id) {\n+        log.debug(\"getBio called with ID=\" + id);\n+        if (!isValid(id)) {\n+            return null;\n+        }\n+        init();\n+        InputStream bioDocument = orcidRestConnector.get(id + ((id.endsWith(\"/person\")) ? \"\" : \"/person\"), accessToken);\n+        XMLtoBio converter = new XMLtoBio();\n+        Person person = converter.convertSinglePerson(bioDocument);\n+        return person;\n+    }\n+\n+\n+    /**\n+     * Retrieve a list of Person objects.\n+     * @param text search string\n+     * @param start offset to use\n+     * @param rows how many rows to return\n+     * @return List<Person>\n+     */\n+    public List<Person> queryBio(String text, int start, int rows) {\n+        init();\n+        if (rows > 100) {\n+            throw new IllegalArgumentException(\"The maximum number of results to retrieve cannot exceed 100.\");\n+        }\n+\n+        String searchPath = \"search?q=\" + URLEncoder.encode(text) + \"&start=\" + start + \"&rows=\" + rows;\n+        log.debug(\"queryBio searchPath=\" + searchPath + \" accessToken=\" + accessToken);\n+        InputStream bioDocument = orcidRestConnector.get(searchPath, accessToken);\n+        XMLtoBio converter = new XMLtoBio();\n+        List<Result> results = converter.convert(bioDocument);\n+        List<Person> bios = new LinkedList<>();\n+        for (Result result : results) {\n+            OrcidIdentifier orcidIdentifier = result.getOrcidIdentifier();\n+            if (orcidIdentifier != null) {\n+                log.debug(\"Found OrcidId=\" + orcidIdentifier.toString());\n+                String orcid = orcidIdentifier.getPath();\n+                Person bio = getBio(orcid);\n+                if (bio != null) {\n+                    bios.add(bio);\n+                }\n+            }\n+        }\n+        try {\n+            bioDocument.close();\n+        } catch (IOException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+        return bios;\n+    }\n+\n+    /**\n+     * Retrieve a list of Person objects.\n+     * @param text search string\n+     * @param max how many rows to return\n+     * @return List<Person>\n+     */\n+    public List<Person> queryBio(String text, int max) {\n+        return queryBio(text, 0, max);\n+    }\n+\n+    /**\n+     * Check to see if the provided text has the correct ORCID syntax. Since only\n+     * searching on ORCID id is allowed, this way, we filter out any queries that\n+     * would return a blank result anyway\n+     */\n+    private boolean isValid(String text) {\n+        return StringUtils.isNotBlank(text) && text.matches(Orcidv3AuthorityValue.ORCID_ID_SYNTAX);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a3f33364de935c4f56716da73347ccb4c2263e62",
    "filename": "dspace-api/src/main/java/org/dspace/authority/orcid/Orcidv3AuthorityValue.java",
    "status": "added",
    "additions": 362,
    "deletions": 0,
    "changes": 362,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/authority/orcid/Orcidv3AuthorityValue.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/authority/orcid/Orcidv3AuthorityValue.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/authority/orcid/Orcidv3AuthorityValue.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,362 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.authority.orcid;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.ObjectUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.solr.common.SolrDocument;\n+import org.apache.solr.common.SolrInputDocument;\n+import org.dspace.authority.AuthorityValue;\n+import org.dspace.authority.AuthorityValueServiceImpl;\n+import org.dspace.authority.PersonAuthorityValue;\n+import org.dspace.utils.DSpace;\n+import org.orcid.jaxb.model.v3.release.record.Keyword;\n+import org.orcid.jaxb.model.v3.release.record.Name;\n+import org.orcid.jaxb.model.v3.release.record.Person;\n+import org.orcid.jaxb.model.v3.release.record.PersonExternalIdentifier;\n+import org.orcid.jaxb.model.v3.release.record.PersonExternalIdentifiers;\n+import org.orcid.jaxb.model.v3.release.record.ResearcherUrl;\n+\n+/**\n+ * @author Jonas Van Goolen (jonas at atmire dot com)\n+ */\n+public class Orcidv3AuthorityValue extends PersonAuthorityValue {\n+\n+    /*\n+     * The ORCID identifier\n+     */\n+    private String orcid_id;\n+\n+    /*\n+     * Map containing key-value pairs filled in by \"setValues(Person person)\".\n+     * This represents all dynamic information of the object.\n+     */\n+    private Map<String, List<String>> otherMetadata = new HashMap<String, List<String>>();\n+\n+    /**\n+     * The syntax that the ORCID id needs to conform to\n+     */\n+    public static final String ORCID_ID_SYNTAX = \"\\\\d{4}-\\\\d{4}-\\\\d{4}-(\\\\d{3}X|\\\\d{4})\";\n+\n+\n+    /**\n+     * Creates an instance of Orcidv2AuthorityValue with only uninitialized fields.\n+     * This is meant to be filled in with values from an existing record.\n+     * To create a brand new Orcidv2AuthorityValue, use create()\n+     */\n+    public Orcidv3AuthorityValue() {\n+    }\n+\n+    public Orcidv3AuthorityValue(SolrDocument document) {\n+        super(document);\n+    }\n+\n+\n+    public String getOrcid_id() {\n+        return orcid_id;\n+    }\n+\n+    public void setOrcid_id(String orcid_id) {\n+        this.orcid_id = orcid_id;\n+    }\n+\n+    /**\n+     * Create an empty authority.\n+     * @return OrcidAuthorityValue\n+     */\n+    public static Orcidv3AuthorityValue create() {\n+        Orcidv3AuthorityValue orcidAuthorityValue = new Orcidv3AuthorityValue();\n+        orcidAuthorityValue.setId(UUID.randomUUID().toString());\n+        orcidAuthorityValue.updateLastModifiedDate();\n+        orcidAuthorityValue.setCreationDate(new Date());\n+        return orcidAuthorityValue;\n+    }\n+\n+    /**\n+     * Create an authority based on a given orcid bio\n+     * @return OrcidAuthorityValue\n+     */\n+    public static Orcidv3AuthorityValue create(Person person) {\n+        if (person == null) {\n+            return null;\n+        }\n+        Orcidv3AuthorityValue authority = Orcidv3AuthorityValue.create();\n+\n+        authority.setValues(person);\n+\n+        return authority;\n+    }\n+\n+    /**\n+     * Initialize this instance based on a Person object\n+     * @param person Person\n+     */\n+    protected void setValues(Person person) {\n+        Name name = person.getName();\n+\n+        if (!StringUtils.equals(name.getPath(), this.getOrcid_id())) {\n+            this.setOrcid_id(name.getPath());\n+        }\n+\n+        if (!StringUtils.equals(name.getFamilyName().getContent(), this.getLastName())) {\n+            this.setLastName(name.getFamilyName().getContent());\n+        }\n+\n+        if (!StringUtils.equals(name.getGivenNames().getContent(), this.getFirstName())) {\n+            this.setFirstName(name.getGivenNames().getContent());\n+        }\n+\n+        if (name.getCreditName() != null && StringUtils.isNotBlank(name.getCreditName().getContent())) {\n+            if (!this.getNameVariants().contains(name.getCreditName().getContent())) {\n+                this.addNameVariant(name.getCreditName().getContent());\n+            }\n+        }\n+\n+        if (person.getKeywords() != null) {\n+            for (Keyword keyword : person.getKeywords().getKeywords()) {\n+                if (this.isNewMetadata(\"keyword\", keyword.getContent())) {\n+                    this.addOtherMetadata(\"keyword\", keyword.getContent());\n+                }\n+            }\n+        }\n+\n+        PersonExternalIdentifiers externalIdentifiers = person.getExternalIdentifiers();\n+        if (externalIdentifiers != null) {\n+            for (PersonExternalIdentifier externalIdentifier : externalIdentifiers.getExternalIdentifiers()) {\n+                if (this.isNewMetadata(\"external_identifier\", externalIdentifier.getValue())) {\n+                    this.addOtherMetadata(\"external_identifier\", externalIdentifier.getValue());\n+                }\n+            }\n+        }\n+        if (person.getResearcherUrls() != null) {\n+            for (ResearcherUrl researcherUrl : person.getResearcherUrls().getResearcherUrls()) {\n+                if (this.isNewMetadata(\"researcher_url\", researcherUrl.getUrl().getValue())) {\n+                    this.addOtherMetadata(\"researcher_url\", researcherUrl.getUrl().getValue());\n+                }\n+            }\n+\n+        }\n+        if (person.getBiography() != null) {\n+            if (this.isNewMetadata(\"biography\", person.getBiography().getContent())) {\n+                this.addOtherMetadata(\"biography\", person.getBiography().getContent());\n+            }\n+        }\n+\n+        this.setValue(this.getName());\n+\n+    }\n+\n+    /**\n+     * Makes an instance of the AuthorityValue with the given information.\n+     * @param info string info\n+     * @return AuthorityValue\n+     */\n+    @Override\n+    public AuthorityValue newInstance(String info) {\n+        AuthorityValue authorityValue = null;\n+        if (StringUtils.isNotBlank(info)) {\n+            Orcidv3 orcid = new DSpace().getServiceManager().getServiceByName(\"AuthoritySource\", Orcidv3.class);\n+            authorityValue = orcid.queryAuthorityID(info);\n+        } else {\n+            authorityValue = this.create();\n+        }\n+        return authorityValue;\n+    }\n+\n+    @Override\n+    public void setValue(String value) {\n+        super.setValue(value);\n+    }\n+\n+    /**\n+     * Check to see if the provided label / data pair is already present in the \"otherMetadata\" or not\n+     * */\n+    public boolean isNewMetadata(String label, String data) {\n+        List<String> strings = getOtherMetadata().get(label);\n+        boolean update;\n+        if (strings == null) {\n+            update = StringUtils.isNotBlank(data);\n+        } else {\n+            update = !strings.contains(data);\n+        }\n+        return update;\n+    }\n+\n+    /**\n+     * Add additional metadata to the otherMetadata map*/\n+    public void addOtherMetadata(String label, String data) {\n+        List<String> strings = otherMetadata.get(label);\n+        if (strings == null) {\n+            strings = new ArrayList<>();\n+        }\n+        strings.add(data);\n+        otherMetadata.put(label, strings);\n+    }\n+\n+    public Map<String, List<String>> getOtherMetadata() {\n+        return otherMetadata;\n+    }\n+\n+\n+    /**\n+     * Generate a solr record from this instance\n+     * @return SolrInputDocument\n+     */\n+    @Override\n+    public SolrInputDocument getSolrInputDocument() {\n+        SolrInputDocument doc = super.getSolrInputDocument();\n+        if (StringUtils.isNotBlank(getOrcid_id())) {\n+            doc.addField(\"orcid_id\", getOrcid_id());\n+        }\n+\n+        for (String t : otherMetadata.keySet()) {\n+            List<String> data = otherMetadata.get(t);\n+            for (String data_entry : data) {\n+                doc.addField(\"label_\" + t, data_entry);\n+            }\n+        }\n+        return doc;\n+    }\n+\n+    /**\n+     * Information that can be used the choice ui\n+     * @return map\n+     */\n+    @Override\n+    public Map<String, String> choiceSelectMap() {\n+\n+        Map<String, String> map = super.choiceSelectMap();\n+\n+        String orcid_id = getOrcid_id();\n+        if (StringUtils.isNotBlank(orcid_id)) {\n+            map.put(\"orcid\", orcid_id);\n+        }\n+\n+        return map;\n+    }\n+\n+    @Override\n+    public String getAuthorityType() {\n+        return \"orcid\";\n+    }\n+\n+    /**\n+     * Provides a string that will allow this AuthorityType to be recognized and\n+     * provides information to create a new instance to be created using public\n+     * Orcidv2AuthorityValue newInstance(String info).\n+     * \n+     * @return see\n+     *         {@link org.dspace.authority.service.AuthorityValueService#GENERATE\n+     *         AuthorityValueService.GENERATE}\n+     */\n+    @Override\n+    public String generateString() {\n+        String generateString = AuthorityValueServiceImpl.GENERATE + getAuthorityType()\n+                + AuthorityValueServiceImpl.SPLIT;\n+        if (StringUtils.isNotBlank(getOrcid_id())) {\n+            generateString += getOrcid_id();\n+        }\n+        return generateString;\n+    }\n+\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        Orcidv3AuthorityValue that = (Orcidv3AuthorityValue) o;\n+\n+        if (orcid_id != null ? !orcid_id.equals(that.orcid_id) : that.orcid_id != null) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return orcid_id != null ? orcid_id.hashCode() : 0;\n+    }\n+\n+    /**\n+     * The regular equals() only checks if both AuthorityValues describe the same authority.\n+     * This method checks if the AuthorityValues have different information\n+     * E.g. it is used to decide when lastModified should be updated.\n+     * @param o object\n+     * @return true or false\n+     */\n+    @Override\n+    public boolean hasTheSameInformationAs(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.hasTheSameInformationAs(o)) {\n+            return false;\n+        }\n+\n+        Orcidv3AuthorityValue that = (Orcidv3AuthorityValue) o;\n+\n+        if (orcid_id != null ? !orcid_id.equals(that.orcid_id) : that.orcid_id != null) {\n+            return false;\n+        }\n+\n+        for (String key : otherMetadata.keySet()) {\n+            if (otherMetadata.get(key) != null) {\n+                List<String> metadata = otherMetadata.get(key);\n+                List<String> otherMetadata = that.otherMetadata.get(key);\n+                if (otherMetadata == null) {\n+                    return false;\n+                } else {\n+                    HashSet<String> metadataSet = new HashSet<String>(metadata);\n+                    HashSet<String> otherMetadataSet = new HashSet<String>(otherMetadata);\n+                    if (!metadataSet.equals(otherMetadataSet)) {\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                if (that.otherMetadata.get(key) != null) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public void setValues(SolrDocument document) {\n+        super.setValues(document);\n+        this.orcid_id = ObjectUtils.toString(document.getFieldValue(\"orcid_id\"));\n+        for (String key : document.getFieldNames()) {\n+            if (key.startsWith(\"label_\")) {\n+                String keyInternalMap = key.substring(key.indexOf(\"_\") + 1);\n+                Collection<Object> valuesSolr = document.getFieldValues(key);\n+                for (Object valueInternal : valuesSolr) {\n+                    addOtherMetadata(keyInternalMap, (String) valueInternal);\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f25e2c4646b231541b3cf96a2f331a4d2e9c4fc0",
    "filename": "dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthorityServiceImpl.java",
    "status": "modified",
    "additions": 0,
    "deletions": 16,
    "changes": 16,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthorityServiceImpl.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthorityServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthorityServiceImpl.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -156,22 +156,6 @@ public Choices getMatches(String fieldKey, String query, Collection collection,\n         return ma.getMatches(query, start, limit, locale);\n     }\n \n-\n-    @Override\n-    public Choices getMatches(String fieldKey, String query, Collection collection, int start, int limit, String locale,\n-                              boolean externalInput) {\n-        ChoiceAuthority ma = getAuthorityByFieldKeyCollection(fieldKey, collection);\n-        if (ma == null) {\n-            throw new IllegalArgumentException(\n-                \"No choices plugin was configured for  field \\\"\" + fieldKey\n-                    + \"\\\", collection=\" + collection.getID().toString() + \".\");\n-        }\n-        if (externalInput && ma instanceof SolrAuthority) {\n-            ((SolrAuthority) ma).addExternalResultsInNextMatches();\n-        }\n-        return ma.getMatches(query, start, limit, locale);\n-    }\n-\n     @Override\n     public Choices getBestMatch(String fieldKey, String query, Collection collection,\n                                 String locale) {"
  },
  {
    "sha": "c5d00faa94c6eccab0f1d186ab6187142bcc6447",
    "filename": "dspace-api/src/main/java/org/dspace/content/authority/SHERPARoMEOJournalTitle.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/SHERPARoMEOJournalTitle.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/SHERPARoMEOJournalTitle.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/authority/SHERPARoMEOJournalTitle.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,91 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.authority;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.dspace.app.sherpa.SHERPAService;\n+import org.dspace.app.sherpa.v2.SHERPAResponse;\n+import org.dspace.utils.DSpace;\n+\n+/**\n+ * Sample Journal-name authority based on SHERPA/RoMEO v2\n+ *\n+ * WARNING: This is a very crude and incomplete implementation, done mainly\n+ * as a proof-of-concept.  Any site that actually wants to use it will\n+ * probably have to refine it (and give patches back to dspace.org).\n+ *\n+ * @author Larry Stone\n+ * @author Andrea Bollini (andrea.bollini at 4science.it)\n+ * @version $Revision $\n+ * @see SHERPARoMEOProtocol\n+ */\n+public class SHERPARoMEOJournalTitle implements ChoiceAuthority {\n+    private String pluginInstanceName;\n+\n+    public SHERPARoMEOJournalTitle() {\n+        super();\n+    }\n+\n+    @Override\n+    public Choices getMatches(String text, int start, int limit, String locale) {\n+        // punt if there is no query text\n+        if (text == null || text.trim().length() == 0) {\n+            return new Choices(true);\n+        }\n+        SHERPAService sherpaService = new DSpace().getSingletonService(SHERPAService.class);\n+        SHERPAResponse sherpaResponse = sherpaService.performRequest(\"publication\", \"title\",\n+                \"contains word\", text, 0, 0);\n+        Choices result;\n+        if (CollectionUtils.isNotEmpty(sherpaResponse.getJournals())) {\n+            List<Choice> list = sherpaResponse\n+                    .getJournals().stream()\n+                        .skip(start)\n+                        .limit(limit)\n+                        .map(sherpaJournal -> new Choice(sherpaJournal.getIssns().get(0),\n+                            sherpaJournal.getTitles().get(0), sherpaJournal.getTitles().get(0)))\n+                    .collect(Collectors.toList());\n+            int total = sherpaResponse.getJournals().size();\n+            result = new Choices(list.toArray(new Choice[list.size()]), start, total, Choices.CF_ACCEPTED,\n+                    total > (start + limit));\n+        } else {\n+            result = new Choices(false);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public Choices getBestMatch(String text, String locale) {\n+        return getMatches(text, 0, 1, locale);\n+    }\n+\n+    @Override\n+    public String getLabel(String key, String locale) {\n+        SHERPAService sherpaService = new DSpace().getSingletonService(SHERPAService.class);\n+        SHERPAResponse sherpaResponse = sherpaService.performRequest(\"publication\", \"issn\",\n+                \"equals\", key, 0, 1);\n+        if (CollectionUtils.isNotEmpty(sherpaResponse.getJournals())) {\n+            return sherpaResponse.getJournals().get(0).getTitles().get(0);\n+        } else {\n+            return null;\n+        }\n+\n+    }\n+\n+    @Override\n+    public void setPluginInstanceName(String name) {\n+        this.pluginInstanceName = name;\n+    }\n+\n+    @Override\n+    public String getPluginInstanceName() {\n+        return pluginInstanceName;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4fcac6ca27130feee4935444351f74073c24b0e6",
    "filename": "dspace-api/src/main/java/org/dspace/content/authority/SHERPARoMEOPublisher.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/SHERPARoMEOPublisher.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/SHERPARoMEOPublisher.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/authority/SHERPARoMEOPublisher.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,92 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.authority;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.dspace.app.sherpa.SHERPAService;\n+import org.dspace.app.sherpa.v2.SHERPAPublisherResponse;\n+import org.dspace.utils.DSpace;\n+\n+/**\n+ * Sample Publisher name authority based on SHERPA/RoMEO v2\n+ *\n+ *\n+ * WARNING: This is a very crude and incomplete implementation, done mainly\n+ * as a proof-of-concept.  Any site that actually wants to use it will\n+ * probably have to refine it (and give patches back to dspace.org).\n+ *\n+ * @author Larry Stone\n+ * @author Andrea Bollini (andrea.bollini at 4science.it)\n+ * @version $Revision $\n+ * @see SHERPARoMEOProtocol\n+ */\n+public class SHERPARoMEOPublisher implements ChoiceAuthority {\n+    private String pluginInstanceName;\n+\n+    public SHERPARoMEOPublisher() {\n+        super();\n+    }\n+\n+    @Override\n+    public Choices getMatches(String text, int start, int limit, String locale) {\n+        // punt if there is no query text\n+        if (text == null || text.trim().length() == 0) {\n+            return new Choices(true);\n+        }\n+        SHERPAService sherpaService = new DSpace().getSingletonService(SHERPAService.class);\n+        SHERPAPublisherResponse sherpaResponse = sherpaService.performPublisherRequest(\"publisher\", \"name\",\n+                \"contains word\", text, 0, 0);\n+        Choices result;\n+        if (CollectionUtils.isNotEmpty(sherpaResponse.getPublishers())) {\n+            List<Choice> list = sherpaResponse\n+                    .getPublishers().stream()\n+                        .skip(start)\n+                        .limit(limit)\n+                        .map(sherpaPublisher ->\n+                            new Choice(sherpaPublisher.getIdentifier(),\n+                                    sherpaPublisher.getName(), sherpaPublisher.getName()))\n+                    .collect(Collectors.toList());\n+            int total = sherpaResponse.getPublishers().size();\n+            result = new Choices(list.toArray(new Choice[list.size()]), start, total, Choices.CF_ACCEPTED,\n+                    total > (start + limit));\n+        } else {\n+            result = new Choices(false);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public Choices getBestMatch(String text, String locale) {\n+        return getMatches(text, 0, 1, locale);\n+    }\n+\n+    @Override\n+    public String getLabel(String key, String locale) {\n+        SHERPAService sherpaService = new DSpace().getSingletonService(SHERPAService.class);\n+        SHERPAPublisherResponse sherpaResponse = sherpaService.performPublisherRequest(\"publisher\", \"id\",\n+                \"equals\", key, 0, 1);\n+        if (CollectionUtils.isNotEmpty(sherpaResponse.getPublishers())) {\n+            return sherpaResponse.getPublishers().get(0).getName();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public void setPluginInstanceName(String name) {\n+        this.pluginInstanceName = name;\n+    }\n+\n+    @Override\n+    public String getPluginInstanceName() {\n+        return pluginInstanceName;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c163c8cc90332a63b34db18966fffe396455beb6",
    "filename": "dspace-api/src/main/java/org/dspace/content/authority/SolrAuthority.java",
    "status": "modified",
    "additions": 8,
    "deletions": 15,
    "changes": 23,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/SolrAuthority.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/SolrAuthority.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/authority/SolrAuthority.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -53,8 +53,6 @@\n \n     private static final Logger log = LogManager.getLogger(SolrAuthority.class);\n \n-    protected boolean externalResults = false;\n-\n     protected final AuthorityValueService authorityValueService\n             = AuthorityServiceFactory.getInstance().getAuthorityValueService();\n \n@@ -95,9 +93,6 @@ public Choices getMatches(String text, int start, int limit, String locale,\n         queryArgs.set(CommonParams.START, start);\n         //We add one to our facet limit so that we know if there are more matches\n         int maxNumberOfSolrResults = limit + 1;\n-        if (externalResults) {\n-            maxNumberOfSolrResults = configurationService.getIntProperty(\"xmlui.lookup.select.size\", 12);\n-        }\n         queryArgs.set(CommonParams.ROWS, maxNumberOfSolrResults);\n \n         String sortField = \"value\";\n@@ -135,14 +130,16 @@ public Choices getMatches(String text, int start, int limit, String locale,\n                     }\n                 }\n \n-                if (externalResults && StringUtils.isNotBlank(text)) {\n+                if (StringUtils.isNotBlank(text)) {\n                     int sizeFromSolr = alreadyPresent.size();\n-                    int maxExternalResults = limit <= 10 ? Math.max(limit - sizeFromSolr, 2) : Math\n-                        .max(limit - 10 - sizeFromSolr, 2) + limit - 10;\n+                    int maxExternalResults = sizeFromSolr < limit ? limit + 1 : sizeFromSolr + 1;\n+                    // force an upper limit for external results\n+                    if (maxExternalResults > 100) {\n+                        maxExternalResults = 100;\n+                    }\n                     addExternalResults(text, choices, alreadyPresent, maxExternalResults);\n                 }\n \n-\n                 // hasMore = (authDocs.size() == (limit + 1));\n                 hasMore = true;\n             }\n@@ -171,8 +168,9 @@ protected void addExternalResults(String text, ArrayList<Choice> choices, List<A\n                                       int max) {\n         if (source != null) {\n             try {\n+             // max has been already adapted to consider the need to filter already found entries\n                 List<AuthorityValue> values = source\n-                    .queryAuthorities(text, max * 2); // max*2 because results get filtered\n+                    .queryAuthorities(text, max);\n \n                 // filtering loop\n                 Iterator<AuthorityValue> iterator = values.iterator();\n@@ -196,7 +194,6 @@ protected void addExternalResults(String text, ArrayList<Choice> choices, List<A\n             } catch (Exception e) {\n                 log.error(\"Error\", e);\n             }\n-            this.externalResults = false;\n         } else {\n             log.warn(\"external source for authority not configured\");\n         }\n@@ -288,10 +285,6 @@ public static AuthoritySearchService getSearchService() {\n         return manager.getServiceByName(AuthoritySearchService.class.getName(), AuthoritySearchService.class);\n     }\n \n-    public void addExternalResultsInNextMatches() {\n-        this.externalResults = true;\n-    }\n-\n     @Override\n     public void setPluginInstanceName(String name) {\n         authorityName = name;"
  },
  {
    "sha": "eb34de29c14b1f4da83817c300027c8a309692a5",
    "filename": "dspace-api/src/main/java/org/dspace/content/authority/service/ChoiceAuthorityService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/service/ChoiceAuthorityService.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/content/authority/service/ChoiceAuthorityService.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/authority/service/ChoiceAuthorityService.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -89,9 +89,6 @@ public Choices getMatches(String schema, String element, String qualifier,\n     public Choices getMatches(String fieldKey, String query, Collection collection,\n                               int start, int limit, String locale);\n \n-    public Choices getMatches(String fieldKey, String query, Collection collection, int start, int limit, String locale,\n-                              boolean externalInput);\n-\n     /**\n      * Wrapper that calls getBestMatch method of the plugin corresponding to\n      * the metadata field defined by single field key."
  },
  {
    "sha": "03f172853e0e4de16a760e7961531fd2cd612d93",
    "filename": "dspace-api/src/main/java/org/dspace/external/provider/impl/SHERPAv2PublisherDataProvider.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/external/provider/impl/SHERPAv2PublisherDataProvider.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/main/java/org/dspace/external/provider/impl/SHERPAv2PublisherDataProvider.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/external/provider/impl/SHERPAv2PublisherDataProvider.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -90,7 +90,7 @@ public void init() throws IOException {}\n     public List<ExternalDataObject> searchExternalDataObjects(String query, int start, int limit) {\n         // Search SHERPA for publishers with the query term in the title (name)\n         SHERPAPublisherResponse sherpaResponse = sherpaService.performPublisherRequest(\n-            \"publication\", \"title\", \"contains word\", query, start, limit);\n+            \"publisher\", \"name\", \"contains word\", query, start, limit);\n \n         // If at least one publisher was found, convert to a list of ExternalDataObjects and return\n         if (CollectionUtils.isNotEmpty(sherpaResponse.getPublishers())) {"
  },
  {
    "sha": "4a73b215cd4bbf51c88eec406783f59eb2456cd0",
    "filename": "dspace-api/src/test/data/dspaceFolder/config/spring/api/orcid-authority-services.xml",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/data/dspaceFolder/config/spring/api/orcid-authority-services.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/data/dspaceFolder/config/spring/api/orcid-authority-services.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/data/dspaceFolder/config/spring/api/orcid-authority-services.xml?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+           http://www.springframework.org/schema/beans/spring-beans.xsd\n+           http://www.springframework.org/schema/context\n+           http://www.springframework.org/schema/context/spring-context.xsd\">\n+\n+    <context:annotation-config /> <!-- allows us to use spring annotations in beans -->\n+\n+    <!-- Authority control -->\n+    <bean class=\"org.dspace.authority.AuthoritySolrServiceImpl\" id=\"org.dspace.authority.AuthoritySearchService\"/>\n+    <alias name=\"org.dspace.authority.AuthoritySearchService\" alias=\"org.dspace.authority.indexer.AuthorityIndexingService\"/>\n+\n+    <bean id=\"dspace.DSpaceAuthorityIndexer\" class=\"org.dspace.authority.indexer.DSpaceAuthorityIndexer\"/>\n+\n+    <alias name=\"OrcidSource\" alias=\"AuthoritySource\"/>\n+    <bean name=\"OrcidSource\" class=\"org.dspace.authority.orcid.MockOrcid\" />\n+ \n+    <bean name=\"AuthorityTypes\" class=\"org.dspace.authority.AuthorityTypes\">\n+        <property name=\"types\">\n+            <list>\n+                <bean class=\"org.dspace.authority.orcid.Orcidv3AuthorityValue\"/>\n+                <bean class=\"org.dspace.authority.PersonAuthorityValue\"/>\n+            </list>\n+        </property>\n+        <property name=\"fieldDefaults\">\n+            <map>\n+                <entry key=\"dc_contributor_author\">\n+                    <bean class=\"org.dspace.authority.PersonAuthorityValue\"/>\n+                </entry>\n+            </map>\n+        </property>\n+    </bean>\n+\n+</beans>"
  },
  {
    "sha": "adb2340f10c781c0f034168d5ed3b8ce64ed22c6",
    "filename": "dspace-api/src/test/data/dspaceFolder/config/spring/api/spring-dspace-addon-sherpa-services.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/data/dspaceFolder/config/spring/api/spring-dspace-addon-sherpa-services.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/data/dspaceFolder/config/spring/api/spring-dspace-addon-sherpa-services.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/data/dspaceFolder/config/spring/api/spring-dspace-addon-sherpa-services.xml?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -19,7 +19,9 @@\n \n     <context:annotation-config/> <!-- allows us to use spring annotations in beans -->\n \n-    <bean class=\"org.dspace.app.sherpa.MockSHERPAService\" id=\"org.dspace.app.sherpa.MockSHERPAService\">\n+    <!-- during test we need the mock sherpa service everywhere -->\n+    <alias name=\"org.dspace.app.sherpa.SHERPAService\" alias=\"org.dspace.app.sherpa.MockSHERPAService\"/>\n+    <bean class=\"org.dspace.app.sherpa.MockSHERPAService\" id=\"org.dspace.app.sherpa.SHERPAService\">\n         <property name=\"maxNumberOfTries\" value=\"3\"/>\n         <property name=\"sleepBetweenTimeouts\" value=\"2000\"/>\n         <property name=\"timeout\" value=\"5000\"/>"
  },
  {
    "sha": "8cedfc360c7c128939b7003025eea05966a18a62",
    "filename": "dspace-api/src/test/java/org/dspace/authority/orcid/MockOrcid.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/java/org/dspace/authority/orcid/MockOrcid.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/java/org/dspace/authority/orcid/MockOrcid.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/authority/orcid/MockOrcid.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,54 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.authority.orcid;\n+\n+import static org.mockito.Mockito.when;\n+\n+import java.io.InputStream;\n+\n+import org.dspace.external.OrcidRestConnector;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Mock the ORCID source using a mock rest connector so that query will be\n+ * resolved against static file\n+ * \n+ * @author Andrea Bollini (andrea.bollini at 4science.it)\n+ *\n+ */\n+public class MockOrcid extends Orcidv3 {\n+\n+    @Override\n+    public void init() {\n+        OrcidRestConnector orcidRestConnector = Mockito.mock(OrcidRestConnector.class);\n+        when(orcidRestConnector.get(ArgumentMatchers.startsWith(\"search?\"), ArgumentMatchers.any()))\n+        .thenAnswer(new Answer<InputStream>() {\n+                public InputStream answer(InvocationOnMock invocation) {\n+                    return this.getClass().getResourceAsStream(\"orcid-search-noresults.xml\");\n+                }\n+            });\n+        when(orcidRestConnector.get(ArgumentMatchers.startsWith(\"search?q=Bollini\"), ArgumentMatchers.any()))\n+            .thenAnswer(new Answer<InputStream>() {\n+                    public InputStream answer(InvocationOnMock invocation) {\n+                        return this.getClass().getResourceAsStream(\"orcid-search.xml\");\n+                    }\n+                });\n+        when(orcidRestConnector.get(ArgumentMatchers.endsWith(\"/person\"), ArgumentMatchers.any()))\n+            .thenAnswer(new Answer<InputStream>() {\n+                    public InputStream answer(InvocationOnMock invocation) {\n+                        return this.getClass().getResourceAsStream(\"orcid-person-record.xml\");\n+                    }\n+                });\n+\n+        setOrcidRestConnector(orcidRestConnector);\n+    }\n+\n+}"
  },
  {
    "sha": "ed51b8e50db278aab0bfa8edcfbe2d4a5dcc65d7",
    "filename": "dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-person-record.xml",
    "status": "added",
    "additions": 234,
    "deletions": 0,
    "changes": 234,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-person-record.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-person-record.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-person-record.xml?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,234 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<person:person path=\"/0000-0002-9029-1854/person\" xmlns:internal=\"http://www.orcid.org/ns/internal\" xmlns:education=\"http://www.orcid.org/ns/education\" xmlns:distinction=\"http://www.orcid.org/ns/distinction\" xmlns:deprecated=\"http://www.orcid.org/ns/deprecated\" xmlns:other-name=\"http://www.orcid.org/ns/other-name\" xmlns:membership=\"http://www.orcid.org/ns/membership\" xmlns:error=\"http://www.orcid.org/ns/error\" xmlns:common=\"http://www.orcid.org/ns/common\" xmlns:record=\"http://www.orcid.org/ns/record\" xmlns:personal-details=\"http://www.orcid.org/ns/personal-details\" xmlns:keyword=\"http://www.orcid.org/ns/keyword\" xmlns:email=\"http://www.orcid.org/ns/email\" xmlns:external-identifier=\"http://www.orcid.org/ns/external-identifier\" xmlns:funding=\"http://www.orcid.org/ns/funding\" xmlns:preferences=\"http://www.orcid.org/ns/preferences\" xmlns:address=\"http://www.orcid.org/ns/address\" xmlns:invited-position=\"http://www.orcid.org/ns/invited-position\" xmlns:work=\"http://www.orcid.org/ns/work\" xmlns:history=\"http://www.orcid.org/ns/history\" xmlns:employment=\"http://www.orcid.org/ns/employment\" xmlns:qualification=\"http://www.orcid.org/ns/qualification\" xmlns:service=\"http://www.orcid.org/ns/service\" xmlns:person=\"http://www.orcid.org/ns/person\" xmlns:activities=\"http://www.orcid.org/ns/activities\" xmlns:researcher-url=\"http://www.orcid.org/ns/researcher-url\" xmlns:peer-review=\"http://www.orcid.org/ns/peer-review\" xmlns:bulk=\"http://www.orcid.org/ns/bulk\" xmlns:research-resource=\"http://www.orcid.org/ns/research-resource\">\n+    <common:last-modified-date>2018-02-05T23:27:36.636Z</common:last-modified-date>\n+    <person:name visibility=\"public\" path=\"0000-0002-9029-1854\">\n+        <common:created-date>2016-04-15T23:17:03.663Z</common:created-date>\n+        <common:last-modified-date>2016-04-15T23:17:03.663Z</common:last-modified-date>\n+        <personal-details:given-names>Andrea</personal-details:given-names>\n+        <personal-details:family-name>Bollini</personal-details:family-name>\n+    </person:name>\n+    <other-name:other-names path=\"/0000-0002-9029-1854/other-names\"/>\n+    <researcher-url:researcher-urls path=\"/0000-0002-9029-1854/researcher-urls\">\n+        <common:last-modified-date>2017-07-18T15:10:48.940Z</common:last-modified-date>\n+        <researcher-url:researcher-url put-code=\"1005571\" visibility=\"public\" path=\"/0000-0002-9029-1854/researcher-urls/1005571\" display-index=\"5\">\n+            <common:created-date>2017-01-16T08:12:12.946Z</common:created-date>\n+            <common:last-modified-date>2017-07-18T15:10:48.940Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <researcher-url:url-name>Linkedin</researcher-url:url-name>\n+            <researcher-url:url>https://it.linkedin.com/in/andreabollini</researcher-url:url>\n+        </researcher-url:researcher-url>\n+        <researcher-url:researcher-url put-code=\"369007\" visibility=\"public\" path=\"/0000-0002-9029-1854/researcher-urls/369007\" display-index=\"4\">\n+            <common:created-date>2014-11-06T10:37:30.383Z</common:created-date>\n+            <common:last-modified-date>2017-07-18T15:10:48.940Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <researcher-url:url-name>4Science</researcher-url:url-name>\n+            <researcher-url:url>http://www.4science.it/en/</researcher-url:url>\n+        </researcher-url:researcher-url>\n+        <researcher-url:researcher-url put-code=\"369009\" visibility=\"public\" path=\"/0000-0002-9029-1854/researcher-urls/369009\" display-index=\"3\">\n+            <common:created-date>2014-11-06T10:37:30.412Z</common:created-date>\n+            <common:last-modified-date>2017-07-18T15:10:48.940Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <researcher-url:url-name>DSpace</researcher-url:url-name>\n+            <researcher-url:url>http://www.dspace.org</researcher-url:url>\n+        </researcher-url:researcher-url>\n+        <researcher-url:researcher-url put-code=\"369008\" visibility=\"public\" path=\"/0000-0002-9029-1854/researcher-urls/369008\" display-index=\"2\">\n+            <common:created-date>2014-11-06T10:37:30.398Z</common:created-date>\n+            <common:last-modified-date>2017-07-18T15:10:48.940Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <researcher-url:url-name>DSpace-CRIS</researcher-url:url-name>\n+            <researcher-url:url>https://wiki.duraspace.org/display/DSPACECRIS</researcher-url:url>\n+        </researcher-url:researcher-url>\n+    </researcher-url:researcher-urls>\n+    <email:emails path=\"/0000-0002-9029-1854/email\">\n+        <common:last-modified-date>2016-09-12T11:22:47.354Z</common:last-modified-date>\n+        <email:email visibility=\"public\" verified=\"true\" primary=\"true\">\n+            <common:created-date>2016-09-12T10:45:26.123Z</common:created-date>\n+            <common:last-modified-date>2016-09-12T11:22:47.354Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <email:email>andrea.bollini@4science.it</email:email>\n+        </email:email>\n+    </email:emails>\n+    <address:addresses path=\"/0000-0002-9029-1854/address\">\n+        <common:last-modified-date>2016-06-06T15:29:36.952Z</common:last-modified-date>\n+        <address:address put-code=\"240615\" visibility=\"public\" path=\"/0000-0002-9029-1854/address/240615\" display-index=\"0\">\n+            <common:created-date>2016-01-24T18:24:26.704Z</common:created-date>\n+            <common:last-modified-date>2016-06-06T15:29:36.952Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <address:country>IT</address:country>\n+        </address:address>\n+    </address:addresses>\n+    <keyword:keywords path=\"/0000-0002-9029-1854/keywords\">\n+        <common:last-modified-date>2016-03-01T11:03:22.508Z</common:last-modified-date>\n+        <keyword:keyword put-code=\"7508\" visibility=\"public\" path=\"/0000-0002-9029-1854/keywords/7508\" display-index=\"3\">\n+            <common:created-date>2013-05-30T10:55:45.614Z</common:created-date>\n+            <common:last-modified-date>2016-03-01T11:03:22.508Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <keyword:content>Software</keyword:content>\n+        </keyword:keyword>\n+        <keyword:keyword put-code=\"7509\" visibility=\"public\" path=\"/0000-0002-9029-1854/keywords/7509\" display-index=\"2\">\n+            <common:created-date>2013-05-30T10:55:45.614Z</common:created-date>\n+            <common:last-modified-date>2016-03-01T11:03:22.508Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <keyword:content> Open Source</keyword:content>\n+        </keyword:keyword>\n+        <keyword:keyword put-code=\"12596\" visibility=\"public\" path=\"/0000-0002-9029-1854/keywords/12596\" display-index=\"1\">\n+            <common:created-date>2013-05-30T10:55:45.614Z</common:created-date>\n+            <common:last-modified-date>2016-03-01T11:03:22.508Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <keyword:content> JAVA</keyword:content>\n+        </keyword:keyword>\n+        <keyword:keyword put-code=\"381655\" visibility=\"public\" path=\"/0000-0002-9029-1854/keywords/381655\" display-index=\"0\">\n+            <common:created-date>2016-03-01T11:03:22.491Z</common:created-date>\n+            <common:last-modified-date>2016-03-01T11:03:22.491Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <keyword:content>CERIF</keyword:content>\n+        </keyword:keyword>\n+        <keyword:keyword put-code=\"381656\" visibility=\"public\" path=\"/0000-0002-9029-1854/keywords/381656\" display-index=\"0\">\n+            <common:created-date>2016-03-01T11:03:22.502Z</common:created-date>\n+            <common:last-modified-date>2016-03-01T11:03:22.502Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <keyword:content>CRIS</keyword:content>\n+        </keyword:keyword>\n+        <keyword:keyword put-code=\"381657\" visibility=\"public\" path=\"/0000-0002-9029-1854/keywords/381657\" display-index=\"0\">\n+            <common:created-date>2016-03-01T11:03:22.503Z</common:created-date>\n+            <common:last-modified-date>2016-03-01T11:03:22.503Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <keyword:content>RIMS</keyword:content>\n+        </keyword:keyword>\n+        <keyword:keyword put-code=\"381658\" visibility=\"public\" path=\"/0000-0002-9029-1854/keywords/381658\" display-index=\"0\">\n+            <common:created-date>2016-03-01T11:03:22.504Z</common:created-date>\n+            <common:last-modified-date>2016-03-01T11:03:22.504Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <keyword:content>Open Standards</keyword:content>\n+        </keyword:keyword>\n+        <keyword:keyword put-code=\"381659\" visibility=\"public\" path=\"/0000-0002-9029-1854/keywords/381659\" display-index=\"0\">\n+            <common:created-date>2016-03-01T11:03:22.505Z</common:created-date>\n+            <common:last-modified-date>2016-03-01T11:03:22.505Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-orcid>\n+                <common:source-name>Andrea Bollini</common:source-name>\n+            </common:source>\n+            <keyword:content>OAI-PMH</keyword:content>\n+        </keyword:keyword>\n+    </keyword:keywords>\n+    <external-identifier:external-identifiers path=\"/0000-0002-9029-1854/external-identifiers\">\n+        <common:last-modified-date>2018-02-05T23:27:36.636Z</common:last-modified-date>\n+        <external-identifier:external-identifier put-code=\"153301\" visibility=\"public\" path=\"/0000-0002-9029-1854/external-identifiers/153301\" display-index=\"0\">\n+            <common:created-date>2013-05-30T10:55:45.614Z</common:created-date>\n+            <common:last-modified-date>2018-02-05T23:27:36.636Z</common:last-modified-date>\n+            <common:source>\n+                <common:source-client-id>\n+                    <common:uri>https://orcid.org/client/0000-0002-5982-8983</common:uri>\n+                    <common:path>0000-0002-5982-8983</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:source-client-id>\n+                <common:source-name>Scopus - Elsevier</common:source-name>\n+                <common:assertion-origin-orcid>\n+                    <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+                    <common:path>0000-0002-9029-1854</common:path>\n+                    <common:host>orcid.org</common:host>\n+                </common:assertion-origin-orcid>\n+                <common:assertion-origin-name>Andrea Bollini</common:assertion-origin-name>\n+            </common:source>\n+            <common:external-id-type>Scopus Author ID</common:external-id-type>\n+            <common:external-id-value>55484808800</common:external-id-value>\n+            <common:external-id-url>http://www.scopus.com/inward/authorDetails.url?authorID=55484808800&amp;partnerID=MN8TOARS</common:external-id-url>\n+            <common:external-id-relationship>self</common:external-id-relationship>\n+        </external-identifier:external-identifier>\n+    </external-identifier:external-identifiers>\n+</person:person>\n\\ No newline at end of file"
  },
  {
    "sha": "63bb7c0b32d84234f62f59c99d3b32e7cd66e084",
    "filename": "dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-search-noresults.xml",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-search-noresults.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-search-noresults.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-search-noresults.xml?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,4 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<search:search num-found=\"1\" xmlns:search=\"http://www.orcid.org/ns/search\" xmlns:common=\"http://www.orcid.org/ns/common\">\n+    <search:result />\n+</search:search>\n\\ No newline at end of file"
  },
  {
    "sha": "3f7fe9a284a4e110b391a43aa98bb791a098b88c",
    "filename": "dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-search.xml",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-search.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-search.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/resources/org/dspace/authority/orcid/orcid-search.xml?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<search:search num-found=\"1\" xmlns:search=\"http://www.orcid.org/ns/search\" xmlns:common=\"http://www.orcid.org/ns/common\">\n+    <search:result>\n+        <common:orcid-identifier>\n+            <common:uri>https://orcid.org/0000-0002-9029-1854</common:uri>\n+            <common:path>0000-0002-9029-1854</common:path>\n+            <common:host>orcid.org</common:host>\n+        </common:orcid-identifier>\n+    </search:result>\n+</search:search>\n\\ No newline at end of file"
  },
  {
    "sha": "5ea8cdb2312c1c3950b183452d3df5e841db9b2c",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/VocabularyRestRepositoryIT.java",
    "status": "modified",
    "additions": 73,
    "deletions": 6,
    "changes": 79,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-server-webapp/src/test/java/org/dspace/app/rest/VocabularyRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace-server-webapp/src/test/java/org/dspace/app/rest/VocabularyRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/VocabularyRestRepositoryIT.java?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -19,6 +19,7 @@\n import org.dspace.app.rest.matcher.VocabularyMatcher;\n import org.dspace.app.rest.repository.SubmissionFormRestRepository;\n import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authority.AuthorityValueServiceImpl;\n import org.dspace.authority.PersonAuthorityValue;\n import org.dspace.authority.factory.AuthorityServiceFactory;\n import org.dspace.builder.CollectionBuilder;\n@@ -56,7 +57,11 @@\n     public void setup() throws Exception {\n         super.setUp();\n         configurationService.setProperty(\"plugin.named.org.dspace.content.authority.ChoiceAuthority\",\n-                \"org.dspace.content.authority.SolrAuthority = SolrAuthorAuthority\");\n+                new String[] {\n+                        \"org.dspace.content.authority.SolrAuthority = SolrAuthorAuthority\",\n+                        \"org.dspace.content.authority.SHERPARoMEOPublisher = SRPublisher\",\n+                        \"org.dspace.content.authority.SHERPARoMEOJournalTitle = SRJournalTitle\"\n+                });\n \n         configurationService.setProperty(\"solr.authority.server\",\n                 \"${solr.server}/authority\");\n@@ -66,10 +71,23 @@ public void setup() throws Exception {\n                 \"authorLookup\");\n         configurationService.setProperty(\"authority.controlled.dc.contributor.author\",\n                 \"true\");\n-\n         configurationService.setProperty(\"authority.author.indexer.field.1\",\n                 \"dc.contributor.author\");\n \n+        configurationService.setProperty(\"choices.plugin.dc.publisher\",\n+                \"SRPublisher\");\n+        configurationService.setProperty(\"choices.presentation.dc.publisher\",\n+                \"lookup\");\n+        configurationService.setProperty(\"authority.controlled.dc.publisher\",\n+                \"true\");\n+\n+        configurationService.setProperty(\"choices.plugin.dc.relation.ispartof\",\n+                \"SRJournalTitle\");\n+        configurationService.setProperty(\"choices.presentation.dc.relation.ispartof\",\n+                \"lookup\");\n+        configurationService.setProperty(\"authority.controlled.dc.relation.ispartof\",\n+                \"true\");\n+\n         // These clears have to happen so that the config is actually reloaded in those classes. This is needed for\n         // the properties that we're altering above and this is only used within the tests\n         DCInputAuthority.reset();\n@@ -122,11 +140,13 @@ public void findAllTest() throws Exception {\n                      VocabularyMatcher.matchProperties(\"srsc\", \"srsc\", false, true),\n                      VocabularyMatcher.matchProperties(\"common_types\", \"common_types\", true, false),\n                      VocabularyMatcher.matchProperties(\"common_iso_languages\", \"common_iso_languages\", true , false),\n-                     VocabularyMatcher.matchProperties(\"SolrAuthorAuthority\", \"SolrAuthorAuthority\", false , false)\n+                     VocabularyMatcher.matchProperties(\"SolrAuthorAuthority\", \"SolrAuthorAuthority\", false , false),\n+                     VocabularyMatcher.matchProperties(\"SRPublisher\", \"SRPublisher\", false , false),\n+                     VocabularyMatcher.matchProperties(\"SRJournalTitle\", \"SRJournalTitle\", false , false)\n                  )))\n         .andExpect(jsonPath(\"$._links.self.href\",\n             Matchers.containsString(\"api/submission/vocabularies\")))\n-        .andExpect(jsonPath(\"$.page.totalElements\", is(4)));\n+        .andExpect(jsonPath(\"$.page.totalElements\", is(6)));\n     }\n \n     @Test\n@@ -292,13 +312,27 @@ public void correctSolrQueryTest() throws Exception {\n         getClient(token).perform(\n                 get(\"/api/submission/vocabularies/SolrAuthorAuthority/entries\")\n                         .param(\"filter\", \"Shirasaka\")\n-                        .param(\"size\", \"1000\"))\n+                        .param(\"size\", \"100\"))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$._embedded.entries\", Matchers.contains(\n                     VocabularyMatcher.matchVocabularyEntry(\"Shirasaka, Seiko\", \"Shirasaka, Seiko\", \"vocabularyEntry\")\n                     )))\n                 .andExpect(jsonPath(\"$._embedded.entries[0].authority\").isNotEmpty())\n                 .andExpect(jsonPath(\"$.page.totalElements\", Matchers.is(1)));\n+\n+        // test also an entry provided by ORCID\n+        getClient(token).perform(\n+                get(\"/api/submission/vocabularies/SolrAuthorAuthority/entries\")\n+                        .param(\"filter\", \"Bollini\")\n+                        .param(\"size\", \"100\"))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.entries\", Matchers.contains(\n+                    VocabularyMatcher.matchVocabularyEntry(\"Bollini, Andrea\", \"Bollini, Andrea\", \"vocabularyEntry\")\n+                    )))\n+                .andExpect(jsonPath(\"$._embedded.entries[0].authority\",\n+                            Matchers.is(AuthorityValueServiceImpl.GENERATE + \"orcid\"\n+                                    + AuthorityValueServiceImpl.SPLIT + \"0000-0002-9029-1854\")))\n+                .andExpect(jsonPath(\"$.page.totalElements\", Matchers.is(1)));\n     }\n \n     @Test\n@@ -307,11 +341,44 @@ public void noResultsSolrQueryTest() throws Exception {\n         getClient(token).perform(\n                 get(\"/api/submission/vocabularies/SolrAuthorAuthority/entries\")\n                         .param(\"filter\", \"Smith\")\n-                        .param(\"size\", \"1000\"))\n+                        .param(\"size\", \"100\"))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$.page.totalElements\", Matchers.is(0)));\n     }\n \n+    @Test\n+    public void sherpaJournalTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(\n+                get(\"/api/submission/vocabularies/SRJournalTitle/entries\")\n+                        .param(\"filter\", \"Lancet\")\n+                        .param(\"size\", \"100\"))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.entries\", Matchers.contains(\n+                    VocabularyMatcher.matchVocabularyEntry(\"The Lancet\", \"The Lancet\", \"vocabularyEntry\")\n+                    )))\n+                .andExpect(jsonPath(\"$._embedded.entries[0].authority\",\n+                        Matchers.is(\"0140-6736\")))\n+                .andExpect(jsonPath(\"$.page.totalElements\", Matchers.is(1)));\n+    }\n+\n+    @Test\n+    public void sherpaPublisherTest() throws Exception {\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(\n+                get(\"/api/submission/vocabularies/SRPublisher/entries\")\n+                        .param(\"filter\", \"PLOS\")\n+                        .param(\"size\", \"100\"))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.entries\", Matchers.contains(\n+                    VocabularyMatcher.matchVocabularyEntry(\"Public Library of Science\", \"Public Library of Science\",\n+                            \"vocabularyEntry\")\n+                    )))\n+                .andExpect(jsonPath(\"$._embedded.entries[0].authority\",\n+                        Matchers.is(\"112\")))\n+                .andExpect(jsonPath(\"$.page.totalElements\", Matchers.is(1)));\n+    }\n+\n     @Test\n     public void findByMetadataAndCollectionTest() throws Exception {\n         context.turnOffAuthorisationSystem();"
  },
  {
    "sha": "bfd8f64558b70e2dd387e54fae0b53bbdbffc3d6",
    "filename": "dspace/config/dspace.cfg",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace/config/dspace.cfg",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace/config/dspace.cfg",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace/config/dspace.cfg?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -1295,6 +1295,8 @@ sherpa.romeo.apikey =\n #####  Authority Control Settings  #####\n #plugin.named.org.dspace.content.authority.ChoiceAuthority = \\\n # org.dspace.content.authority.SampleAuthority = Sample, \\\n+# org.dspace.content.authority.SHERPARoMEOPublisher = SRPublisher, \\\n+# org.dspace.content.authority.SHERPARoMEOJournalTitle = SRJournalTitle, \\\n #  org.dspace.content.authority.SolrAuthority = SolrAuthorAuthority\n \n #Uncomment to enable ORCID authority control\n@@ -1369,6 +1371,15 @@ authority.minconfidence = ambiguous\n #vocabulary.plugin.srsc.hierarchy.suggest = true\n #vocabulary.plugin.srsc.delimiter = \"::\"\n \n+# publisher name lookup through SHERPA/RoMEO:\n+#choices.plugin.dc.publisher = SRPublisher\n+#choices.presentation.dc.publisher = suggest\n+\n+## demo: journal title lookup, with ISSN as authority\n+#choices.plugin.dc.title.alternative = SRJournalTitle\n+#choices.presentation.dc.title.alternative = suggest\n+#authority.controlled.dc.title.alternative = true\n+\n ##### Google Scholar Metadata Configuration #####\n google-metadata.config = ${dspace.dir}/config/crosswalks/google-metadata.properties\n google-metadata.enable = true"
  },
  {
    "sha": "19bd74d702577bf79914eafb2ccd92195bbfa96e",
    "filename": "dspace/config/spring/api/orcid-authority-services.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/DSpace/DSpace/blob/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace/config/spring/api/orcid-authority-services.xml",
    "raw_url": "https://github.com/DSpace/DSpace/raw/49728a097ea86fd7ed7b91e196ca797716dbac9a/dspace/config/spring/api/orcid-authority-services.xml",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace/config/spring/api/orcid-authority-services.xml?ref=49728a097ea86fd7ed7b91e196ca797716dbac9a",
    "patch": "@@ -15,9 +15,20 @@\n \n     <bean id=\"dspace.DSpaceAuthorityIndexer\" class=\"org.dspace.authority.indexer.DSpaceAuthorityIndexer\"/>\n \n+<!--\n+    <alias name=\"OrcidSource\" alias=\"AuthoritySource\"/>\n+    <bean name=\"OrcidSource\" class=\"org.dspace.authority.orcid.Orcidv3\">\n+        <property name=\"clientId\" value=\"${orcid.clientid}\" />\n+        <property name=\"clientSecret\" value=\"${orcid.clientsecret}\" />\n+        <property name=\"OAUTHUrl\" value=\"${orcid.oauth.url}\" />\n+        <property name=\"orcidRestConnector\" ref=\"orcidRestConnector\"/>\n+    </bean>\n+ -->\n+ \n     <bean name=\"AuthorityTypes\" class=\"org.dspace.authority.AuthorityTypes\">\n         <property name=\"types\">\n             <list>\n+                <!-- <bean class=\"org.dspace.authority.orcid.Orcidv3AuthorityValue\"/> -->\n                 <bean class=\"org.dspace.authority.PersonAuthorityValue\"/>\n             </list>\n         </property>"
  }
]
