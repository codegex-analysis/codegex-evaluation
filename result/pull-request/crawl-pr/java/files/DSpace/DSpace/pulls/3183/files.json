[
  {
    "sha": "0db0cc45be199dccc595baa9ce90cef996660317",
    "filename": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -890,10 +890,10 @@ private void addRelationship(Context c, Item item, String typeName, String value\n         Entity relationEntity = getEntity(c, value);\n         // Get relationship type of entity and item\n         String relationEntityRelationshipType = itemService.getMetadata(relationEntity.getItem(),\n-                                                                        \"relationship\", \"type\",\n-                                                                        null, Item.ANY).get(0).getValue();\n-        String itemRelationshipType = itemService.getMetadata(item, \"relationship\", \"type\",\n-                                                              null, Item.ANY).get(0).getValue();\n+                                                                        \"dspace\", \"entity\",\n+                                                                        \"type\", Item.ANY).get(0).getValue();\n+        String itemRelationshipType = itemService.getMetadata(item, \"dspace\", \"entity\",\n+                                                              \"type\", Item.ANY).get(0).getValue();\n \n         // Get the correct RelationshipType based on typeName\n         List<RelationshipType> relType = relationshipTypeService.findByLeftwardOrRightwardTypeName(c, typeName);\n@@ -1487,7 +1487,7 @@ private void populateRefAndRowMap(DSpaceCSVLine line, @Nullable UUID uuid) {\n                 }\n             }\n             //Populate entityTypeMap\n-            if (key.equalsIgnoreCase(\"relationship.type\") && line.get(key).size() > 0) {\n+            if (key.equalsIgnoreCase(\"dspace.entity.type\") && line.get(key).size() > 0) {\n                 if (uuid == null) {\n                     entityTypeMap.put(new UUID(0, rowCount), line.get(key).get(0));\n                 } else {\n@@ -1651,8 +1651,8 @@ private void validateExpressedRelations(Context c) throws MetadataImportExceptio\n                     if (itemService.find(c, UUID.fromString(targetUUID)) != null) {\n                         targetItem = itemService.find(c, UUID.fromString(targetUUID));\n                         List<MetadataValue> relTypes = itemService.\n-                                                                      getMetadata(targetItem, \"relationship\", \"type\",\n-                                                                                  null, Item.ANY);\n+                                                                      getMetadata(targetItem, \"dspace\", \"entity\",\n+                                                                                  \"type\", Item.ANY);\n                         String relTypeValue = null;\n                         if (relTypes.size() > 0) {\n                             relTypeValue = relTypes.get(0).getValue();\n@@ -1696,9 +1696,9 @@ private void validateExpressedRelations(Context c) throws MetadataImportExceptio\n                             if (itemService.find(c, UUID.fromString(targetUUID)) != null) {\n                                 DSpaceCSVLine dSpaceCSVLine = this.csv.getCSVLines()\n                                                                       .get(Integer.valueOf(originRow) - 1);\n-                                List<String> relTypes = dSpaceCSVLine.get(\"relationship.type\");\n+                                List<String> relTypes = dSpaceCSVLine.get(\"dspace.entity.type\");\n                                 if (relTypes == null || relTypes.isEmpty()) {\n-                                    dSpaceCSVLine.get(\"relationship.type[]\");\n+                                    dSpaceCSVLine.get(\"dspace.entity.type[]\");\n                                 }\n \n                                 if (relTypes != null && relTypes.size() > 0) {\n@@ -1710,8 +1710,8 @@ private void validateExpressedRelations(Context c) throws MetadataImportExceptio\n                                     originItem = itemService.find(c, UUID.fromString(originRefererUUID));\n                                     if (originItem != null) {\n                                         List<MetadataValue> mdv = itemService.getMetadata(originItem,\n-                                                                                          \"relationship\",\n-                                                                                          \"type\", null,\n+                                                                                          \"dspace\",\n+                                                                                          \"entity\", \"type\",\n                                                                                           Item.ANY);\n                                         if (!mdv.isEmpty()) {\n                                             String relTypeValue = mdv.get(0).getValue();\n@@ -1825,4 +1825,4 @@ private RelationshipType matchRelationshipType(List<RelationshipType> relTypes,\n         return foundRelationshipType;\n     }\n \n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "457d22ff198afdac6df5501655a1eee10c082bae",
    "filename": "dspace-api/src/main/java/org/dspace/content/EntityServiceImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/content/EntityServiceImpl.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/content/EntityServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/EntityServiceImpl.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -51,7 +51,7 @@ public Entity findByItemId(Context context, UUID itemId, Integer limit, Integer\n     @Override\n     public EntityType getType(Context context, Entity entity) throws SQLException {\n         Item item = entity.getItem();\n-        List<MetadataValue> list = itemService.getMetadata(item, \"relationship\", \"type\", null, Item.ANY, false);\n+        List<MetadataValue> list = itemService.getMetadata(item, \"dspace\", \"entity\", \"type\", Item.ANY, false);\n         if (!list.isEmpty()) {\n             return entityTypeService.findByEntityType(context, list.get(0).getValue());\n         } else {"
  },
  {
    "sha": "5e44028872632d0c8d43dd7d89ab1535cab7b46c",
    "filename": "dspace-api/src/main/java/org/dspace/content/ItemServiceImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/content/ItemServiceImpl.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/content/ItemServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/ItemServiceImpl.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -1328,10 +1328,8 @@ public boolean canCreateNewVersion(Context context, Item item) throws SQLExcepti\n     @Override\n     public List<MetadataValue> getMetadata(Item item, String schema, String element, String qualifier, String lang,\n                                            boolean enableVirtualMetadata) {\n-        //Fields of the relation schema are virtual metadata\n-        //except for relation.type which is the type of item in the model\n-        if (StringUtils.equals(schema, MetadataSchemaEnum.RELATION.getName()) && !StringUtils.equals(element, \"type\")) {\n-\n+        // Fields of the relation schema are virtual metadata\n+        if (StringUtils.equals(schema, MetadataSchemaEnum.RELATION.getName())) {\n             List<RelationshipMetadataValue> relationMetadata = relationshipMetadataService\n                 .getRelationshipMetadata(item, enableVirtualMetadata);\n             List<MetadataValue> listToReturn = new LinkedList<>();"
  },
  {
    "sha": "761a8e448ba76d9c5582afbc77c076b5be7921ba",
    "filename": "dspace-api/src/main/java/org/dspace/content/RelationshipMetadataServiceImpl.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/content/RelationshipMetadataServiceImpl.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/content/RelationshipMetadataServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/RelationshipMetadataServiceImpl.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -63,11 +63,9 @@\n     public String getEntityTypeStringFromMetadata(Item item) {\n         List<MetadataValue> list = item.getMetadata();\n         for (MetadataValue mdv : list) {\n-            if (StringUtils.equals(mdv.getMetadataField().getMetadataSchema().getName(),\n-                \"relationship\")\n-                && StringUtils.equals(mdv.getMetadataField().getElement(),\n-                \"type\")) {\n-\n+            if (StringUtils.equals(mdv.getMetadataField().getMetadataSchema().getName(), \"dspace\")\n+                && StringUtils.equals(mdv.getMetadataField().getElement(), \"entity\")\n+                && StringUtils.equals(mdv.getMetadataField().getQualifier(), \"type\")) {\n                 return mdv.getValue();\n             }\n         }"
  },
  {
    "sha": "30f9511776b0335584340ba701301efbcba55f97",
    "filename": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -257,8 +257,8 @@ private boolean verifyMaxCardinality(Context context, Item itemToProcess,\n     }\n \n     private boolean verifyEntityTypes(Item itemToProcess, EntityType entityTypeToProcess) {\n-        List<MetadataValue> list = itemService.getMetadata(itemToProcess, \"relationship\", \"type\",\n-                null, Item.ANY, false);\n+        List<MetadataValue> list = itemService.getMetadata(itemToProcess, \"dspace\", \"entity\",\n+                \"type\", Item.ANY, false);\n         if (list.isEmpty()) {\n             return false;\n         }"
  },
  {
    "sha": "9c39091f89dcc5a8afc9aab33d0dc7b0952f8c56",
    "filename": "dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/oracle/V7.0_2021.03.18__Move_entity_type_to_dspace_schema.sql",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/oracle/V7.0_2021.03.18__Move_entity_type_to_dspace_schema.sql",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/oracle/V7.0_2021.03.18__Move_entity_type_to_dspace_schema.sql",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/oracle/V7.0_2021.03.18__Move_entity_type_to_dspace_schema.sql?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -0,0 +1,56 @@\n+--\n+-- The contents of this file are subject to the license and copyright\n+-- detailed in the LICENSE and NOTICE files at the root of the source\n+-- tree and available online at\n+--\n+-- http://www.dspace.org/license/\n+--\n+\n+-- ===============================================================\n+-- WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING\n+--\n+-- DO NOT MANUALLY RUN THIS DATABASE MIGRATION. IT WILL BE EXECUTED\n+-- AUTOMATICALLY (IF NEEDED) BY \"FLYWAY\" WHEN YOU STARTUP DSPACE.\n+-- http://flywaydb.org/\n+-- ===============================================================\n+\n+-------------------------------------------------------------------------------------------------------\n+-- Move all 'relationship.type' metadata fields to 'dspace.entity.type'. Remove 'relationship' schema.\n+-------------------------------------------------------------------------------------------------------\n+-- Special case: we need to the 'dspace' schema to already exist. If users don't already have it we must create it\n+-- manually via SQL, as by default it won't be created until database updates are finished.\n+INSERT INTO metadataschemaregistry (metadata_schema_id, namespace, short_id)\n+  SELECT metadataschemaregistry_seq.nextval, 'http://dspace.org/dspace' as namespace, 'dspace' as short_id FROM dual\n+    WHERE NOT EXISTS\n+      (SELECT metadata_schema_id,namespace,short_id FROM metadataschemaregistry\n+       WHERE namespace = 'http://dspace.org/dspace' AND short_id = 'dspace');\n+\n+\n+-- Add 'dspace.entity.type' field to registry (if missing)\n+INSERT INTO metadatafieldregistry (metadata_field_id, metadata_schema_id, element, qualifier)\n+  SELECT metadatafieldregistry_seq.nextval,\n+    (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id='dspace'), 'entity', 'type' FROM dual\n+        WHERE NOT EXISTS\n+          (SELECT metadata_field_id,element,qualifier FROM metadatafieldregistry\n+           WHERE metadata_schema_id = (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id='dspace')\n+           AND element = 'entitye' AND qualifier='type');\n+\n+-- Moves all 'relationship.type' field values to a new 'dspace.entity.type' field\n+UPDATE metadatavalue\n+  SET metadata_field_id =\n+     (SELECT metadata_field_id FROM metadatafieldregistry\n+      WHERE metadata_schema_id = (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id='dspace')\n+      AND element = 'entity' AND qualifier='type')\n+  WHERE metadata_field_id =\n+     (SELECT metadata_field_id FROM metadatafieldregistry\n+      WHERE metadata_schema_id = (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id='relationship')\n+      AND element = 'type' AND qualifier is NULL);\n+\n+\n+-- Delete 'relationship.type' field from registry\n+DELETE FROM metadatafieldregistry\n+  WHERE metadata_schema_id = (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id = 'relationship')\n+  AND element = 'type' AND qualifier is NULL;\n+\n+-- Delete 'relationship' schema (which is now empty)\n+DELETE FROM metadataschemaregistry WHERE short_id = 'relationship' AND namespace = 'http://dspace.org/relationship';"
  },
  {
    "sha": "484d488bc7dc0948dbc6bdf461dc48751f4c233d",
    "filename": "dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/postgres/V7.0_2021.03.18__Move_entity_type_to_dspace_schema.sql",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/postgres/V7.0_2021.03.18__Move_entity_type_to_dspace_schema.sql",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/postgres/V7.0_2021.03.18__Move_entity_type_to_dspace_schema.sql",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/postgres/V7.0_2021.03.18__Move_entity_type_to_dspace_schema.sql?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -0,0 +1,56 @@\n+--\n+-- The contents of this file are subject to the license and copyright\n+-- detailed in the LICENSE and NOTICE files at the root of the source\n+-- tree and available online at\n+--\n+-- http://www.dspace.org/license/\n+--\n+\n+-- ===============================================================\n+-- WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING\n+--\n+-- DO NOT MANUALLY RUN THIS DATABASE MIGRATION. IT WILL BE EXECUTED\n+-- AUTOMATICALLY (IF NEEDED) BY \"FLYWAY\" WHEN YOU STARTUP DSPACE.\n+-- http://flywaydb.org/\n+-- ===============================================================\n+\n+-------------------------------------------------------------------------------------------------------\n+-- Move all 'relationship.type' metadata fields to 'dspace.entity.type'. Remove 'relationship' schema.\n+-------------------------------------------------------------------------------------------------------\n+-- Special case: we need to the 'dspace' schema to already exist. If users don't already have it we must create it\n+-- manually via SQL, as by default it won't be created until database updates are finished.\n+INSERT INTO metadataschemaregistry (namespace, short_id)\n+  SELECT 'http://dspace.org/dspace', 'dspace'\n+    WHERE NOT EXISTS\n+      (SELECT metadata_schema_id,namespace,short_id FROM metadataschemaregistry\n+       WHERE namespace = 'http://dspace.org/dspace' AND short_id = 'dspace');\n+\n+\n+-- Add 'dspace.entity.type' field to registry (if missing)\n+INSERT INTO metadatafieldregistry (metadata_schema_id, element, qualifier)\n+  SELECT (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id='dspace'), 'entity', 'type'\n+    WHERE NOT EXISTS\n+      (SELECT metadata_field_id,element,qualifier FROM metadatafieldregistry\n+       WHERE metadata_schema_id = (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id='dspace')\n+       AND element = 'entity' AND qualifier='type');\n+\n+\n+-- Moves all 'relationship.type' field values to new 'dspace.entity.type' field\n+UPDATE metadatavalue\n+  SET metadata_field_id =\n+     (SELECT metadata_field_id FROM metadatafieldregistry\n+      WHERE metadata_schema_id = (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id='dspace')\n+      AND element = 'entity' AND qualifier='type')\n+  WHERE metadata_field_id =\n+     (SELECT metadata_field_id FROM metadatafieldregistry\n+      WHERE metadata_schema_id = (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id='relationship')\n+      AND element = 'type' AND qualifier is NULL);\n+\n+\n+-- Delete 'relationship.type' field from registry\n+DELETE FROM metadatafieldregistry\n+  WHERE metadata_schema_id = (SELECT metadata_schema_id FROM metadataschemaregistry WHERE short_id = 'relationship')\n+  AND element = 'type' AND qualifier is NULL;\n+\n+-- Delete 'relationship' schema (which is now empty)\n+DELETE FROM metadataschemaregistry WHERE short_id = 'relationship' AND namespace = 'http://dspace.org/relationship';"
  },
  {
    "sha": "2b30ea8cd3583d3143946e675da2050b1c900421",
    "filename": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportIT.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -105,15 +105,15 @@ public void metadataImportWithoutEPersonParameterTest()\n     @Test\n     public void relationshipMetadataImportTest() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item item = ItemBuilder.createItem(context, collection).withRelationshipType(\"Publication\")\n+        Item item = ItemBuilder.createItem(context, collection).withEntityType(\"Publication\")\n                                .withTitle(\"Publication1\").build();\n         EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n         EntityType person = EntityTypeBuilder.createEntityTypeBuilder(context, \"Person\").build();\n         RelationshipTypeBuilder.createRelationshipTypeBuilder(context, publication, person, \"isAuthorOfPublication\",\n                                                               \"isPublicationOfAuthor\", 0, 10, 0, 10);\n         context.restoreAuthSystemState();\n \n-        String[] csv = {\"id,collection,dc.title,relation.isPublicationOfAuthor,relationship.type\",\n+        String[] csv = {\"id,collection,dc.title,relation.isPublicationOfAuthor,dspace.entity.type\",\n             \"+,\" + collection.getHandle() + \",\\\"Test Import 1\\\",\" + item.getID() + \",Person\"};\n         performImportScript(csv);\n         Item importedItem = findItemByName(\"Test Import 1\");\n@@ -128,11 +128,11 @@ public void relationshipMetadataImportTest() throws Exception {\n     @Test\n     public void relationshipMetadataImporAlreadyExistingItemTest() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item personItem = ItemBuilder.createItem(context, collection).withRelationshipType(\"Person\")\n+        Item personItem = ItemBuilder.createItem(context, collection).withEntityType(\"Person\")\n                                      .withTitle(\"Person1\").build();\n         List<Relationship> relationshipList = relationshipService.findByItem(context, personItem);\n         assertEquals(0, relationshipList.size());\n-        Item publicationItem = ItemBuilder.createItem(context, collection).withRelationshipType(\"Publication\")\n+        Item publicationItem = ItemBuilder.createItem(context, collection).withEntityType(\"Publication\")\n                                           .withTitle(\"Publication1\").build();\n \n         EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();"
  },
  {
    "sha": "34b075b6e7cf4f63c145134248edcd756cbc4312",
    "filename": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java",
    "status": "modified",
    "additions": 38,
    "deletions": 38,
    "changes": 76,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -128,7 +128,7 @@ private void assertRelationship(Item leftItem, Item rightItem, int expectedCount\n      */\n     @Test\n     public void testSingleMdRef() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n             \"+,Person,,\" + col1.getHandle() + \",0\",\n             \"+,Publication,dc.identifier.other:0,\" + col1.getHandle() + \",1\"};\n         Item[] items = runImport(csv);\n@@ -157,7 +157,7 @@ public void testSingleMdRef() throws Exception {\n      */\n     @Test\n     public void testSingleRowNameRef() throws Exception {\n-        String[] csv = {\"id,dc.title,relationship.type,relation.isAuthorOfPublication,collection,rowName,\" +\n+        String[] csv = {\"id,dc.title,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName,\" +\n             \"dc.identifier.other\",\n             \"+,Test Item 1,Person,,\" + col1.getHandle() + \",idVal,0\",\n             \"+,Test Item 2,Publication,rowName:idVal,\" + col1.getHandle() + \",anything,1\"};\n@@ -171,7 +171,7 @@ public void testSingleRowNameRef() throws Exception {\n      */\n     @Test\n     public void testMultiMdRef() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n             \"+,Person,,\" + col1.getHandle() + \",0\",\n             \"+,Person,,\" + col1.getHandle() + \",1\",\n             \"+,Publication,dc.identifier.other:0||dc.identifier.other:1,\" + col1.getHandle() + \",2\"};\n@@ -186,7 +186,7 @@ public void testMultiMdRef() throws Exception {\n      */\n     @Test\n     public void testMultiRowNameRef() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n             \"+,Person,,\" + col1.getHandle() + \",0,val1\",\n             \"+,Person,,\" + col1.getHandle() + \",1,val2\",\n             \"+,Publication,rowName:val1||rowName:val2,\" + col1.getHandle() + \",2,val3\"};\n@@ -208,10 +208,10 @@ public void testSingleUUIDReference() throws Exception {\n                              .withAuthor(\"Smith, Donald\")\n                              .withPersonIdentifierLastName(\"Smith\")\n                              .withPersonIdentifierFirstName(\"Donald\")\n-                             .withRelationshipType(\"Person\")\n+                             .withEntityType(\"Person\")\n                              .build();\n         context.restoreAuthSystemState();\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,rowName,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName,dc.identifier.other\",\n             \"+,Publication,\" + person.getID().toString() + \",\" + col1.getHandle() + \",anything,0\"};\n         Item[] items = runImport(csv);\n         assertRelationship(items[0], person, 1, \"left\", 0);\n@@ -230,17 +230,17 @@ public void testMultiUUIDReference() throws Exception {\n                                  .withAuthor(\"Smith, Donald\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"Donald\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .build();\n         Item person2 = ItemBuilder.createItem(context, col1)\n                                  .withTitle(\"Author2\")\n                                  .withIssueDate(\"2017-10-17\")\n                                  .withAuthor(\"Smith, John\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"John\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .build();\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,rowName,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName,dc.identifier.other\",\n             \"+,Publication,\" + person.getID().toString() + \"||\" + person2.getID().toString() + \",\" +\n                 col1.getHandle() + \",anything,0\"};\n         Item[] items = runImport(csv);\n@@ -261,9 +261,9 @@ public void testMultiRefArchivedCsv() throws Exception {\n                                  .withAuthor(\"Smith, Donald\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"Donald\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .build();\n-        String[] csv = {\"id,dc.title,relationship.type,relation.isAuthorOfPublication,collection,rowName,\" +\n+        String[] csv = {\"id,dc.title,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName,\" +\n             \"dc.identifier.other\",\n             \"+,Person2,Person,,\" + col1.getHandle() + \",idVal,0\",\n             \"+,Pub1,Publication,dc.title:Person||dc.title:Person2,\" + col1.getHandle() + \",anything,1\"};\n@@ -287,19 +287,19 @@ public void testMultiMixedRefArchivedCsv() throws Exception {\n                                  .withAuthor(\"Smith, Donald\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"Donald\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .build();\n         Item person2 = ItemBuilder.createItem(context, col1)\n                                  .withTitle(\"Person2\")\n                                  .withIssueDate(\"2017-10-17\")\n                                  .withAuthor(\"Smith, John\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"John\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .build();\n \n         context.restoreAuthSystemState();\n-        String[] csv = {\"id,dc.title,relationship.type,relation.isAuthorOfPublication,collection,rowName,\" +\n+        String[] csv = {\"id,dc.title,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName,\" +\n             \"dc.identifier.other\",\n             \"+,Person3,Person,,\" + col1.getHandle() + \",idVal,0\",\n             \"+,Pub1,Publication,\" + person.getID() + \"||dc.title:Person2||rowName:idVal,\" +\n@@ -316,7 +316,7 @@ public void testMultiMixedRefArchivedCsv() throws Exception {\n      */\n     @Test\n     public void testRefWithSpecialChar() throws Exception {\n-        String[] csv = {\"id,dc.title,relationship.type,relation.isAuthorOfPublication,collection,rowName,\" +\n+        String[] csv = {\"id,dc.title,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName,\" +\n             \"dc.identifier.other\",\n             \"+,Person:,Person,,\" + col1.getHandle() + \",idVal,0\",\n             \"+,Pub1,Publication,dc.title:Person:,\" + col1.getHandle() + \",anything,1\"};\n@@ -329,7 +329,7 @@ public void testRefWithSpecialChar() throws Exception {\n      */\n     @Test(expected = MetadataImportException.class)\n     public void testNonUniqueMDRefInCsv() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n             \"+,Person,,\" + col1.getHandle() + \",1\",\n             \"+,Person,,\" + col1.getHandle() + \",1\",\n             \"+,Publication,dc.identifier.other:1,\" + col1.getHandle() + \",2\"};\n@@ -341,7 +341,7 @@ public void testNonUniqueMDRefInCsv() throws Exception {\n      */\n     @Test(expected = MetadataImportException.class)\n     public void testNonUniqueRowName() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n             \"+,Person,,\" + col1.getHandle() + \",1,value\",\n             \"+,Person,,\" + col1.getHandle() + \",1,value\",\n             \"+,Publication,rowName:value,\" + col1.getHandle() + \",2\"};\n@@ -360,7 +360,7 @@ public void testNonUniqueMDRefInDb() throws Exception {\n                                  .withAuthor(\"Smith, Donald\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"Donald\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .withIdentifierOther(\"1\")\n                                  .build();\n         Item person2 = ItemBuilder.createItem(context, col1)\n@@ -369,12 +369,12 @@ public void testNonUniqueMDRefInDb() throws Exception {\n                                  .withAuthor(\"Smith, John\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"John\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .withIdentifierOther(\"1\")\n                                  .build();\n \n         context.restoreAuthSystemState();\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n             \"+,Publication,dc.identifier.other:1,\" + col1.getHandle() + \",2\"};\n         performImportScript(csv, true);\n     }\n@@ -391,11 +391,11 @@ public void testNonUniqueMDRefInBoth() throws Exception {\n                                  .withAuthor(\"Smith, Donald\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"Donald\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .withIdentifierOther(\"1\")\n                                  .build();\n         context.restoreAuthSystemState();\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n             \"+,Person,,\" + col1.getHandle() + \",1\",\n             \"+,Publication,dc.identifier.other:1,\" + col1.getHandle() + \",2\"};\n         performImportScript(csv, true);\n@@ -406,7 +406,7 @@ public void testNonUniqueMDRefInBoth() throws Exception {\n      */\n     @Test(expected = Exception.class)\n     public void testNonExistMdRef() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n             \"+,Person,,\" + col1.getHandle() + \",1\",\n             \"+,Publication,dc.identifier.other:8675309,\" + col1.getHandle() + \",2\"};\n         performImportScript(csv, false);\n@@ -417,7 +417,7 @@ public void testNonExistMdRef() throws Exception {\n      */\n     @Test(expected = Exception.class)\n     public void testCSVImportWrongOrder() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other\",\n             \"+,Publication,dc.identifier.other:8675309,\" + col1.getHandle() + \",2\",\n             \"+,Person,,\" + col1.getHandle() + \",8675309\",};\n         performImportScript(csv, false);\n@@ -428,7 +428,7 @@ public void testCSVImportWrongOrder() throws Exception {\n      */\n     @Test(expected = Exception.class)\n     public void testCSVImportWrongOrderRowName() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n             \"+,Publication,rowName:row2,\" + col1.getHandle() + \",2,row1\",\n             \"+,Person,,\" + col1.getHandle() + \",8675309,row2\",};\n         performImportScript(csv, false);\n@@ -439,7 +439,7 @@ public void testCSVImportWrongOrderRowName() throws Exception {\n      */\n     @Test(expected = MetadataImportException.class)\n     public void testCSVImportInvalidRelationship() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,rowName\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName\",\n             \"+,Publication,,\" + col1.getHandle() + \",row1\",\n             \"+,Unit,rowName:row1,\" + col1.getHandle() + \",row2\",};\n         performImportScript(csv, true);\n@@ -454,10 +454,10 @@ public void testInvalidRelationshipArchivedOrigin() throws Exception {\n         Item testItem = ItemBuilder.createItem(context, col1)\n                                  .withTitle(\"OrgUnit\")\n                                  .withIssueDate(\"2017-10-17\")\n-                                 .withRelationshipType(\"OrgUnit\")\n+                                 .withEntityType(\"OrgUnit\")\n                                  .build();\n         context.restoreAuthSystemState();\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,rowName\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName\",\n             \"+,Person,,\" + col1.getHandle() + \",1\" +\n                 testItem.getID().toString() + \",,rowName:1,\" + col1.getHandle() + \",2\"};\n         performImportScript(csv, false);\n@@ -472,10 +472,10 @@ public void testInvalidRelationshipArchivedTarget() throws Exception {\n         Item testItem = ItemBuilder.createItem(context, col1)\n                                    .withTitle(\"OrgUnit\")\n                                    .withIssueDate(\"2017-10-17\")\n-                                   .withRelationshipType(\"OrgUnit\")\n+                                   .withEntityType(\"OrgUnit\")\n                                    .build();\n         context.restoreAuthSystemState();\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,rowName\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,rowName\",\n             testItem.getID().toString() + \",Person,,\" + col1.getHandle() + \",1\" +\n                 \"+,OrgUnit,rowName:1,\" + col1.getHandle() + \",2\"};\n         performImportScript(csv, false);\n@@ -494,23 +494,23 @@ public void testValidRelationshipNoDefinedTypesInCSV() throws Exception {\n                                  .withAuthor(\"Smith, Donald\")\n                                  .withPersonIdentifierLastName(\"Smith\")\n                                  .withPersonIdentifierFirstName(\"Donald\")\n-                                 .withRelationshipType(\"Person\")\n+                                 .withEntityType(\"Person\")\n                                  .withIdentifierOther(\"testItemOne\")\n                                  .build();\n \n \n         Item testItem2 = ItemBuilder.createItem(context, col1)\n                                  .withTitle(\"Publication\")\n                                  .withIssueDate(\"2017-10-17\")\n-                                 .withRelationshipType(\"Publication\")\n+                                 .withEntityType(\"Publication\")\n                                  .withIdentifierOther(\"testItemTwo\")\n                                  .build();\n \n \n         Item testItem3 = ItemBuilder.createItem(context, col1)\n                                  .withTitle(\"Project\")\n                                  .withIssueDate(\"2017-10-17\")\n-                                 .withRelationshipType(\"Project\")\n+                                 .withEntityType(\"Project\")\n                                  .withIdentifierOther(\"testItemThree\")\n                                  .build();\n \n@@ -530,7 +530,7 @@ public void testValidRelationshipNoDefinedTypesInCSV() throws Exception {\n      */\n     @Test\n     public void testDuplicateRowNameReferences() throws Exception {\n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n             \"+,Person,,\" + col1.getHandle() + \",0,value\",\n             \"+,Publication,rowName:value,\" + col1.getHandle() + \",1,1\",\n             \"+,Publication,rowName:value,\" + col1.getHandle() + \",2,2\"};\n@@ -548,12 +548,12 @@ public void testRelationToVirtualDataInReferences() throws Exception {\n                                    .withAuthor(\"Smith, Donald\")\n                                    .withPersonIdentifierLastName(\"Smith\")\n                                    .withPersonIdentifierFirstName(\"Donald\")\n-                                   .withRelationshipType(\"Person\")\n+                                   .withEntityType(\"Person\")\n                                    .withIdentifierOther(\"testItemOne\")\n                                    .build();\n \n \n-        String[] csv = {\"id,relationship.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n+        String[] csv = {\"id,dspace.entity.type,relation.isAuthorOfPublication,collection,dc.identifier.other,rowName\",\n             \"+,Publication,\" + testItem.getID() + \"::virtual::4::600,\" + col1.getHandle() + \",0,1\"};\n         Item[] items = runImport(csv);\n         assertRelationship(items[0], testItem, 1, \"left\", 0);\n@@ -569,10 +569,10 @@ public void testInvalidTypeNameDefined() throws Exception {\n         Item testItem = ItemBuilder.createItem(context, col1)\n                                  .withTitle(\"Publication\")\n                                  .withIssueDate(\"2017-10-17\")\n-                                 .withRelationshipType(\"Publication\")\n+                                 .withEntityType(\"Publication\")\n                                  .build();\n         context.restoreAuthSystemState();\n-        String[] csv = {\"id,collection,relationship.type,dc.title,\" +\n+        String[] csv = {\"id,collection,dspace.entity.type,dc.title,\" +\n             \"relation.isProjectOfPublication,relation.isPublicationOfProject\",\n             \"+,\" + col1.getHandle() + \",Project,Title,\" +\n                 testItem.getID().toString() + \",\" + testItem.getID().toString()};"
  },
  {
    "sha": "fc972820b156e88288b1e473da7bcac602a7c922",
    "filename": "dspace-api/src/test/java/org/dspace/builder/ItemBuilder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/builder/ItemBuilder.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/builder/ItemBuilder.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/builder/ItemBuilder.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -86,8 +86,8 @@ public ItemBuilder withSubject(final String subject) {\n         return addMetadataValue(item, MetadataSchemaEnum.DC.getName(), \"subject\", null, subject);\n     }\n \n-    public ItemBuilder withRelationshipType(final String relationshipType) {\n-        return addMetadataValue(item, \"relationship\", \"type\", null, relationshipType);\n+    public ItemBuilder withEntityType(final String entityType) {\n+        return addMetadataValue(item, \"dspace\", \"entity\", \"type\", entityType);\n     }\n \n     public ItemBuilder withType(final String type) {"
  },
  {
    "sha": "416c3e84610c5db8c7bb9520cb80fb37e27052cd",
    "filename": "dspace-api/src/test/java/org/dspace/builder/WorkspaceItemBuilder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/builder/WorkspaceItemBuilder.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/builder/WorkspaceItemBuilder.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/builder/WorkspaceItemBuilder.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -180,8 +180,8 @@ public WorkspaceItemBuilder withAbstract(final String subject) {\n         return addMetadataValue(MetadataSchemaEnum.DC.getName(),\"description\", \"abstract\", subject);\n     }\n \n-    public WorkspaceItemBuilder withRelationshipType(final String relationshipType) {\n-        return addMetadataValue(\"relationship\", \"type\", null, relationshipType);\n+    public WorkspaceItemBuilder withEntityType(final String entityType) {\n+        return addMetadataValue(\"dspace\", \"entity\", \"type\", entityType);\n     }\n \n     public WorkspaceItemBuilder grantLicense() {"
  },
  {
    "sha": "305ebff69710478d3689509a2451af264d31ae13",
    "filename": "dspace-api/src/test/java/org/dspace/content/EntityServiceImplTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/EntityServiceImplTest.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/EntityServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/content/EntityServiceImplTest.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -181,7 +181,7 @@ public void testGetLeftRelationshipTypes() throws Exception {\n \n         // Mock the state of objects utilized in getLeftRelationshipTypes()\n         // to meet the success criteria of the invocation\n-        when(itemService.getMetadata(item, \"relationship\", \"type\", null, Item.ANY, false)).thenReturn(metsList);\n+        when(itemService.getMetadata(item, \"dspace\", \"entity\", \"type\", Item.ANY, false)).thenReturn(metsList);\n         when(entity.getItem()).thenReturn(item);\n         when(entityService.getType(context, entity)).thenReturn(entityType);\n         when(relationshipTypeService.findByEntityType(context, entityService.getType(context, entity), true, -1, -1))\n@@ -209,7 +209,7 @@ public void testGetRightRelationshipTypes() throws Exception {\n \n         // Mock the state of objects utilized in getRightRelationshipTypes()\n         // to meet the success criteria of the invocation\n-        when(itemService.getMetadata(item, \"relationship\", \"type\", null, Item.ANY, false)).thenReturn(metsList);\n+        when(itemService.getMetadata(item, \"dspace\", \"entity\", \"type\", Item.ANY, false)).thenReturn(metsList);\n         when(entity.getItem()).thenReturn(item);\n         when(entityService.getType(context, entity)).thenReturn(entityType);\n         when(relationshipTypeService.findByEntityType(context, entityService.getType(context, entity), false, -1, -1))"
  },
  {
    "sha": "4ad88271a855fc2ca6e147ec8b17b28d3bddb3dd",
    "filename": "dspace-api/src/test/java/org/dspace/content/RelationshipMetadataServiceIT.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/RelationshipMetadataServiceIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/RelationshipMetadataServiceIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/content/RelationshipMetadataServiceIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -88,8 +88,8 @@ private void initPublicationAuthor() {\n         context.turnOffAuthorisationSystem();\n         EntityType publicationEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n         EntityType authorEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"Author\").build();\n-        leftItem = ItemBuilder.createItem(context, col).withRelationshipType(\"Publication\").build();\n-        rightItem = ItemBuilder.createItem(context, col).withRelationshipType(\"Author\")\n+        leftItem = ItemBuilder.createItem(context, col).withEntityType(\"Publication\").build();\n+        rightItem = ItemBuilder.createItem(context, col).withEntityType(\"Author\")\n                                .withPersonIdentifierLastName(\"familyName\")\n                                .withPersonIdentifierFirstName(\"firstName\").build();\n         isAuthorOfPublicationRelationshipType =\n@@ -112,8 +112,8 @@ private void initPublicationAuthorWithCopyParams(boolean copyToLeft, boolean cop\n         context.turnOffAuthorisationSystem();\n         EntityType publicationEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n         EntityType authorEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"Author\").build();\n-        leftItem = ItemBuilder.createItem(context, col).withRelationshipType(\"Publication\").build();\n-        rightItem = ItemBuilder.createItem(context, col).withRelationshipType(\"Author\")\n+        leftItem = ItemBuilder.createItem(context, col).withEntityType(\"Publication\").build();\n+        rightItem = ItemBuilder.createItem(context, col).withEntityType(\"Author\")\n                                .withPersonIdentifierLastName(\"familyName\")\n                                .withPersonIdentifierFirstName(\"firstName\").build();\n         RelationshipType isAuthorOfPublication =\n@@ -136,9 +136,9 @@ private void initJournalVolumeIssue() {\n         EntityType journalIssueEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"JournalIssue\").build();\n         EntityType publicationVolumeEntityType =\n             EntityTypeBuilder.createEntityTypeBuilder(context, \"JournalVolume\").build();\n-        leftItem = ItemBuilder.createItem(context, col).withRelationshipType(\"JournalIssue\")\n+        leftItem = ItemBuilder.createItem(context, col).withEntityType(\"JournalIssue\")\n                               .withPublicationIssueNumber(\"2\").build();\n-        rightItem = ItemBuilder.createItem(context, col).withRelationshipType(\"JournalVolume\")\n+        rightItem = ItemBuilder.createItem(context, col).withEntityType(\"JournalVolume\")\n                                .withPublicationVolumeNumber(\"30\").build();\n         RelationshipType isIssueOfVolume =\n             RelationshipTypeBuilder\n@@ -446,7 +446,7 @@ public void testGetNextRightPlace() throws Exception {\n         Community community = CommunityBuilder.createCommunity(context).build();\n \n         Collection col = CollectionBuilder.createCollection(context, community).build();\n-        Item secondItem = ItemBuilder.createItem(context, col).withRelationshipType(\"Publication\").build();\n+        Item secondItem = ItemBuilder.createItem(context, col).withEntityType(\"Publication\").build();\n         RelationshipBuilder.createRelationshipBuilder(context, secondItem, rightItem,\n             isAuthorOfPublicationRelationshipType).build();\n         context.restoreAuthSystemState();\n@@ -465,7 +465,7 @@ public void testGetNextLeftPlace() throws Exception {\n         Community community = CommunityBuilder.createCommunity(context).build();\n         Collection col = CollectionBuilder.createCollection(context, community).build();\n \n-        Item secondAuthor = ItemBuilder.createItem(context, col).withRelationshipType(\"Author\")\n+        Item secondAuthor = ItemBuilder.createItem(context, col).withEntityType(\"Author\")\n                                        .withPersonIdentifierFirstName(\"firstName\")\n                                        .withPersonIdentifierLastName(\"familyName\").build();\n \n@@ -505,21 +505,21 @@ public void testGetVirtualMetadata() throws SQLException, AuthorizeException {\n         Community community = CommunityBuilder.createCommunity(context).build();\n         Collection collection = CollectionBuilder.createCollection(context, community).build();\n \n-        Item journalIssue = ItemBuilder.createItem(context, collection).withRelationshipType(\"JournalIssue\").build();\n+        Item journalIssue = ItemBuilder.createItem(context, collection).withEntityType(\"JournalIssue\").build();\n         Item journalVolume = ItemBuilder.createItem(context, collection)\n                                         .withPublicationVolumeNumber(\"30\")\n-                                        .withRelationshipType(\"JournalVolume\").build();\n+                                        .withEntityType(\"JournalVolume\").build();\n         Item journal = ItemBuilder.createItem(context, collection)\n                                   .withMetadata(\"creativeworkseries\", \"issn\", null, \"issn journal\")\n-                                  .withRelationshipType(\"Journal\").build();\n+                                  .withEntityType(\"Journal\").build();\n         RelationshipBuilder.createRelationshipBuilder(context, journalIssue, journalVolume,\n             isJournalVolumeOfIssueRelationshipType).build();\n         RelationshipBuilder.createRelationshipBuilder(context, journalVolume, journal,\n             isJournalVolumeOfJournalRelationshipType).build();\n \n         Item publication = ItemBuilder.createItem(context, collection)\n                                       .withTitle(\"Pub 1\")\n-                                      .withRelationshipType(\"Publication\").build();\n+                                      .withEntityType(\"Publication\").build();\n \n         RelationshipBuilder.createRelationshipBuilder(context, publication, journalIssue,\n             isJournalIssueOfPublicationRelationshipType).build();"
  },
  {
    "sha": "305de076a2f13f47533ef847bd36e1f98aeef9a5",
    "filename": "dspace-api/src/test/java/org/dspace/content/RelationshipServiceImplPlaceTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/RelationshipServiceImplPlaceTest.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/RelationshipServiceImplPlaceTest.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/content/RelationshipServiceImplPlaceTest.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -77,10 +77,10 @@ public void init() {\n             WorkspaceItem authorIs = workspaceItemService.create(context, col, false);\n \n             item = installItemService.installItem(context, is);\n-            itemService.addMetadata(context, item, \"relationship\", \"type\", null, null, \"Publication\");\n+            itemService.addMetadata(context, item, \"dspace\", \"entity\", \"type\", null, \"Publication\");\n \n             authorItem = installItemService.installItem(context, authorIs);\n-            itemService.addMetadata(context, authorItem, \"relationship\", \"type\", null, null, \"Person\");\n+            itemService.addMetadata(context, authorItem, \"dspace\", \"entity\", \"type\", null, \"Person\");\n             itemService.addMetadata(context, authorItem, \"person\", \"familyName\", null, null, \"familyName\");\n             itemService.addMetadata(context, authorItem, \"person\", \"givenName\", null, null, \"firstName\");\n \n@@ -156,7 +156,7 @@ public void addMetadataAndRelationshipTest() throws Exception {\n         // Here we create an Item so that we can create another relationship with this item\n         WorkspaceItem authorIs = workspaceItemService.create(context, col, false);\n         Item secondAuthorItem = installItemService.installItem(context, authorIs);\n-        itemService.addMetadata(context, secondAuthorItem, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, secondAuthorItem, \"dspace\", \"entity\", \"type\", null, \"Person\");\n         itemService.addMetadata(context, secondAuthorItem, \"person\", \"familyName\", null, null, \"familyNameTwo\");\n         itemService.addMetadata(context, secondAuthorItem, \"person\", \"givenName\", null, null, \"firstNameTwo\");\n         Relationship relationshipTwo = relationshipService\n@@ -222,7 +222,7 @@ public void AddMetadataAndRelationshipWithSpecificPlaceTest() throws Exception {\n         // Relationship a specific place as well\n         WorkspaceItem authorIs = workspaceItemService.create(context, col, false);\n         Item secondAuthorItem = installItemService.installItem(context, authorIs);\n-        itemService.addMetadata(context, secondAuthorItem, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, secondAuthorItem, \"dspace\", \"entity\", \"type\", null, \"Person\");\n         itemService.addMetadata(context, secondAuthorItem, \"person\", \"familyName\", null, null, \"familyNameTwo\");\n         itemService.addMetadata(context, secondAuthorItem, \"person\", \"givenName\", null, null, \"firstNameTwo\");\n         Relationship relationshipTwo = relationshipService\n@@ -334,7 +334,7 @@ public void AddAndRemoveMetadataAndRelationshipsTest() throws Exception {\n         // Create an additional item for another relationship\n         WorkspaceItem authorIs = workspaceItemService.create(context, col, false);\n         Item secondAuthorItem = installItemService.installItem(context, authorIs);\n-        itemService.addMetadata(context, secondAuthorItem, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, secondAuthorItem, \"dspace\", \"entity\", \"type\", null, \"Person\");\n         itemService.addMetadata(context, secondAuthorItem, \"person\", \"familyName\", null, null, \"familyNameTwo\");\n         itemService.addMetadata(context, secondAuthorItem, \"person\", \"givenName\", null, null, \"firstNameTwo\");\n         Relationship relationshipTwo = relationshipService"
  },
  {
    "sha": "bfc3a457c07cf6d326d2361b89c04b40c4efd759",
    "filename": "dspace-api/src/test/java/org/dspace/content/RelationshipServiceImplTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/RelationshipServiceImplTest.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/RelationshipServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/content/RelationshipServiceImplTest.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -227,8 +227,8 @@ public void testCreate() throws Exception {\n         when(metsList.get(0).getValue()).thenReturn(\"Entitylabel\");\n         when(relationshipService\n                 .findByItemAndRelationshipType(context, leftItem, testRel, true)).thenReturn(leftTypelist);\n-        when(itemService.getMetadata(leftItem, \"relationship\", \"type\", null, Item.ANY, false)).thenReturn(metsList);\n-        when(itemService.getMetadata(rightItem, \"relationship\", \"type\", null, Item.ANY, false)).thenReturn(metsList);\n+        when(itemService.getMetadata(leftItem, \"dspace\", \"entity\", \"type\", Item.ANY, false)).thenReturn(metsList);\n+        when(itemService.getMetadata(rightItem, \"dspace\", \"entity\", \"type\", Item.ANY, false)).thenReturn(metsList);\n         when(relationshipDAO.create(any(), any())).thenReturn(relationship);\n \n         // The reported Relationship should match our defined relationship\n@@ -305,8 +305,8 @@ public void testUpdate() throws Exception {\n         relationship = getRelationship(leftItem, rightItem, testRel, 0,0);\n \n         // Mock the state of objects utilized in update() to meet the success criteria of the invocation\n-        when(itemService.getMetadata(leftItem, \"relationship\", \"type\", null, Item.ANY, false)).thenReturn(metsList);\n-        when(itemService.getMetadata(rightItem, \"relationship\", \"type\", null, Item.ANY, false)).thenReturn(metsList);\n+        when(itemService.getMetadata(leftItem, \"dspace\", \"entity\", \"type\", Item.ANY, false)).thenReturn(metsList);\n+        when(itemService.getMetadata(rightItem, \"dspace\", \"entity\", \"type\", Item.ANY, false)).thenReturn(metsList);\n         when(authorizeService.authorizeActionBoolean(context, relationship.getLeftItem(),\n                 Constants.WRITE)).thenReturn(true);\n "
  },
  {
    "sha": "6c27f0cdb39d6e239497aef3484754933c2f3cfb",
    "filename": "dspace-api/src/test/java/org/dspace/content/dao/RelationshipDAOImplTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/dao/RelationshipDAOImplTest.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/dao/RelationshipDAOImplTest.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/content/dao/RelationshipDAOImplTest.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -87,8 +87,8 @@ public void init() {\n             WorkspaceItem workspaceItemTwo = workspaceItemService.create(context, collection, false);\n             itemOne = installItemService.installItem(context, workspaceItem);\n             itemTwo = installItemService.installItem(context, workspaceItemTwo);\n-            itemService.addMetadata(context, itemOne, \"relationship\", \"type\", null, Item.ANY, \"Publication\");\n-            itemService.addMetadata(context, itemTwo, \"relationship\", \"type\", null, Item.ANY, \"Person\");\n+            itemService.addMetadata(context, itemOne, \"dspace\", \"entity\", \"type\", Item.ANY, \"Publication\");\n+            itemService.addMetadata(context, itemTwo, \"dspace\", \"entity\", \"type\", Item.ANY, \"Person\");\n             itemService.update(context, itemOne);\n             itemService.update(context, itemTwo);\n             entityTypeOne = entityTypeService.create(context, \"Person\");"
  },
  {
    "sha": "3fff6fec4762923a438d7caad0fdc22424f76405",
    "filename": "dspace-api/src/test/java/org/dspace/content/dao/RelationshipTypeDAOImplTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/dao/RelationshipTypeDAOImplTest.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/content/dao/RelationshipTypeDAOImplTest.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/content/dao/RelationshipTypeDAOImplTest.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -82,8 +82,8 @@ public void init() {\n             WorkspaceItem workspaceItemTwo = workspaceItemService.create(context, collection, false);\n             itemOne = installItemService.installItem(context, workspaceItem);\n             itemTwo = installItemService.installItem(context, workspaceItemTwo);\n-            itemService.addMetadata(context, itemOne, \"relationship\", \"type\", null, Item.ANY, \"Publication\");\n-            itemService.addMetadata(context, itemTwo, \"relationship\", \"type\", null, Item.ANY, \"Person\");\n+            itemService.addMetadata(context, itemOne, \"dspace\", \"entity\", \"type\", Item.ANY, \"Publication\");\n+            itemService.addMetadata(context, itemTwo, \"dspace\", \"entity\", \"type\", Item.ANY, \"Person\");\n             itemService.update(context, itemOne);\n             itemService.update(context, itemTwo);\n             entityTypeOne = entityTypeService.create(context, \"Person\");"
  },
  {
    "sha": "2b77987c78c2ef90c8a2ceb5956c2360905a609f",
    "filename": "dspace-api/src/test/java/org/dspace/statistics/export/ITIrusExportUsageEventListener.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/statistics/export/ITIrusExportUsageEventListener.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/statistics/export/ITIrusExportUsageEventListener.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/statistics/export/ITIrusExportUsageEventListener.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -123,14 +123,14 @@ public void setUp() throws Exception {\n             community = CommunityBuilder.createCommunity(context).build();\n             collection = CollectionBuilder.createCollection(context, community).build();\n             item = ItemBuilder.createItem(context, collection)\n-                              .withRelationshipType(entityType.getLabel())\n+                              .withEntityType(entityType.getLabel())\n                               .build();\n \n             File f = new File(testProps.get(\"test.bitstream\").toString());\n             bitstream = BitstreamBuilder.createBitstream(context, item, new FileInputStream(f)).build();\n \n             itemNotToBeProcessed = ItemBuilder.createItem(context, collection)\n-                                              .withRelationshipType(entityType.getLabel())\n+                                              .withEntityType(entityType.getLabel())\n                                               .withType(\"Excluded type\")\n                                               .build();\n             File itemNotToBeProcessedFile = new File(testProps.get(\"test.bitstream\").toString());\n@@ -263,8 +263,8 @@ public void testReceiveEventOnItemThatShouldNotBeProcessed() throws SQLException\n         when(usageEvent.getRequest()).thenReturn(request);\n         when(usageEvent.getContext()).thenReturn(new Context());\n \n-        itemService.clearMetadata(context, item, \"relationship\", \"type\", null, Item.ANY);\n-        itemService.addMetadata(context, item, \"relationship\", \"type\", null, null, \"OrgUnit\");\n+        itemService.clearMetadata(context, item, \"dspace\", \"entity\", \"type\", Item.ANY);\n+        itemService.addMetadata(context, item, \"dspace\", \"entity\", \"type\", null, \"OrgUnit\");\n         itemService.update(context, item);\n \n         context.restoreAuthSystemState();\n@@ -359,8 +359,8 @@ public void testReceiveEventOnBitstreamThatShouldNotBeProcessed() throws SQLExce\n         when(usageEvent.getRequest()).thenReturn(request);\n         when(usageEvent.getContext()).thenReturn(new Context());\n \n-        itemService.clearMetadata(context, item, \"relationship\", \"type\", null, Item.ANY);\n-        itemService.addMetadata(context, item, \"relationship\", \"type\", null, null, \"OrgUnit\");\n+        itemService.clearMetadata(context, item, \"dspace\", \"entity\", \"type\", Item.ANY);\n+        itemService.addMetadata(context, item, \"dspace\", \"entity\", \"type\", null, \"OrgUnit\");\n         itemService.update(context, item);\n \n         context.restoreAuthSystemState();"
  },
  {
    "sha": "44848d579b8025ceab50d8f97127d6baf2b0036b",
    "filename": "dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorIT.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -135,7 +135,7 @@ public void testShouldProcessItemWhenCanEdit() throws SQLException {\n         context.turnOffAuthorisationSystem();\n         Community community = CommunityBuilder.createCommunity(context).build();\n         Collection collection = CollectionBuilder.createCollection(context, community).build();\n-        Item item = ItemBuilder.createItem(context, collection).withRelationshipType(otherEntity.getLabel()).build();\n+        Item item = ItemBuilder.createItem(context, collection).withEntityType(otherEntity.getLabel()).build();\n         context.restoreAuthSystemState();\n \n         context.setCurrentUser(admin);\n@@ -157,7 +157,7 @@ public void testShouldProcessItemWhenShouldNotProcessType() throws Exception {\n         Collection collection = CollectionBuilder.createCollection(context, community).build();\n         Item item = ItemBuilder.createItem(context, collection)\n                                .withType(\"Excluded type\")\n-                               .withRelationshipType(publication.getLabel())\n+                               .withEntityType(publication.getLabel())\n                                .build();\n \n         context.restoreAuthSystemState();\n@@ -177,7 +177,7 @@ public void testShouldProcessItemWhenShouldNotProcessEntity() throws SQLExceptio\n         context.turnOffAuthorisationSystem();\n         Community community = CommunityBuilder.createCommunity(context).build();\n         Collection collection = CollectionBuilder.createCollection(context, community).build();\n-        Item item = ItemBuilder.createItem(context, collection).withRelationshipType(otherEntity.getLabel()).build();\n+        Item item = ItemBuilder.createItem(context, collection).withEntityType(otherEntity.getLabel()).build();\n         context.restoreAuthSystemState();\n \n         ExportEventProcessor exportEventProcessor = new ItemEventProcessor(context, request, item);\n@@ -195,7 +195,7 @@ public void testShouldProcessItem() throws SQLException {\n         context.turnOffAuthorisationSystem();\n         Community community = CommunityBuilder.createCommunity(context).build();\n         Collection collection = CollectionBuilder.createCollection(context, community).build();\n-        Item item = ItemBuilder.createItem(context, collection).withRelationshipType(publication.getLabel()).build();\n+        Item item = ItemBuilder.createItem(context, collection).withEntityType(publication.getLabel()).build();\n         context.restoreAuthSystemState();\n \n         ExportEventProcessor exportEventProcessor = new ItemEventProcessor(context, request, item);\n@@ -214,7 +214,7 @@ public void testShouldProcessEntityType() throws SQLException {\n         context.turnOffAuthorisationSystem();\n         Community community = CommunityBuilder.createCommunity(context).build();\n         Collection collection = CollectionBuilder.createCollection(context, community).build();\n-        Item item = ItemBuilder.createItem(context, collection).withRelationshipType(publication.getLabel()).build();\n+        Item item = ItemBuilder.createItem(context, collection).withEntityType(publication.getLabel()).build();\n         context.restoreAuthSystemState();\n \n         ExportEventProcessor exportEventProcessor = new ItemEventProcessor(context, request, item);\n@@ -232,7 +232,7 @@ public void testShouldProcessEntityTypeWhenNotInList() throws SQLException {\n         context.turnOffAuthorisationSystem();\n         Community community = CommunityBuilder.createCommunity(context).build();\n         Collection collection = CollectionBuilder.createCollection(context, community).build();\n-        Item item = ItemBuilder.createItem(context, collection).withRelationshipType(otherEntity.getLabel()).build();\n+        Item item = ItemBuilder.createItem(context, collection).withEntityType(otherEntity.getLabel()).build();\n         context.restoreAuthSystemState();\n \n         ExportEventProcessor exportEventProcessor = new ItemEventProcessor(context, request, item);"
  },
  {
    "sha": "643d423440c44d64428a4f20b0e9a354e5271773",
    "filename": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -51,7 +51,7 @@ public ItemRest convert(Item obj, Projection projection) {\n         item.setLastModified(obj.getLastModified());\n \n         List<MetadataValue> entityTypes =\n-            itemService.getMetadata(obj, \"relationship\", \"type\", null, Item.ANY, false);\n+            itemService.getMetadata(obj, \"dspace\", \"entity\", \"type\", Item.ANY, false);\n         if (CollectionUtils.isNotEmpty(entityTypes) && StringUtils.isNotBlank(entityTypes.get(0).getValue())) {\n             item.setEntityType(entityTypes.get(0).getValue());\n         }"
  },
  {
    "sha": "697a83d29c4801adce389723c84361b65f66f4e8",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -2800,7 +2800,7 @@ public void testEntityTypePerson() throws Exception {\n             .withAuthor(\"Smith, Donald\")\n             .withPersonIdentifierLastName(\"Smith\")\n             .withPersonIdentifierFirstName(\"Donald\")\n-            .withRelationshipType(\"Person\")\n+            .withEntityType(\"Person\")\n             .build();\n         context.restoreAuthSystemState();\n \n@@ -2834,7 +2834,7 @@ public void testEntityTypePublication() throws Exception {\n             .withTitle(\"Publication1\")\n             .withAuthor(\"Testy, TEst\")\n             .withIssueDate(\"2015-01-01\")\n-            .withRelationshipType(\"Publication\")\n+            .withEntityType(\"Publication\")\n             .build();\n         context.restoreAuthSystemState();\n \n@@ -2916,7 +2916,7 @@ public void testEntityTypeModification() throws Exception {\n         Map<String, String> value = new HashMap<>();\n         value.put(\"value\", \"Publication\");\n         values.add(value);\n-        AddOperation addOperation = new AddOperation(\"/metadata/relationship.type\", values);\n+        AddOperation addOperation = new AddOperation(\"/metadata/dspace.entity.type\", values);\n         ops.add(addOperation);\n         String patchBody = getPatchContent(ops);\n         getClient(token).perform(patch(\"/api/core/items/\" + item.getID())\n@@ -3477,21 +3477,21 @@ public void deleteItemWithMinRelationshipsTest_copyVirtualMetadata_configured_wi\n                              .withAuthor(\"Smith, Donald\")\n                              .withPersonIdentifierLastName(\"Smith\")\n                              .withPersonIdentifierFirstName(\"Donald\")\n-                             .withRelationshipType(\"Person\")\n+                             .withEntityType(\"Person\")\n                              .build();\n \n         author2 = ItemBuilder.createItem(context, col1)\n                              .withTitle(\"Author2\")\n                              .withIssueDate(\"2016-02-13\")\n                              .withAuthor(\"Smith, Maria\")\n-                             .withRelationshipType(\"Person\")\n+                             .withEntityType(\"Person\")\n                              .build();\n \n         publication1 = ItemBuilder.createItem(context, col1)\n                                   .withTitle(\"Publication1\")\n                                   .withAuthor(\"Testy, TEst\")\n                                   .withIssueDate(\"2015-01-01\")\n-                                  .withRelationshipType(\"Publication\")\n+                                  .withEntityType(\"Publication\")\n                                   .build();\n \n         EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n@@ -3541,21 +3541,21 @@ private void initPublicationAuthorsRelationships() throws SQLException {\n                              .withAuthor(\"Smith, Donald\")\n                              .withPersonIdentifierLastName(\"Smith\")\n                              .withPersonIdentifierFirstName(\"Donald\")\n-                             .withRelationshipType(\"Person\")\n+                             .withEntityType(\"Person\")\n                              .build();\n \n         author2 = ItemBuilder.createItem(context, col1)\n                              .withTitle(\"Author2\")\n                              .withIssueDate(\"2016-02-13\")\n                              .withAuthor(\"Smith, Maria\")\n-                             .withRelationshipType(\"Person\")\n+                             .withEntityType(\"Person\")\n                              .build();\n \n         publication1 = ItemBuilder.createItem(context, col1)\n                                   .withTitle(\"Publication1\")\n                                   .withAuthor(\"Testy, TEst\")\n                                   .withIssueDate(\"2015-01-01\")\n-                                  .withRelationshipType(\"Publication\")\n+                                  .withEntityType(\"Publication\")\n                                   .build();\n \n         EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();"
  },
  {
    "sha": "e48cada2f01440538ce24348f4471b545cffef5d",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadataSchemaRestRepositoryIT.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadataSchemaRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadataSchemaRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadataSchemaRestRepositoryIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -289,7 +289,7 @@ public void findAllPaginationTest() throws Exception {\n                    .andExpect(jsonPath(\"$._links.last.href\", Matchers.allOf(\n                            Matchers.containsString(\"/api/core/metadataschemas?\"),\n                            Matchers.containsString(\"page=2\"), Matchers.containsString(\"size=6\"))))\n-                   .andExpect(jsonPath(\"$.page.totalElements\", is(16)))\n+                   .andExpect(jsonPath(\"$.page.totalElements\", is(15)))\n                    .andExpect(jsonPath(\"$.page.totalPages\", is(3)))\n                    .andExpect(jsonPath(\"$.page.size\", is(6)));\n \n@@ -314,7 +314,7 @@ public void findAllPaginationTest() throws Exception {\n                    .andExpect(jsonPath(\"$._links.last.href\", Matchers.allOf(\n                            Matchers.containsString(\"/api/core/metadataschemas?\"),\n                            Matchers.containsString(\"page=2\"), Matchers.containsString(\"size=6\"))))\n-                   .andExpect(jsonPath(\"$.page.totalElements\", is(16)))\n+                   .andExpect(jsonPath(\"$.page.totalElements\", is(15)))\n                    .andExpect(jsonPath(\"$.page.totalPages\", is(3)))\n                    .andExpect(jsonPath(\"$.page.size\", is(6)));\n \n@@ -336,7 +336,7 @@ public void findAllPaginationTest() throws Exception {\n                    .andExpect(jsonPath(\"$._links.last.href\", Matchers.allOf(\n                            Matchers.containsString(\"/api/core/metadataschemas?\"),\n                            Matchers.containsString(\"page=2\"), Matchers.containsString(\"size=6\"))))\n-                   .andExpect(jsonPath(\"$.page.totalElements\", is(16)))\n+                   .andExpect(jsonPath(\"$.page.totalElements\", is(15)))\n                    .andExpect(jsonPath(\"$.page.totalPages\", is(3)))\n                    .andExpect(jsonPath(\"$.page.size\", is(6)));\n "
  },
  {
    "sha": "ac3a4502f45d5a696ef6a454aa34b4e9671a7669",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadatafieldRestRepositoryIT.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadatafieldRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadatafieldRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadatafieldRestRepositoryIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -992,8 +992,9 @@ public void findAllPaginationTest() throws Exception {\n                    .andExpect(status().isOk())\n                    .andExpect(content().contentType(contentType))\n                    .andExpect(jsonPath(\"$._embedded.metadatafields\", Matchers.hasItems(\n+                              MetadataFieldMatcher.matchMetadataFieldByKeys(\"relation\",\n+                                                                            \"isPublicationOfProject\", null),\n                               MetadataFieldMatcher.matchMetadataFieldByKeys(\"relation\",\"isVolumeOfJournal\", null),\n-                              MetadataFieldMatcher.matchMetadataFieldByKeys(\"relationship\", \"type\", null),\n                               MetadataFieldMatcher.matchMetadataFieldByKeys(\"workflow\", \"score\", null)\n                               )))\n                    .andExpect(jsonPath(\"$._links.first.href\", Matchers.allOf("
  },
  {
    "sha": "02920d77bb5333ccbe65729d867fd416985620ca",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -139,17 +139,17 @@ private void initPersonPublicationWorkspace() throws Exception {\n                 .withTitle(\"Person 1\")\n                 .withPersonIdentifierFirstName(\"Sarah\")\n                 .withPersonIdentifierLastName(\"Dahlen\")\n-                .withRelationshipType(\"Person\")\n+                .withEntityType(\"Person\")\n                 .build();\n         personItem2 = ItemBuilder.createItem(context, collection)\n                 .withTitle(\"Person 2\")\n                 .withPersonIdentifierFirstName(\"Oliver\")\n                 .withPersonIdentifierLastName(\"Linton\")\n-                .withRelationshipType(\"Person\")\n+                .withEntityType(\"Person\")\n                 .build();\n         publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n                 .withTitle(\"Publication 1\")\n-                .withRelationshipType(\"Publication\")\n+                .withEntityType(\"Publication\")\n                 .build();\n         publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n                 entityTypeService.findByEntityType(context, \"Publication\"),\n@@ -257,7 +257,7 @@ private void initPlainTextPublicationWorkspace() throws Exception {\n \n         publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n                                               .withTitle(\"Publication 1\")\n-                                              .withRelationshipType(\"Publication\")\n+                                              .withEntityType(\"Publication\")\n                                               .build();\n \n         String adminToken = getAuthToken(admin.getEmail(), password);"
  },
  {
    "sha": "d5ee5839084fb953ff19d3373114ddf46c4d0c66",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipDeleteRestRepositoryIT.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipDeleteRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipDeleteRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipDeleteRestRepositoryIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -117,11 +117,11 @@ private void initPublicationAuthor() throws Exception {\n \n         leftItem = ItemBuilder.createItem(context, collection)\n             .withTitle(\"Left item\")\n-            .withRelationshipType(\"Publication\")\n+            .withEntityType(\"Publication\")\n             .build();\n         rightItem = ItemBuilder.createItem(context, collection)\n             .withTitle(\"Right item\")\n-            .withRelationshipType(\"Person\")\n+            .withEntityType(\"Person\")\n             .withPersonIdentifierFirstName(\"firstName\")\n             .withPersonIdentifierLastName(\"familyName\")\n             .build();\n@@ -141,12 +141,12 @@ private void initJournalVolumeIssue() throws Exception {\n \n         leftItem = ItemBuilder.createItem(context, collection)\n             .withTitle(\"Left item\")\n-            .withRelationshipType(\"JournalIssue\")\n+            .withEntityType(\"JournalIssue\")\n             .withPublicationIssueNumber(\"2\")\n             .build();\n         rightItem = ItemBuilder.createItem(context, collection)\n             .withTitle(\"Right item\")\n-            .withRelationshipType(\"JournalVolume\")\n+            .withEntityType(\"JournalVolume\")\n             .withPublicationVolumeNumber(\"30\")\n             .build();\n         relationshipType = relationshipTypeService\n@@ -166,15 +166,15 @@ private void initPersonProjectPublication() throws Exception {\n             .withTitle(\"Person 1\")\n             .withPersonIdentifierFirstName(\"Donald\")\n             .withPersonIdentifierLastName(\"Smith\")\n-            .withRelationshipType(\"Person\")\n+            .withEntityType(\"Person\")\n             .build();\n         projectItem = ItemBuilder.createItem(context, collection)\n             .withTitle(\"Project 1\")\n-            .withRelationshipType(\"Project\")\n+            .withEntityType(\"Project\")\n             .build();\n         publicationItem = ItemBuilder.createItem(context, collection)\n             .withTitle(\"Publication 1\")\n-            .withRelationshipType(\"Publication\")\n+            .withEntityType(\"Publication\")\n             .build();\n         personProjectRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n             entityTypeService.findByEntityType(context, \"Person\"),"
  },
  {
    "sha": "e89cb624eb7a833260328be67d3e05de6a357ff3",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java",
    "status": "modified",
    "additions": 25,
    "deletions": 25,
    "changes": 50,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -143,64 +143,64 @@ public void setUp() throws Exception {\n                              .withAuthor(\"Smith, Donald\")\n                              .withPersonIdentifierLastName(\"Smith\")\n                              .withPersonIdentifierFirstName(\"Donald\")\n-                             .withRelationshipType(\"Person\")\n+                             .withEntityType(\"Person\")\n                              .build();\n \n         author2 = ItemBuilder.createItem(context, col2)\n                              .withTitle(\"Author2\")\n                              .withIssueDate(\"2016-02-13\")\n                              .withAuthor(\"Smith, Maria\")\n-                             .withRelationshipType(\"Person\")\n+                             .withEntityType(\"Person\")\n                              .build();\n \n         author3 = ItemBuilder.createItem(context, col2)\n                              .withTitle(\"Author3\")\n                              .withIssueDate(\"2016-02-13\")\n                              .withPersonIdentifierFirstName(\"Maybe\")\n                              .withPersonIdentifierLastName(\"Maybe\")\n-                             .withRelationshipType(\"Person\")\n+                             .withEntityType(\"Person\")\n                              .build();\n \n         publication1 = ItemBuilder.createItem(context, col3)\n                                   .withTitle(\"Publication1\")\n                                   .withAuthor(\"Testy, TEst\")\n                                   .withIssueDate(\"2015-01-01\")\n-                                  .withRelationshipType(\"Publication\")\n+                                  .withEntityType(\"Publication\")\n                                   .build();\n \n         publication2 = ItemBuilder.createItem(context, col3)\n                                   .withTitle(\"Publication2\")\n                                   .withAuthor(\"Testy, TEst\")\n                                   .withIssueDate(\"2015-01-01\")\n-                                  .withRelationshipType(\"Publication\")\n+                                  .withEntityType(\"Publication\")\n                                   .build();\n \n         orgUnit1 = ItemBuilder.createItem(context, col3)\n                               .withTitle(\"OrgUnit1\")\n                               .withAuthor(\"Testy, TEst\")\n                               .withIssueDate(\"2015-01-01\")\n-                              .withRelationshipType(\"OrgUnit\")\n+                              .withEntityType(\"OrgUnit\")\n                               .build();\n \n         orgUnit2 = ItemBuilder.createItem(context, col3)\n                 .withTitle(\"OrgUnit2\")\n                 .withAuthor(\"Testy, TEst\")\n                 .withIssueDate(\"2015-01-01\")\n-                .withRelationshipType(\"OrgUnit\")\n+                .withEntityType(\"OrgUnit\")\n                 .build();\n \n         orgUnit3 = ItemBuilder.createItem(context, col3)\n                               .withTitle(\"OrgUnit3\")\n                               .withAuthor(\"Test, Testy\")\n                               .withIssueDate(\"2015-02-01\")\n-                              .withRelationshipType(\"OrgUnit\")\n+                              .withEntityType(\"OrgUnit\")\n                               .build();\n \n         project1 = ItemBuilder.createItem(context, col3)\n                               .withTitle(\"Project1\")\n                               .withAuthor(\"Testy, TEst\")\n                               .withIssueDate(\"2015-01-01\")\n-                              .withRelationshipType(\"Project\")\n+                              .withEntityType(\"Project\")\n                               .build();\n \n         isAuthorOfPublicationRelationshipType = relationshipTypeService\n@@ -665,29 +665,29 @@ public void addRelationshipsAndMetadataToValidatePlaceTest() throws Exception {\n                                   .withIssueDate(\"2017-10-17\")\n                                   .withPersonIdentifierFirstName(\"Donald\")\n                                   .withPersonIdentifierLastName(\"Smith\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item author2 = ItemBuilder.createItem(context, col2)\n                                   .withTitle(\"Author2\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withPersonIdentifierFirstName(\"Maria\")\n                                   .withPersonIdentifierLastName(\"Smith\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item author3 = ItemBuilder.createItem(context, col2)\n                                   .withTitle(\"Author3\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withPersonIdentifierFirstName(\"Maybe\")\n                                   .withPersonIdentifierLastName(\"Maybe\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item publication1 = ItemBuilder.createItem(context, col3)\n                                        .withTitle(\"Publication1\")\n                                        .withIssueDate(\"2015-01-01\")\n-                                       .withRelationshipType(\"Publication\")\n+                                       .withEntityType(\"Publication\")\n                                        .build();\n \n         RelationshipType isAuthorOfPublicationRelationshipType = relationshipTypeService\n@@ -968,23 +968,23 @@ public void deleteMetadataValueAndValidatePlace() throws Exception {\n         Item publication1 = ItemBuilder.createItem(context, col3)\n                                        .withTitle(\"Publication1\")\n                                        .withIssueDate(\"2015-01-01\")\n-                                       .withRelationshipType(\"Publication\")\n+                                       .withEntityType(\"Publication\")\n                                        .build();\n \n         Item author2 = ItemBuilder.createItem(context, col2)\n                                   .withTitle(\"Author2\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withPersonIdentifierFirstName(\"Maria\")\n                                   .withPersonIdentifierLastName(\"Smith\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item author3 = ItemBuilder.createItem(context, col2)\n                                   .withTitle(\"Author3\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withPersonIdentifierFirstName(\"Maybe\")\n                                   .withPersonIdentifierLastName(\"Maybe\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         String adminToken = getAuthToken(admin.getEmail(), password);\n@@ -1181,23 +1181,23 @@ public void deleteRelationshipsAndValidatePlace() throws Exception {\n         Item publication1 = ItemBuilder.createItem(context, col3)\n                                        .withTitle(\"Publication1\")\n                                        .withIssueDate(\"2015-01-01\")\n-                                       .withRelationshipType(\"Publication\")\n+                                       .withEntityType(\"Publication\")\n                                        .build();\n \n         Item author2 = ItemBuilder.createItem(context, col2)\n                                   .withTitle(\"Author2\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withPersonIdentifierFirstName(\"Maria\")\n                                   .withPersonIdentifierLastName(\"Smith\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item author3 = ItemBuilder.createItem(context, col2)\n                                   .withTitle(\"Author3\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withPersonIdentifierFirstName(\"Maybe\")\n                                   .withPersonIdentifierLastName(\"Maybe\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         String adminToken = getAuthToken(admin.getEmail(), password);\n@@ -1395,7 +1395,7 @@ public void deleteRelationship() throws Exception {\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withPersonIdentifierFirstName(\"Maria\")\n                                   .withPersonIdentifierLastName(\"Smith\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         String adminToken = getAuthToken(admin.getEmail(), password);\n@@ -2385,7 +2385,7 @@ public void mixedRightwardValueAndRegularRelationshipTest() throws Exception {\n                                   .withAuthor(\"Smith, Donald\")\n                                   .withPersonIdentifierFirstName(\"testingFirstName\")\n                                   .withPersonIdentifierLastName(\"testingLastName\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Relationship relationship3 = RelationshipBuilder\n@@ -2755,15 +2755,15 @@ public void testVirtualMdInRESTAndSolrDoc() throws Exception {\n \n         // Create entity items\n         Item journal =\n-            ItemBuilder.createItem(context, col1).withRelationshipType(\"Journal\").withTitle(journalTitle).build();\n+            ItemBuilder.createItem(context, col1).withEntityType(\"Journal\").withTitle(journalTitle).build();\n         Item journalVolume =\n-            ItemBuilder.createItem(context, col1).withRelationshipType(\"JournalVolume\").withTitle(\"JournalVolume\")\n+            ItemBuilder.createItem(context, col1).withEntityType(\"JournalVolume\").withTitle(\"JournalVolume\")\n                        .build();\n         Item journalIssue =\n-            ItemBuilder.createItem(context, col1).withRelationshipType(\"JournalIssue\").withTitle(\"JournalIssue\")\n+            ItemBuilder.createItem(context, col1).withEntityType(\"JournalIssue\").withTitle(\"JournalIssue\")\n                        .build();\n         Item publication =\n-            ItemBuilder.createItem(context, col1).withRelationshipType(\"Publication\").withTitle(\"Publication\").build();\n+            ItemBuilder.createItem(context, col1).withEntityType(\"Publication\").withTitle(\"Publication\").build();\n \n         // Link Publication-Journal Issue\n         RelationshipBuilder.createRelationshipBuilder(context, journalIssue, publication, isPublicationOfJournalIssue)"
  },
  {
    "sha": "eb7945023d704ceda730efe01cf1f4545a27f8a6",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipTypeRestControllerIT.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipTypeRestControllerIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipTypeRestControllerIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipTypeRestControllerIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -118,48 +118,48 @@ public void createAndFindRelationships() throws Exception {\n                                   .withTitle(\"Author1\")\n                                   .withIssueDate(\"2017-10-17\")\n                                   .withAuthor(\"Smith, Donald\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item author2 = ItemBuilder.createItem(context, col2)\n                                   .withTitle(\"Author2\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withAuthor(\"Smith, Maria\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item author3 = ItemBuilder.createItem(context, col2)\n                                   .withTitle(\"Author3\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withAuthor(\"Maybe, Maybe\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item orgUnit1 = ItemBuilder.createItem(context, col3)\n                                    .withTitle(\"OrgUnit1\")\n                                    .withAuthor(\"Testy, TEst\")\n                                    .withIssueDate(\"2015-01-01\")\n-                                   .withRelationshipType(\"OrgUnit\")\n+                                   .withEntityType(\"OrgUnit\")\n                                    .build();\n \n         Item project1 = ItemBuilder.createItem(context, col3)\n                                    .withTitle(\"Project1\")\n                                    .withAuthor(\"Testy, TEst\")\n                                    .withIssueDate(\"2015-01-01\")\n-                                   .withRelationshipType(\"Project\")\n+                                   .withEntityType(\"Project\")\n                                    .build();\n \n         Item publication = ItemBuilder.createItem(context, col3)\n                                       .withTitle(\"Publication1\")\n                                       .withAuthor(\"Testy, TEst\")\n                                       .withIssueDate(\"2015-01-01\")\n-                                      .withRelationshipType(\"Publication\")\n+                                      .withEntityType(\"Publication\")\n                                       .build();\n \n         Item publication2 = ItemBuilder.createItem(context, col3)\n                                        .withTitle(\"Publication2\")\n                                        .withIssueDate(\"2015-01-01\")\n-                                       .withRelationshipType(\"Publication\")\n+                                       .withEntityType(\"Publication\")\n                                        .build();\n \n         RelationshipType isOrgUnitOfPersonRelationshipType = relationshipTypeService"
  },
  {
    "sha": "8953d7ba17b1bb1922a6f83c32c46b3d50e95989",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -4972,19 +4972,19 @@ public void deleteWorkspaceItemWithMinRelationshipsTest() throws Exception {\n                                   .withAuthor(\"Smith, Donald\")\n                                   .withPersonIdentifierLastName(\"Smith\")\n                                   .withPersonIdentifierFirstName(\"Donald\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         Item author2 = ItemBuilder.createItem(context, col1)\n                                   .withTitle(\"Author2\")\n                                   .withIssueDate(\"2016-02-13\")\n                                   .withAuthor(\"Smith, Maria\")\n-                                  .withRelationshipType(\"Person\")\n+                                  .withEntityType(\"Person\")\n                                   .build();\n \n         //2. One workspace item.\n         WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n-                                                          .withRelationshipType(\"Publication\")\n+                                                          .withEntityType(\"Publication\")\n                                                           .build();\n \n         EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();"
  },
  {
    "sha": "840347dc42d07dead12aec289faa1b296630bee8",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvExportIT.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvExportIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvExportIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvExportIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -60,7 +60,7 @@ public void metadataExportTestWithoutFileParameterSucceeds() throws Exception {\n         Item article = ItemBuilder.createItem(context, col1)\n                                   .withTitle(\"Article\")\n                                   .withIssueDate(\"2017-10-17\")\n-                                  .withRelationshipType(\"Publication\")\n+                                  .withEntityType(\"Publication\")\n                                   .build();\n \n         AtomicReference<Integer> idRef = new AtomicReference<>();\n@@ -111,7 +111,7 @@ public void metadataExportTestWithFileParameterFails() throws Exception {\n         Item article = ItemBuilder.createItem(context, col1)\n                                   .withTitle(\"Article\")\n                                   .withIssueDate(\"2017-10-17\")\n-                                  .withRelationshipType(\"Publication\")\n+                                  .withEntityType(\"Publication\")\n                                   .build();\n \n         AtomicReference<Integer> idRef = new AtomicReference<>();"
  },
  {
    "sha": "6f8a0104952d8bb761161ce30c24f0dc68c90b45",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java",
    "status": "modified",
    "additions": 71,
    "deletions": 54,
    "changes": 125,
    "blob_url": "https://github.com/DSpace/DSpace/blob/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/df3469a0ae9ed8a8d53d39549915a24542d92a2f/dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java?ref=df3469a0ae9ed8a8d53d39549915a24542d92a2f",
    "patch": "@@ -9,10 +9,10 @@\n \n import static com.jayway.jsonpath.JsonPath.read;\n import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n@@ -88,77 +88,93 @@ public void createRelationshipsWithCsvImportTest() throws Exception {\n         Collection col2 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 2\").build();\n         Collection col3 = CollectionBuilder.createCollection(context, child1).withName(\"OrgUnits\").build();\n \n+        // Create a new Publication (which is an Article)\n         Item article = ItemBuilder.createItem(context, col1)\n                                   .withTitle(\"Article\")\n                                   .withIssueDate(\"2017-10-17\")\n-                                  .withRelationshipType(\"Publication\")\n+                                  .withEntityType(\"Publication\")\n                                   .build();\n \n-        Item itemB = validateSpecificItemRelationCreationCsvImport(col1, article, \"TestItemB\", \"Person\",\n+        // Via CSV import, add two Authors to that Publication\n+        Item author1 = validateSpecificItemRelationCreationCsvImport(col1, article, \"TestAuthor1\", \"Person\",\n                                                                    \"isPublicationOfAuthor\",\n                                                                    \"Relationship list size is 1\", 1, 0, 0);\n-        Item itemC = validateSpecificItemRelationCreationCsvImport(col1, article, \"TestItemC\", \"Person\",\n+        Item author2 = validateSpecificItemRelationCreationCsvImport(col1, article, \"TestAuthor2\", \"Person\",\n                                                                    \"isPublicationOfAuthor\",\n                                                                    \"Relationship list size is 1\", 1, 1, 0);\n-        Item itemD = validateSpecificItemRelationCreationCsvImport(col1, article, \"TestItemD\", \"Project\",\n+        // Via CSV import, add a Project related to that Publication\n+        Item project = validateSpecificItemRelationCreationCsvImport(col1, article, \"TestProject\", \"Project\",\n                                                                    \"isPublicationOfProject\",\n                                                                    \"Relationship list size is 1\", 1, 0, 0);\n-        Item itemE = validateSpecificItemRelationCreationCsvImportMultiple(col1, \"TestItemE\", \"Publication\",\n+        // Via CSV import, add a new Publication related to both author1 & author2\n+        Item article2 = validateSpecificItemRelationCreationCsvImportMultiple(col1, \"TestArticle2\", \"Publication\",\n                                                                            \"isAuthorOfPublication\",\n                                                                            \"Relationship list size is 2\", 2, 0, 1,\n-                                                                           itemC, itemB);\n+                                                                           author2, author1);\n \n-        List<Relationship> relationships = relationshipService.findByItem(context, itemE);\n+        // Verify that the new Publication is related to both author2 and author1 (in that exact order)\n+        List<Relationship> relationships = relationshipService.findByItem(context, article2);\n+        assertEquals(2, relationships.size());\n         getClient().perform(get(\"/api/core/relationships/\" + relationships.get(0).getID()).param(\"projection\", \"full\"))\n                    .andExpect(status().isOk())\n                    .andExpect(jsonPath(\"$.leftPlace\", is(0)))\n-                   .andExpect(jsonPath(\"$._links.rightItem.href\", containsString(itemC.getID().toString())))\n+                   .andExpect(jsonPath(\"$._links.rightItem.href\", containsString(author2.getID().toString())))\n                    .andExpect(jsonPath(\"$.rightPlace\", is(1)))\n                    .andExpect(jsonPath(\"$\", Matchers.is(RelationshipMatcher.matchRelationship(relationships.get(0)))));\n         getClient().perform(get(\"/api/core/relationships/\" + relationships.get(1).getID()).param(\"projection\", \"full\"))\n                    .andExpect(status().isOk())\n                    .andExpect(jsonPath(\"$.leftPlace\", is(1)))\n-                   .andExpect(jsonPath(\"$._links.rightItem.href\", containsString(itemB.getID().toString())))\n+                   .andExpect(jsonPath(\"$._links.rightItem.href\", containsString(author1.getID().toString())))\n                    .andExpect(jsonPath(\"$.rightPlace\", is(1)))\n                    .andExpect(jsonPath(\"$\", Matchers.is(RelationshipMatcher.matchRelationship(relationships.get(1)))));\n \n-        Item itemF = validateSpecificItemRelationCreationCsvImport(col1, itemE, \"TestItemF\", \"Person\",\n+        // Via CSV import add a new Author to the new Publication, as the *third* author.\n+        // At this point the new Publication has three authors in this order: author2, author1, author3\n+        Item author3 = validateSpecificItemRelationCreationCsvImport(col1, article2, \"TestAuthor3\", \"Person\",\n                                                                    \"isPublicationOfAuthor\",\n                                                                    \"Relationship list size is 1\", 1, 2, 0);\n \n-        UpdateItemEToDeleteRelationshipToC(itemE, itemB, itemF, col1, \"TestItemE\");\n+        // Verify the new Publication now has 3 relationships (3 authors)\n+        relationships = relationshipService.findByItem(context, article2);\n+        assertEquals(3,relationships.size());\n \n-        getClient().perform(get(\"/api/core/items/\" + itemE.getID())).andExpect(status().isOk());\n+        // Now, *remove* the first listed author (author2) from this new Publication\n+        updateArticle2ToDeleteRelationshipToAuthor2(article2, author1, author3, col1, \"TestArticle2\");\n \n-        assertItemERelationships(itemB, itemE, itemF);\n+        // Verify new Publication still exists after author removal\n+        getClient().perform(get(\"/api/core/items/\" + article2.getID())).andExpect(status().isOk());\n \n-        updateArticleItemToAddAnotherRelationship(col1, article, itemB, itemC, itemF);\n+        // Check relationships to new Publication. Verify it's only related to author1 and author3\n+        assertArticle2Relationships(article2, author1, author3);\n \n-        getClient().perform(get(\"/api/core/items/\" + article.getID())).andExpect(status().isOk());\n-\n-        assertArticleRelationships(article, itemB, itemC, itemF);\n+        // Update original Article to now be related to all three authors\n+        updateArticleItemToAddAnotherRelationship(col1, article, author1, author2, author3);\n \n+        getClient().perform(get(\"/api/core/items/\" + article.getID())).andExpect(status().isOk());\n \n+        // Verify original article is now related to all three authors\n+        assertArticleRelationships(article, author1, author2, author3);\n     }\n \n-    private void assertItemERelationships(Item itemB, Item itemE, Item itemF) throws SQLException {\n-        List<Relationship> relationshipsForItemE = relationshipService.findByItem(context, itemE);\n-        assertThat(relationshipsForItemE.size(), is(2));\n-        assertThat(relationshipsForItemE.get(0).getRightItem(), is(itemF));\n-        assertThat(relationshipsForItemE.get(1).getRightItem(), is(itemB));\n+    private void assertArticle2Relationships(Item article2, Item author1, Item author3) throws SQLException {\n+        List<Relationship> relationshipsForArticle2 = relationshipService.findByItem(context, article2);\n+        assertEquals(2, relationshipsForArticle2.size());\n+        assertEquals(author3, relationshipsForArticle2.get(0).getRightItem());\n+        assertEquals(author1, relationshipsForArticle2.get(1).getRightItem());\n     }\n \n-    private void assertArticleRelationships(Item article, Item itemB, Item itemC, Item itemF) throws SQLException {\n+    private void assertArticleRelationships(Item article, Item author1, Item author2, Item author3)\n+        throws SQLException {\n         List<Relationship> relationshipsForArticle = relationshipService\n             .findByItemAndRelationshipType(context, article, relationshipTypeService\n                 .findbyTypesAndTypeName(context, entityTypeService.findByEntityType(context, \"Publication\"),\n-                                        entityTypeService.findByEntityType(context, \"Person\"), \"isAuthorOfPublication\",\n-                                        \"isPublicationOfAuthor\"));\n-        assertThat(relationshipsForArticle.size(), is(3));\n+                                        entityTypeService.findByEntityType(context, \"Person\"),\n+                                        \"isAuthorOfPublication\", \"isPublicationOfAuthor\"));\n+        assertEquals(3, relationshipsForArticle.size());\n         List<Item> expectedRelationshipsItemsForArticle = new ArrayList<>();\n-        expectedRelationshipsItemsForArticle.add(itemC);\n-        expectedRelationshipsItemsForArticle.add(itemF);\n-        expectedRelationshipsItemsForArticle.add(itemB);\n+        expectedRelationshipsItemsForArticle.add(author2);\n+        expectedRelationshipsItemsForArticle.add(author3);\n+        expectedRelationshipsItemsForArticle.add(author1);\n \n         List<Item> actualRelationshipsItemsForArticle = new ArrayList<>();\n         for (Relationship relationship : relationshipsForArticle) {\n@@ -168,45 +184,46 @@ private void assertArticleRelationships(Item article, Item itemB, Item itemC, It\n                 actualRelationshipsItemsForArticle.add(relationship.getRightItem());\n             }\n         }\n-        assertThat(true, Matchers.is(actualRelationshipsItemsForArticle\n-                                         .containsAll(expectedRelationshipsItemsForArticle)));\n+        assertTrue(actualRelationshipsItemsForArticle.containsAll(expectedRelationshipsItemsForArticle));\n     }\n \n-    private void updateArticleItemToAddAnotherRelationship(Collection col1, Item article, Item itemB, Item itemC,\n-                                                           Item itemF) throws Exception {\n+    private void updateArticleItemToAddAnotherRelationship(Collection col1, Item article, Item author1, Item author2,\n+                                                           Item author3) throws Exception {\n         String csvLineString = article.getID().toString() + \",\" + col1\n             .getHandle() + \",\" + \"Article\" + \",\" + \"Publication\" + \",\" +\n-            itemB.getID().toString() + \"||\" + itemC.getID().toString() + \"||\" + itemF\n+            author1.getID().toString() + \"||\" + author2.getID().toString() + \"||\" + author3\n             .getID().toString();\n-        String[] csv = {\"id,collection,dc.title,relationship.type,relation.\" + \"isAuthorOfPublication\", csvLineString};\n+        String[] csv = {\"id,collection,dc.title,dspace.entity.type,relation.\" + \"isAuthorOfPublication\", csvLineString};\n         performImportScript(csv);\n     }\n \n-    private void UpdateItemEToDeleteRelationshipToC(Item itemE, Item itemB, Item itemF, Collection owningCollection,\n-                                                    String title) throws Exception {\n-        String csvLineString = itemE.getID().toString() + \",\" + owningCollection\n-            .getHandle() + \",\" + title + \",\" + \"Person\" + \",\" + itemB.getID().toString() + \"||\" + itemF.getID()\n+    private void updateArticle2ToDeleteRelationshipToAuthor2(Item article2, Item author1, Item author3,\n+                                                             Collection owningCollection, String title)\n+        throws Exception {\n+        String csvLineString = article2.getID().toString() + \",\" + owningCollection\n+            .getHandle() + \",\" + title + \",\" + \"Publication\" + \",\" + author1.getID().toString() + \"||\" + author3.getID()\n                                                                                                        .toString();\n-        String[] csv = {\"id,collection,dc.title,relationship.type,relation.\" + \"isAuthorOfPublication\", csvLineString};\n+        String[] csv = {\"id,collection,dc.title,dspace.entity.type,relation.\" + \"isAuthorOfPublication\", csvLineString};\n         performImportScript(csv);\n \n     }\n \n     private Item validateSpecificItemRelationCreationCsvImport(Collection col1, Item relatedItem, String itemTitle,\n-                                                               String relationshipType,\n+                                                               String entityType,\n                                                                String relationshipTypeLabel,\n-                                                               String reasonAssertCheck, Integer sizeToCheck,\n-                                                               Integer leftPlaceToCheck,\n-                                                               Integer rightPlaceToCheck) throws Exception {\n-        String csvLineString = \"+,\" + col1.getHandle() + \",\" + itemTitle + \",\" + relationshipType + \",\" + relatedItem\n+                                                               String reasonAssertCheck, int sizeToCheck,\n+                                                               int leftPlaceToCheck,\n+                                                               int rightPlaceToCheck) throws Exception {\n+        String csvLineString = \"+,\" + col1.getHandle() + \",\" + itemTitle + \",\" + entityType + \",\" + relatedItem\n             .getID().toString();\n-        String[] csv = {\"id,collection,dc.title,relationship.type,relation.\" + relationshipTypeLabel, csvLineString};\n+        String[] csv = {\"id,collection,dc.title,dspace.entity.type,relation.\" + relationshipTypeLabel, csvLineString};\n         performImportScript(csv);\n+\n         Iterator<Item> itemIteratorItem = itemService.findByMetadataField(context, \"dc\", \"title\", null, itemTitle);\n         Item item = itemIteratorItem.next();\n \n         List<Relationship> relationships = relationshipService.findByItem(context, item);\n-        assertThat(reasonAssertCheck, relationships.size(), equalTo(sizeToCheck));\n+        assertEquals(reasonAssertCheck, sizeToCheck, relationships.size());\n         getClient().perform(get(\"/api/core/items/\" + item.getID())).andExpect(status().isOk());\n         getClient().perform(get(\"/api/core/relationships/\" + relationships.get(0).getID()).param(\"projection\", \"full\"))\n                    .andExpect(status().isOk())\n@@ -218,7 +235,7 @@ private Item validateSpecificItemRelationCreationCsvImport(Collection col1, Item\n     }\n \n     private Item validateSpecificItemRelationCreationCsvImportMultiple(Collection col1, String itemTitle,\n-                                                                       String relationshipType,\n+                                                                       String entityType,\n                                                                        String relationshipTypeLabel,\n                                                                        String reasonAssertCheck, Integer sizeToCheck,\n                                                                        Integer leftPlaceToCheck,\n@@ -231,8 +248,8 @@ private Item validateSpecificItemRelationCreationCsvImportMultiple(Collection co\n         }\n         idStringRelatedItems = idStringRelatedItems.substring(0, idStringRelatedItems.length() - 2);\n         String csvLineString = \"+,\" + col1\n-            .getHandle() + \",\" + itemTitle + \",\" + relationshipType + \",\" + idStringRelatedItems;\n-        String[] csv = {\"id,collection,dc.title,relationship.type,relation.\" + relationshipTypeLabel, csvLineString};\n+            .getHandle() + \",\" + itemTitle + \",\" + entityType + \",\" + idStringRelatedItems;\n+        String[] csv = {\"id,collection,dc.title,dspace.entity.type,relation.\" + relationshipTypeLabel, csvLineString};\n         performImportScript(csv);\n         Iterator<Item> itemIteratorItem = itemService.findByMetadataField(context, \"dc\", \"title\", null, itemTitle);\n         Item item = itemIteratorItem.next();\n@@ -294,12 +311,12 @@ public void csvImportWithSpecifiedEPersonParameterTestShouldFailProcess() throws\n         Item article = ItemBuilder.createItem(context, col1)\n                                   .withTitle(\"Article\")\n                                   .withIssueDate(\"2017-10-17\")\n-                                  .withRelationshipType(\"Publication\")\n+                                  .withEntityType(\"Publication\")\n                                   .build();\n \n         String csvLineString = \"+,\" + col1.getHandle() + \",TestItemB,Person,\" + article\n             .getID().toString();\n-        String[] csv = {\"id,collection,dc.title,relationship.type,relation.isPublicationOfAuthor\", csvLineString};\n+        String[] csv = {\"id,collection,dc.title,dspace.entity.type,relation.isPublicationOfAuthor\", csvLineString};\n \n         InputStream inputStream = new ByteArrayInputStream(String.join(System.lineSeparator(),\n                                                                        Arrays.asList(csv))"
  }
]
