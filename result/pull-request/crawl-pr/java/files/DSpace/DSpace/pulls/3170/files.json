[
  {
    "sha": "13e4d83fa0bf422c4de23354ad90050aaf1cf69a",
    "filename": "dspace-api/src/main/java/org/dspace/content/DSpaceObjectServiceImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/DSpace/DSpace/blob/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/main/java/org/dspace/content/DSpaceObjectServiceImpl.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/main/java/org/dspace/content/DSpaceObjectServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/DSpaceObjectServiceImpl.java?ref=3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee",
    "patch": "@@ -305,6 +305,7 @@ public String getMetadata(T dso, String value) {\n //            metadataValueService.update(context, metadataValue);\n             dso.addDetails(metadataField.toString());\n         }\n+        setMetadataModified(dso);\n         return newMetadata;\n     }\n "
  },
  {
    "sha": "c9ebf5559db61c9c26bcb72460c7bcf8a103c3a1",
    "filename": "dspace-api/src/main/java/org/dspace/content/Item.java",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/DSpace/DSpace/blob/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/main/java/org/dspace/content/Item.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/main/java/org/dspace/content/Item.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/Item.java?ref=3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee",
    "patch": "@@ -112,6 +112,16 @@\n     @Transient\n     private transient ItemService itemService;\n \n+    /**\n+     * True if anything else was changed since last metadata retrieval()\n+     * (to drive metadata cache)\n+     */\n+    @Transient\n+    private boolean modifiedMetadataCache = true;\n+\n+    @Transient\n+    private List<MetadataValue> cachedMetadata = new ArrayList<>();\n+\n     /**\n      * Protected constructor, create object using:\n      * {@link org.dspace.content.service.ItemService#create(Context, WorkspaceItem)}\n@@ -373,4 +383,23 @@ public ItemService getItemService() {\n         }\n         return itemService;\n     }\n+\n+    @Override\n+    protected void setMetadataModified() {\n+        super.setMetadataModified();\n+        modifiedMetadataCache = true;\n+    }\n+\n+    public boolean isModifiedMetadataCache() {\n+        return modifiedMetadataCache;\n+    }\n+\n+    protected List<MetadataValue> getCachedMetadata() {\n+        return cachedMetadata;\n+    }\n+\n+    protected void setCachedMetadata(List<MetadataValue> cachedMetadata) {\n+        this.cachedMetadata = cachedMetadata;\n+        modifiedMetadataCache = false;\n+    }\n }"
  },
  {
    "sha": "36f92e4f8e66da74fb7924e26a7a15101bfa5050",
    "filename": "dspace-api/src/main/java/org/dspace/content/ItemServiceImpl.java",
    "status": "modified",
    "additions": 20,
    "deletions": 29,
    "changes": 49,
    "blob_url": "https://github.com/DSpace/DSpace/blob/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/main/java/org/dspace/content/ItemServiceImpl.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/main/java/org/dspace/content/ItemServiceImpl.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/ItemServiceImpl.java?ref=3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee",
    "patch": "@@ -1328,42 +1328,33 @@ public boolean canCreateNewVersion(Context context, Item item) throws SQLExcepti\n     @Override\n     public List<MetadataValue> getMetadata(Item item, String schema, String element, String qualifier, String lang,\n                                            boolean enableVirtualMetadata) {\n-        //Fields of the relation schema are virtual metadata\n-        //except for relation.type which is the type of item in the model\n-        if (StringUtils.equals(schema, MetadataSchemaEnum.RELATION.getName()) && !StringUtils.equals(element, \"type\")) {\n-\n-            List<RelationshipMetadataValue> relationMetadata = relationshipMetadataService\n-                .getRelationshipMetadata(item, enableVirtualMetadata);\n-            List<MetadataValue> listToReturn = new LinkedList<>();\n-            for (MetadataValue metadataValue : relationMetadata) {\n-                if (StringUtils.equals(metadataValue.getMetadataField().getElement(), element)) {\n-                    listToReturn.add(metadataValue);\n-                }\n-            }\n-            listToReturn = sortMetadataValueList(listToReturn);\n-\n-            return listToReturn;\n-\n-        } else {\n-            List<MetadataValue> dbMetadataValues = super.getMetadata(item, schema, element, qualifier, lang);\n+        if (!enableVirtualMetadata) {\n+            log.debug(\"Called getMetadata for \" + item.getID() + \" without enableVirtualMetadata\");\n+            return super.getMetadata(item, schema, element, qualifier, lang);\n+        }\n+        if (item.isModifiedMetadataCache()) {\n+            log.debug(\"Called getMetadata for \" + item.getID() + \" with invalid cache\");\n+            //rebuild cache\n+            List<MetadataValue> dbMetadataValues = item.getMetadata();\n \n             List<MetadataValue> fullMetadataValueList = new LinkedList<>();\n-            if (enableVirtualMetadata) {\n-                fullMetadataValueList.addAll(relationshipMetadataService.getRelationshipMetadata(item, true));\n-\n-            }\n+            fullMetadataValueList.addAll(relationshipMetadataService.getRelationshipMetadata(item, true));\n             fullMetadataValueList.addAll(dbMetadataValues);\n \n-            List<MetadataValue> finalList = new LinkedList<>();\n-            for (MetadataValue metadataValue : fullMetadataValueList) {\n-                if (match(schema, element, qualifier, lang, metadataValue)) {\n-                    finalList.add(metadataValue);\n-                }\n+            item.setCachedMetadata(sortMetadataValueList(fullMetadataValueList));\n+        }\n+\n+        log.debug(\"Called getMetadata for \" + item.getID() + \" based on cache\");\n+        // Build up list of matching values based on the cache\n+        List<MetadataValue> values = new ArrayList<>();\n+        for (MetadataValue dcv : item.getCachedMetadata()) {\n+            if (match(schema, element, qualifier, lang, dcv)) {\n+                values.add(dcv);\n             }\n-            finalList = sortMetadataValueList(finalList);\n-            return finalList;\n         }\n \n+        // Create an array of matching values\n+        return values;\n     }\n \n     /**"
  },
  {
    "sha": "72ffbedff0d564edf44becf9e4bb3424ab486838",
    "filename": "dspace-api/src/main/java/org/dspace/content/Relationship.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/DSpace/DSpace/blob/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/main/java/org/dspace/content/Relationship.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/main/java/org/dspace/content/Relationship.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/main/java/org/dspace/content/Relationship.java?ref=3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee",
    "patch": "@@ -164,6 +164,7 @@ public int getLeftPlace() {\n      */\n     public void setLeftPlace(int leftPlace) {\n         this.leftPlace = leftPlace;\n+        leftItem.setMetadataModified();\n     }\n \n     /**\n@@ -180,6 +181,7 @@ public int getRightPlace() {\n      */\n     public void setRightPlace(int rightPlace) {\n         this.rightPlace = rightPlace;\n+        rightItem.setMetadataModified();\n     }\n \n     /**"
  },
  {
    "sha": "41a7e3c85d71066eb482b5ef33753d0407dac7a0",
    "filename": "dspace-api/src/test/java/org/dspace/content/RelationshipMetadataServiceIT.java",
    "status": "modified",
    "additions": 131,
    "deletions": 12,
    "changes": 143,
    "blob_url": "https://github.com/DSpace/DSpace/blob/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/test/java/org/dspace/content/RelationshipMetadataServiceIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-api/src/test/java/org/dspace/content/RelationshipMetadataServiceIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-api/src/test/java/org/dspace/content/RelationshipMetadataServiceIT.java?ref=3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee",
    "patch": "@@ -14,6 +14,7 @@\n \n import java.sql.SQLException;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.dspace.AbstractIntegrationTestWithDatabase;\n import org.dspace.authorize.AuthorizeException;\n@@ -186,24 +187,54 @@ public void testGetAuthorRelationshipMetadata() {\n     public void testDeleteAuthorRelationshipCopyToLeftItem() throws Exception {\n         initPublicationAuthor();\n         context.turnOffAuthorisationSystem();\n+\n+        //verify the dc.contributor.author virtual metadata\n+        List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n+        assertThat(authorList.size(), equalTo(1));\n+\n+        //verify the dc.contributor.author actual metadata\n+        List<MetadataValue> plainMetadataAuthorList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                        metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainMetadataAuthorList.size(), equalTo(0));\n+\n+        //verify there's no relation.isAuthorOfPublication actual metadata\n+        List<MetadataValue> plainRelationshipMetadataList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getElement().equals(\"isAuthorOfPublication\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainRelationshipMetadataList.size(), equalTo(0));\n+\n         //delete the relationship, copying the virtual metadata to actual metadata on the leftItem\n         //leftItem is the publication\n         relationshipService.delete(context, relationship, true, false);\n         context.restoreAuthSystemState();\n \n         //verify the dc.contributor.author actual metadata\n-        List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n+        plainMetadataAuthorList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                        metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainMetadataAuthorList.size(), equalTo(1));\n+\n+        //verify the dc.contributor.author actual metadata\n+        authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n         assertThat(authorList.size(), equalTo(1));\n         assertThat(authorList.get(0).getValue(), equalTo(\"familyName, firstName\"));\n         assertThat(authorList.get(0).getMetadataField().getMetadataSchema().getName(), equalTo(\"dc\"));\n         assertThat(authorList.get(0).getMetadataField().getElement(), equalTo(\"contributor\"));\n         assertThat(authorList.get(0).getMetadataField().getQualifier(), equalTo(\"author\"));\n         assertNull(authorList.get(0).getAuthority());\n \n-        //verify there's no relation.isAuthorOfPublication actual metadata\n+        //verify there's relation.isAuthorOfPublication actual metadata\n+        plainRelationshipMetadataList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getElement().equals(\"isAuthorOfPublication\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainRelationshipMetadataList.size(), equalTo(1));\n+        //verify there's relation.isAuthorOfPublication actual metadata\n         List<MetadataValue> relationshipMetadataList = itemService\n             .getMetadata(leftItem, MetadataSchemaEnum.RELATION.getName(), \"isAuthorOfPublication\", null, Item.ANY);\n-        assertThat(relationshipMetadataList.size(), equalTo(0));\n+        assertThat(relationshipMetadataList.size(), equalTo(1));\n \n         //request the virtual metadata of the publication only\n         List<RelationshipMetadataValue> list = relationshipMetadataService.getRelationshipMetadata(leftItem, true);\n@@ -233,23 +264,52 @@ public void testAuthorDeleteRelationshipCopyToRightItem() throws Exception {\n     public void testDeleteAuthorRelationshipCopyToBothItems() throws Exception {\n         initPublicationAuthor();\n         context.turnOffAuthorisationSystem();\n+        //verify the dc.contributor.author virtual metadata\n+        List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n+        assertThat(authorList.size(), equalTo(1));\n+\n+        //verify the dc.contributor.author actual metadata\n+        List<MetadataValue> plainMetadataAuthorList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                                         metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainMetadataAuthorList.size(), equalTo(0));\n+\n+        //verify there's no relation.isAuthorOfPublication actual metadata\n+        List<MetadataValue> plainRelationshipMetadataList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getElement().equals(\"isAuthorOfPublication\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainRelationshipMetadataList.size(), equalTo(0));\n+\n         //delete the relationship, copying the virtual metadata to actual metadata on the both items\n         relationshipService.delete(context, relationship, true, true);\n         context.restoreAuthSystemState();\n \n         //verify the dc.contributor.author actual metadata\n-        List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n+        plainMetadataAuthorList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                                         metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainMetadataAuthorList.size(), equalTo(1));\n+\n+        //verify the dc.contributor.author actual metadata\n+        authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n         assertThat(authorList.size(), equalTo(1));\n         assertThat(authorList.get(0).getValue(), equalTo(\"familyName, firstName\"));\n         assertThat(authorList.get(0).getMetadataField().getMetadataSchema().getName(), equalTo(\"dc\"));\n         assertThat(authorList.get(0).getMetadataField().getElement(), equalTo(\"contributor\"));\n         assertThat(authorList.get(0).getMetadataField().getQualifier(), equalTo(\"author\"));\n         assertNull(authorList.get(0).getAuthority());\n \n-        //verify there's no relation.isAuthorOfPublication actual metadata\n+        //verify there's relation.isAuthorOfPublication actual metadata\n+        plainRelationshipMetadataList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getElement().equals(\"isAuthorOfPublication\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainRelationshipMetadataList.size(), equalTo(1));\n+        //verify there's relation.isAuthorOfPublication actual metadata\n         List<MetadataValue> relationshipMetadataList = itemService\n             .getMetadata(leftItem, MetadataSchemaEnum.RELATION.getName(), \"isAuthorOfPublication\", null, Item.ANY);\n-        assertThat(relationshipMetadataList.size(), equalTo(0));\n+        assertThat(relationshipMetadataList.size(), equalTo(1));\n     }\n \n     @Test\n@@ -369,24 +429,54 @@ public void testDeleteJournalRelationshipCopyToBothItems() throws SQLException,\n     public void testDeleteAuthorRelationshipCopyToLeftItemFromDefaultInDb() throws Exception {\n         initPublicationAuthorWithCopyParams(true, false);\n         context.turnOffAuthorisationSystem();\n+\n+        //verify the dc.contributor.author virtual metadata\n+        List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n+        assertThat(authorList.size(), equalTo(1));\n+\n+        //verify the dc.contributor.author actual metadata\n+        List<MetadataValue> plainMetadataAuthorList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                        metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainMetadataAuthorList.size(), equalTo(0));\n+\n+        //verify there's no relation.isAuthorOfPublication actual metadata\n+        List<MetadataValue> plainRelationshipMetadataList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getElement().equals(\"isAuthorOfPublication\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainRelationshipMetadataList.size(), equalTo(0));\n+\n         //delete the relationship, copying the virtual metadata to actual metadata on the leftItem\n         //leftItem is the publication\n         relationshipService.delete(context, relationship);\n         context.restoreAuthSystemState();\n \n         //verify the dc.contributor.author actual metadata\n-        List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n+        plainMetadataAuthorList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                        metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainMetadataAuthorList.size(), equalTo(1));\n+\n+        //verify the dc.contributor.author actual metadata\n+        authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n         assertThat(authorList.size(), equalTo(1));\n         assertThat(authorList.get(0).getValue(), equalTo(\"familyName, firstName\"));\n         assertThat(authorList.get(0).getMetadataField().getMetadataSchema().getName(), equalTo(\"dc\"));\n         assertThat(authorList.get(0).getMetadataField().getElement(), equalTo(\"contributor\"));\n         assertThat(authorList.get(0).getMetadataField().getQualifier(), equalTo(\"author\"));\n         assertNull(authorList.get(0).getAuthority());\n \n-        //verify there's no relation.isAuthorOfPublication actual metadata\n+        //verify there's relation.isAuthorOfPublication actual metadata\n+        plainRelationshipMetadataList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getElement().equals(\"isAuthorOfPublication\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainRelationshipMetadataList.size(), equalTo(1));\n+        //verify there's relation.isAuthorOfPublication actual metadata\n         List<MetadataValue> relationshipMetadataList = itemService\n             .getMetadata(leftItem, MetadataSchemaEnum.RELATION.getName(), \"isAuthorOfPublication\", null, Item.ANY);\n-        assertThat(relationshipMetadataList.size(), equalTo(0));\n+        assertThat(relationshipMetadataList.size(), equalTo(1));\n \n         //request the virtual metadata of the publication only\n         List<RelationshipMetadataValue> list = relationshipMetadataService.getRelationshipMetadata(leftItem, true);\n@@ -416,23 +506,52 @@ public void testAuthorDeleteRelationshipCopyToRightItemFromDefaultInDb() throws\n     public void testDeleteAuthorRelationshipCopyToBothItemsFromDefaultsInDb() throws Exception {\n         initPublicationAuthorWithCopyParams(true, true);\n         context.turnOffAuthorisationSystem();\n+        //verify the dc.contributor.author virtual metadata\n+        List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n+        assertThat(authorList.size(), equalTo(1));\n+\n+        //verify the dc.contributor.author actual metadata\n+        List<MetadataValue> plainMetadataAuthorList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                        metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainMetadataAuthorList.size(), equalTo(0));\n+\n+        //verify there's no relation.isAuthorOfPublication actual metadata\n+        List<MetadataValue> plainRelationshipMetadataList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getElement().equals(\"isAuthorOfPublication\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainRelationshipMetadataList.size(), equalTo(0));\n+\n         //delete the relationship, copying the virtual metadata to actual metadata on the both items\n         relationshipService.delete(context, relationship);\n         context.restoreAuthSystemState();\n \n         //verify the dc.contributor.author actual metadata\n-        List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n+        plainMetadataAuthorList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                        metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainMetadataAuthorList.size(), equalTo(1));\n+\n+        //verify the dc.contributor.author actual metadata\n+        authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n         assertThat(authorList.size(), equalTo(1));\n         assertThat(authorList.get(0).getValue(), equalTo(\"familyName, firstName\"));\n         assertThat(authorList.get(0).getMetadataField().getMetadataSchema().getName(), equalTo(\"dc\"));\n         assertThat(authorList.get(0).getMetadataField().getElement(), equalTo(\"contributor\"));\n         assertThat(authorList.get(0).getMetadataField().getQualifier(), equalTo(\"author\"));\n         assertNull(authorList.get(0).getAuthority());\n \n-        //verify there's no relation.isAuthorOfPublication actual metadata\n+        //verify there's relation.isAuthorOfPublication actual metadata\n+        plainRelationshipMetadataList = leftItem.getMetadata().stream()\n+                .filter(metadataValue -> metadataValue.getMetadataField().getElement().equals(\"isAuthorOfPublication\"))\n+                .collect(Collectors.toList());\n+        assertThat(plainRelationshipMetadataList.size(), equalTo(1));\n+        //verify there's relation.isAuthorOfPublication actual metadata\n         List<MetadataValue> relationshipMetadataList = itemService\n             .getMetadata(leftItem, MetadataSchemaEnum.RELATION.getName(), \"isAuthorOfPublication\", null, Item.ANY);\n-        assertThat(relationshipMetadataList.size(), equalTo(0));\n+        assertThat(relationshipMetadataList.size(), equalTo(1));\n     }\n \n     @Test"
  },
  {
    "sha": "8d97dcc502c0f9622ac0d11bd8fe7351142f974b",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipDeleteRestRepositoryIT.java",
    "status": "modified",
    "additions": 382,
    "deletions": 15,
    "changes": 397,
    "blob_url": "https://github.com/DSpace/DSpace/blob/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipDeleteRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipDeleteRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipDeleteRestRepositoryIT.java?ref=3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee",
    "patch": "@@ -7,8 +7,12 @@\n  */\n package org.dspace.app.rest;\n \n+import static java.util.Arrays.asList;\n+import static java.util.stream.Collectors.toList;\n+import static org.dspace.content.Item.ANY;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertThat;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n@@ -221,6 +225,35 @@ private void initPersonProjectPublication() throws Exception {\n     public void testDeleteAuthorRelationshipCopyToLeftItem() throws Exception {\n         initPublicationAuthor();\n \n+        // Verify the dc.contributor.author virtual metadata of the left item\n+        assertEquals(\n+                1,\n+                itemService\n+                        .getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY)\n+                        .size()\n+        );\n+\n+        // Verify there's no dc.contributor.author actual metadata on the left item\n+        assertEquals(\n+                0,\n+                leftItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's no relation.isAuthorOfPublication actual metadata on the left item\n+        assertEquals(\n+                0,\n+                leftItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n         getClient(adminAuthToken).perform(\n             delete(\"/api/core/relationships/\" + relationship.getID() + \"?copyVirtualMetadata=left\"))\n             .andExpect(status().isNoContent());\n@@ -235,12 +268,35 @@ public void testDeleteAuthorRelationshipCopyToLeftItem() throws Exception {\n         assertThat(authorList.get(0).getMetadataField().getQualifier(), equalTo(\"author\"));\n         assertNull(authorList.get(0).getAuthority());\n \n-\n-        // Check that the relation metadata values are gone because the relationship is gone\n         List<MetadataValue> relationshipMetadataList = itemService\n             .getMetadata(leftItem, \"relation\", \"isAuthorOfPublication\", null, Item.ANY);\n-        assertThat(relationshipMetadataList.size(), equalTo(0));\n-\n+        assertThat(relationshipMetadataList.size(), equalTo(1));\n+\n+        // Verify there's dc.contributor.author actual metadata on the left item\n+        assertEquals(\n+                1,\n+                leftItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> metadataValue.getMetadataField().getQualifier() != null &&\n+                                metadataValue.getMetadataField().getQualifier().equals(\"author\"))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's relation.isAuthorOfPublication actual metadata on the left item\n+        assertEquals(\n+                1,\n+                leftItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Check right item to ensure that no metadata is copied\n+\n+        rightItem = context.reloadEntity(rightItem);\n         relationshipMetadataList = itemService\n             .getMetadata(rightItem, \"relation\", \"isPublicationOfAuthor\", null, Item.ANY);\n         assertThat(relationshipMetadataList.size(), equalTo(0));\n@@ -250,6 +306,27 @@ public void testDeleteAuthorRelationshipCopyToLeftItem() throws Exception {\n     public void testAuthorDeleteRelationshipCopyToRightItem() throws Exception {\n         initPublicationAuthor();\n \n+        // Verify there's no dc.contributor.author actual metadata on the right item\n+        assertEquals(\n+                0,\n+                rightItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's no relation.isPublicationOfAuthor actual metadata on the right item\n+        assertEquals(\n+                0,\n+                rightItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"isPublicationOfAuthor\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n         getClient(adminAuthToken).perform(\n             delete(\"/api/core/relationships/\" + relationship.getID() + \"?copyVirtualMetadata=right\"))\n             .andExpect(status().isNoContent());\n@@ -259,14 +336,27 @@ public void testAuthorDeleteRelationshipCopyToRightItem() throws Exception {\n         List<MetadataValue> authorList = itemService.getMetadata(leftItem, \"dc\", \"contributor\", \"author\", Item.ANY);\n         assertThat(authorList.size(), equalTo(0));\n \n-        // Check that the relation metadata values are gone because the relationship is gone\n         List<MetadataValue> relationshipMetadataList = itemService\n             .getMetadata(leftItem, \"relation\", \"isAuthorOfPublication\", null, Item.ANY);\n         assertThat(relationshipMetadataList.size(), equalTo(0));\n \n+        // Check right item to ensure that the metadata is copied\n+\n+        rightItem = itemService.find(context, rightItem.getID());\n         relationshipMetadataList = itemService\n             .getMetadata(rightItem, \"relation\", \"isPublicationOfAuthor\", null, Item.ANY);\n-        assertThat(relationshipMetadataList.size(), equalTo(0));\n+        assertThat(relationshipMetadataList.size(), equalTo(1));\n+\n+        // Verify there's relation.isPublicationOfAuthor actual metadata on the right item\n+        assertEquals(\n+                1,\n+                rightItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"isPublicationOfAuthor\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n \n         // There is no additional Metadata to check on the rightItem because the configuration of the virtual\n         // metadata holds no config to display virtual metadata on the author of the publication\n@@ -291,11 +381,44 @@ public void testDeleteAuthorRelationshipCopyToBothItems() throws Exception {\n \n         List<MetadataValue> relationshipMetadataList = itemService\n             .getMetadata(leftItem, \"relation\", \"isAuthorOfPublication\", null, Item.ANY);\n-        assertThat(relationshipMetadataList.size(), equalTo(0));\n+        assertThat(relationshipMetadataList.size(), equalTo(1));\n+\n+        // Verify there's dc.contributor.author actual metadata on the left item\n+        assertEquals(\n+                1,\n+                leftItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's relation.isAuthorOfPublication actual metadata on the left item\n+        assertEquals(\n+                1,\n+                leftItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n \n+        rightItem = itemService.find(context, rightItem.getID());\n         relationshipMetadataList = itemService\n             .getMetadata(rightItem, \"relation\", \"isPublicationOfAuthor\", null, Item.ANY);\n-        assertThat(relationshipMetadataList.size(), equalTo(0));\n+        assertThat(relationshipMetadataList.size(), equalTo(1));\n+\n+        // Verify there's relation.isPublicationOfAuthor actual metadata on the right item\n+        assertEquals(\n+                1,\n+                rightItem.getMetadata()\n+                        .stream()\n+                        .filter(metadataValue -> \"isPublicationOfAuthor\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n \n         // There is no additional Metadata to check on the rightItem because the configuration of the virtual\n         // metadata holds no config to display virtual metadata on the author of the publication\n@@ -375,6 +498,32 @@ public void testDeleteJournalRelationshipCopyToBothItems() throws Exception {\n     public void deleteItemCopyVirtualMetadataAll() throws Exception {\n         initPersonProjectPublication();\n \n+        for (Item item : asList(publicationItem, projectItem)) {\n+\n+            // Verify the dc.contributor.author virtual metadata\n+            assertEquals(\n+                    1,\n+                    itemService.getMetadata(item, \"dc\", \"contributor\", \"author\", ANY).size()\n+            );\n+\n+            // Verify there's no dc.contributor.author actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                            .collect(toList()).size()\n+            );\n+\n+            // Verify there's no relation.isAuthorOfPublication actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                    .equals(metadataValue.getMetadataField().getElement()))\n+                            .collect(toList()).size()\n+            );\n+        }\n+\n         getClient(adminAuthToken).perform(\n             delete(\"/api/core/items/\" + personItem.getID() + \"?copyVirtualMetadata=all\"))\n             .andExpect(status().isNoContent());\n@@ -387,7 +536,26 @@ public void deleteItemCopyVirtualMetadataAll() throws Exception {\n         assertNull(publicationAuthorList.get(0).getAuthority());\n         List<MetadataValue> publicationRelationships = itemService.getMetadata(publicationItem,\n             \"relation\", \"isAuthorOfPublication\", Item.ANY, Item.ANY);\n-        assertThat(publicationRelationships.size(), equalTo(0));\n+        assertThat(publicationRelationships.size(), equalTo(1));\n+\n+        // Verify there's dc.contributor.author actual metadata on the publication item\n+        assertEquals(\n+                1,\n+                publicationItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's relation.isAuthorOfPublication actual metadata on the publication item\n+        assertEquals(\n+                1,\n+                publicationItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n \n         projectItem = itemService.find(context, projectItem.getID());\n         List<MetadataValue> projectAuthorList = itemService.getMetadata(projectItem,\n@@ -397,13 +565,58 @@ public void deleteItemCopyVirtualMetadataAll() throws Exception {\n         assertNull(projectAuthorList.get(0).getAuthority());\n         List<MetadataValue> projectRelationships = itemService.getMetadata(projectItem,\n             \"relation\", \"isPersonOfProject\", Item.ANY, Item.ANY);\n-        assertThat(projectRelationships.size(), equalTo(0));\n+        assertThat(projectRelationships.size(), equalTo(1));\n+\n+        // Verify there's dc.contributor.author actual metadata on the project item\n+        assertEquals(\n+                1,\n+                projectItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's relation.isPersonOfProject actual metadata on the project item\n+        assertEquals(\n+                1,\n+                projectItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"isPersonOfProject\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n     }\n \n     @Test\n     public void deleteItemCopyVirtualMetadataOneType() throws Exception {\n         initPersonProjectPublication();\n \n+        for (Item item : asList(publicationItem, projectItem)) {\n+\n+            // Verify the dc.contributor.author virtual metadata\n+            assertEquals(\n+                    1,\n+                    itemService.getMetadata(item, \"dc\", \"contributor\", \"author\", ANY).size()\n+            );\n+\n+            // Verify there's no dc.contributor.author actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                            .collect(toList()).size()\n+            );\n+\n+            // Verify there's no relation.isAuthorOfPublication actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                    .equals(metadataValue.getMetadataField().getElement()))\n+                            .collect(toList()).size()\n+            );\n+        }\n+\n         getClient(adminAuthToken).perform(\n             delete(\"/api/core/items/\" + personItem.getID() + \"?copyVirtualMetadata=\"\n                 + publicationPersonRelationshipType.getID()))\n@@ -417,7 +630,26 @@ public void deleteItemCopyVirtualMetadataOneType() throws Exception {\n         assertNull(publicationAuthorList.get(0).getAuthority());\n         List<MetadataValue> publicationRelationships = itemService.getMetadata(publicationItem,\n             \"relation\", \"isAuthorOfPublication\", Item.ANY, Item.ANY);\n-        assertThat(publicationRelationships.size(), equalTo(0));\n+        assertThat(publicationRelationships.size(), equalTo(1));\n+\n+        // Verify there's dc.contributor.author actual metadata on the publication item\n+        assertEquals(\n+                1,\n+                publicationItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's relation.isAuthorOfPublication actual metadata on the publication item\n+        assertEquals(\n+                1,\n+                publicationItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n \n         projectItem = itemService.find(context, projectItem.getID());\n         List<MetadataValue> projectAuthorList = itemService.getMetadata(projectItem,\n@@ -432,6 +664,32 @@ public void deleteItemCopyVirtualMetadataOneType() throws Exception {\n     public void deleteItemCopyVirtualMetadataTwoTypes() throws Exception {\n         initPersonProjectPublication();\n \n+        for (Item item : asList(publicationItem, projectItem)) {\n+\n+            // Verify the dc.contributor.author virtual metadata\n+            assertEquals(\n+                    1,\n+                    itemService.getMetadata(item, \"dc\", \"contributor\", \"author\", ANY).size()\n+            );\n+\n+            // Verify there's no dc.contributor.author actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                            .collect(toList()).size()\n+            );\n+\n+            // Verify there's no relation.isAuthorOfPublication actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                    .equals(metadataValue.getMetadataField().getElement()))\n+                            .collect(toList()).size()\n+            );\n+        }\n+\n         getClient(adminAuthToken).perform(\n             delete(\"/api/core/items/\" + personItem.getID()\n                 + \"?copyVirtualMetadata=\" + publicationPersonRelationshipType.getID()\n@@ -446,7 +704,26 @@ public void deleteItemCopyVirtualMetadataTwoTypes() throws Exception {\n         assertNull(publicationAuthorList.get(0).getAuthority());\n         List<MetadataValue> publicationRelationships = itemService.getMetadata(publicationItem,\n             \"relation\", \"isAuthorOfPublication\", Item.ANY, Item.ANY);\n-        assertThat(publicationRelationships.size(), equalTo(0));\n+        assertThat(publicationRelationships.size(), equalTo(1));\n+\n+        // Verify there's dc.contributor.author actual metadata on the publication item\n+        assertEquals(\n+                1,\n+                publicationItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's relation.isAuthorOfPublication actual metadata on the publication item\n+        assertEquals(\n+                1,\n+                publicationItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n \n         projectItem = itemService.find(context, projectItem.getID());\n         List<MetadataValue> projectAuthorList = itemService.getMetadata(projectItem,\n@@ -456,7 +733,26 @@ public void deleteItemCopyVirtualMetadataTwoTypes() throws Exception {\n         assertNull(projectAuthorList.get(0).getAuthority());\n         List<MetadataValue> projectRelationships = itemService.getMetadata(projectItem,\n             \"relation\", \"isPersonOfProject\", Item.ANY, Item.ANY);\n-        assertThat(projectRelationships.size(), equalTo(0));\n+        assertThat(projectRelationships.size(), equalTo(1));\n+\n+        // Verify there's dc.contributor.author actual metadata on the project item\n+        assertEquals(\n+                1,\n+                projectItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's relation.isPersonOfProject actual metadata on the project item\n+        assertEquals(\n+                1,\n+                projectItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"isPersonOfProject\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n     }\n \n     @Test\n@@ -520,6 +816,32 @@ public void deleteItemCopyVirtualMetadataInvalid() throws Exception {\n     public void deleteItemCopyVirtualMetadataAllNoPermissions() throws Exception {\n         initPersonProjectPublication();\n \n+        for (Item item : asList(publicationItem, projectItem)) {\n+\n+            // Verify the dc.contributor.author virtual metadata\n+            assertEquals(\n+                    1,\n+                    itemService.getMetadata(item, \"dc\", \"contributor\", \"author\", ANY).size()\n+            );\n+\n+            // Verify there's no dc.contributor.author actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                            .collect(toList()).size()\n+            );\n+\n+            // Verify there's no relation.isAuthorOfPublication actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                    .equals(metadataValue.getMetadataField().getElement()))\n+                            .collect(toList()).size()\n+            );\n+        }\n+\n         getClient(getAuthToken(eperson.getEmail(), password)).perform(\n             delete(\"/api/core/items/\" + personItem.getID()))\n             .andExpect(status().isForbidden());\n@@ -608,6 +930,32 @@ public void deleteItemCopyVirtualMetadataTypeInsufficientPermissions() throws Ex\n     public void deleteItemCopyVirtualMetadataConfigured() throws Exception {\n         initPersonProjectPublication();\n \n+        for (Item item : asList(publicationItem, projectItem)) {\n+\n+            // Verify the dc.contributor.author virtual metadata\n+            assertEquals(\n+                    1,\n+                    itemService.getMetadata(item, \"dc\", \"contributor\", \"author\", ANY).size()\n+            );\n+\n+            // Verify there's no dc.contributor.author actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                            .collect(toList()).size()\n+            );\n+\n+            // Verify there's no relation.isAuthorOfPublication actual metadata on the item\n+            assertEquals(\n+                    0,\n+                    item.getMetadata().stream()\n+                            .filter(metadataValue -> \"isAuthorOfPublication\"\n+                                    .equals(metadataValue.getMetadataField().getElement()))\n+                            .collect(toList()).size()\n+            );\n+        }\n+\n         getClient(adminAuthToken).perform(\n             delete(\"/api/core/items/\" + personItem.getID() + \"?copyVirtualMetadata=configured\"))\n                                  .andExpect(status().isNoContent());\n@@ -629,7 +977,26 @@ public void deleteItemCopyVirtualMetadataConfigured() throws Exception {\n         assertNull(projectAuthorList.get(0).getAuthority());\n         List<MetadataValue> projectRelationships = itemService.getMetadata(projectItem,\n             \"relation\", \"isPersonOfProject\", Item.ANY, Item.ANY);\n-        assertThat(projectRelationships.size(), equalTo(0));\n+        assertThat(projectRelationships.size(), equalTo(1));\n+\n+        // Verify there's dc.contributor.author actual metadata on the project item\n+        assertEquals(\n+                1,\n+                projectItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"author\".equals(metadataValue.getMetadataField().getQualifier()))\n+                        .collect(toList())\n+                        .size()\n+        );\n+\n+        // Verify there's relation.isPersonOfProject actual metadata on the project item\n+        assertEquals(\n+                1,\n+                projectItem.getMetadata().stream()\n+                        .filter(metadataValue -> \"isPersonOfProject\"\n+                                .equals(metadataValue.getMetadataField().getElement()))\n+                        .collect(toList())\n+                        .size()\n+        );\n     }\n \n     @Test\n@@ -653,7 +1020,7 @@ public void deleteItemCopyVirtualMetadataToCorrectPlace() throws Exception {\n         assertNull(publicationAuthorList.get(0).getAuthority());\n         List<MetadataValue> publicationRelationships = itemService.getMetadata(publicationItem,\n                                                 \"relation\", \"isAuthorOfPublication\", Item.ANY, Item.ANY);\n-        assertThat(publicationRelationships.size(), equalTo(0));\n+        assertThat(publicationRelationships.size(), equalTo(1));\n \n         projectItem = itemService.find(context, projectItem.getID());\n         List<MetadataValue> projectAuthorList = itemService.getMetadata(projectItem,"
  },
  {
    "sha": "313bd0afc88a443587727ef8eaa67ea8c65c3063",
    "filename": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/DSpace/DSpace/blob/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java",
    "raw_url": "https://github.com/DSpace/DSpace/raw/3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java",
    "contents_url": "https://api.github.com/repos/DSpace/DSpace/contents/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java?ref=3fe194ae0948f73e2df65d35ec0ad56efcbfd9ee",
    "patch": "@@ -775,6 +775,7 @@ public void addRelationshipsAndMetadataToValidatePlaceTest() throws Exception {\n                                          .andExpect(status().isCreated())\n                    .andDo(result -> idRef2.set(read(result.getResponse().getContentAsString(), \"$.id\")));\n \n+        publication1 = itemService.find(context, publication1.getID());\n         list = itemService.getMetadata(publication1, \"dc\", \"contributor\", \"author\", Item.ANY);\n         // Ensure that we now have three dc.contributor.author mdv (\"Smith, Donald\", \"plain text\", \"Smith, Maria\"\n         // In that order which will be checked below the rest call\n@@ -801,6 +802,7 @@ public void addRelationshipsAndMetadataToValidatePlaceTest() throws Exception {\n         itemService.update(context, publication1);\n \n         context.restoreAuthSystemState();\n+        publication1 = itemService.find(context, publication1.getID());\n         list = itemService.getMetadata(publication1, \"dc\", \"contributor\", \"author\", Item.ANY);\n \n         // Assert that the list of dc.contributor.author mdv is now of size 4 in the following order:\n@@ -838,6 +840,7 @@ public void addRelationshipsAndMetadataToValidatePlaceTest() throws Exception {\n                                          .andExpect(status().isCreated())\n                    .andDo(result -> idRef3.set(read(result.getResponse().getContentAsString(), \"$.id\")));\n \n+        publication1 = itemService.find(context, publication1.getID());\n         list = itemService.getMetadata(publication1, \"dc\", \"contributor\", \"author\", Item.ANY);\n         // Assert that our dc.contributor.author mdv list is now of size 5\n         assertEquals(5, list.size());\n@@ -901,6 +904,7 @@ public void addRelationshipsAndMetadataToValidatePlaceTest() throws Exception {\n         itemService.update(context, publication1);\n \n         context.restoreAuthSystemState();\n+        publication1 = itemService.find(context, publication1.getID());\n         list = itemService.getMetadata(publication1, \"dc\", \"contributor\", \"author\", Item.ANY);\n \n         assertEquals(10, list.size());"
  }
]
