[
  {
    "sha": "0f5d2a08a39fcb66f2cb443846e4791fdafba791",
    "filename": "docs/design/hub-and-spoke/switch-sync/switch-sync-fsm.dot",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/docs/design/hub-and-spoke/switch-sync/switch-sync-fsm.dot",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/docs/design/hub-and-spoke/switch-sync/switch-sync-fsm.dot",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/docs/design/hub-and-spoke/switch-sync/switch-sync-fsm.dot?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb",
    "patch": "@@ -3,6 +3,7 @@ compound=true;\n subgraph cluster_StateMachine {\n label=\"org.openkilda.wfm.topology.switchmanager.fsm.SwitchSyncFsm\";\n COMPUTE_INSTALL_RULES [label=\"COMPUTE_INSTALL_RULES\"];\n+COMPUTE_REINSTALL_RULES [label=\"COMPUTE_REINSTALL_RULES\"];\n RULES_COMMANDS_SEND [label=\"RULES_COMMANDS_SEND\"];\n COMPUTE_REMOVE_METERS [label=\"COMPUTE_REMOVE_METERS\"];\n COMPUTE_REMOVE_RULES [label=\"COMPUTE_REMOVE_RULES\"];\n@@ -12,7 +13,9 @@ INITIALIZED [label=\"INITIALIZED\"];\n FINISHED_WITH_ERROR [label=\"FINISHED_WITH_ERROR\"];\n \n COMPUTE_INSTALL_RULES -> FINISHED_WITH_ERROR [ label=\"ERROR\"];\n-COMPUTE_INSTALL_RULES -> COMPUTE_REMOVE_RULES [ label=\"NEXT\"];\n+COMPUTE_INSTALL_RULES -> COMPUTE_REINSTALL_RULES [ label=\"NEXT\"];\n+COMPUTE_REINSTALL_RULES -> FINISHED_WITH_ERROR [ label=\"ERROR\"];\n+COMPUTE_REINSTALL_RULES -> COMPUTE_REMOVE_RULES [ label=\"NEXT\"];\n RULES_COMMANDS_SEND -> RULES_COMMANDS_SEND [ label=\"RULES_INSTALLED\"];\n RULES_COMMANDS_SEND -> RULES_COMMANDS_SEND [ label=\"RULES_REMOVED\"];\n RULES_COMMANDS_SEND -> FINISHED_WITH_ERROR [ label=\"TIMEOUT\"];"
  },
  {
    "sha": "6fce631541c241680485f071c620b817e490ec16",
    "filename": "docs/design/hub-and-spoke/switch-sync/switch-sync-fsm.png",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/docs/design/hub-and-spoke/switch-sync/switch-sync-fsm.png",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/docs/design/hub-and-spoke/switch-sync/switch-sync-fsm.png",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/docs/design/hub-and-spoke/switch-sync/switch-sync-fsm.png?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb"
  },
  {
    "sha": "ad6b989cf7fc946c7a55a9003dc5de16f95449fb",
    "filename": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/ReinstallDefaultFlowForSwitchManagerRequest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/ReinstallDefaultFlowForSwitchManagerRequest.java",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/ReinstallDefaultFlowForSwitchManagerRequest.java",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/ReinstallDefaultFlowForSwitchManagerRequest.java?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb",
    "patch": "@@ -20,10 +20,10 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Builder;\n+import lombok.Data;\n import lombok.EqualsAndHashCode;\n-import lombok.Value;\n \n-@Value\n+@Data\n @Builder\n @EqualsAndHashCode(callSuper = false)\n public class ReinstallDefaultFlowForSwitchManagerRequest extends CommandData {"
  },
  {
    "sha": "49f3147a62a2e745fab21d1d0fb8eb8618898606",
    "filename": "src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/ReinstallServer42FlowForSwitchManagerRequest.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/ReinstallServer42FlowForSwitchManagerRequest.java",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/ReinstallServer42FlowForSwitchManagerRequest.java",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/src-java/floodlight-service/floodlight-api/src/main/java/org/openkilda/messaging/command/flow/ReinstallServer42FlowForSwitchManagerRequest.java?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb",
    "patch": "@@ -0,0 +1,49 @@\n+/* Copyright 2021 Telstra Open Source\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.openkilda.messaging.command.flow;\n+\n+import org.openkilda.model.MacAddress;\n+import org.openkilda.model.SwitchId;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+@Value\n+@EqualsAndHashCode(callSuper = true)\n+public class ReinstallServer42FlowForSwitchManagerRequest extends ReinstallDefaultFlowForSwitchManagerRequest {\n+\n+    @JsonProperty(\"server42_mac_address\")\n+    protected MacAddress server42MacAddress;\n+\n+    @JsonProperty(\"server42_vlan\")\n+    protected int server42Vlan;\n+\n+    @JsonProperty(\"server42_port\")\n+    protected int server42Port;\n+\n+    public ReinstallServer42FlowForSwitchManagerRequest(\n+            @JsonProperty(\"switch_id\") SwitchId switchId,\n+            @JsonProperty(\"cookie\") long cookie,\n+            @JsonProperty(\"server42_mac_address\") MacAddress server42MacAddress,\n+            @JsonProperty(\"server42_vlan\") int server42Vlan,\n+            @JsonProperty(\"server42_port\") int server42Port) {\n+        super(switchId, cookie);\n+        this.server42MacAddress = server42MacAddress;\n+        this.server42Vlan = server42Vlan;\n+        this.server42Port = server42Port;\n+    }\n+}"
  },
  {
    "sha": "dd3ad66cc804e090e35217f45e41bfbab18aa5af",
    "filename": "src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java",
    "status": "modified",
    "additions": 35,
    "deletions": 10,
    "changes": 45,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/src-java/floodlight-service/floodlight-modules/src/main/java/org/openkilda/floodlight/kafka/RecordHandler.java?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb",
    "patch": "@@ -106,6 +106,7 @@\n import org.openkilda.messaging.command.flow.InstallTransitLoopFlow;\n import org.openkilda.messaging.command.flow.MeterModifyCommandRequest;\n import org.openkilda.messaging.command.flow.ReinstallDefaultFlowForSwitchManagerRequest;\n+import org.openkilda.messaging.command.flow.ReinstallServer42FlowForSwitchManagerRequest;\n import org.openkilda.messaging.command.flow.RemoveFlow;\n import org.openkilda.messaging.command.flow.RemoveFlowForSwitchManagerRequest;\n import org.openkilda.messaging.command.switches.ConnectModeRequest;\n@@ -455,7 +456,16 @@ private void doReinstallDefaultFlowForSwitchManager(CommandMessage message) {\n             Set<Long> removedFlows = new HashSet<>(processDeleteFlow(command, dpid));\n \n             for (Long removedFlow : removedFlows) {\n-                Long installedFlow = processInstallDefaultFlowByCookie(switchId, removedFlow);\n+                Long installedFlow;\n+\n+                if (request instanceof ReinstallServer42FlowForSwitchManagerRequest) {\n+                    ReinstallServer42FlowForSwitchManagerRequest server42Request =\n+                            (ReinstallServer42FlowForSwitchManagerRequest) request;\n+                    installedFlow = processInstallServer42Rule(switchId, cookie, server42Request.getServer42Port(),\n+                            server42Request.getServer42Vlan(), server42Request.getServer42MacAddress());\n+                } else {\n+                    installedFlow = processInstallDefaultFlowByCookie(switchId, removedFlow);\n+                }\n \n                 InfoMessage response = new InfoMessage(new FlowReinstallResponse(removedFlow, installedFlow),\n                         System.currentTimeMillis(), message.getCorrelationId());\n@@ -475,24 +485,39 @@ private void doReinstallDefaultFlowForSwitchManager(CommandMessage message) {\n     }\n \n     private void processInstallServer42Rule(InstallServer42Flow command) throws SwitchOperationException {\n-        ISwitchManager switchManager = context.getSwitchManager();\n-        DatapathId dpid = DatapathId.of(command.getSwitchId().toLong());\n         long cookie = command.getCookie();\n+        int server42Port;\n+\n+        if (cookie == SERVER_42_OUTPUT_VLAN_COOKIE || cookie == SERVER_42_OUTPUT_VXLAN_COOKIE) {\n+            server42Port = command.getOutputPort();\n+        } else if (new Cookie(cookie).getType() == CookieType.SERVER_42_INPUT) {\n+            server42Port = command.getInputPort();\n+        } else {\n+            logger.warn(\"Skipping the installation of unexpected server 42 switch rule {} for switch {}\",\n+                    Long.toHexString(cookie), command.getSwitchId());\n+            return;\n+        }\n+        processInstallServer42Rule(command.getSwitchId(), command.getCookie(), server42Port,\n+                command.getServer42Vlan(), command.getServer42MacAddress());\n+    }\n+\n+    private Long processInstallServer42Rule(SwitchId switchId, long cookie, int server42Port, int server42Vlan,\n+                                            MacAddress server42MacAddress) throws SwitchOperationException {\n+        ISwitchManager switchManager = context.getSwitchManager();\n+        DatapathId dpid = DatapathId.of(switchId.toLong());\n \n         if (cookie == SERVER_42_OUTPUT_VLAN_COOKIE) {\n-            switchManager.installServer42OutputVlanFlow(\n-                    dpid, command.getOutputPort(), command.getServer42Vlan(), command.getServer42MacAddress());\n+            return switchManager.installServer42OutputVlanFlow(dpid, server42Port, server42Vlan, server42MacAddress);\n         } else if (cookie == SERVER_42_OUTPUT_VXLAN_COOKIE) {\n-            switchManager.installServer42OutputVxlanFlow(\n-                    dpid, command.getOutputPort(), command.getServer42Vlan(), command.getServer42MacAddress());\n+            return switchManager.installServer42OutputVxlanFlow(dpid, server42Port, server42Vlan, server42MacAddress);\n         } else if (new Cookie(cookie).getType() == CookieType.SERVER_42_INPUT) {\n             PortColourCookie portColourCookie = new PortColourCookie(cookie);\n             int customerPort = portColourCookie.getPortNumber();\n-            switchManager.installServer42InputFlow(\n-                    dpid, command.getInputPort(), customerPort, command.getServer42MacAddress());\n+            return switchManager.installServer42InputFlow(dpid, server42Port, customerPort, server42MacAddress);\n         } else {\n             logger.warn(\"Skipping the installation of unexpected server 42 switch rule {} for switch {}\",\n-                    Long.toHexString(cookie), command.getSwitchId());\n+                    Long.toHexString(cookie), switchId);\n+            return null;\n         }\n     }\n "
  },
  {
    "sha": "160b299ad198149f70113875d4d6451d3ba951a3",
    "filename": "src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/fsm/SwitchSyncFsm.java",
    "status": "modified",
    "additions": 26,
    "deletions": 6,
    "changes": 32,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/fsm/SwitchSyncFsm.java",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/fsm/SwitchSyncFsm.java",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/fsm/SwitchSyncFsm.java?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb",
    "patch": "@@ -26,6 +26,7 @@\n import static org.openkilda.wfm.topology.switchmanager.fsm.SwitchSyncFsm.SwitchSyncEvent.RULES_SYNCHRONIZED;\n import static org.openkilda.wfm.topology.switchmanager.fsm.SwitchSyncFsm.SwitchSyncEvent.TIMEOUT;\n import static org.openkilda.wfm.topology.switchmanager.fsm.SwitchSyncFsm.SwitchSyncState.COMPUTE_INSTALL_RULES;\n+import static org.openkilda.wfm.topology.switchmanager.fsm.SwitchSyncFsm.SwitchSyncState.COMPUTE_REINSTALL_RULES;\n import static org.openkilda.wfm.topology.switchmanager.fsm.SwitchSyncFsm.SwitchSyncState.COMPUTE_REMOVE_METERS;\n import static org.openkilda.wfm.topology.switchmanager.fsm.SwitchSyncFsm.SwitchSyncState.COMPUTE_REMOVE_RULES;\n import static org.openkilda.wfm.topology.switchmanager.fsm.SwitchSyncFsm.SwitchSyncState.FINISHED;\n@@ -88,6 +89,7 @@\n     private List<Long> removeDefaultRules = new ArrayList<>();\n \n     private List<BaseFlow> missingRules = emptyList();\n+    private List<ReinstallDefaultFlowForSwitchManagerRequest> misconfiguredRules = emptyList();\n     private List<RemoveFlow> excessRules = emptyList();\n     private List<Long> excessMeters = emptyList();\n \n@@ -129,7 +131,12 @@ public SwitchSyncFsm(SwitchManagerCarrier carrier, String key, CommandBuilder co\n         builder.externalTransition().from(COMPUTE_INSTALL_RULES).to(FINISHED_WITH_ERROR).on(ERROR)\n                 .callMethod(FINISHED_WITH_ERROR_METHOD_NAME);\n \n-        builder.externalTransition().from(COMPUTE_INSTALL_RULES).to(COMPUTE_REMOVE_RULES).on(NEXT)\n+        builder.externalTransition().from(COMPUTE_INSTALL_RULES).to(COMPUTE_REINSTALL_RULES).on(NEXT)\n+                .callMethod(\"computeReinstallRules\");\n+        builder.externalTransition().from(COMPUTE_REINSTALL_RULES).to(FINISHED_WITH_ERROR).on(ERROR)\n+                .callMethod(FINISHED_WITH_ERROR_METHOD_NAME);\n+\n+        builder.externalTransition().from(COMPUTE_REINSTALL_RULES).to(COMPUTE_REMOVE_RULES).on(NEXT)\n                 .callMethod(\"computeRemoveRules\");\n         builder.externalTransition().from(COMPUTE_REMOVE_RULES).to(FINISHED_WITH_ERROR).on(ERROR)\n                 .callMethod(FINISHED_WITH_ERROR_METHOD_NAME);\n@@ -188,6 +195,19 @@ protected void computeInstallRules(SwitchSyncState from, SwitchSyncState to,\n         }\n     }\n \n+    protected void computeReinstallRules(SwitchSyncState from, SwitchSyncState to,\n+                                         SwitchSyncEvent event, Object context) {\n+        List<Long> reinstallRules = getReinstallDefaultRules();\n+        if (!reinstallRules.isEmpty()) {\n+            log.info(\"Compute reinstall default rules (switch={}, key={})\", switchId, key);\n+            try {\n+                misconfiguredRules = commandBuilder.buildCommandsToReinstallRules(switchId, reinstallRules);\n+            } catch (Exception e) {\n+                sendException(e);\n+            }\n+        }\n+    }\n+\n     protected void computeRemoveRules(SwitchSyncState from, SwitchSyncState to,\n                                       SwitchSyncEvent event, Object context) {\n         removeFlowRules = new ArrayList<>(validationResult.getValidateRulesResult().getExcessRules());\n@@ -246,13 +266,12 @@ protected void sendRulesCommands(SwitchSyncState from, SwitchSyncState to,\n             }\n         }\n \n-        List<Long> reinstallRules = getReinstallDefaultRules();\n-        if (!reinstallRules.isEmpty()) {\n+        if (!misconfiguredRules.isEmpty()) {\n             log.info(\"Request to reinstall default switch rules has been sent (switch={}, key={})\", switchId, key);\n-            reinstallDefaultRulesPendingResponsesCount = reinstallRules.size();\n+            reinstallDefaultRulesPendingResponsesCount = misconfiguredRules.size();\n \n-            for (Long rule : reinstallRules) {\n-                carrier.sendCommandToSpeaker(key, new ReinstallDefaultFlowForSwitchManagerRequest(switchId, rule));\n+            for (ReinstallDefaultFlowForSwitchManagerRequest command : misconfiguredRules) {\n+                carrier.sendCommandToSpeaker(key, command);\n             }\n         }\n \n@@ -396,6 +415,7 @@ private void sendException(Exception e) {\n     public enum SwitchSyncState {\n         INITIALIZED,\n         COMPUTE_INSTALL_RULES,\n+        COMPUTE_REINSTALL_RULES,\n         COMPUTE_REMOVE_RULES,\n         COMPUTE_REMOVE_METERS,\n         RULES_COMMANDS_SEND,"
  },
  {
    "sha": "f25bfa065656cb8648a1f073d4d69001423b40f0",
    "filename": "src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/CommandBuilder.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/CommandBuilder.java",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/CommandBuilder.java",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/CommandBuilder.java?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb",
    "patch": "@@ -16,6 +16,7 @@\n package org.openkilda.wfm.topology.switchmanager.service;\n \n import org.openkilda.messaging.command.flow.BaseFlow;\n+import org.openkilda.messaging.command.flow.ReinstallDefaultFlowForSwitchManagerRequest;\n import org.openkilda.messaging.command.flow.RemoveFlow;\n import org.openkilda.messaging.info.rule.FlowEntry;\n import org.openkilda.model.SwitchId;\n@@ -29,4 +30,7 @@\n     List<RemoveFlow> buildCommandsToRemoveExcessRules(SwitchId switchId,\n                                                       List<FlowEntry> flows,\n                                                       List<Long> excessRulesCookies);\n+\n+    List<ReinstallDefaultFlowForSwitchManagerRequest> buildCommandsToReinstallRules(\n+            SwitchId switchId, List<Long> reinstallRulesCookies);\n }"
  },
  {
    "sha": "8802493804f6731c50ea6cba1af5e3833faeda98",
    "filename": "src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/impl/CommandBuilderImpl.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/impl/CommandBuilderImpl.java",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/impl/CommandBuilderImpl.java",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/src-java/swmanager-topology/swmanager-storm-topology/src/main/java/org/openkilda/wfm/topology/switchmanager/service/impl/CommandBuilderImpl.java?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb",
    "patch": "@@ -24,6 +24,8 @@\n import org.openkilda.messaging.command.flow.InstallServer42Flow;\n import org.openkilda.messaging.command.flow.InstallServer42Flow.InstallServer42FlowBuilder;\n import org.openkilda.messaging.command.flow.InstallSharedFlow;\n+import org.openkilda.messaging.command.flow.ReinstallDefaultFlowForSwitchManagerRequest;\n+import org.openkilda.messaging.command.flow.ReinstallServer42FlowForSwitchManagerRequest;\n import org.openkilda.messaging.command.flow.RemoveFlow;\n import org.openkilda.messaging.command.switches.DeleteRulesCriteria;\n import org.openkilda.messaging.info.rule.FlowApplyActions;\n@@ -282,6 +284,26 @@ private SwitchProperties getSwitchProperties(SwitchId switchId) {\n                 .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public List<ReinstallDefaultFlowForSwitchManagerRequest> buildCommandsToReinstallRules(\n+            SwitchId switchId, List<Long> reinstallRulesCookies) {\n+\n+        SwitchProperties properties = getSwitchProperties(switchId);\n+        List<ReinstallDefaultFlowForSwitchManagerRequest> commands = new ArrayList<>();\n+\n+        for (Long cookie : reinstallRulesCookies) {\n+            if (isDefaultRuleWithSpecialRequirements(cookie)) {\n+                commands.add(new ReinstallServer42FlowForSwitchManagerRequest(\n+                        switchId, cookie, properties.getServer42MacAddress(), properties.getServer42Vlan(),\n+                        properties.getServer42Port()));\n+            } else {\n+                commands.add(new ReinstallDefaultFlowForSwitchManagerRequest(switchId, cookie));\n+            }\n+        }\n+\n+        return commands;\n+    }\n+\n     @VisibleForTesting\n     RemoveFlow buildRemoveFlowWithoutMeterFromFlowEntry(SwitchId switchId, FlowEntry entry) {\n         Optional<FlowMatchField> entryMatch = Optional.ofNullable(entry.getMatch());"
  },
  {
    "sha": "dec5786e58de31dd27e0d613861940731cd6772f",
    "filename": "src-java/swmanager-topology/swmanager-storm-topology/src/test/java/org/openkilda/wfm/topology/switchmanager/service/impl/CommandBuilderImplTest.java",
    "status": "modified",
    "additions": 39,
    "deletions": 1,
    "changes": 40,
    "blob_url": "https://github.com/telstra/open-kilda/blob/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/swmanager-topology/swmanager-storm-topology/src/test/java/org/openkilda/wfm/topology/switchmanager/service/impl/CommandBuilderImplTest.java",
    "raw_url": "https://github.com/telstra/open-kilda/raw/c5bcca0e1c89f48da201651d86fdf407b53d90fb/src-java/swmanager-topology/swmanager-storm-topology/src/test/java/org/openkilda/wfm/topology/switchmanager/service/impl/CommandBuilderImplTest.java",
    "contents_url": "https://api.github.com/repos/telstra/open-kilda/contents/src-java/swmanager-topology/swmanager-storm-topology/src/test/java/org/openkilda/wfm/topology/switchmanager/service/impl/CommandBuilderImplTest.java?ref=c5bcca0e1c89f48da201651d86fdf407b53d90fb",
    "patch": "@@ -24,13 +24,16 @@\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n+import static org.openkilda.model.cookie.Cookie.ROUND_TRIP_LATENCY_RULE_COOKIE;\n \n import org.openkilda.config.provider.PropertiesBasedConfigurationProvider;\n import org.openkilda.messaging.command.flow.BaseFlow;\n import org.openkilda.messaging.command.flow.InstallEgressFlow;\n import org.openkilda.messaging.command.flow.InstallIngressFlow;\n import org.openkilda.messaging.command.flow.InstallOneSwitchFlow;\n import org.openkilda.messaging.command.flow.InstallTransitFlow;\n+import org.openkilda.messaging.command.flow.ReinstallDefaultFlowForSwitchManagerRequest;\n+import org.openkilda.messaging.command.flow.ReinstallServer42FlowForSwitchManagerRequest;\n import org.openkilda.messaging.command.flow.RemoveFlow;\n import org.openkilda.messaging.command.switches.DeleteRulesCriteria;\n import org.openkilda.messaging.info.rule.FlowApplyActions;\n@@ -41,6 +44,7 @@\n import org.openkilda.model.FlowEncapsulationType;\n import org.openkilda.model.FlowPath;\n import org.openkilda.model.FlowPathDirection;\n+import org.openkilda.model.MacAddress;\n import org.openkilda.model.PathId;\n import org.openkilda.model.PathSegment;\n import org.openkilda.model.Switch;\n@@ -57,6 +61,7 @@\n import org.openkilda.persistence.repositories.TransitVlanRepository;\n import org.openkilda.wfm.share.flow.resources.FlowResourcesConfig;\n \n+import com.google.common.collect.Lists;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -75,6 +80,9 @@\n     private static final SwitchId SWITCH_ID_A = new SwitchId(\"00:10\");\n     private static final SwitchId SWITCH_ID_B = new SwitchId(\"00:20\");\n     private static final SwitchId SWITCH_ID_C = new SwitchId(\"00:30\");\n+    private static final MacAddress SERVER42_MAC_ADDRESS = new MacAddress(\"42:42:42:42:42:42\");\n+    private static final int SERVER42_PORT = 1;\n+    private static final int SERVER42_VLAN = 2;\n \n     private static CommandBuilderImpl commandBuilder;\n \n@@ -164,7 +172,12 @@ private FlowPath buildFlowAndPath(String flowId, SwitchId srcSwitchId, SwitchId\n             when(transitVlanRepository.findByPathId(eq(forwardPath.getPathId()), any()))\n                     .thenReturn(singleton(transitVlanEntity));\n             when(switchPropertiesRepository.findBySwitchId(any()))\n-                    .thenReturn(Optional.ofNullable(SwitchProperties.builder().build()));\n+                    .thenReturn(Optional.ofNullable(SwitchProperties.builder()\n+                            .server42FlowRtt(true)\n+                            .server42MacAddress(SERVER42_MAC_ADDRESS)\n+                            .server42Port(SERVER42_PORT)\n+                            .server42Vlan(SERVER42_VLAN)\n+                            .build()));\n \n             return forwardPath;\n         }\n@@ -280,6 +293,31 @@ public void shouldBuildRemoveFlowWithoutMeterFromFlowEntryWithVxlanEncapsulation\n         assertEquals(Integer.valueOf(outPort), criteria.getOutPort());\n     }\n \n+    @Test\n+    public void reinstallDefaultRuleTest() {\n+        List<ReinstallDefaultFlowForSwitchManagerRequest> commands = commandBuilder.buildCommandsToReinstallRules(\n+                SWITCH_ID_A, Lists.newArrayList(ROUND_TRIP_LATENCY_RULE_COOKIE));\n+\n+        assertEquals(1, commands.size());\n+        assertEquals(ROUND_TRIP_LATENCY_RULE_COOKIE, commands.get(0).getCookie());\n+        assertEquals(SWITCH_ID_A, commands.get(0).getSwitchId());\n+    }\n+\n+    @Test\n+    public void reinstallServer42RuleTest() {\n+        List<ReinstallDefaultFlowForSwitchManagerRequest> commands = commandBuilder.buildCommandsToReinstallRules(\n+                SWITCH_ID_A, Lists.newArrayList(Cookie.SERVER_42_OUTPUT_VLAN_COOKIE));\n+\n+        assertEquals(1, commands.size());\n+        assertEquals(ReinstallServer42FlowForSwitchManagerRequest.class, commands.get(0).getClass());\n+        ReinstallServer42FlowForSwitchManagerRequest server42Command =\n+                (ReinstallServer42FlowForSwitchManagerRequest) commands.get(0);\n+\n+        assertEquals(SERVER42_MAC_ADDRESS, server42Command.getServer42MacAddress());\n+        assertEquals(SERVER42_PORT, server42Command.getServer42Port());\n+        assertEquals(SERVER42_VLAN, server42Command.getServer42Vlan());\n+    }\n+\n     private FlowEntry buildFlowEntry(Long cookie, String inPort, String inVlan, String outPort,\n                                      String tunnelId, boolean tunnelIdIngressRule) {\n         return FlowEntry.builder()"
  }
]
