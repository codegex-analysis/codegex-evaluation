[
  {
    "sha": "d0da23d9e27940c714b2ba129757dec9b8e3ab49",
    "filename": "sim-card-auth-react-native-tutorial.md",
    "status": "modified",
    "additions": 24,
    "deletions": 16,
    "changes": 40,
    "blob_url": "https://github.com/tru-ID/sim-card-auth-react-native/blob/c48c021db252c21ce8810df41de77429b4fbd425/sim-card-auth-react-native-tutorial.md",
    "raw_url": "https://github.com/tru-ID/sim-card-auth-react-native/raw/c48c021db252c21ce8810df41de77429b4fbd425/sim-card-auth-react-native-tutorial.md",
    "contents_url": "https://api.github.com/repos/tru-ID/sim-card-auth-react-native/contents/sim-card-auth-react-native-tutorial.md?ref=c48c021db252c21ce8810df41de77429b4fbd425",
    "patch": "@@ -15,11 +15,9 @@ The SubscriberCheck workflow is as follows:\n 1. Get the User's Phone Number on Mobile Device\n 2. Send the Phone Number the Application Server\n 3. Create a SubscriberCheck using the SubscriberCheck API\n-4. Return the SubscriberCheck URL to the Mobile Device\n-5. Request the SubscriberCheck URL on the Mobile Device over Mobile Data\n-6. Mobile Device requests SubscriberCheck Result via the Application Server\n-7. Application Server gets SubscriberCheck Result from SubscriberCheck API\n-8. Application Server returns the SubscriberCheck Result, including SIM changed status, to the Mobile Device\n+4. Request the SubscriberCheck URL on the Mobile Device over Mobile Data\n+5. Mobile Device requests SubscriberCheck Result via the Application Server\n+6. Application Server returns the SubscriberCheck Result, including SIM changed status, to the Mobile Device\n \n ## Getting Started\n \n@@ -29,21 +27,25 @@ In order to follow along with this tutorial headover to the [SIM Card Based Auth\n \n ## Performing the SubscriberCheck Authentication - I\n \n-Before we perform any action we need to copy this utility line `axios.defaults.baseURL = 'https://{subdomain}.loca.lt';` into our `app.js` before the `onPressHandlerFunction`, where `{subdomain}` is the local tunnel subdomain created when we run the server in the previous section.\n+Before we perform any action we need to setup Axios to know where our development server is running. Set this up in `mobile/App.js` before the `onPressHandler`.\n \n-This helper helps keep things DRY so we don't rewrite the same Base URL repeatedly,\n+```js\n+import axios from 'axios';\n \n-Alternatively you could write:\n+const App = () => {\n \n-```\n-axios.create({\n-    baseURL: 'https://{subdomain}.loca.lt'\n-})\n+    axios.defaults.baseURL = 'https://{subdomain}.loca.lt';\n+\n+    const onPressHandler = () => {};\n+};\n ```\n \n+This helper helps keep things DRY so we don't rewrite the same Base URL repeatedly,\n+\n In order to perform the SubscriberCheck Authentication, head over to `app.js` and in the `onPressHandler` function and paste the following lines of code:\n \n ```\n+const onPressHandler = () => {\n    setLoading(true);\n     const body = {\n       phone_number: transformPhoneNumber(callingCode, phoneNumber),\n@@ -58,6 +60,7 @@ In order to perform the SubscriberCheck Authentication, head over to `app.js` an\n       setLoading(false);\n       setError(e.message);\n     }\n+}\n ```\n \n First off we set our loading state to `true` and this is necessary so we give the user a visual cue that something (a HTTP network request) is happening. Next, we set construct the body object setting the `phone_number` field to a helper function that helps transform phone numbers by appending the calling code, trimming white-space, handling copy-paste phone numbers etc.\n@@ -111,22 +114,27 @@ The SDK forces mobile data connection and makes a get request to the SubscriberC\n The final code in the `onPressHandler` should be:\n \n ```\n-setLoading(true);\n+    // Step 1\n+    setLoading(true);\n     const body = {\n-      phone_number: transformPhoneNumber(callingCode, phoneNumber),\n+      phone_number: phoneNumber,\n     };\n     console.log(body);\n-    //make a request to the SubscriberCheck endpoint to get back the check_url\n+    // Step 2: make a request to the SubscriberCheck endpoint to get back the check_url\n     try {\n       const response = await axios.post('/subscriber-check', body);\n       console.log(response.data);\n-      //pass the check url into the Tru SDK and perform the GET request to the SubscriberCheck check url\n+      // Step 3: pass the check url into the Tru SDK and perform the GET request to the SubscriberCheck check url\n       await TruSDK.openCheckUrl(response.data.check_url);\n       //make request to subscriber check endpoint to get the SubscriberCheck result\n+      \n+      // Step 4: Get updated SubscriberCheck resource\n       const resp = await axios.get(\n         `/subscriber-check/${response.data.check_id}`\n       );\n       console.log(resp.data);\n+      \n+      // Step 5\n       setData(resp.data);\n       setLoading(false);\n     } catch (e) {"
  }
]
