[
  {
    "sha": "94a25f7f4cb416c083d265558da75d457237d671",
    "filename": ".idea/vcs.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/assistent-atpp/Java_Level_2/blob/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/.idea/vcs.xml",
    "raw_url": "https://github.com/assistent-atpp/Java_Level_2/raw/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/.idea/vcs.xml",
    "contents_url": "https://api.github.com/repos/assistent-atpp/Java_Level_2/contents/.idea/vcs.xml?ref=c5e5d6d39994a91dc7755f8d8171acc198aaee1a",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"VcsDirectoryMappings\">\n+    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "7f08322da44434de2951c430404d870a765ffd5e",
    "filename": "src/GeekBrains/Java/Lessons/Main.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/assistent-atpp/Java_Level_2/blob/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/GeekBrains/Java/Lessons/Main.java",
    "raw_url": "https://github.com/assistent-atpp/Java_Level_2/raw/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/GeekBrains/Java/Lessons/Main.java",
    "contents_url": "https://api.github.com/repos/assistent-atpp/Java_Level_2/contents/src/GeekBrains/Java/Lessons/Main.java?ref=c5e5d6d39994a91dc7755f8d8171acc198aaee1a",
    "patch": "@@ -11,7 +11,7 @@ public static void main(String[] args) {\n                 new Cat(\"Kotik\", 200, 3),\n                 new Human(\"Iziy\", 5000, 5)\n         };\n-        // массив препятствий\n+        // массив препятствий бег и стена\n         Obstacle [] obstacles = {\n                 new Cross(400),\n                 new Wall(1)"
  },
  {
    "sha": "3ccafbc1edc142f448ddd89123f001ffab17fb07",
    "filename": "src/HomeWorkLesson2/Main.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/assistent-atpp/Java_Level_2/blob/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson2/Main.java",
    "raw_url": "https://github.com/assistent-atpp/Java_Level_2/raw/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson2/Main.java",
    "contents_url": "https://api.github.com/repos/assistent-atpp/Java_Level_2/contents/src/HomeWorkLesson2/Main.java?ref=c5e5d6d39994a91dc7755f8d8171acc198aaee1a",
    "patch": "@@ -0,0 +1,46 @@\n+package HomeWorkLesson2;\n+\n+public class Main {\n+    static int size = 4;\n+    public static void main(String[] args) {\n+        // массив строк\n+        String[][] stringArray = {\n+                {\"1\", \"2\", \"3\", \"4\"},\n+                {\"5\", \"6\", \"7\", \"8\"},\n+                {\"9\", \"10\", \"11g\", \"12\"},\n+                {\"13\", \"14\", \"15\", \"16\"}\n+        };\n+        try {\n+            System.out.println(\"sum = \" + getSum(stringArray));\n+        } catch (MyArraySizeException e) {\n+            System.out.println(e.getMessage());\n+        } catch (MyArrayDataException e) {\n+            System.out.println(e.getMessage());\n+//            System.out.println(e.getCol() + \" \" + e.getRow());\n+            System.out.println(stringArray[e.getCol()][e.getRow()]);\n+        }\n+    }\n+    // метод, возвращающий сумму элементов массива в случае отсутствия исключений\n+    public static int getSum (String[][]stringArray) throws MyArraySizeException, MyArrayDataException {\n+        if (stringArray.length != size) {\n+            throw new MyArraySizeException();\n+        }\n+        for (int i = 0; i < stringArray.length; i++) {\n+            if (stringArray.length != size) {\n+                throw new MyArraySizeException();\n+            }\n+        }\n+        int sum = 0;\n+        for (int i = 0; i < stringArray.length; i++) {\n+            for (int j = 0; j < stringArray[i].length; j++) {\n+                try {\n+                    sum += Integer.parseInt(stringArray[i][j]);\n+                } catch (NumberFormatException e) {\n+                    throw new MyArrayDataException(\"format \" + i + \" \" + j, i, j);\n+                }\n+            }\n+        }\n+        return sum;\n+    }\n+}\n+"
  },
  {
    "sha": "e9ad1739a20fffdc1428835559d96122009079e1",
    "filename": "src/HomeWorkLesson2/MyArrayDataException.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/assistent-atpp/Java_Level_2/blob/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson2/MyArrayDataException.java",
    "raw_url": "https://github.com/assistent-atpp/Java_Level_2/raw/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson2/MyArrayDataException.java",
    "contents_url": "https://api.github.com/repos/assistent-atpp/Java_Level_2/contents/src/HomeWorkLesson2/MyArrayDataException.java?ref=c5e5d6d39994a91dc7755f8d8171acc198aaee1a",
    "patch": "@@ -0,0 +1,20 @@\n+package HomeWorkLesson2;\n+\n+public class MyArrayDataException extends RuntimeException{\n+    private int row;\n+    private int col;\n+\n+    public MyArrayDataException(String message, int row, int col){\n+        super (message);\n+        this.row = row;\n+        this.col = col;\n+    }\n+\n+    public int getRow(){\n+        return row;\n+    }\n+\n+    public int getCol(){\n+        return col;\n+    }\n+}"
  },
  {
    "sha": "4f9929d66298d0eed2ad97e96efb2af420e34914",
    "filename": "src/HomeWorkLesson2/MyArraySizeException.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/assistent-atpp/Java_Level_2/blob/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson2/MyArraySizeException.java",
    "raw_url": "https://github.com/assistent-atpp/Java_Level_2/raw/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson2/MyArraySizeException.java",
    "contents_url": "https://api.github.com/repos/assistent-atpp/Java_Level_2/contents/src/HomeWorkLesson2/MyArraySizeException.java?ref=c5e5d6d39994a91dc7755f8d8171acc198aaee1a",
    "patch": "@@ -0,0 +1,4 @@\n+package HomeWorkLesson2;\n+\n+public class MyArraySizeException extends RuntimeException{\n+}"
  },
  {
    "sha": "801d19849922f943ef765588c8525e5ca9f250ab",
    "filename": "src/HomeWorkLesson3/Main.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/assistent-atpp/Java_Level_2/blob/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson3/Main.java",
    "raw_url": "https://github.com/assistent-atpp/Java_Level_2/raw/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson3/Main.java",
    "contents_url": "https://api.github.com/repos/assistent-atpp/Java_Level_2/contents/src/HomeWorkLesson3/Main.java?ref=c5e5d6d39994a91dc7755f8d8171acc198aaee1a",
    "patch": "@@ -0,0 +1,38 @@\n+package HomeWorkLesson3;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        // массив слов\n+        String [] arrayWords = {\n+                \"яблоко\",\n+                \"груша\",\n+                \"киви\",\n+                \"банан\",\n+                \"яблоко\",\n+                \"апельсин\",\n+                \"лимон\",\n+                \"банан\",\n+                \"мандарин\",\n+                \"киви\",\n+                \"груша\"};\n+        System.out.println(Arrays.toString(arrayWords));\n+        HashMap <String, Integer> hashMap = new HashMap<>();\n+        for (String words: arrayWords){\n+            hashMap.put(words, hashMap.getOrDefault(words, 0) + 1);\n+        }\n+        System.out.println(hashMap);\n+\n+        PhoneBook phoneBook = new PhoneBook();\n+        phoneBook.add(\"Иванов\", +7917456781L);\n+        phoneBook.add(\"Петров\", +7927789921L);\n+        phoneBook.add(\"Петров\", +7904036984L);\n+        phoneBook.add(\"Сидоров\", +7950521983L, +7927712935L);\n+        phoneBook.add(\"Иванов\", +79066345128L);\n+\n+        System.out.println(\"Тел: \" + phoneBook.get(\"Иванов\"));\n+        System.out.println(\"Тел: \" + phoneBook.get(\"Сидоров\"));\n+    }\n+}"
  },
  {
    "sha": "7963caffb100e3a1abbb812946297396decb6520",
    "filename": "src/HomeWorkLesson3/PhoneBook.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/assistent-atpp/Java_Level_2/blob/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson3/PhoneBook.java",
    "raw_url": "https://github.com/assistent-atpp/Java_Level_2/raw/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson3/PhoneBook.java",
    "contents_url": "https://api.github.com/repos/assistent-atpp/Java_Level_2/contents/src/HomeWorkLesson3/PhoneBook.java?ref=c5e5d6d39994a91dc7755f8d8171acc198aaee1a",
    "patch": "@@ -0,0 +1,23 @@\n+package HomeWorkLesson3;\n+\n+import java.util.*;\n+\n+public class PhoneBook {\n+    private HashMap<String, Set<Long>> phoneBook = new HashMap<>();\n+    // метод добавления персонажа в справочник - имя и один номер\n+    public  void add (String name, Long phone){\n+        Set <Long> telephone = phoneBook.getOrDefault(name, new HashSet<>());\n+        telephone.add(phone);\n+        phoneBook.put(name, telephone);\n+    }\n+    // метод добавления персонажа в справочник - имя и неколько номеров\n+    public void add (String name, Long ... phones){\n+        Set <Long> telephone = phoneBook.getOrDefault(name, new HashSet<>());\n+        telephone.addAll(Arrays.asList(phones));\n+        phoneBook.put(name, telephone);\n+    }\n+\n+    public Set <Long> get (String name){\n+        return Collections.unmodifiableSet(phoneBook.get(name));\n+    }\n+}"
  },
  {
    "sha": "49633f8ffc4bd80284aab6304681e3fa5a5851a9",
    "filename": "src/HomeWorkLesson5/Main.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/assistent-atpp/Java_Level_2/blob/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson5/Main.java",
    "raw_url": "https://github.com/assistent-atpp/Java_Level_2/raw/c5e5d6d39994a91dc7755f8d8171acc198aaee1a/src/HomeWorkLesson5/Main.java",
    "contents_url": "https://api.github.com/repos/assistent-atpp/Java_Level_2/contents/src/HomeWorkLesson5/Main.java?ref=c5e5d6d39994a91dc7755f8d8171acc198aaee1a",
    "patch": "@@ -0,0 +1,61 @@\n+package HomeWorkLesson5;\n+\n+public class Main {\n+    private static final int SIZE = 10_000_000;\n+    private static final int HALF = SIZE / 2;\n+    private static final int PART_FIRST = 0;\n+    private static final int PART_SECOND = 1;\n+    private static float[] array = new float[SIZE];\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"method1: \" + method1() + \" millis\");\n+        try {\n+            System.out.println(\"method1: \" + method2() + \" millis\");\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    // метод №1 - расчёт времени вычислений в одном потоке\n+    public static long method1() {\n+        for (int i = 0; i < array.length; i++){\n+            array[i] = 1;\n+        }\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < array.length; i++){\n+            array[i] = (float)(array[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+        }\n+        return System.currentTimeMillis() - time;\n+    }\n+\n+    // метод №2 - расчёт времени вычислений в двух потоках\n+    public static long method2() throws InterruptedException {\n+        for (int i = 0; i < array.length; i++){\n+            array[i] = 1;\n+        }\n+        long time = System.currentTimeMillis();\n+        float [][] partsArray = prepareParts();\n+        // разделение двумерного массива halfArray на два массива\n+        System.arraycopy(array, 0, partsArray[PART_FIRST], 0, HALF);\n+        System.arraycopy(array, HALF, partsArray[PART_SECOND], 0, HALF);\n+\n+        Thread thread = new Thread(() -> fillArray(partsArray[PART_SECOND], HALF));\n+        thread.start();\n+        fillArray(partsArray[PART_FIRST], 0);\n+        thread.join();\n+        // соединение двух частей массива halfArray в один массив\n+        System.arraycopy(partsArray[PART_FIRST], 0, array, 0, HALF);\n+        System.arraycopy(partsArray[PART_SECOND], 0, array, HALF, HALF);\n+        return System.currentTimeMillis() - time;\n+    }\n+    // метод подготовки двух половин массива\n+    public static float [][] prepareParts() {\n+        return new float[][] {new float[HALF], new float[HALF]};\n+    }\n+    // метод заполнения массива значениями по формуле\n+    public static void fillArray (float[] array, int startPosition) {\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = (float) (array[i] * Math.sin(0.2f + (i + startPosition) / 5) * Math.cos(0.2f + (i + startPosition) / 5)\n+                    * Math.cos(0.4f + (i + startPosition) / 2));\n+        }\n+    }\n+}"
  }
]
