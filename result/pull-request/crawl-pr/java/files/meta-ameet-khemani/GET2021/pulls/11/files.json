[
  {
    "sha": "b261d2ce56a7256da69670c4cf77e41fba8678ce",
    "filename": "Assignment8-Recursion/src/com/metacube/operations/Q1LCMHCF/LCMHCF.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/operations/Q1LCMHCF/LCMHCF.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/operations/Q1LCMHCF/LCMHCF.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment8-Recursion/src/com/metacube/operations/Q1LCMHCF/LCMHCF.java?ref=ffd500ab11e7c653d46e648176b388065753a5ce",
    "patch": "@@ -0,0 +1,53 @@\n+package com.metacube.operations.Q1LCMHCF;\n+\n+/**\n+ * LCMHCF class calculates LCM, HCF and GCD\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class LCMHCF {\n+\t\n+\t/**\n+\t * calculate GCD of given numbers\n+\t * @param num1\n+\t * @param num2\n+\t * @return GCD of num1 and num2\n+\t * NOTE:- assuming both numbers are positive\n+\t */\n+\tpublic static Integer calculateGCD(Integer num1, Integer num2) {\n+\t\tif (num1 == 0)\n+\t\t\treturn num2;\n+\t\treturn calculateGCD(num2 % num1, num1);\n+\t}\n+\t\n+\t/**\n+\t * calculate LCM of given numbers\n+\t * @param num1\n+\t * @param num2\n+\t * @return LCM of num1 and num2\n+\t * NOTE:- assuming both numbers are positive\n+\t */\n+\tpublic static Integer calculateLCM(Integer num1, Integer num2) {\n+\t\treturn ((num1 / calculateGCD(num1, num2)) * num2);\n+\t}\n+\t\n+\t/**\n+\t * calculate HCF of given numbers\n+\t * @param num1\n+\t * @param num2\n+\t * @return HCF of num1 and num2\n+\t * NOTE:- assuming both numbers are positive\n+\t */\n+\tpublic static Integer calculateHCF(Integer num1, Integer num2) {\n+\t\tif (num1 == 0)\n+\t\t\treturn num2;\n+\t\tif (num2 == 0)\n+\t\t\treturn num1;\n+\t\tif (num1 > num2) {\n+\t\t\treturn calculateHCF(num1 % num2, num2);\n+\t\t} else {\n+\t\t\treturn calculateHCF(num2 % num1, num1);\n+\t\t}\n+\t}\n+\t\n+}"
  },
  {
    "sha": "3ddd9242216514b2e12469ede046d82d55e3461f",
    "filename": "Assignment8-Recursion/src/com/metacube/operations/Q2Search/SearchAlgo.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/operations/Q2Search/SearchAlgo.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/operations/Q2Search/SearchAlgo.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment8-Recursion/src/com/metacube/operations/Q2Search/SearchAlgo.java?ref=ffd500ab11e7c653d46e648176b388065753a5ce",
    "patch": "@@ -0,0 +1,54 @@\n+package com.metacube.operations.Q2Search;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * SearchAlgo class contains different algorithms for searching using recursion\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class SearchAlgo {\n+\n+\t/***\n+\t * Searchs value in given array linearly using recursion\n+\t * @param array\n+\t * @param value\n+\t * @return index of item if present else -1\n+\t */\n+\tpublic static Integer linearSearch (Integer[] array, Integer value) {\n+\t\tInteger length = array.length;\n+\t\tif (array.length == 0) {\n+\t\t\treturn -1;\n+\t\t} else if (array[length - 1] == value) {\n+\t\t\treturn length - 1;\n+\t\t}\n+\t\tInteger[] newArray = Arrays.copyOfRange(array, 0, length - 1);\n+\t\treturn linearSearch(newArray, value);\n+\t}\n+\t\n+\t/**\n+\t * Searchs value in given array through binary search using recursion\n+\t * @param array\n+\t * @param value\n+\t * @return index of item if present else -1\n+\t * Note:- assuming that given array is sorted\n+\t */\n+\tpublic static Integer binarySearch (Integer[] array, Integer value, Integer firstIndex, Integer lastIndex) {\n+\t\t\n+\t\t// getting middle index\n+\t\tInteger mid = firstIndex + (lastIndex - firstIndex) / 2;\n+\t\t\n+\t\tif (lastIndex >= firstIndex) {\n+\t\t\tif (array[mid] == value) {\n+\t\t\t\treturn mid;\n+\t\t\t}\n+\t\t\tif (array[mid] > value) {\n+\t\t\t\treturn binarySearch(array, value, firstIndex, mid - 1);\n+\t\t\t} else {\n+\t\t\t\treturn binarySearch(array, value, mid + 1, lastIndex);\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;\n+\t}\n+\t\n+}"
  },
  {
    "sha": "b984bd30e3864cbc80e76a3b7b78f85a174cbbc4",
    "filename": "Assignment8-Recursion/src/com/metacube/operations/Q3NQueen/NQueen.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/operations/Q3NQueen/NQueen.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/operations/Q3NQueen/NQueen.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment8-Recursion/src/com/metacube/operations/Q3NQueen/NQueen.java?ref=ffd500ab11e7c653d46e648176b388065753a5ce",
    "patch": "@@ -0,0 +1,102 @@\n+package com.metacube.operations.Q3NQueen;\n+\n+/**\n+ * NQueen problem\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class NQueen {\n+\t\n+\t/**\n+\t * printing chess board with queens position\n+\t * @param board\n+\t */\n+\tprivate static void printSolution(int board[][]) {\n+\t\tSystem.out.println();\n+\t\tfor (int i = 0; i < board.length; i++) {\n+\t\t\tfor (int j = 0; j < board[0].length; j++) {\n+\t\t\t\tSystem.out.print(\" \" + board[i][j] + \" \");\n+\t\t\t}\n+\t\t\tSystem.out.println();\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * checking if next location is safe or not\n+\t * @param board\n+\t * @param row\n+\t * @param col\n+\t * @return true if safe else false\n+\t */\n+\tprivate static boolean isSafe(int board[][], int row, int col) {\n+\t\t\n+\t\tboolean isSafe = true;\n+\t\t\n+\t\t// checking through columns\n+\t\tfor (int loopIndex = 0; loopIndex < col; loopIndex++) {\n+\t\t\tif (board[row][loopIndex] == 1) {\n+\t\t\t\tisSafe = false;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t// checking through diagonals\n+\t\tfor (int loopRowIndex = row, loopColIndex = col; loopRowIndex >= 0 && loopColIndex >= 0; loopRowIndex--, loopColIndex--) {\n+\t\t\tif (board[loopRowIndex][loopColIndex] == 1) {\n+\t\t\t\tisSafe = false;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t// checking through diagonals\n+\t\tfor (int loopRowIndex = row, loopColIndex = col; loopColIndex >= 0 && loopRowIndex < board.length; loopRowIndex++, loopColIndex--) {\n+\t\t\tif (board[loopRowIndex][loopColIndex] == 1) {\n+\t\t\t\tisSafe = false;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn isSafe;\n+\t}\n+\t\n+\t/**\n+\t * get chess board with queens positions\n+\t * @param board\n+\t * @param col\n+\t * @return true if there is possible solution else false\n+\t */\n+\tprivate static boolean solveNQueen(int board[][], int col) {\n+\t\t\n+\t\tboolean isFurtherPossible = false;\n+\t\t\n+\t\tif (col >= board.length)\n+\t\t\treturn true;\n+\t\t\n+\t\tfor (int i = 0; i < board.length; i++) {\n+\t\t\tif (isSafe(board, i, col)) {\n+\t\t\t\tboard[i][col] = 1;\n+\t\t\t\tif (solveNQueen(board, col + 1)) {\n+\t\t\t\t\tisFurtherPossible = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tboard[i][col] = 0;\n+\t\t\t}\n+\t\t}\n+\t\treturn isFurtherPossible;\n+\t}\n+\t\n+\t/**\n+\t * used to get the chess board with queens position\n+\t * @param size chess board size i.e size * size\n+\t * @return chess board with safe queens positions else blank chess board\n+\t */\n+\tpublic static int[][] getNQueenSolution(int size) {\n+\t\tint board[][] = new int[size][size];\n+\t\tif (!solveNQueen(board, 0))\n+\t\t\tboard = new int[size][size];\n+\t\telse\n+\t\t\tprintSolution(board);\n+\t\treturn board;\n+\t}\n+\t\n+}"
  },
  {
    "sha": "299a22dd9b02485e8d9a48abbcd7cfd743356d16",
    "filename": "Assignment8-Recursion/src/com/metacube/test/Q1LCMHCF/HCFTest.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/test/Q1LCMHCF/HCFTest.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/test/Q1LCMHCF/HCFTest.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment8-Recursion/src/com/metacube/test/Q1LCMHCF/HCFTest.java?ref=ffd500ab11e7c653d46e648176b388065753a5ce",
    "patch": "@@ -0,0 +1,45 @@\n+package com.metacube.test.Q1LCMHCF;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import com.metacube.operations.Q1LCMHCF.LCMHCF;\n+\n+@RunWith(Parameterized.class)\n+public class HCFTest {\n+\t\n+\tpublic Integer num1;\n+\tpublic Integer num2;\n+\tpublic Integer expectedResult;\n+\t\n+\tpublic HCFTest (Integer num1, Integer num2, Integer expectedResult) {\n+\t\tsuper();\n+\t\tthis.num1 = num1;\n+\t\tthis.num2 = num2;\n+\t\tthis.expectedResult = expectedResult;\n+\t}\n+\t\n+\t@Parameters\n+\tpublic static Collection<Object[]> data() {\n+\t\treturn Arrays.asList(new Object[][]{\n+\t\t\t\t{10, 15, 5},\n+\t\t\t\t{35, 10, 5},\n+\t\t\t\t{31, 2, 1}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Testing LCM with above numbers\n+\t */\n+\t@Test\n+\tpublic void testHCF() {\n+\t\tassertEquals(this.expectedResult, LCMHCF.calculateHCF(this.num1, this.num2));\n+\t}\n+}"
  },
  {
    "sha": "d257536b6be26825a65ff018148c038159138822",
    "filename": "Assignment8-Recursion/src/com/metacube/test/Q1LCMHCF/LCMTest.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/test/Q1LCMHCF/LCMTest.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/test/Q1LCMHCF/LCMTest.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment8-Recursion/src/com/metacube/test/Q1LCMHCF/LCMTest.java?ref=ffd500ab11e7c653d46e648176b388065753a5ce",
    "patch": "@@ -0,0 +1,44 @@\n+package com.metacube.test.Q1LCMHCF;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import com.metacube.operations.Q1LCMHCF.LCMHCF;\n+\n+@RunWith(Parameterized.class)\n+public class LCMTest {\n+\t\n+\tpublic Integer num1;\n+\tpublic Integer num2;\n+\tpublic Integer expectedResult;\n+\t\n+\tpublic LCMTest(Integer num1, Integer num2, Integer expectedResult) {\n+\t\tsuper();\n+\t\tthis.num1 = num1;\n+\t\tthis.num2 = num2;\n+\t\tthis.expectedResult = expectedResult;\n+\t}\n+\t\n+\t@Parameters\n+\tpublic static Collection<Object[]> data() {\n+\t\treturn Arrays.asList(new Object[][]{\n+\t\t\t\t{15, 20, 60},\n+\t\t\t\t{5, 7, 35},\n+\t\t\t\t{20, 42, 420}\n+\t\t});\n+\t}\n+\t\n+\t/**\n+\t * Testing LCM with above numbers\n+\t */\n+\t@Test\n+\tpublic void testLCM() {\n+\t\tassertEquals(this.expectedResult, LCMHCF.calculateLCM(this.num1, this.num2));\n+\t}\n+\n+}"
  },
  {
    "sha": "29e1d5f72bc7938b66e46ea5029d29f5e6bbbcaf",
    "filename": "Assignment8-Recursion/src/com/metacube/test/Q2Search/SearchAlgoTest.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/test/Q2Search/SearchAlgoTest.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/test/Q2Search/SearchAlgoTest.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment8-Recursion/src/com/metacube/test/Q2Search/SearchAlgoTest.java?ref=ffd500ab11e7c653d46e648176b388065753a5ce",
    "patch": "@@ -0,0 +1,56 @@\n+package com.metacube.test.Q2Search;\n+\n+import static org.junit.Assert.*; \n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import com.metacube.operations.Q2Search.SearchAlgo;\n+\n+@RunWith(Parameterized.class)\n+public class SearchAlgoTest {\n+\n+\tpublic Integer[] array;\n+\tpublic Integer value;\n+\tpublic Integer expected;\n+\t\n+\tpublic SearchAlgoTest (Integer[] array, Integer value, Integer expected) {\n+\t\tthis.array = array;\n+\t\tthis.value = value;\n+\t\tthis.expected = expected;\n+\t}\n+\t\n+\t@Parameterized.Parameters\n+\tpublic static Collection<Object[]> testValues() {\n+\t\treturn Arrays.asList(new Object[][]{\n+\t\t\t{new Integer[]{1, 2, 6, 9, 14, 24}, 1, 0},      // checking first position\n+\t\t\t{new Integer[]{1, 2, 6, 9, 14, 24}, 24, 5},     // checking last position\n+\t\t\t{new Integer[]{-10, -9, 1, 9, 10, 24}, 9, 3},   // checking middle position\n+\t\t\t{new Integer[]{1, 2, 6, 9, 14, 24}, 2, 1},      // checking second position\n+\t\t\t{new Integer[]{1, 2, 6, 9, 14, 24}, 14, 4},     // checking second last position\n+\t\t\t{new Integer[]{-10, -9, 1, 9, 10, 24}, 90, -1}, // element not found\n+\t\t\t{new Integer[]{}, 24, -1}                       // empty array\n+\t\t});\n+\t}\n+\t\n+\t/**\n+\t * Testing with multiple arrays with Linear Search\n+\t */\n+\t@Test\n+\tpublic void testLinearSearch() {\n+\t\tassertEquals(this.expected, SearchAlgo.linearSearch(this.array, this.value));\n+\t}\n+\t\n+\t/**\n+\t * Testing with multiple arrays with Binary Search\n+\t */\n+\t@Test\n+\tpublic void testBinarySearch() {\n+\t\tassertEquals(this.expected, SearchAlgo.binarySearch(this.array, this.value, 0, this.array.length - 1));\n+\t}\n+\n+}"
  },
  {
    "sha": "5c84fea938cf8614586e720a4892aa126f6e8e53",
    "filename": "Assignment8-Recursion/src/com/metacube/test/Q3NQueen/NQueenTest.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/test/Q3NQueen/NQueenTest.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/ffd500ab11e7c653d46e648176b388065753a5ce/Assignment8-Recursion/src/com/metacube/test/Q3NQueen/NQueenTest.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment8-Recursion/src/com/metacube/test/Q3NQueen/NQueenTest.java?ref=ffd500ab11e7c653d46e648176b388065753a5ce",
    "patch": "@@ -0,0 +1,54 @@\n+package com.metacube.test.Q3NQueen;\n+\n+import static org.junit.Assert.*; \n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import com.metacube.operations.Q3NQueen.NQueen;\n+\n+@RunWith(Parameterized.class)\n+public class NQueenTest {\n+\n+\tpublic int size;\n+\tpublic int[][] expected;\n+\t\n+\tpublic NQueenTest (int size, int[][] expected) {\n+\t\tthis.size = size;\n+\t\tthis.expected = expected;\n+\t}\n+\t\n+\t@Parameterized.Parameters\n+\tpublic static Collection<Object[]> testValues() {\n+\t\treturn Arrays.asList(new Object[][]{\n+\t\t\t{3, new int[][]{\t\t\t\t\t\t// checking for 3*3 matrix\n+\t\t\t\t\t{0, 0, 0}, \n+\t\t\t\t\t{0, 0, 0}, \n+\t\t\t\t\t{0, 0, 0}}\n+\t\t\t},\n+\t\t\t{4, new int[][]{\t\t\t\t\t\t// checking for 4*4 matrix\n+\t\t\t\t\t{0, 0, 1, 0}, \n+\t\t\t\t\t{1, 0, 0, 0},\n+\t\t\t\t\t{0, 0, 0, 1},\n+\t\t\t\t\t{0, 1, 0, 0}}\n+\t\t\t},\n+\t\t\t{5, new int[][]{\t\t\t\t\t\t// checking for 5*5 matrix\n+\t\t\t\t\t{1, 0, 0, 0, 0}, \n+\t\t\t\t\t{0, 0, 0, 1, 0}, \n+\t\t\t\t\t{0, 1, 0, 0, 0},\n+\t\t\t\t\t{0, 0, 0, 0, 1},\n+\t\t\t\t\t{0, 0, 1, 0, 0}}\n+\t\t\t}\n+\t\t});\n+\t}\n+\t\n+\t/**\n+\t * Testing with multiple sizes\n+\t */\n+\t@Test\n+\tpublic void multipleParametersTest() {\n+\t\tassertArrayEquals(this.expected, NQueen.getNQueenSolution(this.size));\n+\t}\n+\n+}"
  }
]
