[
  {
    "sha": "c84d16ad63f623826727033c65f0341dfc1376fc",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/cricket/MatchStrategy.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/cricket/MatchStrategy.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/cricket/MatchStrategy.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/cricket/MatchStrategy.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,72 @@\n+package com.metacube.assignment.cricket;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Strategy class for match\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class MatchStrategy {\n+\t\n+\t/**\n+\t * Used to get the order of balls bowled by which bowler\n+\t * @param numberOfBalls total number of balls left in match\n+\t * @param numberOfBowlers total number of bowlers left\n+\t * @param ballsForEachBowler balls per each bowler\n+\t * @return array of order of bowlers should be bowled\n+\t */\n+\tpublic static int[] findOrderOfBowlers (int numberOfBalls, int numberOfBowlers, int ballsForEachBowler[]) {\n+\t\tint arrangedOrderOfBowlers[] = new int[numberOfBalls];\n+\t\t\n+\t\t// check for balls to bowler data\n+\t\tif (numberOfBowlers != ballsForEachBowler.length) {\n+\t\t\tthrow new AssertionError (\"bowls allocation per bowler is incorrect\");\n+\t\t}\n+\t\t\n+\t\tint sum = 0;\n+\t\tfor (int ball : ballsForEachBowler) {\n+\t\t\tsum += ball;\n+\t\t}\n+\t\t\n+\t\t// checking for total number of balls\n+\t\tif (sum != numberOfBalls) {\n+\t\t\tthrow new AssertionError (\"Number of balls and its sum is not equal\");\n+\t\t}\n+\t\t\n+\t\t// creating a map which for bowler and its number of balls ratio\n+\t\tMap<Integer, Integer> ballsPerBowler = new HashMap<Integer, Integer>();\n+\t\tint key = 0;\n+\t\tfor (int i = 0; i < numberOfBowlers; i++) {\n+\t\t\tballsPerBowler.put(++key, ballsForEachBowler[i]);\n+\t\t}\n+\t\t\n+\t\tint i = 0;\n+\t\t\n+\t\t// iterate through all balls\n+\t\twhile (numberOfBalls != 0) {\n+\t\t\t\n+\t\t\t// get maximum number of balls per bowler remaining\n+\t\t\tint maxBalls = Collections.max(ballsPerBowler.values());\n+\t\t\tfor (Map.Entry<Integer, Integer> entry : ballsPerBowler.entrySet()) {\n+\t\t\t\t\n+\t\t\t\t// if a bowler has left max balls\n+\t\t\t\tif (entry.getValue() == maxBalls) {\n+\t\t\t\t\tint bowlerIndex = entry.getKey();\n+\t\t\t\t\t\n+\t\t\t\t\t// set the order\n+\t\t\t\t\tarrangedOrderOfBowlers[i++] = bowlerIndex;\n+\t\t\t\t\t\n+\t\t\t\t\t// decrease remaining balls\n+\t\t\t\t\tballsPerBowler.put(bowlerIndex, --maxBalls);\n+\t\t\t\t\tnumberOfBalls--;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn arrangedOrderOfBowlers;\n+\t}\n+\t\n+}"
  },
  {
    "sha": "1ec2b8cfd64cb426aae95bea111a186ae1024b69",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/PriorityQueue.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/PriorityQueue.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/PriorityQueue.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/PriorityQueue.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,19 @@\n+package com.metacube.assignment.priorityQueue;\n+\n+/**\n+ * Queue interface for listing all features of queue\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public interface PriorityQueue {\n+\t\n+\tpublic void enqueue (Integer data, Integer priority);\n+\t\n+\tpublic Integer dequeue ();\n+\t\n+\tpublic Integer peek ();\n+\t\n+\tpublic boolean isEmpty ();\n+\t\n+\tpublic boolean isFull ();\n+}"
  },
  {
    "sha": "8e1cc13e29aaa4aab64eed096c866e045678c478",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/Queue.java",
    "status": "added",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/Queue.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/Queue.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/Queue.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,117 @@\n+package com.metacube.assignment.priorityQueue;\n+\n+/**\n+ * Implementation of queue\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class Queue implements PriorityQueue {\n+\n+\tpublic Task tasks[];\n+\tpublic Integer capacity;\n+\tpublic Integer size;\n+\t\n+\tpublic Queue (Integer capacity) {\n+\t\tthis.capacity = capacity;\n+\t\ttasks = new Task[this.capacity];\n+\t\tthis.size = 0;\n+\t}\n+\t\n+\tpublic Task[] getTasks () {\n+\t\treturn this.tasks;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean isEmpty () {\n+\t\treturn this.size == 0;\n+\t}\n+\t\n+\t/**\n+\t * Adding an element to queue\n+\t * @param data to be added to queue\n+\t * @param priority of task\n+\t */\n+\t@Override\n+\tpublic void enqueue(Integer data, Integer priority) {\n+\t\t// if queue is already full\n+\t\tif (isFull()) {\n+\t\t\tthrow new AssertionError(\"Queue is full\");\n+\t\t}\n+\t\t\n+\t\t// creating a new task\n+\t\tTask newJob = new Task(data, priority);\n+\t\t\n+\t\tboolean flag = false;\n+\t\t\n+\t\t// iterating through all items\n+\t\tfor (Integer loop = 0; loop < this.size; loop++) {\n+\t\t\t\n+\t\t\t// if passed task has higher priority than previous ones\n+\t\t\tif (this.tasks[loop].priority < priority) {\n+\t\t\t\tint move = size;\n+\t\t\t\t\n+\t\t\t\t// shift the task\n+\t\t\t\twhile (loop <= move) {\n+\t\t\t\t\tthis.tasks[move + 1] = this.tasks[move];\n+\t\t\t\t\tmove--;\n+\t\t\t\t}\n+\t\t\t\ttasks[loop] = newJob;\n+\t\t\t\tsize++;\n+\t\t\t\tflag = true;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t// adding a new job to job array\n+\t\tif (!flag) {\n+\t\t\ttasks[size++] = newJob;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Removing an element from queue\n+\t */\n+\t@Override\n+\tpublic Integer dequeue() {\n+\t\t\n+\t\t// checking if queue is empty or not\n+\t\tif (isEmpty()) {\n+\t\t\tthrow new AssertionError(\"Queue is empty\");\n+\t\t}\n+\t\t\n+\t\t// removing element\n+\t\tInteger data = tasks[0].job;\n+\t\t\n+\t\t// rearranging order of tasks\n+\t\tfor (Integer loop = 1; loop < size; loop++) {\n+\t\t\ttasks[loop - 1] = tasks[loop];\n+\t\t\tsize--;\n+\t\t}\n+\t\treturn data;\n+\t}\n+\n+\t/**\n+\t * Get peek (topmost) element of tasks array\n+\t */\n+\t@Override\n+\tpublic Integer peek() {\n+\t\t\n+\t\t// checking if queue is already empty\n+\t\tif (isEmpty()) {\n+\t\t\tthrow new AssertionError(\"Queue is empty\");\n+\t\t}\n+\t\t\n+\t\t// get that element\n+\t\tInteger data = tasks[0].job;\n+\t\treturn data;\n+\t}\n+\n+\t/**\n+\t * Checking if queue is empty or not\n+\t */\n+\t@Override\n+\tpublic boolean isFull() {\n+\t\treturn this.size == this.capacity;\n+\t}\n+\n+}"
  },
  {
    "sha": "a129b12d9b38f9ac772aac24abb49424dad21ecd",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/Task.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/Task.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/Task.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/priorityQueue/Task.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,17 @@\n+package com.metacube.assignment.priorityQueue;\n+\n+/**\n+ * Task class represents a task in memory with its priority\n+ * @author ameet.khemani_metacu\n+ */\n+public class Task {\n+\t\n+\tpublic Integer job;\n+\tpublic Integer priority;\n+\t\n+\tpublic Task (Integer job, Integer priority) {\n+\t\tthis.job = job;\n+\t\tthis.priority = priority;\n+\t}\n+\t\n+}"
  },
  {
    "sha": "4317bb728a59cb37ede6251e4c044a0b08f5f418",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/Command.java",
    "status": "added",
    "additions": 238,
    "deletions": 0,
    "changes": 238,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/Command.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/Command.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/Command.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,238 @@\n+package com.metacube.assignment.virtualCommandPrompt;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Scanner;\n+\n+/**\n+ * Command class represents that single command entered by user\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class Command {\n+\t\n+\tFolder currentFolder;\n+\tList<String> folders = new ArrayList<String>();\n+\t\n+\tpublic Command () {\n+\t\tthis.currentFolder = new Folder(\"M\");\n+\t}\n+\t\n+\t/**\n+\t * Used to show the virutal command prompt\n+\t */\n+\tpublic void commandPrompt () {\n+\t\t\n+\t\tString commands;\n+\t\t\n+\t\t@SuppressWarnings(\"resource\")\n+\t\tScanner input = new Scanner(System.in);\n+\t\t\n+\t\twhile (true) {\n+\t\t\t\n+\t\t\t// show default path\n+\t\t\tshowPath ();\n+\t\t\t\n+\t\t\t// get command from user\n+\t\t\tcommands = input.nextLine();\n+\t\t\t\n+\t\t\tString commandArray[] = commands.split(\" \");\n+\t\t\tInteger commLength = commandArray.length;\n+\t\t\t\n+\t\t\tif (commLength == 2) {\n+\t\t\t\tswitch (commandArray[0]) {\n+\t\t\t\t\tcase \"mkdir\":\n+\t\t\t\t\t\tif (mkdir(commandArray[1])) {\n+\t\t\t\t\t\t\tSystem.out.println(\"New folder created\");\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tSystem.out.println(\"Folder already exists\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"cd\":\n+\t\t\t\t\t\tif (!(cd(commandArray[1]))) {\n+\t\t\t\t\t\t\tSystem.out.println(\"Folder does not exists\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"find\":\n+\t\t\t\t\t\tString path = find (commandArray[1]);\n+\t\t\t\t\t\tSystem.out.println(path);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tSystem.out.println(\"No command found\");\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (commLength == 1) {\n+\t\t\t\tswitch (commandArray[0]) {\n+\t\t\t\t\tcase \"bk\":\n+\t\t\t\t\t\tif (!bk()) {\n+\t\t\t\t\t\t\tSystem.out.println(\"This is root directory\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"ls\":\n+\t\t\t\t\t\tls();\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"tree\":\n+\t\t\t\t\t\ttree();\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"exit\":\n+\t\t\t\t\t\tSystem.exit(0);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tSystem.out.println(\"Command not found\");\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Creating new directory/folder\n+\t * @param folderName name of directory/folder to be created\n+\t * @return true if successfully created else false\n+\t */\n+\tpublic boolean mkdir (String folderName) {\n+\t\t\n+\t\t// checking if folder is already present\n+\t\tif (findFolder (folderName)) {\n+\t\t\tFolder newFolder = new Folder (folderName);\n+\t\t\tnewFolder.setParent(this.currentFolder);\n+\t\t\tthis.currentFolder.subfolder.add(newFolder);\n+\t\t\treturn true;\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\t\n+\t\n+\t/**\n+\t * Used to find the folder \n+\t * @param folderName name of folder to find\n+\t * @return true if found else false\n+\t */\n+\tpublic boolean findFolder (String folderName) {\n+\t\tList<Folder> subfolders = this.currentFolder.getSubfolder();\n+\t\tfor (Folder currentFolder : subfolders) {\n+\t\t\tif (currentFolder.getFolderName().equals(folderName)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * Change the directory\n+\t * @param folderName\n+\t * @return\n+\t */\n+\tprivate boolean cd (String folderName) {\n+\t\tif (!findFolder(folderName)) {\n+\t\t\tList<Folder> subfolders = this.currentFolder.getSubfolder();\n+\t\t\tfor (Folder currentFolders : subfolders) {\n+\t\t\t\tif (currentFolders.getFolderName().equals(folderName)) {\n+\t\t\t\t\tthis.currentFolder = currentFolders;\n+\t\t\t\t\tfolders.add(this.currentFolder.getFolderName());\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n+\t/**\n+\t * Go back to parent directory\n+\t * @return true\n+\t */\n+\tprivate boolean bk () {\n+\t\tFolder parent = this.currentFolder.getParent();\n+\t\tif (parent == null)\n+\t\t\treturn false;\n+\t\tthis.currentFolder = parent;\n+\t\tthis.folders.remove(this.folders.size() - 1);\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * List of all files\n+\t * @return true\n+\t */\n+\tprivate boolean ls () {\n+\t\tList<Folder> subFolders = this.currentFolder.getSubfolder();\n+\t\tfor (Folder folder : subFolders) {\n+\t\t\tSystem.out.println(folder.getFolderName() + \" \" + folder.getDatetime());\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * Serach for given folder\n+\t * @param folderName\n+\t * @return\n+\t */\n+\tprivate String find (String folderName) {\n+\t\treturn search (this.currentFolder, folderName);\n+\t}\n+\t\n+\t/**\n+\t * Search the folder\n+\t * @param folder\n+\t * @param folderName\n+\t * @return\n+\t */\n+\tprivate String search (Folder folder, String folderName) {\n+\t\tif (folder.getFolderName().equals(folderName)) {\n+\t\t\treturn folderName;\n+\t\t}\n+\t\tif (folder.getSubfolder().size() < 1) {\n+\t\t\treturn \"\";\n+\t\t}\n+\t\tString path = \"\";\n+\t\tfor (Folder subfold : folder.getSubfolder()) {\n+\t\t\tpath = \"\";\n+\t\t\tpath = path + folder.getFolderName() + \"/\" + search(subfold, folderName);\n+\t\t}\n+\t\treturn path;\n+\t}\n+\t\n+\t/**\n+\t * Show the tree structure\n+\t */\n+\tpublic void tree () {\n+\t\ttreeView (this.currentFolder, 0);\n+\t}\n+\t\n+\t/**\n+\t * Show the tree view of all folder\n+\t * @param folder\n+\t * @param nesting\n+\t */\n+\tpublic void treeView (Folder folder, Integer nesting) {\n+\t\tfor (Folder subDirectory : folder.getSubfolder()) {\n+\t\t\tfor (int i = 0; i < nesting; i++) {\n+\t\t\t\tSystem.out.println(\"\\u2502\");\n+\t\t\t}\n+\t\t\tif (subDirectory.getSubfolder().size() != 0) {\n+\t\t\t\tSystem.out.println(\"\\u251c\\u2500\" + subDirectory.getFolderName());\n+\t\t\t\ttreeView(subDirectory, nesting + 1);\n+\t\t\t} else {\n+\t\t\t\tSystem.out.println(\"\\u2514\\u2500\" + subDirectory.getFolderName());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Used to show the paths of folders\n+\t */\n+\tpublic void showPath () {\n+\t\t\n+\t\t// default folder\n+\t\tSystem.out.println(\"M:\");\n+\t\t\n+\t\t// iterate through folders and print their names\n+\t\tfor (String folderName : this.folders) {\n+\t\t\tSystem.out.println(\"\\\\\" + folderName);\n+\t\t}\n+\t\tSystem.out.println(\">\");\n+\t}\n+\t\n+}"
  },
  {
    "sha": "7c2a721e323d37f8491c117a871fa10fc8f62acf",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/Folder.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/Folder.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/Folder.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/Folder.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,66 @@\n+package com.metacube.assignment.virtualCommandPrompt;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Folder class maintains the order of folders in command prompt\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class Folder {\n+\t\n+\t// name of the folder\n+\tString folderName;\n+\t\n+\t// list of subfolders\n+\tList<Folder> subfolder;\n+\t\n+\t// parent folder\n+\tFolder parent;\n+\t\n+\t// date of folder\n+\tDate datetime;\n+\t\n+\tpublic Folder (String folderName) {\n+\t\tthis.folderName = folderName;\n+\t\tthis.datetime = Calendar.getInstance().getTime();\n+\t\tthis.parent = null;\n+\t\tthis.subfolder = new LinkedList<Folder>();\n+\t}\n+\n+\tpublic String getFolderName() {\n+\t\treturn folderName;\n+\t}\n+\n+\tpublic void setFolderName(String folderName) {\n+\t\tthis.folderName = folderName;\n+\t}\n+\n+\tpublic List<Folder> getSubfolder() {\n+\t\treturn subfolder;\n+\t}\n+\n+\tpublic void setSubfolder(List<Folder> subfolder) {\n+\t\tthis.subfolder = subfolder;\n+\t}\n+\n+\tpublic Folder getParent() {\n+\t\treturn parent;\n+\t}\n+\n+\tpublic void setParent(Folder parent) {\n+\t\tthis.parent = parent;\n+\t}\n+\n+\tpublic String getDatetime() {\n+\t\tDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n+\t\tString dateAndTime = dateFormat.format(this.datetime);\n+\t\treturn dateAndTime;\n+\t}\n+\t\n+}"
  },
  {
    "sha": "1cb46c2b61c450a7d383c6fbc88cfe48e888ea9b",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/VirtualCommandPrompt.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/VirtualCommandPrompt.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/VirtualCommandPrompt.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/assignment/virtualCommandPrompt/VirtualCommandPrompt.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,17 @@\n+package com.metacube.assignment.virtualCommandPrompt;\n+\n+/**\n+ * Virual command prompt class\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class VirtualCommandPrompt {\n+\n+\tpublic static void main(String[] args) {\n+\t\t\n+\t\tCommand c = new Command();\n+\t\tc.commandPrompt();\n+\t\t\n+\t}\n+\n+}"
  },
  {
    "sha": "2fd752cb67d3ca644ffce629fee81f0c41187266",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/test/MatchStrategyTest.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/test/MatchStrategyTest.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/test/MatchStrategyTest.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/test/MatchStrategyTest.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,28 @@\n+package com.metacube.test;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+import com.metacube.assignment.cricket.MatchStrategy;\n+\n+/**\n+ * test class for strategy testing\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class MatchStrategyTest {\n+\n+\t// finding order of balls to be bowled by baller\n+\t@Test\n+\tpublic void findOrderOfBowlersTest () throws Exception {\n+\t\tassertArrayEquals(new int[] {1, 1, 2, 1, 2}, MatchStrategy.findOrderOfBowlers(5, 2, new int[] {3, 2}));\n+\t\tassertArrayEquals(new int[] {2, 2, 1, 2, 3}, MatchStrategy.findOrderOfBowlers(5, 3, new int[] {1, 3, 1}));\n+\t\tassertArrayEquals(new int[] {2, 2, 1, 2, 1, 2, 3}, MatchStrategy.findOrderOfBowlers(7, 3, new int[] {2, 4, 1}));\n+\t\tassertArrayEquals(new int[] {1, 3, 1, 2, 3, 1, 2, 3, 4}, MatchStrategy.findOrderOfBowlers(9, 4, new int[] {3, 2, 3, 1}));\n+\t\tassertArrayEquals(new int[] {2, 2, 3, 7, 1, 2, 3, 4, 5, 6, 7}, MatchStrategy.findOrderOfBowlers(11, 7, new int[] {1, 3, 2, 1, 1, 1, 2}));\n+\t\tassertArrayEquals(new int[] {2, 1, 2, 1, 2}, MatchStrategy.findOrderOfBowlers(5, 2, new int[] {2, 3}));\n+\t\tassertArrayEquals(new int[] {1, 1, 3, 1, 3, 1, 2, 3}, MatchStrategy.findOrderOfBowlers(8, 3, new int[] {4, 1, 3}));\n+\t}\n+\n+}"
  },
  {
    "sha": "bce80f8e89081e999c3a2bbf6ec433c8fae50cf1",
    "filename": "Assignment12-DSA-TreesGraphs/src/com/metacube/test/PriorityQueue.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/test/PriorityQueue.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/daf7bbf7c8b0e17ef2082972c5ca40474d045fce/Assignment12-DSA-TreesGraphs/src/com/metacube/test/PriorityQueue.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment12-DSA-TreesGraphs/src/com/metacube/test/PriorityQueue.java?ref=daf7bbf7c8b0e17ef2082972c5ca40474d045fce",
    "patch": "@@ -0,0 +1,42 @@\n+package com.metacube.test;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+import com.metacube.assignment.priorityQueue.Queue;\n+import com.metacube.assignment.priorityQueue.Task;\n+\n+/**\n+ * Test class for testing functionality of queue\n+ * @author ameet.khemani_metacu\n+ *\n+ */\n+public class PriorityQueue {\n+\n+\t// test case for adding an element to queue\n+\t@Test\n+\tpublic void testEnqueue() {\n+\t\tQueue queue = new Queue(5);\n+\t\tqueue.enqueue(1, 2);\n+\t\tqueue.enqueue(1, 3);\n+\t\tqueue.enqueue(1, 4);\n+\t\tqueue.enqueue(1, 6);\n+\t\tTask tasks[] = queue.getTasks();\n+\t\tInteger array[] = new Integer[]{6, 4, 3, 2};\n+\t\tfor (int loop = 0; loop < 4; loop++) {\n+\t\t\tassertEquals(array[loop], tasks[loop].priority);\n+\t\t}\n+\t}\n+\t\n+\t// test case for removing an element from queue\n+\t@Test\n+\tpublic void testDequeue() {\n+\t\tQueue queue = new Queue(5);\n+\t\tqueue.enqueue(1, 2);\n+\t\tqueue.enqueue(2, 3);\n+\t\tqueue.enqueue(3, 4);\n+\t\tassertEquals((Integer)3, queue.dequeue());\n+\t}\n+\n+}"
  }
]
