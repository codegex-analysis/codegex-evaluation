[
  {
    "sha": "fceb4801b5ffa0e4a68c2b00441e45bf2eefdbed",
    "filename": "Assignment3a-InSet/.classpath",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/.classpath",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/.classpath",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/.classpath?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"src\"/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8\"/>\n+\t<classpathentry kind=\"output\" path=\"bin\"/>\n+</classpath>"
  },
  {
    "sha": "219e3bcec6f01b72cdaeb5ed4d3a675f15d86cfe",
    "filename": "Assignment3a-InSet/.project",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/.project",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/.project",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/.project?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30",
    "patch": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<projectDescription>\n+\t<name>Assignment3a-InSet</name>\n+\t<comment></comment>\n+\t<projects>\n+\t</projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n+\t\t\t<arguments>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t</buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n+\t</natures>\n+</projectDescription>"
  },
  {
    "sha": "3a21537071bf4118b9e1ee864cb4bc258aa48211",
    "filename": "Assignment3a-InSet/.settings/org.eclipse.jdt.core.prefs",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/.settings/org.eclipse.jdt.core.prefs",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/.settings/org.eclipse.jdt.core.prefs",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/.settings/org.eclipse.jdt.core.prefs?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30",
    "patch": "@@ -0,0 +1,11 @@\n+eclipse.preferences.version=1\n+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve\n+org.eclipse.jdt.core.compiler.compliance=1.8\n+org.eclipse.jdt.core.compiler.debug.lineNumber=generate\n+org.eclipse.jdt.core.compiler.debug.localVariable=generate\n+org.eclipse.jdt.core.compiler.debug.sourceFile=generate\n+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error\n+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error\n+org.eclipse.jdt.core.compiler.source=1.8"
  },
  {
    "sha": "eb8937e37b6d127be1913b2ec7a7721d03a4512c",
    "filename": "Assignment3a-InSet/bin/com/metacube/CheckInSet.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/bin/com/metacube/CheckInSet.class",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/bin/com/metacube/CheckInSet.class",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/bin/com/metacube/CheckInSet.class?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30"
  },
  {
    "sha": "217080de6976a3970d046230c6272d40209e68b2",
    "filename": "Assignment3a-InSet/bin/com/metacube/InSet.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/bin/com/metacube/InSet.class",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/bin/com/metacube/InSet.class",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/bin/com/metacube/InSet.class?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30"
  },
  {
    "sha": "0adc8ca66ba446cff14dda216b37672a0594d4e0",
    "filename": "Assignment3a-InSet/bin/com/metacube/Set.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/bin/com/metacube/Set.class",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/bin/com/metacube/Set.class",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/bin/com/metacube/Set.class?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30"
  },
  {
    "sha": "3279da97dfc68dc66dba7d02625ec5dd5a706f0c",
    "filename": "Assignment3a-InSet/src/com/metacube/CheckInSet.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/src/com/metacube/CheckInSet.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/src/com/metacube/CheckInSet.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/src/com/metacube/CheckInSet.java?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30",
    "patch": "@@ -0,0 +1,20 @@\n+package com.metacube;\n+\n+public class CheckInSet {\n+\n+\tpublic static void main(String[] args) {\n+\t\t\n+\t\tInSet insetFirstObject = new InSet(new Integer[]{1, 2, 3, 4, 5});\n+\t\tInSet.sortSet(insetFirstObject.set);\n+\t\tInSet insetSecondObject = new InSet(new Integer[]{5, 3, 1});\n+\t\tinsetFirstObject.union(insetFirstObject, insetSecondObject);\n+\t\t\n+//\t\tSystem.out.println(\"Is member : \" + insetFirstObject.isMember(4));\n+//\t\tSystem.out.println(\"Size : \" + insetFirstObject.size());\n+\t\tSystem.out.println(\"Subset : \" + insetFirstObject.isSubSet(insetSecondObject));\n+//\t\tSystem.out.println(\"Compliment : \" + insetFirstObject.getCompliment());\n+//\t\tSystem.out.println(\"Union : \" + insetFirstObject.union(insetFirstObject, insetSecondObject));\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "3c8cba653b5c9403af71558b64624c04b2bddc1a",
    "filename": "Assignment3a-InSet/src/com/metacube/InSet.java",
    "status": "added",
    "additions": 227,
    "deletions": 0,
    "changes": 227,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/src/com/metacube/InSet.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/src/com/metacube/InSet.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/src/com/metacube/InSet.java?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30",
    "patch": "@@ -0,0 +1,227 @@\n+package com.metacube;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public final class InSet implements Set {\n+\t\n+\tprivate final int UPPER_LIMIT = 1000;\n+\tprivate final int LOWER_LIMIT = 1;\n+\tpublic final Integer[] set;\n+\t\n+\tpublic InSet(Integer[] set) {\n+\t\tthis.set = set;\n+\t}\n+\t\n+\t/**\n+\t * creates a new set from passed array values\n+\t * @param input as values to be set\n+\t * @return an array of Inset values\n+\t */\n+\tprivate Integer[] createNewSet(int[] input) {\n+\t\tList<Integer> list = new ArrayList<>();\n+\t\tInteger set[];\n+\t\tfor (int loopCounter = 0; loopCounter < input.length; loopCounter++) {\n+\t\t\tif (input[loopCounter] >= LOWER_LIMIT && input[loopCounter] <= UPPER_LIMIT) {\n+\t\t\t\tif (!list.contains(input[loopCounter])) {\n+\t\t\t\t\tlist.add(input[loopCounter]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tset = new Integer[list.size()];\n+\t\treturn list.toArray(set);\n+\t}\n+\n+\t/**\n+\t * check whether the passed value is member of set or not\n+\t * @param value to be checked in set\n+\t * @return true if present else false\n+\t */\n+\t@Override\n+\tpublic boolean isMember(int value) {\n+\t\tif (value < LOWER_LIMIT || value > UPPER_LIMIT) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tfor (int loopCounter = 0; loopCounter < this.set.length; loopCounter++) {\n+\t\t\tif (value == set[loopCounter]) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * get the size of set\n+\t * @return size of set\n+\t */\n+\t@Override\n+\tpublic int size() {\n+\t\treturn this.set.length;\n+\t}\n+\t\n+\t/**\n+\t * checks whether the passed set in subset or not\n+\t * @param subSet to be checked in set\n+\t * @return true if subset else false\n+\t */\n+\tpublic boolean isSubSet(InSet subSet){\n+\t\t// iterate completely on passed subset\n+\t\tfor (int subSetCounter = 0; subSetCounter < subSet.set.length; subSetCounter++) {\n+\t\t\tboolean isItemPresent = false;\n+\t\t\t\n+\t\t\t// iterate completely on original set\n+\t\t\tfor (int completeSetCounter = 0; completeSetCounter < this.set.length; completeSetCounter++) {\n+\t\t\t\tif (this.set[completeSetCounter] == subSet.set[subSetCounter]) {\n+\t\t\t\t\t\n+\t\t\t\t\t//if item is matched anywhere, no need to check further\n+\t\t\t\t\tisItemPresent = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\t// if any single element is not found of on complete single iteration, return false\n+\t\t\tif (!isItemPresent) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * sorts the given array\n+\t * @param set\n+\t */\n+\tpublic static void sortSet(Integer set[]) {\n+\t\tfor (int outerLoop = 0; outerLoop < set.length; outerLoop++) {\n+\t\t\tfor (int innerLoop = 1; innerLoop < (set.length - outerLoop); innerLoop++) {\n+\t\t\t\tif (set[innerLoop - 1] > set[innerLoop]) {\n+\t\t\t\t\tint item = set[innerLoop - 1];\n+\t\t\t\t\tset[innerLoop - 1] = set[innerLoop];\n+\t\t\t\t\tset[innerLoop] = item;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * gives the compliment out of 1 - 1000 range\n+\t * @return gives Inset object as compliment\n+\t */\n+\t@Override\n+\tpublic InSet getCompliment() {\n+\t\tInteger compliment[] = new Integer[UPPER_LIMIT - this.set.length];\n+\t\tint currentSetIndex = 0, complimentIndex = 0;\n+\t\tfor (int loopCounter = LOWER_LIMIT; loopCounter <= UPPER_LIMIT && loopCounter < compliment.length; loopCounter++) {\n+\t\t\tif (currentSetIndex < this.set.length) {\n+\t\t\t\tif (this.set[currentSetIndex] != loopCounter) {\n+\t\t\t\t\tcompliment[complimentIndex++] = loopCounter;\n+\t\t\t\t} else {\n+\t\t\t\t\tcurrentSetIndex++;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tcompliment[complimentIndex++] = loopCounter;\n+\t\t\t}\n+\t\t}\n+\t\treturn new InSet(compliment);\n+\t}\n+\t\n+\t/**\n+\t * gives union of 2 passed sets\n+\t * @param firstSet as set 1\n+\t * @param secondSet as set 2\n+\t * @return single Inset object as union of passed sets\n+\t */\n+\t@Override\n+\tpublic InSet union(InSet firstSet, InSet secondSet) {\n+\t\tsortSet(firstSet.set);\n+\t\tsortSet(secondSet.set);\n+\t\tInteger union[] = new Integer[UPPER_LIMIT];\n+\t\tint firstSetIndex = 0, secondSetIndex = 0, unionIndex = 0;\n+\t\twhile (firstSetIndex < firstSet.set.length && secondSetIndex < secondSet.set.length) {\n+\t\t\tif (firstSet.set[firstSetIndex] < secondSet.set[secondSetIndex]) {\n+\t\t\t\tunion[unionIndex] = firstSet.set[firstSetIndex];\n+\t\t\t\tfirstSetIndex++;\n+\t\t\t\tunionIndex++;\n+\t\t\t} else {\n+\t\t\t\tunion[unionIndex] = secondSet.set[secondSetIndex];\n+\t\t\t\tsecondSetIndex++;\n+\t\t\t\tunionIndex++;\n+\t\t\t}\n+\t\t}\n+\t\twhile (firstSetIndex < firstSet.set.length) {\n+\t\t\tunion[unionIndex] = firstSet.set[firstSetIndex];\n+\t\t\tfirstSetIndex++;\n+\t\t\tunionIndex++;\n+\t\t}\n+\t\twhile (secondSetIndex < secondSet.set.length) {\n+\t\t\tunion[unionIndex] = secondSet.set[secondSetIndex];\n+\t\t\tsecondSetIndex++;\n+\t\t\tunionIndex++;\n+\t\t}\n+\t\treturn new InSet(union);\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"InSet : \" + Arrays.toString(set);\n+\t}\n+\t\n+//\t/**\n+//\t * checks whether the passed set in subset or not\n+//\t * @param subSet to be checked in set\n+//\t * @return true if subset else false\n+//\t */\n+//\t@Override\n+//\tpublic boolean isSubSet(InSet subSet) {\n+//\t\tList<Integer> original = new ArrayList<Integer>(Arrays.asList(this.set));\n+//\t\tList<Integer> newSubSet = new ArrayList<Integer>(Arrays.asList(subSet.set));\n+//\t\tif (original.containsAll(newSubSet)) {\n+//\t\t\treturn true;\n+//\t\t}\n+//\t\treturn false;\n+//\t}\n+\t\n+//\t/**\n+//\t * gives the compliment out of 1 - 1000 range\n+//\t * @return gives Inset object as compliment\n+//\t */\n+//\t@Override\n+//\tpublic InSet getCompliment() {\n+//\t\tList<Integer> setList = new ArrayList<Integer>(Arrays.asList(this.set));\n+//\t\tList<Integer> complimentList = new ArrayList<>();\n+//\t\tInteger newSet[];\n+//\t\tfor (int loopCounter = LOWER_LIMIT; loopCounter <= UPPER_LIMIT; loopCounter++) {\n+//\t\t\tif (!setList.contains(loopCounter)) {\n+//\t\t\t\tcomplimentList.add(loopCounter);\n+//\t\t\t}\n+//\t\t}\n+//\t\tObject tempObjectArray[] = complimentList.toArray();\n+//\t\tnewSet = Arrays.copyOf(tempObjectArray, tempObjectArray.length, Integer[].class);\n+//\t\treturn new InSet(newSet);\n+//\t}\n+\n+//\t/**\n+//\t * gives union of 2 passed sets\n+//\t * @param firstSet as set 1\n+//\t * @param secondSet as set 2\n+//\t * @return single Inset object as union of passed sets\n+//\t */\n+//\t@Override\n+//\tpublic InSet union(InSet firstSet, InSet secondSet) {\n+//\t\tList<Integer> firstSetList = new ArrayList<Integer>(Arrays.asList(firstSet.set));\n+//\t\tList<Integer> secondSetList = new ArrayList<Integer>(Arrays.asList(secondSet.set));\n+//\t\tList<Integer> unionSetList = new ArrayList<>();\n+//\t\tunionSetList.addAll(firstSetList);\n+//\t\tfor (int loopCounter = 0; loopCounter < secondSet.size(); loopCounter++) {\n+//\t\t\tif (!unionSetList.contains(secondSetList.get(loopCounter))) {\n+//\t\t\t\tunionSetList.add(secondSetList.get(loopCounter));\n+//\t\t\t}\n+//\t\t}\n+//\t\tObject tempObjectArray[] = unionSetList.toArray();\n+//\t\tInteger tempIntegerArr[] = Arrays.copyOf(tempObjectArray, tempObjectArray.length, Integer[].class);\n+//\t\treturn new InSet(tempIntegerArr);\n+//\t}\n+\t\n+}"
  },
  {
    "sha": "aefb47892c25b11327b269a3e2928ce75dd88933",
    "filename": "Assignment3a-InSet/src/com/metacube/Set.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/src/com/metacube/Set.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/fb2c2a40cba90580ee159f9a7b8d8640878b7b30/Assignment3a-InSet/src/com/metacube/Set.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/Assignment3a-InSet/src/com/metacube/Set.java?ref=fb2c2a40cba90580ee159f9a7b8d8640878b7b30",
    "previous_filename": "src/com/metacube/Set.java"
  },
  {
    "sha": "5f719340801dc9ff8eb1f41547a55487272e1b7e",
    "filename": "src/com/metacube/CheckInSet.java",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/2166806539d2c727e404537eecc75f638a6ff8e9/src/com/metacube/CheckInSet.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/2166806539d2c727e404537eecc75f638a6ff8e9/src/com/metacube/CheckInSet.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/src/com/metacube/CheckInSet.java?ref=2166806539d2c727e404537eecc75f638a6ff8e9",
    "patch": "@@ -1,18 +0,0 @@\n-package com.metacube;\n-\n-public class CheckInSet {\n-\n-\tpublic static void main(String[] args) {\n-\t\t\n-\t\tInSet insetFirstObject = new InSet(new Integer[]{3, 4, 5});\n-\t\tInSet insetSecondObject = new InSet(new Integer[]{5, 6, 7});\n-\t\t\n-\t\tSystem.out.println(\"Is member : \" + insetFirstObject.isMember(4));\n-\t\tSystem.out.println(\"Size : \" + insetFirstObject.size());\n-\t\tSystem.out.println(\"Size : \" + insetFirstObject.isSubSet(insetSecondObject));\n-\t\tSystem.out.println(\"Compliment : \" + insetFirstObject.getCompliment());\n-\t\tSystem.out.println(\"Union : \" + insetFirstObject.union(insetFirstObject, insetSecondObject));\n-\n-\t}\n-\n-}"
  },
  {
    "sha": "bbd93b537a4aba16a2b0d95796f7535e42bc4f08",
    "filename": "src/com/metacube/InSet.java",
    "status": "removed",
    "additions": 0,
    "deletions": 124,
    "changes": 124,
    "blob_url": "https://github.com/meta-ameet-khemani/GET2021/blob/2166806539d2c727e404537eecc75f638a6ff8e9/src/com/metacube/InSet.java",
    "raw_url": "https://github.com/meta-ameet-khemani/GET2021/raw/2166806539d2c727e404537eecc75f638a6ff8e9/src/com/metacube/InSet.java",
    "contents_url": "https://api.github.com/repos/meta-ameet-khemani/GET2021/contents/src/com/metacube/InSet.java?ref=2166806539d2c727e404537eecc75f638a6ff8e9",
    "patch": "@@ -1,124 +0,0 @@\n-package com.metacube;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-public final class InSet implements Set {\n-\t\n-\tprivate final int UPPER_LIMIT = 1000;\n-\tprivate final int LOWER_LIMIT = 1;\n-\tpublic final Integer[] set;\n-\t\n-\tpublic InSet(Integer[] set) {\n-\t\tthis.set = set;\n-\t}\n-\t\n-\t/**\n-\t * creates a new set from passed array values\n-\t * @param input as values to be set\n-\t * @return an array of Inset values\n-\t */\n-\tprivate Integer[] createNewSet(int[] input) {\n-\t\tList<Integer> list = new ArrayList<>();\n-\t\tInteger set[];\n-\t\tfor (int loopCounter = 0; loopCounter < input.length; loopCounter++) {\n-\t\t\tif (input[loopCounter] >= LOWER_LIMIT && input[loopCounter] <= UPPER_LIMIT) {\n-\t\t\t\tif (!list.contains(input[loopCounter])) {\n-\t\t\t\t\tlist.add(input[loopCounter]);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tset = new Integer[list.size()];\n-\t\treturn list.toArray(set);\n-\t}\n-\n-\t/**\n-\t * check whether the passed value is member of set or not\n-\t * @param value to be checked in set\n-\t * @return true if present else false\n-\t */\n-\t@Override\n-\tpublic boolean isMember(int value) {\n-\t\tif (value < LOWER_LIMIT || value > UPPER_LIMIT) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tfor (int loopCounter = 0; loopCounter < this.set.length; loopCounter++) {\n-\t\t\tif (value == set[loopCounter]) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * get the size of set\n-\t * @return size of set\n-\t */\n-\t@Override\n-\tpublic int size() {\n-\t\treturn this.set.length;\n-\t}\n-\n-\t/**\n-\t * checks whether the passed set in subset or not\n-\t * @param subSet to be checked in set\n-\t * @return true if subset else false\n-\t */\n-\t@Override\n-\tpublic boolean isSubSet(InSet subSet) {\n-\t\tList<Integer> original = new ArrayList<Integer>(Arrays.asList(this.set));\n-\t\tList<Integer> newSubSet = new ArrayList<Integer>(Arrays.asList(subSet.set));\n-\t\tif (original.containsAll(newSubSet)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * gives the compliment out of 1 - 1000 range\n-\t * @return gives Inset object as compliment\n-\t */\n-\t@Override\n-\tpublic InSet getCompliment() {\n-\t\tList<Integer> setList = new ArrayList<Integer>(Arrays.asList(this.set));\n-\t\tList<Integer> complimentList = new ArrayList<>();\n-\t\tInteger newSet[];\n-\t\tfor (int loopCounter = LOWER_LIMIT; loopCounter <= UPPER_LIMIT; loopCounter++) {\n-\t\t\tif (!setList.contains(loopCounter)) {\n-\t\t\t\tcomplimentList.add(loopCounter);\n-\t\t\t}\n-\t\t}\n-\t\tObject tempObjectArray[] = complimentList.toArray();\n-\t\tnewSet = Arrays.copyOf(tempObjectArray, tempObjectArray.length, Integer[].class);\n-\t\treturn new InSet(newSet);\n-\t}\n-\n-\t/**\n-\t * gives union of 2 passed sets\n-\t * @param firstSet as set 1\n-\t * @param secondSet as set 2\n-\t * @return single Inset object as union of passed sets\n-\t */\n-\t@Override\n-\tpublic InSet union(InSet firstSet, InSet secondSet) {\n-\t\tList<Integer> firstSetList = new ArrayList<Integer>(Arrays.asList(firstSet.set));\n-\t\tList<Integer> secondSetList = new ArrayList<Integer>(Arrays.asList(secondSet.set));\n-\t\tList<Integer> unionSetList = new ArrayList<>();\n-\t\tunionSetList.addAll(firstSetList);\n-\t\tfor (int loopCounter = 0; loopCounter < secondSet.size(); loopCounter++) {\n-\t\t\tif (!unionSetList.contains(secondSetList.get(loopCounter))) {\n-\t\t\t\tunionSetList.add(secondSetList.get(loopCounter));\n-\t\t\t}\n-\t\t}\n-\t\tObject tempObjectArray[] = unionSetList.toArray();\n-\t\tInteger tempIntegerArr[] = Arrays.copyOf(tempObjectArray, tempObjectArray.length, Integer[].class);\n-\t\treturn new InSet(tempIntegerArr);\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"InSet : \" + Arrays.toString(set);\n-\t}\n-\t\n-}"
  }
]
