[
  {
    "sha": "290792a4b090d1c926575cbd691b1cecb7014fed",
    "filename": ".gitignore:Zone.Identifier",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/290819853c03e72de7c0f58339806ac16603429a/.gitignore:Zone.Identifier",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/290819853c03e72de7c0f58339806ac16603429a/.gitignore:Zone.Identifier",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/.gitignore:Zone.Identifier?ref=290819853c03e72de7c0f58339806ac16603429a",
    "patch": "@@ -1,3 +0,0 @@\n-[ZoneTransfer]\r\n-ZoneId=3\r\n-ReferrerUrl=C:\\Users\\rafae\\Downloads\\exemploddd.zip\r"
  },
  {
    "sha": "290792a4b090d1c926575cbd691b1cecb7014fed",
    "filename": ".mvn/wrapper/MavenWrapperDownloader.java:Zone.Identifier",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/290819853c03e72de7c0f58339806ac16603429a/.mvn/wrapper/MavenWrapperDownloader.java:Zone.Identifier",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/290819853c03e72de7c0f58339806ac16603429a/.mvn/wrapper/MavenWrapperDownloader.java:Zone.Identifier",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/.mvn/wrapper/MavenWrapperDownloader.java:Zone.Identifier?ref=290819853c03e72de7c0f58339806ac16603429a",
    "patch": "@@ -1,3 +0,0 @@\n-[ZoneTransfer]\r\n-ZoneId=3\r\n-ReferrerUrl=C:\\Users\\rafae\\Downloads\\exemploddd.zip\r"
  },
  {
    "sha": "290792a4b090d1c926575cbd691b1cecb7014fed",
    "filename": ".mvn/wrapper/maven-wrapper.jar:Zone.Identifier",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/290819853c03e72de7c0f58339806ac16603429a/.mvn/wrapper/maven-wrapper.jar:Zone.Identifier",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/290819853c03e72de7c0f58339806ac16603429a/.mvn/wrapper/maven-wrapper.jar:Zone.Identifier",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/.mvn/wrapper/maven-wrapper.jar:Zone.Identifier?ref=290819853c03e72de7c0f58339806ac16603429a",
    "patch": "@@ -1,3 +0,0 @@\n-[ZoneTransfer]\r\n-ZoneId=3\r\n-ReferrerUrl=C:\\Users\\rafae\\Downloads\\exemploddd.zip\r"
  },
  {
    "sha": "290792a4b090d1c926575cbd691b1cecb7014fed",
    "filename": ".mvn/wrapper/maven-wrapper.properties:Zone.Identifier",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/290819853c03e72de7c0f58339806ac16603429a/.mvn/wrapper/maven-wrapper.properties:Zone.Identifier",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/290819853c03e72de7c0f58339806ac16603429a/.mvn/wrapper/maven-wrapper.properties:Zone.Identifier",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/.mvn/wrapper/maven-wrapper.properties:Zone.Identifier?ref=290819853c03e72de7c0f58339806ac16603429a",
    "patch": "@@ -1,3 +0,0 @@\n-[ZoneTransfer]\r\n-ZoneId=3\r\n-ReferrerUrl=C:\\Users\\rafae\\Downloads\\exemploddd.zip\r"
  },
  {
    "sha": "22b1628972da33765bbbe810a71da7d9a9d9e9c0",
    "filename": "Dockerfile",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/Dockerfile",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/Dockerfile",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/Dockerfile?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,5 @@\n+FROM adoptopenjdk/openjdk11:latest\n+\n+COPY target/exemploddd-*.jar app.jar\n+\n+CMD [\"java\", \"-jar\" ,\"./app.jar\"]\n\\ No newline at end of file"
  },
  {
    "sha": "290792a4b090d1c926575cbd691b1cecb7014fed",
    "filename": "HELP.md:Zone.Identifier",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/290819853c03e72de7c0f58339806ac16603429a/HELP.md:Zone.Identifier",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/290819853c03e72de7c0f58339806ac16603429a/HELP.md:Zone.Identifier",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/HELP.md:Zone.Identifier?ref=290819853c03e72de7c0f58339806ac16603429a",
    "patch": "@@ -1,3 +0,0 @@\n-[ZoneTransfer]\r\n-ZoneId=3\r\n-ReferrerUrl=C:\\Users\\rafae\\Downloads\\exemploddd.zip\r"
  },
  {
    "sha": "a10e1da444e186e589a817ba38e9823d2d85ccd4",
    "filename": "docker-compose.yml",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/docker-compose.yml",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/docker-compose.yml?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,33 @@\n+version: '3'\n+services:\n+  database-mysql:\n+    image: mysql:5.7\n+    ports:\n+      - 3306:3306\n+    environment:\n+      - MYSQL_ROOT_PASSWORD=1234\n+      - MYSQL_DATABASE=exemploddd\n+      - MYSQL_USER=crane\n+      - MYSQL_PASSWORD=1234\n+    networks:\n+      - my_network\n+\n+  exemploddd:\n+    build:\n+      context: .\n+      dockerfile: Dockerfile\n+    image: marcelojunin/exemploddd\n+    ports:\n+      - 8081:8080\n+    environment:\n+      - SPRING_DATASOURCE_URL=jdbc:mysql://database-mysql:3306/exemploddd?useSSL=false\n+    depends_on:\n+      - database-mysql\n+    networks:\n+      - my_network\n+    links:\n+      - database-mysql\n+\n+networks:\n+  my_network:\n+    driver: bridge\n\\ No newline at end of file"
  },
  {
    "sha": "290792a4b090d1c926575cbd691b1cecb7014fed",
    "filename": "mvnw.cmd:Zone.Identifier",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/290819853c03e72de7c0f58339806ac16603429a/mvnw.cmd:Zone.Identifier",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/290819853c03e72de7c0f58339806ac16603429a/mvnw.cmd:Zone.Identifier",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/mvnw.cmd:Zone.Identifier?ref=290819853c03e72de7c0f58339806ac16603429a",
    "patch": "@@ -1,3 +0,0 @@\n-[ZoneTransfer]\r\n-ZoneId=3\r\n-ReferrerUrl=C:\\Users\\rafae\\Downloads\\exemploddd.zip\r"
  },
  {
    "sha": "290792a4b090d1c926575cbd691b1cecb7014fed",
    "filename": "mvnw:Zone.Identifier",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/290819853c03e72de7c0f58339806ac16603429a/mvnw:Zone.Identifier",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/290819853c03e72de7c0f58339806ac16603429a/mvnw:Zone.Identifier",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/mvnw:Zone.Identifier?ref=290819853c03e72de7c0f58339806ac16603429a",
    "patch": "@@ -1,3 +0,0 @@\n-[ZoneTransfer]\r\n-ZoneId=3\r\n-ReferrerUrl=C:\\Users\\rafae\\Downloads\\exemploddd.zip\r"
  },
  {
    "sha": "450b55312ca09df925dc993eb33ff9e744dde6a5",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 26,
    "deletions": 1,
    "changes": 27,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/pom.xml",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/pom.xml",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/pom.xml?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -21,6 +21,32 @@\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter</artifactId>\n \t\t</dependency>\n+\t\t\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>mysql</groupId>\n+\t\t\t<artifactId>mysql-connector-java</artifactId>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<optional>true</optional>\n+\t\t</dependency>\n \n \t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n@@ -37,5 +63,4 @@\n \t\t\t</plugin>\n \t\t</plugins>\n \t</build>\n-\n </project>"
  },
  {
    "sha": "290792a4b090d1c926575cbd691b1cecb7014fed",
    "filename": "pom.xml:Zone.Identifier",
    "status": "removed",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/290819853c03e72de7c0f58339806ac16603429a/pom.xml:Zone.Identifier",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/290819853c03e72de7c0f58339806ac16603429a/pom.xml:Zone.Identifier",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/pom.xml:Zone.Identifier?ref=290819853c03e72de7c0f58339806ac16603429a",
    "patch": "@@ -1,3 +0,0 @@\n-[ZoneTransfer]\r\n-ZoneId=3\r\n-ReferrerUrl=C:\\Users\\rafae\\Downloads\\exemploddd.zip\r"
  },
  {
    "sha": "80e5579a225e9eb1e0129d27d7c295e91c890399",
    "filename": "src/main/java/br/com/userAccess/UserAccessApplication.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/UserAccessApplication.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/UserAccessApplication.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/UserAccessApplication.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,40 @@\n+package br.com.userAccess;\n+\n+import br.com.userAccess.domain.Client;\n+import br.com.userAccess.domain.User;\n+import br.com.userAccess.repository.ClientRepository;\n+import br.com.userAccess.repository.UserRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+\n+@SpringBootApplication\n+@EnableEurekaClient\n+public class UserAccessApplication  implements CommandLineRunner {\n+\t\n+\t@Autowired \n+\tprivate UserRepository userRepository;\n+\t\n+\t@Autowired\n+\tprivate ClientRepository clientRepository;\n+\t\n+\t@Autowired\n+\tprivate BCryptPasswordEncoder bCryptPasswordEncoder;\n+\n+\tpublic static void main(String[] args) {\n+\t\tSpringApplication.run(UserAccessApplication.class, args);\n+\t}\n+\t\n+\t@Override\n+\tpublic void run(String... arg0) throws Exception {\n+\t\tuserRepository.deleteAll();\n+\t\tclientRepository.deleteAll();\n+\t\tfinal User user = userRepository.save(new User(\"crane\", bCryptPasswordEncoder.encode(\"123\")));\n+\t\tclientRepository.save(new Client(\"crane@gmail.com\", \"kyle Crane\", user));\n+\t}\n+\n+}\n+"
  },
  {
    "sha": "92268f596067041498423df3c6301b9ac01034c0",
    "filename": "src/main/java/br/com/userAccess/config/security/JWTAuthenticationFilter.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/JWTAuthenticationFilter.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/JWTAuthenticationFilter.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/config/security/JWTAuthenticationFilter.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,60 @@\n+package br.com.userAccess.config.security;\n+\n+import br.com.userAccess.constants.JWTConst;\n+import br.com.userAccess.domain.dto.CredenciaisDTO;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n+\n+    private AuthenticationManager authenticationManager;\n+\n+    private JWTUtil jwtUtil;\n+\n+    public JWTAuthenticationFilter(AuthenticationManager authenticationManager, JWTUtil jwtUtil) {\n+        this.authenticationManager = authenticationManager;\n+        this.jwtUtil = jwtUtil;\n+    }\n+\n+    @Override\n+    public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse res) throws AuthenticationException {\n+        try {\n+\n+            CredenciaisDTO credenciaisDTO = new ObjectMapper()\n+                    .readValue(req.getInputStream(), CredenciaisDTO.class);\n+\n+            UsernamePasswordAuthenticationToken token =\n+                    new UsernamePasswordAuthenticationToken(credenciaisDTO.getUsername(), credenciaisDTO.getPassword(), new ArrayList<>());\n+\n+            Authentication authentication = authenticationManager.authenticate(token);\n+\n+            return authentication;\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    protected void successfulAuthentication(HttpServletRequest req,\n+                                            HttpServletResponse res,\n+                                            FilterChain chain,\n+                                            Authentication auth) throws IOException, ServletException {\n+\n+        final UserSpringSecurity user = (UserSpringSecurity) auth.getPrincipal();\n+        String token = jwtUtil.generateToken(user.getUsername());\n+        res.addHeader(JWTConst.AUTHORIZARION, JWTConst.BEARER + token);\n+        res.addHeader(JWTConst.ACCESS_CONTROL_EXPOSE_HEADERS, JWTConst.AUTHORIZARION);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3333e21e9ac3707ea54c2c15b9b89c85da7fa7f9",
    "filename": "src/main/java/br/com/userAccess/config/security/JWTAuthorizationFilter.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/JWTAuthorizationFilter.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/JWTAuthorizationFilter.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/config/security/JWTAuthorizationFilter.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,54 @@\n+package br.com.userAccess.config.security;\n+\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class JWTAuthorizationFilter extends BasicAuthenticationFilter {\n+\n+    private JWTUtil jwtUtil;\n+\n+    private UserDetailsService userDetailsService;\n+\n+    public JWTAuthorizationFilter(AuthenticationManager authenticationManager, JWTUtil jwtUtil, UserDetailsService userDetailsService) {\n+        super(authenticationManager);\n+        this.jwtUtil = jwtUtil;\n+        this.userDetailsService = userDetailsService;\n+    }\n+\n+    protected void doFilterInternal(\n+            HttpServletRequest request,\n+            HttpServletResponse response,\n+            FilterChain chain) throws IOException, ServletException {\n+\n+        String header = request.getHeader(\"Authorization\");\n+\n+        if (header != null && header.startsWith(\"Bearer \")) {\n+            UsernamePasswordAuthenticationToken auth = getAuthentication(header.substring(7));\n+\n+            if (auth != null) {\n+                SecurityContextHolder.getContext().setAuthentication(auth);\n+            }\n+        }\n+\n+        chain.doFilter(request, response);\n+    }\n+\n+    private UsernamePasswordAuthenticationToken getAuthentication(String token) {\n+        if (jwtUtil.validToken(token)) {\n+            String username = jwtUtil.getUsername(token);\n+            UserDetails user = userDetailsService.loadUserByUsername(username);\n+            return new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "79629ac32785fe1ebdf503057e659ef4fcf9c29b",
    "filename": "src/main/java/br/com/userAccess/config/security/JWTUtil.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/JWTUtil.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/JWTUtil.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/config/security/JWTUtil.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,62 @@\n+package br.com.userAccess.config.security;\n+\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+@Component\n+public class JWTUtil {\n+\n+    @Value(\"${jwt.secret}\")\n+    private String secret;\n+\n+    @Value(\"${jwt.expiration}\")\n+    private Long expiration;\n+\n+    public String generateToken(String email) {\n+        return Jwts.builder()\n+                .setSubject(email)\n+                .setExpiration(new Date(System.currentTimeMillis() + expiration))\n+                .signWith(SignatureAlgorithm.HS512, secret.getBytes())\n+                .compact();\n+    }\n+\n+    public boolean validToken(String token) {\n+        Claims claims = getClaims(token);\n+\n+        if (claims != null) {\n+            String username = claims.getSubject();\n+            Date expirationDate = claims.getExpiration();\n+            Date now = new Date(System.currentTimeMillis());\n+\n+            if (username != null && expirationDate != null && now.before(expirationDate)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private Claims getClaims(String token) {\n+\n+        try {\n+            return Jwts.parser().setSigningKey(secret.getBytes()).parseClaimsJws(token).getBody();\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+\n+    public String getUsername(String token) {\n+\n+        Claims claims = getClaims(token);\n+\n+        if (claims != null) {\n+            return claims.getSubject();\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8aa46e0dd3953d29a0fdf090d3e95cef7a05746a",
    "filename": "src/main/java/br/com/userAccess/config/security/SecurityConfig.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/SecurityConfig.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/config/security/SecurityConfig.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,66 @@\n+package br.com.userAccess.config.security;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.http.SessionCreationPolicy;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.web.cors.CorsConfiguration;\n+import org.springframework.web.cors.CorsConfigurationSource;\n+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n+\n+import java.util.Arrays;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+public class SecurityConfig extends WebSecurityConfigurerAdapter {\n+\t\n+\tprivate static final String[] PUBLIC_MATCHERS_GET = {\n+\t\t\t\"/users/**\"\n+\t};\n+\t\n+\t@Autowired\n+\tUserDetailsService userDetailsService;\n+\n+\t@Autowired\n+\tprivate JWTUtil jwtUtil;\n+\n+\t@Override\n+\tprotected void configure(HttpSecurity http) throws Exception {\n+\t\thttp.cors().and().csrf().disable();\n+\t\thttp.authorizeRequests()\n+\t\t\t\t.antMatchers(HttpMethod.GET, PUBLIC_MATCHERS_GET).permitAll()\n+\t\t\t\t.antMatchers(HttpMethod.POST, PUBLIC_MATCHERS_GET).permitAll()\n+\t\t\t\t.anyRequest().authenticated();\n+\t\thttp.addFilter(new JWTAuthenticationFilter(authenticationManager(), jwtUtil));\n+\t\thttp.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtUtil, userDetailsService));\n+\t\thttp.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n+\t}\n+\n+\t@Bean\n+\tCorsConfigurationSource corsConfigurationSource() {\n+\t\tCorsConfiguration configuration = new CorsConfiguration().applyPermitDefaultValues();\n+\t\tconfiguration.setAllowedMethods(Arrays.asList(\"POST\", \"GET\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n+\t\tfinal UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n+\t\tsource.registerCorsConfiguration(\"/**\", configuration);\n+\t\treturn source;\n+\t}\n+\n+\t@Override\n+\tpublic void configure(AuthenticationManagerBuilder auth) throws Exception {\n+\t\tauth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());\n+\t}\n+\n+\t@Bean\n+\tpublic BCryptPasswordEncoder bCryptPasswordEncoder() {\n+\t\treturn new BCryptPasswordEncoder();\n+\t}\n+}"
  },
  {
    "sha": "4791a3dab67efe4494f34be81f3362b1842a8f95",
    "filename": "src/main/java/br/com/userAccess/config/security/UserSpringSecurity.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/UserSpringSecurity.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/config/security/UserSpringSecurity.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/config/security/UserSpringSecurity.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,75 @@\n+package br.com.userAccess.config.security;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+import br.com.userAccess.domain.enums.Profile;\n+\n+public class UserSpringSecurity implements UserDetails {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate Integer id;\n+\tprivate String username;\n+\tprivate String password;\n+\tprivate Collection<? extends GrantedAuthority> authorities;\n+\n+\tpublic UserSpringSecurity(Integer id, String username, String password, Set<Profile> profiles) {\n+\t\tthis.id = id;\n+\t\tthis.username = username;\n+\t\tthis.password = password;\n+\t\tthis.authorities = profiles\n+\t\t\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t\t.map(profile -> new SimpleGrantedAuthority(profile.getDescription()))\n+\t\t\t\t\t\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tpublic Collection<? extends GrantedAuthority> getAuthorities() {\n+\t\treturn authorities;\n+\t}\n+\t\n+\tpublic Integer getId() {\n+\t\treturn id;\n+\t}\n+\n+\t@Override\n+\tpublic String getPassword() {\n+\t\treturn password;\n+\t}\n+\n+\t@Override\n+\tpublic String getUsername() {\n+\t\treturn username;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAccountNonExpired() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAccountNonLocked() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isCredentialsNonExpired() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isEnabled() {\n+\t\treturn true;\n+\t}\n+\t\n+\tpublic boolean hasRole(Profile profile) {\n+\t\treturn getAuthorities().contains(new SimpleGrantedAuthority(profile.getDescription()));\n+\t}\n+\n+}"
  },
  {
    "sha": "3b49174a7a27ac2ee3d10a8d6d61e1fd625a5413",
    "filename": "src/main/java/br/com/userAccess/constants/JWTConst.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/constants/JWTConst.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/constants/JWTConst.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/constants/JWTConst.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,11 @@\n+package br.com.userAccess.constants;\n+\n+public class JWTConst {\n+\n+    public static final String AUTHORIZARION = \"Authorization\";\n+    public static final String BEARER = \"Bearer \";\n+    public static final String ACCESS_CONTROL_EXPOSE_HEADERS = \"access-control-expose-headers\";\n+    public static final String APPLICATION_JSON = \"application/json\";\n+    public static final String UTF8 = \"UTF-8\";\n+\n+}"
  },
  {
    "sha": "c9916b0745a4348bf56aeb5069af3eb130ba2cdb",
    "filename": "src/main/java/br/com/userAccess/domain/Client.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/Client.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/Client.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/domain/Client.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,68 @@\n+package br.com.userAccess.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+import javax.persistence.*;\n+import java.io.Serializable;\n+\n+\n+@Entity\n+public class Client implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\n+\tprivate Integer id;\n+\tprivate String email;\n+\tprivate String name;\n+\n+\t@OneToOne\n+\t@JoinColumn(name=\"user_id\")\n+\t@JsonIgnore\n+\tprivate User user;\n+\n+\tpublic Client() {\n+\n+\t}\n+\n+\tpublic Client(String email, String name, User user) {\n+\t\tthis.email = email;\n+\t\tthis.name = name;\n+\t\tthis.user = user;\n+\t}\n+\n+\tpublic Integer getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Integer id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getEmail() {\n+\t\treturn email;\n+\t}\n+\n+\tpublic void setEmail(String email) {\n+\t\tthis.email = email;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic User getUser() {\n+\t\treturn user;\n+\t}\n+\n+\tpublic void setUser(User user) {\n+\t\tthis.user = user;\n+\t}\n+\t\n+\t\n+}"
  },
  {
    "sha": "500d6d06e1a63cb40439ea702b0fa005707a6bef",
    "filename": "src/main/java/br/com/userAccess/domain/User.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/User.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/User.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/domain/User.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,87 @@\n+package br.com.userAccess.domain;\n+\n+import br.com.userAccess.domain.enums.Profile;\n+\n+import javax.persistence.*;\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Entity\n+public class User implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\n+\tprivate Integer id;\n+\tprivate String username;\n+\tprivate String password;\n+\t\n+\t@ElementCollection(fetch=FetchType.EAGER)\n+\t@CollectionTable(name=\"PROFILES\")\n+\tprivate Set<Integer> profiles = new HashSet<>();\n+\n+\t@OneToOne(mappedBy = \"user\", cascade = CascadeType.ALL)\n+\tprivate Client client;\n+\n+\tpublic User() {\n+\t\t\n+\t}\n+\n+\tpublic User(String username, String password) {\n+\t\tthis.username = username;\n+\t\tthis.password = password;\n+\t\taddProfiles(Profile.USER);\n+\t}\n+\n+\tpublic Integer getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Integer id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getUsername() {\n+\t\treturn username;\n+\t}\n+\n+\tpublic void setUsername(String username) {\n+\t\tthis.username = username;\n+\t}\n+\n+\tpublic String getPassword() {\n+\t\treturn password;\n+\t}\n+\n+\tpublic void setPassword(String password) {\n+\t\tthis.password = password;\n+\t}\n+\n+\tpublic Client getClient() {\n+\t\treturn client;\n+\t}\n+\n+\tpublic void setClient(Client client) {\n+\t\tthis.client = client;\n+\t}\n+\n+\tpublic Set<Profile> getProfiles() {\n+\t\treturn profiles\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(code -> Profile.toEnum(code))\n+\t\t\t\t\t.collect(Collectors.toSet());\n+\t}\n+\n+\tpublic void addProfiles(Profile profile) {\n+\t\tprofiles.add(profile.getCode());\n+\t}\n+\n+\tpublic Client fromClient() {\n+\t\tfinal User user = new User();\n+\t\tuser.setId(getId());\n+\t\treturn new Client(getClient().getEmail(), getClient().getName(), user);\n+\t}\n+}"
  },
  {
    "sha": "2882729b24816a255ff1ea5d842f8edd28e0d255",
    "filename": "src/main/java/br/com/userAccess/domain/dto/ClientDTO.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/dto/ClientDTO.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/dto/ClientDTO.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/domain/dto/ClientDTO.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,32 @@\n+package br.com.userAccess.domain.dto;\n+\n+import java.io.Serializable;\n+\n+public class ClientDTO implements Serializable {\n+\n+    private String email;\n+    private String name;\n+\n+    public ClientDTO() { }\n+\n+    public ClientDTO(String email, String name) {\n+        this.email = email;\n+        this.name = name;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"
  },
  {
    "sha": "0a7401302b5a7293bcd83b470c7a04639616ddb1",
    "filename": "src/main/java/br/com/userAccess/domain/dto/CredenciaisDTO.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/dto/CredenciaisDTO.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/dto/CredenciaisDTO.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/domain/dto/CredenciaisDTO.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,36 @@\n+package br.com.userAccess.domain.dto;\n+\n+import java.io.Serializable;\n+\n+public class CredenciaisDTO  implements Serializable {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate String username;\n+\tprivate String password;\n+\n+\n+\tpublic CredenciaisDTO() {\n+\t\t\n+\t}\n+\n+\n+\tpublic String getUsername() {\n+\t\treturn username;\n+\t}\n+\n+\n+\tpublic void setUsername(String username) {\n+\t\tthis.username = username;\n+\t}\n+\n+\n+\tpublic String getPassword() {\n+\t\treturn password;\n+\t}\n+\n+\n+\tpublic void setPassword(String password) {\n+\t\tthis.password = password;\n+\t}\n+\n+}"
  },
  {
    "sha": "12e7f1c51e474a4cb5cb130f15af6ba5d6acc9df",
    "filename": "src/main/java/br/com/userAccess/domain/dto/UserDTO.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/dto/UserDTO.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/dto/UserDTO.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/domain/dto/UserDTO.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,60 @@\n+package br.com.userAccess.domain.dto;\n+\n+import br.com.userAccess.domain.Client;\n+import br.com.userAccess.domain.User;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * @Author Marcelo Nascimento\n+ * @Date 18 de fev de 2019\n+ * @Project user-access\n+ * @Package br.com.userAccess.domain.dto\n+ * @Desc \n+ */\n+public class UserDTO implements Serializable {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate String username;\n+\tprivate String password;\n+\tprivate ClientDTO clientDTO;\n+\n+\tpublic UserDTO() { }\n+\n+\tpublic UserDTO(String username, String password) {\n+\t\tthis.username = username;\n+\t\tthis.password = password;\n+\t}\n+\n+\tpublic String getUsername() {\n+\t\treturn username;\n+\t}\n+\n+\tpublic void setUsername(String username) {\n+\t\tthis.username = username;\n+\t}\n+\n+\tpublic String getPassword() {\n+\t\treturn password;\n+\t}\n+\n+\tpublic void setPassword(String password) {\n+\t\tthis.password = password;\n+\t}\n+\n+\tpublic ClientDTO getClientDTO() {\n+\t\treturn clientDTO;\n+\t}\n+\n+\tpublic void setClientDTO(ClientDTO clientDTO) {\n+\t\tthis.clientDTO = clientDTO;\n+\t}\n+\n+\tpublic User fromEntity() {\n+\t\tfinal User user = new User(getUsername(), getPassword());\n+\t\tfinal Client client = new Client(user.getClient().getEmail(), user.getClient().getName(), user);\n+\t\tuser.setClient(client);\n+\t\treturn user;\n+\t}\n+}"
  },
  {
    "sha": "003cff7cba1b1a782d9e9755bae6351228983630",
    "filename": "src/main/java/br/com/userAccess/domain/enums/Profile.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/enums/Profile.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/domain/enums/Profile.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/domain/enums/Profile.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,37 @@\n+package br.com.userAccess.domain.enums;\n+\n+public enum Profile {\n+\n+\tADMIN(1, \"ROLE_ADMIN\"),\n+\tUSER(2, \"ROLE_USER\");\n+\n+\tprivate int code;\n+\tprivate String description;\n+\n+\tprivate Profile(int code, String description) {\n+\t\tthis.code = code;\n+\t\tthis.description = description;\n+\t}\n+\n+\tpublic int getCode() {\n+\t\treturn code;\n+\t}\n+\n+\tpublic String getDescription() {\n+\t\treturn description;\n+\t}\n+\n+\tpublic static Profile toEnum(Integer code)  {\n+\t\tif(code == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfor(Profile profile: Profile.values()) {\n+\t\t\tif(code.equals(profile.getCode())) {\n+\t\t\t\treturn profile;\n+\t\t\t}\n+\t\t}\n+\n+\t\tthrow new IllegalArgumentException(\"Invalid code: \"+ code);\n+\t}\n+}"
  },
  {
    "sha": "f57c7364f5ec863217e0a2f0fdc8116cd24c00eb",
    "filename": "src/main/java/br/com/userAccess/exception/ObjectNotFoundException.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/exception/ObjectNotFoundException.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/exception/ObjectNotFoundException.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/exception/ObjectNotFoundException.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,15 @@\n+package br.com.userAccess.exception;\n+\n+public class ObjectNotFoundException extends RuntimeException {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tpublic ObjectNotFoundException(String msg) {\n+\t\tsuper(msg);\n+\t}\n+\t\n+\tpublic ObjectNotFoundException(String msg, Throwable cause) {\n+\t\tsuper(msg, cause);\n+\t}\n+\n+}"
  },
  {
    "sha": "42a13df660f7dd52aebcb6d543ba1695ab4ebe86",
    "filename": "src/main/java/br/com/userAccess/exception/ResourceExceptionHandler.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/exception/ResourceExceptionHandler.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/exception/ResourceExceptionHandler.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/exception/ResourceExceptionHandler.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,18 @@\n+package br.com.userAccess.exception;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+\n+@ControllerAdvice\n+public class ResourceExceptionHandler {\n+\n+\t@ExceptionHandler(ObjectNotFoundException.class)\n+\tpublic ResponseEntity<StandardError> objectNotFound(ObjectNotFoundException exception, HttpServletRequest request) {\n+\t\tStandardError error = new StandardError(HttpStatus.NOT_FOUND.value(), exception.getMessage(), System.currentTimeMillis());\n+\t\treturn ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);\n+\t}\n+}"
  },
  {
    "sha": "60ad20a0dc6b08bac86e5fdd598cf69d8f373bf8",
    "filename": "src/main/java/br/com/userAccess/exception/StandardError.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/exception/StandardError.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/exception/StandardError.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/exception/StandardError.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,39 @@\n+package br.com.userAccess.exception;\n+\n+import java.io.Serializable;\n+\n+public class StandardError implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate Integer status;\n+\tprivate String msg;\n+\tprivate Long timestamp;\n+\t\n+\tpublic StandardError(Integer status, String msg, Long timestamp) {\n+\t\tsuper();\n+\t\tthis.status = status;\n+\t\tthis.msg = msg;\n+\t\tthis.timestamp = timestamp;\n+\t}\n+\n+\tpublic Integer getStatus() {\n+\t\treturn status;\n+\t}\n+\tpublic void setStatus(Integer status) {\n+\t\tthis.status = status;\n+\t}\n+\tpublic String getMsg() {\n+\t\treturn msg;\n+\t}\n+\tpublic void setMsg(String msg) {\n+\t\tthis.msg = msg;\n+\t}\n+\tpublic Long getTimestamp() {\n+\t\treturn timestamp;\n+\t}\n+\tpublic void setTimestamp(Long timestamp) {\n+\t\tthis.timestamp = timestamp;\n+\t}\n+\n+}"
  },
  {
    "sha": "7973f5e6250b1dcd41bd7fae20ab8d172d870f5b",
    "filename": "src/main/java/br/com/userAccess/repository/ClientRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/repository/ClientRepository.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/repository/ClientRepository.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/repository/ClientRepository.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,9 @@\n+package br.com.userAccess.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+import br.com.userAccess.domain.Client;\n+\n+public interface ClientRepository extends JpaRepository<Client, Integer> {\n+\n+}"
  },
  {
    "sha": "0bf8440a464ce1c8b42556e55e1f6018e725e025",
    "filename": "src/main/java/br/com/userAccess/repository/UserRepository.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/repository/UserRepository.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/repository/UserRepository.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/repository/UserRepository.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,22 @@\n+package br.com.userAccess.repository;\n+\n+import java.util.Optional;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import br.com.userAccess.domain.User;\n+\n+/**\n+ * @Author Marcelo Nascimento\n+ * @Date 18 de fev de 2019\n+ * @Project user-access\n+ * @Package br.com.userAccess.repository\n+ * @Desc User Repository\n+ */\n+@Repository\n+public interface UserRepository extends JpaRepository<User, Integer>{\n+\n+\tOptional<User> findByUsername(String username);\n+\n+}"
  },
  {
    "sha": "929fb496b4a14ab746639e486b7f35fef5210c65",
    "filename": "src/main/java/br/com/userAccess/resource/UserResource.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/blob/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/resource/UserResource.java",
    "raw_url": "https://github.com/rafaelbatistamarcilio/exemplo-ddd-spring-boot/raw/782057638f7532842b501660c0315e28863265be/src/main/java/br/com/userAccess/resource/UserResource.java",
    "contents_url": "https://api.github.com/repos/rafaelbatistamarcilio/exemplo-ddd-spring-boot/contents/src/main/java/br/com/userAccess/resource/UserResource.java?ref=782057638f7532842b501660c0315e28863265be",
    "patch": "@@ -0,0 +1,80 @@\n+package br.com.userAccess.resource;\n+\n+import br.com.userAccess.domain.User;\n+import br.com.userAccess.domain.dto.UserDTO;\n+import br.com.userAccess.service.UserService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+/**\n+ * @Author Marcelo Nascimento\n+ * @Date 13 de fev de 2019\n+ * @Project user-access\n+ * @Package resource\n+ * @Desc Resources to define end points to user.\n+ */\n+\n+@RestController\n+@RequestMapping(\"/users\")\n+public class UserResource {\n+\n+\t@Autowired\n+\tprivate UserService userService;\n+\t\n+\t@GetMapping\n+\tpublic ResponseEntity<List<User>> show() {\n+\t\tList<User> list = userService.all();\n+ \t\treturn ResponseEntity.ok(list);\n+\t}\n+\t\n+\t@GetMapping(\"/paginate\")\n+\tpublic ResponseEntity<Page<User>> paginate(\n+\t\t\t@RequestParam(value = \"page\", defaultValue = \"0\") Integer page, \n+\t\t\t@RequestParam(value = \"linesPerPage\", defaultValue = \"24\") Integer linesPerPage, \n+\t\t\t@RequestParam(value = \"orderBy\", defaultValue = \"login\") String orderBy, \n+\t\t\t@RequestParam(value = \"direction\", defaultValue = \"DESC\")String direction) {\n+\t\tPage<User> list = userService.paginateUser(page, linesPerPage, orderBy, direction);\n+\t\treturn ResponseEntity.ok(list);\n+\t}\n+\t\n+\t@GetMapping(value=\"/findByUsername\")\n+\tpublic ResponseEntity<User> findByUsername(@RequestParam(value = \"username\") String username) {\n+\t\tUser user = userService.findByUsername(username);\n+\t\treturn ResponseEntity.ok(user);\n+\t}\n+\n+\t@GetMapping(value=\"/{id}\")\n+\tpublic ResponseEntity<User> findOne(@PathVariable Integer id) {\n+\t\tUser user = userService.findOne(id);\n+\t\treturn ResponseEntity.ok(user);\n+\t}\n+\n+\t@GetMapping(value=\"/myProfile\")\n+\tpublic ResponseEntity<User> myProfile() {\n+\t\tUser user = userService.myProfile();\n+\t\treturn ResponseEntity.ok(user);\n+\t}\n+\n+\t@PostMapping\n+\tpublic ResponseEntity<Void> create(@RequestBody UserDTO dto) {\n+\t\tUser user = dto.fromEntity();\n+\t\tuser = userService.create(user);\n+\t\tURI uri = ServletUriComponentsBuilder.fromCurrentRequest()\n+\t\t\t\t.path(\"/{id}\")\n+\t\t\t\t.buildAndExpand(user.getId())\n+\t\t\t\t.toUri();\n+\t\treturn ResponseEntity.created(uri).build();\n+\t}\n+\n+\t@PutMapping(\"/{id}\")\n+\tpublic ResponseEntity<Void> update(@RequestBody User user, @PathVariable Integer id) {\n+\t\tuserService.update(user, id);\n+\t\treturn ResponseEntity.noContent().build();\n+\t}\n+}"
  }
]
