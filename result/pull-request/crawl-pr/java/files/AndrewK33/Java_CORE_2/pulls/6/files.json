[
  {
    "sha": "f21498c978a73a95e682685ac846a8290d2662be",
    "filename": "src/main/java/Lesson_3/Main.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_3/Main.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_3/Main.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_3/Main.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,54 @@\n+package Lesson_3;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+\n+\n+        //Задание 1. Создать массив с набором слов (10-20 слов, должны встречаться повторяющиеся).\n+        //Найти и вывести список уникальных слов, из которых состоит массив (дубликаты не считаем).\n+        //Посчитать сколько раз встречается каждое слово.\n+\n+        List<String> arrayList = new ArrayList<String>();\n+        arrayList.add(\"WordA\");\n+        arrayList.add(\"WordB\");\n+        arrayList.add(\"WordA\");\n+        arrayList.add(\"WordB\");\n+        arrayList.add(\"WordC\");\n+        arrayList.add(\"WordD\");\n+        arrayList.add(\"WordE\");\n+        arrayList.add(\"WordF\");\n+        arrayList.add(\"WordG\");\n+        arrayList.add(\"WordG\");\n+        arrayList.add(\"WordG\");\n+        arrayList.add(\"WordH\");\n+\n+        workForArray.printUniqueWords(arrayList);\n+\n+\n+\n+\n+        //Задание 2. Написать простой класс ТелефонныйСправочник, который хранит в себе список фамилий и телефонных номеров.\n+        //В этот телефонный справочник с помощью метода add() можно добавлять записи.\n+        //С помощью метода get() искать номер телефона по фамилии.\n+        //Следует учесть, что под одной фамилией может быть несколько телефонов (в случае однофамильцев), тогда при запросе такой фамилии должны выводиться все телефоны\n+\n+        Phonebook phonebook = new Phonebook();\n+\n+        phonebook.addNote(\"IVANOV\", \"+7(999)363-71-71\");\n+        phonebook.addNote(\"PETROV\", \"+7(888)888-77-11\");\n+        phonebook.addNote(\"VASIN\", \"+3(222)111-88-77\");\n+        phonebook.addNote(\"VASIN\", \"+7(333)555-11-22\");\n+        phonebook.addNote(\"IVANOV\", \"999-99-8989\");\n+\n+        phonebook.getNote(\"IVANOV\");\n+        phonebook.getNote(\"VASIN\");\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "bd158a6cebe61f690340b9e8520825f01eb6e775",
    "filename": "src/main/java/Lesson_3/Phonebook.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_3/Phonebook.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_3/Phonebook.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_3/Phonebook.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,27 @@\n+package Lesson_3;\n+\n+import java.util.*;\n+\n+public class Phonebook {\n+\n+\n+    Map <String, String> phonebook = new HashMap<>();\n+\n+\n+    public void addNote (String secondName, String number) {\n+        phonebook.put(secondName, number);\n+    }\n+\n+\n+\n+\n+\n+    public void getNote(String secondName){\n+        if(phonebook.containsValue(secondName)) {\n+            System.out.println(phonebook.get(secondName));\n+        } else {\n+            System.out.println(\"Указанной фамилии нет в списке\");\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "c8257f02609b008f68e9374a8c942fd35039f6f5",
    "filename": "src/main/java/Lesson_3/workForArray.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_3/workForArray.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_3/workForArray.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_3/workForArray.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,23 @@\n+package Lesson_3;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class workForArray {\n+\n+    public static void printUniqueWords(List<String> arrayList) {\n+        Set<String> tempArray = new LinkedHashSet<>(arrayList);\n+        for (String tempArr : tempArray) {\n+            int count = 0;\n+            for (String arr : arrayList) {\n+                if(tempArr.equals(arr)) count++;\n+            }\n+            System.out.println(\"Объектов \" + \"\\\"\" + tempArr + \"\\\"\" + \" повторяющихся в листе: \" + count);\n+        }\n+        System.out.println();\n+    }\n+\n+\n+\n+}"
  },
  {
    "sha": "1dcae1387483278aec266fafb9300b2912ecbdd3",
    "filename": "src/main/java/Lesson_4/FirstInterface.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/FirstInterface.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/FirstInterface.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_4/FirstInterface.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,6 @@\n+package Lesson_4;\n+\n+\n+public interface FirstInterface {\n+    int searchReturn (int a, int[] array);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "476027568cd76cb9c7245c00563d0fd2fb8212dd",
    "filename": "src/main/java/Lesson_4/FiveInterface.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/FiveInterface.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/FiveInterface.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_4/FiveInterface.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,8 @@\n+package Lesson_4;\n+\n+import java.util.List;\n+\n+public interface FiveInterface {\n+    List<String> aWordsAndThreeLetters (List<String> stringListList, List<String> voidList);\n+\n+}"
  },
  {
    "sha": "93793e14b40eac9830204b9826307b5e23a181a8",
    "filename": "src/main/java/Lesson_4/FourInterface.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/FourInterface.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/FourInterface.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_4/FourInterface.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,9 @@\n+package Lesson_4;\n+\n+import java.util.List;\n+\n+public interface FourInterface {\n+    double average (List<Integer> list);\n+\n+\n+}"
  },
  {
    "sha": "3fd6fd7be0caee535ee11ca0ac651f4aca0d2352",
    "filename": "src/main/java/Lesson_4/Main.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/Main.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/Main.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_4/Main.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,150 @@\n+package Lesson_4;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        int[] arr = new int [5];\n+        arr[0] = 4;\n+        arr[1] = 2;\n+        arr[2] = 4;\n+        arr[3] = 6;\n+        arr[4] = 1;\n+\n+\n+\n+        FirstInterface c = (t, y) -> {\n+            for (int i = 0; i < y.length; i++) {\n+                if (y[i] == t) {\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        };\n+        int x = 2;\n+        foo(c, x, arr);\n+\n+\n+\n+\n+\n+        SecondInterface d = (p) -> {\n+            return new StringBuilder(p).reverse().toString();\n+\n+        };\n+        String result = reverseString(d, \"Результирующий\");\n+        System.out.println(result);\n+\n+\n+        List<Integer> integerArrayListist = new ArrayList<>();\n+        integerArrayListist.add(12);\n+        integerArrayListist.add(21);\n+        integerArrayListist.add(111);\n+        integerArrayListist.add(0);\n+\n+        ThirdInterface thInt = (w) -> {\n+            return Collections.max(w);\n+        };\n+        System.out.println(researchMax(thInt, integerArrayListist));\n+\n+\n+\n+\n+        List<Integer> integerArrayList = new ArrayList<>();\n+        integerArrayListist.add(12);\n+        integerArrayListist.add(21);\n+        integerArrayListist.add(111);\n+        integerArrayListist.add(0);\n+\n+        FourInterface frInt = (j) -> {\n+            double sum = 0;\n+            for (int i = 0; i < j.size(); i++) {\n+                sum += j.get(i);\n+            }\n+            return sum / j.size();\n+        };\n+        System.out.println(average(frInt, integerArrayListist));\n+\n+\n+\n+\n+\n+\n+\n+        List<String> stringList = new ArrayList<>();\n+        stringList.add(\"авокадо\");\n+        stringList.add(\"пертурбация\");\n+        stringList.add(\"анх\");\n+        stringList.add(\"акр\");\n+        List<String> voidList = new ArrayList<>();\n+\n+        FiveInterface fvInt = (q, e) -> {\n+\n+            for (int i = 0; i < q.size(); i++) {\n+                if (q.get(i).charAt(0) == 'а'\n+                        &&\n+                        q.get(i).length() == 3) {\n+                        e.add(q.get(i));\n+                }\n+\n+            }\n+            return e;\n+        };\n+        System.out.println(aWords(fvInt, stringList, voidList));\n+        \n+        \n+        \n+        \n+\n+    }\n+\n+\n+    public static void foo(FirstInterface c, int a, int[] b) {\n+        c.searchReturn(a, b);\n+    }\n+\n+\n+    public static String reverseString(SecondInterface secInt, String str) {\n+        String a = secInt.reverseString(str);\n+        return a;\n+    }\n+\n+\n+    public static Integer researchMax (ThirdInterface thInt, List<Integer> integerList) {\n+        int b = thInt.searchMax(integerList);\n+        return b;\n+\n+    }\n+    \n+    public static double average (FourInterface frInt, List<Integer> integerList) {\n+        double z = frInt.average(integerList);\n+        return z;\n+    }\n+\n+\n+    public static List<String> aWords (FiveInterface fvInt, List<String> stringList, List<String> voidList) {\n+        List<String> t = fvInt.aWordsAndThreeLetters(stringList, voidList);\n+        return t;\n+    }\n+    \n+}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "a2fa9cfeffdd69617ccf7063586129a96880034c",
    "filename": "src/main/java/Lesson_4/SecondInterface.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/SecondInterface.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/SecondInterface.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_4/SecondInterface.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,5 @@\n+package Lesson_4;\n+\n+public interface SecondInterface {\n+    String reverseString (String str);\n+}"
  },
  {
    "sha": "c62980cfff058c73bc7d6204a26fb72a95479120",
    "filename": "src/main/java/Lesson_4/ThirdInterface.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/ThirdInterface.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_4/ThirdInterface.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_4/ThirdInterface.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,9 @@\n+package Lesson_4;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public interface ThirdInterface {\n+    int searchMax (List<Integer> array);\n+\n+}"
  },
  {
    "sha": "3c741f2fc6e39239358a97ffbc6a84d9386846a4",
    "filename": "src/main/java/Lesson_5/Main.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_5/Main.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_5/Main.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_5/Main.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,97 @@\n+package Lesson_5;\n+\n+import java.util.Date;\n+import java.util.Arrays;\n+\n+public class Main {\n+\n+\n+    private static final int size = 10000000; //размер длинного массива\n+    private static final int n = 2; // число потоков\n+    private static final int h = size / n; //размер разделенных массивов\n+    private static float[] arr = new float[size]; //одномерный длинный массив\n+\n+\n+    public static void main(String[] args) {\n+\n+\n+        Main m1 = new Main();\n+\n+        firstWorkArray();\n+        secondWorkArray();\n+\n+\n+\n+\n+\n+    }\n+\n+    public static void firstWorkArray () {\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = 1;\n+        }\n+        Date currentTime = new Date(); //Взятие первоначального времени\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = (float)(arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+        }\n+        Date newTime = new Date(); //Взятие времени после выполнения метода\n+        long longTime = currentTime.getTime() - newTime.getTime(); //Расчет времени, сколько выполнялся метод\n+\n+        System.out.println(longTime);\n+    }\n+\n+    public static void secondWorkArray () {\n+\n+        Thread[] threads = new Thread[n];\n+        Arrays.fill(arr, 1.0f);\n+\n+        long a = System.currentTimeMillis();\n+\n+        float[][] newArr = new float[n][h];\n+        for (int i = 0; i < n; i++) {\n+            System.arraycopy(arr, i*h, newArr[i], 0, h);\n+        }\n+\n+        long split = System.currentTimeMillis();\n+\n+\n+        for(int i=0; i<n; i++) {\n+            int finalI = i;\n+            threads[i] = new Thread(() -> calcSecondArr(newArr, finalI));\n+            threads[i].start();\n+            try {\n+                threads[i].join();\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+\n+        long concat = System.currentTimeMillis();\n+\n+\n+\n+        for (int i = 0; i < n; i++) {\n+            System.arraycopy(newArr[i], 0, arr, i * h, h);\n+        }\n+\n+\n+\n+        long end = System.currentTimeMillis();\n+        System.out.println(end);\n+\n+    }\n+\n+\n+    private static void calcSecondArr(float[][] arr, int n) {\n+        long start = System.currentTimeMillis();\n+        for (int i = 0; i < h; i++) {\n+            arr[n][i] = (float) (arr[n][i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+        }\n+        long end = System.currentTimeMillis();\n+\n+    }\n+\n+\n+}"
  },
  {
    "sha": "915a97926b8632b0c87d16a7fcd9d1d1d4bc05f2",
    "filename": "src/main/java/Lesson_6_7_8/Client/EchoClient.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_6_7_8/Client/EchoClient.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_6_7_8/Client/EchoClient.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_6_7_8/Client/EchoClient.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,151 @@\n+package Lesson_6_7_8.Client;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class EchoClient extends JFrame {\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    private final static String IP_ADDRESS = \"localhost\";\n+    private final static int SERVER_PORT = 8181;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+\n+\n+\n+    private EchoClient () {\n+        try {\n+            connection();\n+        } catch (IOException ignored) {\n+        }\n+        prepareGUI();\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> {\n+            new EchoClient();\n+        });\n+    }\n+\n+\n+\n+\n+    private void connection () throws IOException {\n+        socket = new Socket(IP_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+\n+\n+        new Thread(() -> {\n+            while (true){\n+                try {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.equalsIgnoreCase(\"/q\")){\n+                        break;\n+                    }\n+\n+                    chatArea.append(serverMessage + \"\\n\");\n+                } catch (IOException ignored) {\n+                }\n+            }\n+            closeConnetection();\n+        }).start();\n+    }\n+\n+\n+    private void sendMessageToServer() {\n+        if (!msgInputField.getText().trim().isEmpty()){\n+            try {\n+                String messageToServer = msgInputField.getText();\n+                dos.writeUTF(messageToServer);\n+                chatArea.append(\"Проверка инпута с чата: \" + msgInputField.getText() + \"\\n\");\n+                msgInputField.setText(\"\");\n+\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+\n+\n+\n+\n+    private void prepareGUI() {\n+\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Мессенджер\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+\n+        chatArea = new JTextArea();\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Сенд\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+\n+        btnSendMsg.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        msgInputField.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        /*addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/q\");\n+                } catch (IOException ignored) {\n+                }\n+\n+            }\n+        });*/\n+\n+        setVisible(true);\n+    }\n+\n+    private void closeConnetection() {\n+        try {\n+            dos.flush();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dos.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+\n+\n+\n+}\n+\n+\n+\n+"
  },
  {
    "sha": "03e5498f529b04670d3004e010d038b59c72a498",
    "filename": "src/main/java/Lesson_6_7_8/Server/MainServerApp.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/AndrewK33/Java_CORE_2/blob/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_6_7_8/Server/MainServerApp.java",
    "raw_url": "https://github.com/AndrewK33/Java_CORE_2/raw/2e3a431f5ead754a622f25536eb6b2e8ec012805/src/main/java/Lesson_6_7_8/Server/MainServerApp.java",
    "contents_url": "https://api.github.com/repos/AndrewK33/Java_CORE_2/contents/src/main/java/Lesson_6_7_8/Server/MainServerApp.java?ref=2e3a431f5ead754a622f25536eb6b2e8ec012805",
    "patch": "@@ -0,0 +1,65 @@\n+package Lesson_6_7_8.Server;\n+\n+import Lesson_6_7_8.Client.EchoClient;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+\n+public class MainServerApp {\n+    public static void main(String[] args) {\n+        Socket socket = null;\n+\n+        try (ServerSocket serverSocket = new ServerSocket(8181)){\n+            System.out.println(\"Server start\");\n+            socket = serverSocket.accept();\n+            System.out.println(\"Client ready\");\n+            DataInputStream dis = new DataInputStream(socket.getInputStream());\n+            DataOutputStream dos = new DataOutputStream(socket.getOutputStream());\n+\n+            while (true) {\n+\n+                String clienMessage = dis.readUTF();\n+                System.out.println(clienMessage);\n+\n+                if (clienMessage.equalsIgnoreCase(\"/q\")) {\n+                    dos.writeUTF(clienMessage);\n+                    closeConnetection(socket, dis, dos);\n+                    break;\n+                }\n+\n+                dos.writeUTF(\"Echo: \" + clienMessage);\n+            }\n+\n+        } catch (IOException ignored) {\n+        }\n+\n+    }\n+\n+    private static void closeConnetection (Socket s, DataInputStream dis, DataOutputStream dos) {\n+        try {\n+            dos.flush();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dos.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            s.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+\n+    }\n+\n+}"
  }
]
