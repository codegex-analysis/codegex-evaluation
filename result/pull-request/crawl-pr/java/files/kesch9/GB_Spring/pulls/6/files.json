[
  {
    "sha": "549e00a2a96fa9d7c5dbc9859664a78d980158c2",
    "filename": "HomeWorks/Spring_Hibernate/hiber/.gitignore",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/.gitignore",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/.gitignore",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/.gitignore?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,33 @@\n+HELP.md\n+target/\n+!.mvn/wrapper/maven-wrapper.jar\n+!**/src/main/**/target/\n+!**/src/test/**/target/\n+\n+### STS ###\n+.apt_generated\n+.classpath\n+.factorypath\n+.project\n+.settings\n+.springBeans\n+.sts4-cache\n+\n+### IntelliJ IDEA ###\n+.idea\n+*.iws\n+*.iml\n+*.ipr\n+\n+### NetBeans ###\n+/nbproject/private/\n+/nbbuild/\n+/dist/\n+/nbdist/\n+/.nb-gradle/\n+build/\n+!**/src/main/**/build/\n+!**/src/test/**/build/\n+\n+### VS Code ###\n+.vscode/"
  },
  {
    "sha": "e76d1f3241d38db9b28f05133823bbed1ad289ff",
    "filename": "HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/MavenWrapperDownloader.java",
    "status": "added",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/MavenWrapperDownloader.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/MavenWrapperDownloader.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/MavenWrapperDownloader.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n+            String username = System.getenv(\"MVNW_USERNAME\");\n+            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n+            Authenticator.setDefault(new Authenticator() {\n+                @Override\n+                protected PasswordAuthentication getPasswordAuthentication() {\n+                    return new PasswordAuthentication(username, password);\n+                }\n+            });\n+        }\n+        URL website = new URL(urlString);\n+        ReadableByteChannel rbc;\n+        rbc = Channels.newChannel(website.openStream());\n+        FileOutputStream fos = new FileOutputStream(destination);\n+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n+        fos.close();\n+        rbc.close();\n+    }\n+\n+}"
  },
  {
    "sha": "2cc7d4a55c0cd0092912bf49ae38b3a9e3fd0054",
    "filename": "HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/maven-wrapper.jar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/maven-wrapper.jar",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/maven-wrapper.jar",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/maven-wrapper.jar?ref=ac683037b42c83d976ad4cb773605118f986e445"
  },
  {
    "sha": "642d572ce90e5085986bdd9c9204b9404f028084",
    "filename": "HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/maven-wrapper.properties",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/maven-wrapper.properties",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/maven-wrapper.properties",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/.mvn/wrapper/maven-wrapper.properties?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,2 @@\n+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.3/apache-maven-3.6.3-bin.zip\n+wrapperUrl=https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar"
  },
  {
    "sha": "a16b5431b4c3cab50323a3f558003fd0abd87dad",
    "filename": "HomeWorks/Spring_Hibernate/hiber/mvnw",
    "status": "added",
    "additions": 310,
    "deletions": 0,
    "changes": 310,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/mvnw",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/mvnw",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/mvnw?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,310 @@\n+#!/bin/sh\n+# ----------------------------------------------------------------------------\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#    https://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+# ----------------------------------------------------------------------------\n+\n+# ----------------------------------------------------------------------------\n+# Maven Start Up Batch script\n+#\n+# Required ENV vars:\n+# ------------------\n+#   JAVA_HOME - location of a JDK home dir\n+#\n+# Optional ENV vars\n+# -----------------\n+#   M2_HOME - location of maven2's installed home dir\n+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n+#     e.g. to debug Maven itself, use\n+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n+# ----------------------------------------------------------------------------\n+\n+if [ -z \"$MAVEN_SKIP_RC\" ] ; then\n+\n+  if [ -f /etc/mavenrc ] ; then\n+    . /etc/mavenrc\n+  fi\n+\n+  if [ -f \"$HOME/.mavenrc\" ] ; then\n+    . \"$HOME/.mavenrc\"\n+  fi\n+\n+fi\n+\n+# OS specific support.  $var _must_ be set to either true or false.\n+cygwin=false;\n+darwin=false;\n+mingw=false\n+case \"`uname`\" in\n+  CYGWIN*) cygwin=true ;;\n+  MINGW*) mingw=true;;\n+  Darwin*) darwin=true\n+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n+    if [ -z \"$JAVA_HOME\" ]; then\n+      if [ -x \"/usr/libexec/java_home\" ]; then\n+        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n+      else\n+        export JAVA_HOME=\"/Library/Java/Home\"\n+      fi\n+    fi\n+    ;;\n+esac\n+\n+if [ -z \"$JAVA_HOME\" ] ; then\n+  if [ -r /etc/gentoo-release ] ; then\n+    JAVA_HOME=`java-config --jre-home`\n+  fi\n+fi\n+\n+if [ -z \"$M2_HOME\" ] ; then\n+  ## resolve links - $0 may be a link to maven's home\n+  PRG=\"$0\"\n+\n+  # need this for relative symlinks\n+  while [ -h \"$PRG\" ] ; do\n+    ls=`ls -ld \"$PRG\"`\n+    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n+    if expr \"$link\" : '/.*' > /dev/null; then\n+      PRG=\"$link\"\n+    else\n+      PRG=\"`dirname \"$PRG\"`/$link\"\n+    fi\n+  done\n+\n+  saveddir=`pwd`\n+\n+  M2_HOME=`dirname \"$PRG\"`/..\n+\n+  # make it fully qualified\n+  M2_HOME=`cd \"$M2_HOME\" && pwd`\n+\n+  cd \"$saveddir\"\n+  # echo Using m2 at $M2_HOME\n+fi\n+\n+# For Cygwin, ensure paths are in UNIX format before anything is touched\n+if $cygwin ; then\n+  [ -n \"$M2_HOME\" ] &&\n+    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n+  [ -n \"$JAVA_HOME\" ] &&\n+    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n+  [ -n \"$CLASSPATH\" ] &&\n+    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\n+fi\n+\n+# For Mingw, ensure paths are in UNIX format before anything is touched\n+if $mingw ; then\n+  [ -n \"$M2_HOME\" ] &&\n+    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n+  [ -n \"$JAVA_HOME\" ] &&\n+    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n+fi\n+\n+if [ -z \"$JAVA_HOME\" ]; then\n+  javaExecutable=\"`which javac`\"\n+  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n+    # readlink(1) is not available as standard on Solaris 10.\n+    readLink=`which readlink`\n+    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n+      if $darwin ; then\n+        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n+        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n+      else\n+        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n+      fi\n+      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n+      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n+      JAVA_HOME=\"$javaHome\"\n+      export JAVA_HOME\n+    fi\n+  fi\n+fi\n+\n+if [ -z \"$JAVACMD\" ] ; then\n+  if [ -n \"$JAVA_HOME\"  ] ; then\n+    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+      # IBM's JDK on AIX uses strange locations for the executables\n+      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+    else\n+      JAVACMD=\"$JAVA_HOME/bin/java\"\n+    fi\n+  else\n+    JAVACMD=\"`which java`\"\n+  fi\n+fi\n+\n+if [ ! -x \"$JAVACMD\" ] ; then\n+  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n+  echo \"  We cannot execute $JAVACMD\" >&2\n+  exit 1\n+fi\n+\n+if [ -z \"$JAVA_HOME\" ] ; then\n+  echo \"Warning: JAVA_HOME environment variable is not set.\"\n+fi\n+\n+CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n+\n+# traverses directory structure from process work directory to filesystem root\n+# first directory with .mvn subdirectory is considered project base directory\n+find_maven_basedir() {\n+\n+  if [ -z \"$1\" ]\n+  then\n+    echo \"Path not specified to find_maven_basedir\"\n+    return 1\n+  fi\n+\n+  basedir=\"$1\"\n+  wdir=\"$1\"\n+  while [ \"$wdir\" != '/' ] ; do\n+    if [ -d \"$wdir\"/.mvn ] ; then\n+      basedir=$wdir\n+      break\n+    fi\n+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n+    if [ -d \"${wdir}\" ]; then\n+      wdir=`cd \"$wdir/..\"; pwd`\n+    fi\n+    # end of workaround\n+  done\n+  echo \"${basedir}\"\n+}\n+\n+# concatenates all lines of a file\n+concat_lines() {\n+  if [ -f \"$1\" ]; then\n+    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n+  fi\n+}\n+\n+BASE_DIR=`find_maven_basedir \"$(pwd)\"`\n+if [ -z \"$BASE_DIR\" ]; then\n+  exit 1;\n+fi\n+\n+##########################################################################################\n+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n+# This allows using the maven wrapper in projects that prohibit checking in binary data.\n+##########################################################################################\n+if [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n+    if [ \"$MVNW_VERBOSE\" = true ]; then\n+      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n+    fi\n+else\n+    if [ \"$MVNW_VERBOSE\" = true ]; then\n+      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n+    fi\n+    if [ -n \"$MVNW_REPOURL\" ]; then\n+      jarUrl=\"$MVNW_REPOURL/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n+    else\n+      jarUrl=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n+    fi\n+    while IFS=\"=\" read key value; do\n+      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n+      esac\n+    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n+    if [ \"$MVNW_VERBOSE\" = true ]; then\n+      echo \"Downloading from: $jarUrl\"\n+    fi\n+    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n+    if $cygwin; then\n+      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n+    fi\n+\n+    if command -v wget > /dev/null; then\n+        if [ \"$MVNW_VERBOSE\" = true ]; then\n+          echo \"Found wget ... using wget\"\n+        fi\n+        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n+            wget \"$jarUrl\" -O \"$wrapperJarPath\"\n+        else\n+            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\"\n+        fi\n+    elif command -v curl > /dev/null; then\n+        if [ \"$MVNW_VERBOSE\" = true ]; then\n+          echo \"Found curl ... using curl\"\n+        fi\n+        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n+            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n+        else\n+            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n+        fi\n+\n+    else\n+        if [ \"$MVNW_VERBOSE\" = true ]; then\n+          echo \"Falling back to using Java to download\"\n+        fi\n+        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n+        # For Cygwin, switch paths to Windows format before running javac\n+        if $cygwin; then\n+          javaClass=`cygpath --path --windows \"$javaClass\"`\n+        fi\n+        if [ -e \"$javaClass\" ]; then\n+            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n+                if [ \"$MVNW_VERBOSE\" = true ]; then\n+                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n+                fi\n+                # Compiling the Java class\n+                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n+            fi\n+            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n+                # Running the downloader\n+                if [ \"$MVNW_VERBOSE\" = true ]; then\n+                  echo \" - Running MavenWrapperDownloader.java ...\"\n+                fi\n+                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n+            fi\n+        fi\n+    fi\n+fi\n+##########################################################################################\n+# End of extension\n+##########################################################################################\n+\n+export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\n+if [ \"$MVNW_VERBOSE\" = true ]; then\n+  echo $MAVEN_PROJECTBASEDIR\n+fi\n+MAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin; then\n+  [ -n \"$M2_HOME\" ] &&\n+    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n+  [ -n \"$JAVA_HOME\" ] &&\n+    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n+  [ -n \"$CLASSPATH\" ] &&\n+    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n+  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n+    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\n+fi\n+\n+# Provide a \"standardized\" way to retrieve the CLI args that will\n+# work with both Windows and non-Windows executions.\n+MAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\n+export MAVEN_CMD_LINE_ARGS\n+\n+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n+\n+exec \"$JAVACMD\" \\\n+  $MAVEN_OPTS \\\n+  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n+  \"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\""
  },
  {
    "sha": "c8d43372c986d97911cdc21bd87e0cbe3d83bdda",
    "filename": "HomeWorks/Spring_Hibernate/hiber/mvnw.cmd",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/mvnw.cmd",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/mvnw.cmd",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/mvnw.cmd?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,182 @@\n+@REM ----------------------------------------------------------------------------\n+@REM Licensed to the Apache Software Foundation (ASF) under one\n+@REM or more contributor license agreements.  See the NOTICE file\n+@REM distributed with this work for additional information\n+@REM regarding copyright ownership.  The ASF licenses this file\n+@REM to you under the Apache License, Version 2.0 (the\n+@REM \"License\"); you may not use this file except in compliance\n+@REM with the License.  You may obtain a copy of the License at\n+@REM\n+@REM    https://www.apache.org/licenses/LICENSE-2.0\n+@REM\n+@REM Unless required by applicable law or agreed to in writing,\n+@REM software distributed under the License is distributed on an\n+@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+@REM KIND, either express or implied.  See the License for the\n+@REM specific language governing permissions and limitations\n+@REM under the License.\n+@REM ----------------------------------------------------------------------------\n+\n+@REM ----------------------------------------------------------------------------\n+@REM Maven Start Up Batch script\n+@REM\n+@REM Required ENV vars:\n+@REM JAVA_HOME - location of a JDK home dir\n+@REM\n+@REM Optional ENV vars\n+@REM M2_HOME - location of maven2's installed home dir\n+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\n+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\n+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\n+@REM     e.g. to debug Maven itself, use\n+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n+@REM ----------------------------------------------------------------------------\n+\n+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\n+@echo off\n+@REM set title of command window\n+title %0\n+@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\n+@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\n+\n+@REM set %HOME% to equivalent of $HOME\n+if \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\n+\n+@REM Execute a user defined script before this one\n+if not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\n+@REM check for pre script, once with legacy .bat ending and once with .cmd ending\n+if exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"\n+if exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"\n+:skipRcPre\n+\n+@setlocal\n+\n+set ERROR_CODE=0\n+\n+@REM To isolate internal variables from possible post scripts, we use another setlocal\n+@setlocal\n+\n+@REM ==== START VALIDATION ====\n+if not \"%JAVA_HOME%\" == \"\" goto OkJHome\n+\n+echo.\n+echo Error: JAVA_HOME not found in your environment. >&2\n+echo Please set the JAVA_HOME variable in your environment to match the >&2\n+echo location of your Java installation. >&2\n+echo.\n+goto error\n+\n+:OkJHome\n+if exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\n+\n+echo.\n+echo Error: JAVA_HOME is set to an invalid directory. >&2\n+echo JAVA_HOME = \"%JAVA_HOME%\" >&2\n+echo Please set the JAVA_HOME variable in your environment to match the >&2\n+echo location of your Java installation. >&2\n+echo.\n+goto error\n+\n+@REM ==== END VALIDATION ====\n+\n+:init\n+\n+@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\n+@REM Fallback to current working directory if not found.\n+\n+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\n+IF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\n+\n+set EXEC_DIR=%CD%\n+set WDIR=%EXEC_DIR%\n+:findBaseDir\n+IF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\n+cd ..\n+IF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\n+set WDIR=%CD%\n+goto findBaseDir\n+\n+:baseDirFound\n+set MAVEN_PROJECTBASEDIR=%WDIR%\n+cd \"%EXEC_DIR%\"\n+goto endDetectBaseDir\n+\n+:baseDirNotFound\n+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%\n+cd \"%EXEC_DIR%\"\n+\n+:endDetectBaseDir\n+\n+IF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\n+\n+@setlocal EnableExtensions EnableDelayedExpansion\n+for /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\n+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\n+\n+:endReadAdditionalConfig\n+\n+SET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\n+set WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\n+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n+\n+set DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n+\n+FOR /F \"tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\n+    IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B\n+)\n+\n+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\n+if exist %WRAPPER_JAR% (\n+    if \"%MVNW_VERBOSE%\" == \"true\" (\n+        echo Found %WRAPPER_JAR%\n+    )\n+) else (\n+    if not \"%MVNW_REPOURL%\" == \"\" (\n+        SET DOWNLOAD_URL=\"%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n+    )\n+    if \"%MVNW_VERBOSE%\" == \"true\" (\n+        echo Couldn't find %WRAPPER_JAR%, downloading it ...\n+        echo Downloading from: %DOWNLOAD_URL%\n+    )\n+\n+    powershell -Command \"&{\"^\n+\t\t\"$webclient = new-object System.Net.WebClient;\"^\n+\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\n+\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\n+\t\t\"}\"^\n+\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"^\n+\t\t\"}\"\n+    if \"%MVNW_VERBOSE%\" == \"true\" (\n+        echo Finished downloading %WRAPPER_JAR%\n+    )\n+)\n+@REM End of extension\n+\n+@REM Provide a \"standardized\" way to retrieve the CLI args that will\n+@REM work with both Windows and non-Windows executions.\n+set MAVEN_CMD_LINE_ARGS=%*\n+\n+%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\n+if ERRORLEVEL 1 goto error\n+goto end\n+\n+:error\n+set ERROR_CODE=1\n+\n+:end\n+@endlocal & set ERROR_CODE=%ERROR_CODE%\n+\n+if not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost\n+@REM check for post script, once with legacy .bat ending and once with .cmd ending\n+if exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\n+if exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"\n+:skipRcPost\n+\n+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\n+if \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\n+\n+if \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n+\n+exit /B %ERROR_CODE%"
  },
  {
    "sha": "dc1ad9da702b1ba2b02f0a7c783902a504c068a1",
    "filename": "HomeWorks/Spring_Hibernate/hiber/pom.xml",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/pom.xml",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/pom.xml",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/pom.xml?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.4.3</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.geekbrains</groupId>\n+\t<artifactId>hiber</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>hiber</name>\n+\t<description>Hibernate</description>\n+\t<properties>\n+\t\t<java.version>11</java.version>\n+\t</properties>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.postgresql</groupId>\n+\t\t\t<artifactId>postgresql</artifactId>\n+\t\t\t<version>42.2.5</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.hibernate</groupId>\n+\t\t\t<artifactId>hibernate-validator</artifactId>\n+\t\t\t<version>5.4.3.Final</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.hibernate</groupId>\n+\t\t\t<artifactId>hibernate-entitymanager</artifactId>\n+\t\t\t<version>5.4.28.Final</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.16</version>\n+\t\t\t<scope>provided</scope>\n+\t\t</dependency>\n+\t</dependencies>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n+\t\t\t</plugin>\n+\t\t</plugins>\n+\t</build>\n+\n+</project>"
  },
  {
    "sha": "f90c212ac4a86836e79933e0ea3e68c1bde179c1",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/HiberApplication.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/HiberApplication.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/HiberApplication.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/HiberApplication.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,53 @@\n+package com.geekbrains.hiber;\n+\n+import com.geekbrains.hiber.entities.Customer;\n+import com.geekbrains.hiber.entities.Product;\n+import com.geekbrains.hiber.entities.ProductCustomerID;\n+import com.geekbrains.hiber.repositories.CustomerRepository;\n+import com.geekbrains.hiber.repositories.ProductRepository;\n+import com.geekbrains.hiber.services.CustomerService;\n+import com.geekbrains.hiber.services.ProductService;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@SpringBootApplication\n+public class HiberApplication {\n+\n+\tprivate static CustomerRepository customerRepository;\n+\n+\tprivate static ProductRepository productRepository;\n+\n+\tprivate static ProductService productService;\n+\n+\tprivate static CustomerService customerService;\n+\n+\tprivate static ConfigurableApplicationContext context;\n+\n+\n+\tpublic static void main(String[] args) {\n+\n+\t\tcontext = SpringApplication.run(HiberApplication.class, args);\n+\t\tcustomerRepository = (CustomerRepository) context.getBean(\"customerRepository\");\n+\t\tproductRepository = (ProductRepository) context.getBean(\"productRepository\");\n+\t\tproductService = (ProductService) context.getBean(\"productService\");\n+\t\tcustomerService = (CustomerService) context.getBean(\"customerService\");\n+\t\tList<Customer> customerList = new ArrayList<>();\n+\t\tcustomerList.add(customerRepository.createCustomer(\"Sergey\"));\n+\t\tlong id = productRepository.createExample(102, \"Test Product\",customerList);\n+\t\tSystem.out.println(id);\n+\t\tproductRepository.readAndPrintExample(1);\n+\t\tproductRepository.readAndPrintExample( id);\n+\t\tproductRepository.deleteExample( id);\n+\t\tcustomerRepository.deleteExample( customerList.get(0).getId());\n+\t\tproductService.getCustomers(2).forEach(System.out::println);\n+\t\tcustomerService.getProducts(1).forEach(System.out::println);\n+\t\tList<Product> products = customerService.getProducts(1);\n+\t\tProduct product = products.get(0);\n+\t\tproduct.getProductCustomers().forEach(s -> System.out.println(s.getCost()));\n+\t}\n+\n+}"
  },
  {
    "sha": "2edafd096d397e62362599c04a6c1b8db04e949c",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/Customer.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/Customer.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/Customer.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/Customer.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,45 @@\n+package com.geekbrains.hiber.entities;\n+\n+import lombok.*;\n+import org.hibernate.annotations.LazyCollection;\n+import org.hibernate.annotations.LazyCollectionOption;\n+\n+import javax.persistence.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Builder\n+@Entity\n+@Table(name = \"customers\")\n+public class Customer {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @NonNull\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})\n+    @LazyCollection(LazyCollectionOption.FALSE)\n+    @JoinTable(\n+            name = \"products_customers\",\n+            joinColumns = @JoinColumn(name = \"customer_id\"),\n+            inverseJoinColumns = @JoinColumn(name = \"product_id\")\n+    )\n+    private List<Product> products;\n+\n+    @OneToMany(mappedBy = \"customer\")\n+    @LazyCollection(LazyCollectionOption.FALSE)\n+    private List<ProductCustomer> productCustomers = new ArrayList<>();\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"Customer [id = %d, name = %s]\", id, name);\n+    }\n+}"
  },
  {
    "sha": "3edc4f0580149ce6a74de82b2382b2a4774999fe",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/Product.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/Product.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/Product.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/Product.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,51 @@\n+package com.geekbrains.hiber.entities;\n+import lombok.*;\n+import org.hibernate.annotations.LazyCollection;\n+import org.hibernate.annotations.LazyCollectionOption;\n+\n+import javax.persistence.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Builder\n+@Entity\n+@Table(name = \"products\")\n+public class Product {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"id\")\n+    private Long id;\n+\n+    @NonNull\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @NonNull\n+    @Column(name = \"cost\")\n+    private int cost;\n+\n+    @ManyToMany\n+    @JoinTable(\n+            name = \"products_customers\",\n+            joinColumns = @JoinColumn(name = \"product_id\"),\n+            inverseJoinColumns = @JoinColumn(name = \"customer_id\")\n+    )\n+    @LazyCollection(LazyCollectionOption.FALSE)\n+    private List<Customer> customers;\n+\n+    @OneToMany(mappedBy = \"product\")\n+    @LazyCollection(LazyCollectionOption.FALSE)\n+    private List<ProductCustomer> productCustomers = new ArrayList<>();\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"Product [id = %d, title = %s, cost=%d]\", id, title, cost);\n+    }\n+\n+}\n+\n+"
  },
  {
    "sha": "bf4c1700dd8988c2c026dbc84790a22d9ef9d0f4",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/ProductCustomer.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/ProductCustomer.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/ProductCustomer.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/ProductCustomer.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,30 @@\n+package com.geekbrains.hiber.entities;\n+\n+import lombok.*;\n+\n+import javax.persistence.*;\n+\n+@Data\n+@NoArgsConstructor\n+@Entity\n+@Table(name = \"products_customers\")\n+public class ProductCustomer {\n+\n+    @EmbeddedId\n+    ProductCustomerID id;\n+\n+    @ManyToOne\n+    @MapsId(\"productId\")\n+    @JoinColumn(name = \"product_id\")\n+    Product product;\n+\n+    @ManyToOne\n+    @MapsId(\"customerId\")\n+    @JoinColumn(name = \"customer_id\")\n+    Customer customer;\n+\n+    @Column(name = \"cost\")\n+    private Long cost;\n+\n+}\n+"
  },
  {
    "sha": "c6f090303aff3d82d4f77fe926a6488c34af41b3",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/ProductCustomerID.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/ProductCustomerID.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/ProductCustomerID.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/entities/ProductCustomerID.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,28 @@\n+package com.geekbrains.hiber.entities;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import java.io.Serializable;\n+\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Embeddable\n+public class ProductCustomerID implements Serializable {\n+\n+    @NonNull\n+    @Column(name = \"customer_id\")\n+    Long customerId;\n+\n+    @NonNull\n+    @Column(name = \"product_id\")\n+    Long productId;\n+\n+}"
  },
  {
    "sha": "0ff9032d726d0c62de12e20fcf5f0395ce59a619",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/repositories/CustomerRepository.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/repositories/CustomerRepository.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/repositories/CustomerRepository.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/repositories/CustomerRepository.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,77 @@\n+package com.geekbrains.hiber.repositories;\n+\n+import com.geekbrains.hiber.entities.Customer;\n+import com.geekbrains.hiber.entities.Product;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import javax.persistence.EntityManagerFactory;\n+import java.util.List;\n+\n+@Component\n+public class CustomerRepository{\n+\n+    private static SessionFactory sessionFactory;\n+\n+    @Autowired\n+    public CustomerRepository(EntityManagerFactory factory) {\n+        if(factory.unwrap(SessionFactory.class) == null){\n+            throw new NullPointerException(\"factory is not a hibernate factory\");\n+        }\n+        this.sessionFactory = factory.unwrap(SessionFactory.class);\n+    }\n+\n+    public static void shutdown() {\n+        sessionFactory.close();\n+    }\n+\n+    public  Customer createCustomer(String nameCustomer) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Customer customer = Customer.builder().name(nameCustomer).build();\n+            session.save(customer);\n+            session.getTransaction().commit();\n+            return customer;\n+        }\n+    }\n+\n+    public  void readAndPrintExample(long id) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Customer simpleItem = session.get(Customer.class, id);\n+            System.out.println(simpleItem);\n+            session.getTransaction().commit();\n+        }\n+    }\n+\n+    public  List<Product> readProducts(long id) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Customer simpleItem = session.get(Customer.class, id);\n+            List<Product> productList = simpleItem.getProducts();\n+            session.getTransaction().commit();\n+            return productList;\n+        }\n+    }\n+\n+    public  void updateExample(long id, String name) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Customer simpleItem = session.get(Customer.class, id);\n+            simpleItem.setName(name);\n+            System.out.println(simpleItem);\n+            session.getTransaction().commit();\n+        }\n+    }\n+\n+    public  void deleteExample(long id) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Customer simpleItem = session.get(Customer.class, id);\n+            session.delete(simpleItem);\n+            session.getTransaction().commit();\n+        }\n+    }\n+}"
  },
  {
    "sha": "fe72533fbb33c85d3a84fe561493cde4f8f58f47",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/repositories/ProductRepository.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/repositories/ProductRepository.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/repositories/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/repositories/ProductRepository.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,92 @@\n+package com.geekbrains.hiber.repositories;\n+\n+import com.geekbrains.hiber.entities.Customer;\n+import com.geekbrains.hiber.entities.Product;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import javax.persistence.EntityManagerFactory;\n+import java.util.List;\n+\n+@Component\n+public class ProductRepository {\n+\n+    private static SessionFactory sessionFactory;\n+\n+    @Autowired\n+    public ProductRepository(EntityManagerFactory factory) {\n+        if(factory.unwrap(SessionFactory.class) == null){\n+            throw new NullPointerException(\"factory is not a hibernate factory\");\n+        }\n+        this.sessionFactory = factory.unwrap(SessionFactory.class);\n+    }\n+\n+    public  void shutdown() {\n+        sessionFactory.close();\n+    }\n+\n+\n+\n+    public  Long createExample(int cost, String title) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product product = Product.builder().cost(cost).title(title).build();\n+            session.save(product);\n+            session.getTransaction().commit();\n+            return product.getId();\n+        }\n+    }\n+\n+    public  Long createExample(int cost, String title, List<Customer> customers) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product product = Product.builder().cost(cost).title(title).customers(customers).build();\n+            session.save(product);\n+            session.getTransaction().commit();\n+            return product.getId();\n+        }\n+    }\n+\n+    public  void readAndPrintExample(long id) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product simpleItem = session.get(Product.class, id);\n+            System.out.println(simpleItem);\n+            List<Customer> customers = simpleItem.getCustomers();\n+            customers.forEach(System.out::println);\n+            session.getTransaction().commit();\n+        }\n+    }\n+\n+    public  List<Customer> readCustomers(long id) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product simpleItem = session.get(Product.class, id);\n+            List<Customer> customerList = simpleItem.getCustomers();\n+            session.getTransaction().commit();\n+            return customerList;\n+        }\n+    }\n+\n+    public  void updateExample(long id, int cost) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product simpleItem = session.get(Product.class, id);\n+            simpleItem.setCost(cost);\n+            System.out.println(simpleItem);\n+            session.getTransaction().commit();\n+        }\n+    }\n+\n+    public  void deleteExample(long id) {\n+        try (Session session = sessionFactory.getCurrentSession()) {\n+            session.beginTransaction();\n+            Product simpleItem = session.get(Product.class, id);\n+            session.delete(simpleItem);\n+            session.getTransaction().commit();\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "ffa90c6ed1e8e80379029f6ff0bbea480972766e",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/services/CustomerService.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/services/CustomerService.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/services/CustomerService.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/services/CustomerService.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,17 @@\n+package com.geekbrains.hiber.services;\n+\n+import com.geekbrains.hiber.entities.Product;\n+import com.geekbrains.hiber.repositories.CustomerRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+\n+@Service\n+public class CustomerService {\n+    @Autowired\n+    CustomerRepository repo;\n+    public List<Product> getProducts(long id){\n+        return repo.readProducts(id);\n+    }\n+}"
  },
  {
    "sha": "c68cbe4346f1a61ca58ea73dc71438a9eb1c79ce",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/services/ProductService.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/services/ProductService.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/services/ProductService.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/java/com/geekbrains/hiber/services/ProductService.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,20 @@\n+package com.geekbrains.hiber.services;\n+\n+import com.geekbrains.hiber.entities.Customer;\n+import com.geekbrains.hiber.repositories.ProductRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+@Service\n+public class ProductService {\n+\n+    @Autowired\n+    ProductRepository repo;\n+\n+    public List<Customer> getCustomers(long id){\n+        return repo.readCustomers(id);\n+    }\n+}"
  },
  {
    "sha": "b67892578498b72a86032acc0d190d3dd0206d22",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/resources/application.properties",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/resources/application.properties",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/resources/application.properties?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,8 @@\n+spring.datasource.driver-class-name=org.postgresql.Driver\n+spring.datasource.url=jdbc:postgresql://localhost:5432/postgres?currentSchema=public\n+spring.datasource.username=postgres\n+spring.datasource.password=admin\n+spring.jpa.show-sql=true\n+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect\n+spring.jpa.properties.hibernate.current_session_context_class=thread\n+"
  },
  {
    "sha": "2f93ffb14ae16f1e86dc90a7f7212454c81d4456",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/main/resources/sql/full.sql",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/resources/sql/full.sql",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/main/resources/sql/full.sql",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/main/resources/sql/full.sql?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,29 @@\n+BEGIN;\n+\n+DROP TABLE IF EXISTS products CASCADE;\n+CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), cost int);\n+INSERT INTO products (title, cost) VALUES\n+('box', 10),\n+('sphere', 20),\n+('maul', 100),\n+('door', 50),\n+('camera', 500);\n+\n+DROP TABLE IF EXISTS customers CASCADE;\n+CREATE TABLE customers (id bigserial PRIMARY KEY, name VARCHAR(255));\n+INSERT INTO customers (name) VALUES\n+('Ivan'),\n+('Petr');\n+\n+DROP TABLE IF EXISTS products_customers CASCADE;\n+CREATE TABLE products_customers (product_id bigint, customer_id bigint, FOREIGN KEY (product_id) REFERENCES products (id), FOREIGN KEY (customer_id) REFERENCES customers (id), cost bigint);\n+INSERT INTO products_customers (product_id, customer_id, cost) VALUES\n+(1, 1, 10),\n+(2, 1, 21),\n+(3, 1, 100),\n+(4, 1, 50),\n+(5, 1, 500),\n+(1, 2, 11),\n+(2, 2, 20);\n+\n+COMMIT;\n\\ No newline at end of file"
  },
  {
    "sha": "583cf74ed31d97462b78e73920fc9fa54a6301ef",
    "filename": "HomeWorks/Spring_Hibernate/hiber/src/test/java/com/geekbrains/hiber/HiberApplicationTests.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/kesch9/GB_Spring/blob/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/test/java/com/geekbrains/hiber/HiberApplicationTests.java",
    "raw_url": "https://github.com/kesch9/GB_Spring/raw/ac683037b42c83d976ad4cb773605118f986e445/HomeWorks/Spring_Hibernate/hiber/src/test/java/com/geekbrains/hiber/HiberApplicationTests.java",
    "contents_url": "https://api.github.com/repos/kesch9/GB_Spring/contents/HomeWorks/Spring_Hibernate/hiber/src/test/java/com/geekbrains/hiber/HiberApplicationTests.java?ref=ac683037b42c83d976ad4cb773605118f986e445",
    "patch": "@@ -0,0 +1,13 @@\n+package com.geekbrains.hiber;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class HiberApplicationTests {\n+\n+\t@Test\n+\tvoid contextLoads() {\n+\t}\n+\n+}"
  }
]
