[
  {
    "sha": "fb2818147a05f4a5dbdf902d564a294631268c79",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/hugegraph/hugegraph-common/blob/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/pom.xml",
    "raw_url": "https://github.com/hugegraph/hugegraph-common/raw/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/pom.xml",
    "contents_url": "https://api.github.com/repos/hugegraph/hugegraph-common/contents/pom.xml?ref=52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f",
    "patch": "@@ -6,7 +6,7 @@\n \n     <groupId>com.baidu.hugegraph</groupId>\n     <artifactId>hugegraph-common</artifactId>\n-    <version>1.8.5</version>\n+    <version>1.8.6</version>\n \n     <name>hugegraph-common</name>\n     <url>https://github.com/hugegraph/hugegraph-common</url>\n@@ -266,7 +266,7 @@\n                         <manifestEntries>\n                             <!-- Must be on one line, otherwise the automatic\n                                  upgrade script cannot replace the version number -->\n-                            <Implementation-Version>1.8.5.0</Implementation-Version>\n+                            <Implementation-Version>1.8.6.0</Implementation-Version>\n                         </manifestEntries>\n                     </archive>\n                 </configuration>"
  },
  {
    "sha": "df19c22be092beeb082ba2791cdb1260f1fcbca3",
    "filename": "src/main/java/com/baidu/hugegraph/util/Bytes.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/hugegraph/hugegraph-common/blob/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/main/java/com/baidu/hugegraph/util/Bytes.java",
    "raw_url": "https://github.com/hugegraph/hugegraph-common/raw/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/main/java/com/baidu/hugegraph/util/Bytes.java",
    "contents_url": "https://api.github.com/repos/hugegraph/hugegraph-common/contents/src/main/java/com/baidu/hugegraph/util/Bytes.java?ref=52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f",
    "patch": "@@ -36,6 +36,9 @@\n     public static final long KB = BASE;\n     public static final long MB = KB * BASE;\n     public static final long GB = MB * BASE;\n+    public static final long TB = GB * KB;\n+    public static final long PB = GB * MB;\n+    public static final long EB = GB * GB;\n \n     private static final Comparator<byte[]> CMP =\n                          UnsignedBytes.lexicographicalComparator();"
  },
  {
    "sha": "60c626f85b9125f6f6bb49fde111749d282e1f67",
    "filename": "src/main/java/com/baidu/hugegraph/util/UnitUtil.java",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/hugegraph/hugegraph-common/blob/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/main/java/com/baidu/hugegraph/util/UnitUtil.java",
    "raw_url": "https://github.com/hugegraph/hugegraph-common/raw/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/main/java/com/baidu/hugegraph/util/UnitUtil.java",
    "contents_url": "https://api.github.com/repos/hugegraph/hugegraph-common/contents/src/main/java/com/baidu/hugegraph/util/UnitUtil.java?ref=52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f",
    "patch": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.util;\n+\n+import java.math.BigDecimal;\n+import java.time.Duration;\n+\n+public final class UnitUtil {\n+\n+    public static double bytesToMB(long bytes) {\n+        return doubleWith2Scale(bytes / (double) Bytes.MB);\n+    }\n+\n+    public static double bytesToGB(long bytes) {\n+        return doubleWith2Scale(bytes / (double) Bytes.GB);\n+    }\n+\n+    public static double doubleWith2Scale(double value) {\n+        BigDecimal decimal = new BigDecimal(value);\n+        return decimal.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();\n+    }\n+\n+    public static String bytesToReadableString(long bytes) {\n+        // NOTE: FileUtils.byteCountToDisplaySize() lost decimal precision\n+        final String[] units = {\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"};\n+        if (bytes <= 0L) {\n+            return \"0 B\";\n+        }\n+        int i = (int) (Math.log(bytes) / Math.log(1024));\n+        E.checkArgument(i < units.length,\n+                        \"The bytes parameter is out of %s unit: %s\",\n+                        units[units.length - 1], bytes);\n+        double value = bytes / Math.pow(1024, i);\n+        if (value % 1L == 0L) {\n+            return ((long) value) + \" \" + units[i];\n+        } else {\n+            return doubleWith2Scale(value) + \" \" + units[i];\n+        }\n+    }\n+\n+    public static long bytesFromReadableString(String valueWithUnit) {\n+        int spacePos = valueWithUnit.indexOf(\" \");\n+        E.checkArgument(spacePos >= 0,\n+                        \"Invalid readable bytes '%s', \" +\n+                        \"expect format like '10 MB'\", valueWithUnit);\n+        String unit = valueWithUnit.substring(spacePos + 1);\n+\n+        long factor = 0L;\n+        switch (unit.trim().toUpperCase()) {\n+            case \"B\":\n+            case \"BYTE\":\n+            case \"BYTES\":\n+                factor = 1L;\n+                break;\n+            case \"KB\":\n+            case \"KIB\":\n+                factor = Bytes.KB;\n+                break;\n+            case \"MB\":\n+            case \"MIB\":\n+                factor = Bytes.MB;\n+                break;\n+            case \"GB\":\n+            case \"GIB\":\n+                factor = Bytes.GB;\n+                break;\n+            case \"TB\":\n+            case \"TIB\":\n+                factor = Bytes.TB;\n+                break;\n+            case \"PB\":\n+            case \"PIB\":\n+                factor = Bytes.PB;\n+                break;\n+            case \"EB\":\n+            case \"EIB\":\n+                factor = Bytes.EB;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unrecognized unit \" + unit);\n+        }\n+\n+        double value;\n+        try {\n+            value = Double.parseDouble(valueWithUnit.substring(0, spacePos));\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(String.format(\n+                      \"Invalid parameter(not number): '%s'\", valueWithUnit), e);\n+        }\n+        value = value * factor;\n+        E.checkArgument(value <= Long.MAX_VALUE,\n+                        \"The value %s from parameter '%s' is out of range\",\n+                        value, valueWithUnit);\n+        return (long) value;\n+    }\n+\n+    public static String timestampToReadableString(long time) {\n+        Duration duration = Duration.ofMillis(time);\n+        long days = duration.toDays();\n+        long hours = duration.toHours();\n+        long minutes = duration.toMinutes();\n+        long seconds = duration.getSeconds();\n+\n+        if (days > 0) {\n+            return String.format(\"%dd%dh%dm%ds\",\n+                                 days,\n+                                 hours % 24,\n+                                 minutes % 60,\n+                                 seconds % 60);\n+        } else if (hours > 0) {\n+            return String.format(\"%dh%dm%ds\",\n+                                 hours,\n+                                 minutes % 60,\n+                                 seconds % 60);\n+        } else if (minutes > 0) {\n+            return String.format(\"%dm%ds\",\n+                                 minutes,\n+                                 seconds % 60);\n+        } else if (seconds > 0) {\n+            long ms = duration.toMillis() % 1000L;\n+            if (ms > 0L) {\n+                return String.format(\"%ds%dms\", seconds, ms);\n+            } else {\n+                return String.format(\"%ds\", seconds);\n+            }\n+        } else {\n+            return String.format(\"%dms\", duration.toMillis());\n+        }\n+    }\n+\n+    public static long timestampFromReadableString(String valueWithUnit) {\n+        long ms = 0L;\n+        // Adapt format 'nDnHnMnS' to 'PnYnMnDTnHnMnS'\n+        String formatDuration = valueWithUnit.toUpperCase();\n+        if (formatDuration.indexOf('D') >= 0) {\n+            // Contains days\n+            assert !formatDuration.contains(\"MS\");\n+            formatDuration = \"P\" + formatDuration.replace(\"D\", \"DT\");\n+        } else {\n+            // Not exists days\n+            int msPos = formatDuration.indexOf(\"MS\");\n+            // If contains ms, rmove the ms part\n+            if (msPos >= 0) {\n+                int sPos = formatDuration.indexOf(\"S\");\n+                if (0 <= sPos && sPos < msPos) {\n+                    // If contains second part\n+                    sPos += 1;\n+                    ms = Long.parseLong(formatDuration.substring(sPos, msPos));\n+                    ms %= 1000L;\n+                    formatDuration = formatDuration.substring(0, sPos);\n+                } else {\n+                    // Not contains second part, only exists ms\n+                    ms = Long.parseLong(formatDuration.substring(0, msPos));\n+                    return ms;\n+                }\n+            } else {\n+                assert formatDuration.endsWith(\"S\");\n+            }\n+            formatDuration = \"PT\" + formatDuration;\n+        }\n+\n+        Duration duration = Duration.parse(formatDuration);\n+        return duration.toMillis() + ms;\n+    }\n+}"
  },
  {
    "sha": "0013e08d0fca6c2366259ad7b922a350aba887d1",
    "filename": "src/main/java/com/baidu/hugegraph/version/CommonVersion.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hugegraph/hugegraph-common/blob/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/main/java/com/baidu/hugegraph/version/CommonVersion.java",
    "raw_url": "https://github.com/hugegraph/hugegraph-common/raw/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/main/java/com/baidu/hugegraph/version/CommonVersion.java",
    "contents_url": "https://api.github.com/repos/hugegraph/hugegraph-common/contents/src/main/java/com/baidu/hugegraph/version/CommonVersion.java?ref=52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f",
    "patch": "@@ -27,5 +27,5 @@\n \n     // The second parameter of Version.of() is for all-in-one JAR\n     public static final Version VERSION = Version.of(CommonVersion.class,\n-                                                     \"1.8.5\");\n+                                                     \"1.8.6\");\n }"
  },
  {
    "sha": "f6855ec598d2a1353b36940d85ff13c971dd369b",
    "filename": "src/test/java/com/baidu/hugegraph/unit/UnitTestSuite.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/hugegraph/hugegraph-common/blob/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/test/java/com/baidu/hugegraph/unit/UnitTestSuite.java",
    "raw_url": "https://github.com/hugegraph/hugegraph-common/raw/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/test/java/com/baidu/hugegraph/unit/UnitTestSuite.java",
    "contents_url": "https://api.github.com/repos/hugegraph/hugegraph-common/contents/src/test/java/com/baidu/hugegraph/unit/UnitTestSuite.java?ref=52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f",
    "patch": "@@ -29,6 +29,7 @@\n import com.baidu.hugegraph.unit.concurrent.KeyLockTest;\n import com.baidu.hugegraph.unit.concurrent.LockGroupTest;\n import com.baidu.hugegraph.unit.concurrent.LockManagerTest;\n+import com.baidu.hugegraph.unit.concurrent.PausableScheduledThreadPoolTest;\n import com.baidu.hugegraph.unit.concurrent.RowLockTest;\n import com.baidu.hugegraph.unit.config.HugeConfigTest;\n import com.baidu.hugegraph.unit.config.OptionSpaceTest;\n@@ -50,7 +51,6 @@\n import com.baidu.hugegraph.unit.perf.PerfUtilTest;\n import com.baidu.hugegraph.unit.rest.RestClientTest;\n import com.baidu.hugegraph.unit.rest.RestResultTest;\n-import com.baidu.hugegraph.unit.concurrent.PausableScheduledThreadPoolTest;\n import com.baidu.hugegraph.unit.util.BytesTest;\n import com.baidu.hugegraph.unit.util.CollectionUtilTest;\n import com.baidu.hugegraph.unit.util.DateUtilTest;\n@@ -62,6 +62,7 @@\n import com.baidu.hugegraph.unit.util.ReflectionUtilTest;\n import com.baidu.hugegraph.unit.util.StringUtilTest;\n import com.baidu.hugegraph.unit.util.TimeUtilTest;\n+import com.baidu.hugegraph.unit.util.UnitUtilTest;\n import com.baidu.hugegraph.unit.util.VersionUtilTest;\n import com.baidu.hugegraph.unit.version.VersionTest;\n \n@@ -105,6 +106,7 @@\n     LongEncodingTest.class,\n     OrderLimitMapTest.class,\n     DateUtilTest.class,\n+    UnitUtilTest.class,\n \n     ExtraParamTest.class,\n     LicenseCreateParamTest.class,"
  },
  {
    "sha": "df8afcbb77321d1d76c9d5b64ff22868b03af6e9",
    "filename": "src/test/java/com/baidu/hugegraph/unit/util/ReflectionUtilTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/hugegraph/hugegraph-common/blob/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/test/java/com/baidu/hugegraph/unit/util/ReflectionUtilTest.java",
    "raw_url": "https://github.com/hugegraph/hugegraph-common/raw/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/test/java/com/baidu/hugegraph/unit/util/ReflectionUtilTest.java",
    "contents_url": "https://api.github.com/repos/hugegraph/hugegraph-common/contents/src/test/java/com/baidu/hugegraph/unit/util/ReflectionUtilTest.java?ref=52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f",
    "patch": "@@ -91,7 +91,7 @@ public void testClasses() throws IOException {\n         @SuppressWarnings(\"unchecked\")\n         List<ClassInfo> classes = IteratorUtils.toList(ReflectionUtil.classes(\n                                   \"com.baidu.hugegraph.util\"));\n-        Assert.assertEquals(16, classes.size());\n+        Assert.assertEquals(17, classes.size());\n         classes.sort((c1, c2) -> c1.getName().compareTo(c2.getName()));\n         Assert.assertEquals(\"com.baidu.hugegraph.util.Bytes\",\n                             classes.get(0).getName());\n@@ -100,7 +100,7 @@ public void testClasses() throws IOException {\n         Assert.assertEquals(\"com.baidu.hugegraph.util.CollectionUtil\",\n                             classes.get(2).getName());\n         Assert.assertEquals(\"com.baidu.hugegraph.util.VersionUtil\",\n-                            classes.get(15).getName());\n+                            classes.get(16).getName());\n     }\n \n     @Test"
  },
  {
    "sha": "a7e31e98d1e170792ab245c2f165f9d00979c72f",
    "filename": "src/test/java/com/baidu/hugegraph/unit/util/UnitUtilTest.java",
    "status": "added",
    "additions": 667,
    "deletions": 0,
    "changes": 667,
    "blob_url": "https://github.com/hugegraph/hugegraph-common/blob/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/test/java/com/baidu/hugegraph/unit/util/UnitUtilTest.java",
    "raw_url": "https://github.com/hugegraph/hugegraph-common/raw/52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f/src/test/java/com/baidu/hugegraph/unit/util/UnitUtilTest.java",
    "contents_url": "https://api.github.com/repos/hugegraph/hugegraph-common/contents/src/test/java/com/baidu/hugegraph/unit/util/UnitUtilTest.java?ref=52fbe8cc4d0aa08ebf4ef15a7b93f630c6240b7f",
    "patch": "@@ -0,0 +1,667 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.unit.util;\n+\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.util.Bytes;\n+import com.baidu.hugegraph.util.UnitUtil;\n+\n+public class UnitUtilTest {\n+\n+    @Test\n+    public void testBytesToMB() {\n+        double value = UnitUtil.bytesToMB(0L);\n+        Assert.assertEquals(0d, value, 0d);\n+\n+        // KB\n+        value = UnitUtil.bytesToMB(Bytes.KB * 1);\n+        Assert.assertEquals(0d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * 10);\n+        Assert.assertEquals(0.01d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * 100);\n+        Assert.assertEquals(0.1d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * (long) (134 * 1.024));\n+        Assert.assertEquals(0.13d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * (long) (135 * 1.024));\n+        Assert.assertEquals(0.13d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * (long) (136 * 1.024));\n+        Assert.assertEquals(0.14d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * (long) (144 * 1.024));\n+        Assert.assertEquals(0.14d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * (long) (754 * 1.024));\n+        Assert.assertEquals(0.75d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * (long) (755 * 1.024));\n+        Assert.assertEquals(0.75d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.KB * (long) (756 * 1.024));\n+        Assert.assertEquals(0.76d, value, 0d);\n+\n+        // MB\n+        value = UnitUtil.bytesToMB(Bytes.MB * 1);\n+        Assert.assertEquals(1d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.MB * 13);\n+        Assert.assertEquals(13d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.MB * 1357);\n+        Assert.assertEquals(1357d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.MB * 1357924680);\n+        Assert.assertEquals(1357924680d, value, 0d);\n+\n+        value = UnitUtil.bytesToMB(Bytes.MB * 1357924680246L);\n+        Assert.assertEquals(1357924680246d, value, 0d);\n+    }\n+\n+    @Test\n+    public void testBytesToGB() {\n+        double value = UnitUtil.bytesToGB(0L);\n+        Assert.assertEquals(0d, value, 0d);\n+\n+        // MB\n+        value = UnitUtil.bytesToGB(Bytes.MB * 1);\n+        Assert.assertEquals(0d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * 10);\n+        Assert.assertEquals(0.01d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * 100);\n+        Assert.assertEquals(0.10d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * (long) (134 * 1.024));\n+        Assert.assertEquals(0.13d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * (long) (135 * 1.024));\n+        Assert.assertEquals(0.13d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * (long) (136 * 1.024));\n+        Assert.assertEquals(0.14d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * (long) (144 * 1.024));\n+        Assert.assertEquals(0.14d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * (long) (754 * 1.024));\n+        Assert.assertEquals(0.75d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * (long) (755 * 1.024));\n+        Assert.assertEquals(0.75d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.MB * (long) (756 * 1.024));\n+        Assert.assertEquals(0.76d, value, 0d);\n+\n+        // GB\n+        value = UnitUtil.bytesToGB(Bytes.GB * 1);\n+        Assert.assertEquals(1d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.GB * 13);\n+        Assert.assertEquals(13d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.GB * 1357);\n+        Assert.assertEquals(1357d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.GB * 1357924680);\n+        Assert.assertEquals(1357924680d, value, 0d);\n+\n+        value = UnitUtil.bytesToGB(Bytes.GB * 7357924680L);\n+        Assert.assertEquals(7357924680d, value, 0d);\n+\n+        // Bytes overflow long value\n+        value = UnitUtil.bytesToGB(Bytes.GB * 9357924680L);\n+        Assert.assertEquals(-7.821944504E9, value, 0d);\n+    }\n+\n+    @Test\n+    public void testBytesToReadableString() {\n+        String value = UnitUtil.bytesToReadableString(0L);\n+        Assert.assertEquals(\"0 B\", value);\n+\n+        // B\n+        value = UnitUtil.bytesToReadableString(1);\n+        Assert.assertEquals(\"1 B\", value);\n+\n+        value = UnitUtil.bytesToReadableString(3);\n+        Assert.assertEquals(\"3 B\", value);\n+\n+        value = UnitUtil.bytesToReadableString(10);\n+        Assert.assertEquals(\"10 B\", value);\n+\n+        value = UnitUtil.bytesToReadableString(100);\n+        Assert.assertEquals(\"100 B\", value);\n+\n+        value = UnitUtil.bytesToReadableString(1000);\n+        Assert.assertEquals(\"1000 B\", value);\n+\n+        value = UnitUtil.bytesToReadableString(1023);\n+        Assert.assertEquals(\"1023 B\", value);\n+\n+        // KB\n+        value = UnitUtil.bytesToReadableString(1024);\n+        Assert.assertEquals(\"1 KB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.KB + 1);\n+        Assert.assertEquals(\"1.0 KB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.KB + 10);\n+        Assert.assertEquals(\"1.01 KB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.KB + 20);\n+        Assert.assertEquals(\"1.02 KB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.KB + 100);\n+        Assert.assertEquals(\"1.1 KB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.KB + 123);\n+        Assert.assertEquals(\"1.12 KB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.KB + 129);\n+        Assert.assertEquals(\"1.13 KB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.KB * 8 +\n+                                               (long) (755 * 1.024));\n+        Assert.assertEquals(\"8.75 KB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.KB * 168 +\n+                                               (long) (756 * 1.024));\n+        Assert.assertEquals(\"168.76 KB\", value);\n+\n+        // MB\n+        value = UnitUtil.bytesToReadableString(Bytes.KB * 1024);\n+        Assert.assertEquals(\"1 MB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.MB + 1 * Bytes.KB);\n+        Assert.assertEquals(\"1.0 MB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.MB + 10 * Bytes.KB);\n+        Assert.assertEquals(\"1.01 MB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.MB + 20 * Bytes.KB);\n+        Assert.assertEquals(\"1.02 MB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.MB + 100 * Bytes.KB);\n+        Assert.assertEquals(\"1.1 MB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.MB + 123 * Bytes.KB);\n+        Assert.assertEquals(\"1.12 MB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.MB + 129 * Bytes.KB);\n+        Assert.assertEquals(\"1.13 MB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.MB * 8 +\n+                                               (long) (755 * 1.024) * Bytes.KB);\n+        Assert.assertEquals(\"8.75 MB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.MB * 168 +\n+                                               (long) (756 * 1.024) * Bytes.KB);\n+        Assert.assertEquals(\"168.76 MB\", value);\n+\n+        // GB\n+        value = UnitUtil.bytesToReadableString(Bytes.MB * 1024);\n+        Assert.assertEquals(\"1 GB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.GB + 1 * Bytes.MB);\n+        Assert.assertEquals(\"1.0 GB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.GB + 10 * Bytes.MB);\n+        Assert.assertEquals(\"1.01 GB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.GB + 20 * Bytes.MB);\n+        Assert.assertEquals(\"1.02 GB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.GB + 100 * Bytes.MB);\n+        Assert.assertEquals(\"1.1 GB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.GB + 123 * Bytes.MB);\n+        Assert.assertEquals(\"1.12 GB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.GB + 129 * Bytes.MB);\n+        Assert.assertEquals(\"1.13 GB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.GB * 8 +\n+                                               (long) (755 * 1.024) * Bytes.MB);\n+        Assert.assertEquals(\"8.75 GB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.GB * 168 +\n+                                               (long) (756 * 1.024) * Bytes.MB);\n+        Assert.assertEquals(\"168.76 GB\", value);\n+\n+        // TB\n+        value = UnitUtil.bytesToReadableString(Bytes.GB * 1024);\n+        Assert.assertEquals(\"1 TB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.TB + 1 * Bytes.GB);\n+        Assert.assertEquals(\"1.0 TB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.TB + 10 * Bytes.GB);\n+        Assert.assertEquals(\"1.01 TB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.TB + 20 * Bytes.GB);\n+        Assert.assertEquals(\"1.02 TB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.TB + 100 * Bytes.GB);\n+        Assert.assertEquals(\"1.1 TB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.TB + 123 * Bytes.GB);\n+        Assert.assertEquals(\"1.12 TB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.TB + 129 * Bytes.GB);\n+        Assert.assertEquals(\"1.13 TB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.TB * 8 +\n+                                               (long) (755 * 1.024) * Bytes.GB);\n+        Assert.assertEquals(\"8.75 TB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.TB * 168 +\n+                                               (long) (756 * 1.024) * Bytes.GB);\n+        Assert.assertEquals(\"168.76 TB\", value);\n+\n+        // PB\n+        value = UnitUtil.bytesToReadableString(Bytes.TB * 1024);\n+        Assert.assertEquals(\"1 PB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.PB + 1 * Bytes.TB);\n+        Assert.assertEquals(\"1.0 PB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.PB + 10 * Bytes.TB);\n+        Assert.assertEquals(\"1.01 PB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.PB + 20 * Bytes.TB);\n+        Assert.assertEquals(\"1.02 PB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.PB + 100 * Bytes.TB);\n+        Assert.assertEquals(\"1.1 PB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.PB + 123 * Bytes.TB);\n+        Assert.assertEquals(\"1.12 PB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.PB + 129 * Bytes.TB);\n+        Assert.assertEquals(\"1.13 PB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.PB * 8 +\n+                                               (long) (755 * 1.024) * Bytes.TB);\n+        Assert.assertEquals(\"8.75 PB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.PB * 168 +\n+                                               (long) (756 * 1.024) * Bytes.TB);\n+        Assert.assertEquals(\"168.76 PB\", value);\n+\n+        // EB\n+        value = UnitUtil.bytesToReadableString(Bytes.PB * 1024);\n+        Assert.assertEquals(\"1 EB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.EB + 1 * Bytes.PB);\n+        Assert.assertEquals(\"1.0 EB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.EB + 10 * Bytes.PB);\n+        Assert.assertEquals(\"1.01 EB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.EB + 20 * Bytes.PB);\n+        Assert.assertEquals(\"1.02 EB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.EB + 100 * Bytes.PB);\n+        Assert.assertEquals(\"1.1 EB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.EB + 123 * Bytes.PB);\n+        Assert.assertEquals(\"1.12 EB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.EB + 129 * Bytes.PB);\n+        Assert.assertEquals(\"1.13 EB\", value);\n+\n+        value = UnitUtil.bytesToReadableString(Bytes.EB * 7 +\n+                                               (long) (755 * 1.024) * Bytes.PB);\n+        Assert.assertEquals(\"7.75 EB\", value);\n+\n+        // Bytes overflow long value\n+        value = UnitUtil.bytesToReadableString(Bytes.EB * 8);\n+        Assert.assertEquals(\"0 B\", value);\n+    }\n+\n+    @Test\n+    public void testBytesFromReadableString() {\n+        // B\n+        Assert.assertEquals(0L, UnitUtil.bytesFromReadableString(\"0 B\"));\n+        Assert.assertEquals(1L, UnitUtil.bytesFromReadableString(\"1 Bytes\"));\n+        Assert.assertEquals(3L, UnitUtil.bytesFromReadableString(\"3 bytes\"));\n+        Assert.assertEquals(10L, UnitUtil.bytesFromReadableString(\"10 Byte\"));\n+        Assert.assertEquals(100L, UnitUtil.bytesFromReadableString(\"100 byte\"));\n+        Assert.assertEquals(1000L, UnitUtil.bytesFromReadableString(\"1000 b\"));\n+        Assert.assertEquals(1023L, UnitUtil.bytesFromReadableString(\"1023 B\"));\n+\n+        Assert.assertEquals(1024L, UnitUtil.bytesFromReadableString(\"1024 B\"));\n+        Assert.assertEquals(10245678L,\n+                            UnitUtil.bytesFromReadableString(\"10245678 B\"));\n+        Assert.assertEquals(102456789012L,\n+                            UnitUtil.bytesFromReadableString(\"102456789012 B\"));\n+\n+        Assert.assertEquals(1L, UnitUtil.bytesFromReadableString(\"1  B\"));\n+        Assert.assertEquals(1L, UnitUtil.bytesFromReadableString(\"1  B \"));\n+        Assert.assertEquals(-2L, UnitUtil.bytesFromReadableString(\"-2 B\"));\n+\n+        // KB\n+        Assert.assertEquals(0L, UnitUtil.bytesFromReadableString(\"0 KB\"));\n+        Assert.assertEquals(Bytes.KB * 1L,\n+                            UnitUtil.bytesFromReadableString(\"1 KB\"));\n+        Assert.assertEquals((long) (Bytes.KB * 3.14),\n+                            UnitUtil.bytesFromReadableString(\"3.14 KB\"));\n+        Assert.assertEquals(Bytes.KB * 10L,\n+                            UnitUtil.bytesFromReadableString(\"10 kB\"));\n+        Assert.assertEquals(Bytes.KB * 100L,\n+                            UnitUtil.bytesFromReadableString(\"100 KiB\"));\n+        Assert.assertEquals(Bytes.KB * 1000L,\n+                            UnitUtil.bytesFromReadableString(\"1000 kb\"));\n+        Assert.assertEquals(Bytes.KB * 1023L,\n+                            UnitUtil.bytesFromReadableString(\"1023 kib\"));\n+        Assert.assertEquals(Bytes.KB * 1234567890L,\n+                            UnitUtil.bytesFromReadableString(\"1234567890 Kib\"));\n+        // MB\n+        Assert.assertEquals(0L, UnitUtil.bytesFromReadableString(\"0 MB\"));\n+        Assert.assertEquals(Bytes.MB * 1L,\n+                            UnitUtil.bytesFromReadableString(\"1 MB\"));\n+        Assert.assertEquals((long) (Bytes.MB * 3.14),\n+                            UnitUtil.bytesFromReadableString(\"3.14 MB\"));\n+        Assert.assertEquals(Bytes.MB * 10L,\n+                            UnitUtil.bytesFromReadableString(\"10 mB\"));\n+        Assert.assertEquals(Bytes.MB * 100L,\n+                            UnitUtil.bytesFromReadableString(\"100 MiB\"));\n+        Assert.assertEquals(Bytes.MB * 1000L,\n+                            UnitUtil.bytesFromReadableString(\"1000 mib\"));\n+        Assert.assertEquals(Bytes.MB * 1023L,\n+                            UnitUtil.bytesFromReadableString(\"1023 MIB\"));\n+        Assert.assertEquals(Bytes.MB * 1234567890L,\n+                            UnitUtil.bytesFromReadableString(\"1234567890 Mb\"));\n+\n+        // GB\n+        Assert.assertEquals(0L, UnitUtil.bytesFromReadableString(\"0 GB\"));\n+        Assert.assertEquals(Bytes.GB * 1L,\n+                            UnitUtil.bytesFromReadableString(\"1 GB\"));\n+        Assert.assertEquals((long) (Bytes.GB * 3.14),\n+                            UnitUtil.bytesFromReadableString(\"3.14 GB\"));\n+        Assert.assertEquals(Bytes.GB * 10L,\n+                            UnitUtil.bytesFromReadableString(\"10 gB\"));\n+        Assert.assertEquals(Bytes.GB * 100L,\n+                            UnitUtil.bytesFromReadableString(\"100 GiB\"));\n+        Assert.assertEquals(Bytes.GB * 1000L,\n+                            UnitUtil.bytesFromReadableString(\"1000 gib\"));\n+        Assert.assertEquals(Bytes.GB * 1023L,\n+                            UnitUtil.bytesFromReadableString(\"1023 GIB\"));\n+        Assert.assertEquals(Bytes.GB * 1234567890L,\n+                            UnitUtil.bytesFromReadableString(\"1234567890 Gb\"));\n+\n+        // TB\n+        Assert.assertEquals(0L, UnitUtil.bytesFromReadableString(\"0 TB\"));\n+        Assert.assertEquals(Bytes.TB * 1L,\n+                            UnitUtil.bytesFromReadableString(\"1 TB\"));\n+        Assert.assertEquals((long) (Bytes.TB * 3.14),\n+                            UnitUtil.bytesFromReadableString(\"3.14 TB\"));\n+        Assert.assertEquals(Bytes.TB * 10L,\n+                            UnitUtil.bytesFromReadableString(\"10 tB\"));\n+        Assert.assertEquals(Bytes.TB * 100L,\n+                            UnitUtil.bytesFromReadableString(\"100 TiB\"));\n+        Assert.assertEquals(Bytes.TB * 1000L,\n+                            UnitUtil.bytesFromReadableString(\"1000 tib\"));\n+        Assert.assertEquals(Bytes.TB * 1023L,\n+                            UnitUtil.bytesFromReadableString(\"1023 TIB\"));\n+        Assert.assertEquals(Bytes.TB * 123456L,\n+                            UnitUtil.bytesFromReadableString(\"123456 Tb\"));\n+\n+        // PB\n+        Assert.assertEquals(0L, UnitUtil.bytesFromReadableString(\"0 PB\"));\n+        Assert.assertEquals(Bytes.PB * 1L,\n+                            UnitUtil.bytesFromReadableString(\"1 PB\"));\n+        Assert.assertEquals((long) (Bytes.PB * 3.14),\n+                            UnitUtil.bytesFromReadableString(\"3.14 PB\"));\n+        Assert.assertEquals(Bytes.PB * 10L,\n+                            UnitUtil.bytesFromReadableString(\"10 pB\"));\n+        Assert.assertEquals(Bytes.PB * 100L,\n+                            UnitUtil.bytesFromReadableString(\"100 PiB\"));\n+        Assert.assertEquals(Bytes.PB * 1000L,\n+                            UnitUtil.bytesFromReadableString(\"1000 pib\"));\n+        Assert.assertEquals(Bytes.PB * 1023L,\n+                            UnitUtil.bytesFromReadableString(\"1023 PIB\"));\n+        Assert.assertEquals(Bytes.PB * 8024L,\n+                            UnitUtil.bytesFromReadableString(\"8024 PIB\"));\n+\n+        // EB\n+        Assert.assertEquals(0L, UnitUtil.bytesFromReadableString(\"0 EB\"));\n+        Assert.assertEquals(Bytes.EB * 1L,\n+                            UnitUtil.bytesFromReadableString(\"1 EB\"));\n+        Assert.assertEquals((long) (Bytes.EB * 3.14),\n+                            UnitUtil.bytesFromReadableString(\"3.14 EB\"));\n+        Assert.assertEquals((long) (Bytes.EB * 5.01),\n+                            UnitUtil.bytesFromReadableString(\"5.01 eB\"));\n+        Assert.assertEquals((long) (Bytes.EB * 6.28),\n+                            UnitUtil.bytesFromReadableString(\"6.28 EiB\"));\n+        Assert.assertEquals((long) (Bytes.EB * 7.9876),\n+                            UnitUtil.bytesFromReadableString(\"7.9876 eib\"));\n+        Assert.assertEquals((long) (Bytes.EB * 8.0),\n+                            UnitUtil.bytesFromReadableString(\"8.0 EIB\")); // max\n+    }\n+\n+    @Test\n+    public void testBytesFromReadableStringWithInvalidFormat() {\n+        // No space\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"1kb\");\n+        }, e -> {\n+            Assert.assertContains(\"Invalid readable bytes '1kb'\",\n+                                  e.getMessage());\n+        });\n+\n+        // Invalid unit\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"1 aBc\");\n+        }, e -> {\n+            Assert.assertContains(\"Unrecognized unit aBc\", e.getMessage());\n+        });\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"1 k\");\n+        }, e -> {\n+            Assert.assertContains(\"Unrecognized unit k\", e.getMessage());\n+        });\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"1 m\");\n+        }, e -> {\n+            Assert.assertContains(\"Unrecognized unit m\", e.getMessage());\n+        });\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"1 2 MB\");\n+        }, e -> {\n+            Assert.assertContains(\"Unrecognized unit 2 MB\", e.getMessage());\n+        });\n+\n+        // Invalid number\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"2b kb\");\n+        }, e -> {\n+            Assert.assertContains(\"Invalid parameter(not number): '2b kb'\",\n+                                  e.getMessage());\n+        });\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"2.3.4 kb\");\n+        }, e -> {\n+            Assert.assertContains(\"Invalid parameter(not number): '2.3.4 kb'\",\n+                                  e.getMessage());\n+        });\n+\n+        // Bytes overflow long value\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"8.1 EIB\");\n+        }, e -> {\n+            Assert.assertContains(\"The value 9.33866418731546E18 from \" +\n+                                  \"parameter '8.1 EIB' is out of range\",\n+                                  e.getMessage());\n+        });\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"9024 Pb\");\n+        }, e -> {\n+            Assert.assertContains(\"is out of range\", e.getMessage());\n+        });\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            UnitUtil.bytesFromReadableString(\"12345678 Tb\");\n+        }, e -> {\n+            Assert.assertContains(\"is out of range\", e.getMessage());\n+        });\n+    }\n+\n+    @Test\n+    public void testTimestampToReadableString() {\n+        Assert.assertEquals(\"0ms\",\n+                            UnitUtil.timestampToReadableString(0L));\n+        Assert.assertEquals(\"1ms\",\n+                            UnitUtil.timestampToReadableString(1L));\n+        Assert.assertEquals(\"100ms\",\n+                            UnitUtil.timestampToReadableString(100L));\n+        Assert.assertEquals(\"999ms\",\n+                            UnitUtil.timestampToReadableString(999L));\n+\n+        Assert.assertEquals(\"1s\",\n+                            UnitUtil.timestampToReadableString(1000L));\n+        Assert.assertEquals(\"10s\",\n+                            UnitUtil.timestampToReadableString(10000L));\n+        Assert.assertEquals(\"1s1ms\",\n+                            UnitUtil.timestampToReadableString(1001L));\n+        Assert.assertEquals(\"1s200ms\",\n+                            UnitUtil.timestampToReadableString(1200L));\n+        Assert.assertEquals(\"6s789ms\",\n+                            UnitUtil.timestampToReadableString(6789L));\n+        Assert.assertEquals(\"59s789ms\",\n+                            UnitUtil.timestampToReadableString(59789L));\n+\n+        Assert.assertEquals(\"1m0s\",\n+                            UnitUtil.timestampToReadableString(60789L));\n+        Assert.assertEquals(\"1m1s\",\n+                            UnitUtil.timestampToReadableString(61789L));\n+        Assert.assertEquals(\"1m2s\",\n+                            UnitUtil.timestampToReadableString(62000L));\n+        Assert.assertEquals(\"2m2s\",\n+                            UnitUtil.timestampToReadableString(122000L));\n+        Assert.assertEquals(\"2m12s\",\n+                            UnitUtil.timestampToReadableString(132000L));\n+        Assert.assertEquals(\"59m59s\",\n+                            UnitUtil.timestampToReadableString(3599000L));\n+\n+        Assert.assertEquals(\"1h0m0s\",\n+                            UnitUtil.timestampToReadableString(3600000L));\n+        Assert.assertEquals(\"1h0m23s\",\n+                            UnitUtil.timestampToReadableString(3623000L));\n+        Assert.assertEquals(\"1h1m23s\",\n+                            UnitUtil.timestampToReadableString(3683000L));\n+        Assert.assertEquals(\"1h24m43s\",\n+                            UnitUtil.timestampToReadableString(5083000L));\n+        Assert.assertEquals(\"23h59m59s\",\n+                            UnitUtil.timestampToReadableString(86399000L));\n+\n+        Assert.assertEquals(\"1d0h0m0s\",\n+                            UnitUtil.timestampToReadableString(86400000L));\n+        Assert.assertEquals(\"1d1h24m43s\",\n+                            UnitUtil.timestampToReadableString(91483000L));\n+        Assert.assertEquals(\"1d1h24m43s\",\n+                            UnitUtil.timestampToReadableString(91483000L));\n+\n+        Assert.assertEquals(\"30d0h0m0s\",\n+                            UnitUtil.timestampToReadableString(2592000000L));\n+        Assert.assertEquals(\"30d23h59m59s\",\n+                            UnitUtil.timestampToReadableString(2678399000L));\n+        Assert.assertEquals(\"130d23h59m59s\",\n+                            UnitUtil.timestampToReadableString(11318399000L));\n+        Assert.assertEquals(\"1130d23h59m59s\",\n+                            UnitUtil.timestampToReadableString(97718399000L));\n+    }\n+\n+    @Test\n+    public void testTimestampFromReadableString() {\n+        Assert.assertEquals(0L,\n+                            UnitUtil.timestampFromReadableString(\"0ms\"));\n+        Assert.assertEquals(1L,\n+                            UnitUtil.timestampFromReadableString(\"1ms\"));\n+        Assert.assertEquals(100L,\n+                            UnitUtil.timestampFromReadableString(\"100ms\"));\n+        Assert.assertEquals(999L,\n+                            UnitUtil.timestampFromReadableString(\"999ms\"));\n+        Assert.assertEquals(1001L,\n+                            UnitUtil.timestampFromReadableString(\"1001ms\"));\n+\n+        Assert.assertEquals(0L,\n+                            UnitUtil.timestampFromReadableString(\"0s\"));\n+        Assert.assertEquals(1000L,\n+                            UnitUtil.timestampFromReadableString(\"1s\"));\n+        Assert.assertEquals(10000L,\n+                            UnitUtil.timestampFromReadableString(\"10s\"));\n+        Assert.assertEquals(1001L,\n+                            UnitUtil.timestampFromReadableString(\"1s1ms\"));\n+        Assert.assertEquals(1200L,\n+                            UnitUtil.timestampFromReadableString(\"1s200ms\"));\n+        Assert.assertEquals(6789L,\n+                            UnitUtil.timestampFromReadableString(\"6s789ms\"));\n+        Assert.assertEquals(59789L,\n+                            UnitUtil.timestampFromReadableString(\"59s789ms\"));\n+        Assert.assertEquals(59789L,\n+                            UnitUtil.timestampFromReadableString(\"59s2789ms\"));\n+\n+        Assert.assertEquals(60000L,\n+                            UnitUtil.timestampFromReadableString(\"1m0s\"));\n+        Assert.assertEquals(61000L,\n+                            UnitUtil.timestampFromReadableString(\"1m1s\"));\n+        Assert.assertEquals(62000L,\n+                            UnitUtil.timestampFromReadableString(\"1m2s\"));\n+        Assert.assertEquals(122000L,\n+                            UnitUtil.timestampFromReadableString(\"2m2s\"));\n+        Assert.assertEquals(132000L,\n+                            UnitUtil.timestampFromReadableString(\"2m12s\"));\n+        Assert.assertEquals(3599000L,\n+                            UnitUtil.timestampFromReadableString(\"59m59s\"));\n+\n+        Assert.assertEquals(3600000L,\n+                            UnitUtil.timestampFromReadableString(\"1h0m0s\"));\n+        Assert.assertEquals(3623000L,\n+                            UnitUtil.timestampFromReadableString(\"1h0m23s\"));\n+        Assert.assertEquals(3683000L,\n+                            UnitUtil.timestampFromReadableString(\"1h1m23s\"));\n+        Assert.assertEquals(5083000L,\n+                            UnitUtil.timestampFromReadableString(\"1h24m43s\"));\n+        Assert.assertEquals(86399000L,\n+                            UnitUtil.timestampFromReadableString(\"23h59m59s\"));\n+\n+        Assert.assertEquals(86400000L,\n+                            UnitUtil.timestampFromReadableString(\"1d0h0m0s\"));\n+        Assert.assertEquals(91483000L,\n+                            UnitUtil.timestampFromReadableString(\"1d1h24m43s\"));\n+        Assert.assertEquals(91483000L,\n+                            UnitUtil.timestampFromReadableString(\"1d1h24m43s\"));\n+\n+        Assert.assertEquals(2592000000L, UnitUtil.timestampFromReadableString(\n+                                         \"30d0h0m0s\"));\n+        Assert.assertEquals(2678399000L, UnitUtil.timestampFromReadableString(\n+                                         \"30d23h59m59s\"));\n+        Assert.assertEquals(11318399000L, UnitUtil.timestampFromReadableString(\n+                                          \"130d23h59m59s\"));\n+        Assert.assertEquals(97718399000L, UnitUtil.timestampFromReadableString(\n+                                          \"1130d23h59m59s\"));\n+    }\n+}"
  }
]
