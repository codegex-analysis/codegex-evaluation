[
  {
    "sha": "d4223c862552f654c1e443eab41b9c007034792c",
    "filename": "android/src/main/java/com/alternadom/wifiiot/WifiIotPlugin.java",
    "status": "modified",
    "additions": 77,
    "deletions": 4,
    "changes": 81,
    "blob_url": "https://github.com/alternadom/WiFiFlutter/blob/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/android/src/main/java/com/alternadom/wifiiot/WifiIotPlugin.java",
    "raw_url": "https://github.com/alternadom/WiFiFlutter/raw/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/android/src/main/java/com/alternadom/wifiiot/WifiIotPlugin.java",
    "contents_url": "https://api.github.com/repos/alternadom/WiFiFlutter/contents/android/src/main/java/com/alternadom/wifiiot/WifiIotPlugin.java?ref=b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc",
    "patch": "@@ -20,6 +20,7 @@\n import android.os.Bundle;\n import android.os.Handler;\n import android.os.Looper;\n+import android.provider.Settings;\n import android.util.Log;\n \n import androidx.annotation.NonNull;\n@@ -60,6 +61,7 @@\n     private WifiApManager moWiFiAPManager;\n     private Activity moActivity;\n     private BroadcastReceiver receiver;\n+    private WifiManager.LocalOnlyHotspotReservation apReservation;\n     private ConnectivityManager.NetworkCallback networkCallback;\n     private List<WifiNetworkSuggestion> networkSuggestions;\n     private List<String> ssidsToBeRemovedOnExit = new ArrayList<String>();\n@@ -433,6 +435,14 @@ public void onFinishScan(final ArrayList<ClientScanResult> clients) {\n      */\n     private void isWiFiAPEnabled(Result poResult) {\n         poResult.success(moWiFiAPManager.isWifiApEnabled());\n+\n+        /**\n+         * Develop 'isWiFiApEnabled' method to get AP state on android Q and later.\n+         *\n+         * if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\n+         *    // Code for getting AP state on android Q and later\n+         * }\n+         */\n     }\n \n     /**\n@@ -447,7 +457,45 @@ private void isWiFiAPEnabled(Result poResult) {\n      */\n     private void setWiFiAPEnabled(MethodCall poCall, Result poResult) {\n         boolean enabled = poCall.argument(\"state\");\n-        moWiFiAPManager.setWifiApEnabled(null, enabled);\n+\n+        /**\n+         * Using LocalOnlyHotspotCallback when setting WiFi AP state on android Q and later\n+         */\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\n+            moWiFiAPManager.setWifiApEnabled(null, enabled);\n+        }\n+            else {\n+                if (enabled) {\n+                    moWiFi.startLocalOnlyHotspot(new WifiManager.LocalOnlyHotspotCallback() {\n+                        @Override\n+                        public void onStarted(WifiManager.LocalOnlyHotspotReservation reservation) {\n+                            super.onStarted(reservation);\n+                            apReservation = reservation;\n+                        }\n+\n+                        @Override\n+                        public void onStopped() {\n+                            super.onStopped();\n+                            Log.d(WifiIotPlugin.class.getSimpleName(), \"LocalHostpot Stopped.\");\n+                        }\n+\n+                        @Override\n+                        public void onFailed(int reason) {\n+                            super.onFailed(reason);\n+                            Log.d(WifiIotPlugin.class.getSimpleName(), \"LocalHotspot failed with code: \" + String.valueOf(reason));\n+                        }\n+                    }, new Handler());\n+                }\n+                    else {\n+                        if (apReservation != null) {\n+                            apReservation.close();\n+                        }\n+                            else {\n+                                Log.e(WifiIotPlugin.class.getSimpleName(), \"Can't disable WiFi AP, apReservation is null.\");\n+                            }\n+                    }\n+            }\n+\n         poResult.success(null);\n     }\n \n@@ -627,7 +675,29 @@ private void isEnabled(Result poResult) {\n     /// Method to connect/disconnect wifi service\n     private void setEnabled(MethodCall poCall, Result poResult) {\n         Boolean enabled = poCall.argument(\"state\");\n-        moWiFi.setWifiEnabled(enabled);\n+        Boolean shouldOpenSettings = poCall.argument(\"shouldOpenSettings\");\n+\n+        // Enable or Disable WiFi programmatically\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\n+            moWiFi.setWifiEnabled(enabled);\n+        }\n+            // Whether to open native WiFi settings or not\n+            else {\n+                if (shouldOpenSettings != null) {\n+                    if (shouldOpenSettings) {\n+                        Intent intent = new Intent(Settings.ACTION_WIFI_SETTINGS);\n+                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+                        this.moContext.startActivity(intent);\n+                    }\n+                        else {\n+                            moWiFi.setWifiEnabled(enabled);\n+                        }\n+                }\n+                    else {\n+                        Log.e(WifiIotPlugin.class.getSimpleName(), \"Error `setEnabled`: shouldOpenSettings is null.\");\n+                    }\n+            }\n+\n         poResult.success(null);\n     }\n \n@@ -793,6 +863,10 @@ private void disconnect(Result poResult) {\n                 final ConnectivityManager connectivityManager = (ConnectivityManager) moContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n                 connectivityManager.unregisterNetworkCallback(networkCallback);\n             }\n+                else {\n+                    Log.e(WifiIotPlugin.class.getSimpleName(), \"Can't disconnect to WiFi, networkCallback is null.\");\n+                }\n+\n             if (networkSuggestions != null) {\n                 moWiFi.removeNetworkSuggestions(networkSuggestions);\n             }\n@@ -1114,5 +1188,4 @@ private Boolean connectToDeprecated(String ssid, String password, String securit\n \n         return connected;\n     }\n-}\n-\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c7bc3cf74a65ff2f49905a5293379d7cc2dc3e35",
    "filename": "example/android/app/src/main/AndroidManifest.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/alternadom/WiFiFlutter/blob/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/example/android/app/src/main/AndroidManifest.xml",
    "raw_url": "https://github.com/alternadom/WiFiFlutter/raw/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/example/android/app/src/main/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/alternadom/WiFiFlutter/contents/example/android/app/src/main/AndroidManifest.xml?ref=b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc",
    "patch": "@@ -5,7 +5,17 @@\n          flutter needs it to communicate with the running application\n          to allow setting breakpoints, to provide hot reload, etc.\n     -->\n-    <uses-permission android:name=\"android.permission.INTERNET\"/>\n+    <uses-permission android:name=\"android.permission.INTERNET\" />\n+    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n+    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n+    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n+    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n+    <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" />\n+    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n+    <uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n+\n+    <permission android:name=\"android.permission.OVERRIDE_WIFI_CONFIG\" android:protectionLevel=\"signature|privileged\" />\n+    <uses-feature android:name=\"android.hardware.wifi\" />\n \n     <!-- io.flutter.app.FlutterApplication is an android.app.Application that\n          calls FlutterMain.startInitialization(this); in its onCreate method."
  },
  {
    "sha": "672e1abb6e99801e95d171de60c8f8dea4b0848c",
    "filename": "example/lib/main.dart",
    "status": "modified",
    "additions": 184,
    "deletions": 109,
    "changes": 293,
    "blob_url": "https://github.com/alternadom/WiFiFlutter/blob/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/example/lib/main.dart",
    "raw_url": "https://github.com/alternadom/WiFiFlutter/raw/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/example/lib/main.dart",
    "contents_url": "https://api.github.com/repos/alternadom/WiFiFlutter/contents/example/lib/main.dart?ref=b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc",
    "patch": "@@ -18,43 +18,43 @@ class FlutterWifiIoT extends StatefulWidget {\n }\n \n class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n-  String _sPreviousAPSSID = \"\";\n-  String _sPreviousPreSharedKey = \"\";\n+  String? _sPreviousAPSSID = \"\";\n+  String? _sPreviousPreSharedKey = \"\";\n \n-  List<WifiNetwork> _htResultNetwork;\n-  Map<String, bool> _htIsNetworkRegistered = Map();\n+  List<WifiNetwork?>? _htResultNetwork;\n+  Map<String, bool>? _htIsNetworkRegistered = Map();\n \n   bool _isEnabled = false;\n   bool _isConnected = false;\n   bool _isWiFiAPEnabled = false;\n   bool _isWiFiAPSSIDHidden = false;\n   bool _isWifiAPSupported = true;\n+  bool _isWifiEnableOpenSettings = false;\n+  bool _isWifiDisableOpenSettings = false;\n+\n+  final TextStyle textStyle = TextStyle(color: Colors.white);\n \n   @override\n   initState() {\n     WiFiForIoTPlugin.isEnabled().then((val) {\n-      if (val != null) {\n-        _isEnabled = val;\n-      }\n+      _isEnabled = val;\n     });\n \n     WiFiForIoTPlugin.isConnected().then((val) {\n-      if (val != null) {\n-        _isConnected = val;\n-      }\n+      _isConnected = val;\n     });\n \n     WiFiForIoTPlugin.isWiFiAPEnabled().then((val) {\n-      if (val != null) {\n-        _isWiFiAPEnabled = val;\n-      }\n-    }).catchError((val) => _isWifiAPSupported = false);\n+      _isWiFiAPEnabled = val;\n+    }).catchError((val) {\n+      _isWifiAPSupported = false;\n+    });\n \n     WiFiForIoTPlugin.isWiFiAPSSIDHidden().then((val) {\n-      if (val != null) {\n-        _isWiFiAPSSIDHidden = val;\n-      }\n-    }).catchError((val) => _isWifiAPSupported = false);\n+      _isWiFiAPSSIDHidden = val;\n+    }).catchError((val) {\n+      _isWifiAPSupported = false;\n+    });\n \n     super.initState();\n   }\n@@ -66,8 +66,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n   }\n \n   storeAPInfos() async {\n-    String sAPSSID;\n-    String sPreSharedKey;\n+    String? sAPSSID;\n+    String? sPreSharedKey;\n+\n     try {\n       sAPSSID = await WiFiForIoTPlugin.getWiFiAPSSID();\n     } on PlatformException {\n@@ -87,14 +88,15 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n   }\n \n   restoreAPInfos() async {\n-    WiFiForIoTPlugin.setWiFiAPSSID(_sPreviousAPSSID);\n-    WiFiForIoTPlugin.setWiFiAPPreSharedKey(_sPreviousPreSharedKey);\n+    WiFiForIoTPlugin.setWiFiAPSSID(_sPreviousAPSSID!);\n+    WiFiForIoTPlugin.setWiFiAPPreSharedKey(_sPreviousPreSharedKey!);\n   }\n \n   // [sAPSSID, sPreSharedKey]\n   Future<List<String>> getWiFiAPInfos() async {\n-    String sAPSSID;\n-    String sPreSharedKey;\n+    String? sAPSSID;\n+    String? sPreSharedKey;\n+\n     try {\n       sAPSSID = await WiFiForIoTPlugin.getWiFiAPSSID();\n     } on Exception {\n@@ -107,12 +109,14 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n       sPreSharedKey = \"\";\n     }\n \n-    return [sAPSSID, sPreSharedKey];\n+    return [sAPSSID!, sPreSharedKey!];\n   }\n \n-  Future<WIFI_AP_STATE> getWiFiAPState() async {\n-    int iWiFiState;\n-    WIFI_AP_STATE wifiAPState;\n+  Future<WIFI_AP_STATE?> getWiFiAPState() async {\n+    int? iWiFiState;\n+\n+    WIFI_AP_STATE? wifiAPState;\n+    \n     try {\n       iWiFiState = await WiFiForIoTPlugin.getWiFiAPState();\n     } on Exception {\n@@ -131,17 +135,18 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n       wifiAPState = WIFI_AP_STATE.WIFI_AP_STATE_FAILED;\n     }\n \n-    return wifiAPState;\n+    return wifiAPState!;\n   }\n \n   Future<List<APClient>> getClientList(\n       bool onlyReachables, int reachableTimeout) async {\n     List<APClient> htResultClient;\n+\n     try {\n       htResultClient = await WiFiForIoTPlugin.getClientList(\n           onlyReachables, reachableTimeout);\n     } on PlatformException {\n-      htResultClient = List<APClient>();\n+      htResultClient = <APClient>[];\n     }\n \n     return htResultClient;\n@@ -152,22 +157,23 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n     try {\n       htResultNetwork = await WiFiForIoTPlugin.loadWifiList();\n     } on PlatformException {\n-      htResultNetwork = List<WifiNetwork>();\n+      htResultNetwork = <WifiNetwork>[];\n     }\n \n     return htResultNetwork;\n   }\n \n   isRegisteredWifiNetwork(String ssid) async {\n     bool bIsRegistered;\n+\n     try {\n       bIsRegistered = await WiFiForIoTPlugin.isRegisteredWifiNetwork(ssid);\n     } on PlatformException {\n       bIsRegistered = false;\n     }\n \n     setState(() {\n-      _htIsNetworkRegistered[ssid] = bIsRegistered;\n+      _htIsNetworkRegistered![ssid] = bIsRegistered;\n     });\n   }\n \n@@ -185,23 +191,25 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n   }\n \n   Widget getWidgets() {\n-    WiFiForIoTPlugin.isConnected().then((val) => setState(() {\n-          _isConnected = val;\n-        }));\n+    WiFiForIoTPlugin.isConnected().then((val) {\n+      setState(() {\n+        _isConnected = val;\n+      });\n+    });\n \n     // disable scanning for ios as not supported\n     if (_isConnected || Platform.isIOS) {\n       _htResultNetwork = null;\n     }\n \n-    if (_htResultNetwork != null && _htResultNetwork.length > 0) {\n-      List<ListTile> htNetworks = List();\n+    if (_htResultNetwork != null && _htResultNetwork!.length > 0) {\n+      List<ListTile> htNetworks = <ListTile>[];\n \n-      _htResultNetwork.forEach((oNetwork) {\n-        PopupCommand oCmdConnect = PopupCommand(\"Connect\", oNetwork.ssid);\n-        PopupCommand oCmdRemove = PopupCommand(\"Remove\", oNetwork.ssid);\n+      _htResultNetwork!.forEach((oNetwork) {\n+        PopupCommand oCmdConnect = PopupCommand(\"Connect\", oNetwork!.ssid!);\n+        PopupCommand oCmdRemove = PopupCommand(\"Remove\", oNetwork.ssid!);\n \n-        List<PopupMenuItem<PopupCommand>> htPopupMenuItems = List();\n+        List<PopupMenuItem<PopupCommand>> htPopupMenuItems = [];\n \n         htPopupMenuItems.add(\n           PopupMenuItem<PopupCommand>(\n@@ -211,9 +219,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n         );\n \n         setState(() {\n-          isRegisteredWifiNetwork(oNetwork.ssid);\n-          if (_htIsNetworkRegistered.containsKey(oNetwork.ssid) &&\n-              _htIsNetworkRegistered[oNetwork.ssid]) {\n+          isRegisteredWifiNetwork(oNetwork.ssid!);\n+          if (_htIsNetworkRegistered!.containsKey(oNetwork.ssid) &&\n+              _htIsNetworkRegistered![oNetwork.ssid]!) {\n             htPopupMenuItems.add(\n               PopupMenuItem<PopupCommand>(\n                 value: oCmdRemove,\n@@ -225,9 +233,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n           htNetworks.add(\n             ListTile(\n               title: Text(\"\" +\n-                  oNetwork.ssid +\n-                  ((_htIsNetworkRegistered.containsKey(oNetwork.ssid) &&\n-                          _htIsNetworkRegistered[oNetwork.ssid])\n+                  oNetwork.ssid! +\n+                  ((_htIsNetworkRegistered!.containsKey(oNetwork.ssid) &&\n+                          _htIsNetworkRegistered![oNetwork.ssid]!)\n                       ? \" *\"\n                       : \"\")),\n               trailing: PopupMenuButton<PopupCommand>(\n@@ -272,30 +280,33 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n   }\n \n   List<Widget> getButtonWidgetsForAndroid() {\n-    List<Widget> htPrimaryWidgets = List();\n+    List<Widget> htPrimaryWidgets = <Widget>[];\n \n-    WiFiForIoTPlugin.isEnabled().then((val) => setState(() {\n-          _isEnabled = val;\n-        }));\n+    WiFiForIoTPlugin.isEnabled().then((val) {\n+      setState(() {\n+        _isEnabled = val;\n+      });\n+    });\n \n     if (_isEnabled) {\n       htPrimaryWidgets.addAll([\n         SizedBox(height: 10),\n         Text(\"Wifi Enabled\"),\n-        RaisedButton(\n-          child: Text(\"Disable\"),\n+        MaterialButton(\n+          color: Colors.blue,\n+          child: Text(\"Disable\", style: textStyle),\n           onPressed: () {\n-            WiFiForIoTPlugin.setEnabled(false);\n+            WiFiForIoTPlugin.setEnabled(false,\n+              shouldOpenSettings: _isWifiDisableOpenSettings\n+            );\n           },\n         ),\n       ]);\n \n       WiFiForIoTPlugin.isConnected().then((val) {\n-        if (val != null) {\n-          setState(() {\n-            _isConnected = val;\n-          });\n-        }\n+        setState(() {\n+          _isConnected = val;\n+        });\n       });\n \n       if (_isConnected) {\n@@ -304,45 +315,59 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n           FutureBuilder(\n               future: WiFiForIoTPlugin.getSSID(),\n               initialData: \"Loading..\",\n-              builder: (BuildContext context, AsyncSnapshot<String> ssid) {\n+              builder: (BuildContext context, AsyncSnapshot<String?> ssid) {\n                 return Text(\"SSID: ${ssid.data}\");\n               }),\n           FutureBuilder(\n               future: WiFiForIoTPlugin.getBSSID(),\n               initialData: \"Loading..\",\n-              builder: (BuildContext context, AsyncSnapshot<String> bssid) {\n+              builder: (BuildContext context, AsyncSnapshot<String?> bssid) {\n                 return Text(\"BSSID: ${bssid.data}\");\n               }),\n           FutureBuilder(\n               future: WiFiForIoTPlugin.getCurrentSignalStrength(),\n               initialData: 0,\n-              builder: (BuildContext context, AsyncSnapshot<int> signal) {\n+              builder: (BuildContext context, AsyncSnapshot<int?> signal) {\n                 return Text(\"Signal: ${signal.data}\");\n               }),\n           FutureBuilder(\n               future: WiFiForIoTPlugin.getFrequency(),\n               initialData: 0,\n-              builder: (BuildContext context, AsyncSnapshot<int> freq) {\n+              builder: (BuildContext context, AsyncSnapshot<int?> freq) {\n                 return Text(\"Frequency : ${freq.data}\");\n               }),\n           FutureBuilder(\n               future: WiFiForIoTPlugin.getIP(),\n               initialData: \"Loading..\",\n-              builder: (BuildContext context, AsyncSnapshot<String> ip) {\n+              builder: (BuildContext context, AsyncSnapshot<String?> ip) {\n                 return Text(\"IP : ${ip.data}\");\n               }),\n-          RaisedButton(\n-            child: Text(\"Disconnect\"),\n+          MaterialButton(\n+            color: Colors.blue,\n+            child: Text(\"Disconnect\", style: textStyle),\n             onPressed: () {\n               WiFiForIoTPlugin.disconnect();\n             },\n           ),\n+          CheckboxListTile(\n+            title: const Text(\"Disable WiFi on settings\"),\n+            subtitle: const Text(\"Available only on android API level >= 29\"),\n+            value: _isWifiDisableOpenSettings,\n+            onChanged: (bool? setting) {\n+              if (setting != null) {\n+                setState(() {\n+                  _isWifiDisableOpenSettings = setting;                \n+                });\n+              }\n+            }\n+          )\n         ]);\n       } else {\n         htPrimaryWidgets.addAll(<Widget>[\n           Text(\"Disconnected\"),\n-          RaisedButton(\n-            child: Text(\"Scan\"),\n+          MaterialButton(\n+            color: Colors.blue,\n+            child: Text(\"Scan\", style: textStyle),\n             onPressed: () async {\n               _htResultNetwork = await loadWifiList();\n               setState(() {});\n@@ -351,34 +376,64 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n           Row(\n             mainAxisAlignment: MainAxisAlignment.center,\n             children: <Widget>[\n-              RaisedButton(\n-                child: Text(\"Use WiFi\"),\n+              MaterialButton(\n+                color: Colors.blue,\n+                child: Text(\"Use WiFi\", style: textStyle),\n                 onPressed: () {\n                   WiFiForIoTPlugin.forceWifiUsage(true);\n                 },\n               ),\n-              RaisedButton(\n-                child: Text(\"Use 3G/4G\"),\n+              SizedBox(width: 50),\n+              MaterialButton(\n+                color: Colors.blue,\n+                child: Text(\"Use 3G/4G\", style: textStyle),\n                 onPressed: () {\n                   WiFiForIoTPlugin.forceWifiUsage(false);\n                 },\n               ),\n             ],\n+          ),\n+          CheckboxListTile(\n+            title: const Text(\"Disable WiFi on settings\"),\n+            subtitle: const Text(\"Available only on android API level >= 29\"),\n+            value: _isWifiDisableOpenSettings,\n+            onChanged: (bool? setting) {\n+              if (setting != null) {\n+                setState(() {\n+                  _isWifiDisableOpenSettings = setting;                \n+                });\n+              }\n+            }\n           )\n         ]);\n       }\n     } else {\n       htPrimaryWidgets.addAll(<Widget>[\n         SizedBox(height: 10),\n         Text(\"Wifi Disabled\"),\n-        RaisedButton(\n-          child: Text(\"Enable\"),\n+        MaterialButton(\n+          color: Colors.blue,\n+          child: Text(\"Enable\", style: textStyle),\n           onPressed: () {\n             setState(() {\n-              WiFiForIoTPlugin.setEnabled(true);\n+              WiFiForIoTPlugin.setEnabled(true,\n+                shouldOpenSettings: _isWifiEnableOpenSettings\n+              );\n             });\n           },\n         ),\n+        CheckboxListTile(\n+          title: const Text(\"Enable WiFi on settings\"),\n+          subtitle: const Text(\"Available only on android API level >= 29\"),\n+          value: _isWifiEnableOpenSettings,\n+          onChanged: (bool? setting) {\n+            if (setting != null) {\n+              setState(() {\n+                _isWifiEnableOpenSettings = setting;                \n+              });\n+            }\n+          }\n+        )\n       ]);\n     }\n \n@@ -393,10 +448,11 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n             future: getWiFiAPState(),\n             initialData: WIFI_AP_STATE.WIFI_AP_STATE_DISABLED,\n             builder:\n-                (BuildContext context, AsyncSnapshot<WIFI_AP_STATE> wifiState) {\n+                (BuildContext context, AsyncSnapshot<WIFI_AP_STATE?> wifiState) {\n               if (wifiState.data == WIFI_AP_STATE.WIFI_AP_STATE_ENABLED) {\n-                RaisedButton(\n-                  child: Text(\"Get Client List\"),\n+                MaterialButton(\n+                color: Colors.blue,\n+                  child: Text(\"Get Client List\", style: textStyle),\n                   onPressed: () {\n                     showClientList();\n                   },\n@@ -414,8 +470,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n       if (_isWiFiAPEnabled) {\n         htPrimaryWidgets.addAll(<Widget>[\n           Text(\"Wifi AP Enabled\"),\n-          RaisedButton(\n-            child: Text(\"Disable\"),\n+          MaterialButton(\n+            color: Colors.blue,\n+            child: Text(\"Disable\", style: textStyle),\n             onPressed: () {\n               WiFiForIoTPlugin.setWiFiAPEnabled(false);\n             },\n@@ -424,8 +481,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n       } else {\n         htPrimaryWidgets.addAll(<Widget>[\n           Text(\"Wifi AP Disabled\"),\n-          RaisedButton(\n-            child: Text(\"Enable\"),\n+          MaterialButton(\n+            color: Colors.blue,\n+            child: Text(\"Enable\", style: textStyle),\n             onPressed: () {\n               WiFiForIoTPlugin.setWiFiAPEnabled(true);\n             },\n@@ -441,8 +499,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n       if (_isWiFiAPSSIDHidden) {\n         htPrimaryWidgets.add(Text(\"SSID is hidden\"));\n         !_isWiFiAPEnabled\n-            ? RaisedButton(\n-                child: Text(\"Show\"),\n+            ? MaterialButton(\n+                color: Colors.blue,\n+                child: Text(\"Show\", style: textStyle),\n                 onPressed: () {\n                   WiFiForIoTPlugin.setWiFiAPSSIDHidden(false);\n                 },\n@@ -451,8 +510,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n       } else {\n         htPrimaryWidgets.add(Text(\"SSID is visible\"));\n         !_isWiFiAPEnabled\n-            ? RaisedButton(\n-                child: Text(\"Hide\"),\n+            ? MaterialButton(\n+                color: Colors.blue,\n+                child: Text(\"Hide\", style: textStyle),\n                 onPressed: () {\n                   WiFiForIoTPlugin.setWiFiAPSSIDHidden(true);\n                 },\n@@ -462,34 +522,41 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n \n       FutureBuilder(\n           future: getWiFiAPInfos(),\n-          initialData: List<String>(),\n+          initialData: <String>[],\n           builder: (BuildContext context, AsyncSnapshot<List<String>> info) {\n             htPrimaryWidgets.addAll(<Widget>[\n-              Text(\"SSID : ${info.data[0]}\"),\n-              Text(\"KEY  : ${info.data[1]}\"),\n-              RaisedButton(\n+              Text(\"SSID : ${info.data![0]}\"),\n+              Text(\"KEY  : ${info.data![1]}\"),\n+              MaterialButton(\n+                color: Colors.blue,\n                 child:\n-                    Text(\"Set AP info ($AP_DEFAULT_SSID/$AP_DEFAULT_PASSWORD)\"),\n+                    Text(\n+                      \"Set AP info ($AP_DEFAULT_SSID/$AP_DEFAULT_PASSWORD)\",\n+                      style: textStyle\n+                    ),\n                 onPressed: () {\n                   storeAndConnect(AP_DEFAULT_SSID, AP_DEFAULT_PASSWORD);\n                 },\n               ),\n               Text(\"AP SSID stored : $_sPreviousAPSSID\"),\n               Text(\"KEY stored : $_sPreviousPreSharedKey\"),\n-              RaisedButton(\n-                child: Text(\"Store AP infos\"),\n+              MaterialButton(\n+                color: Colors.blue,\n+                child: Text(\"Store AP infos\", style: textStyle),\n                 onPressed: () {\n                   storeAPInfos();\n                 },\n               ),\n-              RaisedButton(\n-                child: Text(\"Restore AP infos\"),\n+              MaterialButton(\n+                color: Colors.blue,\n+                child: Text(\"Restore AP infos\", style: textStyle),\n                 onPressed: () {\n                   restoreAPInfos();\n                 },\n               ),\n             ]);\n-            return;\n+\n+            return Text(\"SSID : ${info.data![0]}\");\n           });\n     } else {\n       htPrimaryWidgets.add(\n@@ -500,7 +567,7 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n   }\n \n   List<Widget> getButtonWidgetsForiOS() {\n-    List<Widget> htPrimaryWidgets = List();\n+    List<Widget> htPrimaryWidgets = <Widget>[];\n \n     WiFiForIoTPlugin.isEnabled().then((val) => setState(() {\n           _isEnabled = val;\n@@ -512,32 +579,36 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n             _isConnected = val;\n           }));\n \n-      String _sSSID;\n+      String? _sSSID;\n+      \n       if (_isConnected) {\n         htPrimaryWidgets.addAll(<Widget>[\n           Text(\"Connected\"),\n           FutureBuilder(\n               future: WiFiForIoTPlugin.getSSID(),\n               initialData: \"Loading..\",\n-              builder: (BuildContext context, AsyncSnapshot<String> ssid) {\n+              builder: (BuildContext context, AsyncSnapshot<String?> ssid) {\n                 _sSSID = ssid.data;\n+\n                 return Text(\"SSID: ${ssid.data}\");\n               }),\n         ]);\n \n         if (_sSSID == STA_DEFAULT_SSID) {\n           htPrimaryWidgets.addAll(<Widget>[\n-            RaisedButton(\n-              child: Text(\"Disconnect\"),\n+            MaterialButton(\n+              color: Colors.blue,\n+              child: Text(\"Disconnect\", style: textStyle),\n               onPressed: () {\n                 WiFiForIoTPlugin.disconnect();\n               },\n             ),\n           ]);\n         } else {\n           htPrimaryWidgets.addAll(<Widget>[\n-            RaisedButton(\n-              child: Text(\"Connect to '$AP_DEFAULT_SSID'\"),\n+            MaterialButton(\n+              color: Colors.blue,\n+              child: Text(\"Connect to '$AP_DEFAULT_SSID'\", style: textStyle),\n               onPressed: () {\n                 WiFiForIoTPlugin.connect(STA_DEFAULT_SSID,\n                     password: STA_DEFAULT_PASSWORD,\n@@ -550,8 +621,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n       } else {\n         htPrimaryWidgets.addAll(<Widget>[\n           Text(\"Disconnected\"),\n-          RaisedButton(\n-            child: Text(\"Connect to '$AP_DEFAULT_SSID'\"),\n+          MaterialButton(\n+            color: Colors.blue,\n+            child: Text(\"Connect to '$AP_DEFAULT_SSID'\", style: textStyle),\n             onPressed: () {\n               WiFiForIoTPlugin.connect(STA_DEFAULT_SSID,\n                   password: STA_DEFAULT_PASSWORD,\n@@ -564,8 +636,9 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n     } else {\n       htPrimaryWidgets.addAll(<Widget>[\n         Text(\"Wifi Disabled?\"),\n-        RaisedButton(\n-          child: Text(\"Connect to '$AP_DEFAULT_SSID'\"),\n+        MaterialButton(\n+          color: Colors.blue,\n+          child: Text(\"Connect to '$AP_DEFAULT_SSID'\", style: textStyle),\n           onPressed: () {\n             WiFiForIoTPlugin.connect(STA_DEFAULT_SSID,\n                 password: STA_DEFAULT_PASSWORD,\n@@ -582,6 +655,8 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n   @override\n   Widget build(BuildContext poContext) {\n     return MaterialApp(\n+      title: Platform.isIOS ?\n+        \"WifiFlutter Example iOS\" : \"WifiFlutter Example Android\",\n       home: Scaffold(\n         appBar: AppBar(\n           title: Platform.isIOS\n@@ -597,7 +672,7 @@ class _FlutterWifiIoTState extends State<FlutterWifiIoT> {\n                           break;\n                         case \"remove\":\n                           WiFiForIoTPlugin.getSSID().then(\n-                              (val) => WiFiForIoTPlugin.removeWifiNetwork(val));\n+                              (val) => WiFiForIoTPlugin.removeWifiNetwork(val!));\n                           break;\n                         default:\n                           break;\n@@ -629,4 +704,4 @@ class PopupCommand {\n   String argument;\n \n   PopupCommand(this.command, this.argument);\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "11d1fa8aa644dc180926f4172a02f7adf6dc9706",
    "filename": "example/pubspec.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/alternadom/WiFiFlutter/blob/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/example/pubspec.yaml",
    "raw_url": "https://github.com/alternadom/WiFiFlutter/raw/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/example/pubspec.yaml",
    "contents_url": "https://api.github.com/repos/alternadom/WiFiFlutter/contents/example/pubspec.yaml?ref=b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc",
    "patch": "@@ -2,7 +2,7 @@ name: wifi_iot_example\n description: Demonstrates how to use the wifi_iot plugin.\n \n environment:\n-  sdk: '>=2.10.0 <3.0.0'\n+  sdk: '>=2.12.0 <3.0.0'\n \n dependencies:\n   flutter:"
  },
  {
    "sha": "fa34e14e73f64419de2e73ba916f66d441ff82a6",
    "filename": "lib/wifi_iot.dart",
    "status": "modified",
    "additions": 11,
    "deletions": 3,
    "changes": 14,
    "blob_url": "https://github.com/alternadom/WiFiFlutter/blob/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/lib/wifi_iot.dart",
    "raw_url": "https://github.com/alternadom/WiFiFlutter/raw/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/lib/wifi_iot.dart",
    "contents_url": "https://api.github.com/repos/alternadom/WiFiFlutter/contents/lib/wifi_iot.dart?ref=b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc",
    "patch": "@@ -200,9 +200,14 @@ class WiFiForIoTPlugin {\n     return bResult != null && bResult;\n   }\n \n-  static setEnabled(bool state) async {\n+  /// Enable or Disable WiFi\n+  /// \n+  /// @param [shouldOpenSettings] only works on android API level >= 29\n+  static setEnabled(bool state, { bool shouldOpenSettings = false }) async {\n     Map<String, bool> htArguments = Map();\n     htArguments[\"state\"] = state;\n+    htArguments[\"shouldOpenSettings\"] = shouldOpenSettings;\n+    \n     try {\n       await _channel.invokeMethod('setEnabled', htArguments);\n     } on MissingPluginException catch (e) {\n@@ -224,7 +229,7 @@ class WiFiForIoTPlugin {\n         \"join_once\": joinOnce,\n         \"with_internet\": withInternet,\n         \"security\":\n-            security?.toString()?.substring('$NetworkSecurity'.length + 1),\n+            security.toString().substring('$NetworkSecurity'.length + 1),\n       });\n     } on MissingPluginException catch (e) {\n       print(\"MissingPluginException : ${e.toString()}\");\n@@ -242,7 +247,7 @@ class WiFiForIoTPlugin {\n         \"ssid\": ssid.toString(),\n         \"password\": password.toString(),\n         \"security\":\n-            security?.toString()?.substring('$NetworkSecurity'.length + 1),\n+            security.toString().substring('$NetworkSecurity'.length + 1),\n       });\n     } on MissingPluginException catch (e) {\n       print(\"MissingPluginException : ${e.toString()}\");\n@@ -362,7 +367,10 @@ class WiFiForIoTPlugin {\n       bResult = await _channel.invokeMethod('removeWifiNetwork', htArguments);\n     } on MissingPluginException catch (e) {\n       print(\"MissingPluginException : ${e.toString()}\");\n+    } on PlatformException catch (e) {\n+      print(e.message);\n     }\n+\n     return bResult != null && bResult;\n   }\n "
  },
  {
    "sha": "0f537b046ddef979b3bcf15669ee68809c2eaaf5",
    "filename": "pubspec.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/alternadom/WiFiFlutter/blob/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/pubspec.yaml",
    "raw_url": "https://github.com/alternadom/WiFiFlutter/raw/b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc/pubspec.yaml",
    "contents_url": "https://api.github.com/repos/alternadom/WiFiFlutter/contents/pubspec.yaml?ref=b5b3f2d135ae84d3cd8c95fc5abb68ef901e8bfc",
    "patch": "@@ -1,6 +1,6 @@\n name: wifi_iot\n description: Flutter plugin which can handle WiFi connections and hotspot (AP, STA)\n-version: 0.3.0\n+version: 0.3.1\n homepage: https://github.com/alternadom/WiFiFlutter\n \n flutter:"
  }
]
