[
  {
    "sha": "969ea391c9e234e69b24bd01a7f36cda9e51712a",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/.gitignore",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/.gitignore",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/.gitignore?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -5,7 +5,9 @@ syntax: glob\n .settings\n .idea\n *.iml\n+*.apk\n bin/\n build/\n gen/\n local.properties\n+HomeAssistantTaskerPlugin/release/"
  },
  {
    "sha": "a5c6340298d38b781bdf624e618ddcd2f57d9ec1",
    "filename": "HomeAssistantTaskerPlugin/build.gradle",
    "status": "renamed",
    "additions": 11,
    "deletions": 9,
    "changes": 20,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/build.gradle",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/build.gradle",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/build.gradle?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -2,16 +2,16 @@ apply plugin: 'com.android.application'\n apply plugin: 'findbugs'\n \n dependencies {\n-    compile group:'net.jcip', name:'jcip-annotations', version:\"${JCIP_ANNOTATION_VERSION_MATCHER}\"\n-    compile group:'com.android.support', name:'support-annotations', version:\"${ANDROID_SUPPORT_VERSION_MATCHER}\"\n-    compile group:'com.android.support', name:'appcompat-v7', version:\"${ANDROID_SUPPORT_VERSION_MATCHER}\"\n-    compile group:'com.twofortyfouram', name:'android-annotation', version:\"${TWOFORTYFOURAM_ANNOTATION_VERSION_MATCHER}\"\n-    compile group:'com.twofortyfouram', name:'android-assertion', version:\"${TWOFORTYFOURAM_ASSERTION_VERSION_MATCHER}\"\n-    compile group:'com.twofortyfouram', name:'android-plugin-api-for-locale', version:\"${TWOFORTYFOURAM_PLUGIN_API_VERSION_MATCHER}\"\n-    compile group:'com.twofortyfouram', name:'android-plugin-client-sdk-for-locale', version:\"${TWOFORTYFOURAM_PLUGIN_CLIENT_SDK_VERSION_MATCHER}\"\n-    compile group:'com.twofortyfouram', name:'android-spackle', version:\"${TWOFORTYFOURAM_SPACKLE_VERSION_MATCHER}\"\n+    implementation group:'net.jcip', name:'jcip-annotations', version:\"${JCIP_ANNOTATION_VERSION_MATCHER}\"\n+    implementation group:'com.android.support', name:'support-annotations', version:\"${ANDROID_SUPPORT_VERSION_MATCHER}\"\n+    implementation group:'com.android.support', name:'appcompat-v7', version:\"${ANDROID_SUPPORT_VERSION_MATCHER}\"\n+    implementation group:'com.twofortyfouram', name:'android-annotation', version:\"${TWOFORTYFOURAM_ANNOTATION_VERSION_MATCHER}\"\n+    implementation group:'com.twofortyfouram', name:'android-assertion', version:\"${TWOFORTYFOURAM_ASSERTION_VERSION_MATCHER}\"\n+    implementation group:'com.twofortyfouram', name:'android-plugin-api-for-locale', version:\"${TWOFORTYFOURAM_PLUGIN_API_VERSION_MATCHER}\"\n+    implementation group:'com.twofortyfouram', name:'android-plugin-client-sdk-for-locale', version:\"${TWOFORTYFOURAM_PLUGIN_CLIENT_SDK_VERSION_MATCHER}\"\n+    implementation group:'com.twofortyfouram', name:'android-spackle', version:\"${TWOFORTYFOURAM_SPACKLE_VERSION_MATCHER}\"\n \n-    androidTestCompile group:'com.twofortyfouram', name:'android-test', version:\"${TWOFORTYFOURAM_TEST_VERSION_MATCHER}\"\n+    androidTestImplementation group:'com.twofortyfouram', name:'android-test', version:\"${TWOFORTYFOURAM_TEST_VERSION_MATCHER}\"\n }\n \n android {\n@@ -28,6 +28,8 @@ android {\n         // dependencies contain localizations.\n         // The last two are for support of pseudolocales in debug builds.\n         resConfigs 'en', 'en-rUS', 'en_XA', 'ar_XB'\n+\n+        vectorDrawables.useSupportLibrary = true\n     }\n \n     if (RELEASE_KEYSTORE_PATH && RELEASE_KEYSTORE_PASSWORD && RELEASE_KEY_ALIAS && RELEASE_KEY_ALIAS_PASSWORD) {",
    "previous_filename": "toastPluginSettingApp/build.gradle"
  },
  {
    "sha": "119f33fdb7c238040c48f8ddc3701548e0b9ff32",
    "filename": "HomeAssistantTaskerPlugin/lint.xml",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/lint.xml",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/lint.xml",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/lint.xml?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "previous_filename": "toastPluginSettingApp/lint.xml"
  },
  {
    "sha": "4ef6de1f059b64c3b88b47aec70265da0420fc54",
    "filename": "HomeAssistantTaskerPlugin/proguard-project.txt",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/proguard-project.txt",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/proguard-project.txt",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/proguard-project.txt?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,5 +1,5 @@\n # This improves obfuscation and moves non-public classes to their own namespace.\n--repackageclasses 'com.twofortyfouram.locale.example.setting.toast'\n+-repackageclasses 'com.markadamson.taskerplugin.homeassistant'\n \n # Ensure that stacktraces are reversible.\n -renamesourcefileattribute SourceFile",
    "previous_filename": "toastPluginSettingApp/proguard-project.txt"
  },
  {
    "sha": "7a1e438870189d447ab8476714c714ebed85c50a",
    "filename": "HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/bundle/PluginBundleValuesTest.java",
    "status": "renamed",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/bundle/PluginBundleValuesTest.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/bundle/PluginBundleValuesTest.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/bundle/PluginBundleValuesTest.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,4 +1,8 @@\n /*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n  * android-toast-setting-plugin-for-locale <https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale>\n  * Copyright 2014 two forty four a.m. LLC\n  *\n@@ -13,7 +17,7 @@\n  * limitations under the License.\n  */\n \n-package com.twofortyfouram.locale.example.setting.toast.bundle;\n+package com.markadamson.taskerplugin.homeassistant.bundle;\n \n import android.os.Bundle;\n import android.test.AndroidTestCase;\n@@ -37,10 +41,10 @@ public static void testExtraConstants() {\n          * extra is intentionally changed, then this unit test needs to be intentionally updated.\n          */\n         assertEquals(\n-                \"com.twofortyfouram.locale.example.setting.toast.extra.STRING_MESSAGE\",\n+                \"com.markadamson.taskerplugin.homeassistant.extra.STRING_MESSAGE\",\n                 PluginBundleValues.BUNDLE_EXTRA_STRING_MESSAGE); //$NON-NLS-1$\n         assertEquals(\n-                \"com.twofortyfouram.locale.example.setting.toast.extra.INT_VERSION_CODE\",\n+                \"com.markadamson.taskerplugin.homeassistant.extra.INT_VERSION_CODE\",\n                 PluginBundleValues.BUNDLE_EXTRA_INT_VERSION_CODE); //$NON-NLS-1$\n     }\n ",
    "previous_filename": "toastPluginSettingApp/src/androidTest/java/com/twofortyfouram/locale/example/setting/toast/bundle/PluginBundleValuesTest.java"
  },
  {
    "sha": "b9184cbddb9f8cfc48c4cc375ebb7a4ce2a8bade",
    "filename": "HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/receiver/FireReceiverTest.java",
    "status": "renamed",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/receiver/FireReceiverTest.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/receiver/FireReceiverTest.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/receiver/FireReceiverTest.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,4 +1,8 @@\n /*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n  * android-toast-setting-plugin-for-locale <https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale>\n  * Copyright 2014 two forty four a.m. LLC\n  *\n@@ -13,9 +17,9 @@\n  * limitations under the License.\n  */\n \n-package com.twofortyfouram.locale.example.setting.toast.receiver;\n+package com.markadamson.taskerplugin.homeassistant.receiver;\n \n-import com.twofortyfouram.locale.example.setting.toast.bundle.PluginBundleValues;\n+import com.markadamson.taskerplugin.homeassistant.bundle.PluginBundleValues;\n \n import android.content.BroadcastReceiver;\n import android.content.Intent;",
    "previous_filename": "toastPluginSettingApp/src/androidTest/java/com/twofortyfouram/locale/example/setting/toast/receiver/FireReceiverTest.java"
  },
  {
    "sha": "351908b3fd7fa9342b4b8bd88596665c8ad7b89f",
    "filename": "HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/setting/toast/test/InstallLocation.java",
    "status": "renamed",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/setting/toast/test/InstallLocation.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/setting/toast/test/InstallLocation.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/setting/toast/test/InstallLocation.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,4 +1,8 @@\n /*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n  * android-toast-setting-plugin-for-locale <https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale>\n  * Copyright 2014 two forty four a.m. LLC\n  *\n@@ -13,7 +17,7 @@\n  * limitations under the License.\n  */\n \n-package com.twofortyfouram.locale.example.setting.toast.test;\n+package com.markadamson.taskerplugin.homeassistant.setting.toast.test;\n \n import com.twofortyfouram.annotation.Slow;\n import com.twofortyfouram.annotation.Slow.Speed;",
    "previous_filename": "toastPluginSettingApp/src/androidTest/java/com/twofortyfouram/locale/example/setting/toast/test/InstallLocation.java"
  },
  {
    "sha": "39c08f647ccf7d2ec791cbee91b4fa89440d3898",
    "filename": "HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/setting/toast/test/ManifestTest.java",
    "status": "renamed",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/setting/toast/test/ManifestTest.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/setting/toast/test/ManifestTest.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/setting/toast/test/ManifestTest.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,4 +1,8 @@\n /*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n  * android-toast-setting-plugin-for-locale <https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale>\n  * Copyright 2014 two forty four a.m. LLC\n  *\n@@ -13,12 +17,10 @@\n  * limitations under the License.\n  */\n \n-package com.twofortyfouram.locale.example.setting.toast.test;\n+package com.markadamson.taskerplugin.homeassistant.setting.toast.test;\n \n import android.content.Context;\n import android.content.Intent;\n-import android.content.pm.PackageManager;\n-import android.content.pm.PackageManager.NameNotFoundException;\n import android.content.pm.ResolveInfo;\n import android.support.annotation.NonNull;\n import android.test.AndroidTestCase;",
    "previous_filename": "toastPluginSettingApp/src/androidTest/java/com/twofortyfouram/locale/example/setting/toast/test/ManifestTest.java"
  },
  {
    "sha": "8bde85561b87fd0f4e9a0094cfb633613d9359ee",
    "filename": "HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/ui/activity/EditActivityTest.java",
    "status": "renamed",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/ui/activity/EditActivityTest.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/ui/activity/EditActivityTest.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/androidTest/java/com/markadamson/taskerplugin/homeassistant/ui/activity/EditActivityTest.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,4 +1,8 @@\n /*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n  * android-toast-setting-plugin-for-locale <https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale>\n  * Copyright 2014 two forty four a.m. LLC\n  *\n@@ -13,7 +17,7 @@\n  * limitations under the License.\n  */\n \n-package com.twofortyfouram.locale.example.setting.toast.ui.activity;\n+package com.markadamson.taskerplugin.homeassistant.ui.activity;\n \n import android.app.Activity;\n import android.app.Instrumentation;\n@@ -27,8 +31,8 @@\n import android.text.TextUtils;\n import android.widget.EditText;\n \n-import com.twofortyfouram.locale.example.setting.toast.R;\n-import com.twofortyfouram.locale.example.setting.toast.bundle.PluginBundleValues;\n+import com.markadamson.taskerplugin.homeassistant.bundle.PluginBundleValues;\n+import com.markadamson.taskerplugin.homeassistant.R;\n import com.twofortyfouram.test.ui.activity.ActivityTestUtil;\n \n /**",
    "previous_filename": "toastPluginSettingApp/src/androidTest/java/com/twofortyfouram/locale/example/setting/toast/ui/activity/EditActivityTest.java"
  },
  {
    "sha": "c2b5ad2c423a1610039bd2f4dac2f1c0ef881344",
    "filename": "HomeAssistantTaskerPlugin/src/debug/AndroidManifest.xml",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/debug/AndroidManifest.xml",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/debug/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/debug/AndroidManifest.xml?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n           xmlns:tools=\"http://schemas.android.com/tools\"\n-          package=\"com.twofortyfouram.locale.example.setting.toast\">\n+          package=\"com.markadamson.taskerplugin.homeassistant\">\n \n     <!-- For code coverage -->\n     <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>",
    "previous_filename": "toastPluginSettingApp/src/debug/AndroidManifest.xml"
  },
  {
    "sha": "c92bd0f9a10b21b4231c5d64222fd426b7d25b52",
    "filename": "HomeAssistantTaskerPlugin/src/main/AndroidManifest.xml",
    "status": "added",
    "additions": 176,
    "deletions": 0,
    "changes": 176,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/AndroidManifest.xml",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/AndroidManifest.xml?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+     Because plug-ins interact with the host in the background, plug-ins MUST be installed to\n+     internal memory. This is consistent with Google's app install location guidelines:\n+     <http://developer.android.com/guide/appendix/install-location.html#Should>.\n+-->\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+          xmlns:tools=\"http://schemas.android.com/tools\"\n+          package=\"com.markadamson.taskerplugin.homeassistant\"\n+          android:installLocation=\"internalOnly\">\n+\n+    <!-- This allows the plug-in to appear on non-touchscreen devices like Google TV.\n+    Be sure to test that the app works without a touchscreen. -->\n+    <uses-feature\n+            android:name=\"android.hardware.touchscreen\"\n+            android:required=\"false\"/>\n+\n+    <uses-permission android:name=\"android.permission.INTERNET\"/>\n+    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n+\n+    <!-- Although many of these default to true, some users with modified ROMs have\n+         trouble seeing apps unless these attributes are explicitly set. -->\n+    <supports-screens\n+            android:anyDensity=\"true\"\n+            android:largeScreens=\"true\"\n+            android:normalScreens=\"true\"\n+            android:smallScreens=\"true\"\n+            android:xlargeScreens=\"true\" tools:ignore=\"UnusedAttribute\"/>\n+\n+    <!-- When hardware acceleration is enabled, the RAM memory usage of the app is\n+         significantly increased as soon as any UI is displayed. To reduce the memory\n+         usage of a plug-in which is primarily a background app, either (1) hardware\n+         acceleration should be disabled or (2) the plug-in's BroadcastReceiver (and any\n+         applicable Service) should be put into a different process. This example plug-in\n+         creates two processes. -->\n+    <application\n+            android:name=\"com.markadamson.taskerplugin.homeassistant.PluginApplication\"\n+            android:allowBackup=\"true\"\n+            android:fullBackupContent=\"true\"\n+            android:hardwareAccelerated=\"true\"\n+            android:icon=\"@mipmap/ic_launcher\"\n+            android:label=\"@string/app_name\"\n+            tools:ignore=\"UnusedAttribute\"\n+            android:usesCleartextTraffic=\"true\">\n+\n+        <activity\n+            android:name=\"com.markadamson.taskerplugin.homeassistant.ui.activity.EditActivity\"\n+            android:configChanges=\"orientation|screenSize\"\n+            android:exported=\"false\"\n+            android:label=\"@string/call_service\"\n+            android:theme=\"@style/Theme.AppCompat\"\n+            android:uiOptions=\"splitActionBarWhenNarrow\"\n+            android:windowSoftInputMode=\"adjustResize\"\n+            tools:ignore=\"UnusedAttribute\">\n+        </activity>\n+\n+        <activity\n+            android:name=\"com.markadamson.taskerplugin.homeassistant.ui.activity.EditGetStateActivity\"\n+            android:configChanges=\"orientation|screenSize\"\n+            android:exported=\"false\"\n+            android:label=\"@string/get_state\"\n+            android:theme=\"@style/Theme.AppCompat\"\n+            android:uiOptions=\"splitActionBarWhenNarrow\"\n+            android:windowSoftInputMode=\"adjustResize\"\n+            tools:ignore=\"UnusedAttribute\">\n+        </activity>\n+\n+        <activity\n+            android:name=\"com.markadamson.taskerplugin.homeassistant.ui.activity.EditRenderTemplateActivity\"\n+            android:configChanges=\"orientation|screenSize\"\n+            android:exported=\"false\"\n+            android:label=\"@string/render_template\"\n+            android:theme=\"@style/Theme.AppCompat\"\n+            android:uiOptions=\"splitActionBarWhenNarrow\"\n+            android:windowSoftInputMode=\"adjustResize\"\n+            tools:ignore=\"UnusedAttribute\">\n+        </activity>\n+\n+        <activity\n+            android:name=\"com.markadamson.taskerplugin.homeassistant.ui.activity.EditServerActivity\"\n+            android:exported=\"false\"\n+            android:label=\"@string/edit_server\"\n+            android:theme=\"@style/Theme.AppCompat\"\n+            android:uiOptions=\"splitActionBarWhenNarrow\"\n+            android:windowSoftInputMode=\"adjustResize\"\n+            tools:ignore=\"UnusedAttribute\">\n+        </activity>\n+        <!--\n+             This is the \"edit\" Activity. Note that the host will reject plug-in\n+             Activities for the following reasons:\n+                 - Missing \"android:label=[...]\"\n+                 - Missing \"android:icon=[...]\"\n+                 - The Activity isn't exported (e.g. android:exported=\"false\")\n+                 - The Activity isn't enabled (e.g. android:enabled=\"false\")\n+                 - The Activity requires permissions not available to the host\n+        -->\n+        <activity-alias\n+            android:name=\"com.markadamson.taskerplugin.homeassistant.ui.activity.PluginActivity\"\n+            android:exported=\"true\"\n+            android:icon=\"@drawable/ic_plugin\"\n+            android:label=\"@string/call_service\"\n+            android:targetActivity=\"com.markadamson.taskerplugin.homeassistant.ui.activity.EditActivity\"\n+            tools:ignore=\"ExportedActivity\">\n+            <!-- this Intent filter allows the plug-in to be discovered by the host. -->\n+            <intent-filter>\n+                <action android:name=\"com.twofortyfouram.locale.intent.action.EDIT_SETTING\"/>\n+            </intent-filter>\n+        </activity-alias>\n+        <activity-alias\n+            android:name=\"com.markadamson.taskerplugin.homeassistant.ui.activity.GetStatePluginActivity\"\n+            android:exported=\"true\"\n+            android:icon=\"@drawable/ic_plugin\"\n+            android:label=\"@string/get_state\"\n+            android:targetActivity=\"com.markadamson.taskerplugin.homeassistant.ui.activity.EditGetStateActivity\"\n+            tools:ignore=\"ExportedActivity\">\n+            <!-- this Intent filter allows the plug-in to be discovered by the host. -->\n+            <intent-filter>\n+                <action android:name=\"com.twofortyfouram.locale.intent.action.EDIT_SETTING\"/>\n+            </intent-filter>\n+        </activity-alias>\n+        <activity-alias\n+            android:name=\"com.markadamson.taskerplugin.homeassistant.ui.activity.RenderTemplatePluginActivity\"\n+            android:exported=\"true\"\n+            android:icon=\"@drawable/ic_plugin\"\n+            android:label=\"@string/render_template\"\n+            android:targetActivity=\"com.markadamson.taskerplugin.homeassistant.ui.activity.EditRenderTemplateActivity\"\n+            tools:ignore=\"ExportedActivity\">\n+            <!-- this Intent filter allows the plug-in to be discovered by the host. -->\n+            <intent-filter>\n+                <action android:name=\"com.twofortyfouram.locale.intent.action.EDIT_SETTING\"/>\n+            </intent-filter>\n+        </activity-alias>\n+\n+        <!--\n+             If this plug-in does not stand alone (e.g. it is only a plug-in for Locale and does not\n+             have a Launcher Activity), including this in the manifest will help when users try to\n+             open the app directly from the app store.\n+        -->\n+        <activity\n+                android:name=\"com.twofortyfouram.locale.sdk.client.ui.activity.InfoActivity\"\n+                android:exported=\"true\"\n+                tools:ignore=\"ExportedActivity\">\n+            <intent-filter>\n+                <action android:name=\"android.intent.action.MAIN\"/>\n+\n+                <category android:name=\"android.intent.category.INFO\"/>\n+            </intent-filter>\n+        </activity>\n+\n+        <!--\n+             This is the \"fire\" BroadcastReceiver. Note that the host will reject plug-in\n+             BroadcastReceivers for the following reasons:\n+                - The BroadcastReceiver isn't exported (e.g. android:exported=\"false\")\n+                - The BroadcastReceiver isn't enabled (e.g. android:enabled=\"false\")\n+                - The BroadcastReceiver requires permissions not available to the host\n+                - There are multiple BroadcastReceivers for com.twofortyfouram.locale.intent.action.FIRE_SETTING\n+        -->\n+        <receiver\n+                android:name=\"com.markadamson.taskerplugin.homeassistant.receiver.FireReceiver\"\n+                android:exported=\"true\"\n+                android:process=\":background\"\n+                tools:ignore=\"ExportedReceiver\">\n+\n+            <!-- this Intent filter allows the plug-in to discovered by the host. -->\n+            <intent-filter>\n+                <action android:name=\"com.twofortyfouram.locale.intent.action.FIRE_SETTING\"/>\n+            </intent-filter>\n+        </receiver>\n+\n+        <service\n+            android:name=\".service.ActionService\"\n+            android:permission=\"android.permission.BIND_JOB_SERVICE\"\n+            android:exported=\"true\"/>\n+    </application>\n+\n+</manifest>"
  },
  {
    "sha": "7bae7048f28269b954d132e2b168cfcca679f46e",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/internal/PluginActivityDelegate.java",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/internal/PluginActivityDelegate.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/internal/PluginActivityDelegate.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/internal/PluginActivityDelegate.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,135 @@\n+package com.markadamson.locale.sdk.client.internal;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import com.markadamson.taskerplugin.homeassistant.TaskerPlugin;\n+import com.twofortyfouram.assertion.BundleAssertions;\n+import com.markadamson.locale.sdk.client.ui.activity.IPluginActivity;\n+import com.twofortyfouram.log.Lumberjack;\n+import com.twofortyfouram.spackle.bundle.BundleComparer;\n+import com.twofortyfouram.spackle.bundle.BundleScrubber;\n+\n+import net.jcip.annotations.Immutable;\n+\n+import static com.twofortyfouram.assertion.Assertions.assertNotNull;\n+\n+/**\n+ * Activities that implement the {@link IPluginActivity} interface can delegate much of their\n+ * responsibility to this class.\n+ *\n+ * @param <T> Plug-in activity.\n+ */\n+/*\n+ * This class is intended to make the implementation of various plug-in Activities DRY.\n+ *\n+ * This class has no state, so therefore is immutable.\n+ */\n+@Immutable\n+public final class PluginActivityDelegate<T extends Activity & IPluginActivity> {\n+    /**\n+     * @param intent Intent to check.\n+     * @return True if intent is a Locale plug-in edit Intent.\n+     */\n+    public static boolean isLocalePluginIntent(@NonNull final Intent intent) {\n+        assertNotNull(intent, \"intent\"); //$NON-NLS-1$\n+\n+        final String action = intent.getAction();\n+\n+        return com.twofortyfouram.locale.api.Intent.ACTION_EDIT_CONDITION.equals(action)\n+                || com.twofortyfouram.locale.api.Intent.ACTION_EDIT_SETTING.equals(action);\n+    }\n+\n+    public void onCreate(@NonNull final T activity, @Nullable final Bundle savedInstanceState) {\n+        assertNotNull(activity, \"activity\"); //$NON-NLS-1$\n+\n+        final Intent intent = activity.getIntent();\n+\n+        if (isLocalePluginIntent(intent)) {\n+            if (BundleScrubber.scrub(intent)) {\n+                return;\n+            }\n+\n+            final Bundle previousBundle = activity.getPreviousBundle();\n+            if (BundleScrubber.scrub(previousBundle)) {\n+                return;\n+            }\n+\n+            Lumberjack\n+                    .v(\"Creating Activity with Intent=%s, savedInstanceState=%s, EXTRA_BUNDLE=%s\",\n+                            intent, savedInstanceState, previousBundle); //$NON-NLS-1$\n+        }\n+    }\n+\n+    public void onPostCreate(@NonNull final T activity, @Nullable final Bundle savedInstanceState) {\n+        assertNotNull(activity, \"activity\"); //$NON-NLS-1$\n+\n+        if (PluginActivityDelegate.isLocalePluginIntent(activity.getIntent())) {\n+            if (null == savedInstanceState) {\n+                final Bundle previousBundle = activity.getPreviousBundle();\n+                final String previousBlurb = activity.getPreviousBlurb();\n+                if (null != previousBundle && null != previousBlurb) {\n+                    activity.onPostCreateWithPreviousResult(previousBundle, previousBlurb);\n+                }\n+            }\n+        }\n+    }\n+\n+    public void finish(@NonNull final T activity, final boolean isCancelled) {\n+        if (PluginActivityDelegate.isLocalePluginIntent(activity.getIntent())) {\n+            if (!isCancelled) {\n+                final Bundle resultBundle = activity.getResultBundle();\n+\n+                if (null != resultBundle) {\n+                    BundleAssertions.assertSerializable(resultBundle);\n+\n+                    final String blurb = activity.getResultBlurb(resultBundle);\n+                    assertNotNull(blurb, \"blurb\"); //$NON-NLS-1$\n+\n+                    if (!BundleComparer.areBundlesEqual(resultBundle, activity.getPreviousBundle())\n+                            || !blurb.equals(activity.getPreviousBlurb())) {\n+                        final Intent resultIntent = new Intent();\n+                        resultIntent.putExtra(com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE,\n+                                resultBundle);\n+                        resultIntent.putExtra(\n+                                com.twofortyfouram.locale.api.Intent.EXTRA_STRING_BLURB,\n+                                blurb);\n+                        TaskerPlugin.addRelevantVariableList(resultIntent,\n+                                activity.getRelevantVariableList());\n+                        TaskerPlugin.Setting.requestTimeoutMS(resultIntent,\n+                                activity.requestedTimeoutMS());\n+\n+                        activity.setResult(Activity.RESULT_OK, resultIntent);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Nullable\n+    public final String getPreviousBlurb(@NonNull final T activity) {\n+        final String blurb = activity.getIntent().getStringExtra(\n+                com.twofortyfouram.locale.api.Intent.EXTRA_STRING_BLURB);\n+\n+        return blurb;\n+    }\n+\n+    @Nullable\n+    public Bundle getPreviousBundle(@NonNull final T activity) {\n+        assertNotNull(activity, \"activity\"); //$NON-NLS-1$\n+\n+        final Bundle bundle = activity.getIntent().getBundleExtra(\n+                com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE);\n+\n+        if (null != bundle) {\n+            if (activity.isBundleValid(bundle)) {\n+                return bundle;\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1d05a056710b60cc1d4b127746df415b3a48b062",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/ui/activity/AbstractAppCompatPluginActivity.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/ui/activity/AbstractAppCompatPluginActivity.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/ui/activity/AbstractAppCompatPluginActivity.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/ui/activity/AbstractAppCompatPluginActivity.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,132 @@\n+/*\n+ * android-plugin-client-sdk-for-locale https://github.com/twofortyfouram/android-plugin-client-sdk-for-locale\n+ * Copyright 2014 two forty four a.m. LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the\n+ * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.markadamson.locale.sdk.client.ui.activity;\n+\n+import android.os.Bundle;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+\n+import com.markadamson.locale.sdk.client.internal.PluginActivityDelegate;\n+\n+/**\n+ * <p>NOTE: This class is for compatibility with Material Design via the appcompat-v7 library.  To use this\n+ * class, appcompat-v7 must be on the application's build path.  Typically, this would involve adding\n+ * appcompat-v7 to the dependencies section of the application's build.gradle script.  For example,\n+ * the dependency might look something like this\n+ * {@code compile group:'com.android.support', name:'appcompat-v7', version:'[21,)'}</p>\n+ * <p>\n+ * Implements the basic behaviors of a \"Edit\" activity for a\n+ * plug-in, handling the Intent protocol for storing and retrieving the plug-in's data.\n+ * Recall that a plug-in Activity more or less saves a Bundle and a String blurb via the Intent\n+ * extras {@link com.twofortyfouram.locale.api.Intent#EXTRA_BUNDLE EXTRA_BUNDLE} and {@link\n+ * com.twofortyfouram.locale.api.Intent#EXTRA_STRING_BLURB EXTRA_STRING_BLURB}.\n+ * Those extras represent the configured plug-in, so this Activity helps plug-ins store and\n+ * retrieve\n+ * those\n+ * extras while abstracting the actual Intent protocol.\n+ * </p>\n+ * <p>\n+ * The Activity can be started in one of two states:\n+ * <ul>\n+ * <li>New plug-in instance: The Activity's Intent will not contain\n+ * {@link com.twofortyfouram.locale.api.Intent#EXTRA_BUNDLE EXTRA_BUNDLE}.</li>\n+ * <li>Old plug-in instance: The Activity's Intent will contain\n+ * {@link com.twofortyfouram.locale.api.Intent#EXTRA_BUNDLE EXTRA_BUNDLE} and {@link\n+ * com.twofortyfouram.locale.api.Intent#EXTRA_STRING_BLURB EXTRA_STRING_BLURB} from a previously\n+ * saved plug-in instance that the user is editing. The previously saved Bundle\n+ * and blurb can be retrieved at any time via {@link #getPreviousBundle()} and\n+ * {@link #getPreviousBlurb()}. These will also be delivered via\n+ * {@link #onPostCreateWithPreviousResult(android.os.Bundle, String)} during the\n+ * Activity's {@link #onPostCreate(android.os.Bundle)} phase when the Activity is first\n+ * created.</li>\n+ * </ul>\n+ * <p>During\n+ * the Activity's {@link #finish()} lifecycle callback, this class will call {@link\n+ * #getResultBundle()} and {@link #getResultBlurb(android.os.Bundle)}, which should return the\n+ * Bundle and blurb data the Activity would like to save back to the host.\n+ * </p>\n+ * <p>\n+ * Note that all of these behaviors only apply if the Intent\n+ * starting the Activity is one of the plug-in \"edit\" Intent actions.\n+ * </p>\n+ *\n+ * @see com.twofortyfouram.locale.api.Intent#ACTION_EDIT_CONDITION ACTION_EDIT_CONDITION\n+ * @see com.twofortyfouram.locale.api.Intent#ACTION_EDIT_SETTING ACTION_EDIT_SETTING\n+ */\n+public abstract class AbstractAppCompatPluginActivity extends AppCompatActivity implements IPluginActivity {\n+\n+    /**\n+     * Flag boolean that can be set prior to calling {@link #finish()} to control whether the\n+     * Activity\n+     * attempts to save a result back to the host.  Typically this is only set to true after an\n+     * explicit user interaction to abort editing the plug-in, such as tapping a \"cancel\" button.\n+     */\n+    /*\n+     * There is no need to save/restore this field's state.\n+     */\n+    protected boolean mIsCancelled = false;\n+\n+    @NonNull\n+    private final PluginActivityDelegate<AbstractAppCompatPluginActivity> mPluginActivityDelegate = new PluginActivityDelegate<>();\n+\n+    @Override\n+    protected void onCreate(@Nullable final Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+\n+        mPluginActivityDelegate.onCreate(this, savedInstanceState);\n+    }\n+\n+    @Override\n+    public void onPostCreate(@Nullable final Bundle savedInstanceState) {\n+        super.onPostCreate(savedInstanceState);\n+\n+        mPluginActivityDelegate.onPostCreate(this, savedInstanceState);\n+    }\n+\n+    @Override\n+    public void finish() {\n+        mPluginActivityDelegate.finish(this, mIsCancelled);\n+\n+        /*\n+         * Super call must come after the Activity result is set. If it comes\n+         * first, then the Activity result will be lost.\n+         */\n+        super.finish();\n+    }\n+\n+    /**\n+     * @return The {@link com.twofortyfouram.locale.api.Intent#EXTRA_BUNDLE EXTRA_BUNDLE} that was\n+     * previously saved to the host and subsequently passed back to this Activity for further\n+     * editing.  Internally, this method relies on {@link #isBundleValid(android.os.Bundle)}.  If\n+     * the bundle exists but is not valid, this method will return null.\n+     */\n+    @Nullable\n+    public final Bundle getPreviousBundle() {\n+        return mPluginActivityDelegate.getPreviousBundle(this);\n+    }\n+\n+    /**\n+     * @return The {@link com.twofortyfouram.locale.api.Intent#EXTRA_STRING_BLURB\n+     * EXTRA_STRING_BLURB} that was\n+     * previously saved to the host and subsequently passed back to this Activity for further\n+     * editing.\n+     */\n+    @Nullable\n+    public final String getPreviousBlurb() {\n+        return mPluginActivityDelegate.getPreviousBlurb(this);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0c8016be001e67143d06e0517278ba65b0b85876",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/ui/activity/IPluginActivity.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/ui/activity/IPluginActivity.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/ui/activity/IPluginActivity.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/locale/sdk/client/ui/activity/IPluginActivity.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,82 @@\n+package com.markadamson.locale.sdk.client.ui.activity;\n+\n+import android.os.Bundle;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+/**\n+ * Common interface for plug-in Activities.\n+ */\n+public interface IPluginActivity {\n+    /**\n+     * @return The {@link com.twofortyfouram.locale.api.Intent#EXTRA_BUNDLE EXTRA_BUNDLE} that was\n+     * previously saved to the host and subsequently passed back to this Activity for further\n+     * editing.  Internally, this method relies on {@link #isBundleValid(android.os.Bundle)}.  If\n+     * the bundle exists but is not valid, this method will return null.\n+     */\n+    @Nullable\n+    Bundle getPreviousBundle();\n+\n+    /**\n+     * @return The {@link com.twofortyfouram.locale.api.Intent#EXTRA_STRING_BLURB\n+     * EXTRA_STRING_BLURB} that was\n+     * previously saved to the host and subsequently passed back to this Activity for further\n+     * editing.\n+     */\n+    @Nullable\n+    String getPreviousBlurb();\n+\n+    /**\n+     * <p>Validates the Bundle, to ensure that a malicious application isn't attempting to pass\n+     * an invalid Bundle.</p>\n+     *\n+     * @param bundle The plug-in's Bundle previously returned by the edit\n+     *               Activity.  {@code bundle} should not be mutated by this method.\n+     * @return true if {@code bundle} is valid for the plug-in.\n+     */\n+    boolean isBundleValid(@NonNull final Bundle bundle);\n+\n+    /**\n+     * Plug-in Activity lifecycle callback to allow the Activity to restore\n+     * state for editing a previously saved plug-in instance. This callback will\n+     * occur during the onPostCreate() phase of the Activity lifecycle.\n+     * <p>{@code bundle} will have been\n+     * validated by {@link #isBundleValid(android.os.Bundle)} prior to this\n+     * method being called.  If {@link #isBundleValid(android.os.Bundle)} returned false, then this\n+     * method will not be called.  This helps ensure that plug-in Activity subclasses only have to\n+     * worry about bundle validation once, in the {@link #isBundleValid(android.os.Bundle)}\n+     * method.</p>\n+     * <p>Note this callback only occurs the first time the Activity is created, so it will not be\n+     * called\n+     * when the Activity is recreated (e.g. {@code savedInstanceState != null}) such as after a\n+     * configuration change like a screen rotation.</p>\n+     *\n+     * @param previousBundle Previous bundle that the Activity saved.\n+     * @param previousBlurb  Previous blurb that the Activity saved\n+     */\n+    void onPostCreateWithPreviousResult(\n+            @NonNull final Bundle previousBundle, @NonNull final String previousBlurb);\n+\n+    /**\n+     * @return Bundle for the plug-in or {@code null} if a valid Bundle cannot\n+     * be generated.\n+     */\n+    @Nullable\n+    Bundle getResultBundle();\n+\n+    /**\n+     * @param bundle Valid bundle for the component.\n+     * @return Blurb for {@code bundle}.\n+     */\n+    @NonNull\n+    String getResultBlurb(@NonNull final Bundle bundle);\n+\n+    /**\n+     * @return Relevant variables.\n+     */\n+    @NonNull\n+    String[] getRelevantVariableList();\n+\n+    int requestedTimeoutMS();\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "edb3011f3ea2bc41b21a64d199291c7221b3290f",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/Constants.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/Constants.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/Constants.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/Constants.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,13 @@\n+package com.markadamson.taskerplugin.homeassistant;\n+\n+import android.support.annotation.NonNull;\n+\n+public class Constants {\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_BUNDLE_TYPE\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.BUNDLE_TYPE\"; //$NON-NLS-1$\n+\n+    public static final int BUNDLE_CALL_SERVICE = 0;\n+    public static final int BUNDLE_GET_STATE = 1;\n+    public static final int BUNDLE_RENDER_TEMPLATE = 2;\n+}"
  },
  {
    "sha": "f016b32149a83750af0cc96885370e19bd04b623",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/PluginApplication.java",
    "status": "renamed",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/PluginApplication.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/PluginApplication.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/PluginApplication.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,4 +1,8 @@\n /*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n  * android-toast-setting-plugin-for-locale <https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale>\n  * Copyright 2014 two forty four a.m. LLC\n  *\n@@ -13,12 +17,12 @@\n  * limitations under the License.\n  */\n \n-package com.twofortyfouram.locale.example.setting.toast;\n-\n-import com.twofortyfouram.log.Lumberjack;\n+package com.markadamson.taskerplugin.homeassistant;\n \n import android.app.Application;\n \n+import com.twofortyfouram.log.Lumberjack;\n+\n /**\n  * Implements an application object for the plug-in.\n  */\n@@ -27,11 +31,9 @@\n  * options globally for the app.\n  */\n public final class PluginApplication extends Application {\n-\n     @Override\n     public void onCreate() {\n         super.onCreate();\n-\n         Lumberjack.init(getApplicationContext());\n     }\n }",
    "previous_filename": "toastPluginSettingApp/src/main/java/com/twofortyfouram/locale/example/setting/toast/PluginApplication.java"
  },
  {
    "sha": "3f03952153cd0dae91ac9fbf5391ec2381abf645",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/TaskerPlugin.java",
    "status": "added",
    "additions": 1045,
    "deletions": 0,
    "changes": 1045,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/TaskerPlugin.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/TaskerPlugin.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/TaskerPlugin.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,1045 @@\n+//package com.yourcompany.yourcondition;\n+//package com.yourcompany.yoursetting;\n+package com.markadamson.taskerplugin.homeassistant;\n+\n+// Constants and functions for Tasker *extensions* to the plugin protocol\n+// See Also: http://tasker.dinglisch.net/plugins.html\n+\n+// Release Notes\n+\n+// v1.1 20140202\n+// added function variableNameValid()\n+// fixed some javadoc entries (thanks to David Stone)\n+\n+// v1.2 20140211\n+// added ACTION_EDIT_EVENT\n+\n+// v1.3 20140227\n+// added REQUESTED_TIMEOUT_MS_NONE, REQUESTED_TIMEOUT_MS_MAX and REQUESTED_TIMEOUT_MS_NEVER\n+// requestTimeoutMS(): added range check\n+\n+// v1.4 20140516\n+// support for data pass through in REQUEST_QUERY intent\n+// some javadoc entries fixed (thanks again David :-))\n+\n+// v1.5 20141120\n+// added RESULT_CODE_FAILED_PLUGIN_FIRST\n+// added Setting.VARNAME_ERROR_MESSAGE\n+\n+// v1.6 20150213\n+// added Setting.getHintTimeoutMS()\n+// added Host.addHintTimeoutMS()\n+\n+// v1.7 20160619\n+// null check for getCallingActivity() in hostSupportsOnFireVariableReplacement( Activity editActivity )\n+\n+// v1.8 20161002\n+// added hostSupportsKeyEncoding(), setKeyEncoding() and Host.getKeysWithEncoding()\n+\n+import java.net.URISyntaxException;\n+import java.security.SecureRandom;\n+import java.util.regex.Pattern;\n+\n+import android.app.Activity;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.pm.PackageInfo;\n+import android.content.pm.PackageManager;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.os.ResultReceiver;\n+import android.util.Log;\n+\n+public class TaskerPlugin {\n+\n+    private final static String \tTAG = \"TaskerPlugin\";\n+\n+    private final static String \tBASE_KEY = \"net.dinglisch.android.tasker\";\n+\n+    private final static String \tEXTRAS_PREFIX = BASE_KEY + \".extras.\";\n+\n+    private final static int\t\tFIRST_ON_FIRE_VARIABLES_TASKER_VERSION = 80;\n+\n+    public final static String\t\tVARIABLE_PREFIX = \"%\";\n+\n+    // when generating non-repeating integers, look this far back for repeats\n+    // see getPositiveNonRepeatingRandomInteger()\n+    private final static int\t\tRANDOM_HISTORY_SIZE = 100;\n+\n+    /**\n+     * \tAction that the EditActivity for an event plugin should be launched by\n+     */\n+    public final static String \t\tACTION_EDIT_EVENT = BASE_KEY + \".ACTION_EDIT_EVENT\";\n+\n+    private final static String\t\tVARIABLE_NAME_START_EXPRESSION =  \"[\\\\w&&[^_]]\";\n+    private final static String\t\tVARIABLE_NAME_MID_EXPRESSION =  \"[\\\\w0-9]+\";\n+    private final static String\t\tVARIABLE_NAME_END_EXPRESSION =  \"[\\\\w0-9&&[^_]]\";\n+\n+    public final static String\t\tVARIABLE_NAME_MAIN_PART_MATCH_EXPRESSION =\n+            VARIABLE_NAME_START_EXPRESSION + VARIABLE_NAME_MID_EXPRESSION + VARIABLE_NAME_END_EXPRESSION\n+            ;\n+\n+    public final static String\t\tVARIABLE_NAME_MATCH_EXPRESSION =\n+            VARIABLE_PREFIX + \"+\" +\n+                    VARIABLE_NAME_MAIN_PART_MATCH_EXPRESSION\n+            ;\n+\n+    private static Pattern\t\t\tVARIABLE_NAME_MATCH_PATTERN = null;\n+\n+    /**\n+     *\t@see #addVariableBundle(Bundle, Bundle)\n+     *\t@see Host#getVariablesBundle(Bundle)\n+     */\n+    private final static String\t\tEXTRA_VARIABLES_BUNDLE = EXTRAS_PREFIX + \"VARIABLES\";\n+\n+    /**\n+     * \tHost capabilities, passed to plugin with edit intents\n+     */\n+    private final static String\t\tEXTRA_HOST_CAPABILITIES = EXTRAS_PREFIX + \"HOST_CAPABILITIES\";\n+\n+    /**\n+     *  @see Setting#hostSupportsVariableReturn(Bundle)\n+     */\n+    public final static int\t\t\tEXTRA_HOST_CAPABILITY_SETTING_RETURN_VARIABLES = 2;\n+\n+    /**\n+     *\t@see Condition#hostSupportsVariableReturn(Bundle)\n+     */\n+    public final static int\t\t\tEXTRA_HOST_CAPABILITY_CONDITION_RETURN_VARIABLES = 4;\n+\n+    /**\n+     * \t@see Setting#hostSupportsOnFireVariableReplacement(Bundle)\n+     */\n+    public final static int\t\t\tEXTRA_HOST_CAPABILITY_SETTING_FIRE_VARIABLE_REPLACEMENT = 8;\n+\n+    /**\n+     * @see Setting#hostSupportsVariableReturn(Bundle)\n+     */\n+    private final static int\t\tEXTRA_HOST_CAPABILITY_RELEVANT_VARIABLES = 16;\n+\n+    public final static int\t\t\tEXTRA_HOST_CAPABILITY_SETTING_SYNCHRONOUS_EXECUTION = 32;\n+\n+    public final static int\t\t\tEXTRA_HOST_CAPABILITY_REQUEST_QUERY_DATA_PASS_THROUGH = 64;\n+\n+    public final static int\t\t\tEXTRA_HOST_CAPABILITY_ENCODING_JSON = 128;\n+\n+    public final static int\t\t\tEXTRA_HOST_CAPABILITY_ALL =\n+            EXTRA_HOST_CAPABILITY_SETTING_RETURN_VARIABLES |\n+                    EXTRA_HOST_CAPABILITY_CONDITION_RETURN_VARIABLES |\n+                    EXTRA_HOST_CAPABILITY_SETTING_FIRE_VARIABLE_REPLACEMENT |\n+                    EXTRA_HOST_CAPABILITY_RELEVANT_VARIABLES|\n+                    EXTRA_HOST_CAPABILITY_SETTING_SYNCHRONOUS_EXECUTION |\n+                    EXTRA_HOST_CAPABILITY_REQUEST_QUERY_DATA_PASS_THROUGH |\n+                    EXTRA_HOST_CAPABILITY_ENCODING_JSON\n+            ;\n+\n+    /**\n+     * Possible encodings of text in bundle values\n+     *\n+     * @see #setKeyEncoding(Bundle,String[],Encoding)\n+     */\n+    public enum Encoding { JSON };\n+\n+    private final static String\t\tBUNDLE_KEY_ENCODING_JSON_KEYS = BASE_KEY + \".JSON_ENCODED_KEYS\";\n+\n+    public static boolean hostSupportsKeyEncoding( Bundle extrasFromHost, Encoding encoding ) {\n+        switch ( encoding ) {\n+            case JSON:\n+                return hostSupports( extrasFromHost, EXTRA_HOST_CAPABILITY_ENCODING_JSON );\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    /**\n+     *\n+     *  Miscellaneous operational hints going one way or the other\n+     *  @see Setting#hostSupportsVariableReturn(Bundle)\n+     */\n+\n+    private final static String\t\tEXTRA_HINTS_BUNDLE = EXTRAS_PREFIX + \"HINTS\";\n+\n+    private final static String\t\tBUNDLE_KEY_HINT_PREFIX = \".hints.\";\n+\n+    private final static String\t\tBUNDLE_KEY_HINT_TIMEOUT_MS = BUNDLE_KEY_HINT_PREFIX + \"TIMEOUT\";\n+\n+    /**\n+     *\n+     *\t@see #hostSupportsRelevantVariables(Bundle)\n+     *  @see #addRelevantVariableList(Intent, String[])\n+     *  @see #getRelevantVariableList(Bundle)\n+     */\n+    private final static String\tBUNDLE_KEY_RELEVANT_VARIABLES = BASE_KEY + \".RELEVANT_VARIABLES\";\n+\n+\n+    public static boolean hostSupportsRelevantVariables( Bundle extrasFromHost ) {\n+        return hostSupports( extrasFromHost,  EXTRA_HOST_CAPABILITY_RELEVANT_VARIABLES );\n+    }\n+\n+    /**\n+     * Specifies to host which variables might be used by the plugin.\n+     *\n+     * Used in EditActivity, before setResult().\n+     *\n+     * @param  intentToHost the intent being returned to the host\n+     * @param  variableNames array of relevant variable names\n+     */\n+    public static void addRelevantVariableList( Intent intentToHost, String [] variableNames ) {\n+        intentToHost.putExtra( BUNDLE_KEY_RELEVANT_VARIABLES, variableNames );\n+    }\n+\n+    /**\n+     * Validate a variable name.\n+     *\n+     * The basic requirement for variables from a plugin is that they must be all lower-case.\n+     *\n+     * @param  varName name to check\n+     */\n+    public static boolean variableNameValid( String varName ) {\n+\n+        boolean validFlag = false;\n+\n+        if ( varName == null )\n+            Log.d( TAG, \"variableNameValid: null name\" );\n+        else {\n+            if ( VARIABLE_NAME_MATCH_PATTERN == null )\n+                VARIABLE_NAME_MATCH_PATTERN = Pattern.compile( VARIABLE_NAME_MATCH_EXPRESSION, 0 );\n+\n+            if ( VARIABLE_NAME_MATCH_PATTERN.matcher( varName ).matches() ) {\n+\n+                if ( variableNameIsLocal( varName ) )\n+                    validFlag = true;\n+                else\n+                    Log.d( TAG, \"variableNameValid: name not local: \" + varName );\n+            }\n+            else\n+                Log.d( TAG, \"variableNameValid: invalid name: \" + varName );\n+        }\n+\n+        return validFlag;\n+    }\n+\n+    /**\n+     * Allows the plugin/host to indicate to each other a set of variables which they are referencing.\n+     * The host may use this to e.g. show a variable selection list in it's UI.\n+     * The host should use this if it previously indicated to the plugin that it supports relevant vars\n+     *\n+     * @param  fromHostIntentExtras usually from getIntent().getExtras()\n+     * @return variableNames an array of relevant variable names\n+     */\n+    public static String [] getRelevantVariableList( Bundle fromHostIntentExtras ) {\n+\n+        String [] relevantVars = (String []) getBundleValueSafe( fromHostIntentExtras, BUNDLE_KEY_RELEVANT_VARIABLES, String [].class, \"getRelevantVariableList\" );\n+\n+        if ( relevantVars == null )\n+            relevantVars = new String [0];\n+\n+        return relevantVars;\n+    }\n+\n+    /**\n+     * Used by: plugin QueryReceiver, FireReceiver\n+     *\n+     * Add a bundle of variable name/value pairs.\n+     *\n+     * Names must be valid Tasker local variable names.\n+     * Values must be String, String [] or ArrayList<String>\n+     * Null values cause deletion of possible already-existing variables\n+     * A null value where the variable does not already exist results in attempted deletion\n+     * of any existing array indices (%arr1, %arr2 etc)\n+     *\n+     * @param resultExtras the result extras from the receiver onReceive (from a call to getResultExtras())\n+     * @param variables the variables to send\n+     * @see Setting#hostSupportsVariableReturn(Bundle)\n+     * @see #variableNameValid(String)\n+     */\n+    public static void addVariableBundle( Bundle resultExtras, Bundle variables ) {\n+        resultExtras.putBundle( EXTRA_VARIABLES_BUNDLE, variables );\n+    }\n+\n+    /**\n+     * Used by: plugin EditActivity\n+     *\n+     * Specify the encoding for a set of bundle keys.\n+     *\n+     * This is completely optional and currently only necessary if using Setting#setVariableReplaceKeys\n+     * where the corresponding values of some of the keys specified are JSON encoded.\n+     *\n+     * @param  resultBundleToHost the bundle being returned to the host\n+     * @param keys the keys being returned to the host which are encoded in some way\n+     * @param encoding the encoding of the values corresponding to the specified keys\n+     * @see #setVariableReplaceKeys(Bundle,String[])\n+     * @see #hostSupportsKeyEncoding(Bundle, Encoding)\n+     */\n+    public static void setKeyEncoding( Bundle resultBundleToHost, String [] keys, Encoding encoding ) {\n+        if ( Encoding.JSON.equals( encoding ) )\n+            addStringArrayToBundleAsString(\n+                    keys, resultBundleToHost, BUNDLE_KEY_ENCODING_JSON_KEYS, \"setValueEncoding\"\n+            );\n+        else\n+            Log.e( TAG, \"unknown encoding: \" + encoding );\n+    }\n+\n+    // ----------------------------- SETTING PLUGIN ONLY --------------------------------- //\n+\n+    public static class Setting {\n+\n+        /**\n+         * \tVariable name into which a description of any error that occurred can be placed\n+         *  for the user to process.\n+         *\n+         *  Should *only* be set when the BroadcastReceiver result code indicates a failure.\n+         *\n+         *  Note that the user needs to have configured the task to continue after failure of the plugin\n+         *  action otherwise they will not be able to make use of the error message.\n+         *\n+         *  For use with #addRelevantVariableList(Intent, String[]) and #addVariableBundle(Bundle, Bundle)\n+         *\n+         */\n+        public final static String\t\tVARNAME_ERROR_MESSAGE = VARIABLE_PREFIX + \"errmsg\";\n+\n+        /**\n+         *\t@see #setVariableReplaceKeys(Bundle, String[])\n+         */\n+        private final static String\t\tBUNDLE_KEY_VARIABLE_REPLACE_STRINGS = EXTRAS_PREFIX + \"VARIABLE_REPLACE_KEYS\";\n+\n+        /**\n+         *\t@see #requestTimeoutMS(android.content.Intent, int)\n+         */\n+        private final static String \tEXTRA_REQUESTED_TIMEOUT = EXTRAS_PREFIX + \"REQUESTED_TIMEOUT\";\n+\n+        /**\n+         *\t@see #requestTimeoutMS(android.content.Intent, int)\n+         */\n+\n+        public final static int \t\tREQUESTED_TIMEOUT_MS_NONE = 0;\n+\n+        /**\n+         *\t@see #requestTimeoutMS(android.content.Intent, int)\n+         */\n+\n+        public final static int \t\tREQUESTED_TIMEOUT_MS_MAX = 3599000;\n+\n+        /**\n+         *\t@see #requestTimeoutMS(android.content.Intent, int)\n+         */\n+\n+        public final static int \t\tREQUESTED_TIMEOUT_MS_NEVER = REQUESTED_TIMEOUT_MS_MAX + 1000;\n+\n+        /**\n+         *  @see #signalFinish(Context, Intent, int, Bundle)\n+         *  @see #addCompletionIntent(Intent, Intent,ComponentName, boolean)\n+         */\n+        private final static String \tEXTRA_PLUGIN_COMPLETION_INTENT = EXTRAS_PREFIX + \"COMPLETION_INTENT\";\n+\n+        /**\n+         *  @see #signalFinish(Context, Intent, int, Bundle)\n+         *  @see Host#getSettingResultCode(Intent)\n+         */\n+        public final static String \t\tEXTRA_RESULT_CODE = EXTRAS_PREFIX + \"RESULT_CODE\";\n+\n+        /**\n+         *\n+         *\t@see #signalFinish(Context, Intent, int, Bundle)\n+         *  @see #addCompletionIntent(Intent, Intent,ComponentName, boolean)\n+         */\n+        public final static String EXTRA_CALL_SERVICE_PACKAGE = BASE_KEY + \".EXTRA_CALL_SERVICE_PACKAGE\";\n+        public final static String EXTRA_CALL_SERVICE = BASE_KEY + \".EXTRA_CALL_SERVICE\";\n+        public final static String EXTRA_CALL_SERVICE_FOREGROUND = BASE_KEY + \".EXTRA_CALL_SERVICE_FOREGROUND\";\n+        /**\n+         *  @see #signalFinish(Context, Intent, int, Bundle)\n+         *  @see Host#getSettingResultCode(Intent)\n+         */\n+\n+        public final static int\tRESULT_CODE_OK = Activity.RESULT_OK;\n+        public final static int\tRESULT_CODE_OK_MINOR_FAILURES = Activity.RESULT_FIRST_USER;\n+        public final static int\tRESULT_CODE_FAILED = Activity.RESULT_FIRST_USER + 1;\n+        public final static int\tRESULT_CODE_PENDING = Activity.RESULT_FIRST_USER + 2;\n+        public final static int\tRESULT_CODE_UNKNOWN = Activity.RESULT_FIRST_USER + 3;\n+\n+        /**\n+         * If a plugin wants to define it's own error codes, start numbering them here.\n+         * The code will be placed in an error variable (%err in the case of Tasker) for\n+         * the user to process after the plugin action.\n+         */\n+\n+        public final static int\tRESULT_CODE_FAILED_PLUGIN_FIRST = Activity.RESULT_FIRST_USER + 9;\n+\n+        /**\n+         * Used by: plugin EditActivity.\n+         *\n+         * Indicates to plugin that host will replace variables in specified bundle keys.\n+         *\n+         * Replacement takes place every time the setting is fired, before the bundle is\n+         * passed to the plugin FireReceiver.\n+         *\n+         * @param  extrasFromHost intent extras from the intent received by the edit activity\n+         * @see #setVariableReplaceKeys(Bundle, String[])\n+         */\n+        public static boolean hostSupportsOnFireVariableReplacement( Bundle extrasFromHost ) {\n+            return hostSupports( extrasFromHost, EXTRA_HOST_CAPABILITY_SETTING_FIRE_VARIABLE_REPLACEMENT );\n+        }\n+\n+        /**\n+         * Used by: plugin EditActivity.\n+         *\n+         * Description as above.\n+         *\n+         * This version also includes backwards compatibility with pre 4.2 Tasker versions.\n+         * At some point this function will be deprecated.\n+         *\n+         * @param  editActivity the plugin edit activity, needed to test calling Tasker version\n+         * @see #setVariableReplaceKeys(Bundle, String[])\n+         */\n+\n+        public static boolean hostSupportsOnFireVariableReplacement( Activity editActivity ) {\n+\n+            boolean supportedFlag = hostSupportsOnFireVariableReplacement( editActivity.getIntent().getExtras() );\n+\n+            if ( ! supportedFlag ) {\n+\n+                ComponentName callingActivity = editActivity.getCallingActivity();\n+\n+                if ( callingActivity == null )\n+                    Log.w( TAG, \"hostSupportsOnFireVariableReplacement: null callingActivity, defaulting to false\" );\n+                else {\n+                    String callerPackage = callingActivity.getPackageName();\n+\n+                    // Tasker only supporteed this from 1.0.10\n+                    supportedFlag =\n+                            ( callerPackage.startsWith( BASE_KEY ) ) &&\n+                                    ( getPackageVersionCode( editActivity.getPackageManager(), callerPackage ) > FIRST_ON_FIRE_VARIABLES_TASKER_VERSION )\n+                    ;\n+                }\n+            }\n+\n+            return supportedFlag;\n+        }\n+\n+        public static boolean hostSupportsSynchronousExecution( Bundle extrasFromHost ) {\n+            return hostSupports( extrasFromHost, EXTRA_HOST_CAPABILITY_SETTING_SYNCHRONOUS_EXECUTION );\n+        }\n+\n+        /**\n+         * Request the host to wait the specified number of milliseconds before continuing.\n+         * Note that the host may choose to ignore the request.\n+         *\n+         * Maximum value is REQUESTED_TIMEOUT_MS_MAX.\n+         * Also available are REQUESTED_TIMEOUT_MS_NONE (continue immediately without waiting\n+         * for the plugin to finish) and REQUESTED_TIMEOUT_MS_NEVER (wait forever for\n+         * a result).\n+         *\n+         * Used in EditActivity, before setResult().\n+         *\n+         * @param  intentToHost the intent being returned to the host\n+         * @param  timeoutMS\n+         */\n+        public static void requestTimeoutMS( Intent intentToHost, int timeoutMS ) {\n+            if ( timeoutMS < 0 )\n+                Log.w( TAG, \"requestTimeoutMS: ignoring negative timeout (\" + timeoutMS + \")\" );\n+            else {\n+                if (\n+                        ( timeoutMS > REQUESTED_TIMEOUT_MS_MAX ) &&\n+                                ( timeoutMS != REQUESTED_TIMEOUT_MS_NEVER )\n+                        ) {\n+                    Log.w( TAG, \"requestTimeoutMS: requested timeout \" + timeoutMS + \" exceeds maximum, setting to max (\" + REQUESTED_TIMEOUT_MS_MAX + \")\" );\n+                    timeoutMS = REQUESTED_TIMEOUT_MS_MAX;\n+                }\n+                intentToHost.putExtra( EXTRA_REQUESTED_TIMEOUT, timeoutMS );\n+            }\n+        }\n+\n+        /**\n+         * Used by: plugin EditActivity\n+         *\n+         * Indicates to host which bundle keys should be replaced.\n+         *\n+         * @param  resultBundleToHost the bundle being returned to the host\n+         * @param  listOfKeyNames which bundle keys to replace variables in when setting fires\n+         * @see #hostSupportsOnFireVariableReplacement(Bundle)\n+         * @see #setKeyEncoding(Bundle,String[],Encoding)\n+         */\n+        public static void setVariableReplaceKeys( Bundle resultBundleToHost, String [] listOfKeyNames ) {\n+            addStringArrayToBundleAsString(\n+                    listOfKeyNames, resultBundleToHost, BUNDLE_KEY_VARIABLE_REPLACE_STRINGS,\n+                    \"setVariableReplaceKeys\"\n+            );\n+        }\n+\n+        public static boolean hasVariableReplaceKeys(Bundle resultBundleToHost) {\n+            return resultBundleToHost.containsKey(BUNDLE_KEY_VARIABLE_REPLACE_STRINGS);\n+        }\n+\n+        /**\n+         * Used by: plugin FireReceiver\n+         *\n+         * Indicates to plugin whether the host will process variables which it passes back\n+         *\n+         * @param  extrasFromHost intent extras from the intent received by the FireReceiver\n+         * @see #signalFinish(Context, Intent, int, Bundle)\n+         */\n+        public static boolean hostSupportsVariableReturn( Bundle extrasFromHost ) {\n+            return hostSupports( extrasFromHost, EXTRA_HOST_CAPABILITY_SETTING_RETURN_VARIABLES );\n+        }\n+\n+        /**\n+         * Used by: plugin FireReceiver\n+         *\n+         * Tell the host that the plugin has finished execution.\n+         *\n+         * This should only be used if RESULT_CODE_PENDING was returned by FireReceiver.onReceive().\n+         *\n+         * @param originalFireIntent the intent received from the host (via onReceive())\n+         * @param resultCode level of success in performing the settings\n+         * @param vars any variables that the plugin wants to set in the host\n+         * @see #hostSupportsSynchronousExecution(Bundle)\n+         */\n+        public static boolean signalFinish( Context context, Intent originalFireIntent, int resultCode, Bundle vars ) {\n+\n+            String errorPrefix = \"signalFinish: \";\n+\n+            boolean okFlag = false;\n+\n+            String completionIntentString = (String) getExtraValueSafe( originalFireIntent, Setting.EXTRA_PLUGIN_COMPLETION_INTENT, String.class, \"signalFinish\" );\n+\n+            if ( completionIntentString != null ) {\n+\n+                Uri completionIntentUri = null;\n+                try {\n+                    completionIntentUri = Uri.parse( completionIntentString );\n+                }\n+                // \tshould only throw NullPointer but don't particularly trust it\n+                catch ( Exception e ) {\n+                    Log.w( TAG, errorPrefix + \"couldn't parse \" + completionIntentString );\n+                }\n+\n+                if ( completionIntentUri != null ) {\n+                    try {\n+                        Intent completionIntent = Intent.parseUri( completionIntentString, Intent.URI_INTENT_SCHEME );\n+\n+                        completionIntent.putExtra( EXTRA_RESULT_CODE, resultCode );\n+\n+                        if ( vars != null )\n+                            completionIntent.putExtra( EXTRA_VARIABLES_BUNDLE, vars );\n+\n+                        String callServicePackage = (String) getExtraValueSafe(completionIntent, Setting.EXTRA_CALL_SERVICE_PACKAGE, String.class, \"signalFinish\");\n+                        String callService = (String) getExtraValueSafe(completionIntent, Setting.EXTRA_CALL_SERVICE, String.class, \"signalFinish\");\n+                        Boolean foreground = (Boolean) getExtraValueSafe(completionIntent, Setting.EXTRA_CALL_SERVICE_FOREGROUND, Boolean.class, \"signalFinish\");\n+                        if (callServicePackage != null && callService != null && foreground != null) {\n+                            completionIntent.setComponent(new ComponentName(callServicePackage, callService));\n+                            if (foreground && android.os.Build.VERSION.SDK_INT >= 26) {\n+                                context.startForegroundService(completionIntent);\n+                            } else {\n+                                context.startService(completionIntent);\n+                            }\n+                        } else {\n+                            context.sendBroadcast(completionIntent);\n+                        }\n+\n+                        okFlag = true;\n+                    }\n+                    catch ( URISyntaxException e ) {\n+                        Log.w( TAG, errorPrefix + \"bad URI: \" + completionIntentUri );\n+                    }\n+                }\n+            }\n+\n+            return okFlag;\n+        }\n+\n+        /**\n+         * Check for a hint on the timeout value the host is using.\n+         * Used by: plugin FireReceiver.\n+         * Requires Tasker 4.7+\n+         *\n+         * @param  extrasFromHost intent extras from the intent received by the FireReceiver\n+         * @return timeoutMS the hosts timeout setting for the action or -1 if no hint is available.\n+         *\n+         * @see #REQUESTED_TIMEOUT_MS_NONE, REQUESTED_TIMEOUT_MS_MAX, REQUESTED_TIMEOUT_MS_NEVER\n+         */\n+        public static int getHintTimeoutMS( Bundle extrasFromHost ) {\n+\n+            int timeoutMS = -1;\n+\n+            Bundle hintsBundle = (Bundle) TaskerPlugin.getBundleValueSafe( extrasFromHost, EXTRA_HINTS_BUNDLE, Bundle.class, \"getHintTimeoutMS\" );\n+\n+            if ( hintsBundle != null ) {\n+\n+                Integer val = (Integer) getBundleValueSafe( hintsBundle, BUNDLE_KEY_HINT_TIMEOUT_MS, Integer.class, \"getHintTimeoutMS\" );\n+\n+                if ( val != null )\n+                    timeoutMS = val;\n+            }\n+\n+            return timeoutMS;\n+        }\n+    }\n+\n+    // ----------------------------- CONDITION/EVENT PLUGIN ONLY --------------------------------- //\n+\n+    public static class Condition {\n+\n+        /**\n+         * @see #getResultReceiver(Intent)\n+         */\n+        public final static String EXTRA_RESULT_RECEIVER = BASE_KEY + \".EXTRA_RESULT_RECEIVER\";\n+        /**\n+         * Used by: plugin QueryReceiver\n+         *\n+         * Indicates to plugin whether the host will process variables which it passes back\n+         *\n+         * @param  extrasFromHost intent extras from the intent received by the QueryReceiver\n+         * @see #addVariableBundle(Bundle, Bundle)\n+         */\n+        public static boolean hostSupportsVariableReturn( Bundle extrasFromHost ) {\n+            return hostSupports( extrasFromHost,  EXTRA_HOST_CAPABILITY_CONDITION_RETURN_VARIABLES );\n+        }\n+\n+        public static ResultReceiver getResultReceiver(Intent intentFromHost) {\n+            if (intentFromHost == null) {\n+                return null;\n+            }\n+            return (ResultReceiver) getExtraValueSafe(intentFromHost, EXTRA_RESULT_RECEIVER, ResultReceiver.class, \"getResultReceiver\");\n+\n+        }\n+    }\n+\n+    // ----------------------------- EVENT PLUGIN ONLY --------------------------------- //\n+\n+    public static class Event {\n+\n+        public final static String\tPASS_THROUGH_BUNDLE_MESSAGE_ID_KEY = BASE_KEY + \".MESSAGE_ID\";\n+\n+        private final static String\tEXTRA_REQUEST_QUERY_PASS_THROUGH_DATA = EXTRAS_PREFIX + \"PASS_THROUGH_DATA\";\n+\n+        /**\n+         * @param  extrasFromHost intent extras from the intent received by the QueryReceiver\n+         * @see #addPassThroughData(Intent, Bundle)\n+         */\n+        public static boolean hostSupportsRequestQueryDataPassThrough( Bundle extrasFromHost ) {\n+            return hostSupports( extrasFromHost,  EXTRA_HOST_CAPABILITY_REQUEST_QUERY_DATA_PASS_THROUGH );\n+        }\n+\n+        /**\n+         * Specify a bundle of data (probably representing whatever change happened in the condition)\n+         * which will be included in the QUERY_CONDITION broadcast sent by the host for each\n+         * event instance of the plugin.\n+         *\n+         * The minimal purpose is to enable the plugin to associate a QUERY_CONDITION to the\n+         * with the REQUEST_QUERY that caused it.\n+         *\n+         * Note that for security reasons it is advisable to also store a message ID with the bundle\n+         * which can be compared to known IDs on receipt. The host cannot validate the source of\n+         * REQUEST_QUERY intents so fake data may be passed. Replay attacks are also possible.\n+         * addPassThroughMesssageID() can be used to add an ID if the plugin doesn't wish to add it's\n+         * own ID to the pass through bundle.\n+         *\n+         * Note also that there are several situations where REQUEST_QUERY will not result in a\n+         * QUERY_CONDITION intent (e.g. event throttling by the host), so plugin-local data\n+         * indexed with a message ID needs to be timestamped and eventually timed-out.\n+         *\n+         * This function can be called multiple times, each time all keys in data will be added to\n+         * that of previous calls.\n+         *\n+         * @param requestQueryIntent intent being sent to the host\n+         * @param data the data to be passed-through\n+         * @see #hostSupportsRequestQueryDataPassThrough(Bundle)\n+         * @see #retrievePassThroughData(Intent)\n+         * @see #addPassThroughMessageID\n+         *\n+         */\n+        public static void addPassThroughData( Intent requestQueryIntent, Bundle data ) {\n+\n+            Bundle passThroughBundle = retrieveOrCreatePassThroughBundle( requestQueryIntent );\n+\n+            passThroughBundle.putAll( data );\n+        }\n+\n+        /**\n+         * Retrieve the pass through data from a QUERY_REQUEST from the host which was generated\n+         * by a REQUEST_QUERY from the plugin.\n+         *\n+         * Note that if addPassThroughMessageID() was previously called, the data will contain an extra\n+         * key TaskerPlugin.Event.PASS_THOUGH_BUNDLE_MESSAGE_ID_KEY.\n+         *\n+         * @param queryConditionIntent QUERY_REQUEST sent from host\n+         * @return data previously added to the REQUEST_QUERY intent\n+         * @see #hostSupportsRequestQueryDataPassThrough(Bundle)\n+         * @see #addPassThroughData(Intent,Bundle)\n+         */\n+        public static Bundle retrievePassThroughData( Intent queryConditionIntent ) {\n+            return (Bundle) getExtraValueSafe(\n+                    queryConditionIntent,\n+                    EXTRA_REQUEST_QUERY_PASS_THROUGH_DATA,\n+                    Bundle.class,\n+                    \"retrievePassThroughData\"\n+            );\n+        }\n+\n+        /**\n+         * Add a message ID to a REQUEST_QUERY intent which will then be included in the corresponding\n+         * QUERY_CONDITION broadcast sent by the host for each event instance of the plugin.\n+         *\n+         * The minimal purpose is to enable the plugin to associate a QUERY_CONDITION to the\n+         * with the REQUEST_QUERY that caused it. It also allows the message to be verified\n+         * by the plugin to prevent e.g. replay attacks\n+         *\n+         * @param requestQueryIntent intent being sent to the host\n+         * @return a guaranteed non-repeating within 100 calls message ID\n+         * @see #hostSupportsRequestQueryDataPassThrough(Bundle)\n+         * @see #retrievePassThroughData(Intent)\n+         * @return an ID for the bundle so it can be identified and the caller verified when it is again received by the plugin\n+         *\n+         */\n+        public static int addPassThroughMessageID( Intent requestQueryIntent ) {\n+\n+            Bundle passThroughBundle = retrieveOrCreatePassThroughBundle( requestQueryIntent );\n+\n+            int id = getPositiveNonRepeatingRandomInteger();\n+\n+            passThroughBundle.putInt( PASS_THROUGH_BUNDLE_MESSAGE_ID_KEY, id );\n+\n+            return id;\n+        }\n+\n+        /*\n+         * Retrieve the pass through data from a QUERY_REQUEST from the host which was generated\n+         * by a REQUEST_QUERY from the plugin.\n+         *\n+         * @param queryConditionIntent QUERY_REQUEST sent from host\n+         * @return the ID which was passed through by the host, or -1 if no ID was found\n+         * @see #hostSupportsRequestQueryDataPassThrough(Bundle)\n+         * @see #addPassThroughData(Intent,Bundle)\n+         */\n+        public static int retrievePassThroughMessageID( Intent queryConditionIntent ) {\n+\n+            int toReturn = -1;\n+\n+            Bundle passThroughData = Event.retrievePassThroughData( queryConditionIntent );\n+\n+            if ( passThroughData != null ) {\n+                Integer id = (Integer) getBundleValueSafe(\n+                        passThroughData,\n+                        PASS_THROUGH_BUNDLE_MESSAGE_ID_KEY,\n+                        Integer.class,\n+                        \"retrievePassThroughMessageID\"\n+                );\n+\n+                if ( id != null )\n+                    toReturn = id;\n+            }\n+\n+            return toReturn;\n+        }\n+\n+        // internal use\n+        private static Bundle retrieveOrCreatePassThroughBundle( Intent requestQueryIntent ) {\n+\n+            Bundle passThroughBundle;\n+\n+            if ( requestQueryIntent.hasExtra( EXTRA_REQUEST_QUERY_PASS_THROUGH_DATA ) )\n+                passThroughBundle = requestQueryIntent.getBundleExtra( EXTRA_REQUEST_QUERY_PASS_THROUGH_DATA );\n+            else {\n+                passThroughBundle = new Bundle();\n+                requestQueryIntent.putExtra( EXTRA_REQUEST_QUERY_PASS_THROUGH_DATA, passThroughBundle );\n+            }\n+\n+            return passThroughBundle;\n+        }\n+    }\n+    // ---------------------------------- HOST  ----------------------------------------- //\n+\n+    public static class Host {\n+\n+        /**\n+         * Tell the plugin what capabilities the host support. This should be called when sending\n+         * intents to any EditActivity, FireReceiver or QueryReceiver.\n+         *\n+         * @param  toPlugin the intent we're sending\n+         * @return capabilities one or more of the EXTRA_HOST_CAPABILITY_XXX flags\n+         */\n+        public static Intent addCapabilities( Intent toPlugin, int capabilities ) {\n+            return toPlugin.putExtra( EXTRA_HOST_CAPABILITIES, capabilities  );\n+        }\n+\n+        /**\n+         * Add an intent to the fire intent before it goes to the plugin FireReceiver, which the plugin\n+         * can use to signal when it is finished. Only use if @code{pluginWantsSychronousExecution} is true.\n+         *\n+         * @param fireIntent fire intent going to the plugin\n+         * @param completionIntent intent which will signal the host that the plugin is finished.\n+         * Implementation is host-dependent.\n+         */\n+        public static void addCompletionIntent(Intent fireIntent, Intent completionIntent, ComponentName callService, boolean foreground) {\n+            if (callService != null) {\n+                completionIntent.putExtra(Setting.EXTRA_CALL_SERVICE_PACKAGE, callService.getPackageName());\n+                completionIntent.putExtra(Setting.EXTRA_CALL_SERVICE, callService.getClassName());\n+                completionIntent.putExtra(Setting.EXTRA_CALL_SERVICE_FOREGROUND, foreground);\n+            }\n+            fireIntent.putExtra(\n+                    Setting.EXTRA_PLUGIN_COMPLETION_INTENT,\n+                    completionIntent.toUri(Intent.URI_INTENT_SCHEME)\n+            );\n+        }\n+\n+        /**\n+         * When a setting plugin is finished, it sends the host the intent which was passed to it\n+         * via @code{addCompletionIntent}.\n+         *\n+         * @param completionIntent intent returned from the plugin when it finished.\n+         * @return resultCode measure of plugin success, defaults to UNKNOWN\n+         */\n+        public static int getSettingResultCode( Intent completionIntent ) {\n+\n+            Integer val = (Integer) getExtraValueSafe( completionIntent, Setting.EXTRA_RESULT_CODE, Integer.class, \"getSettingResultCode\" );\n+\n+            return ( val == null ) ? Setting.RESULT_CODE_UNKNOWN : val;\n+        }\n+\n+        /**\n+         * Extract a bundle of variables from an intent received from the FireReceiver. This\n+         * should be called if the host previously indicated to the plugin\n+         * that it supports setting variable return.\n+         *\n+         * @param resultExtras getResultExtras() from BroadcastReceiver:onReceive()\n+         * @return variables a bundle of variable name/value pairs\n+         * @see #addCapabilities(Intent, int)\n+         */\n+\n+        public static Bundle getVariablesBundle( Bundle resultExtras ) {\n+            return (Bundle) getBundleValueSafe(\n+                    resultExtras, EXTRA_VARIABLES_BUNDLE, Bundle.class, \"getVariablesBundle\"\n+            );\n+        }\n+\n+        /**\n+         * Inform a setting plugin of the timeout value the host is using.\n+         *\n+         * @param toPlugin the intent we're sending\n+         * @param timeoutMS the hosts timeout setting for the action. Note that this may differ from\n+         * that which the plugin requests.\n+         * @see #REQUESTED_TIMEOUT_MS_NONE, REQUESTED_TIMEOUT_MS_MAX, REQUESTED_TIMEOUT_MS_NEVER\n+         */\n+        public static void addHintTimeoutMS( Intent toPlugin, int timeoutMS ) {\n+            getHintsBundle( toPlugin, \"addHintTimeoutMS\" ).putInt( BUNDLE_KEY_HINT_TIMEOUT_MS, timeoutMS );\n+        }\n+\n+        private static Bundle getHintsBundle( Intent intent, String funcName ) {\n+\n+            Bundle hintsBundle = (Bundle) getExtraValueSafe( intent, EXTRA_HINTS_BUNDLE, Bundle.class, funcName );\n+\n+            if ( hintsBundle == null ) {\n+                hintsBundle = new Bundle();\n+                intent.putExtra( EXTRA_HINTS_BUNDLE, hintsBundle );\n+            }\n+\n+            return hintsBundle;\n+        }\n+\n+        public static boolean haveRequestedTimeout( Bundle extrasFromPluginEditActivity ) {\n+            return extrasFromPluginEditActivity.containsKey( Setting.EXTRA_REQUESTED_TIMEOUT );\n+        }\n+\n+        public static int getRequestedTimeoutMS( Bundle extrasFromPluginEditActivity ) {\n+            return\n+                    (Integer) getBundleValueSafe(\n+                            extrasFromPluginEditActivity, Setting.EXTRA_REQUESTED_TIMEOUT,\tInteger.class, \"getRequestedTimeout\"\n+                    )\n+                    ;\n+        }\n+\n+        public static String [] getSettingVariableReplaceKeys( Bundle fromPluginEditActivity ) {\n+            return getStringArrayFromBundleString(\n+                    fromPluginEditActivity, Setting.BUNDLE_KEY_VARIABLE_REPLACE_STRINGS,\n+                    \"getSettingVariableReplaceKeys\"\n+            );\n+        }\n+\n+        public static String [] getKeysWithEncoding( Bundle fromPluginEditActivity, Encoding encoding ) {\n+\n+            String [] toReturn = null;\n+\n+            if ( Encoding.JSON.equals( encoding ) )\n+                toReturn = getStringArrayFromBundleString(\n+                        fromPluginEditActivity, TaskerPlugin.BUNDLE_KEY_ENCODING_JSON_KEYS,\n+                        \"getKeyEncoding:JSON\"\n+                );\n+            else\n+                Log.w( TAG, \"Host.getKeyEncoding: unknown encoding \" + encoding );\n+\n+            return toReturn;\n+        }\n+\n+        public static boolean haveRelevantVariables( Bundle b ) {\n+            return b.containsKey( BUNDLE_KEY_RELEVANT_VARIABLES );\n+        }\n+\n+        public static void cleanRelevantVariables( Bundle b ) {\n+            b.remove( BUNDLE_KEY_RELEVANT_VARIABLES );\n+        }\n+\n+        public static void cleanHints( Bundle extras ) {\n+            extras.remove( TaskerPlugin.EXTRA_HINTS_BUNDLE );\n+        }\n+\n+        public static void cleanRequestedTimeout( Bundle extras ) {\n+            extras.remove( Setting.EXTRA_REQUESTED_TIMEOUT );\n+        }\n+\n+        public static void cleanSettingReplaceVariables( Bundle b ) {\n+            b.remove( Setting.BUNDLE_KEY_VARIABLE_REPLACE_STRINGS );\n+        }\n+    }\n+\n+    // ---------------------------------- HELPER FUNCTIONS -------------------------------- //\n+\n+    private static Object getBundleValueSafe( Bundle b, String key, Class<?> expectedClass, String funcName ) {\n+        Object value = null;\n+\n+        if ( b != null ) {\n+            if ( b.containsKey( key ) ) {\n+                Object obj = b.get( key );\n+                if ( obj == null )\n+                    Log.w( TAG, funcName + \": \" + key + \": null value\" );\n+                else if ( obj.getClass() != expectedClass )\n+                    Log.w( TAG, funcName + \": \" + key + \": expected \" + expectedClass.getClass().getName() + \", got \" + obj.getClass().getName() );\n+                else\n+                    value = obj;\n+            }\n+        }\n+        return value;\n+    }\n+\n+    private static Object getExtraValueSafe( Intent i, String key, Class<?> expectedClass, String funcName ) {\n+        return ( i.hasExtra( key ) ) ?\n+                getBundleValueSafe( i.getExtras(), key, expectedClass, funcName ) :\n+                null;\n+    }\n+\n+    private static boolean hostSupports( Bundle extrasFromHost, int capabilityFlag ) {\n+        Integer flags = (Integer) getBundleValueSafe( extrasFromHost, EXTRA_HOST_CAPABILITIES, Integer.class, \"hostSupports\" );\n+        return\n+                ( flags != null ) &&\n+                        ( ( flags & capabilityFlag ) > 0 )\n+                ;\n+    }\n+\n+    public static int getPackageVersionCode( PackageManager pm, String packageName ) {\n+\n+        int code = -1;\n+\n+        if ( pm != null ) {\n+            try {\n+                PackageInfo pi = pm.getPackageInfo( packageName, 0 );\n+                if ( pi != null )\n+                    code = pi.versionCode;\n+            }\n+            catch ( Exception e ) {\n+                Log.e( TAG, \"getPackageVersionCode: exception getting package info\" );\n+            }\n+        }\n+\n+        return code;\n+    }\n+\n+    private static boolean variableNameIsLocal( String varName ) {\n+\n+        int digitCount = 0;\n+        int length = varName.length();\n+\n+        for ( int x = 0; x < length; x++ ) {\n+            char ch = varName.charAt( x );\n+\n+            if ( Character.isUpperCase( ch ) )\n+                return false;\n+            else if ( Character.isDigit( ch ) )\n+                digitCount++;\n+        }\n+\n+        if ( digitCount == ( varName.length() - 1 ) )\n+            return false;\n+\n+        return true;\n+    }\n+\n+    private static String [] getStringArrayFromBundleString( Bundle bundle, String key, String funcName ) {\n+\n+        String spec = (String) getBundleValueSafe( bundle, key, String.class, funcName );\n+\n+        String [] toReturn = null;\n+\n+        if ( spec != null )\n+            toReturn = spec.split( \" \" );\n+\n+        return toReturn;\n+    }\n+\n+    private static void addStringArrayToBundleAsString( String [] toAdd, Bundle bundle, String key, String callerName ) {\n+\n+        StringBuilder builder = new StringBuilder();\n+\n+        if ( toAdd != null ) {\n+\n+            for ( String keyName : toAdd ) {\n+\n+                if ( keyName.contains( \" \" ) )\n+                    Log.w( TAG, callerName + \": ignoring bad keyName containing space: \" + keyName );\n+                else {\n+                    if ( builder.length() > 0 )\n+                        builder.append( ' ' );\n+\n+                    builder.append( keyName );\n+                }\n+\n+                if ( builder.length() > 0 )\n+                    bundle.putString( key, builder.toString() );\n+            }\n+        }\n+    }\n+\n+    // state tracking for random number sequence\n+    private static int [] \t\tlastRandomsSeen = null;\n+    private static int \t\t\trandomInsertPointer = 0;\n+    private static SecureRandom sr = null;\n+\n+    /**\n+     * Generate a sequence of secure random positive integers which is guaranteed not to repeat\n+     * in the last 100 calls to this function.\n+     *\n+     * @return a random positive integer\n+     */\n+    public static int getPositiveNonRepeatingRandomInteger() {\n+\n+        // initialize on first call\n+        if ( sr == null ) {\n+            sr = new SecureRandom();\n+            lastRandomsSeen = new int[RANDOM_HISTORY_SIZE];\n+\n+            for ( int x = 0; x < lastRandomsSeen.length; x++ )\n+                lastRandomsSeen[x] = -1;\n+        }\n+\n+        int toReturn;\n+        do {\n+            // pick a number\n+            toReturn = sr.nextInt( Integer.MAX_VALUE );\n+\n+            // check we havn't see it recently\n+            for ( int seen : lastRandomsSeen ) {\n+                if ( seen == toReturn ) {\n+                    toReturn = -1;\n+                    break;\n+                }\n+            }\n+        }\n+        while ( toReturn == -1 );\n+\n+        // update history\n+        lastRandomsSeen[randomInsertPointer] = toReturn;\n+        randomInsertPointer = ( randomInsertPointer + 1 ) % lastRandomsSeen.length;\n+\n+        return toReturn;\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8cdf7532f631e47f24315ce0d96a16664a4f092e",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/Utils.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/Utils.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/Utils.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/Utils.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,73 @@\n+package com.markadamson.taskerplugin.homeassistant;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.os.Build;\n+import android.os.PowerManager;\n+import android.provider.Settings;\n+import android.support.v7.app.AlertDialog;\n+import android.view.View;\n+import android.widget.ArrayAdapter;\n+import android.widget.EditText;\n+\n+public class Utils {\n+\n+    public static void initVariableSelectUI(String[] variables, View button, final EditText destination) {\n+        final ArrayAdapter<String> adapter = new ArrayAdapter<>(button.getContext(), android.R.layout.select_dialog_item, variables);\n+\n+        button.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                AlertDialog.Builder builderSingle = new AlertDialog.Builder(v.getContext());\n+                builderSingle.setTitle(\"Variable Select\");\n+                builderSingle.setNegativeButton(\"cancel\", new DialogInterface.OnClickListener() {\n+                    @Override\n+                    public void onClick(DialogInterface dialog, int which) {\n+                        dialog.dismiss();\n+                    }\n+                });\n+\n+                builderSingle.setAdapter(adapter, new DialogInterface.OnClickListener() {\n+                    @Override\n+                    public void onClick(DialogInterface dialog, int which) {\n+                        String variable = adapter.getItem(which);\n+                        assert variable != null;\n+\n+                        int start = Math.max(destination.getSelectionStart(), 0);\n+                        int end = Math.max(destination.getSelectionEnd(), 0);\n+                        destination.getText().replace(Math.min(start, end), Math.max(start, end),\n+                                variable, 0, variable.length());\n+                    }\n+                });\n+                builderSingle.show();\n+            }\n+        });\n+    }\n+\n+    public static void checkBatteryOptimisation(final Activity activity) {\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            String packageName = activity.getPackageName();\n+            PowerManager pm = (PowerManager) activity.getSystemService(Context.POWER_SERVICE);\n+            if (!pm.isIgnoringBatteryOptimizations(packageName)) {\n+                new android.app.AlertDialog.Builder(activity)\n+                        .setTitle(R.string.disable_battery_optimization)\n+                        .setMessage(R.string.battery_optimization_dialog)\n+                        .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {\n+                            @Override\n+                            public void onClick(DialogInterface dialog, int which) {\n+                                activity.startActivity(new Intent()\n+                                        .setAction(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS));\n+                            }\n+                        })\n+                        .setNegativeButton(android.R.string.no, null)\n+                        .show();\n+            }\n+        }\n+    }\n+\n+    private Utils() {\n+        throw new UnsupportedOperationException(\"This class is non-instantiable\"); //$NON-NLS-1$\n+    }\n+}"
  },
  {
    "sha": "aa71550bfc07132cc4c113ae6d32e9dfe1e250cd",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/GetStatePluginBundleValues.java",
    "status": "added",
    "additions": 200,
    "deletions": 0,
    "changes": 200,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/GetStatePluginBundleValues.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/GetStatePluginBundleValues.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/GetStatePluginBundleValues.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,200 @@\n+/*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n+ * android-toast-setting-plugin-for-locale <https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale>\n+ * Copyright 2014 two forty four a.m. LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the\n+ * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.markadamson.taskerplugin.homeassistant.bundle;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import com.markadamson.taskerplugin.homeassistant.Constants;\n+import com.markadamson.taskerplugin.homeassistant.TaskerPlugin;\n+import com.twofortyfouram.assertion.BundleAssertions;\n+import com.twofortyfouram.log.Lumberjack;\n+import com.twofortyfouram.spackle.AppBuildInfo;\n+\n+import net.jcip.annotations.ThreadSafe;\n+\n+import java.util.UUID;\n+\n+import static com.twofortyfouram.assertion.Assertions.assertNotEmpty;\n+import static com.twofortyfouram.assertion.Assertions.assertNotNull;\n+\n+/**\n+ * Manages the {@link com.twofortyfouram.locale.api.Intent#EXTRA_BUNDLE EXTRA_BUNDLE} for this\n+ * plug-in.\n+ */\n+@ThreadSafe\n+public final class GetStatePluginBundleValues {\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * Server UUID as string.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_SERVER\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_SERVER\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * Domain/service to call.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_ENTITY\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_ENTITY\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * State output variable.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_VARIABLE\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_VARIABLE\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * Attributes output variable.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_ATTRS_VARIABLE\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_ATTRS_VARIABLE\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code int}.\n+     * <p>\n+     * versionCode of the plug-in that saved the Bundle.\n+     */\n+    /*\n+     * This extra is not strictly required, however it makes backward and forward compatibility\n+     * significantly easier. For example, suppose a bug is found in how some version of the plug-in\n+     * stored its Bundle. By having the version, the plug-in can better detect when such bugs occur.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_INT_VERSION_CODE\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.INT_VERSION_CODE\"; //$NON-NLS-1$\n+\n+    /**\n+     * Method to verify the content of the bundle are correct.\n+     * <p>\n+     * This method will not mutate {@code bundle}.\n+     *\n+     * @param bundle bundle to verify. May be null, which will always return false.\n+     * @return true if the Bundle is valid, false if the bundle is invalid.\n+     */\n+    public static boolean isBundleValid(@Nullable final Bundle bundle) {\n+        if (null == bundle) {\n+            return false;\n+        }\n+\n+        try {\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_SERVER, false, false);\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_ENTITY, false, false);\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_VARIABLE, false, true);\n+            BundleAssertions.assertHasInt(bundle, BUNDLE_EXTRA_INT_VERSION_CODE);\n+            BundleAssertions.assertHasInt(bundle, Constants.BUNDLE_EXTRA_BUNDLE_TYPE,\n+                    Constants.BUNDLE_GET_STATE, Constants.BUNDLE_GET_STATE);\n+\n+            int bundleVer = bundle.getInt(BUNDLE_EXTRA_INT_VERSION_CODE), expectedCount = 5;\n+\n+            // Bundle may now have replacement vars key:\n+            if (bundleVer >= 5 && TaskerPlugin.Setting.hasVariableReplaceKeys(bundle))\n+                expectedCount++;\n+\n+            if (bundleVer >= 6) {\n+                BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_ATTRS_VARIABLE, false, true);\n+                expectedCount++;\n+            }\n+\n+            BundleAssertions.assertKeyCount(bundle, expectedCount);\n+        } catch (final AssertionError e) {\n+            Lumberjack.e(\"Bundle failed verification%s\", e); //$NON-NLS-1$\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * @param context Application context.\n+     * @param server The server UUID.\n+     * @param entity The domain/service to call.\n+     * @param stateVariable The state output variable.\n+     * @param attrsVariable The attributes output variable.\n+     * @return A plug-in bundle.\n+     */\n+    @NonNull\n+    public static Bundle generateBundle(@NonNull final Context context,\n+                                        @NonNull final UUID server,\n+                                        @NonNull final String entity,\n+                                        @NonNull final String stateVariable,\n+                                        @NonNull final String attrsVariable) {\n+        assertNotNull(context, \"context\"); //$NON-NLS-1$\n+        assertNotNull(server, \"server\"); //$NON-NLS-1$\n+        assertNotEmpty(entity, \"service\"); //$NON-NLS-1$\n+\n+        final Bundle result = new Bundle();\n+        result.putInt(BUNDLE_EXTRA_INT_VERSION_CODE, AppBuildInfo.getVersionCode(context));\n+        result.putInt(Constants.BUNDLE_EXTRA_BUNDLE_TYPE, Constants.BUNDLE_GET_STATE);\n+        result.putString(BUNDLE_EXTRA_STRING_SERVER, server.toString());\n+        result.putString(BUNDLE_EXTRA_STRING_ENTITY, entity);\n+        result.putString(BUNDLE_EXTRA_STRING_VARIABLE, stateVariable);\n+        result.putString(BUNDLE_EXTRA_STRING_ATTRS_VARIABLE, attrsVariable);\n+        TaskerPlugin.Setting.setVariableReplaceKeys(result, new String[] {BUNDLE_EXTRA_STRING_ENTITY});\n+\n+        return result;\n+    }\n+\n+    /**\n+     * @param bundle A valid plug-in bundle.\n+     * @return The message inside the plug-in bundle.\n+     */\n+    @NonNull\n+    public static UUID getServer(@NonNull final Bundle bundle) {\n+        return UUID.fromString(bundle.getString(BUNDLE_EXTRA_STRING_SERVER));\n+    }\n+\n+    @NonNull\n+    public static String getEntity(@NonNull final Bundle bundle) {\n+        return bundle.getString(BUNDLE_EXTRA_STRING_ENTITY);\n+    }\n+\n+    @NonNull\n+    public static String getStateVariable(@NonNull final Bundle bundle) {\n+        return bundle.getString(BUNDLE_EXTRA_STRING_VARIABLE);\n+    }\n+\n+    @NonNull\n+    public static String getAttrsVariable(@NonNull final Bundle bundle) {\n+        return bundle.getString(BUNDLE_EXTRA_STRING_ATTRS_VARIABLE, \"\");\n+    }\n+\n+    /**\n+     * Private constructor prevents instantiation\n+     *\n+     * @throws UnsupportedOperationException because this class cannot be instantiated.\n+     */\n+    private GetStatePluginBundleValues() {\n+        throw new UnsupportedOperationException(\"This class is non-instantiable\"); //$NON-NLS-1$\n+    }\n+}"
  },
  {
    "sha": "8395b0287e4570b594994971a4d4327138684c95",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/PluginBundleValues.java",
    "status": "renamed",
    "additions": 78,
    "deletions": 18,
    "changes": 96,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/PluginBundleValues.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/PluginBundleValues.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/PluginBundleValues.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -1,4 +1,8 @@\n /*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n  * android-toast-setting-plugin-for-locale <https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale>\n  * Copyright 2014 two forty four a.m. LLC\n  *\n@@ -13,19 +17,22 @@\n  * limitations under the License.\n  */\n \n-package com.twofortyfouram.locale.example.setting.toast.bundle;\n+package com.markadamson.taskerplugin.homeassistant.bundle;\n \n-import com.twofortyfouram.assertion.Assertions;\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import com.markadamson.taskerplugin.homeassistant.Constants;\n+import com.markadamson.taskerplugin.homeassistant.TaskerPlugin;\n import com.twofortyfouram.assertion.BundleAssertions;\n import com.twofortyfouram.log.Lumberjack;\n import com.twofortyfouram.spackle.AppBuildInfo;\n \n import net.jcip.annotations.ThreadSafe;\n \n-import android.content.Context;\n-import android.os.Bundle;\n-import android.support.annotation.NonNull;\n-import android.support.annotation.Nullable;\n+import java.util.UUID;\n \n import static com.twofortyfouram.assertion.Assertions.assertNotEmpty;\n import static com.twofortyfouram.assertion.Assertions.assertNotNull;\n@@ -40,11 +47,29 @@\n     /**\n      * Type: {@code String}.\n      * <p>\n-     * String message to display in a Toast message.\n+     * Server UUID as string.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_SERVER\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_SERVER\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * Domain/service to call.\n      */\n     @NonNull\n-    public static final String BUNDLE_EXTRA_STRING_MESSAGE\n-            = \"com.twofortyfouram.locale.example.setting.toast.extra.STRING_MESSAGE\"; //$NON-NLS-1$\n+    public static final String BUNDLE_EXTRA_STRING_SERVICE\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_SERVICE\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * Service data (JSON, optional).\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_DATA\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_DATA\"; //$NON-NLS-1$\n \n     /**\n      * Type: {@code int}.\n@@ -58,7 +83,7 @@\n      */\n     @NonNull\n     public static final String BUNDLE_EXTRA_INT_VERSION_CODE\n-            = \"com.twofortyfouram.locale.example.setting.toast.extra.INT_VERSION_CODE\"; //$NON-NLS-1$\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.INT_VERSION_CODE\"; //$NON-NLS-1$\n \n     /**\n      * Method to verify the content of the bundle are correct.\n@@ -74,9 +99,25 @@ public static boolean isBundleValid(@Nullable final Bundle bundle) {\n         }\n \n         try {\n-            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_MESSAGE, false, false);\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_SERVER, false, false);\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_SERVICE, false, false);\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_DATA, false, true);\n             BundleAssertions.assertHasInt(bundle, BUNDLE_EXTRA_INT_VERSION_CODE);\n-            BundleAssertions.assertKeyCount(bundle, 2);\n+\n+            int bundleVer = bundle.getInt(BUNDLE_EXTRA_INT_VERSION_CODE), expectedCount = 4;\n+\n+            if (bundleVer >= 3) {\n+                BundleAssertions.assertHasInt(bundle, Constants.BUNDLE_EXTRA_BUNDLE_TYPE,\n+                        Constants.BUNDLE_CALL_SERVICE, Constants.BUNDLE_CALL_SERVICE);\n+                expectedCount++;\n+            }\n+\n+            // Bundle may now have replacement vars key:\n+            if (bundleVer >= 5 && TaskerPlugin.Setting.hasVariableReplaceKeys(bundle))\n+                expectedCount++;\n+\n+            BundleAssertions.assertKeyCount(bundle, expectedCount);\n+\n         } catch (final AssertionError e) {\n             Lumberjack.e(\"Bundle failed verification%s\", e); //$NON-NLS-1$\n             return false;\n@@ -87,18 +128,27 @@ public static boolean isBundleValid(@Nullable final Bundle bundle) {\n \n     /**\n      * @param context Application context.\n-     * @param message The toast message to be displayed by the plug-in.\n+     * @param server The server UUID.\n+     * @param service The domain/service to call.\n+     * @param data The service data to send.\n      * @return A plug-in bundle.\n      */\n     @NonNull\n     public static Bundle generateBundle(@NonNull final Context context,\n-            @NonNull final String message) {\n+                                        @NonNull final UUID server,\n+                                        @NonNull final String service,\n+                                        @NonNull final String data) {\n         assertNotNull(context, \"context\"); //$NON-NLS-1$\n-        assertNotEmpty(message, \"message\"); //$NON-NLS-1$\n+        assertNotNull(server, \"server\"); //$NON-NLS-1$\n+        assertNotEmpty(service, \"service\"); //$NON-NLS-1$\n \n         final Bundle result = new Bundle();\n         result.putInt(BUNDLE_EXTRA_INT_VERSION_CODE, AppBuildInfo.getVersionCode(context));\n-        result.putString(BUNDLE_EXTRA_STRING_MESSAGE, message);\n+        result.putInt(Constants.BUNDLE_EXTRA_BUNDLE_TYPE, Constants.BUNDLE_CALL_SERVICE);\n+        result.putString(BUNDLE_EXTRA_STRING_SERVER, server.toString());\n+        result.putString(BUNDLE_EXTRA_STRING_SERVICE, service);\n+        result.putString(BUNDLE_EXTRA_STRING_DATA, data);\n+        TaskerPlugin.Setting.setVariableReplaceKeys(result, new String[] {BUNDLE_EXTRA_STRING_SERVICE, BUNDLE_EXTRA_STRING_DATA});\n \n         return result;\n     }\n@@ -108,8 +158,18 @@ public static Bundle generateBundle(@NonNull final Context context,\n      * @return The message inside the plug-in bundle.\n      */\n     @NonNull\n-    public static String getMessage(@NonNull final Bundle bundle) {\n-        return bundle.getString(BUNDLE_EXTRA_STRING_MESSAGE);\n+    public static UUID getServer(@NonNull final Bundle bundle) {\n+        return UUID.fromString(bundle.getString(BUNDLE_EXTRA_STRING_SERVER));\n+    }\n+\n+    @NonNull\n+    public static String getService(@NonNull final Bundle bundle) {\n+        return bundle.getString(BUNDLE_EXTRA_STRING_SERVICE);\n+    }\n+\n+    @NonNull\n+    public static String getData(@NonNull final Bundle bundle) {\n+        return bundle.getString(BUNDLE_EXTRA_STRING_DATA);\n     }\n \n     /**",
    "previous_filename": "toastPluginSettingApp/src/main/java/com/twofortyfouram/locale/example/setting/toast/bundle/PluginBundleValues.java"
  },
  {
    "sha": "1bb4e9d290adc2fedcc7772c0bab72f82f84c00d",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/RenderTemplatePluginBundleValues.java",
    "status": "added",
    "additions": 177,
    "deletions": 0,
    "changes": 177,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/RenderTemplatePluginBundleValues.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/RenderTemplatePluginBundleValues.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/bundle/RenderTemplatePluginBundleValues.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,177 @@\n+/*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the\n+ * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.markadamson.taskerplugin.homeassistant.bundle;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n+\n+import com.markadamson.taskerplugin.homeassistant.Constants;\n+import com.markadamson.taskerplugin.homeassistant.TaskerPlugin;\n+import com.twofortyfouram.assertion.BundleAssertions;\n+import com.twofortyfouram.log.Lumberjack;\n+import com.twofortyfouram.spackle.AppBuildInfo;\n+\n+import net.jcip.annotations.ThreadSafe;\n+\n+import java.util.UUID;\n+\n+import static com.twofortyfouram.assertion.Assertions.assertNotEmpty;\n+import static com.twofortyfouram.assertion.Assertions.assertNotNull;\n+\n+/**\n+ * Manages the {@link com.twofortyfouram.locale.api.Intent#EXTRA_BUNDLE EXTRA_BUNDLE} for this\n+ * plug-in.\n+ */\n+@ThreadSafe\n+public final class RenderTemplatePluginBundleValues {\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * Server UUID as string.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_SERVER\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_SERVER\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * Template to render.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_TEMPLATE\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_TEMPLATE\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code String}.\n+     * <p>\n+     * Variable to store result in.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_STRING_VARIABLE\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.STRING_VARIABLE\"; //$NON-NLS-1$\n+\n+    /**\n+     * Type: {@code int}.\n+     * <p>\n+     * versionCode of the plug-in that saved the Bundle.\n+     */\n+    /*\n+     * This extra is not strictly required, however it makes backward and forward compatibility\n+     * significantly easier. For example, suppose a bug is found in how some version of the plug-in\n+     * stored its Bundle. By having the version, the plug-in can better detect when such bugs occur.\n+     */\n+    @NonNull\n+    public static final String BUNDLE_EXTRA_INT_VERSION_CODE\n+            = \"com.markadamson.taskerplugin.homeassistant.extra.INT_VERSION_CODE\"; //$NON-NLS-1$\n+\n+    /**\n+     * Method to verify the content of the bundle are correct.\n+     * <p>\n+     * This method will not mutate {@code bundle}.\n+     *\n+     * @param bundle bundle to verify. May be null, which will always return false.\n+     * @return true if the Bundle is valid, false if the bundle is invalid.\n+     */\n+    public static boolean isBundleValid(@Nullable final Bundle bundle) {\n+        if (null == bundle) {\n+            return false;\n+        }\n+\n+        try {\n+            BundleAssertions.assertHasInt(bundle, Constants.BUNDLE_EXTRA_BUNDLE_TYPE,\n+                    Constants.BUNDLE_RENDER_TEMPLATE, Constants.BUNDLE_RENDER_TEMPLATE);\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_SERVER, false, false);\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_TEMPLATE, false, true);\n+            BundleAssertions.assertHasString(bundle, BUNDLE_EXTRA_STRING_VARIABLE, false, false);\n+            BundleAssertions.assertHasInt(bundle, BUNDLE_EXTRA_INT_VERSION_CODE);\n+\n+            int bundleVer = bundle.getInt(BUNDLE_EXTRA_INT_VERSION_CODE), expectedCount = 5;\n+\n+            // Bundle may now have replacement vars key:\n+            if (TaskerPlugin.Setting.hasVariableReplaceKeys(bundle))\n+                expectedCount++;\n+\n+            BundleAssertions.assertKeyCount(bundle, expectedCount);\n+\n+        } catch (final AssertionError e) {\n+            Lumberjack.e(\"Bundle failed verification%s\", e); //$NON-NLS-1$\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * @param context Application context.\n+     * @param server The server UUID.\n+     * @param template The domain/template to call.\n+     * @param variable The template variable to send.\n+     * @return A plug-in bundle.\n+     */\n+    @NonNull\n+    public static Bundle generateBundle(@NonNull final Context context,\n+                                        @NonNull final UUID server,\n+                                        @NonNull final String template,\n+                                        @NonNull final String variable) {\n+        assertNotNull(context, \"context\"); //$NON-NLS-1$\n+        assertNotNull(server, \"server\"); //$NON-NLS-1$\n+        assertNotNull(template, \"template\"); //$NON-NLS-1$\n+        assertNotNull(variable, \"variable\"); //$NON-NLS-1$\n+        assertNotEmpty(variable, \"variable\"); //$NON-NLS-1$\n+\n+        final Bundle result = new Bundle();\n+        result.putInt(BUNDLE_EXTRA_INT_VERSION_CODE, AppBuildInfo.getVersionCode(context));\n+        result.putInt(Constants.BUNDLE_EXTRA_BUNDLE_TYPE, Constants.BUNDLE_RENDER_TEMPLATE);\n+        result.putString(BUNDLE_EXTRA_STRING_SERVER, server.toString());\n+        result.putString(BUNDLE_EXTRA_STRING_TEMPLATE, template);\n+        result.putString(BUNDLE_EXTRA_STRING_VARIABLE, variable);\n+        TaskerPlugin.Setting.setVariableReplaceKeys(result, new String[] {BUNDLE_EXTRA_STRING_TEMPLATE});\n+\n+        return result;\n+    }\n+\n+    /**\n+     * @param bundle A valid plug-in bundle.\n+     * @return The message inside the plug-in bundle.\n+     */\n+    @NonNull\n+    public static UUID getServer(@NonNull final Bundle bundle) {\n+        return UUID.fromString(bundle.getString(BUNDLE_EXTRA_STRING_SERVER));\n+    }\n+\n+    @NonNull\n+    public static String getTemplate(@NonNull final Bundle bundle) {\n+        return bundle.getString(BUNDLE_EXTRA_STRING_TEMPLATE);\n+    }\n+\n+    @NonNull\n+    public static String getVariable(@NonNull final Bundle bundle) {\n+        return bundle.getString(BUNDLE_EXTRA_STRING_VARIABLE);\n+    }\n+\n+    /**\n+     * Private constructor prevents instantiation\n+     *\n+     * @throws UnsupportedOperationException because this class cannot be instantiated.\n+     */\n+    private RenderTemplatePluginBundleValues() {\n+        throw new UnsupportedOperationException(\"This class is non-instantiable\"); //$NON-NLS-1$\n+    }\n+}"
  },
  {
    "sha": "e9351da5f6fc3f301972240dfbe94cecbe6ba615",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPI.java",
    "status": "added",
    "additions": 236,
    "deletions": 0,
    "changes": 236,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPI.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPI.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPI.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,236 @@\n+package com.markadamson.taskerplugin.homeassistant.model;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class HAAPI {\n+    private final HAServer mServer;\n+\n+    public HAAPI(HAServer mServer) {\n+        this.mServer = mServer;\n+    }\n+\n+    public boolean testServer() throws HAAPIException {\n+        HttpURLConnection httpConn = null;\n+        try {\n+            URL url = new URL(mServer.getBaseURL() + \"/api/\");\n+            httpConn = (HttpURLConnection) url.openConnection();\n+            httpConn.setRequestMethod(\"GET\");\n+            httpConn.setRequestProperty(\"Authorization\", \"Bearer \" + mServer.getAccessToken());\n+\n+            InputStream inputStream = httpConn.getInputStream();\n+            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n+            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+            String line = bufferedReader.readLine();\n+\n+            JSONObject apiResult = new JSONObject(line);\n+            return apiResult.has(\"message\") && \"API running.\".equals(apiResult.getString(\"message\"));\n+        } catch (IOException e) {\n+            if (httpConn != null)\n+                try {\n+                    throw new HAAPIException(\"Network Error: \".concat(httpConn.getResponseMessage()), e);\n+                } catch (IOException e1) {\n+                    throw new HAAPIException(\"Network Error\", e);\n+                }\n+            else\n+                throw new HAAPIException(\"IO Error\", e);\n+        } catch (JSONException e) {\n+            throw new HAAPIException(\"JSON Error\", e);\n+        }\n+    }\n+\n+    public List<String> getServices() throws HAAPIException {\n+        HttpURLConnection httpConn = null;\n+        try {\n+            URL url = new URL(mServer.getBaseURL() + \"/api/services\");\n+            httpConn = (HttpURLConnection) url.openConnection();\n+            httpConn.setRequestMethod(\"GET\");\n+            httpConn.setRequestProperty(\"Authorization\", \"Bearer \" + mServer.getAccessToken());\n+\n+            InputStream inputStream = httpConn.getInputStream();\n+            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n+            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+            String line = bufferedReader.readLine();\n+\n+            List<String> result = new ArrayList<>();\n+            JSONArray apiResults = new JSONArray(line);\n+            for (int d = 0; d < apiResults.length(); d++) {\n+                JSONObject jsonDomain = apiResults.getJSONObject(d);\n+                String strDomain = jsonDomain.getString(\"domain\");\n+\n+                JSONObject jsonServices = jsonDomain.getJSONObject(\"services\");\n+                Iterator<String> keys = jsonServices.keys();\n+                while (keys.hasNext())\n+                    result.add(strDomain + \".\" + keys.next());\n+            }\n+\n+            Collections.sort(result);\n+            return result;\n+        } catch (IOException e) {\n+            if (httpConn != null)\n+                try {\n+                    throw new HAAPIException(\"Network Error: \".concat(httpConn.getResponseMessage()), e);\n+                } catch (IOException e1) {\n+                    throw new HAAPIException(\"Network Error\", e);\n+                }\n+            else\n+                throw new HAAPIException(\"IO Error\", e);\n+        } catch (JSONException e) {\n+            throw new HAAPIException(\"JSON Error\", e);\n+        }\n+    }\n+\n+    public void callService(String domain, String service, String data) throws HAAPIException {\n+        HttpURLConnection httpConn = null;\n+        try {\n+            URL url = new URL(mServer.getBaseURL() + \"/api/services/\" + domain + \"/\" + service);\n+            httpConn = (HttpURLConnection)url.openConnection();\n+            httpConn.setRequestMethod(\"POST\");\n+            httpConn.setRequestProperty(\"Authorization\", \"Bearer \" + mServer.getAccessToken());\n+            httpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n+            httpConn.setDoOutput(true);\n+\n+            if (data != null &! data.isEmpty()) {\n+                OutputStream os = httpConn.getOutputStream();\n+                os.write(data.getBytes(\"UTF-8\"));\n+                os.close();\n+            }\n+\n+            if (httpConn.getResponseCode() != 200) {\n+                InputStream errorStream = httpConn.getErrorStream();\n+                InputStreamReader errorStreamReader = new InputStreamReader(errorStream);\n+                BufferedReader bufferedReader = new BufferedReader(errorStreamReader);\n+                JSONObject jsonResult = new JSONObject(bufferedReader.readLine());\n+                throw new HAAPIException(jsonResult.getString(\"message\"));\n+            }\n+\n+        } catch (IOException e) {\n+            if (httpConn != null)\n+                try {\n+                    throw new HAAPIException(\"Network Error: \".concat(httpConn.getResponseMessage()), e);\n+                } catch (IOException e1) {\n+                    throw new HAAPIException(\"Network Error\", e);\n+                }\n+            else\n+                throw new HAAPIException(\"IO Error\", e);\n+        } catch (JSONException e) {\n+            throw new HAAPIException(\"JSON Error\", e);\n+        }\n+    }\n+\n+    public List<String> getEntities() throws HAAPIException {\n+        HttpURLConnection httpConn = null;\n+        try {\n+            URL url = new URL(mServer.getBaseURL() + \"/api/states\");\n+            httpConn = (HttpURLConnection)url.openConnection();\n+            httpConn.setRequestMethod(\"GET\");\n+            httpConn.setRequestProperty(\"Authorization\", \"Bearer \" + mServer.getAccessToken());\n+\n+            InputStream inputStream = httpConn.getInputStream();\n+            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n+            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+            String line = bufferedReader.readLine();\n+\n+            List<String> result = new ArrayList<>();\n+            JSONArray apiResults = new JSONArray(line);\n+            for (int e = 0; e < apiResults.length(); e++)\n+                result.add(apiResults.getJSONObject(e).getString(\"entity_id\"));\n+\n+            Collections.sort(result);\n+            return result;\n+        } catch (IOException e) {\n+            if (httpConn != null)\n+                try {\n+                    throw new HAAPIException(\"Network Error: \".concat(httpConn.getResponseMessage()), e);\n+                } catch (IOException e1) {\n+                    throw new HAAPIException(\"Network Error\", e);\n+                }\n+            else\n+                throw new HAAPIException(\"IO Error\", e);\n+        } catch (JSONException e) {\n+            throw new HAAPIException(\"JSON Error\", e);\n+        }\n+    }\n+\n+    public HAEntity getEntity(String entityId) throws HAAPIException {\n+        HttpURLConnection httpConn = null;\n+        try {\n+            URL url = new URL(mServer.getBaseURL() + \"/api/states/\" + entityId);\n+            httpConn = (HttpURLConnection)url.openConnection();\n+            httpConn.setRequestMethod(\"GET\");\n+            httpConn.setRequestProperty(\"Authorization\", \"Bearer \" + mServer.getAccessToken());\n+\n+            InputStream inputStream = httpConn.getInputStream();\n+            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n+            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+            String line = bufferedReader.readLine();\n+\n+            JSONObject json = new JSONObject(line);\n+\n+            return new HAEntity(\n+                    json.getString(\"state\"),\n+                    json.getString(\"attributes\"));\n+        } catch (IOException e) {\n+            if (httpConn != null)\n+                try {\n+                    throw new HAAPIException(\"Network Error: \".concat(httpConn.getResponseMessage()), e);\n+                } catch (IOException e1) {\n+                    throw new HAAPIException(\"Network Error\", e);\n+                }\n+            else\n+                throw new HAAPIException(\"IO Error\", e);\n+        } catch (JSONException e) {\n+            throw new HAAPIException(\"JSON Error\", e);\n+        }\n+    }\n+\n+    public String renderTemplate(String template) throws HAAPIException {\n+        HttpURLConnection httpConn = null;\n+        try {\n+            URL url = new URL(mServer.getBaseURL() + \"/api/template\");\n+            httpConn = (HttpURLConnection)url.openConnection();\n+            httpConn.setRequestMethod(\"POST\");\n+            httpConn.setRequestProperty(\"Authorization\", \"Bearer \" + mServer.getAccessToken());\n+            httpConn.setRequestProperty(\"Content-Type\", \"application/json\");\n+            httpConn.setDoOutput(true);\n+\n+            JSONObject jsonBody = new JSONObject();\n+            jsonBody.put(\"template\", template);\n+            byte[] outputBytes = jsonBody.toString().getBytes(\"UTF-8\");\n+            OutputStream os = httpConn.getOutputStream();\n+            os.write(outputBytes);\n+            os.close();\n+\n+            StringBuilder sb = new StringBuilder();\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(httpConn.getInputStream()));\n+            int c;\n+            while ((c = reader.read()) != -1)\n+                sb.append((char) c);\n+            return sb.toString();\n+        } catch (IOException e) {\n+            if (httpConn != null)\n+                try {\n+                    throw new HAAPIException(\"Network Error: \".concat(httpConn.getResponseMessage()), e);\n+                } catch (IOException e1) {\n+                    throw new HAAPIException(\"Network Error\", e);\n+                }\n+            else\n+                throw new HAAPIException(\"IO Error\", e);\n+        } catch (JSONException e) {\n+            throw new HAAPIException(\"JSON Error\", e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "7987c6dd361727e82f6e3d3801377e6d7e41f755",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPIException.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPIException.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPIException.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPIException.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,12 @@\n+package com.markadamson.taskerplugin.homeassistant.model;\n+\n+import java.lang.Exception;\n+\n+public class HAAPIException extends Exception {\n+    private static final long serialVersionUID = 7395216398898021862L;\n+\n+    public HAAPIException() { super(); }\n+    public HAAPIException(String message) { super(message); }\n+    public HAAPIException(String message, Throwable cause) { super(message, cause); }\n+    public HAAPIException(Throwable cause) { super(cause); }\n+}"
  },
  {
    "sha": "0ab9d92a37c53f8391d1832c0c26f2f1221ba89b",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPIResult.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPIResult.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPIResult.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPIResult.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,24 @@\n+package com.markadamson.taskerplugin.homeassistant.model;\n+\n+public class HAAPIResult<T> {\n+    private final HAAPIException mException ;\n+    private final T mResult;\n+\n+    public HAAPIResult(T result) {\n+        mResult = result;\n+        mException = null;\n+    }\n+\n+    public HAAPIResult(HAAPIException exception) {\n+        mException = exception;\n+        mResult = null;\n+    }\n+\n+    public HAAPIException getException() {\n+        return mException;\n+    }\n+\n+    public T getResult() {\n+        return mResult;\n+    }\n+}"
  },
  {
    "sha": "d35bd8dbcb31892d11d9056e2a8402febff8aef0",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPITask.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPITask.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPITask.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAAPITask.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,22 @@\n+package com.markadamson.taskerplugin.homeassistant.model;\n+\n+import android.os.AsyncTask;\n+\n+public abstract class HAAPITask<Params,Progress,Result> extends AsyncTask<Params,Progress,HAAPIResult<Result>> {\n+    private final HAAPI mAPI;\n+\n+    protected HAAPITask(HAServer server) {\n+        this.mAPI = new HAAPI(server);\n+    }\n+\n+    @Override @SafeVarargs\n+    protected final HAAPIResult<Result> doInBackground(Params... params) {\n+        try {\n+            return new HAAPIResult<>(doAPIInBackground(mAPI, params));\n+        } catch (HAAPIException e) {\n+            return new HAAPIResult<>(e);\n+        }\n+    }\n+\n+    protected abstract Result doAPIInBackground(HAAPI api, Params... params) throws HAAPIException;\n+}"
  },
  {
    "sha": "22f3aebe3454f1206b746cafd2792ec58b8a4c62",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAEntity.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAEntity.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAEntity.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAEntity.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,18 @@\n+package com.markadamson.taskerplugin.homeassistant.model;\n+\n+public class HAEntity {\n+    private String mState, mAttributes;\n+\n+    public HAEntity(String mState, String mAttributes) {\n+        this.mState = mState;\n+        this.mAttributes = mAttributes;\n+    }\n+\n+    public String getState() {\n+        return mState;\n+    }\n+\n+    public String getAttributes() {\n+        return mAttributes;\n+    }\n+}"
  },
  {
    "sha": "ab10de7f5569542ca0aa98049e71069866dc0e2c",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAServer.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAServer.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAServer.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAServer.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,65 @@\n+package com.markadamson.taskerplugin.homeassistant.model;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class HAServer {\n+    private String name, baseURL, accessToken;\n+\n+    public HAServer(String name, String baseURL, String accessToken) {\n+        this.name = name;\n+        this.baseURL = baseURL;\n+        this.accessToken = accessToken;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getBaseURL() {\n+        return baseURL;\n+    }\n+\n+    public void setBaseURL(String baseURL) {\n+        this.baseURL = baseURL;\n+    }\n+\n+    public String getAccessToken() {\n+        return accessToken;\n+    }\n+\n+    public void setAccessToken(String accessToken) {\n+        this.accessToken = accessToken;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return getName();\n+    }\n+\n+    private static String NAME = \"Name\";\n+    private static String BASE_URL = \"BaseURL\";\n+    private static String ACCESS_TOKEN = \"AccessToken\";\n+\n+    public static HAServer fromJSON(JSONObject json) throws JSONException {\n+        return new HAServer(\n+                json.getString(NAME), json.getString(BASE_URL), json.getString(ACCESS_TOKEN)\n+        );\n+    }\n+\n+    public JSONObject toJSON() {\n+        JSONObject result = new JSONObject();\n+        try {\n+            result.put(NAME, name);\n+            result.put(BASE_URL, baseURL);\n+            result.put(ACCESS_TOKEN, accessToken);\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+        }\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "96095b7a601d3ff44a060332543b064724b6cec4",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAServerStore.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAServerStore.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAServerStore.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/model/HAServerStore.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,119 @@\n+package com.markadamson.taskerplugin.homeassistant.model;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.preference.PreferenceManager;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class HAServerStore {\n+    private final Context mContext;\n+\n+    public HAServerStore(final Context context) {\n+        mContext = context;\n+    }\n+\n+    private static String PREFS_KEY = \"com.markadamson.taskerplugin.homeassistant.model.HAServerStore.PREFS_KEY\";\n+\n+    public Map<UUID, HAServer> getServers() {\n+        Map<UUID,HAServer> result = new HashMap<>();\n+\n+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);\n+        if (prefs.contains(PREFS_KEY)) {\n+            try {\n+                JSONObject jsonServers = new JSONObject(prefs.getString(PREFS_KEY, \"\"));\n+                Iterator<String> keys = jsonServers.keys();\n+\n+                while (keys.hasNext()) {\n+                    String uuid = keys.next();\n+                    result.put(UUID.fromString(uuid), HAServer.fromJSON((JSONObject) jsonServers.get(uuid)));\n+                }\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                prefs.edit().remove(PREFS_KEY).apply();\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public UUID addServer(HAServer server) {\n+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);\n+\n+        JSONObject jsonServers;\n+        if (prefs.contains(PREFS_KEY)) {\n+            try {\n+                jsonServers = new JSONObject(prefs.getString(PREFS_KEY, \"\"));\n+            } catch (JSONException e) {\n+                jsonServers = new JSONObject();\n+            }\n+        } else\n+            jsonServers = new JSONObject();\n+\n+        UUID result = UUID.randomUUID();\n+\n+        try {\n+            jsonServers.put(result.toString(), server.toJSON());\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+        }\n+\n+        prefs.edit().putString(PREFS_KEY, jsonServers.toString()).apply();\n+\n+        return result;\n+    }\n+\n+    public void deleteServer(UUID serverID) {\n+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);\n+\n+        if (prefs.contains(PREFS_KEY)) {\n+            JSONObject jsonServers;\n+            try {\n+                jsonServers = new JSONObject(prefs.getString(PREFS_KEY, \"\"));\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                prefs.edit().remove(PREFS_KEY).apply();\n+                return;\n+            }\n+\n+            if (jsonServers.has(serverID.toString())) {\n+                jsonServers.remove(serverID.toString());\n+                prefs.edit().putString(PREFS_KEY, jsonServers.toString()).apply();\n+            }\n+        }\n+    }\n+\n+    public void updateServer(UUID serverID, HAServer server) {\n+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);\n+\n+        if (!prefs.contains(PREFS_KEY))\n+            throw new RuntimeException(\"No such server in storage!\");\n+\n+        JSONObject jsonServers;\n+\n+        try {\n+            jsonServers = new JSONObject(prefs.getString(PREFS_KEY, \"\"));\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+            prefs.edit().remove(PREFS_KEY).apply();\n+            throw new RuntimeException(\"No such server in storage!\", e);\n+        }\n+\n+        if (!jsonServers.has(serverID.toString()))\n+            throw new RuntimeException(\"No such server in storage!\");\n+\n+        jsonServers.remove(serverID.toString());\n+        try {\n+            jsonServers.put(serverID.toString(), server.toJSON());\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+        }\n+        prefs.edit().putString(PREFS_KEY, jsonServers.toString()).apply();\n+    }\n+}"
  },
  {
    "sha": "0cda563cc64714eca250a7b894664978bd6f55b3",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/receiver/AbstractAsyncReceiver.java",
    "status": "added",
    "additions": 152,
    "deletions": 0,
    "changes": 152,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/receiver/AbstractAsyncReceiver.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/receiver/AbstractAsyncReceiver.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/receiver/AbstractAsyncReceiver.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,152 @@\n+/*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n+ * android-plugin-client-sdk-for-locale https://github.com/twofortyfouram/android-plugin-client-sdk-for-locale\n+ * Copyright 2014 two forty four a.m. LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the\n+ * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.markadamson.taskerplugin.homeassistant.receiver;\n+\n+import android.annotation.TargetApi;\n+import android.content.BroadcastReceiver;\n+import android.os.Build.VERSION_CODES;\n+import android.os.Handler;\n+import android.os.HandlerThread;\n+import android.os.Looper;\n+import android.os.Message;\n+import android.support.annotation.NonNull;\n+import android.util.Pair;\n+\n+import com.twofortyfouram.spackle.AndroidSdkVersion;\n+import com.twofortyfouram.spackle.ThreadUtil;\n+import com.twofortyfouram.spackle.ThreadUtil.ThreadPriority;\n+\n+import net.jcip.annotations.ThreadSafe;\n+\n+import static com.twofortyfouram.assertion.Assertions.assertInRangeInclusive;\n+import static com.twofortyfouram.assertion.Assertions.assertNotNull;\n+\n+/**\n+ * Simplifies asynchronous broadcast handling. Subclasses call\n+ * {@link #goAsyncWithCallback(AsyncCallback, boolean)}, and the abstract class takes\n+ * care of executing the callback on a background thread.\n+ */\n+@ThreadSafe\n+/* package */ abstract class AbstractAsyncReceiver extends BroadcastReceiver {\n+\n+    /*\n+     * This method is package visible rather than protected so that it will be\n+     * obfuscated by ProGuard.\n+     *\n+     * @param callback Callback to execute on a background thread.\n+     * @param isOrdered Indicates whether an ordered broadcast is being processed.\n+     */\n+    @TargetApi(VERSION_CODES.HONEYCOMB)\n+    /* package */ final void goAsyncWithCallback(@NonNull final AsyncCallback callback,\n+                                                 final boolean isOrdered) {\n+        assertNotNull(callback, \"callback\"); //$NON-NLS-1$\n+\n+        final PendingResult pendingResult = goAsync();\n+        if (null == pendingResult) {\n+            throw new AssertionError(\n+                    \"PendingResult was null.  Was goAsync() called previously?\"); //$NON-NLS-1$\n+        }\n+\n+        final Handler.Callback handlerCallback = new AsyncHandlerCallback();\n+        final HandlerThread thread = ThreadUtil.newHandlerThread(getClass().getName(),\n+                ThreadPriority.BACKGROUND);\n+        final Handler handler = new Handler(thread.getLooper(), handlerCallback);\n+\n+        final Object obj = new Pair<PendingResult, AsyncCallback>(pendingResult, callback);\n+        final int isOrderedInt = isOrdered ? 1 : 0;\n+        final Message msg = handler\n+                .obtainMessage(AsyncHandlerCallback.MESSAGE_HANDLE_CALLBACK, isOrderedInt, 0, obj);\n+\n+        final boolean isMessageSent = handler.sendMessage(msg);\n+        if (!isMessageSent) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    @TargetApi(VERSION_CODES.HONEYCOMB)\n+    private static final class AsyncHandlerCallback implements Handler.Callback {\n+\n+        /**\n+         * Message MUST contain a {@code Pair<PendingResult, AsyncCallback>} as the {@code msg.obj}\n+         * and a boolean encoded in the {@code msg.arg1} to indicate whether the broadcast was\n+         * ordered.\n+         */\n+        public static final int MESSAGE_HANDLE_CALLBACK = 0;\n+\n+        @Override\n+        public boolean handleMessage(final Message msg) {\n+            assertNotNull(msg, \"msg\"); //$NON-NLS-1$\n+            switch (msg.what) {\n+                case MESSAGE_HANDLE_CALLBACK: {\n+                    assertNotNull(msg.obj, \"msg.obj\"); //$NON-NLS-1$\n+                    assertInRangeInclusive(msg.arg1, 0, 1, \"msg.arg1\");  //$NON-NLS-1$\n+\n+                    final Pair<PendingResult, AsyncCallback> pair = castObj(msg.obj);\n+                    final boolean isOrdered = 0 != msg.arg1;\n+\n+                    final PendingResult pendingResult = pair.first;\n+                    final AsyncCallback asyncCallback = pair.second;\n+\n+                    try {\n+                        final int resultCode = asyncCallback.runAsync();\n+\n+                        if (isOrdered) {\n+                            pendingResult.setResultCode(resultCode);\n+                        }\n+                    } finally {\n+                        pendingResult.finish();\n+                    }\n+\n+                    quit();\n+\n+                    break;\n+                }\n+            }\n+            return true;\n+        }\n+\n+        @NonNull\n+        @SuppressWarnings(\"unchecked\")\n+        private static Pair<PendingResult, AsyncCallback> castObj(@NonNull final Object o) {\n+            return (Pair<PendingResult, AsyncCallback>) o;\n+        }\n+\n+        private static void quit() {\n+            if (AndroidSdkVersion.isAtLeastSdk(VERSION_CODES.JELLY_BEAN_MR2)) {\n+                quitJellybeanMr2();\n+            } else {\n+                Looper.myLooper().quit();\n+            }\n+        }\n+\n+        @TargetApi(VERSION_CODES.JELLY_BEAN_MR2)\n+        private static void quitJellybeanMr2() {\n+            Looper.myLooper().quitSafely();\n+        }\n+    }\n+\n+    /* package */static interface AsyncCallback {\n+\n+        /**\n+         * @return The result code to be set if this is an ordered broadcast.\n+         */\n+        public int runAsync();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e3348ecd49cb6680ce68370a1360b3ccf3f95d3b",
    "filename": "HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/receiver/AbstractPluginSettingReceiver.java",
    "status": "added",
    "additions": 193,
    "deletions": 0,
    "changes": 193,
    "blob_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/blob/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/receiver/AbstractPluginSettingReceiver.java",
    "raw_url": "https://github.com/twofortyfouram/android-toast-setting-plugin-for-locale/raw/6df3a10d85ec012931e2ca84140ee60de4da7623/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/receiver/AbstractPluginSettingReceiver.java",
    "contents_url": "https://api.github.com/repos/twofortyfouram/android-toast-setting-plugin-for-locale/contents/HomeAssistantTaskerPlugin/src/main/java/com/markadamson/taskerplugin/homeassistant/receiver/AbstractPluginSettingReceiver.java?ref=6df3a10d85ec012931e2ca84140ee60de4da7623",
    "patch": "@@ -0,0 +1,193 @@\n+/*\n+ * home-assistant-plugin-for-tasker <https://github.com/MarkAdamson/home-assistant-plugin-for-tasker>\n+ * Copyright 2019 Mark Adamson\n+ *\n+ * Original author:\n+ * android-plugin-client-sdk-for-locale https://github.com/twofortyfouram/android-plugin-client-sdk-for-locale\n+ * Copyright 2014 two forty four a.m. LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the\n+ * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.markadamson.taskerplugin.homeassistant.receiver;\n+\n+\n+import android.app.Activity;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.support.annotation.NonNull;\n+\n+import com.twofortyfouram.log.Lumberjack;\n+import com.twofortyfouram.spackle.AndroidSdkVersion;\n+import com.twofortyfouram.spackle.bundle.BundleScrubber;\n+\n+/**\n+ * <p>Abstract superclass for a plug-in setting BroadcastReceiver implementation.</p>\n+ * <p>The plug-in receiver lifecycle is as follows:</p>\n+ * <ol>\n+ * <li>{@link #onReceive(android.content.Context, android.content.Intent)} is called by the Android\n+ * frameworks.\n+ * onReceive() will verify that the Intent is valid.  If the Intent is invalid, the receiver\n+ * returns\n+ * immediately.  If the Intent appears to be valid, then the lifecycle continues.</li>\n+ * <li>{@link #isBundleValid(android.os.Bundle)} is called to determine whether {@link\n+ * com.twofortyfouram.locale.api.Intent#EXTRA_BUNDLE EXTRA_BUNDLE} is valid. If the Bundle is\n+ * invalid, then the\n+ * receiver returns immediately.  If the bundle is valid, then the lifecycle continues.</li>\n+ * <li>{@link #isAsync()} is called to determine whether the remaining work should be performed on\n+ * a\n+ * background thread.</li>\n+ * <li>{@link #firePluginSetting(android.content.Context, android.os.Bundle)} is called to trigger\n+ * the plug-in setting's action.</li>\n+ * </ol>\n+ * <p>\n+ * Implementations of this BroadcastReceiver must be registered in the Android\n+ * Manifest with an Intent filter for\n+ * {@link com.twofortyfouram.locale.api.Intent#ACTION_FIRE_SETTING ACTION_FIRE_SETTING}. The\n+ * BroadcastReceiver must be exported, enabled, and cannot have permissions\n+ * enforced on it.\n+ * </p>\n+ */\n+public abstract class AbstractPluginSettingReceiver extends AbstractAsyncReceiver {\n+\n+    /*\n+     * The multiple return statements in this method are a little gross, but the\n+     * alternative of nested if statements is even worse :/\n+     */\n+    @Override\n+    public final void onReceive(final Context context, final Intent intent) {\n+        if (BundleScrubber.scrub(intent)) {\n+            return;\n+        }\n+        Lumberjack.v(\"Received %s\", intent); //$NON-NLS-1$\n+\n+        /*\n+         * Note: It is OK if a host sends an ordered broadcast for plug-in\n+         * settings. Such a behavior would allow the host to optionally block until the\n+         * plug-in setting finishes.\n+         */\n+\n+        if (!com.twofortyfouram.locale.api.Intent.ACTION_FIRE_SETTING.equals(intent.getAction())) {\n+            Lumberjack\n+                    .e(\"Intent action is not %s\",\n+                            com.twofortyfouram.locale.api.Intent.ACTION_FIRE_SETTING); //$NON-NLS-1$\n+            return;\n+        }\n+\n+        /*\n+         * Ignore implicit intents, because they are not valid. It would be\n+         * meaningless if ALL plug-in setting BroadcastReceivers installed were\n+         * asked to handle queries not intended for them. Ideally this\n+         * implementation here would also explicitly assert the class name as\n+         * well, but then the unit tests would have trouble. In the end,\n+         * asserting the package is probably good enough.\n+         */\n+        if (!context.getPackageName().equals(intent.getPackage())\n+                && !new ComponentName(context, this.getClass().getName()).equals(intent\n+                .getComponent())) {\n+            Lumberjack.e(\"Intent is not explicit\"); //$NON-NLS-1$\n+            return;\n+        }\n+\n+        final Bundle bundle = intent\n+                .getBundleExtra(com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE);\n+        if (BundleScrubber.scrub(intent)) {\n+            return;\n+        }\n+\n+        if (null == bundle) {\n+            Lumberjack.e(\"%s is missing\",\n+                    com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE); //$NON-NLS-1$\n+            return;\n+        }\n+\n+        if (!isBundleValid(bundle)) {\n+            Lumberjack.e(\"%s is invalid\",\n+                    com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE); //$NON-NLS-1$\n+            return;\n+        }\n+\n+        if (isAsync() && AndroidSdkVersion.isAtLeastSdk(Build.VERSION_CODES.HONEYCOMB)) {\n+            final AsyncCallback callback = new AsyncCallback() {\n+\n+                @NonNull\n+                private final Context mContext = context;\n+\n+                @NonNull\n+                private final Bundle mBundle = bundle;\n+\n+                @NonNull\n+                private final Intent mIntent = intent;\n+\n+                @Override\n+                public int runAsync() {\n+                    firePluginSetting(mContext, mIntent, mBundle);\n+                    return Activity.RESULT_OK;\n+                }\n+\n+            };\n+\n+            goAsyncWithCallback(callback, isOrderedBroadcast());\n+        } else {\n+            firePluginSetting(context, intent, bundle);\n+        }\n+    }\n+\n+    /**\n+     * <p>Gives the plug-in receiver an opportunity to validate the Bundle, to\n+     * ensure that a malicious application isn't attempting to pass\n+     * an invalid Bundle.</p>\n+     * <p>\n+     * This method will be called on the BroadcastReceiver's Looper (normatively the main thread)\n+     * </p>\n+     *\n+     * @param bundle The plug-in's Bundle previously returned by the edit\n+     *               Activity.  {@code bundle} should not be mutated by this method.\n+     * @return true if {@code bundle} appears to be valid.  false if {@code bundle} appears to be\n+     * invalid.\n+     */\n+    protected abstract boolean isBundleValid(@NonNull final Bundle bundle);\n+\n+    /**\n+     * Configures the receiver whether it should process the Intent in a\n+     * background thread. Plug-ins should return true if their\n+     * {@link #firePluginSetting(android.content.Context, android.os.Bundle)} method performs any\n+     * sort of disk IO (ContentProvider query, reading SharedPreferences, etc.).\n+     * or other work that may be slow.\n+     * <p>\n+     * Asynchronous BroadcastReceivers are not supported prior to Honeycomb, so\n+     * with older platforms broadcasts will always be processed on the BroadcastReceiver's Looper\n+     * (which for Manifest registered receivers will be the main thread).\n+     *\n+     * @return True if the receiver should process the Intent in a background\n+     * thread. False if the plug-in should process the Intent on the\n+     * BroadcastReceiver's Looper (normatively the main thread).\n+     */\n+    protected abstract boolean isAsync();\n+\n+    /**\n+     * If {@link #isAsync()} returns true, this method will be called on a\n+     * background thread. If {@link #isAsync()} returns false, this method will\n+     * be called on the main thread. Regardless of which thread this method is\n+     * called on, this method MUST return within 10 seconds per the requirements\n+     * for BroadcastReceivers.\n+     *\n+     * @param context BroadcastReceiver context.\n+     * @param bundle  The plug-in's Bundle previously returned by the edit\n+     *                Activity.\n+     */\n+    protected abstract void firePluginSetting(@NonNull final Context context,\n+                                              @NonNull final Intent intent,\n+                                              @NonNull final Bundle bundle);\n+}\n\\ No newline at end of file"
  }
]
