[
  {
    "sha": "5e6e85d3d207300a3c85cbc07c33f4213086856a",
    "filename": "docs/project-setup.adoc",
    "status": "modified",
    "additions": 26,
    "deletions": 29,
    "changes": 55,
    "blob_url": "https://github.com/nkvaratskhelia/universe-simulator-back-java-entity-service/blob/6c94d9c6c123b6259579cae12cbb7b30832839fa/docs/project-setup.adoc",
    "raw_url": "https://github.com/nkvaratskhelia/universe-simulator-back-java-entity-service/raw/6c94d9c6c123b6259579cae12cbb7b30832839fa/docs/project-setup.adoc",
    "contents_url": "https://api.github.com/repos/nkvaratskhelia/universe-simulator-back-java-entity-service/contents/docs/project-setup.adoc?ref=6c94d9c6c123b6259579cae12cbb7b30832839fa",
    "patch": "@@ -1,50 +1,49 @@\n = Project setup\n \n == Java\n-`Java 11` is the current version of java for the project.\n+The project is built with `Java 11`.\n \n == Gradle\n-`Gradle Wrapper` is used as a build tool for the project. You don't need to install gradle on your\n-machine, it will be installed automatically by gradle wrapper. Gradle-related properties can be\n-found in the `gradle-wrapper.properties` file in the `gradle/wrapper` directory. You can update the\n-gradle wrapper version with the following command:\n-`./gradlew wrapper --gradle-version=x.x.x --distribution-type=all`.\n+`Gradle Wrapper` is used as a build tool for the project. Gradle-related properties can be found in\n+the `gradle/wrapper/gradle-wrapper.properties` file. You can update gradle wrapper with the\n+following command: `./gradlew wrapper --gradle-version=x.x.x --distribution-type=all`.\n \n == Spring Boot\n-The project is built with the `Spring Boot v 2.4.x` framework.\n+The project uses `Spring Boot v 2.4.x` framework.\n \n === Profiles\n You can have as many spring boot profiles as needed. Profiles usually map to environments (dev,\n staging, prod). If you need to override some properties for an environment, add a new\n-`bootstrap-xxx.properties` or `application-xxx.properties` file where xxx is the name of your\n-profile. Keep in mind that the `test` profile is used for testing purposes. For local development\n-you can use the `local` profile. `bootstrap-local.properties` and `application-local.properties` are\n-excluded from git.\n+`bootstrap-xxx.properties` or `application-xxx.properties` file, where xxx is the name of your\n+profile. Keep in mind that the `test` profile is reserved for testing purposes and the `local`\n+profile for local development. `bootstrap-local.properties` and `application-local.properties` files\n+are excluded from git.\n \n === Running the application\n You can run the application with your IDE or with the following command:\n `./gradlew bootRun --args='--spring.profiles.active=xxx'` where `xxx` is your spring boot profile of\n choice, for example `local`.\n \n == Docker\n-You need to have `docker` and `docker-compose` installed on your machine. All software dependencies\n+You need to have `Docker` and `Docker Compose` installed on your machine. All software dependencies\n for the project can be found in the `docker-compose.yml` file.\n \n == Database\n-`Postgres` is currently used to store the project model entities. To run a database service locally,\n-use the following command: `docker-compose -p universe-simulator up -d entity-service-postgres`.\n-Don't forget to supply env variables to the docker-compose file.\n+`Postgres` is used to store the project model data. To start a postgres instance locally, use the\n+following command: `docker-compose -p universe-simulator up -d entity-service-postgres`. Don't\n+forget to supply the necessary configuration in the docker-compose service.\n \n === Migration\n-`Liquibase` is used to handle database migratons. Liquibase config is described in the\n+`Liquibase` is used to handle database migrations. Liquibase config is described in the\n `db/changelog/db.changelog-master.yaml` file. Add changefiles to the `db/changelog/scripts`\n-directory. Changefile naming scheme is as follows: `xxx-change-description.extension`.\n+directory. Changefile naming scheme is as follows: `xxx-change-description.extension`, where xxx is\n+a growing numeric sequence.\n \n == Vault\n-`Hashicorp Vault` is used to store project secrets and other variable configuration. You can set up\n-vault locally as a docker-compose service by running the following command:\n+`Hashicorp Vault` is used to store project secrets and other variable configuration. To start a\n+vault instance locally, use the following command:\n `docker-compose -p universe-simulator up -d vault`. If you stop or restart your container, vault\n-gets sealed and you'll need to unseal it to be able to use it again.\n+gets sealed, and you'll need to unseal it to be able to use it again.\n \n === Configuration\n When vault is up and running, go to vault ui at `localhost:8200` and follow the setup instructions.\n@@ -53,7 +52,7 @@ to the `spring.cloud.vault.kv.backend` property in `bootstrap.properties`. In th\n a secret with `entity-service` as path. This path maps to the `spring.application.name` property in\n `bootstrap.properties`. Additionally, you can add as many profile-specific paths as needed. These\n paths map to spring boot profiles (e.g. dev, staging, prod). Now you can add secrets and config in\n-vault's `universe-simulator/entity-service/xxx` directory, where xxx maps to spring boot profiles.\n+the `universe-simulator/entity-service/xxx` path, where xxx maps to spring boot profiles.\n \n == CI/CD\n `Github Actions` is used for automating the project workflow. The workflow file can be found in the\n@@ -69,15 +68,14 @@ certificate in the keystore can be either self-signed or provided by a CA.\n \n === Keystore\n You can use java's `keytool` utility for working with keystore. To create a keystore file with a\n-self-signed certificate run the following command: `keytool -genkeypair -alias universe-simulator\n+self-signed certificate, run the following command: `keytool -genkeypair -alias universe-simulator\n -keyalg RSA -validity <validity-in-days> -keystore universe-simulator.p12` and follow the\n instructions. You can verify the contents of the keystore file with the following command:\n `keytool -list -v -keystore universe-simulator.p12`. Keep in mind that TLS is disabled when running\n the application with `test` profile.\n \n == Code Coverage\n-`JaCoCo` plugin is used to analyze code coverage. Find out more about Jacoco plugin here:\n-https://docs.gradle.org/current/userguide/jacoco_plugin.html[Plugin Documentation]\n+`JaCoCo` plugin is used to analyze code coverage.\n \n === Report\n You can generate the test coverage report with the following command: `./gradlew jacocoTestReport`.\n@@ -86,9 +84,9 @@ The report can be viewed by opening the `build/reports/jacoco/test/html/index.ht\n === Exclusions\n Classes which are excluded from jacoco reports are described in the `jacocoExclusions` method in\n `build.gradle`. Additionally, all lombok generated code is also excluded. This is achieved with the\n-`lombok.addLombokGeneratedAnnotation = true` parameter in `lombok.config` file. If this parameter is\n-present, lombok will annotate all generated code with its `@Generated` annotation and jacoco\n-automatically excludes such code from processing.\n+`lombok.addLombokGeneratedAnnotation = true` parameter in the `lombok.config` file. If this\n+parameter is present, lombok will annotate all generated code with its `@Generated` annotation and\n+jacoco automatically excludes such code from processing.\n \n === Rules\n 100% code coverage is enforced by the `jacocoTestCoverageVerification` task. You can run this task\n@@ -97,5 +95,4 @@ with the following command: `./gradlew jacocoTestCoverageVerification`. If the c\n \n == Rest API\n Rest API documentation is generated automatically by `springdoc-openapi`. You can access OpenAPI\n-definition at `/v3/api-docs` and swagger ui at `/swagger-ui.html`. Find out more about springdoc\n-here: https://springdoc.org/[Springdoc Documentation].\n+definition at `/v3/api-docs` and swagger ui at `/swagger-ui.html`."
  }
]
