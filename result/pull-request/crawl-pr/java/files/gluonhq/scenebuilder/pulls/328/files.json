[
  {
    "sha": "ba8d4ed0328ec03dcedcf2a445b9521eb1363b4f",
    "filename": "kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBuffer.java",
    "status": "modified",
    "additions": 42,
    "deletions": 237,
    "changes": 279,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBuffer.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBuffer.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBuffer.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2016, Gluon and/or its affiliates.\n+ * Copyright (c) 2016, 2021, Gluon and/or its affiliates.\n  * Copyright (c) 2012, 2014, Oracle and/or its affiliates.\n  * All rights reserved. Use is subject to license terms.\n  *\n@@ -32,282 +32,87 @@\n  */\n package com.oracle.javafx.scenebuilder.kit.skeleton;\n \n-import com.oracle.javafx.scenebuilder.kit.i18n.I18N;\n-import com.oracle.javafx.scenebuilder.kit.util.eventnames.EventNames;\n-import com.oracle.javafx.scenebuilder.kit.util.eventnames.ImportBuilder;\n-import com.oracle.javafx.scenebuilder.kit.util.eventnames.FindEventNamesUtil;\n import com.oracle.javafx.scenebuilder.kit.fxom.FXOMDocument;\n import com.oracle.javafx.scenebuilder.kit.fxom.FXOMObject;\n import com.oracle.javafx.scenebuilder.kit.fxom.FXOMPropertyT;\n-import javafx.fxml.FXML;\n+import com.oracle.javafx.scenebuilder.kit.i18n.I18N;\n+import com.oracle.javafx.scenebuilder.kit.util.eventnames.FindEventNamesUtil;\n \n-import java.lang.reflect.TypeVariable;\n import java.net.URL;\n-import java.util.*;\n+import java.util.ResourceBundle;\n \n /**\n  *\n  */\n-public class SkeletonBuffer {\n+class SkeletonBuffer {\n \n     private final FXOMDocument document;\n-    private final String INDENT = \"    \"; //NOI18N\n-    private final Set<String> imports = new TreeSet<>();\n-    private final StringBuilder variables = new StringBuilder();\n-    private final StringBuilder asserts = new StringBuilder();\n-    private TEXT_TYPE textType = TEXT_TYPE.WITHOUT_COMMENTS;\n-    private FORMAT_TYPE textFormat = FORMAT_TYPE.COMPACT;\n-    private final StringBuilder packageLine = new StringBuilder();\n-    private final StringBuilder classLine = new StringBuilder();\n-    private final StringBuilder header = new StringBuilder();\n-    private final StringBuilder initialize = new StringBuilder();\n-    private final StringBuilder handlers = new StringBuilder();\n-    private static final String FXML_ANNOTATION = \"@FXML\\n\";\n-\n     private final String documentName;\n \n-    public enum TEXT_TYPE {\n-        WITH_COMMENTS, WITHOUT_COMMENTS\n-    }\n-\n-    public enum FORMAT_TYPE {\n-        COMPACT, FULL\n-    }\n+    private final SkeletonSettings settings = new SkeletonSettings();\n \n-    public SkeletonBuffer(FXOMDocument document, String documentName) {\n+    SkeletonBuffer(FXOMDocument document, String documentName) {\n         assert document != null;\n         this.document = document;\n         this.documentName = documentName;\n     }\n \n-    public void setTextType(TEXT_TYPE type) {\n-        this.textType = type;\n+    void setLanguage(SkeletonSettings.LANGUAGE language) {\n+        settings.setLanguage(language);\n     }\n \n-    public void setFormat(FORMAT_TYPE format) {\n-        this.textFormat = format;\n+    void setTextType(SkeletonSettings.TEXT_TYPE type) {\n+        settings.setTextType(type);\n     }\n \n-    private void constructHeader() {\n-        if (textType == TEXT_TYPE.WITH_COMMENTS) {\n-            final String title = I18N.getString(\"skeleton.window.title\", documentName);\n-            header.append(\"/**\\n\"); //NOI18N\n-            header.append(\" * \"); //NOI18N\n-            header.append(title);\n-            header.append(\"\\n */\\n\\n\"); //NOI18N\n-        }\n+    void setFormat(SkeletonSettings.FORMAT_TYPE format) {\n+        settings.setFormat(format);\n     }\n \n-    private void constructPackageLine() {\n-            String controller = document.getFxomRoot().getFxController();\n-\n-            if (controller != null && !controller.isEmpty()\n-                    && controller.contains(\".\") && !controller.contains(\"$\")) { //NOI18N\n-                packageLine.append(\"package \"); //NOI18N\n-                packageLine.append(controller.substring(0, controller.lastIndexOf('.'))); //NOI18N\n-                packageLine.append(\";\\n\\n\"); //NOI18N\n-            }\n-        }\n-\n-    private void constructClassLine() {\n-            String controller = document.getFxomRoot().getFxController();\n-            classLine.append(\"\\npublic \"); //NOI18N\n-\n-            if (controller != null && controller.contains(\"$\")) { //NOI18N\n-                classLine.append(\"static \"); //NOI18N\n-            }\n-\n-            classLine.append(\"class \"); //NOI18N\n-\n-            if (controller != null && !controller.isEmpty()) {\n-                String simpleName = controller.replace(\"$\", \".\"); //NOI18N\n-                int dot = simpleName.lastIndexOf('.');\n-                if (dot > -1) {\n-                    simpleName = simpleName.substring(dot+1);\n-                }\n-                classLine.append(simpleName);\n-            } else {\n-                classLine.append(\"PleaseProvideControllerClassName\"); //NOI18N\n-            }\n-\n-            classLine.append(\" {\\n\\n\"); //NOI18N\n-        }\n-\n-    private void constructInitialize() {\n-        if (textFormat == FORMAT_TYPE.FULL) {\n-            initialize.append(INDENT);\n-            initialize.append(\"@FXML\"); //NOI18N\n-\n-            if (textType == TEXT_TYPE.WITH_COMMENTS) {\n-                initialize.append(\" // This method is called by the FXMLLoader when initialization is complete\\n\"); //NOI18N\n-            } else {\n-                initialize.append(\"\\n\"); //NOI18N\n-            }\n-\n-            initialize.append(INDENT);\n-            initialize.append(\"void initialize() {\\n\"); //NOI18N\n-            initialize.append(asserts);\n-            initialize.append(\"\\n\"); //NOI18N\n-            initialize.append(INDENT);\n-            initialize.append(\"}\\n\"); //NOI18N\n-        }\n+    private boolean isFull() {\n+        return settings.isFull();\n     }\n \n-    private void construct() {\n-        constructHeader();\n-        constructPackageLine();\n-        constructClassLine();\n-\n-        // All that depends on fx:id\n-        Map<String, FXOMObject> fxids = document.collectFxIds();\n-\n-        for (FXOMObject value : fxids.values()) {\n-            String key = value.getFxId();\n-            final Object obj = value.getSceneGraphObject();\n-            final Class<?> type = obj.getClass();\n-\n-            addImportsFor(FXML.class, type);\n-            variables.append(INDENT).append(\"@FXML\"); //NOI18N\n-\n-            if (textType == TEXT_TYPE.WITH_COMMENTS) {\n-                variables.append(\" // fx:id=\\\"\").append(key).append(\"\\\"\"); //NOI18N\n-            }\n-\n-            variables.append(\"\\n\"); //NOI18N\n-            variables.append(INDENT).append(\"private \").append(type.getSimpleName()); //NOI18N\n-            final TypeVariable<? extends Class<?>>[] parameters = type.getTypeParameters();\n-\n-            if (parameters.length > 0) {\n-                variables.append(\"<\"); //NOI18N\n-                String sep = \"\"; //NOI18N\n-                for (TypeVariable<?> t : parameters) {\n-                    variables.append(sep).append(\"?\"); //NOI18N\n-                    sep = \", \"; //NOI18N\n-                    t.getName(); // silly call to silence FindBugs\n-                }\n-                variables.append(\">\"); //NOI18N\n-            }\n-\n-            if (textType == TEXT_TYPE.WITH_COMMENTS) {\n-                variables.append(\" \").append(key).append(\"; // Value injected by FXMLLoader\\n\\n\"); //NOI18N\n-            } else {\n-                variables.append(\" \").append(key).append(\";\\n\\n\"); //NOI18N\n-            }\n-\n-            asserts.append(INDENT).append(INDENT).append(\"assert \").append(key).append(\" != null : \") //NOI18N\n-                    .append(\"\\\"fx:id=\\\\\\\"\").append(key).append(\"\\\\\\\" was not injected: check your FXML file \") //NOI18N\n-                    .append(\"'\").append(documentName) //NOI18N\n-                    .append(\"'.\\\";\\n\"); //NOI18N\n-        }\n+    @Override\n+    public String toString() {\n+        if (document.getFxomRoot() == null) {\n+            return I18N.getString(\"skeleton.empty\");\n+        } else {\n+            SkeletonContext.Builder builder = SkeletonContext.builder()\n+                .withFxController(document.getFxomRoot().getFxController())\n+                .withDocumentName(documentName)\n+                .withSettings(settings);\n \n-        if (textFormat == FORMAT_TYPE.FULL) {\n-            addImportsFor(URL.class, ResourceBundle.class);\n-        }\n+            construct(builder);\n \n-        // Event handlers\n-        // Map with pairs of methodNames and eventTypeNames\n-        final Map<String, String> methodsAndEvents = new TreeMap<>();\n-        // need to initialize the internal events map\n-        FindEventNamesUtil.initializeEventsMap();\n-        for (FXOMPropertyT handler : document.getFxomRoot().collectEventHandlers()) {\n-            String eventTypeName = handler.getName().getName();\n-            methodsAndEvents.put(handler.getValue(), eventTypeName);\n+            return SkeletonCreator.createFrom(builder.build());\n         }\n-        // for each method name\n-        methodsAndEvents.forEach(this::generateControllerSkeleton);\n-        // This method must be called once asserts has been populated.\n-        constructInitialize();\n     }\n \n-    /**\n-     * Generates the skeleton for the controller event handler methods.\n-     * For every eventTypeName, it searches for the appropriate event name.\n-     *\n-     * @param methodName method name chosen by the user\n-     * @param eventTypeName eventTypeName, e.g. onMouseClicked\n-     */\n-    private void generateControllerSkeleton(String methodName, String eventTypeName) {\n-        handlers.append(INDENT).append(FXML_ANNOTATION).append(INDENT).append(\"void \"); //NOI18N\n-        final String methodNamePured = methodName.replace(\"#\", \"\"); //NOI18N\n-        handlers.append(methodNamePured);\n-        String eventName = FindEventNamesUtil.findEventName(eventTypeName);\n-        handlers.append(\"(\").append(eventName).append(\" event) {\\n\\n\").append(INDENT).append(\"}\\n\\n\"); //NOI18N\n-        if (textFormat == FORMAT_TYPE.FULL) {\n-            addImportsForEvents(eventName);\n-        }\n+    private void construct(SkeletonContext.Builder builder) {\n+        constructFxIds(builder);\n+        constructEventHandlers(builder);\n+        constructAdditionalImports(builder);\n     }\n \n-    /**\n-     * Constructs import statements for event classes.\n-     *\n-     * @param eventName event name, for which a statement should be built.\n-     */\n-    private void addImportsForEvents(String eventName) {\n-        if(EventNames.ACTION_EVENT.equals(eventName)) {\n-            ImportBuilder.add(ImportBuilder.IMPORT_STATEMENT.concat(ImportBuilder.EVENT_PACKAGE), eventName);\n-        }\n-        else {\n-            ImportBuilder.add(ImportBuilder.IMPORT_STATEMENT.concat(ImportBuilder.INPUT_PACKAGE), eventName);\n+    private void constructFxIds(SkeletonContext.Builder builder) {\n+        for (FXOMObject value : document.collectFxIds().values()) {\n+            builder.addFxId(value);\n         }\n-        buildAndCollectImports();\n     }\n \n+    private void constructEventHandlers(SkeletonContext.Builder builder) {\n+        // need to initialize the internal events map\n+        FindEventNamesUtil.initializeEventsMap();\n \n-    /**\n-     * Constructs import statements for other classes (like URL, ResourceBundle).\n-     *\n-     * @param classes other classes the statement should be built.\n-     */\n-    private void addImportsFor(Class<?>... classes) {\n-        for (Class<?> c : classes) {\n-            ImportBuilder.add(ImportBuilder.IMPORT_STATEMENT, c.getName().replace(\"$\", \".\"));\n-            buildAndCollectImports();\n-    }\n-        // need an import statement for @FXML, too\n-        ImportBuilder.add(ImportBuilder.IMPORT_STATEMENT, ImportBuilder.FXML_PACKAGE);\n-        buildAndCollectImports();\n-    }\n-\n-    private void buildAndCollectImports() {\n-        imports.add(ImportBuilder.build());\n-        ImportBuilder.reset();\n+        for (FXOMPropertyT eventHandler : document.getFxomRoot().collectEventHandlers()) {\n+            builder.addEventHandler(eventHandler);\n+        }\n     }\n \n-    @Override\n-    public String toString() {\n-        if (document.getFxomRoot() == null) {\n-            return I18N.getString(\"skeleton.empty\");\n-        } else {\n-            construct();\n-\n-            StringBuilder code = new StringBuilder();\n-            code.append(header);\n-            code.append(packageLine);\n-\n-            for (String importStatement : imports) {\n-                code.append(importStatement);\n-            }\n-\n-            code.append(classLine);\n-\n-            if (textType == TEXT_TYPE.WITH_COMMENTS && textFormat == FORMAT_TYPE.FULL) {\n-                code.append(INDENT).append(\"@FXML // ResourceBundle that was given to the FXMLLoader\\n\") //NOI18N\n-                        .append(INDENT).append(\"private ResourceBundle resources;\\n\\n\") //NOI18N\n-                        .append(INDENT).append(\"@FXML // URL location of the FXML file that was given to the FXMLLoader\\n\") //NOI18N\n-                        .append(INDENT).append(\"private URL location;\\n\\n\"); //NOI18N\n-            } else if (textFormat == FORMAT_TYPE.FULL) {\n-                code.append(INDENT).append(FXML_ANNOTATION) //NOI18N\n-                        .append(INDENT).append(\"private ResourceBundle resources;\\n\\n\") //NOI18N\n-                        .append(INDENT).append(FXML_ANNOTATION) //NOI18N\n-                        .append(INDENT).append(\"private URL location;\\n\\n\"); //NOI18N\n-            }\n-\n-            code.append(variables);\n-            code.append(handlers);\n-            code.append(initialize);\n-            code.append(\"}\\n\"); //NOI18N\n-\n-            return code.toString();\n+    private void constructAdditionalImports(SkeletonContext.Builder builder) {\n+        if (isFull()) {\n+            builder.addImportsFor(URL.class, ResourceBundle.class);\n         }\n     }\n }"
  },
  {
    "sha": "a50620ff03e76958327f5e1a46d6dc02b13a1847",
    "filename": "kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonContext.java",
    "status": "added",
    "additions": 187,
    "deletions": 0,
    "changes": 187,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonContext.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonContext.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonContext.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright (c) 2016, 2021, Gluon and/or its affiliates.\n+ * Copyright (c) 2012, 2014, Oracle and/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+import com.oracle.javafx.scenebuilder.kit.fxom.FXOMObject;\n+import com.oracle.javafx.scenebuilder.kit.fxom.FXOMPropertyT;\n+import com.oracle.javafx.scenebuilder.kit.util.eventnames.EventNames;\n+import com.oracle.javafx.scenebuilder.kit.util.eventnames.FindEventNamesUtil;\n+import com.oracle.javafx.scenebuilder.kit.util.eventnames.ImportBuilder;\n+import javafx.fxml.FXML;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+class SkeletonContext {\n+\n+    private final String fxController;\n+    private final String documentName;\n+    private final SkeletonSettings settings;\n+    private final SortedSet<String> imports;\n+    private final SortedMap<String, Class<?>> variables;\n+    private final SortedMap<String, String> eventHandlers;\n+    private final SortedSet<String> assertions;\n+\n+    private SkeletonContext(\n+        String fxController,\n+        String documentName,\n+        SkeletonSettings settings,\n+        SortedSet<String> imports,\n+        SortedMap<String, Class<?>> variables,\n+        SortedMap<String, String> eventHandlers,\n+        SortedSet<String> assertions\n+    ) {\n+        this.fxController = fxController;\n+        this.documentName = documentName;\n+        this.settings = Objects.requireNonNull(settings);\n+        this.imports = Collections.unmodifiableSortedSet(imports);\n+        this.variables = Collections.unmodifiableSortedMap(variables);\n+        this.eventHandlers = Collections.unmodifiableSortedMap(eventHandlers);\n+        this.assertions = Collections.unmodifiableSortedSet(assertions);\n+    }\n+\n+    static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    String getFxController() {\n+        return fxController;\n+    }\n+\n+    String getDocumentName() {\n+        return documentName;\n+    }\n+\n+    SkeletonSettings getSettings() {\n+        return settings;\n+    }\n+\n+    Set<String> getImports() {\n+        return imports;\n+    }\n+\n+    Map<String, Class<?>> getVariables() {\n+        return variables;\n+    }\n+\n+    Map<String, String> getEventHandlers() {\n+        return eventHandlers;\n+    }\n+\n+    Set<String> getAssertions() {\n+        return assertions;\n+    }\n+\n+    static class Builder {\n+\n+        private String fxController;\n+        private String documentName;\n+        private SkeletonSettings settings;\n+\n+        private final SortedSet<String> imports = new TreeSet<>();\n+        private final SortedMap<String, Class<?>> variables = new TreeMap<>();\n+        private final SortedMap<String, String> eventHandlers = new TreeMap<>();\n+        private final SortedSet<String> assertions = new TreeSet<>();\n+\n+        Builder withFxController(String fxController) {\n+            this.fxController = fxController;\n+            return this;\n+        }\n+\n+        Builder withDocumentName(String documentName) {\n+            this.documentName = documentName;\n+            return this;\n+        }\n+\n+        Builder withSettings(SkeletonSettings settings) {\n+            this.settings = settings;\n+            return this;\n+        }\n+\n+        public void addFxId(FXOMObject value) {\n+            String fxId = value.getFxId();\n+            Class<?> type = value.getSceneGraphObject().getClass();\n+\n+            addImportsFor(FXML.class, type);\n+\n+            variables.put(fxId, type);\n+            assertions.add(fxId);\n+        }\n+\n+        public void addEventHandler(FXOMPropertyT eventHandler) {\n+            String eventName = FindEventNamesUtil.findEventName(eventHandler.getName().getName());\n+\n+            eventHandlers.put(eventHandler.getValue(), eventName);\n+            addImportsForEvents(eventName);\n+        }\n+\n+        private void addImportsForEvents(String eventName) {\n+            if (EventNames.ACTION_EVENT.equals(eventName)) {\n+                ImportBuilder.add(ImportBuilder.IMPORT_STATEMENT.concat(ImportBuilder.EVENT_PACKAGE), eventName);\n+            } else {\n+                ImportBuilder.add(ImportBuilder.IMPORT_STATEMENT.concat(ImportBuilder.INPUT_PACKAGE), eventName);\n+            }\n+            buildAndCollectImports();\n+        }\n+\n+        /**\n+         * Constructs import statements for other classes (like URL, ResourceBundle).\n+         *\n+         * @param classes other classes the statement should be built.\n+         */\n+        void addImportsFor(Class<?>... classes) {\n+            for (Class<?> c : classes) {\n+                ImportBuilder.add(ImportBuilder.IMPORT_STATEMENT, c.getName().replace(\"$\", \".\"));\n+                buildAndCollectImports();\n+            }\n+            // need an import statement for @FXML, too\n+            ImportBuilder.add(ImportBuilder.IMPORT_STATEMENT, ImportBuilder.FXML_PACKAGE);\n+            buildAndCollectImports();\n+        }\n+\n+        private void buildAndCollectImports() {\n+            imports.add(ImportBuilder.build());\n+            ImportBuilder.reset();\n+        }\n+\n+        SkeletonContext build() {\n+            return new SkeletonContext(fxController, documentName, settings, imports, variables, eventHandlers, assertions);\n+        }\n+    }\n+}"
  },
  {
    "sha": "d3c3f505e56848a9bb4d2532d19b8be37c518413",
    "filename": "kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreator.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreator.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreator.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreator.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2021, Gluon and/or its affiliates.\n+ * Copyright (c) 2012, 2014, Oracle and/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+class SkeletonCreator {\n+\n+    /**\n+     * @return a code skeleton for the given context\n+     */\n+    static String createFrom(SkeletonContext context) {\n+        switch (context.getSettings().getLanguage()) {\n+            case JAVA:\n+                return SkeletonCreatorJava.createFrom(context);\n+            case KOTLIN:\n+                return SkeletonCreatorKotlin.createFrom(context);\n+            default:\n+                throw new IllegalArgumentException(\"Language not supported: \" + context.getSettings().getLanguage());\n+        }\n+    }\n+}"
  },
  {
    "sha": "13eeffe47d710b4febb64dd5701eff496a9851a4",
    "filename": "kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreatorJava.java",
    "status": "added",
    "additions": 220,
    "deletions": 0,
    "changes": 220,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreatorJava.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreatorJava.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreatorJava.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright (c) 2016, 2021, Gluon and/or its affiliates.\n+ * Copyright (c) 2012, 2014, Oracle and/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+import com.oracle.javafx.scenebuilder.kit.i18n.I18N;\n+\n+import java.lang.reflect.TypeVariable;\n+import java.util.Map;\n+\n+public class SkeletonCreatorJava {\n+\n+    private static final String NL = System.lineSeparator();\n+    private static final String INDENT = \"    \"; //NOI18N\n+    private static final String FXML_ANNOTATION = \"@FXML\";\n+\n+    static String createFrom(SkeletonContext context) {\n+        final StringBuilder sb = new StringBuilder();\n+\n+        appendHeaderComment(context, sb);\n+        appendPackage(context, sb);\n+        appendImports(context, sb);\n+        appendClass(context, sb);\n+\n+        return sb.toString();\n+    }\n+\n+    private static void appendHeaderComment(SkeletonContext context, StringBuilder sb) {\n+        if (!context.getSettings().isWithComments()) {\n+            return;\n+        }\n+\n+        final String title = I18N.getString(\"skeleton.window.title\", context.getDocumentName());\n+        sb.append(\"/**\").append(NL); //NOI18N\n+        sb.append(\" * \").append(title).append(NL); //NOI18N\n+        sb.append(\" */\").append(NL); //NOI18N\n+        sb.append(NL);\n+    }\n+\n+    private static void appendPackage(SkeletonContext context, StringBuilder sb) {\n+        String controller = context.getFxController();\n+\n+        if (controller != null && controller.contains(\".\") && !controller.contains(\"$\")) { //NOI18N\n+            sb.append(\"package \"); //NOI18N\n+            sb.append(controller, 0, controller.lastIndexOf('.')); //NOI18N\n+            sb.append(\";\").append(NL).append(NL); //NOI18N\n+        }\n+    }\n+\n+    private static void appendImports(SkeletonContext context, StringBuilder sb) {\n+        for (String importStatement : context.getImports()) {\n+            sb.append(importStatement);\n+        }\n+    }\n+\n+    private static void appendClass(SkeletonContext context, StringBuilder sb) {\n+        String controller = context.getFxController();\n+\n+        sb.append(NL).append(\"public \"); //NOI18N\n+        if (controller != null && controller.contains(\"$\")) { //NOI18N\n+            sb.append(\"static \"); //NOI18N\n+        }\n+\n+        sb.append(\"class \"); //NOI18N\n+\n+        if (controller != null && !controller.isEmpty()) {\n+            String simpleName = controller.replace(\"$\", \".\"); //NOI18N\n+            int dot = simpleName.lastIndexOf('.');\n+            if (dot > -1) {\n+                simpleName = simpleName.substring(dot + 1);\n+            }\n+            sb.append(simpleName);\n+        } else {\n+            sb.append(\"PleaseProvideControllerClassName\"); //NOI18N\n+        }\n+\n+        sb.append(\" {\").append(NL).append(NL); //NOI18N\n+\n+        appendFields(context, sb);\n+\n+        appendMethods(context, sb);\n+\n+        sb.append(\"}\").append(NL); //NOI18N\n+    }\n+\n+    private static void appendFields(SkeletonContext context, StringBuilder sb) {\n+        appendFieldsResourcesAndLocation(context, sb);\n+\n+        appendFieldsWithFxId(context, sb);\n+    }\n+\n+    private static void appendFieldsResourcesAndLocation(SkeletonContext context, StringBuilder sb) {\n+        if (!context.getSettings().isFull()) {\n+            return;\n+        }\n+\n+        sb.append(INDENT).append(FXML_ANNOTATION);\n+        if (context.getSettings().isWithComments()) {\n+            sb.append(\" // ResourceBundle that was given to the FXMLLoader\"); //NOI18N\n+        }\n+        sb.append(NL);\n+        sb.append(INDENT).append(\"private ResourceBundle resources;\").append(NL).append(NL); //NOI18N\n+\n+        sb.append(INDENT).append(FXML_ANNOTATION);\n+        if (context.getSettings().isWithComments()) {\n+            sb.append(\" // URL location of the FXML file that was given to the FXMLLoader\"); //NOI18N\n+        }\n+        sb.append(NL);\n+        sb.append(INDENT).append(\"private URL location;\").append(NL).append(NL); //NOI18N\n+    }\n+\n+    private static void appendFieldsWithFxId(SkeletonContext context, StringBuilder sb) {\n+        for (Map.Entry<String, Class<?>> variable : context.getVariables().entrySet()) {\n+            sb.append(INDENT).append(FXML_ANNOTATION);\n+            if (context.getSettings().isWithComments()) {\n+                sb.append(\" // fx:id=\\\"\").append(variable.getKey()).append(\"\\\"\"); //NOI18N\n+            }\n+            sb.append(NL);\n+\n+            sb.append(INDENT).append(\"private \").append(variable.getValue().getSimpleName()); //NOI18N\n+            appendFieldParameters(sb, variable);\n+\n+            sb.append(\" \").append(variable.getKey()).append(\";\");\n+            if (context.getSettings().isWithComments()) {\n+                sb.append(\" // Value injected by FXMLLoader\"); //NOI18N\n+            }\n+            sb.append(NL).append(NL);\n+        }\n+    }\n+\n+    private static void appendFieldParameters(StringBuilder sb, Map.Entry<String, Class<?>> variable) {\n+        final TypeVariable<? extends Class<?>>[] parameters = variable.getValue().getTypeParameters();\n+        if (parameters.length > 0) {\n+            sb.append(\"<\"); //NOI18N\n+            String sep = \"\"; //NOI18N\n+            for (TypeVariable<?> t : parameters) {\n+                sb.append(sep).append(\"?\"); //NOI18N\n+                sep = \", \"; //NOI18N\n+                t.getName(); // silly call to silence FindBugs\n+            }\n+            sb.append(\">\"); //NOI18N\n+        }\n+    }\n+\n+    private static void appendMethods(SkeletonContext context, StringBuilder sb) {\n+        appendEventHandlers(context, sb);\n+\n+        appendInitialize(context, sb);\n+    }\n+\n+    private static void appendEventHandlers(SkeletonContext context, StringBuilder sb) {\n+        for (Map.Entry<String, String> entry : context.getEventHandlers().entrySet()) {\n+            String methodName = entry.getKey();\n+            String eventName = entry.getValue();\n+\n+            final String methodNamePured = methodName.replace(\"#\", \"\"); //NOI18N\n+\n+            sb.append(INDENT).append(FXML_ANNOTATION).append(NL).append(INDENT).append(\"void \"); //NOI18N\n+            sb.append(methodNamePured);\n+            sb.append(\"(\").append(eventName).append(\" event) {\").append(NL).append(NL);\n+            sb.append(INDENT).append(\"}\").append(NL).append(NL); //NOI18N\n+        }\n+    }\n+\n+    private static void appendInitialize(SkeletonContext context, StringBuilder sb) {\n+        if (!context.getSettings().isFull()) {\n+            return;\n+        }\n+\n+        sb.append(INDENT).append(FXML_ANNOTATION);\n+        if (context.getSettings().isWithComments()) {\n+            sb.append(\" // This method is called by the FXMLLoader when initialization is complete\"); //NOI18N\n+        }\n+        sb.append(NL);\n+\n+        sb.append(INDENT).append(\"void initialize() {\").append(NL); //NOI18N\n+        appendAssertions(context, sb);\n+        sb.append(NL);\n+        sb.append(INDENT);\n+        sb.append(\"}\").append(NL).append(NL); //NOI18N\n+    }\n+\n+    private static void appendAssertions(SkeletonContext context, StringBuilder sb) {\n+        for (String assertion : context.getAssertions()) {\n+            sb.append(INDENT).append(INDENT)\n+                .append(\"assert \").append(assertion).append(\" != null : \") //NOI18N\n+                .append(\"\\\"fx:id=\\\\\\\"\").append(assertion).append(\"\\\\\\\" was not injected: check your FXML file \") //NOI18N\n+                .append(\"'\").append(context.getDocumentName()).append(\"'.\\\";\").append(NL); //NOI18N\n+        }\n+    }\n+}"
  },
  {
    "sha": "1622d6653026cf9de5e8ebf9c092528c3925f42e",
    "filename": "kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreatorKotlin.java",
    "status": "added",
    "additions": 228,
    "deletions": 0,
    "changes": 228,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreatorKotlin.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreatorKotlin.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonCreatorKotlin.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,228 @@\n+/*\n+ * Copyright (c) 2016, 2021, Gluon and/or its affiliates.\n+ * Copyright (c) 2012, 2014, Oracle and/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+import com.oracle.javafx.scenebuilder.kit.i18n.I18N;\n+\n+import java.lang.reflect.TypeVariable;\n+import java.util.Map;\n+\n+public class SkeletonCreatorKotlin {\n+\n+    private static final String NL = System.lineSeparator();\n+    private static final String INDENT = \"    \"; //NOI18N\n+    private static final String FXML_ANNOTATION = \"@FXML\";\n+\n+    static String createFrom(SkeletonContext context) {\n+        final StringBuilder sb = new StringBuilder();\n+\n+        appendHeaderComment(context, sb);\n+        appendPackage(context, sb);\n+        appendImports(context, sb);\n+        appendClass(context, sb);\n+\n+        return sb.toString();\n+    }\n+\n+    private static void appendHeaderComment(SkeletonContext context, StringBuilder sb) {\n+        if (!context.getSettings().isWithComments()) {\n+            return;\n+        }\n+\n+        final String title = I18N.getString(\"skeleton.window.title\", context.getDocumentName());\n+        sb.append(\"/**\").append(NL); //NOI18N\n+        sb.append(\" * \").append(title).append(NL); //NOI18N\n+        sb.append(\" */\").append(NL); //NOI18N\n+        sb.append(NL);\n+    }\n+\n+    private static void appendPackage(SkeletonContext context, StringBuilder sb) {\n+        String controller = context.getFxController();\n+\n+        // TODO Verify for Kotlin: inner/static controller class\n+        if (controller != null && controller.contains(\".\") && !controller.contains(\"$\")) { //NOI18N\n+            sb.append(\"package \"); //NOI18N\n+            sb.append(controller, 0, controller.lastIndexOf('.')); //NOI18N\n+            sb.append(NL).append(NL); //NOI18N\n+        }\n+    }\n+\n+    private static void appendImports(SkeletonContext context, StringBuilder sb) {\n+        for (String importStatement : context.getImports()) {\n+            // importStatement built with ImportBuilder.build() contains ';' at the end\n+            String kotlinImport = importStatement.replaceAll(\";\", \"\");\n+            sb.append(kotlinImport);\n+        }\n+    }\n+\n+    private static void appendClass(SkeletonContext context, StringBuilder sb) {\n+        String controller = context.getFxController();\n+\n+        sb.append(NL);\n+        // TODO Verify for Kotlin: inner/static controller class?\n+        /*\n+        if (controller != null && controller.contains(\"$\")) { //NOI18N\n+            sb.append(\"static \"); //NOI18N\n+        }\n+         */\n+\n+        sb.append(\"class \"); //NOI18N\n+\n+        // TODO Verify for Kotlin: is this necessary? Can be simplified?\n+        if (controller != null && !controller.isEmpty()) {\n+            String simpleName = controller.replace(\"$\", \".\"); //NOI18N\n+            int dot = simpleName.lastIndexOf('.');\n+            if (dot > -1) {\n+                simpleName = simpleName.substring(dot + 1);\n+            }\n+            sb.append(simpleName);\n+        } else {\n+            sb.append(\"PleaseProvideControllerClassName\"); //NOI18N\n+        }\n+\n+        sb.append(\" {\").append(NL).append(NL); //NOI18N\n+\n+        appendFields(context, sb);\n+\n+        appendMethods(context, sb);\n+\n+        sb.append(\"}\").append(NL); //NOI18N\n+    }\n+\n+    private static void appendFields(SkeletonContext context, StringBuilder sb) {\n+        appendFieldsResourcesAndLocation(context, sb);\n+\n+        appendFieldsWithFxId(context, sb);\n+    }\n+\n+    private static void appendFieldsResourcesAndLocation(SkeletonContext context, StringBuilder sb) {\n+        if (!context.getSettings().isFull()) {\n+            return;\n+        }\n+\n+        sb.append(INDENT).append(FXML_ANNOTATION);\n+        if (context.getSettings().isWithComments()) {\n+            sb.append(\" // ResourceBundle that was given to the FXMLLoader\"); //NOI18N\n+        }\n+        sb.append(NL);\n+        sb.append(INDENT).append(\"private lateinit var resources: ResourceBundle\").append(NL).append(NL); //NOI18N\n+\n+        sb.append(INDENT).append(FXML_ANNOTATION);\n+        if (context.getSettings().isWithComments()) {\n+            sb.append(\" // URL location of the FXML file that was given to the FXMLLoader\"); //NOI18N\n+        }\n+        sb.append(NL);\n+        sb.append(INDENT).append(\"private lateinit var location: URL\").append(NL).append(NL); //NOI18N\n+    }\n+\n+    private static void appendFieldsWithFxId(SkeletonContext context, StringBuilder sb) {\n+        for (Map.Entry<String, Class<?>> variable : context.getVariables().entrySet()) {\n+            sb.append(INDENT).append(FXML_ANNOTATION);\n+            if (context.getSettings().isWithComments()) {\n+                sb.append(\" // fx:id=\\\"\").append(variable.getKey()).append(\"\\\"\"); //NOI18N\n+            }\n+            sb.append(NL);\n+\n+            sb.append(INDENT).append(\"private lateinit var \").append(variable.getKey()); //NOI18N\n+            sb.append(\": \").append(variable.getValue().getSimpleName());\n+            appendFieldParameters(sb, variable);\n+\n+            if (context.getSettings().isWithComments()) {\n+                sb.append(\" // Value injected by FXMLLoader\"); //NOI18N\n+            }\n+            sb.append(NL).append(NL);\n+        }\n+    }\n+\n+    // TODO Verify this is correct for Kotlin\n+    private static void appendFieldParameters(StringBuilder sb, Map.Entry<String, Class<?>> variable) {\n+        final TypeVariable<? extends Class<?>>[] parameters = variable.getValue().getTypeParameters();\n+        if (parameters.length > 0) {\n+            sb.append(\"<\"); //NOI18N\n+            String sep = \"\"; //NOI18N\n+            for (TypeVariable<?> t : parameters) {\n+                sb.append(sep).append(\"Any\"); //NOI18N\n+                sep = \", \"; //NOI18N\n+            }\n+            sb.append(\">\"); //NOI18N\n+        }\n+    }\n+\n+    private static void appendMethods(SkeletonContext context, StringBuilder sb) {\n+        appendEventHandlers(context, sb);\n+\n+        appendInitialize(context, sb);\n+    }\n+\n+    private static void appendEventHandlers(SkeletonContext context, StringBuilder sb) {\n+        for (Map.Entry<String, String> entry : context.getEventHandlers().entrySet()) {\n+            String methodName = entry.getKey();\n+            String eventName = entry.getValue();\n+\n+            final String methodNamePured = methodName.replace(\"#\", \"\"); //NOI18N\n+\n+            sb.append(INDENT).append(FXML_ANNOTATION).append(NL);\n+            sb.append(INDENT).append(\"fun \"); //NOI18N\n+            sb.append(methodNamePured);\n+            sb.append(\"(event: \").append(eventName).append(\") {\").append(NL).append(NL);\n+            sb.append(INDENT).append(\"}\").append(NL).append(NL); //NOI18N\n+        }\n+    }\n+\n+    private static void appendInitialize(SkeletonContext context, StringBuilder sb) {\n+        if (!context.getSettings().isFull()) {\n+            return;\n+        }\n+\n+        sb.append(INDENT).append(FXML_ANNOTATION);\n+        if (context.getSettings().isWithComments()) {\n+            sb.append(\" // This method is called by the FXMLLoader when initialization is complete\"); //NOI18N\n+        }\n+        sb.append(NL);\n+\n+        sb.append(INDENT).append(\"fun initialize() {\").append(NL); //NOI18N\n+        appendAssertions(context, sb);\n+        sb.append(NL);\n+        sb.append(INDENT);\n+        sb.append(\"}\").append(NL).append(NL); //NOI18N\n+    }\n+\n+    private static void appendAssertions(SkeletonContext context, StringBuilder sb) {\n+        for (String assertion : context.getAssertions()) {\n+            sb.append(INDENT).append(INDENT)\n+                .append(\"assert(\").append(assertion).append(\" != null) {\") //NOI18N\n+                .append(\"\\\"fx:id=\\\\\\\"\").append(assertion).append(\"\\\\\\\" was not injected: check your FXML file \") //NOI18N\n+                .append(\"'\").append(context.getDocumentName()).append(\"'.\\\" }\").append(NL); //NOI18N\n+        }\n+    }\n+}"
  },
  {
    "sha": "295272306512f9a76c6e3f3a4f814f21df839783",
    "filename": "kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonSettings.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonSettings.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonSettings.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonSettings.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2016, 2021, Gluon and/or its affiliates.\n+ * Copyright (c) 2012, 2014, Oracle and/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+class SkeletonSettings {\n+\n+    private LANGUAGE language = LANGUAGE.JAVA;\n+    private TEXT_TYPE textType = TEXT_TYPE.WITHOUT_COMMENTS;\n+    private FORMAT_TYPE textFormat = FORMAT_TYPE.COMPACT;\n+\n+    enum LANGUAGE {\n+        JAVA(\"Java\"), KOTLIN(\"Kotlin\");\n+\n+        private final String name;\n+\n+        LANGUAGE(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+    }\n+\n+    enum TEXT_TYPE {\n+        WITH_COMMENTS, WITHOUT_COMMENTS\n+    }\n+\n+    enum FORMAT_TYPE {\n+        COMPACT, FULL\n+    }\n+\n+    void setLanguage(LANGUAGE language) {\n+        this.language = language;\n+    }\n+\n+    public LANGUAGE getLanguage() {\n+        return language;\n+    }\n+\n+    void setTextType(TEXT_TYPE type) {\n+        this.textType = type;\n+    }\n+\n+    SkeletonSettings withTextType(TEXT_TYPE type) {\n+        this.textType = type;\n+        return this;\n+    }\n+\n+    void setFormat(FORMAT_TYPE format) {\n+        this.textFormat = format;\n+    }\n+\n+    SkeletonSettings withFormat(FORMAT_TYPE format) {\n+        this.textFormat = format;\n+        return this;\n+    }\n+\n+    boolean isWithComments() {\n+        return textType == TEXT_TYPE.WITH_COMMENTS;\n+    }\n+\n+    boolean isFull() {\n+        return textFormat == FORMAT_TYPE.FULL;\n+    }\n+}"
  },
  {
    "sha": "fdb1994dd50edb6a4f1487ae5df8466ba16d1a88",
    "filename": "kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonWindowController.java",
    "status": "modified",
    "additions": 32,
    "deletions": 23,
    "changes": 55,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonWindowController.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonWindowController.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/main/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonWindowController.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -1,4 +1,5 @@\n /*\n+ * Copyright (c) 2021, Gluon and/or its affiliates.\n  * Copyright (c) 2012, 2014, Oracle and/or its affiliates.\n  * All rights reserved. Use is subject to license terms.\n  *\n@@ -34,27 +35,28 @@\n import com.oracle.javafx.scenebuilder.kit.editor.EditorController;\n import com.oracle.javafx.scenebuilder.kit.editor.panel.util.AbstractFxmlWindowController;\n import com.oracle.javafx.scenebuilder.kit.fxom.FXOMDocument;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import com.oracle.javafx.scenebuilder.kit.i18n.I18N;\n import javafx.beans.value.ChangeListener;\n import javafx.event.ActionEvent;\n import javafx.fxml.FXML;\n import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ChoiceBox;\n import javafx.scene.control.TextArea;\n import javafx.scene.input.Clipboard;\n import javafx.scene.input.DataFormat;\n import javafx.stage.Stage;\n-import javafx.stage.Window;\n import javafx.stage.WindowEvent;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n /**\n  *\n  */\n public class SkeletonWindowController extends AbstractFxmlWindowController {\n \n+    @FXML\n+    ChoiceBox<SkeletonSettings.LANGUAGE> languageChoiceBox;\n     @FXML\n     CheckBox commentCheckBox;\n     @FXML\n@@ -78,24 +80,24 @@ private void onCopyAction(ActionEvent event) {\n     private final EditorController editorController;\n     private boolean dirty = false;\n \n-    private String documentName;\n+    private final String documentName;\n \n     public SkeletonWindowController(EditorController editorController, String documentName, Stage owner) {\n         super(SkeletonWindowController.class.getResource(\"SkeletonWindow.fxml\"), I18N.getBundle(), owner); //NOI18N\n         this.editorController = editorController;\n         this.documentName = documentName;\n \n         this.editorController.fxomDocumentProperty().addListener(\n-                (ChangeListener<FXOMDocument>) (ov, od, nd) -> {\n-                    assert editorController.getFxomDocument() == nd;\n-                    if (od != null) {\n-                        od.sceneGraphRevisionProperty().removeListener(fxomDocumentRevisionListener);\n-                    }\n-                    if (nd != null) {\n-                        nd.sceneGraphRevisionProperty().addListener(fxomDocumentRevisionListener);\n-                        update();\n-                    }\n-                });\n+            (ChangeListener<FXOMDocument>) (ov, od, nd) -> {\n+                assert editorController.getFxomDocument() == nd;\n+                if (od != null) {\n+                    od.sceneGraphRevisionProperty().removeListener(fxomDocumentRevisionListener);\n+                }\n+                if (nd != null) {\n+                    nd.sceneGraphRevisionProperty().addListener(fxomDocumentRevisionListener);\n+                    update();\n+                }\n+            });\n \n         if (editorController.getFxomDocument() != null) {\n             editorController.getFxomDocument().sceneGraphRevisionProperty().addListener(fxomDocumentRevisionListener);\n@@ -122,13 +124,18 @@ public void openWindow() {\n     @Override\n     protected void controllerDidLoadFxml() {\n         super.controllerDidLoadFxml();\n+        assert languageChoiceBox != null;\n         assert commentCheckBox != null;\n         assert formatCheckBox != null;\n         assert textArea != null;\n \n-        commentCheckBox.selectedProperty().addListener((ChangeListener<Boolean>) (ov, t, t1) -> update());\n+        languageChoiceBox.getItems().addAll(SkeletonSettings.LANGUAGE.values());\n+        languageChoiceBox.getSelectionModel().select(SkeletonSettings.LANGUAGE.JAVA);\n \n-        formatCheckBox.selectedProperty().addListener((ChangeListener<Boolean>) (ov, t, t1) -> update());\n+        ChangeListener<Object> updateOnChangeListener = (ov, t, t1) -> update();\n+        languageChoiceBox.getSelectionModel().selectedItemProperty().addListener(updateOnChangeListener);\n+        commentCheckBox.selectedProperty().addListener(updateOnChangeListener);\n+        formatCheckBox.selectedProperty().addListener(updateOnChangeListener);\n \n         update();\n     }\n@@ -137,7 +144,7 @@ protected void controllerDidLoadFxml() {\n      * Private\n      */\n     private final ChangeListener<Number> fxomDocumentRevisionListener\n-            = (observable, oldValue, newValue) -> update();\n+        = (observable, oldValue, newValue) -> update();\n \n     private void updateTitle() {\n         final String title = I18N.getString(\"skeleton.window.title\", documentName);\n@@ -152,16 +159,18 @@ private void update() {\n             updateTitle();\n             final SkeletonBuffer buf = new SkeletonBuffer(editorController.getFxomDocument(), documentName);\n \n+            buf.setLanguage(languageChoiceBox.getSelectionModel().getSelectedItem());\n+\n             if (commentCheckBox.isSelected()) {\n-                buf.setTextType(SkeletonBuffer.TEXT_TYPE.WITH_COMMENTS);\n+                buf.setTextType(SkeletonSettings.TEXT_TYPE.WITH_COMMENTS);\n             } else {\n-                buf.setTextType(SkeletonBuffer.TEXT_TYPE.WITHOUT_COMMENTS);\n+                buf.setTextType(SkeletonSettings.TEXT_TYPE.WITHOUT_COMMENTS);\n             }\n \n             if (formatCheckBox.isSelected()) {\n-                buf.setFormat(SkeletonBuffer.FORMAT_TYPE.FULL);\n+                buf.setFormat(SkeletonSettings.FORMAT_TYPE.FULL);\n             } else {\n-                buf.setFormat(SkeletonBuffer.FORMAT_TYPE.COMPACT);\n+                buf.setFormat(SkeletonSettings.FORMAT_TYPE.COMPACT);\n             }\n \n             textArea.setText(buf.toString());"
  },
  {
    "sha": "53efc488e37fa230166e39e53af1940dac240a9c",
    "filename": "kit/src/main/resources/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonWindow.fxml",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/resources/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonWindow.fxml",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/main/resources/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonWindow.fxml",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/main/resources/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonWindow.fxml?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -36,6 +36,7 @@\n <?import javafx.geometry.Insets?>\n <?import javafx.scene.control.Button?>\n <?import javafx.scene.control.CheckBox?>\n+<?import javafx.scene.control.ChoiceBox?>\n <?import javafx.scene.control.TextArea?>\n <?import javafx.scene.layout.HBox?>\n <?import javafx.scene.layout.StackPane?>\n@@ -51,6 +52,7 @@\n                         <Button mnemonicParsing=\"false\" onAction=\"#onCopyAction\" text=\"%label.copy\" HBox.hgrow=\"ALWAYS\" />\n                         <HBox alignment=\"BASELINE_RIGHT\" spacing=\"5.0\" HBox.hgrow=\"ALWAYS\">\n                             <children>\n+                                <ChoiceBox fx:id=\"languageChoiceBox\" />\n                                 <CheckBox fx:id=\"commentCheckBox\" mnemonicParsing=\"false\" text=\"%skeleton.add.comments\">\n                                 </CheckBox><CheckBox fx:id=\"formatCheckBox\" mnemonicParsing=\"false\" text=\"%skeleton.format.full\" />\n                             </children>"
  },
  {
    "sha": "ed8969616535079b3aca9f8680bc5767d82c793a",
    "filename": "kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/EmptyController.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/EmptyController.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/EmptyController.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/EmptyController.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2021 Gluon and/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation and Gluon nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+public class EmptyController {\n+\n+}"
  },
  {
    "sha": "abdaf82517ae86d5442ed2c55fba6ada4c9c26bc",
    "filename": "kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferJavaTest.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferJavaTest.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferJavaTest.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferJavaTest.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright (c) 2021 Gluon and/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation and Gluon nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+import com.oracle.javafx.scenebuilder.kit.editor.EditorController;\n+import com.oracle.javafx.scenebuilder.kit.fxom.FXOMDocument;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class SkeletonBufferJavaTest {\n+\n+    @Test\n+    public void skeletonToString_testFxml_full_withComments() throws IOException {\n+        // given\n+        SkeletonBuffer skeletonBuffer = load(\"Test.fxml\");\n+        skeletonBuffer.setFormat(SkeletonSettings.FORMAT_TYPE.FULL);\n+        skeletonBuffer.setTextType(SkeletonSettings.TEXT_TYPE.WITH_COMMENTS);\n+\n+        // when\n+        String skeleton = skeletonBuffer.toString();\n+\n+        // then\n+        assertEqualsFileContent(\"skeleton_java_full_comments.txt\", skeleton);\n+    }\n+\n+    @Test\n+    public void skeletonToString_testFxml_withComments() throws IOException {\n+        // given\n+        SkeletonBuffer skeletonBuffer = load(\"Test.fxml\");\n+        skeletonBuffer.setTextType(SkeletonSettings.TEXT_TYPE.WITH_COMMENTS);\n+\n+        // when\n+        String skeleton = skeletonBuffer.toString();\n+\n+        // then\n+        assertEqualsFileContent(\"skeleton_java_comments.txt\", skeleton);\n+    }\n+\n+    @Test\n+    public void skeletonToString_testFxml_fullFormat() throws IOException {\n+        // given\n+        SkeletonBuffer skeletonBuffer = load(\"Test.fxml\");\n+        skeletonBuffer.setFormat(SkeletonSettings.FORMAT_TYPE.FULL);\n+\n+        // when\n+        String skeleton = skeletonBuffer.toString();\n+\n+        // then\n+        assertEqualsFileContent(\"skeleton_java_full.txt\", skeleton);\n+    }\n+\n+    private void assertEqualsFileContent(String fileName, String actual) {\n+        URL url = this.getClass().getResource(fileName);\n+        File file = new File(url.getFile());\n+\n+        try {\n+            String expectedFileContent = Files.readString(file.toPath());\n+            assertEquals(expectedFileContent, actual);\n+        } catch (IOException e) {\n+            fail(\"Unable to open file: \" + fileName);\n+        }\n+    }\n+\n+    private SkeletonBuffer load(String fxmlFile) throws IOException {\n+        EditorController editorController = new EditorController();\n+        final URL fxmlURL = SkeletonBufferJavaTest.class.getResource(fxmlFile);\n+        final String fxmlText = FXOMDocument.readContentFromURL(fxmlURL);\n+        editorController.setFxmlTextAndLocation(fxmlText, fxmlURL, false);\n+\n+        SkeletonBuffer skeletonBuffer = new SkeletonBuffer(editorController.getFxomDocument(), \"test\");\n+        skeletonBuffer.setLanguage(SkeletonSettings.LANGUAGE.JAVA);\n+        return skeletonBuffer;\n+    }\n+}"
  },
  {
    "sha": "e61ed832c7457f613bd89857df50088e16b1d897",
    "filename": "kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferKotlinTest.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferKotlinTest.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferKotlinTest.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferKotlinTest.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright (c) 2021 Gluon and/or its affiliates.\n+ * All rights reserved. Use is subject to license terms.\n+ *\n+ * This file is available and licensed under the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *  - Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *  - Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the distribution.\n+ *  - Neither the name of Oracle Corporation and Gluon nor the names of its\n+ *    contributors may be used to endorse or promote products derived\n+ *    from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+import com.oracle.javafx.scenebuilder.kit.editor.EditorController;\n+import com.oracle.javafx.scenebuilder.kit.fxom.FXOMDocument;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class SkeletonBufferKotlinTest {\n+\n+    @Test\n+    public void skeletonToString_testFxml_full_withComments() throws IOException {\n+        // given\n+        SkeletonBuffer skeletonBuffer = load(\"Test.fxml\");\n+        skeletonBuffer.setFormat(SkeletonSettings.FORMAT_TYPE.FULL);\n+        skeletonBuffer.setTextType(SkeletonSettings.TEXT_TYPE.WITH_COMMENTS);\n+\n+        // when\n+        String skeleton = skeletonBuffer.toString();\n+\n+        // then\n+        assertEqualsFileContent(\"skeleton_kotlin_full_comments.txt\", skeleton);\n+    }\n+\n+    @Test\n+    public void skeletonToString_testFxml_withComments() throws IOException {\n+        // given\n+        SkeletonBuffer skeletonBuffer = load(\"Test.fxml\");\n+        skeletonBuffer.setTextType(SkeletonSettings.TEXT_TYPE.WITH_COMMENTS);\n+\n+        // when\n+        String skeleton = skeletonBuffer.toString();\n+\n+        // then\n+        assertEqualsFileContent(\"skeleton_kotlin_comments.txt\", skeleton);\n+    }\n+\n+    @Test\n+    public void skeletonToString_testFxml_fullFormat() throws IOException {\n+        // given\n+        SkeletonBuffer skeletonBuffer = load(\"Test.fxml\");\n+        skeletonBuffer.setFormat(SkeletonSettings.FORMAT_TYPE.FULL);\n+\n+        // when\n+        String skeleton = skeletonBuffer.toString();\n+\n+        // then\n+        assertEqualsFileContent(\"skeleton_kotlin_full.txt\", skeleton);\n+    }\n+\n+    private void assertEqualsFileContent(String fileName, String actual) {\n+        URL url = this.getClass().getResource(fileName);\n+        File file = new File(url.getFile());\n+\n+        try {\n+            String expectedFileContent = Files.readString(file.toPath());\n+            assertEquals(expectedFileContent, actual);\n+        } catch (IOException e) {\n+            fail(\"Unable to open file: \" + fileName);\n+        }\n+    }\n+\n+    private SkeletonBuffer load(String fxmlFile) throws IOException {\n+        EditorController editorController = new EditorController();\n+        final URL fxmlURL = SkeletonBufferKotlinTest.class.getResource(fxmlFile);\n+        final String fxmlText = FXOMDocument.readContentFromURL(fxmlURL);\n+        editorController.setFxmlTextAndLocation(fxmlText, fxmlURL, false);\n+\n+        SkeletonBuffer skeletonBuffer = new SkeletonBuffer(editorController.getFxomDocument(), \"test\");\n+        skeletonBuffer.setLanguage(SkeletonSettings.LANGUAGE.KOTLIN);\n+        return skeletonBuffer;\n+    }\n+}"
  },
  {
    "sha": "b4f729d02b3b855d3b514f73f7df2ec6baf4d0ad",
    "filename": "kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferTest.java",
    "status": "modified",
    "additions": 21,
    "deletions": 16,
    "changes": 37,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferTest.java",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferTest.java",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/java/com/oracle/javafx/scenebuilder/kit/skeleton/SkeletonBufferTest.java?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -1,5 +1,5 @@\n /*\r\n- * Copyright (c) 2016, 2017 Gluon and/or its affiliates.\r\n+ * Copyright (c) 2016, 2017, 2021 Gluon and/or its affiliates.\r\n  * All rights reserved. Use is subject to license terms.\r\n  *\r\n  * This file is available and licensed under the following license:\r\n@@ -47,43 +47,48 @@\n \r\n     @Test\r\n     public void testControllerWithoutPackageName() throws IOException {\r\n-        EditorController editorController = new EditorController();\r\n-        final URL fxmlURL = SkeletonBufferTest.class.getResource(\"ControllerWithoutPackage.fxml\");\r\n-        final String fxmlText = FXOMDocument.readContentFromURL(fxmlURL);\r\n-        editorController.setFxmlTextAndLocation(fxmlText, fxmlURL, false);\r\n+        // given\r\n+        SkeletonBuffer skeletonBuffer = load(\"ControllerWithoutPackage.fxml\");\r\n \r\n-        SkeletonBuffer skeletonBuffer = new SkeletonBuffer(editorController.getFxomDocument(), \"test\");\r\n+        // when\r\n         String skeleton = skeletonBuffer.toString();\r\n \r\n+        // then\r\n         String firstLine = skeleton.substring(0, skeleton.indexOf(\"\\n\"));\r\n         assertEquals(\"\", firstLine);\r\n     }\r\n \r\n     @Test\r\n     public void testControllerWithSimplePackageName() throws IOException {\r\n-        EditorController editorController = new EditorController();\r\n-        final URL fxmlURL = SkeletonBufferTest.class.getResource(\"ControllerWithSimplePackage.fxml\");\r\n-        final String fxmlText = FXOMDocument.readContentFromURL(fxmlURL);\r\n-        editorController.setFxmlTextAndLocation(fxmlText, fxmlURL, false);\r\n+        // given\r\n+        SkeletonBuffer skeletonBuffer = load(\"ControllerWithSimplePackage.fxml\");\r\n \r\n-        SkeletonBuffer skeletonBuffer = new SkeletonBuffer(editorController.getFxomDocument(), \"test\");\r\n+        // when\r\n         String skeleton = skeletonBuffer.toString();\r\n \r\n+        // then\r\n         String firstLine = skeleton.substring(0, skeleton.indexOf(\"\\n\"));\r\n         assertEquals(\"package com;\", firstLine);\r\n     }\r\n \r\n     @Test\r\n     public void testControllerWithAdvancedPackageName() throws IOException {\r\n-        EditorController editorController = new EditorController();\r\n-        final URL fxmlURL = SkeletonBufferTest.class.getResource(\"ControllerWithAdvancedPackage.fxml\");\r\n-        final String fxmlText = FXOMDocument.readContentFromURL(fxmlURL);\r\n-        editorController.setFxmlTextAndLocation(fxmlText, fxmlURL, false);\r\n+        // given\r\n+        SkeletonBuffer skeletonBuffer = load(\"ControllerWithAdvancedPackage.fxml\");\r\n \r\n-        SkeletonBuffer skeletonBuffer = new SkeletonBuffer(editorController.getFxomDocument(), \"test\");\r\n+        // when\r\n         String skeleton = skeletonBuffer.toString();\r\n \r\n+        // then\r\n         String firstLine = skeleton.substring(0, skeleton.indexOf(\"\\n\"));\r\n         assertEquals(\"package com.example.app.view;\", firstLine);\r\n     }\r\n+\r\n+    private SkeletonBuffer load(String fxmlFile) throws IOException {\r\n+        EditorController editorController = new EditorController();\r\n+        final URL fxmlURL = SkeletonBufferTest.class.getResource(fxmlFile);\r\n+        final String fxmlText = FXOMDocument.readContentFromURL(fxmlURL);\r\n+        editorController.setFxmlTextAndLocation(fxmlText, fxmlURL, false);\r\n+        return new SkeletonBuffer(editorController.getFxomDocument(), \"test\");\r\n+    }\r\n }\r"
  },
  {
    "sha": "a0980a3dbf4f5f967303e603e056827bbf6112a5",
    "filename": "kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/Test.fxml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/Test.fxml",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/Test.fxml",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/Test.fxml?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.scene.layout.VBox?>\n+\n+\n+<VBox fx:id=\"myVbox\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" onMouseEntered=\"#onMyVboxMouseEntered\" prefHeight=\"400.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/8.0.60\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"com.oracle.javafx.scenebuilder.kit.skeleton.EmptyController\" />"
  },
  {
    "sha": "f6db8d9789ff814a814ac331bc2b611f2cda360e",
    "filename": "kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_comments.txt",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_comments.txt",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_comments.txt",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_comments.txt?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * Sample Skeleton for 'test' Controller Class\n+ */\n+\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.VBox;\n+\n+public class EmptyController {\n+\n+    @FXML // fx:id=\"myVbox\"\n+    private VBox myVbox; // Value injected by FXMLLoader\n+\n+    @FXML\n+    void onMyVboxMouseEntered(MouseEvent event) {\n+\n+    }\n+\n+}"
  },
  {
    "sha": "ec44d94d7bfe2eb930cb64b57dd6da0473ad2a06",
    "filename": "kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full.txt",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full.txt",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full.txt",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full.txt?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,31 @@\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+import java.net.URL;\n+import java.util.ResourceBundle;\n+import javafx.fxml.FXML;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.VBox;\n+\n+public class EmptyController {\n+\n+    @FXML\n+    private ResourceBundle resources;\n+\n+    @FXML\n+    private URL location;\n+\n+    @FXML\n+    private VBox myVbox;\n+\n+    @FXML\n+    void onMyVboxMouseEntered(MouseEvent event) {\n+\n+    }\n+\n+    @FXML\n+    void initialize() {\n+        assert myVbox != null : \"fx:id=\\\"myVbox\\\" was not injected: check your FXML file 'test'.\";\n+\n+    }\n+\n+}"
  },
  {
    "sha": "87e8180565a72f2caf8c4dde5768b485469875c8",
    "filename": "kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full_comments.txt",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full_comments.txt",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full_comments.txt",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full_comments.txt?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Sample Skeleton for 'test' Controller Class\n+ */\n+\n+package com.oracle.javafx.scenebuilder.kit.skeleton;\n+\n+import java.net.URL;\n+import java.util.ResourceBundle;\n+import javafx.fxml.FXML;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.VBox;\n+\n+public class EmptyController {\n+\n+    @FXML // ResourceBundle that was given to the FXMLLoader\n+    private ResourceBundle resources;\n+\n+    @FXML // URL location of the FXML file that was given to the FXMLLoader\n+    private URL location;\n+\n+    @FXML // fx:id=\"myVbox\"\n+    private VBox myVbox; // Value injected by FXMLLoader\n+\n+    @FXML\n+    void onMyVboxMouseEntered(MouseEvent event) {\n+\n+    }\n+\n+    @FXML // This method is called by the FXMLLoader when initialization is complete\n+    void initialize() {\n+        assert myVbox != null : \"fx:id=\\\"myVbox\\\" was not injected: check your FXML file 'test'.\";\n+\n+    }\n+\n+}"
  },
  {
    "sha": "088249de77a8e95d7427ed99a1d19bd32e736306",
    "filename": "kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_comments.txt",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_comments.txt",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_comments.txt",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_comments.txt?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * Sample Skeleton for 'test' Controller Class\n+ */\n+\n+package com.oracle.javafx.scenebuilder.kit.skeleton\n+\n+import javafx.fxml.FXML\n+import javafx.scene.input.MouseEvent\n+import javafx.scene.layout.VBox\n+\n+class EmptyController {\n+\n+    @FXML // fx:id=\"myVbox\"\n+    private lateinit var myVbox: VBox // Value injected by FXMLLoader\n+\n+    @FXML\n+    fun onMyVboxMouseEntered(event: MouseEvent) {\n+\n+    }\n+\n+}"
  },
  {
    "sha": "928c2eb66f0a2f3f3ffbbbb25d4db50168f72a63",
    "filename": "kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full.txt",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full.txt",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full.txt",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full.txt?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,31 @@\n+package com.oracle.javafx.scenebuilder.kit.skeleton\n+\n+import java.net.URL\n+import java.util.ResourceBundle\n+import javafx.fxml.FXML\n+import javafx.scene.input.MouseEvent\n+import javafx.scene.layout.VBox\n+\n+class EmptyController {\n+\n+    @FXML\n+    private lateinit var resources: ResourceBundle\n+\n+    @FXML\n+    private lateinit var location: URL\n+\n+    @FXML\n+    private lateinit var myVbox: VBox\n+\n+    @FXML\n+    fun onMyVboxMouseEntered(event: MouseEvent) {\n+\n+    }\n+\n+    @FXML\n+    fun initialize() {\n+        assert(myVbox != null) {\"fx:id=\\\"myVbox\\\" was not injected: check your FXML file 'test'.\" }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "7d74c7a19e89c7b6b500cfc0cedfdf8a3a60018b",
    "filename": "kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full_comments.txt",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/gluonhq/scenebuilder/blob/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full_comments.txt",
    "raw_url": "https://github.com/gluonhq/scenebuilder/raw/6c4450a0399a8ae5beb04c04096f664b5bc9c5e9/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full_comments.txt",
    "contents_url": "https://api.github.com/repos/gluonhq/scenebuilder/contents/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full_comments.txt?ref=6c4450a0399a8ae5beb04c04096f664b5bc9c5e9",
    "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Sample Skeleton for 'test' Controller Class\n+ */\n+\n+package com.oracle.javafx.scenebuilder.kit.skeleton\n+\n+import java.net.URL\n+import java.util.ResourceBundle\n+import javafx.fxml.FXML\n+import javafx.scene.input.MouseEvent\n+import javafx.scene.layout.VBox\n+\n+class EmptyController {\n+\n+    @FXML // ResourceBundle that was given to the FXMLLoader\n+    private lateinit var resources: ResourceBundle\n+\n+    @FXML // URL location of the FXML file that was given to the FXMLLoader\n+    private lateinit var location: URL\n+\n+    @FXML // fx:id=\"myVbox\"\n+    private lateinit var myVbox: VBox // Value injected by FXMLLoader\n+\n+    @FXML\n+    fun onMyVboxMouseEntered(event: MouseEvent) {\n+\n+    }\n+\n+    @FXML // This method is called by the FXMLLoader when initialization is complete\n+    fun initialize() {\n+        assert(myVbox != null) {\"fx:id=\\\"myVbox\\\" was not injected: check your FXML file 'test'.\" }\n+\n+    }\n+\n+}"
  }
]
