[
  {
    "sha": "384096d70c4adea770cd7aa15dca175aa1f72069",
    "filename": "rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/CompositeClientMethodInvoker.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/CompositeClientMethodInvoker.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/CompositeClientMethodInvoker.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/CompositeClientMethodInvoker.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -0,0 +1,37 @@\n+package net.winterly.rxjersey.client.rxjava2;\n+\n+import net.winterly.rxjersey.client.ClientMethodInvoker;\n+\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.GenericType;\n+\n+public class CompositeClientMethodInvoker implements ClientMethodInvoker<Object> {\n+\n+    private final FlowableClientMethodInvoker flowableClientMethodInvoker;\n+    private final SyncClientMethodInvoker syncClientMethodInvoker;\n+\n+    public CompositeClientMethodInvoker() {\n+        this.flowableClientMethodInvoker = new FlowableClientMethodInvoker();\n+        this.syncClientMethodInvoker = new SyncClientMethodInvoker();\n+    }\n+\n+    @Override\n+    public <T> Object method(final Invocation.Builder builder, final String name, final GenericType<T> responseType) {\n+        return isSupportedByFlowableInvoker(responseType)\n+                ? flowableClientMethodInvoker.method(builder, name, responseType)\n+                : syncClientMethodInvoker.method(builder, name, responseType);\n+    }\n+\n+    @Override\n+    public <T> Object method(final Invocation.Builder builder, final String name, final Entity<?> entity, final GenericType<T> responseType) {\n+        return isSupportedByFlowableInvoker(responseType)\n+                ? flowableClientMethodInvoker.method(builder, name, entity, responseType)\n+                : syncClientMethodInvoker.method(builder, name, entity, responseType);\n+    }\n+\n+    private <T> boolean isSupportedByFlowableInvoker(final GenericType<T> responseType) {\n+        return flowableClientMethodInvoker.supportedTypes().contains(responseType.getRawType());\n+    }\n+\n+}"
  },
  {
    "sha": "994ccc998e72caec20e4c71867b2d39e6310dbfc",
    "filename": "rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/FlowableClientMethodInvoker.java",
    "status": "modified",
    "additions": 18,
    "deletions": 2,
    "changes": 20,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/FlowableClientMethodInvoker.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/FlowableClientMethodInvoker.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/FlowableClientMethodInvoker.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -4,16 +4,19 @@\n import net.winterly.rxjersey.client.ClientMethodInvoker;\n import org.glassfish.jersey.client.rx.rxjava2.RxFlowableInvoker;\n \n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.client.Entity;\n import javax.ws.rs.client.Invocation;\n import javax.ws.rs.core.GenericType;\n import java.lang.reflect.ParameterizedType;\n import java.util.HashMap;\n+import java.util.Set;\n import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n public class FlowableClientMethodInvoker implements ClientMethodInvoker<Object> {\n \n-    private final HashMap<Class, Function<Flowable, ?>> converters = new HashMap<>();\n+    private final HashMap<Class<?>, Function<Flowable<?>, ?>> converters = new HashMap<>();\n \n     public FlowableClientMethodInvoker() {\n         converters.put(Flowable.class, flowable -> flowable);\n@@ -23,6 +26,10 @@ public FlowableClientMethodInvoker() {\n         converters.put(Completable.class, Flowable::ignoreElements);\n     }\n \n+    public Set<Class<?>> supportedTypes() {\n+        return converters.keySet();\n+    }\n+\n     @Override\n     public <T> Object method(Invocation.Builder builder, String name, GenericType<T> responseType) {\n         GenericType<?> responseValueType = getValueTypeIfPossible(responseType);\n@@ -38,7 +45,16 @@ public FlowableClientMethodInvoker() {\n     }\n \n     private <T> Object convert(Flowable<?> flowable, GenericType<T> responseType) {\n-        Function<Flowable, ?> converter = converters.get(responseType.getRawType());\n+        final Function<Flowable<?>, ?> converter = converters.get(responseType.getRawType());\n+        if (converter == null) {\n+            throw new NotSupportedException(\n+                    String.format(\n+                            \"FlowableClientMethodInvoker does not support type %s. Supported types are %s.\",\n+                            responseType.getRawType(),\n+                            supportedTypes().stream().map(Class::getName).collect(Collectors.joining(\",\"))\n+                    )\n+            );\n+        }\n         return converter.apply(flowable);\n     }\n "
  },
  {
    "sha": "41724df564aa0543d03e71a4ad27d1918ecd3e7d",
    "filename": "rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/SyncClientMethodInvoker.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/SyncClientMethodInvoker.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/SyncClientMethodInvoker.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/main/java/net/winterly/rxjersey/client/rxjava2/SyncClientMethodInvoker.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -0,0 +1,20 @@\n+package net.winterly.rxjersey.client.rxjava2;\n+\n+import net.winterly.rxjersey.client.ClientMethodInvoker;\n+\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.core.GenericType;\n+\n+public class SyncClientMethodInvoker implements ClientMethodInvoker<Object> {\n+\n+    @Override\n+    public <T> Object method(final Invocation.Builder builder, final String name, final GenericType<T> responseType) {\n+        return builder.method(name, responseType);\n+    }\n+\n+    @Override\n+    public <T> Object method(final Invocation.Builder builder, final String name, final Entity<?> entity, final GenericType<T> responseType) {\n+        return builder.method(name, entity, responseType);\n+    }\n+}"
  },
  {
    "sha": "af322456b4be10f21b3a955c40035d60910194b2",
    "filename": "rxjava2-client/src/test/java/CompositeResourceTest.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/CompositeResourceTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/CompositeResourceTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/CompositeResourceTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -0,0 +1,84 @@\n+import io.reactivex.Flowable;\n+import net.winterly.rxjersey.client.WebResourceFactory;\n+import net.winterly.rxjersey.client.rxjava2.CompositeClientMethodInvoker;\n+import org.junit.Test;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class CompositeResourceTest extends RxJerseyTest {\n+\n+    @Override\n+    protected <T> T target(final Class<T> resource) {\n+        return WebResourceFactory.newResource(resource, target(), new CompositeClientMethodInvoker());\n+    }\n+\n+    @Test\n+    public void shouldReturnContent() {\n+        final CompositeResource resource = target(CompositeResource.class);\n+        final String message = resource.echo(\"hello\").blockingFirst();\n+\n+        assertEquals(\"hello\", message);\n+    }\n+\n+    @Test\n+    public void shouldReturnNoContentOnNull() {\n+        final CompositeResource resource = target(CompositeResource.class);\n+        final String message = resource.empty().blockingFirst();\n+\n+        assertEquals(\"\", message);\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void shouldHandleError() {\n+        final CompositeResource resource = target(CompositeResource.class);\n+        final String message = resource.error().blockingFirst();\n+\n+        assertEquals(\"\", message);\n+    }\n+\n+    @Test\n+    public void shouldReturnContentForNonRxType() {\n+        final CompositeResource resource = target(CompositeResource.class);\n+        final String message = resource.string();\n+\n+        assertEquals(\"string\", message);\n+    }\n+\n+    @Test\n+    public void shouldReturnContentForNonRxResponse() {\n+        final CompositeResource resource = target(CompositeResource.class);\n+        final Response response = resource.json(\"message\");\n+\n+        assertEquals(\"message\", response.readEntity(Entity.class).message);\n+    }\n+\n+    @Path(\"/endpoint\")\n+    public interface CompositeResource {\n+\n+        @GET\n+        @Path(\"echo\")\n+        Flowable<String> echo(@QueryParam(\"message\") String message);\n+\n+        @GET\n+        @Path(\"empty\")\n+        Flowable<String> empty();\n+\n+        @GET\n+        @Path(\"error\")\n+        Flowable<String> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        String string();\n+\n+        @GET\n+        @Path(\"json\")\n+        Response json(@QueryParam(\"message\") String message);\n+    }\n+}"
  },
  {
    "sha": "e0b341993392de28f01c1a67969b004edb7f96ae",
    "filename": "rxjava2-client/src/test/java/FlowableResourceTest.java",
    "status": "modified",
    "additions": 29,
    "deletions": 4,
    "changes": 33,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/FlowableResourceTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/FlowableResourceTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/FlowableResourceTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -2,6 +2,7 @@\n import org.junit.Test;\n \n import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n@@ -12,30 +13,46 @@\n \n     @Test\n     public void shouldReturnContent() {\n-        ObservableResource resource = target(ObservableResource.class);\n+        Resource resource = target(Resource.class);\n         String message = resource.echo(\"hello\").blockingFirst();\n \n         assertEquals(\"hello\", message);\n     }\n \n     @Test\n     public void shouldReturnNoContentOnNull() {\n-        ObservableResource resource = target(ObservableResource.class);\n+        Resource resource = target(Resource.class);\n         String message = resource.empty().blockingFirst();\n \n         assertEquals(\"\", message);\n     }\n \n     @Test(expected = BadRequestException.class)\n     public void shouldHandleError() {\n-        ObservableResource resource = target(ObservableResource.class);\n+        Resource resource = target(Resource.class);\n         String message = resource.error().blockingFirst();\n \n         assertEquals(\"\", message);\n     }\n \n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxType() {\n+        Resource resource = target(Resource.class);\n+        String message = resource.string();\n+\n+        assertEquals(\"\", message);\n+    }\n+\n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxTypeWithParam() {\n+        Resource resource = target(Resource.class);\n+        Entity entity = resource.json(\"message\");\n+\n+        assertEquals(\"\", entity.message);\n+    }\n+\n     @Path(\"/endpoint\")\n-    public interface ObservableResource {\n+    public interface Resource {\n \n         @GET\n         @Path(\"echo\")\n@@ -48,5 +65,13 @@ public void shouldHandleError() {\n         @GET\n         @Path(\"error\")\n         Flowable<String> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        String string();\n+\n+        @GET\n+        @Path(\"json\")\n+        Entity json(@QueryParam(\"message\") String message);\n     }\n }"
  },
  {
    "sha": "8b36c6286293f2dd2c331b179107d5f172ad37ff",
    "filename": "rxjava2-client/src/test/java/FlowableResponseTest.java",
    "status": "modified",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/FlowableResponseTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/FlowableResponseTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/FlowableResponseTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -1,6 +1,7 @@\n import io.reactivex.Flowable;\n import org.junit.Test;\n \n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n@@ -34,6 +35,22 @@ public void shouldHandleError() {\n         assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n     }\n \n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxType() {\n+        Resource resource = target(Resource.class);\n+        Response response = resource.string();\n+\n+        assertEquals(response.readEntity(String.class), \"\");\n+    }\n+\n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxTypeWithParam() {\n+        Resource resource = target(Resource.class);\n+        Response response = resource.echo(\"message\");\n+\n+        assertEquals(response.readEntity(String.class), \"\");\n+    }\n+\n     @Path(\"/endpoint\")\n     public interface Resource {\n \n@@ -48,5 +65,14 @@ public void shouldHandleError() {\n         @GET\n         @Path(\"error\")\n         Flowable<Response> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        Response string();\n+\n+        @GET\n+        @Path(\"echo\")\n+        Response echo(@QueryParam(\"message\") String message);\n+\n     }\n }"
  },
  {
    "sha": "bf04e97811c49b7e842ac389da9776e28ba777cb",
    "filename": "rxjava2-client/src/test/java/MaybeResourceTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/MaybeResourceTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/MaybeResourceTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/MaybeResourceTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -1,6 +1,7 @@\n import io.reactivex.Maybe;\n import org.junit.Test;\n \n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n@@ -34,6 +35,22 @@ public void shouldHandleError() {\n         assertEquals(\"\", message);\n     }\n \n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxType() {\n+        Resource resource = target(Resource.class);\n+        String message = resource.string();\n+\n+        assertEquals(\"\", message);\n+    }\n+\n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxTypeWithParam() {\n+        Resource resource = target(Resource.class);\n+        Entity entity = resource.json(\"message\");\n+\n+        assertEquals(\"\", entity.message);\n+    }\n+\n     @Path(\"/endpoint\")\n     public interface Resource {\n \n@@ -48,5 +65,13 @@ public void shouldHandleError() {\n         @GET\n         @Path(\"error\")\n         Maybe<String> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        String string();\n+\n+        @GET\n+        @Path(\"json\")\n+        Entity json(@QueryParam(\"message\") String message);\n     }\n }"
  },
  {
    "sha": "84cf9388725297eacb93f9cefed85b8903483459",
    "filename": "rxjava2-client/src/test/java/MaybeResponseTest.java",
    "status": "modified",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/MaybeResponseTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/MaybeResponseTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/MaybeResponseTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -1,6 +1,7 @@\n import io.reactivex.Maybe;\n import org.junit.Test;\n \n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n@@ -34,6 +35,22 @@ public void shouldHandleError() {\n         assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n     }\n \n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxType() {\n+        Resource resource = target(Resource.class);\n+        Response response = resource.string();\n+\n+        assertEquals(response.readEntity(String.class), \"\");\n+    }\n+\n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxTypeWithParam() {\n+        Resource resource = target(Resource.class);\n+        Response response = resource.echo(\"message\");\n+\n+        assertEquals(response.readEntity(String.class), \"\");\n+    }\n+\n     @Path(\"/endpoint\")\n     public interface Resource {\n \n@@ -48,5 +65,14 @@ public void shouldHandleError() {\n         @GET\n         @Path(\"error\")\n         Maybe<Response> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        Response string();\n+\n+        @GET\n+        @Path(\"echo\")\n+        Response echo(@QueryParam(\"message\") String message);\n+\n     }\n }"
  },
  {
    "sha": "e39cefdf0d098ad1af27338011a3221665e6c469",
    "filename": "rxjava2-client/src/test/java/ObservableResourceTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/ObservableResourceTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/ObservableResourceTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/ObservableResourceTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -2,6 +2,7 @@\n import org.junit.Test;\n \n import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n@@ -34,6 +35,22 @@ public void shouldHandleError() {\n         assertEquals(\"\", message);\n     }\n \n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxType() {\n+        Resource resource = target(Resource.class);\n+        String message = resource.string();\n+\n+        assertEquals(\"\", message);\n+    }\n+\n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxTypeWithParam() {\n+        Resource resource = target(Resource.class);\n+        Entity entity = resource.json(\"message\");\n+\n+        assertEquals(\"\", entity.message);\n+    }\n+\n     @Path(\"/endpoint\")\n     public interface Resource {\n \n@@ -48,5 +65,13 @@ public void shouldHandleError() {\n         @GET\n         @Path(\"error\")\n         Observable<String> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        String string();\n+\n+        @GET\n+        @Path(\"json\")\n+        Entity json(@QueryParam(\"message\") String message);\n     }\n }"
  },
  {
    "sha": "f6a3ccb38f8ad7212ccac37bf3cb52099737bd49",
    "filename": "rxjava2-client/src/test/java/ObservableResponseTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/ObservableResponseTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/ObservableResponseTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/ObservableResponseTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -2,6 +2,7 @@\n import org.junit.Test;\n \n import javax.ws.rs.GET;\n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.Response;\n@@ -34,6 +35,22 @@ public void shouldHandleError() {\n         assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n     }\n \n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxType() {\n+        Resource resource = target(Resource.class);\n+        Response response = resource.string();\n+\n+        assertEquals(response.readEntity(String.class), \"\");\n+    }\n+\n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxTypeWithParam() {\n+        Resource resource = target(Resource.class);\n+        Response response = resource.echo(\"message\");\n+\n+        assertEquals(response.readEntity(String.class), \"\");\n+    }\n+\n     @Path(\"/endpoint\")\n     public interface Resource {\n \n@@ -48,5 +65,13 @@ public void shouldHandleError() {\n         @GET\n         @Path(\"error\")\n         Observable<Response> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        Response string();\n+\n+        @GET\n+        @Path(\"echo\")\n+        Response echo(@QueryParam(\"message\") String message);\n     }\n }"
  },
  {
    "sha": "8786595b4f843db0e19be5019964aa8b55bda0af",
    "filename": "rxjava2-client/src/test/java/RxJerseyTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/RxJerseyTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/RxJerseyTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/RxJerseyTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -97,6 +97,12 @@ public String error() {\n             throw new BadRequestException();\n         }\n \n+        @GET\n+        @Path(\"string\")\n+        public String string() {\n+            return \"string\";\n+        }\n+\n         @Path(\"subresource/{id}\")\n         public ServerSubResource subResource(@PathParam(\"id\") String id) {\n             return new ServerSubResource(id);"
  },
  {
    "sha": "854a1147210ddde59b8cfa6981fafabcbbec6b8f",
    "filename": "rxjava2-client/src/test/java/SingleResourceTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/SingleResourceTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/SingleResourceTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/SingleResourceTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -2,6 +2,7 @@\n import org.junit.Test;\n \n import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n@@ -34,6 +35,22 @@ public void shouldHandleError() {\n         assertEquals(\"\", message);\n     }\n \n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxType() {\n+        Resource resource = target(Resource.class);\n+        String message = resource.string();\n+\n+        assertEquals(\"\", message);\n+    }\n+\n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxTypeWithParam() {\n+        Resource resource = target(Resource.class);\n+        Entity entity = resource.json(\"message\");\n+\n+        assertEquals(\"\", entity.message);\n+    }\n+\n     @Path(\"/endpoint\")\n     public interface Resource {\n \n@@ -48,5 +65,13 @@ public void shouldHandleError() {\n         @GET\n         @Path(\"error\")\n         Single<String> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        String string();\n+\n+        @GET\n+        @Path(\"json\")\n+        Entity json(@QueryParam(\"message\") String message);\n     }\n }"
  },
  {
    "sha": "ab31e5ed1621f65e792c548d69567f709998f198",
    "filename": "rxjava2-client/src/test/java/SingleResponseTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/SingleResponseTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/SingleResponseTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/SingleResponseTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -2,6 +2,7 @@\n import org.junit.Test;\n \n import javax.ws.rs.GET;\n+import javax.ws.rs.NotSupportedException;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.Response;\n@@ -34,6 +35,22 @@ public void shouldHandleError() {\n         assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n     }\n \n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxType() {\n+        Resource resource = target(Resource.class);\n+        Response response = resource.string();\n+\n+        assertEquals(response.readEntity(String.class), \"\");\n+    }\n+\n+    @Test(expected = NotSupportedException.class)\n+    public void shouldThrowSensibleErrorForNonRxTypeWithParam() {\n+        Resource resource = target(Resource.class);\n+        Response response = resource.echo(\"message\");\n+\n+        assertEquals(response.readEntity(String.class), \"\");\n+    }\n+\n     @Path(\"/endpoint\")\n     public interface Resource {\n \n@@ -48,5 +65,13 @@ public void shouldHandleError() {\n         @GET\n         @Path(\"error\")\n         Single<Response> error();\n+\n+        @GET\n+        @Path(\"string\")\n+        Response string();\n+\n+        @GET\n+        @Path(\"echo\")\n+        Response echo(@QueryParam(\"message\") String message);\n     }\n }"
  },
  {
    "sha": "fcba19bf1670a7c9766a884e96c529b2f9cab495",
    "filename": "rxjava2-client/src/test/java/SyncResourceTest.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/alex-shpak/rx-jersey/blob/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/SyncResourceTest.java",
    "raw_url": "https://github.com/alex-shpak/rx-jersey/raw/2f363ea1fc2abe6007d4014dd79a734585b2fcd8/rxjava2-client/src/test/java/SyncResourceTest.java",
    "contents_url": "https://api.github.com/repos/alex-shpak/rx-jersey/contents/rxjava2-client/src/test/java/SyncResourceTest.java?ref=2f363ea1fc2abe6007d4014dd79a734585b2fcd8",
    "patch": "@@ -0,0 +1,73 @@\n+import net.winterly.rxjersey.client.WebResourceFactory;\n+import net.winterly.rxjersey.client.rxjava2.SyncClientMethodInvoker;\n+import org.junit.Test;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class SyncResourceTest extends RxJerseyTest {\n+\n+    @Override\n+    protected <T> T target(Class<T> resource) {\n+        return WebResourceFactory.newResource(resource, target(), new SyncClientMethodInvoker());\n+    }\n+\n+    @Test\n+    public void shouldReturnContentForResponse() {\n+        SyncResource resource = target(SyncResource.class);\n+        Response response = resource.echo(\"hello\");\n+\n+        assertEquals(\"hello\", response.readEntity(String.class));\n+    }\n+\n+    @Test\n+    public void shouldReturnNoContentOnNull() {\n+        SyncResource resource = target(SyncResource.class);\n+        String message = resource.empty();\n+\n+        assertEquals(\"\", message);\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void shouldHandleError() {\n+        SyncResource resource = target(SyncResource.class);\n+        String message = resource.error();\n+\n+        assertEquals(\"\", message);\n+    }\n+\n+    @Test\n+    public void shouldReturnJsonContent() {\n+        SyncResource resource = target(SyncResource.class);\n+        Entity entity = resource.json(\"message\");\n+\n+        assertEquals(\"message\", entity.message);\n+    }\n+\n+\n+    @Path(\"/endpoint\")\n+    public interface SyncResource {\n+\n+        @GET\n+        @Path(\"echo\")\n+        Response echo(@QueryParam(\"message\") String message);\n+\n+        @GET\n+        @Path(\"empty\")\n+        String empty();\n+\n+        @GET\n+        @Path(\"error\")\n+        String error();\n+\n+        @GET\n+        @Path(\"json\")\n+        Entity json(@QueryParam(\"message\") String message);\n+    }\n+\n+}"
  }
]
