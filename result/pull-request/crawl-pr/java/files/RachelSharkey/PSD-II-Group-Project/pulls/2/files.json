[
  {
    "sha": "d2558d721280b6924eb2eb4fda45c20f5cd89348",
    "filename": "BattleShots2.0",
    "status": "added",
    "additions": 353,
    "deletions": 0,
    "changes": 353,
    "blob_url": "https://github.com/RachelSharkey/PSD-II-Group-Project/blob/8aebdc812fb2959a859f5acc125b977284194886/BattleShots2.0",
    "raw_url": "https://github.com/RachelSharkey/PSD-II-Group-Project/raw/8aebdc812fb2959a859f5acc125b977284194886/BattleShots2.0",
    "contents_url": "https://api.github.com/repos/RachelSharkey/PSD-II-Group-Project/contents/BattleShots2.0?ref=8aebdc812fb2959a859f5acc125b977284194886",
    "patch": "@@ -0,0 +1,353 @@\n+import javax.swing.*;//for JOption\n+import java.text.DecimalFormat;//for headings not completely necessary\n+import java.util.InputMismatchException;//checking for error(try-catch)\n+import java.util.Scanner;//for keyboard input\n+import javax.swing.ImageIcon;//for importing pictures\n+\n+import static java.lang.Character.toUpperCase;//for changing input to capital\n+\n+/**\n+ * Created by MarkC on 04/03/2021\n+ * this prototype introduces the program JOption\n+ **/\n+public class BattleShots2\n+\n+{\n+   public static Scanner keyboard = new Scanner(System.in);//scanner class for user input during testing\n+   public static DecimalFormat df = new DecimalFormat(\"\");// headings keep printing with .0, reason unknown\n+   public static ImageIcon faceplant = new ImageIcon(\"faceplant.jpeg\");//import error image\n+\n+\n+   public static void battleshotsStart()\n+   {\n+      char[] letters = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'};//String array for grid position\n+      int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};//int array for Y axis\n+      int[][] battleShots2 = makeBoard(letters, numbers);\n+      ImageIcon ship = new ImageIcon(\"download.jpeg\");//import ship image\n+      ImageIcon simpson = new ImageIcon(\"Simpson.peg\");//import simpson image\n+      //welcome window message box\n+      JOptionPane.showMessageDialog(null, \"Welcome to BattleShot 2.0\\nTake turns in firing by \" +\n+            \"calling out plot \\npoints on the grid, Who ever has the most points at the end wins\\n\" +\n+            \"Please Drink responsibly\", \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, ship);\n+\n+\n+      int rounds = createRounds();//calling rounds method\n+\n+      if (rounds > 0)//if loop giving opportunity to leave this game\n+      {\n+\n+         int noOfPlayers = createNoOfPlayers();// for numbers of players\n+         String[] names = createPlayerNames(noOfPlayers);//calling naming players method\n+         int[] score = new int[noOfPlayers];//creating score array\n+\n+         ImageIcon excited = new ImageIcon(\"excited.jpeg\");//import ship image\n+         JOptionPane.showMessageDialog(null, \"********Alright then****\" +\n+                     \" \\n ***Lets play MINEFIELD******\", \"BattleShots 2.0\"\n+               , JOptionPane.INFORMATION_MESSAGE,excited);//Game time box\n+\n+         //for loop for the amount of rounds to be played\n+         for (int a = 0; a < rounds; a++)\n+         {\n+            JOptionPane.showMessageDialog(null, \"******Round \" + (a + 1) +\n+                  \"*********\", \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, ship);//round number heading using a index\n+\n+            for (int x = 0; x < noOfPlayers; x++)\n+            {\n+               char letterIndex = 0;\n+               int numberIndex = 0;\n+\n+               String ans = JOptionPane.showInputDialog(null, names[x] +\n+                     \" please pick a letter between A - I and a number \" +\n+                     \"between 1 and 9\", \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE);\n+               //user picks their box\n+               try\n+               {\n+                  letterIndex = ans.charAt(0);//letter for index for grid search\n+                  letterIndex = toUpperCase(letterIndex);//encase user does not use capital letter\n+                  numberIndex = Character.getNumericValue(ans.charAt(1));//number index for grid search\n+               } catch (NumberFormatException | StringIndexOutOfBoundsException errorQ3)\n+               {\n+                  JOptionPane.showMessageDialog(null, \"Silly billy\\ninput must\" +\n+                              \"consist of a letter and a number\", \"BattleShots 2.0\",\n+                        JOptionPane.INFORMATION_MESSAGE, faceplant);\n+               }\n+               //image imports\n+               ImageIcon shot = new ImageIcon(\"shot.jpeg\");//import shot image\n+               ImageIcon pint1 = new ImageIcon(\"pint1.jpeg\");//import pint image\n+               ImageIcon spin = new ImageIcon(\"Spin.jpeg\");//import spin image\n+               ImageIcon downPint = new ImageIcon(\"downpint.jpeg\");//import pint2 image\n+               ImageIcon lucky = new ImageIcon(\"lucky.jpeg\");//import luck image\n+               ImageIcon jackpot = new ImageIcon(\"Jackpot.jpeg\");//import lucky image\n+\n+\n+               boolean found = false, found2 = false;\n+               int index = 0;\n+               int L = 0;\n+               int N = 0;\n+               int result;\n+\n+               while (!(found) && (index < letters.length))\n+                  for (int i = 0; i < letters.length; i++)\n+                  {\n+                     if (letters[i] == letterIndex)\n+                     {\n+                        found = true;\n+                        L = i;\n+                     }//if to find days array index\n+                     for (int p = 0; p < numbers.length; p++)\n+                        if (numbers[p] == numberIndex)\n+                        {\n+                           found2 = true;\n+                           N = p;\n+                        }//loop to find time array index\n+                     index++;\n+                  }\n+\n+               if (found && found2)\n+               {\n+                  result = battleShots2[L][N];\n+\n+                  switch (result)\n+                  {\n+                     case (1):\n+                        JOptionPane.showMessageDialog(null, \"Shot time baby\\nWith 5 points\"\n+                              , \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, shot);\n+                        score[x] = score[x] + 5;\n+                        break;\n+\n+                     case (2):\n+                        JOptionPane.showMessageDialog(null, \"Down 3 fingers for 3 points\"\n+                              , \"Battle Shots\", JOptionPane.INFORMATION_MESSAGE, pint1);\n+                        score[x] = score[x] + 3;\n+                        break;\n+\n+                     case (3):\n+                        JOptionPane.showMessageDialog(null, \"Stand up and do 3 spins !!!!\\n\" +\n+                                    \"That will be 7 points for you\", \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE,\n+                              spin);\n+                        score[x] = score[x] + 7;\n+                        break;\n+\n+                     case (4):\n+\n+                        JOptionPane.showMessageDialog(null, \"Down whats left in your glass\\n\" +\n+                              \"Its Worth 12 points\", \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, downPint);\n+                        score[x] = score[x] + 12;\n+                        System.out.println();\n+                        break;\n+\n+                     case (5):\n+\n+                        JOptionPane.showMessageDialog(null, \"****** 10 POINT BONUS ******\\n\" +\n+                              \"You got lucky this time\", \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, lucky);\n+                        score[x] = score[x] + 10;\n+                        break;\n+                     case (6):\n+\n+                        JOptionPane.showMessageDialog(null, \"********JACKPOT*******\" +\n+                              \"\\n************************\\n****30 POINT BONUS****\\n************************\\n\" +\n+                              \"************************\", \"BattleShots 2.0\", JOptionPane.\n+                              INFORMATION_MESSAGE, jackpot);\n+                        score[x] = score[x] + 30;\n+\n+                  }//Switch statement for results\n+\n+               }//if both values are found\n+               else\n+               {\n+                  JOptionPane.showMessageDialog(null, \"Selection not available\\n\" +\n+                              \"Minus 10 points for being a silly billy \"\n+                        , \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, faceplant);\n+                  score[x] = score[x] - 10;\n+                  System.out.println();\n+               }//if one of the values is missing or incorrect input\n+            }\n+         }\n+         gameResults(noOfPlayers, score, names);//Calling results\n+      } else\n+      {\n+         ImageIcon sad = new ImageIcon(\"sad.jpeg\");//import sad image\n+         JOptionPane.showMessageDialog(null, \"AWWWWWWW\\nOk see you later\"\n+               , \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, sad);//if user decides to leave\n+      }\n+      ImageIcon thumbs = new ImageIcon(\"thumbs.jpeg\");//import nerv image\n+      JOptionPane.showMessageDialog(null, \"Thanks for playing\\n\" +\n+            \"Please Drink responsibly\", \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, thumbs);\n+\n+   }//main\n+\n+   public static int createRounds()\n+   {\n+      int rounds = 0;\n+      boolean pass = false;\n+      do\n+      {\n+         try\n+         {\n+            rounds = Integer.parseInt(JOptionPane.showInputDialog(null,\n+                  \"How many rounds would you like to play or type 0 to leave : \",\n+                  \"Battle Shots\", JOptionPane.INFORMATION_MESSAGE));//Question for amount of rounds\n+            if (rounds >= 0)\n+            {\n+               pass = true;\n+            } else\n+            {\n+               JOptionPane.showMessageDialog(null,\n+                     \"Input must be 0 or more. Click ok to try again\",\n+                     \"Battle Shots\", JOptionPane.INFORMATION_MESSAGE, faceplant);//if input rounds less than 0\n+            }\n+\n+         } catch (NumberFormatException | InputMismatchException errorQ2)\n+         {\n+            JOptionPane.showMessageDialog(null, \"You must \" +\n+                        \"input a number eg. 5, Press enter to try again\", \"Battle Shots\",\n+                  JOptionPane.INFORMATION_MESSAGE, faceplant);//if letter is put ino rounds box\n+            pass = false;\n+         }\n+      }\n+      while (!pass);\n+\n+      return rounds;\n+\n+   }//method for creating the amount of rounds\n+\n+   public static int[][] makeBoard(char[] letters, int[] numbers)\n+   {\n+\n+\n+      final int COLUMNS = 9;//Final int for grid columns\n+      final int ROWS = 9;//Final int for grid rows\n+\n+\n+      int[][] battleShots2 = new int[COLUMNS][ROWS];//creating times 2d array\n+\n+      for (int row = 0; row < ROWS; row++)\n+      {\n+         for (int column = 0; column < COLUMNS; column++)\n+         {\n+            battleShots2[row][column] = (int) ((Math.random() * 5) + 1);//code to ensure game board is different each time\n+            battleShots2[(int) (Math.random() + 1)][(int) (Math.random() + 1)] = 6;//For 1 6 in random spot on board\n+         }\n+      }//nested for loop to fill grid\n+//code if you need to print to screen for testing\n+     /** for (double num : numbers)\n+      {\n+         System.out.print(\"\\t\");\n+         System.out.print(df.format(num));\n+      }//printing the number heading to screen numbers at top of grid\n+\n+      System.out.println();\n+\n+      for (int row = 0; row < ROWS; row++)\n+      {\n+         System.out.print(letters[row]);\n+         for (int column = 0; column < COLUMNS; column++)\n+         {\n+            System.out.print(\"\\t\" + battleShots2[row][column]);\n+         }\n+         System.out.println();\n+      }//for loop printing mineSweeper game to screen to screen\n+**/\n+\n+      //create rounds\n+      return battleShots2;\n+\n+   }//method to create game board\n+\n+   public static int createNoOfPlayers()\n+   {\n+\n+      boolean pass = false;\n+      int noOfPlayers = 0;// for numbers of players\n+\n+      do\n+      {\n+         try\n+         {\n+            noOfPlayers = Integer.parseInt(JOptionPane.showInputDialog(null,\n+                  \"Please enter number of players : \", \"Battle Shots\", JOptionPane.INFORMATION_MESSAGE));\n+            if (noOfPlayers > 0)\n+            {\n+               pass = true;\n+            } else\n+            {\n+               JOptionPane.showMessageDialog(null,\n+                     \"Input must be 0 or more.\", \"Battle Shots\", JOptionPane.INFORMATION_MESSAGE, faceplant);\n+            }\n+         } catch (NumberFormatException | InputMismatchException errorQ2)\n+         {\n+            JOptionPane.showMessageDialog(null, \"You must input a \" +\n+                  \"number eg. 7 \", \"Battle Shots\", JOptionPane.INFORMATION_MESSAGE, faceplant);\n+\n+            pass = false;\n+         }\n+      }\n+      while (!pass);\n+      return noOfPlayers;\n+   }//method to get number of players\n+\n+   public static String[] createPlayerNames(int noOfPlayers)\n+   {\n+      String[] names = new String[noOfPlayers]; // creating names array\n+      for (int i = 0; i < names.length; i++)\n+      {\n+         names[i] = JOptionPane.showInputDialog(null,\n+               \"Please enter player \" + (i + 1) + \"'s name : \", \"Battle Shots\"\n+               , JOptionPane.INFORMATION_MESSAGE);\n+      }\n+\n+      return names;\n+\n+   }//method for getting names\n+\n+   public static void gameResults(int noOfPlayers, int[] score, String[] names)\n+   {\n+      ImageIcon nerv = new ImageIcon(\"Nerv.jpeg\");//import nerv image\n+      JOptionPane.showMessageDialog(null, \"\" +\n+                  \"Thanks the end of the rounds\\nand the results are in ............\",\n+            \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, nerv);\n+      //Printing box to screen preparing for winner notice\n+      int winner = score[0];\n+      int winnerIndex = 0;\n+      int count = -1;//count for draw loop\n+\n+      for (int i = 0; i < noOfPlayers; i++)\n+      {\n+         if (score[i] > winner)\n+         {\n+            winner = score[i];\n+            winnerIndex = i;\n+            count = 0;\n+\n+         } else if (score[i] == winner)\n+         {\n+            count++;//draw check\n+         }\n+      }//for loop to calculate winner\n+      ImageIcon simpson = new ImageIcon(\"simpson.jpeg\");//import lucky image\n+      if (count > 0)\n+      {\n+\n+         JOptionPane.showMessageDialog(null, \"We have a draw\",\n+               \"BattleShots 2.0\", JOptionPane.INFORMATION_MESSAGE, simpson);\n+      }//print if draw\n+      else\n+      {\n+         JOptionPane.showMessageDialog(null, \"And the winner is ..\" +\n+               \"........\\n\" + (names[winnerIndex]), \"Battle Shots\", JOptionPane.INFORMATION_MESSAGE, simpson);\n+      }//print if only 1 winner\n+\n+      ImageIcon party = new ImageIcon(\"party.jpeg\");//import lucky image\n+      String toBeDisplayed = \"\";\n+      for (int out = 0; out < noOfPlayers; out++)\n+      {\n+         toBeDisplayed += names[out] + \"'s score was \" + score[out] + \"\\n\";\n+      }// Make list of scores\n+\n+\n+      JOptionPane.showMessageDialog(null, toBeDisplayed\n+            + \"\\n\", \"The Final Scores\", JOptionPane.INFORMATION_MESSAGE, party);\n+      //printing out list of scores\n+\n+   }//Results method\n+}"
  }
]
