[
  {
    "sha": "1838ffa52a1008f351a10638e8b0181dce7270de",
    "filename": "README.md",
    "status": "modified",
    "additions": 84,
    "deletions": 2,
    "changes": 86,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/README.md",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/README.md",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/README.md?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -240,6 +240,9 @@ onelogin.saml2.sp.x509certNew =\n # If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem\n onelogin.saml2.sp.privatekey =\n \n+# Attribute Consuming Services\n+# SEE BELOW\n+\n ## Identity Provider Data that we want connect with our SP ##\n \n # Identifier of the IdP entity  (must be a URI)\n@@ -476,9 +479,88 @@ The getSPMetadata will return the metadata signed or not based on the security p\n \n Before the XML metadata is exposed, a check takes place to ensure that the info to be provided is valid.\n \n-##### Attribute Consumer Service(ACS)\n-This code handles the SAML response that the IdP forwards to the SP through the user's client.\n+##### Attribute Consuming Service (ACS)\n+The SP may optionally specify one or more Attribute Consuming Services in its metadata. These can be configured in the settings.\n+\n+If just one ACS is required:\n+\n+```properties\n+# Attribute Consuming Service name when just one ACS should be declared by the SP.\n+# Comment out or set to empty if no ACS should be declared, or if multiple ones should (see below). \n+# The service name is mandatory.\n+onelogin.saml2.sp.attribute_consuming_service.name = My service\n+\n+# Attribute Consuming Service description when just one ACS should be declared by the SP.\n+# Ignored if the previous property is commented or empty. \n+# The service description is optional.\n+onelogin.saml2.sp.attribute_consuming_service.description = My service description\n+\n+# Language used for Attribute Consuming Service name and description when just one ACS should be declared by the SP.\n+# Ignored if the name property is commented or empty. \n+# The language is optional and default to \"en\" (English).\n+onelogin.saml2.sp.attribute_consuming_service.lang = en\n+\n+# Requested attributes to be included in the Attribute Consuming Service when just one ACS should be declared by the SP.\n+# At least one requested attribute must be specified, otherwise schema validation will fail.\n+# Attribute properties are indexed properties, starting from 0. The index is used only to enumerate and sort attributes, but it's required.\n+# The following properties allow to define each requested attribute:\n+# - name: mandatory\n+# - name_format: optional; if omitted, defaults to urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\n+# - friendly_name: optional; if omitted, it won't appear in SP metadata\n+# - required: optional; if omitted or empty, defaults to false\n+# - value[x]: an attribute value; the [x] is only used only to enumerate and sort values, but it's required\n+# Please note that only simple values are currently supported and treated internally as strings. Hence no structured values\n+# and no ability to specify an xsi:type attribute. \n+# Attribute values are optional and most often they are simply omitted.\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].name = Email\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].name_format = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].friendly_name = E-mail address\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].required = true\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].value[0] = foo@example.org\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].value[1] = bar@example.org\n+```\n+\n+If multiple ACSs are required, they can be specified in a similar way, but using indexes: these indexes are used to enumerate and\n+identify attribute consuming services within the SP metadata and can be subsequently used in the auth process to specify which\n+attribute set should be requested to the IdP. The \"default\" property can also be set to designate the default ACS. Here is an example:\n+\n+```properties\n+onelogin.saml2.sp.attribute_consuming_service[0].name = Just e-mail\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].name = Email\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].name_format = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].friendly_name = E-mail address\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].required = true\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].value[0] = foo@example.org\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].value[1] = bar@example.org\n+onelogin.saml2.sp.attribute_consuming_service[1].name = Anagrafica\n+onelogin.saml2.sp.attribute_consuming_service[1].description = Set completo\n+onelogin.saml2.sp.attribute_consuming_service[1].lang = it\n+onelogin.saml2.sp.attribute_consuming_service[1].default = true\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[0].name = FirstName\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[1].name = LastName\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[1].required = true\n+```\n+\n+Please note that if you specify (multiple) indexed Attribute Consuming Services, the non-indexed properties will be ignored.\n+\n+As said, to request a specific attribute set when initiating SSO, a selection mechanism is available:\n+\n+```java\n+import static com.onelogin.saml2.authn.AttributeConsumingServiceSelector.*;\n+Auth auth = new Auth(request, response);\n+// select by index 1\n+auth.login(new AuthnRequestParams(false, false, true, byIndex(1));\n+// or select by ACS name\n+auth.login(new AuthnRequestParams(false, false, true, byServiceName(auth.getSettings(), \"Anagrafica\"));\n+// or see AttributeConsumingServiceSelector interface implementations for more options\n ```\n+\n+If no selector is specified, `AttributeConsumingServiceSelector.useDefault()` will be used, which will simply omit any\n+`AttributeConsumingServiceIndex` from the request, hence leaving the IdP choose the default attribute set agreed upon.\n+\n+Then, the following code handles the SAML response that the IdP forwards to the SP through the user's client:\n+\n+```java\n Auth auth = new Auth(request, response);\n auth.processResponse();\n if (!auth.isAuthenticated()) {"
  },
  {
    "sha": "1a478ed3569de0f12aa700416aeeb5c2bbe87b8f",
    "filename": "core/src/main/java/com/onelogin/saml2/authn/AttributeConsumingServiceSelector.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/authn/AttributeConsumingServiceSelector.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/authn/AttributeConsumingServiceSelector.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/main/java/com/onelogin/saml2/authn/AttributeConsumingServiceSelector.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -0,0 +1,75 @@\n+package com.onelogin.saml2.authn;\n+\n+import java.util.List;\n+\n+import com.onelogin.saml2.model.AttributeConsumingService;\n+import com.onelogin.saml2.settings.Saml2Settings;\n+\n+/**\n+ * Interfaced used to select the Attribute Consuming Service to be specified in\n+ * an authentication request. An instance of this interface can be passed as an\n+ * input parameter in a {@link AuthnRequestParams} to be used when initiating a\n+ * login operation.\n+ * <p>\n+ * A set of predefined implementations are provided: they should cover the most\n+ * common cases.\n+ */\n+@FunctionalInterface\n+public interface AttributeConsumingServiceSelector {\n+\n+\t/**\n+\t * @return a selector of the default Attribute Consuming Service\n+\t */\n+\tstatic AttributeConsumingServiceSelector useDefault() {\n+\t\treturn () -> null;\n+\t}\n+\n+\t/**\n+\t * @param attributeConsumingService\n+\t *              the Attribute Consuming Service to select\n+\t * @return a selector the chooses the specified Attribute Consuming Service;\n+\t *         indeed, its index is used\n+\t */\n+\tstatic AttributeConsumingServiceSelector use(final AttributeConsumingService attributeConsumingService) {\n+\t\treturn byIndex(attributeConsumingService.getIndex());\n+\t}\n+\n+\t/**\n+\t * @param index\n+\t *              the index of the Attribute Consuming Service to select\n+\t * @return a selector that chooses the Attribute Consuming Service with the\n+\t *         given index\n+\t */\n+\tstatic AttributeConsumingServiceSelector byIndex(final int index) {\n+\t\treturn () -> index;\n+\t}\n+\n+\t/**\n+\t * @param settings\n+\t *              the SAML settings, containing the list of the available\n+\t *              Attribute Consuming Services (see\n+\t *              {@link Saml2Settings#getSpAttributeConsumingServices()})\n+\t * @param serviceName\n+\t *              the name of the Attribute Consuming Service to select\n+\t * @return a selector that chooses the Attribute Consuming Service with the\n+\t *         given name; please note that this selector will select the default\n+\t *         service if no one is found with the given name\n+\t */\n+\tstatic AttributeConsumingServiceSelector byServiceName(final Saml2Settings settings, final String serviceName) {\n+\t\treturn () -> {\n+\t\t\tfinal List<AttributeConsumingService> services = settings.getSpAttributeConsumingServices();\n+\t\t\tif (services != null)\n+\t\t\t\treturn services.stream().filter(service -> service.getServiceName().equals(serviceName))\n+\t\t\t\t            .findFirst().map(AttributeConsumingService::getIndex).orElse(null);\n+\t\t\telse\n+\t\t\t\treturn null;\n+\t\t};\n+\t}\n+\n+\t/**\n+\t * Returns the index of the selected Attribute Consuming Service.\n+\t * \n+\t * @return the service index, or <code>null</code> if the default one should be selected\n+\t */\n+\tInteger getAttributeConsumingServiceIndex();\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7d3928aa1762e86398fe9dac3bbc81264d25f4db",
    "filename": "core/src/main/java/com/onelogin/saml2/authn/AuthnRequest.java",
    "status": "modified",
    "additions": 51,
    "deletions": 46,
    "changes": 97,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/authn/AuthnRequest.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/authn/AuthnRequest.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/main/java/com/onelogin/saml2/authn/AuthnRequest.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -21,7 +21,7 @@\n  *\n  * A class that implements SAML 2 Authentication Request\n  */\n-public class AuthnRequest {\n+public class AuthnRequest extends AuthnRequestParams {\n \t/**\n      * Private property to construct a logger for this class.\n      */\n@@ -42,26 +42,6 @@\n      */\n \tprivate final Saml2Settings settings;\n \n-\t/**\n-\t * When true the AuthNRequest will set the ForceAuthn='true'\n-\t */\n-\tprivate final boolean forceAuthn;\n-\n-\t/**\n-\t * When true the AuthNRequest will set the IsPassive='true'\n-\t */\n-\tprivate final boolean isPassive;\n-\n-\t/**\n-\t * When true the AuthNReuqest will set a nameIdPolicy\n-\t */\n-\tprivate final boolean setNameIdPolicy;\n-\n-\t/**\n-\t * Indicates to the IdP the subject that should be authenticated\n-\t */\n-\tprivate final String nameIdValueReq;\n-\t\n \t/**\n \t * Time stamp that indicates when the AuthNRequest was created\n \t */\n@@ -81,46 +61,64 @@ public AuthnRequest(Saml2Settings settings) {\n \t * Constructs the AuthnRequest object.\n \t *\n \t * @param settings\n-\t *            OneLogin_Saml2_Settings\n+\t *              OneLogin_Saml2_Settings\n \t * @param forceAuthn\n-\t *            When true the AuthNReuqest will set the ForceAuthn='true'\n+\t *              When true the AuthNReuqest will set the ForceAuthn='true'\n \t * @param isPassive\n-\t *            When true the AuthNReuqest will set the IsPassive='true'\n+\t *              When true the AuthNReuqest will set the IsPassive='true'\n \t * @param setNameIdPolicy\n-\t *            When true the AuthNReuqest will set a nameIdPolicy\n+\t *              When true the AuthNReuqest will set a nameIdPolicy\n \t * @param nameIdValueReq\n-\t *            Indicates to the IdP the subject that should be authenticated\n+\t *              Indicates to the IdP the subject that should be authenticated\n+\t * @deprecated use {@link #AuthnRequest(Saml2Settings, AuthnRequestParams)} with\n+\t *             {@link AuthnRequestParams#AuthnRequestParams(boolean, boolean, boolean, String)}\n+\t *             instead\n \t */\n+\t@Deprecated\n \tpublic AuthnRequest(Saml2Settings settings, boolean forceAuthn, boolean isPassive, boolean setNameIdPolicy, String nameIdValueReq) {\n-\t\tthis.id = Util.generateUniqueID(settings.getUniqueIDPrefix());\n-\t\tissueInstant = Calendar.getInstance();\n-\t\tthis.isPassive = isPassive;\n-\t\tthis.settings = settings;\n-\t\tthis.forceAuthn = forceAuthn;\n-\t\tthis.setNameIdPolicy = setNameIdPolicy;\n-\t\tthis.nameIdValueReq = nameIdValueReq;\n-\n-\t\tStrSubstitutor substitutor = generateSubstitutor(settings);\n-\t\tauthnRequestString = substitutor.replace(getAuthnRequestTemplate());\n-\t\tLOGGER.debug(\"AuthNRequest --> \" + authnRequestString);\n+\t\tthis(settings, new AuthnRequestParams(forceAuthn, isPassive, setNameIdPolicy, nameIdValueReq));\n \t}\n-\n+\t\n \t/**\n \t * Constructs the AuthnRequest object.\n \t *\n \t * @param settings\n-\t *            OneLogin_Saml2_Settings\n+\t *              OneLogin_Saml2_Settings\n \t * @param forceAuthn\n-\t *            When true the AuthNReuqest will set the ForceAuthn='true'\n+\t *              When true the AuthNReuqest will set the ForceAuthn='true'\n \t * @param isPassive\n-\t *            When true the AuthNReuqest will set the IsPassive='true'\n+\t *              When true the AuthNReuqest will set the IsPassive='true'\n \t * @param setNameIdPolicy\n-\t *            When true the AuthNReuqest will set a nameIdPolicy\n+\t *              When true the AuthNReuqest will set a nameIdPolicy\n+\t * @deprecated use {@link #AuthnRequest(Saml2Settings, AuthnRequestParams)} with\n+\t *             {@link AuthnRequestParams#AuthnRequestParams(boolean, boolean, boolean)}\n+\t *             instead\n \t */\n+\t@Deprecated\n \tpublic AuthnRequest(Saml2Settings settings, boolean forceAuthn, boolean isPassive, boolean setNameIdPolicy) {\n \t\tthis(settings, forceAuthn, isPassive, setNameIdPolicy, null);\n \t}\n \n+\t/**\n+\t * Constructs the AuthnRequest object.\n+\t *\n+\t * @param settings\n+\t *              OneLogin_Saml2_Settings\n+\t * @param params\n+\t *              a set of authentication request input parameters that shape the\n+\t *              request to create\n+\t */\n+\tpublic AuthnRequest(Saml2Settings settings, AuthnRequestParams params) {\n+\t\tsuper(params);\n+\t\tthis.id = Util.generateUniqueID(settings.getUniqueIDPrefix());\n+\t\tissueInstant = Calendar.getInstance();\n+\t\tthis.settings = settings;\n+\n+\t\tStrSubstitutor substitutor = generateSubstitutor(settings);\n+\t\tauthnRequestString = substitutor.replace(getAuthnRequestTemplate());\n+\t\tLOGGER.debug(\"AuthNRequest --> \" + authnRequestString);\n+\t}\n+\n \t/**\n \t * @return the base64 encoded unsigned AuthnRequest (deflated or not)\n \t *\n@@ -171,12 +169,12 @@ private StrSubstitutor generateSubstitutor(Saml2Settings settings) {\n \t\tMap<String, String> valueMap = new HashMap<String, String>();\n \n \t\tString forceAuthnStr = \"\";\n-\t\tif (forceAuthn) {\n+\t\tif (isForceAuthn()) {\n \t\t\tforceAuthnStr = \" ForceAuthn=\\\"true\\\"\";\n \t\t}\n \n \t\tString isPassiveStr = \"\";\n-\t\tif (isPassive) {\n+\t\tif (isPassive()) {\n \t\t\tisPassiveStr = \" IsPassive=\\\"true\\\"\";\n \t\t}\n \n@@ -191,6 +189,7 @@ private StrSubstitutor generateSubstitutor(Saml2Settings settings) {\n \t\tvalueMap.put(\"destinationStr\", destinationStr);\n \n \t\tString subjectStr = \"\";\n+\t\tString nameIdValueReq = getNameIdValueReq();\n \t\tif (nameIdValueReq != null && !nameIdValueReq.isEmpty()) {\n \t\t\tString nameIDFormat = settings.getSpNameIDFormat();\n \t\t\tsubjectStr = \"<saml:Subject>\";\n@@ -201,7 +200,7 @@ private StrSubstitutor generateSubstitutor(Saml2Settings settings) {\n         valueMap.put(\"subjectStr\", subjectStr);\n \n \t\tString nameIDPolicyStr = \"\";\n-\t\tif (setNameIdPolicy) {\n+\t\tif (isSetNameIdPolicy()) {\n \t\t\tString nameIDPolicyFormat = settings.getSpNameIDFormat();\n \t\t\tif (settings.getWantNameIdEncrypted()) {\n \t\t\t\tnameIDPolicyFormat = Constants.NAMEID_ENCRYPTED;\n@@ -239,6 +238,12 @@ private StrSubstitutor generateSubstitutor(Saml2Settings settings) {\n \t\t}\n \n \t\tvalueMap.put(\"requestedAuthnContextStr\", requestedAuthnContextStr);\n+\t\t\n+\t\tString attributeConsumingServiceIndexStr = \"\";\n+\t\tfinal Integer acsIndex = getAttributeConsumingServiceSelector().getAttributeConsumingServiceIndex();\n+\t\tif (acsIndex != null)\n+\t\t\tattributeConsumingServiceIndexStr = \" AttributeConsumingServiceIndex=\\\"\" + acsIndex + \"\\\"\";\n+\t\tvalueMap.put(\"attributeConsumingServiceIndexStr\", attributeConsumingServiceIndexStr);\n \n \t\treturn new StrSubstitutor(valueMap);\n \t}\n@@ -248,7 +253,7 @@ private StrSubstitutor generateSubstitutor(Saml2Settings settings) {\n \t */\n \tprivate static StringBuilder getAuthnRequestTemplate() {\n \t\tStringBuilder template = new StringBuilder();\n-\t\ttemplate.append(\"<samlp:AuthnRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" ID=\\\"${id}\\\" Version=\\\"2.0\\\" IssueInstant=\\\"${issueInstant}\\\"${providerStr}${forceAuthnStr}${isPassiveStr}${destinationStr} ProtocolBinding=\\\"${protocolBinding}\\\" AssertionConsumerServiceURL=\\\"${assertionConsumerServiceURL}\\\">\");\n+\t\ttemplate.append(\"<samlp:AuthnRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" ID=\\\"${id}\\\" Version=\\\"2.0\\\" IssueInstant=\\\"${issueInstant}\\\"${providerStr}${forceAuthnStr}${isPassiveStr}${destinationStr} ProtocolBinding=\\\"${protocolBinding}\\\" AssertionConsumerServiceURL=\\\"${assertionConsumerServiceURL}${attributeConsumingServiceIndexStr}\\\">\");\n \t\ttemplate.append(\"<saml:Issuer>${spEntityid}</saml:Issuer>\");\n \t\ttemplate.append(\"${subjectStr}${nameIDPolicyStr}${requestedAuthnContextStr}</samlp:AuthnRequest>\");\n \t\treturn template;"
  },
  {
    "sha": "ac4fead0cd3f9ff6ee94deda088200d2a26a321b",
    "filename": "core/src/main/java/com/onelogin/saml2/authn/AuthnRequestParams.java",
    "status": "added",
    "additions": 169,
    "deletions": 0,
    "changes": 169,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/authn/AuthnRequestParams.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/authn/AuthnRequestParams.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/main/java/com/onelogin/saml2/authn/AuthnRequestParams.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -0,0 +1,169 @@\n+package com.onelogin.saml2.authn;\n+\n+/**\n+ * Input parameters for a SAML 2 authentication request.\n+ */\n+public class AuthnRequestParams {\n+\n+\t/**\n+\t * When true the AuthNRequest will set the ForceAuthn='true'\n+\t */\n+\tprivate final boolean forceAuthn;\n+\t/**\n+\t * When true the AuthNRequest will set the IsPassive='true'\n+\t */\n+\tprivate final boolean isPassive;\n+\t/**\n+\t * When true the AuthNReuqest will set a nameIdPolicy\n+\t */\n+\tprivate final boolean setNameIdPolicy;\n+\t/**\n+\t * Indicates to the IdP the subject that should be authenticated\n+\t */\n+\tprivate final String nameIdValueReq;\n+\n+\t/*\n+\t * / Selector to use to specify the Attribute Consuming Service index\n+\t */\n+\tprivate AttributeConsumingServiceSelector attributeConsumingServiceSelector;\n+\n+\t/**\n+\t * Create a set of authentication request input parameters. The\n+\t * {@link AttributeConsumingServiceSelector#useDefault()} selector is used to\n+\t * select the Attribute Consuming Service.\n+\t *\n+\t * @param forceAuthn\n+\t *              whether the <code>ForceAuthn</code> attribute should be set to\n+\t *              <code>true</code>\n+\t * @param isPassive\n+\t *              whether the <code>isPassive</code> attribute should be set to\n+\t *              <code>true</code>\n+\t * @param setNameIdPolicy\n+\t *              whether a <code>NameIDPolicy</code> should be set\n+\t */\n+\tpublic AuthnRequestParams(boolean forceAuthn, boolean isPassive, boolean setNameIdPolicy) {\n+\t\tthis(forceAuthn, isPassive, setNameIdPolicy, null, null);\n+\t}\n+\n+\t/**\n+\t * Create a set of authentication request input parameters. The\n+\t * {@link AttributeConsumingServiceSelector#useDefault()} selector is used to\n+\t * select the Attribute Consuming Service.\n+\t *\n+\t * @param forceAuthn\n+\t *              whether the <code>ForceAuthn</code> attribute should be set to\n+\t *              <code>true</code>\n+\t * @param isPassive\n+\t *              whether the <code>isPassive</code> attribute should be set to\n+\t *              <code>true</code>\n+\t * @param setNameIdPolicy\n+\t *              whether a <code>NameIDPolicy</code> should be set\n+\t * @param nameIdValueReq\n+\t *              the subject that should be authenticated\n+\t */\n+\tpublic AuthnRequestParams(boolean forceAuthn, boolean isPassive, boolean setNameIdPolicy, String nameIdValueReq) {\n+\t\tthis(forceAuthn, isPassive, setNameIdPolicy, nameIdValueReq, null);\n+\t}\n+\n+\t/**\n+\t * Create a set of authentication request input parameters.\n+\t *\n+\t * @param forceAuthn\n+\t *              whether the <code>ForceAuthn</code> attribute should be set to\n+\t *              <code>true</code>\n+\t * @param isPassive\n+\t *              whether the <code>isPassive</code> attribute should be set to\n+\t *              <code>true</code>\n+\t * @param setNameIdPolicy\n+\t *              whether a <code>NameIDPolicy</code> should be set\n+\t * @param attributeConsumingServiceSelector\n+\t *              the selector to use to specify the Attribute Consuming Service\n+\t *              index; if <code>null</code>,\n+\t *              {@link AttributeConsumingServiceSelector#useDefault()} is used\n+\t */\n+\tpublic AuthnRequestParams(boolean forceAuthn, boolean isPassive, boolean setNameIdPolicy,\n+\t            AttributeConsumingServiceSelector attributeConsumingServiceSelector) {\n+\t\tthis(forceAuthn, isPassive, setNameIdPolicy, null, attributeConsumingServiceSelector);\n+\t}\n+\n+\t/**\n+\t * Create a set of authentication request input parameters.\n+\t *\n+\t * @param forceAuthn\n+\t *              whether the <code>ForceAuthn</code> attribute should be set to\n+\t *              <code>true</code>\n+\t * @param isPassive\n+\t *              whether the <code>isPassive</code> attribute should be set to\n+\t *              <code>true</code>\n+\t * @param setNameIdPolicy\n+\t *              whether a <code>NameIDPolicy</code> should be set\n+\t * @param nameIdValueReq\n+\t *              the subject that should be authenticated\n+\t * @param attributeConsumingServiceSelector\n+\t *              the selector to use to specify the Attribute Consuming Service\n+\t *              index; if <code>null</code>,\n+\t *              {@link AttributeConsumingServiceSelector#useDefault()} is used\n+\t */\n+\tpublic AuthnRequestParams(boolean forceAuthn, boolean isPassive, boolean setNameIdPolicy, String nameIdValueReq,\n+\t            AttributeConsumingServiceSelector attributeConsumingServiceSelector) {\n+\t\tthis.forceAuthn = forceAuthn;\n+\t\tthis.isPassive = isPassive;\n+\t\tthis.setNameIdPolicy = setNameIdPolicy;\n+\t\tthis.nameIdValueReq = nameIdValueReq;\n+\t\tthis.attributeConsumingServiceSelector = attributeConsumingServiceSelector != null\n+\t\t            ? attributeConsumingServiceSelector\n+\t\t            : AttributeConsumingServiceSelector.useDefault();\n+\t}\n+\n+\t/**\n+\t * Create a set of authentication request input parameters, by copying them from\n+\t * another set.\n+\t *\n+\t * @param source\n+\t *              the source set of authentication request input parameters\n+\t */\n+\tprotected AuthnRequestParams(AuthnRequestParams source) {\n+\t\tthis.forceAuthn = source.isForceAuthn();\n+\t\tthis.isPassive = source.isPassive();\n+\t\tthis.setNameIdPolicy = source.isSetNameIdPolicy();\n+\t\tthis.nameIdValueReq = source.getNameIdValueReq();\n+\t\tthis.attributeConsumingServiceSelector = source.getAttributeConsumingServiceSelector();\n+\t}\n+\n+\t/**\n+\t * @return whether the <code>ForceAuthn</code> attribute should be set to\n+\t *         <code>true</code>\n+\t */\n+\tprotected boolean isForceAuthn() {\n+\t\treturn forceAuthn;\n+\t}\n+\n+\t/**\n+\t * @return whether the <code>isPassive</code> attribute should be set to\n+\t *         <code>true</code>\n+\t */\n+\tprotected boolean isPassive() {\n+\t\treturn isPassive;\n+\t}\n+\n+\t/**\n+\t * @return whether a <code>NameIDPolicy</code> should be set\n+\t */\n+\tprotected boolean isSetNameIdPolicy() {\n+\t\treturn setNameIdPolicy;\n+\t}\n+\n+\t/**\n+\t * @return the subject that should be authenticated\n+\t */\n+\tprotected String getNameIdValueReq() {\n+\t\treturn nameIdValueReq;\n+\t}\n+\n+\t/**\n+\t * @return the selector to use to specify the Attribute Consuming Service index\n+\t */\n+\tpublic AttributeConsumingServiceSelector getAttributeConsumingServiceSelector() {\n+\t\treturn attributeConsumingServiceSelector;\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3429bf932c8abb228d10c6f94c2221d527cda067",
    "filename": "core/src/main/java/com/onelogin/saml2/model/AttributeConsumingService.java",
    "status": "modified",
    "additions": 77,
    "deletions": 2,
    "changes": 79,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/model/AttributeConsumingService.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/model/AttributeConsumingService.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/main/java/com/onelogin/saml2/model/AttributeConsumingService.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -11,6 +11,14 @@\n  */\n public class AttributeConsumingService {\n \t/**\n+\t * Service Index\n+\t */\n+\tprivate final int index;\n+\t/**\n+\t * Whether this service is the default one\n+\t */\n+\tprivate final Boolean isDefault;\n+\t/**\n      * Service Name\n      */\n \tprivate final String serviceName;\n@@ -20,25 +28,71 @@\n      */\n \tprivate final String serviceDescription;\n \n+\t/**\n+\t * Language used for service name and description\n+\t */\n+\tprivate final String lang;\n+\n \t/**\n      * Requested Attributes\n      */\n \tprivate final List<RequestedAttribute> requestedAttributes;\n \n \t/**\n \t * Constructor\n-\t *\n+\t * \n+\t * @param index\n+\t *              int. Service index\n+\t * @param isDefault\n+\t *              boolean. Whether it's the default attribute consuming service\n \t * @param serviceName\n \t *              String. Service Name\n \t * @param serviceDescription\n \t *              String. Service Description\n+\t * @param lang\n+\t *              String. Language in which service name and description are\n+\t *              written; defaults to <code>en</code> if <code>null</code> is specified\n \t */\n-\tpublic AttributeConsumingService(String serviceName, String serviceDescription) {\n+\tpublic AttributeConsumingService(int index, Boolean isDefault, String serviceName, String serviceDescription, String lang) {\n+\t\tthis.index = index;\n+\t\tthis.isDefault = isDefault;\n \t\tthis.serviceName = serviceName != null? serviceName : \"\";\n \t\tthis.serviceDescription = serviceDescription != null? serviceDescription : \"\";\n+\t\tthis.lang = lang != null? lang: \"en\";\n \t\tthis.requestedAttributes = new ArrayList<RequestedAttribute>(); \n \t}\n \n+\t/**\n+\t * Constructor. Service name and description are assumed to be in English.\n+\t * \n+\t * @param index\n+\t *              int. Service index\n+\t * @param isDefault\n+\t *              boolean. Whether it's the default attribute consuming service\n+\t * @param serviceName\n+\t *              String. Service Name\n+\t * @param serviceDescription\n+\t *              String. Service Description\n+\t */\n+\tpublic AttributeConsumingService(int index, Boolean isDefault, String serviceName, String serviceDescription) {\n+\t\tthis(index, isDefault, serviceName, serviceDescription, null);\n+\t}\n+\n+\t/**\n+\t * Constructor for a non-default attribute consuming service with index <code>1</code>\n+\t * and service name and descriptions in English.\n+\t * Mainly kept for backward compatibility, this constructor can be used when an only\n+\t * attribute consuming service is required.\n+\t *\n+\t * @param serviceName\n+\t *              String. Service Name\n+\t * @param serviceDescription\n+\t *              String. Service Description\n+\t */\n+\tpublic AttributeConsumingService(String serviceName, String serviceDescription) {\n+\t\tthis(1, null, serviceName, serviceDescription, null);\n+\t}\n+\n \t/**\n \t * @param attr\n \t *              RequestedAttribute. The requested attribute to be included\n@@ -47,6 +101,20 @@ public final void addRequestedAttribute(RequestedAttribute attr) {\n \t\tthis.requestedAttributes.add(attr);\n \t}\n \t\n+\t/**\n+\t * @return int the service index\n+\t */\n+\tpublic final int getIndex() {\n+\t\t  return index;\n+\t}\n+\t\n+\t/**\n+\t * @return boolean whether this is the default attribute consuming service\n+\t */\n+\tpublic final Boolean isDefault() {\n+\t\t  return isDefault;\n+\t}\n+\t\n \t/**\n \t * @return string the service name\n \t */\n@@ -61,6 +129,13 @@ public final String getServiceDescription() {\n \t\treturn serviceDescription;\n \t}\n \n+\t/**\n+\t * @return string the language in which service name and description are written\n+\t */\n+\tpublic String getLang() {\n+\t\treturn lang;\n+\t}\n+\t\n \t/**\n \t * @return List the requested attributes\n \t */"
  },
  {
    "sha": "0c0c251e29f16dccbfe1142da21dd7e10675bec9",
    "filename": "core/src/main/java/com/onelogin/saml2/settings/Metadata.java",
    "status": "modified",
    "additions": 84,
    "deletions": 48,
    "changes": 132,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/settings/Metadata.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/settings/Metadata.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/main/java/com/onelogin/saml2/settings/Metadata.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -43,8 +43,11 @@\n \tprivate static final int SECONDS_CACHED = 604800; // 1 week\n \n \t/**\n-     * AttributeConsumingService\n-     */\n+\t * AttributeConsumingService\n+\t * \n+\t * @deprecated Attribute Consuming Services should be specified in settings\n+\t */\n+\t@Deprecated\n \tprivate AttributeConsumingService attributeConsumingService = null;\n \n \t/**\n@@ -70,7 +73,12 @@\n \t * @param cacheDuration             Duration of the cache in seconds\n \t * @param attributeConsumingService AttributeConsumingService of service provider\n \t * @throws CertificateEncodingException\n+\t * @deprecated Attribute Consuming Services should be specified in settings; if\n+\t *             a non-<code>null</code> service is specified here, it will be\n+\t *             used in place of the ones specified in settings to generate\n+\t *             metadata\n \t */\n+\t@Deprecated\n \tpublic Metadata(Saml2Settings settings, Calendar validUntilTime, Integer cacheDuration, AttributeConsumingService attributeConsumingService) throws CertificateEncodingException {\n \t\tthis.validUntilTime = validUntilTime;\n \t\tthis.attributeConsumingService = attributeConsumingService;\n@@ -149,7 +157,12 @@ private StrSubstitutor generateSubstitutor(Saml2Settings settings) throws Certif\n \t\tvalueMap.put(\"spAssertionConsumerServiceUrl\", settings.getSpAssertionConsumerServiceUrl().toString());\n \t\tvalueMap.put(\"sls\", toSLSXml(settings.getSpSingleLogoutServiceUrl(), settings.getSpSingleLogoutServiceBinding()));\n \n-\t\tvalueMap.put(\"strAttributeConsumingService\", getAttributeConsumingServiceXml());\n+\t\t// if an ACS was specified at construction time, use it in place of the ones specified in settings\n+\t\t// this is for backward compatibility\n+\t\tvalueMap.put(\"strAttributeConsumingService\",\n+\t\t            toAttributeConsumingServicesXml(attributeConsumingService != null \n+\t\t            \t? Arrays.asList(attributeConsumingService)\n+\t\t            \t: settings.getSpAttributeConsumingServices()));\n \n \t\tvalueMap.put(\"strKeyDescriptor\", toX509KeyDescriptorsXML(settings.getSPcert(), settings.getSPcertNew(), wantsEncrypted));\n \n@@ -186,63 +199,86 @@ private static StringBuilder getMetadataTemplate() {\n \n \t/**\n \t * Generates the AttributeConsumingService section of the metadata's template\n+\t * \n+\t * @param attributeConsumingServices\n+\t *              a list containing the Attribute Consuming Services to generate\n+\t *              the metadata for\n \t *\n \t * @return the AttributeConsumingService section of the metadata's template\n \t */\n-\tprivate String getAttributeConsumingServiceXml() {\n+\tprivate String toAttributeConsumingServicesXml(List<AttributeConsumingService> attributeConsumingServices) {\n+\t\tfinal StringBuilder acssXml = new StringBuilder();\n+\t\tif (attributeConsumingServices != null)\n+\t\t\tattributeConsumingServices.stream().forEach(service -> acssXml.append(toAttributeConsumingServiceXml(service)));\n+\t\treturn acssXml.toString();\n+\t}\n+\t\n+\t/**\n+\t * Generates a single Attribute Consuming Service metadata fragment\n+\t * \n+\t * @param service\n+\t *              the Attribute Consuming Service for which the XML fragment\n+\t *              should be generated\n+\t * @return the generated XML fragment\n+\t */\n+\tprivate String toAttributeConsumingServiceXml(AttributeConsumingService service) {\n+\t\tint index = service.getIndex();\n+\t\tBoolean isDefault = service.isDefault();\n+\t\tString serviceName = service.getServiceName();\n+\t\tString serviceDescription = service.getServiceDescription();\n+\t\tString lang = service.getLang();\n+\t\tList<RequestedAttribute> requestedAttributes = service.getRequestedAttributes();\n \t\tStringBuilder attributeConsumingServiceXML = new StringBuilder();\n-\t\tif (attributeConsumingService != null) {\n-\t\t\tString serviceName = attributeConsumingService.getServiceName();\n-\t\t\tString serviceDescription = attributeConsumingService.getServiceDescription();\n-\t\t\tList<RequestedAttribute> requestedAttributes = attributeConsumingService.getRequestedAttributes();\n-\n-\t\t\tattributeConsumingServiceXML.append(\"<md:AttributeConsumingService index=\\\"1\\\">\");\n-\t\t\tif (serviceName != null && !serviceName.isEmpty()) {\n-\t\t\t\tattributeConsumingServiceXML.append(\"<md:ServiceName xml:lang=\\\"en\\\">\" + serviceName + \"</md:ServiceName>\");\n-\t\t\t}\n-\t\t\tif (serviceDescription != null && !serviceDescription.isEmpty()) {\n-\t\t\t\tattributeConsumingServiceXML.append(\"<md:ServiceDescription xml:lang=\\\"en\\\">\" + serviceDescription + \"</md:ServiceDescription>\");\n-\t\t\t}\n-\t\t\tif (requestedAttributes != null && !requestedAttributes.isEmpty()) {\n-\t\t\t\tfor (RequestedAttribute requestedAttribute : requestedAttributes) {\n-\t\t\t\t\tString name = requestedAttribute.getName();\n-\t\t\t\t\tString friendlyName = requestedAttribute.getFriendlyName();\n-\t\t\t\t\tString nameFormat = requestedAttribute.getNameFormat();\n-\t\t\t\t\tBoolean isRequired = requestedAttribute.isRequired();\n-\t\t\t\t\tList<String> attrValues = requestedAttribute.getAttributeValues();\n-\n-\t\t\t\t\tString contentStr = \"<md:RequestedAttribute\";\n-\n-\t\t\t\t\tif (name != null && !name.isEmpty()) {\n-\t\t\t\t\t\tcontentStr += \" Name=\\\"\" + name + \"\\\"\";\n-\t\t\t\t\t}\n+\t\tattributeConsumingServiceXML.append(\"<md:AttributeConsumingService index=\\\"\").append(index).append(\"\\\"\");\n+\t\tif(isDefault != null)\n+\t\t\tattributeConsumingServiceXML.append(\" isDefault=\\\"\").append(isDefault).append(\"\\\"\");\n+\t\tattributeConsumingServiceXML.append(\">\");\n+\t\tif (serviceName != null && !serviceName.isEmpty()) {\n+\t\t\tattributeConsumingServiceXML.append(\"<md:ServiceName xml:lang=\\\"\").append(lang).append(\"\\\">\")\n+\t\t\t            .append(serviceName).append(\"</md:ServiceName>\");\n+\t\t}\n+\t\tif (serviceDescription != null && !serviceDescription.isEmpty()) {\n+\t\t\tattributeConsumingServiceXML.append(\"<md:ServiceDescription xml:lang=\\\"\").append(lang).append(\"\\\">\")\n+\t\t\t            .append(serviceDescription).append(\"</md:ServiceDescription>\");\n+\t\t}\n+\t\tif (requestedAttributes != null && !requestedAttributes.isEmpty()) {\n+\t\t\tfor (RequestedAttribute requestedAttribute : requestedAttributes) {\n+\t\t\t\tString name = requestedAttribute.getName();\n+\t\t\t\tString friendlyName = requestedAttribute.getFriendlyName();\n+\t\t\t\tString nameFormat = requestedAttribute.getNameFormat();\n+\t\t\t\tBoolean isRequired = requestedAttribute.isRequired();\n+\t\t\t\tList<String> attrValues = requestedAttribute.getAttributeValues();\n+\n+\t\t\t\tStringBuilder contentStr = new StringBuilder(\"<md:RequestedAttribute\");\n+\n+\t\t\t\tif (name != null && !name.isEmpty()) {\n+\t\t\t\t\tcontentStr.append(\" Name=\\\"\").append(name).append(\"\\\"\");\n+\t\t\t\t}\n \n-\t\t\t\t\tif (nameFormat != null && !nameFormat.isEmpty()) {\n-\t\t\t\t\t\tcontentStr += \" NameFormat=\\\"\" + nameFormat + \"\\\"\";\n-\t\t\t\t\t}\n+\t\t\t\tif (nameFormat != null && !nameFormat.isEmpty()) {\n+\t\t\t\t\tcontentStr.append(\" NameFormat=\\\"\").append(nameFormat).append(\"\\\"\");\n+\t\t\t\t}\n \n-\t\t\t\t\tif (friendlyName != null && !friendlyName.isEmpty()) {\n-\t\t\t\t\t\tcontentStr += \" FriendlyName=\\\"\" + friendlyName + \"\\\"\";\n-\t\t\t\t\t}\n+\t\t\t\tif (friendlyName != null && !friendlyName.isEmpty()) {\n+\t\t\t\t\tcontentStr.append(\" FriendlyName=\\\"\").append(friendlyName).append(\"\\\"\");\n+\t\t\t\t}\n \n-\t\t\t\t\tif (isRequired != null) {\n-\t\t\t\t\t\tcontentStr += \" isRequired=\\\"\" + isRequired.toString() + \"\\\"\";\n-\t\t\t\t\t}\n+\t\t\t\tif (isRequired != null) {\n+\t\t\t\t\tcontentStr.append(\" isRequired=\\\"\").append(isRequired.toString()).append(\"\\\"\");\n+\t\t\t\t}\n \n-\t\t\t\t\tif (attrValues != null && !attrValues.isEmpty()) {\n-\t\t\t\t\t\tcontentStr += \">\";\n-\t\t\t\t\t\tfor (String attrValue : attrValues) {\n-\t\t\t\t\t\t\tcontentStr += \"<saml:AttributeValue xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">\" + attrValue + \"</saml:AttributeValue>\";\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tattributeConsumingServiceXML.append(contentStr + \"</md:RequestedAttribute>\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tattributeConsumingServiceXML.append(contentStr + \" />\");\n+\t\t\t\tif (attrValues != null && !attrValues.isEmpty()) {\n+\t\t\t\t\tcontentStr.append(\">\");\n+\t\t\t\t\tfor (String attrValue : attrValues) {\n+\t\t\t\t\t\tcontentStr.append(\"<saml:AttributeValue xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">\").append(attrValue).append(\"</saml:AttributeValue>\");\n \t\t\t\t\t}\n+\t\t\t\t\tattributeConsumingServiceXML.append(contentStr).append(\"</md:RequestedAttribute>\");\n+\t\t\t\t} else {\n+\t\t\t\t\tattributeConsumingServiceXML.append(contentStr).append(\" />\");\n \t\t\t\t}\n \t\t\t}\n-\t\t\tattributeConsumingServiceXML.append(\"</md:AttributeConsumingService>\");\n \t\t}\n-\n+\t\tattributeConsumingServiceXML.append(\"</md:AttributeConsumingService>\");\n \t\treturn attributeConsumingServiceXML.toString();\n \t}\n "
  },
  {
    "sha": "7cff4eeac98f298ba108af803b112735eb0041c0",
    "filename": "core/src/main/java/com/onelogin/saml2/settings/Saml2Settings.java",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/settings/Saml2Settings.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/settings/Saml2Settings.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/main/java/com/onelogin/saml2/settings/Saml2Settings.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -13,6 +13,8 @@\n import org.slf4j.LoggerFactory;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n+\n+import com.onelogin.saml2.model.AttributeConsumingService;\n import com.onelogin.saml2.model.Contact;\n import com.onelogin.saml2.model.Organization;\n import com.onelogin.saml2.util.Constants;\n@@ -45,6 +47,7 @@\n \tprivate X509Certificate spX509certNew = null;\n \tprivate PrivateKey spPrivateKey = null;\n \tprivate HSM hsm = null;\n+\tprivate List<AttributeConsumingService> spAttributeConsumingServices = new ArrayList<>();\n \n \t// IdP\n \tprivate String idpEntityId = \"\";\n@@ -117,6 +120,13 @@ public final String getSpAssertionConsumerServiceBinding() {\n \t\treturn spAssertionConsumerServiceBinding;\n \t}\n \n+\t/**\n+\t * @return the SP Attribute Consuming Services \n+\t */\n+\tpublic final List<AttributeConsumingService> getSpAttributeConsumingServices() {\n+\t\t  return spAttributeConsumingServices;\n+\t}\n+\t\n \t/**\n \t * @return the spSingleLogoutServiceUrl setting value\n \t */\n@@ -844,6 +854,17 @@ public boolean isCompressResponseEnabled() {\n \t\treturn compressResponse;\n \t}\n \n+\t/**\n+\t * Set the Attribute Consuming Services to be declared in the Service Provider\n+\t * metadata\n+\t * \n+\t * @param spAttributeConsumingServices\n+\t *              the Attribute Consuming Services to set\n+\t */\n+\tprotected final void setSpAttributeConsumingServices(List<AttributeConsumingService> spAttributeConsumingServices) {\n+\t\tthis.spAttributeConsumingServices = spAttributeConsumingServices;\n+\t}\n+\t\n \t/**\n \t * Set contacts info that will be listed on the Service Provider metadata\n \t * "
  },
  {
    "sha": "6765ade09a18df77bbf9ed7a6a8ce3ad42ee6ced",
    "filename": "core/src/main/java/com/onelogin/saml2/settings/SettingsBuilder.java",
    "status": "modified",
    "additions": 250,
    "deletions": 2,
    "changes": 252,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/settings/SettingsBuilder.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/main/java/com/onelogin/saml2/settings/SettingsBuilder.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/main/java/com/onelogin/saml2/settings/SettingsBuilder.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -15,18 +15,30 @@\n import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n import java.util.Properties;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+\n import com.onelogin.saml2.exception.Error;\n+import com.onelogin.saml2.model.AttributeConsumingService;\n import com.onelogin.saml2.model.Contact;\n import com.onelogin.saml2.model.KeyStoreSettings;\n import com.onelogin.saml2.model.Organization;\n+import com.onelogin.saml2.model.RequestedAttribute;\n import com.onelogin.saml2.util.Util;\n \n /**\n@@ -65,6 +77,19 @@\n \tpublic final static String SP_PRIVATEKEY_PROPERTY_KEY = \"onelogin.saml2.sp.privatekey\";\n \tpublic final static String SP_X509CERTNEW_PROPERTY_KEY = \"onelogin.saml2.sp.x509certNew\";\n \n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_PROPERTY_KEY_PREFIX = \"onelogin.saml2.sp.attribute_consuming_service\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_NAME_PROPERTY_KEY_SUFFIX = \"name\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_DESCRIPTION_PROPERTY_KEY_SUFFIX = \"description\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_LANG_PROPERTY_KEY_SUFFIX = \"lang\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_DEFAULT_PROPERTY_KEY_SUFFIX = \"default\";\n+\t\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_PROPERTY_KEY_PREFIX = \"attribute\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_NAME_PROPERTY_KEY_SUFFIX = \"name\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_NAME_FORMAT_PROPERTY_KEY_SUFFIX = \"name_format\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_FRIENDLY_NAME_PROPERTY_KEY_SUFFIX = \"friendly_name\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_REQUIRED_PROPERTY_KEY_SUFFIX = \"required\";\n+\tpublic final static String SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_VALUE_PROPERTY_KEY_PREFIX = \"value\";\n+\n \t// KeyStore\n \tpublic final static String KEYSTORE_KEY = \"onelogin.saml2.keystore.store\";\n \tpublic final static String KEYSTORE_ALIAS = \"onelogin.saml2.keystore.alias\";\n@@ -466,7 +491,204 @@ private Organization loadOrganization() {\n \n \t\treturn contacts;\n \t}\n+\t\n+\t/**\n+\t * Loads the Attribute Consuming Services from settings.\n+\t * \n+\t * @return a list containing the loaded Attribute Consuming Services\n+\t */\n+\tprivate List<AttributeConsumingService> loadAttributeConsumingServices() {\n+\t\t// first split properties into a map of properties\n+\t\t// key = ACS index; value = ACS properties\n+\t\tfinal SortedMap<Integer, Map<String, Object>> acsProps = \n+\t\t\t\textractIndexedProperties(SP_ATTRIBUTE_CONSUMING_SERVICE_PROPERTY_KEY_PREFIX, samlData);\n+\t\t// then build each ACS\n+\t\tif(acsProps.containsKey(-1) && acsProps.size() == 1)\n+\t\t\t// single ACS specified; use index 1 for backward compatibility\n+\t\t\treturn Arrays.asList(loadAttributeConsumingService(acsProps.get(-1), 1));\n+\t\telse\n+\t\t\t// multiple indexed ACSs specified\n+\t\t\treturn acsProps.entrySet().stream()\n+\t\t\t\t\t// ignore non-indexed ACS\n+\t\t\t\t\t.filter(entry -> entry.getKey() != -1)\n+\t\t\t            .map(entry -> loadAttributeConsumingService(entry.getValue(), entry.getKey()))\n+\t\t\t            .collect(Collectors.toList());\n+\t}\n+\t\n+\t/**\n+\t * Loads a single Attribute Consuming Service from settings.\n+\t * \n+\t * @param acsProps\n+\t *              a map containing the ACS settings\n+\t * @param index\n+\t *              the index to be set on the returned ACS\n+\t * @return the loaded ACS\n+\t */\n+\tprivate AttributeConsumingService loadAttributeConsumingService(Map<String, Object> acsProps, int index) {\n+\t\tfinal String serviceName =  loadStringProperty(SP_ATTRIBUTE_CONSUMING_SERVICE_NAME_PROPERTY_KEY_SUFFIX, acsProps);\n+\t\tfinal String serviceDescription = loadStringProperty(SP_ATTRIBUTE_CONSUMING_SERVICE_DESCRIPTION_PROPERTY_KEY_SUFFIX, acsProps);\n+\t\tfinal String lang = loadStringProperty(SP_ATTRIBUTE_CONSUMING_SERVICE_LANG_PROPERTY_KEY_SUFFIX, acsProps);\n+\t\tfinal Boolean isDefault = loadBooleanProperty(SP_ATTRIBUTE_CONSUMING_SERVICE_DEFAULT_PROPERTY_KEY_SUFFIX, acsProps);\n+\t\tfinal AttributeConsumingService acs = new AttributeConsumingService(index, isDefault, serviceName, serviceDescription, lang);\n+\t\t// split properties into a map of properties\n+\t\t// key = attribute index; value = attribute properties\n+\t\tfinal SortedMap<Integer, Map<String, Object>> attributeProps = extractIndexedProperties(SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_PROPERTY_KEY_PREFIX, acsProps);\n+\t\t// build attributes\n+\t\tattributeProps.forEach((attributeIndex, attributeData) -> {\n+\t\t\tacs.addRequestedAttribute(loadRequestedAttribute(attributeData));\n+\t\t});\n+\t\treturn acs;\n+\t}\n+\t\n+\t/**\n+\t * Loads a requested attribute from settings.\n+\t * \n+\t * @param attributeProps\n+\t *              a map containing the attribute settings\n+\t * @return the loaded attribute\n+\t */\n+\tprivate RequestedAttribute loadRequestedAttribute(Map<String, Object> attributeProps) {\n+\t\tfinal String name = loadStringProperty(SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_NAME_PROPERTY_KEY_SUFFIX, attributeProps);\n+\t\tfinal String nameFormat = loadStringProperty(SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_NAME_FORMAT_PROPERTY_KEY_SUFFIX, attributeProps);\n+\t\tfinal String friendlyName = loadStringProperty(SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_FRIENDLY_NAME_PROPERTY_KEY_SUFFIX, attributeProps);\n+\t\tfinal Boolean required = loadBooleanProperty(SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_REQUIRED_PROPERTY_KEY_SUFFIX, attributeProps);\n+\t\t// split properties into a map of properties\n+\t\t// key = value index; value = the actual value\n+\t\tfinal SortedMap<Integer, Object> values = extractIndexedValues(SP_ATTRIBUTE_CONSUMING_SERVICE_ATTRIBUTE_VALUE_PROPERTY_KEY_PREFIX, attributeProps);\n+\t\tfinal List<String> stringValues = values.values().stream()\n+\t\t            .map(value -> isString(value) ? StringUtils.trimToNull((String) value) : null)\n+\t\t            .filter(Objects::nonNull).collect(Collectors.toList());\n+\t\treturn new RequestedAttribute(name, friendlyName, required, nameFormat, stringValues);\n+\t}\n \n+\t/**\n+\t * Given a map containing settings data, extracts all the indexed properties\n+\t * identified by a given prefix. The returned map has indexes as keys and a map\n+\t * describing the extracted indexed data as values. Keys are sorted by their\n+\t * natural order (i.e. iterating over the map will return entries in index order).\n+\t * <p>\n+\t * For instance, if the prefix is <code>foo</code>, all the following properties\n+\t * will be extracted:\n+\t * \n+\t * <pre>\n+\t * foo[0].prop1=&lt;value1&gt;\n+\t * foo[0].prop2=&lt;value2&gt;\n+\t * foo[1].prop1=&lt;value3&gt;\n+\t * </pre>\n+\t * \n+\t * and the returned map will be:\n+\t * \n+\t * <pre>\n+\t * 0 => prop1=&lt;value1&gt;\n+\t *      prop2=&lt;value2&gt;\n+\t * 1 => prop1=&lt;value3&gt;\n+\t * </pre>\n+\t * \n+\t * The index is optional: if missing, \"-1\" is returned. In other words, in the\n+\t * above example:\n+\t * \n+\t * <pre>\n+\t * foo.prop1=&lt;value1&gt;\n+\t * foo.prop2=&lt;value2&gt;\n+\t * </pre>\n+\t * \n+\t * will be mapped to:\n+\t * \n+\t * <pre>\n+\t * -1 => prop1=&lt;value1&gt;\n+\t *       prop2=&lt;value2&gt;\n+\t * </pre>\n+\t * \n+\t * Indices can be made of maximum 9 digits, to prevent overflows. Leading zeroes\n+\t * are discarded.\n+\t * \n+\t * @param prefix\n+\t *              the prefix that identifies the indexed property to extract\n+\t * @param data\n+\t *              the input data\n+\t * @return a map with extracted data for each identified index\n+\t */\n+\tprivate SortedMap<Integer, Map<String, Object>> extractIndexedProperties(String prefix, Map<String, Object> data) {\n+\t\tfinal Pattern p = Pattern.compile(Pattern.quote(prefix) + \n+\t\t\t\t\"(?:\\\\[(\\\\d{1,9})\\\\])?\\\\.(.+)\");\n+\t\tfinal SortedMap<Integer, Map<String, Object>> indexedProps = new TreeMap<>();\n+\t\tfor(final Entry<String, Object> prop: data.entrySet()) {\n+\t\t\tfinal Matcher m = p.matcher(prop.getKey());\n+\t\t\tif(m.matches()) {\n+\t\t\t\tfinal String indexString = m.group(1);\n+\t\t\t\tfinal int index = indexString == null? -1: Integer.parseInt(indexString);\n+\t\t\t\tfinal String suffix = m.group(2);\n+\t\t\t\tMap<String, Object> props = indexedProps.get(index);\n+\t\t\t\tif(props == null) {\n+\t\t\t\t\tprops = new HashMap<>();\n+\t\t\t\t\tindexedProps.put(index, props);\n+\t\t\t\t}\n+\t\t\t\tprops.put(suffix, prop.getValue());\n+\t\t\t}\n+\t\t}\n+\t\treturn indexedProps;\n+\t}\n+\t\n+\t/**\n+\t * Given a map containing settings data, extracts all the indexed values\n+\t * identified by a given prefix. The returned map has indexes as keys and the\n+\t * corresponding values as values. Keys are sorted by their natural order \n+\t * (i.e. iterating over the map will return entries in index order).\n+\t * <p>\n+\t * For instance, if the prefix is <code>foo</code>, all the following values\n+\t * will be extracted:\n+\t * \n+\t * <pre>\n+\t * foo[0]=&lt;value1&gt;\n+\t * foo[1]=&lt;value2&gt;\n+\t * foo[2]=&lt;value3&gt;\n+\t * </pre>\n+\t * \n+\t * and the returned map will be:\n+\t * \n+\t * <pre>\n+\t * 0 => &lt;value1&gt;\n+\t * 1 => &lt;value2&gt;\n+\t * 3 => &lt;value3&gt;\n+\t * </pre>\n+\t * \n+\t * The index is optional: if missing, \"-1\" is returned. In other words, in the\n+\t * above example:\n+\t * \n+\t * <pre>\n+\t * foo=&lt;value1&gt;\n+\t * </pre>\n+\t * \n+\t * will be mapped to:\n+\t * \n+\t * <pre>\n+\t * -1 => &lt;value1&gt;\n+\t * </pre>\n+\t * \n+\t * Indices can be made of maximum 9 digits, to prevent overflows. Leading zeroes\n+\t * are discarded.\n+\t * \n+\t * @param prefix\n+\t *              the prefix that identifies the indexed property to extract\n+\t * @param data\n+\t *              the input data\n+\t * @return a map with extracted values for each identified index\n+\t */\n+\tprivate SortedMap<Integer, Object> extractIndexedValues(String prefix, Map<String, Object> data) {\n+\t\tfinal Pattern p = Pattern.compile(Pattern.quote(prefix) + \n+\t\t\t\t\"(?:\\\\[(\\\\d{1,9})\\\\])?\");\n+\t\tfinal SortedMap<Integer, Object> indexedValues = new TreeMap<>();\n+\t\tfor(final Entry<String, Object> prop: data.entrySet()) {\n+\t\t\tfinal Matcher m = p.matcher(prop.getKey());\n+\t\t\tif(m.matches()) {\n+\t\t\t\tfinal String indexString = m.group(1);\n+\t\t\t\tfinal int index = indexString == null? -1: Integer.parseInt(indexString);\n+\t\t\t\tindexedValues.put(index, prop.getValue());\n+\t\t\t}\n+\t\t}\n+\t\treturn indexedValues;\n+\t}\n+\t\n \t/**\n \t * Loads the unique ID prefix. Uses default if property not set.\n \t */\n@@ -508,6 +730,8 @@ private void loadSpSetting() {\n \t\tif (spNameIDFormat != null && !spNameIDFormat.isEmpty()) {\n \t\t\tsaml2Setting.setSpNameIDFormat(spNameIDFormat);\n \t\t}\n+\t\t\n+\t\tsaml2Setting.setSpAttributeConsumingServices(loadAttributeConsumingServices());\n \n \t\tboolean keyStoreEnabled = this.samlData.get(KEYSTORE_KEY) != null && this.samlData.get(KEYSTORE_ALIAS) != null\n \t\t\t\t&& this.samlData.get(KEYSTORE_KEY_PASSWORD) != null;\n@@ -548,7 +772,19 @@ private void loadSpSetting() {\n \t * @return the value\n \t */\n \tprivate String loadStringProperty(String propertyKey) {\n-\t\tObject propValue = samlData.get(propertyKey);\n+\t\treturn loadStringProperty(propertyKey, samlData);\n+\t}\n+\n+\t/**\n+\t * Loads a property of the type String from the specified data\n+\t *\n+\t * @param propertyKey the property name\n+\t * @param data the input data\n+\t *\n+\t * @return the value\n+\t */\n+\tprivate String loadStringProperty(String propertyKey, Map<String, Object> data) {\n+\t\tObject propValue = data.get(propertyKey);\n \t\tif (isString(propValue)) {\n \t\t\treturn StringUtils.trimToNull((String) propValue);\n \t\t}\n@@ -563,7 +799,19 @@ private String loadStringProperty(String propertyKey) {\n \t * @return the value\n \t */\n \tprivate Boolean loadBooleanProperty(String propertyKey) {\n-\t\tObject propValue = samlData.get(propertyKey);\n+\t\treturn loadBooleanProperty(propertyKey, samlData);\n+\t}\n+\n+\t/**\n+\t * Loads a property of the type Boolean from the specified data\n+\t *\n+\t * @param propertyKey the property name\n+\t * @param data the input data\n+\t *\n+\t * @return the value\n+\t */\n+\tprivate Boolean loadBooleanProperty(String propertyKey, Map<String, Object> data) {\n+\t\tObject propValue = data.get(propertyKey);\n \t\tif (isString(propValue)) {\n \t\t\treturn Boolean.parseBoolean(((String) propValue).trim());\n \t\t}"
  },
  {
    "sha": "fd8003478cdcbca44fc2981fb85ad952d3e1edbc",
    "filename": "core/src/test/java/com/onelogin/saml2/test/authn/AuthnRequestTest.java",
    "status": "modified",
    "additions": 62,
    "deletions": 8,
    "changes": 70,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/java/com/onelogin/saml2/test/authn/AuthnRequestTest.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/java/com/onelogin/saml2/test/authn/AuthnRequestTest.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/test/java/com/onelogin/saml2/test/authn/AuthnRequestTest.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -11,7 +11,10 @@\n \n import org.junit.Test;\n \n+import com.onelogin.saml2.authn.AttributeConsumingServiceSelector;\n import com.onelogin.saml2.authn.AuthnRequest;\n+import com.onelogin.saml2.authn.AuthnRequestParams;\n+import com.onelogin.saml2.model.AttributeConsumingService;\n import com.onelogin.saml2.settings.Saml2Settings;\n import com.onelogin.saml2.settings.SettingsBuilder;\n import com.onelogin.saml2.util.Util;\n@@ -133,13 +136,13 @@ public void testForceAuthN() throws Exception {\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n \t\tassertThat(authnRequestStr, not(containsString(\"ForceAuthn=\\\"true\\\"\")));\n \n-\t\tauthnRequest = new AuthnRequest(settings, false, false, false);\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false));\n \t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n \t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n \t\tassertThat(authnRequestStr, not(containsString(\"ForceAuthn=\\\"true\\\"\")));\t\t\n \n-\t\tauthnRequest = new AuthnRequest(settings, true, false, false);\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(true, false, false));\n \t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n \t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n@@ -164,13 +167,13 @@ public void testIsPassive() throws Exception {\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n \t\tassertThat(authnRequestStr, not(containsString(\"IsPassive=\\\"true\\\"\")));\n \n-\t\tauthnRequest = new AuthnRequest(settings, false, false, false);\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false));\n \t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n \t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n \t\tassertThat(authnRequestStr, not(containsString(\"IsPassive=\\\"true\\\"\")));\t\t\n \n-\t\tauthnRequest = new AuthnRequest(settings, false, true, false);\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, true, false));\n \t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n \t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n@@ -196,13 +199,13 @@ public void testNameIDPolicy() throws Exception {\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:NameIDPolicy\"));\n \t\tassertThat(authnRequestStr, containsString(\"Format=\\\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\\\"\"));\n \n-\t\tauthnRequest = new AuthnRequest(settings, false, false, false);\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false));\n \t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n \t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n \t\tassertThat(authnRequestStr, not(containsString(\"<samlp:NameIDPolicy\")));\t\t\n \n-\t\tauthnRequest = new AuthnRequest(settings, false, false, true);\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, true));\n \t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n \t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n@@ -290,7 +293,7 @@ public void testSubject() throws Exception {\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n \t\tassertThat(authnRequestStr, not(containsString(\"<saml:Subject\")));\n \n-\t\tauthnRequest = new AuthnRequest(settings, false, false, false, \"testuser@example.com\");\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false, \"testuser@example.com\"));\n \t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n \t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n@@ -299,7 +302,7 @@ public void testSubject() throws Exception {\n \t\tassertThat(authnRequestStr, containsString(\"<saml:SubjectConfirmation Method=\\\"urn:oasis:names:tc:SAML:2.0:cm:bearer\\\">\"));\n \n \t\tsettings = new SettingsBuilder().fromFile(\"config/config.emailaddressformat.properties\").build();\n-\t\tauthnRequest = new AuthnRequest(settings, false, false, false, \"testuser@example.com\");\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false, \"testuser@example.com\"));\n \t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n \t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\n \t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n@@ -308,6 +311,57 @@ public void testSubject() throws Exception {\n \t\tassertThat(authnRequestStr, containsString(\"<saml:SubjectConfirmation Method=\\\"urn:oasis:names:tc:SAML:2.0:cm:bearer\\\">\"));\n \t}\n \n+\t/**\n+\t * Tests the AuthnRequest Constructor\n+\t * The creation of a deflated SAML Request with the index of the desired Attribute Consuming Service\n+\t *\n+\t * @throws Exception\n+\t *\n+\t * @see com.onelogin.saml2.authn.AuthnRequest\n+\t */\n+\t@Test\n+\tpublic void testAttributeConsumingServiceSelector() throws Exception {\n+\t\tSaml2Settings settings = new SettingsBuilder().fromFile(\"config/config.min_multi_attribute_consuming_services.properties\").build();\n+\n+\t\tAuthnRequest authnRequest = new AuthnRequest(settings);\n+\t\tString authnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n+\t\tString authnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\n+\t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n+\t\tassertThat(authnRequestStr, not(containsString(\"AttributeConsumingServiceIndex=\\\"\")));\n+\n+\t\t// use default\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false, \n+\t\t\t\tAttributeConsumingServiceSelector.useDefault()));\n+\t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n+\t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n+\t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n+\t\tassertThat(authnRequestStr, not(containsString(\"AttributeConsumingServiceIndex=\\\"\")));\t\t\n+\n+\t\t// by index\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false, \n+\t\t\t\tAttributeConsumingServiceSelector.byIndex(0)));\n+\t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n+\t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n+\t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n+\t\tassertThat(authnRequestStr, containsString(\"AttributeConsumingServiceIndex=\\\"0\\\"\"));\n+\t\t\n+\t\t// by service name\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false, \n+\t\t\t\tAttributeConsumingServiceSelector.byServiceName(settings, \"Anagrafica\")));\n+\t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n+\t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n+\t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n+\t\tassertThat(authnRequestStr, containsString(\"AttributeConsumingServiceIndex=\\\"1\\\"\"));\n+\t\t\n+\t\t// use service\n+\t\tauthnRequest = new AuthnRequest(settings, new AuthnRequestParams(false, false, false, \n+\t\t\t\tAttributeConsumingServiceSelector.use(new AttributeConsumingService(2, false, \"Test\", null, null))));\n+\t\tauthnRequestStringBase64 = authnRequest.getEncodedAuthnRequest();\n+\t\tauthnRequestStr = Util.base64decodedInflated(authnRequestStringBase64);\t\t\n+\t\tassertThat(authnRequestStr, containsString(\"<samlp:AuthnRequest\"));\n+\t\tassertThat(authnRequestStr, containsString(\"AttributeConsumingServiceIndex=\\\"2\\\"\"));\n+\t}\n+\n \t/**\n \t * Tests the getId method of AuthnRequest\n \t *"
  },
  {
    "sha": "587099d1cd8c3dc955eaafe282e4101800466e6a",
    "filename": "core/src/test/java/com/onelogin/saml2/test/settings/MetadataTest.java",
    "status": "modified",
    "additions": 152,
    "deletions": 8,
    "changes": 160,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/java/com/onelogin/saml2/test/settings/MetadataTest.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/java/com/onelogin/saml2/test/settings/MetadataTest.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/test/java/com/onelogin/saml2/test/settings/MetadataTest.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -296,15 +296,59 @@ public void testToX509KeyDescriptorsXMLEncryption() throws IOException, Certific\n \t}\n \n \t/**\n-\t * Tests the getAttributeConsumingServiceXml method of Metadata\n+\t * Tests the toAttributeConsumingServicesXml method of Metadata when an Attribute Consuming Service\n+\t * is specified at construction time\n \t *\n \t * @throws IOException\n \t * @throws CertificateEncodingException\n \t * @throws Error\n-\t * @see com.onelogin.saml2.settings.Metadata#getAttributeConsumingServiceXml\n+\t * @see com.onelogin.saml2.settings.Metadata#toAttributeConsumingServicesXml\n \t */\n \t@Test\n-\tpublic void testGetAttributeConsumingServiceXml() throws IOException, CertificateEncodingException, Error {\n+\tpublic void testToAttributeConsumingServicesXmlLegacy() throws IOException, CertificateEncodingException, Error {\n+\t\tSaml2Settings settings = getSettingFromAllProperties();\n+\n+\t\tAttributeConsumingService attributeConsumingService = new AttributeConsumingService(0, true, \"Test Service\", \"Test Service Desc\", \"en\");\n+\t\tRequestedAttribute requestedAttribute = new RequestedAttribute(\"Email\", \"Email\", true, \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\", null);\n+\t\tRequestedAttribute requestedAttribute2 = new RequestedAttribute(\"FirstName\", null, true, \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\", null);\n+\t\tRequestedAttribute requestedAttribute3 = new RequestedAttribute(\"LastName\", null, true, \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\", null);\n+\n+\t\tattributeConsumingService.addRequestedAttribute(requestedAttribute);\n+\t\tattributeConsumingService.addRequestedAttribute(requestedAttribute2);\n+\t\tattributeConsumingService.addRequestedAttribute(requestedAttribute3);\n+\n+\t\tMetadata metadataObj = new Metadata(settings, null, null, attributeConsumingService);\n+\t\tString metadataStr = metadataObj.getMetadataString();\n+\n+\t\tString headerStr = \"<md:AttributeConsumingService index=\\\"0\\\" isDefault=\\\"true\\\">\";\n+\t\tString sNameStr = \"<md:ServiceName xml:lang=\\\"en\\\">Test Service</md:ServiceName>\";\n+\t\tString sDescStr = \"<md:ServiceDescription xml:lang=\\\"en\\\">Test Service Desc</md:ServiceDescription>\";\n+\t\tString reqAttr1Str = \"<md:RequestedAttribute Name=\\\"Email\\\" NameFormat=\\\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\\\" FriendlyName=\\\"Email\\\" isRequired=\\\"true\\\" />\";\n+\t\tString reqAttr2Str = \"<md:RequestedAttribute Name=\\\"FirstName\\\" NameFormat=\\\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\\\" isRequired=\\\"true\\\" />\";\n+\t\tString reqAttr3Str = \"<md:RequestedAttribute Name=\\\"LastName\\\" NameFormat=\\\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\\\" isRequired=\\\"true\\\" />\";\n+\t\tString footerStr = \"</md:AttributeConsumingService>\";\n+\n+\t\tassertThat(metadataStr, containsString(headerStr));\n+\t\tassertThat(metadataStr, containsString(sNameStr));\n+\t\tassertThat(metadataStr, containsString(sDescStr));\n+\t\tassertThat(metadataStr, containsString(reqAttr1Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr2Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr3Str));\n+\t\tassertThat(metadataStr, containsString(footerStr));\n+\t}\n+\n+\t/**\n+\t * Tests the toAttributeConsumingServicesXml method of Metadata when an Attribute Consuming Service\n+\t * is specified at construction time\n+\t * Case: Single non-default AttributeConsumingService with no explicit index \n+\t *\n+\t * @throws IOException\n+\t * @throws CertificateEncodingException\n+\t * @throws Error\n+\t * @see com.onelogin.saml2.settings.Metadata#toAttributeConsumingServicesXml\n+\t */\n+\t@Test\n+\tpublic void testToAttributeConsumingServiceXmlNoIndexLegacy() throws IOException, CertificateEncodingException, Error {\n \t\tSaml2Settings settings = getSettingFromAllProperties();\n \n \t\tAttributeConsumingService attributeConsumingService = new AttributeConsumingService(\"Test Service\", \"Test Service Desc\");\n@@ -337,19 +381,20 @@ public void testGetAttributeConsumingServiceXml() throws IOException, Certificat\n \t}\n \n \t/**\n-\t * Tests the getAttributeConsumingServiceXml method of Metadata\n+\t * Tests the toAttributeConsumingServicesXml method of Metadata when an Attribute Consuming Service\n+\t * is specified at construction time\n \t * Case: AttributeConsumingService Multiple AttributeValue\n \t *\n \t * @throws IOException\n \t * @throws CertificateEncodingException\n \t * @throws Error\n-\t * @see com.onelogin.saml2.settings.Metadata#getAttributeConsumingServiceXml\n+\t * @see com.onelogin.saml2.settings.Metadata#toAttributeConsumingServicesXml\n \t */\n \t@Test\n-\tpublic void testGetAttributeConsumingServiceXmlWithMultipleAttributeValue() throws IOException, CertificateEncodingException, Error {\n+\tpublic void testToAttributeConsumingServiceXmlWithMultipleAttributeValueLegacy() throws IOException, CertificateEncodingException, Error {\n \t\tSaml2Settings settings = getSettingFromAllProperties();\n \n-\t\tAttributeConsumingService attributeConsumingService = new AttributeConsumingService(\"Test Service\", \"Test Service Desc\");\n+\t\tAttributeConsumingService attributeConsumingService = new AttributeConsumingService(0, true, \"Test Service\", \"Test Service Desc\", \"en\");\n \t\tList<String> attrValues = new ArrayList<String>();\n \t\tattrValues.add(\"userType\");\n \t\tattrValues.add(\"admin\");\n@@ -362,7 +407,7 @@ public void testGetAttributeConsumingServiceXmlWithMultipleAttributeValue() thro\n \t\tMetadata metadataObj = new Metadata(settings, null, null, attributeConsumingService);\n \t\tString metadataStr = metadataObj.getMetadataString();\n \n-\t\tString headerStr = \"<md:AttributeConsumingService index=\\\"1\\\">\";\n+\t\tString headerStr = \"<md:AttributeConsumingService index=\\\"0\\\" isDefault=\\\"true\\\">\";\n \t\tString sNameStr = \"<md:ServiceName xml:lang=\\\"en\\\">Test Service</md:ServiceName>\";\n \t\tString sDescStr = \"<md:ServiceDescription xml:lang=\\\"en\\\">Test Service Desc</md:ServiceDescription>\";\n \t\tString reqAttr1Str = \"<md:RequestedAttribute Name=\\\"userType\\\" NameFormat=\\\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\\\" isRequired=\\\"false\\\">\";\n@@ -381,6 +426,101 @@ public void testGetAttributeConsumingServiceXmlWithMultipleAttributeValue() thro\n \t\tassertThat(metadataStr, containsString(footerStr));\n \t}\n \n+\t/**\n+\t * Tests the toAttributeConsumingServicesXml method of Metadata\n+\t * Case: single Attribute Consuming Service specified in settings\n+\t *\n+\t * @throws IOException\n+\t * @throws CertificateEncodingException\n+\t * @throws Error\n+\t * @see com.onelogin.saml2.settings.Metadata#toAttributeConsumingServicesXml\n+\t */\n+\t@Test\n+\tpublic void testToAttributeConsumingServiceXmlSingleACS() throws IOException, CertificateEncodingException, Error {\n+\t\tSaml2Settings settings = getSettingFromAllProperties();\n+\n+\t\tMetadata metadataObj = new Metadata(settings, null, null);\n+\t\tString metadataStr = metadataObj.getMetadataString();\n+\n+\t\tString headerStr = \"<md:AttributeConsumingService index=\\\"1\\\">\";\n+\t\tString sNameStr = \"<md:ServiceName xml:lang=\\\"en\\\">My service</md:ServiceName>\";\n+\t\tString sDescStr = \"<md:ServiceDescription xml:lang=\\\"en\\\">My service description</md:ServiceDescription>\";\n+\t\tString reqAttr1Str = \"<md:RequestedAttribute Name=\\\"Email\\\" NameFormat=\\\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\\" FriendlyName=\\\"E-mail address\\\" isRequired=\\\"true\\\">\";\n+\t\tString reqAttr1Atr1Str = \"<saml:AttributeValue xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">foo@example.org</saml:AttributeValue>\";\n+\t\tString reqAttr1Attr2Str = \"<saml:AttributeValue xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">bar@example.org</saml:AttributeValue>\";\n+\t\tString reqAttr2Str = \"<md:RequestedAttribute Name=\\\"FirstName\\\" />\";\n+\t\tString footerStr = \"</md:AttributeConsumingService>\";\n+\n+\t\tassertThat(metadataStr, containsString(headerStr));\n+\t\tassertThat(metadataStr, containsString(sNameStr));\n+\t\tassertThat(metadataStr, containsString(sDescStr));\n+\t\tassertThat(metadataStr, containsString(reqAttr1Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr1Atr1Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr1Attr2Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr2Str));\n+\t\tassertThat(metadataStr, containsString(footerStr));\n+\t}\n+\n+\t/**\n+\t * Tests the toAttributeConsumingServicesXml method of Metadata\n+\t * Case: single Attribute Consuming Service specified in settings\n+\t *\n+\t * @throws IOException\n+\t * @throws CertificateEncodingException\n+\t * @throws Error\n+\t * @see com.onelogin.saml2.settings.Metadata#toAttributeConsumingServicesXml\n+\t */\n+\t@Test\n+\tpublic void testToAttributeConsumingServiceXmlMultiACS() throws IOException, CertificateEncodingException, Error {\n+\t\tSaml2Settings settings = getSettingFromAllPropertiesMultiACS();\n+\n+\t\tMetadata metadataObj = new Metadata(settings, null, null);\n+\t\tString metadataStr = metadataObj.getMetadataString();\n+\n+\t\tString header1Str = \"<md:AttributeConsumingService index=\\\"0\\\">\";\n+\t\tString sName1Str = \"<md:ServiceName xml:lang=\\\"en\\\">Just e-mail</md:ServiceName>\";\n+\t\tString reqAttr11Str = \"<md:RequestedAttribute Name=\\\"Email\\\" NameFormat=\\\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\\" FriendlyName=\\\"E-mail address\\\" isRequired=\\\"true\\\">\";\n+\t\tString reqAttr11Atr1Str = \"<saml:AttributeValue xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">foo@example.org</saml:AttributeValue>\";\n+\t\tString reqAttr11Attr2Str = \"<saml:AttributeValue xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">bar@example.org</saml:AttributeValue>\";\n+\t\tString footer1Str = \"</md:AttributeConsumingService>\";\n+\n+\t\tString header2Str = \"<md:AttributeConsumingService index=\\\"1\\\" isDefault=\\\"true\\\">\";\n+\t\tString sName2Str = \"<md:ServiceName xml:lang=\\\"it\\\">Anagrafica</md:ServiceName>\";\n+\t\tString sDesc2Str = \"<md:ServiceDescription xml:lang=\\\"it\\\">Servizio completo</md:ServiceDescription>\";\n+\t\tString reqAttr21Str = \"<md:RequestedAttribute Name=\\\"FirstName\\\" />\";\n+\t\tString reqAttr22Str = \"<md:RequestedAttribute Name=\\\"LastName\\\" isRequired=\\\"true\\\" />\";\n+\t\tString footer2Str = \"</md:AttributeConsumingService>\";\n+\n+\t\tassertThat(metadataStr, containsString(header1Str));\n+\t\tassertThat(metadataStr, containsString(sName1Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr11Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr11Atr1Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr11Attr2Str));\n+\t\tassertThat(metadataStr, containsString(footer1Str));\n+\n+\t\tassertThat(metadataStr, containsString(header2Str));\n+\t\tassertThat(metadataStr, containsString(sName2Str));\n+\t\tassertThat(metadataStr, containsString(sDesc2Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr21Str));\n+\t\tassertThat(metadataStr, containsString(reqAttr22Str));\n+\t\tassertThat(metadataStr, containsString(footer2Str));\n+\t\t\n+\t\t// properties for a single ACS must NOT be present in this case\n+\t\tString sNameStr = \"<md:ServiceName xml:lang=\\\"en\\\">My service</md:ServiceName>\";\n+\t\tString sDescStr = \"<md:ServiceDescription xml:lang=\\\"en\\\">My service description</md:ServiceDescription>\";\n+\t\tString reqAttr1Str = \"<md:RequestedAttribute Name=\\\"Email_Wrong\\\" NameFormat=\\\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\\" FriendlyName=\\\"E-mail address\\\" isRequired=\\\"true\\\">\";\n+\t\tString reqAttr1Atr1Str = \"<saml:AttributeValue xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">foo_wrong@example.org</saml:AttributeValue>\";\n+\t\tString reqAttr1Attr2Str = \"<saml:AttributeValue xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">bar_wrong@example.org</saml:AttributeValue>\";\n+\t\tString reqAttr2Str = \"<md:RequestedAttribute Name=\\\"FirstName_Wrong\\\" />\";\n+\n+\t\tassertThat(metadataStr, not(containsString(sNameStr)));\n+\t\tassertThat(metadataStr, not(containsString(sDescStr)));\n+\t\tassertThat(metadataStr, not(containsString(reqAttr1Str)));\n+\t\tassertThat(metadataStr, not(containsString(reqAttr1Atr1Str)));\n+\t\tassertThat(metadataStr, not(containsString(reqAttr1Attr2Str)));\n+\t\tassertThat(metadataStr, not(containsString(reqAttr2Str)));\n+\t}\n+\n \t/**\n \t * Tests the signMetadata method of Metadata\n \t * Case imported metadata\n@@ -462,6 +602,10 @@ private Saml2Settings getSettingFromAllProperties() throws Error, IOException {\n \t\treturn new SettingsBuilder().fromFile(\"config/config.all.properties\").build();\n \t}\n \n+\tprivate Saml2Settings getSettingFromAllPropertiesMultiACS() throws Error, IOException {\n+\t\treturn new SettingsBuilder().fromFile(\"config/config.all_multi_attribute_consuming_services.properties\").build();\n+\t}\n+\n \t@Test\n \tpublic void shouldIncludeValidUntilAndDuration() throws CertificateEncodingException, Error, IOException {\n \t\t//given"
  },
  {
    "sha": "f139fb0494f58bee7750840dfbd6734ebc0dc3cb",
    "filename": "core/src/test/resources/config/config.all.properties",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/resources/config/config.all.properties",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/resources/config/config.all.properties",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/test/resources/config/config.all.properties?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -31,6 +31,40 @@ onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bi\n # Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported\n onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n \n+# Attribute Consuming Service name when just one ACS should be declared by the SP.\n+# Comment out or set to empty if no ACS should be declared, or if multiple ones should (see below). \n+# The service name is mandatory.\n+onelogin.saml2.sp.attribute_consuming_service.name = My service\n+\n+# Attribute Consuming Service description when just one ACS should be declared by the SP.\n+# Ignored if the previous property is commented or empty. \n+# The service description is optional.\n+onelogin.saml2.sp.attribute_consuming_service.description = My service description\n+\n+# Language used for Attribute Consuming Service name and description when just one ACS should be declared by the SP.\n+# Ignored if the name property is commented or empty. \n+# The language is optional and default to \"en\" (English).\n+onelogin.saml2.sp.attribute_consuming_service.lang = en\n+\n+# Attributes to be included in the Attribute Consuming Service when just one ACS should be declared by the SP.\n+# These are indexed properties, starting from 0. The index is used only to enumerate and sort attributes, but it's required.\n+# The following properties allow to define each attribute:\n+# - name: mandatory\n+# - name_format: optional; if omitted, defaults to urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\n+# - friendly_name: optional; if omitted, it won't appear in SP metadata\n+# - required: optional; if omitted or empty, defaults to false\n+# - value[x]: an attribute value; the [x] is only used only to enumerate and sort values, but it's required\n+# Please note that only simple values are currently supported and treated internally as strings. Hence no structured values\n+# and no ability to specify an xsi:type attribute. \n+# Attribute values are optional and most often they are simply omitted.\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].name = Email\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].name_format = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].friendly_name = E-mail address\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].required = true\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].value[0] = foo@example.org\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].value[1] = bar@example.org\n+onelogin.saml2.sp.attribute_consuming_service.attribute[1].name = FirstName\n+\n # Usually x509cert and privateKey of the SP are provided by files placed at\n # the certs folder. But we can also provide them with the following parameters\n onelogin.saml2.sp.x509cert = -----BEGIN CERTIFICATE-----MIICeDCCAeGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADBZMQswCQYDVQQGEwJ1czETMBEGA1UECAwKQ2FsaWZvcm5pYTEVMBMGA1UECgwMT25lTG9naW4gSW5jMR4wHAYDVQQDDBVqYXZhLXNhbWwuZXhhbXBsZS5jb20wHhcNMTUxMDE4MjAxMjM1WhcNMTgwNzE0MjAxMjM1WjBZMQswCQYDVQQGEwJ1czETMBEGA1UECAwKQ2FsaWZvcm5pYTEVMBMGA1UECgwMT25lTG9naW4gSW5jMR4wHAYDVQQDDBVqYXZhLXNhbWwuZXhhbXBsZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwEktX1+4y2AhEqxVwOO6HO7Wtzi3hr5becRkfLYGjNSyhzZCjI1DsNL61JSWDO3nviZd9fSkFnRC4akFUm0CS6GJ7TZe4T5o+9aowQ6N8e8cts9XPXyP6Inz7q4sD8pO2EInlfwHYPQCqFmz/SDW7cDgIC8vb0ygOsiXdreANAgMBAAGjUDBOMB0GA1UdDgQWBBTifMwN3CQ5ZOPkV5tDJsutU8teFDAfBgNVHSMEGDAWgBTifMwN3CQ5ZOPkV5tDJsutU8teFDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBDQUAA4GBAG3nAEUjJaA75SkzID5FKLolsxG5TE/0HU0+yEUAVkXiqvqN4mPWq/JjoK5+uP4LEZIb4pRrCqI3iHp+vazLLYSeyV3kaGN7q35Afw8nk8WM0f7vImbQ69j1S8GQ+6E0PEI26qBLykGkMn3GUVtBBWSdpP093NuNLJiOomnHqhqj-----END CERTIFICATE-----"
  },
  {
    "sha": "d2ef495b85851b1a1a32c3a59ee5a9de2fedcebc",
    "filename": "core/src/test/resources/config/config.all_multi_attribute_consuming_services.properties",
    "status": "added",
    "additions": 208,
    "deletions": 0,
    "changes": 208,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/resources/config/config.all_multi_attribute_consuming_services.properties",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/resources/config/config.all_multi_attribute_consuming_services.properties",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/test/resources/config/config.all_multi_attribute_consuming_services.properties?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -0,0 +1,208 @@\n+#  If 'strict' is True, then the Java Toolkit will reject unsigned\n+#  or unencrypted messages if it expects them signed or encrypted\n+#  Also will reject the messages if not strictly follow the SAML\n+onelogin.saml2.strict =  true\n+\n+# Enable debug mode (to print errors)\n+onelogin.saml2.debug =  true\n+\n+#  Service Provider Data that we are deploying\n+#  Identifier of the SP entity  (must be a URI)\n+onelogin.saml2.sp.entityid = http://localhost:8080/java-saml-jspsample/metadata.jsp\n+# Specifies info about where and how the <AuthnResponse> message MUST be\n+#  returned to the requester, in this case our SP.\n+# URL Location where the <Response> from the IdP will be returned\n+onelogin.saml2.sp.assertion_consumer_service.url = http://localhost:8080/java-saml-jspsample/acs.jsp\n+# SAML protocol binding to be used when returning the <Response> or sending the <LogoutRequest>\n+# message.  Onelogin Toolkit supports for this endpoint the\n+# HTTP-POST binding only\n+onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\n+\n+# Specifies info about Logout service\n+# URL Location where the <LogoutResponse> from the IdP will be returned or where to send the <LogoutRequest>\n+onelogin.saml2.sp.single_logout_service.url = http://localhost:8080/java-saml-jspsample/sls.jsp\n+\n+# SAML protocol binding for the Single Logout Service of the SP.\n+# Onelogin Toolkit supports for this endpoint the HTTP-Redirect binding only\n+onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\n+\n+# Specifies constraints on the name identifier to be used to\n+# represent the requested subject.\n+# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported\n+onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n+\n+# THE FOLLOWING PROPERTIES FOR SINGLE ACS MUST BE IGNORED - MULTIPLE SERVICES DEFINED LATER\n+\n+# Attribute Consuming Service name when just one ACS should be declared by the SP.\n+# Comment out or set to empty if no ACS should be declared, or if multiple ones should (see below). \n+# The service name is mandatory.\n+onelogin.saml2.sp.attribute_consuming_service.name = My service\n+\n+# Attribute Consuming Service description when just one ACS should be declared by the SP.\n+# Ignored if the previous property is commented or empty. \n+# The service description is optional.\n+onelogin.saml2.sp.attribute_consuming_service.description = My service description\n+\n+# Language used for Attribute Consuming Service name and description when just one ACS should be declared by the SP.\n+# Ignored if the name property is commented or empty. \n+# The language is optional and default to \"en\" (English).\n+onelogin.saml2.sp.attribute_consuming_service.lang = en\n+\n+# Attributes to be included in the Attribute Consuming Service when just one ACS should be declared by the SP.\n+# These are indexed properties, starting from 0. The index is used only to enumerate and sort attributes, but it's required.\n+# The following properties allow to define each attribute:\n+# - name: mandatory\n+# - name_format: optional; if omitted, defaults to urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\n+# - friendly_name: optional; if omitted, it won't appear in SP metadata\n+# - required: optional; if omitted or empty, defaults to false\n+# - value[x]: an attribute value; the [x] is only used only to enumerate and sort values, but it's required\n+# Please note that only simple values are currently supported and treated internally as strings. Hence no structured values\n+# and no ability to specify an xsi:type attribute. \n+# Attribute values are optional and most often they are simply omitted.\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].name = Email_Wrong\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].name_format = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].friendly_name = E-mail address\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].required = true\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].value[0] = foo_wrong@example.org\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].value[1] = bar_wrong@example.org\n+onelogin.saml2.sp.attribute_consuming_service.attribute[1].name = FirstName_Wrong\n+\n+# THE FOLLOWING PROPERTIES MUST BE PROCESSED INSTEAD\n+\n+onelogin.saml2.sp.attribute_consuming_service[0].name = Just e-mail\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].name = Email\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].name_format = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].friendly_name = E-mail address\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].required = true\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].value[0] = foo@example.org\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].value[1] = bar@example.org\n+onelogin.saml2.sp.attribute_consuming_service[1].name = Anagrafica\n+onelogin.saml2.sp.attribute_consuming_service[1].description = Servizio completo\n+onelogin.saml2.sp.attribute_consuming_service[1].lang = it\n+onelogin.saml2.sp.attribute_consuming_service[1].default = true\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[0].name = FirstName\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[1].name = LastName\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[1].required = true\n+\n+# Usually x509cert and privateKey of the SP are provided by files placed at\n+# the certs folder. But we can also provide them with the following parameters\n+onelogin.saml2.sp.x509cert = -----BEGIN CERTIFICATE-----MIICeDCCAeGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADBZMQswCQYDVQQGEwJ1czETMBEGA1UECAwKQ2FsaWZvcm5pYTEVMBMGA1UECgwMT25lTG9naW4gSW5jMR4wHAYDVQQDDBVqYXZhLXNhbWwuZXhhbXBsZS5jb20wHhcNMTUxMDE4MjAxMjM1WhcNMTgwNzE0MjAxMjM1WjBZMQswCQYDVQQGEwJ1czETMBEGA1UECAwKQ2FsaWZvcm5pYTEVMBMGA1UECgwMT25lTG9naW4gSW5jMR4wHAYDVQQDDBVqYXZhLXNhbWwuZXhhbXBsZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwEktX1+4y2AhEqxVwOO6HO7Wtzi3hr5becRkfLYGjNSyhzZCjI1DsNL61JSWDO3nviZd9fSkFnRC4akFUm0CS6GJ7TZe4T5o+9aowQ6N8e8cts9XPXyP6Inz7q4sD8pO2EInlfwHYPQCqFmz/SDW7cDgIC8vb0ygOsiXdreANAgMBAAGjUDBOMB0GA1UdDgQWBBTifMwN3CQ5ZOPkV5tDJsutU8teFDAfBgNVHSMEGDAWgBTifMwN3CQ5ZOPkV5tDJsutU8teFDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBDQUAA4GBAG3nAEUjJaA75SkzID5FKLolsxG5TE/0HU0+yEUAVkXiqvqN4mPWq/JjoK5+uP4LEZIb4pRrCqI3iHp+vazLLYSeyV3kaGN7q35Afw8nk8WM0f7vImbQ69j1S8GQ+6E0PEI26qBLykGkMn3GUVtBBWSdpP093NuNLJiOomnHqhqj-----END CERTIFICATE-----\n+\n+# To be used during SP Key roll over\n+onelogin.saml2.sp.x509certNew = -----BEGIN CERTIFICATE-----MIICeDCCAeGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADBZMQswCQYDVQQGEwJ1czETMBEGA1UECAwKQ2FsaWZvcm5pYTEVMBMGA1UECgwMT25lTG9naW4gSW5jMR4wHAYDVQQDDBVqYXZhLXNhbWwuZXhhbXBsZS5jb20wHhcNMTUxMDE4MjAxMjM1WhcNMTgwNzE0MjAxMjM1WjBZMQswCQYDVQQGEwJ1czETMBEGA1UECAwKQ2FsaWZvcm5pYTEVMBMGA1UECgwMT25lTG9naW4gSW5jMR4wHAYDVQQDDBVqYXZhLXNhbWwuZXhhbXBsZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALvwEktX1+4y2AhEqxVwOO6HO7Wtzi3hr5becRkfLYGjNSyhzZCjI1DsNL61JSWDO3nviZd9fSkFnRC4akFUm0CS6GJ7TZe4T5o+9aowQ6N8e8cts9XPXyP6Inz7q4sD8pO2EInlfwHYPQCqFmz/SDW7cDgIC8vb0ygOsiXdreANAgMBAAGjUDBOMB0GA1UdDgQWBBTifMwN3CQ5ZOPkV5tDJsutU8teFDAfBgNVHSMEGDAWgBTifMwN3CQ5ZOPkV5tDJsutU8teFDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBDQUAA4GBAG3nAEUjJaA75SkzID5FKLolsxG5TE/0HU0+yEUAVkXiqvqN4mPWq/JjoK5+uP4LEZIb4pRrCqI3iHp+vazLLYSeyV3kaGN7q35Afw8nk8WM0f7vImbQ69j1S8GQ+6E0PEI26qBLykGkMn3GUVtBBWSdpP093NuNLJiOomnHqhqj-----END CERTIFICATE-----\n+\n+# Requires Format PKCS#8   BEGIN PRIVATE KEY\t     \n+# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem\n+onelogin.saml2.sp.privatekey = -----BEGIN PRIVATE KEY-----MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALvwEktX1+4y2AhEqxVwOO6HO7Wtzi3hr5becRkfLYGjNSyhzZCjI1DsNL61JSWDO3nviZd9fSkFnRC4akFUm0CS6GJ7TZe4T5o+9aowQ6N8e8cts9XPXyP6Inz7q4sD8pO2EInlfwHYPQCqFmz/SDW7cDgIC8vb0ygOsiXdreANAgMBAAECgYA7VPVRl+/xoVeWdKdWY1F17HerSa23ynI2vQ8TkUY6kR3ucz6ElRxHJesY8fNCPoX+XuMfUly7IKyPZMkWyvEgDPo7J5mYqP5VsTK0Li4AwR/BA93Aw6gaX7/EYi3HjBh8QdNSt4fi9yOea/hv04yfR9Lx/a5fvQIyhqaDtT2QeQJBAOnCgnxnj70/sv9UsFPa8t1OGdAfXtOgEoklh1F2NR9jid6FPw5E98eCpdZ00MfRrmUavgqg6Y4swZISyzJIjGMCQQDN0YNsC4S+eJJM6aOCpupKluWE/cCWB01UQYekyXH7OdUtl49NlKEUPBSAvtaLMuMKlTNOjlPrx4Q+/c5i0vTPAkEA5H7CR9J/OZETaewhc8ZYkaRvLPYNHjWhCLhLXoB6itUkhgOfUFZwEXAOpOOI1VmL675JN2B1DAmJqTx/rQYnWwJBAMx3ztsAmnBq8dTM6y65ydouDHhRawjg2jbRHwNbSQvuyVSQ08Gb3WZvxWKdtB/3fsydqqnpBYAf5sZ5eJZ+wssCQAOiIKnhdYe+RBbBwykzjUqtzEmt4fwCFE8tD4feEx77D05j5f7u7KYh1mL0G2zIbnUryi7jwc4ye98VirRpZ1w=-----END PRIVATE KEY-----\n+\n+# Identity Provider Data that we want connect with our SP\n+# Identifier of the IdP entity  (must be a URI)\n+onelogin.saml2.idp.entityid = http://idp.example.com/\n+\n+# SSO endpoint info of the IdP. (Authentication Request protocol)\n+# URL Target of the IdP where the SP will send the Authentication Request Message\n+onelogin.saml2.idp.single_sign_on_service.url = http://idp.example.com/simplesaml/saml2/idp/SSOService.php\n+\n+# SAML protocol binding to be used when returning the <Response>\n+# message.  Onelogin Toolkit supports for this endpoint the\n+# HTTP-Redirect binding only\n+onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\n+\n+# SLO endpoint info of the IdP.\n+# URL Location of the IdP where the SP will send the SLO Request\n+onelogin.saml2.idp.single_logout_service.url = http://idp.example.com/simplesaml/saml2/idp/SingleLogoutService.php\n+\n+# Optional SLO Response endpoint info of the IdP.\n+# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.\n+# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url\n+onelogin.saml2.idp.single_logout_service.response.url = http://idp.example.com/simplesaml/saml2/idp/SingleLogoutServiceResponse.php\n+\n+# SAML protocol binding to be used when returning the <Response>\n+# message.  Onelogin Toolkit supports for this endpoint the\n+# HTTP-Redirect binding only\n+onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\n+\n+# Public x509 certificate of the IdP\n+onelogin.saml2.idp.x509cert = -----BEGIN CERTIFICATE-----\\nMIIBrTCCAaGgAwIBAgIBATADBgEAMGcxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRUwEwYDVQQHDAxTYW50YSBNb25pY2ExETAPBgNVBAoMCE9uZUxvZ2luMRkwFwYDVQQDDBBhcHAub25lbG9naW4uY29tMB4XDTEwMTAxMTIxMTUxMloXDTE1MTAxMTIxMTUxMlowZzELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFTATBgNVBAcMDFNhbnRhIE1vbmljYTERMA8GA1UECgwIT25lTG9naW4xGTAXBgNVBAMMEGFwcC5vbmVsb2dpbi5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMPmjfjy7L35oDpeBXBoRVCgktPkLno9DOEWB7MgYMMVKs2B6ymWQLEWrDugMK1hkzWFhIb5fqWLGbWy0J0veGR9/gHOQG+rD/I36xAXnkdiXXhzoiAG/zQxM0edMOUf40n314FC8moErcUg6QabttzesO59HFz6shPuxcWaVAgxAgMBAAEwAwYBAAMBAA==\\n-----END CERTIFICATE-----\n+onelogin.saml2.idp.certfingerprint = 4b6f70bb2cab82c86a8270f71a880b62e25bc2b3\n+onelogin.saml2.idp.certfingerprint_algorithm = sha1\n+\n+# Security settings\n+#\n+\n+# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP\n+# will be encrypted.\n+onelogin.saml2.security.nameid_encrypted = true\n+\n+# Indicates whether the <samlp:AuthnRequest> messages sent by this SP\n+# will be signed.              [The Metadata of the SP will offer this info]\n+onelogin.saml2.security.authnrequest_signed = true\n+\n+# Indicates whether the <samlp:logoutRequest> messages sent by this SP\n+# will be signed.\n+onelogin.saml2.security.logoutrequest_signed = true\n+\n+# Indicates whether the <samlp:logoutResponse> messages sent by this SP\n+# will be signed.\n+onelogin.saml2.security.logoutresponse_signed = true\n+\n+# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and\n+# <samlp:LogoutResponse> elements received by this SP to be signed.\n+onelogin.saml2.security.want_messages_signed = true\n+\n+# Indicates a requirement for the <saml:Assertion> of the <samlp:Response> to be signed\n+onelogin.saml2.security.want_assertions_signed = true\n+\n+# Indicates a requirement for the Metadata of this SP to be signed.\n+# Right now supported null/false (in order to not sign) or true (sign using SP private key) \n+onelogin.saml2.security.sign_metadata = true\n+\n+# Indicates a requirement for the Assertions received by this SP to be encrypted\n+onelogin.saml2.security.want_assertions_encrypted = true\n+\n+# Indicates a requirement for the NameID received by this SP to be encrypted\n+onelogin.saml2.security.want_nameid_encrypted = true\n+\n+# Authentication context.\n+# Set Empty and no AuthContext will be sent in the AuthNRequest,\n+# Set comma separated values urn:oasis:names:tc:SAML:2.0:ac:classes:urn:oasis:names:tc:SAML:2.0:ac:classes:Password\n+onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:urn:oasis:names:tc:SAML:2.0:ac:classes:Password\n+\n+# Allows the authn comparison parameter to be set, defaults to 'exact'\n+onelogin.saml2.security.requested_authncontextcomparison = exact\n+\n+\n+# Indicates if the SP will validate all received xmls.\n+# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).\n+onelogin.saml2.security.want_xml_validation = true\n+\n+# Algorithm that the toolkit will use on signing process. Options:\n+#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'\n+#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'\n+#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'\n+#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'\n+onelogin.saml2.security.signature_algorithm = http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\n+\n+# Algorithm that the toolkit will use on digest process. Options:\n+#  'http://www.w3.org/2000/09/xmldsig#sha1'\n+#  'http://www.w3.org/2001/04/xmlenc#sha256'\n+#  'http://www.w3.org/2001/04/xmldsig-more#sha384'\n+#  'http://www.w3.org/2001/04/xmlenc#sha512'\n+onelogin.saml2.security.digest_algorithm = http://www.w3.org/2001/04/xmlenc#sha512\n+\n+# Organization\n+onelogin.saml2.organization.name = SP Java \n+onelogin.saml2.organization.displayname = SP Java Example\n+onelogin.saml2.organization.url = http://sp.example.com\n+onelogin.saml2.organization.lang = en\n+\n+# Contacts\n+onelogin.saml2.contacts.technical.given_name = Technical Guy\n+onelogin.saml2.contacts.technical.email_address = technical@example.com\n+onelogin.saml2.contacts.support.given_name = Support Guy\n+onelogin.saml2.contacts.support.email_address = support@example.com\n+\n+# Prefix used in generated Unique IDs.\n+# Optional, defaults to ONELOGIN_ or full ID is like ONELOGIN_ebb0badd-4f60-4b38-b20a-a8e01f0592b1.\n+# At minimun, the prefix can be non-numeric character such as \"_\".\n+onelogin.saml2.unique_id_prefix = EXAMPLE"
  },
  {
    "sha": "a4ce66ece44ace77fb9fe94cd61ac66ca9809f69",
    "filename": "core/src/test/resources/config/config.min_multi_attribute_consuming_services.properties",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/resources/config/config.min_multi_attribute_consuming_services.properties",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/core/src/test/resources/config/config.min_multi_attribute_consuming_services.properties",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/core/src/test/resources/config/config.min_multi_attribute_consuming_services.properties?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -0,0 +1,62 @@\n+#  Service Provider Data that we are deploying\n+#  Identifier of the SP entity  (must be a URI)\n+onelogin.saml2.sp.entityid = http://localhost:8080/java-saml-jspsample/metadata.jsp\n+# Specifies info about where and how the <AuthnResponse> message MUST be\n+#  returned to the requester, in this case our SP.\n+# URL Location where the <Response> from the IdP will be returned\n+onelogin.saml2.sp.assertion_consumer_service.url = http://localhost:8080/java-saml-jspsample/acs.jsp\n+\n+# Specifies info about Logout service\n+# URL Location where the <LogoutResponse> from the IdP will be returned or where to send the <LogoutRequest>\n+onelogin.saml2.sp.single_logout_service.url = http://localhost:8080/java-saml-jspsample/sls.jsp\n+\n+# Attributes to be included in the Attribute Consuming Service when just one ACS should be declared by the SP.\n+# These are indexed properties, starting from 0. The index is used only to enumerate and sort attributes, but it's required.\n+# The following properties allow to define each attribute:\n+# - name: mandatory\n+# - name_format: optional; if omitted, defaults to urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\n+# - friendly_name: optional; if omitted, it won't appear in SP metadata\n+# - required: optional; if omitted or empty, defaults to false\n+# - value[x]: an attribute value; the [x] is only used only to enumerate and sort values, but it's required\n+# Please note that only simple values are currently supported and treated internally as strings. Hence no structured values\n+# and no ability to specify an xsi:type attribute. \n+# Attribute values are optional and most often they are simply omitted.\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].name = Email_Wrong\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].name_format = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].friendly_name = E-mail address\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].required = true\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].value[0] = foo_wrong@example.org\n+onelogin.saml2.sp.attribute_consuming_service.attribute[0].value[1] = bar_wrong@example.org\n+onelogin.saml2.sp.attribute_consuming_service.attribute[1].name = FirstName_Wrong\n+\n+# THE FOLLOWING PROPERTIES MUST BE PROCESSED INSTEAD\n+\n+onelogin.saml2.sp.attribute_consuming_service[0].name = Just e-mail\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].name = Email\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].name_format = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].friendly_name = E-mail address\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].required = true\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].value[0] = foo@example.org\n+onelogin.saml2.sp.attribute_consuming_service[0].attribute[0].value[1] = bar@example.org\n+onelogin.saml2.sp.attribute_consuming_service[1].name = Anagrafica\n+onelogin.saml2.sp.attribute_consuming_service[1].description = Servizio completo\n+onelogin.saml2.sp.attribute_consuming_service[1].lang = it\n+onelogin.saml2.sp.attribute_consuming_service[1].default = true\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[0].name = FirstName\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[1].name = LastName\n+onelogin.saml2.sp.attribute_consuming_service[1].attribute[1].required = true\n+\n+# Identity Provider Data that we want connect with our SP\n+# Identifier of the IdP entity  (must be a URI)\n+onelogin.saml2.idp.entityid = http://idp.example.com/\n+\n+# SSO endpoint info of the IdP. (Authentication Request protocol)\n+# URL Target of the IdP where the SP will send the Authentication Request Message\n+onelogin.saml2.idp.single_sign_on_service.url = http://idp.example.com/simplesaml/saml2/idp/SSOService.php\n+\n+# SLO endpoint info of the IdP.\n+# URL Location of the IdP where the SP will send the SLO Request\n+onelogin.saml2.idp.single_logout_service.url = http://idp.example.com/simplesaml/saml2/idp/SingleLogoutService.php\n+\n+# Public x509 certificate of the IdP\n+onelogin.saml2.idp.x509cert = -----BEGIN CERTIFICATE-----\\nMIIBrTCCAaGgAwIBAgIBATADBgEAMGcxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRUwEwYDVQQHDAxTYW50YSBNb25pY2ExETAPBgNVBAoMCE9uZUxvZ2luMRkwFwYDVQQDDBBhcHAub25lbG9naW4uY29tMB4XDTEwMTAxMTIxMTUxMloXDTE1MTAxMTIxMTUxMlowZzELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFTATBgNVBAcMDFNhbnRhIE1vbmljYTERMA8GA1UECgwIT25lTG9naW4xGTAXBgNVBAMMEGFwcC5vbmVsb2dpbi5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMPmjfjy7L35oDpeBXBoRVCgktPkLno9DOEWB7MgYMMVKs2B6ymWQLEWrDugMK1hkzWFhIb5fqWLGbWy0J0veGR9/gHOQG+rD/I36xAXnkdiXXhzoiAG/zQxM0edMOUf40n314FC8moErcUg6QabttzesO59HFz6shPuxcWaVAgxAgMBAAEwAwYBAAMBAA==\\n-----END CERTIFICATE-----\n\\ No newline at end of file"
  },
  {
    "sha": "3effe63263840ba5b41313cde5c3235b82aa3ee2",
    "filename": "toolkit/src/main/java/com/onelogin/saml2/Auth.java",
    "status": "modified",
    "additions": 190,
    "deletions": 90,
    "changes": 280,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/toolkit/src/main/java/com/onelogin/saml2/Auth.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/toolkit/src/main/java/com/onelogin/saml2/Auth.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/toolkit/src/main/java/com/onelogin/saml2/Auth.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -22,6 +22,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.onelogin.saml2.authn.AuthnRequest;\n+import com.onelogin.saml2.authn.AuthnRequestParams;\n import com.onelogin.saml2.authn.SamlResponse;\n import com.onelogin.saml2.exception.SettingsException;\n import com.onelogin.saml2.exception.Error;\n@@ -310,140 +311,129 @@ public void setStrict(Boolean value) {\n \t/**\n \t * Initiates the SSO process.\n \t *\n-\t * @param returnTo        The target URL the user should be returned to after\n-\t *                        login (relayState). Will be a self-routed URL when\n-\t *                        null, or not be appended at all when an empty string\n-\t *                        is provided\n-\t * @param forceAuthn      When true the AuthNRequest will set the\n-\t *                        ForceAuthn='true'\n-\t * @param isPassive       When true the AuthNRequest will set the\n-\t *                        IsPassive='true'\n-\t * @param setNameIdPolicy When true the AuthNRequest will set a nameIdPolicy\n-\t * @param stay            True if we want to stay (returns the url string) False\n-\t *                        to execute redirection\n-\t * @param nameIdValueReq  Indicates to the IdP the subject that should be\n-\t *                        authenticated\n+\t * @param returnTo\n+\t *              The target URL the user should be returned to after login\n+\t *              (relayState). Will be a self-routed URL when null, or not be\n+\t *              appended at all when an empty string is provided\n+\t * @param forceAuthn\n+\t *              When true the AuthNRequest will set the ForceAuthn='true'\n+\t * @param isPassive\n+\t *              When true the AuthNRequest will set the IsPassive='true'\n+\t * @param setNameIdPolicy\n+\t *              When true the AuthNRequest will set a nameIdPolicy\n+\t * @param stay\n+\t *              True if we want to stay (returns the url string) False to\n+\t *              execute redirection\n+\t * @param nameIdValueReq\n+\t *              Indicates to the IdP the subject that should be authenticated\n \t *\n \t * @return the SSO URL with the AuthNRequest if stay = True\n \t *\n \t * @throws IOException\n \t * @throws SettingsException\n+\t * @deprecated use {@link #login(String, AuthnRequestParams, Boolean)} with\n+\t *             {@link AuthnRequestParams#AuthnRequestParams(boolean, boolean, boolean, String)}\n+\t *             instead\n \t */\n+\t@Deprecated\n \tpublic String login(String returnTo, Boolean forceAuthn, Boolean isPassive, Boolean setNameIdPolicy, Boolean stay,\n \t\t\tString nameIdValueReq) throws IOException, SettingsException {\n \t\tMap<String, String> parameters = new HashMap<String, String>();\n-\t\treturn login(returnTo, forceAuthn, isPassive, setNameIdPolicy, stay,\n-\t\t\t\tnameIdValueReq, parameters);\n+\t\treturn login(returnTo, new AuthnRequestParams(forceAuthn, isPassive, setNameIdPolicy, nameIdValueReq), stay,\n+\t\t            parameters);\n \t}\n \n \t/**\n \t * Initiates the SSO process.\n \t *\n-\t * @param returnTo        The target URL the user should be returned to after\n-\t *                        login (relayState). Will be a self-routed URL when\n-\t *                        null, or not be appended at all when an empty string\n-\t *                        is provided\n-\t * @param forceAuthn      When true the AuthNRequest will set the\n-\t *                        ForceAuthn='true'\n-\t * @param isPassive       When true the AuthNRequest will set the\n-\t *                        IsPassive='true'\n-\t * @param setNameIdPolicy When true the AuthNRequest will set a nameIdPolicy\n-\t * @param stay            True if we want to stay (returns the url string) False\n-\t *                        to execute redirection\n-\t * @param nameIdValueReq  Indicates to the IdP the subject that should be\n-\t *                        authenticated\n-\t * @param parameters      Use it to send extra parameters in addition to the AuthNRequest\n+\t * @param returnTo\n+\t *              The target URL the user should be returned to after login\n+\t *              (relayState). Will be a self-routed URL when null, or not be\n+\t *              appended at all when an empty string is provided\n+\t * @param forceAuthn\n+\t *              When true the AuthNRequest will set the ForceAuthn='true'\n+\t * @param isPassive\n+\t *              When true the AuthNRequest will set the IsPassive='true'\n+\t * @param setNameIdPolicy\n+\t *              When true the AuthNRequest will set a nameIdPolicy\n+\t * @param stay\n+\t *              True if we want to stay (returns the url string) False to\n+\t *              execute redirection\n+\t * @param nameIdValueReq\n+\t *              Indicates to the IdP the subject that should be authenticated\n+\t * @param parameters\n+\t *              Use it to send extra parameters in addition to the AuthNRequest\n \t *\n \t * @return the SSO URL with the AuthNRequest if stay = True\n \t *\n \t * @throws IOException\n \t * @throws SettingsException\n+\t * @deprecated use {@link #login(String, AuthnRequestParams, Boolean, Map)} with\n+\t *             {@link AuthnRequestParams#AuthnRequestParams(boolean, boolean, boolean, String)}\n+\t *             instead\n \t */\n+\t@Deprecated\n \tpublic String login(String returnTo, Boolean forceAuthn, Boolean isPassive, Boolean setNameIdPolicy, Boolean stay,\n \t\t\tString nameIdValueReq, Map<String, String> parameters) throws IOException, SettingsException {\n-\t\tAuthnRequest authnRequest = new AuthnRequest(settings, forceAuthn, isPassive, setNameIdPolicy, nameIdValueReq);\n-\n-\t\tif (parameters == null) {\n-\t\t\tparameters = new HashMap<String, String>();\n-\t\t}\n-\n-\t\tString samlRequest = authnRequest.getEncodedAuthnRequest();\n-\n-\t\tparameters.put(\"SAMLRequest\", samlRequest);\n-\n-\t\tString relayState;\n-\t\tif (returnTo == null) {\n-\t\t\trelayState = ServletUtils.getSelfRoutedURLNoQuery(request);\n-\t\t} else {\n-\t\t\trelayState = returnTo;\n-\t\t}\n-\n-\t\tif (!relayState.isEmpty()) {\n-\t\t\tparameters.put(\"RelayState\", relayState);\n-\t\t}\n-\n-\t\tif (settings.getAuthnRequestsSigned()) {\n-\t\t\tString sigAlg = settings.getSignatureAlgorithm();\n-\t\t\tString signature = this.buildRequestSignature(samlRequest, relayState, sigAlg);\n-\n-\t\t\tparameters.put(\"SigAlg\", sigAlg);\n-\t\t\tparameters.put(\"Signature\", signature);\n-\t\t}\n-\n-\t\tString ssoUrl = getSSOurl();\n-\t\tlastRequestId = authnRequest.getId();\n-\t\tlastRequest = authnRequest.getAuthnRequestXml();\n-\n-\t\tif (!stay) {\n-\t\t\tLOGGER.debug(\"AuthNRequest sent to \" + ssoUrl + \" --> \" + samlRequest);\n-\t\t}\n-\t\treturn ServletUtils.sendRedirect(response, ssoUrl, parameters, stay);\n+\t\treturn login(returnTo, new AuthnRequestParams(forceAuthn, isPassive, setNameIdPolicy, nameIdValueReq), stay,\n+\t\t            parameters);\n \t}\n \n \t/**\n \t * Initiates the SSO process.\n \t *\n-\t * @param returnTo        The target URL the user should be returned to after\n-\t *                        login (relayState). Will be a self-routed URL when\n-\t *                        null, or not be appended at all when an empty string\n-\t *                        is provided\n-\t * @param forceAuthn      When true the AuthNRequest will set the\n-\t *                        ForceAuthn='true'\n-\t * @param isPassive       When true the AuthNRequest will set the\n-\t *                        IsPassive='true'\n-\t * @param setNameIdPolicy When true the AuthNRequest will set a nameIdPolicy\n-\t * @param stay            True if we want to stay (returns the url string) False\n-\t *                        to execute redirection\n+\t * @param returnTo\n+\t *              The target URL the user should be returned to after login\n+\t *              (relayState). Will be a self-routed URL when null, or not be\n+\t *              appended at all when an empty string is provided\n+\t * @param forceAuthn\n+\t *              When true the AuthNRequest will set the ForceAuthn='true'\n+\t * @param isPassive\n+\t *              When true the AuthNRequest will set the IsPassive='true'\n+\t * @param setNameIdPolicy\n+\t *              When true the AuthNRequest will set a nameIdPolicy\n+\t * @param stay\n+\t *              True if we want to stay (returns the url string) False to\n+\t *              execute redirection\n \t *\n \t * @return the SSO URL with the AuthNRequest if stay = True\n \t *\n \t * @throws IOException\n \t * @throws SettingsException\n+\t * @deprecated use {@link #login(String, AuthnRequestParams, Boolean)} with\n+\t *             {@link AuthnRequestParams#AuthnRequestParams(boolean, boolean, boolean)}\n+\t *             instead\n \t */\n+\t@Deprecated\n \tpublic String login(String returnTo, Boolean forceAuthn, Boolean isPassive, Boolean setNameIdPolicy, Boolean stay)\n \t\t\tthrows IOException, SettingsException {\n-\t\treturn login(returnTo, forceAuthn, isPassive, setNameIdPolicy, stay, null);\n+\t\treturn login(returnTo, new AuthnRequestParams(forceAuthn, isPassive, setNameIdPolicy), stay, null);\n \t}\n \n \t/**\n \t * Initiates the SSO process.\n \t *\n-\t * @param returnTo        The target URL the user should be returned to after\n-\t *                        login (relayState). Will be a self-routed URL when\n-\t *                        null, or not be appended at all when an empty string\n-\t *                        is provided\n-\t * @param forceAuthn      When true the AuthNRequest will set the\n-\t *                        ForceAuthn='true'\n-\t * @param isPassive       When true the AuthNRequest will set the\n-\t *                        IsPassive='true'\n-\t * @param setNameIdPolicy When true the AuthNRequest will set a nameIdPolicy\n+\t * @param returnTo\n+\t *              The target URL the user should be returned to after login\n+\t *              (relayState). Will be a self-routed URL when null, or not be\n+\t *              appended at all when an empty string is provided\n+\t * @param forceAuthn\n+\t *              When true the AuthNRequest will set the ForceAuthn='true'\n+\t * @param isPassive\n+\t *              When true the AuthNRequest will set the IsPassive='true'\n+\t * @param setNameIdPolicy\n+\t *              When true the AuthNRequest will set a nameIdPolicy\n \t *\n \t * @throws IOException\n \t * @throws SettingsException\n+\t * @deprecated use {@link #login(String, AuthnRequestParams)} with\n+\t *             {@link AuthnRequestParams#AuthnRequestParams(boolean, boolean, boolean)}\n+\t *             instead\n \t */\n+\t@Deprecated\n \tpublic void login(String returnTo, Boolean forceAuthn, Boolean isPassive, Boolean setNameIdPolicy)\n \t\t\tthrows IOException, SettingsException {\n-\t\tlogin(returnTo, forceAuthn, isPassive, setNameIdPolicy, false);\n+\t\tlogin(returnTo, new AuthnRequestParams(forceAuthn, isPassive, setNameIdPolicy), false);\n \t}\n \n \t/**\n@@ -453,7 +443,20 @@ public void login(String returnTo, Boolean forceAuthn, Boolean isPassive, Boolea\n \t * @throws SettingsException\n \t */\n \tpublic void login() throws IOException, SettingsException {\n-\t\tlogin(null, false, false, true);\n+\t\tlogin(null, new AuthnRequestParams(false, false, true));\n+\t}\n+\n+\t/**\n+\t * Initiates the SSO process.\n+\t *\n+\t * @param authnRequestParams\n+\t *              the authentication request input parameters\n+\t *\n+\t * @throws IOException\n+\t * @throws SettingsException\n+\t */\n+\tpublic void login(AuthnRequestParams authnRequestParams) throws IOException, SettingsException {\n+\t\tlogin(null, authnRequestParams);\n \t}\n \n \t/**\n@@ -467,7 +470,104 @@ public void login() throws IOException, SettingsException {\n \t * @throws SettingsException\n \t */\n \tpublic void login(String returnTo) throws IOException, SettingsException {\n-\t\tlogin(returnTo, false, false, true);\n+\t\tlogin(returnTo, new AuthnRequestParams(false, false, true));\n+\t}\n+\n+\t/**\n+\t * Initiates the SSO process.\n+\t *\n+\t * @param returnTo\n+\t *              The target URL the user should be returned to after login\n+\t *              (relayState). Will be a self-routed URL when null, or not be\n+\t *              appended at all when an empty string is provided\n+\t * @param authnRequestParams\n+\t *              the authentication request input parameters\n+\t *\n+\t * @throws IOException\n+\t * @throws SettingsException\n+\t */\n+\tpublic void login(String returnTo, AuthnRequestParams authnRequestParams) throws IOException, SettingsException {\n+\t\tlogin(returnTo, authnRequestParams, false);\n+\t}\n+\n+\t/**\n+\t * Initiates the SSO process.\n+\t *\n+\t * @param returnTo\n+\t *              The target URL the user should be returned to after login\n+\t *              (relayState). Will be a self-routed URL when null, or not be\n+\t *              appended at all when an empty string is provided\n+\t * @param authnRequestParams\n+\t *              the authentication request input parameters\n+\t * @param stay\n+\t *              True if we want to stay (returns the url string) False to\n+\t *              execute redirection\n+\t *\n+\t * @return the SSO URL with the AuthNRequest if stay = True\n+\t *\n+\t * @throws IOException\n+\t * @throws SettingsException\n+\t */\n+\tpublic String login(String returnTo, AuthnRequestParams authnRequestParams, Boolean stay) throws IOException, SettingsException {\n+\t\treturn login(returnTo, authnRequestParams, stay, new HashMap<>());\n+\t}\n+\n+\t/**\n+\t * Initiates the SSO process.\n+\t *\n+\t * @param returnTo\n+\t *              The target URL the user should be returned to after login\n+\t *              (relayState). Will be a self-routed URL when null, or not be\n+\t *              appended at all when an empty string is provided\n+\t * @param authnRequestParams\n+\t *              the authentication request input parameters\n+\t * @param stay\n+\t *              True if we want to stay (returns the url string) False to\n+\t *              execute redirection\n+\t * @param parameters\n+\t *              Use it to send extra parameters in addition to the AuthNRequest\n+\t *\n+\t * @return the SSO URL with the AuthNRequest if stay = True\n+\t *\n+\t * @throws IOException\n+\t * @throws SettingsException\n+\t */\n+\tpublic String login(String returnTo, AuthnRequestParams authnRequestParams, Boolean stay, Map<String, String> parameters) throws IOException, SettingsException {\n+\t\tif (parameters == null) {\n+\t\t\tparameters = new HashMap<String, String>();\n+\t\t}\n+\t\tAuthnRequest authnRequest = new AuthnRequest(settings, authnRequestParams);\n+\t\tString samlRequest = authnRequest.getEncodedAuthnRequest();\n+\n+\t\tparameters.put(\"SAMLRequest\", samlRequest);\n+\n+\t\tString relayState;\n+\t\tif (returnTo == null) {\n+\t\t\trelayState = ServletUtils.getSelfRoutedURLNoQuery(request);\n+\t\t} else {\n+\t\t\trelayState = returnTo;\n+\t\t}\n+\n+\t\tif (!relayState.isEmpty()) {\n+\t\t\tparameters.put(\"RelayState\", relayState);\n+\t\t}\n+\n+\t\tif (settings.getAuthnRequestsSigned()) {\n+\t\t\tString sigAlg = settings.getSignatureAlgorithm();\n+\t\t\tString signature = this.buildRequestSignature(samlRequest, relayState, sigAlg);\n+\n+\t\t\tparameters.put(\"SigAlg\", sigAlg);\n+\t\t\tparameters.put(\"Signature\", signature);\n+\t\t}\n+\n+\t\tString ssoUrl = getSSOurl();\n+\t\tlastRequestId = authnRequest.getId();\n+\t\tlastRequest = authnRequest.getAuthnRequestXml();\n+\n+\t\tif (!stay) {\n+\t\t\tLOGGER.debug(\"AuthNRequest sent to \" + ssoUrl + \" --> \" + samlRequest);\n+\t\t}\n+\t\treturn ServletUtils.sendRedirect(response, ssoUrl, parameters, stay);\n \t}\n \n \t/**"
  },
  {
    "sha": "ede64a336d4f7d08d9965c6b0bbeba4616bc3126",
    "filename": "toolkit/src/test/java/com/onelogin/saml2/test/AuthTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 11,
    "changes": 22,
    "blob_url": "https://github.com/onelogin/java-saml/blob/0905b852164e9059e072490ca1ddc916b2ce6f15/toolkit/src/test/java/com/onelogin/saml2/test/AuthTest.java",
    "raw_url": "https://github.com/onelogin/java-saml/raw/0905b852164e9059e072490ca1ddc916b2ce6f15/toolkit/src/test/java/com/onelogin/saml2/test/AuthTest.java",
    "contents_url": "https://api.github.com/repos/onelogin/java-saml/contents/toolkit/src/test/java/com/onelogin/saml2/test/AuthTest.java?ref=0905b852164e9059e072490ca1ddc916b2ce6f15",
    "patch": "@@ -42,21 +42,21 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n+import org.mockito.ArgumentCaptor;\n+import org.w3c.dom.Document;\n \n import com.onelogin.saml2.Auth;\n+import com.onelogin.saml2.authn.AuthnRequestParams;\n import com.onelogin.saml2.exception.Error;\n-import com.onelogin.saml2.exception.ValidationError;\n import com.onelogin.saml2.exception.SettingsException;\n+import com.onelogin.saml2.exception.ValidationError;\n import com.onelogin.saml2.exception.XMLEntityException;\n import com.onelogin.saml2.model.KeyStoreSettings;\n import com.onelogin.saml2.settings.Saml2Settings;\n import com.onelogin.saml2.settings.SettingsBuilder;\n import com.onelogin.saml2.util.Constants;\n import com.onelogin.saml2.util.Util;\n \n-import org.mockito.ArgumentCaptor;\n-import org.w3c.dom.Document;\n-\n public class AuthTest {\n \n \t@Rule\n@@ -1380,7 +1380,7 @@ public void testLoginWithExtraParameters() throws IOException, SettingsException\n \t\tAuth auth = new Auth(settings, request, response);\n \t\tMap<String, String> extraParameters = new HashMap<String, String>();\n \t\textraParameters.put(\"parameter1\", \"xxx\");\n-\t\tString target = auth.login(\"\", false, false, false, true, null, extraParameters);\n+\t\tString target = auth.login(\"\", new AuthnRequestParams(false, false, false), true, extraParameters);\n \t\tassertThat(target, startsWith(\"https://pitbulk.no-ip.org/simplesaml/saml2/idp/SSOService.php?SAMLRequest=\"));\n \t\tassertThat(target, containsString(\"&parameter1=xxx\"));\n \t}\n@@ -1409,12 +1409,12 @@ public void testLoginStay() throws IOException, SettingsException, URISyntaxExce\n \t\tsettings.setAuthnRequestsSigned(false);\n \n \t\tAuth auth = new Auth(settings, request, response);\n-\t\tString target = auth.login(\"\", false, false, false, true);\n+\t\tString target = auth.login(\"\", new AuthnRequestParams(false, false, false), true);\n \t\tassertThat(target, startsWith(\"https://pitbulk.no-ip.org/simplesaml/saml2/idp/SSOService.php?SAMLRequest=\"));\n \t\tassertThat(target, not(containsString(\"&RelayState=\")));\n \n \t\tString relayState = \"http://localhost:8080/expected.jsp\";\n-\t\ttarget = auth.login(relayState, false, false, false, true);\n+\t\ttarget = auth.login(relayState, new AuthnRequestParams(false, false, false), true);\n \t\tassertThat(target, startsWith(\"https://pitbulk.no-ip.org/simplesaml/saml2/idp/SSOService.php?SAMLRequest=\"));\n \t\tassertThat(target, containsString(\"&RelayState=http%3A%2F%2Flocalhost%3A8080%2Fexpected.jsp\"));\t\t\n \t}\n@@ -1442,13 +1442,13 @@ public void testLoginSubject() throws IOException, SettingsException, URISyntaxE\n \t\tSaml2Settings settings = new SettingsBuilder().fromFile(\"config/config.min.properties\").build();\n \n \t\tAuth auth = new Auth(settings, request, response);\n-\t\tString target = auth.login(\"\", false, false, false, true);\n+\t\tString target = auth.login(\"\", new AuthnRequestParams(false, false, false), true);\n \t\tassertThat(target, startsWith(\"http://idp.example.com/simplesaml/saml2/idp/SSOService.php?SAMLRequest=\"));\n \t\tString authNRequestStr = getSAMLRequestFromURL(target);\n \t\tassertThat(authNRequestStr, containsString(\"<samlp:AuthnRequest\"));\n \t\tassertThat(authNRequestStr, not(containsString(\"<saml:Subject\")));\n \n-\t\ttarget = auth.login(\"\", false, false, false, true, \"testuser@example.com\");\n+\t\ttarget = auth.login(\"\", new AuthnRequestParams(false, false, false, \"testuser@example.com\"), true);\n \t\tassertThat(target, startsWith(\"http://idp.example.com/simplesaml/saml2/idp/SSOService.php?SAMLRequest=\"));\n \t\tauthNRequestStr = getSAMLRequestFromURL(target);\n \t\tassertThat(authNRequestStr, containsString(\"<samlp:AuthnRequest\"));\n@@ -1458,7 +1458,7 @@ public void testLoginSubject() throws IOException, SettingsException, URISyntaxE\n \n \t\tsettings = new SettingsBuilder().fromFile(\"config/config.emailaddressformat.properties\").build();\n \t\tauth = new Auth(settings, request, response);\n-\t\ttarget = auth.login(\"\", false, false, false, true, \"testuser@example.com\");\n+\t\ttarget = auth.login(\"\", new AuthnRequestParams(false, false, false, \"testuser@example.com\"), true);\n \t\tassertThat(target, startsWith(\"http://idp.example.com/simplesaml/saml2/idp/SSOService.php?SAMLRequest=\"));\n \t\tauthNRequestStr = getSAMLRequestFromURL(target);\n \t\tassertThat(authNRequestStr, containsString(\"<samlp:AuthnRequest\"));\n@@ -2085,7 +2085,7 @@ public void testGetLastAuthNRequest() throws IOException, SettingsException, Err\n \t\tSaml2Settings settings = new SettingsBuilder().fromFile(\"config/config.min.properties\").build();\n \n \t\tAuth auth = new Auth(settings, request, response);\n-\t\tString targetSSOURL = auth.login(null, false, false, false, true);\n+\t\tString targetSSOURL = auth.login(null, new AuthnRequestParams(false, false, false), true);\n \t\tString authNRequestXML = auth.getLastRequestXML();\n \t\tassertThat(targetSSOURL, containsString(Util.urlEncoder(Util.deflatedBase64encoded(authNRequestXML))));\n \t}"
  }
]
