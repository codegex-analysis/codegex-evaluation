[
  {
    "sha": "90efd72535c2c959229308a10cb028f8e2cd60eb",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/AuthForm.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/AuthForm.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/AuthForm.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/AuthForm.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,66 @@\n+package ru.geekbrains;\n+\n+import ru.geekbrains.ChatWindow;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class AuthForm extends JFrame {\n+    private final int SETTINGS_WIDTH = 350;\n+    private final int SETTINGS_HEIGHT = 300;\n+    private ChatWindow ChatWindow;\n+    private final JLabel userLabel, passLabel;\n+    private final JTextField nameField;\n+    private final JButton loginBtn;\n+    private final JTextField passField;\n+\n+    AuthForm (ChatWindow ChatWindow){\n+        this.ChatWindow = ChatWindow;\n+        setSize(SETTINGS_WIDTH, SETTINGS_HEIGHT);\n+        Rectangle authFormBounds = ChatWindow.getBounds();\n+        int settingsX = (int) authFormBounds.getCenterX() - SETTINGS_WIDTH / 2;\n+        int settingsY = (int) authFormBounds.getCenterY() - SETTINGS_HEIGHT / 2;\n+        setLocation(settingsX, settingsY);\n+        setResizable(false);\n+        setTitle(\"Authorization\");\n+\n+\n+        userLabel = new JLabel(\"Login\");\n+        passLabel = new JLabel(\"Password\");\n+        nameField = new JTextField();\n+        passField = new JTextField();\n+        loginBtn = new JButton(\"Login\");\n+\n+        userLabel.setBounds(20, 70, 200, 30);\n+        passLabel.setBounds(20, 110, 200, 30);\n+        nameField.setBounds(100, 70, 200, 30);\n+        passField.setBounds(100, 110, 200, 30);\n+        loginBtn.setBounds(120, 160, 100, 30);\n+\n+        add(userLabel);\n+        add(nameField);\n+        add(passLabel);\n+        add(passField);\n+        add(loginBtn);\n+\n+        loginBtn.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                String login = nameField.getText();\n+                String password = passField.getText();\n+                if (login.equals(\"\") || password.equals(\"\")) return;\n+\n+                ChatWindow.startAuth(login, password);\n+\n+            }\n+        });\n+\n+        setLayout(null);\n+        setVisible(true);\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "f1ddd0271591acf68de5a4de64df8c60a3c7add8",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/AuthService.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/AuthService.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/AuthService.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/AuthService.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.geekbrains;\n+\n+public interface AuthService {\n+    void start();\n+    void stop();\n+    String getUsernameAndPass (String login, String password);\n+}"
  },
  {
    "sha": "fe7befb53007892721210adb18769afd563c82af",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/AuthServiceManager.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/AuthServiceManager.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/AuthServiceManager.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/AuthServiceManager.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,36 @@\n+package ru.geekbrains;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class AuthServiceManager implements AuthService{\n+    private List<Client> clients;\n+\n+    public AuthServiceManager () {\n+        clients = new ArrayList<>(Arrays.asList(\n+            new Client(\"user1\", \"log1\", \"pass1\"),\n+            new Client(\"user2\", \"log2\", \"pass2\"),\n+            new Client(\"user3\", \"log3\", \"pass3\")\n+        ));\n+    }\n+    @Override\n+    public void start() {\n+//        System.out.println(\"Пожалуйста авторизуйтесь\");\n+\n+    }\n+\n+    @Override\n+    public void stop() {\n+        System.out.println(\"Авторизация остановлена\");\n+    }\n+\n+    @Override\n+    public String getUsernameAndPass(String login, String password) {\n+        for (Client c : clients) {\n+            if (c.getLogin().equals(login) && c.getPassword().equals(password))\n+                return c.getUsername();\n+        }\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "75b98a755c6ee41dd0178d68048ea7f6850b1a0f",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/ChatWindow.java",
    "status": "added",
    "additions": 212,
    "deletions": 0,
    "changes": 212,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/ChatWindow.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/ChatWindow.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/ChatWindow.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,212 @@\n+package ru.geekbrains;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.io.IOException;\n+\n+\n+import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;\n+\n+public class ChatWindow extends JFrame implements Thread.UncaughtExceptionHandler {\n+    private final int GAME_WIDTH = 600;\n+    private final int GAME_HEIGHT = 600;\n+    private final int WINDOW_X = 650;\n+    private final int WINDOW_Y = 250;\n+\n+    private final JTextArea messaging = new JTextArea();\n+    private final JList<String> contactList = new JList<>();\n+    private final DefaultListModel listModel = new DefaultListModel ();\n+    private final JPanel messagingPanel = new JPanel(new BorderLayout());\n+    private final JPanel contactPanel = new JPanel(new BorderLayout());\n+    private final JLabel contacts = new JLabel(\"Contact List\");\n+\n+    private final JPanel contactListText = new JPanel();\n+    private final JPanel onlineAndBlacklist = new JPanel();\n+    private final JCheckBox contactsCheckStatus = new JCheckBox(\"Online\");\n+    private final JButton btnBlacklist = new JButton(\"Blacklist\");\n+\n+    private final JPanel sendMessagePanel = new JPanel(new BorderLayout());\n+    private final JPanel settingsMessagePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n+    private final JTextField sendMessageField = new JTextField();\n+    private final JButton btnSendMessage = new JButton(\"Send\");\n+    private final JButton btnSmile = new JButton(\"Smile\");\n+    private final JButton btnFont = new JButton(\"Font\");\n+    private final JButton btnAddFile = new JButton(\"File\");\n+\n+    private OneServerManager serverManager;\n+\n+    private JButton btnStart1;\n+    private JButton btnStart2;\n+    private JButton btnStart3;\n+\n+    private AuthForm AuthForm;\n+\n+    ChatWindow() {\n+\n+//        Установка параметров окна чата\n+        setLocation(WINDOW_X, WINDOW_Y);\n+        setSize(GAME_WIDTH, GAME_HEIGHT);\n+\n+//        Панель верхнего меню чата\n+\n+        JMenuBar mainBar = new JMenuBar();\n+        mainBar.setBackground(new Color(221, 243, 229, 37));\n+        mainBar.add(createSettingsMenu());\n+        mainBar.add(createEditMenu());\n+        mainBar.add(createHelpMenu());\n+        setJMenuBar(mainBar);\n+\n+\n+        AuthForm = new AuthForm(this);\n+        AuthForm.setVisible(true);\n+        AuthForm.setAlwaysOnTop(true);\n+\n+//        Часть с текстовым полем и списком контактов\n+\n+        contactPanel.setPreferredSize(new Dimension(150, 0));\n+        JScrollPane scrollMessages = new JScrollPane(messaging);\n+        JScrollPane scrollContacts = new JScrollPane();\n+        scrollContacts.setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_NEVER);\n+\n+//        String[] users = {\"user1\", \"user2\", \"user3\", \"user4\", \"user2\", \"user3\", \"user4\", \"user5\"};\n+//        contactList.setModel(listModel);\n+        scrollContacts.setViewportView(contactList);\n+        contactList.setLayoutOrientation(JList.VERTICAL);\n+\n+        scrollContacts.setPreferredSize(new Dimension(100, 100));\n+        messaging.setBackground(new Color(183, 248, 235));\n+        messaging.setEditable(false);\n+\n+        contactPanel.add(scrollContacts);\n+        messagingPanel.add(scrollMessages);\n+        messagingPanel.add(contactPanel, BorderLayout.EAST);\n+        contactListText.setBorder(BorderFactory.createEtchedBorder());\n+\n+        contacts.setFont(new Font(\"Arial\", Font.BOLD, 14));\n+        contactListText.add(contacts);\n+        contactPanel.add(contactListText, BorderLayout.NORTH);\n+\n+        onlineAndBlacklist.add(contactsCheckStatus);\n+        onlineAndBlacklist.add(btnBlacklist);\n+        onlineAndBlacklist.setPreferredSize(new Dimension(150, 70));\n+        onlineAndBlacklist.setBorder(BorderFactory.createEtchedBorder());\n+\n+        contactPanel.add(onlineAndBlacklist, BorderLayout.SOUTH);\n+\n+        add(messagingPanel, BorderLayout.CENTER);\n+\n+\n+//        Нижняя часть отправки сообщений\n+\n+        try {\n+            serverManager = new OneServerManager(\"localhost\", 65500, messaging, AuthForm/*, listModel*/);\n+        } catch (IOException  e) {\n+            e.printStackTrace();\n+        }\n+\n+        sendMessagePanel.setPreferredSize(new Dimension(350, 80));\n+        settingsMessagePanel.setBackground(new Color(245, 248, 148));\n+        settingsMessagePanel.add(btnSmile);\n+        settingsMessagePanel.add(btnFont);\n+        settingsMessagePanel.add(btnAddFile);\n+\n+        sendMessagePanel.add(settingsMessagePanel, BorderLayout.NORTH);\n+\n+        sendMessageField.addActionListener (new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (!sendMessageField.getText().equals(\"\")) {/* Проверка на пустое сообщение*/\n+                    MessageDTO dto = new MessageDTO();\n+                    if (privateMessage(sendMessageField.getText())) {\n+                        dto.setMessageType(MessageType.PRIVATE_MESSAGE);\n+                    } else {\n+                        dto.setMessageType(MessageType.PUBLIC_MESSAGE);\n+                    }\n+                    dto.setBody(sendMessageField.getText());\n+                    serverManager.writeMsg(dto.convertToJson());\n+                    sendMessageField.setText(null);\n+                }\n+            }\n+        });\n+\n+        sendMessagePanel.add(sendMessageField);\n+        btnSendMessage.setPreferredSize(new Dimension(120, 40));\n+\n+        btnSendMessage.addActionListener(new ActionListener() {\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (!sendMessageField.getText().equals(\"\")) {\n+                    MessageDTO dto = new MessageDTO();\n+                    if (privateMessage(sendMessageField.getText())) {\n+                        dto.setMessageType(MessageType.PRIVATE_MESSAGE);\n+                    } else {\n+                        dto.setMessageType(MessageType.PUBLIC_MESSAGE);\n+                    }\n+                    dto.setBody(sendMessageField.getText());\n+                    serverManager.writeMsg(dto.convertToJson());\n+                    sendMessageField.setText(null);\n+                }\n+            }\n+        });\n+\n+        sendMessagePanel.add(btnSendMessage, BorderLayout.EAST);\n+\n+        add(sendMessagePanel, BorderLayout.SOUTH);\n+\n+        setTitle(\"ICQ 2021\");\n+\n+//      messageService = new MessageService(\"localhost\", 65500, this);\n+\n+        setDefaultCloseOperation(EXIT_ON_CLOSE);\n+        setResizable(false);\n+        setVisible(true);\n+\n+        Thread.setDefaultUncaughtExceptionHandler(this);\n+\n+    }\n+\n+    private JMenu createSettingsMenu() {\n+        JMenu Settings = new JMenu(\"Settings\");\n+        return Settings;\n+    }\n+\n+    private JMenu createEditMenu() {\n+        JMenu Edit = new JMenu(\"Edit\");\n+        return Edit;\n+    }\n+\n+    private JMenu createHelpMenu() {\n+        JMenu Help = new JMenu(\"Help\");\n+        return Help;\n+    }\n+\n+    @Override\n+    public void uncaughtException(Thread t, Throwable e) {\n+        e.printStackTrace();\n+        StackTraceElement[] ste = e.getStackTrace();\n+        JOptionPane.showMessageDialog(this, ste[0].toString(), \"Exception\", JOptionPane.ERROR_MESSAGE);\n+        System.exit(1);\n+    }\n+\n+    public void startAuth(String login, String password){\n+        System.out.println(login);\n+        System.out.println(password);\n+        MessageDTO dto = new MessageDTO();\n+        dto.setLogin(login);\n+        dto.setPassword(password);\n+        dto.setMessageType(MessageType.SEND_AUTH_MESSAGE);\n+        serverManager.writeMsg(dto.convertToJson());\n+    }\n+\n+    private boolean privateMessage (String message) {\n+        String msg = sendMessageField.getText();\n+        String value = msg.split(\" \")[0];\n+        String privatTeg = \"/w\";\n+        return value.equals(privatTeg);\n+    }\n+\n+\n+}"
  },
  {
    "sha": "95178fa455db7d9d8419c8d31b47e3637478ae3b",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/ClientHandler.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/ClientHandler.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/ClientHandler.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,100 @@\n+package ru.geekbrains;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class ClientHandler {\n+    private Socket socket;\n+    private DataOutputStream out;\n+    private DataInputStream in;\n+    private String user;\n+    private SuperServer superServer;\n+\n+    public ClientHandler(Socket socket, SuperServer superServer) {\n+        try {\n+            this.superServer = superServer;\n+            this.socket = socket;\n+            this.in = new DataInputStream(socket.getInputStream());\n+            this.out = new DataOutputStream(socket.getOutputStream());\n+            System.out.println(\"Установлено соединение с пользователем \");\n+\n+            new Thread(() -> {\n+                authenticate();\n+                readMessages();\n+            }).start();\n+\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void sendMessage(MessageDTO dto) {\n+        try {\n+            out.writeUTF(dto.convertToJson());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    private void readMessages() {\n+        try {\n+            while (true) {\n+                String msg = in.readUTF();\n+                MessageDTO dto = MessageDTO.convertFromJson(msg);\n+                dto.setFrom(user);\n+\n+                switch (dto.getMessageType()) {\n+                    case SEND_AUTH_MESSAGE -> authenticate();\n+                    case PUBLIC_MESSAGE -> superServer.broadcastMessage(dto);\n+                    case PRIVATE_MESSAGE -> superServer.sendPrivate(dto);\n+                }\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    private void authenticate() {\n+        System.out.println(\"Пожалуйста авторизуйтесь!\");\n+        try {\n+            while (true) {\n+                String authMessage = in.readUTF();\n+\n+                MessageDTO dto = MessageDTO.convertFromJson(authMessage);\n+                String username = superServer.getAuthService().getUsernameAndPass(dto.getLogin(), dto.getPassword());\n+                MessageDTO send = new MessageDTO();\n+                if (username == null) {\n+                    send.setMessageType(MessageType.ERROR_MESSAGE);\n+                    send.setBody(\"Неверный догин или пароль!\");\n+\n+                    sendMessage(send);\n+                } else {\n+                    send.setMessageType(MessageType.AUTH_CONFIRM);\n+\n+                    user = username;\n+                    superServer.subscribe(this);\n+                    System.out.println(\"Успешная авторизация\");\n+                    sendMessage(send);\n+                    break;\n+                }\n+\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    public void closeHandler() {\n+        try {\n+            superServer.unsubscribe(this);\n+            socket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public String getUser() {\n+        return user;\n+    }\n+\n+}"
  },
  {
    "sha": "e1282ce937aa3924edb0ce15d8834c0dd539753d",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/Homework.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/Homework.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/Homework.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/Homework.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,8 @@\n+package ru.geekbrains;\n+\n+\n+public class Homework {\n+    public static void main(String[] args) {\n+        new ChatWindow();\n+    }\n+}"
  },
  {
    "sha": "22750a2e747a8d627c7c0734e08bf8c049d3dbf6",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/MessageDTO.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/MessageDTO.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/MessageDTO.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/MessageDTO.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,70 @@\n+package ru.geekbrains;\n+\n+import com.google.gson.Gson;\n+\n+import javax.swing.*;\n+\n+public class MessageDTO {\n+    private MessageType messageType;\n+    private String body;\n+    private String login;\n+    private String password;\n+    private String to;\n+    private String from;\n+\n+\n+    public static MessageDTO convertFromJson(String json) {\n+        return new Gson().fromJson(json, MessageDTO.class);\n+    }\n+\n+\n+    public String convertToJson() {\n+        return new Gson().toJson(this);\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public void setMessageType(MessageType messageType) {\n+        this.messageType = messageType;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public void setBody(String body) {\n+        this.body = body;\n+    }\n+\n+    public String getLogin() {\n+        return login;\n+    }\n+\n+    public void setLogin(String login) {\n+        this.login = login;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    public String getTo() {\n+        return to;\n+    }\n+\n+    public String getFrom() {\n+        return from;\n+    }\n+\n+    public void setFrom(String from) {\n+        this.from = from;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "5e1fc2ba13eb6a4e7f779d60e41f16ee170da655",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/MessageType.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/MessageType.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/MessageType.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/MessageType.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.geekbrains;\n+\n+public enum MessageType {\n+    PUBLIC_MESSAGE,\n+    PRIVATE_MESSAGE,\n+    SEND_AUTH_MESSAGE,\n+    AUTH_CONFIRM,\n+    ERROR_MESSAGE,\n+    ONLINE_STATUS\n+\n+}"
  },
  {
    "sha": "523bb07f0ab7e9ca22677185222b7750bf935e43",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/OneServerManager.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/OneServerManager.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/OneServerManager.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/OneServerManager.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,84 @@\n+package ru.geekbrains;\n+\n+import javax.swing.*;\n+import java.io.*;\n+import java.net.Socket;\n+\n+\n+public class OneServerManager  {\n+\n+    private String host;\n+    private int port;\n+    private Socket socket;\n+    private JTextArea messaging;\n+    private DataInputStream in;\n+    private DataOutputStream out;\n+    private AuthForm AuthForm;\n+    private DefaultListModel listModel ;\n+    private String user;\n+\n+    public  OneServerManager(String host, int port, JTextArea messaging, AuthForm AuthForm/*, DefaultListModel listModel*/) throws IOException {\n+//        this.listModel = listModel;\n+        this.host = host;\n+        this.port = port;\n+        this.socket = new Socket(host, port);\n+        this.messaging = messaging;\n+        this.in = new DataInputStream(socket.getInputStream());\n+        this.out = new DataOutputStream(socket.getOutputStream());\n+        this.AuthForm = AuthForm;\n+\n+\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+\n+                    String message = in.readUTF();\n+                    MessageDTO dto = MessageDTO.convertFromJson(message);\n+                    switch (dto.getMessageType()) {\n+\n+                        case PUBLIC_MESSAGE, PRIVATE_MESSAGE ->\n+                                readDTOMsg(dto);\n+\n+                        case AUTH_CONFIRM -> AuthForm.setVisible(false);\n+//                        case ONLINE_STATUS -> {\n+//                            user = dto.getBody();\n+//                            listModel.addElement(user);\n+//                        }\n+\n+                    }\n+\n+                    System.out.println(\"Клиент получил :\" + message);\n+\n+                    Thread.sleep(200);\n+\n+                }\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+\n+        }).start();\n+    }\n+\n+    private void readDTOMsg (MessageDTO dto) {\n+        if (dto.getMessageType() == MessageType.PRIVATE_MESSAGE) {\n+            messaging.append(\"Личное сообщение от пользователя: \" + dto.getFrom() + \"\\n\" + dto.getBody() + System.lineSeparator());\n+\n+        } else\n+        messaging.append(\"Сообщение от пользователя: \" + dto.getFrom() + \"\\n\" + dto.getBody() + System.lineSeparator());\n+    }\n+\n+    public synchronized void writeMsg (String message) {\n+        try {\n+            out.writeUTF(message);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+}\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "302df414dfb97578ae5428d7cd50896324942eb1",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/ServerStart.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/ServerStart.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/ServerStart.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/ServerStart.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.geekbrains;\n+\n+public class ServerStart {\n+    public static void main(String[] args) {\n+        new SuperServer();\n+    }\n+}"
  },
  {
    "sha": "69fc6f2554aae4e71a3dada62a8eb350e3c0e298",
    "filename": "out/production/Homework1/geekbrains/homework/lesson7/SuperServer.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/Prontein/JAVA/blob/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/SuperServer.java",
    "raw_url": "https://github.com/Prontein/JAVA/raw/3f5413efb4387fb67137f079246ac488fc96d24e/out/production/Homework1/geekbrains/homework/lesson7/SuperServer.java",
    "contents_url": "https://api.github.com/repos/Prontein/JAVA/contents/out/production/Homework1/geekbrains/homework/lesson7/SuperServer.java?ref=3f5413efb4387fb67137f079246ac488fc96d24e",
    "patch": "@@ -0,0 +1,81 @@\n+package ru.geekbrains;\n+\n+import javax.swing.*;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+public class SuperServer {\n+\n+    private AuthService authService;\n+    private List<ClientHandler> clientHandlers;\n+\n+    public SuperServer () {\n+        try (ServerSocket serverSocket = new ServerSocket(65500)) {\n+            System.out.println(\"Server started!\");\n+\n+            authService = new AuthServiceManager();\n+            authService.start();\n+            clientHandlers = new LinkedList<>();\n+\n+            while (true) {\n+                System.out.println(\"Ожидание подключение клиента...\");\n+                Socket socket = serverSocket.accept();\n+                System.out.println(\"Клиент подключился\");\n+                new ClientHandler(socket, this);\n+            }\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public synchronized void broadcastMessage(MessageDTO dto) {\n+        for (ClientHandler clientHandler : clientHandlers) {\n+            clientHandler.sendMessage(dto);\n+        }\n+    }\n+\n+    public synchronized void subscribe(ClientHandler c) {\n+        clientHandlers.add(c);\n+//        MessageDTO dto = new MessageDTO();\n+//        dto.setMessageType(MessageType.ONLINE_STATUS);\n+//        dto.setBody(c.getUser());\n+//        for (ClientHandler clientHandler : clientHandlers) {\n+//            clientHandler.sendMessage(dto);\n+//        }\n+\n+\n+    }\n+\n+    public synchronized void unsubscribe(ClientHandler c) {\n+        clientHandlers.remove(c);\n+    }\n+\n+    public AuthService getAuthService() {\n+        return authService;\n+    }\n+    public synchronized void sendPrivate(MessageDTO dto) {\n+        String msg = dto.getBody();\n+        String privatUsername = msg.split(\" \")[1];\n+        String arr[] = msg.split(\" \", 3); // Разделяю строку на массив , чтобы убрать из тела сообщения /w username\n+\n+        String firstWord = arr[0];\n+        String theRest = arr[2];\n+        dto.setBody(theRest);\n+        for (ClientHandler clientHandler : clientHandlers) {\n+            if (clientHandler.getUser().equals(privatUsername))\n+                clientHandler.sendMessage(dto);\n+        }\n+    }\n+\n+    public List<ClientHandler> getClientHandlers() {\n+        return clientHandlers;\n+    }\n+}\n+\n+\n+"
  }
]
