[
  {
    "sha": "9463c76d4d64012b807d172df585dbb2a1ee1830",
    "filename": "src/main/java/org/sonarsource/sonarlint/ls/AnalysisManager.java",
    "status": "modified",
    "additions": 29,
    "deletions": 7,
    "changes": 36,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/AnalysisManager.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/AnalysisManager.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/main/java/org/sonarsource/sonarlint/ls/AnalysisManager.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -82,6 +82,7 @@\n import static java.util.Optional.empty;\n import static java.util.Optional.ofNullable;\n import static java.util.stream.Collectors.joining;\n+import static org.sonarsource.sonarlint.ls.Utils.pluralize;\n \n public class AnalysisManager implements WorkspaceSettingsChangeListener {\n \n@@ -96,6 +97,8 @@\n   static final String SONARQUBE_TAINT_SOURCE = \"SonarQube Taint Analyzer\";\n \n   private static final String MESSAGE_WITH_PLURALIZED_SUFFIX = \"%s [+%d %s]\";\n+  private static final String ITEM_LOCATION = \"location\";\n+  private static final String ITEM_FLOW = \"flow\";\n \n   private final SonarLintExtendedLanguageClient client;\n \n@@ -280,7 +283,8 @@ private void analyze(URI fileUri, boolean shouldFetchServerIssues) {\n \n     // Check if file has not being closed during the analysis\n     if (fileContentPerFileURI.containsKey(fileUri)) {\n-      LOG.info(\"Found {} issue(s)\", newIssues.size());\n+      int foundIssues = newIssues.size();\n+      LOG.info(\"Found {} {}\", foundIssues, pluralize(foundIssues, \"issue\"));\n       client.publishDiagnostics(newPublishDiagnostics(fileUri));\n     }\n   }\n@@ -323,6 +327,13 @@ private IssueListener createIssueListener() {\n       .findFirst();\n   }\n \n+  Optional<ServerIssue> getTaintVulnerabilityByKey(String issueId) {\n+    return taintVulnerabilitiesPerFile.values().stream()\n+      .flatMap(List::stream)\n+      .filter(i -> issueId.equals(i.key()))\n+      .findFirst();\n+  }\n+\n   static boolean locationMatches(Issue i, Diagnostic d) {\n     return position(i).equals(d.getRange());\n   }\n@@ -388,6 +399,10 @@ public AnalysisResultsWrapper analyzeConnected(ProjectBindingWrapper binding, Wo\n         ServerIssueTrackerWrapper serverIssueTracker = binding.getServerIssueTracker();\n         serverIssueTracker.matchAndTrack(filePath, issues, issueListener, shouldFetchServerIssues);\n         List<ServerIssue> serverIssues = engine.getServerIssues(binding.getBinding(), filePath);\n+        if (!serverIssues.isEmpty()) {\n+          int fetchedIssues = serverIssues.size();\n+          LOG.info(\"Fetched {} {} from {}\", fetchedIssues, pluralize(fetchedIssues, \"vulnerability\", \"vulnerabilities\"), binding.getConnectionId());\n+        }\n         taintVulnerabilitiesPerFile.put(uri, serverIssues.stream()\n           .filter(it -> it.ruleKey().contains(SECURITY_REPOSITORY_HINT))\n           .filter(it -> it.resolution().isEmpty())\n@@ -491,22 +506,29 @@ private static Range position(ServerIssueLocation issue) {\n   static String message(Issue issue) {\n     if (issue.flows().isEmpty()) {\n       return issue.getMessage();\n+    } else if (issue.flows().size() == 1) {\n+      return buildMessageWithPluralizedSuffix(issue.getMessage(), issue.flows().get(0).locations().size(), ITEM_LOCATION);\n     } else if (issue.flows().stream().allMatch(f -> f.locations().size() == 1)) {\n       int nbLocations = issue.flows().size();\n-      return String.format(MESSAGE_WITH_PLURALIZED_SUFFIX, issue.getMessage(), nbLocations, pluralize(nbLocations, \"location\"));\n+      return buildMessageWithPluralizedSuffix(issue.getMessage(), nbLocations, ITEM_LOCATION);\n     } else {\n       int nbFlows = issue.flows().size();\n-      return String.format(MESSAGE_WITH_PLURALIZED_SUFFIX, issue.getMessage(), nbFlows, pluralize(nbFlows, \"flow\"));\n+      return buildMessageWithPluralizedSuffix(issue.getMessage(), nbFlows, ITEM_FLOW);\n     }\n   }\n \n   static String message(ServerIssue issue) {\n-    int nbFlows = issue.getFlows().size();\n-    return String.format(MESSAGE_WITH_PLURALIZED_SUFFIX, issue.getMessage(), nbFlows, pluralize(nbFlows, \"flow\"));\n+    if (issue.getFlows().isEmpty()) {\n+      return issue.getMessage();\n+    } else if (issue.getFlows().size() == 1) {\n+      return buildMessageWithPluralizedSuffix(issue.getMessage(), issue.getFlows().get(0).locations().size(), ITEM_LOCATION);\n+    } else {\n+      return buildMessageWithPluralizedSuffix(issue.getMessage(), issue.getFlows().size(), ITEM_FLOW);\n+    }\n   }\n \n-  private static String pluralize(long quantity, String name) {\n-    return quantity > 1 ? (name + \"s\") : name;\n+  private static String buildMessageWithPluralizedSuffix(@Nullable String issueMessage, long nbItems, String itemName) {\n+    return String.format(MESSAGE_WITH_PLURALIZED_SUFFIX, issueMessage, nbItems, pluralize(nbItems, itemName));\n   }\n \n   private PublishDiagnosticsParams newPublishDiagnostics(URI newUri) {"
  },
  {
    "sha": "284e79e74e49cd7270c77d238821e5ec9c681f48",
    "filename": "src/main/java/org/sonarsource/sonarlint/ls/CommandManager.java",
    "status": "modified",
    "additions": 53,
    "deletions": 8,
    "changes": 61,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/CommandManager.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/CommandManager.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/main/java/org/sonarsource/sonarlint/ls/CommandManager.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -50,6 +50,7 @@\n import org.sonarsource.sonarlint.ls.commands.ShowAllLocationsCommand;\n import org.sonarsource.sonarlint.ls.connected.ProjectBindingManager;\n import org.sonarsource.sonarlint.ls.connected.ProjectBindingWrapper;\n+import org.sonarsource.sonarlint.ls.settings.SettingsManager;\n \n import static java.net.URI.create;\n import static org.sonarsource.sonarlint.ls.AnalysisManager.SONARLINT_SOURCE;\n@@ -61,19 +62,31 @@\n   static final String SONARLINT_OPEN_STANDALONE_RULE_DESCRIPTION_COMMAND = \"SonarLint.OpenStandaloneRuleDesc\";\n   static final String SONARLINT_OPEN_RULE_DESCRIPTION_FROM_CODE_ACTION_COMMAND = \"SonarLint.OpenRuleDescCodeAction\";\n   static final String SONARLINT_UPDATE_ALL_BINDINGS_COMMAND = \"SonarLint.UpdateAllBindings\";\n+  static final String SONARLINT_BROWSE_TAINT_VULNERABILITY = \"SonarLint.BrowseTaintVulnerability\";\n+  static final String SONARLINT_SHOW_TAINT_VULNERABILITY_FLOWS = \"SonarLint.ShowTaintVulnerabilityFlows\";\n   static final List<String> SONARLINT_SERVERSIDE_COMMANDS = Arrays.asList(\n-    SONARLINT_UPDATE_ALL_BINDINGS_COMMAND, SONARLINT_OPEN_RULE_DESCRIPTION_FROM_CODE_ACTION_COMMAND, SONARLINT_OPEN_STANDALONE_RULE_DESCRIPTION_COMMAND);\n+    SONARLINT_UPDATE_ALL_BINDINGS_COMMAND,\n+    SONARLINT_OPEN_RULE_DESCRIPTION_FROM_CODE_ACTION_COMMAND,\n+    SONARLINT_OPEN_STANDALONE_RULE_DESCRIPTION_COMMAND,\n+    SONARLINT_BROWSE_TAINT_VULNERABILITY,\n+    SONARLINT_SHOW_TAINT_VULNERABILITY_FLOWS\n+  );\n   // Client side\n   static final String SONARLINT_DEACTIVATE_RULE_COMMAND = \"SonarLint.DeactivateRule\";\n \n   private final SonarLintExtendedLanguageClient client;\n+  private final SettingsManager settingsManager;\n   private final ProjectBindingManager bindingManager;\n   private final AnalysisManager analysisManager;\n+  private final SonarLintTelemetry telemetry;\n \n-  CommandManager(SonarLintExtendedLanguageClient client, ProjectBindingManager bindingManager, AnalysisManager analysisManager) {\n+  CommandManager(SonarLintExtendedLanguageClient client, SettingsManager settingsManager, ProjectBindingManager bindingManager, AnalysisManager analysisManager,\n+    SonarLintTelemetry telemetry) {\n     this.client = client;\n+    this.settingsManager = settingsManager;\n     this.bindingManager = bindingManager;\n     this.analysisManager = analysisManager;\n+    this.telemetry = telemetry;\n   }\n \n   public List<Either<Command, CodeAction>> computeCodeActions(CodeActionParams params, CancelChecker cancelToken) {\n@@ -85,8 +98,7 @@\n       if (SONARLINT_SOURCE.equals(d.getSource())) {\n         String ruleKey = d.getCode().getLeft();\n         cancelToken.checkCanceled();\n-        String titleShowRuleDesc = String.format(\"Open description of SonarLint rule '%s'\", ruleKey);\n-        codeActions.add(newQuickFix(d, titleShowRuleDesc, SONARLINT_OPEN_RULE_DESCRIPTION_FROM_CODE_ACTION_COMMAND, Arrays.asList(ruleKey, params.getTextDocument().getUri())));\n+        addRuleDescriptionCodeAction(params, codeActions, d, ruleKey);\n         analysisManager.getIssueForDiagnostic(uri, d).ifPresent(issue -> {\n           if (! issue.flows().isEmpty()) {\n             String titleShowAllLocations = String.format(\"Show all locations for issue '%s'\", ruleKey);\n@@ -98,19 +110,30 @@\n           codeActions.add(newQuickFix(d, titleDeactivate, SONARLINT_DEACTIVATE_RULE_COMMAND, Collections.singletonList(ruleKey)));\n         }\n       } else if (SONARQUBE_TAINT_SOURCE.equals(d.getSource())) {\n+        ProjectBindingWrapper actualBinding = binding.orElseThrow(() -> new IllegalStateException(\"Binding not found for taint vulnerability\"));\n+        String ruleKey = d.getCode().getLeft();\n+        addRuleDescriptionCodeAction(params, codeActions, d, ruleKey);\n         analysisManager.getTaintVulnerabilityForDiagnostic(uri, d).ifPresent(issue -> {\n           if (!issue.getFlows().isEmpty()) {\n-            String titleShowAllLocations = String.format(\"Show all locations for taint vulnerability '%s'\", issue.ruleKey());\n-            codeActions.add(\n-              newQuickFix(d, titleShowAllLocations, ShowAllLocationsCommand.ID, Collections.singletonList(\n-                ShowAllLocationsCommand.params(issue, bindingManager::serverPathToFileUri))));\n+            String titleShowAllLocations = String.format(\"Show all locations for taint vulnerability '%s'\", ruleKey);\n+            codeActions.add(newQuickFix(d, titleShowAllLocations, SONARLINT_SHOW_TAINT_VULNERABILITY_FLOWS, Arrays.asList(issue.key(), actualBinding.getConnectionId())));\n           }\n+          String title = String.format(\"Open taint vulnerability '%s' on '%s'\", ruleKey, actualBinding.getConnectionId());\n+          String serverUrl = settingsManager.getCurrentSettings().getServerConnections().get(actualBinding.getConnectionId()).getServerUrl();\n+          String projectKey = Utils.encodeUriComponent(actualBinding.getBinding().projectKey());\n+          String issueUrl = String.format(\"%s/project/issues?id=%s&issues=%s&open=%s\", serverUrl, projectKey, issue.key(), issue.key());\n+          codeActions.add(newQuickFix(d, title, SONARLINT_BROWSE_TAINT_VULNERABILITY, Collections.singletonList(issueUrl)));\n         });\n       }\n     }\n     return codeActions;\n   }\n \n+  private static void addRuleDescriptionCodeAction(CodeActionParams params, List<Either<Command, CodeAction>> codeActions, Diagnostic d, String ruleKey) {\n+    String titleShowRuleDesc = String.format(\"Open description of SonarLint rule '%s'\", ruleKey);\n+    codeActions.add(newQuickFix(d, titleShowRuleDesc, SONARLINT_OPEN_RULE_DESCRIPTION_FROM_CODE_ACTION_COMMAND, Arrays.asList(ruleKey, params.getTextDocument().getUri())));\n+  }\n+\n   private static Either<Command, CodeAction> newQuickFix(Diagnostic diag, String title, String command, List<Object> params) {\n     CodeAction newCodeAction = new CodeAction(title);\n     newCodeAction.setCommand(new Command(title, command, params));\n@@ -166,6 +189,12 @@ public void executeCommand(ExecuteCommandParams params, CancelChecker cancelToke\n       case SONARLINT_OPEN_RULE_DESCRIPTION_FROM_CODE_ACTION_COMMAND:\n         handleOpenRuleDescriptionFromCodeActionCommand(params);\n         break;\n+      case SONARLINT_BROWSE_TAINT_VULNERABILITY:\n+        handleBrowseTaintVulnerability(params);\n+        break;\n+      case SONARLINT_SHOW_TAINT_VULNERABILITY_FLOWS:\n+        handleShowTaintVulnerabilityFlows(params);\n+        break;\n       default:\n         throw new ResponseErrorException(new ResponseError(ResponseErrorCode.InvalidParams, \"Unsupported command: \" + params.getCommand(), null));\n     }\n@@ -183,6 +212,22 @@ private void handleOpenRuleDescriptionFromCodeActionCommand(ExecuteCommandParams\n     openRuleDescription(binding.orElse(null), ruleKey);\n   }\n \n+  private void handleBrowseTaintVulnerability(ExecuteCommandParams params) {\n+    String taintUrl = getAsString(params.getArguments().get(0));\n+    telemetry.taintVulnerabilitiesInvestigatedRemotely();\n+    client.browseTo(taintUrl);\n+  }\n+\n+  private void handleShowTaintVulnerabilityFlows(ExecuteCommandParams params) {\n+    String issueKey = getAsString(params.getArguments().get(0));\n+    String connectionId = getAsString(params.getArguments().get(1));\n+    analysisManager.getTaintVulnerabilityByKey(issueKey)\n+      .ifPresent(issue -> {\n+        telemetry.taintVulnerabilitiesInvestigatedLocally();\n+        client.showTaintVulnerability(ShowAllLocationsCommand.params(issue, connectionId, bindingManager::serverPathToFileUri));\n+      });\n+  }\n+\n   // https://github.com/eclipse/lsp4j/issues/126\n   private static String getAsString(Object jsonPrimitive) {\n     return ((JsonPrimitive) jsonPrimitive).getAsString();"
  },
  {
    "sha": "161aa6c38904bd4581b2fc0b4d23adeacccf0312",
    "filename": "src/main/java/org/sonarsource/sonarlint/ls/SonarLintExtendedLanguageClient.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/SonarLintExtendedLanguageClient.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/SonarLintExtendedLanguageClient.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/main/java/org/sonarsource/sonarlint/ls/SonarLintExtendedLanguageClient.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -30,6 +30,7 @@\n import org.eclipse.lsp4j.services.LanguageClient;\n import org.sonarsource.sonarlint.core.client.api.standalone.StandaloneRuleParam;\n import org.sonarsource.sonarlint.core.serverapi.hotspot.ServerHotspot;\n+import org.sonarsource.sonarlint.ls.commands.ShowAllLocationsCommand;\n \n public interface SonarLintExtendedLanguageClient extends LanguageClient {\n \n@@ -51,6 +52,9 @@\n   @JsonRequest(\"sonarlint/showHotspot\")\n   CompletableFuture<Void> showHotspot(ServerHotspot hotspot);\n \n+  @JsonRequest(\"sonarlint/showTaintVulnerability\")\n+  CompletableFuture<Void> showTaintVulnerability(ShowAllLocationsCommand.Param params);\n+\n   class ShowRuleDescriptionParams {\n     @Expose\n     private final String key;"
  },
  {
    "sha": "370e94840c70673c765e1ee71bbfd73c20fe494c",
    "filename": "src/main/java/org/sonarsource/sonarlint/ls/SonarLintLanguageServer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/SonarLintLanguageServer.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/SonarLintLanguageServer.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/main/java/org/sonarsource/sonarlint/ls/SonarLintLanguageServer.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -136,8 +136,8 @@\n     this.analysisManager = new AnalysisManager(lsLogOutput, enginesFactory, client, telemetry, workspaceFoldersManager, settingsManager, bindingManager);\n     bindingManager.setAnalysisManager(analysisManager);\n     this.settingsManager.addListener(analysisManager);\n-    this.commandManager = new CommandManager(client, bindingManager, analysisManager);\n-    this.securityHotspotsHandlerServer = new SecurityHotspotsHandlerServer(lsLogOutput, bindingManager, client, this.telemetry);\n+    this.commandManager = new CommandManager(client, settingsManager, bindingManager, analysisManager, telemetry);\n+    this.securityHotspotsHandlerServer = new SecurityHotspotsHandlerServer(lsLogOutput, bindingManager, client, telemetry);\n     launcher.startListening();\n   }\n "
  },
  {
    "sha": "5fb510b1a9606d85cbb7712e374e9e95c62ea097",
    "filename": "src/main/java/org/sonarsource/sonarlint/ls/SonarLintTelemetry.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/SonarLintTelemetry.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/SonarLintTelemetry.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/main/java/org/sonarsource/sonarlint/ls/SonarLintTelemetry.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -189,6 +189,18 @@ public void showHotspotRequestReceived() {\n     }\n   }\n \n+  public void taintVulnerabilitiesInvestigatedLocally() {\n+    if(enabled()) {\n+      telemetry.taintVulnerabilitiesInvestigatedLocally();\n+    }\n+  }\n+\n+  public void taintVulnerabilitiesInvestigatedRemotely() {\n+    if(enabled()) {\n+      telemetry.taintVulnerabilitiesInvestigatedRemotely();\n+    }\n+  }\n+\n   public void stop() {\n     if (enabled()) {\n       telemetry.stop();"
  },
  {
    "sha": "244da9ee788e78be00f04aa63a08db4f4e08ccaf",
    "filename": "src/main/java/org/sonarsource/sonarlint/ls/Utils.java",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/Utils.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/Utils.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/main/java/org/sonarsource/sonarlint/ls/Utils.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -22,6 +22,9 @@\n import com.google.gson.Gson;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonSyntaxException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n import java.util.Map;\n import java.util.concurrent.ThreadFactory;\n import javax.annotation.CheckForNull;\n@@ -62,4 +65,21 @@ public static void interrupted(InterruptedException e) {\n     LOG.debug(\"Interrupted!\", e);\n     Thread.currentThread().interrupt();\n   }\n+\n+  public static String encodeUriComponent(String toEncode) {\n+    try {\n+      return URLEncoder.encode(toEncode, StandardCharsets.UTF_8.name());\n+    } catch (UnsupportedEncodingException e) {\n+      // Should not happen on a standard JVM\n+      throw new IllegalStateException(e);\n+    }\n+  }\n+\n+  public static String pluralize(long nbItems, String itemName) {\n+    return pluralize(nbItems, itemName, itemName + \"s\");\n+  }\n+\n+  public static String pluralize(long nbItems, String singular, String plural) {\n+    return nbItems == 1 ? singular : plural;\n+  }\n }"
  },
  {
    "sha": "99b62d2c09e6fae8d45a89fa9aaea0069958e304",
    "filename": "src/main/java/org/sonarsource/sonarlint/ls/commands/ShowAllLocationsCommand.java",
    "status": "modified",
    "additions": 22,
    "deletions": 4,
    "changes": 26,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/commands/ShowAllLocationsCommand.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/commands/ShowAllLocationsCommand.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/main/java/org/sonarsource/sonarlint/ls/commands/ShowAllLocationsCommand.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -21,6 +21,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import java.net.URI;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -45,28 +47,34 @@ private ShowAllLocationsCommand() {\n     // NOP\n   }\n \n-  static class Param {\n+  public static class Param {\n     private final URI fileUri;\n     private final String message;\n     private final String severity;\n     private final String ruleKey;\n     private final List<Flow> flows;\n+    private final String connectionId;\n+    private final String creationDate;\n \n     private Param(Issue issue) {\n       this.fileUri = nullableUri(issue.getInputFile());\n       this.message = issue.getMessage();\n       this.severity = issue.getSeverity();\n       this.ruleKey = issue.getRuleKey();\n       this.flows = issue.flows().stream().map(Flow::new).collect(Collectors.toList());\n+      this.connectionId = null;\n+      this.creationDate = null;\n     }\n \n     @VisibleForTesting\n-    Param(ServerIssue issue, Function<String, Optional<URI>> pathResolver, Map<URI, LocalCodeFile> localFileCache) {\n+    Param(ServerIssue issue, String connectionId, Function<String, Optional<URI>> pathResolver, Map<URI, LocalCodeFile> localFileCache) {\n       this.fileUri = pathResolver.apply(issue.getFilePath()).orElse(null);\n       this.message = issue.getMessage();\n       this.severity = issue.severity();\n       this.ruleKey = issue.ruleKey();\n       this.flows = issue.getFlows().stream().map(f -> new Flow(f, pathResolver, localFileCache)).collect(Collectors.toList());\n+      this.connectionId = connectionId;\n+      this.creationDate = DateTimeFormatter.ISO_DATE_TIME.format(issue.creationDate().atOffset(ZoneOffset.UTC));\n     }\n \n     public URI getFileUri() {\n@@ -85,6 +93,16 @@ public String getRuleKey() {\n       return ruleKey;\n     }\n \n+    @CheckForNull\n+    public String getConnectionId() {\n+      return connectionId;\n+    }\n+\n+    @CheckForNull\n+    public String getCreationDate() {\n+      return creationDate;\n+    }\n+\n     public List<Flow> getFlows() {\n       return flows;\n     }\n@@ -173,8 +191,8 @@ public static Param params(Issue issue) {\n     return new Param(issue);\n   }\n \n-  public static Param params(ServerIssue issue, Function<String, Optional<URI>> pathResolver) {\n-    return new Param(issue, pathResolver, new HashMap<>());\n+  public static Param params(ServerIssue issue, String connectionId, Function<String, Optional<URI>> pathResolver) {\n+    return new Param(issue, connectionId, pathResolver, new HashMap<>());\n   }\n \n   @CheckForNull"
  },
  {
    "sha": "48cf5987a27a93e099fb338cc98a2087f637db77",
    "filename": "src/main/java/org/sonarsource/sonarlint/ls/connected/ProjectBindingManager.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/connected/ProjectBindingManager.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/main/java/org/sonarsource/sonarlint/ls/connected/ProjectBindingManager.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/main/java/org/sonarsource/sonarlint/ls/connected/ProjectBindingManager.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -496,7 +496,6 @@ private static void updateGlobalStorageAndLogResults(EndpointParamsAndHttpClient\n   }\n \n   private static Optional<File> tryResolveLocalFile(String serverPath, URI folderUri, ProjectBindingWrapper binding) {\n-    LOG.info(\"Server path: \" + serverPath + \" Folder URI: \" + folderUri);\n     return binding.getBinding()\n       .serverPathToIdePath(serverPath)\n       // Try to resolve local path in matching folder"
  },
  {
    "sha": "68be327e8c980f479e813882b5ebbd7543cd1174",
    "filename": "src/test/java/org/sonarsource/sonarlint/ls/AnalysisManagerTests.java",
    "status": "modified",
    "additions": 19,
    "deletions": 4,
    "changes": 23,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/AnalysisManagerTests.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/AnalysisManagerTests.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/test/java/org/sonarsource/sonarlint/ls/AnalysisManagerTests.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -20,6 +20,7 @@\n package org.sonarsource.sonarlint.ls;\n \n import java.net.URI;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n@@ -34,6 +35,7 @@\n import org.junit.jupiter.api.Test;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;\n import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue;\n+import org.sonarsource.sonarlint.core.client.api.connected.ServerIssueLocation;\n import org.sonarsource.sonarlint.ls.connected.ProjectBindingManager;\n import org.sonarsource.sonarlint.ls.folders.WorkspaceFoldersManager;\n import org.sonarsource.sonarlint.ls.log.LanguageClientLogOutput;\n@@ -85,6 +87,9 @@ void testNotConvertSeverity() {\n   void testIssueConversion() {\n     ServerIssue issue = mock(ServerIssue.class);\n     ServerIssue.Flow flow = mock(ServerIssue.Flow.class);\n+    ServerIssueLocation loc1 = mock(ServerIssueLocation.class);\n+    ServerIssueLocation loc2 = mock(ServerIssueLocation.class);\n+    when(flow.locations()).thenReturn(Arrays.asList(loc1, loc2));\n     when(issue.getStartLine()).thenReturn(1);\n     when(issue.severity()).thenReturn(\"BLOCKER\");\n     when(issue.ruleKey()).thenReturn(\"ruleKey\");\n@@ -93,7 +98,7 @@ void testIssueConversion() {\n \n     Diagnostic diagnostic = convert(issue).get();\n \n-    assertThat(diagnostic.getMessage()).isEqualTo(\"message [+1 flow]\");\n+    assertThat(diagnostic.getMessage()).isEqualTo(\"message [+2 locations]\");\n     assertThat(diagnostic.getSeverity()).isEqualTo(DiagnosticSeverity.Error);\n     assertThat(diagnostic.getSource()).isEqualTo(\"SonarQube Taint Analyzer\");\n     assertThat(diagnostic.getCode().getLeft()).isEqualTo(\"ruleKey\");\n@@ -115,10 +120,20 @@ void testGetServerIssueForDiagnostic() throws Exception {\n     when(issue.ruleKey()).thenReturn(\"ruleKey\");\n     taintVulnerabilitiesPerFile.put(uri, Collections.singletonList(issue));\n \n-    Optional<ServerIssue> serverIssue = underTest.getTaintVulnerabilityForDiagnostic(uri, diagnostic);\n-\n-    assertThat(serverIssue).contains(issue);\n+    assertThat(underTest.getTaintVulnerabilityForDiagnostic(uri, diagnostic)).hasValue(issue);\n   }\n \n+  @Test\n+  void testGetServerIssueByKey() throws Exception {\n+    URI uri = new URI(\"/\");\n+    ServerIssue issue = mock(ServerIssue.class);\n+    String issueKey = \"key\";\n+    when(issue.key()).thenReturn(issueKey);\n+\n+    taintVulnerabilitiesPerFile.put(uri, Collections.singletonList(issue));\n+\n+    assertThat(underTest.getTaintVulnerabilityByKey(issueKey)).hasValue(issue);\n+    assertThat(underTest.getTaintVulnerabilityByKey(\"otherKey\")).isEmpty();\n+  }\n \n }"
  },
  {
    "sha": "ffa85418e6d5b446596b92f499bebf2f12d435f8",
    "filename": "src/test/java/org/sonarsource/sonarlint/ls/CommandManagerTests.java",
    "status": "modified",
    "additions": 53,
    "deletions": 5,
    "changes": 58,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/CommandManagerTests.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/CommandManagerTests.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/test/java/org/sonarsource/sonarlint/ls/CommandManagerTests.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -21,6 +21,7 @@\n \n import com.google.gson.JsonPrimitive;\n import java.net.URI;\n+import java.time.Instant;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n@@ -54,6 +55,9 @@\n import org.sonarsource.sonarlint.ls.SonarLintExtendedLanguageClient.ShowRuleDescriptionParams;\n import org.sonarsource.sonarlint.ls.connected.ProjectBindingManager;\n import org.sonarsource.sonarlint.ls.connected.ProjectBindingWrapper;\n+import org.sonarsource.sonarlint.ls.settings.ServerConnectionSettings;\n+import org.sonarsource.sonarlint.ls.settings.SettingsManager;\n+import org.sonarsource.sonarlint.ls.settings.WorkspaceSettings;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n@@ -67,7 +71,9 @@\n import static org.mockito.Mockito.when;\n import static org.sonarsource.sonarlint.ls.AnalysisManager.SONARLINT_SOURCE;\n import static org.sonarsource.sonarlint.ls.AnalysisManager.SONARQUBE_TAINT_SOURCE;\n+import static org.sonarsource.sonarlint.ls.CommandManager.SONARLINT_BROWSE_TAINT_VULNERABILITY;\n import static org.sonarsource.sonarlint.ls.CommandManager.SONARLINT_OPEN_RULE_DESCRIPTION_FROM_CODE_ACTION_COMMAND;\n+import static org.sonarsource.sonarlint.ls.CommandManager.SONARLINT_SHOW_TAINT_VULNERABILITY_FLOWS;\n import static org.sonarsource.sonarlint.ls.CommandManager.SONARLINT_UPDATE_ALL_BINDINGS_COMMAND;\n import static org.sonarsource.sonarlint.ls.CommandManager.getHtmlDescription;\n \n@@ -86,10 +92,13 @@\n   private SonarLintExtendedLanguageClient mockClient;\n   private AnalysisManager mockAnalysisManager;\n   private StandaloneSonarLintEngine mockStandaloneEngine;\n+  private SettingsManager mockSettingsManager;\n+  private SonarLintTelemetry mockTelemetry;\n \n   @BeforeEach\n   public void prepareMocks() {\n     bindingManager = mock(ProjectBindingManager.class);\n+    mockSettingsManager = mock(SettingsManager.class);\n     mockBinding = mock(ProjectBindingWrapper.class);\n     mockConnectedEngine = mock(ConnectedSonarLintEngine.class);\n     when(mockBinding.getEngine()).thenReturn(mockConnectedEngine);\n@@ -99,7 +108,8 @@ public void prepareMocks() {\n     mockAnalysisManager = mock(AnalysisManager.class);\n     mockStandaloneEngine = mock(StandaloneSonarLintEngine.class);\n     when(mockAnalysisManager.getOrCreateStandaloneEngine()).thenReturn(mockStandaloneEngine);\n-    underTest = new CommandManager(mockClient, bindingManager, mockAnalysisManager);\n+    mockTelemetry = mock(SonarLintTelemetry.class);\n+    underTest = new CommandManager(mockClient, mockSettingsManager, bindingManager, mockAnalysisManager, mockTelemetry);\n   }\n \n   @Test\n@@ -159,25 +169,37 @@ void suggestDisableRuleForUnboundProject() {\n \n   @Test\n   void codeActionsForTaint() {\n-    when(bindingManager.getBinding(URI.create(FILE_URI))).thenReturn(Optional.empty());\n+    String connId = \"connectionId\";\n+    when(mockBinding.getConnectionId()).thenReturn(connId);\n+    when(bindingManager.getBinding(URI.create(FILE_URI))).thenReturn(Optional.of(mockBinding));\n+    WorkspaceSettings mockWorkspacesettings = mock(WorkspaceSettings.class);\n+    ServerConnectionSettings serverSettings = mock(ServerConnectionSettings.class);\n+    when(serverSettings.getServerUrl()).thenReturn(\"https://some.server.url\");\n+    when(mockWorkspacesettings.getServerConnections()).thenReturn(Collections.singletonMap(connId, serverSettings));\n+    when(mockSettingsManager.getCurrentSettings()).thenReturn(mockWorkspacesettings);\n \n-    Diagnostic d = new Diagnostic(FAKE_RANGE, \"Foo\", DiagnosticSeverity.Error, SONARQUBE_TAINT_SOURCE, \"XYZ\");\n+    Diagnostic d = new Diagnostic(FAKE_RANGE, \"Foo\", DiagnosticSeverity.Error, SONARQUBE_TAINT_SOURCE, \"ruleKey\");\n \n     ServerIssue issue = mock(ServerIssue.class);\n     when(issue.ruleKey()).thenReturn(\"ruleKey\");\n+    when(issue.creationDate()).thenReturn(Instant.EPOCH);\n     ServerIssue.Flow flow = mock(ServerIssue.Flow.class);\n     when(issue.getFlows()).thenReturn(Collections.singletonList(flow));\n     ServerIssueLocation location = mock(ServerIssueLocation.class);\n     when(flow.locations()).thenReturn(Collections.singletonList(location));\n+    when(issue.key()).thenReturn(\"SomeIssueKey\");\n     when(mockAnalysisManager.getTaintVulnerabilityForDiagnostic(any(URI.class), eq(d))).thenReturn(Optional.of(issue));\n \n     List<Either<Command, CodeAction>> codeActions = underTest.computeCodeActions(new CodeActionParams(FAKE_TEXT_DOCUMENT, FAKE_RANGE,\n       new CodeActionContext(singletonList(d))), NOP_CANCEL_TOKEN);\n \n-    assertThat(codeActions).extracting(c -> c.getRight().getTitle()).containsOnly(\"Show all locations for taint vulnerability 'ruleKey'\");\n+    assertThat(codeActions).extracting(c -> c.getRight().getTitle()).containsOnly(\n+      \"Open description of SonarLint rule 'ruleKey'\",\n+      \"Show all locations for taint vulnerability 'ruleKey'\",\n+      \"Open taint vulnerability 'ruleKey' on 'connectionId'\"\n+    );\n   }\n \n-\n   @Test\n   void suggestShowAllLocationsForIssueWithFlows() {\n     when(bindingManager.getBinding(URI.create(FILE_URI))).thenReturn(Optional.empty());\n@@ -250,4 +272,30 @@ void openRuleDescriptionForUnboundProject() {\n       new ShowRuleDescriptionParams(FAKE_RULE_KEY, \"Name\", \"Desc\", \"Type\", \"Severity\", params));\n   }\n \n+  @Test\n+  void browseTaintVulnerability() {\n+    String issueUrl = \"https://some.sq/issue/id\";\n+    underTest.executeCommand(new ExecuteCommandParams(SONARLINT_BROWSE_TAINT_VULNERABILITY, singletonList(new JsonPrimitive(issueUrl))), NOP_CANCEL_TOKEN);\n+    verify(mockTelemetry).taintVulnerabilitiesInvestigatedRemotely();\n+    verify(mockClient).browseTo(issueUrl);\n+  }\n+\n+  @Test\n+  void showTaintVulnerabilityFlows() {\n+    String issueKey = \"someIssueKey\";\n+    String connectionId = \"connectionId\";\n+    ServerIssue issue = mock(ServerIssue.class);\n+    when(issue.ruleKey()).thenReturn(\"ruleKey\");\n+    when(issue.creationDate()).thenReturn(Instant.EPOCH);\n+    ServerIssue.Flow flow = mock(ServerIssue.Flow.class);\n+    when(issue.getFlows()).thenReturn(Collections.singletonList(flow));\n+    ServerIssueLocation location = mock(ServerIssueLocation.class);\n+    when(flow.locations()).thenReturn(Collections.singletonList(location));\n+    when(mockAnalysisManager.getTaintVulnerabilityByKey(issueKey)).thenReturn(Optional.of(issue));\n+\n+    underTest.executeCommand(new ExecuteCommandParams(SONARLINT_SHOW_TAINT_VULNERABILITY_FLOWS, asList(new JsonPrimitive(issueKey), new JsonPrimitive(connectionId))),\n+      NOP_CANCEL_TOKEN);\n+    verify(mockAnalysisManager).getTaintVulnerabilityByKey(issueKey);\n+    verify(mockTelemetry).taintVulnerabilitiesInvestigatedLocally();\n+  }\n }"
  },
  {
    "sha": "82f7ed5523880d4a83ee3ccb784de80ba2937558",
    "filename": "src/test/java/org/sonarsource/sonarlint/ls/SonarLintTelemetryTests.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/SonarLintTelemetryTests.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/SonarLintTelemetryTests.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/test/java/org/sonarsource/sonarlint/ls/SonarLintTelemetryTests.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -228,6 +228,38 @@ void showHotspotRequestReceived_when_disabled() {\n     verifyNoMoreInteractions(telemetryManager);\n   }\n \n+  @Test\n+  void taintVulnerabilitiesInvestigatedLocally_when_enabled() {\n+    when(telemetryManager.isEnabled()).thenReturn(true);\n+    telemetry.taintVulnerabilitiesInvestigatedLocally();\n+    verify(telemetryManager).isEnabled();\n+    verify(telemetryManager).taintVulnerabilitiesInvestigatedLocally();\n+  }\n+\n+  @Test\n+  void taintVulnerabilitiesInvestigatedLocally_when_disabled() {\n+    when(telemetryManager.isEnabled()).thenReturn(false);\n+    telemetry.taintVulnerabilitiesInvestigatedLocally();\n+    verify(telemetryManager).isEnabled();\n+    verifyNoMoreInteractions(telemetryManager);\n+  }\n+\n+  @Test\n+  void taintVulnerabilitiesInvestigatedRemotely_when_enabled() {\n+    when(telemetryManager.isEnabled()).thenReturn(true);\n+    telemetry.taintVulnerabilitiesInvestigatedRemotely();\n+    verify(telemetryManager).isEnabled();\n+    verify(telemetryManager).taintVulnerabilitiesInvestigatedRemotely();\n+  }\n+\n+  @Test\n+  void taintVulnerabilitiesInvestigatedRemotely_when_disabled() {\n+    when(telemetryManager.isEnabled()).thenReturn(false);\n+    telemetry.taintVulnerabilitiesInvestigatedRemotely();\n+    verify(telemetryManager).isEnabled();\n+    verifyNoMoreInteractions(telemetryManager);\n+  }\n+\n   @Test\n   void should_start_disabled_when_storagePath_null() {\n     when(telemetryManager.isEnabled()).thenReturn(true);"
  },
  {
    "sha": "8da5e0c4447579a1a1ef168cee3e3fe7b386e0b5",
    "filename": "src/test/java/org/sonarsource/sonarlint/ls/UtilsTest.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/UtilsTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/UtilsTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/test/java/org/sonarsource/sonarlint/ls/UtilsTest.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * SonarLint Language Server\n+ * Copyright (C) 2009-2021 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonarsource.sonarlint.ls;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class UtilsTest {\n+\n+  @ParameterizedTest\n+  @CsvSource({\n+    \"0,vulnerabilities\",\n+    \"1,vulnerability\",\n+    \"42,vulnerabilities\"\n+  })\n+  void shouldPluralizeVulnerability(long nbItems, String expected) {\n+    assertThat(Utils.pluralize(nbItems, \"vulnerability\", \"vulnerabilities\")).isEqualTo(expected);\n+  }\n+\n+  @ParameterizedTest\n+  @CsvSource({\n+    \"0,issues\",\n+    \"1,issue\",\n+    \"42,issues\"\n+  })\n+  void shouldPluralizeIssue(long nbItems, String expected) {\n+    assertThat(Utils.pluralize(nbItems, \"issue\")).isEqualTo(expected);\n+  }\n+}"
  },
  {
    "sha": "125041fa859c6ae213a30efd7b6a209a27d22eb3",
    "filename": "src/test/java/org/sonarsource/sonarlint/ls/commands/ShowAllLocationsCommandTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 7,
    "changes": 23,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/commands/ShowAllLocationsCommandTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/commands/ShowAllLocationsCommandTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/test/java/org/sonarsource/sonarlint/ls/commands/ShowAllLocationsCommandTest.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -22,6 +22,7 @@\n import java.net.URI;\n import java.nio.file.InvalidPathException;\n import java.nio.file.Paths;\n+import java.time.Instant;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -84,6 +85,8 @@ void shouldBuildCommandParamsFromIssue() {\n     assertThat(params.getFlows()).hasSize(2);\n     assertThat(params.getFlows().get(0).getLocations()).hasSize(2);\n     assertThat(params.getFlows().get(1).getLocations()).hasSize(1);\n+    assertThat(params.getConnectionId()).isNull();\n+    assertThat(params.getCreationDate()).isNull();\n   }\n \n   @Test\n@@ -92,6 +95,7 @@ void pathResolverTest() {\n     when(issue.getFilePath()).thenReturn(\"filePath\");\n     ServerIssue.Flow flow = mock(ServerIssue.Flow.class);\n     when(issue.getFlows()).thenReturn(Collections.singletonList(flow));\n+    when(issue.creationDate()).thenReturn(Instant.EPOCH);\n \n     String locationFilePath = \"locationFilePath\";\n \n@@ -115,14 +119,12 @@ void pathResolverTest() {\n     Map<URI, LocalCodeFile> cache = new HashMap<>();\n     cache.put(Paths.get(locationFilePath).toUri(), mockCodeFile);\n \n-    ShowAllLocationsCommand.Param param = new ShowAllLocationsCommand.Param(issue, (s) -> {\n-      try {\n-        return Optional.of(Paths.get(s).toUri());\n-      } catch (InvalidPathException e) {\n-        return Optional.empty();\n-      }\n-    }, cache);\n+    String connectionId = \"connectionId\";\n \n+    ShowAllLocationsCommand.Param param = new ShowAllLocationsCommand.Param(issue, connectionId, ShowAllLocationsCommandTest::resolvePath, cache);\n+\n+    assertThat(param.getConnectionId()).isEqualTo(connectionId);\n+    assertThat(param.getCreationDate()).isEqualTo(\"1970-01-01T00:00:00Z\");\n     assertThat(param.getFileUri().toString()).endsWith(\"filePath\");\n     List<ShowAllLocationsCommand.Location> allLocations = param.getFlows().get(0).getLocations();\n     ShowAllLocationsCommand.Location firstLocation = allLocations.get(0);\n@@ -138,4 +140,11 @@ void pathResolverTest() {\n     assertThat(secondLocation.getCodeMatches()).isFalse();\n   }\n \n+  private static Optional<URI> resolvePath(String s) {\n+    try {\n+      return Optional.of(Paths.get(s).toUri());\n+    } catch (InvalidPathException e) {\n+      return Optional.empty();\n+    }\n+  }\n }"
  },
  {
    "sha": "aff08229b685cd0a12ece97ab04af8798080e36a",
    "filename": "src/test/java/org/sonarsource/sonarlint/ls/mediumtests/AbstractLanguageServerMediumTests.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/AbstractLanguageServerMediumTests.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/AbstractLanguageServerMediumTests.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/AbstractLanguageServerMediumTests.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -86,6 +86,7 @@\n import org.sonarsource.sonarlint.ls.SonarLintExtendedLanguageClient;\n import org.sonarsource.sonarlint.ls.SonarLintExtendedLanguageServer;\n import org.sonarsource.sonarlint.ls.SonarLintTelemetry;\n+import org.sonarsource.sonarlint.ls.commands.ShowAllLocationsCommand;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n@@ -335,6 +336,11 @@ public void logMessage(MessageParams message) {\n       return CompletableFutures.computeAsync(null);\n     }\n \n+    @Override\n+    public CompletableFuture<Void> showTaintVulnerability(ShowAllLocationsCommand.Param params) {\n+      return CompletableFutures.computeAsync(null);\n+    }\n+\n     @Override\n     public CompletableFuture<GetJavaConfigResponse> getJavaConfig(String fileUri) {\n       return CompletableFutures.computeAsync(cancelToken -> {"
  },
  {
    "sha": "5e8303dec5a3fefa721f0c41bbdf47bb9019864f",
    "filename": "src/test/java/org/sonarsource/sonarlint/ls/mediumtests/JavaMediumTests.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/JavaMediumTests.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/JavaMediumTests.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/JavaMediumTests.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -137,7 +137,7 @@ void analyzeSimpleJavaFileWithFlows() throws Exception {\n     assertThat(diagnostics)\n       .extracting(startLine(), startCharacter(), endLine(), endCharacter(), code(), Diagnostic::getSource, Diagnostic::getMessage, Diagnostic::getSeverity)\n       .containsExactly(\n-        tuple(7, 11, 7, 26, \"java:S2259\", \"sonarlint\", \"\\\"NullPointerException\\\" will be thrown when invoking method \\\"doSomeThingWith()\\\". [+1 flow]\", DiagnosticSeverity.Warning));\n+        tuple(7, 11, 7, 26, \"java:S2259\", \"sonarlint\", \"\\\"NullPointerException\\\" will be thrown when invoking method \\\"doSomeThingWith()\\\". [+5 locations]\", DiagnosticSeverity.Warning));\n   }\n \n   @Test"
  },
  {
    "sha": "a2708452ab056f73b6c0eae0c59a24b81463346b",
    "filename": "src/test/java/org/sonarsource/sonarlint/ls/mediumtests/LanguageServerMediumTests.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SonarSource/sonarlint-language-server/blob/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/LanguageServerMediumTests.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-language-server/raw/acd287a00055b79629992af69f1b46d3ec5167c8/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/LanguageServerMediumTests.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-language-server/contents/src/test/java/org/sonarsource/sonarlint/ls/mediumtests/LanguageServerMediumTests.java?ref=acd287a00055b79629992af69f1b46d3ec5167c8",
    "patch": "@@ -484,7 +484,7 @@ void test_analysis_logs_disabled() throws Exception {\n       .extracting(withoutTimestamp())\n       .containsExactly(\n         \"[Info] Analyzing file '\" + uri + \"'...\",\n-        \"[Info] Found 1 issue(s)\"));\n+        \"[Info] Found 1 issue\"));\n   }\n \n   @Test\n@@ -502,7 +502,7 @@ void test_debug_logs_enabled() throws Exception {\n       .containsSubsequence(\n         \"[Debug] Queuing analysis of file '\" + uri + \"'\",\n         \"[Info] Analyzing file '\" + uri + \"'...\",\n-        \"[Info] Found 1 issue(s)\"));\n+        \"[Info] Found 1 issue\"));\n   }\n \n   @Test\n@@ -522,7 +522,7 @@ void test_analysis_logs_enabled() throws Exception {\n         \"[Info] Index files\",\n         \"[Info] 1 file indexed\",\n         \"[Info] 1 source files to be analyzed\",\n-        \"[Info] Found 1 issue(s)\"));\n+        \"[Info] Found 1 issue\"));\n   }\n \n   @Test\n@@ -543,7 +543,7 @@ void test_analysis_with_debug_logs_enabled() throws Exception {\n         \"[Debug] Language of file '\" + uri + \"' is set to 'JavaScript'\",\n         \"[Info] 1 file indexed\",\n         \"[Debug] Execute Sensor: JavaScript analysis\",\n-        \"[Info] Found 1 issue(s)\"));\n+        \"[Info] Found 1 issue\"));\n   }\n \n   private Predicate<? super MessageParams> notFromContextualTSserver() {"
  }
]
