[
  {
    "sha": "57a3c277a7e4c463d36a790f3adc27d677768c71",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultClientIssue.java",
    "status": "modified",
    "additions": 16,
    "deletions": 6,
    "changes": 22,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultClientIssue.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultClientIssue.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultClientIssue.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -26,18 +26,21 @@\n import org.sonar.api.batch.rule.ActiveRule;\n import org.sonar.api.batch.rule.Rule;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.ClientInputFile;\n+import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;\n+import org.sonarsource.sonarlint.core.client.api.common.analysis.IssueLocation;\n \n-public final class DefaultClientIssue extends TextRangeLocation implements org.sonarsource.sonarlint.core.client.api.common.analysis.Issue {\n+public final class DefaultClientIssue extends TextRangeLocation implements Issue<IssueLocation> {\n   private final String severity;\n   private final String type;\n   private final ActiveRule activeRule;\n   private final String primaryMessage;\n   private final ClientInputFile clientInputFile;\n   private final Rule rule;\n-  private final List<Flow> flows;\n+  private final List<Flow<IssueLocation>> flows;\n+  private IssueLocation location;\n \n   public DefaultClientIssue(String severity, String type, ActiveRule activeRule, Rule rule, String primaryMessage, @Nullable TextRange textRange,\n-    @Nullable ClientInputFile clientInputFile, List<Flow> flows) {\n+    @Nullable ClientInputFile clientInputFile, List<Flow<IssueLocation>> flows) {\n     super(textRange);\n     this.severity = severity;\n     this.type = type;\n@@ -63,6 +66,14 @@ public String getRuleName() {\n     return rule.name();\n   }\n \n+  @Override\n+  public IssueLocation getLocation() {\n+    if (location == null) {\n+      location = new DefaultLocation(clientInputFile, getTextRange(), primaryMessage);\n+    }\n+    return location;\n+  }\n+\n   @Override\n   public String getRuleKey() {\n     return activeRule.ruleKey().toString();\n@@ -75,13 +86,12 @@ public String getMessage() {\n \n   @SuppressWarnings(\"unchecked\")\n   @CheckForNull\n-  @Override\n   public ClientInputFile getInputFile() {\n-    return clientInputFile;\n+    return getLocation().getInputFile();\n   }\n \n   @Override\n-  public List<Flow> flows() {\n+  public List<Flow<IssueLocation>> getFlows() {\n     return flows;\n   }\n "
  },
  {
    "sha": "59e2fc174ce7a377d883e1862ebee3c9d8f9d02f",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultFlow.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultFlow.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultFlow.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultFlow.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -25,7 +25,7 @@\n import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue.Flow;\n import org.sonarsource.sonarlint.core.container.analysis.filesystem.SonarLintInputFile;\n \n-public class DefaultFlow implements Flow {\n+public class DefaultFlow implements Flow<org.sonarsource.sonarlint.core.client.api.common.analysis.IssueLocation> {\n   private List<org.sonarsource.sonarlint.core.client.api.common.analysis.IssueLocation> locations;\n \n   public DefaultFlow(List<IssueLocation> issueLocations) {\n@@ -38,7 +38,7 @@ public DefaultFlow(List<IssueLocation> issueLocations) {\n   }\n \n   @Override\n-  public List<org.sonarsource.sonarlint.core.client.api.common.analysis.IssueLocation> locations() {\n+  public List<org.sonarsource.sonarlint.core.client.api.common.analysis.IssueLocation> getLocations() {\n     return locations;\n   }\n }"
  },
  {
    "sha": "184b535629c3fd1644de0e05c08d1c8cc44133c5",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultLocation.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultLocation.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultLocation.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultLocation.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -34,6 +34,13 @@ public DefaultLocation(@Nullable ClientInputFile inputFile, @Nullable TextRange\n     this.message = message;\n   }\n \n+  public DefaultLocation(ClientInputFile inputFile, org.sonarsource.sonarlint.core.client.api.common.TextRange textRange, String message) {\n+    super(textRange);\n+    this.inputFile = inputFile;\n+    this.message = message;\n+\n+  }\n+\n   @Override\n   public ClientInputFile getInputFile() {\n     return inputFile;"
  },
  {
    "sha": "15cd33c35b0c996b75e0161d72364aa03ac81976",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/TextRangeLocation.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/TextRangeLocation.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/TextRangeLocation.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/issue/TextRangeLocation.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -45,6 +45,19 @@ protected TextRangeLocation(@Nullable org.sonarsource.sonarlint.core.proto.Sonar\n       : null;\n   }\n \n+  protected TextRangeLocation(@Nullable org.sonarsource.sonarlint.core.client.api.common.TextRange commonApiTextRange) {\n+    org.sonarsource.sonarlint.core.client.api.common.TextRange clientTextRange = null;\n+    if (commonApiTextRange != null) {\n+      Integer startLine = commonApiTextRange.getStartLine();\n+      clientTextRange = new org.sonarsource.sonarlint.core.client.api.common.TextRange(\n+        startLine != null ? startLine : 0,\n+        commonApiTextRange.getStartLineOffset(),\n+        commonApiTextRange.getEndLine(),\n+        commonApiTextRange.getEndLineOffset());\n+    }\n+    this.textRange = clientTextRange;\n+  }\n+\n   @Override\n   public org.sonarsource.sonarlint.core.client.api.common.TextRange getTextRange() {\n     return textRange;"
  },
  {
    "sha": "4561cf8af743d91b24c8d7f49be427007b1f9161",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/analyzer/sensor/SonarLintSensorStorage.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/sensor/SonarLintSensorStorage.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/sensor/SonarLintSensorStorage.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/analyzer/sensor/SonarLintSensorStorage.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -46,6 +46,7 @@\n import org.sonarsource.sonarlint.core.analyzer.issue.IssueFilters;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.ClientInputFile;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.IssueListener;\n+import org.sonarsource.sonarlint.core.client.api.common.analysis.IssueLocation;\n import org.sonarsource.sonarlint.core.container.analysis.SonarLintRule;\n import org.sonarsource.sonarlint.core.container.analysis.filesystem.SonarLintInputFile;\n import org.sonarsource.sonarlint.core.container.model.DefaultAnalysisResult;\n@@ -95,7 +96,7 @@ public void store(Issue issue) {\n     String severity = overriddenSeverity != null ? overriddenSeverity.name() : activeRule.severity();\n     String type = rule.type().name();\n \n-    List<org.sonarsource.sonarlint.core.client.api.common.analysis.Issue.Flow> flows = mapFlows(issue.flows());\n+    List<org.sonarsource.sonarlint.core.client.api.common.analysis.Issue.Flow<IssueLocation>> flows = mapFlows(issue.flows());\n \n     DefaultClientIssue newIssue = new DefaultClientIssue(severity, type, activeRule, rules.find(activeRule.ruleKey()), primaryMessage, issue.primaryLocation().textRange(),\n       inputComponent.isFile() ? ((SonarLintInputFile) inputComponent).getClientInputFile() : null, flows);\n@@ -112,12 +113,12 @@ private static boolean noSonar(InputComponent inputComponent, Issue issue) {\n       && !StringUtils.containsIgnoreCase(issue.ruleKey().rule(), \"nosonar\");\n   }\n \n-  private static List<org.sonarsource.sonarlint.core.client.api.common.analysis.Issue.Flow> mapFlows(List<Flow> flows) {\n+  private static List<org.sonarsource.sonarlint.core.client.api.common.analysis.Issue.Flow<IssueLocation>> mapFlows(List<Flow> flows) {\n     return flows.stream()\n       .map(f -> new DefaultFlow(f.locations()\n         .stream()\n         .collect(toList())))\n-      .filter(f -> !f.locations().isEmpty())\n+      .filter(f -> !f.getLocations().isEmpty())\n       .collect(toList());\n   }\n "
  },
  {
    "sha": "748284cee36a387e45ed642ffde6392a26edfd07",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/client/api/common/analysis/Issue.java",
    "status": "modified",
    "additions": 19,
    "deletions": 8,
    "changes": 27,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/client/api/common/analysis/Issue.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/client/api/common/analysis/Issue.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/client/api/common/analysis/Issue.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -20,21 +20,32 @@\n package org.sonarsource.sonarlint.core.client.api.common.analysis;\n \n import java.util.List;\n+import org.sonarsource.sonarlint.core.client.api.common.IssueRangeAndMessage;\n \n-public interface Issue extends IssueLocation {\n+public interface Issue<L extends IssueRangeAndMessage> {\n \n-  String getSeverity();\n+  default String getSeverity() {\n+    return \"\";\n+  }\n \n-  String getType();\n+  default String getType() {\n+    return \"\";\n+  }\n \n-  String getRuleKey();\n+  default String getRuleKey() {\n+    return \"\";\n+  }\n+\n+  default String getRuleName() {\n+    return \"\";\n+  }\n \n-  String getRuleName();\n+  L getLocation();\n \n-  List<Flow> flows();\n+  List<Flow<L>> getFlows();\n \n-  interface Flow {\n-    List<IssueLocation> locations();\n+  interface Flow<L> {\n+    List<L> getLocations();\n   }\n \n }"
  },
  {
    "sha": "93d7d17bd5455ba5d0ffcd7445ee5b99ae25652b",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/client/api/common/analysis/LocalIssue.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/client/api/common/analysis/LocalIssue.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/client/api/common/analysis/LocalIssue.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/client/api/common/analysis/LocalIssue.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * SonarLint Core - Implementation\n+ * Copyright (C) 2016-2021 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonarsource.sonarlint.core.client.api.common.analysis;\n+\n+public interface LocalIssue extends Issue<IssueLocation> {\n+}"
  },
  {
    "sha": "7fabef189284c5f16f71e334d955c5c2bd09de6f",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/client/api/connected/ServerIssue.java",
    "status": "modified",
    "additions": 15,
    "deletions": 14,
    "changes": 29,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/client/api/connected/ServerIssue.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/client/api/connected/ServerIssue.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/client/api/connected/ServerIssue.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -20,28 +20,29 @@\n package org.sonarsource.sonarlint.core.client.api.connected;\n \n import java.time.Instant;\n-import java.util.List;\n+import org.sonarsource.sonarlint.core.client.api.common.TextRange;\n+import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;\n \n-public interface ServerIssue extends ServerIssueLocation {\n-  String key();\n+public interface ServerIssue extends Issue<ServerIssueLocation> {\n+  \n+  String getKey();\n \n-  String resolution();\n+  String getResolution();\n \n-  String ruleKey();\n+  default String getMessage(){\n+    return getLocation().getMessage();\n+  }\n \n-  String lineHash();\n+  String getLineHash();\n \n-  String assigneeLogin();\n+  String getAssigneeLogin();\n \n-  String severity();\n+  String getFilePath();\n \n-  String type();\n+  Instant getCreationDate();\n \n-  Instant creationDate();\n \n-  List<Flow> getFlows();\n+  TextRange getTextRange();\n \n-  interface Flow {\n-    List<ServerIssueLocation> locations();\n-  }\n+  String getCodeSnippet();\n }"
  },
  {
    "sha": "b1b4eda64750d5e57388da169ad56f98f6cd4d5f",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerFlow.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerFlow.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerFlow.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerFlow.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -21,13 +21,14 @@\n \n import java.util.List;\n import java.util.stream.Collectors;\n-import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue;\n+import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;\n import org.sonarsource.sonarlint.core.client.api.connected.ServerIssueLocation;\n import org.sonarsource.sonarlint.core.proto.Sonarlint.ServerIssue.Location;\n \n import static org.apache.commons.lang.StringUtils.trimToNull;\n \n-public class DefaultServerFlow implements ServerIssue.Flow {\n+public class DefaultServerFlow implements Issue.Flow<ServerIssueLocation> {\n+\n   private final List<ServerIssueLocation> locations;\n \n   public DefaultServerFlow(List<Location> list) {\n@@ -39,7 +40,7 @@ public DefaultServerFlow(List<Location> list) {\n   }\n \n   @Override\n-  public List<ServerIssueLocation> locations() {\n+  public List<ServerIssueLocation> getLocations() {\n     return locations;\n   }\n }"
  },
  {
    "sha": "fba6d807e54b353e3d528763534025a25743d5f7",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerIssue.java",
    "status": "modified",
    "additions": 21,
    "deletions": 11,
    "changes": 32,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerIssue.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerIssue.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerIssue.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -25,6 +25,7 @@\n import javax.annotation.Nullable;\n import org.sonarsource.sonarlint.core.client.api.common.TextRange;\n import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue;\n+import org.sonarsource.sonarlint.core.client.api.connected.ServerIssueLocation;\n \n public class DefaultServerIssue implements ServerIssue {\n   private String key;\n@@ -37,37 +38,46 @@\n   private Instant creationDate;\n   private String severity;\n   private String type;\n-  private List<Flow> flows = new ArrayList<>();\n+  private List<Flow<ServerIssueLocation>> flows = new ArrayList<>();\n   private TextRange textRange;\n   private String codeSnippet;\n+  private DefaultServerLocation location;\n \n   @Override\n-  public String key() {\n+  public String getKey() {\n     return key;\n   }\n \n   @Override\n-  public String resolution() {\n+  public String getResolution() {\n     return resolution;\n   }\n \n   @Override\n-  public String ruleKey() {\n+  public String getRuleKey() {\n     return ruleKey;\n   }\n \n+  @Override\n+  public ServerIssueLocation getLocation() {\n+    if (location == null) {\n+      location = new DefaultServerLocation(filePath, getTextRange(), message, codeSnippet);\n+    }\n+    return location;\n+  }\n+\n   @Override\n   public String getMessage() {\n     return message;\n   }\n \n   @Override\n-  public String lineHash() {\n+  public String getLineHash() {\n     return lineHash;\n   }\n \n   @Override\n-  public String assigneeLogin() {\n+  public String getAssigneeLogin() {\n     return assigneeLogin;\n   }\n \n@@ -77,17 +87,17 @@ public String getFilePath() {\n   }\n \n   @Override\n-  public Instant creationDate() {\n+  public Instant getCreationDate() {\n     return creationDate;\n   }\n \n   @Override\n-  public String severity() {\n+  public String getSeverity() {\n     return severity;\n   }\n \n   @Override\n-  public String type() {\n+  public String getType() {\n     return type;\n   }\n \n@@ -97,7 +107,7 @@ public TextRange getTextRange() {\n   }\n \n   @Override\n-  public List<Flow> getFlows() {\n+  public List<Flow<ServerIssueLocation>> getFlows() {\n     return flows;\n   }\n \n@@ -161,7 +171,7 @@ public DefaultServerIssue setTextRange(@Nullable TextRange textRange) {\n     return this;\n   }\n \n-  public DefaultServerIssue setFlows(List<Flow> flows) {\n+  public DefaultServerIssue setFlows(List<Flow<ServerIssueLocation>> flows) {\n     this.flows = flows;\n     return this;\n   }"
  },
  {
    "sha": "4c2d1b9f83286b8c2afa8aa8725f8b1962bcbba1",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerLocation.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerLocation.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerLocation.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/container/model/DefaultServerLocation.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -36,6 +36,13 @@ public DefaultServerLocation(@Nullable String filePath, @Nullable TextRange text\n     this.codeSnippet = codeSnippet;\n   }\n \n+  public DefaultServerLocation(String filePath, org.sonarsource.sonarlint.core.client.api.common.TextRange textRange, String message, String codeSnippet) {\n+    super(textRange);\n+    this.filePath = filePath;\n+    this.message = message;\n+    this.codeSnippet = codeSnippet;\n+  }\n+\n   @Override\n   public String getFilePath() {\n     return filePath;"
  },
  {
    "sha": "06e172a8a52056895a36ff2db1da1d9363921d30",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/tracking/IssueTrackable.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/tracking/IssueTrackable.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/tracking/IssueTrackable.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/tracking/IssueTrackable.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -75,12 +75,12 @@ public String getType() {\n \n   @Override\n   public String getMessage() {\n-    return issue.getMessage();\n+    return issue.getLocation().getMessage();\n   }\n \n   @Override\n   public Integer getLine() {\n-    return issue.getStartLine();\n+    return issue.getLocation().getStartLine();\n   }\n \n   @Override"
  },
  {
    "sha": "6e43ded92c9378bdb4699f444e43d73f9cd4fe9f",
    "filename": "core/src/main/java/org/sonarsource/sonarlint/core/tracking/ServerIssueTrackable.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/tracking/ServerIssueTrackable.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/main/java/org/sonarsource/sonarlint/core/tracking/ServerIssueTrackable.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/main/java/org/sonarsource/sonarlint/core/tracking/ServerIssueTrackable.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -38,7 +38,7 @@ public Issue getIssue() {\n \n   @Override\n   public String getRuleKey() {\n-    return serverIssue.ruleKey();\n+    return serverIssue.getRuleKey();\n   }\n \n   @Override\n@@ -48,12 +48,12 @@ public String getRuleName() {\n \n   @Override\n   public String getSeverity() {\n-    return serverIssue.severity();\n+    return serverIssue.getSeverity();\n   }\n \n   @Override\n   public String getType() {\n-    return serverIssue.type();\n+    return serverIssue.getType();\n   }\n \n   @Override\n@@ -63,12 +63,12 @@ public String getMessage() {\n \n   @Override\n   public Integer getLine() {\n-    return serverIssue.getStartLine();\n+    return serverIssue.getLocation().getStartLine();\n   }\n \n   @Override\n   public Integer getLineHash() {\n-    return serverIssue.lineHash().hashCode();\n+    return serverIssue.getLineHash().hashCode();\n   }\n \n   @Override\n@@ -84,21 +84,21 @@ public Integer getTextRangeHash() {\n \n   @Override\n   public Long getCreationDate() {\n-    return serverIssue.creationDate().toEpochMilli();\n+    return serverIssue.getCreationDate().toEpochMilli();\n   }\n \n   @Override\n   public String getServerIssueKey() {\n-    return serverIssue.key();\n+    return serverIssue.getKey();\n   }\n \n   @Override\n   public boolean isResolved() {\n-    return !serverIssue.resolution().isEmpty();\n+    return !serverIssue.getResolution().isEmpty();\n   }\n \n   @Override\n   public String getAssignee() {\n-    return serverIssue.assigneeLogin();\n+    return serverIssue.getAssigneeLogin();\n   }\n }"
  },
  {
    "sha": "ff4dee9daa47fb96776b1fb74f6b8642c006d8ec",
    "filename": "core/src/test/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultClientIssueTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultClientIssueTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultClientIssueTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/test/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultClientIssueTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -88,6 +88,6 @@ public void nullRange() {\n     assertThat(issue.getEndLine()).isNull();\n     assertThat(issue.getEndLineOffset()).isNull();\n \n-    assertThat(issue.flows()).isEmpty();\n+    assertThat(issue.getFlows()).isEmpty();\n   }\n }"
  },
  {
    "sha": "eb895d2138e09b5b73109ad1370cad9f92b298fe",
    "filename": "core/src/test/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultLocationTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultLocationTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultLocationTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/test/java/org/sonarsource/sonarlint/core/analyzer/issue/DefaultLocationTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -20,6 +20,7 @@\n package org.sonarsource.sonarlint.core.analyzer.issue;\n \n import org.junit.*;\n+import org.sonar.api.batch.fs.TextRange;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.ClientInputFile;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -30,7 +31,7 @@\n   public void verify_accessors() {\n     ClientInputFile inputFile = mock(ClientInputFile.class);\n     String message = \"fummy\";\n-    DefaultLocation defaultLocation = new DefaultLocation(inputFile, null, message);\n+    DefaultLocation defaultLocation = new DefaultLocation(inputFile, (TextRange) null, message);\n \n     assertThat(defaultLocation.getInputFile()).isSameAs(inputFile);\n     assertThat(defaultLocation.getMessage()).isSameAs(message);"
  },
  {
    "sha": "6c23eea1ee0273db93a76c509c7cd7d307746aca",
    "filename": "core/src/test/java/org/sonarsource/sonarlint/core/container/model/DefaultServerIssueTest.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/container/model/DefaultServerIssueTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/container/model/DefaultServerIssueTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/test/java/org/sonarsource/sonarlint/core/container/model/DefaultServerIssueTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -32,24 +32,24 @@\n   public void testRoundTrips() {\n     DefaultServerIssue issue = new DefaultServerIssue();\n     Instant i1 = Instant.ofEpochMilli(100_000_000);\n-    assertThat(issue.setLineHash(\"checksum1\").lineHash()).isEqualTo(\"checksum1\");\n-    assertThat(issue.setCreationDate(i1).creationDate()).isEqualTo(i1);\n-    assertThat(issue.setAssigneeLogin(\"login1\").assigneeLogin()).isEqualTo(\"login1\");\n+    assertThat(issue.setLineHash(\"checksum1\").getLineHash()).isEqualTo(\"checksum1\");\n+    assertThat(issue.setCreationDate(i1).getCreationDate()).isEqualTo(i1);\n+    assertThat(issue.setAssigneeLogin(\"login1\").getAssigneeLogin()).isEqualTo(\"login1\");\n     assertThat(issue.setFilePath(\"path1\").getFilePath()).isEqualTo(\"path1\");\n-    assertThat(issue.setKey(\"key1\").key()).isEqualTo(\"key1\");\n+    assertThat(issue.setKey(\"key1\").getKey()).isEqualTo(\"key1\");\n     issue.setTextRange(new org.sonarsource.sonarlint.core.client.api.common.TextRange(1,\n       2,\n       3,\n       4));\n-    assertThat(issue.getStartLine()).isEqualTo(1);\n-    assertThat(issue.getStartLineOffset()).isEqualTo(2);\n-    assertThat(issue.getEndLine()).isEqualTo(3);\n-    assertThat(issue.getEndLineOffset()).isEqualTo(4);\n-    assertThat(issue.setSeverity(\"MAJOR\").severity()).isEqualTo(\"MAJOR\");\n-    assertThat(issue.setRuleKey(\"rule1\").ruleKey()).isEqualTo(\"rule1\");\n-    assertThat(issue.setResolution(\"RESOLVED\").resolution()).isEqualTo(\"RESOLVED\");\n+    assertThat(issue.getLocation().getStartLine()).isEqualTo(1);\n+    assertThat(issue.getLocation().getStartLineOffset()).isEqualTo(2);\n+    assertThat(issue.getLocation().getEndLine()).isEqualTo(3);\n+    assertThat(issue.getLocation().getEndLineOffset()).isEqualTo(4);\n+    assertThat(issue.setSeverity(\"MAJOR\").getSeverity()).isEqualTo(\"MAJOR\");\n+    assertThat(issue.setRuleKey(\"rule1\").getRuleKey()).isEqualTo(\"rule1\");\n+    assertThat(issue.setResolution(\"RESOLVED\").getResolution()).isEqualTo(\"RESOLVED\");\n     assertThat(issue.setMessage(\"msg1\").getMessage()).isEqualTo(\"msg1\");\n-    assertThat(issue.setType(\"type\").type()).isEqualTo(\"type\");\n+    assertThat(issue.setType(\"type\").getType()).isEqualTo(\"type\");\n \n     assertThat(issue.getFlows()).isEmpty();\n "
  },
  {
    "sha": "9384c037bf49e1d5bbf29712a60b8960f5276ba9",
    "filename": "core/src/test/java/org/sonarsource/sonarlint/core/container/storage/IssueStoreReaderTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 14,
    "changes": 28,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/container/storage/IssueStoreReaderTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/container/storage/IssueStoreReaderTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/test/java/org/sonarsource/sonarlint/core/container/storage/IssueStoreReaderTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -253,20 +253,20 @@ public void canReadFlowsFromStorage() {\n     assertThat(serverIssue.getCodeSnippet()).isEqualTo(\"Primary location code\");\n \n     assertThat(serverIssue.getFlows()).hasSize(1);\n-    assertThat(serverIssue.getFlows().get(0).locations()).hasSize(3);\n-    assertThat(serverIssue.getFlows().get(0).locations().get(0).getFilePath()).isEqualTo(\"src/path1\");\n-    assertThat(serverIssue.getFlows().get(0).locations().get(0).getMessage()).isEqualTo(\"Flow 1 - Location 1\");\n-    assertThat(serverIssue.getFlows().get(0).locations().get(0).getTextRange().getStartLine()).isEqualTo(5);\n-    assertThat(serverIssue.getFlows().get(0).locations().get(0).getTextRange().getStartLineOffset()).isEqualTo(6);\n-    assertThat(serverIssue.getFlows().get(0).locations().get(0).getTextRange().getEndLine()).isEqualTo(7);\n-    assertThat(serverIssue.getFlows().get(0).locations().get(0).getTextRange().getEndLineOffset()).isEqualTo(8);\n-    assertThat(serverIssue.getFlows().get(0).locations().get(0).getCodeSnippet()).isEqualTo(\"Some code snipper\\n\\t with newline\");\n-\n-    assertThat(serverIssue.getFlows().get(0).locations().get(1).getMessage()).isEqualTo(\"Flow 1 - Location 2 - Without text range\");\n-    assertThat(serverIssue.getFlows().get(0).locations().get(1).getTextRange()).isNull();\n-\n-    assertThat(serverIssue.getFlows().get(0).locations().get(2).getMessage()).isEmpty();\n-    assertThat(serverIssue.getFlows().get(0).locations().get(2).getFilePath()).isEqualTo(\"src/path2\");\n+    assertThat(serverIssue.getFlows().get(0).getLocations()).hasSize(3);\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(0).getFilePath()).isEqualTo(\"src/path1\");\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(0).getMessage()).isEqualTo(\"Flow 1 - Location 1\");\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(0).getTextRange().getStartLine()).isEqualTo(5);\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(0).getTextRange().getStartLineOffset()).isEqualTo(6);\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(0).getTextRange().getEndLine()).isEqualTo(7);\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(0).getTextRange().getEndLineOffset()).isEqualTo(8);\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(0).getCodeSnippet()).isEqualTo(\"Some code snipper\\n\\t with newline\");\n+\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(1).getMessage()).isEqualTo(\"Flow 1 - Location 2 - Without text range\");\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(1).getTextRange()).isNull();\n+\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(2).getMessage()).isEmpty();\n+    assertThat(serverIssue.getFlows().get(0).getLocations().get(2).getFilePath()).isEqualTo(\"src/path2\");\n   }\n \n   private final Comparator<ServerIssue> simpleComparator = (o1, o2) -> {"
  },
  {
    "sha": "500ca109d621ea9bce05fc2c8dca8c13284927c9",
    "filename": "core/src/test/java/org/sonarsource/sonarlint/core/mediumtest/ConnectedIssueExclusionsMediumTest.java",
    "status": "modified",
    "additions": 19,
    "deletions": 17,
    "changes": 36,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/mediumtest/ConnectedIssueExclusionsMediumTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/mediumtest/ConnectedIssueExclusionsMediumTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/test/java/org/sonarsource/sonarlint/core/mediumtest/ConnectedIssueExclusionsMediumTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -43,8 +43,10 @@\n import org.sonarsource.sonarlint.core.client.api.common.analysis.ClientInputFile;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.IssueListener;\n+import org.sonarsource.sonarlint.core.client.api.common.analysis.IssueLocation;\n import org.sonarsource.sonarlint.core.client.api.connected.ConnectedAnalysisConfiguration;\n import org.sonarsource.sonarlint.core.client.api.connected.ConnectedGlobalConfiguration;\n+import org.sonarsource.sonarlint.core.client.api.connected.ServerIssueLocation;\n import org.sonarsource.sonarlint.core.container.storage.ProtobufUtil;\n import org.sonarsource.sonarlint.core.container.storage.StoragePaths;\n import org.sonarsource.sonarlint.core.container.storage.StorageReader;\n@@ -164,7 +166,7 @@ public void issueExclusions() throws Exception {\n     ClientInputFile inputFile1 = prepareJavaInputFile1();\n     ClientInputFile inputFile2 = prepareJavaInputFile2();\n \n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, FILE1_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE1_PATH, \"BLOCKER\"),\n@@ -180,7 +182,7 @@ public void issueExclusions() throws Exception {\n     updateProjectConfig(storagePaths, originalModuleConfig, ImmutableMap.of(\"sonar.issue.ignore.multicriteria\", \"1\",\n       \"sonar.issue.ignore.multicriteria.1.resourceKey\", \"*\",\n       \"sonar.issue.ignore.multicriteria.1.ruleKey\", \"*S1481\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, FILE1_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S106\", 4, FILE2_PATH, \"MAJOR\"),\n@@ -189,7 +191,7 @@ public void issueExclusions() throws Exception {\n     updateProjectConfig(storagePaths, originalModuleConfig, ImmutableMap.of(\"sonar.issue.ignore.multicriteria\", \"1\",\n       \"sonar.issue.ignore.multicriteria.1.resourceKey\", FILE2_PATH,\n       \"sonar.issue.ignore.multicriteria.1.ruleKey\", \"*\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, FILE1_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE1_PATH, \"BLOCKER\"));\n@@ -199,7 +201,7 @@ public void issueExclusions() throws Exception {\n       \"sonar.issue.ignore.multicriteria.1.ruleKey\", \"java:S1481\",\n       \"sonar.issue.ignore.multicriteria.2.resourceKey\", FILE1_PATH,\n       \"sonar.issue.ignore.multicriteria.2.ruleKey\", \"java:S106\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE1_PATH, \"BLOCKER\"),\n       tuple(\"java:S106\", 4, FILE2_PATH, \"MAJOR\"),\n@@ -211,7 +213,7 @@ public void issueExclusionsByRegexp() throws Exception {\n     ClientInputFile inputFile1 = prepareJavaInputFile1();\n     ClientInputFile inputFile2 = prepareJavaInputFile2();\n \n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, FILE1_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE1_PATH, \"BLOCKER\"),\n@@ -221,22 +223,22 @@ public void issueExclusionsByRegexp() throws Exception {\n \n     updateProjectConfig(storagePaths, originalModuleConfig, ImmutableMap.of(\"sonar.issue.ignore.allfile\", \"1\",\n       \"sonar.issue.ignore.allfile.1.fileRegexp\", \"NOSL1\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 4, FILE2_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE2_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE2_PATH, \"BLOCKER\"));\n \n     updateProjectConfig(storagePaths, originalModuleConfig, ImmutableMap.of(\"sonar.issue.ignore.allfile\", \"1\",\n       \"sonar.issue.ignore.allfile.1.fileRegexp\", \"NOSL(1|2)\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).isEmpty();\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).isEmpty();\n   }\n \n   @Test\n   public void issueExclusionsByBlock() throws Exception {\n     ClientInputFile inputFile1 = prepareJavaInputFile1();\n     ClientInputFile inputFile2 = prepareJavaInputFile2();\n \n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, FILE1_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE1_PATH, \"BLOCKER\"),\n@@ -247,7 +249,7 @@ public void issueExclusionsByBlock() throws Exception {\n     updateProjectConfig(storagePaths, originalModuleConfig, ImmutableMap.of(\"sonar.issue.ignore.block\", \"1\",\n       \"sonar.issue.ignore.block.1.beginBlockRegexp\", \"SON.*-OFF\",\n       \"sonar.issue.ignore.block.1.endBlockRegexp\", \"SON.*-ON\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE1_PATH, \"BLOCKER\"),\n       tuple(\"java:S106\", 4, FILE2_PATH, \"MAJOR\"),\n@@ -263,7 +265,7 @@ public void issueInclusions() throws Exception {\n     updateProjectConfig(storagePaths, originalModuleConfig, ImmutableMap.of(\"sonar.issue.enforce.multicriteria\", \"1\",\n       \"sonar.issue.enforce.multicriteria.1.resourceKey\", \"Foo*.java\",\n       \"sonar.issue.enforce.multicriteria.1.ruleKey\", \"*\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, FILE1_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE1_PATH, \"BLOCKER\"),\n@@ -274,7 +276,7 @@ public void issueInclusions() throws Exception {\n     updateProjectConfig(storagePaths, originalModuleConfig, ImmutableMap.of(\"sonar.issue.enforce.multicriteria\", \"1\",\n       \"sonar.issue.enforce.multicriteria.1.resourceKey\", FILE2_PATH,\n       \"sonar.issue.enforce.multicriteria.1.ruleKey\", \"*S1481\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, FILE1_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S106\", 4, FILE2_PATH, \"MAJOR\"),\n@@ -284,7 +286,7 @@ public void issueInclusions() throws Exception {\n     updateProjectConfig(storagePaths, originalModuleConfig, ImmutableMap.of(\"sonar.issue.enforce.multicriteria\", \"1\",\n       \"sonar.issue.enforce.multicriteria.1.resourceKey\", FILE2_PATH,\n       \"sonar.issue.enforce.multicriteria.1.ruleKey\", \"*\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 4, FILE2_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE2_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE2_PATH, \"BLOCKER\"));\n@@ -294,15 +296,15 @@ public void issueInclusions() throws Exception {\n       \"sonar.issue.enforce.multicriteria.1.ruleKey\", \"java:S1481\",\n       \"sonar.issue.enforce.multicriteria.2.resourceKey\", FILE1_PATH,\n       \"sonar.issue.enforce.multicriteria.2.ruleKey\", \"java:S106\"));\n-    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(collectIssues(inputFile1, inputFile2)).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, FILE1_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, FILE1_PATH, \"MINOR\"),\n       tuple(\"java:S1220\", null, FILE2_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, FILE2_PATH, \"BLOCKER\"));\n   }\n \n-  private List<Issue> collectIssues(ClientInputFile inputFile1, ClientInputFile inputFile2) throws IOException {\n-    final List<Issue> issues = new ArrayList<>();\n+  private List<Issue<IssueLocation>> collectIssues(ClientInputFile inputFile1, ClientInputFile inputFile2) throws IOException {\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       ConnectedAnalysisConfiguration.builder()\n         .setProjectKey(JAVA_MODULE_KEY)\n@@ -350,9 +352,9 @@ private ClientInputFile prepareInputFile(String relativePath, String content, fi\n   }\n \n   static class StoreIssueListener implements IssueListener {\n-    private final List<Issue> issues;\n+    private final List<Issue<IssueLocation>> issues;\n \n-    StoreIssueListener(List<Issue> issues) {\n+    StoreIssueListener(List<Issue<IssueLocation>> issues) {\n       this.issues = issues;\n     }\n "
  },
  {
    "sha": "c664fb6cb997f63c0d52d7543706ddd65d821a1b",
    "filename": "core/src/test/java/org/sonarsource/sonarlint/core/mediumtest/StandaloneIssueMediumTests.java",
    "status": "modified",
    "additions": 48,
    "deletions": 47,
    "changes": 95,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/mediumtest/StandaloneIssueMediumTests.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/mediumtest/StandaloneIssueMediumTests.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/test/java/org/sonarsource/sonarlint/core/mediumtest/StandaloneIssueMediumTests.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -56,6 +56,7 @@\n import org.sonarsource.sonarlint.core.client.api.common.analysis.AnalysisResults;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.ClientInputFile;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;\n+import org.sonarsource.sonarlint.core.client.api.common.analysis.IssueLocation;\n import org.sonarsource.sonarlint.core.client.api.standalone.StandaloneAnalysisConfiguration;\n import org.sonarsource.sonarlint.core.client.api.standalone.StandaloneGlobalConfiguration;\n import org.sonarsource.sonarlint.core.client.api.standalone.StandaloneRuleDetails;\n@@ -151,15 +152,15 @@ void simpleJavaScript() throws Exception {\n       + \"}\";\n     ClientInputFile inputFile = prepareInputFile(\"foo.js\", content, false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n         .addInputFile(inputFile)\n         .build(),\n       issues::add, null,\n       null);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"javascript:S1481\", 2, \"foo.js\"));\n \n     // SLCORE-160\n@@ -182,7 +183,7 @@ void sonarjs_should_honor_global_and_analysis_level_properties() throws Exceptio\n       + \"}\";\n     ClientInputFile inputFile = prepareInputFile(\"foo.js\", content, false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -192,7 +193,7 @@ void sonarjs_should_honor_global_and_analysis_level_properties() throws Exceptio\n       issues::add, null,\n       null);\n     assertThat(issues.stream().filter(i -> i.getRuleKey().equals(\"javascript:S3827\")))\n-      .extracting(Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+      .extracting(i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n         tuple(2, \"foo.js\"));\n \n     // Change globals using analysis property\n@@ -207,7 +208,7 @@ void sonarjs_should_honor_global_and_analysis_level_properties() throws Exceptio\n       issues::add, null,\n       null);\n     assertThat(issues.stream().filter(i -> i.getRuleKey().equals(\"javascript:S3827\")))\n-      .extracting(Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+      .extracting(i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n         tuple(3, \"foo.js\"));\n   }\n \n@@ -227,13 +228,13 @@ void simpleTypeScript() throws Exception {\n       + \"  if(bar() && bar()) { return 42; }\\n\"\n       + \"}\", false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(StandaloneAnalysisConfiguration.builder()\n       .setBaseDir(baseDir.toPath())\n       .addInputFile(inputFile)\n       .build(), issues::add, null,\n       null);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"typescript:S1764\", 2, \"foo.ts\"));\n \n   }\n@@ -245,14 +246,14 @@ void fileEncoding() throws IOException {\n       + \"  var xoo; //NOSONAR\\n\"\n       + \"}\", false, StandardCharsets.UTF_16, null);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n         .addInputFile(inputFile)\n         .build(),\n       issues::add, null, null);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, Issue::getStartLineOffset, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getStartLineOffset(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"xoo:HasTag\", 1, 9, \"foo.xoo\"),\n       tuple(\"xoo:HasTag\", 2, 6, \"foo.xoo\"),\n       tuple(\"xoo:HasTag\", 2, 12, \"foo.xoo\"));\n@@ -265,14 +266,14 @@ void simpleXoo() throws Exception {\n       + \"  var xoo; //NOSONAR\\n\"\n       + \"}\", false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n         .addInputFile(inputFile)\n         .build(),\n       issues::add, null, null);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, Issue::getStartLineOffset, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getStartLineOffset(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"xoo:HasTag\", 1, 9, \"foo.xoo\"),\n       tuple(\"xoo:HasTag\", 2, 6, \"foo.xoo\"),\n       tuple(\"xoo:HasTag\", 2, 12, \"foo.xoo\"));\n@@ -304,15 +305,15 @@ void simpleC() throws Exception {\n         \"\\\",\\\"executable\\\":\\\"compiler\\\",\\\"cmd\\\":[\\\"cc\\\",\\\"foo.c\\\"]}]}\",\n       StandardCharsets.UTF_8);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n         .addInputFile(inputFile)\n         .putExtraProperty(\"sonar.cfamily.build-wrapper-output\", baseDir.getAbsolutePath())\n         .build(),\n       issues::add, null, null);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, Issue::getStartLineOffset, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getStartLineOffset(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"c:S3805\", 1, 0, \"foo.c\"));\n   }\n \n@@ -324,15 +325,15 @@ void analysisErrors() throws Exception {\n       + \"}\", false);\n     prepareInputFile(\"foo.xoo.error\", \"1,2,error analysing\\n2,3,error analysing\", false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     AnalysisResults results = sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n         .addInputFile(inputFile)\n         .build(),\n       issues::add, null, null);\n     assertThat(results.failedAnalysisFiles()).containsExactly(inputFile);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, Issue::getStartLineOffset, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getStartLineOffset(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"xoo:HasTag\", 2, 6, \"foo.xoo\"));\n   }\n \n@@ -343,7 +344,7 @@ void returnLanguagePerFile() throws IOException {\n       + \"  var y; //NOSONAR\\n\"\n       + \"}\", false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     AnalysisResults results = sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -363,13 +364,13 @@ void simplePhp() throws Exception {\n       + \"}\\n\"\n       + \"?>\", false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(StandaloneAnalysisConfiguration.builder()\n       .setBaseDir(baseDir.toPath())\n       .addInputFile(inputFile)\n       .build(), issues::add,\n       null, null);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"php:S1172\", 2, \"foo.php\"));\n   }\n \n@@ -381,13 +382,13 @@ void simplePython() throws Exception {\n       + \"    print \\\"world!\\\" # NOSONAR\\n\"\n       + \"\\n\", false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(StandaloneAnalysisConfiguration.builder()\n       .setBaseDir(baseDir.toPath())\n       .addInputFile(inputFile)\n       .build(), issues::add,\n       null, null);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"python:PrintStatementUsage\", 2, \"foo.py\"));\n   }\n \n@@ -402,13 +403,13 @@ void useRelativePathToEvaluatePathPatterns() throws Exception {\n       + \"\\n\", StandardCharsets.UTF_8);\n     ClientInputFile inputFile = new OnDiskTestClientInputFile(file.toPath(), \"foo.py\", false, StandardCharsets.UTF_8, null);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(StandaloneAnalysisConfiguration.builder()\n       .setBaseDir(baseDir.toPath())\n       .addInputFile(inputFile)\n       .build(), issues::add,\n       null, null);\n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"python:PrintStatementUsage\", 2, \"foo.py\"));\n   }\n \n@@ -424,15 +425,15 @@ void simpleJava() throws Exception {\n         + \"}\",\n       false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(StandaloneAnalysisConfiguration.builder()\n       .setBaseDir(baseDir.toPath())\n       .addInputFile(inputFile)\n       .build(), issues::add,\n       null, null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, Issue::getStartLineOffset, Issue::getEndLine, Issue::getEndLineOffset,\n-      i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getStartLineOffset(), i -> i.getLocation().getEndLine(), i -> i.getLocation().getEndLineOffset(),\n+      i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n         tuple(\"java:S1220\", null, null, null, null, A_JAVA_FILE_PATH, \"MINOR\"),\n         tuple(\"java:S1481\", 3, 8, 3, 9, A_JAVA_FILE_PATH, \"MINOR\"),\n         tuple(\"java:S106\", 4, 4, 4, 14, A_JAVA_FILE_PATH, \"MAJOR\"),\n@@ -479,7 +480,7 @@ void simpleJavaNoHotspots() throws Exception {\n         + \"}\",\n       false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -504,14 +505,14 @@ void simpleJavaPomXml() throws Exception {\n         + \"</project>\",\n       false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(StandaloneAnalysisConfiguration.builder()\n       .setBaseDir(baseDir.toPath())\n       .addInputFile(inputFile)\n       .build(), issues::add,\n       null, null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S3421\", 6, \"pom.xml\", \"MINOR\"));\n   }\n \n@@ -528,14 +529,14 @@ void supportJavaSuppressWarning() throws Exception {\n         + \"}\",\n       false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(StandaloneAnalysisConfiguration.builder()\n       .setBaseDir(baseDir.toPath())\n       .addInputFile(inputFile)\n       .build(), issues::add,\n       null, null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S1220\", null, A_JAVA_FILE_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 4, A_JAVA_FILE_PATH, \"MINOR\"));\n   }\n@@ -545,7 +546,7 @@ void simpleJavaWithBytecode() throws Exception {\n     Path projectWithByteCode = new File(\"src/test/projects/java-with-bytecode\").getAbsoluteFile().toPath();\n     ClientInputFile inputFile = TestUtils.createInputFile(projectWithByteCode.resolve(\"src/Foo.java\"), \"src/Foo.java\", false);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(projectWithByteCode)\n@@ -554,7 +555,7 @@ void simpleJavaWithBytecode() throws Exception {\n         .build(),\n       issues::add, null, null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"java:S106\", 5, \"src/Foo.java\"),\n       tuple(\"java:S1220\", null, \"src/Foo.java\"),\n       tuple(\"java:S1144\", 8, \"src/Foo.java\"),\n@@ -573,7 +574,7 @@ void simpleJavaWithExcludedRules() throws Exception {\n       false);\n \n     final Collection<RuleKey> excludedRules = singleton(new RuleKey(\"java\", \"S106\"));\n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -582,7 +583,7 @@ void simpleJavaWithExcludedRules() throws Exception {\n         .build(),\n       issues::add, null, null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S1220\", null, A_JAVA_FILE_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, A_JAVA_FILE_PATH, \"MINOR\"));\n   }\n@@ -600,7 +601,7 @@ void simpleJavaWithExcludedRulesUsingDeprecatedKey() throws Exception {\n \n     final Collection<RuleKey> excludedRules = singleton(new RuleKey(\"squid\", \"S106\"));\n     List<String> logs = new ArrayList<>();\n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -609,7 +610,7 @@ void simpleJavaWithExcludedRulesUsingDeprecatedKey() throws Exception {\n         .build(),\n       issues::add, (msg, lvl) -> logs.add(msg), null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S1220\", null, A_JAVA_FILE_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 3, A_JAVA_FILE_PATH, \"MINOR\"));\n \n@@ -629,7 +630,7 @@ void simpleJavaWithIncludedRules() throws Exception {\n       false);\n \n     final Collection<RuleKey> includedRules = singleton(new RuleKey(\"java\", \"S3553\"));\n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -638,7 +639,7 @@ void simpleJavaWithIncludedRules() throws Exception {\n         .build(),\n       issues::add, null, null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S3553\", 3, A_JAVA_FILE_PATH, \"MAJOR\"),\n       tuple(\"java:S106\", 5, A_JAVA_FILE_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, A_JAVA_FILE_PATH, \"MINOR\"),\n@@ -659,7 +660,7 @@ void simpleJavaWithIncludedRulesUsingDeprecatedKey() throws Exception {\n \n     final Collection<RuleKey> includedRules = singleton(new RuleKey(\"squid\", \"S3553\"));\n     List<String> logs = new CopyOnWriteArrayList<>();\n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -668,7 +669,7 @@ void simpleJavaWithIncludedRulesUsingDeprecatedKey() throws Exception {\n         .build(),\n       issues::add, (msg, lvl) -> logs.add(msg), null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S3553\", 3, A_JAVA_FILE_PATH, \"MAJOR\"),\n       tuple(\"java:S106\", 5, A_JAVA_FILE_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, A_JAVA_FILE_PATH, \"MINOR\"),\n@@ -686,7 +687,7 @@ void simpleJavaWithIssueOnDir() throws Exception {\n       false);\n \n     final Collection<RuleKey> includedRules = singleton(new RuleKey(\"java\", \"S1228\"));\n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -695,7 +696,7 @@ void simpleJavaWithIssueOnDir() throws Exception {\n         .build(),\n       issues::add, null, null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile() != null ? i.getInputFile().relativePath() : null, Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile() != null ? i.getLocation().getInputFile().relativePath() : null, Issue::getSeverity).containsOnly(\n       tuple(\"java:S2094\", 2, \"foo/Foo.java\", \"MINOR\"),\n       tuple(\"java:S1228\", null, null, \"MINOR\"));\n   }\n@@ -715,7 +716,7 @@ void simpleJavaWithIncludedAndExcludedRules() throws Exception {\n     // exclusion wins\n     final Collection<RuleKey> excludedRules = Collections.singleton(new RuleKey(\"squid\", \"S3553\"));\n     final Collection<RuleKey> includedRules = Collections.singleton(new RuleKey(\"squid\", \"S3553\"));\n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -725,7 +726,7 @@ void simpleJavaWithIncludedAndExcludedRules() throws Exception {\n         .build(),\n       issues::add, null, null);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath(), Issue::getSeverity).containsOnly(\n       tuple(\"java:S106\", 5, A_JAVA_FILE_PATH, \"MAJOR\"),\n       tuple(\"java:S1220\", null, A_JAVA_FILE_PATH, \"MINOR\"),\n       tuple(\"java:S1481\", 4, A_JAVA_FILE_PATH, \"MINOR\"));\n@@ -757,7 +758,7 @@ void testJavaSurefireDontCrashAnalysis() throws Exception {\n         + \"}\",\n       true);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     AnalysisResults results = sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()\n         .setBaseDir(baseDir.toPath())\n@@ -768,7 +769,7 @@ void testJavaSurefireDontCrashAnalysis() throws Exception {\n \n     assertThat(results.indexedFileCount()).isEqualTo(2);\n \n-    assertThat(issues).extracting(Issue::getRuleKey, Issue::getStartLine, i -> i.getInputFile().relativePath()).containsOnly(\n+    assertThat(issues).extracting(Issue::getRuleKey, i -> i.getLocation().getStartLine(), i -> i.getLocation().getInputFile().relativePath()).containsOnly(\n       tuple(\"java:S106\", 4, A_JAVA_FILE_PATH),\n       tuple(\"java:S1220\", null, A_JAVA_FILE_PATH),\n       tuple(\"java:S1481\", 3, A_JAVA_FILE_PATH),\n@@ -832,7 +833,7 @@ void lazy_init_file_metadata() throws Exception {\n     assertThat(unexistingPath).doesNotExist();\n     ClientInputFile inputFile2 = new OnDiskTestClientInputFile(unexistingPath.toPath(), \"missing.bin\", false, StandardCharsets.UTF_8, null);\n \n-    final List<Issue> issues = new ArrayList<>();\n+    final List<Issue<IssueLocation>> issues = new ArrayList<>();\n     final List<String> logs = new CopyOnWriteArrayList<>();\n     AnalysisResults analysisResults = sonarlint.analyze(\n       StandaloneAnalysisConfiguration.builder()"
  },
  {
    "sha": "99a47463c6ce778c08b813747448a1cd122fe2d7",
    "filename": "core/src/test/java/org/sonarsource/sonarlint/core/tracking/IssueTrackerTest.java",
    "status": "modified",
    "additions": 19,
    "deletions": 10,
    "changes": 29,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/tracking/IssueTrackerTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/tracking/IssueTrackerTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/test/java/org/sonarsource/sonarlint/core/tracking/IssueTrackerTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -25,9 +25,12 @@\n import java.util.Collections;\n import org.junit.Before;\n import org.junit.Test;\n+import org.sonarsource.sonarlint.core.client.api.common.IssueRangeAndMessage;\n import org.sonarsource.sonarlint.core.client.api.common.TextRange;\n import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;\n import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue;\n+import org.sonarsource.sonarlint.core.client.api.connected.ServerIssueLocation;\n+import org.sonarsource.sonarlint.core.proto.Sonarlint;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.tuple;\n@@ -154,8 +157,10 @@ private static MockTrackableBuilder builder() {\n \n   private Issue mockIssue() {\n     Issue issue = mock(Issue.class);\n+    IssueRangeAndMessage location = mock(IssueRangeAndMessage.class);\n     when(issue.getRuleKey()).thenReturn(\"dummy ruleKey\");\n-    when(issue.getMessage()).thenReturn(\"dummy message\");\n+    when(issue.getLocation()).thenReturn(location);\n+    when(location.getMessage()).thenReturn(\"dummy message\");\n     return issue;\n   }\n \n@@ -350,10 +355,10 @@ public void should_match_local_issues_by_line_hash() {\n     int newLine = 7;\n \n     Issue issue = mockIssue();\n-    when(issue.getStartLine()).thenReturn(newLine + 3);\n+    when(issue.getLocation().getStartLine()).thenReturn(newLine + 3);\n \n     Issue movedIssue = mockIssue();\n-    when(movedIssue.getStartLine()).thenReturn(newLine);\n+    when(movedIssue.getLocation().getStartLine()).thenReturn(newLine);\n \n     Trackable trackable = new IssueTrackable(issue, mock(TextRange.class), null, lineContent);\n     Trackable movedTrackable = new IssueTrackable(movedIssue, mock(TextRange.class), null, lineContent);\n@@ -388,20 +393,24 @@ public void should_match_server_issues_by_line_hash() {\n \n     Issue issue = mock(Issue.class);\n     when(issue.getRuleKey()).thenReturn(ruleKey);\n-    when(issue.getMessage()).thenReturn(message);\n-    when(issue.getStartLine()).thenReturn(newLine);\n+    IssueRangeAndMessage location = mock(IssueRangeAndMessage.class);\n+    when(issue.getLocation()).thenReturn(location);\n+    when(location.getMessage()).thenReturn(message);\n+    when(location.getStartLine()).thenReturn(newLine);\n     Trackable trackable = new IssueTrackable(issue, mock(TextRange.class), null, lineContent);\n \n     ServerIssue serverIssue = mock(ServerIssue.class);\n-    when(serverIssue.ruleKey()).thenReturn(ruleKey);\n+    ServerIssueLocation serverLocation = mock(ServerIssueLocation.class);\n+    when(serverIssue.getRuleKey()).thenReturn(ruleKey);\n     when(serverIssue.getMessage()).thenReturn(message);\n-    when(serverIssue.lineHash()).thenReturn(DigestUtils.digest(lineContent));\n+    when(serverIssue.getLineHash()).thenReturn(DigestUtils.digest(lineContent));\n     TextRange serverTextRange = mock(TextRange.class);\n     when(serverTextRange.getStartLine()).thenReturn(newLine + 3);\n     when(serverIssue.getTextRange()).thenReturn(serverTextRange);\n-    when(serverIssue.creationDate()).thenReturn(Instant.now());\n-    when(serverIssue.key()).thenReturn(serverIssueKey);\n-    when(serverIssue.resolution()).thenReturn(\"fixed\");\n+    when(serverIssue.getCreationDate()).thenReturn(Instant.now());\n+    when(serverIssue.getKey()).thenReturn(serverIssueKey);\n+    when(serverIssue.getResolution()).thenReturn(\"fixed\");\n+    when(serverIssue.getLocation()).thenReturn(serverLocation);\n     Trackable movedTrackable = new ServerIssueTrackable(serverIssue);\n \n     Trackable nonMatchingTrackable = new IssueTrackable(mockIssue(), mock(TextRange.class), null, lineContent + \"x\");"
  },
  {
    "sha": "1abf60b6ffc1ffcaba1256b8cccd7dac5f29690a",
    "filename": "core/src/test/java/org/sonarsource/sonarlint/core/tracking/ServerIssueTrackableTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/tracking/ServerIssueTrackableTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/core/src/test/java/org/sonarsource/sonarlint/core/tracking/ServerIssueTrackableTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/core/src/test/java/org/sonarsource/sonarlint/core/tracking/ServerIssueTrackableTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -33,8 +33,8 @@\n   private final Trackable trackable = new ServerIssueTrackable(serverIssue);\n \n   public ServerIssueTrackableTest() {\n-    when(serverIssue.lineHash()).thenReturn(\"blah\");\n-    when(serverIssue.resolution()).thenReturn(\"non-empty\");\n+    when(serverIssue.getLineHash()).thenReturn(\"blah\");\n+    when(serverIssue.getResolution()).thenReturn(\"non-empty\");\n     TextRange serverTextRange = mock(TextRange.class);\n     when(serverTextRange.getStartLine()).thenReturn(22);\n     when(serverIssue.getTextRange()).thenReturn(serverTextRange);\n@@ -53,11 +53,11 @@ public void should_not_have_ruleName() {\n   @Test\n   public void should_delegate_fields_to_protobuf_issue() {\n     assertThat(trackable.getMessage()).isEqualTo(serverIssue.getMessage());\n-    assertThat(trackable.getLineHash()).isEqualTo(serverIssue.lineHash().hashCode());\n-    assertThat(trackable.getRuleKey()).isEqualTo(serverIssue.ruleKey());\n-    assertThat(trackable.isResolved()).isEqualTo(!serverIssue.resolution().isEmpty());\n-    assertThat(trackable.getAssignee()).isEqualTo(serverIssue.assigneeLogin());\n-    assertThat(trackable.getSeverity()).isEqualTo(serverIssue.severity());\n+    assertThat(trackable.getLineHash()).isEqualTo(serverIssue.getLineHash().hashCode());\n+    assertThat(trackable.getRuleKey()).isEqualTo(serverIssue.getRuleKey());\n+    assertThat(trackable.isResolved()).isEqualTo(!serverIssue.getResolution().isEmpty());\n+    assertThat(trackable.getAssignee()).isEqualTo(serverIssue.getAssigneeLogin());\n+    assertThat(trackable.getSeverity()).isEqualTo(serverIssue.getSeverity());\n     assertThat(trackable.getTextRange().getStartLine()).isEqualTo(serverIssue.getTextRange().getStartLine());\n   }\n }"
  },
  {
    "sha": "ef530b03cc6e7e40df08bd68dfe69f5db7ccb197",
    "filename": "its/tests/src/test/java/its/ConnectedIssueDownloadTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/its/tests/src/test/java/its/ConnectedIssueDownloadTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/its/tests/src/test/java/its/ConnectedIssueDownloadTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/its/tests/src/test/java/its/ConnectedIssueDownloadTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -150,18 +150,18 @@ public void download_all_issues_not_limited_to_10k() throws IOException {\n     assertThat(file1Issues.size() + file2Issues.size()).isEqualTo(10_500);\n \n     Map<String, ServerIssue> allIssues = new HashMap<>();\n-    engine.getServerIssues(new ProjectBinding(PROJECT_KEY, \"\", \"\"), \"src/500lines.xoo\").forEach(i -> allIssues.put(i.key(), i));\n-    engine.getServerIssues(new ProjectBinding(PROJECT_KEY, \"\", \"\"), \"src/10000lines.xoo\").forEach(i -> allIssues.put(i.key(), i));\n+    engine.getServerIssues(new ProjectBinding(PROJECT_KEY, \"\", \"\"), \"src/500lines.xoo\").forEach(i -> allIssues.put(i.getKey(), i));\n+    engine.getServerIssues(new ProjectBinding(PROJECT_KEY, \"\", \"\"), \"src/10000lines.xoo\").forEach(i -> allIssues.put(i.getKey(), i));\n \n     assertThat(allIssues).hasSize(10_500);\n \n-    assertThat(allIssues.get(wfIssue.getKey()).resolution()).isEqualTo(\"WONTFIX\");\n-    assertThat(allIssues.get(fpIssue.getKey()).resolution()).isEqualTo(\"FALSE-POSITIVE\");\n-    assertThat(allIssues.get(overridenSeverityIssue.getKey()).severity()).isEqualTo(\"BLOCKER\");\n-    assertThat(allIssues.get(overridenTypeIssue.getKey()).type()).isEqualTo(\"BUG\");\n+    assertThat(allIssues.get(wfIssue.getKey()).getResolution()).isEqualTo(\"WONTFIX\");\n+    assertThat(allIssues.get(fpIssue.getKey()).getResolution()).isEqualTo(\"FALSE-POSITIVE\");\n+    assertThat(allIssues.get(overridenSeverityIssue.getKey()).getSeverity()).isEqualTo(\"BLOCKER\");\n+    assertThat(allIssues.get(overridenTypeIssue.getKey()).getType()).isEqualTo(\"BUG\");\n \n     // No hotspots\n-    assertThat(allIssues.values()).allSatisfy(i -> assertThat(i.type()).isIn(\"CODE_SMELL\", \"BUG\", \"VULNERABILITY\"));\n+    assertThat(allIssues.values()).allSatisfy(i -> assertThat(i.getType()).isIn(\"CODE_SMELL\", \"BUG\", \"VULNERABILITY\"));\n   }\n \n   private static void analyzeProject(String projectDirName) {"
  },
  {
    "sha": "60b3ad9ac4c2401bc4cdc71b09550863b24cb455",
    "filename": "its/tests/src/test/java/its/TaintVulnerabilitiesDownloadTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/SonarSource/sonarlint-core/blob/45e561ce9874ec97c99bd1d01e0754840d904a90/its/tests/src/test/java/its/TaintVulnerabilitiesDownloadTest.java",
    "raw_url": "https://github.com/SonarSource/sonarlint-core/raw/45e561ce9874ec97c99bd1d01e0754840d904a90/its/tests/src/test/java/its/TaintVulnerabilitiesDownloadTest.java",
    "contents_url": "https://api.github.com/repos/SonarSource/sonarlint-core/contents/its/tests/src/test/java/its/TaintVulnerabilitiesDownloadTest.java?ref=45e561ce9874ec97c99bd1d01e0754840d904a90",
    "patch": "@@ -63,11 +63,12 @@\n import org.sonarqube.ws.client.issues.SearchRequest;\n import org.sonarqube.ws.client.users.CreateRequest;\n import org.sonarsource.sonarlint.core.ConnectedSonarLintEngineImpl;\n+import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;\n import org.sonarsource.sonarlint.core.client.api.connected.ConnectedGlobalConfiguration;\n import org.sonarsource.sonarlint.core.client.api.connected.ConnectedSonarLintEngine;\n import org.sonarsource.sonarlint.core.client.api.connected.ProjectBinding;\n import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue;\n-import org.sonarsource.sonarlint.core.client.api.connected.ServerIssue.Flow;\n+import org.sonarsource.sonarlint.core.client.api.connected.ServerIssueLocation;\n \n import static its.tools.ItUtils.SONAR_VERSION;\n import static java.util.Arrays.asList;\n@@ -150,10 +151,10 @@ public void download_all_issues_include_taint_vulnerabilities_and_code_snippets(\n     ServerIssue taintIssue = sinkIssues.get(0);\n     assertThat(taintIssue.getCodeSnippet()).isEqualTo(\"statement.executeQuery(query)\");\n     assertThat(taintIssue.getFlows()).isNotEmpty();\n-    Flow flow = taintIssue.getFlows().get(0);\n-    assertThat(flow.locations()).isNotEmpty();\n-    assertThat(flow.locations().get(0).getCodeSnippet()).isEqualTo(\"statement.executeQuery(query)\");\n-    assertThat(flow.locations().get(flow.locations().size() - 1).getCodeSnippet()).isEqualTo(\"request.getParameter(\\\"user\\\")\");\n+    Issue.Flow<ServerIssueLocation> flow = taintIssue.getFlows().get(0);\n+    assertThat(flow.getLocations()).isNotEmpty();\n+    assertThat(flow.getLocations().get(0).getCodeSnippet()).isEqualTo(\"statement.executeQuery(query)\");\n+    assertThat(flow.getLocations().get(flow.getLocations().size() - 1).getCodeSnippet()).isEqualTo(\"request.getParameter(\\\"user\\\")\");\n   }\n \n   private void analyzeMavenProject(String projectDirName) {"
  }
]
