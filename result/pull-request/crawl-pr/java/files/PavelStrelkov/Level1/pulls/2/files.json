[
  {
    "sha": "14295c3f582754ab8a7f0d4e098cab328443f8f3",
    "filename": "src/main/java/lesson1/Lesson1.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/PavelStrelkov/Level1/blob/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/src/main/java/lesson1/Lesson1.java",
    "raw_url": "https://github.com/PavelStrelkov/Level1/raw/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/src/main/java/lesson1/Lesson1.java",
    "contents_url": "https://api.github.com/repos/PavelStrelkov/Level1/contents/src/main/java/lesson1/Lesson1.java?ref=d6d1239766b32d64eace4a7b6a169e3ebc67e5ff",
    "patch": "@@ -0,0 +1,7 @@\n+package lesson1;\n+\n+public class Lesson1 {\n+    public static void main(String[] args) {\n+        System.out.println(\"lesson1\");\n+    }\n+}"
  },
  {
    "sha": "6c1bc75dd2a50bc6d8825dc0155935005d12af5d",
    "filename": "src/main/java/lesson2/Lesson2.java",
    "status": "added",
    "additions": 176,
    "deletions": 0,
    "changes": 176,
    "blob_url": "https://github.com/PavelStrelkov/Level1/blob/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/src/main/java/lesson2/Lesson2.java",
    "raw_url": "https://github.com/PavelStrelkov/Level1/raw/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/src/main/java/lesson2/Lesson2.java",
    "contents_url": "https://api.github.com/repos/PavelStrelkov/Level1/contents/src/main/java/lesson2/Lesson2.java?ref=d6d1239766b32d64eace4a7b6a169e3ebc67e5ff",
    "patch": "@@ -0,0 +1,176 @@\n+package lesson2;\n+\n+import java.util.Arrays;\n+\n+public class Lesson2 {\n+\n+    public static void main(String[] args) {\n+        invertArray();\n+        fillArray();\n+        changeArray();\n+        fillDiagonal();\n+        minMax();\n+        checkBalance();\n+        shiftArray();\n+    }\n+//  Example 1\n+\n+    public static void invertArray() {\n+        int[] arr = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};\n+        System.out.println(\"\\n\"); // insert empty line\n+        System.out.println(Arrays.toString(arr));\n+        for (int i = 0; i < arr.length; i++) {\n+            if (arr[i] == 0) {\n+                arr[i] = 1;\n+            } else {\n+                arr[i] = 0;\n+            }\n+            System.out.print(arr[i] + \" \");\n+        }\n+        System.out.println(\"\\n\");\n+    }\n+\n+//  Example 2\n+\n+    public static void fillArray() {\n+        int[] arr = new int[8];\n+        int g = 0;\n+        for (int i = 0; i < 8; i++, g += 3) {\n+            arr[i] = g;\n+\n+            System.out.print(arr[i] + \" \");\n+        }\n+        System.out.println(\"\\n\");\n+    }\n+\n+//  Example 3\n+\n+    public static void changeArray() {\n+        int[] arr3 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};\n+        System.out.println(Arrays.toString(arr3));\n+        System.out.print(\"[\");\n+        for (int i = 0; i < arr3.length; i++) {\n+\n+            if (arr3[i] < 6) {\n+                arr3[i] = arr3[i] * 2;\n+            }\n+            {\n+                System.out.print(arr3[i] + \",\" + \" \");\n+\n+            }\n+\n+        }\n+\n+        System.out.print(\"]\");\n+        System.out.println(\"\\n\");\n+    }\n+\n+\n+//  Example 4. Создать квадратный двумерный целочисленный массив\n+// (количество строк и столбцов одинаковое) и\n+// с помощью цикла(-ов) заполнить его диагональные элементы единицами;\n+\n+    public static void fillDiagonal() {\n+\n+        int[][] table = new int[4][4];\n+        for (int i = 0; i < 4; i++) {\n+            for (int j = 0, j2 = table[j].length; j < 4; j++, j2--) {\n+//                int j2 = table[i].length;\n+                if (i == j || i == (j2 - 1)) table[i][j] = 1;\n+\n+                System.out.print(table[i][j] + \" \");\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+//  Example 5. ** Задать одномерный массив и найти в нем\n+//  минимальный и максимальный элементы (без помощи интернета);\n+\n+    public static void minMax() {\n+        System.out.println(); // insert empty line\n+        int[] arr = new int [6];\n+        arr[0] = 1;\n+        arr[1] = 8;\n+        arr[2] = 7;\n+        arr[3] = 3;\n+        arr[4] = 2;\n+        arr[5] = 9;\n+\n+        System.out.println(Arrays.toString(arr));\n+        int max = 0;\n+        int min = 0;\n+        for (int i = 1; i < arr.length; i++) {\n+            if (arr[i] > arr[max]) {\n+                max = i;\n+            } else if (arr[i] < arr[min]) {\n+                min = i;\n+            }\n+        }\n+        System.out.println(\"Максимальный элемент \" + arr[max] + \" \" + \"\\n\" + \"Минимальный элемент \" + arr[min]);\n+    }\n+//  Example 6. ** Написать метод, в который передается не пустой одномерный целочисленный массив,\n+//  метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.\n+//  Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,\n+//  граница показана символами ||, эти символы в массив не входят.\n+\n+    public static boolean checkBalance() {\n+        System.out.println(\"\\n\"); // insert empty line\n+\n+        int [] arr = {1, 1, 1, 2, 1};\n+        int left = 0, right = 0;\n+        for (int i = 0, j = arr.length - 1; i <= j;) { //thank you very much for the idea\n+            if (left < right) {\n+                left += arr[i];\n+                i++;\n+            } else {\n+                right += arr[j];\n+                j--;\n+            }\n+        }\n+        return left == right;\n+    }\n+\n+\n+//7. **** Написать метод, которому на вход подается одномерный массив и число n\n+// (может быть положительным, или отрицательным), при этом метод должен сместить\n+// все элементы массива на n позиций. Элементы смещаются циклично.\n+// Для усложнения задачи нельзя пользоваться вспомогательными массивами.\n+\n+    public static void shiftArray() {\n+        int [] arr = {1, 2 , 3, 4, 5};\n+        int shift = 1;\n+        if (shift > 0) {\n+            for (int i = 0; i < shift; i++) {\n+                shiftRight1(arr);\n+            }\n+        } else {\n+            for (int i = 0; i < -shift; i++) {\n+                shiftLeft1(arr);\n+            }\n+        }\n+    }\n+\n+    public static void shiftRight1(int[] arr) {\n+        int last = arr[arr.length -1];\n+        for(int i = arr.length - 1; i > 0; i--) {\n+            arr[i] = arr[i - 1];\n+            System.out.println(Arrays.toString(arr));\n+\n+        }\n+        arr[0] = last;\n+        System.out.println(Arrays.toString(arr));\n+    }\n+\n+    public static void shiftLeft1(int[] arr) {\n+        int first = arr[0];\n+        for(int i = 1; i < arr.length; i++) {\n+            arr[i - 1] = arr[i];\n+            System.out.println(Arrays.toString(arr));\n+\n+        }\n+        arr[arr.length -1] = first;\n+        System.out.println(Arrays.toString(arr));\n+    }\n+\n+}"
  },
  {
    "sha": "8a4e63ac0fb16cd53c49cc0da869c21eb3757259",
    "filename": "src/main/java/lesson4/MainClass.java",
    "status": "added",
    "additions": 136,
    "deletions": 0,
    "changes": 136,
    "blob_url": "https://github.com/PavelStrelkov/Level1/blob/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/src/main/java/lesson4/MainClass.java",
    "raw_url": "https://github.com/PavelStrelkov/Level1/raw/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/src/main/java/lesson4/MainClass.java",
    "contents_url": "https://api.github.com/repos/PavelStrelkov/Level1/contents/src/main/java/lesson4/MainClass.java?ref=d6d1239766b32d64eace4a7b6a169e3ebc67e5ff",
    "patch": "@@ -0,0 +1,136 @@\n+package lesson4;\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class MainClass {\n+    public static int SIZE = 3;\n+    public static final char DOT_EMPTY = '·';\n+    public static final char DOT_X = 'X';\n+    public static final char DOT_O = 'O';\n+    public static char [][] map;\n+    public static Scanner sc = new Scanner(System.in);\n+    public static Random rand = new Random();\n+\n+    public static void main(String[] args) {\n+        initMap();\n+        printMap();\n+        while (true) {\n+            humanTurn();\n+            printMap();\n+            if (checkDiagonal(DOT_X) || checkLanes(DOT_X)) {\n+                System.out.println(\"Победил человек\");\n+                break;\n+            }\n+            if (isMapFull()) {\n+                System.out.println(\"Ничья\");\n+                break;\n+            }\n+            aiTurn();\n+            printMap();\n+            if (checkDiagonal(DOT_O) || checkLanes(DOT_O)) {\n+                System.out.println(\"Победил Исуственный Интеллект\");\n+                break;\n+            }\n+            if (isMapFull()) {\n+                System.out.println(\"Ничья\");\n+                break;\n+            }\n+        }\n+        System.out.println(\"Игра закончена\");\n+    }\n+    public static boolean checkDiagonal(char symb) {\n+        boolean toright, toleft;\n+        toright = true;\n+        toleft = true;\n+        for (int i=0; i<SIZE; i++) {\n+            toright &= (map[i][i] == symb);\n+            toleft &= (map[SIZE-i-1][i] == symb);\n+        }\n+\n+        if (toright || toleft) return true;\n+\n+        return false;\n+    }\n+    public static boolean checkLanes(char symb) {\n+        boolean cols, rows;\n+        for (int col=0; col<SIZE; col++) {\n+            cols = true;\n+            rows = true;\n+            for (int row=0; row<SIZE; row++) {\n+                cols &= (map[col][row] == symb);\n+                rows &= (map[row][col] == symb);\n+            }\n+\n+            // Это условие после каждой проверки колонки и столбца\n+            // позволяет остановить дальнейшее выполнение, без проверки\n+            // всех остальных столбцов и строк.\n+            if (cols || rows) return true;\n+        }\n+\n+        return false;\n+    }\n+//    public static boolean chekWin(char symb) {\n+//        if(map[0][0] == symb && map [0][1] == symb && map [0][2] == symb) return true;\n+//        if(map[1][0] == symb && map [1][1] == symb && map [1][2] == symb) return true;\n+//        if(map[2][0] == symb && map [2][1] == symb && map [2][2] == symb) return true;\n+//        if(map[0][0] == symb && map [1][0] == symb && map [2][0] == symb) return true;\n+//        if(map[0][1] == symb && map [1][1] == symb && map [2][1] == symb) return true;\n+//        if(map[0][2] == symb && map [1][2] == symb && map [2][2] == symb) return true;\n+//        if(map[0][0] == symb && map [1][1] == symb && map [2][2] == symb) return true;\n+//        if(map[2][0] == symb && map [1][1] == symb && map [0][2] == symb) return true;\n+//        return false;\n+//    }\n+    public static boolean isMapFull() {\n+        for (int i = 0; i < SIZE; i++) {\n+            for (int j = 0; j < SIZE; j++) {\n+                if (map[i][j] == DOT_EMPTY) return false;\n+            }\n+        }\n+        return true;\n+    }\n+    public static void aiTurn() {\n+        int x, y;\n+        do {\n+            x = rand.nextInt(SIZE);\n+            y = rand.nextInt(SIZE);\n+        } while (!isCellValid(x, y));\n+        System.out.println(\"Компьютер походил в точку \" + (x + 1) + \" \" + (y + 1));\n+        map [y][x] = DOT_O;\n+    }\n+    public static void humanTurn() {\n+        int x, y;\n+        do {\n+            System.out.println(\"Введите координаты в формате X Y\");\n+            x = sc.nextInt() - 1;\n+            y = sc.nextInt() - 1;\n+        } while (!isCellValid(x, y));\n+        map [y][x] = DOT_X;\n+    }\n+    public static boolean isCellValid (int x, int y) {\n+        if (x < 0 || x >= SIZE || y < 0 || y>= SIZE) return  false;\n+        if (map[x][y] == DOT_EMPTY) return true;\n+        return  false;\n+    }\n+    public static void initMap() {\n+        map = new  char[SIZE][SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            for (int j = 0; j < SIZE; j++) {\n+                map[i][j] = DOT_EMPTY;\n+            }\n+        }\n+    }\n+    public static void printMap() {\n+        for (int i = 0; i <= SIZE; i++) {\n+            System.out.print(i + \" \");\n+        }\n+        System.out.println();\n+        for (int i = 0; i < SIZE; i++) {\n+            System.out.print((i + 1 + \" \"));\n+            for (int j = 0; j < SIZE; j++) {\n+                System.out.print(map[i][j] + \" \");\n+            }\n+            System.out.println();\n+        }\n+        System.out.println();\n+    }\n+}"
  },
  {
    "sha": "31b5dc74fe38dfa3e5f1bece7c270d018ac9feaa",
    "filename": "target/classes/Level1.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/PavelStrelkov/Level1/blob/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/target/classes/Level1.class",
    "raw_url": "https://github.com/PavelStrelkov/Level1/raw/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/target/classes/Level1.class",
    "contents_url": "https://api.github.com/repos/PavelStrelkov/Level1/contents/target/classes/Level1.class?ref=d6d1239766b32d64eace4a7b6a169e3ebc67e5ff"
  },
  {
    "sha": "cc116aa0108f33ae74a7e5cbc723f46ab21713e8",
    "filename": "target/classes/lesson1/Lesson1.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/PavelStrelkov/Level1/blob/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/target/classes/lesson1/Lesson1.class",
    "raw_url": "https://github.com/PavelStrelkov/Level1/raw/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/target/classes/lesson1/Lesson1.class",
    "contents_url": "https://api.github.com/repos/PavelStrelkov/Level1/contents/target/classes/lesson1/Lesson1.class?ref=d6d1239766b32d64eace4a7b6a169e3ebc67e5ff"
  },
  {
    "sha": "5ed0514aa21ae6bb032144c932f8621260fbac3a",
    "filename": "target/classes/lesson2/Lesson2.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/PavelStrelkov/Level1/blob/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/target/classes/lesson2/Lesson2.class",
    "raw_url": "https://github.com/PavelStrelkov/Level1/raw/d6d1239766b32d64eace4a7b6a169e3ebc67e5ff/target/classes/lesson2/Lesson2.class",
    "contents_url": "https://api.github.com/repos/PavelStrelkov/Level1/contents/target/classes/lesson2/Lesson2.class?ref=d6d1239766b32d64eace4a7b6a169e3ebc67e5ff"
  }
]
