[
  {
    "sha": "e130ee6e61f4242a170dd02281c66ab0bc68eff6",
    "filename": "docs/UserGuide.md",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/docs/UserGuide.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/docs/UserGuide.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/docs/UserGuide.md?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -153,7 +153,6 @@ _Details coming soon ..._\n **Q** : Will I be able to add other types of appointments besides vaccination appointments?\n <br>\n **A** : No, the current version only allows you to add vaccination appointments and not any other type of appointments. \n-\n --------------------------------------------------------------------------------------------------------------------\n \n ## Command Summary"
  },
  {
    "sha": "a6cff3044b68ec959c52b3c7ce30995fcd853f99",
    "filename": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/commands/AddCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/commands/AddCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/logic/commands/AddCommand.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -1,7 +1,6 @@\n package seedu.address.logic.commands;\n \n import static java.util.Objects.requireNonNull;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n@@ -23,13 +22,11 @@\n             + PREFIX_NAME + \"NAME \"\n             + PREFIX_PHONE + \"PHONE \"\n             + PREFIX_EMAIL + \"EMAIL \"\n-            + PREFIX_ADDRESS + \"ADDRESS \"\n             + \"[\" + PREFIX_TAG + \"TAG]...\\n\"\n             + \"Example: \" + COMMAND_WORD + \" \"\n             + PREFIX_NAME + \"John Doe \"\n             + PREFIX_PHONE + \"98765432 \"\n             + PREFIX_EMAIL + \"johnd@example.com \"\n-            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"\n             + PREFIX_TAG + \"friends \"\n             + PREFIX_TAG + \"owesMoney\";\n "
  },
  {
    "sha": "71e7d5e98bc1c40a4b7a15f90a48da44209c85a6",
    "filename": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "status": "modified",
    "additions": 2,
    "deletions": 17,
    "changes": 19,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/logic/commands/EditCommand.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -1,7 +1,6 @@\n package seedu.address.logic.commands;\n \n import static java.util.Objects.requireNonNull;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n@@ -19,7 +18,6 @@\n import seedu.address.commons.util.CollectionUtil;\n import seedu.address.logic.commands.exceptions.CommandException;\n import seedu.address.model.Model;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n@@ -40,7 +38,6 @@\n             + \"[\" + PREFIX_NAME + \"NAME] \"\n             + \"[\" + PREFIX_PHONE + \"PHONE] \"\n             + \"[\" + PREFIX_EMAIL + \"EMAIL] \"\n-            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"\n             + \"[\" + PREFIX_TAG + \"TAG]...\\n\"\n             + \"Example: \" + COMMAND_WORD + \" 1 \"\n             + PREFIX_PHONE + \"91234567 \"\n@@ -96,10 +93,9 @@ private static Person createEditedPerson(Person personToEdit, EditPersonDescript\n         Name updatedName = editPersonDescriptor.getName().orElse(personToEdit.getName());\n         Phone updatedPhone = editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());\n         Email updatedEmail = editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());\n-        Address updatedAddress = editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());\n         Set<Tag> updatedTags = editPersonDescriptor.getTags().orElse(personToEdit.getTags());\n \n-        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);\n+        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags);\n     }\n \n     @Override\n@@ -128,7 +124,6 @@ public boolean equals(Object other) {\n         private Name name;\n         private Phone phone;\n         private Email email;\n-        private Address address;\n         private Set<Tag> tags;\n \n         public EditPersonDescriptor() {}\n@@ -141,15 +136,14 @@ public EditPersonDescriptor(EditPersonDescriptor toCopy) {\n             setName(toCopy.name);\n             setPhone(toCopy.phone);\n             setEmail(toCopy.email);\n-            setAddress(toCopy.address);\n             setTags(toCopy.tags);\n         }\n \n         /**\n          * Returns true if at least one field is edited.\n          */\n         public boolean isAnyFieldEdited() {\n-            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);\n+            return CollectionUtil.isAnyNonNull(name, phone, email, tags);\n         }\n \n         public void setName(Name name) {\n@@ -176,14 +170,6 @@ public void setEmail(Email email) {\n             return Optional.ofNullable(email);\n         }\n \n-        public void setAddress(Address address) {\n-            this.address = address;\n-        }\n-\n-        public Optional<Address> getAddress() {\n-            return Optional.ofNullable(address);\n-        }\n-\n         /**\n          * Sets {@code tags} to this object's {@code tags}.\n          * A defensive copy of {@code tags} is used internally.\n@@ -219,7 +205,6 @@ public boolean equals(Object other) {\n             return getName().equals(e.getName())\n                     && getPhone().equals(e.getPhone())\n                     && getEmail().equals(e.getEmail())\n-                    && getAddress().equals(e.getAddress())\n                     && getTags().equals(e.getTags());\n         }\n     }"
  },
  {
    "sha": "c39a41a3935aed91f4d9bf177d4d38a55e319a38",
    "filename": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "status": "modified",
    "additions": 3,
    "deletions": 6,
    "changes": 9,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/logic/parser/AddCommandParser.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -1,7 +1,6 @@\n package seedu.address.logic.parser;\n \n import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n@@ -12,7 +11,6 @@\n \n import seedu.address.logic.commands.AddCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n@@ -31,20 +29,19 @@\n      */\n     public AddCommand parse(String args) throws ParseException {\n         ArgumentMultimap argMultimap =\n-                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\n+                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);\n \n-        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)\n+        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)\n                 || !argMultimap.getPreamble().isEmpty()) {\n             throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));\n         }\n \n         Name name = ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());\n         Phone phone = ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());\n         Email email = ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());\n-        Address address = ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());\n         Set<Tag> tagList = ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));\n \n-        Person person = new Person(name, phone, email, address, tagList);\n+        Person person = new Person(name, phone, email, tagList);\n \n         return new AddCommand(person);\n     }"
  },
  {
    "sha": "9dd7deff4da5f04ee7faff614512c3016c5ed403",
    "filename": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/logic/parser/CliSyntax.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -9,7 +9,6 @@\n     public static final Prefix PREFIX_NAME = new Prefix(\"n/\");\n     public static final Prefix PREFIX_PHONE = new Prefix(\"p/\");\n     public static final Prefix PREFIX_EMAIL = new Prefix(\"e/\");\n-    public static final Prefix PREFIX_ADDRESS = new Prefix(\"a/\");\n     public static final Prefix PREFIX_TAG = new Prefix(\"t/\");\n \n }"
  },
  {
    "sha": "b379395bb54bc4ab10dd49af24011b80d4d5c9b5",
    "filename": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/logic/parser/EditCommandParser.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -2,7 +2,6 @@\n \n import static java.util.Objects.requireNonNull;\n import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n@@ -32,7 +31,7 @@\n     public EditCommand parse(String args) throws ParseException {\n         requireNonNull(args);\n         ArgumentMultimap argMultimap =\n-                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\n+                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);\n \n         Index index;\n \n@@ -52,9 +51,7 @@ public EditCommand parse(String args) throws ParseException {\n         if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {\n             editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));\n         }\n-        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {\n-            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));\n-        }\n+\n         parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);\n \n         if (!editPersonDescriptor.isAnyFieldEdited()) {"
  },
  {
    "sha": "9ab53095f447b3fdee04284c7543b571dbd4822d",
    "filename": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "status": "modified",
    "additions": 0,
    "deletions": 16,
    "changes": 16,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/logic/parser/ParserUtil.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -9,7 +9,6 @@\n import seedu.address.commons.core.index.Index;\n import seedu.address.commons.util.StringUtil;\n import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Phone;\n@@ -65,21 +64,6 @@ public static Phone parsePhone(String phone) throws ParseException {\n         return new Phone(trimmedPhone);\n     }\n \n-    /**\n-     * Parses a {@code String address} into an {@code Address}.\n-     * Leading and trailing whitespaces will be trimmed.\n-     *\n-     * @throws ParseException if the given {@code address} is invalid.\n-     */\n-    public static Address parseAddress(String address) throws ParseException {\n-        requireNonNull(address);\n-        String trimmedAddress = address.trim();\n-        if (!Address.isValidAddress(trimmedAddress)) {\n-            throw new ParseException(Address.MESSAGE_CONSTRAINTS);\n-        }\n-        return new Address(trimmedAddress);\n-    }\n-\n     /**\n      * Parses a {@code String email} into an {@code Email}.\n      * Leading and trailing whitespaces will be trimmed."
  },
  {
    "sha": "60472ca22a0982a5def9545a9cc4d79745058850",
    "filename": "src/main/java/seedu/address/model/person/Address.java",
    "status": "removed",
    "additions": 0,
    "deletions": 57,
    "changes": 57,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/440ab81df664489ac06afc784f7daca4087892e6/src/main/java/seedu/address/model/person/Address.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/440ab81df664489ac06afc784f7daca4087892e6/src/main/java/seedu/address/model/person/Address.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/model/person/Address.java?ref=440ab81df664489ac06afc784f7daca4087892e6",
    "patch": "@@ -1,57 +0,0 @@\n-package seedu.address.model.person;\n-\n-import static java.util.Objects.requireNonNull;\n-import static seedu.address.commons.util.AppUtil.checkArgument;\n-\n-/**\n- * Represents a Person's address in the address book.\n- * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}\n- */\n-public class Address {\n-\n-    public static final String MESSAGE_CONSTRAINTS = \"Addresses can take any values, and it should not be blank\";\n-\n-    /*\n-     * The first character of the address must not be a whitespace,\n-     * otherwise \" \" (a blank string) becomes a valid input.\n-     */\n-    public static final String VALIDATION_REGEX = \"[^\\\\s].*\";\n-\n-    public final String value;\n-\n-    /**\n-     * Constructs an {@code Address}.\n-     *\n-     * @param address A valid address.\n-     */\n-    public Address(String address) {\n-        requireNonNull(address);\n-        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);\n-        value = address;\n-    }\n-\n-    /**\n-     * Returns true if a given string is a valid email.\n-     */\n-    public static boolean isValidAddress(String test) {\n-        return test.matches(VALIDATION_REGEX);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return value;\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other == this // short circuit if same object\n-                || (other instanceof Address // instanceof handles nulls\n-                && value.equals(((Address) other).value)); // state check\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return value.hashCode();\n-    }\n-\n-}"
  },
  {
    "sha": "7b574fbf575c9d03ac5c0ec4fc7fb8d802c7c436",
    "filename": "src/main/java/seedu/address/model/person/Person.java",
    "status": "modified",
    "additions": 5,
    "deletions": 12,
    "changes": 17,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/model/person/Person.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/model/person/Person.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/model/person/Person.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -21,18 +21,16 @@\n     private final Email email;\n \n     // Data fields\n-    private final Address address;\n     private final Set<Tag> tags = new HashSet<>();\n \n     /**\n      * Every field must be present and not null.\n      */\n-    public Person(Name name, Phone phone, Email email, Address address, Set<Tag> tags) {\n-        requireAllNonNull(name, phone, email, address, tags);\n+    public Person(Name name, Phone phone, Email email, Set<Tag> tags) {\n+        requireAllNonNull(name, phone, email, tags);\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n-        this.address = address;\n         this.tags.addAll(tags);\n     }\n \n@@ -48,9 +46,7 @@ public Email getEmail() {\n         return email;\n     }\n \n-    public Address getAddress() {\n-        return address;\n-    }\n+\n \n     /**\n      * Returns an immutable tag set, which throws {@code UnsupportedOperationException}\n@@ -91,14 +87,13 @@ public boolean equals(Object other) {\n         return otherPerson.getName().equals(getName())\n                 && otherPerson.getPhone().equals(getPhone())\n                 && otherPerson.getEmail().equals(getEmail())\n-                && otherPerson.getAddress().equals(getAddress())\n                 && otherPerson.getTags().equals(getTags());\n     }\n \n     @Override\n     public int hashCode() {\n         // use this method for custom fields hashing instead of implementing your own\n-        return Objects.hash(name, phone, email, address, tags);\n+        return Objects.hash(name, phone, email, tags);\n     }\n \n     @Override\n@@ -108,9 +103,7 @@ public String toString() {\n                 .append(\"; Phone: \")\n                 .append(getPhone())\n                 .append(\"; Email: \")\n-                .append(getEmail())\n-                .append(\"; Address: \")\n-                .append(getAddress());\n+                .append(getEmail());\n \n         Set<Tag> tags = getTags();\n         if (!tags.isEmpty()) {"
  },
  {
    "sha": "c8ca69d0cbc6cebd58eeaedb50e9348e2019f0e6",
    "filename": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "status": "modified",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/model/util/SampleDataUtil.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -6,7 +6,6 @@\n \n import seedu.address.model.AddressBook;\n import seedu.address.model.ReadOnlyAddressBook;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n@@ -20,22 +19,16 @@\n     public static Person[] getSamplePersons() {\n         return new Person[] {\n             new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),\n-                new Address(\"Blk 30 Geylang Street 29, #06-40\"),\n                 getTagSet(\"friends\")),\n             new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),\n-                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),\n                 getTagSet(\"colleagues\", \"friends\")),\n             new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),\n-                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),\n                 getTagSet(\"neighbours\")),\n             new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),\n-                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),\n                 getTagSet(\"family\")),\n             new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),\n-                new Address(\"Blk 47 Tampines Street 20, #17-35\"),\n                 getTagSet(\"classmates\")),\n             new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),\n-                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),\n                 getTagSet(\"colleagues\"))\n         };\n     }"
  },
  {
    "sha": "52af76e9ca7e76de6d183ec11bcd133d415401ac",
    "filename": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "status": "modified",
    "additions": 2,
    "deletions": 14,
    "changes": 16,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/storage/JsonAdaptedPerson.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -10,7 +10,6 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import seedu.address.commons.exceptions.IllegalValueException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n@@ -27,20 +26,18 @@\n     private final String name;\n     private final String phone;\n     private final String email;\n-    private final String address;\n     private final List<JsonAdaptedTag> tagged = new ArrayList<>();\n \n     /**\n      * Constructs a {@code JsonAdaptedPerson} with the given person details.\n      */\n     @JsonCreator\n     public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,\n-            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,\n+            @JsonProperty(\"email\") String email,\n             @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n-        this.address = address;\n         if (tagged != null) {\n             this.tagged.addAll(tagged);\n         }\n@@ -53,7 +50,6 @@ public JsonAdaptedPerson(Person source) {\n         name = source.getName().fullName;\n         phone = source.getPhone().value;\n         email = source.getEmail().value;\n-        address = source.getAddress().value;\n         tagged.addAll(source.getTags().stream()\n                 .map(JsonAdaptedTag::new)\n                 .collect(Collectors.toList()));\n@@ -94,16 +90,8 @@ public Person toModelType() throws IllegalValueException {\n         }\n         final Email modelEmail = new Email(email);\n \n-        if (address == null) {\n-            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));\n-        }\n-        if (!Address.isValidAddress(address)) {\n-            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);\n-        }\n-        final Address modelAddress = new Address(address);\n-\n         final Set<Tag> modelTags = new HashSet<>(personTags);\n-        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);\n+        return new Person(modelName, modelPhone, modelEmail, modelTags);\n     }\n \n }"
  },
  {
    "sha": "47ebbae6bcccd2ab88001a93ca77c98742996327",
    "filename": "src/main/java/seedu/address/ui/PersonCard.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/ui/PersonCard.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/java/seedu/address/ui/PersonCard.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/java/seedu/address/ui/PersonCard.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -50,7 +50,6 @@ public PersonCard(Person person, int displayedIndex) {\n         id.setText(displayedIndex + \". \");\n         name.setText(person.getName().fullName);\n         phone.setText(person.getPhone().value);\n-        address.setText(person.getAddress().value);\n         email.setText(person.getEmail().value);\n         person.getTags().stream()\n                 .sorted(Comparator.comparing(tag -> tag.tagName))"
  },
  {
    "sha": "2a8da41fae886d5558c7562c0b3b59da818f8302",
    "filename": "src/main/resources/view/PersonListCard.fxml",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/main/resources/view/PersonListCard.fxml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/main/resources/view/PersonListCard.fxml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/main/resources/view/PersonListCard.fxml?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -29,7 +29,6 @@\n       </HBox>\n       <FlowPane fx:id=\"tags\" />\n       <Label fx:id=\"phone\" styleClass=\"cell_small_label\" text=\"\\$phone\" />\n-      <Label fx:id=\"address\" styleClass=\"cell_small_label\" text=\"\\$address\" />\n       <Label fx:id=\"email\" styleClass=\"cell_small_label\" text=\"\\$email\" />\n     </VBox>\n   </GridPane>"
  },
  {
    "sha": "e342fecdc02309afa1df50b7a8e0257f69dbdc68",
    "filename": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -2,12 +2,10 @@\n   \"persons\": [ {\n     \"name\": \"Valid Person\",\n     \"phone\": \"9482424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n+    \"email\": \"hans@example.com\"\n   }, {\n     \"name\": \"Person With Invalid Phone Field\",\n     \"phone\": \"948asdf2424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n+    \"email\": \"hans@example.com\"\n   } ]\n }"
  },
  {
    "sha": "b6156e4bc23369e9b99fcecd100b560372968669",
    "filename": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -2,7 +2,6 @@\n   \"persons\": [ {\n     \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",\n     \"phone\": \"9482424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n+    \"email\": \"hans@example.com\"\n   } ]\n }"
  },
  {
    "sha": "9ea44d3244cad7d4d543648bf9105c37fb31e6cf",
    "filename": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -3,12 +3,10 @@\n     \"name\": \"Alice Pauline\",\n     \"phone\": \"94351253\",\n     \"email\": \"alice@example.com\",\n-    \"address\": \"123, Jurong West Ave 6, #08-111\",\n     \"tagged\": [ \"friends\" ]\n   }, {\n     \"name\": \"Alice Pauline\",\n     \"phone\": \"94351253\",\n-    \"email\": \"pauline@example.com\",\n-    \"address\": \"4th street\"\n+    \"email\": \"pauline@example.com\"\n   } ]\n }"
  },
  {
    "sha": "671f3da654cef765d365d5b9bcf6e1fdef02633c",
    "filename": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -2,7 +2,6 @@\n   \"persons\": [ {\n     \"name\": \"Hans Muster\",\n     \"phone\": \"9482424\",\n-    \"email\": \"invalid@email!3e\",\n-    \"address\": \"4th street\"\n+    \"email\": \"invalid@email!3e\"\n   } ]\n }"
  },
  {
    "sha": "51a5ce525a30741b642f4f75394fe35cc81ad108",
    "filename": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "status": "modified",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -4,43 +4,36 @@\n     \"name\" : \"Alice Pauline\",\n     \"phone\" : \"94351253\",\n     \"email\" : \"alice@example.com\",\n-    \"address\" : \"123, Jurong West Ave 6, #08-111\",\n     \"tagged\" : [ \"friends\" ]\n   }, {\n     \"name\" : \"Benson Meier\",\n     \"phone\" : \"98765432\",\n     \"email\" : \"johnd@example.com\",\n-    \"address\" : \"311, Clementi Ave 2, #02-25\",\n     \"tagged\" : [ \"owesMoney\", \"friends\" ]\n   }, {\n     \"name\" : \"Carl Kurz\",\n     \"phone\" : \"95352563\",\n     \"email\" : \"heinz@example.com\",\n-    \"address\" : \"wall street\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"Daniel Meier\",\n     \"phone\" : \"87652533\",\n     \"email\" : \"cornelia@example.com\",\n-    \"address\" : \"10th street\",\n     \"tagged\" : [ \"friends\" ]\n   }, {\n     \"name\" : \"Elle Meyer\",\n     \"phone\" : \"9482224\",\n     \"email\" : \"werner@example.com\",\n-    \"address\" : \"michegan ave\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"Fiona Kunz\",\n     \"phone\" : \"9482427\",\n     \"email\" : \"lydia@example.com\",\n-    \"address\" : \"little tokyo\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"George Best\",\n     \"phone\" : \"9482442\",\n     \"email\" : \"anna@example.com\",\n-    \"address\" : \"4th street\",\n     \"tagged\" : [ ]\n   } ]\n }"
  },
  {
    "sha": "88c82f8e65fc30f19ad8917016fff8e32bfcce6c",
    "filename": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/LogicManagerTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/LogicManagerTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/logic/LogicManagerTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -3,7 +3,6 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;\n import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;\n@@ -79,8 +78,7 @@ public void execute_storageThrowsIoException_throwsCommandException() {\n         logic = new LogicManager(model, storage);\n \n         // Execute add command\n-        String addCommand = AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY\n-                + ADDRESS_DESC_AMY;\n+        String addCommand = AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;\n         Person expectedPerson = new PersonBuilder(AMY).withTags().build();\n         ModelManager expectedModel = new ModelManager();\n         expectedModel.addPerson(expectedPerson);"
  },
  {
    "sha": "08a7a433a8e5ff19995c6df869809a6201301cd4",
    "filename": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "status": "modified",
    "additions": 2,
    "deletions": 6,
    "changes": 8,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/logic/commands/CommandTestUtil.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -2,7 +2,6 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n@@ -43,15 +42,12 @@\n     public static final String PHONE_DESC_BOB = \" \" + PREFIX_PHONE + VALID_PHONE_BOB;\n     public static final String EMAIL_DESC_AMY = \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;\n     public static final String EMAIL_DESC_BOB = \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;\n-    public static final String ADDRESS_DESC_AMY = \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;\n-    public static final String ADDRESS_DESC_BOB = \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;\n     public static final String TAG_DESC_FRIEND = \" \" + PREFIX_TAG + VALID_TAG_FRIEND;\n     public static final String TAG_DESC_HUSBAND = \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;\n \n     public static final String INVALID_NAME_DESC = \" \" + PREFIX_NAME + \"James&\"; // '&' not allowed in names\n     public static final String INVALID_PHONE_DESC = \" \" + PREFIX_PHONE + \"911a\"; // 'a' not allowed in phones\n     public static final String INVALID_EMAIL_DESC = \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing '@' symbol\n-    public static final String INVALID_ADDRESS_DESC = \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses\n     public static final String INVALID_TAG_DESC = \" \" + PREFIX_TAG + \"hubby*\"; // '*' not allowed in tags\n \n     public static final String PREAMBLE_WHITESPACE = \"\\t  \\r  \\n\";\n@@ -62,10 +58,10 @@\n \n     static {\n         DESC_AMY = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)\n-                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)\n+                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)\n                 .withTags(VALID_TAG_FRIEND).build();\n         DESC_BOB = new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)\n-                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)\n+                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)\n                 .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();\n     }\n "
  },
  {
    "sha": "009e2fe2ada1c2bbef140b244b879f5b68c971bd",
    "filename": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -4,7 +4,6 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;\n@@ -47,10 +46,6 @@ public void equals() {\n         editedAmy = new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();\n         assertFalse(DESC_AMY.equals(editedAmy));\n \n-        // different address -> returns false\n-        editedAmy = new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();\n-        assertFalse(DESC_AMY.equals(editedAmy));\n-\n         // different tags -> returns false\n         editedAmy = new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();\n         assertFalse(DESC_AMY.equals(editedAmy));"
  },
  {
    "sha": "ba409504c49ec5cd5f05d29a94c577db7f2737a8",
    "filename": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "status": "modified",
    "additions": 17,
    "deletions": 29,
    "changes": 46,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -1,11 +1,8 @@\n package seedu.address.logic.parser;\n \n import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;\n@@ -32,7 +29,6 @@\n import org.junit.jupiter.api.Test;\n \n import seedu.address.logic.commands.AddCommand;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n@@ -49,36 +45,36 @@ public void parse_allFieldsPresent_success() {\n \n         // whitespace only preamble\n         assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n+                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n \n         // multiple names - last name accepted\n         assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n+                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n \n         // multiple phones - last phone accepted\n         assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n+                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n \n         // multiple emails - last email accepted\n         assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n+                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n \n         // multiple addresses - last address accepted\n-        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n+        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n+                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n \n         // multiple tags - all accepted\n         Person expectedPersonMultipleTags = new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n                 .build();\n-        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n+        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n                 + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));\n     }\n \n     @Test\n     public void parse_optionalFieldsMissing_success() {\n         // zero tags\n         Person expectedPerson = new PersonBuilder(AMY).withTags().build();\n-        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,\n+        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,\n                 new AddCommand(expectedPerson));\n     }\n \n@@ -87,19 +83,15 @@ public void parse_compulsoryFieldMissing_failure() {\n         String expectedMessage = String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);\n \n         // missing name prefix\n-        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,\n+        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,\n                 expectedMessage);\n \n         // missing phone prefix\n-        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,\n+        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,\n                 expectedMessage);\n \n         // missing email prefix\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,\n-                expectedMessage);\n-\n-        // missing address prefix\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,\n+        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,\n                 expectedMessage);\n \n         // all prefixes missing\n@@ -110,32 +102,28 @@ public void parse_compulsoryFieldMissing_failure() {\n     @Test\n     public void parse_invalidValue_failure() {\n         // invalid name\n-        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n+        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB\n                 + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);\n \n         // invalid phone\n-        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n+        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB\n                 + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);\n \n         // invalid email\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB\n+        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC\n                 + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);\n \n-        // invalid address\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC\n-                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);\n-\n         // invalid tag\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n+        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n                 + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);\n \n         // two invalid values, only first invalid value reported\n-        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,\n+        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB ,\n                 Name.MESSAGE_CONSTRAINTS);\n \n         // non-empty preamble\n         assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB\n-                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,\n+                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,\n                 String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));\n     }\n }"
  },
  {
    "sha": "c707df9e0159aa5d62773058d03c98a1684deef9",
    "filename": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 21,
    "changes": 29,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -1,11 +1,8 @@\n package seedu.address.logic.parser;\n \n import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;\n@@ -16,7 +13,6 @@\n import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;\n import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;\n@@ -36,7 +32,6 @@\n import seedu.address.commons.core.index.Index;\n import seedu.address.logic.commands.EditCommand;\n import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Phone;\n@@ -84,7 +79,6 @@ public void parse_invalidValue_failure() {\n         assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name\n         assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone\n         assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email\n-        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address\n         assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag\n \n         // invalid phone followed by valid email\n@@ -109,10 +103,10 @@ public void parse_invalidValue_failure() {\n     public void parse_allFieldsSpecified_success() {\n         Index targetIndex = INDEX_SECOND_PERSON;\n         String userInput = targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND\n-                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;\n+                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)\n-                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)\n+                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)\n                 .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();\n         EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n \n@@ -152,12 +146,6 @@ public void parse_oneFieldSpecified_success() {\n         expectedCommand = new EditCommand(targetIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n \n-        // address\n-        userInput = targetIndex.getOneBased() + ADDRESS_DESC_AMY;\n-        descriptor = new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-\n         // tags\n         userInput = targetIndex.getOneBased() + TAG_DESC_FRIEND;\n         descriptor = new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();\n@@ -168,12 +156,12 @@ public void parse_oneFieldSpecified_success() {\n     @Test\n     public void parse_multipleRepeatedFields_acceptsLast() {\n         Index targetIndex = INDEX_FIRST_PERSON;\n-        String userInput = targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY\n-                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND\n-                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;\n+        String userInput = targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY\n+                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND\n+                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)\n-                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n+                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n                 .build();\n         EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n \n@@ -190,10 +178,9 @@ public void parse_invalidValueFollowedByValidValue_success() {\n         assertParseSuccess(parser, userInput, expectedCommand);\n \n         // other valid values specified\n-        userInput = targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB\n+        userInput = targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC\n                 + PHONE_DESC_BOB;\n-        descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)\n-                .withAddress(VALID_ADDRESS_BOB).build();\n+        descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();\n         expectedCommand = new EditCommand(targetIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n     }"
  },
  {
    "sha": "2f0027be91f97318d4e2249000bacd678cd121c1",
    "filename": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 24,
    "changes": 24,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/logic/parser/ParserUtilTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -14,7 +14,6 @@\n import org.junit.jupiter.api.Test;\n \n import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Phone;\n@@ -102,29 +101,6 @@ public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exc\n         assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));\n     }\n \n-    @Test\n-    public void parseAddress_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parseAddress((String) null));\n-    }\n-\n-    @Test\n-    public void parseAddress_invalidValue_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseAddress(INVALID_ADDRESS));\n-    }\n-\n-    @Test\n-    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {\n-        Address expectedAddress = new Address(VALID_ADDRESS);\n-        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));\n-    }\n-\n-    @Test\n-    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {\n-        String addressWithWhitespace = WHITESPACE + VALID_ADDRESS + WHITESPACE;\n-        Address expectedAddress = new Address(VALID_ADDRESS);\n-        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));\n-    }\n-\n     @Test\n     public void parseEmail_null_throwsNullPointerException() {\n         assertThrows(NullPointerException.class, () -> ParserUtil.parseEmail((String) null));"
  },
  {
    "sha": "07d3de514d759340cf89fe77b56399a90773de76",
    "filename": "src/test/java/seedu/address/model/AddressBookTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/model/AddressBookTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/model/AddressBookTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/model/AddressBookTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -3,7 +3,6 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;\n import static seedu.address.testutil.Assert.assertThrows;\n import static seedu.address.testutil.TypicalPersons.ALICE;\n@@ -46,7 +45,7 @@ public void resetData_withValidReadOnlyAddressBook_replacesData() {\n     @Test\n     public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {\n         // Two persons with the same identity fields\n-        Person editedAlice = new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)\n+        Person editedAlice = new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)\n                 .build();\n         List<Person> newPersons = Arrays.asList(ALICE, editedAlice);\n         AddressBookStub newData = new AddressBookStub(newPersons);\n@@ -73,7 +72,7 @@ public void hasPerson_personInAddressBook_returnsTrue() {\n     @Test\n     public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {\n         addressBook.addPerson(ALICE);\n-        Person editedAlice = new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)\n+        Person editedAlice = new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)\n                 .build();\n         assertTrue(addressBook.hasPerson(editedAlice));\n     }"
  },
  {
    "sha": "dcd3be87b3a5698115d4865646a3ed2d151d2788",
    "filename": "src/test/java/seedu/address/model/person/AddressTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 36,
    "changes": 36,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/440ab81df664489ac06afc784f7daca4087892e6/src/test/java/seedu/address/model/person/AddressTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/440ab81df664489ac06afc784f7daca4087892e6/src/test/java/seedu/address/model/person/AddressTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/model/person/AddressTest.java?ref=440ab81df664489ac06afc784f7daca4087892e6",
    "patch": "@@ -1,36 +0,0 @@\n-package seedu.address.model.person;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static seedu.address.testutil.Assert.assertThrows;\n-\n-import org.junit.jupiter.api.Test;\n-\n-public class AddressTest {\n-\n-    @Test\n-    public void constructor_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> new Address(null));\n-    }\n-\n-    @Test\n-    public void constructor_invalidAddress_throwsIllegalArgumentException() {\n-        String invalidAddress = \"\";\n-        assertThrows(IllegalArgumentException.class, () -> new Address(invalidAddress));\n-    }\n-\n-    @Test\n-    public void isValidAddress() {\n-        // null address\n-        assertThrows(NullPointerException.class, () -> Address.isValidAddress(null));\n-\n-        // invalid addresses\n-        assertFalse(Address.isValidAddress(\"\")); // empty string\n-        assertFalse(Address.isValidAddress(\" \")); // spaces only\n-\n-        // valid addresses\n-        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));\n-        assertTrue(Address.isValidAddress(\"-\")); // one character\n-        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address\n-    }\n-}"
  },
  {
    "sha": "96be3290be905d38706475f5ec61b01df855ec7b",
    "filename": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -70,6 +70,6 @@ public void test_nameDoesNotContainKeywords_returnsFalse() {\n         // Keywords match phone, email and address, but does not match name\n         predicate = new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));\n         assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")\n-                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));\n+                .withEmail(\"alice@email.com\").build()));\n     }\n }"
  },
  {
    "sha": "db27c81abc8e9d1242039e3a04921f83a5ef10a9",
    "filename": "src/test/java/seedu/address/model/person/PersonTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 6,
    "changes": 7,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/model/person/PersonTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/model/person/PersonTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/model/person/PersonTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -2,7 +2,6 @@\n \n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;\n@@ -33,7 +32,7 @@ public void isSamePerson() {\n \n         // same name, all other attributes different -> returns true\n         Person editedAlice = new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)\n-                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();\n+                .withTags(VALID_TAG_HUSBAND).build();\n         assertTrue(ALICE.isSamePerson(editedAlice));\n \n         // different name, all other attributes same -> returns false\n@@ -80,10 +79,6 @@ public void equals() {\n         editedAlice = new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();\n         assertFalse(ALICE.equals(editedAlice));\n \n-        // different address -> returns false\n-        editedAlice = new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();\n-        assertFalse(ALICE.equals(editedAlice));\n-\n         // different tags -> returns false\n         editedAlice = new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();\n         assertFalse(ALICE.equals(editedAlice));"
  },
  {
    "sha": "5df427de2c0fb73c1ea0ca35a9c6c74148dc45ec",
    "filename": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/model/person/UniquePersonListTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -3,7 +3,6 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;\n import static seedu.address.testutil.Assert.assertThrows;\n import static seedu.address.testutil.TypicalPersons.ALICE;\n@@ -42,7 +41,7 @@ public void contains_personInList_returnsTrue() {\n     @Test\n     public void contains_personWithSameIdentityFieldsInList_returnsTrue() {\n         uniquePersonList.add(ALICE);\n-        Person editedAlice = new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)\n+        Person editedAlice = new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)\n                 .build();\n         assertTrue(uniquePersonList.contains(editedAlice));\n     }\n@@ -85,7 +84,7 @@ public void setPerson_editedPersonIsSamePerson_success() {\n     @Test\n     public void setPerson_editedPersonHasSameIdentity_success() {\n         uniquePersonList.add(ALICE);\n-        Person editedAlice = new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)\n+        Person editedAlice = new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)\n                 .build();\n         uniquePersonList.setPerson(ALICE, editedAlice);\n         UniquePersonList expectedUniquePersonList = new UniquePersonList();"
  },
  {
    "sha": "50715d7650d7a7580099453a06dbbbb99495738c",
    "filename": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 24,
    "changes": 31,
    "blob_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/blob/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-W10-4/tp/raw/233f6833d46b535146ae6fad88256466d53d295f/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-W10-4/tp/contents/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java?ref=233f6833d46b535146ae6fad88256466d53d295f",
    "patch": "@@ -12,7 +12,6 @@\n import org.junit.jupiter.api.Test;\n \n import seedu.address.commons.exceptions.IllegalValueException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Phone;\n@@ -27,7 +26,6 @@\n     private static final String VALID_NAME = BENSON.getName().toString();\n     private static final String VALID_PHONE = BENSON.getPhone().toString();\n     private static final String VALID_EMAIL = BENSON.getEmail().toString();\n-    private static final String VALID_ADDRESS = BENSON.getAddress().toString();\n     private static final List<JsonAdaptedTag> VALID_TAGS = BENSON.getTags().stream()\n             .map(JsonAdaptedTag::new)\n             .collect(Collectors.toList());\n@@ -41,69 +39,54 @@ public void toModelType_validPersonDetails_returnsPerson() throws Exception {\n     @Test\n     public void toModelType_invalidName_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);\n         String expectedMessage = Name.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullName_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_invalidPhone_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);\n         String expectedMessage = Phone.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullPhone_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_invalidEmail_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);\n         String expectedMessage = Email.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullEmail_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n-    @Test\n-    public void toModelType_invalidAddress_throwsIllegalValueException() {\n-        JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = Address.MESSAGE_CONSTRAINTS;\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_nullAddress_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);\n-        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n     @Test\n     public void toModelType_invalidTags_throwsIllegalValueException() {\n         List<JsonAdaptedTag> invalidTags = new ArrayList<>(VALID_TAGS);\n         invalidTags.add(new JsonAdaptedTag(INVALID_TAG));\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);\n         assertThrows(IllegalValueException.class, person::toModelType);\n     }\n "
  }
]
