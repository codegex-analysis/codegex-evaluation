[
  {
    "sha": "5dcdda5a43f83a74283c8e49ccaa35d96a8c0053",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Benefic/WebApp/blob/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/pom.xml",
    "raw_url": "https://github.com/Benefic/WebApp/raw/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/pom.xml",
    "contents_url": "https://api.github.com/repos/Benefic/WebApp/contents/pom.xml?ref=8d94fb92fc2ce93def59b8bdb00cf1907b21ab28",
    "patch": "@@ -49,6 +49,11 @@\n             <artifactId>modelmapper</artifactId>\n             <version>2.3.9</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springdoc</groupId>\n+            <artifactId>springdoc-openapi-ui</artifactId>\n+            <version>1.5.5</version>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "290c14285e09259a31aa8f6d36d4f7dedd6296fc",
    "filename": "src/main/java/ru/abenefic/spring/controller/ProductController.java",
    "status": "modified",
    "additions": 12,
    "deletions": 17,
    "changes": 29,
    "blob_url": "https://github.com/Benefic/WebApp/blob/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/controller/ProductController.java",
    "raw_url": "https://github.com/Benefic/WebApp/raw/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/controller/ProductController.java",
    "contents_url": "https://api.github.com/repos/Benefic/WebApp/contents/src/main/java/ru/abenefic/spring/controller/ProductController.java?ref=8d94fb92fc2ce93def59b8bdb00cf1907b21ab28",
    "patch": "@@ -3,13 +3,17 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.domain.Specification;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.util.MultiValueMap;\n import org.springframework.web.bind.annotation.*;\n import ru.abenefic.spring.exceptions.NoSuchPageException;\n import ru.abenefic.spring.model.ProductSort;\n import ru.abenefic.spring.model.SortDirection;\n import ru.abenefic.spring.model.dtos.ProductDto;\n+import ru.abenefic.spring.model.entities.Product;\n+import ru.abenefic.spring.repository.specifications.ProductSpecifications;\n import ru.abenefic.spring.services.ProductService;\n \n import java.util.List;\n@@ -26,15 +30,11 @@ public ProductController(ProductService productService) {\n     }\n \n     @GetMapping\n-    public ResponseEntity<List<ProductDto>> getAll(@RequestParam(name = \"s\", defaultValue = \"\") String search,\n-                                                   @RequestParam(defaultValue = \"\") String title,\n-                                                   @RequestParam(defaultValue = \"0\") float first,\n-                                                   @RequestParam(defaultValue = \"0\") float second,\n-                                                   @RequestParam(defaultValue = \"0\") float cost,\n+    public ResponseEntity<List<ProductDto>> getAll(@RequestParam MultiValueMap<String, String> params,\n                                                    @RequestParam(defaultValue = \"1\") int page,\n                                                    @RequestParam(defaultValue = \"10\") int size,\n-                                                   @RequestParam(defaultValue = \"ASC\") SortDirection costSort,\n-                                                   @RequestParam(defaultValue = \"ASC\") SortDirection titleSort,\n+                                                   @RequestParam(defaultValue = \"ASC\") SortDirection costSortDirection,\n+                                                   @RequestParam(defaultValue = \"ASC\") SortDirection titleSortDirection,\n                                                    @RequestParam(defaultValue = \"TITLE\") ProductSort mainSort\n     ) {\n \n@@ -44,8 +44,8 @@ public ProductController(ProductService productService) {\n             page--;\n         }\n \n-        Sort.Order costSorting = new Sort.Order(Sort.Direction.valueOf(costSort.name()), \"cost\");\n-        Sort.Order titleSorting = new Sort.Order(Sort.Direction.valueOf(titleSort.name()), \"title\");\n+        Sort.Order costSorting = new Sort.Order(Sort.Direction.valueOf(costSortDirection.name()), \"cost\");\n+        Sort.Order titleSorting = new Sort.Order(Sort.Direction.valueOf(titleSortDirection.name()), \"title\");\n \n         Sort resultSort;\n         if (mainSort == ProductSort.COST) {\n@@ -54,15 +54,10 @@ public ProductController(ProductService productService) {\n             resultSort = Sort.by(titleSorting, costSorting);\n         }\n \n-        Page<ProductDto> products;\n+        Specification<Product> spec = ProductSpecifications.build(params);\n+\n+        Page<ProductDto> products = productService.getAll(spec, page, size, resultSort);\n \n-        switch (search) {\n-            case \"title_like\" -> products = productService.getAllByTitleContains(title, page, size, resultSort);\n-            case \"cost_between\" -> products = productService.getAllByCostBetween(first, second, page, size, resultSort);\n-            case \"cost_less\" -> products = productService.getAllByCostIsLessThanEqual(cost, page, size, resultSort);\n-            case \"cost_greater\" -> products = productService.getAllByCostGreaterThanEqual(cost, page, size, resultSort);\n-            default -> products = productService.getAll(page, size, resultSort);\n-        }\n         if (products.getTotalPages() <= page) {\n             throw new NoSuchPageException(\"Maximum page is \" + products.getTotalPages());\n         }"
  },
  {
    "sha": "efad539dd16285aaf5491ecf5dbe2c2d6f0bf3bf",
    "filename": "src/main/java/ru/abenefic/spring/controller/ShoppingCartController.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/Benefic/WebApp/blob/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/controller/ShoppingCartController.java",
    "raw_url": "https://github.com/Benefic/WebApp/raw/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/controller/ShoppingCartController.java",
    "contents_url": "https://api.github.com/repos/Benefic/WebApp/contents/src/main/java/ru/abenefic/spring/controller/ShoppingCartController.java?ref=8d94fb92fc2ce93def59b8bdb00cf1907b21ab28",
    "patch": "@@ -0,0 +1,36 @@\n+package ru.abenefic.spring.controller;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import ru.abenefic.spring.model.dtos.ProductDto;\n+import ru.abenefic.spring.services.ShoppingCartService;\n+\n+import java.util.Map;\n+\n+@RestController\n+@RequestMapping(\"/api/v1/cart\")\n+public class ShoppingCartController {\n+\n+    @Autowired\n+    private ShoppingCartService shoppingCartService;\n+\n+    @GetMapping\n+    public ResponseEntity<Map<ProductDto, Integer>> getCart() {\n+        return ResponseEntity.ok(shoppingCartService.getProducts());\n+    }\n+\n+    @PutMapping()\n+    public ResponseEntity<Map<ProductDto, Integer>> addProduct(@RequestParam Long productId) {\n+        shoppingCartService.addProduct(productId);\n+        return ResponseEntity.ok(shoppingCartService.getProducts());\n+    }\n+\n+    @DeleteMapping\n+    public ResponseEntity<Map<ProductDto, Integer>> removeProduct(@RequestParam Long productId) {\n+        shoppingCartService.removeProduct(productId);\n+        return ResponseEntity.ok(shoppingCartService.getProducts());\n+    }\n+\n+\n+}"
  },
  {
    "sha": "eed9f7262158e0f49f839db8477152333355bf33",
    "filename": "src/main/java/ru/abenefic/spring/repository/ProductRepository.java",
    "status": "modified",
    "additions": 2,
    "deletions": 10,
    "changes": 12,
    "blob_url": "https://github.com/Benefic/WebApp/blob/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/repository/ProductRepository.java",
    "raw_url": "https://github.com/Benefic/WebApp/raw/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/repository/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/Benefic/WebApp/contents/src/main/java/ru/abenefic/spring/repository/ProductRepository.java?ref=8d94fb92fc2ce93def59b8bdb00cf1907b21ab28",
    "patch": "@@ -1,19 +1,11 @@\n package ru.abenefic.spring.repository;\n \n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import org.springframework.stereotype.Repository;\n import ru.abenefic.spring.model.entities.Product;\n \n @Repository\n-public interface ProductRepository extends JpaRepository<Product, Long> {\n+public interface ProductRepository extends JpaRepository<Product, Long>, JpaSpecificationExecutor<Product> {\n \n-    Page<Product> findProductsByCostBetween(float first, float second, Pageable pageRequest);\n-\n-    Page<Product> findProductsByCostIsLessThanEqual(float cost, Pageable pageRequest);\n-\n-    Page<Product> findProductsByCostGreaterThanEqual(float cost, Pageable pageRequest);\n-\n-    Page<Product> findProductsByTitleContainsIgnoreCase(String title, Pageable pageRequest);\n }"
  },
  {
    "sha": "6a33d0583e545015d5093bc104e4e73f7276ed1d",
    "filename": "src/main/java/ru/abenefic/spring/repository/specifications/ProductSpecifications.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/Benefic/WebApp/blob/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/repository/specifications/ProductSpecifications.java",
    "raw_url": "https://github.com/Benefic/WebApp/raw/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/repository/specifications/ProductSpecifications.java",
    "contents_url": "https://api.github.com/repos/Benefic/WebApp/contents/src/main/java/ru/abenefic/spring/repository/specifications/ProductSpecifications.java?ref=8d94fb92fc2ce93def59b8bdb00cf1907b21ab28",
    "patch": "@@ -0,0 +1,57 @@\n+package ru.abenefic.spring.repository.specifications;\n+\n+import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.util.MultiValueMap;\n+import ru.abenefic.spring.model.entities.Product;\n+\n+public class ProductSpecifications {\n+\n+    private static final String MIN_COST = \"min_cost\";\n+    private static final String MAX_COST = \"max_cost\";\n+    private static final String TITLE = \"title\";\n+\n+    private static Specification<Product> costIsLessThanAndEqual(float maxCost) {\n+        return (root, query, criteriaBuilder) -> criteriaBuilder.lessThanOrEqualTo(root.get(\"cost\"), maxCost);\n+    }\n+\n+    private static Specification<Product> costIsGreaterThanAndEqual(float minCost) {\n+        return (root, query, criteriaBuilder) -> criteriaBuilder.greaterThanOrEqualTo(root.get(\"cost\"), minCost);\n+    }\n+\n+    private static Specification<Product> titleIsLike(String title) {\n+        return (root, query, criteriaBuilder) -> criteriaBuilder.like(\n+                criteriaBuilder.lower(root.get(\"title\")),\n+                \"%\" + title.toLowerCase() + \"%\"\n+        );\n+    }\n+\n+    public static Specification<Product> build(MultiValueMap<String, String> params) {\n+        Specification<Product> spec = Specification.where(null);\n+\n+        if (params.containsKey(MAX_COST)) {\n+            for (String value : params.get(MAX_COST)) {\n+                if (!value.isBlank()) {\n+                    spec = spec.and(costIsLessThanAndEqual(Float.parseFloat(value)));\n+                }\n+            }\n+        }\n+\n+        if (params.containsKey(MIN_COST)) {\n+            for (String value : params.get(MIN_COST)) {\n+                if (!value.isBlank()) {\n+                    spec = spec.and(costIsGreaterThanAndEqual(Float.parseFloat(value)));\n+                }\n+            }\n+        }\n+\n+        if (params.containsKey(TITLE)) {\n+            for (String value : params.get(TITLE)) {\n+                if (!value.isBlank()) {\n+                    spec = spec.and(titleIsLike(value));\n+                }\n+            }\n+        }\n+\n+        return spec;\n+    }\n+}"
  },
  {
    "sha": "af15c8fc0de21137fc3bd727b889131d35af75a9",
    "filename": "src/main/java/ru/abenefic/spring/services/ProductService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 19,
    "changes": 23,
    "blob_url": "https://github.com/Benefic/WebApp/blob/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/services/ProductService.java",
    "raw_url": "https://github.com/Benefic/WebApp/raw/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/services/ProductService.java",
    "contents_url": "https://api.github.com/repos/Benefic/WebApp/contents/src/main/java/ru/abenefic/spring/services/ProductService.java?ref=8d94fb92fc2ce93def59b8bdb00cf1907b21ab28",
    "patch": "@@ -4,10 +4,12 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.domain.Specification;\n import org.springframework.stereotype.Service;\n import ru.abenefic.spring.exceptions.ResourceNotFoundException;\n import ru.abenefic.spring.model.ProductMapper;\n import ru.abenefic.spring.model.dtos.ProductDto;\n+import ru.abenefic.spring.model.entities.Product;\n import ru.abenefic.spring.repository.ProductRepository;\n \n import java.util.Optional;\n@@ -21,25 +23,8 @@\n     @Autowired\n     private ProductMapper mapper;\n \n-\n-    public Page<ProductDto> getAll(int page, int size, Sort sort) {\n-        return productRepository.findAll(PageRequest.of(page, size, sort)).map(mapper::toDto);\n-    }\n-\n-    public Page<ProductDto> getAllByCostBetween(float first, float second, int page, int size, Sort sort) {\n-        return productRepository.findProductsByCostBetween(first, second, PageRequest.of(page, size, sort)).map(mapper::toDto);\n-    }\n-\n-    public Page<ProductDto> getAllByCostIsLessThanEqual(float first, int page, int size, Sort sort) {\n-        return productRepository.findProductsByCostIsLessThanEqual(first, PageRequest.of(page, size, sort)).map(mapper::toDto);\n-    }\n-\n-    public Page<ProductDto> getAllByCostGreaterThanEqual(float first, int page, int size, Sort sort) {\n-        return productRepository.findProductsByCostGreaterThanEqual(first, PageRequest.of(page, size, sort)).map(mapper::toDto);\n-    }\n-\n-    public Page<ProductDto> getAllByTitleContains(String title, int page, int size, Sort sort) {\n-        return productRepository.findProductsByTitleContainsIgnoreCase(title, PageRequest.of(page, size, sort)).map(mapper::toDto);\n+    public Page<ProductDto> getAll(Specification<Product> spec, int page, int size, Sort sort) {\n+        return productRepository.findAll(spec, PageRequest.of(page, size, sort)).map(mapper::toDto);\n     }\n \n     public ProductDto getById(Long id) {"
  },
  {
    "sha": "349458122fda4293f15f0ccf71270c9e4d3e9933",
    "filename": "src/main/java/ru/abenefic/spring/services/ShoppingCartService.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/Benefic/WebApp/blob/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/services/ShoppingCartService.java",
    "raw_url": "https://github.com/Benefic/WebApp/raw/8d94fb92fc2ce93def59b8bdb00cf1907b21ab28/src/main/java/ru/abenefic/spring/services/ShoppingCartService.java",
    "contents_url": "https://api.github.com/repos/Benefic/WebApp/contents/src/main/java/ru/abenefic/spring/services/ShoppingCartService.java?ref=8d94fb92fc2ce93def59b8bdb00cf1907b21ab28",
    "patch": "@@ -0,0 +1,46 @@\n+package ru.abenefic.spring.services;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.context.WebApplicationContext;\n+import ru.abenefic.spring.model.dtos.ProductDto;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Service\n+@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)\n+public class ShoppingCartService {\n+\n+    private final Map<ProductDto, Integer> products = new HashMap<>();\n+    @Autowired\n+    private ProductService productService;\n+\n+    public void addProduct(Long productId) {\n+        ProductDto product = productService.getById(productId);\n+        if (products.containsKey(product)) {\n+            products.replace(product, products.get(product) + 1);\n+        } else {\n+            products.put(product, 1);\n+        }\n+    }\n+\n+    public void removeProduct(Long productId) {\n+        ProductDto product = productService.getById(productId);\n+        if (products.containsKey(product)) {\n+            if (products.get(product) > 1)\n+                products.replace(product, products.get(product) - 1);\n+            else if (products.get(product) == 1) {\n+                products.remove(product);\n+            }\n+        }\n+    }\n+\n+    public Map<ProductDto, Integer> getProducts() {\n+        return Collections.unmodifiableMap(products);\n+    }\n+\n+}"
  }
]
