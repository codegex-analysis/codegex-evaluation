[
  {
    "sha": "8410795752e9c96059d4a1da1906d0e4fac8f74a",
    "filename": "core/src/main/java/com/flipkart/gap/usl/core/model/dimension/SizeNTimeBasedRetentionPolicy.java",
    "status": "modified",
    "additions": 14,
    "deletions": 3,
    "changes": 17,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/b5802c43dfccb20b4556737d094774cc5fefb75d/core/src/main/java/com/flipkart/gap/usl/core/model/dimension/SizeNTimeBasedRetentionPolicy.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/b5802c43dfccb20b4556737d094774cc5fefb75d/core/src/main/java/com/flipkart/gap/usl/core/model/dimension/SizeNTimeBasedRetentionPolicy.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/core/src/main/java/com/flipkart/gap/usl/core/model/dimension/SizeNTimeBasedRetentionPolicy.java?ref=b5802c43dfccb20b4556737d094774cc5fefb75d",
    "patch": "@@ -4,18 +4,29 @@\n import lombok.Getter;\n import lombok.Setter;\n \n+import java.util.concurrent.TimeUnit;\n+\n /**\n  * Created by amarjeet.singh on 10/11/16.\n  */\n @Getter\n @Setter\n public final class SizeNTimeBasedRetentionPolicy extends DimensionRetentionPolicy {\n-    private long limitInMilliseconds;\n+    private long duration;\n+    private TimeUnit timeUnit;\n     private int sizeLimit;\n \n-    public SizeNTimeBasedRetentionPolicy(long limitInMilliseconds, int sizeLimit) {\n+    public SizeNTimeBasedRetentionPolicy(TimeUnit timeUnit, long duration, int sizeLimit) {\n+        super(RetentionPolicyType.SIZE_N_TIME_BASED);\n+        this.duration = duration;\n+        this.timeUnit = timeUnit;\n+        this.sizeLimit = sizeLimit;\n+    }\n+\n+    public SizeNTimeBasedRetentionPolicy(long days, int sizeLimit) {\n         super(RetentionPolicyType.SIZE_N_TIME_BASED);\n-        this.limitInMilliseconds = limitInMilliseconds;\n+        this.duration = days;\n+        this.timeUnit = TimeUnit.DAYS;\n         this.sizeLimit = sizeLimit;\n     }\n "
  },
  {
    "sha": "e9e32c02625ec282822bb81d2bce3b2eac76c3c7",
    "filename": "core/src/main/java/com/flipkart/gap/usl/core/model/dimension/TimeBasedRetentionPolicy.java",
    "status": "modified",
    "additions": 11,
    "deletions": 3,
    "changes": 14,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/b5802c43dfccb20b4556737d094774cc5fefb75d/core/src/main/java/com/flipkart/gap/usl/core/model/dimension/TimeBasedRetentionPolicy.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/b5802c43dfccb20b4556737d094774cc5fefb75d/core/src/main/java/com/flipkart/gap/usl/core/model/dimension/TimeBasedRetentionPolicy.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/core/src/main/java/com/flipkart/gap/usl/core/model/dimension/TimeBasedRetentionPolicy.java?ref=b5802c43dfccb20b4556737d094774cc5fefb75d",
    "patch": "@@ -4,17 +4,25 @@\n import lombok.Getter;\n import lombok.Setter;\n \n+import java.util.concurrent.TimeUnit;\n+\n /**\n  * Created by amarjeet.singh on 10/11/16.\n  */\n @Getter\n @Setter\n public class TimeBasedRetentionPolicy extends DimensionRetentionPolicy {\n-    private long limitInMilliseconds;\n+    private long duration;\n+    private TimeUnit timeUnit;\n \n-    public TimeBasedRetentionPolicy(long limitInMilliseconds) {\n+    public TimeBasedRetentionPolicy(TimeUnit timeUnit, long duration) {\n         super(RetentionPolicyType.TIME_BASED);\n-        this.limitInMilliseconds = limitInMilliseconds;\n+        this.duration = duration;\n+        this.timeUnit = timeUnit;\n+    }\n+\n+    public TimeBasedRetentionPolicy(long duration) {\n+        this(TimeUnit.DAYS, duration);\n     }\n \n     @Override"
  },
  {
    "sha": "a41b07f24b218276aa6b496b43f795172774a59b",
    "filename": "core/src/main/java/com/flipkart/gap/usl/core/retentionPolicyVisitor/ListRetentionPolicyVisitor.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/b5802c43dfccb20b4556737d094774cc5fefb75d/core/src/main/java/com/flipkart/gap/usl/core/retentionPolicyVisitor/ListRetentionPolicyVisitor.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/b5802c43dfccb20b4556737d094774cc5fefb75d/core/src/main/java/com/flipkart/gap/usl/core/retentionPolicyVisitor/ListRetentionPolicyVisitor.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/core/src/main/java/com/flipkart/gap/usl/core/retentionPolicyVisitor/ListRetentionPolicyVisitor.java?ref=b5802c43dfccb20b4556737d094774cc5fefb75d",
    "patch": "@@ -8,6 +8,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n \n import java.util.*;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n /**\n@@ -19,7 +20,7 @@\n     public void visit(SizeNTimeBasedRetentionPolicy policy, List<K> elements) {\n         if (elements != null) {\n             sizeBasedRemoval(policy.getSizeLimit(), elements);\n-            timeBaseRemoval(policy.getLimitInMilliseconds(), elements);\n+            timeBaseRemoval(policy.getTimeUnit(), policy.getDuration(), elements);\n         }\n     }\n \n@@ -33,7 +34,7 @@ public void visit(SizeBasedRetentionPolicy policy, List<K> elements) {\n     @Override\n     public void visit(TimeBasedRetentionPolicy policy, List<K> elements) {\n         if (elements != null) {\n-            timeBaseRemoval(policy.getLimitInMilliseconds(), elements);\n+            timeBaseRemoval(policy.getTimeUnit(), policy.getDuration(), elements);\n         }\n     }\n \n@@ -50,19 +51,20 @@ private void sizeBasedRemoval(int sizeLimit, List<K> elements) {\n         }\n     }\n \n-    private void timeBaseRemoval(long limitInMilliseconds, List<K> elements) {\n-        elements.removeIf(element -> RetentionPolicyHelper.isTimeLimitExceeded(limitInMilliseconds, element));\n+    private void timeBaseRemoval(TimeUnit timeUnit, long duration, List<K> elements) {\n+        elements.removeIf(element -> RetentionPolicyHelper.isTimeLimitExceeded(timeUnit.toMillis(duration), element));\n     }\n \n \n     /**\n      * Getting a set of Indexes to remove on LRU basis\n+     *\n      * @param sizeLimit\n      * @param elements\n      * @return\n      */\n     private Set<Integer> getIndexesToRemove(int sizeLimit, List<K> elements) {\n-        if(elements.size() > sizeLimit) {\n+        if (elements.size() > sizeLimit) {\n             int entriesToRemove = elements.size() - sizeLimit;\n             List<Pair<Long, Integer>> sortedTimestampIndexPair = sortedTimestamp(elements);\n             return sortedTimestampIndexPair.stream()\n@@ -75,6 +77,7 @@ private void timeBaseRemoval(long limitInMilliseconds, List<K> elements) {\n \n     /**\n      * sorting the Pair of Timestamp and Index in accessing order\n+     *\n      * @param elements\n      * @return\n      */"
  },
  {
    "sha": "56df79c7a9a210101b1582536f4ecc52a6773908",
    "filename": "core/src/main/java/com/flipkart/gap/usl/core/retentionPolicyVisitor/MapRetentionPolicyVisitor.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/b5802c43dfccb20b4556737d094774cc5fefb75d/core/src/main/java/com/flipkart/gap/usl/core/retentionPolicyVisitor/MapRetentionPolicyVisitor.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/b5802c43dfccb20b4556737d094774cc5fefb75d/core/src/main/java/com/flipkart/gap/usl/core/retentionPolicyVisitor/MapRetentionPolicyVisitor.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/core/src/main/java/com/flipkart/gap/usl/core/retentionPolicyVisitor/MapRetentionPolicyVisitor.java?ref=b5802c43dfccb20b4556737d094774cc5fefb75d",
    "patch": "@@ -11,15 +11,16 @@\n import com.flipkart.gap.usl.core.model.dimension.TimeBasedRetentionPolicy;\n \n import java.util.*;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-public class MapRetentionPolicyVisitor<K,V extends DimensionCollection.DimensionElement> implements RetentionPolicyVisitor<Map<K,V>>{\n+public class MapRetentionPolicyVisitor<K, V extends DimensionCollection.DimensionElement> implements RetentionPolicyVisitor<Map<K, V>> {\n \n     @Override\n     public void visit(SizeNTimeBasedRetentionPolicy policy, Map<K, V> elements) {\n         if (elements != null) {\n             sizeBasedRemoval(policy.getSizeLimit(), elements);\n-            timeBaseRemoval(policy.getLimitInMilliseconds(), elements);\n+            timeBaseRemoval(policy.getTimeUnit(), policy.getDuration(), elements);\n         }\n     }\n \n@@ -33,15 +34,15 @@ public void visit(SizeBasedRetentionPolicy policy, Map<K, V> elements) {\n     @Override\n     public void visit(TimeBasedRetentionPolicy policy, Map<K, V> elements) {\n         if (elements != null) {\n-            timeBaseRemoval(policy.getLimitInMilliseconds(), elements);\n+            timeBaseRemoval(policy.getTimeUnit(), policy.getDuration(), elements);\n         }\n     }\n \n-    private void timeBaseRemoval(long limitInMilliseconds, Map<K, V> elements) {\n+    private void timeBaseRemoval(TimeUnit timeUnit, long duration, Map<K, V> elements) {\n         Iterator<Map.Entry<K, V>> iterator = elements.entrySet().iterator();\n         while (iterator.hasNext()) {\n             V value = iterator.next().getValue();\n-            if (RetentionPolicyHelper.isTimeLimitExceeded(limitInMilliseconds, value)) {\n+            if (RetentionPolicyHelper.isTimeLimitExceeded(timeUnit.toMillis(duration), value)) {\n                 iterator.remove();\n             }\n         }\n@@ -56,7 +57,7 @@ private void sizeBasedRemoval(int sizeLimit, Map<K, V> elements) {\n     private List<K> getKeysToRemove(int sizeLimit, List<Map.Entry<K, V>> sortedEntries) {\n         int entriesToRemoves = sortedEntries.size() - sizeLimit;\n         List<K> keysToRemove = new ArrayList<>();\n-        for (Map.Entry<K,V> entry : sortedEntries) {\n+        for (Map.Entry<K, V> entry : sortedEntries) {\n             if (keysToRemove.size() < entriesToRemoves) {\n                 // size based remove\n                 keysToRemove.add(entry.getKey());"
  }
]
