[
  {
    "sha": "a5214f72888cc6900dd0c5078da8247cf56db28e",
    "filename": "container/src/main/java/com/flipkart/gap/usl/container/USL.java",
    "status": "removed",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/ed18389211aba14e0d0f438fc5bc6fb8f6da5f6c/container/src/main/java/com/flipkart/gap/usl/container/USL.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/ed18389211aba14e0d0f438fc5bc6fb8f6da5f6c/container/src/main/java/com/flipkart/gap/usl/container/USL.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/container/src/main/java/com/flipkart/gap/usl/container/USL.java?ref=ed18389211aba14e0d0f438fc5bc6fb8f6da5f6c",
    "patch": "@@ -1,12 +0,0 @@\n-package com.flipkart.gap.usl.container;\n-\n-import lombok.extern.slf4j.Slf4j;\n-\n-@Slf4j\n-public class USL {\n-\n-    public static void main(String[] args) throws Exception {\n-        USLContainer uslContainer = new USLContainer();\n-        uslContainer.run(args);\n-    }\n-}"
  },
  {
    "sha": "3ff9da35a620a9a7e5b0e6908d9876d3bee25464",
    "filename": "container/src/main/java/com/flipkart/gap/usl/container/USLContainer.java",
    "status": "modified",
    "additions": 11,
    "deletions": 3,
    "changes": 14,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/container/src/main/java/com/flipkart/gap/usl/container/USLContainer.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/container/src/main/java/com/flipkart/gap/usl/container/USLContainer.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/container/src/main/java/com/flipkart/gap/usl/container/USLContainer.java?ref=fda0c8dd4bd5de9b1375bec8c83837d7f93536b3",
    "patch": "@@ -4,6 +4,7 @@\n import ch.qos.logback.classic.util.ContextInitializer;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.flipkart.gap.usl.container.config.ContainerConfig;\n import com.flipkart.gap.usl.container.config.ContainerConfigurationModule;\n import com.flipkart.gap.usl.container.config.USLBootstrapConfig;\n import com.flipkart.gap.usl.container.filters.RequestFilter;\n@@ -17,6 +18,7 @@\n import io.dropwizard.setup.Environment;\n import io.federecio.dropwizard.swagger.SwaggerBundle;\n import io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.slf4j.LoggerFactory;\n \n@@ -25,13 +27,19 @@\n  */\n @Slf4j\n public class USLContainer extends Application<USLBootstrapConfig> {\n+    @Getter\n+    private final ContainerConfig containerConfig;\n+\n+    public USLContainer(ContainerConfig containerConfig) {\n+        this.containerConfig = containerConfig;\n+    }\n \n     @Override\n     public void initialize(Bootstrap<USLBootstrapConfig> bootstrap) {\n         bootstrap.addBundle(new SwaggerBundle<USLBootstrapConfig>() {\n             @Override\n             protected SwaggerBundleConfiguration getSwaggerBundleConfiguration(USLBootstrapConfig configuration) {\n-                return configuration.swaggerBundleConfiguration;\n+                return containerConfig.getSwaggerBundleConfiguration();\n             }\n         });\n     }\n@@ -42,8 +50,8 @@ public void run(USLBootstrapConfig uslBootstrapConfig, Environment environment)\n         context.reset();\n         ContextInitializer initializer = new ContextInitializer(context);\n         initializer.autoConfig();\n-        Injector injector = Guice.createInjector(new ConfigurationModule(uslBootstrapConfig.getCoreConfig()),\n-                new ContainerConfigurationModule(uslBootstrapConfig));\n+        Injector injector = Guice.createInjector(new ConfigurationModule(containerConfig.getCoreConfig()),\n+                new ContainerConfigurationModule(containerConfig));\n         environment.getObjectMapper().enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n         environment.getObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n         JmxReporterMetricRegistry.initialiseJmxMetricRegistry();"
  },
  {
    "sha": "b6777dbbb783de42a8994d4e65384469517ffa24",
    "filename": "container/src/main/java/com/flipkart/gap/usl/container/config/ContainerConfig.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/container/src/main/java/com/flipkart/gap/usl/container/config/ContainerConfig.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/container/src/main/java/com/flipkart/gap/usl/container/config/ContainerConfig.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/container/src/main/java/com/flipkart/gap/usl/container/config/ContainerConfig.java?ref=fda0c8dd4bd5de9b1375bec8c83837d7f93536b3",
    "patch": "@@ -0,0 +1,18 @@\n+package com.flipkart.gap.usl.container.config;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.flipkart.gap.usl.container.eventIngestion.EventIngestionConfig;\n+import com.flipkart.gap.usl.core.config.v2.ApplicationConfiguration;\n+import io.federecio.dropwizard.swagger.SwaggerBundleConfiguration;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class ContainerConfig {\n+    @JsonProperty(\"swagger\")\n+    public SwaggerBundleConfiguration swaggerBundleConfiguration;\n+    private ApplicationConfiguration coreConfig;\n+    private EventIngestionConfig eventIngestionConfig;\n+    private String healthCheckKey = \"default\";\n+}"
  },
  {
    "sha": "f0820adcd785671002697e5672c142e40db25960",
    "filename": "container/src/main/java/com/flipkart/gap/usl/container/config/ContainerConfigurationModule.java",
    "status": "modified",
    "additions": 6,
    "deletions": 8,
    "changes": 14,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/container/src/main/java/com/flipkart/gap/usl/container/config/ContainerConfigurationModule.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/container/src/main/java/com/flipkart/gap/usl/container/config/ContainerConfigurationModule.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/container/src/main/java/com/flipkart/gap/usl/container/config/ContainerConfigurationModule.java?ref=fda0c8dd4bd5de9b1375bec8c83837d7f93536b3",
    "patch": "@@ -6,18 +6,16 @@\n import com.google.inject.name.Names;\n \n public class ContainerConfigurationModule extends AbstractModule {\n-    private final USLBootstrapConfig configuration;\n-\n-\n-    public ContainerConfigurationModule(USLBootstrapConfig configuration) {\n-        this.configuration = configuration;\n+    private final ContainerConfig containerConfig;\n \n+    public ContainerConfigurationModule(ContainerConfig containerConfig) {\n+        this.containerConfig = containerConfig;\n     }\n \n     @Override\n     protected void configure() {\n-        bind(EventIngestionConfig.class).annotatedWith(Names.named(\"eventIngestionConfig\")).toInstance(configuration.getEventIngestionConfig());\n-        bind(KafkaProducerClient.class).annotatedWith(Names.named(\"ingestionKafkaClient\")).toInstance(new KafkaProducerClient(configuration.getEventIngestionConfig().getKafkaIngestionConfig()));\n-        bind(String.class).annotatedWith(Names.named(\"healthCheckKey\")).toInstance(configuration.getHealthCheckKey());\n+        bind(EventIngestionConfig.class).annotatedWith(Names.named(\"eventIngestionConfig\")).toInstance(containerConfig.getEventIngestionConfig());\n+        bind(KafkaProducerClient.class).annotatedWith(Names.named(\"ingestionKafkaClient\")).toInstance(new KafkaProducerClient(containerConfig.getEventIngestionConfig().getKafkaIngestionConfig()));\n+        bind(String.class).annotatedWith(Names.named(\"healthCheckKey\")).toInstance(containerConfig.getHealthCheckKey());\n     }\n }"
  },
  {
    "sha": "54c642269d6fddb5a82826f86d5359674a1ce15c",
    "filename": "container/src/main/java/com/flipkart/gap/usl/container/config/USLBootstrapConfig.java",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/container/src/main/java/com/flipkart/gap/usl/container/config/USLBootstrapConfig.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/container/src/main/java/com/flipkart/gap/usl/container/config/USLBootstrapConfig.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/container/src/main/java/com/flipkart/gap/usl/container/config/USLBootstrapConfig.java?ref=fda0c8dd4bd5de9b1375bec8c83837d7f93536b3",
    "patch": "@@ -15,9 +15,4 @@\n @Getter\n @Setter\n public class USLBootstrapConfig extends Configuration {\n-    @JsonProperty(\"swagger\")\n-    public SwaggerBundleConfiguration swaggerBundleConfiguration;\n-    private ApplicationConfiguration coreConfig;\n-    private EventIngestionConfig eventIngestionConfig;\n-    private String healthCheckKey = \"default\";\n }\n\\ No newline at end of file"
  },
  {
    "sha": "bbf827fb86a89cce07b2840b06ccbb7dfcabcb35",
    "filename": "sample-container/config/local/container.yml",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/sample-container/config/local/container.yml",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/sample-container/config/local/container.yml",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/sample-container/config/local/container.yml?ref=fda0c8dd4bd5de9b1375bec8c83837d7f93536b3",
    "patch": "@@ -0,0 +1,122 @@\n+swagger:\n+  resourcePackage: com.flipkart.gap.usl.resources\n+  title: Sample API\n+  version: v1\n+  description: Sample service API\n+  contact: gap-devs@flipkart.com\n+  license: Apache 2.0\n+  licenseUrl: https://www.apache.org/licenses/LICENSE-2.0\n+eventIngestionConfig:\n+  kafkaTopicName: local-usl\n+  kafkaIngestionConfig:\n+    brokerConnectionString: localhost:9092\n+    zkConnectionString: localhost:2181\n+coreConfig:\n+  applicationResilienceConfig:\n+    dimensionReadConfig:\n+      bulkheadConfig:\n+        maxConcurrentCalls: 100\n+        maxWaitDuration: 500\n+      circuitBreakerConfig:\n+        waitDurationInOpenState: 10000\n+        minimumNumberOfCalls: 100\n+        slidingWindowSize: 100\n+        permittedNumberOfCallsInHalfOpenState: 100\n+        slowCallDurationThreshold: 300\n+        slowCallRateThreshold: 100\n+        failureRateThreshold: 50\n+      rateLimiterConfig:\n+        limitRefreshPeriod: 1000\n+        limitForPeriod: 12000\n+        timeoutDuration: 500\n+      timeLimiterConfig:\n+        timeoutDuration: 500\n+    eventIngestionConfig:\n+      bulkheadConfig:\n+        maxConcurrentCalls: 100\n+        maxWaitDuration: 500\n+      circuitBreakerConfig:\n+        waitDurationInOpenState: 10000\n+        minimumNumberOfCalls: 100\n+        slidingWindowSize: 100\n+        permittedNumberOfCallsInHalfOpenState: 100\n+        slowCallDurationThreshold: 300\n+        slowCallRateThreshold: 100\n+        failureRateThreshold: 50\n+      rateLimiterConfig:\n+        limitRefreshPeriod: 1000\n+        limitForPeriod: 1000\n+        timeoutDuration: 200\n+      timeLimiterConfig:\n+        timeoutDuration: 500\n+    dimensionBulkReadConfig:\n+      bulkheadConfig:\n+        maxConcurrentCalls: 100\n+        maxWaitDuration: 500\n+      circuitBreakerConfig:\n+        waitDurationInOpenState: 10000\n+        minimumNumberOfCalls: 100\n+        slidingWindowSize: 100\n+        permittedNumberOfCallsInHalfOpenState: 100\n+        slowCallDurationThreshold: 500\n+        slowCallRateThreshold: 100\n+        failureRateThreshold: 50\n+      rateLimiterConfig:\n+        limitRefreshPeriod: 1000\n+        limitForPeriod: 10000\n+        timeoutDuration: 500\n+      timeLimiterConfig:\n+        timeoutDuration: 60000\n+    dimensionBulkSaveConfig:\n+      bulkheadConfig:\n+        maxConcurrentCalls: 100\n+        maxWaitDuration: 500\n+      circuitBreakerConfig:\n+        waitDurationInOpenState: 10000\n+        minimumNumberOfCalls: 100\n+        slidingWindowSize: 100\n+        permittedNumberOfCallsInHalfOpenState: 100\n+        slowCallDurationThreshold: 500\n+        slowCallRateThreshold: 100\n+        failureRateThreshold: 50\n+      rateLimiterConfig:\n+        limitRefreshPeriod: 1000\n+        limitForPeriod: 1000\n+        timeoutDuration: 500\n+      timeLimiterConfig:\n+        timeoutDuration: 60000\n+    dimensionDeleteConfig:\n+      bulkheadConfig:\n+        maxConcurrentCalls: 100\n+        maxWaitDuration: 500\n+      circuitBreakerConfig:\n+        waitDurationInOpenState: 10000\n+        minimumNumberOfCalls: 100\n+        slidingWindowSize: 100\n+        permittedNumberOfCallsInHalfOpenState: 100\n+        slowCallDurationThreshold: 500\n+        slowCallRateThreshold: 100\n+        failureRateThreshold: 50\n+      rateLimiterConfig:\n+        limitRefreshPeriod: 1000\n+        limitForPeriod: 10\n+        timeoutDuration: 500\n+      timeLimiterConfig:\n+        timeoutDuration: 1000\n+  eventProcessorConfig:\n+    sparkMasterWithPort: local[2]\n+    topicName: local-usl\n+    kafkaBrokerConnection: localhost:9092\n+    zkHosts: localhost\n+    zkPort: 2181\n+  dimensionPackage: com.flipkart.usl.processor.sample\n+  mongoConfig:\n+    connectionString: localhost:27017\n+    dbName: local-usl\n+  hbaseConfig:\n+    tableName: local-usl\n+    zookeeperQuorum: localhost:2181\n+    parentNode: /hbase\n+  cacheConfig:\n+    ttlInMinutes: 30\n+healthCheckKey: blah"
  },
  {
    "sha": "e15c9b88184869719e83d99818b351ac26c184d5",
    "filename": "sample-container/config/local/server.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 123,
    "changes": 124,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/sample-container/config/local/server.yml",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/sample-container/config/local/server.yml",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/sample-container/config/local/server.yml?ref=fda0c8dd4bd5de9b1375bec8c83837d7f93536b3",
    "patch": "@@ -20,126 +20,4 @@ server:\n       - type: console\n         threshold: ALL\n         timeZone: UTC\n-        target: stdout\n-swagger:\n-  resourcePackage: com.flipkart.gap.usl.resources\n-  title: Sample API\n-  version: v1\n-  description: Sample service API\n-  contact: gap-devs@flipkart.com\n-  license: Apache 2.0\n-  licenseUrl: https://www.apache.org/licenses/LICENSE-2.0\n-eventIngestionConfig:\n-  kafkaTopicName: local-usl\n-  kafkaIngestionConfig:\n-    brokerConnectionString: localhost:9092\n-    zkConnectionString: localhost:2181\n-coreConfig:\n-  applicationResilienceConfig:\n-    dimensionReadConfig:\n-      bulkheadConfig:\n-        maxConcurrentCalls: 100\n-        maxWaitDuration: 500\n-      circuitBreakerConfig:\n-        waitDurationInOpenState: 10000\n-        minimumNumberOfCalls: 100\n-        slidingWindowSize: 100\n-        permittedNumberOfCallsInHalfOpenState: 100\n-        slowCallDurationThreshold: 300\n-        slowCallRateThreshold: 100\n-        failureRateThreshold: 50\n-      rateLimiterConfig:\n-        limitRefreshPeriod: 1000\n-        limitForPeriod: 12000\n-        timeoutDuration: 500\n-      timeLimiterConfig:\n-        timeoutDuration: 500\n-    eventIngestionConfig:\n-      bulkheadConfig:\n-        maxConcurrentCalls: 100\n-        maxWaitDuration: 500\n-      circuitBreakerConfig:\n-        waitDurationInOpenState: 10000\n-        minimumNumberOfCalls: 100\n-        slidingWindowSize: 100\n-        permittedNumberOfCallsInHalfOpenState: 100\n-        slowCallDurationThreshold: 300\n-        slowCallRateThreshold: 100\n-        failureRateThreshold: 50\n-      rateLimiterConfig:\n-        limitRefreshPeriod: 1000\n-        limitForPeriod: 1000\n-        timeoutDuration: 200\n-      timeLimiterConfig:\n-        timeoutDuration: 500\n-    dimensionBulkReadConfig:\n-      bulkheadConfig:\n-        maxConcurrentCalls: 100\n-        maxWaitDuration: 500\n-      circuitBreakerConfig:\n-        waitDurationInOpenState: 10000\n-        minimumNumberOfCalls: 100\n-        slidingWindowSize: 100\n-        permittedNumberOfCallsInHalfOpenState: 100\n-        slowCallDurationThreshold: 500\n-        slowCallRateThreshold: 100\n-        failureRateThreshold: 50\n-      rateLimiterConfig:\n-        limitRefreshPeriod: 1000\n-        limitForPeriod: 10000\n-        timeoutDuration: 500\n-      timeLimiterConfig:\n-        timeoutDuration: 60000\n-    dimensionBulkSaveConfig:\n-      bulkheadConfig:\n-        maxConcurrentCalls: 100\n-        maxWaitDuration: 500\n-      circuitBreakerConfig:\n-        waitDurationInOpenState: 10000\n-        minimumNumberOfCalls: 100\n-        slidingWindowSize: 100\n-        permittedNumberOfCallsInHalfOpenState: 100\n-        slowCallDurationThreshold: 500\n-        slowCallRateThreshold: 100\n-        failureRateThreshold: 50\n-      rateLimiterConfig:\n-        limitRefreshPeriod: 1000\n-        limitForPeriod: 1000\n-        timeoutDuration: 500\n-      timeLimiterConfig:\n-        timeoutDuration: 60000\n-    dimensionDeleteConfig:\n-      bulkheadConfig:\n-        maxConcurrentCalls: 100\n-        maxWaitDuration: 500\n-      circuitBreakerConfig:\n-        waitDurationInOpenState: 10000\n-        minimumNumberOfCalls: 100\n-        slidingWindowSize: 100\n-        permittedNumberOfCallsInHalfOpenState: 100\n-        slowCallDurationThreshold: 500\n-        slowCallRateThreshold: 100\n-        failureRateThreshold: 50\n-      rateLimiterConfig:\n-        limitRefreshPeriod: 1000\n-        limitForPeriod: 10\n-        timeoutDuration: 500\n-      timeLimiterConfig:\n-        timeoutDuration: 1000\n-  eventProcessorConfig:\n-    sparkMasterWithPort: local[2]\n-    topicName: local-usl\n-    kafkaBrokerConnection: localhost:9092\n-    zkHosts: localhost\n-    zkPort: 2181\n-  dimensionPackage: com.flipkart.usl.processor.sample\n-  mongoConfig:\n-    connectionString: localhost:27017\n-    dbName: local-usl\n-  hbaseConfig:\n-    tableName: local-usl\n-    zookeeperQuorum: localhost:2181\n-    parentNode: /hbase\n-  cacheConfig:\n-    ttlInMinutes: 30\n-healthCheckKey: blah\n+        target: stdout\n\\ No newline at end of file"
  },
  {
    "sha": "e4735f1eaf068445e58a825a693266b64b3830ab",
    "filename": "sample-container/src/main/java/com/flipkart/usl/sample/container/SampleApp.java",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/amarjeetsingh12/usl/blob/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/sample-container/src/main/java/com/flipkart/usl/sample/container/SampleApp.java",
    "raw_url": "https://github.com/amarjeetsingh12/usl/raw/fda0c8dd4bd5de9b1375bec8c83837d7f93536b3/sample-container/src/main/java/com/flipkart/usl/sample/container/SampleApp.java",
    "contents_url": "https://api.github.com/repos/amarjeetsingh12/usl/contents/sample-container/src/main/java/com/flipkart/usl/sample/container/SampleApp.java?ref=fda0c8dd4bd5de9b1375bec8c83837d7f93536b3",
    "patch": "@@ -1,10 +1,19 @@\n package com.flipkart.usl.sample.container;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import com.flipkart.gap.usl.container.USLContainer;\n+import com.flipkart.gap.usl.container.config.ContainerConfig;\n+\n+import java.io.File;\n+import java.util.Arrays;\n \n public class SampleApp {\n+    private static ObjectMapper yamlMapper = new ObjectMapper(new YAMLFactory());\n+\n     public static void main(String[] args) throws Exception {\n-        USLContainer uslContainer = new USLContainer();\n-        uslContainer.run(args);\n+        ContainerConfig containerConfig = yamlMapper.readValue(new File(args[2]), ContainerConfig.class);\n+        USLContainer uslContainer = new USLContainer(containerConfig);\n+        uslContainer.run(Arrays.copyOfRange(args, 0, 2));\n     }\n }"
  }
]
