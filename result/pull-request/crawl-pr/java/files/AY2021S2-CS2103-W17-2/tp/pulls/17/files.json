[
  {
    "sha": "d6fd2b9003308e1a88e7ab5db259a6c730d6ce2e",
    "filename": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/logic/commands/EditCommand.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -24,6 +24,7 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -97,9 +98,10 @@ private static Person createEditedPerson(Person personToEdit, EditPersonDescript\n         Phone updatedPhone = editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());\n         Email updatedEmail = editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());\n         Address updatedAddress = editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());\n+        Remark updatedRemark = personToEdit.getRemark(); // edit command does not allow editing remarks\n         Set<Tag> updatedTags = editPersonDescriptor.getTags().orElse(personToEdit.getTags());\n \n-        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);\n+        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags);\n     }\n \n     @Override"
  },
  {
    "sha": "b19b35c74fda1182195bdc6b2f97ad5013c50a02",
    "filename": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/logic/commands/RemarkCommand.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -0,0 +1,93 @@\n+package seedu.address.logic.commands;\n+\n+import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n+import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.commands.exceptions.CommandException;\n+import seedu.address.model.Model;\n+import seedu.address.model.person.Person;\n+import seedu.address.model.person.Remark;\n+\n+/**\n+ * Changes the remark of an existing person in the address book.\n+ */\n+public class RemarkCommand extends Command {\n+\n+    public static final String COMMAND_WORD = \"remark\";\n+\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Edits the remark of the person identified \"\n+            + \"by the index number used in the last person listing. \"\n+            + \"Existing remark will be overwritten by the input.\\n\"\n+            + \"Parameters: INDEX (must be a positive integer) \"\n+            + PREFIX_REMARK + \"[REMARK]\\n\"\n+            + \"Example: \" + COMMAND_WORD + \" 1 \"\n+            + PREFIX_REMARK + \"Likes to swim.\";\n+\n+    public static final String MESSAGE_ARGUMENTS = \"Index: %1$d, Remark: %2$s\";\n+    public static final String MESSAGE_ADD_REMARK_SUCCESS = \"Added remark to Person: %1$s\";\n+    public static final String MESSAGE_DELETE_REMARK_SUCCESS = \"Removed remark from Person: %1$s\";\n+\n+    private final Index index;\n+    private final Remark remark;\n+\n+    /**\n+     * @param index of the person in the filtered person list to edit the remark\n+     * @param remark of the person to be updated to\n+     */\n+    public RemarkCommand(Index index, Remark remark) {\n+        requireAllNonNull(index, remark);\n+\n+        this.index = index;\n+        this.remark = remark;\n+    }\n+\n+    @Override\n+    public CommandResult execute(Model model) throws CommandException {\n+        List<Person> lastShownList = model.getFilteredPersonList();\n+\n+        if (index.getZeroBased() >= lastShownList.size()) {\n+            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+        }\n+\n+        Person personToEdit = lastShownList.get(index.getZeroBased());\n+        Person editedPerson = new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),\n+                personToEdit.getAddress(), remark, personToEdit.getTags());\n+\n+        model.setPerson(personToEdit, editedPerson);\n+        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n+\n+        return new CommandResult(generateSuccessMessage(editedPerson));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        // short circuit if same object\n+        if (other == this) {\n+            return true;\n+        }\n+\n+        // instanceof handles nulls\n+        if (!(other instanceof RemarkCommand)) {\n+            return false;\n+        }\n+\n+        // state check\n+        RemarkCommand e = (RemarkCommand) other;\n+        return index.equals(e.index)\n+                && remark.equals(e.remark);\n+    }\n+\n+    /**\n+     * Generates a command execution success message based on whether the remark is added to or removed from\n+     * {@code personToEdit}.\n+     */\n+    private String generateSuccessMessage(Person personToEdit) {\n+        String message = !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;\n+        return String.format(message, personToEdit);\n+    }\n+}"
  },
  {
    "sha": "c7d0f809928933c068a4889d10d708f6e956e4c7",
    "filename": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/logic/parser/AddCommandParser.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -17,6 +17,7 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -42,9 +43,10 @@ public AddCommand parse(String args) throws ParseException {\n         Phone phone = ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());\n         Email email = ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());\n         Address address = ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());\n+        Remark remark = new Remark(\"\"); // add command does not allow adding remarks straight away\n         Set<Tag> tagList = ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));\n \n-        Person person = new Person(name, phone, email, address, tagList);\n+        Person person = new Person(name, phone, email, address, remark, tagList);\n \n         return new AddCommand(person);\n     }"
  },
  {
    "sha": "b650f13a6b9b436ebac924958193b175c3fc0ad8",
    "filename": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/logic/parser/AddressBookParser.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -15,6 +15,7 @@\n import seedu.address.logic.commands.FindCommand;\n import seedu.address.logic.commands.HelpCommand;\n import seedu.address.logic.commands.ListCommand;\n+import seedu.address.logic.commands.RemarkCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n \n /**\n@@ -68,6 +69,9 @@ public Command parseCommand(String userInput) throws ParseException {\n         case HelpCommand.COMMAND_WORD:\n             return new HelpCommand();\n \n+        case RemarkCommand.COMMAND_WORD:\n+            return new RemarkCommandParser().parse(arguments);\n+\n         default:\n             throw new ParseException(MESSAGE_UNKNOWN_COMMAND);\n         }"
  },
  {
    "sha": "96be13b3772054877f32a657a7ffd8f9c85ad303",
    "filename": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/logic/parser/CliSyntax.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -11,5 +11,6 @@\n     public static final Prefix PREFIX_EMAIL = new Prefix(\"e/\");\n     public static final Prefix PREFIX_ADDRESS = new Prefix(\"a/\");\n     public static final Prefix PREFIX_TAG = new Prefix(\"t/\");\n+    public static final Prefix PREFIX_REMARK = new Prefix(\"r/\");\n \n }"
  },
  {
    "sha": "d4a8c8f0233578f9f209e5fc44478504db7a0a59",
    "filename": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -0,0 +1,37 @@\n+package seedu.address.logic.parser;\n+\n+import static java.util.Objects.requireNonNull;\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n+\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.commons.exceptions.IllegalValueException;\n+import seedu.address.logic.commands.RemarkCommand;\n+import seedu.address.logic.parser.exceptions.ParseException;\n+import seedu.address.model.person.Remark;\n+\n+/**\n+ * Parses input arguments and creates a new {@code RemarkCommand} object\n+ */\n+public class RemarkCommandParser implements Parser<RemarkCommand> {\n+    /**\n+     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}\n+     * and returns a {@code RemarkCommand} object for execution.\n+     * @throws ParseException if the user input does not conform the expected format\n+     */\n+    public RemarkCommand parse(String args) throws ParseException {\n+        requireNonNull(args);\n+        ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(args, PREFIX_REMARK);\n+\n+        Index index;\n+        try {\n+            index = ParserUtil.parseIndex(argMultimap.getPreamble());\n+        } catch (IllegalValueException ive) {\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);\n+        }\n+\n+        String remark = argMultimap.getValue(PREFIX_REMARK).orElse(\"\");\n+\n+        return new RemarkCommand(index, new Remark(remark));\n+    }\n+}"
  },
  {
    "sha": "ac583aa2be650d2c80e9dc3c0c93796756725bf3",
    "filename": "src/main/java/seedu/address/model/person/Person.java",
    "status": "modified",
    "additions": 18,
    "deletions": 14,
    "changes": 32,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/model/person/Person.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/model/person/Person.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/model/person/Person.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -22,17 +22,19 @@\n \n     // Data fields\n     private final Address address;\n+    private final Remark remark;\n     private final Set<Tag> tags = new HashSet<>();\n \n     /**\n      * Every field must be present and not null.\n      */\n-    public Person(Name name, Phone phone, Email email, Address address, Set<Tag> tags) {\n+    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set<Tag> tags) {\n         requireAllNonNull(name, phone, email, address, tags);\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n         this.address = address;\n+        this.remark = remark;\n         this.tags.addAll(tags);\n     }\n \n@@ -52,6 +54,10 @@ public Address getAddress() {\n         return address;\n     }\n \n+    public Remark getRemark() {\n+        return remark;\n+    }\n+\n     /**\n      * Returns an immutable tag set, which throws {@code UnsupportedOperationException}\n      * if modification is attempted.\n@@ -61,7 +67,7 @@ public Address getAddress() {\n     }\n \n     /**\n-     * Returns true if both persons have the same name.\n+     * Returns true if both persons of the same name have at least one other identity field that is the same.\n      * This defines a weaker notion of equality between two persons.\n      */\n     public boolean isSamePerson(Person otherPerson) {\n@@ -70,7 +76,8 @@ public boolean isSamePerson(Person otherPerson) {\n         }\n \n         return otherPerson != null\n-                && otherPerson.getName().equals(getName());\n+                && otherPerson.getName().equals(getName())\n+                && (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));\n     }\n \n     /**\n@@ -105,19 +112,16 @@ public int hashCode() {\n     public String toString() {\n         final StringBuilder builder = new StringBuilder();\n         builder.append(getName())\n-                .append(\"; Phone: \")\n+                .append(\" Phone: \")\n                 .append(getPhone())\n-                .append(\"; Email: \")\n+                .append(\" Email: \")\n                 .append(getEmail())\n-                .append(\"; Address: \")\n-                .append(getAddress());\n-\n-        Set<Tag> tags = getTags();\n-        if (!tags.isEmpty()) {\n-            builder.append(\"; Tags: \");\n-            tags.forEach(builder::append);\n-        }\n+                .append(\" Address: \")\n+                .append(getAddress())\n+                .append(\" Remark: \")\n+                .append(getRemark())\n+                .append(\" Tags: \");\n+        getTags().forEach(builder::append);\n         return builder.toString();\n     }\n-\n }"
  },
  {
    "sha": "9c5a9f736cab54c6969e24182601ddd57b4de4bb",
    "filename": "src/main/java/seedu/address/model/person/Remark.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/model/person/Remark.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/model/person/Remark.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/model/person/Remark.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -0,0 +1,41 @@\n+package seedu.address.model.person;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Represents a Person's remark in the address book.\n+ * Guarantees: immutable;\n+ */\n+public class Remark {\n+    public static final String VALIDATION_REGEX = \"[^\\\\s].*\";\n+\n+    public final String value;\n+\n+    /**\n+     * Constructs an {@code Remark}.\n+     *\n+     * @param remark A valid remark.\n+     */\n+    public Remark(String remark) {\n+        requireNonNull(remark);\n+        value = remark;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return value;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+                || (other instanceof Remark // instanceof handles nulls\n+                && value.equals(((Remark) other).value)); // state check\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return value.hashCode();\n+    }\n+\n+}"
  },
  {
    "sha": "a79f1cc05699b43ebb6fb5448e8bdd2e16e14092",
    "filename": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "status": "modified",
    "additions": 16,
    "deletions": 12,
    "changes": 28,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/model/util/SampleDataUtil.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -11,32 +11,36 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n  * Contains utility methods for populating {@code AddressBook} with sample data.\n  */\n public class SampleDataUtil {\n+\n+    public static final Remark EMPTY_REMARK = new Remark(\"\");\n+\n     public static Person[] getSamplePersons() {\n         return new Person[] {\n             new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),\n-                new Address(\"Blk 30 Geylang Street 29, #06-40\"),\n-                getTagSet(\"friends\")),\n+                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), EMPTY_REMARK,\n+                    getTagSet(\"friends\")),\n             new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),\n-                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),\n-                getTagSet(\"colleagues\", \"friends\")),\n+                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_REMARK,\n+                    getTagSet(\"colleagues\", \"friends\")),\n             new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),\n-                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),\n-                getTagSet(\"neighbours\")),\n+                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_REMARK,\n+                    getTagSet(\"neighbours\")),\n             new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),\n-                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),\n-                getTagSet(\"family\")),\n+                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_REMARK,\n+                    getTagSet(\"family\")),\n             new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),\n-                new Address(\"Blk 47 Tampines Street 20, #17-35\"),\n-                getTagSet(\"classmates\")),\n+                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_REMARK,\n+                    getTagSet(\"classmates\")),\n             new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),\n-                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),\n-                getTagSet(\"colleagues\"))\n+                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), EMPTY_REMARK,\n+                    getTagSet(\"colleagues\"))\n         };\n     }\n "
  },
  {
    "sha": "10ee7ceeba74f55920f4ed8cace3f67cd9f58ae6",
    "filename": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/storage/JsonAdaptedPerson.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -15,6 +15,7 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -35,8 +36,8 @@\n      */\n     @JsonCreator\n     public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,\n-            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,\n-            @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\n+                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,\n+                             @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n@@ -102,8 +103,9 @@ public Person toModelType() throws IllegalValueException {\n         }\n         final Address modelAddress = new Address(address);\n \n+        final Remark modelRemark = new Remark(\"\"); //TODO: Implement parsing and marshalling in the storage commit.\n+\n         final Set<Tag> modelTags = new HashSet<>(personTags);\n-        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);\n+        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags);\n     }\n-\n }"
  },
  {
    "sha": "7938d9141f5544165983092140b85adfd5a39565",
    "filename": "src/main/java/seedu/address/ui/PersonCard.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/ui/PersonCard.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/java/seedu/address/ui/PersonCard.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/java/seedu/address/ui/PersonCard.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -40,6 +40,8 @@\n     private Label email;\n     @FXML\n     private FlowPane tags;\n+    @FXML\n+    private Label remark;\n \n     /**\n      * Creates a {@code PersonCode} with the given {@code Person} and index to display.\n@@ -55,6 +57,8 @@ public PersonCard(Person person, int displayedIndex) {\n         person.getTags().stream()\n                 .sorted(Comparator.comparing(tag -> tag.tagName))\n                 .forEach(tag -> tags.getChildren().add(new Label(tag.tagName)));\n+\n+        remark.setText(person.getRemark().value);\n     }\n \n     @Override"
  },
  {
    "sha": "d1a7eb614f8352b847c07754be9b80cd299dd51e",
    "filename": "src/main/resources/view/PersonListCard.fxml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/resources/view/PersonListCard.fxml",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/main/resources/view/PersonListCard.fxml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/main/resources/view/PersonListCard.fxml?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -31,6 +31,7 @@\n       <Label fx:id=\"phone\" styleClass=\"cell_small_label\" text=\"\\$phone\" />\n       <Label fx:id=\"address\" styleClass=\"cell_small_label\" text=\"\\$address\" />\n       <Label fx:id=\"email\" styleClass=\"cell_small_label\" text=\"\\$email\" />\n+      <Label fx:id=\"remark\" styleClass=\"cell_small_label\" text=\"\\$remark\" />\n     </VBox>\n   </GridPane>\n </HBox>"
  },
  {
    "sha": "1e4d2d0473a7ee5cdc48682e4218fbf284d6b963",
    "filename": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/test/java/seedu/address/logic/commands/CommandTestUtil.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -36,6 +36,8 @@\n     public static final String VALID_ADDRESS_BOB = \"Block 123, Bobby Street 3\";\n     public static final String VALID_TAG_HUSBAND = \"husband\";\n     public static final String VALID_TAG_FRIEND = \"friend\";\n+    public static final String VALID_REMARK_AMY = \"Female\";\n+    public static final String VALID_REMARK_BOB = \"Male\";\n \n     public static final String NAME_DESC_AMY = \" \" + PREFIX_NAME + VALID_NAME_AMY;\n     public static final String NAME_DESC_BOB = \" \" + PREFIX_NAME + VALID_NAME_BOB;"
  },
  {
    "sha": "c94aedd74ab7c2c8fda6ab084ee037086973c03c",
    "filename": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -0,0 +1,135 @@\n+package seedu.address.logic.commands;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;\n+import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;\n+import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;\n+import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;\n+import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\n+import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;\n+import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.model.AddressBook;\n+import seedu.address.model.Model;\n+import seedu.address.model.ModelManager;\n+import seedu.address.model.UserPrefs;\n+import seedu.address.model.person.Person;\n+import seedu.address.model.person.Remark;\n+import seedu.address.testutil.PersonBuilder;\n+\n+/**\n+ * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand.\n+ */\n+public class RemarkCommandTest {\n+\n+    private static final String REMARK_STUB = \"Some remark\";\n+\n+    private Model model = new ModelManager(getTypicalAddressBook(), new UserPrefs());\n+\n+    @Test\n+    public void execute_addRemarkUnfilteredList_success() {\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n+        Person editedPerson = new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();\n+\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));\n+\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);\n+\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\n+        expectedModel.setPerson(firstPerson, editedPerson);\n+\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+    @Test\n+    public void execute_deleteRemarkUnfilteredList_success() {\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n+        Person editedPerson = new PersonBuilder(firstPerson).withRemark(\"\").build();\n+\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON,\n+                new Remark(editedPerson.getRemark().toString()));\n+\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);\n+\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\n+        expectedModel.setPerson(firstPerson, editedPerson);\n+\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+    @Test\n+    public void execute_filteredList_success() {\n+        showPersonAtIndex(model, INDEX_FIRST_PERSON);\n+\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n+        Person editedPerson = new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))\n+                .withRemark(REMARK_STUB).build();\n+\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));\n+\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);\n+\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\n+        expectedModel.setPerson(firstPerson, editedPerson);\n+\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+    @Test\n+    public void execute_invalidPersonIndexUnfilteredList_failure() {\n+        Index outOfBoundIndex = Index.fromOneBased(model.getFilteredPersonList().size() + 1);\n+        RemarkCommand remarkCommand = new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));\n+\n+        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+    }\n+\n+    /**\n+     * Edit filtered list where index is larger than size of filtered list,\n+     * but smaller than size of address book\n+     */\n+    @Test\n+    public void execute_invalidPersonIndexFilteredList_failure() {\n+        showPersonAtIndex(model, INDEX_FIRST_PERSON);\n+        Index outOfBoundIndex = INDEX_SECOND_PERSON;\n+        // ensures that outOfBoundIndex is still in bounds of address book list\n+        assertTrue(outOfBoundIndex.getZeroBased() < model.getAddressBook().getPersonList().size());\n+\n+        RemarkCommand remarkCommand = new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));\n+\n+        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+    }\n+\n+    @Test\n+    public void equals() {\n+        final RemarkCommand standardCommand = new RemarkCommand(INDEX_FIRST_PERSON,\n+                new Remark(VALID_REMARK_AMY));\n+\n+        // same values -> returns true\n+        RemarkCommand commandWithSameValues = new RemarkCommand(INDEX_FIRST_PERSON,\n+                new Remark(VALID_REMARK_AMY));\n+        assertTrue(standardCommand.equals(commandWithSameValues));\n+\n+        // same object -> returns true\n+        assertTrue(standardCommand.equals(standardCommand));\n+\n+        // null -> returns false\n+        assertFalse(standardCommand.equals(null));\n+\n+        // different types -> returns false\n+        assertFalse(standardCommand.equals(new ClearCommand()));\n+\n+        // different index -> returns false\n+        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON,\n+                new Remark(VALID_REMARK_AMY))));\n+\n+        // different remark -> returns false\n+        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON,\n+                new Remark(VALID_REMARK_BOB))));\n+    }\n+}"
  },
  {
    "sha": "07d32f32e21ff7016c2478daad0cc9684777f11f",
    "filename": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -4,6 +4,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n import static seedu.address.testutil.Assert.assertThrows;\n import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\n \n@@ -22,9 +23,11 @@\n import seedu.address.logic.commands.FindCommand;\n import seedu.address.logic.commands.HelpCommand;\n import seedu.address.logic.commands.ListCommand;\n+import seedu.address.logic.commands.RemarkCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n import seedu.address.model.person.NameContainsKeywordsPredicate;\n import seedu.address.model.person.Person;\n+import seedu.address.model.person.Remark;\n import seedu.address.testutil.EditPersonDescriptorBuilder;\n import seedu.address.testutil.PersonBuilder;\n import seedu.address.testutil.PersonUtil;\n@@ -88,10 +91,18 @@ public void parseCommand_list() throws Exception {\n         assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);\n     }\n \n+    @Test\n+    public void parseCommand_remark() throws Exception {\n+        final Remark remark = new Remark(\"Some remark.\");\n+        RemarkCommand command = (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \"\n+                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark.value);\n+        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);\n+    }\n+\n     @Test\n     public void parseCommand_unrecognisedInput_throwsParseException() {\n-        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()\n-            -> parser.parseCommand(\"\"));\n+        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,\n+                HelpCommand.MESSAGE_USAGE), () -> parser.parseCommand(\"\"));\n     }\n \n     @Test"
  },
  {
    "sha": "8f0795fc6c7a76fa07889fd9eb841af62506f40a",
    "filename": "src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -0,0 +1,44 @@\n+package seedu.address.logic.parser;\n+\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n+import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;\n+import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;\n+import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.commands.RemarkCommand;\n+import seedu.address.model.person.Remark;\n+\n+public class RemarkCommandParserTest {\n+    private RemarkCommandParser parser = new RemarkCommandParser();\n+    private final String nonEmptyRemark = \"Some remark.\";\n+\n+    @Test\n+    public void parse_indexSpecified_success() {\n+        // have remark\n+        Index targetIndex = INDEX_FIRST_PERSON;\n+        String userInput = targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;\n+        RemarkCommand expectedCommand = new RemarkCommand(INDEX_FIRST_PERSON, new Remark(nonEmptyRemark));\n+        assertParseSuccess(parser, userInput, expectedCommand);\n+\n+        // no remark\n+        userInput = targetIndex.getOneBased() + \" \" + PREFIX_REMARK;\n+        expectedCommand = new RemarkCommand(INDEX_FIRST_PERSON, new Remark(\"\"));\n+        assertParseSuccess(parser, userInput, expectedCommand);\n+    }\n+\n+    @Test\n+    public void parse_missingCompulsoryField_failure() {\n+        String expectedMessage = String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);\n+\n+        // no parameters\n+        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);\n+\n+        // no index\n+        assertParseFailure(parser, RemarkCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);\n+    }\n+}\n+"
  },
  {
    "sha": "28a6e28ce2df145312f98ff8a6cc9011ba2b7c11",
    "filename": "src/test/java/seedu/address/model/person/PersonTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/model/person/PersonTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/model/person/PersonTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/test/java/seedu/address/model/person/PersonTest.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -31,9 +31,10 @@ public void isSamePerson() {\n         // null -> returns false\n         assertFalse(ALICE.isSamePerson(null));\n \n-        // same name, all other attributes different -> returns true\n-        Person editedAlice = new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)\n-                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();\n+        // same name, all other non essential attributes different -> returns true\n+        Person editedAlice = new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)\n+                .withTags(VALID_TAG_HUSBAND).build();\n+\n         assertTrue(ALICE.isSamePerson(editedAlice));\n \n         // different name, all other attributes same -> returns false"
  },
  {
    "sha": "34117c68ddf605146a798237bc2c3cefea6e5060",
    "filename": "src/test/java/seedu/address/model/person/RemarkTest.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/model/person/RemarkTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/model/person/RemarkTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/test/java/seedu/address/model/person/RemarkTest.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -0,0 +1,31 @@\n+package seedu.address.model.person;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class RemarkTest {\n+\n+    @Test\n+    public void equals() {\n+        Remark remark = new Remark(\"Hello\");\n+\n+        // same object -> returns true\n+        assertTrue(remark.equals(remark));\n+\n+        // same values -> returns true\n+        Remark remarkCopy = new Remark(remark.value);\n+        assertTrue(remark.equals(remarkCopy));\n+\n+        // different types -> returns false\n+        assertFalse(remark.equals(1));\n+\n+        // null -> returns false\n+        assertFalse(remark.equals(null));\n+\n+        // different remark -> returns false\n+        Remark differentRemark = new Remark(\"Bye\");\n+        assertFalse(remark.equals(differentRemark));\n+    }\n+}"
  },
  {
    "sha": "ddb3286af9c78d83283d3fad0b3b86b9a98a4f98",
    "filename": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "status": "modified",
    "additions": 18,
    "deletions": 5,
    "changes": 23,
    "blob_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/blob/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/testutil/PersonBuilder.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W17-2/tp/raw/60d4a55770a470902cf46ebec24f01fc08b37be1/src/test/java/seedu/address/testutil/PersonBuilder.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W17-2/tp/contents/src/test/java/seedu/address/testutil/PersonBuilder.java?ref=60d4a55770a470902cf46ebec24f01fc08b37be1",
    "patch": "@@ -8,6 +8,7 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n import seedu.address.model.util.SampleDataUtil;\n \n@@ -16,25 +17,28 @@\n  */\n public class PersonBuilder {\n \n-    public static final String DEFAULT_NAME = \"Amy Bee\";\n+    public static final String DEFAULT_NAME = \"Alice Pauline\";\n     public static final String DEFAULT_PHONE = \"85355255\";\n-    public static final String DEFAULT_EMAIL = \"amy@gmail.com\";\n+    public static final String DEFAULT_EMAIL = \"alice@gmail.com\";\n     public static final String DEFAULT_ADDRESS = \"123, Jurong West Ave 6, #08-111\";\n+    public static final String DEFAULT_REMARK = \"\";\n \n     private Name name;\n     private Phone phone;\n     private Email email;\n     private Address address;\n+    private Remark remark;\n     private Set<Tag> tags;\n \n     /**\n-     * Creates a {@code PersonBuilder} with the default details.\n+     * Helper class to recreate a copy of another Person instance.\n      */\n     public PersonBuilder() {\n         name = new Name(DEFAULT_NAME);\n         phone = new Phone(DEFAULT_PHONE);\n         email = new Email(DEFAULT_EMAIL);\n         address = new Address(DEFAULT_ADDRESS);\n+        remark = new Remark(DEFAULT_REMARK);\n         tags = new HashSet<>();\n     }\n \n@@ -46,6 +50,7 @@ public PersonBuilder(Person personToCopy) {\n         phone = personToCopy.getPhone();\n         email = personToCopy.getEmail();\n         address = personToCopy.getAddress();\n+        remark = personToCopy.getRemark();\n         tags = new HashSet<>(personToCopy.getTags());\n     }\n \n@@ -89,8 +94,16 @@ public PersonBuilder withEmail(String email) {\n         return this;\n     }\n \n-    public Person build() {\n-        return new Person(name, phone, email, address, tags);\n+    /**\n+     * Sets the {@code Remark} of the {@code Person} that we are building.\n+     */\n+    public PersonBuilder withRemark(String remark) {\n+        this.remark = new Remark(remark);\n+        return this;\n     }\n \n+\n+    public Person build() {\n+        return new Person(name, phone, email, address, remark, tags);\n+    }\n }"
  }
]
