[
  {
    "sha": "637699ecb1fc539ef64cccfdbaca7e0a43853275",
    "filename": "backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/client/UserClient.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/client/UserClient.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/client/UserClient.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/client/UserClient.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -24,9 +24,6 @@\n     @PostMapping(\"/api/user/saveCourseCreation\")\n     void saveCourseCreation(@RequestBody Long courseId);\n \n-    @PostMapping(\"/api/user/saveCourseAssign\")\n-    void saveCourseAssign(@RequestBody Long courseId);\n-\n     @GetMapping(\"/api/user/student/{email}/\")\n     Student getStudentByEmail(@PathVariable(\"email\") String studentEmail);\n "
  },
  {
    "sha": "8adbc2c7fa6161e09178ce83128b7c5b1f2e9682",
    "filename": "backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/controller/CourseController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/controller/CourseController.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/controller/CourseController.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/controller/CourseController.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -6,7 +6,6 @@\n import hu.me.iit.malus.thesis.course.controller.dto.CourseOverviewDto;\n import hu.me.iit.malus.thesis.course.model.Course;\n import hu.me.iit.malus.thesis.course.service.CourseService;\n-import hu.me.iit.malus.thesis.course.service.exception.InvitationNotFoundException;\n import lombok.RequiredArgsConstructor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -16,7 +15,6 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotEmpty;\n import java.security.Principal;\n-import java.util.List;\n import java.util.Set;\n \n /**\n@@ -52,21 +50,4 @@ public Course get(@PathVariable @Min(1) Long courseId, Principal principal) {\n     public Set<CourseOverviewDto> getAll(Principal principal) {\n         return DtoConverter.CourseToCourseOverviewSet(service.getAll(principal.getName()));\n     }\n-\n-    @PostMapping(\"/invite/{courseId}/{studentId}\")\n-    public void invite(@PathVariable @Min(1) Long courseId, @PathVariable @Min(1) String studentId) {\n-        service.invite(courseId, studentId);\n-    }\n-\n-    @PostMapping(\"/invite/{courseId}\")\n-    public void invite(@PathVariable @Min(1) Long courseId, @RequestBody List<String> studentIds) {\n-        service.invite(courseId, studentIds);\n-    }\n-\n-    @PostMapping(\"/acceptInvitation/{invitationUuid}\")\n-    @PreAuthorize(\"hasRole('ROLE_Student')\")\n-    public void acceptInvite(@PathVariable @NotEmpty String invitationUuid) throws InvitationNotFoundException {\n-        service.acceptInvite(invitationUuid);\n-    }\n-\n }"
  },
  {
    "sha": "9d23631d5fc64914edafc13feab35d9a82398357",
    "filename": "backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/model/Invitation.java",
    "status": "removed",
    "additions": 0,
    "deletions": 61,
    "changes": 61,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/model/Invitation.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/model/Invitation.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/model/Invitation.java?ref=d1e53902545b190b39dd4a579aa82bf5eab6c4f6",
    "patch": "@@ -1,61 +0,0 @@\n-package hu.me.iit.malus.thesis.course.model;\n-\n-import com.google.common.base.Objects;\n-import lombok.*;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import java.sql.Timestamp;\n-import java.util.Calendar;\n-import java.util.Date;\n-\n-/**\n- * Data model for invitation object\n- *\n- * @author Attila Sz≈ëke\n- */\n-@Entity\n-@Getter\n-@Setter\n-@NoArgsConstructor\n-@AllArgsConstructor\n-@ToString\n-public class Invitation {\n-\n-    @Id\n-    private String invitationUuid;\n-    private String studentId;\n-    private Long courseId;\n-    private Date expiryDate;\n-\n-    /**\n-     * Static factory method, which initializes expiry date of the token\n-     * @param studentId\n-     * @param courseId\n-     * @return new instance of Invitation with correctly set expiry date\n-     */\n-    public static Invitation of(String invitationUuid, String studentId, Long courseId) {\n-        Date expiryDate = calculateExpiryDate();\n-        return new Invitation(invitationUuid, studentId, courseId, expiryDate);\n-    }\n-\n-    private static Date calculateExpiryDate() {\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(new Timestamp(cal.getTime().getTime()));\n-        cal.add(Calendar.HOUR, 24);\n-        return new Date(cal.getTime().getTime());\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-        Invitation that = (Invitation) o;\n-        return Objects.equal(invitationUuid, that.invitationUuid);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hashCode(invitationUuid);\n-    }\n-}"
  },
  {
    "sha": "59b025978d5a34182145262f2d94cbbed2dc0828",
    "filename": "backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/repository/InvitationRepository.java",
    "status": "removed",
    "additions": 0,
    "deletions": 14,
    "changes": 14,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/repository/InvitationRepository.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/repository/InvitationRepository.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/repository/InvitationRepository.java?ref=d1e53902545b190b39dd4a579aa82bf5eab6c4f6",
    "patch": "@@ -1,14 +0,0 @@\n-package hu.me.iit.malus.thesis.course.repository;\n-\n-import hu.me.iit.malus.thesis.course.model.Invitation;\n-import org.springframework.data.jpa.repository.JpaRepository;\n-import org.springframework.data.jpa.repository.Modifying;\n-import org.springframework.data.jpa.repository.Query;\n-\n-import java.util.Date;\n-\n-public interface InvitationRepository extends JpaRepository<Invitation, String> {\n-    @Modifying\n-    @Query(\"DELETE FROM Invitation i WHERE i.expiryDate <= ?1\")\n-    void deleteAllExpiredSince(Date now);\n-}"
  },
  {
    "sha": "15248bac9eb3e8e5262521c7a05e294e5ec48d95",
    "filename": "backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/CourseService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 33,
    "changes": 36,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/CourseService.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/CourseService.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/CourseService.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -2,9 +2,7 @@\n \n import hu.me.iit.malus.thesis.course.model.Course;\n import hu.me.iit.malus.thesis.course.service.exception.CourseNotFoundException;\n-import hu.me.iit.malus.thesis.course.service.exception.InvitationNotFoundException;\n \n-import java.util.List;\n import java.util.Set;\n \n /**\n@@ -43,40 +41,12 @@\n      */\n     Course get(Long courseId, String userEmail) throws CourseNotFoundException;\n \n-    //TODO might need to use pagination\n-\n     /**\n-     * Lists all related courses, but only the most important infos\n-     * If you need all the data for a course, use get(courseId, userEmail) method\n+     * Lists all related courses, but only the most important infos.\n+     *\n      * @param userEmail currently authenticated user's email\n      * @return set of courses that relates to the user\n      */\n     Set<Course> getAll(String userEmail);\n-\n-    //TODO these will need a table which contains the uuid, a courseId and the studentId\n-\n-    /**\n-     * Sends an invitation email to a student, which if accepted assigns a student to a course\n-     *\n-     * @param studentEmail the assignees email\n-     * @param courseId  the courses id\n-     * @return the UUID of the invitation\n-     */\n-    void invite(Long courseId, String studentEmail);\n-\n-    /**\n-     * Sends multiple invitation e-mails to multiple students\n-     *\n-     * @param studentEmails the assignees email\n-     * @param courseId  the courses id\n-     * @return the UUID of the invitation\n-     */\n-    void invite(Long courseId, List<String> studentEmails);\n-\n-    /**\n-     * Based on the UUID assigns a student to a course\n-     *\n-     * @param inviteUUID the UUID by which the student is assigned\n-     */\n-    void acceptInvite(String inviteUUID) throws InvitationNotFoundException;\n+    \n }"
  },
  {
    "sha": "56d9d6bbc77f0d9765c2da48ac5958ad9acc6f37",
    "filename": "backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/cron/InvitationPurgeTask.java",
    "status": "removed",
    "additions": 0,
    "deletions": 31,
    "changes": 31,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/cron/InvitationPurgeTask.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/cron/InvitationPurgeTask.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/cron/InvitationPurgeTask.java?ref=d1e53902545b190b39dd4a579aa82bf5eab6c4f6",
    "patch": "@@ -1,31 +0,0 @@\n-package hu.me.iit.malus.thesis.course.service.cron;\n-\n-import hu.me.iit.malus.thesis.course.repository.InvitationRepository;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.annotation.Scheduled;\n-import org.springframework.stereotype.Service;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.time.Instant;\n-import java.util.Date;\n-\n-/**\n- * Cron job to delete expired invitations from database\n- * @author Javorek D√©nes\n- */\n-@Service\n-@Transactional\n-public class InvitationPurgeTask {\n-    private InvitationRepository invitationRepository;\n-\n-    @Autowired\n-    public InvitationPurgeTask(InvitationRepository invitationRepository) {\n-        this.invitationRepository = invitationRepository;\n-    }\n-\n-    @Scheduled(cron = \"${course.invitation.purge.cron}\")\n-    public void purgeExpiredTokens() {\n-        Date now = Date.from(Instant.now());\n-        invitationRepository.deleteAllExpiredSince(now);\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "ec21dbcd38b7277769600ad821b5da18b09328c7",
    "filename": "backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/impl/CourseServiceImpl.java",
    "status": "modified",
    "additions": 20,
    "deletions": 115,
    "changes": 135,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/impl/CourseServiceImpl.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/impl/CourseServiceImpl.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/impl/CourseServiceImpl.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -1,23 +1,22 @@\n package hu.me.iit.malus.thesis.course.service.impl;\n \n-import hu.me.iit.malus.thesis.course.client.*;\n-import hu.me.iit.malus.thesis.course.client.dto.Mail;\n+import hu.me.iit.malus.thesis.course.client.FeedbackClient;\n+import hu.me.iit.malus.thesis.course.client.FileManagementClient;\n+import hu.me.iit.malus.thesis.course.client.TaskClient;\n+import hu.me.iit.malus.thesis.course.client.UserClient;\n import hu.me.iit.malus.thesis.course.model.Course;\n-import hu.me.iit.malus.thesis.course.model.Invitation;\n import hu.me.iit.malus.thesis.course.model.exception.ForbiddenCourseEdit;\n import hu.me.iit.malus.thesis.course.repository.CourseRepository;\n-import hu.me.iit.malus.thesis.course.repository.InvitationRepository;\n import hu.me.iit.malus.thesis.course.service.CourseService;\n import hu.me.iit.malus.thesis.course.service.exception.CourseNotFoundException;\n-import hu.me.iit.malus.thesis.course.service.exception.InvitationNotFoundException;\n-import hu.me.iit.malus.thesis.course.service.impl.config.InvitationConfig;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-import org.springframework.transaction.annotation.Transactional;\n \n import java.time.Instant;\n-import java.util.*;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.Set;\n \n /**\n  * Default implementation for Course service.\n@@ -26,42 +25,14 @@\n  */\n @Service\n @Slf4j\n+@RequiredArgsConstructor\n public class CourseServiceImpl implements CourseService {\n \n-    private CourseRepository courseRepository;\n-    private InvitationRepository invitationRepository;\n-    private TaskClient taskClient;\n-    private FeedbackClient feedbackClient;\n-    private UserClient userClient;\n-    private FileManagementClient fileManagementClient;\n-    private EmailClient emailClient;\n-    private InvitationConfig invitationConfig;\n-\n-    /**\n-     * Instantiates a new Course service.\n-     * @param courseRepository the course repository\n-     * @param invitationRepository the invitation repository\n-     * @param taskClient the task client\n-     * @param feedbackClient the feedback client\n-     * @param userClient the user client\n-     * @param fileManagementClient the fileManagement client\n-     * @param emailClient the email client\n-     * @param invitationConfig configuration for sending invitations\n-     */\n-    @Autowired\n-    public CourseServiceImpl(CourseRepository courseRepository, InvitationRepository invitationRepository,\n-                             TaskClient taskClient, FeedbackClient feedbackClient, UserClient userClient,\n-                             FileManagementClient fileManagementClient, EmailClient emailClient,\n-                             InvitationConfig invitationConfig) {\n-        this.courseRepository = courseRepository;\n-        this.invitationRepository = invitationRepository;\n-        this.taskClient = taskClient;\n-        this.feedbackClient = feedbackClient;\n-        this.userClient = userClient;\n-        this.fileManagementClient = fileManagementClient;\n-        this.emailClient = emailClient;\n-        this.invitationConfig = invitationConfig;\n-    }\n+    private final CourseRepository courseRepository;\n+    private final TaskClient taskClient;\n+    private final FeedbackClient feedbackClient;\n+    private final UserClient userClient;\n+    private final FileManagementClient fileManagementClient;\n \n     /**\n      * {@inheritDoc}\n@@ -71,7 +42,7 @@ public Course create(Course course, String creatorsEmail) {\n         course.setCreationDate(Date.from(Instant.now()));\n         Course newCourse = courseRepository.save(course);\n         userClient.saveCourseCreation(newCourse.getId());\n-        log.info(\"Created course: {}\", newCourse.getId());\n+        log.debug(\"Created course: {}\", newCourse.getId());\n         return newCourse;\n     }\n \n@@ -83,10 +54,11 @@ public Course edit(Course course, String editorsEmail) {\n         Course oldCourse = courseRepository.getOne(course.getId());\n \n         if (!oldCourse.getCreator().getEmail().equals(editorsEmail)) {\n+            log.warn(\"Creator of this course {} is not the editor: {}!\", course, editorsEmail);\n             throw new ForbiddenCourseEdit();\n         }\n \n-        log.info(\"Modified course: {}\", course.getId());\n+        log.debug(\"Modified course: {}\", course.getId());\n         return courseRepository.save(course);\n     }\n \n@@ -100,6 +72,7 @@ public Course get(Long courseId, String userEmail) throws CourseNotFoundExceptio\n         if (optCourse.isPresent()) {\n             Course course = optCourse.get();\n             if (!userClient.isRelated(course.getId())) {\n+                log.warn(\"User {} is not realated to this course {}!\", userEmail, course);\n                 throw new CourseNotFoundException();\n             }\n \n@@ -109,7 +82,7 @@ public Course get(Long courseId, String userEmail) throws CourseNotFoundExceptio\n             course.setTasks(taskClient.getAllTasks(courseId));\n             course.setFiles(fileManagementClient.getAllFilesByTagId(hu.me.iit.malus.thesis.course.client.dto.Service.COURSE, courseId).getBody());\n             course.setComments(feedbackClient.getAllCourseComments(courseId));\n-            log.info(\"Course found: {}\", courseId);\n+            log.debug(\"Course found: {}\", courseId);\n             return course;\n         } else {\n             log.warn(\"No course found with this id: {}\", courseId);\n@@ -128,75 +101,7 @@ public Course get(Long courseId, String userEmail) throws CourseNotFoundExceptio\n         for (Course course : relatedCourses) {\n             course.setCreator(userClient.getTeacherByCreatedCourseId(course.getId()));\n         }\n-        log.info(\"Get all courses done, total number of courses is {}\", relatedCourses.size());\n+        log.debug(\"Get all courses done, total number of courses is {}\", relatedCourses.size());\n         return relatedCourses;\n     }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void invite(Long courseId, String studentEmail) {\n-        String invitationUuid = UUID.randomUUID().toString();\n-        sendInvitationEmail(invitationUuid, studentEmail);\n-        invitationRepository.save(Invitation.of(invitationUuid, studentEmail, courseId));\n-\n-        log.info(\"Invitation saved to database and e-mail sent - courseId: {}, studentEmail{}\", courseId, studentEmail);\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void invite(Long courseId, List<String> studentEmails) {\n-        List<Invitation> invitations = new ArrayList<>();\n-        for (String studentId : studentEmails) {\n-            String uuid = UUID.randomUUID().toString();\n-            invitations.add(Invitation.of(uuid, studentId, courseId));\n-            sendInvitationEmail(uuid, studentId);\n-        }\n-        invitationRepository.saveAll(invitations);\n-        log.info(\"Invitations saved to database and e-mails sent - courseId: {}, studentId{}\", courseId, studentEmails);\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Transactional\n-    @Override\n-    public void acceptInvite(String inviteUUID) throws InvitationNotFoundException {\n-        Optional<Invitation> opt = invitationRepository.findById(inviteUUID);\n-        if (opt.isPresent()) {\n-            Invitation invitation = opt.get();\n-            userClient.saveCourseAssign(invitation.getCourseId());\n-            log.info(\"Invitation accepted: {}\", invitation);\n-\n-            if (invitationRepository.existsById(invitation.getInvitationUuid())) {\n-                invitationRepository.delete(invitation);\n-            }\n-        } else {\n-            log.warn(\"Invitation not found: {}\", inviteUUID);\n-            throw new InvitationNotFoundException();\n-        }\n-    }\n-\n-    /**\n-     * Sends an invitation email to a student, which contains the correct link to accept the course invitation.\n-     * @param invitationUuid Id of the invitation\n-     * @param studentEmail Email address of the student\n-     */\n-    private void sendInvitationEmail(String invitationUuid, String studentEmail) {\n-        String subject = \"Registration Confirmation - \" + invitationConfig.getApplicationName();\n-        String confirmationUrl\n-                = invitationConfig.getApplicationURL() + \"/api/course/acceptInvitation/\" + invitationUuid;\n-\n-        // This can be externalized via MessageSource, and get messages for different locales\n-        String message = \"You can accept your course invitation via the following link: \";\n-\n-        Mail email = new Mail();\n-        email.setTo(Collections.singletonList(studentEmail));\n-        email.setSubject(subject);\n-        email.setText(message + confirmationUrl);\n-        emailClient.sendMail(email);\n-    }\n }"
  },
  {
    "sha": "0cbd248b5eacdd18f83f045c3eb0b32c19f25152",
    "filename": "backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/impl/config/InvitationConfig.java",
    "status": "removed",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/impl/config/InvitationConfig.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/impl/config/InvitationConfig.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/main/java/hu/me/iit/malus/thesis/course/service/impl/config/InvitationConfig.java?ref=d1e53902545b190b39dd4a579aa82bf5eab6c4f6",
    "patch": "@@ -1,15 +0,0 @@\n-package hu.me.iit.malus.thesis.course.service.impl.config;\n-\n-import lombok.Getter;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-@Getter\n-public class InvitationConfig {\n-    @Value(\"${application.name}\")\n-    private String applicationName;\n-\n-    @Value(\"${application.address}\")\n-    private String applicationURL;\n-}"
  },
  {
    "sha": "bf6b3beb1d59a0b4550ecde5333a494cae617706",
    "filename": "backend/course-service/src/test/java/hu/me/iit/malus/thesis/course/repository/InvitationRepositoryTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 67,
    "changes": 67,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/test/java/hu/me/iit/malus/thesis/course/repository/InvitationRepositoryTest.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/d1e53902545b190b39dd4a579aa82bf5eab6c4f6/backend/course-service/src/test/java/hu/me/iit/malus/thesis/course/repository/InvitationRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/test/java/hu/me/iit/malus/thesis/course/repository/InvitationRepositoryTest.java?ref=d1e53902545b190b39dd4a579aa82bf5eab6c4f6",
    "patch": "@@ -1,67 +0,0 @@\n-package hu.me.iit.malus.thesis.course.repository;\n-\n-import hu.me.iit.malus.thesis.course.model.Invitation;\n-import org.assertj.core.api.Assertions;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n-import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\n-import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit4.SpringRunner;\n-\n-import java.util.Optional;\n-import java.util.UUID;\n-\n-/**\n- * @author Javorek D√©nes\n- */\n-@RunWith(SpringRunner.class)\n-@DataJpaTest\n-@TestPropertySource(locations = \"classpath:application-test.properties\")\n-public class InvitationRepositoryTest {\n-    @Autowired\n-    private TestEntityManager entityManager;\n-\n-    @Autowired\n-    private InvitationRepository repository;\n-\n-    @Before\n-    public void reset() {\n-        entityManager.clear();\n-    }\n-\n-    @Test\n-    public void whenFindById_invitationFound_wrappedInOptional() {\n-        // Given\n-        String invitationId = UUID.randomUUID().toString();\n-\n-        Invitation invitation = Invitation.of(\n-                invitationId, \"invited@user.com\", 1L);\n-        entityManager.persistAndFlush(invitation);\n-\n-        // When\n-        Optional<Invitation> foundById = repository.findById(invitationId);\n-\n-        // Then\n-        Assertions.assertThat(foundById.isPresent()).isEqualTo(true);\n-        Assertions.assertThat(foundById.get()).isEqualTo(invitation);\n-    }\n-\n-    @Test\n-    public void whenSave_invitationExists() {\n-        // Given\n-        String invitationId = UUID.randomUUID().toString();\n-\n-        Invitation invitation = Invitation.of(\n-                invitationId, \"invited@student.com\", 2L);\n-        repository.save(invitation);\n-\n-        // When\n-        Invitation foundById = entityManager.find(Invitation.class, invitationId);\n-\n-        // Then\n-        Assertions.assertThat(foundById).isEqualTo(invitation);\n-    }\n-}"
  },
  {
    "sha": "1e191e2c7e0a41ea0604bef3c968633478919701",
    "filename": "backend/course-service/src/test/java/hu/me/iit/malus/thesis/course/service/impl/CourseServiceImplTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/test/java/hu/me/iit/malus/thesis/course/service/impl/CourseServiceImplTest.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/course-service/src/test/java/hu/me/iit/malus/thesis/course/service/impl/CourseServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/course-service/src/test/java/hu/me/iit/malus/thesis/course/service/impl/CourseServiceImplTest.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -7,7 +7,6 @@\n import hu.me.iit.malus.thesis.course.client.dto.Teacher;\n import hu.me.iit.malus.thesis.course.model.Course;\n import hu.me.iit.malus.thesis.course.repository.CourseRepository;\n-import hu.me.iit.malus.thesis.course.repository.InvitationRepository;\n import org.assertj.core.api.Assertions;\n import org.junit.After;\n import org.junit.Test;\n@@ -25,7 +24,6 @@\n @RunWith(SpringRunner.class)\n public class CourseServiceImplTest {\n     @Mock private CourseRepository courseRepository;\n-    @Mock private InvitationRepository invitationRepository;\n     @Mock private TaskClient taskClient;\n     @Mock private FeedbackClient feedbackClient;\n     @Mock private UserClient userClient;\n@@ -37,7 +35,6 @@\n     @After\n     public void reset() {\n         Mockito.reset(courseRepository);\n-        Mockito.reset(invitationRepository);\n         Mockito.reset(taskClient);\n         Mockito.reset(feedbackClient);\n         Mockito.reset(userClient);"
  },
  {
    "sha": "0ecd22a8a00c3a1aa9431b4d3edc7518165e86e0",
    "filename": "backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/controller/UserController.java",
    "status": "modified",
    "additions": 5,
    "deletions": 24,
    "changes": 29,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/controller/UserController.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/controller/UserController.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/controller/UserController.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -1,5 +1,6 @@\n package hu.me.iit.malus.thesis.user.controller;\n \n+import hu.me.iit.malus.thesis.user.controller.dto.CourseAssignmentDto;\n import hu.me.iit.malus.thesis.user.controller.dto.RegistrationRequest;\n import hu.me.iit.malus.thesis.user.controller.dto.RegistrationResponse;\n import hu.me.iit.malus.thesis.user.event.RegistrationCompletedEvent;\n@@ -60,36 +61,16 @@ public RegistrationResponse registerUserAccount(\n                 .body(\"Account activated. You can login now.\");\n     }\n \n-    @PostMapping(\"/saveStudent\")\n-    public void saveStudent(@RequestBody Student student) {\n-        service.saveStudent(student);\n-    }\n-\n-    @PostMapping(\"/saveStudents\")\n-    public void saveStudents(@RequestBody Set<Student> studentsToSave) {\n-        service.saveStudents(studentsToSave);\n-    }\n-\n-    @PostMapping(\"/saveTeacher\")\n-    public void saveTeacher(@RequestBody Teacher teacher) {\n-        service.saveTeacher(teacher);\n-    }\n-\n-    @PostMapping(\"/saveTeachers\")\n-    public void saveTeachers(@RequestBody Set<Teacher> teachersToSave) {\n-        service.saveTeachers(teachersToSave);\n-    }\n-\n     @PreAuthorize(\"hasRole('ROLE_Teacher')\")\n     @PostMapping(\"/saveCourseCreation\")\n     public void saveCourseCreation(Principal principal, @RequestBody Long courseId) {\n         service.saveCourseCreation(principal.getName(), courseId);\n     }\n \n-    @PreAuthorize(\"hasRole('ROLE_Student')\")\n-    @PostMapping(\"/saveCourseAssign\")\n-    public void saveCourseAssign(Principal principal, @RequestBody Long courseId) {\n-        service.saveCourseAssign(principal.getName(), courseId);\n+    @PreAuthorize(\"hasRole('ROLE_TEACHER')\")\n+    @PostMapping(\"/assignStudentsToCourse\")\n+    public void assignStudentsToCourse(@RequestBody CourseAssignmentDto dto) {\n+        service.assignStudentsToCourse(dto.getCourseId(), dto.getStudentEmails());\n     }\n \n     @GetMapping(\"/students\")"
  },
  {
    "sha": "1dcaa89dd1365b696d4e341ee83e1272702fb8d0",
    "filename": "backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/controller/dto/CourseAssignmentDto.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/controller/dto/CourseAssignmentDto.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/controller/dto/CourseAssignmentDto.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/controller/dto/CourseAssignmentDto.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -0,0 +1,16 @@\n+package hu.me.iit.malus.thesis.user.controller.dto;\n+\n+import lombok.*;\n+\n+import java.util.List;\n+\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+@ToString\n+@EqualsAndHashCode\n+public class CourseAssignmentDto {\n+\n+    private final long courseId;\n+    private final List<String> studentEmails;\n+}"
  },
  {
    "sha": "2e7f75a08cbbbf1ba7fb1ed4f3cee0684145543c",
    "filename": "backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/repository/UserBaseRepository.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/repository/UserBaseRepository.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/repository/UserBaseRepository.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/repository/UserBaseRepository.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -6,6 +6,7 @@\n import org.springframework.data.repository.NoRepositoryBean;\n \n import javax.persistence.LockModeType;\n+import java.util.List;\n import java.util.Optional;\n \n \n@@ -20,5 +21,8 @@\n     @Lock(LockModeType.PESSIMISTIC_WRITE)\n     Optional<T> findLockByEmail(String email);\n \n+    @Lock(LockModeType.PESSIMISTIC_WRITE)\n+    List<T> findAllLockByEmailIn(List<String> studentEmails);\n+\n     boolean existsByEmail(String email);\n }"
  },
  {
    "sha": "809e31a11ff468c7287bf10524a0ba2fa1251bc6",
    "filename": "backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/service/UserService.java",
    "status": "modified",
    "additions": 28,
    "deletions": 40,
    "changes": 68,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/service/UserService.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/service/UserService.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/service/UserService.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -6,16 +6,19 @@\n import hu.me.iit.malus.thesis.user.model.User;\n import hu.me.iit.malus.thesis.user.model.exception.EmailExistsException;\n \n+import java.util.List;\n import java.util.Set;\n \n /**\n  * Defines all the necessary operations for User service implementations\n+ *\n  * @author Javorek D√©nes\n  */\n public interface UserService {\n \n     /**\n      * Registers a new user into the database, throws exception if its email already registered\n+     *\n      * @param registrationRequest Contains all the required information for registration.\n      * @return The registered User\n      * @throws EmailExistsException If a user already exists with this email\n@@ -25,118 +28,102 @@ User registerNewUserAccount(RegistrationRequest registrationRequest)\n \n     /**\n      * Creates and saves a new activation token for a user\n-     * @param user Owner of the token\n-     * @param token\n+     *\n+     * @param user  Owner of the token\n+     * @param token the token\n      */\n     void createActivationToken(User user, String token);\n \n     /**\n      * Activates a user by its activation token\n+     *\n      * @param token Sent by the user, from the activation email\n-     * @return True if the token is valid and the user is activated successfully,\n-     * false otherwise.\n+     * @return True if the token is valid and the user is activated successfully, false otherwise.\n      */\n     boolean activateUser(String token);\n \n-    /**\n-     * Saves a single Student\n-     * @param student\n-     */\n-    @Deprecated\n-    void saveStudent(Student student);\n-\n-    /**\n-     * Saves a set of Students\n-     * @param studentsToAdd\n-     */\n-    @Deprecated\n-    void saveStudents(Set<Student> studentsToAdd);\n-\n-    /**\n-     * Saves a single Teacher\n-     * @param teacher\n-     */\n-    @Deprecated\n-    void saveTeacher(Teacher teacher);\n-\n-    /**\n-     * Saves a set of Teachers\n-     * @param teachersToAdd\n-     */\n-    @Deprecated\n-    void saveTeachers(Set<Teacher> teachersToAdd);\n-\n     /**\n      * Adds the id of the newly created course to a teacher object\n-     * @param teacherEmail\n-     * @param courseId\n+     *\n+     * @param teacherEmail the teacher email\n+     * @param courseId     the course id\n      */\n     void saveCourseCreation(String teacherEmail, Long courseId);\n \n     /**\n-     * Adds the id of a course to the assigned field of student object\n-     * @param studentEmail\n-     * @param courseId\n+     * Adds the id of a course to the assigned the students.\n+     *\n+     * @param courseId      the course id\n+     * @param studentEmails the student emails\n      */\n-    void saveCourseAssign(String studentEmail, Long courseId);\n+    void assignStudentsToCourse(Long courseId, List<String> studentEmails);\n \n     /**\n      * Returns all the saved Students\n+     *\n      * @return the students\n      */\n     Set<Student> getAllStudents();\n \n     /**\n      * Returns all the saved Teachers\n+     *\n      * @return the teachers\n      */\n     Set<Teacher> getAllTeachers();\n \n     /**\n      * Returns a single Student by its email (identifier)\n+     *\n      * @param studentEmail Student's email\n      * @return The corresponding Student\n      */\n     Student getStudentByEmail(String studentEmail);\n \n     /**\n      * Returns all the Students who has been assigned to a course\n+     *\n      * @param courseId Id of a course, that the Students assigned to\n      * @return The corresponding Students\n      */\n     Set<Student> getStudentsByAssignedCourseId(Long courseId);\n \n     /**\n      * Returns all the Students who is not already assigned to the given course\n+     *\n      * @param courseId Id of a course, that the Student NOT assigned to\n      * @return The corresponding Students\n      */\n     Set<Student> getStudentsByNotAssignedCourseId(Long courseId);\n \n     /**\n      * Returns a single Teacher by its email (identifier)\n+     *\n      * @param teacherEmail Teacher's email\n      * @return The corresponding Teacher\n      */\n     Teacher getTeacherByEmail(String teacherEmail);\n \n     /**\n      * Returns a single Teacher by a course id, that he owns\n+     *\n      * @param courseId Id of a course, that the Teacher has created before\n      * @return The corresponding Teacher\n      */\n     Teacher getTeacherByCreatedCourseId(Long courseId);\n \n     /**\n      * Return a complete User object, queried by its email (identifier)\n+     *\n      * @param email of the User\n-     * @return User\n+     * @return User any user by email\n      */\n     User getAnyUserByEmail(String email);\n \n     /**\n      * Returns all the course ids, that the user has connection to\n      * This connection can be \"created by\" or \"assigned to\"\n+     *\n      * @param userEmail Identifier of a user\n      * @return List of course ids, that is connected to the given user\n      */\n@@ -145,7 +132,8 @@ User registerNewUserAccount(RegistrationRequest registrationRequest)\n     /**\n      * Returns whether the user has any connection with the given course\n      * This connection can be \"created by\" or \"assigned to\"\n-     * @param email Email address of the user\n+     *\n+     * @param email    Email address of the user\n      * @param courseId Course id of the course where the connection should be tested\n      * @return True if the user is connected to the course, false otherwise\n      */"
  },
  {
    "sha": "079e7d47f78535462f9166439279288e0f7922c8",
    "filename": "backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/service/impl/UserServiceImpl.java",
    "status": "modified",
    "additions": 19,
    "deletions": 103,
    "changes": 122,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/service/impl/UserServiceImpl.java",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/service/impl/UserServiceImpl.java",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/backend/user-service/src/main/java/hu/me/iit/malus/thesis/user/service/impl/UserServiceImpl.java?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -1,15 +1,16 @@\n package hu.me.iit.malus.thesis.user.service.impl;\n \n+import hu.me.iit.malus.thesis.user.client.EmailClient;\n+import hu.me.iit.malus.thesis.user.client.dto.Mail;\n import hu.me.iit.malus.thesis.user.controller.dto.RegistrationRequest;\n import hu.me.iit.malus.thesis.user.model.*;\n import hu.me.iit.malus.thesis.user.model.exception.DatabaseOperationFailedException;\n import hu.me.iit.malus.thesis.user.model.exception.EmailExistsException;\n-import hu.me.iit.malus.thesis.user.model.exception.IllegalUserInsertionException;\n import hu.me.iit.malus.thesis.user.model.exception.UserNotFoundException;\n import hu.me.iit.malus.thesis.user.repository.*;\n import hu.me.iit.malus.thesis.user.service.UserService;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.DataAccessException;\n import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n import org.springframework.stereotype.Service;\n@@ -19,27 +20,20 @@\n \n /**\n  * Default implementation of UserService\n+ *\n  * @author Javorek D√©nes\n  */\n @Service\n @Slf4j\n+@RequiredArgsConstructor\n public class UserServiceImpl implements UserService {\n-    private StudentRepository studentRepository;\n-    private TeacherRepository teacherRepository;\n-    private AdminRepository adminRepository;\n-    private ActivationTokenRepository tokenRepository;\n-    private BCryptPasswordEncoder passwordEncoder;\n \n-    @Autowired\n-    public UserServiceImpl(StudentRepository studentRepository, TeacherRepository teacherRepository,\n-                           AdminRepository adminRepository, ActivationTokenRepository tokenRepository,\n-                           BCryptPasswordEncoder passwordEncoder) {\n-        this.studentRepository = studentRepository;\n-        this.teacherRepository = teacherRepository;\n-        this.adminRepository = adminRepository;\n-        this.tokenRepository = tokenRepository;\n-        this.passwordEncoder = passwordEncoder;\n-    }\n+    private final StudentRepository studentRepository;\n+    private final TeacherRepository teacherRepository;\n+    private final AdminRepository adminRepository;\n+    private final ActivationTokenRepository tokenRepository;\n+    private final BCryptPasswordEncoder passwordEncoder;\n+    private final EmailClient emailClient;\n \n     /**\n      * {@inheritDoc}\n@@ -135,85 +129,6 @@ public boolean activateUser(String token) {\n         return true;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void saveStudent(Student studentToSave) {\n-        Optional<Student> optionalStudent = studentRepository.findByEmail(studentToSave.getEmail());\n-        if (optionalStudent.isPresent()) {\n-            try {\n-                studentToSave.setPassword(optionalStudent.get().getPassword());\n-                studentRepository.save(studentToSave);\n-            } catch (DataAccessException e) {\n-                throw new DatabaseOperationFailedException(e);\n-            }\n-        } else {\n-            throw new IllegalUserInsertionException();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void saveStudents(Set<Student> studentsToSave) {\n-        for (Student student : studentsToSave) {\n-            Optional<Student> optionalStudent = studentRepository.findByEmail(student.getEmail());\n-\n-            if (!optionalStudent.isPresent()) {\n-                throw new IllegalUserInsertionException();\n-            }\n-            student.setPassword(optionalStudent.get().getPassword());\n-        }\n-\n-        try {\n-            studentRepository.saveAll(studentsToSave);\n-        } catch (DataAccessException e) {\n-            throw new DatabaseOperationFailedException(e);\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void saveTeacher(Teacher teacherToSave) {\n-        Optional<Teacher> optionalTeacher = teacherRepository.findByEmail(teacherToSave.getEmail());\n-\n-        if (optionalTeacher.isPresent()) {\n-            try {\n-                teacherToSave.setPassword(optionalTeacher.get().getPassword());\n-                teacherRepository.save(teacherToSave);\n-            } catch (DataAccessException e) {\n-                throw new DatabaseOperationFailedException(e);\n-            }\n-        } else {\n-            throw new IllegalUserInsertionException();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void saveTeachers(Set<Teacher> teachersToSave) {\n-        for (Teacher teacher : teachersToSave) {\n-            Optional<Teacher> optionalTeacher = teacherRepository.findByEmail(teacher.getEmail());\n-\n-            if (!optionalTeacher.isPresent()) {\n-                throw new IllegalUserInsertionException();\n-            }\n-            teacher.setPassword(optionalTeacher.get().getPassword());\n-        }\n-\n-        try {\n-            teacherRepository.saveAll(teachersToSave);\n-        } catch (DataAccessException e) {\n-            throw new DatabaseOperationFailedException(e);\n-        }\n-    }\n-\n     /**\n      * {@inheritDoc}\n      */\n@@ -240,19 +155,20 @@ public void saveCourseCreation(String teacherEmail, Long courseId) {\n      */\n     @Transactional\n     @Override\n-    public void saveCourseAssign(String studentEmail, Long courseId) {\n-        Optional<Student> optionalStudent = studentRepository.findLockByEmail(studentEmail);\n-        if (optionalStudent.isPresent()) {\n+    public void assignStudentsToCourse(Long courseId, List<String> studentEmails) {\n+        Mail mail = new Mail();\n+        mail.setTo(studentEmails);\n+        mail.setSubject(\"Course assignment notification\");\n+        mail.setText(\"You have been assigned to a course.\");\n+        studentRepository.findAllLockByEmailIn(studentEmails).forEach(student -> {\n             try {\n-                Student student = optionalStudent.get();\n                 student.getAssignedCourseIds().add(courseId);\n                 studentRepository.save(student);\n             } catch (DataAccessException e) {\n                 throw new DatabaseOperationFailedException(e);\n             }\n-        } else {\n-            throw new UserNotFoundException();\n-        }\n+        });\n+        emailClient.sendMail(mail);\n     }\n \n     /**"
  },
  {
    "sha": "f44b4ce8404118e92319f14669e23d128b0759c5",
    "filename": "frontend/src/api/course-api.js",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/me-kry-student-task-checker/stc-main/blob/01bf16f7128b316f4008c123a312b280dcbd2618/frontend/src/api/course-api.js",
    "raw_url": "https://github.com/me-kry-student-task-checker/stc-main/raw/01bf16f7128b316f4008c123a312b280dcbd2618/frontend/src/api/course-api.js",
    "contents_url": "https://api.github.com/repos/me-kry-student-task-checker/stc-main/contents/frontend/src/api/course-api.js?ref=01bf16f7128b316f4008c123a312b280dcbd2618",
    "patch": "@@ -11,6 +11,6 @@ export default {\n \t\treturn axios.get('/api/course/get/' + id);\n \t},\n \tinviteStudents(courseId, students) {\n-\t\treturn axios.post('/api/course/invite/' + courseId, students);\n+\t\treturn axios.post('/api/user/assignStudentsToCourse', {courseId: courseId, studentEmails: students});\n \t}\n };"
  }
]
