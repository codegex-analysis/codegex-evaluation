[
  {
    "sha": "50af149c9bdfa5e5aeca798b35477f6dff30d95c",
    "filename": "DataStore/Dockerfile",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStore/Dockerfile",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStore/Dockerfile",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStore/Dockerfile?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,10 @@\n+FROM mongo\n+\n+# Define mountable directories.\n+VOLUME [\"/data/db\"]\n+\n+# Define working directory.\n+WORKDIR /data\n+\n+# Define default command.\n+CMD [\"mongod\"]"
  },
  {
    "sha": "23d814460e8c6c3ca7894d48916c2a0545330453",
    "filename": "DataStoreService/pom.xml",
    "status": "modified",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/pom.xml",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/pom.xml",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/pom.xml?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -7,10 +7,69 @@\n     <groupId>dev.midas</groupId>\n     <artifactId>DataStoreService</artifactId>\n     <version>1.0-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n \n     <properties>\n         <maven.compiler.source>11</maven.compiler.source>\n         <maven.compiler.target>11</maven.compiler.target>\n     </properties>\n \n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.4.2</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-mongodb</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+            <version>1.7.30</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+            <version>21.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <version>7.3.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.dataformat</groupId>\n+            <artifactId>jackson-dataformat-yaml</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.knowm.xchange</groupId>\n+            <artifactId>xchange-core</artifactId>\n+            <version>5.0.4</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.knowm.xchange</groupId>\n+            <artifactId>xchange-kraken</artifactId>\n+            <version>5.0.4</version>\n+            <scope>compile</scope>\n+        </dependency>\n+    </dependencies>\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "004b6c26b0af531efd73ede75bc453cb66f0fe34",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/DSSApp.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/DSSApp.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/DSSApp.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/DSSApp.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,23 @@\n+package dev.midas.dss;\n+\n+import dev.midas.dss.core.StoreEngine;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class DSSApp implements CommandLineRunner {\n+\n+    @Autowired\n+    private StoreEngine engine;\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(DSSApp.class, args);\n+    }\n+\n+    @Override\n+    public void run(String... args) {\n+        engine.startDefaultConfigs();\n+    }\n+}"
  },
  {
    "sha": "415af9517a4608b5bb3e0dcb364be45c1af2fa4b",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/Main.java",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/a0d20b6584709c9eef0e76a712756bf3d74092cb/DataStoreService/src/main/java/dev/midas/dss/Main.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/a0d20b6584709c9eef0e76a712756bf3d74092cb/DataStoreService/src/main/java/dev/midas/dss/Main.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/Main.java?ref=a0d20b6584709c9eef0e76a712756bf3d74092cb",
    "patch": "@@ -1,8 +0,0 @@\n-package dev.midas.dss;\n-\n-public class Main {\n-\n-    public static void main(String[] args) {\n-        System.out.println(\"Hello DSS\");\n-    }\n-}"
  },
  {
    "sha": "5a5e1a3fbcd46b851bf65a3f69bbdea91e1adbd4",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/config/ConfigManager.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/config/ConfigManager.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/config/ConfigManager.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/config/ConfigManager.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,61 @@\n+package dev.midas.dss.config;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import dev.midas.dss.config.domain.StorageConfig;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Component\n+public class ConfigManager {\n+\n+    private static final String DEFAULT_FILE = \"storage.yaml\";\n+    private static final Logger LOG = LogManager.getLogger(ConfigManager.class.getName());\n+\n+    public ConfigManager() {}\n+\n+    public List<StorageConfig> loadDefaultExchangeConfig() {\n+        return this.loadExchangeConfig(DEFAULT_FILE);\n+    }\n+\n+    /**\n+     * @param path if empty or null default path is loaded.\n+     * @return\n+     */\n+    public List<StorageConfig> loadExchangeConfig(String path) {\n+        path = StringUtils.isNotEmpty(path) ? path : DEFAULT_FILE;\n+\n+        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());\n+        mapper.findAndRegisterModules();\n+\n+        File file = new File(path);\n+        List<StorageConfig> configs = Collections.emptyList();\n+\n+        try {\n+            file = new ClassPathResource(path).getFile();\n+            configs = mapper.readValue(file, new TypeReference<List<StorageConfig>>(){});\n+\n+        } catch (FileNotFoundException e) {\n+            LOG.error(String.format(\"File %s not found\", file.getName()));\n+            System.exit(1);\n+\n+        } catch (IOException e) {\n+            LOG.error(String.format(\"Fail to load file %s\", file.getName()));\n+            System.exit(1);\n+        }\n+        LOG.info(String.format(\"File %s successfully loaded\", file.getName()));\n+\n+        // TODO: check for not existing and repeated ids here\n+        return configs;\n+    }\n+}"
  },
  {
    "sha": "5d728c497fdde3465c9d229590bc66e6cc69cb06",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/config/domain/PairConfig.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/config/domain/PairConfig.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/config/domain/PairConfig.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/config/domain/PairConfig.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,99 @@\n+package dev.midas.dss.config.domain;\n+\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+public class PairConfig {\n+\n+    public static class Builder {\n+        private String pair;\n+        private long beginning;\n+        private String[] steps;\n+\n+        public Builder() { }\n+\n+        public Builder setPair(String pair) {\n+            this.pair = pair;\n+            return this;\n+        }\n+\n+        public Builder setBeginning(long beginning) {\n+            this.beginning = beginning;\n+            return this;\n+        }\n+\n+        public Builder setSteps(String[] steps) {\n+            this.steps = steps;\n+            return this;\n+        }\n+\n+        public PairConfig build() {\n+            PairConfig config = new PairConfig();\n+            config.pair = this.pair;\n+            config.beginning = this.beginning;\n+            config.steps = this.steps;\n+            return config;\n+        }\n+    }\n+\n+    private String pair;\n+    private long beginning;\n+    private String[] steps;\n+\n+    public PairConfig() {}\n+\n+    public String getPair() {\n+        return pair;\n+    }\n+\n+    public void setPair(String pair) {\n+        this.pair = pair;\n+    }\n+\n+    public long getBeginning() {\n+        return beginning;\n+    }\n+\n+    public void setBeginning(long beginning) {\n+        this.beginning = beginning;\n+    }\n+\n+    public String[] getSteps() {\n+        return steps;\n+    }\n+\n+    public void setSteps(String[] steps) {\n+        this.steps = steps;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        PairConfig that = (PairConfig) o;\n+\n+        return Objects.equal(pair, that.pair) &&\n+                Objects.equal(beginning, that.beginning) &&\n+                Objects.equal(steps, that.steps);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(pair, beginning, steps);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                .add(\"pair\", pair)\n+                .add(\"beginning\", beginning)\n+                .add(\"steps\", steps)\n+                .toString();\n+    }\n+}"
  },
  {
    "sha": "b8798652445666f509b22a0164d03d9e818252b6",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/config/domain/StorageConfig.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/config/domain/StorageConfig.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/config/domain/StorageConfig.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/config/domain/StorageConfig.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,84 @@\n+package dev.midas.dss.config.domain;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import java.util.List;\n+\n+public class StorageConfig {\n+\n+    public static class Builder {\n+        private String exchangeId;\n+        private List<PairConfig> pairs;\n+\n+        public Builder() {\n+        }\n+\n+        public Builder setExchangeId(String exchangeId) {\n+            this.exchangeId = exchangeId;\n+            return this;\n+        }\n+\n+        public Builder setMarkets(List<PairConfig> pairs) {\n+            this.pairs = pairs;\n+            return this;\n+        }\n+\n+        public StorageConfig build() {\n+            StorageConfig config = new StorageConfig();\n+            config.exchangeId = this.exchangeId;\n+            config.pairs = this.pairs;\n+            return config;\n+        }\n+    }\n+\n+    private String exchangeId;\n+    private List<PairConfig> pairs;\n+\n+    private StorageConfig() {\n+    }\n+\n+    public String getExchangeId() {\n+        return exchangeId;\n+    }\n+\n+    public void setExchangeId(String exchangeId) {\n+        this.exchangeId = exchangeId;\n+    }\n+\n+    public List<PairConfig> getPairs() {\n+        return pairs;\n+    }\n+\n+    public void setPairs(List<PairConfig> pairs) {\n+        this.pairs = pairs;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        StorageConfig that = (StorageConfig) o;\n+\n+        return Objects.equal(exchangeId, that.exchangeId) &&\n+                Objects.equal(pairs, that.pairs);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(exchangeId, pairs);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                .add(\"exchangeId\", exchangeId)\n+                .add(\"pairs\", pairs)\n+                .toString();\n+    }\n+}"
  },
  {
    "sha": "28554caffd5226e3c930fc1ef9c884c3aa335383",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/core/StoreEngine.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/core/StoreEngine.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/core/StoreEngine.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/core/StoreEngine.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,44 @@\n+package dev.midas.dss.core;\n+\n+import dev.midas.dss.config.ConfigManager;\n+import dev.midas.dss.config.domain.StorageConfig;\n+import dev.midas.dss.mongo.MongoManager;\n+import dev.midas.dss.mongo.domain.Candle;\n+import dev.midas.dss.mongo.repositories.CandleRepository;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Component\n+public class StoreEngine {\n+\n+    private static final Logger LOG = LogManager.getLogger(StoreEngine.class.getName());\n+\n+    private final ConfigManager configurator;\n+    private final MongoManager mongo;\n+\n+    public StoreEngine(ConfigManager configurator, MongoManager mongo) {\n+        this.configurator = configurator;\n+        this.mongo = mongo;\n+    }\n+\n+    public void startDefaultConfigs() {\n+        List<StorageConfig> localConfig = configurator.loadDefaultExchangeConfig();\n+        LOG.info(() -> \"Default configuration loaded.\");\n+\n+        for (StorageConfig config : localConfig) {\n+            mongo.updateDB(config);\n+            //mongo.createCollection(config.getExchangeId());\n+        }\n+        \n+        this.listeningPairs();\n+    }\n+\n+    private void listeningPairs() {\n+    }\n+\n+\n+}"
  },
  {
    "sha": "0c1b9c5bf5e53e275e342a71ca4ef3c85cbab6f8",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/exchanges/ExchangeManager.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/exchanges/ExchangeManager.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/exchanges/ExchangeManager.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/exchanges/ExchangeManager.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,27 @@\n+package dev.midas.dss.exchanges;\n+\n+import org.knowm.xchange.Exchange;\n+import org.knowm.xchange.ExchangeFactory;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.marketdata.Ticker;\n+import org.knowm.xchange.kraken.KrakenExchange;\n+import org.knowm.xchange.kraken.service.KrakenBaseService;\n+import org.knowm.xchange.kraken.service.KrakenMarketDataServiceRaw;\n+import org.knowm.xchange.service.marketdata.MarketDataService;\n+\n+import java.io.IOException;\n+\n+public class ExchangeManager {\n+\n+    public void testing() throws IOException {\n+\n+        Exchange broker = ExchangeFactory.INSTANCE.createExchange(KrakenExchange.class.getName());\n+\n+        MarketDataService marketDataService = broker.getMarketDataService();\n+        Ticker ticker = marketDataService.getTicker(CurrencyPair.BTC_USD);\n+\n+        KrakenBaseService service = new KrakenBaseService(broker);\n+        KrakenMarketDataServiceRaw test = new KrakenMarketDataServiceRaw(broker);\n+        //test.getKrakenOHLC()\n+    }\n+}"
  },
  {
    "sha": "a0ce4bcd8c59346808d7a4197d030521225f8de2",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/mongo/MongoConfig.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/mongo/MongoConfig.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/mongo/MongoConfig.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/mongo/MongoConfig.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,36 @@\n+package dev.midas.dss.mongo;\n+\n+import com.mongodb.ConnectionString;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import org.bson.codecs.configuration.CodecRegistries;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.codecs.pojo.PojoCodecProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.mongodb.core.MongoTemplate;\n+\n+@Configuration\n+public class MongoConfig {\n+\n+    @Bean\n+    public MongoClient mongo() {\n+        ConnectionString connectionString = new ConnectionString(\"mongodb://localhost:27017/mydatabase\");\n+\n+        CodecRegistry pojoCodecRegistry = CodecRegistries.fromProviders(PojoCodecProvider.builder().automatic(true).build());\n+        CodecRegistry codecRegistry = CodecRegistries.fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), pojoCodecRegistry);\n+        \n+        MongoClientSettings mongoClientSettings = MongoClientSettings.builder()\n+                .applyConnectionString(connectionString)\n+                .codecRegistry(codecRegistry)\n+                .build();\n+\n+        return MongoClients.create(mongoClientSettings);\n+    }\n+\n+    @Bean\n+    public MongoTemplate mongoTemplate() throws Exception {\n+        return new MongoTemplate(mongo(), \"mydatabase\");\n+    }\n+}"
  },
  {
    "sha": "21697c7c4e442a67b11c00fd843a2807f808a78d",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/mongo/MongoManager.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/mongo/MongoManager.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/mongo/MongoManager.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/mongo/MongoManager.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,133 @@\n+package dev.midas.dss.mongo;\n+\n+import com.mongodb.BasicDBObject;\n+import com.mongodb.client.*;\n+import dev.midas.dss.config.domain.PairConfig;\n+import dev.midas.dss.config.domain.StorageConfig;\n+import dev.midas.dss.mongo.domain.Candle;\n+import org.knowm.xchange.Exchange;\n+import org.knowm.xchange.ExchangeFactory;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.kraken.KrakenExchange;\n+import org.knowm.xchange.kraken.dto.marketdata.KrakenOHLC;\n+import org.knowm.xchange.kraken.dto.marketdata.KrakenOHLCs;\n+import org.knowm.xchange.kraken.service.KrakenBaseService;\n+import org.knowm.xchange.kraken.service.KrakenMarketDataServiceRaw;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class MongoManager {\n+\n+    private final MongoClient mongo;\n+    private final MongoDatabase dataStore;\n+\n+    public MongoManager(MongoConfig config) {\n+        this.mongo = config.mongo();\n+        this.dataStore = mongo.getDatabase(\"mydatabase\");\n+    }\n+\n+    public void updateDB(StorageConfig config) {\n+        for (PairConfig pair: config.getPairs()) {\n+            for (String step: pair.getSteps()) {\n+\n+                //String collection = config.getExchangeId()+\"_\"+pair.getPair().toLowerCase()+\"_\"+step;\n+\n+            }\n+        }\n+        String collection = \"candle\";\n+        this.createCollectionIfNotExists(collection);\n+        this.updateCollection(collection, 60);\n+    }\n+\n+    private void createCollectionIfNotExists(String collName) {\n+        if (!collectionExists(collName)) {\n+            dataStore.createCollection(collName);\n+        }\n+    }\n+\n+    private boolean collectionExists(String collName) {\n+        for (String s : dataStore.listCollectionNames()) {\n+            if (collName.equals(s)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void updateCollection(String collName, int step) {\n+        MongoCollection<Candle> collection = dataStore.getCollection(collName, Candle.class);\n+        Candle lastCandle = getLastCandle(collection);\n+        assert lastCandle != null;\n+\n+        long lastTimeStamp = lastCandle.getTimestamp() + step;\n+        System.out.println(lastCandle);\n+        System.out.println(lastTimeStamp);\n+\n+        while (lastTimeStamp < Instant.now().getEpochSecond()) {\n+            List<Candle> candles = mockExchangeService(step, lastTimeStamp);\n+            collection.insertMany(candles);\n+            lastTimeStamp = candles.get(candles.size()-1).getTimestamp();\n+\n+        }\n+    }\n+\n+    private Candle getLastCandle(MongoCollection<Candle> collection) {\n+        return collection.find().sort(new BasicDBObject(\"_id\", -1)).first();\n+    }\n+\n+    private List<Candle> mockExchangeService(Integer step, long timestamp) {\n+        Exchange broker = ExchangeFactory.INSTANCE.createExchange(KrakenExchange.class.getName());\n+        KrakenBaseService service = new KrakenBaseService(broker);\n+        KrakenMarketDataServiceRaw test = new KrakenMarketDataServiceRaw(broker);\n+        List<Candle> candles = new ArrayList<>();\n+\n+        try {\n+            KrakenOHLCs krakenOHLC = test.getKrakenOHLC(CurrencyPair.BTC_EUR, step, timestamp);\n+            List<KrakenOHLC> ohlCs = krakenOHLC.getOHLCs();\n+            ohlCs.forEach(ohlc -> {\n+                candles.add(new Candle(\n+                        ohlc.getTime(),\n+                        ohlc.getOpen(),\n+                        ohlc.getHigh(),\n+                        ohlc.getLow(),\n+                        ohlc.getClose(),\n+                        ohlc.getVolume()));\n+            });\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return candles;\n+    }\n+\n+\n+\n+    private void addCandle(String collectionName, Candle candle) {\n+        dataStore.getCollection(collectionName, Candle.class).insertOne(candle);\n+    }\n+\n+    //private final CandleRepository repository;\n+    /*public void testing() {\n+        Candle candle = new Candle(\n+                1325379600L,new BigDecimal(\"1\"),new BigDecimal(\"1\"),\n+                new BigDecimal(\"1\"),new BigDecimal(\"1\"),new BigDecimal(\"1\"));\n+\n+        repository.save(candle);\n+\n+        // fetch all customers\n+        System.out.println(\"-------------------------------\");\n+        for (Candle customer : repository.findAll()) {\n+            System.out.println(customer);\n+        }\n+        System.out.println();\n+\n+        // fetch an individual customer\n+        System.out.println(\"--------------------------------\");\n+        System.out.println(repository.findById(\"603bdd4a3cbb5fa41078d0d4\"));\n+    }*/\n+}"
  },
  {
    "sha": "4c63f7d06920180ceace69423956aff741ec16a0",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/mongo/domain/Candle.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/mongo/domain/Candle.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/mongo/domain/Candle.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/mongo/domain/Candle.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,143 @@\n+package dev.midas.dss.mongo.domain;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import org.bson.codecs.pojo.annotations.BsonId;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+import org.bson.types.ObjectId;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.mongodb.core.mapping.Document;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Document(collection = \"candle\")\n+public class Candle {\n+\n+    //private final String pattern = \"yyyy-MM-dd HH:mm:ss.SSSZ\";\n+\n+    @Id\n+    @BsonProperty()\n+    @BsonId\n+    private ObjectId id;\n+    private Long timestamp;\n+    private Date date;\n+    private BigDecimal open;\n+    private BigDecimal high;\n+    private BigDecimal low;\n+    private BigDecimal close;\n+    private BigDecimal volume;\n+\n+    public Candle() {}\n+\n+    public Candle(Long timestamp, BigDecimal open, BigDecimal high, BigDecimal low, BigDecimal close, BigDecimal volume) {\n+        this.timestamp = timestamp;\n+        this.date = new Date(this.timestamp * 1000);\n+        this.open = open;\n+        this.high = high;\n+        this.low = low;\n+        this.close = close;\n+        this.volume = volume;\n+    }\n+\n+    /*public ObjectId getId() {\n+        return id;\n+    }\n+\n+    public void setId(ObjectId id) {\n+        this.id = id;\n+    }*/\n+\n+    public Long getTimestamp() {\n+        return timestamp;\n+    }\n+\n+    public void setTimestamp(Long timestamp) {\n+        this.timestamp = timestamp;\n+    }\n+\n+    public Date getDate() {\n+        return date;\n+    }\n+\n+    public void setDate(Date date) {\n+        this.date = date;\n+    }\n+\n+    public BigDecimal getOpen() {\n+        return open;\n+    }\n+\n+    public void setOpen(BigDecimal open) {\n+        this.open = open;\n+    }\n+\n+    public BigDecimal getHigh() {\n+        return high;\n+    }\n+\n+    public void setHigh(BigDecimal high) {\n+        this.high = high;\n+    }\n+\n+    public BigDecimal getLow() {\n+        return low;\n+    }\n+\n+    public void setLow(BigDecimal low) {\n+        this.low = low;\n+    }\n+\n+    public BigDecimal getClose() {\n+        return close;\n+    }\n+\n+    public void setClose(BigDecimal close) {\n+        this.close = close;\n+    }\n+\n+    public BigDecimal getVolume() {\n+        return volume;\n+    }\n+\n+    public void setVolume(BigDecimal volume) {\n+        this.volume = volume;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        Candle that = (Candle) o;\n+\n+        return Objects.equal(timestamp, that.timestamp) &&\n+                Objects.equal(open, that.open)  &&\n+                Objects.equal(high, that.high)  &&\n+                Objects.equal(low, that.low) &&\n+                Objects.equal(close, that.close)  &&\n+                Objects.equal(volume, that.volume);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(timestamp, open, high, low, close);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                .add(\"timestamp\", timestamp)\n+                .add(\"open\", open)\n+                .add(\"high\", high)\n+                .add(\"low\", low)\n+                .add(\"close\", close)\n+                .add(\"volume\", volume)\n+                .toString();\n+    }\n+}"
  },
  {
    "sha": "0fc8e272275b584a1961b42906ff9d2aa7daf006",
    "filename": "DataStoreService/src/main/java/dev/midas/dss/mongo/repositories/CandleRepository.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/mongo/repositories/CandleRepository.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/java/dev/midas/dss/mongo/repositories/CandleRepository.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/java/dev/midas/dss/mongo/repositories/CandleRepository.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,10 @@\n+package dev.midas.dss.mongo.repositories;\n+\n+import dev.midas.dss.mongo.domain.Candle;\n+import org.springframework.data.mongodb.repository.MongoRepository;\n+\n+import java.util.List;\n+\n+public interface CandleRepository extends MongoRepository<Candle, String> {\n+\n+}"
  },
  {
    "sha": "b752c1d772e848e95e75d9fec8dfe44f52b8b640",
    "filename": "DataStoreService/src/main/resources/application.properties",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/resources/application.properties",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/resources/application.properties?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,5 @@\n+server.port = 2020\n+\n+#spring.data.mongodb.host=localhost\n+#spring.data.mongodb.port=27017\n+#spring.data.mongodb.database=kingmidasdb\n\\ No newline at end of file"
  },
  {
    "sha": "c99a1e54320ca6659b2239e78987190dbbff6404",
    "filename": "DataStoreService/src/main/resources/storage.yaml",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/resources/storage.yaml",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/DataStoreService/src/main/resources/storage.yaml",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/DataStoreService/src/main/resources/storage.yaml?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -0,0 +1,5 @@\n+- exchangeId: bitstamp\n+  pairs:\n+    - pair: BTCEUR\n+      beginning: 1325289600\n+      steps: [3d]"
  },
  {
    "sha": "da476af2ff4b5a8d872a705d00c0586db9ac6be3",
    "filename": "README.md",
    "status": "modified",
    "additions": 28,
    "deletions": 7,
    "changes": 35,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/README.md",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/README.md",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/README.md?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -1,13 +1,34 @@\n # KingMidas\n \n-Build docker file: <br>\n-`docker build -t [nameTag] [src_path]`\n-`docker run [nameTag]`\n \n-Redis <br>\n-`docker build -t redis/pubsub .`\n-`docker run -p 6379:6379 redis/pubsub`\n+```\n+docker build -t [nameTag] [src_path]\n+docker run [nameTag]\n+docker stop [nameTag]\n+docker rm [nameTag]\n+docker ps -a\n+```\n+\n+###Redis\n+```\n+docker build -t redis/pubsub .\n+docker run -p 6379:6379 redis/pubsub\n+```\n \n Redis docs: https://github.com/redis/jedis/wiki/Getting-started <br>\n Good article with examples codes: https://www.vogella.com/tutorials/RxJava/article.html <br>\n-Lib alternatives: https://redis.io/clients#java\n\\ No newline at end of file\n+Lib alternatives: https://redis.io/clients#java\n+\n+###MongoDB\n+```\n+docker build -t mongo/datastore .\n+docker run -it -v mongodb:/data/db -p 27017:27017 mongo/datastore`<br>\n+sudo docker exec -it [container id] bash`<br>\n+```\n+```\n+mongo -host localhost -port 27017\n+show databases\n+use food\n+db.fruits.find().pretty()\n+```\n+Ref: https://www.bmc.com/blogs/mongodb-docker-container/\n\\ No newline at end of file"
  },
  {
    "sha": "42bd6fadfc6b53fe38f788947fe6540c2cc104f2",
    "filename": "xBrokerConnector/src/main/java/dev/midas/xbc/XBCApp.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/xBrokerConnector/src/main/java/dev/midas/xbc/XBCApp.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/xBrokerConnector/src/main/java/dev/midas/xbc/XBCApp.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/xBrokerConnector/src/main/java/dev/midas/xbc/XBCApp.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -18,6 +18,6 @@ public static void main(String[] args) {\n \n     @Override\n     public void run(String... args) {\n-        listening.startDefaultListeners();\n+        listening.startDefaultConfigs();\n     }\n }"
  },
  {
    "sha": "54de1b4b39b497d1e8664a10ad7896cdea36a178",
    "filename": "xBrokerConnector/src/main/java/dev/midas/xbc/stream/ListeningEngine.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/aCard0s0/KingMidas/blob/927384bf16db14c33afa00b4dc5188faada260e3/xBrokerConnector/src/main/java/dev/midas/xbc/stream/ListeningEngine.java",
    "raw_url": "https://github.com/aCard0s0/KingMidas/raw/927384bf16db14c33afa00b4dc5188faada260e3/xBrokerConnector/src/main/java/dev/midas/xbc/stream/ListeningEngine.java",
    "contents_url": "https://api.github.com/repos/aCard0s0/KingMidas/contents/xBrokerConnector/src/main/java/dev/midas/xbc/stream/ListeningEngine.java?ref=927384bf16db14c33afa00b4dc5188faada260e3",
    "patch": "@@ -44,13 +44,13 @@ public ListeningEngine(ConfigManager configurator,\n         this.streams = streams;\n     }\n \n-    public void startDefaultListeners() {\n+    public void startDefaultConfigs() {\n         List<ExchangeConfig> localConfig = configurator.loadDefaultExchangeConfig();\n \n         for (ExchangeConfig exchangeConfig : localConfig) {\n             startListener(exchangeConfig);\n         }\n-        LOG.info(() -> \"Default configuration started.\");\n+        LOG.info(() -> \"Default configuration loaded.\");\n     }\n \n     public void startListener(ExchangeConfig config) {"
  }
]
