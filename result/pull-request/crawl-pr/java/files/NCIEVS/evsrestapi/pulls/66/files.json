[
  {
    "sha": "acc3eb7a1ede1a81fd1980b4de7de12bb70063e5",
    "filename": "src/main/java/gov/nih/nci/evs/api/controller/ConceptController.java",
    "status": "modified",
    "additions": 119,
    "deletions": 60,
    "changes": 179,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/controller/ConceptController.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/controller/ConceptController.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/controller/ConceptController.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -22,6 +22,7 @@\n \n import gov.nih.nci.evs.api.aop.RecordMetric;\n import gov.nih.nci.evs.api.model.Association;\n+import gov.nih.nci.evs.api.model.AssociationEntryResultList;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n import gov.nih.nci.evs.api.model.DisjointWith;\n@@ -32,6 +33,7 @@\n import gov.nih.nci.evs.api.model.Role;\n import gov.nih.nci.evs.api.model.Terminology;\n import gov.nih.nci.evs.api.service.ElasticQueryService;\n+import gov.nih.nci.evs.api.service.MetadataService;\n import gov.nih.nci.evs.api.service.SparqlQueryManagerService;\n import gov.nih.nci.evs.api.util.ConceptUtils;\n import gov.nih.nci.evs.api.util.TerminologyUtils;\n@@ -68,6 +70,10 @@\n   @Autowired\n   TerminologyUtils termUtils;\n \n+  /* The metadata service */\n+  @Autowired\n+  MetadataService metadataService;\n+\n   /**\n    * Returns the associations.\n    *\n@@ -101,10 +107,10 @@\n           required = true, dataType = \"string\", paramType = \"query\")\n   })\n   @RecordMetric\n-  public @ResponseBody List<Concept> getConcepts(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @RequestParam(\"include\") final Optional<String> include,\n-    @RequestParam(\"list\") final String list) throws Exception {\n+  public @ResponseBody List<Concept> getConcepts(@PathVariable(value = \"terminology\")\n+  final String terminology, @RequestParam(\"include\")\n+  final Optional<String> include, @RequestParam(\"list\")\n+  final String list) throws Exception {\n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n       final IncludeParam ip = new IncludeParam(include.orElse(\"summary\"));\n@@ -157,10 +163,10 @@\n               + \"for detailed information</a>.\",\n           required = false, dataType = \"string\", paramType = \"query\", defaultValue = \"summary\")\n   })\n-  public @ResponseBody Concept getConcept(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code,\n-    @RequestParam(\"include\") final Optional<String> include) throws Exception {\n+  public @ResponseBody Concept getConcept(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code, @RequestParam(\"include\")\n+  final Optional<String> include) throws Exception {\n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n       final IncludeParam ip = new IncludeParam(include.orElse(\"summary\"));\n@@ -202,9 +208,9 @@\n   @RecordMetric\n   @RequestMapping(method = RequestMethod.GET, value = \"/concept/{terminology}/{code}/associations\",\n       produces = \"application/json\")\n-  public @ResponseBody List<Association> getAssociations(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<Association> getAssociations(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -223,6 +229,59 @@\n     }\n   }\n \n+  /**\n+   * Returns the association entries.\n+   *\n+   * @param terminology the terminology\n+   * @param code the code\n+   * @return the association antries\n+   * @throws Exception the exception\n+   */\n+  @ApiOperation(\n+      value = \"Get the association entries for the specified terminology and code. Associations used to define subset membership are not resolved by this call\",\n+      response = AssociationEntryResultList.class)\n+  @ApiResponses(value = {\n+      @ApiResponse(code = 200, message = \"Successfully retrieved the requested information\"),\n+      @ApiResponse(code = 400, message = \"Bad request\"),\n+      @ApiResponse(code = 404, message = \"Resource not found\")\n+  })\n+  @ApiImplicitParams({\n+      @ApiImplicitParam(name = \"terminology\", value = \"Terminology, e.g. 'ncit'\", required = true,\n+          dataType = \"string\", paramType = \"path\", defaultValue = \"ncit\"),\n+      @ApiImplicitParam(name = \"codeOrLabel\",\n+          value = \"Code/label in the specified terminology, e.g. 'A8' or 'Has_CDRH_Parent'\",\n+          required = true, dataType = \"string\", paramType = \"path\")\n+  })\n+  @RecordMetric\n+  @RequestMapping(method = RequestMethod.GET,\n+      value = \"/concept/{terminology}/associations/{codeOrLabel}\", produces = \"application/json\")\n+  public @ResponseBody AssociationEntryResultList getAssociationEntries(\n+    @PathVariable(value = \"terminology\")\n+    final String terminology, @PathVariable(value = \"codeOrLabel\") String codeOrLabel,\n+    @RequestParam(\"fromRecord\") Optional<Integer> fromRecord,\n+    @RequestParam(\"pageSize\") Optional<Integer> pageSize) throws Exception {\n+    // Get the association \"label\"\n+    Long startTime = System.currentTimeMillis();\n+\n+    Optional<Concept> association =\n+        metadataService.getAssociation(terminology, codeOrLabel, Optional.ofNullable(\"minimal\"));\n+    if (!association.isPresent())\n+      throw new ResponseStatusException(HttpStatus.NOT_FOUND,\n+          \"Association \" + codeOrLabel + \" not found\");\n+    String label = association.get().getName();\n+    String code = association.get().getCode();\n+    if (termUtils.getTerminology(terminology, true).getMetadata().getSubsetMember()\n+        .contains(code)) {\n+      throw new ResponseStatusException(HttpStatus.NOT_FOUND,\n+          \"Associations used to define subset membership are not resolved by this call\");\n+    }\n+    // Getting the list\n+    AssociationEntryResultList list = metadataService.getAssociationEntries(terminology, label,\n+        fromRecord.orElse(0), pageSize.orElse(10));\n+    list.setTimeTaken(System.currentTimeMillis() - startTime);\n+    return list;\n+  }\n+\n   /**\n    * Returns the inverse associations.\n    *\n@@ -247,9 +306,9 @@\n   @RecordMetric\n   @RequestMapping(method = RequestMethod.GET,\n       value = \"/concept/{terminology}/{code}/inverseAssociations\", produces = \"application/json\")\n-  public @ResponseBody List<Association> getInverseAssociations(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<Association> getInverseAssociations(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n \n@@ -292,9 +351,9 @@\n   @RecordMetric\n   @RequestMapping(method = RequestMethod.GET, value = \"/concept/{terminology}/{code}/roles\",\n       produces = \"application/json\")\n-  public @ResponseBody List<Role> getRoles(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<Role> getRoles(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -338,9 +397,9 @@\n   @RecordMetric\n   @RequestMapping(method = RequestMethod.GET, value = \"/concept/{terminology}/{code}/inverseRoles\",\n       produces = \"application/json\")\n-  public @ResponseBody List<Role> getInverseRoles(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<Role> getInverseRoles(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -383,9 +442,9 @@\n   @RecordMetric\n   @RequestMapping(method = RequestMethod.GET, value = \"/concept/{terminology}/{code}/parents\",\n       produces = \"application/json\")\n-  public @ResponseBody List<Concept> getParents(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<Concept> getParents(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -428,9 +487,9 @@\n   @RecordMetric\n   @RequestMapping(method = RequestMethod.GET, value = \"/concept/{terminology}/{code}/children\",\n       produces = \"application/json\")\n-  public @ResponseBody List<Concept> getChildren(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<Concept> getChildren(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -482,12 +541,12 @@\n       @ApiImplicitParam(name = \"maxLevel\", value = \"Max level of results to return\",\n           required = false, dataType = \"string\", paramType = \"query\", defaultValue = \"10000\")\n   })\n-  public @ResponseBody List<Concept> getDescendants(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code,\n-    @RequestParam(\"fromRecord\") final Optional<Integer> fromRecord,\n-    @RequestParam(\"pageSize\") final Optional<Integer> pageSize,\n-    @RequestParam(\"maxLevel\") final Optional<Integer> maxLevel) throws Exception {\n+  public @ResponseBody List<Concept> getDescendants(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code, @RequestParam(\"fromRecord\")\n+  final Optional<Integer> fromRecord, @RequestParam(\"pageSize\")\n+  final Optional<Integer> pageSize, @RequestParam(\"maxLevel\")\n+  final Optional<Integer> maxLevel) throws Exception {\n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n \n@@ -547,9 +606,9 @@\n   @RecordMetric\n   @RequestMapping(method = RequestMethod.GET, value = \"/concept/{terminology}/{code}/maps\",\n       produces = \"application/json\")\n-  public @ResponseBody List<Map> getMaps(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<Map> getMaps(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -593,9 +652,9 @@\n   @RecordMetric\n   @RequestMapping(method = RequestMethod.GET, value = \"/concept/{terminology}/{code}/disjointWith\",\n       produces = \"application/json\")\n-  public @ResponseBody List<DisjointWith> getDisjointWith(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<DisjointWith> getDisjointWith(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n \n@@ -642,9 +701,9 @@\n               + \"for detailed information</a>.\",\n           required = false, dataType = \"string\", paramType = \"query\", defaultValue = \"minimal\")\n   })\n-  public @ResponseBody List<Concept> getRoots(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @RequestParam(\"include\") final Optional<String> include) throws Exception {\n+  public @ResponseBody List<Concept> getRoots(@PathVariable(value = \"terminology\")\n+  final String terminology, @RequestParam(\"include\")\n+  final Optional<String> include) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -696,10 +755,10 @@\n               + \"for detailed information</a>.\",\n           required = false, dataType = \"string\", paramType = \"query\", defaultValue = \"minimal\")\n   })\n-  public @ResponseBody List<List<Concept>> getPathsFromRoot(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code,\n-    @RequestParam(\"include\") final Optional<String> include) throws Exception {\n+  public @ResponseBody List<List<Concept>> getPathsFromRoot(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code, @RequestParam(\"include\")\n+  final Optional<String> include) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -742,9 +801,9 @@\n       @ApiImplicitParam(name = \"code\", value = \"Code in the specified terminology, e.g. 'C3224'\",\n           required = true, dataType = \"string\", paramType = \"path\")\n   })\n-  public @ResponseBody List<HierarchyNode> getSubtree(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<HierarchyNode> getSubtree(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n \n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n@@ -785,9 +844,9 @@\n       @ApiImplicitParam(name = \"code\", value = \"Code in the specified terminology, e.g. 'C3224'\",\n           required = true, dataType = \"string\", paramType = \"path\")\n   })\n-  public @ResponseBody List<HierarchyNode> getSubtreeChildren(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code) throws Exception {\n+  public @ResponseBody List<HierarchyNode> getSubtreeChildren(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code) throws Exception {\n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n       if (!elasticQueryService.checkConceptExists(code, term)) {\n@@ -835,10 +894,10 @@\n               + \"for detailed information</a>.\",\n           required = false, dataType = \"string\", paramType = \"query\", defaultValue = \"minimal\")\n   })\n-  public @ResponseBody List<List<Concept>> getPathsToRoot(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code,\n-    @RequestParam(\"include\") final Optional<String> include) throws Exception {\n+  public @ResponseBody List<List<Concept>> getPathsToRoot(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code, @RequestParam(\"include\")\n+  final Optional<String> include) throws Exception {\n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n       final IncludeParam ip = new IncludeParam(include.orElse(null));\n@@ -891,11 +950,11 @@\n               + \"for detailed information</a>.\",\n           required = false, dataType = \"string\", paramType = \"query\", defaultValue = \"minimal\")\n   })\n-  public @ResponseBody List<List<Concept>> getPathsToAncestor(\n-    @PathVariable(value = \"terminology\") final String terminology,\n-    @PathVariable(value = \"code\") final String code,\n-    @PathVariable(value = \"ancestorCode\") final String ancestorCode,\n-    @RequestParam(\"include\") final Optional<String> include) throws Exception {\n+  public @ResponseBody List<List<Concept>> getPathsToAncestor(@PathVariable(value = \"terminology\")\n+  final String terminology, @PathVariable(value = \"code\")\n+  final String code, @PathVariable(value = \"ancestorCode\")\n+  final String ancestorCode, @RequestParam(\"include\")\n+  final Optional<String> include) throws Exception {\n     try {\n       final Terminology term = termUtils.getTerminology(terminology, true);\n       final IncludeParam ip = new IncludeParam(include.orElse(null));"
  },
  {
    "sha": "3cf7adb7f3ace063b22f7379e585255be4423675",
    "filename": "src/main/java/gov/nih/nci/evs/api/model/AssociationEntry.java",
    "status": "added",
    "additions": 167,
    "deletions": 0,
    "changes": 167,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/model/AssociationEntry.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/model/AssociationEntry.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/model/AssociationEntry.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -0,0 +1,167 @@\n+\n+package gov.nih.nci.evs.api.model;\n+\n+import org.springframework.data.elasticsearch.annotations.Field;\n+import org.springframework.data.elasticsearch.annotations.FieldType;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * Represents an association between two concepts.\n+ */\n+@JsonInclude(Include.NON_EMPTY)\n+public class AssociationEntry extends Relationship {\n+\n+  /** the terminology */\n+  @Field(type = FieldType.Text)\n+  private String terminology;\n+\n+  /** the version */\n+  @Field(type = FieldType.Text)\n+  private String version;\n+\n+  /** the association */\n+  @Field(type = FieldType.Text)\n+  private String association;\n+\n+  /** the code */\n+  @Field(type = FieldType.Text)\n+  private String code;\n+\n+  /** the name */\n+  @Field(type = FieldType.Text)\n+  private String name;\n+\n+  /** the relatedCode */\n+  @Field(type = FieldType.Text)\n+  private String relatedCode;\n+\n+  /** the relatedName */\n+  @Field(type = FieldType.Text)\n+  private String relatedName;\n+\n+  /**\n+   * Instantiates an empty {@link AssociationEntry}.\n+   */\n+  public AssociationEntry() {\n+    // n/a\n+  }\n+\n+  /**\n+   * Instantiates a {@link AssociationEntry} from the specified parameters.\n+   *\n+   * @param other the other\n+   */\n+  public AssociationEntry(final AssociationEntry other) {\n+    populateFrom(other);\n+  }\n+\n+  /**\n+   * Populate from.\n+   *\n+   * @param other the other\n+   */\n+  public void populateFrom(final AssociationEntry other) {\n+    super.populateFrom(other);\n+  }\n+\n+  /**\n+   * @return the terminology\n+   */\n+  public String getTerminology() {\n+    return terminology;\n+  }\n+\n+  /**\n+   * @param terminology the terminology to set\n+   */\n+  public void setTerminology(String terminology) {\n+    this.terminology = terminology;\n+  }\n+\n+  /**\n+   * @return the version\n+   */\n+  public String getVersion() {\n+    return version;\n+  }\n+\n+  /**\n+   * @param version the version to set\n+   */\n+  public void setVersion(String version) {\n+    this.version = version;\n+  }\n+\n+  /**\n+   * @return the association\n+   */\n+  public String getAssociation() {\n+    return association;\n+  }\n+\n+  /**\n+   * @param association the association to set\n+   */\n+  public void setAssociation(String association) {\n+    this.association = association;\n+  }\n+\n+  /**\n+   * @return the code\n+   */\n+  public String getCode() {\n+    return code;\n+  }\n+\n+  /**\n+   * @param code the code to set\n+   */\n+  public void setCode(String code) {\n+    this.code = code;\n+  }\n+\n+  /**\n+   * @return the name\n+   */\n+  public String getName() {\n+    return name;\n+  }\n+\n+  /**\n+   * @param name the name to set\n+   */\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * @return the relatedCode\n+   */\n+  public String getRelatedCode() {\n+    return relatedCode;\n+  }\n+\n+  /**\n+   * @param relatedCode the relatedCode to set\n+   */\n+  public void setRelatedCode(String relatedCode) {\n+    this.relatedCode = relatedCode;\n+  }\n+\n+  /**\n+   * @return the relatedName\n+   */\n+  public String getRelatedName() {\n+    return relatedName;\n+  }\n+\n+  /**\n+   * @param relatedName the relatedName to set\n+   */\n+  public void setRelatedName(String relatedName) {\n+    this.relatedName = relatedName;\n+  }\n+\n+}"
  },
  {
    "sha": "e4e27c2699a3a68fe02835adf060f6ccc1607c37",
    "filename": "src/main/java/gov/nih/nci/evs/api/model/AssociationEntryResultList.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/model/AssociationEntryResultList.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/model/AssociationEntryResultList.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/model/AssociationEntryResultList.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -0,0 +1,62 @@\n+\n+package gov.nih.nci.evs.api.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents a list of results with paging parameters.\n+ */\n+public class AssociationEntryResultList extends ResultList {\n+\n+  /** The concepts. */\n+  private List<AssociationEntry> concepts;\n+\n+  /**\n+   * Instantiates an empty {@link AssociationEntryResultList}.\n+   */\n+  public AssociationEntryResultList() {\n+    // n/a\n+  }\n+\n+  /**\n+   * Instantiates a {@link AssociationEntryResultList} from the specified parameters.\n+   *\n+   * @param other the other\n+   */\n+  public AssociationEntryResultList(final AssociationEntryResultList other) {\n+    populateFrom(other);\n+  }\n+\n+  /**\n+   * Populate from.\n+   *\n+   * @param other the other\n+   */\n+  public void populateFrom(final AssociationEntryResultList other) {\n+    super.populateFrom(other);\n+    concepts = new ArrayList<>(other.getAssociationEntrys());\n+  }\n+\n+  /**\n+   * Returns the concepts.\n+   *\n+   * @return the concepts\n+   */\n+  public List<AssociationEntry> getAssociationEntrys() {\n+    if (concepts == null) {\n+      concepts = new ArrayList<>();\n+    }\n+    return concepts;\n+  }\n+\n+  /**\n+   * Sets the concepts.\n+   *\n+   * @param concepts the concepts\n+   */\n+  public void setAssociationEntrys(final List<AssociationEntry> concepts) {\n+    this.concepts = concepts;\n+  }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "56843f188d945c3fc0fccd02e1dcfc333e8ffc05",
    "filename": "src/main/java/gov/nih/nci/evs/api/model/TerminologyMetadata.java",
    "status": "modified",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/model/TerminologyMetadata.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/model/TerminologyMetadata.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/model/TerminologyMetadata.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -79,6 +79,9 @@\n   /** The sources to remove. */\n   private Set<String> sourcesToRemove;\n \n+  /** The subsetMembers for association entries */\n+  private Set<String> subsetMember;\n+\n   /**\n    * Instantiates an empty {@link TerminologyMetadata}.\n    */\n@@ -122,6 +125,7 @@ public void populateFrom(final TerminologyMetadata other) {\n     synonymTermType = other.getSynonymTermType();\n     termTypes = new HashMap<>(other.getTermTypes());\n     propertyNames = new HashMap<>(other.getTermTypes());\n+    subsetMember = new HashSet<>(other.getSubsetMember());\n   }\n \n   /* see superclass */\n@@ -147,6 +151,7 @@ public int hashCode() {\n     result = prime * result + ((synonymSubSource == null) ? 0 : synonymSubSource.hashCode());\n     result = prime * result + ((synonymTermType == null) ? 0 : synonymTermType.hashCode());\n     result = prime * result + ((termTypes == null) ? 0 : termTypes.hashCode());\n+    result = prime * result + ((subsetMember == null) ? 0 : subsetMember.hashCode());\n     return result;\n   }\n \n@@ -240,6 +245,11 @@ public boolean equals(Object obj) {\n         return false;\n     } else if (!termTypes.equals(other.termTypes))\n       return false;\n+    if (subsetMember == null) {\n+      if (other.subsetMember != null)\n+        return false;\n+    } else if (!subsetMember.equals(other.subsetMember))\n+      return false;\n     return true;\n   }\n \n@@ -649,6 +659,23 @@ public void setSourcesToRemove(Set<String> sourcesToRemove) {\n     this.sourcesToRemove = sourcesToRemove;\n   }\n \n+  /**\n+   * @return the subsetMember\n+   */\n+  public Set<String> getSubsetMember() {\n+    if (subsetMember == null) {\n+      subsetMember = new HashSet<>();\n+    }\n+    return subsetMember;\n+  }\n+\n+  /**\n+   * @param subsetMember the subsetMember to set\n+   */\n+  public void setSubsetMember(Set<String> subsetMember) {\n+    this.subsetMember = subsetMember;\n+  }\n+\n   /**\n    * Indicates whether or not property exclusion is the case.\n    *"
  },
  {
    "sha": "f33919466b9acf3d110bdb32c7462d5cd366d53e",
    "filename": "src/main/java/gov/nih/nci/evs/api/service/ElasticQueryService.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/ElasticQueryService.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/ElasticQueryService.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/service/ElasticQueryService.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -11,6 +11,7 @@\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonMappingException;\n \n+import gov.nih.nci.evs.api.model.AssociationEntryResultList;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n import gov.nih.nci.evs.api.model.HierarchyNode;\n@@ -404,4 +405,17 @@ Paths getPathToParent(String code, String parentCode, Terminology terminology)\n   List<ConceptMinimal> getContributingSources(Terminology terminology)\n     throws ClassNotFoundException, IOException;\n \n+  /**\n+   * returns a list of association entries\n+   * \n+   * @param terminology the terminology\n+   * @param ip the ip\n+   * @param fromRecord the starting record for the search\n+   * @param pageSize the size of pages in returned result\n+   * @return the association entry list\n+   * @throws Exception Signals that an exception has occurred.\n+   */\n+  AssociationEntryResultList getAssociationEntries(String terminology, String label, int fromRecord,\n+    int pageSize) throws Exception;\n+\n }"
  },
  {
    "sha": "c771366f1ae9a9db168118c27561f6f218e03eed",
    "filename": "src/main/java/gov/nih/nci/evs/api/service/ElasticQueryServiceImpl.java",
    "status": "modified",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/ElasticQueryServiceImpl.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/ElasticQueryServiceImpl.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/service/ElasticQueryServiceImpl.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -28,19 +28,23 @@\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonMappingException;\n \n+import gov.nih.nci.evs.api.model.AssociationEntry;\n+import gov.nih.nci.evs.api.model.AssociationEntryResultList;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n import gov.nih.nci.evs.api.model.HierarchyNode;\n import gov.nih.nci.evs.api.model.IncludeParam;\n import gov.nih.nci.evs.api.model.Path;\n import gov.nih.nci.evs.api.model.Paths;\n+import gov.nih.nci.evs.api.model.SearchCriteria;\n import gov.nih.nci.evs.api.model.Terminology;\n import gov.nih.nci.evs.api.support.es.EVSConceptMultiGetResultMapper;\n import gov.nih.nci.evs.api.support.es.ElasticObject;\n import gov.nih.nci.evs.api.support.es.IndexMetadata;\n import gov.nih.nci.evs.api.util.ConceptUtils;\n import gov.nih.nci.evs.api.util.HierarchyUtils;\n import gov.nih.nci.evs.api.util.PathUtils;\n+import gov.nih.nci.evs.api.util.TerminologyUtils;\n \n /**\n  * The implementation for {@link ElasticQueryService}}.\n@@ -57,6 +61,10 @@\n   @Autowired\n   ElasticsearchOperations operations;\n \n+  /** the term utils */\n+  @Autowired\n+  TerminologyUtils termUtils;\n+\n   /**\n    * see superclass *.\n    *\n@@ -609,6 +617,42 @@ public void deleteIndexMetadata(String id) {\n     return associations.stream().filter(a -> a.getCode().equals(code)).findFirst();\n   }\n \n+  /**\n+   * see superclass *.\n+   *\n+   * @param terminology the terminology\n+   * @param ip the ip\n+   * @param fromRecord the starting record for the search\n+   * @param pageSize the size of pages in returned result\n+   * @return the association entry list\n+   * @throws Exception Signals that an exception has occurred.\n+   */\n+  public AssociationEntryResultList getAssociationEntries(String terminology, String label,\n+    int fromRecord, int pageSize) throws Exception {\n+    AssociationEntryResultList al = new AssociationEntryResultList();\n+    Optional<ElasticObject> esObject = getElasticObject(\"associationEntries_\" + label,\n+        termUtils.getTerminology(terminology, true));\n+    // set params in object\n+    List<String> params =\n+        Arrays.asList(terminology, label, String.valueOf(fromRecord), String.valueOf(pageSize));\n+    SearchCriteria criteria = new SearchCriteria();\n+    criteria.setTerminology(params);\n+    al.setParameters(criteria);\n+    // check for results\n+    if (!esObject.isPresent()) {\n+      al.setTotal(0);\n+      return al;\n+    }\n+    List<AssociationEntry> list = esObject.get().getAssociationEntries();\n+    int from = Math.min(fromRecord, list.size());\n+    int to = Math.min(fromRecord + pageSize, list.size());\n+    // package up as AssociationEntryResultList\n+    al.setAssociationEntrys(list.subList(from, to));\n+    al.setTotal(list.size());\n+    logger.info(\"al = \" + al);\n+    return al;\n+  }\n+\n   /**\n    * see superclass *.\n    *"
  },
  {
    "sha": "9dbcac36dba1ff76d3583c8bb602a25df4a32995",
    "filename": "src/main/java/gov/nih/nci/evs/api/service/MetadataService.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/MetadataService.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/MetadataService.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/service/MetadataService.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -4,6 +4,7 @@\n import java.util.List;\n import java.util.Optional;\n \n+import gov.nih.nci.evs.api.model.AssociationEntryResultList;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n \n@@ -205,4 +206,17 @@\n   Optional<Concept> getDefinitionType(final String terminology, final String code,\n     final Optional<String> include) throws Exception;\n \n+  /**\n+   * Returns the association entries.\n+   *\n+   * @param terminology the terminology\n+   * @param code the code\n+   * @param orElse the starting record\n+   * @param orElse2 the page size of the results list\n+   * @return the association entry list\n+   * @throws Exception the exception\n+   */\n+  AssociationEntryResultList getAssociationEntries(String terminology, String label,\n+    Integer fromRecord, Integer pageSize) throws Exception;\n+\n }"
  },
  {
    "sha": "eb432c7e2e807cc0d46aa2f35ee70cb91dfbea40",
    "filename": "src/main/java/gov/nih/nci/evs/api/service/MetadataServiceImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/MetadataServiceImpl.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/MetadataServiceImpl.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/service/MetadataServiceImpl.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -14,6 +14,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.web.server.ResponseStatusException;\n \n+import gov.nih.nci.evs.api.model.AssociationEntryResultList;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n import gov.nih.nci.evs.api.model.IncludeParam;\n@@ -84,7 +85,6 @@\n   @Override\n   public Optional<Concept> getAssociation(String terminology, String code, Optional<String> include)\n     throws Exception {\n-\n     // Verify that it is an association\n     final List<Concept> list = self.getAssociations(terminology,\n         Optional.ofNullable(include.orElse(\"minimal\")), Optional.ofNullable(code));\n@@ -417,4 +417,10 @@\n     return Optional.empty();\n   }\n \n+  /* see superclass */\n+  public AssociationEntryResultList getAssociationEntries(String terminology, String label,\n+    Integer fromRecord, Integer pageSize) throws Exception {\n+    return esQueryService.getAssociationEntries(terminology, label, fromRecord, pageSize);\n+  }\n+\n }"
  },
  {
    "sha": "5c1941131cf2c813f96369727a2c3a7b73991e4c",
    "filename": "src/main/java/gov/nih/nci/evs/api/service/SparqlQueryManagerService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/SparqlQueryManagerService.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/SparqlQueryManagerService.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/service/SparqlQueryManagerService.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -13,6 +13,7 @@\n import com.fasterxml.jackson.databind.JsonMappingException;\n \n import gov.nih.nci.evs.api.model.Association;\n+import gov.nih.nci.evs.api.model.AssociationEntry;\n import gov.nih.nci.evs.api.model.Axiom;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n@@ -625,4 +626,13 @@ void checkPathInHierarchy(String code, HierarchyNode node, Path path, Terminolog\n    */\n   List<HierarchyNode> getPathInHierarchy(String code, Terminology terminology)\n     throws JsonParseException, JsonMappingException, IOException;\n+\n+  /**\n+   * gets association entries.\n+   *\n+   * @param terminology the terminology\n+   * @param association the association\n+   * @return list of AssociationEntries\n+   */\n+  public List<AssociationEntry> getAssociationEntries(Terminology terminology, Concept association);\n }"
  },
  {
    "sha": "7380e6a63a0e73557a511441ae6f2e7c57c91110",
    "filename": "src/main/java/gov/nih/nci/evs/api/service/SparqlQueryManagerServiceImpl.java",
    "status": "modified",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/SparqlQueryManagerServiceImpl.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/SparqlQueryManagerServiceImpl.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/service/SparqlQueryManagerServiceImpl.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -39,6 +39,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n import gov.nih.nci.evs.api.model.Association;\n+import gov.nih.nci.evs.api.model.AssociationEntry;\n import gov.nih.nci.evs.api.model.Axiom;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n@@ -2295,4 +2296,43 @@ public Paths getPaths(Terminology terminology)\n     return concepts;\n   }\n \n+  /**\n+   * gets association entries.\n+   *\n+   * @param terminology the terminology\n+   * @param association the association\n+   * @return list of AssociationEntries\n+   */\n+  @Override\n+  public List<AssociationEntry> getAssociationEntries(Terminology terminology,\n+    Concept association) {\n+    String queryPrefix = queryBuilderService.contructPrefix(terminology.getSource());\n+    String query = queryBuilderService.constructQuery(\"associationEntries\", association.getCode(),\n+        terminology.getGraph());\n+    String res = restUtils.runSPARQL(queryPrefix + query, getQueryURL());\n+    ObjectMapper mapper = new ObjectMapper();\n+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    List<AssociationEntry> entries = new ArrayList<AssociationEntry>();\n+    Sparql sparqlResult = null;\n+    try {\n+      sparqlResult = mapper.readValue(res, Sparql.class);\n+    } catch (Exception e) {\n+      log.error(\"Mapper could not read value in Association Entries\");\n+      e.printStackTrace();\n+    }\n+    Bindings[] bindings = sparqlResult.getResults().getBindings();\n+    for (Bindings b : bindings) {\n+      AssociationEntry entry = new AssociationEntry();\n+      entry.setTerminology(terminology.getTerminology());\n+      entry.setVersion(terminology.getVersion());\n+      entry.setAssociation(association.getName());\n+      entry.setCode(b.getConceptCode().getValue());\n+      entry.setName(b.getConceptLabel().getValue());\n+      entry.setRelatedCode(b.getRelatedConceptCode().getValue());\n+      entry.setRelatedName(b.getRelatedConceptLabel().getValue());\n+      entries.add(entry);\n+    }\n+    return entries;\n+  }\n+\n }"
  },
  {
    "sha": "f9d98f7b895785e8b7c3b6674b1468233f73eed0",
    "filename": "src/main/java/gov/nih/nci/evs/api/service/StardogElasticLoadServiceImpl.java",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/StardogElasticLoadServiceImpl.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/service/StardogElasticLoadServiceImpl.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/service/StardogElasticLoadServiceImpl.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -26,6 +26,7 @@\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import gov.nih.nci.evs.api.model.AssociationEntry;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n import gov.nih.nci.evs.api.model.IncludeParam;\n@@ -264,6 +265,22 @@ public void loadObjects(ElasticLoadConfig config, Terminology terminology,\n         ElasticObject.class);\n     logger.info(\"  Definition Types loaded\");\n \n+    // associationEntries\n+    for (Concept association : associations) {\n+      logger.info(association.getName());\n+      if (association.getName().equals(\"Concept_In_Subset\"))\n+        continue;\n+      List<AssociationEntry> entries =\n+          sparqlQueryManagerService.getAssociationEntries(terminology, association);\n+      ElasticObject associationEntriesObject =\n+          new ElasticObject(\"associationEntries_\" + association.getName());\n+      logger.info(\"    add associationEntries_\" + association.getName() + \" = \" + entries.size());\n+      associationEntriesObject.setAssociationEntries(entries);\n+      operationsService.index(associationEntriesObject, indexName,\n+          ElasticOperationsService.OBJECT_TYPE, ElasticObject.class);\n+    }\n+    logger.info(\"  Association Entries loaded\");\n+\n     logger.info(\"Done loading Elastic Objects!\");\n   }\n "
  },
  {
    "sha": "283e4b30ee95a0b8a8435563eb41c3ff60c7b90b",
    "filename": "src/main/java/gov/nih/nci/evs/api/support/es/ElasticObject.java",
    "status": "modified",
    "additions": 15,
    "deletions": 3,
    "changes": 18,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/support/es/ElasticObject.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/java/gov/nih/nci/evs/api/support/es/ElasticObject.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/java/gov/nih/nci/evs/api/support/es/ElasticObject.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -10,6 +10,7 @@\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonInclude.Include;\n \n+import gov.nih.nci.evs.api.model.AssociationEntry;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.ConceptMinimal;\n import gov.nih.nci.evs.api.model.Paths;\n@@ -25,7 +26,7 @@\n @Document(indexName = \"default_object\", type = ElasticOperationsService.OBJECT_TYPE)\n @JsonInclude(content = Include.NON_EMPTY)\n public class ElasticObject {\n-  \n+\n   @Id\n   private String name;\n \n@@ -34,16 +35,19 @@\n \n   @Field(type = FieldType.Object)\n   private Paths paths;\n-  \n+\n   @Field(type = FieldType.Nested)\n   private List<Concept> concepts;\n \n   @Field(type = FieldType.Nested)\n   private List<ConceptMinimal> conceptMinimals;\n \n+  @Field(type = FieldType.Object)\n+  private List<AssociationEntry> associationEntries;\n+\n   public ElasticObject() {\n   }\n-  \n+\n   public ElasticObject(String name) {\n     this.name = name;\n   }\n@@ -87,4 +91,12 @@ public void setConcepts(List<Concept> concepts) {\n   public void setConceptMinimals(List<ConceptMinimal> conceptMinimals) {\n     this.conceptMinimals = conceptMinimals;\n   }\n+\n+  public List<AssociationEntry> getAssociationEntries() {\n+    return associationEntries;\n+  }\n+\n+  public void setAssociationEntries(List<AssociationEntry> associationEntries) {\n+    this.associationEntries = associationEntries;\n+  }\n }"
  },
  {
    "sha": "f4beae49cbe22ddf3a7ee41a1808e8e98c911895",
    "filename": "src/main/resources/metadata/ncit.json",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/resources/metadata/ncit.json",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/resources/metadata/ncit.json",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/resources/metadata/ncit.json?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -27,6 +27,7 @@\n   \t\"rdfs:label\" : \"label\",\n   \t\"P375\": \"Maps_To\"\n   },\n+  \"subsetMember\": [ \"A8\" ],\n   \"sources\": {\n     \"ACC\": \"American College of Cardiology\",\n     \"ACC/AHA\": \"American College of Cardiology / American Heart Association\","
  },
  {
    "sha": "d6d5dd4ba167a73337f0f781eaae7c0287f8677b",
    "filename": "src/main/resources/sparql-queries.properties",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/resources/sparql-queries.properties",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/main/resources/sparql-queries.properties",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/main/resources/sparql-queries.properties?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -1302,3 +1302,21 @@ inverse.roles.batch=SELECT distinct ?conceptCode ?relationship ?relationshipCode\n     } \\\n } \\\n ORDER BY ?conceptCode ?relationship ?relatedConceptLabel\n+\n+associationEntries=SELECT ?conceptCode ?conceptLabel ?relatedConceptCode ?relatedConceptLabel \\\n+{ \\\n+    GRAPH <#{namedGraph}> \\\n+    { \\\n+        ?x a owl:Class . \\\n+        ?x :NHC0 ?conceptCode . \\\n+        ?x rdfs:label ?conceptLabel . \\\n+        ?y a owl:AnnotationProperty . \\\n+        ?x ?y ?z . \\\n+        ?z a owl:Class . \\\n+        ?z rdfs:label ?relatedConceptLabel . \\\n+        ?z :NHC0 ?relatedConceptCode . \\\n+        ?y :NHC0 \"#{conceptCode}\" . \\\n+        ?y rdfs:range ?y_range \\\n+    } \\\n+    FILTER (str(?y_range)=\\\"http://www.w3.org/2001/XMLSchema#anyURI\\\") \\\n+}"
  },
  {
    "sha": "2bd2432ca504db4c7a2fbda64100a588ae207345",
    "filename": "src/test/java/gov/nih/nci/evs/api/controller/ConceptControllerTests.java",
    "status": "modified",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/test/java/gov/nih/nci/evs/api/controller/ConceptControllerTests.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/test/java/gov/nih/nci/evs/api/controller/ConceptControllerTests.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/test/java/gov/nih/nci/evs/api/controller/ConceptControllerTests.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -30,6 +30,8 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n import gov.nih.nci.evs.api.model.Association;\n+import gov.nih.nci.evs.api.model.AssociationEntry;\n+import gov.nih.nci.evs.api.model.AssociationEntryResultList;\n import gov.nih.nci.evs.api.model.Concept;\n import gov.nih.nci.evs.api.model.Definition;\n import gov.nih.nci.evs.api.model.DisjointWith;\n@@ -1126,6 +1128,92 @@ public void testCheckDefsAndSynsAreRight() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test association entries API call\n+   *\n+   * @throws Exception the exception\n+   */\n+  @Test\n+  public void testAssociationEntries() throws Exception {\n+    String url = null;\n+    MvcResult result = null;\n+    String content = null;\n+    AssociationEntryResultList resultList = null;\n+\n+    // Test with valid association label\n+    url = baseUrl + \"/ncit/associations/Has_Target\";\n+    log.info(\"Testing url - \" + url);\n+    result = mvc.perform(get(url)).andExpect(status().isOk()).andReturn();\n+    content = result.getResponse().getContentAsString();\n+    log.info(\" content = \" + content);\n+    resultList = new ObjectMapper().readValue(content, AssociationEntryResultList.class);\n+    assertThat(resultList).isNotNull();\n+    assertThat(resultList.getTimeTaken() > 0);\n+    assertThat(resultList.getTotal() > 0);\n+    assertThat(resultList.getParameters().getTerminology().contains(\"Has_Target\"));\n+    for (AssociationEntry assoc : resultList.getAssociationEntrys()) {\n+      assertThat(assoc.getAssociation().equals(\"Has_Target\"));\n+    }\n+\n+    // Test with valid code -> label\n+    url = baseUrl + \"/ncit/associations/A7\";\n+    log.info(\"Testing url - \" + url);\n+    result = mvc.perform(get(url)).andExpect(status().isOk()).andReturn();\n+    content = result.getResponse().getContentAsString();\n+    log.info(\" content = \" + content);\n+    resultList = new ObjectMapper().readValue(content, AssociationEntryResultList.class);\n+    assertThat(resultList).isNotNull();\n+    assertThat(resultList.getTimeTaken() > 0);\n+    assertThat(resultList.getTotal() > 0);\n+    assertThat(resultList.getParameters().getTerminology().contains(\"Has_Target\"));\n+    for (AssociationEntry assoc : resultList.getAssociationEntrys()) {\n+      assertThat(assoc.getAssociation().equals(\"Has_Target\"));\n+    }\n+\n+    // Test with association with no data\n+    url = baseUrl + \"/ncit/associations/Has_CDRH_Parent\";\n+    log.info(\"Testing url - \" + url);\n+    result = mvc.perform(get(url)).andExpect(status().isOk()).andReturn();\n+    content = result.getResponse().getContentAsString();\n+    log.info(\" content = \" + content);\n+    resultList = new ObjectMapper().readValue(content, AssociationEntryResultList.class);\n+    assertThat(resultList).isNotNull();\n+    assertThat(resultList.getTimeTaken() > 0);\n+    assertThat(resultList.getTotal() == 0);\n+    assertThat(resultList.getParameters().getTerminology().contains(\"Has_CDRH_Parent\"));\n+\n+    // Test that concept subset is properly 404'd\n+    url = baseUrl + \"/ncit/associations/A8\";\n+    log.info(\"Testing url - \" + url);\n+    result = mvc.perform(get(url)).andExpect(status().isNotFound()).andReturn();\n+\n+    // Test pageSize\n+    url = baseUrl + \"/ncit/associations/Has_Target?pageSize=12\";\n+    log.info(\"Testing url - \" + url);\n+    result = mvc.perform(get(url)).andExpect(status().isOk()).andReturn();\n+    content = result.getResponse().getContentAsString();\n+    log.info(\" content = \" + content);\n+    resultList = new ObjectMapper().readValue(content, AssociationEntryResultList.class);\n+    assertThat(resultList).isNotNull();\n+    assertThat(resultList.getTotal() > 0);\n+    assertThat(resultList.getParameters().getTerminology().contains(\"12\"));\n+    assertThat(resultList.getAssociationEntrys().size() == 12);\n+\n+    // Test fromRecord\n+    url = baseUrl + \"/ncit/associations/Has_Target?fromRecord=1\";\n+    log.info(\"Testing url - \" + url);\n+    result = mvc.perform(get(url)).andExpect(status().isOk()).andReturn();\n+    content = result.getResponse().getContentAsString();\n+    log.info(\" content = \" + content);\n+    resultList = new ObjectMapper().readValue(content, AssociationEntryResultList.class);\n+    assertThat(resultList).isNotNull();\n+    assertThat(resultList.getTotal() > 0);\n+    assertThat(resultList.getParameters().getTerminology().contains(\"1\"));\n+    assertThat(resultList.getAssociationEntrys().get(0).getCode() == \"C125718\");\n+    assertThat(resultList.getAssociationEntrys().get(0).getRelatedCode() == \"C128784\");\n+\n+  }\n+\n   /**\n    * Checks if hierarchy has a leaf node anywhere in the hierarchy.\n    *"
  },
  {
    "sha": "7871a1ac9466f9eac62e8aaf43200e8d2acd17eb",
    "filename": "src/test/java/gov/nih/nci/evs/api/model/TerminologyMetadataUnitTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/NCIEVS/evsrestapi/blob/fd9ed56bb65307331ae283537d340293d3c18f15/src/test/java/gov/nih/nci/evs/api/model/TerminologyMetadataUnitTest.java",
    "raw_url": "https://github.com/NCIEVS/evsrestapi/raw/fd9ed56bb65307331ae283537d340293d3c18f15/src/test/java/gov/nih/nci/evs/api/model/TerminologyMetadataUnitTest.java",
    "contents_url": "https://api.github.com/repos/NCIEVS/evsrestapi/contents/src/test/java/gov/nih/nci/evs/api/model/TerminologyMetadataUnitTest.java?ref=fd9ed56bb65307331ae283537d340293d3c18f15",
    "patch": "@@ -106,6 +106,7 @@ public void testModelEqualsHashcode() throws Exception {\n     tester.include(\"synonymSubSource\");\n     tester.include(\"synonymTermType\");\n     tester.include(\"termTypes\");\n+    tester.include(\"subsetMember\");\n \n     tester.proxy(Map.class, 1, m1);\n     tester.proxy(Map.class, 2, m2);"
  }
]
