[
  {
    "sha": "ffa6a7e0767b2603747819f2c07e8ad5d2360d1b",
    "filename": "docs/manual/contributors.tex",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/UtR491/checker-framework/blob/80b289eb76274256375d3a88714ab1236e946719/docs/manual/contributors.tex",
    "raw_url": "https://github.com/UtR491/checker-framework/raw/80b289eb76274256375d3a88714ab1236e946719/docs/manual/contributors.tex",
    "contents_url": "https://api.github.com/repos/UtR491/checker-framework/contents/docs/manual/contributors.tex?ref=80b289eb76274256375d3a88714ab1236e946719",
    "patch": "@@ -109,6 +109,7 @@\n Tony Wang,\n Trask Stalnaker,\n Travis Haagen,\n+Utkarsh Rai,\n Utsav Oza,\n Vatsal Sura,\n Vladimir Sitnikov,"
  },
  {
    "sha": "8dc8e7f70f05b7a7f2d35aba695534cd9d157ae7",
    "filename": "javacutil/src/main/java/org/checkerframework/javacutil/AnnotationUtils.java",
    "status": "modified",
    "additions": 80,
    "deletions": 22,
    "changes": 102,
    "blob_url": "https://github.com/UtR491/checker-framework/blob/80b289eb76274256375d3a88714ab1236e946719/javacutil/src/main/java/org/checkerframework/javacutil/AnnotationUtils.java",
    "raw_url": "https://github.com/UtR491/checker-framework/raw/80b289eb76274256375d3a88714ab1236e946719/javacutil/src/main/java/org/checkerframework/javacutil/AnnotationUtils.java",
    "contents_url": "https://api.github.com/repos/UtR491/checker-framework/contents/javacutil/src/main/java/org/checkerframework/javacutil/AnnotationUtils.java?ref=80b289eb76274256375d3a88714ab1236e946719",
    "patch": "@@ -794,20 +794,24 @@ public NoSuchElementException(String message) {\n \n     /**\n      * Get the element with the name {@code elementName} of the annotation {@code anno}, where the\n-     * element has an array type. One element of the result is expected to have type {@code\n+     * element has an array type. An element of the result is expected to have type {@code\n      * expectedType}.\n      *\n      * <p>Parameter useDefaults is used to determine whether default values should be used for\n      * annotation values. Finding defaults requires more computation, so should be false when no\n      * defaulting is needed.\n      *\n+     * <p>{@link #getElementValueArray(AnnotationMirror, ExecutableElement, Class, boolean)} is more\n+     * efficient than this method.\n+     *\n      * @param anno the annotation to disassemble\n      * @param elementName the name of the element to access\n      * @param expectedType the expected type used to cast the return type\n      * @param <T> the class of the expected type\n      * @param useDefaults whether to apply default values to the element\n      * @return the value of the element with the given name; it is a new list, so it is safe for\n      *     clients to side-effect\n+     * @see #getElementValueArray(AnnotationMirror, ExecutableElement, Class, boolean)\n      */\n     public static <T> List<T> getElementValueArray(\n             AnnotationMirror anno,\n@@ -816,27 +820,40 @@ public NoSuchElementException(String message) {\n             boolean useDefaults) {\n         @SuppressWarnings(\"unchecked\")\n         List<AnnotationValue> la = getElementValue(anno, elementName, List.class, useDefaults);\n-        List<T> result = new ArrayList<>(la.size());\n-        for (AnnotationValue a : la) {\n-            try {\n-                result.add(expectedType.cast(a.getValue()));\n-            } catch (Throwable t) {\n-                String err1 =\n-                        String.format(\n-                                \"getElementValueArray(%n  anno=%s,%n  elementName=%s,%n  expectedType=%s,%n  useDefaults=%s)%n\",\n-                                anno, elementName, expectedType, useDefaults);\n-                String err2 =\n-                        String.format(\n-                                \"Error in cast:%n  expectedType=%s%n  a=%s [%s]%n  a.getValue()=%s [%s]\",\n-                                expectedType,\n-                                a,\n-                                a.getClass(),\n-                                a.getValue(),\n-                                a.getValue().getClass());\n-                throw new BugInCF(err1 + \"; \" + err2, t);\n-            }\n-        }\n-        return result;\n+        return getValueArray(anno, elementName, expectedType, useDefaults, la);\n+    }\n+\n+    /**\n+     * Get the element {@code executableElement} of the annotation {@code anno}, where the element\n+     * has an array type. An element of the result is expected to have type {@code expectedType}.\n+     *\n+     * <p>Parameter useDefaults is used to determine whether default values should be used for\n+     * annotation values. Finding defaults requires more computation, so should be false when no\n+     * defaulting is needed.\n+     *\n+     * @param anno the annotation to disassemble\n+     * @param executableElement the element to access\n+     * @param expectedType the expected type used to cast the return type\n+     * @param <T> the class of the expected type\n+     * @param useDefaults whether to apply default values to the element\n+     * @return the value of the element with the given name; it is a new list, so it is safe for\n+     *     clients to side-effect\n+     */\n+    public static <T> List<T> getElementValueArray(\n+            AnnotationMirror anno,\n+            ExecutableElement executableElement,\n+            Class<T> expectedType,\n+            boolean useDefaults) {\n+        AnnotationValue nonNullGroups = anno.getElementValues().get(executableElement);\n+        @SuppressWarnings(\"unchecked\")\n+        List<AnnotationValue> la =\n+                List.class.cast(\n+                        nonNullGroups != null\n+                                ? nonNullGroups.getValue()\n+                                : useDefaults\n+                                        ? executableElement.getDefaultValue().getValue()\n+                                        : Collections.EMPTY_LIST);\n+        return getValueArray(anno, executableElement, expectedType, useDefaults, la);\n     }\n \n     /**\n@@ -1049,6 +1066,47 @@ public static boolean hasTypeQualifierElementTypes(ElementType[] elements, Class\n         return hasTypeUse;\n     }\n \n+    /**\n+     * Extract the values from the list of annotation values {@code la}. The type of values is\n+     * {@code expectedType}. Other arguments are used in diagnostic messages.\n+     *\n+     * @param anno the annotation whose element to access\n+     * @param elementName the name of the element to access\n+     * @param expectedType the expected type of the elements of the array element\n+     * @param <T> the class of the expected type of the elements of the array element\n+     * @param la the list of annotation values which correspond to literals in the array\n+     * @param useDefaults whether to apply default values to the element\n+     * @return the value of the element with the given name as a {@code List}.\n+     */\n+    private static <T> List<T> getValueArray(\n+            AnnotationMirror anno,\n+            Object elementName,\n+            Class<T> expectedType,\n+            boolean useDefaults,\n+            List<AnnotationValue> la) {\n+        List<T> result = new ArrayList<>(la.size());\n+        for (AnnotationValue a : la) {\n+            try {\n+                result.add(expectedType.cast(a.getValue()));\n+            } catch (Throwable t) {\n+                String err1 =\n+                        String.format(\n+                                \"getElementValueArray(%n  anno=%s,%n  elementName=%s,%n  expectedType=%s,%n  useDefaults=%s)%n\",\n+                                anno, elementName, expectedType, useDefaults);\n+                String err2 =\n+                        String.format(\n+                                \"Error in cast:%n  expectedType=%s%n  a=%s [%s]%n  a.getValue()=%s [%s]\",\n+                                expectedType,\n+                                a,\n+                                a.getClass(),\n+                                a.getValue(),\n+                                a.getValue().getClass());\n+                throw new BugInCF(err1 + \"; \" + err2, t);\n+            }\n+        }\n+        return result;\n+    }\n+\n     /**\n      * Returns a string representation of the annotation mirrors, using simple (not fully-qualified)\n      * names."
  }
]
