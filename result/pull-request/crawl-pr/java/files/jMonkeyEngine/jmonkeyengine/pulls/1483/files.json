[
  {
    "sha": "649b09ee80ae76c1baf9fe8542a096cf5248fed0",
    "filename": "jme3-android/src/main/java/com/jme3/input/android/AndroidJoystickJoyInput14.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/jMonkeyEngine/jmonkeyengine/blob/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-android/src/main/java/com/jme3/input/android/AndroidJoystickJoyInput14.java",
    "raw_url": "https://github.com/jMonkeyEngine/jmonkeyengine/raw/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-android/src/main/java/com/jme3/input/android/AndroidJoystickJoyInput14.java",
    "contents_url": "https://api.github.com/repos/jMonkeyEngine/jmonkeyengine/contents/jme3-android/src/main/java/com/jme3/input/android/AndroidJoystickJoyInput14.java?ref=d906af19fc8c890a326316439184e417f3ce6f9f",
    "patch": "@@ -180,6 +180,7 @@ public void destroy() {\n \n     public boolean onGenericMotion(MotionEvent event) {\n         boolean consumed = false;\n+        float rawValue, value;\n //        logger.log(Level.INFO, \"onGenericMotion event: {0}\", event);\n         event.getDeviceId();\n         event.getSource();\n@@ -188,7 +189,8 @@ public boolean onGenericMotion(MotionEvent event) {\n         if (joystick != null) {\n             for (int androidAxis: joystick.getAndroidAxes()) {\n                 String axisName = MotionEvent.axisToString(androidAxis);\n-                float value = event.getAxisValue(androidAxis);\n+                rawValue = event.getAxisValue(androidAxis);\n+                value = JoystickCompatibilityMappings.remapAxisRange(joystick.getAxis(androidAxis), rawValue);\n                 int action = event.getAction();\n                 if (action == MotionEvent.ACTION_MOVE) {\n //                    logger.log(Level.INFO, \"MOVE axis num: {0}, axisName: {1}, value: {2}\",\n@@ -197,7 +199,7 @@ public boolean onGenericMotion(MotionEvent event) {\n                     if (axis != null) {\n //                        logger.log(Level.INFO, \"MOVE axis num: {0}, axisName: {1}, value: {2}, deadzone: {3}\",\n //                                new Object[]{androidAxis, axisName, value, axis.getDeadZone()});\n-                        JoyAxisEvent axisEvent = new JoyAxisEvent(axis, value);\n+                        JoyAxisEvent axisEvent = new JoyAxisEvent(axis, value, rawValue);\n                         joyInput.addEvent(axisEvent);\n                         consumed = true;\n                     } else {\n@@ -319,7 +321,7 @@ protected JoystickButton addButton( int keyCode ) {\n                 original = JoystickButton.BUTTON_11;\n             }\n \n-            String logicalId = JoystickCompatibilityMappings.remapComponent( getName(), original );\n+            String logicalId = JoystickCompatibilityMappings.remapButton( getName(), original );\n             if( logicalId == null ? original != null : !logicalId.equals(original) ) {\n                 logger.log(Level.FINE, \"Remapped: {0} to: {1}\",\n                         new Object[]{original, logicalId});\n@@ -350,7 +352,7 @@ protected JoystickAxis addAxis(MotionRange motionRange) {\n             } else if (motionRange.getAxis() == MotionEvent.AXIS_HAT_Y) {\n                 original = JoystickAxis.POV_Y;\n             }\n-            String logicalId = JoystickCompatibilityMappings.remapComponent( getName(), original );\n+            String logicalId = JoystickCompatibilityMappings.remapAxis( getName(), original );\n             if( logicalId == null ? original != null : !logicalId.equals(original) ) {\n                 logger.log(Level.FINE, \"Remapped: {0} to: {1}\",\n                         new Object[]{original, logicalId});"
  },
  {
    "sha": "0cf576db3ed3b508ac936766f722d173999462cb",
    "filename": "jme3-android/src/main/java/com/jme3/input/android/AndroidSensorJoyInput.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/jMonkeyEngine/jmonkeyengine/blob/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-android/src/main/java/com/jme3/input/android/AndroidSensorJoyInput.java",
    "raw_url": "https://github.com/jMonkeyEngine/jmonkeyengine/raw/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-android/src/main/java/com/jme3/input/android/AndroidSensorJoyInput.java",
    "contents_url": "https://api.github.com/repos/jMonkeyEngine/jmonkeyengine/contents/jme3-android/src/main/java/com/jme3/input/android/AndroidSensorJoyInput.java?ref=d906af19fc8c890a326316439184e417f3ce6f9f",
    "patch": "@@ -374,7 +374,7 @@ private boolean updateOrientation() {\n                                 sensorData.haveData = true;\n                             } else {\n                                 if (axis.isChanged()) {\n-                                    joyInput.addEvent(new JoyAxisEvent(axis, axis.getJoystickAxisValue()));\n+                                    joyInput.addEvent(new JoyAxisEvent(axis, axis.getJoystickAxisValue(), axis.getJoystickAxisValue()));\n                                 }\n                             }\n                         }\n@@ -553,7 +553,7 @@ public void onSensorChanged(SensorEvent se) {\n                             sensorData.haveData = true;\n                         } else {\n                             if (axis.isChanged()) {\n-                                JoyAxisEvent event = new JoyAxisEvent(axis, axis.getJoystickAxisValue());\n+                                JoyAxisEvent event = new JoyAxisEvent(axis, axis.getJoystickAxisValue(), axis.getJoystickAxisValue());\n //                                logger.log(Level.INFO, \"adding JoyAxisEvent: {0}\", event);\n                                 joyInput.addEvent(event);\n //                                joyHandler.addEvent(new JoyAxisEvent(axis, axis.getJoystickAxisValue()));"
  },
  {
    "sha": "1b3176b2a504e633b92a6b184b6479ee8621fb99",
    "filename": "jme3-core/src/main/java/com/jme3/input/JoystickCompatibilityMappings.java",
    "status": "modified",
    "additions": 329,
    "deletions": 22,
    "changes": 351,
    "blob_url": "https://github.com/jMonkeyEngine/jmonkeyengine/blob/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-core/src/main/java/com/jme3/input/JoystickCompatibilityMappings.java",
    "raw_url": "https://github.com/jMonkeyEngine/jmonkeyengine/raw/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-core/src/main/java/com/jme3/input/JoystickCompatibilityMappings.java",
    "contents_url": "https://api.github.com/repos/jMonkeyEngine/jmonkeyengine/contents/jme3-core/src/main/java/com/jme3/input/JoystickCompatibilityMappings.java?ref=d906af19fc8c890a326316439184e417f3ce6f9f",
    "patch": "@@ -54,16 +54,24 @@\n  *  has been initialized in the InputManager.</p>\n  *\n  *  @author    Paul Speed\n+ *  @author Markil3\n  */\n public class JoystickCompatibilityMappings {\n \n     private static final Logger logger = Logger.getLogger(JoystickCompatibilityMappings.class.getName());\n \n+    static {\n+        logger.setLevel(Level.FINE);\n+    }\n+\n     // List of resource paths to check for the joystick-mapping.properties\n     // files.\n     private static String[] searchPaths = { \"joystick-mapping.properties\" };  \n \n     private static Map<String,Map<String,String>> joystickMappings = new HashMap<String,Map<String,String>>();\n+    private static Map<String,Map<String, AxisData>> axisMappings = new HashMap<String,Map<String, AxisData>>();\n+    private static Map<JoystickAxis, float[]> axisRangeMappings = new HashMap<>();\n+    private static Map<String,Map<String, String>> buttonMappings = new HashMap<String,Map<String, String>>();\n \n     // Remaps names by regex.\n     private static Map<Pattern, String> nameRemappings = new HashMap<>();\n@@ -79,9 +87,175 @@\n             result = new HashMap<String,String>();\n             joystickMappings.put(joystickName.trim(),result);\n         }\n-        return result;          \n+        return result;\n     }\n- \n+\n+    /**\n+     * Obtains mappings specific to the joystick axis\n+     * @param joystickName\n+     * @param create\n+     * @return\n+     * @author Markil3\n+     */\n+    protected static Map<String,AxisData> getAxisMappings( String joystickName, boolean create ) {\n+        Map<String,AxisData> result =axisMappings.get(joystickName.trim());\n+        if ( result == null && create ) {\n+            result = new HashMap<String,AxisData>();\n+            axisMappings.put(joystickName.trim(),result);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Obtains mappings specific to the joystick axis\n+     * @param joystickName\n+     * @param create\n+     * @return\n+     * @author Markil3\n+     */\n+    protected static Map<String,String> getButtonMappings( String joystickName, boolean create ) {\n+        Map<String,String> result = buttonMappings.get(joystickName.trim());\n+        if ( result == null && create ) {\n+            result = new HashMap<String,String>();\n+            buttonMappings.put(joystickName.trim(),result);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * @param axis\n+     * @param currentValue - The raw value the system is outputting, on a scale of -1.0 to 1.0.\n+     * @return\n+     * @author Markil3\n+     */\n+    public static float remapAxisRange(JoystickAxis axis, float currentValue) {\n+        String joyName = axis.getJoystick().getName();\n+        Map<String, AxisData> map;\n+        float[] range = axisRangeMappings.get(axis);\n+        if (range == null) {\n+            map = getAxisMappings(joyName, false);\n+            if (map != null && map.containsKey(axis.getName())) {\n+                range = map.get(axis.getName()).range;\n+                axisRangeMappings.put(axis, range);\n+            } else {\n+                // Try the normalized name\n+                joyName = getNormalizedName(joyName);\n+                if (joyName != null) {\n+                    map = getAxisMappings(joyName, false);\n+                    if (map != null && map.containsKey(axis.getName())) {\n+                        range = map.get(axis.getName()).range;\n+                        axisRangeMappings.put(axis, range);\n+                    }\n+                }\n+            }\n+        }\n+        if (range == null) {\n+            axisRangeMappings.put(axis, new float[0]);\n+            return currentValue;\n+        }\n+\n+        /*\n+         * If we have an array of size 0, that means we have acknowledged this axis (so we don't\n+         * need to go searching for it every tick), but that there is no remapping.\n+         */\n+        if (range.length == 0) {\n+            return currentValue;\n+        }\n+\n+        return (currentValue + range[1] + range[0]) * ((range[1] - range[0]) / 2);\n+    }\n+\n+    /**\n+     * @param joystickName\n+     * @param componentId\n+     * @return\n+     * @author Markil3\n+     */\n+    public static String remapAxis(String joystickName, String componentId) {\n+        logger.log(Level.FINE, \"remapAxis(\" + joystickName + \", \" + componentId + \")\");\n+\n+        // Always try the specific name first.\n+        joystickName = joystickName.trim();\n+        Map map = getAxisMappings(joystickName, false);\n+        if (map != null && map.containsKey(componentId)) {\n+            logger.log(Level.FINE, \"returning remapped axis:\" + map.get(componentId));\n+            return ((AxisData) map.get(componentId)).name;\n+        }\n+\n+        map = getMappings(joystickName, false);\n+        if (map != null && map.containsKey(componentId)) {\n+            logger.log(Level.FINE, \"returning remapped axis:\" + map.get(componentId));\n+            return ((String) map.get(componentId));\n+        }\n+\n+        // Try the normalized name\n+        joystickName = getNormalizedName(joystickName);\n+        logger.log(Level.FINE, \"normalized joystick name:\" + joystickName);\n+        if (joystickName == null) {\n+            return componentId;\n+        }\n+\n+        map = getAxisMappings(joystickName, false);\n+        if (map != null && map.containsKey(componentId)) {\n+            logger.log(Level.FINE, \"returning remapped:\" + map.get(componentId));\n+            return ((AxisData) map.get(componentId)).name;\n+        }\n+\n+        map = getMappings(joystickName, false);\n+        if (map != null && map.containsKey(componentId)) {\n+            logger.log(Level.FINE, \"returning remapped:\" + map.get(componentId));\n+            return ((String) map.get(componentId));\n+        }\n+\n+        return componentId;\n+    }\n+\n+    /**\n+     * @param joystickName\n+     * @param componentId\n+     * @return\n+     * @author Markil3\n+     */\n+    public static String remapButton(String joystickName, String componentId) {\n+        logger.log(Level.FINE, \"remapAxis(\" + joystickName + \", \" + componentId + \")\");\n+\n+\n+        // Always try the specific name first.\n+        joystickName = joystickName.trim();\n+        Map<String, String> map = getButtonMappings(joystickName, false);\n+        if (map != null && map.containsKey(componentId)) {\n+            logger.log(Level.FINE, \"returning remapped axis:\" + map.get(componentId));\n+            return map.get(componentId);\n+        }\n+\n+        map = getMappings(joystickName, false);\n+        if (map != null && map.containsKey(componentId)) {\n+            logger.log(Level.FINE, \"returning remapped axis:\" + map.get(componentId));\n+            return map.get(componentId);\n+        }\n+\n+        // Try the normalized name\n+        joystickName = getNormalizedName(joystickName);\n+        logger.log(Level.FINE, \"normalized joystick name:\" + joystickName);\n+        if (joystickName == null) {\n+            return componentId;\n+        }\n+\n+        map = getButtonMappings(joystickName, false);\n+        if (map != null && map.containsKey(componentId)) {\n+            logger.log(Level.FINE, \"returning remapped:\" + map.get(componentId));\n+            return map.get(componentId);\n+        }\n+\n+        map = getMappings(joystickName, false);\n+        if (map != null && map.containsKey(componentId)) {\n+            logger.log(Level.FINE, \"returning remapped:\" + map.get(componentId));\n+            return map.get(componentId);\n+        }\n+\n+        return componentId;\n+    }\n+\n     /**\n      *  Returns the remapped version of the axis/button name if there\n      *  is a mapping for it otherwise it returns the original name.\n@@ -90,29 +264,55 @@ public static String remapComponent( String joystickName, String componentId ) {\n         logger.log(Level.FINE, \"remapComponent(\" + joystickName + \", \" + componentId + \")\");\n          \n         // Always try the specific name first.\n-        joystickName = joystickName.trim();     \n-        Map<String,String> map = getMappings(joystickName, false);   \n+        joystickName = joystickName.trim();\n+        Map<String,String> map = getMappings(joystickName, false);\n         if( map != null && map.containsKey(componentId) ) {\n-            logger.log(Level.FINE, \"returning remapped:\" + map.get(componentId));        \n+            logger.log(Level.FINE, \"returning remapped:\" + map.get(componentId));\n             return map.get(componentId);\n         }\n         // Try the normalized name\n         joystickName = getNormalizedName(joystickName);\n-        logger.log(Level.FINE, \"normalized joystick name:\" + joystickName);         \n+        logger.log(Level.FINE, \"normalized joystick name:\" + joystickName);\n         if( joystickName == null ) {\n             return componentId;\n         }\n         map = getMappings(joystickName, false);\n         if( map == null ) {\n             return componentId;\n-        }   \n+        }\n         if( !map.containsKey(componentId) ) {\n             return componentId;\n         }\n-        logger.log(Level.FINE, \"returning remapped:\" + map.get(componentId));        \n+        logger.log(Level.FINE, \"returning remapped:\" + map.get(componentId));\n         return map.get(componentId); \n-    }       \n- \n+    }\n+\n+    /**\n+     * Returns a set of Joystick axis name remappings if they exist otherwise\n+     * it returns an empty map.\n+     *\n+     * @author Markil3\n+     */\n+    public static Map<String, AxisData> getJoystickAxisMappings(String joystickName) {\n+        Map<String, AxisData> result = getAxisMappings(joystickName.trim(), false);\n+        if (result == null)\n+            return Collections.emptyMap();\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    /**\n+     * Returns a set of Joystick button name remappings if they exist otherwise\n+     * it returns an empty map.\n+     *\n+     * @author Markil3\n+     */\n+    public static Map<String, String> getJoystickButtonMappings(String joystickName) {\n+        Map<String, String> result = getButtonMappings(joystickName.trim(), false);\n+        if (result == null)\n+            return Collections.emptyMap();\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n     /**\n      *  Returns a set of Joystick axis/button name remappings if they exist otherwise\n      *  it returns an empty map.\n@@ -123,42 +323,139 @@ public static String remapComponent( String joystickName, String componentId ) {\n             return Collections.emptyMap();\n         return Collections.unmodifiableMap(result);\n     }\n-    \n+\n+    /**\n+     * Adds a single Joystick axis or button remapping based on the\n+     * joystick's name and axis/button name.  The \"remap\" value will be\n+     * used instead.\n+     *\n+     * @author Markil3\n+     */\n+    public static void addAxisMapping(String stickName, String sourceComponentId, String remapId) {\n+        logger.log(Level.FINE, \"addAxisMapping(\" + stickName + \", \" + sourceComponentId + \", \" + remapId + \")\");\n+        getAxisMappings(stickName, true).put(sourceComponentId, new AxisData(remapId, new float[0]));\n+    }\n+\n+    /**\n+     * Adds a single Joystick axis or button remapping based on the\n+     * joystick's name and axis/button name.  The \"remap\" value will be\n+     * used instead.\n+     *\n+     * @author Markil3\n+     */\n+    public static void addAxisMapping(String stickName, String sourceComponentId, String remapId, float[] range) {\n+        logger.log(Level.FINE, \"addAxisMapping(\" + stickName + \", \" + sourceComponentId + \", \" + remapId + \")\");\n+        if (range.length != 2) {\n+            throw new IllegalArgumentException(\"The range must have exactly 2 elements\");\n+        }\n+        getAxisMappings(stickName, true).put(sourceComponentId, new AxisData(remapId, range));\n+    }\n+\n     /**\n-     *  Adds a single Joystick axis or button remapping based on the \n+     * Adds a single Joystick axis or button remapping based on the\n+     * joystick's name and axis/button name.  The \"remap\" value will be\n+     * used instead.\n+     *\n+     * @author Markil3\n+     */\n+    public static void addButtonMapping(String stickName, String sourceComponentId, String remapId) {\n+        logger.log(Level.FINE, \"addButtonMapping(\" + stickName + \", \" + sourceComponentId + \", \" + remapId + \")\");\n+        getButtonMappings(stickName, true).put(sourceComponentId, remapId);\n+    }\n+\n+    /**\n+     *  Adds a single Joystick axis or button remapping based on the\n      *  joystick's name and axis/button name.  The \"remap\" value will be\n      *  used instead.\n      */\n     public static void addMapping( String stickName, String sourceComponentId, String remapId ) {\n-        logger.log(Level.FINE, \"addMapping(\" + stickName + \", \" + sourceComponentId + \", \" + remapId + \")\" );        \n+        logger.log(Level.FINE, \"addMapping(\" + stickName + \", \" + sourceComponentId + \", \" + remapId + \")\" );\n         getMappings(stickName, true).put( sourceComponentId, remapId );\n     } \n  \n     /**\n      *  Adds a preconfigured set of mappings in Properties object\n-     *  form where the names are dot notation \"joystick\".\"axis/button\"\n+     *  form where the names are dot notation\n+     *  \"axis\"/\"button\"/\"\". \"joystick\".\"axis/button name\"\n      *  and the values are the remapped component name.  This calls\n      *  addMapping(stickName, sourceComponent, remap) for every property\n      *  that it is able to parse.\n+     *\n+     * @author Paul Speed\n+     * @author Markil 3\n      */\n     public static void addMappings( Properties p ) {\n+        final String AXIS_LABEL = \"axis\";\n+        final String BUTTON_LABEL = \"button\";\n+\n+        float[] range;\n+        int lBrackIndex, rBrackIndex, commaIndex;\n+\n         for( Map.Entry<Object,Object> e : p.entrySet() ) {\n+            range = null;\n             String key = String.valueOf(e.getKey()).trim();\n             \n+            int firstSplit = key.indexOf( '.' );\n             int split = key.lastIndexOf( '.' );\n             if( split < 0 ) {\n                 logger.log(Level.WARNING, \"Skipping mapping:{0}\", e);\n                 continue;\n             }\n             \n-            String stick = key.substring(0, split).trim();\n-            String component = key.substring(split+1).trim();            \n+            String type;\n+            if (firstSplit >= 0 && firstSplit != split) {\n+                type = key.substring(0, firstSplit).trim();\n+                if (!type.equals(AXIS_LABEL) && !type.equals(BUTTON_LABEL)) {\n+                    /*\n+                     * In this case, the \"type\" is probably a part of the\n+                     * joystick name.\n+                     */\n+                    firstSplit = -1;\n+                    type = \"\";\n+                }\n+            } else {\n+                firstSplit = -1;\n+                type = \"\";\n+            }\n+            String stick = key.substring(firstSplit + 1, split).trim();\n+            String component = key.substring(split+1).trim();\n             String value = String.valueOf(e.getValue()).trim();\n             if( \"regex\".equals(component) ) {\n                 // It's a name remapping\n                 addJoystickNameRegex(value, stick);\n             }\n-            addMapping(stick, component, value);\n+            if ((lBrackIndex = value.indexOf('[')) > 0) {\n+                /*\n+                 * This means that there is an axis range.\n+                 */\n+                range = new float[2];\n+                rBrackIndex = value.indexOf(']');\n+                commaIndex = value.indexOf(',');\n+                if (rBrackIndex > -1 && commaIndex > -1) {\n+                    try {\n+                        range[0] = Float.parseFloat(value.substring(lBrackIndex + 1, commaIndex).trim());\n+                        range[1] = Float.parseFloat(value.substring(commaIndex + 1, rBrackIndex).trim());\n+                        value = value.substring(0, lBrackIndex).trim();\n+                        type = AXIS_LABEL;\n+                    } catch (NumberFormatException nfe) {\n+                        logger.log(Level.SEVERE, \"Could not parse axis range \\\"\" + value.substring(lBrackIndex) + \"\\\"\", nfe);\n+                    }\n+                }\n+            }\n+            switch (type) {\n+                case AXIS_LABEL:\n+                    if (range == null) {\n+                        addAxisMapping(stick, component, value);\n+                    } else {\n+                        addAxisMapping(stick, component, value, range);\n+                    }\n+                    break;\n+                case BUTTON_LABEL:\n+                    addButtonMapping(stick, component, value);\n+                    break;\n+                default:\n+                    addMapping(stick, component, value);\n+            }\n         }\n     }\n  \n@@ -189,27 +486,27 @@ protected static String getNormalizedName( String name ) {\n     /**\n      *  Loads a set of compatibility mappings from the property file\n      *  specified by the given URL.\n-     */   \n+     */\n     public static void loadMappingProperties( URL u ) throws IOException {\n         logger.log(Level.FINE, \"Loading mapping properties:{0}\", u);\n         InputStream in = u.openStream();\n         try {        \n             Properties p = new Properties();\n             p.load(in);\n-            addMappings(p);            \n+            addMappings(p);\n         } finally {\n             in.close();\n         } \n     }\n \n-    protected static void loadMappings( ClassLoader cl, String path ) throws IOException { \n+    protected static void loadMappings( ClassLoader cl, String path ) throws IOException {\n         logger.log(Level.FINE, \"Searching for mappings for path:{0}\", path);\n-        for( Enumeration<URL> en = cl.getResources(path); en.hasMoreElements(); ) {            \n+        for( Enumeration<URL> en = cl.getResources(path); en.hasMoreElements(); ) {\n             URL u = en.nextElement();\n             try { \n                 loadMappingProperties(u);\n             } catch( IOException e ) {\n-                logger.log(Level.SEVERE, \"Error loading:\" + u, e);   \n+                logger.log(Level.SEVERE, \"Error loading:\" + u, e);\n             }                        \n         } \n            \n@@ -228,4 +525,14 @@ protected static void loadDefaultMappings() {\n             }\n         }\n     }     \n+\n+    private static class AxisData {\n+        String name;\n+        float[] range;\n+\n+        AxisData(String name, float[] range) {\n+            this.name = name;\n+            this.range = range;\n+        }\n+    }\n }"
  },
  {
    "sha": "b938df4c4400dc2d3b403907e04b7cdab7783efa",
    "filename": "jme3-core/src/main/java/com/jme3/input/event/JoyAxisEvent.java",
    "status": "modified",
    "additions": 22,
    "deletions": 7,
    "changes": 29,
    "blob_url": "https://github.com/jMonkeyEngine/jmonkeyengine/blob/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-core/src/main/java/com/jme3/input/event/JoyAxisEvent.java",
    "raw_url": "https://github.com/jMonkeyEngine/jmonkeyengine/raw/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-core/src/main/java/com/jme3/input/event/JoyAxisEvent.java",
    "contents_url": "https://api.github.com/repos/jMonkeyEngine/jmonkeyengine/contents/jme3-core/src/main/java/com/jme3/input/event/JoyAxisEvent.java?ref=d906af19fc8c890a326316439184e417f3ce6f9f",
    "patch": "@@ -36,17 +36,23 @@\n \n /**\n  * Joystick axis event.\n- * \n+ *\n  * @author Kirill Vainer, Paul Speed\n  */\n public class JoyAxisEvent extends InputEvent {\n \n     private JoystickAxis axis;\n     private float value;\n+    private float rawValue;\n \n     public JoyAxisEvent(JoystickAxis axis, float value) {\n+        this(axis, value, value);\n+    }\n+\n+    public JoyAxisEvent(JoystickAxis axis, float value, float rawValue) {\n         this.axis = axis;\n         this.value = value;\n+        this.rawValue = rawValue;\n     }\n \n     /**\n@@ -60,9 +66,9 @@ public JoystickAxis getAxis() {\n \n     /**\n      * Returns the joystick axis index.\n-     * \n+     *\n      * @return joystick axis index.\n-     * \n+     *\n      * @see com.jme3.input.JoystickAxis#assignAxis(java.lang.String, java.lang.String)\n      */\n     public int getAxisIndex() {\n@@ -71,21 +77,30 @@ public int getAxisIndex() {\n \n     /**\n      * The joystick index.\n-     * \n+     *\n      * @return joystick index.\n-     * \n-     * @see InputManager#getJoysticks() \n+     *\n+     * @see InputManager#getJoysticks()\n      */\n     public int getJoyIndex() {\n         return axis.getJoystick().getJoyId();\n     }\n \n     /**\n      * The value of the axis.\n-     * \n+     *\n      * @return value of the axis.\n      */\n     public float getValue() {\n         return value;\n     }\n+\n+    /**\n+     * The value of the axis before it was remapped.\n+     *\n+     * @return value of the axis.\n+     */\n+    public float getRawValue() {\n+        return rawValue;\n+    }\n }"
  },
  {
    "sha": "ce896c3fa0ce17f2c7e3f92c8284b32059e0c497",
    "filename": "jme3-lwjgl/src/main/java/com/jme3/input/lwjgl/JInputJoyInput.java",
    "status": "modified",
    "additions": 77,
    "deletions": 74,
    "changes": 151,
    "blob_url": "https://github.com/jMonkeyEngine/jmonkeyengine/blob/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-lwjgl/src/main/java/com/jme3/input/lwjgl/JInputJoyInput.java",
    "raw_url": "https://github.com/jMonkeyEngine/jmonkeyengine/raw/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-lwjgl/src/main/java/com/jme3/input/lwjgl/JInputJoyInput.java",
    "contents_url": "https://api.github.com/repos/jMonkeyEngine/jmonkeyengine/contents/jme3-lwjgl/src/main/java/com/jme3/input/lwjgl/JInputJoyInput.java?ref=d906af19fc8c890a326316439184e417f3ce6f9f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2009-2020 jMonkeyEngine\n+ * Copyright (c) 2009-2016 jMonkeyEngine\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n@@ -65,13 +65,13 @@\n     private RawInputListener listener;\n \n     private Map<Controller, JInputJoystick> joystickIndex = new HashMap<Controller, JInputJoystick>();\n-    \n+\n     @Override\n     public void setJoyRumble(int joyId, float amount){\n \n-        if( joyId >= joysticks.length )        \n+        if( joyId >= joysticks.length )\n             throw new IllegalArgumentException();\n-            \n+\n         Controller c = joysticks[joyId].controller;\n         for (Rumbler r : c.getRumblers()){\n             r.rumble(amount);\n@@ -84,34 +84,34 @@ public void setJoyRumble(int joyId, float amount){\n             ControllerEnvironment.getDefaultEnvironment();\n \n         Controller[] cs = ce.getControllers();\n-        \n+\n         List<Joystick> list = new ArrayList<Joystick>();\n         for( Controller c : ce.getControllers() ) {\n             if (c.getType() == Controller.Type.KEYBOARD\n              || c.getType() == Controller.Type.MOUSE)\n                 continue;\n \n-            logger.log(Level.FINE, \"Attempting to create joystick for: \\\"{0}\\\"\", c);        \n- \n+            logger.log(Level.FINE, \"Attempting to create joystick for: \\\"{0}\\\"\", c);\n+\n             // Try to create it like a joystick\n-            JInputJoystick stick = new JInputJoystick(inputManager, this, c, list.size(), c.getName()); \n+            JInputJoystick stick = new JInputJoystick(inputManager, this, c, list.size(), c.getName());\n             for( Component comp : c.getComponents() ) {\n-                stick.addComponent(comp);                   \n+                stick.addComponent(comp);\n             }\n- \n+\n             // If it has no axes then we'll assume it's not\n             // a joystick\n             if( stick.getAxisCount() == 0 ) {\n                 logger.log(Level.FINE, \"Not a joystick: {0}\", c);\n                 continue;\n             }\n- \n+\n             joystickIndex.put(c, stick);\n-            list.add(stick);                      \n+            list.add(stick);\n         }\n \n         joysticks = list.toArray( new JInputJoystick[list.size()] );\n-        \n+\n         return joysticks;\n     }\n \n@@ -129,60 +129,63 @@ public void update() {\n         Event e = new Event();\n         for (int i = 0; i < cs.length; i++){\n             Controller c = cs[i];\n-            \n+\n             JInputJoystick stick = joystickIndex.get(c);\n             if( stick == null )\n                 continue;\n-                \n+\n             if( !c.poll() )\n                 continue;\n-        \n+\n             int joyId = stick.getJoyId();\n-                    \n+\n             EventQueue q = c.getEventQueue();\n             while (q.getNextEvent(e)){\n                 Identifier id = e.getComponent().getIdentifier();\n                 if (id == Identifier.Axis.POV){\n-                    float x = 0, y = 0;\n+                    float rawX = 0, rawY = 0, x, y;\n                     float v = e.getValue();\n- \n+\n                     if (v == POV.CENTER){\n-                        x = 0; y = 0;\n+                        rawX = 0; rawY = 0;\n                     }else if (v == POV.DOWN){\n-                        x = 0; y = -1f;\n+                        rawX = 0; rawY = -1f;\n                     }else if (v == POV.DOWN_LEFT){\n-                        x = -1f; y = -1f;\n+                        rawX = -1f; rawY = -1f;\n                     }else if (v == POV.DOWN_RIGHT){\n-                        x = 1f; y = -1f;\n+                        rawX = 1f; rawY = -1f;\n                     }else if (v == POV.LEFT){\n-                        x = -1f; y = 0;\n+                        rawX = -1f; rawY = 0;\n                     }else if (v == POV.RIGHT){\n-                        x = 1f; y = 0;\n+                        rawX = 1f; rawY = 0;\n                     }else if (v == POV.UP){\n-                        x = 0; y = 1f;\n+                        rawX = 0; rawY = 1f;\n                     }else if (v == POV.UP_LEFT){\n-                        x = -1f; y = 1f;\n+                        rawX = -1f; rawY = 1f;\n                     }else if (v == POV.UP_RIGHT){\n-                        x = 1f; y = 1f;\n+                        rawX = 1f; rawY = 1f;\n                     }\n \n-                    JoyAxisEvent evt1 = new JoyAxisEvent(stick.povX, x);\n-                    JoyAxisEvent evt2 = new JoyAxisEvent(stick.povY, y);\n+                    x = JoystickCompatibilityMappings.remapAxisRange(stick.povX, rawX);\n+                    y = JoystickCompatibilityMappings.remapAxisRange(stick.povY, rawY);\n+                    JoyAxisEvent evt1 = new JoyAxisEvent(stick.povX, x, rawX);\n+                    JoyAxisEvent evt2 = new JoyAxisEvent(stick.povY, y, rawY);\n                     listener.onJoyAxisEvent(evt1);\n                     listener.onJoyAxisEvent(evt2);\n                 }else if (id instanceof Axis){\n-                    float value = e.getValue();\n-                    \n+                    float rawValue = e.getValue();\n+                    float value = JoystickCompatibilityMappings.remapAxisRange(stick.povY, rawValue);\n+\n                     JoystickAxis axis = stick.axisIndex.get(e.getComponent());\n-                    JoyAxisEvent evt = new JoyAxisEvent(axis, value);\n+                    JoyAxisEvent evt = new JoyAxisEvent(axis, value, rawValue);\n                     listener.onJoyAxisEvent(evt);\n                 }else if (id instanceof Button){\n-                    \n-                    JoystickButton button = stick.buttonIndex.get(e.getComponent());                    \n+\n+                    JoystickButton button = stick.buttonIndex.get(e.getComponent());\n                     JoyButtonEvent evt = new JoyButtonEvent(button, e.getValue() == 1f);\n                     listener.onJoyButtonEvent(evt);\n                 }\n-            }                             \n+            }\n         }\n     }\n \n@@ -209,30 +212,30 @@ public long getInputTimeNanos() {\n     protected class JInputJoystick extends AbstractJoystick {\n \n         private JoystickAxis nullAxis;\n-        private Controller controller;    \n+        private Controller controller;\n         private JoystickAxis xAxis;\n         private JoystickAxis yAxis;\n         private JoystickAxis povX;\n         private JoystickAxis povY;\n         private Map<Component, JoystickAxis> axisIndex = new HashMap<Component, JoystickAxis>();\n         private Map<Component, JoystickButton> buttonIndex = new HashMap<Component, JoystickButton>();\n-    \n-        public JInputJoystick( InputManager inputManager, JoyInput joyInput, Controller controller, \n+\n+        public JInputJoystick( InputManager inputManager, JoyInput joyInput, Controller controller,\n                                int joyId, String name ) {\n             super( inputManager, joyInput, joyId, name );\n-            \n+\n             this.controller = controller;\n-            \n-            this.nullAxis = new DefaultJoystickAxis( getInputManager(), this, -1, \n+\n+            this.nullAxis = new DefaultJoystickAxis( getInputManager(), this, -1,\n                                                      \"Null\", \"null\", false, false, 0 );\n-            this.xAxis = nullAxis;                                                     \n-            this.yAxis = nullAxis;                                                     \n+            this.xAxis = nullAxis;\n+            this.yAxis = nullAxis;\n             this.povX = nullAxis;\n-            this.povY = nullAxis;                                                     \n+            this.povY = nullAxis;\n         }\n \n         protected void addComponent( Component comp ) {\n-            \n+\n             Identifier id = comp.getIdentifier();\n             if( id instanceof Button ) {\n                 addButton(comp);\n@@ -244,99 +247,99 @@ protected void addComponent( Component comp ) {\n         }\n \n         protected void addButton( Component comp ) {\n-        \n+\n             logger.log(Level.FINE, \"Adding button: \\\"{0}\\\" id:\" + comp.getIdentifier(), comp);\n-            \n-            Identifier id = comp.getIdentifier();            \n+\n+            Identifier id = comp.getIdentifier();\n             if( !(id instanceof Button) ) {\n                 throw new IllegalArgumentException( \"Component is not an button:\" + comp );\n             }\n \n             String name = comp.getName();\n             String original = id.getName();\n-            try { \n+            try {\n                 Integer.parseInt(original);\n             } catch (NumberFormatException e){\n                 original = String.valueOf(buttonIndex.size());\n             }\n-            String logicalId = JoystickCompatibilityMappings.remapComponent( controller.getName(), original );\n+            String logicalId = JoystickCompatibilityMappings.remapButton( controller.getName(), original );\n             if( logicalId != original ) {\n                 logger.log(Level.FINE, \"Remapped:\" + original + \" to:\" + logicalId);\n             }\n- \n+\n             JoystickButton button = new DefaultJoystickButton( getInputManager(), this, getButtonCount(),\n                                                                name, logicalId );\n-            addButton(button);                                                               \n+            addButton(button);\n             buttonIndex.put( comp, button );\n         }\n-        \n+\n         protected void addAxis( Component comp ) {\n \n             logger.log(Level.FINE, \"Adding axis: \\\"{0}\\\" id:\" + comp.getIdentifier(), comp );\n-                            \n+\n             Identifier id = comp.getIdentifier();\n             if( !(id instanceof Axis) ) {\n                 throw new IllegalArgumentException( \"Component is not an axis:\" + comp );\n             }\n-            \n+\n             String name = comp.getName();\n             String original = id.getName();\n-            String logicalId = JoystickCompatibilityMappings.remapComponent( controller.getName(), original );\n+            String logicalId = JoystickCompatibilityMappings.remapAxis( controller.getName(), original );\n             if( logicalId != original ) {\n                 logger.log(Level.FINE, \"Remapped:\" + original + \" to:\" + logicalId);\n             }\n-            \n-            JoystickAxis axis = new DefaultJoystickAxis( getInputManager(), \n+\n+            JoystickAxis axis = new DefaultJoystickAxis( getInputManager(),\n                                                          this, getAxisCount(), name, logicalId,\n-                                                         comp.isAnalog(), comp.isRelative(), \n+                                                         comp.isAnalog(), comp.isRelative(),\n                                                          comp.getDeadZone() );\n-            addAxis(axis);                                                          \n+            addAxis(axis);\n             axisIndex.put( comp, axis );\n-                       \n+\n             // Support the X/Y axis indexes\n             if( id == Axis.X ) {\n                 xAxis = axis;\n             } else if( id == Axis.Y ) {\n                 yAxis = axis;\n             } else if( id == Axis.POV ) {\n-                \n+\n                 // Add two fake axes for the JME provided convenience\n                 // axes: AXIS_POV_X, AXIS_POV_Y\n-                povX = new DefaultJoystickAxis( getInputManager(), \n-                                                this, getAxisCount(), JoystickAxis.POV_X, \n+                povX = new DefaultJoystickAxis( getInputManager(),\n+                                                this, getAxisCount(), JoystickAxis.POV_X,\n                                                 id.getName() + \"_x\",\n                                                 comp.isAnalog(), comp.isRelative(), comp.getDeadZone() );\n                 logger.log(Level.FINE, \"Adding axis: \\\"{0}\\\" id:\" + id.getName() + \"_x\", povX.getName() );\n                 addAxis(povX);\n-                povY = new DefaultJoystickAxis( getInputManager(), \n-                                                this, getAxisCount(), JoystickAxis.POV_Y, \n+                povY = new DefaultJoystickAxis( getInputManager(),\n+                                                this, getAxisCount(), JoystickAxis.POV_Y,\n                                                 id.getName() + \"_y\",\n                                                 comp.isAnalog(), comp.isRelative(), comp.getDeadZone() );\n                 logger.log(Level.FINE, \"Adding axis: \\\"{0}\\\" id:\" + id.getName() + \"_y\", povY.getName() );\n                 addAxis(povY);\n             }\n-            \n+\n         }\n- \n+\n         @Override\n         public JoystickAxis getXAxis() {\n             return xAxis;\n-        }     \n+        }\n \n         @Override\n         public JoystickAxis getYAxis() {\n             return yAxis;\n-        }     \n+        }\n \n         @Override\n         public JoystickAxis getPovXAxis() {\n             return povX;\n-        }     \n+        }\n \n         @Override\n         public JoystickAxis getPovYAxis() {\n             return povY;\n-        }     \n+        }\n \n         @Override\n         public int getXAxisIndex(){\n@@ -347,7 +350,7 @@ public int getXAxisIndex(){\n         public int getYAxisIndex(){\n             return yAxis.getAxisId();\n         }\n-    }    \n+    }\n }\n \n "
  },
  {
    "sha": "942bbda5d9cd9791ad1abe1b0a9fd5db0c1446ec",
    "filename": "jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwJoystickInput.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/jMonkeyEngine/jmonkeyengine/blob/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwJoystickInput.java",
    "raw_url": "https://github.com/jMonkeyEngine/jmonkeyengine/raw/d906af19fc8c890a326316439184e417f3ce6f9f/jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwJoystickInput.java",
    "contents_url": "https://api.github.com/repos/jMonkeyEngine/jmonkeyengine/contents/jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwJoystickInput.java?ref=d906af19fc8c890a326316439184e417f3ce6f9f",
    "patch": "@@ -100,7 +100,7 @@ public void reloadJoysticks() {\n                 while (floatBuffer.hasRemaining()) {\n                     floatBuffer.get();\n \n-                    final String logicalId = JoystickCompatibilityMappings.remapComponent(joystick.getName(), convertAxisIndex(axisIndex));\n+                    final String logicalId = JoystickCompatibilityMappings.remapAxis(joystick.getName(), convertAxisIndex(axisIndex));\n                     final JoystickAxis joystickAxis = new DefaultJoystickAxis(inputManager, joystick, axisIndex, convertAxisIndex(axisIndex), logicalId, true, false, 0.0f);\n                     joystick.addAxis(axisIndex, joystickAxis);\n                     axisIndex++;\n@@ -112,10 +112,10 @@ public void reloadJoysticks() {\n                 while (byteBuffer.hasRemaining()) {\n                     byteBuffer.get();\n \n-                    final String logicalId = JoystickCompatibilityMappings.remapComponent(joystick.getName(), String.valueOf(buttonIndex));\n+                    final String logicalId = JoystickCompatibilityMappings.remapButton(joystick.getName(), String.valueOf(buttonIndex));\n                     final JoystickButton button = new DefaultJoystickButton(inputManager, joystick, buttonIndex, String.valueOf(buttonIndex), logicalId);\n                     joystick.addButton(button);\n-                    joyButtonPressed.put(button, false); \n+                    joyButtonPressed.put(button, false);\n                     buttonIndex++;\n                 }\n             }\n@@ -145,6 +145,7 @@ public void initialize() {\n \n     @Override\n     public void update() {\n+        float rawValue, value;\n         for (final Map.Entry<Integer, GlfwJoystick> entry : joysticks.entrySet()) {\n \n             // Axes\n@@ -157,8 +158,9 @@ public void update() {\n \n             if (axisValues != null) {\n                 for (final JoystickAxis axis : entry.getValue().getAxes()) {\n-                    final float value = axisValues.get(axis.getAxisId());\n-                    listener.onJoyAxisEvent(new JoyAxisEvent(axis, value));\n+                    rawValue = axisValues.get(axis.getAxisId());\n+                    value = JoystickCompatibilityMappings.remapAxisRange(axis, rawValue);\n+                    listener.onJoyAxisEvent(new JoyAxisEvent(axis, value, rawValue));\n                 }\n             }\n "
  }
]
