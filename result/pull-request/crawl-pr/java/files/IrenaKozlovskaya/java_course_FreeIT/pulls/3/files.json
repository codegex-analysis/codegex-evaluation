[
  {
    "sha": "cb5ed08d7fa8ac92a55290f7d42d04f34105ae0c",
    "filename": "lesson_3/task_18/src/PunctuationMarks.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/IrenaKozlovskaya/java_course_FreeIT/blob/1759a2b9161ec2db1db49a4a19782d2cc313381e/lesson_3/task_18/src/PunctuationMarks.java",
    "raw_url": "https://github.com/IrenaKozlovskaya/java_course_FreeIT/raw/1759a2b9161ec2db1db49a4a19782d2cc313381e/lesson_3/task_18/src/PunctuationMarks.java",
    "contents_url": "https://api.github.com/repos/IrenaKozlovskaya/java_course_FreeIT/contents/lesson_3/task_18/src/PunctuationMarks.java?ref=1759a2b9161ec2db1db49a4a19782d2cc313381e",
    "patch": "@@ -0,0 +1,19 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class PunctuationMarks {\n+    /**\n+     * Найти в строке не только запятые, но и другие знаки препинания. Подсчитать\n+     * общее их количество.\n+     */\n+    public static void main(String[] args) {\n+        int count = 0;\n+        String string = \"(...It is clear? that they; celebrate. Christmas, because it's a \\\"family party\\\" and a great - opportunity: to be together!)\";\n+        Pattern pattern = Pattern.compile(\"([\\\\.\\\\?\\\\()\\\\-\\\"!:;,' ])\");\n+        Matcher matcher = pattern.matcher(string);\n+        while (matcher.find()) {\n+            count++;\n+        }\n+        System.out.println(\"Found \" + count + \" punctuation  marks.\");\n+    }\n+}"
  },
  {
    "sha": "5b4d8751cc7617dc035f13ba104b561f84e12eb1",
    "filename": "lesson_3/task_19/src/WordCount.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/IrenaKozlovskaya/java_course_FreeIT/blob/1759a2b9161ec2db1db49a4a19782d2cc313381e/lesson_3/task_19/src/WordCount.java",
    "raw_url": "https://github.com/IrenaKozlovskaya/java_course_FreeIT/raw/1759a2b9161ec2db1db49a4a19782d2cc313381e/lesson_3/task_19/src/WordCount.java",
    "contents_url": "https://api.github.com/repos/IrenaKozlovskaya/java_course_FreeIT/contents/lesson_3/task_19/src/WordCount.java?ref=1759a2b9161ec2db1db49a4a19782d2cc313381e",
    "patch": "@@ -0,0 +1,23 @@\n+import java.util.StringTokenizer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class WordCount {\n+    /**\n+     * Имеется строка с текстом. Подсчитать количество слов в тексте. Желательно\n+     * учесть, что слова могут разделяться несколькими пробелами, в начале и конце\n+     * текста также могут быть пробелы, но могут и отсутствовать.\n+     */\n+    public static void main(String[] args) {\n+        int counter = 0;\n+\n+        String text = \" To advertise means     to make information public.\";\n+        Pattern pattern = Pattern.compile(\"(\\\\s*)?\\\\S+(\\\\s*)?\");\n+        Matcher matcher = pattern.matcher(text);\n+\n+        while (matcher.find()) {\n+            counter++;\n+        }\n+        System.out.println(counter);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "078d44d8ddeb7c99c77d66eae7e39dfdd4d7e3a7",
    "filename": "lesson_3/task_20/src/LastLetters.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/IrenaKozlovskaya/java_course_FreeIT/blob/1759a2b9161ec2db1db49a4a19782d2cc313381e/lesson_3/task_20/src/LastLetters.java",
    "raw_url": "https://github.com/IrenaKozlovskaya/java_course_FreeIT/raw/1759a2b9161ec2db1db49a4a19782d2cc313381e/lesson_3/task_20/src/LastLetters.java",
    "contents_url": "https://api.github.com/repos/IrenaKozlovskaya/java_course_FreeIT/contents/lesson_3/task_20/src/LastLetters.java?ref=1759a2b9161ec2db1db49a4a19782d2cc313381e",
    "patch": "@@ -0,0 +1,19 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class LastLetters {\n+    /**\n+     * Имеется строка с текстом. Вывести текст, составленный из последних букв\n+     * всех слов.\n+     */\n+    public static void main(String[] args) {\n+        String text = \"To advertise means  to make, information public.\";\n+        Pattern pattern = Pattern.compile(\"([a-zA-Z]+)([a-zA-Z])([\\\\s+\\\\.,]?)\");\n+        Matcher matcher = pattern.matcher(text);\n+        while (matcher.find()) {\n+            System.out.print(matcher.group(2));\n+        }\n+\n+\n+    }\n+}"
  },
  {
    "sha": "77e50ae494c9303403daa3a556825188a234439c",
    "filename": "lesson_3/task_21/src/AdditionOfStrings.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/IrenaKozlovskaya/java_course_FreeIT/blob/1759a2b9161ec2db1db49a4a19782d2cc313381e/lesson_3/task_21/src/AdditionOfStrings.java",
    "raw_url": "https://github.com/IrenaKozlovskaya/java_course_FreeIT/raw/1759a2b9161ec2db1db49a4a19782d2cc313381e/lesson_3/task_21/src/AdditionOfStrings.java",
    "contents_url": "https://api.github.com/repos/IrenaKozlovskaya/java_course_FreeIT/contents/lesson_3/task_21/src/AdditionOfStrings.java?ref=1759a2b9161ec2db1db49a4a19782d2cc313381e",
    "patch": "@@ -0,0 +1,36 @@\n+import java.lang.StringBuilder;\n+import java.util.Date;\n+\n+public class AdditionOfStrings {\n+    /**\n+     * Напишите три цикла выполняющих многократное сложение строк, один с\n+     * помощью оператора сложения и String, другой с помощью StringBuilder и метода\n+     * append, а также аналогино для StringBuffer. Сравните скорость их выполнения.\n+     */\n+    public static void main(String[] args) {\n+        int n = 10000;\n+        Date date = new Date();\n+        long startTime = date.getTime();\n+\n+        String string = \"\";\n+        for (int i = 0; i < n; i++) {\n+            string += \"addition\";\n+        }\n+        Date dateString = new Date();\n+        System.out.println(dateString.getTime() - startTime);\n+\n+        StringBuilder builder = new StringBuilder();\n+        for (int i = 0; i < n; i++) {\n+            builder.append(\"addition\");\n+        }\n+        Date dateStringBuilder = new Date();\n+        System.out.println(dateStringBuilder.getTime() - dateString.getTime());\n+\n+        StringBuffer stringBuff = new StringBuffer();\n+        for (int i = 0; i < n; i++) {\n+            stringBuff.append(\"addition\");\n+        }\n+        Date dateStringBuffer = new Date();\n+        System.out.println(dateStringBuffer.getTime() - dateStringBuilder.getTime());\n+    }\n+}"
  }
]
