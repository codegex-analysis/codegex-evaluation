[
  {
    "sha": "9b1e42fb62396141ea248ae3e55fa1654f83d767",
    "filename": "v3/pom.xml",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/pom.xml",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/pom.xml",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/pom.xml?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -1,22 +1,24 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n+\t\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n \n-    <parent>\n-        <groupId>io.awspring.cloud</groupId>\n-        <artifactId>spring-cloud-aws</artifactId>\n-        <version>2.3.0-RC2</version>\n-    </parent>\n+\t<parent>\n+\t\t<groupId>io.awspring.cloud</groupId>\n+\t\t<artifactId>spring-cloud-aws</artifactId>\n+\t\t<version>2.3.0-RC2</version>\n+\t</parent>\n \n-    <artifactId>v3</artifactId>\n-    <version>2.3.0-RC2</version>\n+\t<artifactId>v3</artifactId>\n+\t<version>2.3.0-RC2</version>\n \t<packaging>pom</packaging>\n \n \t<modules>\n \t\t<module>spring-cloud-aws-v3-core</module>\n \t\t<module>spring-cloud-aws-v3-autoconfigure</module>\n+\t\t<module>spring-cloud-aws-v3-parameter-store</module>\n+\t\t<module>spring-cloud-starter-aws-v3-parameter-store</module>\n \t</modules>\n \n \t<dependencyManagement>"
  },
  {
    "sha": "92be69e589077bc9ce1a7c4ef46fcf997342a2eb",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/pom.xml",
    "status": "modified",
    "additions": 20,
    "deletions": 11,
    "changes": 31,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/pom.xml",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/pom.xml",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/pom.xml?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -1,18 +1,17 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-    <modelVersion>4.0.0</modelVersion>\n+\t\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n \n-    <parent>\n-        <groupId>io.awspring.cloud</groupId>\n-        <artifactId>v3</artifactId>\n-        <version>2.3.0-RC2</version>\n-    </parent>\n+\t<parent>\n+\t\t<groupId>io.awspring.cloud</groupId>\n+\t\t<artifactId>v3</artifactId>\n+\t\t<version>2.3.0-RC2</version>\n+\t</parent>\n \n-    <groupId>io.awspring.cloud</groupId>\n-    <artifactId>spring-cloud-aws-v3-autoconfigure</artifactId>\n-    <version>2.3.0-RC2</version>\n+\t<artifactId>spring-cloud-aws-v3-autoconfigure</artifactId>\n+\t<version>2.3.0-RC2</version>\n \n \t<dependencies>\n \t\t<dependency>\n@@ -38,5 +37,15 @@\n \t\t\t<groupId>software.amazon.awssdk</groupId>\n \t\t\t<artifactId>auth</artifactId>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>software.amazon.awssdk</groupId>\n+\t\t\t<artifactId>ssm</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.awspring.cloud</groupId>\n+\t\t\t<artifactId>spring-cloud-aws-v3-parameter-store</artifactId>\n+\t\t\t<optional>true</optional>\n+\t\t\t<version>2.3.0-RC2</version>\n+\t\t</dependency>\n \t</dependencies>\n </project>"
  },
  {
    "sha": "ff6c86b38c1a8be77831fa86ee0eb71050e7869e",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreBootstrapConfiguration.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreBootstrapConfiguration.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreBootstrapConfiguration.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreBootstrapConfiguration.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2013-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfigure.parameterstore;\n+\n+import io.awspring.cloud.v3.core.SpringCloudClientConfiguration;\n+import io.awspring.cloud.v3.paramstore.AwsParamStorePropertySource;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.ssm.SsmClient;\n+import software.amazon.awssdk.services.ssm.SsmClientBuilder;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+\n+/**\n+ * @author Joris Kuipers\n+ * @author Matej Nedic\n+ * @author Eddú Meléndez\n+ * @since 2.0.0\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@EnableConfigurationProperties(AwsParamStoreProperties.class)\n+@ConditionalOnClass({ SsmClient.class, AwsParamStorePropertySource.class })\n+@ConditionalOnProperty(prefix = AwsParamStoreProperties.CONFIG_PREFIX, name = \"enabled\", matchIfMissing = true)\n+public class AwsParamStoreBootstrapConfiguration {\n+\n+\tprivate final Environment environment;\n+\n+\tpublic AwsParamStoreBootstrapConfiguration(Environment environment) {\n+\t\tthis.environment = environment;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tSsmClient ssmClient(AwsParamStoreProperties properties) {\n+\t\treturn createSimpleSystemManagementClient(properties);\n+\t}\n+\n+\tpublic static SsmClient createSimpleSystemManagementClient(AwsParamStoreProperties properties) {\n+\t\tSsmClientBuilder builder = SsmClient.builder()\n+\t\t\t\t.overrideConfiguration(SpringCloudClientConfiguration.clientOverrideConfiguration());\n+\t\tif (!StringUtils.isEmpty(properties.getRegion())) {\n+\t\t\tbuilder.region(Region.of(properties.getRegion()));\n+\t\t}\n+\t\tif (properties.getEndpoint() != null) {\n+\t\t\tbuilder.endpointOverride(properties.getEndpoint());\n+\t\t}\n+\t\treturn builder.build();\n+\t}\n+\n+}"
  },
  {
    "sha": "30cbc8252cbd45e7037703110b64ba2889d81411",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataLoader.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataLoader.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataLoader.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataLoader.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2013-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfigure.parameterstore;\n+\n+import java.util.Collections;\n+\n+import io.awspring.cloud.v3.paramstore.AwsParamStorePropertySource;\n+import software.amazon.awssdk.services.ssm.SsmClient;\n+\n+import org.springframework.boot.context.config.ConfigData;\n+import org.springframework.boot.context.config.ConfigDataLoader;\n+import org.springframework.boot.context.config.ConfigDataLoaderContext;\n+import org.springframework.boot.context.config.ConfigDataResourceNotFoundException;\n+\n+/**\n+ * @author Eddú Meléndez\n+ * @since 2.3.0\n+ */\n+public class AwsParamStoreConfigDataLoader implements ConfigDataLoader<AwsParamStoreConfigDataResource> {\n+\n+\t@Override\n+\tpublic ConfigData load(ConfigDataLoaderContext context, AwsParamStoreConfigDataResource resource) {\n+\t\ttry {\n+\t\t\tSsmClient ssm = context.getBootstrapContext().get(SsmClient.class);\n+\t\t\tAwsParamStorePropertySource propertySource = resource.getPropertySources()\n+\t\t\t\t\t.createPropertySource(resource.getContext(), resource.isOptional(), ssm);\n+\t\t\tif (propertySource != null) {\n+\t\t\t\treturn new ConfigData(Collections.singletonList(propertySource));\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new ConfigDataResourceNotFoundException(resource, e);\n+\t\t}\n+\t}\n+\n+}"
  },
  {
    "sha": "fa9eed5efc03d7a2ba88be9133b9dec7260df6ea",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataLocationResolver.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataLocationResolver.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataLocationResolver.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataLocationResolver.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2013-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfigure.parameterstore;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import software.amazon.awssdk.services.ssm.SsmClient;\n+\n+import org.springframework.boot.BootstrapContext;\n+import org.springframework.boot.BootstrapRegistry;\n+import org.springframework.boot.ConfigurableBootstrapContext;\n+import org.springframework.boot.context.config.ConfigDataLocation;\n+import org.springframework.boot.context.config.ConfigDataLocationNotFoundException;\n+import org.springframework.boot.context.config.ConfigDataLocationResolver;\n+import org.springframework.boot.context.config.ConfigDataLocationResolverContext;\n+import org.springframework.boot.context.config.Profiles;\n+import org.springframework.boot.context.properties.bind.Bindable;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Eddú Meléndez\n+ * @since 2.3.0\n+ */\n+public class AwsParamStoreConfigDataLocationResolver\n+\t\timplements ConfigDataLocationResolver<AwsParamStoreConfigDataResource> {\n+\n+\t/**\n+\t * AWS ParameterStore Config Data prefix.\n+\t */\n+\tpublic static final String PREFIX = \"aws-parameterstore:\";\n+\n+\tprivate final Log log = LogFactory.getLog(AwsParamStoreConfigDataLocationResolver.class);\n+\n+\t@Override\n+\tpublic boolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location) {\n+\t\tif (!location.hasPrefix(PREFIX)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn context.getBinder().bind(AwsParamStoreProperties.CONFIG_PREFIX + \".enabled\", Boolean.class).orElse(true);\n+\t}\n+\n+\t@Override\n+\tpublic List<AwsParamStoreConfigDataResource> resolve(ConfigDataLocationResolverContext context,\n+\t\t\tConfigDataLocation location) throws ConfigDataLocationNotFoundException {\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\t@Override\n+\tpublic List<AwsParamStoreConfigDataResource> resolveProfileSpecific(\n+\t\t\tConfigDataLocationResolverContext resolverContext, ConfigDataLocation location, Profiles profiles)\n+\t\t\tthrows ConfigDataLocationNotFoundException {\n+\t\tregisterBean(resolverContext, AwsParamStoreProperties.class, loadProperties(resolverContext.getBinder()));\n+\n+\t\tregisterAndPromoteBean(resolverContext, SsmClient.class, this::createSimpleSystemManagementClient);\n+\n+\t\tAwsParamStoreProperties properties = loadConfigProperties(resolverContext.getBinder());\n+\n+\t\tAwsParamStorePropertySources sources = new AwsParamStorePropertySources(properties, log);\n+\n+\t\tList<String> contexts = location.getValue().equals(PREFIX)\n+\t\t\t\t? sources.getAutomaticContexts(profiles.getAccepted())\n+\t\t\t\t: getCustomContexts(location.getNonPrefixedValue(PREFIX));\n+\n+\t\tList<AwsParamStoreConfigDataResource> locations = new ArrayList<>();\n+\t\tcontexts.forEach(propertySourceContext -> locations\n+\t\t\t\t.add(new AwsParamStoreConfigDataResource(propertySourceContext, location.isOptional(), sources)));\n+\n+\t\treturn locations;\n+\t}\n+\n+\tprivate List<String> getCustomContexts(String keys) {\n+\t\tif (StringUtils.hasLength(keys)) {\n+\t\t\treturn Arrays.asList(keys.split(\";\"));\n+\t\t}\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\tprotected <T> void registerAndPromoteBean(ConfigDataLocationResolverContext context, Class<T> type,\n+\t\t\tBootstrapRegistry.InstanceSupplier<T> supplier) {\n+\t\tregisterBean(context, type, supplier);\n+\t\tcontext.getBootstrapContext().addCloseListener(event -> {\n+\t\t\tT instance = event.getBootstrapContext().get(type);\n+\t\t\tevent.getApplicationContext().getBeanFactory().registerSingleton(\"configData\" + type.getSimpleName(),\n+\t\t\t\t\tinstance);\n+\t\t});\n+\t}\n+\n+\tpublic <T> void registerBean(ConfigDataLocationResolverContext context, Class<T> type, T instance) {\n+\t\tcontext.getBootstrapContext().registerIfAbsent(type, BootstrapRegistry.InstanceSupplier.of(instance));\n+\t}\n+\n+\tprotected <T> void registerBean(ConfigDataLocationResolverContext context, Class<T> type,\n+\t\t\tBootstrapRegistry.InstanceSupplier<T> supplier) {\n+\t\tConfigurableBootstrapContext bootstrapContext = context.getBootstrapContext();\n+\t\tbootstrapContext.registerIfAbsent(type, supplier);\n+\t}\n+\n+\tprotected SsmClient createSimpleSystemManagementClient(BootstrapContext context) {\n+\t\tAwsParamStoreProperties properties = context.get(AwsParamStoreProperties.class);\n+\n+\t\treturn AwsParamStoreBootstrapConfiguration.createSimpleSystemManagementClient(properties);\n+\t}\n+\n+\tprotected AwsParamStoreProperties loadProperties(Binder binder) {\n+\t\treturn binder.bind(AwsParamStoreProperties.CONFIG_PREFIX, Bindable.of(AwsParamStoreProperties.class))\n+\t\t\t\t.orElseGet(AwsParamStoreProperties::new);\n+\t}\n+\n+\tprotected AwsParamStoreProperties loadConfigProperties(Binder binder) {\n+\t\tAwsParamStoreProperties properties = binder\n+\t\t\t\t.bind(AwsParamStoreProperties.CONFIG_PREFIX, Bindable.of(AwsParamStoreProperties.class))\n+\t\t\t\t.orElseGet(AwsParamStoreProperties::new);\n+\n+\t\tif (!StringUtils.hasLength(properties.getName())) {\n+\t\t\tproperties.setName(binder.bind(\"spring.application.name\", String.class).orElse(\"application\"));\n+\t\t}\n+\n+\t\treturn properties;\n+\t}\n+\n+}"
  },
  {
    "sha": "4ca0a065df622eeb2b4e9b1220f3a264e9fdbc75",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataResource.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataResource.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataResource.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreConfigDataResource.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2013-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfigure.parameterstore;\n+\n+import java.util.Objects;\n+\n+import org.springframework.boot.context.config.ConfigDataResource;\n+import org.springframework.core.style.ToStringCreator;\n+\n+/**\n+ * Config data resource for AWS System Manager Management integration.\n+ *\n+ * @author Eddú Meléndez\n+ * @since 2.3.0\n+ */\n+public class AwsParamStoreConfigDataResource extends ConfigDataResource {\n+\n+\tprivate final String context;\n+\n+\tprivate final boolean optional;\n+\n+\tprivate final AwsParamStorePropertySources propertySources;\n+\n+\tpublic AwsParamStoreConfigDataResource(String context, boolean optional,\n+\t\t\tAwsParamStorePropertySources propertySources) {\n+\t\tthis.context = context;\n+\t\tthis.optional = optional;\n+\t\tthis.propertySources = propertySources;\n+\t}\n+\n+\t/**\n+\t * Returns context which is equal to Secret Manager secret name.\n+\t * @return the context\n+\t */\n+\tpublic String getContext() {\n+\t\treturn this.context;\n+\t}\n+\n+\t/**\n+\t * If application startup should fail when secret cannot be loaded or does not exist.\n+\t * @return is optional\n+\t */\n+\tpublic boolean isOptional() {\n+\t\treturn this.optional;\n+\t}\n+\n+\tpublic AwsParamStorePropertySources getPropertySources() {\n+\t\treturn this.propertySources;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tAwsParamStoreConfigDataResource that = (AwsParamStoreConfigDataResource) o;\n+\t\treturn this.optional == that.optional && this.context.equals(that.context);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(this.optional, this.context);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn new ToStringCreator(this).append(\"context\", context).append(\"optional\", optional).toString();\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "914cbac13136c30e78eb4567ef33b83aee68793f",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreProperties.java",
    "status": "added",
    "additions": 180,
    "deletions": 0,
    "changes": 180,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreProperties.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreProperties.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStoreProperties.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2013-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfigure.parameterstore;\n+\n+import java.net.URI;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.util.StringUtils;\n+import org.springframework.validation.Errors;\n+import org.springframework.validation.Validator;\n+\n+/**\n+ * Configuration properties for the AWS Parameter Store integration. Mostly based on the\n+ * Spring Cloud Consul Configuration equivalent.\n+ *\n+ * @author Joris Kuipers\n+ * @author Matej Nedic\n+ * @since 2.0.0\n+ */\n+@ConfigurationProperties(AwsParamStoreProperties.CONFIG_PREFIX)\n+public class AwsParamStoreProperties implements Validator {\n+\n+\t/**\n+\t * Configuration prefix.\n+\t */\n+\tpublic static final String CONFIG_PREFIX = \"aws.paramstore\";\n+\n+\t/**\n+\t * Pattern used for prefix validation.\n+\t */\n+\tprivate static final Pattern PREFIX_PATTERN = Pattern.compile(\"(/[a-zA-Z0-9.\\\\-_]+)*\");\n+\n+\t/**\n+\t * Pattern used for profileSeparator validation.\n+\t */\n+\tprivate static final Pattern PROFILE_SEPARATOR_PATTERN = Pattern.compile(\"[a-zA-Z0-9.\\\\-_/\\\\\\\\]+\");\n+\n+\t/**\n+\t * Prefix indicating first level for every property. Value must start with a forward\n+\t * slash followed by a valid path segment or be empty. Defaults to \"/config\".\n+\t */\n+\tprivate String prefix = \"/config\";\n+\n+\tprivate String defaultContext = \"application\";\n+\n+\tprivate String profileSeparator = \"_\";\n+\n+\t/**\n+\t * If region value is not null or empty it will be used in creation of\n+\t * AWSSimpleSystemsManagement.\n+\t */\n+\tprivate String region;\n+\n+\t/**\n+\t * Overrides the default endpoint.\n+\t */\n+\tprivate URI endpoint;\n+\n+\t/** Throw exceptions during config lookup if true, otherwise, log warnings. */\n+\tprivate boolean failFast = true;\n+\n+\t/**\n+\t * Alternative to spring.application.name to use in looking up values in AWS Parameter\n+\t * Store.\n+\t */\n+\tprivate String name;\n+\n+\t/** Is AWS Parameter Store support enabled. */\n+\tprivate boolean enabled = true;\n+\n+\t@Override\n+\tpublic boolean supports(Class clazz) {\n+\t\treturn AwsParamStoreProperties.class.isAssignableFrom(clazz);\n+\t}\n+\n+\t@Override\n+\tpublic void validate(Object target, Errors errors) {\n+\t\tAwsParamStoreProperties properties = (AwsParamStoreProperties) target;\n+\n+\t\tif (!StringUtils.hasLength(properties.getPrefix())) {\n+\t\t\terrors.rejectValue(\"prefix\", \"NotEmpty\", \"prefix should not be empty or null.\");\n+\t\t}\n+\n+\t\tif (!StringUtils.hasLength(properties.getDefaultContext())) {\n+\t\t\terrors.rejectValue(\"defaultContext\", \"NotEmpty\", \"defaultContext should not be empty or null.\");\n+\t\t}\n+\n+\t\tif (!StringUtils.hasLength(properties.getProfileSeparator())) {\n+\t\t\terrors.rejectValue(\"profileSeparator\", \"NotEmpty\", \"profileSeparator should not be empty or null.\");\n+\t\t}\n+\n+\t\tif (!PREFIX_PATTERN.matcher(properties.getPrefix()).matches()) {\n+\t\t\terrors.rejectValue(\"prefix\", \"Pattern\", \"The prefix must have pattern of:  \" + PREFIX_PATTERN.toString());\n+\t\t}\n+\t\tif (!PROFILE_SEPARATOR_PATTERN.matcher(properties.getProfileSeparator()).matches()) {\n+\t\t\terrors.rejectValue(\"profileSeparator\", \"Pattern\",\n+\t\t\t\t\t\"The profileSeparator must have pattern of:  \" + PROFILE_SEPARATOR_PATTERN.toString());\n+\t\t}\n+\t}\n+\n+\tpublic String getPrefix() {\n+\t\treturn prefix;\n+\t}\n+\n+\tpublic void setPrefix(String prefix) {\n+\t\tthis.prefix = prefix;\n+\t}\n+\n+\tpublic String getDefaultContext() {\n+\t\treturn defaultContext;\n+\t}\n+\n+\tpublic void setDefaultContext(String defaultContext) {\n+\t\tthis.defaultContext = defaultContext;\n+\t}\n+\n+\tpublic String getProfileSeparator() {\n+\t\treturn profileSeparator;\n+\t}\n+\n+\tpublic void setProfileSeparator(String profileSeparator) {\n+\t\tthis.profileSeparator = profileSeparator;\n+\t}\n+\n+\tpublic boolean isFailFast() {\n+\t\treturn failFast;\n+\t}\n+\n+\tpublic void setFailFast(boolean failFast) {\n+\t\tthis.failFast = failFast;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic boolean isEnabled() {\n+\t\treturn enabled;\n+\t}\n+\n+\tpublic void setEnabled(boolean enabled) {\n+\t\tthis.enabled = enabled;\n+\t}\n+\n+\tpublic String getRegion() {\n+\t\treturn region;\n+\t}\n+\n+\tpublic void setRegion(final String region) {\n+\t\tthis.region = region;\n+\t}\n+\n+\tpublic URI getEndpoint() {\n+\t\treturn endpoint;\n+\t}\n+\n+\tpublic void setEndpoint(URI endpoint) {\n+\t\tthis.endpoint = endpoint;\n+\t}\n+\n+}"
  },
  {
    "sha": "c4b41f9f161862655dce199f6b90d829eeb7751a",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStorePropertySources.java",
    "status": "added",
    "additions": 108,
    "deletions": 0,
    "changes": 108,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStorePropertySources.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStorePropertySources.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/main/java/io/awspring/cloud/v3/autoconfigure/parameterstore/AwsParamStorePropertySources.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2013-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfigure.parameterstore;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.awspring.cloud.v3.paramstore.AwsParamStorePropertySource;\n+import org.apache.commons.logging.Log;\n+import software.amazon.awssdk.services.ssm.SsmClient;\n+\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Eddú Meléndez\n+ * @since 2.3\n+ */\n+public class AwsParamStorePropertySources {\n+\n+\tprivate final AwsParamStoreProperties properties;\n+\n+\tprivate final Log log;\n+\n+\tpublic AwsParamStorePropertySources(AwsParamStoreProperties properties, Log log) {\n+\t\tthis.properties = properties;\n+\t\tthis.log = log;\n+\t}\n+\n+\tpublic List<String> getAutomaticContexts(List<String> profiles) {\n+\t\tList<String> contexts = new ArrayList<>();\n+\t\tString prefix = this.properties.getPrefix();\n+\t\tString defaultContext = getContext(prefix, this.properties.getDefaultContext());\n+\n+\t\tString appName = this.properties.getName();\n+\n+\t\tString appContext = prefix + \"/\" + appName;\n+\t\taddProfiles(contexts, appContext, profiles);\n+\t\tcontexts.add(appContext + \"/\");\n+\n+\t\taddProfiles(contexts, defaultContext, profiles);\n+\t\tcontexts.add(defaultContext + \"/\");\n+\t\treturn contexts;\n+\t}\n+\n+\tprotected String getContext(String prefix, String context) {\n+\t\tif (StringUtils.hasLength(prefix)) {\n+\t\t\treturn prefix + \"/\" + context;\n+\t\t}\n+\t\treturn context;\n+\t}\n+\n+\tprivate void addProfiles(List<String> contexts, String baseContext, List<String> profiles) {\n+\t\tfor (String profile : profiles) {\n+\t\t\tcontexts.add(baseContext + this.properties.getProfileSeparator() + profile + \"/\");\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates property source for given context.\n+\t * @param context property source context equivalent to the parameter name\n+\t * @param optional if creating context should fail with exception if parameter cannot\n+\t * be loaded\n+\t * @param client System Manager Management client\n+\t * @return a property source or null if parameter could not be loaded and optional is\n+\t * set to true\n+\t */\n+\tpublic AwsParamStorePropertySource createPropertySource(String context, boolean optional, SsmClient client) {\n+\t\tlog.info(\"Loading property from AWS Parameter Store with name: \" + context + \", optional: \" + optional);\n+\t\ttry {\n+\t\t\tAwsParamStorePropertySource propertySource = new AwsParamStorePropertySource(context, client);\n+\t\t\tpropertySource.init();\n+\t\t\treturn propertySource;\n+\t\t\t// TODO: howto call close when /refresh\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tif (!optional) {\n+\t\t\t\tthrow new AwsParameterPropertySourceNotFoundException(e);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tlog.warn(\"Unable to load AWS parameter from \" + context + \". \" + e.getMessage());\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tstatic class AwsParameterPropertySourceNotFoundException extends RuntimeException {\n+\n+\t\tAwsParameterPropertySourceNotFoundException(Exception source) {\n+\t\t\tsuper(source);\n+\t\t}\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "0166d1556a48397f451a3d3d35b0fe9877197670",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,10 @@\n+{\n+  \"properties\": [\n+    {\n+      \"defaultValue\": true,\n+      \"name\": \"aws.paramstore.enabled\",\n+      \"description\": \"Enables Parameter Store integration.\",\n+      \"type\": \"java.lang.Boolean\"\n+    }\n+  ]\n+}"
  },
  {
    "sha": "4af94d0e16e8898868beb810f726e4756213c707",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/main/resources/META-INF/spring.factories",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/resources/META-INF/spring.factories",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/main/resources/META-INF/spring.factories",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/main/resources/META-INF/spring.factories?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -1,3 +1,14 @@\n org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n io.awspring.cloud.v3.autoconfigure.CredentialsProviderAutoConfiguration,\\\n io.awspring.cloud.v3.autoconfigure.RegionProviderAutoConfiguration\n+\n+org.springframework.cloud.bootstrap.BootstrapConfiguration=\\\n+io.awspring.cloud.v3.autoconfigure.parameterstore.AwsParamStoreBootstrapConfiguration\n+\n+# ConfigData Location Resolvers\n+org.springframework.boot.context.config.ConfigDataLocationResolver=\\\n+io.awspring.cloud.v3.autoconfigure.parameterstore.AwsParamStoreConfigDataLocationResolver\n+\n+# ConfigData Loaders\n+org.springframework.boot.context.config.ConfigDataLoader=\\\n+io.awspring.cloud.v3.autoconfigure.parameterstore.AwsParamStoreConfigDataLoader"
  },
  {
    "sha": "85130abd8496019d7fbfd324c89fb9e7022c52af",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStoreBootstrapConfigurationTest.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStoreBootstrapConfigurationTest.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStoreBootstrapConfigurationTest.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStoreBootstrapConfigurationTest.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2013-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfiguration.parameterstore;\n+\n+import io.awspring.cloud.v3.autoconfigure.parameterstore.AwsParamStoreBootstrapConfiguration;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.awssdk.services.ssm.SsmClient;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Unit test for {@link AwsParamStoreBootstrapConfiguration}.\n+ *\n+ * @author Matej Nedic\n+ * @author Eddú Meléndez\n+ */\n+class AwsParamStoreBootstrapConfigurationTest {\n+\n+\tprivate final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n+\t\t\t.withConfiguration(AutoConfigurations.of(AwsParamStoreBootstrapConfiguration.class));\n+\n+\t@Test\n+\tvoid testMissingAutoConfiguration() {\n+\t\tthis.contextRunner.withPropertyValues(\"aws.paramstore.enabled:false\").run(context -> {\n+\t\t\tassertThat(context).doesNotHaveBean(SsmClient.class);\n+\t\t});\n+\t}\n+\n+}"
  },
  {
    "sha": "8305b64298460aa5aa86781e85e74effaf1827d4",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStoreConfigDataLocationResolverTest.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStoreConfigDataLocationResolverTest.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStoreConfigDataLocationResolverTest.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStoreConfigDataLocationResolverTest.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2013-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfiguration.parameterstore;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.awspring.cloud.v3.autoconfigure.parameterstore.AwsParamStoreConfigDataLocationResolver;\n+import io.awspring.cloud.v3.autoconfigure.parameterstore.AwsParamStoreConfigDataResource;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.boot.BootstrapRegistry;\n+import org.springframework.boot.context.config.ConfigDataLocation;\n+import org.springframework.boot.context.config.ConfigDataLocationResolverContext;\n+import org.springframework.boot.context.config.Profiles;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.mock.env.MockEnvironment;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class AwsParamStoreConfigDataLocationResolverTest {\n+\n+\t@Test\n+\tvoid testResolveProfileSpecificWithAutomaticPaths() {\n+\t\tString location = \"aws-parameterstore:\";\n+\t\tList<AwsParamStoreConfigDataResource> locations = testResolveProfileSpecific(location);\n+\t\tassertThat(locations).hasSize(4);\n+\t\tassertThat(toContexts(locations)).containsExactly(\"/config/testapp_dev/\", \"/config/testapp/\",\n+\t\t\t\t\"/config/application_dev/\", \"/config/application/\");\n+\t}\n+\n+\t@Test\n+\tvoid testResolveProfileSpecificWithCustomPaths() {\n+\t\tString location = \"aws-parameterstore:/mypath1;/mypath2;/mypath3\";\n+\t\tList<AwsParamStoreConfigDataResource> locations = testResolveProfileSpecific(location);\n+\t\tassertThat(locations).hasSize(3);\n+\t\tassertThat(toContexts(locations)).containsExactly(\"/mypath1\", \"/mypath2\", \"/mypath3\");\n+\t}\n+\n+\tprivate List<String> toContexts(List<AwsParamStoreConfigDataResource> locations) {\n+\t\treturn locations.stream().map(AwsParamStoreConfigDataResource::getContext).collect(Collectors.toList());\n+\t}\n+\n+\tprivate List<AwsParamStoreConfigDataResource> testResolveProfileSpecific(String location) {\n+\t\tAwsParamStoreConfigDataLocationResolver resolver = createResolver();\n+\t\tConfigDataLocationResolverContext context = mock(ConfigDataLocationResolverContext.class);\n+\t\tMockEnvironment env = new MockEnvironment();\n+\t\tenv.setProperty(\"spring.application.name\", \"testapp\");\n+\t\twhen(context.getBinder()).thenReturn(Binder.get(env));\n+\t\tProfiles profiles = mock(Profiles.class);\n+\t\twhen(profiles.getAccepted()).thenReturn(Collections.singletonList(\"dev\"));\n+\t\treturn resolver.resolveProfileSpecific(context, ConfigDataLocation.of(location), profiles);\n+\t}\n+\n+\tprivate AwsParamStoreConfigDataLocationResolver createResolver() {\n+\t\treturn new AwsParamStoreConfigDataLocationResolver() {\n+\t\t\t@Override\n+\t\t\tpublic <T> void registerBean(ConfigDataLocationResolverContext context, Class<T> type, T instance) {\n+\t\t\t\t// do nothing\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected <T> void registerBean(ConfigDataLocationResolverContext context, Class<T> type,\n+\t\t\t\t\tBootstrapRegistry.InstanceSupplier<T> supplier) {\n+\t\t\t\t// do nothing\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected <T> void registerAndPromoteBean(ConfigDataLocationResolverContext context, Class<T> type,\n+\t\t\t\t\tBootstrapRegistry.InstanceSupplier<T> supplier) {\n+\t\t\t\t// do nothing\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+}"
  },
  {
    "sha": "2952e46925eafbeb4c6e9ecfea55e276161dad96",
    "filename": "v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStorePropertiesTest.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStorePropertiesTest.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStorePropertiesTest.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-autoconfigure/src/test/java/io/awspring/cloud/v3/autoconfiguration/parameterstore/AwsParamStorePropertiesTest.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2013-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.autoconfiguration.parameterstore;\n+\n+import java.util.stream.Stream;\n+\n+import io.awspring.cloud.v3.autoconfigure.parameterstore.AwsParamStoreProperties;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import org.springframework.validation.BeanPropertyBindingResult;\n+import org.springframework.validation.Errors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests for {@link AwsParamStoreProperties}.\n+ *\n+ * @author Matej Nedic\n+ * @author Maciej Walkowiak\n+ */\n+class AwsParamStorePropertiesTest {\n+\n+\t@ParameterizedTest\n+\t@MethodSource(\"invalidProperties\")\n+\tpublic void validationFails(AwsParamStoreProperties properties, String field, String errorCode) {\n+\t\tErrors errors = new BeanPropertyBindingResult(properties, \"properties\");\n+\n+\t\tproperties.validate(properties, errors);\n+\n+\t\tassertThat(errors.getFieldError(field)).isNotNull();\n+\t\tassertThat(errors.getFieldError(field).getCode()).isEqualTo(errorCode);\n+\t}\n+\n+\t@Test\n+\tvoid validationSucceeds() {\n+\t\tAwsParamStoreProperties properties = new AwsParamStorePropertiesBuilder().withPrefix(\"/con\")\n+\t\t\t\t.withDefaultContext(\"app\").withProfileSeparator(\"_\").build();\n+\n+\t\tErrors errors = new BeanPropertyBindingResult(properties, \"properties\");\n+\t\tproperties.validate(properties, errors);\n+\n+\t\tassertThat(errors.getAllErrors()).isEmpty();\n+\t}\n+\n+\t@Test\n+\tvoid acceptsForwardSlashAsProfileSeparator() {\n+\t\tAwsParamStoreProperties properties = new AwsParamStoreProperties();\n+\t\tproperties.setProfileSeparator(\"/\");\n+\n+\t\tErrors errors = new BeanPropertyBindingResult(properties, \"properties\");\n+\n+\t\tproperties.validate(properties, errors);\n+\n+\t\tassertThat(errors.getFieldError(\"profileSeparator\")).isNull();\n+\t}\n+\n+\t@Test\n+\tvoid acceptsBackslashAsProfileSeparator() {\n+\t\tAwsParamStoreProperties properties = new AwsParamStoreProperties();\n+\t\tproperties.setProfileSeparator(\"\\\\\");\n+\n+\t\tErrors errors = new BeanPropertyBindingResult(properties, \"properties\");\n+\n+\t\tproperties.validate(properties, errors);\n+\n+\t\tassertThat(errors.getFieldError(\"profileSeparator\")).isNull();\n+\t}\n+\n+\tprivate static Stream<Arguments> invalidProperties() {\n+\t\treturn Stream.of(\n+\t\t\t\tArguments.of(new AwsParamStorePropertiesBuilder().withPrefix(\"\").build(), \"prefix\", \"NotEmpty\"),\n+\t\t\t\tArguments.of(new AwsParamStorePropertiesBuilder().withPrefix(\"!.\").build(), \"prefix\", \"Pattern\"),\n+\t\t\t\tArguments.of(new AwsParamStorePropertiesBuilder().withDefaultContext(\"\").build(), \"defaultContext\",\n+\t\t\t\t\t\t\"NotEmpty\"),\n+\t\t\t\tArguments.of(new AwsParamStorePropertiesBuilder().withProfileSeparator(\"\").build(), \"profileSeparator\",\n+\t\t\t\t\t\t\"NotEmpty\"),\n+\t\t\t\tArguments.of(new AwsParamStorePropertiesBuilder().withProfileSeparator(\"!_\").build(),\n+\t\t\t\t\t\t\"profileSeparator\", \"Pattern\"));\n+\t}\n+\n+\tprivate static class AwsParamStorePropertiesBuilder {\n+\n+\t\tprivate final AwsParamStoreProperties properties = new AwsParamStoreProperties();\n+\n+\t\tAwsParamStorePropertiesBuilder withPrefix(String prefix) {\n+\t\t\tthis.properties.setPrefix(prefix);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tAwsParamStorePropertiesBuilder withDefaultContext(String defaultContext) {\n+\t\t\tthis.properties.setDefaultContext(defaultContext);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tAwsParamStorePropertiesBuilder withProfileSeparator(String profileSeparator) {\n+\t\t\tthis.properties.setProfileSeparator(profileSeparator);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tAwsParamStoreProperties build() {\n+\t\t\treturn this.properties;\n+\t\t}\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "0887dbbd61f34e0182eb8afd994570e9090e4e7f",
    "filename": "v3/spring-cloud-aws-v3-core/src/main/java/io/awspring/cloud/v3/core/SpringCloudClientConfiguration.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-core/src/main/java/io/awspring/cloud/v3/core/SpringCloudClientConfiguration.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-core/src/main/java/io/awspring/cloud/v3/core/SpringCloudClientConfiguration.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-core/src/main/java/io/awspring/cloud/v3/core/SpringCloudClientConfiguration.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2013-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.core;\n+\n+import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkAdvancedClientOption;\n+\n+/**\n+ * @author Eddú Meléndez\n+ */\n+public final class SpringCloudClientConfiguration {\n+\n+\tprivate static final String NAME = \"spring-cloud-aws\";\n+\n+\tprivate static final String VERSION = \"3.0\";\n+\n+\tprivate SpringCloudClientConfiguration() {\n+\n+\t}\n+\n+\tprivate static String getUserAgent() {\n+\t\treturn NAME + \"/\" + VERSION;\n+\t}\n+\n+\tpublic static ClientOverrideConfiguration clientOverrideConfiguration() {\n+\t\treturn ClientOverrideConfiguration.builder()\n+\t\t\t\t.putAdvancedOption(SdkAdvancedClientOption.USER_AGENT_SUFFIX, getUserAgent()).build();\n+\t}\n+\n+}"
  },
  {
    "sha": "d221b48cc0d4a9f4908f0ab32d35a113a611683c",
    "filename": "v3/spring-cloud-aws-v3-parameter-store/pom.xml",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-parameter-store/pom.xml",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-parameter-store/pom.xml",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-parameter-store/pom.xml?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\t\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<parent>\n+\t\t<groupId>io.awspring.cloud</groupId>\n+\t\t<artifactId>v3</artifactId>\n+\t\t<version>2.3.0-RC2</version>\n+\t</parent>\n+\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<version>2.3.0-RC2</version>\n+\t<artifactId>spring-cloud-aws-v3-parameter-store</artifactId>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>software.amazon.awssdk</groupId>\n+\t\t\t<artifactId>ssm</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework</groupId>\n+\t\t\t<artifactId>spring-context</artifactId>\n+\t\t</dependency>\n+\t</dependencies>\n+\n+</project>"
  },
  {
    "sha": "bb025272089529fb07e74777cb32db72635a744a",
    "filename": "v3/spring-cloud-aws-v3-parameter-store/src/main/java/io/awspring/cloud/v3/paramstore/AwsParamStorePropertySource.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-parameter-store/src/main/java/io/awspring/cloud/v3/paramstore/AwsParamStorePropertySource.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-parameter-store/src/main/java/io/awspring/cloud/v3/paramstore/AwsParamStorePropertySource.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-parameter-store/src/main/java/io/awspring/cloud/v3/paramstore/AwsParamStorePropertySource.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2013-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.paramstore;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.ssm.SsmClient;\n+import software.amazon.awssdk.services.ssm.model.GetParametersByPathRequest;\n+import software.amazon.awssdk.services.ssm.model.GetParametersByPathResponse;\n+import software.amazon.awssdk.services.ssm.model.Parameter;\n+\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Recursively retrieves all parameters under the given context / path with decryption\n+ * from the AWS Parameter Store using the provided SSM client.\n+ *\n+ * @author Joris Kuipers\n+ * @author Eddú Meléndez\n+ * @since 2.0.0\n+ */\n+public class AwsParamStorePropertySource extends EnumerablePropertySource<SsmClient> {\n+\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(AwsParamStorePropertySource.class);\n+\n+\tprivate final String context;\n+\n+\tprivate final Map<String, Object> properties = new LinkedHashMap<>();\n+\n+\tpublic AwsParamStorePropertySource(String context, SsmClient ssmClient) {\n+\t\tsuper(context, ssmClient);\n+\t\tthis.context = context;\n+\t}\n+\n+\tpublic void init() {\n+\t\tGetParametersByPathRequest paramsRequest = GetParametersByPathRequest.builder().path(context).recursive(true)\n+\t\t\t\t.withDecryption(true).build();\n+\t\tgetParameters(paramsRequest);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\tSet<String> strings = this.properties.keySet();\n+\t\treturn strings.toArray(new String[strings.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn this.properties.get(name);\n+\t}\n+\n+\tprivate void getParameters(GetParametersByPathRequest paramsRequest) {\n+\t\tGetParametersByPathResponse paramsResult = this.source.getParametersByPath(paramsRequest);\n+\t\tfor (Parameter parameter : paramsResult.parameters()) {\n+\t\t\tString key = parameter.name().replace(this.context, \"\").replace('/', '.');\n+\t\t\tLOGGER.debug(\"Populating property retrieved from AWS Parameter Store: {}\", key);\n+\t\t\tthis.properties.put(key, parameter.value());\n+\t\t}\n+\t\tif (paramsResult.nextToken() != null) {\n+\t\t\tgetParameters(paramsRequest.toBuilder().nextToken(paramsResult.nextToken()).build());\n+\t\t}\n+\t}\n+\n+}"
  },
  {
    "sha": "69205149d3030bb89006543943b4283d2f8aeed2",
    "filename": "v3/spring-cloud-aws-v3-parameter-store/src/test/java/io/awspring/cloud/v3/paramstore/AwsParamStorePropertySourceTest.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-parameter-store/src/test/java/io/awspring/cloud/v3/paramstore/AwsParamStorePropertySourceTest.java",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-aws-v3-parameter-store/src/test/java/io/awspring/cloud/v3/paramstore/AwsParamStorePropertySourceTest.java",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-aws-v3-parameter-store/src/test/java/io/awspring/cloud/v3/paramstore/AwsParamStorePropertySourceTest.java?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2013-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.awspring.cloud.v3.paramstore;\n+\n+import org.junit.jupiter.api.Test;\n+import software.amazon.awssdk.services.ssm.SsmClient;\n+import software.amazon.awssdk.services.ssm.model.GetParametersByPathRequest;\n+import software.amazon.awssdk.services.ssm.model.GetParametersByPathResponse;\n+import software.amazon.awssdk.services.ssm.model.Parameter;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class AwsParamStorePropertySourceTest {\n+\n+\tprivate SsmClient ssmClient = mock(SsmClient.class);\n+\n+\tprivate AwsParamStorePropertySource propertySource = new AwsParamStorePropertySource(\"/config/myservice/\",\n+\t\t\tssmClient);\n+\n+\t@Test\n+\tvoid followsNextToken() {\n+\t\tGetParametersByPathResponse firstResult = GetParametersByPathResponse.builder().nextToken(\"next\")\n+\t\t\t\t.parameters(Parameter.builder().name(\"/config/myservice/key1\").value(\"value1\").build(),\n+\t\t\t\t\t\tParameter.builder().name(\"/config/myservice/key2\").value(\"value2\").build())\n+\t\t\t\t.build();\n+\n+\t\tGetParametersByPathResponse nextResult = GetParametersByPathResponse.builder()\n+\t\t\t\t.parameters(Parameter.builder().name(\"/config/myservice/key3\").value(\"value3\").build(),\n+\t\t\t\t\t\tParameter.builder().name(\"/config/myservice/key4\").value(\"value4\").build())\n+\t\t\t\t.build();\n+\n+\t\twhen(ssmClient.getParametersByPath(any(GetParametersByPathRequest.class))).thenReturn(firstResult, nextResult);\n+\n+\t\tpropertySource.init();\n+\n+\t\tassertThat(propertySource.getPropertyNames()).containsExactly(\"key1\", \"key2\", \"key3\", \"key4\");\n+\t\tassertThat(propertySource.getProperty(\"key3\")).isEqualTo(\"value3\");\n+\t}\n+\n+}"
  },
  {
    "sha": "9b05cff64fd52f405acc2ac9befd438a6c37ad2b",
    "filename": "v3/spring-cloud-starter-aws-v3-parameter-store/pom.xml",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/awspring/spring-cloud-aws/blob/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-starter-aws-v3-parameter-store/pom.xml",
    "raw_url": "https://github.com/awspring/spring-cloud-aws/raw/c95ac7ec500b080831bfd10f5921e97aff3b30a5/v3/spring-cloud-starter-aws-v3-parameter-store/pom.xml",
    "contents_url": "https://api.github.com/repos/awspring/spring-cloud-aws/contents/v3/spring-cloud-starter-aws-v3-parameter-store/pom.xml?ref=c95ac7ec500b080831bfd10f5921e97aff3b30a5",
    "patch": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\t\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<parent>\n+\t\t<groupId>io.awspring.cloud</groupId>\n+\t\t<artifactId>v3</artifactId>\n+\t\t<version>2.3.0-RC2</version>\n+\t</parent>\n+\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<version>2.3.0-RC2</version>\n+\t<artifactId>spring-cloud-starter-aws-v3-parameter-store</artifactId>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>io.awspring.cloud</groupId>\n+\t\t\t<artifactId>spring-cloud-aws-v3-autoconfigure</artifactId>\n+\t\t\t<version>2.3.0-RC2</version>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>io.awspring.cloud</groupId>\n+\t\t\t<artifactId>spring-cloud-aws-v3-parameter-store</artifactId>\n+\t\t\t<version>2.3.0-RC2</version>\n+\t\t</dependency>\n+\t</dependencies>\n+\n+</project>"
  }
]
