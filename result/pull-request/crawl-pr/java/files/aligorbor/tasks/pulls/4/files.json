[
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/.idea/uiDesigner.xml?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Palette2\">\n+    <group name=\"Swing\">\n+      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Button\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"RadioButton\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"CheckBox\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Label\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n+          <preferred-size width=\"-1\" height=\"20\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+    </group>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "94a25f7f4cb416c083d265558da75d457237d671",
    "filename": ".idea/vcs.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/.idea/vcs.xml",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/.idea/vcs.xml",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/.idea/vcs.xml?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"VcsDirectoryMappings\">\n+    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "7fce3d5e98f661a88027d7cd7c2f796ba0e37826",
    "filename": "pom.xml",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/pom.xml",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/pom.xml",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/pom.xml?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>ru.geekbrains.javaCoreProf.tasks</groupId>\n+    <artifactId>tasks</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+    <properties>\n+        <maven.compiler.source>15</maven.compiler.source>\n+        <maven.compiler.target>15</maven.compiler.target>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>5.6.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+    \n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "da6cdfec945d640219a2417c672a204e1bd9248b",
    "filename": "src/main/java/ru/geekbrains/javaCoreProf/tasks/lesson6/Arrays14.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/main/java/ru/geekbrains/javaCoreProf/tasks/lesson6/Arrays14.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/main/java/ru/geekbrains/javaCoreProf/tasks/lesson6/Arrays14.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/main/java/ru/geekbrains/javaCoreProf/tasks/lesson6/Arrays14.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,47 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson6;\n+\n+import java.util.Arrays;\n+\n+public class Arrays14 {\n+\n+    public static void main(String[] args) {\n+        int[] ar = {1, 2, 4, 4, 2, 3, 4, 1, 7};\n+        int[] ar1 = {4, 1, 1, 4, 4, 4, 4};\n+\n+        Arrays14 arrays14 = new Arrays14();\n+\n+        for (int a : arrays14.arrayAfter4(ar)) {\n+            System.out.println(a);\n+        }\n+\n+        System.out.println(arrays14.arrayTrue14(ar1));\n+\n+    }\n+\n+    public int[] arrayAfter4(int[] ar) {\n+        for (int i = ar.length - 1; i > -1; i--) {\n+            if (ar[i] == 4) {\n+                if (ar.length - 1 - i > 0)\n+                    return Arrays.copyOfRange(ar, i + 1, ar.length);\n+                break;\n+            }\n+        }\n+        throw new RuntimeException(\"Ошибочные входные данные\");\n+    }\n+\n+    public boolean arrayTrue14(int[] ar) {\n+        boolean true4 = false;\n+        boolean true1 = false;\n+\n+        for (int a : ar) {\n+            if (!(a == 1 || a == 4)) return false;\n+            if (a == 4) true4 = true;\n+            if (a == 1) true1 = true;\n+        }\n+        return true1 && true4;\n+    }\n+\n+\n+}\n+\n+"
  },
  {
    "sha": "beea54c3aa43d4c3ae581cf7f989fa4afe815bcd",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/Main.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/Main.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/Main.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/Main.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -1,4 +1,4 @@\n-package ru.geekbrains.javaCoreProf.homeWork;\n+package ru.geekbrains.javaCoreProf.tasks;\n \n public class Main {\n ",
    "previous_filename": "src/ru/geekbrains/javaCoreProf/homeWork/Main.java"
  },
  {
    "sha": "59d341536e8591b18c700c6645a80d378df3669c",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson1/Apple.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Apple.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Apple.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Apple.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson1;\n+\n+public class Apple extends Fruit {\n+    public Apple(float weight) {\n+        super(weight);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Apple{weight=\" + this.getWeight() + \"}\";\n+    }\n+}"
  },
  {
    "sha": "e90dd26434b8544b339d1a6386c2ddb917b74833",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson1/Box.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Box.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Box.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Box.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,62 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson1;\n+\n+import java.util.ArrayList;\n+\n+public class Box<E extends Fruit> {\n+    private ArrayList<E> fruits = null;\n+    private float weight = 0;\n+    private int countFruit = 0;\n+\n+    @SafeVarargs\n+    public Box(E... fruit) {\n+        for (E e : fruit) {\n+            this.addFruit(e);\n+        }\n+    }\n+\n+    public void addFruit(E fruit) {\n+        if (fruits == null) {\n+            fruits = new ArrayList<>();\n+        }\n+        fruits.add(fruit);\n+        weight += fruit.getWeight();\n+        countFruit++;\n+    }\n+\n+    public E removeFruit() {\n+        if (countFruit > 0) {\n+            countFruit--;\n+            weight -= fruits.get(fruits.size() - 1).getWeight();\n+            return fruits.remove(fruits.size() - 1);\n+        } else return null;\n+    }\n+\n+    public float getWeight() {\n+        return weight;\n+    }\n+\n+    public boolean isFull() {\n+        return countFruit > 0;\n+    }\n+\n+    public boolean compare(Box<?> anotherBox) {\n+        return Math.abs(this.getWeight() - anotherBox.getWeight()) < 0.0001;\n+    }\n+\n+    public void moveToAnotherBox(Box<E> anotherBox) {\n+        while (this.isFull()) {\n+            anotherBox.addFruit(this.removeFruit());\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder str = new StringBuilder(\"Box{\" +\n+                \"weight=%.2f, countFruit=\" + countFruit +\n+                \"} contains: \");\n+        for (Fruit f : fruits) {\n+            str.append(f.toString()).append(\" \");\n+        }\n+        return String.format(str.toString(), this.getWeight());\n+    }\n+}"
  },
  {
    "sha": "fc5fc3425a0b0103d75dfd8ec6a766f1e04b4bad",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson1/Fruit.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Fruit.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Fruit.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Fruit.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,17 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson1;\n+\n+public abstract class Fruit {\n+    private float weight;\n+\n+    public float getWeight() {\n+        return weight;\n+    }\n+\n+    public void setWeight(float weight) {\n+        this.weight = weight;\n+    }\n+\n+    public Fruit(float weight) {\n+        this.weight = weight;\n+    }\n+}"
  },
  {
    "sha": "ceeb9e4cffc6a7ba6feb358902b046eb47482958",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson1/Main.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Main.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Main.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Main.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,89 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson1;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        System.out.println(\"Задание 1\");\n+        Integer[] ar1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};\n+        swapper(ar1, 0, 9);\n+        for (Integer i : ar1) {\n+            System.out.print(i + \" \");\n+        }\n+        System.out.println();\n+        String[] ar2 = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n+        swapper(ar2, 0, 6);\n+        for (String s : ar2) {\n+            System.out.print(s + \" \");\n+        }\n+        System.out.println();\n+        System.out.println(\"Задание 2\");\n+        ArrayList<Integer> alInt = convertToList(ar1);\n+        System.out.println(alInt);\n+        ArrayList<String> alStr = convertToList(ar2);\n+        System.out.println(alStr);\n+        ArrayList<String> alStr1 = convertToList1(ar2);\n+        alStr1.add(\"qq\");\n+        System.out.println(alStr1);\n+\n+        System.out.println(\"Задание 3\");\n+        Box<Apple> box1 = new Box<>(new Apple(1f), new Apple(1.2f), new Apple(1.3f));\n+        System.out.println(\"Box1: \" + box1);\n+        Box<Orange> box2 = new Box<>(new Orange(1.5f), new Orange(1.6f), new Orange(1.7f));\n+        System.out.println(\"Box2: \" + box2);\n+        Box<Apple> box3 = new Box<>(new Apple(1f), new Apple(1.2f), new Apple(1.3f), new Apple(1.3f));\n+        System.out.println(\"Box3: \" + box3);\n+        if (box2.compare(box1)) System.out.println(\"Вес коробок box2 и box1 одинаковый\");\n+        if (box2.compare(box3)) System.out.println(\"Вес коробок box2 и box3 одинаковый\");\n+        box1.addFruit(new Apple(1.3f));\n+        System.out.println(\"Box1: \" + box1);\n+        if (box2.compare(box1)) System.out.println(\"Вес коробок box2 и box1 одинаковый\");\n+\n+        box1.moveToAnotherBox(box3);\n+        System.out.println(\"Box1: \" + box1);\n+        System.out.println(\"Box3: \" + box3);\n+        while (box3.isFull()) box3.removeFruit();\n+        System.out.println(\"Box3: \" + box3);\n+    }\n+\n+    //  1. Написать метод, который меняет два элемента массива местами (массив может быть любого ссылочного типа);\n+    public static <E> void swapper(E[] arr, int ind1, int ind2) {\n+        E el = arr[ind1];\n+        arr[ind1] = arr[ind2];\n+        arr[ind2] = el;\n+    }\n+\n+    // 2. Написать метод, который преобразует массив в ArrayList;\n+    public static <E> ArrayList<E> convertToList(E[] arr) {\n+        ArrayList<E> arrayList = new ArrayList<>();\n+        for (E el : arr) arrayList.add(el);\n+        return arrayList;\n+    }\n+\n+    public static <E> ArrayList<E> convertToList1(E[] arr) {\n+        return new ArrayList<>(Arrays.asList(arr));\n+    }\n+\n+\n+//   3. Есть классы Fruit -> Apple, Orange (больше фруктов не надо);\n+//    Класс Box, в который можно складывать фрукты. Коробки условно сортируются\n+//    по типу фрукта, поэтому в одну коробку нельзя сложить и яблоки, и апельсины;\n+//    Для хранения фруктов внутри коробки можно использовать ArrayList;\n+//    Сделать метод getWeight(), который высчитывает вес коробки, зная количество\n+//    фруктов и вес одного фрукта (вес яблока – 1.0f, апельсина – 1.5f. Не важно, в каких это единицах);\n+//    Внутри класса Коробка сделать метод compare, который позволяет сравнить текущую\n+//    коробку с той, которую подадут в compare в качестве параметра, true – если она равны\n+//    по весу, false – в противном случае (коробки с яблоками мы можем сравнивать с коробками с апельсинами);\n+//    Написать метод, который позволяет пересыпать фрукты из текущей коробки в другую\n+//    (помним про сортировку фруктов: нельзя яблоки высыпать в коробку с апельсинами).\n+//    Соответственно, в текущей коробке фруктов не остается, а в другую перекидываются объекты,\n+//    которые были в этой коробке;\n+//    Не забываем про метод добавления фрукта в коробку.\n+\n+\n+}\n+\n+\n+\n+"
  },
  {
    "sha": "5c12790a134f05149781e12813ab2d323d8ae77c",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson1/Orange.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Orange.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Orange.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson1/Orange.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson1;\n+\n+public class Orange extends Fruit {\n+    public Orange(float weight) {\n+        super(weight);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Orange{weight=\" + this.getWeight() + \"}\";\n+    }\n+}"
  },
  {
    "sha": "33de8534d9c6373c7a1b82e92a33a4a981e7b423",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson4/WaitNotifyClass.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson4/WaitNotifyClass.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson4/WaitNotifyClass.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson4/WaitNotifyClass.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,69 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson4;\n+\n+public class WaitNotifyClass {\n+    private final int nRepeat =6;\n+    private final Object mon = new Object();\n+    private volatile char currentLetter = 'A';\n+\n+    public static void main(String[] args) {\n+        WaitNotifyClass w = new WaitNotifyClass();\n+        Thread t1 = new Thread(w::printA);\n+        Thread t2 = new Thread(w::printB);\n+        Thread t3 = new Thread(w::printC);\n+        t1.start();\n+        t2.start();\n+        t3.start();\n+    }\n+\n+    public void printA() {\n+        synchronized (mon) {\n+            try {\n+                for (int i = 0; i < nRepeat; i++) {\n+                    while (currentLetter != 'A') {\n+                        mon.wait();\n+                    }\n+                    System.out.print(\"A\");\n+                    currentLetter = 'B';\n+                    mon.notifyAll();\n+                }\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public void printB() {\n+        synchronized (mon) {\n+            try {\n+                for (int i = 0; i < nRepeat; i++) {\n+                    while (currentLetter != 'B') {\n+                        mon.wait();\n+                    }\n+                    System.out.print(\"B\");\n+                    currentLetter = 'C';\n+                    mon.notifyAll();\n+                }\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public void printC() {\n+        synchronized (mon) {\n+            try {\n+                for (int i = 0; i < nRepeat; i++) {\n+                    while (currentLetter != 'C') {\n+                        mon.wait();\n+                    }\n+                    System.out.print(\"C\");\n+                    currentLetter = 'A';\n+                    mon.notifyAll();\n+                }\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "9defa86cffc8e891866feba4cf783d000ef6d1c9",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson5/Car.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Car.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Car.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Car.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,58 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson5;\n+\n+public class Car implements Runnable {\n+    private static int CARS_COUNT;\n+    private static int FINISH_COUNT;\n+\n+    static {\n+        CARS_COUNT = 0;\n+        FINISH_COUNT = 0;\n+    }\n+\n+    private final Race race;\n+    private final int speed;\n+    private final String name;\n+    private int finishCount;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public int getSpeed() {\n+        return speed;\n+    }\n+\n+    public Car(Race race, int speed) {\n+        this.race = race;\n+        this.speed = speed;\n+        CARS_COUNT++;\n+        this.name = \"Участник #\" + CARS_COUNT;\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            System.out.println(this.name + \" готовится\");\n+            Thread.sleep(500 + (int) (Math.random() * 800));\n+            System.out.println(this.name + \" готов\");\n+            race.getCbPrepare().await();\n+            race.getCdlStart().countDown();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        for (int i = 0; i < race.getStages().size(); i++) {\n+            race.getStages().get(i).go(this);\n+        }\n+        try {\n+            race.getLockWinner().lock();\n+            finishCount = ++FINISH_COUNT;\n+            if (finishCount == 1) {\n+                System.out.println(this.name + \" \" + finishCount + \"-е место WIN!!!!!!!!\");\n+            } else\n+                System.out.println(this.name + \" \" + finishCount + \"-е место\");\n+        } finally {\n+            race.getLockWinner().unlock();\n+        }\n+        race.getCdlFinish().countDown();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0e166232c48aa111711c53687b422dc632ad2280",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson5/MainClass.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/MainClass.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/MainClass.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson5/MainClass.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,31 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson5;\n+\n+public class MainClass {\n+    public static final int CARS_COUNT = 4;\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!\");\n+        Race race = new Race(CARS_COUNT, new Road(60, CARS_COUNT), new Tunnel(80, CARS_COUNT / 2), new Road(40, CARS_COUNT));\n+        Car[] cars = new Car[CARS_COUNT];\n+        for (int i = 0; i < cars.length; i++) {\n+            cars[i] = new Car(race, 20 + (int) (Math.random() * 10));\n+        }\n+        for (int i = 0; i < cars.length; i++) {\n+            new Thread(cars[i]).start();\n+        }\n+        try {\n+            race.getCdlStart().await();\n+            System.out.println(\"ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!\");\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+\n+        try {\n+            race.getCdlFinish().await();\n+            System.out.println(\"ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!\");\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "492413d3b5128549f2e7a1ebc27d8550c777b972",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson5/Race.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Race.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Race.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Race.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,44 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson5;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class Race {\n+    private final ArrayList<Stage> stages;\n+    private final CyclicBarrier cbPrepare;\n+    private final CountDownLatch cdlStart;\n+    private final CountDownLatch cdlFinish;\n+    private final Lock lockWinner;\n+\n+    public Lock getLockWinner() {\n+        return lockWinner;\n+    }\n+\n+    public CyclicBarrier getCbPrepare() {\n+        return cbPrepare;\n+    }\n+\n+    public CountDownLatch getCdlFinish() {\n+        return cdlFinish;\n+    }\n+\n+    public ArrayList<Stage> getStages() {\n+        return stages;\n+    }\n+\n+    public CountDownLatch getCdlStart() {\n+        return cdlStart;\n+    }\n+\n+    public Race(int carsCount, Stage... stages) {\n+        this.stages = new ArrayList<>(Arrays.asList(stages));\n+        cbPrepare = new CyclicBarrier(carsCount);\n+        cdlStart = new CountDownLatch(carsCount);\n+        cdlFinish = new CountDownLatch(carsCount);\n+        lockWinner = new ReentrantLock();\n+    }\n+}"
  },
  {
    "sha": "61a0d18e21b298c2ad343f1a0b7424bca216b8c2",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson5/Road.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Road.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Road.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Road.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson5;\n+\n+public class Road extends Stage {\n+    public Road(int length, int carsCount) {\n+        super(length, carsCount);\n+        this.description = \"Дорога \" + length + \" метров\";\n+    }\n+\n+    @Override\n+    public void go(Car c) {\n+        try {\n+            smpLimit.acquire();\n+            System.out.println(c.getName() + \" начал этап: \" + description);\n+            Thread.sleep(length / c.getSpeed() * 1000L);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        } finally {\n+            System.out.println(c.getName() + \" закончил этап: \" + description);\n+            smpLimit.release();\n+        }\n+    }\n+}"
  },
  {
    "sha": "99b8538dc7898626db9c3dde952ef68f3e946d09",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson5/Stage.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Stage.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Stage.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Stage.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,20 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson5;\n+\n+import java.util.concurrent.Semaphore;\n+\n+public abstract class Stage {\n+    protected int length;\n+    protected String description;\n+    protected Semaphore smpLimit;\n+\n+    protected Stage(int length, int limitOfCars) {\n+        this.length = length;\n+        smpLimit = new Semaphore(limitOfCars);\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public abstract void go(Car c);\n+}"
  },
  {
    "sha": "892cc8242c726c9deff0c3719499f7fb7824a51a",
    "filename": "src/ru/geekbrains/javaCoreProf/tasks/lesson5/Tunnel.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Tunnel.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Tunnel.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/ru/geekbrains/javaCoreProf/tasks/lesson5/Tunnel.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson5;\n+\n+public class Tunnel extends Stage {\n+    public Tunnel(int length, int carsCount) {\n+        super(length, carsCount);\n+        this.description = \"Тоннель \" + length + \" метров\";\n+    }\n+\n+    @Override\n+    public void go(Car c) {\n+        try {\n+            try {\n+                System.out.println(c.getName() + \" готовится к этапу(ждет): \" + description);\n+                smpLimit.acquire();\n+                System.out.println(c.getName() + \" начал этап: \" + description);\n+                Thread.sleep(length / c.getSpeed() * 1000L);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            } finally {\n+                System.out.println(c.getName() + \" закончил этап: \" + description);\n+                smpLimit.release();\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}"
  },
  {
    "sha": "b23ddb7220c6a21c49151d708a8dc8c4d16bae11",
    "filename": "src/test/java/ru/geekbrains/javaCoreProf/tasks/lesson6/Arrays14Test.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/aligorbor/tasks/blob/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/test/java/ru/geekbrains/javaCoreProf/tasks/lesson6/Arrays14Test.java",
    "raw_url": "https://github.com/aligorbor/tasks/raw/7a5fb3542c6917cc8203b51f2e479d7eafa3c970/src/test/java/ru/geekbrains/javaCoreProf/tasks/lesson6/Arrays14Test.java",
    "contents_url": "https://api.github.com/repos/aligorbor/tasks/contents/src/test/java/ru/geekbrains/javaCoreProf/tasks/lesson6/Arrays14Test.java?ref=7a5fb3542c6917cc8203b51f2e479d7eafa3c970",
    "patch": "@@ -0,0 +1,74 @@\n+package ru.geekbrains.javaCoreProf.tasks.lesson6;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+class Arrays14Test {\n+    private Arrays14 arrays14;\n+\n+    @BeforeEach\n+    public void init() {\n+        arrays14 = new Arrays14();\n+\n+    }\n+\n+    static Stream<Arguments> twoArraysProvider() {\n+        return Stream.of(\n+                arguments(new int[]{1, 2, 4, 4, 2, 3, 4, 1, 7}, new int[]{1, 7}),\n+                arguments(new int[]{1, 2, 1, 4, 2, 3, 2, 1, 3}, new int[]{2, 3, 2, 1, 3}),\n+                arguments(new int[]{4, 2, 4, 4, 2, 3, 1, 1, 7}, new int[]{2, 3, 1, 1, 7}),\n+                arguments(new int[]{1, 2, 4, 5, 2, 3, 2, 1, 7}, new int[]{5, 2, 3, 2, 1, 7}),\n+                arguments(new int[]{1, 2, 4, 4, 2, 3, 1, 1, 3}, new int[]{2, 3, 1, 1, 3})\n+\n+        );\n+    }\n+\n+    static Stream<Arguments> throwProvider() {\n+        return Stream.of(\n+                arguments(new int[]{1, 2, 4, 4, 2, 3, 4, 1, 4}),\n+                arguments(new int[]{1, 2, 1, 3, 2, 3, 3, 1, 1}),\n+                arguments(new int[]{4}),\n+                arguments(new int[]{}),\n+                arguments(new int[]{1, 2, 3, 5, 2, 3, 2, 1, 7})\n+\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"twoArraysProvider\")\n+    void testArrayAfter4(int[] input, int[] result) {\n+        Assertions.assertArrayEquals(result, arrays14.arrayAfter4(input));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"throwProvider\")\n+    void testThrowArrayAfter4(int[] input) {\n+        Assertions.assertThrows(RuntimeException.class, () -> arrays14.arrayAfter4(input));\n+    }\n+\n+    static Stream<Arguments> arrayBooleanProvider() {\n+        return Stream.of(\n+                arguments(new int[]{1, 1, 4, 4, 1, 1, 4, 1, 1}, true),\n+                arguments(new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1}, false),\n+                arguments(new int[]{4, 4, 4, 4}, false),\n+                arguments(new int[]{1, 1, 4, 1, 1, 1, 1, 1, 1}, true),\n+                arguments(new int[]{1, 2, 4, 4, 1, 1, 4, 1, 4}, false)\n+\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"arrayBooleanProvider\")\n+    void testArrayTrue14(int[] input, boolean result) {\n+        Assertions.assertEquals(result, arrays14.arrayTrue14(input));\n+    }\n+}\n\\ No newline at end of file"
  }
]
