[
  {
    "sha": "e91116ecb8a0d49f1d1a6ba357152a793ab2a547",
    "filename": "spring-batch-core/src/main/java/org/springframework/batch/core/jsr/configuration/support/BatchPropertyContext.java",
    "status": "modified",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/spring-projects/spring-batch/blob/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-core/src/main/java/org/springframework/batch/core/jsr/configuration/support/BatchPropertyContext.java",
    "raw_url": "https://github.com/spring-projects/spring-batch/raw/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-core/src/main/java/org/springframework/batch/core/jsr/configuration/support/BatchPropertyContext.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core/src/main/java/org/springframework/batch/core/jsr/configuration/support/BatchPropertyContext.java?ref=7d184aa93f9a868b47ec2db27454c8b5cbe7a76f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2013-2014 the original author or authors.\n+ * Copyright 2013-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -218,7 +218,6 @@ public Properties getStepArtifactProperties(String stepName, String artifactName\n \t *\n \t * @param properties the step artifact {@link Properties} to add\n \t */\n-\t@SuppressWarnings(\"serial\")\n \tpublic void setStepArtifactProperties(Map<String, Map<String, Properties>> properties) {\n \t\tAssert.notNull(properties, \"Step artifact properties cannot be null\");\n \n@@ -232,12 +231,10 @@ public void setStepArtifactProperties(Map<String, Map<String, Properties>> prope\n \t\t\t\tMap<String, Properties> artifactProperties = stepArtifactProperties.get(stepName);\n \n \t\t\t\tif (artifactProperties == null) {\n-\t\t\t\t\tstepArtifactProperties.put(stepName, new HashMap<String, Properties>() {{\n-\t\t\t\t\t\tput(artifactName, props);\n-\t\t\t\t\t}});\n-\t\t\t\t} else {\n-\t\t\t\t\tartifactProperties.put(artifactName, props);\n+\t\t\t\t\tartifactProperties = new HashMap<>();\n+\t\t\t\t\tstepArtifactProperties.put(stepName, artifactProperties);\n \t\t\t\t}\n+\t\t\t\tartifactProperties.put(artifactName, props);\n \t\t\t}\n \t\t}\n \t}"
  },
  {
    "sha": "53aa5098221052030517d131dd2904456da74073",
    "filename": "spring-batch-core/src/test/java/org/springframework/batch/core/jsr/configuration/support/BatchPropertyContextTests.java",
    "status": "modified",
    "additions": 5,
    "deletions": 10,
    "changes": 15,
    "blob_url": "https://github.com/spring-projects/spring-batch/blob/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-core/src/test/java/org/springframework/batch/core/jsr/configuration/support/BatchPropertyContextTests.java",
    "raw_url": "https://github.com/spring-projects/spring-batch/raw/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-core/src/test/java/org/springframework/batch/core/jsr/configuration/support/BatchPropertyContextTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core/src/test/java/org/springframework/batch/core/jsr/configuration/support/BatchPropertyContextTests.java?ref=7d184aa93f9a868b47ec2db27454c8b5cbe7a76f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2013-2014 the original author or authors.\n+ * Copyright 2013-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,6 +17,7 @@\n \n import static org.junit.Assert.assertEquals;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n@@ -65,25 +66,19 @@ public void setUp() {\n \t\tstepArtifactProperties.setProperty(\"readerProperty1\", \"readerProperty1value\");\n \t\tstepArtifactProperties.setProperty(\"readerProperty2\", \"readerProperty2value\");\n \n-\t\tthis.stepArtifactProperties.put(\"step1\", new HashMap<String, Properties>() {{\n-\t\t\tput(\"reader\", stepArtifactProperties);\n-\t\t}});\n+\t\tthis.stepArtifactProperties.put(\"step1\", Collections.singletonMap(\"reader\", stepArtifactProperties));\n \n \t\tfinal Properties partitionProperties = new Properties();\n \t\tpartitionProperties.setProperty(\"writerProperty1\", \"writerProperty1valuePartition0\");\n \t\tpartitionProperties.setProperty(\"writerProperty2\", \"writerProperty2valuePartition0\");\n \n-\t\tthis.partitionProperties.put(\"step2:partition0\", new HashMap<String, Properties>() {{\n-\t\t\tput(\"writer\", partitionProperties);\n-\t\t}});\n+\t\tthis.partitionProperties.put(\"step2:partition0\", Collections.singletonMap(\"writer\", partitionProperties));\n \n \t\tfinal Properties partitionStepProperties = new Properties();\n \t\tpartitionStepProperties.setProperty(\"writerProperty1Step\", \"writerProperty1\");\n \t\tpartitionStepProperties.setProperty(\"writerProperty2Step\", \"writerProperty2\");\n \n-\t\tthis.partitionProperties.put(\"step2\", new HashMap<String, Properties>() {{\n-\t\t\tput(\"writer\", partitionStepProperties);\n-\t\t}});\n+\t\tthis.partitionProperties.put(\"step2\", Collections.singletonMap(\"writer\", partitionStepProperties));\n \t}\n \n \t@Test"
  },
  {
    "sha": "70ea44144bc63030f855af46a46928de1a3f1b72",
    "filename": "spring-batch-core/src/test/java/org/springframework/batch/core/step/builder/StepBuilderTests.java",
    "status": "modified",
    "additions": 4,
    "deletions": 15,
    "changes": 19,
    "blob_url": "https://github.com/spring-projects/spring-batch/blob/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-core/src/test/java/org/springframework/batch/core/step/builder/StepBuilderTests.java",
    "raw_url": "https://github.com/spring-projects/spring-batch/raw/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-core/src/test/java/org/springframework/batch/core/step/builder/StepBuilderTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-core/src/test/java/org/springframework/batch/core/step/builder/StepBuilderTests.java?ref=7d184aa93f9a868b47ec2db27454c8b5cbe7a76f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2019 the original author or authors.\n+ * Copyright 2012-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,7 +15,7 @@\n  */\n package org.springframework.batch.core.step.builder;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.function.Function;\n \n@@ -58,7 +58,6 @@\n  * @author Mahmoud Ben Hassine\n  *\n  */\n-@SuppressWarnings(\"serial\")\n public class StepBuilderTests {\n \n \t@Test\n@@ -180,15 +179,10 @@ public void testItemListeners() throws Exception {\n \t\tjobRepository.add(execution);\n \t\tPlatformTransactionManager transactionManager = new ResourcelessTransactionManager();\n \n-\t\tList<String> items = new ArrayList<String>() {{\n-\t\t\tadd(\"1\");\n-\t\t\tadd(\"2\");\n-\t\t\tadd(\"3\");\n-\t\t}};\n+\t\tList<String> items = Arrays.asList(\"1\", \"2\", \"3\");\n \n \t\tItemReader<String> reader = new ListItemReader<>(items);\n \n-\t\t@SuppressWarnings(\"unchecked\")\n \t\tSimpleStepBuilder<String, String> builder = new StepBuilder(\"step\")\n \t\t\t\t\t\t\t\t\t\t\t .repository(jobRepository)\n \t\t\t\t\t\t\t\t\t\t\t .transactionManager(transactionManager)\n@@ -219,16 +213,11 @@ public void testFunctions() throws Exception {\n \t\tjobRepository.add(execution);\n \t\tPlatformTransactionManager transactionManager = new ResourcelessTransactionManager();\n \n-\t\tList<Long> items = new ArrayList<Long>() {{\n-\t\t\tadd(1L);\n-\t\t\tadd(2L);\n-\t\t\tadd(3L);\n-\t\t}};\n+\t\tList<Long> items = Arrays.asList(1L, 2L, 3L);\n \n \t\tItemReader<Long> reader = new ListItemReader<>(items);\n \n \t\tListItemWriter<String> itemWriter = new ListItemWriter<>();\n-\t\t@SuppressWarnings(\"unchecked\")\n \t\tSimpleStepBuilder<Object, String> builder = new StepBuilder(\"step\")\n \t\t\t\t\t\t\t\t\t\t\t .repository(jobRepository)\n \t\t\t\t\t\t\t\t\t\t\t .transactionManager(transactionManager)"
  },
  {
    "sha": "71567b99ee2e9ee3d3a58d92488ce4064a709236",
    "filename": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemReaderTests.java",
    "status": "modified",
    "additions": 4,
    "deletions": 9,
    "changes": 13,
    "blob_url": "https://github.com/spring-projects/spring-batch/blob/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemReaderTests.java",
    "raw_url": "https://github.com/spring-projects/spring-batch/raw/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemReaderTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemReaderTests.java?ref=7d184aa93f9a868b47ec2db27454c8b5cbe7a76f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2013-2020 the original author or authors.\n+ * Copyright 2013-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n package org.springframework.batch.item.data;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -198,12 +199,9 @@ public void testQueryWithHint() {\n \t\tassertEquals(\"{ $natural : 1}\", query.getHint());\n \t}\n \n-\t@SuppressWarnings(\"serial\")\n \t@Test\n \tpublic void testQueryWithParameters() {\n-\t\treader.setParameterValues(new ArrayList<Object>(){{\n-\t\t\tadd(\"foo\");\n-\t\t}});\n+\t\treader.setParameterValues(Collections.singletonList(\"foo\"));\n \n \t\treader.setQuery(\"{ name : ?0 }\");\n \t\tArgumentCaptor<Query> queryContainer = ArgumentCaptor.forClass(Query.class);\n@@ -219,12 +217,9 @@ public void testQueryWithParameters() {\n \t\tassertEquals(\"{\\\"name\\\": -1}\", query.getSortObject().toJson());\n \t}\n \n-\t@SuppressWarnings(\"serial\")\n \t@Test\n \tpublic void testQueryWithCollection() {\n-\t\treader.setParameterValues(new ArrayList<Object>(){{\n-\t\t\tadd(\"foo\");\n-\t\t}});\n+\t\treader.setParameterValues(Collections.singletonList(\"foo\"));\n \n \t\treader.setQuery(\"{ name : ?0 }\");\n \t\treader.setCollection(\"collection\");"
  },
  {
    "sha": "b016feb573b854d4e73ad69ca013aa5224f3c23e",
    "filename": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemWriterTests.java",
    "status": "modified",
    "additions": 12,
    "deletions": 42,
    "changes": 54,
    "blob_url": "https://github.com/spring-projects/spring-batch/blob/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemWriterTests.java",
    "raw_url": "https://github.com/spring-projects/spring-batch/raw/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemWriterTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemWriterTests.java?ref=7d184aa93f9a868b47ec2db27454c8b5cbe7a76f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2013-2020 the original author or authors.\n+ * Copyright 2013-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n package org.springframework.batch.item.data;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n@@ -57,7 +58,6 @@\n  * @author Parikshit Dutta\n  * @author Mahmoud Ben Hassine\n  */\n-@SuppressWarnings(\"serial\")\n public class MongoItemWriterTests {\n \n \tprivate MongoItemWriter<Object> writer;\n@@ -101,10 +101,7 @@ public void testAfterPropertiesSet() throws Exception {\n \n \t@Test\n \tpublic void testWriteNoTransactionNoCollection() throws Exception {\n-\t\tList<Item> items = new ArrayList<Item>() {{\n-\t\t\tadd(new Item(\"Foo\"));\n-\t\t\tadd(new Item(\"Bar\"));\n-\t\t}};\n+\t\tList<Item> items = Arrays.asList(new Item(\"Foo\"), new Item(\"Bar\"));\n \n \t\twriter.write(items);\n \n@@ -114,10 +111,7 @@ public void testWriteNoTransactionNoCollection() throws Exception {\n \n \t@Test\n \tpublic void testWriteNoTransactionWithCollection() throws Exception {\n-\t\tList<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(\"Foo\"));\n-\t\t\tadd(new Item(\"Bar\"));\n-\t\t}};\n+\t\tList<Object> items = Arrays.asList(new Item(\"Foo\"), new Item(\"Bar\"));\n \n \t\twriter.setCollection(\"collection\");\n \n@@ -137,10 +131,7 @@ public void testWriteNoTransactionNoItems() throws Exception {\n \n \t@Test\n \tpublic void testWriteTransactionNoCollection() throws Exception {\n-\t\tfinal List<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(\"Foo\"));\n-\t\t\tadd(new Item(\"Bar\"));\n-\t\t}};\n+\t\tfinal List<Object> items = Arrays.asList(new Item(\"Foo\"), new Item(\"Bar\"));\n \n \t\tnew TransactionTemplate(transactionManager).execute((TransactionCallback<Void>) status -> {\n \t\t\ttry {\n@@ -158,10 +149,7 @@ public void testWriteTransactionNoCollection() throws Exception {\n \n \t@Test\n \tpublic void testWriteTransactionWithCollection() throws Exception {\n-\t\tfinal List<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(\"Foo\"));\n-\t\t\tadd(new Item(\"Bar\"));\n-\t\t}};\n+\t\tfinal List<Object> items = Arrays.asList(new Item(\"Foo\"), new Item(\"Bar\"));\n \n \t\twriter.setCollection(\"collection\");\n \n@@ -181,10 +169,7 @@ public void testWriteTransactionWithCollection() throws Exception {\n \n \t@Test\n \tpublic void testWriteTransactionFails() throws Exception {\n-\t\tfinal List<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(\"Foo\"));\n-\t\t\tadd(new Item(\"Bar\"));\n-\t\t}};\n+\t\tfinal List<Object> items = Arrays.asList(new Item(\"Foo\"), new Item(\"Bar\"));\n \n \t\twriter.setCollection(\"collection\");\n \n@@ -213,10 +198,7 @@ public void testWriteTransactionFails() throws Exception {\n \t */\n \t@Test\n \tpublic void testWriteTransactionReadOnly() throws Exception {\n-\t\tfinal List<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(\"Foo\"));\n-\t\t\tadd(new Item(\"Bar\"));\n-\t\t}};\n+\t\tfinal List<Object> items = Arrays.asList(new Item(\"Foo\"), new Item(\"Bar\"));\n \n \t\twriter.setCollection(\"collection\");\n \n@@ -242,10 +224,7 @@ public void testWriteTransactionReadOnly() throws Exception {\n \t@Test\n \tpublic void testRemoveNoObjectIdNoCollection() throws Exception {\n \t\twriter.setDelete(true);\n-\t\tList<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(\"Foo\"));\n-\t\t\tadd(new Item(\"Bar\"));\n-\t\t}};\n+\t\tList<Object> items = Arrays.asList(new Item(\"Foo\"), new Item(\"Bar\"));\n \n \t\twriter.write(items);\n \n@@ -256,10 +235,7 @@ public void testRemoveNoObjectIdNoCollection() throws Exception {\n \t@Test\n \tpublic void testRemoveNoObjectIdWithCollection() throws Exception {\n \t\twriter.setDelete(true);\n-\t\tList<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(\"Foo\"));\n-\t\t\tadd(new Item(\"Bar\"));\n-\t\t}};\n+\t\tList<Object> items = Arrays.asList(new Item(\"Foo\"), new Item(\"Bar\"));\n \n \t\twriter.setCollection(\"collection\");\n \t\twriter.write(items);\n@@ -271,10 +247,7 @@ public void testRemoveNoObjectIdWithCollection() throws Exception {\n \t@Test\n \tpublic void testRemoveNoTransactionNoCollection() throws Exception {\n \t\twriter.setDelete(true);\n-\t\tList<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(1));\n-\t\t\tadd(new Item(2));\n-\t\t}};\n+\t\tList<Object> items = Arrays.asList(new Item(1), new Item(2));\n \n \t\twriter.write(items);\n \n@@ -285,10 +258,7 @@ public void testRemoveNoTransactionNoCollection() throws Exception {\n \t@Test\n \tpublic void testRemoveNoTransactionWithCollection() throws Exception {\n \t\twriter.setDelete(true);\n-\t\tList<Object> items = new ArrayList<Object>() {{\n-\t\t\tadd(new Item(1));\n-\t\t\tadd(new Item(2));\n-\t\t}};\n+\t\tList<Object> items = Arrays.asList(new Item(1), new Item(2));\n \n \t\twriter.setCollection(\"collection\");\n "
  },
  {
    "sha": "af1cff6234e96ac9d185632232300fe76dea3be9",
    "filename": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/spring-projects/spring-batch/blob/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java",
    "raw_url": "https://github.com/spring-projects/spring-batch/raw/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterNamedParameterTests.java?ref=7d184aa93f9a868b47ec2db27454c8b5cbe7a76f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2006-2008 the original author or authors.\n+ * Copyright 2006-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,7 +16,6 @@\n package org.springframework.batch.item.database;\n \n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n \n import org.hamcrest.BaseMatcher;\n@@ -131,7 +130,7 @@ public void testWriteAndFlush() throws Exception {\n \t\twriter.write(Collections.singletonList(new Foo(\"bar\")));\n \t}\n \n-\t@SuppressWarnings({ \"rawtypes\", \"serial\", \"unchecked\" })\n+\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n \t@Test\n \tpublic void testWriteAndFlushMap() throws Exception {\n \t\tJdbcBatchItemWriter<Map<String, Object>> mapWriter = new JdbcBatchItemWriter<>();\n@@ -145,14 +144,13 @@ public void testWriteAndFlushMap() throws Exception {\n \t\twhen(namedParameterJdbcOperations.batchUpdate(eq(sql),\n \t\t\t\tcaptor.capture()))\n \t\t\t\t.thenReturn(new int[] {1});\n-\t\tmapWriter.write(Collections.singletonList(new HashMap<String, Object>() {{put(\"foo\", \"bar\");}}));\n+\t\tmapWriter.write(Collections.singletonList(Collections.singletonMap(\"foo\", \"bar\")));\n \n \t\tassertEquals(1, captor.getValue().length);\n \t\tMap<String, Object> results = captor.getValue()[0];\n \t\tassertEquals(\"bar\", results.get(\"foo\"));\n \t}\n \n-\t@SuppressWarnings({ \"rawtypes\", \"serial\", \"unchecked\" })\n \t@Test\n \tpublic void testWriteAndFlushMapWithItemSqlParameterSourceProvider() throws Exception {\n \t\tJdbcBatchItemWriter<Map<String, Object>> mapWriter = new JdbcBatchItemWriter<>();\n@@ -172,7 +170,7 @@ public SqlParameterSource createSqlParameterSource(Map<String, Object> item) {\n \t\twhen(namedParameterJdbcOperations.batchUpdate(any(String.class),\n \t\t\t\tcaptor.capture()))\n \t\t\t\t.thenReturn(new int[] {1});\n-\t\tmapWriter.write(Collections.singletonList(new HashMap<String, Object>() {{put(\"foo\", \"bar\");}}));\n+\t\tmapWriter.write(Collections.singletonList(Collections.singletonMap(\"foo\", \"bar\")));\n \n \t\tassertEquals(1, captor.getValue().length);\n \t\tSqlParameterSource results = captor.getValue()[0];"
  },
  {
    "sha": "a2a9af0f73998af7249949d9ebf0700a0cf2ead0",
    "filename": "spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemProcessorTests.java",
    "status": "modified",
    "additions": 7,
    "deletions": 9,
    "changes": 16,
    "blob_url": "https://github.com/spring-projects/spring-batch/blob/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemProcessorTests.java",
    "raw_url": "https://github.com/spring-projects/spring-batch/raw/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemProcessorTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemProcessorTests.java?ref=7d184aa93f9a868b47ec2db27454c8b5cbe7a76f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2008-2013 the original author or authors.\n+ * Copyright 2008-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -22,6 +22,7 @@\n import static org.mockito.Mockito.when;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n \n import org.junit.Assert;\n import org.junit.Before;\n@@ -41,15 +42,13 @@\n \tprivate ItemProcessor<Object, Object> processor1;\n \tprivate ItemProcessor<Object, Object> processor2;\n \n-\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n+\t@SuppressWarnings(\"unchecked\")\n \t@Before\n \tpublic void setUp() throws Exception {\n \t\tprocessor1 = mock(ItemProcessor.class);\n \t\tprocessor2 = mock(ItemProcessor.class);\n \n-\t\tcomposite.setDelegates(new ArrayList<ItemProcessor<Object,Object>>() {{\n-\t\t\tadd(processor1); add(processor2);\n-\t\t}});\n+\t\tcomposite.setDelegates(Arrays.asList(processor1, processor2));\n \n \t\tcomposite.afterPropertiesSet();\n \t}\n@@ -76,14 +75,13 @@ public void testTransform() throws Exception {\n \t * Test that the CompositeItemProcessor can work with generic types for the ItemProcessor delegates.\n \t */\n \t@Test\n-\t@SuppressWarnings({\"unchecked\", \"serial\"})\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void testItemProcessorGenerics() throws Exception {\n \t\tCompositeItemProcessor<String, String> composite = new CompositeItemProcessor<>();\n \t\tfinal ItemProcessor<String, Integer> processor1 = mock(ItemProcessor.class);\n \t\tfinal ItemProcessor<Integer, String> processor2 = mock(ItemProcessor.class);\n-\t\tcomposite.setDelegates(new ArrayList<ItemProcessor<?,?>>() {{\n-\t\t\tadd(processor1); add(processor2);\n-\t\t}});\n+\t\tcomposite.setDelegates(Arrays.asList(processor1, processor2));\n+\n \t\tcomposite.afterPropertiesSet();\n \n \t\twhen(processor1.process(\"input\")).thenReturn(5);"
  },
  {
    "sha": "9d8046547ddd6d53a55c60ec68277391335cb766",
    "filename": "spring-batch-infrastructure/src/test/java/org/springframework/batch/jsr/item/ItemReaderAdapterTests.java",
    "status": "modified",
    "additions": 3,
    "deletions": 8,
    "changes": 11,
    "blob_url": "https://github.com/spring-projects/spring-batch/blob/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/jsr/item/ItemReaderAdapterTests.java",
    "raw_url": "https://github.com/spring-projects/spring-batch/raw/7d184aa93f9a868b47ec2db27454c8b5cbe7a76f/spring-batch-infrastructure/src/test/java/org/springframework/batch/jsr/item/ItemReaderAdapterTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-batch/contents/spring-batch-infrastructure/src/test/java/org/springframework/batch/jsr/item/ItemReaderAdapterTests.java?ref=7d184aa93f9a868b47ec2db27454c8b5cbe7a76f",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2013-2018 the original author or authors.\n+ * Copyright 2013-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,7 +16,7 @@\n package org.springframework.batch.jsr.item;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import javax.batch.api.chunk.ItemReader;\n \n@@ -110,16 +110,11 @@ public void testRead() throws Exception {\n \t}\n \n \t@Test\n-\t@SuppressWarnings(\"serial\")\n \tpublic void testCheckpointChange() throws Exception {\n \t\tItemReaderAdapter<String> adapter = new ItemReaderAdapter<>(new ItemReader() {\n \n \t\t\tprivate CheckpointContainer container = null;\n-\t\t\tprivate List<String> items = new ArrayList<String>() {{\n-\t\t\t\tadd(\"foo\");\n-\t\t\t\tadd(\"bar\");\n-\t\t\t\tadd(\"baz\");\n-\t\t\t}};\n+\t\t\tprivate List<String> items = Arrays.asList(\"foo\", \"bar\", \"baz\");\n \n \t\t\t@Override\n \t\t\tpublic Object readItem() throws Exception {"
  }
]
