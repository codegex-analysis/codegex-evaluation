[
  {
    "sha": "f7fc01d006122402aa175247c12415c5c2d45c82",
    "filename": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/spring-projects/spring-boot/blob/de52e11f8effb2f64e0d88220055cc19d9668ad1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java",
    "raw_url": "https://github.com/spring-projects/spring-boot/raw/de52e11f8effb2f64e0d88220055cc19d9668ad1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java?ref=de52e11f8effb2f64e0d88220055cc19d9668ad1",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2020 the original author or authors.\n+ * Copyright 2012-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -29,6 +29,7 @@\n  *\n  * @author Phillip Webb\n  * @author Brian Clozel\n+ * @author Nguyen Sach\n  * @since 1.3.0\n  */\n public enum CloudPlatform {\n@@ -140,7 +141,7 @@ private boolean isAutoDetected(EnumerablePropertySource<?> environmentPropertySo\n \t * @return if the platform is active.\n \t */\n \tpublic boolean isActive(Environment environment) {\n-\t\treturn isEnforced(environment) || isDetected(environment);\n+\t\treturn isEnforced(environment) || (isAutoDetectionEnabled(environment) && isDetected(environment));\n \t}\n \n \t/**\n@@ -178,6 +179,16 @@ private boolean isEnforced(String platform) {\n \t */\n \tpublic abstract boolean isDetected(Environment environment);\n \n+\t/**\n+\t * Determines if it is enabled that the platform is detected by looking for\n+\t * platform-specific environment variables.\n+\t * @param environment the environment\n+\t * @return if the platform auto-detection is enabled.\n+\t */\n+\tprivate boolean isAutoDetectionEnabled(Environment environment) {\n+\t\treturn environment.getProperty(PROPERTY_NAME) == null;\n+\t}\n+\n \t/**\n \t * Returns if the platform is behind a load balancer and uses\n \t * {@literal X-Forwarded-For} headers."
  },
  {
    "sha": "04f84d398e911d3565312fbb71acd72ef6e2c61c",
    "filename": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/spring-projects/spring-boot/blob/de52e11f8effb2f64e0d88220055cc19d9668ad1/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java",
    "raw_url": "https://github.com/spring-projects/spring-boot/raw/de52e11f8effb2f64e0d88220055cc19d9668ad1/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java?ref=de52e11f8effb2f64e0d88220055cc19d9668ad1",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2020 the original author or authors.\n+ * Copyright 2012-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,7 +18,10 @@\n \n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.junit.jupiter.api.Test;\n \n@@ -36,6 +39,7 @@\n  * Tests for {@link CloudPlatform}.\n  *\n  * @author Phillip Webb\n+ * @author Nguyen Sach\n  */\n class CloudPlatformTests {\n \n@@ -177,6 +181,18 @@ void isEnforcedWhenBinderPropertyIsMissingReturnsFalse() {\n \t\tassertThat(CloudPlatform.KUBERNETES.isEnforced(binder)).isFalse();\n \t}\n \n+\t@Test\n+\tvoid isActiveWhenNoCloudPlatformIsEnforcedAndHasKubernetesServiceHostAndKubernetesServicePort() {\n+\t\tMap<String, Object> envVars = new HashMap<>();\n+\t\tenvVars.put(\"EXAMPLE_SERVICE_HOST\", \"---\");\n+\t\tenvVars.put(\"EXAMPLE_SERVICE_PORT\", \"8080\");\n+\t\tEnvironment environment = getEnvironmentWithEnvVariables(envVars);\n+\t\t((MockEnvironment) environment).setProperty(\"spring.main.cloud-platform\", \"none\");\n+\t\tList<CloudPlatform> activeCloudPlatforms = Stream.of(CloudPlatform.values())\n+\t\t\t\t.filter((cloudPlatform) -> cloudPlatform.isActive(environment)).collect(Collectors.toList());\n+\t\tassertThat(activeCloudPlatforms).containsExactly(CloudPlatform.NONE);\n+\t}\n+\n \tprivate Environment getEnvironmentWithEnvVariables(Map<String, Object> environmentVariables) {\n \t\tMockEnvironment environment = new MockEnvironment();\n \t\tPropertySource<?> propertySource = new SystemEnvironmentPropertySource("
  }
]
