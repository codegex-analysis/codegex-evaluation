[
  {
    "sha": "95d2a303823bf2d553c09a315d13818c1dd3f400",
    "filename": "spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/MockConfigurationPropertySource.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/spring-projects/spring-boot/blob/873e615cee8f5d609eb142287c18877164eff093/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/MockConfigurationPropertySource.java",
    "raw_url": "https://github.com/spring-projects/spring-boot/raw/873e615cee8f5d609eb142287c18877164eff093/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/MockConfigurationPropertySource.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/MockConfigurationPropertySource.java?ref=873e615cee8f5d609eb142287c18877164eff093",
    "patch": "@@ -46,6 +46,10 @@ public MockConfigurationPropertySource(String configurationPropertyName, Object\n \t\t\t\tOriginTrackedValue.of(value, MockOrigin.of(origin)));\n \t}\n \n+\tpublic MockConfigurationPropertySource(Map<String, String> configs) {\n+\t\tconfigs.forEach(this::put);\n+\t}\n+\n \tpublic void put(String name, String value) {\n \t\tput(ConfigurationPropertyName.of(name), value);\n \t}"
  },
  {
    "sha": "561dbb720b2e78737f707fd904ada29bc5bddfd3",
    "filename": "spring-boot-project/spring-boot/src/test/kotlin/org/springframework/boot/context/properties/bind/KotlinConstructorParametersBinderTests.kt",
    "status": "modified",
    "additions": 63,
    "deletions": 63,
    "changes": 126,
    "blob_url": "https://github.com/spring-projects/spring-boot/blob/873e615cee8f5d609eb142287c18877164eff093/spring-boot-project/spring-boot/src/test/kotlin/org/springframework/boot/context/properties/bind/KotlinConstructorParametersBinderTests.kt",
    "raw_url": "https://github.com/spring-projects/spring-boot/raw/873e615cee8f5d609eb142287c18877164eff093/spring-boot-project/spring-boot/src/test/kotlin/org/springframework/boot/context/properties/bind/KotlinConstructorParametersBinderTests.kt",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-boot/contents/spring-boot-project/spring-boot/src/test/kotlin/org/springframework/boot/context/properties/bind/KotlinConstructorParametersBinderTests.kt?ref=873e615cee8f5d609eb142287c18877164eff093",
    "patch": "@@ -16,107 +16,101 @@ class KotlinConstructorParametersBinderTests {\n \n \t@Test\n \tfun `Bind to class should create bound bean`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.int-value\", \"12\")\n-\t\tsource.put(\"foo.long-value\", \"34\")\n-\t\tsource.put(\"foo.boolean-value\", \"true\")\n-\t\tsource.put(\"foo.string-value\", \"foo\")\n-\t\tsource.put(\"foo.enum-value\", \"foo-bar\")\n+\t\tval source = MockConfigurationPropertySource(mapOf(\"foo.int-value\" to \"12\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.int-value\" to \"12\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.long-value\" to \"34\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.boolean-value\" to \"true\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.string-value\" to \"foo\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.enum-value\" to \"foo-bar\"))\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bind(\"foo\", Bindable.of(ExampleValueBean::class.java)).get()\n \t\tassertThat(bean.intValue).isEqualTo(12)\n \t\tassertThat(bean.longValue).isEqualTo(34)\n-\t\tassertThat(bean.booleanValue).isTrue()\n+\t\tassertThat(bean.booleanValue).isTrue\n \t\tassertThat(bean.stringValue).isEqualTo(\"foo\")\n \t\tassertThat(bean.enumValue).isEqualTo(ExampleEnum.FOO_BAR)\n \t}\n \n \t@Test\n \tfun `Bind to class when has no prefix should create bound bean`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"int-value\", \"12\")\n-\t\tsource.put(\"long-value\", \"34\")\n-\t\tsource.put(\"boolean-value\", \"true\")\n-\t\tsource.put(\"string-value\", \"foo\")\n-\t\tsource.put(\"enum-value\", \"foo-bar\")\n+\t\tval source = MockConfigurationPropertySource(mapOf(\"int-value\" to \"12\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"long-value\" to \"34\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"boolean-value\" to \"true\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"string-value\" to \"foo\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"enum-value\" to \"foo-bar\"))\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bind(ConfigurationPropertyName.of(\"\"),\n \t\t\t\tBindable.of(ExampleValueBean::class.java)).get()\n \t\tassertThat(bean.intValue).isEqualTo(12)\n \t\tassertThat(bean.longValue).isEqualTo(34)\n-\t\tassertThat(bean.booleanValue).isTrue()\n+\t\tassertThat(bean.booleanValue).isTrue\n \t\tassertThat(bean.stringValue).isEqualTo(\"foo\")\n \t\tassertThat(bean.enumValue).isEqualTo(ExampleEnum.FOO_BAR)\n \t}\n \n \t@Test\n \tfun `Bind to data class should create bound bean`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.int-value\", \"12\")\n-\t\tsource.put(\"foo.long-value\", \"34\")\n-\t\tsource.put(\"foo.boolean-value\", \"true\")\n-\t\tsource.put(\"foo.string-value\", \"foo\")\n-\t\tsource.put(\"foo.enum-value\", \"foo-bar\")\n+\t\tval source = MockConfigurationPropertySource(mapOf(\"foo.int-value\" to \"12\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.long-value\" to \"34\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.boolean-value\" to \"true\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.string-value\" to \"foo\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.enum-value\" to \"foo-bar\"))\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bind(\"foo\", Bindable.of(ExampleDataClassBean::class.java)).get()\n-\t\tassertThat(bean.intValue).isEqualTo(12)\n-\t\tassertThat(bean.longValue).isEqualTo(34)\n-\t\tassertThat(bean.booleanValue).isTrue()\n-\t\tassertThat(bean.stringValue).isEqualTo(\"foo\")\n-\t\tassertThat(bean.enumValue).isEqualTo(ExampleEnum.FOO_BAR)\n+\t\tval expectedBean = ExampleDataClassBean(intValue = 12,\n+\t\t\t\t\t\t\t\t\t\t\t\tlongValue = 34,\n+\t\t\t\t\t\t\t\t\t\t\t\tbooleanValue = true,\n+\t\t\t\t\t\t\t\t\t\t\t\tstringValue = \"foo\",\n+\t\t\t\t\t\t\t\t\t\t\t\tenumValue = ExampleEnum.FOO_BAR)\n+\t\tassertThat(bean).isEqualTo(expectedBean)\n \t}\n \n \t@Test\n \tfun `Bind to class with multiple constructors and primary constructor should bind`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.int-value\", \"12\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.int-value\", \"12\")\n \t\tval binder = Binder(source)\n \t\tval bindable = binder.bind(\"foo\", Bindable.of(\n \t\t\t\tMultipleConstructorsWithPrimaryConstructorBean::class.java))\n-\t\tassertThat(bindable.isBound).isTrue()\n+\t\tassertThat(bindable.isBound).isTrue\n \t\tassertThat(bindable.get().intValue).isEqualTo(12)\n \t}\n \n \t@Test\n \tfun `Bind to class with multiple constructors should not bind`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.int-value\", \"12\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.int-value\", \"12\")\n \t\tval binder = Binder(source)\n \t\tval bindable = binder.bind(\"foo\", Bindable.of(\n \t\t\t\tMultipleConstructorsBean::class.java))\n-\t\tassertThat(bindable.isBound).isFalse()\n+\t\tassertThat(bindable.isBound).isFalse\n \t}\n \n \t@Test\n \tfun `Bind to class with only default constructor should not bind`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.int-value\", \"12\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.int-value\", \"12\")\n \t\tval binder = Binder(source)\n \t\tval bindable = binder.bind(\"foo\", Bindable.of(\n \t\t\t\tDefaultConstructorBean::class.java))\n-\t\tassertThat(bindable.isBound).isFalse()\n+\t\tassertThat(bindable.isBound).isFalse\n \t}\n \n \t@Test\n \tfun `Bind to class should bind nested`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.value-bean.int-value\", \"123\")\n-\t\tsource.put(\"foo.value-bean.long-value\", \"34\")\n-\t\tsource.put(\"foo.value-bean.boolean-value\", \"true\")\n-\t\tsource.put(\"foo.value-bean.string-value\", \"foo\")\n+\t\tval source = MockConfigurationPropertySource(mapOf(\"foo.value-bean.int-value\" to \"123\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.value-bean.long-value\" to \"34\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.value-bean.boolean-value\" to \"true\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"foo.value-bean.string-value\" to \"foo\"))\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bind(\"foo\", Bindable.of(ExampleNestedBean::class.java)).get()\n \t\tassertThat(bean.valueBean.intValue).isEqualTo(123)\n \t\tassertThat(bean.valueBean.longValue).isEqualTo(34)\n-\t\tassertThat(bean.valueBean.booleanValue).isTrue()\n+\t\tassertThat(bean.valueBean.booleanValue).isTrue\n \t\tassertThat(bean.valueBean.stringValue).isEqualTo(\"foo\")\n \t\tassertThat(bean.valueBean.enumValue).isNull()\n \t}\n \n \t@Test\n \tfun `Bind to class with no value for optional should use null`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.string-value\", \"foo\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.string-value\", \"foo\")\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bind(\"foo\", Bindable.of(\n \t\t\t\tExampleValueBean::class.java)).get()\n@@ -129,31 +123,28 @@ class KotlinConstructorParametersBinderTests {\n \n \t@Test\n \tfun `Bind to class with no value for primitive should use default value`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.string-value\", \"foo\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.string-value\", \"foo\")\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bind(\"foo\", Bindable.of(\n \t\t\t\tExamplePrimitiveDefaultBean::class.java)).get()\n \t\tassertThat(bean.intValue).isEqualTo(0)\n \t\tassertThat(bean.longValue).isEqualTo(0)\n-\t\tassertThat(bean.booleanValue).isFalse()\n+\t\tassertThat(bean.booleanValue).isFalse\n \t\tassertThat(bean.stringValue).isEqualTo(\"foo\")\n \t\tassertThat(bean.enumValue).isNull()\n \t}\n \n \t@Test\n \tfun `Bind to class with no value and default value should return unbound`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.string-value\", \"foo\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.string-value\", \"foo\")\n \t\tval binder = Binder(source)\n \t\tassertThat(binder.bind(\"foo\", Bindable.of(\n-\t\t\t\tExampleDefaultValueBean::class.java)).isBound()).isFalse();\n+\t\t\t\tExampleDefaultValueBean::class.java)).isBound).isFalse\n \t}\n \n \t@Test\n \tfun `Bind or create to class with no value and default value should return default value`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.string-value\", \"foo\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.string-value\", \"foo\")\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bindOrCreate(\"foo\", Bindable.of(\n \t\t\t\tExampleDefaultValueBean::class.java))\n@@ -164,39 +155,45 @@ class KotlinConstructorParametersBinderTests {\n \n \t@Test\n \tfun `Bind to data class with no value should use default value`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.enum-value\", \"foo-bar\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.enum-value\", \"foo-bar\")\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bind(\"foo\", Bindable.of(ExampleDataClassBean::class.java)).get()\n-\t\tassertThat(bean.intValue).isEqualTo(5)\n-\t\tassertThat(bean.longValue).isEqualTo(42)\n-\t\tassertThat(bean.booleanValue).isFalse()\n-\t\tassertThat(bean.stringValue).isEqualTo(\"my data\")\n-\t\tassertThat(bean.enumValue).isEqualTo(ExampleEnum.FOO_BAR)\n+\t\tval expectedBean = ExampleDataClassBean(intValue = 5,\n+\t\t\t\t\t\t\t\t\t\t\t\tlongValue = 42,\n+\t\t\t\t\t\t\t\t\t\t\t\tbooleanValue = false,\n+\t\t\t\t\t\t\t\t\t\t\t\tstringValue = \"my data\",\n+\t\t\t\t\t\t\t\t\t\t\t\tenumValue = ExampleEnum.FOO_BAR)\n+\t\tassertThat(bean).isEqualTo(expectedBean)\n \t}\n \n \t@Test\n \tfun `Bind to data class with generics`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.value.bar\", \"baz\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.value.bar\", \"baz\")\n \t\tval binder = Binder(source)\n \t\tval type = ResolvableType.forClassWithGenerics(Map::class.java, String::class.java,\n \t\t\t\tString::class.java)\n \t\tval bean = binder.bind(\"foo\", Bindable\n \t\t\t\t.of<GenericValue<Map<String, String>>>(ResolvableType.forClassWithGenerics(GenericValue::class.java, type)))\n \t\t\t\t.get()\n-\t\tassertThat(bean.value.get(\"bar\")).isEqualTo(\"baz\");\n+\t\tassertThat(bean.value[\"bar\"]).isEqualTo(\"baz\")\n \t}\n \n \t@Test\n \tfun `Bind to named constructor parameter`() {\n-\t\tval source = MockConfigurationPropertySource()\n-\t\tsource.put(\"foo.string-value\", \"test\")\n+\t\tval source = MockConfigurationPropertySource(\"foo.string-value\", \"test\")\n \t\tval binder = Binder(source)\n \t\tval bean = binder.bind(\"foo\", Bindable.of(ExampleNamedParameterBean::class.java)).get()\n \t\tassertThat(bean.stringDataValue).isEqualTo(\"test\")\n \t}\n \n+\t@Test\n+\tfun `Bind to singleton object`() {\n+\t\tval source = MockConfigurationPropertySource(\"foo.string-value\", \"test\")\n+\t\tval binder = Binder(source)\n+\t\tval bean = binder.bind(\"foo\", Bindable.of(ExampleSingletonBean::class.java)).get()\n+\t\tassertThat(bean.stringValue).isEqualTo(\"test\")\n+\t}\n+\n \tclass ExampleValueBean(val intValue: Int?, val longValue: Long?,\n \t\t\t\t\t\t   val booleanValue: Boolean?, val stringValue: String?,\n \t\t\t\t\t\t   val enumValue: ExampleEnum?)\n@@ -244,4 +241,7 @@ class KotlinConstructorParametersBinderTests {\n \t\tval value: T\n \t)\n \n-}\n+\tobject ExampleSingletonBean {\n+\t\tvar stringValue: String? = null\n+\t}\n+}\n\\ No newline at end of file"
  }
]
