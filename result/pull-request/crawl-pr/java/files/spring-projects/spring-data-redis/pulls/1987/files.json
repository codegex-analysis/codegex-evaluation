[
  {
    "sha": "0fdd14e39c2b50176b1c6a7ca5a976e3e6919b03",
    "filename": "src/main/java/org/springframework/data/redis/connection/DefaultStringRedisConnection.java",
    "status": "modified",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/DefaultStringRedisConnection.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/DefaultStringRedisConnection.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/DefaultStringRedisConnection.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -697,6 +697,15 @@ public Long lLen(byte[] key) {\n \t\treturn convertAndReturn(delegate.lPop(key), Converters.identityConverter());\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.RedisListCommands#lPop(byte[], long)\n+\t */\n+\t@Override\n+\tpublic List<byte[]> lPop(byte[] key, long count) {\n+\t\treturn convertAndReturn(delegate.lPop(key, count), Converters.identityConverter());\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.RedisListCommands#lPos(byte[], byte[], java.lang.Integer, java.lang.Integer)\n@@ -887,6 +896,15 @@ public void resetConfigStats() {\n \t\treturn convertAndReturn(delegate.rPop(key), Converters.identityConverter());\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.RedisListCommands#rPop(byte[], long)\n+\t */\n+\t@Override\n+\tpublic List<byte[]> rPop(byte[] key, long count) {\n+\t\treturn convertAndReturn(delegate.rPop(key, count), Converters.identityConverter());\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.RedisListCommands#rPopLPush(byte[], byte[])\n@@ -2160,6 +2178,15 @@ public String lPop(String key) {\n \t\treturn convertAndReturn(delegate.lPop(serialize(key)), bytesToString);\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.StringRedisConnection#lPop(java.lang.String, long)\n+\t */\n+\t@Override\n+\tpublic List<String> lPop(String key, long count) {\n+\t\treturn convertAndReturn(delegate.lPop(serialize(key), count), byteListToStringList);\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.StringRedisConnection#lPos(java.lang.String, java.lang.String, java.lang.Integer, java.lang.Integer)\n@@ -2313,6 +2340,15 @@ public String rPop(String key) {\n \t\treturn convertAndReturn(delegate.rPop(serialize(key)), bytesToString);\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.StringRedisConnection#rPop(java.lang.String, long)\n+\t */\n+\t@Override\n+\tpublic List<String> rPop(String key, long count) {\n+\t\treturn convertAndReturn(delegate.rPop(serialize(key), count), byteListToStringList);\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.StringRedisConnection#rPopLPush(java.lang.String, java.lang.String)"
  },
  {
    "sha": "fa225acd43e64a2a63135a1705e5160de04ce839",
    "filename": "src/main/java/org/springframework/data/redis/connection/DefaultedRedisConnection.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/DefaultedRedisConnection.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/DefaultedRedisConnection.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/DefaultedRedisConnection.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -56,6 +56,7 @@\n  * @author Mark Paluch\n  * @author Tugdual Grall\n  * @author Andrey Shlykov\n+ * @author dengliming\n  * @since 2.0\n  */\n public interface DefaultedRedisConnection extends RedisConnection {\n@@ -712,13 +713,27 @@ default Long lRem(byte[] key, long count, byte[] value) {\n \t\treturn listCommands().lPop(key);\n \t}\n \n+\t/** @deprecated in favor of {@link RedisConnection#listCommands()}}. */\n+\t@Override\n+\t@Deprecated\n+\tdefault List<byte[]> lPop(byte[] key, long count) {\n+\t\treturn listCommands().lPop(key, count);\n+\t}\n+\n \t/** @deprecated in favor of {@link RedisConnection#listCommands()}}. */\n \t@Override\n \t@Deprecated\n \tdefault byte[] rPop(byte[] key) {\n \t\treturn listCommands().rPop(key);\n \t}\n \n+\t/** @deprecated in favor of {@link RedisConnection#listCommands()}}. */\n+\t@Override\n+\t@Deprecated\n+\tdefault List<byte[]> rPop(byte[] key, long count) {\n+\t\treturn listCommands().rPop(key, count);\n+\t}\n+\n \t/** @deprecated in favor of {@link RedisConnection#listCommands()}}. */\n \t@Override\n \t@Deprecated"
  },
  {
    "sha": "cb7141684808b5a638ca456279c489ea682c0fa4",
    "filename": "src/main/java/org/springframework/data/redis/connection/ReactiveListCommands.java",
    "status": "modified",
    "additions": 62,
    "deletions": 5,
    "changes": 67,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/ReactiveListCommands.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/ReactiveListCommands.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/ReactiveListCommands.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -42,6 +42,7 @@\n  *\n  * @author Christoph Strobl\n  * @author Mark Paluch\n+ * @author dengliming\n  * @since 2.0\n  */\n public interface ReactiveListCommands {\n@@ -874,12 +875,14 @@ public ByteBuffer getValue() {\n \t */\n \tclass PopCommand extends KeyCommand {\n \n+\t\tprivate final long count;\n+\n \t\tprivate final Direction direction;\n \n-\t\tprivate PopCommand(@Nullable ByteBuffer key, Direction direction) {\n+\t\tprivate PopCommand(@Nullable ByteBuffer key, long count, Direction direction) {\n \n \t\t\tsuper(key);\n-\n+\t\t\tthis.count = count;\n \t\t\tthis.direction = direction;\n \t\t}\n \n@@ -889,7 +892,7 @@ private PopCommand(@Nullable ByteBuffer key, Direction direction) {\n \t\t * @return a new {@link PopCommand} for right push ({@literal RPOP}).\n \t\t */\n \t\tpublic static PopCommand right() {\n-\t\t\treturn new PopCommand(null, Direction.RIGHT);\n+\t\t\treturn new PopCommand(null, 0, Direction.RIGHT);\n \t\t}\n \n \t\t/**\n@@ -898,7 +901,7 @@ public static PopCommand right() {\n \t\t * @return a new {@link PopCommand} for right push ({@literal LPOP}).\n \t\t */\n \t\tpublic static PopCommand left() {\n-\t\t\treturn new PopCommand(null, Direction.LEFT);\n+\t\t\treturn new PopCommand(null, 0, Direction.LEFT);\n \t\t}\n \n \t\t/**\n@@ -911,7 +914,17 @@ public PopCommand from(ByteBuffer key) {\n \n \t\t\tAssert.notNull(key, \"Key must not be null!\");\n \n-\t\t\treturn new PopCommand(key, direction);\n+\t\t\treturn new PopCommand(key, count, direction);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Applies the {@literal key}. Constructs a new command instance with all previously configured properties.\n+\t\t *\n+\t\t * @param count\n+\t\t * @return a new {@link LSetCommand} with {@literal value} applied.\n+\t\t */\n+\t\tpublic PopCommand count(long count) {\n+\t\t\treturn new PopCommand(getKey(), count, direction);\n \t\t}\n \n \t\t/**\n@@ -920,6 +933,10 @@ public PopCommand from(ByteBuffer key) {\n \t\tpublic Direction getDirection() {\n \t\t\treturn direction;\n \t\t}\n+\n+\t\tpublic long getCount() {\n+\t\t\treturn count;\n+\t\t}\n \t}\n \n \t/**\n@@ -936,6 +953,21 @@ public Direction getDirection() {\n \t\treturn pop(Mono.just(PopCommand.left().from(key))).next().map(ByteBufferResponse::getOutput);\n \t}\n \n+\t/**\n+\t * Removes and returns first element in list stored at {@literal key}.\n+\t *\n+\t * @param key must not be {@literal null}.\n+\t * @param count\n+\t * @return\n+\t * @see <a href=\"https://redis.io/commands/lpop\">Redis Documentation: LPOP</a>\n+\t */\n+\tdefault Flux<ByteBuffer> lPop(ByteBuffer key, long count) {\n+\n+\t\tAssert.notNull(key, \"Key must not be null!\");\n+\n+\t\treturn popList(Mono.just(PopCommand.left().from(key).count(count))).flatMap(CommandResponse::getOutput);\n+\t}\n+\n \t/**\n \t * Removes and returns last element in list stored at {@literal key}.\n \t *\n@@ -950,6 +982,21 @@ public Direction getDirection() {\n \t\treturn pop(Mono.just(PopCommand.right().from(key))).next().map(ByteBufferResponse::getOutput);\n \t}\n \n+\t/**\n+\t * Removes and returns last element in list stored at {@literal key}.\n+\t *\n+\t * @param key must not be {@literal null}.\n+\t * @param count\n+\t * @return\n+\t * @see <a href=\"https://redis.io/commands/rpop\">Redis Documentation: RPOP</a>\n+\t */\n+\tdefault Flux<ByteBuffer> rPop(ByteBuffer key, long count) {\n+\n+\t\tAssert.notNull(key, \"Key must not be null!\");\n+\n+\t\treturn popList(Mono.just(PopCommand.right().from(key).count(count))).flatMap(CommandResponse::getOutput);\n+\t}\n+\n \t/**\n \t * Removes and returns last element in list stored at {@link KeyCommand#getKey()}\n \t *\n@@ -960,6 +1007,16 @@ public Direction getDirection() {\n \t */\n \tFlux<ByteBufferResponse<PopCommand>> pop(Publisher<PopCommand> commands);\n \n+\t/**\n+\t * Removes and returns last element in list stored at {@link KeyCommand#getKey()}\n+\t *\n+\t * @param commands must not be {@literal null}.\n+\t * @return\n+\t * @see <a href=\"https://redis.io/commands/lpop\">Redis Documentation: LPOP</a>\n+\t * @see <a href=\"https://redis.io/commands/rpop\">Redis Documentation: RPOP</a>\n+\t */\n+\tFlux<CommandResponse<PopCommand, Flux<ByteBuffer>>> popList(Publisher<PopCommand> commands);\n+\n \t/**\n \t * @author Christoph Strobl\n \t * @see <a href=\"https://redis.io/commands/blpop\">Redis Documentation: BLPOP</a>"
  },
  {
    "sha": "bf60d6a0a10e0146d0674e4c8de5bd2f039698fe",
    "filename": "src/main/java/org/springframework/data/redis/connection/RedisListCommands.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/RedisListCommands.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/RedisListCommands.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/RedisListCommands.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -26,6 +26,7 @@\n  * @author Costin Leau\n  * @author Christoph Strobl\n  * @author Mark Paluch\n+ * @author dengliming\n  */\n public interface RedisListCommands {\n \n@@ -200,6 +201,17 @@ default Long lPos(byte[] key, byte[] element) {\n \t@Nullable\n \tbyte[] lPop(byte[] key);\n \n+\t/**\n+\t * Removes and returns first element in list stored at {@code key}.\n+\t *\n+\t * @param key must not be {@literal null}.\n+\t * @param count\n+\t * @return {@literal null} when key does not exist or used in pipeline / transaction.\n+\t * @see <a href=\"https://redis.io/commands/lpop\">Redis Documentation: LPOP</a>\n+\t */\n+\t@Nullable\n+\tList<byte[]> lPop(byte[] key, long count);\n+\n \t/**\n \t * Removes and returns last element in list stored at {@code key}.\n \t *\n@@ -210,6 +222,17 @@ default Long lPos(byte[] key, byte[] element) {\n \t@Nullable\n \tbyte[] rPop(byte[] key);\n \n+\t/**\n+\t * Removes and returns last element in list stored at {@code key}.\n+\t *\n+\t * @param key must not be {@literal null}.\n+\t * @param count\n+\t * @return {@literal null} when key does not exist or used in pipeline / transaction.\n+\t * @see <a href=\"https://redis.io/commands/rpop\">Redis Documentation: RPOP</a>\n+\t */\n+\t@Nullable\n+\tList<byte[]> rPop(byte[] key, long count);\n+\n \t/**\n \t * Removes and returns first element from lists stored at {@code keys}. <br>\n \t * <b>Blocks connection</b> until element available or {@code timeout} reached."
  },
  {
    "sha": "13c43d8f591d73a13eca015621b64fac5472510d",
    "filename": "src/main/java/org/springframework/data/redis/connection/StringRedisConnection.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/StringRedisConnection.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/StringRedisConnection.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/StringRedisConnection.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -842,6 +842,17 @@ default Long lPos(String key, String element) {\n \t */\n \tString lPop(String key);\n \n+\t/**\n+\t * Removes and returns first element in list stored at {@code key}.\n+\t *\n+\t * @param key must not be {@literal null}.\n+\t * @param count\n+\t * @return\n+\t * @see <a href=\"https://redis.io/commands/lpop\">Redis Documentation: LPOP</a>\n+\t * @see RedisListCommands#lPop(byte[], long)\n+\t */\n+\tList<String> lPop(String key, long count);\n+\n \t/**\n \t * Removes and returns last element in list stored at {@code key}.\n \t *\n@@ -852,6 +863,17 @@ default Long lPos(String key, String element) {\n \t */\n \tString rPop(String key);\n \n+\t/**\n+\t * Removes and returns last element in list stored at {@code key}.\n+\t *\n+\t * @param key must not be {@literal null}.\n+\t * @param count\n+\t * @return\n+\t * @see <a href=\"https://redis.io/commands/rpop\">Redis Documentation: RPOP</a>\n+\t * @see RedisListCommands#rPop(byte[], long)\n+\t */\n+\tList<String> rPop(String key, long count);\n+\n \t/**\n \t * Removes and returns first element from lists stored at {@code keys} (see: {@link #lPop(byte[])}). <br>\n \t * <b>Blocks connection</b> until element available or {@code timeout} reached."
  },
  {
    "sha": "38dd2aac2dd3a3e7bac10c92198c17787c86e4fa",
    "filename": "src/main/java/org/springframework/data/redis/connection/jedis/JedisClusterListCommands.java",
    "status": "modified",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/jedis/JedisClusterListCommands.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/jedis/JedisClusterListCommands.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/jedis/JedisClusterListCommands.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -33,6 +33,7 @@\n  * @author Christoph Strobl\n  * @author Mark Paluch\n  * @author Jot Zhao\n+ * @author dengliming\n  * @since 2.0\n  */\n class JedisClusterListCommands implements RedisListCommands {\n@@ -269,6 +270,22 @@ public Long lRem(byte[] key, long count, byte[] value) {\n \t\t}\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.RedisListCommands#lPop(byte[], long)\n+\t */\n+\t@Override\n+\tpublic List<byte[]> lPop(byte[] key, long count) {\n+\n+\t\tAssert.notNull(key, \"Key must not be null!\");\n+\n+\t\ttry {\n+\t\t\treturn connection.getCluster().lpop(key, (int) count);\n+\t\t} catch (Exception ex) {\n+\t\t\tthrow convertJedisAccessException(ex);\n+\t\t}\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.RedisListCommands#rPop(byte[])\n@@ -285,6 +302,22 @@ public Long lRem(byte[] key, long count, byte[] value) {\n \t\t}\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.RedisListCommands#rPop(byte[], long)\n+\t */\n+\t@Override\n+\tpublic List<byte[]> rPop(byte[] key, long count) {\n+\n+\t\tAssert.notNull(key, \"Key must not be null!\");\n+\n+\t\ttry {\n+\t\t\treturn connection.getCluster().rpop(key, (int) count);\n+\t\t} catch (Exception ex) {\n+\t\t\tthrow convertJedisAccessException(ex);\n+\t\t}\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.RedisListCommands#bLPop(int, byte[][])"
  },
  {
    "sha": "c354e0c1395aed5d965d645c81279ee1a1ca3f3d",
    "filename": "src/main/java/org/springframework/data/redis/connection/jedis/JedisListCommands.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/jedis/JedisListCommands.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/jedis/JedisListCommands.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/jedis/JedisListCommands.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -30,6 +30,7 @@\n /**\n  * @author Christoph Strobl\n  * @author Mark Paluch\n+ * @author dengliming\n  * @since 2.0\n  */\n class JedisListCommands implements RedisListCommands {\n@@ -214,6 +215,18 @@ public Long lRem(byte[] key, long count, byte[] value) {\n \t\treturn connection.invoke().just(BinaryJedis::lpop, MultiKeyPipelineBase::lpop, key);\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.RedisListCommands#lPop(byte[], long)\n+\t */\n+\t@Override\n+\tpublic List<byte[]> lPop(byte[] key, long count) {\n+\n+\t\tAssert.notNull(key, \"Key must not be null!\");\n+\n+\t\treturn connection.invoke().just(BinaryJedis::lpop, MultiKeyPipelineBase::lpop, key, (int) count);\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.RedisListCommands#rPop(byte[])\n@@ -226,6 +239,18 @@ public Long lRem(byte[] key, long count, byte[] value) {\n \t\treturn connection.invoke().just(BinaryJedis::rpop, MultiKeyPipelineBase::rpop, key);\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.RedisListCommands#rPop(byte[], long)\n+\t */\n+\t@Override\n+\tpublic List<byte[]> rPop(byte[] key, long count) {\n+\n+\t\tAssert.notNull(key, \"Key must not be null!\");\n+\n+\t\treturn connection.invoke().just(BinaryJedis::rpop, MultiKeyPipelineBase::rpop, key, (int) count);\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.RedisListCommands#bLPop(int, byte[][])"
  },
  {
    "sha": "bcd77c587b5b967c7f9d04df95b8d04a12be2980",
    "filename": "src/main/java/org/springframework/data/redis/connection/lettuce/LettuceListCommands.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/lettuce/LettuceListCommands.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/lettuce/LettuceListCommands.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/lettuce/LettuceListCommands.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -30,6 +30,7 @@\n /**\n  * @author Christoph Strobl\n  * @author Mark Paluch\n+ * @author dengliming\n  * @since 2.0\n  */\n class LettuceListCommands implements RedisListCommands {\n@@ -213,6 +214,18 @@ public Long lRem(byte[] key, long count, byte[] value) {\n \t\treturn connection.invoke().just(RedisListAsyncCommands::lpop, key);\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.RedisListCommands#lPop(byte[], long)\n+\t */\n+\t@Override\n+\tpublic List<byte[]> lPop(byte[] key, long count) {\n+\n+\t\tAssert.notNull(key, \"Key must not be null!\");\n+\n+\t\treturn connection.invoke().just(RedisListAsyncCommands::lpop, key, count);\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.RedisListCommands#rPop(byte[])\n@@ -225,6 +238,18 @@ public Long lRem(byte[] key, long count, byte[] value) {\n \t\treturn connection.invoke().just(RedisListAsyncCommands::rpop, key);\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.RedisListCommands#rPop(byte[], long)\n+\t */\n+\t@Override\n+\tpublic List<byte[]> rPop(byte[] key, long count) {\n+\n+\t\tAssert.notNull(key, \"Key must not be null!\");\n+\n+\t\treturn connection.invoke().just(RedisListAsyncCommands::rpop, key, count);\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.RedisListCommands#bLPop(int, byte[][])"
  },
  {
    "sha": "409b103df7d1579a5a090049a085fc723b13a7a9",
    "filename": "src/main/java/org/springframework/data/redis/connection/lettuce/LettuceReactiveListCommands.java",
    "status": "modified",
    "additions": 21,
    "deletions": 1,
    "changes": 22,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/lettuce/LettuceReactiveListCommands.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/connection/lettuce/LettuceReactiveListCommands.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/connection/lettuce/LettuceReactiveListCommands.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -41,6 +41,7 @@\n  * @author Christoph Strobl\n  * @author Mark Paluch\n  * @author Michele Mancioppi\n+ * @author dengliming\n  * @since 2.0\n  */\n class LettuceReactiveListCommands implements ReactiveListCommands {\n@@ -252,7 +253,7 @@\n \n \t/*\n \t * (non-Javadoc)\n-\t * @see org.springframework.data.redis.connection.ReactiveListCommands#rPop(org.reactivestreams.Publisher)\n+\t * @see org.springframework.data.redis.connection.ReactiveListCommands#pop(org.reactivestreams.Publisher)\n \t */\n \t@Override\n \tpublic Flux<ByteBufferResponse<PopCommand>> pop(Publisher<PopCommand> commands) {\n@@ -270,6 +271,25 @@\n \t\t}));\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.connection.ReactiveListCommands#popList(org.reactivestreams.Publisher)\n+\t */\n+\t@Override\n+\tpublic Flux<CommandResponse<PopCommand, Flux<ByteBuffer>>> popList(Publisher<PopCommand> commands) {\n+\t\treturn connection.execute(cmd -> Flux.from(commands).concatMap(command -> {\n+\n+\t\t\tAssert.notNull(command.getKey(), \"Key must not be null!\");\n+\t\t\tAssert.notNull(command.getDirection(), \"Direction must not be null!\");\n+\n+\t\t\tFlux<ByteBuffer> popResult = ObjectUtils.nullSafeEquals(Direction.RIGHT, command.getDirection())\n+\t\t\t\t\t? cmd.rpop(command.getKey(), command.getCount())\n+\t\t\t\t\t: cmd.lpop(command.getKey(), command.getCount());\n+\n+\t\t\treturn Mono.just(new CommandResponse<>(command, popResult));\n+\t\t}));\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.connection.ReactiveListCommands#bPop(org.reactivestreams.Publisher)"
  },
  {
    "sha": "f3026f303d6179c520a518d04b49436853dbc2bb",
    "filename": "src/main/java/org/springframework/data/redis/core/DefaultListOperations.java",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/core/DefaultListOperations.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/core/DefaultListOperations.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/core/DefaultListOperations.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -30,6 +30,7 @@\n  * @author David Liu\n  * @author Thomas Darimont\n  * @author Christoph Strobl\n+ * @author dengliming\n  */\n class DefaultListOperations<K, V> extends AbstractOperations<K, V> implements ListOperations<K, V> {\n \n@@ -97,6 +98,16 @@ public V leftPop(K key) {\n \t\t}, true);\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.core.ListOperations#leftPop(java.lang.Object, long)\n+\t */\n+\t@Override\n+\tpublic List<V> leftPop(K key, long count) {\n+\t\tbyte[] rawKey = rawKey(key);\n+\t\treturn execute(connection -> deserializeValues(connection.lPop(rawKey, count)), true);\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.core.ListOperations#leftPop(java.lang.Object, long, java.util.concurrent.TimeUnit)\n@@ -227,6 +238,16 @@ public V rightPop(K key) {\n \t\t}, true);\n \t}\n \n+\t/*\n+\t * (non-Javadoc)\n+\t * @see org.springframework.data.redis.core.ListOperations#rightPop(java.lang.Object, long)\n+\t */\n+\t@Override\n+\tpublic List<V> rightPop(K key, long count) {\n+\t\tbyte[] rawKey = rawKey(key);\n+\t\treturn execute(connection -> deserializeValues(connection.rPop(rawKey, count)), true);\n+\t}\n+\n \t/*\n \t * (non-Javadoc)\n \t * @see org.springframework.data.redis.core.ListOperations#rightPop(java.lang.Object, long, java.util.concurrent.TimeUnit)"
  },
  {
    "sha": "eb5a6589d3da5e1eb16d3f34ceafa611b43d8289",
    "filename": "src/main/java/org/springframework/data/redis/core/ListOperations.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/core/ListOperations.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/main/java/org/springframework/data/redis/core/ListOperations.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/main/java/org/springframework/data/redis/core/ListOperations.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -31,6 +31,7 @@\n  * @author Thomas Darimont\n  * @author Christoph Strobl\n  * @author Mark Paluch\n+ * @author dengliming\n  */\n public interface ListOperations<K, V> {\n \n@@ -247,6 +248,17 @@\n \t@Nullable\n \tV leftPop(K key);\n \n+\t/**\n+\t * Removes and returns first element in list stored at {@code key}.\n+\t *\n+\t * @param key must not be {@literal null}.\n+\t * @param count\n+\t * @return can be {@literal null}.\n+\t * @see <a href=\"https://redis.io/commands/lpop\">Redis Documentation: LPOP</a>\n+\t */\n+\t@Nullable\n+\tList<V> leftPop(K key, long count);\n+\n \t/**\n \t * Removes and returns first element from lists stored at {@code key} . <br>\n \t * <b>Blocks connection</b> until element available or {@code timeout} reached.\n@@ -290,6 +302,17 @@ default V leftPop(K key, Duration timeout) {\n \t@Nullable\n \tV rightPop(K key);\n \n+\t/**\n+\t * Removes and returns last element in list stored at {@code key}.\n+\t *\n+\t * @param key must not be {@literal null}.\n+\t * @param count\n+\t * @return can be {@literal null}.\n+\t * @see <a href=\"https://redis.io/commands/rpop\">Redis Documentation: RPOP</a>\n+\t */\n+\t@Nullable\n+\tList<V> rightPop(K key, long count);\n+\n \t/**\n \t * Removes and returns last element from lists stored at {@code key}. <br>\n \t * <b>Blocks connection</b> until element available or {@code timeout} reached."
  },
  {
    "sha": "aff3ba5b0c2d75905525ebef91ab2d2dd9689324",
    "filename": "src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionPipelineTests.java",
    "status": "modified",
    "additions": 26,
    "deletions": 2,
    "changes": 28,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionPipelineTests.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionPipelineTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionPipelineTests.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -37,6 +37,7 @@\n  * @author Christoph Strobl\n  * @author Ninad Divadkar\n  * @author Mark Paluch\n+ * @author dengliming\n  */\n public class DefaultStringRedisConnectionPipelineTests extends DefaultStringRedisConnectionTests {\n \n@@ -514,8 +515,7 @@ public void testLLen() {\n \t@Test\n \tpublic void testLPopBytes() {\n \t\tdoReturn(Arrays.asList(new Object[] { barBytes })).when(nativeConnection).closePipeline();\n-\t\tactual.add(connection.lPop(fooBytes));\n-\t\tverifyResults(Arrays.asList(new Object[] { barBytes }));\n+\t\tsuper.testLPopBytes();\n \t}\n \n \t@Test\n@@ -524,6 +524,18 @@ public void testLPop() {\n \t\tsuper.testLPop();\n \t}\n \n+\t@Test\n+\tpublic void testLPopCountBytes() {\n+\t\tdoReturn(Collections.singletonList(bytesList)).when(nativeConnection).closePipeline();\n+\t\tsuper.testLPopCountBytes();\n+\t}\n+\n+\t@Test\n+\tpublic void testLPopCount() {\n+\t\tdoReturn(Collections.singletonList(bytesList)).when(nativeConnection).closePipeline();\n+\t\tsuper.testLPopCount();\n+\t}\n+\n \t@Test\n \tpublic void testLPushBytes() {\n \t\tdoReturn(Collections.singletonList(8L)).when(nativeConnection).closePipeline();\n@@ -668,6 +680,18 @@ public void testRPop() {\n \t\tsuper.testRPop();\n \t}\n \n+\t@Test\n+\tpublic void testRPopCountBytes() {\n+\t\tdoReturn(Collections.singletonList(bytesList)).when(nativeConnection).closePipeline();\n+\t\tsuper.testRPopCountBytes();\n+\t}\n+\n+\t@Test\n+\tpublic void testRPopCount() {\n+\t\tdoReturn(Collections.singletonList(bytesList)).when(nativeConnection).closePipeline();\n+\t\tsuper.testRPopCount();\n+\t}\n+\n \t@Test\n \tpublic void testRPopLPushBytes() {\n \t\tdoReturn(Arrays.asList(new Object[] { barBytes })).when(nativeConnection).closePipeline();"
  },
  {
    "sha": "852174a2d4d03e4cd112c9e8e163328774eb9318",
    "filename": "src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionPipelineTxTests.java",
    "status": "modified",
    "additions": 26,
    "deletions": 2,
    "changes": 28,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionPipelineTxTests.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionPipelineTxTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionPipelineTxTests.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -36,6 +36,7 @@\n  * @author Christoph Strobl\n  * @author Ninad Divadkar\n  * @author Mark Paluch\n+ * @author dengliming\n  */\n public class DefaultStringRedisConnectionPipelineTxTests extends DefaultStringRedisConnectionTxTests {\n \n@@ -547,8 +548,7 @@ public void testLLen() {\n \tpublic void testLPopBytes() {\n \t\tdoReturn(Collections.singletonList(Arrays.asList(new Object[] { barBytes }))).when(nativeConnection)\n \t\t\t\t.closePipeline();\n-\t\tactual.add(connection.lPop(fooBytes));\n-\t\tverifyResults(Arrays.asList(new Object[] { barBytes }));\n+\t\tsuper.testLPopBytes();\n \t}\n \n \t@Test\n@@ -558,6 +558,18 @@ public void testLPop() {\n \t\tsuper.testLPop();\n \t}\n \n+\t@Test\n+\tpublic void testLPopCountBytes() {\n+\t\tdoReturn(Collections.singletonList(Collections.singletonList(bytesList))).when(nativeConnection).closePipeline();\n+\t\tsuper.testLPopCountBytes();\n+\t}\n+\n+\t@Test\n+\tpublic void testLPopCount() {\n+\t\tdoReturn(Collections.singletonList(Collections.singletonList(bytesList))).when(nativeConnection).closePipeline();\n+\t\tsuper.testLPopCount();\n+\t}\n+\n \t@Test\n \tpublic void testLPushBytes() {\n \t\tdoReturn(Collections.singletonList(Collections.singletonList(8L))).when(nativeConnection).closePipeline();\n@@ -718,6 +730,18 @@ public void testRPop() {\n \t\tsuper.testRPop();\n \t}\n \n+\t@Test\n+\tpublic void testRPopCountBytes() {\n+\t\tdoReturn(Collections.singletonList(Collections.singletonList(bytesList))).when(nativeConnection).closePipeline();\n+\t\tsuper.testRPopCountBytes();\n+\t}\n+\n+\t@Test\n+\tpublic void testRPopCount() {\n+\t\tdoReturn(Collections.singletonList(Collections.singletonList(bytesList))).when(nativeConnection).closePipeline();\n+\t\tsuper.testRPopCount();\n+\t}\n+\n \t@Test\n \tpublic void testRPopLPushBytes() {\n \t\tdoReturn(Collections.singletonList(Arrays.asList(new Object[] { barBytes }))).when(nativeConnection)"
  },
  {
    "sha": "3634a5c1512ee4568fd129efb2060fffb9f8d514",
    "filename": "src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionTests.java",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionTests.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/test/java/org/springframework/data/redis/connection/DefaultStringRedisConnectionTests.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -70,6 +70,7 @@\n  * @author Christoph Strobl\n  * @author Ninad Divadkar\n  * @author Mark Paluch\n+ * @author dengliming\n  */\n @ExtendWith(MockitoExtension.class)\n @MockitoSettings(strictness = Strictness.LENIENT)\n@@ -669,6 +670,20 @@ public void testLPop() {\n \t\tverifyResults(Collections.singletonList(bar));\n \t}\n \n+\t@Test\n+\tpublic void testLPopCountBytes() {\n+\t\tdoReturn(Collections.singletonList(barBytes)).when(nativeConnection).lPop(fooBytes, 2);\n+\t\tactual.add(connection.lPop(fooBytes, 2));\n+\t\tverifyResults(Collections.singletonList(bytesList));\n+\t}\n+\n+\t@Test\n+\tpublic void testLPopCount() {\n+\t\tdoReturn(Collections.singletonList(barBytes)).when(nativeConnection).lPop(fooBytes, 2);\n+\t\tactual.add(connection.lPop(foo, 2));\n+\t\tverifyResults(Collections.singletonList(stringList));\n+\t}\n+\n \t@Test\n \tpublic void testLPushBytes() {\n \t\tdoReturn(8L).when(nativeConnection).lPush(fooBytes, barBytes);\n@@ -837,6 +852,20 @@ public void testRPop() {\n \t\tverifyResults(Collections.singletonList(bar));\n \t}\n \n+\t@Test\n+\tpublic void testRPopCountBytes() {\n+\t\tdoReturn(Collections.singletonList(barBytes)).when(nativeConnection).rPop(fooBytes, 2);\n+\t\tactual.add(connection.rPop(fooBytes, 2));\n+\t\tverifyResults(Collections.singletonList(bytesList));\n+\t}\n+\n+\t@Test\n+\tpublic void testRPopCount() {\n+\t\tdoReturn(Collections.singletonList(barBytes)).when(nativeConnection).rPop(fooBytes, 2);\n+\t\tactual.add(connection.rPop(foo, 2));\n+\t\tverifyResults(Collections.singletonList(stringList));\n+\t}\n+\n \t@Test\n \tpublic void testRPopLPushBytes() {\n \t\tdoReturn(barBytes).when(nativeConnection).rPopLPush(fooBytes, barBytes);"
  },
  {
    "sha": "282319dff3db86637cd9da0bd7bdcc3030ff856a",
    "filename": "src/test/java/org/springframework/data/redis/connection/lettuce/LettuceReactiveListCommandIntegrationTests.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/spring-projects/spring-data-redis/blob/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/test/java/org/springframework/data/redis/connection/lettuce/LettuceReactiveListCommandIntegrationTests.java",
    "raw_url": "https://github.com/spring-projects/spring-data-redis/raw/4f2975fe6b425c92d19ffd0dabbc515e1423cd77/src/test/java/org/springframework/data/redis/connection/lettuce/LettuceReactiveListCommandIntegrationTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-data-redis/contents/src/test/java/org/springframework/data/redis/connection/lettuce/LettuceReactiveListCommandIntegrationTests.java?ref=4f2975fe6b425c92d19ffd0dabbc515e1423cd77",
    "patch": "@@ -43,6 +43,7 @@\n  * @author Christoph Strobl\n  * @author Mark Paluch\n  * @author Michele Mancioppi\n+ * @author dengliming\n  */\n public class LettuceReactiveListCommandIntegrationTests extends LettuceReactiveCommandsTestSupport {\n \n@@ -245,6 +246,9 @@ void lPopSouldRemoveFirstValueCorrectly() {\n \n \t\tassertThat(connection.listCommands().lPop(KEY_1_BBUFFER).block()).isEqualTo(VALUE_1_BBUFFER);\n \t\tassertThat(nativeCommands.lrange(KEY_1, 0, -1)).containsExactly(VALUE_2, VALUE_3);\n+\n+\t\tassertThat(connection.listCommands().lPop(KEY_1_BBUFFER, 2).collectList().block()).isEqualTo(Arrays.asList(VALUE_2_BBUFFER, VALUE_3_BBUFFER));\n+\t\tassertThat(nativeCommands.lrange(KEY_1, 0, -1)).isEmpty();\n \t}\n \n \t@ParameterizedRedisTest // DATAREDIS-525"
  }
]
