[
  {
    "sha": "c7f5a8c93cf976fbe26237465d83302706f62922",
    "filename": "spring-statemachine-data/src/main/java/org/springframework/statemachine/data/RepositoryStateMachineModelFactory.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/spring-projects/spring-statemachine/blob/d3b460ecfd163d647764dcbef59c80c47138e0d1/spring-statemachine-data/src/main/java/org/springframework/statemachine/data/RepositoryStateMachineModelFactory.java",
    "raw_url": "https://github.com/spring-projects/spring-statemachine/raw/d3b460ecfd163d647764dcbef59c80c47138e0d1/spring-statemachine-data/src/main/java/org/springframework/statemachine/data/RepositoryStateMachineModelFactory.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-statemachine/contents/spring-statemachine-data/src/main/java/org/springframework/statemachine/data/RepositoryStateMachineModelFactory.java?ref=d3b460ecfd163d647764dcbef59c80c47138e0d1",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2016-2020 the original author or authors.\n+ * Copyright 2016-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -156,6 +156,7 @@ public RepositoryStateMachineModelFactory(StateRepository<? extends RepositorySt\n \t\tfor (RepositoryTransition t : transitionRepository.findByMachineId(machineId == null ? \"\" : machineId)) {\n \n \t\t\tCollection<Function<StateContext<String, String>, Mono<Void>>> actions = new ArrayList<>();\n+\t\t\tCollection<Action<String, String>> originalActions = new ArrayList<>();\n \t\t\tSet<? extends RepositoryAction> repositoryActions = t.getActions();\n \t\t\tif (repositoryActions != null) {\n \t\t\t\tfor (RepositoryAction repositoryAction : repositoryActions) {\n@@ -170,6 +171,7 @@ public RepositoryStateMachineModelFactory(StateRepository<? extends RepositorySt\n \t\t\t\t\t}\n \t\t\t\t\tif (action != null) {\n \t\t\t\t\t\tactions.add(Actions.from(action));\n+\t\t\t\t\t\toriginalActions.add(action);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -190,25 +192,23 @@ public RepositoryStateMachineModelFactory(StateRepository<? extends RepositorySt\n \t\t\t\t\tlist = new LinkedList<ChoiceData<String, String>>();\n \t\t\t\t\tchoices.put(t.getSource().getState(), list);\n \t\t\t\t}\n-\t\t\t\tguard = resolveGuard(t);\n \t\t\t\t// we want null guards to be at the end\n \t\t\t\tif (guard == null) {\n-\t\t\t\t\tlist.addLast(new ChoiceData<String, String>(t.getSource().getState(), t.getTarget().getState(), guard));\n+\t\t\t\t\tlist.addLast(new ChoiceData<String, String>(t.getSource().getState(), t.getTarget().getState(), guard, originalActions));\n \t\t\t\t} else {\n-\t\t\t\t\tlist.addFirst(new ChoiceData<String, String>(t.getSource().getState(), t.getTarget().getState(), guard));\n+\t\t\t\t\tlist.addFirst(new ChoiceData<String, String>(t.getSource().getState(), t.getTarget().getState(), guard, originalActions));\n \t\t\t\t}\n \t\t\t} else if (t.getSource().getKind() == PseudoStateKind.JUNCTION) {\n \t\t\t\tLinkedList<JunctionData<String, String>> list = junctions.get(t.getSource().getState());\n \t\t\t\tif (list == null) {\n \t\t\t\t\tlist = new LinkedList<JunctionData<String, String>>();\n \t\t\t\t\tjunctions.put(t.getSource().getState(), list);\n \t\t\t\t}\n-\t\t\t\tguard = resolveGuard(t);\n \t\t\t\t// we want null guards to be at the end\n \t\t\t\tif (guard == null) {\n-\t\t\t\t\tlist.addLast(new JunctionData<String, String>(t.getSource().getState(), t.getTarget().getState(), guard));\n+\t\t\t\t\tlist.addLast(new JunctionData<String, String>(t.getSource().getState(), t.getTarget().getState(), guard, originalActions));\n \t\t\t\t} else {\n-\t\t\t\t\tlist.addFirst(new JunctionData<String, String>(t.getSource().getState(), t.getTarget().getState(), guard));\n+\t\t\t\t\tlist.addFirst(new JunctionData<String, String>(t.getSource().getState(), t.getTarget().getState(), guard, originalActions));\n \t\t\t\t}\n \t\t\t} else if (t.getSource().getKind() == PseudoStateKind.FORK) {\n \t\t\t\tList<String> list = forks.get(t.getSource().getState());"
  }
]
