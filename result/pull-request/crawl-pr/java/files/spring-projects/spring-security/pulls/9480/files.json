[
  {
    "sha": "97e1983aba1827305aa81d5f6944c0bc235c5367",
    "filename": "web/src/main/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.java",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/spring-projects/spring-security/blob/705609083772e58d52f85eb8dc7aabddbcf3e6aa/web/src/main/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.java",
    "raw_url": "https://github.com/spring-projects/spring-security/raw/705609083772e58d52f85eb8dc7aabddbcf3e6aa/web/src/main/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-security/contents/web/src/main/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.java?ref=705609083772e58d52f85eb8dc7aabddbcf3e6aa",
    "patch": "@@ -31,10 +31,12 @@\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.AuthenticationEntryPoint;\n import org.springframework.security.web.authentication.NullRememberMeServices;\n import org.springframework.security.web.authentication.RememberMeServices;\n+import org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority;\n import org.springframework.util.Assert;\n import org.springframework.web.filter.OncePerRequestFilter;\n \n@@ -187,8 +189,23 @@ private boolean authenticationIsRequired(String username) {\n \t\t}\n \t\t// Limit username comparison to providers which use usernames (ie\n \t\t// UsernamePasswordAuthenticationToken) (see SEC-348)\n-\t\tif (existingAuth instanceof UsernamePasswordAuthenticationToken && !existingAuth.getName().equals(username)) {\n-\t\t\treturn true;\n+\t\tif (existingAuth instanceof UsernamePasswordAuthenticationToken) {\n+\t\t\t// check if we are switched - if so we only need to authenticate now\n+\t\t\t// if the current basic auth username is different from the one we\n+\t\t\t// switched from\n+\t\t\tfor (GrantedAuthority ga : existingAuth.getAuthorities()) {\n+\t\t\t\tif (ga instanceof SwitchUserGrantedAuthority) {\n+\t\t\t\t\tAuthentication origAuth = ((SwitchUserGrantedAuthority) ga).getSource();\n+\t\t\t\t\treturn origAuth == null || !origAuth.isAuthenticated()\n+\t\t\t\t\t\t\t|| (origAuth instanceof UsernamePasswordAuthenticationToken\n+\t\t\t\t\t\t\t\t\t&& !origAuth.getName().equals(username));\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t// not switched, so check current username against the supplied one\n+\t\t\tif (!existingAuth.getName().equals(username)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n \t\t}\n \t\t// Handle unusual condition where an AnonymousAuthenticationToken is already\n \t\t// present. This shouldn't happen very often, as BasicProcessingFitler is meant to"
  },
  {
    "sha": "e29d175e5ea4ba44dde27233a8e43ffc9a80a05c",
    "filename": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/spring-projects/spring-security/blob/705609083772e58d52f85eb8dc7aabddbcf3e6aa/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java",
    "raw_url": "https://github.com/spring-projects/spring-security/raw/705609083772e58d52f85eb8dc7aabddbcf3e6aa/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java",
    "contents_url": "https://api.github.com/repos/spring-projects/spring-security/contents/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java?ref=705609083772e58d52f85eb8dc7aabddbcf3e6aa",
    "patch": "@@ -17,6 +17,7 @@\n package org.springframework.security.web.authentication.www;\n \n import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n \n import javax.servlet.FilterChain;\n import javax.servlet.ServletRequest;\n@@ -38,6 +39,7 @@\n import org.springframework.security.core.authority.AuthorityUtils;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.authentication.WebAuthenticationDetails;\n+import org.springframework.security.web.authentication.switchuser.SwitchUserGrantedAuthority;\n import org.springframework.web.util.WebUtils;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -364,4 +366,25 @@ public void requestWhenEmptyBasicAuthorizationHeaderTokenThenUnauthorized() thro\n \t\tassertThat(response.getStatus()).isEqualTo(401);\n \t}\n \n+\t@Test\n+\tpublic void whenSwitchedCheckOriginalUser() throws Exception {\n+\t\t// prepare the saved switch-user token\n+\t\tAuthentication rodToken = new UsernamePasswordAuthenticationToken(\"rod\", \"koala\",\n+\t\t\t\tAuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\t\tUsernamePasswordAuthenticationToken switchedToken = new UsernamePasswordAuthenticationToken(\"switched\", \"user\",\n+\t\t\t\tArrays.asList(new SwitchUserGrantedAuthority(\"PREVIOUS_ADMINISTRATOR\", rodToken)));\n+\t\tSecurityContextHolder.getContext().setAuthentication(switchedToken);\n+\t\t// setup for test\n+\t\tString token = \"rod:koala\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes())));\n+\t\trequest.setServletPath(\"/some_file.html\");\n+\t\tfinal MockHttpServletResponse response1 = new MockHttpServletResponse();\n+\t\tFilterChain chain = mock(FilterChain.class);\n+\t\tthis.filter.doFilter(request, response1, chain);\n+\t\tverify(chain).doFilter(any(ServletRequest.class), any(ServletResponse.class));\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isNotNull();\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(\"switched\");\n+\t}\n+\n }"
  }
]
