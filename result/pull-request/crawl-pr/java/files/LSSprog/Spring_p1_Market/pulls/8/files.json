[
  {
    "sha": "9cb67032feb040a9eb296b80280c6b3aa4e9f598",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/pom.xml",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/pom.xml",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/pom.xml?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -47,6 +47,51 @@\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>io.jsonwebtoken</groupId>\n+\t\t\t<artifactId>jjwt</artifactId>\n+\t\t\t<version>0.9.1</version>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n+\t\t</dependency>\n+\n+<!--\t\t<dependency>-->\n+<!--\t\t\t<groupId>org.springframework</groupId>-->\n+<!--\t\t\t<artifactId>spring-context</artifactId>-->\n+<!--\t\t\t<version>5.1.2.RELEASE</version>-->\n+<!--\t\t</dependency>-->\n+\t\t<dependency>\n+\t\t\t<groupId>org.aspectj</groupId>\n+\t\t\t<artifactId>aspectjweaver</artifactId>\n+\t\t\t<version>1.9.2</version>\n+\t\t</dependency>\n+\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web-services</artifactId>\n+\t\t\t<version>2.4.3</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>javax.xml.bind</groupId>\n+\t\t\t<artifactId>jaxb-api</artifactId>\n+\t\t\t<version>2.3.1</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.glassfish.jaxb</groupId>\n+\t\t\t<artifactId>jaxb-runtime</artifactId>\n+\t\t\t<version>2.3.1</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>wsdl4j</groupId>\n+\t\t\t<artifactId>wsdl4j</artifactId>\n+\t\t\t<version>1.6.2</version>\n+\t\t</dependency>\n+\n+\n \t</dependencies>\n \n \t<build>\n@@ -63,6 +108,28 @@\n \t\t\t\t\t</excludes>\n \t\t\t\t</configuration>\n \t\t\t</plugin>\n+\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t<artifactId>jaxb2-maven-plugin</artifactId>\n+\t\t\t\t<version>2.5.0</version>\n+\t\t\t\t<executions>\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<id>xjc</id>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>xjc</goal>\n+\t\t\t\t\t\t</goals>\n+\t\t\t\t\t</execution>\n+\t\t\t\t</executions>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<sources>\n+\t\t\t\t\t\t<source>${project.basedir}/src/main/resources/products.xsd</source>\n+\t\t\t\t\t</sources>\n+\t\t\t\t\t<!--\t\t\t\t\t<packageName>soap</packageName>-->\n+\t\t\t\t\t<!--\t\t\t\t\t<outputDirectory>${project.basedir}/src/main/java/com/flamexander/spring/ws/soap</outputDirectory>-->\n+\t\t\t\t\t<!--\t\t\t\t\t<clearOutputDir>false</clearOutputDir>-->\n+\t\t\t\t</configuration>\n+\t\t\t</plugin>\n \t\t</plugins>\n \t</build>\n "
  },
  {
    "sha": "b632f9efe4c0137a03172fdc20a78685c0615908",
    "filename": "src/main/java/hw/spring/market/MarketSsApplication.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/MarketSsApplication.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/MarketSsApplication.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/MarketSsApplication.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -1,13 +1,22 @@\n package hw.spring.market;\n \n+import hw.spring.market.configs.AppConfig;\n+import hw.spring.market.dto.ProductDto;\n+import hw.spring.market.model.User;\n+import hw.spring.market.service.ProductService;\n+import hw.spring.market.service.UserService;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.PropertySource;\n \n @SpringBootApplication\n+@PropertySource(\"classpath:secret.properties\") //secret берётся не из yaml общего, а из отдельного файла, для безопасности\n public class MarketSsApplication {\n-\n+\t//Используя Spring-WS, реализовать Web Service для выгрузки списка товаров\n \tpublic static void main(String[] args) {\n \t\tSpringApplication.run(MarketSsApplication.class, args);\n+\n \t}\n \n }"
  },
  {
    "sha": "2c8b8ef5c24e5746dd96ce67ac4ca011d5f1c802",
    "filename": "src/main/java/hw/spring/market/beans/AppAspectAop.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/beans/AppAspectAop.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/beans/AppAspectAop.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/beans/AppAspectAop.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,64 @@\n+package hw.spring.market.beans;\n+\n+import org.aspectj.lang.JoinPoint;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.annotation.Before;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+\n+@Aspect\n+@Component\n+public class AppAspectAop { // это для AOP\n+    /*public HashMap<String, Integer> count;\n+    public HashMap<String, Long> time;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.count = new HashMap<>();\n+        this.time = new HashMap<>();\n+    }\n+//    @Before(\"execution(public * hw.spring.market.*.*.*(..))\")\n+//    public void beforeTestMethod() {\n+//        System.out.println(\"поймал\");\n+//    }\n+\n+    //Задание 1\n+    @Before(\"execution(public * hw.spring.market.*.*.*(..))\")\n+    public void countNumberMethodCalls(JoinPoint joinPoint) {\n+        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n+        String methodsName = methodSignature.toShortString();\n+        Integer num = 1;\n+        if (count.containsKey(methodsName)) {\n+            num = count.get(methodsName) + 1;\n+        }\n+        count.put(methodsName, num);\n+        System.out.println(count);\n+    }\n+\n+    //Задание 2\n+    @Around(\"execution(public * hw.spring.market.controller.*.*(..))\")\n+    public Object timeOfControllersMethod(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n+        MethodSignature methodSignature = (MethodSignature) proceedingJoinPoint.getSignature();\n+        String methodsName = methodSignature.toShortString();\n+\n+        long begin = System.currentTimeMillis();\n+        Object out = proceedingJoinPoint.proceed();\n+        long end = System.currentTimeMillis();\n+        long duration = end - begin;\n+\n+        long ms = duration;\n+        if (time.containsKey(methodsName)) {\n+            ms = time.get(methodsName) + duration;\n+        }\n+        time.put(methodsName, ms);\n+        System.out.println(time);\n+        return out;\n+    }\n+\n+*/\n+}"
  },
  {
    "sha": "e9a11b5fcb9f4452b3acfc1a0d6185435d60262d",
    "filename": "src/main/java/hw/spring/market/beans/CartOld.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/beans/CartOld.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/beans/CartOld.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/beans/CartOld.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,54 @@\n+package hw.spring.market.beans;\n+\n+import hw.spring.market.dto.ProductDto;\n+import hw.spring.market.service.ProductService;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+@Data\n+@NoArgsConstructor\n+@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)\n+//@RequiredArgsConstructor\n+public class CartOld { /* СТАРАЯ КОРЗИНА\n+    private List<ProductDto> listProduct;\n+    private ProductService productService; // почему здесь не сработал final - ругается\n+\n+    @PostConstruct\n+    public void init(){\n+        listProduct = new ArrayList<ProductDto>();\n+    }\n+\n+    public List<ProductDto> addProductToCart (ProductDto productDto) { /// или здесь void лучше сделать?\n+        listProduct.add(productDto);\n+        //listProduct.add(productService.findProductById(id).get());\n+        return listProduct;\n+    }\n+    public List<ProductDto> deleteProductFromCart (Long id) { /// или здесь void лучше сделать?\n+        //listProduct.remove(productService.findProductById(id).get());\n+        for (ProductDto p: listProduct) {\n+            if (p.getId() == id) {\n+                listProduct.remove(p);\n+            }\n+                    }\n+        return listProduct;\n+    }\n+\n+    public Integer getTotalCost() {\n+        Integer totalCost = 0;\n+        for (ProductDto p: listProduct) {\n+            totalCost = totalCost + p.getPrice();\n+        }\n+        return totalCost; // TODO посчитать сумму по всему листу в позиции price\n+    }\n+*/\n+}"
  },
  {
    "sha": "ed4063806692582763eafb6a6059f90a764fab5a",
    "filename": "src/main/java/hw/spring/market/beans/Cart_v2.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/beans/Cart_v2.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/beans/Cart_v2.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/beans/Cart_v2.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,72 @@\n+package hw.spring.market.beans;\n+\n+import hw.spring.market.exeptionsHandling.ResourceNotFoundException;\n+import hw.spring.market.model.OrderItem;\n+import hw.spring.market.model.Product;\n+import hw.spring.market.service.ProductService;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+@Data\n+@RequiredArgsConstructor\n+@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)\n+public class Cart_v2 {\n+    private final ProductService productService;\n+    private List<OrderItem> listItems;\n+    private int totalQuantity;\n+    private int totalCost;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.listItems = new ArrayList<>();\n+    }\n+\n+    public void addProductToCart (Long id) {\n+        for (OrderItem oi: listItems) {\n+            if (oi.getProduct().getId() == id) {\n+                oi.incQuantity();\n+                recalculate();\n+                return;\n+            }\n+        }\n+            Product product = productService.findProductById(id)\n+                    .orElseThrow(()->new ResourceNotFoundException(\"Not find product with id: \" + id));\n+            OrderItem orderItem = new OrderItem(product);\n+            listItems.add(orderItem);\n+            recalculate();\n+\n+    }\n+\n+    private void recalculate() {\n+        totalCost = 0;\n+        totalQuantity = 0;\n+        for (OrderItem oi: listItems) {\n+            totalCost = totalCost + oi.getCost();\n+            totalQuantity = totalQuantity + oi.getQuantity();\n+        }\n+    }\n+\n+    public void clear() {\n+        listItems.clear();\n+        recalculate();\n+    }\n+\n+    public void deleteProductFromCart(Long id) {\n+        for (OrderItem oi: listItems) {\n+            if (oi.getProduct().getId() == id) {\n+                listItems.remove(oi);\n+                recalculate();\n+                return;\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "8486c7d5e0c2817f2c2871bbfbf30788051f96b1",
    "filename": "src/main/java/hw/spring/market/beans/JwtTokenUtil.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/beans/JwtTokenUtil.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/beans/JwtTokenUtil.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/beans/JwtTokenUtil.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,61 @@\n+package hw.spring.market.beans;\n+\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class JwtTokenUtil {\n+    @Value(\"${jwt.secret}\")\n+    private String secret;\n+\n+    public String doToken(UserDetails userDetails) {\n+        Map<String, Object> claims = new HashMap<>();\n+        List<String> rolesList = userDetails.getAuthorities().stream()\n+                .map(GrantedAuthority::getAuthority)\n+                .collect(Collectors.toList());\n+        claims.put(\"roles\", rolesList);\n+\n+        Date issuedDate = new Date();\n+        Date expiredDate = new Date(issuedDate.getTime() + 30 * 60 * 1000);\n+\n+        return Jwts.builder()\n+                .setClaims(claims)\n+                .setSubject(userDetails.getUsername())\n+                .setIssuedAt(issuedDate)\n+                .setExpiration(expiredDate)\n+                .signWith(SignatureAlgorithm.HS256, secret)\n+                .compact();\n+    }\n+\n+    private <T> T getClaimFromToken(String token, Function<Claims, T> claimsTResolver) {\n+        Claims claims = getAllClaimsFromToken(token);\n+        return claimsTResolver.apply(claims);\n+    }\n+\n+    private Claims getAllClaimsFromToken(String token) {\n+        return Jwts.parser()\n+                .setSigningKey(secret)\n+                .parseClaimsJws(token)\n+                .getBody();\n+    }\n+\n+    public String getUsernameFromToken(String token) {\n+        return getClaimFromToken(token, Claims::getSubject);\n+    }\n+\n+    public List<String> getRoles(String token) {\n+        return getClaimFromToken(token, (Function<Claims, List<String>>) claims -> claims.get(\"roles\", List.class));\n+    }\n+}"
  },
  {
    "sha": "0a5d27795ea9074ccd80d8270aa999fde7fb4c5e",
    "filename": "src/main/java/hw/spring/market/configs/AppConfig.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/configs/AppConfig.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/configs/AppConfig.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/configs/AppConfig.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,11 @@\n+package hw.spring.market.configs;\n+\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.EnableAspectJAutoProxy;\n+\n+@Configuration\n+@EnableAspectJAutoProxy\n+@ComponentScan(\"hw.spring.market\")\n+public class AppConfig { //это для AOP было\n+}"
  },
  {
    "sha": "7f78b736378cc16cdb962a3e8f297ae080a396f0",
    "filename": "src/main/java/hw/spring/market/configs/JwtRequestFilter.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/configs/JwtRequestFilter.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/configs/JwtRequestFilter.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/configs/JwtRequestFilter.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,55 @@\n+package hw.spring.market.configs;\n+\n+import hw.spring.market.beans.JwtTokenUtil;\n+import io.jsonwebtoken.ExpiredJwtException;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Slf4j\n+public class JwtRequestFilter extends OncePerRequestFilter {\n+    private final JwtTokenUtil jwtTokenUtil;\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n+                                    FilterChain filterChain) throws ServletException, IOException {\n+        String authHeader = httpServletRequest.getHeader(\"Authorization\");\n+        String username = null;\n+        String jwt = null;\n+        if (authHeader !=null && authHeader.startsWith(\"Bearer \")) {\n+            jwt = authHeader.substring(7);\n+            try {\n+                username = jwtTokenUtil.getUsernameFromToken(jwt);\n+            } catch (ExpiredJwtException e) {\n+                log.debug(\"The token is expired\");\n+            }\n+        }\n+\n+        if (username !=null && SecurityContextHolder.getContext().getAuthentication() == null) {\n+            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(username, null,\n+                    jwtTokenUtil.getRoles(jwt).stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList()));\n+            SecurityContextHolder.getContext().setAuthentication(token);\n+ // ВТОРОЙ ВАРИАНТ - пусть будет здесь тоже\n+//            UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n+//            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n+//            token.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n+//            SecurityContextHolder.getContext().setAuthentication(token);\n+\n+        }\n+\n+        filterChain.doFilter(httpServletRequest, httpServletResponse);\n+    }\n+}"
  },
  {
    "sha": "a7df863963201fd39ae610e2d7738956c92bfdb7",
    "filename": "src/main/java/hw/spring/market/configs/SecurityConfig.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/configs/SecurityConfig.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/configs/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/configs/SecurityConfig.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,46 @@\n+package hw.spring.market.configs;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.http.SessionCreationPolicy;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n+\n+@EnableWebSecurity\n+@RequiredArgsConstructor\n+@Slf4j\n+public class SecurityConfig extends WebSecurityConfigurerAdapter {\n+    private final JwtRequestFilter jwtRequestFilter;\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        http\n+                .csrf().disable()\n+                .authorizeRequests()\n+                .antMatchers(\"/api/v1/cart/**\").authenticated()\n+                .antMatchers(\"/api/v1/orders/**\").authenticated()\n+                .antMatchers(\"/h2-console/**\").permitAll()\n+                .anyRequest().permitAll()\n+                .and()\n+                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n+                .and()\n+                .headers().frameOptions().disable();\n+        http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);\n+    }\n+\n+    @Bean\n+    public BCryptPasswordEncoder passwordEncoder() {\n+        return new BCryptPasswordEncoder();\n+    }\n+\n+    @Override\n+    @Bean\n+    public AuthenticationManager authenticationManagerBean() throws Exception {\n+        return super.authenticationManagerBean();\n+    }\n+}"
  },
  {
    "sha": "ee7b14134b3d58409dacd98e55922289a49cfc02",
    "filename": "src/main/java/hw/spring/market/configs/WsConfig.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/configs/WsConfig.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/configs/WsConfig.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/configs/WsConfig.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,43 @@\n+package hw.spring.market.configs;\n+\n+import org.springframework.boot.web.servlet.ServletRegistrationBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.ws.config.annotation.EnableWs;\n+import org.springframework.ws.config.annotation.WsConfigurerAdapter;\n+import org.springframework.ws.transport.http.MessageDispatcherServlet;\n+import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;\n+import org.springframework.xml.xsd.SimpleXsdSchema;\n+import org.springframework.xml.xsd.XsdSchema;\n+\n+@EnableWs\n+@Configuration\n+public class WsConfig extends WsConfigurerAdapter {\n+\n+    @Bean\n+    public ServletRegistrationBean msgDispatcherServlet (ApplicationContext appContext) {\n+        MessageDispatcherServlet servlet = new MessageDispatcherServlet();\n+        servlet.setApplicationContext(appContext);\n+        servlet.setTransformWsdlLocations(true);\n+        return new ServletRegistrationBean(servlet, \"/ws/*\");\n+    }\n+\n+    @Bean\n+    public XsdSchema productsSchema() {\n+        return new SimpleXsdSchema(new ClassPathResource(\"products.xsd\"));\n+    }\n+\n+    // http://localhost:8080/ws/products.wsdl\n+    @Bean(name = \"products\")\n+    public DefaultWsdl11Definition groupsWsdl11Definition(XsdSchema groupsSchema) {\n+        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();\n+        wsdl11Definition.setPortTypeName(\"ProductsPort\");\n+        wsdl11Definition.setLocationUri(\"/ws\");\n+        wsdl11Definition.setTargetNamespace(\"http://www.market_ss.com/spring/ws/products\");\n+        wsdl11Definition.setSchema(groupsSchema);\n+        return wsdl11Definition;\n+    }\n+\n+}"
  },
  {
    "sha": "323918ba32445e9cfd744358be6c78c0f007f2a1",
    "filename": "src/main/java/hw/spring/market/controller/AuthController.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/AuthController.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/AuthController.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/controller/AuthController.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,39 @@\n+package hw.spring.market.controller;\n+\n+import hw.spring.market.beans.JwtTokenUtil;\n+import hw.spring.market.dto.JwtRequest;\n+import hw.spring.market.dto.JwtResponse;\n+import hw.spring.market.exeptionsHandling.MarketError;\n+import hw.spring.market.service.UserService;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequiredArgsConstructor\n+public class AuthController {\n+    private final UserService userService;\n+    private final JwtTokenUtil jwtTokenUtil;\n+    private final AuthenticationManager authenticationManager;\n+\n+    @PostMapping (\"/auth\")\n+    public ResponseEntity<?> createAuthToken(@RequestBody JwtRequest jwtRequest) {\n+        try {\n+            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken\n+                    (jwtRequest.getUsername(), jwtRequest.getPass()));\n+        } catch (BadCredentialsException exception) {\n+            return new ResponseEntity<>(new MarketError(HttpStatus.UNAUTHORIZED.value(),\n+                    \"Incorrect username or password\"), HttpStatus.UNAUTHORIZED);\n+        }\n+        UserDetails userDetails = userService.loadUserByUsername(jwtRequest.getUsername());\n+        String token = jwtTokenUtil.doToken(userDetails);\n+        return ResponseEntity.ok(new JwtResponse(token));\n+    }\n+}"
  },
  {
    "sha": "3a3d7853a2436ba7965653e3aaffb9932c66f656",
    "filename": "src/main/java/hw/spring/market/controller/CartController.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/CartController.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/CartController.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/controller/CartController.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,49 @@\n+package hw.spring.market.controller;\n+\n+import hw.spring.market.beans.Cart_v2;\n+import hw.spring.market.dto.CartDto;\n+import hw.spring.market.dto.ProductDto;\n+import hw.spring.market.beans.CartOld;\n+import hw.spring.market.service.ProductService;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.List;\n+\n+@RestController\n+@RequiredArgsConstructor\n+@RequestMapping(\"/api/v1/cart\")\n+\n+public class CartController {\n+    private final Cart_v2 cart;\n+    private final ProductService productService;\n+\n+    @GetMapping\n+    public CartDto showCart() {\n+        return new CartDto(cart);\n+    }\n+\n+    @GetMapping(\"/add/{id}\")\n+    public void addProductToCart(@PathVariable Long id){\n+        cart.addProductToCart(id);\n+        //return new CartDto(cart);\n+        //ProductDto productDto = productService.findProductById(id).get();\n+        //return cart.addProductToCart(productService.findProductById(id).get());\n+    }\n+\n+    @GetMapping(\"/delete/{id}\")\n+    public void deleteProductFromCart(@PathVariable Long id) {\n+        cart.deleteProductFromCart(id);\n+    }\n+\n+    @GetMapping(\"/clear\")\n+    public CartDto clearCart() {\n+        cart.clear();\n+        return new CartDto(cart);\n+    }\n+\n+    @GetMapping(\"/inc/{id}\")\n+    public void incQuantity(@PathVariable Long id) {\n+        cart.addProductToCart(id);\n+    }\n+}"
  },
  {
    "sha": "6cc6a99e82b5a8d48d352b5ca99086f042929c39",
    "filename": "src/main/java/hw/spring/market/controller/OrderController.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/OrderController.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/OrderController.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/controller/OrderController.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,61 @@\n+package hw.spring.market.controller;\n+\n+import hw.spring.market.dto.OrderDto;\n+import hw.spring.market.exeptionsHandling.ResourceNotFoundException;\n+import hw.spring.market.model.Order;\n+import hw.spring.market.model.User;\n+import hw.spring.market.service.OrderService;\n+import hw.spring.market.service.UserService;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.security.Principal;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+@RequiredArgsConstructor\n+@RequestMapping(\"/api/v1/orders\")\n+@Slf4j\n+public class OrderController {\n+    private final OrderService orderService;\n+    private final UserService userService;\n+\n+//    @GetMapping(\"/create\")\n+//    public void createNewOrderFromCart(Principal principal) {\n+//        User user = userService.findByUsername(principal.getName())\n+//                .orElseThrow(() -> new ResourceNotFoundException(\"User for order not found\"));\n+//        orderService.createOrderFromCart(user, \"без адреса\");\n+//    }\n+\n+    @GetMapping\n+    public List<OrderDto> getUsersOrders(Principal principal) {\n+        return orderService.findAllOrdersByUsername(principal.getName()).stream().map(OrderDto::new).collect(Collectors.toList());\n+    }\n+\n+//    @GetMapping(\"/create/{address}\")\n+//    public void createNewOrderFromCartWithAddress(@PathVariable String address, Principal principal) {\n+//        User user = userService.findByUsername(principal.getName())\n+//                .orElseThrow(() -> new ResourceNotFoundException(\"User for order not found\"));\n+//        orderService.createOrderFromCart(user, address);\n+//    }\n+\n+\n+\n+    @PostMapping(\"/create\")\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public OrderDto createNewOrderFromCartWithAddressPost(Principal principal, @RequestParam String address) {\n+        User user = userService.findByUsername(principal.getName())\n+                .orElseThrow(() -> new ResourceNotFoundException(\"User for order not found\"));\n+        Order order = orderService.createOrderFromCart(user, address);\n+        return new OrderDto(order);\n+    }\n+\n+    @GetMapping(\"/{id}\")\n+    public OrderDto getOrderById(@PathVariable Long id) {\n+        Order order = orderService.findOrderById(id).orElseThrow(()-> new ResourceNotFoundException(\"Order not found\"));\n+        return new OrderDto(order);\n+    }\n+}"
  },
  {
    "sha": "1d190e99b3accff7fc3533c604fe37acbb647d04",
    "filename": "src/main/java/hw/spring/market/controller/ProductController.java",
    "status": "modified",
    "additions": 57,
    "deletions": 9,
    "changes": 66,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/ProductController.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/ProductController.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/controller/ProductController.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -1,28 +1,76 @@\n package hw.spring.market.controller;\n \n+import hw.spring.market.dto.ProductDto;\n+import hw.spring.market.exeptionsHandling.ResourceNotFoundException;\n import hw.spring.market.model.Product;\n+import hw.spring.market.repository.specification.ProductSpecs;\n import hw.spring.market.service.ProductService;\n import lombok.RequiredArgsConstructor;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.data.domain.Page;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.*;\n \n import java.util.List;\n \n @RestController\n @RequiredArgsConstructor\n-@RequestMapping (\"/products\")\n+@RequestMapping (\"/api/v1/products\")\n public class ProductController {\n     private final ProductService productService;\n \n     @GetMapping\n-    public List<Product> findAllProducts() {\n-        return productService.findAllProducts();\n+    public Page<ProductDto> findAllProducts(\n+            @RequestParam MultiValueMap<String, String> params,\n+//            @RequestParam(name = \"title\", required = false) String title,\n+//            @RequestParam(name = \"min_price\", defaultValue = \"0\") Integer min_price,\n+//            @RequestParam(name = \"max_price\", required = false) Integer max_price,\n+            @RequestParam(name = \"p\", defaultValue = \"1\") Integer page\n+    ) {\n+//        if (max_price == null) {\n+//            max_price = Integer.MAX_VALUE;\n+//        }\n+        if (page < 1) {\n+            page = 1;\n+        }\n+        return productService.findAll(ProductSpecs.build(params), page, 3);\n+        //return productService.findAllProducts();\n+        //return productService.findAllByPrice(min_price, max_price);\n+        //return productService.findAllByPages(page); //.getContent(); //getContent - выдёргиваем из Page в List\n     }\n \n     @GetMapping(\"/{id}\")\n-    public Product findProductById(@PathVariable Long id) {\n-        return productService.findProductById(id).get();\n+    public ProductDto findProductBuId(@PathVariable Long id) {\n+        return productService.findProductDtoById(id).orElseThrow(() ->\n+                new ResourceNotFoundException(\"Product with ID:\" + id + \" does not exist\"));\n     }\n+    @DeleteMapping(\"/{id}\")\n+    public void deleteProductBuId(@PathVariable Long id) {\n+        productService.deleteProductById(id);\n+    }\n+\n+    @PostMapping\n+    @ResponseStatus(HttpStatus.CREATED) //хороший тон возвращать не 200 а ответ 201 - объект создан\n+    public ProductDto saveNewProduct(@RequestBody ProductDto productDto) {\n+        productDto.setId(null);\n+        return productService.saveNewProduct(productDto);\n+    }\n+\n+    @PutMapping\n+    public ProductDto updateProduct(@RequestBody ProductDto productDto) {\n+        return productService.updateProduct(productDto);\n+    }\n+//    public Product updateProduct(@RequestBody Product product) {\n+//        return productService.saveOrUpdate(product);\n+//    }\n+    //    public Product saveNewProduct(@RequestBody Product product) {\n+//        product.setId(null);\n+//        return productService.saveOrUpdate(product);\n+//    }\n+//    @GetMapping(\"/delete/{id}\")\n+//    public void deleteProductById(@PathVariable Long id){\n+//        productService.deleteProductById(id);\n+//    }\n+\n+\n }"
  },
  {
    "sha": "6aab670b84041319ffd667c2c2a03eb91542b11e",
    "filename": "src/main/java/hw/spring/market/controller/ProductsEndpoint.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/ProductsEndpoint.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/controller/ProductsEndpoint.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/controller/ProductsEndpoint.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,35 @@\n+package hw.spring.market.controller;\n+\n+import hw.spring.market.service.ProductService;\n+import hw.spring.market.ws.products.GetAllProductsRequest;\n+import hw.spring.market.ws.products.GetAllProductsResponse;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@RequiredArgsConstructor\n+public class ProductsEndpoint {\n+    private static final String NAMESPACE_URI = \"http://www.market_ss.com/spring/ws/products\";\n+    private final ProductService productService;\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getAllProductsRequest\")\n+    @ResponsePayload\n+    public GetAllProductsResponse getAllProductsWsResponse(@RequestPayload GetAllProductsRequest request) {\n+        GetAllProductsResponse response = new GetAllProductsResponse();\n+        productService.getAllProductsWs().forEach(response.getProductsWS()::add);\n+        return response;\n+    }\n+        /*\n+        Пример запроса: POST http://localhost:8080/market/ws\n+\n+        <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:f=\"http://www.market_ss.com/spring/ws/products\">\n+            <soapenv:Header/>\n+            <soapenv:Body>\n+                <f:getAllProductsRequest/>\n+            </soapenv:Body>\n+        </soapenv:Envelope>\n+     */\n+}"
  },
  {
    "sha": "16879db8c32cdaa2e1395ae1d76a2b256c8261b2",
    "filename": "src/main/java/hw/spring/market/dto/CartDto.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/CartDto.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/CartDto.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/dto/CartDto.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,22 @@\n+package hw.spring.market.dto;\n+\n+import hw.spring.market.beans.Cart_v2;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Data\n+@NoArgsConstructor\n+public class CartDto {\n+    private List<OrderItemDto> listItem;\n+    private int totalCost;\n+    private int totalQuantity;\n+\n+    public CartDto(Cart_v2 cart) {\n+        this.listItem = cart.getListItems().stream().map(OrderItemDto::new).collect(Collectors.toList());\n+        this.totalCost = cart.getTotalCost();\n+        this.totalQuantity = cart.getTotalQuantity();\n+    }\n+}"
  },
  {
    "sha": "d3b82970165c9fa6f41c2301cfa733d1ee27a98c",
    "filename": "src/main/java/hw/spring/market/dto/JwtRequest.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/JwtRequest.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/JwtRequest.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/dto/JwtRequest.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,9 @@\n+package hw.spring.market.dto;\n+\n+import lombok.Data;\n+\n+@Data\n+public class JwtRequest {\n+    private String username;\n+    private String pass;\n+}"
  },
  {
    "sha": "c2572bc00759ee1f98d19b9f885fec97ef136024",
    "filename": "src/main/java/hw/spring/market/dto/JwtResponse.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/JwtResponse.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/JwtResponse.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/dto/JwtResponse.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,14 @@\n+package hw.spring.market.dto;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+public class JwtResponse {\n+    private String token;\n+\n+    public JwtResponse(String token) { // не понимаю! почему ругался пока не создал руками этот конструктор. Ругался в AuthControllere\n+        this.token = token;            //в строке        return ResponseEntity.ok(new JwtResponse(token));\n+    }\n+}"
  },
  {
    "sha": "9eb979c82e9ae6e90b5652d1159e5b82ba7292dc",
    "filename": "src/main/java/hw/spring/market/dto/OrderDto.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/OrderDto.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/OrderDto.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/dto/OrderDto.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,25 @@\n+package hw.spring.market.dto;\n+\n+import hw.spring.market.model.Order;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+public class OrderDto {\n+    private Long id;\n+    private String username;\n+    private int totalCost;\n+    private int totalQuantity;\n+    private String createdDateTime;\n+    private String address;\n+\n+    public OrderDto(Order order) {\n+        this.id = order.getId();\n+        this.username = order.getUser().getUsername();\n+        this.totalCost = order.getCost();\n+        this.totalQuantity = order.getTotalQuantity();\n+        this.createdDateTime = order.getCreatedAt().toString();\n+        this.address = order.getAddress();\n+    }\n+}"
  },
  {
    "sha": "b1e3fa193b647bfa7b5359b785cc372f18545927",
    "filename": "src/main/java/hw/spring/market/dto/OrderItemDto.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/OrderItemDto.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/OrderItemDto.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/dto/OrderItemDto.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,23 @@\n+package hw.spring.market.dto;\n+\n+import hw.spring.market.model.OrderItem;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+public class OrderItemDto {\n+    private Long product_id;\n+    private String title;\n+    private int quantity;\n+    private int price;\n+    private int cost;\n+\n+    public OrderItemDto(OrderItem orderItem) {\n+        this.product_id = orderItem.getProduct().getId();\n+        this.title = orderItem.getProduct().getTitle();\n+        this.quantity = orderItem.getQuantity();\n+        this.price = orderItem.getPrice();\n+        this.cost = orderItem.getCost();\n+    }\n+}"
  },
  {
    "sha": "35fa98b97fbcaf71d49cf9c85bdea66b20608c40",
    "filename": "src/main/java/hw/spring/market/dto/ProductDto.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/ProductDto.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/dto/ProductDto.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/dto/ProductDto.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,20 @@\n+package hw.spring.market.dto;\n+\n+import hw.spring.market.model.Product;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+public class ProductDto {\n+    private Long id;\n+    private String title;\n+    private int price;\n+\n+    public ProductDto(Product p) {\n+        this.id = p.getId();\n+        this.title = p.getTitle();\n+        this.price = p.getPrice();\n+    }\n+\n+}"
  },
  {
    "sha": "bf43b893da821e15feb13197503742d52b6f7d54",
    "filename": "src/main/java/hw/spring/market/exeptionsHandling/ExceptionControllerAdvice.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/exeptionsHandling/ExceptionControllerAdvice.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/exeptionsHandling/ExceptionControllerAdvice.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/exeptionsHandling/ExceptionControllerAdvice.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,17 @@\n+package hw.spring.market.exeptionsHandling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+\n+@ControllerAdvice\n+@Slf4j\n+public class ExceptionControllerAdvice {\n+\n+    public ResponseEntity<?> handleResourceNotFoundExc (ResourceNotFoundException e) {\n+        log.error(e.getMessage());\n+        MarketError error = new MarketError(HttpStatus.NOT_FOUND.value(), e.getMessage());\n+        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);\n+    }\n+}"
  },
  {
    "sha": "418c40d3d6b2f8aed192cf6da6adf8b2a2f2ca1c",
    "filename": "src/main/java/hw/spring/market/exeptionsHandling/MarketError.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/exeptionsHandling/MarketError.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/exeptionsHandling/MarketError.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/exeptionsHandling/MarketError.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,18 @@\n+package hw.spring.market.exeptionsHandling;\n+\n+import lombok.Data;\n+\n+import java.util.Date;\n+\n+@Data\n+public class MarketError {\n+    private int status;\n+    private String message;\n+    private Date timestamp;\n+\n+    public MarketError(int status, String message) {\n+        this.status = status;\n+        this.message = message;\n+        this.timestamp = new Date();\n+    }\n+}"
  },
  {
    "sha": "84dc3614994f2c222cfadbb5f21d901b7dba7592",
    "filename": "src/main/java/hw/spring/market/exeptionsHandling/ResourceNotFoundException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/exeptionsHandling/ResourceNotFoundException.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/exeptionsHandling/ResourceNotFoundException.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/exeptionsHandling/ResourceNotFoundException.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,7 @@\n+package hw.spring.market.exeptionsHandling;\n+\n+public class ResourceNotFoundException extends RuntimeException{\n+    public ResourceNotFoundException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "0be49d260a7158460bd2f01ae475bb89e272ac2e",
    "filename": "src/main/java/hw/spring/market/model/Order.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/Order.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/Order.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/model/Order.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,63 @@\n+package hw.spring.market.model;\n+\n+import hw.spring.market.beans.Cart_v2;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.Cascade;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+import javax.persistence.*;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Entity\n+@NoArgsConstructor\n+@Data\n+@Table (name = \"orders_tbl\")\n+public class Order {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"order_id\")\n+    private Long id;\n+\n+    @OneToMany(mappedBy = \"order\")\n+    @Cascade(org.hibernate.annotations.CascadeType.ALL) // вроде здесь включили каскадное сохранение\n+    private List<OrderItem> items;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"user_id\")\n+    private User user;\n+\n+    @Column(name = \"total_quan_fld\")\n+    private int totalQuantity;\n+\n+    @Column(name = \"total_cost_fld\")\n+    private int cost;\n+\n+    @Column(name = \"address_fld\")\n+    private String address;\n+\n+    @Column(name = \"created_at\")\n+    @CreationTimestamp\n+    private LocalDateTime createdAt;\n+\n+    @Column(name = \"updated_at\")\n+    @UpdateTimestamp\n+    private LocalDateTime updatedAt;\n+\n+    public Order(Cart_v2 cart, User user, String address) {\n+        this.items = new ArrayList<>();\n+        this.user = user;\n+        this.cost = cart.getTotalCost();\n+        this.totalQuantity = cart.getTotalQuantity();\n+        this.address = address;\n+        cart.getListItems().stream().forEach((orderItem) -> {\n+            orderItem.setOrder(this);\n+            items.add(orderItem);\n+        });\n+    }\n+\n+}"
  },
  {
    "sha": "042e929ba63235b80c8536b249567ade891c9afa",
    "filename": "src/main/java/hw/spring/market/model/OrderItem.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/OrderItem.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/OrderItem.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/model/OrderItem.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,66 @@\n+package hw.spring.market.model;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+import javax.persistence.*;\n+import java.time.LocalDateTime;\n+\n+@Entity\n+@NoArgsConstructor\n+@Data\n+@Table (name = \"order_items_tbl\")\n+public class OrderItem {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name = \"order_item_id\")\n+    private Long id;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"order_id\")\n+    private Order order;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"product_id\")\n+    private Product product;\n+\n+    @Column(name = \"quantity_fld\")\n+    private int quantity;\n+\n+    @Column(name = \"price_fld\")\n+    private int price;\n+\n+    @Column(name = \"cost_fld\")\n+    private int cost;\n+\n+    @Column(name = \"created_at\")\n+    @CreationTimestamp\n+    private LocalDateTime createdAt;\n+\n+    @Column(name = \"updated_at\")\n+    @UpdateTimestamp\n+    private LocalDateTime updatedAt;\n+\n+\n+    public OrderItem(Product product) {\n+        this.product = product;\n+        this.quantity = 1;\n+        this.price = product.getPrice();\n+        this.cost = price;\n+    }\n+\n+    public void incQuantity() {\n+        quantity++;\n+        cost = quantity * price;\n+    }\n+\n+    public void decQuantity() {\n+        if (quantity > 0) {\n+            quantity--;\n+            cost = quantity * price;\n+        }\n+    }\n+}"
  },
  {
    "sha": "5886c501c7aa048bbf7782940e423fa9ac33056b",
    "filename": "src/main/java/hw/spring/market/model/Product.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/Product.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/Product.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/model/Product.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -2,8 +2,11 @@\n \n import lombok.Data;\n import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n \n import javax.persistence.*;\n+import java.time.LocalDateTime;\n \n @Entity\n @Data\n@@ -21,4 +24,12 @@\n \n     @Column(name = \"price_fld\")\n     private int price;\n+\n+    @Column(name = \"created_at\")\n+    @CreationTimestamp\n+    private LocalDateTime createdAt;\n+\n+    @Column(name = \"updated_at\")\n+    @UpdateTimestamp\n+    private LocalDateTime updatedAt;\n }"
  },
  {
    "sha": "040b62aad8e5bb7803458da0579d8cdd7ed70b44",
    "filename": "src/main/java/hw/spring/market/model/Role.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/Role.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/Role.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/model/Role.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,33 @@\n+package hw.spring.market.model;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+import javax.persistence.*;\n+import java.time.LocalDateTime;\n+\n+@Entity\n+@Data\n+@NoArgsConstructor\n+@Table(name = \"roles_tbl\")\n+public class Role {\n+\n+    @Id\n+    @GeneratedValue (strategy = GenerationType.IDENTITY)\n+    @Column(name = \"role_id\")\n+    private Long id;\n+\n+    @Column(name = \"name_fld\")\n+    private String nameRole;\n+\n+    @CreationTimestamp\n+    @Column (name = \"created_at\")\n+    private LocalDateTime createdAt;\n+\n+    @UpdateTimestamp\n+    @Column (name = \"updated_at\")\n+    private LocalDateTime updatedAt;\n+\n+}"
  },
  {
    "sha": "a6feb4aed226501c514a82c253a87f638b4776e3",
    "filename": "src/main/java/hw/spring/market/model/User.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/User.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/model/User.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/model/User.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,48 @@\n+package hw.spring.market.model;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.CreationTimestamp;\n+import org.hibernate.annotations.UpdateTimestamp;\n+\n+import javax.persistence.*;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.List;\n+\n+@Entity\n+@Data\n+@NoArgsConstructor\n+@Table (name = \"users_tbl\")\n+public class User {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column (name = \"user_id\")\n+    private Long id;\n+\n+    @Column (name = \"username_fld\")\n+    private String username;\n+\n+    @Column (name = \"password_fld\")\n+    private String pass;\n+\n+    @Column (name = \"email_fld\")\n+    private String email;\n+\n+    @CreationTimestamp\n+    @Column (name = \"created_at\")\n+    private LocalDateTime createdAt;\n+\n+    @UpdateTimestamp\n+    @Column (name = \"updated_at\")\n+    private LocalDateTime updatedAt;\n+\n+    @ManyToMany\n+    @JoinTable (name = \"users_roles_tbl\", joinColumns = @JoinColumn (name = \"user_id\"),\n+                inverseJoinColumns = @JoinColumn (name = \"role_id\"))\n+    private Collection<Role> roles;\n+\n+    @OneToMany(mappedBy = \"user\") // обратку связь можно делать, но не обязательно. только если часто надо пользоваться\n+    private List<Order> orders;\n+}"
  },
  {
    "sha": "769e7f4ec326a2d94bdb0752c291ef01d54ca8e8",
    "filename": "src/main/java/hw/spring/market/repository/OrderRepository.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/LSSprog/Spring_p1_Market/blob/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/repository/OrderRepository.java",
    "raw_url": "https://github.com/LSSprog/Spring_p1_Market/raw/5e4370b28a01c0432140ef26bb88abfc0395230c/src/main/java/hw/spring/market/repository/OrderRepository.java",
    "contents_url": "https://api.github.com/repos/LSSprog/Spring_p1_Market/contents/src/main/java/hw/spring/market/repository/OrderRepository.java?ref=5e4370b28a01c0432140ef26bb88abfc0395230c",
    "patch": "@@ -0,0 +1,12 @@\n+package hw.spring.market.repository;\n+\n+import hw.spring.market.model.Order;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+\n+@Repository\n+public interface OrderRepository extends JpaRepository<Order, Long> {\n+    List<Order> findAllByUserUsername(String username);\n+}"
  }
]
