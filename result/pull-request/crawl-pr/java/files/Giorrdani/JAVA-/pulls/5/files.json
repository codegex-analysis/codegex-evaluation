[
  {
    "sha": "26afd9ecb89c06a92f57bedf2e8c72a975deb4f9",
    "filename": "Main.java",
    "status": "removed",
    "additions": 0,
    "deletions": 79,
    "changes": 79,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/Main.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/Main.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/Main.java?ref=08ca9e3322fd8c811de508a3ef9b5fc3670f6531",
    "patch": "@@ -1,79 +0,0 @@\n-public class Main {\r\n-\r\n-  public static void main(String[] args) {\r\n-    func1();\r\n-    func2();\r\n-  }\r\n-\r\n-  public static void func1() {\r\n-    System.out.println(\"Метод 1 начат...\");\r\n-    final int size = 10000;\r\n-    float[] arr = new float[size];\r\n-\r\n-    for (int i = 0; i < arr.length; i++) {\r\n-      arr[i] = 1;\r\n-    }\r\n-    long a = System.currentTimeMillis();\r\n-    for (int i = 0; i < arr.length; i++) {\r\n-      arr[i] = (float) (arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\r\n-    }\r\n-    System.out.println((System.currentTimeMillis() - a) + \"/мс - время выполнения метода 1 \");\r\n-    System.out.println(\"Метод 1 завершен!\" + \"\\n\");\r\n-  }\r\n-\r\n-  public static void func2() {\r\n-      System.out.println(\"Метод 2 начат...\");\r\n-      final int size = 10000000;\r\n-      final int h = size / 2;\r\n-      float[] arr = new float[size];\r\n-      float[] a1 = new float[h];\r\n-      float[] a2 = new float[h];\r\n-\r\n-      for (int i = 0; i < arr.length; i++) {\r\n-        arr[i] = 1;\r\n-      }\r\n-\r\n-      long b = System.currentTimeMillis();\r\n-      System.arraycopy(arr, 0, a1, 0, h);\r\n-      System.arraycopy(arr, h, a2, 0, h);\r\n-      System.out.println(System.currentTimeMillis() - b + \"/мс - время разделение массива\");\r\n-\r\n-      Thread thread1 = new Thread(() -> {\r\n-        long c = System.currentTimeMillis();\r\n-        for (int i = 0; i < a1.length; i++) {\r\n-          a1[i] = (float) (a1[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\r\n-        }\r\n-        System.out.println(System.currentTimeMillis() - c + \"/мс  - время расчета первого массива\");\r\n-      });\r\n-\r\n-      Thread thread2 = new Thread(() -> {\r\n-        long d = System.currentTimeMillis();\r\n-        for (int i = 0; i < a2.length; i++) {\r\n-          a2[i] = (float) (a2[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\r\n-        }\r\n-        System.out.println(System.currentTimeMillis() - d + \"/мс - время расчета второго массива\");\r\n-      });\r\n-\r\n-      Thread splice = new Thread(()-> {\r\n-          long e = System.currentTimeMillis();\r\n-          System.arraycopy(a1, 0, arr, 0, h);\r\n-          System.arraycopy(a2, 0, arr, h, h);\r\n-          System.out.println(System.currentTimeMillis() - e + \"/мс - время склейки массивов\");\r\n-        });\r\n-\r\n-      thread1.start();\r\n-      thread2.start();\r\n-\r\n-      try {\r\n-      thread1.join();\r\n-      thread2.join();\r\n-    } catch (InterruptedException exception) {\r\n-      exception.printStackTrace();\r\n-    }\r\n-    \r\n-      splice.start();\r\n-\r\n-  }\r\n-}\r\n-\r\n-\r"
  },
  {
    "sha": "ef1e8545c643a7e19faf2212830dcbf8baa83711",
    "filename": "MyAverage.java",
    "status": "removed",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MyAverage.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MyAverage.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/MyAverage.java?ref=08ca9e3322fd8c811de508a3ef9b5fc3670f6531",
    "patch": "@@ -1,5 +0,0 @@\n-import java.util.List;\n-@FunctionalInterface\n-public interface MyAverage {\n-    Double average(List<Integer> list);\n-}"
  },
  {
    "sha": "f836dfc556659e6cc6c6b05ee9de668e69c92234",
    "filename": "MyMax.java",
    "status": "removed",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MyMax.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MyMax.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/MyMax.java?ref=08ca9e3322fd8c811de508a3ef9b5fc3670f6531",
    "patch": "@@ -1,5 +0,0 @@\n-@FunctionalInterface\n-public interface MyMax {\n-    Integer maximum(Integer[] list);\n-\n-}"
  },
  {
    "sha": "7ab308e1408930c3bef3d43c5c52fa2881664eb7",
    "filename": "MyRevers.java",
    "status": "removed",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MyRevers.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MyRevers.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/MyRevers.java?ref=08ca9e3322fd8c811de508a3ef9b5fc3670f6531",
    "patch": "@@ -1,4 +0,0 @@\n-@FunctionalInterface\n-public interface MyRevers {\n-    String reverse(String s);\n-}"
  },
  {
    "sha": "414efe32e493831d201328d0033984853cb4e02b",
    "filename": "MySearch.java",
    "status": "removed",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MySearch.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MySearch.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/MySearch.java?ref=08ca9e3322fd8c811de508a3ef9b5fc3670f6531",
    "patch": "@@ -1,4 +0,0 @@\n-@FunctionalInterface\n-public interface MySearch {\n-    int search(Integer n, Integer[] list);\n-}"
  },
  {
    "sha": "56a367eee8e52ef3b855b4b5ccd53c228a2dcd8a",
    "filename": "MySearchString.java",
    "status": "removed",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MySearchString.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/08ca9e3322fd8c811de508a3ef9b5fc3670f6531/MySearchString.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/MySearchString.java?ref=08ca9e3322fd8c811de508a3ef9b5fc3670f6531",
    "patch": "@@ -1,5 +0,0 @@\n-import java.util.List;\n-@FunctionalInterface\n-public interface MySearchString {\n-    public List<String> search (List<String> list);\n-}"
  },
  {
    "sha": "3ffa8a44619411612ee3f5a21a8e603b9392bfdd",
    "filename": "clientside/Three/EchoClient.java",
    "status": "added",
    "additions": 162,
    "deletions": 0,
    "changes": 162,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/clientside/Three/EchoClient.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/clientside/Three/EchoClient.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/clientside/Three/EchoClient.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,162 @@\n+package clientside.Three;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final static String IP_ADDRESS = \"localhost\"; //127.0.0.1 ip address\n+    private final static int SERVER_PORT = 8081;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+\n+    private boolean isAuthorized;\n+\n+    public EchoClient() {\n+        try {\n+            connection();\n+        } catch (IOException ignored) {\n+            ignored.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> {\n+            new EchoClient();\n+        });\n+    }\n+\n+    public boolean isAuthorized() {\n+        return isAuthorized;\n+    }\n+\n+    public void setAuthorized(boolean authorized) {\n+        isAuthorized = authorized;\n+    }\n+\n+    private void connection() throws IOException {\n+        socket = new Socket(IP_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        setAuthorized(false);\n+        Thread thread = new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.startsWith(\"/authok\")) {\n+                        setAuthorized(true);\n+                        chatArea.append(serverMessage + \"\\n\");\n+                        break;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+                while (true) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.equals(\"/q\")) {\n+                        break;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+            } catch (IOException ignored) {\n+                ignored.printStackTrace();\n+            }\n+            closeConnection();\n+        });\n+        //thread.setDaemon(true);\n+        thread.start();\n+    }\n+\n+    private void sendMessageToServer() {\n+        if (!msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                String messageToServer = msgInputField.getText();\n+                dos.writeUTF(messageToServer);\n+                msgInputField.setText(\"\");\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+\n+    public void prepareGUI() {\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setResizable(false);\n+\n+        chatArea = new JTextArea();\n+        chatArea.setPreferredSize( new Dimension(390, 500));\n+        chatArea.setEnabled(false);\n+        chatArea.setBackground(new Color(15, 200, 150));\n+        chatArea.setFont(new Font(\"Century Gothic\", Font.PLAIN, 20));\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        chatArea.setDisabledTextColor(Color.WHITE);\n+\n+\n+\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+\n+        btnSendMsg.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        msgInputField.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/q\");\n+                } catch (IOException ignored) {\n+                }\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    private void closeConnection() {\n+\n+        try {\n+            dos.flush();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dos.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f07cc35c14f670224e5c52b4a8870e1bdf0702da",
    "filename": "clientside/Two/EchoClient.java",
    "status": "added",
    "additions": 162,
    "deletions": 0,
    "changes": 162,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/clientside/Two/EchoClient.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/clientside/Two/EchoClient.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/clientside/Two/EchoClient.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,162 @@\n+package clientside.Two;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final static String IP_ADDRESS = \"localhost\"; //127.0.0.1 ip address\n+    private final static int SERVER_PORT = 8081;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+\n+    private boolean isAuthorized;\n+\n+    public EchoClient() {\n+        try {\n+            connection();\n+        } catch (IOException ignored) {\n+            ignored.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> {\n+            new EchoClient();\n+        });\n+    }\n+\n+    public boolean isAuthorized() {\n+        return isAuthorized;\n+    }\n+\n+    public void setAuthorized(boolean authorized) {\n+        isAuthorized = authorized;\n+    }\n+\n+    private void connection() throws IOException {\n+        socket = new Socket(IP_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        setAuthorized(false);\n+        Thread thread = new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.startsWith(\"/authok\")) {\n+                        setAuthorized(true);\n+                        chatArea.append(serverMessage + \"\\n\");\n+                        break;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+                while (true) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.equals(\"/q\")) {\n+                        break;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+            } catch (IOException ignored) {\n+                ignored.printStackTrace();\n+            }\n+            closeConnection();\n+        });\n+        //thread.setDaemon(true);\n+        thread.start();\n+    }\n+\n+    private void sendMessageToServer() {\n+        if (!msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                String messageToServer = msgInputField.getText();\n+                dos.writeUTF(messageToServer);\n+                msgInputField.setText(\"\");\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+\n+    public void prepareGUI() {\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setResizable(false);\n+\n+        chatArea = new JTextArea();\n+        chatArea.setPreferredSize( new Dimension(390, 500));\n+        chatArea.setEnabled(false);\n+        chatArea.setBackground(new Color(15, 200, 150));\n+        chatArea.setFont(new Font(\"Century Gothic\", Font.PLAIN, 20));\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        chatArea.setDisabledTextColor(Color.WHITE);\n+\n+\n+\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+\n+        btnSendMsg.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        msgInputField.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/q\");\n+                } catch (IOException ignored) {\n+                }\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    private void closeConnection() {\n+\n+        try {\n+            dos.flush();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dos.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d75d8fe43d5f6d06218a74de5ca28d57bb89d3f9",
    "filename": "clientside/one/EchoClient.java",
    "status": "added",
    "additions": 175,
    "deletions": 0,
    "changes": 175,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/clientside/one/EchoClient.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/clientside/one/EchoClient.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/clientside/one/EchoClient.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,175 @@\n+package clientside.one;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class EchoClient extends JFrame {\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> {\n+            new EchoClient();\n+        });\n+    }\n+\n+    private final static String IP_ADDRESS = \"localhost\"; //127.0.0.1 ip address\n+    private final static int SERVER_PORT = 8081;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+    private static boolean timer = true;\n+\n+    private boolean isAuthorized;\n+\n+    public EchoClient() {\n+        try {\n+            connection();\n+        } catch (IOException ignored) {\n+            ignored.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public boolean isAuthorized() {\n+        return isAuthorized;\n+    }\n+\n+    public void setAuthorized(boolean authorized) {\n+        isAuthorized = authorized;\n+    }\n+\n+    private void connection() throws IOException {\n+        socket = new Socket(IP_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        setAuthorized(false);\n+        Thread thread = new Thread(() -> {\n+            try {\n+                new Thread(() -> {\n+                    long timeMillis = System.currentTimeMillis();\n+                    while (timer) {\n+                        if (System.currentTimeMillis() - timeMillis >= 10000 && isAuthorized == false) {\n+                            System.out.println(\"Time authorized is end\");\n+                            closeConnection();\n+                            timer = false;\n+                            break;\n+                        }\n+                    }\n+                }).start();\n+                while (true) {\n+                    try {\n+                        String serverMessage = dis.readUTF();\n+                        if (serverMessage.startsWith(\"/auth ok - \")) {\n+                            setAuthorized(true);\n+                            chatArea.append(serverMessage + \"\\n\");\n+                            break;\n+                        }\n+                        chatArea.append(serverMessage + \"\\n\");\n+                    } catch (IOException ignored) {\n+                    }\n+                }\n+                while (true) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.equals(\"/q\")) {\n+                        break;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+            } catch (IOException ignored) {\n+                ignored.printStackTrace();\n+            }\n+            closeConnection();\n+        });\n+        thread.start();\n+    }\n+\n+    private void sendMessageToServer() {\n+        if (!msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                String messageToServer = msgInputField.getText();\n+                dos.writeUTF(messageToServer);\n+                msgInputField.setText(\"\");\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+\n+    public void prepareGUI() {\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setResizable(false);\n+\n+        chatArea = new JTextArea();\n+        chatArea.setPreferredSize( new Dimension(390, 500));\n+        chatArea.setEnabled(false);\n+        chatArea.setBackground(new Color(15, 200, 150));\n+        chatArea.setFont(new Font(\"Century Gothic\", Font.PLAIN, 20));\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        chatArea.setDisabledTextColor(Color.WHITE);\n+\n+\n+\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+\n+        btnSendMsg.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        msgInputField.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/q\");\n+                } catch (IOException ignored) {\n+                }\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+        private void closeConnection() {\n+        try {\n+            dos.flush();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dos.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+}"
  },
  {
    "sha": "3659a999fe8179c53e4cc8564156de932505810d",
    "filename": "serverside/interfaces/AuthenticationService.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/interfaces/AuthenticationService.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/interfaces/AuthenticationService.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/interfaces/AuthenticationService.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,7 @@\n+package serverside.interfce;\n+\n+public interface AuthenticationService {\n+    void start();\n+    void stop();\n+    String getNickByLoginAndPassword(String login, String password);\n+}"
  },
  {
    "sha": "3659a999fe8179c53e4cc8564156de932505810d",
    "filename": "serverside/interfce/AuthenticationService.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/interfce/AuthenticationService.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/interfce/AuthenticationService.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/interfce/AuthenticationService.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,7 @@\n+package serverside.interfce;\n+\n+public interface AuthenticationService {\n+    void start();\n+    void stop();\n+    String getNickByLoginAndPassword(String login, String password);\n+}"
  },
  {
    "sha": "931b2dc0ba00ca2481b7875a16c2b46631e657be",
    "filename": "serverside/service/AuthenticationServiceImpl.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/service/AuthenticationServiceImpl.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/service/AuthenticationServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/service/AuthenticationServiceImpl.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,60 @@\n+package serverside.service;\n+\n+import serverside.interfce.AuthenticationService;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class AuthenticationServiceImpl implements AuthenticationService {\n+\n+    private List<User> usersList;\n+\n+    public AuthenticationServiceImpl() {\n+        usersList = new ArrayList<>();\n+        usersList.add(new User(\"A\", \"A\", \"A\"));\n+        usersList.add(new User(\"B\", \"B\", \"B\"));\n+        usersList.add(new User(\"C\", \"C\", \"C\"));\n+\n+    }\n+\n+    @Override\n+    public void start() {\n+        System.out.println(\"start\");\n+    }\n+\n+    @Override\n+    public void stop() {\n+        System.out.println(\"stop\");\n+    }\n+\n+    @Override\n+    public String getNickByLoginAndPassword(String login, String password) {\n+        /*for (User u : usersList){\n+            if (u.login.equals(login) && u.password.equals(password)){\n+                return u.nick;\n+            }\n+          }\n+            return null;\n+        }*/\n+        return usersList.stream()\n+                .map(a  -> {\n+                   if (a.login.equals(login) && a.password.equals(password)){\n+                       return a.nick;\n+                   }\n+                   return \"\";\n+                }).collect(Collectors.joining());\n+    }\n+\n+    private class User {\n+        private String login;\n+        private String password;\n+        private String nick;\n+\n+        public User(String login, String password, String nick){\n+            this.login = login;\n+            this.password = password;\n+            this.nick = nick;\n+        }\n+    }\n+}"
  },
  {
    "sha": "2f05fe92b29066008a8f92f677cf9180aafef0fe",
    "filename": "serverside/service/ClientHandler.java",
    "status": "added",
    "additions": 103,
    "deletions": 0,
    "changes": 103,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/service/ClientHandler.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/service/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/service/ClientHandler.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,103 @@\n+package serverside.service;\n+\n+import clientside.one.EchoClient;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class ClientHandler {\n+\n+    private MyServer myServer;\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+    private EchoClient client;\n+\n+    private String name;\n+\n+    public ClientHandler(MyServer myServer, Socket socket) {\n+        try {\n+            this.myServer = myServer;\n+            this.socket = socket;\n+            this.dis = new DataInputStream(socket.getInputStream());\n+            this.dos = new DataOutputStream(socket.getOutputStream());\n+            this.name = \"\";\n+\n+            new Thread(() -> {\n+                try {\n+                    authentication();\n+                    readMessage();\n+                } catch (IOException e) {\n+                    System.out.println(e.getMessage());\n+                } finally {\n+                    closeConnection();\n+                }\n+\n+            }).start();\n+        } catch (IOException e) {\n+            System.out.println(\"Server problem\");\n+        }\n+    }\n+\n+    private void authentication() throws IOException {\n+        while (true) {\n+            String authStr = dis.readUTF();\n+            if (authStr.startsWith(\"/auth\")) {\n+                String[] arr = authStr.split(\"\\\\s\");\n+                String nick = myServer\n+                        .getAuthService()\n+                        .getNickByLoginAndPassword(arr[1], arr[2]);\n+                if (!nick.isEmpty()) {\n+                    if (!myServer.isNickBusy(nick)) {\n+                        sendMessage(\"/auth ok - \" + nick);\n+                        name = nick;\n+                        myServer.sendMessageToClients(nick + \" Joined to chat\");\n+                        myServer.subscribe(this);\n+                        return;\n+                    } else {\n+                        sendMessage(name + \" is busy\");\n+                    }\n+                } else {\n+                    sendMessage(\"Wrong login/password\");\n+                }\n+            }\n+        }\n+    }\n+\n+    public void sendMessage(String message) {\n+        try {\n+            dos.writeUTF(message);\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    private void readMessage() throws IOException {\n+        while (true) {\n+            String messageFromClient = dis.readUTF();\n+                if (messageFromClient.startsWith(\"/w\")) {\n+                    String[] arr = messageFromClient.split(\"\\\\s\", 3);\n+                    myServer.sendMessageToOneClient(this, arr[1], arr[2]);\n+                    continue;\n+                }\n+\n+                if (messageFromClient.equals(\"/q\")) {\n+                    sendMessage(messageFromClient);\n+                    return;\n+                }\n+            myServer.sendMessageToClients(name + \": \" + messageFromClient);\n+        }\n+    }\n+\n+    private void closeConnection() {\n+        myServer.unSubscribe(this);\n+        //if (client.isAuthorized() != false) {\n+        myServer.sendMessageToClients(name + \" leave chat\");\n+        //}\n+        }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b6b01b90d7e00459425e302ff8ef3a708f241840",
    "filename": "serverside/service/MainServerApp.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/service/MainServerApp.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/service/MainServerApp.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/service/MainServerApp.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,7 @@\n+package serverside.service;\n+\n+public class MainServerApp {\n+    public static void main(String[] args) {\n+        new MyServer();\n+    }\n+}"
  },
  {
    "sha": "01cf9e3a975dba6af36d9bc75b454303820e5141",
    "filename": "serverside/service/MyServer.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/service/MyServer.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/service/MyServer.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/service/MyServer.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,77 @@\n+package serverside.service;\n+\n+import serverside.interfce.AuthenticationService;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyServer {\n+\n+    private final int PORT = 8081;\n+\n+    private List<ClientHandler> clientsList;\n+    private AuthenticationService authService;\n+\n+    public AuthenticationService getAuthService() {\n+        return this.authService;\n+    }\n+\n+    public MyServer() {\n+\n+        try (ServerSocket serverSocket = new ServerSocket(PORT)) {\n+            this.authService = new AuthenticationServiceImpl();\n+            authService.start();\n+            clientsList = new ArrayList<>();\n+\n+            while (true) {\n+                Socket socket = serverSocket.accept();\n+                new ClientHandler(this, socket);\n+            }\n+        } catch (IOException e) {\n+            System.out.println(e.getMessage());\n+        } finally {\n+            if (authService != null) {\n+                authService.stop();\n+            }\n+        }\n+    }\n+\n+    public synchronized void sendMessageToClients(String message) {\n+            for (ClientHandler c : clientsList) {\n+                c.sendMessage(message);\n+            }\n+    }\n+\n+    public void sendMessageToOneClient (ClientHandler clientHandler, String nick, String message) {\n+        for(ClientHandler c : clientsList){\n+            if (c.getName().equalsIgnoreCase(nick)){\n+                c.sendMessage(\"PM from \" + clientHandler.getName() + \": \" + message);\n+                clientHandler.sendMessage(\"PM for \" + nick + \": \" + message);\n+            }\n+        }\n+    }\n+\n+    public synchronized void subscribe(ClientHandler c) {\n+        clientsList.add(c);\n+    }\n+\n+    public synchronized void unSubscribe(ClientHandler c) {\n+        clientsList.remove(c);\n+    }\n+\n+    public synchronized boolean isNickBusy(String nick) {\n+        /*for (ClientHandler c : clientsList) {\n+            if (c.getName().equals(nick)) {\n+                return true;\n+            }\n+        }\n+        return false;*/\n+        return clientsList.stream()\n+                .anyMatch(a -> a.getName().equals(nick));\n+    }\n+\n+\n+}"
  },
  {
    "sha": "931b2dc0ba00ca2481b7875a16c2b46631e657be",
    "filename": "serverside/services/AuthenticationServiceImpl.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/services/AuthenticationServiceImpl.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/services/AuthenticationServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/services/AuthenticationServiceImpl.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,60 @@\n+package serverside.service;\n+\n+import serverside.interfce.AuthenticationService;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class AuthenticationServiceImpl implements AuthenticationService {\n+\n+    private List<User> usersList;\n+\n+    public AuthenticationServiceImpl() {\n+        usersList = new ArrayList<>();\n+        usersList.add(new User(\"A\", \"A\", \"A\"));\n+        usersList.add(new User(\"B\", \"B\", \"B\"));\n+        usersList.add(new User(\"C\", \"C\", \"C\"));\n+\n+    }\n+\n+    @Override\n+    public void start() {\n+        System.out.println(\"start\");\n+    }\n+\n+    @Override\n+    public void stop() {\n+        System.out.println(\"stop\");\n+    }\n+\n+    @Override\n+    public String getNickByLoginAndPassword(String login, String password) {\n+        /*for (User u : usersList){\n+            if (u.login.equals(login) && u.password.equals(password)){\n+                return u.nick;\n+            }\n+          }\n+            return null;\n+        }*/\n+        return usersList.stream()\n+                .map(a  -> {\n+                   if (a.login.equals(login) && a.password.equals(password)){\n+                       return a.nick;\n+                   }\n+                   return \"\";\n+                }).collect(Collectors.joining());\n+    }\n+\n+    private class User {\n+        private String login;\n+        private String password;\n+        private String nick;\n+\n+        public User(String login, String password, String nick){\n+            this.login = login;\n+            this.password = password;\n+            this.nick = nick;\n+        }\n+    }\n+}"
  },
  {
    "sha": "b1422e62eca4c0f1582d89e2ba35819f1404d917",
    "filename": "serverside/services/ClientHandler.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/services/ClientHandler.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/services/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/services/ClientHandler.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,98 @@\n+package serverside.service;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class ClientHandler {\n+\n+    private MyServer myServer;\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+\n+    private String name;\n+\n+    public ClientHandler(MyServer myServer, Socket socket) {\n+        try {\n+            this.myServer = myServer;\n+            this.socket = socket;\n+            this.dis = new DataInputStream(socket.getInputStream());\n+            this.dos = new DataOutputStream(socket.getOutputStream());\n+            this.name = \"\";\n+\n+            new Thread(() -> {\n+                try {\n+                    authentication();\n+                    readMessage();\n+                } catch (IOException e) {\n+                    System.out.println(e.getMessage());\n+                } finally {\n+                    closeConnection();\n+                }\n+\n+            }).start();\n+        } catch (IOException e) {\n+            System.out.println(\"Server problem\");\n+        }\n+    }\n+\n+    private void authentication() throws IOException {\n+        while (true) {\n+            String authStr = dis.readUTF();\n+            if (authStr.startsWith(\"/auth\")) {\n+                String[] arr = authStr.split(\"\\\\s\");\n+                String nick = myServer\n+                        .getAuthService()\n+                        .getNickByLoginAndPassword(arr[1], arr[2]);\n+                if (!nick.isEmpty()) {\n+                    if (!myServer.isNickBusy(nick)) {\n+                        sendMessage(\"/authok \" + nick);\n+                        name = nick;\n+                        myServer.sendMessageToClients(nick + \" Joined to chat\");\n+                        myServer.subscribe(this);\n+                        return;\n+                    } else {\n+                        sendMessage(name + \" is busy\");\n+                    }\n+                } else {\n+                    sendMessage(\"Wrong login/password\");\n+                }\n+            }\n+        }\n+    }\n+\n+    public void sendMessage(String message) {\n+        try {\n+            dos.writeUTF(message);\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    private void readMessage() throws IOException {\n+        while (true) {\n+            String messageFromClient = dis.readUTF();\n+                if (messageFromClient.startsWith(\"/w\")) {\n+                    String[] arr = messageFromClient.split(\"\\\\s\", 3);\n+                    myServer.sendMessageToOneClient(this, arr[1], arr[2]);\n+                    continue;\n+                }\n+\n+                if (messageFromClient.equals(\"/q\")) {\n+                    sendMessage(messageFromClient);\n+                    return;\n+                }\n+            myServer.sendMessageToClients(name + \": \" + messageFromClient);\n+        }\n+    }\n+\n+    private void closeConnection() {\n+        myServer.unSubscribe(this);\n+        myServer.sendMessageToClients(name + \" leave chat\");\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b6b01b90d7e00459425e302ff8ef3a708f241840",
    "filename": "serverside/services/MainServerApp.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/services/MainServerApp.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/services/MainServerApp.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/services/MainServerApp.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,7 @@\n+package serverside.service;\n+\n+public class MainServerApp {\n+    public static void main(String[] args) {\n+        new MyServer();\n+    }\n+}"
  },
  {
    "sha": "01cf9e3a975dba6af36d9bc75b454303820e5141",
    "filename": "serverside/services/MyServer.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/Giorrdani/JAVA-/blob/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/services/MyServer.java",
    "raw_url": "https://github.com/Giorrdani/JAVA-/raw/a205ab48acaa2fa627f466bbfd567d83f9c5e295/serverside/services/MyServer.java",
    "contents_url": "https://api.github.com/repos/Giorrdani/JAVA-/contents/serverside/services/MyServer.java?ref=a205ab48acaa2fa627f466bbfd567d83f9c5e295",
    "patch": "@@ -0,0 +1,77 @@\n+package serverside.service;\n+\n+import serverside.interfce.AuthenticationService;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyServer {\n+\n+    private final int PORT = 8081;\n+\n+    private List<ClientHandler> clientsList;\n+    private AuthenticationService authService;\n+\n+    public AuthenticationService getAuthService() {\n+        return this.authService;\n+    }\n+\n+    public MyServer() {\n+\n+        try (ServerSocket serverSocket = new ServerSocket(PORT)) {\n+            this.authService = new AuthenticationServiceImpl();\n+            authService.start();\n+            clientsList = new ArrayList<>();\n+\n+            while (true) {\n+                Socket socket = serverSocket.accept();\n+                new ClientHandler(this, socket);\n+            }\n+        } catch (IOException e) {\n+            System.out.println(e.getMessage());\n+        } finally {\n+            if (authService != null) {\n+                authService.stop();\n+            }\n+        }\n+    }\n+\n+    public synchronized void sendMessageToClients(String message) {\n+            for (ClientHandler c : clientsList) {\n+                c.sendMessage(message);\n+            }\n+    }\n+\n+    public void sendMessageToOneClient (ClientHandler clientHandler, String nick, String message) {\n+        for(ClientHandler c : clientsList){\n+            if (c.getName().equalsIgnoreCase(nick)){\n+                c.sendMessage(\"PM from \" + clientHandler.getName() + \": \" + message);\n+                clientHandler.sendMessage(\"PM for \" + nick + \": \" + message);\n+            }\n+        }\n+    }\n+\n+    public synchronized void subscribe(ClientHandler c) {\n+        clientsList.add(c);\n+    }\n+\n+    public synchronized void unSubscribe(ClientHandler c) {\n+        clientsList.remove(c);\n+    }\n+\n+    public synchronized boolean isNickBusy(String nick) {\n+        /*for (ClientHandler c : clientsList) {\n+            if (c.getName().equals(nick)) {\n+                return true;\n+            }\n+        }\n+        return false;*/\n+        return clientsList.stream()\n+                .anyMatch(a -> a.getName().equals(nick));\n+    }\n+\n+\n+}"
  }
]
