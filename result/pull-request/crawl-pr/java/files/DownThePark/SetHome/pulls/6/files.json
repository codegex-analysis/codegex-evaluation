[
  {
    "sha": "6d7be082db13f4b0c3e3a98d30623a9fb9fb3b60",
    "filename": ".gitignore",
    "status": "added",
    "additions": 170,
    "deletions": 0,
    "changes": 170,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/.gitignore",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/.gitignore",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/.gitignore?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -0,0 +1,170 @@\n+/target/\n+!.mvn/wrapper/maven-wrapper.jar\n+\n+# User-specific stuff:\n+.idea/**/workspace.xml\n+.idea/**/tasks.xml\n+.idea/dictionaries\n+.idea/inspectionProfiles\n+\n+### STS ###\n+.apt_generated\n+.classpath\n+.factorypath\n+.project\n+.settings\n+.springBeans\n+.sts4-cache\n+\n+\n+# Created by https://www.gitignore.io/api/git,java,maven,eclipse,windows\n+\n+### Eclipse ###\n+\n+.metadata\n+bin/\n+tmp/\n+*.tmp\n+*.bak\n+*.swp\n+*~.nib\n+local.properties\n+.settings/\n+.loadpath\n+.recommenders\n+\n+# External tool builders\n+.externalToolBuilders/\n+\n+# Locally stored \"Eclipse launch configurations\"\n+*.launch\n+\n+# PyDev specific (Python IDE for Eclipse)\n+*.pydevproject\n+\n+# CDT-specific (C/C++ Development Tooling)\n+.cproject\n+\n+# CDT- autotools\n+.autotools\n+\n+# Java annotation processor (APT)\n+.factorypath\n+\n+# PDT-specific (PHP Development Tools)\n+.buildpath\n+\n+# sbteclipse plugin\n+.target\n+\n+# Tern plugin\n+.tern-project\n+\n+# TeXlipse plugin\n+.texlipse\n+\n+# STS (Spring Tool Suite)\n+.springBeans\n+\n+# Code Recommenders\n+.recommenders/\n+\n+# Annotation Processing\n+.apt_generated/\n+\n+# Scala IDE specific (Scala & Java development for Eclipse)\n+.cache-main\n+.scala_dependencies\n+.worksheet\n+\n+### Eclipse Patch ###\n+# Eclipse Core\n+.project\n+\n+# JDT-specific (Eclipse Java Development Tools)\n+.classpath\n+\n+# Annotation Processing\n+.apt_generated\n+\n+.sts4-cache/\n+\n+### Git ###\n+# Created by git for backups. To disable backups in Git:\n+# $ git config --global mergetool.keepBackup false\n+*.orig\n+\n+# Created by git when using merge tools for conflicts\n+*.BACKUP.*\n+*.BASE.*\n+*.LOCAL.*\n+*.REMOTE.*\n+*_BACKUP_*.txt\n+*_BASE_*.txt\n+*_LOCAL_*.txt\n+*_REMOTE_*.txt\n+\n+### Java ###\n+# Compiled class file\n+*.class\n+\n+# Log file\n+*.log\n+\n+# BlueJ files\n+*.ctxt\n+\n+# Mobile Tools for Java (J2ME)\n+.mtj.tmp/\n+\n+# Package Files #\n+*.jar\n+*.war\n+*.nar\n+*.ear\n+*.zip\n+*.tar.gz\n+*.rar\n+\n+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\n+hs_err_pid*\n+\n+### Maven ###\n+target/\n+pom.xml.tag\n+pom.xml.releaseBackup\n+pom.xml.versionsBackup\n+pom.xml.next\n+release.properties\n+dependency-reduced-pom.xml\n+buildNumber.properties\n+.mvn/timing.properties\n+.mvn/wrapper/maven-wrapper.jar\n+\n+### Windows ###\n+# Windows thumbnail cache files\n+Thumbs.db\n+ehthumbs.db\n+ehthumbs_vista.db\n+\n+# Dump file\n+*.stackdump\n+\n+# Folder config file\n+[Dd]esktop.ini\n+\n+# Recycle Bin used on file shares\n+$RECYCLE.BIN/\n+\n+# Windows Installer files\n+*.cab\n+*.msi\n+*.msix\n+*.msm\n+*.msp\n+\n+# Windows shortcuts\n+*.lnk\n+\n+\n+# End of https://www.gitignore.io/api/git,java,maven,eclipse,windows\n\\ No newline at end of file"
  },
  {
    "sha": "5c98b428844d9f7d529e2b6fb918d15bf072f3df",
    "filename": ".idea/.gitignore",
    "status": "removed",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72/.idea/.gitignore",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72/.idea/.gitignore",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/.idea/.gitignore?ref=87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72",
    "patch": "@@ -1,2 +0,0 @@\n-# Default ignored files\n-/workspace.xml\n\\ No newline at end of file"
  },
  {
    "sha": "ec1807bca21316c0831b8fdc8a66b85ac8a73fbf",
    "filename": ".idea/.name",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/.idea/.name",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/.idea/.name",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/.idea/.name?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -0,0 +1 @@\n+SetHome\n\\ No newline at end of file"
  },
  {
    "sha": "35c439d8b1898dd726ceab0746fb228b5c11f50b",
    "filename": ".idea/misc.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/.idea/misc.xml",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/.idea/misc.xml?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -8,7 +8,7 @@\n       </list>\n     </option>\n   </component>\n-  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_13\" project-jdk-name=\"13\" project-jdk-type=\"JavaSDK\">\n+  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8.0_211\" project-jdk-type=\"JavaSDK\">\n     <output url=\"file://$PROJECT_DIR$/out\" />\n   </component>\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "35eb1ddfbbc029bcab630581847471d7f238ec53",
    "filename": ".idea/vcs.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/.idea/vcs.xml",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/.idea/vcs.xml",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/.idea/vcs.xml?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project version=\"4\">\n   <component name=\"VcsDirectoryMappings\">\n-    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n+    <mapping directory=\"\" vcs=\"Git\" />\n   </component>\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "260eb61e7a2e6c78b7fa4b66861560ebe1b66f28",
    "filename": "README.md",
    "status": "modified",
    "additions": 22,
    "deletions": 1,
    "changes": 23,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/README.md",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/README.md",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/README.md?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -21,6 +21,27 @@ This is great for Survival servers that need something simple and lightweight. S\n - None required \n \n ### Extra Features:\n-- Respawn player to their home saved in \"Homes.yml\" (Can be disabled in 'config.yml' file)\n+- Respawn player to their home saved in \"Homes.yml\" on death (Can be disabled in 'config.yml' file)\n - Play an enderman sound when player teleports to their home (Can be disabled in 'config.yml' file)\n - Customize messages under the 'config.yml' file\n+- Switch between a warm up period and a cooldown for the /home command in the 'config.yml' file\n+- Automatically reload the config while the server is running\n+\n+### Changelog:  \n+\n+6.0.0:\n+- update api version to 16.5\n+- add config option to switch between the /home command having a cooldown vs. a warm up period.\n+- /sethome has a optional cooldown, which was removed in a previous version.\n+\n+6.1.0:\n+- fix /home warmup queing up multiple teleports when used in quick succession.\n+- the config option \"sethome-time-delay\" has been renamed to \"sethome-delay-seconds\", and \"home-time-delay\" to \"home-delay-seconds\".\n+- \"sethome-command-delay\" and \"home-command-delay\" have been removed from the config. Instead of setting those two to true or false, a delay of 0 is now treated as having no delay at all, in the same way a setting of false would have previously.\n+- old configs will be automatically converted on startup, properly carrying over their settings to the new config version.\n+- improved command and error messages.\n+\n+6.1.1:\n+- command cooldowns no longer rely on task scheduling, and instead simply track the last time a command was used.\n+- save player homes only every 5 minutes, and only if /sethome was executed during that time, and on server shutdown. Previously this was done every single time the /sethome command was called by anyone on the server.\n+- while the server is running, automatically reload the config file when it changes using an asynchronous task, and java.nio.file.WatchService."
  },
  {
    "sha": "78b2cc53b203f0b97534bb1184cdc7b474339fb4",
    "filename": "SetHome.iml",
    "status": "removed",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72/SetHome.iml",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72/SetHome.iml",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/SetHome.iml?ref=87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72",
    "patch": "@@ -1,2 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<module type=\"JAVA_MODULE\" version=\"4\" />\n\\ No newline at end of file"
  },
  {
    "sha": "abedf60d9fbbbb89cecf4ab5b96d7b34c3e8cffe",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/pom.xml",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/pom.xml",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/pom.xml?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -6,7 +6,7 @@\n \n     <groupId>me.downthepark</groupId>\n     <artifactId>SetHome</artifactId>\n-    <version>5.0</version>\n+    <version>6.1.1</version>\n \n     <repositories>\n         <!-- This adds the Spigot Maven repository to the build -->\n@@ -20,7 +20,7 @@\n         <dependency>\n             <groupId>org.spigotmc</groupId>\n             <artifactId>spigot-api</artifactId>\n-            <version>1.14.4-R0.1-SNAPSHOT</version>\n+            <version>1.16.5-R0.1-SNAPSHOT</version>\n             <scope>provided</scope>\n         </dependency>\n     </dependencies>"
  },
  {
    "sha": "c1de78cc051eac0647d01a8ad3a4aebd265d43f3",
    "filename": "src/main/java/me/downthepark/sethome/SetHome.java",
    "status": "modified",
    "additions": 356,
    "deletions": 138,
    "changes": 494,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/src/main/java/me/downthepark/sethome/SetHome.java",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/src/main/java/me/downthepark/sethome/SetHome.java",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/src/main/java/me/downthepark/sethome/SetHome.java?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -1,198 +1,416 @@\n package me.downthepark.sethome;\n \n-// --- Import Bukkit libraries\n-\n+import org.bukkit.Bukkit;\n import org.bukkit.ChatColor;\n+import org.bukkit.Location;\n import org.bukkit.Sound;\n import org.bukkit.command.Command;\n+import org.bukkit.command.CommandExecutor;\n import org.bukkit.command.CommandSender;\n-import org.bukkit.command.ConsoleCommandSender;\n import org.bukkit.configuration.file.FileConfiguration;\n import org.bukkit.configuration.file.YamlConfiguration;\n import org.bukkit.entity.Player;\n+import org.bukkit.plugin.Plugin;\n import org.bukkit.plugin.java.JavaPlugin;\n import org.bukkit.scheduler.BukkitRunnable;\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.*;\n import java.util.HashMap;\n import java.util.logging.Level;\n \n-// --- Import Java libraries\n-\n-// --- Beginning of SetHome class\n-public class SetHome extends JavaPlugin { // --- SetHome is a JavaPlugin (Bukkit plugin)\n-\n-    // --- Create private instance of 'Homes.yml' file\n-    private File file = new File(getDataFolder(), \"Homes.yml\");\n-    // --- Create package-private instance of 'Homes.yml' (configurable type)\n-    YamlConfiguration homes = YamlConfiguration.loadConfiguration(file);\n-\n-    // --- Create instance of config from Bukkit's getConfig() method. (kind of useless)\n-    private FileConfiguration config = getConfig();\n-\n-    private HashMap<Player, Integer> cooldownTimeHome;\n-    private HashMap<Player, BukkitRunnable> cooldownTaskHome;\n+public class SetHome extends JavaPlugin\n+{\n+    private FileConfiguration config    = getConfig();\n+    private File              homesFile = new File(getDataFolder(), \"Homes.yml\");\n+    private YamlConfiguration homes     = YamlConfiguration.loadConfiguration(homesFile);\n+    private boolean homesHasChanged     = false;\n+    private Plugin thisPlugin           = this;\n+    private Thread autoReloadThread;\n \n-    private HashMap<Player, Integer> cooldownTimeSetHome;\n-    private HashMap<Player, BukkitRunnable> cooldownTaskSetHome;\n+    private HashMap<Player, Long> lastUsedHome;\n+    private HashMap<Player, Long> lastUsedSetHome;\n \n-    // --- Create variable of String type that simplifies handling the error prefix for messages\n     private static final String prefixError = ChatColor.DARK_RED + \"[\" + ChatColor.RED + \"*\" + ChatColor.DARK_RED + \"] \" + ChatColor.GRAY;\n \n-    // --- Create instance of SetHomeUtils and pass in 'JavaPlugin' as parameter\n-    private SetHomeUtils utils = new SetHomeUtils(this);\n-\n-    // --- Function called onCommand() that is called by the server to get command information\n-    @Override\n-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n-\n-        // --- Check if command equals 'sethome'\n-        if (command.getName().equals(\"sethome\")) {\n-            // --- Check if the one sending the command is the Console\n-            if (sender instanceof ConsoleCommandSender) {\n-                // --- If the sender if Console, tell them to piss off\n-                getLogger().log(Level.WARNING, \"Only players can use this command.\");\n-\n-            } else if (sender instanceof Player) { // --- Check if the sender is a Player\n-                // --- If the sender is a player, continue below\n-                Player player = (Player) sender; // --- Create instance of Player and cast it to sender\n-\n-                if (config.getBoolean(\"sethome-command-delay\")) {\n-                    int coolDown = config.getInt(\"sethome-time-delay\");\n-                    if (cooldownTimeSetHome.containsKey(player)) {\n-                        player.sendMessage(prefixError + \"You must wait for \" + ChatColor.RED + cooldownTimeSetHome.get(player) + ChatColor.GRAY + \" seconds.\");\n-                    } else {\n-                        setPlayerHome(player);\n-                        setCoolDownTimeSetHome(player, coolDown);\n+    @Override // --- This is called by the server to get command information.\n+    public boolean\n+    onCommand(CommandSender sender, Command command, String label, String[] args)\n+    {\n+        boolean success = true;\n+        switch (command.getName())\n+        {\n+            case \"home\":\n+            {\n+                if (sender instanceof Player)\n+                {\n+                    Player player = (Player) sender;\n+                    if (homeIsSet(player))\n+                    {\n+                        int coolDownTime = config.getInt(\"home-delay-seconds\");\n+                        if (coolDownTime > 0)\n+                        {\n+                            double SecondsSinceLastUse = ((System.currentTimeMillis() - lastUsedHome.getOrDefault(player, 0L)) * 0.001);\n+                            if (SecondsSinceLastUse < coolDownTime) // Command is ON cooldown\n+                            {\n+                                int SecondsLeft = (int) (coolDownTime - SecondsSinceLastUse);\n+                                if (config.getBoolean(\"home-warmup-instead-of-cooldown\"))\n+                                {\n+                                    player.sendMessage(prefixError + \"Teleporting after \" + ChatColor.RED + SecondsLeft + ChatColor.GRAY + \" seconds...\");\n+                                }\n+                                else\n+                                {\n+                                    player.sendMessage(prefixError + \"You must wait for \" + ChatColor.RED + SecondsLeft + ChatColor.GRAY + \" seconds.\");\n+                                }\n+                            }\n+                            else // Command is OFF cooldown\n+                            {\n+                                if (config.getBoolean(\"home-warmup-instead-of-cooldown\"))\n+                                {\n+                                    getServer().getScheduler().scheduleSyncDelayedTask(this, () -> sendPlayerHome(player), 20L * coolDownTime);\n+                                    player.sendMessage(prefixError + \"Teleporting after \" + ChatColor.RED + coolDownTime + ChatColor.GRAY + \" seconds...\");\n+                                }\n+                                else\n+                                {\n+                                    sendPlayerHome(player);\n+                                }\n+                                lastUsedHome.put(player, System.currentTimeMillis());\n+                            }\n+                        }\n+                        else\n+                        {\n+                            sendPlayerHome(player);\n+                        }\n+                    }\n+                    else\n+                    {\n+                        player.sendMessage(prefixError + \"You must first use /sethome\");\n+                        success = false;\n                     }\n-                } else {\n-                    setPlayerHome(player);\n                 }\n-\n-\n-            } else { // --- If anything goes wrong, tell the sender there was some sort of error that took place\n-                sender.sendMessage(prefixError + \"There was an error performing this command.\");\n+                else // Command is unavailable from the console\n+                {\n+                    getLogger().log(Level.WARNING, \"Only players can use this command.\");\n+                    success = false;\n+                }\n+                break;\n             }\n-\n-        } else if (command.getName().equals(\"home\")) { // --- I think I'm gonna take a break with the comments for now.\n-\n-            if (sender instanceof ConsoleCommandSender) {\n-                getLogger().log(Level.WARNING, \"Only players can use this command.\");\n-            } else if (sender instanceof Player) {\n-\n-                Player player = (Player) sender;\n-\n-                if (utils.homeIsNull(player)) {\n-                    player.sendMessage(ChatColor.DARK_RED + \"[\" + ChatColor.RED + \"*\" + ChatColor.DARK_RED + \"] \" + ChatColor.GRAY + \"You must first use /sethome\");\n-                } else {\n-                    if (config.getBoolean(\"home-command-delay\")) {\n-                        int coolDown = config.getInt(\"home-time-delay\");\n-                        if (cooldownTimeHome.containsKey(player)) {\n-                            player.sendMessage(prefixError + \"You must wait for \" + ChatColor.RED + cooldownTimeHome.get(player) + ChatColor.GRAY + \" seconds.\");\n-                        } else {\n-                            sendPlayerHome(player);\n-                            setCoolDownTimeHome(player, coolDown);\n+            case \"sethome\":\n+            {\n+                if (sender instanceof Player)\n+                {\n+                    Player player = (Player) sender;\n+                    int coolDownTime = config.getInt(\"sethome-delay-seconds\");\n+                    if (coolDownTime > 0)\n+                    {\n+                        double SecondsSinceLastUse = ((System.currentTimeMillis() - lastUsedSetHome.getOrDefault(player, 0L)) * 0.001);\n+                        if (SecondsSinceLastUse < coolDownTime) // Command is ON cooldown\n+                        {\n+                            int SecondsLeft = (int) (coolDownTime - SecondsSinceLastUse);\n+                            player.sendMessage(prefixError + \"You must wait for \" + ChatColor.RED + SecondsLeft + ChatColor.GRAY + \" seconds.\");\n+                        }\n+                        else // Command is OFF cooldown\n+                        {\n+                            setPlayerHome(player);\n+                            lastUsedSetHome.put(player, System.currentTimeMillis());\n                         }\n-                    } else {\n-                        sendPlayerHome(player);\n+                    }\n+                    else\n+                    {\n+                        setPlayerHome(player);\n                     }\n                 }\n+                else // Command is unavailable from the console\n+                {\n+                    getLogger().log(Level.WARNING, \"Only players can use this command.\");\n+                    success = false;\n+                }\n+                break;\n+            }\n+            default:\n+            {\n+                getLogger().log(Level.WARNING, \"Unrecognized Command received.\");\n+                success = false;\n             }\n         }\n-\n-        return false;\n+        return success;\n     }\n \n-    public void onEnable() {\n-\n-        // --- Make commands work using this 'getCommand()' function\n-        getCommand(\"sethome\").setExecutor(this);\n-        getCommand(\"home\").setExecutor(this);\n-\n-        // --- Register plugin events to server\n+    @Override // Called when this plugin is enabled\n+    public void\n+    onEnable()\n+    {\n+        getCommand(\"sethome\").setExecutor((CommandExecutor)this);\n+        getCommand(\"home\"   ).setExecutor((CommandExecutor)this);\n         getServer().getPluginManager().registerEvents(new SetHomeEvents(this), this);\n-\n-        // --- Load configuration defaults and save file in data folder\n-        config.options().copyDefaults(true);\n+        // Load configuration and save file in data folder, and start config auto reloading task\n         saveDefaultConfig();\n-\n-        try {\n-            config.save(getDataFolder() + File.separator + \"config.yml\");\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        reloadConfig2();\n+        boolean foundOldConfig = convertFromOldConfig();\n+        if (foundOldConfig)\n+        {\n+            saveConfig();\n+            reloadConfig2();\n         }\n-\n-        // --- Check if 'Homes.yml' exists - if not, create a new one\n-        if (!file.exists()) {\n+        startAutoReloadConfigTask();\n+        // Save \"homes\" to disk, and set up a synchronous task to save every 5 minutes\n+        if (!homesFile.exists())\n+        {\n             saveHomesFile();\n         }\n-        cooldownTimeHome = new HashMap<>();\n-        cooldownTaskHome = new HashMap<>();\n+        new BukkitRunnable()\n+        {\n+            public void run()\n+            {\n+                if (homesHasChanged)\n+                {\n+                    saveHomesFile();\n+                    homesHasChanged = false;\n+                }\n+            }\n+        }.runTaskTimer(this, 6000, 6000); // 6000 ~= 5 minutes between each check (20 ticks/second * 300 seconds)\n+        // Initialize command cooldown HashMaps\n+        lastUsedHome    = new HashMap<>();\n+        lastUsedSetHome = new HashMap<>();\n+    }\n \n-        cooldownTimeSetHome = new HashMap<>();\n-        cooldownTaskSetHome = new HashMap<>();\n+    @Override // Called when this plugin is disabled (e.g. at server shutdown)\n+    public void\n+    onDisable()\n+    {\n+        autoReloadThread.interrupt();\n+        getServer().getScheduler().cancelTasks(this);\n+        saveHomesFile();\n     }\n \n-    // --- Method to save 'Homes.yml' file\n-    public void saveHomesFile() {\n-        try {\n-            homes.save(file);\n-        } catch (IOException e) {\n+    private void\n+    saveHomesFile()\n+    {\n+        try\n+        {\n+            homes.save(homesFile);\n+            getLogger().log(Level.INFO, \"Homes have been saved to disk.\"); // TODO: Disable this message?\n+        }\n+        catch (IOException e)\n+        {\n             getLogger().log(Level.SEVERE, \"Could not save homes file.\\nHere is the stack trace:\");\n             e.printStackTrace();\n         }\n     }\n \n-    void sendPlayerHome(Player player) {\n-        utils.sendHome(player);\n-        if (config.getBoolean(\"play-warp-sound\")) {\n-            player.playSound(utils.getHomeLocation(player), Sound.ENTITY_ENDERMAN_TELEPORT, 1, 1);\n+    private void\n+    setPlayerHome(Player player)\n+    {\n+        Location location    = player.getLocation();\n+        String playerPrefix  = \"Homes.\" + player.getUniqueId().toString();\n+        homes.set(playerPrefix + \".X\"    , location.getX());\n+        homes.set(playerPrefix + \".Y\"    , location.getY());\n+        homes.set(playerPrefix + \".Z\"    , location.getZ());\n+        homes.set(playerPrefix + \".Yaw\"  , location.getYaw());\n+        homes.set(playerPrefix + \".Pitch\", location.getPitch());\n+        homes.set(playerPrefix + \".World\", location.getWorld().getName());\n+        homesHasChanged = true;\n+        if (config.getBoolean(\"show-sethome-message\"))\n+        {\n+            player.sendMessage(ChatColor.translateAlternateColorCodes('&',\n+                    config.getString(\"sethome-message\").replace(\"%player%\", player.getDisplayName())));\n+        }\n+    }\n+\n+    private void\n+    sendPlayerHome(Player player)\n+    {\n+        Location location = getHomeLocation(player);\n+        player.teleport(location);\n+        if (config.getBoolean(\"play-warp-sound\"))\n+        {\n+            player.playSound(location, Sound.ENTITY_ENDERMAN_TELEPORT, 1.0F, 1.0F);\n         }\n-        String strFormatted = config.getString(\"teleport-message\").replace(\"%player%\", player.getDisplayName());\n         if (config.getBoolean(\"show-teleport-message\")) {\n-            player.sendMessage(ChatColor.translateAlternateColorCodes('&', strFormatted));\n+            player.sendMessage(ChatColor.translateAlternateColorCodes('&',\n+                    config.getString(\"teleport-message\").replace(\"%player%\", player.getDisplayName())));\n         }\n     }\n \n-    void setPlayerHome(Player player) {\n-        // --- Set player's home by saving it to a file (Homes.yml)\n-        utils.setHome(player);\n-        // --- If option 'show-sethome-message' is enabled in config, show the player the 'sethome-message' as defined in 'config.yml'\n-        if (config.getBoolean(\"show-sethome-message\")) {\n-            // --- Create instance of a String that is formatted from the 'config.yml' file.\n-            String strFormatted = config.getString(\"sethome-message\").replace(\"%player%\", player.getDisplayName());\n-            player.sendMessage(ChatColor.translateAlternateColorCodes('&', strFormatted));\n-        }\n+    boolean\n+    homeIsSet(Player player)\n+    {\n+        return !(homes.getString(\"Homes.\" + player.getUniqueId()) == null);\n+    }\n+\n+    Location\n+    getHomeLocation(Player player)\n+    {\n+        String playerPrefix = \"Homes.\" + player.getUniqueId().toString();\n+        return new Location(\n+                Bukkit.getWorld(homes.getString(playerPrefix  + \".World\")),\n+                homes.getDouble(playerPrefix + \".X\"),\n+                homes.getDouble(playerPrefix + \".Y\"),\n+                homes.getDouble(playerPrefix + \".Z\"),\n+                (float) homes.getLong(playerPrefix + \".Yaw\"),\n+                (float) homes.getLong(playerPrefix + \".Pitch\")\n+        );\n     }\n \n-    void setCoolDownTimeHome(Player player, int coolDown) {\n-        cooldownTimeHome.put(player, coolDown);\n-        cooldownTaskHome.put(player, new BukkitRunnable() {\n-            public void run() {\n-                cooldownTimeHome.put(player, cooldownTimeHome.get(player) - 1);\n-                if (cooldownTimeHome.get(player) == 0) {\n-                    cooldownTimeHome.remove(player);\n-                    cooldownTaskHome.remove(player);\n-                    cancel();\n+    private void\n+    reloadConfig2()\n+    {\n+        reloadConfig();\n+        config = getConfig();\n+        config.options().copyDefaults(true);\n+    }\n+\n+    private boolean\n+    convertFromOldConfig()\n+    {\n+        // assume that if this old setting exists, then this is an old config which needs to be converted.\n+        // if it doesn't exists, don't bother checking the rest, as it could not be a valid config anyway.\n+        // some extra care is taken during conversion to make sure we produce valid entries to our new config.\n+        boolean foundOldConfig = config.isSet(\"home-time-delay\");\n+        if (foundOldConfig)\n+        {\n+            boolean success = true;\n+            // Convert /home command\n+            if (config.isSet(\"home-command-delay\"))\n+            {\n+                if (config.isSet(\"home-time-delay\"))\n+                {\n+                    if (config.getBoolean(\"home-command-delay\"))\n+                    {\n+                        config.set(\"home-delay-seconds\", Math.max(0, config.getInt(\"home-time-delay\")));\n+                    }\n+                    else\n+                    {\n+                        config.set(\"home-delay-seconds\", 0);\n+                    }\n+                }\n+                else\n+                {\n+                    getLogger().log(Level.WARNING, \"Corrupted old config file detected! \"\n+                            + \"Config contains \\\"home-command-delay\\\", but is missing \\\"home-time-delay\\\".\");\n+                    success = false;\n                 }\n             }\n-        });\n-        cooldownTaskHome.get(player).runTaskTimer(this, 20, 20);\n+            else\n+            {\n+                getLogger().log(Level.WARNING, \"Corrupted old config file detected! \"\n+                        + \"Config contains \\\"home-time-delay\\\", but is missing \\\"home-command-delay\\\".\");\n+                success = false;\n+            }\n+\n+            // Convert /sethome command\n+            if (config.isSet(\"sethome-command-delay\"))\n+            {\n+                if (config.isSet(\"sethome-time-delay\"))\n+                {\n+                    if (config.getBoolean(\"sethome-command-delay\"))\n+                    {\n+                        config.set(\"sethome-delay-seconds\", Math.max(0, config.getInt(\"sethome-time-delay\")));\n+                    }\n+                    else\n+                    {\n+                        config.set(\"sethome-delay-seconds\", 0);\n+                    }\n+                }\n+                else\n+                {\n+                    getLogger().log(Level.WARNING, \"Corrupted old config file detected! \"\n+                            + \"Config contains \\\"sethome-command-delay\\\", but is missing \\\"sethome-time-delay\\\".\");\n+                    success = false;\n+                }\n+            }\n+            else\n+            {\n+                getLogger().log(Level.WARNING, \"Corrupted old config file detected! \"\n+                        + \"Config contains \\\"home-time-delay\\\", but is missing \\\"sethome-command-delay\\\".\");\n+                success = false;\n+            }\n+            config.set(\"sethome-command-delay\", null);\n+            config.set(\"sethome-time-delay\"   , null);\n+            config.set(\"home-command-delay\"   , null);\n+            config.set(\"home-time-delay\"      , null);\n+            if (!success)\n+            {\n+                // conversion failed, issue warning.\n+                getLogger().log(Level.WARNING, \"Found a old config file, but it was missing keys unexpectedly. \"\n+                        + \"Please check the config file to make sure everything is OK.\");\n+            }\n+        }\n+        return foundOldConfig;\n     }\n-    void setCoolDownTimeSetHome(Player player, int coolDown) {\n-        cooldownTimeSetHome.put(player, coolDown);\n-        cooldownTaskSetHome.put(player, new BukkitRunnable() {\n-            public void run() {\n-                cooldownTimeSetHome.put(player, cooldownTimeSetHome.get(player) - 1);\n-                if (cooldownTimeSetHome.get(player) == 0) {\n-                    cooldownTimeSetHome.remove(player);\n-                    cooldownTaskSetHome.remove(player);\n-                    cancel();\n+\n+    /**\n+     *  Uses a java WatchService to asynchronously wait for changes to the dataFolder directory.\n+     *  If a config.yml file is created or modified, a synchronous task is started, which reloads the config file.\n+     */\n+    private void\n+    startAutoReloadConfigTask()\n+    {\n+        autoReloadThread = new Thread(() ->\n+        {\n+            boolean configHasChanged = false;\n+            long timeOfLastReload = System.currentTimeMillis();\n+            long msSinceLastReload;\n+            try\n+            {\n+                WatchService watchService = FileSystems.getDefault().newWatchService();\n+                Path dataFolderPath = getDataFolder().toPath();\n+                dataFolderPath.register(watchService, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_MODIFY);\n+                WatchKey key;\n+                while (true)\n+                {\n+                    key = watchService.take();\n+                    for (WatchEvent<?> event : key.pollEvents())\n+                    {\n+                        // getLogger().log(Level.INFO, \"Auto Reload event: \" + event.context().toString() + \" \" + event.kind().toString() + \" \" + event.count());\n+                        if (event.context().toString().endsWith(\"config.yml\"))\n+                        {\n+                            configHasChanged = true;\n+                        }\n+                    }\n+                    if (configHasChanged)\n+                    {\n+                        msSinceLastReload = System.currentTimeMillis() - timeOfLastReload;\n+                        if (msSinceLastReload > 8000) // Wait at least 8 seconds before reloading again.\n+                        {\n+                            new BukkitRunnable()\n+                            {\n+                                public void run()\n+                                {\n+                                    reloadConfig2();\n+                                    boolean foundOldConfig = convertFromOldConfig();\n+                                    if (foundOldConfig)\n+                                    {\n+                                        saveConfig();\n+                                        reloadConfig2();\n+                                    }\n+                                    getLogger().log(Level.INFO, \"Config has been automatically reloaded.\");\n+                                }\n+                            }.runTaskLater(thisPlugin, 20); // Do the actual reloading in a synchronous task ~1 second later.\n+                            timeOfLastReload = System.currentTimeMillis() + 1000;\n+                        }\n+                        configHasChanged = false;\n+                    }\n+                    key.reset();\n                 }\n             }\n+            catch (IOException e)\n+            {\n+                getLogger().log(Level.WARNING, \"Auto Config reloading has crashed due to an IOException (it won't restart):\");\n+                e.printStackTrace();\n+            }\n+            catch (InterruptedException e)\n+            {\n+                getLogger().log(Level.INFO, \"Auto Config reloading has stopped due to having been Interrupted (it won't restart):\");\n+            }\n+            catch (Exception e)\n+            {\n+                getLogger().log(Level.WARNING, \"Auto Config reloading has crashed unexpectedly (it won't restart):\");\n+                e.printStackTrace();\n+            }\n         });\n-        cooldownTaskSetHome.get(player).runTaskTimer(this, 20, 20);\n+        autoReloadThread.start();\n     }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "7a9abfa83e9bf3c1205b85520cd042f433abf6c4",
    "filename": "src/main/java/me/downthepark/sethome/SetHomeEvents.java",
    "status": "modified",
    "additions": 14,
    "deletions": 19,
    "changes": 33,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/src/main/java/me/downthepark/sethome/SetHomeEvents.java",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/src/main/java/me/downthepark/sethome/SetHomeEvents.java",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/src/main/java/me/downthepark/sethome/SetHomeEvents.java?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -1,34 +1,29 @@\n package me.downthepark.sethome;\n \n-import org.bukkit.Bukkit;\n-import org.bukkit.Location;\n+import org.bukkit.entity.Player;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n import org.bukkit.event.player.PlayerRespawnEvent;\n \n-public class SetHomeEvents implements Listener {\n-\n+public class SetHomeEvents implements Listener\n+{\n     private SetHome plugin;\n \n-    public SetHomeEvents(SetHome plugin) {\n+    SetHomeEvents(SetHome plugin) // Constructor\n+    {\n         this.plugin = plugin;\n     }\n \n     @EventHandler\n-    public void onPlayerRespawn(PlayerRespawnEvent event) {\n-\n-        SetHomeUtils utils = new SetHomeUtils(plugin);\n-\n-        if (plugin.getConfig().getBoolean(\"respawn-player-at-home\")) {\n-\n-            if (!utils.homeIsNull(event.getPlayer())) {\n-                event.setRespawnLocation(new Location(Bukkit.getWorld(plugin.homes.getString(\"Homes.\" + event.getPlayer().getUniqueId().toString() + \".World\")),\n-                        plugin.homes.getDouble(\"Homes.\" + event.getPlayer().getUniqueId().toString() + \".X\"),\n-                        plugin.homes.getDouble(\"Homes.\" + event.getPlayer().getUniqueId().toString() + \".Y\"),\n-                        plugin.homes.getDouble(\"Homes.\" + event.getPlayer().getUniqueId().toString() + \".Z\"),\n-                        plugin.homes.getLong(\"Homes.\" + event.getPlayer().getUniqueId().toString() + \".Yaw\"),\n-                        plugin.homes.getLong(\"Homes.\" + event.getPlayer().getUniqueId().toString() + \".Pitch\"))\n-                );\n+    public void\n+    onPlayerRespawn(PlayerRespawnEvent event)\n+    {\n+        if (plugin.getConfig().getBoolean(\"respawn-player-at-home\"))\n+        {\n+            Player player = event.getPlayer();\n+            if (plugin.homeIsSet(player))\n+            {\n+                event.setRespawnLocation(plugin.getHomeLocation(player));\n             }\n         }\n     }"
  },
  {
    "sha": "7a5c438aacd08fce403de53061232923ef3db7ad",
    "filename": "src/main/java/me/downthepark/sethome/SetHomeUtils.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72/src/main/java/me/downthepark/sethome/SetHomeUtils.java",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72/src/main/java/me/downthepark/sethome/SetHomeUtils.java",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/src/main/java/me/downthepark/sethome/SetHomeUtils.java?ref=87e1ae2b2d27a8ef66ee118db4c36b5bb3bdeb72",
    "patch": "@@ -1,45 +0,0 @@\n-package me.downthepark.sethome;\n-\n-import org.bukkit.Bukkit;\n-import org.bukkit.Location;\n-import org.bukkit.entity.Player;\n-\n-public class SetHomeUtils {\n-\n-    private SetHome instance;\n-\n-    public SetHomeUtils(SetHome instance) {\n-        this.instance = instance;\n-    }\n-\n-    public void setHome(Player player) {\n-        instance.homes.set(\"Homes.\" + player.getUniqueId().toString() + \".X\", player.getLocation().getX());\n-        instance.homes.set(\"Homes.\" + player.getUniqueId().toString() + \".Y\", player.getLocation().getY());\n-        instance.homes.set(\"Homes.\" + player.getUniqueId().toString() + \".Z\", player.getLocation().getZ());\n-        instance.homes.set(\"Homes.\" + player.getUniqueId().toString() + \".Yaw\", player.getLocation().getYaw());\n-        instance.homes.set(\"Homes.\" + player.getUniqueId().toString() + \".Pitch\", player.getLocation().getPitch());\n-        instance.homes.set(\"Homes.\" + player.getUniqueId().toString() + \".World\", player.getLocation().getWorld().getName());\n-        instance.saveHomesFile();\n-    }\n-\n-    public void sendHome(Player player) {\n-        player.teleport(getHomeLocation(player));\n-    }\n-\n-    public Location getHomeLocation(Player player) {\n-\n-        return new Location(\n-                Bukkit.getWorld(instance.homes.getString(\"Homes.\" + player.getUniqueId().toString() + \".World\")),\n-                instance.homes.getDouble(\"Homes.\" + player.getUniqueId().toString() + \".X\"),\n-                instance.homes.getDouble(\"Homes.\" + player.getUniqueId().toString() + \".Y\"),\n-                instance.homes.getDouble(\"Homes.\" + player.getUniqueId().toString() + \".Z\"),\n-                instance.homes.getLong(\"Homes.\" + player.getUniqueId().toString() + \".Yaw\"),\n-                instance.homes.getLong(\"Homes.\" + player.getUniqueId().toString() + \".Pitch\")\n-        );\n-    }\n-\n-    public boolean homeIsNull(Player player) {\n-        return instance.homes.getString(\"Homes.\" + player.getUniqueId()) == null;\n-    }\n-\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "437ba2ec0f9c397a85f5b96e685f3d27de9491e3",
    "filename": "src/main/resources/config.yml",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/src/main/resources/config.yml",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/src/main/resources/config.yml",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/src/main/resources/config.yml?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -9,8 +9,11 @@ teleport-message: '&2[&a*&2]&a &aYou have been teleported to your home, &6%playe\n play-warp-sound: true\n respawn-player-at-home: true\n \n-sethome-command-delay: false\n-sethome-time-delay: 5\n+# previous name: sethome-time-delay\n+# set this to 0 to disabled delay\n+sethome-delay-seconds: 5\n \n-home-command-delay: true\n-home-time-delay: 5\n+# previous name: home-time-delay\n+# set this to 0 to disabled delay\n+home-delay-seconds: 5\n+home-warmup-instead-of-cooldown: false\n\\ No newline at end of file"
  },
  {
    "sha": "1ce24c13de07329b204e2d431636d63fa4a24825",
    "filename": "src/main/resources/plugin.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/DownThePark/SetHome/blob/e374476647efd306497ae0662fcac4936e6652c1/src/main/resources/plugin.yml",
    "raw_url": "https://github.com/DownThePark/SetHome/raw/e374476647efd306497ae0662fcac4936e6652c1/src/main/resources/plugin.yml",
    "contents_url": "https://api.github.com/repos/DownThePark/SetHome/contents/src/main/resources/plugin.yml?ref=e374476647efd306497ae0662fcac4936e6652c1",
    "patch": "@@ -1,6 +1,7 @@\n main: me.downthepark.sethome.SetHome\n name: SetHome\n-version: '5.0'\n+version: 6.1.1\n+api-version: 1.16\n description: A lightweight SetHome plugin for Bukkit/Spigot\n commands:\n   sethome:"
  }
]
