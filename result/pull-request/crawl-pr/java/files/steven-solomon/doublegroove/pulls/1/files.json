[
  {
    "sha": "bb06364debd7289d7b929c9f735fc457d33c2bf4",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/6befbc3043a32ac45182cb0bd73fa6e70b0a81f7/.gitignore",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/6befbc3043a32ac45182cb0bd73fa6e70b0a81f7/.gitignore",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/.gitignore?ref=6befbc3043a32ac45182cb0bd73fa6e70b0a81f7",
    "patch": "@@ -41,4 +41,7 @@ out/\n \n ### Frontend ###\n node_modules/\n-dist/\n\\ No newline at end of file\n+dist/\n+\n+### Mac-related stuff ###\n+.DS_Store"
  },
  {
    "sha": "57d70389a5fb19bde33afe7a2a1341dde9b623e3",
    "filename": "src/test/java/com/doublegrooverecords/vinyl/CartPurchasingServiceTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 5,
    "changes": 6,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/6befbc3043a32ac45182cb0bd73fa6e70b0a81f7/src/test/java/com/doublegrooverecords/vinyl/CartPurchasingServiceTest.java",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/6befbc3043a32ac45182cb0bd73fa6e70b0a81f7/src/test/java/com/doublegrooverecords/vinyl/CartPurchasingServiceTest.java",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/test/java/com/doublegrooverecords/vinyl/CartPurchasingServiceTest.java?ref=6befbc3043a32ac45182cb0bd73fa6e70b0a81f7",
    "patch": "@@ -1,6 +1,5 @@\n package com.doublegrooverecords.vinyl;\n \n-import com.doublegrooverecords.vinyl.*;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n@@ -9,16 +8,13 @@\n import org.springframework.test.annotation.DirtiesContext;\n \n import java.math.BigDecimal;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import static org.assertj.core.api.Assertions.*;\n \n @SpringBootTest()\n-@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n public class CartPurchasingServiceTest {\n     @Autowired\n     CartPurchasingService cartPurchasingService;"
  },
  {
    "sha": "0be2316cba0630974d57aa4186dcf0ab3547a531",
    "filename": "src/test/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepositoryTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/6befbc3043a32ac45182cb0bd73fa6e70b0a81f7/src/test/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepositoryTest.java",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/6befbc3043a32ac45182cb0bd73fa6e70b0a81f7/src/test/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/test/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepositoryTest.java?ref=6befbc3043a32ac45182cb0bd73fa6e70b0a81f7",
    "patch": "@@ -3,12 +3,14 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n \n import java.util.Collections;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n public class JdbcProductGroupRepositoryTest {\n     @Autowired\n     JdbcProductGroupRepository productGroupRepository;"
  },
  {
    "sha": "7e9ef099dffb0b2c9f0ba8cfbfee438225cffe5c",
    "filename": "src/test/java/com/doublegrooverecords/vinyl/VinylE2ETest.java",
    "status": "modified",
    "additions": 63,
    "deletions": 68,
    "changes": 131,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/6befbc3043a32ac45182cb0bd73fa6e70b0a81f7/src/test/java/com/doublegrooverecords/vinyl/VinylE2ETest.java",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/6befbc3043a32ac45182cb0bd73fa6e70b0a81f7/src/test/java/com/doublegrooverecords/vinyl/VinylE2ETest.java",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/test/java/com/doublegrooverecords/vinyl/VinylE2ETest.java?ref=6befbc3043a32ac45182cb0bd73fa6e70b0a81f7",
    "patch": "@@ -6,35 +6,24 @@\n import org.openqa.selenium.WebElement;\n import org.openqa.selenium.chrome.ChromeDriver;\n import org.openqa.selenium.chrome.ChromeOptions;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Locale;\n-import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Fail.fail;\n \n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n class VinylE2ETest {\n \n     @LocalServerPort\n     int port;\n \n     WebDriver driver;\n \n-    @Autowired\n-    ProductGroupRepository productGroupRepository;\n-\n-    @Autowired\n-    ProductRepository productRepository;\n-\n     @BeforeEach\n     public void setUp() {\n         driver = new ChromeDriver(new ChromeOptions().setHeadless(true));\n@@ -47,75 +36,81 @@ public void tearDown() {\n     }\n \n     @Test\n-    void contextLoads() throws InterruptedException {\n-        driver.get(String.format(\"http://localhost:%d\", port));\n+    void contextLoads() {\n+        givenCustomerOnHomepage();\n+        thenTheCustomerSeesFlashSale();\n+        thenTheCustomerSeesTheDefaultProducts();\n+\n+        givenAnAdminOnAdminBackend();\n+        whenTheAdminAddsAProductToTheProductGroup();\n+        thenTheAdminSeesTheAddedProduct();\n+\n+        whenTheAdminSavesChanges();\n+        givenCustomerOnHomepage();\n+        thenTheUserSeesTheAddedProduct();\n+    }\n \n-        List<UIProduct> expectedProducts = new ArrayList<>();\n-        for (Product p1 : productGroupRepository.findById(1L).getProducts()) {\n-            UIProduct uiProduct = new UIProduct(p1.getId(), p1.getAlbumTitle().toUpperCase(Locale.ROOT), \"By: \" + p1.artists.get(0).getName(), p1.imageUrl);\n-            expectedProducts.add(uiProduct);\n-        }\n+    private void thenTheUserSeesTheAddedProduct() {\n+        assertThat(driver.findElements(By.className(\"product\"))).hasSize(defaultExpectedProducts().size() + 1);\n+    }\n \n-        assertThat(driver.findElement(By.className(\"product-group-name\")).getText()).isEqualTo(\"flash sale\");\n+    private void whenTheAdminSavesChanges() {\n+        driver.findElement(By.className(\"save-button\")).click();\n+    }\n \n-        List<WebElement> productElements = driver.findElements(By.className(\"product\"));\n-        assertThat(productElements).hasSize(expectedProducts.size());\n+    private void thenTheAdminSeesTheAddedProduct() {\n \n-        int index = 0;\n-        for (WebElement pe : productElements) {\n-            UIProduct product = expectedProducts.get(index);\n-            assertThat(pe.findElement(By.className(\"album-title\")).getText()).isEqualTo(product.getAlbum());\n-            assertThat(pe.findElement(By.className(\"artist\")).getText()).isEqualTo(product.getArtist());\n-            assertThat(pe.findElement(By.className(\"album-art\")).getAttribute(\"src\")).isEqualTo(product.getImageUrl());\n-            index++;\n-        }\n+        assertThat(driver.findElements(By.name(\"items\"))).hasSize(defaultExpectedProducts().size() + 1);\n+    }\n \n-        driver.get(String.format(\"http://localhost:%d/admin/group/1/edit\", port));\n+    private void whenTheAdminAddsAProductToTheProductGroup() {\n+        driver.findElement(By.id(\"edit-product-group-link\")).click();\n \n-        Product firstProduct = productRepository.findAll().get(0);\n-        driver.findElement(By.id(\"product-search\")).sendKeys(firstProduct.artists.get(0).getName().substring(0, 5));\n+        driver.findElement(By.id(\"product-search\")).sendKeys(defaultExpectedProducts().get(0).getArtist().substring(0, 5));\n         driver.findElement(By.id(\"search-button\")).click();\n \n-        driver.findElement(By.id(String.format(\"album-%d\", firstProduct.getId()))).click();\n-\n-        List<WebElement> selectedItemElements = driver.findElements(By.name(\"items\"));\n-\n-        assertThat(selectedItemElements).hasSize(expectedProducts.size() + 1);\n-\n-        for (UIProduct p : expectedProducts) {\n-            assertThat(findHiddenField(p.getId())).isNotNull();\n-        }\n-\n-        assertThat(findHiddenField(firstProduct.getId())).isNotNull();\n-\n-        driver.findElement(By.className(\"save-button\")).click();\n-\n-        driver.get(String.format(\"http://localhost:%d\", port));\n+        driver.findElement(By.className(\"add-button\")).click();\n+    }\n \n-        List<UIProduct> newExpectedProducts = new ArrayList<>();\n-        List<Product> products = productGroupRepository.findById(1L).getProducts();\n+    private void thenTheCustomerSeesTheDefaultProducts() {\n+        List<WebElement> productElements = driver.findElements(By.className(\"product\"));\n+        assertThat(productElements).hasSize(defaultExpectedProducts().size());\n+\n+        defaultExpectedProducts().forEach(product ->\n+            assertThat(productElements).anySatisfy(pe -> {\n+                assertThat(pe.findElement(By.className(\"album-title\")).getText()).isEqualToIgnoringCase(product.getAlbum());\n+                assertThat(pe.findElement(By.className(\"artist\")).getText()).containsIgnoringCase(product.getArtist());\n+                assertThat(pe.findElement(By.className(\"album-art\")).getAttribute(\"src\")).isEqualTo(product.getImageUrl());\n+            }\n+        ));\n+    }\n \n-        assertThat(products).hasSize(expectedProducts.size() + 1);\n+    private void thenTheCustomerSeesFlashSale() {\n+        assertThat(driver.findElement(By.className(\"product-group-name\")).getText()).isEqualTo(\"flash sale\");\n+    }\n \n-        for (Product p1 : products) {\n-            UIProduct uiProduct = new UIProduct(p1.getId(), p1.getAlbumTitle().toUpperCase(Locale.ROOT), \"By: \" + p1.artists.get(0).getName(), p1.imageUrl);\n-            newExpectedProducts.add(uiProduct);\n-        }\n+    private List<UIProduct> defaultExpectedProducts() {\n+        return List.of(\n+                uiProductFor(\"The Coworker\", \"Bobby Joel\"),\n+                uiProductFor(\"Downtown Boy\", \"Bobby Joel\"),\n+                uiProductFor(\"Hand Me Housing\", \"The stationary boulders\"),\n+                uiProductFor(\"aftergym\", \"The stationary boulders\")\n+        );\n+    }\n \n-        List<WebElement> newListProducts = driver.findElements(By.className(\"product\"));\n-        assertThat(newListProducts).hasSize(expectedProducts.size() + 1);\n+    private UIProduct uiProductFor(String album, String artist) {\n+        return new UIProduct(0L, album, artist, defaultImageAddress());\n+    }\n+    \n+    private static String defaultImageAddress() {\n+        return \"https://a.1stdibscdn.com/a_3543/a_63360221592442733155/IMG_1176_master.jpg?disable=upscale&auto=webp&quality=60&width=960\";\n+    }\n \n-        int j = 0;\n-        for (WebElement pe : newListProducts) {\n-            UIProduct product = newExpectedProducts.get(j);\n-            assertThat(pe.findElement(By.className(\"album-title\")).getText()).isEqualTo(product.getAlbum());\n-            assertThat(pe.findElement(By.className(\"artist\")).getText()).isEqualTo(product.getArtist());\n-            assertThat(pe.findElement(By.className(\"album-art\")).getAttribute(\"src\")).isEqualTo(product.getImageUrl());\n-            j++;\n-        }\n+    private void givenAnAdminOnAdminBackend() {\n+        driver.get(String.format(\"http://localhost:%d/admin\", port));\n     }\n \n-    private WebElement findHiddenField(Long id) {\n-        return driver.findElement(By.xpath(String.format(\"//input[@value='%d']\", id)));\n+    private void givenCustomerOnHomepage() {\n+        driver.get(String.format(\"http://localhost:%d\", port));\n     }\n }"
  }
]
