[
  {
    "sha": "bb06364debd7289d7b929c9f735fc457d33c2bf4",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/.gitignore",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/.gitignore",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/.gitignore?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -41,4 +41,7 @@ out/\n \n ### Frontend ###\n node_modules/\n-dist/\n\\ No newline at end of file\n+dist/\n+\n+### Mac-related stuff ###\n+.DS_Store"
  },
  {
    "sha": "92452e044ec76bfc878259b5fd6337826fcdeddd",
    "filename": "frontend/src/ProductGroupEditor.jsx",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/frontend/src/ProductGroupEditor.jsx",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/frontend/src/ProductGroupEditor.jsx",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/frontend/src/ProductGroupEditor.jsx?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -5,12 +5,19 @@ function ProductGroupEditor(props) {\n   // useState is like instance variables for React functional components\n   const [products, setProducts] = useState(props.productGroup?.products || []);\n   const onAdd = (t) => setProducts([...products, t]);\n+  const [productGroupName, setProductGroupName] = useState(props.productGroup?.name);\n \n   return (\n     <div className=\"admin\">\n       <h1>Edit ProductGroup</h1>\n       <SearchBox onAdd={onAdd} />\n       <form data-testid=\"product-group\" method=\"POST\" action={`/admin/group/${props.productGroup?.id}`}>\n+        <div className=\"product-group\">\n+          <b>Name </b>\n+          <input data-testid=\"product-group-name\" name=\"name\" value={productGroupName}\n+            onChange={(event) => setProductGroupName(event.target.value)}\n+          />\n+        </div>\n         <button type=\"submit\" className=\"save-button\">Save</button>\n         {products.map((product, i) => {\n           return ("
  },
  {
    "sha": "a50680579e3a5f883bda8498372f55f1b2540f56",
    "filename": "frontend/src/__tests__/ProductGroupEditor.test.jsx",
    "status": "modified",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/frontend/src/__tests__/ProductGroupEditor.test.jsx",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/frontend/src/__tests__/ProductGroupEditor.test.jsx",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/frontend/src/__tests__/ProductGroupEditor.test.jsx?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -22,6 +22,7 @@ describe('ProductGroupEditor', () => {\n     describe('when ProductGroup has no products', () => {\n       it('renders no albums', () => {\n         const productGroup = {\n+          name: 'some product group name',\n           products: [],\n           id: 1,\n         };\n@@ -43,6 +44,7 @@ describe('ProductGroupEditor', () => {\n         };\n \n         const productGroup = {\n+          name: 'some product group name',\n           products: [\n             {\n               artists: [expectedArtist],\n@@ -70,6 +72,7 @@ describe('ProductGroupEditor', () => {\n         const expectedArtist = {name: 'Bobby Joel'};\n         const expectedAlbumTitle = 'Subway entrance thing';\n         const productGroup = {\n+          name: 'some product group name',\n           products: [\n             {artists: [expectedArtist], albumTitle: expectedAlbumTitle},\n             {artists: [expectedArtist], albumTitle: expectedAlbumTitle},\n@@ -94,6 +97,7 @@ describe('ProductGroupEditor', () => {\n       it('can add products', async () => {\n         const queryText = 'Bobby';\n         const noProducts = {\n+          name: 'some product group name',\n           products: [],\n         };\n \n@@ -133,6 +137,7 @@ describe('ProductGroupEditor', () => {\n       it('displays search results with album details', async () => {\n         const queryText = 'Bobby';\n         const noProducts = {\n+          name: 'some product group name',\n           products: [],\n         };\n \n@@ -180,3 +185,35 @@ describe('ProductGroupEditor', () => {\n     expect(albumArt.getAttribute('src')).toEqual(expectedAlbum.albumImage);\n   }\n });\n+\n+describe('product group name', () => {\n+  it('displays the name of the product group', () => {\n+    const productGroup = {\n+      name: 'some product group name',\n+      products: [],\n+    };\n+\n+    const wrapper = render(<ProductGroupEditor productGroup={productGroup}/>);\n+\n+    const productGroupName = wrapper.getByTestId('product-group-name');\n+    expect(productGroupName).toHaveValue(productGroup.name);\n+  });\n+\n+  describe('when the product group name is changed', () => {\n+    it('displays the updates', () => {\n+      const newProductGroupName = 'some changed product group name';\n+      const productGroup = {\n+        name: 'some product group name',\n+        products: [],\n+      };\n+\n+      const wrapper = render(<ProductGroupEditor productGroup={productGroup}/>);\n+      const productGroupName = wrapper.getByTestId('product-group-name');\n+\n+      userEvent.clear(productGroupName);\n+      userEvent.type(productGroupName, newProductGroupName);\n+\n+      expect(wrapper.getByTestId('product-group-name')).toHaveValue(newProductGroupName);\n+    });\n+  });\n+});"
  },
  {
    "sha": "4e9b842613803b94bc3467f553a1386806e79a84",
    "filename": "src/main/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepository.java",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepository.java",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepository.java",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/main/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepository.java?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -23,6 +23,7 @@ public JdbcProductGroupRepository(JdbcTemplate jdbcTemplate) {\n     @Transactional\n     public void update(ProductGroup productGroup) {\n         jdbcTemplate.update(\"delete from product_group_products where product_group_id = ?\", productGroup.getId());\n+        jdbcTemplate.update(\"update product_group pg set pg.name = ? where id = ?\", productGroup.getName(), productGroup.getId());\n \n         jdbcTemplate.batchUpdate(\n                 \"insert into product_group_products (product_group_id, product_id) values (?, ?);\",\n@@ -62,7 +63,12 @@ public Product mapRow(ResultSet rs, int rowNum) throws SQLException {\n         );\n \n         Long productGroupId = 1L;\n-        return new ProductGroup(productGroupId, products);\n+        return jdbcTemplate.queryForObject(\"select pg.name as name from product_group pg where id = ?\", new RowMapper<ProductGroup>() {\n+            @Override\n+            public ProductGroup mapRow(ResultSet rs, int rowNum) throws SQLException {\n+                return new ProductGroup(productGroupId, rs.getString(\"name\"), products);\n+            }\n+        }, productGroupId);\n     }\n \n     @Override\n@@ -86,6 +92,11 @@ public Product mapRow(ResultSet rs, int rowNum) throws SQLException {\n         );\n \n         Long productGroupId = 1L;\n-        return new ProductGroup(productGroupId, products);\n+        return jdbcTemplate.queryForObject(\"select pg.name as name from product_group pg where id = ?\", new RowMapper<ProductGroup>() {\n+            @Override\n+            public ProductGroup mapRow(ResultSet rs, int rowNum) throws SQLException {\n+                return new ProductGroup(productGroupId, rs.getString(\"name\"), products);\n+            }\n+        }, productGroupId);\n     }\n }"
  },
  {
    "sha": "d0be96a11c4292929929d0e464d3e4c5541937bd",
    "filename": "src/main/java/com/doublegrooverecords/vinyl/ProductGroup.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/java/com/doublegrooverecords/vinyl/ProductGroup.java",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/java/com/doublegrooverecords/vinyl/ProductGroup.java",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/main/java/com/doublegrooverecords/vinyl/ProductGroup.java?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -7,11 +7,13 @@\n @Data\n public class ProductGroup {\n     Long id;\n+    String name;\n     List<Long> items;\n     private List<Product> products;\n \n-    public ProductGroup(Long id, List<Product> products) {\n+    public ProductGroup(Long id, String name, List<Product> products) {\n         this.id = id;\n+        this.name = name;\n         this.products = products;\n     }\n }"
  },
  {
    "sha": "a04239342d8bb65e11f25850379d73689c42c1b6",
    "filename": "src/main/resources/data.sql",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/resources/data.sql",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/resources/data.sql",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/main/resources/data.sql?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -87,7 +87,7 @@ insert into prod_artists (product_id, artist_id) values (@people_of_the_day, @em\n insert into prod_artists (product_id, artist_id) values (@normal_sunsets, @embrace);\n insert into prod_artists (product_id, artist_id) values (@cold_in_the_sun, @embrace);\n \n-insert into product_group () values ();\n+insert into product_group (name) values ('flash sale');\n \n insert into product_group_products (product_group_id, product_id) values (1, 3);\n insert into product_group_products (product_group_id, product_id) values (1, 5);"
  },
  {
    "sha": "b28fd012fe2fe14512b41b2d2664337ce930a9e5",
    "filename": "src/main/resources/schema.sql",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/resources/schema.sql",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/resources/schema.sql",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/main/resources/schema.sql?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -21,7 +21,8 @@ alter table prod_artists\n     add foreign key (artist_id) references artist(id);\n \n create table if not exists product_group (\n-    id identity\n+    id identity,\n+    name varchar(200)\n );\n \n create table if not exists product_group_products ("
  },
  {
    "sha": "b11b9e38ca0cb265232c68a0bd9a5bb0a01e28af",
    "filename": "src/main/resources/templates/home.html",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/resources/templates/home.html",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/src/main/resources/templates/home.html",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/main/resources/templates/home.html?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -8,7 +8,7 @@\n <body>\n     <section layout:fragment=\"content\">\n         <div class=\"product-group-container\">\n-            <h3 class=\"product-group-name\">flash sale</h3>\n+            <h3 class=\"product-group-name\" data-testid=\"product-group-name\" th:text=\"${productGroups.name}\"></h3>\n             <div class=\"row\">\n                 <div th:each=\"product : ${productGroups.products}\" class=\"product\">\n                     <img class=\"album-art\" th:src=\"${product.imageUrl}\""
  },
  {
    "sha": "57d70389a5fb19bde33afe7a2a1341dde9b623e3",
    "filename": "src/test/java/com/doublegrooverecords/vinyl/CartPurchasingServiceTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 5,
    "changes": 6,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/src/test/java/com/doublegrooverecords/vinyl/CartPurchasingServiceTest.java",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/src/test/java/com/doublegrooverecords/vinyl/CartPurchasingServiceTest.java",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/test/java/com/doublegrooverecords/vinyl/CartPurchasingServiceTest.java?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -1,6 +1,5 @@\n package com.doublegrooverecords.vinyl;\n \n-import com.doublegrooverecords.vinyl.*;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n@@ -9,16 +8,13 @@\n import org.springframework.test.annotation.DirtiesContext;\n \n import java.math.BigDecimal;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import static org.assertj.core.api.Assertions.*;\n \n @SpringBootTest()\n-@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n public class CartPurchasingServiceTest {\n     @Autowired\n     CartPurchasingService cartPurchasingService;"
  },
  {
    "sha": "88ceefa6e91cdc6f2e813712f2c014a08f1b573d",
    "filename": "src/test/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepositoryTest.java",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/src/test/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepositoryTest.java",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/src/test/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/test/java/com/doublegrooverecords/vinyl/JdbcProductGroupRepositoryTest.java?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -3,12 +3,14 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n \n import java.util.Collections;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n public class JdbcProductGroupRepositoryTest {\n     @Autowired\n     JdbcProductGroupRepository productGroupRepository;\n@@ -28,12 +30,40 @@ public void update_canDeleteAll() {\n         final ProductGroup productGroup = productGroupRepository.findById(productGroupId);\n         final String productGroupName = \"new name\";\n \n-        ProductGroup productGroupNoProducts = new ProductGroup(productGroupId, Collections.emptyList());\n+        ProductGroup productGroupNoProducts = new ProductGroup(productGroupId, productGroupName, Collections.emptyList());\n         productGroupNoProducts.items = Collections.emptyList();\n         productGroupRepository.update(productGroupNoProducts);\n \n         ProductGroup savedProductGroup = productGroupRepository.findById(productGroupId);\n         assertThat(savedProductGroup).hasFieldOrPropertyWithValue(\"id\", productGroupId);\n         assertThat(savedProductGroup.getProducts()).hasSize(0);\n     }\n+\n+    @Test\n+    public void update_persistsProductGroupName() {\n+        final String updatedName = \"Updated name\";\n+\n+        ProductGroup productGroup = productGroupRepository.first();\n+        productGroup.setName(updatedName);\n+        productGroup.setItems(Collections.emptyList());\n+\n+        productGroupRepository.update(productGroup);\n+\n+        assertThat(productGroupRepository.first()).hasFieldOrPropertyWithValue(\"name\", updatedName);\n+    }\n+\n+    @Test\n+    public void update_forKnownId_persistsProductGroupName() {\n+        final String updatedName = \"Updated name\";\n+        final Long knownId = 1L;\n+\n+        ProductGroup productGroup = productGroupRepository.findById(knownId);\n+        productGroup.setName(updatedName);\n+        productGroup.setItems(Collections.emptyList());\n+\n+        productGroupRepository.update(productGroup);\n+\n+        assertThat(productGroupRepository.findById(knownId)).hasFieldOrPropertyWithValue(\"name\", updatedName);\n+    }\n+\n }"
  },
  {
    "sha": "313e1971ce56831b83b68bc79720e0c1eb3db642",
    "filename": "src/test/java/com/doublegrooverecords/vinyl/VinylE2ETest.java",
    "status": "modified",
    "additions": 89,
    "deletions": 64,
    "changes": 153,
    "blob_url": "https://github.com/steven-solomon/doublegroove/blob/a19e53fdea2d340cde9200f0094390e8ee959d63/src/test/java/com/doublegrooverecords/vinyl/VinylE2ETest.java",
    "raw_url": "https://github.com/steven-solomon/doublegroove/raw/a19e53fdea2d340cde9200f0094390e8ee959d63/src/test/java/com/doublegrooverecords/vinyl/VinylE2ETest.java",
    "contents_url": "https://api.github.com/repos/steven-solomon/doublegroove/contents/src/test/java/com/doublegrooverecords/vinyl/VinylE2ETest.java?ref=a19e53fdea2d340cde9200f0094390e8ee959d63",
    "patch": "@@ -6,34 +6,25 @@\n import org.openqa.selenium.WebElement;\n import org.openqa.selenium.chrome.ChromeDriver;\n import org.openqa.selenium.chrome.ChromeOptions;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Locale;\n-import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Fail.fail;\n \n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n class VinylE2ETest {\n \n     @LocalServerPort\n     int port;\n \n     WebDriver driver;\n \n-    @Autowired\n-    ProductGroupRepository productGroupRepository;\n-\n-    @Autowired\n-    ProductRepository productRepository;\n+    String newProductGroupName = \"changed flash sale group\";\n \n     @BeforeEach\n     public void setUp() {\n@@ -47,75 +38,109 @@ public void tearDown() {\n     }\n \n     @Test\n-    void contextLoads() throws InterruptedException {\n-        driver.get(String.format(\"http://localhost:%d\", port));\n-\n-        List<UIProduct> expectedProducts = new ArrayList<>();\n-        for (Product p1 : productGroupRepository.findById(1L).getProducts()) {\n-            UIProduct uiProduct = new UIProduct(p1.getId(), p1.getAlbumTitle().toUpperCase(Locale.ROOT), \"By: \" + p1.artists.get(0).getName(), p1.imageUrl);\n-            expectedProducts.add(uiProduct);\n-        }\n-\n-        assertThat(driver.findElement(By.className(\"product-group-name\")).getText()).isEqualTo(\"flash sale\");\n+    void changedProductsOnProductGroupShowUpForCustomers() {\n+        givenCustomerOnHomepage();\n+        thenTheCustomerSeesFlashSale();\n+        thenTheCustomerSeesTheDefaultProducts();\n+\n+        givenAnAdminOnAdminBackend();\n+        whenTheAdminAddsAProductToTheProductGroup();\n+        thenTheAdminSeesTheAddedProduct();\n+\n+        whenTheAdminSavesChanges();\n+        givenCustomerOnHomepage();\n+        thenTheUserSeesTheAddedProduct();\n+    }\n \n-        List<WebElement> productElements = driver.findElements(By.className(\"product\"));\n-        assertThat(productElements).hasSize(expectedProducts.size());\n+    @Test\n+    void adminsCanChangeTheProductGroupName() {\n+        givenAnAdminOnAdminBackend();\n+        whenIEditTheProductGroup();\n+        andIChangeTheNameOfTheGroup();\n+        whenTheAdminSavesChanges();\n+\n+        givenCustomerOnHomepage();\n+        thenISeeTheNewGroupName();\n+    }\n \n-        int index = 0;\n-        for (WebElement pe : productElements) {\n-            UIProduct product = expectedProducts.get(index);\n-            assertThat(pe.findElement(By.className(\"album-title\")).getText()).isEqualTo(product.getAlbum());\n-            assertThat(pe.findElement(By.className(\"artist\")).getText()).isEqualTo(product.getArtist());\n-            assertThat(pe.findElement(By.className(\"album-art\")).getAttribute(\"src\")).isEqualTo(product.getImageUrl());\n-            index++;\n-        }\n+    private void thenISeeTheNewGroupName() {\n+        assertProductGroupNameIs(newProductGroupName);\n+    }\n \n-        driver.get(String.format(\"http://localhost:%d/admin/group/1/edit\", port));\n+    private void andIChangeTheNameOfTheGroup() {\n+        WebElement productGroupNameElement = driver.findElement(By.cssSelector(\"[data-testid=product-group-name]\"));\n+        productGroupNameElement.clear();\n+        productGroupNameElement.sendKeys(newProductGroupName);\n+    }\n \n-        Product firstProduct = productRepository.findAll().get(0);\n-        driver.findElement(By.id(\"product-search\")).sendKeys(firstProduct.artists.get(0).getName().substring(0, 5));\n-        driver.findElement(By.id(\"search-button\")).click();\n+    private void thenTheUserSeesTheAddedProduct() {\n+        assertThat(driver.findElements(By.className(\"product\"))).hasSize(defaultExpectedProducts().size() + 1);\n+    }\n \n-        driver.findElement(By.id(String.format(\"album-%d\", firstProduct.getId()))).click();\n+    private void whenTheAdminSavesChanges() {\n+        driver.findElement(By.className(\"save-button\")).click();\n+    }\n \n-        List<WebElement> selectedItemElements = driver.findElements(By.name(\"items\"));\n+    private void thenTheAdminSeesTheAddedProduct() {\n+        assertThat(driver.findElements(By.name(\"items\"))).hasSize(defaultExpectedProducts().size() + 1);\n+    }\n \n-        assertThat(selectedItemElements).hasSize(expectedProducts.size() + 1);\n+    private void whenTheAdminAddsAProductToTheProductGroup() {\n+        whenIEditTheProductGroup();\n \n-        for (UIProduct p : expectedProducts) {\n-            assertThat(findHiddenField(p.getId())).isNotNull();\n-        }\n+        driver.findElement(By.id(\"product-search\")).sendKeys(defaultExpectedProducts().get(0).getArtist().substring(0, 5));\n+        driver.findElement(By.id(\"search-button\")).click();\n \n-        assertThat(findHiddenField(firstProduct.getId())).isNotNull();\n+        driver.findElement(By.className(\"add-button\")).click();\n+    }\n \n-        driver.findElement(By.className(\"save-button\")).click();\n+    private void whenIEditTheProductGroup() {\n+        driver.findElement(By.id(\"edit-product-group-link\")).click();\n+    }\n \n-        driver.get(String.format(\"http://localhost:%d\", port));\n+    private void thenTheCustomerSeesTheDefaultProducts() {\n+        List<WebElement> productElements = driver.findElements(By.className(\"product\"));\n+        assertThat(productElements).hasSize(defaultExpectedProducts().size());\n+\n+        defaultExpectedProducts().forEach(product ->\n+            assertThat(productElements).anySatisfy(pe -> {\n+                assertThat(pe.findElement(By.className(\"album-title\")).getText()).isEqualToIgnoringCase(product.getAlbum());\n+                assertThat(pe.findElement(By.className(\"artist\")).getText()).containsIgnoringCase(product.getArtist());\n+                assertThat(pe.findElement(By.className(\"album-art\")).getAttribute(\"src\")).isEqualTo(product.getImageUrl());\n+            }\n+        ));\n+    }\n \n-        List<UIProduct> newExpectedProducts = new ArrayList<>();\n-        List<Product> products = productGroupRepository.findById(1L).getProducts();\n+    private void thenTheCustomerSeesFlashSale() {\n+        assertProductGroupNameIs(\"flash sale\");\n+    }\n \n-        assertThat(products).hasSize(expectedProducts.size() + 1);\n+    private void assertProductGroupNameIs(String productGroupName) {\n+        assertThat(driver.findElement(By.className(\"product-group-name\")).getText()).isEqualTo(productGroupName);\n+    }\n \n-        for (Product p1 : products) {\n-            UIProduct uiProduct = new UIProduct(p1.getId(), p1.getAlbumTitle().toUpperCase(Locale.ROOT), \"By: \" + p1.artists.get(0).getName(), p1.imageUrl);\n-            newExpectedProducts.add(uiProduct);\n-        }\n+    private List<UIProduct> defaultExpectedProducts() {\n+        return List.of(\n+                uiProductFor(\"The Coworker\", \"Bobby Joel\"),\n+                uiProductFor(\"Downtown Boy\", \"Bobby Joel\"),\n+                uiProductFor(\"Hand Me Housing\", \"The stationary boulders\"),\n+                uiProductFor(\"aftergym\", \"The stationary boulders\")\n+        );\n+    }\n \n-        List<WebElement> newListProducts = driver.findElements(By.className(\"product\"));\n-        assertThat(newListProducts).hasSize(expectedProducts.size() + 1);\n+    private UIProduct uiProductFor(String album, String artist) {\n+        return new UIProduct(0L, album, artist, defaultImageAddress());\n+    }\n+    \n+    private static String defaultImageAddress() {\n+        return \"https://a.1stdibscdn.com/a_3543/a_63360221592442733155/IMG_1176_master.jpg?disable=upscale&auto=webp&quality=60&width=960\";\n+    }\n \n-        int j = 0;\n-        for (WebElement pe : newListProducts) {\n-            UIProduct product = newExpectedProducts.get(j);\n-            assertThat(pe.findElement(By.className(\"album-title\")).getText()).isEqualTo(product.getAlbum());\n-            assertThat(pe.findElement(By.className(\"artist\")).getText()).isEqualTo(product.getArtist());\n-            assertThat(pe.findElement(By.className(\"album-art\")).getAttribute(\"src\")).isEqualTo(product.getImageUrl());\n-            j++;\n-        }\n+    private void givenAnAdminOnAdminBackend() {\n+        driver.get(String.format(\"http://localhost:%d/admin\", port));\n     }\n \n-    private WebElement findHiddenField(Long id) {\n-        return driver.findElement(By.xpath(String.format(\"//input[@value='%d']\", id)));\n+    private void givenCustomerOnHomepage() {\n+        driver.get(String.format(\"http://localhost:%d\", port));\n     }\n }"
  }
]
