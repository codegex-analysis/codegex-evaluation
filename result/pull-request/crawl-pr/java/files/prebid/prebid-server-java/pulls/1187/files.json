[
  {
    "sha": "d1506713155e80b214e94a90bde3c424b5710bfa",
    "filename": "src/main/java/org/prebid/server/auction/BidResponseCreator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/724a586c5894732a03e238fea001c6d12bdab4c1/src/main/java/org/prebid/server/auction/BidResponseCreator.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/724a586c5894732a03e238fea001c6d12bdab4c1/src/main/java/org/prebid/server/auction/BidResponseCreator.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/auction/BidResponseCreator.java?ref=724a586c5894732a03e238fea001c6d12bdab4c1",
    "patch": "@@ -886,7 +886,7 @@ private Bid toBid(TargetingBidInfo targetingBidInfo,\n         final ExtBidPrebid extBidPrebid = ExtBidPrebid.builder()\n                 .bidid(bidInfo.getGeneratedBidId())\n                 .type(bidType)\n-                .targeting(targetingKeywords)\n+                .targeting(MapUtils.isEmpty(targetingKeywords) ? null : targetingKeywords)\n                 .targetBidderCode(targetingBidInfo.isAddTargetBidderCode() ? bidderCode : null)\n                 .cache(cache)\n                 .storedRequestAttributes(storedVideo)"
  },
  {
    "sha": "04f06f3c556bb6f11dcfca5a82a4bfef4cb324ec",
    "filename": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java",
    "status": "modified",
    "additions": 54,
    "deletions": 4,
    "changes": 58,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/724a586c5894732a03e238fea001c6d12bdab4c1/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/724a586c5894732a03e238fea001c6d12bdab4c1/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java?ref=724a586c5894732a03e238fea001c6d12bdab4c1",
    "patch": "@@ -1185,6 +1185,56 @@ public void shouldReduceAndNotPopulateTargetingKeywordsForExtraBidsWhenCodePrefi\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldNotPopulateTargetingKeywordsForExtraBidsWhenCodePrefixIsDefinedAndBidderKeysFlagIsFalse() {\n+        // given\n+        final AuctionContext auctionContext = givenAuctionContext(givenBidRequest(\n+                identity(),\n+                extBuilder -> extBuilder.targeting(ExtRequestTargeting.builder()\n+                        .pricegranularity(mapper.valueToTree(\n+                                ExtPriceGranularity.of(2, singletonList(\n+                                        ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5))))))\n+                        .includewinners(true)\n+                        .includebidderkeys(false)\n+                        .includeformat(false)\n+                        .build()),\n+                givenImp(\"i1\")));\n+\n+        final String bidder1 = \"bidder1\";\n+        final Map<String, MultiBidConfig> multiBidMap = singletonMap(bidder1, MultiBidConfig.of(bidder1, 3, \"pref\"));\n+\n+        final Bid bidder1Bid1 = Bid.builder().id(\"bidder1Bid1\").price(BigDecimal.valueOf(3.67)).impid(\"i1\").build();\n+        final Bid bidder1Bid2 = Bid.builder().id(\"bidder1Bid2\").price(BigDecimal.valueOf(4.98)).impid(\"i1\").build();\n+        final Bid bidder1Bid3 = Bid.builder().id(\"bidder1Bid3\").price(BigDecimal.valueOf(1.08)).impid(\"i1\").build();\n+\n+        final List<BidderResponse> bidderResponses = singletonList(\n+                BidderResponse.of(bidder1,\n+                        givenSeatBid(\n+                                BidderBid.of(bidder1Bid1, banner, null),  // extra bid\n+                                BidderBid.of(bidder1Bid2, banner, null),  // extra bid\n+                                BidderBid.of(bidder1Bid3, banner, null)),\n+                        100));\n+\n+        // when\n+        final BidResponse result =\n+                bidResponseCreator.create(bidderResponses, auctionContext, CACHE_INFO, multiBidMap, false).result();\n+\n+        final Map<String, String> expectedWinningBidTargetingMap = new HashMap<>();\n+        expectedWinningBidTargetingMap.put(\"hb_pb\", \"4.50\");\n+        expectedWinningBidTargetingMap.put(\"hb_bidder\", bidder1);\n+\n+        // then\n+        assertThat(result.getSeatbid())\n+                .flatExtracting(SeatBid::getBid).hasSize(3)\n+                .extracting(\n+                        Bid::getId,\n+                        bid -> toExtPrebid(bid.getExt()).getPrebid().getTargeting())\n+                .containsOnly(\n+                        tuple(\"bidder1Bid2\", expectedWinningBidTargetingMap),\n+                        tuple(\"bidder1Bid1\", null),\n+                        tuple(\"bidder1Bid3\", null));\n+    }\n+\n     @Test\n     public void shouldReduceAndPopulateTargetingKeywordsForExtraBidsWhenCodePrefixIsDefined() {\n         // given\n@@ -1766,17 +1816,17 @@ public void shouldNotPopulateBidderKeysTargetingIfIncludeBidderKeysFlagIsFalse()\n                 identity(),\n                 extBuilder -> extBuilder.targeting(ExtRequestTargeting.builder()\n                         .pricegranularity(mapper.valueToTree(\n-                                ExtPriceGranularity.of(2, singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5),\n-                                        BigDecimal.valueOf(0.5))))))\n+                                ExtPriceGranularity.of(2, singletonList(\n+                                        ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5))))))\n                         .includewinners(true)\n                         .includebidderkeys(false)\n                         .includeformat(false)\n                         .build()),\n                 givenImp()));\n \n         final Bid bid = Bid.builder().id(\"bidId\").price(BigDecimal.valueOf(5.67)).impid(IMP_ID).build();\n-        final List<BidderResponse> bidderResponses = singletonList(BidderResponse.of(\"bidder1\",\n-                givenSeatBid(BidderBid.of(bid, banner, \"USD\")), 100));\n+        final List<BidderResponse> bidderResponses = singletonList(\n+                BidderResponse.of(\"bidder1\", givenSeatBid(BidderBid.of(bid, banner, \"USD\")), 100));\n \n         final BidRequestCacheInfo cacheInfo = BidRequestCacheInfo.builder()\n                 .doCaching(true)"
  }
]
