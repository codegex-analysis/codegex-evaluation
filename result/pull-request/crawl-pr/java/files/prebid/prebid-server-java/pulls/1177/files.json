[
  {
    "sha": "45407b57d15103ea30b3428aaf417103476e5e82",
    "filename": "src/main/java/org/prebid/server/bidder/beachfront/BeachfrontBidder.java",
    "status": "modified",
    "additions": 27,
    "deletions": 25,
    "changes": 52,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/3726b5b66899ab3f4445f2198130a6d8fc7b2f10/src/main/java/org/prebid/server/bidder/beachfront/BeachfrontBidder.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/3726b5b66899ab3f4445f2198130a6d8fc7b2f10/src/main/java/org/prebid/server/bidder/beachfront/BeachfrontBidder.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/bidder/beachfront/BeachfrontBidder.java?ref=3726b5b66899ab3f4445f2198130a6d8fc7b2f10",
    "patch": "@@ -54,9 +54,9 @@\n     private static final String NURL_VIDEO_TYPE = \"nurl\";\n     private static final String ADM_VIDEO_TYPE = \"adm\";\n     private static final String BEACHFRONT_NAME = \"BF_PREBID_S2S\";\n-    private static final String BEACHFRONT_VERSION = \"0.9.1\";\n+    private static final String BEACHFRONT_VERSION = \"0.9.2\";\n     private static final String NURL_VIDEO_ENDPOINT_SUFFIX = \"&prebidserver\";\n-    private static final String TEST_IP = \"192.168.255.255\";\n+    private static final String FAKE_IP = \"255.255.255.255\";\n \n     private static final BigDecimal MIN_BID_FLOOR = BigDecimal.valueOf(0.01);\n     private static final int DEFAULT_VIDEO_WIDTH = 300;\n@@ -235,7 +235,7 @@ private static String getAppId(ExtImpBeachfront extImpBeachfront, boolean isBann\n     }\n \n     private static BigDecimal checkBidFloor(BigDecimal bidFloor) {\n-        return bidFloor.compareTo(MIN_BID_FLOOR) > 0 ? bidFloor : BigDecimal.ZERO;\n+        return bidFloor != null && bidFloor.compareTo(MIN_BID_FLOOR) > 0 ? bidFloor : BigDecimal.ZERO;\n     }\n \n     /**\n@@ -272,7 +272,7 @@ private static User makeUser(User user) {\n      */\n     private static void populateDeviceFields(BeachfrontBannerRequest.BeachfrontBannerRequestBuilder builder,\n                                              Device device) {\n-        builder.ip(getIP(device.getIp()));\n+        builder.ip(device.getIp());\n         builder.deviceModel(device.getModel());\n         builder.deviceOs(device.getOs());\n         if (device.getDnt() != null) {\n@@ -283,10 +283,6 @@ private static void populateDeviceFields(BeachfrontBannerRequest.BeachfrontBanne\n         }\n     }\n \n-    private static String getIP(String ip) {\n-        return StringUtils.isBlank(ip) || ip.equals(\"::1\") || ip.equals(\"127.0.0.1\") ? TEST_IP : ip;\n-    }\n-\n     private static int getSecure(String page) {\n         return StringUtils.contains(page, \"https\") ? 1 : 0;\n     }\n@@ -307,15 +303,19 @@ private static int getSecure(String page) {\n             }\n \n             final String videoResponseType = extImpBeachfront.getVideoResponseType();\n-            final String responseType = StringUtils.isBlank(videoResponseType) ? ADM_VIDEO_TYPE : videoResponseType;\n             final BeachfrontVideoRequest.BeachfrontVideoRequestBuilder requestBuilder = BeachfrontVideoRequest.builder()\n-                    .appId(appId)\n-                    .videoResponseType(responseType);\n+                    .appId(appId);\n+            final String responseType;\n \n-            if (responseType.equals(NURL_VIDEO_TYPE)) {\n+            if (videoResponseType != null && videoResponseType.equals(NURL_VIDEO_TYPE)) {\n                 requestBuilder.isPrebid(true);\n+                responseType = videoResponseType;\n+            } else {\n+                responseType = ADM_VIDEO_TYPE;\n             }\n \n+            requestBuilder.videoResponseType(responseType);\n+\n             final BidRequest.BidRequestBuilder bidRequestBuilder = bidRequest.toBuilder();\n             int secure = 0;\n             final Site site = bidRequest.getSite();\n@@ -325,29 +325,30 @@ private static int getSecure(String page) {\n                 secure = getSecure(site.getPage());\n             }\n \n-            final App app = bidRequest.getApp();\n-            if (app != null && StringUtils.isBlank(app.getDomain()) && StringUtils.isNotBlank(app.getBundle())) {\n-                final String trimmedBundle = StringUtils.removeStart(app.getBundle(), \"_\");\n-                final String[] split = StringUtils.removeEnd(trimmedBundle, \"_\").split(\"\\\\.\");\n-\n-                if (split.length > 1) {\n-                    bidRequestBuilder.app(app.toBuilder().domain(String.format(\"%s.%s\", split[1], split[0])).build());\n-                }\n-            }\n-\n             final Device device = bidRequest.getDevice();\n             if (device != null) {\n                 final Device.DeviceBuilder deviceBuilder = device.toBuilder();\n                 final Integer devicetype = device.getDevicetype();\n                 if (devicetype == null || devicetype == 0) {\n                     deviceBuilder.devicetype(bidRequest.getSite() != null ? 2 : 1);\n                 }\n-                if (StringUtils.isNotBlank(device.getIp())) {\n-                    deviceBuilder.ip(getIP(device.getIp()));\n+                if (StringUtils.isBlank(device.getIp()) && responseType.equals(ADM_VIDEO_TYPE)) {\n+                    deviceBuilder.ip(FAKE_IP);\n                 }\n+\n                 bidRequestBuilder.device(deviceBuilder.build());\n             }\n \n+            final App app = bidRequest.getApp();\n+            if (app != null && StringUtils.isBlank(app.getDomain()) && StringUtils.isNotBlank(app.getBundle())) {\n+                final String trimmedBundle = StringUtils.removeStart(app.getBundle(), \"_\");\n+                final String[] split = StringUtils.removeEnd(trimmedBundle, \"_\").split(\"\\\\.\");\n+\n+                if (split.length > 1) {\n+                    bidRequestBuilder.app(app.toBuilder().domain(String.format(\"%s.%s\", split[1], split[0])).build());\n+                }\n+            }\n+\n             final Imp.ImpBuilder impBuilder = imp.toBuilder()\n                     .banner(null)\n                     .ext(null)\n@@ -420,7 +421,8 @@ private static void addDeviceHeaders(MultiMap headers, Device device) {\n                     responseBody,\n                     mapper.mapper().getTypeFactory().constructCollectionType(List.class, BeachfrontResponseSlot.class));\n         } catch (IOException ex) {\n-            throw new PreBidException(ex.getMessage());\n+            throw new PreBidException(\"server response failed to unmarshal \"\n+                    + \"as valid rtb. Run with request.debug = 1 for more info\");\n         }\n     }\n "
  },
  {
    "sha": "277b492e5f299ba10bb854502b637271f45ab0a8",
    "filename": "src/test/java/org/prebid/server/bidder/beachfront/BeachfrontBidderTest.java",
    "status": "modified",
    "additions": 32,
    "deletions": 10,
    "changes": 42,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/3726b5b66899ab3f4445f2198130a6d8fc7b2f10/src/test/java/org/prebid/server/bidder/beachfront/BeachfrontBidderTest.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/3726b5b66899ab3f4445f2198130a6d8fc7b2f10/src/test/java/org/prebid/server/bidder/beachfront/BeachfrontBidderTest.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/java/org/prebid/server/bidder/beachfront/BeachfrontBidderTest.java?ref=3726b5b66899ab3f4445f2198130a6d8fc7b2f10",
    "patch": "@@ -268,9 +268,8 @@ public void makeHttpRequestsShouldReturnExpectedBannerRequest() {\n                         .deviceOs(\"nokia\")\n                         .isMobile(1)\n                         .user(User.builder().id(\"userId\").buyeruid(\"buid\").build())\n-                        .adapterVersion(\"0.9.1\")\n+                        .adapterVersion(\"0.9.2\")\n                         .adapterName(\"BF_PREBID_S2S\")\n-                        .ip(\"192.168.255.255\")\n                         .requestId(\"153\")\n                         .build());\n     }\n@@ -280,7 +279,7 @@ public void makeHttpRequestsShouldReturnExpectedAdmAndNurlVideoRequests() {\n         // given\n         final BidRequest bidRequest = BidRequest.builder()\n                 .app(App.builder().bundle(\"prefix_test1.test2.test3_suffix\").build())\n-                .device(Device.builder().ip(\"127.0.0.1\").build())\n+                .device(Device.builder().build())\n                 .imp(asList(\n                         givenImp(impBuilder -> impBuilder.ext(mapper.valueToTree(ExtPrebid.of(null,\n                                 mapper.valueToTree(ExtImpBeachfront.of(\"appId2\", null, BigDecimal.TEN, \"nurl\")))))),\n@@ -293,10 +292,6 @@ public void makeHttpRequestsShouldReturnExpectedAdmAndNurlVideoRequests() {\n         // then\n         assertThat(result.getErrors()).isEmpty();\n \n-        final BidRequest.BidRequestBuilder expectedRequestBuilder = BidRequest.builder()\n-                .device(Device.builder().ip(\"192.168.255.255\").devicetype(1).build())\n-                .cur(singletonList(\"USD\"));\n-\n         final Imp.ImpBuilder expectedImpBuilder = Imp.builder()\n                 .video(Video.builder().w(300).h(250).build())\n                 .secure(0);\n@@ -307,25 +302,50 @@ public void makeHttpRequestsShouldReturnExpectedAdmAndNurlVideoRequests() {\n                                 .isPrebid(true)\n                                 .appId(\"appId2\")\n                                 .videoResponseType(\"nurl\")\n-                                .request(expectedRequestBuilder\n+                                .request(BidRequest.builder()\n+                                        .device(Device.builder().devicetype(1).build())\n                                         .app(App.builder().bundle(\"prefix_test1.test2.test3_suffix\")\n                                                 .domain(\"test2.prefix_test1\").build())\n                                         .imp(singletonList(expectedImpBuilder.id(\"123\")\n                                                 .bidfloor(BigDecimal.TEN).build()))\n+                                        .cur(singletonList(\"USD\"))\n                                         .build())\n                                 .build(),\n                         BeachfrontVideoRequest.builder()\n                                 .appId(\"appId\")\n                                 .videoResponseType(\"adm\")\n-                                .request(expectedRequestBuilder\n+                                .request(BidRequest.builder()\n+                                        .device(Device.builder().ip(\"255.255.255.255\").devicetype(1).build())\n                                         .app(App.builder().bundle(\"prefix_test1.test2.test3_suffix\")\n                                                 .domain(\"test2.prefix_test1\").build())\n                                         .imp(singletonList(expectedImpBuilder.id(\"234\")\n                                                 .bidfloor(BigDecimal.ONE).build()))\n+                                        .cur(singletonList(\"USD\"))\n                                         .build())\n                                 .build());\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldCreateAdmRequestForEveryUnknownResponseType() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(\n+                        givenImp(impBuilder -> impBuilder.ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                mapper.valueToTree(ExtImpBeachfront.of(\"appId2\", null, null, \"unknownType\"))))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = beachfrontBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BeachfrontVideoRequest.class))\n+                .extracting(BeachfrontVideoRequest::getVideoResponseType)\n+                .containsExactly(\"adm\");\n+    }\n+\n     @Test\n     public void makeBidsShouldReturnEmptyResultWhenResponseBodyHasEmptyArray() {\n         // given\n@@ -350,7 +370,9 @@ public void makeBidsShouldReturnErrorWhenResponseBodyIsInvalid() {\n         // then\n         assertThat(result.getValue()).isEmpty();\n         assertThat(result.getErrors()).hasSize(1);\n-        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .isEqualTo(\"server response failed to unmarshal as valid rtb. \"\n+                        + \"Run with request.debug = 1 for more info\");\n     }\n \n     @Test"
  },
  {
    "sha": "756396529af59cf698a40ad4505d5755b9fe23ed",
    "filename": "src/test/resources/org/prebid/server/it/openrtb2/beachfront/test-beachfront-bid-request-3.json",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/3726b5b66899ab3f4445f2198130a6d8fc7b2f10/src/test/resources/org/prebid/server/it/openrtb2/beachfront/test-beachfront-bid-request-3.json",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/3726b5b66899ab3f4445f2198130a6d8fc7b2f10/src/test/resources/org/prebid/server/it/openrtb2/beachfront/test-beachfront-bid-request-3.json",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/resources/org/prebid/server/it/openrtb2/beachfront/test-beachfront-bid-request-3.json?ref=3726b5b66899ab3f4445f2198130a6d8fc7b2f10",
    "patch": "@@ -22,7 +22,7 @@\n     \"buyeruid\": \"BF-UID\"\n   },\n   \"adapterName\": \"BF_PREBID_S2S\",\n-  \"adapterVersion\": \"0.9.1\",\n+  \"adapterVersion\": \"0.9.2\",\n   \"ip\": \"193.168.244.1\",\n   \"requestId\": \"tid\"\n-}\n\\ No newline at end of file\n+}"
  }
]
