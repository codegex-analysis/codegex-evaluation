[
  {
    "sha": "98868571048ee89c9f67e74deb3493cff165db2e",
    "filename": "src/main/java/org/prebid/server/bidder/jixie/JixieBidder.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/java/org/prebid/server/bidder/jixie/JixieBidder.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/java/org/prebid/server/bidder/jixie/JixieBidder.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/bidder/jixie/JixieBidder.java?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,107 @@\n+package org.prebid.server.bidder.jixie;\n+\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Jixie {@link Bidder} implementation.\n+ */\n+public class JixieBidder implements Bidder<BidRequest> {\n+\n+    private static final String DEFAULT_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public JixieBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        return Result.withValue(HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(resolveHeaders(request.getDevice(), request.getSite()))\n+                .payload(request)\n+                .body(mapper.encode(request))\n+                .build());\n+    }\n+\n+    private static MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER, device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIp());\n+        }\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, site.getPage());\n+\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.withError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidResponse bidResponse) {\n+        if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidResponse bidResponse) {\n+        final String responseCur = bidResponse.getCur();\n+        final String bidCur = StringUtils.isNotBlank(responseCur) ? responseCur : DEFAULT_CURRENCY;\n+\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, getBidType(bid.getAdm()), bidCur))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static BidType getBidType(String adm) {\n+\n+        if (StringUtils.containsAny(adm, \"<?xml\", \"<vast\")) {\n+            return BidType.video;\n+        }\n+        return BidType.banner;\n+    }\n+}"
  },
  {
    "sha": "ee9d29f28e7f549515d08fe9e8a00b3e7b1954ab",
    "filename": "src/main/java/org/prebid/server/proto/openrtb/ext/request/jixie/ExtImpJixie.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/java/org/prebid/server/proto/openrtb/ext/request/jixie/ExtImpJixie.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/java/org/prebid/server/proto/openrtb/ext/request/jixie/ExtImpJixie.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/proto/openrtb/ext/request/jixie/ExtImpJixie.java?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,21 @@\n+package org.prebid.server.proto.openrtb.ext.request.jixie;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtImpJixie {\n+\n+    String unit;\n+\n+    @JsonProperty(\"accountid\")\n+    String accountId;\n+\n+    @JsonProperty(\"jxprop1\")\n+    String jxProp1;\n+\n+    @JsonProperty(\"jxprop2\")\n+    String jxProp2;\n+}"
  },
  {
    "sha": "25a90a947112dc75427b07de0f115b0118745d20",
    "filename": "src/main/java/org/prebid/server/spring/config/bidder/JixieConfiguration.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/java/org/prebid/server/spring/config/bidder/JixieConfiguration.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/java/org/prebid/server/spring/config/bidder/JixieConfiguration.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/spring/config/bidder/JixieConfiguration.java?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,56 @@\n+package org.prebid.server.spring.config.bidder;\n+\n+import org.prebid.server.bidder.BidderDeps;\n+import org.prebid.server.bidder.jixie.JixieBidder;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.spring.config.bidder.model.BidderConfigurationProperties;\n+import org.prebid.server.spring.config.bidder.model.UsersyncConfigurationProperties;\n+import org.prebid.server.spring.config.bidder.util.BidderDepsAssembler;\n+import org.prebid.server.spring.config.bidder.util.BidderInfoCreator;\n+import org.prebid.server.spring.config.bidder.util.UsersyncerCreator;\n+import org.prebid.server.spring.env.YamlPropertySourceFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+import javax.validation.constraints.NotBlank;\n+\n+@Configuration\n+@PropertySource(value = \"classpath:/bidder-config/jixie.yaml\", factory = YamlPropertySourceFactory.class)\n+public class JixieConfiguration {\n+\n+    private static final String BIDDER_NAME = \"jixie\";\n+\n+    @Value(\"${external-url}\")\n+    @NotBlank\n+    private String externalUrl;\n+\n+    @Autowired\n+    private JacksonMapper mapper;\n+\n+    @Autowired\n+    @Qualifier(\"jixieConfigurationProperties\")\n+    private BidderConfigurationProperties configProperties;\n+\n+    @Bean(\"jixieConfigurationProperties\")\n+    @ConfigurationProperties(\"adapters.jixie\")\n+    BidderConfigurationProperties configurationProperties() {\n+        return new BidderConfigurationProperties();\n+    }\n+\n+    @Bean\n+    BidderDeps jixieBidderDeps() {\n+        final UsersyncConfigurationProperties usersync = configProperties.getUsersync();\n+\n+        return BidderDepsAssembler.forBidder(BIDDER_NAME)\n+                .withConfig(configProperties)\n+                .bidderInfo(BidderInfoCreator.create(configProperties))\n+                .usersyncerCreator(UsersyncerCreator.create(usersync, externalUrl))\n+                .bidderCreator(() -> new JixieBidder(configProperties.getEndpoint(), mapper))\n+                .assemble();\n+    }\n+}"
  },
  {
    "sha": "1ba95714aeb3be019a1a6491e4cf0d2ebed57fc2",
    "filename": "src/main/resources/bidder-config/jixie.yaml",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/resources/bidder-config/jixie.yaml",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/resources/bidder-config/jixie.yaml",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/resources/bidder-config/jixie.yaml?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,23 @@\n+adapters:\n+  jixie:\n+    enabled: false\n+    endpoint: https://hb.jixie.io/v2/hbsvrpost\n+    pbs-enforces-gdpr: true\n+    pbs-enforces-ccpa: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: contact@jixie.io\n+      app-media-types:\n+      site-media-types:\n+        - banner\n+        - video\n+      supported-vendors:\n+      vendor-id: 0\n+    usersync:\n+      url: https://id.jixie.io/api/sync?pid=&gdpr={{gdpr}}&gdpr_consent={{gdpr_consent}}&us_privacy={{us_privacy}}&redirect=\n+      redirect-url: /setuid?bidder=jixie&gdpr={{gdpr}}&gdpr_consent={{gdpr_consent}}&us_privacy={{us_privacy}}&uid=%%JXUID%%\n+      cookie-family-name: jixie\n+      type: redirect\n+      support-cors: false"
  },
  {
    "sha": "732b05f8ca7e6790fce6066d24a42ff444a76482",
    "filename": "src/main/resources/static/bidder-params/jixie.json",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/resources/static/bidder-params/jixie.json",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/main/resources/static/bidder-params/jixie.json",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/resources/static/bidder-params/jixie.json?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,26 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+  \"title\": \"Jixie Adapter Params\",\n+  \"description\": \"A schema which validates params accepted by the Jixie adapter\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"unit\" : {\n+      \"type\": \"string\",\n+      \"description\": \"The unit code of an inventory target\",\n+      \"minLength\": 18\n+    },\n+    \"accountid\" : {\n+      \"type\": \"string\",\n+      \"description\": \"The accountid of an inventory target\"\n+    },\n+    \"jxprop1\" : {\n+      \"type\": \"string\",\n+      \"description\": \"jxprop1 of an inventory target\"\n+    },\n+    \"jxprop2\" : {\n+      \"type\": \"string\",\n+      \"description\": \"jxprop2 of an inventory target\"\n+    }\n+  },\n+  \"required\": [\"unit\"]\n+}"
  },
  {
    "sha": "8b7ba5eeee6617ace7248e944c8a767fa0986f66",
    "filename": "src/test/java/org/prebid/server/bidder/jixie/JixieBidderTest.java",
    "status": "added",
    "additions": 254,
    "deletions": 0,
    "changes": 254,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/java/org/prebid/server/bidder/jixie/JixieBidderTest.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/java/org/prebid/server/bidder/jixie/JixieBidderTest.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/java/org/prebid/server/bidder/jixie/JixieBidderTest.java?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,254 @@\n+package org.prebid.server.bidder.jixie;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.jixie.ExtImpJixie;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class JixieBidderTest extends VertxTest {\n+\n+    public static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private JixieBidder jixieBidder;\n+\n+    @Before\n+    public void setUp() {\n+        jixieBidder = new JixieBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new JixieBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldMakeOneRequestWithAllImps() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                identity(),\n+                requestBuilder -> requestBuilder.imp(Arrays.asList(\n+                        givenImp(identity()),\n+                        givenImp(identity()))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = jixieBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .hasSize(2);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = jixieBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = jixieBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = jixieBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .allSatisfy(error -> {\n+                    assertThat(error.getType()).isEqualTo(BidderError.Type.bad_server_response);\n+                    assertThat(error.getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+                });\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfAdmContainsVast() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").xNative(Native.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.adm(\"contains <vast\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = jixieBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsExactly(BidderBid.of(Bid.builder().adm(\"contains <vast\").build(), video, \"EUR\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfAdmContainsXML() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                givenBidRequest(identity()),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.adm(\"contains <?xml\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = jixieBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsExactly(BidderBid.of(Bid.builder().adm(\"contains <?xml\").build(), video, \"EUR\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCorrectlyAddHeaders() {\n+        // given\n+        final Imp firstImp = givenImp(identity());\n+\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .device(Device.builder().ua(\"someUa\").ip(\"someIp\").build())\n+                .site(Site.builder().page(\"somePage\").build())\n+                .imp(singletonList(firstImp))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = jixieBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getValue())\n+                .flatExtracting(res -> res.getHeaders().entries())\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsExactlyInAnyOrder(\n+                        tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()),\n+                        tuple(HttpUtil.USER_AGENT_HEADER.toString(), \"someUa\"),\n+                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"someIp\"),\n+                        tuple(HttpUtil.REFERER_HEADER.toString(), \"somePage\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidByDefault() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                givenBidRequest(identity()),\n+                mapper.writeValueAsString(givenBidResponse(identity())));\n+\n+        // when\n+        final Result<List<BidderBid>> result = jixieBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsExactly(BidderBid.of(Bid.builder().build(), banner, \"EUR\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnUSDCurrencyIfCurrencyNotPresent() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                givenBidRequest(identity()),\n+                mapper.writeValueAsString(BidResponse.builder()\n+                        .cur(\"\")\n+                        .seatbid(singletonList(SeatBid.builder()\n+                                .bid(singletonList(Bid.builder().build()))\n+                                .build()))\n+                        .build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = jixieBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsExactly(BidderBid.of(Bid.builder().build(), banner, \"USD\"));\n+    }\n+\n+    private static BidRequest givenBidRequest(\n+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer,\n+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> requestCustomizer) {\n+        return requestCustomizer.apply(BidRequest.builder()\n+                .imp(singletonList(givenImp(impCustomizer))))\n+                .build();\n+    }\n+\n+    private static BidRequest givenBidRequest(\n+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return givenBidRequest(impCustomizer, identity());\n+    }\n+\n+    private static Imp givenImp(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return impCustomizer.apply(Imp.builder()\n+                .id(\"123\"))\n+                .banner(Banner.builder().build())\n+                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                        ExtImpJixie.of(\"unit\", \"accountId\", \"jxProp1\", \"jxProp2\"))))\n+                .build();\n+    }\n+\n+    private static BidResponse givenBidResponse(Function<Bid.BidBuilder, Bid.BidBuilder> bidCustomizer) {\n+        return BidResponse.builder()\n+                .cur(\"EUR\")\n+                .seatbid(singletonList(SeatBid.builder()\n+                        .bid(singletonList(bidCustomizer.apply(Bid.builder()).build()))\n+                        .build()))\n+                .build();\n+    }\n+\n+    private static HttpCall<BidRequest> givenHttpCall(BidRequest bidRequest, String body) {\n+        return HttpCall.success(HttpRequest.<BidRequest>builder().payload(bidRequest).build(),\n+                HttpResponse.of(200, null, body), null);\n+    }\n+}"
  },
  {
    "sha": "3a834f8673531a59d5a58b43b1a6ad5a9ba7a607",
    "filename": "src/test/java/org/prebid/server/it/JixieTest.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/java/org/prebid/server/it/JixieTest.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/java/org/prebid/server/it/JixieTest.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/java/org/prebid/server/it/JixieTest.java?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,59 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class JixieTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromJixie() throws IOException, JSONException {\n+        // given\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/jixie-exchange\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withHeader(\"User-Agent\", equalTo(\"testUa\"))\n+                .withHeader(\"X-Forwarded-For\", equalTo(\"193.168.244.1\"))\n+                .withHeader(\"Referer\", equalTo(\"awesomePage\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/jixie/test-jixie-bid-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/jixie/test-jixie-bid-response.json\"))));\n+\n+        // pre-bid cache\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/cache\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/jixie/test-cache-jixie-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/jixie/test-cache-jixie-response.json\"))));\n+\n+        // when\n+        final Response response = given(SPEC)\n+                .header(\"Referer\", \"http://www.example.com\")\n+                .header(\"X-Forwarded-For\", \"193.168.244.1\")\n+                .header(\"User-Agent\", \"userAgent\")\n+                .header(\"Origin\", \"http://www.example.com\")\n+                // this uids cookie value stands for {\"uids\":{\"jixie\":\"JX-UID\"}}\n+                .cookie(\"uids\", \"eyJ1aWRzIjp7ImppeGllIjoiSlgtVUlEIn19\")\n+                .body(jsonFrom(\"openrtb2/jixie/test-auction-jixie-request.json\"))\n+                .post(\"/openrtb2/auction\");\n+\n+        // then\n+        final String expectedAuctionResponse = openrtbAuctionResponseFrom(\n+                \"openrtb2/jixie/test-auction-jixie-response.json\",\n+                response, singletonList(\"jixie\"));\n+\n+        JSONAssert.assertEquals(expectedAuctionResponse, response.asString(), JSONCompareMode.NON_EXTENSIBLE);\n+    }\n+}"
  },
  {
    "sha": "20501c37754d2db74394bc161e39b1593c54e53a",
    "filename": "src/test/resources/org/prebid/server/it/openrtb2/jixie/test-auction-jixie-request.json",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-auction-jixie-request.json",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-auction-jixie-request.json",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-auction-jixie-request.json?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,57 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"impId001\",\n+      \"banner\": {\n+        \"w\": 300,\n+        \"h\": 250\n+      },\n+      \"ext\": {\n+        \"jixie\": {\n+          \"unit\": \"possible_unit_value\"\n+        }\n+      }\n+    }\n+  ],\n+  \"device\": {\n+    \"ua\": \"testUa\",\n+    \"ip\": \"193.168.244.1\"\n+  },\n+  \"site\": {\n+    \"page\": \"awesomePage\"\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"targeting\": {\n+        \"pricegranularity\": {\n+          \"precision\": 2,\n+          \"ranges\": [\n+            {\n+              \"max\": 20,\n+              \"increment\": 0.1\n+            }\n+          ]\n+        }\n+      },\n+      \"cache\": {\n+        \"bids\": {}\n+      },\n+      \"auctiontimestamp\": 1000\n+    }\n+  },\n+  \"regs\": {\n+    \"ext\": {\n+      \"gdpr\": 0\n+    }\n+  }\n+}"
  },
  {
    "sha": "b3d206c38e5adecd6fd2e2f9a09280344530c540",
    "filename": "src/test/resources/org/prebid/server/it/openrtb2/jixie/test-auction-jixie-response.json",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-auction-jixie-response.json",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-auction-jixie-response.json",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-auction-jixie-response.json?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,58 @@\n+{\n+  \"id\": \"tid\",\n+  \"seatbid\": [\n+    {\n+      \"bid\": [\n+        {\n+          \"id\": \"bid001\",\n+          \"impid\": \"impId001\",\n+          \"price\": 3.33,\n+          \"adm\": \"adm001\",\n+          \"adid\": \"adid001\",\n+          \"cid\": \"cid001\",\n+          \"crid\": \"crid001\",\n+          \"w\": 300,\n+          \"h\": 250,\n+          \"ext\": {\n+            \"prebid\": {\n+              \"type\": \"banner\",\n+              \"targeting\": {\n+                \"hb_pb\": \"3.30\",\n+                \"hb_size_jixie\": \"300x250\",\n+                \"hb_bidder_jixie\": \"jixie\",\n+                \"hb_cache_path\": \"{{ cache.path }}\",\n+                \"hb_size\": \"300x250\",\n+                \"hb_cache_host_jixie\": \"{{ cache.host }}\",\n+                \"hb_cache_path_jixie\": \"{{ cache.path }}\",\n+                \"hb_cache_id_jixie\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\",\n+                \"hb_bidder\": \"jixie\",\n+                \"hb_cache_id\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\",\n+                \"hb_pb_jixie\": \"3.30\",\n+                \"hb_cache_host\": \"{{ cache.host }}\"\n+              },\n+              \"cache\": {\n+                \"bids\": {\n+                  \"url\": \"{{ cache.resource_url }}f0ab9105-cb21-4e59-b433-70f5ad6671cb\",\n+                  \"cacheId\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\"\n+                }\n+              }\n+            }\n+          }\n+        }\n+      ],\n+      \"seat\": \"jixie\",\n+      \"group\": 0\n+    }\n+  ],\n+  \"cur\": \"USD\",\n+  \"ext\": {\n+    \"responsetimemillis\": {\n+      \"jixie\": \"{{ jixie.response_time_ms }}\",\n+      \"cache\": \"{{ cache.response_time_ms }}\"\n+    },\n+    \"prebid\": {\n+      \"auctiontimestamp\": 1000\n+    },\n+    \"tmaxrequest\": 5000\n+  }\n+}"
  },
  {
    "sha": "60845624d518066d33c8eb153f720717a768c660",
    "filename": "src/test/resources/org/prebid/server/it/openrtb2/jixie/test-cache-jixie-request.json",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-cache-jixie-request.json",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-cache-jixie-request.json",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-cache-jixie-request.json?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,18 @@\n+{\n+  \"puts\": [\n+    {\n+      \"type\": \"json\",\n+      \"value\": {\n+        \"id\": \"bid001\",\n+        \"impid\": \"impId001\",\n+        \"price\": 3.33,\n+        \"adm\": \"adm001\",\n+        \"adid\": \"adid001\",\n+        \"cid\": \"cid001\",\n+        \"crid\": \"crid001\",\n+        \"w\": 300,\n+        \"h\": 250\n+      }\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "93d0b8de2cda0b2e7ab0d877afe72eab883fd211",
    "filename": "src/test/resources/org/prebid/server/it/openrtb2/jixie/test-cache-jixie-response.json",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-cache-jixie-response.json",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-cache-jixie-response.json",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-cache-jixie-response.json?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,7 @@\n+{\n+  \"responses\": [\n+    {\n+      \"uuid\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\"\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "96b5094d7cd8460140a22141c3fb4298bcc0fa5e",
    "filename": "src/test/resources/org/prebid/server/it/openrtb2/jixie/test-jixie-bid-request.json",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-jixie-bid-request.json",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-jixie-bid-request.json",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-jixie-bid-request.json?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,68 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"impId001\",\n+      \"banner\": {\n+        \"w\" : 300,\n+        \"h\" : 250\n+      },\n+      \"ext\": {\n+        \"bidder\": {\n+          \"unit\": \"possible_unit_value\"\n+        }\n+      }\n+    }\n+  ],\n+  \"site\": {\n+    \"page\": \"awesomePage\",\n+    \"ext\": {\n+      \"amp\": 0\n+    }\n+  },\n+  \"device\": {\n+    \"ua\": \"testUa\",\n+    \"ip\": \"193.168.244.1\"\n+  },\n+  \"user\": {\n+    \"buyeruid\" : \"JX-UID\"\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"regs\": {\n+    \"ext\": {\n+      \"gdpr\": 0\n+    }\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"targeting\": {\n+        \"pricegranularity\": {\n+          \"precision\": 2,\n+          \"ranges\": [\n+            {\n+              \"max\": 20,\n+              \"increment\": 0.1\n+            }\n+          ]\n+        },\n+        \"includewinners\": true,\n+        \"includebidderkeys\": true\n+      },\n+      \"cache\": {\n+        \"bids\": {}\n+      },\n+      \"auctiontimestamp\": 1000,\n+      \"channel\" : {\n+        \"name\" : \"web\"\n+      }\n+    }\n+  }\n+}"
  },
  {
    "sha": "95a93284e04f5e1a568d0cf504b282f40a1e6906",
    "filename": "src/test/resources/org/prebid/server/it/openrtb2/jixie/test-jixie-bid-response.json",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-jixie-bid-response.json",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-jixie-bid-response.json",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/resources/org/prebid/server/it/openrtb2/jixie/test-jixie-bid-response.json?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -0,0 +1,20 @@\n+{\n+  \"id\": \"tid\",\n+  \"seatbid\": [\n+    {\n+      \"bid\": [\n+        {\n+          \"id\": \"bid001\",\n+          \"impid\": \"impId001\",\n+          \"price\": 3.33,\n+          \"adid\": \"adid001\",\n+          \"crid\": \"crid001\",\n+          \"cid\": \"cid001\",\n+          \"adm\": \"adm001\",\n+          \"h\": 250,\n+          \"w\": 300\n+        }\n+      ]\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "848cb26c3bb611471645a337366a009c373d492d",
    "filename": "src/test/resources/org/prebid/server/it/test-application.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/test-application.properties",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/79d63d21d0cc233bf79c51d94cc87f55e3a7fe68/src/test/resources/org/prebid/server/it/test-application.properties",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/resources/org/prebid/server/it/test-application.properties?ref=79d63d21d0cc233bf79c51d94cc87f55e3a7fe68",
    "patch": "@@ -167,6 +167,10 @@ adapters.ix.enabled=true\n adapters.ix.endpoint=http://localhost:8090/ix-exchange\n adapters.ix.pbs-enforces-gdpr=true\n adapters.ix.usersync.url=//ix-usersync\n+adapters.jixie.enabled=true\n+adapters.jixie.endpoint=http://localhost:8090/jixie-exchange\n+adapters.jixie.pbs-enforces-gdpr=true\n+adapters.jixie.usersync.url=//jixie-usersync\n adapters.kidoz.enabled=true\n adapters.kidoz.endpoint=http://localhost:8090/kidoz-exchange\n adapters.kidoz.pbs-enforces-gdpr=true"
  }
]
