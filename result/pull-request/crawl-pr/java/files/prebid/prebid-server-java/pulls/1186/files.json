[
  {
    "sha": "ca8c906276aa13038b1ef9dbceabad0e5d7397f2",
    "filename": "src/main/java/org/prebid/server/auction/ExchangeService.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/main/java/org/prebid/server/auction/ExchangeService.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/main/java/org/prebid/server/auction/ExchangeService.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/auction/ExchangeService.java?ref=e4a0097d7a87149f075c0d8f9dd554ccc79d21eb",
    "patch": "@@ -17,6 +17,7 @@\n import io.vertx.core.Future;\n import io.vertx.core.logging.Logger;\n import io.vertx.core.logging.LoggerFactory;\n+import io.vertx.ext.web.RoutingContext;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -146,6 +147,7 @@ public ExchangeService(long expectedCacheTime,\n         final UidsCookie uidsCookie = context.getUidsCookie();\n         final BidRequest bidRequest = context.getBidRequest();\n         final Timeout timeout = context.getTimeout();\n+        final RoutingContext routingContext = context.getRoutingContext();\n         final Account account = context.getAccount();\n         final List<String> debugWarnings = context.getDebugWarnings();\n \n@@ -166,6 +168,7 @@ public ExchangeService(long expectedCacheTime,\n                                 .map(bidderRequest -> requestBids(\n                                         bidderRequest,\n                                         auctionTimeout(timeout, cacheInfo.isDoCaching()),\n+                                        routingContext,\n                                         debugEnabled,\n                                         aliases))\n                                 .collect(Collectors.toList())))\n@@ -183,7 +186,7 @@ public ExchangeService(long expectedCacheTime,\n                         bidderToMultiBid,\n                         debugEnabled))\n                 .compose(bidResponse -> bidResponsePostProcessor.postProcess(\n-                        context.getRoutingContext(), uidsCookie, bidRequest, bidResponse, account));\n+                        routingContext, uidsCookie, bidRequest, bidResponse, account));\n     }\n \n     private BidderAliases aliases(BidRequest bidRequest) {\n@@ -891,14 +894,15 @@ private static BigDecimal bidAdjustmentForBidder(BidRequest bidRequest, String b\n      */\n     private Future<BidderResponse> requestBids(BidderRequest bidderRequest,\n                                                Timeout timeout,\n+                                               RoutingContext routingContext,\n                                                boolean debugEnabled,\n                                                BidderAliases aliases) {\n \n         final String bidderName = bidderRequest.getBidder();\n         final Bidder<?> bidder = bidderCatalog.bidderByName(aliases.resolveBidder(bidderName));\n         final long startTime = clock.millis();\n \n-        return httpBidderRequester.requestBids(bidder, bidderRequest, timeout, debugEnabled)\n+        return httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, debugEnabled)\n                 .map(seatBid -> BidderResponse.of(bidderName, seatBid, responseTime(startTime)));\n     }\n "
  },
  {
    "sha": "5e882e52800da20bd1117a2f3594bcbe27e75431",
    "filename": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java",
    "status": "modified",
    "additions": 44,
    "deletions": 3,
    "changes": 47,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/main/java/org/prebid/server/bidder/HttpBidderRequester.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/main/java/org/prebid/server/bidder/HttpBidderRequester.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/bidder/HttpBidderRequester.java?ref=e4a0097d7a87149f075c0d8f9dd554ccc79d21eb",
    "patch": "@@ -5,8 +5,11 @@\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.CompositeFuture;\n import io.vertx.core.Future;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.CaseInsensitiveHeaders;\n import io.vertx.core.logging.Logger;\n import io.vertx.core.logging.LoggerFactory;\n+import io.vertx.ext.web.RoutingContext;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.auction.ExchangeService;\n@@ -20,15 +23,19 @@\n import org.prebid.server.bidder.model.Result;\n import org.prebid.server.execution.Timeout;\n import org.prebid.server.proto.openrtb.ext.response.ExtHttpCall;\n+import org.prebid.server.util.HttpUtil;\n import org.prebid.server.vertx.http.HttpClient;\n import org.prebid.server.vertx.http.model.HttpClientResponse;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.Set;\n import java.util.concurrent.TimeoutException;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -46,6 +53,9 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(HttpBidderRequester.class);\n \n+    private static final Set<CharSequence> HEADERS_TO_COPY = Collections.unmodifiableSet(new HashSet<>(\n+            Arrays.asList(HttpUtil.SEC_GPC.toString())));\n+\n     private final HttpClient httpClient;\n     private final BidderRequestCompletionTrackerFactory completionTrackerFactory;\n     private final BidderErrorNotifier bidderErrorNotifier;\n@@ -62,13 +72,17 @@ public HttpBidderRequester(HttpClient httpClient,\n     /**\n      * Executes given request to a given bidder.\n      */\n-    public <T> Future<BidderSeatBid> requestBids(\n-            Bidder<T> bidder, BidderRequest bidderRequest, Timeout timeout, boolean debugEnabled) {\n+    public <T> Future<BidderSeatBid> requestBids(Bidder<T> bidder,\n+                                                 BidderRequest bidderRequest,\n+                                                 Timeout timeout,\n+                                                 RoutingContext routingContext,\n+                                                 boolean debugEnabled) {\n         final BidRequest bidRequest = bidderRequest.getBidRequest();\n \n         final Result<List<HttpRequest<T>>> httpRequestsWithErrors = bidder.makeHttpRequests(bidRequest);\n         final List<BidderError> bidderErrors = httpRequestsWithErrors.getErrors();\n-        final List<HttpRequest<T>> httpRequests = httpRequestsWithErrors.getValue();\n+        final List<HttpRequest<T>> httpRequests\n+                = enrichWithRequiredData(httpRequestsWithErrors.getValue(), routingContext);\n \n         if (CollectionUtils.isEmpty(httpRequests)) {\n             return emptyBidderSeatBidWithErrors(bidderErrors);\n@@ -99,6 +113,33 @@ public HttpBidderRequester(HttpClient httpClient,\n                 .map(ignored -> resultBuilder.toBidderSeatBid(debugEnabled));\n     }\n \n+    private static <T> List<HttpRequest<T>> enrichWithRequiredData(List<HttpRequest<T>> httpRequests,\n+                                                                   RoutingContext routingContext) {\n+        final MultiMap headersToAdd = new CaseInsensitiveHeaders();\n+        routingContext.request().headers().entries().stream()\n+                .filter(entry -> HEADERS_TO_COPY.contains(entry.getKey()))\n+                .forEach(entry -> headersToAdd.add(entry.getKey(), entry.getValue()));\n+\n+        return httpRequests.stream().map(httpRequest -> httpRequest.toBuilder()\n+                .headers(enrichHeaders(httpRequest.getHeaders(), headersToAdd))\n+                .build())\n+                .collect(Collectors.toList());\n+\n+    }\n+\n+    private static MultiMap enrichHeaders(MultiMap requestHeaders, MultiMap headersToAdd) {\n+        if (requestHeaders == null) {\n+            return headersToAdd;\n+        }\n+        final Map<String, String> neededToAddHeaders = headersToAdd.entries().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        requestHeaders.entries().forEach(entry ->\n+                neededToAddHeaders.computeIfPresent(entry.getKey(), (key, val) -> entry.getValue()));\n+        neededToAddHeaders.forEach(requestHeaders::set);\n+\n+        return requestHeaders;\n+    }\n+\n     private <T> boolean isStoredResponse(List<HttpRequest<T>> httpRequests,\n                                          String storedResponse,\n                                          String bidder) {"
  },
  {
    "sha": "069f187467fee8fa8b697550ed886b5319c26aca",
    "filename": "src/main/java/org/prebid/server/bidder/model/HttpRequest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/main/java/org/prebid/server/bidder/model/HttpRequest.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/main/java/org/prebid/server/bidder/model/HttpRequest.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/bidder/model/HttpRequest.java?ref=e4a0097d7a87149f075c0d8f9dd554ccc79d21eb",
    "patch": "@@ -8,7 +8,7 @@\n /**\n  * Packages together the fields needed to make an http request.\n  */\n-@Builder\n+@Builder(toBuilder = true)\n @Value\n public class HttpRequest<T> {\n "
  },
  {
    "sha": "d1c187bb4620b103d2e330c5c1d65b48e04360a7",
    "filename": "src/main/java/org/prebid/server/util/HttpUtil.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/main/java/org/prebid/server/util/HttpUtil.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/main/java/org/prebid/server/util/HttpUtil.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/main/java/org/prebid/server/util/HttpUtil.java?ref=e4a0097d7a87149f075c0d8f9dd554ccc79d21eb",
    "patch": "@@ -33,6 +33,7 @@\n     public static final CharSequence X_REQUEST_AGENT_HEADER = HttpHeaders.createOptimized(\"X-Request-Agent\");\n     public static final CharSequence ORIGIN_HEADER = HttpHeaders.createOptimized(\"Origin\");\n     public static final CharSequence ACCEPT_HEADER = HttpHeaders.createOptimized(\"Accept\");\n+    public static final CharSequence SEC_GPC = HttpHeaders.createOptimized(\"Sec-GPC\");\n     public static final CharSequence CONTENT_TYPE_HEADER = HttpHeaders.createOptimized(\"Content-Type\");\n     public static final CharSequence X_REQUESTED_WITH_HEADER = HttpHeaders.createOptimized(\"X-Requested-With\");\n     public static final CharSequence REFERER_HEADER = HttpHeaders.createOptimized(\"Referer\");"
  },
  {
    "sha": "7d587a4a0c832026bfa292a1e63270041b9a3c28",
    "filename": "src/test/java/org/prebid/server/auction/ExchangeServiceTest.java",
    "status": "modified",
    "additions": 46,
    "deletions": 37,
    "changes": 83,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/test/java/org/prebid/server/auction/ExchangeServiceTest.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/test/java/org/prebid/server/auction/ExchangeServiceTest.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/java/org/prebid/server/auction/ExchangeServiceTest.java?ref=e4a0097d7a87149f075c0d8f9dd554ccc79d21eb",
    "patch": "@@ -393,14 +393,14 @@ public void shouldExtractMultipleRequests() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidRequest1Captor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(same(bidder1), bidRequest1Captor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(same(bidder1), bidRequest1Captor.capture(), any(), any(), anyBoolean());\n         final BidderRequest capturedBidRequest1 = bidRequest1Captor.getValue();\n         assertThat(capturedBidRequest1.getBidRequest().getImp()).hasSize(2)\n                 .extracting(imp -> imp.getExt().get(\"bidder\").asInt())\n                 .containsOnly(1, 3);\n \n         final ArgumentCaptor<BidderRequest> bidRequest2Captor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(same(bidder2), bidRequest2Captor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(same(bidder2), bidRequest2Captor.capture(), any(), any(), anyBoolean());\n         final BidderRequest capturedBidRequest2 = bidRequest2Captor.getValue();\n         assertThat(capturedBidRequest2.getBidRequest().getImp()).hasSize(1)\n                 .element(0).returns(2, imp -> imp.getExt().get(\"bidder\").asInt());\n@@ -435,7 +435,7 @@ public void shouldPassRequestWithExtPrebidToDefinedBidder() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidRequest1Captor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(same(bidder1), bidRequest1Captor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(same(bidder1), bidRequest1Captor.capture(), any(), any(), anyBoolean());\n \n         final BidderRequest capturedBidRequest1 = bidRequest1Captor.getValue();\n         final ExtRequestPrebid prebid1 = capturedBidRequest1.getBidRequest().getExt().getPrebid();\n@@ -446,7 +446,7 @@ public void shouldPassRequestWithExtPrebidToDefinedBidder() {\n                 .containsOnly(entry(\"bidder\", mapper.createObjectNode().put(\"test1\", \"test1\")));\n \n         final ArgumentCaptor<BidderRequest> bidRequest2Captor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(same(bidder2), bidRequest2Captor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(same(bidder2), bidRequest2Captor.capture(), any(), any(), anyBoolean());\n         final BidRequest capturedBidRequest2 = bidRequest2Captor.getValue().getBidRequest();\n         final ExtRequestPrebid prebid2 = capturedBidRequest2.getExt().getPrebid();\n         assertThat(prebid2).isNotNull();\n@@ -503,23 +503,23 @@ public void shouldPassRequestWithInjectedSchainInSourceExt() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidRequest1Captor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(same(bidder1), bidRequest1Captor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(same(bidder1), bidRequest1Captor.capture(), any(), any(), anyBoolean());\n         final BidRequest capturedBidRequest1 = bidRequest1Captor.getValue().getBidRequest();\n         final ExtRequestPrebidSchainSchain requestSchain1 = capturedBidRequest1.getSource().getExt().getSchain();\n         assertThat(requestSchain1).isNotNull();\n         assertThat(requestSchain1).isEqualTo(specificSchain);\n         assertThat(capturedBidRequest1.getExt().getPrebid().getSchains()).isNull();\n \n         final ArgumentCaptor<BidderRequest> bidRequest2Captor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(same(bidder2), bidRequest2Captor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(same(bidder2), bidRequest2Captor.capture(), any(), any(), anyBoolean());\n         final BidRequest capturedBidRequest2 = bidRequest2Captor.getValue().getBidRequest();\n         final ExtRequestPrebidSchainSchain requestSchain2 = capturedBidRequest2.getSource().getExt().getSchain();\n         assertThat(requestSchain2).isNotNull();\n         assertThat(requestSchain2).isEqualTo(specificSchain);\n         assertThat(capturedBidRequest2.getExt().getPrebid().getSchains()).isNull();\n \n         final ArgumentCaptor<BidderRequest> bidRequest3Captor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(same(bidder3), bidRequest3Captor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(same(bidder3), bidRequest3Captor.capture(), any(), any(), anyBoolean());\n         final BidRequest capturedBidRequest3 = bidRequest3Captor.getValue().getBidRequest();\n         final ExtRequestPrebidSchainSchain requestSchain3 = capturedBidRequest3.getSource().getExt().getSchain();\n         assertThat(requestSchain3).isNotNull();\n@@ -592,7 +592,7 @@ public void shouldExtractRequestByAliasForCorrectBidder() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(same(bidder), bidRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(same(bidder), bidRequestCaptor.capture(), any(), any(), anyBoolean());\n         assertThat(bidRequestCaptor.getValue().getBidRequest().getImp()).hasSize(1)\n                 .extracting(imp -> imp.getExt().get(\"bidder\").asInt())\n                 .contains(1);\n@@ -616,7 +616,7 @@ public void shouldExtractMultipleRequestsForTheSameBidderIfAliasesWereUsed() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester, times(2)).requestBids(same(bidder), bidRequestCaptor.capture(), any(),\n+        verify(httpBidderRequester, times(2)).requestBids(same(bidder), bidRequestCaptor.capture(), any(), any(),\n                 anyBoolean());\n         final List<BidderRequest> capturedBidderRequests = bidRequestCaptor.getAllValues();\n \n@@ -653,7 +653,8 @@ public void shouldReturnSeparateSeatBidsForTheSameBidderIfBiddersAliasAndBidderW\n                                         ExtPrebid.of(null, 1))))),\n                         builder -> builder.ext(ExtRequest.of(ExtRequestPrebid.builder()\n                                 .auctiontimestamp(1000L)\n-                                .aliases(singletonMap(\"bidderAlias\", \"bidder\")).build()))))), any(), anyBoolean()))\n+                                .aliases(singletonMap(\"bidderAlias\", \"bidder\"))\n+                                .build()))))), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(givenSeatBid(singletonList(\n                         givenBid(Bid.builder().price(BigDecimal.ONE).build())))));\n \n@@ -665,7 +666,8 @@ public void shouldReturnSeparateSeatBidsForTheSameBidderIfBiddersAliasAndBidderW\n                                         ExtPrebid.of(null, 2))))),\n                         builder -> builder.ext(ExtRequest.of(ExtRequestPrebid.builder()\n                                 .auctiontimestamp(1000L)\n-                                .aliases(singletonMap(\"bidderAlias\", \"bidder\")).build()))))), any(), anyBoolean()))\n+                                .aliases(singletonMap(\"bidderAlias\", \"bidder\"))\n+                                .build()))))), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(givenSeatBid(singletonList(\n                         givenBid(Bid.builder().price(BigDecimal.ONE).build())))));\n \n@@ -686,7 +688,7 @@ public void shouldReturnSeparateSeatBidsForTheSameBidderIfBiddersAliasAndBidderW\n         final BidResponse bidResponse = exchangeService.holdAuction(givenRequestContext(bidRequest)).result();\n \n         // then\n-        verify(httpBidderRequester, times(2)).requestBids(any(), any(), any(), anyBoolean());\n+        verify(httpBidderRequester, times(2)).requestBids(any(), any(), any(), any(), anyBoolean());\n         assertThat(bidResponse.getSeatbid()).hasSize(2)\n                 .extracting(seatBid -> seatBid.getBid().size())\n                 .containsOnly(1, 1);\n@@ -1271,7 +1273,7 @@ public void shouldDeepCopyImpExtContextToEachImpressionAndNotRemoveDataForAllWhe\n                 builder -> builder.ext(ExtRequest.of(ExtRequestPrebid.builder()\n                         .data(ExtRequestPrebidData.of(singletonList(\"someBidder\")))\n                         .build())));\n-        given(httpBidderRequester.requestBids(any(), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(any(), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(givenSeatBid(singletonList(\n                         givenBid(Bid.builder().price(TEN).build())))));\n \n@@ -1288,7 +1290,8 @@ public void shouldDeepCopyImpExtContextToEachImpressionAndNotRemoveDataForAllWhe\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester, times(2)).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester, times(2))\n+                .requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         assertThat(bidderRequestCaptor.getAllValues())\n                 .extracting(BidderRequest::getBidRequest)\n                 .flatExtracting(BidRequest::getImp)\n@@ -1318,7 +1321,7 @@ public void shouldPassImpExtFieldsToEachImpression() {\n                         .ext(impExt)\n                         .build()),\n                 identity());\n-        given(httpBidderRequester.requestBids(any(), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(any(), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(givenSeatBid(singletonList(\n                         givenBid(Bid.builder().price(TEN).build())))));\n \n@@ -1327,7 +1330,7 @@ public void shouldPassImpExtFieldsToEachImpression() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         assertThat(bidderRequestCaptor.getAllValues())\n                 .extracting(BidderRequest::getBidRequest)\n                 .flatExtracting(BidRequest::getImp)\n@@ -1353,7 +1356,7 @@ public void shouldPassImpExtSkadnToEachImpression() {\n                         .ext(impExt)\n                         .build()),\n                 identity());\n-        given(httpBidderRequester.requestBids(any(), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(any(), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(givenSeatBid(singletonList(\n                         givenBid(Bid.builder().price(TEN).build())))));\n \n@@ -1362,7 +1365,7 @@ public void shouldPassImpExtSkadnToEachImpression() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(any(), bidRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), bidRequestCaptor.capture(), any(), any(), anyBoolean());\n         assertThat(bidRequestCaptor.getAllValues())\n                 .extracting(BidderRequest::getBidRequest)\n                 .flatExtracting(BidRequest::getImp)\n@@ -1453,7 +1456,8 @@ public void shouldPassUserDataAndExtDataOnlyForAllowedBidder() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester, times(2)).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester, times(2))\n+                .requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n \n         final ExtUser maskedExtUser = ExtUser.builder().eids(eids).build();\n@@ -1491,7 +1495,7 @@ public void shouldNotCleanRequestExtPrebidDataWhenFpdAllowedAndPrebidIsNotNull()\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n         assertThat(capturedBidRequests)\n                 .extracting(BidderRequest::getBidRequest)\n@@ -1529,7 +1533,8 @@ public void shouldMaskUserExtIfDataBiddersListIsEmpty() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester, times(2)).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester, times(2))\n+                .requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n \n         final ExtUser expectedExtUser = ExtUser.builder().eids(eids).build();\n@@ -1569,7 +1574,8 @@ public void shouldNoMaskUserExtIfDataBiddersListIsNull() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester, times(2)).requestBids(any(), bidRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester, times(2))\n+                .requestBids(any(), bidRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidRequestCaptor.getAllValues();\n \n         assertThat(capturedBidRequests)\n@@ -1613,7 +1619,8 @@ public void shouldPassSiteContentDataAndExtDataOnlyForAllowedBidder() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester, times(2)).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester, times(2))\n+                .requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n \n         assertThat(capturedBidRequests)\n@@ -1658,7 +1665,8 @@ public void shouldNoMaskPassAppExtAndKeywordsWhenDataBiddersListIsNull() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester, times(2)).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester, times(2))\n+                .requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n \n         assertThat(capturedBidRequests)\n@@ -1701,7 +1709,8 @@ public void shouldPassAppExtDataOnlyForAllowedBidder() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester, times(2)).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester, times(2))\n+                .requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n \n         assertThat(capturedBidRequests)\n@@ -1775,7 +1784,7 @@ public void shouldUseConcreteOverGeneralSiteWithExtPrebidBidderConfig() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n \n         assertThat(capturedBidRequests)\n@@ -1823,7 +1832,7 @@ public void shouldUseConcreteOverGeneralAppWithExtPrebidBidderConfig() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n \n         assertThat(capturedBidRequests)\n@@ -1865,7 +1874,7 @@ public void shouldUseConcreteOverGeneralUserWithExtPrebidBidderConfig() {\n \n         // then\n         final ArgumentCaptor<BidderRequest> bidderRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), bidderRequestCaptor.capture(), any(), any(), anyBoolean());\n         final List<BidderRequest> capturedBidRequests = bidderRequestCaptor.getAllValues();\n \n         assertThat(capturedBidRequests)\n@@ -1919,7 +1928,7 @@ public void shouldPassGlobalTimeoutToConnectorUnchangedIfCachingIsNotRequested()\n         exchangeService.holdAuction(givenRequestContext(bidRequest));\n \n         // then\n-        verify(httpBidderRequester).requestBids(any(), any(), same(timeout), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), any(), same(timeout), any(), anyBoolean());\n     }\n \n     @Test\n@@ -1958,7 +1967,7 @@ public void shouldPassReducedGlobalTimeoutToConnectorAndOriginalToBidResponseCre\n \n         // then\n         final ArgumentCaptor<Timeout> timeoutCaptor = ArgumentCaptor.forClass(Timeout.class);\n-        verify(httpBidderRequester).requestBids(any(), any(), timeoutCaptor.capture(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), any(), timeoutCaptor.capture(), any(), anyBoolean());\n         assertThat(timeoutCaptor.getValue().remaining()).isEqualTo(400L);\n         verify(bidResponseCreator).create(anyList(), any(), any(), any(), anyBoolean());\n     }\n@@ -2269,7 +2278,7 @@ public void shouldNotAddExtPrebidEventsWhenEventsServiceReturnsEmptyEventsServic\n     @Test\n     public void shouldIncrementCommonMetrics() {\n         // given\n-        given(httpBidderRequester.requestBids(any(), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(any(), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(givenSeatBid(singletonList(\n                         givenBid(Bid.builder().price(TEN).build())))));\n \n@@ -2312,7 +2321,7 @@ public void shouldCallUpdateCookieMetricsWithExpectedValue() {\n     @Test\n     public void shouldUseEmptyStringIfPublisherIdIsEmpty() {\n         // given\n-        given(httpBidderRequester.requestBids(any(), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(any(), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(givenSeatBid(singletonList(\n                         givenBid(Bid.builder().price(TEN).build())))));\n         final BidRequest bidRequest = givenBidRequest(givenSingleImp(singletonMap(\"someBidder\", 1)));\n@@ -2328,7 +2337,7 @@ public void shouldUseEmptyStringIfPublisherIdIsEmpty() {\n     @Test\n     public void shouldIncrementNoBidRequestsMetric() {\n         // given\n-        given(httpBidderRequester.requestBids(any(), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(any(), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(givenSeatBid(emptyList())));\n \n         final BidRequest bidRequest = givenBidRequest(givenSingleImp(singletonMap(\"someBidder\", 1)));\n@@ -2343,7 +2352,7 @@ public void shouldIncrementNoBidRequestsMetric() {\n     @Test\n     public void shouldIncrementGotBidsAndErrorMetricsIfBidderReturnsBidAndDifferentErrors() {\n         // given\n-        given(httpBidderRequester.requestBids(any(), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(any(), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(BidderSeatBid.of(\n                         singletonList(givenBid(Bid.builder().price(TEN).build())),\n                         emptyList(),\n@@ -2452,7 +2461,7 @@ private AuctionContext givenRequestContext(BidRequest bidRequest, Account accoun\n \n     private BidRequest captureBidRequest() {\n         final ArgumentCaptor<BidderRequest> bidRequestCaptor = ArgumentCaptor.forClass(BidderRequest.class);\n-        verify(httpBidderRequester).requestBids(any(), bidRequestCaptor.capture(), any(), anyBoolean());\n+        verify(httpBidderRequester).requestBids(any(), bidRequestCaptor.capture(), any(), any(), anyBoolean());\n         return bidRequestCaptor.getValue().getBidRequest();\n     }\n \n@@ -2477,13 +2486,13 @@ private static BidRequest givenBidRequest(List<Imp> imp) {\n     }\n \n     private void givenBidder(BidderSeatBid response) {\n-        given(httpBidderRequester.requestBids(any(), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(any(), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(response));\n     }\n \n     private void givenBidder(String bidderName, Bidder<?> bidder, BidderSeatBid response) {\n         doReturn(bidder).when(bidderCatalog).bidderByName(eq(bidderName));\n-        given(httpBidderRequester.requestBids(same(bidder), any(), any(), anyBoolean()))\n+        given(httpBidderRequester.requestBids(same(bidder), any(), any(), any(), anyBoolean()))\n                 .willReturn(Future.succeededFuture(response));\n     }\n "
  },
  {
    "sha": "ba1de5291b39024c4290f30d02a4cfd1e390c69c",
    "filename": "src/test/java/org/prebid/server/bidder/HttpBidderRequesterTest.java",
    "status": "modified",
    "additions": 79,
    "deletions": 16,
    "changes": 95,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/test/java/org/prebid/server/bidder/HttpBidderRequesterTest.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/test/java/org/prebid/server/bidder/HttpBidderRequesterTest.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/java/org/prebid/server/bidder/HttpBidderRequesterTest.java?ref=e4a0097d7a87149f075c0d8f9dd554ccc79d21eb",
    "patch": "@@ -5,11 +5,14 @@\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.CaseInsensitiveHeaders;\n import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n import org.mockito.BDDMockito;\n+import org.mockito.Captor;\n import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnit;\n import org.mockito.junit.MockitoRule;\n@@ -62,6 +65,12 @@\n     private HttpClient httpClient;\n     @Mock\n     private BidderErrorNotifier bidderErrorNotifier;\n+    @Mock\n+    private RoutingContext routingContext;\n+    @Mock\n+    private HttpServerRequest httpServerRequest;\n+    @Captor\n+    private ArgumentCaptor<MultiMap> headerCaptor;\n \n     private HttpBidderRequester httpBidderRequester;\n \n@@ -71,6 +80,8 @@\n     @Before\n     public void setUp() {\n         given(bidderErrorNotifier.processTimeout(any(), any())).will(invocation -> invocation.getArgument(0));\n+        given(routingContext.request()).willReturn(httpServerRequest);\n+        given(httpServerRequest.headers()).willReturn(new CaseInsensitiveHeaders());\n \n         final Clock clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n         final TimeoutFactory timeoutFactory = new TimeoutFactory(clock);\n@@ -88,7 +99,7 @@ public void shouldReturnFailedToRequestBidsErrorWhenBidderReturnsEmptyHttpReques\n \n         // when\n         final BidderSeatBid bidderSeatBid =\n-                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false).result();\n+                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false).result();\n \n         // then\n         assertThat(bidderSeatBid.getBids()).isEmpty();\n@@ -107,7 +118,7 @@ public void shouldTolerateBidderReturningErrorsAndNoHttpRequests() {\n \n         // when\n         final BidderSeatBid bidderSeatBid =\n-                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false).result();\n+                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false).result();\n \n         // then\n         assertThat(bidderSeatBid.getBids()).isEmpty();\n@@ -135,7 +146,7 @@ public void shouldSendPopulatedPostRequest() {\n \n         final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, BidRequest.builder().build());\n         // when\n-        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false);\n+        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false);\n \n         // then\n         verify(httpClient).request(eq(HttpMethod.POST), eq(\"uri\"), eq(headers), eq(\"requestBody\"), eq(500L));\n@@ -162,7 +173,8 @@ public void shouldPassStoredResponseToBidderMakeBidsMethodAndReturnSeatBids() {\n         final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", \"storedResponse\", BidRequest.builder().build());\n \n         // when\n-        final BidderSeatBid bidderSeatBid = httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false)\n+        final BidderSeatBid bidderSeatBid = httpBidderRequester\n+                .requestBids(bidder, bidderRequest, timeout, routingContext, false)\n                 .result();\n \n         // then\n@@ -200,7 +212,7 @@ public void shouldMakeRequestToBidderWhenStoredResponseDefinedButBidderCreatesMo\n         final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", \"storedResponse\", BidRequest.builder().build());\n \n         // when\n-        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false).result();\n+        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false).result();\n \n         // then\n         verify(httpClient, times(2)).request(any(), anyString(), any(), any(), anyLong());\n@@ -221,7 +233,7 @@ public void shouldSendPopulatedGetRequestWithoutBody() {\n         final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, BidRequest.builder().build());\n \n         // when\n-        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false);\n+        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false);\n \n         // then\n         verify(httpClient).request(any(), anyString(), any(), isNull(), anyLong());\n@@ -249,7 +261,7 @@ public void shouldSendMultipleRequests() {\n \n         final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, BidRequest.builder().build());\n         // when\n-        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false);\n+        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false);\n \n         // then\n         verify(httpClient, times(2)).request(any(), anyString(), any(), any(), anyLong());\n@@ -276,7 +288,7 @@ public void shouldReturnBidsCreatedByBidder() {\n \n         // when\n         final BidderSeatBid bidderSeatBid =\n-                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false).result();\n+                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false).result();\n \n         // then\n         assertThat(bidderSeatBid.getBids()).containsOnlyElementsOf(bids);\n@@ -310,7 +322,7 @@ public void shouldReturnFullDebugInfoIfDebugEnabled() {\n \n         // when\n         final BidderSeatBid bidderSeatBid =\n-                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, true).result();\n+                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, true).result();\n \n         // then\n         assertThat(bidderSeatBid.getHttpCalls()).hasSize(2).containsOnly(\n@@ -336,7 +348,7 @@ public void shouldReturnPartialDebugInfoIfDebugEnabledAndGlobalTimeoutAlreadyExp\n \n         // when\n         final BidderSeatBid bidderSeatBid =\n-                httpBidderRequester.requestBids(bidder, bidderRequest, expiredTimeout, true).result();\n+                httpBidderRequester.requestBids(bidder, bidderRequest, expiredTimeout, routingContext, true).result();\n \n         // then\n         assertThat(bidderSeatBid.getHttpCalls()).hasSize(1).containsOnly(\n@@ -361,13 +373,64 @@ public void shouldReturnPartialDebugInfoIfDebugEnabledAndHttpErrorOccurs() {\n \n         // when\n         final BidderSeatBid bidderSeatBid =\n-                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, true).result();\n+                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, true).result();\n \n         // then\n         assertThat(bidderSeatBid.getHttpCalls()).hasSize(1).containsOnly(\n                 ExtHttpCall.builder().uri(\"uri1\").requestbody(\"requestBody1\").build());\n     }\n \n+    @Test\n+    public void shouldAddSecGpcHeaderFromOriginalRequest() {\n+        // given\n+        givenHttpClientReturnsResponse(200, null);\n+        given(httpServerRequest.headers()).willReturn(new CaseInsensitiveHeaders().add(\"Sec-GPC\", \"1\"));\n+\n+        given(bidder.makeHttpRequests(any())).willReturn(Result.of(singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(\"uri\")\n+                        .body(\"requestBody\")\n+                        .headers(new CaseInsensitiveHeaders())\n+                        .build()),\n+                emptyList()));\n+\n+        final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, BidRequest.builder().build());\n+        // when\n+        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false);\n+\n+        // then\n+        verify(httpClient).request(eq(HttpMethod.POST), eq(\"uri\"), headerCaptor.capture(), eq(\"requestBody\"), eq(500L));\n+        assertThat(headerCaptor.getValue().contains(\"Sec-GPC\")).isTrue();\n+        assertThat(headerCaptor.getValue().get(\"Sec-GPC\")).isEqualTo(\"1\");\n+    }\n+\n+    @Test\n+    public void shouldNotOverrideHeadersFromBidRequest() {\n+        // given\n+        givenHttpClientReturnsResponse(200, null);\n+        given(httpServerRequest.headers()).willReturn(new CaseInsensitiveHeaders().add(\"Sec-GPC\", \"1\"));\n+\n+        given(bidder.makeHttpRequests(any())).willReturn(Result.of(singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(\"uri\")\n+                        .body(\"requestBody\")\n+                        .headers(new CaseInsensitiveHeaders().add(\"Sec-GPC\", \"0\"))\n+                        .build()),\n+                emptyList()));\n+\n+        final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, BidRequest.builder().build());\n+        // when\n+        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false);\n+\n+        // then\n+        verify(httpClient).request(eq(HttpMethod.POST), eq(\"uri\"), headerCaptor.capture(), eq(\"requestBody\"), eq(500L));\n+        assertThat(headerCaptor.getValue().contains(\"Sec-GPC\")).isTrue();\n+        assertThat(headerCaptor.getValue().getAll(\"Sec-GPC\")).hasSize(1);\n+        assertThat(headerCaptor.getValue().get(\"Sec-GPC\")).isEqualTo(\"0\");\n+    }\n+\n     @Test\n     public void shouldReturnFullDebugInfoIfDebugEnabledAndErrorStatus() {\n         // given\n@@ -386,7 +449,7 @@ public void shouldReturnFullDebugInfoIfDebugEnabledAndErrorStatus() {\n \n         // when\n         final BidderSeatBid bidderSeatBid =\n-                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, true).result();\n+                httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, true).result();\n \n         // then\n         assertThat(bidderSeatBid.getHttpCalls()).hasSize(1).containsOnly(\n@@ -413,7 +476,7 @@ public void shouldTolerateAlreadyExpiredGlobalTimeout() {\n \n         // when\n         final BidderSeatBid bidderSeatBid =\n-                httpBidderRequester.requestBids(bidder, bidderRequest, expiredTimeout, false).result();\n+                httpBidderRequester.requestBids(bidder, bidderRequest, expiredTimeout, routingContext, false).result();\n \n         // then\n         assertThat(bidderSeatBid.getErrors()).hasSize(1)\n@@ -440,7 +503,7 @@ public void shouldNotifyBidderOfTimeout() {\n         final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, BidRequest.builder().build());\n \n         // when\n-        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false);\n+        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false);\n \n         // then\n         verify(bidderErrorNotifier).processTimeout(any(), same(bidder));\n@@ -516,7 +579,7 @@ public void shouldTolerateMultipleErrors() {\n \n         // when\n         final BidderSeatBid bidderSeatBid = httpBidderRequester\n-                .requestBids(bidder, bidderRequest, timeout, false)\n+                .requestBids(bidder, bidderRequest, timeout, routingContext, false)\n                 .result();\n \n         // then\n@@ -549,7 +612,7 @@ public void shouldNotMakeBidsIfResponseStatusIs204() {\n         final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, BidRequest.builder().test(1).build());\n \n         // when\n-        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, false);\n+        httpBidderRequester.requestBids(bidder, bidderRequest, timeout, routingContext, false);\n \n         // then\n         verify(bidder, never()).makeBids(any(), any());"
  },
  {
    "sha": "523b6f40b967dba616fdc262d91f837cddfff0a7",
    "filename": "src/test/java/org/prebid/server/it/ApplicationTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/prebid/prebid-server-java/blob/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/test/java/org/prebid/server/it/ApplicationTest.java",
    "raw_url": "https://github.com/prebid/prebid-server-java/raw/e4a0097d7a87149f075c0d8f9dd554ccc79d21eb/src/test/java/org/prebid/server/it/ApplicationTest.java",
    "contents_url": "https://api.github.com/repos/prebid/prebid-server-java/contents/src/test/java/org/prebid/server/it/ApplicationTest.java?ref=e4a0097d7a87149f075c0d8f9dd554ccc79d21eb",
    "patch": "@@ -84,24 +84,28 @@ public void openrtb2AuctionShouldRespondWithBidsFromRubiconAndAppnexus() throws\n                 .withHeader(\"Content-Type\", equalToIgnoreCase(\"application/json;charset=utf-8\"))\n                 .withHeader(\"Accept\", equalTo(\"application/json\"))\n                 .withHeader(\"User-Agent\", equalTo(\"prebid-server/1.0\"))\n+                .withHeader(\"Sec-GPC\", equalTo(\"1\"))\n                 .withRequestBody(equalToJson(jsonFrom(\"openrtb2/rubicon_appnexus/test-rubicon-bid-request-1.json\")))\n                 .willReturn(aResponse().withBody(jsonFrom(\n                         \"openrtb2/rubicon_appnexus/test-rubicon-bid-response-1.json\"))));\n \n         // rubicon bid response for imp 2\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/rubicon-exchange\"))\n+                .withHeader(\"Sec-GPC\", equalTo(\"1\"))\n                 .withRequestBody(equalToJson(jsonFrom(\"openrtb2/rubicon_appnexus/test-rubicon-bid-request-2.json\")))\n                 .willReturn(aResponse().withBody(jsonFrom(\n                         \"openrtb2/rubicon_appnexus/test-rubicon-bid-response-2.json\"))));\n \n         // appnexus bid response for imp 3\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/appnexus-exchange\"))\n+                .withHeader(\"Sec-GPC\", equalTo(\"1\"))\n                 .withRequestBody(equalToJson(jsonFrom(\"openrtb2/rubicon_appnexus/test-appnexus-bid-request-1.json\")))\n                 .willReturn(aResponse().withBody(jsonFrom(\n                         \"openrtb2/rubicon_appnexus/test-appnexus-bid-response-1.json\"))));\n \n         // appnexus bid response for imp 3 with alias parameters\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/appnexus-exchange\"))\n+                .withHeader(\"Sec-GPC\", equalTo(\"1\"))\n                 .withRequestBody(equalToJson(jsonFrom(\"openrtb2/rubicon_appnexus/test-appnexus-bid-request-2.json\")))\n                 .willReturn(aResponse().withBody(jsonFrom(\n                         \"openrtb2/rubicon_appnexus/test-appnexus-bid-response-2.json\"))));\n@@ -121,6 +125,7 @@ public void openrtb2AuctionShouldRespondWithBidsFromRubiconAndAppnexus() throws\n                 .header(\"Referer\", \"http://www.example.com\")\n                 .header(\"User-Agent\", \"userAgent\")\n                 .header(\"Origin\", \"http://www.example.com\")\n+                .header(\"Sec-GPC\", 1)\n                 // this uids cookie value stands for {\"uids\":{\"rubicon\":\"J5VLCWQP-26-CWFT\",\"adnxs\":\"12345\"}}\n                 .cookie(\"uids\", \"eyJ1aWRzIjp7InJ1Ymljb24iOiJKNVZMQ1dRUC0yNi1DV0ZUIiwiYWRueHMiOiIxMjM0NSJ9fQ==\")\n                 .body(jsonFrom(\"openrtb2/rubicon_appnexus/test-auction-rubicon-appnexus-request.json\"))"
  }
]
