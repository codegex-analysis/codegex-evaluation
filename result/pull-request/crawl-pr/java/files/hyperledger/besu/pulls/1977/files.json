[
  {
    "sha": "245568e969be8b3ef086d486cb4f9c4491d10f8e",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/hyperledger/besu/blob/48f3f88898fc4f137611fb0e3579530c64a1ce60/CHANGELOG.md",
    "raw_url": "https://github.com/hyperledger/besu/raw/48f3f88898fc4f137611fb0e3579530c64a1ce60/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/hyperledger/besu/contents/CHANGELOG.md?ref=48f3f88898fc4f137611fb0e3579530c64a1ce60",
    "patch": "@@ -33,6 +33,8 @@ This release contains the activation blocks for Berlin across all supported test\n * Distributions and maven artifacts have been moved off of bintray [\\#1886](https://github.com/hyperledger/besu/pull/1886)\n * admin_peers json RPC response now includes the remote nodes enode URL\n * add support for keccak mining and a ecip1049_dev network [\\#1882](https://github.com/hyperledger/besu/pull/1882)\n+* Introduced transitions for IBFT2 block rewards [\\#1977](https://github.com/hyperledger/besu/pull/1977) \n+\n ### Bug Fixes\n * Fixed incorrect `groupId` in published maven pom files.\n * Fixed GraphQL response for missing account, return empty account instead [\\#1946](https://github.com/hyperledger/besu/issues/1946)"
  },
  {
    "sha": "8d4a2a37017fbe8c18e35c63f81c709b7a886773",
    "filename": "config/src/main/java/org/hyperledger/besu/config/BftFork.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/hyperledger/besu/blob/48f3f88898fc4f137611fb0e3579530c64a1ce60/config/src/main/java/org/hyperledger/besu/config/BftFork.java",
    "raw_url": "https://github.com/hyperledger/besu/raw/48f3f88898fc4f137611fb0e3579530c64a1ce60/config/src/main/java/org/hyperledger/besu/config/BftFork.java",
    "contents_url": "https://api.github.com/repos/hyperledger/besu/contents/config/src/main/java/org/hyperledger/besu/config/BftFork.java?ref=48f3f88898fc4f137611fb0e3579530c64a1ce60",
    "patch": "@@ -14,6 +14,7 @@\n  */\n package org.hyperledger.besu.config;\n \n+import java.math.BigInteger;\n import java.util.List;\n import java.util.Optional;\n import java.util.OptionalInt;\n@@ -22,12 +23,14 @@\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.google.common.collect.Lists;\n+import org.apache.tuweni.bytes.Bytes;\n \n public class BftFork {\n \n   private static final String FORK_BLOCK_KEY = \"block\";\n   private static final String VALIDATORS_KEY = \"validators\";\n   private static final String BLOCK_PERIOD_SECONDS_KEY = \"blockperiodseconds\";\n+  private static final String BLOCK_REWARD_KEY = \"blockreward\";\n \n   private final ObjectNode forkConfigRoot;\n \n@@ -48,6 +51,19 @@ public OptionalInt getBlockPeriodSeconds() {\n     return JsonUtil.getInt(forkConfigRoot, BLOCK_PERIOD_SECONDS_KEY);\n   }\n \n+  public Optional<BigInteger> getBlockRewardWei() {\n+    final Optional<String> configFileContent = JsonUtil.getString(forkConfigRoot, BLOCK_REWARD_KEY);\n+\n+    if (configFileContent.isEmpty()) {\n+      return Optional.empty();\n+    }\n+    final String weiStr = configFileContent.get();\n+    if (weiStr.startsWith(\"0x\")) {\n+      return Optional.of(new BigInteger(1, Bytes.fromHexStringLenient(weiStr).toArrayUnsafe()));\n+    }\n+    return Optional.of(new BigInteger(weiStr));\n+  }\n+\n   public Optional<List<String>> getValidators() throws IllegalArgumentException {\n     final Optional<ArrayNode> validatorNode = JsonUtil.getArrayNode(forkConfigRoot, VALIDATORS_KEY);\n "
  },
  {
    "sha": "1142631c1a757d12dc3f4766611480c7f1d2dd10",
    "filename": "consensus/common/src/main/java/org/hyperledger/besu/consensus/common/bft/BftProtocolSchedule.java",
    "status": "modified",
    "additions": 34,
    "deletions": 11,
    "changes": 45,
    "blob_url": "https://github.com/hyperledger/besu/blob/48f3f88898fc4f137611fb0e3579530c64a1ce60/consensus/common/src/main/java/org/hyperledger/besu/consensus/common/bft/BftProtocolSchedule.java",
    "raw_url": "https://github.com/hyperledger/besu/raw/48f3f88898fc4f137611fb0e3579530c64a1ce60/consensus/common/src/main/java/org/hyperledger/besu/consensus/common/bft/BftProtocolSchedule.java",
    "contents_url": "https://api.github.com/repos/hyperledger/besu/contents/consensus/common/src/main/java/org/hyperledger/besu/consensus/common/bft/BftProtocolSchedule.java?ref=48f3f88898fc4f137611fb0e3579530c64a1ce60",
    "patch": "@@ -29,6 +29,8 @@\n import org.hyperledger.besu.ethereum.mainnet.ProtocolSpecBuilder;\n \n import java.math.BigInteger;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.function.Function;\n \n /** Defines the protocol behaviours for a blockchain using a BFT consensus mechanism. */\n@@ -41,18 +43,38 @@ public static ProtocolSchedule create(\n       final PrivacyParameters privacyParameters,\n       final boolean isRevertReasonEnabled,\n       final Function<Integer, BlockHeaderValidator.Builder> blockHeaderRuleset) {\n+    final Map<Long, Function<ProtocolSpecBuilder, ProtocolSpecBuilder>> specMap = new HashMap<>();\n+\n+    specMap.put(\n+        0L,\n+        builder ->\n+            applyBftChanges(\n+                config.getBftConfigOptions(),\n+                builder,\n+                config.isQuorum(),\n+                blockHeaderRuleset,\n+                config.getBftConfigOptions().getBlockRewardWei()));\n+\n+    config.getTransitions().getIbftForks().stream()\n+        .filter(fork -> fork.getBlockRewardWei().isPresent())\n+        .forEach(\n+            fork ->\n+                specMap.put(\n+                    fork.getForkBlock(),\n+                    builder ->\n+                        applyBftChanges(\n+                            config.getBftConfigOptions(),\n+                            builder,\n+                            config.isQuorum(),\n+                            blockHeaderRuleset,\n+                            fork.getBlockRewardWei().get())));\n+\n+    final ProtocolSpecAdapters specAdapters = new ProtocolSpecAdapters(specMap);\n \n     return new ProtocolScheduleBuilder(\n             config,\n             DEFAULT_CHAIN_ID,\n-            ProtocolSpecAdapters.create(\n-                0,\n-                builder ->\n-                    applyBftChanges(\n-                        config.getBftConfigOptions(),\n-                        builder,\n-                        config.isQuorum(),\n-                        blockHeaderRuleset)),\n+            specAdapters,\n             privacyParameters,\n             isRevertReasonEnabled,\n             config.isQuorum())\n@@ -76,13 +98,14 @@ private static ProtocolSpecBuilder applyBftChanges(\n       final BftConfigOptions configOptions,\n       final ProtocolSpecBuilder builder,\n       final boolean goQuorumMode,\n-      final Function<Integer, BlockHeaderValidator.Builder> blockHeaderRuleset) {\n+      final Function<Integer, BlockHeaderValidator.Builder> blockHeaderRuleset,\n+      final BigInteger blockReward) {\n \n     if (configOptions.getEpochLength() <= 0) {\n       throw new IllegalArgumentException(\"Epoch length in config must be greater than zero\");\n     }\n \n-    if (configOptions.getBlockRewardWei().signum() < 0) {\n+    if (blockReward.signum() < 0) {\n       throw new IllegalArgumentException(\"Bft Block reward in config cannot be negative\");\n     }\n \n@@ -95,7 +118,7 @@ private static ProtocolSpecBuilder applyBftChanges(\n         .blockValidatorBuilder(MainnetProtocolSpecs.blockValidatorBuilder(goQuorumMode))\n         .blockImporterBuilder(MainnetBlockImporter::new)\n         .difficultyCalculator((time, parent, protocolContext) -> BigInteger.ONE)\n-        .blockReward(Wei.of(configOptions.getBlockRewardWei()))\n+        .blockReward(Wei.of(blockReward))\n         .skipZeroBlockRewards(true)\n         .blockHeaderFunctions(BftBlockHeaderFunctions.forOnChainBlock());\n "
  },
  {
    "sha": "20730dfc05eb122073e5a41badca8072b2d68703",
    "filename": "consensus/common/src/test/java/org/hyperledger/besu/consensus/common/bft/BftProtocolScheduleTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/hyperledger/besu/blob/48f3f88898fc4f137611fb0e3579530c64a1ce60/consensus/common/src/test/java/org/hyperledger/besu/consensus/common/bft/BftProtocolScheduleTest.java",
    "raw_url": "https://github.com/hyperledger/besu/raw/48f3f88898fc4f137611fb0e3579530c64a1ce60/consensus/common/src/test/java/org/hyperledger/besu/consensus/common/bft/BftProtocolScheduleTest.java",
    "contents_url": "https://api.github.com/repos/hyperledger/besu/contents/consensus/common/src/test/java/org/hyperledger/besu/consensus/common/bft/BftProtocolScheduleTest.java?ref=48f3f88898fc4f137611fb0e3579530c64a1ce60",
    "patch": "@@ -22,6 +22,7 @@\n \n import org.hyperledger.besu.config.BftConfigOptions;\n import org.hyperledger.besu.config.GenesisConfigOptions;\n+import org.hyperledger.besu.config.TransitionsConfigOptions;\n import org.hyperledger.besu.ethereum.core.Address;\n import org.hyperledger.besu.ethereum.core.BlockHeader;\n import org.hyperledger.besu.ethereum.core.Wei;\n@@ -50,6 +51,7 @@ public void ensureBlockRewardAndMiningBeneficiaryInProtocolSpecMatchConfig() {\n     when(configOptions.getMiningBeneficiary()).thenReturn(Optional.of(miningBeneficiary));\n     when(configOptions.getBlockRewardWei()).thenReturn(arbitraryBlockReward);\n     when(configOptions.getEpochLength()).thenReturn(3000L);\n+    when(genesisConfig.getTransitions()).thenReturn(mock(TransitionsConfigOptions.class));\n \n     when(genesisConfig.getBftConfigOptions()).thenReturn(configOptions);\n \n@@ -72,7 +74,7 @@ public void illegalMiningBeneficiaryStringThrowsException() {\n     when(genesisConfig.getBftConfigOptions()).thenReturn(configOptions);\n     when(configOptions.getEpochLength()).thenReturn(3000L);\n     when(configOptions.getBlockRewardWei()).thenReturn(BigInteger.ZERO);\n-\n+    when(genesisConfig.getTransitions()).thenReturn(mock(TransitionsConfigOptions.class));\n     assertThatThrownBy(\n             () ->\n                 BftProtocolSchedule.create(\n@@ -89,6 +91,7 @@ public void missingMiningBeneficiaryInConfigWillPayCoinbaseInHeader() {\n     when(configOptions.getBlockRewardWei()).thenReturn(arbitraryBlockReward);\n     when(configOptions.getEpochLength()).thenReturn(3000L);\n     when(genesisConfig.getBftConfigOptions()).thenReturn(configOptions);\n+    when(genesisConfig.getTransitions()).thenReturn(mock(TransitionsConfigOptions.class));\n \n     final ProtocolSchedule schedule =\n         BftProtocolSchedule.create(genesisConfig, BftProtocolScheduleTest::arbitraryRulesetBuilder);\n@@ -111,6 +114,7 @@ public void negativeBlockRewardThrowsException() {\n     when(configOptions.getBlockRewardWei()).thenReturn(arbitraryBlockReward);\n     when(configOptions.getEpochLength()).thenReturn(3000L);\n     when(genesisConfig.getBftConfigOptions()).thenReturn(configOptions);\n+    when(genesisConfig.getTransitions()).thenReturn(mock(TransitionsConfigOptions.class));\n \n     assertThatThrownBy(\n             () ->\n@@ -128,6 +132,7 @@ public void zeroEpochLengthThrowsException() {\n     when(configOptions.getEpochLength()).thenReturn(0L);\n     when(configOptions.getBlockRewardWei()).thenReturn(arbitraryBlockReward);\n     when(genesisConfig.getBftConfigOptions()).thenReturn(configOptions);\n+    when(genesisConfig.getTransitions()).thenReturn(mock(TransitionsConfigOptions.class));\n \n     assertThatThrownBy(\n             () ->\n@@ -145,6 +150,7 @@ public void negativeEpochLengthThrowsException() {\n     when(configOptions.getEpochLength()).thenReturn(-3000L);\n     when(configOptions.getBlockRewardWei()).thenReturn(arbitraryBlockReward);\n     when(genesisConfig.getBftConfigOptions()).thenReturn(configOptions);\n+    when(genesisConfig.getTransitions()).thenReturn(mock(TransitionsConfigOptions.class));\n \n     assertThatThrownBy(\n             () ->"
  }
]
