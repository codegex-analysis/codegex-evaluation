[
  {
    "sha": "e12609e4fac31217169cb7b4499c7cbaef92485e",
    "filename": "src/main/java/org/slf4j/impl/Slf4jLogger.java",
    "status": "modified",
    "additions": 301,
    "deletions": 34,
    "changes": 335,
    "blob_url": "https://github.com/jboss-logging/slf4j-jboss-logmanager/blob/2391fc2c96d39dce086f6d7310e1bfae24bf5762/src/main/java/org/slf4j/impl/Slf4jLogger.java",
    "raw_url": "https://github.com/jboss-logging/slf4j-jboss-logmanager/raw/2391fc2c96d39dce086f6d7310e1bfae24bf5762/src/main/java/org/slf4j/impl/Slf4jLogger.java",
    "contents_url": "https://api.github.com/repos/jboss-logging/slf4j-jboss-logmanager/contents/src/main/java/org/slf4j/impl/Slf4jLogger.java?ref=2391fc2c96d39dce086f6d7310e1bfae24bf5762",
    "patch": "@@ -21,7 +21,6 @@\n \n import org.slf4j.Marker;\n import org.slf4j.helpers.FormattingTuple;\n-import org.slf4j.helpers.MarkerIgnoringBase;\n import org.slf4j.helpers.MessageFormatter;\n import org.slf4j.spi.LocationAwareLogger;\n import org.jboss.logmanager.Logger;\n@@ -30,8 +29,11 @@\n \n import java.io.Serializable;\n import java.io.ObjectStreamException;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n \n-public final class Slf4jLogger extends MarkerIgnoringBase implements Serializable, LocationAwareLogger {\n+public final class Slf4jLogger implements Serializable, LocationAwareLogger {\n     private final Logger logger;\n     private static final String LOGGER_CLASS_NAME = Slf4jLogger.class.getName();\n     private static final long serialVersionUID = -8422185592693034532L;\n@@ -52,8 +54,6 @@ public String getName() {\n \n     @Override\n     public void log(final Marker marker, final String fqcn, final int levelVal, final String fmt, final Object[] argArray, final Throwable t) {\n-        final String message = MessageFormatter.arrayFormat(fmt, argArray).getMessage();\n-        // ignore marker\n         final java.util.logging.Level level;\n         switch (levelVal) {\n             case LocationAwareLogger.TRACE_INT: level = org.jboss.logmanager.Level.TRACE; break;\n@@ -64,7 +64,8 @@ public void log(final Marker marker, final String fqcn, final int levelVal, fina\n             default: level = org.jboss.logmanager.Level.DEBUG; break;\n         }\n         if (logger.isLoggable(level)) {\n-            log(level, fqcn, message, t, argArray);\n+            final String message = MessageFormatter.arrayFormat(fmt, argArray).getMessage();\n+            log(marker, level, fqcn, message, t, argArray);\n         }\n     }\n \n@@ -78,7 +79,7 @@ public void trace(final String msg) {\n         if (ALT_TRACE_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.TRACE, msg, null);\n+        log(null, org.jboss.logmanager.Level.TRACE, msg, null);\n     }\n \n     @Override\n@@ -87,7 +88,7 @@ public void trace(final String format, final Object arg) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n-        log(org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+        log(null, org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n     }\n \n     @Override\n@@ -96,7 +97,7 @@ public void trace(final String format, final Object arg1, final Object arg2) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n-        log(org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+        log(null, org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n     }\n \n     @Override\n@@ -105,15 +106,64 @@ public void trace(final String format, final Object... arguments) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n-        log(org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+        log(null, org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n     }\n \n     @Override\n     public void trace(final String msg, final Throwable t) {\n         if (ALT_TRACE_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.TRACE, msg, t);\n+        log(null, org.jboss.logmanager.Level.TRACE, msg, t);\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(Marker marker) {\n+        return isTraceEnabled();\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String msg) {\n+        if (ALT_TRACE_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.TRACE, msg, null);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object arg) {\n+        if (ALT_TRACE_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n+        log(marker, org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object arg1, Object arg2) {\n+        if (ALT_TRACE_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n+        log(marker, org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String format, Object... arguments) {\n+        if (ALT_TRACE_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n+        log(marker, org.jboss.logmanager.Level.TRACE, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+\n+    }\n+\n+    @Override\n+    public void trace(Marker marker, String msg, Throwable t) {\n+        if (ALT_TRACE_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.TRACE, msg, t);\n     }\n \n     @Override\n@@ -126,7 +176,7 @@ public void debug(final String msg) {\n         if (ALT_DEBUG_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.DEBUG, msg, null);\n+        log(null, org.jboss.logmanager.Level.DEBUG, msg, null);\n     }\n \n     @Override\n@@ -135,7 +185,7 @@ public void debug(final String format, final Object arg) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n-        log(org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+        log(null, org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n     }\n \n     @Override\n@@ -144,7 +194,7 @@ public void debug(final String format, final Object arg1, final Object arg2) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n-        log(org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+        log(null, org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n     }\n \n     @Override\n@@ -153,15 +203,63 @@ public void debug(final String format, final Object... arguments) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n-        log(org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+        log(null, org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n     }\n \n     @Override\n     public void debug(final String msg, final Throwable t) {\n         if (ALT_DEBUG_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.DEBUG, msg, t);\n+        log(null, org.jboss.logmanager.Level.DEBUG, msg, t);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(Marker marker) {\n+        return isDebugEnabled();\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String msg) {\n+        if (ALT_DEBUG_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.DEBUG, msg, null);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object arg) {\n+        if (ALT_DEBUG_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n+        log(marker, org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object arg1, Object arg2) {\n+        if (ALT_DEBUG_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n+        log(marker, org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String format, Object... arguments) {\n+        if (ALT_DEBUG_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n+        log(marker, org.jboss.logmanager.Level.DEBUG, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+    }\n+\n+    @Override\n+    public void debug(Marker marker, String msg, Throwable t) {\n+        if (ALT_DEBUG_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.DEBUG, msg, t);\n     }\n \n     @Override\n@@ -174,7 +272,7 @@ public void info(final String msg) {\n         if (ALT_INFO_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.INFO, msg, null);\n+        log(null, org.jboss.logmanager.Level.INFO, msg, null);\n     }\n \n     @Override\n@@ -183,7 +281,7 @@ public void info(final String format, final Object arg) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n-        log(org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+        log(null, org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n     }\n \n     @Override\n@@ -192,7 +290,7 @@ public void info(final String format, final Object arg1, final Object arg2) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n-        log(org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+        log(null, org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n     }\n \n     @Override\n@@ -201,15 +299,63 @@ public void info(final String format, final Object... arguments) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n-        log(org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+        log(null, org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n     }\n \n     @Override\n     public void info(final String msg, final Throwable t) {\n         if (ALT_INFO_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.INFO, msg, t);\n+        log(null, org.jboss.logmanager.Level.INFO, msg, t);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(Marker marker) {\n+        return isInfoEnabled();\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String msg) {\n+        if (ALT_INFO_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.INFO, msg, null);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object arg) {\n+        if (ALT_INFO_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n+        log(marker, org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object arg1, Object arg2) {\n+        if (ALT_INFO_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n+        log(marker, org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String format, Object... arguments) {\n+        if (ALT_INFO_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n+        log(marker, org.jboss.logmanager.Level.INFO, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+    }\n+\n+    @Override\n+    public void info(Marker marker, String msg, Throwable t) {\n+        if (ALT_INFO_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.INFO, msg, t);\n     }\n \n     @Override\n@@ -222,7 +368,7 @@ public void warn(final String msg) {\n         if (ALT_WARN_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.WARN, msg, null);\n+        log(null, org.jboss.logmanager.Level.WARN, msg, null);\n     }\n \n     @Override\n@@ -231,7 +377,7 @@ public void warn(final String format, final Object arg) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n-        log(org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+        log(null, org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n     }\n \n     @Override\n@@ -240,7 +386,7 @@ public void warn(final String format, final Object... arguments) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n-        log(org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+        log(null, org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n     }\n \n     @Override\n@@ -249,15 +395,63 @@ public void warn(final String format, final Object arg1, final Object arg2) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n-        log(org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+        log(null, org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n     }\n \n     @Override\n     public void warn(final String msg, final Throwable t) {\n         if (ALT_WARN_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.WARN, msg, t);\n+        log(null, org.jboss.logmanager.Level.WARN, msg, t);\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled(Marker marker) {\n+        return isWarnEnabled();\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String msg) {\n+        if (ALT_WARN_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.WARN, msg, null);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object arg) {\n+        if (ALT_WARN_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n+        log(marker, org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object arg1, Object arg2) {\n+        if (ALT_WARN_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n+        log(marker, org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String format, Object... arguments) {\n+        if (ALT_WARN_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n+        log(marker, org.jboss.logmanager.Level.WARN, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+    }\n+\n+    @Override\n+    public void warn(Marker marker, String msg, Throwable t) {\n+        if (ALT_WARN_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.WARN, msg, t);\n     }\n \n     @Override\n@@ -270,7 +464,7 @@ public void error(final String msg) {\n         if (ALT_ERROR_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.ERROR, msg, null);\n+        log(null, org.jboss.logmanager.Level.ERROR, msg, null);\n     }\n \n     @Override\n@@ -279,7 +473,7 @@ public void error(final String format, final Object arg) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n-        log(org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n+        log(null, org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n     }\n \n     @Override\n@@ -288,7 +482,7 @@ public void error(final String format, final Object arg1, final Object arg2) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n-        log(org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+        log(null, org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n     }\n \n     @Override\n@@ -297,36 +491,109 @@ public void error(final String format, final Object... arguments) {\n             return;\n         }\n         final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n-        log(org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+        log(null, org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n     }\n \n     @Override\n     public void error(final String msg, final Throwable t) {\n         if (ALT_ERROR_INT < logger.getEffectiveLevel()) {\n             return;\n         }\n-        log(org.jboss.logmanager.Level.ERROR, msg, t);\n+        log(null, org.jboss.logmanager.Level.ERROR, msg, t);\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled(Marker marker) {\n+        return isErrorEnabled();\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String msg) {\n+        if (ALT_ERROR_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(marker, org.jboss.logmanager.Level.ERROR, msg, null);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object arg) {\n+        if (ALT_ERROR_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg);\n+        log(marker, org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg);\n     }\n \n     @Override\n+    public void error(Marker marker, String format, Object arg1, Object arg2) {\n+        if (ALT_ERROR_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.format(format, arg1, arg2);\n+        log(marker, org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arg1, arg2);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String format, Object... arguments) {\n+        if (ALT_ERROR_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        final FormattingTuple formattingTuple = MessageFormatter.arrayFormat(format, arguments);\n+        log(marker, org.jboss.logmanager.Level.ERROR, formattingTuple.getMessage(), formattingTuple.getThrowable(), arguments);\n+    }\n+\n+    @Override\n+    public void error(Marker marker, String msg, Throwable t) {\n+        if (ALT_ERROR_INT < logger.getEffectiveLevel()) {\n+            return;\n+        }\n+        log(null, org.jboss.logmanager.Level.ERROR, msg, t);\n+    }\n+\n     protected Slf4jLogger readResolve() throws ObjectStreamException {\n         return this;\n     }\n \n-    private void log(final java.util.logging.Level level, final String message, final Throwable t) {\n+    private void log(final Marker marker, final java.util.logging.Level level, final String message, final Throwable t) {\n         final ExtLogRecord rec = new ExtLogRecord(level, message, LOGGER_CLASS_NAME);\n         rec.setThrown(t);\n+        setMarker(rec, marker);\n         logger.logRaw(rec);\n     }\n \n-    private void log(final java.util.logging.Level level, final String message, final Throwable t, final Object... params) {\n-        log(level, LOGGER_CLASS_NAME, message, t, params);\n+    private void log(final Marker marker, final java.util.logging.Level level, final String message, final Throwable t, final Object... params) {\n+        log(marker, level, LOGGER_CLASS_NAME, message, t, params);\n     }\n \n-    private void log(final java.util.logging.Level level,  final String fqcn, final String message, final Throwable t, final Object[] params) {\n+    private void log(final Marker marker, final java.util.logging.Level level, final String fqcn, final String message, final Throwable t, final Object[] params) {\n         final ExtLogRecord rec = new ExtLogRecord(level, message, ExtLogRecord.FormatStyle.NO_FORMAT, fqcn);\n         rec.setThrown(t);\n         rec.setParameters(params);\n+        setMarker(rec, marker);\n         logger.logRaw(rec);\n     }\n+\n+    private void setMarker( ExtLogRecord rec, Marker marker) {\n+        if (MARKER_SETTER != null) {\n+            try {\n+                MARKER_SETTER.invokeExact(rec, marker);\n+            } catch (Throwable e) {\n+                // ignored\n+            }\n+        }\n+    }\n+\n+    private static final MethodHandle MARKER_SETTER;\n+\n+    static {\n+        MethodHandle setMarker = null;\n+        try {\n+            setMarker = MethodHandles.lookup().findVirtual(ExtLogRecord.class, \"setMarker\", MethodType.methodType(void.class, Object.class));\n+        } catch (ReflectiveOperationException ignored) {\n+            // old version of jboss-logmanager\n+        } finally {\n+            MARKER_SETTER = setMarker;\n+        }\n+    }\n+\n }"
  }
]
