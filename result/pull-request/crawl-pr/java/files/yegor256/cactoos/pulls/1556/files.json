[
  {
    "sha": "a1846503e5db236b611a34d494e4c40555e79f4c",
    "filename": "src/main/java/org/cactoos/io/CloseShieldInput.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/CloseShieldInput.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/CloseShieldInput.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/main/java/org/cactoos/io/CloseShieldInput.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.InputStream;\n+import org.cactoos.Input;\n+\n+/**\n+ * A decorator of {@link Input} that prevents {@link InputStream}\n+ * to be closed by its performers.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @since 1.0.0\n+ */\n+public final class CloseShieldInput implements Input {\n+\n+    /**\n+     * Origin.\n+     */\n+    private final Input origin;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin\n+     */\n+    public CloseShieldInput(final Input origin) {\n+        this.origin = origin;\n+    }\n+\n+    @Override\n+    public InputStream stream() throws Exception {\n+        return new CloseShieldInputStream(this.origin.stream());\n+    }\n+\n+}"
  },
  {
    "sha": "95aca9a8f93a30d189efee80f6ef6c14fd93c8f1",
    "filename": "src/main/java/org/cactoos/io/CloseShieldInputStream.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/CloseShieldInputStream.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/CloseShieldInputStream.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/main/java/org/cactoos/io/CloseShieldInputStream.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,100 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Decorator of {@link InputStream} to prevent it\n+ * to be closed.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @since 1.0.0\n+ */\n+public final class CloseShieldInputStream extends InputStream {\n+\n+    /**\n+     * Inner {@link InputStream}.\n+     */\n+    private final AtomicReference<InputStream> inner;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin\n+     */\n+    public CloseShieldInputStream(final InputStream origin) {\n+        super();\n+        this.inner = new AtomicReference<>(origin);\n+    }\n+\n+    @Override\n+    public int read() throws IOException {\n+        return this.inner.get().read();\n+    }\n+\n+    @Override\n+    public int read(final byte[] buffer) throws IOException {\n+        return this.inner.get().read(buffer);\n+    }\n+\n+    @Override\n+    public int read(final byte[] buffer, final int offset,\n+        final int length) throws IOException {\n+        return this.inner.get().read(buffer, offset, length);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        this.inner.set(new DeadInputStream());\n+    }\n+\n+    @Override\n+    public long skip(final long num) throws IOException {\n+        return this.inner.get().skip(num);\n+    }\n+\n+    @Override\n+    public int available() throws IOException {\n+        return this.inner.get().available();\n+    }\n+\n+    @Override\n+    public void mark(final int limit) {\n+        this.inner.get().mark(limit);\n+    }\n+\n+    @Override\n+    public void reset() throws IOException {\n+        this.inner.get().reset();\n+    }\n+\n+    @Override\n+    public boolean markSupported() {\n+        return this.inner.get().markSupported();\n+    }\n+\n+}"
  },
  {
    "sha": "ea52331b540705551921c6229cef4926282825ee",
    "filename": "src/main/java/org/cactoos/io/CloseShieldOutput.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/CloseShieldOutput.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/CloseShieldOutput.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/main/java/org/cactoos/io/CloseShieldOutput.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.OutputStream;\n+import org.cactoos.Output;\n+\n+/**\n+ * A decorator of {@link Output} that prevents {@link OutputStream}\n+ * to be closed by its performers.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @since 1.0.0\n+ */\n+public final class CloseShieldOutput implements Output {\n+\n+    /**\n+     * Output to preserve.\n+     */\n+    private final Output origin;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Output to preserve.\n+     */\n+    public CloseShieldOutput(final Output origin) {\n+        this.origin = origin;\n+    }\n+\n+    @Override\n+    public OutputStream stream() throws Exception {\n+        return new CloseShieldOutputStream(this.origin.stream());\n+    }\n+}"
  },
  {
    "sha": "0532221c36a610baecc98f42ec48126396f8fee0",
    "filename": "src/main/java/org/cactoos/io/CloseShieldOutputStream.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/CloseShieldOutputStream.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/CloseShieldOutputStream.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/main/java/org/cactoos/io/CloseShieldOutputStream.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Decorator of {@link OutputStream} to prevent it\n+ * to be closed.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @since 1.0.0\n+ */\n+public final class CloseShieldOutputStream extends OutputStream {\n+\n+    /**\n+     * Inner {@link OutputStream}.\n+     */\n+    private final AtomicReference<OutputStream> inner;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin\n+     */\n+    public CloseShieldOutputStream(final OutputStream origin) {\n+        super();\n+        this.inner = new AtomicReference<>(origin);\n+    }\n+\n+    @Override\n+    public void write(final int data) throws IOException {\n+        this.inner.get().write(data);\n+    }\n+\n+    @Override\n+    public void write(final byte[] buf) throws IOException {\n+        this.inner.get().write(buf);\n+    }\n+\n+    @Override\n+    public void write(final byte[] buf, final int off, final int len)\n+        throws IOException {\n+        this.inner.get().write(buf, off, len);\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+        this.inner.get().flush();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        this.inner.set(new DeadOutputStream());\n+    }\n+\n+}"
  },
  {
    "sha": "5a631b8ecb1ea10d5c9a8b7d3738829bf1ddcc5e",
    "filename": "src/main/java/org/cactoos/io/package-info.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/package-info.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/main/java/org/cactoos/io/package-info.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/main/java/org/cactoos/io/package-info.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -26,6 +26,11 @@\n  * Input/Output.\n  *\n  * @since 0.1\n+ * @todo #1449:30min We must find all the classes that closes stream of\n+ *  {@link org.cactoos.Input} or {@link org.cactoos.Output} that have been passed\n+ *  to them and document them about this behaviour and refer them to the existence\n+ *  of {@link org.cactoos.io.CloseShieldInput} and {@link org.cactoos.io.CloseShieldOutput}\n+ *  and how to use them.\n  * @todo #1533:30min Exploit generic variance for package org.cactoos.io\n  *  to ensure typing works as best as possible as it is explained in\n  *  #1533 issue."
  },
  {
    "sha": "64ac0ba138936e397113747cf2cbece2cebe90d9",
    "filename": "src/test/java/org/cactoos/io/CloseShieldInputStreamTest.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/CloseShieldInputStreamTest.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/CloseShieldInputStreamTest.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/test/java/org/cactoos/io/CloseShieldInputStreamTest.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import org.cactoos.text.TextOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.IsText;\n+import org.llorllale.cactoos.matchers.Verifies;\n+\n+/**\n+ * Test case for {@link CloseShieldInputStream}.\n+ * @since 1.0.0\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class CloseShieldInputStreamTest {\n+\n+    @Test\n+    @SuppressWarnings(\"try\")\n+    void preventsOriginalStreamToBeClosed() throws Exception {\n+        try (FakeInputStream origin = new FakeInputStream()) {\n+            // @checkstyle EmptyBlockCheck (2 lines)\n+            try (InputStream stream = new CloseShieldInputStream(origin)) {\n+            }\n+            new Assertion<>(\n+                \"Must not close origin stream\",\n+                origin.isClosed(),\n+                new IsEqual<>(false)\n+            ).affirm();\n+        }\n+    }\n+\n+    @Test\n+    void readsContent() throws Exception {\n+        final String content = \"Text content\";\n+        try (InputStream in = new InputStreamOf(content)) {\n+            new Assertion<>(\n+                \"Must read from text\",\n+                new TextOf(new CloseShieldInputStream(in)),\n+                new IsText(content)\n+            ).affirm();\n+        }\n+    }\n+\n+    @Test\n+    void makesDataAvailable() throws IOException {\n+        final String content = \"Hello,חבר!\";\n+        try (InputStream in = new InputStreamOf(content)) {\n+            new Assertion<>(\n+                \"Must show that data is available\",\n+                new CloseShieldInputStream(in).available(),\n+                new Verifies<>(l -> l > 0)\n+            ).affirm();\n+        }\n+    }\n+}"
  },
  {
    "sha": "058eb747df97f047aed9e111c38c87b6e92ba124",
    "filename": "src/test/java/org/cactoos/io/CloseShieldInputTest.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/CloseShieldInputTest.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/CloseShieldInputTest.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/test/java/org/cactoos/io/CloseShieldInputTest.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.InputStream;\n+import org.cactoos.text.TextOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.IsText;\n+\n+/**\n+ * Test case for {@link CloseShieldInput}.\n+ * @since 1.0.0\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class CloseShieldInputTest {\n+\n+    @Test\n+    @SuppressWarnings(\"try\")\n+    void preventsOriginalStreamToBeClosed() throws Exception {\n+        try (FakeInputStream origin = new FakeInputStream()) {\n+            // @checkstyle EmptyBlockCheck (5 lines)\n+            try (\n+                InputStream stream =\n+                    new CloseShieldInput(new InputOf(origin)).stream()\n+            ) {\n+            }\n+            new Assertion<>(\n+                \"Must not close origin stream\",\n+                origin.isClosed(),\n+                new IsEqual<>(false)\n+            ).affirm();\n+        }\n+    }\n+\n+    @Test\n+    void readsContent() throws Exception {\n+        final String content = \"Text content\";\n+        try (\n+            InputStream in = new InputStreamOf(content)\n+        ) {\n+            new Assertion<>(\n+                \"Must read text\",\n+                new TextOf(new CloseShieldInput(new InputOf(in))),\n+                new IsText(content)\n+            ).affirm();\n+        }\n+    }\n+}"
  },
  {
    "sha": "6888b6b960398b259eb21374723b9a808adea7e5",
    "filename": "src/test/java/org/cactoos/io/CloseShieldOutputStreamTest.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/CloseShieldOutputStreamTest.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/CloseShieldOutputStreamTest.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/test/java/org/cactoos/io/CloseShieldOutputStreamTest.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,81 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Path;\n+import org.cactoos.text.TextOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.IsText;\n+\n+/**\n+ * Test case for {@link CloseShieldOutputStream}.\n+ * @since 1.0.0\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class CloseShieldOutputStreamTest {\n+\n+    @Test\n+    void writesContentToFile(@TempDir final Path tempdir) throws IOException {\n+        final File file = new File(tempdir.toFile(), \"cactoos-1.txt-1\");\n+        file.createNewFile();\n+        final Path temp = file.toPath();\n+        try (OutputStream out = new OutputStreamTo(temp)) {\n+            new Assertion<>(\n+                \"Must copy Input to Output and return Input\",\n+                new TextOf(\n+                    new Sticky(\n+                        new TeeInput(\n+                            new ResourceOf(\"org/cactoos/small-text.txt\"),\n+                            new OutputTo(new CloseShieldOutputStream(out))\n+                        )\n+                    )\n+                ),\n+                new IsText(\n+                    new TextOf(temp)\n+                )\n+            ).affirm();\n+        }\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"try\")\n+    void preventsOriginalStreamToBeClosed() throws Exception {\n+        try (FakeOutputStream origin = new FakeOutputStream()) {\n+            // @checkstyle EmptyBlockCheck (2 lines)\n+            try (OutputStream stream = new CloseShieldOutputStream(origin)) {\n+            }\n+            new Assertion<>(\n+                \"Must not close origin stream\",\n+                origin.isClosed(),\n+                new IsEqual<>(false)\n+            ).affirm();\n+        }\n+    }\n+}"
  },
  {
    "sha": "e388ad2555e31ce53f3c8a3481af68560a1b8ee4",
    "filename": "src/test/java/org/cactoos/io/CloseShieldOutputTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/CloseShieldOutputTest.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/CloseShieldOutputTest.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/test/java/org/cactoos/io/CloseShieldOutputTest.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.OutputStream;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link CloseShieldOutput}.\n+ * @since 1.0.0\n+ */\n+final class CloseShieldOutputTest {\n+\n+    @Test\n+    @SuppressWarnings(\"try\")\n+    void preventsOriginalStreamToBeClosed() throws Exception {\n+        try (FakeOutputStream origin = new FakeOutputStream()) {\n+            // @checkstyle EmptyBlockCheck (5 lines)\n+            try (\n+                OutputStream stream = new CloseShieldOutput(() -> origin).stream()\n+            ) {\n+            }\n+            new Assertion<>(\n+                \"Must not close origin stream\",\n+                origin.isClosed(),\n+                new IsEqual<>(false)\n+            ).affirm();\n+        }\n+    }\n+}"
  },
  {
    "sha": "7aa0fd0a3e3ae26210ff0b2ce798d097d5fcdc3c",
    "filename": "src/test/java/org/cactoos/io/FakeInputStream.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/FakeInputStream.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/FakeInputStream.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/test/java/org/cactoos/io/FakeInputStream.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Fake {@link InputStream} with ability to check if\n+ * it is closed.\n+ * @since 1.0.0\n+ */\n+final class FakeInputStream extends InputStream {\n+\n+    /**\n+     * If {@link InputStream} is closed.\n+     */\n+    private final AtomicBoolean closed;\n+\n+    /**\n+     * Ctor.\n+     */\n+    FakeInputStream() {\n+        this.closed = new AtomicBoolean(false);\n+    }\n+\n+    @Override\n+    public int read() throws IOException {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        this.closed.set(true);\n+    }\n+\n+    /**\n+     * If stream is closed.\n+     * @return Closed or not\n+     */\n+    public boolean isClosed() {\n+        return this.closed.get();\n+    }\n+}"
  },
  {
    "sha": "28e26a2d755032ba8663a2f1fe615ab143122bbe",
    "filename": "src/test/java/org/cactoos/io/FakeOutputStream.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/yegor256/cactoos/blob/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/FakeOutputStream.java",
    "raw_url": "https://github.com/yegor256/cactoos/raw/047fb51ee2050f75b5f71322832f97f1f87dfa03/src/test/java/org/cactoos/io/FakeOutputStream.java",
    "contents_url": "https://api.github.com/repos/yegor256/cactoos/contents/src/test/java/org/cactoos/io/FakeOutputStream.java?ref=047fb51ee2050f75b5f71322832f97f1f87dfa03",
    "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.io;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Fake {@link OutptStream} with ability to check if\n+ * it is closed.\n+ * @since 1.0.0\n+ */\n+final class FakeOutputStream extends OutputStream {\n+\n+    /**\n+     * If {@link OutputStream} is closed.\n+     */\n+    private final AtomicBoolean closed;\n+\n+    /**\n+     * Ctor.\n+     */\n+    FakeOutputStream() {\n+        this.closed = new AtomicBoolean(false);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.UncommentedEmptyMethodBody\")\n+    // @checkstyle ParameterNameCheck (1 lines)\n+    public void write(final int b) throws IOException {\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        this.closed.set(true);\n+    }\n+\n+    /**\n+     * If stream is closed.\n+     * @return Closed or not\n+     */\n+    public boolean isClosed() {\n+        return this.closed.get();\n+    }\n+}"
  }
]
