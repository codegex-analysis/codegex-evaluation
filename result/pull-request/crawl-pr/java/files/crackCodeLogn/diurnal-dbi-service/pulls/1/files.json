[
  {
    "sha": "49f1d3ccd48ff523f3c78ca5fa48665363909b4a",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/.gitignore",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/.gitignore",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/.gitignore?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -2,6 +2,9 @@ HELP.md\n target/\n .mvn\n mvn*\n+properties/*\n+logs.local/*\n+\n !.mvn/wrapper/maven-wrapper.jar\n !**/src/main/**/target/\n !**/src/test/**/target/"
  },
  {
    "sha": "3266adb738b6ec38a9c34bea96787c6a2cfdae20",
    "filename": "Procfile",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/Procfile",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/Procfile",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/Procfile?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1 @@\n+web: java -Xmx$APP_MAX_HEAP -Dserver.port=$PORT -DSPRING_SECURITY_USERNAME=$PROM_SPRING_USER -DSPRING_SECURITY_CRED=$PROM_SPRING_CRED -jar target/$APP_NAME-$APP_RELEASE_VERSION.jar\n\\ No newline at end of file"
  },
  {
    "sha": "a07d696f4ceb0edfd81190529821b542edb3ff12",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 95,
    "deletions": 66,
    "changes": 161,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/pom.xml",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/pom.xml",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/pom.xml?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,77 +1,106 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\t<modelVersion>4.0.0</modelVersion>\n-\t<parent>\n-\t\t<groupId>org.springframework.boot</groupId>\n-\t\t<artifactId>spring-boot-starter-parent</artifactId>\n-\t\t<version>2.4.3</version>\n-\t\t<relativePath/> <!-- lookup parent from repository -->\n-\t</parent>\n-\t<groupId>com.vv.personal</groupId>\n-\t<artifactId>diurnal-dbi-service</artifactId>\n-\t<version>0.0.1-SNAPSHOT</version>\n-\t<name>Diurnal DBI service</name>\n-\t<description>DBI service connecting to postgres server</description>\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.4.3</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n \n-\t<properties>\n-\t\t<java.version>1.8</java.version>\n-\t\t<apache-commons.version>3.11</apache-commons.version>\n-\t\t<spring-fox-boot-starter.version>3.0.0</spring-fox-boot-starter.version>\n-\t</properties>\n+    <groupId>com.vv.personal</groupId>\n+    <artifactId>diurnal-dbi-service</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>Diurnal DBI service</name>\n+    <description>DBI service connecting to postgres server</description>\n \n-\t<dependencies>\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>io.springfox</groupId>\n-\t\t\t<artifactId>springfox-boot-starter</artifactId>\n-\t\t\t<version>${spring-fox-boot-starter.version}</version>\n-\t\t</dependency>\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <apache-commons.version>3.11</apache-commons.version>\n+        <spring-fox-boot-starter.version>3.0.0</spring-fox-boot-starter.version>\n+        <gson.version>2.8.6</gson.version>\n+        <protobuf-util.version>3.14.0</protobuf-util.version>\n+        <heroku-maven.version>3.0.4</heroku-maven.version>\n+    </properties>\n \n-\t\t<dependency>\n-\t\t\t<groupId>org.postgresql</groupId>\n-\t\t\t<artifactId>postgresql</artifactId>\n-\t\t\t<scope>runtime</scope>\n-\t\t</dependency>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-security</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.springfox</groupId>\n+            <artifactId>springfox-boot-starter</artifactId>\n+            <version>${spring-fox-boot-starter.version}</version>\n+        </dependency>\n \n-\t\t<dependency>\n-\t\t\t<groupId>org.apache.commons</groupId>\n-\t\t\t<artifactId>commons-lang3</artifactId>\n-\t\t\t<version>${apache-commons.version}</version>\n-\t\t</dependency>\n+        <dependency>\n+            <groupId>org.postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <scope>runtime</scope>\n+        </dependency>\n \n-\t\t<dependency>\n-\t\t\t<groupId>com.vv.personal</groupId>\n-\t\t\t<artifactId>diurnal-artifactory</artifactId>\n-\t\t\t<version>1.0-SNAPSHOT</version>\n-\t\t</dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>${apache-commons.version}</version>\n+        </dependency>\n \n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n-\t\t\t<scope>test</scope>\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.security</groupId>\n-\t\t\t<artifactId>spring-security-test</artifactId>\n-\t\t\t<scope>test</scope>\n-\t\t</dependency>\n-\t</dependencies>\n+        <dependency>\n+            <groupId>com.google.code.gson</groupId>\n+            <artifactId>gson</artifactId>\n+            <version>${gson.version}</version>\n+        </dependency>\n \n-\t<build>\n-\t\t<plugins>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n-\t\t\t</plugin>\n-\t\t</plugins>\n-\t</build>\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>\n+            <artifactId>protobuf-java-util</artifactId>\n+            <version>${protobuf-util.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.vv.personal</groupId>\n+            <artifactId>diurnal-artifactory</artifactId>\n+            <version>1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>com.heroku.sdk</groupId>\n+                <artifactId>heroku-maven-plugin</artifactId>\n+                <version>${heroku-maven.version}</version>\n+                <configuration>\n+                    <appName>${project.artifactId}</appName>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n \n </project>"
  },
  {
    "sha": "36d1cf15eb8a987c00a9eced61c4d12758dc02bf",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/DiurnalDbiServer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/DiurnalDbiServer.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/DiurnalDbiServer.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/DiurnalDbiServer.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,14 +1,15 @@\n package com.vv.personal.diurnal.dbi;\n \n import com.vv.personal.diurnal.dbi.config.DbiConfig;\n-import com.vv.personal.diurnal.dbi.interactor.diurnal.DiurnalDbi;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.DiurnalDbi;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.event.EventListener;\n import org.springframework.core.env.Environment;\n import org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter;\n@@ -21,6 +22,7 @@\n \n import static com.vv.personal.diurnal.dbi.constants.Constants.*;\n \n+@ComponentScan({\"com.vv.personal.diurnal.dbi\", \"com.vv.personal.diurnal.ping\"})\n @SpringBootApplication\n public class DiurnalDbiServer {\n     private static final Logger LOGGER = LoggerFactory.getLogger(DiurnalDbiServer.class);\n@@ -44,7 +46,7 @@ ProtobufHttpMessageConverter protobufHttpMessageConverter() {\n     public Docket api() {\n         return new Docket(DocumentationType.SWAGGER_2)\n                 .select()\n-                .apis(RequestHandlerSelectors.basePackage(\"com.vv.personal.diurnal.dbi\"))\n+                .apis(RequestHandlerSelectors.basePackage(\"com.vv.personal.diurnal\"))\n                 .build();\n     }\n "
  },
  {
    "sha": "f1d6664088c03a6d6b6f1d066e22d074c01eb85c",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/auth/Authorizer.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/auth/Authorizer.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/auth/Authorizer.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/auth/Authorizer.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,25 @@\n+package com.vv.personal.diurnal.dbi.auth;\n+\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+\n+/**\n+ * @author Vivek\n+ * @since 09/01/21\n+ */\n+public class Authorizer {\n+\n+    private final PasswordEncoder passwordEncoder;\n+\n+    public Authorizer(PasswordEncoder passwordEncoder) {\n+        this.passwordEncoder = passwordEncoder;\n+    }\n+\n+    public String encode(String raw) {\n+        return passwordEncoder.encode(raw);\n+    }\n+\n+    public boolean hashMatches(String incomingRawCred, String hash) {\n+        return passwordEncoder.matches(incomingRawCred, hash);\n+    }\n+\n+}"
  },
  {
    "sha": "4867119be7dc04f6c92cf3002737b28998913236",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/config/AbstractDbiConfigurator.java",
    "status": "modified",
    "additions": 37,
    "deletions": 8,
    "changes": 45,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/AbstractDbiConfigurator.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/AbstractDbiConfigurator.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/config/AbstractDbiConfigurator.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,15 +1,19 @@\n package com.vv.personal.diurnal.dbi.config;\n \n+import com.vv.personal.diurnal.dbi.constants.DbConstants;\n+import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Properties;\n \n-import static com.vv.personal.diurnal.dbi.constants.Constants.*;\n+import static com.vv.personal.diurnal.dbi.constants.Constants.COLON_STR;\n \n /**\n  * @author Vivek\n@@ -22,12 +26,37 @@\n     protected Statement statement = null;\n \n     @Override\n-    public Connection getDbConnection() {\n+    public Connection getDbConnection() throws URISyntaxException {\n         if (connection == null) {\n-            String dbUrl = String.format(DB_CONNECTORS_URL, getDbServerHost(), getDbServerPort(), getDbName());\n+            String dbHost, dbName, user, cred;\n+            Integer dbPort;\n+            if (getDbUrl().isEmpty()) {\n+                dbHost = getDbServerHost();\n+                dbPort = getDbServerPort();\n+                dbName = getDbName();\n+                user = getDbUser();\n+                cred = getDbCred();\n+            } else {\n+                try {\n+                    String dbUrl = getDbUrl();  //procurement from Heroku - dynamic nature\n+                    LOGGER.info(\"Procured DB-URL: {}\", dbUrl);\n+                    URI dbUri = new URI(dbUrl);\n+                    dbHost = dbUri.getHost();\n+                    dbPort = dbUri.getPort();\n+                    dbName = dbUri.getPath().substring(1);\n+                    String[] userInfo = StringUtils.split(dbUri.getUserInfo(), COLON_STR);\n+                    user = userInfo[0];\n+                    cred = userInfo[1];\n+                } catch (URISyntaxException e) {\n+                    LOGGER.error(\"Failed to parse URL: {}. \", getDbUrl());\n+                    throw e;\n+                }\n+            }\n+            String dbUrl = String.format(DbConstants.DB_CONNECTORS_URL, dbHost, dbPort, dbName);\n+            Properties properties = getProperties(user, cred);\n             LOGGER.info(\"Establishing DB connection to: {}\", dbUrl);\n             try {\n-                Connection connection = DriverManager.getConnection(dbUrl, getProperties());\n+                Connection connection = DriverManager.getConnection(dbUrl, properties);\n                 LOGGER.info(\"DB connection successful => {}\", connection.getClientInfo());\n                 this.connection = connection;\n                 return connection;\n@@ -39,7 +68,7 @@ public Connection getDbConnection() {\n     }\n \n     @Override\n-    public Statement getStatement() {\n+    public Statement getStatement() throws URISyntaxException {\n         if (statement == null) {\n             connection = getDbConnection();\n             try {\n@@ -67,10 +96,10 @@ public boolean closeDbConnection() {\n         return true;\n     }\n \n-    private Properties getProperties() {\n+    private Properties getProperties(String user, String cred) {\n         Properties properties = new Properties();\n-        properties.setProperty(DB_USER_STRING, getDbUser());\n-        properties.setProperty(DB_CRED_STRING, getDbCred());\n+        properties.setProperty(DbConstants.DB_USER_STRING, user);\n+        properties.setProperty(DbConstants.DB_CRED_STRING, cred);\n         return properties;\n     }\n }"
  },
  {
    "sha": "78cc7ddceb4bf0c9de05d24d3add7d6add2a4b05",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfig.java",
    "status": "modified",
    "additions": 31,
    "deletions": 9,
    "changes": 40,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfig.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfig.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfig.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,20 +1,28 @@\n package com.vv.personal.diurnal.dbi.config;\n \n \n-import com.vv.personal.diurnal.dbi.interactor.diurnal.*;\n+import com.vv.personal.diurnal.dbi.auth.Authorizer;\n+import com.vv.personal.diurnal.dbi.constants.DbConstants;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.cache.CachedDiurnal;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.DiurnalDbi;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables.DiurnalTableEntry;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables.DiurnalTableEntryDay;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables.DiurnalTableTitleMapping;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables.DiurnalTableUserMapping;\n import com.vv.personal.diurnal.dbi.util.DbiUtil;\n import org.apache.commons.lang3.time.StopWatch;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Scope;\n+import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;\n \n import javax.annotation.PostConstruct;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static com.vv.personal.diurnal.dbi.constants.Constants.*;\n+import static com.vv.personal.diurnal.dbi.constants.DbConstants.*;\n \n /**\n  * @author Vivek\n@@ -38,25 +46,38 @@ public CachedDiurnal cachedDiurnal() {\n         return new CachedDiurnal();\n     }\n \n+    @Bean\n+    public Authorizer authorizer() {\n+        return new Authorizer(new Pbkdf2PasswordEncoder());\n+    }\n+\n     @Bean\n     @Qualifier(\"DiurnalTableUserMapping\")\n     public DiurnalTableUserMapping diurnalTableUserMapping() {\n-        return new DiurnalTableUserMapping(TABLE_DIURNAL_USER_MAPPING, PRIMARY_COL_USER_MAPPING, DiurnalDbConnector(), cachedDiurnal(),\n-                DbiUtil::generateCreateTableSql, \"diurnal.user_mapping\");\n+        return new DiurnalTableUserMapping(DbConstants.TABLE_DIURNAL_USER_MAPPING, DbConstants.PRIMARY_COL_USER_MAPPING, DiurnalDbConnector(), cachedDiurnal(),\n+                DbiUtil::generateCreateTableSql, DIURNAL_USER_MAPPING_SQL);\n+    }\n+\n+    @Bean\n+    @Qualifier(\"DiurnalTableEntryDay\")\n+    public DiurnalTableEntryDay diurnalTableEntryDays() {\n+        return new DiurnalTableEntryDay(TABLE_DIURNAL_ENTRY_DAY, PRIMARY_COL_ENTRY_DAY, DiurnalDbConnector(), cachedDiurnal(),\n+                DbiUtil::generateCreateTableSql, DIURNAL_ENTRY_DAY_SQL);\n     }\n \n     @Bean\n     @Qualifier(\"DiurnalTableEntry\")\n     public DiurnalTableEntry diurnalTableEntries() {\n-        return new DiurnalTableEntry(TABLE_DIURNAL_ENTRY, PRIMARY_COL_ENTRY, DiurnalDbConnector(), cachedDiurnal(),\n-                DbiUtil::generateCreateTableSql, \"diurnal.entry\");\n+        return new DiurnalTableEntry(DbConstants.TABLE_DIURNAL_ENTRY, DbConstants.PRIMARY_COL_ENTRY, DiurnalDbConnector(), cachedDiurnal(),\n+                DbiUtil::generateCreateTableSql, DIURNAL_ENTRY_SQL);\n     }\n \n     @Bean\n     @Qualifier(\"DiurnalTableTitleMapping\")\n+    @Deprecated\n     public DiurnalTableTitleMapping diurnalTableTitleMapping() {\n-        return new DiurnalTableTitleMapping(TABLE_DIURNAL_TITLE_MAPPING, PRIMARY_COL_TITLE_MAPPING, DiurnalDbConnector(), cachedDiurnal(),\n-                DbiUtil::generateCreateTableSql, \"diurnal.title_mapping\");\n+        return new DiurnalTableTitleMapping(DbConstants.TABLE_DIURNAL_TITLE_MAPPING, DbConstants.PRIMARY_COL_TITLE_MAPPING, DiurnalDbConnector(), cachedDiurnal(),\n+                DbiUtil::generateCreateTableSql, DIURNAL_TITLE_MAPPING_SQL);\n     }\n \n     @Bean(initMethod = \"start\")\n@@ -69,7 +90,8 @@ public StopWatch stopWatch() {\n     public void postHaste() {\n         diurnalDbis.add(diurnalTableUserMapping());\n         diurnalDbis.add(diurnalTableEntries());\n-        diurnalDbis.add(diurnalTableTitleMapping());\n+        diurnalDbis.add(diurnalTableEntryDays());\n+        //diurnalDbis.add(diurnalTableTitleMapping());\n     }\n \n     public boolean isCreateTablesOnStartup() {"
  },
  {
    "sha": "fea536fe5bc924f395637f916a34ed40e10fed2d",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfigForDiurnal.java",
    "status": "modified",
    "additions": 11,
    "deletions": 3,
    "changes": 14,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfigForDiurnal.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfigForDiurnal.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfigForDiurnal.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -13,18 +13,21 @@\n     @Value(\"${db.diurnal.server.host:localhost}\")\n     private String dbServerHost;\n \n-    @Value(\"${db.diurnal.server.port}\")\n+    @Value(\"${db.diurnal.server.port:5432}\")\n     private int dbServerPort;\n \n     @Value(\"${db.diurnal.name:diurnal}\")\n     private String dbName;\n \n-    @Value(\"${db.diurnal.user}\")\n+    @Value(\"${db.diurnal.user:}\")\n     private String dbUser;\n \n-    @Value(\"${db.diurnal.cred}\")\n+    @Value(\"${db.diurnal.cred:}\")\n     private String dbCred;\n \n+    @Value(\"${db.diurnal.url:}\")\n+    private String dbUrl;\n+\n     @Override\n     public String getDbServerHost() {\n         return dbServerHost;\n@@ -50,4 +53,9 @@ public String getDbCred() {\n         return dbCred;\n     }\n \n+    @Override\n+    public String getDbUrl() {\n+        return dbUrl;\n+    }\n+\n }"
  },
  {
    "sha": "5bc5439cdcdc4c895780435efa643e4e593c69d2",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfigurator.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfigurator.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfigurator.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/config/DbiConfigurator.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,5 +1,6 @@\n package com.vv.personal.diurnal.dbi.config;\n \n+import java.net.URISyntaxException;\n import java.sql.Connection;\n import java.sql.Statement;\n \n@@ -19,9 +20,11 @@\n \n     String getDbCred();\n \n-    Connection getDbConnection();\n+    String getDbUrl();\n+\n+    Connection getDbConnection() throws URISyntaxException;\n \n     boolean closeDbConnection();\n \n-    Statement getStatement();\n+    Statement getStatement() throws URISyntaxException;\n }"
  },
  {
    "sha": "0d6d7a24372964c21266553948ebac902d5b6886",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/config/GenericConfig.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/GenericConfig.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/config/GenericConfig.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/config/GenericConfig.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,21 @@\n+package com.vv.personal.diurnal.dbi.config;\n+\n+import org.apache.commons.lang3.time.StopWatch;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+/**\n+ * @author Vivek\n+ * @since 05/03/21\n+ */\n+@Configuration\n+public class GenericConfig {\n+\n+    @Scope(\"prototype\")\n+    @Bean(initMethod = \"start\", destroyMethod = \"stop\")\n+    public StopWatch procureStopWatch() {\n+        return new StopWatch();\n+    }\n+\n+}"
  },
  {
    "sha": "1aec1292e36bf2a1ea23365a8ed2cfa3f8c29fbd",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/constants/Constants.java",
    "status": "modified",
    "additions": 23,
    "deletions": 20,
    "changes": 43,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/constants/Constants.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/constants/Constants.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/constants/Constants.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,7 +1,11 @@\n package com.vv.personal.diurnal.dbi.constants;\n \n+import com.vv.personal.diurnal.artifactory.generated.ResponsePrimitiveProto;\n+\n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n \n /**\n  * @author Vivek\n@@ -11,43 +15,42 @@\n \n     public static final String EMPTY_STR = \"\";\n     public static final String SPACE_STR = \" \";\n+    public static final String NEW_LINE = \"\\n\";\n     public static final String COMMA_STR = \",\";\n-    public static final String DEFAULT_STR_INVALID = \"-1\";\n+    public static final String COLON_STR = \":\";\n+    public static final String REPLACE_JSON_DI = \"`@%\"; //DI - double inverts\n+    public static final String DEFAULT_TITLE = \"-TITLE-\";\n \n-    public static final int DEFAULT_INT_INVALID = -1;\n+    public static final int NA_INT = -1;\n+    public static final int ONE = 1;\n+    public static final double DEFAULT_AMOUNT = 0.0;\n+    public static final long NA_LONG = -1L;\n \n     public static final List<Integer> EMPTY_LIST_INT = new ArrayList<>(0);\n \n     //RESPONSES\n     public static final Integer INT_RESPONSE_WONT_PROCESS = -13; //N Proc\n \n+    public static final ResponsePrimitiveProto.ResponsePrimitive RESPOND_FALSE_BOOL = ResponsePrimitiveProto.ResponsePrimitive.newBuilder().setBoolResponse(false).build();\n+    public static final ResponsePrimitiveProto.ResponsePrimitive RESPOND_TRUE_BOOL = ResponsePrimitiveProto.ResponsePrimitive.newBuilder().setBoolResponse(true).build();\n+\n+    public static final Set<String> TITLES_TO_EXEMPT = new HashSet<>();\n+\n+    static {\n+        TITLES_TO_EXEMPT.add(\"-TITLE-\");\n+        TITLES_TO_EXEMPT.add(\"###\");\n+        TITLES_TO_EXEMPT.add(\"\");\n+    }\n+\n     //FORMATTERS\n     public static final String HEROKU_SWAGGER_UI_URL = \"https://%s/swagger-ui/index.html\";\n     public static final String SWAGGER_UI_URL = \"http://%s:%s/swagger-ui/index.html\";\n     public static final String HEROKU_HOST_URL = \"https://%s\";\n     public static final String HOST_URL = \"http://%s:%s\";\n-    public static final String DB_CONNECTORS_URL = \"jdbc:postgresql://%s:%d/%s\";\n \n     public static final String LOCALHOST = \"localhost\";\n     public static final String LOCAL_SPRING_HOST = \"local.server.host\";\n     public static final String LOCAL_SPRING_PORT = \"local.server.port\";\n     public static final String SPRING_APPLICATION_HEROKU = \"spring.application.heroku\";\n-    public static final String DB_USER_STRING = \"user\";\n-    public static final String DB_CRED_STRING = \"password\";\n-\n-\n-    public static final String DB_DIURNAL = \"diurnal\";\n-    public static final String TABLE_DIURNAL_USER_MAPPING = \"user_mapping\";\n-    public static final String TABLE_DIURNAL_TITLE_MAPPING = \"title_mapping\";\n-    public static final String TABLE_DIURNAL_ENTRY = \"entry\";\n-\n-    public static final String PRIMARY_COL_ENTRY = \"mobile,date,serial\";\n-    public static final String PRIMARY_COL_USER_MAPPING = \"mobile\";\n-    public static final String PRIMARY_COL_TITLE_MAPPING = \"mobile,date\";\n-\n-\n-    public static final String SELECT_ALL_IDS = \"SELECT %s FROM %s\";\n-    public static final String SELECT_ALL = \"SELECT * FROM %s\";\n \n-    public static final String FILE_SQL_LOCATION_BASE_CREATETABLES = \"sql/createTables\";\n }"
  },
  {
    "sha": "eca9ceda071a1cd6702ba3163dc85966d2755497",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/constants/DbConstants.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/constants/DbConstants.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/constants/DbConstants.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/constants/DbConstants.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,37 @@\n+package com.vv.personal.diurnal.dbi.constants;\n+\n+/**\n+ * @author Vivek\n+ * @since 25/02/21\n+ */\n+public class DbConstants {\n+\n+    public static final String DB_USER_STRING = \"user\";\n+    public static final String DB_CRED_STRING = \"password\";\n+    public static final String DB_DIURNAL = \"diurnal\";\n+\n+    public static final String DB_CONNECTORS_URL = \"jdbc:postgresql://%s:%d/%s\";\n+\n+    public static final String TABLE_DIURNAL_USER_MAPPING = \"user_mapping\";\n+    public static final String TABLE_DIURNAL_TITLE_MAPPING = \"title_mapping\";\n+    public static final String TABLE_DIURNAL_ENTRY = \"entry\";\n+    public static final String TABLE_DIURNAL_ENTRY_DAY = \"entry_day\";\n+\n+    @Deprecated\n+    public static final String PRIMARY_COL_ENTRY = \"mobile,date,serial\";\n+    @Deprecated\n+    public static final String PRIMARY_COL_TITLE_MAPPING = \"mobile,date\";\n+    public static final String PRIMARY_COL_ENTRY_DAY = \"hash_email,date\";\n+    public static final String PRIMARY_COL_USER_MAPPING = \"hash_email\";\n+\n+    public static final String SELECT_ALL_IDS = \"SELECT %s FROM %s\";\n+    public static final String SELECT_ALL = \"SELECT * FROM %s\";\n+    public static final String DROP_TABLE = \"DROP TABLE %s\";\n+    public static final String TRUNCATE_TABLE = \"TRUNCATE TABLE %s\";\n+\n+    public static final String FILE_SQL_LOCATION_BASE_CREATETABLES = \"sql/createTables\";\n+    public static final String DIURNAL_USER_MAPPING_SQL = \"diurnal.user_mapping\";\n+    public static final String DIURNAL_ENTRY_SQL = \"diurnal.entry\";\n+    public static final String DIURNAL_ENTRY_DAY_SQL = \"diurnal.entry_day\";\n+    public static final String DIURNAL_TITLE_MAPPING_SQL = \"diurnal.title_mapping\";\n+}"
  },
  {
    "sha": "6a552dbb597107c9071902f838cfb9ea0bf7f9b8",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/controller/AuthController.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/AuthController.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/AuthController.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/controller/AuthController.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,53 @@\n+package com.vv.personal.diurnal.dbi.controller;\n+\n+import com.vv.personal.diurnal.artifactory.generated.ResponsePrimitiveProto;\n+import com.vv.personal.diurnal.dbi.auth.Authorizer;\n+import io.swagger.annotations.ApiOperation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.*;\n+\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.generateResponsePrimitiveBool;\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.generateResponsePrimitiveString;\n+\n+/**\n+ * @author Vivek\n+ * @since 07/03/21\n+ */\n+@RestController(\"auth-controller\")\n+@RequestMapping(\"/diurnal/auth\")\n+public class AuthController {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuthController.class);\n+\n+    @Autowired\n+    private Authorizer authorizer;\n+\n+    @ApiOperation(value = \"generate hash\", hidden = true)\n+    @GetMapping(\"/generate/hash\")\n+    public ResponsePrimitiveProto.ResponsePrimitive generateHash(@RequestBody String rawCred) {\n+        LOGGER.info(\"Rx-ed raw-cred '{}' to hash\", rawCred);\n+        String hash = authorizer.encode(rawCred);\n+        LOGGER.info(\"Generated hash [{}]\", hash);\n+        return generateResponsePrimitiveString(hash);\n+    }\n+\n+    @GetMapping(\"/generate/manual/hash\")\n+    public String generateHashManually(@RequestParam String rawCred) {\n+        return generateHash(rawCred).getResponse();\n+    }\n+\n+    @ApiOperation(value = \"verify credential to hash\", hidden = true)\n+    @GetMapping(\"/verify/cred-hash\")\n+    public ResponsePrimitiveProto.ResponsePrimitive verifyRawCredToHash(@RequestParam String rawCred,\n+                                                                        @RequestParam String hash) {\n+        return generateResponsePrimitiveBool(authorizer.hashMatches(rawCred, hash));\n+    }\n+\n+    @GetMapping(\"/verify/manual/cred-hash\")\n+    public Boolean verifyRawCredToHashManually(@RequestParam String rawCred,\n+                                               @RequestParam String hash) {\n+        return generateResponsePrimitiveBool(authorizer.hashMatches(rawCred, hash)).getBoolResponse();\n+    }\n+\n+}"
  },
  {
    "sha": "71fa34bce13c4d9d7a4029898918f0f112b55987",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/controller/DataController.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/DataController.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/DataController.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/controller/DataController.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,123 @@\n+package com.vv.personal.diurnal.dbi.controller;\n+\n+import com.vv.personal.diurnal.artifactory.generated.DataTransitProto;\n+import com.vv.personal.diurnal.artifactory.generated.ResponsePrimitiveProto;\n+import com.vv.personal.diurnal.artifactory.generated.UserMappingProto;\n+import com.vv.personal.diurnal.dbi.config.GenericConfig;\n+import com.vv.personal.diurnal.dbi.engine.transformer.TransformFullBackupToProtos;\n+import com.vv.personal.diurnal.dbi.util.DiurnalUtil;\n+import io.swagger.annotations.ApiOperation;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.time.StopWatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.vv.personal.diurnal.dbi.constants.Constants.*;\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.*;\n+\n+/**\n+ * @author Vivek\n+ * @since 27/02/21\n+ * <p>\n+ * This controller's end-points are the one to be used by external client - app - to push data to DB\n+ */\n+@RestController(\"data-controller\")\n+@RequestMapping(\"/diurnal/data\")\n+public class DataController {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DataController.class);\n+\n+    @Autowired\n+    private EntryDayController entryDayController;\n+    @Autowired\n+    private UserMappingController userMappingController;\n+    @Autowired\n+    private GenericConfig genericConfig;\n+\n+    @ApiOperation(value = \"Sign up new user\", hidden = true)\n+    @PostMapping(\"/signup\")\n+    public ResponsePrimitiveProto.ResponsePrimitive signUpUser(@RequestBody DataTransitProto.DataTransit dataTransit) {\n+        LOGGER.info(\"Rx-ed user to sign up -> [{}]\", dataTransit.getEmail());\n+        StopWatch stopWatch = genericConfig.procureStopWatch();\n+        try {\n+            UserMappingProto.UserMapping userMapping = DiurnalUtil.generateUserMapping(dataTransit.getMobile(), dataTransit.getEmail(), dataTransit.getUser(),\n+                    dataTransit.getPowerUser(), dataTransit.getHashCred());\n+            boolean signUpResult = userMappingController.createUserMapping(userMapping) == ONE;\n+            LOGGER.info(\"Sign up result for [{}] => {}\", dataTransit.getEmail(), signUpResult);\n+            return signUpResult ? RESPOND_TRUE_BOOL : RESPOND_FALSE_BOOL;\n+        } finally {\n+            stopWatch.stop();\n+            LOGGER.info(\"SignUp Operation took: {} ms\", stopWatch.getTime(TimeUnit.MILLISECONDS));\n+        }\n+    }\n+\n+    @ApiOperation(value = \"Read whole backup file and generate data for DB\", hidden = true)\n+    @PostMapping(\"/push/backup/whole\")\n+    public ResponsePrimitiveProto.ResponsePrimitive pushWholeBackup(@RequestBody DataTransitProto.DataTransit dataTransit) {\n+        LOGGER.info(\"Rx-ed data in dataTransit to backup to DB: {} bytes, for email [{}]\", dataTransit.getBackupData().getBytes().length,\n+                dataTransit.getEmail());\n+        StopWatch stopWatch = genericConfig.procureStopWatch();\n+        try {\n+            Integer emailHash = userMappingController.retrieveHashEmail(dataTransit.getEmail());\n+            if (isEmailHashAbsent(emailHash)) {\n+                LOGGER.warn(\"User doesn't exist for email: {}\", dataTransit.getEmail());\n+                return RESPOND_FALSE_BOOL;\n+            }\n+            if (!userMappingController.retrievePowerUserStatus(emailHash)) {\n+                LOGGER.warn(\"User for email [{}] doesn't have power-user privileges, cannot proceed with cloud backup!\", dataTransit.getEmail());\n+                return RESPOND_FALSE_BOOL;\n+            }\n+            TransformFullBackupToProtos transformFullBackupToProtos = new TransformFullBackupToProtos(\n+                    Arrays.asList(StringUtils.split(dataTransit.getBackupData(), NEW_LINE)),\n+                    emailHash);\n+            if (transformFullBackupToProtos.transformWithoutSuppliedDate()) {\n+                List<Integer> bulkEntryDayOpResult = entryDayController.deleteAndCreateEntryDays(transformFullBackupToProtos.getEntryDayList());\n+                if (bulkEntryDayOpResult.stream().allMatch(integer -> integer == 1))\n+                    return generateResponsePrimitiveBool(true);\n+            }\n+        } finally {\n+            stopWatch.stop();\n+            LOGGER.info(\"Pushing backup to cloud operation took: {} ms\", stopWatch.getTime(TimeUnit.MILLISECONDS));\n+        }\n+        return RESPOND_FALSE_BOOL;\n+    }\n+\n+    @ApiOperation(value = \"retrieve hash cred for user\", hidden = true)\n+    @PostMapping(\"/retrieve/user/hash/cred\")\n+    public ResponsePrimitiveProto.ResponsePrimitive retrieveUserHashCredFromDb(@RequestBody UserMappingProto.UserMapping userMapping) {\n+        LOGGER.info(\"Received req to extract hash for user: {}\", userMapping.getEmail());\n+        Integer emailHash = userMappingController.retrieveHashEmail(userMapping.getEmail());\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User doesn't exist for email: {}\", userMapping.getEmail());\n+            return RESPOND_FALSE_BOOL;\n+        }\n+        return generateResponsePrimitiveString(\n+                userMappingController.retrieveHashCred(emailHash));\n+    }\n+\n+    @GetMapping(\"/manual/retrieve/user/hash/cred\")\n+    public String retrieveUserHashCredFromDbManually(@RequestParam String email) {\n+        email = refineEmail(email);\n+        return retrieveUserHashCredFromDb(DiurnalUtil.generateUserMapping(email)).getResponse();\n+    }\n+\n+    public DataController setEntryDayController(EntryDayController entryDayController) {\n+        this.entryDayController = entryDayController;\n+        return this;\n+    }\n+\n+    public DataController setUserMappingController(UserMappingController userMappingController) {\n+        this.userMappingController = userMappingController;\n+        return this;\n+    }\n+\n+    public DataController setGenericConfig(GenericConfig genericConfig) {\n+        this.genericConfig = genericConfig;\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "a30ab479027687381ac5de5c5f7897bf69ad3d74",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/controller/EntryController.java",
    "status": "modified",
    "additions": 78,
    "deletions": 25,
    "changes": 103,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/EntryController.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/EntryController.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/controller/EntryController.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -2,7 +2,7 @@\n \n import com.google.protobuf.AbstractMessage;\n import com.vv.personal.diurnal.artifactory.generated.EntryProto;\n-import com.vv.personal.diurnal.dbi.interactor.diurnal.DiurnalTableEntry;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables.DiurnalTableEntry;\n import io.swagger.annotations.ApiOperation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -11,14 +11,16 @@\n import org.springframework.web.bind.annotation.*;\n \n import java.util.List;\n-import java.util.stream.Collectors;\n \n+import static com.vv.personal.diurnal.dbi.constants.Constants.EMPTY_LIST_INT;\n import static com.vv.personal.diurnal.dbi.constants.Constants.INT_RESPONSE_WONT_PROCESS;\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.*;\n \n /**\n  * @author Vivek\n  * @since 24/02/21\n  */\n+@Deprecated\n @RestController(\"entry-controller\")\n @RequestMapping(\"/diurnal/entry\")\n public class EntryController {\n@@ -37,7 +39,16 @@ public Integer createEntry(@RequestBody EntryProto.Entry entry) {\n         return sqlResult;\n     }\n \n-    @GetMapping(\"/create/manual/entry\")\n+    @ApiOperation(value = \"create bulk entries\", hidden = true)\n+    @PostMapping(\"/create/entries\")\n+    public List<Integer> bulkCreateEntries(@RequestBody EntryProto.EntryList entryList) {\n+        LOGGER.info(\"Bulk creating {} entries\", entryList.getEntryCount());\n+        List<Integer> bulkEntriesCreationResult = performBulkOpInt(entryList.getEntryList(), this::createEntry);\n+        LOGGER.info(\"Result of bulk entry creation: {}\", bulkEntriesCreationResult);\n+        return bulkEntriesCreationResult;\n+    }\n+\n+    @PutMapping(\"/create/manual/entry\")\n     public Integer createEntryManually(@RequestParam Long mobile,\n                                        @RequestParam Integer date,\n                                        @RequestParam Integer serial,\n@@ -46,12 +57,7 @@ public Integer createEntryManually(@RequestParam Long mobile,\n                                        @RequestParam Double amount,\n                                        @RequestParam String description) {\n         LOGGER.info(\"Obtained manual req for new entry creation: {} x {} x {}\", mobile, date, serial);\n-        return createEntry(EntryProto.Entry.newBuilder()\n-                .setMobile(mobile)\n-                .setDate(date)\n-                .setSerial(serial)\n-                .setSign(sign).setCurrency(currency).setAmount(amount).setDescription(description)\n-                .build());\n+        return createEntry(generateEntry(mobile, date, serial, sign, currency, amount, description));\n     }\n \n     @ApiOperation(value = \"delete entry\", hidden = true)\n@@ -63,16 +69,36 @@ public Integer deleteEntry(@RequestBody EntryProto.Entry entry) {\n         return sqlResult;\n     }\n \n-    @GetMapping(\"/delete/manual/entry\")\n+    @ApiOperation(value = \"delete bulk entries\", hidden = true)\n+    @PostMapping(\"/delete/entries\")\n+    public List<Integer> bulkDeleteEntries(@RequestBody EntryProto.EntryList entryList) {\n+        LOGGER.info(\"Bulk deleting {} entries\", entryList.getEntryCount());\n+        List<Integer> bulkEntriesDeletionResult = performBulkOpInt(entryList.getEntryList(), this::deleteEntry);\n+        LOGGER.info(\"Result of bulk entry deletion: {}\", bulkEntriesDeletionResult);\n+        return bulkEntriesDeletionResult;\n+    }\n+\n+    @DeleteMapping(\"/delete/manual/entry\")\n     public Integer deleteEntryManually(@RequestParam Long mobile,\n                                        @RequestParam Integer date,\n                                        @RequestParam Integer serial) {\n         LOGGER.info(\"Obtained manual req for entry deletion: {} x {} x {}\", mobile, date, serial);\n-        return deleteEntry(EntryProto.Entry.newBuilder()\n-                .setMobile(mobile)\n-                .setDate(date)\n-                .setSerial(serial)\n-                .build());\n+        return deleteEntry(generateEntryOnPk(mobile, date, serial));\n+    }\n+\n+    @ApiOperation(value = \"delete then create entries\", hidden = true)\n+    @PostMapping(\"/delete-create/entries\")\n+    public List<Integer> deleteAndCreateEntries(@RequestBody EntryProto.EntryList entryList) {\n+        if (entryList.getEntryList().isEmpty()) return EMPTY_LIST_INT;\n+        LOGGER.info(\"Received request to perform delete-create op on {} entries\", entryList.getEntryCount());\n+        bulkDeleteEntries(entryList);\n+\n+        List<Integer> bulkOpResult = bulkCreateEntries(entryList);\n+        if (bulkOpResult.stream().anyMatch(integer -> integer == 0)) {\n+            LOGGER.warn(\"Bulk create had some issues while creating certain entries. Check log for further details\");\n+        }\n+        LOGGER.info(\"Bulk creation op of entries completed.\");\n+        return bulkOpResult;\n     }\n \n     @ApiOperation(value = \"update entry\", hidden = true)\n@@ -82,32 +108,59 @@ public Integer updateEntry(@RequestBody EntryProto.Entry entry) {\n         return INT_RESPONSE_WONT_PROCESS;\n     }\n \n-    @GetMapping(\"/update/manual/entry\")\n+    @PatchMapping(\"/update/manual/entry\")\n     public Integer updateEntryManually(@RequestParam Long mobile,\n                                        @RequestParam Integer date,\n                                        @RequestParam Integer serial) {\n         LOGGER.info(\"Obtained manual req for entry updation: {} x {} x {}\", mobile, date, serial);\n-        return updateEntry(EntryProto.Entry.newBuilder()\n-                .setMobile(mobile)\n-                .setDate(date)\n-                .setSerial(serial)\n-                .build());\n+        return updateEntry(generateEntryOnPk(mobile, date, serial));\n     }\n \n     @ApiOperation(value = \"retrieve all entries\", hidden = true)\n     @GetMapping(\"/retrieve/all/entries\")\n     public EntryProto.EntryList retrieveAllEntries() {\n         LOGGER.info(\"Retrieving all entries\");\n         EntryProto.EntryList entryList = diurnalTableEntry.retrieveAll();\n-        LOGGER.info(\"Result of retrieving all entries: {} entries\", entryList.getEntriesCount());\n+        LOGGER.info(\"Result of retrieving all entries: {} entries\", entryList.getEntryCount());\n         return entryList;\n     }\n \n     @GetMapping(\"/retrieve/all/manual/entries\")\n     public List<String> retrieveAllEntriesManually() {\n         LOGGER.info(\"Obtained manual req for retrieving all entries\");\n-        return retrieveAllEntries().getEntriesList().stream()\n-                .map(AbstractMessage::toString)\n-                .collect(Collectors.toList());\n+        return performBulkOpStr(retrieveAllEntries().getEntryList(), AbstractMessage::toString);\n+    }\n+\n+    @ApiOperation(value = \"check if entry exists\", hidden = true)\n+    @GetMapping(\"/check/entry\")\n+    public Boolean checkIfEntryExists(@RequestParam EntryProto.Entry entry) {\n+        LOGGER.info(\"Checking if entry exists for: {} x {} x {}\", entry.getMobile(), entry.getDate(), entry.getSerial());\n+        boolean checkIfEntryExists = diurnalTableEntry.checkEntity(entry);\n+        LOGGER.info(\"Result: {}\", checkIfEntryExists);\n+        return checkIfEntryExists;\n     }\n+\n+    @GetMapping(\"/check/manual/entry\")\n+    public Boolean checkIfEntryExistsManually(@RequestParam Long mobile,\n+                                              @RequestParam Integer date,\n+                                              @RequestParam Integer serial) {\n+        LOGGER.info(\"Checking if entry exists for: {} x {} x {}\", mobile, date, serial);\n+        return checkIfEntryExists(generateEntryOnPk(mobile, date, serial));\n+    }\n+\n+    @PutMapping(\"/table/create\")\n+    public int createTableIfNotExists() {\n+        return genericCreateTableIfNotExists(diurnalTableEntry);\n+    }\n+\n+    @DeleteMapping(\"/table/drop\")\n+    public Boolean dropTable(@RequestParam(defaultValue = \"false\") Boolean absolutelyDropTable) {\n+        return absolutelyDropTable ? genericDropTable(diurnalTableEntry) : false;\n+    }\n+\n+    @DeleteMapping(\"/table/truncate\")\n+    public Boolean truncateTable(@RequestParam(defaultValue = \"false\") Boolean absolutelyTruncateTable) {\n+        return absolutelyTruncateTable ? genericTruncateTable(diurnalTableEntry) : false;\n+    }\n+\n }"
  },
  {
    "sha": "040b59b2e0b51df8b9b0d87cfca3319c23547138",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/controller/EntryDayController.java",
    "status": "added",
    "additions": 180,
    "deletions": 0,
    "changes": 180,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/EntryDayController.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/EntryDayController.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/controller/EntryDayController.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,180 @@\n+package com.vv.personal.diurnal.dbi.controller;\n+\n+import com.google.protobuf.AbstractMessage;\n+import com.vv.personal.diurnal.artifactory.generated.EntryDayProto;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables.DiurnalTableEntryDay;\n+import io.swagger.annotations.ApiOperation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.List;\n+\n+import static com.vv.personal.diurnal.dbi.constants.Constants.*;\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.*;\n+\n+/**\n+ * @author Vivek\n+ * @since 06/03/21\n+ */\n+@RestController(\"entry-day-controller\")\n+@RequestMapping(\"/diurnal/entry-day\")\n+public class EntryDayController {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EntryDayController.class);\n+\n+    @Autowired\n+    @Qualifier(\"DiurnalTableEntryDay\")\n+    private DiurnalTableEntryDay diurnalTableEntryDay;\n+\n+    @Autowired\n+    private UserMappingController userMappingController;\n+\n+    @ApiOperation(value = \"create entry day\", hidden = true)\n+    @PostMapping(\"/create/entry-day\")\n+    public Integer createEntryDay(@RequestBody EntryDayProto.EntryDay entryDay) {\n+        LOGGER.info(\"Creating new entry-day: {} x {}\", entryDay.getHashEmail(), entryDay.getDate());\n+        Integer sqlResult = diurnalTableEntryDay.pushNewEntity(entryDay);\n+        LOGGER.info(\"Result of new entry-day creation: {}\", sqlResult);\n+        return sqlResult;\n+    }\n+\n+    @ApiOperation(value = \"create bulk entry-days\", hidden = true)\n+    @PostMapping(\"/create/entry-days\")\n+    public List<Integer> bulkCreateEntryDays(@RequestBody EntryDayProto.EntryDayList entryDayList) {\n+        LOGGER.info(\"Bulk creating {} entry-days\", entryDayList.getEntryDayCount());\n+        List<Integer> bulkEntriesCreationResult = performBulkOpInt(entryDayList.getEntryDayList(), this::createEntryDay);\n+        LOGGER.info(\"Result of bulk entry-days creation: {}\", bulkEntriesCreationResult);\n+        return bulkEntriesCreationResult;\n+    }\n+\n+    @PutMapping(\"/manual/create/entry-day\")\n+    public Integer createEntryDayManually(@RequestParam String email,\n+                                          @RequestParam Integer date,\n+                                          @RequestParam(defaultValue = EMPTY_STR, required = false) String title,\n+                                          @RequestParam String entriesAsString) {\n+        Integer emailHash = userMappingController.retrieveHashEmail(email);\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User not found for entry-day insertion for email [{}]\", email);\n+            return INT_RESPONSE_WONT_PROCESS;\n+        }\n+        LOGGER.info(\"Obtained manual req for new entry-day creation: {} x {}\", email, date);\n+        return createEntryDay(generateCompleteEntryDay(emailHash, date, title, entriesAsString));\n+    }\n+\n+    @ApiOperation(value = \"delete entry-day\", hidden = true)\n+    @PostMapping(\"/delete/entry-day\")\n+    public Integer deleteEntryDay(@RequestBody EntryDayProto.EntryDay entryDay) {\n+        LOGGER.info(\"Deleting entry-day: {} x {}\", entryDay.getHashEmail(), entryDay.getDate());\n+        Integer sqlResult = diurnalTableEntryDay.deleteEntity(entryDay);\n+        LOGGER.info(\"Result of entry-day deletion: {}\", sqlResult);\n+        return sqlResult;\n+    }\n+\n+    @ApiOperation(value = \"delete bulk entry-days\", hidden = true)\n+    @PostMapping(\"/delete/entry-days\")\n+    public List<Integer> bulkDeleteEntryDays(@RequestBody EntryDayProto.EntryDayList entryDayList) {\n+        LOGGER.info(\"Bulk deleting {} entry-days\", entryDayList.getEntryDayCount());\n+        List<Integer> bulkEntriesDeletionResult = performBulkOpInt(entryDayList.getEntryDayList(), this::deleteEntryDay);\n+        LOGGER.info(\"Result of bulk entry-days deletion: {}\", bulkEntriesDeletionResult);\n+        return bulkEntriesDeletionResult;\n+    }\n+\n+    @DeleteMapping(\"/manual/delete/entry-day\")\n+    public Integer deleteEntryDayManually(@RequestParam String email,\n+                                          @RequestParam Integer date) {\n+        Integer emailHash = userMappingController.retrieveHashEmail(email);\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User not found for entry-day deletion for email [{}]\", email);\n+            return INT_RESPONSE_WONT_PROCESS;\n+        }\n+        LOGGER.info(\"Obtained manual req for entry-day deletion: {} x {}\", email, date);\n+        return deleteEntryDay(generateEntryDayOnPk(emailHash, date));\n+    }\n+\n+    @ApiOperation(value = \"delete then create entry-days\", hidden = true)\n+    @PostMapping(\"/delete-create/entry-days\")\n+    public List<Integer> deleteAndCreateEntryDays(@RequestBody EntryDayProto.EntryDayList entryDayList) {\n+        if (entryDayList.getEntryDayList().isEmpty()) return EMPTY_LIST_INT;\n+        LOGGER.info(\"Received request to perform delete-create op on {} entry-days\", entryDayList.getEntryDayCount());\n+        bulkDeleteEntryDays(entryDayList);\n+\n+        List<Integer> bulkOpResult = bulkCreateEntryDays(entryDayList);\n+        if (bulkOpResult.stream().anyMatch(integer -> integer == 0)) {\n+            LOGGER.warn(\"Bulk create had some issues while creating certain entry-days. Check log for further details\");\n+        }\n+        LOGGER.info(\"Bulk creation op of entry-days completed.\");\n+        return bulkOpResult;\n+    }\n+\n+    @ApiOperation(value = \"update entry-day\", hidden = true)\n+    @PostMapping(\"/update/entry-day\")\n+    public Integer updateEntryDay(@RequestBody EntryDayProto.EntryDay entryDay) {\n+        LOGGER.warn(\"Updating entry-day is not supported atm. Delete and re-insert if required.\");\n+        return INT_RESPONSE_WONT_PROCESS;\n+    }\n+\n+    @PatchMapping(\"/manual/update/entry-day\")\n+    public Integer updateEntryDayManually(@RequestParam String email,\n+                                          @RequestParam Integer date) {\n+        Integer emailHash = userMappingController.retrieveHashEmail(email);\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User not found for entry-day updation for email [{}]\", email);\n+            return INT_RESPONSE_WONT_PROCESS;\n+        }\n+        LOGGER.info(\"Obtained manual req for entry-day updation: {} x {}\", email, date);\n+        return updateEntryDay(generateEntryDayOnPk(emailHash, date));\n+    }\n+\n+    @ApiOperation(value = \"retrieve all entry-days\", hidden = true)\n+    @GetMapping(\"/retrieve/all/entry-days\")\n+    public EntryDayProto.EntryDayList retrieveAllEntryDays() {\n+        LOGGER.info(\"Retrieving all entry-days\");\n+        EntryDayProto.EntryDayList entryDayList = diurnalTableEntryDay.retrieveAll();\n+        LOGGER.info(\"Result of retrieving all: {} entry-days\", entryDayList.getEntryDayCount());\n+        return entryDayList;\n+    }\n+\n+    @GetMapping(\"/manual/retrieve/all/entry-days\")\n+    public List<String> retrieveAllEntryDaysManually() {\n+        LOGGER.info(\"Obtained manual req for retrieving all entry-days\");\n+        return performBulkOpStr(retrieveAllEntryDays().getEntryDayList(), AbstractMessage::toString);\n+    }\n+\n+    @ApiOperation(value = \"check if entry-day exists\", hidden = true)\n+    @GetMapping(\"/check/entry-day\")\n+    public Boolean checkIfEntryDayExists(@RequestParam EntryDayProto.EntryDay entryDay) {\n+        LOGGER.info(\"Checking if entry-day exists for: {} x {}\", entryDay.getHashEmail(), entryDay.getDate());\n+        boolean checkIfEntryDayExists = diurnalTableEntryDay.checkEntity(entryDay);\n+        LOGGER.info(\"Result: {}\", checkIfEntryDayExists);\n+        return checkIfEntryDayExists;\n+    }\n+\n+    @GetMapping(\"/manual/check/entry-day\")\n+    public Boolean checkIfEntryDayExistsManually(@RequestParam String email,\n+                                                 @RequestParam Integer date) {\n+        Integer emailHash = userMappingController.retrieveHashEmail(email);\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User not found for entry-day updation for email [{}]\", email);\n+            return false;\n+        }\n+        LOGGER.info(\"Checking if entry-day exists for: {} x {}\", email, date);\n+        return checkIfEntryDayExists(generateEntryDayOnPk(emailHash, date));\n+    }\n+\n+    @PutMapping(\"/table/create\")\n+    public int createTableIfNotExists() {\n+        return genericCreateTableIfNotExists(diurnalTableEntryDay);\n+    }\n+\n+    @DeleteMapping(\"/table/drop\")\n+    public Boolean dropTable(@RequestParam(defaultValue = \"false\") Boolean absolutelyDropTable) {\n+        return absolutelyDropTable ? genericDropTable(diurnalTableEntryDay) : false;\n+    }\n+\n+    @DeleteMapping(\"/table/truncate\")\n+    public Boolean truncateTable(@RequestParam(defaultValue = \"false\") Boolean absolutelyTruncateTable) {\n+        return absolutelyTruncateTable ? genericTruncateTable(diurnalTableEntryDay) : false;\n+    }\n+}"
  },
  {
    "sha": "b7965e911295a9ff8dfc6c0af41ae21b651c9308",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/controller/TitleMappingController.java",
    "status": "modified",
    "additions": 78,
    "deletions": 23,
    "changes": 101,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/TitleMappingController.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/TitleMappingController.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/controller/TitleMappingController.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -2,7 +2,7 @@\n \n import com.google.protobuf.AbstractMessage;\n import com.vv.personal.diurnal.artifactory.generated.TitleMappingProto;\n-import com.vv.personal.diurnal.dbi.interactor.diurnal.DiurnalTableTitleMapping;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables.DiurnalTableTitleMapping;\n import io.swagger.annotations.ApiOperation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -11,14 +11,18 @@\n import org.springframework.web.bind.annotation.*;\n \n import java.util.List;\n-import java.util.stream.Collectors;\n+\n+import static com.vv.personal.diurnal.dbi.constants.Constants.EMPTY_LIST_INT;\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.*;\n \n /**\n  * @author Vivek\n  * @since 24/02/21\n  */\n+@Deprecated\n @RestController(\"title-mapping-controller\")\n @RequestMapping(\"/diurnal/mapping-title\")\n+@ApiOperation(value = \"Now deprecated title mapping controller, as of 20210307\", hidden = true)\n public class TitleMappingController {\n     private static final Logger LOGGER = LoggerFactory.getLogger(TitleMappingController.class);\n \n@@ -35,16 +39,21 @@ public Integer createTitleMapping(@RequestBody TitleMappingProto.TitleMapping ti\n         return sqlResult;\n     }\n \n-    @GetMapping(\"/create/manual/title\")\n+    @ApiOperation(value = \"bulk create title\", hidden = true)\n+    @PostMapping(\"/create/titles\")\n+    public List<Integer> bulkCreateTitleMapping(@RequestBody TitleMappingProto.TitleMappingList titleMappingList) {\n+        LOGGER.info(\"Bulk creating new title mappings for {} titles\", titleMappingList.getTitleMappingCount());\n+        List<Integer> bulkTitlesCreationResult = performBulkOpInt(titleMappingList.getTitleMappingList(), this::createTitleMapping);\n+        LOGGER.info(\"Result of bulk title creation: {}\", bulkTitlesCreationResult);\n+        return bulkTitlesCreationResult;\n+    }\n+\n+    @PutMapping(\"/create/manual/title\")\n     public Integer createTitleMappingManually(@RequestParam Long mobile,\n                                               @RequestParam Integer date,\n                                               @RequestParam String title) {\n         LOGGER.info(\"Obtained manual req for new title creation: {} x {} -> {}\", mobile, date, title);\n-        return createTitleMapping(TitleMappingProto.TitleMapping.newBuilder()\n-                .setMobile(mobile)\n-                .setDate(date)\n-                .setTitle(title)\n-                .build());\n+        return createTitleMapping(generateTitleMapping(mobile, date, title));\n     }\n \n     @ApiOperation(value = \"delete title\", hidden = true)\n@@ -56,14 +65,20 @@ public Integer deleteTitleMapping(@RequestBody TitleMappingProto.TitleMapping ti\n         return sqlResult;\n     }\n \n-    @GetMapping(\"/delete/manual/title\")\n+    @ApiOperation(value = \"bulk delete title\", hidden = true)\n+    @PostMapping(\"/delete/titles\")\n+    public List<Integer> bulkDeleteTitleMapping(@RequestBody TitleMappingProto.TitleMappingList titleMappingList) {\n+        LOGGER.info(\"Bulk deleting {} titles\", titleMappingList.getTitleMappingCount());\n+        List<Integer> bulkTitlesDeletionResult = performBulkOpInt(titleMappingList.getTitleMappingList(), this::deleteTitleMapping);\n+        LOGGER.info(\"Result of bulk title deletion: {}\", bulkTitlesDeletionResult);\n+        return bulkTitlesDeletionResult;\n+    }\n+\n+    @DeleteMapping(\"/delete/manual/title\")\n     public Integer deleteTitleMappingManually(@RequestParam Long mobile,\n                                               @RequestParam Integer date) {\n         LOGGER.info(\"Obtained manual req for title deletion: {} x {}\", mobile, date);\n-        return deleteTitleMapping(TitleMappingProto.TitleMapping.newBuilder()\n-                .setMobile(mobile)\n-                .setDate(date)\n-                .build());\n+        return deleteTitleMapping(generateTitleMappingOnPk(mobile, date));\n     }\n \n     @ApiOperation(value = \"update title\", hidden = true)\n@@ -75,32 +90,72 @@ public Integer updateTitleMapping(@RequestBody TitleMappingProto.TitleMapping ti\n         return sqlResult;\n     }\n \n-    @GetMapping(\"/update/manual/title\")\n+    @PatchMapping(\"/update/manual/title\")\n     public Integer updateTitleMappingManually(@RequestParam Long mobile,\n                                               @RequestParam Integer date,\n                                               @RequestParam String updatedTitle) {\n         LOGGER.info(\"Obtained manual req for title updation: {} x {} -> {}\", mobile, date, updatedTitle);\n-        return updateTitleMapping(TitleMappingProto.TitleMapping.newBuilder()\n-                .setMobile(mobile)\n-                .setDate(date)\n-                .setTitle(updatedTitle)\n-                .build());\n+        return updateTitleMapping(generateTitleMapping(mobile, date, updatedTitle));\n+    }\n+\n+    @ApiOperation(value = \"delete then create titles\", hidden = true)\n+    @PostMapping(\"/delete-create/titles\")\n+    public List<Integer> deleteAndCreateTitles(@RequestBody TitleMappingProto.TitleMappingList titleMappingList) {\n+        if (titleMappingList.getTitleMappingList().isEmpty()) return EMPTY_LIST_INT;\n+        LOGGER.info(\"Received request to perform delete-create op on {} titles\", titleMappingList.getTitleMappingCount());\n+        bulkDeleteTitleMapping(titleMappingList);\n+\n+        List<Integer> bulkOpResult = bulkCreateTitleMapping(titleMappingList);\n+        if (bulkOpResult.stream().anyMatch(integer -> integer == 0)) {\n+            LOGGER.warn(\"Bulk create had some issues while creating certain titles. Check log for further details\");\n+        }\n+        LOGGER.info(\"Bulk creation op of titles completed.\");\n+        return bulkOpResult;\n     }\n \n     @ApiOperation(value = \"retrieve all titles\", hidden = true)\n     @GetMapping(\"/retrieve/all/titles\")\n     public TitleMappingProto.TitleMappingList retrieveAllTitleMappings() {\n         LOGGER.info(\"Retrieving all title mappings\");\n         TitleMappingProto.TitleMappingList titleMappingList = diurnalTableTitleMapping.retrieveAll();\n-        LOGGER.info(\"Result of retrieving all title mappings: {} entries\", titleMappingList.getTitleMappingsCount());\n+        LOGGER.info(\"Result of retrieving all title mappings: {} entries\", titleMappingList.getTitleMappingCount());\n         return titleMappingList;\n     }\n \n     @GetMapping(\"/retrieve/all/manual/titles\")\n     public List<String> retrieveAllTitleMappingsManually() {\n         LOGGER.info(\"Obtained manual req for retrieving all title mappings\");\n-        return retrieveAllTitleMappings().getTitleMappingsList().stream()\n-                .map(AbstractMessage::toString)\n-                .collect(Collectors.toList());\n+        return performBulkOpStr(retrieveAllTitleMappings().getTitleMappingList(), AbstractMessage::toString);\n+    }\n+\n+    @ApiOperation(value = \"check if title exists\", hidden = true)\n+    @GetMapping(\"/check/title\")\n+    public Boolean checkIfTitleExists(@RequestParam TitleMappingProto.TitleMapping titleMapping) {\n+        LOGGER.info(\"Checking if title exists for: {} x {}\", titleMapping.getMobile(), titleMapping.getDate());\n+        boolean checkIfTitleExists = diurnalTableTitleMapping.checkEntity(titleMapping);\n+        LOGGER.info(\"Result: {}\", checkIfTitleExists);\n+        return checkIfTitleExists;\n+    }\n+\n+    @GetMapping(\"/check/manual/title\")\n+    public Boolean checkIfTitleExistsManually(@RequestParam Long mobile,\n+                                              @RequestParam Integer date) {\n+        LOGGER.info(\"Checking if title exists for: {} x {}\", mobile, date);\n+        return checkIfTitleExists(generateTitleMappingOnPk(mobile, date));\n+    }\n+\n+    @PutMapping(\"/table/create\")\n+    public int createTableIfNotExists() {\n+        return genericCreateTableIfNotExists(diurnalTableTitleMapping);\n+    }\n+\n+    @DeleteMapping(\"/table/drop\")\n+    public Boolean dropTable(@RequestParam(defaultValue = \"false\") Boolean absolutelyDropTable) {\n+        return absolutelyDropTable ? genericDropTable(diurnalTableTitleMapping) : false;\n+    }\n+\n+    @DeleteMapping(\"/table/truncate\")\n+    public Boolean truncateTable(@RequestParam(defaultValue = \"false\") Boolean absolutelyTruncateTable) {\n+        return absolutelyTruncateTable ? genericTruncateTable(diurnalTableTitleMapping) : false;\n     }\n }"
  },
  {
    "sha": "ca380f2a70b3087eab9d98eba438a3dd14b525da",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/controller/UserMappingController.java",
    "status": "modified",
    "additions": 156,
    "deletions": 36,
    "changes": 192,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/UserMappingController.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/controller/UserMappingController.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/controller/UserMappingController.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -2,7 +2,9 @@\n \n import com.google.protobuf.AbstractMessage;\n import com.vv.personal.diurnal.artifactory.generated.UserMappingProto;\n-import com.vv.personal.diurnal.dbi.interactor.diurnal.DiurnalTableUserMapping;\n+import com.vv.personal.diurnal.dbi.auth.Authorizer;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables.DiurnalTableUserMapping;\n+import com.vv.personal.diurnal.dbi.util.DiurnalUtil;\n import io.swagger.annotations.ApiOperation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -11,7 +13,9 @@\n import org.springframework.web.bind.annotation.*;\n \n import java.util.List;\n-import java.util.stream.Collectors;\n+\n+import static com.vv.personal.diurnal.dbi.constants.Constants.*;\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.*;\n \n /**\n  * @author Vivek\n@@ -26,75 +30,191 @@\n     @Qualifier(\"DiurnalTableUserMapping\")\n     private DiurnalTableUserMapping diurnalTableUserMapping;\n \n+    @Autowired\n+    private Authorizer authorizer;\n+\n     @ApiOperation(value = \"create user\", hidden = true)\n     @PostMapping(\"/create/user\")\n     public Integer createUserMapping(@RequestBody UserMappingProto.UserMapping userMapping) {\n-        LOGGER.info(\"Creating new user mapping: {} x {}\", userMapping.getMobile(), userMapping.getUsername());\n+        LOGGER.info(\"Creating new user mapping: {} x {} x {} x {}\", userMapping.getMobile(), userMapping.getEmail(), userMapping.getUsername(), userMapping.getPowerUser());\n         Integer sqlResult = diurnalTableUserMapping.pushNewEntity(userMapping);\n         LOGGER.info(\"Result of new user creation: {}\", sqlResult);\n         return sqlResult;\n     }\n \n-    @GetMapping(\"/create/manual/user\")\n-    public Integer createUserMappingManually(@RequestParam Long mobile,\n-                                             @RequestParam String user) {\n-        LOGGER.info(\"Obtained manual req for new user creation: {} x {}\", mobile, user);\n-        return createUserMapping(UserMappingProto.UserMapping.newBuilder()\n-                .setMobile(mobile)\n-                .setUsername(user)\n-                .build());\n+    @PutMapping(\"/manual/create/user\")\n+    public Integer createUserMappingManually(@RequestParam(defaultValue = \"-1\", required = false) Long mobile,\n+                                             @RequestParam String email,\n+                                             @RequestParam String user,\n+                                             @RequestParam(defaultValue = \"false\", required = false) Boolean powerUser,\n+                                             @RequestParam String hashCred) {\n+        email = refineEmail(email);\n+        LOGGER.info(\"Obtained manual req for new user creation: {} x {} x {} x {} x {}\", mobile, email, user, powerUser, hashCred);\n+        return createUserMapping(generateCompleteUserMapping(mobile, email, user, powerUser, hashCred,\n+                generateHash(email)));\n+    }\n+\n+    @GetMapping(\"/manual/generate/hash/cred\")\n+    public String generateHashCredManually(@RequestParam String cred) {\n+        return authorizer.encode(cred);\n     }\n \n     @ApiOperation(value = \"delete user\", hidden = true)\n     @PostMapping(\"/delete/user\")\n     public Integer deleteUserMapping(@RequestBody UserMappingProto.UserMapping userMapping) {\n-        LOGGER.info(\"Deleting user mapping: {} x {}\", userMapping.getMobile(), userMapping.getUsername());\n-        Integer sqlResult = diurnalTableUserMapping.deleteEntity(userMapping);\n+        Integer emailHash = retrieveHashEmail(userMapping.getEmail());\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User not found for deletion for email [{}]\", userMapping.getEmail());\n+            return INT_RESPONSE_WONT_PROCESS;\n+        }\n+        LOGGER.info(\"Deleting user mapping: {} x {}\", userMapping.getEmail(), userMapping.getUsername());\n+        Integer sqlResult = diurnalTableUserMapping.deleteEntity(generateUserMappingOnPk(emailHash)); //uses hash email\n         LOGGER.info(\"Result of user deletion: {}\", sqlResult);\n         return sqlResult;\n     }\n \n-    @GetMapping(\"/delete/manual/user\")\n-    public Integer deleteUserMappingManually(@RequestParam Long mobile) {\n-        LOGGER.info(\"Obtained manual req for user deletion: {}\", mobile);\n-        return deleteUserMapping(UserMappingProto.UserMapping.newBuilder()\n-                .setMobile(mobile)\n-                .build());\n+    @DeleteMapping(\"/manual/delete/user\")\n+    public Integer deleteUserMappingManually(@RequestParam String email) {\n+        email = refineEmail(email);\n+        LOGGER.info(\"Obtained manual req for user deletion: {}\", email);\n+        return deleteUserMapping(DiurnalUtil.generateUserMapping(email));\n     }\n \n-    @ApiOperation(value = \"update user\", hidden = true)\n-    @PostMapping(\"/update/user\")\n-    public Integer updateUserMapping(@RequestBody UserMappingProto.UserMapping userMapping) {\n-        LOGGER.info(\"Updating user mapping: {} -> {}\", userMapping.getMobile(), userMapping.getUsername());\n-        Integer sqlResult = diurnalTableUserMapping.updateEntity(userMapping);\n+    @ApiOperation(value = \"update user-name\", hidden = true)\n+    @PostMapping(\"/update/user/name\")\n+    public Integer updateUserMappingName(@RequestBody UserMappingProto.UserMapping userMapping) {\n+        Integer emailHash = retrieveHashEmail(userMapping.getEmail());\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User not found for updation for email [{}]\", userMapping.getEmail());\n+            return INT_RESPONSE_WONT_PROCESS;\n+        }\n+        LOGGER.info(\"Updating user mapping: {} -> name: {}\", userMapping.getEmail(), userMapping.getUsername());\n+        Integer sqlResult = diurnalTableUserMapping.updateEntity(generateCompleteUserMapping(userMapping, emailHash));\n         LOGGER.info(\"Result of user updation: {}\", sqlResult);\n         return sqlResult;\n     }\n \n-    @GetMapping(\"/update/manual/user\")\n-    public Integer updateUserMappingManually(@RequestParam Long mobile,\n+    @PatchMapping(\"/manual/update/user/name\")\n+    public Integer updateUserMappingManually(@RequestParam String email,\n                                              @RequestParam String updatedUserName) {\n-        LOGGER.info(\"Obtained manual req for user updation: {} -> {}\", mobile, updatedUserName);\n-        return updateUserMapping(UserMappingProto.UserMapping.newBuilder()\n-                .setMobile(mobile)\n-                .setUsername(updatedUserName)\n-                .build());\n+        email = refineEmail(email);\n+        LOGGER.info(\"Obtained manual req for user updation: {} -> name: {}\", email, updatedUserName);\n+        return updateUserMappingName(generateUserMapping(email, updatedUserName));\n+    }\n+\n+    @ApiOperation(value = \"update user-cred\", hidden = true)\n+    @PostMapping(\"/update/user/hash/cred\")\n+    public Integer updateUserMappingCred(@RequestBody UserMappingProto.UserMapping userMapping) {\n+        Integer emailHash = retrieveHashEmail(userMapping.getEmail());\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User not found for updation of hash cred for email [{}]\", userMapping.getEmail());\n+            return INT_RESPONSE_WONT_PROCESS;\n+        }\n+        LOGGER.info(\"Updating user mapping: {} -> cred: {}\", userMapping.getEmail(), userMapping.getHashCred());\n+        Integer sqlResult = diurnalTableUserMapping.updateHashCred(generateCompleteUserMapping(userMapping, emailHash));\n+        LOGGER.info(\"Result of user updation: {}\", sqlResult);\n+        return sqlResult;\n+    }\n+\n+    @PatchMapping(\"/manual/update/user/hash/cred\")\n+    public Integer updateUserMappingCredManually(@RequestParam String email,\n+                                                 @RequestParam String hashCred) {\n+        email = refineEmail(email);\n+        LOGGER.info(\"Obtained manual req for user updation: {} -> cred: {}\", email, hashCred);\n+        return updateUserMappingCred(generateUserMapping(NA_LONG, email, EMPTY_STR, false, hashCred));\n+    }\n+\n+    @PatchMapping(\"/manual/update/user-power\")\n+    public Integer updatePowerUserMappingManually(@RequestParam String email,\n+                                                  @RequestParam Boolean powerUserStatus) {\n+        email = refineEmail(email);\n+        Integer emailHash = retrieveHashEmail(email);\n+        if (isEmailHashAbsent(emailHash)) {\n+            LOGGER.warn(\"User not found for updation of hash cred for email [{}]\", email);\n+            return INT_RESPONSE_WONT_PROCESS;\n+        }\n+        LOGGER.info(\"Obtained manual req for user updation: {} -> {}\", email, powerUserStatus);\n+        UserMappingProto.UserMapping userMapping = generateCompleteUserMapping(NA_LONG, email, EMPTY_STR, powerUserStatus, EMPTY_STR, emailHash);\n+        Integer sqlResult = diurnalTableUserMapping.updatePowerUserStatus(userMapping);\n+        LOGGER.info(\"Result of power-user updation: {}\", sqlResult);\n+        return sqlResult;\n     }\n \n     @ApiOperation(value = \"retrieve all users\", hidden = true)\n     @GetMapping(\"/retrieve/all/users\")\n     public UserMappingProto.UserMappingList retrieveAllUserMappings() {\n         LOGGER.info(\"Retrieving all user mappings\");\n         UserMappingProto.UserMappingList userMappingList = diurnalTableUserMapping.retrieveAll();\n-        LOGGER.info(\"Result of retrieving all user mappings: {} entries\", userMappingList.getUserMappingsCount());\n+        LOGGER.info(\"Result of retrieving all user mappings: {} entries\", userMappingList.getUserMappingCount());\n         return userMappingList;\n     }\n \n-    @GetMapping(\"/retrieve/all/manual/users\")\n+    @GetMapping(\"/manual/retrieve/all/users\")\n     public List<String> retrieveAllUserMappingsManually() {\n         LOGGER.info(\"Obtained manual req for retrieving all user mappings\");\n-        return retrieveAllUserMappings().getUserMappingsList().stream()\n-                .map(AbstractMessage::toString)\n-                .collect(Collectors.toList());\n+        return performBulkOpStr(retrieveAllUserMappings().getUserMappingList(), AbstractMessage::toString);\n+    }\n+\n+    @ApiOperation(value = \"retrieve hashed cred from db\")\n+    @GetMapping(\"/retrieve/hash/cred\")\n+    public String retrieveHashCred(@RequestParam Integer emailHash) {\n+        LOGGER.info(\"Retrieve cred-hash for: {}\", emailHash);\n+        UserMappingProto.UserMapping userMapping = generateUserMappingOnPk(emailHash);\n+        String retrievedCred = diurnalTableUserMapping.retrieveHashCred(userMapping);\n+        LOGGER.info(\"Result: [{}]\", retrievedCred);\n+        return retrievedCred;\n+    }\n+\n+    @ApiOperation(value = \"retrieve hashed email from db\", notes = \"This will be internal to dbi-service only.\")\n+    @GetMapping(\"/retrieve/hash/email\")\n+    public Integer retrieveHashEmail(@RequestParam String email) {\n+        email = refineEmail(email);\n+        LOGGER.info(\"Retrieve email hash for: {}\", email);\n+        Integer retrievedHashEmail = diurnalTableUserMapping.retrieveHashEmail(generateUserMapping(email));\n+        LOGGER.info(\"Result: [{}]\", retrievedHashEmail);\n+        return retrievedHashEmail;\n+    }\n+\n+    @ApiOperation(value = \"retrieve power user status from db\")\n+    @GetMapping(\"/retrieve/status/user-power\")\n+    public Boolean retrievePowerUserStatus(@RequestParam Integer emailHash) {\n+        LOGGER.info(\"Retrieve power user status for: {}\", emailHash);\n+        UserMappingProto.UserMapping userMapping = generateUserMappingOnPk(emailHash);\n+        Boolean powerUserStatus = diurnalTableUserMapping.retrievePowerUserStatus(userMapping);\n+        LOGGER.info(\"Result: [{}]\", powerUserStatus);\n+        return powerUserStatus;\n+    }\n+\n+    @ApiOperation(value = \"check if user exists\", hidden = true)\n+    @GetMapping(\"/check/user\")\n+    public Boolean checkIfUserExists(@RequestParam UserMappingProto.UserMapping userMapping) {\n+        LOGGER.info(\"Checking if user exists for email: [{}]\", userMapping.getEmail());\n+        String email = refineEmail(userMapping.getEmail());\n+        Integer emailHash = retrieveHashEmail(email);\n+        boolean checkIfUserExists = !isEmailHashAbsent(emailHash);\n+        LOGGER.info(\"Result: {}\", checkIfUserExists);\n+        return checkIfUserExists;\n+    }\n+\n+    @GetMapping(\"/manual/check/user\")\n+    public Boolean checkIfUserExistsManually(@RequestParam String email) {\n+        email = refineEmail(email);\n+        LOGGER.info(\"Checking if user exists for email: {}\", email);\n+        return checkIfUserExists(DiurnalUtil.generateUserMapping(email));\n+    }\n+\n+    @PutMapping(\"/table/create\")\n+    public int createTableIfNotExists() {\n+        return genericCreateTableIfNotExists(diurnalTableUserMapping);\n+    }\n+\n+    @DeleteMapping(\"/table/drop\")\n+    public Boolean dropTable(@RequestParam(defaultValue = \"false\") Boolean absolutelyDropTable) {\n+        return absolutelyDropTable ? genericDropTable(diurnalTableUserMapping) : false;\n+    }\n+\n+    @DeleteMapping(\"/table/truncate\")\n+    public Boolean truncateTable(@RequestParam(defaultValue = \"false\") Boolean absolutelyTruncateTable) {\n+        return absolutelyTruncateTable ? genericTruncateTable(diurnalTableUserMapping) : false;\n     }\n }"
  },
  {
    "sha": "9d8eefbda3dbc6bca005a4a6721326ae87c5dc37",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/TransformFullBackupToProtos.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/TransformFullBackupToProtos.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/TransformFullBackupToProtos.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/TransformFullBackupToProtos.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,133 @@\n+package com.vv.personal.diurnal.dbi.engine.transformer;\n+\n+import com.vv.personal.diurnal.artifactory.generated.EntryDayProto;\n+import com.vv.personal.diurnal.artifactory.generated.EntryProto;\n+import com.vv.personal.diurnal.dbi.engine.transformer.parser.ParseEntry;\n+import com.vv.personal.diurnal.dbi.engine.transformer.parser.ParseTitle;\n+import com.vv.personal.diurnal.dbi.util.DiurnalUtil;\n+import com.vv.personal.diurnal.dbi.util.JsonConverterUtil;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.time.StopWatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.generateLiteEntry;\n+import static com.vv.personal.diurnal.dbi.util.DiurnalUtil.procureStopWatch;\n+\n+/**\n+ * @author Vivek\n+ * @since 03/03/21\n+ */\n+public class TransformFullBackupToProtos {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TransformFullBackupToProtos.class);\n+\n+    private final List<String> fullBackupText;\n+    private final Integer emailHash;\n+    private final EntryDayProto.EntryDayList.Builder entryDayListBuilder = EntryDayProto.EntryDayList.newBuilder();\n+\n+    public TransformFullBackupToProtos(List<String> fullBackupText, Integer emailHash) {\n+        this.fullBackupText = fullBackupText;\n+        this.emailHash = emailHash;\n+    }\n+\n+    public boolean transformWithoutSuppliedDate() {\n+        StopWatch stopWatch = procureStopWatch();\n+        stopWatch.start();\n+        try {\n+            String currentTitle;\n+            Integer currentDate;\n+            Queue<EntryProto.Entry> entries = new LinkedList<>();\n+            int i = 0, serial = 0;\n+            for (i = 0; fullBackupText.get(i).trim().isEmpty(); i++) ; //cycling fwd on empty lines if any\n+            if (i >= fullBackupText.size()) {\n+                LOGGER.warn(\"Strange backup file acquired - no good lines present.\");\n+                return false;\n+            }\n+            LINE_TYPE line_type = deriveLineType(fullBackupText.get(i));\n+            if (line_type == LINE_TYPE.ENTRY) {\n+                LOGGER.warn(\"Not a good backup file. First good line cannot be an entry!\");\n+                return false;\n+            }\n+            ParseTitle title = new ParseTitle(fullBackupText.get(i)); //first sentient line to be a title\n+            title.parse();\n+            currentTitle = title.getRefinedTitle();\n+            currentDate = title.getDate();\n+            i++;\n+\n+            int exemptTitles = 0;\n+            if (title.isTitleToExempt()) exemptTitles++;\n+            for (; i < fullBackupText.size(); i++) {\n+                String data = fullBackupText.get(i);\n+                if (data.isEmpty()) continue;\n+\n+                line_type = deriveLineType(data);\n+                if (line_type == LINE_TYPE.ENTRY) {\n+                    ParseEntry entry = new ParseEntry(data);\n+                    entry.parse();\n+                    entries.offer(generateLiteEntry(serial, entry.getSign(), entry.getCurrency(), entry.getAmount(), entry.getDescription()));\n+                    serial++;\n+\n+                } else if (line_type == LINE_TYPE.TITLE) {\n+                    serial = 0;\n+                    entryDayListBuilder.addEntryDay(computeEntryDay(entries, currentTitle, currentDate));\n+                    entries.clear();\n+\n+                    title = new ParseTitle(data);\n+                    title.parse();\n+                    currentTitle = title.getRefinedTitle();\n+                    currentDate = title.getDate();\n+                    if (title.isTitleToExempt()) exemptTitles++;\n+                }\n+            }\n+            if (!entries.isEmpty()) { //last one\n+                EntryDayProto.EntryDay entryDay = computeEntryDay(entries, currentTitle, currentDate);\n+                entryDayListBuilder.addEntryDay(entryDay);\n+            }\n+            LOGGER.info(\"Completed transformation of backup data to DB compatible data. Generated {} titles and {} entry-days\",\n+                    entryDayListBuilder.getEntryDayCount() - exemptTitles, entryDayListBuilder.getEntryDayCount());\n+            return true;\n+        } catch (Exception e) {\n+            LOGGER.error(\"Failed to completely transform data from backup file. Will not be saving to database. \", e);\n+        } finally {\n+            stopWatch.stop();\n+            LOGGER.info(\"Took {} ms in backup transformation op\", stopWatch.getTime(TimeUnit.MILLISECONDS));\n+        }\n+        return false;\n+    }\n+\n+    private EntryDayProto.EntryDay computeEntryDay(Queue<EntryProto.Entry> entries, String title, Integer date) {\n+        EntryDayProto.EntryDay.Builder entryDayBuilder = EntryDayProto.EntryDay.newBuilder();\n+        entryDayBuilder.setHashEmail(emailHash);\n+        entryDayBuilder.setDate(date);\n+        entryDayBuilder.setTitle(title);\n+        entryDayBuilder.setEntriesAsString(\n+                StringUtils.join(entries.stream()\n+                                .map(JsonConverterUtil::convertEntryToCompactedJson)\n+                                .map(DiurnalUtil::processStringForSqlPush)\n+                                .collect(Collectors.toList()),\n+                        \"<%~@^>\"));\n+        entries.clear();\n+        return entryDayBuilder.build();\n+    }\n+\n+    private LINE_TYPE deriveLineType(String line) {\n+        if (line.contains(\"::\")) return LINE_TYPE.TITLE;\n+        if (line.contains(\":\") || line.startsWith(\"//\")) return LINE_TYPE.ENTRY;\n+        return null;\n+    }\n+\n+    public EntryDayProto.EntryDayList getEntryDayList() {\n+        return entryDayListBuilder.build();\n+    }\n+\n+    private enum LINE_TYPE {\n+        TITLE, ENTRY\n+    }\n+\n+}"
  },
  {
    "sha": "44a95dc5a5e4bdd496aeaaa24815c205df780a59",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/AbstractLineParser.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/AbstractLineParser.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/AbstractLineParser.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/AbstractLineParser.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,37 @@\n+package com.vv.personal.diurnal.dbi.engine.transformer.parser;\n+\n+import com.vv.personal.diurnal.artifactory.generated.EntryProto;\n+\n+/**\n+ * @author Vivek\n+ * @since 04/03/21\n+ */\n+public abstract class AbstractLineParser implements LineParser {\n+    protected final String line;\n+\n+    public AbstractLineParser(String line) {\n+        this.line = line;\n+    }\n+\n+    protected EntryProto.Sign parseSign(String data) {\n+        switch (data.trim()) {\n+            case \"+\":\n+                return EntryProto.Sign.POSITIVE;\n+            case \"-\":\n+            default:\n+                return EntryProto.Sign.NEGATIVE;\n+        }\n+    }\n+\n+    protected EntryProto.Currency parseCurrency(String data) {\n+        switch (data.trim()) {\n+            case \"$\":\n+                return EntryProto.Currency.USD;\n+            case \"$C\":\n+                return EntryProto.Currency.CND;\n+            case \"₹\":\n+            default:\n+                return EntryProto.Currency.INR;\n+        }\n+    }\n+}"
  },
  {
    "sha": "aa7dafcb0c08faf5a1a85c0f3538adf7eaf9d7ee",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/LineParser.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/LineParser.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/LineParser.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/LineParser.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,10 @@\n+package com.vv.personal.diurnal.dbi.engine.transformer.parser;\n+\n+/**\n+ * @author Vivek\n+ * @since 04/03/21\n+ */\n+public interface LineParser {\n+\n+    void parse();\n+}"
  },
  {
    "sha": "44e79bf8f765964d9ac94696dcf99b0bcaf527c6",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/ParseEntry.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/ParseEntry.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/ParseEntry.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/ParseEntry.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,54 @@\n+package com.vv.personal.diurnal.dbi.engine.transformer.parser;\n+\n+import com.vv.personal.diurnal.artifactory.generated.EntryProto;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import static com.vv.personal.diurnal.dbi.constants.Constants.DEFAULT_AMOUNT;\n+\n+/**\n+ * @author Vivek\n+ * @since 04/03/21\n+ */\n+public class ParseEntry extends AbstractLineParser {\n+    private EntryProto.Sign sign;\n+    private EntryProto.Currency currency;\n+    private Double amount;\n+    private String description;\n+\n+    public ParseEntry(String line) {\n+        super(line);\n+    }\n+\n+    @Override\n+    public void parse() {\n+        if (line.startsWith(\"//\")) {\n+            this.sign = EntryProto.Sign.COMMENT;\n+            this.amount = DEFAULT_AMOUNT;\n+            this.description = line.substring(2);\n+            this.currency = EntryProto.Currency.INR;\n+        } else {\n+            String[] parts = StringUtils.split(line.trim(), \":\");\n+            this.description = parts[1].trim();\n+            parts = StringUtils.split(parts[0].trim(), \" \");\n+            this.sign = parseSign(parts[0]);\n+            this.currency = parseCurrency(parts[1]);\n+            this.amount = Double.parseDouble(parts[2].trim());\n+        }\n+    }\n+\n+    public EntryProto.Sign getSign() {\n+        return sign;\n+    }\n+\n+    public EntryProto.Currency getCurrency() {\n+        return currency;\n+    }\n+\n+    public Double getAmount() {\n+        return amount;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+}"
  },
  {
    "sha": "8c3d4f2140303f4a7b2525f3b5048b12b8a5c8d8",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/ParseTitle.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/ParseTitle.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/ParseTitle.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/engine/transformer/parser/ParseTitle.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,58 @@\n+package com.vv.personal.diurnal.dbi.engine.transformer.parser;\n+\n+import com.vv.personal.diurnal.artifactory.generated.EntryProto;\n+import com.vv.personal.diurnal.dbi.util.DiurnalUtil;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import static com.vv.personal.diurnal.dbi.constants.Constants.DEFAULT_TITLE;\n+import static com.vv.personal.diurnal.dbi.constants.Constants.TITLES_TO_EXEMPT;\n+\n+/**\n+ * @author Vivek\n+ * @since 04/03/21\n+ */\n+public class ParseTitle extends AbstractLineParser {\n+    private int date;\n+    private String title;\n+    private EntryProto.Sign sign;\n+    private EntryProto.Currency currency;\n+    private Double dayTotal;\n+\n+    public ParseTitle(String line) {\n+        super(line);\n+    }\n+\n+    @Override\n+    public void parse() {\n+        String[] split = StringUtils.split(line, \"::\");\n+        this.date = Integer.parseInt(convertToMachineDateFormat(\n+                split[0].substring(0, split[0].indexOf(' ')).trim()));\n+        this.title = split[0].substring(split[0].indexOf(' ')).trim();\n+        split = StringUtils.split(split[1].trim(), \" \");\n+        this.sign = parseSign(split[0]);\n+        this.currency = parseCurrency(split[1]);\n+        this.dayTotal = Double.parseDouble(split[2]);\n+    }\n+\n+    private String convertToMachineDateFormat(String date) {\n+        String[] parts = StringUtils.split(date, \"-\");\n+        return String.format(\"%s%s%s\", parts[2], parts[1], parts[0]);\n+    }\n+\n+    public int getDate() {\n+        return date;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public String getRefinedTitle() {\n+        return isTitleToExempt() ? DEFAULT_TITLE :\n+                DiurnalUtil.processStringForSqlPush(title);\n+    }\n+\n+    public boolean isTitleToExempt() {\n+        return TITLES_TO_EXEMPT.contains(title);\n+    }\n+}"
  },
  {
    "sha": "e6fb617d89e79296785f3c51981bcb540fe5f724",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/IDbi.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/IDbi.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/IDbi.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/interactor/IDbi.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -14,4 +14,10 @@\n \n     int executeUpdateSql(String sql);\n \n+    int dropTable();\n+\n+    int truncateTable();\n+\n+    String getTableName();\n+\n }"
  },
  {
    "sha": "4de115eac0178e08b0a86a64059dae36a4658804",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/DiurnalTableUserMapping.java",
    "status": "removed",
    "additions": 0,
    "deletions": 119,
    "changes": 119,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/ad729fd10d65b4f15b33b43203d8fdf38bbb170d/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/DiurnalTableUserMapping.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/ad729fd10d65b4f15b33b43203d8fdf38bbb170d/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/DiurnalTableUserMapping.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/DiurnalTableUserMapping.java?ref=ad729fd10d65b4f15b33b43203d8fdf38bbb170d",
    "patch": "@@ -1,119 +0,0 @@\n-package com.vv.personal.diurnal.dbi.interactor.diurnal;\n-\n-import com.vv.personal.diurnal.artifactory.generated.UserMappingProto;\n-import com.vv.personal.diurnal.dbi.config.DbiConfigForDiurnal;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.function.Function;\n-\n-import static com.vv.personal.diurnal.dbi.constants.Constants.SELECT_ALL;\n-\n-/**\n- * @author Vivek\n- * @since 23/02/21\n- */\n-public class DiurnalTableUserMapping extends DiurnalDbi<UserMappingProto.UserMapping, UserMappingProto.UserMappingList> {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DiurnalTableUserMapping.class);\n-\n-    private final String INSERT_STMT_NEW_USER = \"INSERT INTO %s(\\\"mobile\\\", \\\"user\\\") \" +\n-            \"VALUES(%d, '%s')\";\n-    private final String DELETE_STMT_USER = \"DELETE FROM %s \" +\n-            \"WHERE \\\"%s\\\"=%d\";\n-    private final String UPDATE_STMT_USER = \"UPDATE %s \" +\n-            \"SET \\\"%s\\\"='%s' \" +\n-            \"WHERE \\\"%s\\\"=%d\";\n-    private final String COL_USER = \"user\";\n-    private final String COL_MOBILE = \"mobile\";\n-\n-    public DiurnalTableUserMapping(String table, String primaryColumns, DbiConfigForDiurnal dbiConfigForDiurnal, CachedDiurnal cachedDiurnal, Function<String, String> createTableIfNotExistSqlFunction, String createTableIfNotExistSqlLocation) {\n-        super(table, primaryColumns, dbiConfigForDiurnal, cachedDiurnal, createTableIfNotExistSqlFunction, createTableIfNotExistSqlLocation, LOGGER);\n-    }\n-\n-    @Override\n-    public int pushNewEntity(UserMappingProto.UserMapping userMapping) {\n-        LOGGER.info(\"Pushing new User entity: {} x {}\", userMapping.getMobile(), userMapping.getUsername());\n-        return insertNewUser(userMapping.getMobile(), userMapping.getUsername());\n-    }\n-\n-    private int insertNewUser(Long mobile, String username) {\n-        String sql = String.format(INSERT_STMT_NEW_USER, TABLE, mobile, username);\n-        int sqlExecResult = executeUpdateSql(sql);\n-        return sqlExecResult;\n-        //return addToCacheOnSqlResult(sqlExecResult, mobile);\n-    }\n-\n-    @Override\n-    public int deleteEntity(UserMappingProto.UserMapping userMapping) {\n-        String sql = String.format(DELETE_STMT_USER, TABLE, COL_MOBILE, userMapping.getMobile());\n-        int sqlExecResult = executeUpdateSql(sql);\n-        return sqlExecResult;\n-        //return removeFromCacheOnSqlResult(sqlExecResult, userMapping.getMobile());\n-    }\n-\n-    @Override\n-    public int updateEntity(UserMappingProto.UserMapping userMapping) {\n-        String sql = String.format(UPDATE_STMT_USER, TABLE, COL_USER, userMapping.getUsername(), COL_MOBILE, userMapping.getMobile());\n-        int sqlExecResult = executeUpdateSql(sql);\n-        return sqlExecResult;\n-    }\n-\n-    @Override\n-    public UserMappingProto.UserMappingList retrieveAll() {\n-        String sql = String.format(SELECT_ALL, TABLE);\n-        ResultSet resultSet = executeNonUpdateSql(sql);\n-        int rowsReturned = 0;\n-        UserMappingProto.UserMappingList.Builder userMappingsBuilder = UserMappingProto.UserMappingList.newBuilder();\n-        try {\n-            while (true) {\n-                try {\n-                    if (!resultSet.next()) break;\n-                    UserMappingProto.UserMapping userMapping = generateDetail(resultSet);\n-                    userMappingsBuilder.addUserMappings(userMapping);\n-                    rowsReturned++;\n-                } catch (SQLException throwables) {\n-                    LOGGER.error(\"Failed to completely extract result from the above select all query. \", throwables);\n-                }\n-            }\n-        } catch (Exception e) {\n-            LOGGER.error(\"Failed to execute / process sql '{}'. \", sql, e);\n-        }\n-        LOGGER.info(\"Received {} entries for sql => '{}'\", rowsReturned, sql);\n-        return userMappingsBuilder.build();\n-    }\n-\n-    @Override\n-    public UserMappingProto.UserMappingList retrieveSelective() {\n-        return null;\n-    }\n-\n-    @Override\n-    public UserMappingProto.UserMapping generateDetail(ResultSet resultSet) {\n-        UserMappingProto.UserMapping.Builder builder = UserMappingProto.UserMapping.newBuilder();\n-        try {\n-            builder.setMobile(resultSet.getLong(COL_MOBILE));\n-            builder.setUsername(resultSet.getString(COL_USER));\n-        } catch (SQLException throwables) {\n-            LOGGER.error(\"Failed to retrieve user-mapping detail from DB. \", throwables);\n-        }\n-        return builder.build();\n-    }\n-\n-    /*@Override\n-    public int addToCacheOnSqlResult(Integer sqlResult, String table, Integer id) {\n-        return 0;\n-    }*/\n-\n-    /*@Override\n-    public int pushNewEntity(Problem problem) {\n-        LOGGER.info(\"Pushing new problem '{}' into the DB\", problem);\n-        if (cachedDiurnal.isIdPresentInEntityCache(TABLE, problem.getProblemId())) {\n-            LOGGER.info(\"Problem '{}' already present\", problem.getProblemName());\n-            return 0;\n-        }\n-        return insertNewIntegerAndString(TABLE, problem.getProblemId(), problem.getProblemName());\n-    }*/\n-\n-}"
  },
  {
    "sha": "5ff2c4716181691de7da45a9b99aec24e3511143",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/cache/CachedDiurnal.java",
    "status": "renamed",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/cache/CachedDiurnal.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/cache/CachedDiurnal.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/cache/CachedDiurnal.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,5 +1,6 @@\n-package com.vv.personal.diurnal.dbi.interactor.diurnal;\n+package com.vv.personal.diurnal.dbi.interactor.diurnal.cache;\n \n+import com.vv.personal.diurnal.dbi.constants.DbConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -8,8 +9,6 @@\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import static com.vv.personal.diurnal.dbi.constants.Constants.*;\n-\n /**\n  * @author Vivek\n  * @since 02/01/21\n@@ -19,11 +18,11 @@\n     public final ConcurrentHashMap<String, Set<Integer>> activeRefEntityIds = new ConcurrentHashMap<>();\n \n     public CachedDiurnal() {\n-        activeRefEntityIds.put(TABLE_DIURNAL_USER_MAPPING, generateEmptySet());\n-        activeRefEntityIds.put(TABLE_DIURNAL_TITLE_MAPPING, generateEmptySet());\n+        activeRefEntityIds.put(DbConstants.TABLE_DIURNAL_USER_MAPPING, generateEmptySet());\n+        activeRefEntityIds.put(DbConstants.TABLE_DIURNAL_TITLE_MAPPING, generateEmptySet());\n         /*activeRefEntityIds.put(TABLE_REF_PROBLEM, generateEmptySet());\n         activeRefEntityIds.put(TABLE_REF_MAKE, generateEmptySet());*/\n-        activeRefEntityIds.put(TABLE_DIURNAL_ENTRY, generateEmptySet());\n+        activeRefEntityIds.put(DbConstants.TABLE_DIURNAL_ENTRY, generateEmptySet());\n     }\n \n     public synchronized Boolean addNewIdToEntityCache(String entity, Integer idToAdd) {",
    "previous_filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/CachedDiurnal.java"
  },
  {
    "sha": "dd1e72668e6fdfa9ee44afc13f0e2530a35c6ca1",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/DiurnalDbi.java",
    "status": "renamed",
    "additions": 37,
    "deletions": 8,
    "changes": 45,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/DiurnalDbi.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/DiurnalDbi.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/DiurnalDbi.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,6 +1,7 @@\n-package com.vv.personal.diurnal.dbi.interactor.diurnal;\n+package com.vv.personal.diurnal.dbi.interactor.diurnal.dbi;\n \n import com.vv.personal.diurnal.dbi.config.DbiConfigForDiurnal;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.cache.CachedDiurnal;\n import org.apache.commons.lang3.time.StopWatch;\n import org.slf4j.Logger;\n \n@@ -12,7 +13,7 @@\n import java.util.concurrent.*;\n import java.util.function.Function;\n \n-import static com.vv.personal.diurnal.dbi.constants.Constants.SELECT_ALL_IDS;\n+import static com.vv.personal.diurnal.dbi.constants.DbConstants.*;\n \n \n /**\n@@ -45,16 +46,16 @@ public DiurnalDbi(String table, String primaryColumns, DbiConfigForDiurnal dbiCo\n \n     @Override\n     public ResultSet executeNonUpdateSql(String sql) {\n-        LOGGER.info(\"Executing SQL => {}\", sql);\n+        //LOGGER.info(\"Executing SQL => {}\", sql);\n         Callable<ResultSet> nonUpdateSqlTask = () -> {\n             StopWatch stopWatch = new StopWatch();\n             stopWatch.start();\n             try {\n                 ResultSet sqlResult = dbiConfigForDiurnal.getStatement().executeQuery(sql);\n-                LOGGER.info(\"SQL completed => {}\", sql);\n+                LOGGER.info(\"SQL completed => [{}]\", sql);\n                 return sqlResult;\n             } catch (SQLException throwables) {\n-                LOGGER.error(\"Failed to execute above SQL. \", throwables);\n+                LOGGER.error(\"Failed to execute SQL => [{}]. \", sql, throwables);\n             } finally {\n                 stopWatch.stop();\n                 LOGGER.info(\"Non-update SQL execution complete in {}ms\", stopWatch.getTime(TimeUnit.MILLISECONDS));\n@@ -71,16 +72,16 @@ public ResultSet executeNonUpdateSql(String sql) {\n \n     @Override\n     public int executeUpdateSql(String sql) {\n-        LOGGER.info(\"Executing SQL => {}\", sql);\n+        //LOGGER.info(\"Executing SQL => {}\", sql);\n         Callable<Integer> updateSqlTask = () -> {\n             StopWatch stopWatch = new StopWatch();\n             stopWatch.start();\n             try {\n                 int sqlResult = dbiConfigForDiurnal.getStatement().executeUpdate(sql);\n-                LOGGER.info(\"Result of above SQL {} => {}\", sql, sqlResult);\n+                LOGGER.info(\"Result of SQL [{}] => {}\", sql, sqlResult);\n                 return sqlResult;\n             } catch (SQLException throwables) {\n-                LOGGER.error(\"Failed to execute above SQL. \", throwables);\n+                LOGGER.error(\"Failed to execute SQL => [{}]. \", sql, throwables);\n             } finally {\n                 stopWatch.stop();\n                 LOGGER.info(\"Update SQL execution complete in {}ms\", stopWatch.getTime(TimeUnit.MILLISECONDS));\n@@ -124,6 +125,29 @@ public int createTableIfNotExists() {\n                 createTableIfNotExistSqlFunction.apply(createTableIfNotExistSqlLocation));\n     }\n \n+    @Override\n+    public int dropTable() {\n+        return executeUpdateSql(String.format(DROP_TABLE, TABLE));\n+    }\n+\n+    @Override\n+    public int truncateTable() {\n+        return executeUpdateSql(String.format(TRUNCATE_TABLE, TABLE));\n+    }\n+\n+    protected boolean checkIfEntityExists(String sql, int expectedCount) {\n+        ResultSet resultSet = executeNonUpdateSql(sql);\n+        int rowsReturned = 0;\n+        try {\n+            while (resultSet.next()) {\n+                rowsReturned++;\n+            }\n+        } catch (SQLException throwables) {\n+            LOGGER.error(\"Failed to completely extract result from the above select all query. \", throwables);\n+        }\n+        return rowsReturned == expectedCount;\n+    }\n+\n     @Override\n     public void populatePrimaryIds() {\n         getCachedRef().bulkAddNewIdsToEntityCache(TABLE, selectAllIdsForTable());\n@@ -141,6 +165,11 @@ public String getCreateTableIfNotExistSqlLocation() {\n         return createTableIfNotExistSqlLocation;\n     }\n \n+    @Override\n+    public String getTableName() {\n+        return TABLE;\n+    }\n+\n     /*@Override\n     public void addToCache(String table, Integer id) {\n         getCachedRef().addNewIdToEntityCache(table, id);",
    "previous_filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/DiurnalDbi.java"
  },
  {
    "sha": "4d2b8c1c0c3b4756f719c755bff371b296540763",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/IDiurnalDbi.java",
    "status": "renamed",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/IDiurnalDbi.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/IDiurnalDbi.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/IDiurnalDbi.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,4 +1,4 @@\n-package com.vv.personal.diurnal.dbi.interactor.diurnal;\n+package com.vv.personal.diurnal.dbi.interactor.diurnal.dbi;\n \n import com.vv.personal.diurnal.dbi.interactor.IDbi;\n \n@@ -17,6 +17,8 @@\n \n     int updateEntity(T t);\n \n+    boolean checkEntity(T t);\n+\n     K retrieveAll();\n \n     K retrieveSelective(); //TODO -- work on this later, not imp atm.",
    "previous_filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/IDiurnalDbi.java"
  },
  {
    "sha": "77e5c2c98c7b332bf0a55ab77fca346adc77ea22",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/tables/DiurnalTableEntry.java",
    "status": "renamed",
    "additions": 21,
    "deletions": 4,
    "changes": 25,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/tables/DiurnalTableEntry.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/tables/DiurnalTableEntry.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/tables/DiurnalTableEntry.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -1,27 +1,34 @@\n-package com.vv.personal.diurnal.dbi.interactor.diurnal;\n+package com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables;\n \n import com.vv.personal.diurnal.artifactory.generated.EntryProto;\n import com.vv.personal.diurnal.dbi.config.DbiConfigForDiurnal;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.cache.CachedDiurnal;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.DiurnalDbi;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.function.Function;\n \n-import static com.vv.personal.diurnal.dbi.constants.Constants.SELECT_ALL;\n+import static com.vv.personal.diurnal.dbi.constants.Constants.ONE;\n+import static com.vv.personal.diurnal.dbi.constants.DbConstants.PRIMARY_COL_ENTRY;\n+import static com.vv.personal.diurnal.dbi.constants.DbConstants.SELECT_ALL;\n \n /**\n  * @author Vivek\n  * @since 24/02/21\n  */\n+@Deprecated\n public class DiurnalTableEntry extends DiurnalDbi<EntryProto.Entry, EntryProto.EntryList> {\n     private static final Logger LOGGER = LoggerFactory.getLogger(DiurnalTableEntry.class);\n \n     private final String INSERT_STMT_NEW_ENTRY = \"INSERT INTO %s(\\\"mobile\\\", \\\"date\\\", \\\"serial\\\",\\\"sign\\\",\\\"curr\\\",\\\"amount\\\",\\\"description\\\") \" +\n             \"VALUES(%d, %d, %d, %d, %d, '%.2f', '%s')\";\n     private final String DELETE_STMT_ENTRY = \"DELETE FROM %s \" +\n             \"WHERE \\\"%s\\\"=%d and \\\"%s\\\"=%d and \\\"%s\\\"=%d\";\n+    private final String CHECK_STMT_ENTRY_EXISTS = \"SELECT %s from %s \" +\n+            \"WHERE \\\"%s\\\"=%d and \\\"%s\\\"=%d and \\\"%s\\\"=%d\";\n \n     private final String COL_DATE = \"date\";\n     private final String COL_MOBILE = \"mobile\";\n@@ -45,7 +52,8 @@ public int pushNewEntity(EntryProto.Entry entry) {\n     private int insertNewEntry(Long mobile, Integer date, Integer serial,\n                                EntryProto.Sign sign, EntryProto.Currency currency, Double amount, String description) {\n         String sql = String.format(INSERT_STMT_NEW_ENTRY, TABLE,\n-                mobile, date, serial, sign.getNumber(), currency.getNumber(), amount, description);\n+                mobile, date, serial, sign.getNumber(), currency.getNumber(), amount,\n+                description.replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\"));\n         int sqlExecResult = executeUpdateSql(sql);\n         return sqlExecResult;\n         //return addToCacheOnSqlResult(sqlExecResult, mobile);\n@@ -67,6 +75,15 @@ public int updateEntity(EntryProto.Entry entry) {\n         throw new UnsupportedOperationException(\"Entries can't be updated. They need to be deleted and re-created for DB!\");\n     }\n \n+    @Override\n+    public boolean checkEntity(EntryProto.Entry entry) {\n+        String sql = String.format(CHECK_STMT_ENTRY_EXISTS, PRIMARY_COL_ENTRY, TABLE,\n+                COL_MOBILE, entry.getMobile(),\n+                COL_DATE, entry.getDate(),\n+                COL_SERIAL, entry.getSerial());\n+        return checkIfEntityExists(sql, ONE);\n+    }\n+\n     @Override\n     public EntryProto.EntryList retrieveAll() {\n         String sql = String.format(SELECT_ALL, TABLE);\n@@ -78,7 +95,7 @@ public int updateEntity(EntryProto.Entry entry) {\n                 try {\n                     if (!resultSet.next()) break;\n                     EntryProto.Entry entry = generateDetail(resultSet);\n-                    entriesBuilder.addEntries(entry);\n+                    entriesBuilder.addEntry(entry);\n                     rowsReturned++;\n                 } catch (SQLException throwables) {\n                     LOGGER.error(\"Failed to completely extract result from the above select all query. \", throwables);",
    "previous_filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/DiurnalTableEntry.java"
  },
  {
    "sha": "89e9722bc3b45ce16f949a7114ace053af1cb739",
    "filename": "src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/tables/DiurnalTableEntryDay.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/blob/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/tables/DiurnalTableEntryDay.java",
    "raw_url": "https://github.com/crackCodeLogn/diurnal-dbi-service/raw/6e961afaa8a0145c8e3fe9995bb1de1724b49803/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/tables/DiurnalTableEntryDay.java",
    "contents_url": "https://api.github.com/repos/crackCodeLogn/diurnal-dbi-service/contents/src/main/java/com/vv/personal/diurnal/dbi/interactor/diurnal/dbi/tables/DiurnalTableEntryDay.java?ref=6e961afaa8a0145c8e3fe9995bb1de1724b49803",
    "patch": "@@ -0,0 +1,124 @@\n+package com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.tables;\n+\n+import com.vv.personal.diurnal.artifactory.generated.EntryDayProto;\n+import com.vv.personal.diurnal.dbi.config.DbiConfigForDiurnal;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.cache.CachedDiurnal;\n+import com.vv.personal.diurnal.dbi.interactor.diurnal.dbi.DiurnalDbi;\n+import com.vv.personal.diurnal.dbi.util.DiurnalUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.function.Function;\n+\n+import static com.vv.personal.diurnal.dbi.constants.Constants.ONE;\n+import static com.vv.personal.diurnal.dbi.constants.DbConstants.PRIMARY_COL_ENTRY_DAY;\n+import static com.vv.personal.diurnal.dbi.constants.DbConstants.SELECT_ALL;\n+\n+/**\n+ * @author Vivek\n+ * @since 06/03/21\n+ */\n+public class DiurnalTableEntryDay extends DiurnalDbi<EntryDayProto.EntryDay, EntryDayProto.EntryDayList> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DiurnalTableEntryDay.class);\n+\n+    private final String INSERT_STMT_NEW_ENTRY_DAY = \"INSERT INTO %s(\\\"hash_email\\\", \\\"date\\\", \\\"title\\\", \\\"entries_as_string\\\") \" +\n+            \"VALUES(%d, %d, '%s', '%s')\";\n+    private final String DELETE_STMT_ENTRY = \"DELETE FROM %s \" +\n+            \"WHERE \\\"%s\\\"=%d and \\\"%s\\\"=%d\";\n+    private final String CHECK_STMT_ENTRY_EXISTS = \"SELECT %s from %s \" +\n+            \"WHERE \\\"%s\\\"=%d and \\\"%s\\\"=%d\";\n+\n+    private final String COL_DATE = \"date\";\n+    private final String COL_HASH_EMAIL = \"hash_email\";\n+    private final String COL_TITLE = \"title\";\n+    private final String COL_ENTRIES_AS_STRING = \"entries_as_string\";\n+\n+    public DiurnalTableEntryDay(String table, String primaryColumns, DbiConfigForDiurnal dbiConfigForDiurnal, CachedDiurnal cachedDiurnal, Function<String, String> createTableIfNotExistSqlFunction, String createTableIfNotExistSqlLocation) {\n+        super(table, primaryColumns, dbiConfigForDiurnal, cachedDiurnal, createTableIfNotExistSqlFunction, createTableIfNotExistSqlLocation, LOGGER);\n+    }\n+\n+    private int insertNewEntryDay(Integer emailHash, Integer date, String title, String description) {\n+        String sql = String.format(INSERT_STMT_NEW_ENTRY_DAY, TABLE,\n+                emailHash, date, title, description); //description should already be in the json-ized format + processed\n+        int sqlExecResult = executeUpdateSql(sql);\n+        return sqlExecResult;\n+        //return addToCacheOnSqlResult(sqlExecResult, emailHash);\n+    }\n+\n+    @Override\n+    public int pushNewEntity(EntryDayProto.EntryDay entryDay) {\n+        LOGGER.info(\"Pushing new EntryDay entity: {} x {} x {}\", entryDay.getHashEmail(), entryDay.getDate(), entryDay.getTitle());\n+        return insertNewEntryDay(entryDay.getHashEmail(), entryDay.getDate(), entryDay.getTitle(), entryDay.getEntriesAsString());\n+    }\n+\n+    @Override\n+    public int deleteEntity(EntryDayProto.EntryDay entryDay) {\n+        String sql = String.format(DELETE_STMT_ENTRY, TABLE,\n+                COL_HASH_EMAIL, entryDay.getHashEmail(),\n+                COL_DATE, entryDay.getDate());\n+        int sqlExecResult = executeUpdateSql(sql);\n+        return sqlExecResult;\n+        //return removeFromCacheOnSqlResult(sqlExecResult, userMapping.getMobile());\n+    }\n+\n+    @Override\n+    public int updateEntity(EntryDayProto.EntryDay entryDay) {\n+        throw new UnsupportedOperationException(\"Entry-Day can't be updated. They need to be deleted and re-created for DB!\");\n+    }\n+\n+    @Override\n+    public boolean checkEntity(EntryDayProto.EntryDay entryDay) {\n+        String sql = String.format(CHECK_STMT_ENTRY_EXISTS, PRIMARY_COL_ENTRY_DAY, TABLE,\n+                COL_HASH_EMAIL, entryDay.getHashEmail(),\n+                COL_DATE, entryDay.getDate());\n+        return checkIfEntityExists(sql, ONE);\n+    }\n+\n+    @Override\n+    public EntryDayProto.EntryDayList retrieveAll() {\n+        String sql = String.format(SELECT_ALL, TABLE);\n+        ResultSet resultSet = executeNonUpdateSql(sql);\n+        int rowsReturned = 0;\n+        EntryDayProto.EntryDayList.Builder entriesBuilder = EntryDayProto.EntryDayList.newBuilder();\n+        try {\n+            while (true) {\n+                try {\n+                    if (!resultSet.next()) break;\n+                    EntryDayProto.EntryDay entryDay = generateDetail(resultSet);\n+                    entriesBuilder.addEntryDay(entryDay);\n+                    rowsReturned++;\n+                } catch (SQLException throwables) {\n+                    LOGGER.error(\"Failed to completely extract result from the above select all query. \", throwables);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOGGER.error(\"Failed to execute / process sql '{}'. \", sql, e);\n+        }\n+        LOGGER.info(\"Received {} entries for sql => '{}'\", rowsReturned, sql);\n+        return entriesBuilder.build();\n+    }\n+\n+    @Override\n+    public EntryDayProto.EntryDayList retrieveSelective() {\n+        return null;\n+    }\n+\n+    @Override\n+    public EntryDayProto.EntryDay generateDetail(ResultSet resultSet) {\n+        EntryDayProto.EntryDay.Builder builder = EntryDayProto.EntryDay.newBuilder();\n+        try {\n+            builder.setHashEmail(resultSet.getInt(COL_HASH_EMAIL));\n+            builder.setDate(resultSet.getInt(COL_DATE));\n+            builder.setTitle(\n+                    DiurnalUtil.refineDbStringForOriginal(resultSet.getString(COL_TITLE)));\n+            builder.setEntriesAsString(\n+                    DiurnalUtil.refineDbStringForOriginal(resultSet.getString(COL_ENTRIES_AS_STRING))); //refinement - for getting quotes back\n+        } catch (SQLException throwables) {\n+            LOGGER.error(\"Failed to retrieve entry detail from DB. \", throwables);\n+        }\n+        return builder.build();\n+    }\n+\n+}"
  }
]
