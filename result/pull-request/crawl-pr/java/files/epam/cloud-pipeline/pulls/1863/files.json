[
  {
    "sha": "6a1f82a61822f0b317bd9a7807f616681bfe3fe0",
    "filename": "cloud-pipeline-common/model/src/main/java/com/epam/pipeline/client/pipeline/CloudPipelineAPI.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/client/pipeline/CloudPipelineAPI.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/client/pipeline/CloudPipelineAPI.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/client/pipeline/CloudPipelineAPI.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -23,6 +23,7 @@\n import com.epam.pipeline.entity.configuration.RunConfiguration;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageTag;\n import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n import com.epam.pipeline.entity.docker.ToolDescription;\n import com.epam.pipeline.entity.git.GitRepositoryEntry;\n@@ -49,6 +50,7 @@\n import com.epam.pipeline.vo.FilterNodesVO;\n import com.epam.pipeline.vo.RunStatusVO;\n import com.epam.pipeline.vo.data.storage.DataStorageTagInsertBatchRequest;\n+import com.epam.pipeline.vo.data.storage.DataStorageTagLoadBatchRequest;\n import com.epam.pipeline.vo.notification.NotificationMessageVO;\n import okhttp3.MultipartBody;\n import retrofit2.Call;\n@@ -152,6 +154,10 @@\n     Call<Result<Object>> insertDataStorageTags(@Path(ID) Long storageId,\n                                                @Body DataStorageTagInsertBatchRequest request);\n \n+    @POST(\"datastorage/{id}/tags/batch/load\")\n+    Call<Result<List<DataStorageTag>>> loadDataStorageObjectTags(@Path(ID) Long storageId,\n+                                                                 @Body DataStorageTagLoadBatchRequest request);\n+\n     @GET(\"users\")\n     Call<Result<List<PipelineUser>>> loadAllUsers();\n "
  },
  {
    "sha": "541d8865b086cb015152f65345da8a9afbe2ccd2",
    "filename": "cloud-pipeline-common/model/src/main/java/com/epam/pipeline/vo/data/storage/DataStorageTagLoadBatchRequest.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/vo/data/storage/DataStorageTagLoadBatchRequest.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/vo/data/storage/DataStorageTagLoadBatchRequest.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/vo/data/storage/DataStorageTagLoadBatchRequest.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -0,0 +1,11 @@\n+package com.epam.pipeline.vo.data.storage;\n+\n+import lombok.Value;\n+\n+import java.util.List;\n+\n+@Value\n+public class DataStorageTagLoadBatchRequest {\n+    \n+    List<DataStorageTagLoadRequest> requests;\n+}"
  },
  {
    "sha": "d56022d1781e3a4acfa7a37ad82905d98b9fb4ad",
    "filename": "cloud-pipeline-common/model/src/main/java/com/epam/pipeline/vo/data/storage/DataStorageTagLoadRequest.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/vo/data/storage/DataStorageTagLoadRequest.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/vo/data/storage/DataStorageTagLoadRequest.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/cloud-pipeline-common/model/src/main/java/com/epam/pipeline/vo/data/storage/DataStorageTagLoadRequest.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -0,0 +1,9 @@\n+package com.epam.pipeline.vo.data.storage;\n+\n+import lombok.Value;\n+\n+@Value\n+public class DataStorageTagLoadRequest {\n+    \n+    String path;\n+}"
  },
  {
    "sha": "29a83253a794b0ba84c16928232441fe2954bd88",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/AzureFileSyncConfiguration.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/AzureFileSyncConfiguration.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/AzureFileSyncConfiguration.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/AzureFileSyncConfiguration.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -24,6 +24,7 @@\n import com.epam.pipeline.elasticsearchagent.service.impl.ElasticIndexService;\n import com.epam.pipeline.elasticsearchagent.service.impl.ObjectStorageIndexImpl;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n+import com.epam.pipeline.entity.search.SearchDocumentType;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -59,6 +60,7 @@ public ObjectStorageIndex azFileSynchronizer(\n             final @Qualifier(\"azFileManager\") ObjectStorageFileManager azFileManager) {\n         return new ObjectStorageIndexImpl(apiClient, esClient, indexService,\n                 azFileManager, indexPrefix + indexName,\n-                indexSettingsPath, bulkInsertSize, DataStorageType.AZ);\n+                indexSettingsPath, bulkInsertSize, DataStorageType.AZ,\n+                SearchDocumentType.AZ_BLOB_FILE);\n     }\n }"
  },
  {
    "sha": "ec53fceaffa0c42e95095ce828b893fa07eae0e0",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/GSFileSyncConfiguration.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/GSFileSyncConfiguration.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/GSFileSyncConfiguration.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/GSFileSyncConfiguration.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -20,6 +20,7 @@\n import com.epam.pipeline.elasticsearchagent.service.ObjectStorageIndex;\n import com.epam.pipeline.elasticsearchagent.service.impl.*;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n+import com.epam.pipeline.entity.search.SearchDocumentType;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -55,7 +56,8 @@ public ObjectStorageIndex gsFileSynchronizer(\n             final @Qualifier(\"gsFileManager\") ObjectStorageFileManager gsFileManager) {\n         return new ObjectStorageIndexImpl(apiClient, esClient, indexService,\n                 gsFileManager, indexPrefix + indexName,\n-                indexSettingsPath, bulkInsertSize, DataStorageType.GS);\n+                indexSettingsPath, bulkInsertSize, DataStorageType.GS,\n+                SearchDocumentType.GS_FILE);\n     }\n \n }"
  },
  {
    "sha": "a87aa8dd70655c8a04cabab9dec7ffba24681c7e",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/S3FileSyncConfiguration.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/S3FileSyncConfiguration.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/S3FileSyncConfiguration.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/app/S3FileSyncConfiguration.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -24,6 +24,7 @@\n import com.epam.pipeline.elasticsearchagent.service.impl.ObjectStorageIndexImpl;\n import com.epam.pipeline.elasticsearchagent.service.impl.S3FileManager;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n+import com.epam.pipeline.entity.search.SearchDocumentType;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -56,7 +57,8 @@ public ObjectStorageIndex s3FileSynchronizer(\n             final @Qualifier(\"s3FileManager\") ObjectStorageFileManager s3FileManager) {\n         return new ObjectStorageIndexImpl(apiClient, esClient, indexService,\n                 s3FileManager, indexPrefix + indexName,\n-                indexSettingsPath, bulkInsertSize, DataStorageType.S3);\n+                indexSettingsPath, bulkInsertSize, DataStorageType.S3,\n+                SearchDocumentType.S3_FILE);\n     }\n \n }"
  },
  {
    "sha": "413fbf3511a2a576166e752db1b7194f91ce60b5",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/ObjectStorageFileManager.java",
    "status": "modified",
    "additions": 6,
    "deletions": 9,
    "changes": 15,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/ObjectStorageFileManager.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/ObjectStorageFileManager.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/ObjectStorageFileManager.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -16,8 +16,6 @@\n \n package com.epam.pipeline.elasticsearchagent.service;\n \n-import com.epam.pipeline.elasticsearchagent.model.PermissionsContainer;\n-import com.epam.pipeline.elasticsearchagent.service.impl.IndexRequestContainer;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageFile;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n@@ -26,17 +24,16 @@\n import java.util.stream.Stream;\n \n /**\n- * Lists all files in specified {@code AbstractDataStorage} and ass them to ES index\n+ * Lists all files in specified {@code AbstractDataStorage}\n  */\n public interface ObjectStorageFileManager {\n     \n     DataStorageType getType();\n \n-    Stream<DataStorageFile> listVersionsWithNativeTags(AbstractDataStorage dataStorage,\n-                                                       TemporaryCredentials credentials);\n+    Stream<DataStorageFile> files(AbstractDataStorage storage,\n+                                  TemporaryCredentials credentials);\n+\n+    Stream<DataStorageFile> versionsWithNativeTags(AbstractDataStorage storage,\n+                                                   TemporaryCredentials credentials);\n \n-    void listAndIndexFiles(String indexName, AbstractDataStorage dataStorage,\n-                           TemporaryCredentials credentials,\n-                           PermissionsContainer permissionsContainer,\n-                           IndexRequestContainer requestContainer);\n }"
  },
  {
    "sha": "1df86b62ff04c0d1c7e98010201796a35ee23e1f",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/ObjectStorageIndex.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/ObjectStorageIndex.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/ObjectStorageIndex.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/ObjectStorageIndex.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -18,12 +18,14 @@\n \n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n+import com.epam.pipeline.entity.search.SearchDocumentType;\n \n /**\n  * Provides common interface for indexing of files in some {@code AbstractDataStorage}\n  */\n public interface ObjectStorageIndex extends ElasticsearchSynchronizer {\n \n     DataStorageType getStorageType();\n+    SearchDocumentType getDocumentType();\n     void indexStorage(AbstractDataStorage dataStorage);\n }"
  },
  {
    "sha": "4c1192bdd22d81431f87d8f7a41dc7bd840e1c58",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/AzureBlobManager.java",
    "status": "modified",
    "additions": 11,
    "deletions": 48,
    "changes": 59,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/AzureBlobManager.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/AzureBlobManager.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/AzureBlobManager.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -16,17 +16,14 @@\n \n package com.epam.pipeline.elasticsearchagent.service.impl;\n \n-import com.epam.pipeline.elasticsearchagent.model.PermissionsContainer;\n import com.epam.pipeline.elasticsearchagent.service.ObjectStorageFileManager;\n-import com.epam.pipeline.elasticsearchagent.service.impl.converter.storage.StorageFileMapper;\n import com.epam.pipeline.elasticsearchagent.utils.ESConstants;\n import com.epam.pipeline.elasticsearchagent.utils.StreamUtils;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageException;\n import com.epam.pipeline.entity.datastorage.DataStorageFile;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n-import com.epam.pipeline.entity.search.SearchDocumentType;\n import com.microsoft.azure.storage.blob.AnonymousCredentials;\n import com.microsoft.azure.storage.blob.BlobListingDetails;\n import com.microsoft.azure.storage.blob.ContainerURL;\n@@ -47,7 +44,6 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.elasticsearch.action.index.IndexRequest;\n \n import java.net.URL;\n import java.sql.Date;\n@@ -58,7 +54,6 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n-import static com.epam.pipeline.elasticsearchagent.utils.ESConstants.DOC_MAPPING_TYPE;\n import static com.epam.pipeline.elasticsearchagent.utils.ESConstants.HIDDEN_FILE_NAME;\n \n @Slf4j\n@@ -68,30 +63,12 @@\n     private static final String BLOB_URL_FORMAT = \"https://%s.blob.core.windows.net%s\";\n     private static final int LIST_PAGE_SIZE = 1000;\n \n-    private final StorageFileMapper fileMapper = new StorageFileMapper();\n-    \n     @Getter\n     private final DataStorageType type = DataStorageType.AZ;\n \n     @Override\n-    public Stream<DataStorageFile> listVersionsWithNativeTags(final AbstractDataStorage dataStorage,\n-                                                              final TemporaryCredentials credentials) {\n-        return files(dataStorage, credentials);\n-    }\n-\n-    @Override\n-    public void listAndIndexFiles(final String indexName,\n-                                  final AbstractDataStorage storage,\n-                                  final TemporaryCredentials credentials,\n-                                  final PermissionsContainer permissions,\n-                                  final IndexRequestContainer indexContainer) {\n-        files(storage, credentials)\n-                .map(file -> createIndexRequest(file, storage, credentials.getRegion(), permissions, indexName))\n-                .forEach(indexContainer::add);\n-    }\n-\n-    private Stream<DataStorageFile> files(final AbstractDataStorage storage,\n-                                          final TemporaryCredentials credentials) {\n+    public Stream<DataStorageFile> files(final AbstractDataStorage storage,\n+                                         final TemporaryCredentials credentials) {\n         return StreamUtils.from(new AzureFlatSegmentIterator(buildContainerUrl(storage, credentials), \"\"))\n                 .map(response -> Optional.of(response.body())\n                         .map(ListBlobsFlatSegmentResponse::segment)\n@@ -103,6 +80,12 @@ public void listAndIndexFiles(final String indexName,\n                 .map(this::convertToStorageFile);\n     }\n \n+    @Override\n+    public Stream<DataStorageFile> versionsWithNativeTags(final AbstractDataStorage storage,\n+                                                          final TemporaryCredentials credentials) {\n+        return files(storage, credentials);\n+    }\n+\n     private ContainerURL buildContainerUrl(final AbstractDataStorage storage,\n                                            final TemporaryCredentials credentials) {\n         final AnonymousCredentials creds = new AnonymousCredentials();\n@@ -112,15 +95,6 @@ private ContainerURL buildContainerUrl(final AbstractDataStorage storage,\n         return serviceURL.createContainerURL(storage.getPath());\n     }\n \n-    private IndexRequest createIndexRequest(final DataStorageFile item,\n-                                            final AbstractDataStorage storage,\n-                                            final String region,\n-                                            final PermissionsContainer permissions,\n-                                            final String indexName) {\n-        return new IndexRequest(indexName, DOC_MAPPING_TYPE)\n-                .source(fileMapper.fileToDocument(item, storage, region, permissions, SearchDocumentType.AZ_BLOB_FILE));\n-    }\n-\n     private DataStorageFile convertToStorageFile(final BlobItem blob) {\n         final DataStorageFile file = new DataStorageFile();\n         file.setName(blob.name());\n@@ -140,25 +114,14 @@ private URL url(final String blobUrl) {\n         return new URL(blobUrl);\n     }\n \n+    @RequiredArgsConstructor\n     private static class AzureFlatSegmentIterator implements Iterator<ContainerListBlobFlatSegmentResponse> {\n \n         private final ContainerURL container;\n         private final String path;\n-        private final int pageSize;\n \n         private String nextMarker;\n-        private ContainerListBlobFlatSegmentResponse response = null;\n-\n-        private AzureFlatSegmentIterator(final ContainerURL container, final String path, final String nextMarker,\n-                                         final int pageSize) {\n-            this.container = container;\n-            this.path = path;\n-            this.pageSize = pageSize;\n-        }\n-\n-        public AzureFlatSegmentIterator(final ContainerURL container, final String path) {\n-            this(container, path, null, LIST_PAGE_SIZE);\n-        }\n+        private ContainerListBlobFlatSegmentResponse response;\n \n         @Override\n         public boolean hasNext() {\n@@ -169,7 +132,7 @@ public boolean hasNext() {\n         public ContainerListBlobFlatSegmentResponse next() {\n             response = unwrap(container.listBlobsFlatSegment(nextMarker, new ListBlobsOptions()\n                     .withPrefix(path)\n-                    .withMaxResults(pageSize)\n+                    .withMaxResults(LIST_PAGE_SIZE)\n                     .withDetails(new BlobListingDetails()\n                             .withMetadata(true))));\n             nextMarker = Optional.ofNullable(response)"
  },
  {
    "sha": "f468c2f30b70edbfbb6f42e4fe038b58398054a0",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/CloudPipelineAPIClient.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/CloudPipelineAPIClient.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/CloudPipelineAPIClient.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/CloudPipelineAPIClient.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -21,6 +21,7 @@\n import com.epam.pipeline.entity.configuration.RunConfiguration;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageTag;\n import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n import com.epam.pipeline.entity.docker.ToolDescription;\n import com.epam.pipeline.entity.git.GitRepositoryEntry;\n@@ -42,6 +43,7 @@\n import com.epam.pipeline.vo.EntityPermissionVO;\n import com.epam.pipeline.vo.EntityVO;\n import com.epam.pipeline.vo.data.storage.DataStorageTagInsertBatchRequest;\n+import com.epam.pipeline.vo.data.storage.DataStorageTagLoadBatchRequest;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Service;\n \n@@ -74,6 +76,17 @@ public void insertDataStorageTags(final Long id, final DataStorageTagInsertBatch\n         QueryUtils.execute(cloudPipelineAPI.insertDataStorageTags(id, request));\n     }\n \n+    public List<DataStorageTag> loadDataStorageTags(final Long id, final DataStorageTagLoadBatchRequest request) {\n+        return QueryUtils.execute(cloudPipelineAPI.loadDataStorageObjectTags(id, request));\n+    }\n+\n+    public Map<String, Map<String, String>> loadDataStorageTagsMap(final Long id,\n+                                                                   final DataStorageTagLoadBatchRequest request) {\n+        return loadDataStorageTags(id, request).stream()\n+                .collect(Collectors.groupingBy(tag -> tag.getObject().getPath(),\n+                        Collectors.toMap(DataStorageTag::getKey, DataStorageTag::getValue)));\n+    }\n+\n     public PipelineRunWithLog loadPipelineRunWithLogs(final Long pipelineRunId) {\n         PipelineRunWithLog runWithLog = new PipelineRunWithLog();\n "
  },
  {
    "sha": "03e0f03c68ea91898c384718b4397e9b19f92589",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/DataStorageNativeTagsTransferSynchronizer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/DataStorageNativeTagsTransferSynchronizer.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/DataStorageNativeTagsTransferSynchronizer.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/DataStorageNativeTagsTransferSynchronizer.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -42,6 +42,7 @@ public DataStorageNativeTagsTransferSynchronizer(final CloudPipelineAPIClient cl\n     }\n \n     @Override\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void synchronize(final LocalDateTime lastSyncTime, final LocalDateTime syncStart) {\n         log.debug(\"Started data storage native tags transfer synchronization\");\n         cloudPipelineAPIClient.loadAllDataStorages()\n@@ -53,8 +54,8 @@ public void synchronize(final LocalDateTime lastSyncTime, final LocalDateTime sy\n                         final boolean isVersioningEnabled = storage.isVersioningEnabled();\n                         Optional.ofNullable(storage.getType()).map(fileManagers::get)\n                                 .map(fileManager -> fileManager\n-                                        .listVersionsWithNativeTags(storage, getTemporaryCredentials(storage))\n-                                        .map(chunk -> isVersioningEnabled ? versionedTags(chunk) : nonVersionedTags(chunk))\n+                                        .versionsWithNativeTags(storage, getTemporaryCredentials(storage))\n+                                        .map(chunk -> isVersioningEnabled ? versionedTags(chunk) : tags(chunk))\n                                         .map(stream -> stream.collect(Collectors.toList()))\n                                         .filter(CollectionUtils::isNotEmpty))\n                                 .map(StreamUtils::windowed)\n@@ -86,7 +87,7 @@ public void synchronize(final LocalDateTime lastSyncTime, final LocalDateTime sy\n                 : dataStorageTagInsertRequestStream;\n     }\n \n-    private Stream<DataStorageTagInsertRequest> nonVersionedTags(final DataStorageFile file) {\n+    private Stream<DataStorageTagInsertRequest> tags(final DataStorageFile file) {\n         return MapUtils.emptyIfNull(file.getTags()).entrySet().stream()\n                 .map(e -> new DataStorageTagInsertRequest(\n                         file.getPath(), null, e.getKey(), e.getValue()));"
  },
  {
    "sha": "c27a2c8b5167be65cf5fcabb6f04b223ff7354ef",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/GsBucketFileManager.java",
    "status": "modified",
    "additions": 33,
    "deletions": 59,
    "changes": 92,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/GsBucketFileManager.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/GsBucketFileManager.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/GsBucketFileManager.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -15,16 +15,13 @@\n  */\n package com.epam.pipeline.elasticsearchagent.service.impl;\n \n-import com.epam.pipeline.elasticsearchagent.model.PermissionsContainer;\n import com.epam.pipeline.elasticsearchagent.service.ObjectStorageFileManager;\n-import com.epam.pipeline.elasticsearchagent.service.impl.converter.storage.StorageFileMapper;\n import com.epam.pipeline.elasticsearchagent.utils.ESConstants;\n import com.epam.pipeline.elasticsearchagent.utils.StreamUtils;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageFile;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n-import com.epam.pipeline.entity.search.SearchDocumentType;\n import com.google.api.services.storage.StorageScopes;\n import com.google.auth.oauth2.AccessToken;\n import com.google.auth.oauth2.GoogleCredentials;\n@@ -38,27 +35,24 @@\n import org.apache.commons.collections4.MapUtils;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.elasticsearch.action.index.IndexRequest;\n \n import java.text.ParseException;\n import java.time.Instant;\n import java.time.format.DateTimeParseException;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.Iterator;\n-import java.util.TimeZone;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.HashMap;\n+import java.util.TimeZone;\n import java.util.stream.Stream;\n \n-import static com.epam.pipeline.elasticsearchagent.utils.ESConstants.DOC_MAPPING_TYPE;\n-\n @Slf4j\n @RequiredArgsConstructor\n public class GsBucketFileManager implements ObjectStorageFileManager {\n \n-    private final StorageFileMapper fileMapper = new StorageFileMapper();\n+    private static final String DELIMITER = \"/\";\n \n     @Getter\n     private final DataStorageType type = DataStorageType.GS;\n@@ -69,58 +63,31 @@\n     }\n \n     @Override\n-    public Stream<DataStorageFile> listVersionsWithNativeTags(final AbstractDataStorage dataStorage,\n-                                                              final TemporaryCredentials credentials) {\n-        return versions(dataStorage, credentials);\n-    }\n-\n-    @Override\n-    public void listAndIndexFiles(final String indexName,\n-                                  final AbstractDataStorage dataStorage,\n-                                  final TemporaryCredentials credentials,\n-                                  final PermissionsContainer permissionsContainer,\n-                                  final IndexRequestContainer requestContainer) {\n-        files(dataStorage, credentials)\n-                .map(file -> createIndexRequest(file, indexName, dataStorage, credentials.getRegion(), \n-                        permissionsContainer))\n-                .forEach(requestContainer::add);\n-    }\n-\n-    private Stream<DataStorageFile> versions(final AbstractDataStorage dataStorage,\n-                                             final TemporaryCredentials credentials) {\n+    public Stream<DataStorageFile> files(final AbstractDataStorage storage,\n+                                         final TemporaryCredentials credentials) {\n         final Storage googleStorage = getGoogleStorage(credentials);\n-        final String bucketName = dataStorage.getPath();\n-        final Iterator<Blob> iterator = googleStorage.list(bucketName, Storage.BlobListOption.versions(true))\n+        final String bucketName = storage.getPath();\n+        final Iterator<Blob> iterator = googleStorage.list(bucketName)\n                 .iterateAll()\n                 .iterator();\n         return StreamUtils.from(iterator)\n                 .filter(blob -> !StringUtils.endsWithIgnoreCase(blob.getName(), ESConstants.HIDDEN_FILE_NAME))\n-                .map(blob -> {\n-                    final DataStorageFile file = new DataStorageFile();\n-                    file.setName(blob.getName());\n-                    file.setPath(blob.getName());\n-                    file.setSize(blob.getSize());\n-                    file.setChanged(ESConstants.FILE_DATE_FORMAT.format(Date.from(Instant.ofEpochMilli(blob.getUpdateTime()))));\n-                    file.setVersion(blob.getGeneration().toString());\n-                    file.setDeleteMarker(false);\n-                    file.setTags(blob.getMetadata());\n-                    final Map<String, String> labels = new HashMap<>();\n-                    labels.put(\"LATEST\", BooleanUtils.toStringTrueFalse(blob.getDeleteTime() == null));\n-                    Optional.ofNullable(blob.getStorageClass())\n-                            .ifPresent(it -> labels.put(ESConstants.STORAGE_CLASS_LABEL, it.name()));\n-                    file.setLabels(labels);\n-                    return file;\n-                });\n+                .filter(blob -> !StringUtils.endsWithIgnoreCase(blob.getName(), DELIMITER))\n+                .map(this::convertToStorageFile);\n     }\n \n-    Stream<DataStorageFile> files(final AbstractDataStorage dataStorage,\n-                                  final TemporaryCredentials credentials) {\n+    @Override\n+    public Stream<DataStorageFile> versionsWithNativeTags(final AbstractDataStorage storage,\n+                                                          final TemporaryCredentials credentials) {\n         final Storage googleStorage = getGoogleStorage(credentials);\n-        final String bucketName = dataStorage.getPath();\n-        final Iterator<Blob> iterator = googleStorage.list(bucketName).iterateAll().iterator();\n+        final String bucketName = storage.getPath();\n+        final Iterator<Blob> iterator = googleStorage.list(bucketName, Storage.BlobListOption.versions(true))\n+                .iterateAll()\n+                .iterator();\n         return StreamUtils.from(iterator)\n                 .filter(blob -> !StringUtils.endsWithIgnoreCase(blob.getName(), ESConstants.HIDDEN_FILE_NAME))\n-                .map(this::convertToStorageFile);\n+                .filter(blob -> !StringUtils.endsWithIgnoreCase(blob.getName(), DELIMITER))\n+                .map(this::convertToStorageFileVersion);\n     }\n \n     private Storage getGoogleStorage(final TemporaryCredentials credentials) {\n@@ -163,13 +130,20 @@ private DataStorageFile convertToStorageFile(final Blob blob) {\n         return file;\n     }\n \n-    IndexRequest createIndexRequest(final DataStorageFile item,\n-                                    final String indexName,\n-                                    final AbstractDataStorage storage,\n-                                    final String region,\n-                                    final PermissionsContainer permissions) {\n-        return new IndexRequest(indexName, DOC_MAPPING_TYPE)\n-                .source(fileMapper.fileToDocument(item, storage, region, permissions,\n-                                                  SearchDocumentType.GS_FILE));\n+    private DataStorageFile convertToStorageFileVersion(final Blob blob) {\n+        final DataStorageFile file = new DataStorageFile();\n+        file.setName(blob.getName());\n+        file.setPath(blob.getName());\n+        file.setSize(blob.getSize());\n+        file.setChanged(ESConstants.FILE_DATE_FORMAT.format(Date.from(Instant.ofEpochMilli(blob.getUpdateTime()))));\n+        file.setVersion(blob.getGeneration().toString());\n+        file.setDeleteMarker(false);\n+        file.setTags(blob.getMetadata());\n+        final Map<String, String> labels = new HashMap<>();\n+        labels.put(\"LATEST\", BooleanUtils.toStringTrueFalse(blob.getDeleteTime() == null));\n+        Optional.ofNullable(blob.getStorageClass())\n+                .ifPresent(it -> labels.put(ESConstants.STORAGE_CLASS_LABEL, it.name()));\n+        file.setLabels(labels);\n+        return file;\n     }\n }"
  },
  {
    "sha": "b8836794bafd7bab7f058109c2931cb34d0b1c08",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/NFSSynchronizer.java",
    "status": "modified",
    "additions": 47,
    "deletions": 39,
    "changes": 86,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/NFSSynchronizer.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/NFSSynchronizer.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/NFSSynchronizer.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -18,19 +18,22 @@\n import com.epam.pipeline.elasticsearchagent.model.PermissionsContainer;\n import com.epam.pipeline.elasticsearchagent.service.ElasticsearchServiceClient;\n import com.epam.pipeline.elasticsearchagent.service.ElasticsearchSynchronizer;\n+import com.epam.pipeline.elasticsearchagent.service.impl.converter.storage.StorageFileMapper;\n import com.epam.pipeline.elasticsearchagent.utils.ESConstants;\n+import com.epam.pipeline.elasticsearchagent.utils.StreamUtils;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n import com.epam.pipeline.entity.search.SearchDocumentType;\n import com.epam.pipeline.vo.EntityPermissionVO;\n+import com.epam.pipeline.vo.data.storage.DataStorageTagLoadBatchRequest;\n+import com.epam.pipeline.vo.data.storage.DataStorageTagLoadRequest;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n import org.elasticsearch.action.index.IndexRequest;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.XContentFactory;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.stereotype.Service;\n-import org.springframework.util.StringUtils;\n \n import java.io.IOException;\n import java.nio.file.Files;\n@@ -39,8 +42,10 @@\n import java.time.LocalDateTime;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import static com.epam.pipeline.elasticsearchagent.utils.ESConstants.DOC_MAPPING_TYPE;\n@@ -61,6 +66,7 @@\n     private final CloudPipelineAPIClient cloudPipelineAPIClient;\n     private final ElasticsearchServiceClient elasticsearchServiceClient;\n     private final ElasticIndexService elasticIndexService;\n+    private final StorageFileMapper fileMapper = new StorageFileMapper();\n \n     public NFSSynchronizer(@Value(\"${sync.nfs-file.index.mapping}\") String indexSettingsPath,\n                            @Value(\"${sync.nfs-file.root.mount.point}\") String rootMountPoint,\n@@ -112,7 +118,7 @@ void createIndexAndDocuments(final AbstractDataStorage dataStorage) {\n             createDocuments(indexName, mountFolder, dataStorage, permissionsContainer);\n \n             elasticsearchServiceClient.createIndexAlias(indexName, alias);\n-            if (StringUtils.hasText(currentIndexName)) {\n+            if (StringUtils.isNotBlank(currentIndexName)) {\n                 elasticsearchServiceClient.deleteIndex(currentIndexName);\n             }\n         } catch (Exception e) {\n@@ -126,23 +132,28 @@ void createIndexAndDocuments(final AbstractDataStorage dataStorage) {\n     private void createDocuments(final String indexName, final Path mountFolder,\n                                  final AbstractDataStorage dataStorage,\n                                  final PermissionsContainer permissionsContainer) {\n-        try (Stream<Path> files = Files.walk(mountFolder);\n-             IndexRequestContainer walker = new IndexRequestContainer(requests ->\n-                     elasticsearchServiceClient.sendRequests(indexName, requests), bulkInsertSize)) {\n-            files\n-                    .filter(file -> file.toFile().isFile())\n-                    .forEach(file -> {\n-                        IndexRequest request = new IndexRequest(indexName, DOC_MAPPING_TYPE)\n-                                .source(dataStorageToDocument(getLastModified(file), getSize(file),\n-                                        getRelativePath(mountFolder, file),\n-                                        dataStorage.getId(), dataStorage.getName(), permissionsContainer));\n-                        walker.add(request);\n-                    });\n+        try (IndexRequestContainer walker = new IndexRequestContainer(requests ->\n+                elasticsearchServiceClient.sendRequests(indexName, requests), bulkInsertSize);\n+             Stream<Path> paths = Files.walk(mountFolder)) {\n+            StreamUtils.chunked(paths.filter(path -> path.toFile().isFile())\n+                    .map(path -> convertToStorageFile(path, mountFolder)))\n+                    .flatMap(files -> filesWithIncorporatedTags(dataStorage, files))\n+                    .map(file -> createIndexRequest(file, indexName, dataStorage, permissionsContainer))\n+                    .forEach(walker::add);\n         } catch (IOException e) {\n             throw new IllegalArgumentException(\"An error occurred during creating document.\", e);\n         }\n     }\n \n+    private DataStorageFile convertToStorageFile(final Path path, final Path mountFolder) {\n+        final DataStorageFile file = new DataStorageFile();\n+        file.setPath(getRelativePath(mountFolder, path));\n+        file.setName(file.getPath());\n+        file.setChanged(getLastModified(path));\n+        file.setSize(getSize(path));\n+        return file;\n+    }\n+\n     private String getRelativePath(final Path mountFolder, final Path path) {\n         return mountFolder.relativize(path).toString();\n     }\n@@ -196,28 +207,25 @@ private String getNfsRootPath(final String path) {\n         }\n     }\n \n-    private XContentBuilder dataStorageToDocument(final String lastModified, final Long size, final String path,\n-                                                  final Long storageId, final String storageName,\n-                                                  final PermissionsContainer permissions) {\n-        try (XContentBuilder jsonBuilder = XContentFactory.jsonBuilder()) {\n-            jsonBuilder\n-                    .startObject()\n-                    .field(\"lastModified\", lastModified)\n-                    .field(\"size\", size)\n-                    .field(\"path\", path)\n-                    .field(DOC_TYPE_FIELD, SearchDocumentType.NFS_FILE.name())\n-                    .field(\"storage_id\", storageId)\n-                    .field(\"storage_name\", storageName);\n-\n-            jsonBuilder.array(\"allowed_users\", permissions.getAllowedUsers().toArray());\n-            jsonBuilder.array(\"denied_users\", permissions.getDeniedUsers().toArray());\n-            jsonBuilder.array(\"allowed_groups\", permissions.getAllowedGroups().toArray());\n-            jsonBuilder.array(\"denied_groups\", permissions.getDeniedGroups().toArray());\n-\n-            jsonBuilder.endObject();\n-            return jsonBuilder;\n-        } catch (IOException e) {\n-            throw new IllegalArgumentException(\"An error occurred while creating document: \", e);\n-        }\n+    private Stream<DataStorageFile> filesWithIncorporatedTags(final AbstractDataStorage dataStorage,\n+                                                              final List<DataStorageFile> files) {\n+        final Map<String, Map<String, String>> tags = cloudPipelineAPIClient.loadDataStorageTagsMap(\n+                dataStorage.getId(),\n+                new DataStorageTagLoadBatchRequest(\n+                        files.stream()\n+                                .map(DataStorageFile::getPath)\n+                                .map(DataStorageTagLoadRequest::new)\n+                                .collect(Collectors.toList())));\n+        return files.stream()\n+                .peek(file -> file.setTags(tags.get(file.getPath())));\n+    }\n+\n+    private IndexRequest createIndexRequest(final DataStorageFile file,\n+                                            final String indexName,\n+                                            final AbstractDataStorage dataStorage,\n+                                            final PermissionsContainer permissionsContainer) {\n+        return new IndexRequest(indexName, DOC_MAPPING_TYPE)\n+                .source(fileMapper.fileToDocument(file, dataStorage, null, permissionsContainer,\n+                        SearchDocumentType.NFS_FILE));\n     }\n }"
  },
  {
    "sha": "1262eec26fca6c12c8cc0e0691f5303e40b1c4e9",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/ObjectStorageIndexImpl.java",
    "status": "modified",
    "additions": 46,
    "deletions": 8,
    "changes": 54,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/ObjectStorageIndexImpl.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/ObjectStorageIndexImpl.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/ObjectStorageIndexImpl.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -20,19 +20,32 @@\n import com.epam.pipeline.elasticsearchagent.service.ElasticsearchServiceClient;\n import com.epam.pipeline.elasticsearchagent.service.ObjectStorageFileManager;\n import com.epam.pipeline.elasticsearchagent.service.ObjectStorageIndex;\n+import com.epam.pipeline.elasticsearchagent.service.impl.converter.storage.StorageFileMapper;\n+import com.epam.pipeline.elasticsearchagent.utils.StreamUtils;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.search.SearchDocumentType;\n import com.epam.pipeline.vo.EntityPermissionVO;\n+import com.epam.pipeline.vo.data.storage.DataStorageTagLoadBatchRequest;\n+import com.epam.pipeline.vo.data.storage.DataStorageTagLoadRequest;\n+import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n+import org.elasticsearch.action.index.IndexRequest;\n import org.springframework.util.StringUtils;\n \n import java.time.LocalDateTime;\n import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n+import static com.epam.pipeline.elasticsearchagent.utils.ESConstants.DOC_MAPPING_TYPE;\n import static com.epam.pipeline.utils.PasswordGenerator.generateRandomString;\n \n @RequiredArgsConstructor\n@@ -46,7 +59,11 @@\n     private final String indexPrefix;\n     private final String indexMappingFile;\n     private final int bulkInsertSize;\n+    @Getter\n     private final DataStorageType storageType;\n+    @Getter\n+    private final SearchDocumentType documentType;\n+    private final StorageFileMapper fileMapper = new StorageFileMapper();\n \n     @Override\n     public void synchronize(final LocalDateTime lastSyncTime, final LocalDateTime syncStart) {\n@@ -57,11 +74,6 @@ public void synchronize(final LocalDateTime lastSyncTime, final LocalDateTime sy\n                 .forEach(this::indexStorage);\n     }\n \n-    @Override\n-    public DataStorageType getStorageType() {\n-        return storageType;\n-    }\n-\n     @Override\n     @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void indexStorage(final AbstractDataStorage dataStorage) {\n@@ -77,9 +89,12 @@ public void indexStorage(final AbstractDataStorage dataStorage) {\n             final String currentIndexName = elasticsearchServiceClient.getIndexNameByAlias(alias);\n             elasticIndexService.createIndexIfNotExist(indexName, indexMappingFile);\n             final TemporaryCredentials credentials = getTemporaryCredentials(dataStorage);\n-            try(IndexRequestContainer requestContainer = getRequestContainer(indexName, bulkInsertSize)) {\n-                fileManager.listAndIndexFiles(indexName, dataStorage, credentials,\n-                        permissionsContainer, requestContainer);\n+            try (IndexRequestContainer requestContainer = getRequestContainer(indexName, bulkInsertSize)) {\n+                StreamUtils.chunked(fileManager.files(dataStorage, credentials))\n+                        .flatMap(files -> filesWithIncorporatedTags(dataStorage, files))\n+                        .map(file -> createIndexRequest(file, dataStorage, permissionsContainer, indexName, \n+                                credentials))\n+                        .forEach(requestContainer::add);\n             }\n \n             elasticsearchServiceClient.createIndexAlias(indexName, alias);\n@@ -107,4 +122,27 @@ private TemporaryCredentials getTemporaryCredentials(final AbstractDataStorage d\n         return cloudPipelineAPIClient\n                 .generateTemporaryCredentials(Collections.singletonList(action));\n     }\n+\n+    private Stream<DataStorageFile> filesWithIncorporatedTags(final AbstractDataStorage dataStorage,\n+                                                              final List<DataStorageFile> files) {\n+        final Map<String, Map<String, String>> tags = cloudPipelineAPIClient.loadDataStorageTagsMap(\n+                dataStorage.getId(),\n+                new DataStorageTagLoadBatchRequest(files.stream()\n+                        .map(DataStorageFile::getPath)\n+                        .map(DataStorageTagLoadRequest::new)\n+                        .collect(Collectors.toList())));\n+        return files.stream()\n+                .peek(file -> file.setTags(tags.get(file.getPath())));\n+    }\n+\n+    private IndexRequest createIndexRequest(final DataStorageFile file,\n+                                            final AbstractDataStorage dataStorage,\n+                                            final PermissionsContainer permissionsContainer,\n+                                            final String indexName,\n+                                            final TemporaryCredentials credentials) {\n+        return new IndexRequest(indexName, DOC_MAPPING_TYPE)\n+                .source(fileMapper.fileToDocument(file, dataStorage, credentials.getRegion(),\n+                        permissionsContainer,\n+                        getDocumentType()));\n+    }\n }"
  },
  {
    "sha": "ace5619286277b08a79588b18fe75056616afd33",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/S3FileManager.java",
    "status": "modified",
    "additions": 24,
    "deletions": 65,
    "changes": 89,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/S3FileManager.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/S3FileManager.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/S3FileManager.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -28,23 +28,18 @@\n import com.amazonaws.services.s3.model.S3VersionSummary;\n import com.amazonaws.services.s3.model.Tag;\n import com.amazonaws.services.s3.model.VersionListing;\n-import com.epam.pipeline.elasticsearchagent.model.PermissionsContainer;\n import com.epam.pipeline.elasticsearchagent.service.ObjectStorageFileManager;\n-import com.epam.pipeline.elasticsearchagent.service.impl.converter.storage.StorageFileMapper;\n import com.epam.pipeline.elasticsearchagent.utils.ESConstants;\n import com.epam.pipeline.elasticsearchagent.utils.StreamUtils;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageFile;\n import com.epam.pipeline.entity.datastorage.DataStorageType;\n import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n-import com.epam.pipeline.entity.search.SearchDocumentType;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.elasticsearch.action.index.IndexRequest;\n \n import java.util.Collections;\n import java.util.HashMap;\n@@ -57,15 +52,11 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static com.epam.pipeline.elasticsearchagent.utils.ESConstants.DOC_MAPPING_TYPE;\n-\n @RequiredArgsConstructor\n public class S3FileManager implements ObjectStorageFileManager {\n \n     private static final String DELIMITER = \"/\";\n \n-    private final StorageFileMapper fileMapper = new StorageFileMapper();\n-\n     @Getter\n     private final DataStorageType type = DataStorageType.S3;\n \n@@ -75,33 +66,21 @@\n     }\n \n     @Override\n-    public Stream<DataStorageFile> listVersionsWithNativeTags(final AbstractDataStorage dataStorage,\n-                                                              final TemporaryCredentials credentials) {\n+    public Stream<DataStorageFile> files(final AbstractDataStorage storage,\n+                                         final TemporaryCredentials credentials) {\n         final AmazonS3 client = getS3Client(credentials);\n-        return versions(client, dataStorage)\n-                .filter(file -> !file.getDeleteMarker())\n-                .peek(file -> file.setTags(getNativeTags(client, dataStorage, file)));\n-    }\n-\n-    private Map<String, String> getNativeTags(final AmazonS3 client,\n-                                              final AbstractDataStorage dataStorage,\n-                                              final DataStorageFile file) {\n-        final GetObjectTaggingResult tagging = client.getObjectTagging(new GetObjectTaggingRequest(\n-                dataStorage.getRoot(), file.getPath(), file.getVersion()));\n-        return CollectionUtils.emptyIfNull(tagging.getTagSet())\n-                .stream()\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toMap(Tag::getKey, Tag::getValue));\n+        return StreamUtils.from(new S3PageIterator(client, storage.getPath(), \"\"))\n+                .flatMap(List::stream);\n     }\n \n     @Override\n-    public void listAndIndexFiles(final String indexName,\n-                                  final AbstractDataStorage dataStorage,\n-                                  final TemporaryCredentials credentials,\n-                                  final PermissionsContainer permissions,\n-                                  final IndexRequestContainer requestContainer) {\n-        listFiles(getS3Client(credentials), indexName, dataStorage, credentials,\n-                permissions, requestContainer);\n+    public Stream<DataStorageFile> versionsWithNativeTags(final AbstractDataStorage storage,\n+                                                          final TemporaryCredentials credentials) {\n+        final AmazonS3 client = getS3Client(credentials);\n+        return StreamUtils.from(new S3VersionPageIterator(client, storage.getPath(), \"\"))\n+                .flatMap(List::stream)\n+                .filter(file -> !file.getDeleteMarker())\n+                .peek(file -> file.setTags(getNativeTags(client, storage, file)));\n     }\n \n     private AmazonS3 getS3Client(final TemporaryCredentials credentials) {\n@@ -114,36 +93,15 @@ private AmazonS3 getS3Client(final TemporaryCredentials credentials) {\n                 .build();\n     }\n \n-    private void listFiles(final AmazonS3 client,\n-                           final String indexName,\n-                           final AbstractDataStorage dataStorage,\n-                           final TemporaryCredentials credentials,\n-                           final PermissionsContainer permissions,\n-                           final IndexRequestContainer requestContainer) {\n-        files(client, dataStorage)\n-                .map(file -> createIndexRequest(file, indexName, dataStorage, credentials, permissions))\n-                .forEach(requestContainer::add);\n-    }\n-\n-    private Stream<DataStorageFile> versions(final AmazonS3 client, final AbstractDataStorage dataStorage) {\n-        return StreamUtils.from(new S3VersionPageIterator(client, dataStorage.getPath(), \"\"))\n-                .flatMap(List::stream);\n-    }\n-\n-    private Stream<DataStorageFile> files(final AmazonS3 client,\n-                                          final AbstractDataStorage dataStorage) {\n-        return StreamUtils.from(new S3PageIterator(client, dataStorage.getPath(), \"\"))\n-                .flatMap(List::stream);\n-    }\n-\n-    private IndexRequest createIndexRequest(final DataStorageFile item,\n-                                            final String indexName,\n-                                            final AbstractDataStorage dataStorage,\n-                                            final TemporaryCredentials credentials,\n-                                            final PermissionsContainer permissions) {\n-        return new IndexRequest(indexName, DOC_MAPPING_TYPE)\n-                .source(fileMapper.fileToDocument(item, dataStorage, credentials.getRegion(), permissions,\n-                        SearchDocumentType.S3_FILE));\n+    private Map<String, String> getNativeTags(final AmazonS3 client,\n+                                              final AbstractDataStorage dataStorage,\n+                                              final DataStorageFile file) {\n+        final GetObjectTaggingResult tagging = client.getObjectTagging(new GetObjectTaggingRequest(\n+                dataStorage.getRoot(), file.getPath(), file.getVersion()));\n+        return CollectionUtils.emptyIfNull(tagging.getTagSet())\n+                .stream()\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toMap(Tag::getKey, Tag::getValue));\n     }\n \n     @RequiredArgsConstructor\n@@ -170,7 +128,8 @@ public boolean hasNext() {\n             continuationToken = objectsListing.isTruncated() ? objectsListing.getNextContinuationToken(): null;\n             items = objectsListing.getObjectSummaries()\n                     .stream()\n-                    .filter(file -> !StringUtils.endsWithIgnoreCase(file.getKey(), ESConstants.HIDDEN_FILE_NAME.toLowerCase()))\n+                    .filter(file -> !StringUtils.endsWithIgnoreCase(file.getKey(), \n+                            ESConstants.HIDDEN_FILE_NAME.toLowerCase()))\n                     .filter(file -> !StringUtils.endsWithIgnoreCase(file.getKey(), S3FileManager.DELIMITER))\n                     .map(this::convertToStorageFile)\n                     .collect(Collectors.toList());\n@@ -193,7 +152,6 @@ private DataStorageFile convertToStorageFile(final S3ObjectSummary s3ObjectSumma\n     }\n \n     @RequiredArgsConstructor\n-    @Slf4j\n     private static class S3VersionPageIterator implements Iterator<List<DataStorageFile>> {\n \n         private final AmazonS3 client;\n@@ -227,7 +185,8 @@ public boolean hasNext() {\n             }\n             items = versionListing.getVersionSummaries()\n                     .stream()\n-                    .filter(file -> !StringUtils.endsWithIgnoreCase(file.getKey(), ESConstants.HIDDEN_FILE_NAME.toLowerCase()))\n+                    .filter(file -> !StringUtils.endsWithIgnoreCase(file.getKey(), \n+                            ESConstants.HIDDEN_FILE_NAME.toLowerCase()))\n                     .filter(file -> !StringUtils.endsWithIgnoreCase(file.getKey(), S3FileManager.DELIMITER))\n                     .map(this::convertToStorageFile)\n                     .collect(Collectors.toList());"
  },
  {
    "sha": "986915c2a0e5c0429b9aa562aa5556e91991a24f",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/converter/storage/StorageFileMapper.java",
    "status": "modified",
    "additions": 16,
    "deletions": 10,
    "changes": 26,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/converter/storage/StorageFileMapper.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/converter/storage/StorageFileMapper.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/service/impl/converter/storage/StorageFileMapper.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -21,10 +21,12 @@\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageFile;\n import com.epam.pipeline.entity.search.SearchDocumentType;\n+import org.apache.commons.collections4.MapUtils;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentFactory;\n \n import java.io.IOException;\n+import java.util.Map;\n \n import static com.epam.pipeline.elasticsearchagent.service.ElasticsearchSynchronizer.DOC_TYPE_FIELD;\n \n@@ -36,24 +38,28 @@ public XContentBuilder fileToDocument(final DataStorageFile dataStorageFile,\n                                           final PermissionsContainer permissions,\n                                           final SearchDocumentType type) {\n         try (XContentBuilder jsonBuilder = XContentFactory.jsonBuilder()) {\n+            final Map<String, String> tags = MapUtils.emptyIfNull(dataStorageFile.getTags());\n             jsonBuilder\n                     .startObject()\n                     .field(\"lastModified\", dataStorageFile.getChanged())\n                     .field(\"size\", dataStorageFile.getSize())\n                     .field(\"path\", dataStorageFile.getPath())\n-                    .field(\"tags\", dataStorageFile.getTags())\n+                    .field(\"ownerUserName\", tags.get(\"CP_OWNER\"))\n                     .field(\"storage_id\", dataStorage.getId())\n                     .field(\"storage_name\", dataStorage.getName())\n                     .field(\"storage_region\", region)\n-                    .field(DOC_TYPE_FIELD, type.name());\n-\n-            jsonBuilder.array(\"allowed_users\", permissions.getAllowedUsers().toArray());\n-            jsonBuilder.array(\"denied_users\", permissions.getDeniedUsers().toArray());\n-            jsonBuilder.array(\"allowed_groups\", permissions.getAllowedGroups().toArray());\n-            jsonBuilder.array(\"denied_groups\", permissions.getDeniedGroups().toArray());\n-\n-            jsonBuilder.endObject();\n-            return jsonBuilder;\n+                    .field(DOC_TYPE_FIELD, type.name())\n+                    .array(\"metadata\", tags.entrySet().stream()\n+                            .map(entry -> entry.getKey() + \" \" + entry.getValue())\n+                            .toArray(String[]::new))\n+                    .array(\"allowed_users\", permissions.getAllowedUsers().toArray())\n+                    .array(\"denied_users\", permissions.getDeniedUsers().toArray())\n+                    .array(\"allowed_groups\", permissions.getAllowedGroups().toArray())\n+                    .array(\"denied_groups\", permissions.getDeniedGroups().toArray());\n+            for (final Map.Entry<String, String> entry : tags.entrySet()) {\n+                jsonBuilder.field(entry.getKey(), entry.getValue());\n+            }\n+            return jsonBuilder.endObject();\n         } catch (IOException e) {\n             throw new AmazonS3Exception(\"An error occurred while creating document: \", e);\n         }"
  },
  {
    "sha": "4e188f2d88babbc0eb1b864eeaea76f03880ad5a",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/ChunkedIterator.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/ChunkedIterator.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/ChunkedIterator.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/ChunkedIterator.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -0,0 +1,32 @@\n+package com.epam.pipeline.elasticsearchagent.utils;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ChunkedIterator<T> implements Iterator<List<T>> {\n+\n+    private final Iterator<T> iterator;\n+    private final int chunkSize;\n+    private final List<T> chunk;\n+\n+    public ChunkedIterator(final Iterator<T> iterator, final int chunkSize) {\n+        this.iterator = iterator;\n+        this.chunkSize = chunkSize;\n+        this.chunk = new ArrayList<>(chunkSize);\n+    }\n+    \n+    @Override\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    @Override\n+    public List<T> next() {\n+        chunk.clear();\n+        while (iterator.hasNext() && chunk.size() < chunkSize) {\n+            chunk.add(iterator.next());\n+        }\n+        return chunk;\n+    }\n+}"
  },
  {
    "sha": "a75eade73430d7717e71a009e5dcfa5a8a6c2c9c",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/IteratorUtils.java",
    "status": "modified",
    "additions": 13,
    "deletions": 3,
    "changes": 16,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/IteratorUtils.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/IteratorUtils.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/IteratorUtils.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -5,13 +5,23 @@\n \n public final class IteratorUtils {\n \n+    private static final int DEFAULT_CHUNK_SIZE = 100;\n+\n     private IteratorUtils() {}\n \n     public static <T> Iterator<List<T>> windowed(final Iterator<List<T>> iterator) {\n-        return windowed(iterator, 100);\n+        return windowed(iterator, DEFAULT_CHUNK_SIZE);\n+    }\n+\n+    public static <T> Iterator<List<T>> windowed(final Iterator<List<T>> iterator, final int windowSize) {\n+        return new WindowIterator<>(iterator, windowSize);\n+    }\n+\n+    public static <T> Iterator<List<T>> chunked(final Iterator<T> iterator) {\n+        return chunked(iterator, DEFAULT_CHUNK_SIZE);\n     }\n \n-    public static <T> Iterator<List<T>> windowed(final Iterator<List<T>> iterator, final int chunkSize) {\n-        return new WindowIterator<>(iterator, chunkSize);\n+    public static <T> Iterator<List<T>> chunked(final Iterator<T> iterator, final int chunkSize) {\n+        return new ChunkedIterator<>(iterator, chunkSize);\n     }\n }"
  },
  {
    "sha": "f0a6ae0eb77d8a6ee6164a5d092e81f230a2e9c2",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/StreamUtils.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/StreamUtils.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/StreamUtils.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/StreamUtils.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -9,6 +9,8 @@\n \n public final class StreamUtils {\n \n+    private static final int DEFAULT_CHUNK_SIZE = 100;\n+\n     private StreamUtils() {}\n \n     public static <T> Stream<T> from(final Iterator<T> iterator) {\n@@ -17,10 +19,18 @@ private StreamUtils() {}\n     }\n \n     public static <T> Stream<List<T>> windowed(final Stream<List<T>> stream) {\n-        return windowed(stream, 100);\n+        return windowed(stream, DEFAULT_CHUNK_SIZE);\n     }\n \n     public static <T> Stream<List<T>> windowed(final Stream<List<T>> stream, final int windowSize) {\n         return from(IteratorUtils.windowed(stream.iterator(), windowSize));\n     }\n+\n+    public static <T> Stream<List<T>> chunked(final Stream<T> stream) {\n+        return chunked(stream, DEFAULT_CHUNK_SIZE);\n+    }\n+\n+    public static <T> Stream<List<T>> chunked(final Stream<T> stream, final int chunkSize) {\n+        return from(IteratorUtils.chunked(stream.iterator(), chunkSize));\n+    }\n }"
  },
  {
    "sha": "2afc1ef9f5690b04391c0e9c9629fd509dd165d7",
    "filename": "elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/WindowIterator.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/WindowIterator.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/WindowIterator.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/java/com/epam/pipeline/elasticsearchagent/utils/WindowIterator.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -6,14 +6,16 @@\n \n public class WindowIterator<T> implements Iterator<List<T>> {\n \n+    private static final double DEFAULT_WINDOW_SIZE_MULTIPLIER = 1.5;\n+    \n     private final Iterator<List<T>> iterator;\n     private final int windowSize;\n     private final List<T> window;\n \n     public WindowIterator(final Iterator<List<T>> iterator, final int windowSize) {\n         this.iterator = iterator;\n         this.windowSize = windowSize;\n-        this.window = new ArrayList<>((int) (windowSize * 1.5));\n+        this.window = new ArrayList<>((int) (windowSize * DEFAULT_WINDOW_SIZE_MULTIPLIER));\n     }\n \n     @Override"
  },
  {
    "sha": "8b804b75bc46eccc15c9a058271671ba023d6cea",
    "filename": "elasticsearch-agent/src/main/resources/templates/storage_file.json",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/resources/templates/storage_file.json",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/main/resources/templates/storage_file.json",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/main/resources/templates/storage_file.json?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -16,14 +16,30 @@\n         \"storage_id\": { \"type\": \"long\", \"copy_to\": \"parentId\"},\n         \"storage_name\": { \"type\": \"text\" },\n         \"storage_region\": { \"type\": \"keyword\" },\n-        \"tags\": { \"type\": \"text\" },\n+        \"ownerUserName\": { \"type\": \"keyword\" },\n+        \"metadata\": { \"type\": \"text\" },\n         \"allowed_users\": { \"type\": \"keyword\" },\n         \"denied_users\": { \"type\": \"keyword\" },\n         \"allowed_groups\": { \"type\": \"keyword\" },\n         \"denied_groups\": { \"type\": \"keyword\" }\n       }\n     }\n   },\n+  \"dynamic_templates\": [\n+    {\n+      \"metadata\": {\n+        \"match_mapping_type\": \"string\",\n+        \"mapping\": {\n+          \"type\": \"text\",\n+          \"fields\": {\n+            \"keyword\": {\n+              \"type\":  \"keyword\"\n+            }\n+          }\n+        }\n+      }\n+    }\n+  ],\n   \"settings\": {\n     \"index\": {\n       \"number_of_shards\" : 1,"
  },
  {
    "sha": "682829cd484234d06404b2e2bfc4eb8a0daec23e",
    "filename": "elasticsearch-agent/src/test/java/com/epam/pipeline/elasticsearchagent/service/impl/GsBucketFileManagerTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 145,
    "changes": 145,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/6595cea8616216085f8efd01aafb5abcd444ccc1/elasticsearch-agent/src/test/java/com/epam/pipeline/elasticsearchagent/service/impl/GsBucketFileManagerTest.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/6595cea8616216085f8efd01aafb5abcd444ccc1/elasticsearch-agent/src/test/java/com/epam/pipeline/elasticsearchagent/service/impl/GsBucketFileManagerTest.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/test/java/com/epam/pipeline/elasticsearchagent/service/impl/GsBucketFileManagerTest.java?ref=6595cea8616216085f8efd01aafb5abcd444ccc1",
    "patch": "@@ -1,145 +0,0 @@\n-/*\n- * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.epam.pipeline.elasticsearchagent.service.impl;\n-\n-import com.epam.pipeline.elasticsearchagent.model.PermissionsContainer;\n-import com.epam.pipeline.elasticsearchagent.utils.ESConstants;\n-import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n-import com.epam.pipeline.entity.datastorage.DataStorageFile;\n-import com.epam.pipeline.entity.datastorage.GSBucketStorage;\n-import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n-import com.google.cloud.storage.Blob;\n-import com.google.cloud.storage.StorageClass;\n-import org.apache.commons.lang3.StringUtils;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Mock;\n-import org.mockito.Mockito;\n-import org.mockito.Spy;\n-import org.mockito.junit.MockitoJUnitRunner;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.internal.verification.VerificationModeFactory.times;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.hasEntry;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class GsBucketFileManagerTest {\n-    private static final String INDEX_NAME = \"testIndex\";\n-    private static final String TEST_BLOB_NAME_1 = \"1\";\n-    private static final String TEST_BLOB_NAME_2 = \"2\";\n-\n-    @Spy\n-    private final GsBucketFileManager manager = new GsBucketFileManager();\n-    @Mock\n-    private IndexRequestContainer requestContainer;\n-\n-    private final AbstractDataStorage dataStorage = new GSBucketStorage();\n-    private final TemporaryCredentials temporaryCredentials = new TemporaryCredentials();\n-    private final PermissionsContainer permissionsContainer = new PermissionsContainer();\n-\n-    @Test\n-    public void shouldAddZeroFilesToRequestContainer() {\n-        final List<Blob> files = Collections.emptyList();\n-        verifyRequestContainerState(files, 0);\n-    }\n-\n-    @Test\n-    public void shouldAddTwoFilesToRequestContainer() {\n-        final List<Blob> files = Arrays.asList(createBlob(TEST_BLOB_NAME_1), createBlob(TEST_BLOB_NAME_2));\n-        verifyRequestContainerState(files, 2);\n-    }\n-\n-    @Test\n-    public void shouldNotAddHiddenFilesToRequestContainer() {\n-        final List<Blob> files = Arrays.asList(createBlob(TEST_BLOB_NAME_1), createHiddenBlob(TEST_BLOB_NAME_2));\n-        verifyRequestContainerState(files, 1);\n-    }\n-\n-    private void verifyRequestContainerState(final List<Blob> files, final int numberOfInvocation) {\n-        setUpReturnValues(files);\n-        manager.listAndIndexFiles(INDEX_NAME,\n-                                  dataStorage,\n-                                  temporaryCredentials,\n-                                  permissionsContainer,\n-                                  requestContainer);\n-        verifyNumberOfInsertions(numberOfInvocation);\n-        verifyBlobMapping(files, numberOfInvocation);\n-    }\n-\n-    private void setUpReturnValues(final List<Blob> files) {\n-        Mockito.doAnswer(i -> files.stream())\n-               .when(manager)\n-               .files(dataStorage, temporaryCredentials);\n-    }\n-\n-    private void verifyBlobMapping(final List<Blob> files, final int numberOfInvocation) {\n-        final List<DataStorageFile> capturedValues = captureDataStorageFilesIndexing(numberOfInvocation);\n-        final Map<String, DataStorageFile> dsFiles =\n-                capturedValues.stream()\n-                              .collect(Collectors.toMap(DataStorageFile::getName,\n-                                                        Function.identity()));\n-        files.stream().filter(this::isNotHiddenBlob)\n-             .forEach(blob -> assertBlobToFile(blob, dsFiles.get(blob.getName())));\n-    }\n-\n-    private boolean isNotHiddenBlob(final Blob blob) {\n-        return !StringUtils.endsWithIgnoreCase(blob.getName(), ESConstants.HIDDEN_FILE_NAME);\n-    }\n-\n-    private List<DataStorageFile> captureDataStorageFilesIndexing(final int numberOfInvocation) {\n-        final ArgumentCaptor<DataStorageFile> captor = ArgumentCaptor.forClass(DataStorageFile.class);\n-        verify(manager, times(numberOfInvocation))\n-                .createIndexRequest(captor.capture(), any(), any(), any(), any());\n-        return captor.getAllValues();\n-    }\n-\n-    private void assertBlobToFile(final Blob blob, final DataStorageFile file) {\n-        assertEquals(blob.getName(), file.getName());\n-        assertEquals(blob.getName(), file.getPath());\n-        assertEquals(blob.getSize(), file.getSize());\n-        assertThat(file.getLabels(),\n-                   hasEntry(ESConstants.STORAGE_CLASS_LABEL, blob.getStorageClass().name()));\n-    }\n-\n-    private void verifyNumberOfInsertions(final int numberOfInvocation) {\n-        verify(requestContainer, times(numberOfInvocation)).add(any());\n-    }\n-\n-    private Blob createBlob(final String name) {\n-        final Blob result = Mockito.mock(Blob.class);\n-        final Long fileSize = 100L;\n-        final StorageClass storageClass = StorageClass.REGIONAL;\n-        Mockito.doReturn(name).when(result).getName();\n-        Mockito.doReturn(fileSize).when(result).getSize();\n-        Mockito.doReturn(storageClass).when(result).getStorageClass();\n-        return result;\n-    }\n-\n-    private Blob createHiddenBlob(final String name) {\n-        return createBlob(name + ESConstants.HIDDEN_FILE_NAME.toLowerCase());\n-    }\n-}"
  },
  {
    "sha": "ac5b0c76d4f9fafb7b82b6db7c89f3eb853c60ef",
    "filename": "elasticsearch-agent/src/test/java/com/epam/pipeline/elasticsearchagent/service/impl/ObjectStorageIndexTest.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/test/java/com/epam/pipeline/elasticsearchagent/service/impl/ObjectStorageIndexTest.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/950162d64db515d66c3999e9468681fb8bceae6b/elasticsearch-agent/src/test/java/com/epam/pipeline/elasticsearchagent/service/impl/ObjectStorageIndexTest.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/elasticsearch-agent/src/test/java/com/epam/pipeline/elasticsearchagent/service/impl/ObjectStorageIndexTest.java?ref=950162d64db515d66c3999e9468681fb8bceae6b",
    "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.elasticsearchagent.service.impl;\n+\n+import com.epam.pipeline.elasticsearchagent.service.ElasticsearchServiceClient;\n+import com.epam.pipeline.elasticsearchagent.service.ObjectStorageFileManager;\n+import com.epam.pipeline.elasticsearchagent.service.ObjectStorageIndex;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageType;\n+import com.epam.pipeline.entity.datastorage.GSBucketStorage;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.search.SearchDocumentType;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.Spy;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.elasticsearchagent.TestConstants.TEST_NAME;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ObjectStorageIndexTest {\n+    \n+    private static final String TEST_BLOB_NAME_1 = \"1\";\n+    private static final String TEST_BLOB_NAME_2 = \"2\";\n+\n+    private final AbstractDataStorage dataStorage = new GSBucketStorage();\n+    private final TemporaryCredentials temporaryCredentials = new TemporaryCredentials();\n+    \n+    @Mock\n+    private IndexRequestContainer requestContainer;\n+    @Mock\n+    private ObjectStorageFileManager fileManager;\n+    @Mock\n+    private CloudPipelineAPIClient cloudPipelineAPIClient;\n+    @Mock\n+    private ElasticsearchServiceClient elasticsearchServiceClient;\n+    @Mock\n+    private ElasticIndexService elasticIndexService;\n+    \n+    @Spy\n+    private final ObjectStorageIndex objectStorageIndex = new ObjectStorageIndexImpl(\n+            cloudPipelineAPIClient, \n+            elasticsearchServiceClient,\n+            elasticIndexService,\n+            fileManager,\n+            TEST_NAME,\n+            TEST_NAME,\n+            1000,\n+            DataStorageType.GS,\n+            SearchDocumentType.GS_FILE);\n+\n+    @Test\n+    public void shouldAddZeroFilesToRequestContainer() {\n+        final List<DataStorageFile> files = Collections.emptyList();\n+        verifyRequestContainerState(files, 0);\n+    }\n+\n+    @Test\n+    public void shouldAddTwoFilesToRequestContainer() {\n+        final List<DataStorageFile> files = Arrays.asList(createFile(TEST_BLOB_NAME_1), createFile(TEST_BLOB_NAME_2));\n+        verifyRequestContainerState(files, 2);\n+    }\n+\n+    private void verifyRequestContainerState(final List<DataStorageFile> files, final int numberOfInvocation) {\n+        setUpReturnValues(files);\n+        objectStorageIndex.indexStorage(dataStorage);\n+        verifyNumberOfInsertions(numberOfInvocation);\n+    }\n+\n+    private void setUpReturnValues(final List<DataStorageFile> files) {\n+        Mockito.doAnswer(i -> files.stream())\n+               .when(fileManager)\n+               .files(dataStorage, temporaryCredentials);\n+    }\n+\n+    private void verifyNumberOfInsertions(final int numberOfInvocation) {\n+        verify(requestContainer, times(numberOfInvocation)).add(any());\n+    }\n+\n+    private DataStorageFile createFile(final String name) {\n+        final DataStorageFile file = new DataStorageFile();\n+        file.setName(name);\n+        file.setPath(name);\n+        file.setSize(1L);\n+        return file;\n+    }\n+}"
  }
]
