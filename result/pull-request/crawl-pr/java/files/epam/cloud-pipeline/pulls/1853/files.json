[
  {
    "sha": "1a93ae24d7fef2c514f6cf2b7f458758fedbd59a",
    "filename": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchLimitMountsTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/c0de37041fdb68ace0fd5f50a2557ddd45b79ee5/e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchLimitMountsTest.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/c0de37041fdb68ace0fd5f50a2557ddd45b79ee5/e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchLimitMountsTest.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchLimitMountsTest.java?ref=c0de37041fdb68ace0fd5f50a2557ddd45b79ee5",
    "patch": "@@ -68,6 +68,7 @@\n     private String storage1 = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n     private String storage2 = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n     private String storage3 = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n+    private String storage4 = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n     private String storageSensitive = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n     private final String registry = C.DEFAULT_REGISTRY;\n     private final String tool = C.TESTING_TOOL_NAME;\n@@ -350,6 +351,47 @@ public void checkWarningInCaseOfOOMriskDueToStorageMountsNumber() {\n         }\n     }\n \n+    @Test(priority = 4)\n+    @TestCase(value = {\"1590\"})\n+    public void allowToLaunchRunsWithoutMounts() {\n+        tools()\n+                .perform(registry, group, tool, tool ->\n+                        tool.settings()\n+                                .doNotMountStoragesSelect(false)\n+                                .save());\n+        library()\n+                .createStorage(storage4);\n+        tools()\n+                .perform(registry, group, tool, ToolTab::runWithCustomSettings)\n+                .expandTab(ADVANCED_PANEL)\n+                .ensure(LIMIT_MOUNTS, text(\"All available non-sensitive storages\"))\n+                .doNotMountStoragesSelect(true)\n+                .ensureNotVisible(LIMIT_MOUNTS)\n+                .doNotMountStoragesSelect(false)\n+                .ensureVisible(LIMIT_MOUNTS)\n+                .ensure(LIMIT_MOUNTS, text(\"All available non-sensitive storages\"))\n+                .selectDataStoragesToLimitMounts()\n+                .click(CLEAR_SELECTION)\n+                .ensureAll(enabled, SELECT_ALL, SELECT_ALL_NON_SENSITIVE, OK)\n+                .ok()\n+                .ensureNotVisible(LIMIT_MOUNTS)\n+                .assertDoNotMountStoragesIsChecked()\n+                .launch(this)\n+                .showLog(getLastRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_LIMIT_MOUNTS\", \"None\"), exist)\n+                .waitForSshLink()\n+                .waitForTask(mountDataStoragesTask)\n+                .click(taskWithName(mountDataStoragesTask))\n+                .ensure(log(), containsMessages(\n+                        \"Run is launched with mount limits (None) Only 0 storages will be mounted\",\n+                        \"No remote storages are available or CP_CAP_LIMIT_MOUNTS configured to none\"))\n+                .ssh(shell -> shell\n+                        .execute(\"ls -l cloud-data/\")\n+                        .assertOutputContains(\"total 0\")\n+                        .close());\n+    }\n+\n     private String mountStorageMessage(String storage) {\n         return format(\"%s mounted to /cloud-data/%s\", storage.toLowerCase(), storage.toLowerCase());\n     }"
  },
  {
    "sha": "b1673c3e0f48b4d7192f4730850e1d0bb9242b42",
    "filename": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineRunFormAO.java",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/c0de37041fdb68ace0fd5f50a2557ddd45b79ee5/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineRunFormAO.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/c0de37041fdb68ace0fd5f50a2557ddd45b79ee5/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineRunFormAO.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineRunFormAO.java?ref=c0de37041fdb68ace0fd5f50a2557ddd45b79ee5",
    "patch": "@@ -71,7 +71,8 @@\n             entry(ADD_SYSTEM_PARAMETER, $(byId(\"add-system-parameter-button\"))),\n             entry(RUN_CAPABILITIES, context().find(byXpath(\"//*[contains(text(), 'Run capabilities')]\")).closest(\".ant-row\").find(by(\"role\", \"combobox\"))),\n             entry(LIMIT_MOUNTS, context().find(byClassName(\"limit-mounts-input__limit-mounts-input\"))),\n-            entry(FRIENDLY_URL, context().find(byId(\"advanced.prettyUrl\")))\n+            entry(FRIENDLY_URL, context().find(byId(\"advanced.prettyUrl\"))),\n+            entry(DO_NOT_MOUNT_STORAGES, $(byXpath(\".//span[.='Do not mount storages']/preceding-sibling::span\")))\n     );\n     private final String pipelineName;\n     private int parameterIndex = 0;\n@@ -397,6 +398,19 @@ public int minNodeTypeRAM() {\n                 .min().getAsInt();\n     }\n \n+    public PipelineRunFormAO doNotMountStoragesSelect (boolean isSelected) {\n+        if ((!get(DO_NOT_MOUNT_STORAGES).has(cssClass(\"ant-checkbox-checked\")) && isSelected) ||\n+                (get(DO_NOT_MOUNT_STORAGES).has(cssClass(\"ant-checkbox-checked\")) && !isSelected))    {\n+            get(DO_NOT_MOUNT_STORAGES).click();\n+        }\n+        return this;\n+    }\n+\n+    public PipelineRunFormAO assertDoNotMountStoragesIsChecked() {\n+        get(DO_NOT_MOUNT_STORAGES).shouldHave(cssClass(\"ant-checkbox-checked\"));\n+        return this;\n+    }\n+\n     @Override\n     public Map<Primitive, SelenideElement> elements() {\n         return elements;"
  },
  {
    "sha": "7438e319b489c242ecc0eb3b504dd4ff0b0a699c",
    "filename": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/Primitive.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/c0de37041fdb68ace0fd5f50a2557ddd45b79ee5/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/Primitive.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/c0de37041fdb68ace0fd5f50a2557ddd45b79ee5/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/Primitive.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/Primitive.java?ref=c0de37041fdb68ace0fd5f50a2557ddd45b79ee5",
    "patch": "@@ -280,5 +280,6 @@\n     SERVICES,\n     NODE_IMAGE,\n     GIT_REPOSITORY,\n-    ADD_INSTANCE\n+    ADD_INSTANCE,\n+    DO_NOT_MOUNT_STORAGES\n }"
  },
  {
    "sha": "61cb566e935b47075c2b0dca53365d369eee7142",
    "filename": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/ToolSettings.java",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/epam/cloud-pipeline/blob/c0de37041fdb68ace0fd5f50a2557ddd45b79ee5/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/ToolSettings.java",
    "raw_url": "https://github.com/epam/cloud-pipeline/raw/c0de37041fdb68ace0fd5f50a2557ddd45b79ee5/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/ToolSettings.java",
    "contents_url": "https://api.github.com/repos/epam/cloud-pipeline/contents/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/ToolSettings.java?ref=c0de37041fdb68ace0fd5f50a2557ddd45b79ee5",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Copyright 2017-2021 EPAM Systems, Inc. (https://www.epam.com/)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -37,11 +37,13 @@\n import static com.codeborne.selenide.Selectors.byId;\n import static com.codeborne.selenide.Selectors.byText;\n import static com.codeborne.selenide.Selectors.byValue;\n+import static com.codeborne.selenide.Selectors.byXpath;\n import static com.codeborne.selenide.Selectors.withText;\n import static com.codeborne.selenide.Selenide.$;\n import static com.epam.pipeline.autotests.ao.Primitive.DEFAULT_COMMAND;\n import static com.epam.pipeline.autotests.ao.Primitive.DESCRIPTION;\n import static com.epam.pipeline.autotests.ao.Primitive.DISK;\n+import static com.epam.pipeline.autotests.ao.Primitive.DO_NOT_MOUNT_STORAGES;\n import static com.epam.pipeline.autotests.ao.Primitive.PORT;\n import static com.epam.pipeline.autotests.ao.Primitive.INSTANCE;\n import static com.epam.pipeline.autotests.ao.Primitive.INSTANCE_TYPE;\n@@ -82,7 +84,8 @@ public ToolSettings(final ToolGroup toolGroup, final String toolName) {\n                         .find(byClassName(\"ant-select-selection__rendered\"))),\n                 entry(SAVE, context().find(button(\"SAVE\"))),\n                 entry(SENSITIVE_STORAGE, context().$(byText(\"Allow sensitive storages\"))\n-                        .parent().find(By.xpath(\"following-sibling::div//span\")))\n+                        .parent().find(By.xpath(\"following-sibling::div//span\"))),\n+                entry(DO_NOT_MOUNT_STORAGES, $(byXpath(\".//span[.='Do not mount storages']/preceding-sibling::span\")))\n         );\n     }\n \n@@ -140,6 +143,14 @@ public ToolSettings enableAllowSensitiveStorage() {\n         return this;\n     }\n \n+    public ToolSettings doNotMountStoragesSelect (boolean isSelected) {\n+        if ((!get(DO_NOT_MOUNT_STORAGES).has(cssClass(\"ant-checkbox-checked\")) && isSelected) ||\n+                (get(DO_NOT_MOUNT_STORAGES).has(cssClass(\"ant-checkbox-checked\")) && !isSelected))    {\n+            get(DO_NOT_MOUNT_STORAGES).click();\n+        }\n+        return this;\n+    }\n+\n     public ToolSettings setDisk(final String disk) {\n         return setValue(DISK, disk);\n     }"
  }
]
