[
  {
    "sha": "0632abb0660d557982be229da80a7ef551bfdaaf",
    "filename": ".classpath",
    "status": "modified",
    "additions": 21,
    "deletions": 3,
    "changes": 24,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/.classpath",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/.classpath",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/.classpath?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -1,12 +1,30 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <classpath>\n \t<classpathentry kind=\"src\" path=\"src\"/>\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-14\">\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8\">\n \t\t<attributes>\n \t\t\t<attribute name=\"module\" value=\"true\"/>\n \t\t</attributes>\n \t</classpathentry>\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.USER_LIBRARY/Hibernate\"/>\n-\t<classpathentry kind=\"lib\" path=\"C:/Program Files (x86)/MySQL/Connector J 8.0/mysql-connector-java-8.0.23.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/jBCrypt/jbcrypt.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/mysql-connector-java-8.0.23/mysql-connector-java-8.0.23.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/antlr-2.7.7.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/byte-buddy-1.10.21.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/classmate-1.5.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/dom4j-2.1.3.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/FastInfoset-1.2.15.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/hibernate-commons-annotations-5.1.2.Final.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/hibernate-core-5.4.29.Final.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/istack-commons-runtime-3.0.7.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/jandex-2.2.3.Final.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/javassist-3.27.0-GA.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/javax.activation-api-1.2.0.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/javax.persistence-api-2.2.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/jaxb-api-2.3.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/jaxb-runtime-2.3.1.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/jboss-logging-3.4.1.Final.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/jboss-transaction-api_1.2_spec-1.1.1.Final.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/stax-ex-1.8.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"C:/hibernate-release-5.4.29.Final/lib/required/txw2-2.3.1.jar\"/>\n \t<classpathentry kind=\"output\" path=\"bin\"/>\n </classpath>"
  },
  {
    "sha": "5d783144ff6b5e050717cfeae3494e0d49e6a46d",
    "filename": ".project",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/.project",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/.project",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/.project?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -14,4 +14,15 @@\n \t<natures>\n \t\t<nature>org.eclipse.jdt.core.javanature</nature>\n \t</natures>\n+\t<filteredResources>\n+\t\t<filter>\n+\t\t\t<id>1615649123321</id>\n+\t\t\t<name></name>\n+\t\t\t<type>30</type>\n+\t\t\t<matcher>\n+\t\t\t\t<id>org.eclipse.core.resources.regexFilterMatcher</id>\n+\t\t\t\t<arguments>node_modules|.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>\n+\t\t\t</matcher>\n+\t\t</filter>\n+\t</filteredResources>\n </projectDescription>"
  },
  {
    "sha": "057be7ee810143bfa08b4c933acd068016ad8f39",
    "filename": ".settings/org.eclipse.jdt.core.prefs",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/.settings/org.eclipse.jdt.core.prefs",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/.settings/org.eclipse.jdt.core.prefs",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/.settings/org.eclipse.jdt.core.prefs?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -1,14 +1,14 @@\n eclipse.preferences.version=1\n org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=14\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve\n-org.eclipse.jdt.core.compiler.compliance=14\n+org.eclipse.jdt.core.compiler.compliance=1.8\n org.eclipse.jdt.core.compiler.debug.lineNumber=generate\n org.eclipse.jdt.core.compiler.debug.localVariable=generate\n org.eclipse.jdt.core.compiler.debug.sourceFile=generate\n org.eclipse.jdt.core.compiler.problem.assertIdentifier=error\n org.eclipse.jdt.core.compiler.problem.enablePreviewFeatures=disabled\n org.eclipse.jdt.core.compiler.problem.enumIdentifier=error\n org.eclipse.jdt.core.compiler.problem.reportPreviewFeatures=warning\n-org.eclipse.jdt.core.compiler.release=enabled\n-org.eclipse.jdt.core.compiler.source=14\n+org.eclipse.jdt.core.compiler.release=disabled\n+org.eclipse.jdt.core.compiler.source=1.8"
  },
  {
    "sha": "7306104105529b5f76d94b18b4d66cf34e9906e4",
    "filename": "README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/README.md",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/README.md",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/README.md?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -28,6 +28,7 @@ This repository aims to complete all Milestones stated in the MicroStar Cable Vi\n 6. Download connector/j from <https://dev.mysql.com/downloads/connector/j/?os=26>\n 7. Add downloaded hibernate jar files to Hibernate user library in the project folder\n 8. Open hibernate.cfg.xml located in the root folder of the project. Add your database username and password.\n+9. Download JBCrypt jar file from <https://drive.google.com/file/d/1ilyaAU3kIjMMCB63VEpYUBNuKOBa8SnI/view?usp=sharing>. Add this file to the class path of the project.\n \n ### 3. Start Project\n "
  },
  {
    "sha": "ea582f320133022e5f67b6d8124c2f6bc742cffd",
    "filename": "bin/.gitignore",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/.gitignore",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/.gitignore",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/.gitignore?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -0,0 +1,2 @@\n+/controllers/\n+/driver/"
  },
  {
    "sha": "94246989ff073273b08c740690479dc742b82c39",
    "filename": "bin/controllers/AuthController.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/controllers/AuthController.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/controllers/AuthController.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/controllers/AuthController.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "1a650a9ae0a0e8cc35ccbd1b9b2e7459308f46d8",
    "filename": "bin/controllers/UserController.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/controllers/UserController.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/controllers/UserController.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/controllers/UserController.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "9ed6037efba42c54c94c3eb0d2fd77613da320a4",
    "filename": "bin/driver/Driver.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/driver/Driver.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/driver/Driver.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/driver/Driver.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "6641e9dd199eb2235add3aa54bd9df196b0b1f52",
    "filename": "bin/factories/HibernateConnectorSessionFactory.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/factories/HibernateConnectorSessionFactory.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/factories/HibernateConnectorSessionFactory.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/factories/HibernateConnectorSessionFactory.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "cff0ad579ace41a1abde6d44efb18fe5226f5f96",
    "filename": "bin/factories/TraditionalDatabaseConnectorFactory.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/factories/TraditionalDatabaseConnectorFactory.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/factories/TraditionalDatabaseConnectorFactory.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/factories/TraditionalDatabaseConnectorFactory.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "2f6faa9da38f6596c0810a3be052638ce40dc179",
    "filename": "bin/hibernate.cfg.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/hibernate.cfg.xml",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/hibernate.cfg.xml",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/hibernate.cfg.xml?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -9,7 +9,7 @@\n         <property name=\"dialect\">org.hibernate.dialect.MySQLDialect</property>      \n         <property name=\"connection.url\">jdbc:mysql://localhost:3306/micro_star</property>      \n         <property name=\"connection.username\">root</property>      \n-        <property name=\"connection.password\">1234567890</property>     \n+        <property name=\"connection.password\"></property>     \n         \n         <!-- setting this property is not necessary as it is automatically registered--> \n         <property name=\"connection.driver_class\">com.mysql.cj.jdbc.Driver</property>   \n@@ -18,6 +18,7 @@\n         \n         <!-- Add annotated classes here -->\n         <mapping class=\"models.User\"/>\n+        <mapping class=\"models.Complaint\"/>\n     </session-factory>    \n     \n </hibernate-configuration>  \n\\ No newline at end of file"
  },
  {
    "sha": "9fa9ae7ac655be253816f68ef46bcf72b3a3d8c8",
    "filename": "bin/models/Complaint.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/models/Complaint.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/models/Complaint.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/models/Complaint.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "4351e532ba81bd0328bf2b9f1587c8ecf028bffe",
    "filename": "bin/models/User.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/models/User.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/models/User.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/models/User.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "e787b2685af5564303915f9a2e5f1d40630e84df",
    "filename": "bin/utils/ComplaintCategory.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/utils/ComplaintCategory.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/utils/ComplaintCategory.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/utils/ComplaintCategory.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "fe55855e71a61ddbec40199420facca674b5d310",
    "filename": "bin/utils/ComplaintType.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/utils/ComplaintType.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/utils/ComplaintType.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/utils/ComplaintType.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "57353ef97d7017387bf7235532673d01e9659780",
    "filename": "bin/utils/CustomizedException.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/utils/CustomizedException.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/utils/CustomizedException.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/utils/CustomizedException.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "0de82c0a00eb946180d86e927fd4ef2febe7e728",
    "filename": "bin/utils/Role.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/utils/Role.class",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/bin/utils/Role.class",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/bin/utils/Role.class?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f"
  },
  {
    "sha": "c191cf67910d2d4611cf87ed158cd78dd27762e1",
    "filename": "src/controllers/AuthController.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/controllers/AuthController.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/controllers/AuthController.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/controllers/AuthController.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -0,0 +1,62 @@\n+package controllers;\n+\n+import utils.CustomizedException;\n+import models.User;\n+/*This class will isolate the logic for authentication and updating password.*/\n+public class AuthController {\n+\n+\tprivate UserController userController;\n+\tprivate User user;\n+\t\n+\tpublic AuthController() {\n+\t\tthis.userController = new UserController();\n+\t\tthis.user = new User();\n+\t}\n+\t\n+\tpublic boolean login(int userId,String password) {\n+\t\t\n+\t    this.user = this.userController.findById(userId);\n+\t    boolean loggedIn = false;\n+\t    if(this.user != null) {\n+\t    \t\n+\t    \ttry {\n+\t    \t\tthis.userController.validatePassword(password, this.user.getPassword());\n+\t\t\t\tloggedIn = true;//user logged in successfully\n+\t\t\t\tSystem.out.println(\"user logged in\");\n+\t\t\t} catch (CustomizedException e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\t\n+\t\t\t}\n+\t    }else {\n+\t    \tSystem.out.println(\"user not found\");\n+\t    }\n+\t\t\n+\t    return loggedIn;\n+\t}\n+\t\n+\tpublic boolean updatePassword(int userId,String oldPassword,String newPassword) {\n+\t\tboolean passwordUpdated = false;\n+\t\t this.user = this.userController.findById(userId);\n+\t\t if(this.user != null) {\n+\t\t    \t\n+\t\t    \ttry {\n+\t\t    \t\t//test if old password matches the user current password\n+\t\t    \t\tthis.userController.validatePassword(oldPassword, this.user.getPassword());\n+\t\t\t\t\t\n+\t\t    \t\t//if passwords match, then we can change it\n+\t\t    \t\tthis.user.setPassword(this.userController.generatePasswordHash(newPassword));\n+\t\t\t\t\tpasswordUpdated=true;\n+\t\t\t\t\t//update user in database\n+\t\t\t\t\tthis.userController.updateUser(this.user);\n+\t\t\t\t} catch (CustomizedException e) {\n+\t\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\n+\t\t    }else {\n+\t\t    \tSystem.out.println(\"user not found\");\n+\t\t    }\n+\t\treturn passwordUpdated;\n+\t}\n+}"
  },
  {
    "sha": "cad395041fd1c719d5a05770c07eb790946ec7ec",
    "filename": "src/controllers/ComplaintController.java",
    "status": "added",
    "additions": 343,
    "deletions": 0,
    "changes": 343,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/controllers/ComplaintController.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/controllers/ComplaintController.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/controllers/ComplaintController.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -0,0 +1,343 @@\n+package controllers;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Date;\n+\n+import org.hibernate.HibernateException;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Transaction;\n+import org.mindrot.jbcrypt.BCrypt;\n+\n+import factories.HibernateConnectorSessionFactory;\n+import factories.TraditionalDatabaseConnectorFactory;\n+import models.Complaint;\n+import utils.ComplaintCategory;\n+import utils.ComplaintType;\n+import utils.CustomizedException;\n+import utils.Role;\n+\n+public class ComplaintController {\n+\n+\t//hibernate session config\n+\tprivate SessionFactory sessionFactory;\n+\tprivate Transaction transaction;\n+\tprivate Session session;\n+\t\n+\t//traditional connection vars\n+\tprivate Connection connect;\n+\tprivate Statement statement;\n+\tprivate String sqlQuery;\n+\t\n+\t\n+\tpublic ComplaintController() {\n+\t\tthis.sessionFactory = null;\n+\t\tthis.transaction = null;\n+\t\tthis.session = null;\n+\t\tthis.connect = null;\n+\t\tthis.statement = null;\n+\t\tthis.sqlQuery = \"\";\n+\t\tthis.statement = null;\n+\t}\n+\n+//\tMethod to ADD complaints\n+\tpublic int addComplaint(Complaint complaint) throws CustomizedException {\n+\t\t\n+\t\t int complaintId = -1;\n+\t\t   try{\n+\t\t\t   \n+\t\t\t   //returns a configured session factory based on hibernate cfg file\n+\t\t\t   //get a hibernate configured session factory and store it into this instance session factory\n+\t\t\t   this.sessionFactory = HibernateConnectorSessionFactory.getHibernateSessionFactory();\n+\t\t\t   //open a session to carry out transactions. a session is needed for every transaction\n+\t\t\t   this.session = this.sessionFactory.openSession();\n+\t\t\t  \n+\t\t\t   //create transaction\n+\t\t\t   \n+\t\t\t   this.transaction = this.session.beginTransaction();\n+\t\t\t    complaintId = (int) this.session.save(complaint);\n+\t\t\t  \n+\t\t\t  this.transaction.commit();\n+\t\t\t   System.out.println(\"\\nTransaction successful!\");\n+\t\t    }catch (HibernateException e) {\n+\t\t       if (this.transaction!=null) {\n+\t\t    \t   this.transaction.rollback();\n+\t\t\t       e.printStackTrace(); \n+\t\t\t       System.out.println(\"\\nTransaction unsuccessful! \");\n+\t\t       } \n+\t\t    }catch (Exception exception){\n+\t\t    \tSystem.out.println(exception.getMessage());\n+\t\t    }finally {\n+\t\t    \t\n+\t\t    \tif(this.session != null) {\n+\t\t    \t\t  this.session.close(); \n+\t\t    \t}\n+\t\t     \n+\t\t    }\n+\t\t   \n+\t\t   return complaintId;\n+}\n+\t\n+\t\n+\n+\n+\t\n+//\tMethod to  READ all the complaints \n+\tpublic ArrayList<Complaint> getAllComplaints() throws CustomizedException {\n+\t\tArrayList<Complaint> complaintsList= new ArrayList<>();\n+\t\t\n+\t    try {\n+\t    \t//get instance of single database connection\n+\t    \tthis.connect = TraditionalDatabaseConnectorFactory.getDatabaseConnection();\n+\t    \t\n+\t    \t//initialize statement that will be used to execute sql query\n+\t\t\tthis.statement = this.connect.createStatement();\n+\t\t\t\n+\t\t\t//create sql query\n+\t\t\tthis.sqlQuery = \"SELECT complaint_id,cust_id, emp_id, complaint_category, complaint,\"\n+\t\t\t\t\t+ \"complaint_date, complaint_type FROM complaints\";\n+\t\t\t\n+\t\t    //execute sql query on statement and a ResultSet is returned\n+\t\t    ResultSet rs = this.statement.executeQuery(this.sqlQuery);\n+\n+\t\t    //move cursor to beginning of row if it exists\n+\t\t    while(rs.next()){\n+\t\t    \t\n+\t\t    \tint complaintID = rs.getInt(\"complaint_id\");\n+\t\t    \tint custID = rs.getInt(\"cust_id\");\n+\t\t    \tint empID= rs.getInt(\"emp_id\");\n+\t\t    \tString complaintCat = rs.getString(\"complaint_category\"); \n+\t\t    \tString complaintInfo = rs.getString(\"complaint\");\n+\t\t    \tDate complaintDate = rs.getDate(\"complaint_date\");\n+\t\t    \tString complaintType = rs.getString(\"complaint_type\");\n+\t\t    \t\n+\t\t    \tComplaint complaint = new Complaint();\n+\t\t    \tcomplaint.setComplaintID(complaintID);\n+\t\t    \tcomplaint.setCustID(custID);\n+\t\t    \tcomplaint.setEmpID(empID);\n+\t\t    \t\n+\t\t       switch (complaintCat.toLowerCase()) {\n+\t\t\t    case \"mild\": \n+\t\t\t    \tcomplaint.setCategory(ComplaintCategory.MILD);\n+\t\t\t    \tbreak;\n+\t\t\t    case \"moderate\": \n+\t\t\t    \tcomplaint.setCategory(ComplaintCategory.MODERATE);\n+\t\t\t    \tbreak;\n+\t\t\t    case \"severe\": \n+\t\t\t    \tcomplaint.setCategory(ComplaintCategory.SEVERE);\n+\t\t\t    \tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new IllegalArgumentException(\"Unexpected value: \" + complaintCat);\n+\t\t\t}\n+\t\t       \n+\t\t       complaint.setComplaint(complaintInfo);\n+\t\t       complaint.setComplaintDate(complaintDate);\n+\t\t       \n+\t\t       switch (complaintType.toLowerCase()) {\n+\t\t\t    case \"broadband\": \n+\t\t\t    \tcomplaint.setComplaintType(ComplaintType.BROADBAND);\n+\t\t\t\tbreak;\n+\t\t\t\tcase \"cable\":\n+\t\t\t\t\tcomplaint.setComplaintType(ComplaintType.CABLE);\n+\t\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new IllegalArgumentException(\"Unexpected value: \" + complaintType);\n+\t\t\t}\n+\t\t       \n+\t\t       //populate complaintsList to be returned\n+\t\t       complaintsList.add(complaint);\n+\t\t       \n+\t\t    }\n+\t\t} catch (SQLException e) {\n+\t\t\t// TODO manage and log exceptions\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t    \n+\t    return complaintsList;\n+\t}\n+\t\n+\t\n+\t\n+\t\n+\n+\t/* Method to  READ one complaint. Returns a single complaint. */\n+\tpublic Complaint findById(int complaintID) throws CustomizedException {\n+\t\t\n+\t\tComplaint complaint = null;\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\t//retrieve complaints using traditional database connectivity\n+\t\t\tthis.connect = TraditionalDatabaseConnectorFactory.getDatabaseConnection();\n+\t\t\tthis.statement = this.connect.createStatement();\n+\t\t\t//create sql query\n+\t\t\tthis.sqlQuery = \"SELECT complaint_id,cust_id, emp_id, complaint_category, complaint,\"\n+\t\t\t\t\t+ \"complaint_date, complaint_type FROM complaints\";\t\t    \n+\t\t    ResultSet rs = this.statement.executeQuery(this.sqlQuery);\n+\t\t    \n+\t\t  //Read result values and create complaints objects\n+\t\t   if(rs.next()){\n+\t\t       //Retrieve by column name \n+\t\t\t    int complaintID1 = rs.getInt(\"complaint_id\");\n+\t\t    \tint custID = rs.getInt(\"cust_id\");\n+\t\t    \tint empID= rs.getInt(\"emp_id\");\n+\t\t    \tString complaintCat = rs.getString(\"complaint_category\"); \n+\t\t    \tString complaintInfo = rs.getString(\"complaint\");\n+\t\t    \tDate complaintDate = rs.getDate(\"complaint_date\");\n+\t\t    \tString complaintType = rs.getString(\"complaint_type\");\n+\t\t    \t\n+\t\t       \n+\t\t       //create complaints objects using data retrieved from columns.\n+\t\t    \tcomplaint = new Complaint();\n+\t\t    \t\n+\t\t    \tcomplaint.setComplaintID(complaintID1);\n+\t\t    \tcomplaint.setCustID(custID);\n+\t\t    \tcomplaint.setEmpID(empID);\n+\t\t    \t\n+\t\t       switch (complaintCat.toLowerCase()) {\n+\t\t\t    case \"mild\": \n+\t\t\t    \tcomplaint.setCategory(ComplaintCategory.MILD);\n+\t\t\t    \tbreak;\n+\t\t\t    case \"moderate\": \n+\t\t\t    \tcomplaint.setCategory(ComplaintCategory.MODERATE);\n+\t\t\t    \tbreak;\n+\t\t\t    case \"severe\": \n+\t\t\t    \tcomplaint.setCategory(ComplaintCategory.SEVERE);\n+\t\t\t    \tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new IllegalArgumentException(\"Unexpected value: \" + complaintCat);\n+\t\t\t}\n+\t\t       \n+\t\t       complaint.setComplaint(complaintInfo);\n+\t\t       complaint.setComplaintDate(complaintDate);\n+\t\t       \n+\t\t       switch (complaintType.toLowerCase()) {\n+\t\t\t    case \"broadband\": \n+\t\t\t    \tcomplaint.setComplaintType(ComplaintType.BROADBAND);\n+\t\t\t\tbreak;\n+\t\t\t\tcase \"cable\":\n+\t\t\t\t\tcomplaint.setComplaintType(ComplaintType.CABLE);\n+\t\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new IllegalArgumentException(\"Unexpected value: \" + complaintType);\n+\t\t\t}\n+\t\t           \n+\t\t    }\n+\t\t} catch (SQLException e) {\n+\t\t\t// TODO manage and log exceptions\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t    \n+\t    return complaint;\n+\t}\n+\t\n+\t\n+\t\n+\n+\t\n+\t/*Method to UPDATE a complaint*/\n+\tpublic Complaint updateComplaints(Complaint updatedComplaint) throws CustomizedException {\n+\t\tComplaint complaint = null;\n+\t\n+\t\ttry {\n+\t\t\tthis.sessionFactory = HibernateConnectorSessionFactory.getHibernateSessionFactory();\n+\t\t\tthis.session = this.sessionFactory.openSession();\n+\t\t\tthis.transaction = this.session.beginTransaction();\n+\t\t\t\n+\t\t\t//gets the Stock object from the database. i.e it tries to retrieve the complaint\n+\t\t\t//with the matching ID and create an object from the values\n+\t\t\tcomplaint = (Complaint)this.session.get(Complaint.class, \n+\t\t\t\t\t\t\t\t\tupdatedComplaint.getComplaintID()); \n+\t\t\tcomplaint.setCustID(updatedComplaint.getCustID());\n+\t\t\tcomplaint.setEmpID(updatedComplaint.getEmpID());\n+\t\t\tcomplaint.setCategory(updatedComplaint.getCategory());\n+\t\t\tcomplaint.setComplaint(updatedComplaint.getComplaint());\n+\t\t\tcomplaint.setComplaintDate(updatedComplaint.getComplaintDate());\n+\t\t\tcomplaint.setComplaintType(updatedComplaint.getComplaintType());\n+\t\t\t\n+\t\t\t//complete transaction\n+\t\t     this.transaction.commit();\n+\t\t    System.out.println(\"Complaint successfully updated\");\n+\t\t} catch (HibernateException e) {\n+\t\t\t// TODO: handle exception\n+\t\t\tSystem.out.println(e);\n+\t\t\tif(this.transaction != null) {\n+\t\t\t\tthis.transaction.rollback();\n+\t\t\t\tSystem.out.println(\"Rollback complete!\");\n+\t\t\t}\n+\t\t\tthrow new CustomizedException(e.getMessage());\n+\t\t}\n+\t\t  catch (Exception e) {\n+\t\t\t// TODO: handle exception\n+\t\t\tSystem.out.println(e);\n+\t\t}\n+\t\t\n+\t\treturn complaint;\n+\t}\n+\t\n+\t\n+\t\n+\t\n+\t/*Method to delete a complaint*/\n+\tpublic int deleteComplaint(int complaintId) throws CustomizedException {\n+\t\tint result = -1;\n+\t\t//delete complaint using traditional connectivity\n+\t\ttry {\n+\t\t\tthis.connect = TraditionalDatabaseConnectorFactory.getDatabaseConnection();\n+\t\t\tthis.statement = this.connect.createStatement();\n+\t\t  result = this.statement.executeUpdate(\"DELETE FROM complaints \" +\n+\t                   \"WHERE complaint_id =\"+complaintId);\n+\t\t  \n+\t\tSystem.out.println(result + \" row(s) affected. delete successful\");\n+\t\t\n+\t\t\tif(result > 0) {\n+\t\t\t\tthrow new CustomizedException(\"Complaint deleted.\");\n+\t\t\t}else if(result == 0) {\n+\t\t\t\tthrow new CustomizedException(\"No complaint with given ID found\");\n+\t\t\t}\n+\t\t} catch (SQLException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t} catch (CustomizedException e) {\n+\t\t\tthrow new CustomizedException(e.getMessage());\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ee106725ac87d81e3fc449c5679328882837036a",
    "filename": "src/controllers/UserController.java",
    "status": "modified",
    "additions": 272,
    "deletions": 21,
    "changes": 293,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/controllers/UserController.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/controllers/UserController.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/controllers/UserController.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -1,67 +1,318 @@\n package controllers;\n \n import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n \n import org.hibernate.HibernateException;\n import org.hibernate.Session;\n import org.hibernate.SessionFactory;\n import org.hibernate.Transaction;\n+import org.mindrot.jbcrypt.BCrypt;\n \n import factories.HibernateConnectorSessionFactory;\n+import factories.TraditionalDatabaseConnectorFactory;\n import models.User;\n+import utils.CustomizedException;\n+import utils.Role;\n \n public class UserController {\n \n-\t//hibernate session config\n-    private HibernateConnectorSessionFactory hibernateSessionFactory;\n+\t//hibernate session vars\n \tprivate SessionFactory sessionFactory;\n \tprivate Transaction transaction;\n \tprivate Session session;\n \t\n-\t//traditional connection config\n+\t//traditional connection vars\n \tprivate Connection connect;\n-\t\n+\tprivate Statement statement;\n+\tprivate String sqlQuery;\n \t\n \t\n \tpublic UserController() {\n \t\tthis.sessionFactory = null;\n \t\tthis.transaction = null;\n \t\tthis.session = null;\n-\t\tthis.hibernateSessionFactory = null;\n \t\tthis.connect = null;\n+\t\tthis.statement = null;\n+\t\tthis.sqlQuery = \"\";\n+\t\tthis.statement = null;\n \t}\n \n \t\n \n-\n-\tpublic void addUser(User user) {\n-\t\t\n+\t/* Method to add a user.\n+\t *add user using hibernate */\n+\tpublic int createUser(User user) {\n+\t\t int userId = -1;\n \t   try{\n-\t\t   //add user using hibernate\n-\t\t   this.hibernateSessionFactory = new HibernateConnectorSessionFactory();\n-\t\t   this.sessionFactory = this.hibernateSessionFactory.getSessionFactory();\n+\t\t   \n+\t\t   //returns a configured session factory based on hibernate cfg file\n+\t\t   //get a hibernate configured session factory and store it into this instance session factory\n+\t\t   this.sessionFactory = HibernateConnectorSessionFactory.getHibernateSessionFactory();\n+\t\t   //open a session to carry out transactions. a session is needed for every transaction\n \t\t   this.session = this.sessionFactory.openSession();\n+\t\t  \n \t\t   //create transaction\n \t\t   \n-\t\t   this.transaction= this.session.beginTransaction();\n-\t\t //can save as much objects here\n-\t\t  this.session.save(user);\n-\t\t   \n-\t\t  this.session.getTransaction().commit();\n+\t\t   this.transaction = this.session.beginTransaction();\n+\t\t   /*can save as much objects here.\n+\t\t    * cast the returned valued to int since we are storing userId as int.*/\n+\t\t   String hashedPassword = this.generatePasswordHash(user.getPassword());\n+\t\t   user.setPassword(hashedPassword);\n+\t\t    userId = (int) this.session.save(user);\n+\t\t  \n+\t\t  this.transaction.commit();\n \t\t   System.out.println(\"transaction complete \");\n \t    }catch (HibernateException e) {\n-\t       if (transaction!=null) transaction.rollback(); this.session.getTransaction().rollback();\n-\t       e.printStackTrace(); \n-\t       System.out.println(\"transaction incomplete \");\n+\t       if (this.transaction!=null) {\n+\t    \t   this.transaction.rollback();\n+\t\t       e.printStackTrace(); \n+\t\t       System.out.println(\"transaction incomplete \");\n+\t       } \n \t    }catch (Exception exception){\n \t    \tSystem.out.println(exception.getMessage());\n \t    }finally {\n \t    \t\n-\t    \tif(session != null) {\n-\t    \t\t  session.close(); \n+\t    \tif(this.session != null) {\n+\t    \t\t  this.session.close(); \n \t    \t}\n \t     \n \t    }\n+\t   \n+\t   return userId;\n+\t}\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t/* Method to  READ all the users */\n+\tpublic ArrayList<User> getAllUsers() {\n+\t\tArrayList<User> userList = new ArrayList<User>();\n+\t\t\n+\t    try {\n+\t    \t//get instance of single database connection\n+\t    \tthis.connect = TraditionalDatabaseConnectorFactory.getDatabaseConnection();\n+\t    \t\n+\t    \t//initialize statement that will be used to execute sql query\n+\t\t\tthis.statement = this.connect.createStatement();\n+\t\t\t\n+\t\t\t//create sql query\n+\t\t    this.sqlQuery = \"SELECT user_id, first_name, last_name, email, user_role, password FROM users\";\n+\t\t    //execute sql query on statement and a ResultSet is returned\n+\t\t    ResultSet rs = this.statement.executeQuery(this.sqlQuery);\n+\n+\t\t    //move cursor to beginning of row if it exists\n+\t\t    while(rs.next()){\n+\t\t       //Retrieve by column name \n+\t\t       int id  = rs.getInt(\"user_id\");\n+\t\t       String firstName = rs.getString(\"first_name\");\n+\t\t       String lastName = rs.getString(\"last_name\");\n+\t\t       String email = rs.getString(\"email\");\n+\t\t       String role = rs.getString(\"user_role\");\n+\t\t       String password = rs.getString(\"password\");\n+\t\t       \n+\t\t       //create user objects using data retrieved from columns.\n+\t\t       User user = new User();\n+\t\t  \n+\t\t       user.setUserId(id);\n+\t\t       user.setFirstName(firstName);\n+\t\t       user.setLastName(lastName);\n+\t\t       user.setEmail(email);\n+\t\t       user.setPassword(password);\n+\t\t       \n+\t\t       switch (role.toLowerCase()) {\n+\t\t\t    case \"customer\": \n+\t\t\t    \tuser.setRole(Role.CUSTOMER);\n+\t\t\t\tbreak;\n+\t\t\t\tcase \"representative\":\n+\t\t\t\t\tuser.setRole(Role.REPRESENTATIVE);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase \"technician\":\n+\t\t\t\t\tuser.setRole(Role.TECHNICIAN);\n+\t\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new IllegalArgumentException(\"Unexpected value: \" + role);\n+\t\t\t}\n+\t\t       //populate userList to be returned\n+\t\t       userList.add(user);\n+\t\t       \n+\t\t    }\n+\t\t} catch (SQLException e) {\n+\t\t\t// TODO manage and log exceptions\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t    \n+\t    return userList;\n+\t}\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t/* Method to  READ one user. Returns a single user. */\n+\tpublic User findById(int userId) {\n+\t\t\n+\t\tUser user = null;\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\t//retrieve users using traditional database connectivity\n+\t\t\tthis.connect = TraditionalDatabaseConnectorFactory.getDatabaseConnection();\n+\t\t\tthis.statement = this.connect.createStatement();\n+\t\t\t//create sql query\n+\t\t    this.sqlQuery = \"SELECT user_id, first_name, last_name, email, user_role, password FROM users WHERE user_id = \"+userId;\n+\t\t    ResultSet rs = this.statement.executeQuery(this.sqlQuery);\n+\t\t    \n+\t\t  //Read result values and create user objects\n+\t\t   if(rs.next()){\n+\t\t       //Retrieve by column name \n+\t\t       int id  = rs.getInt(\"user_id\");\n+\t\t       String firstName = rs.getString(\"first_name\");\n+\t\t       String lastName = rs.getString(\"last_name\");\n+\t\t       String email = rs.getString(\"email\");\n+\t\t       String role = rs.getString(\"user_role\");\n+\t\t       String password = rs.getString(\"password\");\n+\t\t       \n+\t\t       //create user objects using data retrieved from columns.\n+\t\t        user = new User();\n+\t\t  \n+\t\t       user.setUserId(id);\n+\t\t       user.setFirstName(firstName);\n+\t\t       user.setLastName(lastName);\n+\t\t       user.setEmail(email);\n+\t\t       user.setPassword(password);\n+\t\t       switch (role.toLowerCase()) {\n+\t\t\t    case \"customer\": \n+\t\t\t\tuser.setRole(Role.CUSTOMER);\n+\t\t\t\tbreak;\n+\t\t\t\tcase \"representative\":\n+\t\t\t\t\tuser.setRole(Role.REPRESENTATIVE);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase \"technician\":\n+\t\t\t\t\tuser.setRole(Role.TECHNICIAN);\n+\t\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new IllegalArgumentException(\"Unexpected value: \" + role);\n+\t\t\t}\n+\t\t       \n+\t\t    }\n+\t\t} catch (SQLException e) {\n+\t\t\t// TODO manage and log exceptions\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t\n+\t\treturn user;\n \t}\n \t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t/*Method to UPDATE a user*/\n+\tpublic User updateUser(User updatedUser) {\n+\t\tUser user = null;\n+\t\n+\t\ttry {\n+\t\t\tthis.sessionFactory = HibernateConnectorSessionFactory.getHibernateSessionFactory();\n+\t\t\tthis.session = this.sessionFactory.openSession();\n+\t\t\tthis.transaction = this.session.beginTransaction();\n+\t\t\t\n+\t\t\t//gets the Stock object from the database. i.e it tries to retrieve the user\n+\t\t\t//with the matching ID and create an object from the values\n+\t\t    user = (User)this.session.get(User.class, updatedUser.getUserId()); \n+\t\t\tuser.setFirstName(updatedUser.getFirstName());\n+\t\t\tuser.setLastName(updatedUser.getLastName());\n+\t\t    user.setEmail(updatedUser.getEmail());\n+\t\t\tuser.setPassword(updatedUser.getPassword());\n+\t\t\tuser.setRole(updatedUser.getRole());\n+\t\t\t\n+\t\t\t//complete transaction\n+\t\t     this.transaction.commit();\n+\t\t    System.out.println(\"user updated\");\n+\t\t} catch (HibernateException e) {\n+\t\t\t// TODO: handle exception\n+\t\t\tSystem.out.println(e);\n+\t\t\tif(this.transaction != null) {\n+\t\t\t\tthis.transaction.rollback();\n+\t\t\t\tSystem.out.println(\"rollback complete\");\n+\t\t\t}\n+\t\t}\n+\t\t  catch (Exception e) {\n+\t\t\t// TODO: handle exception\n+\t\t\tSystem.out.println(e);\n+\t\t}\n+\t\t\n+\t\treturn user;\n+\t}\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t/*Method to delete user*/\n+\tpublic int deleteUser(int userId) {\n+\t\tint result = -1;\n+\t\t//delete user using traditional connectivity\n+\t\ttry {\n+\t\t\tthis.connect = TraditionalDatabaseConnectorFactory.getDatabaseConnection();\n+\t\t\tthis.statement = this.connect.createStatement();\n+\t\t  result = this.statement.executeUpdate(\"DELETE FROM users \" +\n+\t                   \"WHERE user_id =\"+userId);\n+\t\t\n+\t\tSystem.out.println(result + \" row(s) affected. delete successful\");\n+\t\t\n+\t\t} catch (SQLException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t\n+\t//helper function to generate password hash in database before storing.\n+\t//no raw text passwords will be stored.\n+\tpublic String generatePasswordHash(String password) {\n+\t\t\n+\t\tString encrypted = BCrypt.hashpw(password, BCrypt.gensalt());\n+\t\treturn encrypted;\n+\t}\n+\t\n+\n+\t\n+\t\n+\t\n+\t\n+\t//Method to test if a plain text password matches the hash when converted\n+\t//using BCrypt\n+\tpublic boolean validatePassword(String testPassword,String encrypted) throws CustomizedException {\n+\n+\t\tif (BCrypt.checkpw(testPassword, encrypted)) {\t\n+\t        return true;\n+\t\t}\n+\t\telse {\n+\t\t\tthrow new CustomizedException(\"Password invalid.\");\n+\t\t}\n+\t\t        \n+\t}\n+\t\n+\t\n+\n }"
  },
  {
    "sha": "22a8bd7e96dac78950c0f2ce2d15563741264b2e",
    "filename": "src/driver/Driver.java",
    "status": "modified",
    "additions": 213,
    "deletions": 6,
    "changes": 219,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/driver/Driver.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/driver/Driver.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/driver/Driver.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -1,21 +1,228 @@\n package driver;\n \n+import java.sql.Date;\n+import java.util.ArrayList;\n \n \n+import controllers.AuthController;\n+import controllers.ComplaintController;\n import controllers.UserController;\n+import models.Complaint;\n import models.User;\n+import utils.ComplaintCategory;\n+import utils.ComplaintType;\n+import utils.CustomizedException;\n import utils.Role;\n \n public class Driver {\n \n-\tpublic static void main(String[] args) {\n+\tpublic static void main(String[] args) throws CustomizedException {\n+\t\t\n+//\t\tAuthController ac = new AuthController();\n+//\t\t\n+//\t\tboolean t = ac.updatePassword(1700, \"secrets\",\"secret\");\n+//\t\t\n+//\t\tSystem.out.println(t);\n+\t\t\n+\t\tUser user1 = new User(\"Jacob\",\"Smith\",\"jsmith@gmail.com\",\n+\t\t\t\t\"password\",Role.CUSTOMER);\n+\t\t\n+\t\tUser user2 = new User(\"Peter\",\"Parker\",\"parker.peter@gmail.com\",\n+\t\t\t\t\"secret1\",Role.TECHNICIAN);\n+\t\t\n+\t\tUser user3 = new User(\"Bruce\",\"Wayne\",\"wayne_bruce@yahoo.com\",\n+\t\t\t\t\"wayne001\",Role.REPRESENTATIVE);\n+\t\t\n+\t\tUserController uc1 = new UserController();\n+\t\t\n+//\t\tuc1.createUser(user1);\n+//\t\tuc1.createUser(user2);\n+//\t\tuc1.createUser(user3);\n+\t\t\n+\t\tArrayList <User> userList = new ArrayList<>();\n+\t\tuserList= uc1.getAllUsers();\n+\t\t\n+//\t\tSystem.out.println(userList);\n+\t\t\n+\t\tUser result = new User();\n+\t\t\n+//\t\tresult = uc1.findById(1709);\n+\t\t\n+//\t\tSystem.out.println(\"\\nResults from the User search: \\n\"+result);\n+\t\t\n+\t\tUser userUpdate = new User();\n+\t\tUser user5 = new User(\"Jacob\",\"Forrestor\",\"jforres@gmail.com\",\n+\t\t\t\t\"password\",Role.TECHNICIAN);\n+\t\t\n+//\t\tuser5.setUserId(1720);\n+\t\t\n+//\t\tuc1.createUser(user5);\n+//\t\tSystem.out.println(\"User created!\\n\");\n+\t\t\n+//\t\tuserUpdate = uc1.updateUser(user5);\n+//\t\t\n+//\t\tSystem.out.println(\"\\nUpdate User: \\n\"+userUpdate);\n+\t\n+//\t\tuc1.deleteUser(0);\n+\t\t\n+\t\t\n+\t\tUser user6 = new User(\"Brian\",\"OConner\",\"brcnner@gmail.com\",\n+\t\t\t\t\"coding123\",Role.REPRESENTATIVE);\n+\t\t\n+\t\tUser user7 = new User(\"Haary\",\"Jakeson\",\"harryson@gmail.com\",\n+\t\t\t\t\"passwrd321\",Role.CUSTOMER);\n+\t\t\n+\t\tUserController uc3 = new UserController();\n+\t\t\n+//\t\tuc3.createUser(user7);\n+\t\t\n+//\t\tString hashed = user6.getPassword();\n+//\t\tSystem.out.println(\"Password input: \"+hashed);\n+//\t\t\n+//\t\tString input = \"coding123\";\n+//\t\t\n+//\t\t\n+//\t\ttry {\n+//\t\t\tuc3.validatePassword(input, hashed);\n+//\t\t\tSystem.out.println(input+\" and \"+hashed+\" match!\");\n+//\t\t} catch (CustomizedException e) {\n+//\t\t\t// TODO Auto-generated catch block\n+//\t\t\te.printStackTrace();\n+//\t\t}\n+\t\n+\t\t\n+\t\tComplaintController cc = new ComplaintController();\n+\t\t\n+\t\tjava.sql.Date sqlDate = new java.sql.Date(new java.util.Date().getTime());\n+\t\t\n+\t\tComplaint c1 = new Complaint(\n+\t\t\t\t1724,\n+\t\t\t\t1720, \n+\t\t\t\tComplaintCategory.MODERATE,\n+\t\t\t\t\"This is a sample complaint.\",\n+\t\t\t\tsqlDate,\n+\t\t\t\tComplaintType.BROADBAND\n+\t\t\t\t);\n+\t\n+\t\tComplaint c2 = new Complaint(\n+\t\t\t\t1728,\n+\t\t\t\t1721, \n+\t\t\t\tComplaintCategory.SEVERE,\n+\t\t\t\t\"This is another sample complaint.\",\n+\t\t\t\tsqlDate,\n+\t\t\t\tComplaintType.CABLE\n+\t\t\t\t);\n+\t\n+\t\t\n+//\t\tcc.addComplaint(c1);\n+//\t\tcc.addComplaint(c2);\n+\t\t\n+\t\tArrayList <Complaint> complaintsList = new ArrayList<>();\n+\t\tcomplaintsList= cc.getAllComplaints();\n+\t\t\n+\t\tSystem.out.println(complaintsList);\n+\t\t\n+\t\tComplaint c10 = new Complaint();\n+\t\tc10 = cc.findById(13);\n+\t\tSystem.out.println(\"\\nComplaint Search results: \"+c10);\n+\t\t\n+\t\t\n+\t\tComplaint c3 = new Complaint(\n+\t\t\t\t1728,\n+\t\t\t\t1727, \n+\t\t\t\tComplaintCategory.MODERATE,\n+\t\t\t\t\"This is yet another sample complaint.\",\n+\t\t\t\tsqlDate,\n+\t\t\t\tComplaintType.CABLE\n+\t\t\t\t);\n+\t\t\n+\t\t\n+\t\tComplaint c4 = new Complaint(\n+\t\t\t\t1724,\n+\t\t\t\t1723, \n+\t\t\t\tComplaintCategory.MODERATE,\n+\t\t\t\t\"This is yet another another sample complaint.\",\n+\t\t\t\tsqlDate,\n+\t\t\t\tComplaintType.BROADBAND\n+\t\t\t\t);\n+\t\t\n+\t\t\n+//\t\tcc.addComplaint(c3);\n+\t\t\n+//\t\tc4.setComplaintID(14);\n+//\t\t\n+//\t\tComplaints complaintUpdate = new Complaints();\n+//\t\t\n+//\t\tcomplaintUpdate = cc.updateComplaints(c4);\n+//\n+//\t\tSystem.out.println(\"\\nUpdate Complaint: \\n\"+complaintUpdate);\n+\t\n+\t\t\n+\t\tComplaint c5 = new Complaint(\n+\t\t\t\t1728,\n+\t\t\t\t1721, \n+\t\t\t\tComplaintCategory.SEVERE,\n+\t\t\t\t\"This is going to be another sample complaint.\",\n+\t\t\t\tsqlDate,\n+\t\t\t\tComplaintType.CABLE\n+\t\t\t\t);\n+//\t\tcc.addComplaint(c5);\n+\t\tcc.deleteComplaint(16);\n \t\t\n-\t\tUser user = new User(\"\",\"\",\"\",\"\",Role.REPRESENTATIVE);\n-\t\tUserController controller = new UserController();\n \t\t\n-\t\tcontroller.addUser(user);\n-\n-   \n \t}\n \n }\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "fe34d4d2ed657f64f4ce8a810184f1e545d45291",
    "filename": "src/factories/HibernateConnectorSessionFactory.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/factories/HibernateConnectorSessionFactory.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/factories/HibernateConnectorSessionFactory.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/factories/HibernateConnectorSessionFactory.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -6,22 +6,20 @@\n // this class will store the single connection for hibernate session factory\n public class HibernateConnectorSessionFactory {\n \n+\tprivate static SessionFactory sessionFactory = null;\n \t\n-\tprivate SessionFactory sessionFactory;\n-\t\n-\tpublic HibernateConnectorSessionFactory() {\n-\t\tthis.sessionFactory = null;\n-\t}\n-\n-\n-\n-\n-\tpublic SessionFactory getSessionFactory() {\n+\tpublic static SessionFactory getHibernateSessionFactory() {\n \t\t\n \t\t//Session factory stores data in the hibernate application\n \t\t//only one session factory is needed per application\n-\t\tthis.sessionFactory = new Configuration().configure().buildSessionFactory();\n-\t\treturn sessionFactory;\n+\t\t\n+\t\ttry {\n+\t\t\tsessionFactory = new Configuration().configure().buildSessionFactory();\n+\t\t\treturn sessionFactory;\n+\t      } catch (Throwable ex) { \n+\t         System.err.println(\"Failed to create sessionFactory object.\" + ex);\n+\t         throw new ExceptionInInitializerError(ex); \n+\t      }\n \t}\n }\n "
  },
  {
    "sha": "bc140e1e32113cd4e48706463d0248d54b9f9771",
    "filename": "src/factories/TraditionalDatabaseConnectorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/factories/TraditionalDatabaseConnectorFactory.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/factories/TraditionalDatabaseConnectorFactory.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/factories/TraditionalDatabaseConnectorFactory.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -13,7 +13,7 @@ public static Connection getDatabaseConnection() throws SQLException {\n \t\tif(connection == null) {\n \t\t\t\n \t\t\ttry {\n-\t\t\t\tconnection = DriverManager.getConnection(connectionString,\"root\",\"1234567890\");\n+\t\t\t\tconnection = DriverManager.getConnection(connectionString,\"root\",\"\");\n \t\t\t} catch (SQLException e) {\n \t\t\t\tthrow e;\n \t\t\t}"
  },
  {
    "sha": "2f6faa9da38f6596c0810a3be052638ce40dc179",
    "filename": "src/hibernate.cfg.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/hibernate.cfg.xml",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/hibernate.cfg.xml",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/hibernate.cfg.xml?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -9,7 +9,7 @@\n         <property name=\"dialect\">org.hibernate.dialect.MySQLDialect</property>      \n         <property name=\"connection.url\">jdbc:mysql://localhost:3306/micro_star</property>      \n         <property name=\"connection.username\">root</property>      \n-        <property name=\"connection.password\">1234567890</property>     \n+        <property name=\"connection.password\"></property>     \n         \n         <!-- setting this property is not necessary as it is automatically registered--> \n         <property name=\"connection.driver_class\">com.mysql.cj.jdbc.Driver</property>   \n@@ -18,6 +18,7 @@\n         \n         <!-- Add annotated classes here -->\n         <mapping class=\"models.User\"/>\n+        <mapping class=\"models.Complaint\"/>\n     </session-factory>    \n     \n </hibernate-configuration>  \n\\ No newline at end of file"
  },
  {
    "sha": "6429a03bdc9e37858a63851f3772827ef391a5ac",
    "filename": "src/models/Complaint.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/models/Complaint.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/models/Complaint.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/models/Complaint.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -0,0 +1,151 @@\n+package models;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+import utils.ComplaintCategory;\n+import utils.ComplaintType;\n+\n+\n+\n+/*This class will serve as the complaints domain object.\n+ * it will map to the complaints table in the mysql database\n+ * \n+ * */\n+\n+@Entity\n+@Table(name = \"complaints\") //reference the user table in database. \n+public class Complaint {\n+\n+\t@Id\n+\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n+\t@Column(name = \"complaint_id\")\n+\tprivate int complaintID;\n+\t\n+\t@Column(name = \"cust_id\")\n+\tprivate int custID;\n+\t\n+\t@Column(name = \"emp_id\")\n+\tprivate int empID;\n+\t\n+\t@Enumerated(EnumType.STRING)\n+\t@Column(name = \"complaint_category\")\n+\tprivate ComplaintCategory category;\n+\t\n+\t@Column(name = \"complaint\")\n+\tprivate String complaint;\n+\t\n+\t@Column(name = \"complaint_date\")\n+\tprivate Date complaintDate;\n+\t\n+\t@Enumerated(EnumType.STRING)\n+\t@Column(name = \"complaint_type\")\n+\tprivate ComplaintType complaintType;\n+\n+\t\n+\tpublic Complaint() {\n+\t\tthis.custID = 0;\n+\t\tthis.empID = 0;\n+\t\tthis.category = null;\n+\t\tthis.complaint = \"\";\n+\t\tthis.complaintDate =  new Date();\n+\t\tthis.complaintType = null;\n+\t}\n+\t\n+\tpublic Complaint(int custID, int empID, ComplaintCategory category, String complaint, Date complaintDate,\n+\t\t\tComplaintType complaintType) {\n+\t\tthis.custID = custID;\n+\t\tthis.empID = empID;\n+\t\tthis.category = category;\n+\t\tthis.complaint = complaint;\n+\t\tthis.complaintDate = complaintDate;\n+\t\tthis.complaintType = complaintType;\n+\t}\n+\t\n+\t\n+\tpublic Complaint(final Complaint c ) {\n+\t\tthis.complaintID = c.complaintID;\n+\t\tthis.custID = c.custID;\n+\t\tthis.empID = c.empID;\n+\t\tthis.category = c.category;\n+\t\tthis.complaint = c.complaint;\n+\t\tthis.complaintDate = c.complaintDate;\n+\t\tthis.complaintType = c.complaintType;\n+\t}\n+\n+\tpublic int getComplaintID() {\n+\t\treturn complaintID;\n+\t}\n+\n+\tpublic void setComplaintID(int complaintID) {\n+\t\tthis.complaintID = complaintID;\n+\t}\n+\n+\tpublic int getCustID() {\n+\t\treturn custID;\n+\t}\n+\n+\tpublic void setCustID(int custID) {\n+\t\tthis.custID = custID;\n+\t}\n+\n+\tpublic int getEmpID() {\n+\t\treturn empID;\n+\t}\n+\n+\tpublic void setEmpID(int empID) {\n+\t\tthis.empID = empID;\n+\t}\n+\n+\tpublic ComplaintCategory getCategory() {\n+\t\treturn category;\n+\t}\n+\n+\tpublic void setCategory(ComplaintCategory category) {\n+\t\tthis.category = category;\n+\t}\n+\n+\tpublic String getComplaint() {\n+\t\treturn complaint;\n+\t}\n+\n+\tpublic void setComplaint(String complaint) {\n+\t\tthis.complaint = complaint;\n+\t}\n+\n+\tpublic Date getComplaintDate() {\n+\t\treturn complaintDate;\n+\t}\n+\n+\tpublic void setComplaintDate(Date complaintDate) {\n+\t\tthis.complaintDate = complaintDate;\n+\t}\n+\n+\tpublic ComplaintType getComplaintType() {\n+\t\treturn complaintType;\n+\t}\n+\n+\tpublic void setComplaintType(ComplaintType complaintType) {\n+\t\tthis.complaintType = complaintType;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"\\nComplaints \\ncomplaintID: \" + complaintID + \"\\ncustID: \" + custID +\n+\t\t\t\t\"\\nempID: \" + empID + \"\\ncategory: \"\n+\t\t\t\t+ category + \"\\ncomplaint: \" + complaint + \"\\ncomplaintDate: \" + complaintDate + \n+\t\t\t\t\"\\ncomplaintType: \"\n+\t\t\t\t+ complaintType + \"\\n\";\n+\t}\n+\t\n+\t\n+\t\n+}"
  },
  {
    "sha": "d41df27ffc826b145a150b521eea9946b4efcc83",
    "filename": "src/models/User.java",
    "status": "modified",
    "additions": 2,
    "deletions": 8,
    "changes": 10,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/models/User.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/models/User.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/models/User.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -14,12 +14,6 @@\n import javax.persistence.Id;\n import javax.persistence.Table;\n \n-import org.hibernate.HibernateException;\n-import org.hibernate.Session;\n-import org.hibernate.SessionFactory;\n-import org.hibernate.Transaction;\n-\n-import factories.HibernateConnectorSessionFactory;\n import utils.Role;\n \n \n@@ -138,8 +132,8 @@ public void setRole(Role role) {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"User [userId=\" + userId + \", firstName=\" + firstName + \", lastName=\" + lastName + \", email=\" + email\n-\t\t\t\t+ \", password=\" + password + \", role=\" + role + \"]\";\n+\t\treturn \"\\nUser \\nUser Id: \" + userId + \"\\nfirstName: \" + firstName + \"\\nlastName: \" + lastName + \"\\nemail: \" + email\n+\t\t\t\t+ \"\\npassword: \" + password + \"\\nrole: \" + role + \"\\n\";\n \t}\n \t\n \t"
  },
  {
    "sha": "94f0cf775ebe26437b984236476f20fd8506f2d6",
    "filename": "src/utils/ComplaintCategory.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/utils/ComplaintCategory.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/utils/ComplaintCategory.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/utils/ComplaintCategory.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -0,0 +1,5 @@\n+package utils;\n+\n+public enum ComplaintCategory {\n+\tMILD, MODERATE, SEVERE\n+}"
  },
  {
    "sha": "6057104dc2a9c2fa68534c7e339fd016a0a9dcf1",
    "filename": "src/utils/ComplaintType.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/utils/ComplaintType.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/utils/ComplaintType.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/utils/ComplaintType.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -0,0 +1,5 @@\n+package utils;\n+\n+public enum ComplaintType {\n+\tBROADBAND, CABLE\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "71f01e38fc755100d07d29770f795b6854b0ff68",
    "filename": "src/utils/CustomizedException.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/utils/CustomizedException.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/src/utils/CustomizedException.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/src/utils/CustomizedException.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -0,0 +1,10 @@\n+package utils;\n+\n+public class CustomizedException extends Exception {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tpublic CustomizedException(String message) {\n+\t\tsuper(message);\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a24c0e35fb6a89edeae89fe31f05228607b623f9",
    "filename": "utils/ComplaintsCategory.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/blob/31399b7022ff128e6cfeb3f2db60b47aefcc622f/utils/ComplaintsCategory.java",
    "raw_url": "https://github.com/SirKSteen/MicroStar_CableVision_Project/raw/31399b7022ff128e6cfeb3f2db60b47aefcc622f/utils/ComplaintsCategory.java",
    "contents_url": "https://api.github.com/repos/SirKSteen/MicroStar_CableVision_Project/contents/utils/ComplaintsCategory.java?ref=31399b7022ff128e6cfeb3f2db60b47aefcc622f",
    "patch": "@@ -0,0 +1,5 @@\n+package utils;\n+\n+public enum ComplaintsCategory {\n+\tMILD, MODERATE, SEVERE\n+}"
  }
]
