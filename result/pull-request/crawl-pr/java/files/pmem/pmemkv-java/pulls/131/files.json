[
  {
    "sha": "45eae093d6921a495cc0589317c18ea38cde661f",
    "filename": "utils/parser.py",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/pmem/pmemkv-java/blob/c1fe5451decc76ff6fe91036c54c28775d0db3ef/utils/parser.py",
    "raw_url": "https://github.com/pmem/pmemkv-java/raw/c1fe5451decc76ff6fe91036c54c28775d0db3ef/utils/parser.py",
    "contents_url": "https://api.github.com/repos/pmem/pmemkv-java/contents/utils/parser.py?ref=c1fe5451decc76ff6fe91036c54c28775d0db3ef",
    "patch": "@@ -0,0 +1,40 @@\n+import os\n+from os.path import join, getsize\n+\n+for root, dirs, filenames in os.walk('results'):\n+    if len(dirs) == 0:\n+        parsed_results = []\n+        for filename in filenames:\n+            if filename.split('_')[0] == 'run':\n+                with open(root + '/' + filename) as file_object:\n+                    file_object.readline()\n+                    trimmed_lines = []\n+                    for line in file_object.readlines():\n+                        record = tuple(line.replace(',','').split(' '))\n+                        if record[0] != '[CLEANUP]' or record[0] != '[READ-FAILED]':\n+                            if record[0] == '[READ]' or record[0] == '[INSERT]' or record[0] == '[UPDATE]' or record[0] == '[OVERALL]': #in case of READ\n+                                try:\n+                                    int(record[1])\n+                                except ValueError: #if cannot cast it's fine\n+                                    trimmed_lines.append(record)\n+                    parsed_results.append([int(filename.split('_')[1].split('.')[0]), trimmed_lines])\n+\n+        parsed_results = sorted(parsed_results, key=lambda x: x[0], reverse=False)\n+        csv = []\n+        print root\n+        threads = 'Threads;#;'\n+        if len(parsed_results) <= 0:\n+            continue\n+        print '------CSV------'\n+        for i in range(0, len(parsed_results[0][1])):\n+            csv.append(parsed_results[0][1][i][0] + ';' + parsed_results[0][1][i][1] + ';')\n+        for test_result in parsed_results:\n+            threads += str(test_result[0]) + ';'\n+            for i, line in enumerate(test_result[1]):\n+                csv[i] += line[2].replace('\\n','').replace('.',',') + ';'\n+        csv.insert(0, threads)\n+        with open(root + '/results.csv','w') as csv_file:\n+            for x in csv:\n+                csv_file.write(x + '\\n')\n+                print x\n+            csv_file.close()"
  },
  {
    "sha": "a4a525e62716b0717dd8a9368a998cd02a5a91c5",
    "filename": "utils/run_suite.py",
    "status": "added",
    "additions": 202,
    "deletions": 0,
    "changes": 202,
    "blob_url": "https://github.com/pmem/pmemkv-java/blob/c1fe5451decc76ff6fe91036c54c28775d0db3ef/utils/run_suite.py",
    "raw_url": "https://github.com/pmem/pmemkv-java/raw/c1fe5451decc76ff6fe91036c54c28775d0db3ef/utils/run_suite.py",
    "contents_url": "https://api.github.com/repos/pmem/pmemkv-java/contents/utils/run_suite.py?ref=c1fe5451decc76ff6fe91036c54c28775d0db3ef",
    "patch": "@@ -0,0 +1,202 @@\n+#!/usr/bin/python2\n+import json\n+import os\n+import subprocess\n+\n+#comment\n+# SUITE write_workload\n+# THREADS 1 2 4 8 16 32 48 64 96\n+# JOURNALING enabled/disabled\n+# RECORDS 1000\n+# OPERATIONS 100\n+# READ_PROPORTION 0.0\n+# UPDATE_PROPORTION 0.0\n+# INSERT_PROPORTION 1.0\n+# YCSB_NUMA 1\n+# DROP_BEFORE\n+# ENDSUITE\n+\n+#GET PATHS FROM CONFIG FILE\n+PATH_TO_YCSB = ''\n+\n+path_configuration = open(\"path_configuration.txt\", \"r\")\n+for line in path_configuration:\n+    if line.startswith('YCSB_PATH='):\n+        arg = line.split(\"=\")\n+        if len(arg) > 1:\n+            PATH_TO_YCSB = arg[1].replace('\\n','')\n+        else:\n+            raise NameError('No path in YCSB_PATH!')\n+            \n+if not os.path.isdir(PATH_TO_YCSB):\n+    raise NameError('Wrong path to YCSB!')\n+\n+class Test:\n+    def __init__(self):\n+        self.pmemkv_engine = \"cmap\"\n+        self.pmemkv_dbsize = 0\n+        self.pmemkv_dbpath = \"/dev/shm/\"\n+        self.workload_type = \"workloada\"\n+        self.testName = \"\"\n+        self.threads = []\n+#        self.journaling = \"\"\n+        self.records = 0\n+        self.operations = 0\n+        self.read_proportion = -1.0\n+        self.update_proportion = -1.0\n+        self.insert_proportion = -1.0\n+        self.ycsb_numa = -1\n+# Actually we don't need creation\n+#        self.drop_before = -1\n+#        self.create_after_drop = -1\n+        self.is_load = -1\n+    def toJSON(self):\n+        return json.dumps(self, default=lambda o: o.__dict__, \n+                          sort_keys=True, indent=4)\n+\n+def getArgs(str):\n+    arguments = []\n+    for i in range(1, len(str)):\n+        arguments.append(str[i])\n+    return arguments\n+\n+KEYWORDS = set([\"THREADS\", \"JOURNALING\", \"RECORDS\", \"OPERATIONS\",\n+                \"READ_PROPORTION\", \"LOAD\", \"UPDATE_PROPORTION\",\n+                \"INSERT_PROPORTION\", \"YCSB_NUMA\", \"SUITE\", \"ENDSUITE\",\n+                \"DROP_BEFORE\", \"CREATE_AFTER_DROP\", \"PMEMKV_ENGINE\",\n+                \"PMEMKV_DBSIZE\", \"PMEMKV_DBPATH\", \"WORKLOAD_TYPE\"]) #Add keyword if you need to extend implementation\n+\n+# open meta file\n+with open(\"test_suite.txt\", \"r\") as configfile:\n+    configurations = []\n+    for line in configfile:\n+        splittedLine = line.split()\n+        if line == '\\n' or line.startswith('#'):\n+            continue\n+        if len(set.intersection(KEYWORDS, splittedLine)) != 1:\n+            print(splittedLine)\n+            raise NameError('Too many keywords in single line!')\n+\n+        #get args if exists\n+        args = getArgs(splittedLine)\n+        \n+        #if line starts from keyword we must read arguments\n+        if splittedLine[0] == \"SUITE\":\n+            configurations.append(Test())\n+            configurations[len(configurations)-1].testName = args[0]\n+        elif splittedLine[0] == \"THREADS\":\n+            configurations[len(configurations)-1].threads = args\n+        elif splittedLine[0] == \"LOAD\":\n+            configurations[len(configurations)-1].is_load = 1\n+        elif splittedLine[0] == \"RECORDS\":\n+            configurations[len(configurations)-1].records = args[0]\n+        elif splittedLine[0] == \"OPERATIONS\":\n+            configurations[len(configurations)-1].operations = args[0]\n+        elif splittedLine[0] == \"READ_PROPORTION\":\n+            configurations[len(configurations)-1].read_proportion = args[0]\n+        elif splittedLine[0] == \"UPDATE_PROPORTION\":\n+            configurations[len(configurations)-1].update_proportion = args[0]\n+        elif splittedLine[0] == \"INSERT_PROPORTION\":\n+            configurations[len(configurations)-1].insert_proportion = args[0]\n+        elif splittedLine[0] == \"YCSB_NUMA\":\n+            configurations[len(configurations)-1].ycsb_numa = args[0]\n+        elif splittedLine[0] == \"PMEMKV_ENGINE\":\n+            configurations[len(configurations)-1].pmemkv_engine = args[0]\n+        elif splittedLine[0] == \"PMEMKV_DBSIZE\":\n+            configurations[len(configurations)-1].pmemkv_dbsize = args[0]\n+        elif splittedLine[0] == \"PMEMKV_DBPATH\":\n+            configurations[len(configurations)-1].pmemkv_dbpath = args[0]\n+        elif splittedLine[0] == \"WORKLOAD_TYPE\":\n+            configurations[len(configurations)-1].workload_type = args[0]\n+        elif splittedLine[0] == \"ENDSUITE\":\n+            continue\n+        else:\n+            raise NameError('Unrecognized keyword')\n+configfile.close()\n+\n+print('Script read those tests:')\n+i = 1\n+for conf in configurations:\n+    print('{:>20} {:<12}'.format('Test#: ', str(i)))\n+    print('{:>20} {:<12}'.format(\"Name: \", conf.testName))\n+    print('{:>20} {:<12}'.format(\"Threads: \" ,str(conf.threads)))\n+    print('{:>20} {:<12}'.format(\"Records: \", conf.records))\n+    print('{:>20} {:<12}'.format(\"Operation: \", conf.operations))\n+    print('{:>20} {:<12}'.format(\"Read proportion: \", str(conf.read_proportion)))\n+    print('{:>20} {:<12}'.format(\"Update proportion: \", str(conf.update_proportion)))\n+    print('{:>20} {:<12}'.format(\"Insert proportion: \", str(conf.insert_proportion)))\n+    print('{:>20} {:<12}'.format(\"Is load: \", str(conf.is_load)))\n+    print('{:>20} {:<12}'.format(\"NUMA for YCSB: \", conf.ycsb_numa))\n+    print('{:>20} {:<12}'.format(\"Workload type: \", conf.workload_type))\n+    print('{:>20} {:<12}'.format(\"Pmemkv engine: \", conf.pmemkv_engine))\n+    print('{:>20} {:<12}'.format(\"Pmemkv size: \", conf.pmemkv_dbsize))\n+    print('{:>20} {:<12}'.format(\"Pmemkv path: \", conf.pmemkv_dbpath))\n+    print(\"\")\n+    i = i + 1\n+\n+# PUT CONFIGURATION TO FILE IN PROPER PATH\n+results_directory = \"results/\"\n+if not os.path.exists(results_directory):\n+    os.makedirs(results_directory)\n+i = 1\n+with open(results_directory + '/configurations.json', 'w') as jsonconfig:\n+    for conf in configurations:\n+        jsonconfig.write(conf.toJSON() + '\\n')\n+        if not os.path.exists(results_directory + conf.testName + '/'):\n+                os.makedirs(results_directory + conf.testName + '/')\n+        with open(results_directory + conf.testName + '/test_description.txt', 'a') as test_description:\n+            test_description.write('{:>20} {:<12}'.format('Test#: ', str(i)) + '\\n') #   'Test #' + str(i)\n+            test_description.write('{:>20} {:<12}'.format(\"Name: \", conf.testName) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Threads: \" ,str(conf.threads)) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Records: \", conf.records) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Operation: \", conf.operations) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Read proportion: \", str(conf.read_proportion)) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Update proportion: \", str(conf.update_proportion)) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Insert proportion: \", str(conf.insert_proportion)) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"NUMA for YCSB: \", conf.ycsb_numa) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Workload type: \", conf.workload_type) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Pmemkv engine: \", conf.pmemkv_engine) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Pmemkv size: \", conf.pmemkv_dbsize) + '\\n')\n+            test_description.write('{:>20} {:<12}'.format(\"Pmemkv path: \", conf.pmemkv_dbpath) + '\\n')\n+            test_description.write('\\n')\n+        i = i + 1\n+\n+# run specified configurations\n+generated_commands = []\n+for test in configurations:\n+    command_prefix = ''\n+    command_suffix = ''\n+    \n+    command_prefix = './run_workload.sh ' + test.testName\n+    \n+    if not test.is_load == 1:\n+        command_prefix += ' run '\n+    else:\n+        command_prefix += ' load '\n+\n+\n+    # Put path to YCSB main directory\n+    command_suffix += PATH_TO_YCSB + ' '\n+    # Put operation numbers\n+    command_suffix += test.records + ' ' + test.operations + ' '\n+    # Put workload ratios\n+    command_suffix += test.read_proportion + ' ' + test.update_proportion + ' ' + test.insert_proportion + ' '\n+    # Put NUMA node\n+    if test.ycsb_numa == -1:\n+        print('NUMA node is not set for test: ' + test.testName + '.')\n+    command_suffix += test.ycsb_numa + ' '\n+    # Put workload type\n+    command_suffix += test.workload_type + ' '\n+    # Put engine specific fields\n+    command_suffix += test.pmemkv_engine + ' ' + test.pmemkv_dbsize + ' ' + test.pmemkv_dbpath + ' '\n+\n+    for thread_no in test.threads:\n+        # DROP&CREATE BEFORE NEXT INSERTS\n+        generated_commands.append(command_prefix + thread_no + ' ' + command_suffix)\n+\n+# Generate script\n+with open('testplan.sh','w') as testplan:\n+    testplan.write('#!/bin/bash\\n')\n+    for x in generated_commands:\n+        testplan.write(x + '\\n')\n+print(generated_commands)"
  },
  {
    "sha": "42e5410412e1466c9e122c4475b492c03958b614",
    "filename": "utils/run_workload.sh",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/pmem/pmemkv-java/blob/c1fe5451decc76ff6fe91036c54c28775d0db3ef/utils/run_workload.sh",
    "raw_url": "https://github.com/pmem/pmemkv-java/raw/c1fe5451decc76ff6fe91036c54c28775d0db3ef/utils/run_workload.sh",
    "contents_url": "https://api.github.com/repos/pmem/pmemkv-java/contents/utils/run_workload.sh?ref=c1fe5451decc76ff6fe91036c54c28775d0db3ef",
    "patch": "@@ -0,0 +1,75 @@\n+#!/bin/bash\n+# Run workload from command line\n+#\n+# e.g. ./run_workload.sh run_cmap run 12 PATH_TO_YCSB 1000000 1000000\n+#             {0}          {1}    {2} {3}   {4}         {5}     {6}\n+#                        -1.0 -1.0 -1.0   1  workloadb csmap 80000000 DBPATH\n+#                         {7}  {8}  {9} {10}    {11}   {12}    {13}    {14}\n+# 1 - suite name\n+# 2 - ycsb phase: load/run\n+# 3 - thread count\n+# 4 - path to YCSB\n+# 5 - record count\n+# 6 - operation count\n+# 7 - read proportion\n+# 8 - update proportion\n+# 9 - insert proportion\n+# 10 - NUMA node for YCSB\n+# 11 - workload scenario (workload[a-f])\n+####### Engine related args\n+# 12 - pmemkv: engine name\n+# 13 - pmemkv: pool size\n+# 14 - pmemkv: path to pool\n+\n+YCSB_PATH=/home/kfilipek/ycsb/ # TODO(kfilipek): remove hardcoding\n+echo $YCSB_PATH\n+OLD_PATH=$(pwd)\n+\n+echo $@\n+echo \"Passed $# argumets to script\"\n+\n+if [ \"$#\" -ne \"14\" ]; \n+then\n+\techo \"Illegal number of parameters, should be 11. Check script documentation.\"\n+\texit 0\n+fi\n+\n+mkdir -p \"results/$1/\" # Create results directory: results/{test_suite_name}/\n+# Prepare future arguments for YCSB\n+NUMA_ARG=\"\"\n+READ_RATIO=\"\"\n+INSERT_RATIO=\"\"\n+UPDATE_RATIO=\"\"\n+if [ \"$7\" != \"-1.0\" ];\n+then\n+\tREAD_RATIO=\" -p readproportion=$7 \"\n+fi\n+if [ \"$9\" != \"-1.0\" ];\n+then\n+\tINSERT_RATIO=\" -p insertproportion=$9 \"\n+fi\n+if [ \"$8\" != \"-1.0\" ];\n+then\n+\tUPDATE_RATIO=\" -p updateproportion=$8 \"\n+fi\n+if [ \"${10}\" != \"-1\" ];\n+then\n+\tNUMA_ARG=\" numactl -N ${10} \"\n+fi\n+# echo \"READ_RATIO param: $READ_RATIO\"\n+# echo \"INSERT_RATIO param: $INSERT_RATIO\"\n+# echo \"UPDATE_RATIO param: $UPDATE_RATIO\"\n+# echo \"NUMA NODE param: $NUMA_ARG\"\n+#exit\n+\n+# TODOD(kfilipek): Implement splitting threads into processes\n+cd $YCSB_PATH\n+if [ \"${2}\" == \"load\" ];\n+then\n+\t# Remove old DB before new load phase\n+\techo \"Remove old DB: ${14}\"\n+\trm -rf ${14}\n+fi\n+rm -f ${14}\n+$NUMA_ARG bin/ycsb.sh $2 pmemkv -threads ${3} -P workloads/${11} -p hdrhistogram.percentiles=95,99,99.9,99.99 $READ_RATIO $INSERT_RATIO $UPDATE_RATIO -p recordcount=$5 -p operationcount=$6 -p pmemkv.engine=${12} -p pmemkv.dbsize=${13} -p pmemkv.dbpath=${14} > $OLD_PATH/results/$1/${2}_${3}.log\n+cd $OLD_PATH"
  }
]
