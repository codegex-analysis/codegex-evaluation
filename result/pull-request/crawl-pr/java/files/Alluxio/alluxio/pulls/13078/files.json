[
  {
    "sha": "4b9fca94d464ca7d46164753fa7e8e8ccf2e589f",
    "filename": "docs/en/compute/Trino.md",
    "status": "added",
    "additions": 229,
    "deletions": 0,
    "changes": 229,
    "blob_url": "https://github.com/Alluxio/alluxio/blob/b1f6a65af8e5ff1db27b6ba09ef91096406e730d/docs/en/compute/Trino.md",
    "raw_url": "https://github.com/Alluxio/alluxio/raw/b1f6a65af8e5ff1db27b6ba09ef91096406e730d/docs/en/compute/Trino.md",
    "contents_url": "https://api.github.com/repos/Alluxio/alluxio/contents/docs/en/compute/Trino.md?ref=b1f6a65af8e5ff1db27b6ba09ef91096406e730d",
    "patch": "@@ -0,0 +1,229 @@\n+---\n+layout: global\n+title: Running Trino with Alluxio\n+nickname: Trino\n+group: Compute Integrations\n+priority: 2\n+---\n+\n+[Trino](https://trino.io/)\n+is an open source distributed SQL query engine for running interactive analytic queries\n+on data at a large scale.\n+This guide describes how to run queries against Trino with Alluxio as a distributed caching layer,\n+for any data storage systems that Alluxio supports (AWS S3, HDFS, Azure Blob Store, NFS, and more).\n+Alluxio allows Trino to access data regardless of the data source and transparently cache frequently\n+accessed data (e.g., tables commonly used) into Alluxio distributed storage.\n+Co-locating Alluxio workers with Trino workers improves data locality and reduces the I/O access\n+latency when other storage systems are remote or the network is slow or congested.\n+\n+* Table of Contents\n+{:toc}\n+\n+## Using Trino with the Alluxio Catalog Service\n+\n+Currently, there are 2 ways to enable Trino to interact with Alluxio:\n+* Trino interacts with the [Alluxio Catalog Service]({{ '/en/core-services/Catalog.html' | relativize_url }})\n+* Trino interacts directly with the Hive Metastore (with table definitions updated to use Alluxio paths)\n+\n+The primary benefits for using Trino with the Alluxio Catalog Service are\n+- Simpler deployments of Alluxio with Trino (no modifications to the Hive Metastore)\n+- Enabling schema-aware optimizations (transformations like coalescing and file conversions).\n+\n+Currently, the catalog service is limited to read-only workloads.\n+\n+For more details and instructions on how to use the Alluxio Catalog Service with Trino, please\n+visit the [Alluxio Catalog Service documentation]({{ '/en/core-services/Catalog.html' | relativize_url }}).\n+\n+The rest of this page discusses the alternative approach of Trino directly interacting with the\n+Hive Metastore, while IO access is performed through Alluxio.\n+\n+## Prerequisites\n+\n+* Setup Java for Java 11, at least version 11.0.7, 64-bitï¼Œas required by Trino\n+* Setup Python version 2.6.x, 2.7.x, or 3.x, as required by Trino\n+* [Deploy Trino](https://trino.io/docs/current/installation/deployment.html).\n+This guide is tested with `Trino-352`.\n+* Alluxio has been set up and is running.\n+* Make sure that the Alluxio client jar is available.\n+  This Alluxio client jar file can be found at `{{site.ALLUXIO_CLIENT_JAR_PATH}}` in the tarball\n+  downloaded from Alluxio [download page](https://www.alluxio.io/download).\n+* Make sure that Hive Metastore is running to serve metadata information of Hive tables.\n+\n+## Basic Setup\n+\n+### Configure Trino to connect to Hive Metastore\n+\n+Trino gets the database and table metadata information (including file system locations) from\n+the Hive Metastore, via Trino's Hive connector.\n+Here is a example Trino configuration file `${Trino_HOME}/etc/catalog/hive.properties`,\n+for a catalog using the Hive connector, where the metastore is located on `localhost`.\n+\n+```properties\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://localhost:9083\n+```\n+\n+### Distribute the Alluxio client jar to all Trino servers\n+\n+In order for Trino to be able to communicate with the Alluxio servers, the Alluxio client\n+jar must be in the classpath of Trino servers.\n+Put the Alluxio client jar `{{site.ALLUXIO_CLIENT_JAR_PATH}}` into the directory\n+`${Trino_HOME}/plugin/hive-hadoop2/`\n+(this directory may differ across versions) on all Trino servers. Restart the Trino workers and\n+coordinator:\n+\n+```console\n+$ ${Trino_HOME}/bin/launcher restart\n+```\n+\n+After completing the basic configuration,\n+Trino should be able to access data in Alluxio.\n+To configure more advanced features for Trino (e.g., connect to Alluxio with HA), please\n+follow the instructions at [Advanced Setup](#advanced-setup).\n+\n+## Examples: Use Trino to Query Tables on Alluxio\n+\n+### Create a Hive table on Alluxio\n+\n+Here is an example to create an internal table in Hive backed by files in Alluxio.\n+You can download a data file (e.g., `ml-100k.zip`) from\n+[http://grouplens.org/datasets/movielens/](http://grouplens.org/datasets/movielens/).\n+Unzip this file and upload the file `u.user` into `/ml-100k/` in Alluxio:\n+\n+```console\n+$ ./bin/alluxio fs mkdir /ml-100k\n+$ ./bin/alluxio fs copyFromLocal /path/to/ml-100k/u.user alluxio:///ml-100k\n+```\n+\n+Create an external Hive table pointing to the Alluxio file location.\n+\n+```\n+hive> CREATE TABLE u_user (\n+  userid INT,\n+  age INT,\n+  gender CHAR(1),\n+  occupation STRING,\n+  zipcode STRING)\n+ROW FORMAT DELIMITED\n+FIELDS TERMINATED BY '|'\n+STORED AS TEXTFILE\n+LOCATION 'alluxio://master_hostname:port/ml-100k';\n+```\n+\n+You can see the directory and files that Hive creates by viewing the Alluxio WebUI at `http://master_hostname:19999` \n+\n+### Start Hive Metastore\n+\n+Ensure your Hive Metastore service is running. Hive Metastore listens on port `9083` by\n+default. If it is not running, execute the following command to start the metastore:\n+\n+```console\n+$ ${HIVE_HOME}/bin/hive --service metastore\n+```\n+\n+### Start Trino server\n+\n+Start your Trino server. Trino server runs on port `8080` by default (configurable with\n+`http-server.http.port` in `${Trino_HOME}/etc/config.properties` ):\n+\n+```console\n+$ ${Trino_HOME}/bin/launcher run\n+```\n+\n+### Query tables using Trino\n+\n+Follow [Trino CLI instructions](https://trino.io/docs/current/installation/cli.html)\n+to download the `trino-cli-<Trino_VERSION>-executable.jar`,\n+rename it to `trino`, and make it executable with `chmod +x`\n+(sometimes the executable `trino` exists in `${trino_HOME}/bin/trino` and you can use it\n+directly).\n+\n+Run a single query (replace `localhost:8080` with your actual Trino server hostname and port):\n+\n+```console\n+$ ./trino --server localhost:8080 --execute \"use default; select * from u_user limit 10;\" \\\n+  --catalog hive --debug\n+```\n+\n+## Advanced Setup\n+\n+### Customize Alluxio User Properties\n+\n+To configure additional Alluxio properties, you can append the conf path (i.e.\n+`${ALLUXIO_HOME}/conf`) containing [`alluxio-site.properties`]({{ '/en/operation/Configuration.html' | relativize_url }})\n+to Trino's JVM config at `etc/jvm.config` under Trino folder. The advantage of this approach is to\n+have all the Alluxio properties set within the same file of `alluxio-site.properties`.\n+\n+```bash\n+...\n+-Xbootclasspath/a:<path-to-alluxio-conf>\n+```\n+\n+Alternatively, add Alluxio properties to the Hadoop configuration files\n+(`core-site.xml`, `hdfs-site.xml`), and use the Trino property `hive.config.resources` in the\n+file `${Trino_HOME}/etc/catalog/hive.properties` to point to the Hadoop resource locations for\n+every Trino worker. \n+\n+```\n+hive.config.resources=/<PATH_TO_CONF>/core-site.xml,/<PATH_TO_CONF>/hdfs-site.xml\n+```\n+\n+#### Example: connect to Alluxio with HA\n+\n+If the Alluxio HA cluster uses internal leader election,\n+set the Alluxio cluster property appropriately in the\n+`alluxio-site.properties` file which is on the classpath.\n+\n+```properties\n+alluxio.master.rpc.addresses=master_hostname_1:19998,master_hostname_2:19998,master_hostname_3:19998\n+```\n+\n+Alternatively you can add the property to the Hadoop `core-site.xml` configuration\n+which is contained by `hive.config.resources`.\n+\n+```xml\n+<configuration>\n+  <property>\n+    <name>alluxio.master.rpc.addresses</name>\n+    <value>master_hostname_1:19998,master_hostname_2:19998,master_hostname_3:19998</value>\n+  </property>\n+</configuration>\n+```\n+\n+For information about how to connect to Alluxio HA cluster using Zookeeper-based leader election,\n+please refer to [HA mode client configuration parameters]({{ '/en/deploy/Running-Alluxio-On-a-HA-Cluster.html' | relativize_url }}#specify-alluxio-service-in-configuration-parameters).\n+\n+#### Example: change default Alluxio write type\n+\n+For example, change\n+`alluxio.user.file.writetype.default` from default `ASYNC_THROUGH` to `CACHE_THROUGH`.\n+\n+One can specify the property in `alluxio-site.properties` and distribute this file to the classpath\n+of each Trino node:\n+\n+```properties\n+alluxio.user.file.writetype.default=CACHE_THROUGH\n+```\n+\n+Alternatively, modify `conf/hive-site.xml` to include:\n+\n+```xml\n+<property>\n+  <name>alluxio.user.file.writetype.default</name>\n+  <value>CACHE_THROUGH</value>\n+</property>\n+```\n+\n+### Increase parallelism\n+\n+Trino's Hive connector uses the config `hive.max-split-size` to control the parallelism of the\n+query.\n+For Alluxio 1.6 or earlier, it is recommended to set this size no less than Alluxio's block\n+size to avoid the read contention within the same block.\n+For later Alluxio versions, this is no longer an issue because of Alluxio's async caching abilities.\n+\n+### Avoid Trino timeouts when reading large files\n+\n+It is recommended to increase `alluxio.user.streaming.data.timeout` to a bigger value (e.g\n+`10min`) to avoid a timeout failure when reading large files from remote workers.\n+"
  }
]
