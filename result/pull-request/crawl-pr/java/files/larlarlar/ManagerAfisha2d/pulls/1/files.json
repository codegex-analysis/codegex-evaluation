[
  {
    "sha": "2b157f303eb49b084d4759f87718f5087f3a8662",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/larlarlar/ManagerAfisha2d/blob/b5253c9684251002039e709e075a33b057ecfbdc/pom.xml",
    "raw_url": "https://github.com/larlarlar/ManagerAfisha2d/raw/b5253c9684251002039e709e075a33b057ecfbdc/pom.xml",
    "contents_url": "https://api.github.com/repos/larlarlar/ManagerAfisha2d/contents/pom.xml?ref=b5253c9684251002039e709e075a33b057ecfbdc",
    "patch": "@@ -41,6 +41,9 @@\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n                 <version>2.22.2</version>\n+                <configuration>\n+                    <failIfNoTests>true</failIfNoTests>\n+                </configuration>\n             </plugin>\n             <plugin>\n                 <groupId>org.jacoco</groupId>"
  },
  {
    "sha": "c2d02bbf3a7d1d70f5892bf5b30dfe47184900fa",
    "filename": "src/main/java/ru/netology/domain/PurchaseItem.java",
    "status": "removed",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/larlarlar/ManagerAfisha2d/blob/60b45d644c43f10f29ba7ddea45123d5d60abf2f/src/main/java/ru/netology/domain/PurchaseItem.java",
    "raw_url": "https://github.com/larlarlar/ManagerAfisha2d/raw/60b45d644c43f10f29ba7ddea45123d5d60abf2f/src/main/java/ru/netology/domain/PurchaseItem.java",
    "contents_url": "https://api.github.com/repos/larlarlar/ManagerAfisha2d/contents/src/main/java/ru/netology/domain/PurchaseItem.java?ref=60b45d644c43f10f29ba7ddea45123d5d60abf2f",
    "patch": "@@ -1,17 +0,0 @@\n-package ru.netology.domain;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n-\n-@Data\n-@NoArgsConstructor\n-@AllArgsConstructor\n-\n-public class PurchaseItem {\n-    private int id;\n-    private int productId;\n-    private String productName;\n-    private int productPrice;\n-    private int count;\n-}"
  },
  {
    "sha": "52f05b643cf9d209e3cb5297c206bb134151e20e",
    "filename": "src/main/java/ru/netology/manager/AfishaManager.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/larlarlar/ManagerAfisha2d/blob/b5253c9684251002039e709e075a33b057ecfbdc/src/main/java/ru/netology/manager/AfishaManager.java",
    "raw_url": "https://github.com/larlarlar/ManagerAfisha2d/raw/b5253c9684251002039e709e075a33b057ecfbdc/src/main/java/ru/netology/manager/AfishaManager.java",
    "contents_url": "https://api.github.com/repos/larlarlar/ManagerAfisha2d/contents/src/main/java/ru/netology/manager/AfishaManager.java?ref=b5253c9684251002039e709e075a33b057ecfbdc",
    "patch": "@@ -0,0 +1,48 @@\n+package ru.netology.manager;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.NoArgsConstructor;\n+import ru.netology.domain.Afisha;\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+\n+public class AfishaManager {\n+    private Afisha[] items = new Afisha[0];\n+    int movieCount = 10;\n+\n+    public AfishaManager(int movieCount) {\n+        if (movieCount >= 0) {\n+            this.movieCount = movieCount;\n+        }\n+    }\n+\n+    public Afisha[] getNewest() {\n+        int count;\n+        if (items.length > movieCount) {\n+            count = movieCount;\n+        } else {\n+            count = items.length;\n+        }\n+\n+        Afisha[] result = new Afisha[count];\n+        for (int i = 0; i < result.length; i++) {\n+            int index = items.length - i - 1;\n+            result[i] = items[index];\n+        }\n+        return result;\n+    }\n+\n+    public Afisha[] getItems() {\n+        return items;\n+    }\n+\n+    public void add(Afisha item) {\n+        int length = items.length + 1;\n+        Afisha[] tmp = new Afisha[length];\n+        System.arraycopy(items, 0, tmp, 0, items.length);\n+        int lastIndex = tmp.length - 1;\n+        tmp[lastIndex] = item;\n+        items = tmp;\n+    }\n+}"
  },
  {
    "sha": "4c21b929c332133860a7bb33c1444b2fa56b0f13",
    "filename": "src/main/java/ru/netology/manager/CartManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 48,
    "changes": 48,
    "blob_url": "https://github.com/larlarlar/ManagerAfisha2d/blob/60b45d644c43f10f29ba7ddea45123d5d60abf2f/src/main/java/ru/netology/manager/CartManager.java",
    "raw_url": "https://github.com/larlarlar/ManagerAfisha2d/raw/60b45d644c43f10f29ba7ddea45123d5d60abf2f/src/main/java/ru/netology/manager/CartManager.java",
    "contents_url": "https://api.github.com/repos/larlarlar/ManagerAfisha2d/contents/src/main/java/ru/netology/manager/CartManager.java?ref=60b45d644c43f10f29ba7ddea45123d5d60abf2f",
    "patch": "@@ -1,48 +0,0 @@\n-package ru.netology.manager;\n-\n-import ru.netology.domain.PurchaseItem;\n-\n-public class CartManager {\n-    private PurchaseItem[] items = new PurchaseItem[0];\n-    public void add(PurchaseItem item) {\n-        // создаём новый массив размером на единицу больше\n-        int length = items.length + 1;\n-        PurchaseItem[] tmp = new PurchaseItem[length];\n-        // itar + tab\n-        // копируем поэлементно\n-        // for (int i = 0; i < items.length; i++) {\n-        //   tmp[i] = items[i];\n-        // }\n-        System.arraycopy(items, 0, tmp, 0, items.length);\n-        // кладём последним наш элемент\n-        int lastIndex = tmp.length - 1;\n-        tmp[lastIndex] = item;\n-        items = tmp;\n-    }\n-\n-    public PurchaseItem[] getAll() {\n-        PurchaseItem[] result = new PurchaseItem[items.length];\n-        // перебираем массив в прямом порядке\n-        // но кладём в результаты в обратном\n-        for (int i = 0; i < result.length; i++) {\n-            int index = items.length - i - 1;\n-            result[i] = items[index];\n-        }\n-        return result;\n-    }\n-\n-    // наивная реализация\n-    public void removeById(int id) {\n-        int length = items.length - 1;\n-        PurchaseItem[] tmp = new PurchaseItem[length];\n-        int index = 0;\n-        for (PurchaseItem item : items) {\n-            if (item.getId() != id) {\n-                tmp[index] = item;\n-                index++;\n-            }\n-        }\n-        // меняем наши элементы\n-        items = tmp;\n-    }\n-}"
  },
  {
    "sha": "e90dd728aa09acf6e47f52dcf5e1b40ac18f5811",
    "filename": "src/test/java/AfishaManagerTest.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/larlarlar/ManagerAfisha2d/blob/b5253c9684251002039e709e075a33b057ecfbdc/src/test/java/AfishaManagerTest.java",
    "raw_url": "https://github.com/larlarlar/ManagerAfisha2d/raw/b5253c9684251002039e709e075a33b057ecfbdc/src/test/java/AfishaManagerTest.java",
    "contents_url": "https://api.github.com/repos/larlarlar/ManagerAfisha2d/contents/src/test/java/AfishaManagerTest.java?ref=b5253c9684251002039e709e075a33b057ecfbdc",
    "patch": "@@ -0,0 +1,73 @@\n+import org.junit.jupiter.api.Test;\n+import ru.netology.domain.Afisha;\n+import ru.netology.manager.AfishaManager;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+\n+class AfishaManagerTest {\n+\n+    private AfishaManager manager = new AfishaManager();\n+    private Afisha first = new Afisha(1, \"Movie.one\", \"url.one\", \"genre.one\");\n+    private Afisha second = new Afisha(2, \"Movie.two\", \"url.two\", \"genre.two\");\n+    private Afisha third = new Afisha(3, \"Movie.three\", \"url.three\", \"genre.three\");\n+    private Afisha fourth = new Afisha(4, \"Movie.four\", \"url.four\", \"genre.four\");\n+    private Afisha fivth = new Afisha(5, \"Movie.five\", \"url.five\", \"genre.five\");\n+    private Afisha sixth = new Afisha(6, \"Movie.six\", \"url.six\", \"genre.six\");\n+    private Afisha seventh = new Afisha(7, \"Movie.seven\", \"url.seven\", \"genre.seven\");\n+    private Afisha eighth = new Afisha(8, \"Movie.eight\", \"url.eight\", \"genre.eight\");\n+    private Afisha ninth = new Afisha(9, \"Movie.nine\", \"url.nine\", \"genre.nine\");\n+    private Afisha tenth = new Afisha(10, \"Movie.ten\", \"url.ten\", \"genre.ten\");\n+    private Afisha eleventh = new Afisha(11, \"Movie.eleven\", \"url.eleven\", \"genre.eleven\");\n+    // private Afisha twelve = new Afisha(12, \"Movie.twelve\", \"url.twelve\", \"genre.twelve\");\n+\n+    void setMovie() {\n+        manager.add(first);\n+        manager.add(second);\n+        manager.add(third);\n+        manager.add(fourth);\n+        manager.add(fivth);\n+        manager.add(sixth);\n+        manager.add(seventh);\n+        manager.add(eighth);\n+        manager.add(ninth);\n+        manager.add(tenth);\n+        manager.add(eleventh);\n+        //   manager.add(twelve);\n+    }\n+\n+    @Test\n+    void shouldAddNoFilm() {\n+        Afisha[] expected = new Afisha[0];\n+        Afisha[] actual = manager.getItems();\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void shouldGetAllButNewestFirst() {\n+        manager = new AfishaManager(10);\n+        setMovie();\n+        Afisha[] actual = manager.getNewest();\n+        Afisha[] expected = new Afisha[]{eleventh, tenth, ninth, eighth, seventh, sixth, fivth, fourth, third, second};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void shouldGetAFewNewestFirst() {\n+        manager = new AfishaManager(5);\n+        setMovie();\n+        Afisha[] actual = manager.getNewest();\n+        Afisha[] expected = new Afisha[]{eleventh, tenth, ninth, eighth, seventh};\n+        assertArrayEquals(expected, actual);\n+    }\n+\n+    @Test\n+    //в данном тесте не задаю количество фильмов, которые хочу, чтобы афиша показала и по умолчанию выпадают 10 последних\n+    void shouldntGetMoreThanTen() {\n+        manager = new AfishaManager();\n+        setMovie();\n+        Afisha[] actual = manager.getNewest();\n+        Afisha[] expected = new Afisha[]{eleventh, tenth, ninth, eighth, seventh, sixth, fivth, fourth, third, second};\n+        assertArrayEquals(expected, actual);\n+    }\n+}\n+"
  }
]
