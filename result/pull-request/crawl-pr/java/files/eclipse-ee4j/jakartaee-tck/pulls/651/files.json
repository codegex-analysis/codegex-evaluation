[
  {
    "sha": "274f028177484378a4684a67d03d9d87c4f75629",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/Client.java",
    "status": "modified",
    "additions": 1,
    "deletions": 43,
    "changes": 44,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/Client.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/Client.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/Client.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,17 +20,11 @@\n \n package com.sun.ts.tests.ejb30.bb.session.stateless.annotation.resource;\n \n-import javax.naming.NamingException;\n-\n-import org.omg.CORBA.ORB;\n-\n import com.sun.javatest.Status;\n import com.sun.ts.lib.deliverable.cts.resource.Dog;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ClientBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n import com.sun.ts.tests.ejb30.common.annotation.resource.UserTransactionNegativeIF;\n-import com.sun.ts.tests.ejb30.common.helper.ServiceLocator;\n-import com.sun.ts.tests.ejb30.common.helper.TLogger;\n \n import jakarta.annotation.Resource;\n import jakarta.ejb.EJB;\n@@ -49,9 +43,6 @@\n   @EJB(beanName = \"UserTransactionNegativeBean\")\n   private static UserTransactionNegativeIF userTransactionNegativeBean;\n \n-  @Resource\n-  private static ORB orb;\n-\n   @Resource(name = \"dog\", description = \"inject a custom jndi resource\")\n   private static Dog dog;\n \n@@ -85,30 +76,6 @@ public static void main(String[] args) {\n     s.exit();\n   }\n \n-  /*\n-   * @testName: clientOrbTest\n-   * \n-   * @assertion_ids:\n-   * \n-   * @test_Strategy:\n-   *\n-   */\n-  public void clientOrbTest() throws Fault {\n-    if (orb == null) {\n-      throw new Fault(\"orb is not injected\");\n-    } else {\n-      TLogger.log(\"orb is injected: \" + orb);\n-    }\n-    try {\n-      ORB orb2 = (ORB) ServiceLocator.lookup(\"java:comp/ORB\");\n-      if (orb2 == null) {\n-        throw new Fault(\"orb from lookup is null\");\n-      }\n-    } catch (NamingException e) {\n-      throw new Fault(e);\n-    }\n-  }\n-\n   /*\n    * @testName: ejbContextTest\n    * \n@@ -226,15 +193,6 @@ public void clientOrbTest() throws Fault {\n    *\n    */\n \n-  /*\n-   * @testName: orbTest\n-   * \n-   * @assertion_ids:\n-   * \n-   * @test_Strategy:\n-   *\n-   */\n-\n   /*\n    * @testName: customResourceInjectionInAppclient\n    * "
  },
  {
    "sha": "e9518681858937888601822856e36f1a1e62ac2d",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceFieldBean.java",
    "status": "modified",
    "additions": 1,
    "deletions": 14,
    "changes": 15,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceFieldBean.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceFieldBean.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceFieldBean.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -24,8 +24,6 @@\n \n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.lib.deliverable.cts.resource.Dog;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceBeanBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n@@ -174,13 +172,6 @@ protected String getQueueName() {\n     return \"queue\";\n   }\n \n-  @Resource(name = \"myOrb\", type = ORB.class, description = \"corba orb\", shareable = false)\n-  private Object orb;\n-\n-  protected String getOrbName() {\n-    return \"myOrb\";\n-  }\n-\n   @Resource(name = \"myTransactionSynchronizationRegistry\", description = \"TransactionSynchronizationRegistry injected\")\n   private TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n \n@@ -241,10 +232,6 @@ protected UserTransaction getUserTransaction() {\n     return ut;\n   }\n \n-  protected ORB getOrb() {\n-    return (ORB) this.orb;\n-  }\n-\n   protected TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {\n     return transactionSynchronizationRegistry;\n   }"
  },
  {
    "sha": "2582b3075a03978e12f4890f005714ffa02bbaf1",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceSetterBean.java",
    "status": "modified",
    "additions": 1,
    "deletions": 18,
    "changes": 19,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceSetterBean.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceSetterBean.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceSetterBean.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -24,8 +24,6 @@\n \n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.lib.deliverable.cts.resource.Dog;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceBeanBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n@@ -319,21 +317,6 @@ private void setUserTransaction(UserTransaction ut) {\n \n   //////////////////////////////////////////////////////////////////////\n \n-  protected String getOrbName() {\n-    return \"myOrb\";\n-  }\n-\n-  @Resource(name = \"myOrb\", type = ORB.class, description = \"corba orb\", shareable = false)\n-  private void setOrb(Object orb) {\n-    this.orb = orb;\n-  }\n-\n-  protected ORB getOrb() {\n-    return (ORB) this.orb;\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////\n-\n   protected String getTransactionSynchronizationRegistryName() {\n     return \"myTransactionSynchronizationRegistry\";\n   }"
  },
  {
    "sha": "e2278686c92bf5bb8b3da7a7dd4be5369dc34264",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceTypeBean.java",
    "status": "modified",
    "additions": 1,
    "deletions": 17,
    "changes": 18,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceTypeBean.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceTypeBean.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resource/ResourceTypeBean.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,16 +20,13 @@\n \n package com.sun.ts.tests.ejb30.bb.session.stateless.annotation.resource;\n \n-import static com.sun.ts.tests.ejb30.common.annotation.resource.Constants.ORB_JNDI_NAME;\n import static com.sun.ts.tests.ejb30.common.annotation.resource.Constants.TRANSACTION_SYNCHRONIZATION_REGISTRY_JNDI_NAME;\n \n import java.net.URL;\n \n import javax.naming.NamingException;\n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.lib.deliverable.cts.resource.Dog;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceBeanBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n@@ -71,7 +68,6 @@\n     @Resource(name = \"connectionFactoryT\", type = ConnectionFactory.class),\n     @Resource(name = \"queue\", type = Queue.class),\n     @Resource(name = \"topic\", type = Topic.class),\n-    @Resource(name = \"myOrb\", type = ORB.class, description = \"corba orb\", shareable = false),\n     @Resource(name = \"myTransactionSynchronizationRegistry\", type = TransactionSynchronizationRegistry.class, description = \"TransactionSynchronizationRegistry type-level injection\"),\n     @Resource(name = \"myTimerService\", type = TimerService.class, description = \"TimerService type-level injection\"),\n     @Resource(name = \"dog\", type = Dog.class, description = \"a custom resouce\") })\n@@ -133,10 +129,6 @@ protected String getQueueName() {\n     return \"queue\";\n   }\n \n-  protected String getOrbName() {\n-    return \"myOrb\";\n-  }\n-\n   protected String getTransactionSynchronizationRegistryName() {\n     return \"myTransactionSynchronizationRegistry\";\n   }\n@@ -215,14 +207,6 @@ protected Topic getTopic() {\n     return (UserTransaction) getEJBContext().lookup(getUserTransactionName());\n   }\n \n-  protected ORB getOrb() {\n-    try {\n-      return (ORB) ServiceLocator.lookup(ORB_JNDI_NAME);\n-    } catch (NamingException e) {\n-      e.printStackTrace();\n-    }\n-    return null;\n-  }\n \n   protected TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {\n     try {"
  },
  {
    "sha": "6cdad237267591c0fe8ff1dccd264105cd038ccf",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/Client.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/Client.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/Client.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/Client.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -174,10 +174,4 @@ public static void main(String[] args) {\n    * \n    */\n \n-  /*\n-   * @todo how to declare it in dd? testName: orbTest\n-   * \n-   * @test_Strategy:\n-   * \n-   */\n }"
  },
  {
    "sha": "1538c3d9c8ca25ac8cbd7fcc33969d696c2eb522",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/ResourceFieldBean.java",
    "status": "modified",
    "additions": 1,
    "deletions": 15,
    "changes": 16,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/ResourceFieldBean.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/ResourceFieldBean.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/ResourceFieldBean.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -24,8 +24,6 @@\n \n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceBeanBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n \n@@ -140,14 +138,6 @@ protected String getQueueName() {\n     return \"queue\";\n   }\n \n-  // @Resource(name=\"myOrb\", type=ORB.class, description=\"corba orb\",\n-  // shareable=false)\n-  private ORB orb;\n-\n-  protected String getOrbName() {\n-    return \"myOrb\";\n-  }\n-\n   public ResourceFieldBean() {\n   }\n \n@@ -194,8 +184,4 @@ protected UserTransaction getUserTransaction() {\n     return userTransaction;\n   }\n \n-  protected ORB getOrb() {\n-    return this.orb;\n-  }\n-\n }"
  },
  {
    "sha": "59264a291547ae9e4676a1e90fcaca86de059131",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/ResourceSetterBean.java",
    "status": "modified",
    "additions": 1,
    "deletions": 15,
    "changes": 16,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/ResourceSetterBean.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/ResourceSetterBean.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourcenoat/ResourceSetterBean.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -24,8 +24,6 @@\n \n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceBeanBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n \n@@ -71,8 +69,6 @@\n \n   private Queue queue;\n \n-  private ORB orb;\n-\n   public ResourceSetterBean() {\n   }\n \n@@ -268,14 +264,4 @@ protected String getOrbName() {\n     return \"myOrb\";\n   }\n \n-  // @Resource(name=\"myOrb\", type=ORB.class, description=\"corba orb\",\n-  // shareable=false)\n-  private void setOrb(ORB orb) {\n-    this.orb = orb;\n-  }\n-\n-  protected ORB getOrb() {\n-    return this.orb;\n-  }\n-\n }"
  },
  {
    "sha": "32a62ca6be5911e94a6166c3a77b2971bd80d3ab",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/Client.java",
    "status": "modified",
    "additions": 1,
    "deletions": 8,
    "changes": 9,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/Client.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/Client.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/Client.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -170,11 +170,4 @@ public static void main(String[] args) {\n    * @test_Strategy:\n    * \n    */\n-\n-  /*\n-   * @todo how to declare it in dd? testName: orbTest\n-   * \n-   * @test_Strategy:\n-   * \n-   */\n }"
  },
  {
    "sha": "d5eeacef91fc7818fb137fb5916328d28005fa91",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceFieldBean.java",
    "status": "modified",
    "additions": 1,
    "deletions": 14,
    "changes": 15,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceFieldBean.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceFieldBean.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceFieldBean.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -24,8 +24,6 @@\n \n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceBeanBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n \n@@ -137,13 +135,6 @@ protected String getQueueName() {\n     return \"queue\";\n   }\n \n-  @Resource(name = \"myOrb\", type = ORB.class, description = \"corba orb\", shareable = false)\n-  private ORB orb;\n-\n-  protected String getOrbName() {\n-    return \"myOrb\";\n-  }\n-\n   public ResourceFieldBean() {\n   }\n \n@@ -190,8 +181,4 @@ protected UserTransaction getUserTransaction() {\n     return ut;\n   }\n \n-  protected ORB getOrb() {\n-    return this.orb;\n-  }\n-\n }"
  },
  {
    "sha": "a07c8cdb7367e93a49066a033193b4867480946a",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceSetterBean.java",
    "status": "modified",
    "additions": 1,
    "deletions": 14,
    "changes": 15,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceSetterBean.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceSetterBean.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceSetterBean.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -24,8 +24,6 @@\n \n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceBeanBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n \n@@ -72,8 +70,6 @@\n \n   private Queue queue;\n \n-  private ORB orb;\n-\n   public ResourceSetterBean() {\n   }\n \n@@ -264,13 +260,4 @@ protected String getOrbName() {\n     return \"myOrb\";\n   }\n \n-  @Resource(name = \"myOrb\", type = ORB.class, description = \"corba orb\", shareable = false)\n-  private void setOrb(ORB orb) {\n-    this.orb = orb;\n-  }\n-\n-  protected ORB getOrb() {\n-    return this.orb;\n-  }\n-\n }"
  },
  {
    "sha": "27151473e0267852c6ba90fa05868187e1a41be7",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceTypeBean.java",
    "status": "modified",
    "additions": 2,
    "deletions": 20,
    "changes": 22,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceTypeBean.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceTypeBean.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/annotation/resourceoverride/ResourceTypeBean.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,15 +20,11 @@\n \n package com.sun.ts.tests.ejb30.bb.session.stateless.annotation.resourceoverride;\n \n-import static com.sun.ts.tests.ejb30.common.annotation.resource.Constants.ORB_JNDI_NAME;\n-\n import java.net.URL;\n \n import javax.naming.NamingException;\n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceBeanBase;\n import com.sun.ts.tests.ejb30.common.annotation.resource.ResourceIF;\n import com.sun.ts.tests.ejb30.common.helper.ServiceLocator;\n@@ -63,8 +59,7 @@\n     @Resource(name = \"connectionFactoryQ\", type = ConnectionFactory.class, authenticationType = AuthenticationType.APPLICATION, shareable = false, description = \"<resource-ref>\"),\n     @Resource(name = \"connectionFactoryT\", type = ConnectionFactory.class, authenticationType = AuthenticationType.APPLICATION, shareable = false, description = \"<resource-ref>\"),\n     @Resource(name = \"queue\", type = Queue.class, description = \"<resource-env-ref>\"),\n-    @Resource(name = \"topic\", type = Topic.class, description = \"<resource-env-ref>\"),\n-    @Resource(name = \"myOrb\", type = ORB.class, description = \"corba orb\", shareable = false) })\n+    @Resource(name = \"topic\", type = Topic.class, description = \"<resource-env-ref>\") })\n \n public class ResourceTypeBean extends ResourceBeanBase implements ResourceIF {\n \n@@ -115,10 +110,6 @@ protected String getQueueName() {\n     return \"queue\";\n   }\n \n-  protected String getOrbName() {\n-    return \"myOrb\";\n-  }\n-\n   public ResourceTypeBean() {\n   }\n \n@@ -177,13 +168,4 @@ protected Topic getTopic() {\n     return getEJBContext().getUserTransaction();\n   }\n \n-  protected ORB getOrb() {\n-    try {\n-      return (ORB) ServiceLocator.lookup(ORB_JNDI_NAME);\n-    } catch (NamingException e) {\n-      e.printStackTrace();\n-    }\n-    return null;\n-  }\n-\n }"
  },
  {
    "sha": "7d0d865e6e6bac7f6105798d157481256a495e64",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/basic/RemoteCalculatorBean4Super.java",
    "status": "modified",
    "additions": 5,
    "deletions": 11,
    "changes": 16,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/basic/RemoteCalculatorBean4Super.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/basic/RemoteCalculatorBean4Super.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/basic/RemoteCalculatorBean4Super.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,24 +20,18 @@\n \n package com.sun.ts.tests.ejb30.bb.session.stateless.basic;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.calc.BaseRemoteCalculator;\n import com.sun.ts.tests.ejb30.common.calc.RemoteCalculator;\n \n-import jakarta.annotation.Resource;\n-\n abstract public class RemoteCalculatorBean4Super extends BaseRemoteCalculator\n     implements RemoteCalculator {\n \n-  @Resource\n-  private ORB orb;\n-\n   @Override\n   public int remoteAdd(int a, int b) {\n     int retValue;\n     retValue = super.remoteAdd(a, b);\n-    return retValue + (orb == null ? 0 : orb.toString().length());\n-  }\n-\n+    return retValue + \n+      \"com.sun.corba.se.impl.orb.ORBImpl@a5fef45\".length(); // simulate value that orb.toString() might be expected to return   \n+    }\n+  \n }"
  },
  {
    "sha": "a78a2d6fab4c1929aec04f6387f527a68fbcbd3d",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/defaultinterceptor/descriptor/Client.java",
    "status": "modified",
    "additions": 2,
    "deletions": 31,
    "changes": 33,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/defaultinterceptor/descriptor/Client.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/defaultinterceptor/descriptor/Client.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/defaultinterceptor/descriptor/Client.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -149,34 +149,5 @@ public static void main(String[] args) {\n    * Verifies only one is invoked.\n    *\n    */\n-  /*\n-   * @testName: isInterceptorInjectionDoneForCallbackBean1\n-   * \n-   * @assertion_ids:\n-   * \n-   * @test_Strategy: two default interceptors are configured for an ejb jar.\n-   * Verifies injections on both interceptor and its superclass are all done by\n-   * the time PostConstruct is called.\n-   *\n-   */\n-  /*\n-   * @testName: isInterceptorInjectionDoneForCallbackBean2\n-   * \n-   * @assertion_ids:\n-   * \n-   * @test_Strategy: two default interceptors are configured for an ejb jar.\n-   * Verifies injections on both interceptor and its superclass are all done by\n-   * the time PostConstruct is called.\n-   *\n-   */\n-  /*\n-   * @testName: isInterceptorInjectionDoneForSingleDefaultInterceptorJar\n-   * \n-   * @assertion_ids:\n-   * \n-   * @test_Strategy: single default interceptors are configured for an ejb jar.\n-   * Verifies only one is invoked.\n-   *\n-   */\n-\n+  \n }"
  },
  {
    "sha": "c3188bba2f38d9cdd61836f9931b871cfbbfd7b9",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/annotated/Client.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/annotated/Client.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/annotated/Client.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/annotated/Client.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -154,14 +154,6 @@ public static void main(String[] args) {\n    * @test_Strategy:\n    */\n \n-  /*\n-   * @testName: appclientInjectionCompleteInPostConstruct\n-   * \n-   * @assertion_ids:\n-   * \n-   * @test_Strategy:\n-   */\n-\n   /*\n    * @testName: ejbCreateTreatedAsPostConstruct\n    * "
  },
  {
    "sha": "365728e974951a7723421ebe6650bfb1fcc209f7",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/descriptor/Client.java",
    "status": "modified",
    "additions": 1,
    "deletions": 9,
    "changes": 10,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/descriptor/Client.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/descriptor/Client.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/descriptor/Client.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -148,12 +148,4 @@ public static void main(String[] args) {\n    * @test_Strategy:\n    */\n \n-  /*\n-   * @testName: appclientInjectionCompleteInPostConstruct\n-   * \n-   * @assertion_ids:\n-   * \n-   * @test_Strategy:\n-   */\n-\n }"
  },
  {
    "sha": "5295eb8210ea54aace1b68369ed3c65fdf4afe11",
    "filename": "src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/descriptor/ejb3_bb_stateless_callback_method_descriptor_client.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 16,
    "changes": 16,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/descriptor/ejb3_bb_stateless_callback_method_descriptor_client.xml",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/descriptor/ejb3_bb_stateless_callback_method_descriptor_client.xml",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/bb/session/stateless/callback/method/descriptor/ejb3_bb_stateless_callback_method_descriptor_client.xml?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -18,22 +18,6 @@\n -->\n \n <application-client xmlns=\"https://jakarta.ee/xml/ns/jakartaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"9\" xsi:schemaLocation=\"https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/application-client_9.xsd\">\n-   <resource-ref>\n-        <res-ref-name>orbInClientBase2</res-ref-name>\n-        <res-type>org.omg.CORBA.ORB</res-type>\n-        <injection-target>\n-            <injection-target-class>com.sun.ts.tests.ejb30.common.callback.ClientBase2NoAnnotation</injection-target-class>\n-            <injection-target-name>orbInClientBase2</injection-target-name>\n-        </injection-target>\n-    </resource-ref>\n-    <resource-ref>\n-        <res-ref-name>orbInClientBase3</res-ref-name>\n-        <res-type>org.omg.CORBA.ORB</res-type>\n-        <injection-target>\n-            <injection-target-class>com.sun.ts.tests.ejb30.common.callback.ClientBase3NoAnnotation</injection-target-class>\n-            <injection-target-name>orbInClientBase3</injection-target-name>\n-        </injection-target>\n-    </resource-ref>\n     <post-construct>\n         <lifecycle-callback-class>com.sun.ts.tests.ejb30.common.callback.ClientBase2NoAnnotation</lifecycle-callback-class>\n         <lifecycle-callback-method>postConstructInBase2NoAnnotation</lifecycle-callback-method>"
  },
  {
    "sha": "01c410bc1a2f04d862c499bd6b35f69f15d2fd42",
    "filename": "src/com/sun/ts/tests/ejb30/common/annotation/resource/ClientBase.java",
    "status": "modified",
    "additions": 2,
    "deletions": 18,
    "changes": 20,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/ClientBase.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/ClientBase.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/annotation/resource/ClientBase.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -49,7 +49,7 @@ protected Object getCustomeResource() {\n   protected String getCustomeResourceName() {\n     return null;\n   }\n-\n+  \n   /*\n    * @class.setup_props:\n    */\n@@ -316,22 +316,6 @@ public void userTransactionLookupNegativeTest() throws Fault {\n     }\n   }\n \n-  /*\n-   * testName: orbTest\n-   * \n-   * @test_Strategy:\n-   *\n-   */\n-  public void orbTest() throws Fault {\n-    try {\n-      getResourceFieldBean().testOrb();\n-      getResourceSetterBean().testOrb();\n-      getResourceTypeBean().testOrb();\n-    } catch (TestFailedException e) {\n-      throw new Fault(\"Test Failed\", e);\n-    }\n-  }\n-\n   /*\n    * testName: customResourceInjectionInAppclient\n    * "
  },
  {
    "sha": "aff11b2080e01b74c9936a3708ecb826d60ce1d3",
    "filename": "src/com/sun/ts/tests/ejb30/common/annotation/resource/Constants.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/Constants.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/Constants.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/annotation/resource/Constants.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2018 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -25,8 +25,6 @@\n \n   public static final String USER_TRANSACTION_JNDI_NAME = \"java:comp/UserTransaction\";\n \n-  public static final String ORB_JNDI_NAME = \"java:comp/ORB\";\n-\n   public static final String TIMER_SERVICE_JNDI_NAME = \"java:comp/TimerService\";\n \n   public static final String TRANSACTION_SYNCHRONIZATION_REGISTRY_JNDI_NAME = \"java:comp/TransactionSynchronizationRegistry\";"
  },
  {
    "sha": "5eb3df2970211137ea77fefda298ac74646b9af7",
    "filename": "src/com/sun/ts/tests/ejb30/common/annotation/resource/EnvSharingBeanBase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/EnvSharingBeanBase.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/EnvSharingBeanBase.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/annotation/resource/EnvSharingBeanBase.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -29,8 +29,6 @@\n import javax.naming.NamingException;\n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.helper.ServiceLocator;\n import com.sun.ts.tests.ejb30.common.helper.TestFailedException;\n \n@@ -123,10 +121,6 @@ protected String getOrbName() {\n     return null;\n   }\n \n-  protected ORB getOrb() {\n-    return null;\n-  }\n-\n   protected String getDataSourceName() {\n     return null;\n   }"
  },
  {
    "sha": "8a990d0464984a79f2a15c9db1f2f8e1ff73a7b2",
    "filename": "src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceBeanBase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 28,
    "changes": 29,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceBeanBase.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceBeanBase.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceBeanBase.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,7 +20,6 @@\n \n package com.sun.ts.tests.ejb30.common.annotation.resource;\n \n-import static com.sun.ts.tests.ejb30.common.annotation.resource.Constants.ORB_JNDI_NAME;\n import static com.sun.ts.tests.ejb30.common.annotation.resource.Constants.PREFIX;\n import static com.sun.ts.tests.ejb30.common.annotation.resource.Constants.TIMER_SERVICE_JNDI_NAME;\n import static com.sun.ts.tests.ejb30.common.annotation.resource.Constants.TRANSACTION_SYNCHRONIZATION_REGISTRY_JNDI_NAME;\n@@ -31,7 +30,6 @@\n import javax.naming.NamingException;\n import javax.sql.DataSource;\n \n-import org.omg.CORBA.ORB;\n \n import com.sun.ts.lib.deliverable.cts.resource.Dog;\n import com.sun.ts.tests.ejb30.common.helper.ServiceLocator;\n@@ -100,10 +98,6 @@\n \n   abstract protected String getTopicName();\n \n-  abstract protected ORB getOrb();\n-\n-  abstract protected String getOrbName();\n-\n   protected TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {\n     return null;\n   }\n@@ -402,27 +396,6 @@ public void testUserTransaction() throws TestFailedException {\n     // }\n   }\n \n-  public void testOrb() throws TestFailedException {\n-    ORB orb1 = getOrb();\n-    verify(orb1, \"getOrb()\");\n-    orb1 = null;\n-\n-    try {\n-      ORB orb3 = (ORB) ServiceLocator.lookup(ORB_JNDI_NAME);\n-      verify(orb3, \"Naming context lookup \" + ORB_JNDI_NAME);\n-    } catch (NamingException e) {\n-      throw new TestFailedException(e);\n-    }\n-\n-    // try {\n-    // ORB orb4 = (ORB)\n-    // ServiceLocator.lookup(PREFIX + getOrbName());\n-    // verify(orb4, \"Naming context lookup \"+ PREFIX + getOrbName());\n-    // } catch (NamingException e) {\n-    // throw new TestFailedException(e);\n-    // }\n-  }\n-\n   public void testTransactionSynchronizationRegistryInjected()\n       throws TestFailedException {\n     TransactionSynchronizationRegistry t = getTransactionSynchronizationRegistry();"
  },
  {
    "sha": "32949ee80ce776de709eae6243f24dd013e85975",
    "filename": "src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceIF.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceIF.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceIF.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceIF.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2018 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -53,8 +53,6 @@\n \n   public void testTopic() throws TestFailedException;\n \n-  public void testOrb() throws TestFailedException;\n-\n   public void testCustomResourceInjected() throws TestFailedException;\n \n   public void testCustomResourceLookup() throws TestFailedException;"
  },
  {
    "sha": "ac2f1837d835f3adabb26259bdc9e85c6f841745",
    "filename": "src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceNoop.java",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceNoop.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceNoop.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/annotation/resource/ResourceNoop.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2018 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -57,9 +57,6 @@ public void testQueueConnectionFactory() {\n   public void testQueue() {\n   }\n \n-  public void testOrb() {\n-  }\n-\n   public void testMailSession() {\n   }\n "
  },
  {
    "sha": "16c24134d2cfb6fe9a7cc8cc4b16a429bec99e42",
    "filename": "src/com/sun/ts/tests/ejb30/common/callback/ClientBase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 54,
    "changes": 55,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/callback/ClientBase.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021  Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -86,20 +86,6 @@\n   protected static final String[] INTERCEPTORS_CDA = new String[] { \"C\", \"D\",\n       \"A\" };\n \n-  // for interceptor injection tests. All ancestors of interceptors can perform\n-  // injections\n-  protected static final String[] INJECTIONS_2BASE_A_2BASE_B = new String[] {\n-      \"BASEBASE\", \"BASE\", \"A\", \"BASEBASE\", \"BASE\", \"B\" };\n-\n-  protected static final String[] INJECTIONS_2BASE_B_2BASE_A = new String[] {\n-      \"BASEBASE\", \"BASE\", \"B\", \"BASEBASE\", \"BASE\", \"A\" };\n-\n-  protected static final String[] INJECTIONS_2BASE_A = new String[] {\n-      \"BASEBASE\", \"BASE\", \"A\" };\n-\n-  protected static final String[] INJECTIONS_2BASE_B = new String[] {\n-      \"BASEBASE\", \"BASE\", \"B\" };\n-\n   protected static final String[] INJECTIONS_NONE = new String[] {};\n \n   protected Properties props;\n@@ -398,45 +384,6 @@ public void singleDefaultInterceptorJar() throws Fault {\n     Helper.compareResultList(INTERCEPTORS_A, actual);\n   }\n \n-  /*\n-   * testName: isInterceptorInjectionDoneForCallbackBean1\n-   * \n-   * @test_Strategy: two default interceptors are configured for an ejb jar.\n-   * Verifies injections on both interceptor and its superclass are all done by\n-   * the time PostConstruct is called.\n-   *\n-   */\n-  public void isInterceptorInjectionDoneForCallbackBean1() throws Fault {\n-    List actual = getBean().getInjectionLocations();\n-    Helper.compareResultList(INJECTIONS_2BASE_A_2BASE_B, actual);\n-  }\n-\n-  /*\n-   * testName: isInterceptorInjectionDoneForCallbackBean2\n-   * \n-   * @test_Strategy: two default interceptors are configured for an ejb jar.\n-   * Verifies injections on both interceptor and its superclass are all done by\n-   * the time PostConstruct is called.\n-   *\n-   */\n-  public void isInterceptorInjectionDoneForCallbackBean2() throws Fault {\n-    List actual = getBean2().getInjectionLocations();\n-    Helper.compareResultList(INJECTIONS_2BASE_B_2BASE_A, actual);\n-  }\n-\n-  /*\n-   * testName: isInterceptorInjectionDoneForSingleDefaultInterceptorJar\n-   * \n-   * @test_Strategy: single default interceptors are configured for an ejb jar.\n-   * Verifies only one is invoked.\n-   *\n-   */\n-  public void isInterceptorInjectionDoneForSingleDefaultInterceptorJar()\n-      throws Fault {\n-    List actual = getSingleDefaultInterceptorBean().getInjectionLocations();\n-    Helper.compareResultList(INJECTIONS_2BASE_A, actual);\n-  }\n-\n   //////////////////////////////////////////////////////////////////////\n   // the following tests only apply to threelevels/* directories.\n   //////////////////////////////////////////////////////////////////////"
  },
  {
    "sha": "1c748cae1ebd4eb6e31a56c88c13021e865fad75",
    "filename": "src/com/sun/ts/tests/ejb30/common/callback/ClientBase2.java",
    "status": "modified",
    "additions": 1,
    "deletions": 13,
    "changes": 14,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase2.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase2.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/callback/ClientBase2.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,16 +20,11 @@\n \n package com.sun.ts.tests.ejb30.common.callback;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.helper.TLogger;\n \n import jakarta.annotation.PostConstruct;\n-import jakarta.annotation.Resource;\n \n abstract public class ClientBase2 extends ClientBase2NoAnnotation {\n-  @Resource\n-  private static ORB orbInClientBase2;\n \n   public ClientBase2() {\n   }\n@@ -41,12 +36,5 @@ public ClientBase2() {\n   @PostConstruct\n   private static void postConstructInBase2() {\n     addPostConstructCall(BASE2);\n-    // check injected fields\n-    if (orbInClientBase2 != null) {\n-      addInjectedField(orbInClientBase2);\n-    } else {\n-      TLogger.log(\"WARNING: ClientBase2.orbInClientBase2 has not been \"\n-          + \"initialized when checking inside ClientBase2.postConstructInBase2()\");\n-    }\n   }\n }"
  },
  {
    "sha": "a6786bf908a7e665195293dad08d759b7b536ac9",
    "filename": "src/com/sun/ts/tests/ejb30/common/callback/ClientBase2NoAnnotation.java",
    "status": "modified",
    "additions": 1,
    "deletions": 31,
    "changes": 32,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase2NoAnnotation.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase2NoAnnotation.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/callback/ClientBase2NoAnnotation.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -23,14 +23,10 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.helper.Helper;\n import com.sun.ts.tests.ejb30.common.helper.TLogger;\n \n abstract public class ClientBase2NoAnnotation extends ClientBase {\n-  // @Resource\n-  private static ORB orbInClientBase2;\n \n   protected static final String BASE2 = \"BASE2\";\n \n@@ -63,13 +59,6 @@ public static void addPostConstructCall(String s) {\n   // @PostConstruct\n   private static void postConstructInBase2NoAnnotation() {\n     addPostConstructCall(BASE2);\n-    // check injected fields\n-    if (orbInClientBase2 != null) {\n-      addInjectedField(orbInClientBase2);\n-    } else {\n-      TLogger.log(\"WARNING: ClientBase2.orbInClientBase2 has not been \"\n-          + \"initialized when checking inside ClientBase2.postConstructInBase2()\");\n-    }\n   }\n \n   public static List getInjectedFields() {\n@@ -110,23 +99,4 @@ public void appclientPostConstructCallOrder() throws Fault {\n     Helper.compareResultList(BASE2_BASE3_CLIENT, actual);\n   }\n \n-  /*\n-   * testName: appclientInjectionCompleteInPostConstruct\n-   * \n-   * @test_Strategy:\n-   */\n-  public void appclientInjectionCompleteInPostConstruct() throws Fault {\n-    // ClientBase2.orbInClientBase2, ClientBase2.orbInClientBase3,\n-    // Client.orbInClient\n-    int expectedNumOfElements = 3;\n-    List actual = getInjectedFields();\n-    if (actual.size() == 3) {\n-      TLogger\n-          .log(\"Got expected \" + expectedNumOfElements + \" fields: \" + actual);\n-    } else {\n-      throw new Fault(\"Expected \" + expectedNumOfElements\n-          + \" fields to be injected, but actual injected fields are \" + actual);\n-    }\n-  }\n-\n }"
  },
  {
    "sha": "e00824c3e49af90d041893201f3ef700a1818dbe",
    "filename": "src/com/sun/ts/tests/ejb30/common/callback/ClientBase3.java",
    "status": "modified",
    "additions": 1,
    "deletions": 15,
    "changes": 16,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase3.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase3.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/callback/ClientBase3.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,35 +20,21 @@\n \n package com.sun.ts.tests.ejb30.common.callback;\n \n-import org.omg.CORBA.ORB;\n-\n-import com.sun.ts.tests.ejb30.common.helper.TLogger;\n-\n import jakarta.annotation.PostConstruct;\n-import jakarta.annotation.Resource;\n \n /**\n  * the direct superclass of Client classes that test application client\n  * PostConstruct and injection-complete, e.g.,\n  * stateless/callback/method/annotated/Client.\n  */\n abstract public class ClientBase3 extends ClientBase2 {\n-  @Resource\n-  private static ORB orbInClientBase3;\n \n   public ClientBase3() {\n   }\n \n   @PostConstruct\n   private static void postConstructInBase3() {\n     addPostConstructCall(BASE3);\n-    // check injected fields\n-    if (orbInClientBase3 != null) {\n-      addInjectedField(orbInClientBase3);\n-    } else {\n-      TLogger.log(\"WARNING: ClientBase3.orbInClientBase3 has not been \"\n-          + \"initialized when checking inside ClientBase3.postConstructInBase3()\");\n-    }\n   }\n \n }"
  },
  {
    "sha": "de39b1ebf74c09306074ef26a6a23f352d27d02c",
    "filename": "src/com/sun/ts/tests/ejb30/common/callback/ClientBase3NoAnnotation.java",
    "status": "modified",
    "additions": 1,
    "deletions": 12,
    "changes": 13,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase3NoAnnotation.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/ClientBase3NoAnnotation.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/callback/ClientBase3NoAnnotation.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,8 +20,6 @@\n \n package com.sun.ts.tests.ejb30.common.callback;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.helper.TLogger;\n \n /**\n@@ -30,22 +28,13 @@\n  * stateless/callback/method/descriptor/Client.\n  */\n abstract public class ClientBase3NoAnnotation extends ClientBase2NoAnnotation {\n-  // @Resource\n-  private static ORB orbInClientBase3;\n \n   public ClientBase3NoAnnotation() {\n   }\n \n   // @PostConstruct\n   private static void postConstructInBase3NoAnnotation() {\n     addPostConstructCall(BASE3);\n-    // check injected fields\n-    if (orbInClientBase3 != null) {\n-      addInjectedField(orbInClientBase3);\n-    } else {\n-      TLogger.log(\"WARNING: ClientBase3.orbInClientBase3 has not been \"\n-          + \"initialized when checking inside ClientBase3.postConstructInBase3()\");\n-    }\n   }\n \n }"
  },
  {
    "sha": "7d3b4db33dee0c560ce80a90c2bac1a58c890efb",
    "filename": "src/com/sun/ts/tests/ejb30/common/callback/InterceptorA.java",
    "status": "modified",
    "additions": 2,
    "deletions": 8,
    "changes": 10,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/InterceptorA.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/InterceptorA.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/callback/InterceptorA.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,11 +20,8 @@\n \n package com.sun.ts.tests.ejb30.common.callback;\n \n-import org.omg.CORBA.ORB;\n-\n import jakarta.annotation.PostConstruct;\n import jakarta.annotation.PreDestroy;\n-import jakarta.annotation.Resource;\n import jakarta.interceptor.AroundInvoke;\n import jakarta.interceptor.InvocationContext;\n \n@@ -34,16 +31,13 @@\n  * throws list, though not necessary.\n  */\n public class InterceptorA extends InterceptorBase {\n-  @Resource()\n-  private ORB orb;\n \n   public InterceptorA() {\n     super();\n   }\n \n   public String getInjectedLocation() {\n-    String result = (orb == null) ? NOT_INJECTED : \"A\";\n-    return result;\n+    return NOT_INJECTED;\n   }\n \n   @Override"
  },
  {
    "sha": "5e712ca8024dd53920c93a1bea10a01d12670d51",
    "filename": "src/com/sun/ts/tests/ejb30/common/callback/InterceptorB.java",
    "status": "modified",
    "additions": 2,
    "deletions": 8,
    "changes": 10,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/InterceptorB.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/InterceptorB.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/callback/InterceptorB.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -20,22 +20,16 @@\n \n package com.sun.ts.tests.ejb30.common.callback;\n \n-import org.omg.CORBA.ORB;\n-\n-import jakarta.annotation.Resource;\n \n public class InterceptorB extends InterceptorBase {\n-  @Resource()\n-  private ORB orb;\n \n   @Override\n   protected String getShortName() {\n     return \"B\";\n   }\n \n   protected String getInjectedLocation() {\n-    String result = (orb == null) ? NOT_INJECTED : \"B\";\n-    return result;\n+    return NOT_INJECTED;\n   }\n \n   protected void myCreate(jakarta.interceptor.InvocationContext inv)"
  },
  {
    "sha": "9000f3fda5e7e75e41f9dcabe807c09add655038",
    "filename": "src/com/sun/ts/tests/ejb30/common/callback/InterceptorBase.java",
    "status": "modified",
    "additions": 2,
    "deletions": 9,
    "changes": 11,
    "blob_url": "https://github.com/eclipse-ee4j/jakartaee-tck/blob/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/InterceptorBase.java",
    "raw_url": "https://github.com/eclipse-ee4j/jakartaee-tck/raw/7e12e6017590f01500a3962360059096d5f7b1f4/src/com/sun/ts/tests/ejb30/common/callback/InterceptorBase.java",
    "contents_url": "https://api.github.com/repos/eclipse-ee4j/jakartaee-tck/contents/src/com/sun/ts/tests/ejb30/common/callback/InterceptorBase.java?ref=7e12e6017590f01500a3962360059096d5f7b1f4",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021 Oracle and/or its affiliates. All rights reserved.\n  *\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License v. 2.0, which is available at\n@@ -25,21 +25,14 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.omg.CORBA.ORB;\n-\n import com.sun.ts.tests.ejb30.common.helper.TLogger;\n \n-import jakarta.annotation.Resource;\n import jakarta.interceptor.InvocationContext;\n \n abstract public class InterceptorBase extends InterceptorBaseBase {\n \n-  @Resource()\n-  private ORB orb;\n-\n   private String getInjectedBaseLocation() {\n-    String result = (orb == null) ? NOT_INJECTED : \"BASE\";\n-    return result;\n+    return NOT_INJECTED;\n   }\n \n   protected String getShortName() {"
  }
]
