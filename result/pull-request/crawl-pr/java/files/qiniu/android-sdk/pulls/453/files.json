[
    {
      "sha": "df6ad139049439410523816bf02cc31c5d981011",
      "filename": "CHANGELOG.md",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/CHANGELOG.md",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/CHANGELOG.md",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/CHANGELOG.md?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -1,4 +1,9 @@\n #Changelog\n+## 8.2.0(2021-02-20)\n+## 增加\n+* 增加网络监控功能，选择最优 Host 进行上传\n+* 优化日志统计\n+\n ## 8.1.2(2021-01-18)\n * 区域查询采用SingleFlight模式\n * 增加网络链接状态检测"
    },
    {
      "sha": "753d6b876b5b2e519d6a1ea6a0884f344ce4ef45",
      "filename": "README.md",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/README.md",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/README.md",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/README.md?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -15,6 +15,7 @@ https://github.com/qiniudemo/qiniu-lab-android\n \n | Qiniu SDK 版本 | 最低 Android版本   |       依赖库版本           |\n |------------ |-----------------|------------------------|\n+|  8.2.x        |  Android 5.0+     |        okhttp 4+         |\n |  8.1.x        |  Android 5.0+     |        okhttp 4+         |\n |  8.0.x        |  Android 5.0+     |        okhttp 4+         |\n |  7.7.x        |  Android 5.0+     |        okhttp 4+         |\n@@ -28,7 +29,7 @@ https://github.com/qiniudemo/qiniu-lab-android\n |  7.0.7        |  Android 2.2+     | android-async-http 1.4.8 |\n \n ### 注意\n-* 推荐使用最新版：8.1.2\n+* 推荐使用最新版：8.2.0\n * AndroidNetwork.getMobileDbm()可以获取手机信号强度，需要如下权限(API>=18时生效)\n ```\n   <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>"
    },
    {
      "sha": "8232647fa5ceba0fef27c21a2141e58d3a3c4dba",
      "filename": "library/src/androidTest/java/com/qiniu/android/ConnectCheckTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/ConnectCheckTest.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/ConnectCheckTest.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/androidTest/java/com/qiniu/android/ConnectCheckTest.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -10,7 +10,7 @@ public void testCheck() {\n         int maxCount = 100;\n         int successCount = 0;\n         for (int i = 0; i < maxCount; i++) {\n-            if (ConnectChecker.check()) {\n+            if (ConnectChecker.isConnected(ConnectChecker.check())) {\n                 successCount += 1;\n             }\n         }\n@@ -23,7 +23,7 @@ public void testCustomCheckHosts() {\n         int maxCount = 100;\n         int successCount = 0;\n         for (int i = 0; i < maxCount; i++) {\n-            if (ConnectChecker.check()) {\n+            if (ConnectChecker.isConnected(ConnectChecker.check())) {\n                 successCount += 1;\n             }\n         }\n@@ -36,7 +36,7 @@ public void testNotConnected() {\n         int maxCount = 100;\n         int successCount = 0;\n         for (int i = 0; i < maxCount; i++) {\n-            if (ConnectChecker.check()) {\n+            if (ConnectChecker.isConnected(ConnectChecker.check())) {\n                 successCount += 1;\n             }\n         }"
    },
    {
      "sha": "2afe03f3441d78ed3e8d2b09e701386f4c56a4ac",
      "filename": "library/src/androidTest/java/com/qiniu/android/DnsTransactionTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/DnsTransactionTest.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/DnsTransactionTest.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/androidTest/java/com/qiniu/android/DnsTransactionTest.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -61,10 +61,12 @@ public void test_CheckAndPrefetch(){\n                 public void run() {\n \n                     boolean isSuccess = DnsPrefetchTransaction.addDnsCheckAndPrefetchTransaction(zone, UpToken.parse(TestConfig.token_z0));\n-                    if (isSuccess){\n-                        successCount += 1;\n+                    synchronized (this) {\n+                        if (isSuccess) {\n+                            successCount += 1;\n+                        }\n+                        completeCount += 1;\n                     }\n-                    completeCount += 1;\n                 }\n             }).start();\n         }\n@@ -80,7 +82,7 @@ public boolean shouldWait() {\n             }\n         }, 60);\n \n-        assertTrue(\"successCount:\" + successCount, successCount < 2);\n+        assertTrue(\"successCount:\" + successCount, successCount < 3);\n     }\n \n "
    },
    {
      "sha": "1072f6756b12db65fb096b810b13cd943ff53498",
      "filename": "library/src/androidTest/java/com/qiniu/android/TestConfig.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/TestConfig.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/TestConfig.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/androidTest/java/com/qiniu/android/TestConfig.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -10,20 +10,20 @@\n     // TODO: 2020-05-09 bad token for testPutBytesWithFixedZoneUseBackupDomains\n     // 华东上传凭证\n     public static final String bucket_z0 = \"kodo-phone-zone0-space\";\n-    public static final String token_z0 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:Tq8MZRIC2hc1hxWxH3RqLcdFuQw=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZTAtc3BhY2UiLCJkZWFkbGluZSI6MTYxMzE4NDg0OCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n+    public static final String token_z0 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:m1kHxpdaFH3NK120iAkHlSwBpio=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZTAtc3BhY2UiLCJkZWFkbGluZSI6MTYxODgxNDM5MCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n     // 华北上传凭证\n     public static final String bucket_z1 = \"kodo-phone-zone1-space\";\n-    public static final String token_z1 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:FZiNMb3SKDFpdat2q9wpG6zbn_w=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZTEtc3BhY2UiLCJkZWFkbGluZSI6MTYxMzE4NDg0OCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n+    public static final String token_z1 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:1vkQkb72ANFiAftABJAF2dhbXd0=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZTEtc3BhY2UiLCJkZWFkbGluZSI6MTYxODgxNDM5MCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n     // 华南上传凭证\n     public static final String bucket_z2 = \"kodo-phone-zone2-space\";\n-    public static final String token_z2 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:cP9NhEWUWhPrxlfAxaemVj6uIKI=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZTItc3BhY2UiLCJkZWFkbGluZSI6MTYxMzE4NDg0OCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n+    public static final String token_z2 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:ZTqDdbvHJuP3hJFckpadCyW08Cs=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZTItc3BhY2UiLCJkZWFkbGluZSI6MTYxODgxNDM5MCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n     // 北美上传凭证\n     public static final String bucket_na0 = \"kodo-phone-zone-na0-space\";\n-    public static final String token_na0 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:V9zBCBaNWrKZvqLu4b5Dem0hOrQ=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZS1uYTAtc3BhY2UiLCJkZWFkbGluZSI6MTYxMzE4NDg0OCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n+    public static final String token_na0 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:I8Q0E32hEelHH4xWBH2p17SxhdA=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZS1uYTAtc3BhY2UiLCJkZWFkbGluZSI6MTYxODgxNDM5MCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n     // 东南亚上传凭证\n     public static final String bucket_as0 = \"kodo-phone-zone-as0-space\";\n-    public static final String token_as0 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:PaaKXdrwQgI4J7Fw5nhtbwQ_bu8=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZS1hczAtc3BhY2UiLCJkZWFkbGluZSI6MTYxMzE4NDg0OCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n-    public static final String invalidBucketToken = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:k9olgJ5rgs-SvzirMtdU_ASmArY=:eyJzY29wZSI6InpvbmVfaW52YWxpZCIsImRlYWRsaW5lIjoxNjEzMTg0ODQ4LCAicmV0dXJuQm9keSI6IntcImNhbGxiYWNrVXJsXCI6XCJodHRwOlwvXC9jYWxsYmFjay5kZXYucWluaXUuaW9cIiwgXCJmb29cIjokKHg6Zm9vKSwgXCJiYXJcIjokKHg6YmFyKSwgXCJtaW1lVHlwZVwiOiQobWltZVR5cGUpLCBcImhhc2hcIjokKGV0YWcpLCBcImtleVwiOiQoa2V5KSwgXCJmbmFtZVwiOiQoZm5hbWUpfSJ9\";\n+    public static final String token_as0 = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:DDXIo7KzUj3ceh5LveRXyNfsiZU=:eyJzY29wZSI6ImtvZG8tcGhvbmUtem9uZS1hczAtc3BhY2UiLCJkZWFkbGluZSI6MTYxODgxNDM5MCwgInJldHVybkJvZHkiOiJ7XCJjYWxsYmFja1VybFwiOlwiaHR0cDpcL1wvY2FsbGJhY2suZGV2LnFpbml1LmlvXCIsIFwiZm9vXCI6JCh4OmZvbyksIFwiYmFyXCI6JCh4OmJhciksIFwibWltZVR5cGVcIjokKG1pbWVUeXBlKSwgXCJoYXNoXCI6JChldGFnKSwgXCJrZXlcIjokKGtleSksIFwiZm5hbWVcIjokKGZuYW1lKX0ifQ==\";\n+    public static final String invalidBucketToken = \"dxVQk8gyk3WswArbNhdKIwmwibJ9nFsQhMNUmtIM:Kpi_0B6gZSf7nF5UgdZtvHx0h8M=:eyJzY29wZSI6InpvbmVfaW52YWxpZCIsImRlYWRsaW5lIjoxNjE4ODE0MzkwLCAicmV0dXJuQm9keSI6IntcImNhbGxiYWNrVXJsXCI6XCJodHRwOlwvXC9jYWxsYmFjay5kZXYucWluaXUuaW9cIiwgXCJmb29cIjokKHg6Zm9vKSwgXCJiYXJcIjokKHg6YmFyKSwgXCJtaW1lVHlwZVwiOiQobWltZVR5cGUpLCBcImhhc2hcIjokKGV0YWcpLCBcImtleVwiOiQoa2V5KSwgXCJmbmFtZVwiOiQoZm5hbWUpfSJ9\";\n \n     // -----------\n     public static final String ak = \"bjtWBQXrcxgo7HWwlC_bgHg81j352_GhgBGZPeOW\";"
    },
    {
      "sha": "148ffa610921ff0cf59a40d5d89152e682ab50c1",
      "filename": "library/src/androidTest/java/com/qiniu/android/UploadDomainRegionTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/UploadDomainRegionTest.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/UploadDomainRegionTest.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/androidTest/java/com/qiniu/android/UploadDomainRegionTest.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -2,6 +2,7 @@\n \n import com.qiniu.android.common.FixedZone;\n import com.qiniu.android.http.request.IUploadServer;\n+import com.qiniu.android.http.request.UploadRequestState;\n import com.qiniu.android.http.serverRegion.UploadDomainRegion;\n import com.qiniu.android.http.serverRegion.UploadServerFreezeManager;\n import com.qiniu.android.utils.Utils;\n@@ -18,9 +19,11 @@ public void testGetOneServer(){\n         UploadDomainRegion region = new UploadDomainRegion();\n         region.setupRegionData(zone.getZonesInfo(null).zonesInfo.get(0));\n \n-        UploadServerFreezeManager.getInstance().freezeHost(host, type, 100);\n+        UploadServerFreezeManager.getInstance().freezeType(type, 100);\n \n-        IUploadServer server = region.getNextServer(false, null, null);\n+        UploadRequestState state = new UploadRequestState();\n+        state.setUseOldServer(false);\n+        IUploadServer server = region.getNextServer(state, null, null);\n \n         assertNotNull(server);\n     }"
    },
    {
      "sha": "007907f919a9dbca1a9f9a64aedd5faf7fcadcfc",
      "filename": "library/src/androidTest/java/com/qiniu/android/UploadServerFreezeManagerTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/UploadServerFreezeManagerTest.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/androidTest/java/com/qiniu/android/UploadServerFreezeManagerTest.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/androidTest/java/com/qiniu/android/UploadServerFreezeManagerTest.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -8,23 +8,23 @@ public void testFreeze() {\n \n         String host = \"baidu.com\";\n         String type = host;\n-        UploadServerFreezeManager.getInstance().freezeHost(host, type, 10);\n+        UploadServerFreezeManager.getInstance().freezeType(type, 10);\n \n-        boolean isFrozen = UploadServerFreezeManager.getInstance().isFreezeHost(host, type);\n+        boolean isFrozen = UploadServerFreezeManager.getInstance().isTypeFrozen(type);\n         assertTrue(isFrozen);\n     }\n \n     public void testUnfreeze() {\n \n         String host = \"baidu.com\";\n         String type = host;\n-        UploadServerFreezeManager.getInstance().freezeHost(host, type, 10);\n+        UploadServerFreezeManager.getInstance().freezeType(type, 10);\n \n-        boolean isFrozen = UploadServerFreezeManager.getInstance().isFreezeHost(host, type);\n+        boolean isFrozen = UploadServerFreezeManager.getInstance().isTypeFrozen(type);\n         assertTrue(isFrozen);\n \n-        UploadServerFreezeManager.getInstance().unfreezeHost(host, type);\n-        isFrozen = UploadServerFreezeManager.getInstance().isFreezeHost(host, type);\n+        UploadServerFreezeManager.getInstance().unfreezeType(type);\n+        isFrozen = UploadServerFreezeManager.getInstance().isTypeFrozen(type);\n         assertTrue(isFrozen == false);\n \n     }"
    },
    {
      "sha": "285ec7183d496a10f4268c5c2c6cf08104f8df14",
      "filename": "library/src/main/java/com/qiniu/android/collect/ReportItem.java",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/collect/ReportItem.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/collect/ReportItem.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/collect/ReportItem.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -47,6 +47,7 @@ public String toJson(){\n     public static final String RequestKeyStatusCode = \"status_code\";\n     public static final String RequestKeyRequestId = \"req_id\";\n     public static final String RequestKeyHost = \"host\";\n+    public static final String RequestKeyHttpVersion = \"http_version\";\n     public static final String RequestKeyRemoteIp = \"remote_ip\";\n     public static final String RequestKeyPort = \"port\";\n     public static final String RequestKeyTargetBucket = \"target_bucket\";\n@@ -80,6 +81,7 @@ public String toJson(){\n     public static final String RequestKeyPrefetchedDnsSource = \"prefetched_dns_source\";\n     public static final String RequestKeyPrefetchedBefore = \"prefetched_before\";\n     public static final String RequestKeyPrefetchedErrorMessage = \"prefetched_error_message\";\n+    public static final String RequestKeyNetworkMeasuring = \"network_measuring\";\n \n     // 分块上传统计⽇志\n     public static final String BlockKeyLogType = \"log_type\";"
    },
    {
      "sha": "d056fd89aa17a11b1f5e4f119ffc075ff8a3184a",
      "filename": "library/src/main/java/com/qiniu/android/common/AutoZone.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/common/AutoZone.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/common/AutoZone.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/common/AutoZone.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -123,7 +123,7 @@ public void complete(Object value) {\n \n         } catch (Exception e) {\n             /// 此处永远不会执行，回调只为占位\n-            completeHandler.complete(ResponseInfo.NetworkError, ResponseInfo.localIOError(\"uc query\"), null);\n+            completeHandler.complete(ResponseInfo.NetworkError, ResponseInfo.localIOError(e.toString()), null);\n         }\n     }\n "
    },
    {
      "sha": "1e2652ce098d468f61a3365fc86f42478623557a",
      "filename": "library/src/main/java/com/qiniu/android/common/Constants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/common/Constants.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/common/Constants.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/common/Constants.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -2,7 +2,7 @@\n \n \n public final class Constants {\n-    public static final String VERSION = \"8.1.2\";\n+    public static final String VERSION = \"8.2.0\";\n \n     public static final String UTF_8 = \"utf-8\";\n }"
    },
    {
      "sha": "b6a880368544f11de3953d5ada93926f62fed6b4",
      "filename": "library/src/main/java/com/qiniu/android/common/ZoneInfo.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/common/ZoneInfo.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/common/ZoneInfo.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/common/ZoneInfo.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -24,6 +24,7 @@\n     private static int DOMAIN_FROZEN_SECONDS = 10 * 60;\n \n     public final int ttl;\n+    public final boolean http3Enabled;\n     public final List<String> domains;\n     public final List<String> old_domains;\n \n@@ -70,10 +71,12 @@ public static ZoneInfo buildInfo(List<String> mainHosts,\n     }\n \n     private ZoneInfo(int ttl,\n+                     boolean http3Enabled,\n                      String regionId,\n                      List<String> domains,\n                      List<String> old_domains) {\n         this.ttl = ttl;\n+        this.http3Enabled = http3Enabled;\n         this.regionId = regionId;\n         this.domains = domains;\n         this.old_domains = old_domains;\n@@ -91,6 +94,14 @@ public static ZoneInfo buildFromJson(JSONObject obj) throws JSONException {\n         }\n \n         int ttl = obj.optInt(\"ttl\");\n+        boolean http3Enabled = false;\n+        try {\n+            JSONObject features = obj.getJSONObject(\"features\");\n+            JSONObject http3 = features.getJSONObject(\"http3\");\n+            http3Enabled = http3.getBoolean(\"enabled\");\n+        } catch (Exception ignored) {\n+        }\n+\n         String regionId = obj.optString(\"region\");\n         if (regionId == null) {\n             regionId = EmptyRegionId;\n@@ -130,7 +141,7 @@ public static ZoneInfo buildFromJson(JSONObject obj) throws JSONException {\n             return null;\n         }\n \n-        ZoneInfo zoneInfo = new ZoneInfo(ttl, regionId, domains, old_domains);\n+        ZoneInfo zoneInfo = new ZoneInfo(ttl, http3Enabled, regionId, domains, old_domains);\n         zoneInfo.detailInfo = obj;\n \n         zoneInfo.allHosts = allHosts;"
    },
    {
      "sha": "8bd9e94a0dba730b09c6957ab874eafeedb5937d",
      "filename": "library/src/main/java/com/qiniu/android/http/connectCheck/ConnectChecker.java",
      "status": "modified",
      "additions": 25,
      "deletions": 26,
      "changes": 51,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/connectCheck/ConnectChecker.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/connectCheck/ConnectChecker.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/connectCheck/ConnectChecker.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -14,53 +14,57 @@\n \n public class ConnectChecker {\n \n-    private static SingleFlight<Boolean> singleFlight = new SingleFlight<>();\n+    private static SingleFlight<UploadSingleRequestMetrics> singleFlight = new SingleFlight<>();\n \n-    public static boolean check() {\n+    public static boolean isConnected(UploadSingleRequestMetrics metrics) {\n+        return metrics != null && metrics.response != null && metrics.response.statusCode > 99;\n+    }\n+\n+    public static UploadSingleRequestMetrics check() {\n \n         final CheckResult result = new CheckResult();\n \n         final Wait wait = new Wait();\n         check(new CheckCompleteHandler() {\n             @Override\n-            public void complete(boolean isConnected) {\n-                result.isConnected = isConnected;\n+            public void complete(UploadSingleRequestMetrics metrics) {\n+                result.metrics = metrics;\n                 wait.stopWait();\n             }\n         });\n         wait.startWait();\n \n-        return result.isConnected;\n+        return result.metrics;\n     }\n \n     private static void check(final CheckCompleteHandler completeHandler) {\n \n         try {\n-            singleFlight.perform(\"connect_check\", new SingleFlight.ActionHandler<Boolean>() {\n+            singleFlight.perform(\"connect_check\", new SingleFlight.ActionHandler<UploadSingleRequestMetrics>() {\n                 @Override\n-                public void action(final SingleFlight.CompleteHandler<Boolean> singleFlightComplete) throws Exception {\n+                public void action(final SingleFlight.CompleteHandler<UploadSingleRequestMetrics> singleFlightComplete) throws Exception {\n                     checkAllHosts(new CheckCompleteHandler() {\n                         @Override\n-                        public void complete(boolean isConnected) {\n-                            singleFlightComplete.complete(isConnected);\n+                        public void complete(UploadSingleRequestMetrics metrics) {\n+                            singleFlightComplete.complete(metrics);\n                         }\n                     });\n                 }\n-            }, new SingleFlight.CompleteHandler<Boolean>() {\n+            }, new SingleFlight.CompleteHandler<UploadSingleRequestMetrics>() {\n                 @Override\n-                public void complete(Boolean value) {\n-                    completeHandler.complete(value);\n+                public void complete(UploadSingleRequestMetrics metrics) {\n+                    completeHandler.complete(metrics);\n                 }\n             });\n         } catch (Exception e) {\n-            completeHandler.complete(true);\n+            completeHandler.complete(null);\n         }\n     }\n \n     private static void checkAllHosts(final CheckCompleteHandler completeHandler) {\n         String[] allHosts = GlobalConfiguration.getInstance().connectCheckURLStrings;\n         if (allHosts == null) {\n-            completeHandler.complete(true);\n+            completeHandler.complete(null);\n             return;\n         }\n \n@@ -72,8 +76,8 @@ private static void checkAllHosts(final CheckCompleteHandler completeHandler) {\n         for (String host : allHosts) {\n             checkHost(host, new CheckCompleteHandler() {\n                 @Override\n-                public void complete(boolean isHostConnected) {\n-\n+                public void complete(UploadSingleRequestMetrics metrics) {\n+                    boolean isHostConnected = isConnected(metrics);\n                     synchronized (checkStatus) {\n                         checkStatus.completeCount += 1;\n                     }\n@@ -90,7 +94,7 @@ public void complete(boolean isHostConnected) {\n                                 checkStatus.isCompleted = true;\n                             }\n                         }\n-                        completeHandler.complete(checkStatus.isConnected);\n+                        completeHandler.complete(metrics);\n                     } else {\n                         LogUtil.i(\"== check all hosts not completed totalCount:\" + checkStatus.totalCount + \" completeCount:\" + checkStatus.completeCount);\n                     }\n@@ -109,20 +113,15 @@ private static void checkHost(final String host, final CheckCompleteHandler comp\n         client.request(request, true, null, null, new IRequestClient.RequestClientCompleteHandler() {\n             @Override\n             public void complete(ResponseInfo responseInfo, UploadSingleRequestMetrics metrics, JSONObject response) {\n-                if (responseInfo.statusCode > 99) {\n-                    LogUtil.i(\"== checkHost:\" + host + \" result: true\");\n-                    completeHandler.complete(true);\n-                } else {\n-                    LogUtil.i(\"== checkHost:\" + host + \" result: false\");\n-                    completeHandler.complete(false);\n-                }\n+                LogUtil.i(\"== checkHost:\" + host + \" responseInfo:\" + responseInfo);\n+                completeHandler.complete(metrics);\n             }\n         });\n     }\n \n \n     private interface CheckCompleteHandler {\n-        void complete(boolean isConnected);\n+        void complete(UploadSingleRequestMetrics metrics);\n     }\n \n     private static class CheckStatus {\n@@ -133,6 +132,6 @@ public void complete(ResponseInfo responseInfo, UploadSingleRequestMetrics metri\n     }\n \n     private static class CheckResult {\n-        private boolean isConnected = false;\n+        private UploadSingleRequestMetrics metrics;\n     }\n }"
    },
    {
      "sha": "78864716203a8391215e6c29cda95a177afc1a8d",
      "filename": "library/src/main/java/com/qiniu/android/http/metrics/UploadSingleRequestMetrics.java",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/metrics/UploadSingleRequestMetrics.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/metrics/UploadSingleRequestMetrics.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/metrics/UploadSingleRequestMetrics.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -9,6 +9,12 @@\n \n public class UploadSingleRequestMetrics {\n \n+    // 请求的 httpVersion\n+    public String httpVersion;\n+\n+    // 只有进行网络检测才会有 connectCheckMetrics\n+    public UploadSingleRequestMetrics connectCheckMetrics;\n+\n     public Request request;\n     public ResponseInfo response;\n "
    },
    {
      "sha": "d4ee9c535ec228c2a82d7b90ddb9e004a7fafeff",
      "filename": "library/src/main/java/com/qiniu/android/http/networkStatus/NetworkStatusManager.java",
      "status": "added",
      "additions": 194,
      "deletions": 0,
      "changes": 194,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/networkStatus/NetworkStatusManager.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/networkStatus/NetworkStatusManager.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/networkStatus/NetworkStatusManager.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -0,0 +1,194 @@\n+package com.qiniu.android.http.networkStatus;\n+\n+import com.qiniu.android.storage.FileRecorder;\n+import com.qiniu.android.storage.Recorder;\n+import com.qiniu.android.utils.AsyncRun;\n+import com.qiniu.android.utils.Utils;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class NetworkStatusManager {\n+\n+    private static String kNetworkStatusDiskKey = \"NetworkStatus:v1.0.0\";\n+\n+    private boolean hasInit = false;\n+    private boolean isHandlingNetworkInfoOfDisk = false;\n+    private Recorder recorder;\n+    private ConcurrentHashMap<String, NetworkStatus> networkStatusInfo;\n+    private static NetworkStatusManager networkStatusManager = new NetworkStatusManager();\n+\n+    public static NetworkStatusManager getInstance() {\n+        networkStatusManager.initData();\n+        return networkStatusManager;\n+    }\n+\n+    public synchronized void initData() {\n+        if (hasInit){\n+            return;\n+        }\n+        networkStatusManager.networkStatusInfo = new ConcurrentHashMap<>();\n+        networkStatusManager.asyncRecoverNetworkStatusFromDisk();\n+    }\n+\n+    public static String getNetworkStatusType(String host, String ip) {\n+        return Utils.getIpType(ip, host);\n+    }\n+\n+    public NetworkStatus getNetworkStatus(String type) {\n+        if (type == null || type.length() == 0) {\n+            return null;\n+        }\n+        NetworkStatus status = networkStatusInfo.get(type);\n+        if (status == null) {\n+            status = new NetworkStatus();\n+        }\n+        return status;\n+    }\n+\n+    public void updateNetworkStatus(String type, int speed) {\n+        if (type == null || type.length() == 0) {\n+            return;\n+        }\n+        NetworkStatus status = networkStatusInfo.get(type);\n+        if (status == null) {\n+            status = new NetworkStatus();\n+            networkStatusInfo.put(type, status);\n+        }\n+        status.setSpeed(speed);\n+\n+        asyncRecordNetworkStatusInfo();\n+    }\n+\n+    // ---------- 持久化 -----------\n+    private void asyncRecordNetworkStatusInfo() {\n+        synchronized (this) {\n+            if (isHandlingNetworkInfoOfDisk) {\n+                return;\n+            }\n+            isHandlingNetworkInfoOfDisk = true;\n+        }\n+        AsyncRun.runInBack(new Runnable() {\n+            @Override\n+            public void run() {\n+                recordNetworkStatusInfo();\n+                isHandlingNetworkInfoOfDisk = false;\n+            }\n+        });\n+    }\n+\n+    private void asyncRecoverNetworkStatusFromDisk() {\n+        synchronized (this) {\n+            if (isHandlingNetworkInfoOfDisk) {\n+                return;\n+            }\n+            isHandlingNetworkInfoOfDisk = true;\n+        }\n+        AsyncRun.runInBack(new Runnable() {\n+            @Override\n+            public void run() {\n+                recoverNetworkStatusFromDisk();\n+                isHandlingNetworkInfoOfDisk = true;\n+            }\n+        });\n+    }\n+\n+    private void recordNetworkStatusInfo() {\n+\n+        setupRecorder();\n+\n+        if (recorder == null || networkStatusInfo == null) {\n+            return;\n+        }\n+\n+        JSONObject networkStatusInfoJson = new JSONObject();\n+        for (String key : networkStatusInfo.keySet()) {\n+            NetworkStatus status = networkStatusInfo.get(key);\n+            if (status != null) {\n+                try {\n+                    networkStatusInfoJson.put(key, status.toJson());\n+                } catch (Exception ignored) {\n+                }\n+            }\n+        }\n+        recorder.set(kNetworkStatusDiskKey, networkStatusInfoJson.toString().getBytes());\n+    }\n+\n+    private void recoverNetworkStatusFromDisk() {\n+\n+        setupRecorder();\n+\n+        if (recorder == null || networkStatusInfo == null) {\n+            return;\n+        }\n+\n+        byte[] networkStatusInfoData = recorder.get(kNetworkStatusDiskKey);\n+        JSONObject networkStatusInfoJSON = null;\n+        try {\n+            networkStatusInfoJSON = new JSONObject(new String(networkStatusInfoData));\n+        } catch (Exception ignored) {\n+            return;\n+        }\n+\n+        for (Iterator<String> it = networkStatusInfoJSON.keys(); it.hasNext(); ) {\n+            String key = it.next();\n+            try {\n+                JSONObject statusJson = networkStatusInfoJSON.getJSONObject(key);\n+                NetworkStatus status = NetworkStatus.statusFromJson(statusJson);\n+                if (status != null) {\n+                    networkStatusInfo.put(key, status);\n+                }\n+            } catch (JSONException ignored) {\n+            }\n+        }\n+    }\n+\n+\n+    private synchronized void setupRecorder() {\n+        if (recorder == null) {\n+            try {\n+                recorder = new FileRecorder(Utils.sdkDirectory() + \"/NetworkInfo\");\n+            } catch (Exception ignored) {\n+            }\n+        }\n+    }\n+\n+    public static class NetworkStatus {\n+\n+        private int speed;\n+\n+        public int getSpeed() {\n+            return speed;\n+        }\n+\n+        public void setSpeed(int speed) {\n+            this.speed = speed;\n+        }\n+\n+        private JSONObject toJson() {\n+            JSONObject jsonObject = new JSONObject();\n+            try {\n+                jsonObject.put(\"speed\", speed);\n+            } catch (Exception ignored) {\n+            }\n+            return jsonObject;\n+        }\n+\n+        private static NetworkStatus statusFromJson(JSONObject jsonObject) {\n+            if (jsonObject == null) {\n+                return null;\n+            }\n+\n+            NetworkStatus status = new NetworkStatus();\n+            try {\n+                status.speed = jsonObject.getInt(\"speed\");\n+            } catch (Exception ignored) {\n+            }\n+            return status;\n+        }\n+    }\n+}"
    },
    {
      "sha": "9429d327fb21a5acf3f3a0f8582f0e439892c7a3",
      "filename": "library/src/main/java/com/qiniu/android/http/networkStatus/UploadServerNetworkStatus.java",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/networkStatus/UploadServerNetworkStatus.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/networkStatus/UploadServerNetworkStatus.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/networkStatus/UploadServerNetworkStatus.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -0,0 +1,32 @@\n+package com.qiniu.android.http.networkStatus;\n+\n+import com.qiniu.android.http.request.IUploadServer;\n+import com.qiniu.android.utils.Utils;\n+\n+public class UploadServerNetworkStatus {\n+\n+    public static IUploadServer getBetterNetworkServer(IUploadServer serverA, IUploadServer serverB) {\n+        return isServerNetworkBetter(serverA, serverB) ? serverA : serverB;\n+    }\n+\n+    public static boolean isServerNetworkBetter(IUploadServer serverA, IUploadServer serverB) {\n+        if (serverA == null) {\n+            return false;\n+        } else if (serverB == null) {\n+            return true;\n+        }\n+\n+        String serverTypeA = NetworkStatusManager.getNetworkStatusType(serverA.getHost(), serverA.getIp());\n+        String serverTypeB = NetworkStatusManager.getNetworkStatusType(serverB.getHost(), serverB.getIp());\n+        if (serverTypeA == null) {\n+            return false;\n+        } else if (serverTypeB == null) {\n+            return true;\n+        }\n+\n+        NetworkStatusManager.NetworkStatus serverStatusA = NetworkStatusManager.getInstance().getNetworkStatus(serverTypeA);\n+        NetworkStatusManager.NetworkStatus serverStatusB = NetworkStatusManager.getInstance().getNetworkStatus(serverTypeB);\n+\n+        return serverStatusB.getSpeed() < serverStatusA.getSpeed();\n+    }\n+}"
    },
    {
      "sha": "a7dc33d9f792b1fdfee7c119da548617b8c3da1c",
      "filename": "library/src/main/java/com/qiniu/android/http/request/HttpRegionRequest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 14,
      "changes": 21,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/HttpRegionRequest.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/HttpRegionRequest.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/request/HttpRegionRequest.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -24,7 +24,7 @@\n     private final IUploadRegion region;\n     private final UploadRequestInfo requestInfo;\n \n-    private boolean isUseOldServer;\n+    private UploadRequestState requestState;\n     private HttpSingleRequest singleRequest;\n     private IUploadServer currentServer;\n     private UploadRegionRequestMetrics requestMetrics;\n@@ -40,6 +40,7 @@\n         this.token = token;\n         this.region = region;\n         this.requestInfo = requestInfo;\n+        this.requestState = requestState;\n \n         singleRequest = new HttpSingleRequest(config, uploadOption, token, requestInfo, requestState);\n     }\n@@ -97,30 +98,22 @@ private void performRequest(IUploadServer server,\n         String serverIP = server.getIp();\n \n         if (config.urlConverter != null){\n-            serverHost = config.urlConverter.convert(serverHost);\n             serverIP = null;\n-            server = null;\n+            serverHost = config.urlConverter.convert(serverHost);\n         }\n \n-        boolean toSkipDns;\n         String scheme = config.useHttps ? \"https://\" : \"http://\";\n         String urlString = scheme + serverHost + (action != null ? action : \"\");\n-        if (serverIP != null && serverIP.length() > 0) {\n-            toSkipDns = false;\n-        } else {\n-            toSkipDns = true;\n-        }\n         final Request request = new Request(urlString, method, header, data, config.connectTimeout);\n         request.host = serverHost;\n         request.ip = serverIP;\n-        request.uploadServer = server;\n \n         LogUtil.i(\"key:\" + StringUtils.toNonnullString(requestInfo.key) +\n                 \" url:\" + StringUtils.toNonnullString(request.urlString));\n         LogUtil.i(\"key:\" + StringUtils.toNonnullString(requestInfo.key) +\n                 \" headers:\" + StringUtils.toNonnullString(request.allHeaders));\n \n-        singleRequest.request(request, isAsync, toSkipDns, shouldRetryHandler, progressHandler, new HttpSingleRequest.RequestCompleteHandler() {\n+        singleRequest.request(request, server, isAsync, shouldRetryHandler, progressHandler, new HttpSingleRequest.RequestCompleteHandler() {\n             @Override\n             public void complete(ResponseInfo responseInfo, ArrayList<UploadSingleRequestMetrics> requestMetricsList, JSONObject response) {\n \n@@ -160,11 +153,11 @@ private void completeAction(ResponseInfo responseInfo,\n \n     private IUploadServer getNextServer(ResponseInfo responseInfo){\n \n-        if (responseInfo != null && responseInfo.isTlsError()) {\n-            isUseOldServer = true;\n+        if (requestState != null && responseInfo != null && responseInfo.isTlsError()) {\n+            requestState.setUseOldServer(true);\n         }\n \n-        return region.getNextServer(isUseOldServer, responseInfo, currentServer);\n+        return region.getNextServer(requestState, responseInfo, currentServer);\n     }\n \n "
    },
    {
      "sha": "e286e4d70f91b265232385182aea5d53adb29a79",
      "filename": "library/src/main/java/com/qiniu/android/http/request/HttpSingleRequest.java",
      "status": "modified",
      "additions": 74,
      "deletions": 38,
      "changes": 112,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/HttpSingleRequest.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/HttpSingleRequest.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/request/HttpSingleRequest.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -6,6 +6,7 @@\n import com.qiniu.android.http.ResponseInfo;\n import com.qiniu.android.http.connectCheck.ConnectChecker;\n import com.qiniu.android.http.dns.DnsPrefetcher;\n+import com.qiniu.android.http.networkStatus.NetworkStatusManager;\n import com.qiniu.android.http.request.httpclient.SystemHttpClient;\n import com.qiniu.android.http.request.handler.CheckCancelHandler;\n import com.qiniu.android.http.request.handler.RequestProgressHandler;\n@@ -21,6 +22,7 @@\n import org.json.JSONObject;\n \n import java.util.ArrayList;\n+import java.util.Locale;\n \n \n class HttpSingleRequest {\n@@ -32,7 +34,7 @@\n     private final UploadRequestInfo requestInfo;\n     private final UploadRequestState requestState;\n \n-    private ArrayList <UploadSingleRequestMetrics> requestMetricsList;\n+    private ArrayList<UploadSingleRequestMetrics> requestMetricsList;\n \n     private IRequestClient client;\n \n@@ -50,24 +52,24 @@\n     }\n \n     void request(Request request,\n+                 IUploadServer server,\n                  boolean isAsync,\n-                 boolean toSkipDns,\n                  RequestShouldRetryHandler shouldRetryHandler,\n                  RequestProgressHandler progressHandler,\n-                 RequestCompleteHandler completeHandler){\n+                 RequestCompleteHandler completeHandler) {\n         currentRetryTime = 0;\n         requestMetricsList = new ArrayList<>();\n-        retryRequest(request, isAsync, toSkipDns, shouldRetryHandler, progressHandler, completeHandler);\n+        retryRequest(request, server, isAsync, shouldRetryHandler, progressHandler, completeHandler);\n     }\n \n     private void retryRequest(final Request request,\n+                              final IUploadServer server,\n                               final boolean isAsync,\n-                              final boolean toSkipDns,\n                               final RequestShouldRetryHandler shouldRetryHandler,\n                               final RequestProgressHandler progressHandler,\n-                              final RequestCompleteHandler completeHandler){\n+                              final RequestCompleteHandler completeHandler) {\n \n-        if (toSkipDns){\n+        if (server.isHttp3()) {\n             client = new SystemHttpClient();\n         } else {\n             client = new SystemHttpClient();\n@@ -77,7 +79,7 @@ private void retryRequest(final Request request,\n             @Override\n             public boolean checkCancel() {\n                 boolean isCancelled = requestState.isUserCancel();\n-                if (! isCancelled && uploadOption.cancellationSignal != null) {\n+                if (!isCancelled && uploadOption.cancellationSignal != null) {\n                     isCancelled = uploadOption.cancellationSignal.isCancelled();\n                 }\n                 return isCancelled;\n@@ -94,87 +96,109 @@ public boolean checkCancel() {\n             public void progress(long totalBytesWritten, long totalBytesExpectedToWrite) {\n                 if (checkCancelHandler.checkCancel()) {\n                     requestState.setUserCancel(true);\n-                    if (client != null){\n+                    if (client != null) {\n                         client.cancel();\n                     }\n-                } else if (progressHandler != null){\n+                } else if (progressHandler != null) {\n                     progressHandler.progress(totalBytesWritten, totalBytesExpectedToWrite);\n                 }\n             }\n         }, new IRequestClient.RequestClientCompleteHandler() {\n             @Override\n             public void complete(ResponseInfo responseInfo, UploadSingleRequestMetrics metrics, JSONObject response) {\n-                if (metrics != null){\n+                if (metrics != null) {\n                     requestMetricsList.add(metrics);\n                 }\n \n-                if (shouldCheckConnect(responseInfo) && !ConnectChecker.check()) {\n-                    String message = \"check origin statusCode:\" + responseInfo.statusCode + \" error:\" + responseInfo.error;\n-                    responseInfo = ResponseInfo.errorInfo(ResponseInfo.NetworkSlow, message);\n+                if (shouldCheckConnect(responseInfo)) {\n+                    UploadSingleRequestMetrics checkMetrics = ConnectChecker.check();\n+                    if (metrics != null) {\n+                        metrics.connectCheckMetrics = checkMetrics;\n+                    }\n+                    if (!ConnectChecker.isConnected(checkMetrics)) {\n+                        String message = \"check origin statusCode:\" + responseInfo.statusCode + \" error:\" + responseInfo.error;\n+                        responseInfo = ResponseInfo.errorInfo(ResponseInfo.NetworkSlow, message);\n+                    }\n                 }\n \n                 LogUtil.i(\"key:\" + StringUtils.toNonnullString(requestInfo.key) +\n                         \" response:\" + StringUtils.toNonnullString(responseInfo));\n                 if (shouldRetryHandler != null && shouldRetryHandler.shouldRetry(responseInfo, response)\n-                    && currentRetryTime < config.retryMax\n-                    && responseInfo.couldHostRetry()){\n+                        && currentRetryTime < config.retryMax\n+                        && responseInfo.couldHostRetry()) {\n                     currentRetryTime += 1;\n \n                     try {\n                         Thread.sleep(config.retryInterval);\n                     } catch (InterruptedException ignored) {\n                     }\n-                    retryRequest(request, isAsync, toSkipDns, shouldRetryHandler, progressHandler, completeHandler);\n+                    retryRequest(request, server, isAsync, shouldRetryHandler, progressHandler, completeHandler);\n                 } else {\n-                    completeAction(request, responseInfo, response, metrics, completeHandler);\n+                    completeAction(server, responseInfo, response, metrics, completeHandler);\n                 }\n             }\n         });\n \n     }\n \n     private boolean shouldCheckConnect(ResponseInfo responseInfo) {\n-        return responseInfo != null && (\n-                responseInfo.statusCode == -1001 || /* timeout */\n-                responseInfo.statusCode == -1003 || /* unknown host */\n-                responseInfo.statusCode == -1004 || /* cannot connect to host */\n-                responseInfo.statusCode == -1005 || /* connection lost */\n-                responseInfo.statusCode == -1009 || /* not connected to host */\n-                responseInfo.isTlsError());\n+        return responseInfo != null &&\n+                (responseInfo.statusCode == ResponseInfo.NetworkError || /* network error */\n+                        responseInfo.statusCode == -1001 || /* timeout */\n+                        responseInfo.statusCode == -1003 || /* unknown host */\n+                        responseInfo.statusCode == -1004 || /* cannot connect to host */\n+                        responseInfo.statusCode == -1005 || /* connection lost */\n+                        responseInfo.statusCode == -1009 || /* not connected to host */\n+                        responseInfo.isTlsError());\n     }\n \n-    private synchronized void completeAction(Request request,\n+    private synchronized void completeAction(IUploadServer server,\n                                              ResponseInfo responseInfo,\n                                              JSONObject response,\n                                              UploadSingleRequestMetrics requestMetrics,\n                                              RequestCompleteHandler completeHandler) {\n \n-        if (client == null){\n+        if (client == null) {\n             return;\n         }\n         client = null;\n \n-        if (completeHandler != null){\n+        updateHostNetworkStatus(responseInfo, server, requestMetrics);\n+        reportRequest(responseInfo, server, requestMetrics);\n+\n+        if (completeHandler != null) {\n             completeHandler.complete(responseInfo, requestMetricsList, response);\n         }\n-        reportRequest(responseInfo, request, requestMetrics);\n+    }\n+\n+    private void updateHostNetworkStatus(ResponseInfo responseInfo, IUploadServer server, UploadSingleRequestMetrics requestMetrics) {\n+        if (requestMetrics == null) {\n+            return;\n+        }\n+        long byteCount = requestMetrics.bytesSend();\n+        long second = requestMetrics.totalElapsedTime();\n+        if (second > 0 && byteCount >= 1024 * 1024) {\n+            int speed = (int) (byteCount * 1000 / second);\n+            String type = NetworkStatusManager.getNetworkStatusType(server.getHost(), server.getIp());\n+            NetworkStatusManager.getInstance().updateNetworkStatus(type, speed);\n+        }\n     }\n \n     private void reportRequest(ResponseInfo responseInfo,\n-                               Request request,\n-                               UploadSingleRequestMetrics requestMetrics){\n+                               IUploadServer server,\n+                               UploadSingleRequestMetrics requestMetrics) {\n \n-        if (token == null || !token.isValid() || requestInfo == null || !requestInfo.shouldReportRequestLog() || requestMetrics == null){\n+        if (token == null || !token.isValid() || requestInfo == null || !requestInfo.shouldReportRequestLog() || requestMetrics == null) {\n             return;\n         }\n \n         long currentTimestamp = Utils.currentTimestamp();\n         ReportItem item = new ReportItem();\n         item.setReport(ReportItem.LogTypeRequest, ReportItem.RequestKeyLogType);\n-        item.setReport((currentTimestamp/1000), ReportItem.RequestKeyUpTime);\n+        item.setReport((currentTimestamp / 1000), ReportItem.RequestKeyUpTime);\n         item.setReport(ReportItem.requestReportStatusCode(responseInfo), ReportItem.RequestKeyStatusCode);\n         item.setReport(responseInfo != null ? responseInfo.reqId : null, ReportItem.RequestKeyRequestId);\n-        item.setReport(request != null ? request.host : null, ReportItem.RequestKeyHost);\n+        item.setReport(requestMetrics.request != null ? requestMetrics.request.host : null, ReportItem.RequestKeyHost);\n         item.setReport(requestMetrics.remoteAddress, ReportItem.RequestKeyRemoteIp);\n         item.setReport(requestMetrics.remotePort, ReportItem.RequestKeyPort);\n         item.setReport(requestInfo.bucket, ReportItem.RequestKeyTargetBucket);\n@@ -197,7 +221,7 @@ private void reportRequest(ResponseInfo responseInfo,\n         String errorType = ReportItem.requestReportErrorType(responseInfo);\n         item.setReport(errorType, ReportItem.RequestKeyErrorType);\n         String errorDesc = null;\n-        if (responseInfo != null && errorType != null){\n+        if (responseInfo != null && errorType != null) {\n             errorDesc = responseInfo.error != null ? responseInfo.error : responseInfo.message;\n         }\n         item.setReport(errorDesc, ReportItem.RequestKeyErrorDescription);\n@@ -210,16 +234,28 @@ private void reportRequest(ResponseInfo responseInfo,\n         item.setReport(Utils.getCurrentNetworkType(), ReportItem.RequestKeyNetworkType);\n         item.setReport(Utils.getCurrentSignalStrength(), ReportItem.RequestKeySignalStrength);\n \n-        item.setReport(request.uploadServer.getSource(), ReportItem.RequestKeyPrefetchedDnsSource);\n-        if (request.uploadServer.getIpPrefetchedTime() != null){\n-            Long prefetchTime = request.uploadServer.getIpPrefetchedTime() - currentTimestamp;\n+        item.setReport(server.getSource(), ReportItem.RequestKeyPrefetchedDnsSource);\n+        if (server.getIpPrefetchedTime() != null) {\n+            Long prefetchTime = server.getIpPrefetchedTime() - currentTimestamp;\n             item.setReport(prefetchTime, ReportItem.RequestKeyPrefetchedBefore);\n         }\n         item.setReport(DnsPrefetcher.getInstance().lastPrefetchErrorMessage, ReportItem.RequestKeyPrefetchedErrorMessage);\n \n         item.setReport(requestMetrics.clientName, ReportItem.RequestKeyHttpClient);\n         item.setReport(requestMetrics.clientVersion, ReportItem.RequestKeyHttpClientVersion);\n \n+        if (requestMetrics.connectCheckMetrics != null) {\n+            String connectCheckDuration = String.format(Locale.ENGLISH,\"%d\", requestMetrics.connectCheckMetrics.totalElapsedTime());\n+            String connectCheckStatusCode = \"\";\n+            if (requestMetrics.connectCheckMetrics.response != null) {\n+                connectCheckStatusCode = String.format(Locale.ENGLISH,\"%d\", requestMetrics.connectCheckMetrics.response.statusCode);\n+            }\n+            String networkMeasuring = String.format(\"duration:%s status_code:%s\", connectCheckDuration, connectCheckStatusCode);\n+            item.setReport(networkMeasuring, ReportItem.RequestKeyNetworkMeasuring);\n+        }\n+\n+        item.setReport(requestMetrics.httpVersion, ReportItem.RequestKeyHttpVersion);\n+\n         UploadInfoReporter.getInstance().report(item, token.token);\n     }\n "
    },
    {
      "sha": "300c65bf2453db61b0d62ac77362c6792914b1db",
      "filename": "library/src/main/java/com/qiniu/android/http/request/IUploadRegion.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/IUploadRegion.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/IUploadRegion.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/request/IUploadRegion.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -13,5 +13,5 @@\n \n     void setupRegionData(ZoneInfo zoneInfo);\n \n-    IUploadServer getNextServer(boolean isOldServer, ResponseInfo responseInfo, IUploadServer freezeServer);\n+    IUploadServer getNextServer(UploadRequestState requestState, ResponseInfo responseInfo, IUploadServer freezeServer);\n }"
    },
    {
      "sha": "9c93c1a41907fdc3b09c00115f765dc669f0a102",
      "filename": "library/src/main/java/com/qiniu/android/http/request/IUploadServer.java",
      "status": "modified",
      "additions": 27,
      "deletions": 6,
      "changes": 33,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/IUploadServer.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/IUploadServer.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/request/IUploadServer.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -1,15 +1,36 @@\n package com.qiniu.android.http.request;\n \n \n-public interface IUploadServer {\n+public abstract class IUploadServer {\n+    public static String HttpVersion1 = \"http_version_1\";\n+    public static String HttpVersion2 = \"http_version_2\";\n+    public static String HttpVersion3 = \"http_version_3\";\n \n-    String getServerId();\n+    public boolean isHttp3() {\n+        String httpVersion = getHttpVersion();\n+        if (httpVersion == null) {\n+            return false;\n+        }\n+        return httpVersion.equals(IUploadServer.HttpVersion3);\n+    }\n \n-    String getHost();\n+    public boolean isHttp2() {\n+        String httpVersion = getHttpVersion();\n+        if (httpVersion == null) {\n+            return false;\n+        }\n+        return httpVersion.equals(IUploadServer.HttpVersion2);\n+    }\n \n-    String getIp();\n+    public abstract String getServerId();\n \n-    String getSource();\n+    public abstract String getHttpVersion();\n \n-    Long getIpPrefetchedTime();\n+    public abstract String getHost();\n+\n+    public abstract String getIp();\n+\n+    public abstract String getSource();\n+\n+    public abstract Long getIpPrefetchedTime();\n }"
    },
    {
      "sha": "ec634547828d4628754d420177cad196f985ad3e",
      "filename": "library/src/main/java/com/qiniu/android/http/request/Request.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/Request.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/Request.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/request/Request.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -20,8 +20,6 @@\n     public String host;\n     public String ip;\n \n-    protected IUploadServer uploadServer;\n-\n     public Request(String urlString,\n                    String httpMethod,\n                    Map<String, String> allHeaders,\n@@ -36,12 +34,12 @@ public Request(String urlString,\n     }\n \n     public InetAddress getInetAddress(){\n-        if (host == null || uploadServer == null || uploadServer.getIp() == null) {\n+        if (host == null || ip == null || ip.length() == 0) {\n             return null;\n         }\n \n         try {\n-            InetAddress ipAddress = InetAddress.getByName(uploadServer.getIp());\n+            InetAddress ipAddress = InetAddress.getByName(ip);\n             return InetAddress.getByAddress(host, ipAddress.getAddress());\n         } catch (Exception e) {\n             return null;"
    },
    {
      "sha": "363c4eda6e12bf8bed5041b52ff62608c062b0ca",
      "filename": "library/src/main/java/com/qiniu/android/http/request/RequestTransaction.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/RequestTransaction.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/RequestTransaction.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/request/RequestTransaction.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -109,7 +109,7 @@ public boolean shouldRetry(ResponseInfo responseInfo, JSONObject response) {\n \n         HashMap<String, String> header = new HashMap<>();\n         header.put(\"User-Agent\", userAgent);\n-        String action = \"/v4/query?ak=\" + (token.accessKey != null ? token.accessKey : \"\") + \"&bucket=\" + (token.bucket != null ? token.bucket : \"\");\n+        String action = String.format(\"/v4/query?ak=%s&bucket=%s&sdk_version=%s&sdk_name=%s\", token.accessKey, token.bucket, Utils.sdkVerion(), Utils.sdkLanguage());\n         regionRequest.get(action, isAsync, header, shouldRetryHandler, new HttpRegionRequest.RequestCompleteHandler() {\n             @Override\n             public void complete(ResponseInfo responseInfo, UploadRegionRequestMetrics requestMetrics, JSONObject response) {"
    },
    {
      "sha": "a25b01b7b6d1422f8b767f3ce9f65470ef9c213e",
      "filename": "library/src/main/java/com/qiniu/android/http/request/UploadRequestState.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/UploadRequestState.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/UploadRequestState.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/request/UploadRequestState.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -1,7 +1,8 @@\n package com.qiniu.android.http.request;\n \n-class UploadRequestState {\n+public class UploadRequestState {\n \n+    private boolean isUseOldServer;\n     private boolean isUserCancel;\n \n     boolean isUserCancel(){\n@@ -11,4 +12,19 @@ boolean isUserCancel(){\n     void setUserCancel(boolean isUserCancel) {\n         this.isUserCancel = isUserCancel;\n     }\n+\n+    public boolean isUseOldServer() {\n+        return isUseOldServer;\n+    }\n+\n+    public void setUseOldServer(boolean useOldServer) {\n+        isUseOldServer = useOldServer;\n+    }\n+\n+    protected UploadRequestState clone() {\n+        UploadRequestState state = new UploadRequestState();\n+        state.isUseOldServer = isUseOldServer;\n+        state.isUserCancel = isUserCancel;\n+        return state;\n+    }\n }"
    },
    {
      "sha": "9161a89085b5003b1aa3ba582edeb0ac925540c3",
      "filename": "library/src/main/java/com/qiniu/android/http/request/httpclient/SystemHttpClient.java",
      "status": "modified",
      "additions": 113,
      "deletions": 64,
      "changes": 177,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/httpclient/SystemHttpClient.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/request/httpclient/SystemHttpClient.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/request/httpclient/SystemHttpClient.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -81,7 +81,7 @@ public void request(Request request,\n         completeHandler = complete;\n \n         okhttp3.Request.Builder requestBuilder = createRequestBuilder(requestProgress);\n-        if (requestBuilder == null){\n+        if (requestBuilder == null) {\n             ResponseInfo responseInfo = ResponseInfo.invalidArgument(\"invalid http request\");\n             handleError(request, responseInfo.statusCode, responseInfo.message, complete);\n             return;\n@@ -90,14 +90,14 @@ public void request(Request request,\n         ResponseTag tag = new ResponseTag();\n         call = httpClient.newCall(requestBuilder.tag(tag).build());\n \n-        if (isAsync){\n+        if (isAsync) {\n             call.enqueue(new Callback() {\n                 @Override\n                 public void onFailure(Call call, IOException e) {\n                     e.printStackTrace();\n                     String msg = e.getMessage();\n                     int status = getStatusCodeByException(e);\n-                    if (call.isCanceled()){\n+                    if (call.isCanceled()) {\n                         status = ResponseInfo.Cancelled;\n                         msg = \"user cancelled\";\n                     }\n@@ -123,7 +123,7 @@ public void run() {\n                 e.printStackTrace();\n                 String msg = e.getMessage();\n                 int status = getStatusCodeByException(e);\n-                if (call.isCanceled()){\n+                if (call.isCanceled()) {\n                     status = ResponseInfo.Cancelled;\n                     msg = \"user cancelled\";\n                 }\n@@ -140,8 +140,8 @@ public synchronized void cancel() {\n         }\n     }\n \n-    private OkHttpClient createHttpClient(ProxyConfiguration connectionProxy){\n-        if (currentRequest == null){\n+    private OkHttpClient createHttpClient(ProxyConfiguration connectionProxy) {\n+        if (currentRequest == null) {\n             return null;\n         }\n \n@@ -159,7 +159,7 @@ private OkHttpClient createHttpClient(ProxyConfiguration connectionProxy){\n         clientBuilder.dns(new Dns() {\n             @Override\n             public List<InetAddress> lookup(String s) throws UnknownHostException {\n-                if (currentRequest.getInetAddress() != null && s.equals(currentRequest.host)){\n+                if (currentRequest.getInetAddress() != null && s.equals(currentRequest.host)) {\n                     List<InetAddress> inetAddressList = new ArrayList<>();\n                     inetAddressList.add(currentRequest.getInetAddress());\n                     return inetAddressList;\n@@ -199,14 +199,14 @@ private OkHttpClient createHttpClient(ProxyConfiguration connectionProxy){\n         return clientBuilder.build();\n     }\n \n-    private synchronized static ConnectionPool getConnectPool(){\n-        if (pool == null){\n+    private synchronized static ConnectionPool getConnectPool() {\n+        if (pool == null) {\n             pool = new ConnectionPool(5, 10, TimeUnit.MINUTES);\n         }\n         return pool;\n     }\n \n-    private okhttp3.Request.Builder createRequestBuilder(final RequestClientProgress progress){\n+    private okhttp3.Request.Builder createRequestBuilder(final RequestClientProgress progress) {\n         if (currentRequest == null) {\n             return null;\n         }\n@@ -215,14 +215,14 @@ private synchronized static ConnectionPool getConnectPool(){\n \n         okhttp3.Request.Builder requestBuilder = null;\n         if (currentRequest.httpMethod.equals(Request.HttpMethodHEAD) ||\n-                currentRequest.httpMethod.equals(Request.HttpMethodGet)){\n+                currentRequest.httpMethod.equals(Request.HttpMethodGet)) {\n             requestBuilder = new okhttp3.Request.Builder().get().url(currentRequest.urlString);\n-            for (String key : currentRequest.allHeaders.keySet()){\n+            for (String key : currentRequest.allHeaders.keySet()) {\n                 String value = currentRequest.allHeaders.get(key);\n                 requestBuilder.header(key, value);\n             }\n         } else if (currentRequest.httpMethod.equals(Request.HttpMethodPOST) ||\n-                currentRequest.httpMethod.equals(Request.HttpMethodPUT)){\n+                currentRequest.httpMethod.equals(Request.HttpMethodPUT)) {\n             requestBuilder = new okhttp3.Request.Builder().url(currentRequest.urlString);\n             requestBuilder = requestBuilder.headers(allHeaders);\n \n@@ -240,102 +240,143 @@ private synchronized static ConnectionPool getConnectPool(){\n             rbody = new CountingRequestBody(rbody, new ProgressHandler() {\n                 @Override\n                 public void onProgress(long bytesWritten, long totalSize) {\n-                if (progress != null){\n-                    progress.progress(bytesWritten, totalSize);\n-                }\n+                    if (progress != null) {\n+                        progress.progress(bytesWritten, totalSize);\n+                    }\n                 }\n             }, currentRequest.httpBody.length, null);\n \n-            if (currentRequest.httpMethod.equals(Request.HttpMethodPOST)){\n+            if (currentRequest.httpMethod.equals(Request.HttpMethodPOST)) {\n                 requestBuilder = requestBuilder.post(rbody);\n-            } else if (currentRequest.httpMethod.equals(Request.HttpMethodPUT)){\n+            } else if (currentRequest.httpMethod.equals(Request.HttpMethodPUT)) {\n                 requestBuilder = requestBuilder.put(rbody);\n             }\n \n         }\n         return requestBuilder;\n     }\n \n-    private EventListener createEventLister(){\n+    private EventListener createEventLister() {\n         return new EventListener() {\n-            @Override public void callStart(Call call) {\n+            @Override\n+            public void callStart(Call call) {\n                 metrics.startDate = new Date();\n             }\n-            @Override public void dnsStart(Call call,\n-                                           String domainName) {\n+\n+            @Override\n+            public void dnsStart(Call call,\n+                                 String domainName) {\n                 metrics.domainLookupStartDate = new Date();\n             }\n-            @Override public void dnsEnd(Call call,\n-                                         String domainName,\n-                                         List<InetAddress> inetAddressList) {\n+\n+            @Override\n+            public void dnsEnd(Call call,\n+                               String domainName,\n+                               List<InetAddress> inetAddressList) {\n                 metrics.domainLookupEndDate = new Date();\n             }\n-            @Override public void connectStart(Call call,\n-                                               InetSocketAddress inetSocketAddress,\n-                                               Proxy proxy) {\n+\n+            @Override\n+            public void connectStart(Call call,\n+                                     InetSocketAddress inetSocketAddress,\n+                                     Proxy proxy) {\n                 metrics.connectStartDate = new Date();\n                 metrics.remoteAddress = inetSocketAddress.getAddress().getHostAddress();\n                 metrics.remotePort = inetSocketAddress.getPort();\n                 metrics.localAddress = AndroidNetwork.getHostIP();\n             }\n-            @Override public void secureConnectStart(Call call) {\n+\n+            @Override\n+            public void secureConnectStart(Call call) {\n                 metrics.connectEndDate = new Date();\n             }\n-            @Override public void secureConnectEnd(Call call,\n-                                                   Handshake handshake) {\n+\n+            @Override\n+            public void secureConnectEnd(Call call,\n+                                         Handshake handshake) {\n                 metrics.secureConnectionStartDate = new Date();\n             }\n-            @Override public void connectEnd(Call call,\n-                                             InetSocketAddress inetSocketAddress,\n-                                             Proxy proxy,\n-                                             Protocol protocol) {\n+\n+            @Override\n+            public void connectEnd(Call call,\n+                                   InetSocketAddress inetSocketAddress,\n+                                   Proxy proxy,\n+                                   Protocol protocol) {\n                 metrics.secureConnectionEndDate = new Date();\n             }\n-            @Override public void connectFailed(Call call,\n-                                                InetSocketAddress inetSocketAddress,\n-                                                Proxy proxy,\n-                                                Protocol protocol,\n-                                                IOException ioe) {\n+\n+            @Override\n+            public void connectFailed(Call call,\n+                                      InetSocketAddress inetSocketAddress,\n+                                      Proxy proxy,\n+                                      Protocol protocol,\n+                                      IOException ioe) {\n                 metrics.connectEndDate = new Date();\n             }\n-            @Override public void connectionAcquired(Call call, Connection connection) {\n+\n+            @Override\n+            public void connectionAcquired(Call call, Connection connection) {\n             }\n-            @Override public void connectionReleased(Call call, Connection connection) {\n+\n+            @Override\n+            public void connectionReleased(Call call, Connection connection) {\n             }\n-            @Override public void requestHeadersStart(Call call) {\n+\n+            @Override\n+            public void requestHeadersStart(Call call) {\n                 metrics.requestStartDate = new Date();\n             }\n-            @Override public void requestHeadersEnd(Call call, okhttp3.Request request) {\n+\n+            @Override\n+            public void requestHeadersEnd(Call call, okhttp3.Request request) {\n                 metrics.countOfRequestHeaderBytesSent = request.headers().toString().length();\n             }\n-            @Override public void requestBodyStart(Call call) {\n+\n+            @Override\n+            public void requestBodyStart(Call call) {\n             }\n-            @Override public void requestBodyEnd(Call call, long byteCount) {\n+\n+            @Override\n+            public void requestBodyEnd(Call call, long byteCount) {\n                 metrics.requestEndDate = new Date();\n                 metrics.countOfRequestBodyBytesSent = byteCount;\n             }\n+\n             public void requestFailed(Call call, IOException ioe) {\n                 metrics.requestEndDate = new Date();\n                 metrics.countOfRequestBodyBytesSent = 0;\n             }\n-            @Override public void responseHeadersStart(Call call) {\n+\n+            @Override\n+            public void responseHeadersStart(Call call) {\n                 metrics.responseStartDate = new Date();\n             }\n-            @Override public void responseHeadersEnd(Call call, Response response) {\n+\n+            @Override\n+            public void responseHeadersEnd(Call call, Response response) {\n \n             }\n-            @Override public void responseBodyStart(Call call) {\n+\n+            @Override\n+            public void responseBodyStart(Call call) {\n             }\n-            @Override public void responseBodyEnd(Call call, long byteCount) {\n+\n+            @Override\n+            public void responseBodyEnd(Call call, long byteCount) {\n                 metrics.responseEndDate = new Date();\n             }\n+\n             public void responseFailed(Call call, IOException ioe) {\n                 metrics.responseEndDate = new Date();\n             }\n-            @Override public void callEnd(Call call) {\n+\n+            @Override\n+            public void callEnd(Call call) {\n                 metrics.endDate = new Date();\n             }\n-            @Override public void callFailed(Call call, IOException ioe) {\n+\n+            @Override\n+            public void callFailed(Call call, IOException ioe) {\n                 metrics.endDate = new Date();\n             }\n         };\n@@ -344,23 +385,22 @@ public void responseFailed(Call call, IOException ioe) {\n     private synchronized void handleError(Request request,\n                                           int responseCode,\n                                           String errorMsg,\n-                                          RequestClientCompleteHandler complete){\n+                                          RequestClientCompleteHandler complete) {\n         if (metrics == null || metrics.response != null) {\n             return;\n         }\n \n-        ResponseInfo info = ResponseInfo.create(request, responseCode, null,null, errorMsg);\n+        ResponseInfo info = ResponseInfo.create(request, responseCode, null, null, errorMsg);\n         metrics.response = info;\n-        metrics.response = null;\n-        metrics.request = null;\n+        metrics.request = request;\n         complete.complete(info, metrics, info.response);\n \n         releaseResource();\n     }\n \n     private synchronized void handleResponse(Request request,\n                                              okhttp3.Response response,\n-                                             RequestClientCompleteHandler complete){\n+                                             RequestClientCompleteHandler complete) {\n         if (metrics == null || metrics.response != null) {\n             return;\n         }\n@@ -384,14 +424,15 @@ private synchronized void handleResponse(Request request,\n             errorMessage = e.getMessage();\n         }\n \n-        if (responseBody == null){\n+        if (responseBody == null) {\n             errorMessage = response.message();\n-        } else if (responseContentType(response) != \"application/json\"){\n+        } else if (responseContentType(response) != \"application/json\") {\n             String responseString = new String(responseBody);\n-            if (responseString.length() > 0){\n+            if (responseString.length() > 0) {\n                 try {\n                     responseJson = new JSONObject(responseString);\n-                } catch (Exception ignored) {}\n+                } catch (Exception ignored) {\n+                }\n             }\n         } else {\n             try {\n@@ -405,12 +446,20 @@ private synchronized void handleResponse(Request request,\n \n         final ResponseInfo info = ResponseInfo.create(request, statusCode, responseHeader, responseJson, errorMessage);\n         metrics.response = info;\n+        metrics.request = request;\n+        if (response.protocol() == Protocol.HTTP_1_0) {\n+            metrics.httpVersion = \"1.0\";\n+        } else if (response.protocol() == Protocol.HTTP_1_1) {\n+            metrics.httpVersion = \"1.1\";\n+        } else if (response.protocol() == Protocol.HTTP_2) {\n+            metrics.httpVersion = \"2\";\n+        }\n         complete.complete(info, metrics, info.response);\n \n         releaseResource();\n     }\n \n-    private void releaseResource(){\n+    private void releaseResource() {\n         this.currentRequest = null;\n         this.requestProgress = null;\n         this.completeHandler = null;\n@@ -427,10 +476,10 @@ private static String responseContentType(okhttp3.Response response) {\n         return mediaType.type() + \"/\" + mediaType.subtype();\n     }\n \n-    private int getStatusCodeByException(Exception e){\n+    private int getStatusCodeByException(Exception e) {\n         int statusCode = NetworkError;\n         String msg = e.getMessage();\n-        if (msg != null && msg.contains(\"Canceled\")){\n+        if (msg != null && msg.contains(\"Canceled\")) {\n             statusCode = ResponseInfo.Cancelled;\n         } else if (e instanceof CancellationHandler.CancellationException) {\n             statusCode = ResponseInfo.Cancelled;"
    },
    {
      "sha": "bc5c51bb4cb42070d711a59fc093aa22b49af29a",
      "filename": "library/src/main/java/com/qiniu/android/http/serverRegion/UploadDomainRegion.java",
      "status": "modified",
      "additions": 137,
      "deletions": 111,
      "changes": 248,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/serverRegion/UploadDomainRegion.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/serverRegion/UploadDomainRegion.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/serverRegion/UploadDomainRegion.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -4,8 +4,10 @@\n import com.qiniu.android.http.ResponseInfo;\n import com.qiniu.android.http.dns.DnsPrefetcher;\n import com.qiniu.android.http.dns.IDnsNetworkAddress;\n+import com.qiniu.android.http.networkStatus.UploadServerNetworkStatus;\n import com.qiniu.android.http.request.IUploadRegion;\n import com.qiniu.android.http.request.IUploadServer;\n+import com.qiniu.android.http.request.UploadRequestState;\n import com.qiniu.android.storage.GlobalConfiguration;\n import com.qiniu.android.utils.LogUtil;\n import com.qiniu.android.utils.StringUtils;\n@@ -17,12 +19,16 @@\n \n \n public class UploadDomainRegion implements IUploadRegion {\n+    private static int Http3FrozenTime = 3600 * 24;\n \n-    // 是否获取过，PS：当第一次获取Domain，而区域所有Domain又全部冻结时，返回一个domain尝试一次\n-    private boolean hasGot;\n+    // 是否支持http3\n+    private boolean http3Enabled;\n+\n+    // 是否冻结过Host，PS：如果没有冻结过 Host,则当前 Region 上传也就不会有错误信息，可能会返回-9，所以必须要再进行一次尝试\n+    private boolean hasFreezeHost;\n     private boolean isAllFrozen;\n     // 局部冻结管理对象\n-    private UploadServerFreezeManager partialFreezeManager = new UploadServerFreezeManager();\n+    private UploadServerFreezeManager partialHttp2Freezer = new UploadServerFreezeManager();\n \n     private ArrayList<String> domainHostList;\n     private HashMap<String, UploadServerDomain> domainHashMap;\n@@ -78,6 +84,9 @@ public void setupRegionData(ZoneInfo zoneInfo) {\n         this.zoneInfo = zoneInfo;\n \n         isAllFrozen = false;\n+        http3Enabled = zoneInfo.http3Enabled;\n+        // 暂不开启\n+        http3Enabled = false;\n \n         ArrayList<String> domainHostList = new ArrayList<>();\n         if (zoneInfo.domains != null) {\n@@ -97,28 +106,98 @@ public void setupRegionData(ZoneInfo zoneInfo) {\n         LogUtil.i(\"region old:\" + StringUtils.toNonnullString(oldDomainHostList));\n     }\n \n+    private HashMap<String, UploadServerDomain> createDomainDictionary(List<String> hosts) {\n+        HashMap<String, UploadServerDomain> domainHashMap = new HashMap<>();\n+        for (int i = 0; i < hosts.size(); i++) {\n+            String host = hosts.get(i);\n+            UploadServerDomain domain = new UploadServerDomain(host);\n+            domainHashMap.put(host, domain);\n+        }\n+        return domainHashMap;\n+    }\n+\n     @Override\n-    public IUploadServer getNextServer(boolean isOldServer, ResponseInfo responseInfo, IUploadServer freezeServer) {\n-        if (isAllFrozen) {\n+    public IUploadServer getNextServer(UploadRequestState requestState, ResponseInfo responseInfo, IUploadServer freezeServer) {\n+        if (isAllFrozen || requestState == null) {\n             return null;\n         }\n \n         freezeServerIfNeed(responseInfo, freezeServer);\n \n-        ArrayList<String> hostList = isOldServer ? oldDomainHostList : domainHostList;\n-        HashMap<String, UploadServerDomain> domainInfo = isOldServer ? oldDomainHashMap : domainHashMap;\n-        IUploadServer server = null;\n+        UploadServer server = null;\n+        boolean isUseOldServer = requestState.isUseOldServer();\n+        ArrayList<String> hostList = isUseOldServer ? oldDomainHostList : domainHostList;\n+        HashMap<String, UploadServerDomain> domainInfo = isUseOldServer ? oldDomainHashMap : domainHashMap;\n+\n+        // 1. 优先选择http3\n+        if (http3Enabled && freezeServer != null && freezeServer.isHttp3()) {\n+            for (String host : hostList) {\n+                UploadServerDomain domain = domainInfo.get(host);\n+                if (domain == null) {\n+                    continue;\n+                }\n+                IUploadServer domainServer = domain.getServer(new UploadServerDomain.GetServerCondition() {\n+                    @Override\n+                    public boolean condition(String host, UploadServer serverP, UploadServer filterServer) {\n+\n+                        // 1.1 剔除冻结对象\n+                        String filterServerIP = filterServer == null ? null : filterServer.getIp();\n+                        String frozenType = UploadServerFreezeUtil.getFrozenType(host, filterServerIP);\n+                        boolean isFrozen = UploadServerFreezeUtil.isTypeFrozenByFreezeManagers(frozenType, new UploadServerFreezeManager[]{UploadServerFreezeUtil.globalHttp3Freezer()});\n+\n+                        if (isFrozen) {\n+                            return false;\n+                        }\n+\n+                        // 1.2 挑选网络状态最优\n+                        return UploadServerNetworkStatus.isServerNetworkBetter(filterServer, serverP);\n+                    }\n+                });\n+\n+                server = (UploadServer) UploadServerNetworkStatus.getBetterNetworkServer(domainServer, server);\n+\n+                if (server != null) {\n+                    break;\n+                }\n+            }\n+\n+            if (server != null) {\n+                server.setHttpVersion(IUploadServer.HttpVersion3);\n+                return server;\n+            }\n+        }\n+\n+        // 2. 挑选http2\n         for (String host : hostList) {\n             UploadServerDomain domain = domainInfo.get(host);\n-            if (domain != null) {\n-                server = domain.getServer(new UploadServerFreezeManager[]{partialFreezeManager, UploadServerFreezeManager.getInstance()});\n+            if (domain == null) {\n+                continue;\n             }\n+            IUploadServer domainServer = domain.getServer(new UploadServerDomain.GetServerCondition() {\n+                @Override\n+                public boolean condition(String host, UploadServer serverP, UploadServer filterServer) {\n+                    // 1.1 剔除冻结对象\n+                    String filterServerIP = filterServer == null ? null : filterServer.getIp();\n+                    String frozenType = UploadServerFreezeUtil.getFrozenType(host, filterServerIP);\n+                    boolean isFrozen = UploadServerFreezeUtil.isTypeFrozenByFreezeManagers(frozenType, new UploadServerFreezeManager[]{partialHttp2Freezer, UploadServerFreezeUtil.globalHttp2Freezer()});\n+\n+                    if (isFrozen) {\n+                        return false;\n+                    }\n+\n+                    // 1.2 挑选网络状态最优\n+                    return UploadServerNetworkStatus.isServerNetworkBetter(filterServer, serverP);\n+                }\n+            });\n+\n+            server = (UploadServer) UploadServerNetworkStatus.getBetterNetworkServer(domainServer, server);\n+\n             if (server != null) {\n                 break;\n             }\n         }\n \n-        if (server == null && !hasGot && hostList.size() > 0) {\n+        if (server == null && !hasFreezeHost && hostList.size() > 0) {\n             int index = (int) (Math.random() * hostList.size());\n             String host = hostList.get(index);\n             UploadServerDomain domain = domainInfo.get(host);\n@@ -127,16 +206,13 @@ public IUploadServer getNextServer(boolean isOldServer, ResponseInfo responseInf\n             }\n             unfreezeServer(server);\n         }\n-        hasGot = true;\n \n-        if (server == null) {\n+        if (server != null) {\n+            server.setHttpVersion(IUploadServer.HttpVersion2);\n+            LogUtil.i(\"get server host:\" + StringUtils.toNonnullString(server.getHost()) + \" ip:\" + StringUtils.toNonnullString(server.getIp()));\n+        } else {\n             isAllFrozen = true;\n-        }\n-\n-        if (server == null) {\n             LogUtil.i(\"get server host:null ip:null\");\n-        } else {\n-            LogUtil.i(\"get server host:\" + StringUtils.toNonnullString(server.getHost()) + \" ip:\" + StringUtils.toNonnullString(server.getIp()));\n         }\n \n         return server;\n@@ -148,34 +224,29 @@ private void freezeServerIfNeed(ResponseInfo responseInfo, IUploadServer freezeS\n             return;\n         }\n \n-        // 无法连接到Host || Host不可用， 局部冻结\n+        String frozenType = UploadServerFreezeUtil.getFrozenType(freezeServer.getHost(), freezeServer.getIp());\n+        // 1. http3 冻结\n+        if (freezeServer.isHttp3()) {\n+            if (!responseInfo.canConnectToHost() || responseInfo.isHostUnavailable()) {\n+                hasFreezeHost = true;\n+                UploadServerFreezeUtil.globalHttp3Freezer().freezeType(frozenType, Http3FrozenTime);\n+            }\n+            return;\n+        }\n+\n+        // 2. http2 冻结\n+        // 2.1 无法连接到Host || Host不可用， 局部冻结\n         if (!responseInfo.canConnectToHost() || responseInfo.isHostUnavailable()) {\n+            hasFreezeHost = true;\n             LogUtil.i(\"partial freeze server host:\" + StringUtils.toNonnullString(freezeServer.getHost()) + \" ip:\" + StringUtils.toNonnullString(freezeServer.getIp()));\n-\n-            UploadServerDomain domain = null;\n-            domain = domainHashMap.get(freezeServer.getServerId());\n-            if (domain != null) {\n-                domain.freeze(freezeServer.getIp(), partialFreezeManager, GlobalConfiguration.getInstance().partialHostFrozenTime);\n-            }\n-            domain = oldDomainHashMap.get(freezeServer.getServerId());\n-            if (domain != null) {\n-                domain.freeze(freezeServer.getIp(), partialFreezeManager, GlobalConfiguration.getInstance().partialHostFrozenTime);\n-            }\n+            partialHttp2Freezer.freezeType(frozenType, GlobalConfiguration.getInstance().partialHostFrozenTime);\n         }\n \n-        // Host不可用，全局冻结\n+        // 2.2 Host不可用，全局冻结\n         if (responseInfo.isHostUnavailable()) {\n+            hasFreezeHost = true;\n             LogUtil.i(\"global freeze server host:\" + StringUtils.toNonnullString(freezeServer.getHost()) + \" ip:\" + StringUtils.toNonnullString(freezeServer.getIp()));\n-\n-            UploadServerDomain domain = null;\n-            domain = domainHashMap.get(freezeServer.getServerId());\n-            if (domain != null) {\n-                domain.freeze(freezeServer.getIp(), UploadServerFreezeManager.getInstance(), GlobalConfiguration.getInstance().globalHostFrozenTime);\n-            }\n-            domain = oldDomainHashMap.get(freezeServer.getServerId());\n-            if (domain != null) {\n-                domain.freeze(freezeServer.getIp(), UploadServerFreezeManager.getInstance(), GlobalConfiguration.getInstance().globalHostFrozenTime);\n-            }\n+            UploadServerFreezeUtil.globalHttp2Freezer().freezeType(frozenType, GlobalConfiguration.getInstance().globalHostFrozenTime);\n         }\n     }\n \n@@ -184,91 +255,58 @@ private void unfreezeServer(IUploadServer freezeServer) {\n             return;\n         }\n \n-        UploadServerDomain domain = null;\n-        domain = domainHashMap.get(freezeServer.getServerId());\n-        if (domain != null) {\n-            domain.unfreeze(freezeServer.getIp(), new UploadServerFreezeManager[]{partialFreezeManager, UploadServerFreezeManager.getInstance()});\n-        }\n-        domain = oldDomainHashMap.get(freezeServer.getServerId());\n-        if (domain != null) {\n-            domain.unfreeze(freezeServer.getIp(), new UploadServerFreezeManager[]{partialFreezeManager, UploadServerFreezeManager.getInstance()});\n-        }\n-    }\n-\n-    private HashMap<String, UploadServerDomain> createDomainDictionary(List<String> hosts) {\n-        HashMap<String, UploadServerDomain> domainHashMap = new HashMap<>();\n-        for (int i = 0; i < hosts.size(); i++) {\n-            String host = hosts.get(i);\n-            UploadServerDomain domain = new UploadServerDomain(host);\n-            domainHashMap.put(host, domain);\n-        }\n-        return domainHashMap;\n+        String frozenType = UploadServerFreezeUtil.getFrozenType(freezeServer.getHost(), freezeServer.getIp());\n+        partialHttp2Freezer.unfreezeType(frozenType);\n     }\n \n \n     private static class UploadServerDomain {\n \n-        private boolean isAllFrozen = false;\n         protected final String host;\n         protected ArrayList<UploadIpGroup> ipGroupList = new ArrayList<>();\n \n         protected UploadServerDomain(String host) {\n             this.host = host;\n         }\n \n-        protected IUploadServer getServer(UploadServerFreezeManager[] freezeManagerList) {\n-            if (isAllFrozen || host == null || host.length() == 0) {\n+        protected UploadServer getServer(GetServerCondition condition) {\n+            if (host == null || host.length() == 0) {\n                 return null;\n             }\n \n-            if (ipGroupList == null || ipGroupList.size() == 0) {\n-                createIpGroupList();\n+            synchronized (this) {\n+                if (ipGroupList == null || ipGroupList.size() == 0) {\n+                    createIpGroupList();\n+                }\n             }\n \n+            UploadServer server = null;\n+\n             // 解析到IP:\n             if (ipGroupList != null && ipGroupList.size() > 0) {\n-                UploadServer server = null;\n                 for (UploadIpGroup ipGroup : ipGroupList) {\n-                    // 黑名单中不存在 & 未被冻结\n-                    if (ipGroup.groupType != null && !isGroupFrozenByFreezeManagers(ipGroup.groupType, freezeManagerList)) {\n-                        IDnsNetworkAddress networkAddress = ipGroup.getNetworkAddress();\n-                        server = new UploadServer(host, host, networkAddress.getIpValue(), networkAddress.getSourceValue(), networkAddress.getTimestampValue());\n+                    IDnsNetworkAddress networkAddress = ipGroup.getNetworkAddress();\n+                    UploadServer filterServer = new UploadServer(host, host, networkAddress.getIpValue(), networkAddress.getSourceValue(), networkAddress.getTimestampValue());\n+\n+                    if (condition == null || condition.condition(host, server, filterServer)) {\n+                        server = filterServer;\n+                    }\n+\n+                    if (condition == null) {\n                         break;\n                     }\n                 }\n-                if (server == null) {\n-                    isAllFrozen = true;\n-                }\n+\n                 return server;\n             }\n \n             // 未解析到IP:\n-            // 黑名单中不存在 & 未被冻结\n-            String groupType = Utils.getIpType(null, host);\n-            if (groupType != null && !isGroupFrozenByFreezeManagers(groupType, freezeManagerList)) {\n-                return new UploadServer(host, host, null, null, null);\n-            } else {\n-                isAllFrozen = true;\n-                return null;\n+            if (condition == null || condition.condition(host, null, null)) {\n+                // 未解析时，没有可比性，直接返回自身，自身即为最优\n+                server = new UploadServer(host, host, null, null, null);\n             }\n-        }\n \n-        protected boolean isGroupFrozenByFreezeManagers(String groupType, UploadServerFreezeManager[] freezeManagerList) {\n-            if (groupType == null) {\n-                return true;\n-            }\n-            if (freezeManagerList == null || freezeManagerList.length == 0) {\n-                return false;\n-            }\n-\n-            boolean isFrozen = false;\n-            for (UploadServerFreezeManager freezeManager : freezeManagerList) {\n-                isFrozen = freezeManager.isFreezeHost(host, groupType);\n-                if (isFrozen) {\n-                    break;\n-                }\n-            }\n-            return isFrozen;\n+            return server;\n         }\n \n         protected UploadServer getOneServer() {\n@@ -286,7 +324,7 @@ protected UploadServer getOneServer() {\n             }\n         }\n \n-        private synchronized void createIpGroupList() {\n+        private void createIpGroupList() {\n             if (ipGroupList != null && ipGroupList.size() > 0) {\n                 return;\n             }\n@@ -322,20 +360,8 @@ private synchronized void createIpGroupList() {\n             this.ipGroupList = ipGroupList;\n         }\n \n-        protected void freeze(String ip, UploadServerFreezeManager freezeManager, int frozenTime) {\n-            if (freezeManager == null) {\n-                return;\n-            }\n-            freezeManager.freezeHost(host, Utils.getIpType(ip, this.host), frozenTime);\n-        }\n-\n-        protected void unfreeze(String ip, UploadServerFreezeManager[] freezeManagerList) {\n-            if (freezeManagerList == null || freezeManagerList.length == 0) {\n-                return;\n-            }\n-            for (UploadServerFreezeManager freezeManager : freezeManagerList) {\n-                freezeManager.unfreezeHost(host, Utils.getIpType(ip, this.host));\n-            }\n+        protected interface GetServerCondition {\n+            boolean condition(String host, UploadServer server, UploadServer filterServer);\n         }\n     }\n "
    },
    {
      "sha": "dabb9cd89bef0ae60e4d37f58058d45b43570e59",
      "filename": "library/src/main/java/com/qiniu/android/http/serverRegion/UploadServer.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServer.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServer.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServer.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -2,13 +2,14 @@\n \n import com.qiniu.android.http.request.IUploadServer;\n \n-public class UploadServer implements IUploadServer {\n+public class UploadServer extends IUploadServer {\n \n     private final String serverId;\n     private final String host;\n     private final String ip;\n     private final String source;\n     private final Long ipPrefetchedTime;\n+    private String httpVersion;\n \n     public UploadServer(String serverId,\n                         String host,\n@@ -27,6 +28,15 @@ public String getServerId() {\n         return this.serverId;\n     }\n \n+    @Override\n+    public String getHttpVersion() {\n+        return httpVersion;\n+    }\n+\n+    public void setHttpVersion(String httpVersion) {\n+        this.httpVersion = httpVersion;\n+    }\n+\n     @Override\n     public String getIp() {\n         return ip;"
    },
    {
      "sha": "c21bdb1f26f397b3b604754b2ab4923bcf7275f6",
      "filename": "library/src/main/java/com/qiniu/android/http/serverRegion/UploadServerFreezeManager.java",
      "status": "modified",
      "additions": 15,
      "deletions": 27,
      "changes": 42,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServerFreezeManager.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServerFreezeManager.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServerFreezeManager.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -20,66 +20,54 @@ public static UploadServerFreezeManager getInstance() {\n         return manager;\n     }\n \n-    public boolean isFreezeHost(String host, String type) {\n-        if (host == null || host.length() == 0) {\n+    public boolean isTypeFrozen(String type) {\n+        if (type == null || type.length() == 0) {\n             return true;\n         }\n         boolean isFrozen = true;\n-        String infoKey = getItemInfoKey(host, type);\n-        UploadServerFreezeItem item = frozenInfo.get(infoKey);\n+        UploadServerFreezeItem item = frozenInfo.get(type);\n         if (item == null || !item.isFrozenByDate(new Date())) {\n             isFrozen = false;\n         }\n         return isFrozen;\n     }\n \n-    public void freezeHost(String host, String type, int frozenTime) {\n-        if (host == null || host.length() == 0) {\n+    public void freezeType(String type, int frozenTime) {\n+        if (type == null || type.length() == 0) {\n             return;\n         }\n-        String infoKey = getItemInfoKey(host, type);\n-        UploadServerFreezeItem item = frozenInfo.get(infoKey);\n+        UploadServerFreezeItem item = frozenInfo.get(type);\n         if (item == null) {\n-            item = new UploadServerFreezeItem(host, type);\n-            frozenInfo.put(infoKey, item);\n+            item = new UploadServerFreezeItem(type);\n+            frozenInfo.put(type, item);\n         }\n         item.freeze(frozenTime);\n     }\n \n-    public void unfreezeHost(String host, String type) {\n-        if (host == null || host.length() == 0) {\n+    public void unfreezeType(String type) {\n+        if (type == null || type.length() == 0) {\n             return;\n         }\n-        String infoKey = getItemInfoKey(host, type);\n-        if (infoKey != null) {\n-            frozenInfo.remove(infoKey);\n-        }\n-    }\n-\n-    private String getItemInfoKey(String host, String type) {\n-        return String.format(\"%s:%s\", (host != null ? host : \"none\"), (type != null ? type : \"none\"));\n+        frozenInfo.remove(type);\n     }\n \n     private static class UploadServerFreezeItem {\n-        protected final String host;\n         protected final String type;\n-        protected Date freezeDate;\n+        private Date freezeDate;\n \n-        protected UploadServerFreezeItem(String host,\n-                                         String type) {\n-            this.host = host;\n+        private UploadServerFreezeItem(String type) {\n             this.type = type;\n         }\n \n-        protected synchronized boolean isFrozenByDate(Date date) {\n+        private synchronized boolean isFrozenByDate(Date date) {\n             boolean isFrozen = true;\n             if (freezeDate == null || freezeDate.getTime() < date.getTime()) {\n                 isFrozen = false;\n             }\n             return isFrozen;\n         }\n \n-        protected synchronized void freeze(int frozenTime) {\n+        private synchronized void freeze(int frozenTime) {\n             freezeDate = new Date(Utils.currentTimestamp() + frozenTime * 1000);\n         }\n "
    },
    {
      "sha": "fa8c09aee79eb710159aac5f07977f5ccbe8e37a",
      "filename": "library/src/main/java/com/qiniu/android/http/serverRegion/UploadServerFreezeUtil.java",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServerFreezeUtil.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServerFreezeUtil.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/http/serverRegion/UploadServerFreezeUtil.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -0,0 +1,40 @@\n+package com.qiniu.android.http.serverRegion;\n+\n+import com.qiniu.android.utils.Utils;\n+\n+import java.util.List;\n+\n+public class UploadServerFreezeUtil {\n+    private final static UploadServerFreezeManager globalHttp3Freezer = new UploadServerFreezeManager();\n+    public static UploadServerFreezeManager globalHttp3Freezer() {\n+        return globalHttp3Freezer;\n+    }\n+\n+    private final static UploadServerFreezeManager globalHttp2Freezer = new UploadServerFreezeManager();\n+    public static UploadServerFreezeManager globalHttp2Freezer() {\n+        return globalHttp2Freezer;\n+    }\n+\n+    public static boolean isTypeFrozenByFreezeManagers(String type, UploadServerFreezeManager[] freezeManagerList) {\n+        if (type == null || type.length() == 0) {\n+            return true;\n+        }\n+        if (freezeManagerList == null || freezeManagerList.length == 0) {\n+            return false;\n+        }\n+\n+        boolean isFrozen = false;\n+        for (UploadServerFreezeManager freezeManager : freezeManagerList) {\n+            isFrozen = freezeManager.isTypeFrozen(type);\n+            if (isFrozen) {\n+                break;\n+            }\n+        }\n+        return isFrozen;\n+    }\n+\n+    public static String getFrozenType(String host, String ip) {\n+        String ipType = Utils.getIpType(ip, host);\n+        return String.format(\"%s-%s\", host, ipType);\n+    }\n+}"
    },
    {
      "sha": "f17d2b6bcc27389cf0d9dd4c6243fce8a70f70d5",
      "filename": "library/src/main/java/com/qiniu/android/storage/GlobalConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/qiniu/android-sdk/blob/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/storage/GlobalConfiguration.java",
      "raw_url": "https://github.com/qiniu/android-sdk/raw/7b541060be0792a05702f45b4e552bcbe0d6b734/library/src/main/java/com/qiniu/android/storage/GlobalConfiguration.java",
      "contents_url": "https://api.github.com/repos/qiniu/android-sdk/contents/library/src/main/java/com/qiniu/android/storage/GlobalConfiguration.java?ref=7b541060be0792a05702f45b4e552bcbe0d6b734",
      "patch": "@@ -52,7 +52,7 @@\n      * 当请求的 Response 为网络异常时，并发对 connectCheckURLStrings 中 URLString 进行 HEAD 请求，以此检测当前网络状态的链接状态，其中任意一个 URLString 链接成功则认为当前网络状态链接良好；\n      * 当 connectCheckURLStrings 为 nil 或者 空数组时则弃用检测功能。\n      */\n-    public String[] connectCheckURLStrings = new String[]{\"http://www.qiniu.com\", \"http://www.baidu.com\", \"http://www.google.com\"};\n+    public String[] connectCheckURLStrings = new String[]{\"https://www.qiniu.com\", \"https://www.baidu.com\", \"https://www.google.com\"};\n \n     /**\n      * 网络连接状态检测HEAD请求超时，默认：3s"
    }
]