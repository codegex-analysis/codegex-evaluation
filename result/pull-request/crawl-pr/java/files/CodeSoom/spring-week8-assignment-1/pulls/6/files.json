[
  {
    "sha": "4b1d249f947f37a16d8dff789a178a79d60a9478",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 20,
    "deletions": 1,
    "changes": 21,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/.gitignore",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/.gitignore",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/.gitignore?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -1,8 +1,27 @@\n # Ignore Gradle project-specific cache directory\n .gradle\n+**/build/\n+!src/**/build/\n+caches\n+daemon\n+native\n+notifications\n+app/out/\n \n # Ignore Gradle build output directory\n build\n \n-# IDE\n+# VS Code\n+.vscode\n+\n+# Intellij IDEA\n .idea\n+\n+# macOS\n+.DS_Store\n+\n+# Windows thumbnail cache files\n+Thumbs.db\n+Thumbs.db:encryptable\n+ehthumbs.db\n+ehthumbs_vista.db"
  },
  {
    "sha": "b3df9c34d3fd0da0a18290d74e326d0db535cea5",
    "filename": "app/build.gradle",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/build.gradle",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/build.gradle",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/build.gradle?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -13,6 +13,9 @@ plugins {\n     // Spring\n     id 'org.springframework.boot' version '2.3.5.RELEASE'\n     id 'io.spring.dependency-management' version '1.0.10.RELEASE'\n+\n+    // Asciidoctor\n+    id 'org.asciidoctor.convert' version '2.4.0'\n }\n \n sourceCompatibility = '1.8'\n@@ -67,6 +70,7 @@ dependencies {\n     // Spring Data JPA\n     implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n     runtimeOnly 'com.h2database:h2'\n+    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.7.2'\n \n     // Spring Security\n     implementation 'org.springframework.boot:spring-boot-starter-security'\n@@ -78,6 +82,9 @@ dependencies {\n     testImplementation('org.springframework.boot:spring-boot-starter-test') {\n         exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n     }\n+\n+    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'\n+    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'\n }\n \n application {\n@@ -89,3 +96,7 @@ tasks.named('test') {\n     // Use junit platform for unit tests.\n     useJUnitPlatform()\n }\n+\n+asciidoctor {\n+    dependsOn(test)\n+}"
  },
  {
    "sha": "1bcac7493d632ef759d4420835c66bfe6e17e9d9",
    "filename": "app/src/docs/asciidoc/index.adoc",
    "status": "modified",
    "additions": 22,
    "deletions": 5,
    "changes": 27,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/docs/asciidoc/index.adoc",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/docs/asciidoc/index.adoc",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/docs/asciidoc/index.adoc?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -1,17 +1,34 @@\n-= 고양이 장난감 가게 API\n+//= 가게 API\n \n == GET /products\n \n-상품 목록을 JSON 형태로 돌려준다.\n+//상품 목록을 JSON 형태로 돌려준다.\n \n include::{snippets}/get-products/http-request.adoc[]\n \n include::{snippets}/get-products/http-response.adoc[]\n \n == GET /product/{id}\n \n-상품에 대한 자세한 정보를 JSON 형태로 돌려준다.\n+//상품에 대한 자세한 정보를 JSON 형태로 돌려준다.\n \n-include::{snippets}/get-product/http-request.adoc[]\n \n-include::{snippets}/get-product/http-response.adoc[]\n+\n+\n+\n+\n+//== GET /products\n+//\n+//상품 목록을 JSON 형태로 돌려준다.\n+//\n+//include::{snippets}/get-products/http-request.adoc[]\n+//\n+//include::{snippets}/get-products/http-response.adoc[]\n+//\n+//== GET /product/{id}\n+//\n+//상품에 대한 자세한 정보를 JSON 형태로 돌려준다.\n+//\n+//include::{snippets}/get-product/http-request.adoc[]\n+//\n+//include::{snippets}/get-product/http-response.adoc[]"
  },
  {
    "sha": "e0ca50ee0c5254eceba8466ef6b91af21e58eea7",
    "filename": "app/src/main/java/com/codesoom/assignment/application/AuthenticationService.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/application/AuthenticationService.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/application/AuthenticationService.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/application/AuthenticationService.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -12,6 +12,9 @@\n \n import java.util.List;\n \n+/**\n+ * 인증과 관련된 비즈니스 로직을 담당합니다.\n+ */\n @Service\n public class AuthenticationService {\n     private final UserRepository userRepository;\n@@ -29,6 +32,14 @@ public AuthenticationService(UserRepository userRepository,\n         this.passwordEncoder = passwordEncoder;\n     }\n \n+    /**\n+     * 올바른 회원 정보라면 인증 토큰을 반환하고, 그렇지 않으면 예외를 던집니다.\n+     *\n+     * @param email 이메일\n+     * @param password 비밀번호\n+     * @return Access token\n+     * @throws LoginFailException 로그인에 실패했을 경우\n+     */\n     public String login(String email, String password) {\n         User user = userRepository.findByEmail(email)\n                 .orElseThrow(() -> new LoginFailException(email));\n@@ -40,11 +51,23 @@ public String login(String email, String password) {\n         return jwtUtil.encode(user.getId());\n     }\n \n+    /**\n+     * 인증 토큰 으로 회원 id를 찾아 반환합니다.\n+     *\n+     * @param accessToken 인증 토큰\n+     * @return 회원 id\n+     */\n     public Long parseToken(String accessToken) {\n         Claims claims = jwtUtil.decode(accessToken);\n         return claims.get(\"userId\", Long.class);\n     }\n \n+    /**\n+     * 회원이 가진 권한을 반환합니다.\n+     *\n+     * @param userId 회원 id\n+     * @return 권한\n+     */\n     public List<Role> roles(Long userId) {\n         return roleRepository.findAllByUserId(userId);\n     }"
  },
  {
    "sha": "cf8ab744352eec0c6c4f6c8a917f30142025f7bc",
    "filename": "app/src/main/java/com/codesoom/assignment/application/ProductService.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/application/ProductService.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/application/ProductService.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/application/ProductService.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -10,6 +10,9 @@\n import javax.transaction.Transactional;\n import java.util.List;\n \n+/**\n+ * 상품과 관련된 비즈니스 로직을 담당합니다.\n+ */\n @Service\n @Transactional\n public class ProductService {\n@@ -24,19 +27,42 @@ public ProductService(\n         this.productRepository = productRepository;\n     }\n \n+    /**\n+     * 모든 상품 목록 반환합니다.\n+     */\n     public List<Product> getProducts() {\n         return productRepository.findAll();\n     }\n \n+    /**\n+     * 올바른 상품 정보라면 상품을 반환하고, 그렇지 않으면 예외를 던집니다.\n+     *\n+     * @param id 검색 상품 id\n+     * @return 상품\n+     * @throws ProductNotFoundException 상품이 존재하지 않는 경우\n+     */\n     public Product getProduct(Long id) {\n         return findProduct(id);\n     }\n \n+    /**\n+     * 상품을 생성하고 반환합니다.\n+     *\n+     * @param productData 저장될 상품\n+     * @return 생성된 상품\n+     */\n     public Product createProduct(ProductData productData) {\n         Product product = mapper.map(productData, Product.class);\n         return productRepository.save(product);\n     }\n \n+    /**\n+     * 상품을 수정하고 반환합니다.\n+     *\n+     * @param id 수정 상품 id\n+     * @param productData 수정될 상품\n+     * @return 수정된 상품\n+     */\n     public Product updateProduct(Long id, ProductData productData) {\n         Product product = findProduct(id);\n \n@@ -45,6 +71,12 @@ public Product updateProduct(Long id, ProductData productData) {\n         return product;\n     }\n \n+    /**\n+     * 상품을 삭제하고 반환합니다.\n+     *\n+     * @param id 삭제 상품 id\n+     * @return 삭제된 상품\n+     */\n     public Product deleteProduct(Long id) {\n         Product product = findProduct(id);\n "
  },
  {
    "sha": "2490f25fb4b8517d9f26813b3ad70ec433f81340",
    "filename": "app/src/main/java/com/codesoom/assignment/application/UserService.java",
    "status": "modified",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/application/UserService.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/application/UserService.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/application/UserService.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -15,6 +15,9 @@\n \n import javax.transaction.Transactional;\n \n+/**\n+ * 회원과 관련된 비즈니스 로직을 담당합니다.\n+ */\n @Service\n @Transactional\n public class UserService {\n@@ -33,6 +36,13 @@ public UserService(Mapper dozerMapper,\n         this.passwordEncoder = passwordEncoder;\n     }\n \n+    /**\n+     * 올바른 회원 정보라면 생성하여 반환하고, 잘못된 정보라면 예외를 던집니다.\n+     *\n+     * @param registrationData 회원 정보\n+     * @return 생성된 회원\n+     * @throws UserEmailDuplicationException 회원 이메일이 중복될 경우\n+     */\n     public User registerUser(UserRegistrationData registrationData) {\n         String email = registrationData.getEmail();\n         if (userRepository.existsByEmail(email)) {\n@@ -49,6 +59,15 @@ public User registerUser(UserRegistrationData registrationData) {\n         return user;\n     }\n \n+    /**\n+     * 올바른 회원 정보라면 수정하고 반환하지만, 잘못된 정보라면 예외를 던집니다.\n+     *\n+     * @param id 수정 회원 id\n+     * @param modificationData 회원 정보\n+     * @param userId 인증된 회원 id\n+     * @return 수정된 회원\n+     * @throws AccessDeniedException 수정 권한이 없을 경우\n+     */\n     public User updateUser(Long id, UserModificationData modificationData,\n                            Long userId) throws AccessDeniedException {\n         if (!id.equals(userId)) {\n@@ -63,6 +82,13 @@ public User updateUser(Long id, UserModificationData modificationData,\n         return user;\n     }\n \n+    /**\n+     * 회원을 삭제하고 반환합니다.\n+     *\n+     * @param id 삭제 회원 id\n+     * @return 삭제된 회원\n+     * @throws UserNotFoundException 회원을 찾을 수 없는 경우\n+     */\n     public User deleteUser(Long id) {\n         User user = findUser(id);\n         user.destroy();"
  },
  {
    "sha": "4fb7ffe5479d165e15f2b1d05b36131b95ec3dbc",
    "filename": "app/src/main/java/com/codesoom/assignment/controllers/ProductController.java",
    "status": "modified",
    "additions": 41,
    "deletions": 1,
    "changes": 42,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/controllers/ProductController.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/controllers/ProductController.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/controllers/ProductController.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -6,11 +6,22 @@\n import com.codesoom.assignment.dto.ProductData;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n \n import javax.validation.Valid;\n import java.util.List;\n \n+/**\n+ * 상품과 관련된 HTTP 요청 처리를 담당합니다.\n+ */\n @RestController\n @RequestMapping(\"/products\")\n public class ProductController {\n@@ -24,23 +35,47 @@ public ProductController(ProductService productService,\n         this.authenticationService = authenticationService;\n     }\n \n+    /**\n+     * 모든 상품 목록을 반환합니다.\n+     *\n+     * @return 상품 목록\n+     */\n     @GetMapping\n     public List<Product> list() {\n         return productService.getProducts();\n     }\n \n+    /**\n+     * 상품을 찾아 반환합니다.\n+     *\n+     * @param id 검색 상품 id\n+     * @return 검색된 상품\n+     */\n     @GetMapping(\"{id}\")\n     public Product detail(@PathVariable Long id) {\n         return productService.getProduct(id);\n     }\n \n+    /**\n+     * 상품을 생성하고 반환합니다.\n+     *\n+     * @param productData 생성될 상품\n+     * @return 생성된 상품\n+     */\n     @PostMapping\n     @ResponseStatus(HttpStatus.CREATED)\n     @PreAuthorize(\"isAuthenticated() and hasAuthority('USER')\")\n     public Product create(@RequestBody @Valid ProductData productData) {\n         return productService.createProduct(productData);\n     }\n \n+    /**\n+     * 상품을 수정하고 반환합니다.\n+     *\n+     * @param id 수정 상품 id\n+     * @param productData 수정될 상품\n+     * @return 수정된 상품\n+     */\n     @PatchMapping(\"{id}\")\n     @PreAuthorize(\"isAuthenticated()\")\n     public Product update(\n@@ -50,6 +85,11 @@ public Product update(\n         return productService.updateProduct(id, productData);\n     }\n \n+    /**\n+     * 상품을 삭제합니다.\n+     *\n+     * @param id 삭제 상품 id\n+     */\n     @DeleteMapping(\"{id}\")\n     @PreAuthorize(\"isAuthenticated()\")\n     public void destroy(@PathVariable Long id) {"
  },
  {
    "sha": "bbb005ebd6fe591c207291f84eaeaabc8a9c5c8a",
    "filename": "app/src/main/java/com/codesoom/assignment/controllers/SessionController.java",
    "status": "modified",
    "additions": 16,
    "deletions": 1,
    "changes": 17,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/controllers/SessionController.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/controllers/SessionController.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/controllers/SessionController.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -3,9 +3,17 @@\n import com.codesoom.assignment.application.AuthenticationService;\n import com.codesoom.assignment.dto.SessionRequestData;\n import com.codesoom.assignment.dto.SessionResponseData;\n+import com.codesoom.assignment.errors.LoginFailException;\n import org.springframework.http.HttpStatus;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n \n+/**\n+ * 회원 인증과 관련된 HTTP 요청을 처리 합니다.\n+ */\n @RestController\n @RequestMapping(\"/session\")\n public class SessionController {\n@@ -15,6 +23,13 @@ public SessionController(AuthenticationService authenticationService) {\n         this.authenticationService = authenticationService;\n     }\n \n+    /**\n+     * 로그인정보를 확인하고 Access token 을 반환합니다.\n+     *\n+     * @param sessionRequestData 로그인 정보\n+     * @return Access token\n+     * @throws LoginFailException 로그인 정보가 다를 경우\n+     */\n     @PostMapping\n     @ResponseStatus(HttpStatus.CREATED)\n     public SessionResponseData login("
  },
  {
    "sha": "3ac50d65002bfd30e523051a57169ccbef7ba398",
    "filename": "app/src/main/java/com/codesoom/assignment/controllers/UserController.java",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/controllers/UserController.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/controllers/UserController.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/controllers/UserController.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -9,10 +9,20 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n \n import javax.validation.Valid;\n \n+/**\n+ * 회원과 관련된 HTTP 요청 처리를 담당합니다.\n+ */\n @RestController\n @RequestMapping(\"/users\")\n public class UserController {\n@@ -22,13 +32,28 @@ public UserController(UserService userService) {\n         this.userService = userService;\n     }\n \n+    /**\n+     * 회원을 생성하고 반환합니다.\n+     *\n+     * @param registrationData 회원 정보\n+     * @return 생성된 회원\n+     */\n     @PostMapping\n     @ResponseStatus(HttpStatus.CREATED)\n     UserResultData create(@RequestBody @Valid UserRegistrationData registrationData) {\n         User user = userService.registerUser(registrationData);\n         return getUserResultData(user);\n     }\n \n+    /**\n+     * 올바른 회원 정보라면 수정하고 반환하고, 잘못된 정보라면 예외를 던집니다.\n+     *\n+     * @param id 수정 회원 id\n+     * @param modificationData 회원 정보\n+     * @param authentication 인증된 회원\n+     * @return 수정된 회원\n+     * @throws AccessDeniedException 수정 권한이 없을 경우\n+     */\n     @PatchMapping(\"{id}\")\n     @PreAuthorize(\"isAuthenticated() and hasAuthority('USER')\")\n     UserResultData update(\n@@ -41,6 +66,11 @@ UserResultData update(\n         return getUserResultData(user);\n     }\n \n+    /**\n+     * 회원을 삭제합니다.\n+     *\n+     * @param id 삭제 회원 id\n+     */\n     @DeleteMapping(\"{id}\")\n     @PreAuthorize(\"isAuthenticated() and hasAuthority('ADMIN')\")\n     void destroy(@PathVariable Long id) {"
  },
  {
    "sha": "dd8e45234ba7fc0553da8d1863b14e00c78547b4",
    "filename": "app/src/main/java/com/codesoom/assignment/domain/Product.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/domain/Product.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/domain/Product.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/domain/Product.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -1,6 +1,5 @@\n package com.codesoom.assignment.domain;\n \n-import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n@@ -9,11 +8,12 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n \n+/**\n+ * 상품 정보를 담당합니다.\n+ */\n @Entity\n @Getter\n-@Builder\n @NoArgsConstructor\n-@AllArgsConstructor\n public class Product {\n     @Id\n     @GeneratedValue\n@@ -27,6 +27,19 @@\n \n     private String imageUrl;\n \n+    @Builder\n+    public Product(Long id, String name, String maker, Integer price, String imageUrl) {\n+        this.id = id;\n+        this.name = name;\n+        this.maker = maker;\n+        this.price = price;\n+        this.imageUrl = imageUrl;\n+    }\n+\n+    /**\n+     * 상품을 수정합니다.\n+     * @param source 수정될 상품\n+     */\n     public void changeWith(Product source) {\n         this.name = source.name;\n         this.maker = source.maker;"
  },
  {
    "sha": "76ae464ecb1553d91bb36569101e8ed617b985ce",
    "filename": "app/src/main/java/com/codesoom/assignment/dto/ProductData.java",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/dto/ProductData.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/dto/ProductData.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/dto/ProductData.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -1,20 +1,15 @@\n package com.codesoom.assignment.dto;\n \n import com.github.dozermapper.core.Mapping;\n-import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n-import lombok.Setter;\n \n import javax.validation.constraints.NotBlank;\n import javax.validation.constraints.NotNull;\n \n-@Setter\n @Getter\n-@Builder\n @NoArgsConstructor\n-@AllArgsConstructor\n public class ProductData {\n     private Long id;\n \n@@ -32,4 +27,13 @@\n \n     @Mapping(\"imageUrl\")\n     private String imageUrl;\n+\n+    @Builder\n+    public ProductData(Long id, String name, String maker, Integer price, String imageUrl) {\n+        this.id = id;\n+        this.name = name;\n+        this.maker = maker;\n+        this.price = price;\n+        this.imageUrl = imageUrl;\n+    }\n }"
  },
  {
    "sha": "4c920f1d5588c52c7670fcbebe1293b0199cda6c",
    "filename": "app/src/main/java/com/codesoom/assignment/security/UserAuthentication.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/security/UserAuthentication.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/security/UserAuthentication.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/security/UserAuthentication.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -41,6 +41,7 @@ public String toString() {\n     }\n \n     private static List<GrantedAuthority> authorities(List<Role> roles) {\n+\n         return roles.stream()\n                 .map(role -> new SimpleGrantedAuthority(role.getName()))\n                 .collect(Collectors.toList());"
  },
  {
    "sha": "e451ac24fc782673765f17dbb19dec594fd962f7",
    "filename": "app/src/main/java/com/codesoom/assignment/utils/JwtUtil.java",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/utils/JwtUtil.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/java/com/codesoom/assignment/utils/JwtUtil.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/java/com/codesoom/assignment/utils/JwtUtil.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -5,11 +5,15 @@\n import io.jsonwebtoken.Jwts;\n import io.jsonwebtoken.security.Keys;\n import io.jsonwebtoken.security.SignatureException;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n import java.security.Key;\n \n+/**\n+ * JWT Token 을 관리합니다.\n+ */\n @Component\n public class JwtUtil {\n     private final Key key;\n@@ -18,15 +22,27 @@ public JwtUtil(@Value(\"${jwt.secret}\") String secret) {\n         key = Keys.hmacShaKeyFor(secret.getBytes());\n     }\n \n+    /**\n+     * 인증 토큰을 생성하여 반환합니다.\n+     * \n+     * @param userId 회원 id\n+     * @return 인증 토큰\n+     */\n     public String encode(Long userId) {\n         return Jwts.builder()\n                 .claim(\"userId\", userId)\n                 .signWith(key)\n                 .compact();\n     }\n \n+    /**\n+     * 올바른 토큰 이라면 복호화하고, 잘못된 토큰은 예외를 던집니다.\n+     *\n+     * @param token 인증 토큰\n+     * @return 회원 정보\n+     */\n     public Claims decode(String token) {\n-        if (token == null || token.isBlank()) {\n+        if (token == null || StringUtils.isBlank(token)) {\n             throw new InvalidTokenException(token);\n         }\n "
  },
  {
    "sha": "b392630e2bf6edff5f088b226ff5b1bcf5f95fbc",
    "filename": "app/src/main/resources/application.yml",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/resources/application.yml",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/main/resources/application.yml?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -1,9 +1,21 @@\n spring:\n   datasource:\n-    url: jdbc:h2:~/data/demo\n+    url: jdbc:h2:mem:demo\n+    username: root\n+    password: password\n   jpa:\n     hibernate:\n       ddl-auto: update\n \n jwt:\n   secret: \"12345678901234567890123456789010\"\n+\n+---\n+\n+#\"mariadb\" Profile을 쓸 때...\n+spring:\n+  profiles: mariadb\n+  datasource:\n+    url: jdbc:mariadb://mariadb:3306/test\n+    username: root\n+    password: password"
  },
  {
    "sha": "7d2b9962ffae23c0039718158da5109385211680",
    "filename": "app/src/test/java/com/codesoom/assignment/controllers/ProductControllerTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/CodeSoom/spring-week8-assignment-1/blob/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/test/java/com/codesoom/assignment/controllers/ProductControllerTest.java",
    "raw_url": "https://github.com/CodeSoom/spring-week8-assignment-1/raw/0dc3a95cb2e817956169f6da158bb78b13cedeab/app/src/test/java/com/codesoom/assignment/controllers/ProductControllerTest.java",
    "contents_url": "https://api.github.com/repos/CodeSoom/spring-week8-assignment-1/contents/app/src/test/java/com/codesoom/assignment/controllers/ProductControllerTest.java?ref=0dc3a95cb2e817956169f6da158bb78b13cedeab",
    "patch": "@@ -10,6 +10,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.http.MediaType;\n@@ -23,11 +24,13 @@\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.verify;\n+import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n @WebMvcTest(ProductController.class)\n+@AutoConfigureRestDocs\n class ProductControllerTest {\n     private static final String VALID_TOKEN = \"eyJhbGciOiJIUzI1NiJ9.\" +\n             \"eyJ1c2VySWQiOjF9.ZZ3CUl0jxeLGvQ1Js5nG2Ty5qGTlqai5ubDMXZOdaDk\";\n@@ -96,7 +99,8 @@ void list() throws Exception {\n                         .accept(MediaType.APPLICATION_JSON_UTF8)\n         )\n                 .andExpect(status().isOk())\n-                .andExpect(content().string(containsString(\"쥐돌이\")));\n+                .andExpect(content().string(containsString(\"쥐돌이\")))\n+                .andDo(document(\"get-products\"));\n     }\n \n     @Test\n@@ -106,7 +110,8 @@ void deatilWithExsitedProduct() throws Exception {\n                         .accept(MediaType.APPLICATION_JSON_UTF8)\n         )\n                 .andExpect(status().isOk())\n-                .andExpect(content().string(containsString(\"쥐돌이\")));\n+                .andExpect(content().string(containsString(\"쥐돌이\")))\n+                .andDo(document(\"get-product\"));\n     }\n \n     @Test"
  }
]
