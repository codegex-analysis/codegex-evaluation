[
  {
    "sha": "e16777af180fc5289ec6e115d2c2ec39f90c45a1",
    "filename": "cdi2/src/main/java/io/cucumber/cdi2/Cdi2Factory.java",
    "status": "modified",
    "additions": 58,
    "deletions": 22,
    "changes": 80,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/main/java/io/cucumber/cdi2/Cdi2Factory.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/main/java/io/cucumber/cdi2/Cdi2Factory.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/src/main/java/io/cucumber/cdi2/Cdi2Factory.java?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -1,6 +1,8 @@\n package io.cucumber.cdi2;\n \n import io.cucumber.core.backend.ObjectFactory;\n+import io.cucumber.core.logging.Logger;\n+import io.cucumber.core.logging.LoggerFactory;\n import org.apiguardian.api.API;\n \n import javax.enterprise.context.spi.CreationalContext;\n@@ -12,9 +14,13 @@\n import javax.enterprise.inject.spi.AnnotatedType;\n import javax.enterprise.inject.spi.BeanManager;\n import javax.enterprise.inject.spi.Extension;\n+import javax.enterprise.inject.spi.InjectionPoint;\n import javax.enterprise.inject.spi.InjectionTarget;\n import javax.enterprise.inject.spi.Unmanaged;\n+import javax.enterprise.inject.spi.configurator.BeanConfigurator;\n \n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -23,6 +29,7 @@\n @API(status = API.Status.STABLE)\n public final class Cdi2Factory implements ObjectFactory, Extension {\n \n+    private static final Logger log = LoggerFactory.getLogger(Cdi2Factory.class);\n     private final Set<Class<?>> stepClasses = new HashSet<>();\n \n     private final Map<Class<?>, Unmanaged.UnmanagedInstance<?>> standaloneInstances = new HashMap<>();\n@@ -77,42 +84,71 @@ public boolean addClass(Class<?> clazz) {\n     }\n \n     void afterBeanDiscovery(@Observes AfterBeanDiscovery afterBeanDiscovery, BeanManager bm) {\n-        Set<Class<?>> unmanaged = new HashSet<>();\n+        Set<Type> unmanaged = new HashSet<>();\n+        Map<Class<?>, BeanConfigurator<?>> beanConfigurators = new HashMap<>();\n         for (Class<?> stepClass : stepClasses) {\n-            discoverUnmanagedTypes(afterBeanDiscovery, bm, unmanaged, stepClass);\n+            discoverUnmanagedTypes(afterBeanDiscovery, bm, unmanaged, beanConfigurators, stepClass);\n         }\n     }\n \n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     private void discoverUnmanagedTypes(\n-            AfterBeanDiscovery afterBeanDiscovery, BeanManager bm, Set<Class<?>> unmanaged, Class<?> candidate\n+            AfterBeanDiscovery afterBeanDiscovery, BeanManager bm, Set<Type> unmanaged,\n+            Map<Class<?>, BeanConfigurator<?>> beanConfigurators,\n+            Type candidate\n     ) {\n         if (unmanaged.contains(candidate) || !bm.getBeans(candidate).isEmpty()) {\n             return;\n         }\n         unmanaged.add(candidate);\n \n-        addBean(afterBeanDiscovery, bm, candidate);\n+        Type rawCandidate = candidate instanceof ParameterizedType ? ((ParameterizedType) candidate).getRawType()\n+                : candidate;\n+        if (!(rawCandidate instanceof Class<?>)) {\n+            log.warn(() -> \"Could not add '\" + candidate\n+                    + \"' as an unmanaged bean. Consider adding a beans.xml file.\");\n+            return;\n+        }\n+        InjectionTarget injectionTarget = addBean(afterBeanDiscovery, bm, beanConfigurators, (Class<?>) rawCandidate,\n+            candidate);\n+        if (injectionTarget != null) {\n+            Set<InjectionPoint> ips = injectionTarget.getInjectionPoints();\n+            for (InjectionPoint ip : ips) {\n+                discoverUnmanagedTypes(afterBeanDiscovery, bm, unmanaged, beanConfigurators, ip.getType());\n+            }\n+        }\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private void addBean(AfterBeanDiscovery afterBeanDiscovery, BeanManager beanManager, Class<?> clazz) {\n-        AnnotatedType clazzAnnotatedType = beanManager.createAnnotatedType(clazz);\n-        // @formatter:off\n-        InjectionTarget injectionTarget = beanManager\n-                .getInjectionTargetFactory(clazzAnnotatedType)\n-                .createInjectionTarget(null);\n-        // @formatter:on\n-        // @formatter:off\n-        afterBeanDiscovery.addBean()\n-            .read(clazzAnnotatedType)\n-            .createWith(callback -> {\n-                CreationalContext c = (CreationalContext) callback;\n-                Object instance = injectionTarget.produce(c);\n-                injectionTarget.inject(instance, c);\n-                injectionTarget.postConstruct(instance);\n-                return instance;\n-            });\n-        // @formatter:on\n+    private InjectionTarget addBean(\n+            AfterBeanDiscovery afterBeanDiscovery, BeanManager beanManager,\n+            Map<Class<?>, BeanConfigurator<?>> beanConfigurators, Class<?> clazz, Type type\n+    ) {\n+        if (!beanConfigurators.containsKey(clazz)) {\n+            AnnotatedType clazzAnnotatedType = beanManager.createAnnotatedType(clazz);\n+            // @formatter:off\n+            InjectionTarget injectionTarget = beanManager\n+                    .getInjectionTargetFactory(clazzAnnotatedType)\n+                    .createInjectionTarget(null);\n+            // @formatter:on\n+            // @formatter:off\n+            beanConfigurators.put(clazz, \n+                    afterBeanDiscovery.addBean()\n+                        .read(clazzAnnotatedType)\n+                        .addType(type)\n+                        .createWith(callback -> {\n+                            CreationalContext c = (CreationalContext) callback;\n+                            Object instance = injectionTarget.produce(c);\n+                            injectionTarget.inject(instance, c);\n+                            injectionTarget.postConstruct(instance);\n+                            return instance;\n+                        }));\n+            // @formatter:on\n+            return injectionTarget;\n+        } else {\n+            beanConfigurators.get(clazz).addType(type);\n+            return null;\n+        }\n     }\n \n }"
  },
  {
    "sha": "374d9e0bfc5d86ec87e2b4e2dc5c632e9f28a6e5",
    "filename": "cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java",
    "status": "modified",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/src/test/java/io/cucumber/cdi2/Cdi2FactoryTest.java?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -10,6 +10,10 @@\n import javax.enterprise.inject.Vetoed;\n import javax.inject.Inject;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n import static org.hamcrest.core.IsEqual.equalTo;\n@@ -123,4 +127,44 @@ void shouldInjectStepDefinitions(boolean ignoreLocalBeansXml) {\n         factory.stop();\n     }\n \n+    static class SubParameterizedBean<K, V> {\n+\n+    }\n+\n+    static class ParameterizedBean<K, V> {\n+\n+        @Inject\n+        SubParameterizedBean<K, V> injected;\n+\n+    }\n+\n+    static class ParameterizedStepDefinitions {\n+\n+        @Inject\n+        ParameterizedBean<Map<String, List<String>>, String> injectedParams1;\n+\n+        @Inject\n+        ParameterizedBean<Set<Boolean>, String> injectedParams2;\n+\n+        @Inject\n+        @SuppressWarnings(\"rawtypes\")\n+        ParameterizedBean injectedRaw;\n+\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void canInjectParameterizedBeans(boolean ignoreLocalBeansXml) {\n+        IgnoreLocalBeansXmlClassLoader.setClassLoader(ignoreLocalBeansXml);\n+        factory.addClass(ParameterizedStepDefinitions.class);\n+        factory.start();\n+        ParameterizedStepDefinitions stepDefinitions = factory.getInstance(ParameterizedStepDefinitions.class);\n+        assertThat(stepDefinitions.injectedParams1, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedParams1.injected, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedParams2, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedParams2.injected, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedRaw, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedRaw.injected, is(notNullValue()));\n+        factory.stop();\n+    }\n }"
  },
  {
    "sha": "1688a50b5bf62dcc394fa874113f6623693d6afd",
    "filename": "cdi2/src/test/java/io/cucumber/cdi2/example/RunCucumberTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 1,
    "changes": 26,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/test/java/io/cucumber/cdi2/example/RunCucumberTest.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/test/java/io/cucumber/cdi2/example/RunCucumberTest.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/src/test/java/io/cucumber/cdi2/example/RunCucumberTest.java?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -1,8 +1,32 @@\n package io.cucumber.cdi2.example;\n \n+import io.cucumber.cdi2.IgnoreLocalBeansXmlClassLoader;\n import io.cucumber.junit.platform.engine.Cucumber;\n+import io.cucumber.plugin.ConcurrentEventListener;\n+import io.cucumber.plugin.event.EventPublisher;\n+import io.cucumber.plugin.event.TestRunFinished;\n+import io.cucumber.plugin.event.TestSourceRead;\n \n @Cucumber\n-public class RunCucumberTest {\n+public class RunCucumberTest implements ConcurrentEventListener {\n+\n+    private static final String WITHOUT_LOCAL_BEANS_XML = \"withoutLocalBeansXml\";\n+\n+    @Override\n+    public void setEventPublisher(EventPublisher eventPublisher) {\n+\n+        eventPublisher.registerHandlerFor(TestSourceRead.class, event -> {\n+            if (event.getUri().toString().contains(WITHOUT_LOCAL_BEANS_XML)) {\n+                IgnoreLocalBeansXmlClassLoader.setClassLoader(true);\n+            } else {\n+                IgnoreLocalBeansXmlClassLoader.restoreClassLoader();\n+            }\n+        });\n+\n+        eventPublisher.registerHandlerFor(TestRunFinished.class, event -> {\n+            IgnoreLocalBeansXmlClassLoader.restoreClassLoader();\n+        });\n+\n+    }\n \n }"
  },
  {
    "sha": "286525e4a47fb2eb423bd7ebc5112c4e5617b485",
    "filename": "cdi2/src/test/resources/io/cucumber/cdi2/example/cukes.withoutLocalBeansXml.feature",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/test/resources/io/cucumber/cdi2/example/cukes.withoutLocalBeansXml.feature",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/test/resources/io/cucumber/cdi2/example/cukes.withoutLocalBeansXml.feature",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/src/test/resources/io/cucumber/cdi2/example/cukes.withoutLocalBeansXml.feature?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -0,0 +1,10 @@\n+Feature: Cukes without beans.xml\n+\n+  Scenario: Eat some cukes\n+    Given I have 4 cukes in my belly\n+    Then there are 4 cukes in my belly\n+\n+  Scenario: Eat some more cukes\n+    Given I have 6 cukes in my belly\n+    And I eat 2 more cukes\n+    Then there are 8 cukes in my belly"
  },
  {
    "sha": "d6dcb9bda6d87b31ff47e18590fd9eecfa90662b",
    "filename": "cdi2/src/test/resources/junit-platform.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/test/resources/junit-platform.properties",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/cdi2/src/test/resources/junit-platform.properties",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/src/test/resources/junit-platform.properties?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -1 +1,2 @@\n cucumber.publish.quiet=true\n+cucumber.plugin=io.cucumber.cdi2.example.RunCucumberTest"
  },
  {
    "sha": "f908e35e09023e8937d316d3de6553feb4150784",
    "filename": "jakarta-cdi/src/main/java/io/cucumber/jakarta/cdi/CdiJakartaFactory.java",
    "status": "modified",
    "additions": 58,
    "deletions": 22,
    "changes": 80,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/main/java/io/cucumber/jakarta/cdi/CdiJakartaFactory.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/main/java/io/cucumber/jakarta/cdi/CdiJakartaFactory.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/jakarta-cdi/src/main/java/io/cucumber/jakarta/cdi/CdiJakartaFactory.java?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -1,6 +1,8 @@\n package io.cucumber.jakarta.cdi;\n \n import io.cucumber.core.backend.ObjectFactory;\n+import io.cucumber.core.logging.Logger;\n+import io.cucumber.core.logging.LoggerFactory;\n import jakarta.enterprise.context.spi.CreationalContext;\n import jakarta.enterprise.event.Observes;\n import jakarta.enterprise.inject.Instance;\n@@ -10,10 +12,14 @@\n import jakarta.enterprise.inject.spi.AnnotatedType;\n import jakarta.enterprise.inject.spi.BeanManager;\n import jakarta.enterprise.inject.spi.Extension;\n+import jakarta.enterprise.inject.spi.InjectionPoint;\n import jakarta.enterprise.inject.spi.InjectionTarget;\n import jakarta.enterprise.inject.spi.Unmanaged;\n+import jakarta.enterprise.inject.spi.configurator.BeanConfigurator;\n import org.apiguardian.api.API;\n \n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -22,6 +28,7 @@\n @API(status = API.Status.STABLE)\n public final class CdiJakartaFactory implements ObjectFactory, Extension {\n \n+    private static final Logger log = LoggerFactory.getLogger(CdiJakartaFactory.class);\n     private final Set<Class<?>> stepClasses = new HashSet<>();\n \n     private final Map<Class<?>, Unmanaged.UnmanagedInstance<?>> standaloneInstances = new HashMap<>();\n@@ -76,42 +83,71 @@ public boolean addClass(Class<?> clazz) {\n     }\n \n     void afterBeanDiscovery(@Observes AfterBeanDiscovery afterBeanDiscovery, BeanManager bm) {\n-        Set<Class<?>> unmanaged = new HashSet<>();\n+        Set<Type> unmanaged = new HashSet<>();\n+        Map<Class<?>, BeanConfigurator<?>> beanConfigurators = new HashMap<>();\n         for (Class<?> stepClass : stepClasses) {\n-            discoverUnmanagedTypes(afterBeanDiscovery, bm, unmanaged, stepClass);\n+            discoverUnmanagedTypes(afterBeanDiscovery, bm, unmanaged, beanConfigurators, stepClass);\n         }\n     }\n \n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     private void discoverUnmanagedTypes(\n-            AfterBeanDiscovery afterBeanDiscovery, BeanManager bm, Set<Class<?>> unmanaged, Class<?> candidate\n+            AfterBeanDiscovery afterBeanDiscovery, BeanManager bm, Set<Type> unmanaged,\n+            Map<Class<?>, BeanConfigurator<?>> beanConfigurators,\n+            Type candidate\n     ) {\n         if (unmanaged.contains(candidate) || !bm.getBeans(candidate).isEmpty()) {\n             return;\n         }\n         unmanaged.add(candidate);\n \n-        addBean(afterBeanDiscovery, bm, candidate);\n+        Type rawCandidate = candidate instanceof ParameterizedType ? ((ParameterizedType) candidate).getRawType()\n+                : candidate;\n+        if (!(rawCandidate instanceof Class<?>)) {\n+            log.warn(() -> \"Could not add '\" + candidate\n+                    + \"' as an unmanaged bean. Consider adding a beans.xml file.\");\n+            return;\n+        }\n+        InjectionTarget injectionTarget = addBean(afterBeanDiscovery, bm, beanConfigurators, (Class<?>) rawCandidate,\n+            candidate);\n+        if (injectionTarget != null) {\n+            Set<InjectionPoint> ips = injectionTarget.getInjectionPoints();\n+            for (InjectionPoint ip : ips) {\n+                discoverUnmanagedTypes(afterBeanDiscovery, bm, unmanaged, beanConfigurators, ip.getType());\n+            }\n+        }\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private void addBean(AfterBeanDiscovery afterBeanDiscovery, BeanManager beanManager, Class<?> clazz) {\n-        AnnotatedType clazzAnnotatedType = beanManager.createAnnotatedType(clazz);\n-        // @formatter:off\n-        InjectionTarget injectionTarget = beanManager\n-                .getInjectionTargetFactory(clazzAnnotatedType)\n-                .createInjectionTarget(null);\n-        // @formatter:on\n-        // @formatter:off\n-        afterBeanDiscovery.addBean()\n-            .read(clazzAnnotatedType)\n-            .createWith(callback -> {\n-                CreationalContext c = (CreationalContext) callback;\n-                Object instance = injectionTarget.produce(c);\n-                injectionTarget.inject(instance, c);\n-                injectionTarget.postConstruct(instance);\n-                return instance;\n-            });\n-        // @formatter:on\n+    private InjectionTarget addBean(\n+            AfterBeanDiscovery afterBeanDiscovery, BeanManager beanManager,\n+            Map<Class<?>, BeanConfigurator<?>> beanConfigurators, Class<?> clazz, Type type\n+    ) {\n+        if (!beanConfigurators.containsKey(clazz)) {\n+            AnnotatedType clazzAnnotatedType = beanManager.createAnnotatedType(clazz);\n+            // @formatter:off\n+            InjectionTarget injectionTarget = beanManager\n+                    .getInjectionTargetFactory(clazzAnnotatedType)\n+                    .createInjectionTarget(null);\n+            // @formatter:on\n+            // @formatter:off\n+            beanConfigurators.put(clazz, \n+                    afterBeanDiscovery.addBean()\n+                        .read(clazzAnnotatedType)\n+                        .addType(type)\n+                        .createWith(callback -> {\n+                            CreationalContext c = (CreationalContext) callback;\n+                            Object instance = injectionTarget.produce(c);\n+                            injectionTarget.inject(instance, c);\n+                            injectionTarget.postConstruct(instance);\n+                            return instance;\n+                        }));\n+            // @formatter:on\n+            return injectionTarget;\n+        } else {\n+            beanConfigurators.get(clazz).addType(type);\n+            return null;\n+        }\n     }\n \n }"
  },
  {
    "sha": "115dbb957e687715b6654e63dfc5c836c229c5db",
    "filename": "jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java",
    "status": "modified",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -9,6 +9,10 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.ValueSource;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n import static org.hamcrest.core.IsEqual.equalTo;\n@@ -122,4 +126,44 @@ void shouldInjectStepDefinitions(boolean ignoreLocalBeansXml) {\n         factory.stop();\n     }\n \n+    static class SubParameterizedBean<K, V> {\n+\n+    }\n+\n+    static class ParameterizedBean<K, V> {\n+\n+        @Inject\n+        SubParameterizedBean<K, V> injected;\n+\n+    }\n+\n+    static class ParameterizedStepDefinitions {\n+\n+        @Inject\n+        ParameterizedBean<Map<String, List<String>>, String> injectedParams1;\n+\n+        @Inject\n+        ParameterizedBean<Set<Boolean>, String> injectedParams2;\n+\n+        @Inject\n+        @SuppressWarnings(\"rawtypes\")\n+        ParameterizedBean injectedRaw;\n+\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void canInjectParameterizedBeans(boolean ignoreLocalBeansXml) {\n+        IgnoreLocalBeansXmlClassLoader.setClassLoader(ignoreLocalBeansXml);\n+        factory.addClass(ParameterizedStepDefinitions.class);\n+        factory.start();\n+        ParameterizedStepDefinitions stepDefinitions = factory.getInstance(ParameterizedStepDefinitions.class);\n+        assertThat(stepDefinitions.injectedParams1, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedParams1.injected, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedParams2, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedParams2.injected, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedRaw, is(notNullValue()));\n+        assertThat(stepDefinitions.injectedRaw.injected, is(notNullValue()));\n+        factory.stop();\n+    }\n }"
  },
  {
    "sha": "e5088e5ae0b439236f374867d24bb159b2c2dc8c",
    "filename": "jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/example/RunCucumberTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 1,
    "changes": 26,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/example/RunCucumberTest.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/example/RunCucumberTest.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/example/RunCucumberTest.java?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -1,8 +1,32 @@\n package io.cucumber.jakarta.cdi.example;\n \n+import io.cucumber.jakarta.cdi.IgnoreLocalBeansXmlClassLoader;\n import io.cucumber.junit.platform.engine.Cucumber;\n+import io.cucumber.plugin.ConcurrentEventListener;\n+import io.cucumber.plugin.event.EventPublisher;\n+import io.cucumber.plugin.event.TestRunFinished;\n+import io.cucumber.plugin.event.TestSourceRead;\n \n @Cucumber\n-public class RunCucumberTest {\n+public class RunCucumberTest implements ConcurrentEventListener {\n+\n+    private static final String WITHOUT_LOCAL_BEANS_XML = \"withoutLocalBeansXml\";\n+\n+    @Override\n+    public void setEventPublisher(EventPublisher eventPublisher) {\n+\n+        eventPublisher.registerHandlerFor(TestSourceRead.class, event -> {\n+            if (event.getUri().toString().contains(WITHOUT_LOCAL_BEANS_XML)) {\n+                IgnoreLocalBeansXmlClassLoader.setClassLoader(true);\n+            } else {\n+                IgnoreLocalBeansXmlClassLoader.restoreClassLoader();\n+            }\n+        });\n+\n+        eventPublisher.registerHandlerFor(TestRunFinished.class, event -> {\n+            IgnoreLocalBeansXmlClassLoader.restoreClassLoader();\n+        });\n+\n+    }\n \n }"
  },
  {
    "sha": "286525e4a47fb2eb423bd7ebc5112c4e5617b485",
    "filename": "jakarta-cdi/src/test/resources/io/cucumber/jakarta/cdi/example/cukes.withoutLocalBeansXml.feature",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/test/resources/io/cucumber/jakarta/cdi/example/cukes.withoutLocalBeansXml.feature",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/test/resources/io/cucumber/jakarta/cdi/example/cukes.withoutLocalBeansXml.feature",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/jakarta-cdi/src/test/resources/io/cucumber/jakarta/cdi/example/cukes.withoutLocalBeansXml.feature?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -0,0 +1,10 @@\n+Feature: Cukes without beans.xml\n+\n+  Scenario: Eat some cukes\n+    Given I have 4 cukes in my belly\n+    Then there are 4 cukes in my belly\n+\n+  Scenario: Eat some more cukes\n+    Given I have 6 cukes in my belly\n+    And I eat 2 more cukes\n+    Then there are 8 cukes in my belly"
  },
  {
    "sha": "49f747bfb1e111def45088898c1ed778637609e9",
    "filename": "jakarta-cdi/src/test/resources/junit-platform.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/test/resources/junit-platform.properties",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/1ab23172e45fa257dc37c01f671b9665e46d3e8f/jakarta-cdi/src/test/resources/junit-platform.properties",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/jakarta-cdi/src/test/resources/junit-platform.properties?ref=1ab23172e45fa257dc37c01f671b9665e46d3e8f",
    "patch": "@@ -1 +1,2 @@\n cucumber.publish.quiet=true\n+cucumber.plugin=io.cucumber.jakarta.cdi.example.RunCucumberTest"
  }
]
