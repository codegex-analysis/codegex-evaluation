[
  {
    "sha": "e8cac9cf2dfa57ed0d9eab46e54e2cd3cfab8798",
    "filename": "cdi2/README.md",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/2d90865af95e93aab3925c105ab4ee3ddd208d1d/cdi2/README.md",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/2d90865af95e93aab3925c105ab4ee3ddd208d1d/cdi2/README.md",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/README.md?ref=2d90865af95e93aab3925c105ab4ee3ddd208d1d",
    "patch": "@@ -42,3 +42,15 @@ If you don't know which one to use, you can import the following one but if you\n   <version>2.0</version>\n </dependency>\n ```\n+\n+## Configuration\n+\n+System properties are used to customize the CDI `SeContainerInitializer`, here is the list:\n+\n+* `cucumber.cdi2.packages`: list of packages (comma separated) added in the container discovery, must contain a `package-info.class` file to be deterministic.\n+* `cucumber.cdi2.recursivePackages`: same as previous one but recursively.\n+* `cucumber.cdi2.classes`: list of classes added in the discovery.\n+* `cucumber.cdi2.extensions`: list of extension classes added to the container (if not automatically registered).\n+* `cucumber.cdi2.<key>`: will add the system property as a key/value property of the initializer (container specific).\n+\n+Note that you can also implement `io.cucumber.cdi2.spi.SeContainerInitializerCustomizer` and register your implementation by putting its fully qualified name in `META-INF/services/io.cucumber.cdi2.spi.SeContainerInitializerCustomizer` to customize the initializer."
  },
  {
    "sha": "8f9c14bb1d52d5279fce7329dd1fd6ad22586f35",
    "filename": "cdi2/src/main/java/io/cucumber/cdi2/Cdi2Factory.java",
    "status": "modified",
    "additions": 102,
    "deletions": 2,
    "changes": 104,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/2d90865af95e93aab3925c105ab4ee3ddd208d1d/cdi2/src/main/java/io/cucumber/cdi2/Cdi2Factory.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/2d90865af95e93aab3925c105ab4ee3ddd208d1d/cdi2/src/main/java/io/cucumber/cdi2/Cdi2Factory.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/src/main/java/io/cucumber/cdi2/Cdi2Factory.java?ref=2d90865af95e93aab3925c105ab4ee3ddd208d1d",
    "patch": "@@ -1,16 +1,25 @@\n package io.cucumber.cdi2;\n \n+import io.cucumber.cdi2.internal.CustomizableInitializer;\n+import io.cucumber.cdi2.spi.SeContainerInitializerCustomizer;\n import io.cucumber.core.backend.ObjectFactory;\n import org.apiguardian.api.API;\n \n import javax.enterprise.inject.Instance;\n import javax.enterprise.inject.se.SeContainer;\n import javax.enterprise.inject.se.SeContainerInitializer;\n import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.Extension;\n import javax.enterprise.inject.spi.Unmanaged;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.stream.Stream;\n+\n+import static java.util.Optional.ofNullable;\n \n @API(status = API.Status.STABLE)\n public final class Cdi2Factory implements ObjectFactory {\n@@ -21,7 +30,12 @@\n \n     @Override\n     public void start() {\n-        container = getInitializer().initialize();\n+        final SeContainerInitializer initializer = getInitializer();\n+        final SeContainerInitializer limitedInitializer = new CustomizableInitializer(initializer);\n+        ServiceLoader.load(SeContainerInitializerCustomizer.class)\n+                .forEach(customizer -> customizer.customize(limitedInitializer));\n+        systemPropertiesConfiguration(limitedInitializer);\n+        container = initializer.initialize();\n     }\n \n     @Override\n@@ -38,6 +52,93 @@ public void stop() {\n         standaloneInstances.clear();\n     }\n \n+    private void systemPropertiesConfiguration(final SeContainerInitializer initializer) {\n+        System.getProperties()\n+                .stringPropertyNames().stream()\n+                .filter(k -> k.startsWith(\"cucumber.cdi2.\"))\n+                .forEach(key -> {\n+                    switch (key) {\n+                        case \"cucumber.cdi2.packages\":\n+                            ofNullable(System.getProperty(key))\n+                                    .map(this::toPackages)\n+                                    .ifPresent(initializer::addPackages);\n+                            break;\n+                        case \"cucumber.cdi2.classes\":\n+                            ofNullable(System.getProperty(key))\n+                                    .map(this::toClasses)\n+                                    .ifPresent(initializer::addBeanClasses);\n+                            break;\n+                        case \"cucumber.cdi2.extensions\":\n+                            ofNullable(System.getProperty(key))\n+                                    .map(this::toClasses)\n+                                    .map(exts -> (Class<? extends Extension>[]) exts)\n+                                    .ifPresent(initializer::addExtensions);\n+                            break;\n+                        case \"cucumber.cdi2.recursivePackages\":\n+                            ofNullable(System.getProperty(key))\n+                                    .map(this::toPackages)\n+                                    .ifPresent(packages -> initializer.addPackages(true, packages));\n+                            break;\n+                        default:\n+                            initializer.addProperty(key.substring(\"cucumber.cdi2.\".length()), System.getProperty(key));\n+                    }\n+                });\n+    }\n+\n+    private Class<?>[] toClasses(final String csv) {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        return csv2Values(csv)\n+                .map(n -> {\n+                    try {\n+                        return loader.loadClass(n);\n+                    } catch (final ClassNotFoundException e) {\n+                        throw new IllegalArgumentException(e);\n+                    }\n+                })\n+                .toArray(Class<?>[]::new);\n+    }\n+\n+    private Package[] toPackages(final String csv) {\n+        return csv2Values(csv)\n+                .map(this::findPackage)\n+                .toArray(Package[]::new);\n+    }\n+\n+    private Stream<String> csv2Values(final String csv) {\n+        return Stream.of(csv.split(\",\"))\n+                .map(String::trim)\n+                .filter(it -> !it.isEmpty())\n+                .distinct();\n+    }\n+\n+    // trivial heuristic for now\n+    private Package findPackage(final String name) {\n+        try {\n+            return Thread.currentThread().getContextClassLoader().loadClass(name + \".package-info\").getPackage();\n+        } catch (final ClassNotFoundException e) {\n+            // here we can miss it if no class was loaded, this is why we prefer\n+            // package-info\n+            try {\n+                final Method getDefinedPackage = ClassLoader.class.getMethod(\"getDefinedPackage\", String.class);\n+                if (!getDefinedPackage.isAccessible()) {\n+                    getDefinedPackage.setAccessible(true);\n+                }\n+                final Object pck = getDefinedPackage.invoke(Thread.currentThread().getContextClassLoader(), name);\n+                if (Package.class.isInstance(pck)) {\n+                    return Package.class.cast(pck);\n+                }\n+            } catch (final NoSuchMethodException noSuchMethodException) {\n+                final Package pck = Package.getPackage(name);\n+                if (pck != null) {\n+                    return pck;\n+                }\n+            } catch (final InvocationTargetException | IllegalAccessException illegalAccessException) {\n+                // no-op, let's fail\n+            }\n+            throw new IllegalArgumentException(\"Invalid package '\" + name + \"', missing package-info.class\");\n+        }\n+    }\n+\n     private SeContainerInitializer getInitializer() {\n         if (initializer == null) {\n             initializer = SeContainerInitializer.newInstance();\n@@ -47,7 +148,6 @@ private SeContainerInitializer getInitializer() {\n \n     @Override\n     public boolean addClass(final Class<?> clazz) {\n-        getInitializer().addBeanClasses(clazz);\n         return true;\n     }\n "
  },
  {
    "sha": "c9ff5b0427493d6fc9001aff7f5352f459a4c50c",
    "filename": "cdi2/src/main/java/io/cucumber/cdi2/internal/CustomizableInitializer.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/2d90865af95e93aab3925c105ab4ee3ddd208d1d/cdi2/src/main/java/io/cucumber/cdi2/internal/CustomizableInitializer.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/2d90865af95e93aab3925c105ab4ee3ddd208d1d/cdi2/src/main/java/io/cucumber/cdi2/internal/CustomizableInitializer.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/src/main/java/io/cucumber/cdi2/internal/CustomizableInitializer.java?ref=2d90865af95e93aab3925c105ab4ee3ddd208d1d",
    "patch": "@@ -0,0 +1,96 @@\n+package io.cucumber.cdi2.internal;\n+\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.Extension;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Map;\n+\n+public class CustomizableInitializer extends SeContainerInitializer {\n+    private final SeContainerInitializer delegate;\n+\n+    public CustomizableInitializer(final SeContainerInitializer initializer) {\n+        this.delegate = initializer;\n+    }\n+\n+    @Override\n+    public SeContainerInitializer addBeanClasses(final Class<?>... classes) {\n+        return delegate.addBeanClasses(classes);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer addPackages(final Class<?>... classes) {\n+        return delegate.addPackages(classes);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer addPackages(final boolean recursive, final Class<?>... classes) {\n+        return delegate.addPackages(recursive, classes);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer addPackages(final Package... packages) {\n+        return delegate.addPackages(packages);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer addPackages(final boolean recursive, final Package... packages) {\n+        return delegate.addPackages(recursive, packages);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer addExtensions(final Extension... extensions) {\n+        return delegate.addExtensions(extensions);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer addExtensions(final Class<? extends Extension>... classes) {\n+        return delegate.addExtensions(classes);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer enableInterceptors(final Class<?>... classes) {\n+        return delegate.enableInterceptors(classes);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer enableDecorators(final Class<?>... classes) {\n+        return delegate.enableDecorators(classes);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer selectAlternatives(final Class<?>... classes) {\n+        return delegate.selectAlternatives(classes);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer selectAlternativeStereotypes(final Class<? extends Annotation>... classes) {\n+        return delegate.selectAlternativeStereotypes(classes);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer addProperty(final String key, final Object value) {\n+        return delegate.addProperty(key, value);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer setProperties(final Map<String, Object> map) {\n+        return delegate.setProperties(map);\n+    }\n+\n+    @Override\n+    public SeContainerInitializer disableDiscovery() {\n+        return delegate.disableDiscovery();\n+    }\n+\n+    @Override\n+    public SeContainerInitializer setClassLoader(final ClassLoader classLoader) {\n+        return delegate.setClassLoader(classLoader);\n+    }\n+\n+    @Override\n+    public SeContainer initialize() {\n+        throw new UnsupportedOperationException(\"Can't call initialize from a customizer\");\n+    }\n+}"
  },
  {
    "sha": "f6867f2cea4e7815f98fdb01fa087f77ab212071",
    "filename": "cdi2/src/main/java/io/cucumber/cdi2/spi/SeContainerInitializerCustomizer.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/2d90865af95e93aab3925c105ab4ee3ddd208d1d/cdi2/src/main/java/io/cucumber/cdi2/spi/SeContainerInitializerCustomizer.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/2d90865af95e93aab3925c105ab4ee3ddd208d1d/cdi2/src/main/java/io/cucumber/cdi2/spi/SeContainerInitializerCustomizer.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/cdi2/src/main/java/io/cucumber/cdi2/spi/SeContainerInitializerCustomizer.java?ref=2d90865af95e93aab3925c105ab4ee3ddd208d1d",
    "patch": "@@ -0,0 +1,7 @@\n+package io.cucumber.cdi2.spi;\n+\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+\n+public interface SeContainerInitializerCustomizer {\n+    void customize(SeContainerInitializer initializer);\n+}"
  },
  {
    "sha": "41f336bbdf44f23faf48674f9463e2ecd6e884fc",
    "filename": "core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/2d90865af95e93aab3925c105ab4ee3ddd208d1d/core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/2d90865af95e93aab3925c105ab4ee3ddd208d1d/core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/core/src/test/java/io/cucumber/core/plugin/PluginFactoryTest.java?ref=2d90865af95e93aab3925c105ab4ee3ddd208d1d",
    "patch": "@@ -102,7 +102,8 @@ void cant_create_plugin_when_parent_directory_is_a_file() throws IOException {\n         IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fc.create(jsonOption));\n         assertThat(exception.getMessage(), is(equalTo(\n             \"Couldn't create parent directories of '\" + jsonReport.toFile().getCanonicalPath() + \"'.\\n\" +\n-                    \"Make sure the the parent directory '\" + jsonReport.getParent().toFile().getCanonicalPath() + \"' isn't a file.\\n\" +\n+                    \"Make sure the the parent directory '\" + jsonReport.getParent().toFile().getCanonicalPath()\n+                    + \"' isn't a file.\\n\" +\n                     \"\\n\" +\n                     \"Note: This usually happens when plugins write to colliding paths.\\n\" +\n                     \"For example: 'html:target/cucumber, json:target/cucumber/report.json'\\n\" +"
  },
  {
    "sha": "e8b98baed366603adaebfd6c4c6153065730b9c6",
    "filename": "jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/cucumber/cucumber-jvm/blob/2d90865af95e93aab3925c105ab4ee3ddd208d1d/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java",
    "raw_url": "https://github.com/cucumber/cucumber-jvm/raw/2d90865af95e93aab3925c105ab4ee3ddd208d1d/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java",
    "contents_url": "https://api.github.com/repos/cucumber/cucumber-jvm/contents/jakarta-cdi/src/test/java/io/cucumber/jakarta/cdi/CdiJakartaFactoryTest.java?ref=2d90865af95e93aab3925c105ab4ee3ddd208d1d",
    "patch": "@@ -41,9 +41,9 @@ void shouldCreateNewInstancesForEachScenario() {\n         // VetoedBean makes it possible to compare the object outside the\n         // scenario/application scope\n         assertAll(\n-                () -> assertThat(a1, is(notNullValue())),\n-                () -> assertThat(a1, is(not(equalTo(b1)))),\n-                () -> assertThat(b1, is(not(equalTo(a1)))));\n+            () -> assertThat(a1, is(notNullValue())),\n+            () -> assertThat(a1, is(not(equalTo(b1)))),\n+            () -> assertThat(b1, is(not(equalTo(a1)))));\n     }\n \n     @ApplicationScoped\n@@ -57,9 +57,9 @@ void shouldCreateApplicationScopedInstance() {\n         factory.start();\n         ApplicationScopedBean cdiStep = factory.getInstance(ApplicationScopedBean.class);\n         assertAll(\n-                // assert that it is is a CDI proxy\n-                () -> assertThat(cdiStep.getClass(), not(is(ApplicationScopedBean.class))),\n-                () -> assertThat(cdiStep.getClass().getSuperclass(), is(ApplicationScopedBean.class)));\n+            // assert that it is is a CDI proxy\n+            () -> assertThat(cdiStep.getClass(), not(is(ApplicationScopedBean.class))),\n+            () -> assertThat(cdiStep.getClass().getSuperclass(), is(ApplicationScopedBean.class)));\n         factory.stop();\n     }\n "
  }
]
