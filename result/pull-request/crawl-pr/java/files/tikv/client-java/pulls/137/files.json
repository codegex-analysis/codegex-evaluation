[
  {
    "sha": "db839d0ad537897842b9f6dbb1c0321e1d82a4d2",
    "filename": "src/main/java/org/tikv/common/KVClient.java",
    "status": "modified",
    "additions": 5,
    "deletions": 16,
    "changes": 21,
    "blob_url": "https://github.com/tikv/client-java/blob/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/common/KVClient.java",
    "raw_url": "https://github.com/tikv/client-java/raw/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/common/KVClient.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/KVClient.java?ref=6a3066237b9307bb08d2809aff6fd269d0e91f41",
    "patch": "@@ -17,8 +17,7 @@\n \n package org.tikv.common;\n \n-import static org.tikv.common.util.ClientUtils.appendBatches;\n-import static org.tikv.common.util.ClientUtils.getKvPairs;\n+import static org.tikv.common.util.ClientUtils.*;\n \n import com.google.protobuf.ByteString;\n import java.util.ArrayList;\n@@ -28,7 +27,6 @@\n import java.util.Objects;\n import java.util.concurrent.ExecutorCompletionService;\n import java.util.concurrent.ExecutorService;\n-import java.util.stream.Collectors;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.tikv.common.exception.GrpcException;\n@@ -129,7 +127,8 @@ public ByteString get(ByteString key, long version) throws GrpcException {\n     ExecutorCompletionService<List<KvPair>> completionService =\n         new ExecutorCompletionService<>(batchGetThreadPool);\n \n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(keys);\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(clientBuilder.getRegionManager(), keys, backOffer);\n     List<Batch> batches = new ArrayList<>();\n \n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n@@ -170,7 +169,8 @@ public ByteString get(ByteString key, long version) throws GrpcException {\n \n   private List<KvPair> doSendBatchGetWithRefetchRegion(\n       BackOffer backOffer, Batch batch, long version) {\n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(batch.keys);\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(clientBuilder.getRegionManager(), batch.keys, backOffer);\n     List<Batch> retryBatches = new ArrayList<>();\n \n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n@@ -186,17 +186,6 @@ public ByteString get(ByteString key, long version) throws GrpcException {\n     return results;\n   }\n \n-  /**\n-   * Group by list of keys according to its region\n-   *\n-   * @param keys keys\n-   * @return a mapping of keys and their region\n-   */\n-  private Map<TiRegion, List<ByteString>> groupKeysByRegion(List<ByteString> keys) {\n-    return keys.stream()\n-        .collect(Collectors.groupingBy(clientBuilder.getRegionManager()::getRegionByKey));\n-  }\n-\n   private Iterator<KvPair> scanIterator(\n       TiConfiguration conf,\n       RegionStoreClientBuilder builder,"
  },
  {
    "sha": "e504fa05e688a9779ed2b20d5f3ccb979a0e7a05",
    "filename": "src/main/java/org/tikv/common/TiSession.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/tikv/client-java/blob/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/common/TiSession.java",
    "raw_url": "https://github.com/tikv/client-java/raw/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/common/TiSession.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/TiSession.java?ref=6a3066237b9307bb08d2809aff6fd269d0e91f41",
    "patch": "@@ -15,6 +15,8 @@\n \n package org.tikv.common;\n \n+import static org.tikv.common.util.ClientUtils.groupKeysByRegion;\n+\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import com.google.protobuf.ByteString;\n@@ -347,7 +349,8 @@ public void splitRegionAndScatter(\n   private List<TiRegion> splitRegion(List<ByteString> splitKeys, BackOffer backOffer) {\n     List<TiRegion> regions = new ArrayList<>();\n \n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(splitKeys);\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(regionManager, splitKeys, backOffer);\n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n \n       Pair<TiRegion, Metapb.Store> pair =\n@@ -385,11 +388,6 @@ public void splitRegionAndScatter(\n     return regions;\n   }\n \n-  private Map<TiRegion, List<ByteString>> groupKeysByRegion(List<ByteString> keys) {\n-    return keys.stream()\n-        .collect(Collectors.groupingBy(clientBuilder.getRegionManager()::getRegionByKey));\n-  }\n-\n   @Override\n   public synchronized void close() throws Exception {\n     if (isClosed) {"
  },
  {
    "sha": "f118b5b18628e16569c805588e50468c45e10784",
    "filename": "src/main/java/org/tikv/common/util/ClientUtils.java",
    "status": "modified",
    "additions": 34,
    "deletions": 3,
    "changes": 37,
    "blob_url": "https://github.com/tikv/client-java/blob/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/common/util/ClientUtils.java",
    "raw_url": "https://github.com/tikv/client-java/raw/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/common/util/ClientUtils.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/util/ClientUtils.java?ref=6a3066237b9307bb08d2809aff6fd269d0e91f41",
    "patch": "@@ -16,14 +16,13 @@\n package org.tikv.common.util;\n \n import com.google.protobuf.ByteString;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Queue;\n+import java.util.*;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorCompletionService;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import org.tikv.common.exception.TiKVException;\n+import org.tikv.common.region.RegionManager;\n import org.tikv.common.region.TiRegion;\n import org.tikv.kvproto.Kvrpcpb;\n \n@@ -82,6 +81,38 @@ public static void appendBatches(\n     }\n   }\n \n+  public static Map<TiRegion, List<ByteString>> groupKeysByRegion(\n+      RegionManager regionManager, Set<ByteString> keys, BackOffer backoffer) {\n+    return groupKeysByRegion(regionManager, new ArrayList<>(keys), backoffer, true);\n+  }\n+\n+  public static Map<TiRegion, List<ByteString>> groupKeysByRegion(\n+      RegionManager regionManager, List<ByteString> keys, BackOffer backoffer) {\n+    return groupKeysByRegion(regionManager, new ArrayList<>(keys), backoffer, false);\n+  }\n+\n+  /**\n+   * Group by list of keys according to its region\n+   *\n+   * @param keys keys\n+   * @return a mapping of keys and their region\n+   */\n+  public static Map<TiRegion, List<ByteString>> groupKeysByRegion(\n+      RegionManager regionManager, List<ByteString> keys, BackOffer backoffer, boolean sorted) {\n+    Map<TiRegion, List<ByteString>> groups = new HashMap<>();\n+    if (!sorted) {\n+      keys.sort((k1, k2) -> FastByteComparisons.compareTo(k1.toByteArray(), k2.toByteArray()));\n+    }\n+    TiRegion lastRegion = null;\n+    for (ByteString key : keys) {\n+      if (lastRegion == null || !lastRegion.contains(key)) {\n+        lastRegion = regionManager.getRegionByKey(key, backoffer);\n+      }\n+      groups.computeIfAbsent(lastRegion, k -> new ArrayList<>()).add(key);\n+    }\n+    return groups;\n+  }\n+\n   public static List<Kvrpcpb.KvPair> getKvPairs(\n       ExecutorCompletionService<List<Kvrpcpb.KvPair>> completionService,\n       List<Batch> batches,"
  },
  {
    "sha": "43d381de782722264aa7be2f5d87f32037709123",
    "filename": "src/main/java/org/tikv/raw/RawKVClient.java",
    "status": "modified",
    "additions": 8,
    "deletions": 27,
    "changes": 35,
    "blob_url": "https://github.com/tikv/client-java/blob/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/raw/RawKVClient.java",
    "raw_url": "https://github.com/tikv/client-java/raw/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/raw/RawKVClient.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/raw/RawKVClient.java?ref=6a3066237b9307bb08d2809aff6fd269d0e91f41",
    "patch": "@@ -356,7 +356,8 @@ private void doSendBatchPut(BackOffer backOffer, Map<ByteString, ByteString> kvP\n     ExecutorCompletionService<List<Batch>> completionService =\n         new ExecutorCompletionService<>(batchPutThreadPool);\n \n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(kvPairs.keySet());\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(clientBuilder.getRegionManager(), kvPairs.keySet(), backOffer);\n     List<Batch> batches = new ArrayList<>();\n \n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n@@ -403,7 +404,8 @@ private void doSendBatchPut(BackOffer backOffer, Map<ByteString, ByteString> kvP\n   }\n \n   private List<Batch> doSendBatchPutWithRefetchRegion(BackOffer backOffer, Batch batch, long ttl) {\n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(batch.keys);\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(clientBuilder.getRegionManager(), batch.keys, backOffer);\n     List<Batch> retryBatches = new ArrayList<>();\n \n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n@@ -422,7 +424,8 @@ private void doSendBatchPut(BackOffer backOffer, Map<ByteString, ByteString> kvP\n     ExecutorCompletionService<List<KvPair>> completionService =\n         new ExecutorCompletionService<>(batchGetThreadPool);\n \n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(keys);\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(clientBuilder.getRegionManager(), keys, backOffer);\n     List<Batch> batches = new ArrayList<>();\n \n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n@@ -460,7 +463,8 @@ private void doSendBatchPut(BackOffer backOffer, Map<ByteString, ByteString> kvP\n   }\n \n   private List<KvPair> doSendBatchGetWithRefetchRegion(BackOffer backOffer, Batch batch) {\n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(batch.keys);\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(clientBuilder.getRegionManager(), batch.keys, backOffer);\n     List<Batch> retryBatches = new ArrayList<>();\n \n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n@@ -542,29 +546,6 @@ private Object doSendDeleteRangeWithRefetchRegion(\n     return null;\n   }\n \n-  /**\n-   * Group by list of keys according to its region\n-   *\n-   * @param keys keys\n-   * @return a mapping of keys and their region\n-   */\n-  private Map<TiRegion, List<ByteString>> groupKeysByRegion(Set<ByteString> keys) {\n-    Map<TiRegion, List<ByteString>> groups = new HashMap<>();\n-    TiRegion lastRegion = null;\n-    for (ByteString key : keys) {\n-      if (lastRegion == null || !lastRegion.contains(key)) {\n-        lastRegion = clientBuilder.getRegionManager().getRegionByKey(key);\n-      }\n-      groups.computeIfAbsent(lastRegion, k -> new ArrayList<>()).add(key);\n-    }\n-    return groups;\n-  }\n-\n-  private Map<TiRegion, List<ByteString>> groupKeysByRegion(List<ByteString> keys) {\n-    return keys.stream()\n-        .collect(Collectors.groupingBy(clientBuilder.getRegionManager()::getRegionByKey));\n-  }\n-\n   private static Map<ByteString, ByteString> mapKeysToValues(\n       List<ByteString> keys, List<ByteString> values) {\n     Map<ByteString, ByteString> map = new HashMap<>();"
  },
  {
    "sha": "f68293a96debf3140fe8245b2258b6205c0cf123",
    "filename": "src/main/java/org/tikv/txn/KVClient.java",
    "status": "modified",
    "additions": 5,
    "deletions": 16,
    "changes": 21,
    "blob_url": "https://github.com/tikv/client-java/blob/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/txn/KVClient.java",
    "raw_url": "https://github.com/tikv/client-java/raw/6a3066237b9307bb08d2809aff6fd269d0e91f41/src/main/java/org/tikv/txn/KVClient.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/txn/KVClient.java?ref=6a3066237b9307bb08d2809aff6fd269d0e91f41",
    "patch": "@@ -15,16 +15,14 @@\n \n package org.tikv.txn;\n \n-import static org.tikv.common.util.ClientUtils.appendBatches;\n-import static org.tikv.common.util.ClientUtils.getKvPairs;\n+import static org.tikv.common.util.ClientUtils.*;\n \n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import com.google.protobuf.ByteString;\n import java.util.*;\n import java.util.concurrent.ExecutorCompletionService;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n-import java.util.stream.Collectors;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.tikv.common.TiConfiguration;\n@@ -137,7 +135,8 @@ public ByteString get(ByteString key, long version) throws GrpcException {\n     ExecutorCompletionService<List<Kvrpcpb.KvPair>> completionService =\n         new ExecutorCompletionService<>(executorService);\n \n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(keys);\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(clientBuilder.getRegionManager(), keys, backOffer);\n     List<Batch> batches = new ArrayList<>();\n \n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n@@ -178,7 +177,8 @@ public ByteString get(ByteString key, long version) throws GrpcException {\n \n   private List<Kvrpcpb.KvPair> doSendBatchGetWithRefetchRegion(\n       BackOffer backOffer, Batch batch, long version) {\n-    Map<TiRegion, List<ByteString>> groupKeys = groupKeysByRegion(batch.keys);\n+    Map<TiRegion, List<ByteString>> groupKeys =\n+        groupKeysByRegion(clientBuilder.getRegionManager(), batch.keys, backOffer);\n     List<Batch> retryBatches = new ArrayList<>();\n \n     for (Map.Entry<TiRegion, List<ByteString>> entry : groupKeys.entrySet()) {\n@@ -195,17 +195,6 @@ public ByteString get(ByteString key, long version) throws GrpcException {\n     return results;\n   }\n \n-  /**\n-   * Group by list of keys according to its region\n-   *\n-   * @param keys keys\n-   * @return a mapping of keys and their region\n-   */\n-  private Map<TiRegion, List<ByteString>> groupKeysByRegion(List<ByteString> keys) {\n-    return keys.stream()\n-        .collect(Collectors.groupingBy(clientBuilder.getRegionManager()::getRegionByKey));\n-  }\n-\n   private Iterator<Kvrpcpb.KvPair> scanIterator(\n       TiConfiguration conf,\n       RegionStoreClientBuilder builder,"
  }
]
