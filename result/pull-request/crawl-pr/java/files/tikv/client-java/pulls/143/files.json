[
  {
    "sha": "a9dab95f6062629c2aca103c2ef6ac5407e166e0",
    "filename": "src/main/java/org/tikv/common/ConfigUtils.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/ConfigUtils.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/ConfigUtils.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/ConfigUtils.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -47,6 +47,8 @@\n   public static final String TIKV_METRICS_ENABLE = \"tikv.metrics.enable\";\n   public static final String TIKV_METRICS_PORT = \"tikv.metrics.port\";\n \n+  public static final String TIKV_NETWORK_MAPPING_NAME = \"tikv.network.mapping\";\n+\n   public static final String DEF_PD_ADDRESSES = \"127.0.0.1:2379\";\n   public static final String DEF_TIMEOUT = \"600ms\";\n   public static final String DEF_SCAN_TIMEOUT = \"20s\";\n@@ -73,6 +75,7 @@\n   public static final boolean DEF_IS_REPLICA_READ = false;\n   public static final boolean DEF_METRICS_ENABLE = false;\n   public static final int DEF_METRICS_PORT = 3140;\n+  public static final String DEF_TIKV_NETWORK_MAPPING_NAME = \"\";\n \n   public static final String NORMAL_COMMAND_PRIORITY = \"NORMAL\";\n   public static final String LOW_COMMAND_PRIORITY = \"LOW\";"
  },
  {
    "sha": "08ae8048c7eb0d7a1ee8bac952352a89a7abfd26",
    "filename": "src/main/java/org/tikv/common/HostMapping.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/HostMapping.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/HostMapping.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/HostMapping.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2021 PingCAP, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.tikv.common;\n+\n+import static org.tikv.common.pd.PDUtils.addrToUri;\n+\n+import com.google.common.annotations.Beta;\n+import io.etcd.jetcd.ByteSequence;\n+import io.etcd.jetcd.Client;\n+import io.etcd.jetcd.KeyValue;\n+import io.etcd.jetcd.kv.GetResponse;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class HostMapping {\n+  private static final String NETWORK_MAPPING_PATH = \"/client/url-mapping\";\n+  private final Client etcdClient;\n+  private final String networkMappingName;\n+  private final ConcurrentMap<String, String> hostMapping;\n+  private final Logger logger = LoggerFactory.getLogger(HostMapping.class);\n+\n+  public HostMapping(Client etcdClient, String networkMappingName) {\n+    this.etcdClient = etcdClient;\n+    this.networkMappingName = networkMappingName;\n+    this.hostMapping = new ConcurrentHashMap<>();\n+  }\n+\n+  private ByteSequence hostToNetworkMappingKey(String host) {\n+    String path = NETWORK_MAPPING_PATH + \"/\" + networkMappingName + \"/\" + host;\n+    return ByteSequence.from(path, StandardCharsets.UTF_8);\n+  }\n+\n+  @Beta\n+  private String getMappedHostFromPD(String host) {\n+    ByteSequence hostKey = hostToNetworkMappingKey(host);\n+    for (int i = 0; i < 5; i++) {\n+      CompletableFuture<GetResponse> future = etcdClient.getKVClient().get(hostKey);\n+      try {\n+        GetResponse resp = future.get();\n+        List<KeyValue> kvs = resp.getKvs();\n+        if (kvs.size() != 1) {\n+          break;\n+        }\n+        return kvs.get(0).getValue().toString(StandardCharsets.UTF_8);\n+      } catch (InterruptedException e) {\n+        Thread.currentThread().interrupt();\n+      } catch (ExecutionException e) {\n+        logger.info(\"failed to get mapped Host from PD: \" + host, e);\n+        break;\n+      } catch (Exception ignore) {\n+        // ignore\n+        break;\n+      }\n+    }\n+    return host;\n+  }\n+\n+  public URI getMappedURI(URI uri) {\n+    if (networkMappingName.isEmpty()) {\n+      return uri;\n+    }\n+    return addrToUri(\n+        hostMapping.computeIfAbsent(uri.getHost(), this::getMappedHostFromPD)\n+            + \":\"\n+            + uri.getPort());\n+  }\n+}"
  },
  {
    "sha": "e652102bb659bf528176dde9d04740a999de7437",
    "filename": "src/main/java/org/tikv/common/PDClient.java",
    "status": "modified",
    "additions": 15,
    "deletions": 8,
    "changes": 23,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/PDClient.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/PDClient.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/PDClient.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -18,6 +18,8 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n import static org.tikv.common.operation.PDErrorHandler.getRegionResponseErrorExtractor;\n import static org.tikv.common.pd.PDError.buildFromPdpbError;\n+import static org.tikv.common.pd.PDUtils.addrToUri;\n+import static org.tikv.common.pd.PDUtils.uriToAddr;\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n@@ -52,7 +54,6 @@\n import org.tikv.common.meta.TiTimestamp;\n import org.tikv.common.operation.NoopHandler;\n import org.tikv.common.operation.PDErrorHandler;\n-import org.tikv.common.pd.PDUtils;\n import org.tikv.common.region.TiRegion;\n import org.tikv.common.util.BackOffFunction.BackOffFuncType;\n import org.tikv.common.util.BackOffer;\n@@ -96,6 +97,7 @@\n   private List<URI> pdAddrs;\n   private Client etcdClient;\n   private ConcurrentMap<Long, Double> tiflashReplicaMap;\n+  private HostMapping hostMapping;\n \n   public static final Histogram PD_GET_REGION_BY_KEY_REQUEST_LATENCY =\n       Histogram.build()\n@@ -118,6 +120,10 @@ static PDClient createRaw(TiConfiguration conf, ChannelFactory channelFactory) {\n     return new PDClient(conf, channelFactory);\n   }\n \n+  public HostMapping getHostMapping() {\n+    return hostMapping;\n+  }\n+\n   @Override\n   public TiTimestamp getTimestamp(BackOffer backOffer) {\n     Supplier<TsoRequest> request = () -> tsoReq;\n@@ -383,9 +389,9 @@ LeaderWrapper getLeaderWrapper() {\n     return leaderWrapper;\n   }\n \n-  private GetMembersResponse getMembers(URI url) {\n+  private GetMembersResponse getMembers(URI uri) {\n     try {\n-      ManagedChannel probChan = channelFactory.getChannel(url.getHost() + \":\" + url.getPort());\n+      ManagedChannel probChan = channelFactory.getChannel(uriToAddr(uri), hostMapping);\n       PDGrpc.PDBlockingStub stub = PDGrpc.newBlockingStub(probChan);\n       GetMembersRequest request =\n           GetMembersRequest.newBuilder().setHeader(RequestHeader.getDefaultInstance()).build();\n@@ -414,14 +420,14 @@ synchronized boolean switchLeader(List<String> leaderURLs) {\n \n   private boolean createLeaderWrapper(String leaderUrlStr) {\n     try {\n-      URI newLeader = PDUtils.addrToUrl(leaderUrlStr);\n-      leaderUrlStr = newLeader.getHost() + \":\" + newLeader.getPort();\n+      URI newLeader = addrToUri(leaderUrlStr);\n+      leaderUrlStr = uriToAddr(newLeader);\n       if (leaderWrapper != null && leaderUrlStr.equals(leaderWrapper.getLeaderInfo())) {\n         return true;\n       }\n \n       // create new Leader\n-      ManagedChannel clientChannel = channelFactory.getChannel(leaderUrlStr);\n+      ManagedChannel clientChannel = channelFactory.getChannel(leaderUrlStr, hostMapping);\n       leaderWrapper =\n           new LeaderWrapper(\n               leaderUrlStr,\n@@ -524,6 +530,9 @@ protected PDStub getAsyncStub() {\n   private void initCluster() {\n     GetMembersResponse resp = null;\n     List<URI> pdAddrs = getConf().getPdAddrs();\n+    this.pdAddrs = pdAddrs;\n+    this.etcdClient = Client.builder().endpoints(pdAddrs).build();\n+    this.hostMapping = new HostMapping(this.etcdClient, conf.getNetworkMappingName());\n     for (URI u : pdAddrs) {\n       resp = getMembers(u);\n       if (resp != null) {\n@@ -534,8 +543,6 @@ private void initCluster() {\n     long clusterId = resp.getHeader().getClusterId();\n     header = RequestHeader.newBuilder().setClusterId(clusterId).build();\n     tsoReq = TsoRequest.newBuilder().setHeader(header).setCount(1).build();\n-    this.pdAddrs = pdAddrs;\n-    this.etcdClient = Client.builder().endpoints(pdAddrs).build();\n     this.tiflashReplicaMap = new ConcurrentHashMap<>();\n     createLeaderWrapper(resp.getLeader().getClientUrls(0));\n     service ="
  },
  {
    "sha": "e759e03ce4893346c5230bbc2afdefb65c5da028",
    "filename": "src/main/java/org/tikv/common/ReadOnlyPDClient.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/ReadOnlyPDClient.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/ReadOnlyPDClient.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/ReadOnlyPDClient.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -52,6 +52,8 @@\n \n   Future<TiRegion> getRegionByIDAsync(BackOffer backOffer, long id);\n \n+  HostMapping getHostMapping();\n+\n   /**\n    * Get Store by StoreId\n    *"
  },
  {
    "sha": "7d81540b0be01c019a51fe7a408bb75209ea0297",
    "filename": "src/main/java/org/tikv/common/TiConfiguration.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/TiConfiguration.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/TiConfiguration.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/TiConfiguration.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -70,6 +70,7 @@ private static void loadFromDefaultProperties() {\n     setIfMissing(TIKV_IS_REPLICA_READ, DEF_IS_REPLICA_READ);\n     setIfMissing(TIKV_METRICS_ENABLE, DEF_METRICS_ENABLE);\n     setIfMissing(TIKV_METRICS_PORT, DEF_METRICS_PORT);\n+    setIfMissing(TIKV_NETWORK_MAPPING_NAME, DEF_TIKV_NETWORK_MAPPING_NAME);\n   }\n \n   public static void listAll() {\n@@ -239,6 +240,8 @@ private static KVMode getKvMode(String key) {\n   private boolean metricsEnable = getBoolean(TIKV_METRICS_ENABLE);\n   private int metricsPort = getInt(TIKV_METRICS_PORT);\n \n+  private final String networkMappingName = get(TIKV_NETWORK_MAPPING_NAME);\n+\n   public enum KVMode {\n     TXN,\n     RAW\n@@ -480,4 +483,8 @@ public TiConfiguration setMetricsPort(int metricsPort) {\n     this.metricsPort = metricsPort;\n     return this;\n   }\n+\n+  public String getNetworkMappingName() {\n+    return this.networkMappingName;\n+  }\n }"
  },
  {
    "sha": "af693705a0d36f9d701c75c42832d48eef054153",
    "filename": "src/main/java/org/tikv/common/pd/PDUtils.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/pd/PDUtils.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/pd/PDUtils.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/pd/PDUtils.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -20,7 +20,7 @@\n import java.util.List;\n \n public class PDUtils {\n-  public static URI addrToUrl(String addr) {\n+  public static URI addrToUri(String addr) {\n     if (addr.contains(\"://\")) {\n       return URI.create(addr);\n     } else {\n@@ -31,8 +31,12 @@ public static URI addrToUrl(String addr) {\n   public static List<URI> addrsToUrls(String[] addrs) {\n     ImmutableList.Builder<URI> urlsBuilder = new ImmutableList.Builder<>();\n     for (String addr : addrs) {\n-      urlsBuilder.add(addrToUrl(addr));\n+      urlsBuilder.add(addrToUri(addr));\n     }\n     return urlsBuilder.build();\n   }\n+\n+  public static String uriToAddr(URI uri) {\n+    return uri.getHost() + \":\" + uri.getPort();\n+  }\n }"
  },
  {
    "sha": "8e200007c8d2903e51e86fca63cebc8b333dd528",
    "filename": "src/main/java/org/tikv/common/region/AbstractRegionStoreClient.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/region/AbstractRegionStoreClient.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/region/AbstractRegionStoreClient.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/region/AbstractRegionStoreClient.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -87,7 +87,8 @@ public boolean onNotLeader(Metapb.Store newStore, TiRegion newRegion) {\n     }\n     region = newRegion;\n     String addressStr = regionManager.getStoreById(region.getLeader().getStoreId()).getAddress();\n-    ManagedChannel channel = channelFactory.getChannel(addressStr);\n+    ManagedChannel channel =\n+        channelFactory.getChannel(addressStr, regionManager.getPDClient().getHostMapping());\n     blockingStub = TikvGrpc.newBlockingStub(channel);\n     asyncStub = TikvGrpc.newStub(channel);\n     return true;\n@@ -96,7 +97,8 @@ public boolean onNotLeader(Metapb.Store newStore, TiRegion newRegion) {\n   @Override\n   public void onStoreNotMatch(Metapb.Store store) {\n     String addressStr = store.getAddress();\n-    ManagedChannel channel = channelFactory.getChannel(addressStr);\n+    ManagedChannel channel =\n+        channelFactory.getChannel(addressStr, regionManager.getPDClient().getHostMapping());\n     blockingStub = TikvGrpc.newBlockingStub(channel);\n     asyncStub = TikvGrpc.newStub(channel);\n     if (region.getLeader().getStoreId() != store.getId()) {"
  },
  {
    "sha": "4cf6fc668bf4f0817cf871c38ca55cb7d37c5819",
    "filename": "src/main/java/org/tikv/common/region/RegionManager.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/region/RegionManager.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/region/RegionManager.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/region/RegionManager.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -79,6 +79,10 @@ public RegionManager(ReadOnlyPDClient pdClient) {\n     return cacheInvalidateCallback;\n   }\n \n+  public ReadOnlyPDClient getPDClient() {\n+    return this.cache.pdClient;\n+  }\n+\n   public TiRegion getRegionByKey(ByteString key) {\n     return getRegionByKey(key, ConcreteBackOffer.newGetBackOff());\n   }"
  },
  {
    "sha": "602f9e7a4dc03957dc8f676aec5aa0a5850b0679",
    "filename": "src/main/java/org/tikv/common/region/RegionStoreClient.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/region/RegionStoreClient.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/region/RegionStoreClient.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/region/RegionStoreClient.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -119,7 +119,7 @@ private RegionStoreClient(\n       if (logger.isDebugEnabled()) {\n         logger.debug(String.format(\"Create region store client on address %s\", addressStr));\n       }\n-      ManagedChannel channel = channelFactory.getChannel(addressStr);\n+      ManagedChannel channel = channelFactory.getChannel(addressStr, pdClient.getHostMapping());\n \n       TikvBlockingStub tikvBlockingStub = TikvGrpc.newBlockingStub(channel);\n       TikvStub tikvAsyncStub = TikvGrpc.newStub(channel);\n@@ -1239,7 +1239,7 @@ public RegionStoreClient build(TiRegion region, Store store, TiStoreType storeTy\n       if (logger.isDebugEnabled()) {\n         logger.debug(String.format(\"Create region store client on address %s\", addressStr));\n       }\n-      ManagedChannel channel = channelFactory.getChannel(addressStr);\n+      ManagedChannel channel = channelFactory.getChannel(addressStr, pdClient.getHostMapping());\n \n       TikvBlockingStub blockingStub = TikvGrpc.newBlockingStub(channel);\n       TikvStub asyncStub = TikvGrpc.newStub(channel);"
  },
  {
    "sha": "9435e9d69d76d481eac4f3184544c33e5acaf9fe",
    "filename": "src/main/java/org/tikv/common/util/ChannelFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 6,
    "changes": 19,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/util/ChannelFactory.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/util/ChannelFactory.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/util/ChannelFactory.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -18,31 +18,38 @@\n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n import java.net.URI;\n-import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.TimeUnit;\n+import org.tikv.common.HostMapping;\n+import org.tikv.common.pd.PDUtils;\n \n public class ChannelFactory implements AutoCloseable {\n   private final int maxFrameSize;\n-  private final Map<String, ManagedChannel> connPool = new ConcurrentHashMap<>();\n+  private final ConcurrentHashMap<String, ManagedChannel> connPool = new ConcurrentHashMap<>();\n \n   public ChannelFactory(int maxFrameSize) {\n     this.maxFrameSize = maxFrameSize;\n   }\n \n-  public ManagedChannel getChannel(String addressStr) {\n+  public ManagedChannel getChannel(String addressStr, HostMapping hostMapping) {\n     return connPool.computeIfAbsent(\n         addressStr,\n         key -> {\n           URI address;\n+          URI mappedAddr;\n           try {\n-            address = URI.create(\"http://\" + key);\n+            address = PDUtils.addrToUri(key);\n           } catch (Exception e) {\n-            throw new IllegalArgumentException(\"failed to form address \" + key);\n+            throw new IllegalArgumentException(\"failed to form address \" + key, e);\n+          }\n+          try {\n+            mappedAddr = hostMapping.getMappedURI(address);\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(\"failed to get mapped address \" + address, e);\n           }\n           // Channel should be lazy without actual connection until first call\n           // So a coarse grain lock is ok here\n-          return ManagedChannelBuilder.forAddress(address.getHost(), address.getPort())\n+          return ManagedChannelBuilder.forAddress(mappedAddr.getHost(), mappedAddr.getPort())\n               .maxInboundMessageSize(maxFrameSize)\n               .usePlaintext(true)\n               .idleTimeout(60, TimeUnit.SECONDS)"
  },
  {
    "sha": "4c5187a12a9569c93eda873655f93e1efe46de7e",
    "filename": "src/main/java/org/tikv/common/util/RangeSplitter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/tikv/client-java/blob/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/util/RangeSplitter.java",
    "raw_url": "https://github.com/tikv/client-java/raw/481f754aae27e7127de792f1e559d917bc34829c/src/main/java/org/tikv/common/util/RangeSplitter.java",
    "contents_url": "https://api.github.com/repos/tikv/client-java/contents/src/main/java/org/tikv/common/util/RangeSplitter.java?ref=481f754aae27e7127de792f1e559d917bc34829c",
    "patch": "@@ -231,7 +231,7 @@ private void createTask(\n       this.ranges = ranges;\n       String host = null;\n       try {\n-        host = PDUtils.addrToUrl(store.getAddress()).getHost();\n+        host = PDUtils.addrToUri(store.getAddress()).getHost();\n       } catch (Exception ignored) {\n       }\n       this.host = host;"
  }
]
