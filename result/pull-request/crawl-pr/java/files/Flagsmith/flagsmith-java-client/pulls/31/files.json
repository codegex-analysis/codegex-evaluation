[
  {
    "sha": "ffe3bfbeb7b1cb4f1a84de167877c7724d865f55",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 19,
    "deletions": 4,
    "changes": 23,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/pom.xml",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/pom.xml",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/pom.xml?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -4,7 +4,7 @@\n \n     <groupId>com.flagsmith</groupId>\n     <artifactId>flagsmith-java-client</artifactId>\n-    <version>2.5</version>\n+    <version>2.6</version>\n     <packaging>jar</packaging>\n \n     <name>Flagsmith Java Client</name>\n@@ -71,11 +71,23 @@\n             <scope>compile</scope>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>com.github.ben-manes.caffeine</groupId>\n+            <artifactId>caffeine</artifactId>\n+            <version>2.9.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.12.0</version>\n+        </dependency>\n         <dependency>\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-api</artifactId>\n             <version>${slf4j.version}</version>\n         </dependency>\n+\n+        <!-- Test Dependencies-->\n         <dependency>\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-simple</artifactId>\n@@ -88,7 +100,6 @@\n             <version>6.14.3</version>\n             <scope>test</scope>\n         </dependency>\n-\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>testcontainers</artifactId>\n@@ -119,14 +130,18 @@\n             <version>3.19.0</version>\n             <scope>test</scope>\n         </dependency>\n-\n-        <!-- For Testing client-->\n         <dependency>\n             <groupId>com.squareup.okhttp3</groupId>\n             <artifactId>mockwebserver</artifactId>\n             <version>3.10.0</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <version>3.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n     <distributionManagement>"
  },
  {
    "sha": "de1197bedd7e3c21da76db934b82588ff1a477a1",
    "filename": "src/main/java/com/flagsmith/CrudStore.java",
    "status": "removed",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/2fa29199ef6d5d253b8f98d2470a4e957098de4e/src/main/java/com/flagsmith/CrudStore.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/2fa29199ef6d5d253b8f98d2470a4e957098de4e/src/main/java/com/flagsmith/CrudStore.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/CrudStore.java?ref=2fa29199ef6d5d253b8f98d2470a4e957098de4e",
    "patch": "@@ -1,17 +0,0 @@\n-package com.flagsmith;\n-\n-/**\n- * Interface for a basic store to support persistence for Flags\n- *\n- * Created by Pavlo Maksymchuk.\n- */\n-public interface CrudStore<T extends Flag> {\n-\n-    T create(Flag flag);\n-\n-    Flag read(String id);\n-\n-    Flag update(Flag flag);\n-\n-    void delete(String id);\n-}"
  },
  {
    "sha": "bac312fc4ef7ea77b7fb70c75ebea53c0d210d3d",
    "filename": "src/main/java/com/flagsmith/Flagsmith.java",
    "status": "removed",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/2fa29199ef6d5d253b8f98d2470a4e957098de4e/src/main/java/com/flagsmith/Flagsmith.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/2fa29199ef6d5d253b8f98d2470a4e957098de4e/src/main/java/com/flagsmith/Flagsmith.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/Flagsmith.java?ref=2fa29199ef6d5d253b8f98d2470a4e957098de4e",
    "patch": "@@ -1,12 +0,0 @@\n-package com.flagsmith;\n-\n-/**\n- * Created by Pavlo Maksymchuk.\n- */\n-public class Flagsmith {\n-\n-    /**\n-     * Storage to persist feature within {@link CrudStore}.\n-     */\n-    private CrudStore store = new InMemoryStore();\n-}"
  },
  {
    "sha": "a5abf9a319dcf9c561068110fbb60e80a45c0bc8",
    "filename": "src/main/java/com/flagsmith/FlagsmithCache.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithCache.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithCache.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/FlagsmithCache.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,52 @@\n+package com.flagsmith;\n+\n+import com.github.benmanes.caffeine.cache.stats.CacheStats;\n+\n+/**\n+ * Here are the fields we expose from the cache to outside this library.\n+ * Do not expose the cache here directly, i.e. getCache().\n+ */\n+public interface FlagsmithCache {\n+  /**\n+   * Performs any pending maintenance operations needed by the cache.\n+   */\n+  void cleanUp();\n+\n+  /**\n+   * Discards all entries in the cache.\n+   */\n+  void invalidateAll();\n+\n+  /**\n+   * Discards any cached value for key userId.\n+   * @param userId\n+   */\n+  void invalidate(String userId);\n+\n+  /**\n+   * Returns the approximate number of entries in this cache. The value returned is an estimate; the actual count may\n+   * differ if there are concurrent insertions or removals, or if some entries are pending removal due to expiration\n+   * or weak/soft reference collection. In the case of stale entries this inaccuracy can be mitigated by performing\n+   * a cleanUp() first.\n+   *\n+   * @return the estimated size\n+   */\n+  long estimatedSize();\n+\n+  /**\n+   * Returns a current snapshot of this cache's cumulative statistics. All statistics are initialized to zero, and are\n+   * monotonically increasing over the lifetime of the cache.\n+   *\n+   * @return stats object\n+   */\n+  CacheStats stats();\n+\n+  /**\n+   * Returns the value associated with key in this cache, or null if there is no cached value for key.\n+   * It will not attempt to fetch flags from Flagsmith.\n+   *\n+   * @param key\n+   * @return\n+   */\n+  FlagsAndTraits getIfPresent(String key);\n+}"
  },
  {
    "sha": "e1c8f2b3564eed76e03aa4d3d8aff33b3aee308d",
    "filename": "src/main/java/com/flagsmith/FlagsmithCacheConfig.java",
    "status": "added",
    "additions": 165,
    "deletions": 0,
    "changes": 165,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithCacheConfig.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithCacheConfig.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/FlagsmithCacheConfig.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,165 @@\n+package com.flagsmith;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.stats.CacheStats;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public final class FlagsmithCacheConfig {\n+\n+  final FlagsmithInternalCache cache;\n+\n+  private FlagsmithCacheConfig(Builder builder) {\n+    Caffeine<Object, Object> caffeineBuilder = Caffeine.newBuilder();\n+\n+    if (builder.expireAfterWrite > -1) {\n+      caffeineBuilder = caffeineBuilder\n+          .expireAfterWrite(builder.expireAfterWrite, builder.expireAfterWriteTimeUnit);\n+    }\n+\n+    if (builder.expireAfterAccess > -1) {\n+      caffeineBuilder = caffeineBuilder\n+          .expireAfterAccess(builder.expireAfterAccess, builder.expireAfterAccessTimeUnit);\n+    }\n+\n+    if (builder.maxSize > -1) {\n+      caffeineBuilder = caffeineBuilder\n+          .maximumSize(builder.maxSize);\n+    }\n+\n+    if (builder.maxWeight > -1) {\n+      caffeineBuilder = caffeineBuilder\n+          .maximumWeight(builder.maxWeight);\n+    }\n+\n+    if (builder.recordStats) {\n+      caffeineBuilder = caffeineBuilder.recordStats();\n+    }\n+    this.cache = new FlagsmithInternalCache(caffeineBuilder.build());\n+  }\n+\n+  public static FlagsmithCacheConfig.Builder newBuilder() {\n+    return new FlagsmithCacheConfig.Builder();\n+  }\n+\n+  class FlagsmithInternalCache implements FlagsmithCache {\n+    private final Cache<String, FlagsAndTraits> cache;\n+\n+    public FlagsmithInternalCache(Cache<String, FlagsAndTraits> cache) {\n+      this.cache = cache;\n+    }\n+\n+    public void cleanUp() {\n+      cache.cleanUp();\n+    }\n+\n+    public void invalidateAll() {\n+      cache.invalidateAll();\n+    }\n+\n+    public void invalidate(String userId) {\n+      cache.invalidate(userId);\n+    }\n+\n+    public long estimatedSize() {\n+      return cache.estimatedSize();\n+    }\n+\n+    public CacheStats stats() {\n+      return cache.stats();\n+    }\n+\n+    public FlagsAndTraits getIfPresent(String key) {\n+      return cache.getIfPresent(key);\n+    }\n+\n+    public Cache<String, FlagsAndTraits> getCache() {\n+      return cache;\n+    }\n+  }\n+\n+  public static class Builder {\n+    private TimeUnit expireAfterWriteTimeUnit;\n+    private int expireAfterWrite = -1;\n+    private TimeUnit expireAfterAccessTimeUnit;\n+    private int expireAfterAccess = -1;\n+    private int maxSize = -1;\n+    private int maxWeight = -1;\n+    private boolean recordStats = false;\n+\n+    private Builder() {\n+    }\n+\n+    /**\n+     * Specifies that each entry should be automatically removed from the cache once a fixed duration\n+     * has elapsed after the entry's creation, or the most recent replacement of its value.\n+     *\n+     * @param duration an integer matching the time unit.\n+     * @param timeUnit minutes, seconds, etc.\n+     * @return the Builder\n+     */\n+    public Builder expireAfterWrite(int duration, TimeUnit timeUnit) {\n+      this.expireAfterWrite = duration;\n+      this.expireAfterWriteTimeUnit = timeUnit;\n+      return this;\n+    }\n+\n+    /**\n+     * Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed\n+     * after the entry's creation, the most recent replacement of its value, or its last read.\n+     *\n+     * @param duration an integer matching the time unit.\n+     * @param timeUnit minutes, seconds, etc.\n+     * @return the Builder\n+     */\n+    public Builder expireAfterAccess(int duration, TimeUnit timeUnit) {\n+      this.expireAfterAccess = duration;\n+      this.expireAfterAccessTimeUnit = timeUnit;\n+      return this;\n+    }\n+\n+    /**\n+     * Specifies the maximum number of entries the cache may contain. Note that the cache may evict an entry before\n+     * this limit is exceeded or temporarily exceed the threshold while evicting.\n+     * As the cache size grows close to the maximum, the cache evicts entries that are less likely to be used again.\n+     * For example, the cache may evict an entry because it hasn't been used recently or very often.\n+     *\n+     * @param maxSize size. When size is zero, elements will be evicted immediately after being loaded into the cache.\n+     *                This can be useful in testing, or to disable caching temporarily without a code change.\n+     * @return the Builder\n+     */\n+    public Builder maxSize(int maxSize) {\n+      this.maxSize = maxSize;\n+      return this;\n+    }\n+\n+    /**\n+     * Specifies the maximum weight of entries the cache may contain.\n+     *\n+     * @param maxWeight weight. When size is zero, elements will be evicted immediately after being loaded into the cache.\n+     *                This can be useful in testing, or to disable caching temporarily without a code change.\n+     * @return the Builder\n+     */\n+    public Builder maxWeight(int maxWeight) {\n+      this.maxWeight = maxWeight;\n+      return this;\n+    }\n+\n+    /**\n+     * Enables the accumulation of CacheStats during the operation of the cache.\n+     * Without this Cache.stats() will return zero for all statistics. Note that recording statistics requires\n+     * bookkeeping to be performed with each operation, and thus imposes a performance penalty on cache operation.\n+     *\n+     * @return the Builder\n+     */\n+    public Builder recordStats() {\n+      this.recordStats = true;\n+      return this;\n+    }\n+\n+    public FlagsmithCacheConfig build() {\n+      return new FlagsmithCacheConfig(this);\n+    }\n+  }\n+}"
  },
  {
    "sha": "526e7bef1b474a9770e93a9eb8a4694eed3e0c33",
    "filename": "src/main/java/com/flagsmith/FlagsmithCachedEndpoints.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithCachedEndpoints.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithCachedEndpoints.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/FlagsmithCachedEndpoints.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,59 @@\n+package com.flagsmith;\n+\n+import java.util.List;\n+\n+class FlagsmithCachedEndpoints implements FlagsmithSDK {\n+  private final FlagsmithEndpoints flagsmithEndpoints;\n+  private final FlagsmithCacheConfig.FlagsmithInternalCache cache;\n+\n+  public FlagsmithCachedEndpoints(final FlagsmithCacheConfig.FlagsmithInternalCache cache, final FlagsmithEndpoints flagsmithEndpoints) {\n+    this.cache = cache;\n+    this.flagsmithEndpoints = flagsmithEndpoints;\n+  }\n+\n+  @Override\n+  public FlagsAndTraits getFeatureFlags(FeatureUser user, boolean doThrow) {\n+    if (user == null) {\n+      // not caching project flags yet\n+      return flagsmithEndpoints.getFeatureFlags(null, doThrow);\n+    }\n+    assertValidUser(user);\n+    return cache.getCache().get(user.getIdentifier(), k -> flagsmithEndpoints.getFeatureFlags(user, doThrow));\n+  }\n+\n+  @Override\n+  public FlagsAndTraits getUserFlagsAndTraits(FeatureUser user, boolean doThrow) {\n+    assertValidUser(user);\n+    return cache.getCache().get(user.getIdentifier(), k -> flagsmithEndpoints.getUserFlagsAndTraits(user, doThrow));\n+  }\n+\n+  @Override\n+  public Trait postUserTraits(FeatureUser user, Trait toUpdate, boolean doThrow) {\n+    assertValidUser(user);\n+    final FlagsAndTraits flagsAndTraits = cache.getCache().getIfPresent(user.getIdentifier());\n+    final Trait newTrait = new Trait(null, toUpdate.getKey(), toUpdate.getValue());\n+    // if the trait already has the same value, then there is no need to update it\n+    if (flagsAndTraits != null &&\n+        flagsAndTraits.getTraits() != null &&\n+        flagsAndTraits.getTraits().contains(newTrait)) {\n+      flagsmithEndpoints.getLogger().info(\"User trait unchanged for user {}, trait: {}\", user.getIdentifier(), toUpdate);\n+      return toUpdate;\n+    }\n+    // cache exists but does not match the target trait, lets invalidate this cache entry\n+    cache.getCache().invalidate(user.getIdentifier());\n+    return flagsmithEndpoints.postUserTraits(user, toUpdate, doThrow);\n+  }\n+\n+  @Override\n+  public FlagsAndTraits identifyUserWithTraits(FeatureUser user, List<Trait> traits, boolean doThrow) {\n+    assertValidUser(user);\n+    FlagsAndTraits flagsAndTraits = flagsmithEndpoints.identifyUserWithTraits(user, traits, doThrow);\n+    cache.getCache().put(user.getIdentifier(), flagsAndTraits);\n+    return flagsAndTraits;\n+  }\n+\n+  @Override\n+  public FlagsmithCache getCache() {\n+    return cache;\n+  }\n+}"
  },
  {
    "sha": "2d12d8fe61106a0eff1d6625e5a9a9d8afcda30c",
    "filename": "src/main/java/com/flagsmith/FlagsmithClient.java",
    "status": "modified",
    "additions": 38,
    "deletions": 153,
    "changes": 191,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithClient.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithClient.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/FlagsmithClient.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -1,15 +1,7 @@\n package com.flagsmith;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import okhttp3.Call;\n-import okhttp3.HttpUrl;\n-import okhttp3.MediaType;\n-import okhttp3.Request;\n-import okhttp3.RequestBody;\n-import okhttp3.Response;\n import org.slf4j.LoggerFactory;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n@@ -20,13 +12,8 @@\n  */\n public class FlagsmithClient {\n \n-    private FlagsmithConfig defaultConfig;\n-    private static final String AUTH_HEADER = \"X-Environment-Key\";\n-    private static final String ACCEPT_HEADER = \"Accept\";\n-    // an api key per environment\n-    private String apiKey;\n     private final FlagsmithLogger logger = new FlagsmithLogger();\n-    private HashMap<String, String> customHeaders;\n+    private FlagsmithSDK flagsmithSDK;\n \n     private FlagsmithClient() {\n     }\n@@ -58,34 +45,7 @@ private FlagsmithClient() {\n      * @return a list of feature flags\n      */\n     public List<Flag> getFeatureFlags(FeatureUser user, boolean doThrow) {\n-        HttpUrl.Builder urlBuilder;\n-        if (user == null) {\n-            urlBuilder = defaultConfig.flagsURI.newBuilder()\n-                    .addEncodedQueryParameter(\"page\", \"1\");\n-        } else {\n-            urlBuilder = defaultConfig.flagsURI.newBuilder(\"\")\n-                    .addEncodedPathSegment(user.getIdentifier());\n-        }\n-\n-        final Request request = this.newRequestBuilder()\n-                .url(urlBuilder.build())\n-                .build();\n-\n-        Call call = defaultConfig.httpClient.newCall(request);\n-        List<Flag> featureFlags = new ArrayList<>();\n-        try (Response response = call.execute()) {\n-            if (response.isSuccessful()) {\n-                ObjectMapper mapper = MapperFactory.getMappper();\n-                featureFlags = Arrays.asList(mapper.readValue(response.body().string(),\n-                        Flag[].class));\n-            } else {\n-                logger.httpError(request, response, doThrow);\n-            }\n-        } catch (IOException io) {\n-            logger.httpError(request, io, doThrow);\n-        }\n-        logger.info(\"Got feature flags for user = {}, flags = {}\", user, featureFlags);\n-        return featureFlags;\n+        return this.flagsmithSDK.getFeatureFlags(user, doThrow).getFlags();\n     }\n \n     /**\n@@ -249,8 +209,7 @@ private static Trait getTraitByKey(String key, List<Trait> traits) {\n      * @return a list of user Trait\n      */\n     public List<Trait> getTraits(FeatureUser user, String... keys) {\n-        List<Trait> traits = getUserTraits(user);\n-        return getTraitsByKeys(traits, keys);\n+        return getTraitsByKeys(getUserTraits(user), keys);\n     }\n \n     /**\n@@ -259,10 +218,7 @@ private static Trait getTraitByKey(String key, List<Trait> traits) {\n      * @return a list of user Trait\n      */\n     public static List<Trait> getTraits(FlagsAndTraits flagsAndTraits, String... keys) {\n-        if (flagsAndTraits == null) {\n-            return null;\n-        }\n-        return getTraitsByKeys(flagsAndTraits.getTraits(), keys);\n+        return flagsAndTraits == null ? null : getTraitsByKeys(flagsAndTraits.getTraits(), keys);\n     }\n \n     /**\n@@ -315,29 +271,7 @@ public FlagsAndTraits getUserFlagsAndTraits(FeatureUser user) {\n      * @return a list of user Traits and Flags\n      */\n     public FlagsAndTraits getUserFlagsAndTraits(FeatureUser user, boolean doThrow) {\n-        HttpUrl url = defaultConfig.identitiesURI.newBuilder(\"\")\n-                .addEncodedQueryParameter(\"identifier\", user.getIdentifier())\n-                .build();\n-\n-        final Request request = this.newRequestBuilder()\n-                .url(url)\n-                .build();\n-\n-        Call call = defaultConfig.httpClient.newCall(request);\n-\n-        FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n-        try (Response response = call.execute()) {\n-            if (response.isSuccessful()) {\n-                ObjectMapper mapper = MapperFactory.getMappper();\n-                flagsAndTraits = mapper.readValue(response.body().string(), FlagsAndTraits.class);\n-            } else {\n-                logger.httpError(request, response, doThrow);\n-            }\n-        } catch (IOException io) {\n-            logger.httpError(request, io, doThrow);\n-        }\n-        logger.info(\"Got feature flags & traits for user = {}, flagsAndTraits = {}\", user, flagsAndTraits);\n-        return flagsAndTraits;\n+        return this.flagsmithSDK.getUserFlagsAndTraits(user, doThrow);\n     }\n \n     /**\n@@ -360,7 +294,7 @@ public Trait updateTrait(FeatureUser user, Trait toUpdate) {\n      * @return a Trait object or null if does not exist\n      */\n     public Trait updateTrait(FeatureUser user, Trait toUpdate, boolean doThrow) {\n-        return postUserTraits(user, toUpdate, doThrow);\n+        return this.flagsmithSDK.postUserTraits(user, toUpdate, doThrow);\n     }\n \n     /**\n@@ -393,94 +327,28 @@ public Trait updateTrait(FeatureUser user, Trait toUpdate, boolean doThrow) {\n      * @return a list of added Trait objects\n      */\n     public List<Trait> identifyUserWithTraits(FeatureUser user, List<Trait> traits, boolean doThrow) {\n-        // we are using identities endpoint to create bulk user Trait\n-        HttpUrl url = defaultConfig.identitiesURI;\n-\n-        if (user == null || (user.getIdentifier() == null || user.getIdentifier().length() < 1)) {\n-            throw new IllegalArgumentException(\"Missing user Identifier\");\n-        }\n-\n-        IdentityTraits identityTraits = new IdentityTraits();\n-        identityTraits.setIdentifier(user.getIdentifier());\n-        if (traits != null) {\n-            identityTraits.setTraits(traits);\n-        }\n-\n-        MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");\n-        RequestBody body = RequestBody.create(JSON, identityTraits.toString());\n-\n-        final Request request = this.newRequestBuilder()\n-                .post(body)\n-                .url(url)\n-                .build();\n-\n-        List<Trait> traitsData = new ArrayList<>();\n-        Call call = defaultConfig.httpClient.newCall(request);\n-        try (Response response = call.execute()) {\n-            if (response.isSuccessful()) {\n-                ObjectMapper mapper = MapperFactory.getMappper();\n-                FlagsAndTraits flagsAndTraits = mapper.readValue(response.body().string(), FlagsAndTraits.class);\n-\n-                traitsData = flagsAndTraits.getTraits();\n-            } else {\n-                logger.httpError(request, response, doThrow);\n-            }\n-        } catch (IOException io) {\n-            logger.httpError(request, io, doThrow);\n-        }\n-        logger.info(\"Got traits for user = {}, traits = {}\", user, traitsData);\n-        return traitsData;\n+        return flagsmithSDK.identifyUserWithTraits(user, traits, doThrow).getTraits();\n     }\n \n-    private Trait postUserTraits(FeatureUser user, Trait toUpdate, boolean doThrow) {\n-        HttpUrl url = defaultConfig.traitsURI;\n-        toUpdate.setIdentity(user);\n-\n-        MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");\n-        RequestBody body = RequestBody.create(JSON, toUpdate.toString());\n-\n-        Request request = this.newRequestBuilder()\n-                .post(body)\n-                .url(url)\n-                .build();\n-\n-        Trait trait = null;\n-        Call call = defaultConfig.httpClient.newCall(request);\n-        try (Response response = call.execute()) {\n-            if (response.isSuccessful()) {\n-                ObjectMapper mapper = MapperFactory.getMappper();\n-                trait = mapper.readValue(response.body().string(), Trait.class);\n-            } else {\n-                logger.httpError(request, response, doThrow);\n-            }\n-        } catch (IOException io) {\n-            logger.httpError(request, io, doThrow);\n-        }\n-        logger.info(\"Updated trait for user = {}, new trait = {}, updated trait = {}\", user, toUpdate, trait);\n-        return trait;\n+    /**\n+     * This method returns a Flagsmith cache object that encapsulates methods to manipulate the cache.\n+     *\n+     * @return if enabled - a flagsmith cache object that exposes methods to manipulate the cache, otherwise null.\n+     */\n+    public FlagsmithCache getCache() {\n+        return this.flagsmithSDK.getCache();\n     }\n \n-\n     public static FlagsmithClient.Builder newBuilder() {\n         return new FlagsmithClient.Builder();\n     }\n \n-    private Request.Builder newRequestBuilder() {\n-        final Request.Builder builder = new Request.Builder()\n-            .header(AUTH_HEADER, apiKey)\n-            .addHeader(ACCEPT_HEADER, \"application/json\");\n-\n-        if (this.customHeaders != null && !this.customHeaders.isEmpty()) {\n-            this.customHeaders.forEach((k, v) -> builder.addHeader(k, v));\n-        }\n-\n-        return builder;\n-    }\n-\n-\n     public static class Builder {\n         private FlagsmithClient client;\n         private FlagsmithConfig configuration = FlagsmithConfig.newBuilder().build();\n+        private HashMap<String, String> customHeaders;\n+        private String apiKey;\n+        private FlagsmithCacheConfig cacheConfig;\n \n         private Builder() {\n             client = new FlagsmithClient();\n@@ -496,7 +364,7 @@ public Builder setApiKey(String apiKey) {\n             if (null == apiKey) {\n                 throw new IllegalArgumentException(\"Api key can not be null\");\n             } else {\n-                client.apiKey = apiKey;\n+                this.apiKey = apiKey;\n                 return this;\n             }\n         }\n@@ -557,13 +425,30 @@ public Builder withApiUrl(String apiUrl) {\n          * @return the Builder\n          */\n         public Builder withCustomHttpHeaders(HashMap<String, String> customHeaders) {\n-            this.client.customHeaders = customHeaders;\n+            this.customHeaders = customHeaders;\n+            return this;\n+        }\n+\n+        /**\n+         * Enable in-memory caching for the Flagsmith API.\n+         * If no other cache configuration is set, the Caffeine defaults will be used, i.e. no limit\n+         *\n+         * @param cacheConfig an FlagsmithCacheConfig.\n+         * @return the Builder\n+         */\n+        public Builder withCache(FlagsmithCacheConfig cacheConfig) {\n+            this.cacheConfig = cacheConfig;\n             return this;\n         }\n \n         public FlagsmithClient build() {\n-            client.defaultConfig = this.configuration;\n-            return client;\n+            final FlagsmithEndpoints flagsmithEndpoints = new FlagsmithEndpoints(this.configuration, this.customHeaders, client.logger, apiKey);\n+            if (cacheConfig != null) {\n+                this.client.flagsmithSDK = new FlagsmithCachedEndpoints(cacheConfig.cache, flagsmithEndpoints);\n+            } else {\n+                this.client.flagsmithSDK = flagsmithEndpoints;\n+            }\n+            return this.client;\n         }\n     }\n }"
  },
  {
    "sha": "dea913a804e6fb9580581f2bc09cc1f1715ebc74",
    "filename": "src/main/java/com/flagsmith/FlagsmithEndpoints.java",
    "status": "added",
    "additions": 186,
    "deletions": 0,
    "changes": 186,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithEndpoints.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithEndpoints.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/FlagsmithEndpoints.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,186 @@\n+package com.flagsmith;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import okhttp3.Call;\n+import okhttp3.HttpUrl;\n+import okhttp3.MediaType;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class FlagsmithEndpoints implements FlagsmithSDK {\n+\n+  private final FlagsmithLogger logger;\n+  private final FlagsmithConfig defaultConfig;\n+  private final HashMap<String, String> customHeaders;\n+  private static final String AUTH_HEADER = \"X-Environment-Key\";\n+  private static final String ACCEPT_HEADER = \"Accept\";\n+  // an api key per environment\n+  private final String apiKey;\n+\n+  public FlagsmithEndpoints(final FlagsmithConfig defaultConfig,\n+                            final HashMap<String, String> customHeaders,\n+                            final FlagsmithLogger logger,\n+                            final String apiKey) {\n+    this.defaultConfig = defaultConfig;\n+    this.customHeaders = customHeaders;\n+    this.logger = logger;\n+    this.apiKey = apiKey;\n+  }\n+\n+  @Override\n+  public FlagsAndTraits getFeatureFlags(FeatureUser user, boolean doThrow) {\n+    HttpUrl.Builder urlBuilder;\n+    if (user == null) {\n+      urlBuilder = defaultConfig.flagsURI.newBuilder()\n+          .addEncodedQueryParameter(\"page\", \"1\");\n+    } else {\n+      return getUserFlagsAndTraits(user, doThrow);\n+    }\n+\n+    final Request request = this.newRequestBuilder()\n+        .url(urlBuilder.build())\n+        .build();\n+\n+    Call call = defaultConfig.httpClient.newCall(request);\n+    FlagsAndTraits flagsAndTraits = newFlagsAndTraits();\n+    try (Response response = call.execute()) {\n+      if (response.isSuccessful()) {\n+        ObjectMapper mapper = MapperFactory.getMappper();\n+        List<Flag> featureFlags = Arrays.asList(mapper.readValue(response.body().string(),\n+            Flag[].class));\n+        flagsAndTraits.setFlags(featureFlags);\n+      } else {\n+        logger.httpError(request, response, doThrow);\n+      }\n+    } catch (IOException io) {\n+      logger.httpError(request, io, doThrow);\n+    }\n+    logger.info(\"Got feature flags for user = {}, flags = {}\", user, flagsAndTraits);\n+    return flagsAndTraits;\n+  }\n+\n+  @Override\n+  public FlagsAndTraits getUserFlagsAndTraits(FeatureUser user, boolean doThrow) {\n+    assertValidUser(user);\n+\n+    HttpUrl url = defaultConfig.identitiesURI.newBuilder(\"\")\n+        .addEncodedQueryParameter(\"identifier\", user.getIdentifier())\n+        .build();\n+\n+    final Request request = this.newRequestBuilder()\n+        .url(url)\n+        .build();\n+\n+    Call call = defaultConfig.httpClient.newCall(request);\n+\n+    FlagsAndTraits flagsAndTraits = newFlagsAndTraits();\n+    try (Response response = call.execute()) {\n+      if (response.isSuccessful()) {\n+        ObjectMapper mapper = MapperFactory.getMappper();\n+        flagsAndTraits = mapper.readValue(response.body().string(), FlagsAndTraits.class);\n+      } else {\n+        logger.httpError(request, response, doThrow);\n+      }\n+    } catch (IOException io) {\n+      logger.httpError(request, io, doThrow);\n+    }\n+    logger.info(\"Got feature flags & traits for user = {}, flagsAndTraits = {}\", user, flagsAndTraits);\n+    return flagsAndTraits;\n+  }\n+\n+  @Override\n+  public FlagsAndTraits identifyUserWithTraits(FeatureUser user, List<Trait> traits, boolean doThrow) {\n+    assertValidUser(user);\n+\n+    // we are using identities endpoint to create bulk user Trait\n+    HttpUrl url = defaultConfig.identitiesURI;\n+\n+    IdentityTraits identityTraits = new IdentityTraits();\n+    identityTraits.setIdentifier(user.getIdentifier());\n+    if (traits != null) {\n+      identityTraits.setTraits(traits);\n+    }\n+\n+    MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");\n+    RequestBody body = RequestBody.create(JSON, identityTraits.toString());\n+\n+    final Request request = this.newRequestBuilder()\n+        .post(body)\n+        .url(url)\n+        .build();\n+\n+    FlagsAndTraits flagsAndTraits = newFlagsAndTraits();\n+    Call call = defaultConfig.httpClient.newCall(request);\n+    try (Response response = call.execute()) {\n+      if (response.isSuccessful()) {\n+        ObjectMapper mapper = MapperFactory.getMappper();\n+        flagsAndTraits = mapper.readValue(response.body().string(), FlagsAndTraits.class);\n+      } else {\n+        logger.httpError(request, response, doThrow);\n+      }\n+    } catch (IOException io) {\n+      logger.httpError(request, io, doThrow);\n+    }\n+    logger.info(\"Got traits for user = {}, traits = {}\", user, flagsAndTraits.getTraits());\n+    return flagsAndTraits;\n+  }\n+\n+  @Override\n+  public Trait postUserTraits(FeatureUser user, Trait toUpdate, boolean doThrow) {\n+    HttpUrl url = defaultConfig.traitsURI;\n+    toUpdate.setIdentity(user);\n+\n+    MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");\n+    RequestBody body = RequestBody.create(JSON, toUpdate.toString());\n+\n+    Request request = this.newRequestBuilder()\n+        .post(body)\n+        .url(url)\n+        .build();\n+\n+    Trait trait = null;\n+    Call call = defaultConfig.httpClient.newCall(request);\n+    try (Response response = call.execute()) {\n+      if (response.isSuccessful()) {\n+        ObjectMapper mapper = MapperFactory.getMappper();\n+        trait = mapper.readValue(response.body().string(), Trait.class);\n+      } else {\n+        logger.httpError(request, response, doThrow);\n+      }\n+    } catch (IOException io) {\n+      logger.httpError(request, io, doThrow);\n+    }\n+    logger.info(\"Updated trait for user = {}, new trait = {}, updated trait = {}\", user, toUpdate, trait);\n+    return trait;\n+  }\n+\n+  public FlagsmithLogger getLogger() {\n+    return logger;\n+  }\n+\n+  private Request.Builder newRequestBuilder() {\n+    final Request.Builder builder = new Request.Builder()\n+        .header(AUTH_HEADER, apiKey)\n+        .addHeader(ACCEPT_HEADER, \"application/json\");\n+\n+    if (this.customHeaders != null && !this.customHeaders.isEmpty()) {\n+      this.customHeaders.forEach((k, v) -> builder.addHeader(k, v));\n+    }\n+\n+    return builder;\n+  }\n+\n+  private FlagsAndTraits newFlagsAndTraits() {\n+    FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    flagsAndTraits.setFlags(new ArrayList<>());\n+    flagsAndTraits.setTraits(new ArrayList<>());\n+    return flagsAndTraits;\n+  }\n+}"
  },
  {
    "sha": "4b19447980ad4b899ca8cd548a4e372e316780cc",
    "filename": "src/main/java/com/flagsmith/FlagsmithSDK.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithSDK.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/FlagsmithSDK.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/FlagsmithSDK.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,26 @@\n+package com.flagsmith;\n+\n+import lombok.NonNull;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.List;\n+\n+interface FlagsmithSDK {\n+  // API Endpoints\n+  FlagsAndTraits getFeatureFlags(FeatureUser user, boolean doThrow);\n+  FlagsAndTraits getUserFlagsAndTraits(FeatureUser user, boolean doThrow);\n+  Trait postUserTraits(FeatureUser user, Trait toUpdate, boolean doThrow);\n+  FlagsAndTraits identifyUserWithTraits(FeatureUser user, List<Trait> traits, boolean doThrow);\n+\n+  // Cache\n+  default FlagsmithCache getCache() {\n+    return null;\n+  }\n+\n+  // Validation\n+  default void assertValidUser(@NonNull FeatureUser user) {\n+    if (StringUtils.isBlank(user.getIdentifier())) {\n+      throw new IllegalArgumentException(\"Missing user identifier\");\n+    }\n+  }\n+}"
  },
  {
    "sha": "6ce5b6f5627bfac70342eab9ae44e11a4a5df6ed",
    "filename": "src/main/java/com/flagsmith/InMemoryStore.java",
    "status": "removed",
    "additions": 0,
    "deletions": 38,
    "changes": 38,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/2fa29199ef6d5d253b8f98d2470a4e957098de4e/src/main/java/com/flagsmith/InMemoryStore.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/2fa29199ef6d5d253b8f98d2470a4e957098de4e/src/main/java/com/flagsmith/InMemoryStore.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/InMemoryStore.java?ref=2fa29199ef6d5d253b8f98d2470a4e957098de4e",
    "patch": "@@ -1,38 +0,0 @@\n-package com.flagsmith;\n-\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-/**\n- * An implementation of inmemory store for caching feature flags states in memory.\n- *\n- * Created by Pavlo Maksymchuk.\n- */\n-public class InMemoryStore<T extends Flag> implements CrudStore<T> {\n-\n-    /**\n-     * InMemory Feature Flag data\n-     */\n-    private final Map<String, Flag> data = new ConcurrentHashMap<>();\n-\n-    /**\n-     * Default constructor.\n-     */\n-    public InMemoryStore() {\n-    }\n-\n-\n-    public synchronized T create(Flag flag) {\n-        return null;\n-    }\n-    public synchronized Flag read(String id) {\n-        return null;\n-    }\n-\n-    public synchronized Flag update(Flag flag) {\n-        return null;\n-    }\n-\n-    public synchronized void delete(String id) {\n-    }\n-}"
  },
  {
    "sha": "952b0cb2b1baee4b6392df6a916fef98e48cbf80",
    "filename": "src/main/java/com/flagsmith/Trait.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/Trait.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/Trait.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/Trait.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -26,6 +26,15 @@\n     @JsonProperty(\"trait_value\")\n     private String value;\n \n+    public Trait() {\n+    }\n+\n+    public Trait(FeatureUser identity, String key, String value) {\n+        this.identity = identity;\n+        this.key = key;\n+        this.value = value;\n+    }\n+\n     @JsonIgnore\n     public void parse(String data) throws IOException {\n         ObjectMapper mapper = MapperFactory.getMappper();\n@@ -37,6 +46,7 @@ public void parse(String data) throws IOException {\n     private void fromPrototype(Trait prototype) {\n         setKey(prototype.getKey());\n         setValue(prototype.getValue());\n+        setIdentity(prototype.getIdentity());\n     }\n \n     @JsonIgnore"
  },
  {
    "sha": "a886d4642b7709dde187badb4ed888d93aed4ea4",
    "filename": "src/main/java/com/flagsmith/lombok.config",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/lombok.config",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/main/java/com/flagsmith/lombok.config",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/main/java/com/flagsmith/lombok.config?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1 @@\n+lombok.nonNull.exceptionType=IllegalArgumentException\n\\ No newline at end of file"
  },
  {
    "sha": "5c0e4601dc90e139282399483d27e0039044f45a",
    "filename": "src/test/java/com/flagsmith/FlagTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagTest.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagTest.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/FlagTest.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -29,9 +29,8 @@\n             \"    \\\"identity\\\": null\\n\" +\n             \"  }\";\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"unit\")\n     public void test_When_Parsed_Then_Success() throws IOException {\n-\n         Flag flag = new Flag();\n         flag.parse(json);\n "
  },
  {
    "sha": "3677386d8ec5f9e2c366cd7e9f4cd780e3d03d89",
    "filename": "src/test/java/com/flagsmith/FlagsmithCachedClientTest.java",
    "status": "added",
    "additions": 374,
    "deletions": 0,
    "changes": 374,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithCachedClientTest.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithCachedClientTest.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/FlagsmithCachedClientTest.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,374 @@\n+package com.flagsmith;\n+\n+import com.github.benmanes.caffeine.cache.stats.CacheStats;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.flagsmith.FlagsmithTestHelper.assignTraitToUserIdentity;\n+import static com.flagsmith.FlagsmithTestHelper.createFeature;\n+import static com.flagsmith.FlagsmithTestHelper.createProjectEnvironment;\n+import static com.flagsmith.FlagsmithTestHelper.createUserIdentity;\n+import static com.flagsmith.FlagsmithTestHelper.featureUser;\n+import static com.flagsmith.FlagsmithTestHelper.flag;\n+import static com.flagsmith.FlagsmithTestHelper.switchFlagForUser;\n+import static com.flagsmith.FlagsmithTestHelper.trait;\n+import static com.flagsmith.FlagsmithTestHelper.traitValueWhenUserAlreadyExists;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.testng.Assert.assertNull;\n+\n+@Test(groups = \"integration\")\n+public class FlagsmithCachedClientTest {\n+\n+  private FlagsmithTestHelper.ProjectEnvironment environment;\n+  private FlagsmithCache clientCache;\n+  private int featureId;\n+  private int userId1;\n+  private int userId2;\n+  private int userId3;\n+  private FeatureUser user1;\n+  private FeatureUser user2;\n+  private FeatureUser user3;\n+  private boolean user2feature1initValue = true;\n+\n+  // User 2 initial trait\n+  private static final String user2traitKey = \"foo1\";\n+  private static final String user2traitVal = \"xxx\";\n+\n+  @BeforeMethod(groups = \"integration\")\n+  public void setup() {\n+    environment = createProjectEnvironment(\n+        \"TEST\",\n+        \"TEST\", true);\n+\n+    featureId = createFeature(new FlagsmithTestHelper.FlagFeature(\n+        \"Flag to be enabled for the user\",\n+        null,\n+        environment.projectId,\n+        false));\n+    createFeature(new FlagsmithTestHelper.FlagFeature(\n+        \"Other Flag\",\n+        null,\n+        environment.projectId,\n+        false));\n+\n+    user1 = featureUser(\"mr-user-1\");\n+    user2 = featureUser(\"mr-user-2\");\n+    user3 = featureUser(\"mr-user-3\");\n+\n+    userId1 = createUserIdentity(user1.getIdentifier(), environment.apiKey);\n+    userId2 = createUserIdentity(user2.getIdentifier(), environment.apiKey);\n+    userId3 = createUserIdentity(user3.getIdentifier(), environment.apiKey);\n+\n+    switchFlagForUser(featureId, userId2, user2feature1initValue, environment.apiKey);\n+\n+    assignTraitToUserIdentity(user2.getIdentifier(), user2traitKey, user2traitVal, environment.apiKey);\n+    assignTraitToUserIdentity(\"mr-user-999\", \"foo2\", \"yyy\", environment.apiKey);\n+\n+    clientCache = environment.client.getCache();\n+    assertNotNull(clientCache);\n+    assertEquals(0, clientCache.estimatedSize());\n+  }\n+\n+  @AfterMethod(groups = \"integration\")\n+  public void cleanUp() {\n+    clientCache.invalidateAll();\n+    assertEquals(0, clientCache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Stats_Disabled_Then_All_Values_Zero() {\n+    CacheStats cacheStats = clientCache.stats();\n+    assertNotNull(cacheStats);\n+    assertEquals(0, cacheStats.loadCount());\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Invalidate_All_Cache_Then_Cache_Empty() {\n+    environment.client.getUserFlagsAndTraits(user1);\n+    environment.client.getUserFlagsAndTraits(user2);\n+    assertEquals(2, clientCache.estimatedSize());\n+\n+    clientCache.invalidateAll();\n+    assertEquals(0, clientCache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Invalidate_Single_Cache_Entry_Then_Remaining_Cache_OK() {\n+    environment.client.getUserFlagsAndTraits(user1);\n+    environment.client.getFeatureFlags(user2);\n+    assertEquals(2, clientCache.estimatedSize());\n+\n+    clientCache.invalidate(user1.getIdentifier());\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNull(clientCache.getIfPresent(user1.getIdentifier()));\n+    assertNotNull(clientCache.getIfPresent(user2.getIdentifier()));\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Cache_Max_Size_Then_Entry_Replaced() {\n+    // Act: cache populated with 1 entry\n+    environment.client.getUserFlagsAndTraits(user1);\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(clientCache.getIfPresent(user1.getIdentifier()));\n+\n+    // Act: cache populated with 2 entries\n+    environment.client.getFeatureFlags(user2);\n+    assertEquals(2, clientCache.estimatedSize());\n+    assertNotNull(clientCache.getIfPresent(user1.getIdentifier()));\n+    assertNotNull(clientCache.getIfPresent(user2.getIdentifier()));\n+\n+    // Act: cache remains with 2 entries\n+    environment.client.getUserFlagsAndTraits(user3);\n+    clientCache.cleanUp();\n+    assertEquals(2, clientCache.estimatedSize());\n+    assertNull(clientCache.getIfPresent(user1.getIdentifier()));\n+    assertNotNull(clientCache.getIfPresent(user2.getIdentifier()));\n+    assertNotNull(clientCache.getIfPresent(user3.getIdentifier()));\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_Project_Flags_Then_Not_Cached() {\n+    assertEquals(0, clientCache.estimatedSize());\n+\n+    final List<Flag> featureFlags = environment.client.getFeatureFlags();\n+\n+    assertEquals(0, clientCache.estimatedSize());\n+    assertNotNull(featureFlags);\n+    assertThat(featureFlags)\n+        .hasSize(2)\n+        .containsExactlyInAnyOrder(\n+            flag(\"Flag to be enabled for the user\", null, false),\n+            flag(\"Other Flag\", null, false)\n+        );\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_User_Flags_Then_Reuses_Cache_Entry() {\n+    final List<Flag> featureFlags1 = environment.client.getFeatureFlags(user1);\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(featureFlags1);\n+\n+    final List<Flag> featureFlags1Again = environment.client.getFeatureFlags(user1);\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(featureFlags1Again);\n+    assertEquals(featureFlags1, featureFlags1Again);\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_User_Flags_Then_Refetches_Only_If_Not_Present() {\n+    final List<Flag> featureFlags1 = environment.client.getFeatureFlags(user1);\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(featureFlags1);\n+\n+    createFeature(new FlagsmithTestHelper.FlagFeature(\n+        \"a-new-flag\",\n+        null,\n+        environment.projectId,\n+        false));\n+\n+    final List<Flag> featureFlags1Again = environment.client.getFeatureFlags(user1);\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(featureFlags1Again);\n+    assertEquals(featureFlags1, featureFlags1Again);\n+\n+    clientCache.invalidate(user1.getIdentifier());\n+\n+    final List<Flag> updatedFlags1 = environment.client.getFeatureFlags(user1);\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(updatedFlags1);\n+    assertNotEquals(featureFlags1, updatedFlags1);\n+    assertThat(updatedFlags1)\n+        .hasSize(3)\n+        .containsExactlyInAnyOrder(\n+            flag(\"a-new-flag\", null, false),\n+            flag(\"Flag to be enabled for the user\", null, false),\n+            flag(\"Other Flag\", null, false)\n+        );\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_User_Traits_And_Flags_Then_Reuses_Cache_Entry() {\n+    final FlagsAndTraits flagsAndTraits1 = environment.client.getUserFlagsAndTraits(user1);\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(flagsAndTraits1);\n+\n+    createFeature(new FlagsmithTestHelper.FlagFeature(\n+        \"a-new-flag\",\n+        null,\n+        environment.projectId,\n+        false));\n+\n+    final FlagsAndTraits flagsAndTraits1Again = environment.client.getUserFlagsAndTraits(user1);\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(flagsAndTraits1Again);\n+    assertEquals(flagsAndTraits1, flagsAndTraits1Again);\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_User_Traits_And_Flags_Then_Refetches_Only_If_Not_Present() {\n+    // Cache populated with 2 entries\n+    environment.client.getUserFlagsAndTraits(user3);\n+    final FlagsAndTraits flagsAndTraitsFromApi1stCall = environment.client.getUserFlagsAndTraits(user2);\n+    assertEquals(2, clientCache.estimatedSize());\n+\n+    assertNotNull(flagsAndTraitsFromApi1stCall);\n+    assertThat(flagsAndTraitsFromApi1stCall.getFlags())\n+        .hasSize(2)\n+        .containsExactlyInAnyOrder(\n+            flag(\"Flag to be enabled for the user\", null, true),\n+            flag(\"Other Flag\", null, false)\n+        );\n+    assertThat(flagsAndTraitsFromApi1stCall.getTraits())\n+        .hasSize(1)\n+        .contains(trait(null, user2traitKey, user2traitVal));\n+\n+    // Modify existing flag value and assign a new trait to user 2 in the API\n+    final boolean newFlagValue = !user2feature1initValue;\n+    switchFlagForUser(featureId, userId2, newFlagValue, environment.apiKey);\n+    assignTraitToUserIdentity(\"mr-user-2\", \"trait2\", \"new-trait-val\", environment.apiKey);\n+\n+    // Get flags from cache instead of reading new values from API\n+    final FlagsAndTraits flagsAndTraitsFromCache2ndCall = environment.client.getUserFlagsAndTraits(user2);\n+    assertEquals(2, clientCache.estimatedSize());\n+    assertEquals(flagsAndTraitsFromApi1stCall, flagsAndTraitsFromCache2ndCall);\n+\n+    // Clean cache should fetch new flag value and traits\n+    clientCache.invalidate(\"mr-user-2\");\n+    assertEquals(1, clientCache.estimatedSize());\n+    final FlagsAndTraits flagsAndTraitsFromApi3rdCall = environment.client.getUserFlagsAndTraits(user2);\n+    assertEquals(2, clientCache.estimatedSize());\n+    assertNotEquals(flagsAndTraitsFromApi3rdCall, flagsAndTraitsFromCache2ndCall);\n+\n+    assertNotNull(flagsAndTraitsFromApi3rdCall);\n+    assertThat(flagsAndTraitsFromApi3rdCall.getFlags())\n+        .hasSize(2)\n+        .containsExactlyInAnyOrder(\n+            flag(\"Flag to be enabled for the user\", null, newFlagValue),\n+            flag(\"Other Flag\", null, false)\n+        );\n+    assertThat(flagsAndTraitsFromApi3rdCall.getTraits())\n+        .hasSize(2)\n+        .containsExactlyInAnyOrder(\n+            trait(null, user2traitKey, user2traitVal),\n+            trait(null, \"trait2\", \"new-trait-val\")\n+        );\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_User_Trait_Update_Then_Cached() {\n+    assertEquals(0, clientCache.estimatedSize());\n+\n+    final Trait trait1 = environment.client.getTrait(user2, user2traitKey);\n+\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertNotNull(trait1);\n+    assertEquals(user2traitKey, trait1.getKey());\n+    assertEquals(user2traitVal, trait1.getValue());\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_User_Trait_Update_Then_Not_Cached() {\n+    final String traitKey = user2traitKey;\n+\n+    environment.client.updateTrait(user2, trait(user2.getIdentifier(), traitKey, \"new value\"));\n+    assertEquals(0, clientCache.estimatedSize());\n+\n+    assertThat(environment.client.getTrait(user2, traitKey))\n+        .isEqualTo(trait(null, traitKey, \"new value\"));\n+    assertEquals(1, clientCache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_User_Trait_Update_Then_Updated_Although_Cached() {\n+    // Arrange\n+    assignTraitToUserIdentity(user2.getIdentifier(), \"unchanged\", \"stable-value\", environment.apiKey);\n+\n+    assertThat(environment.client.getTrait(user2, user2traitKey))\n+        .isEqualTo(trait(null, user2traitKey, user2traitVal));\n+    assertEquals(1, clientCache.estimatedSize());\n+\n+    // Act\n+    environment.client.updateTrait(user2, trait(user2.getIdentifier(), user2traitKey, \"new value\"));\n+    assertEquals(0, clientCache.estimatedSize());\n+\n+    // Assert\n+    assertThat(environment.client.getTrait(user2, user2traitKey))\n+        .isEqualTo(trait(null, user2traitKey, \"new value\"));\n+    assertEquals(1, clientCache.estimatedSize());\n+\n+    assertThat(environment.client.getTrait(user2, \"unchanged\"))\n+        .isEqualTo(trait(null, \"unchanged\", \"stable-value\"));\n+    assertEquals(1, clientCache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Get_User_Trait_Update_Then_Dont_Update_When_Trait_Unchanged() {\n+    // Arrange\n+    final String traitValNew = \"new-val\";\n+\n+    // get and cache value from API\n+    assertThat(environment.client.getTrait(user2, user2traitKey))\n+        .isEqualTo(trait(null, user2traitKey, user2traitVal));\n+    assertEquals(1, clientCache.estimatedSize());\n+\n+    // modify value in API only, old value still cached\n+    assignTraitToUserIdentity(user2.getIdentifier(), user2traitKey, traitValNew, environment.apiKey);\n+    assignTraitToUserIdentity(user2.getIdentifier(), \"unchanged\", \"stable-value\", environment.apiKey);\n+\n+    // cache remains the same\n+    environment.client.updateTrait(user2, trait(user2.getIdentifier(), user2traitKey, user2traitVal));\n+    assertEquals(1, clientCache.estimatedSize());\n+\n+    // get cached old value\n+    assertThat(environment.client.getTrait(user2, user2traitKey))\n+        .isEqualTo(trait(null, user2traitKey, user2traitVal));\n+    assertEquals(1, clientCache.estimatedSize());\n+    clientCache.invalidateAll();\n+    assertEquals(0, clientCache.estimatedSize());\n+\n+    // get new value from API\n+    assertThat(environment.client.getTrait(user2, user2traitKey))\n+        .isEqualTo(trait(null, user2traitKey, traitValNew));\n+    assertEquals(1, clientCache.estimatedSize());\n+\n+    assertThat(environment.client.getTrait(user2, \"unchanged\"))\n+        .isEqualTo(trait(null, \"unchanged\", \"stable-value\"));\n+    assertEquals(1, clientCache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"integration\")\n+  public void testClient_When_Add_Traits_For_Identity_Then_Success() {\n+    List<Trait> traits = environment.client.identifyUserWithTraits(user2, Arrays.asList(\n+        trait(null, \"trait_1\", \"some value1\"),\n+        trait(null, \"trait_2\", \"some value2\")));\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertThat(traits)\n+        .hasSize(3)\n+        .containsExactlyInAnyOrder(\n+            trait(null, user2traitKey, user2traitVal),\n+            trait(null, \"trait_1\", traitValueWhenUserAlreadyExists(\"some value1\")),\n+            trait(null, \"trait_2\", traitValueWhenUserAlreadyExists(\"some value2\"))\n+        );\n+\n+    traits = environment.client.identifyUserWithTraits(user2, Arrays.asList(\n+        trait(null, \"trait_1\", \"updated value1\"),\n+        trait(null, \"trait_2\", \"updated value2\"),\n+        trait(null, \"trait_3\", \"updated value3\")));\n+    assertEquals(1, clientCache.estimatedSize());\n+    assertThat(traits)\n+        .hasSize(4)\n+        .containsExactlyInAnyOrder(\n+            trait(null, user2traitKey, user2traitVal),\n+            trait(null, \"trait_1\", traitValueWhenUserAlreadyExists(\"updated value1\")),\n+            trait(null, \"trait_2\", traitValueWhenUserAlreadyExists(\"updated value2\")),\n+            trait(null, \"trait_3\", traitValueWhenUserAlreadyExists(\"updated value3\"))\n+        );\n+  }\n+}"
  },
  {
    "sha": "e1b404aed47c423f329f6e554d58e29888d0f1ed",
    "filename": "src/test/java/com/flagsmith/FlagsmithCachedEndpointsTest.java",
    "status": "added",
    "additions": 357,
    "deletions": 0,
    "changes": 357,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithCachedEndpointsTest.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithCachedEndpointsTest.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/FlagsmithCachedEndpointsTest.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,357 @@\n+package com.flagsmith;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.assertThrows;\n+\n+@Test(groups = \"unit\")\n+public class FlagsmithCachedEndpointsTest {\n+\n+  private FlagsmithCachedEndpoints sut;\n+  private FlagsmithCacheConfig.FlagsmithInternalCache flagsmithInternalCache;\n+  private FlagsmithEndpoints flagsmithEndpoints;\n+  private FlagsmithLogger flagsmithLogger;\n+  private Cache<String, FlagsAndTraits> cache;\n+\n+  @BeforeMethod(groups = \"unit\")\n+  public void init() {\n+    flagsmithInternalCache = mock(FlagsmithCacheConfig.FlagsmithInternalCache.class);\n+    flagsmithEndpoints = mock(FlagsmithEndpoints.class);\n+    sut = new FlagsmithCachedEndpoints(flagsmithInternalCache, flagsmithEndpoints);\n+\n+    cache = Caffeine.newBuilder().maximumSize(2).build();\n+    when(flagsmithInternalCache.getCache()).thenReturn(cache);\n+\n+    flagsmithLogger = mock(FlagsmithLogger.class);\n+    when(flagsmithEndpoints.getLogger()).thenReturn(flagsmithLogger);\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void getFeatureFlags_noCachingProjectFlags() {\n+    // Arrange\n+    final FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    when(flagsmithEndpoints.getFeatureFlags(null, true)).thenReturn(flagsAndTraits);\n+\n+    // Act\n+    final FlagsAndTraits actualFeatureFlags = sut.getFeatureFlags(null, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(1)).getFeatureFlags(eq(null), eq(true));\n+    verify(flagsmithInternalCache, times(0)).getCache();\n+    assertEquals(flagsAndTraits, actualFeatureFlags);\n+    assertEquals(0, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void getFeatureFlags_nullIdentifier() {\n+    // Act\n+    final FeatureUser user = new FeatureUser();\n+    assertThrows(IllegalArgumentException.class, () -> sut.getFeatureFlags(user, true));\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).getFeatureFlags(any(), anyBoolean());\n+    verify(flagsmithInternalCache, times(0)).getCache();\n+    assertEquals(0, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void getFeatureFlags_fetchFlagsFromFlagsmithAndStoreThemInCache() {\n+    // Arrange\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    when(flagsmithEndpoints.getFeatureFlags(user, true)).thenReturn(flagsAndTraits);\n+\n+    // Act\n+    final FlagsAndTraits actualFeatureFlags = sut.getFeatureFlags(user, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(1)).getFeatureFlags(eq(user), eq(true));\n+    verify(flagsmithInternalCache, times(1)).getCache();\n+    assertEquals(flagsAndTraits, cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(flagsAndTraits, actualFeatureFlags);\n+    assertEquals(1, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void getFeatureFlags_fetchFlagsFromCacheAndNotFromFlagsmith() {\n+    // Arrange\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    cache.put(user.getIdentifier(), flagsAndTraits);\n+\n+    // Act\n+    final FlagsAndTraits actualFeatureFlags = sut.getFeatureFlags(user, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).getFeatureFlags(any(), anyBoolean());\n+    verify(flagsmithInternalCache, times(1)).getCache();\n+    assertEquals(flagsAndTraits, cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(flagsAndTraits, actualFeatureFlags);\n+    assertEquals(1, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void getUserFlagsAndTraits_nullUser() {\n+    // Act\n+    assertThrows(IllegalArgumentException.class, () -> sut.getUserFlagsAndTraits(null, true));\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).getUserFlagsAndTraits(any(), anyBoolean());\n+    verify(flagsmithInternalCache, times(0)).getCache();\n+    assertEquals(0, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void getUserFlagsAndTraits_nullUserIdentifier() {\n+    // Act\n+    assertThrows(IllegalArgumentException.class, () -> sut.getUserFlagsAndTraits(new FeatureUser(), true));\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).getUserFlagsAndTraits(any(), anyBoolean());\n+    verify(flagsmithInternalCache, times(0)).getCache();\n+    assertEquals(0, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void getUserFlagsAndTraits_fetchFlagsFromFlagsmithAndStoreThemInCache() {\n+    // Arrange\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    when(flagsmithEndpoints.getUserFlagsAndTraits(user, true)).thenReturn(flagsAndTraits);\n+\n+    // Act\n+    final FlagsAndTraits actualUserFlagsAndTraits = sut.getUserFlagsAndTraits(user, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(1)).getUserFlagsAndTraits(eq(user), eq(true));\n+    verify(flagsmithInternalCache, times(1)).getCache();\n+    assertEquals(flagsAndTraits, cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(flagsAndTraits, actualUserFlagsAndTraits);\n+    assertEquals(1, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void getUserFlagsAndTraits_fetchFlagsFromCacheAndNotFromFlagsmith() {\n+    // Arrange\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    cache.put(user.getIdentifier(), flagsAndTraits);\n+\n+    // Act\n+    final FlagsAndTraits actualUserFlagsAndTraits = sut.getUserFlagsAndTraits(user, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).getUserFlagsAndTraits(any(), anyBoolean());\n+    verify(flagsmithInternalCache, times(1)).getCache();\n+    assertEquals(flagsAndTraits, cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(flagsAndTraits, actualUserFlagsAndTraits);\n+    assertEquals(1, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void postUserTraits_nullUser() {\n+    // Act\n+    assertThrows(IllegalArgumentException.class, () -> sut.postUserTraits(null, new Trait(), true));\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).postUserTraits(any(), any(), anyBoolean());\n+    verify(flagsmithEndpoints, times(0)).getLogger();\n+    verify(flagsmithInternalCache, times(0)).getCache();\n+    assertEquals(0, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void postUserTraits_nullUserIdentifier() {\n+    // Act\n+    assertThrows(IllegalArgumentException.class, () -> sut.postUserTraits(new FeatureUser(), new Trait(), true));\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).postUserTraits(any(), any(), anyBoolean());\n+    verify(flagsmithEndpoints, times(0)).getLogger();\n+    verify(flagsmithInternalCache, times(0)).getCache();\n+    assertEquals(0, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void postUserTraits_updateBecauseTraitValueNotInCache() {\n+    // Arrange\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final Trait oldTrait = new Trait();\n+    oldTrait.setKey(\"old-key\");\n+    oldTrait.setValue(\"old-val\");\n+\n+    final Trait newTrait = new Trait();\n+    newTrait.setKey(\"old-key\");\n+    newTrait.setValue(\"new-val\");\n+\n+    when(flagsmithEndpoints.postUserTraits(user, oldTrait, true)).thenReturn(newTrait);\n+\n+    // Act\n+    final Trait actualTrait = sut.postUserTraits(user, oldTrait, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(1)).postUserTraits(eq(user), eq(oldTrait), eq(true));\n+    verify(flagsmithEndpoints, times(0)).getLogger();\n+    verify(flagsmithInternalCache, times(2)).getCache();\n+    assertNull(cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(0, cache.estimatedSize());\n+    assertEquals(newTrait, actualTrait);\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void postUserTraits_updateBecauseTraitValueHasChangedFromCache() {\n+    // Arrange\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final Trait oldTrait = new Trait();\n+    oldTrait.setKey(\"old-key\");\n+    oldTrait.setValue(\"old-val\");\n+\n+    final Trait newTrait = new Trait();\n+    newTrait.setKey(\"old-key\");\n+    newTrait.setValue(\"new-val\");\n+\n+    final FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    cache.put(user.getIdentifier(), flagsAndTraits);\n+    assertEquals(1, cache.estimatedSize());\n+\n+    when(flagsmithEndpoints.postUserTraits(user, oldTrait, true)).thenReturn(newTrait);\n+\n+    // Act\n+    final Trait actualTrait = sut.postUserTraits(user, oldTrait, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(1)).postUserTraits(eq(user), eq(oldTrait), eq(true));\n+    verify(flagsmithEndpoints, times(0)).getLogger();\n+    verify(flagsmithInternalCache, times(2)).getCache();\n+    assertNull(cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(0, cache.estimatedSize());\n+    assertEquals(newTrait, actualTrait);\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void postUserTraits_doNotUpdateBecauseTraitValueHasNotChangedFromCache() {\n+    // Arrange\n+    final Trait newTrait = new Trait();\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final Trait oldTrait = new Trait();\n+    oldTrait.setKey(\"old-key\");\n+    oldTrait.setValue(\"old-val\");\n+\n+    final FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    flagsAndTraits.setTraits(new ArrayList<>());\n+    flagsAndTraits.getTraits().add(oldTrait);\n+    cache.put(user.getIdentifier(), flagsAndTraits);\n+    assertEquals(1, cache.estimatedSize());\n+\n+    when(flagsmithEndpoints.postUserTraits(user, oldTrait, true)).thenReturn(newTrait);\n+\n+    // Act\n+    final Trait actualTrait = sut.postUserTraits(user, oldTrait, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).postUserTraits(any(), any(), anyBoolean());\n+    verify(flagsmithEndpoints, times(1)).getLogger();\n+    verify(flagsmithInternalCache, times(1)).getCache();\n+    assertEquals(flagsAndTraits, cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(1, cache.estimatedSize());\n+    assertEquals(oldTrait, actualTrait);\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void identifyUserWithTraits_nullUser() {\n+    // Act\n+    assertThrows(IllegalArgumentException.class, () -> sut.identifyUserWithTraits(null, new ArrayList<>(), true));\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).identifyUserWithTraits(any(), any(), anyBoolean());\n+    verify(flagsmithInternalCache, times(0)).getCache();\n+    assertEquals(0, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void identifyUserWithTraits_nullUserIdentifier() {\n+    // Act\n+    assertThrows(IllegalArgumentException.class, () -> sut.identifyUserWithTraits(new FeatureUser(), new ArrayList<>(), true));\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(0)).identifyUserWithTraits(any(), any(), anyBoolean());\n+    verify(flagsmithInternalCache, times(0)).getCache();\n+    assertEquals(0, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void identifyUserWithTraits_fetchFlagsFromFlagsmithAndStoreThemInCache() {\n+    // Arrange\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final ArrayList<Trait> traits = new ArrayList<>();\n+\n+    final FlagsAndTraits flagsAndTraits = new FlagsAndTraits();\n+    when(flagsmithEndpoints.identifyUserWithTraits(user, traits, true)).thenReturn(flagsAndTraits);\n+\n+    // Act\n+    final FlagsAndTraits actualUserFlagsAndTraits = sut.identifyUserWithTraits(user, traits, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(1)).identifyUserWithTraits(eq(user), eq(traits), eq(true));\n+    verify(flagsmithInternalCache, times(1)).getCache();\n+    assertEquals(flagsAndTraits, cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(flagsAndTraits, actualUserFlagsAndTraits);\n+    assertEquals(1, cache.estimatedSize());\n+  }\n+\n+  @Test(groups = \"unit\")\n+  public void identifyUserWithTraits_fetchFlagsFromFlagsmithEvenIfInCache() {\n+    // Arrange\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(\"test-user\");\n+\n+    final ArrayList<Trait> traits = new ArrayList<>();\n+\n+    final FlagsAndTraits oldFlags = new FlagsAndTraits();\n+    oldFlags.setTraits(traits);\n+    cache.put(user.getIdentifier(), oldFlags);\n+\n+    final FlagsAndTraits newFlags = new FlagsAndTraits();\n+    when(flagsmithEndpoints.identifyUserWithTraits(user, traits, true)).thenReturn(newFlags);\n+\n+    // Act\n+    final FlagsAndTraits actualUserFlagsAndTraits = sut.identifyUserWithTraits(user, traits, true);\n+\n+    // Assert\n+    verify(flagsmithEndpoints, times(1)).identifyUserWithTraits(any(), eq(traits), eq(true));\n+    verify(flagsmithInternalCache, times(1)).getCache();\n+    assertEquals(newFlags, cache.getIfPresent(user.getIdentifier()));\n+    assertEquals(newFlags, actualUserFlagsAndTraits);\n+    assertEquals(1, cache.estimatedSize());\n+  }\n+}"
  },
  {
    "sha": "c2260312d5778678554673ff2276d994abb618b7",
    "filename": "src/test/java/com/flagsmith/FlagsmithClientHttpErrorsTest.java",
    "status": "modified",
    "additions": 63,
    "deletions": 33,
    "changes": 96,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithClientHttpErrorsTest.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithClientHttpErrorsTest.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/FlagsmithClientHttpErrorsTest.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -1,10 +1,11 @@\n package com.flagsmith;\n \n-import java.util.Collections;\n-import org.testng.annotations.BeforeTest;\n+import org.junit.Assert;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n \n@@ -22,7 +23,7 @@\n     }};\n     FlagsmithClient flagsmithClient;\n \n-    @BeforeTest\n+    @BeforeMethod(groups = \"integration-offline\")\n     public void init() {\n         flagsmithClient = FlagsmithClient.newBuilder()\n                 .setApiKey(API_KEY)\n@@ -32,15 +33,15 @@ public void init() {\n                 .build();\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_Features_Then_Empty() {\n         List<Flag> featureFlags = flagsmithClient.getFeatureFlags();\n \n         assertNotNull(featureFlags, \"Should feature flags back\");\n         assertTrue(featureFlags.isEmpty(), \"Should not have test featureFlags back\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_Features_For_User_Then_Empty() {\n         // context user\n         FeatureUser user = new FeatureUser();\n@@ -52,7 +53,7 @@ public void testClient_When_Get_Features_For_User_Then_Empty() {\n         assertTrue(featureFlags.isEmpty(), \"Should not have test featureFlags back\");\n     }\n \n-    @Test(groups = \"integration\", expectedExceptions = FlagsmithException.class)\n+    @Test(groups = \"integration-offline\", expectedExceptions = FlagsmithException.class)\n     public void testClient_When_Get_Features_For_User_Then_Throw() {\n         // context user\n         FeatureUser user = new FeatureUser();\n@@ -61,53 +62,58 @@ public void testClient_When_Get_Features_For_User_Then_Throw() {\n         flagsmithClient.getFeatureFlags(user, true);\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Traits_Then_Null() {\n         // context user\n         FeatureUser user = new FeatureUser();\n         user.setIdentifier(\"another_user\");\n \n         List<Trait> userTraits = flagsmithClient.getTraits(user);\n \n-        assertNull(userTraits, \"Should have user traits back\");\n+        assertNotNull(userTraits, \"Should not have null user traits back\");\n+        assertTrue(userTraits.isEmpty(), \"Should not have user traits back\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Traits_For_Keys_Then_Null() {\n         // context user\n         FeatureUser user = new FeatureUser();\n         user.setIdentifier(\"another_user\");\n \n         List<Trait> userTraits = flagsmithClient.getTraits(user, \"cookies_key\");\n \n-        assertNull(userTraits, \"Should have user traits back\");\n+        assertNotNull(userTraits, \"Should not have null user traits back\");\n+        assertTrue(userTraits.isEmpty(), \"Should not have user traits back\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Traits_For_Invalid_User_Then_Return_Null() {\n         // context user\n         FeatureUser user = new FeatureUser();\n         user.setIdentifier(\"invalid_users_another_user\");\n \n         List<Trait> userTraits = flagsmithClient.getTraits(user);\n \n-        assertNull(userTraits, \"Should have user traits back\");\n+        assertNotNull(userTraits, \"Should not have null user traits back\");\n+        assertTrue(userTraits.isEmpty(), \"Should not have user traits back\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Traits_And_Flags_For_Keys_Then_Null_Lists() {\n         // context user\n         FeatureUser user = new FeatureUser();\n         user.setIdentifier(\"another_user\");\n \n         FlagsAndTraits userFlagsAndTraits = flagsmithClient.getUserFlagsAndTraits(user);\n \n-        assertNotNull(userFlagsAndTraits, \"Should have user traits and flags back\");\n-        assertNull(userFlagsAndTraits.getFlags(), \"Should not have user flags back\");\n-        assertNull(userFlagsAndTraits.getTraits(), \"Should not have user traits back\");\n+        assertNotNull(userFlagsAndTraits, \"Should have user traits and flags back, not null\");\n+        assertNotNull(userFlagsAndTraits.getFlags(), \"Should not have null user flags back\");\n+        assertTrue(userFlagsAndTraits.getFlags().isEmpty(), \"Should not have user flags back\");\n+        assertNotNull(userFlagsAndTraits.getTraits(), \"Should not have null user traits back\");\n+        assertTrue(userFlagsAndTraits.getTraits().isEmpty(), \"Should not have user traits back\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Traits_And_Flags_For_Invalid_User_Then_Return_Null_Lists() {\n         // context user\n         FeatureUser user = new FeatureUser();\n@@ -116,11 +122,13 @@ public void testClient_When_Get_User_Traits_And_Flags_For_Invalid_User_Then_Retu\n         FlagsAndTraits userFlagsAndTraits = flagsmithClient.getUserFlagsAndTraits(user);\n \n         assertNotNull(userFlagsAndTraits, \"Should have user traits and flags back, not null\");\n-        assertNull(userFlagsAndTraits.getFlags(), \"Should not have user flags back\");\n-        assertNull(userFlagsAndTraits.getTraits(), \"Should not have no user traits back\");\n+        assertNotNull(userFlagsAndTraits.getFlags(), \"Should not have null user flags back\");\n+        assertTrue(userFlagsAndTraits.getFlags().isEmpty(), \"Should not have user flags back\");\n+        assertNotNull(userFlagsAndTraits.getTraits(), \"Should not have null user traits back\");\n+        assertTrue(userFlagsAndTraits.getTraits().isEmpty(), \"Should not have user traits back\");\n     }\n \n-    @Test(groups = \"integration\", expectedExceptions = FlagsmithException.class)\n+    @Test(groups = \"integration-offline\", expectedExceptions = FlagsmithException.class)\n     public void testClient_When_Get_User_Traits_And_Flags_Then_Throw() {\n         // context user\n         FeatureUser user = new FeatureUser();\n@@ -129,7 +137,7 @@ public void testClient_When_Get_User_Traits_And_Flags_Then_Throw() {\n         flagsmithClient.getUserFlagsAndTraits(user, true);\n     }\n \n-    @Test(groups = \"integration\", expectedExceptions = FlagsmithException.class)\n+    @Test(groups = \"integration-offline\", expectedExceptions = FlagsmithException.class)\n     public void testClient_When_Get_User_Traits_And_Flags_Then_Throw_evenIfLoggingDisabled() {\n         // context user\n         FeatureUser user = new FeatureUser();\n@@ -144,7 +152,21 @@ public void testClient_When_Get_User_Traits_And_Flags_Then_Throw_evenIfLoggingDi\n         flagsmithClient.getUserFlagsAndTraits(user, true);\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\", expectedExceptions = FlagsmithException.class)\n+    public void testClient_When_Cached_Get_User_Traits_And_Flags_Then_Throw() {\n+        FeatureUser user = new FeatureUser();\n+        user.setIdentifier(\"another_user\");\n+\n+        flagsmithClient = FlagsmithClient.newBuilder()\n+            .setApiKey(API_KEY)\n+            .withApiUrl(\"http://bad-url\")\n+            .withCache(FlagsmithCacheConfig.newBuilder().build())\n+            .build();\n+\n+        flagsmithClient.getUserFlagsAndTraits(user, true);\n+    }\n+\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Trait_From_Traits_And_Flags_For_Keys_Then_Null() {\n         // context user\n         FeatureUser user = new FeatureUser();\n@@ -157,20 +179,21 @@ public void testClient_When_Get_User_Trait_From_Traits_And_Flags_For_Keys_Then_N\n         assertNull(userTrait, \"Should not have user traits back\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Traits_From_Traits_And_Flags_For_Keys_Then_Null() {\n         // context user\n         FeatureUser user = new FeatureUser();\n         user.setIdentifier(\"another_user\");\n \n         FlagsAndTraits userFlagsAndTraits = flagsmithClient.getUserFlagsAndTraits(user);\n \n-        List<Trait> traits = FlagsmithClient.getTraits(userFlagsAndTraits, \"cookies_key\");\n+        List<Trait> userTraits = FlagsmithClient.getTraits(userFlagsAndTraits, \"cookies_key\");\n \n-        assertNull(traits, \"Should not have user traits back\");\n+        assertNotNull(userTraits, \"Should not have null user traits back\");\n+        assertTrue(userTraits.isEmpty(), \"Should not have user traits back\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_FLag_Value_From_Traits_And_Flags_For_Keys_Then_Null() {\n         // context user\n         FeatureUser user = new FeatureUser();\n@@ -183,7 +206,7 @@ public void testClient_When_Get_User_FLag_Value_From_Traits_And_Flags_For_Keys_T\n         assertNull(featureFlagValue, \"Should not have feature\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_FLag_Enabled_From_Traits_And_Flags_For_Keys_Then_False() {\n         // context user\n         FeatureUser user = new FeatureUser();\n@@ -196,7 +219,7 @@ public void testClient_When_Get_User_FLag_Enabled_From_Traits_And_Flags_For_Keys\n         assertFalse(enabled, \"Should not have feature enabled\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Trait_Then_Null() {\n         FeatureUser user = new FeatureUser();\n         user.setIdentifier(\"another_user\");\n@@ -207,7 +230,7 @@ public void testClient_When_Get_User_Trait_Then_Null() {\n     }\n \n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Get_User_Trait_Update_Then_Null() {\n         FeatureUser user = new FeatureUser();\n         user.setIdentifier(\"another_user\");\n@@ -221,7 +244,7 @@ public void testClient_When_Get_User_Trait_Update_Then_Null() {\n     }\n \n \n-    @Test(groups = \"integration\", expectedExceptions = FlagsmithException.class)\n+    @Test(groups = \"integration-offline\", expectedExceptions = FlagsmithException.class)\n     public void testClient_When_Get_User_Trait_Update_Then_Throw() {\n         FeatureUser user = new FeatureUser();\n         user.setIdentifier(\"another_user\");\n@@ -233,7 +256,7 @@ public void testClient_When_Get_User_Trait_Update_Then_Throw() {\n         flagsmithClient.updateTrait(user, userTrait, true);\n     }\n \n-    @Test(expectedExceptions = IllegalArgumentException.class, groups = \"integration\")\n+    @Test(expectedExceptions = IllegalArgumentException.class, groups = \"integration-offline\")\n     public void testClient_When_Add_Traits_For_Identity_With_Missing_Identity_Then_Failed() {\n         // Given traits and no user Identity\n         Trait trait1 = new Trait();\n@@ -248,7 +271,7 @@ public void testClient_When_Add_Traits_For_Identity_With_Missing_Identity_Then_F\n         assertTrue(traits.size() == 0, \"Should not return any traits\");\n     }\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"integration-offline\")\n     public void testClient_When_Add_Traits_For_Identity_Then_Success() {\n         // Given\n         FeatureUser user = new FeatureUser();\n@@ -269,7 +292,7 @@ public void testClient_When_Add_Traits_For_Identity_Then_Success() {\n         assertTrue(traits.isEmpty(), \"Should not have traits returned\");\n     }\n \n-    @Test(groups = \"integration\", expectedExceptions = FlagsmithException.class)\n+    @Test(groups = \"integration-offline\", expectedExceptions = FlagsmithException.class)\n     public void testClient_When_Add_Traits_For_Identity_Then_Throw() {\n         // Given\n         FeatureUser user = new FeatureUser();\n@@ -282,4 +305,11 @@ public void testClient_When_Add_Traits_For_Identity_Then_Throw() {\n         // When\n         flagsmithClient.identifyUserWithTraits(user,  Arrays.asList(trait1), true);\n     }\n+\n+    @Test(groups = \"integration-offline\")\n+    public void testClient_When_Cache_Disabled_Return_Null() {\n+        FlagsmithCache cache = flagsmithClient.getCache();\n+\n+        Assert.assertNull(cache);\n+    }\n }"
  },
  {
    "sha": "d71507028168cbcde8a5480e45463f61b0b1d5ed",
    "filename": "src/test/java/com/flagsmith/FlagsmithClientTest.java",
    "status": "modified",
    "additions": 91,
    "deletions": 402,
    "changes": 493,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithClientTest.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithClientTest.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/FlagsmithClientTest.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -1,113 +1,55 @@\n package com.flagsmith;\n \n-import com.google.common.collect.ImmutableMap;\n-import io.restassured.RestAssured;\n-import io.restassured.http.Header;\n-import io.restassured.http.Headers;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.testcontainers.containers.GenericContainer;\n-import org.testcontainers.containers.Network;\n-import org.testcontainers.containers.PostgreSQLContainer;\n-import org.testcontainers.containers.output.Slf4jLogConsumer;\n-import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n-import org.testcontainers.utility.DockerImageName;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n \n+import static com.flagsmith.FlagsmithTestHelper.assignTraitToUserIdentity;\n+import static com.flagsmith.FlagsmithTestHelper.config;\n+import static com.flagsmith.FlagsmithTestHelper.createFeature;\n+import static com.flagsmith.FlagsmithTestHelper.createProjectEnvironment;\n+import static com.flagsmith.FlagsmithTestHelper.createUserIdentity;\n+import static com.flagsmith.FlagsmithTestHelper.featureUser;\n+import static com.flagsmith.FlagsmithTestHelper.flag;\n+import static com.flagsmith.FlagsmithTestHelper.switchFlag;\n+import static com.flagsmith.FlagsmithTestHelper.switchFlagForUser;\n+import static com.flagsmith.FlagsmithTestHelper.trait;\n+import static com.flagsmith.FlagsmithTestHelper.traitValueWhenUserAlreadyExists;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.Assert.assertNull;\n \n /**\n  * Unit tests are env specific and will probably will need to adjust keys, identities and\n  * features ids etc as required.\n  */\n @Test(groups = \"integration\")\n public class FlagsmithClientTest {\n-    private static final Logger log = LoggerFactory.getLogger(FlagsmithClientTest.class);\n-\n-    private static final Network network = Network.newNetwork();\n-    protected static final int BACKEND_PORT = 8000;\n-\n-    private static PostgreSQLContainer<?> postgres;\n-\n-    private static GenericContainer<?> backend;\n-\n-    private static String token;\n-\n-    private static int organisationId;\n-\n-    @BeforeClass\n-    public static void beforeClass() {\n-        postgres = new PostgreSQLContainer<>(DockerImageName.parse(\"postgres:10.6-alpine\"))\n-                .withNetwork(network)\n-                .withNetworkAliases(\"flagsmith-db\")\n-                .withDatabaseName(\"flagsmith\")\n-                .withLogConsumer(new Slf4jLogConsumer(LoggerFactory.getLogger(\"flagsmith-db\")));\n-        postgres.start();\n-\n-        backend = new GenericContainer<>(DockerImageName.parse(\"flagsmith/flagsmith-api:v2-5-2\"))\n-                .withNetwork(network)\n-                .withNetworkAliases(\"flagsmith-be\")\n-                .withEnv(\"DJANGO_ALLOWED_HOSTS\", \"*\")\n-                .withEnv(\"DATABASE_URL\", String.format(\"postgresql://%s:%s@%s:%d/%s\",\n-                        postgres.getUsername(),\n-                        postgres.getPassword(),\n-                        \"flagsmith-db\",\n-                        PostgreSQLContainer.POSTGRESQL_PORT,\n-                        postgres.getDatabaseName()))\n-                .withLogConsumer(new Slf4jLogConsumer(LoggerFactory.getLogger(\"flagsmith-be\")))\n-                .withExposedPorts(BACKEND_PORT)\n-                .waitingFor(new HttpWaitStrategy().forPath(\"/health\").withHeader(\"Accept\", \"application/json\"));\n-        backend.start();\n-\n-        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n-        RestAssured.port = backend.getMappedPort(BACKEND_PORT);\n-\n-        assertThat(RestAssured.get(\"/api/v1/users/init/\").asString())\n-                .describedAs(\"Super user have to be created\")\n-                .isEqualTo(\"ADMIN USER CREATED\");\n-\n-        token = flagSmithAuthenticate();\n-        organisationId = createOrganisation(\"Test Organisation\");\n-    }\n-\n-    @AfterClass\n-    public static void afterClass() {\n-        backend.stop();\n-        postgres.stop();\n-        network.close();\n-    }\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_Features_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_Features_Then_Success\",\n                 \"TEST\");\n \n-        createFeature(new FlagFeature(\n+        createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"Flag 1\",\n                 \"Description for Flag 1\",\n                 environment.projectId,\n                 true));\n-        createFeature(new FlagFeature(\n+        createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"Flag 2\",\n                 \"Description for Flag 2\",\n                 environment.projectId,\n                 false));\n-        createFeature(new ConfigFeature(\n+        createFeature(new FlagsmithTestHelper.ConfigFeature(\n                 \"Config 1\",\n                 \"Description for Config 1\",\n                 environment.projectId,\n                 \"xxx\"));\n-        createFeature(new ConfigFeature(\n+        createFeature(new FlagsmithTestHelper.ConfigFeature(\n                 \"Config 2\",\n                 \"Description for Config 2\",\n                 environment.projectId,\n@@ -128,11 +70,11 @@ public void testClient_When_Get_Features_Then_Success() {\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Has_Feature_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Has_Feature_Then_Success\",\n                 \"TEST\");\n \n-        final int featureId = createFeature(new FlagFeature(\n+        final int featureId = createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"Flag disabled\",\n                 null,\n                 environment.projectId,\n@@ -148,16 +90,16 @@ public void testClient_When_Has_Feature_Then_Success() {\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_Features_For_User_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_Features_For_User_Then_Success\",\n                 \"TEST\");\n \n-        final int featureId = createFeature(new FlagFeature(\n+        final int featureId = createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"Flag to be enabled for the user\",\n                 null,\n                 environment.projectId,\n                 false));\n-        createFeature(new FlagFeature(\n+        createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"Other Flag\",\n                 null,\n                 environment.projectId,\n@@ -197,7 +139,7 @@ public void testClient_When_Get_Features_For_User_Then_Success() {\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Traits_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Traits_Then_Success\",\n                 \"TEST\");\n \n@@ -221,7 +163,7 @@ public void testClient_When_Get_User_Traits_Then_Success() {\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Traits_For_Keys_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Traits_For_Keys_Then_Success\",\n                 \"TEST\");\n \n@@ -245,7 +187,7 @@ public void testClient_When_Get_User_Traits_For_Keys_Then_Success() {\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Traits_For_Invalid_User_Then_Return_Empty() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Traits_For_Invalid_User_Then_Return_Empty\",\n                 \"TEST\");\n \n@@ -260,16 +202,16 @@ public void testClient_When_Get_User_Traits_For_Invalid_User_Then_Return_Empty()\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Traits_And_Flags_For_Keys_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Traits_And_Flags_For_Keys_Then_Success\",\n                 \"TEST\");\n \n-        final int featureId = createFeature(new FlagFeature(\n+        final int featureId = createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"Flag to be enabled for the user\",\n                 null,\n                 environment.projectId,\n                 false));\n-        createFeature(new FlagFeature(\n+        createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"Other Flag\",\n                 null,\n                 environment.projectId,\n@@ -301,11 +243,11 @@ public void testClient_When_Get_User_Traits_And_Flags_For_Keys_Then_Success() {\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Traits_And_Flags_For_Invalid_User_Then_Return_Empty() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Traits_And_Flags_For_Invalid_User_Then_Return_Empty\",\n                 \"TEST\");\n \n-        createFeature(new FlagFeature(\n+        createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"The Flag\",\n                 null,\n                 environment.projectId,\n@@ -327,11 +269,11 @@ public void testClient_When_Get_User_Traits_And_Flags_For_Invalid_User_Then_Retu\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Trait_From_Traits_And_Flags_For_Keys_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Trait_From_Traits_And_Flags_For_Keys_Then_Success\",\n                 \"TEST\");\n \n-        createFeature(new FlagFeature(\n+        createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"The Flag\",\n                 null,\n                 environment.projectId,\n@@ -352,11 +294,11 @@ public void testClient_When_Get_User_Trait_From_Traits_And_Flags_For_Keys_Then_S\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Traits_From_Traits_And_Flags_For_Keys_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Traits_From_Traits_And_Flags_For_Keys_Then_Success\",\n                 \"TEST\");\n \n-        createFeature(new FlagFeature(\n+        createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"The Flag\",\n                 null,\n                 environment.projectId,\n@@ -383,16 +325,16 @@ public void testClient_When_Get_User_Traits_From_Traits_And_Flags_For_Keys_Then_\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_FLag_Value_From_Traits_And_Flags_For_Keys_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_FLag_Value_From_Traits_And_Flags_For_Keys_Then_Success\",\n                 \"TEST\");\n \n-        createFeature(new FlagFeature(\n+        createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"The Flag\",\n                 null,\n                 environment.projectId,\n                 false));\n-        createFeature(new ConfigFeature(\n+        createFeature(new FlagsmithTestHelper.ConfigFeature(\n                 \"font_size\",\n                 null,\n                 environment.projectId,\n@@ -410,11 +352,11 @@ public void testClient_When_Get_User_FLag_Value_From_Traits_And_Flags_For_Keys_T\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_FLag_Enabled_From_Traits_And_Flags_For_Keys_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_FLag_Enabled_From_Traits_And_Flags_For_Keys_Then_Success\",\n                 \"TEST\");\n \n-        final int featureId = createFeature(new FlagFeature(\n+        final int featureId = createFeature(new FlagsmithTestHelper.FlagFeature(\n                 \"The Flag\",\n                 null,\n                 environment.projectId,\n@@ -434,7 +376,7 @@ public void testClient_When_Get_User_FLag_Enabled_From_Traits_And_Flags_For_Keys\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Trait_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Trait_Then_Success\",\n                 \"TEST\");\n \n@@ -448,7 +390,7 @@ public void testClient_When_Get_User_Trait_Then_Success() {\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Get_User_Trait_Update_Then_Updated() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Get_User_Trait_Update_Then_Updated\",\n                 \"TEST\");\n \n@@ -470,20 +412,33 @@ public void testClient_When_Get_User_Trait_Update_Then_Updated() {\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Add_Traits_For_Identity_With_Missing_Identity_Then_Failed() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Add_Traits_For_Identity_With_Missing_Identity_Then_Failed\",\n                 \"TEST\");\n \n         assertThatThrownBy(() ->\n                 environment.client.identifyUserWithTraits(null,\n                         Collections.singletonList(trait(null, \"x\", \"y\"))))\n                 .isInstanceOf(IllegalArgumentException.class)\n-                .hasMessage(\"Missing user Identifier\");\n+                .hasMessage(\"user is marked non-null but is null\");\n+    }\n+\n+    @Test(groups = \"integration\")\n+    public void testClient_When_Add_Traits_For_Identity_With_Missing_User_Identifier_Then_Failed() {\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n+            \"testClient_When_Add_Traits_For_Identity_With_Missing_Identity_Then_Failed\",\n+            \"TEST\");\n+\n+        assertThatThrownBy(() ->\n+            environment.client.identifyUserWithTraits(new FeatureUser(),\n+                Collections.singletonList(trait(null, \"x\", \"y\"))))\n+            .isInstanceOf(IllegalArgumentException.class)\n+            .hasMessage(\"Missing user identifier\");\n     }\n \n     @Test(groups = \"integration\")\n     public void testClient_When_Add_Traits_For_Identity_Then_Success() {\n-        final ProjectEnvironment environment = createProjectEnvironment(\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n                 \"testClient_When_Add_Traits_For_Identity_Then_Success\",\n                 \"TEST\");\n \n@@ -501,314 +456,48 @@ public void testClient_When_Add_Traits_For_Identity_Then_Success() {\n                 );\n     }\n \n-    private ProjectEnvironment createProjectEnvironment(String projectName, String environmentName) {\n-        final int projectId = createProject(projectName, organisationId);\n-\n-        final Map<String, Object> environment = createEnvironment(environmentName, projectId);\n-        final String environmentApiKey = (String) environment.get(\"api_key\");\n-\n-        final FlagsmithClient client = FlagsmithClient.newBuilder()\n-                .withApiUrl(String.format(\"http://localhost:%d/api/v1/\", backend.getMappedPort(BACKEND_PORT)))\n-                .setApiKey(environmentApiKey)\n-                .build();\n-        return new ProjectEnvironment(environmentApiKey, projectId, client);\n-    }\n-\n-    private int createFeature(Feature feature) {\n-        final ImmutableMap.Builder<Object, Object> builder = ImmutableMap.builder()\n-                .put(\"name\", feature.name)\n-                .put(\"type\", feature.type)\n-                .put(\"project\", feature.projectId);\n-        if (feature.description != null) {\n-            builder.put(\"description\", feature.description);\n-        }\n-\n-        if (feature instanceof FlagFeature) {\n-            builder.put(\"default_enabled\", ((FlagFeature) feature).enabled);\n-        } else if (feature instanceof ConfigFeature) {\n-            builder.put(\"initial_value\", ((ConfigFeature) feature).value);\n-        } else {\n-            throw new IllegalStateException(\"Unsupported feature \" + feature);\n-        }\n-\n-        return RestAssured.given()\n-                .body(builder.build())\n-                .headers(defaultHeaders())\n-                .post(\"/api/v1/projects/{projectPk}/features/\", feature.projectId)\n-                .then()\n-                .statusCode(201)\n-                .extract()\n-                .jsonPath()\n-                .getInt(\"id\");\n-    }\n-\n-    private int createUserIdentity(String userIdentity, String environmentApiKey) {\n-        return RestAssured.given()\n-                .body(ImmutableMap.of(\n-                        \"identifier\", userIdentity,\n-                        \"environment\", environmentApiKey\n-                ))\n-                .headers(defaultHeaders())\n-                .post(\"/api/v1/environments/{apiKey}/identities/\", environmentApiKey)\n-                .then()\n-                .statusCode(201)\n-                .extract()\n-                .jsonPath()\n-                .getInt(\"id\");\n-    }\n-\n-    private Map<String, Object> createEnvironment(String name, int projectId) {\n-        return RestAssured.given()\n-                .body(ImmutableMap.of(\n-                        \"name\", name,\n-                        \"project\", projectId\n-                ))\n-                .headers(defaultHeaders())\n-                .post(\"/api/v1/environments/\")\n-                .then()\n-                .statusCode(201)\n-                .extract()\n-                .jsonPath()\n-                .getJsonObject(\"$\");\n-    }\n-\n-    private void switchFlag(int featureId, boolean enabled, String apiKey) {\n-        final List<Map<String, Object>> features = RestAssured.given()\n-                .headers(defaultHeaders())\n-                .get(\"/api/v1/environments/{apiKey}/featurestates/?feature={featureId}\",\n-                        apiKey, featureId)\n-                .then()\n-                .statusCode(200)\n-                .extract()\n-                .jsonPath()\n-                .getList(\"results\");\n-        if (features.isEmpty()) {\n-            RestAssured.given()\n-                    .body(ImmutableMap.of(\n-                            \"enabled\", enabled,\n-                            \"feature\", featureId\n-                    ))\n-                    .headers(defaultHeaders())\n-                    .post(\"/api/v1/environments/{apiKey}/featurestates/\", apiKey)\n-                    .then()\n-                    .statusCode(201);\n-        } else {\n-            final List<Integer> featureStateIds = features.stream()\n-                    .map(jsonMap -> jsonMap.get(\"id\"))\n-                    .filter(Integer.class::isInstance)\n-                    .map(Integer.class::cast)\n-                    .collect(Collectors.toList());\n-            if (featureStateIds.size() == 1) {\n-                final int featureStateId = featureStateIds.get(0);\n-                RestAssured.given()\n-                        .body(ImmutableMap.of(\n-                                \"enabled\", enabled,\n-                                \"feature\", featureId\n-                        ))\n-                        .headers(defaultHeaders())\n-                        .put(\"/api/v1/environments/{apiKey}/featurestates/{featureStateId}/\",\n-                                apiKey, featureStateId)\n-                        .then()\n-                        .statusCode(200);\n-            } else {\n-                throw new IllegalStateException(\"Unable to decide which feature-state to update: \" + features);\n-            }\n-        }\n-    }\n-\n-    private void switchFlagForUser(int featureId, int userIdentityId, boolean enabled, String apiKey) {\n-        final List<Map<String, Object>> features = RestAssured.given()\n-                .headers(defaultHeaders())\n-                .get(\"/api/v1/environments/{apiKey}/identities/{identityId}/featurestates/?feature={featureId}\",\n-                        apiKey, userIdentityId, featureId)\n-                .then()\n-                .statusCode(200)\n-                .extract()\n-                .jsonPath()\n-                .getList(\"results\");\n-        if (features.isEmpty()) {\n-            RestAssured.given()\n-                    .body(ImmutableMap.of(\n-                            \"enabled\", enabled,\n-                            \"feature\", featureId\n-                    ))\n-                    .headers(defaultHeaders())\n-                    .post(\"/api/v1/environments/{apiKey}/identities/{identityId}/featurestates/\", apiKey, userIdentityId)\n-                    .then()\n-                    .statusCode(201);\n-        } else {\n-            final List<Integer> featureStateIds = features.stream()\n-                    .filter(jsonMap -> {\n-                        final Map<String, Object> identityMap = (Map<String, Object>) jsonMap.get(\"identity\");\n-                        return Integer.valueOf(userIdentityId).equals(identityMap.get(\"id\"));\n-                    })\n-                    .map(jsonMap -> jsonMap.get(\"id\"))\n-                    .filter(Integer.class::isInstance)\n-                    .map(Integer.class::cast)\n-                    .collect(Collectors.toList());\n-            if (featureStateIds.size() == 1) {\n-                final int featureStateId = featureStateIds.get(0);\n-                RestAssured.given()\n-                        .body(ImmutableMap.of(\n-                                \"enabled\", enabled,\n-                                \"feature\", featureId\n-                        ))\n-                        .headers(defaultHeaders())\n-                        .put(\"/api/v1/environments/{apiKey}/identities/{identityId}/featurestates/{featureStateId}/\",\n-                                apiKey, userIdentityId, featureStateId)\n-                        .then()\n-                        .statusCode(200);\n-            } else {\n-                throw new IllegalStateException(\"Unable to decide which feature-state to update: \" + features);\n-            }\n-        }\n-    }\n-\n-    private void assignTraitToUserIdentity(String userIdentifier, String traitKey, Object traitValue, String apiKey) {\n-        RestAssured.given()\n-                .body(ImmutableMap.of(\n-                        \"identity\", ImmutableMap.of(\"identifier\", userIdentifier),\n-                        \"trait_key\", traitKey,\n-                        \"trait_value\", traitValue\n-                ))\n-                .headers(defaultHeaders())\n-                .header(\"x-environment-key\", apiKey)\n-                .post(\"/api/v1/traits/\")\n-                .then()\n-                .statusCode(200);\n-    }\n-\n-    private int createProject(String name, int organisationId) {\n-        return RestAssured.given()\n-                .body(ImmutableMap.of(\n-                        \"name\", name,\n-                        \"organisation\", organisationId\n-                ))\n-                .headers(defaultHeaders())\n-                .post(\"/api/v1/projects/\")\n-                .then()\n-                .statusCode(201)\n-                .extract()\n-                .jsonPath()\n-                .getInt(\"id\");\n-    }\n-\n-    private static int createOrganisation(String name) {\n-        return RestAssured.given()\n-                .body(ImmutableMap.of(\"name\", name))\n-                .headers(defaultHeaders())\n-                .post(\"/api/v1/organisations/\")\n-                .then()\n-                .statusCode(201)\n-                .extract()\n-                .jsonPath()\n-                .getInt(\"id\");\n-    }\n-\n-    private static String flagSmithAuthenticate() {\n-        return RestAssured.given()\n-                .body(ImmutableMap.of(\n-                        // from https://github.com/Flagsmith/flagsmith-api/blob/v2.5.0/src/app/settings/common.py#L255-L258\n-                        \"email\", \"admin@example.com\",\n-                        \"password\", \"password\"\n-                ))\n-                .header(\"Content-type\", \"application/json\")\n-                .post(\"/api/v1/auth/login/\")\n-                .then()\n-                .statusCode(200)\n-                .extract()\n-                .jsonPath()\n-                .getString(\"key\");\n-    }\n-\n-    private static Headers defaultHeaders() {\n-        return new Headers(\n-                new Header(\"Content-type\", \"application/json\"),\n-                new Header(\"Authorization\", \"Token \" + token));\n-    }\n-\n-    private Flag flag(String name, String description, boolean enabled) {\n-        final com.flagsmith.Feature feature = new com.flagsmith.Feature();\n-        feature.setName(name);\n-        feature.setDescription(description);\n-        feature.setType(\"FLAG\");\n-\n-        final Flag result = new Flag();\n-        result.setFeature(feature);\n-        result.setEnabled(enabled);\n-        return result;\n-    }\n-\n-    private Flag config(String name, String description, String value) {\n-        final com.flagsmith.Feature feature = new com.flagsmith.Feature();\n-        feature.setName(name);\n-        feature.setDescription(description);\n-        feature.setType(\"CONFIG\");\n-\n-        final Flag result = new Flag();\n-        result.setFeature(feature);\n-        result.setStateValue(value);\n-        return result;\n-    }\n+    @Test(groups = \"integration\")\n+    public void testClient_When_Add_Traits_For_Identity_To_Existing_Identity_Then_Success() {\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n+            \"testClient_When_Add_Traits_For_Identity_Then_Success\",\n+            \"TEST\");\n \n-    private Trait trait(String userIdentifier, String key, String value) {\n-        final Trait result = new Trait();\n-        if (userIdentifier != null) {\n-            final FeatureUser user = featureUser(userIdentifier);\n-            result.setIdentity(user);\n-        }\n-        result.setKey(key);\n-        result.setValue(value);\n-        return result;\n-    }\n+        final FeatureUser user = featureUser(\"i-am-user-with-traits\");\n \n-    private FeatureUser featureUser(String identifier) {\n-        final FeatureUser user = new FeatureUser();\n-        user.setIdentifier(identifier);\n-        return user;\n-    }\n+        List<Trait> traits = environment.client.identifyUserWithTraits(user, Arrays.asList(\n+            trait(null, \"trait_1\", \"some value1\"),\n+            trait(null, \"trait_2\", \"some value2\")));\n \n-    private static abstract class Feature {\n-        final String type;\n-        final String name;\n-        final String description;\n-        final int projectId;\n-\n-        protected Feature(String type, String name, String description, int projectId) {\n-            this.type = type;\n-            this.name = name;\n-            this.description = description;\n-            this.projectId = projectId;\n-        }\n-    }\n+        assertThat(traits)\n+            .hasSize(2)\n+            .containsExactlyInAnyOrder(\n+                trait(null, \"trait_1\", \"some value1\"),\n+                trait(null, \"trait_2\", \"some value2\")\n+            );\n \n-    private static class FlagFeature extends Feature {\n-        final boolean enabled;\n+        // Update existing identity\n+        traits = environment.client.identifyUserWithTraits(user, Arrays.asList(\n+            trait(null, \"extra_trait\", \"extra value\"),\n+            trait(null, \"trait_1\", \"updated value1\"),\n+            trait(null, \"trait_2\", \"some value2\")));\n \n-        protected FlagFeature(String name, String description, int projectId, boolean enabled) {\n-            super(\"FLAG\", name, description, projectId);\n-            this.enabled = enabled;\n-        }\n+        assertThat(traits)\n+            .hasSize(3)\n+            .containsExactlyInAnyOrder(\n+                trait(null, \"extra_trait\", traitValueWhenUserAlreadyExists(\"extra value\")),\n+                trait(null, \"trait_1\", traitValueWhenUserAlreadyExists(\"updated value1\")),\n+                trait(null, \"trait_2\", traitValueWhenUserAlreadyExists(\"some value2\"))\n+            );\n     }\n \n-    private static class ConfigFeature extends Feature {\n-        final String value;\n-\n-        protected ConfigFeature(String name, String description, int projectId, String value) {\n-            super(\"CONFIG\", name, description, projectId);\n-            this.value = value;\n-        }\n-    }\n+    @Test(groups = \"integration\")\n+    public void testClient_When_Cache_Disabled_Return_Null() {\n+        final FlagsmithTestHelper.ProjectEnvironment environment = createProjectEnvironment(\n+            \"testClient_When_Cache_Disabled_Return_Null\",\n+            \"TEST\");\n \n-    private static class ProjectEnvironment {\n-        final String apiKey;\n-        final int projectId;\n-        final FlagsmithClient client;\n+        FlagsmithCache cache = environment.client.getCache();\n \n-        private ProjectEnvironment(String apiKey, int projectId, FlagsmithClient client) {\n-            this.apiKey = apiKey;\n-            this.projectId = projectId;\n-            this.client = client;\n-        }\n+        assertNull(cache);\n     }\n }"
  },
  {
    "sha": "fbc121045b0127df91c7dd552ef01eb1a75918cd",
    "filename": "src/test/java/com/flagsmith/FlagsmithTestHelper.java",
    "status": "added",
    "additions": 313,
    "deletions": 0,
    "changes": 313,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithTestHelper.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/FlagsmithTestHelper.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/FlagsmithTestHelper.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,313 @@\n+package com.flagsmith;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.restassured.RestAssured;\n+import io.restassured.http.Header;\n+import io.restassured.http.Headers;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.flagsmith.IntegrationSuiteTest.BACKEND_PORT;\n+\n+public class FlagsmithTestHelper {\n+\n+  public static ProjectEnvironment createProjectEnvironment(String projectName, String environmentName) {\n+    return createProjectEnvironment(projectName, environmentName, false);\n+  }\n+\n+  public static ProjectEnvironment createProjectEnvironment(String projectName, String environmentName, boolean cached) {\n+    final int projectId = createProject(projectName, IntegrationSuiteTest.TestData.organisationId);\n+\n+    final Map<String, Object> environment = createEnvironment(environmentName, projectId);\n+    final String environmentApiKey = (String) environment.get(\"api_key\");\n+\n+    FlagsmithClient.Builder clientBuilder = FlagsmithClient.newBuilder()\n+        .withApiUrl(String.format(\"http://localhost:%d/api/v1/\", IntegrationSuiteTest.TestData.backend.getMappedPort(BACKEND_PORT)))\n+        .setApiKey(environmentApiKey);\n+    if (cached) {\n+      clientBuilder.withCache(FlagsmithCacheConfig.newBuilder()\n+          .maxSize(2)\n+          .build());\n+    }\n+    final FlagsmithClient client = clientBuilder.build();\n+    return new ProjectEnvironment(environmentApiKey, projectId, client);\n+  }\n+\n+  public static int createFeature(Feature feature) {\n+    final ImmutableMap.Builder<Object, Object> builder = ImmutableMap.builder()\n+        .put(\"name\", feature.name)\n+        .put(\"type\", feature.type)\n+        .put(\"project\", feature.projectId);\n+    if (feature.description != null) {\n+      builder.put(\"description\", feature.description);\n+    }\n+\n+    if (feature instanceof FlagFeature) {\n+      builder.put(\"default_enabled\", ((FlagFeature) feature).enabled);\n+    } else if (feature instanceof ConfigFeature) {\n+      builder.put(\"initial_value\", ((ConfigFeature) feature).value);\n+    } else {\n+      throw new IllegalStateException(\"Unsupported feature \" + feature);\n+    }\n+\n+    return RestAssured.given()\n+        .body(builder.build())\n+        .headers(defaultHeaders())\n+        .post(\"/api/v1/projects/{projectPk}/features/\", feature.projectId)\n+        .then()\n+        .statusCode(201)\n+        .extract()\n+        .jsonPath()\n+        .getInt(\"id\");\n+  }\n+\n+  public static int createUserIdentity(String userIdentity, String environmentApiKey) {\n+    return RestAssured.given()\n+        .body(ImmutableMap.of(\n+            \"identifier\", userIdentity,\n+            \"environment\", environmentApiKey\n+        ))\n+        .headers(defaultHeaders())\n+        .post(\"/api/v1/environments/{apiKey}/identities/\", environmentApiKey)\n+        .then()\n+        .statusCode(201)\n+        .extract()\n+        .jsonPath()\n+        .getInt(\"id\");\n+  }\n+\n+  public static Map<String, Object> createEnvironment(String name, int projectId) {\n+    return RestAssured.given()\n+        .body(ImmutableMap.of(\n+            \"name\", name,\n+            \"project\", projectId\n+        ))\n+        .headers(defaultHeaders())\n+        .post(\"/api/v1/environments/\")\n+        .then()\n+        .statusCode(201)\n+        .extract()\n+        .jsonPath()\n+        .getJsonObject(\"$\");\n+  }\n+\n+  public static void switchFlag(int featureId, boolean enabled, String apiKey) {\n+    final List<Map<String, Object>> features = RestAssured.given()\n+        .headers(defaultHeaders())\n+        .get(\"/api/v1/environments/{apiKey}/featurestates/?feature={featureId}\",\n+            apiKey, featureId)\n+        .then()\n+        .statusCode(200)\n+        .extract()\n+        .jsonPath()\n+        .getList(\"results\");\n+    if (features.isEmpty()) {\n+      RestAssured.given()\n+          .body(ImmutableMap.of(\n+              \"enabled\", enabled,\n+              \"feature\", featureId\n+          ))\n+          .headers(defaultHeaders())\n+          .post(\"/api/v1/environments/{apiKey}/featurestates/\", apiKey)\n+          .then()\n+          .statusCode(201);\n+    } else {\n+      final List<Integer> featureStateIds = features.stream()\n+          .map(jsonMap -> jsonMap.get(\"id\"))\n+          .filter(Integer.class::isInstance)\n+          .map(Integer.class::cast)\n+          .collect(Collectors.toList());\n+      if (featureStateIds.size() == 1) {\n+        final int featureStateId = featureStateIds.get(0);\n+        RestAssured.given()\n+            .body(ImmutableMap.of(\n+                \"enabled\", enabled,\n+                \"feature\", featureId\n+            ))\n+            .headers(defaultHeaders())\n+            .put(\"/api/v1/environments/{apiKey}/featurestates/{featureStateId}/\",\n+                apiKey, featureStateId)\n+            .then()\n+            .statusCode(200);\n+      } else {\n+        throw new IllegalStateException(\"Unable to decide which feature-state to update: \" + features);\n+      }\n+    }\n+  }\n+\n+  public static void switchFlagForUser(int featureId, int userIdentityId, boolean enabled, String apiKey) {\n+    final List<Map<String, Object>> features = RestAssured.given()\n+        .headers(defaultHeaders())\n+        .get(\"/api/v1/environments/{apiKey}/identities/{identityId}/featurestates/?feature={featureId}\",\n+            apiKey, userIdentityId, featureId)\n+        .then()\n+        .statusCode(200)\n+        .extract()\n+        .jsonPath()\n+        .getList(\"results\");\n+    if (features.isEmpty()) {\n+      RestAssured.given()\n+          .body(ImmutableMap.of(\n+              \"enabled\", enabled,\n+              \"feature\", featureId\n+          ))\n+          .headers(defaultHeaders())\n+          .post(\"/api/v1/environments/{apiKey}/identities/{identityId}/featurestates/\", apiKey, userIdentityId)\n+          .then()\n+          .statusCode(201);\n+    } else {\n+      final List<Integer> featureStateIds = features.stream()\n+          .filter(jsonMap -> {\n+            final Map<String, Object> identityMap = (Map<String, Object>) jsonMap.get(\"identity\");\n+            return Integer.valueOf(userIdentityId).equals(identityMap.get(\"id\"));\n+          })\n+          .map(jsonMap -> jsonMap.get(\"id\"))\n+          .filter(Integer.class::isInstance)\n+          .map(Integer.class::cast)\n+          .collect(Collectors.toList());\n+      if (featureStateIds.size() == 1) {\n+        final int featureStateId = featureStateIds.get(0);\n+        RestAssured.given()\n+            .body(ImmutableMap.of(\n+                \"enabled\", enabled,\n+                \"feature\", featureId\n+            ))\n+            .headers(defaultHeaders())\n+            .put(\"/api/v1/environments/{apiKey}/identities/{identityId}/featurestates/{featureStateId}/\",\n+                apiKey, userIdentityId, featureStateId)\n+            .then()\n+            .statusCode(200);\n+      } else {\n+        throw new IllegalStateException(\"Unable to decide which feature-state to update: \" + features);\n+      }\n+    }\n+  }\n+\n+  public static void assignTraitToUserIdentity(String userIdentifier, String traitKey, Object traitValue, String apiKey) {\n+    RestAssured.given()\n+        .body(ImmutableMap.of(\n+            \"identity\", ImmutableMap.of(\"identifier\", userIdentifier),\n+            \"trait_key\", traitKey,\n+            \"trait_value\", traitValue\n+        ))\n+        .headers(defaultHeaders())\n+        .header(\"x-environment-key\", apiKey)\n+        .post(\"/api/v1/traits/\")\n+        .then()\n+        .statusCode(200);\n+  }\n+\n+  public static int createProject(String name, int organisationId) {\n+    return RestAssured.given()\n+        .body(ImmutableMap.of(\n+            \"name\", name,\n+            \"organisation\", organisationId\n+        ))\n+        .headers(defaultHeaders())\n+        .post(\"/api/v1/projects/\")\n+        .then()\n+        .statusCode(201)\n+        .extract()\n+        .jsonPath()\n+        .getInt(\"id\");\n+  }\n+\n+  public static Flag flag(String name, String description, boolean enabled) {\n+    final com.flagsmith.Feature feature = new com.flagsmith.Feature();\n+    feature.setName(name);\n+    feature.setDescription(description);\n+    feature.setType(\"FLAG\");\n+\n+    final Flag result = new Flag();\n+    result.setFeature(feature);\n+    result.setEnabled(enabled);\n+    return result;\n+  }\n+\n+  public static Flag config(String name, String description, String value) {\n+    final com.flagsmith.Feature feature = new com.flagsmith.Feature();\n+    feature.setName(name);\n+    feature.setDescription(description);\n+    feature.setType(\"CONFIG\");\n+\n+    final Flag result = new Flag();\n+    result.setFeature(feature);\n+    result.setStateValue(value);\n+    return result;\n+  }\n+\n+  public static Trait trait(String userIdentifier, String key, String value) {\n+    final Trait result = new Trait();\n+    if (userIdentifier != null) {\n+      final FeatureUser user = featureUser(userIdentifier);\n+      result.setIdentity(user);\n+    }\n+    result.setKey(key);\n+    result.setValue(value);\n+    return result;\n+  }\n+\n+  public static FeatureUser featureUser(String identifier) {\n+    final FeatureUser user = new FeatureUser();\n+    user.setIdentifier(identifier);\n+    return user;\n+  }\n+\n+  public static abstract class Feature {\n+    final String type;\n+    final String name;\n+    final String description;\n+    final int projectId;\n+\n+    protected Feature(String type, String name, String description, int projectId) {\n+      this.type = type;\n+      this.name = name;\n+      this.description = description;\n+      this.projectId = projectId;\n+    }\n+  }\n+\n+  public static class FlagFeature extends Feature {\n+    final boolean enabled;\n+\n+    protected FlagFeature(String name, String description, int projectId, boolean enabled) {\n+      super(\"FLAG\", name, description, projectId);\n+      this.enabled = enabled;\n+    }\n+  }\n+\n+  public static class ConfigFeature extends Feature {\n+    final String value;\n+\n+    protected ConfigFeature(String name, String description, int projectId, String value) {\n+      super(\"CONFIG\", name, description, projectId);\n+      this.value = value;\n+    }\n+  }\n+\n+  public static class ProjectEnvironment {\n+    final String apiKey;\n+    final int projectId;\n+    final FlagsmithClient client;\n+\n+    private ProjectEnvironment(String apiKey, int projectId, FlagsmithClient client) {\n+      this.apiKey = apiKey;\n+      this.projectId = projectId;\n+      this.client = client;\n+    }\n+  }\n+\n+  public static Headers defaultHeaders() {\n+    return new Headers(\n+        new Header(\"Content-type\", \"application/json\"),\n+        new Header(\"Authorization\", \"Token \" + IntegrationSuiteTest.TestData.token));\n+  }\n+\n+  // This seems to be a bug in the API\n+  // Once fixed, we would expect to see only the value\n+  public static String traitValueWhenUserAlreadyExists(String val) {\n+    return \"{'type': 'unicode', 'value': '\" + val + \"'}\";\n+  }\n+}"
  },
  {
    "sha": "6043273390d0550253bc648717ff1b66c114ea8a",
    "filename": "src/test/java/com/flagsmith/IdentityTraitTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/IdentityTraitTest.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/IdentityTraitTest.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/IdentityTraitTest.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -20,7 +20,7 @@\n             \"  \\n\" +\n             \"]}\";\n \n-    @Test(groups = \"integration\")\n+    @Test(groups = \"unit\")\n     public void test_When_Parsed_Then_Success() throws IOException {\n \n         IdentityTraits trait = new IdentityTraits();"
  },
  {
    "sha": "a3f27439ec1f5f809cbae7bf40a249542705cb4e",
    "filename": "src/test/java/com/flagsmith/IntegrationSuiteTest.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/IntegrationSuiteTest.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/IntegrationSuiteTest.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/IntegrationSuiteTest.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,102 @@\n+package com.flagsmith;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.restassured.RestAssured;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testng.annotations.AfterGroups;\n+import org.testng.annotations.BeforeGroups;\n+import org.testng.annotations.Test;\n+\n+import static com.flagsmith.FlagsmithTestHelper.defaultHeaders;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Test(groups = \"integration\")\n+public class IntegrationSuiteTest {\n+\n+  private static final Network network = Network.newNetwork();\n+  private static PostgreSQLContainer<?> postgres;\n+\n+  public static final int BACKEND_PORT = 8000;\n+\n+  @BeforeGroups(groups = \"integration\")\n+  public static void beforeClass() {\n+    postgres = new PostgreSQLContainer<>(DockerImageName.parse(\"postgres:10.6-alpine\"))\n+        .withNetwork(network)\n+        .withNetworkAliases(\"flagsmith-db\")\n+        .withDatabaseName(\"flagsmith\")\n+        .withLogConsumer(new Slf4jLogConsumer(LoggerFactory.getLogger(\"flagsmith-db\")));\n+    postgres.start();\n+\n+    TestData.backend = new GenericContainer<>(DockerImageName.parse(\"flagsmith/flagsmith-api:v2-5-2\"))\n+        .withNetwork(network)\n+        .withNetworkAliases(\"flagsmith-be\")\n+        .withEnv(\"DJANGO_ALLOWED_HOSTS\", \"*\")\n+        .withEnv(\"DATABASE_URL\", String.format(\"postgresql://%s:%s@%s:%d/%s\",\n+            postgres.getUsername(),\n+            postgres.getPassword(),\n+            \"flagsmith-db\",\n+            PostgreSQLContainer.POSTGRESQL_PORT,\n+            postgres.getDatabaseName()))\n+        .withLogConsumer(new Slf4jLogConsumer(LoggerFactory.getLogger(\"flagsmith-be\")))\n+        .withExposedPorts(BACKEND_PORT)\n+        .waitingFor(new HttpWaitStrategy().forPath(\"/health\").withHeader(\"Accept\", \"application/json\"));\n+    TestData.backend.start();\n+\n+    RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    RestAssured.port = TestData.backend.getMappedPort(BACKEND_PORT);\n+\n+    assertThat(RestAssured.get(\"/api/v1/users/init/\").asString())\n+        .describedAs(\"Super user have to be created\")\n+        .isEqualTo(\"ADMIN USER CREATED\");\n+\n+    TestData.token = flagSmithAuthenticate();\n+    TestData.organisationId = createOrganisation(\"Test Organisation\");\n+  }\n+\n+  @AfterGroups(groups = \"integration\")\n+  public static void afterClass() {\n+    TestData.backend.stop();\n+    postgres.stop();\n+    network.close();\n+  }\n+\n+  private static String flagSmithAuthenticate() {\n+    return RestAssured.given()\n+        .body(ImmutableMap.of(\n+            // from https://github.com/Flagsmith/flagsmith-api/blob/v2.5.0/src/app/settings/common.py#L255-L258\n+            \"email\", \"admin@example.com\",\n+            \"password\", \"password\"\n+        ))\n+        .header(\"Content-type\", \"application/json\")\n+        .post(\"/api/v1/auth/login/\")\n+        .then()\n+        .statusCode(200)\n+        .extract()\n+        .jsonPath()\n+        .getString(\"key\");\n+  }\n+\n+  private static int createOrganisation(String name) {\n+    return RestAssured.given()\n+        .body(ImmutableMap.of(\"name\", name))\n+        .headers(defaultHeaders())\n+        .post(\"/api/v1/organisations/\")\n+        .then()\n+        .statusCode(201)\n+        .extract()\n+        .jsonPath()\n+        .getInt(\"id\");\n+  }\n+\n+  public static class TestData {\n+    public static String token;\n+    public static int organisationId;\n+    public static GenericContainer<?> backend;\n+  }\n+}"
  },
  {
    "sha": "153a3f0dfaf9e3f4618f0a7523f61f0cc91f8315",
    "filename": "src/test/java/com/flagsmith/TraitTest.java",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/Flagsmith/flagsmith-java-client/blob/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/TraitTest.java",
    "raw_url": "https://github.com/Flagsmith/flagsmith-java-client/raw/a6fd300bb48d8e5261209706845fddfd6b2c8c3b/src/test/java/com/flagsmith/TraitTest.java",
    "contents_url": "https://api.github.com/repos/Flagsmith/flagsmith-java-client/contents/src/test/java/com/flagsmith/TraitTest.java?ref=a6fd300bb48d8e5261209706845fddfd6b2c8c3b",
    "patch": "@@ -0,0 +1,90 @@\n+package com.flagsmith;\n+\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+/**\n+ *\n+ */\n+public class TraitTest {\n+\n+    @Test(groups = \"unit\")\n+    public void test_When_Parsed_Then_Success() throws IOException {\n+        final Trait trait = new Trait();\n+        trait.parse(getTraitJson(\"user-id\", \"trait-key\", \"trait-value\"));\n+\n+        assertEquals(\"trait-key\", trait.getKey(), \"Should have trait key\");\n+        assertEquals(\"trait-value\", trait.getValue(), \"Should have trait value\");\n+        assertNotNull(trait.getIdentity(), \"Should have trait identity\");\n+        assertEquals(\"user-id\", trait.getIdentity().getIdentifier(), \"Should have trait identifier\");\n+    }\n+\n+    @Test(groups = \"unit\")\n+    public void test_When_Compared_Then_Equal() throws IOException {\n+        final Trait trait1 = new Trait();\n+        trait1.parse(getTraitJson(\"user-id\", \"trait-key\", \"trait-value\"));\n+        final Trait trait2 = new Trait();\n+        trait2.parse(getTraitJson(\"user-id\", \"trait-key\", \"trait-value\"));\n+        assertTrue(trait1.equals(trait2));\n+\n+        trait1.setIdentity(null);\n+        trait2.setIdentity(null);\n+        assertTrue(trait1.equals(trait2));\n+    }\n+\n+    @Test(groups = \"unit\")\n+    public void test_When_Compared_Without_User_Then_Equal() throws IOException {\n+        final Trait trait1 = new Trait();\n+        trait1.parse(getTraitJsonWithoutUser(\"trait-key\", \"trait-value\"));\n+        final Trait trait2 = new Trait();\n+        trait2.parse(getTraitJsonWithoutUser(\"trait-key\", \"trait-value\"));\n+        assertTrue(trait1.equals(trait2));\n+    }\n+\n+    @Test(groups = \"unit\")\n+    public void test_When_Compared_Then_Not_Equal() throws IOException {\n+        final Trait trait1 = new Trait();\n+        final Trait trait1Copy = new Trait();\n+        trait1.parse(getTraitJson(\"user-id\", \"trait-key\", \"trait-value\"));\n+        trait1Copy.parse(getTraitJson(\"user-id\", \"trait-key\", \"trait-value\"));\n+\n+        final Trait trait2 = new Trait();\n+        trait2.parse(getTraitJson(\"user-id\", \"trait-key2\", \"trait-value\"));\n+        assertFalse(trait1.equals(trait2));\n+\n+        final Trait trait3 = new Trait();\n+        trait3.parse(getTraitJson(\"user-id3\", \"trait-key\", \"trait-value\"));\n+        assertFalse(trait1.equals(trait3));\n+\n+        final Trait trait4 = new Trait();\n+        trait4.parse(getTraitJson(\"user-id\", \"trait-key\", \"trait-value4\"));\n+        assertFalse(trait1.equals(trait4));\n+    }\n+\n+    private String getTraitJson(String identifier, String traitKey, String traitValue) {\n+        return\n+            \"{\" +\n+            \"  \\\"unknown-field\\\": 2,\" +\n+            \"  \\\"identity\\\": {\" +\n+            \"    \\\"identifier\\\": \\\"\" + identifier + \"\\\"\" +\n+            \"  },\" +\n+            \"  \\\"trait_key\\\": \\\"\" + traitKey + \"\\\",\" +\n+            \"  \\\"trait_value\\\": \\\"\" + traitValue + \"\\\"\" +\n+            \"}\";\n+    }\n+\n+    private String getTraitJsonWithoutUser(String traitKey, String traitValue) {\n+        return\n+            \"{\" +\n+                \"  \\\"unknown-field\\\": 2,\" +\n+                \"  \\\"trait_key\\\": \\\"\" + traitKey + \"\\\",\" +\n+                \"  \\\"trait_value\\\": \\\"\" + traitValue + \"\\\"\" +\n+                \"}\";\n+    }\n+}"
  }
]
