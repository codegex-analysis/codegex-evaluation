[
  {
    "sha": "649b2c37391b908d86e7a3e88781495265658b4f",
    "filename": "src/test/java/ru/devray/safedoor/SimpleTest.java",
    "status": "modified",
    "additions": 47,
    "deletions": 27,
    "changes": 74,
    "blob_url": "https://github.com/devrayone/safedoor/blob/877e20576d5efebacc143f5210f52f897282135f/src/test/java/ru/devray/safedoor/SimpleTest.java",
    "raw_url": "https://github.com/devrayone/safedoor/raw/877e20576d5efebacc143f5210f52f897282135f/src/test/java/ru/devray/safedoor/SimpleTest.java",
    "contents_url": "https://api.github.com/repos/devrayone/safedoor/contents/src/test/java/ru/devray/safedoor/SimpleTest.java?ref=877e20576d5efebacc143f5210f52f897282135f",
    "patch": "@@ -1,53 +1,73 @@\n package ru.devray.safedoor;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.*;\n \n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\n+@TestMethodOrder(MethodOrderer.DisplayName.class)\n public class SimpleTest {\n \n+    static SafeDoor door;\n+\n+    @BeforeEach\n+    void init(){\n+        door = new SafeDoor(new int[]{30,12,4,5,7}, 128463);\n+    }\n+\n+    @AfterEach\n+    void removeReferenceToObject(){\n+        door = null;\n+    }\n+\n+    @DisplayName(\"Корректная работа конструктора\")\n+    @Tag(\"smoke\")\n     @Test\n     void testConstructor(){\n-        //логика, инструкция, проверяемый код\n-        SafeDoor door = new SafeDoor(new int[]{30,12,4,5,7}, 128463);\n-\n-        //проверяемое условие, правильно ил отработал код\n-        if (door == null){\n-            new RuntimeException(\"Test filed\");\n-        }\n+        assertNotNull(door);\n     }\n \n+    @DisplayName(\"Дверь по-умолчанию закрыта\")\n+    @Tag(\"regression\")\n     @Test\n     void testDoorIsCreatedAsClosed(){\n         //логика, инструкция, проверяемый код\n-        SafeDoor door = new SafeDoor(new int[]{30,12,4,5,7}, 128463);\n-        if (door.isBoltOpen | door.isDoorKnobTurned | door.isDigitalLockOpen | door.isMechanicalLockOpen) {\n-            new RuntimeException(\"Test filed\");\n-        }\n+        assertFalse(door.isBoltOpen | door.isDoorKnobTurned | door.isDigitalLockOpen | door.isMechanicalLockOpen);\n     }\n \n+    @DisplayName(\"Открытие цифрового замка при вводе корректного пароля\")\n+    @Tag(\"smoke\")\n     @Test\n     void testDigitalLockOpensCorrectly(){\n-        SafeDoor door = new SafeDoor(new int[]{30,12,4,5,7}, 128463);\n-        if (!door.enterDigitalCode(\"128463\")) {\n-            new RuntimeException(\"Test filed\");\n-        }\n+        assertTrue(door.enterDigitalCode(\"128463\"));\n     }\n \n+    @DisplayName(\"Открытие цифрового замка при вводе некорректного пароля\")\n+    @Tag(\"smoke\")\n     @Test\n-    void testRemoveBolt(){\n-        SafeDoor door = new SafeDoor(new int[]{30,12,4,5,7}, 128463);\n-        door.removeBolt();\n-\n-        if(!door.isBoltOpen){\n-            new RuntimeException(\"Test failed\");\n-        }\n+    void testDigitalLockIncorrectlyPassword(){\n+        assertFalse(door.enterDigitalCode(\"123456\"));\n     }\n \n+    @DisplayName(\"Открытие засова\")\n+    @Tag(\"smoke\")\n+    @Test\n+    void testRemoveBolt(){\n+        assertTrue(door.removeBolt());\n+    }\n \n+    @DisplayName(\"Открытие механического замка при вводе некорректного пароля\")\n+    @Tag(\"smoke\")\n+    @Test\n     void testMechanicalCodeIncorrectly(){\n-        SafeDoor door = new SafeDoor(new int[]{30,12,4,5,7}, 128463);\n-        if (door.enterMechanicalCode(new int[]{1, 2, 3, 4, 5})){\n-            new RuntimeException(\"Test failed\");\n-        }\n+        assertFalse(door.enterMechanicalCode(new int[]{1, 2, 3, 4, 5}));\n+    }\n+\n+    @DisplayName(\"Открытие механического замка при вводе корректного пароля\")\n+    @Tag(\"smoke\")\n+    @Test\n+    void testMechanicalCodeCorrectly(){\n+        assertTrue(door.enterMechanicalCode(new int[]{30,12,4,5,7}));\n     }\n \n }"
  }
]
