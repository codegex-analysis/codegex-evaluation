[
  {
    "sha": "de68e3d5af822be92435250d2b4f083035a973c0",
    "filename": "src/test/java/ru/devray/restassureddemo/MutualFoundTest.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/devrayone/restassureddemo/blob/7bb660066ba2b37cd65c16d65fbaa626a7028e76/src/test/java/ru/devray/restassureddemo/MutualFoundTest.java",
    "raw_url": "https://github.com/devrayone/restassureddemo/raw/7bb660066ba2b37cd65c16d65fbaa626a7028e76/src/test/java/ru/devray/restassureddemo/MutualFoundTest.java",
    "contents_url": "https://api.github.com/repos/devrayone/restassureddemo/contents/src/test/java/ru/devray/restassureddemo/MutualFoundTest.java?ref=7bb660066ba2b37cd65c16d65fbaa626a7028e76",
    "patch": "@@ -0,0 +1,95 @@\n+package ru.devray.restassureddemo;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.filter.log.LogDetail;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import ru.devray.restassureddemo.entities.StockPrice;\n+import static io.restassured.RestAssured.given;\n+\n+public class MutualFoundTest {\n+    public static final String API_KEY = \"585f0e57d2acc1c82dddd4d75b9b6244\";\n+    public static final String BASE_URI = \"https://financialmodelingprep.com/\";\n+    public static final String endPointStockData = \"api/v3/symbol/available-mutual-funds?apikey=\";\n+    public static RequestSpecification spec;\n+\n+    @BeforeAll\n+    static void setUp() {\n+        spec = new RequestSpecBuilder ()\n+                .setBaseUri (BASE_URI)\n+                .log (LogDetail.ALL)\n+                .setAccept (ContentType.JSON)\n+                .build ();\n+    }\n+\n+    @DisplayName(\"Тест - в результате GET-запроса возвращается код 200\")\n+    @Test\n+    void bddStyleTestExample() {\n+\n+        given ().spec (spec)\n+                .when ().get (endPointStockData + API_KEY)\n+                .then ().statusCode (200)\n+                .and ().body (Matchers.containsString (\"name\"));\n+    }\n+\n+\n+    @DisplayName(\"Тест - проверяем что у объекта есть все поля: name, currency, stockExchange, exchangeShortName\")\n+    @Test\n+    void bddStyleTestExample1() {\n+        given ().spec (spec)\n+                .when ().get (endPointStockData + API_KEY)\n+                .then ().body (\"[1].stockExchange\", Matchers.notNullValue ())\n+                .and ().body (\"[3].currency\", Matchers.notNullValue ())\n+                .and ().body (\"[2].exchangeShortName\", Matchers.notNullValue ())\n+                .and ().body (\"[2].name\", Matchers.notNullValue ())\n+                .and ().body (\"[10].currency\", Matchers.notNullValue ());\n+\n+\n+    }\n+\n+    //вышло аналогично прерыдыдущему, но ок\n+    @DisplayName(\"Тест - элементы из первого индекса имеют значения\")\n+    @Test\n+    void bddStyleTestExample2() {\n+        given ().spec (spec)\n+                .when ().get (endPointStockData + API_KEY)\n+                .then ().body (\"symbol[0]\", Matchers.notNullValue ())\n+                .and ().body (\"name[0]\", Matchers.notNullValue ())\n+                .and ().body (\"currency[0]\", Matchers.notNullValue ());\n+\n+    }\n+\n+    @DisplayName(\"Тест - поле объекта соответствует одному из двух значений\")\n+    @Test\n+    void bddStyleTestExample5(){\n+        given().baseUri(BASE_URI)\n+                .when().get(endPointStockData+API_KEY)\n+                .then().body(\"[0].symbol\", Matchers.oneOf(\"AADBX\",\"American Beacon Balanced Fund R5 Class\"));\n+    }\n+\n+\n+    @DisplayName(\"Тест - первое значение/первый индекс = AADBX\")\n+    @Test\n+    void bddStyleTestExample3() {\n+        given ().spec (spec)\n+                .when ().get (endPointStockData + API_KEY)\n+                .then ().body (\"symbol[0]\", Matchers.equalTo (\"AADBX\"));\n+\n+    }\n+\n+    @DisplayName(\"Тест - первое значение/второй индекс = GIFPX\")\n+    @Test\n+    void bddStyleTestExample4() {\n+        given ().spec (spec)\n+                .when ().get (endPointStockData + API_KEY)\n+                .then ().body (\"symbol[1]\", Matchers.equalTo (\"GIFPX\"));\n+\n+    }\n+\n+\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "dea5bb928227666dd1df15104944bd0aa0cc8a54",
    "filename": "src/test/java/ru/devray/restassureddemo/StockTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/devrayone/restassureddemo/blob/7bb660066ba2b37cd65c16d65fbaa626a7028e76/src/test/java/ru/devray/restassureddemo/StockTest.java",
    "raw_url": "https://github.com/devrayone/restassureddemo/raw/7bb660066ba2b37cd65c16d65fbaa626a7028e76/src/test/java/ru/devray/restassureddemo/StockTest.java",
    "contents_url": "https://api.github.com/repos/devrayone/restassureddemo/contents/src/test/java/ru/devray/restassureddemo/StockTest.java?ref=7bb660066ba2b37cd65c16d65fbaa626a7028e76",
    "patch": "@@ -23,6 +23,8 @@\n     public static final String endPointCommodities = \"api/v3/symbol/available-commodities?apikey=\";\n     public static RequestSpecification spec; //переменная для подготовки первоначального состояния запросов\n \n+    //https://financialmodelingprep.com/api/v3/symbol/available-mutual-funds?apikey=585f0e57d2acc1c82dddd4d75b9b6244\n+\n     @BeforeAll\n     static void setUp(){\n         spec = new RequestSpecBuilder()\n@@ -58,15 +60,15 @@ void getResponseBodyAsObjectTest(){\n         // десериализация - двоичный файл -> объекты\n         StockPrice[] stockPrice =\n                 given().baseUri(BASE_URI)\n-                .when().get(endPointStockData+API_KEY)\n-                .then().extract().body().as(StockPrice[].class);\n+                        .when().get(endPointStockData+API_KEY)\n+                        .then().extract().body().as(StockPrice[].class);\n \n //        Response response = given().spec(spec)\n //                .when().get(endPoint+API_KEY);\n //\n //        StockPrice stockPrice = response.getBody().as(StockPrice[].class)[0];\n \n-        System.out.println(stockPrice);\n+        System.out.println(stockPrice.toString ());\n     }\n \n     @DisplayName(\"Проверяем что у объекта есть поля stockExchange, exchangeShortName\")"
  }
]
