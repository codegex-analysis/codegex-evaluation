[
  {
    "sha": "aff7c49c01cc965712fc1a9ea003a0712eac3bc1",
    "filename": "src/test/java/ru/devray/restassureddemo/StockMarket.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/devrayone/restassureddemo/blob/6bf2da01166d2a95366f6529834e373543c676e8/src/test/java/ru/devray/restassureddemo/StockMarket.java",
    "raw_url": "https://github.com/devrayone/restassureddemo/raw/6bf2da01166d2a95366f6529834e373543c676e8/src/test/java/ru/devray/restassureddemo/StockMarket.java",
    "contents_url": "https://api.github.com/repos/devrayone/restassureddemo/contents/src/test/java/ru/devray/restassureddemo/StockMarket.java?ref=6bf2da01166d2a95366f6529834e373543c676e8",
    "patch": "@@ -0,0 +1,74 @@\n+package ru.devray.restassureddemo;\n+import groovy.json.JsonToken;\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.filter.log.LogDetail;\n+import io.restassured.http.ContentType;\n+import io.restassured.path.json.JsonPath;\n+import io.restassured.response.ResponseBody;\n+import io.restassured.specification.RequestSpecification;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import ru.devray.restassureddemo.entities.StockPrice;\n+\n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n+\n+import static io.restassured.RestAssured.baseURI;\n+import static io.restassured.RestAssured.given;\n+\n+public class StockMarket {\n+    public static final String API_KEY = \"9bbdd5ea7afbd7cb80370f3254b211b5\";\n+    public static final String BASE_URI = \"https://financialmodelingprep.com/\";\n+    public static final String endPoint = \"api/v3/sectors-performance?apikey=\";\n+    public static RequestSpecification spec;   //переменная для подготовки первоначального состояния запросов\n+\n+    @BeforeAll\n+    static void setUp(){\n+        spec = new RequestSpecBuilder()\n+                .setBaseUri(BASE_URI)\n+                .log(LogDetail.ALL)\n+                .setAccept(ContentType.JSON)\n+                .build();\n+    }\n+\n+    @DisplayName(\"Проверяем успешность зарузки сайта - приходит статус код 200\")\n+    @Test\n+    void checkStatusCode(){\n+        given().spec(spec)\n+                .when().get(endPoint+API_KEY)\n+                .then().statusCode(200) //проверяем код ответа от сервера\n+                .and().body(Matchers.notNullValue()); //тело ответа  не пустое\n+    }\n+\n+    @DisplayName(\"Проверяем что сектор 1 = Aerospace & Defense\")\n+    @Test\n+    void getSector(){\n+        given().spec(spec)\n+                .when().get(endPoint + API_KEY)\n+                .then().body(\"sector[0]\", Matchers.equalTo(\"Aerospace & Defense\"));}\n+//\n+        @DisplayName(\"Негативный тест.Проверяем несовпадение значения сектора 2.\")\n+        @Test\n+        void getNegativeTest(){\n+\n+            given().spec(spec)\n+                            .when().get(endPoint + API_KEY)\n+                            .then().body(\"sector[1]\",Matchers.not(\"Airlnes\"));\n+\n+\n+       }\n+\n+        @DisplayName(\"Проверяем, что значения полей  sector и changesPercentage\")\n+        @Test\n+        void getFields(){\n+            given().spec(spec)\n+                    .when().get(endPoint + API_KEY)\n+                    .then().body(\"sector\", Matchers.notNullValue())\n+                    .and().body(\"changesPercentage\", Matchers.notNullValue());\n+\n+        }\n+    }\n+"
  }
]
