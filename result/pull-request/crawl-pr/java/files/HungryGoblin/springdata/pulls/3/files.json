[
  {
    "sha": "df5e93ad62a2bb95ed9e6cfd648d5081c38d3c11",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/pom.xml",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/pom.xml",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/pom.xml?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -17,6 +17,11 @@\n         <java.version>11</java.version>\n     </properties>\n     <dependencies>\n+        <dependency>\n+            <groupId>org.modelmapper</groupId>\n+            <artifactId>modelmapper</artifactId>\n+            <version>2.3.5</version>\n+        </dependency>\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-data-jpa</artifactId>"
  },
  {
    "sha": "12df93f961b49dad51f72154dfc9e2db2576faea",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/ProductAppConfig.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/ProductAppConfig.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/ProductAppConfig.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/ProductAppConfig.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.geekbrains.spring.springdata;\n+\n+import org.modelmapper.ModelMapper;\n+import org.modelmapper.convention.MatchingStrategies;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import ru.geekbrains.spring.springdata.controller.ProductController;\n+\n+@Configuration\n+public class ProductAppConfig {\n+\n+    @Bean\n+    public ModelMapper modelMapper() {\n+        ModelMapper mapper = new ModelMapper();\n+        mapper.getConfiguration()\n+                .setMatchingStrategy(MatchingStrategies.STRICT)\n+                .setFieldMatchingEnabled(true)\n+                .setSkipNullEnabled(true);\n+        return mapper;\n+    }\n+\n+}"
  },
  {
    "sha": "755d39f70cf7c55d9fbcfc354732e5b427b29efd",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/controller/ProductController.java",
    "status": "modified",
    "additions": 57,
    "deletions": 46,
    "changes": 103,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/controller/ProductController.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/controller/ProductController.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/controller/ProductController.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -4,99 +4,110 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.server.ResponseStatusException;\n-import ru.geekbrains.spring.springdata.model.Product;\n+import ru.geekbrains.spring.springdata.exceptions.ResourceNotFoundException;\n import ru.geekbrains.spring.springdata.model.SortDirection;\n+import ru.geekbrains.spring.springdata.model.dtos.ProductDto;\n+import ru.geekbrains.spring.springdata.model.mappers.DtoMapper;\n import ru.geekbrains.spring.springdata.services.ProductService;\n \n-\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n @RestController\n-@RequestMapping(\"/product\")\n+@RequestMapping(\"/api/v1/products\")\n+\n public class ProductController {\n \n     @Autowired\n     private ProductService productService;\n \n-    @GetMapping\n-    public List<Product> getAll() {\n-        return productService.getAll();\n-    }\n-\n-    @GetMapping(\"/{id}\")\n-    public Product getById(@PathVariable Long id) {\n-        return productService.getById(id);\n-    }\n+    @Autowired\n+    private DtoMapper dtoMapper;\n \n-    @GetMapping(\"/name\")\n-    public Product getByName(@RequestParam String name) {\n-        return productService.getByName(name);\n+    @GetMapping\n+    @ResponseBody\n+    public List<ProductDto> getAll() {\n+        return dtoMapper.toProductDtoList(productService.getAll());\n     }\n \n-    @PostMapping\n-    public Product add(@RequestBody Product product) {\n-        return productService.add(product);\n+    // http://localhost:8189/geek/api/v1/products/add\n+    @PostMapping(\"/add\")\n+    @ResponseBody\n+    public ProductDto add(@RequestBody ProductDto productDto) {\n+        return dtoMapper.toProductDto(productService.add(dtoMapper.toProduct(productDto)));\n     }\n \n     @DeleteMapping(\"/del/{id}\")\n     public void delete(@PathVariable Long id) {\n         productService.delete(id);\n     }\n \n-    // http://localhost:8189/geek/product/filter?min=300&max=500\n-    @GetMapping(\"/filter\")\n-    public List<Product> getAll(@RequestParam Integer min, @RequestParam Integer max) {\n-        return productService.getFiltered(min, max);\n-    }\n-\n-    // http://localhost:8189/geek/product/pricege?from=300\n-    @GetMapping(\"/pricege\")\n-    public List<Product> getPriceFrom(@RequestParam Integer from) {\n-        return productService.getPriceFrom(from);\n+    // http://localhost:8189/geek/api/v1/1\n+    @GetMapping(\"/{id}\")\n+    @ResponseBody\n+    public ProductDto findProductById(@PathVariable Long id) {\n+        return productService\n+                .getById(id)\n+                .map(ProductDto::new)\n+                .orElseThrow(() -> new ResourceNotFoundException(\n+                        String.format(\"Product with id: %d doesn't exist\", id)));\n     }\n \n-    // http://localhost:8189/geek/product/pricele?to=300\n-    @GetMapping(\"/pricele\")\n-    public List<Product> getPriceTo(@RequestParam Integer to) {\n-        return productService.getPriceTo(to);\n+    // http://localhost:8189/geek/api/v1/products/name/Iphone X\n+    @GetMapping(\"/name/{name}\")\n+    @ResponseBody\n+    public ProductDto getByName(@PathVariable String name) {\n+        return productService\n+                .getByName(name)\n+                .map(ProductDto::new)\n+                .orElseThrow(() -> new ResourceNotFoundException(\n+                String.format(\"Product with name: '%s' doesn't exist\", name)));\n     }\n \n-    @GetMapping(\"/find\")\n-    public List<Product> getBYNamSortDirection(@RequestParam Integer to) {\n-        return productService.getPriceTo(to);\n+    // http://localhost:8189/geek/api/v1/products/filter?min=300&max=500\n+    @GetMapping(\"/filter\")\n+    @ResponseBody\n+    public ProductDto getAll(@RequestParam Integer min, @RequestParam Integer max) {\n+        return productService\n+                .getFilteredByPrice(min, max)\n+                .map(ProductDto::new)\n+                .orElseThrow(() -> new ResourceNotFoundException(\n+                String.format(\"Products with price %d to %d are not available\", min, max)));\n     }\n \n     private static final int DEFAULT_PAGE_SIZE = 10;\n     // http://localhost:8189/geek/product/paged?page=2&size=3\n     @GetMapping(\"paged\")\n-    public List<Product> getAllPaged(\n+    @ResponseBody\n+    public List<ProductDto> getAllPaged(\n             @RequestParam Integer page,\n             @RequestParam Integer size) {\n         if (page == null || page <= 0) page = 1;\n         if (size == null || size <= 0) size = DEFAULT_PAGE_SIZE;\n-        return productService.getAllPaged(page, size);\n+        return dtoMapper.toProductDtoList(productService.getAllPaged(page, size));\n     }\n \n     // http://localhost:8189/geek/product/byprice\n     @GetMapping(\"/byprice\")\n-    public List<Product> getAllByPrice() {\n-        return productService.getAllByPrice(SortDirection.ASC);\n+    @ResponseBody\n+    public List<ProductDto> getAllByPrice() {\n+        return dtoMapper.toProductDtoList(productService.getAllByPrice(SortDirection.ASC));\n     }\n \n     // http://localhost:8189/geek/product/bypricedesc\n     @GetMapping(\"/bypricedesc\")\n-    public List<Product> getAllByPriceDesc() {\n-        return productService.getAllByPrice(SortDirection.DESC);\n+    @ResponseBody\n+    public List<ProductDto> getAllByPriceDesc() {\n+        return dtoMapper.toProductDtoList(productService.getAllByPrice(SortDirection.DESC));\n     }\n \n-    // http://localhost:8189/geek/product/sorted?name=ASC&cost=DESC\n+    // http://localhost:8189/geek/product/sorted?name=ASC&price=DESC\n     @GetMapping(\"/sorted\")\n-    public List<Product> getAllSorted(@RequestParam Map<String, String> params) {\n-        List<Product> productList;\n+    @ResponseBody\n+    public List<ProductDto> getAllSorted(@RequestParam Map<String, String> params) {\n+        List<ProductDto> productList;\n         try {\n-            productList = productService.getAllSorted(params);\n+            productList = dtoMapper.toProductDtoList(productService.getAllSorted(params));\n         } catch (RuntimeException e) {\n             throw new ResponseStatusException(\n                     HttpStatus.BAD_REQUEST, e.getMessage(), e);"
  },
  {
    "sha": "cfe1c9b95c98df19f1082a535a9a1468095f749a",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/controller/ProductOrderController.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/controller/ProductOrderController.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/controller/ProductOrderController.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/controller/ProductOrderController.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,47 @@\n+package ru.geekbrains.spring.springdata.controller;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.*;\n+import ru.geekbrains.spring.springdata.model.dtos.ProductOrderDto;\n+import ru.geekbrains.spring.springdata.model.mappers.DtoMapper;\n+import ru.geekbrains.spring.springdata.services.OrderService;\n+\n+import java.util.List;\n+\n+@RestController\n+@RequestMapping(\"/api/v1/orders\")\n+\n+public class ProductOrderController {\n+\n+    @Autowired\n+    private OrderService orderService;\n+\n+    @Autowired\n+    private DtoMapper dtoMapper;\n+\n+\n+    // http://localhost:8189/geek/api/v1/orders\n+    @GetMapping\n+    @ResponseBody\n+    public List<ProductOrderDto> getOrders() {\n+        return dtoMapper.toProductOrderDtoList(orderService.getOrder());\n+    }\n+\n+    // http://localhost:8189/geek/api/v1/orders/add?id=1&number=3\n+    @GetMapping(\"add\")\n+    @ResponseBody\n+    public List<ProductOrderDto> addOrder(\n+            @RequestParam Long id,\n+            @RequestParam int number) {\n+        return dtoMapper.toProductOrderDtoList(orderService.addOrderItem(id, number));\n+    }\n+\n+    // http://localhost:8189/geek/api/v1/orders/rem?id=1\n+    @GetMapping(\"rem\")\n+    @ResponseBody\n+    public List<ProductOrderDto> removeOrder(\n+            @RequestParam Long id) {\n+        return dtoMapper.toProductOrderDtoList(orderService.removeOrderItem(id));\n+    }\n+\n+}"
  },
  {
    "sha": "827f74ad21f1f533c13f18699a042c6190c19bd7",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/exceptions/BadRequestException.java",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/97768ad425271f0e389604ef3a7fe1d8e518fabc/src/main/java/ru/geekbrains/spring/springdata/exceptions/BadRequestException.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/97768ad425271f0e389604ef3a7fe1d8e518fabc/src/main/java/ru/geekbrains/spring/springdata/exceptions/BadRequestException.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/exceptions/BadRequestException.java?ref=97768ad425271f0e389604ef3a7fe1d8e518fabc",
    "patch": "@@ -1,8 +0,0 @@\n-package ru.geekbrains.spring.springdata.exceptions;\n-\n-public class BadRequestException extends RuntimeException {\n-\n-    public BadRequestException (String message) {\n-        super (message);\n-    }\n-}"
  },
  {
    "sha": "8c6efda06c0d782c841ddeac6b73183be06833a5",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/exceptions/CommonException.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/CommonException.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/CommonException.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/exceptions/CommonException.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,17 @@\n+package ru.geekbrains.spring.springdata.exceptions;\n+\n+\n+import lombok.Data;\n+\n+import java.util.Date;\n+\n+@Data\n+public class CommonException extends RuntimeException{\n+    private String message;\n+    private Date timestamp;\n+\n+    public CommonException(String message) {\n+        this.message = message;\n+        this.timestamp = new Date();\n+    }\n+}"
  },
  {
    "sha": "853d97de19f96f954b4e5e7878fd696410eb9a10",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/exceptions/ExceptionControllerAdvice.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/ExceptionControllerAdvice.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/ExceptionControllerAdvice.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/exceptions/ExceptionControllerAdvice.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,33 @@\n+package ru.geekbrains.spring.springdata.exceptions;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+\n+@Slf4j\n+@ControllerAdvice\n+public class ExceptionControllerAdvice {\n+\n+    @ExceptionHandler\n+    public ResponseEntity<?> handleResourceNotFoundException(RequestException e) {\n+        log.error(e.getMessage());\n+        CommonException err = new CommonException(e.getMessage());\n+        return new ResponseEntity<>(err, HttpStatus.NOT_FOUND);\n+    }\n+\n+    @ExceptionHandler\n+    public ResponseEntity<?> handleResourceNotFoundException(ResourceNotFoundException e) {\n+        log.error(e.getMessage());\n+        CommonException err = new CommonException(e.getMessage());\n+        return new ResponseEntity<>(err, HttpStatus.NOT_FOUND);\n+    }\n+\n+    @ExceptionHandler\n+    public ResponseEntity<?> handleNoAuthException(NoAuthException e) {\n+        log.error(e.getMessage());\n+        CommonException err = new CommonException(e.getMessage());\n+        return new ResponseEntity<>(err, HttpStatus.UNAUTHORIZED);\n+    }\n+}"
  },
  {
    "sha": "9cc6cb35b5c2d6117c8f8b57116d8131127ee37a",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/exceptions/NoAuthException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/NoAuthException.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/NoAuthException.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/exceptions/NoAuthException.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.geekbrains.spring.springdata.exceptions;\n+\n+public class NoAuthException extends CommonException {\n+    public NoAuthException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "f0b2881f4027a69c9469a9986b9ca58d438788f3",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/exceptions/RequestException.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/RequestException.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/RequestException.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/exceptions/RequestException.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.geekbrains.spring.springdata.exceptions;\n+\n+public class RequestException extends RuntimeException {\n+\n+    public RequestException(String message) {\n+        super (message);\n+    }\n+\n+}"
  },
  {
    "sha": "0aac70ddae39fb5534fb71860af78a7f851d773e",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/exceptions/ResourceNotFoundException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/ResourceNotFoundException.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/exceptions/ResourceNotFoundException.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/exceptions/ResourceNotFoundException.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.geekbrains.spring.springdata.exceptions;\n+\n+public class ResourceNotFoundException extends CommonException {\n+    public ResourceNotFoundException(String message) {\n+        super(message);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4f37540bb1b98f37cdb9608cdcaae863ee1613d5",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/model/OrderItem.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/model/OrderItem.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/model/OrderItem.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/model/OrderItem.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,29 @@\n+package ru.geekbrains.spring.springdata.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import ru.geekbrains.spring.springdata.exceptions.ResourceNotFoundException;\n+import ru.geekbrains.spring.springdata.model.mappers.DtoMapper;\n+import ru.geekbrains.spring.springdata.repository.ProductRepository;\n+import ru.geekbrains.spring.springdata.services.ProductService;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class OrderItem {\n+\n+    @Id\n+    private long id;\n+    private String name;\n+    private int number;\n+    private int price;\n+\n+    public int getTotal () {\n+        return this.number * this.price;\n+    }\n+}"
  },
  {
    "sha": "659d047d55f298697d71daf19550e5673e466044",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/model/dtos/ProductDto.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/model/dtos/ProductDto.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/model/dtos/ProductDto.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/model/dtos/ProductDto.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,20 @@\n+package ru.geekbrains.spring.springdata.model.dtos;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import ru.geekbrains.spring.springdata.model.Product;\n+\n+@Data\n+@NoArgsConstructor\n+public class ProductDto {\n+\n+    private Long id;\n+    private String name;\n+    private int price;\n+\n+    public ProductDto(Product p) {\n+        this.id = p.getId();\n+        this.name = p.getName();\n+        this.price = p.getPrice();\n+    }\n+}"
  },
  {
    "sha": "37c3f13cdf3863271db8ae64c28af843d012390d",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/model/dtos/ProductOrderDto.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/model/dtos/ProductOrderDto.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/model/dtos/ProductOrderDto.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/model/dtos/ProductOrderDto.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,23 @@\n+package ru.geekbrains.spring.springdata.model.dtos;\n+\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import ru.geekbrains.spring.springdata.model.OrderItem;\n+\n+@Data\n+@NoArgsConstructor\n+public class ProductOrderDto {\n+\n+    private long id;\n+    private String name;\n+    private int number;\n+    private int price;\n+    private int total;\n+\n+    public ProductOrderDto(OrderItem o) {\n+        this.id = o.getId();\n+        this.name = o.getName();\n+        this.price = o.getPrice();\n+        this.total = o.getTotal();\n+    }\n+}"
  },
  {
    "sha": "30bcfde863650565ef51321645539be7dea0bd6a",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/model/mappers/DtoMapper.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/model/mappers/DtoMapper.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/model/mappers/DtoMapper.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/model/mappers/DtoMapper.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,55 @@\n+package ru.geekbrains.spring.springdata.model.mappers;\n+\n+import org.modelmapper.ModelMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import ru.geekbrains.spring.springdata.model.Product;\n+import ru.geekbrains.spring.springdata.model.OrderItem;\n+import ru.geekbrains.spring.springdata.model.dtos.ProductDto;\n+import ru.geekbrains.spring.springdata.model.dtos.ProductOrderDto;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class DtoMapper {\n+\n+    @Autowired\n+    private ModelMapper modelMapper;\n+\n+    public Product toProduct(ProductDto product) {\n+        return Objects.isNull(product) ? null : modelMapper.map(product, Product.class);\n+    }\n+\n+    public ProductDto toProductDto(Product entity) {\n+        return Objects.isNull(entity) ? null : modelMapper.map(entity, ProductDto.class);\n+    }\n+\n+    public List<Product> toProductList(List<ProductDto> dtos) {\n+        return Objects.isNull(dtos) ? null : dtos\n+                .stream()\n+                .map(productDto -> modelMapper.map(productDto, Product.class))\n+                .collect(Collectors.toList());\n+    }\n+\n+    public List<ProductDto> toProductDtoList(List<Product> products) {\n+        return Objects.isNull(products) ? null : products\n+                .stream()\n+                .map(product -> modelMapper.map(product, ProductDto.class))\n+                .collect(Collectors.toList());\n+    }\n+\n+    public OrderItem toProductOrder(ProductOrderDto productOrder) {\n+        return Objects.isNull(productOrder) ? null : modelMapper.map(productOrder, OrderItem.class);\n+    }\n+\n+    public List<ProductOrderDto> toProductOrderDtoList(List<OrderItem> orders) {\n+        return Objects.isNull(orders) ? null : orders\n+                .stream()\n+                .map(product -> modelMapper.map(product, ProductOrderDto.class))\n+                .collect(Collectors.toList());\n+    }\n+\n+\n+}"
  },
  {
    "sha": "54ddbf851c8058ce623fa593802e727bba3ed085",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/repository/OrderRepository.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/repository/OrderRepository.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/repository/OrderRepository.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/repository/OrderRepository.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,73 @@\n+package ru.geekbrains.spring.springdata.repository;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import ru.geekbrains.spring.springdata.exceptions.ResourceNotFoundException;\n+import ru.geekbrains.spring.springdata.model.OrderItem;\n+import ru.geekbrains.spring.springdata.model.Product;\n+import ru.geekbrains.spring.springdata.services.OrderService;\n+import ru.geekbrains.spring.springdata.services.ProductService;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+\n+@Repository\n+public class OrderRepository {\n+\n+    @Autowired\n+    private OrderService orderService;\n+\n+    @Autowired\n+    private ProductService productService;\n+\n+    private Map<Long, Integer> orderLines = new HashMap<>();\n+\n+    public List<OrderItem> addOrderItem(long id, int number) {\n+        Product product = productService\n+                .getById(id)\n+                .orElseThrow(() ->\n+                        new ResourceNotFoundException(String.format(\"Product with id: %d doesn't exist\", id)));\n+        if (number <= 0) number = 1;\n+        if (orderLines.containsKey(product.getId())) {\n+            number += orderLines.remove(product.getId());\n+        }\n+        orderLines.put(product.getId(), number);\n+        return getOrder();\n+    }\n+\n+    public List<OrderItem> removeOrderItem(long id) {\n+        orderLines.remove(id);\n+        return getOrder();\n+    }\n+\n+    public List<OrderItem> emptyOrder() {\n+        orderLines.clear();\n+        return getOrder();\n+    }\n+\n+    public int getTotal() {\n+        AtomicInteger total = new AtomicInteger();\n+        orderLines.forEach((id, number) -> total.addAndGet(productService\n+                .getById(id)\n+                .orElseThrow(() -> new ResourceNotFoundException(\"Unexpected error: user shopping cart has spoiled\"))\n+                .getPrice() * number));\n+        return total.get();\n+    }\n+\n+    public List<OrderItem> getOrder() {\n+        List<OrderItem> orders = new ArrayList<>();\n+        try {\n+            orderLines.forEach((id, number) -> orders.add(orderService.createOrderItem(id, number)));\n+        } catch (RuntimeException e) {\n+            e.printStackTrace();\n+        }\n+        return orders;\n+    }\n+\n+\n+\n+}"
  },
  {
    "sha": "abbaeccf3e3fc4a6e2be60c5c4492f48054c2f11",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/repository/ProductRepository.java",
    "status": "modified",
    "additions": 4,
    "deletions": 9,
    "changes": 13,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/repository/ProductRepository.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/repository/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/repository/ProductRepository.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -5,21 +5,16 @@\n import org.springframework.stereotype.Repository;\n import ru.geekbrains.spring.springdata.model.Product;\n \n-import java.util.List;\n+import java.util.Optional;\n \n @Repository\n public interface ProductRepository extends JpaRepository<Product, Long> {\n \n-    Product findProductByName(String name);\n+    Optional<Product> findProductByName(String name);\n \n     @Query(\"select s from Product s where s.id = :id\")\n+    Optional<Product> customProductQuery(int id);\n \n-    List<Product> customProductQuery(int id);\n-\n-    List<Product> findAllByPriceBetween(int min, int max);\n-\n-    List<Product> findAllByPriceAfter(int from);\n-\n-    List<Product> findAllByPriceBefore(int to);\n+    Optional<Product> findAllByPriceBetween(int min, int max);\n \n }"
  },
  {
    "sha": "ccd4a9e6630bc2ef115c019ddc02a9bc2c64d1a0",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/services/OrderService.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/services/OrderService.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/services/OrderService.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/services/OrderService.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,47 @@\n+package ru.geekbrains.spring.springdata.services;\n+\n+import lombok.Data;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import ru.geekbrains.spring.springdata.exceptions.ResourceNotFoundException;\n+import ru.geekbrains.spring.springdata.model.Product;\n+import ru.geekbrains.spring.springdata.model.OrderItem;\n+import ru.geekbrains.spring.springdata.repository.OrderRepository;\n+\n+import java.util.List;\n+\n+@Service\n+@Data\n+public class OrderService {\n+\n+    @Autowired\n+    private ProductService productService;\n+\n+    @Autowired\n+    private OrderRepository orderRepository;\n+\n+    public OrderItem createOrderItem(long productId, int number) {\n+        Product product = productService\n+                .getById(productId)\n+                .orElseThrow(() -> new ResourceNotFoundException(\n+                        String.format(\"Product with id: d% does not exist\", productId)));\n+        return new OrderItem(product.getId(), product.getName(), product.getPrice(), number);\n+    }\n+\n+    public List<OrderItem> addOrderItem(long id, int number) {\n+        return orderRepository.addOrderItem(id, number);\n+    }\n+\n+    public List<OrderItem> removeOrderItem(long id) {\n+        return orderRepository.removeOrderItem(id);\n+    }\n+\n+    public List<OrderItem> emptyOrder() {\n+        return orderRepository.emptyOrder();\n+    }\n+\n+    public List<OrderItem> getOrder() {\n+        return orderRepository.getOrder();\n+    }\n+\n+}"
  },
  {
    "sha": "7e504986fe51fd6c845c39dcecb64d383499da94",
    "filename": "src/main/java/ru/geekbrains/spring/springdata/services/ProductService.java",
    "status": "modified",
    "additions": 18,
    "deletions": 17,
    "changes": 35,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/services/ProductService.java",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/java/ru/geekbrains/spring/springdata/services/ProductService.java",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/java/ru/geekbrains/spring/springdata/services/ProductService.java?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -1,26 +1,34 @@\n package ru.geekbrains.spring.springdata.services;\n \n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n-import ru.geekbrains.spring.springdata.exceptions.BadRequestException;\n+import ru.geekbrains.spring.springdata.exceptions.RequestException;\n import ru.geekbrains.spring.springdata.model.Product;\n import ru.geekbrains.spring.springdata.model.SortDirection;\n+import ru.geekbrains.spring.springdata.model.mappers.DtoMapper;\n import ru.geekbrains.spring.springdata.repository.ProductRepository;\n \n-import javax.persistence.criteria.Order;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n \n @Service\n+@Data\n+@NoArgsConstructor\n public class ProductService {\n \n     @Autowired\n     private ProductRepository productRepository;\n \n+    @Autowired\n+    private DtoMapper dtoMapper;\n+\n     @Transactional\n     public List<Product> getAll() {\n         return productRepository.findAll(Sort.by(\"name\").and(Sort.by(\"price\")));\n@@ -46,19 +54,23 @@\n             sortParams.forEach((key, value) -> sortOrder.add(new Sort.Order(Sort.Direction.valueOf(value), key)));\n             productList = productRepository.findAll(Sort.by(sortOrder));\n         } catch (RuntimeException e) {\n-            throw new BadRequestException(String.format(\"Sorted request error: %s\", e.getMessage()));\n+            throw new RequestException(String.format(\"Sorted request error: %s\", e.getMessage()));\n         }\n         return productList;\n     }\n \n-    public Product getById(Long id) {\n-        return productRepository.findById(id).get();\n+    public Optional<Product> getById(Long id) {\n+        return productRepository.findById(id);\n     }\n \n-    public Product getByName(String name) {\n+    public Optional<Product> getByName(String name) {\n         return productRepository.findProductByName(name);\n     }\n \n+    public Optional<Product> getFilteredByPrice(int min, int max) {\n+        return productRepository.findAllByPriceBetween(min, max);\n+    }\n+\n     public Product add(Product product) {\n         return productRepository.save(product);\n     }\n@@ -67,15 +79,4 @@ public void delete(Long id) {\n         productRepository.deleteById(id);\n     }\n \n-    public List<Product> getFiltered(int min, int max) {\n-        return productRepository.findAllByPriceBetween(min, max);\n-    }\n-\n-    public List<Product> getPriceTo(Integer to) {\n-        return productRepository.findAllByPriceBefore(to);\n-    }\n-\n-    public List<Product> getPriceFrom(Integer from) {\n-        return productRepository.findAllByPriceAfter(from);\n-    }\n }"
  },
  {
    "sha": "42dc7df6618df9cbc43f938481bb2e3ed6fbfe02",
    "filename": "src/main/resources/static/index.html",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/resources/static/index.html",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/resources/static/index.html",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/resources/static/index.html?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,93 @@\n+<!doctype html>\n+\n+<html ng-app=\"app\">\n+\n+<head>\n+    <meta charset=\"utf-8\">\n+    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">\n+    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n+    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\n+\n+    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular.min.js\"></script>\n+    <script src=\"index.js\"></script>\n+</head>\n+\n+<body>\n+\n+<div class=\"container\" ng-controller=\"indexController\">\n+    <h1>Happy Market</h1>\n+\n+    <h3>Фильтр</h3>\n+    <form novalidate ng-submit=\"fillTable()\">\n+        <div class=\"form-group row\">\n+            <div class=\"form-group col-md-3\">\n+                <label for=\"filterTitle\">Название товара</label>\n+                <input class=\"form-control\" type=\"text\" ng-model=\"filter.title\" id=\"filterTitle\">\n+            </div>\n+            <div class=\"form-group col-md-3\">\n+                <label for=\"filterMinPrice\">Минимальная цена</label>\n+                <input class=\"form-control\" type=\"number\" ng-model=\"filter.min_price\" id=\"filterMinPrice\">\n+            </div>\n+            <div class=\"form-group col-md-3\">\n+                <label for=\"filterMaxPrice\">Максимальная цена</label>\n+                <input class=\"form-control\" type=\"number\" ng-model=\"filter.max_price\" id=\"filterMaxPrice\">\n+            </div>\n+        </div>\n+        <div>\n+            <button class=\"btn btn-success\" type=\"submit\">Применить</button>\n+        </div>\n+    </form>\n+\n+    <h3>Список товаров</h3>\n+    <table class=\"table table-hover\" cellpadding=\"0\" cellspacing=\"0\">\n+        <thead>\n+        <tr>\n+            <td>Название</td>\n+            <td>Цена</td>\n+            <td></td>\n+        </tr>\n+        </thead>\n+        <tbody>\n+        <tr ng-repeat=\"p in ProductsPage.content\">\n+            <td>{{p.title}}</td>\n+            <td>{{p.price}}</td>\n+            <td>\n+                <button class=\"btn btn-danger\" ng-click=\"deleteProductById(p.id)\">Удалить товар</button>\n+            </td>\n+        </tr>\n+        </tbody>\n+    </table>\n+\n+    <nav aria-label=\"Page navigation\">\n+        <ul class=\"pagination\">\n+            <li ng-class=\"ProductsPage.first ? 'page-item disabled' : 'page-item'\">\n+                <a class=\"page-link\" ng-click=\"fillTable(ProductsPage.number)\">Пред.</a>\n+            </li>\n+\n+            <li ng-class=\"ProductsPage.number == pageIndex - 1 ? 'page-item active' : 'page-item'\" ng-repeat=\"pageIndex in PaginationArray\">\n+                <a class=\"page-link\" ng-click=\"fillTable(pageIndex)\">{{pageIndex}}</a>\n+            </li>\n+\n+            <li ng-class=\"ProductsPage.last ? 'page-item disabled' : 'page-item'\">\n+                <a class=\"page-link\" ng-click=\"fillTable(ProductsPage.number + 2)\">След.</a>\n+            </li>\n+        </ul>\n+    </nav>\n+\n+    <h3>Добавить новый товар</h3>\n+    <form novalidate ng-submit=\"submitCreateNewProduct()\">\n+        <div class=\"form-group col-md-6\">\n+            <label for=\"newProductTitle\">Название</label>\n+            <input class=\"form-control\" type=\"text\" ng-model=\"newProduct.title\" id=\"newProductTitle\">\n+        </div>\n+        <div class=\"form-group col-md-6\">\n+            <label for=\"newProductPrice\">Цена</label>\n+            <input class=\"form-control\" type=\"number\" ng-model=\"newProduct.price\" id=\"newProductPrice\">\n+        </div>\n+        <div>\n+            <button class=\"btn btn-success\" type=\"submit\">Сохранить</button>\n+        </div>\n+    </form>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "b2f4ae0d263fadf5be98451acfdc6756c460311e",
    "filename": "src/main/resources/static/index.js",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/HungryGoblin/springdata/blob/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/resources/static/index.js",
    "raw_url": "https://github.com/HungryGoblin/springdata/raw/90742ca0a50157ef2c9a17627d3d352c102a885b/src/main/resources/static/index.js",
    "contents_url": "https://api.github.com/repos/HungryGoblin/springdata/contents/src/main/resources/static/index.js?ref=90742ca0a50157ef2c9a17627d3d352c102a885b",
    "patch": "@@ -0,0 +1,55 @@\n+angular.module('app', []).controller('indexController', function ($scope, $http) {\n+    const contextPath = 'http://localhost:8189/happy/api/v1';\n+\n+    $scope.fillTable = function (pageIndex = 1) {\n+        $http({\n+            url: contextPath + '/products',\n+            method: 'GET',\n+            params: {\n+                title: $scope.filter ? $scope.filter.title : null,\n+                min_price: $scope.filter ? $scope.filter.min_price : null,\n+                max_price: $scope.filter ? $scope.filter.max_price : null,\n+                p: pageIndex\n+            }\n+        }).then(function (response) {\n+            $scope.ProductsPage = response.data;\n+\n+            let minPageIndex = pageIndex - 2;\n+            if (minPageIndex < 1) {\n+                minPageIndex = 1;\n+            }\n+\n+            let maxPageIndex = pageIndex + 2;\n+            if (maxPageIndex > $scope.ProductsPage.totalPages) {\n+                maxPageIndex = $scope.ProductsPage.totalPages;\n+            }\n+\n+            $scope.PaginationArray = $scope.generatePagesIndexes(minPageIndex, maxPageIndex);\n+        });\n+    };\n+\n+    $scope.generatePagesIndexes = function(startPage, endPage) {\n+        let arr = [];\n+        for (let i = startPage; i < endPage + 1; i++) {\n+            arr.push(i);\n+        }\n+        return arr;\n+    }\n+\n+    $scope.submitCreateNewProduct = function () {\n+        $http.post(contextPath + '/products', $scope.newProduct)\n+            .then(function (response) {\n+                $scope.newProduct = null;\n+                $scope.fillTable();\n+            });\n+    };\n+\n+    $scope.deleteProductById = function (productId) {\n+        $http.delete(contextPath + '/products/' + productId)\n+            .then(function (response) {\n+                $scope.fillTable();\n+            });\n+    }\n+\n+    $scope.fillTable();\n+});\n\\ No newline at end of file"
  }
]
