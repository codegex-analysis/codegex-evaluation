[
  {
    "sha": "9677a6ca924647d07a3cd085c864fdb92bc55dc3",
    "filename": "core/src/main/java/com/netflix/conductor/core/Lifecycle.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/Netflix/conductor/blob/16af1d03c26121e92822f3c74cf6a378f2fc73d4/core/src/main/java/com/netflix/conductor/core/Lifecycle.java",
    "raw_url": "https://github.com/Netflix/conductor/raw/16af1d03c26121e92822f3c74cf6a378f2fc73d4/core/src/main/java/com/netflix/conductor/core/Lifecycle.java",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/java/com/netflix/conductor/core/Lifecycle.java?ref=16af1d03c26121e92822f3c74cf6a378f2fc73d4",
    "patch": "@@ -1,45 +0,0 @@\n-/*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- */\n-package com.netflix.conductor.core;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * This interface provides a means to help handle objects, especially those that are injected, that have a lifecycle\n- * component.  Guice explicitly does not support this and recommends a patter much like this.  This should be used by\n- * anything that needs to create resources or clean them up when the application is started or stopped, such as server\n- * listeners, clients, etc.\n- *\n- * @see <a href=\"https://github.com/google/guice/wiki/ModulesShouldBeFastAndSideEffectFree\">ModulesShouldBeFastAndSideEffectFree</a>\n- */\n-public interface Lifecycle {\n-\n-    Logger LOGGER = LoggerFactory.getLogger(Lifecycle.class);\n-\n-    default void start() throws Exception {\n-        registerShutdownHook();\n-    }\n-\n-    void stop() throws Exception;\n-\n-    default void registerShutdownHook() {\n-        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n-            try {\n-                stop();\n-            } catch (Exception e) {\n-                LOGGER.error(\"Error when trying to shutdown a lifecycle component: \" + this.getClass().getName(), e);\n-            }\n-        }));\n-    }\n-}"
  },
  {
    "sha": "f2b4f4a6cfe16095a22f189750a93473829263ed",
    "filename": "core/src/main/java/com/netflix/conductor/core/LifecycleAwareComponent.java",
    "status": "modified",
    "additions": 19,
    "deletions": 11,
    "changes": 30,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/LifecycleAwareComponent.java",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/LifecycleAwareComponent.java",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/java/com/netflix/conductor/core/LifecycleAwareComponent.java?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,30 +1,38 @@\n /*\n- * Copyright 2021 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.core;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.context.SmartLifecycle;\n \n-public class LifecycleAwareComponent implements SmartLifecycle {\n+public abstract class LifecycleAwareComponent implements SmartLifecycle {\n     private volatile boolean running = false;\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(LifecycleAwareComponent.class);\n+\n     @Override\n     public void start() {\n         running = true;\n+        LOGGER.info(\"{} started.\", getClass().getSimpleName());\n     }\n \n     @Override\n     public void stop() {\n         running = false;\n+        LOGGER.info(\"{} stopped.\", getClass().getSimpleName());\n     }\n \n     @Override"
  },
  {
    "sha": "7b6c3ffd8dc14083e6c543d40b1e6888a3b06c8c",
    "filename": "core/src/main/java/com/netflix/conductor/core/config/ConductorProperties.java",
    "status": "modified",
    "additions": 12,
    "deletions": 26,
    "changes": 38,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/config/ConductorProperties.java",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/config/ConductorProperties.java",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/java/com/netflix/conductor/core/config/ConductorProperties.java?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,14 +1,16 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.core.config;\n \n@@ -156,14 +158,6 @@\n      */\n     private boolean ownerEmailMandatory = true;\n \n-    /**\n-     * Configuration to enable {@link com.netflix.conductor.core.execution.WorkflowRepairService}, that tries to keep\n-     * ExecutionDAO and QueueDAO in sync, based on the task or workflow state.\n-     * <p>\n-     * This is disabled by default; To enable, the Queueing layer must implement QueueDAO.containsMessage method.\n-     */\n-    private boolean workflowRepairServiceEnabled = false;\n-\n     /**\n      * The number of threads to be usde in Scheduler used for polling events from multiple event queues. By default, a\n      * thread count equal to the number of CPU cores is chosen.\n@@ -440,14 +434,6 @@ public void setOwnerEmailMandatory(boolean ownerEmailMandatory) {\n         this.ownerEmailMandatory = ownerEmailMandatory;\n     }\n \n-    public boolean isWorkflowRepairServiceEnabled() {\n-        return workflowRepairServiceEnabled;\n-    }\n-\n-    public void setWorkflowRepairServiceEnabled(boolean workflowRepairServiceEnabled) {\n-        this.workflowRepairServiceEnabled = workflowRepairServiceEnabled;\n-    }\n-\n     public int getEventQueueSchedulerPollThreadCount() {\n         return eventQueueSchedulerPollThreadCount;\n     }"
  },
  {
    "sha": "8453685c9740605814dadfcc0d43b155662a5f18",
    "filename": "core/src/main/java/com/netflix/conductor/core/config/SchedulerConfiguration.java",
    "status": "modified",
    "additions": 30,
    "deletions": 10,
    "changes": 40,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/config/SchedulerConfiguration.java",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/config/SchedulerConfiguration.java",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/java/com/netflix/conductor/core/config/SchedulerConfiguration.java?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,20 +1,24 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.core.config;\n \n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n import rx.Scheduler;\n import rx.schedulers.Schedulers;\n \n@@ -23,8 +27,12 @@\n import java.util.concurrent.ThreadFactory;\n \n @Configuration(proxyBeanMethods = false)\n+@EnableScheduling\n+@EnableAsync\n public class SchedulerConfiguration {\n \n+    public static final String SWEEPER_EXECUTOR_NAME = \"WorkflowSweeperExecutor\";\n+\n     /**\n      * Used by some {@link com.netflix.conductor.core.events.queue.ObservableQueue} implementations.\n      *\n@@ -40,4 +48,16 @@ public Scheduler scheduler(ConductorProperties properties) {\n \n         return Schedulers.from(executorService);\n     }\n+\n+    @Bean(SWEEPER_EXECUTOR_NAME)\n+    public Executor sweeperExecutor(ConductorProperties properties) {\n+        if (properties.getSweeperThreadCount() <= 0) {\n+            throw new IllegalStateException(\"Cannot set workflow sweeper thread count to <=0. To disable workflow \"\n+                    + \"sweeper, set conductor.workflow-sweeper.enabled=false.\");\n+        }\n+        ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                .setNameFormat(\"sweeper-thread-%d\")\n+                .build();\n+        return Executors.newFixedThreadPool(properties.getSweeperThreadCount(), threadFactory);\n+    }\n }"
  },
  {
    "sha": "7c298a17f3f8bde8a76e166af673b4c4d95abc6f",
    "filename": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowPoller.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/execution/WorkflowPoller.java",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/execution/WorkflowPoller.java",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/java/com/netflix/conductor/core/execution/WorkflowPoller.java?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -0,0 +1,79 @@\n+/*\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n+ */\n+package com.netflix.conductor.core.execution;\n+\n+import com.netflix.conductor.core.LifecycleAwareComponent;\n+import com.netflix.conductor.core.config.ConductorProperties;\n+import com.netflix.conductor.dao.QueueDAO;\n+import com.netflix.conductor.metrics.Monitors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.netflix.conductor.core.execution.WorkflowExecutor.DECIDER_QUEUE;\n+\n+@Component\n+@ConditionalOnProperty(name = \"conductor.workflow-sweeper.enabled\", havingValue = \"true\", matchIfMissing = true)\n+public class WorkflowPoller extends LifecycleAwareComponent {\n+\n+    private final WorkflowSweeper workflowSweeper;\n+    private final QueueDAO queueDAO;\n+    private final ConductorProperties properties;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WorkflowPoller.class);\n+\n+    public WorkflowPoller(WorkflowSweeper workflowSweeper, QueueDAO queueDAO, ConductorProperties properties) {\n+        this.workflowSweeper = workflowSweeper;\n+        this.queueDAO = queueDAO;\n+        this.properties = properties;\n+        LOGGER.info(\"WorkflowPoller Initialized.\");\n+    }\n+\n+    @Scheduled(fixedDelay = 500, initialDelay = 500)\n+    public void pollAndSweep() {\n+        try {\n+            if (!isRunning()) {\n+                LOGGER.debug(\"Component stopped, skip workflow sweep\");\n+            } else {\n+                List<String> workflowIds = queueDAO.pop(DECIDER_QUEUE,\n+                        properties.getSweeperThreadCount(), 2000);\n+                if (workflowIds != null) {\n+                    // wait for all workflow ids to be \"swept\"\n+                    CompletableFuture.allOf(workflowIds\n+                            .stream()\n+                            .map(workflowSweeper::sweepAsync)\n+                            .toArray(CompletableFuture[]::new))\n+                            .get();\n+                    LOGGER.debug(\"Sweeper processed {} from the decider queue\", String.join(\",\", workflowIds));\n+                }\n+                //NOTE: Disabling the sweeper implicitly disables this metric.\n+                recordQueueDepth();\n+            }\n+        } catch (Exception e) {\n+            Monitors.error(WorkflowPoller.class.getSimpleName(), \"poll\");\n+            LOGGER.error(\"Error when polling for workflows\", e);\n+        }\n+    }\n+\n+    private void recordQueueDepth() {\n+        int currentQueueSize = queueDAO.getSize(DECIDER_QUEUE);\n+        Monitors.recordGauge(DECIDER_QUEUE, currentQueueSize);\n+    }\n+}"
  },
  {
    "sha": "7aa1c37b001657fd4e7ffb8ebb4dee96bef001b2",
    "filename": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowRepairService.java",
    "status": "modified",
    "additions": 18,
    "deletions": 23,
    "changes": 41,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/execution/WorkflowRepairService.java",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/execution/WorkflowRepairService.java",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/java/com/netflix/conductor/core/execution/WorkflowRepairService.java?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,14 +1,14 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ * Copyright 2021 Netflix, Inc.\n+ *  <p>\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *   the License. You may obtain a copy of the License at\n+ *   <p>\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *   <p>\n+ *   Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *   an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *   specific language governing permissions and limitations under the License.\n  */\n package com.netflix.conductor.core.execution;\n \n@@ -21,22 +21,24 @@\n import com.netflix.conductor.dao.ExecutionDAO;\n import com.netflix.conductor.dao.QueueDAO;\n import com.netflix.conductor.metrics.Monitors;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.function.Predicate;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.stereotype.Service;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Predicate;\n+\n /**\n  * A helper service that tries to keep ExecutionDAO and QueueDAO in sync, based on the task or workflow state.\n  * <p>\n  * This service expects that the underlying Queueing layer implements QueueDAO.containsMessage method. This can be\n- * controlled with {@link com.netflix.conductor.core.config.ConductorProperties#isWorkflowRepairServiceEnabled()}\n+ * controlled with <code>conductor.workflow-repair-service.enabled</code>\n  * property.\n  */\n @SuppressWarnings(\"SpringJavaInjectionPointsAutowiringInspection\")\n @Service\n+@ConditionalOnProperty(name = \"conductor.workflow-repair-service.enabled\", havingValue = \"true\")\n public class WorkflowRepairService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(WorkflowRepairService.class);\n@@ -56,20 +58,16 @@\n         }\n     };\n \n-    @Autowired\n     public WorkflowRepairService(ExecutionDAO executionDAO, QueueDAO queueDAO, ConductorProperties properties) {\n         this.executionDAO = executionDAO;\n         this.queueDAO = queueDAO;\n         this.properties = properties;\n+        LOGGER.info(\"WorkflowRepairService Initialized\");\n     }\n \n     /**\n      * Verify and repair if the workflowId exists in deciderQueue, and then if each scheduled task has relevant message\n      * in the queue.\n-     *\n-     * @param workflowId\n-     * @param includeTasks\n-     * @return\n      */\n     public boolean verifyAndRepairWorkflow(String workflowId, boolean includeTasks) {\n         Workflow workflow = executionDAO.getWorkflow(workflowId, includeTasks);\n@@ -84,9 +82,7 @@ public boolean verifyAndRepairWorkflow(String workflowId, boolean includeTasks)\n     }\n \n     /**\n-     * Verify and repair tasks in a workflow\n-     *\n-     * @param workflowId\n+     * Verify and repair tasks in a workflow.\n      */\n     public void verifyAndRepairWorkflowTasks(String workflowId) {\n         Workflow workflow = executionDAO.getWorkflow(workflowId, true);\n@@ -96,7 +92,6 @@ public void verifyAndRepairWorkflowTasks(String workflowId) {\n     /**\n      * Verify and fix if Workflow decider queue contains this workflowId.\n      *\n-     * @param workflow\n      * @return true - if the workflow was queued for repair\n      */\n     private boolean verifyAndRepairDeciderQueue(Workflow workflow) {"
  },
  {
    "sha": "d46423a29c9091ab6d564b924bc95083568cd3c8",
    "filename": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowSweeper.java",
    "status": "modified",
    "additions": 59,
    "deletions": 95,
    "changes": 154,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/execution/WorkflowSweeper.java",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/core/execution/WorkflowSweeper.java",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/java/com/netflix/conductor/core/execution/WorkflowSweeper.java?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,18 +1,20 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.core.execution;\n \n-import com.netflix.conductor.core.LifecycleAwareComponent;\n+import com.google.common.annotations.VisibleForTesting;\n import com.netflix.conductor.core.WorkflowContext;\n import com.netflix.conductor.core.config.ConductorProperties;\n import com.netflix.conductor.core.exception.ApplicationException;\n@@ -22,114 +24,76 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n \n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.TimeUnit;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.netflix.conductor.core.config.SchedulerConfiguration.SWEEPER_EXECUTOR_NAME;\n+import static com.netflix.conductor.core.execution.WorkflowExecutor.DECIDER_QUEUE;\n \n @SuppressWarnings(\"SpringJavaInjectionPointsAutowiringInspection\")\n @Component\n @ConditionalOnProperty(name = \"conductor.workflow-sweeper.enabled\", havingValue = \"true\", matchIfMissing = true)\n-public class WorkflowSweeper extends LifecycleAwareComponent {\n+public class WorkflowSweeper {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(WorkflowSweeper.class);\n \n-    private final ExecutorService executorService;\n     private final ConductorProperties properties;\n+    private final WorkflowExecutor workflowExecutor;\n+    private final WorkflowRepairService workflowRepairService;\n     private final QueueDAO queueDAO;\n-    private final int executorThreadPoolSize;\n \n     private static final String CLASS_NAME = WorkflowSweeper.class.getSimpleName();\n \n     @Autowired\n-    public WorkflowSweeper(WorkflowExecutor workflowExecutor, WorkflowRepairService workflowRepairService,\n-        ConductorProperties properties, QueueDAO queueDAO) {\n+    public WorkflowSweeper(WorkflowExecutor workflowExecutor,\n+                           Optional<WorkflowRepairService> workflowRepairService,\n+                           ConductorProperties properties,\n+                           QueueDAO queueDAO) {\n         this.properties = properties;\n         this.queueDAO = queueDAO;\n-        this.executorThreadPoolSize = properties.getSweeperThreadCount();\n-        if (executorThreadPoolSize <= 0) {\n-            throw new IllegalStateException(\"Cannot set workflow sweeper thread count to <=0. To disable workflow \"\n-                + \"sweeper, set conductor.workflow-sweeper.enabled=false.\");\n-        }\n-        this.executorService = Executors.newFixedThreadPool(executorThreadPoolSize);\n-        init(workflowExecutor, workflowRepairService);\n+        this.workflowExecutor = workflowExecutor;\n+        this.workflowRepairService = workflowRepairService.orElse(null);\n         LOGGER.info(\"Workflow Sweeper Initialized\");\n     }\n \n-    public void init(WorkflowExecutor workflowExecutor, WorkflowRepairService workflowRepairService) {\n-        ScheduledExecutorService deciderPool = Executors.newScheduledThreadPool(1);\n-        deciderPool.scheduleWithFixedDelay(() -> {\n-            if (!isRunning()) {\n-                LOGGER.debug(\"Component stopped, skip workflow sweep\");\n-            } else {\n-                try {\n-                    int currentQueueSize = queueDAO.getSize(WorkflowExecutor.DECIDER_QUEUE);\n-                    LOGGER.debug(\"Sweeper's current decider queue size: {}\", currentQueueSize);\n-                    List<String> workflowIds = queueDAO\n-                        .pop(WorkflowExecutor.DECIDER_QUEUE, 2 * executorThreadPoolSize, 2000);\n-                    if (workflowIds != null) {\n-                        LOGGER.debug(\"Sweeper retrieved {} workflows from the decider queue\", workflowIds.size());\n-                        sweep(workflowIds, workflowExecutor, workflowRepairService);\n-                    }\n-                } catch (Exception e) {\n-                    Monitors.error(CLASS_NAME, \"sweep\");\n-                    LOGGER.error(\"Error when sweeping workflow\", e);\n-                }\n-            }\n-        }, 500, 500, TimeUnit.MILLISECONDS);\n+    @Async(SWEEPER_EXECUTOR_NAME)\n+    public CompletableFuture<Void> sweepAsync(String workflowId) {\n+        sweep(workflowId);\n+        return CompletableFuture.completedFuture(null);\n     }\n \n-    public void sweep(List<String> workflowIds, WorkflowExecutor workflowExecutor,\n-        WorkflowRepairService workflowRepairService) throws Exception {\n-\n-        List<Future<?>> futures = new LinkedList<>();\n-        for (String workflowId : workflowIds) {\n-            Future<?> future = executorService.submit(() -> {\n-                try {\n-\n-                    WorkflowContext workflowContext = new WorkflowContext(properties.getAppId());\n-                    WorkflowContext.set(workflowContext);\n-                    if (LOGGER.isDebugEnabled()) {\n-                        LOGGER.debug(\"Running sweeper for workflow {}\", workflowId);\n-                    }\n-\n-                    if (properties.isWorkflowRepairServiceEnabled()) {\n-                        // Verify and repair tasks in the workflow.\n-                        workflowRepairService.verifyAndRepairWorkflowTasks(workflowId);\n-                    }\n+    @VisibleForTesting\n+    public void sweep(String workflowId) {\n+        try {\n+            WorkflowContext workflowContext = new WorkflowContext(properties.getAppId());\n+            WorkflowContext.set(workflowContext);\n+            LOGGER.debug(\"Running sweeper for workflow {}\", workflowId);\n \n-                    boolean done = workflowExecutor.decide(workflowId);\n-                    if (done) {\n-                        queueDAO.remove(WorkflowExecutor.DECIDER_QUEUE, workflowId);\n-                    } else {\n-                        queueDAO.setUnackTimeout(WorkflowExecutor.DECIDER_QUEUE, workflowId,\n-                            properties.getSweepFrequency().toMillis());\n-                    }\n-\n-                } catch (ApplicationException e) {\n-                    if (e.getCode().equals(ApplicationException.Code.NOT_FOUND)) {\n-                        LOGGER.error(\"Workflow NOT found for id: \" + workflowId, e);\n-                        queueDAO.remove(WorkflowExecutor.DECIDER_QUEUE, workflowId);\n-                    }\n-\n-                } catch (Exception e) {\n-                    queueDAO\n-                        .setUnackTimeout(WorkflowExecutor.DECIDER_QUEUE, workflowId,\n-                            properties.getSweepFrequency().toMillis());\n-                    Monitors.error(CLASS_NAME, \"sweep\");\n-                    LOGGER.error(\"Error running sweep for \" + workflowId, e);\n-                }\n-            });\n-            futures.add(future);\n-        }\n+            if (workflowRepairService != null) {\n+                // Verify and repair tasks in the workflow.\n+                workflowRepairService.verifyAndRepairWorkflowTasks(workflowId);\n+            }\n \n-        for (Future<?> future : futures) {\n-            future.get();\n+            boolean done = workflowExecutor.decide(workflowId);\n+            if (done) {\n+                queueDAO.remove(DECIDER_QUEUE, workflowId);\n+            } else {\n+                queueDAO.setUnackTimeout(DECIDER_QUEUE, workflowId,\n+                        properties.getSweepFrequency().toMillis());\n+            }\n+        } catch (ApplicationException e) {\n+            if (e.getCode().equals(ApplicationException.Code.NOT_FOUND)) {\n+                queueDAO.remove(DECIDER_QUEUE, workflowId);\n+                LOGGER.info(\"Workflow NOT found for id:{}. Removed it from decider queue\", workflowId, e);\n+            }\n+        } catch (Exception e) {\n+            queueDAO.setUnackTimeout(DECIDER_QUEUE, workflowId,\n+                    properties.getSweepFrequency().toMillis());\n+            Monitors.error(CLASS_NAME, \"sweep\");\n+            LOGGER.error(\"Error running sweep for \" + workflowId, e);\n         }\n     }\n }"
  },
  {
    "sha": "d9c725f85c3d530be2fe4bd0e4c2b00921076809",
    "filename": "core/src/main/java/com/netflix/conductor/service/AdminServiceImpl.java",
    "status": "modified",
    "additions": 20,
    "deletions": 16,
    "changes": 36,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/service/AdminServiceImpl.java",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/java/com/netflix/conductor/service/AdminServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/java/com/netflix/conductor/service/AdminServiceImpl.java?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,14 +1,16 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.service;\n \n@@ -25,26 +27,25 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n \n @Audit\n @Trace\n @SuppressWarnings(\"SpringJavaInjectionPointsAutowiringInspection\")\n @Service\n public class AdminServiceImpl implements AdminService {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(AdminServiceImpl.class);\n-\n     private final ConductorProperties properties;\n     private final ExecutionService executionService;\n     private final QueueDAO queueDAO;\n     private final WorkflowRepairService workflowRepairService;\n \n     public AdminServiceImpl(ConductorProperties properties, ExecutionService executionService, QueueDAO queueDAO,\n-        WorkflowRepairService workflowRepairService) {\n+                            Optional<WorkflowRepairService> workflowRepairService) {\n         this.properties = properties;\n         this.executionService = executionService;\n         this.queueDAO = queueDAO;\n-        this.workflowRepairService = workflowRepairService;\n+        this.workflowRepairService = workflowRepairService.orElse(null);\n     }\n \n     /**\n@@ -76,18 +77,21 @@ public AdminServiceImpl(ConductorProperties properties, ExecutionService executi\n \n     @Override\n     public boolean verifyAndRepairWorkflowConsistency(String workflowId) {\n+        if (workflowRepairService == null) {\n+            throw new IllegalStateException(WorkflowRepairService.class.getSimpleName() + \" is disabled.\");\n+        }\n         return workflowRepairService.verifyAndRepairWorkflow(workflowId, true);\n     }\n \n     /**\n-     * Queue up all the running workflows for sweep.\n+     * Queue up the workflow for sweep.\n      *\n      * @param workflowId Id of the workflow\n      * @return the id of the workflow instance that can be use for tracking.\n      */\n     public String requeueSweep(String workflowId) {\n         boolean pushed = queueDAO\n-            .pushIfNotExists(WorkflowExecutor.DECIDER_QUEUE, workflowId, properties.getSweepFrequency().getSeconds());\n+                .pushIfNotExists(WorkflowExecutor.DECIDER_QUEUE, workflowId, properties.getSweepFrequency().getSeconds());\n         return pushed + \".\" + workflowId;\n     }\n }"
  },
  {
    "sha": "e91c0e6b2a6d8c0f2d2f110bf1e2dc4dcec4893e",
    "filename": "core/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/core/src/main/resources/META-INF/additional-spring-configuration-metadata.json",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/core/src/main/resources/META-INF/additional-spring-configuration-metadata.json?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,7 +1,17 @@\n {\n   \"properties\": [\n     {\n-      \"name\": \"conductor.app.isolatedSystemTaskEnabled\",\n+      \"name\": \"conductor.workflow-sweeper.enabled\",\n+      \"type\": \"java.lang.Boolean\",\n+      \"description\": \"Enables the workflow sweeper.\"\n+    },\n+    {\n+      \"name\": \"conductor.workflow-repair-service.enabled\",\n+      \"type\": \"java.lang.Boolean\",\n+      \"description\": \"Configuration to enable WorkflowRepairService, that tries to keep ExecutionDAO and QueueDAO in sync, based on the task or workflow state. This is disabled by default; To enable, the Queueing layer must implement QueueDAO.containsMessage method.\"\n+    },\n+    {\n+      \"name\": \"conductor.app.isolated-system-task-enabled\",\n       \"type\": \"java.lang.Boolean\",\n       \"description\": \"Used to enable/disable use of isolation groups for system task workers.\"\n     },\n@@ -26,4 +36,4 @@\n       \"description\": \"The time (in seconds) at which the workflow monitor publishes metrics about the system.\"\n     }\n   ]\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "2ec2b4141cda1912ac27c096f19235c430cfc3b7",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/base/AbstractResiliencySpecification.groovy",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/base/AbstractResiliencySpecification.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/base/AbstractResiliencySpecification.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/base/AbstractResiliencySpecification.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,14 +1,14 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ * Copyright 2021 Netflix, Inc.\n+ *  <p>\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *   the License. You may obtain a copy of the License at\n+ *   <p>\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *   <p>\n+ *   Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *   an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *   specific language governing permissions and limitations under the License.\n  */\n package com.netflix.conductor.test.base\n \n@@ -29,6 +29,8 @@ import spock.mock.DetachedMockFactory\n \n @TestPropertySource(properties = [\n         \"conductor.system-task-workers.enabled=false\",\n+        \"conductor.workflow-repair-service.enabled=true\",\n+        \"conductor.workflow-sweeper.enabled=true\",\n         \"conductor.integ-test.queueSpyEnabled=true\"\n ])\n abstract class AbstractResiliencySpecification extends AbstractSpecification {"
  },
  {
    "sha": "ffa882fa67e7f83478649a54389f1f52157ca47d",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/base/AbstractSpecification.groovy",
    "status": "modified",
    "additions": 13,
    "deletions": 15,
    "changes": 28,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/base/AbstractSpecification.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/base/AbstractSpecification.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/base/AbstractSpecification.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,19 +1,20 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.test.base\n \n import com.netflix.conductor.core.execution.WorkflowExecutor\n-import com.netflix.conductor.core.execution.WorkflowRepairService\n import com.netflix.conductor.core.execution.WorkflowSweeper\n import com.netflix.conductor.service.ExecutionService\n import com.netflix.conductor.service.MetadataService\n@@ -42,14 +43,11 @@ abstract class AbstractSpecification extends Specification {\n     @Autowired\n     WorkflowSweeper workflowSweeper\n \n-    @Autowired\n-    WorkflowRepairService workflowRepairService\n-\n     def cleanup() {\n         workflowTestUtil.clearWorkflows()\n     }\n \n     void sweep(String workflowId) {\n-        workflowSweeper.sweep([workflowId], workflowExecutor, workflowRepairService)\n+        workflowSweeper.sweep(workflowId)\n     }\n }"
  },
  {
    "sha": "5e693b6213367573fd260236331b0b7efb5e50c3",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/integration/ExternalPayloadStorageSpec.groovy",
    "status": "modified",
    "additions": 13,
    "deletions": 20,
    "changes": 33,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/ExternalPayloadStorageSpec.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/ExternalPayloadStorageSpec.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/integration/ExternalPayloadStorageSpec.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,28 +1,27 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.test.integration\n \n import com.netflix.conductor.common.metadata.tasks.Task\n import com.netflix.conductor.common.metadata.tasks.TaskDef\n import com.netflix.conductor.common.metadata.tasks.TaskType\n import com.netflix.conductor.common.run.Workflow\n-import com.netflix.conductor.core.execution.WorkflowRepairService\n-import com.netflix.conductor.core.execution.WorkflowSweeper\n import com.netflix.conductor.core.execution.tasks.SubWorkflow\n import com.netflix.conductor.core.execution.tasks.WorkflowSystemTask\n import com.netflix.conductor.test.base.AbstractSpecification\n import com.netflix.conductor.test.utils.UserTask\n-import org.springframework.beans.factory.annotation.Autowired\n import spock.lang.Shared\n \n import static com.netflix.conductor.test.util.WorkflowTestUtil.verifyPolledAndAcknowledgedLargePayloadTask\n@@ -49,12 +48,6 @@ class ExternalPayloadStorageSpec extends AbstractSpecification {\n     @Shared\n     def WORKFLOW_WITH_DECISION_AND_TERMINATE = 'ConditionalTerminateWorkflow'\n \n-    @Autowired\n-    WorkflowSweeper workflowSweeper\n-\n-    @Autowired\n-    WorkflowRepairService workflowRepairService\n-\n     def setup() {\n         workflowTestUtil.registerWorkflows('simple_workflow_1_integration_test.json',\n                 'conditional_system_task_workflow_integration_test.json',\n@@ -479,7 +472,7 @@ class ExternalPayloadStorageSpec extends AbstractSpecification {\n         }\n \n         and: \"the subworkflow task is completed and the workflow is in running state\"\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n             status == Workflow.WorkflowStatus.RUNNING\n             input.isEmpty()"
  },
  {
    "sha": "63928f0382f835042be4e6ec2ed555ac64a39c4a",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/integration/ForkJoinSpec.groovy",
    "status": "modified",
    "additions": 14,
    "deletions": 21,
    "changes": 35,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/ForkJoinSpec.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/ForkJoinSpec.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/integration/ForkJoinSpec.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,26 +1,25 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.test.integration\n \n import com.netflix.conductor.common.metadata.tasks.Task\n import com.netflix.conductor.common.metadata.tasks.TaskDef\n import com.netflix.conductor.common.run.Workflow\n-import com.netflix.conductor.core.execution.WorkflowRepairService\n-import com.netflix.conductor.core.execution.WorkflowSweeper\n import com.netflix.conductor.core.execution.tasks.SubWorkflow\n import com.netflix.conductor.core.execution.tasks.WorkflowSystemTask\n import com.netflix.conductor.test.base.AbstractSpecification\n-import org.springframework.beans.factory.annotation.Autowired\n import spock.lang.Shared\n \n class ForkJoinSpec extends AbstractSpecification {\n@@ -40,12 +39,6 @@ class ForkJoinSpec extends AbstractSpecification {\n     @Shared\n     def FORK_JOIN_SUB_WORKFLOW = 'integration_test_fork_join_sw'\n \n-    @Autowired\n-    WorkflowSweeper workflowSweeper\n-\n-    @Autowired\n-    WorkflowRepairService workflowRepairService\n-\n     def setup() {\n         workflowTestUtil.registerWorkflows('fork_join_integration_test.json',\n                 'fork_join_with_no_task_retry_integration_test.json',\n@@ -823,7 +816,7 @@ class ForkJoinSpec extends AbstractSpecification {\n             tasks[0].status == Task.Status.FAILED\n             tasks[0].taskType == 'simple_task_in_sub_wf'\n         }\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         and: \"verify that the workflow is in a COMPLETED state\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n@@ -913,7 +906,7 @@ class ForkJoinSpec extends AbstractSpecification {\n         }\n \n         and: \"verify that the workflow is in a RUNNING state and sub workflow task is retried\"\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n             status == Workflow.WorkflowStatus.RUNNING\n             tasks.size() == 5"
  },
  {
    "sha": "1b812d50d3c731b163329a60764bd9b53d3269d3",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/integration/NestedForkJoinSubworkflowRestartSpec.groovy",
    "status": "modified",
    "additions": 17,
    "deletions": 2,
    "changes": 19,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/NestedForkJoinSubworkflowRestartSpec.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/NestedForkJoinSubworkflowRestartSpec.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/integration/NestedForkJoinSubworkflowRestartSpec.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,3 +1,18 @@\n+/*\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n+ */\n+\n package com.netflix.conductor.test.integration\n \n import com.netflix.conductor.common.metadata.tasks.Task\n@@ -130,7 +145,7 @@ class NestedForkJoinSubworkflowRestartSpec extends AbstractSpecification {\n         }\n \n         when: \"the mid level workflow is 'decided'\"\n-        workflowSweeper.sweep([midLevelWorkflowId], workflowExecutor, workflowRepairService)\n+        sweep(midLevelWorkflowId)\n \n         then: \"the mid level subworkflow is in FAILED state\"\n         with(workflowExecutionService.getExecutionStatus(midLevelWorkflowId, true)) {\n@@ -139,7 +154,7 @@ class NestedForkJoinSubworkflowRestartSpec extends AbstractSpecification {\n         }\n \n         when: \"the root level workflow is 'decided'\"\n-        workflowSweeper.sweep([rootWorkflowId], workflowExecutor, workflowRepairService)\n+        sweep(rootWorkflowId)\n \n         then: \"the root level workflow is in FAILED state\"\n         with(workflowExecutionService.getExecutionStatus(rootWorkflowId, true)) {"
  },
  {
    "sha": "8ccb0adfc0211e87eca0e87a3a06ca3e646e8d8b",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/integration/NestedForkJoinSubworkflowRetrySpec.groovy",
    "status": "modified",
    "additions": 19,
    "deletions": 4,
    "changes": 23,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/NestedForkJoinSubworkflowRetrySpec.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/NestedForkJoinSubworkflowRetrySpec.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/integration/NestedForkJoinSubworkflowRetrySpec.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,3 +1,18 @@\n+/*\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n+ */\n+\n package com.netflix.conductor.test.integration\n \n import com.netflix.conductor.common.metadata.tasks.Task\n@@ -130,7 +145,7 @@ class NestedForkJoinSubworkflowRetrySpec extends AbstractSpecification {\n         }\n \n         when: \"the mid level workflow is 'decided'\"\n-        workflowSweeper.sweep([midLevelWorkflowId], workflowExecutor, workflowRepairService)\n+        sweep(midLevelWorkflowId)\n \n         then: \"the mid level subworkflow is in FAILED state\"\n         with(workflowExecutionService.getExecutionStatus(midLevelWorkflowId, true)) {\n@@ -139,7 +154,7 @@ class NestedForkJoinSubworkflowRetrySpec extends AbstractSpecification {\n         }\n \n         when: \"the root level workflow is 'decided'\"\n-        workflowSweeper.sweep([rootWorkflowId], workflowExecutor, workflowRepairService)\n+        sweep(rootWorkflowId)\n \n         then: \"the root level workflow is in FAILED state\"\n         with(workflowExecutionService.getExecutionStatus(rootWorkflowId, true)) {\n@@ -707,8 +722,8 @@ class NestedForkJoinSubworkflowRetrySpec extends AbstractSpecification {\n         }\n \n         when: \"the mid level and root workflows are 'decided'\"\n-        workflowSweeper.sweep([midLevelWorkflowId], workflowExecutor, workflowRepairService)\n-        workflowSweeper.sweep([rootWorkflowId], workflowExecutor, workflowRepairService)\n+        sweep(midLevelWorkflowId)\n+        sweep(rootWorkflowId)\n \n         then: \"the mid level workflow is in RUNNING state\"\n         with(workflowExecutionService.getExecutionStatus(midLevelWorkflowId, true)) {"
  },
  {
    "sha": "5b3072205ebd9a828d2a214016e8372840bf6408",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/integration/SubWorkflowSpec.groovy",
    "status": "modified",
    "additions": 21,
    "deletions": 26,
    "changes": 47,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/SubWorkflowSpec.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/SubWorkflowSpec.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/integration/SubWorkflowSpec.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,14 +1,16 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.test.integration\n \n@@ -17,28 +19,21 @@ import com.netflix.conductor.common.metadata.tasks.TaskDef\n import com.netflix.conductor.common.metadata.tasks.TaskType\n import com.netflix.conductor.common.metadata.workflow.WorkflowDef\n import com.netflix.conductor.common.run.Workflow\n-import com.netflix.conductor.core.execution.WorkflowRepairService\n-import com.netflix.conductor.core.execution.WorkflowSweeper\n import com.netflix.conductor.core.execution.tasks.SubWorkflow\n import com.netflix.conductor.core.execution.tasks.WorkflowSystemTask\n import com.netflix.conductor.dao.QueueDAO\n import com.netflix.conductor.test.base.AbstractSpecification\n import org.springframework.beans.factory.annotation.Autowired\n import spock.lang.Shared\n \n+import static com.netflix.conductor.common.metadata.tasks.TaskType.TASK_TYPE_SUB_WORKFLOW\n import static com.netflix.conductor.test.util.WorkflowTestUtil.verifyPolledAndAcknowledgedTask\n \n class SubWorkflowSpec extends AbstractSpecification {\n \n     @Autowired\n     QueueDAO queueDAO\n \n-    @Autowired\n-    WorkflowSweeper workflowSweeper\n-\n-    @Autowired\n-    WorkflowRepairService workflowRepairService\n-\n     @Shared\n     def WORKFLOW_WITH_SUBWORKFLOW = 'integration_test_wf_with_sub_wf'\n \n@@ -138,7 +133,7 @@ class SubWorkflowSpec extends AbstractSpecification {\n \n         when: \"a delay of 10 seconds is introduced and the workflow is sweeped to run the evaluation\"\n         Thread.sleep(10000)\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         then: \"ensure that the workflow has been TIMED OUT and subworkflow task is CANCELED\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n@@ -197,7 +192,7 @@ class SubWorkflowSpec extends AbstractSpecification {\n         }\n \n         and: \"the parent workflow is swept\"\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         and: \"the parent workflow has been resumed\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n@@ -294,7 +289,7 @@ class SubWorkflowSpec extends AbstractSpecification {\n         }\n \n         and:\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         and: \"verify that parent workflow is in terminated state\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n@@ -415,7 +410,7 @@ class SubWorkflowSpec extends AbstractSpecification {\n         }\n \n         and:\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         and: \"the workflow is in a FAILED state\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n@@ -443,13 +438,13 @@ class SubWorkflowSpec extends AbstractSpecification {\n         }\n \n         and: \"the workflow is in a RUNNING state\"\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n             status == Workflow.WorkflowStatus.RUNNING\n             tasks.size() == 2\n             tasks[0].taskType == 'integration_task_1'\n             tasks[0].status == Task.Status.COMPLETED\n-            tasks[1].taskType == 'SUB_WORKFLOW'\n+            tasks[1].taskType == TASK_TYPE_SUB_WORKFLOW\n             tasks[1].status == Task.Status.IN_PROGRESS\n         }\n \n@@ -472,15 +467,15 @@ class SubWorkflowSpec extends AbstractSpecification {\n         }\n \n         and:\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         then: \"the workflow is in a COMPLETED state\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n             status == Workflow.WorkflowStatus.COMPLETED\n             tasks.size() == 2\n             tasks[0].taskType == 'integration_task_1'\n             tasks[0].status == Task.Status.COMPLETED\n-            tasks[1].taskType == 'SUB_WORKFLOW'\n+            tasks[1].taskType == TASK_TYPE_SUB_WORKFLOW\n             tasks[1].status == Task.Status.COMPLETED\n         }\n "
  },
  {
    "sha": "a95cd46fc885f1997a63517e9a4f3597e64bc27b",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/integration/SystemTaskSpec.groovy",
    "status": "modified",
    "additions": 13,
    "deletions": 19,
    "changes": 32,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/SystemTaskSpec.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/SystemTaskSpec.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/integration/SystemTaskSpec.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,22 +1,22 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.test.integration\n \n import com.netflix.conductor.common.metadata.tasks.Task\n import com.netflix.conductor.common.metadata.tasks.TaskResult\n import com.netflix.conductor.common.run.Workflow\n-import com.netflix.conductor.core.execution.WorkflowRepairService\n-import com.netflix.conductor.core.execution.WorkflowSweeper\n import com.netflix.conductor.core.execution.tasks.WorkflowSystemTask\n import com.netflix.conductor.dao.QueueDAO\n import com.netflix.conductor.test.base.AbstractSpecification\n@@ -31,12 +31,6 @@ class SystemTaskSpec extends AbstractSpecification {\n     @Autowired\n     QueueDAO queueDAO\n \n-    @Autowired\n-    WorkflowSweeper workflowSweeper\n-\n-    @Autowired\n-    WorkflowRepairService workflowRepairService\n-\n     @Shared\n     def ASYNC_COMPLETE_SYSTEM_TASK_WORKFLOW = 'async_complete_integration_test_wf'\n \n@@ -100,7 +94,7 @@ class SystemTaskSpec extends AbstractSpecification {\n         }\n \n         when: \"sweeper evaluates the workflow\"\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         then: \"workflow state is unchanged\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {"
  },
  {
    "sha": "d327d7905b9a43842022cfc56b21fe3d4bce2181",
    "filename": "test-harness/src/test/groovy/com/netflix/conductor/test/integration/WorkflowAndTaskConfigurationSpec.groovy",
    "status": "modified",
    "additions": 16,
    "deletions": 22,
    "changes": 38,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/WorkflowAndTaskConfigurationSpec.groovy",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/groovy/com/netflix/conductor/test/integration/WorkflowAndTaskConfigurationSpec.groovy",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/groovy/com/netflix/conductor/test/integration/WorkflowAndTaskConfigurationSpec.groovy?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,14 +1,16 @@\n /*\n- * Copyright 2020 Netflix, Inc.\n- * <p>\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- * <p>\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * <p>\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n+ *\n+ *  * Copyright 2021 Netflix, Inc.\n+ *  * <p>\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  * <p>\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  * <p>\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *\n  */\n package com.netflix.conductor.test.integration\n \n@@ -21,8 +23,6 @@ import com.netflix.conductor.common.metadata.workflow.WorkflowDef\n import com.netflix.conductor.common.metadata.workflow.WorkflowTask\n import com.netflix.conductor.common.run.Workflow\n import com.netflix.conductor.core.execution.WorkflowExecutor\n-import com.netflix.conductor.core.execution.WorkflowRepairService\n-import com.netflix.conductor.core.execution.WorkflowSweeper\n import com.netflix.conductor.dao.QueueDAO\n import com.netflix.conductor.test.base.AbstractSpecification\n import org.springframework.beans.factory.annotation.Autowired\n@@ -35,12 +35,6 @@ class WorkflowAndTaskConfigurationSpec extends AbstractSpecification {\n     @Autowired\n     QueueDAO queueDAO\n \n-    @Autowired\n-    WorkflowSweeper workflowSweeper\n-\n-    @Autowired\n-    WorkflowRepairService workflowRepairService\n-\n     @Shared\n     def LINEAR_WORKFLOW_T1_T2 = 'integration_test_wf'\n \n@@ -181,7 +175,7 @@ class WorkflowAndTaskConfigurationSpec extends AbstractSpecification {\n \n         when: \"There is a delay of 3 seconds introduced and the workflow is sweeped to run the evaluation\"\n         Thread.sleep(3000)\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         then: \"Ensure that the first task has been TIMED OUT and the next task is SCHEDULED\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n@@ -204,7 +198,7 @@ class WorkflowAndTaskConfigurationSpec extends AbstractSpecification {\n \n         when: \"There is a delay of 3 seconds introduced and the workflow is swept to run the evaluation\"\n         Thread.sleep(3000)\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         then: \"Ensure that the first task has been TIMED OUT and the next task is SCHEDULED\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n@@ -258,7 +252,7 @@ class WorkflowAndTaskConfigurationSpec extends AbstractSpecification {\n \n         when: \"There is a delay of 6 seconds introduced and the workflow is swept to run the evaluation\"\n         Thread.sleep(6000)\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         then: \"Ensure that the workflow has timed out\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n@@ -310,7 +304,7 @@ class WorkflowAndTaskConfigurationSpec extends AbstractSpecification {\n \n         when: \"There is a delay of 6 seconds introduced and the workflow is swept to run the evaluation\"\n         Thread.sleep(6000)\n-        workflowSweeper.sweep([workflowInstanceId], workflowExecutor, workflowRepairService)\n+        sweep(workflowInstanceId)\n \n         then: \"Ensure that the workflow has timed out\"\n         with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {"
  },
  {
    "sha": "09222079dec645fb696f72a9848c1005882fbb76",
    "filename": "test-harness/src/test/resources/application-integrationtest.properties",
    "status": "modified",
    "additions": 16,
    "deletions": 2,
    "changes": 18,
    "blob_url": "https://github.com/Netflix/conductor/blob/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/resources/application-integrationtest.properties",
    "raw_url": "https://github.com/Netflix/conductor/raw/91ead6d655b5399ae59b94e65b7df82b30fc2e95/test-harness/src/test/resources/application-integrationtest.properties",
    "contents_url": "https://api.github.com/repos/Netflix/conductor/contents/test-harness/src/test/resources/application-integrationtest.properties?ref=91ead6d655b5399ae59b94e65b7df82b30fc2e95",
    "patch": "@@ -1,3 +1,18 @@\n+#\n+# /*\n+#  * Copyright 2021 Netflix, Inc.\n+#  * <p>\n+#  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+#  * the License. You may obtain a copy of the License at\n+#  * <p>\n+#  * http://www.apache.org/licenses/LICENSE-2.0\n+#  * <p>\n+#  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+#  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+#  * specific language governing permissions and limitations under the License.\n+#  */\n+#\n+\n \n conductor.db.type=memory\n conductor.workflow-execution-lock.type=local_only\n@@ -7,8 +22,7 @@ conductor.indexing.enabled=false\n conductor.app.stack=test\n conductor.app.appId=conductor\n \n-conductor.workflow-sweeper.enabled=true\n-conductor.app.sweepFrequency=30\n+conductor.app.sweep-frequency=30\n \n conductor.system-task-workers.enabled=false\n conductor.app.system-task-worker-callback-duration=0"
  }
]
