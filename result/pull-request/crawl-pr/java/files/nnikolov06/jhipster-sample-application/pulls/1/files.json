[
  {
    "sha": "88d0587060a0797eb89279021744afc2f0c15d25",
    "filename": ".jhipster/Certificate.json",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Certificate.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Certificate.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/Certificate.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,89 @@\n+{\n+  \"name\": \"Certificate\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"cerNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerDate\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerSysDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"cerCreatedBy\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerFileName\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerServiceApplicant\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerSigningPerson\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerSigningPersonPosition\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerCertificateType\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerCheckBoxValues\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerRequestNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerRequestDate\",\n+      \"fieldType\": \"LocalDate\"\n+    },\n+    {\n+      \"fieldName\": \"cerIsDeactivated\",\n+      \"fieldType\": \"Boolean\"\n+    },\n+    {\n+      \"fieldName\": \"cerState\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cerHasObligation\",\n+      \"fieldType\": \"Boolean\"\n+    },\n+    {\n+      \"fieldName\": \"cerDocumentState\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"rezmaEntity\",\n+      \"otherEntityRelationshipName\": \"certificate\",\n+      \"relationshipName\": \"rezmaEntity\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210305115141\",\n+  \"entityTableName\": \"certificate\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "5cd494411f197b063863cf95561f5cda78ef83b8",
    "filename": ".jhipster/CertificateEmergencyText.json",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/CertificateEmergencyText.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/CertificateEmergencyText.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/CertificateEmergencyText.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,25 @@\n+{\n+  \"name\": \"CertificateEmergencyText\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"cetText\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cetIsActive\",\n+      \"fieldType\": \"Boolean\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210305115241\",\n+  \"entityTableName\": \"certificate_emergency_text\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "0db1d06c5286b2b85b9e73660d0213662a1334ef",
    "filename": ".jhipster/Config.json",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Config.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Config.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/Config.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,41 @@\n+{\n+  \"name\": \"Config\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"cfgSection\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cfgEnvironmnent\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cfgItem\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"cfgValue\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"moduleConfiguration\",\n+      \"otherEntityRelationshipName\": \"config\",\n+      \"relationshipName\": \"moduleConfiguration\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210305115341\",\n+  \"entityTableName\": \"config\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "077d3aa2884b58a4bf8959cb29b5e36d1bf233cf",
    "filename": ".jhipster/Document.json",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Document.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Document.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/Document.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,77 @@\n+{\n+  \"name\": \"Document\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"docNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"docDate\",\n+      \"fieldType\": \"LocalDate\"\n+    },\n+    {\n+      \"fieldName\": \"docDescription\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"docType\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"docSysDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"docCreatedBy\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"docMrn\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"docStatus\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"docLastChangeDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"docIntoForce\",\n+      \"fieldType\": \"Boolean\"\n+    },\n+    {\n+      \"fieldName\": \"docDeferred\",\n+      \"fieldType\": \"Boolean\"\n+    },\n+    {\n+      \"fieldName\": \"docRescheduled\",\n+      \"fieldType\": \"Boolean\"\n+    },\n+    {\n+      \"fieldName\": \"docIntoForceDate\",\n+      \"fieldType\": \"LocalDate\"\n+    },\n+    {\n+      \"fieldName\": \"docDeferredDate\",\n+      \"fieldType\": \"LocalDate\"\n+    },\n+    {\n+      \"fieldName\": \"docRescheduledDate\",\n+      \"fieldType\": \"LocalDate\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210305115441\",\n+  \"entityTableName\": \"document\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "c16af0e5e076a83fc7a6c107adfc05983c15d6a2",
    "filename": ".jhipster/Email.json",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Email.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Email.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/Email.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,25 @@\n+{\n+  \"name\": \"Email\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"emlValue\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"emlIsActive\",\n+      \"fieldType\": \"Boolean\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210305115541\",\n+  \"entityTableName\": \"email\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "113f0e91ddafeb36e5e136a51659570068e25a3c",
    "filename": ".jhipster/EmergencyProcedure.json",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/EmergencyProcedure.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/EmergencyProcedure.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/EmergencyProcedure.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,41 @@\n+{\n+  \"name\": \"EmergencyProcedure\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"empSystem\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"empReason\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"empUser\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"empIsActive\",\n+      \"fieldType\": \"Boolean\"\n+    },\n+    {\n+      \"fieldName\": \"empDateStart\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"empDateEnd\",\n+      \"fieldType\": \"Instant\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210305115641\",\n+  \"entityTableName\": \"emergency_procedure\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "292ed5abc04698a3d3ff0281244b712f4238b9eb",
    "filename": ".jhipster/Inspection.json",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Inspection.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Inspection.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/Inspection.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,50 @@\n+{\n+  \"name\": \"Inspection\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"insNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"insDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"insCustomsOffice\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"insUser\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"insSysDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"insType\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-many\",\n+      \"otherEntityName\": \"rezmaEntity\",\n+      \"otherEntityRelationshipName\": \"inspection\",\n+      \"relationshipName\": \"rezmaEntity\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": true\n+    }\n+  ],\n+  \"changelogDate\": \"20210305115841\",\n+  \"entityTableName\": \"inspection\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "fb507104480c720a7dafab3b0f491a2f2cabbab0",
    "filename": ".jhipster/ModuleConfiguration.json",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/ModuleConfiguration.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/ModuleConfiguration.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/ModuleConfiguration.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,21 @@\n+{\n+  \"name\": \"ModuleConfiguration\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"mocName\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210305115941\",\n+  \"entityTableName\": \"module_configuration\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "30b1f2185829086344fe1a3081fda63df3484669",
    "filename": ".jhipster/Obligation.json",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Obligation.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Obligation.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/Obligation.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,89 @@\n+{\n+  \"name\": \"Obligation\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"oblSysDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"oblCreatedBy\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"oblCustomsOffice\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"oblType\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"oblAmount\",\n+      \"fieldType\": \"BigDecimal\"\n+    },\n+    {\n+      \"fieldName\": \"oblLapsed\",\n+      \"fieldType\": \"Boolean\"\n+    },\n+    {\n+      \"fieldName\": \"oblVpoNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"oblTransactionNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"oblMraDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"oblState\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"oblIdentifier\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"oblAmountDifference\",\n+      \"fieldType\": \"BigDecimal\"\n+    },\n+    {\n+      \"fieldName\": \"oblGuarantyDifference\",\n+      \"fieldType\": \"BigDecimal\"\n+    },\n+    {\n+      \"fieldName\": \"oblCustomsOfficeName\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"document\",\n+      \"otherEntityRelationshipName\": \"obligation\",\n+      \"relationshipName\": \"document\",\n+      \"otherEntityField\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-many\",\n+      \"otherEntityName\": \"rezmaEntity\",\n+      \"otherEntityRelationshipName\": \"obligation\",\n+      \"relationshipName\": \"rezmaEntity\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": true\n+    }\n+  ],\n+  \"changelogDate\": \"20210305120041\",\n+  \"entityTableName\": \"obligation\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "a03d61cff265357904c9af54997b16afd6943cfa",
    "filename": ".jhipster/RezmaEntity.json",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/RezmaEntity.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/RezmaEntity.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/RezmaEntity.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,74 @@\n+{\n+  \"name\": \"RezmaEntity\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"entName\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"entAddress\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"entSystemDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"entCreatedBy\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"entIdentifier\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"entType\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"entCountry\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"entIdentifierType\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"entTin\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"entDOB\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-many\",\n+      \"otherEntityName\": \"obligation\",\n+      \"otherEntityRelationshipName\": \"rezmaEntity\",\n+      \"relationshipName\": \"obligation\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": false\n+    },\n+    {\n+      \"relationshipType\": \"many-to-many\",\n+      \"otherEntityName\": \"inspection\",\n+      \"otherEntityRelationshipName\": \"rezmaEntity\",\n+      \"relationshipName\": \"inspection\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": false\n+    }\n+  ],\n+  \"changelogDate\": \"20210305115741\",\n+  \"entityTableName\": \"rezma_entity\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "7befa3ccddea867e5c6255bccff3485b5df21788",
    "filename": ".jhipster/ScheduleLock.json",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/ScheduleLock.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/ScheduleLock.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/ScheduleLock.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,33 @@\n+{\n+  \"name\": \"ScheduleLock\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"slcName\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"slcLockUntil\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"slcLockedAt\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"slcLockedBy\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210305120141\",\n+  \"entityTableName\": \"schedule_lock\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "70f395fdd951db39f467439087967f0760147ca6",
    "filename": ".jhipster/Transaction.json",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Transaction.json",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/.jhipster/Transaction.json",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/.jhipster/Transaction.json?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,73 @@\n+{\n+  \"name\": \"Transaction\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"trnNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"trnDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"trnSystem\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"trnAmount\",\n+      \"fieldType\": \"BigDecimal\"\n+    },\n+    {\n+      \"fieldName\": \"trnCreationDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"trnSysDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"trnCreatedBy\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"trnType\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"trnCode\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"trnStatus\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"trnDescription\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"trnPaymentType\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"obligation\",\n+      \"otherEntityRelationshipName\": \"transaction\",\n+      \"relationshipName\": \"obligation\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210305120241\",\n+  \"entityTableName\": \"transaction\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "b59af5dda2ae337c5c9c73d930854d753156a12b",
    "filename": "src/main/java/com/mycompany/myapp/config/CacheConfiguration.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/config/CacheConfiguration.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/config/CacheConfiguration.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/config/CacheConfiguration.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -80,6 +80,22 @@ public JCacheManagerCustomizer cacheManagerCustomizer(javax.cache.configuration.\n             createCache(cm, com.mycompany.myapp.domain.User.class.getName(), jcacheConfiguration);\n             createCache(cm, com.mycompany.myapp.domain.Authority.class.getName(), jcacheConfiguration);\n             createCache(cm, com.mycompany.myapp.domain.User.class.getName() + \".authorities\", jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Certificate.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.CertificateEmergencyText.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Config.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Document.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Email.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.EmergencyProcedure.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.RezmaEntity.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.RezmaEntity.class.getName() + \".obligations\", jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.RezmaEntity.class.getName() + \".inspections\", jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Inspection.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Inspection.class.getName() + \".rezmaEntities\", jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.ModuleConfiguration.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Obligation.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Obligation.class.getName() + \".rezmaEntities\", jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.ScheduleLock.class.getName(), jcacheConfiguration);\n+            createCache(cm, com.mycompany.myapp.domain.Transaction.class.getName(), jcacheConfiguration);\n             // jhipster-needle-redis-add-entry\n         };\n     }"
  },
  {
    "sha": "e60e783fe0c78e166e01d70fd2de961379669c69",
    "filename": "src/main/java/com/mycompany/myapp/domain/Certificate.java",
    "status": "added",
    "additions": 350,
    "deletions": 0,
    "changes": 350,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Certificate.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Certificate.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/Certificate.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,350 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+\n+/**\n+ * A Certificate.\n+ */\n+@Entity\n+@Table(name = \"certificate\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Certificate implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"cer_number\")\n+    private String cerNumber;\n+\n+    @Column(name = \"cer_date\")\n+    private String cerDate;\n+\n+    @Column(name = \"cer_sys_date\")\n+    private Instant cerSysDate;\n+\n+    @Column(name = \"cer_created_by\")\n+    private String cerCreatedBy;\n+\n+    @Column(name = \"cer_file_name\")\n+    private String cerFileName;\n+\n+    @Column(name = \"cer_service_applicant\")\n+    private String cerServiceApplicant;\n+\n+    @Column(name = \"cer_signing_person\")\n+    private String cerSigningPerson;\n+\n+    @Column(name = \"cer_signing_person_position\")\n+    private String cerSigningPersonPosition;\n+\n+    @Column(name = \"cer_certificate_type\")\n+    private String cerCertificateType;\n+\n+    @Column(name = \"cer_check_box_values\")\n+    private String cerCheckBoxValues;\n+\n+    @Column(name = \"cer_request_number\")\n+    private String cerRequestNumber;\n+\n+    @Column(name = \"cer_request_date\")\n+    private LocalDate cerRequestDate;\n+\n+    @Column(name = \"cer_is_deactivated\")\n+    private Boolean cerIsDeactivated;\n+\n+    @Column(name = \"cer_state\")\n+    private String cerState;\n+\n+    @Column(name = \"cer_has_obligation\")\n+    private Boolean cerHasObligation;\n+\n+    @Column(name = \"cer_document_state\")\n+    private String cerDocumentState;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"certificates\", allowSetters = true)\n+    private RezmaEntity rezmaEntity;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getCerNumber() {\n+        return cerNumber;\n+    }\n+\n+    public Certificate cerNumber(String cerNumber) {\n+        this.cerNumber = cerNumber;\n+        return this;\n+    }\n+\n+    public void setCerNumber(String cerNumber) {\n+        this.cerNumber = cerNumber;\n+    }\n+\n+    public String getCerDate() {\n+        return cerDate;\n+    }\n+\n+    public Certificate cerDate(String cerDate) {\n+        this.cerDate = cerDate;\n+        return this;\n+    }\n+\n+    public void setCerDate(String cerDate) {\n+        this.cerDate = cerDate;\n+    }\n+\n+    public Instant getCerSysDate() {\n+        return cerSysDate;\n+    }\n+\n+    public Certificate cerSysDate(Instant cerSysDate) {\n+        this.cerSysDate = cerSysDate;\n+        return this;\n+    }\n+\n+    public void setCerSysDate(Instant cerSysDate) {\n+        this.cerSysDate = cerSysDate;\n+    }\n+\n+    public String getCerCreatedBy() {\n+        return cerCreatedBy;\n+    }\n+\n+    public Certificate cerCreatedBy(String cerCreatedBy) {\n+        this.cerCreatedBy = cerCreatedBy;\n+        return this;\n+    }\n+\n+    public void setCerCreatedBy(String cerCreatedBy) {\n+        this.cerCreatedBy = cerCreatedBy;\n+    }\n+\n+    public String getCerFileName() {\n+        return cerFileName;\n+    }\n+\n+    public Certificate cerFileName(String cerFileName) {\n+        this.cerFileName = cerFileName;\n+        return this;\n+    }\n+\n+    public void setCerFileName(String cerFileName) {\n+        this.cerFileName = cerFileName;\n+    }\n+\n+    public String getCerServiceApplicant() {\n+        return cerServiceApplicant;\n+    }\n+\n+    public Certificate cerServiceApplicant(String cerServiceApplicant) {\n+        this.cerServiceApplicant = cerServiceApplicant;\n+        return this;\n+    }\n+\n+    public void setCerServiceApplicant(String cerServiceApplicant) {\n+        this.cerServiceApplicant = cerServiceApplicant;\n+    }\n+\n+    public String getCerSigningPerson() {\n+        return cerSigningPerson;\n+    }\n+\n+    public Certificate cerSigningPerson(String cerSigningPerson) {\n+        this.cerSigningPerson = cerSigningPerson;\n+        return this;\n+    }\n+\n+    public void setCerSigningPerson(String cerSigningPerson) {\n+        this.cerSigningPerson = cerSigningPerson;\n+    }\n+\n+    public String getCerSigningPersonPosition() {\n+        return cerSigningPersonPosition;\n+    }\n+\n+    public Certificate cerSigningPersonPosition(String cerSigningPersonPosition) {\n+        this.cerSigningPersonPosition = cerSigningPersonPosition;\n+        return this;\n+    }\n+\n+    public void setCerSigningPersonPosition(String cerSigningPersonPosition) {\n+        this.cerSigningPersonPosition = cerSigningPersonPosition;\n+    }\n+\n+    public String getCerCertificateType() {\n+        return cerCertificateType;\n+    }\n+\n+    public Certificate cerCertificateType(String cerCertificateType) {\n+        this.cerCertificateType = cerCertificateType;\n+        return this;\n+    }\n+\n+    public void setCerCertificateType(String cerCertificateType) {\n+        this.cerCertificateType = cerCertificateType;\n+    }\n+\n+    public String getCerCheckBoxValues() {\n+        return cerCheckBoxValues;\n+    }\n+\n+    public Certificate cerCheckBoxValues(String cerCheckBoxValues) {\n+        this.cerCheckBoxValues = cerCheckBoxValues;\n+        return this;\n+    }\n+\n+    public void setCerCheckBoxValues(String cerCheckBoxValues) {\n+        this.cerCheckBoxValues = cerCheckBoxValues;\n+    }\n+\n+    public String getCerRequestNumber() {\n+        return cerRequestNumber;\n+    }\n+\n+    public Certificate cerRequestNumber(String cerRequestNumber) {\n+        this.cerRequestNumber = cerRequestNumber;\n+        return this;\n+    }\n+\n+    public void setCerRequestNumber(String cerRequestNumber) {\n+        this.cerRequestNumber = cerRequestNumber;\n+    }\n+\n+    public LocalDate getCerRequestDate() {\n+        return cerRequestDate;\n+    }\n+\n+    public Certificate cerRequestDate(LocalDate cerRequestDate) {\n+        this.cerRequestDate = cerRequestDate;\n+        return this;\n+    }\n+\n+    public void setCerRequestDate(LocalDate cerRequestDate) {\n+        this.cerRequestDate = cerRequestDate;\n+    }\n+\n+    public Boolean isCerIsDeactivated() {\n+        return cerIsDeactivated;\n+    }\n+\n+    public Certificate cerIsDeactivated(Boolean cerIsDeactivated) {\n+        this.cerIsDeactivated = cerIsDeactivated;\n+        return this;\n+    }\n+\n+    public void setCerIsDeactivated(Boolean cerIsDeactivated) {\n+        this.cerIsDeactivated = cerIsDeactivated;\n+    }\n+\n+    public String getCerState() {\n+        return cerState;\n+    }\n+\n+    public Certificate cerState(String cerState) {\n+        this.cerState = cerState;\n+        return this;\n+    }\n+\n+    public void setCerState(String cerState) {\n+        this.cerState = cerState;\n+    }\n+\n+    public Boolean isCerHasObligation() {\n+        return cerHasObligation;\n+    }\n+\n+    public Certificate cerHasObligation(Boolean cerHasObligation) {\n+        this.cerHasObligation = cerHasObligation;\n+        return this;\n+    }\n+\n+    public void setCerHasObligation(Boolean cerHasObligation) {\n+        this.cerHasObligation = cerHasObligation;\n+    }\n+\n+    public String getCerDocumentState() {\n+        return cerDocumentState;\n+    }\n+\n+    public Certificate cerDocumentState(String cerDocumentState) {\n+        this.cerDocumentState = cerDocumentState;\n+        return this;\n+    }\n+\n+    public void setCerDocumentState(String cerDocumentState) {\n+        this.cerDocumentState = cerDocumentState;\n+    }\n+\n+    public RezmaEntity getRezmaEntity() {\n+        return rezmaEntity;\n+    }\n+\n+    public Certificate rezmaEntity(RezmaEntity rezmaEntity) {\n+        this.rezmaEntity = rezmaEntity;\n+        return this;\n+    }\n+\n+    public void setRezmaEntity(RezmaEntity rezmaEntity) {\n+        this.rezmaEntity = rezmaEntity;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Certificate)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Certificate) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Certificate{\" +\n+            \"id=\" + getId() +\n+            \", cerNumber='\" + getCerNumber() + \"'\" +\n+            \", cerDate='\" + getCerDate() + \"'\" +\n+            \", cerSysDate='\" + getCerSysDate() + \"'\" +\n+            \", cerCreatedBy='\" + getCerCreatedBy() + \"'\" +\n+            \", cerFileName='\" + getCerFileName() + \"'\" +\n+            \", cerServiceApplicant='\" + getCerServiceApplicant() + \"'\" +\n+            \", cerSigningPerson='\" + getCerSigningPerson() + \"'\" +\n+            \", cerSigningPersonPosition='\" + getCerSigningPersonPosition() + \"'\" +\n+            \", cerCertificateType='\" + getCerCertificateType() + \"'\" +\n+            \", cerCheckBoxValues='\" + getCerCheckBoxValues() + \"'\" +\n+            \", cerRequestNumber='\" + getCerRequestNumber() + \"'\" +\n+            \", cerRequestDate='\" + getCerRequestDate() + \"'\" +\n+            \", cerIsDeactivated='\" + isCerIsDeactivated() + \"'\" +\n+            \", cerState='\" + getCerState() + \"'\" +\n+            \", cerHasObligation='\" + isCerHasObligation() + \"'\" +\n+            \", cerDocumentState='\" + getCerDocumentState() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "b7ffc88a762df27057a02b077f98f97c237c8479",
    "filename": "src/main/java/com/mycompany/myapp/domain/CertificateEmergencyText.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/CertificateEmergencyText.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/CertificateEmergencyText.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/CertificateEmergencyText.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,92 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A CertificateEmergencyText.\n+ */\n+@Entity\n+@Table(name = \"certificate_emergency_text\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class CertificateEmergencyText implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"cet_text\")\n+    private String cetText;\n+\n+    @Column(name = \"cet_is_active\")\n+    private Boolean cetIsActive;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getCetText() {\n+        return cetText;\n+    }\n+\n+    public CertificateEmergencyText cetText(String cetText) {\n+        this.cetText = cetText;\n+        return this;\n+    }\n+\n+    public void setCetText(String cetText) {\n+        this.cetText = cetText;\n+    }\n+\n+    public Boolean isCetIsActive() {\n+        return cetIsActive;\n+    }\n+\n+    public CertificateEmergencyText cetIsActive(Boolean cetIsActive) {\n+        this.cetIsActive = cetIsActive;\n+        return this;\n+    }\n+\n+    public void setCetIsActive(Boolean cetIsActive) {\n+        this.cetIsActive = cetIsActive;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof CertificateEmergencyText)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((CertificateEmergencyText) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"CertificateEmergencyText{\" +\n+            \"id=\" + getId() +\n+            \", cetText='\" + getCetText() + \"'\" +\n+            \", cetIsActive='\" + isCetIsActive() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "46148b3373cdb724c1a13e3f29eb786ca4fd7088",
    "filename": "src/main/java/com/mycompany/myapp/domain/Config.java",
    "status": "added",
    "additions": 144,
    "deletions": 0,
    "changes": 144,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Config.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Config.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/Config.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,144 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Config.\n+ */\n+@Entity\n+@Table(name = \"config\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Config implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"cfg_section\")\n+    private String cfgSection;\n+\n+    @Column(name = \"cfg_environmnent\")\n+    private String cfgEnvironmnent;\n+\n+    @Column(name = \"cfg_item\")\n+    private String cfgItem;\n+\n+    @Column(name = \"cfg_value\")\n+    private String cfgValue;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"configs\", allowSetters = true)\n+    private ModuleConfiguration moduleConfiguration;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getCfgSection() {\n+        return cfgSection;\n+    }\n+\n+    public Config cfgSection(String cfgSection) {\n+        this.cfgSection = cfgSection;\n+        return this;\n+    }\n+\n+    public void setCfgSection(String cfgSection) {\n+        this.cfgSection = cfgSection;\n+    }\n+\n+    public String getCfgEnvironmnent() {\n+        return cfgEnvironmnent;\n+    }\n+\n+    public Config cfgEnvironmnent(String cfgEnvironmnent) {\n+        this.cfgEnvironmnent = cfgEnvironmnent;\n+        return this;\n+    }\n+\n+    public void setCfgEnvironmnent(String cfgEnvironmnent) {\n+        this.cfgEnvironmnent = cfgEnvironmnent;\n+    }\n+\n+    public String getCfgItem() {\n+        return cfgItem;\n+    }\n+\n+    public Config cfgItem(String cfgItem) {\n+        this.cfgItem = cfgItem;\n+        return this;\n+    }\n+\n+    public void setCfgItem(String cfgItem) {\n+        this.cfgItem = cfgItem;\n+    }\n+\n+    public String getCfgValue() {\n+        return cfgValue;\n+    }\n+\n+    public Config cfgValue(String cfgValue) {\n+        this.cfgValue = cfgValue;\n+        return this;\n+    }\n+\n+    public void setCfgValue(String cfgValue) {\n+        this.cfgValue = cfgValue;\n+    }\n+\n+    public ModuleConfiguration getModuleConfiguration() {\n+        return moduleConfiguration;\n+    }\n+\n+    public Config moduleConfiguration(ModuleConfiguration moduleConfiguration) {\n+        this.moduleConfiguration = moduleConfiguration;\n+        return this;\n+    }\n+\n+    public void setModuleConfiguration(ModuleConfiguration moduleConfiguration) {\n+        this.moduleConfiguration = moduleConfiguration;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Config)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Config) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Config{\" +\n+            \"id=\" + getId() +\n+            \", cfgSection='\" + getCfgSection() + \"'\" +\n+            \", cfgEnvironmnent='\" + getCfgEnvironmnent() + \"'\" +\n+            \", cfgItem='\" + getCfgItem() + \"'\" +\n+            \", cfgValue='\" + getCfgValue() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "f7b1416d9939f831be8ee6484a64f7ebb764c26e",
    "filename": "src/main/java/com/mycompany/myapp/domain/Document.java",
    "status": "added",
    "additions": 315,
    "deletions": 0,
    "changes": 315,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Document.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Document.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/Document.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,315 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+\n+/**\n+ * A Document.\n+ */\n+@Entity\n+@Table(name = \"document\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Document implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"doc_number\")\n+    private String docNumber;\n+\n+    @Column(name = \"doc_date\")\n+    private LocalDate docDate;\n+\n+    @Column(name = \"doc_description\")\n+    private String docDescription;\n+\n+    @Column(name = \"doc_type\")\n+    private String docType;\n+\n+    @Column(name = \"doc_sys_date\")\n+    private Instant docSysDate;\n+\n+    @Column(name = \"doc_created_by\")\n+    private String docCreatedBy;\n+\n+    @Column(name = \"doc_mrn\")\n+    private String docMrn;\n+\n+    @Column(name = \"doc_status\")\n+    private String docStatus;\n+\n+    @Column(name = \"doc_last_change_date\")\n+    private Instant docLastChangeDate;\n+\n+    @Column(name = \"doc_into_force\")\n+    private Boolean docIntoForce;\n+\n+    @Column(name = \"doc_deferred\")\n+    private Boolean docDeferred;\n+\n+    @Column(name = \"doc_rescheduled\")\n+    private Boolean docRescheduled;\n+\n+    @Column(name = \"doc_into_force_date\")\n+    private LocalDate docIntoForceDate;\n+\n+    @Column(name = \"doc_deferred_date\")\n+    private LocalDate docDeferredDate;\n+\n+    @Column(name = \"doc_rescheduled_date\")\n+    private LocalDate docRescheduledDate;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getDocNumber() {\n+        return docNumber;\n+    }\n+\n+    public Document docNumber(String docNumber) {\n+        this.docNumber = docNumber;\n+        return this;\n+    }\n+\n+    public void setDocNumber(String docNumber) {\n+        this.docNumber = docNumber;\n+    }\n+\n+    public LocalDate getDocDate() {\n+        return docDate;\n+    }\n+\n+    public Document docDate(LocalDate docDate) {\n+        this.docDate = docDate;\n+        return this;\n+    }\n+\n+    public void setDocDate(LocalDate docDate) {\n+        this.docDate = docDate;\n+    }\n+\n+    public String getDocDescription() {\n+        return docDescription;\n+    }\n+\n+    public Document docDescription(String docDescription) {\n+        this.docDescription = docDescription;\n+        return this;\n+    }\n+\n+    public void setDocDescription(String docDescription) {\n+        this.docDescription = docDescription;\n+    }\n+\n+    public String getDocType() {\n+        return docType;\n+    }\n+\n+    public Document docType(String docType) {\n+        this.docType = docType;\n+        return this;\n+    }\n+\n+    public void setDocType(String docType) {\n+        this.docType = docType;\n+    }\n+\n+    public Instant getDocSysDate() {\n+        return docSysDate;\n+    }\n+\n+    public Document docSysDate(Instant docSysDate) {\n+        this.docSysDate = docSysDate;\n+        return this;\n+    }\n+\n+    public void setDocSysDate(Instant docSysDate) {\n+        this.docSysDate = docSysDate;\n+    }\n+\n+    public String getDocCreatedBy() {\n+        return docCreatedBy;\n+    }\n+\n+    public Document docCreatedBy(String docCreatedBy) {\n+        this.docCreatedBy = docCreatedBy;\n+        return this;\n+    }\n+\n+    public void setDocCreatedBy(String docCreatedBy) {\n+        this.docCreatedBy = docCreatedBy;\n+    }\n+\n+    public String getDocMrn() {\n+        return docMrn;\n+    }\n+\n+    public Document docMrn(String docMrn) {\n+        this.docMrn = docMrn;\n+        return this;\n+    }\n+\n+    public void setDocMrn(String docMrn) {\n+        this.docMrn = docMrn;\n+    }\n+\n+    public String getDocStatus() {\n+        return docStatus;\n+    }\n+\n+    public Document docStatus(String docStatus) {\n+        this.docStatus = docStatus;\n+        return this;\n+    }\n+\n+    public void setDocStatus(String docStatus) {\n+        this.docStatus = docStatus;\n+    }\n+\n+    public Instant getDocLastChangeDate() {\n+        return docLastChangeDate;\n+    }\n+\n+    public Document docLastChangeDate(Instant docLastChangeDate) {\n+        this.docLastChangeDate = docLastChangeDate;\n+        return this;\n+    }\n+\n+    public void setDocLastChangeDate(Instant docLastChangeDate) {\n+        this.docLastChangeDate = docLastChangeDate;\n+    }\n+\n+    public Boolean isDocIntoForce() {\n+        return docIntoForce;\n+    }\n+\n+    public Document docIntoForce(Boolean docIntoForce) {\n+        this.docIntoForce = docIntoForce;\n+        return this;\n+    }\n+\n+    public void setDocIntoForce(Boolean docIntoForce) {\n+        this.docIntoForce = docIntoForce;\n+    }\n+\n+    public Boolean isDocDeferred() {\n+        return docDeferred;\n+    }\n+\n+    public Document docDeferred(Boolean docDeferred) {\n+        this.docDeferred = docDeferred;\n+        return this;\n+    }\n+\n+    public void setDocDeferred(Boolean docDeferred) {\n+        this.docDeferred = docDeferred;\n+    }\n+\n+    public Boolean isDocRescheduled() {\n+        return docRescheduled;\n+    }\n+\n+    public Document docRescheduled(Boolean docRescheduled) {\n+        this.docRescheduled = docRescheduled;\n+        return this;\n+    }\n+\n+    public void setDocRescheduled(Boolean docRescheduled) {\n+        this.docRescheduled = docRescheduled;\n+    }\n+\n+    public LocalDate getDocIntoForceDate() {\n+        return docIntoForceDate;\n+    }\n+\n+    public Document docIntoForceDate(LocalDate docIntoForceDate) {\n+        this.docIntoForceDate = docIntoForceDate;\n+        return this;\n+    }\n+\n+    public void setDocIntoForceDate(LocalDate docIntoForceDate) {\n+        this.docIntoForceDate = docIntoForceDate;\n+    }\n+\n+    public LocalDate getDocDeferredDate() {\n+        return docDeferredDate;\n+    }\n+\n+    public Document docDeferredDate(LocalDate docDeferredDate) {\n+        this.docDeferredDate = docDeferredDate;\n+        return this;\n+    }\n+\n+    public void setDocDeferredDate(LocalDate docDeferredDate) {\n+        this.docDeferredDate = docDeferredDate;\n+    }\n+\n+    public LocalDate getDocRescheduledDate() {\n+        return docRescheduledDate;\n+    }\n+\n+    public Document docRescheduledDate(LocalDate docRescheduledDate) {\n+        this.docRescheduledDate = docRescheduledDate;\n+        return this;\n+    }\n+\n+    public void setDocRescheduledDate(LocalDate docRescheduledDate) {\n+        this.docRescheduledDate = docRescheduledDate;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Document)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Document) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Document{\" +\n+            \"id=\" + getId() +\n+            \", docNumber='\" + getDocNumber() + \"'\" +\n+            \", docDate='\" + getDocDate() + \"'\" +\n+            \", docDescription='\" + getDocDescription() + \"'\" +\n+            \", docType='\" + getDocType() + \"'\" +\n+            \", docSysDate='\" + getDocSysDate() + \"'\" +\n+            \", docCreatedBy='\" + getDocCreatedBy() + \"'\" +\n+            \", docMrn='\" + getDocMrn() + \"'\" +\n+            \", docStatus='\" + getDocStatus() + \"'\" +\n+            \", docLastChangeDate='\" + getDocLastChangeDate() + \"'\" +\n+            \", docIntoForce='\" + isDocIntoForce() + \"'\" +\n+            \", docDeferred='\" + isDocDeferred() + \"'\" +\n+            \", docRescheduled='\" + isDocRescheduled() + \"'\" +\n+            \", docIntoForceDate='\" + getDocIntoForceDate() + \"'\" +\n+            \", docDeferredDate='\" + getDocDeferredDate() + \"'\" +\n+            \", docRescheduledDate='\" + getDocRescheduledDate() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "96b35adabe1cd8f6f4168d323945556272383e2f",
    "filename": "src/main/java/com/mycompany/myapp/domain/Email.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Email.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Email.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/Email.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,92 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Email.\n+ */\n+@Entity\n+@Table(name = \"email\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Email implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"eml_value\")\n+    private String emlValue;\n+\n+    @Column(name = \"eml_is_active\")\n+    private Boolean emlIsActive;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getEmlValue() {\n+        return emlValue;\n+    }\n+\n+    public Email emlValue(String emlValue) {\n+        this.emlValue = emlValue;\n+        return this;\n+    }\n+\n+    public void setEmlValue(String emlValue) {\n+        this.emlValue = emlValue;\n+    }\n+\n+    public Boolean isEmlIsActive() {\n+        return emlIsActive;\n+    }\n+\n+    public Email emlIsActive(Boolean emlIsActive) {\n+        this.emlIsActive = emlIsActive;\n+        return this;\n+    }\n+\n+    public void setEmlIsActive(Boolean emlIsActive) {\n+        this.emlIsActive = emlIsActive;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Email)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Email) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Email{\" +\n+            \"id=\" + getId() +\n+            \", emlValue='\" + getEmlValue() + \"'\" +\n+            \", emlIsActive='\" + isEmlIsActive() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "6f71be3d0dc7563b59e90bca6f02c146798f50a0",
    "filename": "src/main/java/com/mycompany/myapp/domain/EmergencyProcedure.java",
    "status": "added",
    "additions": 161,
    "deletions": 0,
    "changes": 161,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/EmergencyProcedure.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/EmergencyProcedure.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/EmergencyProcedure.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,161 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+\n+/**\n+ * A EmergencyProcedure.\n+ */\n+@Entity\n+@Table(name = \"emergency_procedure\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class EmergencyProcedure implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"emp_system\")\n+    private String empSystem;\n+\n+    @Column(name = \"emp_reason\")\n+    private String empReason;\n+\n+    @Column(name = \"emp_user\")\n+    private String empUser;\n+\n+    @Column(name = \"emp_is_active\")\n+    private Boolean empIsActive;\n+\n+    @Column(name = \"emp_date_start\")\n+    private Instant empDateStart;\n+\n+    @Column(name = \"emp_date_end\")\n+    private Instant empDateEnd;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getEmpSystem() {\n+        return empSystem;\n+    }\n+\n+    public EmergencyProcedure empSystem(String empSystem) {\n+        this.empSystem = empSystem;\n+        return this;\n+    }\n+\n+    public void setEmpSystem(String empSystem) {\n+        this.empSystem = empSystem;\n+    }\n+\n+    public String getEmpReason() {\n+        return empReason;\n+    }\n+\n+    public EmergencyProcedure empReason(String empReason) {\n+        this.empReason = empReason;\n+        return this;\n+    }\n+\n+    public void setEmpReason(String empReason) {\n+        this.empReason = empReason;\n+    }\n+\n+    public String getEmpUser() {\n+        return empUser;\n+    }\n+\n+    public EmergencyProcedure empUser(String empUser) {\n+        this.empUser = empUser;\n+        return this;\n+    }\n+\n+    public void setEmpUser(String empUser) {\n+        this.empUser = empUser;\n+    }\n+\n+    public Boolean isEmpIsActive() {\n+        return empIsActive;\n+    }\n+\n+    public EmergencyProcedure empIsActive(Boolean empIsActive) {\n+        this.empIsActive = empIsActive;\n+        return this;\n+    }\n+\n+    public void setEmpIsActive(Boolean empIsActive) {\n+        this.empIsActive = empIsActive;\n+    }\n+\n+    public Instant getEmpDateStart() {\n+        return empDateStart;\n+    }\n+\n+    public EmergencyProcedure empDateStart(Instant empDateStart) {\n+        this.empDateStart = empDateStart;\n+        return this;\n+    }\n+\n+    public void setEmpDateStart(Instant empDateStart) {\n+        this.empDateStart = empDateStart;\n+    }\n+\n+    public Instant getEmpDateEnd() {\n+        return empDateEnd;\n+    }\n+\n+    public EmergencyProcedure empDateEnd(Instant empDateEnd) {\n+        this.empDateEnd = empDateEnd;\n+        return this;\n+    }\n+\n+    public void setEmpDateEnd(Instant empDateEnd) {\n+        this.empDateEnd = empDateEnd;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof EmergencyProcedure)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((EmergencyProcedure) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"EmergencyProcedure{\" +\n+            \"id=\" + getId() +\n+            \", empSystem='\" + getEmpSystem() + \"'\" +\n+            \", empReason='\" + getEmpReason() + \"'\" +\n+            \", empUser='\" + getEmpUser() + \"'\" +\n+            \", empIsActive='\" + isEmpIsActive() + \"'\" +\n+            \", empDateStart='\" + getEmpDateStart() + \"'\" +\n+            \", empDateEnd='\" + getEmpDateEnd() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "cf058d309dbf99dcda9e75ef3fde804d672ecc11",
    "filename": "src/main/java/com/mycompany/myapp/domain/Inspection.java",
    "status": "added",
    "additions": 195,
    "deletions": 0,
    "changes": 195,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Inspection.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Inspection.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/Inspection.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,195 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Inspection.\n+ */\n+@Entity\n+@Table(name = \"inspection\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Inspection implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"ins_number\")\n+    private String insNumber;\n+\n+    @Column(name = \"ins_date\")\n+    private Instant insDate;\n+\n+    @Column(name = \"ins_customs_office\")\n+    private String insCustomsOffice;\n+\n+    @Column(name = \"ins_user\")\n+    private String insUser;\n+\n+    @Column(name = \"ins_sys_date\")\n+    private Instant insSysDate;\n+\n+    @Column(name = \"ins_type\")\n+    private String insType;\n+\n+    @ManyToMany\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    @JoinTable(name = \"inspection_rezma_entity\",\n+               joinColumns = @JoinColumn(name = \"inspection_id\", referencedColumnName = \"id\"),\n+               inverseJoinColumns = @JoinColumn(name = \"rezma_entity_id\", referencedColumnName = \"id\"))\n+    private Set<RezmaEntity> rezmaEntities = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getInsNumber() {\n+        return insNumber;\n+    }\n+\n+    public Inspection insNumber(String insNumber) {\n+        this.insNumber = insNumber;\n+        return this;\n+    }\n+\n+    public void setInsNumber(String insNumber) {\n+        this.insNumber = insNumber;\n+    }\n+\n+    public Instant getInsDate() {\n+        return insDate;\n+    }\n+\n+    public Inspection insDate(Instant insDate) {\n+        this.insDate = insDate;\n+        return this;\n+    }\n+\n+    public void setInsDate(Instant insDate) {\n+        this.insDate = insDate;\n+    }\n+\n+    public String getInsCustomsOffice() {\n+        return insCustomsOffice;\n+    }\n+\n+    public Inspection insCustomsOffice(String insCustomsOffice) {\n+        this.insCustomsOffice = insCustomsOffice;\n+        return this;\n+    }\n+\n+    public void setInsCustomsOffice(String insCustomsOffice) {\n+        this.insCustomsOffice = insCustomsOffice;\n+    }\n+\n+    public String getInsUser() {\n+        return insUser;\n+    }\n+\n+    public Inspection insUser(String insUser) {\n+        this.insUser = insUser;\n+        return this;\n+    }\n+\n+    public void setInsUser(String insUser) {\n+        this.insUser = insUser;\n+    }\n+\n+    public Instant getInsSysDate() {\n+        return insSysDate;\n+    }\n+\n+    public Inspection insSysDate(Instant insSysDate) {\n+        this.insSysDate = insSysDate;\n+        return this;\n+    }\n+\n+    public void setInsSysDate(Instant insSysDate) {\n+        this.insSysDate = insSysDate;\n+    }\n+\n+    public String getInsType() {\n+        return insType;\n+    }\n+\n+    public Inspection insType(String insType) {\n+        this.insType = insType;\n+        return this;\n+    }\n+\n+    public void setInsType(String insType) {\n+        this.insType = insType;\n+    }\n+\n+    public Set<RezmaEntity> getRezmaEntities() {\n+        return rezmaEntities;\n+    }\n+\n+    public Inspection rezmaEntities(Set<RezmaEntity> rezmaEntities) {\n+        this.rezmaEntities = rezmaEntities;\n+        return this;\n+    }\n+\n+    public Inspection addRezmaEntity(RezmaEntity rezmaEntity) {\n+        this.rezmaEntities.add(rezmaEntity);\n+        rezmaEntity.getInspections().add(this);\n+        return this;\n+    }\n+\n+    public Inspection removeRezmaEntity(RezmaEntity rezmaEntity) {\n+        this.rezmaEntities.remove(rezmaEntity);\n+        rezmaEntity.getInspections().remove(this);\n+        return this;\n+    }\n+\n+    public void setRezmaEntities(Set<RezmaEntity> rezmaEntities) {\n+        this.rezmaEntities = rezmaEntities;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Inspection)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Inspection) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Inspection{\" +\n+            \"id=\" + getId() +\n+            \", insNumber='\" + getInsNumber() + \"'\" +\n+            \", insDate='\" + getInsDate() + \"'\" +\n+            \", insCustomsOffice='\" + getInsCustomsOffice() + \"'\" +\n+            \", insUser='\" + getInsUser() + \"'\" +\n+            \", insSysDate='\" + getInsSysDate() + \"'\" +\n+            \", insType='\" + getInsType() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "7be32cf49676dc9497dc66ed2471704acbf538c6",
    "filename": "src/main/java/com/mycompany/myapp/domain/ModuleConfiguration.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/ModuleConfiguration.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/ModuleConfiguration.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/ModuleConfiguration.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,75 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A ModuleConfiguration.\n+ */\n+@Entity\n+@Table(name = \"module_configuration\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class ModuleConfiguration implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"moc_name\")\n+    private String mocName;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getMocName() {\n+        return mocName;\n+    }\n+\n+    public ModuleConfiguration mocName(String mocName) {\n+        this.mocName = mocName;\n+        return this;\n+    }\n+\n+    public void setMocName(String mocName) {\n+        this.mocName = mocName;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof ModuleConfiguration)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((ModuleConfiguration) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"ModuleConfiguration{\" +\n+            \"id=\" + getId() +\n+            \", mocName='\" + getMocName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "a5d0eeba20b26edf7a526f984e8d613d6bb24e0c",
    "filename": "src/main/java/com/mycompany/myapp/domain/Obligation.java",
    "status": "added",
    "additions": 350,
    "deletions": 0,
    "changes": 350,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Obligation.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Obligation.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/Obligation.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,350 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Obligation.\n+ */\n+@Entity\n+@Table(name = \"obligation\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Obligation implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"obl_sys_date\")\n+    private Instant oblSysDate;\n+\n+    @Column(name = \"obl_created_by\")\n+    private String oblCreatedBy;\n+\n+    @Column(name = \"obl_customs_office\")\n+    private String oblCustomsOffice;\n+\n+    @Column(name = \"obl_type\")\n+    private String oblType;\n+\n+    @Column(name = \"obl_amount\", precision = 21, scale = 2)\n+    private BigDecimal oblAmount;\n+\n+    @Column(name = \"obl_lapsed\")\n+    private Boolean oblLapsed;\n+\n+    @Column(name = \"obl_vpo_number\")\n+    private String oblVpoNumber;\n+\n+    @Column(name = \"obl_transaction_number\")\n+    private String oblTransactionNumber;\n+\n+    @Column(name = \"obl_mra_date\")\n+    private Instant oblMraDate;\n+\n+    @Column(name = \"obl_state\")\n+    private String oblState;\n+\n+    @Column(name = \"obl_identifier\")\n+    private String oblIdentifier;\n+\n+    @Column(name = \"obl_amount_difference\", precision = 21, scale = 2)\n+    private BigDecimal oblAmountDifference;\n+\n+    @Column(name = \"obl_guaranty_difference\", precision = 21, scale = 2)\n+    private BigDecimal oblGuarantyDifference;\n+\n+    @Column(name = \"obl_customs_office_name\")\n+    private String oblCustomsOfficeName;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"obligations\", allowSetters = true)\n+    private Document document;\n+\n+    @ManyToMany\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    @JoinTable(name = \"obligation_rezma_entity\",\n+               joinColumns = @JoinColumn(name = \"obligation_id\", referencedColumnName = \"id\"),\n+               inverseJoinColumns = @JoinColumn(name = \"rezma_entity_id\", referencedColumnName = \"id\"))\n+    private Set<RezmaEntity> rezmaEntities = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Instant getOblSysDate() {\n+        return oblSysDate;\n+    }\n+\n+    public Obligation oblSysDate(Instant oblSysDate) {\n+        this.oblSysDate = oblSysDate;\n+        return this;\n+    }\n+\n+    public void setOblSysDate(Instant oblSysDate) {\n+        this.oblSysDate = oblSysDate;\n+    }\n+\n+    public String getOblCreatedBy() {\n+        return oblCreatedBy;\n+    }\n+\n+    public Obligation oblCreatedBy(String oblCreatedBy) {\n+        this.oblCreatedBy = oblCreatedBy;\n+        return this;\n+    }\n+\n+    public void setOblCreatedBy(String oblCreatedBy) {\n+        this.oblCreatedBy = oblCreatedBy;\n+    }\n+\n+    public String getOblCustomsOffice() {\n+        return oblCustomsOffice;\n+    }\n+\n+    public Obligation oblCustomsOffice(String oblCustomsOffice) {\n+        this.oblCustomsOffice = oblCustomsOffice;\n+        return this;\n+    }\n+\n+    public void setOblCustomsOffice(String oblCustomsOffice) {\n+        this.oblCustomsOffice = oblCustomsOffice;\n+    }\n+\n+    public String getOblType() {\n+        return oblType;\n+    }\n+\n+    public Obligation oblType(String oblType) {\n+        this.oblType = oblType;\n+        return this;\n+    }\n+\n+    public void setOblType(String oblType) {\n+        this.oblType = oblType;\n+    }\n+\n+    public BigDecimal getOblAmount() {\n+        return oblAmount;\n+    }\n+\n+    public Obligation oblAmount(BigDecimal oblAmount) {\n+        this.oblAmount = oblAmount;\n+        return this;\n+    }\n+\n+    public void setOblAmount(BigDecimal oblAmount) {\n+        this.oblAmount = oblAmount;\n+    }\n+\n+    public Boolean isOblLapsed() {\n+        return oblLapsed;\n+    }\n+\n+    public Obligation oblLapsed(Boolean oblLapsed) {\n+        this.oblLapsed = oblLapsed;\n+        return this;\n+    }\n+\n+    public void setOblLapsed(Boolean oblLapsed) {\n+        this.oblLapsed = oblLapsed;\n+    }\n+\n+    public String getOblVpoNumber() {\n+        return oblVpoNumber;\n+    }\n+\n+    public Obligation oblVpoNumber(String oblVpoNumber) {\n+        this.oblVpoNumber = oblVpoNumber;\n+        return this;\n+    }\n+\n+    public void setOblVpoNumber(String oblVpoNumber) {\n+        this.oblVpoNumber = oblVpoNumber;\n+    }\n+\n+    public String getOblTransactionNumber() {\n+        return oblTransactionNumber;\n+    }\n+\n+    public Obligation oblTransactionNumber(String oblTransactionNumber) {\n+        this.oblTransactionNumber = oblTransactionNumber;\n+        return this;\n+    }\n+\n+    public void setOblTransactionNumber(String oblTransactionNumber) {\n+        this.oblTransactionNumber = oblTransactionNumber;\n+    }\n+\n+    public Instant getOblMraDate() {\n+        return oblMraDate;\n+    }\n+\n+    public Obligation oblMraDate(Instant oblMraDate) {\n+        this.oblMraDate = oblMraDate;\n+        return this;\n+    }\n+\n+    public void setOblMraDate(Instant oblMraDate) {\n+        this.oblMraDate = oblMraDate;\n+    }\n+\n+    public String getOblState() {\n+        return oblState;\n+    }\n+\n+    public Obligation oblState(String oblState) {\n+        this.oblState = oblState;\n+        return this;\n+    }\n+\n+    public void setOblState(String oblState) {\n+        this.oblState = oblState;\n+    }\n+\n+    public String getOblIdentifier() {\n+        return oblIdentifier;\n+    }\n+\n+    public Obligation oblIdentifier(String oblIdentifier) {\n+        this.oblIdentifier = oblIdentifier;\n+        return this;\n+    }\n+\n+    public void setOblIdentifier(String oblIdentifier) {\n+        this.oblIdentifier = oblIdentifier;\n+    }\n+\n+    public BigDecimal getOblAmountDifference() {\n+        return oblAmountDifference;\n+    }\n+\n+    public Obligation oblAmountDifference(BigDecimal oblAmountDifference) {\n+        this.oblAmountDifference = oblAmountDifference;\n+        return this;\n+    }\n+\n+    public void setOblAmountDifference(BigDecimal oblAmountDifference) {\n+        this.oblAmountDifference = oblAmountDifference;\n+    }\n+\n+    public BigDecimal getOblGuarantyDifference() {\n+        return oblGuarantyDifference;\n+    }\n+\n+    public Obligation oblGuarantyDifference(BigDecimal oblGuarantyDifference) {\n+        this.oblGuarantyDifference = oblGuarantyDifference;\n+        return this;\n+    }\n+\n+    public void setOblGuarantyDifference(BigDecimal oblGuarantyDifference) {\n+        this.oblGuarantyDifference = oblGuarantyDifference;\n+    }\n+\n+    public String getOblCustomsOfficeName() {\n+        return oblCustomsOfficeName;\n+    }\n+\n+    public Obligation oblCustomsOfficeName(String oblCustomsOfficeName) {\n+        this.oblCustomsOfficeName = oblCustomsOfficeName;\n+        return this;\n+    }\n+\n+    public void setOblCustomsOfficeName(String oblCustomsOfficeName) {\n+        this.oblCustomsOfficeName = oblCustomsOfficeName;\n+    }\n+\n+    public Document getDocument() {\n+        return document;\n+    }\n+\n+    public Obligation document(Document document) {\n+        this.document = document;\n+        return this;\n+    }\n+\n+    public void setDocument(Document document) {\n+        this.document = document;\n+    }\n+\n+    public Set<RezmaEntity> getRezmaEntities() {\n+        return rezmaEntities;\n+    }\n+\n+    public Obligation rezmaEntities(Set<RezmaEntity> rezmaEntities) {\n+        this.rezmaEntities = rezmaEntities;\n+        return this;\n+    }\n+\n+    public Obligation addRezmaEntity(RezmaEntity rezmaEntity) {\n+        this.rezmaEntities.add(rezmaEntity);\n+        rezmaEntity.getObligations().add(this);\n+        return this;\n+    }\n+\n+    public Obligation removeRezmaEntity(RezmaEntity rezmaEntity) {\n+        this.rezmaEntities.remove(rezmaEntity);\n+        rezmaEntity.getObligations().remove(this);\n+        return this;\n+    }\n+\n+    public void setRezmaEntities(Set<RezmaEntity> rezmaEntities) {\n+        this.rezmaEntities = rezmaEntities;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Obligation)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Obligation) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Obligation{\" +\n+            \"id=\" + getId() +\n+            \", oblSysDate='\" + getOblSysDate() + \"'\" +\n+            \", oblCreatedBy='\" + getOblCreatedBy() + \"'\" +\n+            \", oblCustomsOffice='\" + getOblCustomsOffice() + \"'\" +\n+            \", oblType='\" + getOblType() + \"'\" +\n+            \", oblAmount=\" + getOblAmount() +\n+            \", oblLapsed='\" + isOblLapsed() + \"'\" +\n+            \", oblVpoNumber='\" + getOblVpoNumber() + \"'\" +\n+            \", oblTransactionNumber='\" + getOblTransactionNumber() + \"'\" +\n+            \", oblMraDate='\" + getOblMraDate() + \"'\" +\n+            \", oblState='\" + getOblState() + \"'\" +\n+            \", oblIdentifier='\" + getOblIdentifier() + \"'\" +\n+            \", oblAmountDifference=\" + getOblAmountDifference() +\n+            \", oblGuarantyDifference=\" + getOblGuarantyDifference() +\n+            \", oblCustomsOfficeName='\" + getOblCustomsOfficeName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "9e95bb285176f0d06c1e183519dac8b8add50442",
    "filename": "src/main/java/com/mycompany/myapp/domain/RezmaEntity.java",
    "status": "added",
    "additions": 292,
    "deletions": 0,
    "changes": 292,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/RezmaEntity.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/RezmaEntity.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/RezmaEntity.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,292 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A RezmaEntity.\n+ */\n+@Entity\n+@Table(name = \"rezma_entity\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class RezmaEntity implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"ent_name\")\n+    private String entName;\n+\n+    @Column(name = \"ent_address\")\n+    private String entAddress;\n+\n+    @Column(name = \"ent_system_date\")\n+    private Instant entSystemDate;\n+\n+    @Column(name = \"ent_created_by\")\n+    private String entCreatedBy;\n+\n+    @Column(name = \"ent_identifier\")\n+    private String entIdentifier;\n+\n+    @Column(name = \"ent_type\")\n+    private String entType;\n+\n+    @Column(name = \"ent_country\")\n+    private String entCountry;\n+\n+    @Column(name = \"ent_identifier_type\")\n+    private String entIdentifierType;\n+\n+    @Column(name = \"ent_tin\")\n+    private String entTin;\n+\n+    @Column(name = \"ent_dob\")\n+    private String entDOB;\n+\n+    @ManyToMany(mappedBy = \"rezmaEntities\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    @JsonIgnore\n+    private Set<Obligation> obligations = new HashSet<>();\n+\n+    @ManyToMany(mappedBy = \"rezmaEntities\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    @JsonIgnore\n+    private Set<Inspection> inspections = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getEntName() {\n+        return entName;\n+    }\n+\n+    public RezmaEntity entName(String entName) {\n+        this.entName = entName;\n+        return this;\n+    }\n+\n+    public void setEntName(String entName) {\n+        this.entName = entName;\n+    }\n+\n+    public String getEntAddress() {\n+        return entAddress;\n+    }\n+\n+    public RezmaEntity entAddress(String entAddress) {\n+        this.entAddress = entAddress;\n+        return this;\n+    }\n+\n+    public void setEntAddress(String entAddress) {\n+        this.entAddress = entAddress;\n+    }\n+\n+    public Instant getEntSystemDate() {\n+        return entSystemDate;\n+    }\n+\n+    public RezmaEntity entSystemDate(Instant entSystemDate) {\n+        this.entSystemDate = entSystemDate;\n+        return this;\n+    }\n+\n+    public void setEntSystemDate(Instant entSystemDate) {\n+        this.entSystemDate = entSystemDate;\n+    }\n+\n+    public String getEntCreatedBy() {\n+        return entCreatedBy;\n+    }\n+\n+    public RezmaEntity entCreatedBy(String entCreatedBy) {\n+        this.entCreatedBy = entCreatedBy;\n+        return this;\n+    }\n+\n+    public void setEntCreatedBy(String entCreatedBy) {\n+        this.entCreatedBy = entCreatedBy;\n+    }\n+\n+    public String getEntIdentifier() {\n+        return entIdentifier;\n+    }\n+\n+    public RezmaEntity entIdentifier(String entIdentifier) {\n+        this.entIdentifier = entIdentifier;\n+        return this;\n+    }\n+\n+    public void setEntIdentifier(String entIdentifier) {\n+        this.entIdentifier = entIdentifier;\n+    }\n+\n+    public String getEntType() {\n+        return entType;\n+    }\n+\n+    public RezmaEntity entType(String entType) {\n+        this.entType = entType;\n+        return this;\n+    }\n+\n+    public void setEntType(String entType) {\n+        this.entType = entType;\n+    }\n+\n+    public String getEntCountry() {\n+        return entCountry;\n+    }\n+\n+    public RezmaEntity entCountry(String entCountry) {\n+        this.entCountry = entCountry;\n+        return this;\n+    }\n+\n+    public void setEntCountry(String entCountry) {\n+        this.entCountry = entCountry;\n+    }\n+\n+    public String getEntIdentifierType() {\n+        return entIdentifierType;\n+    }\n+\n+    public RezmaEntity entIdentifierType(String entIdentifierType) {\n+        this.entIdentifierType = entIdentifierType;\n+        return this;\n+    }\n+\n+    public void setEntIdentifierType(String entIdentifierType) {\n+        this.entIdentifierType = entIdentifierType;\n+    }\n+\n+    public String getEntTin() {\n+        return entTin;\n+    }\n+\n+    public RezmaEntity entTin(String entTin) {\n+        this.entTin = entTin;\n+        return this;\n+    }\n+\n+    public void setEntTin(String entTin) {\n+        this.entTin = entTin;\n+    }\n+\n+    public String getEntDOB() {\n+        return entDOB;\n+    }\n+\n+    public RezmaEntity entDOB(String entDOB) {\n+        this.entDOB = entDOB;\n+        return this;\n+    }\n+\n+    public void setEntDOB(String entDOB) {\n+        this.entDOB = entDOB;\n+    }\n+\n+    public Set<Obligation> getObligations() {\n+        return obligations;\n+    }\n+\n+    public RezmaEntity obligations(Set<Obligation> obligations) {\n+        this.obligations = obligations;\n+        return this;\n+    }\n+\n+    public RezmaEntity addObligation(Obligation obligation) {\n+        this.obligations.add(obligation);\n+        obligation.getRezmaEntities().add(this);\n+        return this;\n+    }\n+\n+    public RezmaEntity removeObligation(Obligation obligation) {\n+        this.obligations.remove(obligation);\n+        obligation.getRezmaEntities().remove(this);\n+        return this;\n+    }\n+\n+    public void setObligations(Set<Obligation> obligations) {\n+        this.obligations = obligations;\n+    }\n+\n+    public Set<Inspection> getInspections() {\n+        return inspections;\n+    }\n+\n+    public RezmaEntity inspections(Set<Inspection> inspections) {\n+        this.inspections = inspections;\n+        return this;\n+    }\n+\n+    public RezmaEntity addInspection(Inspection inspection) {\n+        this.inspections.add(inspection);\n+        inspection.getRezmaEntities().add(this);\n+        return this;\n+    }\n+\n+    public RezmaEntity removeInspection(Inspection inspection) {\n+        this.inspections.remove(inspection);\n+        inspection.getRezmaEntities().remove(this);\n+        return this;\n+    }\n+\n+    public void setInspections(Set<Inspection> inspections) {\n+        this.inspections = inspections;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof RezmaEntity)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((RezmaEntity) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"RezmaEntity{\" +\n+            \"id=\" + getId() +\n+            \", entName='\" + getEntName() + \"'\" +\n+            \", entAddress='\" + getEntAddress() + \"'\" +\n+            \", entSystemDate='\" + getEntSystemDate() + \"'\" +\n+            \", entCreatedBy='\" + getEntCreatedBy() + \"'\" +\n+            \", entIdentifier='\" + getEntIdentifier() + \"'\" +\n+            \", entType='\" + getEntType() + \"'\" +\n+            \", entCountry='\" + getEntCountry() + \"'\" +\n+            \", entIdentifierType='\" + getEntIdentifierType() + \"'\" +\n+            \", entTin='\" + getEntTin() + \"'\" +\n+            \", entDOB='\" + getEntDOB() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "526d8be84125dabba0bed50394e0fab6a3949b95",
    "filename": "src/main/java/com/mycompany/myapp/domain/ScheduleLock.java",
    "status": "added",
    "additions": 127,
    "deletions": 0,
    "changes": 127,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/ScheduleLock.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/ScheduleLock.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/ScheduleLock.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,127 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+\n+/**\n+ * A ScheduleLock.\n+ */\n+@Entity\n+@Table(name = \"schedule_lock\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class ScheduleLock implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"slc_name\")\n+    private String slcName;\n+\n+    @Column(name = \"slc_lock_until\")\n+    private Instant slcLockUntil;\n+\n+    @Column(name = \"slc_locked_at\")\n+    private Instant slcLockedAt;\n+\n+    @Column(name = \"slc_locked_by\")\n+    private String slcLockedBy;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getSlcName() {\n+        return slcName;\n+    }\n+\n+    public ScheduleLock slcName(String slcName) {\n+        this.slcName = slcName;\n+        return this;\n+    }\n+\n+    public void setSlcName(String slcName) {\n+        this.slcName = slcName;\n+    }\n+\n+    public Instant getSlcLockUntil() {\n+        return slcLockUntil;\n+    }\n+\n+    public ScheduleLock slcLockUntil(Instant slcLockUntil) {\n+        this.slcLockUntil = slcLockUntil;\n+        return this;\n+    }\n+\n+    public void setSlcLockUntil(Instant slcLockUntil) {\n+        this.slcLockUntil = slcLockUntil;\n+    }\n+\n+    public Instant getSlcLockedAt() {\n+        return slcLockedAt;\n+    }\n+\n+    public ScheduleLock slcLockedAt(Instant slcLockedAt) {\n+        this.slcLockedAt = slcLockedAt;\n+        return this;\n+    }\n+\n+    public void setSlcLockedAt(Instant slcLockedAt) {\n+        this.slcLockedAt = slcLockedAt;\n+    }\n+\n+    public String getSlcLockedBy() {\n+        return slcLockedBy;\n+    }\n+\n+    public ScheduleLock slcLockedBy(String slcLockedBy) {\n+        this.slcLockedBy = slcLockedBy;\n+        return this;\n+    }\n+\n+    public void setSlcLockedBy(String slcLockedBy) {\n+        this.slcLockedBy = slcLockedBy;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof ScheduleLock)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((ScheduleLock) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"ScheduleLock{\" +\n+            \"id=\" + getId() +\n+            \", slcName='\" + getSlcName() + \"'\" +\n+            \", slcLockUntil='\" + getSlcLockUntil() + \"'\" +\n+            \", slcLockedAt='\" + getSlcLockedAt() + \"'\" +\n+            \", slcLockedBy='\" + getSlcLockedBy() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "2f5d43d2fe3054157ea90e224fb9ba13ecbb6775",
    "filename": "src/main/java/com/mycompany/myapp/domain/Transaction.java",
    "status": "added",
    "additions": 282,
    "deletions": 0,
    "changes": 282,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Transaction.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/domain/Transaction.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/domain/Transaction.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,282 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+\n+/**\n+ * A Transaction.\n+ */\n+@Entity\n+@Table(name = \"transaction\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Transaction implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"sequenceGenerator\")\n+    @SequenceGenerator(name = \"sequenceGenerator\")\n+    private Long id;\n+\n+    @Column(name = \"trn_number\")\n+    private String trnNumber;\n+\n+    @Column(name = \"trn_date\")\n+    private Instant trnDate;\n+\n+    @Column(name = \"trn_system\")\n+    private String trnSystem;\n+\n+    @Column(name = \"trn_amount\", precision = 21, scale = 2)\n+    private BigDecimal trnAmount;\n+\n+    @Column(name = \"trn_creation_date\")\n+    private Instant trnCreationDate;\n+\n+    @Column(name = \"trn_sys_date\")\n+    private Instant trnSysDate;\n+\n+    @Column(name = \"trn_created_by\")\n+    private String trnCreatedBy;\n+\n+    @Column(name = \"trn_type\")\n+    private String trnType;\n+\n+    @Column(name = \"trn_code\")\n+    private String trnCode;\n+\n+    @Column(name = \"trn_status\")\n+    private String trnStatus;\n+\n+    @Column(name = \"trn_description\")\n+    private String trnDescription;\n+\n+    @Column(name = \"trn_payment_type\")\n+    private String trnPaymentType;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"transactions\", allowSetters = true)\n+    private Obligation obligation;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTrnNumber() {\n+        return trnNumber;\n+    }\n+\n+    public Transaction trnNumber(String trnNumber) {\n+        this.trnNumber = trnNumber;\n+        return this;\n+    }\n+\n+    public void setTrnNumber(String trnNumber) {\n+        this.trnNumber = trnNumber;\n+    }\n+\n+    public Instant getTrnDate() {\n+        return trnDate;\n+    }\n+\n+    public Transaction trnDate(Instant trnDate) {\n+        this.trnDate = trnDate;\n+        return this;\n+    }\n+\n+    public void setTrnDate(Instant trnDate) {\n+        this.trnDate = trnDate;\n+    }\n+\n+    public String getTrnSystem() {\n+        return trnSystem;\n+    }\n+\n+    public Transaction trnSystem(String trnSystem) {\n+        this.trnSystem = trnSystem;\n+        return this;\n+    }\n+\n+    public void setTrnSystem(String trnSystem) {\n+        this.trnSystem = trnSystem;\n+    }\n+\n+    public BigDecimal getTrnAmount() {\n+        return trnAmount;\n+    }\n+\n+    public Transaction trnAmount(BigDecimal trnAmount) {\n+        this.trnAmount = trnAmount;\n+        return this;\n+    }\n+\n+    public void setTrnAmount(BigDecimal trnAmount) {\n+        this.trnAmount = trnAmount;\n+    }\n+\n+    public Instant getTrnCreationDate() {\n+        return trnCreationDate;\n+    }\n+\n+    public Transaction trnCreationDate(Instant trnCreationDate) {\n+        this.trnCreationDate = trnCreationDate;\n+        return this;\n+    }\n+\n+    public void setTrnCreationDate(Instant trnCreationDate) {\n+        this.trnCreationDate = trnCreationDate;\n+    }\n+\n+    public Instant getTrnSysDate() {\n+        return trnSysDate;\n+    }\n+\n+    public Transaction trnSysDate(Instant trnSysDate) {\n+        this.trnSysDate = trnSysDate;\n+        return this;\n+    }\n+\n+    public void setTrnSysDate(Instant trnSysDate) {\n+        this.trnSysDate = trnSysDate;\n+    }\n+\n+    public String getTrnCreatedBy() {\n+        return trnCreatedBy;\n+    }\n+\n+    public Transaction trnCreatedBy(String trnCreatedBy) {\n+        this.trnCreatedBy = trnCreatedBy;\n+        return this;\n+    }\n+\n+    public void setTrnCreatedBy(String trnCreatedBy) {\n+        this.trnCreatedBy = trnCreatedBy;\n+    }\n+\n+    public String getTrnType() {\n+        return trnType;\n+    }\n+\n+    public Transaction trnType(String trnType) {\n+        this.trnType = trnType;\n+        return this;\n+    }\n+\n+    public void setTrnType(String trnType) {\n+        this.trnType = trnType;\n+    }\n+\n+    public String getTrnCode() {\n+        return trnCode;\n+    }\n+\n+    public Transaction trnCode(String trnCode) {\n+        this.trnCode = trnCode;\n+        return this;\n+    }\n+\n+    public void setTrnCode(String trnCode) {\n+        this.trnCode = trnCode;\n+    }\n+\n+    public String getTrnStatus() {\n+        return trnStatus;\n+    }\n+\n+    public Transaction trnStatus(String trnStatus) {\n+        this.trnStatus = trnStatus;\n+        return this;\n+    }\n+\n+    public void setTrnStatus(String trnStatus) {\n+        this.trnStatus = trnStatus;\n+    }\n+\n+    public String getTrnDescription() {\n+        return trnDescription;\n+    }\n+\n+    public Transaction trnDescription(String trnDescription) {\n+        this.trnDescription = trnDescription;\n+        return this;\n+    }\n+\n+    public void setTrnDescription(String trnDescription) {\n+        this.trnDescription = trnDescription;\n+    }\n+\n+    public String getTrnPaymentType() {\n+        return trnPaymentType;\n+    }\n+\n+    public Transaction trnPaymentType(String trnPaymentType) {\n+        this.trnPaymentType = trnPaymentType;\n+        return this;\n+    }\n+\n+    public void setTrnPaymentType(String trnPaymentType) {\n+        this.trnPaymentType = trnPaymentType;\n+    }\n+\n+    public Obligation getObligation() {\n+        return obligation;\n+    }\n+\n+    public Transaction obligation(Obligation obligation) {\n+        this.obligation = obligation;\n+        return this;\n+    }\n+\n+    public void setObligation(Obligation obligation) {\n+        this.obligation = obligation;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Transaction)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Transaction) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Transaction{\" +\n+            \"id=\" + getId() +\n+            \", trnNumber='\" + getTrnNumber() + \"'\" +\n+            \", trnDate='\" + getTrnDate() + \"'\" +\n+            \", trnSystem='\" + getTrnSystem() + \"'\" +\n+            \", trnAmount=\" + getTrnAmount() +\n+            \", trnCreationDate='\" + getTrnCreationDate() + \"'\" +\n+            \", trnSysDate='\" + getTrnSysDate() + \"'\" +\n+            \", trnCreatedBy='\" + getTrnCreatedBy() + \"'\" +\n+            \", trnType='\" + getTrnType() + \"'\" +\n+            \", trnCode='\" + getTrnCode() + \"'\" +\n+            \", trnStatus='\" + getTrnStatus() + \"'\" +\n+            \", trnDescription='\" + getTrnDescription() + \"'\" +\n+            \", trnPaymentType='\" + getTrnPaymentType() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "21cc7849679bd611a0c7e7c9c81d7ac66373fc2d",
    "filename": "src/main/java/com/mycompany/myapp/repository/CertificateEmergencyTextRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/CertificateEmergencyTextRepository.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/CertificateEmergencyTextRepository.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/repository/CertificateEmergencyTextRepository.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.CertificateEmergencyText;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the CertificateEmergencyText entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface CertificateEmergencyTextRepository extends JpaRepository<CertificateEmergencyText, Long> {\n+}"
  },
  {
    "sha": "9ef655fd0611a19a5d5c036e09fe7d53b1d66969",
    "filename": "src/main/java/com/mycompany/myapp/repository/CertificateRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/CertificateRepository.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/CertificateRepository.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/repository/CertificateRepository.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Certificate;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Certificate entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface CertificateRepository extends JpaRepository<Certificate, Long> {\n+}"
  },
  {
    "sha": "2ae3a0d35ae158732d78b31d5a74802e588e026d",
    "filename": "src/main/java/com/mycompany/myapp/repository/ConfigRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/ConfigRepository.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/ConfigRepository.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/repository/ConfigRepository.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Config;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Config entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface ConfigRepository extends JpaRepository<Config, Long> {\n+}"
  },
  {
    "sha": "94f3c111c028b887d0285267529789631cf11c1c",
    "filename": "src/main/java/com/mycompany/myapp/repository/DocumentRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/DocumentRepository.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/DocumentRepository.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/repository/DocumentRepository.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Document;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Document entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface DocumentRepository extends JpaRepository<Document, Long> {\n+}"
  },
  {
    "sha": "cba4b07583c339989f87d92daa6bd16247480901",
    "filename": "src/main/java/com/mycompany/myapp/repository/EmailRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/nnikolov06/jhipster-sample-application/blob/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/EmailRepository.java",
    "raw_url": "https://github.com/nnikolov06/jhipster-sample-application/raw/862fcf911a24ee6f625351ff1ff7a185a251ad9c/src/main/java/com/mycompany/myapp/repository/EmailRepository.java",
    "contents_url": "https://api.github.com/repos/nnikolov06/jhipster-sample-application/contents/src/main/java/com/mycompany/myapp/repository/EmailRepository.java?ref=862fcf911a24ee6f625351ff1ff7a185a251ad9c",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Email;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Email entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface EmailRepository extends JpaRepository<Email, Long> {\n+}"
  }
]
