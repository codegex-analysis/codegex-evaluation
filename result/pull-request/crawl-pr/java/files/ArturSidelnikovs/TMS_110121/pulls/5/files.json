[
  {
    "sha": "479180530f4c51897ef55483b28087d7a39e039f",
    "filename": "Lesson12/src/Tasks/task1/Generics.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task1/Generics.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task1/Generics.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson12/src/Tasks/task1/Generics.java?ref=9f8079f64b1c537523b41885e76465e2b46117ab",
    "patch": "@@ -0,0 +1,32 @@\n+package Tasks.task1;\n+/*\n+Написать класс, который умеет хранить в себе массив любых типов данных (int, long\n+etc.). Реализовать метод get (int index), который возвращает любой элемент\n+массива по индексу.\n+ */\n+\n+public class Generics <Type extends Number> {\n+\n+    private Type [] index1;\n+\n+\n+    public Type[] getIndex1() {\n+        return index1;\n+    }\n+\n+    public void setIndex1(Type[] index1) {\n+        this.index1 = index1;\n+        }\n+\n+\n+    public Type getIndex (int index) {\n+        System.out.println(\"Под индексом \" + index);\n+        return index1[index];\n+    }\n+\n+\n+}\n+\n+\n+\n+"
  },
  {
    "sha": "e069843374f5b371a1574074242cd83283eba468",
    "filename": "Lesson12/src/Tasks/task1/Runner.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task1/Runner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task1/Runner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson12/src/Tasks/task1/Runner.java?ref=9f8079f64b1c537523b41885e76465e2b46117ab",
    "patch": "@@ -0,0 +1,23 @@\n+package Tasks.task1;\n+\n+public class Runner {\n+    public static void main(String[] args) {\n+\n+        Generics <Number> generics = new Generics<>();\n+\n+        generics.setIndex1 (new Number[3]);\n+\n+        generics.getIndex1()[0] = 7.9;\n+        generics.getIndex1()[1] = -6458;\n+        generics.getIndex1()[2] = 4040;\n+\n+        System.out.println(generics.getIndex(2));\n+\n+\n+\n+\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "84b3f33d6708eba389e6ce801137da05cc5316ad",
    "filename": "Lesson12/src/Tasks/task2/AnnotationMyS.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task2/AnnotationMyS.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task2/AnnotationMyS.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson12/src/Tasks/task2/AnnotationMyS.java?ref=9f8079f64b1c537523b41885e76465e2b46117ab",
    "patch": "@@ -0,0 +1,30 @@\n+package Tasks.task2;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/*\n+Придумать и написать собственную аннотацию @Version, которая бует хранить информацию о версии класса сервиса\n+(поле обязательное) MyService и кодовое название версии\n+(поле не обязательное) - (например номер версии = 7.1, а кодовое название версии = Nougat).\n+\n+Класс MyService должен иметь переменные c private модификаторами, конструктор по умолчанию, get и set методы,\n+переопределенные методы equals и hashcode, а так же private метод (private thisClassInfo),\n+который будет просто печатать данные о самом классе (данные любые на ваш выбор), в котором он определен.\n+\n+Написать программу, которая будет анализировать присутствие аннотации над классом MyService и если она присутствует\n+- создавать экземпляр этого класса, задавать значения его полям и вызывать метод thisClassInfo\n+(использовать возможности пакета reflection).\n+ */\n+\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface AnnotationMyS {\n+\n+    double versionClass ();\n+    String nameClass() default \"Name of class\";\n+\n+\n+}"
  },
  {
    "sha": "ca4aaf82b1fa837da3fccb4b32c208735b8731c6",
    "filename": "Lesson12/src/Tasks/task2/MyService.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task2/MyService.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task2/MyService.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson12/src/Tasks/task2/MyService.java?ref=9f8079f64b1c537523b41885e76465e2b46117ab",
    "patch": "@@ -0,0 +1,55 @@\n+package Tasks.task2;\n+\n+/*\n+Придумать и написать собственную аннотацию @Version, которая бует хранить информацию о версии класса сервиса\n+(поле обязательное) MyService и кодовое название версии\n+(поле не обязательное) - (например номер версии = 7.1, а кодовое название версии = Nougat).\n+\n+Класс MyService должен иметь переменные c private модификаторами, конструктор по умолчанию, get и set методы,\n+переопределенные методы equals и hashcode, а так же private метод (private thisClassInfo),\n+который будет просто печатать данные о самом классе (данные любые на ваш выбор), в котором он определен.\n+\n+Написать программу, которая будет анализировать присутствие аннотации над классом MyService и если она присутствует\n+- создавать экземпляр этого класса, задавать значения его полям и вызывать метод thisClassInfo\n+(использовать возможности пакета reflection).\n+ */\n+@AnnotationMyS (versionClass = 10.1)\n+public class MyService {\n+\n+    private int users;\n+    private String name;\n+\n+\n+\n+    public int getUsers() {\n+        return users;\n+    }\n+\n+    public void setUsers(int users) {\n+        this.users = users;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+     void thisClassInfo () {\n+        System.out.println(\"Данный сервис нассчитывает \" +getUsers() + \" пользователей и называется \" + getName());\n+    }\n+\n+\n+\n+    @Override\n+    public int hashCode() {\n+        return super.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+}"
  },
  {
    "sha": "69b39cd1fb7260307f39b4faa946ef8722f20d42",
    "filename": "Lesson12/src/Tasks/task2/Runner.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task2/Runner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/9f8079f64b1c537523b41885e76465e2b46117ab/Lesson12/src/Tasks/task2/Runner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson12/src/Tasks/task2/Runner.java?ref=9f8079f64b1c537523b41885e76465e2b46117ab",
    "patch": "@@ -0,0 +1,25 @@\n+package Tasks.task2;\n+\n+import java.lang.reflect.Method;\n+\n+public class Runner {\n+    public static void main(String[] args) throws InstantiationException, IllegalAccessException {\n+\n+        Class <MyService> clazz = MyService.class;\n+        AnalizeServise(clazz);\n+\n+    }\n+\n+    public static void AnalizeServise (Class clazz) throws IllegalAccessException, InstantiationException {\n+\n+        boolean isAnnotated = clazz.isAnnotationPresent(AnnotationMyS.class);\n+        if (isAnnotated) {\n+            MyService myService = (MyService) clazz.newInstance();\n+            myService.setName(\"ProgrammerService\");\n+            myService.setUsers(1000);\n+            myService.thisClassInfo();\n+        } else {\n+            System.out.println(\"Аннотация не найдена\");\n+        }\n+    }\n+}"
  }
]
