[
  {
    "sha": "5d9704dee7bff7cb217e3f769a4d2ea3d5b248c1",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/Air/Air.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Air/Air.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Air/Air.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/Air/Air.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,33 @@\n+package tasks.AbstractsClasessTask30.Air;\n+import tasks.AbstractsClasessTask30.Transport;\n+\n+/*\n+В классе Воздушный добавляются поля:\n+ - Размах крыльев (м)\n+ - Минимальная длина взлётно-посадочной полосы для взлёта\n+ */\n+\n+public abstract class Air extends Transport {\n+\n+    private int wingspan;\n+    private int bandLength;\n+\n+\n+\n+\n+    public int getWingspan() {\n+        return wingspan;\n+    }\n+\n+    public void setWingspan(int wingspan) {\n+        this.wingspan = wingspan;\n+    }\n+\n+    public int getBandLength() {\n+        return bandLength;\n+    }\n+\n+    public void setBandLength(int bandLength) {\n+        this.bandLength = bandLength;\n+    }\n+}"
  },
  {
    "sha": "6a8046505954a36ea0f901c4a7568c93fc7acdc6",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/Air/Civil.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Air/Civil.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Air/Civil.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/Air/Civil.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,46 @@\n+package tasks.AbstractsClasessTask30.Air;\n+\n+/*\n+В классе Гражданский добавляются поля:\n+ - Кол-во пассажиров\n+ - Наличие бизнес класса (true/false)\n+ */\n+\n+/*\n+В конечных классах (Легковой, Грузовой, Военный, Гражданский)\n+разработать метод описание который будет возвращать составленную строку\n+с описанием всех характеристик объекта. В строку включить ещё один параметр мощность в киловаттах (кВ) .\n+Расчёт мощности в киловаттах производится в отдельном методе :\n+1 л.с = 0.74 кВ\n+ */\n+\n+public class Civil extends Air{\n+\n+    public int numberOfPassengers = (int) (Math.random() * 200);\n+\n+    public Civil() {\n+        setBrand(\"Boeing 777\");\n+        setMaxSpeed(1120);\n+        setWeight(10000);\n+        setBodytype(\"Пассажирский самолет\");\n+        setHorsepower(2340);\n+        setBandLength(2200);\n+        setWingspan(35);\n+\n+    }\n+\n+        public void Capacity (int capacity) {\n+        if (capacity<=numberOfPassengers) {\n+            System.out.println(\"Самолет может вместить в себя столько пассажиров\");\n+        } else {\n+            System.out.println(\"Вам нужен самолет побольше\");\n+        }\n+    }\n+\n+\n+    public void TypeCivil () {\n+        System.out.println(getBodytype()+\" \"+getBrand() + \" весом \" + getWeight() + \" с максимальной скоростью \" +\n+                getMaxSpeed()+ \" мощностью \" + calculationPower (getHorsepower()) +\n+                \" киловатт, с размахом крыльев \" + getWingspan() + \" и длинной посадочной полосы \" + getBandLength());\n+    }\n+}"
  },
  {
    "sha": "280258f4aece984c9e96902dccf7a1a10dd165b3",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/Air/Military.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Air/Military.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Air/Military.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/Air/Military.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,66 @@\n+package tasks.AbstractsClasessTask30.Air;\n+\n+/*\n+В классе Военный  добавляются поля:\n+- Наличие системы катапультирования (true/false) - Кол-во ракет на борту\n+ */\n+\n+/*\n+В конечных классах (Легковой, Грузовой, Военный, Гражданский)\n+разработать метод описание который будет возвращать составленную строку\n+с описанием всех характеристик объекта. В строку включить ещё один параметр мощность в киловаттах (кВ) .\n+Расчёт мощности в киловаттах производится в отдельном методе :\n+1 л.с = 0.74 кВ\n+ */\n+\n+/*\n+Для Военных самолётов делаем метод выстрел, проверяем если кол-во ракет\n+не равно 0 то выводим на консоль “ Ракета пошла…”, если 0 то\n+“Боеприпасы отсутствуют”.\n+А так же метод катапультирование, который проверит если наличие системы катапультирования true,\n+то выводим “Катапультирование прошло успешно”, если false, то “У вас нет такой системы ”\n+ */\n+\n+public class Military extends Air {\n+\n+    public int numberOfMissiles = (int) (Math.random() * 6);\n+    public boolean ejection;\n+\n+    public Military() {\n+        setBrand(\"Boeing 777 military\");\n+        setMaxSpeed(1120);\n+        setWeight(10000);\n+        setBodytype(\"Военный самолет\");\n+        setHorsepower(2340);\n+        setBandLength(2200);\n+        setWingspan(35);\n+\n+    }\n+\n+\n+    public int Shot () {\n+        if (numberOfMissiles!=0) {\n+            System.out.println(\"Ракета пошла…\");\n+        } else {\n+            System.out.println(\"Боеприпасы отсутствуют\");\n+        }\n+        return numberOfMissiles;\n+    }\n+\n+    public boolean Ejection () {\n+        if (ejection = true) {\n+            System.out.println(\"Катапультирование прошло успешно\");\n+        } else {\n+            System.out.println(\"У вас нет такой системы\");\n+        }\n+        return ejection;\n+    }\n+\n+    public void TypeMilitary () {\n+        System.out.println(getBodytype()+\" \"+getBrand() + \" весом \" + getWeight() + \" с максимальной скоростью \" +\n+                getMaxSpeed()+ \" мощностью \" + calculationPower (getHorsepower()) +\n+                \" киловатт, с размахом крыльев \" + getWingspan() + \" и длинной посадочной полосы \" + getBandLength());\n+    }\n+\n+\n+}"
  },
  {
    "sha": "75fa0fb3e488a64d21585da10b959f91f3b5f0dc",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/Ground/CargoTrucks.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Ground/CargoTrucks.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Ground/CargoTrucks.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/Ground/CargoTrucks.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,66 @@\n+package tasks.AbstractsClasessTask30.Ground;\n+\n+/*\n+В классе Грузовой добавляется  поле:\n+- Грузоподъёмность(т)\n+ */\n+\n+/*\n+В конечных классах (Легковой, Грузовой, Военный, Гражданский)\n+разработать метод описание который будет возвращать составленную строку\n+с описанием всех характеристик объекта. В строку включить ещё один параметр мощность в киловаттах (кВ) .\n+Расчёт мощности в киловаттах производится в отдельном методе :\n+1 л.с = 0.74 кВ\n+ */\n+\n+/*\n+Для грузового разработать метод который проверит можно ли загрузить в него xxx  груза\n+Метод должен проверять если это кол-во груза помещается в грузовик то выводит в консоль ”Грузовик загружен”,\n+если кол-во груза которое нужно загрузить больше чем то которое может влезть в наш грузовик то выводим\n+“Вам нужен грузовик побольше ”.\n+ */\n+\n+/*\n+В конечных классах (Легковой, Грузовой, Военный, Гражданский)\n+разработать метод описание который будет возвращать составленную строку\n+с описанием всех характеристик объекта. В строку включить ещё один параметр мощность в киловаттах (кВ) .\n+Расчёт мощности в киловаттах производится в отдельном методе :\n+1 л.с = 0.74 кВ\n+ */\n+\n+import tasks.AbstractsClasessTask30.PowerCalculation;\n+\n+public class CargoTrucks extends GroundLevel {\n+\n+    public int loadCapacity = 150;\n+    double distance;\n+\n+\n+    public CargoTrucks() {\n+        setBrand(\"Лада\");\n+        setMaxSpeed(170);\n+        setWeight(4000);\n+        setHorsepower(400);\n+        setFuelСonsumption(30);\n+        setBodytype(\"Грузовой автомобиль\");\n+        distance = 150;\n+    }\n+\n+    public void Capacity(int cargo) {\n+        if (cargo <= loadCapacity) {\n+            System.out.println(\"Грузовик загружен\");\n+        } else {\n+            System.out.println(\"Вам нужен грузовик побольше \");\n+        }\n+    }\n+\n+    public void TypeCargo() {\n+        System.out.println(getBodytype() + \" \" + getBrand() + \" весом \" + getWeight() + \" с максимальной скоростью \" +\n+                getMaxSpeed() + \" мощностью \" + getHorsepower() + \" лошадинных сил, равной \" + calculationPower(getHorsepower()) +\n+                \" киловатт, с расходом \" + getFuelСonsumption() + \" литров, на 100 км\");\n+    }\n+}\n+\n+\n+\n+"
  },
  {
    "sha": "3a49b229e99fcb0d28a94ac945ff20afb8925e94",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/Ground/GroundLevel.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Ground/GroundLevel.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Ground/GroundLevel.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/Ground/GroundLevel.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,22 @@\n+package tasks.AbstractsClasessTask30.Ground;\n+import tasks.AbstractsClasessTask30.Transport;\n+\n+/*\n+В классе Наземный добавляются поля:\n+ -Количество колёс\n+ -Расход топлива(л/100км)\n+ */\n+\n+public abstract class GroundLevel extends Transport {\n+\n+   public int numberOfWheels;\n+   private int fuelСonsumption;\n+\n+   public int getFuelСonsumption() {\n+      return fuelСonsumption;\n+   }\n+\n+   public void setFuelСonsumption(int fuelСonsumption) {\n+      this.fuelСonsumption = fuelСonsumption;\n+   }\n+}"
  },
  {
    "sha": "82b96e47517fb8ea8eb71c522e035a592e05da5c",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/Ground/PassengerСar.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Ground/Passenger%D0%A1ar.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Ground/Passenger%D0%A1ar.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/Ground/Passenger%D0%A1ar.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,58 @@\n+package tasks.AbstractsClasessTask30.Ground;\n+\n+/*\n+В классе Легковой добавляются поля:\n+- Тип кузова - Кол-во пассажиров\n+ */\n+\n+/*\n+В конечных классах (Легковой, Грузовой, Военный, Гражданский)\n+разработать метод описание который будет возвращать составленную строку\n+с описанием всех характеристик объекта. В строку включить ещё один параметр мощность в киловаттах (кВ) .\n+Расчёт мощности в киловаттах производится в отдельном методе :\n+1 л.с = 0.74 кВ\n+ */\n+\n+import tasks.AbstractsClasessTask30.PowerCalculation;\n+\n+public class PassengerСar extends GroundLevel implements PowerCalculation {\n+\n+    public int numberOfPassengers;\n+    double distance;\n+    double fullFuel;\n+\n+\n+     public PassengerСar() {\n+        setBrand(\"BMW\");\n+        setMaxSpeed(120);\n+        setWeight(1120);\n+        setBodytype(\"Легковой автомобиль\");\n+        setHorsepower(240);\n+        setFuelСonsumption(10);\n+        distance = 1500;\n+    }\n+\n+\n+    public void FullStr (double time) {\n+        double distance = (double) (getMaxSpeed() * time);\n+        System.out.println(\"За время \" + time + \" часов \" + getBodytype() + \" \" + getBrand() +\n+                \"  двигаясь с максимальной скростью \" + getMaxSpeed() + \"км/ч израсходует \" + FuelСonsumption (distance) + \" литров топлива и проедет\" +\n+                \" расстояние \" + distance + \"км.\");\n+    }\n+\n+    public void TypePasCar () {\n+        System.out.println(getBodytype()+\" \"+getBrand() + \" весом \" + getWeight() + \" с максимальной скоростью \" +\n+                getMaxSpeed()+ \" мощностью \" +getHorsepower() + \" лошадинных сил, равной \" + calculationPower (getHorsepower()) +\n+                \" киловатт, с расходом \"+ getFuelСonsumption() + \" литров, на 100 км\" );\n+\n+    }\n+\n+    public double FuelСonsumption (double distance) {\n+        return (distance/100)*getFuelСonsumption();\n+    }\n+\n+\n+\n+    }\n+\n+"
  },
  {
    "sha": "cf74c8f63b0fd4602465669fbf38e1cb0fc871df",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/PowerCalculation.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/PowerCalculation.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/PowerCalculation.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/PowerCalculation.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,15 @@\n+package tasks.AbstractsClasessTask30;\n+\n+public interface PowerCalculation {\n+\n+\n+    default double calculationPower (int horsepower) {\n+        double powerKW = 0.74;\n+        for (double i = 0; i <horsepower; i++) {\n+            powerKW+= 0.74;\n+        }\n+        return powerKW;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "73c9c37b41458d07396b921f5082a8e3c7e2cabc",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/Transport.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Transport.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/Transport.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/Transport.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,59 @@\n+package tasks.AbstractsClasessTask30;\n+\n+/*\n+В классе Транспорт есть поля:\n+- Мощность(в лошадиных силах) - Максимальная скорость(км/ч) - Масса (кг)\n+ Марка( например: Audi, BMW , Boing,  Airbus,  Scania , МАЗ и т.д. )\n+\n+ */\n+\n+public abstract class Transport implements PowerCalculation {\n+\n+    private int horsepower;\n+    private int maxSpeed;\n+    private int weight;\n+    private String brand;\n+    private String bodytype;\n+\n+    public String getBrand() {\n+        return brand;\n+    }\n+\n+    public void setBrand(String brand) {\n+        this.brand = brand;\n+    }\n+\n+    public int getMaxSpeed() {\n+        return maxSpeed;\n+    }\n+\n+    public void setMaxSpeed(int maxSpeed) {\n+        this.maxSpeed = maxSpeed;\n+    }\n+\n+    public int getHorsepower() {\n+        return horsepower;\n+    }\n+\n+    public void setHorsepower(int horsepower) {\n+        this.horsepower = horsepower;\n+    }\n+\n+    public int getWeight() {\n+        return weight;\n+    }\n+\n+    public void setWeight(int weight) {\n+        this.weight = weight;\n+    }\n+\n+    public String getBodytype() {\n+        return bodytype;\n+    }\n+\n+    public void setBodytype(String bodytype) {\n+        this.bodytype = bodytype;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "6f8f3bd1f385afcb533e46a922f8080ef9a48bdd",
    "filename": "Lesson9/src/tasks/AbstractsClasessTask30/TransportRunner.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/TransportRunner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/AbstractsClasessTask30/TransportRunner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/AbstractsClasessTask30/TransportRunner.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,44 @@\n+package tasks.AbstractsClasessTask30;\n+\n+import tasks.AbstractsClasessTask30.Air.Civil;\n+import tasks.AbstractsClasessTask30.Air.Military;\n+import tasks.AbstractsClasessTask30.Ground.CargoTrucks;\n+import tasks.AbstractsClasessTask30.Ground.PassengerСar;\n+\n+public class TransportRunner implements PowerCalculation{\n+    public static void main(String[] args) {\n+\n+        CargoTrucks cargoTruck = new CargoTrucks();\n+        PassengerСar passengerСar = new PassengerСar();\n+        Military military = new Military();\n+        Civil civil = new Civil();\n+\n+        passengerСar.TypePasCar();\n+        passengerСar.FullStr (10);\n+\n+        System.out.println();\n+\n+        cargoTruck.TypeCargo();\n+\n+        System.out.println();\n+\n+        civil.TypeCivil();\n+        civil.Capacity(150);\n+\n+        System.out.println();\n+\n+        military.TypeMilitary();\n+        military.Shot();\n+        military.Ejection();\n+\n+\n+    }\n+\n+\n+\n+\n+\n+\n+\n+\n+}"
  },
  {
    "sha": "9ae1627419e89e5030feca3c1e7c255a8b796393",
    "filename": "Lesson9/src/tasks/InerfaceTask29/Cosmodrome.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InerfaceTask29/Cosmodrome.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InerfaceTask29/Cosmodrome.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InerfaceTask29/Cosmodrome.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,33 @@\n+package tasks.InerfaceTask29;\n+/*\n+Создаем класс Космодром.\n+В классе создаем метод:\n+• запуск\n+Метод запуск принимает объект типа IStart.\n+В методе первым делом осуществляем предстартовую проверку переданного объекта,\n+если она провалилась(метод вернул false) выводим сообщение «Предстартовая проверка провалена».\n+Если проверка прошла успешно, то производим запуск двигателей(вызываем метод запуска двигателя).\n+После этого производиться обратный отсчет (10 ..... 1).\n+После обратного отсчета вызываем метод старт переданного объекта.\n+ */\n+\n+public class Cosmodrome  {\n+\n+\n+    public static void StartShattle (IStart shattle) {\n+\n+        if (shattle.PreLaunchCheck()) {\n+            System.out.println(\"Предстартовая проверка прошла успешно\");\n+            shattle.StartingTheEngine();\n+            int counter = 10;\n+            for (int i = 10; i > 1; i--) {\n+                counter--;\n+            }\n+            System.out.println(counter);\n+            shattle.Start();\n+        } else {\n+            System.out.println(\"Не удалось запустить корабль\");\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "e68a81eb795308de90d1329c4b64e74fba2ae0da",
    "filename": "Lesson9/src/tasks/InerfaceTask29/IStart.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InerfaceTask29/IStart.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InerfaceTask29/IStart.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InerfaceTask29/IStart.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,20 @@\n+package tasks.InerfaceTask29;\n+\n+/*\n+Создаем интерфейс IStart.\n+В интерфейсе определяем методы:\n+• предстартовая проверка систем(возвращает true/false)\n+• запуск двигателей(void)\n+• старт(void)\n+ */\n+\n+public interface IStart {\n+\n+    boolean prelaunchcheck=false;\n+\n+    void StartingTheEngine ();\n+    void Start();\n+    boolean PreLaunchCheck ();\n+}\n+\n+"
  },
  {
    "sha": "1c1b5d5cf75ba2cf4a11267e5f988b32aa6f34c0",
    "filename": "Lesson9/src/tasks/InerfaceTask29/Runner.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InerfaceTask29/Runner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InerfaceTask29/Runner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InerfaceTask29/Runner.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,14 @@\n+package tasks.InerfaceTask29;\n+\n+public class Runner {\n+    public static void main(String[] args)  {\n+\n+        Shattle shattle = new Shattle();\n+        Cosmodrome.StartShattle(shattle);\n+\n+    }\n+}\n+\n+\n+\n+"
  },
  {
    "sha": "22a0aa2fe3b4d72f38f01c3c12e11824602944ad",
    "filename": "Lesson9/src/tasks/InerfaceTask29/Shattle.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InerfaceTask29/Shattle.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InerfaceTask29/Shattle.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InerfaceTask29/Shattle.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,34 @@\n+package tasks.InerfaceTask29;\n+/*\n+Создаем класс Шатл.\n+Шатл реализует интерфейс IStart.\n+• В методе предстартовой проверки генерируем случайное число в диапазоне от 0 до 10.\n+Если сгенерированное число больше 3-х то проверка прошла успешно. Если нет не успешно.\n+• В методе запуска двигателей выводим строку в консоль «Двигатели Шатла запущены. Все системы в норме.»\n+• В методе старт выводим строку в консоль. «Старт Шатла»\n+По аналогии создайте еще пару классов реализующих интерфейс Istart(например SpaceX).\n+Для предстартовой проверки можете придумать свою логику, главное, что бы метод возвращал\n+true либо false в зависимости от того прошла ли она успешно.\n+Запустите в космос созданные вами космические корабли используя созданный вами космодром и его метод старт.\n+\n+ */\n+public class Shattle implements IStart {\n+\n+    @Override\n+    public boolean PreLaunchCheck() {\n+        System.out.println(\"Проверка корабля\");\n+        int a = (int) (Math.random() * 11);\n+        return a>3;\n+    }\n+\n+    @Override\n+    public void StartingTheEngine() {\n+        System.out.println(\"Двигатели Шатла запущены. Все системы в норме.\");\n+    }\n+\n+    @Override\n+    public void Start() {\n+        System.out.println(\"Старт Шатла\");\n+\n+    }\n+}"
  },
  {
    "sha": "2ce0122b0f07bf5d004c2559cf480fb3133d264b",
    "filename": "Lesson9/src/tasks/InterfaceTask28/Human.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/Human.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/Human.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InterfaceTask28/Human.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,53 @@\n+package tasks.InterfaceTask28;\n+\n+public class Human implements Pants, Jacket, Shoes{\n+\n+    public static String name;\n+    public static String jacket;\n+    public static String pants;\n+    public static String shoes;\n+\n+\n+    Human (String name, String jacket, String pants, String shoes) {\n+        this.name = name;\n+        this.jacket = jacket;\n+        this.pants = pants;\n+        this.shoes = shoes;\n+    }\n+\n+    public  void PutOnHuman () {\n+        PutOnJacket ();\n+        PutOnPants ();\n+        PutOnShoes();\n+    }\n+\n+    public  void TakeOffHuman () {\n+        TakeOffJacket ();\n+        TakeOffPants ();\n+        TakeOffShoes();\n+    }\n+\n+\n+    @Override\n+    public void PutOnJacket() {System.out.println(name + \" Напер на себя \" + jacket);}\n+\n+    @Override\n+    public void TakeOffJacket() {System.out.println(name + \" Cнял с себя \" + jacket);}\n+\n+    @Override\n+    public void PutOnPants() {System.out.println(name + \" Напер на себя \" + pants); }\n+\n+    @Override\n+    public void TakeOffPants() {System.out.println(name + \" Cнял с себя \" + pants);}\n+\n+    @Override\n+    public void PutOnShoes() {System.out.println(name + \" Напер на себя \" + shoes);}\n+\n+    @Override\n+    public void TakeOffShoes() {System.out.println(name + \" Cнял с себя \" + shoes);}\n+\n+   public static void asf () {\n+       System.out.println();\n+\n+   }\n+}"
  },
  {
    "sha": "d1341ef3ba135eea4c64324394cef8acca388d2a",
    "filename": "Lesson9/src/tasks/InterfaceTask28/HumanRunner.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/HumanRunner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/HumanRunner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InterfaceTask28/HumanRunner.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,19 @@\n+package tasks.InterfaceTask28;\n+\n+public class HumanRunner extends Human {\n+\n+    HumanRunner(String name, String jacket, String pants, String shoes) {\n+        super(name, jacket, pants, shoes);\n+    }\n+\n+\n+    public static void main(String[] args) {\n+        Human human = new Human(\"Леха Навальный\", \"Gucci куртку\",\"Gucci джинсы\",\"Мокрые кроссы\");\n+\n+\n+        human.PutOnHuman();\n+        System.out.println();\n+        human.TakeOffHuman();\n+\n+    }\n+}"
  },
  {
    "sha": "41d16aa8746ae354566dbe64df7bfc8c6aa92116",
    "filename": "Lesson9/src/tasks/InterfaceTask28/Jacket.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/Jacket.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/Jacket.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InterfaceTask28/Jacket.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,7 @@\n+package tasks.InterfaceTask28;\n+\n+public interface Jacket {\n+\n+    void PutOnJacket ();\n+    void TakeOffJacket();\n+}"
  },
  {
    "sha": "44746b2ac42223d944c1a8da67e251571289c329",
    "filename": "Lesson9/src/tasks/InterfaceTask28/Pants.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/Pants.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/Pants.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InterfaceTask28/Pants.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,7 @@\n+package tasks.InterfaceTask28;\n+\n+public interface Pants {\n+\n+    void PutOnPants ();\n+    void TakeOffPants();\n+}"
  },
  {
    "sha": "7bf506e405baf3c548ee23012c97fb6593c35544",
    "filename": "Lesson9/src/tasks/InterfaceTask28/Shoes.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/Shoes.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/InterfaceTask28/Shoes.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/InterfaceTask28/Shoes.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,8 @@\n+package tasks.InterfaceTask28;\n+\n+public interface Shoes {\n+\n+     void PutOnShoes ();\n+     void TakeOffShoes ();\n+\n+}"
  },
  {
    "sha": "c819751b3230465e45ebd11bdbf7893ee5db1f95",
    "filename": "Lesson9/src/tasks/Task24/PeriodOfTime.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task24/PeriodOfTime.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task24/PeriodOfTime.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task24/PeriodOfTime.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,54 @@\n+package tasks.Task24;\n+\n+/*\n+Задание 24\n+Создать класс и объекты описывающие промежуток времени. Сам промежуток\n+в классе должен задаваться тремя свойствами: секундами, минутами, часами.\n+Сделать методы для получения полного количества секунд в объекте, сравнения\n+двух объектов (метод должен работать аналогично compareTo в строках). Создать\n+два конструктора: получающий общее количество секунд и часы, минуты и секунды\n+по отдельности. Сделать метод для вывода данных.\n+ */\n+\n+\n+public class PeriodOfTime {\n+\n+    public int seconds;\n+    public int minutes;\n+    public int hours;\n+    int m;\n+    int h;\n+\n+\n+    PeriodOfTime(int seconds, int minutes, int hours) {\n+        this.seconds = seconds;\n+        if (seconds >= 60) {\n+            m = seconds / 60;\n+            this.seconds = seconds % 60;\n+        }\n+\n+        this.minutes = minutes + m;\n+        if (this.minutes >= 60) {\n+            h = this.minutes / 60;\n+            this.minutes %= 60;\n+        }\n+        this.hours = hours + h;\n+    }\n+\n+    PeriodOfTime(int sec) {\n+        this.seconds = sec;\n+    }\n+\n+    int SumSec() {\n+        return seconds + minutes * 60 + hours * 3600;\n+    }\n+\n+    void Conclusion () {\n+        System.out.println(\"Общее количество секунд в объекте \" +SumSec());\n+    }\n+\n+\n+}\n+\n+\n+"
  },
  {
    "sha": "de37890745db3a04877280c306aad2fff0a807a4",
    "filename": "Lesson9/src/tasks/Task24/TimeRunner.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task24/TimeRunner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task24/TimeRunner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task24/TimeRunner.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,19 @@\n+package tasks.Task24;\n+\n+public class TimeRunner {\n+    public static void main(String[] args) {\n+\n+        PeriodOfTime p1 = new PeriodOfTime(10,15,2);\n+        PeriodOfTime p2 = new PeriodOfTime(10,15,15);\n+\n+        p1.Conclusion();\n+        p2.Conclusion();\n+\n+        System.out.println(p1.equals(p2));\n+\n+\n+    }\n+}\n+\n+\n+"
  },
  {
    "sha": "22f9e084543196c46ec239bb9225a92f47dd0228",
    "filename": "Lesson9/src/tasks/Task25/Bankomat.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task25/Bankomat.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task25/Bankomat.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task25/Bankomat.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,80 @@\n+package tasks.Task25;\n+/*\n+Задание 25\n+Создать класс и объекты описывающие Банкомат. Набор купюр находящихся в\n+банкомате должен задаваться тремя свойствами: количеством купюр номиналом 20\n+50 100. Сделать методы для добавления денег в банкомат. Сделать функцию\n+снимающую деньги. На вход передается сумма денег. На выход – булевское\n+значение (операция удалась или нет). При снятии денег функция должна\n+рапечатывать каким количеством купюр какого номинала выдается сумма. Создать\n+конструктор с тремя параметрами – количеством купюр.\n+ */\n+\n+public class Bankomat {\n+\n+    public static int counter = 0;\n+    public static int nominal1 = 20;\n+    public static int nominal2 = 50;\n+    public static int nominal3 = 100;\n+    boolean put;\n+    boolean withdrawal;\n+    int dick = 0;\n+\n+\n+\n+    public boolean PutTheMoney(int sum, boolean put) {\n+        System.out.println(\"Вы хотите положить деньги\");\n+        for (counter = 0; counter < sum / nominal1; counter++) {\n+        }\n+        if (sum % 20 == 0) {\n+            System.out.println(\"Вы положили \" +sum + \" рублей \" + counter + \" купюрами, номиналом \" + nominal1);\n+            put = true;\n+        } else if (sum % 50 == 0) {\n+            System.out.println(\"Вы положили \" +sum + \" рублей \"+ counter + \" купюрами, номиналом \" + nominal2);\n+            put = true;\n+        } else if (sum % 100 == 0) {\n+            System.out.println(\"Вы положили сумму \" +sum + \" рублей \" + counter + \" купюрами, номиналом \" + nominal3);\n+            put = true;\n+        } else {\n+            System.out.println(\"Положить деньги не получилось\");\n+\n+        }\n+        return put;\n+    }\n+\n+\n+    public boolean WithdrawalOfFunds(int money, boolean withdrawal) {\n+        System.out.println();\n+        System.out.println(\"Вы хотите снять деньги\");\n+        for (counter = 0; counter < money/nominal1; counter++) {\n+        }\n+        if (money % 20 == 0 ) {\n+            System.out.println(\"Вы сняли \" +money + \" рублей \" + counter + \" купюрами, номиналом \" + nominal1);\n+            withdrawal=true;\n+        } else if (money % 50 == 0) {\n+            System.out.println(\"Вы сняли \" +money + \" рублей \" + counter + \" купюрами, номиналом \" + nominal2);\n+            withdrawal=true;\n+        } else if (money % 100 == 0) {\n+            System.out.println(\"Вы сняли \" +money + \" рублей \" + counter + \" купюрами, номиналом \" + nominal3);\n+            withdrawal=true;\n+        } else {\n+            System.out.println(\"Снять деньги не получилось, банкомат не выдает такой номинал\");\n+            withdrawal = false;\n+        }\n+        return withdrawal;\n+    }\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "b2b83db3c55c9d1d6afcf6331a893285b3735965",
    "filename": "Lesson9/src/tasks/Task25/BankomatRunner.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task25/BankomatRunner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task25/BankomatRunner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task25/BankomatRunner.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,25 @@\n+package tasks.Task25;\n+/*\n+Задание 25\n+Создать класс и объекты описывающие Банкомат. Набор купюр находящихся в\n+банкомате должен задаваться тремя свойствами: количеством купюр номиналом 20\n+50 100. Сделать методы для добавления денег в банкомат. Сделать функцию\n+снимающую деньги. На вход передается сумма денег. На выход – булевское\n+значение (операция удалась или нет). При снятии денег функция должна\n+рапечатывать каким количеством купюр какого номинала выдается сумма. Создать\n+конструктор с тремя параметрами – количеством купюр.\n+ */\n+public class BankomatRunner {\n+    public static void main(String[] args) {\n+\n+        Bankomat bank = new Bankomat();\n+        System.out.println(bank.PutTheMoney(300, bank.put));\n+        System.out.println(bank.WithdrawalOfFunds(500, bank.withdrawal));\n+\n+\n+\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "a977828071e5ca2590d7fa72f2d9fbac8bf37e3e",
    "filename": "Lesson9/src/tasks/Task26/Appliances.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task26/Appliances.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task26/Appliances.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task26/Appliances.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,26 @@\n+package tasks.Task26;\n+/*\n+Задание 26\n+Создать иерархию классов, описывающих бытовую технику. Создать несколько\n+объектов описанных классов, часть из них включить в розетку.\n+Иерархия должна иметь хотя бы три уровня.\n+ */\n+\n+\n+public class Appliances {\n+     public static boolean turning = true;\n+     public static String type;\n+\n+     Appliances (String type) {\n+         this.type =type;\n+     }\n+\n+    public void TurnOn() {\n+        if (turning) {\n+            System.out.println(\"Техника включена в розетку\");\n+        } else {\n+            System.out.println(\"Техника в розетку не включена\");\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "6b263f7223042c812a053cbd33c94972b52fa4b0",
    "filename": "Lesson9/src/tasks/Task26/AppliancesRunner.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task26/AppliancesRunner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task26/AppliancesRunner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task26/AppliancesRunner.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,19 @@\n+package tasks.Task26;\n+\n+public class AppliancesRunner {\n+    public static void main(String ... args) {\n+\n+        Microvave microvave = new Microvave(240,300, 300,\"Кухонная техника\");\n+        Washer washer = new Washer(\"Техника для стирки\", 220, 10, 30);\n+        Appliances appliances = new Appliances(\"Вся бытовая техника\");\n+\n+\n+        appliances.TurnOn();\n+        microvave.TurnOn();\n+        washer.TurnOn();\n+\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "d42d163c185ce8b19b859b1b33a7c9fb65791412",
    "filename": "Lesson9/src/tasks/Task26/Microvave.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task26/Microvave.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task26/Microvave.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task26/Microvave.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,31 @@\n+package tasks.Task26;\n+\n+/*\n+Задание 26\n+Создать иерархию классов, описывающих бытовую технику. Создать несколько\n+объектов описанных классов, часть из них включить в розетку.\n+Иерархия должна иметь хотя бы три уровня.\n+ */\n+\n+public class Microvave extends Appliances {\n+\n+    public static int temperature;\n+    public static int gramsOfFood;\n+    public static int voltage;\n+\n+    Microvave(int voltage, int temperature, int gramsOfFood, String type) {\n+        super(type);\n+        this.temperature = temperature;\n+        this.gramsOfFood = gramsOfFood;\n+        this.voltage= voltage;\n+    }\n+\n+    @Override\n+    public void TurnOn() {\n+        if (voltage <= 220) {\n+            System.out.println(\"Микроволновка включилась в разетку и начала греть \" + gramsOfFood + \" грамм еды до температуры: \" + temperature);\n+        } else if (voltage > 220) {\n+            System.out.println(\"Ваша квартира сгорела и вы бомж\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "2c3578aa459c94989650f0e2e093cdd111e950fb",
    "filename": "Lesson9/src/tasks/Task26/Washer.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task26/Washer.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task26/Washer.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task26/Washer.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,36 @@\n+package tasks.Task26;\n+\n+/*\n+Задание 26\n+Создать иерархию классов, описывающих бытовую технику. Создать несколько\n+объектов описанных классов, часть из них включить в розетку.\n+Иерархия должна иметь хотя бы три уровня.\n+ */\n+\n+public class Washer extends Appliances {\n+\n+    public static String drum;\n+    public static int voltage;\n+    public static int kilo;\n+    public static int time;\n+\n+\n+\n+    public Washer (String type, int voltage, int kilo, int time) {\n+        super(type);\n+        this.voltage = voltage;\n+        this.kilo = kilo;\n+\n+    }\n+\n+    @Override\n+    public void TurnOn() {\n+            if (voltage <= 220) {\n+                System.out.println(\"Стиральная машина в сети! Вы загрузили \" + kilo + \" киллограмм одежды, на \" + time +\" минут\");\n+            } else if (voltage > 220) {\n+                System.out.println(\"Ваша квартира сгорела и вы бомж\");\n+            }\n+    }\n+\n+}\n+"
  },
  {
    "sha": "35d17e210a9487d52bcc4fa18b3c3c6d0aca3347",
    "filename": "Lesson9/src/tasks/Task27/BankCards.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task27/BankCards.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task27/BankCards.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task27/BankCards.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,40 @@\n+package tasks.Task27;\n+\n+/*\n+Задание 27\n+Создать иерархию классов, описывающих банковские карточки.\n+Иерархия должна иметь хотя бы три уровня.\n+ */\n+\n+public class BankCards implements The_Сapacity_Of_The_Card {\n+\n+    public String material;\n+    public String bank;\n+    public String value;\n+\n+    BankCards (String material, String bank, String value) {\n+        this.material = material;\n+        this.bank = bank;\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public void ToWithdrawMoney () {\n+        System.out.println(\"С помощью карты данного банка вы можете класть деньги на карту до 5000 рублей\");\n+    }\n+\n+    @Override\n+    public void PutTheMoney() {\n+        System.out.println(\"С помощью карт данного банка вы можете снимать деньги с карты до 10000 рублей\");\n+    }\n+\n+    @Override\n+    public void Payment() {\n+        System.out.println(\"С помощью карт данного банка вы можете оплачивать любые покупки\");\n+    }\n+}\n+\n+\n+\n+\n+"
  },
  {
    "sha": "0bdea10c69d9fb745a4be92f8b6d40f2ef131245",
    "filename": "Lesson9/src/tasks/Task27/BankCardsRunner.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task27/BankCardsRunner.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task27/BankCardsRunner.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task27/BankCardsRunner.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,16 @@\n+package tasks.Task27;\n+\n+public class BankCardsRunner {\n+    public static void main(String[] args) {\n+\n+        CardParitretBank cardParitretBank = new CardParitretBank(\"Пластик\", \"ПаритетБанк\", \"Рубли\");\n+        LuxuryBankParitetCard luxuryBankParitetCard= new LuxuryBankParitetCard(\"Пластик\", \"ПаритетБанк\",\n+                                                                               \"Рубли\", \"Доллары\", \"Плата\", \"Да\");\n+\n+        luxuryBankParitetCard.ToWithdrawMoney();\n+        luxuryBankParitetCard.Opportunities();\n+        luxuryBankParitetCard.Payment();\n+        luxuryBankParitetCard.СhargeForCredit();\n+        luxuryBankParitetCard.PutTheMoney();\n+    }\n+}"
  },
  {
    "sha": "24495a539b2fb65a633f646c0f5eba7d0ef81c38",
    "filename": "Lesson9/src/tasks/Task27/CardParitretBank.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task27/CardParitretBank.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task27/CardParitretBank.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task27/CardParitretBank.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,32 @@\n+package tasks.Task27;\n+\n+/*\n+Задание 27\n+Создать иерархию классов, описывающих банковские карточки.\n+Иерархия должна иметь хотя бы три уровня.\n+ */\n+\n+public class CardParitretBank extends BankCards  {\n+\n+\n+    CardParitretBank(String material, String bank, String value) {\n+        super(material, bank, value);\n+    }\n+\n+\n+    @Override\n+    public void PutTheMoney() {\n+        super.PutTheMoney();\n+    }\n+\n+    @Override\n+    public void Payment() {\n+        super.Payment();\n+    }\n+\n+    @Override\n+    public void ToWithdrawMoney() {\n+        super.ToWithdrawMoney();\n+    }\n+}\n+"
  },
  {
    "sha": "4f6bf3c586724a6c50a6ae72adbfd62d5f4d5453",
    "filename": "Lesson9/src/tasks/Task27/LuxuryBankParitetCard.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task27/LuxuryBankParitetCard.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/d93afdf358d3f867956f83bc7053f353f96dcedb/Lesson9/src/tasks/Task27/LuxuryBankParitetCard.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson9/src/tasks/Task27/LuxuryBankParitetCard.java?ref=d93afdf358d3f867956f83bc7053f353f96dcedb",
    "patch": "@@ -0,0 +1,43 @@\n+package tasks.Task27;\n+\n+public class LuxuryBankParitetCard extends CardParitretBank  {\n+\n+     public String currency;\n+     public String opportunities;\n+     public String chargeForCredit;\n+\n+    LuxuryBankParitetCard(String material, String bank, String value, String currency,\n+                          String opportunities, String chargeForCredit) {\n+        super(material, bank, value);\n+        this.currency = currency;\n+        this.opportunities = opportunities;\n+        this.chargeForCredit = chargeForCredit;\n+    }\n+\n+    public void Currency () {\n+        System.out.println(\"Выбрав Лухури карту, вы можете выбирать валюту: \" + currency);\n+    }\n+\n+    public void Opportunities () {\n+        System.out.println(\"Выбрав Лухури карту, вы можете подключить дополнительные возможности: \" + opportunities );\n+    }\n+\n+    public void СhargeForCredit () {\n+        System.out.println(\"Выбрав Лухури карту, вы можете оплачивать кредиты: \" + chargeForCredit);\n+    }\n+\n+    @Override\n+    public void ToWithdrawMoney() {\n+        super.ToWithdrawMoney();\n+    }\n+\n+    @Override\n+    public void PutTheMoney() {\n+        super.PutTheMoney();\n+    }\n+\n+    @Override\n+    public void Payment() {\n+        super.Payment();\n+    }\n+}"
  }
]
