[
  {
    "sha": "a593165c7b13b3778f37437cb6dfb5c82df34d5e",
    "filename": "Lesson8/src/TasksForLessons8/Task18.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task18.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task18.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson8/src/TasksForLessons8/Task18.java?ref=ad1dd52846e51fc397a602d1e9e1a8912f80de32",
    "patch": "@@ -0,0 +1,22 @@\n+package TasksForLessons8;\n+\n+public class Task18 {\n+    /*\n+Найти в строке не только запятые, но и другие знаки препинания. Подсчитать\n+общее их количество.\n+     */\n+    public static void main(String[] args) {\n+        String str = \"https://ru.stackoverflow.com/questions/835178/git-в-idea-Удаление-ответвления\";\n+        int n = 0;\n+        char symbol;\n+        for(int i = 0;i < str.length(); i++){\n+            symbol = str.charAt(i);\n+            if(symbol == ',' || symbol == '.' || symbol == '-'|| symbol == '/') {\n+                n++;\n+            }\n+        }\n+        System.out.println(\"У нас есть \" + n + \" знаков препинания\");\n+\n+\n+    }\n+}"
  },
  {
    "sha": "e625b52b456cf0349272f48be4b58bfc97722cc0",
    "filename": "Lesson8/src/TasksForLessons8/Task19.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task19.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task19.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson8/src/TasksForLessons8/Task19.java?ref=ad1dd52846e51fc397a602d1e9e1a8912f80de32",
    "patch": "@@ -0,0 +1,29 @@\n+package TasksForLessons8;\n+\n+import java.util.StringTokenizer;\n+\n+/*\n+Задание 19\n+Имеется строка с текстом. Подсчитать количество слов в тексте. Желательно\n+учесть, что слова могут разделяться несколькими пробелами, в начале и конце\n+текста также могут быть пробелы, но могут и отсутствовать.\n+ */\n+public class Task19 {\n+    public static void main(String[] args) {\n+        String stroka = \"    Когда человек сознательно или интуитивно выбирает себе в жизни какую-то цель    \";\n+        int words = 0;\n+        stroka=stroka.trim();\n+\n+        StringTokenizer st = new StringTokenizer(stroka, \" ,-\");\n+\n+        while (st.hasMoreTokens()) {\n+            st.nextToken();\n+            words++;\n+\n+        }\n+        System.out.println(\"В строке \" +words + \" слов\");\n+\n+\n+\n+    }\n+}"
  },
  {
    "sha": "5008147ea69b03f2d21448d8c359f49e45b0a0ec",
    "filename": "Lesson8/src/TasksForLessons8/Task20.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task20.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task20.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson8/src/TasksForLessons8/Task20.java?ref=ad1dd52846e51fc397a602d1e9e1a8912f80de32",
    "patch": "@@ -0,0 +1,26 @@\n+package TasksForLessons8;\n+/*Задание 20\n+Имеется строка с текстом. Вывести текст, составленный из последних букв\n+всех слов.\n+ */\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class Task20 {\n+    public static void main(String[] args) {\n+        String stroka = \"Когда человек сознательно или интуитивно выбирает себе в жизни какую-то цель\";\n+        StringBuilder last = new StringBuilder();\n+\n+        Pattern pat = Pattern.compile(\"\\\\w\\\\b\", Pattern.UNICODE_CHARACTER_CLASS);\n+        Matcher match = pat.matcher(stroka);\n+\n+        while (match.find()) {\n+            last.append(match.group());\n+        }\n+\n+        System.out.println(last);\n+\n+\n+    }\n+}"
  },
  {
    "sha": "0d0e230e83953796580b3a664c5a5dd093b58a72",
    "filename": "Lesson8/src/TasksForLessons8/Task21.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task21.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task21.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson8/src/TasksForLessons8/Task21.java?ref=ad1dd52846e51fc397a602d1e9e1a8912f80de32",
    "patch": "@@ -0,0 +1,42 @@\n+package TasksForLessons8;\n+/*\n+Задание 21\n+Напишите три цикла выполняющих многократное сложение строк, один с\n+помощью оператора сложения и String, другой с помощью StringBuilder и метода\n+append, а также аналогино для StringBuffer. Сравните скорость их выполнения.\n+ */\n+\n+public class Task21 {\n+    public static void main(String[] args) {\n+\n+        String str1 = \"Agent пьет вино и слушает джигана, его выгнали со школы\";\n+        StringBuilder str2 = new StringBuilder(\"Agent пьет вино и слушает джигана, его выгнали со школы\");\n+        StringBuffer str3 = new StringBuffer(\"Agent пьет вино и слушает джигана, его выгнали со школы\");\n+\n+        double start_First_Text = System.currentTimeMillis();\n+        while (str1.length()==str2.length()){\n+            str1 += \" - Его зовут Гриша\";\n+        }\n+        double end_First_Text = System.currentTimeMillis();\n+        double fullTimeFirstText = end_First_Text - start_First_Text;\n+\n+        double start_Seconds_Text = System.currentTimeMillis();\n+        while (str1.length()==str2.length()) {\n+            str2.append(\" - Его зовут Гриша\");\n+        }\n+        double end_Seconds_Text = System.currentTimeMillis();\n+        double full_Time_Second_Text = end_Seconds_Text - start_Seconds_Text;\n+\n+        double start_Thirsd_Text = System.currentTimeMillis();\n+        while (str1.length()==str2.length()) {\n+            str3.append(\" - Его зовут Гриша\");\n+        }\n+        double end_Thirsd_Text = System.currentTimeMillis();\n+        double full_Time_Thirsd_Text = end_Thirsd_Text - start_Thirsd_Text;\n+\n+        System.out.println(\"Время выполнения первого цикла равна \" + fullTimeFirstText + \" миллисекундам\");\n+        System.out.println(\"Время выполнения первого цикла равна \" + full_Time_Second_Text + \" миллисекундам\");\n+        System.out.println(\"Время выполнения первого цикла равна \" + full_Time_Thirsd_Text + \" миллисекундам\");\n+\n+    }\n+}"
  },
  {
    "sha": "b7307a986c866dcc1234a99df3e96e5e04a8efd5",
    "filename": "Lesson8/src/TasksForLessons8/Task22.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/ArturSidelnikovs/TMS_110121/blob/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task22.java",
    "raw_url": "https://github.com/ArturSidelnikovs/TMS_110121/raw/ad1dd52846e51fc397a602d1e9e1a8912f80de32/Lesson8/src/TasksForLessons8/Task22.java",
    "contents_url": "https://api.github.com/repos/ArturSidelnikovs/TMS_110121/contents/Lesson8/src/TasksForLessons8/Task22.java?ref=ad1dd52846e51fc397a602d1e9e1a8912f80de32",
    "patch": "@@ -0,0 +1,29 @@\n+package TasksForLessons8;\n+/*\n+Задание 22\n+\n+Написать программу, выполняющую поиск в строке шестнадцатеричных чисел,\n+записаных по правилам Java, с помощью регулярных выражений и вывести их на\n+страницу.\n+ */\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class Task22 {\n+    public static void main(String[] args) {\n+\n+        String str1 = new String(\"0Большойум7не8маленький  9 9\");\n+\n+        Pattern pat = Pattern.compile(\"\\\\d\");\n+        Matcher mat = pat.matcher(str1);\n+\n+        while(mat.find()){\n+            System.out.println(mat.group());\n+        }\n+\n+\n+\n+\n+    }\n+}"
  }
]
