[
  {
    "sha": "04438ab8584cc4f1ffb11aa9536a0e325eea8b69",
    "filename": "src/main/java/ApplicationLayer/AppComponents/ExcelToAppComponent/Eolian_auriga/components.xlsx",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/mvargas33/Eolian-Auriga-backend/blob/b9d89975953902ddd6a0a15605313d9ff8033263/src/main/java/ApplicationLayer/AppComponents/ExcelToAppComponent/Eolian_auriga/components.xlsx",
    "raw_url": "https://github.com/mvargas33/Eolian-Auriga-backend/raw/b9d89975953902ddd6a0a15605313d9ff8033263/src/main/java/ApplicationLayer/AppComponents/ExcelToAppComponent/Eolian_auriga/components.xlsx",
    "contents_url": "https://api.github.com/repos/mvargas33/Eolian-Auriga-backend/contents/src/main/java/ApplicationLayer/AppComponents/ExcelToAppComponent/Eolian_auriga/components.xlsx?ref=b9d89975953902ddd6a0a15605313d9ff8033263"
  },
  {
    "sha": "c92943d668bf872a6065904c42eac864ea0b373e",
    "filename": "src/main/java/ApplicationLayer/SensorReading/GPSReader/GPSReader.java",
    "status": "modified",
    "additions": 19,
    "deletions": 22,
    "changes": 41,
    "blob_url": "https://github.com/mvargas33/Eolian-Auriga-backend/blob/b9d89975953902ddd6a0a15605313d9ff8033263/src/main/java/ApplicationLayer/SensorReading/GPSReader/GPSReader.java",
    "raw_url": "https://github.com/mvargas33/Eolian-Auriga-backend/raw/b9d89975953902ddd6a0a15605313d9ff8033263/src/main/java/ApplicationLayer/SensorReading/GPSReader/GPSReader.java",
    "contents_url": "https://api.github.com/repos/mvargas33/Eolian-Auriga-backend/contents/src/main/java/ApplicationLayer/SensorReading/GPSReader/GPSReader.java?ref=b9d89975953902ddd6a0a15605313d9ff8033263",
    "patch": "@@ -17,8 +17,8 @@\n     //temporal, por ahora solo va a leer longitud y latitud\n     // orden de values -> [decimales_latitud, angulo_latitud, orientacion_latitud, decimales_longitud, angulo_longitud, orientacion_longitud]\n     // las orientaciones se reciben como N/E/S/W pero se trabajan usando la siguiente transformacion\n-    // -1 == N (North), 1 == S (South)\n-    // -1 == E (East), 1 == W (West)\n+    // 1 == N (North), -1 == S (South)\n+    // 1 == E (East), -1 == W (West)\n \n     private double[] values = new double[6];\n \n@@ -31,7 +31,8 @@ public GPSReader(AppSender myComponent, long readingDelayInMS) {\n      * @param msg The message to check.\n      * @return true if the coded message equals the checksum, false otherwise.\n      */\n-    public static boolean checkSum(String msg) {\n+\n+    public boolean checkSum(String msg) {\n         // se ignoran estos 2 caracteres\n         String newMsg = msg.replace(\"I\", \"\");\n         newMsg = newMsg.replace(\"$\", \"\");\n@@ -48,16 +49,15 @@ public static boolean checkSum(String msg) {\n         return checksum == result;\n     }\n \n-    public static double[] RMCReader(String[] msg) {\n-        double[] values = new double[6];\n+    public void RMCReader(String[] msg) {\n         values[0] = Double.parseDouble(msg[3].substring(0, 2));\n         values[1] = Double.parseDouble(msg[3].substring(2));\n         switch (msg[4]) {\n             case \"N\":\n-                values[2] = -1;\n+                values[2] = 1;\n                 break;\n             case \"S\":\n-                values[2] = 1;\n+                values[2] = -1;\n                 break;\n             default:\n                 System.out.println(\"ERROR: Valor \"+msg[4]+\" no identificado como direccion de latitud.\");\n@@ -66,28 +66,26 @@ public static boolean checkSum(String msg) {\n         values[4] = Double.parseDouble(msg[5].substring(3));\n         switch (msg[6]) {\n             case \"E\":\n-                values[5] = -1;\n+                values[5] = 1;\n                 break;\n             case \"W\":\n-                values[5] = 1;\n+                values[5] = -1;\n                 break;\n             default:\n                 System.out.println(\"ERROR: Valor \"+msg[6]+\" no identificado como direccion de longitud.\");\n                 // todo: no se si un mensaje de aviso basta o es mejor tirar un error.\n         }\n-        return values;\n     }\n \n-    public static double[] GGAReader(String[] msg) {\n-        double[] values = new double[6];\n+    public void GGAReader(String[] msg) {\n         values[0] = Double.parseDouble(msg[2].substring(0, 2));\n         values[1] = Double.parseDouble(msg[2].substring(2));\n         switch (msg[3]) {\n             case \"N\":\n-                values[2] = -1;\n+                values[2] = 1;\n                 break;\n             case \"S\":\n-                values[2] = 1;\n+                values[2] = -1;\n                 break;\n             default:\n                 System.out.println(\"ERROR: Valor \"+msg[4]+\" no identificado como direccion de latitud.\");\n@@ -96,16 +94,16 @@ public static boolean checkSum(String msg) {\n         values[4] = Double.parseDouble(msg[4].substring(3));\n         switch (msg[5]) {\n             case \"E\":\n-                values[5] = -1;\n+                values[5] = 1;\n                 break;\n             case \"W\":\n-                values[5] = 1;\n+                values[5] = -1;\n                 break;\n             default:\n                 System.out.println(\"ERROR: Valor \"+msg[5]+\" no identificado como direccion de longitud.\");\n                 // todo: no se si un mensaje de aviso basta o es mejor tirar un error.\n         }\n-        return values;\n+        this.values = values;\n     }\n \n     public void VTGReader(String[] msg) {\n@@ -120,7 +118,7 @@ public void GSAReader(String[] msg) {\n         System.out.println(\"Mensaje GSA no requerido.\");\n     }\n \n-    void readMessage(String message) {\n+    public void readMessage(String message) {\n         // Revisar el checksum aca\n         if(checkSum(message)) {\n             // leer el mensaje\n@@ -190,8 +188,7 @@ void startReading() {\n \n     @Override\n     public double[] read() {\n-        values[0] = 0;\n-        values[1] = 0;\n+        //pendiente aplicar la logica requerida (leer cada tantos ms)\n         return values;\n     }\n \n@@ -214,7 +211,7 @@ public static void main(String[] argv) {\n         } */\n \n         // pasar esto a test\n-        String GGAmsg = \"$GPGGA,215830.000,3526.9450,S,07140.3300,W,1,05,2.35,92.5,M,25.5,M,,*5B\";\n-        System.out.println(checkSum(GGAmsg));\n+        //String GGAmsg = \"$GPGGA,215830.000,3526.9450,S,07140.3300,W,1,05,2.35,92.5,M,25.5,M,,*5B\";\n+        //System.out.println(checkSum(GGAmsg));\n     }\n }"
  },
  {
    "sha": "7fca650d3c16484a20ccebb19460fe770f5e0d59",
    "filename": "src/test/java/ApplicationLayer/SensorReading/GPSReader/GPSReaderTest.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/mvargas33/Eolian-Auriga-backend/blob/b9d89975953902ddd6a0a15605313d9ff8033263/src/test/java/ApplicationLayer/SensorReading/GPSReader/GPSReaderTest.java",
    "raw_url": "https://github.com/mvargas33/Eolian-Auriga-backend/raw/b9d89975953902ddd6a0a15605313d9ff8033263/src/test/java/ApplicationLayer/SensorReading/GPSReader/GPSReaderTest.java",
    "contents_url": "https://api.github.com/repos/mvargas33/Eolian-Auriga-backend/contents/src/test/java/ApplicationLayer/SensorReading/GPSReader/GPSReaderTest.java?ref=b9d89975953902ddd6a0a15605313d9ff8033263",
    "patch": "@@ -0,0 +1,76 @@\n+package ApplicationLayer.SensorReading.GPSReader;\n+\n+import ApplicationLayer.AppComponents.AppSender;\n+import ApplicationLayer.SensorReading.GPSReader.GPSReader;\n+import MockObjects.GPS;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\n+public class GPSReaderTest {\n+\n+    private AppSender appSender;\n+    private GPS gps;\n+    private GPSReader gpsReader;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        gps = new GPS();\n+        appSender = new AppSender(\"testing_AS\",\n+                new double[] {0, 0, -1, 0, 0, -1}, // mins\n+                new double[] {60, 90, 1, 60, 180, 1}, //maxs\n+                new String[] {\"latitude\", \"latitude_degree\", \"latitude_orientation\", \"longitude\", \"longitude_degree\", \"longitude_orientation\"});\n+        gpsReader = new GPSReader(appSender, 3000);\n+    }\n+\n+    @Test\n+    public void readRMC() {\n+        // mensaje leido $GPRMC,215829.000,A,3526.9451,S,07140.3300,W,0.32,349.15,030221,,,A*64\"\n+        // --> latitud = -35 26.9451, longitud = -71 40.3300\n+        gpsReader.readMessage(gps.getRMCMsg());\n+        // orden de parametros -> lat, lat_minutos, lat_ori, long, long_minutos, long_ori\n+        assertEquals(gpsReader.read()[0], 35);\n+        assertEquals(gpsReader.read()[1], 26.9451);\n+        assertEquals(gpsReader.read()[2], -1);\n+        assertEquals(gpsReader.read()[3], 71);\n+        assertEquals(gpsReader.read()[4], 40.3300);\n+        assertEquals(gpsReader.read()[5], -1);\n+    }\n+\n+    @Test\n+    public void readGGA() {\n+        // mensaje leido \"$GPGGA,215830.000,3526.9450,S,07140.3300,W,1,05,2.35,92.5,M,25.5,M,,*5B\"\n+        // --> latitud = -35 26.9450, longitud = -71 40.3300\n+        gpsReader.readMessage(gps.getGGAMsg());\n+        // orden de parametros -> lat, lat_minutos, lat_ori, long, long_minutos, long_ori\n+        assertEquals(gpsReader.read()[0], 35);\n+        assertEquals(gpsReader.read()[1], 26.9450);\n+        assertEquals(gpsReader.read()[2], -1);\n+        assertEquals(gpsReader.read()[3], 71);\n+        assertEquals(gpsReader.read()[4], 40.3300);\n+        assertEquals(gpsReader.read()[5], -1);\n+    }\n+\n+\n+    // Para los 2 siguientes tests se usara el siguiente mensaje:\n+    // \"$GPGGA,215830.000,3526.9450,S,07140.3300,W,1,05,2.35,92.5,M,25.5,M,,*5B\"\n+    // (cambiando el mensaje) donde el checksum 5B, esta correcto\n+    @Test\n+    public void checksumPass() {\n+        String msg = \"$GPGGA,215830.000,3526.9450,S,07140.3300,W,1,05,2.35,92.5,M,25.5,M,,*5B\";\n+        assertEquals(gpsReader.checkSum(msg), true);\n+    }\n+\n+\n+    @Test\n+    public void checksumFail() {\n+        // solo se cambio el 4to (indice 3) parametro, de una S a una N\n+        String msg = \"$GPGGA,215830.000,3526.9450,N,07140.3300,W,1,05,2.35,92.5,M,25.5,M,,*5B\";\n+        assertEquals(gpsReader.checkSum(msg), false);\n+    }\n+\n+\n+\n+}"
  }
]
