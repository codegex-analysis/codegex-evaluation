[
  {
    "sha": "16d2d5c81111d9fb53d5c82128c7f85c8966edd9",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/CHANGELOG.md",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/CHANGELOG.md?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -75,4 +75,11 @@ SQL data persistence\n - Add environment variable config method\n - Fix send rate of client\n - Remove flatfile, add runtime (in memory only) and PostgresSQL database\n-- Move frontend to independent HTTP server (nginx)\n\\ No newline at end of file\n+- Move frontend to independent HTTP server (nginx)\n+\n+### v0.3.2\n+Rework protocol, document serialization\n+\n+- Canvas objects instead of points\n+- Rename packets to messages\n+- Add better serialization/deserialization methods\n\\ No newline at end of file"
  },
  {
    "sha": "0034f9de625ae1868df2e8dd32a84c6f47a3f255",
    "filename": "board-room/src/main/java/net/stzups/board/data/database/postgres/PostgresDatabase.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/database/postgres/PostgresDatabase.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/database/postgres/PostgresDatabase.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/database/postgres/PostgresDatabase.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -1,5 +1,6 @@\n package net.stzups.board.data.database.postgres;\n \n+import io.netty.buffer.Unpooled;\n import net.stzups.board.data.database.Database;\n import net.stzups.board.data.objects.Document;\n import net.stzups.board.data.objects.User;\n@@ -99,7 +100,7 @@ public Document getDocument(long id) {\n                     System.out.println(\"no owner for document\");\n                     return null;\n                 }\n-                document = new Document(id, user, resultSet.getString(\"name\"));//todo binary data\n+                document = new Document(id, user, resultSet.getString(\"name\"), Unpooled.buffer(0));//todo binary data\n                 documents.put(document.getId(), document);\n             }\n             return document;"
  },
  {
    "sha": "cb528c8f3ceb6e6ed577e10f785cb19f391fc070",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/Document.java",
    "status": "modified",
    "additions": 14,
    "deletions": 20,
    "changes": 34,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/Document.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/Document.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/Document.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -1,13 +1,8 @@\n package net.stzups.board.data.objects;\n \n+import io.netty.buffer.ByteBuf;\n import net.stzups.board.BoardRoom;\n-import net.stzups.board.data.objects.canvas.Point;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import net.stzups.board.data.objects.canvas.Canvas;\n \n public class Document {\n     private static final String DEFAULT_DOCUMENT_NAME = \"Untitled Document\";\n@@ -16,19 +11,27 @@\n     private User owner;\n     private String name;\n     private String inviteCode;\n-    private Map<User, List<Point>> points = new HashMap<>();\n+    private Canvas canvas;\n \n+    /**\n+     * New document\n+     */\n     public Document(User owner) {\n         this.id = BoardRoom.getSecureRandom().nextLong();\n         this.owner = owner;\n         owner.getOwnedDocuments().add(id);\n         this.name = DEFAULT_DOCUMENT_NAME;\n+        this.canvas = new Canvas();\n     }\n \n-    public Document(long id, User owner, String name) {\n+    /**\n+     * Serialize document from db\n+     */\n+    public Document(long id, User owner, String name, ByteBuf byteBuf) {\n         this.id = id;\n         this.owner = owner;\n         this.name = name;\n+        this.canvas = new Canvas(byteBuf);\n     }\n \n     public long getId() {\n@@ -43,17 +46,8 @@ public User getOwner() {\n         return owner;\n     }\n \n-    public Map<User, List<Point>> getPoints() {\n-        return points;\n-    }\n-\n-    public void addPoints(User user, Point[] points) {\n-        List<Point> pts = this.points.get(user);\n-        if (pts == null) {\n-            pts = new ArrayList<>();\n-        }\n-        pts.addAll(Arrays.asList(points));\n-        this.points.put(user, pts);\n+    public Canvas getCanvas() {\n+        return canvas;\n     }\n \n     @Override"
  },
  {
    "sha": "97af74f97ec1dd1f1106a2cbfa8a264f424f49ea",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/UserSession.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/UserSession.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/UserSession.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/UserSession.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -10,7 +10,7 @@\n     private long hash;\n \n     public UserSession(User user, long hash) {//todo hash\n-        this.token = BoardRoom.getSecureRandom().nextLong();\n+        this.token = BoardRoom.getSecureRandom().nextLong();//https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence\n         this.userId = user.getId();\n         this.creationTime = System.currentTimeMillis();//todo security issue? round/fuzz by a few seconds?\n         this.hash = hash;"
  },
  {
    "sha": "2d298b1c6fd7a0912c298d52b9334d8c7117fca9",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/Canvas.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/Canvas.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/Canvas.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/Canvas.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,74 @@\n+package net.stzups.board.data.objects.canvas;\n+\n+import io.netty.buffer.ByteBuf;\n+import net.stzups.board.BoardRoom;\n+import net.stzups.board.data.objects.User;\n+import net.stzups.board.data.objects.canvas.object.wrappers.CanvasObjectsStateWrapper;\n+import net.stzups.board.data.objects.canvas.object.wrappers.CanvasObjectsWrapper;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class Canvas {\n+    private Map<User, List<CanvasObjectsWrapper>> canvasObjects = new LinkedHashMap<>();\n+    private CanvasState canvasState = new CanvasState();\n+\n+    public Canvas() {\n+\n+    }\n+\n+    /**\n+     * Deserializes canvas from db or client i guess?\n+     */\n+    public Canvas(ByteBuf byteBuf) {\n+        for (int i = 0; i < byteBuf.readUnsignedShort(); i++) {\n+            User user = BoardRoom.getDatabase().getUser(byteBuf.readLong());//todo slow and blocking probably\n+            List<CanvasObjectsWrapper> list = new ArrayList<>();\n+            canvasObjects.put(user, list);\n+            for (int j = 0; j < byteBuf.readUnsignedShort(); j++) {\n+                list.add(new CanvasObjectsWrapper(byteBuf));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Adds a partial canvas from a client to this canvas, will then be updated\n+     */\n+    public void update(User user, Map<Short, CanvasObjectsStateWrapper> map) {//canvas will be discarded\n+        canvasState.update(user, map);\n+    }\n+\n+    /**\n+     * Write everything to buffer\n+     */\n+    public void serialize(ByteBuf byteBuf) {\n+        byteBuf.writeShort((short) canvasObjects.size());\n+        for (Map.Entry<User, List<CanvasObjectsWrapper>> entry : canvasObjects.entrySet()) {\n+            serialize(entry, byteBuf);\n+        }\n+    }\n+\n+    /**\n+     * Write only updated objects, should only be called once per update and shared\n+     */\n+    public void serialize(User user, ByteBuf byteBuf) {\n+        canvasState.serialize(user, byteBuf);\n+    }\n+\n+    /**\n+     * Flushes the updates or something\n+     */\n+    public void flush() {\n+        canvasState.clear();\n+    }\n+\n+    public void serialize(Map.Entry<User, List<CanvasObjectsWrapper>> entry, ByteBuf byteBuf) {\n+        byteBuf.writeLong(entry.getKey().getId());\n+        byteBuf.writeShort((short) entry.getValue().size());\n+        for (CanvasObjectsWrapper canvasObjectWrapper : entry.getValue()) {\n+            canvasObjectWrapper.serialize(byteBuf);\n+        }\n+    }\n+}"
  },
  {
    "sha": "94394d28cb702aceebb6c6d425ad1546965cd0af",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObject.java",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/stzups/Board/blob/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObject.java",
    "raw_url": "https://github.com/stzups/Board/raw/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObject.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObject.java?ref=3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356",
    "patch": "@@ -1,18 +0,0 @@\n-package net.stzups.board.data.objects.canvas;\n-\n-import io.netty.buffer.ByteBuf;\n-\n-public class CanvasObject {\n-    private CanvasObjectType type;\n-\n-    CanvasObject(CanvasObjectType type) {\n-        this.type = type;\n-    }\n-\n-    /**\n-     * Subclasses need to call this method\n-     */\n-    public void serialize(ByteBuf byteBuf) {\n-        byteBuf.writeByte((byte) type.getId());\n-    }\n-}"
  },
  {
    "sha": "45cf82c81bf9cb36830f6ecf0de6337f32278310",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjects.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/stzups/Board/blob/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjects.java",
    "raw_url": "https://github.com/stzups/Board/raw/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjects.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjects.java?ref=3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356",
    "patch": "@@ -1,7 +0,0 @@\n-package net.stzups.board.data.objects.canvas;\n-\n-import java.util.ArrayList;\n-\n-public class CanvasObjects<T extends CanvasObject> extends ArrayList<T> {\n-\n-}"
  },
  {
    "sha": "8b5d72c6666e0fa3a92d89c9adcf93339b104a22",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasState.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasState.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasState.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasState.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,39 @@\n+package net.stzups.board.data.objects.canvas;\n+\n+import io.netty.buffer.ByteBuf;\n+import net.stzups.board.data.objects.User;\n+import net.stzups.board.data.objects.canvas.object.wrappers.CanvasObjectsStateWrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CanvasState {\n+    private Map<User, Map<Short, CanvasObjectsStateWrapper>> canvasObjects = new HashMap<>();\n+\n+    CanvasState() {\n+\n+    }\n+\n+    /**\n+     * Updates this CanvasState with a new CanvasState\n+     */\n+    public void update(User user, Map<Short, CanvasObjectsStateWrapper> map) {\n+        canvasObjects.put(user, map);\n+    }\n+\n+    public void serialize(User user, ByteBuf byteBuf) {\n+       byteBuf.writeShort(canvasObjects.size() - (canvasObjects.containsKey(user) ? 1 : 0));\n+       for (Map.Entry<User, Map<Short, CanvasObjectsStateWrapper>> entry : canvasObjects.entrySet()) {\n+           if (!entry.getKey().equals(user)) {\n+               byteBuf.writeShort(entry.getValue().size());\n+               for (CanvasObjectsStateWrapper canvasObjectsStateWrapper : entry.getValue().values()) {\n+                   canvasObjectsStateWrapper.serialize(byteBuf);\n+               }\n+           }\n+       }\n+    }\n+\n+    public void clear() {\n+        canvasObjects.clear();\n+    }\n+}"
  },
  {
    "sha": "4b5ead875331cf9d5f64e48428f80d5ffce47fc6",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/Point.java",
    "status": "removed",
    "additions": 0,
    "deletions": 21,
    "changes": 21,
    "blob_url": "https://github.com/stzups/Board/blob/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/data/objects/canvas/Point.java",
    "raw_url": "https://github.com/stzups/Board/raw/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/data/objects/canvas/Point.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/Point.java?ref=3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356",
    "patch": "@@ -1,21 +0,0 @@\n-package net.stzups.board.data.objects.canvas;\n-\n-import io.netty.buffer.ByteBuf;\n-\n-public class Point extends CanvasObject {\n-    public int dt;\n-    public short x;\n-    public short y;\n-\n-    public Point(int dt, short x, short y) {\n-        super(CanvasObjectType.POINT);\n-        this.dt = dt;\n-        this.x = x;\n-        this.y = y;\n-    }\n-\n-    @Override\n-    public void serialize(ByteBuf byteBuf) {\n-        super.serialize(byteBuf);\n-    }\n-}"
  },
  {
    "sha": "b41b80333579c0fa48fbf1257c929c3ee6340c25",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/object/CanvasObject.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/CanvasObject.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/CanvasObject.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/CanvasObject.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,35 @@\n+package net.stzups.board.data.objects.canvas.object;\n+\n+import io.netty.buffer.ByteBuf;\n+import net.stzups.board.data.objects.canvas.object.objects.Point;\n+import net.stzups.board.data.objects.canvas.object.objects.Shape;\n+\n+public class CanvasObject {\n+    private short x;\n+    private short y;\n+\n+    public CanvasObject(ByteBuf byteBuf) {\n+        x = byteBuf.readShort();\n+        y = byteBuf.readShort();\n+    }\n+\n+    public void serialize(ByteBuf byteBuf) {\n+        byteBuf.writeShort(x);\n+        byteBuf.writeShort(y);\n+    }\n+\n+    public static CanvasObject getCanvasObject(CanvasObjectType canvasObjectType, ByteBuf byteBuf) {\n+        CanvasObject canvasObject;\n+        switch (canvasObjectType) {\n+            case POINT:\n+                canvasObject = new Point(byteBuf);\n+                break;\n+            case SHAPE:\n+                canvasObject = new Shape(byteBuf);\n+                break;\n+            default:\n+                canvasObject = null;\n+        }\n+        return canvasObject;\n+    }\n+}"
  },
  {
    "sha": "c93c24aa4645384ec3a8e4586e4d1b0b8114da34",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/object/CanvasObjectType.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/CanvasObjectType.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/CanvasObjectType.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/CanvasObjectType.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -1,4 +1,4 @@\n-package net.stzups.board.data.objects.canvas;\n+package net.stzups.board.data.objects.canvas.object;\n \n import io.netty.util.collection.IntObjectHashMap;\n \n@@ -7,6 +7,7 @@\n \n public enum CanvasObjectType {\n     POINT(0),\n+    SHAPE(1),\n     ;\n \n     private static Map<Integer, CanvasObjectType> objectTypeMap = new IntObjectHashMap<>();",
    "previous_filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjectType.java"
  },
  {
    "sha": "acc52c439ea3030c573968ef90b055558dfe15f1",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/object/objects/Point.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/objects/Point.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/objects/Point.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/objects/Point.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,11 @@\n+package net.stzups.board.data.objects.canvas.object.objects;\n+\n+import io.netty.buffer.ByteBuf;\n+import net.stzups.board.data.objects.canvas.object.CanvasObject;\n+\n+public class Point extends CanvasObject {\n+\n+    public Point(ByteBuf byteBuf) {\n+        super(byteBuf);\n+    }\n+}"
  },
  {
    "sha": "0642d955f713340fc4c7fb1098ff5177bfc806ae",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/object/objects/Shape.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/objects/Shape.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/objects/Shape.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/objects/Shape.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,20 @@\n+package net.stzups.board.data.objects.canvas.object.objects;\n+\n+import io.netty.buffer.ByteBuf;\n+import net.stzups.board.data.objects.canvas.object.CanvasObject;\n+\n+public class Shape extends CanvasObject {\n+    private int length;\n+    private int width;\n+\n+    public Shape(ByteBuf byteBuf) {\n+        super(byteBuf);\n+        length = byteBuf.readUnsignedShort();\n+        width = byteBuf.readUnsignedShort();\n+    }\n+\n+    public void serialize(ByteBuf byteBuf) {\n+        byteBuf.writeShort((short) length);\n+        byteBuf.writeShort((short) width);\n+    }\n+}"
  },
  {
    "sha": "12be0e3f7c28d40afe74322cd1ac120103eb1d5c",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectWrapper.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectWrapper.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectWrapper.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectWrapper.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,28 @@\n+package net.stzups.board.data.objects.canvas.object.wrappers;\n+\n+import io.netty.buffer.ByteBuf;\n+import net.stzups.board.data.objects.canvas.object.CanvasObjectType;\n+\n+public class CanvasObjectWrapper {\n+    private CanvasObjectType canvasObjectType;\n+    private short id;\n+\n+    public CanvasObjectWrapper(ByteBuf byteBuf) {\n+        canvasObjectType = CanvasObjectType.valueOf(byteBuf.readUnsignedByte());\n+        id = byteBuf.readUnsignedByte();\n+    }\n+\n+    public CanvasObjectType getCanvasObjectType() {\n+        return canvasObjectType;\n+    }\n+\n+    public short getId() {\n+        return id;\n+    }\n+\n+    public void serialize(ByteBuf byteBuf) {\n+        byteBuf.writeByte((short) canvasObjectType.getId());\n+        byteBuf.writeShort(id);\n+\n+    }\n+}"
  },
  {
    "sha": "027d9de6e7db5bae44944443d35cbe54433e2809",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectsStateWrapper.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectsStateWrapper.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectsStateWrapper.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectsStateWrapper.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,26 @@\n+package net.stzups.board.data.objects.canvas.object.wrappers;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public class CanvasObjectsStateWrapper extends CanvasObjectsWrapper {\n+    private long time;// creation time\n+    private byte[] dts;// delta times, each correspond to an element\n+\n+    public CanvasObjectsStateWrapper(ByteBuf byteBuf) {\n+        super(byteBuf);\n+        time = byteBuf.readLong();\n+        dts = new byte[getCanvasObjects().length];\n+        for (int i = 0; i < dts.length; i++) {\n+            dts[i] = byteBuf.readByte();\n+        }\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf byteBuf) {\n+        super.serialize(byteBuf);\n+        byteBuf.writeLong(time);\n+        for (byte dt : dts) {\n+            byteBuf.writeByte(dt);\n+        }\n+    }\n+}"
  },
  {
    "sha": "80be488350163dfbcf8d4f2126ea6b0e707944c2",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectsWrapper.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectsWrapper.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectsWrapper.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/object/wrappers/CanvasObjectsWrapper.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,29 @@\n+package net.stzups.board.data.objects.canvas.object.wrappers;\n+\n+import io.netty.buffer.ByteBuf;\n+import net.stzups.board.data.objects.canvas.object.CanvasObject;\n+\n+public class CanvasObjectsWrapper extends CanvasObjectWrapper {\n+    private CanvasObject[] canvasObjects;\n+\n+    public CanvasObjectsWrapper(ByteBuf byteBuf) {\n+        super(byteBuf);\n+        canvasObjects = new CanvasObject[byteBuf.readUnsignedByte()];\n+        for (int i = 0; i < canvasObjects.length; i++) {\n+            canvasObjects[i] = CanvasObject.getCanvasObject(getCanvasObjectType(), byteBuf);\n+        }\n+    }\n+\n+    public CanvasObject[] getCanvasObjects() {\n+        return canvasObjects;\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf byteBuf) {\n+        super.serialize(byteBuf);\n+        byteBuf.writeByte((byte) canvasObjects.length);\n+        for (CanvasObject canvasObjects : canvasObjects) {\n+            canvasObjects.serialize(byteBuf);\n+        }\n+    }\n+}"
  },
  {
    "sha": "78bb2a9c6cf21f8a512bc49fb8f035663e4a62c0",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/Client.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/Client.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/Client.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/Client.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -47,10 +47,10 @@ void sendMessage(ServerMessage serverMessage) {\n         channel.writeAndFlush(Collections.singletonList(serverMessage));\n     }\n \n-    void sendMessages() {\n+    void flushMessages() {\n         if (messages.size() > 0) {\n             channel.writeAndFlush(messages);\n-            messages = new ArrayList<>();\n+            messages.clear();\n         }\n     }\n "
  },
  {
    "sha": "99829b0b5a9998e3afc81edc7c04ad17f814c31c",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/MessageHandler.java",
    "status": "modified",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/MessageHandler.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/MessageHandler.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/MessageHandler.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -7,13 +7,12 @@\n import net.stzups.board.data.objects.User;\n import net.stzups.board.data.objects.UserSession;\n import net.stzups.board.server.websocket.protocol.client.ClientMessage;\n+import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageUpdateDocument;\n import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageCreateDocument;\n-import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageDraw;\n import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageHandshake;\n import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageOpenDocument;\n import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageAddDocument;\n import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageAddUser;\n-import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageDrawClient;\n import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageHandshake;\n \n import java.util.HashMap;\n@@ -40,10 +39,8 @@ public void handlerAdded(ChannelHandlerContext ctx) {\n     @Override\n     protected void channelRead0(ChannelHandlerContext ctx, ClientMessage message) {\n         switch (message.getMessageType()) {\n-            case DRAW: {\n-                ClientMessageDraw clientMessageDraw = (ClientMessageDraw) message;\n-                room.getDocument().addPoints(client.getUser(), clientMessageDraw.getPoints());\n-                room.queueMessageExcept(new ServerMessageDrawClient(client, clientMessageDraw.getPoints()), client);//todo this has tons of latency\n+            case UPDATE_DOCUMENT: {\n+                room.getDocument().getCanvas().update(client.getUser(), ((ClientMessageUpdateDocument) message).getMap());\n                 break;\n             }\n             case OPEN_DOCUMENT: {\n@@ -106,7 +103,7 @@ protected void channelRead0(ChannelHandlerContext ctx, ClientMessage message) {\n                         client.queueMessage(new ServerMessageAddDocument(BoardRoom.getDatabase().getDocument(id)));\n                     }\n                 }\n-                client.sendMessages();\n+                client.flushMessages();\n \n                 break;\n             }"
  },
  {
    "sha": "e814b68527813daae8cd52872ab1bdde605f379a",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/Room.java",
    "status": "modified",
    "additions": 19,
    "deletions": 5,
    "changes": 24,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/Room.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/Room.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/Room.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -6,6 +6,7 @@\n import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageAddClient;\n import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageOpenDocument;\n import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageRemoveClient;\n+import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageUpdateDocument;\n \n import java.util.ArrayList;\n import java.util.HashSet;\n@@ -18,14 +19,12 @@\n     private static final int SEND_PERIOD = 1000;\n \n     private static List<Room> rooms = new ArrayList<>();\n-    static {//todo send some packets instantly and refactor to somewhere?\n+    static {\n         new Timer().scheduleAtFixedRate(new TimerTask() {\n             @Override\n             public void run() {\n                 for (Room room : rooms) {\n-                    for (Client client : room.clients) {\n-                        client.sendMessages();\n-                    }\n+                    room.update();\n                 }\n             }\n         }, 0, SEND_PERIOD);\n@@ -60,8 +59,9 @@ Document getDocument() {\n     void addClient(Client client) {\n \n         //for the new client\n-        client.sendMessage(new ServerMessageOpenDocument(document));\n+        //client.sendMessage(new ServerMessageOpenDocument(document));todo remove\n         //for the existing clients\n+        client.sendMessage(new ServerMessageOpenDocument(document));\n         sendMessage(new ServerMessageAddClient(client));\n         clients.add(client);\n         BoardRoom.getLogger().info(\"Added \" + client + \" to \" + this);\n@@ -117,6 +117,20 @@ void queueMessage(ServerMessage serverMessage) {\n         }\n     }\n \n+    void flushMessages() {\n+        for (Client client : clients) {\n+            client.flushMessages();\n+        }\n+    }\n+\n+    private void update() {\n+        for (Client client : clients) {\n+            client.queueMessage(new ServerMessageUpdateDocument(client.getUser(), document));\n+        }\n+        document.getCanvas().flush();\n+        flushMessages();\n+    }\n+\n     @Override\n     public String toString() {\n         return \"Room{document=\" + document + \"}\";"
  },
  {
    "sha": "b567c83ae8446b1afbf9d1ab6763033ede0606d6",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/MessageDecoder.java",
    "status": "modified",
    "additions": 7,
    "deletions": 12,
    "changes": 19,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/MessageDecoder.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/MessageDecoder.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/MessageDecoder.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -7,10 +7,9 @@\n import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n-import net.stzups.board.data.objects.canvas.Point;\n import net.stzups.board.server.websocket.protocol.client.ClientMessage;\n import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageCreateDocument;\n-import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageDraw;\n+import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageUpdateDocument;\n import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageHandshake;\n import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageOpenDocument;\n import net.stzups.board.server.websocket.protocol.client.ClientMessageType;\n@@ -34,24 +33,20 @@ protected void decode(ChannelHandlerContext ctx, WebSocketFrame webSocketFrame,\n             System.out.println(\"recv \" + packetType);\n             ClientMessage message;\n             switch (packetType) {\n-                case DRAW:\n-                    Point[] points = new Point[byteBuf.readUnsignedByte()];\n-                    for (int i = 0; i < points.length; i++) {\n-                        points[i] = new Point(byteBuf.readUnsignedByte(), byteBuf.readShort(), byteBuf.readShort());\n-                    }\n-                    message = new ClientMessageDraw(points);\n-                    break;\n                 case OPEN_DOCUMENT:\n-                    message = new ClientMessageOpenDocument(byteBuf.readLong());\n+                    message = new ClientMessageOpenDocument(byteBuf);\n+                    break;\n+                case UPDATE_DOCUMENT:\n+                    message = new ClientMessageUpdateDocument(byteBuf);\n                     break;\n                 case CREATE_DOCUMENT:\n                     message = new ClientMessageCreateDocument();\n                     break;\n                 case HANDSHAKE:\n-                    message = new ClientMessageHandshake(byteBuf.readLong());\n+                    message = new ClientMessageHandshake(byteBuf);\n                     break;\n                 default:\n-                    throw new OperationNotSupportedException(\"Unsupported message type \" + packetType+ \" while decoding\");\n+                    throw new OperationNotSupportedException(\"Unsupported message type \" + packetType + \" while decoding\");\n             }\n             list.add(message);\n         }"
  },
  {
    "sha": "6693992d950d9be4d13b8e0740dc48b77ba2a819",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/ClientMessageType.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/ClientMessageType.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/ClientMessageType.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/ClientMessageType.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -7,7 +7,7 @@\n \n public enum ClientMessageType {\n     OPEN_DOCUMENT(0),\n-    DRAW(1),\n+    UPDATE_DOCUMENT(1),\n     CREATE_DOCUMENT(2),\n     HANDSHAKE(3),\n     ;"
  },
  {
    "sha": "5e64d430888529b53f008a6406aa7eef6c4d5da5",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageDraw.java",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/stzups/Board/blob/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageDraw.java",
    "raw_url": "https://github.com/stzups/Board/raw/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageDraw.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageDraw.java?ref=3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356",
    "patch": "@@ -1,18 +0,0 @@\n-package net.stzups.board.server.websocket.protocol.client.messages;\n-\n-import net.stzups.board.data.objects.canvas.Point;\n-import net.stzups.board.server.websocket.protocol.client.ClientMessage;\n-import net.stzups.board.server.websocket.protocol.client.ClientMessageType;\n-\n-public class ClientMessageDraw extends ClientMessage {\n-    private Point[] points;\n-\n-    public ClientMessageDraw(Point[] points) {\n-        super(ClientMessageType.DRAW);\n-        this.points = points;\n-    }\n-\n-    public Point[] getPoints() {\n-        return points;\n-    }\n-}"
  },
  {
    "sha": "552c48b9173a6efe79322460f00ca8c0532aca8e",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageHandshake.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageHandshake.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageHandshake.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageHandshake.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -1,14 +1,15 @@\n package net.stzups.board.server.websocket.protocol.client.messages;\n \n+import io.netty.buffer.ByteBuf;\n import net.stzups.board.server.websocket.protocol.client.ClientMessage;\n import net.stzups.board.server.websocket.protocol.client.ClientMessageType;\n \n public class ClientMessageHandshake extends ClientMessage {\n     private long token;\n \n-    public ClientMessageHandshake(long token) {\n+    public ClientMessageHandshake(ByteBuf byteBuf) {\n         super(ClientMessageType.HANDSHAKE);\n-        this.token = token;\n+        this.token = byteBuf.readLong();\n     }\n \n     public long getToken() {"
  },
  {
    "sha": "026a490782a76e0deb05adcd46c3903aebfba261",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageOpenDocument.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageOpenDocument.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageOpenDocument.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageOpenDocument.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -1,14 +1,15 @@\n package net.stzups.board.server.websocket.protocol.client.messages;\n \n+import io.netty.buffer.ByteBuf;\n import net.stzups.board.server.websocket.protocol.client.ClientMessage;\n import net.stzups.board.server.websocket.protocol.client.ClientMessageType;\n \n public class ClientMessageOpenDocument extends ClientMessage {\n     private long id;\n \n-    public ClientMessageOpenDocument(long id) {\n+    public ClientMessageOpenDocument(ByteBuf byteBuf) {\n         super(ClientMessageType.OPEN_DOCUMENT);\n-        this.id = id;\n+        this.id = byteBuf.readLong();\n     }\n \n     public long getId() {"
  },
  {
    "sha": "3211fc0e1153c23c95e987c4e133f4c43d55f110",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageUpdateDocument.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageUpdateDocument.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageUpdateDocument.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/client/messages/ClientMessageUpdateDocument.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -0,0 +1,24 @@\n+package net.stzups.board.server.websocket.protocol.client.messages;\n+\n+import io.netty.buffer.ByteBuf;\n+import net.stzups.board.data.objects.canvas.object.wrappers.CanvasObjectsStateWrapper;\n+import net.stzups.board.server.websocket.protocol.client.ClientMessage;\n+import net.stzups.board.server.websocket.protocol.client.ClientMessageType;\n+\n+import java.util.Map;\n+\n+public class ClientMessageUpdateDocument extends ClientMessage {\n+    private Map<Short, CanvasObjectsStateWrapper> map;\n+\n+    public ClientMessageUpdateDocument(ByteBuf byteBuf) {\n+        super(ClientMessageType.UPDATE_DOCUMENT);\n+        for (int i = 0; i < byteBuf.readUnsignedShort(); i++) {\n+            CanvasObjectsStateWrapper canvasObjectsStateWrapper = new CanvasObjectsStateWrapper(byteBuf);\n+            map.put(canvasObjectsStateWrapper.getId(), canvasObjectsStateWrapper);\n+        }\n+    }\n+\n+    public Map<Short, CanvasObjectsStateWrapper> getMap() {\n+        return map;\n+    }\n+}"
  },
  {
    "sha": "d87159a0b8d3b151bd5ffda39c6cdb32218a9485",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessage.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessage.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessage.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessage.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -2,7 +2,9 @@\n \n import io.netty.buffer.ByteBuf;\n \n+import java.io.BufferedReader;\n import java.nio.charset.StandardCharsets;\n+import java.util.Scanner;\n \n /**\n  * Represents a packet sent by the server"
  },
  {
    "sha": "31c2d971e8ebf05013127df1bb88c8102892294d",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageClient.java",
    "status": "removed",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/stzups/Board/blob/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageClient.java",
    "raw_url": "https://github.com/stzups/Board/raw/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageClient.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageClient.java?ref=3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356",
    "patch": "@@ -1,19 +0,0 @@\n-package net.stzups.board.server.websocket.protocol.server;\n-\n-import io.netty.buffer.ByteBuf;\n-import net.stzups.board.server.websocket.Client;\n-\n-public abstract class ServerMessageClient extends ServerMessage {\n-    private short id;\n-\n-    protected ServerMessageClient(ServerMessageType packetType, Client client) {\n-        super(packetType);\n-        this.id = client == null ? 0 : client.getId();\n-    }\n-\n-    @Override\n-    public void serialize(ByteBuf byteBuf) {\n-        super.serialize(byteBuf);\n-        byteBuf.writeShort(id);\n-    }\n-}"
  },
  {
    "sha": "0efef7d60f19e07d01315cff682228c2ef996451",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageType.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageType.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageType.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageType.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -8,7 +8,7 @@\n public enum ServerMessageType {\n     ADD_CLIENT(0),\n     REMOVE_CLIENT(1),\n-    DRAW(2),\n+    UPDATE_DOCUMENT(2),\n     OPEN_DOCUMENT(3),\n     ADD_DOCUMENT(4),\n     HANDSHAKE(5),"
  },
  {
    "sha": "ad28a91ac25dc7fc01f2859a22241403e59b52a9",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageUser.java",
    "status": "removed",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/stzups/Board/blob/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageUser.java",
    "raw_url": "https://github.com/stzups/Board/raw/3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageUser.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/ServerMessageUser.java?ref=3cbebb8d0be2c93f8dce8cb3c0f2bbbb6575f356",
    "patch": "@@ -1,19 +0,0 @@\n-package net.stzups.board.server.websocket.protocol.server;\n-\n-import io.netty.buffer.ByteBuf;\n-import net.stzups.board.data.objects.User;\n-\n-public abstract class ServerMessageUser extends ServerMessage {\n-    private User user;\n-\n-    protected ServerMessageUser(ServerMessageType serverMessageType, User user) {\n-        super(serverMessageType);\n-        this.user = user;\n-    }\n-\n-    @Override\n-    public void serialize(ByteBuf byteBuf) {\n-        super.serialize(byteBuf);\n-        byteBuf.writeLong(user.getId());\n-    }\n-}"
  },
  {
    "sha": "5e7c1bacbb136eb55f2781576649784e16be6f24",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/messages/ServerMessageAddClient.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/stzups/Board/blob/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/messages/ServerMessageAddClient.java",
    "raw_url": "https://github.com/stzups/Board/raw/f96ff7f894671f3a1d14aab13fdc14d822f0056a/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/messages/ServerMessageAddClient.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/protocol/server/messages/ServerMessageAddClient.java?ref=f96ff7f894671f3a1d14aab13fdc14d822f0056a",
    "patch": "@@ -2,20 +2,21 @@\n \n import io.netty.buffer.ByteBuf;\n import net.stzups.board.server.websocket.Client;\n-import net.stzups.board.server.websocket.protocol.server.ServerMessageClient;\n+import net.stzups.board.server.websocket.protocol.server.ServerMessage;\n import net.stzups.board.server.websocket.protocol.server.ServerMessageType;\n \n-public class ServerMessageAddClient extends ServerMessageClient {\n+public class ServerMessageAddClient extends ServerMessage {\n     private Client client;\n \n     public ServerMessageAddClient(Client client) {\n-        super(ServerMessageType.ADD_CLIENT, client);\n+        super(ServerMessageType.ADD_CLIENT);\n         this.client = client;\n     }\n \n     @Override\n     public void serialize(ByteBuf byteBuf) {\n         super.serialize(byteBuf);\n+        byteBuf.writeShort(client.getId());\n         byteBuf.writeLong(client.getUser().getId());\n     }\n }"
  }
]
