[
  {
    "sha": "0725890d09bd4202153ba4df3ad314bc04cb2d1f",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 25,
    "deletions": 9,
    "changes": 34,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/CHANGELOG.md",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/CHANGELOG.md?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -1,14 +1,17 @@\n-##v0.1\n+## v0.1\n Add real time drawing\n \n - Change file structure and how files are served\n - Fix custom invite URL\n - Automatic connection\n \n-##v0.2\n+## v0.2\n Basic functionality to allow for more features to be added\n+- Instant live documents\n+- Data persistence\n+- User identity, separation between browser client and user\n \n-###v0.2.1\n+### v0.2.1\n Room to document based model\n \n - Add sidebar\n@@ -18,14 +21,14 @@ Room to document based model\n - Event based WebSocketHandler\n - Change how URLs work\n \n-###v0.2.2\n+### v0.2.2\n Add document opening/closing\n \n - Change how queued packets work\n - Documents are saved before closed\n - Change protocol again\n \n-###v0.2.3\n+### v0.2.3\n Flat file data persistence\n \n - Remove ConsoleManager\n@@ -35,7 +38,7 @@ Flat file data persistence\n - Complete rework of config system\n - SSL support\n \n-###v0.2.4\n+### v0.2.4\n User identity\n \n - Change URL parsing\n@@ -44,19 +47,32 @@ User identity\n - Sessions are linked to documents\n - Improve toString debug\n \n-###v0.2.5\n+### v0.2.5\n Multiple clients per user\n \n - Change how sessions are handled\n - Clean up script loading\n - Fix hashcode issues\n \n-###v0.2.6\n+### v0.2.6\n Design\n+\n - Clean up CSS\n - Add changelog\n - Add invite/connected users toolbar\n - \"Fix\" canvas resize\n - Change/clean up config system\n - Improve client debug\n-- Better local user with different handshake\n\\ No newline at end of file\n+- Better local user with different handshake\n+\n+## v0.3\n+Architecture rework\n+\n+### v0.3.1\n+SQL data persistence\n+\n+- Dockerized server with Maven dependencies\n+- Add environment variable config method\n+- Fix send rate of client\n+- Remove flatfile, add runtime (in memory only) and PostgresSQL database\n+- Move frontend to independent HTTP server (nginx)\n\\ No newline at end of file"
  },
  {
    "sha": "b5a7a200dbe42755257969d47aea2c494772014f",
    "filename": "README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 50,
    "changes": 51,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/README.md",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/README.md",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/README.md?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -2,53 +2,4 @@ welcome to the board project\n \n name pending\n \n-This project is separated into the server (`board-server`) and the client (`board-web-client`). All files inside `board-web-client` can be served to the browser and are therefore public.\n-\n-You will need to build and run the `board-server` project before using or contributing to the client or server.\n-\n-## Building `board-server` \n-\n-`board-server` is an HTTP/WebSocket server written in Java 8. Make sure you have the Java 8 JDK and [Apache Maven](https://maven.apache.org/index.html) installed on your system before attempting to build the project.\n-\n-#### Build Steps\n-- Clone this repository to your local machine\n-- Run `mvn clean package` in `board-server` to generate server artifact in the newly created `target` folder\n-\n-Modifying `board-server` will require you to recompile the project and restart the server.\n-\n-Modifying `board-web-client` only requires you to refresh your browser. If you do not see your new changes, then use `ctrl+F5` to also reset your browser cache.\n-\n-## Running `board-server`\n-\n-Once you have built `board-server`, you may run it using using the following command:\n-\n-    java -jar board-server-xxx.jar --ssl.keystore http\n-\n-- This starts an HTTP/WebSocket server listening on port 80, which you can connect in your browser at [http://localhost](http://localhost). \n-- All WebSocket connections run on the same port as the HTTP server, and should connect to [ws://localhost/websocket](ws://localhost/websocket). \n-- Stop the server gracefully to save persistent data (`ctrl+c` on Windows terminals). Killing the process may result in data loss from any unsaved persistent data.\n-\n-### Properties\n-\n-These can be set in several different ways:\n-\n-##### `board.properties`\n-Create a file called `board.properties` in the working directory of the server and format as the following\n-\n-    key=value\n-    other.key=value with spaces\n-\n-##### Command line arguments\n-\n-    java -jar board-server-xxx.jar --key value --other.key \"value with spaces\"\n-File indicates a relative (<working directory>/folder/file.ext) or absolute path (C:/folder/file.ext)\n-\n-| Flag | Type | Default | Description |\n-| --- | ---- | ------- | ----------- |\n-| ssl.keystore.path | file | (required) |  Path to the PKCS12 `mykeystore.pfx` containing the private key for the server. Set to `http` to use HTTP without SSL encryption |\n-| ssl.passphrase | string | (optional) | Passphrase for `mykeystore.pfx` |\n-| document.root.path | file | documentRoot | Should be set to where `board-web-client` is. HTTP requests to a directory (`localhost` or `localhost/folder/`) will be served the `index.html` file of those directories HTTP requests to a file that do not specify an extension (`localhost/file`) will be served a `.html` that corresponds to the requested name\n-| data.root.path | file | data | Sets the folder location of the flat file storage |\n-| debug.log.traffic | boolean | false | Will print network throughput (read/write) into the console |\n-| autosave.interval | integer (seconds) | -1 | Sets how often flat file storage will be saved to disk, or negative value to disable |\n-| http.cache.time | integer (seconds) | 0 | How long before a cached item expires. Set to 0 for development purposes so refreshing the page will always load your new changes (equivalent of `crtl+f5`) |\n\\ No newline at end of file\n+Make sure to check out the [Quick Start guide](https://github.com/stzups/Board/wiki/Quick-Start).\n\\ No newline at end of file"
  },
  {
    "sha": "a25794b15dffe6ce02055619f31373c55e1e5178",
    "filename": "board-room/Dockerfile",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/Dockerfile",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/Dockerfile",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/Dockerfile?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,28 @@\n+#\n+# Build server with maven\n+#\n+FROM maven:3.6.0-jdk-11-slim AS board-room\n+\n+# Fetch and cache dependencies\n+WORKDIR /usr/src/app\n+\n+COPY pom.xml .\n+RUN mvn dependency:resolve\n+\n+# Compile source code with cached dependencies\n+COPY src src\n+RUN mvn package\n+\n+#\n+# Runtime (alpine)\n+#\n+FROM adoptopenjdk/openjdk11:alpine-jre\n+\n+WORKDIR /usr/app\n+\n+COPY --from=board-room /usr/src/app/target/board-room-0.3.jar .\n+\n+# Failure to set required environment variables will cause the server to crash\n+ENV board.ssl=required\n+ENV board.postgres=required\n+ENTRYPOINT [\"java\", \"-jar\", \"board-room-0.3.jar\"]\n\\ No newline at end of file"
  },
  {
    "sha": "687f53d45bd8a59cf15ef9c2337f318db6ad8b21",
    "filename": "board-room/pom.xml",
    "status": "renamed",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/pom.xml",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/pom.xml",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/pom.xml?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -5,8 +5,8 @@\n     <modelVersion>4.0.0</modelVersion>\n \n     <groupId>net.stzups.board</groupId>\n-    <artifactId>board-server</artifactId>\n-    <version>0.2</version>\n+    <artifactId>board-room</artifactId>\n+    <version>0.3</version>\n \n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n@@ -26,8 +26,8 @@\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <version>3.8.1</version>\n                 <configuration>\n-                    <source>8</source>\n-                    <target>8</target>\n+                    <source>11</source>\n+                    <target>11</target>\n                 </configuration>\n             </plugin>\n             <!-- make runnable jar -->\n@@ -39,7 +39,7 @@\n                     <archive>\n                         <manifest>\n                             <addClasspath>true</addClasspath>\n-                            <mainClass>net.stzups.board.Board</mainClass>\n+                            <mainClass>net.stzups.board.BoardRoom</mainClass>\n                         </manifest>\n                     </archive>\n                 </configuration>\n@@ -72,5 +72,10 @@\n             <version>4.1.55.Final</version>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <version>42.2.13</version>\n+        </dependency>\n     </dependencies>\n </project>\n\\ No newline at end of file",
    "previous_filename": "board-server/pom.xml"
  },
  {
    "sha": "73e80edcf1c6d46d2091bd97ba2fe738cabcadcf",
    "filename": "board-room/src/main/java/net/stzups/board/BoardRoom.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/BoardRoom.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/BoardRoom.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/BoardRoom.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,88 @@\n+package net.stzups.board;\n+\n+import io.netty.channel.ChannelFuture;\n+import net.stzups.board.config.Config;\n+import net.stzups.board.config.ConfigBuilder;\n+import net.stzups.board.config.configs.ArgumentConfig;\n+import net.stzups.board.config.configs.EnvironmentVariableConfig;\n+import net.stzups.board.config.configs.PropertiesConfig;\n+import net.stzups.board.data.database.Database;\n+import net.stzups.board.data.database.postgres.PostgresDatabase;\n+import net.stzups.board.data.database.memory.MemoryDatabase;\n+import net.stzups.board.server.Server;\n+\n+import java.security.SecureRandom;\n+import java.util.Random;\n+import java.util.logging.Logger;\n+\n+public class BoardRoom {\n+    private static Logger logger;\n+    private static Config config;\n+    private static final SecureRandom secureRandom = new SecureRandom();\n+    private static final Random random = new Random();\n+\n+    private static Database database;//user id -> user\n+\n+    public static void main(String[] args) throws Exception {\n+        logger = LogFactory.getLogger(\"Board Room\");\n+\n+        logger.info(\"Starting Board Room server...\");\n+\n+        long start = System.currentTimeMillis();\n+\n+        config = new ConfigBuilder()\n+                .addConfig(new ArgumentConfig(args))\n+                .addConfig(new PropertiesConfig(\"board.properties\"))\n+                .addConfig(new EnvironmentVariableConfig(\"board.\"))\n+                .build();\n+\n+        Boolean postgres = config.getBoolean(\"postgres\");\n+        if (postgres == null) {\n+            throw new RuntimeException(\"Failed to specify required runtime variable --postgres\");\n+        } else {\n+            if (postgres) {\n+                logger.info(\"Connecting to Postgres database...\");\n+                database = new PostgresDatabase(BoardRoom.getConfig().get(\"postgres.url\"), BoardRoom.getConfig().get(\"postgres.user\"), BoardRoom.getConfig().get(\"postgres.password\"));\n+                logger.info(\"Connected to Postgres database\");\n+            } else {\n+                logger.warning(\"Using debug only runtime database. No data will be persisted.\");\n+                database = new MemoryDatabase();\n+            }\n+        }\n+\n+        Server server = new Server();\n+        ChannelFuture channelFuture = server.start();\n+\n+        logger.info(\"Started Board Room server in \" + (System.currentTimeMillis() - start) + \"ms\");\n+\n+        channelFuture.sync();\n+\n+        start = System.currentTimeMillis();\n+\n+        logger.info(\"Stopping Board Room server\");\n+\n+        server.stop();\n+\n+        logger.info(\"Stopped Board Room server in \" + (System.currentTimeMillis() - start) + \"ms\");\n+    }\n+\n+    public static Logger getLogger() {\n+        return logger;\n+    }\n+\n+    public static Config getConfig() {\n+        return config;\n+    }\n+\n+    public static Database getDatabase() {\n+        return database;\n+    }\n+\n+    public static SecureRandom getSecureRandom() {\n+        return secureRandom;\n+    }\n+\n+    public static Random getRandom() {\n+        return random;\n+    }\n+}"
  },
  {
    "sha": "7923a74f07be2309ef118fda8f1ee7ede711d691",
    "filename": "board-room/src/main/java/net/stzups/board/LogFactory.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/LogFactory.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/LogFactory.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/LogFactory.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "previous_filename": "board-server/src/main/java/net/stzups/board/LogFactory.java"
  },
  {
    "sha": "d5571aea6a4255efcda2d0fe0836f126de8246f5",
    "filename": "board-room/src/main/java/net/stzups/board/RandomString.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/RandomString.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/RandomString.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/RandomString.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "previous_filename": "board-server/src/main/java/net/stzups/board/RandomString.java"
  },
  {
    "sha": "efde15adb9f5375303de5319ee91e8cf2b87d38a",
    "filename": "board-room/src/main/java/net/stzups/board/config/Config.java",
    "status": "renamed",
    "additions": 13,
    "deletions": 5,
    "changes": 18,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/Config.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/Config.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/config/Config.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -1,6 +1,5 @@\n package net.stzups.board.config;\n \n-import java.nio.ByteBuffer;\n import java.util.List;\n \n /**\n@@ -30,11 +29,12 @@ public String get(String key) {\n         return null;\n     }\n \n-    public int getInt(String key) {\n+    //todo @Nullable annotations?\n+    public Integer getInt(String key) {\n         try {\n             return Integer.parseInt(get(key));\n         } catch (NumberFormatException e) {\n-            return 0;\n+            return null;\n         }\n     }\n \n@@ -46,8 +46,16 @@ public int getInt(String key, int defaultValue) {\n         }\n     }\n \n-    public boolean getBoolean(String key) {\n-        return Boolean.parseBoolean(get(key));\n+    public Boolean getBoolean(String key) {\n+        String value = get(key);\n+        if (value != null) {\n+            if (value.equalsIgnoreCase(\"true\")) {\n+                return true;\n+            } else if (value.equalsIgnoreCase(\"false\")) {\n+                return false;\n+            }\n+        }\n+        return null;\n     }\n \n     public boolean getBoolean(String key, boolean defaultValue) {",
    "previous_filename": "board-server/src/main/java/net/stzups/board/config/Config.java"
  },
  {
    "sha": "884384e48d0f82d2b1b69f34a025da1a77bd28d4",
    "filename": "board-room/src/main/java/net/stzups/board/config/ConfigBuilder.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/ConfigBuilder.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/ConfigBuilder.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/config/ConfigBuilder.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "previous_filename": "board-server/src/main/java/net/stzups/board/config/ConfigBuilder.java"
  },
  {
    "sha": "b892a205796c50494f0a8e06dbc0038b7e2ab08c",
    "filename": "board-room/src/main/java/net/stzups/board/config/ConfigProvider.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/ConfigProvider.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/ConfigProvider.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/config/ConfigProvider.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "previous_filename": "board-server/src/main/java/net/stzups/board/config/ConfigProvider.java"
  },
  {
    "sha": "b7d0c911d7afaa3b99ffe0ebb699532fd9711f68",
    "filename": "board-room/src/main/java/net/stzups/board/config/configs/ArgumentConfig.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/configs/ArgumentConfig.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/configs/ArgumentConfig.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/config/configs/ArgumentConfig.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "previous_filename": "board-server/src/main/java/net/stzups/board/config/configs/ArgumentConfig.java"
  },
  {
    "sha": "3fcd067c5ebffcad6bd9797982ba8f7749a17bde",
    "filename": "board-room/src/main/java/net/stzups/board/config/configs/EnvironmentVariableConfig.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/configs/EnvironmentVariableConfig.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/configs/EnvironmentVariableConfig.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/config/configs/EnvironmentVariableConfig.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,18 @@\n+package net.stzups.board.config.configs;\n+\n+import net.stzups.board.config.ConfigProvider;\n+\n+import java.util.Objects;\n+\n+public class EnvironmentVariableConfig implements ConfigProvider {\n+    private final String prefix;\n+\n+    public EnvironmentVariableConfig(String prefix) {\n+        this.prefix = Objects.requireNonNullElse(prefix, \"\");\n+    }\n+\n+    @Override\n+    public String get(String key) {\n+        return System.getenv(prefix + key);\n+    }\n+}"
  },
  {
    "sha": "a918299a354e96fa2e4e8d1b5e7977c12c5b86e8",
    "filename": "board-room/src/main/java/net/stzups/board/config/configs/PropertiesConfig.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/configs/PropertiesConfig.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/config/configs/PropertiesConfig.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/config/configs/PropertiesConfig.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "previous_filename": "board-server/src/main/java/net/stzups/board/config/configs/PropertiesConfig.java"
  },
  {
    "sha": "999ddbb1939d39b67c6406cb82b698d4b14fed03",
    "filename": "board-room/src/main/java/net/stzups/board/data/database/Database.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/database/Database.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/database/Database.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/database/Database.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,18 @@\n+package net.stzups.board.data.database;\n+\n+import net.stzups.board.data.objects.Document;\n+import net.stzups.board.data.objects.HttpSession;\n+import net.stzups.board.data.objects.User;\n+import net.stzups.board.data.objects.UserSession;\n+\n+public interface Database {\n+    void addUser(User user);\n+    User getUser(long id);\n+\n+    Document createDocument(User owner);\n+    Document getDocument(long id);\n+    void saveDocument(Document document);\n+\n+    UserSession removeUserSession(long token);\n+    void addUserSession(UserSession userSession);\n+}"
  },
  {
    "sha": "7bb679da22fa0b604f25d8da006e66286eaad5eb",
    "filename": "board-room/src/main/java/net/stzups/board/data/database/memory/MemoryDatabase.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/database/memory/MemoryDatabase.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/database/memory/MemoryDatabase.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/database/memory/MemoryDatabase.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,55 @@\n+package net.stzups.board.data.database.memory;\n+\n+import net.stzups.board.data.database.Database;\n+import net.stzups.board.data.objects.Document;\n+import net.stzups.board.data.objects.User;\n+import net.stzups.board.data.objects.UserSession;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * In memory database, for debug only\n+ */\n+public class MemoryDatabase implements Database {\n+    private Map<Long, Document> documents = new HashMap<>();\n+    private Map<Long, UserSession> userSessions = new HashMap<>();\n+    private Map<Long, User> users = new HashMap<>();\n+\n+    @Override\n+    public void addUser(User user) {\n+        users.put(user.getId(), user);\n+    }\n+\n+    @Override\n+    public User getUser(long id) {\n+        return users.get(id);\n+    }\n+\n+    @Override\n+    public Document getDocument(long id) {\n+        return documents.get(id);\n+    }\n+\n+    @Override\n+    public void saveDocument(Document document) {\n+        documents.put(document.getId(), document);\n+    }\n+\n+    @Override\n+    public UserSession removeUserSession(long token) {\n+        return userSessions.remove(token);\n+    }\n+\n+    @Override\n+    public void addUserSession(UserSession userSession) {\n+        userSessions.put(userSession.getToken(), userSession);\n+    }\n+\n+    @Override\n+    public Document createDocument(User owner) {\n+        Document document = new Document(owner);\n+        documents.put(document.getId(), document);\n+        return document;\n+    }\n+}"
  },
  {
    "sha": "7fe0a5efd8347100e0d3c6eea73c624bfb133370",
    "filename": "board-room/src/main/java/net/stzups/board/data/database/postgres/PostgresDatabase.java",
    "status": "added",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/database/postgres/PostgresDatabase.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/database/postgres/PostgresDatabase.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/database/postgres/PostgresDatabase.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,158 @@\n+package net.stzups.board.data.database.postgres;\n+\n+import net.stzups.board.data.database.Database;\n+import net.stzups.board.data.objects.Document;\n+import net.stzups.board.data.objects.User;\n+import net.stzups.board.data.objects.UserSession;\n+\n+import java.io.ByteArrayInputStream;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class PostgresDatabase implements Database {\n+    private Connection connection;\n+\n+    private Map<Long, User> users = new HashMap<>();\n+    private Map<Long, Document> documents = new HashMap<>();\n+    private Map<Long, UserSession> userSessions = new HashMap<>();\n+\n+    public PostgresDatabase(String url, String user, String password) throws Exception {\n+        Class.forName(\"org.postgresql.Driver\");\n+        connection = DriverManager.getConnection(url, user, password);\n+    }\n+\n+    @Override\n+    public void addUser(User user) {\n+        try {\n+            PreparedStatement preparedStatement = connection.prepareStatement(\"INSERT INTO users(id, owned_documents, shared_documents) VALUES (?, ?, ?)\");\n+            preparedStatement.setLong(1, user.getId());\n+            preparedStatement.setArray(2, connection.createArrayOf(\"bigint\", user.getOwnedDocuments().toArray()));\n+            preparedStatement.setArray(3, connection.createArrayOf(\"bigint\", user.getSharedDocuments().toArray()));\n+            preparedStatement.execute();\n+            users.put(user.getId(), user);\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public User getUser(long id) {\n+        try {\n+            User user = users.get(id);\n+            if (user == null) {\n+                PreparedStatement preparedStatement = connection.prepareStatement(\"SELECT * FROM users WHERE id=?\");\n+                preparedStatement.setLong(1, id);\n+                ResultSet resultSet = preparedStatement.executeQuery();\n+                if (!resultSet.next()) {\n+                    System.out.println(\"user does not exist\");\n+                    return null;\n+                }\n+                user = new User(id, new ArrayList<>(Arrays.asList((Long[]) resultSet.getArray(\"owned_documents\").getArray())), new ArrayList<>(Arrays.asList((Long[]) resultSet.getArray(\"shared_documents\").getArray())));\n+                users.put(user.getId(), user);\n+            }\n+            return user;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public Document createDocument(User owner) {\n+        Document document = new Document(owner);\n+        try {\n+            PreparedStatement preparedStatement = connection.prepareStatement(\"INSERT INTO documents VALUES (?, ?, ?, ?)\");\n+            preparedStatement.setLong(1, document.getId());\n+            preparedStatement.setLong(2, document.getOwner().getId());\n+            preparedStatement.setString(3, document.getName());\n+            preparedStatement.setBinaryStream(4, new ByteArrayInputStream(new byte[0]));\n+            preparedStatement.execute();\n+            documents.put(document.getId(), document);\n+            return document;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public Document getDocument(long id) {\n+        try {\n+            Document document = documents.get(id);\n+            if (document == null) {\n+                PreparedStatement preparedStatement = connection.prepareStatement(\"SELECT * FROM documents WHERE id=?\");\n+                preparedStatement.setLong(1, id);\n+                ResultSet resultSet = preparedStatement.executeQuery();\n+                if (!resultSet.next()) {\n+                    System.out.println(\"document does not exist\");\n+                    return null;\n+                }\n+                User user = getUser(resultSet.getLong(\"owner_id\"));\n+                if (user == null) {\n+                    System.out.println(\"no owner for document\");\n+                    return null;\n+                }\n+                document = new Document(id, user, resultSet.getString(\"name\"));//todo binary data\n+                documents.put(document.getId(), document);\n+            }\n+            return document;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public void saveDocument(Document document) {\n+\n+    }\n+\n+    @Override\n+    public void addUserSession(UserSession userSession) {\n+        try {\n+            PreparedStatement preparedStatement = connection.prepareStatement(\"INSERT INTO user_sessions VALUES (?, ?, ?, ?)\");\n+            preparedStatement.setLong(1, userSession.getToken());\n+            preparedStatement.setLong(2, userSession.getUserId());\n+            preparedStatement.setLong(3, userSession.getCreationTime());\n+            preparedStatement.setLong(4, userSession.getHash());\n+            preparedStatement.execute();\n+            userSessions.put(userSession.getUserId(), userSession);\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     * Remove a user session for a token and return the removed user session\n+     */\n+    @Override\n+    public UserSession removeUserSession(long token) {\n+        try {\n+            UserSession userSession = userSessions.remove(token);\n+            if (userSession == null) {\n+                PreparedStatement preparedStatement = connection.prepareStatement(\"SELECT * FROM user_sessions WHERE token=?\");\n+                preparedStatement.setLong(1, token);\n+                ResultSet resultSet = preparedStatement.executeQuery();\n+                if (!resultSet.next()) {\n+                    System.out.println(\"user session does not exist in db\");\n+                    return null;\n+                }\n+                userSession = new UserSession(token, resultSet.getLong(\"user_id\"), resultSet.getLong(\"creation_time\"), resultSet.getLong(\"hash\"));\n+            }\n+            PreparedStatement preparedStatement = connection.prepareStatement(\"DELETE FROM user_sessions WHERE token=?\");\n+            preparedStatement.setLong(1, token);\n+            preparedStatement.execute();\n+            return userSession;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+}"
  },
  {
    "sha": "36fb9cceba48e1274c6cb1ded0ef419ae2242361",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/Document.java",
    "status": "renamed",
    "additions": 17,
    "deletions": 3,
    "changes": 20,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/Document.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/Document.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/Document.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -1,23 +1,33 @@\n package net.stzups.board.data.objects;\n \n-import java.io.Serializable;\n+import net.stzups.board.BoardRoom;\n+import net.stzups.board.data.objects.canvas.Point;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-public class Document implements Serializable {\n+public class Document {\n+    private static final String DEFAULT_DOCUMENT_NAME = \"Untitled Document\";\n+\n     private long id;\n     private User owner;\n     private String name;\n     private String inviteCode;\n     private Map<User, List<Point>> points = new HashMap<>();\n \n+    public Document(User owner) {\n+        this.id = BoardRoom.getSecureRandom().nextLong();\n+        this.owner = owner;\n+        owner.getOwnedDocuments().add(id);\n+        this.name = DEFAULT_DOCUMENT_NAME;\n+    }\n+\n     public Document(long id, User owner, String name) {\n         this.id = id;\n         this.owner = owner;\n-        owner.getOwnedDocuments().add(id);\n         this.name = name;\n     }\n \n@@ -29,6 +39,10 @@ public String getName() {\n         return name;\n     }\n \n+    public User getOwner() {\n+        return owner;\n+    }\n+\n     public Map<User, List<Point>> getPoints() {\n         return points;\n     }",
    "previous_filename": "board-server/src/main/java/net/stzups/board/data/objects/Document.java"
  },
  {
    "sha": "4b0f40bea2e86adcfdb1eb38e59477bec2c7373d",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/HttpSession.java",
    "status": "renamed",
    "additions": 5,
    "deletions": 7,
    "changes": 12,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/HttpSession.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/HttpSession.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/HttpSession.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -7,15 +7,13 @@\n import io.netty.handler.codec.http.cookie.Cookie;\n import io.netty.handler.codec.http.cookie.DefaultCookie;\n import io.netty.handler.codec.http.cookie.ServerCookieDecoder;\n-import net.stzups.board.Board;\n-import net.stzups.board.data.TokenGenerator;\n+import net.stzups.board.BoardRoom;\n \n-import java.io.Serializable;\n import java.net.InetAddress;\n import java.nio.charset.StandardCharsets;\n import java.util.Set;\n \n-public class HttpSession implements Serializable {\n+public class HttpSession {\n     private static final long SESSION_TOKEN_MAX_AGE = 2314;//todo\n \n     public static Cookie getCookie(HttpHeaders httpHeaders, InetAddress address) {\n@@ -32,7 +30,7 @@ public static HttpSession getSession(HttpHeaders httpHeaders, InetAddress addres\n             Set<Cookie> cookies = ServerCookieDecoder.STRICT.decode(cookieString);\n             for (Cookie cookie : cookies) {\n                 if (cookie.name().equals(\"session-token\")) {\n-                    HttpSession httpSession = Board.getHttpSession(Base64.decode(Unpooled.wrappedBuffer(cookie.value().getBytes())).getLong(0));\n+                    HttpSession httpSession = null;//BoardRoom.getDatabase().getHttpSession(Base64.decode(Unpooled.wrappedBuffer(cookie.value().getBytes())).getLong(0));todo\n                     if (httpSession != null && httpSession.validate(cookie, address)) {\n                         System.out.println(\"good session\");\n                         return httpSession;\n@@ -56,15 +54,15 @@ private HttpSession(InetAddress address) {\n     }\n \n     private Cookie generate() {//todo make sure this is only called once\n-        token = TokenGenerator.getSecureRandom().nextLong();\n+        token = BoardRoom.getSecureRandom().nextLong();\n         Cookie cookie = new DefaultCookie(\"session-token\", Base64.encode(Unpooled.copyLong(token)).toString(StandardCharsets.US_ASCII));//todo allocation\n         cookie.setHttpOnly(true);\n         cookie.setDomain(\"localhost\");//todo\n         cookie.setMaxAge(SESSION_TOKEN_MAX_AGE);\n         cookie.setPath(\"/\");//todo\n         //cookie.setSecure(true); cant be done over http\n         cookie.setWrap(true);//todo\n-        Board.addHttpSession(this);\n+        //BoardRoom.getDatabase().addHttpSession(this);todo\n         return cookie;\n     }\n ",
    "previous_filename": "board-server/src/main/java/net/stzups/board/data/objects/HttpSession.java"
  },
  {
    "sha": "d88bf31c98c7103f6d2a432d2859142b5465c012",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/User.java",
    "status": "renamed",
    "additions": 9,
    "deletions": 4,
    "changes": 13,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/User.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/User.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/User.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -1,23 +1,28 @@\n package net.stzups.board.data.objects;\n \n-import net.stzups.board.data.TokenGenerator;\n+import net.stzups.board.BoardRoom;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n-public class User implements Serializable {\n+public class User {\n     private long id;\n     private List<Long> ownedDocuments;\n     private List<Long> sharedDocuments;\n \n     public User() {\n-        id = TokenGenerator.getSecureRandom().nextLong();\n+        id = BoardRoom.getSecureRandom().nextLong();\n         ownedDocuments = new ArrayList<>();\n         //ownedDocuments.add(Document.createDocument(this).getId()); todo do somewhere else\n         sharedDocuments = new ArrayList<>();\n     }\n \n+    public User(long id, List<Long> ownedDocuments, List<Long> sharedDocuments) {\n+        this.id = id;\n+        this.ownedDocuments = ownedDocuments;\n+        this.sharedDocuments = sharedDocuments;\n+    }\n+\n     public long getId() {\n         return id;\n     }",
    "previous_filename": "board-server/src/main/java/net/stzups/board/data/objects/User.java"
  },
  {
    "sha": "39b20f1f1c3745cbe5a1a7efc26994a4230b7d75",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/UserSession.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/UserSession.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/UserSession.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/UserSession.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,56 @@\n+package net.stzups.board.data.objects;\n+\n+import net.stzups.board.BoardRoom;\n+\n+public class UserSession {\n+    private static final int MAX_USER_SESSION_AGE = 10000000;//todo\n+    private long token;\n+    private long userId;\n+    private long creationTime;\n+    private long hash;\n+\n+    public UserSession(User user, long hash) {//todo hash\n+        this.token = BoardRoom.getSecureRandom().nextLong();\n+        this.userId = user.getId();\n+        this.creationTime = System.currentTimeMillis();//todo security issue? round/fuzz by a few seconds?\n+        this.hash = hash;\n+    }\n+\n+    public UserSession(long token, long userId, long creationTime, long hash) {\n+        this.token = token;\n+        this.userId = userId;\n+        this.creationTime = creationTime;\n+        this.hash = hash;\n+    }\n+\n+    public long getToken() {\n+        return token;\n+    }\n+\n+    public long getUserId() {\n+        return userId;\n+    }\n+\n+    public long getCreationTime() {\n+        return creationTime;\n+    }\n+\n+    public long getHash() {\n+        return hash;\n+    }\n+\n+    public boolean validate(long hash) {\n+        token = 0;\n+        return (System.currentTimeMillis() - creationTime) < MAX_USER_SESSION_AGE && this.hash == hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"UserSession{userId=\" + userId + \",@\" + hashCode()+ \"}\";\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Long.hashCode(userId);\n+    }\n+}"
  },
  {
    "sha": "94394d28cb702aceebb6c6d425ad1546965cd0af",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObject.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObject.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObject.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObject.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,18 @@\n+package net.stzups.board.data.objects.canvas;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public class CanvasObject {\n+    private CanvasObjectType type;\n+\n+    CanvasObject(CanvasObjectType type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Subclasses need to call this method\n+     */\n+    public void serialize(ByteBuf byteBuf) {\n+        byteBuf.writeByte((byte) type.getId());\n+    }\n+}"
  },
  {
    "sha": "24a0976ab8834483223f07cc8385ff3bb29f8ef5",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjectType.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjectType.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjectType.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjectType.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,36 @@\n+package net.stzups.board.data.objects.canvas;\n+\n+import io.netty.util.collection.IntObjectHashMap;\n+\n+import java.util.EnumSet;\n+import java.util.Map;\n+\n+public enum CanvasObjectType {\n+    POINT(0),\n+    ;\n+\n+    private static Map<Integer, CanvasObjectType> objectTypeMap = new IntObjectHashMap<>();\n+    static {\n+        for (CanvasObjectType canvasObjectType : EnumSet.allOf(CanvasObjectType.class)) {\n+            objectTypeMap.put(canvasObjectType.id, canvasObjectType);\n+        }\n+    }\n+\n+    private int id;\n+\n+    CanvasObjectType(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public static CanvasObjectType valueOf(int id) {\n+        CanvasObjectType objectType = objectTypeMap.get(id);\n+        if (objectType == null) {\n+            throw new IllegalArgumentException(\"Unknown CanvasObjectType for given id \" + id);\n+        }\n+        return objectType;\n+    }\n+}"
  },
  {
    "sha": "45cf82c81bf9cb36830f6ecf0de6337f32278310",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjects.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjects.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjects.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/CanvasObjects.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,7 @@\n+package net.stzups.board.data.objects.canvas;\n+\n+import java.util.ArrayList;\n+\n+public class CanvasObjects<T extends CanvasObject> extends ArrayList<T> {\n+\n+}"
  },
  {
    "sha": "4b5ead875331cf9d5f64e48428f80d5ffce47fc6",
    "filename": "board-room/src/main/java/net/stzups/board/data/objects/canvas/Point.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/canvas/Point.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/data/objects/canvas/Point.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/data/objects/canvas/Point.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -0,0 +1,21 @@\n+package net.stzups.board.data.objects.canvas;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public class Point extends CanvasObject {\n+    public int dt;\n+    public short x;\n+    public short y;\n+\n+    public Point(int dt, short x, short y) {\n+        super(CanvasObjectType.POINT);\n+        this.dt = dt;\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf byteBuf) {\n+        super.serialize(byteBuf);\n+    }\n+}"
  },
  {
    "sha": "1d83208c6a9b0131da64e43ff3ddbd0137b4296f",
    "filename": "board-room/src/main/java/net/stzups/board/server/Server.java",
    "status": "renamed",
    "additions": 18,
    "deletions": 13,
    "changes": 31,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/Server.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/Server.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/Server.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -10,7 +10,7 @@\n import io.netty.handler.ssl.SslContext;\n import io.netty.handler.ssl.SslContextBuilder;\n import io.netty.handler.ssl.SslProvider;\n-import net.stzups.board.Board;\n+import net.stzups.board.BoardRoom;\n import net.stzups.board.LogFactory;\n \n import javax.net.ssl.KeyManagerFactory;\n@@ -23,7 +23,7 @@\n  * Uses netty to create an HTTP/WebSocket server on the specified port\n  */\n public class Server {\n-    private static final int HTTP_PORT = 80;\n+    private static final int HTTP_PORT = 8080;\n     private static final int HTTPS_PORT = 443;\n \n     private EventLoopGroup bossGroup;\n@@ -36,14 +36,19 @@ public ChannelFuture start() throws Exception {\n         SslContext sslContext;\n         int port;\n \n-        String keystorePath = Board.getConfig().get(\"ssl.keystore.path\");\n-        if (keystorePath != null) {//must not be null\n-            if (keystorePath.equals(\"http\")) {\n-                Board.getLogger().warning(\"Starting server using insecure http:// protocol without SSL\");\n-                sslContext = null;//otherwise sslEngine is null and program continues with unencrypted sockets\n-                port = HTTP_PORT;\n-            } else {\n-                String passphrase = Board.getConfig().get(\"ssl.passphrase\");\n+        Boolean ssl = BoardRoom.getConfig().getBoolean(\"ssl\");\n+        if (ssl == null) {\n+            throw new RuntimeException(\"Failed to set required runtime variable --ssl. Perhaps you meant to explicitly disable encrypted sockets over HTTPS using --ssl false\");\n+        }\n+\n+        if (!ssl) {\n+            BoardRoom.getLogger().warning(\"Starting server using insecure http:// protocol without SSL\");\n+            sslContext = null;//otherwise sslEngine is null and program continues with unencrypted sockets\n+            port = HTTP_PORT;\n+        } else {\n+            String keystorePath = BoardRoom.getConfig().get(\"ssl.keystore.path\");\n+            if (keystorePath != null) {//must not be null\n+                String passphrase = BoardRoom.getConfig().get(\"ssl.passphrase\");\n                 if (passphrase != null) {//can be null if value of keystore is http\n                     try (FileInputStream fileInputStream = new FileInputStream(keystorePath)) {\n                         KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n@@ -63,9 +68,9 @@ public ChannelFuture start() throws Exception {\n                 } else {\n                     throw new RuntimeException(\"Failed to specify SSL passphrase from --ssl.passphrase flag.\");\n                 }\n+            } else {\n+                throw new RuntimeException(\"Failed to set specify SSL keystore path from --ssl.keystore.path flag.\");\n             }\n-        } else {\n-            throw new RuntimeException(\"Failed to set required flag --ssl.keystore.path. Perhaps you meant to explicitly disable encrypted sockets over HTTPS using --ssl.keystore.path http\");\n         }\n \n         bossGroup = new NioEventLoopGroup();\n@@ -75,7 +80,7 @@ public ChannelFuture start() throws Exception {\n                 .channel(NioServerSocketChannel.class)\n                 .handler(new LoggingHandler(LogFactory.getLogger(\"netty\").getName(), LogLevel.DEBUG))\n                 .childHandler(new ServerInitializer(sslContext));\n-        Board.getLogger().info(\"Binding to port \" + port);\n+        BoardRoom.getLogger().info(\"Binding to port \" + port);\n         return serverBootstrap.bind(port).sync().channel().closeFuture();\n     }\n ",
    "previous_filename": "board-server/src/main/java/net/stzups/board/server/Server.java"
  },
  {
    "sha": "1dac80cb05d4ae3300d3458ff14199e1f3631257",
    "filename": "board-room/src/main/java/net/stzups/board/server/ServerInitializer.java",
    "status": "renamed",
    "additions": 11,
    "deletions": 13,
    "changes": 24,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/ServerInitializer.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/ServerInitializer.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/ServerInitializer.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -13,21 +13,20 @@\n import io.netty.handler.stream.ChunkedWriteHandler;\n import io.netty.handler.traffic.GlobalTrafficShapingHandler;\n import io.netty.handler.traffic.TrafficCounter;\n-import net.stzups.board.Board;\n-import net.stzups.board.server.websocket.protocol.PacketEncoder;\n-import net.stzups.board.server.websocket.protocol.PacketDecoder;\n-import net.stzups.board.server.http.HttpServerHandler;\n+import net.stzups.board.BoardRoom;\n+import net.stzups.board.server.websocket.protocol.MessageEncoder;\n+import net.stzups.board.server.websocket.protocol.MessageDecoder;\n \n import java.util.concurrent.Executors;\n \n /**\n- * Creates pipeline to handle HTTP requests and WebSocket connections on the same port\n+ * Creates pipeline to handle Websocket connections\n  * WebSocket connections should be made to the specified WebSocket path\n  * Connections not made to the WebSocket path go to ServerHandler\n  */\n public class ServerInitializer extends ChannelInitializer<SocketChannel> {\n     private static final String WEB_SOCKET_PATH = \"/websocket\";\n-    private static final boolean DEBUG_LOG_TRAFFIC = Board.getConfig().getBoolean(\"debug.log.traffic\", false);\n+    private static final boolean DEBUG_LOG_TRAFFIC = BoardRoom.getConfig().getBoolean(\"debug.log.traffic\", false);\n \n     private GlobalTrafficShapingHandler globalTrafficShapingHandler = new GlobalTrafficShapingHandler(Executors.newSingleThreadScheduledExecutor(), 0, 0, 1000) {\n         @Override\n@@ -36,8 +35,8 @@ protected void doAccounting(TrafficCounter counter) {\n         }\n     };\n \n-    private PacketEncoder packetEncoder = new PacketEncoder();\n-    private PacketDecoder packetDecoder = new PacketDecoder();\n+    private MessageEncoder messageEncoder = new MessageEncoder();\n+    private MessageDecoder messageDecoder = new MessageDecoder();\n     private WebSocketInitializer webSocketInitializer = new WebSocketInitializer();\n     private SslContext sslContext;\n \n@@ -47,13 +46,13 @@ protected void doAccounting(TrafficCounter counter) {\n \n     @Override\n     protected void initChannel(SocketChannel socketChannel) {\n-        Board.getLogger().info(\"New connection from \" + socketChannel.remoteAddress());\n+        BoardRoom.getLogger().info(\"New connection from \" + socketChannel.remoteAddress());\n         ChannelPipeline pipeline = socketChannel.pipeline();\n         pipeline\n                 .addLast(new ChannelDuplexHandler() {\n                     @Override\n                     public void exceptionCaught(ChannelHandlerContext channelHandlerContext, Throwable throwable) {\n-                        Board.getLogger().warning(\"Uncaught exception\");\n+                        BoardRoom.getLogger().warning(\"Uncaught exception\");\n                         throwable.printStackTrace();\n                     }\n                 })\n@@ -66,9 +65,8 @@ public void exceptionCaught(ChannelHandlerContext channelHandlerContext, Throwab\n                 .addLast(new ChunkedWriteHandler())\n                 .addLast(new WebSocketServerCompressionHandler())\n                 .addLast(new WebSocketServerProtocolHandler(WEB_SOCKET_PATH, null, true))\n-                .addLast(new HttpServerHandler())\n-                .addLast(packetEncoder)\n-                .addLast(packetDecoder)\n+                .addLast(messageEncoder)\n+                .addLast(messageDecoder)\n                 .addLast(webSocketInitializer);\n     }\n }",
    "previous_filename": "board-server/src/main/java/net/stzups/board/server/ServerInitializer.java"
  },
  {
    "sha": "933c5d708826e5f5faf86e454e11f67feacd5a96",
    "filename": "board-room/src/main/java/net/stzups/board/server/WebSocketInitializer.java",
    "status": "renamed",
    "additions": 4,
    "deletions": 8,
    "changes": 12,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/WebSocketInitializer.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/WebSocketInitializer.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/WebSocketInitializer.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -4,22 +4,18 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelInboundHandlerAdapter;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n-import io.netty.util.AttributeKey;\n-import net.stzups.board.data.objects.HttpSession;\n-import net.stzups.board.server.websocket.PacketHandler;\n-\n-import java.net.InetSocketAddress;\n+import net.stzups.board.server.websocket.MessageHandler;\n \n @ChannelHandler.Sharable\n public class WebSocketInitializer extends ChannelInboundHandlerAdapter {\n-    public static final AttributeKey<HttpSession> HTTP_SESSION_KEY = AttributeKey.valueOf(WebSocketInitializer.class, \"HTTP_SESSION\");\n+    //public static final AttributeKey<HttpSession> HTTP_SESSION_KEY = AttributeKey.valueOf(WebSocketInitializer.class, \"HTTP_SESSION\");\n \n     @Override\n     public void userEventTriggered(ChannelHandlerContext ctx, Object event) {\n         if (event instanceof WebSocketServerProtocolHandler.HandshakeComplete) {\n             WebSocketServerProtocolHandler.HandshakeComplete handshakeComplete = (WebSocketServerProtocolHandler.HandshakeComplete) event;\n-            ctx.channel().attr(HTTP_SESSION_KEY).set(HttpSession.getSession(handshakeComplete.requestHeaders(), ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress()));\n-            ctx.pipeline().addLast(new PacketHandler());\n+            //ctx.channel().attr(HTTP_SESSION_KEY).set(HttpSession.getSession(handshakeComplete.requestHeaders(), ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress()));\n+            ctx.pipeline().addLast(new MessageHandler());//todo give this a different executor https://stackoverflow.com/questions/49133447/how-can-you-safely-perform-blocking-operations-in-a-netty-channel-handler\n         }\n     }\n }",
    "previous_filename": "board-server/src/main/java/net/stzups/board/server/WebSocketInitializer.java"
  },
  {
    "sha": "3c03d406dd4dd2bad39a0a840fe09fde7ff0688a",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/Client.java",
    "status": "renamed",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/websocket/Client.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/websocket/Client.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/Client.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -1,9 +1,9 @@\n package net.stzups.board.server.websocket;\n \n import io.netty.channel.Channel;\n-import net.stzups.board.data.TokenGenerator;\n+import net.stzups.board.BoardRoom;\n import net.stzups.board.data.objects.User;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacket;\n+import net.stzups.board.server.websocket.protocol.server.ServerMessage;\n \n import java.util.ArrayList;\n import java.util.Collections;\n@@ -14,7 +14,7 @@\n     private Channel channel;\n     private short id;\n \n-    private List<ServerPacket> packets = new ArrayList<>();\n+    private List<ServerMessage> messages = new ArrayList<>();\n \n     Client(User user, Channel channel) {\n         this.user = user;\n@@ -31,26 +31,26 @@ public short getId() {\n     }\n \n     public short regenerateId() {\n-        id = (short) TokenGenerator.getRandom().nextInt(); //todo is this cast less random\n+        id = (short) BoardRoom.getRandom().nextInt(); //todo is this cast less random\n         if (id == 0) {//indicates fake client, should not be used by real clients\n             return regenerateId();\n         } else {\n             return id;\n         }\n     }\n \n-    void queuePacket(ServerPacket serverPacket) {\n-        packets.add(serverPacket);\n+    void queueMessage(ServerMessage serverMessage) {\n+        messages.add(serverMessage);\n     }\n \n-    void sendPacket(ServerPacket serverPacket) {\n-        channel.writeAndFlush(Collections.singletonList(serverPacket));\n+    void sendMessage(ServerMessage serverMessage) {\n+        channel.writeAndFlush(Collections.singletonList(serverMessage));\n     }\n \n-    void flushPackets() {\n-        if (packets.size() > 0) {\n-            channel.writeAndFlush(packets);\n-            packets = new ArrayList<>();\n+    void sendMessages() {\n+        if (messages.size() > 0) {\n+            channel.writeAndFlush(messages);\n+            messages = new ArrayList<>();\n         }\n     }\n ",
    "previous_filename": "board-server/src/main/java/net/stzups/board/server/websocket/Client.java"
  },
  {
    "sha": "dd509a36b79fdbc089a499e9ae7f8c5e0f50f413",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/MessageHandler.java",
    "status": "renamed",
    "additions": 36,
    "deletions": 38,
    "changes": 74,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/websocket/MessageHandler.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/websocket/MessageHandler.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/MessageHandler.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -2,26 +2,24 @@\n \n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n-import net.stzups.board.Board;\n+import net.stzups.board.BoardRoom;\n import net.stzups.board.data.objects.Document;\n import net.stzups.board.data.objects.User;\n import net.stzups.board.data.objects.UserSession;\n-import net.stzups.board.server.websocket.protocol.client.ClientPacket;\n-import net.stzups.board.server.websocket.protocol.client.ClientPacketCreateDocument;\n-import net.stzups.board.server.websocket.protocol.client.ClientPacketDraw;\n-import net.stzups.board.server.websocket.protocol.client.ClientPacketHandshake;\n-import net.stzups.board.server.websocket.protocol.client.ClientPacketOpenDocument;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacketAddDocument;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacketAddUser;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacketDrawClient;\n-import net.stzups.board.server.WebSocketInitializer;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacketHandshake;\n+import net.stzups.board.server.websocket.protocol.client.ClientMessage;\n+import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageCreateDocument;\n+import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageDraw;\n+import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageHandshake;\n+import net.stzups.board.server.websocket.protocol.client.messages.ClientMessageOpenDocument;\n+import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageAddDocument;\n+import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageAddUser;\n+import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageDrawClient;\n+import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageHandshake;\n \n-import java.net.InetSocketAddress;\n import java.util.HashMap;\n import java.util.Map;\n \n-public class PacketHandler extends SimpleChannelInboundHandler<ClientPacket> {\n+public class MessageHandler extends SimpleChannelInboundHandler<ClientMessage> {\n     private static Map<Document, Room> documents = new HashMap<>();\n     private Room room;\n     private Client client;\n@@ -35,22 +33,22 @@ public void channelInactive(ChannelHandlerContext ctx) {\n \n     @Override\n     public void handlerAdded(ChannelHandlerContext ctx) {\n-        System.out.println(ctx.channel().hasAttr(WebSocketInitializer.HTTP_SESSION_KEY));\n-        System.out.println(ctx.channel().attr(WebSocketInitializer.HTTP_SESSION_KEY).get());\n+        //System.out.println(ctx.channel().hasAttr(WebSocketInitializer.HTTP_SESSION_KEY));\n+        //System.out.println(ctx.channel().attr(WebSocketInitializer.HTTP_SESSION_KEY).get());\n     }\n \n     @Override\n-    protected void channelRead0(ChannelHandlerContext ctx, ClientPacket packet) {\n-        switch (packet.getPacketType()) {\n+    protected void channelRead0(ChannelHandlerContext ctx, ClientMessage message) {\n+        switch (message.getMessageType()) {\n             case DRAW: {\n-                ClientPacketDraw clientPacketDraw = (ClientPacketDraw) packet;\n-                room.getDocument().addPoints(client.getUser(), clientPacketDraw.getPoints());\n-                room.queuePacketExcept(new ServerPacketDrawClient(client, clientPacketDraw.getPoints()), client);//todo this has tons of latency\n+                ClientMessageDraw clientMessageDraw = (ClientMessageDraw) message;\n+                room.getDocument().addPoints(client.getUser(), clientMessageDraw.getPoints());\n+                room.queueMessageExcept(new ServerMessageDrawClient(client, clientMessageDraw.getPoints()), client);//todo this has tons of latency\n                 break;\n             }\n             case OPEN_DOCUMENT: {\n-                ClientPacketOpenDocument clientPacketOpenDocument = (ClientPacketOpenDocument) packet;\n-                Document document = Board.getDocument(clientPacketOpenDocument.getId());\n+                ClientMessageOpenDocument clientPacketOpenDocument = (ClientMessageOpenDocument) message;\n+                Document document = BoardRoom.getDatabase().getDocument(clientPacketOpenDocument.getId());\n                 if (document != null) {\n                     if (room != null) {\n                         room.removeClient(client);\n@@ -63,71 +61,71 @@ protected void channelRead0(ChannelHandlerContext ctx, ClientPacket packet) {\n                 break;\n             }\n             case CREATE_DOCUMENT: {\n-                ClientPacketCreateDocument clientPacketCreateDocument = (ClientPacketCreateDocument) packet;\n+                ClientMessageCreateDocument clientPacketCreateDocument = (ClientMessageCreateDocument) message;\n                 if (room != null) {\n                     room.removeClient(client);\n                 }\n                 try {\n-                    room = getRoom(Board.createDocument(client.getUser()));\n+                    room = getRoom(BoardRoom.getDatabase().createDocument(client.getUser()));\n                 } catch (Exception e) {\n                     e.printStackTrace();\n                 }\n-                client.sendPacket(new ServerPacketAddDocument(room.getDocument()));\n+                client.sendMessage(new ServerMessageAddDocument(room.getDocument()));\n                 room.addClient(client);\n                 break;\n             }\n             case HANDSHAKE: {\n-                ClientPacketHandshake clientPacketHandshake = (ClientPacketHandshake) packet;\n+                ClientMessageHandshake clientPacketHandshake = (ClientMessageHandshake) message;\n                 if (client == null) {\n                     if (clientPacketHandshake.getToken() == 0) {\n                         System.out.println(\"user authed with empty session\");\n                         client = createUserSession(ctx, null);\n                     } else {\n-                        UserSession userSession = Board.removeUserSession(clientPacketHandshake.getToken());\n+                        UserSession userSession = BoardRoom.getDatabase().removeUserSession(clientPacketHandshake.getToken());\n                         if (userSession == null) {\n                             System.out.println(\"user tried authenticating with nonexistant session\");\n                             client = createUserSession(ctx, null);\n-                        } else if (!userSession.validate(((InetSocketAddress) ctx.channel().remoteAddress()).getAddress())) {\n+                        } else if (!userSession.validate(0)) {\n                             System.out.println(\"user tried authenticating with invalid session\" + userSession);\n                             client = createUserSession(ctx, null);\n                         } else {\n                             System.out.println(\"good user session\");\n-                            User user = Board.getUser(userSession.getUserId());\n+                            User user = BoardRoom.getDatabase().getUser(userSession.getUserId());\n                             if (user == null) {\n                                 System.out.println(\"very bad user does not exist\");\n                             }\n                             client = createUserSession(ctx, user);\n                         }\n                     }\n                 }\n-                client.queuePacket(new ServerPacketAddUser(client.getUser()));\n+                client.queueMessage(new ServerMessageAddUser(client.getUser()));\n                 if (client.getUser().getOwnedDocuments().size() == 0) {\n-                    client.queuePacket(new ServerPacketAddDocument(Board.createDocument(client.getUser())));\n+                    client.queueMessage(new ServerMessageAddDocument(BoardRoom.getDatabase().createDocument(client.getUser())));\n                 } else {\n                     for (long id : client.getUser().getOwnedDocuments()) {\n-                        client.queuePacket(new ServerPacketAddDocument(Board.getDocument(id)));\n+                        client.queueMessage(new ServerMessageAddDocument(BoardRoom.getDatabase().getDocument(id)));\n                     }\n                 }\n-                client.flushPackets();\n+                client.sendMessages();\n \n                 break;\n             }\n             default:\n-                throw new UnsupportedOperationException(\"Unsupported packet type \" + packet.getPacketType() + \" sent by \" + client);\n+                throw new UnsupportedOperationException(\"Unsupported message type \" + message.getMessageType() + \" sent by \" + client);\n         }\n     }\n \n     private static Client createUserSession(ChannelHandlerContext ctx, User user) {\n         Client client;\n         if (user == null) {\n             client = new Client(new User(), ctx.channel());\n-            Board.addUser(client.getUser());\n+            BoardRoom.getDatabase().addUser(client.getUser());\n         } else {\n             client = new Client(user, ctx.channel());\n         }\n-        UserSession userSession = new UserSession(client.getUser(), ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress());\n-        Board.addUserSession(userSession);\n-        client.queuePacket(new ServerPacketHandshake(userSession));\n+        UserSession userSession = new UserSession(client.getUser(), 0);\n+        BoardRoom.getDatabase().addUserSession(userSession);\n+        client.queueMessage(new ServerMessageHandshake(userSession));\n         return client;\n     }\n ",
    "previous_filename": "board-server/src/main/java/net/stzups/board/server/websocket/PacketHandler.java"
  },
  {
    "sha": "f77cfffa2d3d879759c5f94e27efb64d7d86e015",
    "filename": "board-room/src/main/java/net/stzups/board/server/websocket/Room.java",
    "status": "renamed",
    "additions": 23,
    "deletions": 26,
    "changes": 49,
    "blob_url": "https://github.com/stzups/Board/blob/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/websocket/Room.java",
    "raw_url": "https://github.com/stzups/Board/raw/1c46199ac429bb98e036927e00dedaed0d09dc6a/board-room/src/main/java/net/stzups/board/server/websocket/Room.java",
    "contents_url": "https://api.github.com/repos/stzups/Board/contents/board-room/src/main/java/net/stzups/board/server/websocket/Room.java?ref=1c46199ac429bb98e036927e00dedaed0d09dc6a",
    "patch": "@@ -1,18 +1,15 @@\n package net.stzups.board.server.websocket;\n \n-import net.stzups.board.Board;\n+import net.stzups.board.BoardRoom;\n import net.stzups.board.data.objects.Document;\n-import net.stzups.board.data.objects.User;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacket;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacketAddClient;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacketOpenDocument;\n-import net.stzups.board.server.websocket.protocol.server.ServerPacketRemoveClient;\n+import net.stzups.board.server.websocket.protocol.server.ServerMessage;\n+import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageAddClient;\n+import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageOpenDocument;\n+import net.stzups.board.server.websocket.protocol.server.messages.ServerMessageRemoveClient;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import java.util.Timer;\n import java.util.TimerTask;\n@@ -27,7 +24,7 @@\n             public void run() {\n                 for (Room room : rooms) {\n                     for (Client client : room.clients) {\n-                        client.flushPackets();\n+                        client.sendMessages();\n                     }\n                 }\n             }\n@@ -63,11 +60,11 @@ Document getDocument() {\n     void addClient(Client client) {\n \n         //for the new client\n-        client.sendPacket(new ServerPacketOpenDocument(document));\n+        client.sendMessage(new ServerMessageOpenDocument(document));\n         //for the existing clients\n-        sendPacket(new ServerPacketAddClient(client));\n+        sendMessage(new ServerMessageAddClient(client));\n         clients.add(client);\n-        Board.getLogger().info(\"Added \" + client + \" to \" + this);\n+        BoardRoom.getLogger().info(\"Added \" + client + \" to \" + this);\n     }\n \n     /**\n@@ -77,46 +74,46 @@ void addClient(Client client) {\n      */\n     void removeClient(Client client) {\n         clients.remove(client);\n-        sendPacket(new ServerPacketRemoveClient(client));\n-        Board.getLogger().info(\"Removed \" + client + \" to \" + this);\n+        sendMessage(new ServerMessageRemoveClient(client));\n+        BoardRoom.getLogger().info(\"Removed \" + client + \" to \" + this);\n     }\n \n     /**\n-     * Send given packet to all members of the room except for the specified client\n+     * Send given message to all members of the room except for the specified client\n      *\n-     * @param serverPacket packet to send\n+     * @param serverMessage message to send\n      * @param except client to exclude\n      */\n-    void sendPacketExcept(ServerPacket serverPacket, Client except) {\n+    void sendPacketExcept(ServerMessage serverMessage, Client except) {\n         for (Client client : clients) {\n             if (except != client) {\n-                client.sendPacket(serverPacket);\n+                client.sendMessage(serverMessage);\n             }\n         }\n     }\n \n     /**\n-     * Send given packet to all clients of this room\n+     * Send given message to all clients of this room\n      *\n-     * @param serverPacket the packet to send\n+     * @param serverMessage the message to send\n      */\n-    void sendPacket(ServerPacket serverPacket) {\n+    void sendMessage(ServerMessage serverMessage) {\n         for (Client client : clients) {\n-            client.sendPacket(serverPacket);\n+            client.sendMessage(serverMessage);\n         }\n     }\n \n-    void queuePacketExcept(ServerPacket serverPacket, Client except) {\n+    void queueMessageExcept(ServerMessage serverMessage, Client except) {\n         for (Client client : clients) {\n             if (except != client) {\n-                client.queuePacket(serverPacket);\n+                client.queueMessage(serverMessage);\n             }\n         }\n     }\n \n-    void queuePacket(ServerPacket serverPacket) {\n+    void queueMessage(ServerMessage serverMessage) {\n         for (Client client : clients) {\n-            client.queuePacket(serverPacket);\n+            client.queueMessage(serverMessage);\n         }\n     }\n ",
    "previous_filename": "board-server/src/main/java/net/stzups/board/server/websocket/Room.java"
  }
]
