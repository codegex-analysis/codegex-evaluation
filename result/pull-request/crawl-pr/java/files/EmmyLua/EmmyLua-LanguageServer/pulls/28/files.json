[
  {
    "sha": "0bfa40cc011a53ddbcc58376a68a528bcdee3eb1",
    "filename": "EmmyLua-LS/src/main/kotlin/com/tang/vscode/LuaTextDocumentService.kt",
    "status": "modified",
    "additions": 127,
    "deletions": 11,
    "changes": 138,
    "blob_url": "https://github.com/EmmyLua/EmmyLua-LanguageServer/blob/e673a3a72410f849ca858e433d7ced100f0ce546/EmmyLua-LS/src/main/kotlin/com/tang/vscode/LuaTextDocumentService.kt",
    "raw_url": "https://github.com/EmmyLua/EmmyLua-LanguageServer/raw/e673a3a72410f849ca858e433d7ced100f0ce546/EmmyLua-LS/src/main/kotlin/com/tang/vscode/LuaTextDocumentService.kt",
    "contents_url": "https://api.github.com/repos/EmmyLua/EmmyLua-LanguageServer/contents/EmmyLua-LS/src/main/kotlin/com/tang/vscode/LuaTextDocumentService.kt?ref=e673a3a72410f849ca858e433d7ced100f0ce546",
    "patch": "@@ -19,6 +19,7 @@ import com.tang.intellij.lua.psi.*\n import com.tang.intellij.lua.reference.ReferencesSearch\n import com.tang.intellij.lua.search.SearchContext\n import com.tang.intellij.lua.ty.ITyFunction\n+import com.tang.intellij.lua.ty.TyKind\n import com.tang.intellij.lua.ty.findPerfectSignature\n import com.tang.intellij.lua.ty.process\n import com.tang.lsp.ILuaFile\n@@ -37,6 +38,7 @@ import org.eclipse.lsp4j.services.TextDocumentService\n import java.io.File\n import java.net.URI\n import java.util.concurrent.CompletableFuture\n+import javax.xml.soap.Text\n \n /**\n  * tangzx\n@@ -67,9 +69,17 @@ class LuaTextDocumentService(private val workspace: LuaWorkspaceService) : TextD\n         val globals = mutableListOf<TextRange>()\n         val docTypeNames = mutableListOf<TextRange>()\n         val upValues = mutableListOf<TextRange>()\n+        val notUse = mutableListOf<TextRange>()\n+        val paramHints = mutableListOf<RenderRange>()\n+        val localHints = mutableListOf<RenderRange>()\n+\n         file.psi?.acceptChildren(object : LuaRecursiveVisitor() {\n             override fun visitParamNameDef(o: LuaParamNameDef) {\n-                params.add(o.textRange)\n+                if ( ReferencesSearch.search(o).findFirst() != null) {\n+                    params.add(o.textRange)\n+                } else {\n+                    notUse.add(o.textRange)\n+                }\n             }\n \n             override fun visitFuncDef(o: LuaFuncDef) {\n@@ -88,8 +98,10 @@ class LuaTextDocumentService(private val workspace: LuaWorkspaceService) : TextD\n                 when (resolveInFile(o.name, o, context)) {\n                     is LuaParamNameDef -> params.add(o.textRange)\n                     is LuaFuncDef -> globals.add(o.textRange)\n-                    is LuaNameDef -> {} //local\n-                    is LuaLocalFuncDef -> {} //local\n+                    is LuaNameDef -> {\n+                    } //local\n+                    is LuaLocalFuncDef -> {\n+                    } //local\n                     else -> {\n                         if (o.firstChild.textMatches(Constants.WORD_SELF)) {\n                             // SELF\n@@ -102,6 +114,45 @@ class LuaTextDocumentService(private val workspace: LuaWorkspaceService) : TextD\n                     upValues.add(o.textRange)\n             }\n \n+            override fun visitLocalDef(o: LuaLocalDef) {\n+                if (o.parent is LuaExprStat) // non-complete stat\n+                    return\n+\n+                val nameList = o.nameList\n+                o.exprList?.exprList.let { _ ->\n+                    nameList?.nameDefList?.forEach {\n+                        it.nameRange?.let { nameRange ->\n+                            // 这个类型联合的名字太长对大多数情况都不是必要的，将进行必要的裁剪\n+                            val gussType = it.guessType(SearchContext.get(o.project))\n+                            val displayName = gussType.displayName\n+                            when {\n+                                displayName.startsWith(\"fun\") -> {\n+                                    localHints.add(RenderRange(nameRange.toRange(file), \"function\"))\n+                                }\n+                                displayName.startsWith('[') -> {\n+                                    // ignore\n+                                }\n+                                else -> {\n+                                    val unexpectedNameIndex = displayName.indexOf(\"|[\")\n+                                    when (unexpectedNameIndex) {\n+                                        -1 -> {\n+                                            localHints.add(RenderRange(nameRange.toRange(file), displayName))\n+                                        }\n+                                        else -> {\n+                                            localHints.add(RenderRange(nameRange.toRange(file), displayName.substring(0, unexpectedNameIndex)))\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            if ( ReferencesSearch.search(it).findFirst() == null) {\n+                                notUse.add(nameRange)\n+                            }\n+                        }\n+                    }\n+                }\n+                o.acceptChildren(this)\n+            }\n+\n             override fun visitElement(element: PsiElement) {\n                 if (element is LuaComment) {\n                     element.acceptChildren(object : LuaDocVisitor() {\n@@ -127,20 +178,85 @@ class LuaTextDocumentService(private val workspace: LuaWorkspaceService) : TextD\n                             super.visitTagAlias(o)\n                         }\n                     })\n+                } else if (element is LuaCallExpr) {\n+                    val callExpr = element\n+                    var activeParameter = 0\n+                    var nCommas = 0\n+                    val literalMap = mutableMapOf<Int, Int>()\n+                    callExpr.args.firstChild?.let { firstChild ->\n+                        var child: PsiElement? = firstChild\n+                        while (child != null) {\n+                            if (child.node.elementType == LuaTypes.COMMA) {\n+                                activeParameter++\n+                                nCommas++\n+                            } else if (child.node.elementType == LuaTypes.LITERAL_EXPR\n+                                    || child.node.elementType == LuaTypes.TABLE_EXPR\n+                                    || child.node.elementType == LuaTypes.CLOSURE_EXPR\n+                            ) {\n+                                paramHints.add(RenderRange(child.textRange.toRange(file), null))\n+                                literalMap[activeParameter] = paramHints.size - 1;\n+                            }\n+\n+                            child = child.nextSibling\n+                        }\n+                    }\n+\n+                    callExpr.guessParentType(SearchContext.get(callExpr.project)).let { parentType ->\n+                        parentType.each { ty ->\n+                            if (ty is ITyFunction) {\n+                                val active = ty.findPerfectSignature(nCommas + 1)\n+                                ty.process(Processor { sig ->\n+                                    if (sig == active) {\n+                                        var index = 0;\n+\n+                                        if (sig.colonCall && callExpr.isMethodDotCall) {\n+                                            literalMap[index]?.let {\n+                                                paramHints[it].hint = \"self\"\n+                                            }\n+                                            index++\n+                                        }\n+                                        var skipSelf = false\n+                                        sig.params.forEach { pi ->\n+                                            if (index == 0 && !skipSelf && !sig.colonCall && callExpr.isMethodColonCall) {\n+                                                skipSelf = true\n+                                            } else {\n+                                                literalMap[index]?.let {\n+                                                    paramHints[it].hint = pi.name\n+                                                }\n+                                                index++\n+                                            }\n+                                        }\n+                                    }\n+\n+                                    true\n+                                })\n+                            }\n+                        }\n+                    }\n+                    element.acceptChildren(this)\n                 } else\n                     super.visitElement(element)\n             }\n         })\n         val all = mutableListOf<Annotator>()\n         val uri = file.uri.toString()\n         if (params.isNotEmpty())\n-            all.add(Annotator(uri, params.map { it.toRange(file) }, AnnotatorType.Param))\n+            all.add(Annotator(uri, params.map { RenderRange(it.toRange(file), null) }, AnnotatorType.Param))\n         if (globals.isNotEmpty())\n-            all.add(Annotator(uri, globals.map { it.toRange(file) }, AnnotatorType.Global))\n+            all.add(Annotator(uri, globals.map { RenderRange(it.toRange(file), null) }, AnnotatorType.Global))\n         if (docTypeNames.isNotEmpty())\n-            all.add(Annotator(uri, docTypeNames.map { it.toRange(file) }, AnnotatorType.DocName))\n+            all.add(Annotator(uri, docTypeNames.map { RenderRange(it.toRange(file), null) }, AnnotatorType.DocName))\n         if (upValues.isNotEmpty())\n-            all.add(Annotator(uri, upValues.map { it.toRange(file) }, AnnotatorType.Upvalue))\n+            all.add(Annotator(uri, upValues.map { RenderRange(it.toRange(file), null) }, AnnotatorType.Upvalue))\n+        if (notUse.isNotEmpty()) {\n+            all.add(Annotator(uri, notUse.map { RenderRange(it.toRange(file), null) }, AnnotatorType.NotUse))\n+        }\n+        if (paramHints.isNotEmpty()) {\n+            all.add(Annotator(uri, paramHints, AnnotatorType.ParamHint))\n+        }\n+        if (localHints.isNotEmpty()) {\n+            all.add(Annotator(uri, localHints, AnnotatorType.LocalHint))\n+        }\n         return all\n     }\n \n@@ -150,7 +266,7 @@ class LuaTextDocumentService(private val workspace: LuaWorkspaceService) : TextD\n             if (data is JsonPrimitive) {\n                 val arr = data.asString.split(\"|\")\n                 if (arr.size >= 2) {\n-                    workspace.findLuaFile(arr[0])?.let { file->\n+                    workspace.findLuaFile(arr[0])?.let { file ->\n                         val position = arr[1].toInt()\n                         file.psi?.findElementAt(position)?.let { psi ->\n                             PsiTreeUtil.getParentOfType(psi, LuaClassMember::class.java)?.let { member ->\n@@ -240,7 +356,7 @@ class LuaTextDocumentService(private val workspace: LuaWorkspaceService) : TextD\n     }\n \n     override fun codeLens(params: CodeLensParams): CompletableFuture<MutableList<out CodeLens>> {\n-        return computeAsync { cc->\n+        return computeAsync { cc ->\n             val list = mutableListOf<CodeLens>()\n             if (VSCodeSettings.showCodeLens) {\n                 workspace.findFile(params.textDocument.uri)?.let {\n@@ -275,7 +391,7 @@ class LuaTextDocumentService(private val workspace: LuaWorkspaceService) : TextD\n             val command = Command(\"References:0\", null)\n             val uri = data?.asString\n             if (uri != null) {\n-                workspace.findFile(uri)?.let { file->\n+                workspace.findFile(uri)?.let { file ->\n                     if (file is ILuaFile) {\n                         val pos = file.getPosition(unresolved.range.start.line, unresolved.range.start.character)\n                         val target = TargetElementUtil.findTarget(file.psi, pos)\n@@ -403,7 +519,7 @@ class LuaTextDocumentService(private val workspace: LuaWorkspaceService) : TextD\n                 }\n \n                 callExpr?.guessParentType(SearchContext.get(psiFile.project))?.let { parentType ->\n-                    parentType.each { ty->\n+                    parentType.each { ty ->\n                         if (ty is ITyFunction) {\n                             val active = ty.findPerfectSignature(nCommas + 1)\n                             var idx = 0"
  },
  {
    "sha": "730fe78658b249c4ed3e81134075b9a74ba48ba7",
    "filename": "EmmyLua-LS/src/main/kotlin/com/tang/vscode/rpc.kt",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/EmmyLua/EmmyLua-LanguageServer/blob/e673a3a72410f849ca858e433d7ced100f0ce546/EmmyLua-LS/src/main/kotlin/com/tang/vscode/rpc.kt",
    "raw_url": "https://github.com/EmmyLua/EmmyLua-LanguageServer/raw/e673a3a72410f849ca858e433d7ced100f0ce546/EmmyLua-LS/src/main/kotlin/com/tang/vscode/rpc.kt",
    "contents_url": "https://api.github.com/repos/EmmyLua/EmmyLua-LanguageServer/contents/EmmyLua-LS/src/main/kotlin/com/tang/vscode/rpc.kt?ref=e673a3a72410f849ca858e433d7ced100f0ce546",
    "patch": "@@ -10,11 +10,16 @@ enum class AnnotatorType {\n     Global,\n     DocName,\n     Upvalue,\n+    NotUse,\n+    ParamHint,\n+    LocalHint\n }\n \n data class AnnotatorParams(val uri: String)\n \n-data class Annotator(val uri: String, val ranges: List<Range>, val type: AnnotatorType)\n+data class RenderRange(val range: Range, var hint: String?)\n+\n+data class Annotator(val uri: String, val ranges: List<RenderRange>, val type: AnnotatorType)\n \n data class ProgressReport(val text: String, val percent: Float)\n "
  }
]
