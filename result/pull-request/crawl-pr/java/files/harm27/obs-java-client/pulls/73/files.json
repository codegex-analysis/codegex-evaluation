[
  {
    "sha": "e85fda9689d876a5b9b36b28cb2dc5a271eaae32",
    "filename": "websocket-client/src/main/java/nl/harm27/obs/websocket/processor/MessageReceiver.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-client/src/main/java/nl/harm27/obs/websocket/processor/MessageReceiver.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-client/src/main/java/nl/harm27/obs/websocket/processor/MessageReceiver.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-client/src/main/java/nl/harm27/obs/websocket/processor/MessageReceiver.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -58,7 +58,7 @@ private void handleEvent(String eventType, String data) throws JsonProcessingExc\n             return;\n \n         BaseEvent baseEvent = (BaseEvent) objectMapper.readValue(data, eventClass);\n-        for (EventListener eventListener : listenerRegistry.getListenersForEventType(baseEvent.getEventType())) {\n+        for (EventListener eventListener : listenerRegistry.getListenersForEventType(baseEvent.getUpdateType())) {\n             CompletableFuture.runAsync(() -> eventListener.callEvent(baseEvent));\n         }\n     }"
  },
  {
    "sha": "9a3e111dc3353900af036791074c719d83f23442",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/requests/Request.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/requests/Request.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/requests/Request.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/requests/Request.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -2,6 +2,7 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import nl.harm27.obs.websocket.generator.datamodel.shared.ContentDefinition;\n+import nl.harm27.obs.websocket.generator.datamodel.shared.ConvertedProperty;\n import nl.harm27.obs.websocket.generator.datamodel.shared.Property;\n \n import java.util.List;\n@@ -10,7 +11,7 @@\n     @JsonProperty(\"params\")\n     private List<Property> params;\n \n-    public List<Property> getParams() {\n-        return filteredProperties(params);\n+    public List<ConvertedProperty> getParams() {\n+        return convertProperties(params);\n     }\n }"
  },
  {
    "sha": "c6cf87f644697d4f954bf75df2ae1bea4db2a58b",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/ContentDefinition.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/ContentDefinition.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/ContentDefinition.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/ContentDefinition.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -44,7 +44,7 @@ public String getDeprecated() {\n         return deprecated;\n     }\n \n-    public List<Property> getReturns() {\n-        return filteredProperties(returns);\n+    public List<ConvertedProperty> getReturns() {\n+        return convertProperties(returns);\n     }\n }"
  },
  {
    "sha": "6acd5b44e2819fb1f85c3eb0aa1e631dd0b20892",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/ConvertedProperty.java",
    "status": "added",
    "additions": 94,
    "deletions": 0,
    "changes": 94,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/ConvertedProperty.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/ConvertedProperty.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/ConvertedProperty.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -0,0 +1,94 @@\n+package nl.harm27.obs.websocket.generator.datamodel.shared;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static nl.harm27.obs.websocket.generator.generators.generic.StringUtil.*;\n+\n+public class ConvertedProperty {\n+    private final String name;\n+    private final List<ConvertedProperty> properties;\n+    private String type;\n+    private String description;\n+    private boolean array;\n+    private boolean optional;\n+\n+    public ConvertedProperty(String name) {\n+        this(name, false, false);\n+    }\n+\n+    public ConvertedProperty(String name, boolean array, boolean optional) {\n+        this.name = name;\n+        this.array = array;\n+        this.optional = optional;\n+        properties = new ArrayList<>();\n+    }\n+\n+    public ConvertedProperty(ConvertedProperty property, String type) {\n+        this(property.getName(), property.isArray(), property.isOptional());\n+        setDescription(property.getDescription());\n+        setType(type);\n+    }\n+\n+    public ConvertedProperty(String name, String type, String description) {\n+        this(name);\n+        setDescription(description);\n+        setType(type);\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getFieldName() {\n+        return generateValidFieldName(getName());\n+    }\n+\n+    public String getMethodName(String methodPrefix) {\n+        return generateFieldMethodName(getName(), methodPrefix);\n+    }\n+\n+    public String getClassName() {\n+        return generateValidClassName(getName());\n+    }\n+\n+    public boolean isArray() {\n+        return array;\n+    }\n+\n+    public void setArray(boolean array) {\n+        this.array = array;\n+    }\n+\n+    public boolean isOptional() {\n+        return optional;\n+    }\n+\n+    public void setOptional(boolean optional) {\n+        this.optional = optional;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public boolean isSingleLevel() {\n+        return properties.isEmpty();\n+    }\n+\n+    public List<ConvertedProperty> getProperties() {\n+        return properties;\n+    }\n+}"
  },
  {
    "sha": "f4553045f6659090ec378ad1f834d4c544a630ad",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/Definition.java",
    "status": "modified",
    "additions": 44,
    "deletions": 13,
    "changes": 57,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/Definition.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/Definition.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/Definition.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -1,29 +1,60 @@\n package nl.harm27.obs.websocket.generator.datamodel.shared;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Optional;\n \n public abstract class Definition {\n-    protected List<Property> filteredProperties(List<Property> properties) {\n+    protected List<ConvertedProperty> convertProperties(List<Property> properties) {\n         if (properties == null)\n             return new ArrayList<>();\n \n-        List<Property> filteredProperties = new ArrayList<>();\n+        List<ConvertedProperty> convertedProperties = new ArrayList<>();\n         for (Property property : properties) {\n-            if (!containsProperty(property, properties))\n-                filteredProperties.add(property);\n+            String name = property.getName();\n+            if (name.contains(\".\"))\n+                updateMultiLevelProperty(convertedProperties, property);\n+            else\n+                updateSingleLevelProperty(convertedProperties, property);\n         }\n-        return filteredProperties;\n+        return convertedProperties;\n     }\n \n-    private boolean containsProperty(Property property, List<Property> properties) {\n-        for (Property subProperty : properties) {\n-            if (subProperty.getName().equalsIgnoreCase(property.getName()))\n-                continue;\n+    private void updateSingleLevelProperty(List<ConvertedProperty> convertedProperties, Property property) {\n+        ConvertedProperty convertedProperty = getConvertedProperty(convertedProperties, property.getName());\n+        configureConvertedProperty(property, convertedProperty);\n+    }\n \n-            if (subProperty.getName().startsWith(property.getName()))\n-                return true;\n-        }\n-        return false;\n+    private void configureConvertedProperty(Property property, ConvertedProperty convertedProperty) {\n+        convertedProperty.setArray(property.isArray());\n+        convertedProperty.setDescription(property.getDescription());\n+        convertedProperty.setOptional(property.isOptional());\n+\n+        if (convertedProperty.isSingleLevel())\n+            convertedProperty.setType(property.getType());\n+    }\n+\n+    private ConvertedProperty getConvertedProperty(List<ConvertedProperty> convertedProperties, String propertyName) {\n+        Optional<ConvertedProperty> exists = convertedProperties.stream().filter(convertedProperty -> convertedProperty.getName().equalsIgnoreCase(propertyName)).findFirst();\n+        if (exists.isPresent())\n+            return exists.get();\n+\n+        ConvertedProperty convertedProperty = new ConvertedProperty(propertyName);\n+        convertedProperties.add(convertedProperty);\n+        return convertedProperty;\n+    }\n+\n+    private void updateMultiLevelProperty(List<ConvertedProperty> convertedProperties, Property property) {\n+        List<String> nameParts = Arrays.asList(property.getName().split(\"\\\\.\"));\n+        createOrUpdateMultiLevelProperty(convertedProperties, nameParts, property);\n+    }\n+\n+    private void createOrUpdateMultiLevelProperty(List<ConvertedProperty> convertedProperties, List<String> nameParts, Property property) {\n+        ConvertedProperty convertedProperty = getConvertedProperty(convertedProperties, nameParts.get(0));\n+        if (nameParts.size() == 1)\n+            configureConvertedProperty(property, convertedProperty);\n+        else\n+            createOrUpdateMultiLevelProperty(convertedProperty.getProperties(), nameParts.subList(1, nameParts.size()), property);\n     }\n }"
  },
  {
    "sha": "8e11ddc6de6c29a8ff3a45991bd1d8c75a8682c2",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/Property.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/Property.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/Property.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/shared/Property.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -11,15 +11,19 @@\n     private String description;\n \n     public String getType() {\n-        return type.replace(\" (optional)\", \"\").replace(\" (Optional)\", \"\");\n+        return type.replace(\" (optional)\", \"\").replace(\" (Optional)\", \"\").replace(\"Array<\", \"\").replace(\">\", \"\");\n     }\n \n     public boolean isOptional() {\n         return type.contains(\"(optional)\") || type.contains(\"(Optional)\");\n     }\n \n+    public boolean isArray() {\n+        return type.contains(\"Array<\");\n+    }\n+\n     public String getName() {\n-        return name;\n+        return name.replace(\".*.\", \".\");\n     }\n \n     public String getDescription() {"
  },
  {
    "sha": "313e79c1a1671ad666ef14c71ec38fe451947c17",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/types/TypeDefinition.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/types/TypeDefinition.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/types/TypeDefinition.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/datamodel/types/TypeDefinition.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -1,6 +1,7 @@\n package nl.harm27.obs.websocket.generator.datamodel.types;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import nl.harm27.obs.websocket.generator.datamodel.shared.ConvertedProperty;\n import nl.harm27.obs.websocket.generator.datamodel.shared.Definition;\n import nl.harm27.obs.websocket.generator.datamodel.shared.Property;\n \n@@ -13,8 +14,8 @@\n     @JsonProperty(\"typedefs\")\n     private List<TypeMetadata> definitions;\n \n-    public List<Property> getProperties() {\n-        return filteredProperties(properties);\n+    public List<ConvertedProperty> getProperties() {\n+        return convertProperties(properties);\n     }\n \n     private Optional<TypeMetadata> getTypeDefinition() {"
  },
  {
    "sha": "5952ca3abff5b684ce50b5edec423df1a135f2a0",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventCategoryGenerator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventCategoryGenerator.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventCategoryGenerator.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventCategoryGenerator.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -56,7 +56,7 @@ private void generateCallEventMethod(List<GeneratedEvent> generatedEvents, Strin\n         callEventMethod.annotate(Override.class);\n         JVar baseEventVar = callEventMethod.param(eventsBaseGenerator.getBaseEventClass(), \"baseEvent\");\n         JBlock body = callEventMethod.body();\n-        JSwitch eventTypeSwitch = body._switch(baseEventVar.invoke(\"getEventType\"));\n+        JSwitch eventTypeSwitch = body._switch(baseEventVar.invoke(\"getUpdateType\"));\n         for (GeneratedEvent generatedEvent : generatedEvents) {\n             JBlock caseStatementBody = eventTypeSwitch._case(eventsBaseGenerator.getEnumValue(generatedEvent.getName())).body();\n             caseStatementBody.add(JExpr.invoke(generatedEvent.getEventListenerMethod()).arg(baseEventVar.castTo(generatedEvent.getEventClass())));"
  },
  {
    "sha": "79c98624ef7e47907764bf297848523b87ef40a0",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventGenerator.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventGenerator.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventGenerator.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventGenerator.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -4,7 +4,7 @@\n import com.helger.jcodemodel.JDefinedClass;\n import com.helger.jcodemodel.JPackage;\n import nl.harm27.obs.websocket.generator.datamodel.events.Event;\n-import nl.harm27.obs.websocket.generator.datamodel.shared.Property;\n+import nl.harm27.obs.websocket.generator.datamodel.shared.ConvertedProperty;\n import nl.harm27.obs.websocket.generator.generators.generic.FunctionType;\n import nl.harm27.obs.websocket.generator.generators.generic.GenericClassGenerator;\n import nl.harm27.obs.websocket.generator.generators.generic.TypeManager;\n@@ -28,7 +28,7 @@ public GeneratedEvent generate() throws JCodeModelException, UnknownTypeExceptio\n         eventClass._extends(eventsBaseGenerator.getBaseEventClass());\n         generateJavadocForClass(eventClass.javadoc(), event.getDescription(), eventName, event.getSince(), event.getDeprecated());\n \n-        for (Property property : event.getReturns()) {\n+        for (ConvertedProperty property : event.getReturns()) {\n             generateProperty(eventClass, property, FunctionType.GETTER);\n         }\n "
  },
  {
    "sha": "73703ed2af8c30957200dd82c4c203109be2123b",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventsBaseGenerator.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventsBaseGenerator.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventsBaseGenerator.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/events/EventsBaseGenerator.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -2,7 +2,11 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.helger.jcodemodel.*;\n-import nl.harm27.obs.websocket.generator.generators.generic.*;\n+import nl.harm27.obs.websocket.generator.datamodel.shared.ConvertedProperty;\n+import nl.harm27.obs.websocket.generator.generators.generic.FunctionType;\n+import nl.harm27.obs.websocket.generator.generators.generic.GenericBaseGenerator;\n+import nl.harm27.obs.websocket.generator.generators.generic.TypeManager;\n+import nl.harm27.obs.websocket.generator.generators.generic.UnknownTypeException;\n \n import java.time.Duration;\n import java.util.List;\n@@ -28,6 +32,7 @@ public EventsBaseGenerator(JPackage basePackageModel, JPackage listenerPackageMo\n \n     public void generate() throws JCodeModelException, UnknownTypeException {\n         eventTypeEnum = generateEnum(basePackageModel, \"EventType\", eventNames, BASE_EVENT_TYPE_JAVADOC);\n+        typeManager.addApiType(eventTypeEnum.name(), eventTypeEnum);\n         generateBaseEvent();\n         generateEventListener();\n     }\n@@ -45,7 +50,7 @@ private void generateBaseEvent() throws JCodeModelException, UnknownTypeExceptio\n         baseEventClass = basePackageModel._class(JMod.ABSTRACT | JMod.PUBLIC, \"BaseEvent\");\n         generateJavadocForClass(baseEventClass.javadoc(), BASE_EVENT_JAVADOC, \"Events\");\n \n-        generateFieldForProperty(baseEventClass, FunctionType.GETTER, new Field(eventTypeEnum, \"eventType\", \"update-type\", BASE_EVENT_TYPE_JAVADOC));\n+        generateField(baseEventClass, new ConvertedProperty(\"update-type\", eventTypeEnum.name(), BASE_EVENT_TYPE_JAVADOC), FunctionType.GETTER);\n         generateTimecode(\"streamTimecode\", \"stream-timecode\", BASE_EVENT_STREAM_JAVADOC);\n         generateTimecode(\"recordingTimecode\", \"rec-timecode\", BASE_EVENT_RECORDING_JAVADOC);\n     }"
  },
  {
    "sha": "07c5c760a687a93fa2a5d671b5273bffad0d25d6",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/generic/GenericClassGenerator.java",
    "status": "modified",
    "additions": 34,
    "deletions": 63,
    "changes": 97,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/generic/GenericClassGenerator.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/generic/GenericClassGenerator.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/generic/GenericClassGenerator.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -2,14 +2,9 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.helger.jcodemodel.*;\n-import nl.harm27.obs.websocket.generator.datamodel.shared.Property;\n+import nl.harm27.obs.websocket.generator.datamodel.shared.ConvertedProperty;\n \n-import java.util.Arrays;\n-import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-import static nl.harm27.obs.websocket.generator.generators.generic.StringUtil.*;\n \n public abstract class GenericClassGenerator extends GenericGenerator {\n     protected final TypeManager typeManager;\n@@ -18,33 +13,41 @@ protected GenericClassGenerator(TypeManager typeManager) {\n         this.typeManager = typeManager;\n     }\n \n-    protected void generateProperty(JDefinedClass targetClass, Property property, FunctionType functionType) throws JCodeModelException, UnknownTypeException {\n-        List<String> propertyPath = Arrays.stream(property.getName().split(\"\\\\.\")).filter(element -> !element.equalsIgnoreCase(\"*\")).collect(Collectors.toList());\n-        if (propertyPath.size() > 1) {\n-            generateSubClassForProperty(targetClass, propertyPath, property, functionType);\n+    protected void generateProperty(JDefinedClass targetClass, ConvertedProperty property, FunctionType functionType) throws JCodeModelException, UnknownTypeException {\n+        if (property.isSingleLevel()) {\n+            generateField(targetClass, property, functionType);\n         } else {\n-            generateFieldForProperty(targetClass, functionType, new Field(property.getName(), property.getType(), property.getDescription(), property.isOptional()));\n+            generateSubClass(targetClass, property, functionType);\n         }\n     }\n \n-    protected JFieldVar generateFieldForProperty(JDefinedClass targetClass, FunctionType functionType, Field field) throws JCodeModelException, UnknownTypeException {\n-        AbstractJType fieldType;\n-        AbstractJType typeClass = field.getTypeClass();\n-        if (typeClass != null)\n-            fieldType = typeClass;\n-        else\n-            fieldType = typeManager.getType(targetClass, field.getFullName(), field.getType(), field.getDescription());\n+    private void generateSubClass(JDefinedClass targetClass, ConvertedProperty property, FunctionType functionType) throws JCodeModelException, UnknownTypeException {\n+        JDefinedClass rootClass = getRootClass(targetClass);\n+\n+        Optional<JDefinedClass> foundSubClass = rootClass.classes().stream().filter(sub -> property.getClassName().equalsIgnoreCase(sub.name())).findFirst();\n+        if (foundSubClass.isPresent())\n+            return;\n+\n+        JDefinedClass subClass = rootClass._class(JMod.PUBLIC, property.getClassName());\n+        generateField(targetClass, new ConvertedProperty(property, subClass.name()), functionType);\n+        for (ConvertedProperty convertedProperty : property.getProperties()) {\n+            generateProperty(subClass, convertedProperty, functionType);\n+        }\n+    }\n+\n+    protected JFieldVar generateField(JDefinedClass targetClass, ConvertedProperty property, FunctionType functionType) throws JCodeModelException, UnknownTypeException {\n+        AbstractJType fieldType = typeManager.getType(targetClass, property.getName(), property.getType(), property.getDescription());\n \n-        JFieldVar fieldVar = targetClass.field(JMod.PRIVATE, fieldType, generateValidFieldName(field.getName()));\n-        fieldVar.annotate(JsonProperty.class).param(field.getAnnotationName());\n+        JFieldVar fieldVar = targetClass.field(JMod.PRIVATE, fieldType, property.getFieldName());\n+        fieldVar.annotate(JsonProperty.class).param(property.getName());\n \n         if (functionType.hasGetter()) {\n-            JMethod getterMethod = generateGetter(targetClass, fieldType, fieldVar, field);\n+            JMethod getterMethod = generateGetter(targetClass, fieldType, fieldVar, property);\n             generateAdditionalGetters(targetClass, getterMethod);\n         }\n \n         if (functionType.hasSetter())\n-            generateSetter(targetClass, fieldType, fieldVar, field);\n+            generateSetter(targetClass, fieldType, fieldVar, property);\n \n         return fieldVar;\n     }\n@@ -61,69 +64,37 @@ private void generateAdditionalGetters(JDefinedClass targetClass, JMethod getter\n         }\n     }\n \n-\n     private void convertStringToList(JDefinedClass targetClass, JMethod getterMethod) {\n         JMethod method = targetClass.method(JMod.PUBLIC, typeManager.getListPrimitiveType(\"string\"), String.format(\"%sAsList\", getterMethod.name()));\n         method.body()._return(typeManager.getArraysAsList(JExpr._this().invoke(getterMethod).invoke(\"split\").arg(\"\\\\.\")));\n     }\n \n-    private void generateSetter(JDefinedClass targetClass, AbstractJType fieldType, JFieldVar fieldVar, Field field) {\n-        JMethod method = targetClass.method(JMod.PUBLIC, typeManager.getVoidType(), generateFieldMethodName(field.getName(), \"set\"));\n-        method.javadoc().add(field.getDescription());\n+    private void generateSetter(JDefinedClass targetClass, AbstractJType fieldType, JFieldVar fieldVar, ConvertedProperty property) {\n+        JMethod method = targetClass.method(JMod.PUBLIC, typeManager.getVoidType(), property.getMethodName(\"set\"));\n+        method.javadoc().add(property.getDescription());\n \n-        JVar param = method.param(fieldType, generateValidFieldName(field.getName()));\n+        JVar param = method.param(fieldType, property.getFieldName());\n         method.body().add(JExpr._this().ref(fieldVar).assign(param));\n     }\n \n-    private JMethod generateGetter(JDefinedClass targetClass, AbstractJType fieldType, JFieldVar fieldVar, Field field) {\n+    private JMethod generateGetter(JDefinedClass targetClass, AbstractJType fieldType, JFieldVar fieldVar, ConvertedProperty property) {\n         String methodPrefix = \"get\";\n         if (typeManager.isBoolean(fieldType))\n             methodPrefix = \"is\";\n \n         AbstractJType returnType = fieldType;\n-        if (field.isOptional())\n+        if (property.isOptional())\n             returnType = typeManager.getOptionalForType(fieldType);\n \n-        JMethod method = targetClass.method(JMod.PUBLIC, returnType, generateFieldMethodName(field.getName(), methodPrefix));\n-        method.javadoc().add(field.getDescription());\n+        JMethod method = targetClass.method(JMod.PUBLIC, returnType, property.getMethodName(methodPrefix));\n+        method.javadoc().add(property.getDescription());\n \n-        if (field.isOptional())\n+        if (property.isOptional())\n             method.body()._return(typeManager.getOptionalReturnForField(fieldVar));\n         else\n             method.body()._return(fieldVar);\n \n         return method;\n     }\n \n-    private void generateSubClassForProperty(JDefinedClass targetClass, List<String> propertyPath, Property property, FunctionType functionType) throws JCodeModelException, UnknownTypeException {\n-        String name = propertyPath.get(propertyPath.size() - 1);\n-\n-        JDefinedClass subClass = targetClass;\n-        for (String element : propertyPath) {\n-            if (element.equalsIgnoreCase(name))\n-                continue;\n-\n-            subClass = findSubClass(subClass, generateValidFieldName(element), functionType);\n-        }\n-\n-        if (!subClass.fields().containsKey(name)) {\n-            generateFieldForProperty(subClass, functionType, new Field(name, property.getName(), property.getType(), property.getDescription(), property.isOptional()));\n-        }\n-    }\n-\n-    private JDefinedClass findSubClass(JDefinedClass targetClass, String fieldName, FunctionType functionType) throws JCodeModelException, UnknownTypeException {\n-        String className = generateValidClassName(fieldName);\n-        JDefinedClass rootClass = getRootClass(targetClass);\n-        Optional<JDefinedClass> foundSubClass = rootClass.classes().stream().filter(sub -> className.equalsIgnoreCase(sub.name())).findFirst();\n-\n-        JDefinedClass subClass;\n-        if (foundSubClass.isEmpty()) {\n-            subClass = rootClass._class(JMod.PUBLIC, className);\n-            generateFieldForProperty(targetClass, functionType, new Field(fieldName, subClass.name(), \"\", false));\n-        } else {\n-            subClass = foundSubClass.get();\n-        }\n-\n-        return subClass;\n-    }\n }"
  },
  {
    "sha": "ec98a4f5f63a961965b2fcf815226b9c75207d63",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/generic/StringUtil.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/generic/StringUtil.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/generic/StringUtil.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/generic/StringUtil.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -30,10 +30,12 @@ private static String generateValidName(String name, char separator, boolean fir\n     }\n \n     public static String generateValidClassName(String name) {\n-        if (!name.contains(\" \"))\n-            return capitalizeFirstChar(name);\n-        else\n+        if (name.contains(\" \"))\n             return generateValidName(name, ' ', false);\n+        else if (name.contains(\"-\"))\n+            return generateValidName(name, '-', false);\n+        else\n+            return capitalizeFirstChar(name);\n     }\n \n     public static String generateValidMethodName(String name) {"
  },
  {
    "sha": "b1570313e0b96291fce9a1674bf933ee5bdbe2fc",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/requests/RequestGenerator.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/requests/RequestGenerator.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/requests/RequestGenerator.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/requests/RequestGenerator.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -3,7 +3,7 @@\n import com.fasterxml.jackson.annotation.JsonUnwrapped;\n import com.helger.jcodemodel.*;\n import nl.harm27.obs.websocket.generator.datamodel.requests.Request;\n-import nl.harm27.obs.websocket.generator.datamodel.shared.Property;\n+import nl.harm27.obs.websocket.generator.datamodel.shared.ConvertedProperty;\n import nl.harm27.obs.websocket.generator.generators.generic.FunctionType;\n import nl.harm27.obs.websocket.generator.generators.generic.StringConstants;\n import nl.harm27.obs.websocket.generator.generators.generic.TypeManager;\n@@ -55,15 +55,15 @@ private void generateSendMessageMethod(JDefinedClass builderClass, JDefinedClass\n     private JDefinedClass generateBuilderClass(Request request, JDefinedClass definedClass) throws JCodeModelException, UnknownTypeException {\n         JDefinedClass builderClass = definedClass._class(JMod.PUBLIC | JMod.STATIC, \"Builder\")._extends(requestsBaseGenerator.getBaseBuilderClass());\n         generateConstructor(builderClass);\n-        for (Property property : request.getParams()) {\n+        for (ConvertedProperty property : request.getParams()) {\n             generateProperty(builderClass, property, FunctionType.BOTH);\n         }\n         return builderClass;\n     }\n \n     private JDefinedClass generateResponseClass(Request request, JDefinedClass definedClass) throws JCodeModelException, UnknownTypeException {\n         JDefinedClass responseClass = definedClass._class(JMod.PUBLIC | JMod.STATIC, \"Response\")._extends(requestsBaseGenerator.getBaseResponseClass());\n-        for (Property property : request.getReturns()) {\n+        for (ConvertedProperty property : request.getReturns()) {\n             generateProperty(responseClass, property, FunctionType.GETTER);\n         }\n         return responseClass;"
  },
  {
    "sha": "394be97799d376ceeec53e5ed15fea6f249318af",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/requests/RequestsBaseGenerator.java",
    "status": "modified",
    "additions": 24,
    "deletions": 16,
    "changes": 40,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/requests/RequestsBaseGenerator.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/requests/RequestsBaseGenerator.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/requests/RequestsBaseGenerator.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -2,11 +2,14 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.helger.jcodemodel.*;\n+import nl.harm27.obs.websocket.generator.datamodel.shared.ConvertedProperty;\n import nl.harm27.obs.websocket.generator.generators.generic.*;\n \n import java.util.Arrays;\n import java.util.List;\n \n+import static nl.harm27.obs.websocket.generator.generators.generic.StringConstants.*;\n+\n public class RequestsBaseGenerator extends GenericBaseGenerator {\n     private final JPackage basePackageModel;\n     private final JPackage senderPackageModel;\n@@ -25,7 +28,8 @@ public RequestsBaseGenerator(JPackage basePackageModel, JPackage senderPackageMo\n     }\n \n     public void generate() throws JCodeModelException, UnknownTypeException {\n-        requestTypeEnum = generateEnum(basePackageModel, \"RequestType\", requestNames, StringConstants.BASE_REQUEST_TYPE_JAVADOC);\n+        requestTypeEnum = generateEnum(basePackageModel, \"RequestType\", requestNames, BASE_REQUEST_TYPE_JAVADOC);\n+        typeManager.addApiType(requestTypeEnum.name(), requestTypeEnum);\n         generateBaseRequest();\n         generateBaseSender();\n     }\n@@ -38,37 +42,37 @@ private void generateBaseRequest() throws JCodeModelException, UnknownTypeExcept\n \n     private void generateBuilderClass() throws JCodeModelException {\n         baseBuilderClass = basePackageModel._class(JMod.PUBLIC | JMod.ABSTRACT, \"BaseBuilder\");\n-        generateJavadocForClass(baseBuilderClass.javadoc(), StringConstants.BASE_BUILDER_JAVADOC, StringConstants.REQUESTS_URL_PART);\n+        generateJavadocForClass(baseBuilderClass.javadoc(), BASE_BUILDER_JAVADOC, REQUESTS_URL_PART);\n         generateRequestMethodHelpers(baseBuilderClass);\n     }\n \n     private void generateRequestClass() throws JCodeModelException, UnknownTypeException {\n         baseRequestClass = basePackageModel._class(JMod.PUBLIC | JMod.ABSTRACT, \"BaseRequest\");\n-        generateJavadocForClass(baseRequestClass.javadoc(), StringConstants.BASE_REQUEST_JAVADOC, StringConstants.REQUESTS_URL_PART);\n+        generateJavadocForClass(baseRequestClass.javadoc(), BASE_REQUEST_JAVADOC, REQUESTS_URL_PART);\n \n-        JFieldVar requestTypeField = generateFieldForProperty(baseRequestClass, FunctionType.GETTER, new Field(requestTypeEnum, \"requestType\", \"request-type\", StringConstants.BASE_REQUEST_TYPE_JAVADOC));\n-        JFieldVar messageIdField = generateFieldForProperty(baseRequestClass, FunctionType.GETTER, new Field(StringConstants.MESSAGE_ID_FIELD, \"message-id\", StringConstants.STRING_TYPE, StringConstants.BASE_REQUEST_MESSAGE_ID_JAVADOC));\n+        JFieldVar requestTypeField = generateField(baseRequestClass, new ConvertedProperty(\"request-type\", requestTypeEnum.name(), BASE_REQUEST_TYPE_JAVADOC), FunctionType.GETTER);\n+        JFieldVar messageIdField = generateField(baseRequestClass, new ConvertedProperty(\"message-id\", STRING_TYPE, BASE_REQUEST_MESSAGE_ID_JAVADOC), FunctionType.GETTER);\n \n         generateRequestConstructor(requestTypeField, messageIdField);\n         generateRequestMethods();\n     }\n \n     private void generateRequestMethods() {\n         JMethod getResponseTypeMethod = baseRequestClass.method(JMod.PUBLIC | JMod.ABSTRACT, typeManager.getAnyClassType(), \"getResponseType\");\n-        getResponseTypeMethod.javadoc().add(StringConstants.BASE_REQUEST_GET_RESPONSE_TYPE_METHOD_JAVADOC);\n+        getResponseTypeMethod.javadoc().add(BASE_REQUEST_GET_RESPONSE_TYPE_METHOD_JAVADOC);\n \n-        JMethod getRequestNameMethod = baseRequestClass.method(JMod.PUBLIC | JMod.ABSTRACT, typeManager.getPrimitiveType(StringConstants.STRING_TYPE), \"getRequestName\");\n-        getRequestNameMethod.javadoc().add(StringConstants.BASE_REQUEST_NAME_METHODE_JAVADOC);\n+        JMethod getRequestNameMethod = baseRequestClass.method(JMod.PUBLIC | JMod.ABSTRACT, typeManager.getPrimitiveType(STRING_TYPE), \"getRequestName\");\n+        getRequestNameMethod.javadoc().add(BASE_REQUEST_NAME_METHODE_JAVADOC);\n \n         JMethod isAuthenticationRequiredMethod = baseRequestClass.method(JMod.PUBLIC, typeManager.getPrimitiveType(\"boolean\"), \"isAuthenticationRequired\");\n-        isAuthenticationRequiredMethod.javadoc().add(StringConstants.BASE_REQUEST_AUTHENTICATION_REQUIRED_METHOD);\n+        isAuthenticationRequiredMethod.javadoc().add(BASE_REQUEST_AUTHENTICATION_REQUIRED_METHOD);\n         isAuthenticationRequiredMethod.body()._return(JExpr.lit(true));\n     }\n \n     private void generateRequestConstructor(JFieldVar requestTypeField, JFieldVar messageIdField) {\n         JMethod constructor = baseRequestClass.constructor(JMod.PUBLIC);\n         JVar requestTypeVar = constructor.param(requestTypeEnum, \"requestType\");\n-        JVar messageIdVar = constructor.param(typeManager.getPrimitiveType(StringConstants.STRING_TYPE), StringConstants.MESSAGE_ID_FIELD);\n+        JVar messageIdVar = constructor.param(typeManager.getPrimitiveType(STRING_TYPE), MESSAGE_ID_FIELD);\n \n         JBlock body = constructor.body();\n         body.add(JExpr._this().ref(requestTypeField).assign(requestTypeVar));\n@@ -77,11 +81,15 @@ private void generateRequestConstructor(JFieldVar requestTypeField, JFieldVar me\n \n     private void generateResponseClass() throws JCodeModelException, UnknownTypeException {\n         baseResponseClass = basePackageModel._class(JMod.PUBLIC | JMod.ABSTRACT, \"BaseResponse\");\n-        generateJavadocForClass(baseResponseClass.javadoc(), StringConstants.BASE_RESPONSE_JAVADOC, StringConstants.REQUESTS_URL_PART);\n-        generateFieldForProperty(baseResponseClass, FunctionType.GETTER, new Field(StringConstants.MESSAGE_ID_FIELD, \"message-id\", StringConstants.STRING_TYPE, StringConstants.BASE_RESPONSE_MESSAGE_ID_JAVADOC));\n+        generateJavadocForClass(baseResponseClass.javadoc(), StringConstants.BASE_RESPONSE_JAVADOC, REQUESTS_URL_PART);\n+\n+        generateField(baseResponseClass, new ConvertedProperty(\"message-id\", STRING_TYPE, BASE_RESPONSE_MESSAGE_ID_JAVADOC), FunctionType.GETTER);\n+\n         JDefinedClass statusEnum = generateEnum(basePackageModel, \"Status\", Arrays.asList(\"ok\", \"error\"), \"Status of the response\");\n-        generateFieldForProperty(baseResponseClass, FunctionType.GETTER, new Field(statusEnum, \"status\", \"status\", StringConstants.BASE_RESPONSE_STATUS_JAVADOC));\n-        generateOptionalField(baseResponseClass, typeManager.getPrimitiveType(StringConstants.STRING_TYPE));\n+        typeManager.addApiType(statusEnum.name(), statusEnum);\n+        generateField(baseResponseClass, new ConvertedProperty(\"status\", statusEnum.name(), BASE_RESPONSE_STATUS_JAVADOC), FunctionType.GETTER);\n+\n+        generateOptionalField(baseResponseClass, typeManager.getPrimitiveType(STRING_TYPE));\n     }\n \n     private void generateBaseSender() throws JCodeModelException {\n@@ -101,7 +109,7 @@ protected void generateOptionalField(JDefinedClass baseClass, AbstractJType type\n     private void generateRequestMethodHelpers(JDefinedClass targetClass) {\n         AbstractJClass consumerResponseClass = typeManager.getConsumer(baseResponseClass);\n         AbstractJClass consumerRequestClass = typeManager.getBiConsumer(baseRequestClass, consumerResponseClass);\n-        AbstractJClass supplierMessageIdClass = typeManager.getSupplier(typeManager.getPrimitiveType(StringConstants.STRING_TYPE));\n+        AbstractJClass supplierMessageIdClass = typeManager.getSupplier(typeManager.getPrimitiveType(STRING_TYPE));\n \n         JFieldVar requestConsumer = targetClass.field(JMod.PRIVATE, consumerRequestClass, \"requestConsumer\");\n         JFieldVar messageIdSupplier = targetClass.field(JMod.PRIVATE, supplierMessageIdClass, \"messageIdSupplier\");\n@@ -121,7 +129,7 @@ private void generateConstructor(JDefinedClass targetClass, AbstractJClass consu\n     }\n \n     private void generateMethods(JDefinedClass targetClass, AbstractJClass consumerResponseClass, JFieldVar requestConsumer, JFieldVar messageIdSupplier) {\n-        JMethod getNewMessageIdMethod = targetClass.method(JMod.PROTECTED, typeManager.getPrimitiveType(StringConstants.STRING_TYPE), \"getNewMessageId\");\n+        JMethod getNewMessageIdMethod = targetClass.method(JMod.PROTECTED, typeManager.getPrimitiveType(STRING_TYPE), \"getNewMessageId\");\n         getNewMessageIdMethod.body()._return(messageIdSupplier.invoke(\"get\"));\n \n         JMethod sendMessageMethod = targetClass.method(JMod.PROTECTED, typeManager.getVoidType(), \"sendMessage\");"
  },
  {
    "sha": "f61ed9bb4ce7edda8f4e09ed79ef7b72532a2607",
    "filename": "websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/types/TypeGenerator.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/harm27/obs-java-client/blob/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/types/TypeGenerator.java",
    "raw_url": "https://github.com/harm27/obs-java-client/raw/85dcf4949b880f967a177bda07f60e154ff73c3d/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/types/TypeGenerator.java",
    "contents_url": "https://api.github.com/repos/harm27/obs-java-client/contents/websocket-maven-plugin/src/main/java/nl/harm27/obs/websocket/generator/generators/types/TypeGenerator.java?ref=85dcf4949b880f967a177bda07f60e154ff73c3d",
    "patch": "@@ -3,7 +3,7 @@\n import com.helger.jcodemodel.JCodeModelException;\n import com.helger.jcodemodel.JDefinedClass;\n import com.helger.jcodemodel.JPackage;\n-import nl.harm27.obs.websocket.generator.datamodel.shared.Property;\n+import nl.harm27.obs.websocket.generator.datamodel.shared.ConvertedProperty;\n import nl.harm27.obs.websocket.generator.datamodel.types.TypeDefinition;\n import nl.harm27.obs.websocket.generator.generators.generic.FunctionType;\n import nl.harm27.obs.websocket.generator.generators.generic.GenericClassGenerator;\n@@ -27,7 +27,7 @@ public void generate() throws JCodeModelException, UnknownTypeException {\n         generateJavadocForClass(typeClass.javadoc(), typeDefinition.getDescription(), typeName);\n         typeManager.addApiType(typeName, typeClass);\n \n-        for (Property property : typeDefinition.getProperties()) {\n+        for (ConvertedProperty property : typeDefinition.getProperties()) {\n             generateProperty(typeClass, property, FunctionType.BOTH);\n         }\n     }"
  }
]
