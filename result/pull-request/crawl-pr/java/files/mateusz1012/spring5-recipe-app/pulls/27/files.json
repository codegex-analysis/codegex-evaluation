[
  {
    "sha": "61a04e521f0f9555cc96b50b2b3aa2d6c1485ed4",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/pom.xml",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/pom.xml",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/pom.xml?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -43,11 +43,25 @@\n             <artifactId>h2</artifactId>\n             <scope>runtime</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.webjars</groupId>\n+            <artifactId>bootstrap</artifactId>\n+            <version>4.6.0</version>\n+        </dependency>\n+<!--        <dependency>-->\n+<!--            <groupId>org.webjars</groupId>-->\n+<!--            <artifactId>jquery</artifactId>-->\n+<!--            <version>3.6.0</version>-->\n+<!--        </dependency>-->\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "7b15fa6db0f184a3139f5a72678b37f955be3a2e",
    "filename": "src/main/java/matt/project/spring5recipeapp/bootstrap/RecipeBootstrap.java",
    "status": "added",
    "additions": 217,
    "deletions": 0,
    "changes": 217,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/bootstrap/RecipeBootstrap.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/bootstrap/RecipeBootstrap.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/bootstrap/RecipeBootstrap.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,217 @@\n+package matt.project.spring5recipeapp.bootstrap;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import matt.project.spring5recipeapp.domain.*;\n+import matt.project.spring5recipeapp.repositories.CategoryRepository;\n+import matt.project.spring5recipeapp.repositories.RecipeRepository;\n+import matt.project.spring5recipeapp.repositories.UnitOfMeasureRepository;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.event.ContextRefreshedEvent;\n+import org.springframework.stereotype.Component;\n+\n+import javax.transaction.Transactional;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Slf4j\n+@Component\n+public class RecipeBootstrap implements ApplicationListener<ContextRefreshedEvent> {\n+\n+    private final CategoryRepository categoryRepository;\n+    private final RecipeRepository recipeRepository;\n+    private final UnitOfMeasureRepository unitOfMeasureRepository;\n+\n+    public RecipeBootstrap(CategoryRepository categoryRepository, RecipeRepository recipeRepository, UnitOfMeasureRepository unitOfMeasureRepository) {\n+        this.categoryRepository = categoryRepository;\n+        this.recipeRepository = recipeRepository;\n+        this.unitOfMeasureRepository = unitOfMeasureRepository;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void onApplicationEvent(ContextRefreshedEvent event) {\n+        recipeRepository.saveAll(getRecipes());\n+    }\n+\n+    private List<Recipe> getRecipes() {\n+\n+        List<Recipe> recipes = new ArrayList<>(2);\n+\n+        //get UOMs\n+        Optional<UnitOfMeasure> eachUomOptional = unitOfMeasureRepository.findByDescription(\"Each\");\n+\n+        if (!eachUomOptional.isPresent()) {\n+            throw new RuntimeException(\"Expected UOM Not Found\");\n+        }\n+\n+        Optional<UnitOfMeasure> tableSpoonUomOptional = unitOfMeasureRepository.findByDescription(\"Tablespoon\");\n+\n+        if (!tableSpoonUomOptional.isPresent()) {\n+            throw new RuntimeException(\"Expected UOM Not Found\");\n+        }\n+\n+        Optional<UnitOfMeasure> teaSpoonUomOptional = unitOfMeasureRepository.findByDescription(\"Teaspoon\");\n+\n+        if (!teaSpoonUomOptional.isPresent()) {\n+            throw new RuntimeException(\"Expected UOM Not Found\");\n+        }\n+\n+        Optional<UnitOfMeasure> dashUomOptional = unitOfMeasureRepository.findByDescription(\"Dash\");\n+\n+        if (!dashUomOptional.isPresent()) {\n+            throw new RuntimeException(\"Expected UOM Not Found\");\n+        }\n+\n+        Optional<UnitOfMeasure> pintUomOptional = unitOfMeasureRepository.findByDescription(\"Pint\");\n+\n+        if (!pintUomOptional.isPresent()) {\n+            throw new RuntimeException(\"Expected UOM Not Found\");\n+        }\n+\n+        Optional<UnitOfMeasure> cupsUomOptional = unitOfMeasureRepository.findByDescription(\"Cup\");\n+\n+        if (!cupsUomOptional.isPresent()) {\n+            throw new RuntimeException(\"Expected UOM Not Found\");\n+        }\n+\n+        //get optionals\n+        UnitOfMeasure eachUom = eachUomOptional.get();\n+        UnitOfMeasure tableSpoonUom = tableSpoonUomOptional.get();\n+        UnitOfMeasure teaSpoonUom = teaSpoonUomOptional.get();\n+        UnitOfMeasure dashUom = dashUomOptional.get();\n+        UnitOfMeasure pintUom = pintUomOptional.get();\n+        UnitOfMeasure cupsUom = cupsUomOptional.get();\n+\n+        //get Categories\n+        Optional<Category> americanCategoryOptional = categoryRepository.findByDescription(\"American\");\n+\n+        if (!americanCategoryOptional.isPresent()) {\n+            throw new RuntimeException(\"Expected UOM Not Found\");\n+        }\n+\n+        Optional<Category> mexicanCategoryOptional = categoryRepository.findByDescription(\"Mexican\");\n+\n+        if (!mexicanCategoryOptional.isPresent()) {\n+            throw new RuntimeException(\"Expected UOM Not Found\");\n+        }\n+\n+        Category americanCategory = americanCategoryOptional.get();\n+        Category mexicanCategory = mexicanCategoryOptional.get();\n+\n+        //Yummy Guac\n+        Recipe guacRecipe = new Recipe();\n+        guacRecipe.setDescription(\"Perfect Guacamole\");\n+        guacRecipe.setPrepTime(10);\n+        guacRecipe.setCookTime(0);\n+        guacRecipe.setDifficulty(Difficulty.EASY);\n+        guacRecipe.setDirections(\"1 Cut avocado, remove flesh: Cut the avocados in half. Remove seed. Score the inside of the avocado with a blunt knife and scoop out the flesh with a spoon\" +\n+                \"\\n\" +\n+                \"2 Mash with a fork: Using a fork, roughly mash the avocado. (Don't overdo it! The guacamole should be a little chunky.)\" +\n+                \"\\n\" +\n+                \"3 Add salt, lime juice, and the rest: Sprinkle with salt and lime (or lemon) juice. The acid in the lime juice will provide some balance to the richness of the avocado and will help delay the avocados from turning brown.\\n\" +\n+                \"Add the chopped onion, cilantro, black pepper, and chiles. Chili peppers vary individually in their hotness. So, start with a half of one chili pepper and add to the guacamole to your desired degree of hotness.\\n\" +\n+                \"Remember that much of this is done to taste because of the variability in the fresh ingredients. Start with this recipe and adjust to your taste.\\n\" +\n+                \"4 Cover with plastic and chill to store: Place plastic wrap on the surface of the guacamole cover it and to prevent air reaching it. (The oxygen in the air causes oxidation which will turn the guacamole brown.) Refrigerate until ready to serve.\\n\" +\n+                \"Chilling tomatoes hurts their flavor, so if you want to add chopped tomato to your guacamole, add it just before serving.\\n\" +\n+                \"\\n\" +\n+                \"\\n\" +\n+                \"Read more: http://www.simplyrecipes.com/recipes/perfect_guacamole/#ixzz4jvpiV9Sd\");\n+\n+        Notes guacNotes = new Notes();\n+        guacNotes.setRecipeNotes(\"For a very quick guacamole just take a 1/4 cup of salsa and mix it in with your mashed avocados.\\n\" +\n+                \"Feel free to experiment! One classic Mexican guacamole has pomegranate seeds and chunks of peaches in it (a Diana Kennedy favorite). Try guacamole with added pineapple, mango, or strawberries.\\n\" +\n+                \"The simplest version of guacamole is just mashed avocados with salt. Don't let the lack of availability of other ingredients stop you from making guacamole.\\n\" +\n+                \"To extend a limited supply of avocados, add either sour cream or cottage cheese to your guacamole dip. Purists may be horrified, but so what? It tastes great.\\n\" +\n+                \"\\n\" +\n+                \"\\n\" +\n+                \"Read more: http://www.simplyrecipes.com/recipes/perfect_guacamole/#ixzz4jvoun5ws\");\n+\n+        //needed for bidirectional - should be one method call\n+        guacRecipe.setNotes(guacNotes);\n+\n+        guacRecipe.addIngredient(new Ingredient(\"ripe avocados\", new BigDecimal(2), eachUom));\n+        guacRecipe.addIngredient(new Ingredient(\"Kosher salt\", new BigDecimal(\".5\"), teaSpoonUom));\n+        guacRecipe.addIngredient(new Ingredient(\"fresh lime juice or lemon juice\", new BigDecimal(2), tableSpoonUom));\n+        guacRecipe.addIngredient(new Ingredient(\"minced red onion or thinly sliced green onion\", new BigDecimal(2), tableSpoonUom));\n+        guacRecipe.addIngredient(new Ingredient(\"serrano chiles, stems and seeds removed, minced\", new BigDecimal(2), eachUom));\n+        guacRecipe.addIngredient(new Ingredient(\"Cilantro\", new BigDecimal(2), tableSpoonUom));\n+        guacRecipe.addIngredient(new Ingredient(\"freshly grated black pepper\", new BigDecimal(2), dashUom));\n+        guacRecipe.addIngredient(new Ingredient(\"ripe tomato, seeds and pulp removed, chopped\", new BigDecimal(\".5\"), eachUom));\n+\n+        guacRecipe.getCategories().add(americanCategory);\n+        guacRecipe.getCategories().add(mexicanCategory);\n+\n+        guacRecipe.setUrl(\"http://www.simplyrecipes.com/recipes/perfect_guacamole/\");\n+        guacRecipe.setServings(4);\n+        guacRecipe.setSource(\"Simply Recipes\");\n+\n+        //add to return list\n+        recipes.add(guacRecipe);\n+\n+\n+        //Yummy Tacos\n+        Recipe tacosRecipe = new Recipe();\n+        tacosRecipe.setDescription(\"Spicy Grilled Chicken Taco\");\n+        tacosRecipe.setCookTime(9);\n+        tacosRecipe.setPrepTime(20);\n+        tacosRecipe.setDifficulty(Difficulty.MODERATE);\n+\n+        tacosRecipe.setDirections(\"1 Prepare a gas or charcoal grill for medium-high, direct heat.\\n\" +\n+                \"2 Make the marinade and coat the chicken: In a large bowl, stir together the chili powder, oregano, cumin, sugar, salt, garlic and orange zest. Stir in the orange juice and olive oil to make a loose paste. Add the chicken to the bowl and toss to coat all over.\\n\" +\n+                \"Set aside to marinate while the grill heats and you prepare the rest of the toppings.\\n\" +\n+                \"\\n\" +\n+                \"\\n\" +\n+                \"3 Grill the chicken: Grill the chicken for 3 to 4 minutes per side, or until a thermometer inserted into the thickest part of the meat registers 165F. Transfer to a plate and rest for 5 minutes.\\n\" +\n+                \"4 Warm the tortillas: Place each tortilla on the grill or on a hot, dry skillet over medium-high heat. As soon as you see pockets of the air start to puff up in the tortilla, turn it with tongs and heat for a few seconds on the other side.\\n\" +\n+                \"Wrap warmed tortillas in a tea towel to keep them warm until serving.\\n\" +\n+                \"5 Assemble the tacos: Slice the chicken into strips. On each tortilla, place a small handful of arugula. Top with chicken slices, sliced avocado, radishes, tomatoes, and onion slices. Drizzle with the thinned sour cream. Serve with lime wedges.\\n\" +\n+                \"\\n\" +\n+                \"\\n\" +\n+                \"Read more: http://www.simplyrecipes.com/recipes/spicy_grilled_chicken_tacos/#ixzz4jvtrAnNm\");\n+\n+        Notes tacosNotes = new Notes();\n+        tacosNotes.setRecipeNotes(\"We have a family motto and it is this: Everything goes better in a tortilla.\\n\" +\n+                \"Any and every kind of leftover can go inside a warm tortilla, usually with a healthy dose of pickled jalapenos. I can always sniff out a late-night snacker when the aroma of tortillas heating in a hot pan on the stove comes wafting through the house.\\n\" +\n+                \"Today’s tacos are more purposeful – a deliberate meal instead of a secretive midnight snack!\\n\" +\n+                \"First, I marinate the chicken briefly in a spicy paste of ancho chile powder, oregano, cumin, and sweet orange juice while the grill is heating. You can also use this time to prepare the taco toppings.\\n\" +\n+                \"Grill the chicken, then let it rest while you warm the tortillas. Now you are ready to assemble the tacos and dig in. The whole meal comes together in about 30 minutes!\\n\" +\n+                \"\\n\" +\n+                \"\\n\" +\n+                \"Read more: http://www.simplyrecipes.com/recipes/spicy_grilled_chicken_tacos/#ixzz4jvu7Q0MJ\");\n+\n+        tacosRecipe.setNotes(tacosNotes);\n+\n+        tacosRecipe.addIngredient(new Ingredient(\"Ancho Chili Powder\", new BigDecimal(2), tableSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"Dried Oregano\", new BigDecimal(1), teaSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"Dried Cumin\", new BigDecimal(1), teaSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"Sugar\", new BigDecimal(1), teaSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"Salt\", new BigDecimal(\".5\"), teaSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"Clove of Garlic, Choppedr\", new BigDecimal(1), eachUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"finely grated orange zestr\", new BigDecimal(1), tableSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"fresh-squeezed orange juice\", new BigDecimal(3), tableSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"Olive Oil\", new BigDecimal(2), tableSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"boneless chicken thighs\", new BigDecimal(4), tableSpoonUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"small corn tortillasr\", new BigDecimal(8), eachUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"packed baby arugula\", new BigDecimal(3), cupsUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"medium ripe avocados, slic\", new BigDecimal(2), eachUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"radishes, thinly sliced\", new BigDecimal(4), eachUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"cherry tomatoes, halved\", new BigDecimal(\".5\"), pintUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"red onion, thinly sliced\", new BigDecimal(\".25\"), eachUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"Roughly chopped cilantro\", new BigDecimal(4), eachUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"cup sour cream thinned with 1/4 cup milk\", new BigDecimal(4), cupsUom));\n+        tacosRecipe.addIngredient(new Ingredient(\"lime, cut into wedges\", new BigDecimal(4), eachUom));\n+\n+        tacosRecipe.getCategories().add(americanCategory);\n+        tacosRecipe.getCategories().add(mexicanCategory);\n+\n+        tacosRecipe.setUrl(\"http://www.simplyrecipes.com/recipes/spicy_grilled_chicken_tacos/\");\n+        tacosRecipe.setServings(4);\n+        tacosRecipe.setSource(\"Simply Recipes\");\n+\n+        recipes.add(tacosRecipe);\n+        return recipes;\n+\n+    }\n+}"
  },
  {
    "sha": "86c81f021a133cec5a8fc910d8a1ba000620aff5",
    "filename": "src/main/java/matt/project/spring5recipeapp/commands/CategoryCommand.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/CategoryCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/CategoryCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/commands/CategoryCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,13 @@\n+package matt.project.spring5recipeapp.commands;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@NoArgsConstructor\n+public class CategoryCommand {\n+    private Long id;\n+    private String description;\n+}"
  },
  {
    "sha": "708f5590d3f09fa5eebc4c3a0b4fd2a432b13ca7",
    "filename": "src/main/java/matt/project/spring5recipeapp/commands/IngredientCommand.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/IngredientCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/IngredientCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/commands/IngredientCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,18 @@\n+package matt.project.spring5recipeapp.commands;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+import java.math.BigDecimal;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class IngredientCommand {\n+    private Long id;\n+    private Long recipeId;\n+    private String description;\n+    private BigDecimal amount;\n+    private UnitOfMeasureCommand uom;\n+}"
  },
  {
    "sha": "c8b5371d4b1943e5cfd26121ee545a84175831e5",
    "filename": "src/main/java/matt/project/spring5recipeapp/commands/NotesCommand.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/NotesCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/NotesCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/commands/NotesCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,13 @@\n+package matt.project.spring5recipeapp.commands;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class NotesCommand {\n+    private Long id;\n+    private String recipeNotes;\n+}"
  },
  {
    "sha": "e7753ef6f6df6e128ca2240f8befad44cfb76aa3",
    "filename": "src/main/java/matt/project/spring5recipeapp/commands/RecipeCommand.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/RecipeCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/RecipeCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/commands/RecipeCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,27 @@\n+package matt.project.spring5recipeapp.commands;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import matt.project.spring5recipeapp.domain.Difficulty;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class RecipeCommand {\n+    private Long id;\n+    private String description;\n+    private Integer prepTime;\n+    private Integer cookTime;\n+    private Integer servings;\n+    private String source;\n+    private String url;\n+    private String directions;\n+    private Set<IngredientCommand> ingredients = new HashSet<>();\n+    private Difficulty difficulty;\n+    private NotesCommand notes;\n+    private Set<CategoryCommand> categories = new HashSet<>();\n+}"
  },
  {
    "sha": "6d7d1312f5ffb7eb6412064a00ce6ecd9df1d426",
    "filename": "src/main/java/matt/project/spring5recipeapp/commands/UnitOfMeasureCommand.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/UnitOfMeasureCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/commands/UnitOfMeasureCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/commands/UnitOfMeasureCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,13 @@\n+package matt.project.spring5recipeapp.commands;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class UnitOfMeasureCommand {\n+    private Long id;\n+    private String description;\n+}"
  },
  {
    "sha": "9777130a3598fa93bf51f1f477736b8dbc2558df",
    "filename": "src/main/java/matt/project/spring5recipeapp/controllers/IndexController.java",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/controllers/IndexController.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/controllers/IndexController.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/controllers/IndexController.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -1,13 +1,27 @@\n package matt.project.spring5recipeapp.controllers;\n \n+import lombok.extern.slf4j.Slf4j;\n+import matt.project.spring5recipeapp.services.RecipeService;\n import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n+@Slf4j\n @Controller\n public class IndexController {\n \n+    private final RecipeService recipeService;\n+\n+    public IndexController(RecipeService recipeService) {\n+        this.recipeService = recipeService;\n+    }\n+\n     @RequestMapping({\"\", \"/\", \"/index\"})\n-    public String getIndexPage() {\n+    public String getIndexPage(Model model) {\n+        log.debug(\"Getting Index Page\");\n+\n+        model.addAttribute(\"recipes\", recipeService.getRecipes());\n+\n         return \"index\";\n     }\n }"
  },
  {
    "sha": "f14737e1a5c013340bfeb67e24a116921f94df76",
    "filename": "src/main/java/matt/project/spring5recipeapp/controllers/IngredientController.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/controllers/IngredientController.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/controllers/IngredientController.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/controllers/IngredientController.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,40 @@\n+package matt.project.spring5recipeapp.controllers;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import matt.project.spring5recipeapp.services.IngredientService;\n+import matt.project.spring5recipeapp.services.RecipeService;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+@Slf4j\n+@Controller\n+public class IngredientController {\n+\n+    private final RecipeService recipeService;\n+    private final IngredientService ingredientService;\n+\n+    public IngredientController(RecipeService recipeService, IngredientService ingredientService) {\n+        this.recipeService = recipeService;\n+        this.ingredientService = ingredientService;\n+    }\n+\n+    @RequestMapping(\"/recipe/{recipeId}/ingredients\")\n+    public String listIngredients(@PathVariable String recipeId, Model model) {\n+        log.debug(\"Getting ingredient list for recipe id: \" + recipeId);\n+\n+        // use command object to avoid lazy load errors in Thymeleaf.\n+        model.addAttribute(\"recipe\", recipeService.findCommandById(Long.valueOf(recipeId)));\n+\n+        return \"recipe/ingredient/list\";\n+    }\n+\n+    @RequestMapping(\"recipe/{recipeId}/ingredient/{id}/show\")\n+    public String showRecipeIngredient(@PathVariable String recipeId,\n+                                       @PathVariable String id, Model model) {\n+        model.addAttribute(\"ingredient\", ingredientService.findByRecipeIdAndIngredientId(Long.valueOf(recipeId),\n+                Long.valueOf(id)));\n+        return \"recipe/ingredient/show\";\n+    }\n+}"
  },
  {
    "sha": "5443d5a82bca49d9b7ae78309ed99849f60bf28e",
    "filename": "src/main/java/matt/project/spring5recipeapp/controllers/RecipeController.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/controllers/RecipeController.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/controllers/RecipeController.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/controllers/RecipeController.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,57 @@\n+package matt.project.spring5recipeapp.controllers;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import matt.project.spring5recipeapp.commands.RecipeCommand;\n+import matt.project.spring5recipeapp.services.RecipeService;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Slf4j\n+@Controller\n+public class RecipeController {\n+\n+    private final RecipeService recipeService;\n+\n+    public RecipeController(RecipeService recipeService) {\n+        this.recipeService = recipeService;\n+    }\n+\n+    @RequestMapping(\"/recipe/{id}/show\")\n+    public String showById(@PathVariable String id, Model model) {\n+        model.addAttribute(\"recipe\", recipeService.findById(Long.valueOf(id)));\n+\n+        return \"recipe/show\";\n+    }\n+\n+    @RequestMapping(\"recipe/new\")\n+    public String newRecipe(Model model) {\n+        model.addAttribute(\"recipe\", new RecipeCommand());\n+\n+        return \"recipe/recipeform\";\n+    }\n+\n+    @RequestMapping(\"recipe/{id}/update\")\n+    public String updateRecipe(@PathVariable String id, Model model) {\n+        model.addAttribute(\"recipe\", recipeService.findById(Long.valueOf(id)));\n+\n+        return \"recipe/recipeform\";\n+    }\n+\n+    @PostMapping(\"recipe\")\n+    public String saveOrUpdate(@ModelAttribute RecipeCommand command) {\n+        RecipeCommand savedCommand = recipeService.saveRecipeCommand(command);\n+\n+        return \"redirect:/recipe/\" + savedCommand.getId() + \"/show\";\n+    }\n+\n+    @GetMapping\n+    @RequestMapping(\"recipe/{id}/delete\")\n+    public String deleteById(@PathVariable String id) {\n+\n+        log.debug(\"Deleting id: \" + id);\n+\n+        recipeService.deleteById(Long.valueOf(id));\n+        return \"redirect:/\";\n+    }\n+}"
  },
  {
    "sha": "618c221464eb673a4dcc64ebb82df2935eb7bc59",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/CategoryCommandToCategory.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/CategoryCommandToCategory.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/CategoryCommandToCategory.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/CategoryCommandToCategory.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,26 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.CategoryCommand;\n+import matt.project.spring5recipeapp.domain.Category;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CategoryCommandToCategory implements Converter<CategoryCommand, Category> {\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public Category convert(CategoryCommand source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final Category category = new Category();\n+        category.setId(source.getId());\n+        category.setDescription(source.getDescription());\n+        return category;\n+    }\n+}"
  },
  {
    "sha": "506e994f2637c6a2a044e3dc2a77a7a34cbfa39d",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/CategoryToCategoryCommand.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/CategoryToCategoryCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/CategoryToCategoryCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/CategoryToCategoryCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,28 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.CategoryCommand;\n+import matt.project.spring5recipeapp.domain.Category;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CategoryToCategoryCommand implements Converter<Category, CategoryCommand> {\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public CategoryCommand convert(Category source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final CategoryCommand categoryCommand = new CategoryCommand();\n+\n+        categoryCommand.setId(source.getId());\n+        categoryCommand.setDescription(source.getDescription());\n+\n+        return categoryCommand;\n+    }\n+}"
  },
  {
    "sha": "45da32dafdba372a255659791638495fc08f55d6",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/IngredientCommandToIngredient.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/IngredientCommandToIngredient.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/IngredientCommandToIngredient.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/IngredientCommandToIngredient.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,32 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import matt.project.spring5recipeapp.commands.IngredientCommand;\n+import matt.project.spring5recipeapp.domain.Ingredient;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class IngredientCommandToIngredient implements Converter<IngredientCommand, Ingredient> {\n+\n+    private final UnitOfMeasureCommandToUnitOfMeasure uomConverter;\n+\n+    public IngredientCommandToIngredient(UnitOfMeasureCommandToUnitOfMeasure uomConverter) {\n+        this.uomConverter = uomConverter;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Ingredient convert(IngredientCommand source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final Ingredient ingredient = new Ingredient();\n+        ingredient.setId(source.getId());\n+        ingredient.setAmount(source.getAmount());\n+        ingredient.setDescription(source.getDescription());\n+        ingredient.setUom(uomConverter.convert(source.getUom()));\n+        return ingredient;\n+    }\n+}"
  },
  {
    "sha": "f8a1a7cca99849110ddfc4a570add8d4016a759f",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/IngredientToIngredientCommand.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/IngredientToIngredientCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/IngredientToIngredientCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/IngredientToIngredientCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,37 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.IngredientCommand;\n+import matt.project.spring5recipeapp.domain.Ingredient;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class IngredientToIngredientCommand implements Converter<Ingredient, IngredientCommand> {\n+\n+    private final UnitOfMeasureToUnitOfMeasureCommand uomConverter;\n+\n+    public IngredientToIngredientCommand(UnitOfMeasureToUnitOfMeasureCommand uomConverter) {\n+        this.uomConverter = uomConverter;\n+    }\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public IngredientCommand convert(Ingredient ingredient) {\n+        if (ingredient == null) {\n+            return null;\n+        }\n+\n+        IngredientCommand ingredientCommand = new IngredientCommand();\n+        ingredientCommand.setId(ingredient.getId());\n+        if (ingredient.getRecipe() != null) {\n+            ingredientCommand.setRecipeId(ingredient.getRecipe().getId());\n+        }\n+        ingredientCommand.setAmount(ingredient.getAmount());\n+        ingredientCommand.setDescription(ingredient.getDescription());\n+        ingredientCommand.setUom(uomConverter.convert(ingredient.getUom()));\n+        return ingredientCommand;\n+    }\n+}"
  },
  {
    "sha": "1910d3b0bb26a53d4be96bfff43b6a0faf24a163",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/NotesCommandToNotes.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/NotesCommandToNotes.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/NotesCommandToNotes.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/NotesCommandToNotes.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,26 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.NotesCommand;\n+import matt.project.spring5recipeapp.domain.Notes;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class  NotesCommandToNotes implements Converter<NotesCommand, Notes> {\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public Notes convert(NotesCommand source) {\n+        if(source == null) {\n+            return null;\n+        }\n+\n+        final Notes notes = new Notes();\n+        notes.setId(source.getId());\n+        notes.setRecipeNotes(source.getRecipeNotes());\n+        return notes;\n+    }\n+}"
  },
  {
    "sha": "ed485e829f4f09879b884e3440367dabfe396904",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/NotesToNotesCommand.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/NotesToNotesCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/NotesToNotesCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/NotesToNotesCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,26 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.NotesCommand;\n+import matt.project.spring5recipeapp.domain.Notes;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class NotesToNotesCommand implements Converter<Notes, NotesCommand> {\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public NotesCommand convert(Notes source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final NotesCommand notesCommand = new NotesCommand();\n+        notesCommand.setId(source.getId());\n+        notesCommand.setRecipeNotes(source.getRecipeNotes());\n+        return notesCommand;\n+    }\n+}"
  },
  {
    "sha": "1cbebf08bf0c759e127d798533525821448e3386",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/RecipeCommandToRecipe.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/RecipeCommandToRecipe.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/RecipeCommandToRecipe.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/RecipeCommandToRecipe.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,56 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.RecipeCommand;\n+import matt.project.spring5recipeapp.domain.Recipe;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class  RecipeCommandToRecipe implements Converter<RecipeCommand, Recipe> {\n+\n+    private final CategoryCommandToCategory categoryConverter;\n+    private final IngredientCommandToIngredient ingredientConverter;\n+    private final NotesCommandToNotes notesConverter;\n+\n+    public RecipeCommandToRecipe(CategoryCommandToCategory categoryConverter, IngredientCommandToIngredient ingredientConverter,\n+                                 NotesCommandToNotes notesConverter) {\n+        this.categoryConverter = categoryConverter;\n+        this.ingredientConverter = ingredientConverter;\n+        this.notesConverter = notesConverter;\n+    }\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public Recipe convert(RecipeCommand source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final Recipe recipe = new Recipe();\n+        recipe.setId(source.getId());\n+        recipe.setCookTime(source.getCookTime());\n+        recipe.setPrepTime(source.getPrepTime());\n+        recipe.setDescription(source.getDescription());\n+        recipe.setDifficulty(source.getDifficulty());\n+        recipe.setDirections(source.getDirections());\n+        recipe.setServings(source.getServings());\n+        recipe.setSource(source.getSource());\n+        recipe.setUrl(source.getUrl());\n+        recipe.setNotes(notesConverter.convert(source.getNotes()));\n+\n+        if (source.getCategories() != null && source.getCategories().size() > 0){\n+            source.getCategories()\n+                    .forEach( category -> recipe.getCategories().add(categoryConverter.convert(category)));\n+        }\n+\n+        if (source.getIngredients() != null && source.getIngredients().size() > 0){\n+            source.getIngredients()\n+                    .forEach(ingredient -> recipe.getIngredients().add(ingredientConverter.convert(ingredient)));\n+        }\n+\n+        return recipe;\n+    }\n+}"
  },
  {
    "sha": "64012831b928510c75a0b57997a473b23fcb320b",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/RecipeToRecipeCommand.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/RecipeToRecipeCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/RecipeToRecipeCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/RecipeToRecipeCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,56 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.RecipeCommand;\n+import matt.project.spring5recipeapp.domain.Category;\n+import matt.project.spring5recipeapp.domain.Recipe;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RecipeToRecipeCommand implements Converter<Recipe, RecipeCommand> {\n+\n+    private final CategoryToCategoryCommand categoryConverter;\n+    private final IngredientToIngredientCommand ingredientConverter;\n+    private final NotesToNotesCommand notesConverter;\n+\n+    public RecipeToRecipeCommand(CategoryToCategoryCommand categoryConverter, IngredientToIngredientCommand ingredientConverter, NotesToNotesCommand notesConverter) {\n+        this.categoryConverter = categoryConverter;\n+        this.ingredientConverter = ingredientConverter;\n+        this.notesConverter = notesConverter;\n+    }\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public RecipeCommand convert(Recipe source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final RecipeCommand command = new RecipeCommand();\n+        command.setId(source.getId());\n+        command.setCookTime(source.getCookTime());\n+        command.setPrepTime(source.getPrepTime());\n+        command.setDescription(source.getDescription());\n+        command.setDifficulty(source.getDifficulty());\n+        command.setDirections(source.getDirections());\n+        command.setServings(source.getServings());\n+        command.setSource(source.getSource());\n+        command.setUrl(source.getUrl());\n+        command.setNotes(notesConverter.convert(source.getNotes()));\n+\n+        if (source.getCategories() != null && source.getCategories().size() > 0){\n+            source.getCategories()\n+                    .forEach((Category category) -> command.getCategories().add(categoryConverter.convert(category)));\n+        }\n+\n+        if (source.getIngredients() != null && source.getIngredients().size() > 0){\n+            source.getIngredients()\n+                    .forEach(ingredient -> command.getIngredients().add(ingredientConverter.convert(ingredient)));\n+        }\n+\n+        return command;\n+    }\n+}"
  },
  {
    "sha": "936c84100e46cb6dedd814d5739559a5be692439",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/UnitOfMeasureCommandToUnitOfMeasure.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/UnitOfMeasureCommandToUnitOfMeasure.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/UnitOfMeasureCommandToUnitOfMeasure.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/UnitOfMeasureCommandToUnitOfMeasure.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,27 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.UnitOfMeasureCommand;\n+import matt.project.spring5recipeapp.domain.UnitOfMeasure;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UnitOfMeasureCommandToUnitOfMeasure implements Converter<UnitOfMeasureCommand, UnitOfMeasure> {\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public UnitOfMeasure convert(UnitOfMeasureCommand source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        final UnitOfMeasure uom = new UnitOfMeasure();\n+        uom.setId(source.getId());\n+        uom.setDescription(source.getDescription());\n+        return uom;\n+    }\n+\n+}"
  },
  {
    "sha": "e1d2a0ab6bafddd308d528c3d907ea1ab19fe41c",
    "filename": "src/main/java/matt/project/spring5recipeapp/converters/UnitOfMeasureToUnitOfMeasureCommand.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/UnitOfMeasureToUnitOfMeasureCommand.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/converters/UnitOfMeasureToUnitOfMeasureCommand.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/converters/UnitOfMeasureToUnitOfMeasureCommand.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,26 @@\n+package matt.project.spring5recipeapp.converters;\n+\n+import lombok.Synchronized;\n+import matt.project.spring5recipeapp.commands.UnitOfMeasureCommand;\n+import matt.project.spring5recipeapp.domain.UnitOfMeasure;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UnitOfMeasureToUnitOfMeasureCommand implements Converter<UnitOfMeasure, UnitOfMeasureCommand> {\n+\n+    @Synchronized\n+    @Nullable\n+    @Override\n+    public UnitOfMeasureCommand convert(UnitOfMeasure unitOfMeasure) {\n+\n+        if (unitOfMeasure != null) {\n+            final UnitOfMeasureCommand uomc = new UnitOfMeasureCommand();\n+            uomc.setId(unitOfMeasure.getId());\n+            uomc.setDescription(unitOfMeasure.getDescription());\n+            return uomc;\n+        }\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "b2c7e82c89b466b5cf03290544f87955bc2556c0",
    "filename": "src/main/java/matt/project/spring5recipeapp/domain/Category.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Category.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Category.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/domain/Category.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,23 @@\n+package matt.project.spring5recipeapp.domain;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+\n+@Data\n+@EqualsAndHashCode(exclude = {\"recipes\"})\n+@Entity\n+public class Category {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    private String description;\n+\n+    @ManyToMany(mappedBy = \"categories\")\n+    private Set<Recipe> recipes;\n+\n+}"
  },
  {
    "sha": "57072cd2521fba8dc2609286b191b94bfc3cf867",
    "filename": "src/main/java/matt/project/spring5recipeapp/domain/Difficulty.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Difficulty.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Difficulty.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/domain/Difficulty.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,6 @@\n+package matt.project.spring5recipeapp.domain;\n+\n+public enum Difficulty {\n+\n+    EASY, MODERATE, KIND_OF_HARD, HARD\n+}"
  },
  {
    "sha": "ed4105302e30f9dee834a85883be57d2c174afa8",
    "filename": "src/main/java/matt/project/spring5recipeapp/domain/Ingredient.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Ingredient.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Ingredient.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/domain/Ingredient.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,42 @@\n+package matt.project.spring5recipeapp.domain;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+import javax.persistence.*;\n+import java.math.BigDecimal;\n+\n+@Data\n+@EqualsAndHashCode(exclude = {\"recipe\"})\n+@Entity\n+public class Ingredient {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    private String description;\n+    private BigDecimal amount;\n+\n+    @OneToOne(fetch = FetchType.EAGER)\n+    private UnitOfMeasure uom;\n+\n+    @ManyToOne\n+    private Recipe recipe;\n+\n+    public Ingredient() {\n+    }\n+\n+    public Ingredient(String description, BigDecimal amount, UnitOfMeasure uom) {\n+        this.description = description;\n+        this.amount = amount;\n+        this.uom = uom;\n+    }\n+\n+    public Ingredient(String description, BigDecimal amount, UnitOfMeasure uom, Recipe recipe) {\n+        this.description = description;\n+        this.amount = amount;\n+        this.uom = uom;\n+        this.recipe = recipe;\n+    }\n+}"
  },
  {
    "sha": "47f5151fa765a5b890f46a7fe8ba0a26da7b35e3",
    "filename": "src/main/java/matt/project/spring5recipeapp/domain/Notes.java",
    "status": "modified",
    "additions": 5,
    "deletions": 23,
    "changes": 28,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Notes.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Notes.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/domain/Notes.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -1,7 +1,12 @@\n package matt.project.spring5recipeapp.domain;\n \n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n import javax.persistence.*;\n \n+@Data\n+@EqualsAndHashCode(exclude = {\"recipe\"})\n @Entity\n public class Notes {\n \n@@ -15,27 +20,4 @@\n     @Lob\n     private String recipeNotes;\n \n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-\n-    public Recipe getRecipe() {\n-        return recipe;\n-    }\n-\n-    public void setRecipe(Recipe recipe) {\n-        this.recipe = recipe;\n-    }\n-\n-    public String getRecipeNotes() {\n-        return recipeNotes;\n-    }\n-\n-    public void setRecipeNotes(String recipeNotes) {\n-        this.recipeNotes = recipeNotes;\n-    }\n }"
  },
  {
    "sha": "bc24df8e9aaa6439525c11928c2624a827eaf2ce",
    "filename": "src/main/java/matt/project/spring5recipeapp/domain/Recipe.java",
    "status": "modified",
    "additions": 28,
    "deletions": 77,
    "changes": 105,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Recipe.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/Recipe.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/domain/Recipe.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -1,8 +1,13 @@\n package matt.project.spring5recipeapp.domain;\n-//package ten można nazywać również \"model\"\n+//package ten można nazwać również \"model\" zamiast domain\n+\n+import lombok.Data;\n \n import javax.persistence.*;\n+import java.util.HashSet;\n+import java.util.Set;\n \n+@Data\n @Entity\n public class Recipe {\n \n@@ -16,93 +21,39 @@\n     private Integer servings;\n     private String source;\n     private String url;\n+\n+    @Lob\n     private String directions;\n-    //private Difficulty difficulty;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"recipe\")\n+    private Set<Ingredient> ingredients = new HashSet<>();\n \n     //Lob - large object\n     @Lob\n     private Byte[] image;\n \n+    @Enumerated(value = EnumType.STRING)\n+    private Difficulty difficulty;\n+\n     @OneToOne(cascade = CascadeType.ALL)\n     private Notes notes;\n \n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n-    public Integer getPrepTime() {\n-        return prepTime;\n-    }\n-\n-    public void setPrepTime(Integer prepTime) {\n-        this.prepTime = prepTime;\n-    }\n-\n-    public Integer getCookTime() {\n-        return cookTime;\n-    }\n-\n-    public void setCookTime(Integer cookTime) {\n-        this.cookTime = cookTime;\n-    }\n-\n-    public Integer getServings() {\n-        return servings;\n-    }\n-\n-    public void setServings(Integer servings) {\n-        this.servings = servings;\n-    }\n-\n-    public String getSource() {\n-        return source;\n-    }\n-\n-    public void setSource(String source) {\n-        this.source = source;\n-    }\n-\n-    public String getUrl() {\n-        return url;\n-    }\n-\n-    public void setUrl(String url) {\n-        this.url = url;\n-    }\n+    @ManyToMany\n+    @JoinTable(name = \"recipe_category\",\n+            joinColumns = @JoinColumn(name = \"recipe_id\"),\n+            inverseJoinColumns = @JoinColumn(name = \"category_id\"))\n+    private Set<Category> categories = new HashSet<>();\n \n-    public String getDirections() {\n-        return directions;\n-    }\n-\n-    public void setDirections(String directions) {\n-        this.directions = directions;\n-    }\n-\n-    public Byte[] getImage() {\n-        return image;\n-    }\n-\n-    public void setImage(Byte[] image) {\n-        this.image = image;\n-    }\n-\n-    public Notes getNotes() {\n-        return notes;\n+    public void setNotes(Notes notes) {\n+        if (notes != null) {\n+            this.notes = notes;\n+            notes.setRecipe(this);\n+        }\n     }\n \n-    public void setNotes(Notes notes) {\n-        this.notes = notes;\n+    public Recipe addIngredient(Ingredient ingredient) {\n+        ingredient.setRecipe(this);\n+        this.ingredients.add(ingredient);\n+        return this;\n     }\n }"
  },
  {
    "sha": "18b689fd6d285bff2d2834a0c0f034a23e4504d5",
    "filename": "src/main/java/matt/project/spring5recipeapp/domain/UnitOfMeasure.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/UnitOfMeasure.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/domain/UnitOfMeasure.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/domain/UnitOfMeasure.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,18 @@\n+package matt.project.spring5recipeapp.domain;\n+\n+import lombok.Data;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Data\n+@Entity\n+public class UnitOfMeasure {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+    private String description;\n+}"
  },
  {
    "sha": "20aba3c320efdbfd366fe2bcaa64d4b136604ac0",
    "filename": "src/main/java/matt/project/spring5recipeapp/repositories/CategoryRepository.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/repositories/CategoryRepository.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/repositories/CategoryRepository.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/repositories/CategoryRepository.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,11 @@\n+package matt.project.spring5recipeapp.repositories;\n+\n+import matt.project.spring5recipeapp.domain.Category;\n+import org.springframework.data.repository.CrudRepository;\n+\n+import java.util.Optional;\n+\n+public interface CategoryRepository extends CrudRepository<Category, Long> {\n+\n+    Optional<Category> findByDescription(String description);\n+}"
  },
  {
    "sha": "3cc537ccb81e9877da795aa9ef98211915bd0b12",
    "filename": "src/main/java/matt/project/spring5recipeapp/repositories/RecipeRepository.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/repositories/RecipeRepository.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/repositories/RecipeRepository.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/repositories/RecipeRepository.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,7 @@\n+package matt.project.spring5recipeapp.repositories;\n+\n+import matt.project.spring5recipeapp.domain.Recipe;\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface RecipeRepository extends CrudRepository<Recipe, Long> {\n+}"
  },
  {
    "sha": "9847adc5c84c4f08354017d2dc8c9b5d23582901",
    "filename": "src/main/java/matt/project/spring5recipeapp/repositories/UnitOfMeasureRepository.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/repositories/UnitOfMeasureRepository.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/repositories/UnitOfMeasureRepository.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/repositories/UnitOfMeasureRepository.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,11 @@\n+package matt.project.spring5recipeapp.repositories;\n+\n+import matt.project.spring5recipeapp.domain.UnitOfMeasure;\n+import org.springframework.data.repository.CrudRepository;\n+\n+import java.util.Optional;\n+\n+public interface UnitOfMeasureRepository extends CrudRepository<UnitOfMeasure, Long> {\n+\n+    Optional<UnitOfMeasure> findByDescription(String description);\n+}"
  },
  {
    "sha": "88400dbcee7f88943f488ca80f5a39f32f06986c",
    "filename": "src/main/java/matt/project/spring5recipeapp/services/IngredientService.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/mateusz1012/spring5-recipe-app/blob/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/services/IngredientService.java",
    "raw_url": "https://github.com/mateusz1012/spring5-recipe-app/raw/8af7d958b52b7dcb7c1f3d587849b4a77573eb23/src/main/java/matt/project/spring5recipeapp/services/IngredientService.java",
    "contents_url": "https://api.github.com/repos/mateusz1012/spring5-recipe-app/contents/src/main/java/matt/project/spring5recipeapp/services/IngredientService.java?ref=8af7d958b52b7dcb7c1f3d587849b4a77573eb23",
    "patch": "@@ -0,0 +1,8 @@\n+package matt.project.spring5recipeapp.services;\n+\n+import matt.project.spring5recipeapp.commands.IngredientCommand;\n+\n+public interface IngredientService {\n+\n+    IngredientCommand findByRecipeIdAndIngredientId(Long recipeId, Long ingredientId);\n+}"
  }
]
