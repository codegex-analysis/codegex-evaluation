[
  {
    "sha": "7b5f08c8ba38f24372cc0d574b499863b3f6542f",
    "filename": ".circleci/config.yml",
    "status": "modified",
    "additions": 21,
    "deletions": 3,
    "changes": 24,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/.circleci/config.yml",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/.circleci/config.yml",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/.circleci/config.yml?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -3,12 +3,29 @@ jobs:\n   # build with machine executor\n   build:\n     machine:\n-      enabled: true\n+      image: ubuntu-2004:202010-01\n     working_directory: ~/astminer\n     steps:\n       - checkout:\n           path: ~/astminer\n-      - run: ./gradlew build --stacktrace\n+      - run:\n+          name: Installing backend GumTree parser for Python\n+          command: |\n+            git clone https://github.com/JetBrains-Research/pythonparser pythonparser_tmp_dir\n+            pip3 install -r pythonparser_tmp_dir/requirements.txt\n+            mv pythonparser_tmp_dir/src/main/python/pythonparser/pythonparser_3.py /tmp/pythonparser\n+            chmod +x /tmp/pythonparser\n+      - run: \n+          # for using pythonparser we need /tmp folder in PATH variable\n+          name: Build\n+          command: |\n+              export PATH=$PATH:/tmp\n+              ./gradlew build --stacktrace\n+      - run:\n+          name: Test\n+          command: |\n+              export PATH=$PATH:/tmp\n+              ./gradlew test --stacktrace\n \n   # release\n   release:\n@@ -22,6 +39,7 @@ jobs:\n           path: ~/astminer\n       - run: ./gradlew bintrayUpload \"-PbranchName=$GIT_BRANCH\"\n \n+\n   release-dev:\n     machine:\n       enabled: true\n@@ -63,4 +81,4 @@ workflows:\n           filters:\n             branches:\n               only:\n-                - master-dev\n+                - master-dev\n\\ No newline at end of file"
  },
  {
    "sha": "7143621264b8a5f2b1d998cd7bb14953bc8609d7",
    "filename": "build.gradle.kts",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/build.gradle.kts",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/build.gradle.kts?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -47,9 +47,10 @@ dependencies {\n     implementation(kotlin(\"stdlib\"))\n \n     // https://mvnrepository.com/artifact/com.github.gumtreediff\n-    api(\"com.github.gumtreediff\", \"core\", \"2.1.0\")\n+    api(\"com.github.gumtreediff\", \"core\", \"2.1.2\")\n     api(\"com.github.gumtreediff\", \"client\", \"2.1.0\")\n     api(\"com.github.gumtreediff\", \"gen.jdt\", \"2.1.0\")\n+    api(\"com.github.gumtreediff\", \"gen.python\", \"2.1.2\")\n \n     // https://mvnrepository.com/artifact/io.shiftleft/fuzzyc2cpg\n     api(\"io.shiftleft\", \"fuzzyc2cpg_2.13\", \"1.2.9\")"
  },
  {
    "sha": "488bb4eb2dc4eeba47f6a40ad146b176a6380a62",
    "filename": "src/main/kotlin/astminer/examples/AllPythonMethods.kt",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/main/kotlin/astminer/examples/AllPythonMethods.kt",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/main/kotlin/astminer/examples/AllPythonMethods.kt",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/main/kotlin/astminer/examples/AllPythonMethods.kt?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,45 @@\n+package astminer.examples\n+\n+import astminer.common.model.LabeledPathContexts\n+import astminer.common.model.MethodInfo\n+import astminer.parse.python.GumTreePythonMethodSplitter\n+import astminer.parse.python.GumTreePythonNode\n+import astminer.parse.python.GumTreePythonParser\n+import astminer.paths.CsvPathStorage\n+import astminer.paths.PathMiner\n+import astminer.paths.PathRetrievalSettings\n+import astminer.paths.toPathContext\n+import java.io.File\n+\n+private fun getCsvFriendlyMethodId(methodInfo: MethodInfo<GumTreePythonNode>): String {\n+    val className = methodInfo.enclosingElementName() ?: \"\"\n+    val methodName = methodInfo.name() ?: \"unknown_method\"\n+    val parameterTypes = methodInfo.methodParameters.joinToString(\"|\") { it.name() ?: \"_\" }\n+    return \"$className.$methodName($parameterTypes)\"\n+}\n+\n+fun allPythonMethods() {\n+    val inputDir = \"src/test/resources/gumTreeMethodSplitter\"\n+\n+    val miner = PathMiner(PathRetrievalSettings(5, 5))\n+    val outputDir = \"out_examples/allPythonMethods\"\n+    val storage = CsvPathStorage(outputDir)\n+\n+    File(inputDir).forFilesWithSuffix(\".py\") { file ->\n+        // parse file\n+        val fileNode = GumTreePythonParser().parseInputStream(file.inputStream()) ?: return@forFilesWithSuffix\n+\n+        // extract method nodes\n+        val methodNodes = GumTreePythonMethodSplitter().splitIntoMethods(fileNode)\n+\n+        methodNodes.forEach { methodInfo ->\n+            // Retrieve paths from every node individually\n+            val paths = miner.retrievePaths(methodInfo.method.root)\n+            // Retrieve a method identifier\n+            val entityId = \"${file.path}::${getCsvFriendlyMethodId(methodInfo)}\"\n+            storage.store(LabeledPathContexts(entityId, paths.map { toPathContext(it) }))\n+        }\n+    }\n+\n+    storage.close()\n+}"
  },
  {
    "sha": "01571c925c7b60f43a3719ff09f9337b8884f286",
    "filename": "src/main/kotlin/astminer/parse/python/GumTreePythonMethodSplitter.kt",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/main/kotlin/astminer/parse/python/GumTreePythonMethodSplitter.kt",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/main/kotlin/astminer/parse/python/GumTreePythonMethodSplitter.kt",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/main/kotlin/astminer/parse/python/GumTreePythonMethodSplitter.kt?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,109 @@\n+package astminer.parse.python\n+\n+import astminer.common.model.ElementNode\n+import astminer.common.model.MethodInfo\n+import astminer.common.model.MethodNode\n+import astminer.common.model.ParameterNode\n+import astminer.common.model.TreeMethodSplitter\n+import astminer.common.preOrder\n+\n+class GumTreePythonMethodSplitter : TreeMethodSplitter<GumTreePythonNode> {\n+    companion object {\n+        private object TypeLabels {\n+            const val classDefinition = \"ClassDef\"\n+            const val functionDefinition = \"FunctionDef\"\n+            const val asyncFunctionDefinition = \"AsyncFunctionDef\"\n+            const val nameLoad = \"Name_Load\"\n+            const val posOnlyArgs = \"posonlyargs\"\n+            const val kwOnlyArgs = \"kwonlyargs\"\n+            const val arguments = \"arguments\"\n+            const val vararg = \"vararg\"\n+            const val kwarg = \"kwarg\"\n+            const val args = \"args\"\n+            const val arg = \"arg\"\n+\n+            const val body = \"body\"\n+            const val returnTypeLabel = \"Return\"\n+            const val passTypeLabel = \"Pass\"\n+            const val constantType = \"Constant-\"\n+\n+            val methodDefinitions = listOf(functionDefinition, asyncFunctionDefinition)\n+            val funcArgsTypesNodes = listOf(args, posOnlyArgs, kwOnlyArgs)\n+        }\n+    }\n+\n+    override fun splitIntoMethods(root: GumTreePythonNode): Collection<MethodInfo<GumTreePythonNode>> {\n+        val methodRoots = root.preOrder().filter { TypeLabels.methodDefinitions.contains(it.getTypeLabel()) }\n+        return methodRoots.map { collectMethodInfo(it as GumTreePythonNode) }\n+    }\n+\n+    private fun collectMethodInfo(methodNode: GumTreePythonNode): MethodInfo<GumTreePythonNode> {\n+        val methodReturnType = getElementType(methodNode) // no methods return types for current parser\n+        val methodName = getElementName(methodNode)\n+\n+        val classRoot = getEnclosingClass(methodNode)\n+        val className = classRoot?.let { getElementName(it) }\n+\n+        val parameters = getParameters(methodNode)\n+\n+        return MethodInfo(\n+            MethodNode(methodNode, methodReturnType, methodName),\n+            ElementNode(classRoot, className),\n+            parameters\n+        )\n+    }\n+\n+    private fun getElementName(node: GumTreePythonNode) = node\n+\n+    private fun getElementType(node: GumTreePythonNode): GumTreePythonNode? {\n+        if (node.getTypeLabel() == TypeLabels.arg) {\n+            return node.getChildOfType(TypeLabels.nameLoad) as GumTreePythonNode?\n+        }\n+        // if return statement has \"Constant-`Type`\" return value => function type is `Type`\n+        if (TypeLabels.methodDefinitions.contains(node.getTypeLabel())) {\n+            return node.getChildOfType(TypeLabels.body)?.getChildOfType(TypeLabels.returnTypeLabel)?.let {\n+                it.getChildren().firstOrNull { child ->\n+                    child.getTypeLabel().startsWith(TypeLabels.constantType)\n+                } as GumTreePythonNode?\n+            }\n+        }\n+        return null\n+    }\n+\n+    private fun getEnclosingClass(node: GumTreePythonNode): GumTreePythonNode? {\n+        if (node.getTypeLabel() == TypeLabels.classDefinition) {\n+            return node\n+        }\n+        val parentNode = node.getParent() as? GumTreePythonNode\n+        return parentNode?.let { getEnclosingClass(it) }\n+    }\n+\n+    private fun getParameters(methodNode: GumTreePythonNode): List<ParameterNode<GumTreePythonNode>> {\n+        val params = methodNode.getChildrenOfType(TypeLabels.arguments).flatMap {\n+            it.getChildren()\n+        }.filter {\n+            TypeLabels.funcArgsTypesNodes.contains(it.getTypeLabel())\n+        }.flatMap {\n+            it.getChildren()\n+        }.filter {\n+            it.getTypeLabel() == TypeLabels.arg\n+        } as MutableList\n+\n+        methodNode.getChildrenOfType(TypeLabels.arguments).flatMap {\n+            it.getChildren()\n+        }.filter {\n+            it.getTypeLabel() == TypeLabels.vararg || it.getTypeLabel() == TypeLabels.kwarg\n+        }.forEach {\n+            params.add(it)\n+        }\n+\n+        return params.map {\n+            val node = it as GumTreePythonNode\n+            ParameterNode<GumTreePythonNode>(\n+                node,\n+                getElementType(node),\n+                getElementName(node)\n+            )\n+        }.toList()\n+    }\n+}"
  },
  {
    "sha": "e696f21acd97e1d25e2d7fdb2dff767c5c37f4d5",
    "filename": "src/main/kotlin/astminer/parse/python/GumTreePythonNode.kt",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/main/kotlin/astminer/parse/python/GumTreePythonNode.kt",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/main/kotlin/astminer/parse/python/GumTreePythonNode.kt",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/main/kotlin/astminer/parse/python/GumTreePythonNode.kt?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,45 @@\n+package astminer.parse.python\n+\n+import astminer.common.model.Node\n+import com.github.gumtreediff.tree.ITree\n+import com.github.gumtreediff.tree.TreeContext\n+\n+class GumTreePythonNode(val wrappedNode: ITree, val context: TreeContext, val parent: GumTreePythonNode?) : Node {\n+    private val metadata: MutableMap<String, Any> = HashMap()\n+\n+    override fun getMetadata(key: String): Any? {\n+        return metadata[key]\n+    }\n+\n+    override fun setMetadata(key: String, value: Any) {\n+        metadata[key] = value\n+    }\n+\n+    override fun isLeaf(): Boolean {\n+        return childrenList.isEmpty()\n+    }\n+\n+    private val childrenList: MutableList<GumTreePythonNode> by lazy {\n+        wrappedNode.children.map { GumTreePythonNode(it, context, this) }.toMutableList()\n+    }\n+\n+    override fun getTypeLabel(): String {\n+        return context.getTypeLabel(wrappedNode)\n+    }\n+\n+    override fun getChildren(): List<Node> {\n+        return childrenList\n+    }\n+\n+    override fun getParent(): Node? {\n+        return parent\n+    }\n+\n+    override fun getToken(): String {\n+        return wrappedNode.label\n+    }\n+\n+    override fun removeChildrenOfType(typeLabel: String) {\n+        childrenList.removeIf { it.getTypeLabel() == typeLabel }\n+    }\n+}"
  },
  {
    "sha": "a27d590688b0139dc5283a7886a8e735e8854f3e",
    "filename": "src/main/kotlin/astminer/parse/python/GumTreePythonParser.kt",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/main/kotlin/astminer/parse/python/GumTreePythonParser.kt",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/main/kotlin/astminer/parse/python/GumTreePythonParser.kt",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/main/kotlin/astminer/parse/python/GumTreePythonParser.kt?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,26 @@\n+package astminer.parse.python\n+\n+import astminer.common.model.Parser\n+import com.github.gumtreediff.client.Run\n+import com.github.gumtreediff.gen.python.PythonTreeGenerator\n+import com.github.gumtreediff.tree.TreeContext\n+import java.io.InputStream\n+import java.io.InputStreamReader\n+\n+class GumTreePythonParser : Parser<GumTreePythonNode> {\n+    init {\n+        Run.initGenerators()\n+    }\n+\n+    override fun parseInputStream(content: InputStream): GumTreePythonNode? = try {\n+        val context = PythonTreeGenerator().generate(InputStreamReader(content))\n+        wrapGumTreeNode(context)\n+    } catch (e: Exception) {\n+        e.printStackTrace()\n+        null\n+    }\n+}\n+\n+fun wrapGumTreeNode(treeContext: TreeContext): GumTreePythonNode {\n+    return GumTreePythonNode(treeContext.root, treeContext, null)\n+}"
  },
  {
    "sha": "303e66fefc264682ef30cf7ad6c01b30a21e77d6",
    "filename": "src/test/kotlin/astminer/parse/python/GumTreeMethodSplitterTest.kt",
    "status": "added",
    "additions": 169,
    "deletions": 0,
    "changes": 169,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/test/kotlin/astminer/parse/python/GumTreeMethodSplitterTest.kt",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/test/kotlin/astminer/parse/python/GumTreeMethodSplitterTest.kt",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/test/kotlin/astminer/parse/python/GumTreeMethodSplitterTest.kt?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,169 @@\n+package astminer.parse.python\n+\n+import astminer.common.model.MethodInfo\n+import org.junit.Test\n+import java.io.File\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNotNull\n+\n+class GumTreeMethodSplitterTest {\n+    private fun parse(filename: String): GumTreePythonNode? =\n+        GumTreePythonParser().parseInputStream(File(filename).inputStream())\n+\n+    private fun splitMethods(filename: String): Collection<MethodInfo<GumTreePythonNode>> = parse(filename)?.let {\n+        GumTreePythonMethodSplitter().splitIntoMethods(it)\n+    } ?: emptyList()\n+\n+    private fun createPath(file: String) = \"src/test/resources/gumTreeMethodSplitter/$file\"\n+\n+    @Test\n+    fun methodsCountTest() {\n+        assertEquals(7, splitMethods(createPath(\"1.py\")).size)\n+        assertEquals(9, splitMethods(createPath(\"2.py\")).size)\n+        assertEquals(3, splitMethods(createPath(\"3.py\")).size)\n+        assertEquals(5, splitMethods(createPath(\"4.py\")).size)\n+    }\n+\n+    @Test\n+    fun funcNamesTest() {\n+        val realNames = setOf(\n+            \"no_args_func\", \"with_args_no_typed\", \"with_typed_args\",\n+            \"with_typed_return_no_args\", \"full_typed\",\n+            \"func_dif_args_typed_return\", \"complex_args_full_typed\"\n+        )\n+        val methodInfos = splitMethods(createPath(\"1.py\"))\n+        val parsedNames = methodInfos.map { it.name() }.toSet()\n+        assertEquals(realNames, parsedNames)\n+    }\n+\n+    @Test\n+    fun methodInfoTest1TypedArgs() {\n+        val methodInfos = splitMethods(createPath(\"1.py\"))\n+        val method = methodInfos.firstOrNull { it.name() == \"complex_args_full_typed\" }\n+        assertNotNull(method)\n+        with(method) {\n+            assertEquals(\"complex_args_full_typed\", name())\n+            assertEquals(null, this.method.returnTypeNode)\n+            assertEquals(1, methodParameters.size)\n+            assertEquals(listOf(\"node\"), methodParameters.map { it.name() }.toList())\n+            assertEquals(listOf(\"JsonNodeType\"), methodParameters.map { it.returnType() }.toList())\n+        }\n+    }\n+\n+    @Test\n+    fun methodInfoTest2ManyArgs() {\n+        val methodInfos = splitMethods(createPath(\"1.py\"))\n+        val method = methodInfos.firstOrNull { it.name() == \"func_dif_args_typed_return\" }\n+        assertNotNull(method)\n+        with(method) {\n+            assertEquals(\"func_dif_args_typed_return\", name())\n+            assertEquals(\"Constant-int\", this.method.returnTypeNode?.getTypeLabel())\n+            assertEquals(6, methodParameters.size)\n+            assertEquals(listOf(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), methodParameters.map { it.name() }.toList())\n+            assertEquals(emptyList(), methodParameters.mapNotNull { it.returnType() }.toList())\n+        }\n+    }\n+\n+    @Test\n+    fun methodInfoTest3EnclosingClass() {\n+        val methodInfos = splitMethods(createPath(\"2.py\"))\n+        val method = methodInfos.firstOrNull { it.name() == \"foo_typed\" }\n+        assertNotNull(method)\n+        with(method) {\n+            assertEquals(\"foo_typed\", name())\n+            assertEquals(\"A\", enclosingElementName())\n+            assertEquals(null, this.method.returnTypeNode)\n+            assertEquals(3, methodParameters.size)\n+            assertEquals(listOf(\"self\", \"x\", \"y\"), methodParameters.map { it.name() }.toList())\n+            assertEquals(listOf(null, \"int\", \"int\"), methodParameters.map { it.returnType() }.toList())\n+        }\n+    }\n+\n+    @Test\n+    fun methodInfoTest4EnclosingClass() {\n+        val methodInfos = splitMethods(createPath(\"2.py\"))\n+        val method = methodInfos.firstOrNull { it.name() == \"bar_typed\" }\n+        assertNotNull(method)\n+        with(method) {\n+            assertEquals(\"bar_typed\", name())\n+            assertEquals(\"C\", enclosingElementName())\n+            assertEquals(null, this.method.returnTypeNode)\n+            assertEquals(2, methodParameters.size)\n+            assertEquals(listOf(\"self\", \"x\"), methodParameters.map { it.name() }.toList())\n+            assertEquals(listOf(null, \"int\"), methodParameters.map { it.returnType() }.toList())\n+        }\n+    }\n+\n+    @Test\n+    fun methodInfoTest5AsyncDef() {\n+        val methodInfos = splitMethods(createPath(\"3.py\"))\n+        val method = methodInfos.firstOrNull { it.name() == \"async_schrecklich_typed\" }\n+        assertNotNull(method)\n+        with(method) {\n+            assertEquals(\"async_schrecklich_typed\", name())\n+            assertEquals(\"AsyncFunctionDef\", this.method.root.getTypeLabel())\n+            assertEquals(null, enclosingElementName())\n+            assertEquals(\"Constant-int\", this.method.returnTypeNode?.getTypeLabel())\n+            assertEquals(4, methodParameters.size)\n+            assertEquals(listOf(\"event\", \"x\", \"args\", \"kwargs\"), methodParameters.map { it.name() }.toList())\n+            assertEquals(listOf(\"str\", \"int\", null, null), methodParameters.map { it.returnType() }.toList())\n+        }\n+    }\n+\n+    @Test\n+    fun methodInfoTest6Doc() {\n+        val methodInfos = splitMethods(createPath(\"3.py\"))\n+        val method = methodInfos.firstOrNull { it.name() == \"async_simple_no_typed\" }\n+        assertNotNull(method)\n+        with(method) {\n+            assertEquals(\"async_simple_no_typed\", name())\n+            assertEquals(\"AsyncFunctionDef\", this.method.root.getTypeLabel())\n+            assertEquals(null, enclosingElementName())\n+            assertEquals(\n+                \"\\n    async doc\\n    \",\n+                this.method.root.getChildOfType(\"body\")\n+                    ?.getChildOfType(\"Expr\")\n+                    ?.getChildOfType(\"Constant-str\")\n+                    ?.getToken()\n+            )\n+            assertEquals(4, methodParameters.size)\n+            assertEquals(\n+                listOf(\"gh\", \"original_issue\", \"branch\", \"backport_pr_number\"),\n+                methodParameters.map { it.name() }.toList()\n+            )\n+            assertEquals(listOf(null, null, null, null), methodParameters.map { it.returnType() }.toList())\n+        }\n+    }\n+\n+    @Test\n+    fun methodInfoTest7InnerFunc() {\n+        val methodInfos = splitMethods(createPath(\"4.py\"))\n+        val method = methodInfos.firstOrNull { it.name() == \"foo_2\" }\n+        assertNotNull(method)\n+        with(method) {\n+            assertEquals(\"foo_2\", name())\n+            assertEquals(\"foo_1\", method.method.root.parent?.wrappedNode?.parent?.label)\n+            assertEquals(null, enclosingElementName())\n+            assertEquals(\"Constant-NoneType\", this.method.returnTypeNode?.getTypeLabel())\n+            assertEquals(1, methodParameters.size)\n+            assertEquals(listOf(\"c\"), methodParameters.map { it.name() }.toList())\n+            assertEquals(listOf(null), methodParameters.map { it.returnType() }.toList())\n+        }\n+    }\n+\n+    @Test\n+    fun methodInfoTest8InnerFunc() {\n+        val methodInfos = splitMethods(createPath(\"4.py\"))\n+        val method = methodInfos.firstOrNull { it.name() == \"bar_2\" }\n+        assertNotNull(method)\n+        with(method) {\n+            assertEquals(\"bar_2\", name())\n+            assertEquals(\"bar_1\", method.method.root.parent?.wrappedNode?.parent?.label)\n+            assertEquals(null, enclosingElementName())\n+            assertEquals(\"Constant-int\", this.method.returnTypeNode?.getTypeLabel())\n+            assertEquals(2, methodParameters.size)\n+            assertEquals(listOf(\"d\", \"e\"), methodParameters.map { it.name() }.toList())\n+            assertEquals(listOf(\"int\", \"int\"), methodParameters.map { it.returnType() }.toList())\n+        }\n+    }\n+}"
  },
  {
    "sha": "33eeb673b9c30be618be90029a428b5821698e18",
    "filename": "src/test/kotlin/astminer/parse/python/GumTreePythonParserTets.kt",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/test/kotlin/astminer/parse/python/GumTreePythonParserTets.kt",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/test/kotlin/astminer/parse/python/GumTreePythonParserTets.kt",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/test/kotlin/astminer/parse/python/GumTreePythonParserTets.kt?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,50 @@\n+package astminer.parse.python\n+\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import java.io.File\n+import kotlin.test.assertFalse\n+import kotlin.test.assertNotNull\n+import kotlin.test.assertNull\n+import kotlin.test.assertTrue\n+\n+class GumTreePythonParserTest {\n+    private val parser: GumTreePythonParser = GumTreePythonParser()\n+    private val testFolder = File(\".python_parser_test_tmp\")\n+    private val testFile = testFolder.resolve(\"test_file.py\")\n+\n+    @Before\n+    fun mkdir() {\n+        testFolder.mkdirs()\n+        testFile.createNewFile()\n+    }\n+\n+    @After\n+    fun rmdir() {\n+        testFolder.deleteRecursively()\n+    }\n+\n+    @Test(expected = Test.None::class)\n+    fun emptyFile() {\n+        val node = parser.parseInputStream(testFile.inputStream())\n+        assertNotNull(node)\n+        assertTrue(node.wrappedNode.children.isEmpty())\n+    }\n+\n+    @Test(expected = Test.None::class)\n+    fun invalidCode() {\n+        testFile.writeText(\"INVALID PYTHON CODE\")\n+        val node = parser.parseInputStream(testFile.inputStream())\n+        assertNull(node)\n+    }\n+\n+    @Test(expected = Test.None::class)\n+    fun goodFile() {\n+        val node = parser.parseInputStream(\n+            File(\"src/test/resources/gumTreeMethodSplitter/1.py\").inputStream()\n+        )\n+        assertNotNull(node)\n+        assertFalse(node.wrappedNode.children.isEmpty())\n+    }\n+}"
  },
  {
    "sha": "0fd6c75dceddfeb33883ad423085c86ff8a5b40b",
    "filename": "src/test/resources/gumTreeMethodSplitter/1.py",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/test/resources/gumTreeMethodSplitter/1.py",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/test/resources/gumTreeMethodSplitter/1.py",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/test/resources/gumTreeMethodSplitter/1.py?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,44 @@\n+from typing import Dict, List, Union\n+\n+\n+def no_args_func():\n+    \"\"\"\n+    :return: None\n+    \"\"\"\n+    return None\n+\n+\n+def with_args_no_typed(a, b, c, d = 42):\n+    return a, b, c\n+\n+\n+def with_typed_args(a: int, z: str):\n+    return None\n+\n+\n+def with_typed_return_no_args() -> str:\n+    x: int = 42\n+    return \"str\"\n+\n+\n+def full_typed(filename: str) -> str:\n+    \"\"\"\n+    :param filename: path to file\n+    :return: string with file content\n+    \"\"\"\n+    with open(filename, 'rt') as f:\n+        content = f.read()\n+    return content\n+\n+\n+def func_dif_args_typed_return(a, b, /, c, d, *, e, f) -> int:\n+    \"\"\"\n+    python doc\n+    \"\"\"\n+    return 42\n+\n+\n+JsonNodeType = Dict[str, Union[str, List[int]]]\n+\n+def complex_args_full_typed(node: JsonNodeType) -> JsonNodeType:\n+    return node"
  },
  {
    "sha": "3b487363f8760ca66be7719a1da1fbeaf91d6cff",
    "filename": "src/test/resources/gumTreeMethodSplitter/2.py",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/test/resources/gumTreeMethodSplitter/2.py",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/test/resources/gumTreeMethodSplitter/2.py",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/test/resources/gumTreeMethodSplitter/2.py?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,43 @@\n+class A:\n+    def __init__(self):\n+        \"\"\"\n+        outer init\n+        \"\"\"\n+        pass\n+\n+\n+    def __add__(self, other):\n+        pass\n+\n+\n+    def foo(self, x):\n+        return x * x\n+\n+\n+    def foo_typed(self, x: int, y: int) -> int:\n+        return x * y\n+\n+\n+    class B:\n+        def __init__(self):\n+            \"\"\"\n+            inner init\n+            \"\"\"\n+            pass\n+\n+\n+        def __get__(self, instance, owner):\n+            pass\n+\n+\n+        def foo_typed(self, x: int, y: int) -> int:\n+            return x + y\n+\n+\n+        class C:\n+\n+            def __init__(self):\n+                pass\n+\n+            def bar_typed(self, x: int) -> int:\n+                return x"
  },
  {
    "sha": "254dc280a1c16a938bf41974ae1e1b7c68802e23",
    "filename": "src/test/resources/gumTreeMethodSplitter/3.py",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/test/resources/gumTreeMethodSplitter/3.py",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/test/resources/gumTreeMethodSplitter/3.py",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/test/resources/gumTreeMethodSplitter/3.py?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,16 @@\n+\n+async def async_simple_no_typed(gh, original_issue, branch, backport_pr_number):\n+    \"\"\"\n+    async doc\n+    \"\"\"\n+    pass\n+\n+\n+@router.register(\"pull_request\", action=\"opened\")\n+@router.register(\"pull_request\", action=\"edited\")\n+async def async_schrecklich_typed(event: str, x: int , *args, **kwargs) -> int:\n+\n+    def inner():\n+        pass\n+\n+    return 42"
  },
  {
    "sha": "e13209baf8549ccc805d3ab1ba7e87a191fc452e",
    "filename": "src/test/resources/gumTreeMethodSplitter/4.py",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/ivanrybin/astminer/blob/53256f07721d8285da95e0447dfcfb28d5509276/src/test/resources/gumTreeMethodSplitter/4.py",
    "raw_url": "https://github.com/ivanrybin/astminer/raw/53256f07721d8285da95e0447dfcfb28d5509276/src/test/resources/gumTreeMethodSplitter/4.py",
    "contents_url": "https://api.github.com/repos/ivanrybin/astminer/contents/src/test/resources/gumTreeMethodSplitter/4.py?ref=53256f07721d8285da95e0447dfcfb28d5509276",
    "patch": "@@ -0,0 +1,22 @@\n+def foo(a: int):\n+\n+    def foo_1(b):\n+\n+        def foo_2(c):\n+            return None\n+\n+        return foo_2(b)\n+\n+\n+    def bar_1(b: int, c: int) -> int:\n+\n+        def bar_2(d: int, e: int) -> int:\n+            return 42\n+\n+        return bar_2(b, c)\n+\n+\n+    foo_1(a)\n+    bar_1(a, a)\n+\n+    return None"
  }
]
