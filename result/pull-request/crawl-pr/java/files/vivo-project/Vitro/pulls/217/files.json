[
  {
    "sha": "a8fd8aa2fdb4e0178cb930e2ecb27619b255856d",
    "filename": "api/src/main/java/edu/cornell/mannlib/vitro/webapp/application/ApplicationSetup.java",
    "status": "modified",
    "additions": 2,
    "deletions": 13,
    "changes": 15,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/application/ApplicationSetup.java",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/application/ApplicationSetup.java",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/api/src/main/java/edu/cornell/mannlib/vitro/webapp/application/ApplicationSetup.java?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -24,7 +24,6 @@\n  */\n public class ApplicationSetup implements ServletContextListener {\n \tprivate static final String APPLICATION_SETUP_PATH = \"config/applicationSetup.n3\";\n-\tprivate static final String APPLICATION_SETUP_DEFAULT_PATH = \"config/default.applicationSetup.n3\";\n \n \tprivate ServletContext ctx;\n \tprivate StartupStatus ss;\n@@ -46,8 +45,6 @@ public void contextInitialized(ServletContextEvent sce) {\n \t\t\tthis.vitroHomeDir = VitroHomeDirectory.find(ctx);\n \t\t\tss.info(this, vitroHomeDir.getDiscoveryMessage());\n \n-\t\t\tthis.vitroHomeDir.populate();\n-\n \t\t\tlocateApplicationConfigFile();\n \t\t\tloadApplicationConfigFile();\n \t\t\tcreateConfigurationBeanLoader();\n@@ -66,19 +63,11 @@ public void contextInitialized(ServletContextEvent sce) {\n \tprivate void locateApplicationConfigFile() {\n \t\tPath path = this.vitroHomeDir.getPath().resolve(APPLICATION_SETUP_PATH);\n \n-\t\tif (!Files.exists(path) || !Files.isReadable(path)) {\n-\t\t\tpath = this.vitroHomeDir.getPath().resolve(APPLICATION_SETUP_DEFAULT_PATH);\n-\t\t}\n-\n \t\tif (!Files.exists(path)) {\n-\t\t\tthrow new IllegalStateException(\"Neither '\" + APPLICATION_SETUP_PATH + \"' nor '\" +\n-\t\t\t\t\tAPPLICATION_SETUP_DEFAULT_PATH + \"' were found in \" +\n-\t\t\t\t\tthis.vitroHomeDir.getPath());\n+\t\t\tthrow new IllegalStateException(\"'\" + path + \"' does not exist.\");\n \t\t}\n \t\tif (!Files.isReadable(path)) {\n-\t\t\tthrow new IllegalStateException(\"No readable '\" + APPLICATION_SETUP_PATH + \"' nor '\" +\n-\t\t\t\t\tAPPLICATION_SETUP_DEFAULT_PATH + \"' files were found in \" +\n-\t\t\t\t\tthis.vitroHomeDir.getPath());\n+\t\t\tthrow new IllegalStateException(\"Can't read '\" + path + \"'\");\n \t\t}\n \t\tthis.configFile = path;\n \t}"
  },
  {
    "sha": "b55f9d87ed1063dcdd614595df525819645bd319",
    "filename": "api/src/main/java/edu/cornell/mannlib/vitro/webapp/application/VitroHomeDirectory.java",
    "status": "modified",
    "additions": 19,
    "deletions": 242,
    "changes": 261,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/application/VitroHomeDirectory.java",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/application/VitroHomeDirectory.java",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/api/src/main/java/edu/cornell/mannlib/vitro/webapp/application/VitroHomeDirectory.java?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -4,46 +4,25 @@\n \n import static edu.cornell.mannlib.vitro.webapp.application.BuildProperties.WEBAPP_PATH_BUILD_PROPERTIES;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStreamWriter;\n-import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n \n+import javax.naming.InitialContext;\n import javax.servlet.ServletContext;\n \n-import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n-import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n-import org.apache.commons.io.FileUtils;\n-import org.apache.commons.io.IOUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n-import edu.cornell.mannlib.vitro.webapp.config.ContextProperties;\n-\n /**\n- * Encapsulates some of the info relating to and initializes the Vitro home directory.\n+ * Encapsulates some of the info relating to the Vitro home directory.\n  */\n public class VitroHomeDirectory {\n \tprivate static final Log log = LogFactory.getLog(VitroHomeDirectory.class);\n \n-\tprivate static final String DIGEST_FILE_NAME = \"digest.md5\";\n-\n-\tprivate static final Pattern CHECKSUM_PATTERN = Pattern.compile(\"^[a-f0-9]{32} \\\\*.+$\");\n-\n \tpublic static VitroHomeDirectory find(ServletContext ctx) {\n \t\tHomeDirectoryFinder finder = new HomeDirectoryFinder(ctx);\n \t\treturn new VitroHomeDirectory(ctx, finder.getPath(),\n@@ -73,219 +52,6 @@ public String getDiscoveryMessage() {\n \t\treturn discoveryMessage;\n \t}\n \n-\t/**\n-\t * Populates VIVO home directory with files required to run.\n-\t * \n-\t * NOTE: Will not overwrite any modified files on redeploy.\n-\t */\n-\tpublic void populate() {\n-\t\tFile vhdDir = getPath().toFile();\n-\n-\t\tif (!vhdDir.isDirectory() || vhdDir.list() == null) {\n-\t\t\tthrow new RuntimeException(\"Application home dir is not a directory! \" + vhdDir);\n-\t\t}\n-\n-\t\tMap<String, String> digest = untar(vhdDir);\n-\n-\t\twriteDigest(digest);\n-\t}\n-\n-\t/**\n-\t * A non-destructive untar process that returns checksum digest of tarred files.\n-\t * \n-\t * Checksum digest can be manually created with the following command.\n-\t * \n-\t * `find /vivo/home -type f | cut -c3- | grep -E '^bin/|^config/|^rdf/' | xargs md5sum > /vivo/home/digest.md5`\n-\t * \n-\t * @param destination VIVO home directory\n-\t * @return digest of each files checksum\n-\t */\n-\tprivate Map<String, String> untar(File destination) {\n-\t\tlog.info(\"Syncing VIVO home at: \" + destination.getPath());\n-\n-\t\tMap<String, String> digest = new HashMap<>();\n-\t\tMap<String, String> storedDigest = loadDigest();\n-\n-\t\tTarArchiveEntry tarEntry;\n-\t\ttry (\n-\t\t\tInputStream homeDirTar = getHomeDirTar();\n-\t\t\tTarArchiveInputStream tarInput = new TarArchiveInputStream(homeDirTar);\n-\t\t) {\n-\t\t\twhile ((tarEntry = tarInput.getNextTarEntry()) != null) {\n-\n-\t\t\t\t// Use the example configurations\n-\t\t\t\tString outFilename = tarEntry.getName().replace(\"example.\", \"\");\n-\t\t\t\tFile outFile = new File(destination, outFilename);\n-\n-\t\t\t\t// Is the entry a directory?\n-\t\t\t\tif (tarEntry.isDirectory()) {\n-\t\t\t\t\tif (!outFile.exists()) {\n-\t\t\t\t\t\toutFile.mkdirs();\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\t// Entry is a File\n-\t\t\t\t\tboolean write = true;\n-\n-\t\t\t\t\t// reading bytes into memory to avoid having to unreliably reset stream\n-\t\t\t\t\tbyte[] bytes = IOUtils.toByteArray(tarInput);\n-\t\t\t\t\tString newFileChecksum = checksum(bytes);\n-\t\t\t\t\tdigest.put(outFilename, newFileChecksum);\n-\n-\t\t\t\t\t// if file already exists and stored digest contains the file,\n-\t\t\t\t\t// check to determine if it has changed\n-\t\t\t\t\tif (outFile.exists() && storedDigest.containsKey(outFilename)) {\n-\t\t\t\t\t\tString existingFileChecksum = checksum(outFile);\n-\t\t\t\t\t\t// if file has not changed in home and is not the same as new file, overwrite\n-\t\t\t\t\t\twrite = storedDigest.get(outFilename).equals(existingFileChecksum)\n-\t\t\t\t\t\t\t&& !existingFileChecksum.equals(newFileChecksum);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (write) {\n-\t\t\t\t\t\toutFile.getParentFile().mkdirs();\n-\t\t\t\t\t\ttry (\n-\t\t\t\t\t\t\tInputStream is = new ByteArrayInputStream(bytes);\n-\t\t\t\t\t\t\tFileOutputStream fos = new FileOutputStream(outFile);\n-\t\t\t\t\t\t) {\n-\t\t\t\t\t\t\tIOUtils.copy(is, fos);\n-\t\t\t\t\t\t\tlog.info(outFile.getAbsolutePath() + \" source has changed and has not been \"\n-\t\t\t\t\t\t\t         + \"edited in home, updated file has been copied to home directory.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlog.debug(outFile.getAbsolutePath() + \" has been preserved.\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (IOException | NoSuchAlgorithmException e) {\n-\t\t\tthrow new RuntimeException(\"Error creating home directory!\", e);\n-\t\t}\n-\n-\t\treturn digest;\n-\t}\n-\n-\t/**\n-\t * Load checksum digest of VIVO home directory.\n-\t * \n-\t * @return checksum digest\n-\t */\n-\tprivate Map<String, String> loadDigest() {\n-\t\tFile storedDigest = new File(getPath().toFile(), DIGEST_FILE_NAME);\n-\t\tif (storedDigest.exists() && storedDigest.isFile()) {\n-\t\t\tlog.info(\"Reading VIVO home digest: \" + storedDigest.getPath());\n-\t\t\ttry {\n-\t\t\t\treturn FileUtils\n-\t\t\t\t\t.readLines(storedDigest, StandardCharsets.UTF_8)\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.filter(CHECKSUM_PATTERN.asPredicate())\n-\t\t\t\t\t.map(this::split)\n-\t\t\t\t\t.collect(Collectors.toMap(this::checksumFile, this::checksumValue));\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Error reading VIVO home checksum digest!\", e);\n-\t\t\t}\n-\t\t}\n-\t\tlog.info(\"VIVO home digest not found: \" + storedDigest.getPath());\n-\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t/**\n-\t * Write VIVO home checksum digest following md5 format; `<checksum> *<file>`.\n-\t * \n-\t * @param digest checksum digest to write\n-\t */\n-\tprivate void writeDigest(Map<String, String> digest) {\n-\t\tFile storedDigest = new File(getPath().toFile(), DIGEST_FILE_NAME);\n-\t\ttry (\n-\t\t\tFileOutputStream fos = new FileOutputStream(storedDigest); \n-\t\t\tOutputStreamWriter osw = new OutputStreamWriter(fos);\n-\t\t) {\n-\t\t\tfor (Map.Entry<String, String> entry : digest.entrySet()) {\n-\t\t\t\tString filename = entry.getKey();\n-\t\t\t\tString checksum = entry.getValue();\n-\t\t\t\tosw.write(String.format(\"%s *%s\\n\", checksum, filename));\n-\t\t\t}\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(\"Error writing home directory checksum digest!\", e);\n-\t\t}\n-\t\tlog.info(\"VIVO home digest created: \" + storedDigest.getPath());\n-\t}\n-\n-\t/**\n-\t * Split checksum.\n-\t * \n-\t * @param checksum checksum delimited by space and asterisks `<checksum> *<file>`\n-\t * @return split checksum\n-\t */\n-\tprivate String[] split(String checksum) {\n-\t\treturn checksum.split(\"\\\\s+\");\n-\t}\n-\n-\t/**\n-\t * Get value from split checksum.\n-\t * \n-\t * @param checksum split checksum\n-\t * @return checksum value\n-\t */\n-\tprivate String checksumValue(String[] checksum) {\n-\t\treturn checksum[0];\n-\t}\n-\n-\t/**\n-\t * Return file from split checksum.\n-\t * \n-\t * @param checksum split checksum\n-\t * @return filename\n-\t */\n-\tprivate String checksumFile(String[] checksum) {\n-\t\treturn checksum[1].substring(1);\n-\t}\n-\n-\t/**\n-\t * Get md5 checksum from file.\n-\t * \n-\t * @param file file\n-\t * @return md5 checksum as string\n-\t * @throws IOException\n-\t * @throws NoSuchAlgorithmException\n-\t */\n-\tprivate String checksum(File file) throws IOException, NoSuchAlgorithmException {\n-\t\treturn checksum(FileUtils.readFileToByteArray(file));\n-\t}\n-\n-\t/**\n-\t * Get md5 checksum from bytes.\n-\t * \n-\t * @param bytes bytes from file\n-\t * @return md5 checksum as string\n-\t * @throws NoSuchAlgorithmException\n-\t */\n-\tprivate String checksum(byte[] bytes) throws NoSuchAlgorithmException {\n-\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n-\t\tmd.update(bytes);\n-\t\t// bytes to hex\n-\t\tStringBuilder result = new StringBuilder();\n-\t\tfor (byte b : md.digest()) {\n-\t\t\tresult.append(String.format(\"%02x\", b));\n-\t\t}\n-\n-\t\treturn result.toString();\n-\t}\n-\n-\t/**\n-\t * Get prepacked VIVO home tar file as input stream.\n-\t * \n-\t * @return input stream of VIVO home tar file\n-\t */\n-\tprivate InputStream getHomeDirTar() {\n-\t\tString tarLocation = \"/WEB-INF/resources/home-files/vivo-home.tar\";\n-\t\tInputStream tar = ctx.getResourceAsStream(tarLocation);\n-\t\tif (tar == null) {\n-\t\t\tlog.error(\"Application home tar not found in: \" + tarLocation);\n-\t\t\tthrow new RuntimeException(\"Application home tar not found in: \" + tarLocation);\n-\t\t}\n-\n-\t\treturn tar;\n-\t}\n-\n \t/**\n \t * Find something that specifies the location of the Vitro home directory.\n \t * Look in the JDNI environment, the system properties, and the\n@@ -326,12 +92,23 @@ public Path getPath() {\n \t\t}\n \n \t\tpublic void getVhdFromJndi() {\n-\t\t\tString vhdPath = ContextProperties.findJndiProperty(VHD_JNDI_PATH);\n-\t\t\tlog.debug(\"'\" + VHD_JNDI_PATH + \"' as specified by JNDI: \" + vhdPath);\n-\t\t\tString message = String.format(\n-\t\t\t\t\t\"JNDI environment '%s' was set to '%s'\",\n-\t\t\t\t\tVHD_JNDI_PATH, vhdPath);\n-\t\t\tfoundLocations.add(new Found(Paths.get(vhdPath), message));\n+\t\t\ttry {\n+\t\t\t\tString vhdPath = (String) new InitialContext()\n+\t\t\t\t\t\t.lookup(VHD_JNDI_PATH);\n+\t\t\t\tif (vhdPath == null) {\n+\t\t\t\t\tlog.debug(\"Didn't find a JNDI value at '\" + VHD_JNDI_PATH\n+\t\t\t\t\t\t\t+ \"'.\");\n+\t\t\t\t} else {\n+\t\t\t\t\tlog.debug(\"'\" + VHD_JNDI_PATH + \"' as specified by JNDI: \"\n+\t\t\t\t\t\t\t+ vhdPath);\n+\t\t\t\t\tString message = String.format(\n+\t\t\t\t\t\t\t\"JNDI environment '%s' was set to '%s'\",\n+\t\t\t\t\t\t\tVHD_JNDI_PATH, vhdPath);\n+\t\t\t\t\tfoundLocations.add(new Found(Paths.get(vhdPath), message));\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.debug(\"JNDI lookup failed. \" + e);\n+\t\t\t}\n \t\t}\n \n \t\tprivate void getVhdFromSystemProperties() {"
  },
  {
    "sha": "3e995188235bbac7c8b9412e112a93b42fd960b4",
    "filename": "api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesImpl.java",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesImpl.java",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesImpl.java?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -32,10 +32,8 @@\n \n \tpublic ConfigurationPropertiesImpl(InputStream stream,\n \t\t\tMap<String, String> preemptiveProperties,\n-\t\t\tMap<String, String> buildProperties,\n-\t\t\tMap<String, String> contextProperties) throws IOException {\n+\t\t\tMap<String, String> buildProperties) throws IOException {\n \t\tMap<String, String> map = new HashMap<>(buildProperties);\n-\t\tmap.putAll(contextProperties);\n \n \t\tProperties props = loadFromPropertiesFile(stream);\n \t\tfor (String key: props.stringPropertyNames()) {"
  },
  {
    "sha": "54d0ac90d0e57bd86da922f748b7fd580b338fb2",
    "filename": "api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesSetup.java",
    "status": "modified",
    "additions": 41,
    "deletions": 23,
    "changes": 64,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesSetup.java",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesSetup.java",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesSetup.java?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -49,12 +49,12 @@\n \t/** Name of the file that contains runtime properties. */\n \tprivate static final String FILE_RUNTIME_PROPERTIES = \"runtime.properties\";\n \n-\t/** Fall-back name of the file that contains runtime properties. */\n-\tprivate static final String FILE_DEFAULT_RUNTIME_PROPERTIES = \"default.runtime.properties\";\n-\n \t/** Configuration property to store the Vitro home directory */\n \tprivate static final String VHD_CONFIGURATION_PROPERTY = \"vitro.home\";\n \n+\t/** Configuration property used to determine if there are runtime.properties files in multiple locations **/\n+\tstatic final String RP_MULTIPLE = \"rp.multiple\";\n+\n \t@Override\n \tpublic void contextInitialized(ServletContextEvent sce) {\n \t\tServletContext ctx = sce.getServletContext();\n@@ -69,17 +69,18 @@ public void contextInitialized(ServletContextEvent sce) {\n \t\t\t\tFile vitroHomeDirConfig = new File(vitroHomeDir.getPath()\n \t\t\t\t\t\t.concat(File.separator).concat(\"config\"));\n \n+\t\t\t\tString rpfLocation = findMultipleRuntimePropertiesFiles(\n+\t\t\t\t\t\tvitroHomeDir, vitroHomeDirConfig);\n+\n \t\t\t\tFile runtimePropertiesFile = locateRuntimePropertiesFile(\n-\t\t\t\t\t\tvitroHomeDirConfig, ss);\n+\t\t\t\t\tvitroHomeDir, vitroHomeDirConfig, ss);\n \t\t\t\tstream = new FileInputStream(runtimePropertiesFile);\n \n \t\t\t\tMap<String, String> preempts = createPreemptiveProperties(\n-\t\t\t\t\t\tVHD_CONFIGURATION_PROPERTY, vitroHomeDir);\n+\t\t\t\t\t\tVHD_CONFIGURATION_PROPERTY, vitroHomeDir, RP_MULTIPLE, rpfLocation);\n \n \t\t\t\tConfigurationPropertiesImpl bean = new ConfigurationPropertiesImpl(\n-\t\t\t\t\t\tstream, preempts,\n-\t\t\t\t\t\tnew BuildProperties(ctx).getMap(),\n-\t\t\t\t\t\tnew ContextProperties().getMap());\n+\t\t\t\t\t\tstream, preempts, new BuildProperties(ctx).getMap());\n \n \t\t\t\tConfigurationProperties.setBean(ctx, bean);\n \t\t\t\tss.info(this, \"Loaded \" + bean.getPropertyMap().size()\n@@ -98,36 +99,53 @@ public void contextInitialized(ServletContextEvent sce) {\n \t\t}\n \t}\n \n-\tprivate File locateRuntimePropertiesFile(File vitroHomeDirConfig, StartupStatus ss) {\n+\tprivate String findMultipleRuntimePropertiesFiles(File vitroHomeDir,\n+\t\t\tFile vitroHomeDirConfig) {\n+\n+\t\tFile rpf = new File(vitroHomeDir, FILE_RUNTIME_PROPERTIES);\n+\t\tFile rpfc = new File(vitroHomeDirConfig, FILE_RUNTIME_PROPERTIES);\n+\n+\t\tif (rpf.exists() && !rpfc.exists()) {\n+\t\t\treturn \"home\";\n+\t\t} else if (rpf.exists() && rpfc.exists()) {\n+\t\t\treturn \"both\";\n+\t\t} else if (rpfc.exists()) {\n+\t\t\treturn \"config\";\n+\t\t} else {\n+\t\t\tthrow new IllegalStateException(\"Did not find '\"\n+\t\t\t\t\t+ FILE_RUNTIME_PROPERTIES + \"' in vitro home directory '\"\n+\t\t\t\t\t+ vitroHomeDir + \"' or config directory '\" + vitroHomeDirConfig + \"'\");\n+\t\t}\n+\t}\n \n-\t\t// First look for the user-customized runtime.properties\n-\t\tFile rpf = new File(vitroHomeDirConfig, FILE_RUNTIME_PROPERTIES);\n+\tprivate File locateRuntimePropertiesFile(File vitroHomeDir,\n+\t\t\tFile vitroHomeDirConfig, StartupStatus ss) {\n \n-\t\t// Have we found a suitable runtime.properties file?\n-\t\tif (!rpf.exists() || !rpf.isFile() || !rpf.canRead()) {\n+\t\tFile rpf = new File(vitroHomeDir, FILE_RUNTIME_PROPERTIES);\n+\t\tFile rpfc = new File(vitroHomeDirConfig, FILE_RUNTIME_PROPERTIES);\n \n-\t\t\t// If not... look for the default runtime.properties\n-\t\t\trpf = new File(vitroHomeDirConfig, FILE_DEFAULT_RUNTIME_PROPERTIES);\n+\t\tif (!rpf.exists()) {\n+\t\t\trpf = rpfc;\n \t\t}\n \n-\t\tif (!rpf.exists() || !rpf.isFile()) {\n-\t\t\tthrow new IllegalStateException(\"Neither '\" + FILE_RUNTIME_PROPERTIES + \"' nor '\" +\n-\t\t\t\t\tFILE_DEFAULT_RUNTIME_PROPERTIES + \"' were found in \" +\n-\t\t\t\t\tvitroHomeDirConfig.getAbsolutePath());\n+\t\tif (!rpf.isFile()) {\n+\t\t\tthrow new IllegalStateException(\"'\" + rpf.getPath()\n+\t\t\t\t\t+ \"' is not a file.\");\n \t\t}\n \t\tif (!rpf.canRead()) {\n-\t\t\tthrow new IllegalStateException(\"No readable '\" + FILE_RUNTIME_PROPERTIES + \"' nor '\" +\n-\t\t\t\t\tFILE_DEFAULT_RUNTIME_PROPERTIES + \"' files were found in \" +\n-\t\t\t\t\tvitroHomeDirConfig.getAbsolutePath());\n+\t\t\tthrow new IllegalStateException(\"Cannot read '\" + rpf.getPath()\n+\t\t\t\t\t+ \"'.\");\n \t\t}\n \t\tss.info(this, \"Loading runtime properties from '\" + rpf.getPath() + \"'\");\n \t\treturn rpf;\n \t}\n \n \tprivate Map<String, String> createPreemptiveProperties(\n-\t\t\tString propertyVitroHome, File vitroHomeDir) {\n+\t\t\tString propertyVitroHome, File vitroHomeDir, String propertyRpfMultiple,\n+\t\t\tString rpfLocation) {\n \t\tMap<String, String> map = new HashMap<String, String>();\n \t\tmap.put(propertyVitroHome, vitroHomeDir.getAbsolutePath());\n+\t\tmap.put(propertyRpfMultiple, rpfLocation);\n \t\treturn map;\n \t}\n "
  },
  {
    "sha": "7c5e630f1a36274b4df640093122d4a151af5cd3",
    "filename": "api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesSmokeTests.java",
    "status": "modified",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesSmokeTests.java",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesSmokeTests.java",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ConfigurationPropertiesSmokeTests.java?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -48,6 +48,7 @@ public void contextInitialized(ServletContextEvent sce) {\n \t\tStartupStatus ss = StartupStatus.getBean(ctx);\n \n \t\tcheckDefaultNamespace(ctx, props, ss);\n+\t\tcheckMultipleRPFs(ctx, props, ss);\n \t\tcheckLanguages(ctx, props, ss);\n \t\tcheckEncryptionParameters(props, ss);\n \n@@ -85,6 +86,32 @@ private void checkDefaultNamespace(ServletContext ctx,\n \t\t}\n \t}\n \n+\t/**\n+\t * Warn if runtime.properties exists in multiple locations\n+\t * or is located vivo.home instead of vivo.home/config\n+\t */\n+\tprivate void checkMultipleRPFs(ServletContext ctx,\n+\t\t\tConfigurationProperties props, StartupStatus ss) {\n+\t\tString rpfStatus = props.getProperty(ConfigurationPropertiesSetup.RP_MULTIPLE);\n+\n+\t\tif (rpfStatus.equals(\"both\")) {\n+\t\t\tss.warning(this,\n+\t\t\t\t\t\"Deprecation warning: Files matching the name 'runtime.properties' \"\n+\t\t\t\t\t\t\t+ \"were found in both vivo.home and vivo.home/config. Using \"\n+\t\t\t\t\t\t\t+ \"the file in vivo.home. Future releases may require \"\n+\t\t\t\t\t\t\t+ \"runtime.properties be placed in vivo.home/config.\");\n+\t\t}\n+\n+\t\tif (rpfStatus.equals(\"home\")) {\n+\t\t\tss.warning(this,\n+\t\t\t\t\t\"Deprecation warning: runtime.properties was found in the \"\n+\t\t\t\t\t\t\t+ \"vivo.home directory. The recommended directory for \"\n+\t\t\t\t\t\t\t+ \"runtime.properties is now vivo.home/config. Future releases \"\n+\t\t\t\t\t\t\t+ \"may require runtime.properties be placed in \"\n+\t\t\t\t\t\t\t+ \"vivo.home/config.\");\n+\t\t}\n+\t}\n+\n \t/**\n \t * Warn if we set up the languages incorrectly:\n \t *"
  },
  {
    "sha": "a7e04b0e93c4b3a243d85f0dde801b010f0a5934",
    "filename": "api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ContextProperties.java",
    "status": "removed",
    "additions": 0,
    "deletions": 76,
    "changes": 76,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/6b612316eedf2c1783a1c4b85c08be99cea1b22a/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ContextProperties.java",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/6b612316eedf2c1783a1c4b85c08be99cea1b22a/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ContextProperties.java",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/api/src/main/java/edu/cornell/mannlib/vitro/webapp/config/ContextProperties.java?ref=6b612316eedf2c1783a1c4b85c08be99cea1b22a",
    "patch": "@@ -1,76 +0,0 @@\n-/* $This file is distributed under the terms of the license in LICENSE$ */\n-\n-package edu.cornell.mannlib.vitro.webapp.config;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.naming.InitialContext;\n-import javax.naming.NamingException;\n-\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-\n-/**\n- * Obtains and provides the properties from the web application's context.xml\n- *\n- * @author awoods\n- * @since 2020-10-23\n- */\n-public class ContextProperties {\n-\tprivate static final Log log = LogFactory.getLog(ContextProperties.class);\n-\n-\tprivate static final String DEFAULT_NAMESPACE_JNDI_PATH = \"java:comp/env/vitro/defaultNamespace\";\n-\tprivate static final String ROOT_USER_ADDRESS_JNDI_PATH = \"java:comp/env/vitro/rootUserAddress\";\n-\tprivate static final String APP_NAME_JNDI_PATH = \"java:comp/env/vitro/appName\";\n-\n-\tprivate static final String DEFAULT_NAMESPACE_KEY = \"Vitro.defaultNamespace\";\n-\tprivate static final String ROOT_USER_ADDRESS_KEY = \"rootUser.emailAddress\";\n-\tprivate static final String APP_NAME_KEY = \"app-name\";\n-\n-\tprivate final Map<String, String> propertyMap;\n-\n-\tpublic ContextProperties() {\n-\t\tMap<String, String> map = new HashMap<>();\n-\n-\t\t// Find default namespace\n-\t\tmap.put(DEFAULT_NAMESPACE_KEY, findJndiProperty(DEFAULT_NAMESPACE_JNDI_PATH));\n-\n-\t\t// Find root user email address\n-\t\tmap.put(ROOT_USER_ADDRESS_KEY, findJndiProperty(ROOT_USER_ADDRESS_JNDI_PATH));\n-\n-\t\t// Find application name\n-\t\tmap.put(APP_NAME_KEY, findJndiProperty(APP_NAME_JNDI_PATH));\n-\n-\t\tpropertyMap = Collections.unmodifiableMap(map);\n-\t}\n-\n-\tpublic static String findJndiProperty(String jndiProperty) {\n-\t\ttry {\n-\t\t\treturn  (String) new InitialContext().lookup(jndiProperty);\n-\n-\t\t} catch (NamingException e) {\n-\t\t\tlog.error(\"Unable to find name in JNDI: \" + jndiProperty, e);\n-\n-\t\t\tStringBuilder msg = new StringBuilder(\"\\n====================\\n\");\n-\t\t\tmsg.append(\"Error loading JNDI property: \");\n-\t\t\tmsg.append(jndiProperty);\n-\t\t\tmsg.append(\"\\n\");\n-\t\t\tmsg.append(\"\\tAn application context XML file (named after deployed war file, e.g. vivo.xml) \");\n-\t\t\tmsg.append(\"must be placed in servlet container.\\n\");\n-\t\t\tmsg.append(\"\\tFor Tomcat, see documentation for location of file: \\n\");\n-\t\t\tmsg.append(\"\\t\\thttps://tomcat.apache.org/tomcat-9.0-doc/config/context.html#Defining_a_context \\n\");\n-\t\t\tmsg.append(\"\\tThe common location on the server is: $CATALINA_BASE/conf/[enginename]/[hostname]/ \\n\");\n-\t\t\tmsg.append(\"\\t\\te.g. /var/lib/tomcat9/conf/Catalina/localhost/vivo.xml\\n\");\n-\t\t\tmsg.append(\"\\tAn example 'context.xml' file is in the META-INF directory of this project.\\n\");\n-\t\t\tmsg.append(\"====================\\n\");\n-\t\t\tthrow new RuntimeException(msg.toString(), e);\n-\t\t}\n-\t}\n-\n-\tpublic Map<String, String> getMap() {\n-\t\treturn this.propertyMap;\n-\t}\n-\n-}"
  },
  {
    "sha": "b030db0083bdec6c75dd1751e7093d17a78c9b4d",
    "filename": "api/src/main/java/edu/cornell/mannlib/vitro/webapp/utils/developer/DeveloperSettings.java",
    "status": "modified",
    "additions": 3,
    "deletions": 8,
    "changes": 11,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/utils/developer/DeveloperSettings.java",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/api/src/main/java/edu/cornell/mannlib/vitro/webapp/utils/developer/DeveloperSettings.java",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/api/src/main/java/edu/cornell/mannlib/vitro/webapp/utils/developer/DeveloperSettings.java?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -202,23 +202,18 @@ public void contextInitialized(ServletContextEvent sce) {\n \t\t\tFile dsFile = homeDir.resolve(\"config/developer.properties\")\n \t\t\t\t\t.toFile();\n \n-\t\t\tif (!dsFile.exists()) {\n-\t\t\t\tdsFile = homeDir.resolve(\"config/default.developer.properties\").toFile();\n-\t\t\t}\n-\n \t\t\ttry (FileReader reader = new FileReader(dsFile)) {\n \t\t\t\tProperties dsProps = new Properties();\n \t\t\t\tdsProps.load(reader);\n \t\t\t\tdevSettings.updateFromProperties(dsProps);\n \t\t\t\tlog.info(devSettings);\n-\t\t\t\tss.info(this, \"Loaded the '\" + dsFile.getName() + \"' file: \"\n+\t\t\t\tss.info(this, \"Loaded the 'developer.properties' file: \"\n \t\t\t\t\t\t+ devSettings);\n \t\t\t} catch (FileNotFoundException e) {\n-\t\t\t\tss.info(this, \"Neither 'developer.properties' nor 'default.developer.properties' \" +\n-\t\t\t\t\t\t\"files exist.\");\n+\t\t\t\tss.info(this, \"'developer.properties' file does not exist.\");\n \t\t\t} catch (Exception e) {\n \t\t\t\tss.warning(this,\n-\t\t\t\t\t\t\"Failed to load the '\" + dsFile.getAbsolutePath() + \"' file.\", e);\n+\t\t\t\t\t\t\"Failed to load the 'developer.properties' file.\", e);\n \t\t\t}\n \t\t}\n "
  },
  {
    "sha": "5d0562be206f6f0cee41f881f14e4ce7a0a6f448",
    "filename": "home/src/main/resources/config/example.applicationSetup.n3",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/home/src/main/resources/config/example.applicationSetup.n3",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/home/src/main/resources/config/example.applicationSetup.n3",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/home/src/main/resources/config/example.applicationSetup.n3?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "previous_filename": "home/src/main/resources/config/default.applicationSetup.n3"
  },
  {
    "sha": "67b119f923a03487c78e0a0b7afb69d870725f1f",
    "filename": "home/src/main/resources/config/example.developer.properties",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/home/src/main/resources/config/example.developer.properties",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/home/src/main/resources/config/example.developer.properties",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/home/src/main/resources/config/example.developer.properties?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "previous_filename": "home/src/main/resources/config/default.developer.properties"
  },
  {
    "sha": "9904a30a57696bdc7bf3014a655f4dc1f74be85c",
    "filename": "home/src/main/resources/config/example.runtime.properties",
    "status": "renamed",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/home/src/main/resources/config/example.runtime.properties",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/home/src/main/resources/config/example.runtime.properties",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/home/src/main/resources/config/example.runtime.properties?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -9,6 +9,19 @@\n #\n # -----------------------------------------------------------------------------\n \n+#\n+# This namespace will be used when generating URIs for objects created in the\n+# editor. In order to serve linked data, the default namespace must be composed\n+# as follows (optional elements in parentheses):\n+#\n+# scheme + server_name (+ port) (+ servlet_context) + \"/individual/\"\n+#\n+# For example, Cornell's default namespace is:\n+#\n+# http://vivo.cornell.edu/individual/\n+#\n+Vitro.defaultNamespace = http://vivo.mydomain.edu/individual/\n+\n #\n # URL of Solr context used in local Vitro search. This will usually consist of:\n #     scheme + server_name + port + vitro_webapp_name + \"solr\"\n@@ -57,6 +70,13 @@ VitroConnection.DataSource.dbtype = MySQL\n VitroConnection.DataSource.driver = com.mysql.jdbc.Driver\n VitroConnection.DataSource.validationQuery = SELECT 1\n \n+#\n+# The email address of the root user for the VIVO application. The password\n+# for this user is initially set to \"rootPassword\", but you will be asked to\n+# change the password the first time you log in.\n+#\n+rootUser.emailAddress = root@myDomain.com\n+\n #\n # Argon2 password hashing parameters for time, memory and parallelism required to\n # compute a hash.",
    "previous_filename": "home/src/main/resources/config/default.runtime.properties"
  },
  {
    "sha": "39755cb7da799c61afdfd52ef6cb7ae74156b0bd",
    "filename": "installer/example-settings.xml",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/installer/example-settings.xml",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/installer/example-settings.xml",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/installer/example-settings.xml?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -0,0 +1,21 @@\n+<settings xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\">\n+\n+    <profiles>\n+        <profile>\n+            <id>defaults</id>\n+            <properties>\n+                <app-name>vitro</app-name>\n+\n+                <vitro-dir>/usr/local/vitro/home</vitro-dir>\n+                <tomcat-dir>/usr/local/tomcat</tomcat-dir>\n+\n+                <default-theme>vitro</default-theme>\n+            </properties>\n+        </profile>\n+    </profiles>\n+\n+    <activeProfiles>\n+        <activeProfile>defaults</activeProfile>\n+    </activeProfiles>\n+</settings>"
  },
  {
    "sha": "53ea22ae5f1fc75e70220ea9e910ed0ee6e883e0",
    "filename": "installer/webapp/src/main/webResources/META-INF/context.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 44,
    "changes": 45,
    "blob_url": "https://github.com/vivo-project/Vitro/blob/1e00301a8855827306640279343e8caa26b20ddb/installer/webapp/src/main/webResources/META-INF/context.xml",
    "raw_url": "https://github.com/vivo-project/Vitro/raw/1e00301a8855827306640279343e8caa26b20ddb/installer/webapp/src/main/webResources/META-INF/context.xml",
    "contents_url": "https://api.github.com/repos/vivo-project/Vitro/contents/installer/webapp/src/main/webResources/META-INF/context.xml?ref=1e00301a8855827306640279343e8caa26b20ddb",
    "patch": "@@ -1,51 +1,8 @@\n <Context> <!-- useHttpOnly=\"false\" -->\n-\n-   <!--\n-     # The 'home' property specifies the location of Vitro HOME.\n-     # The system user used to run the Vitro web application must have write access\n-     # to the parent directory of the directory defined in this property, if Vitro HOME\n-     # does not already exist.\n-     # If this directory already exists, the system user used to run the Vitro web application\n-     # must have write access to this directory.\n-   -->\n    <Environment\n            type=\"java.lang.String\"\n            name=\"vitro/home\"\n-           value=\"${vivo-dir}\" override=\"true\"/>\n-\n-   <!--\n-     # The name of the application (possibly not used).\n-   -->\n-   <Environment\n-           type=\"java.lang.String\"\n-           name=\"vitro/appName\"\n-           value=\"vivo\" override=\"true\"/>\n-\n-   <!--\n-     # The email address of the root user for the Vitro application. The password\n-     # for this user is initially set to \"rootPassword\", but you will be asked to\n-     # change the password the first time you log in.\n-   -->\n-   <Environment\n-           type=\"java.lang.String\"\n-           name=\"vitro/rootUserAddress\"\n-           value=\"vivo_root@mydomain.edu\" override=\"true\"/>\n-\n-   <!--\n-     # This namespace will be used when generating URIs for objects created in the\n-     # editor. In order to serve linked data, the default namespace must be composed\n-     # as follows (optional elements in parentheses):\n-     #\n-     # scheme + server_name (+ port) (+ servlet_context) + \"/individual/\"\n-     #\n-     # For example, Cornell's default namespace is:\n-     #\n-     # http://vivo.cornell.edu/individual/\n-   -->\n-   <Environment\n-           type=\"java.lang.String\"\n-           name=\"vitro/defaultNamespace\"\n-           value=\"http://vivo.mydomain.edu/individual/\" override=\"true\"/>\n+           value=\"${vitro-dir}\" override=\"true\"/>\n \n    <!-- Disable persist sessions on shut down.-->\n    <Manager pathname=\"\" />"
  }
]
