[
  {
    "sha": "996748d459b9cdb15efd08bd0d3fbd3d4eafa740",
    "filename": ".idea/BotDevelopment.iml",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/acmauth/BotDevelopment/blob/b348c34f2c051491aef352d3a165d3cedfaa2aed/.idea/BotDevelopment.iml",
    "raw_url": "https://github.com/acmauth/BotDevelopment/raw/b348c34f2c051491aef352d3a165d3cedfaa2aed/.idea/BotDevelopment.iml",
    "contents_url": "https://api.github.com/repos/acmauth/BotDevelopment/contents/.idea/BotDevelopment.iml?ref=b348c34f2c051491aef352d3a165d3cedfaa2aed",
    "patch": "@@ -1,2 +1,12 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<module external.linked.project.id=\"BotDevelopment\" external.linked.project.path=\"$MODULE_DIR$\" external.root.project.path=\"$MODULE_DIR$\" external.system.id=\"GRADLE\" type=\"JAVA_MODULE\" version=\"4\" />\n\\ No newline at end of file\n+<module external.linked.project.id=\"BotDevelopment\" external.linked.project.path=\"$MODULE_DIR$\" external.root.project.path=\"$MODULE_DIR$\" external.system.id=\"GRADLE\" external.system.module.group=\"org.acm.auth\" external.system.module.version=\"1.0\" type=\"JAVA_MODULE\" version=\"4\">\n+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n+    <exclude-output />\n+    <content url=\"file://$MODULE_DIR$\">\n+      <excludeFolder url=\"file://$MODULE_DIR$/.gradle\" />\n+      <excludeFolder url=\"file://$MODULE_DIR$/build\" />\n+    </content>\n+    <orderEntry type=\"inheritedJdk\" />\n+    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n+  </component>\n+</module>\n\\ No newline at end of file"
  },
  {
    "sha": "52aadeb531cba310b5a230a71361eb8ff25b1b34",
    "filename": "src/main/java/org/acm/auth/App.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/acmauth/BotDevelopment/blob/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/App.java",
    "raw_url": "https://github.com/acmauth/BotDevelopment/raw/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/App.java",
    "contents_url": "https://api.github.com/repos/acmauth/BotDevelopment/contents/src/main/java/org/acm/auth/App.java?ref=b348c34f2c051491aef352d3a165d3cedfaa2aed",
    "patch": "@@ -4,6 +4,7 @@\n import org.acm.auth.config.ConfigFile;\r\n import org.acm.auth.config.ConfigKey;\r\n import org.acm.auth.managers.CommandManager;\r\n+import org.acm.auth.managers.ReactionManager;\r\n import org.apache.logging.log4j.LogManager;\r\n import org.apache.logging.log4j.Logger;\r\n \r\n@@ -19,6 +20,7 @@ public static void main(String[] args) throws LoginException, IOException {\n         JDABuilder\r\n                 .createDefault(config.getValue(ConfigKey.TOKEN))\r\n                 .addEventListeners(new CommandManager(config))\r\n+                .addEventListeners(new ReactionManager())\r\n                 .build();\r\n     }\r\n }\r"
  },
  {
    "sha": "a121a040b94d0af8e5a59463f98d056e53584006",
    "filename": "src/main/java/org/acm/auth/commands/ReactionRolesCommand.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/acmauth/BotDevelopment/blob/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/commands/ReactionRolesCommand.java",
    "raw_url": "https://github.com/acmauth/BotDevelopment/raw/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/commands/ReactionRolesCommand.java",
    "contents_url": "https://api.github.com/repos/acmauth/BotDevelopment/contents/src/main/java/org/acm/auth/commands/ReactionRolesCommand.java?ref=b348c34f2c051491aef352d3a165d3cedfaa2aed",
    "patch": "@@ -0,0 +1,80 @@\n+package org.acm.auth.commands;\n+\n+import net.dv8tion.jda.api.EmbedBuilder;\n+import net.dv8tion.jda.api.Permission;\n+import net.dv8tion.jda.api.entities.Message;\n+import net.dv8tion.jda.api.entities.Role;\n+import net.dv8tion.jda.api.events.message.MessageReceivedEvent;\n+import org.acm.auth.utils.ReactionRoles;\n+\n+import java.time.Duration;\n+\n+public class ReactionRolesCommand extends Command {\n+    private static final Permission[] EMPTY_PERMS = {};\n+\n+    private final String prefix;\n+\n+    public ReactionRolesCommand(String prefix) {\n+        super(\"rr\", \"Adds emoji to a msg for giving a role to users\", false, false, new String[]{}, 1, 3, \"\", EMPTY_PERMS, EMPTY_PERMS);\n+\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void invoke(MessageReceivedEvent event, String[] args) {\n+        //-rr help\n+        //or\n+        //-rr <msg-id> <role> <reaction>\n+\n+        String messageId = args[0];\n+        if (messageId.equals(\"help\")) {\n+            showHelpMsg(event);\n+            return;\n+        }\n+\n+        Role role = event.getGuild().getRoleById(args[1]);\n+        String emojiId = args[2];\n+\n+        if (ReactionRoles.addReactionRole(messageId, emojiId, role)) {\n+            event.getChannel().addReactionById(messageId, emojiId).queue();\n+            event.getMessage().delete().queue();  //delete command message\n+            showOkMsg(event, role, emojiId);\n+        } else {\n+            event.getMessage().delete().queue();  //delete command message\n+            showErrorMsg(event, role, emojiId);\n+        }\n+\n+    }\n+\n+    private void showHelpMsg(MessageReceivedEvent event) {\n+        EmbedBuilder embedBuilder = new EmbedBuilder()\n+                .setTitle(\"Reaction Roles Help\")\n+                .addField(\"Command options\",\n+                        \"`\" + prefix + this.getName() + \" <message-id> <role-id> <emoji-unicode>` : add reaction role to msg\\n\"\n+                                + \"`\" + prefix + this.getName() + \" help` : print help\",\n+                        false);\n+        event.getChannel().sendMessage(embedBuilder.build()).queue();\n+    }\n+\n+    private void showOkMsg(MessageReceivedEvent event, Role role, String emojiId) {\n+        //send ok message and deletes it after while\n+        event.getChannel()\n+                .sendMessage(new EmbedBuilder()\n+                        .setDescription(\"Reaction Role **\" + role.getName() + \"** -> \" + emojiId + \" created.\")\n+                        .build())\n+                .delay(Duration.ofSeconds(10))\n+                .flatMap(Message::delete)\n+                .queue();\n+    }\n+\n+    private void showErrorMsg(MessageReceivedEvent event, Role role, String emojiId) {\n+        //send error message and deletes it after while\n+        event.getChannel()\n+                .sendMessage(new EmbedBuilder()\n+                        .setDescription(\"Reaction Role **\" + role.getName() + \"** already exists. (**\" + role.getName() + \"** -> \" + emojiId + \")\")\n+                        .build())\n+                .delay(Duration.ofSeconds(10))\n+                .flatMap(Message::delete)\n+                .queue();\n+    }\n+}"
  },
  {
    "sha": "4a7157d7ca9a51bd7cb9f47d410faf0a5e9256be",
    "filename": "src/main/java/org/acm/auth/managers/CommandManager.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/acmauth/BotDevelopment/blob/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/managers/CommandManager.java",
    "raw_url": "https://github.com/acmauth/BotDevelopment/raw/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/managers/CommandManager.java",
    "contents_url": "https://api.github.com/repos/acmauth/BotDevelopment/contents/src/main/java/org/acm/auth/managers/CommandManager.java?ref=b348c34f2c051491aef352d3a165d3cedfaa2aed",
    "patch": "@@ -38,7 +38,8 @@ private void loadCommands(ConfigFile config) {\n                 new ByeCommand(),\r\n                 new LoggerCommand(),\r\n                 new GifCommand(config.getValue(ConfigKey.GIPHY_KEY)),\r\n-                new CointossCommand()\r\n+                new CointossCommand(),\r\n+                new ReactionRolesCommand(config.getValue(ConfigKey.PREFIX))\r\n         };\r\n \r\n         // for each command\r"
  },
  {
    "sha": "0cb525256c6c0e922142238cfbc4ce4afbbe1ad1",
    "filename": "src/main/java/org/acm/auth/managers/ReactionManager.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/acmauth/BotDevelopment/blob/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/managers/ReactionManager.java",
    "raw_url": "https://github.com/acmauth/BotDevelopment/raw/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/managers/ReactionManager.java",
    "contents_url": "https://api.github.com/repos/acmauth/BotDevelopment/contents/src/main/java/org/acm/auth/managers/ReactionManager.java?ref=b348c34f2c051491aef352d3a165d3cedfaa2aed",
    "patch": "@@ -0,0 +1,40 @@\n+package org.acm.auth.managers;\n+\n+import net.dv8tion.jda.api.entities.Role;\n+import net.dv8tion.jda.api.entities.User;\n+import net.dv8tion.jda.api.events.channel.priv.PrivateChannelCreateEvent;\n+import net.dv8tion.jda.api.events.message.guild.react.GuildMessageReactionAddEvent;\n+import net.dv8tion.jda.api.events.message.react.MessageReactionRemoveEvent;\n+import net.dv8tion.jda.api.hooks.ListenerAdapter;\n+import org.acm.auth.utils.ReactionRoles;\n+import org.jetbrains.annotations.NotNull;\n+\n+public class ReactionManager extends ListenerAdapter {\n+\n+    @Override\n+    public void onGuildMessageReactionAdd(@NotNull GuildMessageReactionAddEvent event) {\n+        if (event.getUser().isBot())\n+            return;\n+\n+        Role role = ReactionRoles.getReactionRole(event.getMessageId(), event.getReactionEmote().getEmoji());\n+        event.getGuild().addRoleToMember(event.getMember(), role).queue();\n+\n+        //sends pm to user for added role\n+        event.getUser().openPrivateChannel()\n+                .flatMap(privateChannel -> privateChannel.sendMessage(\"You got role **\" + role.getName() + \"**\"))\n+                .queue();\n+\n+        ReactionRoles.addUser(event.getUserId(), event.getUser());\n+    }\n+\n+    @Override\n+    public void onMessageReactionRemove(@NotNull MessageReactionRemoveEvent event) {\n+        Role role = ReactionRoles.getReactionRole(event.getMessageId(), event.getReactionEmote().getEmoji());\n+        event.getGuild().removeRoleFromMember(event.getUserId(), role).queue();\n+\n+        //sends pm to user for removed role\n+        ReactionRoles.getUser(event.getUserId()).openPrivateChannel()\n+                .flatMap(privateChannel -> privateChannel.sendMessage(\"You removed role **\" + role.getName() + \"**\"))\n+                .queue();\n+    }\n+}"
  },
  {
    "sha": "625b14e07dee650ccfbda8d896a6f81664404c05",
    "filename": "src/main/java/org/acm/auth/utils/ReactionRoles.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/acmauth/BotDevelopment/blob/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/utils/ReactionRoles.java",
    "raw_url": "https://github.com/acmauth/BotDevelopment/raw/b348c34f2c051491aef352d3a165d3cedfaa2aed/src/main/java/org/acm/auth/utils/ReactionRoles.java",
    "contents_url": "https://api.github.com/repos/acmauth/BotDevelopment/contents/src/main/java/org/acm/auth/utils/ReactionRoles.java?ref=b348c34f2c051491aef352d3a165d3cedfaa2aed",
    "patch": "@@ -0,0 +1,44 @@\n+package org.acm.auth.utils;\n+\n+import net.dv8tion.jda.api.entities.Role;\n+import net.dv8tion.jda.api.entities.User;\n+\n+import java.util.HashMap;\n+\n+public class ReactionRoles {\n+    private static HashMap<String, HashMap<String, Role>> roles = new HashMap<>();\n+    private static HashMap<String, User> users = new HashMap<>();\n+\n+    public static boolean addReactionRole(String msg, String emoji, Role  role) {\n+        HashMap<String, Role> map;\n+        if (!roles.containsKey(msg)) {\n+            map = new HashMap<>();\n+        } else {\n+            map = roles.get(msg);\n+        }\n+\n+        //prevents from assigning 2nd emoji to a role on the same message\n+        if (roles.containsKey(msg) && roles.get(msg).containsValue(role)) {\n+            return false;\n+        }\n+\n+        map.put(emoji, role);\n+        roles.put(msg, map);\n+\n+        return true;\n+    }\n+\n+    public static Role getReactionRole(String msg, String emoji) {\n+        return roles.get(msg).get(emoji);\n+    }\n+\n+    public static void addUser(String id, User user) {\n+        users.put(id, user);\n+    }\n+\n+    public static User getUser(String id) {\n+        return users.get(id);\n+    }\n+\n+//    private static\n+}"
  }
]
