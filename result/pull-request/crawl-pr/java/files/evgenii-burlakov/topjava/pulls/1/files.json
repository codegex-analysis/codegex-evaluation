[
  {
    "sha": "20ca669a4ba7cbed90966970ce365ac1b88e4c95",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/.gitignore",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/.gitignore",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/.gitignore?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -4,5 +4,6 @@ target\n *.iml\n log\n *.patch\n+.doc\n \n "
  },
  {
    "sha": "89799628440c594dd801850d890c1ebac6ac4618",
    "filename": "README.md",
    "status": "modified",
    "additions": 4,
    "deletions": 225,
    "changes": 229,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/README.md",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/README.md",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/README.md?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -1,228 +1,7 @@\n+[![Codacy Badge](https://api.codacy.com/project/badge/Grade/4036b72c0e674589a9316ed98927eff2)](https://app.codacy.com/gh/evgenii-burlakov/topjava?utm_source=github.com&utm_medium=referral&utm_content=evgenii-burlakov/topjava&utm_campaign=Badge_Grade_Settings)\n+[![Codacy Badge](https://app.codacy.com/project/badge/Grade/7cbbfc11cdca4502899c50db977bbfe3)](https://www.codacy.com/gh/JavaWebinar/topjava/dashboard)\n+[![Build Status](https://api.travis-ci.com/JavaWebinar/topjava.svg?branch=master)](https://travis-ci.com/JavaWebinar/topjava)\n+\n Java Enterprise Online Project \n ===============================\n Разработка полнофункционального Spring/JPA Enterprise приложения c авторизацией и правами доступа на основе ролей с использованием наиболее популярных инструментов и технологий Java: Maven, Spring MVC, Security, JPA(Hibernate), REST(Jackson), Bootstrap (css,js), datatables, jQuery + plugins, Java 8 Stream and Time API и хранением в базах данных Postgresql и HSQLDB.\n-\n-![topjava_structure](https://user-images.githubusercontent.com/13649199/27433714-8294e6fe-575e-11e7-9c41-7f6e16c5ebe5.jpg)\n-\n-    Когда вы слышите что-то, вы забываете это.\n-    Когда вы видите что-то, вы запоминаете это.\n-    Но только когда вы начинаете делать это,\n-    вы начинаете понимать это\n-\n-    Старинная китайская поговорка\n-\n-## <a href=\"description.md\">Описание и план проекта</a>\n-### <a href=\"http://topjava.herokuapp.com/\" target=_blank>Демо разрабатываемого приложения</a>\n-### [Изменения проекта (Release Notes)](ReleaseNotes.md)\n-### <a href=\"https://github.com/JavaOPs/topjava/wiki\">Требования к участникам, Wiki</a>\n-### <a href=\"cv.md\">Составление резюме, подготовка к интервью, поиск работы</a>\n-\n-Вводное занятие (обязательно смотреть все видео)\n-===============\n-## ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 1. <a href=\"https://drive.google.com/file/d/0B9Ye2auQ_NsFY1ZDNXRCd1NCTG8\">Осваиваем Java Enterprise. Трудоустройство. Ответы на вопросы.</a>\n-- <a href=\"https://goo.gl/XNVOj4\">Слайды презентации</a>\n-- <a href=\"http://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\">Java Tools and Technologies Landscape Report 2016</a>\n-- [Java in 2017 Survey](http://www.baeldung.com/java-in-2017)\n-- <a href=\"https://habrahabr.ru/post/308104/\">Из юниоров в разработчики: получаем первую работу</a>\n-\n-#### Spring Pet-Clinic\n-- <a href=\"https://github.com/spring-projects/spring-petclinic\">Spring PetClinic Sample Application </a>\n-- <a href=\"https://speakerdeck.com/michaelisvy/spring-petclinic-sample-application\">Presentation</a>\n-\n-## ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 2. <a href=\"https://drive.google.com/file/d/0B9Ye2auQ_NsFSUNrdVc0bDZuX2s\">Системы управления версиями. Git.</a>\n--  **<a href=\"https://github.com/JavaOPs/topjava/wiki/Git\">Wiki по ведению проекта в Git</a>**\n--  <a href=\"http://ru.wikipedia.org/wiki/Система_управления_версиями\">Система управления версиями</a>. <a href=\"http://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8#.D0.A0.D0.B0.D1.81.D0.BF.D1.80.D0.B5.D0.B4.D0.B5.D0.BB.D1.91.D0.BD.D0.BD.D1.8B.D0.B5_.D1.81.D0.B8.D1.81.D1.82.D0.B5.D0.BC.D1.8B_.D1.83.D0.BF.D1.80.D0.B0.D0.B2.D0.BB.D0.B5.D0.BD.D0.B8.D1.8F_.D0.B2.D0.B5.D1.80.D1.81.D0.B8.D1.8F.D0.BC.D0.B8\">VCS/DVSC</a>.\n--  Ресурсы:            \n-    -  <a href=\"https://try.github.io/levels/1/challenges/1\">Интерактивная Git обучалка</a>\n-    -  <a href=\"http://learngitbranching.js.org/\">Еще одна интерактивная обучалка, по-русски</a>    \n-    -  <a href=\"https://git-scm.com/book/ru/v2\">Книга Git</a>\n-    -  <a href=\"https://illustrated-git.readthedocs.org/en/latest/#working-with-remote-repositories\">Working with remote repositories</a>\n-    -  <a href=\"https://www.youtube.com/playlist?list=PLIU76b8Cjem5B3sufBJ_KFTpKkMEvaTQR\">Видео по обучению Git</a>\n-    -  <a href=\"https://blog.interlinked.org/tutorials/git.html\">Git Overview</a>\n-    -  [Основы Git за 20 минут](https://www.youtube.com/watch?v=TMeZGvtQnT8)\n-    -  [Git - для новичков](https://www.youtube.com/watch?list=PLY4rE9dstrJyTdVJpv7FibSaXB4BHPInb&v=PEKN8NtBDQ0)\n-    - [Руководство по написанию комментариев в коммитах](https://techrocks.ru/2019/12/02/writing-good-commit-messages)\n-\n-##  ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 3. <a href=\"https://drive.google.com/open?id=0B9Ye2auQ_NsFZDdaaU5fZEo4X3c\">Работа с проектом (выполнять инструкции)</a>\n-- **ВНИМАНИЕ: выбирайте для проекта простой пусть без пробелов и русских букв, например (Windows) `c:\\projects\\topjava\\`. Иначе впоследствии будут проблемы**\n-- **Плагин уже Git Intergation не требуется и вкладку `Version control` в IDEA переименовали в `Git`**\n-\n-Для переключения режима отображения изменений из вкладки Commit в Git: Local Changes нужно переключить `Settings/Preferences | Version Control | Commit | Use non-modal commit interface` или в контекстном меню вкладки `Commit`:\n-\n-![image](https://user-images.githubusercontent.com/13649199/105491518-72d8f300-5cc7-11eb-8b79-c46382562deb.png)  ![image](https://user-images.githubusercontent.com/13649199/105488663-05c35e80-5cc3-11eb-962e-30f403d623e8.png)\n-\n-### Патч [prepare_to_HW0.patch](https://drive.google.com/file/d/1LNPpu9OkuCpfpD8ZJHO-o0vwu49p2i5M) (скачать и положить в каталог вашего проекта)\n-\n-> Проект постоянно улучшается, поэтому видео иногда отличается от кода проекта. Изменения указываю после видео: \n-> - переименовал класс `UserMealWithExceed` и его поле `exceed` в `UserMealWithExcess.excess`\n-> - в `UserMeals/UserMealWithExcess` поля изменились на `private`\n-> - обновил данные `UserMealsUtil.meals` и переименовал некоторые пременные, поля и методы\n-> - добавил `UserMealWithExcess.toString()` и метод для выполнения _Optional домашнего задания_\n-> - метод фильтрации в `TimeUtil` переименовали в `isBetweenHalfOpen` (также изменилась логика сравнения - `startTime` включается в интервал) \n-\n-##  Инструкция по шагам (из видео):</h3>\n--  <a href=\"http://javaops.ru/view/soft\">Установить ПО (git, JDK8, IntelliJ IDEA, Maven)</a>\n--  Создать аккаунт на <a href=\"https://github.com\">GitHub</a>\n--  Сделать Fork **ЭТОГО** проекта (https://github.com/JavaOPs/topjava) </a>\n--  Сделать локальный репозиторий проекта:\n-            <pre>git clone https://github.com/[Ваш аккаунт]/topjava.git</pre>\n--  Открыть и настроить проект в IDEA\n-   - <a href=\"http://stackoverflow.com/questions/29695918/intellij-idea-console-issue#33035499\">Выставить кодировку UTF-8 в консоли</a>\n-   - <a href=\"https://github.com/JavaOPs/topjava/wiki/IDEA#%D0%9F%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BA%D0%BE%D0%B4%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D1%83-utf-8\">Поставить кодировку UTF-8</a>\n-   - Опционально: <a href=\"https://github.com/JavaOPs/topjava/wiki/IDEA#%D0%9F%D0%BE%D0%BC%D0%B5%D0%BD%D1%8F%D1%82%D1%8C-%D1%84%D0%BE%D0%BD%D1%82-%D0%BF%D0%BE-%D1%83%D0%BC%D0%BE%D0%BB%D1%87%D0%B0%D0%BD%D0%B8%D1%8E-dejavu\">Поменять фонт по умолчанию (DejaVu)</a> или на **новый [JetBrains Mono](https://habr.com/ru/company/jugru/news/t/484134/)**\n--  По ходу видео сделать Apply Patch... скаченного патча Prepare_ to_ HW0.patch\n--  Закоммитить и запушить изменения (commit + push)\n--  Сделать ветку домашнего задания\n--  Выполнить задание и залить на GitHub (commit + push)\n--  Переключиться в основную ветку проекта master.\n-\n-## ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 4. [Тех.задание: библия или допускаются изменения. Полуоткрытый интервал.](https://drive.google.com/file/d/1BpTzjNFjS0TSekCyt_xvt6YoLvuw5KTZ/view)\n-- [Типы промежутков](https://ru.wikipedia.org/wiki/Промежуток_(математика))\n-\n-## ![hw](https://cloud.githubusercontent.com/assets/13649199/13672719/09593080-e6e7-11e5-81d1-5cb629c438ca.png) Домашнее задание HW0\n-```\n-Реализовать метод `UserMealsUtil.filteredByCycles` через циклы (`forEach`):\n--  должны возвращаться только записи между `startTime` и `endTime`\n--  поле `UserMealWithExcess.excess` должно показывать, \n-                                     превышает ли сумма калорий за весь день значение `caloriesPerDay`\n-        \n-Т.е `UserMealWithExcess` - это запись одной еды, но поле `excess` будет одинаково для всех записей за этот день.\n-    \n-- Проверьте результат выполнения ДЗ (можно проверить логику в http://topjava.herokuapp.com , список еды)\n-- Оцените Time complexity алгоритма. Если она больше O(N), например O(N*N) или N*log(N), сделайте O(N).\n-```\n--  <a href=\"http://www.mscharhag.com/2014/02/java-8-datetime-api.html\">Java 8 Date and Time API</a>\n--  <a href=\"http://web.archive.org/web/20201128101944/https://tproger.ru/translations/algorithms-and-data-structures/\">Алгоритмы и структуры данных для начинающих: сложность алгоритмов</a>\n--  [Головач: сложность алгоритмов в теме коллекций](https://www.youtube.com/watch?v=Ek9ijOiplNE&feature=youtu.be&t=778)\n--  <a href=\"https://drive.google.com/file/d/0B9Ye2auQ_NsFNEJWRFJkVDA3TkU/view\">Time complexity</a>\n--  <a href=\"https://ru.wikipedia.org/wiki/Временная_сложность_алгоритма\">Временная сложность алгоритма</a>\n--  <a href=\"https://ru.wikipedia.org/wiki/Вычислительная_сложность\">Вычислительная сложность</a>\n-\n-#### ВНИМАНИЕ: варианты Optional делайте в `UserMealsUtil` в одной ветке в разных методах. Проще делать, проще проверять\n-\n-### Optional (Java 8 Stream API)\n-```\n-Реализовать метод `UserMealsUtil.filteredByStreams` через Java 8 Stream API.\n-```\n--  <a href=\"http://www.youtube.com/watch?v=_PDIVhEs6TM\">Видео: Доступно о Java 8 Lambda</a>\n--  <a href=\"https://devcolibri.com/java-8-killer-features-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/\">Java 8: Lambda выражения</a>\n--  <a href=\"https://devcolibri.com/java-8-killer-features-%D1%87%D0%B0%D1%81%D1%82%D1%8C-2/\">Java 8: Потоки</a>\n--  <a href=\"https://javadevblog.com/polnoe-rukovodstvo-po-java-8-stream.html\">Pуководство по Java 8 Stream</a>\n--  [Полное руководство по Java 8 Stream API в картинках и примерах](https://annimon.com/article/2778)    \n--  [7 способов использовать groupingBy в Stream API](https://habrahabr.ru/post/348536)\n--  <a href=\"http://habrahabr.ru/post/224593/\">Лямбда-выражения в Java 8</a>\n--  <a href=\"https://github.com/winterbe/java8-tutorial\">A Guide to Java 8</a>\n--  <a href=\"http://habrahabr.ru/company/luxoft/blog/270383/\">Шпаргалка Java Stream API</a>\n--  <a href=\"https://www.youtube.com/watch?v=hEyCK4ueBlc\">Алексея Владыкин: Элементы функционального программирования в Java</a>\n--  <a href=\"https://www.youtube.com/watch?v=iD8H7cmxw_w\">Yakov Fain о новом в Java 8</a>\n--  <a href=\"http://stackoverflow.com/questions/28319064/java-8-best-way-to-transform-a-list-map-or-foreach\">stream.map vs forEach</a\n--  Дополнительно\n-   - [Сергей Куксенко — Stream API, часть 1](https://www.youtube.com/watch?v=O8oN4KSZEXE)\n-   - [Сергей Куксенко — Stream API, часть 2](https://www.youtube.com/watch?v=i0Jr2l3jrDA)\n-\n-### Optional 2 (+5 бонусов, только после выполнения базового и Optional задания!)\n-Сделать реализацию со сложностью O(N) (обратите внимание на п.13 замечаний):\n-- циклом за 1 проход по `List<UserMeal>`\n-  - без циклов по другим коллекциям/массивам (к ним также относим методы коллекций `addAll()/removeAll()`)\n-  - решение должно быть рабочим в общем случае (работать в приложении с многими пользователями, не только при запуске main)\n-- через Stream API за 1 проход по исходному списку `meals.streem()`\n-  - нельзя использовать внешние коллекции, не являющиеся частью коллектора\n-  - нельзя 2 раза проходить по исходному списку (в том числе его отфильтрованной или преобразованной копии)\n-  - возможно дополнительные проходы по частям списка, при этом превышение должно считаться один раз для всего подсписка. Те например нельзя разбить список на на 2 подсписка с четными и нечетными датами и затем их объединить, с подсчетом превышения для каждого элемента.\n- \n-\n-Ресурсы:\n-- [Java 8 Stream API, часть шестая: собственный коллектор](https://easyjava.ru/java/language/java-8-stream-api-chast-shestaya-sobstvennyj-kollektor)\n-- [Руководство по Java 8 Stream API: Collector](https://annimon.com/article/2778#collector)\n-\n-### Замечания по использованию Stream API:\n-- Когда встречаешь что-то непривычное, приходится перестраивать мозги. Например, переход с процедурного на ООП программирование дается непросто. Те, кто не знает шаблонов (и не хотят учить) также их встречают плохо. Хорошая новость в том, что если это принять и начать использовать, то начинаешь получать от этого удовольствие. И тут главное не впасть в другую крайность:\n-  - [Используйте Stream API проще (или не используйте вообще)](https://habrahabr.ru/post/337350/)\n-- Если вас беспокоить производительность стримов, обязательно прочитайте про оптимизацию \n-    - [\"Что? Где? Когда?\"](http://optimization.guide/intro.html)\n-    - [Перформанс: что в имени тебе моём?](https://habrahabr.ru/company/jugru/blog/338732/)\n-    - [Performance это праздник](https://habrahabr.ru/post/326242/)\n-    \n-При использовании Stream API производительность улучшиться только на больших задачах, где возможно распараллеливание.\n-Еще - просто так запустить и померять скорость JVM нельзя (как минимум дать прогреться и запустить очень большое число раз). Лучше использовать какие-нибудь бенчмарки, например [JMH](http://tutorials.jenkov.com/java-performance/jmh.html), который мы юзаем на другом проекте (Mastejava).\n-  \n-## ![error](https://cloud.githubusercontent.com/assets/13649199/13672935/ef09ec1e-e6e7-11e5-9f79-d1641c05cbe6.png) Замечания к HW0\n-- 1: Код проекта менять можно! Одна из распространенных ошибок как в тестовых заданиях на собеседовании, так и при работе на проекте, что ничего нельзя менять. Конечно при правках в рабочем проекте обязательно нужно проконсультироваться/проревьюироваться у авторов кода (находится по истории VCS)\n-- 2: Наследовать `UserMealWithExcess` от `UserMeal` я не буду, т.к. это разные сущности: Transfer Object и Entity. Мы будет их проходить на 2м уроке.\n-- 3: Правильная реализация должна быть простой и красивой, можно сделать 2-мя способами: через стримы и через циклы. Сложность должна быть O(N), т.е. без вложенных стримов и циклов.\n-- 4: При реализации через циклы посмотрите в `Map` на методы `getOrDefault` или `merge`\n-- 5: **При реализации через `Stream` заменяйте `forEach` оператором `stream.map(..)`**\n-- 6: Объявляйте переменные непосредственно перед использованием (если возможно - сразу с инициализацией). При объявлении коллекций используйте тип переменной - интерфейс (Map, List, ..)\n-- 7: Если IDEA предлагает оптимизацию (желтым подчеркивает), например заменить лямбду на метод-референс, соглашайтесь (Alt+Enter)\n-- 8: Пользуйтесь форматированием кода в IDEA: `Alt+Ctrl+L`\n-- 9: Перед check-in проверяйте чендж-лист (курсор на файл и Ctrl+D): не оставляйте в коде ничего лишнего (закомментированный код, TODO и пр.). Если файл не меняется (например только пробелы или переводы строк), не надо его чекинить, делайте ему `revert` (Git -> Revert / `Ctrl+Alt+Z`).\n-- 10: `System.out.println` нельзя делать нигде, кроме как в `main`. Позже введем логирование.\n-- 11: Результаты, возвращаемые `UserMealsUtil.filteredByStreams` мы будем использовать [в нашем приложении](http://topjava.herokuapp.com/) для фильтрации по времени и отображения еды правильным цветом.\n-- 12: Обращайте внимание на комментарии к вашим коммитам в git. Они должны быть короткие и информативные (лучше на english)\n-- 13: Не полагайтесь в решении на то, что список еды будет подаваться отсортированным. Такого условия нет.\n------\n-## [Пример 7-го занятия онлайн стажировки, несколько видео открыто](https://github.com/JavaOPs/topjava/blob/master/doc/lesson07.md)\n-\n-### Полезные ресурсы\n-> ВНИМАНИЕ:\n->  - **ДЗ первого урока будет связано с [созданием небольшого CRUD приложения (в памяти, без DB) на JSP и сервлетах](https://danielniko.wordpress.com/2012/04/17/simple-crud-using-jsp-servlet-and-mysql/)**. Введение будет, но предварительное знакомство не помешает.\n->  - основы JavaSсript необходимы для понимания проекта, начиная с 8-го занятия!\n-\n-Все остальное - опционально.\n-\n-#### HTML, JavaScript, CSS \n-- [Basic HTML and HTML5](https://learn.freecodecamp.org/responsive-web-design/basic-html-and-html5/say-hello-to-html-elements/)\n-- [Справочник по WEB](https://developer.mozilla.org/ru/)\n-- [Видео по WEB технологиям](https://www.youtube.com/user/WebMagistersRu/playlists)\n-- [Изучение JavaScript в одном видео уроке за час](https://www.youtube.com/watch?v=QBWWplFkdzw)\n-- <a href=\"http://www.w3schools.com/default.asp\">HTML, CSS, JAVASCRIPT, SQL, JQUERY, BOOTSTRAP</a>\n-- <a href=\"https://www.youtube.com/watch?v=j0ycGQKqMT4\">Введение в программирование на JavaScript</a>\n-- <a href=\"http://anton.shevchuk.name/javascript/html-css-javascript-standarts/\">Стандарты кодирования для HTML, CSS и JavaScript’a</a>\n-- <a href=\"http://www.intuit.ru/studies/courses/1102/134/info\">Основы работы с HTML/CSS/JavaScript</a>\n-- <a href=\"http://itchief.ru/lessons/javascript/94-javascript-introduction\">JavaScript - Основы</a>\n-- <a href=\"http://learn.javascript.ru/first-steps\">Основы JavaScript</a>\n-- <a href=\"http://itchief.ru/lessons/bootstrap-3/19-introduction-to-twitter-bootstrap-3\">Bootstrap 3 - Основы</a>\n-- <a href=\"http://anton.shevchuk.name/jquery/\">jQuery для начинающих</a>\n-\n-#### Java (базовые вещи)\n-- <a href=\"http://www.intuit.ru/studies/courses/16/16/info\">Интуит. Программирование на Java</a>\n-- <a href=\"https://github.com/JavaOPs/masterjava#Первое-занятие-многопоточность\">1й урок MasterJava: Многопоточность</a>\n-- [Основы Java garbage collection](http://web.archive.org/web/20180831013112/https://ggenikus.github.io/blog/2014/05/04/gc)\n-- <a href=\"https://habrahabr.ru/post/134102/\">Размер Java объектов</a>\n-- <a href=\"http://www.quizful.net/post/java-reflection-api\">Введение в Java Reflection API</a>\n-- <a href=\"https://habrahabr.ru/users/tarzan82/topics/\">Структуры данных в картинках</a>\n-- <a href=\"https://habrahabr.ru/company/luxoft/blog/157273/\">Обзор java.util.concurrent.*</a>\n-- <a href=\"http://www.skipy.ru/technics/synchronization.html\">Синхронизация потоков</a>\n-- <a href=\"http://java67.blogspot.ru/2014/08/difference-between-string-literal-and-new-String-object-Java.html\">String literal pool</a>\n-- <a href=\"https://habrahabr.ru/post/132241/\">Маленькие хитрости Java</a>\n--  <a href=\"https://github.com/winterbe/java8-tutorial\">A Guide to Java 8</a>\n-\n-### Туториалы, разное\n-- [Открытый курс: Spring Boot + HATEOAS](https://javaops.ru/view/bootjava)\n-- [Что нужно знать о бэкенде новичку в веб-разработке](https://tproger.ru/translations/backend-web-development)\n-- [Туториалы: Spring Framework, Hibernate, Java Core, JDBC](http://proselyte.net/tutorials/)\n-\n-#### Сервлеты\n--  <a href=\"https://devcolibri.com/как-создать-servlet-полное-руководство/\">Как создать Servlet? Полное руководство.</a>\n--  [Сервлеты](https://metanit.com/java/javaee/4.1.php)\n-\n-#### JDBC, SQL\n--  <a href=\"https://habrahabr.ru/post/123636/\">Основы SQL на примере задачи</a>\n--  <a href=\"https://www.youtube.com/playlist?list=PLIU76b8Cjem5qdMQLXiIwGLTLyUHkTqi2\">Уроки по JDBC</a>\n--  <a href=\"https://www.codecademy.com/learn/learn-sql\">Learn SQL</a>\n--  <a href=\"http://www.intuit.ru/studies/courses/5/5/info\">Интуит. Основы SQL</a>\n--  <a href=\"http://campus.codeschool.com/courses/try-sql/contents\">Try SQL</a>\n--  <a href=\"https://stepic.org/course/Введение-в-базы-данных-551\">Курс \"Введение в базы данных\"</a>\n-\n-#### Разное\n--  <a href=\"http://javaops.ru/view/test\">Вопросы по собеседованию, ресурсы для подготовки</a>\n--  <a href=\"http://jeeconf.com/materials/intellij-idea/\">Эффективная работа с кодом в IntelliJ IDEA</a>\n--  <a href=\"http://www.quizful.net/test\">Quizful- тесты онлайн</a>\n--  <a href=\"https://stepic.org/course/Введение-в-Linux-73\">Введение в Linux</a>\n-\n-#### Книги\n--  <a href=\"http://www.ozon.ru/context/detail/id/24828676/\">Джошуа Блох: Java. Эффективное программирование. Второе издание</a>\n--  <a href=\"http://www.labirint.ru/books/87603/\">Гамма, Хелм, Джонсон: Приемы объектно-ориентированного проектирования. Паттерны проектирования</a>\n--  <a href=\"http://www.bookvoed.ru/book?id=639284\">Редмонд Э.: Семь баз данных за семь недель. Введение в современные базы данных и идеологию NoSQL</a>\n--  <a href=\"http://www.ozon.ru/context/detail/id/3174887/\">Brian Goetz: Java Concurrency in Practice</a>\n--  <a href=\"http://bookvoed.ru/book?id=2593572\">G.L. McDowell: Cracking the Coding Interview</a>"
  },
  {
    "sha": "f20280b46257966f22cdf9314dce757dcd9125f0",
    "filename": "doc/lesson2patch/lesson2.md",
    "status": "added",
    "additions": 266,
    "deletions": 0,
    "changes": 266,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/doc/lesson2patch/lesson2.md",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/doc/lesson2patch/lesson2.md",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/doc/lesson2patch/lesson2.md?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,266 @@\n+# Онлайн-проект <a href=\"https://github.com/JavaWebinar/topjava\">Topjava</a>\n+\n+## <a href=\"https://drive.google.com/drive/folders/0B9Ye2auQ_NsFfkpsWE1uX19zV19IVHd0bTlDclc5QmhMMm4xa0Npek9DT18tdkwyLTBZdXM\">Материалы занятия</a> (скачать все патчи можно через Download папки patch)\n+\n+## ![hw](https://cloud.githubusercontent.com/assets/13649199/13672719/09593080-e6e7-11e5-81d1-5cb629c438ca.png) Разбор домашнего задания HW1:\n+\n+- **Перед сборкой проекта (или запуском Tomcat) откройте вкладку Maven Projects и сделайте `clean`**\n+- **Если страничка в браузере работает неверно, очистите кэш (`Ctrl+F5` в хроме)**\n+\n+### ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 1. <a href=\"https://drive.google.com/open?id=0B9Ye2auQ_NsFXzByNVF3VV9zM1k\">Отображения списка еды в JSP</a>\n+#### Apply 2_1_HW1.patch\n+\n+> - Переименовал `TimeUtil` в `DateTimeUtil`\n+> - Переименовал `mealList.jsp` в `meals.jsp`\n+> - Изменения в `MealsUtil`:\n+>    - Сделал константу `List<Meal> meals`. [Правило именования констант, которые не \"deeply immutable\"](https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names)\n+>    - Для фильтрации по времени и без нее в метод `filterByPredicate` передаю реализацию `Predicate`, см. паттерн [Стратегия](https://refactoring.guru/ru/design-patterns/strategy) и, если непонятно, [картинку](https://user-images.githubusercontent.com/13649199/95467365-093a1080-0986-11eb-8177-0985456d857a.png)\n+> - Форматирование даты сделал на основе <a href=\"http://stackoverflow.com/questions/35606551/jstl-localdatetime-format#35607225\"> Custom EL function</a>\n+>    - [Create a custom Function for JSTL через tag library descriptor (TLD)](http://findnerd.com/list/view/How-to-create-a-custom-Function-for-JSTL/2869/)\n+> - Добавил еще один способ вывести `dateTime` через стандартную JSTL функцию `replace`  (префикс `fn` в шапке также надо поменять)\n+\n+- [jsp:useBean](http://java-online.ru/jsp-actions.xhtml#useBean)\n+- [MVC - Model View Controller](http://design-pattern.ru/patterns/mvc.html)\n+\n+### ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 2. <a href=\"https://drive.google.com/open?id=0B9Ye2auQ_NsFQndBeWFOa3phRTg\">Optional: реализация CRUD</a>\n+#### Apply 2_2_HW1_optional.patch\n+Про использование паттерна Repository будет подробно рассказано в видео \"Слои приложения\"\n+> - Согласно ответам на [Java Interfaces/Implementation naming convention](https://stackoverflow.com/questions/2814805/java-interfaces-implementation-naming-convention) \n+убрал `Impl` в `InMemory` (и всех последующих) реализациях репозиториев. Они не нужны.\n+> - Поправил `InMemoryMealRepository.save()`. Если обновляется еда, которой нет в хранилище (c несуществующим id), вставка не происходит.\n+> - В `MealServlet.doGet()` сделал выбор через `switch`\n+> - В местах, где требуется `int`, заменил `Integer.valueOf()` на `Integer.parseInt()`\n+> - В `mealForm.jsp` использую <a href=\"http://stackoverflow.com/questions/1890438/how-to-get-parameters-from-the-url-with-jsp#1890462\">параметр запроса `param.action`</a>, который не кладется в атрибуты.\n+> - Переименовал `mealEdit.jsp` в `mealForm.jsp`. Поля ввода формы добавил `required`\n+> - Пофиксил багу c `history.back()` в `mealForm.jsp` для **FireFox** (коммит формы при Cancel, сделал `type=\"button\"`).\n+\n+Дополнительно:\n+  - <a href=\"http://stackoverflow.com/questions/246859/http-1-0-vs-1-1\">HTTP 1.0 vs 1.1</a>\n+\n+### ![question](https://cloud.githubusercontent.com/assets/13649199/13672858/9cd58692-e6e7-11e5-905d-c295d2a456f1.png) Вопросы по HW1\n+\n+> Зачем в `InMemoryMealRepository` наполнять map с помощью нестатического блока инициализации, а не в конструкторе?\n+\n+В общем случае так не делать не надо. Сделал, чтобы напомнить вам про эту конструкцию, см. [Малоизвестные особенности Java](https://habrahabr.ru/post/133237/)\n+\n+> Почему `InMemoryMealRepository` не singleton?\n+\n+Начиная с Servlet API 2.3 пул сервлетов не создается, [создается только один инстанс сервлетов](https://stackoverflow.com/questions/6298309). Те. `InMemoryMealRepository` в нашем случае создается тоже только один раз. Далее все наши классы слоев приложения будут создаваться через Spring, бины которого по умолчанию являются синглтонами (в его контексте).  \n+\n+> `Objects.requireNonNull` в `MealServlet.getId(request)` если у нас нет `id` в запросе бросает NPE (`NullPointerException`). Но оно вылетит и без этого метода. Зачем он нужен и почему мы его не обрабатываем?\n+\n+`Objects.requireNonNull` - это проверка предусловия (будет подробно на 4-м занятии). Означает что в метод пришел неверный аргумент (должен быть не null) и приложение сообщает об ошибке сразу на входе (а не \"может быть где-то потом\"). См. [What is the purpose of Objects#requireNonNull](https://stackoverflow.com/a/27511204/548473). Если ее проглатывать или замазывать, то приложение возможно где-то работает неверно (приходят неверные аргументы), а мы об этом не узнаем. Красиво обрабатывать ошибки будем на последних занятиях (Spring Exception Handling).\n+\n+## Занятие 2:\n+### ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 3. <a href=\"https://drive.google.com/open?id=0B9Ye2auQ_NsFVDJZVTktQzRYTWc\">Библиотека vs Фреймворк. Стандартные библиотеки Apache Commons, Guava</a>\n+- <a href=\"http://commons.apache.org/\">Apache Commons</a>, <a href=\"https://github.com/google/guava/wiki\">Guava</a>\n+  - Guava используется на проекте [Многомодульный maven. Многопоточность. XML (JAXB/StAX). Веб сервисы (JAX-RS/SOAP). Удаленное взаимодействие (JMS/AKKA)](http://javaops.ru/reg/masterjava)  \n+   \n+### ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 4. <a href=\"https://drive.google.com/open?id=1Ve2vLlZAHwOKBfpuOL9X_jbSpQMGsLVP\">Многоуровневая(многослойная) архитектура</a>\n+![Слои приложения](http://javaops.ru/static/images/topjava/top-scheme.jpg)\n+-  <a href=\"https://metanit.com/sharp/mvc5/23.5.php\">Многоуровневая(многослойная) архитектура</a>\n+-  <a href=\"https://ru.wikipedia.org/wiki/Data_Access_Object\">Data Access Object</a>\n+-  <a href=\"http://martinfowler.com/eaaCatalog/dataTransferObject.html\">Паттерн DTO</a>\n+-  <a href=\"http://stackoverflow.com/questions/21554977/should-services-always-return-dtos-or-can-they-also-return-domain-models\">Should services always return DTOs, or can they also return domain models?</a>\n+- [Mapping Entity->DTO goes in which application layer: Controller or Service?](http://stackoverflow.com/questions/31644131/spring-dto-dao-resource-entity-mapping-goes-in-which-application-layer-cont/35798539#35798539)\n+-  Дополнительно:\n+   -  <a href=\"http://stackoverflow.com/questions/1612334/difference-between-dto-vo-pojo-javabeans\">Value Object и Data Transfer Object</a>\n+   - <a href=\"http://stackoverflow.com/questions/6640784/difference-between-active-record-and-dao\">Difference between Active Record and DAO</a>\n+\n+### ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 5. <a href=\"https://drive.google.com/open?id=1pWsm_fNfxqPB8yygWJsMUpvWMVyRxIqt\">Создание каркаса приложения для пользователей</a>\n+\n+#### Apply 2_3_app_layers.patch\n+> - Убрал интерфейсы к сервисам. Я всегда предпочитаю писать меньше кода и в случае с одной реализацией можно обходится без них. \n+    По поводу инкапсуляции и отделения API от реализации - интерфейсы к сервисам это внутренняя часть приложения с одной реализацией. Меньше кода, проще поддерживать.\n+> - Переименовал `ExceptionUtil` в `ValidationUtil`\n+> - Поменял `LoggedUser` на `SecurityUtil`. Это класс, из которого приложение будет получать данные залогиненного пользователя (пока [аутентификации](https://ru.wikipedia.org/wiki/Аутентификация) нет, он реализован как заглушка). Находится в пакете `web`, т.к. аутентификация/[авторизация](https://ru.wikipedia.org/wiki/Авторизация) происходит на слое контроллеров и остальные слои приложения про нее знать не должны.\n+> - Добавил проверку id пользователя, пришедшего в контроллер ([treat IDs in REST body](https://stackoverflow.com/a/32728226/548473), \"If it is a public API you should be conservative when you reply, but accept liberally\"). Считаю это важной частью проверки входных данных в контроллере, не забывайте это делать в ваших выпускных проектах. \n+\n+\n+## ![question](https://cloud.githubusercontent.com/assets/13649199/13672858/9cd58692-e6e7-11e5-905d-c295d2a456f1.png) Ваши вопросы\n+\n+> Почему у `User.registered` тип `Date`, а `Meal.dateTime` `LocalDateTime `?\n+\n+По логике приложения время регистрации - абсолютное (конкретный момент), а время еды по бизнес логике относительно (те не зависит от часового пояса, завтрак и в Африке должен быть завтраком)\n+\n+>  Какова цель деления приложения на слои?\n+\n+Управляемость проекта (особенно большого) повышается на порядок:\n+- Обеспечивается меньшая связываемость. Допустим если мы меняем что-то в контроллере, то сервис эти изменения не задевают.\n+- Облегчается тестирование (мы будем тестировать слои сервисов и контроллеров отдельно)\n+- Четко разделяется функционал - где писать, куда смотреть. Не создаются [God objects](https://ru.wikipedia.org/wiki/Божественный_объект)\n+\n+> DTO используются когда есть избыточность запросов, которую мы уменьшаем, собрав данные из разных бинов в один? Когда DTO необходимо использовать?\n+\n+(D)TO может быть как частью одного entity  (набор полей) так и набором нескольких entities.\n+В нашем проекте для данных, которые надо отдавать наружу и отличающихся от Entiy (хранимый бин), мы будем делать (Data) Transfer Object и класть в отдельный пакет to. Например `MealsTo` мы отдаем наружу и он является Transfer Object, его пернесем в пакет `to`.\n+На многих проектах (и собеседованиях) практикуют разделение на уровне maven модулей entity слоя от логики и соответствующей конвертацией ВСЕХ Entity в TO, даже если у них те же самые поля.\n+Хороший ответ когда TO обязательны есть на <a href=\"http://stackoverflow.com/questions/21554977/should-services-always-return-dtos-or-can-they-also-return-domain-models#21569720\">stackoverflow: When to Use</a>.\n+\n+> Почему контроллеры положили в папку web, а не в controllers?\n+\n+То же самое что `domain/model` - просто разные названия, которые устоялись в Java. Не придумывайте своих!\n+\n+> Зачем мы наследуем `NotFoundException` от `RuntimeException`?\n+\n+Так с ним удобнее работать. И у нас нет никаких действий по восстановлению состояния приложения (no recoverable conditions): <a href=\"http://stackoverflow.com/questions/6115896/java-checked-vs-unchecked-exception-explanation\">checked vs unchecked exception</a>. По последним данным checked exception вообще depricated: <a href=\"http://blog.takipi.com/ignore-checked-exceptions-all-the-cool-devs-are-doing-it-based-on-600000-java-projects\">Ignore Checked Exceptions</a>\n+\n+> Что такое `ProfileRestController`?\n+\n+Контроллер, где залогиненный пользователь будет работать со своими данными\n+\n+> Зачем в `AdminRestController` переопределяются методы родителя с вызовом тех же родительских?\n+\n+Сделано на будущее, мы будем менять этот код.\n+\n+> Что лучше возвращать из API: `Collection` или `List`\n+\n+Вообще, как правило, возвращают `List`, если не просится по коду более общий случай (например возможный `Set` или `Collection`, возвращаемый `Map.values()`). Если возвращается отсортированный список, то `List` будет адекватнее.\n+\n+### ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 6. [Что такое Spring Framework](https://www.youtube.com/watch?v=megjriLG35I). \n+- [Wiki: Spring Framework](https://ru.wikipedia.org/wiki/Spring_Framework)\n+- [JVM Ecosystem Report 2020: Spring](https://snyk.io/blog/spring-dominates-the-java-ecosystem-with-60-using-it-for-their-main-applications/)\n+- [2020 Java Technology Report](https://www.jrebel.com/blog/2020-java-technology-report)\n+- [Spring Framework Documentation](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/index.html)\n+- [Что такое Spring Framework? Внедрение зависимостей](https://habr.com/ru/post/490586/)\n+- [Евгений Борисов — Spring-построитель](https://www.youtube.com/watch?v=rd6wxPzXQvo)\n+- [Инверсия управления] (https://ru.wikipedia.org/wiki/Инверсия_управления)\n+#### Apply 2_4_add_spring.patch\n+\n+###  ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 7. [Запуск Spring Application Context](https://drive.google.com/file/d/1y-3ok-6CzhjnR4Rmv3-z4EV4VsElIDn6)\n+- [Container Overview](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-basics)\n+#### Apply 2_5_add_spring_context.patch\n+\n+###  ![video](https://cloud.githubusercontent.com/assets/13649199/13672715/06dbc6ce-e6e7-11e5-81a9-04fbddb9e488.png) 8. [Dependency Injection, Annotation_processing](https://drive.google.com/file/d/1Z9cgULTrXxgeaqqnsh7rJtIaD2LSdzHT)\n+#### Apply 2_6_dependency_injection.patch\n+- [IoC, DI, IoC-контейнер. Просто о простом](http://habrahabr.ru/post/131993/)\n+- [Что такое Spring Framework? Внедрение зависимостей](https://habr.com/ru/post/490586/)\n+- [Перевод \"Field Dependency Injection Considered Harmful\"](https://habrahabr.ru/post/334636/)\n+- [Field vs Constructor vs Setter DI](http://stackoverflow.com/questions/39890849/what-exactly-is-field-injection-and-how-to-avoid-it)\n+\n+#### Apply 2_7_annotation_processing.patch\n+-  [Spring Auto Scanning Components](http://www.mkyong.com/spring/spring-auto-scanning-components)\n+-  [Difference between @Component, @Repository & @Service annotations in Spring](http://stackoverflow.com/questions/6827752/whats-the-difference-between-component-repository-service-annotations-in)\n+-  [Использование аннотации @Autowired](http://www.seostella.com/ru/article/2012/02/12/ispolzovanie-annotacii-autowired-v-spring-3.html)\n+-  Дополнительное:\n+   - [Подготовка к Spring Professional Certification. Контейнер, IoC, бины](https://habr.com/ru/post/470305/)\n+   - [Spring на GitHub](https://github.com/spring-projects)\n+   - [Spring Annotations](https://dzone.com/refcardz/spring-annotations)\n+\n+#### Дополнительно видео по Spring\n+   - [Юрий Ткач: Spring Framework - The Basics](https://www.youtube.com/playlist?list=PL6jg6AGdCNaWF-sUH2QDudBRXo54zuN1t)\n+   - [Java Brains: Spring Framework](https://www.youtube.com/playlist?list=PLC97BDEFDCDD169D7)\n+   - [Тимур Батыршинов: Spring Core - основы фреймворка, ядро](https://www.youtube.com/watch?v=CfHDr-19WWY&list=PL8X2nqRlWfaYYP1-qXjdPKE7bXYkl6aL4)\n+\n+## ![question](https://cloud.githubusercontent.com/assets/13649199/13672858/9cd58692-e6e7-11e5-905d-c295d2a456f1.png) Ваши вопросы\n+> Что такое схема в spring-app.xml xsi:schemaLocation и зачем она нужна\n+\n+<a href=\"https://ru.wikipedia.org/wiki/XML_Schema\">XML схема</a> нужна для валидации xml, IDEA делает по ней автозаполнение.\n+\n+> Что означает для Spring\n+\n+     <bean class=\"ru.javawebinar.topjava.service.UserService\">\n+         <property name=\"repository\" ref=\"inmemoryUserRepository\"/>\n+     </bean> ?\n+\n+Можно сказать так: создай и занеси в свой контекст экземпляр класса (бин) `UserService` и присвой его проперти `repository` бин `inmemoryUserRepository`, который возьми из своего контекста.\n+\n+> `SecurityUtil.authUserId()`  и `user.id` это одно и то или это разные вещи?\n+\n+`User.id` это уникальный идентификатор юзера, которых в приложении много.\n+`SecurityUtil.authUserId()` это идентификатор `id` залогиненного юзера. Мы можем, например, получить самого залогиненного юзера, выполнив запрос с `User.id==SecurityUtil.authUserId()`\n+Когда вы логинитесь в свое почтовое приложение, оно отдает вам именно ваши письма на основе вашего `id`, который она определяет и запоминает во время аутентификации (логина).  \n+У нас пока этого нет и `id` задается константой (хардкодится). Но когда мы сделаем настоящую аутентификацию, все будет работать для любого залогиненного пользователя.\n+\n+> Как биндинг происходит для `@Autowired`? Как поступать, если у нас больше одной реализации `UserRepository`?\n+\n+`@Autowired`  инжектит по типу (т.е. ижектит класс который реализует `UserRepository`). Обычно он один. Если у нас несколько реализаций, Spring не поднимится и поругается - `No unique bean`.\n+ В этом случае <a href=\"http://www.mkyong.com/spring/spring-autowiring-qualifier-example/\">можно уточнить имя бина через @Qualifier</a>. `@Qualifier` обычно добавляют только в случае нескольких реализаций.\n+См. [Inject 2 beans of same type](https://stackoverflow.com/a/2153680/548473)\n+\n+> Почему нельзя сервлет помещать в Spring контекст?\n+\n+Сервлеты- это исключительно классы `servlet-api` (веб контейнера), они инстанциируются Tomcat. Те технически можно (без `init/destroy`), но идеологически - неверно. Cоздастся два сервлета: один настоящий, Tomcat-ом, и второй - нерабочий, Spring-ом. НЕ надо включать сервлет в контекст Spring.\n+\n+--------------------\n+- **Еще раз смотрим на [демо приложение](http://topjava.herokuapp.com) и вникаем, что такое пользователь и его еда и что он может с ней сделать. \n+Когда пользователь логинится в приложении, его id и норма калорий \"чудесным образом\" попадают в  `SecurityUtil.authUserId() / SecurityUtil.authUserCaloriesPerDay()`. Как они реально туда попадут будет в уроке  9 (Spring Security, сессия и куки)**\n+- **Перед началом выполнения ДЗ (если есть хоть какие-то сомнения) прочитайте ВСЕ ДЗ. Если вопросы остаются - то ВСЕ подсказки**. Особенно этот пункт важный, когда будете делать реальное рабочее ТЗ.\n+\n+## ![hw](https://cloud.githubusercontent.com/assets/13649199/13672719/09593080-e6e7-11e5-81d1-5cb629c438ca.png) Домашнее задание HW02\n+- 1: Имплементировать `InMemoryUserRepository` по аналогии с `InMemoryMealRepository` (список пользователей возвращать отсортированным по имени)\n+- 2: сделать `Meal extends AbstractBaseEntity`, `MealTo` перенести в пакет `ru.javawebinar.topjava.to` (transfer objects)\n+- 3: Изменить `MealRepository` и `InMemoryMealRepository` таким образом, чтобы вся еда всех пользователей находилась в одном общем хранилище, но при этом каждый конкретный аутентифицированный пользователь мог видеть и редактировать только свою еду.\n+  - 3.1: реализовать хранение еды для каждого пользователя можно с добавлением поля `userId` в `Meal` ИЛИ без него (как нравится). Напомню, что репозиторий один и приложение может работать одновременно с многими пользователями.\n+  - 3.2: если по запрошенному id еда отсутствует или чужая, возвращать `null/false` (см. комментарии в `MealRepository`)\n+  - 3.3: список еды возвращать отсортированный в обратном порядке по датам\n+  - 3.4: дополнительно: попробуйте сделать реализацию атомарной  (те учесть коллизии при одновременном изменении еды одного пользователя)\n+- 4: Реализовать слои приложения для функциональности \"еда\". API контроллера должна удовлетворять все потребности демо приложения и ничего лишнего (см. [демо](http://topjava.herokuapp.com)). Поиск и сортировка в таблице реализованы на UI (в браузере), в приложении делать не нужно.\n+  - **Смотрите на реализацию слоя для user и делаете по аналогии! Если там что-то непонятно, не надо исправлять или делать по своему. Задавайте вопросы. Если действительно нужна правка - я сделаю и напишу всем.**\n+  - 4.1: после авторизации (сделаем позднее), id авторизованного юзера можно получить из `SecurityUtil.authUserId()`. Запрос попадает в контроллер, методы которого будут доступны снаружи по http, т.е. запрос можно будет сделать с ЛЮБЫМ id для еды\n+  (не принадлежащем авторизированному пользователю). Нельзя позволять модифицировать/смотреть чужую еду.\n+  - 4.2: `SecurityUtil` может использоваться только на слое web (см. реализацию `ProfileRestController`). `MealService` можно тестировать без подмены логики авторизации, поэтому **в методы сервиса и репозитория мы передаем параметр `userId`: id авторизованного пользователя (предполагаемого владельца еды)**.\n+  - 4.3: если еда не принадлежит авторизированному пользователю или отсутствует, в `MealService` бросать `NotFoundException`.\n+  - 4.4: конвертацию в `MealTo` можно делать как в слое web, так и в service ([Mapping Entity->DTO: Controller or Service?](http://stackoverflow.com/questions/31644131))\n+  - 4.5: в `MealService` постараться сделать в каждом методе только одни запрос к `MealRepository`\n+  - 4.6 еще раз: не надо в названиях методов повторять названия класса (`Meal`).\n+- 5: включить классы еды в контекст Spring (добавить аннотации) и вызвать из `SpringMain` любой метод `MealRestController` (проверить что Spring все корректно заинжектил)\n+\n+### Optional\n+- 6: в `MealServlet` сделать инициализацию Spring, достать `MealRestController` из контекста и работать с едой через него (**как в `SpringMain`**). `pom.xml` НЕ менять, работаем со `spring-context`. Сервлет обращается к контролеру, контроллер вызывает сервис, сервис - репозиторий. Когда будем работать через Spring MVC, `MealServlet` удалим, останется только контроллер.\n+- 7: добавить в `meals.jsp` и `MealServlet` фильтрацию еды по дате и по времени (см. [демо](http://topjava.herokuapp.com)). Сброс фильтра делать не надо (реализуем через ajax в HW8). ВНИМАНИЕ: в приложении фильтрация делается не по интервалу дата-время, а отдельно по датам и затем отдельно по времени.\n+- 8: добавить выбор текущего залогиненного пользователя (имитация аутентификации, сделать Select с двумя элементами со значениями 1 и 2 в `index.html` и `SecurityUtil.setAuthUserId(userId)` в `UserServlet`).\n+Настоящая аутентификация будет через Spring Security позже.\n+\n+----------------------------\n+### Итоги занятия после выполнения ДЗ: \n+Мы создали архитектуру нашего приложения с разделением на слои и внедрили в наш проект фреймворк Spring, который их связывает.  \n+Далее мы реализовали функционал нашего приложения, как он сделан в [демо приложении](http://topjava.herokuapp.com) (но с фиктивной аутентификацией)\n+\n+---------------------\n+\n+### ![error](https://cloud.githubusercontent.com/assets/13649199/13672935/ef09ec1e-e6e7-11e5-9f79-d1641c05cbe6.png) Типичные ошибки и подсказки по реализации\n+\n+- 1: **В реализации `InMemoryUserRepository`**\n+  - 1.1: `getByEmail` попробуйте сделать через `stream`\n+  - 1.2: `delete` попробуйте сделать за одно обращение к map (без `containsKey`). При удалении пользователя его еду можно оставить, при реализации в базе будет CASCADE.\n+  - 1.3: при запросе списка юзеров предусмотрите случай одинаковых `User.name` (порядок должен быть зафиксированным). Поле `User.email`у нас уникально - в базе будет ограничение.\n+- 2: **В реализации `InMemoryMealRepository`**\n+  - 2.1: В `Meal`, которая приходит из браузера в контроллер, нет никакой информации о пользователе (еда приходит в контроллер **БЕЗ `user/userId`, она может быть только от авторизированного пользователя**). По id еды и авторизованному пользователю нужно проверить ее принадлежность (его это еда или чужая)\n+  **Проверьте сценарий: авторизованный пользователь пробует изменить чужую еду (id еды ему не принадлежит).**\n+  - 2.2: `get\\update\\delete` - следите, чтобы не было NPE (`NullPointException` может быть, если в хранилище отсутствует юзер или еда).\n+  - 2.3: Фильтрацию по датам сделать в репозитории т.к. из базы будем брать сразу отфильтрованные по дням записи. Следите чтобы **первый и последний день не были обрезаны, иначе сумма калорий будет неверная**.\n+  - 2.4: Если запрашивается список и он пустой, не возвращайте NULL! По пустому списку можно легко итерироваться без риска `NullPoinException`.\n+  - 2.5: Не дублируйте код в `getAll` и метод с фильтрацией\n+  - 2.6: попробуйте учесть, что следующая реализация (сортировка, фильтрация) будет делаться прямо в базе данных\n+- 3: Проверьте, что удалили `Meal.id` и связанные с ним методы (он уже есть в базовом `BaseEntity`)\n+- 4: Проверку `isBetweenHalfOpen` с датами сделать в `DateTimeUtil`. Если фильтруете по `LocalTime` и `LocalDateTime`, попробуйте использовать один метод и дженерики (см. [Generics Tutorials](https://docs.oracle.com/javase/tutorial/extra/generics/morefun.html) и \n+[Погружаемся в Java Generics](https://habr.com/ru/company/sberbank/blog/416413/))\n+- 5: **Реализация 'MealRestController' должен уметь обрабатывать запросы**:\n+  - 5.1: Отдать свою еду (для отображения в таблице, формат `List<MealTo>`), запрос БЕЗ параметров\n+  - 5.2: Отдать свою еду, отфильтрованную по startDate, startTime, endDate, endTime\n+  - 5.3: Отдать/удалить свою еду по id, параметр запроса - id еды. Если еда с этим id чужая или отсутствует - `NotFoundException`\n+  - 5.4: Сохранить/обновить еду, параметр запроса - Meal. Если обновляемая еда с этим id чужая или отсутствует - `NotFoundException`\n+  - 5.5: Сервлет мы удалим, а контроллер останется, поэтому возвращать `List<MealTo>` надо из контроллера. И userId принимать в контроллере НЕЛЬЗЯ (иначе - для чего аторизация?). \n+  - 5.6: В концепции REST при update дополнительно принято передавать id (см. `AdminRestController.update`)\n+  - 5.7: Для получения всей своей еды сделайте отдельный `getAll` без применения фильтра\n+- 6: Проверьте корректную обработку пустых значений date и time (в частности, если все значения пустые, должен выводится весь список)\n+- 7: `id` авторизированного пользователя получаем так: `SecurityUtil.authUserId()`, cм. `ProfileRestController`\n+- 8: В `MealServlet`\n+  - 8.1: Закрывать springContext в сервлете грамотнее всего в `HttpServlet.destroy()`: если где-то в контексте Spring будет ленивая инициализация, метод-фабрика, не синглтон-scope, то контекст понадобится при работе приложения. У нас такого нет, но делать надо все грамотно.\n+  - 8.2: Не храните параметры фильтра как члены класса сервлета, это не многопоточно! Один экземпляр сервлета используется всеми запросами на сервер, попробуйте дернуть его из 2х браузеров.\n+  - 8.3: В сервлете нельзя использовать `@Autowired` и `@Component`. См вопрос выше- \"Почему нельзя сервлет помещать в Spring контекст?\"\n+\n+#### Если с ДЗ большие сложности, можно получить итоговые Meal интерфейсы для сверки в личке (`@Katherine`, `@Valeria`).\n+И напоследок история от Татьяны:\n+> 2.1 По id еды и авторизованному пользователю нужно проверить ее принадлежность.\n+\n+На примере уточню:\n+Вася Пупкин нашел неименную банковскую карточку, т.е. номер есть, но имени нет.\n+Т.к. Вася не очень честный человек, то решил снять деньги с чужой карточки.\n+Наклеил *стикер со своим именем* на карточку и пришел в банк. Дает свой паспорт и карточку операционисту и просит снять всю наличность.\n+Варианты:\n+1. операционист сверяет стикер на карточке и паспорт - все ок, Вася получает наличность\n+2. операционист не обращает внимания на стикер, *а делает запрос в БД по номеру и сверяет ФИО в БД с паспортом* - ФИО не совпали, Вася в пролете\n+\n+Кто и так это понимает, тому небольшой спойлер. А кто не понимает, может, переспросят, пообсуждают."
  },
  {
    "sha": "a9bc56e31e1110f201face37cb2982ce53a7bec6",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 101,
    "deletions": 2,
    "changes": 103,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/pom.xml",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/pom.xml",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/pom.xml?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -4,7 +4,7 @@\n \n     <groupId>ru.javawebinar</groupId>\n     <artifactId>topjava</artifactId>\n-    <packaging>jar</packaging>\n+    <packaging>war</packaging>\n \n     <version>1.0-SNAPSHOT</version>\n \n@@ -15,11 +15,23 @@\n         <java.version>1.8</java.version>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+\n+        <spring.version>5.2.9.RELEASE</spring.version>\n+\n+        <!-- Logging -->\n+        <logback.version>1.2.3</logback.version>\n+        <slf4j.version>1.7.30</slf4j.version>\n+\n+        <!--DB-->\n+        <postgresql.version>42.2.18</postgresql.version>\n+        <!--    Tests  -->\n+        <junit.version>4.13.2</junit.version>\n+        <assertj.version>3.19.0</assertj.version>\n     </properties>\n \n     <build>\n         <finalName>topjava</finalName>\n-        <defaultGoal>install</defaultGoal>\n+        <defaultGoal>package</defaultGoal>\n         <plugins>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n@@ -30,10 +42,97 @@\n                     <target>${java.version}</target>\n                 </configuration>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>2.22.2</version>\n+                <configuration>\n+                    <argLine>-Dfile.encoding=UTF-8</argLine>\n+                </configuration>\n+            </plugin>\n         </plugins>\n     </build>\n \n     <dependencies>\n+        <!-- Logging with SLF4J & LogBack -->\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+            <version>${slf4j.version}</version>\n+            <scope>compile</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>jul-to-slf4j</artifactId>\n+            <version>${slf4j.version}</version>\n+            <scope>runtime</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>ch.qos.logback</groupId>\n+            <artifactId>logback-classic</artifactId>\n+            <version>${logback.version}</version>\n+            <scope>runtime</scope>\n+        </dependency>\n+\n+        <!-- Spring -->\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-context</artifactId>\n+            <version>${spring.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-jdbc</artifactId>\n+            <version>${spring.version}</version>\n+        </dependency>\n+\n+        <!--DataBase-->\n+        <dependency>\n+            <groupId>org.postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <version>${postgresql.version}</version>\n+        </dependency>\n+\n+        <!--Web-->\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>javax.servlet-api</artifactId>\n+            <version>4.0.1</version>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>jstl</artifactId>\n+            <version>1.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.annotation</groupId>\n+            <artifactId>javax.annotation-api</artifactId>\n+            <version>1.3.1</version>\n+        </dependency>\n+\n+        <!--Test-->\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-test</artifactId>\n+            <version>${spring.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n+            <version>${assertj.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n     <profiles>"
  },
  {
    "sha": "c2f9cc618f7c5770cfa512fb6fb231d41e4f488d",
    "filename": "src/main/java/ru/javawebinar/topjava/Main.java",
    "status": "removed",
    "additions": 0,
    "deletions": 11,
    "changes": 11,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c91877064f1b5b7554849e02d7479cdabac24219/src/main/java/ru/javawebinar/topjava/Main.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c91877064f1b5b7554849e02d7479cdabac24219/src/main/java/ru/javawebinar/topjava/Main.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/Main.java?ref=c91877064f1b5b7554849e02d7479cdabac24219",
    "patch": "@@ -1,11 +0,0 @@\n-package ru.javawebinar.topjava;\n-\n-/**\n- * @see <a href=\"http://topjava.herokuapp.com\">Demo application</a>\n- * @see <a href=\"https://github.com/JavaOPs/topjava\">Initial project</a>\n- */\n-public class Main {\n-    public static void main(String[] args) {\n-        System.out.format(\"Hello TopJava Enterprise!\");\n-    }\n-}"
  },
  {
    "sha": "46e8d6e3038db0e3539be0298500a55c62e4fde4",
    "filename": "src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,48 @@\n+package ru.javawebinar.topjava.model;\n+\n+public abstract class AbstractBaseEntity {\n+    public static final int START_SEQ = 100000;\n+\n+    protected Integer id;\n+\n+    public AbstractBaseEntity() {\n+    }\n+\n+    protected AbstractBaseEntity(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public boolean isNew() {\n+        return this.id == null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return getClass().getSimpleName() + \":\" + id;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        AbstractBaseEntity that = (AbstractBaseEntity) o;\n+        return id != null && id.equals(that.id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return id == null ? 0 : id;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5f0fde2bbfa8be474734af72e4586737b3bb75c4",
    "filename": "src/main/java/ru/javawebinar/topjava/model/AbstractNamedEntity.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/AbstractNamedEntity.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/AbstractNamedEntity.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/model/AbstractNamedEntity.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.javawebinar.topjava.model;\n+\n+public abstract class AbstractNamedEntity extends AbstractBaseEntity {\n+\n+    protected String name;\n+\n+    public AbstractNamedEntity() {\n+    }\n+\n+    protected AbstractNamedEntity(Integer id, String name) {\n+        super(id);\n+        this.name = name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return super.toString() + '(' + name + ')';\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9eed15f706beeaddd031d692507c1df8bbd96d7d",
    "filename": "src/main/java/ru/javawebinar/topjava/model/Meal.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/Meal.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/Meal.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/model/Meal.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,54 @@\n+package ru.javawebinar.topjava.model;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+public class Meal extends AbstractBaseEntity {\n+    private final LocalDateTime dateTime;\n+\n+    private final String description;\n+\n+    private final int calories;\n+\n+    public Meal(LocalDateTime dateTime, String description, int calories) {\n+        this(null, dateTime, description, calories);\n+    }\n+\n+    public Meal(Integer id, LocalDateTime dateTime, String description, int calories) {\n+        super(id);\n+        this.dateTime = dateTime;\n+        this.description = description;\n+        this.calories = calories;\n+    }\n+\n+    public LocalDateTime getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public int getCalories() {\n+        return calories;\n+    }\n+\n+    public LocalDate getDate() {\n+        return dateTime.toLocalDate();\n+    }\n+\n+    public LocalTime getTime() {\n+        return dateTime.toLocalTime();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Meal{\" +\n+                \"id=\" + id +\n+                \", dateTime=\" + dateTime +\n+                \", description='\" + description + '\\'' +\n+                \", calories=\" + calories +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "acb7a276f6dcb3e7d6ce7d490025a3b1172ad92d",
    "filename": "src/main/java/ru/javawebinar/topjava/model/Role.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/Role.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/Role.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/model/Role.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,6 @@\n+package ru.javawebinar.topjava.model;\n+\n+public enum Role {\n+    USER,\n+    ADMIN\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "446d86ffef6a7f4f36e69c601c94983bd0d04fb1",
    "filename": "src/main/java/ru/javawebinar/topjava/model/User.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/User.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/model/User.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/model/User.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,106 @@\n+package ru.javawebinar.topjava.model;\n+\n+import org.springframework.util.CollectionUtils;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static ru.javawebinar.topjava.util.MealsUtil.DEFAULT_CALORIES_PER_DAY;\n+\n+public class User extends AbstractNamedEntity {\n+\n+    private String email;\n+\n+    private String password;\n+\n+    private boolean enabled = true;\n+\n+    private Date registered = new Date();\n+\n+    private Set<Role> roles;\n+\n+    private int caloriesPerDay = DEFAULT_CALORIES_PER_DAY;\n+\n+    public User() {\n+    }\n+\n+    public User(User u) {\n+        this(u.getId(), u.getName(), u.getEmail(), u.getPassword(), u.getCaloriesPerDay(), u.isEnabled(), u.getRegistered(), u.getRoles());\n+    }\n+\n+    public User(Integer id, String name, String email, String password, Role role, Role... roles) {\n+        this(id, name, email, password, DEFAULT_CALORIES_PER_DAY, true, new Date(), EnumSet.of(role, roles));\n+    }\n+\n+    public User(Integer id, String name, String email, String password, int caloriesPerDay, boolean enabled, Date registered, Collection<Role> roles) {\n+        super(id, name);\n+        this.email = email;\n+        this.password = password;\n+        this.caloriesPerDay = caloriesPerDay;\n+        this.enabled = enabled;\n+        this.registered = registered;\n+        setRoles(roles);\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    public Date getRegistered() {\n+        return registered;\n+    }\n+\n+    public void setRegistered(Date registered) {\n+        this.registered = registered;\n+    }\n+\n+    public void setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    public int getCaloriesPerDay() {\n+        return caloriesPerDay;\n+    }\n+\n+    public void setCaloriesPerDay(int caloriesPerDay) {\n+        this.caloriesPerDay = caloriesPerDay;\n+    }\n+\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    public Set<Role> getRoles() {\n+        return roles;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setRoles(Collection<Role> roles) {\n+        this.roles = CollectionUtils.isEmpty(roles) ? EnumSet.noneOf(Role.class) : EnumSet.copyOf(roles);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"User{\" +\n+                \"id=\" + id +\n+                \", email=\" + email +\n+                \", name=\" + name +\n+                \", enabled=\" + enabled +\n+                \", roles=\" + roles +\n+                \", caloriesPerDay=\" + caloriesPerDay +\n+                '}';\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f1c23152752eb08be21e867ff58d279ffa2f790c",
    "filename": "src/main/java/ru/javawebinar/topjava/repository/MealRepository.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/repository/MealRepository.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/repository/MealRepository.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/repository/MealRepository.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.javawebinar.topjava.repository;\n+\n+import ru.javawebinar.topjava.model.Meal;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+public interface MealRepository {\n+    // null if not found, when updated\n+    Meal save(Meal meal, int userId);\n+\n+    // false if not found\n+    boolean delete(int id, int userId);\n+\n+    // null if not found\n+    Meal get(int id, int userId);\n+\n+    List<Meal> getAll(int userId);\n+\n+    // ORDERED dateTime desc\n+    List<Meal> getBetweenHalfOpen(LocalDateTime startDateTime, LocalDateTime endDateTime, int userId);\n+}"
  },
  {
    "sha": "138369789175aa8edbbf3b515e4fa33b61bcd7bf",
    "filename": "src/main/java/ru/javawebinar/topjava/repository/UserRepository.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/repository/UserRepository.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/repository/UserRepository.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/repository/UserRepository.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,21 @@\n+package ru.javawebinar.topjava.repository;\n+\n+import ru.javawebinar.topjava.model.User;\n+\n+import java.util.List;\n+\n+public interface UserRepository {\n+    // null if not found, when updated\n+    User save(User user);\n+\n+    // false if not found\n+    boolean delete(int id);\n+\n+    // null if not found\n+    User get(int id);\n+\n+    // null if not found\n+    User getByEmail(String email);\n+\n+    List<User> getAll();\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c29288c39b390c3665992029c8831c2829e283d2",
    "filename": "src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcMealRepository.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcMealRepository.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcMealRepository.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcMealRepository.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,37 @@\n+package ru.javawebinar.topjava.repository.jdbc;\n+\n+import org.springframework.stereotype.Repository;\n+import ru.javawebinar.topjava.model.Meal;\n+import ru.javawebinar.topjava.repository.MealRepository;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Repository\n+public class JdbcMealRepository implements MealRepository {\n+\n+    @Override\n+    public Meal save(Meal meal, int userId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean delete(int id, int userId) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Meal get(int id, int userId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<Meal> getAll(int userId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<Meal> getBetweenHalfOpen(LocalDateTime startDateTime, LocalDateTime endDateTime, int userId) {\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "7f6f8626a869df23b6e42c83d274c575dc4657ec",
    "filename": "src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserRepository.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserRepository.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserRepository.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserRepository.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,81 @@\n+package ru.javawebinar.topjava.repository.jdbc;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.support.DataAccessUtils;\n+import org.springframework.jdbc.core.BeanPropertyRowMapper;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.core.simple.SimpleJdbcInsert;\n+import org.springframework.stereotype.Repository;\n+import ru.javawebinar.topjava.model.User;\n+import ru.javawebinar.topjava.repository.UserRepository;\n+\n+import java.util.List;\n+\n+@Repository\n+public class JdbcUserRepository implements UserRepository {\n+\n+    private static final BeanPropertyRowMapper<User> ROW_MAPPER = BeanPropertyRowMapper.newInstance(User.class);\n+\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+\n+    private final SimpleJdbcInsert insertUser;\n+\n+    @Autowired\n+    public JdbcUserRepository(JdbcTemplate jdbcTemplate, NamedParameterJdbcTemplate namedParameterJdbcTemplate) {\n+        this.insertUser = new SimpleJdbcInsert(jdbcTemplate)\n+                .withTableName(\"users\")\n+                .usingGeneratedKeyColumns(\"id\");\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+        this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;\n+    }\n+\n+    @Override\n+    public User save(User user) {\n+        MapSqlParameterSource map = new MapSqlParameterSource()\n+                .addValue(\"id\", user.getId())\n+                .addValue(\"name\", user.getName())\n+                .addValue(\"email\", user.getEmail())\n+                .addValue(\"password\", user.getPassword())\n+                .addValue(\"registered\", user.getRegistered())\n+                .addValue(\"enabled\", user.isEnabled())\n+                .addValue(\"caloriesPerDay\", user.getCaloriesPerDay());\n+\n+        if (user.isNew()) {\n+            Number newKey = insertUser.executeAndReturnKey(map);\n+            user.setId(newKey.intValue());\n+        } else if (namedParameterJdbcTemplate.update(\n+                \"UPDATE users SET name=:name, email=:email, password=:password, \" +\n+                        \"registered=:registered, enabled=:enabled, calories_per_day=:caloriesPerDay WHERE id=:id\", map) == 0) {\n+            return null;\n+        }\n+        return user;\n+    }\n+\n+    @Override\n+    public boolean delete(int id) {\n+        return jdbcTemplate.update(\"DELETE FROM users WHERE id=?\", id) != 0;\n+    }\n+\n+    @Override\n+    public User get(int id) {\n+        List<User> users = jdbcTemplate.query(\"SELECT * FROM users WHERE id=?\", ROW_MAPPER, id);\n+        return DataAccessUtils.singleResult(users);\n+    }\n+\n+    @Override\n+    public User getByEmail(String email) {\n+//        return jdbcTemplate.queryForObject(\"SELECT * FROM users WHERE email=?\", ROW_MAPPER, email);\n+        List<User> users = jdbcTemplate.query(\"SELECT * FROM users WHERE email=?\", ROW_MAPPER, email);\n+        return DataAccessUtils.singleResult(users);\n+    }\n+\n+    @Override\n+    public List<User> getAll() {\n+        return jdbcTemplate.query(\"SELECT * FROM users ORDER BY name, email\", ROW_MAPPER);\n+    }\n+}"
  },
  {
    "sha": "7957a0895d47ac84b00b15ccb8e2c9103b440d74",
    "filename": "src/main/java/ru/javawebinar/topjava/service/MealService.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/service/MealService.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/service/MealService.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/service/MealService.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,47 @@\n+package ru.javawebinar.topjava.service;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Service;\n+import ru.javawebinar.topjava.model.Meal;\n+import ru.javawebinar.topjava.repository.MealRepository;\n+\n+import java.time.LocalDate;\n+import java.util.List;\n+\n+import static ru.javawebinar.topjava.util.DateTimeUtil.atStartOfDayOrMin;\n+import static ru.javawebinar.topjava.util.DateTimeUtil.atStartOfNextDayOrMax;\n+import static ru.javawebinar.topjava.util.ValidationUtil.checkNotFoundWithId;\n+\n+@Service\n+public class MealService {\n+\n+    private final MealRepository repository;\n+\n+    public MealService(MealRepository repository) {\n+        this.repository = repository;\n+    }\n+\n+    public Meal get(int id, int userId) {\n+        return checkNotFoundWithId(repository.get(id, userId), id);\n+    }\n+\n+    public void delete(int id, int userId) {\n+        checkNotFoundWithId(repository.delete(id, userId), id);\n+    }\n+\n+    public List<Meal> getBetweenInclusive(@Nullable LocalDate startDate, @Nullable LocalDate endDate, int userId) {\n+        return repository.getBetweenHalfOpen(atStartOfDayOrMin(startDate), atStartOfNextDayOrMax(endDate), userId);\n+    }\n+\n+    public List<Meal> getAll(int userId) {\n+        return repository.getAll(userId);\n+    }\n+\n+    public void update(Meal meal, int userId) {\n+        checkNotFoundWithId(repository.save(meal, userId), meal.getId());\n+    }\n+\n+    public Meal create(Meal meal, int userId) {\n+        return repository.save(meal, userId);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8fbe8dc0601ff36479e058e4178c89001deca7de",
    "filename": "src/main/java/ru/javawebinar/topjava/service/UserService.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/service/UserService.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/service/UserService.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/service/UserService.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,44 @@\n+package ru.javawebinar.topjava.service;\n+\n+import org.springframework.stereotype.Service;\n+import ru.javawebinar.topjava.model.User;\n+import ru.javawebinar.topjava.repository.UserRepository;\n+\n+import java.util.List;\n+\n+import static ru.javawebinar.topjava.util.ValidationUtil.checkNotFound;\n+import static ru.javawebinar.topjava.util.ValidationUtil.checkNotFoundWithId;\n+\n+@Service\n+public class UserService {\n+\n+    private final UserRepository repository;\n+\n+    public UserService(UserRepository repository) {\n+        this.repository = repository;\n+    }\n+\n+    public User create(User user) {\n+        return repository.save(user);\n+    }\n+\n+    public void delete(int id) {\n+        checkNotFoundWithId(repository.delete(id), id);\n+    }\n+\n+    public User get(int id) {\n+        return checkNotFoundWithId(repository.get(id), id);\n+    }\n+\n+    public User getByEmail(String email) {\n+        return checkNotFound(repository.getByEmail(email), \"email=\" + email);\n+    }\n+\n+    public List<User> getAll() {\n+        return repository.getAll();\n+    }\n+\n+    public void update(User user) {\n+        checkNotFoundWithId(repository.save(user), user.getId());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3fd409db564cc5087fbdad3e78bc59c48abc63b8",
    "filename": "src/main/java/ru/javawebinar/topjava/to/MealTo.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/to/MealTo.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/to/MealTo.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/to/MealTo.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,66 @@\n+package ru.javawebinar.topjava.to;\n+\n+import java.time.LocalDateTime;\n+\n+public class MealTo {\n+    private final Integer id;\n+\n+    private final LocalDateTime dateTime;\n+\n+    private final String description;\n+\n+    private final int calories;\n+\n+//    private final AtomicBoolean excess;      // filteredByAtomic (or Boolean[])\n+//    private final Boolean excess;            // filteredByReflection\n+//    private final Supplier<Boolean> excess;  // filteredByClosure\n+    private boolean excess;\n+\n+    public MealTo(Integer id, LocalDateTime dateTime, String description, int calories, boolean excess) {\n+        this.id = id;\n+        this.dateTime = dateTime;\n+        this.description = description;\n+        this.calories = calories;\n+        this.excess = excess;\n+    }\n+\n+//    public Boolean getExcess() {\n+//        return excess.get();\n+//    }\n+\n+    // for filteredBySetterRecursion\n+    public void setExcess(boolean excess) {\n+        this.excess = excess;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public LocalDateTime getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public int getCalories() {\n+        return calories;\n+    }\n+\n+    public boolean isExcess() {\n+        return excess;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MealTo{\" +\n+                \"id=\" + id +\n+                \", dateTime=\" + dateTime +\n+                \", description='\" + description + '\\'' +\n+                \", calories=\" + calories +\n+                \", excess=\" + excess +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "b63ecf50602f1431ec72b3dd1cc32e32b9313b89",
    "filename": "src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,40 @@\n+package ru.javawebinar.topjava.util;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.StringUtils;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n+\n+public class DateTimeUtil {\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n+\n+    // DB doesn't support LocalDate.MIN/MAX\n+    private static final LocalDateTime MIN_DATE = LocalDateTime.of(1, 1, 1, 0, 0);\n+    private static final LocalDateTime MAX_DATE = LocalDateTime.of(3000, 1, 1, 0, 0);\n+\n+    public static LocalDateTime atStartOfDayOrMin(LocalDate localDate) {\n+        return localDate != null ? localDate.atStartOfDay() : MIN_DATE;\n+    }\n+\n+    public static LocalDateTime atStartOfNextDayOrMax(LocalDate localDate) {\n+        return localDate != null ? localDate.plus(1, ChronoUnit.DAYS).atStartOfDay() : MAX_DATE;\n+    }\n+\n+    public static String toString(LocalDateTime ldt) {\n+        return ldt == null ? \"\" : ldt.format(DATE_TIME_FORMATTER);\n+    }\n+\n+    public static @Nullable\n+    LocalDate parseLocalDate(@Nullable String str) {\n+        return StringUtils.hasLength(str) ? LocalDate.parse(str) : null;\n+    }\n+\n+    public static @Nullable\n+    LocalTime parseLocalTime(@Nullable String str) {\n+        return StringUtils.hasLength(str) ? LocalTime.parse(str) : null;\n+    }\n+}"
  },
  {
    "sha": "2aa40a27ec9695d0055de2f3163b8a472bc15b3d",
    "filename": "src/main/java/ru/javawebinar/topjava/util/MealsUtil.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/MealsUtil.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/MealsUtil.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/util/MealsUtil.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,54 @@\n+package ru.javawebinar.topjava.util;\n+\n+import ru.javawebinar.topjava.model.Meal;\n+import ru.javawebinar.topjava.to.MealTo;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.Month;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+public class MealsUtil {\n+    public static final int DEFAULT_CALORIES_PER_DAY = 2000;\n+\n+    public static final List<Meal> meals = Arrays.asList(\n+            new Meal(LocalDateTime.of(2020, Month.JANUARY, 30, 10, 0), \"Завтрак\", 500),\n+            new Meal(LocalDateTime.of(2020, Month.JANUARY, 30, 13, 0), \"Обед\", 1000),\n+            new Meal(LocalDateTime.of(2020, Month.JANUARY, 30, 20, 0), \"Ужин\", 500),\n+            new Meal(LocalDateTime.of(2020, Month.JANUARY, 31, 0, 0), \"Еда на граничное значение\", 100),\n+            new Meal(LocalDateTime.of(2020, Month.JANUARY, 31, 10, 0), \"Завтрак\", 1000),\n+            new Meal(LocalDateTime.of(2020, Month.JANUARY, 31, 13, 0), \"Обед\", 500),\n+            new Meal(LocalDateTime.of(2020, Month.JANUARY, 31, 20, 0), \"Ужин\", 410)\n+    );\n+\n+    public static List<MealTo> getTos(Collection<Meal> meals, int caloriesPerDay) {\n+        return filterByPredicate(meals, caloriesPerDay, meal -> true);\n+    }\n+\n+    public static List<MealTo> getFilteredTos(Collection<Meal> meals, int caloriesPerDay, LocalTime startTime, LocalTime endTime) {\n+        return filterByPredicate(meals, caloriesPerDay, meal -> Util.isBetweenHalfOpen(meal.getTime(), startTime, endTime));\n+    }\n+\n+    public static List<MealTo> filterByPredicate(Collection<Meal> meals, int caloriesPerDay, Predicate<Meal> filter) {\n+        Map<LocalDate, Integer> caloriesSumByDate = meals.stream()\n+                .collect(\n+                        Collectors.groupingBy(Meal::getDate, Collectors.summingInt(Meal::getCalories))\n+//                      Collectors.toMap(Meal::getDate, Meal::getCalories, Integer::sum)\n+                );\n+\n+        return meals.stream()\n+                .filter(filter)\n+                .map(meal -> createTo(meal, caloriesSumByDate.get(meal.getDate()) > caloriesPerDay))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static MealTo createTo(Meal meal, boolean excess) {\n+        return new MealTo(meal.getId(), meal.getDateTime(), meal.getDescription(), meal.getCalories(), excess);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a17a6927f975ea03e19cd4497d71c0258bc18fc8",
    "filename": "src/main/java/ru/javawebinar/topjava/util/Util.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/Util.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/Util.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/util/Util.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.javawebinar.topjava.util;\n+\n+import org.springframework.lang.Nullable;\n+\n+public class Util {\n+    public static <T extends Comparable<T>> boolean isBetweenHalfOpen(T value, @Nullable T start, @Nullable T end) {\n+        return (start == null || value.compareTo(start) >= 0) && (end == null || value.compareTo(end) < 0);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "971eb9c0c72b7e0c26f5863d7b09ed61546d47c0",
    "filename": "src/main/java/ru/javawebinar/topjava/util/ValidationUtil.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/ValidationUtil.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/ValidationUtil.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/util/ValidationUtil.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,43 @@\n+package ru.javawebinar.topjava.util;\n+\n+\n+import ru.javawebinar.topjava.model.AbstractBaseEntity;\n+import ru.javawebinar.topjava.util.exception.NotFoundException;\n+\n+public class ValidationUtil {\n+\n+    public static <T> T checkNotFoundWithId(T object, int id) {\n+        checkNotFoundWithId(object != null, id);\n+        return object;\n+    }\n+\n+    public static void checkNotFoundWithId(boolean found, int id) {\n+        checkNotFound(found, \"id=\" + id);\n+    }\n+\n+    public static <T> T checkNotFound(T object, String msg) {\n+        checkNotFound(object != null, msg);\n+        return object;\n+    }\n+\n+    public static void checkNotFound(boolean found, String msg) {\n+        if (!found) {\n+            throw new NotFoundException(\"Not found entity with \" + msg);\n+        }\n+    }\n+\n+    public static void checkNew(AbstractBaseEntity entity) {\n+        if (!entity.isNew()) {\n+            throw new IllegalArgumentException(entity + \" must be new (id=null)\");\n+        }\n+    }\n+\n+    public static void assureIdConsistent(AbstractBaseEntity entity, int id) {\n+//      conservative when you reply, but accept liberally (http://stackoverflow.com/a/32728226/548473)\n+        if (entity.isNew()) {\n+            entity.setId(id);\n+        } else if (entity.getId() != id) {\n+            throw new IllegalArgumentException(entity + \" must be with id=\" + id);\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f1e9b0e463764055d966e89272a76464db7852e9",
    "filename": "src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,7 @@\n+package ru.javawebinar.topjava.util.exception;\n+\n+public class NotFoundException extends RuntimeException {\n+    public NotFoundException(String message) {\n+        super(message);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "485f6162115495c9c5c041f41d32eac857e07416",
    "filename": "src/main/java/ru/javawebinar/topjava/web/MealServlet.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/MealServlet.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/MealServlet.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/web/MealServlet.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,96 @@\n+package ru.javawebinar.topjava.web;\n+\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.util.StringUtils;\n+import ru.javawebinar.topjava.model.Meal;\n+import ru.javawebinar.topjava.web.meal.MealRestController;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Objects;\n+\n+import static ru.javawebinar.topjava.util.DateTimeUtil.parseLocalDate;\n+import static ru.javawebinar.topjava.util.DateTimeUtil.parseLocalTime;\n+\n+public class MealServlet extends HttpServlet {\n+\n+    private ConfigurableApplicationContext springContext;\n+    private MealRestController mealController;\n+\n+    @Override\n+    public void init(ServletConfig config) throws ServletException {\n+        super.init(config);\n+        springContext = new ClassPathXmlApplicationContext(\"spring/spring-app.xml\", \"spring/spring-db.xml\");\n+        mealController = springContext.getBean(MealRestController.class);\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        springContext.close();\n+        super.destroy();\n+    }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        request.setCharacterEncoding(\"UTF-8\");\n+        Meal meal = new Meal(\n+                LocalDateTime.parse(request.getParameter(\"dateTime\")),\n+                request.getParameter(\"description\"),\n+                Integer.parseInt(request.getParameter(\"calories\")));\n+\n+        if (StringUtils.hasLength(request.getParameter(\"id\"))) {\n+            mealController.update(meal, getId(request));\n+        } else {\n+            mealController.create(meal);\n+        }\n+        response.sendRedirect(\"meals\");\n+    }\n+\n+    @Override\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        String action = request.getParameter(\"action\");\n+\n+        switch (action == null ? \"all\" : action) {\n+            case \"delete\":\n+                int id = getId(request);\n+                mealController.delete(id);\n+                response.sendRedirect(\"meals\");\n+                break;\n+            case \"create\":\n+            case \"update\":\n+                final Meal meal = \"create\".equals(action) ?\n+                        new Meal(LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES), \"\", 1000) :\n+                        mealController.get(getId(request));\n+                request.setAttribute(\"meal\", meal);\n+                request.getRequestDispatcher(\"/mealForm.jsp\").forward(request, response);\n+                break;\n+            case \"filter\":\n+                LocalDate startDate = parseLocalDate(request.getParameter(\"startDate\"));\n+                LocalDate endDate = parseLocalDate(request.getParameter(\"endDate\"));\n+                LocalTime startTime = parseLocalTime(request.getParameter(\"startTime\"));\n+                LocalTime endTime = parseLocalTime(request.getParameter(\"endTime\"));\n+                request.setAttribute(\"meals\", mealController.getBetween(startDate, startTime, endDate, endTime));\n+                request.getRequestDispatcher(\"/meals.jsp\").forward(request, response);\n+                break;\n+            case \"all\":\n+            default:\n+                request.setAttribute(\"meals\", mealController.getAll());\n+                request.getRequestDispatcher(\"/meals.jsp\").forward(request, response);\n+                break;\n+        }\n+    }\n+\n+    private int getId(HttpServletRequest request) {\n+        String paramId = Objects.requireNonNull(request.getParameter(\"id\"));\n+        return Integer.parseInt(paramId);\n+    }\n+}"
  },
  {
    "sha": "588217547e609a8b5492812d5039e9cbddea096b",
    "filename": "src/main/java/ru/javawebinar/topjava/web/SecurityUtil.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/SecurityUtil.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/SecurityUtil.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/web/SecurityUtil.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.javawebinar.topjava.web;\n+\n+import ru.javawebinar.topjava.model.AbstractBaseEntity;\n+\n+import static ru.javawebinar.topjava.util.MealsUtil.DEFAULT_CALORIES_PER_DAY;\n+\n+public class SecurityUtil {\n+\n+    private static int id = AbstractBaseEntity.START_SEQ;\n+\n+    public static int authUserId() {\n+        return id;\n+    }\n+\n+    public static void setAuthUserId(int id) {\n+        SecurityUtil.id = id;\n+    }\n+\n+    public static int authUserCaloriesPerDay() {\n+        return DEFAULT_CALORIES_PER_DAY;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "226023400c701a54c119bd80baa0374bea4f5ad6",
    "filename": "src/main/java/ru/javawebinar/topjava/web/UserServlet.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/UserServlet.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/UserServlet.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/web/UserServlet.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,28 @@\n+package ru.javawebinar.topjava.web;\n+\n+import org.slf4j.Logger;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+public class UserServlet extends HttpServlet {\n+    private static final Logger log = getLogger(UserServlet.class);\n+\n+    @Override\n+    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        int userId = Integer.parseInt(request.getParameter(\"userId\"));\n+        SecurityUtil.setAuthUserId(userId);\n+        response.sendRedirect(\"meals\");\n+    }\n+\n+    @Override\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        log.debug(\"forward to users\");\n+        request.getRequestDispatcher(\"/users.jsp\").forward(request, response);\n+    }\n+}"
  },
  {
    "sha": "bbfe35e3f0fab7f32a0368a51db7718d0b916731",
    "filename": "src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/web/meal/MealRestController.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,76 @@\n+package ru.javawebinar.topjava.web.meal;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Controller;\n+import ru.javawebinar.topjava.model.Meal;\n+import ru.javawebinar.topjava.service.MealService;\n+import ru.javawebinar.topjava.to.MealTo;\n+import ru.javawebinar.topjava.util.MealsUtil;\n+import ru.javawebinar.topjava.web.SecurityUtil;\n+\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.util.List;\n+\n+import static ru.javawebinar.topjava.util.ValidationUtil.assureIdConsistent;\n+import static ru.javawebinar.topjava.util.ValidationUtil.checkNew;\n+\n+@Controller\n+public class MealRestController {\n+    private static final Logger log = LoggerFactory.getLogger(MealRestController.class);\n+\n+    private final MealService service;\n+\n+    public MealRestController(MealService service) {\n+        this.service = service;\n+    }\n+\n+    public Meal get(int id) {\n+        int userId = SecurityUtil.authUserId();\n+        log.info(\"get meal {} for user {}\", id, userId);\n+        return service.get(id, userId);\n+    }\n+\n+    public void delete(int id) {\n+        int userId = SecurityUtil.authUserId();\n+        log.info(\"delete meal {} for user {}\", id, userId);\n+        service.delete(id, userId);\n+    }\n+\n+    public List<MealTo> getAll() {\n+        int userId = SecurityUtil.authUserId();\n+        log.info(\"getAll for user {}\", userId);\n+        return MealsUtil.getTos(service.getAll(userId), SecurityUtil.authUserCaloriesPerDay());\n+    }\n+\n+    public Meal create(Meal meal) {\n+        int userId = SecurityUtil.authUserId();\n+        checkNew(meal);\n+        log.info(\"create {} for user {}\", meal, userId);\n+        return service.create(meal, userId);\n+    }\n+\n+    public void update(Meal meal, int id) {\n+        int userId = SecurityUtil.authUserId();\n+        assureIdConsistent(meal, id);\n+        log.info(\"update {} for user {}\", meal, userId);\n+        service.update(meal, userId);\n+    }\n+\n+    /**\n+     * <ol>Filter separately\n+     * <li>by date</li>\n+     * <li>by time for every date</li>\n+     * </ol>\n+     */\n+    public List<MealTo> getBetween(@Nullable LocalDate startDate, @Nullable LocalTime startTime,\n+                                   @Nullable LocalDate endDate, @Nullable LocalTime endTime) {\n+        int userId = SecurityUtil.authUserId();\n+        log.info(\"getBetween dates({} - {}) time({} - {}) for user {}\", startDate, endDate, startTime, endTime, userId);\n+\n+        List<Meal> mealsDateFiltered = service.getBetweenInclusive(startDate, endDate, userId);\n+        return MealsUtil.getFilteredTos(mealsDateFiltered, SecurityUtil.authUserCaloriesPerDay(), startTime, endTime);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0000f1c1e02f080fbd600f31a3727b937d0ee378",
    "filename": "src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,51 @@\n+package ru.javawebinar.topjava.web.user;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import ru.javawebinar.topjava.model.User;\n+import ru.javawebinar.topjava.service.UserService;\n+\n+import java.util.List;\n+\n+import static ru.javawebinar.topjava.util.ValidationUtil.assureIdConsistent;\n+import static ru.javawebinar.topjava.util.ValidationUtil.checkNew;\n+\n+public abstract class AbstractUserController {\n+    protected final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    @Autowired\n+    private UserService service;\n+\n+    public List<User> getAll() {\n+        log.info(\"getAll\");\n+        return service.getAll();\n+    }\n+\n+    public User get(int id) {\n+        log.info(\"get {}\", id);\n+        return service.get(id);\n+    }\n+\n+    public User create(User user) {\n+        log.info(\"create {}\", user);\n+        checkNew(user);\n+        return service.create(user);\n+    }\n+\n+    public void delete(int id) {\n+        log.info(\"delete {}\", id);\n+        service.delete(id);\n+    }\n+\n+    public void update(User user, int id) {\n+        log.info(\"update {} with id={}\", user, id);\n+        assureIdConsistent(user, id);\n+        service.update(user);\n+    }\n+\n+    public User getByMail(String email) {\n+        log.info(\"getByEmail {}\", email);\n+        return service.getByEmail(email);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b37a8ed6c8a5ed411222bddc34b6765ac400a288",
    "filename": "src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,40 @@\n+package ru.javawebinar.topjava.web.user;\n+\n+import org.springframework.stereotype.Controller;\n+import ru.javawebinar.topjava.model.User;\n+\n+import java.util.List;\n+\n+@Controller\n+public class AdminRestController extends AbstractUserController {\n+\n+    @Override\n+    public List<User> getAll() {\n+        return super.getAll();\n+    }\n+\n+    @Override\n+    public User get(int id) {\n+        return super.get(id);\n+    }\n+\n+    @Override\n+    public User create(User user) {\n+        return super.create(user);\n+    }\n+\n+    @Override\n+    public void delete(int id) {\n+        super.delete(id);\n+    }\n+\n+    @Override\n+    public void update(User user, int id) {\n+        super.update(user, id);\n+    }\n+\n+    @Override\n+    public User getByMail(String email) {\n+        return super.getByMail(email);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7d3702c31c46e128b68b9c556e6b3e92a88ad10a",
    "filename": "src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.javawebinar.topjava.web.user;\n+\n+import org.springframework.stereotype.Controller;\n+import ru.javawebinar.topjava.model.User;\n+\n+import static ru.javawebinar.topjava.web.SecurityUtil.authUserId;\n+\n+@Controller\n+public class ProfileRestController extends AbstractUserController {\n+\n+    public User get() {\n+        return super.get(authUserId());\n+    }\n+\n+    public void delete() {\n+        super.delete(authUserId());\n+    }\n+\n+    public void update(User user) {\n+        super.update(user, authUserId());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "57f3f2c06564af6fef88eb27c7e7da2227572f68",
    "filename": "src/main/resources/db/initDB.sql",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/evgenii-burlakov/topjava/blob/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/resources/db/initDB.sql",
    "raw_url": "https://github.com/evgenii-burlakov/topjava/raw/c7bb07bde04650f83d9fc4dfbb06f0228b945e96/src/main/resources/db/initDB.sql",
    "contents_url": "https://api.github.com/repos/evgenii-burlakov/topjava/contents/src/main/resources/db/initDB.sql?ref=c7bb07bde04650f83d9fc4dfbb06f0228b945e96",
    "patch": "@@ -0,0 +1,25 @@\n+DROP TABLE IF EXISTS user_roles;\n+DROP TABLE IF EXISTS users;\n+DROP SEQUENCE IF EXISTS global_seq;\n+\n+CREATE SEQUENCE global_seq START WITH 100000;\n+\n+CREATE TABLE users\n+(\n+    id               INTEGER PRIMARY KEY DEFAULT nextval('global_seq'),\n+    name             VARCHAR                           NOT NULL,\n+    email            VARCHAR                           NOT NULL,\n+    password         VARCHAR                           NOT NULL,\n+    registered       TIMESTAMP           DEFAULT now() NOT NULL,\n+    enabled          BOOL                DEFAULT TRUE  NOT NULL,\n+    calories_per_day INTEGER             DEFAULT 2000  NOT NULL\n+);\n+CREATE UNIQUE INDEX users_unique_email_idx ON users (email);\n+\n+CREATE TABLE user_roles\n+(\n+    user_id INTEGER NOT NULL,\n+    role    VARCHAR,\n+    CONSTRAINT user_roles_idx UNIQUE (user_id, role),\n+    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\n+);\n\\ No newline at end of file"
  }
]
