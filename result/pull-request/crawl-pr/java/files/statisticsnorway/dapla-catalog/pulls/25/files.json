[
  {
    "sha": "74608e167d4c3a00fdafdab12cde556e8300ebd7",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/pom.xml",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/pom.xml",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/pom.xml?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -94,7 +94,7 @@\n         <dependency>\n             <groupId>no.ssb.dapla.catalog</groupId>\n             <artifactId>dapla-catalog-protobuf</artifactId>\n-            <version>0.10</version>\n+            <version>0.11-SNAPSHOT</version>\n         </dependency>\n         <dependency>\n             <groupId>no.ssb.helidon</groupId>"
  },
  {
    "sha": "36680699bdba35e7291cb02994350b67baa89175",
    "filename": "src/main/java/db/migration/V3__ConvertPath.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/db/migration/V3__ConvertPath.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/db/migration/V3__ConvertPath.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/main/java/db/migration/V3__ConvertPath.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -1,6 +1,6 @@\n package db.migration;\n \n-import no.ssb.dapla.catalog.dataset.DatasetRepository;\n+import no.ssb.dapla.catalog.dataset.NamespaceUtils;\n import org.flywaydb.core.api.migration.BaseJavaMigration;\n import org.flywaydb.core.api.migration.Context;\n \n@@ -20,7 +20,7 @@ public void migrate(Context context) throws Exception {\n                     var path = rows.getString(\"path\");\n                     var version = rows.getTimestamp(\"version\");\n \n-                    update.setString(1, DatasetRepository.escapePath(path));\n+                    update.setString(1, NamespaceUtils.escapePath(path));\n                     update.setString(2, path);\n                     update.setTimestamp(3, version);\n                     update.execute();"
  },
  {
    "sha": "77371f01bd920467c964ef3527076399129d9f92",
    "filename": "src/main/java/no/ssb/dapla/catalog/CatalogApplication.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/CatalogApplication.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/CatalogApplication.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/main/java/no/ssb/dapla/catalog/CatalogApplication.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -19,6 +19,8 @@\n import no.ssb.dapla.catalog.dataset.DatasetUpstreamGooglePubSubIntegration;\n import no.ssb.dapla.catalog.dataset.DatasetUpstreamGooglePubSubIntegrationInitializer;\n import no.ssb.dapla.catalog.dataset.DefaultCatalogSignatureVerifier;\n+import no.ssb.dapla.catalog.dataset.TableHttpService;\n+import no.ssb.dapla.catalog.dataset.TableRepository;\n import no.ssb.dapla.catalog.health.ReadinessSample;\n import no.ssb.helidon.application.DefaultHelidonApplication;\n import no.ssb.helidon.media.protobuf.ProtobufJsonSupport;\n@@ -110,8 +112,10 @@ public static void main(String[] args) {\n         // Health health = new Health(config, sqlClient, lastReadySample, () -> get(WebServer.class));\n \n         DatasetRepository repository = new DatasetRepository(dbClient);\n+        TableRepository tableRepository = new TableRepository(dbClient);\n \n         put(DatasetRepository.class, repository);\n+        put(TableRepository.class, tableRepository);\n \n \n         CatalogSignatureVerifier catalogSignatureVerifier;\n@@ -158,6 +162,7 @@ public static void main(String[] args) {\n                 .register(MetricsSupport.create())\n                 .register(health)\n                 .register(new CatalogHttpService(repository, catalogSignatureVerifier, userAccessClient))\n+                .register(new TableHttpService(tableRepository))\n                 .build();\n \n         put(Routing.class, routing);"
  },
  {
    "sha": "1693a8931992a23ca1258cffa44c91fbc2965bec",
    "filename": "src/main/java/no/ssb/dapla/catalog/dataset/DatasetRepository.java",
    "status": "modified",
    "additions": 2,
    "deletions": 42,
    "changes": 44,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/dataset/DatasetRepository.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/dataset/DatasetRepository.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/main/java/no/ssb/dapla/catalog/dataset/DatasetRepository.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -15,16 +15,12 @@\n import java.time.Instant;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n+import static no.ssb.dapla.catalog.dataset.NamespaceUtils.escapePath;\n+import static no.ssb.dapla.catalog.dataset.NamespaceUtils.unescapePath;\n \n public class DatasetRepository {\n     private static final Logger LOG = LoggerFactory.getLogger(DatasetRepository.class);\n \n-    private static final Pattern CODEPOINT = Pattern.compile(\"_[0-9]{4}\");\n-    private static final Pattern VALID_CHARS = Pattern.compile(\"([^\\\\w]|_)+\");\n-\n     private final DbClient client;\n \n     private final Timer listTimer = RegistryFactory.getInstance().getRegistry(MetricRegistry.Type.APPLICATION).timer(\"dataset.repository.list\");\n@@ -36,42 +32,6 @@ public DatasetRepository(DbClient client) {\n         this.client = client;\n     }\n \n-    /**\n-     * Unescape all characters that could cause problems with the ltree column.\n-     */\n-    public static String unescapePath(String path) {\n-        var escaped = Stream.of(path.split(\"\\\\.\"))\n-                .map(part -> {\n-                    return CODEPOINT.matcher(part).replaceAll(match -> {\n-                        var point = Integer.parseInt(match.group().substring(1, 5));\n-                        return String.valueOf(Character.toChars(point));\n-                    });\n-                })\n-                .collect(Collectors.joining(\"/\"));\n-        if (!escaped.startsWith(\"/\")) {\n-            escaped = \"/\" + escaped;\n-        }\n-        return escaped;\n-    }\n-\n-    /**\n-     * Escape all characters that could cause problems with the ltree column.\n-     */\n-    public static String escapePath(String path) {\n-        var escaped = Stream.of(path.split(\"/\"))\n-                .map(part -> {\n-                    return VALID_CHARS.matcher(part).replaceAll(match -> {\n-                        return match.group().codePoints()\n-                                .mapToObj(codePoint -> String.format(\"!%04d\", codePoint))\n-                                .collect(Collectors.joining());\n-                    });\n-                })\n-                .collect(Collectors.joining(\".\"));\n-        if (escaped.startsWith(\".\")) {\n-            escaped = escaped.substring(1);\n-        }\n-        return escaped.replaceAll(\"!\", \"_\");\n-    }\n \n     // TODO: Limit is useless without offset.\n     public Multi<DatasetId> listByPrefix(String prefix, int limit) {"
  },
  {
    "sha": "579795dd9f4ced88b44801ebdaee43caeb8d25ff",
    "filename": "src/main/java/no/ssb/dapla/catalog/dataset/NamespaceUtils.java",
    "status": "modified",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/dataset/NamespaceUtils.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/dataset/NamespaceUtils.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/main/java/no/ssb/dapla/catalog/dataset/NamespaceUtils.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -2,10 +2,15 @@\n \n import java.util.Arrays;\n import java.util.List;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class NamespaceUtils {\n \n+    private static final Pattern CODEPOINT = Pattern.compile(\"_[0-9]{4}\");\n+    private static final Pattern VALID_CHARS = Pattern.compile(\"([^\\\\w]|_)+\");\n+\n     public static String normalize(String name) {\n         return NamespaceUtils.toNamespace(NamespaceUtils.toComponents(name));\n     }\n@@ -22,4 +27,42 @@ public static String normalize(String name) {\n     public static String toNamespace(List<String> components) {\n         return \"/\" + components.stream().collect(Collectors.joining(\"/\"));\n     }\n+\n+    /**\n+     * Unescape all characters that could cause problems with the ltree column.\n+     */\n+    public static String unescapePath(String path) {\n+        var escaped = Stream.of(path.split(\"\\\\.\"))\n+                .map(part -> {\n+                    return CODEPOINT.matcher(part).replaceAll(match -> {\n+                        var point = Integer.parseInt(match.group().substring(1, 5));\n+                        return String.valueOf(Character.toChars(point));\n+                    });\n+                })\n+                .collect(Collectors.joining(\"/\"));\n+        if (!escaped.startsWith(\"/\")) {\n+            escaped = \"/\" + escaped;\n+        }\n+        return escaped;\n+    }\n+\n+    /**\n+     * Escape all characters that could cause problems with the ltree column.\n+     */\n+    public static String escapePath(String path) {\n+        var escaped = Stream.of(path.split(\"/\"))\n+                .map(part -> {\n+                    return VALID_CHARS.matcher(part).replaceAll(match -> {\n+                        return match.group().codePoints()\n+                                .mapToObj(codePoint -> String.format(\"!%04d\", codePoint))\n+                                .collect(Collectors.joining());\n+                    });\n+                })\n+                .collect(Collectors.joining(\".\"));\n+        if (escaped.startsWith(\".\")) {\n+            escaped = escaped.substring(1);\n+        }\n+        return escaped.replaceAll(\"!\", \"_\");\n+    }\n+\n }"
  },
  {
    "sha": "aad12042432c9b46a76613a8abdf4f39bfb556fc",
    "filename": "src/main/java/no/ssb/dapla/catalog/dataset/TableHttpService.java",
    "status": "added",
    "additions": 177,
    "deletions": 0,
    "changes": 177,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/dataset/TableHttpService.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/dataset/TableHttpService.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/main/java/no/ssb/dapla/catalog/dataset/TableHttpService.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -0,0 +1,177 @@\n+package no.ssb.dapla.catalog.dataset;\n+\n+import io.helidon.metrics.RegistryFactory;\n+import io.helidon.webserver.Handler;\n+import io.helidon.webserver.Routing;\n+import io.helidon.webserver.ServerRequest;\n+import io.helidon.webserver.ServerResponse;\n+import io.helidon.webserver.Service;\n+import io.opentracing.Span;\n+import no.ssb.dapla.catalog.protobuf.CreateTableRequest;\n+import no.ssb.dapla.catalog.protobuf.GetTableRequest;\n+import no.ssb.dapla.catalog.protobuf.GetTableResponse;\n+import no.ssb.dapla.catalog.protobuf.UpdateTableRequest;\n+import no.ssb.helidon.application.Tracing;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import static no.ssb.helidon.application.Tracing.*;\n+\n+public class TableHttpService implements Service {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TableHttpService.class);\n+\n+    final TableRepository repository;\n+    final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n+    private final Counter getRequestCounter;\n+    private final Counter getFailedCounter;\n+    private final Counter createRequestCounter;\n+    private final Counter createFailedCounter;\n+    private final Counter updateRequestCounter;\n+    private final Counter updateFailedCounter;\n+\n+    public TableHttpService(TableRepository repository) {\n+        this.repository = repository;\n+        RegistryFactory metricsRegistry = RegistryFactory.getInstance();\n+        MetricRegistry appRegistry = metricsRegistry.getRegistry(MetricRegistry.Type.APPLICATION);\n+        this.getRequestCounter = appRegistry.counter(\"getRequestCount\");\n+        this.getFailedCounter = appRegistry.counter(\"getFailedCount\");\n+        this.createRequestCounter = appRegistry.counter(\"createRequestCount\");\n+        this.createFailedCounter = appRegistry.counter(\"createFailedCount\");\n+        this.updateRequestCounter = appRegistry.counter(\"updateRequestCount\");\n+        this.updateFailedCounter = appRegistry.counter(\"updateFailedCount\");\n+    }\n+\n+    @Override\n+    public void update(Routing.Rules rules) {\n+        LOG.info(\"rules: {}\", rules);\n+        rules.post(\"/catalog2/get\", Handler.create(GetTableRequest.class, this::getTable));\n+        rules.post(\"/catalog2/create\", Handler.create(CreateTableRequest.class, this::createTable));\n+        rules.put(\"/catalog2/update\", Handler.create(UpdateTableRequest.class, this::updateTable));\n+    }\n+\n+    public void getTable(ServerRequest req, ServerResponse res, GetTableRequest getTableRequest) {\n+        getRequestCounter.inc();\n+        Span span = spanFromHttp(req, \"getTable\");\n+        try {\n+            repository.get(getTableRequest.getPath())\n+                    .timeout(5, TimeUnit.SECONDS, scheduledExecutorService)\n+                    .toOptionalSingle()\n+                    .subscribe(tableOpt -> {\n+                        Tracing.restoreTracingContext(req.tracer(), span);\n+                        if (tableOpt.isPresent()) {\n+                            GetTableResponse.Builder builder = GetTableResponse.newBuilder()\n+                                    .setTable(tableOpt.get());\n+                            res.status(200).send(builder.build());\n+                        } else {\n+                            res.status(404).send();\n+                        }\n+                        span.finish();\n+                    }, throwable -> {\n+                        try {\n+                            getFailedCounter.inc();\n+                            Tracing.restoreTracingContext(req.tracer(), span);\n+                            logError(span, throwable, \"error in repository.get()\");\n+                            LOG.error(String.format(\"repository.get(): path='%s'\", getTableRequest.getPath()), throwable);\n+                            res.status(500).send(throwable.getMessage());\n+                        } finally {\n+                            span.finish();\n+                        }\n+                    });\n+        } catch (RuntimeException | Error e) {\n+            try {\n+                getFailedCounter.inc();\n+                logError(span, e, \"top-level error\");\n+                LOG.error(\"top-level error\", e);\n+                throw e;\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+    }\n+\n+    public void createTable(ServerRequest req, ServerResponse res, CreateTableRequest createTableRequest) {\n+        createRequestCounter.inc();\n+        Span span = spanFromHttp(req, \"createTable\");\n+        try {\n+            repository.create(createTableRequest.getTable())\n+                    .timeout(5, TimeUnit.SECONDS, scheduledExecutorService)\n+                    .toOptionalSingle()\n+                    .subscribe(createdCount -> {\n+                        Tracing.restoreTracingContext(req.tracer(), span);\n+                        res.send();\n+                        span.finish();\n+                    }, throwable -> {\n+                        try {\n+                            createFailedCounter.inc();\n+                            Tracing.restoreTracingContext(req.tracer(), span);\n+                            logError(span, throwable, \"error in repository.create()\");\n+                            LOG.error(String.format(\"repository.create(): path='%s'\", createTableRequest.getTable().getPath()), throwable);\n+                            res.status(500).send(throwable.getMessage());\n+                        } finally {\n+                            span.finish();\n+                        }\n+                    });\n+        } catch (RuntimeException | Error e) {\n+            try {\n+                createFailedCounter.inc();\n+                logError(span, e, \"top-level error\");\n+                LOG.error(\"top-level error\", e);\n+                throw e;\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+    }\n+\n+    public void updateTable(ServerRequest req, ServerResponse res, UpdateTableRequest updateTableRequest) {\n+        updateRequestCounter.inc();\n+        Span span = spanFromHttp(req, \"createTable\");\n+        try {\n+            repository.update(updateTableRequest.getTable(), updateTableRequest.getPreviousMetadataLocation())\n+                    .timeout(5, TimeUnit.SECONDS, scheduledExecutorService)\n+                    .toOptionalSingle()\n+                    .subscribe(updatedCount -> {\n+                        Tracing.restoreTracingContext(req.tracer(), span);\n+                        if (updatedCount.isEmpty() || !updatedCount.get().equals(1L)) {\n+                            String errorStr = String.format(\"Failed to update table with path '%s' and metadata location '%s'. \" +\n+                                            \"Maybe another process changed it.\", updateTableRequest.getTable().getPath(),\n+                                    updateTableRequest.getPreviousMetadataLocation());\n+                            LOG.warn(errorStr);\n+                            updateFailedCounter.inc();\n+                            res.status(400).send(errorStr);\n+                        } else {\n+                            res.send();\n+                            span.finish();\n+                        }\n+                    }, throwable -> {\n+                        try {\n+                            updateFailedCounter.inc();\n+                            Tracing.restoreTracingContext(req.tracer(), span);\n+                            logError(span, throwable, \"error in repository.update()\");\n+                            LOG.error(String.format(\"repository.update(): path='%s'\", updateTableRequest.getTable().getPath()), throwable);\n+                            res.status(500).send(throwable.getMessage());\n+                        } finally {\n+                            span.finish();\n+                        }\n+                    });\n+        } catch (RuntimeException | Error e) {\n+            try {\n+                updateFailedCounter.inc();\n+                logError(span, e, \"top-level error\");\n+                LOG.error(\"top-level error\", e);\n+                throw e;\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "103581d40bddd393a34bf3278641fabf617c60c6",
    "filename": "src/main/java/no/ssb/dapla/catalog/dataset/TableRepository.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/dataset/TableRepository.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/java/no/ssb/dapla/catalog/dataset/TableRepository.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/main/java/no/ssb/dapla/catalog/dataset/TableRepository.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -0,0 +1,58 @@\n+package no.ssb.dapla.catalog.dataset;\n+\n+import io.helidon.common.reactive.Single;\n+import io.helidon.dbclient.DbClient;\n+import no.ssb.dapla.catalog.protobuf.CatalogTable;\n+\n+import static no.ssb.dapla.catalog.dataset.NamespaceUtils.escapePath;\n+import static no.ssb.dapla.catalog.dataset.NamespaceUtils.unescapePath;\n+\n+public class TableRepository {\n+\n+    private final DbClient client;\n+\n+    public TableRepository(DbClient client) {\n+        this.client = client;\n+    }\n+\n+    /**\n+     * Get the dataset that was the most recent at a given time\n+     */\n+    public Single<CatalogTable> get(String path) {\n+        return client.execute(exec -> exec.get(\"\"\"\n+                        SELECT path, metadata_location\n+                        FROM catalog_table\n+                        WHERE path = ltree(?)\n+                        LIMIT 1\"\"\",\n+                escapePath(path))\n+                .flatMapSingle(dbRowOpt -> dbRowOpt\n+                        .map(dbRow -> Single.just(CatalogTable.newBuilder()\n+                                .setPath(unescapePath(dbRow.column(1).as(String.class)))\n+                                .setMetadataLocation(dbRow.column(2).as(String.class))\n+                                .build()))\n+                        .orElseGet(Single::empty))\n+        );\n+    }\n+\n+    public Single<Long> create(CatalogTable catalogTable) {\n+        return client.execute(exec -> exec.insert(\"\"\"\n+                        INSERT INTO catalog_table(path, metadata_location) VALUES(ltree(?), ?)\n+                        \"\"\",\n+                escapePath(catalogTable.getPath()), catalogTable.getMetadataLocation()));\n+    }\n+\n+    public Single<Long> update(CatalogTable catalogTable, String previousMetadataLocation) {\n+        return client.execute(exec -> exec.update(\"\"\"\n+                        UPDATE catalog_table SET metadata_location = ?,\n+                        previous_metadata_location = ?\n+                        WHERE path = ltree(?)\n+                        AND metadata_location = ?\n+                        \"\"\",\n+                catalogTable.getMetadataLocation(), previousMetadataLocation,\n+                escapePath(catalogTable.getPath()), previousMetadataLocation));\n+    }\n+\n+    Single<Long> deleteAll() {\n+        return client.execute(exec -> exec.dml(\"TRUNCATE TABLE catalog_table\"));\n+    }\n+}"
  },
  {
    "sha": "65174661bad983d5e0b376f74b4d411570b1e089",
    "filename": "src/main/resources/db/migration/V5__Add-catalog-table.sql",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/resources/db/migration/V5__Add-catalog-table.sql",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/main/resources/db/migration/V5__Add-catalog-table.sql",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/main/resources/db/migration/V5__Add-catalog-table.sql?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -0,0 +1,11 @@\n+CREATE EXTENSION IF NOT EXISTS ltree;\n+\n+CREATE TABLE catalog_table\n+(\n+    path ltree,\n+    metadata_location varchar(1023),\n+    previous_metadata_location varchar(1023),\n+    PRIMARY KEY (path)\n+);\n+\n+CREATE INDEX catalog_table_path_idx ON catalog_table USING GIST (path);\n\\ No newline at end of file"
  },
  {
    "sha": "b750be1081cac21f6c19fda07e6072c49f222a64",
    "filename": "src/test/java/no/ssb/dapla/catalog/dataset/DatasetRepositoryTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 25,
    "changes": 25,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/test/java/no/ssb/dapla/catalog/dataset/DatasetRepositoryTest.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/test/java/no/ssb/dapla/catalog/dataset/DatasetRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/test/java/no/ssb/dapla/catalog/dataset/DatasetRepositoryTest.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -15,11 +15,8 @@\n import java.time.Instant;\n import java.time.ZonedDateTime;\n import java.time.temporal.ChronoUnit;\n-import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n-import static no.ssb.dapla.catalog.dataset.DatasetRepository.escapePath;\n-import static no.ssb.dapla.catalog.dataset.DatasetRepository.unescapePath;\n import static org.assertj.core.api.Assertions.assertThat;\n \n \n@@ -47,28 +44,6 @@ Dataset createDataset(String path, Instant time) {\n                 .build();\n     }\n \n-    @Test\n-    void testEscapePath() {\n-        var tests = List.of(\n-                \"/some weird/p@th/to_escape\",\n-                \"/1234%&4321/_4321\",\n-                \"/!path\",\n-                \"/!path\",\n-                \"/!!path\"\n-        );\n-        for (String test : tests) {\n-            assertThat(unescapePath(escapePath(test))).isEqualTo(test);\n-        }\n-    }\n-\n-    @Test\n-    void testUnEscapePath() {\n-        assertThat(unescapePath(\"path\")).isEqualTo(\"/path\");\n-        assertThat(unescapePath(\".a.path\")).isEqualTo(\"/a/path\");\n-        assertThat(unescapePath(\"a.path\")).isEqualTo(\"/a/path\");\n-        assertThat(unescapePath(\"a.path.\")).isEqualTo(\"/a/path\");\n-    }\n-\n     @Test\n     void listingDatasetByPrefix() {\n         DatasetRepository repository = application.get(DatasetRepository.class);"
  },
  {
    "sha": "ee64f8041d6be3438ee2df90b8c09de195772e6b",
    "filename": "src/test/java/no/ssb/dapla/catalog/dataset/NamespaceUtilsTest.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/test/java/no/ssb/dapla/catalog/dataset/NamespaceUtilsTest.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/test/java/no/ssb/dapla/catalog/dataset/NamespaceUtilsTest.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/test/java/no/ssb/dapla/catalog/dataset/NamespaceUtilsTest.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -0,0 +1,36 @@\n+package no.ssb.dapla.catalog.dataset;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static no.ssb.dapla.catalog.dataset.NamespaceUtils.escapePath;\n+import static no.ssb.dapla.catalog.dataset.NamespaceUtils.unescapePath;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class NamespaceUtilsTest {\n+\n+    @Test\n+    void testEscapePath() {\n+        var tests = List.of(\n+                \"/some weird/p@th/to_escape\",\n+                \"/path/john.doe/home\",\n+                \"/!path\",\n+                \"/!path\",\n+                \"/!!path\"\n+        );\n+        for (String test : tests) {\n+            assertThat(unescapePath(escapePath(test))).isEqualTo(test);\n+        }\n+    }\n+\n+    @Test\n+    void testUnEscapePath() {\n+        assertThat(unescapePath(\"path\")).isEqualTo(\"/path\");\n+        assertThat(unescapePath(\".a.path\")).isEqualTo(\"/a/path\");\n+        assertThat(unescapePath(\"a.path\")).isEqualTo(\"/a/path\");\n+        assertThat(unescapePath(\"a.path.\")).isEqualTo(\"/a/path\");\n+    }\n+\n+\n+}"
  },
  {
    "sha": "01c74d942cfa96210ab61a5b8f34b5a62c55d179",
    "filename": "src/test/java/no/ssb/dapla/catalog/dataset/TableRepositoryTest.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/statisticsnorway/dapla-catalog/blob/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/test/java/no/ssb/dapla/catalog/dataset/TableRepositoryTest.java",
    "raw_url": "https://github.com/statisticsnorway/dapla-catalog/raw/ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771/src/test/java/no/ssb/dapla/catalog/dataset/TableRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/statisticsnorway/dapla-catalog/contents/src/test/java/no/ssb/dapla/catalog/dataset/TableRepositoryTest.java?ref=ed755d2d5cb988c0a73ea3fd7f92c4d93d91e771",
    "patch": "@@ -0,0 +1,47 @@\n+package no.ssb.dapla.catalog.dataset;\n+\n+import no.ssb.dapla.catalog.CatalogApplication;\n+import no.ssb.dapla.catalog.protobuf.CatalogTable;\n+import no.ssb.dapla.catalog.protobuf.Dataset;\n+import no.ssb.dapla.catalog.protobuf.DatasetId;\n+import no.ssb.testing.helidon.IntegrationTestExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.assertj.core.api.Assertions.*;\n+\n+@ExtendWith(IntegrationTestExtension.class)\n+public class TableRepositoryTest {\n+\n+    @Inject\n+    CatalogApplication application;\n+\n+    TableRepository repository;\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        application.get(TableRepository.class).deleteAll().await(30, TimeUnit.SECONDS);\n+        repository = application.get(TableRepository.class);\n+    }\n+\n+    @Test\n+    void thatCreateWorks() {\n+        CatalogTable catalogTable = CatalogTable.newBuilder().setPath(\"/my/dataset\").setMetadataLocation(\"loc1\").build();\n+        repository.create(catalogTable).await();\n+        assertThat(repository.get(\"/my/dataset\").await()).isEqualTo(catalogTable);\n+\n+    }\n+    @Test\n+    void thatUpdateWorks() {\n+        CatalogTable catalogTable = CatalogTable.newBuilder().setPath(\"/my/dataset\").setMetadataLocation(\"loc1\").build();\n+        repository.create(catalogTable).await();\n+        CatalogTable updatedTable = CatalogTable.newBuilder(catalogTable).setMetadataLocation(\"loc2\").build();\n+        repository.update(updatedTable, catalogTable.getMetadataLocation()).await();\n+        assertThat(repository.get(\"/my/dataset\").await()).isEqualTo(updatedTable);\n+    }\n+}"
  }
]
