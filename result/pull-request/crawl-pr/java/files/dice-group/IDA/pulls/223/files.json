[
  {
    "sha": "c957385af2e558642a4302d783004770f6e209e7",
    "filename": "backend-server/src/main/java/org/dice/ida/action/def/LineChartAction.java",
    "status": "removed",
    "additions": 0,
    "deletions": 307,
    "changes": 307,
    "blob_url": "https://github.com/dice-group/IDA/blob/1f7d35e23c46a4e76d605e505d3e11a1e58b6085/backend-server/src/main/java/org/dice/ida/action/def/LineChartAction.java",
    "raw_url": "https://github.com/dice-group/IDA/raw/1f7d35e23c46a4e76d605e505d3e11a1e58b6085/backend-server/src/main/java/org/dice/ida/action/def/LineChartAction.java",
    "contents_url": "https://api.github.com/repos/dice-group/IDA/contents/backend-server/src/main/java/org/dice/ida/action/def/LineChartAction.java?ref=1f7d35e23c46a4e76d605e505d3e11a1e58b6085",
    "patch": "@@ -1,307 +0,0 @@\n-package org.dice.ida.action.def;\n-\n-import org.apache.commons.lang3.time.DateUtils;\n-import org.dice.ida.constant.IDAConst;\n-import org.dice.ida.exception.IDAException;\n-import org.dice.ida.model.ChatMessageResponse;\n-import org.dice.ida.model.ChatUserMessage;\n-import org.dice.ida.model.linechart.LineChartData;\n-import org.dice.ida.model.linechart.LineChartItem;\n-import org.dice.ida.util.DataUtil;\n-import org.dice.ida.util.ValidatorUtil;\n-import org.springframework.stereotype.Component;\n-\n-import java.io.IOException;\n-import java.text.DateFormatSymbols;\n-import java.text.ParseException;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.ArrayList;\n-import java.util.Calendar;\n-import java.util.TreeMap;\n-import java.util.Date;\n-import java.util.stream.Collectors;\n-\n-/**\n- * Class to handle the line chart implementation\n- *\n- * @author Nandeesh Patel, Sourabh Poddar\n- */\n-@Component\n-public class LineChartAction implements Action {\n-\n-\tprivate final DateFormatSymbols dateFormatSymbols = new DateFormatSymbols();\n-\tprivate List<Map<String, String>> tableData;\n-\tprivate String dateColumn;\n-\tprivate String labelColumn;\n-\tprivate String valueColumn;\n-\tprivate Map<String, Integer> monthIndexMap;\n-\tprivate Comparator<String> dateComparator;\n-\tprivate Comparator<String> monthComparator;\n-\tprivate Comparator<String> yearComparator;\n-\tprivate List<String> xAxisLabels;\n-\tprivate String binType;\n-\tprivate final Map<String, Map<String, Double>> chartData = new HashMap<>();\n-\n-\t/**\n-\t * @param paramMap            - parameters from dialogflow\n-\t * @param chatMessageResponse - API response object\n-\t */\n-\t@Override\n-\tpublic void performAction(Map<String, Object> paramMap, ChatMessageResponse chatMessageResponse, ChatUserMessage message) throws IDAException, IOException {\n-\t\tif (ValidatorUtil.preActionValidation(chatMessageResponse)) {\n-\t\t\tMap<String, Object> payload = chatMessageResponse.getPayload();\n-\t\t\tString datasetName = payload.get(\"activeDS\").toString();\n-\t\t\tString tableName = payload.get(\"activeTable\").toString();\n-\t\t\tboolean onTemporaryData = message.isTemporaryData();\n-\t\t\tdateColumn = paramMap.get(IDAConst.LINE_CHART_PARAM_DATE_COL).toString();\n-\t\t\tlabelColumn = paramMap.get(IDAConst.LINE_CHART_PARAM_LABEL_COL).toString();\n-\t\t\tvalueColumn = paramMap.get(IDAConst.LINE_CHART_PARAM_VALUE_COL).toString();\n-\t\t\tString filterString = paramMap.get(IDAConst.PARAM_FILTER_STRING).toString();\n-\n-\t\t\tif (ValidatorUtil.isStringEmpty(filterString)) {\n-\t\t\t\tdouble confidence = Double.parseDouble(paramMap.get(IDAConst.PARAM_INTENT_DETECTION_CONFIDENCE).toString());\n-\t\t\t\tif (confidence == 0.0) {\n-\t\t\t\t\tparamMap.replace(IDAConst.PARAM_TEXT_MSG, IDAConst.INVALID_FILTER);\n-\t\t\t\t\tchatMessageResponse.setMessage(paramMap.get(IDAConst.PARAM_TEXT_MSG).toString());\n-\t\t\t\t\tchatMessageResponse.setUiAction(IDAConst.UAC_NRMLMSG);\n-\t\t\t\t}\n-\t\t\t\tchatMessageResponse.setMessage(paramMap.get(IDAConst.PARAM_TEXT_MSG).toString());\n-\t\t\t\tchatMessageResponse.setUiAction(IDAConst.UAC_NRMLMSG);\n-\t\t\t} else {\n-\t\t\t\t\tif (ValidatorUtil.isStringEmpty(dateColumn) || ValidatorUtil.isStringEmpty(labelColumn) || ValidatorUtil.isStringEmpty(valueColumn)) {\n-\t\t\t\t\t\tSimpleTextAction.setSimpleTextResponse(paramMap, chatMessageResponse);\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n-\t\t\t\t\tList<String> columnNameList = new ArrayList<>();\n-\t\t\t\t\tcolumnNameList.add(dateColumn);\n-\t\t\t\t\tcolumnNameList.add(labelColumn);\n-\t\t\t\t\tcolumnNameList.add(valueColumn);\n-\t\t\t\t\tMap<String, String> columnMap = ValidatorUtil.areParametersValid(datasetName, tableName, columnNameList, onTemporaryData).get(0);\n-\t\t\t\t\tvalidateParamTypes(columnMap);\n-\t\t\t\t\tif (onTemporaryData) {\n-\t\t\t\t\t\ttableData = message.getActiveTableData();\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttableData = new DataUtil().getData(datasetName, tableName, columnNameList, filterString,columnMap);    // extract data from file\n-\t\t\t\t\t}\n-\t\t\t\t\tsetBinTypeAndLabels();    // Decide the label intervals for X-Axis\n-\t\t\t\t\tcreateChartData();    // Create data for the chart based on intervals\n-\t\t\t\t\tpayload.put(IDAConst.LINE_CHART_PROPERTY_NAME, createLineChartData());\n-\t\t\t\t\tchatMessageResponse.setUiAction(IDAConst.UIA_LINECHART);\n-\t\t\t\t\tchatMessageResponse.setMessage(paramMap.get(IDAConst.PARAM_TEXT_MSG).toString());\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method to validate the datatype of the columns provided for the line chart\n-\t *\n-\t * @param paramMap - map containing the name and datatype of all the columns in selected table\n-\t * @throws IDAException - An exception when the datatype of the given columns are not suitable for line chart.\n-\t */\n-\tprivate void validateParamTypes(Map<String, String> paramMap) throws IDAException {\n-\t\tif (!IDAConst.COLUMN_TYPE_DATE.equals(paramMap.get(dateColumn))) {\n-\t\t\tthrow new IDAException(dateColumn + IDAConst.INVALID_DATE_COLUMN_MSG);\n-\t\t} else if (!IDAConst.COLUMN_TYPE_NUMERIC.equals(paramMap.get(valueColumn)) && !labelColumn.equals(valueColumn)) {\n-\t\t\tthrow new IDAException(valueColumn + IDAConst.INVALID_NUMERIC_COLUMN_MSG);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method to create the X-Axis labels and intervals based on the size of data\n-\t * Eg: Days when data is small, Months when data is spread across many months, Years when data is spread across years\n-\t */\n-\tprivate void setBinTypeAndLabels() {\n-\t\tCalendar calendar = Calendar.getInstance();\n-\t\tList<String> dayLabels = new ArrayList<>();\n-\t\tList<String> monthLabels = new ArrayList<>();\n-\t\tList<String> yearLabels = new ArrayList<>();\n-\t\tcreateMonthIndexMap();\n-\t\tcreateComparators();\n-\n-\t\tfor (Map<String, String> object : tableData) {\n-\t\t\tString currentDate = object.get(dateColumn).trim();\n-\t\t\ttry {\n-\t\t\t\tcalendar.setTime(DateUtils.parseDateStrictly(currentDate, IDAConst.DATE_PATTERNS));\n-\t\t\t} catch (ParseException ex) {\n-\t\t\t\tex.printStackTrace();\n-\t\t\t\tcontinue; // Ignore the row and continue with the next\n-\t\t\t}\n-\n-\t\t\tif (!dayLabels.contains(currentDate)) {\n-\t\t\t\tdayLabels.add(currentDate);\n-\t\t\t}\n-\t\t\tif (!monthLabels.contains(getMonth(calendar.get(Calendar.MONTH)) + \", \" + calendar.get(Calendar.YEAR))) {\n-\t\t\t\tmonthLabels.add(getMonth(calendar.get(Calendar.MONTH)) + \", \" + calendar.get(Calendar.YEAR));\n-\t\t\t}\n-\t\t\tif (!yearLabels.contains(String.valueOf(calendar.get(Calendar.YEAR)))) {\n-\t\t\t\tyearLabels.add(String.valueOf(calendar.get(Calendar.YEAR)));\n-\t\t\t}\n-\t\t}\n-\t\tdayLabels.sort(dateComparator);\n-\t\tmonthLabels.sort(monthComparator);\n-\t\tyearLabels.sort(yearComparator);\n-\t\t/*int d = Math.abs(dayLabels.size() - 10);\n-\t\tint m = Math.abs(monthLabels.size() - 10);\n-\t\tint y = Math.abs(yearLabels.size() - 10);\n-\t\tif (d <= m && d <= y) {\n-\t\t\txAxisLabels = dayLabels;\n-\t\t\tbinType = IDAConst.LABEL_TYPE_DATE;\n-\t\t} else if (m <= y) {\n-\t\t\txAxisLabels = monthLabels;\n-\t\t\tbinType = IDAConst.LABEL_TYPE_MONTH;\n-\t\t} else {\n-\t\t\txAxisLabels = yearLabels;\n-\t\t\tbinType = IDAConst.LABEL_TYPE_YEAR;\n-\t\t}*/\n-\t\t// TODO: since D3 handles the binning automatically remove the binning logic here. Can be done while integrating with RDF model\n-\t\txAxisLabels = dayLabels;\n-\t\tbinType = IDAConst.LABEL_TYPE_DATE;\n-\t}\n-\n-\t/**\n-\t * Method to create the data for each lines based on the bin type.\n-\t */\n-\tprivate void createChartData() {\n-\t\tMap<String, Double> labelData;\n-\t\tString date;\n-\t\tString label;\n-\t\tdouble value;\n-\t\tString dateKey;\n-\t\tfor (Map<String, String> row : tableData) {\n-\t\t\tdate = row.get(dateColumn).trim();\n-\t\t\tlabel = row.get(labelColumn);\n-\t\t\tvalue = 0.0;\n-\t\t\ttry {\n-\t\t\t\tvalue = labelColumn.equals(valueColumn) ? 1.0 : Double.parseDouble(row.get(valueColumn));\n-\t\t\t} catch (NumberFormatException ex) {\n-\t\t\t\tSystem.out.println(ex.getMessage());\n-\t\t\t}\n-\t\t\tif (binType.equals(IDAConst.LABEL_TYPE_MONTH)) {\n-\t\t\t\tlabelData = new TreeMap<>(monthComparator);\n-\t\t\t} else if (binType.equals(IDAConst.LABEL_TYPE_YEAR)) {\n-\t\t\t\tlabelData = new TreeMap<>(yearComparator);\n-\t\t\t} else {\n-\t\t\t\tlabelData = new TreeMap<>(dateComparator);\n-\t\t\t}\n-\t\t\tif (chartData.containsKey(label)) {\n-\t\t\t\tlabelData = chartData.get(label);\n-\t\t\t} else {\n-\t\t\t\tfor (String l : xAxisLabels) {\n-\t\t\t\t\tlabelData.put(l, 0.0);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tdateKey = extractDateKey(binType, date);\n-\t\t\t} catch (ParseException ex) {\n-\t\t\t\tex.printStackTrace();\n-\t\t\t\tcontinue; // Ignore the row and continue with the next\n-\t\t\t}\n-\t\t\tDouble oldValue = labelData.get(dateKey);\n-\t\t\tif (oldValue != null)\n-\t\t\t\tlabelData.put(dateKey, oldValue + value);\n-\t\t\telse\n-\t\t\t\tlabelData.put(dateKey, value);\n-\t\t\tchartData.put(label, labelData);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method to create a LineChartData object with all the values that would be sent in the response\n-\t *\n-\t * @return - An object of LineChartData class with all the values\n-\t */\n-\tprivate LineChartData createLineChartData() {\n-\t\tLineChartData lineChartData = new LineChartData();\n-\t\tlineChartData.setxAxisLabel(dateColumn);\n-\t\tString yAxisLabel = valueColumn;\n-\t\tif (labelColumn.equals(valueColumn)) {\n-\t\t\tyAxisLabel = IDAConst.COUNT_OF_PREFIX + valueColumn;\n-\t\t}\n-\t\tlineChartData.setyAxisLabel(yAxisLabel);\n-\t\tlineChartData.setChartDesc(IDAConst.LINE_CHART_DESC_PREFIX + yAxisLabel + \" across \" + dateColumn);\n-\t\tList<Date> dateLabels = xAxisLabels.stream().map(l -> {\n-\t\t\ttry {\n-\t\t\t\treturn DateUtils.parseDate(l, IDAConst.DATE_PATTERNS);\n-\t\t\t} catch (ParseException e) {\n-\t\t\t\tSystem.out.println(\"Date parse exception:\" + l);\n-\t\t\t}\n-\t\t\treturn new Date();\n-\t\t}).collect(Collectors.toList());\n-\t\tlineChartData.setxAxisLabels(dateLabels);\n-\t\tList<LineChartItem> lines = new ArrayList<>();\n-\t\tfor (String label : chartData.keySet()) {\n-\t\t\tMap<String, Double> labelData = chartData.get(label);\n-\t\t\tLineChartItem lineChartItem = new LineChartItem();\n-\t\t\tlineChartItem.setLabel(label);\n-\t\t\tList<Double> values = new ArrayList<>();\n-\t\t\tfor (String key : labelData.keySet()) {\n-\t\t\t\tvalues.add(labelData.get(key));\n-\t\t\t}\n-\t\t\tlineChartItem.setLineValues(values);\n-\t\t\tlines.add(lineChartItem);\n-\t\t}\n-\t\tlineChartData.setLines(lines);\n-\t\treturn lineChartData;\n-\t}\n-\n-\t/**\n-\t * Method to convert the month index to its string equivalent\n-\t *\n-\t * @param month - index of the month as integer\n-\t * @return - name of the month based on the integer\n-\t */\n-\tprivate String getMonth(int month) {\n-\t\treturn dateFormatSymbols.getMonths()[month];\n-\t}\n-\n-\t/**\n-\t * Method to create the label for the graph based on the bin type for a given date string\n-\t *\n-\t * @param type       - type of the binning (date, month, or year)\n-\t * @param dateString - date in string format\n-\t * @return - Label to be used on the graph\n-\t * @throws ParseException - Exception when a date is not in correct format\n-\t */\n-\tprivate String extractDateKey(String type, String dateString) throws ParseException {\n-\t\tCalendar calendar = Calendar.getInstance();\n-\t\tDate date = DateUtils.parseDateStrictly(dateString.trim(), IDAConst.DATE_PATTERNS);\n-\t\tcalendar.setTime(date);\n-\t\tswitch (type) {\n-\t\t\tcase IDAConst.LABEL_TYPE_MONTH:\n-\t\t\t\treturn getMonth(calendar.get(Calendar.MONTH)) + \", \" + calendar.get(Calendar.YEAR);\n-\t\t\tcase IDAConst.LABEL_TYPE_YEAR:\n-\t\t\t\treturn String.valueOf(calendar.get(Calendar.YEAR));\n-\t\t\tdefault:\n-\t\t\t\treturn dateString;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method to create a map of months and their index which is used for sorting the month labels\n-\t */\n-\tprivate void createMonthIndexMap() {\n-\t\tmonthIndexMap = new HashMap<>();\n-\t\tfor (int i = 0; i < dateFormatSymbols.getMonths().length; i++) {\n-\t\t\tmonthIndexMap.put(dateFormatSymbols.getMonths()[i], i);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method to create comparators for different label types (date, month, and year) which is used for sorting the labels\n-\t */\n-\tprivate void createComparators() {\n-\t\tdateComparator = (String date1, String date2) -> {\n-\t\t\ttry {\n-\t\t\t\treturn DateUtils.parseDateStrictly(date1, IDAConst.DATE_PATTERNS).compareTo(DateUtils.parseDateStrictly(date2, IDAConst.DATE_PATTERNS));\n-\t\t\t} catch (ParseException e) {\n-\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t};\n-\t\tmonthComparator = Comparator.comparing((String month) -> monthIndexMap.get(month.split(\",\")[0]));\n-\t\tyearComparator = Comparator.comparing(Integer::parseInt);\n-\t}\n-\n-}"
  },
  {
    "sha": "ba2fe93f781a32e28c9e4e6297c7ba15de84456e",
    "filename": "backend-server/src/main/java/org/dice/ida/action/def/VisualizeAction.java",
    "status": "modified",
    "additions": 245,
    "deletions": 24,
    "changes": 269,
    "blob_url": "https://github.com/dice-group/IDA/blob/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/action/def/VisualizeAction.java",
    "raw_url": "https://github.com/dice-group/IDA/raw/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/action/def/VisualizeAction.java",
    "contents_url": "https://api.github.com/repos/dice-group/IDA/contents/backend-server/src/main/java/org/dice/ida/action/def/VisualizeAction.java?ref=612381c42273f9e9ec948c8081360faa9b730148",
    "patch": "@@ -14,6 +14,8 @@\n import org.dice.ida.model.bubblechart.BubbleChartItem;\n import org.dice.ida.model.groupedbargraph.GroupedBarGraphData;\n import org.dice.ida.model.groupedbubblechart.GroupedBubbleChartData;\n+import org.dice.ida.model.linechart.LineChartData;\n+import org.dice.ida.model.linechart.LineChartItem;\n import org.dice.ida.model.scatterplot.ScatterPlotData;\n import org.dice.ida.model.scatterplot.ScatterPlotItem;\n import org.dice.ida.util.DataUtil;\n@@ -73,6 +75,7 @@\n \tprivate Comparator<String> comparator;\n \tprivate StringBuilder textMsg;\n \tprivate boolean groupingNeeded;\n+\tprivate List<String> lineChartXAxisLabels = new ArrayList<>();\n \n \t/**\n \t * @param paramMap            - parameters from dialogflow\n@@ -110,7 +113,7 @@ public void performAction(Map<String, Object> paramMap, ChatMessageResponse chat\n \t\t\t\tif (options.size() == 1 && columnNameList.size() == attributeList.size()) {\n \t\t\t\t\tgetParameters(paramMap);\n \t\t\t\t\tgroupingNeeded = false;\n-\t\t\t\t\tif (!IDAConst.INSTANCE_PARAM_TYPE_UNIQUE.equals(parameterTypeMap.get(IDAConst.X_AXIS_PARAM + IDAConst.ATTRIBUTE_TYPE_SUFFIX)) && !intent.equals(Intent.SCATTERPLOT.getKey()) &&\n+\t\t\t\t\tif (!IDAConst.INSTANCE_PARAM_TYPE_UNIQUE.equals(parameterTypeMap.get(IDAConst.X_AXIS_PARAM + IDAConst.ATTRIBUTE_TYPE_SUFFIX)) && !intent.equals(Intent.SCATTERPLOT.getKey()) && !intent.equals(Intent.LINE_CHART.getKey()) &&\n \t\t\t\t\t\t\t!handleGroupingLogic(chatMessageResponse, paramMap)) {\n \t\t\t\t\t\tchatMessageResponse.setUiAction(IDAConst.UAC_NRMLMSG);\n \t\t\t\t\t\treturn;\n@@ -155,6 +158,11 @@ public void performAction(Map<String, Object> paramMap, ChatMessageResponse chat\n \t\t\t\t\t\t\tchatMessageResponse.setUiAction(IDAConst.UIA_SCATTERPLOT);\n \t\t\t\t\t\t\tchatMessageResponse.setMessage(IDAConst.SCATTER_PLOT_LOADED);\n \t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase IDAConst.VIZ_TYPE_LINE_CHART:\n+\t\t\t\t\t\t\tcreateLineChartResponse(paramMap);\n+\t\t\t\t\t\t\tchatMessageResponse.setUiAction(IDAConst.UIA_LINECHART);\n+\t\t\t\t\t\t\tchatMessageResponse.setMessage(IDAConst.LINE_CHART_LOADED);\n+\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\tdefault:\n \t\t\t\t\t\t\tchatMessageResponse.setMessage(IDAConst.BOT_SOMETHING_WRONG);\n \t\t\t\t\t\t\tchatMessageResponse.setUiAction(IDAConst.UAC_NRMLMSG);\n@@ -194,7 +202,7 @@ public void performAction(Map<String, Object> paramMap, ChatMessageResponse chat\n \t\t\tparamType = attributeType.isEmpty() ?\n \t\t\t\t\tcolumnMap.get(paramMap.get(attributeName).toString()) :\n \t\t\t\t\tattributeType;\n-\t\t\toptions = getFilteredInstances(attributeName, paramType.toLowerCase(), paramMap.get(attributeName).toString(), !attributeType.isEmpty());\n+\t\t\toptions = getFilteredInstances(attributeName, paramType.toLowerCase(), paramMap.get(attributeName).toString(), !attributeType.isEmpty(), paramMap);\n \t\t\tif (createResponseForUser(options, i, attributeName, attributeType, paramMap, paramType)) {\n \t\t\t\tbreak;\n \t\t\t}\n@@ -276,11 +284,12 @@ private boolean createResponseForUser(Set<String> options, int i, String attribu\n \t * @param isTypeFromUser - Was the type selected by user or fetched from metadata\n \t * @return - list of options for the user to choose from\n \t */\n-\tprivate Set<String> getFilteredInstances(String attribute, String attributeType, String columnName, boolean isTypeFromUser) {\n+\tprivate Set<String> getFilteredInstances(String attribute, String attributeType, String columnName, boolean isTypeFromUser, Map<String, Object> paramMap) throws  IOException{\n \t\tMap<String, Map<String, Map<String, String>>> filteredInstances = new HashMap<>();\n \t\tString instanceParamType;\n \t\tString instanceParamTransType;\n \t\tSet<String> options = new HashSet<>();\n+\t\tboolean areValuesUnique;\n \t\tfor (String instance : instanceMap.keySet()) {\n \t\t\tfor (String param : instanceMap.get(instance).keySet()) {\n \t\t\t\tinstanceParamType = instanceMap.get(instance).get(param).get(IDAConst.INSTANCE_PARAM_TYPE_KEY).toLowerCase();\n@@ -292,8 +301,13 @@ private boolean createResponseForUser(Set<String> options, int i, String attribu\n \t\t\t\t\t\t\t\t\t\t(!isTypeFromUser && IDAConst.INSTANCE_PARAM_TYPE_NOT_REQUIRED.equals(instanceParamType)) ||\n \t\t\t\t\t\t\t\t\t\t(IDAConst.PARAM_TYPE_TREE.get(attributeType) != null && IDAConst.PARAM_TYPE_TREE.get(attributeType).contains(instanceParamType))\n \t\t\t\t\t\t)) {\n-\t\t\t\t\tif ((IDAConst.INSTANCE_PARAM_TYPE_UNIQUE.equals(instanceParamType) && !Boolean.parseBoolean(columnUniquenessMap.get(columnName))) ||\n-\t\t\t\t\t\t\t(IDAConst.INSTANCE_PARAM_TYPE_NON_UNIQUE.equals(instanceParamType) && Boolean.parseBoolean(columnUniquenessMap.get(columnName)))) {\n+\t\t\t\t\tif(!instanceMap.get(instance).get(param).get(IDAConst.INSTANCE_PARAM_DEPENDENT_KEY).isEmpty()){\n+\t\t\t\t\t\tareValuesUnique = areCompositeColumnsUnique(columnName, instanceMap.get(instance).get(param).get(IDAConst.INSTANCE_PARAM_DEPENDENT_KEY), paramMap);\n+\t\t\t\t\t}else{\n+\t\t\t\t\t\tareValuesUnique = Boolean.parseBoolean(columnUniquenessMap.get(columnName));\n+\t\t\t\t\t}\n+\t\t\t\t\tif ((IDAConst.INSTANCE_PARAM_TYPE_UNIQUE.equals(instanceParamType) && !areValuesUnique) ||\n+\t\t\t\t\t\t\t(IDAConst.INSTANCE_PARAM_TYPE_NON_UNIQUE.equals(instanceParamType) && areValuesUnique)) {\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t\tfilteredInstances.put(instance, instanceMap.get(instance));\n@@ -492,11 +506,11 @@ private void processBinsForNumericLabels(int binSize, String xAxisColumn, String\n \t/**\n \t * Method to process the bins for numeric labels along with grouping\n \t *\n-\t * @param binSize \t\t\t- size of the bins\n-\t * @param xAxisColumn \t\t- column for primary parameter\n-\t * @param yAxisColumn \t\t- column for secondary parameter\n-\t * @param yAxisColumnType \t- type of secondary parameter\n-\t * @param groupColumn \t\t- column for grouping the labels\n+\t * @param binSize         - size of the bins\n+\t * @param xAxisColumn     - column for primary parameter\n+\t * @param yAxisColumn     - column for secondary parameter\n+\t * @param yAxisColumnType - type of secondary parameter\n+\t * @param groupColumn     - column for grouping the labels\n \t */\n \tprivate void processGroupedBinsForNumericLabels(int binSize, String xAxisColumn, String yAxisColumn, String yAxisColumnType, String groupColumn) {\n \t\tString xValue;\n@@ -515,7 +529,7 @@ private void processGroupedBinsForNumericLabels(int binSize, String xAxisColumn,\n \t\tMap<String, Double> groupEntries = new HashMap<>();\n \t\tMap<String, Map<String, Integer>> groupedLabelCounts = new HashMap<>();\n \t\tMap<String, Integer> labelCounts = new HashMap<>();\n-\t\tfor(String group: groups) {\n+\t\tfor (String group : groups) {\n \t\t\tgroupEntries.put(group, 0.0);\n \t\t\tlabelCounts.put(group, 1);\n \t\t}\n@@ -595,12 +609,12 @@ private void processBinsForDateLabels(int binSize, String binType, String xAxisC\n \t/**\n \t * Method to process the bins for date labels along with grouping\n \t *\n-\t * @param binSize \t\t\t- size of the bins\n-\t * @param binType \t\t\t- type of duration (days, weeks, months or years)\n-\t * @param xAxisColumn \t\t- column for labels\n-\t * @param yAxisColumn \t\t- column for values\n-\t * @param yAxisColumnType \t- type of value column\n-\t * @param groupColumn \t\t- column for grouping the labels\n+\t * @param binSize         - size of the bins\n+\t * @param binType         - type of duration (days, weeks, months or years)\n+\t * @param xAxisColumn     - column for labels\n+\t * @param yAxisColumn     - column for values\n+\t * @param yAxisColumnType - type of value column\n+\t * @param groupColumn     - column for grouping the labels\n \t */\n \tprivate void processGroupedBinsForDateLabels(int binSize, String binType, String xAxisColumn, String yAxisColumn, String yAxisColumnType, String groupColumn) {\n \t\tString xValue;\n@@ -616,7 +630,7 @@ private void processGroupedBinsForDateLabels(int binSize, String binType, String\n \t\tMap<String, Integer> labelCounts = new HashMap<>(initializeGraphItemsForDateBins(binSize, binType, xAxisColumn, calendar));\n \t\tMap<String, Double> groupEntries = new HashMap<>();\n \t\tMap<String, Integer> lblCounts = new HashMap<>();\n-\t\tfor(String group: groups) {\n+\t\tfor (String group : groups) {\n \t\t\tgroupEntries.put(group, 0.0);\n \t\t\tlblCounts.put(group, 0);\n \t\t}\n@@ -902,12 +916,12 @@ private void createGroupedBubbleChartResponse() {\n \t/**\n \t * Method to handle the chatbot flow for grouping the visualizations\n \t *\n-\t * @param chatMessageResponse \t\t\t- instance of the chatbot response\n-\t * @param paramMap \t\t\t\t\t\t- parameter map from dialogflow\n-\t * @return \t\t\t\t\t\t\t\t- true if grouping flow is complete and false otherwise\n-\t * @throws NoSuchAlgorithmException \t- dialogflow auth encryption algorithm is invalid\n-\t * @throws IOException \t\t\t\t\t- dialogflow credentials file does not exist\n-\t * @throws InvalidKeySpecException \t\t- dialogflow auth key invalid\n+\t * @param chatMessageResponse - instance of the chatbot response\n+\t * @param paramMap            - parameter map from dialogflow\n+\t * @return - true if grouping flow is complete and false otherwise\n+\t * @throws NoSuchAlgorithmException - dialogflow auth encryption algorithm is invalid\n+\t * @throws IOException              - dialogflow credentials file does not exist\n+\t * @throws InvalidKeySpecException  - dialogflow auth key invalid\n \t */\n \tprivate boolean handleGroupingLogic(ChatMessageResponse chatMessageResponse, Map<String, Object> paramMap) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {\n \t\tString isGroupNeeded = paramMap.getOrDefault(\"isGrouped\", \"\").toString();\n@@ -934,4 +948,211 @@ private boolean handleGroupingLogic(ChatMessageResponse chatMessageResponse, Map\n \t\t}\n \t}\n \n+\t/**\n+\t * Method to check the uniqueness of values of multiple columns in a table combined.\n+\t *\n+\t * @param primaryCol - main parameter\n+\t * @param dependentCols - comma separated value od secondary parameters\n+\t * @param paramMap - parameter map from the dialogflow\n+\t * @return boolean value representing the uniqueness\n+\t * @throws IOException - If the dataset or table name is invalid\n+\t */\n+\tprivate boolean areCompositeColumnsUnique(String primaryCol, String dependentCols, Map<String, Object> paramMap) throws IOException {\n+\t\tboolean areAllUnique = true;\n+\t\tList<String> columnsLst = new ArrayList<>();\n+\t\tHashSet<String> combinedValue = new HashSet<>();\n+\t\tcolumnsLst.add(primaryCol);\n+\t\tfor (String param : dependentCols.split(\",\")) {\n+\t\t\tif (paramMap.get(param) != null && !paramMap.get(param).toString().isEmpty()) {\n+\t\t\t\tcolumnsLst.add(paramMap.get(param).toString());\n+\t\t\t}\n+\t\t}\n+\t\tfor (String col : columnsLst) {\n+\t\t\tif (!Boolean.parseBoolean(columnUniquenessMap.get(col))) {\n+\t\t\t\tareAllUnique = false;\n+\t\t\t}\n+\t\t}\n+\t\tif (areAllUnique) {\n+\t\t\treturn areAllUnique;\n+\t\t}\n+\t\tList<Map<String, String>> data = dataUtil.getData(payload.get(\"activeDS\").toString(), payload.get(\"activeTable\").toString(), columnsLst, paramMap.get(IDAConst.PARAM_FILTER_STRING).toString(), columnMap);\n+\t\tList<String> rowVal;\n+\t\tfor (Map<String, String> row : data) {\n+\t\t\trowVal = new ArrayList<>();\n+\t\t\tfor (String col : columnsLst) {\n+\t\t\t\trowVal.add(row.get(col));\n+\t\t\t}\n+\t\t\tif (combinedValue.contains(String.join(\" | \", rowVal))) {\n+\t\t\t\treturn false;\n+\t\t\t} else {\n+\t\t\t\tcombinedValue.add(String.join(\" | \", rowVal));\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Method to create line chart data based on user options.\n+\t *\n+\t * @param dateColumn - column to be mapped to X-Axis\n+\t * @param labelColumn - column to be mapped to line labels\n+\t * @param valueColumn - Column to be mapped to Y-Axis\n+\t * @param valueType - Type of transformation if the Date & Line labels are repeating\n+\t * @return - line chart data\n+\t */\n+\tprivate Map<String, Map<String, Double>> createLineChartData(String dateColumn, String labelColumn, String valueColumn, String valueType) {\n+\t\tMap<String, Double> labelData = new TreeMap<>();\n+\t\tString date;\n+\t\tString label;\n+\t\tdouble value;\n+\t\tMap<String, Map<String, Double>> chartData = new HashMap<>();\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcomparator = LableComparator.getForKey(IDAConst.COMPARATOR_TYPE_DATE);\n+\t\tMap<String, Map<String, Integer>> labelCountsMap = new HashMap<>();\n+\t\tMap<String, Integer> labelCounts;\n+\n+\t\tcreatelineChartXAxisLabels(calendar, dateColumn);\n+\t\tfor (Map<String, String> row : tableData) {\n+\t\t\tdate = row.get(dateColumn).trim();\n+\t\t\tlabel = row.get(labelColumn);\n+\t\t\tvalue = 0.0;\n+\t\t\ttry {\n+\t\t\t\tvalue = labelColumn.equals(valueColumn) ? 1.0 : Double.parseDouble(row.get(valueColumn));\n+\t\t\t} catch (NumberFormatException ex) {\n+\t\t\t\tSystem.out.println(ex.getMessage());\n+\t\t\t}\n+\t\t\tlabelData = new TreeMap<>(comparator);\n+\t\t\tlabelCounts = new HashMap<>();\n+\t\t\tif (chartData.containsKey(label)) {\n+\t\t\t\tlabelData = chartData.get(label);\n+\t\t\t\tlabelCounts = labelCountsMap.get(label);\n+\t\t\t} else {\n+\t\t\t\tfor (String l : lineChartXAxisLabels) {\n+\t\t\t\t\tlabelData.put(l, 0.0);\n+\t\t\t\t\tlabelCounts.put(l, 0);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tlabelCounts.put(date, labelCounts.get(date) + 1);\n+\t\t\tlabelCountsMap.put(label, labelCounts);\n+\t\t\tupdateLineChartData(chartData, labelData, label, date, valueType, value);\n+\t\t}\n+\t\tif(IDAConst.TRANSFORMATION_TYPE_AVG.equals(valueType)) {\n+\t\t\tupdateLinesWithAverage(chartData, labelCountsMap);\n+\t\t}\n+\t\treturn chartData;\n+\t}\n+\n+\t/**\n+\t * Method to create the X-Axis labels for the line chart\n+\t *\n+\t * @param calendar - Calendar instance\n+\t * @param dateColumn - Temporal column\n+\t */\n+\tprivate void createlineChartXAxisLabels(Calendar calendar, String dateColumn) {\n+\t\tlineChartXAxisLabels = new ArrayList<>();\n+\t\tfor (Map<String, String> object : tableData) {\n+\t\t\tString currentDate = object.get(dateColumn).trim();\n+\t\t\ttry {\n+\t\t\t\tcalendar.setTime(org.apache.commons.lang3.time.DateUtils.parseDateStrictly(currentDate, IDAConst.DATE_PATTERNS));\n+\t\t\t} catch (java.text.ParseException ex) {\n+\t\t\t\tex.printStackTrace();\n+\t\t\t\tcontinue; // Ignore the row and continue with the next\n+\t\t\t}\n+\n+\t\t\tif (!lineChartXAxisLabels.contains(currentDate)) {\n+\t\t\t\tlineChartXAxisLabels.add(currentDate);\n+\t\t\t}\n+\t\t}\n+\t\tlineChartXAxisLabels.sort(comparator);\n+\t}\n+\n+\t/**\n+\t * Method to update the line values of the line chart data after processing a row\n+\t *\n+\t * @param chartData - line chart data instance\n+\t * @param labelData - line values for a label (Empty map for newly seen label or existing data for already seen label)\n+\t * @param label - label of the line\n+\t * @param date - date string for the row\n+\t * @param valueType - Y-axis value type\n+\t * @param value - Y-Axis value of the row\n+\t */\n+\tprivate void updateLineChartData(Map<String, Map<String, Double>> chartData,Map<String, Double> labelData, String label, String date, String valueType, double value) {\n+\t\tdouble oldValue = labelData.getOrDefault(date, 0.0);\n+\t\tdouble newValue;\n+\t\tswitch (valueType) {\n+\t\t\tcase IDAConst.TRANSFORMATION_TYPE_COUNT:\n+\t\t\t\tnewValue = oldValue + 1.0;\n+\t\t\t\tbreak;\n+\t\t\tcase IDAConst.TRANSFORMATION_TYPE_AVG:\n+\t\t\tcase IDAConst.TRANSFORMATION_TYPE_SUM:\n+\t\t\t\tnewValue = oldValue + value;\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tnewValue = value;\n+\t\t\t\tbreak;\n+\t\t}\n+\t\tlabelData.put(date, newValue);\n+\t\tchartData.put(label, labelData);\n+\t}\n+\n+\t/**\n+\t * Method to update the line values with the average.\n+\t *\n+\t * @param chartData - line chart data\n+\t * @param labelCountsMap - count of values for each labels to calculate the average\n+\t */\n+\tprivate void updateLinesWithAverage(Map<String, Map<String, Double>> chartData, Map<String, Map<String, Integer>> labelCountsMap) {\n+\t\tMap<String, Integer> labelCounts;\n+\t\tfor(String lineLabel: chartData.keySet()) {\n+\t\t\tlabelCounts = labelCountsMap.get(lineLabel);\n+\t\t\tMap<String, Double> labelData = chartData.get(lineLabel);\n+\t\t\tfor(String dateLabel: labelData.keySet()) {\n+\t\t\t\tlabelData.put(dateLabel, labelData.get(dateLabel) / (labelCounts.get(dateLabel) > 0.0 ? labelCounts.get(dateLabel) : 1.0));\n+\t\t\t}\n+\t\t\tchartData.put(lineLabel, labelData);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Method to populate the line chart data object in the response.\n+\t */\n+\tprivate void createLineChartResponse(Map<String, Object> paramMap) {\n+\t\tLineChartData lineChartData = new LineChartData();\n+\t\tgetParameters(paramMap);\n+\t\tString dateColumn = parameterMap.get(IDAConst.LINE_CHART_TEMPORAL_PARAM);\n+\t\tString labelColumn = parameterMap.get(IDAConst.LINE_CHART_LABLE_PARAM);\n+\t\tString valueColumn = parameterMap.get(IDAConst.LINE_CHART_VALUE_PARAM);\n+\t\tString valueType = parameterTypeMap.get(IDAConst.LINE_CHART_VALUE_PARAM + IDAConst.ATTRIBUTE_TYPE_SUFFIX);\n+\t\tMap<String, Map<String, Double>> chartData = createLineChartData(dateColumn, labelColumn, valueColumn, valueType.toLowerCase());\n+\t\tlineChartData.setxAxisLabel(dateColumn);\n+\t\tString yAxisLabel = valueColumn;\n+\t\tif (labelColumn.equals(valueColumn)) {\n+\t\t\tyAxisLabel = IDAConst.COUNT_OF_PREFIX + valueColumn;\n+\t\t}\n+\t\tlineChartData.setyAxisLabel(yAxisLabel);\n+\t\tlineChartData.setChartDesc(IDAConst.LINE_CHART_DESC_PREFIX + yAxisLabel + \" across \" + dateColumn);\n+\t\tList<Date> dateLabels = lineChartXAxisLabels.stream().map(l -> {\n+\t\t\ttry {\n+\t\t\t\treturn org.apache.commons.lang3.time.DateUtils.parseDate(l, IDAConst.DATE_PATTERNS);\n+\t\t\t} catch (java.text.ParseException e) {\n+\t\t\t\tSystem.out.println(\"Date parse exception:\" + l);\n+\t\t\t}\n+\t\t\treturn new Date();\n+\t\t}).collect(Collectors.toList());\n+\t\tlineChartData.setxAxisLabels(dateLabels);\n+\t\tList<LineChartItem> lines = new ArrayList<>();\n+\t\tfor (String label : chartData.keySet()) {\n+\t\t\tMap<String, Double> labelData = chartData.get(label);\n+\t\t\tLineChartItem lineChartItem = new LineChartItem();\n+\t\t\tlineChartItem.setLabel(label);\n+\t\t\tList<Double> values = new ArrayList<>();\n+\t\t\tfor (String key : labelData.keySet()) {\n+\t\t\t\tvalues.add(labelData.get(key));\n+\t\t\t}\n+\t\t\tlineChartItem.setLineValues(values);\n+\t\t\tlines.add(lineChartItem);\n+\t\t}\n+\t\tlineChartData.setLines(lines);\n+\t\tpayload.put(\"lineChartData\", lineChartData);\n+\t}\n }"
  },
  {
    "sha": "4fcacc2b2ee418074f298f4ab0eebaebbebc3a66",
    "filename": "backend-server/src/main/java/org/dice/ida/action/process/ActionMappingHelper.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/dice-group/IDA/blob/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/action/process/ActionMappingHelper.java",
    "raw_url": "https://github.com/dice-group/IDA/raw/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/action/process/ActionMappingHelper.java",
    "contents_url": "https://api.github.com/repos/dice-group/IDA/contents/backend-server/src/main/java/org/dice/ida/action/process/ActionMappingHelper.java?ref=612381c42273f9e9ec948c8081360faa9b730148",
    "patch": "@@ -9,7 +9,6 @@\n import org.dice.ida.action.def.SuggestVisualization;\n import org.dice.ida.action.def.ListVisualizationsAction;\n import org.dice.ida.action.def.VisualizeAction;\n-import org.dice.ida.action.def.LineChartAction;\n import org.dice.ida.action.def.ClusterAction;\n import org.dice.ida.action.def.ClearConversationAction;\n import org.dice.ida.action.def.CauseExceptionAction;\n@@ -52,8 +51,6 @@ public Action fetchActionInstance(String intentText) {\n \t\t\t\taction = appContext.getBean(SuggestVisualization.class);\n \t\t\t\tbreak;\n \t\t\tcase LINE_CHART:\n-\t\t\t\taction = new LineChartAction();\n-\t\t\t\tbreak;\n \t\t\tcase BARCHART:\n \t\t\tcase BUBBLECHART:\n \t\t\tcase SCATTERPLOT:"
  },
  {
    "sha": "60c16a2839af4b3d1dbc03b0be47e0a1273fb9e1",
    "filename": "backend-server/src/main/java/org/dice/ida/constant/IDAConst.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/dice-group/IDA/blob/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/constant/IDAConst.java",
    "raw_url": "https://github.com/dice-group/IDA/raw/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/constant/IDAConst.java",
    "contents_url": "https://api.github.com/repos/dice-group/IDA/contents/backend-server/src/main/java/org/dice/ida/constant/IDAConst.java?ref=612381c42273f9e9ec948c8081360faa9b730148",
    "patch": "@@ -162,6 +162,10 @@\n \tpublic static final String LINE_CHART_PARAM_VALUE_COL = \"line_value_column\";\n \tpublic static final String INVALID_DATE_COLUMN_MSG = \" is not a date column\";\n \tpublic static final String INVALID_NUMERIC_COLUMN_MSG = \" is not a numeric column\";\n+\tpublic static final String LINE_CHART_LOADED = \"The requested line chart has been loaded.\";\n+\tpublic static final String LINE_CHART_TEMPORAL_PARAM = \"Temporal_Column\";\n+\tpublic static final String LINE_CHART_LABLE_PARAM = \"Line_Label\";\n+\tpublic static final String LINE_CHART_VALUE_PARAM = \"Line_Value\";\n \n \t/**\n \t * Column data types\n@@ -201,6 +205,7 @@\n \tpublic static final String TRANSFORMATION_LABEL = \"Transformation\";\n \tpublic static final String INSTANCE_PARAM_TYPE_KEY = \"type\";\n \tpublic static final String INSTANCE_PARAM_TRANS_TYPE_KEY = \"trans_type\";\n+\tpublic static final String INSTANCE_PARAM_DEPENDENT_KEY = \"dependentOn\";\n \tpublic static final String INSTANCE_PARAM_TYPE_UNIQUE = \"unique\";\n \tpublic static final String INSTANCE_PARAM_TYPE_NON_UNIQUE = \"non unique\";\n \tpublic static final String INSTANCE_PARAM_TYPE_NOT_REQUIRED = \"not required\";\n@@ -248,6 +253,7 @@\n \tString VIZ_TYPE_BAR_CHART = \"bar_chart\";\n \tString VIZ_TYPE_BUBBLE_CHART = \"bubble_chart\";\n \tString VIZ_TYPE_SCATTER_PLOT = \"scatter_plot\";\n+\tString VIZ_TYPE_LINE_CHART = \"line_chart\";\n \tString BUBBLE_LABEL_PARAM = \"Bubble_Label\";\n \tString BUBBLE_SIZE_PARAM = \"Bubble_Size\";\n \tString X_AXIS_PARAM = \"X-Axis\";\n@@ -292,6 +298,9 @@\n \t\tput(\"Y-Axis\", \"Y-Axis\");\n \t\tput(\"Bubble_Label\", \"label of the bubbles\");\n \t\tput(\"Bubble_Size\", \"size of the bubbles\");\n+\t\tput(\"Temporal_Column\", \"X-Axis (Temporal data)\");\n+\t\tput(\"Line_Label\", \"Line Labels\");\n+\t\tput(\"Line_Value\", \"Line Values\");\n \t}};\n \tpublic static final Map<String, String> PARAM_TYPE_EG_MAP = new HashMap<>() {{\n \t\tput(\"numeric\", \"Group of N values\");"
  },
  {
    "sha": "331166fb88d4051dae54cdc44d001bcb665a2bc7",
    "filename": "backend-server/src/main/java/org/dice/ida/model/Intent.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/dice-group/IDA/blob/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/model/Intent.java",
    "raw_url": "https://github.com/dice-group/IDA/raw/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/model/Intent.java",
    "contents_url": "https://api.github.com/repos/dice-group/IDA/contents/backend-server/src/main/java/org/dice/ida/model/Intent.java?ref=612381c42273f9e9ec948c8081360faa9b730148",
    "patch": "@@ -10,7 +10,7 @@\n     LIST_DATASET(\"list-dataset\", IDAConst.UAC_NRMLMSG),\n \tLIST_VISUALIZATION(\"list-visualization\", IDAConst.UAC_NRMLMSG),\n     SUGGEST_VISUALIZATION(\"suggest-visualization\", IDAConst.UAC_NRMLMSG),\n-\tLINE_CHART(\"line-chart\", IDAConst.UIA_LINECHART),\n+\tLINE_CHART(\"line_chart\", IDAConst.UIA_LINECHART),\n \tBARCHART(\"bar_chart\",IDAConst.UIA_BARGRAPH),\n \tSCATTERPLOT(\"scatter_plot\",IDAConst.UIA_SCATTERPLOT),\n \tBUBBLECHART(\"bubble_chart\", IDAConst.UIA_BUBBLECHART),"
  },
  {
    "sha": "ff29d93f3a49cc179f68c2c8434290db76f23dfc",
    "filename": "backend-server/src/main/java/org/dice/ida/util/RDFUtil.java",
    "status": "modified",
    "additions": 15,
    "deletions": 2,
    "changes": 17,
    "blob_url": "https://github.com/dice-group/IDA/blob/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/util/RDFUtil.java",
    "raw_url": "https://github.com/dice-group/IDA/raw/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/java/org/dice/ida/util/RDFUtil.java",
    "contents_url": "https://api.github.com/repos/dice-group/IDA/contents/backend-server/src/main/java/org/dice/ida/util/RDFUtil.java?ref=612381c42273f9e9ec948c8081360faa9b730148",
    "patch": "@@ -93,9 +93,11 @@ private ResultSet getResultFromQuery(String queryString) {\n \t\tMap<String, Map<String, Map<String, String>>> instanceMap = new HashMap<>();\n \t\tString instanceLabel;\n \t\tString paramType;\n+\t\tString dependentParam;\n+\t\tString paramLabel;\n \t\tQuerySolution resource;\n \t\tString queryString = IDAConst.IDA_SPARQL_PREFIX +\n-\t\t\t\t\"SELECT DISTINCT ?label ?paramLabel ?paramType ?transformationLabel ?transformationTargetType \" +\n+\t\t\t\t\"SELECT DISTINCT ?label ?paramLabel ?paramType ?transformationLabel ?transformationTargetType ?dependentCol \" +\n \t\t\t\t\"WHERE {\" +\n \t\t\t\t\"  ?s a ivoc:Instance;\" +\n \t\t\t\t\"     ?p ?o ;\" +\n@@ -119,6 +121,10 @@ private ResultSet getResultFromQuery(String queryString) {\n \t\t\t\t\"    ?targetType rdfs:label ?transformationTargetType .\" +\n \t\t\t\t\"    ?transformationType rdfs:label ?transformationLabel\" +\n \t\t\t\t\"  }\" +\n+\t\t\t\t\"  OPTIONAL {\" +\n+\t\t\t\t\"    ?IParam ivoop:isDependentOn ?dependentParam .\" +\n+\t\t\t\t\"    ?dependentParam rdfs:label ?dependentCol\" +\n+\t\t\t\t\"  }\" +\n \t\t\t\t\"} ORDER BY ASC(?priority)\";\n \t\tResultSet instancesResultSet = getResultFromQuery(queryString);\n \t\tif (instancesResultSet == null) {\n@@ -129,15 +135,22 @@ private ResultSet getResultFromQuery(String queryString) {\n \t\t\tinstanceParam = new TreeMap<>();\n \t\t\tinstanceLabel = resource.get(\"label\").asLiteral().getString();\n \t\t\tparamType = resource.get(\"paramType\").asLiteral().getString();\n+\t\t\tdependentParam = resource.contains(\"dependentCol\") ? resource.get(\"dependentCol\").asLiteral().getString() : \"\";\n \t\t\tif (IDAConst.TRANSFORMATION_LABEL.equals(paramType)) {\n \t\t\t\tinstanceParam.put(IDAConst.INSTANCE_PARAM_TYPE_KEY, resource.get(\"transformationTargetType\").asLiteral().getString());\n \t\t\t\tinstanceParam.put(IDAConst.INSTANCE_PARAM_TRANS_TYPE_KEY, resource.get(\"transformationLabel\").asLiteral().getString());\n \t\t\t} else {\n \t\t\t\tinstanceParam.put(IDAConst.INSTANCE_PARAM_TYPE_KEY, paramType);\n \t\t\t\tinstanceParam.put(IDAConst.INSTANCE_PARAM_TRANS_TYPE_KEY, paramType);\n \t\t\t}\n+\t\t\tinstanceParam.put(IDAConst.INSTANCE_PARAM_DEPENDENT_KEY, dependentParam);\n \t\t\tinstance = instanceMap.getOrDefault(instanceLabel, new TreeMap<>());\n-\t\t\tinstance.put(resource.get(\"paramLabel\").asLiteral().getString(), instanceParam);\n+\t\t\tparamLabel = resource.get(\"paramLabel\").asLiteral().getString();\n+\t\t\tif(instance.containsKey(paramLabel)){\n+\t\t\t\tinstance.get(paramLabel).put(IDAConst.INSTANCE_PARAM_DEPENDENT_KEY, instance.get(paramLabel).get(IDAConst.INSTANCE_PARAM_DEPENDENT_KEY) + \",\" + dependentParam);\n+\t\t\t}else{\n+\t\t\t\tinstance.put(resource.get(\"paramLabel\").asLiteral().getString(), instanceParam);\n+\t\t\t}\n \t\t\tinstanceMap.put(instanceLabel, instance);\n \t\t}\n \t\tif (conn != null) {"
  },
  {
    "sha": "511c68dee475bcb7c0d6c2625d27aef70a0d7318",
    "filename": "backend-server/src/main/resources/visualization_model/ida_viz_model.ttl",
    "status": "modified",
    "additions": 189,
    "deletions": 2,
    "changes": 191,
    "blob_url": "https://github.com/dice-group/IDA/blob/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/resources/visualization_model/ida_viz_model.ttl",
    "raw_url": "https://github.com/dice-group/IDA/raw/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/main/resources/visualization_model/ida_viz_model.ttl",
    "contents_url": "https://api.github.com/repos/dice-group/IDA/contents/backend-server/src/main/resources/visualization_model/ida_viz_model.ttl?ref=612381c42273f9e9ec948c8081360faa9b730148",
    "patch": "@@ -155,6 +155,14 @@ ivoop:hasTransformationType rdf:type owl:ObjectProperty ;\n                             rdfs:label \"hasTransformationType\"@en .\n \n \n+###  https://www.upb.de/ida/viz/ontology/object-property/isDependentOn\n+ivoop:isDependentOn rdf:type owl:ObjectProperty ;\n+                    rdfs:subPropertyOf owl:topObjectProperty ;\n+                    rdfs:domain ivoc:InstanceParam ;\n+                    rdfs:range ivoc:Parameter ;\n+                    rdfs:label \"isDependentOn\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/ontology/object-property/representedParam\n ivoop:representedParam rdf:type owl:ObjectProperty ;\n                        rdfs:subPropertyOf owl:topObjectProperty ;\n@@ -269,6 +277,14 @@ information:BubbleChart rdf:type owl:NamedIndividual ,\n                         rdfs:label \"Bubble Chart Information\"@en .\n \n \n+###  https://www.upb.de/ida/viz/data/information/LineChart\n+information:LineChart rdf:type owl:NamedIndividual ,\n+                               ivoc:Information ;\n+                      ivoop:hasReference reference:LineChart ;\n+                      dc:description \"Line Charts are a typical pictorial representation that depicts trends and behaviors over time. It is represented by a series of data points connected with a line.\"@en ;\n+                      rdfs:label \"Line Chart Information\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/data/information/ScatterPlot\n information:ScatterPlot rdf:type owl:NamedIndividual ,\n                                  ivoc:Information ;\n@@ -397,6 +413,42 @@ instance:bubble_chart_7 rdf:type owl:NamedIndividual ,\n                         rdfs:label \"Bubble Chart Instance 7\"@en .\n \n \n+###  https://www.upb.de/ida/viz/data/instance/line_chart_1\n+instance:line_chart_1 rdf:type owl:NamedIndividual ,\n+                               ivoc:Instance ;\n+                      ivoop:hasInstanceParam instance_param:line_chart_temporal ,\n+                                             instance_param:line_label_non_unique ,\n+                                             instance_param:line_values_countof ;\n+                      rdfs:label \"Line Chart Instance 1\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance/line_chart_2\n+instance:line_chart_2 rdf:type owl:NamedIndividual ,\n+                               ivoc:Instance ;\n+                      ivoop:hasInstanceParam instance_param:line_chart_temporal ,\n+                                             instance_param:line_label_non_unique ,\n+                                             instance_param:line_values_sumof ;\n+                      rdfs:label \"Line Chart Instance 2\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance/line_chart_3\n+instance:line_chart_3 rdf:type owl:NamedIndividual ,\n+                               ivoc:Instance ;\n+                      ivoop:hasInstanceParam instance_param:line_chart_temporal ,\n+                                             instance_param:line_label_non_unique ,\n+                                             instance_param:line_values_averageof ;\n+                      rdfs:label \"Line Chart Instance 3\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance/line_chart_4\n+instance:line_chart_4 rdf:type owl:NamedIndividual ,\n+                               ivoc:Instance ;\n+                      ivoop:hasInstanceParam instance_param:line_chart_temporal ,\n+                                             instance_param:line_label_unique ,\n+                                             instance_param:line_values_numeric ;\n+                      rdfs:label \"Line Chart Instance 4\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/data/instance/scatter_plot_1\n instance:scatter_plot_1 rdf:type owl:NamedIndividual ,\n                                  ivoc:Instance ;\n@@ -529,6 +581,67 @@ instance_param:column_list rdf:type owl:NamedIndividual ,\n                            rdfs:label \"Scatter plot matrix colums\"@en .\n \n \n+###  https://www.upb.de/ida/viz/data/instance_param/line_chart_temporal\n+instance_param:line_chart_temporal rdf:type owl:NamedIndividual ,\n+                                            ivoc:InstanceParam ;\n+                                   ivoop:hasRepType representational_type:Date ;\n+                                   ivoop:representedParam parameter:temporal_column ;\n+                                   rdfs:label \"Line Chart Temporal Column\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance_param/line_label_non_unique\n+instance_param:line_label_non_unique rdf:type owl:NamedIndividual ,\n+                                              ivoc:InstanceParam ;\n+                                     ivoop:hasRepType representational_type:NonUnique ;\n+                                     ivoop:isDependentOn parameter:temporal_column ;\n+                                     ivoop:representedParam parameter:line_label ;\n+                                     rdfs:label \"Line Chart Labels Non Unique\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance_param/line_label_unique\n+instance_param:line_label_unique rdf:type owl:NamedIndividual ,\n+                                          ivoc:InstanceParam ;\n+                                 ivoop:hasRepType representational_type:Unique ;\n+                                 ivoop:isDependentOn parameter:temporal_column ;\n+                                 ivoop:representedParam parameter:line_label ;\n+                                 rdfs:label \"Line Chart Labels Unique\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance_param/line_values_averageof\n+instance_param:line_values_averageof rdf:type owl:NamedIndividual ,\n+                                              ivoc:InstanceParam ;\n+                                     ivoop:hasRepType representational_type:Transformation ;\n+                                     ivoop:hasTransformation transformation:linechart_averageof ;\n+                                     ivoop:representedParam parameter:line_value ;\n+                                     rdfs:label \"Line Values Averageof\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance_param/line_values_countof\n+instance_param:line_values_countof rdf:type owl:NamedIndividual ,\n+                                            ivoc:InstanceParam ;\n+                                   ivoop:hasRepType representational_type:Transformation ;\n+                                   ivoop:hasTransformation transformation:linechart_countof ;\n+                                   ivoop:representedParam parameter:line_value ;\n+                                   rdfs:label \"Line Values Countof\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance_param/line_values_numeric\n+instance_param:line_values_numeric rdf:type owl:NamedIndividual ,\n+                                            ivoc:InstanceParam ;\n+                                   ivoop:hasRepType representational_type:Numeric ;\n+                                   ivoop:representedParam parameter:line_value ;\n+                                   rdfs:label \"Line Values Numeric\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/instance_param/line_values_sumof\n+instance_param:line_values_sumof rdf:type owl:NamedIndividual ,\n+                                          ivoc:InstanceParam ;\n+                                 ivoop:hasRepType representational_type:Transformation ;\n+                                 ivoop:hasTransformation transformation:linechart_sumof ;\n+                                 ivoop:representedParam parameter:line_value ;\n+                                 rdfs:label \"Line Values Sumof\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/data/instance_param/reference_column\n instance_param:reference_column rdf:type owl:NamedIndividual ,\n                                          ivoc:InstanceParam ;\n@@ -629,6 +742,22 @@ parameter:column_list rdf:type owl:NamedIndividual ,\n                       rdfs:label \"Column_List\"@en .\n \n \n+###  https://www.upb.de/ida/viz/data/parameter/line_label\n+parameter:line_label rdf:type owl:NamedIndividual ,\n+                              ivoc:Parameter ;\n+                     ivoop:hasRepType representational_type:Nominal ;\n+                     ivodp:hasPriority 2 ;\n+                     rdfs:label \"Line_Label\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/parameter/line_value\n+parameter:line_value rdf:type owl:NamedIndividual ,\n+                              ivoc:Parameter ;\n+                     ivoop:hasRepType representational_type:Numeric ;\n+                     ivodp:hasPriority 3 ;\n+                     rdfs:label \"Line_Value\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/data/parameter/reference_column\n parameter:reference_column rdf:type owl:NamedIndividual ,\n                                     ivoc:Parameter ;\n@@ -637,6 +766,14 @@ parameter:reference_column rdf:type owl:NamedIndividual ,\n                            rdfs:label \"Reference_Column\"@en .\n \n \n+###  https://www.upb.de/ida/viz/data/parameter/temporal_column\n+parameter:temporal_column rdf:type owl:NamedIndividual ,\n+                                   ivoc:Parameter ;\n+                          ivoop:hasRepType representational_type:Date ;\n+                          ivodp:hasPriority 1 ;\n+                          rdfs:label \"Temporal_Column\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/data/parameter/x_axis\n parameter:x_axis rdf:type owl:NamedIndividual ,\n                           ivoc:Parameter ;\n@@ -668,6 +805,13 @@ reference:BubbleChart rdf:type owl:NamedIndividual ,\n                       rdfs:label \"Bubble Chart (Wikipedia)\"@en .\n \n \n+###  https://www.upb.de/ida/viz/data/reference/LineChart\n+reference:LineChart rdf:type owl:NamedIndividual ,\n+                             ivoc:Reference ;\n+                    ivodp:link \"https://apexcharts.com/docs/chart-types/line-chart/\" ;\n+                    rdfs:label \"Line Chart\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/data/reference/ScatterPlot\n reference:ScatterPlot rdf:type owl:NamedIndividual ,\n                                ivoc:Reference ;\n@@ -768,6 +912,8 @@ representational_type:Date rdf:type owl:NamedIndividual ,\n ###  https://www.upb.de/ida/viz/data/representational_type/Nominal\n representational_type:Nominal rdf:type owl:NamedIndividual ,\n                                        ivoc:RepresentationalType ;\n+                              ivoop:hasRepType representational_type:Numeric ;\n+                              ivodp:hasPriority 3 ;\n                               rdfs:label \"Nominal\"@en .\n \n \n@@ -855,6 +1001,33 @@ transformation:bubblechart_sumof rdf:type owl:NamedIndividual ,\n                                  rdfs:label \"Sum of a column on bubble chart\"@en .\n \n \n+###  https://www.upb.de/ida/viz/data/transformation/linechart_averageof\n+transformation:linechart_averageof rdf:type owl:NamedIndividual ,\n+                                            ivoc:Transformation ;\n+                                   ivoop:hasTargetRepType representational_type:Numeric ;\n+                                   ivoop:hasTransformationTarget parameter:line_label ;\n+                                   ivoop:hasTransformationType transformation_type:average ;\n+                                   rdfs:label \"Average of a column on line chart\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/transformation/linechart_countof\n+transformation:linechart_countof rdf:type owl:NamedIndividual ,\n+                                          ivoc:Transformation ;\n+                                 ivoop:hasTargetRepType representational_type:NotRequired ;\n+                                 ivoop:hasTransformationTarget parameter:line_label ;\n+                                 ivoop:hasTransformationType transformation_type:countof ;\n+                                 rdfs:label \"Count of labels on line chart\"@en .\n+\n+\n+###  https://www.upb.de/ida/viz/data/transformation/linechart_sumof\n+transformation:linechart_sumof rdf:type owl:NamedIndividual ,\n+                                        ivoc:Transformation ;\n+                               ivoop:hasTargetRepType representational_type:Numeric ;\n+                               ivoop:hasTransformationTarget parameter:line_label ;\n+                               ivoop:hasTransformationType transformation_type:sumof ;\n+                               rdfs:label \"Sum of a column on line chart\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/data/transformation_type/average\n transformation_type:average rdf:type owl:NamedIndividual ,\n                                      ivoc:TransformationType ;\n@@ -905,6 +1078,20 @@ visualization:bubble_chart rdf:type owl:NamedIndividual ,\n                            rdfs:label \"Bubble Chart\"@en .\n \n \n+###  https://www.upb.de/ida/viz/data/visualization/line_chart\n+visualization:line_chart rdf:type owl:NamedIndividual ,\n+                                  ivoc:Visualization ;\n+                         ivoop:hasInformation information:LineChart ;\n+                         ivoop:hasInstance instance:line_chart_1 ,\n+                                           instance:line_chart_2 ,\n+                                           instance:line_chart_3 ,\n+                                           instance:line_chart_4 ;\n+                         ivoop:hasParam parameter:line_label ,\n+                                        parameter:line_value ,\n+                                        parameter:temporal_column ;\n+                         rdfs:label \"Line Chart\"@en .\n+\n+\n ###  https://www.upb.de/ida/viz/data/visualization/scatter_plot\n visualization:scatter_plot rdf:type owl:NamedIndividual ,\n                                     ivoc:Visualization ;\n@@ -951,8 +1138,8 @@ visualization:scatter_plot_matrix rdf:type owl:NamedIndividual ,\n #    Annotations\n #################################################################\n \n-<https://www.upb.de/ida/ontology/DataType> rdfs:comment \"Data type of the values required for a visualization parameter\"^^xsd:string ;\n-                                           rdfs:label \"data type\"^^xsd:string .\n+<https://www.upb.de/ida/ontology/DataType> rdfs:label \"data type\"^^xsd:string ;\n+                                           rdfs:comment \"Data type of the values required for a visualization parameter\"^^xsd:string .\n \n \n ###  Generated by the OWL API (version 4.5.9.2019-02-01T07:24:44Z) https://github.com/owlcs/owlapi"
  },
  {
    "sha": "51c5f79ed70740d24118019e8abc456bf0d56422",
    "filename": "backend-server/src/test/java/org/dice/ida/action/LineChartActionTest.java",
    "status": "modified",
    "additions": 87,
    "deletions": 6,
    "changes": 93,
    "blob_url": "https://github.com/dice-group/IDA/blob/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/test/java/org/dice/ida/action/LineChartActionTest.java",
    "raw_url": "https://github.com/dice-group/IDA/raw/612381c42273f9e9ec948c8081360faa9b730148/backend-server/src/test/java/org/dice/ida/action/LineChartActionTest.java",
    "contents_url": "https://api.github.com/repos/dice-group/IDA/contents/backend-server/src/test/java/org/dice/ida/action/LineChartActionTest.java?ref=612381c42273f9e9ec948c8081360faa9b730148",
    "patch": "@@ -28,7 +28,7 @@\n \t@Test\n \tvoid testLineChartFlow() throws Exception {\n \t\tchatUserMessage = new ChatUserMessage();\n-\t\tchatUserMessage.setMessage(\"draw line chart\");\n+\t\tchatUserMessage.setMessage(\"can you draw a line chart?\");\n \t\tchatUserMessage.setActiveDS(\"covid19\");\n \t\tchatUserMessage.setActiveTable(\"Patient_Data_Before_20-04-2020.csv\");\n \t\tmessageController.handleMessage(chatUserMessage).call();\n@@ -55,7 +55,7 @@ void testLineChartFlow() throws Exception {\n \t@Test\n \tvoid testLineChartWrongFilterString() throws Exception {\n \t\tchatUserMessage = new ChatUserMessage();\n-\t\tchatUserMessage.setMessage(\"Draw line chart\");\n+\t\tchatUserMessage.setMessage(\"can you draw a line chart?\");\n \t\tchatUserMessage.setActiveDS(\"covid19\");\n \t\tchatUserMessage.setActiveTable(\"Patient_Data_Before_20-04-2020.csv\");\n \t\tchatMessageResponse = messageController.handleMessage(chatUserMessage).call();\n@@ -68,19 +68,100 @@ void testLineChartWrongFilterString() throws Exception {\n \t@Test\n \tvoid testLineChartWrongColumnName() throws Exception {\n \t\tchatUserMessage = new ChatUserMessage();\n-\t\tchatUserMessage.setMessage(\"draw line chart\");\n+\t\tchatUserMessage.setMessage(\"can you draw a line chart?\");\n \t\tchatUserMessage.setActiveDS(\"covid19\");\n \t\tchatUserMessage.setActiveTable(\"Patient_Data_Before_20-04-2020.csv\");\n \t\tmessageController.handleMessage(chatUserMessage).call();\n \t\tchatUserMessage.setMessage(\"all\");\n \t\tmessageController.handleMessage(chatUserMessage).call();\n \t\tchatUserMessage.setMessage(\"Tested as of\");\n+\t\tchatMessageResponse = messageController.handleMessage(chatUserMessage).call();\n+\t\tassertEquals(\"Tested As Of: \" + IDAConst.BC_INVALID_COL, chatMessageResponse.getMessage());\n+\t\tsessionUtil.resetSessionId();\n+\t}\n+\n+\t@Test\n+\tvoid testLineChartFlowUniqueLabels() throws Exception {\n+\t\tchatUserMessage = new ChatUserMessage();\n+\t\tchatUserMessage.setMessage(\"can you draw a line chart?\");\n+\t\tchatUserMessage.setActiveDS(\"covid19\");\n+\t\tchatUserMessage.setActiveTable(\"Patient_Data_Before_20-04-2020.csv\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"first 7\");\n \t\tmessageController.handleMessage(chatUserMessage).call();\n-\t\tchatUserMessage.setMessage(\"detected state\");\n+\t\tchatUserMessage.setMessage(\"Date announced\");\n \t\tmessageController.handleMessage(chatUserMessage).call();\n-\t\tchatUserMessage.setMessage(\"detected state\");\n+\t\tchatUserMessage.setMessage(\"Detected State\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"Age\");\n \t\tchatMessageResponse = messageController.handleMessage(chatUserMessage).call();\n-\t\tassertEquals(\"Tested As Of: \" + IDAConst.BC_INVALID_COL, chatMessageResponse.getMessage());\n+\t\tLineChartData lineChartData = (LineChartData) chatMessageResponse.getPayload().get(\"lineChartData\");\n+\t\tList<LineChartItem> lineChartItemList = new ArrayList<>();\n+\t\tlineChartItemList.add(new LineChartItem(\"Delhi\", Arrays.asList(0.0, 0.0, 0.0, 45.0, 0.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Haryana\", Arrays.asList(0.0, 0.0, 0.0, 0.0, 0.0, 55.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Telangana\", Arrays.asList(0.0, 0.0, 0.0, 24.0, 0.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Rajasthan\", Arrays.asList(0.0, 0.0, 0.0, 0.0, 69.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Kerala\", Arrays.asList(20.0, 0.0, 0.0, 0.0, 0.0, 0.0)));\n+\t\tassertNotNull(lineChartItemList);\n+\t\tassertEquals(lineChartItemList, lineChartData.getLines());\n+\t\tsessionUtil.resetSessionId();\n+\t}\n+\n+\t@Test\n+\tvoid testLineChartFlowAverageValues() throws Exception {\n+\t\tchatUserMessage = new ChatUserMessage();\n+\t\tchatUserMessage.setMessage(\"can you draw a line chart?\");\n+\t\tchatUserMessage.setActiveDS(\"covid19\");\n+\t\tchatUserMessage.setActiveTable(\"Patient_Data_Before_20-04-2020.csv\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"first 10\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"Date announced\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"Detected State\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"Age\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"Average\");\n+\t\tchatMessageResponse = messageController.handleMessage(chatUserMessage).call();\n+\t\tLineChartData lineChartData = (LineChartData) chatMessageResponse.getPayload().get(\"lineChartData\");\n+\t\tList<LineChartItem> lineChartItemList = new ArrayList<>();\n+\t\tlineChartItemList.add(new LineChartItem(\"Delhi\", Arrays.asList(0.0, 0.0, 0.0, 45.0, 0.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Haryana\", Arrays.asList(0.0, 0.0, 0.0, 0.0, 0.0, 55.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Telangana\", Arrays.asList(0.0, 0.0, 0.0, 24.0, 0.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Rajasthan\", Arrays.asList(0.0, 0.0, 0.0, 0.0, 69.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Kerala\", Arrays.asList(20.0, 0.0, 0.0, 0.0, 0.0, 0.0)));\n+\t\tassertNotNull(lineChartItemList);\n+\t\tassertEquals(lineChartItemList, lineChartData.getLines());\n+\t\tsessionUtil.resetSessionId();\n+\t}\n+\n+\t@Test\n+\tvoid testLineChartFlowSumOfValues() throws Exception {\n+\t\tchatUserMessage = new ChatUserMessage();\n+\t\tchatUserMessage.setMessage(\"can you draw a line chart?\");\n+\t\tchatUserMessage.setActiveDS(\"covid19\");\n+\t\tchatUserMessage.setActiveTable(\"Patient_Data_Before_20-04-2020.csv\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"first 10\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"Date announced\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"Detected State\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"Age\");\n+\t\tmessageController.handleMessage(chatUserMessage).call();\n+\t\tchatUserMessage.setMessage(\"sum of\");\n+\t\tchatMessageResponse = messageController.handleMessage(chatUserMessage).call();\n+\t\tLineChartData lineChartData = (LineChartData) chatMessageResponse.getPayload().get(\"lineChartData\");\n+\t\tList<LineChartItem> lineChartItemList = new ArrayList<>();\n+\t\tlineChartItemList.add(new LineChartItem(\"Delhi\", Arrays.asList(0.0, 0.0, 0.0, 45.0, 0.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Haryana\", Arrays.asList(0.0, 0.0, 0.0, 0.0, 0.0, 220.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Telangana\", Arrays.asList(0.0, 0.0, 0.0, 24.0, 0.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Rajasthan\", Arrays.asList(0.0, 0.0, 0.0, 0.0, 69.0, 0.0)));\n+\t\tlineChartItemList.add(new LineChartItem(\"Kerala\", Arrays.asList(20.0, 0.0, 0.0, 0.0, 0.0, 0.0)));\n+\t\tassertNotNull(lineChartItemList);\n+\t\tassertEquals(lineChartItemList, lineChartData.getLines());\n \t\tsessionUtil.resetSessionId();\n \t}\n }"
  }
]
