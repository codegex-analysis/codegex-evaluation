[
  {
    "sha": "76a369a54efcfa26d76ba45833c7a41b79dceb96",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/pom.xml",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/pom.xml",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/pom.xml?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -3,7 +3,7 @@\n <modelVersion>4.0.0</modelVersion>\n <groupId>org.openhim</groupId>\n <artifactId>mediator-xds</artifactId>\n-<version>1.0.3</version>\n+<version>1.0.4-SNAPSHOT</version>\n <properties>\n   <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n </properties>\n@@ -80,6 +80,16 @@\n       </executions>\n     </plugin>\n   </plugins>\n+  <resources>\n+    <resource>\n+      <directory>src/main/resources-filtered</directory>\n+      <filtering>true</filtering>\n+    </resource>\n+    <resource>\n+      <directory>src/main/resources</directory>\n+      <filtering>false</filtering>\n+    </resource>\n+  </resources>\n </build>\n <dependencies>\n   <dependency>\n@@ -136,5 +146,11 @@\n     <version>1.52</version>\n     <scope>test</scope>\n   </dependency>\n+\n+  <dependency>\n+    <groupId>javax.xml.bind</groupId>\n+    <artifactId>jaxb-api</artifactId>\n+    <version>1.0.6</version>\n+  </dependency>\n </dependencies>\n </project>"
  },
  {
    "sha": "08302ed1693e2e355e4548c6e9dc26f1f4881e11",
    "filename": "src/main/java/org/openhim/mediator/dsub/DsubActor.java",
    "status": "modified",
    "additions": 220,
    "deletions": 144,
    "changes": 364,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/DsubActor.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/DsubActor.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/dsub/DsubActor.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -1,24 +1,38 @@\n package org.openhim.mediator.dsub;\n \n-import akka.actor.ActorRef;\n-import akka.actor.UntypedActor;\n-import akka.event.Logging;\n-import akka.event.LoggingAdapter;\n-import com.mongodb.MongoClient;\n-import com.mongodb.client.MongoDatabase;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.net.URL;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.JAXBElement;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.ws.wsaddressing.W3CEndpointReference;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.reflect.FieldUtils;\n import org.apache.http.HttpStatus;\n import org.oasis_open.docs.wsn.b_2.CreatePullPoint;\n import org.oasis_open.docs.wsn.b_2.DestroyPullPoint;\n import org.oasis_open.docs.wsn.b_2.GetCurrentMessage;\n import org.oasis_open.docs.wsn.b_2.GetMessages;\n+import org.oasis_open.docs.wsn.b_2.GetMessagesResponse;\n+import org.oasis_open.docs.wsn.b_2.NotificationMessageHolderType;\n import org.oasis_open.docs.wsn.b_2.Notify;\n import org.oasis_open.docs.wsn.b_2.PauseSubscription;\n import org.oasis_open.docs.wsn.b_2.Renew;\n import org.oasis_open.docs.wsn.b_2.ResumeSubscription;\n import org.oasis_open.docs.wsn.b_2.Subscribe;\n import org.oasis_open.docs.wsn.b_2.Unsubscribe;\n+import org.openhim.mediator.Util;\n import org.openhim.mediator.dsub.pull.PullPointFactory;\n import org.openhim.mediator.dsub.service.DsubService;\n import org.openhim.mediator.dsub.service.DsubServiceImpl;\n@@ -32,144 +46,206 @@\n import org.openhim.mediator.messages.NotifyNewDocument;\n import org.xml.sax.SAXException;\n \n-import javax.xml.bind.JAXBElement;\n-import javax.xml.bind.JAXBException;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.ws.wsaddressing.W3CEndpointReference;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-\n-public class DsubActor extends UntypedActor {\n-\n-    private final MediatorConfig config;\n-    private final LoggingAdapter log = Logging.getLogger(getContext().system(), this);\n-    private final MongoDatabase mongoDb;\n-\n-    private DsubService dsubService;\n-    private ActorRef requestHandler;\n-\n-    public DsubActor(MediatorConfig config) {\n-        this.config = config;\n-        String host = config.getProperty(\"mediator.mongo.host\");\n-        if (host == null) {\n-            throw new RuntimeException(\"The property mediator.mongo.host is not set!\");\n-        }\n-        Integer port = Integer.parseInt(config.getProperty\n-                (\"mediator.mongo.port\"));\n-        MongoClient mongoClient = new MongoClient(host, port);\n-        mongoDb = mongoClient.getDatabase(\"dsub\");\n-\n-        PullPointFactory pullPointFactory = new PullPointFactory(mongoDb);\n-        SubscriptionRepository subRepo = new MongoSubscriptionRepository(mongoDb, log);\n-        SubscriptionNotifier subNotifier = new SoapSubscriptionNotifier(config);\n-\n-        dsubService = new DsubServiceImpl(pullPointFactory, subRepo,\n-                subNotifier, log);\n-    }\n-\n-    @Override\n-    public void onReceive(Object msg) {\n-        if (msg instanceof MediatorHTTPRequest) {\n-            handleMessage((MediatorHTTPRequest) msg);\n-        } else if (msg instanceof NotifyNewDocument) {\n-            NotifyNewDocument notifyNewDocument = (NotifyNewDocument) msg;\n-            dsubService.notifyNewDocument(notifyNewDocument.getLabOrderDocumentId(), null);\n-        }\n-    }\n-\n-    private void handleMessage(MediatorHTTPRequest request) {\n-        requestHandler = request.getRequestHandler();\n-\n-        Object result = parseMessage(request);\n-\n-        if (result instanceof Subscribe) {\n-            Subscribe subscribeRequest = (Subscribe) result;\n-            handleSubscriptionMessage(subscribeRequest);\n-            MediatorHTTPResponse creationSuccess = new MediatorHTTPResponse(request,\n-                    \"Subscription created with success\",\n-                    HttpStatus.SC_CREATED,\n-                    null);\n-            requestHandler.tell(creationSuccess.toFinishRequest(), getSelf());\n-        } else if (result instanceof Unsubscribe) {\n-            Unsubscribe unsubscribeRequest = (Unsubscribe) result;\n-            //unsubscribe request handling\n-        } else if (result instanceof GetCurrentMessage) {\n-            GetCurrentMessage getCurrentMessageRequest = (GetCurrentMessage) result;\n-            //get current message request handling\n-        } else if (result instanceof GetMessages) {\n-            GetMessages getMessagesRequest = (GetMessages) result;\n-            //get messages request handling\n-        } else if (result instanceof DestroyPullPoint) {\n-            DestroyPullPoint destroyPullPointRequest = (DestroyPullPoint) result;\n-            //destroy pull point request handling\n-        } else if (result instanceof CreatePullPoint) {\n-            CreatePullPoint createPullPointRequest = (CreatePullPoint) result;\n-            //create pull point request handling\n-        } else if (result instanceof Renew) {\n-            Renew renew = (Renew) result;\n-            //renew request handling\n-        } else if (result instanceof PauseSubscription) {\n-            PauseSubscription pauseSubscriptionRequest = (PauseSubscription) result;\n-            //pause subscription request handling\n-        } else if (result instanceof ResumeSubscription) {\n-            ResumeSubscription resumeSubscriptionRequest = (ResumeSubscription) result;\n-            //resume subscription request handling\n-        } else if (result instanceof Notify) {\n-            Notify notifyRequest = (Notify) result;\n-            //notify request handling\n-        } else {\n-            //unknown message type handling\n-            MediatorHTTPResponse unknownMessageError = new MediatorHTTPResponse(request,\n-                    \"Unknown message type error\",\n-                    HttpStatus.SC_BAD_REQUEST,\n-                    null);\n-            requestHandler.tell(unknownMessageError.toFinishRequest(), getSelf());\n-        }\n-    }\n-\n-    private void handleSubscriptionMessage(Subscribe subscribeRequest) {\n-        W3CEndpointReference consumerRef = subscribeRequest.getConsumerReference();\n-        Object address = getProperty(consumerRef, \"address\");\n-\n-        String uri = getProperty(address, \"uri\");\n-        JAXBElement<String> termination = subscribeRequest.getInitialTerminationTime();\n-\n-        Date terminationDate = null;\n-        if (termination != null && !termination.isNil()) {\n-            String val = termination.getValue();\n-            if (StringUtils.isNotBlank(val)) {\n-                try {\n-                    terminationDate = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSSSXXX\").parse(val);\n-                } catch (ParseException e) {\n-                    throw new RuntimeException(\"Unable to parse the date\", e);\n-                }\n-            }\n-        }\n-        dsubService.createSubscription(uri, null, terminationDate);\n-    }\n+import com.mongodb.MongoClient;\n+import com.mongodb.client.MongoDatabase;\n \n-    private Object parseMessage(MediatorHTTPRequest request) {\n-        Object result;\n-        try {\n-            String parsedRequest = DsubUtil.parseRequest(request);\n-            result = DsubUtil.extractRequestMessage(parsedRequest);\n-        } catch (ParserConfigurationException | SAXException | IOException | JAXBException | TransformerException e) {\n-            log.error(e, \"Parsing Dsub request failure\");\n-            result = null;\n-        }\n-        return result;\n-    }\n+import akka.actor.ActorRef;\n+import akka.actor.UntypedActor;\n+import akka.event.Logging;\n+import akka.event.LoggingAdapter;\n \n-    private <T> T getProperty(Object object, String name) {\n-        try {\n-            Field field = FieldUtils.getField(object.getClass(), name, true);\n-            return (T) field.get(object);\n-        } catch (IllegalAccessException e) {\n-            throw new RuntimeException(\"Unable to read field: \" + name, e);\n-        }\n-    }\n+public class DsubActor extends UntypedActor {\n+\t\n+\tprivate final MediatorConfig config;\n+\t\n+\tprivate final LoggingAdapter log = Logging.getLogger(getContext().system(), this);\n+\t\n+\tprivate final MongoDatabase mongoDb;\n+\t\n+\tprivate DsubService dsubService;\n+\t\n+\tprivate ActorRef requestHandler;\n+\t\n+\tpublic DsubActor(MediatorConfig config) {\n+\t\tthis.config = config;\n+\t\tString host = config.getProperty(\"mediator.mongo.host\");\n+\t\tif (host == null) {\n+\t\t\tthrow new RuntimeException(\"The property mediator.mongo.host is not set!\");\n+\t\t}\n+\t\tInteger port = Integer.parseInt(config.getProperty(\"mediator.mongo.port\"));\n+\t\tMongoClient mongoClient = new MongoClient(host, port);\n+\t\tmongoDb = mongoClient.getDatabase(\"dsub\");\n+\t\t\n+\t\tPullPointFactory pullPointFactory = new PullPointFactory(mongoDb);\n+\t\tSubscriptionRepository subRepo = new MongoSubscriptionRepository(mongoDb, log);\n+\t\tSubscriptionNotifier subNotifier = new SoapSubscriptionNotifier(config, log);\n+\t\t\n+\t\tdsubService = new DsubServiceImpl(pullPointFactory, subRepo, subNotifier, log);\n+\t}\n+\t\n+\t@Override\n+\tpublic void onReceive(Object msg) throws JAXBException {\n+\t\tif (msg instanceof MediatorHTTPRequest) {\n+\t\t\thandleMessage((MediatorHTTPRequest) msg);\n+\t\t} else if (msg instanceof NotifyNewDocument) {\n+\t\t\tNotifyNewDocument notifyNewDocument = (NotifyNewDocument) msg;\n+\t\t\tlog.debug(\"Notifying new document\");\n+\t\t\tdsubService.notifyNewDocument(notifyNewDocument.getLabOrderDocumentId(), null);\n+\t\t} else if (msg instanceof CreatePullPoint) {\n+\t\t\tCreatePullPoint createPullPointRequest = (CreatePullPoint) msg;\n+\t\t\t//create pull point request handling\n+\t\t\thandleCreatePullPointRequest(createPullPointRequest);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleMessage(MediatorHTTPRequest request) throws JAXBException {\n+\t\trequestHandler = request.getRequestHandler();\n+\t\t\n+\t\tObject result = parseMessage(request);\n+\t\t\n+\t\tif (result instanceof Subscribe) {\n+\t\t\tSubscribe subscribeRequest = (Subscribe) result;\n+\t\t\thandleSubscriptionMessage(subscribeRequest);\n+\t\t\tMediatorHTTPResponse creationSuccess = new MediatorHTTPResponse(request, \"Subscription created with success\",\n+\t\t\t        HttpStatus.SC_CREATED, null);\n+\t\t\trequestHandler.tell(creationSuccess.toFinishRequest(), getSelf());\n+\t\t} else if (result instanceof Unsubscribe) {} else if (result instanceof GetCurrentMessage) {} else if (result instanceof GetMessages) {\n+\t\t\tGetMessages getMessagesRequest = (GetMessages) result;\n+\t\t\t//get messages request handling\n+\t\t\tString messages = handleGetMessages(getMessagesRequest);\n+\t\t\tMediatorHTTPResponse getMessagesSuccess = new MediatorHTTPResponse(request, messages, HttpStatus.SC_ACCEPTED,\n+\t\t\t        null);\n+\t\t\trequestHandler.tell(getMessagesSuccess.toFinishRequest(), getSelf());\n+\t\t\t\n+\t\t} else if (result instanceof CreatePullPoint) {} else if (result instanceof CreatePullPoint) {\n+\t\t\tCreatePullPoint createPullPointRequest = (CreatePullPoint) result;\n+\t\t\t//create pull point request handling\n+\t\t\tlog.debug(\"CreatePullPoint request handling\");\n+\t\t\thandleCreatePullPointRequest(createPullPointRequest);\n+\t\t\tMediatorHTTPResponse creationSuccess = new MediatorHTTPResponse(request, \"Pull point created with success\",\n+\t\t\t        HttpStatus.SC_CREATED, null);\n+\t\t\trequestHandler.tell(creationSuccess.toFinishRequest(), getSelf());\n+\t\t\t\n+\t\t} else if (result instanceof Renew) {} else if (result instanceof PauseSubscription) {} else if (result instanceof ResumeSubscription) {} else if (result instanceof Notify) {} else {\n+\t\t\t//unknown message type handling\n+\t\t\tMediatorHTTPResponse unknownMessageError = new MediatorHTTPResponse(request, \"Unknown message type error\",\n+\t\t\t        HttpStatus.SC_BAD_REQUEST, null);\n+\t\t\trequestHandler.tell(unknownMessageError.toFinishRequest(), getSelf());\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleCreatePullPointRequest(CreatePullPoint createPullPointRequest) {\n+\t\tString docId = createPullPointRequest.getAny().get(0).toString();\n+\t\tString hl7ORU_01 = createPullPointRequest.getOtherAttributes().get(new QName(\"hl7ORU_01\"));\n+\t\tString facilityId = createPullPointRequest.getOtherAttributes().get(new QName(\"facility\"));\n+\t\tlog.info(\"Handling Create PullPoint for Doc {}\", docId);\n+\t\tlog.debug(\"HL7 ORU_01 Message {}\", hl7ORU_01);\n+\t\tlog.debug(\"Facility Id Message {}\", facilityId);\n+\t\tdsubService.newDocumentForPullPoint(createPullPointRequest);\n+\t}\n+\t\n+\tprivate String handleGetMessages(GetMessages getMessagesRequest) throws JAXBException {\n+\t\tInteger max = getMessagesRequest.getMaximumNumber().intValue();\n+\t\tMap<QName, String> otherAttrs = getMessagesRequest.getOtherAttributes();\n+\t\tString facilityId = otherAttrs.get(new QName(\"facility\"));\n+\t\t\n+\t\t// change the null to \"facilityId\" Update this on the xds sender module\n+\t\tList<NotificationMessageHolderType> messages = dsubService.getDocumentsForPullPoint(facilityId, max);;\n+\t\t\n+\t\tGetMessagesResponse response = new GetMessagesResponse();\n+\t\tresponse.getNotificationMessage().addAll(messages);\n+\t\t\n+\t\t/*\n+\t\t *  To remove commented out code\n+\t\t *\n+\t\t// messages = new Gson().toJson(documentsForPullPoints);\n+\t\t// JAXBElement<GetMessagesResponse> getMessagesResponse = new ObjectFactory().createGetMessagesResponse();\n+\t\t//GetMessagesResponse  getMessagesResponse = new ObjectFactory().createGetMessagesResponse();\n+\t\t/*\tfor (String documentId : documentsForPullPoints) {\n+\t\t\tMessage m = new Message();\n+\t\t\tm.setAny(documentId);\n+\t\t\tNotificationMessageHolderType e = new NotificationMessageHolderType();\n+\t\t\te.setMessage(m);\n+\t\t\t\n+\t\t*\n+\t\t*/\n+\t\t\n+\t\t// log.error(\"Get response object \" + new Gson().toJson(response));\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tJAXBElement<GetMessagesResponse> jaxbElement = new JAXBElement<GetMessagesResponse>(\n+\t\t\t        new QName(\"GetMessagesResponse\"), GetMessagesResponse.class, response);\n+\t\t\t\n+\t\t\t// log.error(\"Convert to JAXB element \" + new Gson().toJson(jaxbElement));\n+\t\t\t\n+\t\t\treturn Util.marshallJAXBObject(\"org.oasis_open.docs.wsn.b_2\", jaxbElement.getValue(), true);\n+\t\t\t\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tlog.error(ex, \"\");\n+\t\t\t\n+\t\t\tthrow new RuntimeException(\"Unable to get messages\", ex);\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\tprivate void handleSubscriptionMessage(Subscribe subscribeRequest) {\n+\t\tW3CEndpointReference consumerRef = subscribeRequest.getConsumerReference();\n+\t\tObject address = getProperty(consumerRef, \"address\");\n+\t\t\n+\t\tString uri = getProperty(address, \"uri\");\n+\t\tJAXBElement<String> termination = subscribeRequest.getInitialTerminationTime();\n+\t\t\n+\t\tDate terminationDate = null;\n+\t\tif (termination != null && !termination.isNil()) {\n+\t\t\tString val = termination.getValue();\n+\t\t\tif (StringUtils.isNotBlank(val)) {\n+\t\t\t\ttry {\n+\t\t\t\t\tterminationDate = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSSSXXX\").parse(val);\n+\t\t\t\t}\n+\t\t\t\tcatch (ParseException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Unable to parse the date\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (parseUrl(uri) != null) {\n+\t\t\tdsubService.createSubscription(uri, null, terminationDate);\n+\t\t} else {\n+\t\t\tlog.error(\"Subscription not registered. Invalid url: \" + uri);\n+\t\t}\n+\t}\n+\t\n+\tprivate Object parseMessage(MediatorHTTPRequest request) {\n+\t\tObject result;\n+\t\ttry {\n+\t\t\tString parsedRequest = DsubUtil.parseRequest(request);\n+\t\t\tresult = DsubUtil.extractRequestMessage(parsedRequest);\n+\t\t}\n+\t\tcatch (ParserConfigurationException | SAXException | IOException | JAXBException | TransformerException e) {\n+\t\t\tlog.error(e, \"Parsing Dsub request failure\");\n+\t\t\tresult = null;\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprivate <T> T getProperty(Object object, String name) {\n+\t\ttry {\n+\t\t\tField field = FieldUtils.getField(object.getClass(), name, true);\n+\t\t\treturn (T) field.get(object);\n+\t\t}\n+\t\tcatch (IllegalAccessException e) {\n+\t\t\tthrow new RuntimeException(\"Unable to read field: \" + name, e);\n+\t\t}\n+\t}\n+\t\n+\tprivate URL parseUrl(String url) {\n+\t\ttry {\n+\t\t\tURI uri = new URL(url).toURI();\n+\t\t\treturn uri.toURL();\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n }"
  },
  {
    "sha": "71309f0bd4490ade8c83418fa2e7e3d39e823d69",
    "filename": "src/main/java/org/openhim/mediator/dsub/pull/MongoPullPoint.java",
    "status": "modified",
    "additions": 76,
    "deletions": 9,
    "changes": 85,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/pull/MongoPullPoint.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/pull/MongoPullPoint.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/dsub/pull/MongoPullPoint.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -1,18 +1,34 @@\n package org.openhim.mediator.dsub.pull;\n \n-import com.mongodb.client.MongoDatabase;\n-import com.mongodb.client.model.Filters;\n-import org.bson.Document;\n-import org.openhim.mediator.dsub.MongoSupport;\n-\n+import java.io.UnsupportedEncodingException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.UUID;\n \n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.oasis_open.docs.wsn.b_2.NotificationMessageHolderType;\n+import org.oasis_open.docs.wsn.b_2.ObjectFactory;\n+import org.oasis_open.docs.wsn.b_2.TopicExpressionType;\n+import org.oasis_open.docs.wsn.bw_2.UnableToGetMessagesFault;\n+import org.oasis_open.docs.wsrf.rw_2.ResourceUnknownFault;\n+import org.openhim.mediator.dsub.MongoSupport;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+import com.mongodb.BasicDBObject;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.client.model.Filters;\n+\n public class MongoPullPoint extends MongoSupport implements PullPoint {\n \n     private final static String DOC_ID = \"documentId\";\n     private final static String LOCATION_ID = \"locationId\";\n+    private final static String METADATA = \"metadata\";\n \n     private final String locationId;\n \n@@ -24,16 +40,67 @@\n     @Override\n     public List<String> getDocumentIds() {\n         List<String> ids = new ArrayList<>();\n-        for (Document doc : getCollection().find(Filters.eq(LOCATION_ID, locationId))) {\n+        for (org.bson.Document doc : getCollection().find(Filters.eq(LOCATION_ID, locationId))) {\n             ids.add(doc.getString(DOC_ID));\n         }\n         return ids;\n     }\n \n     @Override\n     public void registerDocument(String documentId) {\n-        getCollection().insertOne(new Document(\"_id\", UUID.randomUUID())\n-            .append(DOC_ID, documentId)\n-            .append(LOCATION_ID, locationId));\n+        getCollection().insertOne(\n+                new org.bson.Document(\"_id\", UUID.randomUUID()).append(DOC_ID, documentId).append(LOCATION_ID, locationId));\n     }\n+\n+    @Override\n+    public void registerDocument(String documentId, String metadata) {\n+        getCollection().insertOne(\n+                new org.bson.Document(\"_id\", UUID.randomUUID()).append(DOC_ID, documentId).append(LOCATION_ID, locationId).append(METADATA, metadata));\n+    }\n+    \n+    @Override\n+    public List<String> getDocumentIds(Integer maxDocumentIds) {\n+        List<String> ids = new ArrayList<>();\n+        for (org.bson.Document doc : getCollection().find(Filters.eq(LOCATION_ID, locationId)).sort(new BasicDBObject(\"$natural\", -1)).limit(maxDocumentIds)) {\n+            ids.add(doc.getString(DOC_ID));\n+        }\n+        return ids;\n+    }\n+\n+\t@Override\n+\tpublic List<NotificationMessageHolderType> getMessages(Integer max)\n+\t        throws UnableToGetMessagesFault, ResourceUnknownFault, ParserConfigurationException, DOMException, UnsupportedEncodingException {\n+\t\t\n+\t\tif (max <= 0) {\n+\t\t\tmax = 10;\n+\t\t}\n+\t\t\n+\t\tif (max > 1000) {\n+\t\t\tmax = 1000;\n+\t\t}\n+\t\t\n+\t\tList<NotificationMessageHolderType> holders = new  ArrayList<NotificationMessageHolderType>();\n+\t\tfor (org.bson.Document doc : getCollection().find(Filters.eq(LOCATION_ID, locationId)).sort(new BasicDBObject(\"$natural\", -1))\n+\t\t        .limit(max)) {\n+\t\t\tNotificationMessageHolderType holder = new NotificationMessageHolderType();\n+\t\t\tholder.setMessage(new ObjectFactory().createNotificationMessageHolderTypeMessage());\n+\t\t\tif (locationId != null) {\n+\t\t\t\tTopicExpressionType topicExp = new TopicExpressionType();\n+\t\t\t\ttopicExp.getContent().add(locationId);\n+\t\t\t\tholder.setTopic(topicExp);\n+\t\t\t}\n+\t\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+\t        DocumentBuilder builder = dbf.newDocumentBuilder();\n+\t        Document document = builder.newDocument();\n+\t        Element element = document.createElement(\"root\");\n+\t        element.setTextContent(Base64.encodeBase64String(doc.getString(METADATA).getBytes(\"UTF-8\")));\n+\t        element.setAttribute(\"documentId\", doc.getString(DOC_ID));\n+\t        document.appendChild(element);\n+\t        \n+\t\t\tholder.getMessage().setAny(element);\n+\t\t\tholders.add(holder);\n+\t\t}\n+\t\treturn holders;\n+\t}\n+\n }"
  },
  {
    "sha": "142958b854665d19ef2fe7842c1582e8f74025fa",
    "filename": "src/main/java/org/openhim/mediator/dsub/pull/PullPoint.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/pull/PullPoint.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/pull/PullPoint.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/dsub/pull/PullPoint.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -1,10 +1,25 @@\n package org.openhim.mediator.dsub.pull;\n \n+import java.io.UnsupportedEncodingException;\n import java.util.List;\n \n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.oasis_open.docs.wsn.b_2.NotificationMessageHolderType;\n+import org.oasis_open.docs.wsn.bw_2.UnableToGetMessagesFault;\n+import org.oasis_open.docs.wsrf.rw_2.ResourceUnknownFault;\n+import org.w3c.dom.DOMException;\n+\n public interface PullPoint {\n \n     List<String> getDocumentIds();\n \n+    List<String> getDocumentIds(Integer maxDocumentIds);\n+    \n     void registerDocument(String documentId);\n+\n+\tvoid registerDocument(String documentId, String metadata);\n+\n+    List<NotificationMessageHolderType> getMessages(Integer max) throws UnableToGetMessagesFault, ResourceUnknownFault, ParserConfigurationException, DOMException, UnsupportedEncodingException;\n+\n }"
  },
  {
    "sha": "c3c303b093bf4577e95394d621ebfa904342b9f4",
    "filename": "src/main/java/org/openhim/mediator/dsub/service/DsubService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/service/DsubService.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/service/DsubService.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/dsub/service/DsubService.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -3,6 +3,9 @@\n import java.util.Date;\n import java.util.List;\n \n+import org.oasis_open.docs.wsn.b_2.CreatePullPoint;\n+import org.oasis_open.docs.wsn.b_2.NotificationMessageHolderType;\n+\n public interface DsubService {\n \n     void createSubscription(String url, String facilityQuery, Date terminateAt);\n@@ -13,5 +16,11 @@\n \n     void newDocumentForPullPoint(String docId, String facilityId);\n \n-    List<String> getDocumentsForPullPoint(String facilityId);\n+\tvoid newDocumentForPullPoint(CreatePullPoint createPullPointRequest);\n+\n+    List<NotificationMessageHolderType> getDocumentsForPullPoint(String locationId, Integer max);\n+    \n+    Boolean subscriptionExists(String url, String facility);\n+\n+\n }"
  },
  {
    "sha": "58244140f0874c538521dd75a0e73556cbef61de",
    "filename": "src/main/java/org/openhim/mediator/dsub/service/DsubServiceImpl.java",
    "status": "modified",
    "additions": 63,
    "deletions": 8,
    "changes": 71,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/service/DsubServiceImpl.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/service/DsubServiceImpl.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/dsub/service/DsubServiceImpl.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -1,14 +1,22 @@\n package org.openhim.mediator.dsub.service;\n \n-import akka.event.LoggingAdapter;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.oasis_open.docs.wsn.b_2.CreatePullPoint;\n+import org.oasis_open.docs.wsn.b_2.NotificationMessageHolderType;\n+import org.oasis_open.docs.wsn.bw_2.UnableToGetMessagesFault;\n+import org.oasis_open.docs.wsrf.rw_2.ResourceUnknownFault;\n import org.openhim.mediator.dsub.pull.PullPoint;\n import org.openhim.mediator.dsub.pull.PullPointFactory;\n import org.openhim.mediator.dsub.subscription.Subscription;\n import org.openhim.mediator.dsub.subscription.SubscriptionNotifier;\n import org.openhim.mediator.dsub.subscription.SubscriptionRepository;\n \n-import java.util.Date;\n-import java.util.List;\n+import akka.event.LoggingAdapter;\n \n public class DsubServiceImpl implements DsubService {\n \n@@ -35,7 +43,11 @@ public void createSubscription(String url, String facilityQuery, Date terminateA\n         Subscription subscription = new Subscription(url,\n                 terminateAt, facilityQuery);\n \n-        subscriptionRepository.saveSubscription(subscription);\n+        if (subscriptionExists(url, facilityQuery) == false) {\n+            subscriptionRepository.saveSubscription(subscription);            \n+        } else {\n+            log.error(\"unable to create subscription. Another one already exists for: \" + url);\n+        }\n     }\n \n     @Override\n@@ -49,8 +61,15 @@ public void notifyNewDocument(String docId, String facilityId) {\n         List<Subscription> subscriptions = subscriptionRepository\n                 .findActiveSubscriptions(facilityId);\n \n+        log.info(\"Active subscriptions: {}\", subscriptions.size());\n         for (Subscription sub : subscriptions) {\n-            subscriptionNotifier.notifySubscription(sub, docId);\n+            log.info(\"URL: {}\", sub.getUrl());\n+\n+            try {\n+                subscriptionNotifier.notifySubscription(sub, docId);\n+            } catch (Exception ex) {\n+                log.error(\"Error occured while sending notification. Unable to notify subscriber: \" + sub.getUrl());\n+            }\n         }\n     }\n \n@@ -60,9 +79,45 @@ public void newDocumentForPullPoint(String docId, String locationId) {\n         pullPoint.registerDocument(docId);\n     }\n \n-    @Override\n-    public List<String> getDocumentsForPullPoint(String locationId) {\n+\t@Override\n+\tpublic void newDocumentForPullPoint(CreatePullPoint createPullPointRequest) {\n+\t\tString docId = createPullPointRequest.getAny().get(0).toString();\n+\t\tString hl7ORU_01 = createPullPointRequest.getOtherAttributes().get(new QName(\"hl7ORU_01\"));\n+\t\tString locationId = createPullPointRequest.getOtherAttributes().get(new QName(\"facility\"));\n         PullPoint pullPoint = pullPointFactory.get(locationId);\n-        return pullPoint.getDocumentIds();\n+        pullPoint.registerDocument(docId, hl7ORU_01);\n+\t\t\n+\t}\n+    \n+    @Override\n+    public List<NotificationMessageHolderType> getDocumentsForPullPoint(String facilityId, Integer maxMessages) {\n+        PullPoint pullPoint = pullPointFactory.get(facilityId);\n+        try {\n+\t\t\treturn pullPoint.getMessages(maxMessages);\n+\t\t}\n+\t\tcatch (UnableToGetMessagesFault | ResourceUnknownFault | ParserConfigurationException e) {\n+\t\t\tlog.error(\"An error occured while trying to get documents for pullpoint\", e);\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\treturn null;\n+    }\n+\n+    @Override\n+    public Boolean subscriptionExists(String url, String facility) {\n+        Boolean subcriptionFound = false;\n+        List<Subscription> subscriptions = subscriptionRepository\n+                .findActiveSubscriptions(facility);\n+\n+        log.info(\"Active subscriptions: {}\", subscriptions.size());\n+        for (Subscription sub : subscriptions) {\n+            log.info(\"URL: {}\", sub.getUrl());\n+            if (url.equals(sub.getUrl())) {\n+                subcriptionFound = true;\n+                break;\n+            }\n+        }\n+\n+        return subcriptionFound;\n     }\n+\n }"
  },
  {
    "sha": "3c44e5978f15fc33506503f49220222dcb578402",
    "filename": "src/main/java/org/openhim/mediator/dsub/subscription/SoapSubscriptionNotifier.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/subscription/SoapSubscriptionNotifier.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/dsub/subscription/SoapSubscriptionNotifier.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/dsub/subscription/SoapSubscriptionNotifier.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -5,6 +5,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import akka.event.LoggingAdapter;\n+\n import java.io.BufferedReader;\n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -17,10 +19,11 @@\n \n     private MediatorConfig config;\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(SoapSubscriptionNotifier.class);\n+    private final LoggingAdapter logA;\n \n-    public SoapSubscriptionNotifier(MediatorConfig config) {\n+    public SoapSubscriptionNotifier(MediatorConfig config, LoggingAdapter logA) {\n         this.config = config;\n+        this.logA = logA;\n     }\n \n     @Override\n@@ -36,7 +39,7 @@ public void notifySubscription(Subscription subscription, String documentId) {\n     private void sendMessage(String url, byte[] body) {\n         HttpURLConnection con = null;\n         try {\n-\n+            logA.info(\"Connecting to: {}\", url);\n             URL myurl = new URL(url);\n \n             con = (HttpURLConnection) myurl.openConnection();\n@@ -50,7 +53,7 @@ private void sendMessage(String url, byte[] body) {\n             }\n \n             StringBuilder content;\n-\n+ \n             try (BufferedReader in = new BufferedReader(\n                     new InputStreamReader(con.getInputStream()))) {\n \n@@ -63,9 +66,9 @@ private void sendMessage(String url, byte[] body) {\n                 }\n             }\n \n-            System.out.println(content.toString());\n+            logA.info(content.toString());\n         } catch (IOException exception) {\n-            LOGGER.error(exception.getMessage());\n+            logA.error(exception, exception.getMessage());\n         } finally {\n             con.disconnect();\n         }"
  },
  {
    "sha": "6299df9668a3c3a4701909fce12628ab5fce062e",
    "filename": "src/main/java/org/openhim/mediator/messages/ITI53NotifyMessage.java",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/messages/ITI53NotifyMessage.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/messages/ITI53NotifyMessage.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/messages/ITI53NotifyMessage.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -11,16 +11,14 @@\n     private String documentId;\n \n     private static final String TEMPLATE =\n-            \"------OPENHIM\\n\" +\n-            \"Content-Type: application/xop+xml; charset=utf-8; type=\\\"application/soap+xml\\\"\\n\" +\n-            \"\\n\" +\n             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" +\n             \"<s:Envelope xmlns:s=\\\"http://www.w3.org/2003/05/soap-envelope\\\" \" +\n             \"xmlns:a=\\\"http://www.w3.org/2005/08/addressing\\\" \" +\n             \"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \" +\n             \"xmlns:wsnt=\\\"http://docs.oasis-open.org/wsn/b-2\\\" \" +\n             \"xmlns:xds=\\\"urn:ihe:iti:xds-b:2007\\\" \" +\n             \"xmlns:rim=\\\"urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0\\\" \" +\n+            \"xmlns:lcm=\\\"urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0\\\" \" +\n             \"xsi:schemaLocation=\\\"http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soapenvelope \" +\n             \"http://www.w3.org/2005/08/addressing http://www.w3.org/2005/08/addressing/ws-addr.xsd \" +\n             \"http://docs.oasis-open.org/wsn/b-2 http://docs.oasis-open.org/wsn/b-2.xsd urn:ihe:iti:xds-b:2007 \" +\n@@ -55,8 +53,7 @@\n             \"</wsnt:NotificationMessage>\" +\n             \"</wsnt:Notify>\" +\n             \"</s:Body>\" +\n-            \"</s:Envelope>\" +\n-            \"------OPENHIM--\";\n+            \"</s:Envelope>\";\n \n     public ITI53NotifyMessage(String recipientServerAddress, String brokerServerAddress, String documentId) {\n         this.messageId = UUID.randomUUID().toString();"
  },
  {
    "sha": "97b2e0920bd176562e3a66d832b049782efe5b7d",
    "filename": "src/main/java/org/openhim/mediator/messages/util/OruR01Util.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/messages/util/OruR01Util.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/messages/util/OruR01Util.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/messages/util/OruR01Util.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -0,0 +1,71 @@\n+package org.openhim.mediator.messages.util;\n+\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import ca.uhn.hl7v2.model.v25.segment.OBR;\n+import ca.uhn.hl7v2.model.v25.segment.PV1;\n+\n+public final class OruR01Util {\n+\n+\tpublic static final String ORUR01_ORU_R01 = \"ORU\\\\^R01\\\\^ORU_R01\";\n+\n+\tpublic static final String ORU_R01 = \"ORU^R01\";\n+\n+\tpublic static final String VERSION_25 = \"2.5\";\n+\n+\tpublic static final String VERSION_251 = \"2.5.1\";\n+\n+\tprivate static final Log LOGGER = LogFactory.getLog(OruR01Util.class);\n+\n+\tprivate static final Pattern ONLY_UUID = Pattern\n+\t\t\t.compile(\"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\");\n+\n+\tpublic static String changeMessageVersionFrom251To25(String message) {\n+\t\tmessage = message.replaceFirst(ORUR01_ORU_R01, ORU_R01);\n+\t\tmessage = message.replaceFirst(VERSION_251, VERSION_25);\n+\t\treturn message;\n+\t}\n+\t\n+\tpublic static String changeDataFormatFromDatetimeToDate(String message) {\n+\t\tmessage = message.replaceAll(\"\\\\[[0-9]{4}\\\\]\", \"\"); // Remove the time component from the date component to fix a HL7 parsing error\n+\t\t\n+\t\treturn message;\n+\t}\n+\n+\tpublic static String getUuidFromOBRSegment4(OBR obr) {\n+\t\ttry {\n+\t\t\tString segment4 = obr.getObr4_UniversalServiceIdentifier().getIdentifier().getValue();\n+\t\t\tMatcher matcher = ONLY_UUID.matcher(segment4);\n+\n+\t\t\tif (matcher.find()) {\n+\t\t\t\treturn matcher.group();\n+\t\t\t} else {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tLOGGER.error(\"An error occured while getting uuid from OBR segment\", e);\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String getUuidFromPV1Segment(PV1 pv1) {\n+\t\ttry {\n+\t\t\tString segment505 = pv1.getAlternateVisitID().getCx5_IdentifierTypeCode().getValue();\n+\t\t\tMatcher matcher = ONLY_UUID.matcher(segment505);\n+\n+\t\t\tif (matcher.find()) {\n+\t\t\t\treturn matcher.group();\n+\t\t\t} else {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tLOGGER.error(\"An error occured while getting uuid from PV1 segment\", e);\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "b04292e1341a8ccd1440107120f0c72aeeafee52",
    "filename": "src/main/java/org/openhim/mediator/orchestration/RepositoryActor.java",
    "status": "modified",
    "additions": 409,
    "deletions": 251,
    "changes": 660,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/orchestration/RepositoryActor.java",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/java/org/openhim/mediator/orchestration/RepositoryActor.java",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/java/org/openhim/mediator/orchestration/RepositoryActor.java?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -6,18 +6,27 @@\n \n package org.openhim.mediator.orchestration;\n \n-import akka.actor.ActorRef;\n-import akka.actor.ActorSelection;\n-import akka.actor.Props;\n-import akka.actor.UntypedActor;\n-import akka.event.Logging;\n-import akka.event.LoggingAdapter;\n-import ca.uhn.hl7v2.model.v25.message.ORM_O01;\n-import ca.uhn.hl7v2.parser.PipeParser;\n-import ca.uhn.hl7v2.util.StringUtil;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.ValidationException;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.http.HttpStatus;\n+import org.dcm4chee.xds2.common.XDSConstants;\n+import org.dcm4chee.xds2.infoset.util.InfosetUtil;\n+import org.oasis_open.docs.wsn.b_2.CreatePullPoint;\n import org.openhim.mediator.denormalization.CSDRequestActor;\n import org.openhim.mediator.denormalization.PIXRequestActor;\n import org.openhim.mediator.dsub.DsubActor;\n@@ -29,253 +38,402 @@\n import org.openhim.mediator.messages.NotifyNewDocument;\n import org.openhim.mediator.messages.OrchestrateProvideAndRegisterRequest;\n import org.openhim.mediator.messages.OrchestrateProvideAndRegisterRequestResponse;\n+import org.openhim.mediator.messages.util.OruR01Util;\n+import org.openhim.mediator.normalization.ParseProvideAndRegisterRequestActor;\n import org.openhim.mediator.normalization.SOAPWrapper;\n import org.openhim.mediator.normalization.XDSbMimeProcessorActor;\n import org.w3c.dom.Document;\n import org.xml.sax.SAXException;\n \n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n+import akka.actor.ActorRef;\n+import akka.actor.ActorSelection;\n+import akka.actor.Props;\n+import akka.actor.UntypedActor;\n+import akka.event.Logging;\n+import akka.event.LoggingAdapter;\n+import ca.uhn.hl7v2.model.v25.message.ORM_O01;\n+import ca.uhn.hl7v2.model.v25.message.ORU_R01;\n+import ca.uhn.hl7v2.parser.PipeParser;\n+import ca.uhn.hl7v2.util.StringUtil;\n+import ihe.iti.xds_b._2007.ProvideAndRegisterDocumentSetRequestType;\n+import oasis.names.tc.ebxml_regrep.xsd.rim._3.ClassificationType;\n+import oasis.names.tc.ebxml_regrep.xsd.rim._3.ExtrinsicObjectType;\n+import oasis.names.tc.ebxml_regrep.xsd.rim._3.SlotType1;\n \n public class RepositoryActor extends UntypedActor {\n-\n-    LoggingAdapter log = Logging.getLogger(getContext().system(), this);\n-\n-    private MediatorConfig config;\n-    private ActorRef mtomProcessor;\n-    private ActorRef dsubActor;\n-\n-    private MediatorHTTPRequest originalRequest;\n-\n-    private String action;\n-    private String messageID;\n-    private String xForwardedFor;\n-    private String cdaDocument;\n-    private String contentType;\n-    private boolean messageIsMTOM;\n-\n-    private String messageBuffer;\n-    private SOAPWrapper soapWrapper;\n-    private String labOrderDocumentId;\n-\n-    public RepositoryActor(MediatorConfig config) {\n-        this.config = config;\n-        mtomProcessor = getContext().actorOf(Props.create(XDSbMimeProcessorActor.class),\n-                \"xds-multipart-normalization\");\n-        dsubActor = getContext().actorOf(Props.create(DsubActor.class, config), \"xds-dsub\");\n-    }\n-\n-\n-    private void readMessage() {\n-        contentType = originalRequest.getHeaders().get(\"Content-Type\");\n-\n-        if (contentType != null\n-                && (StringUtils.containsIgnoreCase(contentType, \"multipart/related\") || StringUtils.containsIgnoreCase(\n-                contentType, \"multipart/form-data\"))) {\n-\n-            log.info(\"Message is multipart. Parsing contents...\");\n-            XDSbMimeProcessorActor.MimeMessage mimeMsg = new XDSbMimeProcessorActor.MimeMessage(\n-                    originalRequest.getRequestHandler(), getSelf(), originalRequest.getBody(), contentType);\n-            mtomProcessor.tell(mimeMsg, getSelf());\n-            messageIsMTOM = true;\n-        } else {\n-            messageBuffer = originalRequest.getBody();\n-            messageIsMTOM = false;\n-            triggerRepositoryAction();\n-        }\n-    }\n-\n-    private void processMtomProcessorResponse(XDSbMimeProcessorActor.XDSbMimeProcessorResponse msg) {\n-        if (msg.getOriginalRequest() instanceof XDSbMimeProcessorActor.MimeMessage) {\n-            log.info(\"Successfully parsed multipart contents\");\n-            messageBuffer = msg.getResponseObject();\n-\n-            if (msg.getDocuments()!=null && msg.getDocuments().size()>0) {\n-                //TODO atm only a single document is handled\n-                //this is just used for 'autoRegister' and really only so that there is _some_ support for mtom.\n-                for (String document : msg.getDocuments()) {\n-                    if (!isLabOrderDocument(document)) {\n-                        cdaDocument = document;\n-                    }\n-                }\n-            }\n-\n-            triggerRepositoryAction();\n-        } else if (msg.getOriginalRequest() instanceof XDSbMimeProcessorActor.EnrichedMessage) {\n-            messageBuffer = msg.getResponseObject();\n-            forwardRequestToRepository();\n-        } else {\n-            unhandled(msg);\n-        }\n-    }\n-\n-    private boolean isLabOrderDocument(String message) {\n-        boolean isORM_001 = true;\n-        try {\n-            PipeParser pipeParser = new PipeParser();\n-            ORM_O01 orm_o01 = new ORM_O01();\n-            pipeParser.parse(orm_o01, message);\n-        } catch (Exception ex) {\n-            isORM_001 = false;\n-        }\n-        return  isORM_001;\n-    }\n-\n-    private boolean determineSOAPAction() {\n-        try {\n-            readSOAPHeader();\n-            if (action==null || action.isEmpty()) {\n-                //not in soap header. maybe it's in the content-type?\n-                action = getSOAPActionFromContentType();\n-\n-                if (action==null || action.isEmpty()) {\n-                    FinishRequest fr = new FinishRequest(\"Could not determine SOAP Action. Is the correct WS-Adressing header set?\", \"text/plain\", HttpStatus.SC_BAD_REQUEST);\n-                    originalRequest.getRespondTo().tell(fr, getSelf());\n-                    return false;\n-                }\n-            }\n-\n-            action = action.trim();\n-            log.info(\"Action: \" + action);\n-            return true;\n-        } catch (ParserConfigurationException | SAXException | XPathExpressionException | IOException ex) {\n-            originalRequest.getRequestHandler().tell(new ExceptError(ex), getSelf());\n-            return false;\n-        }\n-    }\n-\n-    private void readSOAPHeader() throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {\n-        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n-        Document doc = builder.parse(IOUtils.toInputStream(messageBuffer));\n-        XPath xpath = XPathFactory.newInstance().newXPath();\n-        action = xpath.compile(\"//Envelope/Header/Action\").evaluate(doc);\n-        messageID = xpath.compile(\"//Envelope/Header/MessageID\").evaluate(doc);\n-    }\n-\n-    private String getSOAPActionFromContentType() {\n-        if (contentType==null) {\n-            return null;\n-        }\n-\n-        int startI = contentType.indexOf(\"action=\")+\"action=\\\"\".length();\n-        if (startI<0) {\n-            return null;\n-        }\n-\n-        String subStr = contentType.substring(startI);\n-        int endI = subStr.indexOf(\"\\\"\");\n-        if (endI>-1) {\n-            return subStr.substring(0, endI);\n-        }\n-        return subStr;\n-    }\n-\n-    private void processProviderAndRegisterAction() {\n-        ActorRef resolvePatientIDHandler = getContext().actorOf(Props.create(PIXRequestActor.class, config), \"pix-denormalization\");\n-        ActorRef resolveHealthcareWorkerIDHandler = getContext().actorOf(Props.create(CSDRequestActor.class, config), \"csd-denormalization\");\n-        ActorRef resolveFacilityIDHandler = resolveHealthcareWorkerIDHandler;\n-        ActorRef pnrOrchestrator = getContext().actorOf(\n-                Props.create(\n-                        ProvideAndRegisterOrchestrationActor.class, config,\n-                        resolvePatientIDHandler, resolveHealthcareWorkerIDHandler, resolveFacilityIDHandler\n-                ),\n-                \"xds-pnr-orchestrator\"\n-        );\n-\n-        try {\n-            soapWrapper = new SOAPWrapper(messageBuffer);\n-            OrchestrateProvideAndRegisterRequest msg = new OrchestrateProvideAndRegisterRequest(\n-                    originalRequest.getRequestHandler(), getSelf(), soapWrapper.getSoapBody(), xForwardedFor, cdaDocument, messageID\n-            );\n-            pnrOrchestrator.tell(msg, getSelf());\n-        } catch (SOAPWrapper.SOAPParseException ex) {\n-            FinishRequest fr = new FinishRequest(ex.getMessage(), \"text/plain\", HttpStatus.SC_BAD_REQUEST);\n-            originalRequest.getRequestHandler().tell(fr, getSelf());\n-        }\n-    }\n-\n-    private void processProvideAndRegisterResponse(OrchestrateProvideAndRegisterRequestResponse msg) {\n-        soapWrapper.setSoapBody(msg.getResponseObject());\n-        messageBuffer = soapWrapper.getFullDocument();\n-        labOrderDocumentId = msg.getLabOrderDocumentId();\n-\n-        if (messageIsMTOM) {\n-            XDSbMimeProcessorActor.EnrichedMessage mimeMsg = new XDSbMimeProcessorActor.EnrichedMessage(\n-                    originalRequest.getRequestHandler(), getSelf(), messageBuffer\n-            );\n-            mtomProcessor.tell(mimeMsg, getSelf());\n-        } else {\n-            forwardRequestToRepository();\n-        }\n-    }\n-\n-    private void triggerRepositoryAction() {\n-        if (determineSOAPAction()) {\n-            if (\"urn:ihe:iti:2007:ProvideAndRegisterDocumentSet-b\".equals(action)) {\n-                processProviderAndRegisterAction();\n-            } else {\n-                messageBuffer = originalRequest.getBody();\n-                forwardRequestToRepository();\n-            }\n-        }\n-    }\n-\n-    private void forwardRequestToRepository() {\n-        log.info(\"Forwarding request to repository\");\n-        ActorSelection httpConnector = getContext().actorSelection(config.userPathFor(\"http-connector\"));\n-\n-        // Copy original content type\n-        String contentType = originalRequest.getHeaders().get(\"Content-Type\");\n-        Map<String, String> headers = new HashMap<>();\n-        headers.put(\"Content-Type\", contentType);\n-\n-        String scheme;\n-        Integer port;\n-        if (config.getProperty(\"xds.repository.secure\").equals(\"true\")) {\n-            scheme = \"https\";\n-            port = Integer.parseInt(config.getProperty(\"xds.repository.securePort\"));\n-        } else {\n-            scheme = \"http\";\n-            port = Integer.parseInt(config.getProperty(\"xds.repository.port\"));\n-        }\n-\n-        MediatorHTTPRequest request = new MediatorHTTPRequest(\n-                originalRequest.getRespondTo(), getSelf(), \"XDS.b Repository\", \"POST\", scheme,\n-                config.getProperty(\"xds.repository.host\"), port, config.getProperty(\"xds.repository.path\"),\n-                messageBuffer, headers, null\n-        );\n-        httpConnector.tell(request, getSelf());\n-    }\n-\n-    private void finalizeResponse(MediatorHTTPResponse response) {\n-        if (StringUtil.isNotBlank(labOrderDocumentId)) {\n-            NotifyNewDocument msg = new NotifyNewDocument(labOrderDocumentId);\n-            dsubActor.tell(msg, getSelf());\n-        }\n-        originalRequest.getRespondTo().tell(response.toFinishRequest(), getSelf());\n-    }\n-\n-    @Override\n-    public void onReceive(Object msg) throws Exception {\n-        if (msg instanceof MediatorHTTPRequest) {\n-            originalRequest = (MediatorHTTPRequest) msg;\n-            xForwardedFor = ((MediatorHTTPRequest)msg).getHeaders().get(\"X-Forwarded-For\");\n-            readMessage();\n-        } else if (msg instanceof XDSbMimeProcessorActor.XDSbMimeProcessorResponse) {\n-            processMtomProcessorResponse((XDSbMimeProcessorActor.XDSbMimeProcessorResponse) msg);\n-        } else if (msg instanceof OrchestrateProvideAndRegisterRequestResponse) {\n-            processProvideAndRegisterResponse((OrchestrateProvideAndRegisterRequestResponse) msg);\n-        } else if (msg instanceof MediatorHTTPResponse) {\n-            finalizeResponse((MediatorHTTPResponse) msg);\n-        } else {\n-            unhandled(msg);\n-        }\n-    }\n+\t\n+\tprivate final LoggingAdapter log = Logging.getLogger(getContext().system(), this);\n+\t\n+\tprivate MediatorConfig config;\n+\t\n+\tprivate ActorRef mtomProcessor;\n+\t\n+\tprivate ActorRef dsubActor;\n+\t\n+\tprivate MediatorHTTPRequest originalRequest;\n+\t\n+\tprivate String action;\n+\t\n+\tprivate String messageID;\n+\t\n+\tprivate String xForwardedFor;\n+\t\n+\tprivate String cdaDocument;\n+\t\n+\tprivate String hl7ORU_01String;\n+\t\n+\tprivate String contentType;\n+\t\n+\tprivate boolean messageIsMTOM;\n+\t\n+\tprivate String messageBuffer;\n+\t\n+\tprivate SOAPWrapper soapWrapper;\n+\t\n+\tprivate String labOrderDocumentId;\n+\t\n+\tprivate boolean messageIsLabResult;\n+\t\n+\tpublic RepositoryActor(MediatorConfig config) {\n+\t\tthis.config = config;\n+\t\tmtomProcessor = getContext().actorOf(Props.create(XDSbMimeProcessorActor.class), \"xds-multipart-normalization\");\n+\t\tdsubActor = getContext().actorOf(Props.create(DsubActor.class, config), \"xds-dsub\");\n+\t}\n+\t\n+\tprivate void readMessage() {\n+\t\tcontentType = originalRequest.getHeaders().get(\"Content-Type\");\n+\t\t\n+\t\tif (contentType != null && (StringUtils.containsIgnoreCase(contentType, \"multipart/related\")\n+\t\t        || StringUtils.containsIgnoreCase(contentType, \"multipart/form-data\"))) {\n+\t\t\t\n+\t\t\tlog.info(\"Message is multipart. Parsing contents...\");\n+\t\t\tXDSbMimeProcessorActor.MimeMessage mimeMsg = new XDSbMimeProcessorActor.MimeMessage(\n+\t\t\t        originalRequest.getRequestHandler(), getSelf(), originalRequest.getBody(), contentType);\n+\t\t\tmtomProcessor.tell(mimeMsg, getSelf());\n+\t\t\tmessageIsMTOM = true;\n+\t\t} else {\n+\t\t\tmessageBuffer = originalRequest.getBody();\n+\t\t\tmessageIsMTOM = false;\n+\t\t\ttriggerRepositoryAction();\n+\t\t}\n+\t}\n+\t\n+\tprivate void processMtomProcessorResponse(XDSbMimeProcessorActor.XDSbMimeProcessorResponse msg) {\n+\t\tif (msg.getOriginalRequest() instanceof XDSbMimeProcessorActor.MimeMessage) {\n+\t\t\tlog.info(\"Successfully parsed multipart contents\");\n+\t\t\tmessageBuffer = msg.getResponseObject();\n+\t\t\t\n+\t\t\tlog.info(\"No. of documents is {}\", msg.getDocuments().size());\n+\t\t\tif (msg.getDocuments() != null && msg.getDocuments().size() > 0) {\n+\t\t\t\t//TODO atm only a single document is handled\n+\t\t\t\t//this is just used for 'autoRegister' and really only so that there is _some_ support for mtom.\n+\t\t\t\tfor (String document : msg.getDocuments()) {\n+\t\t\t\t\tlog.info(\"Sanitizing document before parsing {}\", document);\n+\t\t\t\t\tString sanitizedDocument = sanitizeDocument(document);\n+\t\t\t\t\tlog.info(\"Document after sanitizing {}\", sanitizedDocument);\n+\t\t\t\t\t\n+\t\t\t\t\tif (!isLabOrderDocument(sanitizedDocument)) {\n+\t\t\t\t\t\tlog.info(\"Setting CDA document\");\n+\t\t\t\t\t\tcdaDocument = document;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tlog.info(\"Checking if this document is a Lab Result {}\", sanitizedDocument);\n+\t\t\t\t\tif (isLabResult(sanitizedDocument)) {\n+\t\t\t\t\t\tmessageIsLabResult = true;\n+\t\t\t\t\t\thl7ORU_01String = document;\n+\t\t\t\t\t\tlog.info(\"Message is a Lab Result: {}\", hl7ORU_01String);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\ttriggerRepositoryAction();\n+\t\t} else if (msg.getOriginalRequest() instanceof XDSbMimeProcessorActor.EnrichedMessage) {\n+\t\t\tmessageBuffer = msg.getResponseObject();\n+\t\t\tforwardRequestToRepository();\n+\t\t} else {\n+\t\t\tunhandled(msg);\n+\t\t}\n+\t}\n+\t\n+\tprivate String sanitizeDocument(String document) {\n+\t\tString sanitizedString = document;\n+\t\tsanitizedString = OruR01Util.changeMessageVersionFrom251To25(sanitizedString);\n+\t\tsanitizedString = OruR01Util.changeDataFormatFromDatetimeToDate(sanitizedString);\n+\t\t\n+\t\treturn sanitizedString;\n+\t}\n+\t\n+\tprivate boolean isLabOrderDocument(String message) {\n+\t\tboolean isORM_001 = true;\n+\t\tboolean isORU_R01 = true;\n+\t\ttry {\n+\t\t\tPipeParser pipeParser = new PipeParser();\n+\t\t\tORM_O01 orm_o01 = new ORM_O01();\n+\t\t\tpipeParser.parse(orm_o01, message);\n+\t\t\tORU_R01 oru_r01 = new ORU_R01();\n+\t\t\tpipeParser.parse(oru_r01, message);\n+\t\t\t\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tisORM_001 = false;\n+\t\t\tisORU_R01 = false;\n+\t\t}\n+\t\treturn isORM_001 | isORU_R01;\n+\t}\n+\t\n+\tprivate boolean isLabResult(String message) {\n+\t\tboolean isORU_R01 = true;\n+\t\tlog.info(\"Parsing the message {}\", message);\n+\t\ttry {\n+\t\t\tPipeParser pipeParser = new PipeParser();\n+\t\t\t// ORU_R01 oru_r01 = new ORU_R01();\n+\t\t\t// pipeParser.parse(oru_r01, message);\n+\t\t\tORU_R01 msg = (ORU_R01) pipeParser.parse(message);\n+\t\t\tlog.info(\"Message is a lab result\", message);\n+\t\t\tlog.info(msg.toString());\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tlog.info(\"Message not a lab result\", message);\n+\t\t\tlog.info(\"Parsing error is: {}\", ex.getMessage().toString());\n+\t\t\tisORU_R01 = false;\n+\t\t}\n+\t\treturn isORU_R01;\n+\t\t\n+\t}\n+\t\n+\tprivate boolean determineSOAPAction() {\n+\t\ttry {\n+\t\t\treadSOAPHeader();\n+\t\t\tif (action == null || action.isEmpty()) {\n+\t\t\t\t//not in soap header. maybe it's in the content-type?\n+\t\t\t\taction = getSOAPActionFromContentType();\n+\t\t\t\t\n+\t\t\t\tif (action == null || action.isEmpty()) {\n+\t\t\t\t\tFinishRequest fr = new FinishRequest(\n+\t\t\t\t\t        \"Could not determine SOAP Action. Is the correct WS-Adressing header set?\", \"text/plain\",\n+\t\t\t\t\t        HttpStatus.SC_BAD_REQUEST);\n+\t\t\t\t\toriginalRequest.getRespondTo().tell(fr, getSelf());\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\taction = action.trim();\n+\t\t\tlog.info(\"Action: \" + action);\n+\t\t\treturn true;\n+\t\t}\n+\t\tcatch (ParserConfigurationException | SAXException | XPathExpressionException | IOException ex) {\n+\t\t\toriginalRequest.getRequestHandler().tell(new ExceptError(ex), getSelf());\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\t\n+\tprivate void readSOAPHeader() throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {\n+\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+\t\tDocument doc = builder.parse(IOUtils.toInputStream(messageBuffer));\n+\t\tXPath xpath = XPathFactory.newInstance().newXPath();\n+\t\taction = xpath.compile(\"//Envelope/Header/Action\").evaluate(doc);\n+\t\tmessageID = xpath.compile(\"//Envelope/Header/MessageID\").evaluate(doc);\n+\t}\n+\t\n+\tprivate String getSOAPActionFromContentType() {\n+\t\tif (contentType == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tint startI = contentType.indexOf(\"action=\") + \"action=\\\"\".length();\n+\t\tif (startI < 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tString subStr = contentType.substring(startI);\n+\t\tint endI = subStr.indexOf(\"\\\"\");\n+\t\tif (endI > -1) {\n+\t\t\treturn subStr.substring(0, endI);\n+\t\t}\n+\t\treturn subStr;\n+\t}\n+\t\n+\tprivate void processProviderAndRegisterAction() {\n+\t\tActorRef resolvePatientIDHandler = getContext().actorOf(Props.create(PIXRequestActor.class, config),\n+\t\t    \"pix-denormalization\");\n+\t\tActorRef resolveHealthcareWorkerIDHandler = getContext().actorOf(Props.create(CSDRequestActor.class, config),\n+\t\t    \"csd-denormalization\");\n+\t\tActorRef resolveFacilityIDHandler = resolveHealthcareWorkerIDHandler;\n+\t\tActorRef pnrOrchestrator = getContext().actorOf(Props.create(ProvideAndRegisterOrchestrationActor.class, config,\n+\t\t    resolvePatientIDHandler, resolveHealthcareWorkerIDHandler, resolveFacilityIDHandler), \"xds-pnr-orchestrator\");\n+\t\t\n+\t\ttry {\n+\t\t\tsoapWrapper = new SOAPWrapper(messageBuffer);\n+\t\t\tOrchestrateProvideAndRegisterRequest msg = new OrchestrateProvideAndRegisterRequest(\n+\t\t\t        originalRequest.getRequestHandler(), getSelf(), soapWrapper.getSoapBody(), xForwardedFor, cdaDocument,\n+\t\t\t        messageID);\n+\t\t\tpnrOrchestrator.tell(msg, getSelf());\n+\t\t}\n+\t\tcatch (SOAPWrapper.SOAPParseException ex) {\n+\t\t\tFinishRequest fr = new FinishRequest(ex.getMessage(), \"text/plain\", HttpStatus.SC_BAD_REQUEST);\n+\t\t\toriginalRequest.getRequestHandler().tell(fr, getSelf());\n+\t\t}\n+\t}\n+\t\n+\tprivate void processProvideAndRegisterResponse(OrchestrateProvideAndRegisterRequestResponse msg) {\n+\t\tsoapWrapper.setSoapBody(msg.getResponseObject());\n+\t\tmessageBuffer = soapWrapper.getFullDocument();\n+\t\tlabOrderDocumentId = msg.getLabOrderDocumentId();\n+\t\tlog.info(\"Document Id is: {}\", labOrderDocumentId);\n+\t\tlog.info(\"Message is MTOM: {}\", messageIsMTOM);\n+\t\t\n+\t\tif (messageIsMTOM) {\n+\t\t\tXDSbMimeProcessorActor.EnrichedMessage mimeMsg = new XDSbMimeProcessorActor.EnrichedMessage(\n+\t\t\t        originalRequest.getRequestHandler(), getSelf(), messageBuffer);\n+\t\t\tmtomProcessor.tell(mimeMsg, getSelf());\n+\t\t} else {\n+\t\t\tforwardRequestToRepository();\n+\t\t}\n+\t}\n+\t\n+\tprivate void triggerRepositoryAction() {\n+\t\tif (determineSOAPAction()) {\n+\t\t\tif (\"urn:ihe:iti:2007:ProvideAndRegisterDocumentSet-b\".equals(action)) {\n+\t\t\t\tprocessProviderAndRegisterAction();\n+\t\t\t\t// Hack to prevent the processProviderAndRegisterAction due to resource limitations in the ILR and CR\n+\t\t\t\t// messageBuffer = originalRequest.getBody();\n+\t\t\t\t// forwardRequestToRepository();\n+\t\t\t} else {\n+\t\t\t\tmessageBuffer = originalRequest.getBody();\n+\t\t\t\tforwardRequestToRepository();\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprivate void forwardRequestToRepository() {\n+\t\tlog.info(\"Forwarding request to repository\");\n+\t\tActorSelection httpConnector = getContext().actorSelection(config.userPathFor(\"http-connector\"));\n+\t\t\n+\t\t// Copy original content type\n+\t\tString contentType = originalRequest.getHeaders().get(\"Content-Type\");\n+\t\tMap<String, String> headers = new HashMap<>();\n+\t\theaders.put(\"Content-Type\", contentType);\n+\t\t\n+\t\tString scheme;\n+\t\tInteger port;\n+\t\tif (config.getProperty(\"xds.repository.secure\").equals(\"true\")) {\n+\t\t\tscheme = \"https\";\n+\t\t\tport = Integer.parseInt(config.getProperty(\"xds.repository.securePort\"));\n+\t\t} else {\n+\t\t\tscheme = \"http\";\n+\t\t\tport = Integer.parseInt(config.getProperty(\"xds.repository.port\"));\n+\t\t}\n+\t\t\n+\t\tMediatorHTTPRequest request = new MediatorHTTPRequest(originalRequest.getRespondTo(), getSelf(), \"XDS.b Repository\",\n+\t\t        \"POST\", scheme, config.getProperty(\"xds.repository.host\"), port, config.getProperty(\"xds.repository.path\"),\n+\t\t        messageBuffer, headers, null);\n+\t\thttpConnector.tell(request, getSelf());\n+\t}\n+\t\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate void finalizeResponse(MediatorHTTPResponse response) throws ValidationException {\n+\t\tlog.info(\"Finalizing response for document: {}\", labOrderDocumentId);\n+\t\tif (StringUtil.isNotBlank(labOrderDocumentId)) {\n+\t\t\t\n+\t\t\tif (messageIsLabResult) {\n+\t\t\t\tlog.info(\"Creating a pull Point {}\", labOrderDocumentId);\n+\t\t\t\tCreatePullPoint pullPoint = new CreatePullPoint();\n+\t\t\t\tpullPoint.getAny().add(labOrderDocumentId);\n+\t\t\t\tpullPoint.getOtherAttributes().put(new QName(\"hl7ORU_01\"), hl7ORU_01String);\n+\t\t\t\t\n+\t\t\t\tlog.info(\"Extract facility id from the ProvideAndRegister document request \"\n+\t\t\t\t        + \"and assign it to the CreatePullPoint Object\");\n+\t\t\t\t\n+\t\t\t\tresponse.getOriginalRequest();\n+\t\t\t\ttry {\n+\t\t\t\t\t// soapWrapper = new SOAPWrapper(mhr.getBody());\n+\t\t\t\t\tlog.info(\"Creating a ProvideAndRegisterRequest Full document: {}\", soapWrapper.getFullDocument());\n+\t\t\t\t\tlog.info(\"Creating a ProvideAndRegisterRequest Soap body : {}\", soapWrapper.getSoapBody());\n+\t\t\t\t\tProvideAndRegisterDocumentSetRequestType oRequest = ParseProvideAndRegisterRequestActor\n+\t\t\t\t\t        .parseRequest(soapWrapper.getSoapBody());\n+\t\t\t\t\t\n+\t\t\t\t\tList<ExtrinsicObjectType> eos = InfosetUtil.getExtrinsicObjects(oRequest.getSubmitObjectsRequest());\n+\t\t\t\t\tString localLocationID = null;\n+\t\t\t\t\tlog.info(\"Extrinsic objects {}\", eos.size());\n+\t\t\t\t\tfor (ExtrinsicObjectType eo : eos) {\n+\t\t\t\t\t\tList<ClassificationType> classifications = eo.getClassification();\n+\t\t\t\t\t\tMap<String, SlotType1> slots = new HashMap<String, SlotType1>();\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tfor (ClassificationType classification : classifications) {\n+\t\t\t\t\t\t\tif (classification.getClassificationScheme().equals(XDSConstants.UUID_XDSDocumentEntry_author)) {\n+\t\t\t\t\t\t\t\tslots = InfosetUtil.getSlotsFromRegistryObject(classification);\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tlog.info(\"No of slots {}\", slots);\n+\t\t\t\t\t\t\t\tfor (Map.Entry<String, SlotType1> slotMap : slots.entrySet()) {\n+\t\t\t\t\t\t\t\t\tlog.info(\"slot {}\", slotMap.getKey());\n+\t\t\t\t\t\t\t\t\tlog.info(\"slot {}\", slotMap.getValue());\n+\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\tList<String> institutionSlotValList = null;\n+\t\t\t\t\t\t\t\t\tif (slotMap.getKey().contains(XDSConstants.SLOT_NAME_AUTHOR_INSTITUTION)) {\n+\t\t\t\t\t\t\t\t\t\tlog.info(\"Author Institution {} \", XDSConstants.SLOT_NAME_AUTHOR_INSTITUTION);\n+\t\t\t\t\t\t\t\t\t\tSlotType1 institutionSlot = slotMap.getValue();\n+\t\t\t\t\t\t\t\t\t\tinstitutionSlotValList = institutionSlot.getValueList().getValue();\n+\t\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t\t// loop through all values and find the first one with an ID\n+\t\t\t\t\t\t\t\t\t\tlog.info(\"Author Institutions count {} \", institutionSlotValList.size());\n+\t\t\t\t\t\t\t\t\t\tfor (String val : institutionSlotValList) {\n+\t\t\t\t\t\t\t\t\t\t\tlog.info(\"Author Institution \", val);\n+\t\t\t\t\t\t\t\t\t\t\tString[] xonComponents = val.split(\"\\\\^\", -1);\n+\t\t\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t\t\t// if the identifier component exists\n+\t\t\t\t\t\t\t\t\t\t\tif (xonComponents.length >= 10 && !xonComponents[5].isEmpty()\n+\t\t\t\t\t\t\t\t\t\t\t        && !xonComponents[9].isEmpty()) {\n+\t\t\t\t\t\t\t\t\t\t\t\tlocalLocationID = xonComponents[9];\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tif (localLocationID == null) {\n+\t\t\t\t\t\tlog.info(\"Local facility identifiers could not be extracted from the XDS metadata\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlog.info(\"Local facility identified as : {}\", localLocationID);\n+\t\t\t\t\t\tpullPoint.getOtherAttributes().put(new QName(\"facility\"), localLocationID);\n+\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (JAXBException e1) {\n+\t\t\t\t\tlog.info(\"Unable to extract request. The error thrown is: {}\", e1.getMessage());\n+\t\t\t\t\te1.printStackTrace();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdsubActor.tell(pullPoint, getSelf());\n+\t\t\t} else {\n+\t\t\t\tlog.info(\"Notifying DBUS {}\", labOrderDocumentId);\n+\t\t\t\tNotifyNewDocument msg = new NotifyNewDocument(labOrderDocumentId);\n+\t\t\t\tdsubActor.tell(msg, getSelf());\n+\t\t\t}\n+\t\t}\n+\t\toriginalRequest.getRespondTo().tell(response.toFinishRequest(), getSelf());\n+\t}\n+\t\n+\t@Override\n+\tpublic void onReceive(Object msg) throws Exception {\n+\t\tif (msg instanceof MediatorHTTPRequest) {\n+\t\t\toriginalRequest = (MediatorHTTPRequest) msg;\n+\t\t\txForwardedFor = ((MediatorHTTPRequest) msg).getHeaders().get(\"X-Forwarded-For\");\n+\t\t\treadMessage();\n+\t\t} else if (msg instanceof XDSbMimeProcessorActor.XDSbMimeProcessorResponse) {\n+\t\t\tlog.info(\"Processing MtomProcessorresponse\");\n+\t\t\tprocessMtomProcessorResponse((XDSbMimeProcessorActor.XDSbMimeProcessorResponse) msg);\n+\t\t} else if (msg instanceof OrchestrateProvideAndRegisterRequestResponse) {\n+\t\t\tprocessProvideAndRegisterResponse((OrchestrateProvideAndRegisterRequestResponse) msg);\n+\t\t} else if (msg instanceof MediatorHTTPResponse) {\n+\t\t\tlog.info(\"Finalizing response\");\n+\t\t\tfinalizeResponse((MediatorHTTPResponse) msg);\n+\t\t} else {\n+\t\t\tunhandled(msg);\n+\t\t}\n+\t}\n }"
  },
  {
    "sha": "c186657661628c14ca06b6004927a4c100ef9860",
    "filename": "src/main/resources-filtered/mediator-registration-info.json",
    "status": "renamed",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SEDISH/openhim-mediator-xds/blob/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/resources-filtered/mediator-registration-info.json",
    "raw_url": "https://github.com/SEDISH/openhim-mediator-xds/raw/a2e337d3b8eac0941541fa193c0c7123693b9c98/src/main/resources-filtered/mediator-registration-info.json",
    "contents_url": "https://api.github.com/repos/SEDISH/openhim-mediator-xds/contents/src/main/resources-filtered/mediator-registration-info.json?ref=a2e337d3b8eac0941541fa193c0c7123693b9c98",
    "patch": "@@ -1,6 +1,6 @@\n {\n   \"urn\": \"urn:mediator:xds\",\n-  \"version\": \"1.0.2-SNAPSHOT\",\n+  \"version\": \"${version}\",\n   \"name\": \"OpenHIE XDS.b Mediator\",\n   \"description\": \"An XDS.b mediator for OpenHIE integration\",\n   \"endpoints\": [\n@@ -14,9 +14,9 @@\n   \"defaultChannelConfig\": [\n     {\n       \"name\": \"XDS.b Mediator\",\n-      \"urlPattern\": \"^/xds(registry|repository)$\",\n+      \"urlPattern\": \"^/xds(registry|repository|brepository)$\",\n       \"type\": \"http\",\n-      \"allow\": [\"xds\"],\n+      \"allow\": [\"xds,lnsp,xdsRole\"],\n       \"routes\": [\n         {\n           \"name\": \"XDS.b Mediator\",\n@@ -28,7 +28,7 @@\n       ]\n     },\n     {\n-      \"name\": \"DSUB\",\n+      \"name\": \"XDS.b Mediator dsub\",\n       \"urlPattern\": \"^/dsub$\",\n       \"type\": \"http\",\n       \"allow\": [\"xds\"],",
    "previous_filename": "src/main/resources/mediator-registration-info.json"
  }
]
