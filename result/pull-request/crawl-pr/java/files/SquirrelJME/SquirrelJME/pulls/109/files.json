[
  {
    "sha": "b81028fdf33764528473a26a49c01293ed1e70ab",
    "filename": ".idea/compiler.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/compiler.xml",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/compiler.xml",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/.idea/compiler.xml?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project version=\"4\">\n   <component name=\"CompilerConfiguration\">\n-    <bytecodeTargetLevel>\n+    <bytecodeTargetLevel target=\"1.8\">\n       <module name=\"squirreljme.emulators.emulator-runner.main\" target=\"8\" />\n       <module name=\"squirreljme.emulators.emulator-runner.test\" target=\"8\" />\n       <module name=\"squirreljme.main\" target=\"1.7\" />"
  },
  {
    "sha": "a21c488972f90a823b05146fa203751b4211397e",
    "filename": ".idea/dictionaries/xer.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/dictionaries/xer.xml",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/dictionaries/xer.xml",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/.idea/dictionaries/xer.xml?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -68,6 +68,7 @@\n       <w>squirreljme</w>\n       <w>stdint</w>\n       <w>summercoat</w>\n+      <w>sysprop</w>\n       <w>tabbedpanes</w>\n       <w>targetting</w>\n       <w>textboxes</w>\n@@ -78,6 +79,8 @@\n       <w>vmtypes</w>\n       <w>vtable</w>\n       <w>xemulator</w>\n+      <w>xjdwp</w>\n+      <w>xlibraries</w>\n       <w>xsnapshot</w>\n     </words>\n   </dictionary>"
  },
  {
    "sha": "57a8c491a17fba5ff488769adece5b168fa5c693",
    "filename": ".idea/gradle.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/gradle.xml",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/gradle.xml",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/.idea/gradle.xml?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -23,6 +23,7 @@\n             <option value=\"$PROJECT_DIR$/modules/cldc-compact\" />\n             <option value=\"$PROJECT_DIR$/modules/collections\" />\n             <option value=\"$PROJECT_DIR$/modules/common-vm\" />\n+            <option value=\"$PROJECT_DIR$/modules/debug-jdwp\" />\n             <option value=\"$PROJECT_DIR$/modules/demo-hello\" />\n             <option value=\"$PROJECT_DIR$/modules/dio\" />\n             <option value=\"$PROJECT_DIR$/modules/dio-adc\" />\n@@ -77,8 +78,6 @@\n             <option value=\"$PROJECT_DIR$/tools/txt-to-pbm\" />\n           </set>\n         </option>\n-        <option name=\"useAutoImport\" value=\"true\" />\n-        <option name=\"useQualifiedModuleNames\" value=\"true\" />\n       </GradleProjectSettings>\n     </option>\n   </component>"
  },
  {
    "sha": "8aa0def1c50bae977d36001110f4791887da3846",
    "filename": ".idea/misc.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/misc.xml",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/.idea/misc.xml?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -7,8 +7,11 @@\n     </list>\n   </component>\n   <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n+  <component name=\"FrameworkDetectionExcludesConfiguration\">\n+    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\n+  </component>\n   <component name=\"JavaScriptSettings\">\n     <option name=\"languageLevel\" value=\"ES6\" />\n   </component>\n-  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"false\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\" />\n+  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\" />\n </project>\n\\ No newline at end of file"
  },
  {
    "sha": "3e130f273df9a114f1ece6ee253e7bd958ac0fd9",
    "filename": ".idea/runConfigurations/JDWP_Connect.xml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/runConfigurations/JDWP_Connect.xml",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/runConfigurations/JDWP_Connect.xml",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/.idea/runConfigurations/JDWP_Connect.xml?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -0,0 +1,11 @@\n+<component name=\"ProjectRunConfigurationManager\">\n+  <configuration default=\"false\" name=\"JDWP Connect\" type=\"Remote\">\n+    <option name=\"USE_SOCKET_TRANSPORT\" value=\"true\" />\n+    <option name=\"SERVER_MODE\" value=\"false\" />\n+    <option name=\"SHMEM_ADDRESS\" />\n+    <option name=\"HOST\" value=\"localhost\" />\n+    <option name=\"PORT\" value=\"5005\" />\n+    <option name=\"AUTO_RESTART\" value=\"false\" />\n+    <method v=\"2\" />\n+  </configuration>\n+</component>\n\\ No newline at end of file"
  },
  {
    "sha": "e2bd28b8be30a572db4a1507d925d38b062d4d29",
    "filename": ".idea/runConfigurations/JDWP_Listen.xml",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/runConfigurations/JDWP_Listen.xml",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/.idea/runConfigurations/JDWP_Listen.xml",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/.idea/runConfigurations/JDWP_Listen.xml?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -0,0 +1,15 @@\n+<component name=\"ProjectRunConfigurationManager\">\n+  <configuration default=\"false\" name=\"JDWP Listen\" type=\"Remote\">\n+    <option name=\"USE_SOCKET_TRANSPORT\" value=\"true\" />\n+    <option name=\"SERVER_MODE\" value=\"true\" />\n+    <option name=\"SHMEM_ADDRESS\" />\n+    <option name=\"HOST\" value=\"localhost\" />\n+    <option name=\"PORT\" value=\"5005\" />\n+    <option name=\"AUTO_RESTART\" value=\"true\" />\n+    <RunnerSettings RunnerId=\"Debug\">\n+      <option name=\"DEBUG_PORT\" value=\"5005\" />\n+      <option name=\"LOCAL\" value=\"false\" />\n+    </RunnerSettings>\n+    <method v=\"2\" />\n+  </configuration>\n+</component>\n\\ No newline at end of file"
  },
  {
    "sha": "e7381b24481557ae4aeba9dc279aca0e679a88ea",
    "filename": "buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMFullSuite.java",
    "status": "modified",
    "additions": 18,
    "deletions": 1,
    "changes": 19,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMFullSuite.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMFullSuite.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMFullSuite.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -11,6 +11,7 @@\n \n import javax.inject.Inject;\n import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.SourceSet;\n \n /**\n  * Task for running the full-suite of SquirrelJME.\n@@ -19,7 +20,11 @@\n  */\n public class VMFullSuite\n \textends DefaultTask\n+\timplements VMExecutableTask\n {\n+\t/** The source set used. */\n+\tpublic final String sourceSet;\n+\t\n \t/** The virtual machine type. */\n \tpublic final VMSpecifier vmType;\n \t\n@@ -37,6 +42,7 @@ public VMFullSuite(VMSpecifier __vmType)\n \t\tif (__vmType == null)\n \t\t\tthrow new NullPointerException(\"NARG\");\n \t\t\n+\t\tthis.sourceSet = SourceSet.MAIN_SOURCE_SET_NAME;\n \t\tthis.vmType = __vmType;\n \t\t\n \t\t// Runs the entire API/Library suite of SquirrelJME to run a given\n@@ -49,9 +55,20 @@ public VMFullSuite(VMSpecifier __vmType)\n \t\tthis.getOutputs().upToDateWhen(new AlwaysFalse());\n \t\t\n \t\t// This depends on everything!\n-\t\tthis.dependsOn(new VMFullSuiteDepends(this, __vmType));\n+\t\tthis.dependsOn(new VMFullSuiteDepends(this, __vmType),\n+\t\t\tnew VMEmulatorDependencies(this, __vmType));\n \t\t\n \t\t// Actual running of everything\n \t\tthis.doLast(new VMFullSuiteTaskAction(__vmType));\n \t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/08\n+\t */\n+\t@Override\n+\tpublic String getSourceSet()\n+\t{\n+\t\treturn this.sourceSet;\n+\t}\n }"
  },
  {
    "sha": "c5f403b9cd627a55d951ffe9121d78328520f3f5",
    "filename": "buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMTestTask.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMTestTask.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMTestTask.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMTestTask.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -38,7 +38,6 @@\n \t * Initializes the task.\n \t * \n \t * @param __executor The executor for the task.\n-\t * @param __execFactory This is a work around to use internal executions\n \t * for specifications needed to spawn VMs within workers.\n \t * @param __sourceSet The source set to use.\n \t * @param __vmType The virtual machine type."
  },
  {
    "sha": "3a86cc8e5954bd6c7540e02efa6ef9bd6a8fe504",
    "filename": "buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMType.java",
    "status": "modified",
    "additions": 52,
    "deletions": 2,
    "changes": 54,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMType.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMType.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/buildSrc/src/main/java/cc/squirreljme/plugin/multivm/VMType.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -28,6 +28,7 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import org.gradle.api.Project;\n import org.gradle.api.Task;\n@@ -67,7 +68,8 @@ public void processLibrary(Task __task, boolean __isTest,\n \t\t * @since 2020/08/15\n \t\t */\n \t\t@Override\n-\t\tpublic void spawnJvmArguments(Task __task, JavaExecSpecFiller __execSpec,\n+\t\tpublic void spawnJvmArguments(Task __task,\n+\t\t\tJavaExecSpecFiller __execSpec,\n \t\t\tString __mainClass, Map<String, String> __sysProps,\n \t\t\tPath[] __libPath, Path[] __classPath, String... __args)\n \t\t\tthrows NullPointerException\n@@ -95,6 +97,9 @@ public void spawnJvmArguments(Task __task, JavaExecSpecFiller __execSpec,\n \t\t\t\t\t\temuLib.toString());\n \t\t\t}\n \t\t\t\n+\t\t\t// Bring in any system defined properties we want to truly set?\n+\t\t\tVMType.__copySysProps(sysProps);\n+\t\t\t\n \t\t\t// Start with the base emulator class path\n \t\t\tList<Object> classPath = new ArrayList<>();\n \t\t\tclassPath.add(VMHelpers.projectRuntimeClasspath(\n@@ -376,6 +381,10 @@ public void spawnJvmArguments(Task __task, JavaExecSpecFiller __execSpec,\n \t/* End. */\n \t;\n \t\n+\t/** Prefix for system properties to appear in the VM. */\n+\tprivate static final String _JVM_KEY_PREFIX =\n+\t\t\"squirreljme.sysprop.\";\n+\t\n \t/** The proper name of the VM. */\n \tpublic final String properName;\n \t\n@@ -506,6 +515,12 @@ public void spawnVmViaFactory(Task __task, JavaExecSpecFiller __execSpec,\n \t\t\t__args == null)\n \t\t\tthrow new NullPointerException(\"NARG\");\n \t\t\n+\t\t// Copy system properties\n+\t\tMap<String, String> sysProps = new LinkedHashMap<>(__sysProps);\n+\t\t\n+\t\t// Bring in any system defined properties we want to truly set?\n+\t\tVMType.__copySysProps(sysProps);\n+\t\t\n \t\t// Determine the class-path for the emulator\n \t\tList<Path> vmClassPath = new ArrayList<>();\n \t\tfor (File file : VMHelpers.projectRuntimeClasspath(\n@@ -529,6 +544,11 @@ public void spawnVmViaFactory(Task __task, JavaExecSpecFiller __execSpec,\n \t\t// Add library paths, suites that are available for consumption\n \t\tvmArgs.add(\"-Xlibraries:\" + VMHelpers.classpathAsString(__libPath));\n \t\t\n+\t\t// Enable JDWP debugging?\n+\t\tString jdwpProp = System.getProperty(\"squirreljme.jdwp\");\n+\t\tif (jdwpProp != null)\n+\t\t\tvmArgs.add(\"-Xjdwp:\" + jdwpProp);\n+\t\t\n \t\t// Determine where profiler snapshots are to go, try to use the\n \t\t// profiler directory for that\n \t\tPath profilerDir = ((__task instanceof VMExecutableTask) ?\n@@ -550,7 +570,7 @@ public void spawnVmViaFactory(Task __task, JavaExecSpecFiller __execSpec,\n \t\tvmArgs.add(VMHelpers.classpathAsString(__classPath));\n \t\t\n \t\t// Any system properties\n-\t\tfor (Map.Entry<String, String> sysProp : __sysProps.entrySet())\n+\t\tfor (Map.Entry<String, String> sysProp : sysProps.entrySet())\n \t\t\tvmArgs.add(\"-D\" + sysProp.getKey() + \"=\" + sysProp.getValue());\n \t\t\n \t\t// Main class of the target to run\n@@ -595,4 +615,34 @@ public String vmName(VMNameFormat __format)\n \t\t\t\treturn properName;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Copies system properties with the given prefix into the system\n+\t * properties for the VM.\n+\t * \n+\t * @param __sysProps The system properties to copy into.\n+\t * @throws NullPointerException On null arguments.\n+\t * @since 2021/03/08\n+\t */\n+\tprivate static void __copySysProps(Map<String, String> __sysProps)\n+\t\tthrows NullPointerException\n+\t{\n+\t\tif (__sysProps == null)\n+\t\t\tthrow new NullPointerException(\"NARG\");\n+\t\t\n+\t\t// Copy any that are set\n+\t\tfor (Map.Entry<Object, Object> prop :\n+\t\t\tSystem.getProperties().entrySet())\n+\t\t{\n+\t\t\t// Only match certain keys\n+\t\t\tString baseKey = Objects.toString(prop.getKey());\n+\t\t\tif (!baseKey.startsWith(VMType._JVM_KEY_PREFIX))\n+\t\t\t\tcontinue;\n+\t\t\t\n+\t\t\t// Add it in\n+\t\t\t__sysProps.put(\n+\t\t\t\tbaseKey.substring(VMType._JVM_KEY_PREFIX.length()),\n+\t\t\t\tObjects.toString(prop.getValue()));\n+\t\t}\n+\t}\n }"
  },
  {
    "sha": "f508f029ecd7d0b2710ab605d64cfabf0b41de26",
    "filename": "building.mkd",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/building.mkd",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/building.mkd",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/building.mkd?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -192,6 +192,11 @@ is not able to reliably test within SquirrelJME.\n \n The following _System_ properties are available:\n \n+ * `squirreljme.jdwp=[hostname]:port` -- Enable JDWP.\n+   * Enables JDWP for the given virtual machine.\n+   * If only `:port` is specified it will listen for incoming connections from\n+     a debugger.\n+   * If both `hostname:port` is specified it will connect to a remote debugger.\n  * `squirreljme.midlet=value` -- The MIDlet to run, in the following order:\n    * If `value` is a number and is `-1`, then no MIDlet will be selected and\n      the `Main-Class` attribute will be force selected.\n@@ -201,8 +206,14 @@ The following _System_ properties are available:\n      with a matching case-insensitive title. \n    * Otherwise if `value` is a string, it will construct a virtual MIDlet\n      which executes the given value as the name of a class within the JAR.\n+ * `squirreljme.sysprop.<systemProperty>=value` -- Add system property.\n+   * This allows any system properties that are prefixed with this to be\n+     added into the target virtual machine when running.\n+   * As an example `squirreljme.sysprop.favorite.animal=squirrel`:\n+     * Will define system property `favorite.animal=squirrel` within the\n+       virtual machine.\n  * `test.single=classname` -- Run only the given test:\n-   * Will be the test class to be ran.\n+   * Will be the test class to be run.\n    * Multi-parameter tests are in the form of `classname@parameter`, if a\n      parameter is specified then only that one will be matched. Otherwise\n      this will include all tests of that given parameter."
  },
  {
    "sha": "c36bcf785c043255a6f72b3df8f93c92570d4ebc",
    "filename": "emulators/emulator-base/build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/emulator-base/build.gradle",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/emulator-base/build.gradle",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/emulator-base/build.gradle?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -37,13 +37,15 @@ dependencies\n \tcompileClasspath project(\":modules:io\")\n \tcompileClasspath project(\":modules:tac\")\n \tcompileClasspath project(\":modules:zip\")\n+\tcompileClasspath project(\":modules:debug-jdwp\")\n \n \t// And for run-time to be able to be ran\n \truntimeClasspath project(\":modules:cldc-compact\")\n \truntimeClasspath project(\":modules:common-vm\")\n \truntimeClasspath project(\":modules:io\")\n \truntimeClasspath project(\":modules:tac\")\n \truntimeClasspath project(\":modules:zip\")\n+\truntimeClasspath project(\":modules:debug-jdwp\")\n }\n \n // We need the native library in the JAR before we can properly use it"
  },
  {
    "sha": "52f9497eee6196d3fecaaf7595ee5d5633c0b69e",
    "filename": "emulators/emulator-base/src/main/java/cc/squirreljme/emulator/vm/VMFactory.java",
    "status": "modified",
    "additions": 89,
    "deletions": 6,
    "changes": 95,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/emulator-base/src/main/java/cc/squirreljme/emulator/vm/VMFactory.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/emulator-base/src/main/java/cc/squirreljme/emulator/vm/VMFactory.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/emulator-base/src/main/java/cc/squirreljme/emulator/vm/VMFactory.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -11,6 +11,8 @@\n package cc.squirreljme.emulator.vm;\n \n import cc.squirreljme.emulator.profiler.ProfilerSnapshot;\n+import cc.squirreljme.jdwp.JDWPController;\n+import cc.squirreljme.jdwp.JDWPFactory;\n import cc.squirreljme.runtime.cldc.Poking;\n import cc.squirreljme.runtime.cldc.debug.Debugging;\n import cc.squirreljme.vm.JarClassLibrary;\n@@ -20,6 +22,8 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -71,6 +75,7 @@ public VMFactory(String __name)\n \t * Creates the virtual machine using the given parameters.\n \t *\n \t * @param __ps The profiler snapshot to write to.\n+\t * @param __jdwp\n \t * @param __sm The suite manager.\n \t * @param __cp The classpath to initialize with.\n \t * @param __maincl The main class to start executing.\n@@ -83,8 +88,8 @@ public VMFactory(String __name)\n \t * @since 2018/11/17\n \t */\n \tprotected abstract VirtualMachine createVM(ProfilerSnapshot __ps,\n-\t\tVMSuiteManager __sm, VMClassLibrary[] __cp, String __maincl,\n-\t\tMap<String, String> __sprops, String[] __args)\n+\t\tJDWPFactory __jdwp, VMSuiteManager __sm, VMClassLibrary[] __cp,\n+\t\tString __maincl, Map<String, String> __sprops, String[] __args)\n \t\tthrows IllegalArgumentException, NullPointerException, VMException;\n \t\n \t/**\n@@ -108,15 +113,23 @@ public static void main(String... __args)\n \t\t// There always is a profiler being run, just differs if we save it\n \t\tProfilerSnapshot profilerSnapshot = new ProfilerSnapshot();\n \t\t\n+\t\t// Is JDWP being used?\n+\t\tJDWPController jdwp = null;\n+\t\t\n \t\t// Determine the path separator character\n \t\tString sepString = System.getProperty(\"path.separator\");\n \t\tchar sepChar = (sepString == null || sepString.isEmpty() ? ':' :\n \t\t\tsepString.charAt(0));\n \t\t\n+\t\t// Debugging host and port, if enabled\n+\t\tString jdwpHost = null; \n+\t\tint jdwpPort = -1;\n+\t\t\n \t\t// Command line format is:\n \t\t// -Xemulator:(vm)\n \t\t// -Xsnapshot:(path-to-nps)\n \t\t// -Xlibraries:(class:path:...)\n+\t\t// -Xjdwp:[hostname]:port\n \t\t// -Dsysprop=value\n \t\t// -classpath (class:path:...)\n \t\t// Main-class\n@@ -132,8 +145,25 @@ public static void main(String... __args)\n \t\t\t// Eat it up\n \t\t\tqueue.removeFirst();\n \t\t\t\n+\t\t\t// JDWP Usage\n+\t\t\tif (item.startsWith(\"-Xjdwp:\"))\n+\t\t\t{\n+\t\t\t\tString hostPort = item.substring(\"-Xjdwp:\".length());\n+\t\t\t\t\n+\t\t\t\t// Figure the hostname/port split\n+\t\t\t\tint lastCol = hostPort.lastIndexOf(':');\n+\t\t\t\tif (lastCol < 0)\n+\t\t\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\t\t\"Expected %s to be like -Xjdwp:[hostname]:port.\",\n+\t\t\t\t\t\titem));\n+\t\t\t\t\n+\t\t\t\t// Split hostname and port\n+\t\t\t\tjdwpHost = hostPort.substring(0, lastCol);\n+\t\t\t\tjdwpPort = Integer.parseInt(hostPort.substring(lastCol + 1));\n+\t\t\t}\n+\t\t\t\n \t\t\t// Select a VM\n-\t\t\tif (item.startsWith(\"-Xemulator:\"))\n+\t\t\telse if (item.startsWith(\"-Xemulator:\"))\n \t\t\t\tvmName = item.substring(\"-Xemulator:\".length());\n \t\t\t\n \t\t\t// VisualVM Snapshot Dump path\n@@ -269,6 +299,8 @@ else if (item.equals(\"-classpath\") || item.equals(\"-cp\"))\n \t\t\t// Run the VM\n \t\t\tVirtualMachine vm = VMFactory.mainVm(vmName,\n \t\t\t\tprofilerSnapshot,\n+\t\t\t\t(jdwpPort >= 1 ?\n+\t\t\t\t\tVMFactory.__setupJdwp(jdwpHost, jdwpPort) : null),\n \t\t\t\tnew ArraySuiteManager(suites.values()),\n \t\t\t\tclasspath.<String>toArray(new String[classpath.size()]),\n \t\t\t\tmainClass,\n@@ -319,6 +351,7 @@ else if (item.equals(\"-classpath\") || item.equals(\"-cp\"))\n \t * @param __vm The name of the virtual machine to use, if {@code null}\n \t * then this is automatically determined.\n \t * @param __ps The profiler snapshot to use.\n+\t * @param __jdwp\n \t * @param __sm The suite manager used.\n \t * @param __cp The starting class path.\n \t * @param __bootcl The booting class, if {@code null} then {@code __bootid}\n@@ -332,8 +365,8 @@ else if (item.equals(\"-classpath\") || item.equals(\"-cp\"))\n \t * @throws VMException If the virtual machine failed to initialize.\n \t * @since 2018/11/17\n \t */\n-\tpublic static VirtualMachine mainVm(String __vm,\n-\t\tProfilerSnapshot __ps, VMSuiteManager __sm, String[] __cp,\n+\tpublic static VirtualMachine mainVm(String __vm, ProfilerSnapshot __ps,\n+\t\tJDWPFactory __jdwp, VMSuiteManager __sm, String[] __cp,\n \t\tString __bootcl, Map<String, String> __sprops, String... __args)\n \t\tthrows IllegalArgumentException, NullPointerException, VMException\n \t{\n@@ -398,7 +431,7 @@ public static VirtualMachine mainVm(String __vm,\n \t\t}\n \t\t\n \t\t// Create the virtual machine now that everything is available\n-\t\treturn factory.createVM(__ps, __sm, classpath, __bootcl,\n+\t\treturn factory.createVM(__ps, __jdwp, __sm, classpath, __bootcl,\n \t\t\t__sprops, __args);\n \t}\n \t\n@@ -551,4 +584,54 @@ private static String __normalizeName(String __name)\n \t\t// Use this name\n \t\treturn __name.toLowerCase() + \".jar\";\n \t}\n+\t\n+\t/**\n+\t * Sets up JDWP stream for connection.\n+\t * \n+\t * @param __host The hostname to use, if {@code null} this will be\n+\t * a server.\n+\t * @param __port The port to listen on.\n+\t * @since 2021/03/08\n+\t */\n+\tprivate static JDWPFactory __setupJdwp(String __host, int __port)\n+\t{\n+\t\t// Listening?\n+\t\tif (__host == null)\n+\t\t{\n+\t\t\tthrow Debugging.todo();\n+\t\t}\n+\t\t\n+\t\t// Try opening the socket\n+\t\tSocket socket = null;\n+\t\ttry\n+\t\t{\n+\t\t\t// Create socket\n+\t\t\tif (__host == null || __host.isEmpty())\n+\t\t\t\tsocket = new ServerSocket(__port).accept();\n+\t\t\telse\n+\t\t\t\tsocket = new Socket(__host, __port);\n+\t\t\t\n+\t\t\t// Use factory to create it\n+\t\t\treturn new JDWPFactory(socket.getInputStream(),\n+\t\t\t\tsocket.getOutputStream());\n+\t\t}\n+\t\t\n+\t\t// Could not open the socket?\n+\t\tcatch (IOException e)\n+\t\t{\n+\t\t\t// Close the socket or try to\n+\t\t\tif (socket != null)\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\tsocket.close();\n+\t\t\t\t}\n+\t\t\t\tcatch (IOException f)\n+\t\t\t\t{\n+\t\t\t\t\te.addSuppressed(f);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\tthrow new RuntimeException(String.format(\n+\t\t\t\t\"Could not open JDWP socket: %s:%d\", __host, __port), e);\n+\t\t}\n+\t}\n }"
  },
  {
    "sha": "4fe4a76e42bc1f796d1aae55fb4f2414850c6038",
    "filename": "emulators/springcoat-vm/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/build.gradle",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/build.gradle",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/build.gradle?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -16,6 +16,7 @@ dependencies\n \tapi project(\":modules:meep-swm\")\n \tapi project(\":modules:tool-classfile\")\n \tapi project(\":modules:tool-manifest-reader\")\n+\tapi project(\":modules:debug-jdwp\")\n }\n \n java"
  },
  {
    "sha": "eb02ca72b8c9726136ba34950f9b132b8613c3eb",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/AbstractGhostObject.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/AbstractGhostObject.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/AbstractGhostObject.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/AbstractGhostObject.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -9,7 +9,9 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPClass;\n import cc.squirreljme.jvm.mle.annotation.GhostObject;\n+import cc.squirreljme.runtime.cldc.debug.Debugging;\n import cc.squirreljme.vm.springcoat.brackets.RefLinkHolder;\n import cc.squirreljme.vm.springcoat.exceptions.SpringVirtualMachineException;\n \n@@ -41,6 +43,26 @@ public AbstractGhostObject(Class<?> __rep)\n \t\tthis.represents = __rep;\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2020/05/30\n+\t */\n+\t@Override\n+\tpublic final int debuggerId()\n+\t{\n+\t\treturn System.identityHashCode(this);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2020/05/30\n+\t */\n+\t@Override\n+\tpublic final JDWPClass debuggerClass()\n+\t{\n+\t\tthrow Debugging.todo();\n+\t}\n+\t\n \t/**\n \t * {@inheritDoc}\n \t * @since 2020/05/30"
  },
  {
    "sha": "68083c36c260f44425e839d477cb984d09de5ffd",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLERuntime.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLERuntime.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLERuntime.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLERuntime.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -202,16 +202,16 @@ public Object handle(SpringThreadWorker __thread, Object... __args)\n \t\t\t\t\treturn \"xer@multiphasicapps.net\";\n \t\t\t\t\t\n \t\t\t\tcase VMDescriptionType.VM_NAME:\n-\t\t\t\t\treturn \"SquirrelJME SpringCoat\";\n+\t\t\t\t\treturn __thread.machine.tasks.vmName();\n+\t\t\t\t\n+\t\t\t\tcase VMDescriptionType.VM_VERSION:\n+\t\t\t\t\treturn __thread.machine.tasks.vmVersion();\n \t\t\t\t\n \t\t\t\tcase VMDescriptionType.VM_URL:\n \t\t\t\t\treturn \"https://squirreljme.cc/\";\n \t\t\t\t\t\n \t\t\t\tcase VMDescriptionType.VM_VENDOR:\n \t\t\t\t\treturn \"Stephanie Gawroriski\";\n-\t\t\t\t\n-\t\t\t\tcase VMDescriptionType.VM_VERSION:\n-\t\t\t\t\treturn SquirrelJME.RUNTIME_VERSION;\n \t\t\t}\n \t\t\t\n \t\t\treturn null;"
  },
  {
    "sha": "3d29bade4f30d890cb7039c822ae2b58d8b760b2",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLETask.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLETask.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLETask.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLETask.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -274,7 +274,7 @@ public Object handle(SpringThreadWorker __thread, Object... __args)\n \t\t\t// Spawn the task\n \t\t\treturn new TaskObject(__thread.machine.taskManager().startTask(\n \t\t\t\tclasspath, mainClass, mainArgs, sysPropsMap, stdOutMode,\n-\t\t\t\tstdErrMode, true));\n+\t\t\t\tstdErrMode, true, false));\n \t\t}\n \t},\n \t"
  },
  {
    "sha": "4d670a4909ad03e34ca1ef764ff892cf568e468f",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLEThread.java",
    "status": "modified",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLEThread.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLEThread.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/MLEThread.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -9,10 +9,13 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPController;\n import cc.squirreljme.jvm.mle.ThreadShelf;\n import cc.squirreljme.jvm.mle.brackets.TracePointBracket;\n import cc.squirreljme.jvm.mle.brackets.VMThreadBracket;\n+import cc.squirreljme.jvm.mle.constants.ThreadStatusType;\n import cc.squirreljme.runtime.cldc.debug.CallTraceElement;\n+import cc.squirreljme.runtime.cldc.debug.Debugging;\n import cc.squirreljme.vm.springcoat.brackets.VMThreadObject;\n import cc.squirreljme.vm.springcoat.exceptions.SpringMLECallError;\n import net.multiphasicapps.classfile.ClassName;\n@@ -130,6 +133,23 @@ public Object handle(SpringThreadWorker __thread, Object... __args)\n \t\t\ttarget.setThreadInstance(javaThread);\n \t\t\ttarget.setVMThread(vmThread);\n \t\t\t\n+\t\t\t// If we are debugging, we are going to need to tell the debugger\n+\t\t\t// some important details\n+\t\t\tJDWPController jdwp = target.machineRef.get()\n+\t\t\t\t.taskManager().jdwpController;\n+\t\t\tif (jdwp != null)\n+\t\t\t{\n+\t\t\t\t// If we are debugging, we need to tell the debugger that the\n+\t\t\t\t// virtual machine actually started\n+\t\t\t\tif (target.machine().rootVm && target.isMain())\n+\t\t\t\t\tjdwp.signalVmStart(target);\n+\t\t\t\t\n+\t\t\t\t// If we are debugging, signal that this thread is in the start\n+\t\t\t\t// state. We need the instance to have been set for this to\n+\t\t\t\t// even properly work!\n+\t\t\t\tjdwp.signalThreadState(target, true);\n+\t\t\t}\n+\t\t\t\n \t\t\treturn vmThread;\n \t\t}\n \t},\n@@ -248,6 +268,7 @@ public Object handle(SpringThreadWorker __thread, Object... __args)\n \t\t\tMLEThread.__javaThread(__thread, __args[0]).fieldByNameAndType(\n \t\t\t\tfalse, \"_isAlive\", \"Z\")\n \t\t\t\t.set((int)__args[1] != 0);\n+\t\t\t\n \t\t\treturn null;\n \t\t}\n \t},\n@@ -368,12 +389,17 @@ public Object handle(SpringThreadWorker __thread, Object... __args)\n \t\t\telse\n \t\t\t\ttry\n \t\t\t\t{\n+\t\t\t\t\t__thread.thread.setStatus(ThreadStatusType.SLEEPING);\n \t\t\t\t\tThread.sleep(ms, ns);\n \t\t\t\t}\n \t\t\t\tcatch (InterruptedException ignored)\n \t\t\t\t{\n \t\t\t\t\treturn true;\n \t\t\t\t}\n+\t\t\t\tfinally\n+\t\t\t\t{\n+\t\t\t\t\t__thread.thread.setStatus(ThreadStatusType.RUNNING);\n+\t\t\t\t}\n \t\t\t\n \t\t\treturn false;\n \t\t}\n@@ -415,6 +441,29 @@ public Object handle(SpringThreadWorker __thread, Object... __args)\n \t\t}\n \t},\n \t\n+\t/** {@link ThreadShelf#vmThreadEnd(VMThreadBracket)}. */\n+\tVM_THREAD_END(\"vmThreadEnd:(Lcc/squirreljme/jvm/mle/brackets/\" +\n+\t\t\"VMThreadBracket;)V\")\n+\t{\n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t * @since 2021/03/14\n+\t\t */\n+\t\t@Override\n+\t\tpublic Object handle(SpringThreadWorker __thread, Object... __args)\n+\t\t{\n+\t\t\tSpringThread thread = MLEThread.__vmThread(__args[0]).getThread();\n+\t\t\t\n+\t\t\t// If debugging, signal that the thread has ended\n+\t\t\tJDWPController jdwp = thread.machineRef.get()\n+\t\t\t\t.taskManager().jdwpController;\n+\t\t\tif (jdwp != null)\n+\t\t\t\tjdwp.signalThreadState(thread, false);\n+\t\t\t\n+\t\t\treturn null;\n+\t\t}\n+\t},\n+\t\n \t/** {@link ThreadShelf#vmThreadId(VMThreadBracket)}. */\n \tVM_THREAD_ID(\"vmThreadId:(Lcc/squirreljme/jvm/mle/brackets/\" +\n \t\t\"VMThreadBracket;)I\")"
  },
  {
    "sha": "e01e4ea3cb661872a8c515cc01f7f69da5862782",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringArrayObject.java",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringArrayObject.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringArrayObject.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringArrayObject.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -10,6 +10,7 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPClass;\n import cc.squirreljme.vm.springcoat.brackets.RefLinkHolder;\n import cc.squirreljme.vm.springcoat.exceptions.SpringArrayIndexOutOfBoundsException;\n import cc.squirreljme.vm.springcoat.exceptions.SpringArrayStoreException;\n@@ -116,6 +117,26 @@ public SpringArrayObject(SpringClass __self, int __l)\n \tpublic abstract void set(int __dx, Object __v)\n \t\tthrows SpringArrayStoreException, SpringArrayIndexOutOfBoundsException;\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2020/05/30\n+\t */\n+\t@Override\n+\tpublic final int debuggerId()\n+\t{\n+\t\treturn System.identityHashCode(this);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2020/05/30\n+\t */\n+\t@Override\n+\tpublic final JDWPClass debuggerClass()\n+\t{\n+\t\treturn this.type();\n+\t}\n+\t\n \t/**\n \t * Returns the length of this array.\n \t *"
  },
  {
    "sha": "931f2ea6f3fe28979d35090ea357e6e3ccf1800a",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringClass.java",
    "status": "modified",
    "additions": 197,
    "deletions": 3,
    "changes": 200,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringClass.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringClass.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringClass.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -10,13 +10,20 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPClass;\n+import cc.squirreljme.jdwp.JDWPClassType;\n+import cc.squirreljme.jdwp.JDWPField;\n+import cc.squirreljme.jdwp.JDWPMethod;\n+import cc.squirreljme.jdwp.JDWPObjectLike;\n import cc.squirreljme.jvm.Constants;\n import cc.squirreljme.vm.VMClassLibrary;\n import cc.squirreljme.vm.springcoat.exceptions.SpringClassFormatException;\n import cc.squirreljme.vm.springcoat.exceptions.SpringIncompatibleClassChangeException;\n import cc.squirreljme.vm.springcoat.exceptions.SpringNoSuchFieldException;\n import cc.squirreljme.vm.springcoat.exceptions.SpringNoSuchMethodException;\n+import cc.squirreljme.vm.springcoat.exceptions.SpringNullPointerException;\n import cc.squirreljme.vm.springcoat.exceptions.SpringVirtualMachineException;\n+import java.lang.ref.Reference;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -28,6 +35,7 @@\n import net.multiphasicapps.classfile.FieldDescriptor;\n import net.multiphasicapps.classfile.FieldName;\n import net.multiphasicapps.classfile.FieldNameAndType;\n+import net.multiphasicapps.classfile.FieldReference;\n import net.multiphasicapps.classfile.HasAccessibleFlags;\n import net.multiphasicapps.classfile.Method;\n import net.multiphasicapps.classfile.MethodDescriptor;\n@@ -42,7 +50,7 @@\n  * @since 2018/07/21\n  */\n public final class SpringClass\n-\timplements HasAccessibleFlags\n+\timplements HasAccessibleFlags, JDWPClass\n {\n \t/** The name of this class. */\n \tprotected final ClassName name;\n@@ -86,6 +94,9 @@\n \t/** The table of fields defined in this class, includes super classes. */\n \tprivate final SpringField[] _fieldtable;\n \t\n+\t/** The class loader which loaded this class. */\n+\tprivate final Reference<SpringClassLoader> _classLoader;\n+\t\n \t/** Has this class been initialized? */\n \tprivate volatile boolean _initialized;\n \t\n@@ -97,14 +108,16 @@\n \t * @param __cf The class file for this class.\n \t * @param __ct The component type.\n \t * @param __inJar The JAR this class is in.\n+\t * @param __loader The class loader which loaded this class.\n \t * @throws NullPointerException On null arguments.\n \t * @since 2018/07/21\n \t */\n \tSpringClass(SpringClass __super, SpringClass[] __interfaces,\n-\t\tClassFile __cf, SpringClass __ct, VMClassLibrary __inJar)\n+\t\tClassFile __cf, SpringClass __ct, VMClassLibrary __inJar,\n+\t\tReference<SpringClassLoader> __loader)\n \t\tthrows NullPointerException\n \t{\n-\t\tif (__interfaces == null || __cf == null)\n+\t\tif (__interfaces == null || __cf == null || __loader == null)\n \t\t\tthrow new NullPointerException(\"NARG\");\n \t\t\n \t\tClassName name = __cf.thisName();\n@@ -114,6 +127,7 @@\n \t\tthis.superclass = __super;\n \t\tthis.component = __ct;\n \t\tthis.dimensions = name.dimensions();\n+\t\tthis._classLoader = __loader;\n \t\t\n \t\t// Check\n \t\tthis._interfaceclasses = (__interfaces = __interfaces.clone());\n@@ -234,6 +248,29 @@\n \t\t\tmethods.size());*/\n \t}\n \t\n+\t/**\n+\t * Returns the class loader which loaded this class.\n+\t * \n+\t * @return The class loader which loaded this.\n+\t * @throws IllegalStateException If it was not set or GCed.\n+\t * @since 2021/03/15\n+\t */\n+\tpublic final SpringClassLoader classLoader()\n+\t\tthrows IllegalStateException\n+\t{\n+\t\tsynchronized (this)\n+\t\t{\n+\t\t\tif (this._classLoader == null)\n+\t\t\t\tthrow new IllegalStateException(\"Owner not set.\");\n+\t\t\t\n+\t\t\tSpringClassLoader rv = this._classLoader.get();\n+\t\t\tif (rv == null)\n+\t\t\t\tthrow new IllegalStateException(\"Owner GCed.\");\n+\t\t\t\n+\t\t\treturn rv;\n+\t\t}\n+\t}\n+\t\n \t/**\n \t * Returns the component type of this class.\n \t *\n@@ -245,6 +282,163 @@ public final SpringClass componentType()\n \t\treturn this.component;\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic String debuggerBinaryName()\n+\t{\n+\t\treturn this.name.toString();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic JDWPClass debuggerClass()\n+\t{\n+\t\treturn this;\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic JDWPClassType debuggerClassType()\n+\t{\n+\t\tif (this.flags().isInterface())\n+\t\t\treturn JDWPClassType.INTERFACE;\n+\t\t\n+\t\tif (this.name.isArray())\n+\t\t\treturn JDWPClassType.ARRAY;\n+\t\t\n+\t\treturn JDWPClassType.CLASS;\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic int debuggerId()\n+\t{\n+\t\treturn System.identityHashCode(this);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic String debuggerFieldDescriptor()\n+\t{\n+\t\treturn this.name.field().toString();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/15\n+\t */\n+\t@Override\n+\tpublic JDWPField[] debuggerFields()\n+\t{\n+\t\tList<JDWPField> result = new ArrayList<>(this._fields.values());\n+\t\treturn result.<JDWPField>toArray(new JDWPField[result.size()]);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/15\n+\t */\n+\t@Override\n+\tpublic Object debuggerFieldValue(JDWPObjectLike __obj, JDWPField __field)\n+\t{\n+\t\tSpringField field = (SpringField)__field;\n+\t\t\n+\t\t// Static Field\n+\t\tif (field.isStatic())\n+\t\t{\n+\t\t\tSpringFieldStorage storage;\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tstorage = this.classLoader().machine()\n+\t\t\t\t\t.lookupStaticField(field);\n+\t\t\t}\n+\t\t\tcatch (SpringVirtualMachineException ignored)\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\t\n+\t\t\t// Read value\n+\t\t\treturn storage.get();\n+\t\t}\n+\t\t\n+\t\t// Non-static field\n+\t\telse\n+\t\t{\n+\t\t\t// If not an object ignore\n+\t\t\tif (!(__obj instanceof SpringSimpleObject))\n+\t\t\t\treturn null;\n+\t\t\t\n+\t\t\t// Read the value\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\treturn ((SpringSimpleObject)__obj)\n+\t\t\t\t\t.fieldByIndex(field.index()).get();\n+\t\t\t}\n+\t\t\t\n+\t\t\t// Could not read the value\n+\t\t\tcatch (SpringVirtualMachineException ignored)\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic JDWPClass[] debuggerInterfaceClasses()\n+\t{\n+\t\treturn this.interfaceClasses();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic JDWPMethod[] debuggerMethods()\n+\t{\n+\t\tList<JDWPMethod> result = new ArrayList<>(this._methods.values());\n+\t\treturn result.<JDWPMethod>toArray(new JDWPMethod[result.size()]);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic String debuggerSourceFile()\n+\t{\n+\t\treturn this.file.sourceFile();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic JDWPClass debuggerSuperClass()\n+\t{\n+\t\treturn this.superclass;\n+\t}\n+\t\n \t/**\n \t * Returns the number of array dimensions.\n \t *"
  },
  {
    "sha": "dc71cf19f48bc72e49cefa070bc74fbf4bf24c1f",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringClassLoader.java",
    "status": "modified",
    "additions": 73,
    "deletions": 1,
    "changes": 74,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringClassLoader.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringClassLoader.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringClassLoader.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -18,6 +18,9 @@\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n import net.multiphasicapps.classfile.ClassFile;\n@@ -43,6 +46,13 @@\n \tprivate final Map<ClassName, SpringClass> _classes =\n \t\tnew HashMap<>();\n \t\n+\t/** Reference to self. */\n+\tprivate final Reference<SpringClassLoader> _machineRef =\n+\t\tnew WeakReference<>(this);\n+\t\n+\t/** Reference to the machine owning this. */\n+\tprivate volatile Reference<SpringMachine> _machine;\n+\t\n \t/** Next special class index. */\n \tprivate int _nexcsi =\n \t\t1;\n@@ -183,7 +193,7 @@ public final SpringClass loadClass(ClassName __cn)\n \t\t\t\n \t\t\t// Load class information\n \t\t\trv = new SpringClass(superclass, interfaceclasses, cf,\n-\t\t\t\tcomponent, inJar[0]);\n+\t\t\t\tcomponent, inJar[0], this._machineRef);\n \t\t\t\n \t\t\t// Store for later use\n \t\t\tclasses.put(__cn, rv);\n@@ -294,6 +304,45 @@ public final ClassFile loadClassFile(ClassName __cn, VMClassLibrary[] __ij)\n \t\t}\n \t}\n \t\n+\t/**\n+\t * Returns all of the loaded classes.\n+\t * \n+\t * @return All of the loaded virtual machine classes.\n+\t * @since 2021/03/14\n+\t */\n+\tpublic final SpringClass[] loadedClasses()\n+\t{\n+\t\tsynchronized (this.loaderlock)\n+\t\t{\n+\t\t\tCollection<SpringClass> classes = this._classes.values();\n+\t\t\treturn classes.<SpringClass>toArray(\n+\t\t\t\tnew SpringClass[classes.size()]);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Returns the machine that owns this.\n+\t * \n+\t * @return The machine that owns this.\n+\t * @throws IllegalStateException If it was not set or GCed.\n+\t * @since 2021/03/15\n+\t */\n+\tpublic final SpringMachine machine()\n+\t\tthrows IllegalStateException\n+\t{\n+\t\tsynchronized (this)\n+\t\t{\n+\t\t\tif (this._machine == null)\n+\t\t\t\tthrow new IllegalStateException(\"No machine set.\");\n+\t\t\t\n+\t\t\tSpringMachine rv = this._machine.get();\n+\t\t\tif (rv == null)\n+\t\t\t\tthrow new IllegalStateException(\"Owner GCed.\");\n+\t\t\t\n+\t\t\treturn rv;\n+\t\t}\n+\t}\n+\t\n \t/**\n \t * Returns the root library.\n \t * \n@@ -304,5 +353,28 @@ public final VMClassLibrary rootLibrary()\n \t{\n \t\treturn this._classpath[0];\n \t}\n+\t\n+\t/**\n+\t * Binds this class loader to the given machine.\n+\t * \n+\t * @param __machine The machine to bind to.\n+\t * @throws IllegalStateException If this is already bound.\n+\t * @throws NullPointerException On null arguments.\n+\t * @since 2021/03/15\n+\t */\n+\tvoid __bind(SpringMachine __machine)\n+\t\tthrows IllegalStateException, NullPointerException\n+\t{\n+\t\tif (__machine == null)\n+\t\t\tthrow new NullPointerException(\"NARG\");\n+\t\t\n+\t\tsynchronized (this)\n+\t\t{\n+\t\t\tif (null != this._machine)\n+\t\t\t\tthrow new IllegalStateException(\"Classloader already bound.\");\n+\t\t\t\n+\t\t\tthis._machine = new WeakReference<>(__machine);\n+\t\t}\n+\t}\n }\n "
  },
  {
    "sha": "61259f126b5f4b2ae7a563d28f985bed82140e1d",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringCoatFactory.java",
    "status": "modified",
    "additions": 12,
    "deletions": 4,
    "changes": 16,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringCoatFactory.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringCoatFactory.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringCoatFactory.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -10,6 +10,7 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPFactory;\n import cc.squirreljme.jvm.mle.constants.TaskPipeRedirectType;\n import cc.squirreljme.vm.VMClassLibrary;\n import cc.squirreljme.emulator.vm.VMException;\n@@ -43,15 +44,22 @@ public SpringCoatFactory()\n \t */\n \t@Override\n \tprotected VirtualMachine createVM(ProfilerSnapshot __ps,\n-\t\tVMSuiteManager __sm, VMClassLibrary[] __cp, String __maincl,\n-\t\tMap<String, String> __sprops, String[] __args)\n+\t\tJDWPFactory __jdwp, VMSuiteManager __sm,\n+\t\tVMClassLibrary[] __cp, String __maincl, Map<String, String> __sprops,\n+\t\tString[] __args)\n \t\tthrows IllegalArgumentException, NullPointerException, VMException\n \t{\n-\t\t// Create a new instance of the VM\n+\t\t// Setup the main task manager which runs everything\n \t\tSpringTaskManager tm = new SpringTaskManager(__sm, __ps);\n+\t\t\n+\t\t// Bind this to the task manager which is the pure global state\n+\t\tif (__jdwp != null)\n+\t\t\ttm.jdwpController = __jdwp.open(tm); \n+\t\t\n+\t\t// Spawn initial virtual machine task\n \t\treturn tm.startTask(__cp, __maincl, __args, __sprops,\n \t\t\tTaskPipeRedirectType.TERMINAL, TaskPipeRedirectType.TERMINAL,\n-\t\t\tfalse);\n+\t\t\tfalse, true);\n \t}\n }\n "
  },
  {
    "sha": "a02dc3ca46de7a1d28a071d6eec7196f1b7be839",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringField.java",
    "status": "modified",
    "additions": 42,
    "deletions": 1,
    "changes": 43,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringField.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringField.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringField.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -10,6 +10,7 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPField;\n import net.multiphasicapps.classfile.ClassName;\n import net.multiphasicapps.classfile.Field;\n import net.multiphasicapps.classfile.FieldFlags;\n@@ -21,7 +22,7 @@\n  * @since 2018/07/22\n  */\n public final class SpringField\n-\timplements SpringMember\n+\timplements JDWPField, SpringMember\n {\n \t/** The class this technically belongs to. */\n \tprotected final ClassName inclass;\n@@ -67,6 +68,46 @@\n \t\t\tthis.index = -1;\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic int debuggerId()\n+\t{\n+\t\treturn System.identityHashCode(this);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic int debuggerMemberFlags()\n+\t{\n+\t\treturn this.flags().toJavaBits();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic String debuggerMemberName()\n+\t{\n+\t\treturn this.nameAndType().name().toString();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic String debuggerMemberType()\n+\t{\n+\t\treturn this.nameAndType().type().toString();\n+\t}\n+\t\n \t/**\n \t * {@inheritDoc}\n \t * @since 2018/09/09"
  },
  {
    "sha": "ac716ac3870be24d2f4964cee8251f4e01bb5977",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMachine.java",
    "status": "modified",
    "additions": 48,
    "deletions": 4,
    "changes": 52,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMachine.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMachine.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMachine.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -15,14 +15,17 @@\n import cc.squirreljme.emulator.vm.VMResourceAccess;\n import cc.squirreljme.emulator.vm.VMSuiteManager;\n import cc.squirreljme.emulator.vm.VirtualMachine;\n+import cc.squirreljme.jdwp.JDWPController;\n+import cc.squirreljme.jdwp.JDWPThread;\n+import cc.squirreljme.jdwp.JDWPThreadGroup;\n import cc.squirreljme.runtime.cldc.asm.TaskAccess;\n import cc.squirreljme.runtime.cldc.debug.CallTraceElement;\n import cc.squirreljme.runtime.cldc.debug.Debugging;\n-import cc.squirreljme.vm.springcoat.brackets.VMThreadObject;\n import cc.squirreljme.vm.springcoat.exceptions.SpringMachineExitException;\n import cc.squirreljme.vm.springcoat.exceptions.SpringVirtualMachineException;\n import java.io.IOException;\n import java.io.PrintStream;\n+import java.lang.ref.WeakReference;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -44,7 +47,7 @@\n  */\n @SuppressWarnings(\"OverlyCoupledClass\")\n public final class SpringMachine\n-\timplements Runnable, VirtualMachine\n+\timplements JDWPThreadGroup, Runnable, VirtualMachine\n {\n \t/** The class which contains the thread starting point. */\n \tprivate static final ClassName _START_CLASS =\n@@ -93,6 +96,9 @@\n \t/** The virtual machine identifier. */\n \tprotected final String vmId;\n \t\n+\t/** Is this the root virtual machine? */\n+\tprotected final boolean rootVm;\n+\t\n \t/** State for the callback threader. */\n \tprivate final CallbackThreader _cbThreader =\n \t\tnew CallbackThreader();\n@@ -151,19 +157,24 @@\n \t * @param __gs Global system state.\n \t * @param __pipes The terminal pipe manager, may be {@code null} in which\n \t * case it is initialized for the caller.\n+\t * @param __rootVm Is this the root virtual machine?\n \t * @param __args Main entry point arguments.\n \t * @throws NullPointerException On null arguments.\n \t * @since 2018/09/03\n \t */\n \tpublic SpringMachine(VMSuiteManager __sm, SpringClassLoader __cl,\n \t\tSpringTaskManager __tm, String __bootcl, ProfilerSnapshot __profiler,\n \t\tMap<String, String> __sprops, GlobalState __gs,\n-\t\tTerminalPipeManager __pipes, String... __args)\n+\t\tTerminalPipeManager __pipes, boolean __rootVm, String... __args)\n \t\tthrows NullPointerException\n \t{\n \t\tif (__cl == null || __sm == null || __pipes == null)\n \t\t\tthrow new NullPointerException(\"NARG\");\n \t\t\n+\t\t// Bind to this class class loader\n+\t\t__cl.__bind(this);\n+\t\t\n+\t\tthis.rootVm = __rootVm;\n \t\tthis.suites = __sm;\n \t\tthis.classloader = __cl;\n \t\tthis.tasks = __tm;\n@@ -223,7 +234,10 @@ public final SpringThread createThread(String __n, boolean __main)\n \t\t\t// Initialize new thread\n \t\t\tint v;\n \t\t\tSpringThread rv = new SpringThread(\n-\t\t\t\t(v = ++this._nextthreadid), __main,\n+\t\t\t\tnew WeakReference<>(this),\n+\t\t\t\t(v = ++this._nextthreadid),\n+\t\t\t\tthis.tasks.nextThreadId(),\n+\t\t\t\t__main,\n \t\t\t\tusedName,\n \t\t\t\tthis.profiler.measureThread(String.format(\"VM_%s-%d-%s\",\n \t\t\t\tthis.vmId, v, usedName)));\n@@ -237,6 +251,26 @@ public final SpringThread createThread(String __n, boolean __main)\n \t\t}\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic int debuggerId()\n+\t{\n+\t\treturn System.identityHashCode(this);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic JDWPThread[] debuggerThreads()\n+\t{\n+\t\treturn this.getThreads();\n+\t}\n+\t\n \t/**\n \t * Exits the virtual machine.\n \t *\n@@ -700,6 +734,16 @@ public final SpringTaskManager taskManager()\n \t\treturn this.tasks;\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic final String toString()\n+\t{\n+\t\treturn this.vmId;\n+\t}\n+\t\n \t/**\n \t * Splits long to integers.\n \t *"
  },
  {
    "sha": "74400ff93c33cd74cdb15b5ca9cd9326d3a2a04b",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMethod.java",
    "status": "modified",
    "additions": 90,
    "deletions": 1,
    "changes": 91,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMethod.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMethod.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMethod.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -10,6 +10,8 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPMethod;\n+import cc.squirreljme.runtime.cldc.debug.Debugging;\n import net.multiphasicapps.classfile.ByteCode;\n import net.multiphasicapps.classfile.ClassName;\n import net.multiphasicapps.classfile.Method;\n@@ -23,7 +25,7 @@\n  * @since 2018/07/22\n  */\n public final class SpringMethod\n-\timplements SpringMember\n+\timplements JDWPMethod, SpringMember\n {\n \t/** The class this technically belongs to. */\n \tprotected final ClassName inclass;\n@@ -34,6 +36,9 @@\n \t/** The file this method is in. */\n \tprotected final String infile;\n \t\n+\t/** The line table (cached). */\n+\tprivate volatile int[] _lineTable;\n+\t\n \t/**\n \t * Initializes the method representation.\n \t *\n@@ -64,6 +69,90 @@ public final ByteCode byteCode()\n \t\treturn this.method.byteCode();\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic int debuggerId()\n+\t{\n+\t\treturn System.identityHashCode(this);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic int[] debuggerLineTable()\n+\t{\n+\t\t// Pre-cached?\n+\t\tint[] lineTable = this._lineTable;\n+\t\tif (lineTable != null)\n+\t\t\treturn lineTable.clone();\n+\t\t\n+\t\t// If there is no method byte code then ignore\n+\t\tByteCode byteCode = this.method.byteCode();\n+\t\tif (byteCode == null)\n+\t\t\treturn null;\n+\t\t\n+\t\t// Otherwise map each unique address to a line number\n+\t\tint[] addrs = byteCode.validAddresses();\n+\t\tint n = addrs.length;\n+\t\tint[] rv = new int[n];\n+\t\tfor (int i = 0; i < n; i++)\n+\t\t\trv[i] = byteCode.lineOfAddress(addrs[i]);\n+\t\t\n+\t\t// Cache it and return a safe copy of it\n+\t\tthis._lineTable = rv;\n+\t\treturn rv.clone();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/17\n+\t */\n+\t@Override\n+\tpublic long debuggerLocationCount()\n+\t{\n+\t\t// If there is no method byte code then ignore\n+\t\tByteCode byteCode = this.method.byteCode();\n+\t\tif (byteCode == null)\n+\t\t\treturn 0;\n+\t\t\n+\t\treturn byteCode.instructionCount();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic int debuggerMemberFlags()\n+\t{\n+\t\treturn this.flags().toJavaBits();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic String debuggerMemberName()\n+\t{\n+\t\treturn this.name().toString();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic String debuggerMemberType()\n+\t{\n+\t\treturn this.nameAndType().type().toString();\n+\t}\n+\t\n \t/**\n \t * {@inheritDoc}\n \t * @since 2018/09/09"
  },
  {
    "sha": "2fad2aeafc6bb0f6fff9385543279c103d2c1a1f",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMonitor.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMonitor.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMonitor.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringMonitor.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -11,6 +11,7 @@\n package cc.squirreljme.vm.springcoat;\n \n import cc.squirreljme.jvm.mle.constants.MonitorResultType;\n+import cc.squirreljme.jvm.mle.constants.ThreadStatusType;\n import cc.squirreljme.vm.springcoat.exceptions.SpringIllegalMonitorStateException;\n \n /**\n@@ -71,12 +72,18 @@ else if (owner == __t)\n \t\t\t\t\t// Wait for lock to be freed\n \t\t\t\t\ttry\n \t\t\t\t\t{\n+\t\t\t\t\t\t__t.setStatus(ThreadStatusType.MONITOR_WAIT);\n \t\t\t\t\t\tthis.wait();\n \t\t\t\t\t}\n \t\t\t\t\tcatch (InterruptedException e)\n \t\t\t\t\t{\n \t\t\t\t\t\t// Ignore\n \t\t\t\t\t}\n+\t\t\t\t\tfinally\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Go back to the running state\n+\t\t\t\t\t\t__t.setStatus(ThreadStatusType.RUNNING);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t}\n@@ -260,6 +267,9 @@ public final int monitorWait(SpringThread __by, long __ms, int __ns)\n \t\t\t\t\t// Could be interrupted\n \t\t\t\t\ttry\n \t\t\t\t\t{\n+\t\t\t\t\t\t// Start waiting on it\n+\t\t\t\t\t\t__by.setStatus(ThreadStatusType.MONITOR_WAIT);\n+\t\t\t\t\t\t\n \t\t\t\t\t\t// Check if time expired\n \t\t\t\t\t\tif (!waitforever)\n \t\t\t\t\t\t{\n@@ -287,6 +297,12 @@ public final int monitorWait(SpringThread __by, long __ms, int __ns)\n \t\t\t\t\t{\n \t\t\t\t\t\tinterrupted = true;\n \t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t// Go back to the running state\n+\t\t\t\t\tfinally\n+\t\t\t\t\t{\n+\t\t\t\t\t\t__by.setStatus(ThreadStatusType.RUNNING);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}"
  },
  {
    "sha": "2190e3372c0534548347ad0c46225d180fe96163",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringNullObject.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringNullObject.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringNullObject.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringNullObject.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -10,6 +10,8 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPClass;\n+import cc.squirreljme.runtime.cldc.debug.Debugging;\n import cc.squirreljme.vm.springcoat.brackets.RefLinkHolder;\n import cc.squirreljme.vm.springcoat.exceptions.SpringVirtualMachineException;\n \n@@ -34,6 +36,26 @@ private SpringNullObject()\n \t{\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/15\n+\t */\n+\t@Override\n+\tpublic int debuggerId()\n+\t{\n+\t\treturn 0;\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/15\n+\t */\n+\t@Override\n+\tpublic JDWPClass debuggerClass()\n+\t{\n+\t\treturn null;\n+\t}\n+\t\n \t/**\n \t * {@inheritDoc}\n \t * @since 2018/09/15"
  },
  {
    "sha": "a703f763f23c63703bfa924106b73a4d7ced8925",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringObject.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringObject.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringObject.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringObject.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -10,6 +10,7 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPObject;\n import cc.squirreljme.vm.springcoat.brackets.RefLinkHolder;\n \n /**\n@@ -20,6 +21,7 @@\n  * @since 2018/09/08\n  */\n public interface SpringObject\n+\textends JDWPObject\n {\n \t/**\n \t * Returns the monitor for this object."
  },
  {
    "sha": "f7b75c59c07c188568213a0d1e16eadc74948a80",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringSimpleObject.java",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringSimpleObject.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringSimpleObject.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringSimpleObject.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -10,7 +10,9 @@\n \n package cc.squirreljme.vm.springcoat;\n \n+import cc.squirreljme.jdwp.JDWPClass;\n import cc.squirreljme.vm.springcoat.brackets.RefLinkHolder;\n+import cc.squirreljme.vm.springcoat.exceptions.SpringVirtualMachineException;\n import java.lang.ref.Reference;\n import java.lang.ref.WeakReference;\n \n@@ -66,6 +68,26 @@ public SpringSimpleObject(SpringClass __cl)\n \t\t\tfields[i++] = new SpringFieldStorage(f);\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2020/05/30\n+\t */\n+\t@Override\n+\tpublic final int debuggerId()\n+\t{\n+\t\treturn System.identityHashCode(this);\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2020/05/30\n+\t */\n+\t@Override\n+\tpublic final JDWPClass debuggerClass()\n+\t{\n+\t\treturn this.type();\n+\t}\n+\t\n \t/**\n \t * Returns the field by the given field.\n \t *\n@@ -92,7 +114,15 @@ public final SpringFieldStorage fieldByField(SpringField __f)\n \t */\n \tpublic final SpringFieldStorage fieldByIndex(int __dx)\n \t{\n-\t\treturn this._fields[__dx];\n+\t\ttry\n+\t\t{\n+\t\t\treturn this._fields[__dx];\n+\t\t}\n+\t\tcatch (IndexOutOfBoundsException e)\n+\t\t{\n+\t\t\tthrow new SpringVirtualMachineException(\n+\t\t\t\t\"Invalid field index: \" + __dx, e);\n+\t\t}\n \t}\n \t\n \t/**"
  },
  {
    "sha": "0109f421c6d3d281f0bd0197be9ff74facda30db",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringTaskManager.java",
    "status": "modified",
    "additions": 122,
    "deletions": 2,
    "changes": 124,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringTaskManager.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringTaskManager.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringTaskManager.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -13,11 +13,22 @@\n import cc.squirreljme.emulator.profiler.ProfilerSnapshot;\n import cc.squirreljme.emulator.terminal.TerminalPipeManager;\n import cc.squirreljme.emulator.vm.VMSuiteManager;\n+import cc.squirreljme.jdwp.JDWPBinding;\n+import cc.squirreljme.jdwp.JDWPClass;\n+import cc.squirreljme.jdwp.JDWPController;\n+import cc.squirreljme.jdwp.JDWPLinker;\n+import cc.squirreljme.jdwp.JDWPState;\n+import cc.squirreljme.jdwp.JDWPThread;\n+import cc.squirreljme.jdwp.JDWPThreadGroup;\n+import cc.squirreljme.jdwp.JDWPUpdateWhat;\n import cc.squirreljme.jvm.mle.constants.StandardPipeType;\n+import cc.squirreljme.runtime.cldc.SquirrelJME;\n+import cc.squirreljme.runtime.cldc.debug.Debugging;\n import cc.squirreljme.vm.VMClassLibrary;\n import java.lang.ref.Reference;\n import java.lang.ref.ReferenceQueue;\n import java.lang.ref.WeakReference;\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -32,6 +43,7 @@\n  * @since 2018/11/04\n  */\n public final class SpringTaskManager\n+\timplements JDWPBinding\n {\n \t/** The manager for suites. */\n \tprotected final VMSuiteManager suites;\n@@ -50,6 +62,12 @@\n \tprivate final Collection<Reference<SpringMachine>> _machines =\n \t\tnew LinkedList<>();\n \t\n+\t/** Controller for JDWP Connections. */\n+\tprotected JDWPController jdwpController;\n+\t\n+\t/** Next thread ID, for debugging. */\n+\tprivate volatile int _nextThreadId;\n+\t\n \t/**\n \t * Initializes the task manager.\n \t *\n@@ -69,6 +87,77 @@ public SpringTaskManager(VMSuiteManager __sm, ProfilerSnapshot __ps)\n \t\tthis.globalState = new GlobalState();\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic String[] debuggerLibraries()\n+\t{\n+\t\treturn this.suites.listLibraryNames();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic void debuggerUpdate(JDWPState __state, JDWPUpdateWhat... __what)\n+\t{\n+\t\tfor (JDWPUpdateWhat what : __what)\n+\t\t\tswitch (what)\n+\t\t\t{\n+\t\t\t\t\t// Loaded classes\n+\t\t\t\tcase LOADED_CLASSES:\n+\t\t\t\t\t{\n+\t\t\t\t\t\tJDWPLinker<JDWPClass> classes =\n+\t\t\t\t\t\t\t__state.classes;\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\tfor (SpringMachine machine : this.tasks())\n+\t\t\t\t\t\t\tfor (SpringClass cl :\n+\t\t\t\t\t\t\t\tmachine.classLoader().loadedClasses())\n+\t\t\t\t\t\t\t\tclasses.put(cl);\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t\t\n+\t\t\t\t\t// Thread groups\n+\t\t\t\tcase THREAD_GROUPS:\n+\t\t\t\t\t{\n+\t\t\t\t\t\tJDWPLinker<JDWPThreadGroup> threadGroups =\n+\t\t\t\t\t\t\t__state.threadGroups;\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tfor (SpringMachine machine : this.tasks())\n+\t\t\t\t\t\t\tthreadGroups.put(machine);\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\t\t\n+\t\t\t\t\t// Threads\n+\t\t\t\tcase THREADS:\n+\t\t\t\t\t{\n+\t\t\t\t\t\tJDWPLinker<JDWPThread> threads = __state.threads;\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tfor (SpringMachine machine : this.tasks())\n+\t\t\t\t\t\t\tfor (SpringThread thread : machine.getThreads())\n+\t\t\t\t\t\t\t\tthreads.put(thread);\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Return the next thread ID.\n+\t * \n+\t * @return The next thread ID.\n+\t * @since 2021/03/14\n+\t */\n+\tprotected int nextThreadId()\n+\t{\n+\t\tsynchronized (this)\n+\t\t{\n+\t\t\treturn ++this._nextThreadId;\n+\t\t}\n+\t}\n+\t\n \t/**\n \t * Spawns a new task.\n \t * \n@@ -79,14 +168,15 @@ public SpringTaskManager(VMSuiteManager __sm, ProfilerSnapshot __ps)\n \t * @param __stdOutMode Standard output mode.\n \t * @param __stdErrMode Standard error mode.\n \t * @param __forkThread Should the task be started on a new thread?\n+\t * @param __rootVm Is this the root virtual machine?\n \t * @return The spawned machine.\n \t * @throws NullPointerException On null arguments.\n \t * @since 2020/07/09\n \t */\n \tpublic SpringMachine startTask(VMClassLibrary[] __classpath,\n \t\tString __mainClass, String[] __mainArgs,\n \t\tMap<String, String> __sysProps, int __stdOutMode, int __stdErrMode,\n-\t\tboolean __forkThread)\n+\t\tboolean __forkThread, boolean __rootVm)\n \t\tthrows NullPointerException\n \t{\n \t\tif (__classpath == null || __mainClass == null || __mainArgs == null ||\n@@ -105,7 +195,7 @@ public SpringMachine startTask(VMClassLibrary[] __classpath,\n \t\tSpringMachine machine = new SpringMachine(this.suites,\n \t\t\tclassloader, this, __mainClass,\n \t\t\tthis.profiler, new LinkedHashMap<>(__sysProps), this.globalState,\n-\t\t\tpipes, __mainArgs);\n+\t\t\tpipes, __rootVm, __mainArgs);\n \t\t\n \t\t// Register the machine, use garbage collector for the weak references\n \t\tsynchronized (this)\n@@ -168,5 +258,35 @@ public SpringMachine startTask(VMClassLibrary[] __classpath,\n \t\t\n \t\treturn result.<SpringMachine>toArray(new SpringMachine[result.size()]);\n \t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic String vmDescription()\n+\t{\n+\t\treturn \"SquirrelJME SpringCoat \" + SquirrelJME.RUNTIME_VERSION;\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic String vmName()\n+\t{\n+\t\treturn \"SquirrelJME SpringCoat\";\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic String vmVersion()\n+\t{\n+\t\treturn SquirrelJME.RUNTIME_VERSION;\n+\t}\n }\n "
  },
  {
    "sha": "704fe574c128090759427f4bf192be5cc7cd6755",
    "filename": "emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringThread.java",
    "status": "modified",
    "additions": 222,
    "deletions": 6,
    "changes": 228,
    "blob_url": "https://github.com/SquirrelJME/SquirrelJME/blob/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringThread.java",
    "raw_url": "https://github.com/SquirrelJME/SquirrelJME/raw/d2a46b199acf4d4a45c997616928af1aa46e0190/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringThread.java",
    "contents_url": "https://api.github.com/repos/SquirrelJME/SquirrelJME/contents/emulators/springcoat-vm/src/main/java/cc/squirreljme/vm/springcoat/SpringThread.java?ref=d2a46b199acf4d4a45c997616928af1aa46e0190",
    "patch": "@@ -11,8 +11,18 @@\n package cc.squirreljme.vm.springcoat;\n \n import cc.squirreljme.emulator.profiler.ProfiledThread;\n+import cc.squirreljme.jdwp.JDWPClass;\n+import cc.squirreljme.jdwp.JDWPCollectable;\n+import cc.squirreljme.jdwp.JDWPMethod;\n+import cc.squirreljme.jdwp.JDWPObject;\n+import cc.squirreljme.jdwp.JDWPThread;\n+import cc.squirreljme.jdwp.JDWPThreadFrame;\n+import cc.squirreljme.jdwp.JDWPThreadGroup;\n+import cc.squirreljme.jdwp.JDWPThreadSuspension;\n+import cc.squirreljme.jvm.mle.constants.ThreadStatusType;\n import cc.squirreljme.runtime.cldc.debug.CallTraceElement;\n import cc.squirreljme.runtime.cldc.debug.CallTraceUtils;\n+import cc.squirreljme.runtime.cldc.debug.Debugging;\n import cc.squirreljme.vm.springcoat.brackets.VMThreadObject;\n import cc.squirreljme.vm.springcoat.exceptions.SpringNullPointerException;\n import cc.squirreljme.vm.springcoat.exceptions.SpringVirtualMachineException;\n@@ -21,6 +31,7 @@\n import java.lang.ref.WeakReference;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import net.multiphasicapps.classfile.ByteCode;\n import net.multiphasicapps.classfile.ClassName;\n@@ -32,6 +43,7 @@\n  * @since 2018/09/01\n  */\n public final class SpringThread\n+\timplements JDWPCollectable, JDWPThread\n {\n \t/** Maximum depth of the stack. */\n \tpublic static final int MAX_STACK_DEPTH =\n@@ -49,10 +61,23 @@\n \t/** Profiler information. */\n \tprotected final ProfiledThread profiler;\n \t\n+\t/** Tracker for debugging suspension. */\n+\tprotected final JDWPThreadSuspension debuggerSuspension =\n+\t\tnew JDWPThreadSuspension();\n+\t\n+\t/** The virtual machine reference. */\n+\tprotected final Reference<SpringMachine> machineRef;\n+\t\n+\t/** Unique thread ID. */\n+\tprotected final int uniqueId;\n+\t\n \t/** The stack frames. */\n \tprivate final List<SpringThread.Frame> _frames =\n \t\tnew ArrayList<>();\n \t\n+\t/** The thread status. */\n+\tprivate int _status;\n+\t\n \t/** The thread's {@link Thread} instance. */\n \tprivate SpringObject _threadInstance;\n \t\n@@ -71,6 +96,9 @@\n \t/** Did we signal exit? */\n \tvolatile boolean _signaledexit;\n \t\n+\t/** The suspend count of the virtual machine. */\n+\tvolatile int _suspendCount;\n+\t\n \t/** The current worker for the thread. */\n \tvolatile SpringThreadWorker _worker;\n \t\n@@ -80,21 +108,25 @@\n \t/**\n \t * Initializes the thread.\n \t *\n+\t * @param __machRef The machine reference.\n \t * @param __id The thread ID.\n+\t * @param __uniqueId Unique ID for debugging.\n \t * @param __main Is this a main thread.\n \t * @param __n The name of the thread.\n \t * @param __profiler Profiled storage.\n \t * @throws NullPointerException On null arguments.\n \t * @since 2018/09/01\n \t */\n-\tSpringThread(int __id, boolean __main, String __n,\n-\t\tProfiledThread __profiler)\n+\tSpringThread(Reference<SpringMachine> __machRef, int __id, int __uniqueId,\n+\t\tboolean __main, String __n, ProfiledThread __profiler)\n \t\tthrows NullPointerException\n \t{\n \t\tif (__n == null)\n \t\t\tthrow new NullPointerException(\"NARG\");\n \t\t\n+\t\tthis.machineRef = __machRef;\n \t\tthis.id = __id;\n+\t\tthis.uniqueId = __uniqueId;\n \t\tthis.main = __main;\n \t\tthis.name = __n;\n \t\tthis.profiler = __profiler;\n@@ -117,6 +149,94 @@\n \t\t}\n \t}\n \t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic JDWPThreadFrame[] debuggerFrames()\n+\t{\n+\t\tFrame[] frames = this.frames();\n+\t\tJDWPThreadFrame[] rv = new JDWPThreadFrame[frames.length];\n+\t\t\n+\t\t// Filter out any blank frames because it does not make sense to\n+\t\t// the debugger at all\n+\t\tint at = 0;\n+\t\tfor (Frame frame : frames)\n+\t\t\tif (!frame.isBlank())\n+\t\t\t\trv[at++] = frame;\n+\t\t\n+\t\t// Spring Coat does threads in the reverse order, so it needs to be\n+\t\t// flipped to be in Java order\n+\t\trv = (at == frames.length ? rv :\n+\t\t\tArrays.<JDWPThreadFrame>copyOf(rv, at));\n+\t\tCollections.reverse(Arrays.asList(rv));\n+\t\treturn rv;\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic int debuggerId()\n+\t{\n+\t\treturn this.uniqueId;\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/15\n+\t */\n+\t@Override\n+\tpublic boolean debuggerIsCollected()\n+\t{\n+\t\treturn this.isTerminated();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic JDWPThreadSuspension debuggerSuspend()\n+\t{\n+\t\treturn this.debuggerSuspension;\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/13\n+\t */\n+\t@Override\n+\tpublic JDWPThreadGroup debuggerThreadGroup()\n+\t{\n+\t\treturn this.machine();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/14\n+\t */\n+\t@Override\n+\tpublic JDWPObject debuggerThreadObject()\n+\t{\n+\t\tthrow Debugging.todo();\n+\t}\n+\t\n+\t/**\n+\t * {@inheritDoc}\n+\t * @since 2021/03/15\n+\t */\n+\t@Override\n+\tpublic int debuggerThreadStatus()\n+\t{\n+\t\tsynchronized (this)\n+\t\t{\n+\t\t\treturn this._status;\n+\t\t}\n+\t}\n+\t\n \t/**\n \t * Enters a blank frame to store data.\n \t *\n@@ -200,7 +320,8 @@\n \t\t\n \t\t// Create new frame\n \t\tList<SpringThread.Frame> frames = this._frames;\n-\t\tFrame rv = new Frame(frames.size(), __m, vmArgs);\n+\t\tFrame rv = new Frame(frames.size(),\n+\t\t\tthis._worker.loadClass(__m.inClass()), __m, vmArgs);\n \t\t\n \t\t// Profile for this frame\n \t\tthis.profiler.enterFrame(__m.inClass().toString(),\n@@ -409,6 +530,18 @@ public final Object invokeMethod(boolean __static, ClassName __cl,\n \t\treturn this._worker.invokeMethod(__static, __cl, __nat, __args);\n \t}\n \t\n+\t/**\n+\t * Returns the machine that created this.\n+\t * \n+\t * @return The machine that created this.\n+\t * @since 2021/03/16\n+\t */\n+\tpublic SpringMachine machine()\n+\t{\n+\t\tSpringThreadWorker worker = this._worker;\n+\t\treturn (worker == null ? this.machineRef.get() : worker.machine);\n+\t}\n+\t\n \t/**\n \t * Is this a daemon thread?\n \t *\n@@ -549,6 +682,20 @@ public void setDaemon()\n \t\t}\n \t}\n \t\n+\t/**\n+\t * Sets the thread status.\n+\t * \n+\t * @param __status The {@link ThreadStatusType} to set.\n+\t * @since 2021/03/15\n+\t */\n+\tpublic void setStatus(int __status)\n+\t{\n+\t\tsynchronized (this)\n+\t\t{\n+\t\t\tthis._status = __status;\n+\t\t}\n+\t}\n+\t\n \t/**\n \t * Sets the {@link Thread} instance.\n \t *\n@@ -662,6 +809,7 @@ public final String toString()\n \t * @since 2018/09/03\n \t */\n \tpublic static class Frame\n+\t\timplements JDWPThreadFrame\n \t{\n \t\t/** The frame level. */\n \t\tpublic final int level;\n@@ -678,6 +826,9 @@ public final String toString()\n \t\t/** Is this frame blank? */\n \t\tprotected final boolean isblank;\n \t\t\n+\t\t/** The class this is for. */\n+\t\tprotected final SpringClass springClass;\n+\t\t\n \t\t/** Local variables. */\n \t\tprivate final Object[] _locals;\n \t\t\n@@ -700,7 +851,7 @@ public final String toString()\n \t\tprivate SpringObject _tossedexception;\n \t\t\n \t\t/** Object which has a monitor for quicker unlock. */\n-\t\tprivate volatile SpringObject _monitor;\n+\t\tvolatile SpringObject _monitor;\n \t\t\n \t\t/**\n \t\t * Initializes a blank guard frame.\n@@ -712,6 +863,7 @@ private Frame(int __level)\n \t\t{\n \t\t\tthis.level = __level;\n \t\t\tthis.method = null;\n+\t\t\tthis.springClass = null;\n \t\t\tthis.code = null;\n \t\t\tthis.thisobject = null;\n \t\t\tthis.isblank = true;\n@@ -723,22 +875,25 @@ private Frame(int __level)\n \t\t * Initializes the frame.\n \t\t *\n \t\t * @param __level The frame depth.\n+\t\t * @param __cl The class used.\n \t\t * @param __m The method used for the frame.\n \t\t * @param __args The frame arguments.\n \t\t * @throws NullPointerException On null arguments.\n \t\t * @since 2018/09/03\n \t\t */\n-\t\tFrame(int __level, SpringMethod __m, Object... __args)\n+\t\tFrame(int __level, SpringClass __cl, SpringMethod __m,\n+\t\t\tObject... __args)\n \t\t\tthrows NullPointerException\n \t\t{\n-\t\t\tif (__m == null)\n+\t\t\tif (__cl == null || __m == null)\n \t\t\t\tthrow new NullPointerException(\"NARG\");\n \t\t\t\n \t\t\t__args = (__args == null ? new Object[0] : __args.clone());\n \t\t\t\n \t\t\tthis.level = __level;\n \t\t\tthis.isblank = false;\n \t\t\tthis.method = __m;\n+\t\t\tthis.springClass = __cl;\n \t\t\t\n \t\t\t// We will need to initialize the local and stack data from the\n \t\t\t// information the byte code gives\n@@ -791,6 +946,67 @@ public final void clearStack()\n \t\t\tthis._stacktop = 0;\n \t\t}\n \t\t\n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t * @since 2021/03/13\n+\t\t */\n+\t\t@Override\n+\t\tpublic JDWPClass debuggerAtClass()\n+\t\t{\n+\t\t\treturn this.springClass;\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t * @since 2021/03/13\n+\t\t */\n+\t\t@Override\n+\t\tpublic long debuggerAtIndex()\n+\t\t{\n+\t\t\tByteCode code = this.code;\n+\t\t\tif (code == null)\n+\t\t\t\treturn -1;\n+\t\t\t\n+\t\t\t// These just use indexes, not true addresses\n+\t\t\treturn code.addressToIndex(this._pc);\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t * @since 2021/03/13\n+\t\t */\n+\t\t@Override\n+\t\tpublic JDWPMethod debuggerAtMethod()\n+\t\t{\n+\t\t\treturn this.method;\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t * @since 2021/03/13\n+\t\t */\n+\t\t@Override\n+\t\tpublic int debuggerId()\n+\t\t{\n+\t\t\treturn System.identityHashCode(this);\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t * @since 2021/03/15\n+\t\t */\n+\t\t@Override\n+\t\tpublic Object debuggerRegisterGetValue(boolean __stack, int __dx)\n+\t\t{\n+\t\t\tObject[] vals = (__stack ? this._stack : this._locals);\n+\t\t\tif (__dx < 0 || __dx >= vals.length)\n+\t\t\t\treturn null;\n+\t\t\t\n+\t\t\t// This may return the special null, hide that\n+\t\t\tObject rv = vals[__dx];\n+\t\t\treturn (rv == SpringNullObject.NULL ? null : rv);\n+\t\t}\n+\t\t\n \t\t/**\n \t\t * Increments the execution counter for this frame.\n \t\t *"
  }
]
