[
  {
    "sha": "e0c826d3a4574b6ad36c85dba9f48432e93c1603",
    "filename": "gic_flutter/lib/src/views/baseGicButton.dart",
    "status": "removed",
    "additions": 0,
    "deletions": 72,
    "changes": 72,
    "blob_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/blob/332c9097655966b3ea5c555eb8c80f7aaed702a9/gic_flutter/lib/src/views/baseGicButton.dart",
    "raw_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/raw/332c9097655966b3ea5c555eb8c80f7aaed702a9/gic_flutter/lib/src/views/baseGicButton.dart",
    "contents_url": "https://api.github.com/repos/Terence-D/GamingInterfaceClientAndroid/contents/gic_flutter/lib/src/views/baseGicButton.dart?ref=332c9097655966b3ea5c555eb8c80f7aaed702a9",
    "patch": "@@ -1,72 +0,0 @@\n-import 'package:flutter/material.dart';\n-import 'package:gic_flutter/src/backend/models/screen/viewModels/controlViewModel.dart';\n-\n-abstract class BaseGicButton extends StatefulWidget {\n-  final ControlViewModel control;\n-  final TextStyle textStyle;\n-\n-  BaseGicButton({Key key, @required this.control, @required this.textStyle}) : super(key: key);\n-}\n-\n-abstract class BaseGicButtonState extends State<BaseGicButton> {\n-  final ControlViewModel control;\n-  final TextStyle textStyle;\n-  final BorderRadius buttonBorder = new BorderRadius.all(Radius.circular(5));\n-\n-  BoxDecoration unpressed;\n-  BoxDecoration pressed;\n-  BoxDecoration active;\n-\n-  BaseGicButtonState({@required this.control, @required this.textStyle}) {\n-    unpressed = _buildDesign(false);\n-    pressed = _buildDesign(true);\n-    active = unpressed;\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return GestureDetector(\n-        onTapDown: (TapDownDetails details) => onTap(),\n-        onTapUp: (TapUpDetails details) => onTapUp(),\n-        child: Container(\n-          width: control.width,\n-          height: control.height,\n-          decoration: active,\n-          child: Center(child: Text(control.text, textAlign: TextAlign.center, style: textStyle)),\n-        ));\n-  }\n-\n-  BoxDecoration _buildDesign(bool isPressed) {\n-    int imageIndex = 0;\n-    Alignment begin = Alignment.bottomCenter;\n-    Alignment end = Alignment.topCenter;\n-\n-    if (isPressed) {\n-      imageIndex++;\n-      begin = Alignment.topCenter;\n-      end = Alignment.bottomCenter;\n-    }\n-\n-    if (control.design == ControlDesignType.UpDownGradient) {\n-      return BoxDecoration(\n-          borderRadius: buttonBorder,\n-          gradient: LinearGradient(\n-            colors: control.colors,\n-            begin: begin,\n-            end: end,\n-          ));\n-    } else {\n-      return BoxDecoration(\n-          borderRadius: buttonBorder,\n-          image: new DecorationImage(\n-            image: new AssetImage(\"assets/images/controls/${control.images[imageIndex]}.png\"),\n-            fit: BoxFit.cover)\n-      );\n-    }\n-  }\n-\n-  onTap();\n-\n-  onTapUp();\n-\n-}"
  },
  {
    "sha": "6c5f5ecc0f82819fb15842c71d4467341afffe42",
    "filename": "gic_flutter/lib/src/views/baseGicControl.dart",
    "status": "added",
    "additions": 191,
    "deletions": 0,
    "changes": 191,
    "blob_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/blob/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/baseGicControl.dart",
    "raw_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/raw/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/baseGicControl.dart",
    "contents_url": "https://api.github.com/repos/Terence-D/GamingInterfaceClientAndroid/contents/gic_flutter/lib/src/views/baseGicControl.dart?ref=f976687c13c118500a25d22a1debbbd4b9fab848",
    "patch": "@@ -0,0 +1,191 @@\n+import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:gic_flutter/src/backend/models/screen/command.dart';\n+import 'package:gic_flutter/src/backend/models/screen/viewModels/controlViewModel.dart';\n+import 'package:gic_flutter/src/backend/models/screen/viewModels/font.dart';\n+\n+abstract class BaseGicControl extends StatefulWidget {\n+  final ControlViewModel control;\n+  final double pixelRatio;\n+\n+  BaseGicControl(\n+      {Key key,\n+      @required this.control,\n+      @required this.pixelRatio})\n+      : super(key: key);\n+}\n+\n+abstract class BaseGicControlState extends State<BaseGicControl> {\n+  final ControlViewModel control;\n+  final double pixelRatio;\n+  final BorderRadius buttonBorder = new BorderRadius.all(Radius.circular(5));\n+\n+  BoxDecoration unpressed;\n+  BoxDecoration pressed;\n+  BoxDecoration active;\n+\n+  BaseGicControlState(\n+      {@required this.control,\n+      @required this.pixelRatio}) {\n+    unpressed = _buildButtonDesign(false);\n+    pressed = _buildButtonDesign(true);\n+    active = unpressed;\n+  }\n+\n+  sendCommand(String commandUrl, int commandIndex);\n+  GestureDetector buildControl();\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return buildControl();\n+  }\n+\n+  Widget buildControlContainer() {\n+    switch (control.type) {\n+      case ControlViewModelType.Text:\n+        return _gicText();\n+      case ControlViewModelType.Image:\n+        return _gicImage();\n+      default:\n+        return _gicButton();\n+    }\n+  }\n+\n+  onTap() {\n+    setState(() {\n+      switch (control.type) {\n+        case ControlViewModelType.Toggle:\n+          _toggleTap(Command.KEY_DOWN);\n+          break;\n+        case ControlViewModelType.QuickButton:\n+          _buttonTap(\"toggle\", Command.KEY_DOWN, pressed);\n+          break;\n+        case ControlViewModelType.Button:\n+          _buttonTap(\"key\", Command.KEY_DOWN, pressed);\n+          break;\n+        case ControlViewModelType.Text:\n+        case ControlViewModelType.Image:\n+          break;\n+      }\n+    });\n+  }\n+\n+  onTapUp() {\n+    setState(() {\n+      switch (control.type) {\n+        case ControlViewModelType.Toggle:\n+          _toggleTap(Command.KEY_UP);\n+          break;\n+        case ControlViewModelType.QuickButton:\n+          _buttonTap(\"toggle\", Command.KEY_UP, unpressed);\n+          break;\n+        case ControlViewModelType.Button:\n+          _buttonTap(\"key\", Command.KEY_UP, unpressed);\n+          break;\n+        case ControlViewModelType.Text:\n+        case ControlViewModelType.Image:\n+          sendCommand(null, -1);\n+          break;\n+      }\n+    });\n+  }\n+\n+  TextStyle getTextStyle(Font font, double pixelRatio) {\n+    return TextStyle(\n+        color: font.color,\n+        fontFamily: font.family,\n+        fontSize: font.size / pixelRatio);\n+  }\n+\n+  void _toggleTap(int activatorType) {\n+    String commandType = \"toggle\";\n+    int commandIndex = 0;\n+    if (activatorType == Command.KEY_DOWN) {\n+      if (active == unpressed) {\n+        commandIndex = 0;\n+      } else {\n+        commandIndex = 1;\n+      }\n+    } else {\n+      if (active == unpressed) {\n+        commandIndex = 0;\n+        active = pressed;\n+      } else {\n+        commandIndex = 1;\n+        active = unpressed;\n+      }\n+    }\n+    control.commands[commandIndex].activatorType = activatorType;\n+    sendCommand(commandType, 0);\n+  }\n+\n+  void _buttonTap(String commandUrl, int activatorType, BoxDecoration status) {\n+    control.commands[0].activatorType = activatorType;\n+    active = status;\n+    sendCommand(commandUrl, 0);\n+  }\n+\n+  Widget _gicButton() {\n+    return Container(\n+      width: control.width / pixelRatio,\n+      height: control.height / pixelRatio,\n+      decoration: active,\n+      child: Center(\n+          child: Text(control.text,\n+              textAlign: TextAlign.center, style: getTextStyle(control.font, pixelRatio))),\n+    );\n+  }\n+\n+  Widget _gicImage() {\n+    if (control.images.length < 1)\n+      return Container(\n+          width: control.width / pixelRatio,\n+          height: control.height / pixelRatio,\n+          decoration: BoxDecoration(\n+              image: new DecorationImage(\n+                  image: new AssetImage(\"assets/images/icons/app_icon.png\"),\n+                  fit: BoxFit.cover)));\n+    else\n+      return Image.file(\n+        File(control.images[0]),\n+        width: control.width / pixelRatio,\n+        height: control.height / pixelRatio,\n+      );\n+  }\n+\n+  Widget _gicText() {\n+    return new Container(\n+        width: control.width / pixelRatio,\n+        child: Text(control.text, style: getTextStyle(control.font, pixelRatio)));\n+  }\n+\n+  BoxDecoration _buildButtonDesign(bool isPressed) {\n+    int imageIndex = 0;\n+    Alignment begin = Alignment.bottomCenter;\n+    Alignment end = Alignment.topCenter;\n+\n+    if (isPressed) {\n+      imageIndex++;\n+      begin = Alignment.topCenter;\n+      end = Alignment.bottomCenter;\n+    }\n+\n+    if (control.design == ControlDesignType.UpDownGradient) {\n+      return BoxDecoration(\n+          borderRadius: buttonBorder,\n+          gradient: LinearGradient(\n+            colors: control.colors,\n+            begin: begin,\n+            end: end,\n+          ));\n+    } else {\n+      return BoxDecoration(\n+          borderRadius: buttonBorder,\n+          image: new DecorationImage(\n+              image: new AssetImage(\n+                  \"assets/images/controls/${control.images[imageIndex]}.png\"),\n+              fit: BoxFit.cover));\n+    }\n+  }\n+}"
  },
  {
    "sha": "486cbcd9f32ab23e7d0309d858021ea60ebf9aba",
    "filename": "gic_flutter/lib/src/views/launcher/screenList.dart",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/blob/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/launcher/screenList.dart",
    "raw_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/raw/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/launcher/screenList.dart",
    "contents_url": "https://api.github.com/repos/Terence-D/GamingInterfaceClientAndroid/contents/gic_flutter/lib/src/views/launcher/screenList.dart?ref=f976687c13c118500a25d22a1debbbd4b9fab848",
    "patch": "@@ -266,8 +266,10 @@ class ScreenList extends StatelessWidget {\n   }\n \n   _editScreen(int selectedScreenIndex, BuildContext context) async {\n+    int screenId = _screens[selectedScreenIndex].id;\n+\n     await Navigator.push(context, MaterialPageRoute(builder: (context) =>\n-        ScreenEditor(screenId: selectedScreenIndex)));\n+        ScreenEditor(screenId: screenId)));\n \n     // MethodChannel platform = new MethodChannel(Channel.channelView);\n     // try {"
  },
  {
    "sha": "0bf601b10d9605cf522e7e50b211c7249f612641",
    "filename": "gic_flutter/lib/src/views/screen/gicButton.dart",
    "status": "modified",
    "additions": 31,
    "deletions": 132,
    "changes": 163,
    "blob_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/blob/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screen/gicButton.dart",
    "raw_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/raw/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screen/gicButton.dart",
    "contents_url": "https://api.github.com/repos/Terence-D/GamingInterfaceClientAndroid/contents/gic_flutter/lib/src/views/screen/gicButton.dart?ref=f976687c13c118500a25d22a1debbbd4b9fab848",
    "patch": "@@ -1,155 +1,54 @@\n import 'package:flutter/material.dart';\n import 'package:fluttertoast/fluttertoast.dart';\n import 'package:gic_flutter/src/backend/models/networkModel.dart';\n-import 'package:gic_flutter/src/backend/models/screen/command.dart';\n-import 'package:gic_flutter/src/backend/models/screen/viewModels/controlViewModel.dart';\n import 'package:gic_flutter/src/backend/services/networkService.dart';\n-import 'package:gic_flutter/src/views/baseGicButton.dart';\n+import 'package:gic_flutter/src/views/baseGicControl.dart';\n \n-class GicButton extends BaseGicButton {\n-  final ControlViewModel control;\n-  final TextStyle textStyle;\n+class GicControl extends BaseGicControl {\n   final NetworkModel networkModel;\n-  final double pixelRatio;\n \n-  GicButton({Key key, @required this.control, @required this.textStyle, @required this.networkModel, @required this.pixelRatio}) : super(key: key, control: control, textStyle: textStyle);\n+  GicControl(\n+      {Key key,\n+      @required control,\n+      @required this.networkModel,\n+      @required pixelRatio})\n+      : super(\n+            key: key,\n+            control: control,\n+            pixelRatio: pixelRatio);\n+\n   @override\n   State<StatefulWidget> createState() {\n-    return GicButtonState(control: control, textStyle: textStyle, networkModel: networkModel, pixelRatio: pixelRatio);\n+    return GicButtonState(\n+        control: control,\n+        networkModel: networkModel,\n+        pixelRatio: pixelRatio);\n   }\n }\n \n-class GicButtonState extends State<GicButton> {\n-  final ControlViewModel control;\n-  final TextStyle textStyle;\n-  final BorderRadius buttonBorder = new BorderRadius.all(Radius.circular(5));\n+class GicButtonState extends BaseGicControlState {\n   final NetworkModel networkModel;\n-  final double pixelRatio;\n-\n-  BoxDecoration unpressed;\n-  BoxDecoration pressed;\n-  BoxDecoration active;\n-\n-  GicButtonState({@required this.control, @required this.textStyle, @required this.networkModel, @required this.pixelRatio}) {\n-    unpressed = _buildDesign(false);\n-    pressed = _buildDesign(true);\n-    active = unpressed;\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return GestureDetector(\n-        onTapDown: (TapDownDetails details) => onTap(),\n-        onTapUp: (TapUpDetails details) => onTapUp(),\n-        child: Container(\n-          width: control.width / pixelRatio,\n-          height: control.height / pixelRatio,\n-          decoration: active,\n-          child: Center(child: Text(control.text, textAlign: TextAlign.center, style: textStyle)),\n-        ));\n-  }\n \n-  onTap() {\n-    setState(() {\n-      switch (control.type) {\n-        case ControlViewModelType.Toggle:\n-          _toggleTap(Command.KEY_DOWN);\n-          break;\n-        case ControlViewModelType.QuickButton:\n-          _buttonTap(\"toggle\", Command.KEY_DOWN, pressed);\n-          break;\n-        case ControlViewModelType.Button:\n-          _buttonTap(\"key\", Command.KEY_DOWN, pressed);\n-          break;\n-        case ControlViewModelType.Text:\n-        case ControlViewModelType.Image:\n-          break;\n-      }\n-    });\n-  }\n-\n-  onTapUp() {\n-    setState(() {\n-      switch (control.type) {\n-        case ControlViewModelType.Toggle:\n-          _toggleTap(Command.KEY_UP);\n-          break;\n-        case ControlViewModelType.QuickButton:\n-          _buttonTap(\"toggle\", Command.KEY_UP, unpressed);\n-          break;\n-        case ControlViewModelType.Button:\n-          _buttonTap(\"key\", Command.KEY_UP, unpressed);\n-          break;\n-        case ControlViewModelType.Text:\n-        case ControlViewModelType.Image:\n-          break;\n-      }\n-    });\n-  }\n-\n-  void _toggleTap(int activatorType) {\n-    String commandType = \"toggle\";\n-    int commandIndex = 0;\n-    if (activatorType == Command.KEY_DOWN) {\n-      if (active == unpressed) {\n-        commandIndex = 0;\n-      } else {\n-        commandIndex = 1;\n-      }\n-    } else {\n-      if (active == unpressed) {\n-        commandIndex = 0;\n-        active = pressed;\n-      } else {\n-        commandIndex = 1;\n-        active = unpressed;\n-      }\n-    }\n-    control.commands[commandIndex].activatorType = activatorType;\n-    sendCommand(commandType, 0);\n-  }\n-\n-  void _buttonTap(String commandUrl, int activatorType, BoxDecoration status) {\n-    control.commands[0].activatorType = activatorType;\n-    active = status;\n-    sendCommand(commandUrl, 0);\n-  }\n-\n-  BoxDecoration _buildDesign(bool isPressed) {\n-    int imageIndex = 0;\n-    Alignment begin = Alignment.bottomCenter;\n-    Alignment end = Alignment.topCenter;\n-\n-    if (isPressed) {\n-      imageIndex++;\n-      begin = Alignment.topCenter;\n-      end = Alignment.bottomCenter;\n-    }\n-\n-    if (control.design == ControlDesignType.UpDownGradient) {\n-      return BoxDecoration(\n-          borderRadius: buttonBorder,\n-          gradient: LinearGradient(\n-            colors: control.colors,\n-            begin: begin,\n-            end: end,\n-          ));\n-    } else {\n-      return BoxDecoration(\n-          borderRadius: buttonBorder,\n-          image: new DecorationImage(\n-            image: new AssetImage(\"assets/images/controls/${control.images[imageIndex]}.png\"),\n-            fit: BoxFit.cover)\n-      );\n-    }\n-  }\n+  GicButtonState(\n+      {@required control,\n+      @required this.networkModel,\n+      @required pixelRatio})\n+      : super(control: control, pixelRatio: pixelRatio);\n \n   Future<void> sendCommand(String commandUrl, int commandIndex) async {\n-    NetworkResponse response = await NetworkService.sendCommand(networkModel, commandUrl, control.commands[commandIndex]);\n+    NetworkResponse response = await NetworkService.sendCommand(\n+        networkModel, commandUrl, control.commands[commandIndex]);\n     if (response == NetworkResponse.Error)\n       Fluttertoast.showToast(\n         msg: \"error\",\n         toastLength: Toast.LENGTH_SHORT,\n       );\n   }\n+\n+  GestureDetector buildControl() {\n+    return GestureDetector(\n+        onTapDown: (TapDownDetails details) => onTap(),\n+        onTapUp: (TapUpDetails details) => onTapUp(),\n+        child: buildControlContainer());\n+  }\n }"
  },
  {
    "sha": "f265c5c893f30e90746974d985fa2e3b43ac1d44",
    "filename": "gic_flutter/lib/src/views/screen/screenView.dart",
    "status": "modified",
    "additions": 4,
    "deletions": 37,
    "changes": 41,
    "blob_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/blob/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screen/screenView.dart",
    "raw_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/raw/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screen/screenView.dart",
    "contents_url": "https://api.github.com/repos/Terence-D/GamingInterfaceClientAndroid/contents/gic_flutter/lib/src/views/screen/screenView.dart?ref=f976687c13c118500a25d22a1debbbd4b9fab848",
    "patch": "@@ -3,7 +3,6 @@ import 'dart:io';\n import 'package:flutter/material.dart';\n import 'package:gic_flutter/src/backend/models/networkModel.dart';\n import 'package:gic_flutter/src/backend/models/screen/viewModels/controlViewModel.dart';\n-import 'package:gic_flutter/src/backend/models/screen/viewModels/font.dart';\n import 'package:gic_flutter/src/backend/models/screen/viewModels/screenViewModel.dart';\n \n import 'gicButton.dart';\n@@ -45,44 +44,12 @@ class ScreenView extends StatelessWidget {\n \n   Widget _buildGicControl(ControlViewModel element, double pixelRatio) {\n     return Positioned(\n-      left: element.left / pixelRatio,\n-      top: element.top / pixelRatio,\n-      child: _dynamicControl(element, pixelRatio),\n-    );\n-  }\n-\n-  Widget _dynamicControl(ControlViewModel element, double pixelRatio) {\n-    switch (element.type) {\n-      case ControlViewModelType.Text:\n-        return _gicText(element, pixelRatio);\n-      case ControlViewModelType.Image:\n-        return _gicImage(element, pixelRatio);\n-      default:\n-        return GicButton(\n+        left: element.left / pixelRatio,\n+        top: element.top / pixelRatio,\n+        child: GicControl(\n             control: element,\n-            textStyle: _getTextStyle(element.font, pixelRatio),\n             networkModel: networkModel,\n-            pixelRatio: pixelRatio\n-        );\n-    }\n-  }\n-\n-  Widget _gicImage(ControlViewModel element, double pixelRatio) {\n-    return Image.file(\n-      File(element.images[0]),\n-      width: element.width / pixelRatio,\n-      height: element.height / pixelRatio,\n-    );\n-  }\n-\n-  Widget _gicText(ControlViewModel element, double pixelRatio) {\n-    return new Container(\n-        width: element.width / pixelRatio,\n-        child: Text(element.text, style: _getTextStyle(element.font, pixelRatio)));\n+            pixelRatio: pixelRatio));\n   }\n \n-  TextStyle _getTextStyle(Font font, double pixelRatio) {\n-    return TextStyle(\n-        color: font.color, fontFamily: font.family, fontSize: font.size / pixelRatio);\n-  }\n }"
  },
  {
    "sha": "19b21690c31b72af484bea5663b5e144e1438cb8",
    "filename": "gic_flutter/lib/src/views/screenEditor/controlDialog.dart",
    "status": "modified",
    "additions": 15,
    "deletions": 2,
    "changes": 17,
    "blob_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/blob/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screenEditor/controlDialog.dart",
    "raw_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/raw/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screenEditor/controlDialog.dart",
    "contents_url": "https://api.github.com/repos/Terence-D/GamingInterfaceClientAndroid/contents/gic_flutter/lib/src/views/screenEditor/controlDialog.dart?ref=f976687c13c118500a25d22a1debbbd4b9fab848",
    "patch": "@@ -22,9 +22,11 @@ class _ControlDialogState extends State<ControlDialog> {\n     );\n   }\n   contentBox(context){\n-    return Stack(\n+    return Column(\n       children: <Widget>[\n+        widget.control,\n         Container(\n+          height: 500,\n           margin: EdgeInsets.only(),\n           decoration: BoxDecoration(\n               shape: BoxShape.rectangle,\n@@ -36,7 +38,18 @@ class _ControlDialogState extends State<ControlDialog> {\n               ]\n           ),\n         ),\n-        widget.control,\n+        Container(\n+          margin: EdgeInsets.only(),\n+          decoration: BoxDecoration(\n+              shape: BoxShape.rectangle,\n+              color: Colors.blue,\n+              boxShadow: [\n+                BoxShadow(color: Colors.black,offset: Offset(0,10),\n+                    blurRadius: 10\n+                ),\n+              ]\n+          ),\n+        ),\n       ],\n     );\n   }"
  },
  {
    "sha": "45f2fc0d538b9c8c86be716ac85b9364038d4160",
    "filename": "gic_flutter/lib/src/views/screenEditor/gicEditControl.dart",
    "status": "modified",
    "additions": 27,
    "deletions": 126,
    "changes": 153,
    "blob_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/blob/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screenEditor/gicEditControl.dart",
    "raw_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/raw/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screenEditor/gicEditControl.dart",
    "contents_url": "https://api.github.com/repos/Terence-D/GamingInterfaceClientAndroid/contents/gic_flutter/lib/src/views/screenEditor/gicEditControl.dart?ref=f976687c13c118500a25d22a1debbbd4b9fab848",
    "patch": "@@ -1,29 +1,24 @@\n-import 'dart:io';\n-\n import 'package:flutter/material.dart';\n-import 'package:gic_flutter/src/backend/models/screen/viewModels/controlViewModel.dart';\n-import 'package:gic_flutter/src/backend/models/screen/viewModels/font.dart';\n+import 'package:gic_flutter/src/views/baseGicControl.dart';\n \n typedef void SelectedWidgetCallback(int selectedControlIndex);\n typedef void DragControl(\n     double newLeft, double newTop, int selectedControlIndex);\n \n-class GicEditControl extends StatefulWidget {\n+class GicEditControl extends BaseGicControl {\n   final SelectedWidgetCallback onSelected;\n   final DragControl onDrag;\n \n-  final ControlViewModel control;\n   final int controlIndex;\n-  final double pixelRatio;\n \n   GicEditControl(\n       {Key key,\n-      @required this.control,\n+      @required control,\n       @required this.controlIndex,\n       @required this.onSelected,\n       @required this.onDrag,\n-      @required this.pixelRatio})\n-      : super(key: key);\n+      @required pixelRatio})\n+      : super(key: key, control: control, pixelRatio: pixelRatio);\n \n   @override\n   State<StatefulWidget> createState() {\n@@ -36,132 +31,38 @@ class GicEditControl extends StatefulWidget {\n   }\n }\n \n-class GicEditControlState extends State<GicEditControl> {\n+class GicEditControlState extends BaseGicControlState {\n   final SelectedWidgetCallback onSelected;\n   final DragControl onDrag;\n \n-  final ControlViewModel control;\n-  final BorderRadius buttonBorder = new BorderRadius.all(Radius.circular(5));\n   final int controlIndex;\n-  final double pixelRatio;\n \n   GicEditControlState(\n-      {@required this.control,\n+      {@required control,\n       @required this.controlIndex,\n       @required this.onSelected,\n       @required this.onDrag,\n-      @required this.pixelRatio});\n-\n-  Color color;\n-\n-  @override\n-  void initState() {\n-    color = Colors.red;\n-    super.initState();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Positioned(\n-      top: control.top / pixelRatio,\n-      left: control.left / pixelRatio,\n-      child: GestureDetector(\n-          onPanUpdate: (tapInfo) {\n-            setState(() {\n-              control.left += tapInfo.delta.dx;\n-              control.top += tapInfo.delta.dy;\n-              onDrag(control.left, control.top,\n-                  controlIndex);\n-            });\n-          },\n-          child: Stack(children: <Widget>[\n-            _dynamicControl(),\n-            FlatButton(\n-                onPressed: _onTap,\n-                child: Text(\"\", style: _getTextStyle(control.font)),\n-                minWidth: control.width / pixelRatio,\n-                height: control.height / pixelRatio)\n-          ])),\n-    );\n-  }\n-\n-  Widget _dynamicControl() {\n-    switch (control.type) {\n-      case ControlViewModelType.Text:\n-        return _gicText();\n-      case ControlViewModelType.Image:\n-        return _gicImage();\n-      default:\n-        return _gicButton();\n-    }\n-  }\n-\n-  Widget _gicImage() {\n-    if (control.images.length < 1)\n-      return Container(\n-          width: control.width / pixelRatio,\n-          height: control.height / pixelRatio,\n-          decoration:BoxDecoration(\n-              image: new DecorationImage(\n-                  image: new AssetImage(\n-                      \"assets/images/icons/app_icon.png\"),\n-                  fit: BoxFit.cover)));\n-    else\n-      return Image.file(\n-        File(control.images[0]),\n-        width: control.width / pixelRatio,\n-        height: control.height / pixelRatio,\n-      );\n-  }\n-\n-  Widget _gicText() {\n-    return Text(control.text, style: _getTextStyle(control.font));\n-  }\n-\n-  TextStyle _getTextStyle(Font font) {\n-    return TextStyle(\n-        color: font.color,\n-        fontFamily: font.family,\n-        fontSize: font.size / pixelRatio);\n-  }\n-\n-  Container _gicButton() {\n-    return Container(\n-      width: control.width / pixelRatio,\n-      height: control.height / pixelRatio,\n-      decoration: _buildButton(),\n-      child: Center(\n-          child: Text(control.text,\n-              textAlign: TextAlign.center, style: _getTextStyle(control.font))),\n-    );\n-  }\n-\n-  BoxDecoration _buildButton() {\n-    int imageIndex = 0;\n-    Alignment begin = Alignment.bottomCenter;\n-    Alignment end = Alignment.topCenter;\n-\n-    if (control.design == ControlDesignType.UpDownGradient) {\n-      return BoxDecoration(\n-          borderRadius: buttonBorder,\n-          gradient: LinearGradient(\n-            colors: control.colors,\n-            begin: begin,\n-            end: end,\n-          ));\n-    } else {\n-      return BoxDecoration(\n-          borderRadius: buttonBorder,\n-          image: new DecorationImage(\n-              image: new AssetImage(\n-                  \"assets/images/controls/${control.images[imageIndex]}.png\"),\n-              fit: BoxFit.cover));\n-    }\n+      @required pixelRatio})\n+      : super(control: control, pixelRatio: pixelRatio);\n+\n+  GestureDetector buildControl() {\n+    return GestureDetector(\n+        onTapDown: (TapDownDetails details) => onTap(),\n+        //onTapUp: (TapUpDetails details) => onTapUp(),\n+        onPanUpdate: (tapInfo) {\n+          setState(() {\n+            control.left += tapInfo.delta.dx;\n+            control.top += tapInfo.delta.dy;\n+            if (onDrag != null) onDrag(control.left, control.top, controlIndex);\n+          });\n+        },\n+        child: buildControlContainer());\n   }\n \n-  _onTap() {\n-    setState(() {\n-      onSelected(controlIndex);\n-    });\n+  sendCommand(String commandUrl, int commandIndex) {\n+    if (onSelected != null)\n+      setState(() {\n+        onSelected(controlIndex);\n+      });\n   }\n }"
  },
  {
    "sha": "355824f7331af202a95ebdc85683da9b41bfe134",
    "filename": "gic_flutter/lib/src/views/screenEditor/screenEditor.dart",
    "status": "modified",
    "additions": 34,
    "deletions": 27,
    "changes": 61,
    "blob_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/blob/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screenEditor/screenEditor.dart",
    "raw_url": "https://github.com/Terence-D/GamingInterfaceClientAndroid/raw/f976687c13c118500a25d22a1debbbd4b9fab848/gic_flutter/lib/src/views/screenEditor/screenEditor.dart",
    "contents_url": "https://api.github.com/repos/Terence-D/GamingInterfaceClientAndroid/contents/gic_flutter/lib/src/views/screenEditor/screenEditor.dart?ref=f976687c13c118500a25d22a1debbbd4b9fab848",
    "patch": "@@ -1,3 +1,4 @@\n+import 'package:gic_flutter/src/backend/models/screen/viewModels/font.dart';\n import 'package:gic_flutter/src/views/screenEditor/controlDialog.dart';\n import 'package:path/path.dart' as path;\n import 'dart:io';\n@@ -70,25 +71,32 @@ class ScreenEditorState extends State<ScreenEditor> {\n     translation = new IntlScreenEditor(context);\n     SystemChrome.setEnabledSystemUIOverlays([]);\n     if (!_loaded) return Scaffold();\n-    pixelRatio = MediaQuery.of(context).devicePixelRatio;\n+    pixelRatio = MediaQuery\n+        .of(context)\n+        .devicePixelRatio;\n     int n = 0;\n     List<Widget> widgets = [];\n     widgets.add(_highlightSelection());\n     if (_service.activeScreenViewModel != null) {\n       _service.activeScreenViewModel.controls.forEach((element) {\n-        widgets.add(GicEditControl(\n-          pixelRatio: pixelRatio,\n-          control: element,\n-          controlIndex: n,\n-          onSelected: (int id) {\n-            _onSelected(id);\n-          },\n-          onDrag: (double newLeft, double newTop, int selectedControlIndex) {\n-            _onDrag(newLeft, newTop, selectedControlIndex);\n-          },\n-        ));\n-        n++;\n-      });\n+        widgets.add(\n+            Positioned(\n+                top: element.top / pixelRatio,\n+                left: element.left / pixelRatio,\n+                child: GicEditControl(\n+                  pixelRatio: pixelRatio,\n+                  control: element,\n+                  controlIndex: n,\n+                  onSelected: (int id) {\n+                    _onSelected(id);\n+                  },\n+                  onDrag: (double newLeft, double newTop,\n+                      int selectedControlIndex) {\n+                    _onDrag(newLeft, newTop, selectedControlIndex);\n+                  },\n+                )));\n+            n++;\n+        });\n     }\n \n     Container screen;\n@@ -183,7 +191,6 @@ class ScreenEditorState extends State<ScreenEditor> {\n     }\n   }\n \n-// ValueChanged<Color> callback\n   void _changeColor(Color color) {\n     setState(() => pickerColor = color);\n   }\n@@ -196,11 +203,11 @@ class ScreenEditorState extends State<ScreenEditor> {\n         title: Text(translation.text(ScreenEditorText.backgroundColor)),\n         content: SingleChildScrollView(\n             child: ColorPicker(\n-          pickerColor: pickerColor,\n-          onColorChanged: _changeColor,\n-          showLabel: true,\n-          enableAlpha: false,\n-        )),\n+              pickerColor: pickerColor,\n+              onColorChanged: _changeColor,\n+              showLabel: true,\n+              enableAlpha: false,\n+            )),\n         actions: <Widget>[\n           FlatButton(\n             child: Text(translation.text(ScreenEditorText.ok)),\n@@ -245,20 +252,20 @@ class ScreenEditorState extends State<ScreenEditor> {\n       controlId = selectedControlIndex;\n       setState(() {\n         selectedLeft = (_service\n-                    .activeScreenViewModel.controls[selectedControlIndex].left /\n-                pixelRatio) -\n+            .activeScreenViewModel.controls[selectedControlIndex].left /\n+            pixelRatio) -\n             highlightBorder;\n         selectedTop =\n             (_service.activeScreenViewModel.controls[selectedControlIndex].top /\n-                    pixelRatio) -\n+                pixelRatio) -\n                 highlightBorder;\n         selectedWidth = (_service.activeScreenViewModel\n-                    .controls[selectedControlIndex].width /\n-                pixelRatio) +\n+            .controls[selectedControlIndex].width /\n+            pixelRatio) +\n             (highlightBorder * 2);\n         selectedHeight = (_service.activeScreenViewModel\n-                    .controls[selectedControlIndex].height /\n-                pixelRatio) +\n+            .controls[selectedControlIndex].height /\n+            pixelRatio) +\n             (highlightBorder * 2);\n         selectedVisible = true;\n       });"
  }
]
