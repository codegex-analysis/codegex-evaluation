[
  {
    "sha": "9ee08a674d2df27d6d256134f32890e743dbc5a3",
    "filename": "graphql/graphql.gradle",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/graphql.gradle",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/graphql.gradle",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/graphql.gradle?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -23,14 +23,14 @@ archivesBaseName = 'jmix-graphql'\n dependencies {\n     api platform(\"io.jmix.bom:jmix-bom:$bomVersion\")\n \n-    api 'io.jmix.core:jmix-core'\n+    api 'io.jmix.data:jmix-data'\n \n     // todo move to bom\n     implementation 'com.graphql-java-kickstart:graphql-java-servlet:9.1.0'\n \n-    testImplementation 'org.springframework:spring-test'\n-    testImplementation \"org.spockframework:spock-core\"\n-    testImplementation \"org.spockframework:spock-spring\"\n+    testImplementation 'org.spockframework:spock-core'\n+    testImplementation 'org.spockframework:spock-spring'\n+    testImplementation 'io.jmix.data:jmix-eclipselink'\n     testRuntimeOnly 'org.slf4j:slf4j-simple'\n     testRuntimeOnly 'org.hsqldb:hsqldb'\n     testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'"
  },
  {
    "sha": "9d3a558129d287eacee4f0b2c047007f1e3fd36d",
    "filename": "graphql/src/test/groovy/AbstractGraphQLTest.groovy",
    "status": "added",
    "additions": 199,
    "deletions": 0,
    "changes": 199,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/groovy/AbstractGraphQLTest.groovy",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/groovy/AbstractGraphQLTest.groovy",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/groovy/AbstractGraphQLTest.groovy?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,199 @@\n+import graphql.Scalars\n+import graphql.language.InputObjectTypeDefinition\n+import graphql.language.InputValueDefinition\n+import io.jmix.core.CoreConfiguration\n+import io.jmix.core.MetadataTools\n+import io.jmix.core.metamodel.model.MetaClass\n+import io.jmix.core.metamodel.model.MetaProperty\n+import io.jmix.data.DataConfiguration\n+import io.jmix.eclipselink.EclipselinkConfiguration\n+import io.jmix.graphql.GraphqlConfiguration\n+import io.jmix.graphql.schema.FilterTypesBuilder\n+import io.jmix.graphql.schema.InpTypesBuilder\n+import io.jmix.graphql.schema.scalar.CustomScalars\n+import org.apache.commons.lang3.StringUtils\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.jdbc.core.JdbcTemplate\n+import org.springframework.test.context.ContextConfiguration\n+import org.springframework.transaction.PlatformTransactionManager\n+import org.springframework.transaction.TransactionDefinition\n+import org.springframework.transaction.support.TransactionTemplate\n+import spock.lang.Specification\n+import test_support.GraphQLTestConfiguration\n+import test_support.TestContextInitializer\n+\n+import java.time.LocalDateTime\n+import java.util.stream.Collectors\n+\n+import static io.jmix.graphql.schema.Types.listValueDef\n+\n+/*\n+ * Copyright 2019 Haulmont.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\")\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+@SuppressWarnings('SpringJavaInjectionPointsAutowiringInspection')\n+@ContextConfiguration(\n+        classes = [CoreConfiguration, DataConfiguration, EclipselinkConfiguration,\n+                GraphQLTestConfiguration, GraphqlConfiguration],\n+        initializers = [TestContextInitializer]\n+)\n+class AbstractGraphQLTest extends Specification {\n+\n+    @Autowired\n+    protected JdbcTemplate jdbc\n+    @Autowired\n+    private InpTypesBuilder inpTypesBuilder\n+    @Autowired\n+    private MetadataTools metadataTools\n+\n+    protected TransactionTemplate transaction\n+\n+    @Autowired\n+    protected void setTransactionManager(PlatformTransactionManager transactionManager) {\n+        transaction = new TransactionTemplate(transactionManager)\n+        transaction.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)\n+    }\n+\n+    void clearTables(String... tableNames) {\n+        tableNames.each {\n+            clearTable(it)\n+        }\n+    }\n+\n+    protected void clearTable(String tableName) {\n+        //runSqlUpdate(\"CREATE TABLE IF NOT EXISTS $tableName\")\n+        runSqlUpdate(\"delete from $tableName\")\n+    }\n+\n+    protected void runSqlUpdate(String sqlUpdateString) {\n+        transaction.executeWithoutResult({ status ->\n+            jdbc.update(sqlUpdateString)\n+        })\n+    }\n+\n+    protected InputObjectTypeDefinition buildStandardFilterType(MetaClass metaClass) {\n+        String className = composeFilterConditionTypeName(metaClass)\n+\n+        InputObjectTypeDefinition.Builder builder = InputObjectTypeDefinition.newInputObjectDefinition()\n+                .name(className)\n+\n+        List<InputValueDefinition> valueDefs = metaClass.getProperties().stream()\n+                .map({ metaProperty ->\n+\n+                    if (metaProperty.getType() == MetaProperty.Type.ENUM) {\n+                        return listValueDef(metaProperty.getName(), \"String\", null)\n+                    }\n+\n+                    if (metaProperty.getRange().getCardinality().isMany()) {\n+                        return null\n+                    }\n+\n+                    String typeName = composeFilterConditionTypeName(getFieldTypeName(metaProperty))\n+                    return listValueDef(metaProperty.getName(), typeName, null)\n+                })\n+                .filter(Objects.&nonNull)\n+                .collect(Collectors.toList())\n+\n+        valueDefs.add(listValueDef(FilterTypesBuilder.ConditionUnionType.AND.name(), className, null))\n+        valueDefs.add(listValueDef(FilterTypesBuilder.ConditionUnionType.OR.name(), className, null))\n+\n+        builder.inputValueDefinitions(valueDefs)\n+\n+        return builder.build()\n+    }\n+\n+    protected static String composeFilterConditionTypeName(MetaClass metaClass) {\n+        return composeFilterConditionTypeName(metaClass.getName())\n+    }\n+\n+    protected static String composeFilterConditionTypeName(String metaClass) {\n+        return composeFilterTypeName(metaClass, \"FilterCondition\")\n+    }\n+\n+    protected static String composeFilterTypeName(String name, String suffix) {\n+        if (!name.startsWith(\"inp_\")) {\n+            name = normalizeName(name)\n+        }\n+        return name + suffix\n+    }\n+\n+    protected static String normalizeName(String entityName) {\n+        return \"inp_\" + StringUtils.uncapitalize(entityName.replaceAll('\\\\$', '_'))\n+    }\n+\n+    protected String getFieldTypeName(MetaProperty metaProperty) {\n+        if (metaProperty.getType() == MetaProperty.Type.DATATYPE) {\n+            return getDatatypeFieldTypeName(metaProperty)\n+        }\n+\n+        if (metaProperty.getType() == MetaProperty.Type.ENUM) {\n+            return getEnumFieldTypeName(metaProperty.getJavaType())\n+        }\n+\n+        if ((metaProperty.getType() == MetaProperty.Type.ASSOCIATION || metaProperty.getType() == MetaProperty.Type.COMPOSITION)) {\n+            return getReferenceTypeName(metaProperty)\n+        }\n+\n+        throw new UnsupportedOperationException(String.format(\"Can't define field type name for metaProperty %s class %s\", metaProperty, metaProperty.getJavaType()))\n+    }\n+\n+    protected String getReferenceTypeName(MetaProperty metaProperty) {\n+        if (metadataTools.isJpaEntity(metaProperty.getRange().asClass())) {\n+            return normalizeName(metaProperty.getRange().asClass().getName())\n+        } else {\n+            return \"String\"\n+        }\n+    }\n+    protected static String getEnumFieldTypeName(Class<?> javaType) {\n+        return javaType.getSimpleName()\n+    }\n+    protected static String getDatatypeFieldTypeName(MetaProperty metaProperty) {\n+        Class<?> javaType = metaProperty.getRange().asDatatype().getJavaClass()\n+\n+        if (String.class.isAssignableFrom(javaType))\n+            return Scalars.GraphQLString.getName()\n+        if (Integer.class.isAssignableFrom(javaType) || int.class.isAssignableFrom(javaType)) {\n+            return Scalars.GraphQLInt.getName()\n+        }\n+        if (Short.class.isAssignableFrom(javaType) || short.class.isAssignableFrom(javaType)) {\n+            return Scalars.GraphQLShort.getName()\n+        }\n+        if (Float.class.isAssignableFrom(javaType) || float.class.isAssignableFrom(javaType)\n+                || Double.class.isAssignableFrom(javaType) || double.class.isAssignableFrom(javaType)) {\n+            return Scalars.GraphQLFloat.getName()\n+        }\n+        if (Boolean.class.isAssignableFrom(javaType) || boolean.class.isAssignableFrom(javaType)) {\n+            return Scalars.GraphQLBoolean.getName()\n+        }\n+\n+        if (UUID.class.isAssignableFrom(javaType)) {\n+            return CustomScalars.GraphQLUUID.getName()\n+        }\n+        if (Long.class.isAssignableFrom(javaType) || long.class.isAssignableFrom(javaType)) {\n+            return CustomScalars.GraphQLLong.getName()\n+        }\n+        if (BigDecimal.class.isAssignableFrom(javaType)) {\n+            return CustomScalars.GraphQLBigDecimal.getName()\n+        }\n+        if (Date.class.isAssignableFrom(javaType)) {\n+            return CustomScalars.GraphQLDate.getName()\n+        }\n+        if (LocalDateTime.class.isAssignableFrom(javaType)) {\n+            return CustomScalars.GraphQLLocalDateTime.getName()\n+        }\n+\n+        return \"String\"\n+    }\n+}"
  },
  {
    "sha": "ac02cc6a899a14d07612c2d4785c9b4bd79835a6",
    "filename": "graphql/src/test/groovy/FiltrationTest.groovy",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/groovy/FiltrationTest.groovy",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/groovy/FiltrationTest.groovy",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/groovy/FiltrationTest.groovy?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,30 @@\n+import io.jmix.core.Metadata\n+import io.jmix.graphql.schema.FilterTypesBuilder\n+import org.springframework.beans.factory.annotation.Autowired\n+import test_support.entity.CarDto\n+\n+class FiltrationTest extends AbstractGraphQLTest {\n+\n+    @Autowired\n+    private FilterTypesBuilder filterTypesBuilder\n+    @Autowired\n+    private Metadata metadata\n+\n+    @SuppressWarnings('unused')\n+    void setup() {\n+\n+    }\n+\n+    def \"buildFilterConditionType\"() {\n+        given:\n+        def conditionType\n+\n+        when:\n+        conditionType = filterTypesBuilder.buildFilterConditionType(metadata.findClass(CarDto))\n+        def standard = buildStandardFilterType(metadata.findClass(CarDto))\n+\n+        then:\n+        conditionType != null\n+        conditionType.isEqualTo(standard)\n+    }\n+}"
  },
  {
    "sha": "f682fda6b9f2189f10570071903639840ed84219",
    "filename": "graphql/src/test/java/test_support/GraphQLTestConfiguration.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/GraphQLTestConfiguration.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/GraphQLTestConfiguration.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/GraphQLTestConfiguration.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2021 Haulmont.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package test_support;\n+\n+import io.jmix.core.JmixModules;\n+import io.jmix.core.Resources;\n+import io.jmix.core.Stores;\n+import io.jmix.core.annotation.JmixModule;\n+import io.jmix.core.impl.JmixMessageSource;\n+import io.jmix.data.impl.JmixEntityManagerFactoryBean;\n+import io.jmix.data.impl.JmixTransactionManager;\n+import io.jmix.data.persistence.DbmsSpecifics;\n+import io.jmix.graphql.GraphqlConfiguration;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.cache.concurrent.ConcurrentMapCacheManager;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.*;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;\n+import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\n+import org.springframework.orm.jpa.JpaVendorAdapter;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+@SuppressWarnings(\"SpringJavaInjectionPointsAutowiringInspection\")\n+@Configuration\n+@ComponentScan\n+@PropertySource(\"classpath:/test_support/test-app.properties\")\n+@JmixModule(dependsOn = GraphqlConfiguration.class)\n+public class GraphQLTestConfiguration {\n+\n+    @Bean\n+    public MessageSource messageSource(JmixModules modules, Resources resources) {\n+        return new JmixMessageSource(modules, resources);\n+    }\n+\n+    @Bean\n+    @Primary\n+    DataSource dataSource() {\n+        return new EmbeddedDatabaseBuilder()\n+                .generateUniqueName(true)\n+                .setType(EmbeddedDatabaseType.HSQL)\n+                .build();\n+    }\n+\n+    @Bean\n+    @Primary\n+    LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource,\n+                                                                DbmsSpecifics dbmsSpecifics,\n+                                                                JmixModules jmixModules,\n+                                                                JpaVendorAdapter jpaVendorAdapter,\n+                                                                Resources resources) {\n+        return new JmixEntityManagerFactoryBean(Stores.MAIN, dataSource, jpaVendorAdapter, dbmsSpecifics, jmixModules, resources);\n+    }\n+\n+    @Bean\n+    @Primary\n+    PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {\n+        return new JmixTransactionManager(Stores.MAIN, entityManagerFactory);\n+    }\n+\n+    @Bean\n+    @Primary\n+    JdbcTemplate jdbcTemplate(DataSource dataSource) {\n+        return new JdbcTemplate(dataSource);\n+    }\n+\n+    @Bean\n+    @Primary\n+    TransactionTemplate transactionTemplate(PlatformTransactionManager transactionManager) {\n+        return new TransactionTemplate(transactionManager);\n+    }\n+\n+    @Bean\n+    public CacheManager cacheManager() {\n+        return new ConcurrentMapCacheManager();\n+    }\n+\n+}"
  },
  {
    "sha": "0c003faf760c074c38164549848b5c33927b26c3",
    "filename": "graphql/src/test/java/test_support/TestContextInitializer.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/TestContextInitializer.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/TestContextInitializer.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/TestContextInitializer.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Haulmont.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package test_support;\n+\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+public class TestContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        ((DefaultListableBeanFactory) applicationContext.getBeanFactory()).setAllowBeanDefinitionOverriding(false);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "30f12355bb3034387dc156bf893399473fb75af4",
    "filename": "graphql/src/test/java/test_support/entity/Car.java",
    "status": "added",
    "additions": 291,
    "deletions": 0,
    "changes": 291,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/Car.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/Car.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/Car.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,291 @@\n+package test_support.entity;\n+\n+import io.jmix.core.DeletePolicy;\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.entity.annotation.OnDelete;\n+import io.jmix.core.metamodel.annotation.DependsOnProperties;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+import io.jmix.core.validation.group.RestApiChecks;\n+import org.springframework.data.annotation.CreatedBy;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedBy;\n+import org.springframework.data.annotation.LastModifiedDate;\n+import test_support.entity.constraints.PurchasedAfterManufactured;\n+import test_support.entity.constraints.ReliabilityPolicyCompliant;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+@PurchasedAfterManufactured\n+@ReliabilityPolicyCompliant\n+@Table(name = \"SCR_CAR\")\n+@JmixEntity\n+@Entity(name = \"scr$Car\")\n+public class Car {\n+\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    @NotNull(message = \"{msg://com.company.scr.entity/manufacturerEmpty}\", groups = {RestApiChecks.class})\n+    @Column(name = \"MANUFACTURER\", nullable = false)\n+    protected String manufacturer;\n+\n+    @Column(name = \"MODEL\")\n+    protected String model;\n+\n+    @Size(min = 0, max = 5)\n+    @Pattern(regexp = \"[a-zA-Z]{2}\\\\d{3}\")\n+    @Column(name = \"REG_NUMBER\", length = 5)\n+    protected String regNumber;\n+\n+    @PastOrPresent\n+    @Temporal(TemporalType.DATE)\n+    @Column(name = \"PURCHASE_DATE\")\n+    protected Date purchaseDate;\n+\n+    @PastOrPresent\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @Column(name = \"MANUFACTURE_DATE\")\n+    protected Date manufactureDate;\n+\n+    @Column(name = \"WHEEL_ON_RIGHT\")\n+    protected Boolean wheelOnRight;\n+\n+    @Column(name = \"CAR_TYPE\", nullable = false)\n+    protected String carType;\n+\n+    @Column(name = \"ECO_RANK\")\n+    protected Integer ecoRank;\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"GARAGE_ID\")\n+    protected Garage garage;\n+\n+    @Digits(fraction = 0, integer = 10)\n+    @Column(name = \"MAX_PASSENGERS\")\n+    protected Integer maxPassengers;\n+\n+    @Positive\n+    @Digits(fraction = 4, integer = 10)\n+    @Column(name = \"PRICE\")\n+    protected BigDecimal price;\n+\n+    @PositiveOrZero\n+    @Digits(fraction = 0, integer = 10)\n+    @Column(name = \"MILEAGE\")\n+    protected Double mileage;\n+\n+    @OnDelete(DeletePolicy.CASCADE)\n+    @OneToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"TECHNICAL_CERTIFICATE_ID\")\n+    protected TechnicalCertificate technicalCertificate;\n+\n+    @Column(name = \"VERSION\", nullable = false)\n+    @Version\n+    private Integer version;\n+\n+    @CreatedBy\n+    @Column(name = \"CREATED_BY\")\n+    private String createdBy;\n+\n+    @CreatedDate\n+    @Column(name = \"CREATED_DATE\")\n+    @Temporal(TemporalType.DATE)\n+    private Date createdDate;\n+\n+    @LastModifiedBy\n+    @Column(name = \"LAST_MODIFIED_BY\")\n+    private String lastModifiedBy;\n+\n+    @LastModifiedDate\n+    @Column(name = \"LAST_MODIFIED_DATE\")\n+    @Temporal(TemporalType.DATE)\n+    private Date lastModifiedDate;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+\n+    public Date getLastModifiedDate() {\n+        return lastModifiedDate;\n+    }\n+\n+    public void setLastModifiedDate(Date lastModifiedDate) {\n+        this.lastModifiedDate = lastModifiedDate;\n+    }\n+\n+    public String getLastModifiedBy() {\n+        return lastModifiedBy;\n+    }\n+\n+    public void setLastModifiedBy(String lastModifiedBy) {\n+        this.lastModifiedBy = lastModifiedBy;\n+    }\n+\n+    public Date getCreatedDate() {\n+        return createdDate;\n+    }\n+\n+    public void setCreatedDate(Date createdDate) {\n+        this.createdDate = createdDate;\n+    }\n+\n+    public String getCreatedBy() {\n+        return createdBy;\n+    }\n+\n+    public void setCreatedBy(String createdBy) {\n+        this.createdBy = createdBy;\n+    }\n+\n+    public Integer getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(Integer version) {\n+        this.version = version;\n+    }\n+\n+//    @ManyToOne(fetch = FetchType.LAZY)\n+//    @JoinColumn(name = \"PHOTO_ID\")\n+//    protected FileDescriptor photo;\n+\n+    public Date getManufactureDate() {\n+        return manufactureDate;\n+    }\n+\n+    public void setManufactureDate(Date manufactureDate) {\n+        this.manufactureDate = manufactureDate;\n+    }\n+\n+//    public void setPhoto(FileDescriptor photo) {\n+//        this.photo = photo;\n+//    }\n+//\n+//    public FileDescriptor getPhoto() {\n+//        return photo;\n+//    }\n+\n+\n+    public void setTechnicalCertificate(TechnicalCertificate technicalCertificate) {\n+        this.technicalCertificate = technicalCertificate;\n+    }\n+\n+    public TechnicalCertificate getTechnicalCertificate() {\n+        return technicalCertificate;\n+    }\n+\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setMileage(Double mileage) {\n+        this.mileage = mileage;\n+    }\n+\n+    public Double getMileage() {\n+        return mileage;\n+    }\n+\n+\n+    public void setModel(String model) {\n+        this.model = model;\n+    }\n+\n+    public String getModel() {\n+        return model;\n+    }\n+\n+\n+    public void setMaxPassengers(Integer maxPassengers) {\n+        this.maxPassengers = maxPassengers;\n+    }\n+\n+    public Integer getMaxPassengers() {\n+        return maxPassengers;\n+    }\n+\n+\n+    public void setGarage(Garage garage) {\n+        this.garage = garage;\n+    }\n+\n+    public Garage getGarage() {\n+        return garage;\n+    }\n+\n+\n+    public void setEcoRank(EcoRank ecoRank) {\n+        this.ecoRank = ecoRank == null ? null : ecoRank.getId();\n+    }\n+\n+    public EcoRank getEcoRank() {\n+        return ecoRank == null ? null : EcoRank.fromId(ecoRank);\n+    }\n+\n+\n+    public void setCarType(CarType carType) {\n+        this.carType = carType == null ? null : carType.getId();\n+    }\n+\n+    public CarType getCarType() {\n+        return carType == null ? null : CarType.fromId(carType);\n+    }\n+\n+\n+    public void setPurchaseDate(Date purchaseDate) {\n+        this.purchaseDate = purchaseDate;\n+    }\n+\n+    public Date getPurchaseDate() {\n+        return purchaseDate;\n+    }\n+\n+\n+    public void setRegNumber(String regNumber) {\n+        this.regNumber = regNumber;\n+    }\n+\n+    public String getRegNumber() {\n+        return regNumber;\n+    }\n+\n+    public void setManufacturer(String manufacturer) {\n+        this.manufacturer = manufacturer;\n+    }\n+\n+    public String getManufacturer() {\n+        return manufacturer;\n+    }\n+\n+    public void setWheelOnRight(Boolean wheelOnRight) {\n+        this.wheelOnRight = wheelOnRight;\n+    }\n+\n+    public Boolean getWheelOnRight() {\n+        return wheelOnRight;\n+    }\n+\n+    @InstanceName\n+    @DependsOnProperties({\"manufacturer\", \"model\"})\n+    public String getDisplayName() {\n+        return String.format(\"%s - %s\", manufacturer, model);\n+    }\n+\n+}"
  },
  {
    "sha": "33014a3e5df6ca7813764a48c89d7fe692e4a560",
    "filename": "graphql/src/test/java/test_support/entity/CarDto.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/CarDto.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/CarDto.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/CarDto.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,59 @@\n+package test_support.entity;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.entity.annotation.JmixId;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+import io.jmix.core.metamodel.annotation.JmixProperty;\n+\n+import java.math.BigDecimal;\n+import java.util.UUID;\n+\n+@JmixEntity(name = \"scr_CarDto\")\n+public class CarDto {\n+\n+    @JmixGeneratedValue\n+    @JmixId\n+    @JmixProperty(mandatory = true)\n+    private UUID id;\n+\n+    @JmixProperty\n+    private String manufacturer;\n+\n+    @JmixProperty\n+    private BigDecimal price;\n+\n+    @JmixProperty\n+    private String model;\n+\n+    public String getModel() {\n+        return model;\n+    }\n+\n+    public void setModel(String model) {\n+        this.model = model;\n+    }\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+\n+    public String getManufacturer() {\n+        return manufacturer;\n+    }\n+\n+    public void setManufacturer(String manufacturer) {\n+        this.manufacturer = manufacturer;\n+    }\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d774cfa97ec3d07a12c2bfc38fabde1aaa4e64c9",
    "filename": "graphql/src/test/java/test_support/entity/CarRent.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/CarRent.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/CarRent.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/CarRent.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,78 @@\n+package test_support.entity;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_CAR_RENT\")\n+@JmixEntity\n+@Entity(name = \"scr$CarRent\")\n+public class CarRent {\n+\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    @ManyToOne(fetch = FetchType.LAZY, optional = false)\n+    @JoinColumn(name = \"CAR_ID\")\n+    protected Car car;\n+\n+    @Temporal(TemporalType.DATE)\n+    @Column(name = \"FROM_DATE\")\n+    protected Date fromDate;\n+\n+    @Temporal(TemporalType.TIME)\n+    @Column(name = \"FROM_TIME\")\n+    protected Date fromTime;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @Column(name = \"FROM_DATE_TIME\")\n+    protected Date fromDateTime;\n+\n+    public void setFromDate(Date fromDate) {\n+        this.fromDate = fromDate;\n+    }\n+\n+    public Date getFromDate() {\n+        return fromDate;\n+    }\n+\n+    public void setFromTime(Date fromTime) {\n+        this.fromTime = fromTime;\n+    }\n+\n+    public Date getFromTime() {\n+        return fromTime;\n+    }\n+\n+    public void setFromDateTime(Date fromDateTime) {\n+        this.fromDateTime = fromDateTime;\n+    }\n+\n+    public Date getFromDateTime() {\n+        return fromDateTime;\n+    }\n+\n+\n+    public void setCar(Car car) {\n+        this.car = car;\n+    }\n+\n+    public Car getCar() {\n+        return car;\n+    }\n+\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e95081016fd22d80886285f53b9b96a6e95ebf2a",
    "filename": "graphql/src/test/java/test_support/entity/CarType.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/CarType.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/CarType.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/CarType.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,31 @@\n+package test_support.entity;\n+\n+import io.jmix.core.metamodel.datatype.impl.EnumClass;\n+\n+import javax.annotation.Nullable;\n+\n+public enum CarType implements EnumClass<String> {\n+\n+    SEDAN(\"SEDAN\"),\n+    HATCHBACK(\"HATCHBACK\");\n+\n+    private String id;\n+\n+    CarType(String value) {\n+        this.id = value;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Nullable\n+    public static CarType fromId(String id) {\n+        for (CarType at : CarType.values()) {\n+            if (at.getId().equals(id)) {\n+                return at;\n+            }\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6d34e76eac8e6104b18744939dd9d2c73141317d",
    "filename": "graphql/src/test/java/test_support/entity/EcoRank.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/EcoRank.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/EcoRank.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/EcoRank.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,33 @@\n+package test_support.entity;\n+\n+import io.jmix.core.metamodel.datatype.impl.EnumClass;\n+\n+import javax.annotation.Nullable;\n+\n+\n+public enum EcoRank implements EnumClass<Integer> {\n+\n+    EURO1(1),\n+    EURO2(2),\n+    EURO3(3);\n+\n+    private Integer id;\n+\n+    EcoRank(Integer value) {\n+        this.id = value;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    @Nullable\n+    public static EcoRank fromId(Integer id) {\n+        for (EcoRank at : EcoRank.values()) {\n+            if (at.getId().equals(id)) {\n+                return at;\n+            }\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1c2ed6a6f9ebf833eaf973801064402cef1483ba",
    "filename": "graphql/src/test/java/test_support/entity/FavoriteCar.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/FavoriteCar.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/FavoriteCar.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/FavoriteCar.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,68 @@\n+package test_support.entity;\n+\n+import io.jmix.core.DeletePolicy;\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.entity.annotation.OnDeleteInverse;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_FAVORITE_CAR\")\n+@JmixEntity\n+@Entity(name = \"scr$FavoriteCar\")\n+public class FavoriteCar {\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    @InstanceName\n+    @ManyToOne(fetch = FetchType.LAZY, optional = false)\n+    @JoinColumn(name = \"CAR_ID\")\n+    protected Car car;\n+\n+    @OnDeleteInverse(DeletePolicy.CASCADE)\n+    @ManyToOne(fetch = FetchType.LAZY, optional = false)\n+    @JoinColumn(name = \"USER_ID\")\n+    protected User user;\n+\n+    @Column(name = \"NOTES\")\n+    protected String notes;\n+\n+    public void setNotes(String notes) {\n+        this.notes = notes;\n+    }\n+\n+    public String getNotes() {\n+        return notes;\n+    }\n+\n+\n+    public void setCar(Car car) {\n+        this.car = car;\n+    }\n+\n+    public Car getCar() {\n+        return car;\n+    }\n+\n+    public void setUser(User user) {\n+        this.user = user;\n+    }\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3009bdad417f307aff56238b5fe9176aa90c08de",
    "filename": "graphql/src/test/java/test_support/entity/Garage.java",
    "status": "added",
    "additions": 139,
    "deletions": 0,
    "changes": 139,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/Garage.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/Garage.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/Garage.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,139 @@\n+package test_support.entity;\n+\n+import io.jmix.core.DeletePolicy;\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.entity.annotation.OnDelete;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+import io.jmix.core.metamodel.annotation.JmixProperty;\n+\n+import javax.persistence.*;\n+import java.time.LocalTime;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_GARAGE\")\n+@JmixEntity\n+@Entity(name = \"scr$Garage\")\n+public class Garage {\n+\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    @OneToMany(mappedBy = \"garage\")\n+    private List<Car> cars;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    @InstanceName\n+    @Column(name = \"NAME\", nullable = false)\n+    protected String name;\n+\n+    @Column(name = \"ADDRESS\")\n+    protected String address;\n+\n+    @JoinTable(name = \"SCR_GARAGE_USER_LINK\",\n+            joinColumns = @JoinColumn(name = \"GARAGE_ID\"),\n+            inverseJoinColumns = @JoinColumn(name = \"USER_ID\"))\n+    @OnDelete(DeletePolicy.CASCADE)\n+    @ManyToMany\n+    protected List<User> personnel;\n+\n+    @Column(name = \"CAPACITY\")\n+    protected Integer capacity;\n+\n+    @Column(name = \"VAN_ENTRY\")\n+    protected Boolean vanEntry;\n+\n+    @Column(name = \"WORKING_HOURS_FROM\")\n+    protected LocalTime workingHoursFrom;\n+\n+    @Column(name = \"WORKING_HOURS_TO\")\n+    protected LocalTime workingHoursTo;\n+\n+    @Transient\n+    @JmixProperty\n+    protected List<Car> currentCars;\n+\n+    public List<Car> getCars() {\n+        return cars;\n+    }\n+\n+    public void setCars(List<Car> cars) {\n+        this.cars = cars;\n+    }\n+\n+    public List<Car> getCurrentCars() {\n+        return currentCars;\n+    }\n+\n+    public void setCurrentCars(List<Car> currentCars) {\n+        this.currentCars = currentCars;\n+    }\n+\n+    public LocalTime getWorkingHoursTo() {\n+        return workingHoursTo;\n+    }\n+\n+    public void setWorkingHoursTo(LocalTime workingHoursTo) {\n+        this.workingHoursTo = workingHoursTo;\n+    }\n+\n+    public LocalTime getWorkingHoursFrom() {\n+        return workingHoursFrom;\n+    }\n+\n+    public void setWorkingHoursFrom(LocalTime workingHoursFrom) {\n+        this.workingHoursFrom = workingHoursFrom;\n+    }\n+\n+    public Boolean getVanEntry() {\n+        return vanEntry;\n+    }\n+\n+    public void setVanEntry(Boolean vanEntry) {\n+        this.vanEntry = vanEntry;\n+    }\n+\n+    public List<User> getPersonnel() {\n+        return personnel;\n+    }\n+\n+    public void setPersonnel(List<User> personnel) {\n+        this.personnel = personnel;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setCapacity(Integer capacity) {\n+        this.capacity = capacity;\n+    }\n+\n+    public Integer getCapacity() {\n+        return capacity;\n+    }\n+\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d90d9f7efed7f389898b90998537f7a47315f5b4",
    "filename": "graphql/src/test/java/test_support/entity/ScrUserInfo.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/ScrUserInfo.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/ScrUserInfo.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/ScrUserInfo.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,71 @@\n+package test_support.entity;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+import io.jmix.core.metamodel.annotation.JmixProperty;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import java.util.List;\n+import java.util.UUID;\n+\n+\n+/**\n+ * Non-persistent user info with additional fields for using in REST.\n+ */\n+@JmixEntity(name = \"ScrUserInfo\")\n+public class ScrUserInfo {\n+\n+\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    @JmixProperty\n+    String firstName;\n+\n+    @JmixProperty\n+    String lastName;\n+\n+    @JmixProperty\n+    List<Car> favouriteCars;\n+\n+    public ScrUserInfo(String firstName, String lastName, List<Car> favouriteCars) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+        this.favouriteCars = favouriteCars;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public List<Car> getFavouriteCars() {\n+        return favouriteCars;\n+    }\n+\n+    public void setFavouriteCars(List<Car> favouriteCars) {\n+        this.favouriteCars = favouriteCars;\n+    }\n+}"
  },
  {
    "sha": "770a5bda9efdadcf4b99f62c79fd098dd515ab55",
    "filename": "graphql/src/test/java/test_support/entity/SparePart.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/SparePart.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/SparePart.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/SparePart.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,53 @@\n+package test_support.entity;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.UUID;\n+\n+@JmixEntity\n+@Table(name = \"SCR_SPARE_PART\")\n+@Entity(name = \"scr$SparePart\")\n+public class SparePart {\n+\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    @InstanceName\n+    @Column(name = \"NAME\")\n+    protected String name;\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"SPARE_PARTS_ID\")\n+    protected SparePart spareParts;\n+\n+    public SparePart getSpareParts() {\n+        return spareParts;\n+    }\n+\n+    public void setSpareParts(SparePart spareParts) {\n+        this.spareParts = spareParts;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "793ceb5a54fad98d8954e91cb97d1e648254ada6",
    "filename": "graphql/src/test/java/test_support/entity/TechnicalCertificate.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/TechnicalCertificate.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/TechnicalCertificate.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/TechnicalCertificate.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,52 @@\n+package test_support.entity;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_TECHNICAL_CERTIFICATE\")\n+@JmixEntity\n+@Entity(name = \"scr$TechnicalCertificate\")\n+public class TechnicalCertificate {\n+\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    @InstanceName\n+    @Column(name = \"CERT_NUMBER\")\n+    protected String certNumber;\n+\n+    @OneToOne(fetch = FetchType.LAZY, mappedBy = \"technicalCertificate\")\n+    protected Car car;\n+\n+    public void setCertNumber(String certNumber) {\n+        this.certNumber = certNumber;\n+    }\n+\n+    public String getCertNumber() {\n+        return certNumber;\n+    }\n+\n+    public void setCar(Car car) {\n+        this.car = car;\n+    }\n+\n+    public Car getCar() {\n+        return car;\n+    }\n+\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "169b70eb8a8dc237736d41a316b72d0edcf973a0",
    "filename": "graphql/src/test/java/test_support/entity/User.java",
    "status": "added",
    "additions": 170,
    "deletions": 0,
    "changes": 170,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/User.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/User.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/User.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,170 @@\n+package test_support.entity;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.entity.annotation.SystemLevel;\n+import io.jmix.core.metamodel.annotation.DependsOnProperties;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.Email;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+@JmixEntity\n+@Entity(name = \"scr_User\")\n+@Table(name = \"SCR_USER\", indexes = {\n+        @Index(name = \"IDX_SCR_USER_ON_USERNAME\", columnList = \"USERNAME\", unique = true)\n+})\n+public class User implements UserDetails\n+//        , GrantedAuthorityContainer\n+{\n+\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    @JmixGeneratedValue\n+    private UUID id;\n+\n+    @Version\n+    @Column(name = \"VERSION\", nullable = false)\n+    private Integer version;\n+\n+    @Column(name = \"USERNAME\", nullable = false)\n+    protected String username;\n+\n+    @SystemLevel\n+    @Column(name = \"PASSWORD\")\n+    protected String password;\n+\n+    @Column(name = \"FIRST_NAME\")\n+    protected String firstName;\n+\n+    @Column(name = \"LAST_NAME\")\n+    protected String lastName;\n+\n+    @Email\n+    @Column(name = \"EMAIL\")\n+    protected String email;\n+\n+    @Column(name = \"ENABLED\")\n+    protected Boolean enabled = true;\n+\n+    @Column(name = \"PHONE\")\n+    private String phone;\n+\n+    @Transient\n+    protected Collection<? extends GrantedAuthority> authorities;\n+\n+    public String getPhone() {\n+        return phone;\n+    }\n+\n+    public void setPhone(String phone) {\n+        this.phone = phone;\n+    }\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    public Integer getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(Integer version) {\n+        this.version = version;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    @Override\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public Boolean getEnabled() {\n+        return enabled;\n+    }\n+\n+    public void setEnabled(Boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    @Override\n+    public Collection<? extends GrantedAuthority> getAuthorities() {\n+        return authorities != null ? authorities : Collections.emptyList();\n+    }\n+\n+//    @Override\n+//    public void setAuthorities(Collection<? extends GrantedAuthority> authorities) {\n+//        this.authorities = authorities;\n+//    }\n+\n+    @Override\n+    public boolean isAccountNonExpired() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isAccountNonLocked() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isCredentialsNonExpired() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    @InstanceName\n+    @DependsOnProperties({\"firstName\", \"lastName\", \"username\"})\n+    public String getDisplayName() {\n+        return String.format(\"%s %s [%s]\", (firstName != null ? firstName : \"\"),\n+                (lastName != null ? lastName : \"\"), username);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "87ee6cfdb1f274dfe35007c692b703de9e9aee3b",
    "filename": "graphql/src/test/java/test_support/entity/constraints/PurchasedAfterManufactured.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/constraints/PurchasedAfterManufactured.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/constraints/PurchasedAfterManufactured.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/constraints/PurchasedAfterManufactured.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,15 @@\n+package test_support.entity.constraints;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+import java.lang.annotation.*;\n+\n+@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = PurchasedAfterManufacturedValidator.class)\n+@Documented\n+public @interface PurchasedAfterManufactured {\n+    String message() default \"{msg://com.company.scr.entity.constraints/Car.PurchasedAfterManufactured.constraintViolationMessage}\";\n+    Class<?>[] groups() default {};\n+    Class<? extends Payload>[] payload() default {};\n+}"
  },
  {
    "sha": "fa7e79098d7fd01105cb1aebda0e0e7694623d48",
    "filename": "graphql/src/test/java/test_support/entity/constraints/PurchasedAfterManufacturedValidator.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/constraints/PurchasedAfterManufacturedValidator.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/constraints/PurchasedAfterManufacturedValidator.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/constraints/PurchasedAfterManufacturedValidator.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,26 @@\n+package test_support.entity.constraints;\n+\n+import test_support.entity.Car;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+public class PurchasedAfterManufacturedValidator implements ConstraintValidator<PurchasedAfterManufactured, Car> {\n+\n+    public void initialize(PurchasedAfterManufactured constraint) {\n+        // do nothing\n+    }\n+\n+    public boolean isValid(Car car, ConstraintValidatorContext context) {\n+//        EntityStates entityStates = AppBeans.get(EntityStates.class);\n+//\n+//        if (!entityStates.isLoaded(car, \"manufactureDate\")\n+//                || !entityStates.isLoaded(car, \"purchaseDate\")\n+//                || car.getManufactureDate() == null\n+//                || car.getPurchaseDate() == null) {\n+            return true;\n+//        } else {\n+//            return car.getManufactureDate().before(car.getPurchaseDate());\n+//        }\n+    }\n+}"
  },
  {
    "sha": "cc7ed14d2b41d1251cb700d4e6a97feb003611b9",
    "filename": "graphql/src/test/java/test_support/entity/constraints/ReliabilityPolicyCompliant.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/constraints/ReliabilityPolicyCompliant.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/constraints/ReliabilityPolicyCompliant.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/constraints/ReliabilityPolicyCompliant.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,15 @@\n+package test_support.entity.constraints;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+import java.lang.annotation.*;\n+\n+@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = ReliabilityPolicyCompliantValidator.class)\n+@Documented\n+public @interface ReliabilityPolicyCompliant {\n+    String message() default \"{msg://com.company.scr.entity.constraints/Car.ReliabilityPolicyCompliant.constraintViolationMessage}\";\n+    Class<?>[] groups() default {};\n+    Class<? extends Payload>[] payload() default {};\n+}"
  },
  {
    "sha": "0545bd95ba3d893dd498e2cafe9b0532beafbc74",
    "filename": "graphql/src/test/java/test_support/entity/constraints/ReliabilityPolicyCompliantValidator.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/constraints/ReliabilityPolicyCompliantValidator.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/constraints/ReliabilityPolicyCompliantValidator.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/constraints/ReliabilityPolicyCompliantValidator.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,38 @@\n+package test_support.entity.constraints;\n+\n+import test_support.entity.Car;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+public class ReliabilityPolicyCompliantValidator implements ConstraintValidator<ReliabilityPolicyCompliant, Car> {\n+    private static final int mileageTreshold = 100_000;\n+\n+    @Override\n+    public void initialize(ReliabilityPolicyCompliant constraintAnnotation) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public boolean isValid(Car car, ConstraintValidatorContext context) {\n+//        EntityStates entityStates =  AppBeans.get(EntityStates.class);\n+//\n+//        if (!entityStates.isLoaded(car, \"manufactureDate\")\n+//                || !entityStates.isLoaded(car, \"mileage\")\n+//                || car.getManufactureDate() == null\n+//                || car.getMileage() == null) {\n+            return true;\n+//        }\n+//\n+//        return !(car.getManufactureDate().before(getDateThreshold()) && car.getMileage() < mileageTreshold);\n+    }\n+\n+    private Date getDateThreshold() {\n+        Calendar c = new GregorianCalendar();\n+        c.add(Calendar.YEAR, -10);\n+        return c.getTime();\n+    }\n+}"
  },
  {
    "sha": "4641f8a394de6b2038371c99a84a0746009c4257",
    "filename": "graphql/src/test/java/test_support/entity/sales/Customer.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/sales/Customer.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/sales/Customer.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/sales/Customer.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,52 @@\n+package test_support.entity.sales;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import java.util.UUID;\n+\n+@JmixEntity\n+@Table(name = \"SCR_CUSTOMER\")\n+@Entity(name = \"scr_Customer\")\n+public class Customer {\n+    @JmixGeneratedValue\n+    @Column(name = \"ID\", nullable = false)\n+    @Id\n+    private UUID id;\n+\n+    @InstanceName\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    @Column(name = \"EMAIL\")\n+    private String email;\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f376b92c35c66ed74873af052640977045b7cabe",
    "filename": "graphql/src/test/java/test_support/entity/sales/Order.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/sales/Order.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/sales/Order.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/sales/Order.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,75 @@\n+package test_support.entity.sales;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.Composition;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@JmixEntity\n+@Table(name = \"SCR_ORDER\")\n+@Entity(name = \"scr_Order\")\n+public class Order {\n+    @JmixGeneratedValue\n+    @Column(name = \"ID\", nullable = false)\n+    @Id\n+    private UUID id;\n+\n+    @Column(name = \"DATE_\")\n+    private LocalDateTime date;\n+\n+    @Composition\n+    @OneToMany(mappedBy = \"order\")\n+    private List<OrderLine> lines;\n+\n+    @Column(name = \"AMOUNT\", precision = 19, scale = 2)\n+    private BigDecimal amount;\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"CUSTOMER_ID\")\n+    private Customer customer;\n+\n+    public Customer getCustomer() {\n+        return customer;\n+    }\n+\n+    public void setCustomer(Customer customer) {\n+        this.customer = customer;\n+    }\n+\n+    public BigDecimal getAmount() {\n+        return amount;\n+    }\n+\n+    public void setAmount(BigDecimal amount) {\n+        this.amount = amount;\n+    }\n+\n+    public List<OrderLine> getLines() {\n+        return lines;\n+    }\n+\n+    public void setLines(List<OrderLine> lines) {\n+        this.lines = lines;\n+    }\n+\n+    public LocalDateTime getDate() {\n+        return date;\n+    }\n+\n+    public void setDate(LocalDateTime date) {\n+        this.date = date;\n+    }\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3714426e92b1e6cf01758fce302faff4250426d9",
    "filename": "graphql/src/test/java/test_support/entity/sales/OrderLine.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/sales/OrderLine.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/sales/OrderLine.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/sales/OrderLine.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,61 @@\n+package test_support.entity.sales;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.NotNull;\n+import java.util.UUID;\n+\n+@JmixEntity\n+@Table(name = \"SCR_ORDER_LINE\")\n+@Entity(name = \"scr_OrderLine\")\n+public class OrderLine {\n+    @JmixGeneratedValue\n+    @Column(name = \"ID\", nullable = false)\n+    @Id\n+    private UUID id;\n+\n+    @NotNull\n+    @ManyToOne(fetch = FetchType.LAZY, optional = false)\n+    @JoinColumn(name = \"PRODUCT_ID\", nullable = false)\n+    private Product product;\n+\n+    @Column(name = \"QUANTITY\")\n+    private Integer quantity;\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"ORDER_ID\")\n+    private Order order;\n+\n+    public Order getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(Order order) {\n+        this.order = order;\n+    }\n+\n+    public Integer getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(Integer quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public Product getProduct() {\n+        return product;\n+    }\n+\n+    public void setProduct(Product product) {\n+        this.product = product;\n+    }\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0d28cd52db61a0ce5df0ea277179ac61721db1de",
    "filename": "graphql/src/test/java/test_support/entity/sales/Product.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/sales/Product.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/sales/Product.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/sales/Product.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,63 @@\n+package test_support.entity.sales;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+import test_support.entity.Car;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.NotNull;\n+import java.math.BigDecimal;\n+import java.util.UUID;\n+\n+@JmixEntity\n+@Table(name = \"SCR_PRODUCT\")\n+@Entity(name = \"scr_Product\")\n+public class Product {\n+    @JmixGeneratedValue\n+    @Column(name = \"ID\", nullable = false)\n+    @Id\n+    private UUID id;\n+\n+    @NotNull\n+    @ManyToOne(fetch = FetchType.LAZY, optional = false)\n+    @JoinColumn(name = \"CAR_ID\", nullable = false)\n+    private Car car;\n+\n+    @Column(name = \"PRICE\", precision = 19, scale = 2)\n+    private BigDecimal price;\n+\n+    @Column(name = \"SPECIAL\")\n+    private Boolean special;\n+\n+    public Boolean getSpecial() {\n+        return special;\n+    }\n+\n+    public void setSpecial(Boolean special) {\n+        this.special = special;\n+    }\n+\n+    public BigDecimal getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(BigDecimal price) {\n+        this.price = price;\n+    }\n+\n+    public Car getCar() {\n+        return car;\n+    }\n+\n+    public void setCar(Car car) {\n+        this.car = car;\n+    }\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e17b72631cfa7a63fdda181b16be649e0c2f0294",
    "filename": "graphql/src/test/java/test_support/entity/test/AssociationM2MTestEntity.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/AssociationM2MTestEntity.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/AssociationM2MTestEntity.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/test/AssociationM2MTestEntity.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,55 @@\n+package test_support.entity.test;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_ASSOCIATION_M2M_TEST_ENTITY\")\n+@JmixEntity\n+@Entity(name = \"scr_AssociationM2MTestEntity\")\n+public class AssociationM2MTestEntity {\n+\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+\n+    @JoinTable(name = \"SCR_DATATYPES_TEST_ENTITY_ASSOCIATION_M2M_TEST_ENTITY_LINK\",\n+        joinColumns = @JoinColumn(name = \"ASSOCIATION_M2_M_TEST_ENTITY_ID\"),\n+        inverseJoinColumns = @JoinColumn(name = \"DATATYPES_TEST_ENTITY_ID\"))\n+    @ManyToMany\n+    protected List<DatatypesTestEntity> datatypesTestEntities;\n+\n+    @InstanceName\n+    @Column(name = \"NAME\")\n+    protected String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public List<DatatypesTestEntity> getDatatypesTestEntities() {\n+        return datatypesTestEntities;\n+    }\n+\n+    public void setDatatypesTestEntities(List<DatatypesTestEntity> datatypesTestEntities) {\n+        this.datatypesTestEntities = datatypesTestEntities;\n+    }\n+}"
  },
  {
    "sha": "becbfe835f167eeafe73c7ab2922de0ebf12225c",
    "filename": "graphql/src/test/java/test_support/entity/test/AssociationM2OTestEntity.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/AssociationM2OTestEntity.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/AssociationM2OTestEntity.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/test/AssociationM2OTestEntity.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,43 @@\n+package test_support.entity.test;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_ASSOCIATION_M2O_TEST_ENTITY\")\n+@JmixEntity\n+@Entity(name = \"scr_AssociationM2OTestEntity\")\n+public class AssociationM2OTestEntity {\n+\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+\n+    @InstanceName\n+    @Column(name = \"NAME\")\n+    protected String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"
  },
  {
    "sha": "03c74b4e5615281174813ebbd18ed900876b1f52",
    "filename": "graphql/src/test/java/test_support/entity/test/AssociationO2MTestEntity.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/AssociationO2MTestEntity.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/AssociationO2MTestEntity.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/test/AssociationO2MTestEntity.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,50 @@\n+package test_support.entity.test;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_ASSOCIATION_O2M_TEST_ENTITY\")\n+@JmixEntity\n+@Entity(name = \"scr_AssociationO2MTestEntity\")\n+public class AssociationO2MTestEntity {\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"DATATYPES_TEST_ENTITY_ID\")\n+    protected DatatypesTestEntity datatypesTestEntity;\n+\n+    @InstanceName\n+    @Column(name = \"NAME\")\n+    protected String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public DatatypesTestEntity getDatatypesTestEntity() {\n+        return datatypesTestEntity;\n+    }\n+\n+    public void setDatatypesTestEntity(DatatypesTestEntity datatypesTestEntity) {\n+        this.datatypesTestEntity = datatypesTestEntity;\n+    }\n+}"
  },
  {
    "sha": "495806cb37b3800f19e408f81abedd1c851154a7",
    "filename": "graphql/src/test/java/test_support/entity/test/AssociationO2OTestEntity.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/AssociationO2OTestEntity.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/AssociationO2OTestEntity.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/test/AssociationO2OTestEntity.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,59 @@\n+package test_support.entity.test;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_ASSOCIATION_O2O_TEST_ENTITY\")\n+@JmixEntity\n+@Entity(name = \"scr_AssociationO2OTestEntity\")\n+public class AssociationO2OTestEntity {\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+\n+    @OneToOne(fetch = FetchType.LAZY, mappedBy = \"associationO2Oattr\")\n+    protected DatatypesTestEntity datatypesTestEntity;\n+\n+    @InstanceName\n+    @Column(name = \"NAME\")\n+    protected String name;\n+    @OneToOne(fetch = FetchType.LAZY, mappedBy = \"associationO2Oattr\")\n+    protected DeeplyNestedTestEntity deeplyNestedTestEntity;\n+\n+    public DeeplyNestedTestEntity getDeeplyNestedTestEntity() {\n+        return deeplyNestedTestEntity;\n+    }\n+\n+    public void setDeeplyNestedTestEntity(DeeplyNestedTestEntity deeplyNestedTestEntity) {\n+        this.deeplyNestedTestEntity = deeplyNestedTestEntity;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public DatatypesTestEntity getDatatypesTestEntity() {\n+        return datatypesTestEntity;\n+    }\n+\n+    public void setDatatypesTestEntity(DatatypesTestEntity datatypesTestEntity) {\n+        this.datatypesTestEntity = datatypesTestEntity;\n+    }\n+}"
  },
  {
    "sha": "185eadbc23d6a6d5a961d55e36b88e3eaa0dcb64",
    "filename": "graphql/src/test/java/test_support/entity/test/BoringStringIdTestEntity.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/BoringStringIdTestEntity.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/BoringStringIdTestEntity.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/test/BoringStringIdTestEntity.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,132 @@\n+package test_support.entity.test;\n+\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_BORING_STRING_ID_TEST_ENTITY\")\n+@JmixEntity\n+@Entity(name = \"scr_BoringStringIdTestEntity\")\n+public class BoringStringIdTestEntity {\n+    private static final long serialVersionUID = -5015479485719354544L;\n+\n+    @Id\n+    @Column(name = \"ID\", nullable = false, length = 10)\n+    private String id;\n+\n+    @InstanceName\n+    @Column(name = \"DESCRIPTION\")\n+    private String description;\n+\n+    @Column(name = \"CREATE_TS\")\n+    private Date createTs;\n+\n+    @Column(name = \"CREATED_BY\", length = 50)\n+    private String createdBy;\n+\n+    @Column(name = \"DELETE_TS\")\n+    private Date deleteTs;\n+\n+    @Column(name = \"DELETED_BY\", length = 50)\n+    private String deletedBy;\n+\n+    @Column(name = \"UPDATE_TS\")\n+    private Date updateTs;\n+\n+    @Column(name = \"UPDATED_BY\", length = 50)\n+    private String updatedBy;\n+\n+    @Version\n+    @Column(name = \"VERSION\", nullable = false)\n+    private Integer version;\n+\n+    @Column(name = \"UUID\")\n+    private UUID uuid;\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public UUID getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(UUID uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public Integer getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(Integer version) {\n+        this.version = version;\n+    }\n+\n+    public String getUpdatedBy() {\n+        return updatedBy;\n+    }\n+\n+    public void setUpdatedBy(String updatedBy) {\n+        this.updatedBy = updatedBy;\n+    }\n+\n+    public Date getUpdateTs() {\n+        return updateTs;\n+    }\n+\n+    public void setUpdateTs(Date updateTs) {\n+        this.updateTs = updateTs;\n+    }\n+\n+    public Boolean isDeleted() {\n+        return deleteTs != null;\n+    }\n+\n+    public String getDeletedBy() {\n+        return deletedBy;\n+    }\n+\n+    public void setDeletedBy(String deletedBy) {\n+        this.deletedBy = deletedBy;\n+    }\n+\n+    public Date getDeleteTs() {\n+        return deleteTs;\n+    }\n+\n+    public void setDeleteTs(Date deleteTs) {\n+        this.deleteTs = deleteTs;\n+    }\n+\n+    public String getCreatedBy() {\n+        return createdBy;\n+    }\n+\n+    public void setCreatedBy(String createdBy) {\n+        this.createdBy = createdBy;\n+    }\n+\n+    public Date getCreateTs() {\n+        return createTs;\n+    }\n+\n+    public void setCreateTs(Date createTs) {\n+        this.createTs = createTs;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "aa1c4f8624ed37ae9291bb407698aa032ae9a686",
    "filename": "graphql/src/test/java/test_support/entity/test/CompositionO2MTestEntity.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/Haulmont/jmix-graphql/blob/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/CompositionO2MTestEntity.java",
    "raw_url": "https://github.com/Haulmont/jmix-graphql/raw/11d7a03399da50af3d431f49bba4321a0ff755fd/graphql/src/test/java/test_support/entity/test/CompositionO2MTestEntity.java",
    "contents_url": "https://api.github.com/repos/Haulmont/jmix-graphql/contents/graphql/src/test/java/test_support/entity/test/CompositionO2MTestEntity.java?ref=11d7a03399da50af3d431f49bba4321a0ff755fd",
    "patch": "@@ -0,0 +1,60 @@\n+package test_support.entity.test;\n+\n+import io.jmix.core.entity.annotation.JmixGeneratedValue;\n+import io.jmix.core.metamodel.annotation.InstanceName;\n+import io.jmix.core.metamodel.annotation.JmixEntity;\n+\n+import javax.persistence.*;\n+import java.util.UUID;\n+\n+@Table(name = \"SCR_COMPOSITION_O2M_TEST_ENTITY\")\n+@JmixEntity\n+@Entity(name = \"scr_CompositionO2MTestEntity\")\n+public class CompositionO2MTestEntity {\n+    @JmixGeneratedValue\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private UUID id;\n+\n+    public UUID getId() {\n+        return id;\n+    }\n+\n+    public void setId(UUID id) {\n+        this.id = id;\n+    }\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"DATATYPES_TEST_ENTITY_ID\")\n+    protected DatatypesTestEntity datatypesTestEntity;\n+\n+    @Column(name = \"QUANTITY\")\n+    private Integer quantity;\n+\n+    @InstanceName\n+    @Column(name = \"NAME\")\n+    protected String name;\n+\n+    public Integer getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(Integer quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public DatatypesTestEntity getDatatypesTestEntity() {\n+        return datatypesTestEntity;\n+    }\n+\n+    public void setDatatypesTestEntity(DatatypesTestEntity datatypesTestEntity) {\n+        this.datatypesTestEntity = datatypesTestEntity;\n+    }\n+}"
  }
]
