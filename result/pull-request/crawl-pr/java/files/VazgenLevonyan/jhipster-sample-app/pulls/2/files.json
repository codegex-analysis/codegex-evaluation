[
  {
    "sha": "07af3c87f32bf2b8479dfe1a10d794cf5ea10c34",
    "filename": "Jenkinsfile",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/VazgenLevonyan/jhipster-sample-app/blob/16da6319df976ff7ee4a4e61a3ce074812b68e20/Jenkinsfile",
    "raw_url": "https://github.com/VazgenLevonyan/jhipster-sample-app/raw/16da6319df976ff7ee4a4e61a3ce074812b68e20/Jenkinsfile",
    "contents_url": "https://api.github.com/repos/VazgenLevonyan/jhipster-sample-app/contents/Jenkinsfile?ref=16da6319df976ff7ee4a4e61a3ce074812b68e20",
    "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env groovy\n+\n+node {\n+    stage('checkout') {\n+        checkout scm\n+    }\n+\n+    stage('check java') {\n+        sh \"java -version\"\n+    }\n+\n+    stage('clean') {\n+        sh \"chmod +x mvnw\"\n+        sh \"./mvnw -ntp clean -P-webpack\"\n+    }\n+    stage('nohttp') {\n+        sh \"./mvnw -ntp checkstyle:check\"\n+    }\n+\n+    stage('install tools') {\n+        sh \"./mvnw -ntp com.github.eirslett:frontend-maven-plugin:install-node-and-npm -DnodeVersion=v12.16.1 -DnpmVersion=6.14.5\"\n+    }\n+\n+    stage('npm install') {\n+        sh \"./mvnw -ntp com.github.eirslett:frontend-maven-plugin:npm\"\n+    }\n+\n+    stage('backend tests') {\n+        try {\n+            sh \"./mvnw -ntp verify -P-webpack\"\n+        } catch(err) {\n+            throw err\n+        } finally {\n+            junit '**/target/test-results/**/TEST-*.xml'\n+        }\n+    }\n+\n+    stage('frontend tests') {\n+        try {\n+            sh \"./mvnw -ntp com.github.eirslett:frontend-maven-plugin:npm -Dfrontend.npm.arguments='run test'\"\n+        } catch(err) {\n+            throw err\n+        } finally {\n+            junit '**/target/test-results/**/TEST-*.xml'\n+        }\n+    }\n+\n+    stage('packaging') {\n+        sh \"./mvnw -ntp verify -P-webpack -Pprod -DskipTests\"\n+        archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true\n+    }\n+}"
  },
  {
    "sha": "46e3d9bebce40c23dfba6dd656cdf716f6c35694",
    "filename": "src/main/docker/jenkins.yml",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/VazgenLevonyan/jhipster-sample-app/blob/16da6319df976ff7ee4a4e61a3ce074812b68e20/src/main/docker/jenkins.yml",
    "raw_url": "https://github.com/VazgenLevonyan/jhipster-sample-app/raw/16da6319df976ff7ee4a4e61a3ce074812b68e20/src/main/docker/jenkins.yml",
    "contents_url": "https://api.github.com/repos/VazgenLevonyan/jhipster-sample-app/contents/src/main/docker/jenkins.yml?ref=16da6319df976ff7ee4a4e61a3ce074812b68e20",
    "patch": "@@ -0,0 +1,15 @@\n+version: '2'\n+services:\n+  jenkins:\n+    image: jenkins/jenkins:lts\n+    ports:\n+      - 49001:8080\n+      - 50000:50000\n+    # uncomment for docker in docker\n+    #privileged: true\n+    #volumes:\n+    # enable persistent volume (warning: make sure that the local jenkins_home folder is created)\n+    #- ~/volumes/jenkins_home:/var/jenkins_home\n+    # mount docker sock and binary for docker in docker (only works on linux)\n+    #- /var/run/docker.sock:/var/run/docker.sock\n+    #- /usr/bin/docker:/usr/bin/docker"
  },
  {
    "sha": "dfe6b536d0bb648a3f208215bf63f44cc9219d2c",
    "filename": "src/main/resources/idea.gdsl",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/VazgenLevonyan/jhipster-sample-app/blob/16da6319df976ff7ee4a4e61a3ce074812b68e20/src/main/resources/idea.gdsl",
    "raw_url": "https://github.com/VazgenLevonyan/jhipster-sample-app/raw/16da6319df976ff7ee4a4e61a3ce074812b68e20/src/main/resources/idea.gdsl",
    "contents_url": "https://api.github.com/repos/VazgenLevonyan/jhipster-sample-app/contents/src/main/resources/idea.gdsl?ref=16da6319df976ff7ee4a4e61a3ce074812b68e20",
    "patch": "@@ -0,0 +1,90 @@\n+// Jenkinsfile completions for Intellij IDEA\n+\n+def ctx = context(scope: scriptScope())\n+contributor(ctx) {\n+    method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')\n+    method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')\n+    method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')\n+    method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'attachLog', type: 'boolean'), parameter(name: 'attachmentsPattern', type: 'java.lang.String'), parameter(name: 'compressLog', type: 'boolean'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'recipientProviders', type: 'Map'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Extended Email')\n+    method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders:'Map'], doc: 'Extended Email Recipients')\n+    method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')\n+    method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')\n+    method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')\n+    method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')\n+    method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')\n+    method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')\n+    method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')\n+    method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')\n+    method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')\n+    method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), ], doc: 'The milestone step forces all builds to go through in order')\n+    method(name: 'properties', type: 'Object', params: [properties:'Map'], doc: 'Set job properties')\n+    method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')\n+    method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')\n+    method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')\n+    method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')\n+    method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')\n+    method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')\n+    method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')\n+    method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')\n+    method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')\n+    method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')\n+    method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Timestamps')\n+    method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')\n+    method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')\n+    method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')\n+    method(name: 'withEnv', type: 'Object', params: [overrides:Map, body:'Closure'], doc: 'Set environment variables')\n+    method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')\n+    method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Advanced/Deprecated Catch error and set build result')\n+    method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')\n+    method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')\n+    method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \\'FOO=bar\\' strings suitable for the withEnv step.')\n+    method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')\n+    method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')\n+    property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')\n+    property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')\n+    property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')\n+    property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')\n+    property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')\n+    property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')\n+}\n+//Steps that require a node context\n+def nodeCtx = context(scope: closureScope())\n+contributor(nodeCtx) {\n+    def call = enclosingCall('node')\n+    if (call) {\n+        method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')\n+        method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')\n+        method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'General SCM')\n+        method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'General SCM')\n+        method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')\n+        method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')\n+        method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')\n+        method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')\n+        method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')\n+        method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')\n+        method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')\n+        method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')\n+        method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')\n+        method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')\n+        method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')\n+        method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')\n+        method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')\n+        method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')\n+        method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')\n+        method(name: 'svn', type: 'Object', params: [url:'java.lang.String'], doc: 'Subversion')\n+        method(name: 'svn', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Subversion')\n+        method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')\n+        method(name: 'withCredentials', type: 'Object', params: [bindings:Map, body:'Closure'], doc: 'Bind credentials to variables')\n+        method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')\n+        method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')\n+        method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')\n+        method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')\n+        method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')\n+        method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')\n+        method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'Map'), ], doc: 'Copy archived artifacts into the workspace')\n+        method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')\n+        method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')\n+        method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')\n+        method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')\n+    }\n+}"
  }
]
