[
  {
    "sha": "b809b5265f767366001e171ad36d1408322b3a85",
    "filename": "docs/design.md",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/docs/design.md",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/docs/design.md",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/docs/design.md?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -133,7 +133,6 @@ The `Logic` component handles the business logic of TEAMMATES. In particular, it\n - Managing relationships between entities, e.g. cascade logic for create/update/delete.\n - Managing transactions, e.g. ensuring atomicity of a transaction.\n - Sanitizing input values received from the UI component.\n-- Providing a mechanism for checking access control rights.\n - Connecting to GAE-provided or third-party APIs, e.g. for adding tasks to the task queue and for sending emails with third-party providers.\n \n ![Logic Component](images/LogicComponent.png)\n@@ -146,7 +145,7 @@ Package overview:\n \n Represented by these classes:\n - `Logic`: A [Facade class](http://en.wikipedia.org/wiki/Facade_pattern) which connects to the several `*Logic` classes to handle the logic related to various types of data and to access data from the `Storage` component.\n-- `GateKeeper`: Checks access rights of a user for a given action.\n+- `UserProvision`: Retrieves user information (based on request cookies).\n - `EmailGenerator`: Generates emails to be sent.\n - `EmailSender`: Sends email with the provider chosen based on the build configuration.\n - `TaskQueuer`: Adds tasks to the task queue, i.e. to be executed at a later time.\n@@ -158,7 +157,7 @@ Many classes in this layer make use of proxy pattern, i.e. they only connect to\n ### Policies\n \n Access control:\n-+ Although this component provides methods to perform access control, the API itself is not access controlled. The UI is expected to check access control (using `GateKeeper` class) before calling a method in the `Logic`.\n++ Although this component provides methods that are relevant to access control (e.g. providing user information), the access control check itself does not happen in this component. The UI is expected to check access control (using `GateKeeper` class) before calling a method in the logic component.\n \n API for creating entities:\n + Null parameters: Causes an assertion failure."
  },
  {
    "sha": "f6409370d5fb3c293a6c5229d0ec036e15f7c003",
    "filename": "src/main/java/teammates/common/datatransfer/UserInfo.java",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/common/datatransfer/UserInfo.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/common/datatransfer/UserInfo.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/common/datatransfer/UserInfo.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -1,7 +1,5 @@\n package teammates.common.datatransfer;\n \n-import com.google.appengine.api.users.User;\n-\n /**\n  * Represents a user type.\n  * <br> Contains user's Google ID and flags to indicate whether the user\n@@ -19,10 +17,6 @@ public UserInfo(String googleId) {\n         this.id = googleId;\n     }\n \n-    public UserInfo(User user) {\n-        this.id = user.getNickname();\n-    }\n-\n     public String getId() {\n         return id;\n     }"
  },
  {
    "sha": "20380dc645fcdeaf7787ac6f43ed5b4856245400",
    "filename": "src/main/java/teammates/logic/api/Logic.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/logic/api/Logic.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/logic/api/Logic.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/logic/api/Logic.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -1362,4 +1362,11 @@ public int getNumOfGeneratedChoicesForParticipantType(String courseId, FeedbackP\n         return feedbackQuestionsLogic.getNumOfGeneratedChoicesForParticipantType(courseId, generateOptionsFor);\n     }\n \n+    public boolean isStudentsInSameTeam(String courseId, String student1Email, String student2Email) {\n+        Assumption.assertNotNull(courseId);\n+        Assumption.assertNotNull(student1Email);\n+        Assumption.assertNotNull(student2Email);\n+        return studentsLogic.isStudentsInSameTeam(courseId, student1Email, student2Email);\n+    }\n+\n }"
  },
  {
    "sha": "19e31c9e6d2fc22448c2fc7f1c880c4311e03647",
    "filename": "src/main/java/teammates/logic/api/UserProvision.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/logic/api/UserProvision.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/logic/api/UserProvision.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/logic/api/UserProvision.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -0,0 +1,87 @@\n+package teammates.logic.api;\n+\n+import com.google.appengine.api.users.User;\n+import com.google.appengine.api.users.UserService;\n+import com.google.appengine.api.users.UserServiceFactory;\n+\n+import teammates.common.datatransfer.UserInfo;\n+import teammates.logic.core.AccountsLogic;\n+import teammates.logic.core.StudentsLogic;\n+\n+/**\n+ * Handles logic related to username and user role provisioning.\n+ */\n+public class UserProvision {\n+\n+    private static UserService userService = UserServiceFactory.getUserService();\n+\n+    private static final AccountsLogic accountsLogic = AccountsLogic.inst();\n+    private static final StudentsLogic studentsLogic = StudentsLogic.inst();\n+\n+    /**\n+     * Gets the information of the current logged in user.\n+     */\n+    public UserInfo getCurrentUser() {\n+        UserInfo user = getCurrentLoggedInUser();\n+\n+        if (user == null) {\n+            return null;\n+        }\n+\n+        String userId = user.id;\n+        user.isInstructor = accountsLogic.isAccountAnInstructor(userId);\n+        user.isStudent = studentsLogic.isStudentInAnyCourse(userId);\n+        return user;\n+    }\n+\n+    /**\n+     * Gets the login URL with the specified page as the redirect after logging in (if successful).\n+     */\n+    public String getLoginUrl(String redirectPage) {\n+        UserInfo user = getCurrentLoggedInUser();\n+\n+        if (user == null) {\n+            return userService.createLoginURL(redirectPage);\n+        }\n+        return redirectPage;\n+    }\n+\n+    /**\n+     * Gets the logout URL with the specified page as the redirect after logging out.\n+     */\n+    public String getLogoutUrl(String redirectPage) {\n+        return userService.createLogoutURL(redirectPage);\n+    }\n+\n+    protected UserInfo getCurrentLoggedInUser() {\n+        User user = userService.getCurrentUser();\n+        if (user == null) {\n+            return null;\n+        }\n+\n+        UserInfo userInfo = new UserInfo(user.getNickname());\n+        userInfo.isAdmin = userService.isUserAdmin();\n+        return userInfo;\n+    }\n+\n+    /**\n+     * Gets the information of the current masqueraded user.\n+     */\n+    public UserInfo getMasqueradeUser(String googleId) {\n+        UserInfo userInfo = new UserInfo(googleId);\n+        userInfo.isAdmin = false;\n+        userInfo.isInstructor = accountsLogic.isAccountAnInstructor(googleId);\n+        userInfo.isStudent = studentsLogic.isStudentInAnyCourse(googleId);\n+        return userInfo;\n+    }\n+\n+    /**\n+     * Gets the information of a user who has administrator role only.\n+     */\n+    public UserInfo getAdminOnlyUser(String userId) {\n+        UserInfo userInfo = new UserInfo(userId);\n+        userInfo.isAdmin = true;\n+        return userInfo;\n+    }\n+\n+}"
  },
  {
    "sha": "0b494f67ec64331cfe9598a91b58220efed154d5",
    "filename": "src/main/java/teammates/ui/webapi/Action.java",
    "status": "modified",
    "additions": 11,
    "deletions": 8,
    "changes": 19,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/Action.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/Action.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/Action.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -23,10 +23,10 @@\n import teammates.logic.api.EmailGenerator;\n import teammates.logic.api.EmailSender;\n import teammates.logic.api.FileStorage;\n-import teammates.logic.api.GateKeeper;\n import teammates.logic.api.Logic;\n import teammates.logic.api.LogsProcessor;\n import teammates.logic.api.TaskQueuer;\n+import teammates.logic.api.UserProvision;\n import teammates.ui.output.InstructorPrivilegeData;\n import teammates.ui.request.BasicRequest;\n \n@@ -38,6 +38,7 @@\n public abstract class Action {\n \n     Logic logic = new Logic();\n+    UserProvision userProvision = new UserProvision();\n     GateKeeper gateKeeper = new GateKeeper();\n     EmailGenerator emailGenerator = new EmailGenerator();\n     TaskQueuer taskQueuer = new TaskQueuer();\n@@ -56,11 +57,15 @@\n     /**\n      * Initializes the action object based on the HTTP request.\n      */\n-    void init(HttpServletRequest req) {\n+    public void init(HttpServletRequest req) {\n         this.req = req;\n         initAuthInfo();\n     }\n \n+    public void setUserProvision(UserProvision userProvision) {\n+        this.userProvision = userProvision;\n+    }\n+\n     public void setTaskQueuer(TaskQueuer taskQueuer) {\n         this.taskQueuer = taskQueuer;\n     }\n@@ -102,8 +107,7 @@ void checkAccessControl() {\n     private void initAuthInfo() {\n         if (Config.BACKDOOR_KEY.equals(req.getHeader(\"Backdoor-Key\"))) {\n             authType = AuthType.ALL_ACCESS;\n-            userInfo = new UserInfo(getRequestParamValue(Const.ParamsNames.USER_ID));\n-            userInfo.isAdmin = true;\n+            userInfo = userProvision.getAdminOnlyUser(getRequestParamValue(Const.ParamsNames.USER_ID));\n             userInfo.isStudent = true;\n             userInfo.isInstructor = true;\n             return;\n@@ -114,18 +118,17 @@ private void initAuthInfo() {\n         String queueNameHeader = req.getHeader(\"X-AppEngine-QueueName\");\n         boolean isRequestFromAppEngineQueue = queueNameHeader != null;\n         if (isRequestFromAppEngineQueue) {\n-            userInfo = new UserInfo(\"AppEngine-\" + queueNameHeader);\n-            userInfo.isAdmin = true;\n+            userInfo = userProvision.getAdminOnlyUser(\"AppEngine-\" + queueNameHeader);\n         } else {\n-            userInfo = gateKeeper.getCurrentUser();\n+            userInfo = userProvision.getCurrentUser();\n         }\n \n         authType = userInfo == null ? AuthType.PUBLIC : AuthType.LOGGED_IN;\n \n         String userParam = getRequestParamValue(Const.ParamsNames.USER_ID);\n         if (userInfo != null && userParam != null) {\n             if (userInfo.isAdmin) {\n-                userInfo = gateKeeper.getMasqueradeUser(userParam);\n+                userInfo = userProvision.getMasqueradeUser(userParam);\n                 authType = AuthType.MASQUERADE;\n             } else if (!userInfo.id.equals(userParam)) {\n                 throw new UnauthorizedAccessException(\"User \" + userInfo.id"
  },
  {
    "sha": "a305592e58243c8ef5ac887964a32471663197c7",
    "filename": "src/main/java/teammates/ui/webapi/ActionFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/ActionFactory.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/ActionFactory.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/ActionFactory.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -157,9 +157,7 @@ public Action getAction(HttpServletRequest req, String method) throws ActionMapp\n         if (uri.contains(\";\")) {\n             uri = uri.split(\";\")[0];\n         }\n-        Action action = getAction(uri, method);\n-        action.init(req);\n-        return action;\n+        return getAction(uri, method);\n     }\n \n     private Action getAction(String uri, String method) throws ActionMappingException {"
  },
  {
    "sha": "82aa189c78b7c257ec5a5eb27e102f1a887fd864",
    "filename": "src/main/java/teammates/ui/webapi/BasicFeedbackSubmissionAction.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/BasicFeedbackSubmissionAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/BasicFeedbackSubmissionAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/BasicFeedbackSubmissionAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -53,7 +53,7 @@ StudentAttributes getStudentOfCourseFromRequest(String courseId) {\n             return logic.getStudentForEmail(courseId, previewAsPerson);\n         } else {\n             return getUnregisteredStudent().orElseGet(() -> {\n-                gateKeeper.verifyLoggedInUserPrivileges();\n+                gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n                 return logic.getStudentForGoogleId(courseId, userInfo.getId());\n             });\n         }\n@@ -72,13 +72,13 @@ void checkAccessControlForStudentFeedbackSubmission(\n         String previewAsPerson = getRequestParamValue(Const.ParamsNames.PREVIEWAS);\n \n         if (!StringHelper.isEmpty(moderatedPerson)) {\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             gateKeeper.verifyAccessible(\n                     logic.getInstructorForGoogleId(feedbackSession.getCourseId(), userInfo.getId()), feedbackSession,\n                     student.getSection(),\n                     Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS);\n         } else if (!StringHelper.isEmpty(previewAsPerson)) {\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             gateKeeper.verifyAccessible(\n                     logic.getInstructorForGoogleId(feedbackSession.getCourseId(), userInfo.getId()), feedbackSession,\n                     Const.InstructorPermissions.CAN_MODIFY_SESSION);\n@@ -108,7 +108,7 @@ InstructorAttributes getInstructorOfCourseFromRequest(String courseId) {\n         } else if (!StringHelper.isEmpty(previewAsPerson)) {\n             return logic.getInstructorForEmail(courseId, previewAsPerson);\n         } else {\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             return logic.getInstructorForGoogleId(courseId, userInfo.getId());\n         }\n     }\n@@ -122,11 +122,11 @@ void checkAccessControlForInstructorFeedbackSubmission(\n         String previewAsPerson = getRequestParamValue(Const.ParamsNames.PREVIEWAS);\n \n         if (!StringHelper.isEmpty(moderatedPerson)) {\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             gateKeeper.verifyAccessible(logic.getInstructorForGoogleId(feedbackSession.getCourseId(), userInfo.getId()),\n                     feedbackSession, Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS);\n         } else if (!StringHelper.isEmpty(previewAsPerson)) {\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             gateKeeper.verifyAccessible(logic.getInstructorForGoogleId(feedbackSession.getCourseId(), userInfo.getId()),\n                     feedbackSession, Const.InstructorPermissions.CAN_MODIFY_SESSION);\n         } else {"
  },
  {
    "sha": "9b5ac142f7c0caf42765724f89a86eeee640a60c",
    "filename": "src/main/java/teammates/ui/webapi/CreateFeedbackResponseCommentAction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/CreateFeedbackResponseCommentAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/CreateFeedbackResponseCommentAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/CreateFeedbackResponseCommentAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -81,7 +81,7 @@ void checkSpecificAccessControl() {\n             verifyResponseOwnerShipForInstructor(instructorAsFeedbackParticipant, response);\n             break;\n         case INSTRUCTOR_RESULT:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n             gateKeeper.verifyAccessible(instructor, session, response.giverSection,\n                     Const.InstructorPermissions.CAN_SUBMIT_SESSION_IN_SECTIONS);"
  },
  {
    "sha": "bbf69c8d233074d41ff5a4f5ad3d6dd8efed2fcd",
    "filename": "src/main/java/teammates/ui/webapi/DeleteFeedbackResponseCommentAction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/DeleteFeedbackResponseCommentAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/DeleteFeedbackResponseCommentAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/DeleteFeedbackResponseCommentAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -60,7 +60,7 @@ void checkSpecificAccessControl() {\n             gateKeeper.verifyOwnership(frc, instructorAsFeedbackParticipant.getEmail());\n             break;\n         case INSTRUCTOR_RESULT:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n \n             if (instructor != null && frc.commentGiver.equals(instructor.email)) { // giver, allowed by default"
  },
  {
    "sha": "41834fe75508656883b36f3d75d3880ecd228476",
    "filename": "src/main/java/teammates/ui/webapi/GateKeeper.java",
    "status": "renamed",
    "additions": 23,
    "deletions": 125,
    "changes": 148,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GateKeeper.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GateKeeper.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GateKeeper.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -1,8 +1,4 @@\n-package teammates.logic.api;\n-\n-import com.google.appengine.api.users.User;\n-import com.google.appengine.api.users.UserService;\n-import com.google.appengine.api.users.UserServiceFactory;\n+package teammates.ui.webapi;\n \n import teammates.common.datatransfer.FeedbackParticipantType;\n import teammates.common.datatransfer.UserInfo;\n@@ -13,93 +9,21 @@\n import teammates.common.datatransfer.attributes.InstructorAttributes;\n import teammates.common.datatransfer.attributes.StudentAttributes;\n import teammates.common.exception.UnauthorizedAccessException;\n-import teammates.common.util.Assumption;\n import teammates.common.util.Const;\n-import teammates.logic.core.AccountsLogic;\n-import teammates.logic.core.InstructorsLogic;\n-import teammates.logic.core.StudentsLogic;\n+import teammates.logic.api.Logic;\n \n /**\n  * Provides access control mechanisms.\n  */\n-public class GateKeeper {\n-\n-    private static UserService userService = UserServiceFactory.getUserService();\n-\n-    private static final AccountsLogic accountsLogic = AccountsLogic.inst();\n-    private static final InstructorsLogic instructorsLogic = InstructorsLogic.inst();\n-    private static final StudentsLogic studentsLogic = StudentsLogic.inst();\n-\n-    private boolean isUserLoggedOn() {\n-        return userService.getCurrentUser() != null;\n-    }\n-\n-    /**\n-     * Gets the information of the current logged in user.\n-     */\n-    public UserInfo getCurrentUser() {\n-        User user = getCurrentGoogleUser();\n-\n-        if (user == null) {\n-            return null;\n-        }\n-\n-        UserInfo userInfo = new UserInfo(user);\n-\n-        if (isAdministrator()) {\n-            userInfo.isAdmin = true;\n-        }\n-\n-        if (isInstructor()) {\n-            userInfo.isInstructor = true;\n-        }\n-\n-        if (isStudent()) {\n-            userInfo.isStudent = true;\n-        }\n-\n-        return userInfo;\n-    }\n-\n-    /**\n-     * Gets the information of the current masqueraded user.\n-     *\n-     * <p>Note that this assumes that the privilege to masquerade as another user is present.\n-     */\n-    public UserInfo getMasqueradeUser(String googleId) {\n-        UserInfo userInfo = new UserInfo(googleId);\n-        userInfo.isAdmin = false;\n-        userInfo.isInstructor = accountsLogic.isAccountAnInstructor(googleId);\n-        userInfo.isStudent = studentsLogic.isStudentInAnyCourse(googleId);\n-        return userInfo;\n-    }\n-\n-    /**\n-     * Gets the login URL with the specified page as the redirect after logging in (if successful).\n-     */\n-    public String getLoginUrl(String redirectPage) {\n-        User user = userService.getCurrentUser();\n-\n-        if (user == null) {\n-            return userService.createLoginURL(redirectPage);\n-        }\n-        return redirectPage;\n-    }\n-\n-    /**\n-     * Gets the logout URL with the specified page as the redirect after logging out.\n-     */\n-    public String getLogoutUrl(String redirectPage) {\n-        return userService.createLogoutURL(redirectPage);\n-    }\n+class GateKeeper {\n \n-    // These methods ensures the logged in user is of a particular type.\n+    private Logic logic = new Logic();\n \n     /**\n      * Verifies the user is logged in.\n      */\n-    public void verifyLoggedInUserPrivileges() {\n-        if (isUserLoggedOn()) {\n+    void verifyLoggedInUserPrivileges(UserInfo userInfo) {\n+        if (userInfo != null) {\n             return;\n         }\n \n@@ -111,7 +35,7 @@ public void verifyLoggedInUserPrivileges() {\n     /**\n      * Verifies that the specified student can access the specified course.\n      */\n-    public void verifyAccessible(StudentAttributes student, CourseAttributes course) {\n+    void verifyAccessible(StudentAttributes student, CourseAttributes course) {\n         verifyNotNull(student, \"student\");\n         verifyNotNull(student.course, \"student's course ID\");\n         verifyNotNull(course, \"course\");\n@@ -126,7 +50,7 @@ public void verifyAccessible(StudentAttributes student, CourseAttributes course)\n     /**\n      * Verifies that the specified student can access the specified feedback session.\n      */\n-    public void verifyAccessible(StudentAttributes student, FeedbackSessionAttributes feedbackSession) {\n+    void verifyAccessible(StudentAttributes student, FeedbackSessionAttributes feedbackSession) {\n         verifyNotNull(student, \"student\");\n         verifyNotNull(student.course, \"student's course ID\");\n         verifyNotNull(feedbackSession, \"feedback session\");\n@@ -145,7 +69,7 @@ public void verifyAccessible(StudentAttributes student, FeedbackSessionAttribute\n     /**\n      * Verifies that the specified instructor can access the specified course.\n      */\n-    public void verifyAccessible(InstructorAttributes instructor, CourseAttributes course) {\n+    void verifyAccessible(InstructorAttributes instructor, CourseAttributes course) {\n         verifyNotNull(instructor, \"instructor\");\n         verifyNotNull(instructor.courseId, \"instructor's course ID\");\n         verifyNotNull(course, \"course\");\n@@ -162,7 +86,7 @@ public void verifyAccessible(InstructorAttributes instructor, CourseAttributes c\n      * the course and the instructor has the privilege specified by\n      * privilegeName.\n      */\n-    public void verifyAccessible(InstructorAttributes instructor, CourseAttributes course, String privilegeName) {\n+    void verifyAccessible(InstructorAttributes instructor, CourseAttributes course, String privilegeName) {\n         verifyNotNull(instructor, \"instructor\");\n         verifyNotNull(instructor.courseId, \"instructor's course ID\");\n         verifyNotNull(course, \"course\");\n@@ -184,7 +108,7 @@ public void verifyAccessible(InstructorAttributes instructor, CourseAttributes c\n      * the course and the instructor has the privilege specified by\n      * privilegeName for sectionName.\n      */\n-    public void verifyAccessible(InstructorAttributes instructor, CourseAttributes course, String sectionName,\n+    void verifyAccessible(InstructorAttributes instructor, CourseAttributes course, String sectionName,\n                                  String privilegeName) {\n         verifyNotNull(instructor, \"instructor\");\n         verifyNotNull(instructor.courseId, \"instructor's course ID\");\n@@ -207,7 +131,7 @@ public void verifyAccessible(InstructorAttributes instructor, CourseAttributes c\n     /**\n      * Verifies that the specified instructor can access the specified feedback session.\n      */\n-    public void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession) {\n+    void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession) {\n         verifyNotNull(instructor, \"instructor\");\n         verifyNotNull(instructor.courseId, \"instructor's course ID\");\n         verifyNotNull(feedbackSession, \"feedback session\");\n@@ -224,7 +148,7 @@ public void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAtt\n      * the course and the instructor has the privilege specified by\n      * privilegeName for feedbackSession.\n      */\n-    public void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbacksession,\n+    void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbacksession,\n                                  String privilegeName) {\n         verifyNotNull(instructor, \"instructor\");\n         verifyNotNull(instructor.courseId, \"instructor's course ID\");\n@@ -246,7 +170,7 @@ public void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAtt\n     /**\n      * Verifies that the specified instructor has specified privilege for a section in the specified feedback session.\n      */\n-    public void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession,\n+    void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession,\n                                  String sectionName, String privilegeName) {\n         verifyNotNull(instructor, \"instructor\");\n         verifyNotNull(instructor.courseId, \"instructor's course ID\");\n@@ -269,7 +193,7 @@ public void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAtt\n     /**\n      * Verifies that the feedback question is for student to answer.\n      */\n-    public void verifyAnswerableForStudent(FeedbackQuestionAttributes feedbackQuestionAttributes) {\n+    void verifyAnswerableForStudent(FeedbackQuestionAttributes feedbackQuestionAttributes) {\n         verifyNotNull(feedbackQuestionAttributes, \"feedback question\");\n \n         if (feedbackQuestionAttributes.getGiverType() != FeedbackParticipantType.STUDENTS\n@@ -281,7 +205,7 @@ public void verifyAnswerableForStudent(FeedbackQuestionAttributes feedbackQuesti\n     /**\n      * Verifies that the feedback question is for instructor to answer.\n      */\n-    public void verifyAnswerableForInstructor(FeedbackQuestionAttributes feedbackQuestionAttributes) {\n+    void verifyAnswerableForInstructor(FeedbackQuestionAttributes feedbackQuestionAttributes) {\n         verifyNotNull(feedbackQuestionAttributes, \"feedback question\");\n \n         if (feedbackQuestionAttributes.getGiverType() != FeedbackParticipantType.INSTRUCTORS\n@@ -293,7 +217,7 @@ public void verifyAnswerableForInstructor(FeedbackQuestionAttributes feedbackQue\n     /**\n      * Verifies that an instructor has submission privilege of a feedback session.\n      */\n-    public void verifySessionSubmissionPrivilegeForInstructor(\n+    void verifySessionSubmissionPrivilegeForInstructor(\n             FeedbackSessionAttributes session, InstructorAttributes instructor) {\n         verifyNotNull(session, \"feedback session\");\n         verifyNotNull(instructor, \"instructor\");\n@@ -317,7 +241,7 @@ public void verifySessionSubmissionPrivilegeForInstructor(\n      * @param frc comment to be accessed\n      * @param feedbackParticipant email or team of feedback participant\n      */\n-    public void verifyOwnership(FeedbackResponseCommentAttributes frc, String feedbackParticipant) {\n+    void verifyOwnership(FeedbackResponseCommentAttributes frc, String feedbackParticipant) {\n         verifyNotNull(frc, \"feedback response comment\");\n         verifyNotNull(frc.commentGiver, \"feedback response comment giver\");\n         verifyNotNull(feedbackParticipant, \"comment giver\");\n@@ -336,45 +260,19 @@ private void verifyNotNull(Object object, String typeName) {\n         }\n     }\n \n-    private User getCurrentGoogleUser() {\n-        return userService.getCurrentUser();\n-    }\n-\n-    private boolean isAdministrator() {\n-        Assumption.assertTrue(isUserLoggedOn());\n-        return userService.isUserAdmin();\n-    }\n-\n-    private boolean isInstructor() {\n-        User user = userService.getCurrentUser();\n-        Assumption.assertNotNull(user);\n-        return accountsLogic.isAccountAnInstructor(user.getNickname());\n-    }\n-\n-    private boolean isStudent() {\n-        User user = userService.getCurrentUser();\n-        Assumption.assertNotNull(user);\n-\n-        return studentsLogic.isStudentInAnyCourse(user.getNickname());\n-    }\n-\n     /**\n      * Verifies that the action is accessible when the user is either an instructor of the course, a student of the course\n-     * or his/her team member, or an admin.\n+     * or his/her team member.\n      */\n-    public void verifyAccessibleForCurrentUserAsInstructorOrTeamMemberOrAdmin(String googleId, String courseId,\n+    void verifyAccessibleForCurrentUserAsInstructorOrTeamMember(String googleId, String courseId,\n             String section, String email) {\n-        if (isAdministrator()) {\n-            return;\n-        }\n-\n-        InstructorAttributes instructor = instructorsLogic.getInstructorForGoogleId(courseId, googleId);\n+        InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, googleId);\n         if (instructor != null) {\n             verifyInstructorCanViewProfile(instructor, section);\n             return;\n         }\n \n-        StudentAttributes student = studentsLogic.getStudentForCourseIdAndGoogleId(courseId, googleId);\n+        StudentAttributes student = logic.getStudentForGoogleId(courseId, googleId);\n         if (student != null) {\n             verifyStudentCanViewProfile(student, courseId, email);\n             return;\n@@ -390,7 +288,7 @@ private void verifyInstructorCanViewProfile(InstructorAttributes instructor, Str\n     }\n \n     private void verifyStudentCanViewProfile(StudentAttributes student, String courseId, String email) {\n-        if (!studentsLogic.isStudentsInSameTeam(courseId, email, student.email)) {\n+        if (!logic.isStudentsInSameTeam(courseId, email, student.email)) {\n             throw new UnauthorizedAccessException(\"Student does not have enough privileges to view the profile.\");\n         }\n     }",
    "previous_filename": "src/main/java/teammates/logic/api/GateKeeper.java"
  },
  {
    "sha": "818bbb6806e9eda7813740e73f3f892af8e01881",
    "filename": "src/main/java/teammates/ui/webapi/GetAuthInfoAction.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetAuthInfoAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetAuthInfoAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GetAuthInfoAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -40,15 +40,15 @@ JsonResult execute() {\n         if (userInfo == null) {\n             if (nextUrl == null) {\n                 output = new AuthInfo(\n-                        gateKeeper.getLoginUrl(frontendUrl + Const.WebPageURIs.STUDENT_HOME_PAGE),\n-                        gateKeeper.getLoginUrl(frontendUrl + Const.WebPageURIs.INSTRUCTOR_HOME_PAGE),\n-                        gateKeeper.getLoginUrl(frontendUrl + Const.WebPageURIs.ADMIN_HOME_PAGE)\n+                        userProvision.getLoginUrl(frontendUrl + Const.WebPageURIs.STUDENT_HOME_PAGE),\n+                        userProvision.getLoginUrl(frontendUrl + Const.WebPageURIs.INSTRUCTOR_HOME_PAGE),\n+                        userProvision.getLoginUrl(frontendUrl + Const.WebPageURIs.ADMIN_HOME_PAGE)\n                 );\n             } else {\n                 output = new AuthInfo(\n-                        gateKeeper.getLoginUrl(frontendUrl + nextUrl),\n-                        gateKeeper.getLoginUrl(frontendUrl + nextUrl),\n-                        gateKeeper.getLoginUrl(frontendUrl + nextUrl)\n+                        userProvision.getLoginUrl(frontendUrl + nextUrl),\n+                        userProvision.getLoginUrl(frontendUrl + nextUrl),\n+                        userProvision.getLoginUrl(frontendUrl + nextUrl)\n                 );\n             }\n         } else {"
  },
  {
    "sha": "f4a0559fb3f8b0e5da072b80ee0c58efdab64c0f",
    "filename": "src/main/java/teammates/ui/webapi/GetFeedbackQuestionsAction.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetFeedbackQuestionsAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetFeedbackQuestionsAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GetFeedbackQuestionsAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -38,15 +38,15 @@ void checkSpecificAccessControl() {\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case FULL_DETAIL:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             gateKeeper.verifyAccessible(logic.getInstructorForGoogleId(courseId, userInfo.getId()), feedbackSession);\n             break;\n         case INSTRUCTOR_SUBMISSION:\n             InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(courseId);\n             checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n             break;\n         case INSTRUCTOR_RESULT:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             gateKeeper.verifyAccessible(logic.getInstructorForGoogleId(courseId, userInfo.getId()),\n                     feedbackSession, Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS);\n             break;"
  },
  {
    "sha": "e6e5b8c6f1fd638643934f58aa3cf25284e4fee3",
    "filename": "src/main/java/teammates/ui/webapi/GetFeedbackSessionAction.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetFeedbackSessionAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetFeedbackSessionAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GetFeedbackSessionAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -34,7 +34,7 @@ void checkSpecificAccessControl() {\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case FULL_DETAIL:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             gateKeeper.verifyAccessible(logic.getInstructorForGoogleId(courseId, userInfo.getId()),\n                     feedbackSession, Const.InstructorPermissions.CAN_MODIFY_SESSION);\n             break;\n@@ -43,7 +43,7 @@ void checkSpecificAccessControl() {\n             checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n             break;\n         case INSTRUCTOR_RESULT:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             gateKeeper.verifyAccessible(logic.getInstructorForGoogleId(courseId, userInfo.getId()),\n                     feedbackSession, Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS);\n             break;"
  },
  {
    "sha": "3abef7dbac49f25ae70481222ce578d7534ab7c9",
    "filename": "src/main/java/teammates/ui/webapi/GetInstructorAction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetInstructorAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetInstructorAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GetInstructorAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -39,7 +39,7 @@ void checkSpecificAccessControl() {\n             checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n             break;\n         case FULL_DETAIL:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             break;\n         default:\n             throw new InvalidHttpParameterException(\"Unknown intent \" + intent);"
  },
  {
    "sha": "3ccee75431cc74c878fa07df4ecc8cb1a0d755d0",
    "filename": "src/main/java/teammates/ui/webapi/GetSessionResultsAction.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetSessionResultsAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetSessionResultsAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GetSessionResultsAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -37,7 +37,7 @@ void checkSpecificAccessControl() {\n         Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n         switch (intent) {\n         case INSTRUCTOR_RESULT:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n             gateKeeper.verifyAccessible(instructor, fs);\n             break;\n@@ -58,7 +58,7 @@ void checkSpecificAccessControl() {\n \n     private StudentAttributes getStudent(String courseId) {\n         return getUnregisteredStudent().orElseGet(() -> {\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             return logic.getStudentForGoogleId(courseId, userInfo.getId());\n         });\n     }"
  },
  {
    "sha": "ed42344d1f0c702e83c6bf18849988fbc3c7b28c",
    "filename": "src/main/java/teammates/ui/webapi/GetStudentProfileAction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetStudentProfileAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetStudentProfileAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GetStudentProfileAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -39,7 +39,7 @@ void checkSpecificAccessControl() {\n             if (student == null) {\n                 throw new UnauthorizedAccessException(MESSAGE_STUDENT_NOT_FOUND);\n             }\n-            gateKeeper.verifyAccessibleForCurrentUserAsInstructorOrTeamMemberOrAdmin(userInfo.id, courseId,\n+            gateKeeper.verifyAccessibleForCurrentUserAsInstructorOrTeamMember(userInfo.id, courseId,\n                     student.section, studentEmail);\n         }\n     }"
  },
  {
    "sha": "cc9e4be58ead9575deb878345531b8c19ea909fb",
    "filename": "src/main/java/teammates/ui/webapi/GetStudentProfilePictureAction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetStudentProfilePictureAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/GetStudentProfilePictureAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GetStudentProfilePictureAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -38,7 +38,7 @@ void checkSpecificAccessControl() {\n                 throw new UnauthorizedAccessException(UNAUTHORIZED_ACCESS);\n             }\n \n-            gateKeeper.verifyAccessibleForCurrentUserAsInstructorOrTeamMemberOrAdmin(userInfo.id,\n+            gateKeeper.verifyAccessibleForCurrentUserAsInstructorOrTeamMember(userInfo.id,\n                     courseId, student.getSection(), student.getEmail());\n         }\n     }"
  },
  {
    "sha": "24fcc955accb5fb1c2f9bd9e82d5e012336d0e21",
    "filename": "src/main/java/teammates/ui/webapi/LogoutServlet.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/LogoutServlet.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/LogoutServlet.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/LogoutServlet.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -6,7 +6,7 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n-import teammates.logic.api.GateKeeper;\n+import teammates.logic.api.UserProvision;\n \n /**\n  * Servlet that handles logout.\n@@ -20,7 +20,7 @@ public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOExc\n         if (frontendUrl == null) {\n             frontendUrl = \"\";\n         }\n-        String logoutUrl = new GateKeeper().getLogoutUrl(frontendUrl + \"/web\");\n+        String logoutUrl = new UserProvision().getLogoutUrl(frontendUrl + \"/web\");\n         resp.sendRedirect(logoutUrl);\n     }\n "
  },
  {
    "sha": "0b5af9ff6c944254f6e900ed179ea1022100e123",
    "filename": "src/main/java/teammates/ui/webapi/UpdateFeedbackResponseCommentAction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/UpdateFeedbackResponseCommentAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/UpdateFeedbackResponseCommentAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/UpdateFeedbackResponseCommentAction.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -80,7 +80,7 @@ void checkSpecificAccessControl() {\n             gateKeeper.verifyOwnership(frc, instructorAsFeedbackParticipant.getEmail());\n             break;\n         case INSTRUCTOR_RESULT:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n+            gateKeeper.verifyLoggedInUserPrivileges(userInfo);\n             InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n             if (instructor != null && frc.getCommentGiver().equals(instructor.getEmail())) { // giver, allowed by default\n                 return;"
  },
  {
    "sha": "9b6554484649824bc97252780c0e31379b5a2cf7",
    "filename": "src/main/java/teammates/ui/webapi/WebApiServlet.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/WebApiServlet.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/main/java/teammates/ui/webapi/WebApiServlet.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/WebApiServlet.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -88,6 +88,7 @@ private void invokeServlet(HttpServletRequest req, HttpServletResponse resp) thr\n \n         try {\n             Action action = new ActionFactory().getAction(req, req.getMethod());\n+            action.init(req);\n             action.checkAccessControl();\n \n             ActionResult result = action.execute();"
  },
  {
    "sha": "331f7bed92ec8c6e2924aea884a19e42891a9dd8",
    "filename": "src/test/java/teammates/architecture/ArchitectureTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/architecture/ArchitectureTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/architecture/ArchitectureTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/architecture/ArchitectureTest.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -454,6 +454,13 @@ public void testArchitecture_externalApi_searchApiCanOnlyBeAccessedBySomePackage\n                 .check(ALL_CLASSES);\n     }\n \n+    @Test\n+    public void testArchitecture_externalApi_usersApiCanOnlyBeAccessedByUserProvision() {\n+        noClasses().that().doNotHaveSimpleName(\"UserProvision\")\n+                .should().accessClassesThat().resideInAPackage(\"com.google.appengine.api.users..\")\n+                .check(ALL_CLASSES);\n+    }\n+\n     @Test\n     public void testArchitecture_externalApi_cloudStorageApiCanOnlyBeAccessedByGcsService() {\n         noClasses().that().doNotHaveSimpleName(\"GoogleCloudStorageService\")"
  },
  {
    "sha": "11db5879d2fdbb033a389fb841cb71b3c6cc638b",
    "filename": "src/test/java/teammates/logic/api/UserProvisionTest.java",
    "status": "renamed",
    "additions": 8,
    "deletions": 10,
    "changes": 18,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/logic/api/UserProvisionTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/logic/api/UserProvisionTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/logic/api/UserProvisionTest.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -8,26 +8,24 @@\n import teammates.common.datatransfer.attributes.StudentAttributes;\n \n /**\n- * SUT: {@link GateKeeper}.\n+ * SUT: {@link UserProvision}.\n  */\n-public class GateKeeperTest extends BaseLogicTest {\n+public class UserProvisionTest extends BaseLogicTest {\n \n-    private static GateKeeper gateKeeper = new GateKeeper();\n+    private static UserProvision userProvision = new UserProvision();\n \n     @Test\n     public void testGetLoginUrl() {\n         gaeSimulation.logoutUser();\n-        assertEquals(\"/_ah/login?continue=www.abc.com\", gateKeeper.getLoginUrl(\"www.abc.com\"));\n+        assertEquals(\"/_ah/login?continue=www.abc.com\", userProvision.getLoginUrl(\"www.abc.com\"));\n     }\n \n     @Test\n     public void testGetLogoutUrl() {\n         gaeSimulation.loginUser(\"any.user\");\n-        assertEquals(\"/_ah/logout?continue=www.def.com\", gateKeeper.getLogoutUrl(\"www.def.com\"));\n+        assertEquals(\"/_ah/logout?continue=www.def.com\", userProvision.getLogoutUrl(\"www.def.com\"));\n     }\n \n-    //TODO: test isUserLoggedIn method\n-\n     @Test\n     public void testGetCurrentUser() throws Exception {\n \n@@ -47,7 +45,7 @@ public void testGetCurrentUser() throws Exception {\n         instructorAsStudent.googleId = instructor.googleId;\n         logic.createStudent(instructorAsStudent);\n \n-        UserInfo user = gateKeeper.getCurrentUser();\n+        UserInfo user = userProvision.getCurrentUser();\n         assertEquals(instructor.googleId, user.id);\n         assertTrue(user.isAdmin);\n         assertTrue(user.isInstructor);\n@@ -57,7 +55,7 @@ public void testGetCurrentUser() throws Exception {\n \n         gaeSimulation.loginUser(\"unknown\");\n \n-        user = gateKeeper.getCurrentUser();\n+        user = userProvision.getCurrentUser();\n         assertEquals(\"unknown\", user.id);\n         assertFalse(user.isAdmin);\n         assertFalse(user.isInstructor);\n@@ -67,7 +65,7 @@ public void testGetCurrentUser() throws Exception {\n \n         // check for user not logged in\n         gaeSimulation.logoutUser();\n-        assertNull(gateKeeper.getCurrentUser());\n+        assertNull(userProvision.getCurrentUser());\n     }\n \n }",
    "previous_filename": "src/test/java/teammates/logic/api/GateKeeperTest.java"
  },
  {
    "sha": "c1611df6045d7187c0bb5363c947b42608043144",
    "filename": "src/test/java/teammates/test/GaeSimulation.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/test/GaeSimulation.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/test/GaeSimulation.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/test/GaeSimulation.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -20,7 +20,7 @@\n import teammates.common.datatransfer.UserInfo;\n import teammates.common.exception.ActionMappingException;\n import teammates.common.util.RecaptchaVerifier;\n-import teammates.logic.api.GateKeeper;\n+import teammates.logic.api.UserProvision;\n import teammates.ui.webapi.Action;\n import teammates.ui.webapi.ActionFactory;\n \n@@ -35,7 +35,7 @@\n     // This can be any valid URL; it is not used beyond validation\n     private static final String SIMULATION_BASE_URL = \"http://localhost:8080\";\n \n-    private static GateKeeper gateKeeper = new GateKeeper();\n+    private static UserProvision userProvision = new UserProvision();\n     private static GaeSimulation instance = new GaeSimulation();\n \n     private LocalServiceTestHelper helper;\n@@ -72,7 +72,7 @@ private UserInfo loginUser(String userId, boolean isAdmin) {\n         helper.setEnvEmail(userId);\n         helper.setEnvAuthDomain(\"gmail.com\");\n         helper.setEnvIsAdmin(isAdmin);\n-        return gateKeeper.getCurrentUser();\n+        return userProvision.getCurrentUser();\n     }\n \n     /**\n@@ -113,7 +113,8 @@ public void logoutUser() {\n      */\n     public Action getActionObject(String uri, String method, String body, Map<String, Part> parts,\n                                   List<Cookie> cookies, MockTaskQueuer taskQueuer, MockEmailSender emailSender,\n-                                  MockFileStorage fileStorage, MockLogsProcessor logsProcessor, String... params) {\n+                                  MockFileStorage fileStorage, MockLogsProcessor logsProcessor,\n+                                  MockUserProvision userProvision, String... params) {\n         try {\n             MockHttpServletRequest req = new MockHttpServletRequest(method, uri);\n             for (int i = 0; i < params.length; i = i + 2) {\n@@ -141,7 +142,9 @@ public Action getActionObject(String uri, String method, String body, Map<String\n             action.setEmailSender(emailSender);\n             action.setFileStorage(fileStorage);\n             action.setLogsProcessor(logsProcessor);\n+            action.setUserProvision(userProvision);\n             action.setRecaptchaVerifier(new RecaptchaVerifier(null));\n+            action.init(req);\n             return action;\n         } catch (ActionMappingException e) {\n             throw new RuntimeException(e);"
  },
  {
    "sha": "96bda12b3e04bb3db299494d8ca685722b98064c",
    "filename": "src/test/java/teammates/test/MockUserProvision.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/test/MockUserProvision.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/test/MockUserProvision.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/test/MockUserProvision.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -0,0 +1,54 @@\n+package teammates.test;\n+\n+import teammates.common.datatransfer.UserInfo;\n+import teammates.logic.api.UserProvision;\n+\n+/**\n+ * Allows mocking of the {@link UserProvision} API used in production.\n+ *\n+ * <p>Instead of getting user information from the authentication service,\n+ * the API will return pre-determined information instead.\n+ */\n+public class MockUserProvision extends UserProvision {\n+\n+    private UserInfo mockUser = new UserInfo(\"user.id\");\n+    private boolean isLoggedIn;\n+\n+    private UserInfo loginUser(String userId, boolean isAdmin) {\n+        isLoggedIn = true;\n+        mockUser.id = userId;\n+        mockUser.isAdmin = isAdmin;\n+        return getCurrentUser();\n+    }\n+\n+    /**\n+     * Adds a logged-in user without admin rights.\n+     *\n+     * @return The user info after login process\n+     */\n+    public UserInfo loginUser(String userId) {\n+        return loginUser(userId, false);\n+    }\n+\n+    /**\n+     * Adds a logged-in user as an admin.\n+     *\n+     * @return The user info after login process\n+     */\n+    public UserInfo loginAsAdmin(String userId) {\n+        return loginUser(userId, true);\n+    }\n+\n+    /**\n+     * Removes the logged-in user information.\n+     */\n+    public void logoutUser() {\n+        isLoggedIn = false;\n+    }\n+\n+    @Override\n+    protected UserInfo getCurrentLoggedInUser() {\n+        return isLoggedIn ? mockUser : null;\n+    }\n+\n+}"
  },
  {
    "sha": "cf241f0942e9f99f237a8ff21bd6e5cd82d85b0c",
    "filename": "src/test/java/teammates/ui/webapi/BaseActionTest.java",
    "status": "modified",
    "additions": 17,
    "deletions": 8,
    "changes": 25,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/BaseActionTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/BaseActionTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/ui/webapi/BaseActionTest.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -38,6 +38,7 @@\n import teammates.test.MockLogsProcessor;\n import teammates.test.MockPart;\n import teammates.test.MockTaskQueuer;\n+import teammates.test.MockUserProvision;\n import teammates.ui.request.BasicRequest;\n \n /**\n@@ -57,6 +58,7 @@\n     protected MockEmailSender mockEmailSender = new MockEmailSender();\n     protected MockFileStorage mockFileStorage = new MockFileStorage();\n     protected MockLogsProcessor mockLogsProcessor = new MockLogsProcessor();\n+    protected MockUserProvision mockUserProvision = new MockUserProvision();\n \n     protected abstract String getActionUri();\n \n@@ -91,7 +93,7 @@ protected T getAction(String body, Map<String, Part> parts, List<Cookie> cookies\n         mockTaskQueuer.clearTasks();\n         mockEmailSender.clearEmails();\n         return (T) gaeSimulation.getActionObject(getActionUri(), getRequestMethod(), body, parts, cookies,\n-                mockTaskQueuer, mockEmailSender, mockFileStorage, mockLogsProcessor, params);\n+                mockTaskQueuer, mockEmailSender, mockFileStorage, mockLogsProcessor, mockUserProvision, params);\n     }\n \n     /**\n@@ -142,7 +144,7 @@ protected void prepareTestData() {\n      * Logs in the user to the GAE simulation environment as an admin.\n      */\n     protected void loginAsAdmin() {\n-        UserInfo user = gaeSimulation.loginAsAdmin(\"admin.user\");\n+        UserInfo user = mockUserProvision.loginAsAdmin(\"admin.user\");\n         assertTrue(user.isAdmin);\n     }\n \n@@ -151,7 +153,7 @@ protected void loginAsAdmin() {\n      * (without any right).\n      */\n     protected void loginAsUnregistered(String userId) {\n-        UserInfo user = gaeSimulation.loginUser(userId);\n+        UserInfo user = mockUserProvision.loginUser(userId);\n         assertFalse(user.isStudent);\n         assertFalse(user.isInstructor);\n         assertFalse(user.isAdmin);\n@@ -162,7 +164,7 @@ protected void loginAsUnregistered(String userId) {\n      * (without admin rights or student rights).\n      */\n     protected void loginAsInstructor(String userId) {\n-        UserInfo user = gaeSimulation.loginUser(userId);\n+        UserInfo user = mockUserProvision.loginUser(userId);\n         assertFalse(user.isStudent);\n         assertTrue(user.isInstructor);\n         assertFalse(user.isAdmin);\n@@ -173,7 +175,7 @@ protected void loginAsInstructor(String userId) {\n      * (without admin rights or instructor rights).\n      */\n     protected void loginAsStudent(String userId) {\n-        UserInfo user = gaeSimulation.loginUser(userId);\n+        UserInfo user = mockUserProvision.loginUser(userId);\n         assertTrue(user.isStudent);\n         assertFalse(user.isInstructor);\n         assertFalse(user.isAdmin);\n@@ -184,12 +186,19 @@ protected void loginAsStudent(String userId) {\n      * (without admin rights).\n      */\n     protected void loginAsStudentInstructor(String userId) {\n-        UserInfo user = gaeSimulation.loginUser(userId);\n+        UserInfo user = mockUserProvision.loginUser(userId);\n         assertTrue(user.isStudent);\n         assertTrue(user.isInstructor);\n         assertFalse(user.isAdmin);\n     }\n \n+    /**\n+     * Logs the current user out of the GAE simulation environment.\n+     */\n+    protected void logoutUser() {\n+        mockUserProvision.logoutUser();\n+    }\n+\n     protected void grantInstructorWithSectionPrivilege(\n             InstructorAttributes instructor, String privilege, String[] sections)\n             throws InvalidParametersException, EntityDoesNotExistException {\n@@ -263,7 +272,7 @@ protected void verifyAccessibleWithoutLogin(String... params) {\n \n         ______TS(\"Non-logged-in users can access\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n         verifyCanAccess(params);\n \n     }\n@@ -272,7 +281,7 @@ protected void verifyInaccessibleWithoutLogin(String... params) {\n \n         ______TS(\"Non-logged-in users cannot access\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n         verifyCannotAccess(params);\n \n     }"
  },
  {
    "sha": "22dad427dd3c958c08d781c2efc67f1c9a0256a8",
    "filename": "src/test/java/teammates/ui/webapi/CreateFeedbackResponseCommentActionTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/CreateFeedbackResponseCommentActionTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/CreateFeedbackResponseCommentActionTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/ui/webapi/CreateFeedbackResponseCommentActionTest.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -498,7 +498,7 @@ protected void testAccessControl_instructorWithoutSubmitSessionInSectionsPrivile\n     @Test\n     protected void testAccessControl_logOut_shouldFail() {\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n         String[] submissionParams = new String[] {\n                 Const.ParamsNames.INTENT, Intent.INSTRUCTOR_RESULT.toString(),\n                 Const.ParamsNames.FEEDBACK_RESPONSE_ID, StringHelper.encrypt(response1ForQ3.getId()),"
  },
  {
    "sha": "b913ca1038a2e4d702b3a1473f7b69e720545ce7",
    "filename": "src/test/java/teammates/ui/webapi/GetAuthInfoActionTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 11,
    "changes": 22,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/GetAuthInfoActionTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/GetAuthInfoActionTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/ui/webapi/GetAuthInfoActionTest.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -12,15 +12,15 @@\n import teammates.common.exception.UnauthorizedAccessException;\n import teammates.common.util.Const;\n import teammates.common.util.StringHelper;\n-import teammates.logic.api.GateKeeper;\n+import teammates.logic.api.UserProvision;\n import teammates.ui.output.AuthInfo;\n \n /**\n  * SUT: {@link GetAuthInfoAction}.\n  */\n public class GetAuthInfoActionTest extends BaseActionTest<GetAuthInfoAction> {\n \n-    private GateKeeper gateKeeper = new GateKeeper();\n+    private UserProvision userProvision = new UserProvision();\n \n     @Override\n     protected String getActionUri() {\n@@ -38,24 +38,24 @@ protected void testExecute() {\n \n         ______TS(\"Normal case: No logged in user\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n \n         GetAuthInfoAction a = getAction();\n         JsonResult r = getJsonResult(a);\n \n         assertEquals(HttpStatus.SC_OK, r.getStatusCode());\n \n         AuthInfo output = (AuthInfo) r.getOutput();\n-        assertEquals(gateKeeper.getLoginUrl(Const.WebPageURIs.STUDENT_HOME_PAGE), output.getStudentLoginUrl());\n-        assertEquals(gateKeeper.getLoginUrl(Const.WebPageURIs.INSTRUCTOR_HOME_PAGE), output.getInstructorLoginUrl());\n-        assertEquals(gateKeeper.getLoginUrl(Const.WebPageURIs.ADMIN_HOME_PAGE), output.getAdminLoginUrl());\n+        assertEquals(userProvision.getLoginUrl(Const.WebPageURIs.STUDENT_HOME_PAGE), output.getStudentLoginUrl());\n+        assertEquals(userProvision.getLoginUrl(Const.WebPageURIs.INSTRUCTOR_HOME_PAGE), output.getInstructorLoginUrl());\n+        assertEquals(userProvision.getLoginUrl(Const.WebPageURIs.ADMIN_HOME_PAGE), output.getAdminLoginUrl());\n         assertNull(output.getUser());\n         assertNull(output.getInstitute());\n         assertFalse(output.isMasquerade());\n \n         ______TS(\"Normal case: No logged in user, has nextUrl parameter\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n         String nextUrl = \"/web/join\";\n \n         a = getAction(new String[] { \"nextUrl\", nextUrl });\n@@ -64,9 +64,9 @@ protected void testExecute() {\n         assertEquals(HttpStatus.SC_OK, r.getStatusCode());\n \n         output = (AuthInfo) r.getOutput();\n-        assertEquals(gateKeeper.getLoginUrl(nextUrl), output.getStudentLoginUrl());\n-        assertEquals(gateKeeper.getLoginUrl(nextUrl), output.getInstructorLoginUrl());\n-        assertEquals(gateKeeper.getLoginUrl(nextUrl), output.getAdminLoginUrl());\n+        assertEquals(userProvision.getLoginUrl(nextUrl), output.getStudentLoginUrl());\n+        assertEquals(userProvision.getLoginUrl(nextUrl), output.getInstructorLoginUrl());\n+        assertEquals(userProvision.getLoginUrl(nextUrl), output.getAdminLoginUrl());\n         assertNull(output.getUser());\n         assertNull(output.getInstitute());\n         assertFalse(output.isMasquerade());\n@@ -157,7 +157,7 @@ public void testExecute_addCsrfTokenCookies_shouldAddToResponseAccordingToExisti\n \n         ______TS(\"No logged in user\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n \n         GetAuthInfoAction a = getAction(emptyParams);\n         JsonResult r = getJsonResult(a);"
  },
  {
    "sha": "13d5c5b7f1ba650e19affca53fe1cc12f9984c44",
    "filename": "src/test/java/teammates/ui/webapi/GetFeedbackQuestionRecipientsActionTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/GetFeedbackQuestionRecipientsActionTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/GetFeedbackQuestionRecipientsActionTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/ui/webapi/GetFeedbackQuestionRecipientsActionTest.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -232,7 +232,7 @@ protected void testAccessControl_studentSubmission()\n                         StringHelper.encrypt(registeredStudent.getKey()), \"\", \"\");\n         verifyCannotAccess(registeredStudentSubmissionParams);\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n         verifyCannotAccess(registeredStudentSubmissionParams);\n \n         ______TS(\"Question not intended shown to instructor, moderated instructor should not be accessible\");"
  },
  {
    "sha": "9b66786dc8fa34d387d34e44b8f629f3a27a1aa1",
    "filename": "src/test/java/teammates/ui/webapi/GetLocalDateTimeInfoActionTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/GetLocalDateTimeInfoActionTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/GetLocalDateTimeInfoActionTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/ui/webapi/GetLocalDateTimeInfoActionTest.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -105,7 +105,7 @@ protected void testAccessControl() throws Exception {\n \n         ______TS(\"User need to be logged in\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n         verifyInaccessibleWithoutLogin(params);\n \n         ______TS(\"Only user who is instructor can access\");"
  },
  {
    "sha": "b94130c0bab1820487234548e4f89ee51339435e",
    "filename": "src/test/java/teammates/ui/webapi/GetRegkeyValidityActionTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/GetRegkeyValidityActionTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/18ab1552101e89fd41c86263ad99404aafa4d161/src/test/java/teammates/ui/webapi/GetRegkeyValidityActionTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/ui/webapi/GetRegkeyValidityActionTest.java?ref=18ab1552101e89fd41c86263ad99404aafa4d161",
    "patch": "@@ -51,7 +51,7 @@ protected void testExecute() throws Exception {\n \n         ______TS(\"Normal case: No logged in user for a used regkey; should be valid/used/disallowed\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n \n         params = new String[] {\n                 Const.ParamsNames.REGKEY, student1Key,\n@@ -105,7 +105,7 @@ protected void testExecute() throws Exception {\n \n         logic.resetStudentGoogleId(\"student1InCourse1@gmail.tmt\", \"idOfTypicalCourse1\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n \n         a = getAction(params);\n         r = getJsonResult(a);\n@@ -162,7 +162,7 @@ protected void testExecute() throws Exception {\n \n         ______TS(\"Normal case: Invalid intent; should be invalid/unused/disallowed\");\n \n-        gaeSimulation.logoutUser();\n+        logoutUser();\n \n         params = new String[] {\n                 Const.ParamsNames.REGKEY, student1Key,"
  }
]
