[
  {
    "sha": "f2f66e7d81b8a2364e7ff8cf5cbc339f8525299f",
    "filename": "src/main/java/teammates/common/datatransfer/ResultFetchType.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/common/datatransfer/ResultFetchType.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/common/datatransfer/ResultFetchType.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/common/datatransfer/ResultFetchType.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -0,0 +1,34 @@\n+package teammates.common.datatransfer;\n+\n+/**\n+ * The result fetching type to indicate whether the fetch is for giver only, receiver only or both.\n+ */\n+public enum ResultFetchType {\n+    /**\n+     * Fetch by giver only.\n+     */\n+    GIVER_ONLY,\n+    /**\n+     * Fetch by receiver only.\n+     */\n+    RECEIVER_ONLY,\n+    /**\n+     * Fetch by both giver and receiver.\n+     */\n+    BOTH;\n+\n+    /**\n+     * Parse the input string into a {@link ResultFetchType} and default to {@link ResultFetchType}.BOTH.\n+     */\n+    public static ResultFetchType parseFetchType(String typeString) {\n+        switch (typeString.toLowerCase()) {\n+        case \"giver\":\n+            return GIVER_ONLY;\n+        case \"receiver\":\n+            return RECEIVER_ONLY;\n+        default:\n+        }\n+\n+        return BOTH;\n+    }\n+}"
  },
  {
    "sha": "78cd3f3d9c9d471e26843255fe72e0139e01bcdc",
    "filename": "src/main/java/teammates/common/util/Const.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/common/util/Const.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/common/util/Const.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/common/util/Const.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -121,6 +121,8 @@ private Const() {\n \n         public static final String FEEDBACK_RESULTS_GROUPBYSECTION = \"frgroupbysection\";\n \n+        public static final String FEEDBACK_RESULTS_SECTION_BY_GIVER_OR_RECEIVER = \"frsessionbygiverorreceiver\";\n+\n         public static final String PREVIEWAS = \"previewas\";\n \n         public static final String STUDENT_ID = \"googleid\";"
  },
  {
    "sha": "c61f10d86b131d9552ffe9927a44a9b55b9ff96a",
    "filename": "src/main/java/teammates/logic/api/Logic.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/logic/api/Logic.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/logic/api/Logic.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/logic/api/Logic.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -11,6 +11,7 @@\n import teammates.common.datatransfer.FeedbackParticipantType;\n import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n import teammates.common.datatransfer.InstructorSearchResultBundle;\n+import teammates.common.datatransfer.ResultFetchType;\n import teammates.common.datatransfer.SessionResultsBundle;\n import teammates.common.datatransfer.StudentSearchResultBundle;\n import teammates.common.datatransfer.UserRole;\n@@ -1110,18 +1111,19 @@ public boolean areThereResponsesForQuestion(String feedbackQuestionId) {\n     /**\n      * Gets the session result for a feedback session.\n      *\n-     * @see FeedbackSessionsLogic#getSessionResultsForUser(String, String, String, UserRole, String, String)\n+     * @see FeedbackSessionsLogic#getSessionResultsForUser(String, String, String, UserRole, String, String, ResultFetchType)\n      */\n     public SessionResultsBundle getSessionResultsForUser(\n             String feedbackSessionName, String courseId, String userEmail, UserRole role,\n-            @Nullable String questionId, @Nullable String section) {\n+            @Nullable String questionId, @Nullable String section, ResultFetchType resultFetchType) {\n         Assumption.assertNotNull(feedbackSessionName);\n         Assumption.assertNotNull(courseId);\n         Assumption.assertNotNull(userEmail);\n         Assumption.assertNotNull(role);\n+        Assumption.assertNotNull(resultFetchType);\n \n         return feedbackSessionsLogic.getSessionResultsForUser(\n-                feedbackSessionName, courseId, userEmail, role, questionId, section);\n+                feedbackSessionName, courseId, userEmail, role, questionId, section, resultFetchType);\n     }\n \n     /**"
  },
  {
    "sha": "63012ebafcdee5d977520993701e1120bc1cfd6d",
    "filename": "src/main/java/teammates/logic/core/FeedbackResponseCommentsLogic.java",
    "status": "modified",
    "additions": 25,
    "deletions": 2,
    "changes": 27,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/logic/core/FeedbackResponseCommentsLogic.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/logic/core/FeedbackResponseCommentsLogic.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/logic/core/FeedbackResponseCommentsLogic.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -10,6 +10,7 @@\n import teammates.common.datatransfer.CourseRoster;\n import teammates.common.datatransfer.FeedbackParticipantType;\n import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.ResultFetchType;\n import teammates.common.datatransfer.UserRole;\n import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n@@ -95,13 +96,24 @@ public FeedbackResponseCommentAttributes getFeedbackResponseCommentForResponseFr\n      * @param courseId the course ID of the feedback session\n      * @param feedbackSessionName the feedback session name\n      * @param section if null, will retrieve all comments in the session\n+     * @param resultFetchType whether the comments fetched are by the giver's, the receiver's or both section\n      * @return a list of feedback response comments\n      */\n     public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentForSessionInSection(\n-            String courseId, String feedbackSessionName, @Nullable String section) {\n+            String courseId, String feedbackSessionName, @Nullable String section, ResultFetchType resultFetchType) {\n         if (section == null) {\n             return frcDb.getFeedbackResponseCommentsForSession(courseId, feedbackSessionName);\n         }\n+\n+        switch (resultFetchType) {\n+        case GIVER_ONLY:\n+            return frcDb.getFeedbackResponseCommentsForSessionInGiverSection(courseId, feedbackSessionName, section);\n+        case RECEIVER_ONLY:\n+            return frcDb.getFeedbackResponseCommentsForSessionInReceiverSection(courseId, feedbackSessionName, section);\n+        case BOTH:\n+        default:\n+        }\n+\n         return frcDb.getFeedbackResponseCommentsForSessionInSection(courseId, feedbackSessionName, section);\n     }\n \n@@ -110,13 +122,24 @@ public FeedbackResponseCommentAttributes getFeedbackResponseCommentForResponseFr\n      *\n      * @param questionId the ID of the question\n      * @param section if null, will retrieve all comments for the question\n+     * @param resultFetchType whether the comments fetched are by the giver's, the receiver's or both section\n      * @return a list of feedback response comments\n      */\n     public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentForQuestionInSection(\n-            String questionId, @Nullable String section) {\n+            String questionId, @Nullable String section, ResultFetchType resultFetchType) {\n         if (section == null) {\n             return frcDb.getFeedbackResponseCommentsForQuestion(questionId);\n         }\n+\n+        switch (resultFetchType) {\n+        case GIVER_ONLY:\n+            return frcDb.getFeedbackResponseCommentsForQuestionInGiverSection(questionId, section);\n+        case RECEIVER_ONLY:\n+            return frcDb.getFeedbackResponseCommentsForQuestionInReceiverSection(questionId, section);\n+        case BOTH:\n+        default:\n+        }\n+\n         return frcDb.getFeedbackResponseCommentsForQuestionInSection(questionId, section);\n     }\n "
  },
  {
    "sha": "4a68db89fc62a62fddba60101e637b747e26cc45",
    "filename": "src/main/java/teammates/logic/core/FeedbackResponsesLogic.java",
    "status": "modified",
    "additions": 23,
    "deletions": 2,
    "changes": 25,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/logic/core/FeedbackResponsesLogic.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/logic/core/FeedbackResponsesLogic.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/logic/core/FeedbackResponsesLogic.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -11,6 +11,7 @@\n import teammates.common.datatransfer.AttributesDeletionQuery;\n import teammates.common.datatransfer.CourseRoster;\n import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.ResultFetchType;\n import teammates.common.datatransfer.UserRole;\n import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n@@ -98,10 +99,20 @@ public FeedbackResponseAttributes getFeedbackResponse(\n      * @return a list of responses\n      */\n     public List<FeedbackResponseAttributes> getFeedbackResponsesForSessionInSection(\n-            String feedbackSessionName, String courseId, @Nullable String section) {\n+            String feedbackSessionName, String courseId, @Nullable String section, ResultFetchType resultFetchType) {\n         if (section == null) {\n             return getFeedbackResponsesForSession(feedbackSessionName, courseId);\n         }\n+\n+        switch (resultFetchType) {\n+        case GIVER_ONLY:\n+            return frDb.getFeedbackResponsesForSessionInGiverSection(feedbackSessionName, courseId, section);\n+        case RECEIVER_ONLY:\n+            return frDb.getFeedbackResponsesForSessionInReceiverSection(feedbackSessionName, courseId, section);\n+        case BOTH:\n+        default:\n+        }\n+\n         return frDb.getFeedbackResponsesForSessionInSection(feedbackSessionName, courseId, section);\n     }\n \n@@ -127,10 +138,20 @@ public boolean areThereResponsesForQuestion(String feedbackQuestionId) {\n      * @return a list of responses\n      */\n     public List<FeedbackResponseAttributes> getFeedbackResponsesForQuestionInSection(\n-            String feedbackQuestionId, @Nullable String section) {\n+            String feedbackQuestionId, @Nullable String section, ResultFetchType resultFetchType) {\n         if (section == null) {\n             return getFeedbackResponsesForQuestion(feedbackQuestionId);\n         }\n+\n+        switch (resultFetchType) {\n+        case GIVER_ONLY:\n+            return frDb.getFeedbackResponsesForQuestionInGiverSection(feedbackQuestionId, section);\n+        case RECEIVER_ONLY:\n+            return frDb.getFeedbackResponsesForQuestionInReceiverSection(feedbackQuestionId, section);\n+        case BOTH:\n+        default:\n+        }\n+\n         return frDb.getFeedbackResponsesForQuestionInSection(feedbackQuestionId, section);\n     }\n "
  },
  {
    "sha": "131cfedb60952ced65f667570315f75881fad28a",
    "filename": "src/main/java/teammates/logic/core/FeedbackSessionsLogic.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/logic/core/FeedbackSessionsLogic.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/logic/core/FeedbackSessionsLogic.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/logic/core/FeedbackSessionsLogic.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -16,6 +16,7 @@\n import teammates.common.datatransfer.AttributesDeletionQuery;\n import teammates.common.datatransfer.CourseRoster;\n import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.ResultFetchType;\n import teammates.common.datatransfer.SessionResultsBundle;\n import teammates.common.datatransfer.UserRole;\n import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n@@ -514,7 +515,7 @@ public int getActualTotalSubmission(FeedbackSessionAttributes fsa) {\n      */\n     public SessionResultsBundle getSessionResultsForUser(\n             String feedbackSessionName, String courseId, String userEmail, UserRole role,\n-            @Nullable String questionId, @Nullable String section) {\n+            @Nullable String questionId, @Nullable String section, ResultFetchType resultFetchType) {\n         CourseRoster roster = new CourseRoster(\n                 studentsLogic.getStudentsForCourse(courseId),\n                 instructorsLogic.getInstructorsForCourse(courseId));\n@@ -542,9 +543,11 @@ public SessionResultsBundle getSessionResultsForUser(\n         if (isInstructor(role)) {\n             // load all response for instructors and passively filter them later\n             if (questionId == null) {\n-                allResponses = frLogic.getFeedbackResponsesForSessionInSection(feedbackSessionName, courseId, section);\n+                allResponses = frLogic.getFeedbackResponsesForSessionInSection(\n+                        feedbackSessionName, courseId, section, resultFetchType);\n             } else {\n-                allResponses = frLogic.getFeedbackResponsesForQuestionInSection(questionId, section);\n+                allResponses = frLogic.getFeedbackResponsesForQuestionInSection(\n+                        questionId, section, resultFetchType);\n             }\n         } else {\n             if (section != null) {\n@@ -563,9 +566,11 @@ public SessionResultsBundle getSessionResultsForUser(\n         // load comment(s)\n         List<FeedbackResponseCommentAttributes> allComments;\n         if (questionId == null) {\n-            allComments = frcLogic.getFeedbackResponseCommentForSessionInSection(courseId, feedbackSessionName, section);\n+            allComments = frcLogic.getFeedbackResponseCommentForSessionInSection(\n+                    courseId, feedbackSessionName, section, resultFetchType);\n         } else {\n-            allComments = frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, section);\n+            allComments = frcLogic.getFeedbackResponseCommentForQuestionInSection(\n+                    questionId, section, resultFetchType);\n         }\n \n         // related questions, responses, and comment"
  },
  {
    "sha": "02f6c12cc863031a1d8a3bfb236c0454f1ab2404",
    "filename": "src/main/java/teammates/storage/api/FeedbackResponseCommentsDb.java",
    "status": "modified",
    "additions": 92,
    "deletions": 2,
    "changes": 94,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/storage/api/FeedbackResponseCommentsDb.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/storage/api/FeedbackResponseCommentsDb.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/storage/api/FeedbackResponseCommentsDb.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -164,7 +164,43 @@ public FeedbackResponseCommentAttributes getFeedbackResponseCommentForResponseFr\n         Assumption.assertNotNull(feedbackSessionName);\n         Assumption.assertNotNull(section);\n \n-        return makeAttributes(getFeedbackResponseCommentEntitiesForSessionInSection(courseId, feedbackSessionName, section));\n+        Map<Long, FeedbackResponseComment> uniqueResponseComments = new HashMap<>();\n+        for (FeedbackResponseComment comment : getFeedbackResponseCommentEntitiesForSessionInGiverSection(\n+                courseId, feedbackSessionName, section)) {\n+            uniqueResponseComments.put(comment.getFeedbackResponseCommentId(), comment);\n+        }\n+        for (FeedbackResponseComment comment : getFeedbackResponseCommentEntitiesForSessionInReceiverSection(\n+                courseId, feedbackSessionName, section)) {\n+            uniqueResponseComments.put(comment.getFeedbackResponseCommentId(), comment);\n+        }\n+\n+        return makeAttributes(uniqueResponseComments.values());\n+    }\n+\n+    /**\n+     * Gets all comments which have its corresponding response given to/from a section of a feedback session of a course.\n+     */\n+    public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForSessionInGiverSection(\n+            String courseId, String feedbackSessionName, String section) {\n+        Assumption.assertNotNull(courseId);\n+        Assumption.assertNotNull(feedbackSessionName);\n+        Assumption.assertNotNull(section);\n+\n+        return makeAttributes(getFeedbackResponseCommentEntitiesForSessionInGiverSection(\n+                courseId, feedbackSessionName, section));\n+    }\n+\n+    /**\n+     * Gets all comments which have its corresponding response given to/from a section of a feedback session of a course.\n+     */\n+    public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForSessionInReceiverSection(\n+            String courseId, String feedbackSessionName, String section) {\n+        Assumption.assertNotNull(courseId);\n+        Assumption.assertNotNull(feedbackSessionName);\n+        Assumption.assertNotNull(section);\n+\n+        return makeAttributes(getFeedbackResponseCommentEntitiesForSessionInReceiverSection(\n+                courseId, feedbackSessionName, section));\n     }\n \n     /**\n@@ -178,6 +214,28 @@ public FeedbackResponseCommentAttributes getFeedbackResponseCommentForResponseFr\n         return makeAttributes(getFeedbackResponseCommentEntitiesForQuestionInSection(questionId, section));\n     }\n \n+    /**\n+     * Gets all comments which have its corresponding response given to/from a section of a feedback question of a course.\n+     */\n+    public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForQuestionInGiverSection(\n+            String questionId, String section) {\n+        Assumption.assertNotNull(questionId);\n+        Assumption.assertNotNull(section);\n+\n+        return makeAttributes(getFeedbackResponseCommentEntitiesForQuestionInGiverSection(questionId, section));\n+    }\n+\n+    /**\n+     * Gets all comments which have its corresponding response given to/from a section of a feedback question of a course.\n+     */\n+    public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForQuestionInReceiverSection(\n+            String questionId, String section) {\n+        Assumption.assertNotNull(questionId);\n+        Assumption.assertNotNull(section);\n+\n+        return makeAttributes(getFeedbackResponseCommentEntitiesForQuestionInReceiverSection(questionId, section));\n+    }\n+\n     /**\n      * Updates a feedback response comment by {@link FeedbackResponseCommentAttributes.UpdateOptions}.\n      *\n@@ -426,6 +484,23 @@ private FeedbackResponseComment getFeedbackResponseCommentEntitiesForResponseFro\n         // creating map to remove duplicates\n         Map<Long, FeedbackResponseComment> comments = new HashMap<>();\n \n+        for (FeedbackResponseComment comment\n+                : getFeedbackResponseCommentEntitiesForQuestionInGiverSection(questionId, section)) {\n+            comments.put(comment.getFeedbackResponseCommentId(), comment);\n+        }\n+        for (FeedbackResponseComment comment\n+                : getFeedbackResponseCommentEntitiesForQuestionInReceiverSection(questionId, section)) {\n+            comments.put(comment.getFeedbackResponseCommentId(), comment);\n+        }\n+\n+        return comments.values();\n+    }\n+\n+    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForQuestionInGiverSection(\n+            String questionId, String section) {\n+        // creating map to remove duplicates\n+        Map<Long, FeedbackResponseComment> comments = new HashMap<>();\n+\n         List<FeedbackResponseComment> responseCommentsFromSection = load()\n                 .filter(\"feedbackQuestionId =\", questionId)\n                 .filter(\"giverSection =\", section)\n@@ -435,6 +510,14 @@ private FeedbackResponseComment getFeedbackResponseCommentEntitiesForResponseFro\n             comments.put(comment.getFeedbackResponseCommentId(), comment);\n         }\n \n+        return comments.values();\n+    }\n+\n+    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForQuestionInReceiverSection(\n+            String questionId, String section) {\n+        // creating map to remove duplicates\n+        Map<Long, FeedbackResponseComment> comments = new HashMap<>();\n+\n         List<FeedbackResponseComment> responseCommentsToSection = load()\n                 .filter(\"feedbackQuestionId =\", questionId)\n                 .filter(\"receiverSection =\", section)\n@@ -447,7 +530,7 @@ private FeedbackResponseComment getFeedbackResponseCommentEntitiesForResponseFro\n         return comments.values();\n     }\n \n-    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForSessionInSection(\n+    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForSessionInGiverSection(\n             String courseId, String feedbackSessionName, String section) {\n         Map<Long, FeedbackResponseComment> comments = new HashMap<>();\n \n@@ -461,6 +544,13 @@ private FeedbackResponseComment getFeedbackResponseCommentEntitiesForResponseFro\n             comments.put(comment.getFeedbackResponseCommentId(), comment);\n         }\n \n+        return comments.values();\n+    }\n+\n+    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForSessionInReceiverSection(\n+            String courseId, String feedbackSessionName, String section) {\n+        Map<Long, FeedbackResponseComment> comments = new HashMap<>();\n+\n         List<FeedbackResponseComment> secondQueryResponseComments = load()\n                 .filter(\"courseId =\", courseId)\n                 .filter(\"feedbackSessionName =\", feedbackSessionName)"
  },
  {
    "sha": "6cb154382eb87910b0dafd94beb96cd41b7a95fb",
    "filename": "src/main/java/teammates/storage/api/FeedbackResponsesDb.java",
    "status": "modified",
    "additions": 99,
    "deletions": 26,
    "changes": 125,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/storage/api/FeedbackResponsesDb.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/storage/api/FeedbackResponsesDb.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/storage/api/FeedbackResponsesDb.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -2,7 +2,6 @@\n \n import static com.googlecode.objectify.ObjectifyService.ofy;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -90,7 +89,32 @@ public FeedbackResponseAttributes getFeedbackResponse(\n         Assumption.assertNotNull(feedbackQuestionId);\n         Assumption.assertNotNull(section);\n \n-        return makeAttributes(getFeedbackResponseEntitiesForQuestionInSection(feedbackQuestionId, section));\n+        return makeAttributes(getFeedbackResponseEntitiesForQuestionInSection(\n+                feedbackQuestionId, section));\n+    }\n+\n+    /**\n+     * Gets all feedback responses of a question in a specific giver's section.\n+     */\n+    public List<FeedbackResponseAttributes> getFeedbackResponsesForQuestionInGiverSection(\n+            String feedbackQuestionId, String section) {\n+        Assumption.assertNotNull(feedbackQuestionId);\n+        Assumption.assertNotNull(section);\n+\n+        return makeAttributes(getFeedbackResponseEntitiesForQuestionInGiverSection(\n+                feedbackQuestionId, section));\n+    }\n+\n+    /**\n+     * Gets all feedback responses of a question in a specific receiver's section.\n+     */\n+    public List<FeedbackResponseAttributes> getFeedbackResponsesForQuestionInReceiverSection(\n+            String feedbackQuestionId, String section) {\n+        Assumption.assertNotNull(feedbackQuestionId);\n+        Assumption.assertNotNull(section);\n+\n+        return makeAttributes(getFeedbackResponseEntitiesForQuestionInReceiverSection(\n+                feedbackQuestionId, section));\n     }\n \n     /**\n@@ -135,7 +159,34 @@ public boolean areThereResponsesForQuestion(String feedbackQuestionId) {\n         Assumption.assertNotNull(courseId);\n         Assumption.assertNotNull(section);\n \n-        return makeAttributes(getFeedbackResponseEntitiesForSessionInSection(feedbackSessionName, courseId, section));\n+        return makeAttributes(\n+                getFeedbackResponseEntitiesForSessionInSection(feedbackSessionName, courseId, section));\n+    }\n+\n+    /**\n+     * Gets all responses given to/from a section in a feedback session in a course.\n+     */\n+    public List<FeedbackResponseAttributes> getFeedbackResponsesForSessionInGiverSection(\n+            String feedbackSessionName, String courseId, String section) {\n+        Assumption.assertNotNull(feedbackSessionName);\n+        Assumption.assertNotNull(courseId);\n+        Assumption.assertNotNull(section);\n+\n+        return makeAttributes(\n+                getFeedbackResponseEntitiesForSessionInGiverSection(feedbackSessionName, courseId, section));\n+    }\n+\n+    /**\n+     * Gets all responses given to/from a section in a feedback session in a course.\n+     */\n+    public List<FeedbackResponseAttributes> getFeedbackResponsesForSessionInReceiverSection(\n+            String feedbackSessionName, String courseId, String section) {\n+        Assumption.assertNotNull(feedbackSessionName);\n+        Assumption.assertNotNull(courseId);\n+        Assumption.assertNotNull(section);\n+\n+        return makeAttributes(\n+                getFeedbackResponseEntitiesForSessionInReceiverSection(feedbackSessionName, courseId, section));\n     }\n \n     /**\n@@ -312,19 +363,34 @@ private FeedbackResponse getFeedbackResponseEntity(String feedbackResponseId) {\n     }\n \n     private Collection<FeedbackResponse> getFeedbackResponseEntitiesForQuestionInSection(\n-                String feedbackQuestionId, String section) {\n-        List<FeedbackResponse> allResponses = new ArrayList<>();\n+            String feedbackQuestionId, String section) {\n+        Map<String, FeedbackResponse> uniqueResponses = new HashMap<>();\n \n-        allResponses.addAll(load()\n+        for (FeedbackResponse feedbackResponse\n+                : getFeedbackResponseEntitiesForQuestionInGiverSection(feedbackQuestionId, section)) {\n+            uniqueResponses.put(feedbackResponse.getId(), feedbackResponse);\n+        }\n+        for (FeedbackResponse feedbackResponse\n+                : getFeedbackResponseEntitiesForQuestionInReceiverSection(feedbackQuestionId, section)) {\n+            uniqueResponses.put(feedbackResponse.getId(), feedbackResponse);\n+        }\n+        return uniqueResponses.values();\n+    }\n+\n+    private Collection<FeedbackResponse> getFeedbackResponseEntitiesForQuestionInGiverSection(\n+            String feedbackQuestionId, String section) {\n+        return load()\n                 .filter(\"feedbackQuestionId =\", feedbackQuestionId)\n                 .filter(\"giverSection =\", section)\n-                .list());\n-        allResponses.addAll(load()\n+                .list();\n+    }\n+\n+    private Collection<FeedbackResponse> getFeedbackResponseEntitiesForQuestionInReceiverSection(\n+            String feedbackQuestionId, String section) {\n+        return load()\n                 .filter(\"feedbackQuestionId =\", feedbackQuestionId)\n                 .filter(\"receiverSection =\", section)\n-                .list());\n-\n-        return removeDuplicates(allResponses);\n+                .list();\n     }\n \n     private List<FeedbackResponse> getFeedbackResponseEntitiesForQuestion(String feedbackQuestionId) {\n@@ -342,29 +408,36 @@ private FeedbackResponse getFeedbackResponseEntity(String feedbackResponseId) {\n \n     private Collection<FeedbackResponse> getFeedbackResponseEntitiesForSessionInSection(\n             String feedbackSessionName, String courseId, String section) {\n-        List<FeedbackResponse> allResponse = new ArrayList<>();\n+        Map<String, FeedbackResponse> uniqueResponses = new HashMap<>();\n+\n+        for (FeedbackResponse feedbackResponse\n+                : getFeedbackResponseEntitiesForSessionInGiverSection(feedbackSessionName, courseId, section)) {\n+            uniqueResponses.put(feedbackResponse.getId(), feedbackResponse);\n+        }\n+        for (FeedbackResponse feedbackResponse\n+                : getFeedbackResponseEntitiesForSessionInReceiverSection(feedbackSessionName, courseId, section)) {\n+            uniqueResponses.put(feedbackResponse.getId(), feedbackResponse);\n+        }\n+\n+        return uniqueResponses.values();\n+    }\n \n-        allResponse.addAll(load()\n+    private Collection<FeedbackResponse> getFeedbackResponseEntitiesForSessionInGiverSection(\n+            String feedbackSessionName, String courseId, String section) {\n+        return load()\n                 .filter(\"feedbackSessionName =\", feedbackSessionName)\n                 .filter(\"courseId =\", courseId)\n                 .filter(\"giverSection =\", section)\n-                .list());\n+                .list();\n+    }\n \n-        allResponse.addAll(load()\n+    private Collection<FeedbackResponse> getFeedbackResponseEntitiesForSessionInReceiverSection(\n+            String feedbackSessionName, String courseId, String section) {\n+        return load()\n                 .filter(\"feedbackSessionName =\", feedbackSessionName)\n                 .filter(\"courseId =\", courseId)\n                 .filter(\"receiverSection =\", section)\n-                .list());\n-\n-        return removeDuplicates(allResponse);\n-    }\n-\n-    private Collection<FeedbackResponse> removeDuplicates(Collection<FeedbackResponse> responses) {\n-        Map<String, FeedbackResponse> uniqueResponses = new HashMap<>();\n-        for (FeedbackResponse response : responses) {\n-            uniqueResponses.put(response.getId(), response);\n-        }\n-        return uniqueResponses.values();\n+                .list();\n     }\n \n     private List<FeedbackResponse> getFeedbackResponseEntitiesFromGiverForQuestion("
  },
  {
    "sha": "946ad383ae0b4429765b444ee29147516c588fea",
    "filename": "src/main/java/teammates/ui/webapi/GetSessionResultsAction.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/ui/webapi/GetSessionResultsAction.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/main/java/teammates/ui/webapi/GetSessionResultsAction.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/main/java/teammates/ui/webapi/GetSessionResultsAction.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -1,5 +1,6 @@\n package teammates.ui.webapi;\n \n+import teammates.common.datatransfer.ResultFetchType;\n import teammates.common.datatransfer.SessionResultsBundle;\n import teammates.common.datatransfer.UserRole;\n import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n@@ -71,6 +72,12 @@ JsonResult execute() {\n         // Allow additional filter by question ID (equivalent to question number) and section name\n         String questionId = getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n         String selectedSection = getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYSECTION);\n+        String sessionByGiverOrReceiver = getRequestParamValue(\n+                Const.ParamsNames.FEEDBACK_RESULTS_SECTION_BY_GIVER_OR_RECEIVER);\n+        ResultFetchType resultFetchType = ResultFetchType.BOTH;\n+        if (sessionByGiverOrReceiver != null) {\n+            resultFetchType = ResultFetchType.parseFetchType(sessionByGiverOrReceiver);\n+        }\n \n         SessionResultsBundle bundle;\n         Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n@@ -79,15 +86,15 @@ JsonResult execute() {\n             InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n \n             bundle = logic.getSessionResultsForUser(feedbackSessionName, courseId, instructor.getEmail(),\n-                    UserRole.INSTRUCTOR, questionId, selectedSection);\n+                    UserRole.INSTRUCTOR, questionId, selectedSection, resultFetchType);\n \n             return new JsonResult(SessionResultsData.initForInstructor(bundle));\n         case STUDENT_RESULT:\n             // Question number and section name filters are not applied here\n             StudentAttributes student = getStudent(courseId);\n \n             bundle = logic.getSessionResultsForUser(feedbackSessionName, courseId, student.getEmail(),\n-                    UserRole.STUDENT, null, null);\n+                    UserRole.STUDENT, null, null, ResultFetchType.BOTH);\n \n             return new JsonResult(SessionResultsData.initForStudent(bundle, student));\n         case INSTRUCTOR_SUBMISSION:"
  },
  {
    "sha": "11dd98dda2a5fcfdee9e27ad98e04147e641d99e",
    "filename": "src/test/java/teammates/logic/core/FeedbackQuestionsLogicTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/test/java/teammates/logic/core/FeedbackQuestionsLogicTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/test/java/teammates/logic/core/FeedbackQuestionsLogicTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/logic/core/FeedbackQuestionsLogicTest.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -571,7 +571,8 @@ public void testDeleteFeedbackQuestionCascade_existentQuestion_shouldDoCascadeDe\n         assertFalse(frLogic.getFeedbackResponsesForQuestion(typicalQuestion.getId()).isEmpty());\n         assertFalse(\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                        typicalQuestion.getCourseId(), typicalQuestion.getFeedbackSessionName(), null).stream()\n+                        typicalQuestion.getCourseId(), typicalQuestion.getFeedbackSessionName(), null, null)\n+                        .stream()\n                         .noneMatch(comment -> comment.feedbackQuestionId.equals(typicalQuestion.getId())));\n \n         fqLogic.deleteFeedbackQuestionCascade(typicalQuestion.getId());\n@@ -581,7 +582,8 @@ public void testDeleteFeedbackQuestionCascade_existentQuestion_shouldDoCascadeDe\n         assertTrue(frLogic.getFeedbackResponsesForQuestion(typicalQuestion.getId()).isEmpty());\n         assertTrue(\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                        typicalQuestion.getCourseId(), typicalQuestion.getFeedbackSessionName(), null).stream()\n+                        typicalQuestion.getCourseId(), typicalQuestion.getFeedbackSessionName(), null, null)\n+                        .stream()\n                         .noneMatch(comment -> comment.feedbackQuestionId.equals(typicalQuestion.getId())));\n \n         // verify that questions are shifted"
  },
  {
    "sha": "02eafd7619e3befcd6605395c7690d1d755adcc1",
    "filename": "src/test/java/teammates/logic/core/FeedbackResponseCommentsLogicTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 19,
    "changes": 41,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/test/java/teammates/logic/core/FeedbackResponseCommentsLogicTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/test/java/teammates/logic/core/FeedbackResponseCommentsLogicTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/logic/core/FeedbackResponseCommentsLogicTest.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -8,6 +8,7 @@\n \n import teammates.common.datatransfer.AttributesDeletionQuery;\n import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.ResultFetchType;\n import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n@@ -133,7 +134,7 @@ public void testGetFeedbackResponseComments() {\n \n         List<FeedbackResponseCommentAttributes> actualFrComments =\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                                 frComment.courseId, frComment.feedbackSessionName, null);\n+                                 frComment.courseId, frComment.feedbackSessionName, null, ResultFetchType.BOTH);\n         FeedbackResponseCommentAttributes actualFrComment = actualFrComments.get(0);\n \n         assertEquals(frComment.courseId, actualFrComment.courseId);\n@@ -204,7 +205,7 @@ public void testUpdateFeedbackResponseComment() throws Exception {\n         verifyPresentInDatastore(frComment);\n         List<FeedbackResponseCommentAttributes> actualFrComments =\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                        frComment.courseId, frComment.feedbackSessionName, null);\n+                        frComment.courseId, frComment.feedbackSessionName, null, ResultFetchType.BOTH);\n \n         FeedbackResponseCommentAttributes actualFrComment = null;\n         for (FeedbackResponseCommentAttributes comment : actualFrComments) {\n@@ -238,7 +239,7 @@ public void testDeleteFeedbackResponseComment() throws Exception {\n         FeedbackResponseCommentAttributes frComment = restoreFrCommentFromDataBundle(\"comment1FromT1C1ToR1Q1S1C1\");\n         FeedbackResponseCommentAttributes actualFrComment =\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                        frComment.courseId, frComment.feedbackSessionName, null).get(1);\n+                        frComment.courseId, frComment.feedbackSessionName, null, ResultFetchType.BOTH).get(1);\n \n         ______TS(\"silent fail nothing to delete\");\n \n@@ -273,83 +274,85 @@ public void testDeleteFeedbackResponseComments_deleteByCourseId() {\n         String courseId = \"idOfTypicalCourse1\";\n \n         List<FeedbackResponseCommentAttributes> frcList =\n-                frcLogic.getFeedbackResponseCommentForSessionInSection(courseId, \"First feedback session\", null);\n+                frcLogic.getFeedbackResponseCommentForSessionInSection(courseId, \"First feedback session\",\n+                        null, ResultFetchType.BOTH);\n         assertFalse(frcList.isEmpty());\n \n         frcLogic.deleteFeedbackResponseComments(\n                 AttributesDeletionQuery.builder()\n                         .withCourseId(courseId)\n                         .build());\n \n-        frcList = frcLogic.getFeedbackResponseCommentForSessionInSection(courseId, \"First feedback session\", null);\n+        frcList = frcLogic.getFeedbackResponseCommentForSessionInSection(courseId, \"First feedback session\",\n+                null, ResultFetchType.BOTH);\n         assertEquals(0, frcList.size());\n     }\n \n     @Test\n     public void testGetFeedbackResponseCommentForSessionInSection_noSectionName_shouldReturnCommentsInSession() {\n         List<FeedbackResponseCommentAttributes> comments =\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                        \"idOfTypicalCourse1\", \"First feedback session\", null);\n+                        \"idOfTypicalCourse1\", \"First feedback session\", null, ResultFetchType.BOTH);\n         assertEquals(3, comments.size());\n \n         comments = frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                        \"not_exist\", \"First feedback session\", null);\n+                        \"not_exist\", \"First feedback session\", null, ResultFetchType.BOTH);\n         assertEquals(0, comments.size());\n \n         comments = frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                \"idOfTypicalCourse1\", \"not_exist\", null);\n+                \"idOfTypicalCourse1\", \"not_exist\", null, ResultFetchType.BOTH);\n         assertEquals(0, comments.size());\n \n         comments = frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                \"not_exist\", \"not_exist\", null);\n+                \"not_exist\", \"not_exist\", null, ResultFetchType.BOTH);\n         assertEquals(0, comments.size());\n     }\n \n     @Test\n     public void testGetFeedbackResponseCommentForSessionInSection_withSectionName_shouldReturnCommentsInSection() {\n         List<FeedbackResponseCommentAttributes> comments =\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                        \"idOfTypicalCourse1\", \"First feedback session\", \"Section 1\");\n+                        \"idOfTypicalCourse1\", \"First feedback session\", \"Section 1\", ResultFetchType.BOTH);\n         assertEquals(2, comments.size());\n \n         comments = frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                \"idOfTypicalCourse1\", \"First feedback session\", \"Section 2\");\n+                \"idOfTypicalCourse1\", \"First feedback session\", \"Section 2\", ResultFetchType.BOTH);\n         assertEquals(1, comments.size());\n \n         comments = frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                \"idOfTypicalCourse1\", \"First feedback session\", \"not_exist\");\n+                \"idOfTypicalCourse1\", \"First feedback session\", \"not_exist\", ResultFetchType.BOTH);\n         assertEquals(0, comments.size());\n     }\n \n     @Test\n     public void testGetFeedbackResponseCommentsForQuestionInSection_noSectionName_shouldReturnCommentsForQuestion() {\n         String questionId = getQuestionIdInDataBundle(\"qn1InSession1InCourse1\");\n         List<FeedbackResponseCommentAttributes> comments =\n-                frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, null);\n+                frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, null, ResultFetchType.BOTH);\n         assertEquals(1, comments.size());\n \n-        comments = frcLogic.getFeedbackResponseCommentForQuestionInSection(\"not_exist\", null);\n+        comments = frcLogic.getFeedbackResponseCommentForQuestionInSection(\"not_exist\", null, ResultFetchType.BOTH);\n         assertEquals(0, comments.size());\n     }\n \n     @Test\n     public void testGetFeedbackResponseCommentsForQuestionInSection_withSectionName_shouldReturnCommentsForQuestion() {\n         String questionId = getQuestionIdInDataBundle(\"qn2InSession1InCourse1\");\n         List<FeedbackResponseCommentAttributes> comments =\n-                frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, \"Section 1\");\n+                frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, \"Section 1\", ResultFetchType.BOTH);\n         assertEquals(1, comments.size());\n \n-        comments = frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, \"Section 2\");\n+        comments = frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, \"Section 2\", ResultFetchType.BOTH);\n         assertEquals(1, comments.size());\n \n-        comments = frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, \"not_exist\");\n+        comments = frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, \"not_exist\", ResultFetchType.BOTH);\n         assertEquals(0, comments.size());\n     }\n \n     private void verifyNullFromGetFrCommentForSession(FeedbackResponseCommentAttributes frComment) {\n         List<FeedbackResponseCommentAttributes> frCommentsGot =\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n-                        frComment.courseId, frComment.feedbackSessionName, null);\n+                        frComment.courseId, frComment.feedbackSessionName, null, ResultFetchType.BOTH);\n         assertEquals(0, frCommentsGot.size());\n     }\n \n@@ -389,7 +392,7 @@ private void restoreFrCommentIdFromExistingOne(\n         List<FeedbackResponseCommentAttributes> existingFrComments =\n                 frcLogic.getFeedbackResponseCommentForSessionInSection(\n                                  existingFrComment.courseId,\n-                                 existingFrComment.feedbackSessionName, null);\n+                                 existingFrComment.feedbackSessionName, null, ResultFetchType.BOTH);\n \n         FeedbackResponseCommentAttributes existingFrCommentWithId = null;\n         for (FeedbackResponseCommentAttributes c : existingFrComments) {"
  },
  {
    "sha": "318dfb393e21541cff8aeaf0d792495e0c84a87b",
    "filename": "src/test/java/teammates/logic/core/FeedbackSessionsLogicTest.java",
    "status": "modified",
    "additions": 23,
    "deletions": 18,
    "changes": 41,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/test/java/teammates/logic/core/FeedbackSessionsLogicTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/test/java/teammates/logic/core/FeedbackSessionsLogicTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/logic/core/FeedbackSessionsLogicTest.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -14,6 +14,7 @@\n import teammates.common.datatransfer.AttributesDeletionQuery;\n import teammates.common.datatransfer.DataBundle;\n import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.ResultFetchType;\n import teammates.common.datatransfer.SessionResultsBundle;\n import teammates.common.datatransfer.UserRole;\n import teammates.common.datatransfer.attributes.CourseAttributes;\n@@ -67,7 +68,8 @@ public void testDeleteFeedbackSessionCascade_deleteSessionNotInRecycleBin_should\n         assertFalse(\n                 frLogic.getFeedbackResponsesForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());\n         assertFalse(\n-                frcLogic.getFeedbackResponseCommentForSessionInSection(fsa.getCourseId(), fsa.getFeedbackSessionName(), null)\n+                frcLogic.getFeedbackResponseCommentForSessionInSection(fsa.getCourseId(), fsa.getFeedbackSessionName(),\n+                        null, null)\n                         .isEmpty());\n \n         // delete existing feedback session directly\n@@ -80,7 +82,8 @@ public void testDeleteFeedbackSessionCascade_deleteSessionNotInRecycleBin_should\n         assertTrue(\n                 frLogic.getFeedbackResponsesForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());\n         assertTrue(\n-                frcLogic.getFeedbackResponseCommentForSessionInSection(fsa.getCourseId(), fsa.getFeedbackSessionName(), null)\n+                frcLogic.getFeedbackResponseCommentForSessionInSection(fsa.getCourseId(), fsa.getFeedbackSessionName(),\n+                        null, null)\n                         .isEmpty());\n     }\n \n@@ -93,7 +96,8 @@ public void testDeleteFeedbackSessionCascade_deleteSessionInRecycleBin_shouldDoC\n         assertFalse(\n                 frLogic.getFeedbackResponsesForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());\n         assertFalse(\n-                frcLogic.getFeedbackResponseCommentForSessionInSection(fsa.getCourseId(), fsa.getFeedbackSessionName(), null)\n+                frcLogic.getFeedbackResponseCommentForSessionInSection(fsa.getCourseId(), fsa.getFeedbackSessionName(),\n+                        null, null)\n                         .isEmpty());\n         fsLogic.moveFeedbackSessionToRecycleBin(fsa.getFeedbackSessionName(), fsa.getCourseId());\n         assertNull(fsLogic.getFeedbackSession(fsa.getFeedbackSessionName(), fsa.getCourseId()));\n@@ -109,7 +113,8 @@ public void testDeleteFeedbackSessionCascade_deleteSessionInRecycleBin_shouldDoC\n         assertTrue(\n                 frLogic.getFeedbackResponsesForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());\n         assertTrue(\n-                frcLogic.getFeedbackResponseCommentForSessionInSection(fsa.getCourseId(), fsa.getFeedbackSessionName(), null)\n+                frcLogic.getFeedbackResponseCommentForSessionInSection(fsa.getCourseId(), fsa.getFeedbackSessionName(),\n+                        null, null)\n                         .isEmpty());\n     }\n \n@@ -858,7 +863,7 @@ public void testGetSessionResultsForUser_studentSpecificQuestionAndSection_shoul\n         assertThrows(UnsupportedOperationException.class, () -> {\n             fsLogic.getSessionResultsForUser(\n                     \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.alice.b@gmail.tmt\",\n-                    UserRole.STUDENT, question.getId(), Const.DEFAULT_SECTION);\n+                    UserRole.STUDENT, question.getId(), Const.DEFAULT_SECTION, ResultFetchType.BOTH);\n         });\n     }\n \n@@ -873,7 +878,7 @@ public void testGetSessionResultsForUser_studentSpecificQuestionNoSection_should\n         // Alice will see 4 responses\n         SessionResultsBundle bundle = fsLogic.getSessionResultsForUser(\n                 \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.alice.b@gmail.tmt\",\n-                UserRole.STUDENT, question.getId(), null);\n+                UserRole.STUDENT, question.getId(), null, ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         List<FeedbackResponseAttributes> responseForQuestion =\n                 bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();\n@@ -882,31 +887,31 @@ public void testGetSessionResultsForUser_studentSpecificQuestionNoSection_should\n         // Benny will see 4 responses\n         bundle = fsLogic.getSessionResultsForUser(\n                 \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.benny.c@gmail.tmt\",\n-                UserRole.STUDENT, question.getId(), null);\n+                UserRole.STUDENT, question.getId(), null, ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         responseForQuestion = bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();\n         assertEquals(4, responseForQuestion.size());\n \n         // Charlie will see 3 responses\n         bundle = fsLogic.getSessionResultsForUser(\n                 \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.charlie.d@gmail.tmt\",\n-                UserRole.STUDENT, question.getId(), null);\n+                UserRole.STUDENT, question.getId(), null, ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         responseForQuestion = bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();\n         assertEquals(3, responseForQuestion.size());\n \n         // Danny will see 3 responses\n         bundle = fsLogic.getSessionResultsForUser(\n                 \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.danny.e@gmail.tmt\",\n-                UserRole.STUDENT, question.getId(), null);\n+                UserRole.STUDENT, question.getId(), null, ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         responseForQuestion = bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();\n         assertEquals(3, responseForQuestion.size());\n \n         // Emily will see 1 response\n         bundle = fsLogic.getSessionResultsForUser(\n                 \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.emily.f@gmail.tmt\",\n-                UserRole.STUDENT, question.getId(), null);\n+                UserRole.STUDENT, question.getId(), null, ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         responseForQuestion = bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();\n         assertEquals(1, responseForQuestion.size());\n@@ -924,7 +929,7 @@ public void testGetSessionResultsForUser_studentSpecificQuestion_shouldHaveCorre\n         FeedbackQuestionAttributes question = getQuestionFromDatastore(\"qn2InSession1InCourse1\");\n         SessionResultsBundle bundle = fsLogic.getSessionResultsForUser(\n                 question.getFeedbackSessionName(), question.getCourseId(), student.getEmail(),\n-                UserRole.STUDENT, question.getId(), null);\n+                UserRole.STUDENT, question.getId(), null, ResultFetchType.BOTH);\n         // there won't be question generated for student\n         assertEquals(0, bundle.getQuestionsMap().size());\n         assertEquals(0, bundle.getQuestionResponseMap().size());\n@@ -934,7 +939,7 @@ public void testGetSessionResultsForUser_studentSpecificQuestion_shouldHaveCorre\n         question = getQuestionFromDatastore(\"qn3InSession1InCourse1\");\n         bundle = fsLogic.getSessionResultsForUser(\n                 question.getFeedbackSessionName(), question.getCourseId(), student.getEmail(),\n-                UserRole.STUDENT, question.getId(), null);\n+                UserRole.STUDENT, question.getId(), null, ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         List<FeedbackResponseAttributes> responseForQuestion =\n                 bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();\n@@ -954,7 +959,7 @@ public void testGetSessionResultsForUser_studentAllQuestions_shouldGenerateCorre\n         StudentAttributes student = responseBundle.students.get(\"student1InCourse1\");\n         SessionResultsBundle bundle = fsLogic.getSessionResultsForUser(\n                 session.getFeedbackSessionName(), session.getCourseId(), student.getEmail(),\n-                UserRole.STUDENT, null, null);\n+                UserRole.STUDENT, null, null, ResultFetchType.BOTH);\n \n         // We just check for correct session once\n         assertEquals(session.toString(), bundle.getFeedbackSession().toString());\n@@ -1022,7 +1027,7 @@ public void testGetSessionResultsForUser_instructorSpecificQuestion_shouldHaveCo\n         // no section specified\n         SessionResultsBundle bundle = fsLogic.getSessionResultsForUser(\n                 fq.getFeedbackSessionName(), fq.getCourseId(), instructor.getEmail(),\n-                UserRole.INSTRUCTOR, fq.getId(), null);\n+                UserRole.INSTRUCTOR, fq.getId(), null, ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         List<FeedbackResponseAttributes> responseForQuestion =\n                 bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();\n@@ -1032,7 +1037,7 @@ public void testGetSessionResultsForUser_instructorSpecificQuestion_shouldHaveCo\n         fq = getQuestionFromDatastore(\"qn2InSession1InCourse1\");\n         bundle = fsLogic.getSessionResultsForUser(\n                 fq.getFeedbackSessionName(), fq.getCourseId(), instructor.getEmail(),\n-                UserRole.INSTRUCTOR, fq.getId(), \"Section 1\");\n+                UserRole.INSTRUCTOR, fq.getId(), \"Section 1\", ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         responseForQuestion = bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();\n         assertEquals(3, responseForQuestion.size());\n@@ -1048,7 +1053,7 @@ public void testGetSessionResultsForUser_instructorAllQuestions_shouldGenerateCo\n         InstructorAttributes instructor = responseBundle.instructors.get(\"instructor1OfCourse1\");\n         SessionResultsBundle bundle = fsLogic.getSessionResultsForUser(\n                 session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),\n-                UserRole.INSTRUCTOR, null, null);\n+                UserRole.INSTRUCTOR, null, null, ResultFetchType.BOTH);\n \n         // Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1\n         int totalResponse = 0;\n@@ -1110,7 +1115,7 @@ public void testGetSessionResultsForUser_instructorAllQuestionsSpecificSection_s\n         InstructorAttributes instructor = responseBundle.instructors.get(\"instructor1OfCourse1\");\n         SessionResultsBundle bundle = fsLogic.getSessionResultsForUser(\n                 session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),\n-                UserRole.INSTRUCTOR, null, \"Section A\");\n+                UserRole.INSTRUCTOR, null, \"Section A\", ResultFetchType.BOTH);\n \n         // Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1\n         // after filtering by section, the number of responses seen by instructor will differ.\n@@ -1180,7 +1185,7 @@ public void testGetSessionResultsForUser_orphanResponseInDB_shouldStillHandleCor\n \n         SessionResultsBundle bundle = fsLogic.getSessionResultsForUser(\n                 fq.getFeedbackSessionName(), fq.getCourseId(), student.getEmail(),\n-                UserRole.STUDENT, fq.getId(), null);\n+                UserRole.STUDENT, fq.getId(), null, ResultFetchType.BOTH);\n         assertEquals(1, bundle.getQuestionResponseMap().size());\n         List<FeedbackResponseAttributes> responseForQuestion =\n                 bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"
  },
  {
    "sha": "159373e09ba30bc31d482d9ce9c364102a5388f1",
    "filename": "src/test/java/teammates/ui/webapi/GetSessionResultsActionTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/test/java/teammates/ui/webapi/GetSessionResultsActionTest.java",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/test/java/teammates/ui/webapi/GetSessionResultsActionTest.java",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/test/java/teammates/ui/webapi/GetSessionResultsActionTest.java?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -5,6 +5,7 @@\n import org.apache.http.HttpStatus;\n import org.testng.annotations.Test;\n \n+import teammates.common.datatransfer.ResultFetchType;\n import teammates.common.datatransfer.UserRole;\n import teammates.common.datatransfer.attributes.CourseAttributes;\n import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n@@ -58,7 +59,7 @@ protected void testExecute() throws Exception {\n                 logic.getSessionResultsForUser(accessibleFeedbackSession.getFeedbackSessionName(),\n                         accessibleFeedbackSession.getCourseId(),\n                         instructorAttributes.getEmail(),\n-                        UserRole.INSTRUCTOR, null, null));\n+                        UserRole.INSTRUCTOR, null, null, ResultFetchType.BOTH));\n \n         assertTrue(isSessionResultsDataEqual(expectedResults, output));\n \n@@ -83,7 +84,7 @@ protected void testExecute() throws Exception {\n                 logic.getSessionResultsForUser(accessibleFeedbackSession.getFeedbackSessionName(),\n                         accessibleFeedbackSession.getCourseId(),\n                         studentAttributes.getEmail(),\n-                        UserRole.STUDENT, null, null),\n+                        UserRole.STUDENT, null, null, ResultFetchType.BOTH),\n                 studentAttributes);\n \n         assertTrue(isSessionResultsDataEqual(expectedResults, output));"
  },
  {
    "sha": "fd5c9a15582a38df2dfc458295cdcb11635b7207",
    "filename": "src/web/app/components/question-types/question-statistics/question-statistics.ts",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/web/app/components/question-types/question-statistics/question-statistics.ts",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/web/app/components/question-types/question-statistics/question-statistics.ts",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/web/app/components/question-types/question-statistics/question-statistics.ts?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -1,5 +1,7 @@\n import { Directive, Input, OnInit } from '@angular/core';\n import {\n+  ContributionStatistics,\n+  ContributionStatisticsEntry,\n   FeedbackParticipantType,\n   FeedbackQuestionDetails,\n   FeedbackResponseDetails,\n@@ -41,6 +43,34 @@ export class QuestionStatistics<Q extends FeedbackQuestionDetails, R extends Fee\n     this.question = question;\n   }\n \n+  static appendStats = (prevStats: string, newStats: string): string => {\n+    if (prevStats === '') {\n+      if (newStats === '') {\n+        return '';\n+      }\n+      return newStats;\n+    }\n+    if (newStats === '') {\n+      return prevStats;\n+    }\n+\n+    // Stats not being empty means it belongs to contribution question\n+    const prevStatsJSON: ContributionStatistics = JSON.parse(prevStats);\n+    const newStatsJSON: ContributionStatistics = JSON.parse(newStats);\n+    for (const email of Object.keys(newStatsJSON.results)) {\n+      const newStatsEntryForEmail: ContributionStatisticsEntry = newStatsJSON.results[email];\n+      const { claimed }: { claimed: number } = newStatsEntryForEmail;\n+      const { perceived }: { perceived: number } = newStatsEntryForEmail;\n+      if (claimed < 0 && perceived < 0) {\n+        continue;\n+      }\n+      // If new entry has submitted stats, overwrite the old data\n+      prevStatsJSON.results[email] = newStatsEntryForEmail;\n+    }\n+\n+    return JSON.stringify(prevStatsJSON);\n+  }\n+\n   ngOnInit(): void {\n   }\n "
  },
  {
    "sha": "bf355ca35247b503fb2395a43351a654a2116fd5",
    "filename": "src/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-page.component.ts",
    "status": "modified",
    "additions": 39,
    "deletions": 17,
    "changes": 56,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-page.component.ts",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-page.component.ts",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-page.component.ts?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -32,6 +32,7 @@ import {\n import { Intent } from '../../../types/api-request';\n import { CommentToCommentRowModelPipe } from '../../components/comment-box/comment-to-comment-row-model.pipe';\n import { CommentsToCommentTableModelPipe } from '../../components/comment-box/comments-to-comment-table-model.pipe';\n+import { QuestionStatistics } from '../../components/question-types/question-statistics/question-statistics';\n import { StudentListInfoTableRowModel } from '../../components/sessions-table/respondent-list-info-table/respondent-list-info-table-model';\n import { SimpleModalType } from '../../components/simple-modal/simple-modal-type';\n import { ErrorMessageOutput } from '../../error-message-output';\n@@ -283,24 +284,45 @@ export class InstructorSessionResultPageComponent extends InstructorCommentsComp\n       // Do not re-fetch data\n       return;\n     }\n-    this.feedbackSessionsService.getFeedbackSessionResults({\n-      questionId,\n-      courseId: this.session.courseId,\n-      feedbackSessionName: this.session.feedbackSessionName,\n-      intent: Intent.INSTRUCTOR_RESULT,\n-    })\n-    .subscribe((resp: SessionResults) => {\n-      if (resp.questions.length) {\n-        const responses: QuestionOutput = resp.questions[0];\n-        this.questionsModel[questionId].responses = responses.allResponses;\n-        this.questionsModel[questionId].statistics = responses.questionStatistics;\n-        this.questionsModel[questionId].hasPopulated = true;\n \n-        this.preprocessComments(responses.allResponses);\n-      }\n-    }, (resp: ErrorMessageOutput) => {\n-      this.statusMessageService.showErrorToast(resp.error.message);\n-    });\n+    const tempMap: Map<string, ResponseOutput> = new Map();\n+\n+    this.courseService.getCourseSectionNames(this.session.courseId)\n+      .subscribe((courseSectionNames: CourseSectionNames) => {\n+        concat(\n+          ...courseSectionNames.sectionNames.map((sectionName: string) => {\n+            return this.feedbackSessionsService.getFeedbackSessionResults({\n+              questionId,\n+              courseId: this.session.courseId,\n+              feedbackSessionName: this.session.feedbackSessionName,\n+              intent: Intent.INSTRUCTOR_RESULT,\n+              groupBySection: sectionName,\n+            });\n+          }))\n+        .subscribe({\n+          next: (resp: SessionResults) => {\n+            if (resp.questions.length) {\n+              const responses: QuestionOutput = resp.questions[0];\n+              responses.allResponses\n+                .forEach((response: ResponseOutput) => tempMap.set(response.responseId, response));\n+              this.questionsModel[questionId].statistics =\n+                QuestionStatistics.appendStats(\n+                  this.questionsModel[questionId].statistics,\n+                  responses.questionStatistics);\n+\n+              this.preprocessComments(responses.allResponses);\n+            }\n+          },\n+          complete: () => {\n+            tempMap.forEach((response: ResponseOutput) =>\n+              this.questionsModel[questionId].responses.push(response));\n+            this.questionsModel[questionId].hasPopulated = true;\n+          },\n+          error: (resp: ErrorMessageOutput) => {\n+            this.statusMessageService.showErrorToast(resp.error.message);\n+          },\n+        });\n+      });\n   }\n \n   /**"
  },
  {
    "sha": "9d0c1fa7296b5330612092f53a0eb562031869ca",
    "filename": "src/web/services/feedback-sessions.service.ts",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/TEAMMATES/teammates/blob/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/web/services/feedback-sessions.service.ts",
    "raw_url": "https://github.com/TEAMMATES/teammates/raw/20ce1a32a3f420ebb1120717adde81fe019e1b6b/src/web/services/feedback-sessions.service.ts",
    "contents_url": "https://api.github.com/repos/TEAMMATES/teammates/contents/src/web/services/feedback-sessions.service.ts?ref=20ce1a32a3f420ebb1120717adde81fe019e1b6b",
    "patch": "@@ -314,6 +314,7 @@ export class FeedbackSessionsService {\n     intent: Intent\n     questionId?: string,\n     groupBySection?: string,\n+    sectionByGiverOrReceiver?: string,\n     key?: string,\n   }): Observable<SessionResults> {\n     const paramMap: Record<string, string> = {\n@@ -330,6 +331,10 @@ export class FeedbackSessionsService {\n       paramMap.frgroupbysection = queryParams.groupBySection;\n     }\n \n+    if (queryParams.sectionByGiverOrReceiver) {\n+      paramMap.frsessionbygiverorreceiver = queryParams.sectionByGiverOrReceiver;\n+    }\n+\n     if (queryParams.key) {\n       paramMap.key = queryParams.key;\n     }"
  }
]
