[
  {
    "sha": "d3e2de7fb769208f3b8f239bc5a81229d7d140de",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/teacher-ithillel/lesson03/blob/8df1d0da213099f842510f6960d51ef217fcc0d4/.gitignore",
    "raw_url": "https://github.com/teacher-ithillel/lesson03/raw/8df1d0da213099f842510f6960d51ef217fcc0d4/.gitignore",
    "contents_url": "https://api.github.com/repos/teacher-ithillel/lesson03/contents/.gitignore?ref=8df1d0da213099f842510f6960d51ef217fcc0d4",
    "patch": "@@ -18,6 +18,7 @@\n *.zip\n *.tar.gz\n *.rar\n+*.target\n \n # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\n hs_err_pid*"
  },
  {
    "sha": "d7ad7f3a8015af1e8682087a99de4ee8a0842198",
    "filename": "src/ua/ithillel/ArrayUtils.java",
    "status": "modified",
    "additions": 108,
    "deletions": 22,
    "changes": 130,
    "blob_url": "https://github.com/teacher-ithillel/lesson03/blob/8df1d0da213099f842510f6960d51ef217fcc0d4/src/ua/ithillel/ArrayUtils.java",
    "raw_url": "https://github.com/teacher-ithillel/lesson03/raw/8df1d0da213099f842510f6960d51ef217fcc0d4/src/ua/ithillel/ArrayUtils.java",
    "contents_url": "https://api.github.com/repos/teacher-ithillel/lesson03/contents/src/ua/ithillel/ArrayUtils.java?ref=8df1d0da213099f842510f6960d51ef217fcc0d4",
    "patch": "@@ -1,59 +1,145 @@\n-package ua.ithillel;\n-\n import java.util.Arrays;\n \n public class ArrayUtils {\n \n-    public static void printObjArray(Object[] objArr) {\n-        // TODO: implement this method\n+    static void printObjArray(Object[] objArr) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"[\");\n+        for (Object o : objArr) {\n+            sb.append(o);\n+            if (!o.equals(objArr[objArr.length - 1])) {\n+                sb.append(\", \");\n+            }\n+        }\n+        sb.append(\"]\");\n+        System.out.println(sb);\n     }\n \n-    public static void printIntArray(int[] intArr) {\n-        // TODO: implement this method\n+    static void printIntArray(int[] intArr) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"[\");\n+        for (Integer o : intArr) {\n+            sb.append(o);\n+            if (!(o == intArr[intArr.length - 1])) {\n+                sb.append(\", \");\n+            }\n+        }\n+        sb.append(\"]\");\n+        System.out.println(sb);\n     }\n \n     public static int[] sortIntArray(int[] intArr) {\n-        return new int[]{1, 2, 3, 4, 5};\n-        // TODO: implement this method\n+        return mergeSort(intArr, 0, intArr.length - 1);\n     }\n \n+\n     /**\n      * This method can search minimal and maximal integer value\n      * from integer array\n      */\n \n     public static int[] findMinAndMaxFromIntArray(int[] intArr) {\n-        return new int[]{-1, 1};\n-        // TODO: implement this method\n+        int maxValue = 0;\n+        int minValue = 0;\n+\n+        for (int i : intArr) {\n+            if (i <= minValue) {\n+                minValue = i;\n+            }\n+            if (i >= maxValue) {\n+                maxValue = i;\n+            }\n+        }\n+\n+        return new int[]{minValue, maxValue};\n     }\n \n     public static String toOneStringInCamelCase(String[] strArr) {\n-        return null;\n-        // TODO: implement this method\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(strArr[0].substring(0, 1).toLowerCase()).append(strArr[0].substring(1));\n+        for (int i = 1; i < strArr.length; i++) {\n+            sb.append(strArr[i].substring(0, 1).toUpperCase()).append(strArr[i].substring(1));\n+        }\n+        return sb.toString();\n+\n     }\n \n     public static int calculateSumElementsInIntArray(int[] intArr) {\n-        return 0;\n-        // TODO: implement this method\n+        int sum = 0;\n+        for (int i : intArr) {\n+            sum += i;\n+        }\n+        return sum;\n     }\n \n     public static int[] mergeAndSortTwoIntArray(int[] ints1, int[] ints2) {\n-        return new int[0];\n-        // TODO: implement this method\n+        int[] array1and2 = new int[ints1.length + ints2.length];\n+        System.arraycopy(ints1, 0, array1and2, 0, ints1.length);\n+        System.arraycopy(ints2, 0, array1and2, ints1.length, ints2.length);\n+        return sortIntArray(array1and2);\n     }\n \n     public static int calculateAbsAverageElementValueInIntArray(int[] intArr) {\n-        return 0;\n-        // TODO: implement this method\n+        int average = 0;\n+\n+        for (int i : intArr) {\n+            if (i < 0) {\n+                average += (i * -1);\n+            } else {\n+                average += i;\n+            }\n+        }\n+        return Math.abs(average / intArr.length);\n     }\n \n     public static int[] removeElementFromIntArray(int i, int[] ints) {\n-        return new int[0];\n-        // TODO: implement this method\n+        int[] array = new int[ints.length - 1];\n+\n+        for (int j = 0, k = 0; j < ints.length; j++) {\n+                if (ints[j] != i) {\n+                    array[k++] = ints[j];\n+                }\n+        }\n+        return array;\n     }\n \n     public static int[] generateRandomIntArrayWithSizeMinMax(int size, int min, int max) {\n-        return new int[0];\n-        // TODO: implement this method\n+        int random[] = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            random[i] = (int) (min + Math.random() * (max - min) + 1);\n+        }\n+        return random;\n+    }\n+\n+    private static int[] mergeSort(int[] a, int lo, int hi) {\n+\n+        if (hi <= lo)\n+            return null;\n+        int mid = lo + (hi - lo) / 2;\n+        mergeSort(a, lo, mid);\n+        mergeSort(a, mid + 1, hi);\n+\n+        int[] buf = Arrays.copyOf(a, a.length);\n+\n+        System.arraycopy(a, lo, buf, lo, hi + 1 - lo);\n+\n+        int i = lo, j = mid + 1;\n+        for (int k = lo; k <= hi; k++) {\n+\n+            if (i > mid) {\n+                a[k] = buf[j];\n+                j++;\n+            } else if (j > hi) {\n+                a[k] = buf[i];\n+                i++;\n+            } else if (buf[j] < buf[i]) {\n+                a[k] = buf[j];\n+                j++;\n+            } else {\n+                a[k] = buf[i];\n+                i++;\n+            }\n+        }\n+        return a;\n     }\n }"
  },
  {
    "sha": "c7a0605ed7b64b27e445a6737577fdefe70e5ddf",
    "filename": "src/ua/ithillel/MainDemo.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/teacher-ithillel/lesson03/blob/8df1d0da213099f842510f6960d51ef217fcc0d4/src/ua/ithillel/MainDemo.java",
    "raw_url": "https://github.com/teacher-ithillel/lesson03/raw/8df1d0da213099f842510f6960d51ef217fcc0d4/src/ua/ithillel/MainDemo.java",
    "contents_url": "https://api.github.com/repos/teacher-ithillel/lesson03/contents/src/ua/ithillel/MainDemo.java?ref=8df1d0da213099f842510f6960d51ef217fcc0d4",
    "patch": "@@ -1,5 +1,3 @@\n-package ua.ithillel;\n-\n public class MainDemo {\n \n     public static void main(String[] args) {"
  }
]
