[
  {
    "sha": "504d775ddc1aa071724208fc4b246ce36a2a09e0",
    "filename": "src/main/java/burp/BurpExtender.java",
    "status": "modified",
    "additions": 65,
    "deletions": 10,
    "changes": 75,
    "blob_url": "https://github.com/federicodotta/Brida/blob/1ffd60ce6e981382f4765fa44ae86d00dcc227d1/src/main/java/burp/BurpExtender.java",
    "raw_url": "https://github.com/federicodotta/Brida/raw/1ffd60ce6e981382f4765fa44ae86d00dcc227d1/src/main/java/burp/BurpExtender.java",
    "contents_url": "https://api.github.com/repos/federicodotta/Brida/contents/src/main/java/burp/BurpExtender.java?ref=1ffd60ce6e981382f4765fa44ae86d00dcc227d1",
    "patch": "@@ -133,6 +133,7 @@\n \tprivate String pythonScript;\n \tpublic JTextField pyroHost;\n \tpublic JTextField pyroPort;\n+\tprivate JTextField nodejsPath;\n \tprivate JTextField fridaCompilePath;\n \tprivate JTextPane serverStatus;\n \tprivate JTextPane applicationStatus;\n@@ -582,7 +583,29 @@ public void itemStateChanged(ItemEvent e) {\n                 pyroPort.setMaximumSize( pyroPort.getPreferredSize() );\n                 pyroPortPanel.add(labelPyroPort);\n                 pyroPortPanel.add(pyroPort);\n-                \n+\n+                JPanel nodejsPathPanel = new JPanel();\n+                nodejsPathPanel.setLayout(new BoxLayout(nodejsPathPanel, BoxLayout.X_AXIS));\n+                nodejsPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);\n+                JLabel labelNodejsPath = new JLabel(\"Node.js path: \");\n+                nodejsPath = new JTextField(200);\n+                if(callbacks.loadExtensionSetting(\"nodejsPath\") != null)\n+                    nodejsPath.setText(callbacks.loadExtensionSetting(\"nodejsPath\"));\n+                else {\n+                    if(System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+                        nodejsPath.setText(\"C:\\\\nodejs\");\n+                    } else {\n+                        nodejsPath.setText(\"/usr/local/bin\");\n+                    }\n+                }\n+                nodejsPath.setMaximumSize(nodejsPath.getPreferredSize() );\n+                JButton nodejsPathButton = new JButton(\"Select folder\");\n+                nodejsPathButton.setActionCommand(\"nodejsPathSelectFile\");\n+                nodejsPathButton.addActionListener(BurpExtender.this);\n+                nodejsPathPanel.add(labelNodejsPath);\n+                nodejsPathPanel.add(nodejsPath);\n+                nodejsPathPanel.add(nodejsPathButton);\n+\n                 JPanel fridaCompilePathPanel = new JPanel();\n                 fridaCompilePathPanel.setLayout(new BoxLayout(fridaCompilePathPanel, BoxLayout.X_AXIS));\n                 fridaCompilePathPanel.setAlignmentX(Component.LEFT_ALIGNMENT); \n@@ -686,6 +709,7 @@ else if(callbacks.loadExtensionSetting(\"device\").equals(\"usb\"))\n                 configurationConfPanel.add(pythonPathVenvPanel);\n                 configurationConfPanel.add(pyroHostPanel);\n                 configurationConfPanel.add(pyroPortPanel);\n+                configurationConfPanel.add(nodejsPathPanel);\n                 configurationConfPanel.add(fridaCompilePathPanel);\n                 configurationConfPanel.add(fridaCompilePanel);\n                 configurationConfPanel.add(fridaPathPanel);\n@@ -2345,11 +2369,12 @@ public void run() {\n \t\t\n \t}\t\n \t\n-\tprivate boolean compileFridaCode(String fridaCompilePath, String fridaJsFolder) {\n+\tprivate boolean compileFridaCode(String nodejsPath, String fridaCompilePath, String fridaJsFolder) {\n \t\t\t\t\n \t\tRuntime rt = Runtime.getRuntime();\n \n \t\tString[] fridaCompileCommand;\n+\t\tString[] execEnv = new String[]{\"PATH=\" + nodejsPath};\n \t\tif(fridaCompileOldCheckBox.isSelected()) {\n \t\t\tfridaCompileCommand = new String[]{fridaCompilePath,\"-x\",\"-o\",fridaJsFolder + System.getProperty(\"file.separator\") + \"bridaGeneratedCompiledOutput.js\",fridaJsFolder + System.getProperty(\"file.separator\") + \"brida.js\"};\n \t\t} else {\n@@ -2358,8 +2383,8 @@ private boolean compileFridaCode(String fridaCompilePath, String fridaJsFolder)\n \t\t\n \t\tProcess processCompilation = null;\n \t\ttry {\n-\t\t\tprocessCompilation = rt.exec(fridaCompileCommand);\n-\t\t\t\n+            processCompilation = rt.exec(fridaCompileCommand, execEnv);\n+\n \t\t\t// With some types of error frida-compile remains stucked without returning errors. Killing the process after 30 seconds if blocked.\n \t\t\t// if(!processCompilation.waitFor(1, TimeUnit.MINUTES)) {\n \t\t\tif(!processCompilation.waitFor(30, TimeUnit.SECONDS)) {\n@@ -2602,6 +2627,7 @@ private void savePersistentSettings() {\n \t\tcallbacks.saveExtensionSetting(\"pythonPath\",pythonPathVenv.getText().trim());\n \t\tcallbacks.saveExtensionSetting(\"pyroHost\",pyroHost.getText().trim());\n \t\tcallbacks.saveExtensionSetting(\"pyroPort\",pyroPort.getText().trim());\n+\t\tcallbacks.saveExtensionSetting(\"nodejsPath\",nodejsPath.getText().trim());\n \t\tcallbacks.saveExtensionSetting(\"fridaCompilePath\",fridaCompilePath.getText().trim());\n \t\tcallbacks.saveExtensionSetting(\"fridaCompileOldCheckBox\",(fridaCompileOldCheckBox.isSelected() ? \"true\" : \"false\"));\t\n \t\tcallbacks.saveExtensionSetting(\"fridaPath\",fridaPath.getText().trim());\n@@ -2651,6 +2677,7 @@ private void exportConfigurationsToFile() {\n \t\t\t\tfw.write(\"pythonPath:\" + pythonPathVenv.getText().trim() + \"\\n\");\n \t\t\t\tfw.write(\"pyroHost:\" + pyroHost.getText().trim() + \"\\n\");\n \t\t\t\tfw.write(\"pyroPort:\" + pyroPort.getText().trim() + \"\\n\");\n+\t\t\t\tfw.write(\"nodejsPath:\" + nodejsPath.getText().trim() + \"\\n\");\n \t\t\t\tfw.write(\"fridaCompilePath:\" + fridaCompilePath.getText().trim() + \"\\n\");\n \t\t\t\tfw.write(\"fridaCompileOldCheckBox:\" + (fridaCompileOldCheckBox.isSelected() ? \"true\" : \"false\") + \"\\n\");\n \t\t\t\tfw.write(\"fridaPath:\" + fridaPath.getText().trim() + \"\\n\");\n@@ -2746,6 +2773,9 @@ private void loadConfigurationsFromFile() {\n \t\t\t\t\t\tcase \"pyroPort\":\n \t\t\t\t\t\t\tpyroPort.setText(lineParts[1]);\n \t\t\t\t\t\t\tbreak;\n+                        case \"nodejsPath\":\n+                            nodejsPath.setText(lineParts[1]);\n+                            break;\n \t\t\t\t\t\tcase \"fridaCompilePath\":\n \t\t\t\t\t\t\tfridaCompilePath.setText(lineParts[1]);\n \t\t\t\t\t\t\tbreak;\t\t\t\n@@ -2992,7 +3022,7 @@ public void run() {\n \t\t\tif(!(new File(fridaPath.getText().trim() + System.getProperty(\"file.separator\") + \"bridaGeneratedCompiledOutput.js\")).exists()) {\n \t\t\t\t\n \t\t\t\t// Brida compiled file does not exist. Compiling it...\n-\t\t\t\tif(!compileFridaCode(fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n+\t\t\t\tif(!compileFridaCode(nodejsPath.getText().trim(), fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n \t\t\t\t\tprintException(null, \"Error during frida-compile. Aborting.\");\n \t\t\t\t\treturn;\n \t\t\t\t}\n@@ -3003,7 +3033,7 @@ public void run() {\n \t\t\t\n \t\t} else if(command.equals(\"compileSpawnApplication\") && serverStarted) {\n \t\t\t\n-\t\t\tif(!compileFridaCode(fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n+\t\t\tif(!compileFridaCode(nodejsPath.getText().trim(), fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n \t\t\t\tprintException(null, \"Error during frida-compile. Aborting.\");\n \t\t\t\treturn;\n \t\t\t}\n@@ -3015,7 +3045,7 @@ public void run() {\n \t\t\tif(!(new File(fridaPath.getText().trim() + System.getProperty(\"file.separator\") + \"bridaGeneratedCompiledOutput.js\")).exists()) {\n \t\t\t\t\n \t\t\t\t// Brida compiled file does not exist. Compiling it...\n-\t\t\t\tif(!compileFridaCode(fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n+\t\t\t\tif(!compileFridaCode(nodejsPath.getText().trim(), fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n \t\t\t\t\tprintException(null, \"Error during frida-compile. Aborting.\");\n \t\t\t\t\treturn;\n \t\t\t\t}\n@@ -3026,7 +3056,7 @@ public void run() {\n \t\t\t\n \t\t} else if(command.equals(\"compileAttachApplication\") && serverStarted) {\n \t\t\t\n-\t\t\tif(!compileFridaCode(fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n+\t\t\tif(!compileFridaCode(nodejsPath.getText().trim(), fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n \t\t\t\tprintException(null, \"Error during frida-compile. Aborting.\");\n \t\t\t\treturn;\n \t\t\t}\n@@ -3050,7 +3080,7 @@ public void run() {\n \t\t\t\n \t\t} else if(command.equals(\"compileReloadScript\") && serverStarted && applicationSpawned) {\n \t\t\t\n-\t\t\tif(!compileFridaCode(fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n+\t\t\tif(!compileFridaCode(nodejsPath.getText().trim(), fridaCompilePath.getText().trim(), fridaPath.getText().trim())) {\n \t\t\t\treturn;\n \t\t\t}\n \t\t\t\t\n@@ -3619,7 +3649,32 @@ public void run() {\n \t\t\t\t\n \t\t\t}\t\n \t\t\t\n-\t\t} else if(command.equals(\"fridaCompilePathSelectFile\")) {\n+\t\t} else if(command.equals(\"nodejsPathSelectFile\")) {\n+\n+                JFrame parentFrame = new JFrame();\n+                JFileChooser fileChooser = new JFileChooser();\n+                fileChooser.setDialogTitle(\"Node.js folder\");\n+                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n+                fileChooser.setCurrentDirectory(new File(fridaPath.getText().trim()));\n+\n+                int userSelection = fileChooser.showOpenDialog(parentFrame);\n+\n+                if(userSelection == JFileChooser.APPROVE_OPTION) {\n+\n+                    final File nodejsPathFile = fileChooser.getSelectedFile();\n+\n+                    SwingUtilities.invokeLater(new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            nodejsPath.setText(nodejsPathFile.getAbsolutePath());\n+                        }\n+\n+                    });\n+\n+                }\n+\n+            }  else if(command.equals(\"fridaCompilePathSelectFile\")) {\n \t\t\t\n \t\t\tJFrame parentFrame = new JFrame();\n \t\t\tJFileChooser fileChooser = new JFileChooser();"
  }
]
