[
  {
    "sha": "0b7afb49298b940b97fa24331d962106b1ee38ca",
    "filename": "html/ui/classic/css/dev/burstold.css",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/css/dev/burstold.css",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/css/dev/burstold.css",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/html/ui/classic/css/dev/burstold.css?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -161,7 +161,7 @@ display:block\n margin-top:84px\n }\n \n-.data-loading-container,.data-empty-container,.data-container.data-empty table,.data-container.data-loading table,.testnet_only,.page,#brs_update_explanation span,.show_logout,.advanced,.recipient_public_key,.optional_message,.optional_note {\n+.data-loading-container,.data-empty-container,.data-container.data-empty table,.data-container.data-loading table,.testnet_only,.page,#brs_update_explanation span,.show_logout,.advanced,.recipient_public_key,.optional_message,.optional_burstcoin,.optional_note {\n display:none\n }\n "
  },
  {
    "sha": "34b887a633aaaf44e3a32ce0f7951ff6d495e7cb",
    "filename": "html/ui/classic/html/modals/asset.html",
    "status": "modified",
    "additions": 17,
    "deletions": 7,
    "changes": 24,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/html/modals/asset.html",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/html/modals/asset.html",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/html/ui/classic/html/modals/asset.html?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -140,6 +140,16 @@ <h4 class=\"modal-title\" data-i18n=\"transfer_asset\">Transfer Asset</h4>\n               <span class=\"input-group-addon\" id=\"transfer_asset_quantity_name\"></span>\n             </div>\n           </div>\n+          <div class=\"form-group\">\n+            <input type=\"checkbox\" name=\"add_burstcoin\" id=\"transfer_asset_add_burstcoin\" class=\"add_burstcoin\" tabindex=\"4\" /> <label for=\"transfer_asset_add_burstcoin\" style=\"font-weight:normal;margin-bottom:0;\"> <span data-i18n=\"add_burstcoin_q\">Send BURST as well?</span></label>\n+          </div>\n+          <div class=\"form-group optional_burstcoin\">\n+            <label for=\"transfer_asset_burst_amount\" data-i18n=\"amount\">AMOUNT</label>\n+            <div class=\"input-group\">\n+                <input type=\"text\" name=\"amountNXT\" id=\"transfer_asset_burst_amount\" step=\"any\" min=\"0.00000001\" class=\"form-control\" value=\"0\" placeholder=\"Amount\" data-i18n=\"[placeholder]amount\"  tabindex=\"5\">\n+                <span class=\"input-group-addon\">BURST</span>\n+            </div>\n+         </div>\n           <div class=\"form-group\">\n             <input type=\"checkbox\" name=\"add_message\" id=\"transfer_asset_add_message\" class=\"add_message\" tabindex=\"6\" /> <label for=\"transfer_asset_add_message\" style=\"font-weight:normal;margin-bottom:0;\"> <span data-i18n=\"add_message_q\">Add a Message?</span></label>\n           </div>\n@@ -155,35 +165,35 @@ <h4 class=\"modal-title\" data-i18n=\"transfer_asset\">Transfer Asset</h4>\n               <div class=\"form-group\">\n                 <label for=\"transfer_asset_fee\" data-i18n=\"fee\">FEE</label>\n                 <div class=\"input-group\">\n-                  <input type=\"number\" name=\"feeNXT\" id=\"transfer_asset_fee\" class=\"form-control\" step=\"any\" min=\"0.00735\" placeholder=\"Fee\" data-i18n=\"[placeholder]fee\" data-default=\"0.1\" value=\"0.1\" tabindex=\"5\">\n+                  <input type=\"number\" name=\"feeNXT\" id=\"transfer_asset_fee\" class=\"form-control\" step=\"any\" min=\"0.00735\" placeholder=\"Fee\" data-i18n=\"[placeholder]fee\" data-default=\"0.1\" value=\"0.1\" tabindex=\"8\">\n                   <span class=\"input-group-addon\">BURST</span>\n                 </div>\n               </div>\n             </div>\n             <div class=\"col-xs-6 col-sm-6 col-md-6\">\n               <div class=\"form-group\">\n                 <label for=\"transfer_asset_deadline\" data-i18n=\"deadline_hours\">DEADLINE (HOURS)</label>\n-                <input type=\"number\" name=\"deadline\" id=\"transfer_asset_deadline\" class=\"form-control\" placeholder=\"Deadline\" data-i18n=\"[placeholder]deadline\" min=\"1\" data-default=\"24\" value=\"1\" tabindex=\"6\">\n+                <input type=\"number\" name=\"deadline\" id=\"transfer_asset_deadline\" class=\"form-control\" placeholder=\"Deadline\" data-i18n=\"[placeholder]deadline\" min=\"1\" data-default=\"24\" value=\"1\" tabindex=\"9\">\n               </div>\n             </div>\n           </div>\n           <div class=\"form-group secret_phrase\">\n             <label for=\"transfer_asset_password\" data-i18n=\"passphrase\">PASSPHRASE</label>\n-            <input type=\"password\" name=\"secretPhrase\" id=\"transfer_asset_password\" class=\"form-control\" placeholder=\"\" tabindex=\"7\" autocomplete=\"\">\n+            <input type=\"password\" name=\"secretPhrase\" id=\"transfer_asset_password\" class=\"form-control\" placeholder=\"\" tabindex=\"10\" autocomplete=\"\">\n           </div>\n           <div class=\"form-group advanced\">\n             <label for=\"transfer_asset_referenced_transaction\" data-i18n=\"referenced_transaction_hash\">REFERENCED TRANSACTION HASH</label>\n-            <input type=\"text\" class=\"form-control\" name=\"referencedTransactionFullHash\" id=\"transfer_asset_referenced_transaction\" placeholder=\"Referenced Transaction Full Hash\" data-i18n=\"[placeholder]referenced_transaction_full_hash\" tabindex=\"8\" spellcheck=\"false\" />\n+            <input type=\"text\" class=\"form-control\" name=\"referencedTransactionFullHash\" id=\"transfer_asset_referenced_transaction\" placeholder=\"Referenced Transaction Full Hash\" data-i18n=\"[placeholder]referenced_transaction_full_hash\" tabindex=\"11\" spellcheck=\"false\" />\n           </div>\n           <div class=\"form-group advanced\" style=\"margin-bottom:5px;\">\n-            <input type=\"checkbox\" name=\"doNotBroadcast\" id=\"transfer_asset_do_not_broadcast\" value=\"1\" /> <label for=\"transfer_asset_do_not_broadcast\" style=\"font-weight:normal;\" tabindex=\"9\" data-i18n=\"do_not_broadcast\">Do Not Broadcast</label>\n+            <input type=\"checkbox\" name=\"doNotBroadcast\" id=\"transfer_asset_do_not_broadcast\" value=\"1\" /> <label for=\"transfer_asset_do_not_broadcast\" style=\"font-weight:normal;\" tabindex=\"12\" data-i18n=\"do_not_broadcast\">Do Not Broadcast</label>\n           </div>\n           <div class=\"form-group advanced\">\n-            <input type=\"checkbox\" name=\"add_note_to_self\" id=\"transfer_asset_add_note_to_self\" class=\"add_note_to_self\" tabindex=\"10\" /> <label for=\"transfer_asset_add_note_to_self\" style=\"font-weight:normal;margin-bottom:0;\"> <span data-i18n=\"add_note_to_self\">Add Note to Self?</span></label>\n+            <input type=\"checkbox\" name=\"add_note_to_self\" id=\"transfer_asset_add_note_to_self\" class=\"add_note_to_self\" tabindex=\"13\" /> <label for=\"transfer_asset_add_note_to_self\" style=\"font-weight:normal;margin-bottom:0;\"> <span data-i18n=\"add_note_to_self\">Add Note to Self?</span></label>\n           </div>\n           <div class=\"form-group advanced optional_note\">\n             <label for=\"transfer_asset_note_to_self\" data-i18n=\"note_to_self\">Note to Self</label>\n-            <textarea class=\"form-control\" id=\"transfer_asset_note_to_self\" name=\"note_to_self\" rows=\"4\" tabindex=\"11\"></textarea>\n+            <textarea class=\"form-control\" id=\"transfer_asset_note_to_self\" name=\"note_to_self\" rows=\"4\" tabindex=\"14\"></textarea>\n             <div style=\"margin-top:3px;\">\n               <label style=\"font-weight:normal;color:#666\" data-i18n=\"note_is_encrypted\">This note is encrypted.</label>\n             </div>"
  },
  {
    "sha": "b1985deffa7cb78ad8709d1e6d94f70a822c5b66",
    "filename": "html/ui/classic/js/brs.assetexchange.js",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/js/brs.assetexchange.js",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/js/brs.assetexchange.js",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/html/ui/classic/js/brs.assetexchange.js?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -1813,6 +1813,8 @@ var BRS = (function(BRS, $, undefined) {\n             delete data.encrypt_message;\n         }\n \n+        delete data.add_burstcoin;\n+\n         return {\n             \"data\": data\n         };"
  },
  {
    "sha": "6d5bfc15dd6ed9187422cb6a2610b958635b9afc",
    "filename": "html/ui/classic/js/brs.modals.account.js",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/js/brs.modals.account.js",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/js/brs.modals.account.js",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/html/ui/classic/js/brs.modals.account.js?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -273,6 +273,12 @@ var BRS = (function(BRS, $, undefined) {\n \t\t\tcase 1:\n \t\t\t    transactionType = \"AT Payment\";\n \t\t\t    break;\n+\t\t\tcase 2:\n+\t\t\t\ttransactionType = \"AT Asset Mold\";\n+\t\t\t\tbreak;\n+\t\t\tcase 3:\n+\t\t\t\ttransactionType = \"AT Asset Mint\";\n+\t\t\t\tbreak;\n \t\t\t}\n \t\t    }\n "
  },
  {
    "sha": "766c5b64c2a46486c27f8c0d9a06ad663de6c4e6",
    "filename": "html/ui/classic/js/brs.modals.js",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/js/brs.modals.js",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/js/brs.modals.js",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/html/ui/classic/js/brs.modals.js?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -350,6 +350,16 @@ var BRS = (function(BRS, $, undefined) {\n         }\n     });\n \n+    $(\".add_burstcoin\").on(\"change\", function(e) {\n+        if ($(this).is(\":checked\")) {\n+            $(this).closest(\"form\").find(\".optional_burstcoin\").fadeIn();\n+            $(this).closest(\".form-group\").css(\"margin-bottom\", \"5px\");\n+        } else {\n+            $(this).closest(\"form\").find(\".optional_burstcoin\").hide();\n+            $(this).closest(\".form-group\").css(\"margin-bottom\", \"\");\n+        }\n+    });\n+\n     $(\".add_note_to_self\").on(\"change\", function(e) {\n         if ($(this).is(\":checked\")) {\n             $(this).closest(\"form\").find(\".optional_note\").fadeIn();\n@@ -468,7 +478,7 @@ var BRS = (function(BRS, $, undefined) {\n \n         $(this).find(\".recipient_public_key\").hide();\n \n-        $(this).find(\".optional_message, .optional_note\").hide();\n+        $(this).find(\".optional_message .optional_burstcoin .optional_note\").hide();\n \n         $(this).find(\".advanced_info a\").text($.t(\"advanced\"));\n "
  },
  {
    "sha": "0b3722ad470d98358263b11307ba9a0ccbff4e7b",
    "filename": "html/ui/classic/js/brs.transactions.js",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/js/brs.transactions.js",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/html/ui/classic/js/brs.transactions.js",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/html/ui/classic/js/brs.transactions.js?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -599,6 +599,12 @@ var BRS = (function(BRS, $, undefined) {\n             case 1:\n                 transactionType = \"AT Payment\";\n                 break;\n+            case 2:\n+                transactionType = \"AT Asset Mold\";\n+                break;\n+            case 3:\n+                transactionType = \"AT Asset Mint\";\n+                break;\n             }\n         }\n         return transactionType;"
  },
  {
    "sha": "3d8b29172323354f5a68a2c247b70f59a4f38dec",
    "filename": "src/brs/Asset.java",
    "status": "modified",
    "additions": 25,
    "deletions": 1,
    "changes": 26,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/Asset.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/Asset.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/Asset.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -1,5 +1,6 @@\n package brs;\n \n+import brs.Account.AccountAsset;\n import brs.db.BurstKey;\n \n public class Asset {\n@@ -10,6 +11,7 @@\n   private final String name;\n   private final String description;\n   private final long quantityQNT;\n+  private final long capabilityQNT;\n   private final byte decimals;\n \n   protected Asset(long assetId, BurstKey dbKey, long accountId, String name, String description, long quantityQNT, byte decimals) {\n@@ -18,8 +20,25 @@ protected Asset(long assetId, BurstKey dbKey, long accountId, String name, Strin\n     this.accountId = accountId;\n     this.name = name;\n     this.description = description;\n-    this.quantityQNT = quantityQNT;\n+    this.capabilityQNT = quantityQNT;\n     this.decimals = decimals;\n+\n+    //quantity will be the circulating amount if the asset was issued by an AT, the total amount is moved to capabilityQNT\n+    if(brs.at.AT.getAT(accountId) != null ) {\n+\n+      AccountAsset accountAsset = Burst.getStores().getAccountStore().getAccountAssetTable().getBy(brs.schema.Tables.ACCOUNT_ASSET.ACCOUNT_ID.eq(accountId)\n+                                                                                                  .and(brs.schema.Tables.ACCOUNT_ASSET.ASSET_ID.eq(assetId)));\n+      if(accountAsset != null ){\n+        this.quantityQNT = quantityQNT - accountAsset.getQuantityQNT();\n+      }\n+      else\n+        this.quantityQNT = quantityQNT;\n+    }\n+    else{\n+      this.quantityQNT = quantityQNT;\n+    }\n+\n+\n   }\n \n   public Asset(BurstKey dbKey, Transaction transaction, Attachment.ColoredCoinsAssetIssuance attachment) {\n@@ -29,6 +48,7 @@ public Asset(BurstKey dbKey, Transaction transaction, Attachment.ColoredCoinsAss\n     this.name = attachment.getName();\n     this.description = attachment.getDescription();\n     this.quantityQNT = attachment.getQuantityQNT();\n+    this.capabilityQNT = this.quantityQNT;\n     this.decimals = attachment.getDecimals();\n   }\n \n@@ -52,6 +72,10 @@ public long getQuantityQNT() {\n     return quantityQNT;\n   }\n \n+  public long getCapabilityQNT() {\n+    return capabilityQNT;\n+  }\n+\n   public byte getDecimals() {\n     return decimals;\n   }"
  },
  {
    "sha": "86b5d6d8bdc09826c7dd2b8df8ba57d75ca038b2",
    "filename": "src/brs/Attachment.java",
    "status": "modified",
    "additions": 61,
    "deletions": 9,
    "changes": 70,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/Attachment.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/Attachment.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/Attachment.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -478,17 +478,17 @@ public Any getProtobufMessage() {\n     }\n \n     @Override\n-      public TransactionType getTransactionType() {\n-        return TransactionType.AutomatedTransactions.AT_PAYMENT;\n-      }\n+    public TransactionType getTransactionType() {\n+      return TransactionType.AutomatedTransactions.AT_PAYMENT;\n+    }\n \n-      @Override\n-      String getAppendixName() {\n-        return \"AT Payment\";\n-      }\n+    @Override\n+    String getAppendixName() {\n+      return \"AT Payment\";\n+    }\n \n \n-    };\n+  };\n \n   class MessagingAliasAssignment extends AbstractAttachment {\n \n@@ -888,7 +888,7 @@ public Any getProtobufMessage() {\n     }\n   }\n \n-  final class ColoredCoinsAssetTransfer extends AbstractAttachment {\n+  class ColoredCoinsAssetTransfer extends AbstractAttachment {\n \n     private final long assetId;\n     private final long quantityQNT;\n@@ -1258,6 +1258,58 @@ public TransactionType getTransactionType() {\n \n   }\n \n+  final class ATColoredCoinsAssetIssuance extends ColoredCoinsAssetIssuance {\n+\n+    ATColoredCoinsAssetIssuance(ByteBuffer buffer, byte transactionVersion) throws BurstException.NotValidException {\n+      super(buffer, transactionVersion);\n+    }\n+\n+    ATColoredCoinsAssetIssuance(JsonObject attachmentData) {\n+      super(attachmentData);\n+    }\n+\n+    public ATColoredCoinsAssetIssuance(String name, String description, long quantityQNT, byte decimals, int blockchainHeight){\n+      super(name, description, quantityQNT, decimals, blockchainHeight);\n+    }\n+\n+    @Override\n+    String getAppendixName() {\n+      return \"ATAssetIssuance\";\n+    }\n+\n+    @Override\n+    public TransactionType getTransactionType() {\n+      return TransactionType.AutomatedTransactions.AT_ASSET_ISSUANCE;\n+    }\n+\n+  }\n+\n+  final class ATColoredCoinsAssetTransfer extends ColoredCoinsAssetTransfer {\n+\n+    public ATColoredCoinsAssetTransfer(long assetId, long quantityQNT, int blockchainHeight) {\n+      super(assetId, quantityQNT, blockchainHeight);\n+    }\n+\n+    ATColoredCoinsAssetTransfer(ByteBuffer buffer, byte transactionVersion) throws BurstException.NotValidException {\n+      super(buffer, transactionVersion);\n+    }\n+\n+    ATColoredCoinsAssetTransfer(JsonObject attachmentData) {\n+      super(attachmentData);\n+    }\n+\n+    @Override\n+    String getAppendixName() {\n+      return \"ATAssetTransfer\";\n+    }\n+\n+    @Override\n+    public TransactionType getTransactionType() {\n+      return TransactionType.AutomatedTransactions.AT_ASSET_TRANSFER;\n+    }\n+\n+  }\n+\n   final class DigitalGoodsListing extends AbstractAttachment {\n \n     private final String name;"
  },
  {
    "sha": "7949d4df5c98f1db5c27ef88d5c1f5af16aed3a4",
    "filename": "src/brs/TransactionType.java",
    "status": "modified",
    "additions": 159,
    "deletions": 4,
    "changes": 163,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/TransactionType.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/TransactionType.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/TransactionType.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -71,8 +71,11 @@\n \n   public static final byte SUBTYPE_AT_CREATION = 0;\n   public static final byte SUBTYPE_AT_NXT_PAYMENT = 1;\n+  private static final byte SUBTYPE_AT_ASSET_ISSUANCE = 2;\n+  private static final byte SUBTYPE_AT_ASSET_TRANSFER = 3;\n \n   public static final byte SUBTYPE_BURST_MINING_REWARD_RECIPIENT_ASSIGNMENT = 0;\n+\n   public static final byte SUBTYPE_BURST_MINING_COMMITMENT_ADD = 1;\n   public static final byte SUBTYPE_BURST_MINING_COMMITMENT_REMOVE = 2;\n \n@@ -142,6 +145,8 @@ public static void init(Blockchain blockchain, FluxCapacitor fluxCapacitor,\n     Map<Byte, TransactionType> atTypes = new HashMap<>();\n     atTypes.put(SUBTYPE_AT_CREATION, AutomatedTransactions.AUTOMATED_TRANSACTION_CREATION);\n     atTypes.put(SUBTYPE_AT_NXT_PAYMENT, AutomatedTransactions.AT_PAYMENT);\n+    atTypes.put(SUBTYPE_AT_ASSET_ISSUANCE, AutomatedTransactions.AT_ASSET_ISSUANCE);\n+    atTypes.put(SUBTYPE_AT_ASSET_TRANSFER, AutomatedTransactions.AT_ASSET_TRANSFER);\n \n     Map<Byte, TransactionType> burstMiningTypes = new HashMap<>();\n     burstMiningTypes.put(SUBTYPE_BURST_MINING_REWARD_RECIPIENT_ASSIGNMENT, BurstMining.REWARD_RECIPIENT_ASSIGNMENT);\n@@ -264,6 +269,10 @@ final void apply(Transaction transaction, Account senderAccount, Account recipie\n     applyAttachment(transaction, senderAccount, recipientAccount);\n   }\n \n+  final public void applyAT(Transaction transaction, Account senderAccount, Account recipientAccount) {\n+    applyAttachment(transaction, senderAccount, recipientAccount);\n+  }\n+\n   abstract void applyAttachment(Transaction transaction, Account senderAccount, Account recipientAccount);\n \n   public void parseAppendices(Transaction.Builder builder, JsonObject attachmentData) {\n@@ -963,8 +972,7 @@ void undoAttachmentUnconfirmed(Transaction transaction, Account senderAccount) {\n       @Override\n       void validateAttachment(Transaction transaction) throws BurstException.ValidationException {\n         Attachment.ColoredCoinsAssetTransfer attachment = (Attachment.ColoredCoinsAssetTransfer)transaction.getAttachment();\n-        if (transaction.getAmountNQT() != 0\n-                || attachment.getComment() != null && attachment.getComment().length() > Constants.MAX_ASSET_TRANSFER_COMMENT_LENGTH\n+        if (attachment.getComment() != null && attachment.getComment().length() > Constants.MAX_ASSET_TRANSFER_COMMENT_LENGTH\n                 || attachment.getAssetId() == 0) {\n           throw new BurstException.NotValidException(\"Invalid asset transfer amount or comment: \" + JSON.toJsonString(attachment.getJsonObject()));\n         }\n@@ -973,7 +981,7 @@ void validateAttachment(Transaction transaction) throws BurstException.Validatio\n                   \"or encrypted message appendix instead\");\n         }\n         Asset asset = assetExchange.getAsset(attachment.getAssetId());\n-        if (attachment.getQuantityQNT() <= 0 || (asset != null && attachment.getQuantityQNT() > asset.getQuantityQNT())) {\n+        if (attachment.getQuantityQNT() <= 0 || (asset != null && attachment.getQuantityQNT() > asset.getCapabilityQNT())) {\n           throw new BurstException.NotValidException(\"Invalid asset transfer asset or quantity: \" + JSON.toJsonString(attachment.getJsonObject()));\n         }\n         if (asset == null) {\n@@ -999,7 +1007,7 @@ final void validateAttachment(Transaction transaction) throws BurstException.Val\n           throw new BurstException.NotValidException(\"Invalid asset order placement: \" + JSON.toJsonString(attachment.getJsonObject()));\n         }\n         Asset asset = assetExchange.getAsset(attachment.getAssetId());\n-        if (attachment.getQuantityQNT() <= 0 || (asset != null && attachment.getQuantityQNT() > asset.getQuantityQNT())) {\n+        if (attachment.getQuantityQNT() <= 0 || (asset != null && attachment.getQuantityQNT() > asset.getCapabilityQNT())) {\n           throw new BurstException.NotValidException(\"Invalid asset order placement asset or quantity: \" + JSON.toJsonString(attachment.getJsonObject()));\n         }\n         if (asset == null) {\n@@ -2628,6 +2636,153 @@ public final boolean isSigned() {\n       }\n     };\n \n+    public static final TransactionType AT_ASSET_ISSUANCE = new AutomatedTransactions() {\n+      @Override\n+      public final byte getSubtype() {\n+        return TransactionType.SUBTYPE_AT_ASSET_ISSUANCE;\n+      }\n+\n+      @Override\n+      public String getDescription() {\n+        return \"AT Asset Mold\";\n+      }\n+\n+      @Override\n+      public Fee getBaselineFee(int height) {\n+        return BASELINE_ASSET_ISSUANCE_FEE;\n+      }\n+\n+      @Override\n+      public Attachment.ATColoredCoinsAssetIssuance parseAttachment(ByteBuffer buffer, byte transactionVersion) throws BurstException.NotValidException {\n+        return new Attachment.ATColoredCoinsAssetIssuance(buffer, transactionVersion);\n+      }\n+\n+      @Override\n+      Attachment.ATColoredCoinsAssetIssuance parseAttachment(JsonObject attachmentData) {\n+        return new Attachment.ATColoredCoinsAssetIssuance(attachmentData);\n+      }\n+\n+      @Override\n+      boolean applyAttachmentUnconfirmed(Transaction transaction, Account senderAccount) {\n+        return true;\n+      }\n+\n+      @Override\n+      void applyAttachment(Transaction transaction, Account senderAccount, Account recipientAccount) {\n+\n+        try{\n+          doValidateAttachment(transaction);\n+        }\n+        catch(BurstException.ValidationException ex){\n+          return;\n+        }\n+\n+        Attachment.ColoredCoinsAssetIssuance attachment = (Attachment.ColoredCoinsAssetIssuance) transaction.getAttachment();\n+        long assetId = transaction.getId();\n+        assetExchange.addAsset(transaction, attachment);\n+        accountService.addToAssetAndUnconfirmedAssetBalanceQNT(senderAccount, assetId, attachment.getQuantityQNT());\n+      }\n+\n+      @Override\n+      void undoAttachmentUnconfirmed(Transaction transaction, Account senderAccount) {\n+        // Nothing to undo\n+      }\n+\n+      @Override\n+      void doValidateAttachment(Transaction transaction) throws BurstException.ValidationException {\n+        Attachment.ATColoredCoinsAssetIssuance attachment = (Attachment.ATColoredCoinsAssetIssuance)transaction.getAttachment();\n+        if (attachment.getName().length() < Constants.MIN_ASSET_NAME_LENGTH\n+                || attachment.getName().length() > Constants.MAX_ASSET_NAME_LENGTH\n+                || attachment.getDescription().length() > Constants.MAX_ASSET_DESCRIPTION_LENGTH\n+                || attachment.getDecimals() < 0 || attachment.getDecimals() > 8\n+                || attachment.getQuantityQNT() <= 0\n+                || attachment.getQuantityQNT() > Constants.MAX_ASSET_QUANTITY_QNT\n+        ) {\n+          throw new BurstException.NotValidException(\"Invalid at asset Mold: \" + JSON.toJsonString(attachment.getJsonObject()));\n+        }\n+        if (!TextUtils.isInAlphabet(attachment.getName())) {\n+          throw new BurstException.NotValidException(\"Invalid at asset name: \" + attachment.getName());\n+        }\n+      }\n+\n+      @Override\n+      public boolean hasRecipient() {\n+        return false;\n+      }\n+\n+      @Override\n+      public final boolean isSigned() {\n+        return false;\n+      }\n+    }; \n+    \n+    public static final TransactionType AT_ASSET_TRANSFER = new AutomatedTransactions() {\n+      @Override\n+      public final byte getSubtype() {\n+        return TransactionType.SUBTYPE_AT_ASSET_TRANSFER;\n+      }\n+\n+      @Override\n+      public String getDescription() {\n+        return \"AT Asset Mint\";\n+      }\n+\n+      @Override\n+      public Attachment.ATColoredCoinsAssetTransfer parseAttachment(ByteBuffer buffer, byte transactionVersion) throws BurstException.NotValidException{\n+        return new Attachment.ATColoredCoinsAssetTransfer(buffer, transactionVersion);\n+      }\n+\n+      @Override\n+      Attachment.ATColoredCoinsAssetTransfer parseAttachment(JsonObject attachmentData) {\n+        return new Attachment.ATColoredCoinsAssetTransfer(attachmentData);\n+      }\n+\n+      @Override\n+      void doValidateAttachment(Transaction transaction) throws BurstException.ValidationException {\n+        Attachment.ATColoredCoinsAssetTransfer attachment = (Attachment.ATColoredCoinsAssetTransfer)transaction.getAttachment();\n+        if (attachment.getComment() != null && attachment.getComment().length() > Constants.MAX_ASSET_TRANSFER_COMMENT_LENGTH\n+                || attachment.getAssetId() == 0) {\n+          throw new BurstException.NotValidException(\"Invalid asset transfer amount or comment: \" + JSON.toJsonString(attachment.getJsonObject()));\n+        }\n+        if (transaction.getVersion() > 0 && attachment.getComment() != null) {\n+          throw new BurstException.NotValidException(\"Asset transfer comments no longer allowed, use message appendix instead\");\n+        }\n+        Asset asset = assetExchange.getAsset(attachment.getAssetId());\n+        if (attachment.getQuantityQNT() <= 0 || (asset != null && attachment.getQuantityQNT() > asset.getCapabilityQNT())) {\n+          throw new BurstException.NotValidException(\"Invalid asset transfer asset or quantity: \" + JSON.toJsonString(attachment.getJsonObject()));\n+        }\n+        if (asset == null) {\n+          throw new BurstException.NotCurrentlyValidException(\"Asset \" + Convert.toUnsignedLong(attachment.getAssetId()) +\n+                  \" does not exist yet\");\n+        }\n+      }\n+\n+      @Override\n+      void applyAttachment(Transaction transaction, Account senderAccount, Account recipientAccount) {\n+\n+        try{\n+          doValidateAttachment(transaction);\n+        }\n+        catch(BurstException.ValidationException ex){\n+          return;\n+        }\n+\n+        Attachment.ColoredCoinsAssetTransfer attachment = (Attachment.ColoredCoinsAssetTransfer) transaction.getAttachment();\n+        accountService.addToAssetBalanceQNT(senderAccount, attachment.getAssetId(), -attachment.getQuantityQNT());\n+        accountService.addToAssetAndUnconfirmedAssetBalanceQNT(recipientAccount, attachment.getAssetId(), attachment.getQuantityQNT());\n+        assetExchange.addAssetTransfer(transaction, attachment);\n+      }\n+\n+      @Override\n+      public boolean hasRecipient() {\n+        return true;\n+      }\n+\n+      @Override\n+      public final boolean isSigned() {\n+        return false;\n+      }\n+    };\n   }\n \n   public long minimumFeeNQT(int height, int appendagesSize) {"
  },
  {
    "sha": "d0954e4ffb7ea6e1f2dcf2ef7ae86f2e08310ef8",
    "filename": "src/brs/at/AT.java",
    "status": "modified",
    "additions": 50,
    "deletions": 5,
    "changes": 55,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AT.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AT.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/at/AT.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -12,6 +12,7 @@\n import brs.db.TransactionDb;\n import brs.db.VersionedEntityTable;\n import brs.services.AccountService;\n+import brs.util.Convert;\n import brs.util.Listener;\n \n import java.io.ByteArrayInputStream;\n@@ -92,13 +93,13 @@ public static void addPendingTransaction(AtTransaction atTransaction, int blockH\n         pendingTransactions.add(atTransaction);\n     }\n \n-    public static boolean findPendingTransaction(byte[] recipientId, int blockHeight, long generatorId) {\n+    public static boolean findPendingTransaction(byte[] recipientId, long assetId, int blockHeight, long generatorId) {\n         long hash = blockHeight + generatorId;\n         if(pendingTransactionsMap.get(hash) == null) {\n           return false;\n         }\n         for (AtTransaction tx : pendingTransactionsMap.get(hash)) {\n-            if (Arrays.equals(recipientId, tx.getRecipientId())) {\n+            if (assetId == tx.getAssetId() && Arrays.equals(recipientId, tx.getRecipientId())) {\n                 return true;\n             }\n         }\n@@ -258,8 +259,44 @@ public void notify(Block block) {\n                 accountService.addToBalanceAndUnconfirmedBalanceNQT(accountService.getAccount(AtApiHelper.getLong(atTransaction.getSenderId())), -atTransaction.getAmount());\n                 accountService.addToBalanceAndUnconfirmedBalanceNQT(accountService.getOrAddAccount(AtApiHelper.getLong(atTransaction.getRecipientId())), atTransaction.getAmount());\n \n-                Transaction.Builder builder = new Transaction.Builder((byte) 1, Genesis.getCreatorPublicKey(),\n+                Transaction.Builder builder;\n+                boolean messageIsText = false;\n+                \n+                if(atTransaction.getAsset() != null){\n+\n+                    //Issue Asset\n+                    //looks do not need to pay fee since already paid AT running fees\n+                    //long accountBalance = accountService.getAccount(AtApiHelper.getLong(atTransaction.getSenderId())).getBalanceNQT();\n+                    //if(accountBalance <0 || Constants.ASSET_ISSUANCE_FEE_NQT > accountBalance){\n+                    //    //ignore it if no enough asset balance to issue asset\n+                    //    continue;\n+                    //}\n+\n+                    builder = new Transaction.Builder((byte) 1, Genesis.getCreatorPublicKey(),\n+                        atTransaction.getAmount(), 0L, block.getTimestamp(), (short) 1440, atTransaction.getAsset());\n+\n+                    //set builder id to asset id in atTansaction, so the issued asset will have the same id\n+                    builder.id(atTransaction.getAssetId());\n+                    builder.fullHash(atTransaction.getFullHash());\n+                }\n+                else if(atTransaction.getAssetAmount() > 0) {\n+\n+                    //Transfer Asset\n+                    messageIsText = true;\n+                    long unconfirmedAssetBalance = accountService.getUnconfirmedAssetBalanceQNT(accountService.getAccount(AtApiHelper.getLong(atTransaction.getSenderId())), atTransaction.getAssetId());\n+                    if (unconfirmedAssetBalance < 0 || atTransaction.getAssetAmount() > unconfirmedAssetBalance) {\n+                        //ignore it if no enough asset balance to transfer\n+                        continue;\n+                    }\n+\n+                    accountService.addToUnconfirmedAssetBalanceQNT(accountService.getAccount(AtApiHelper.getLong(atTransaction.getSenderId())), atTransaction.getAssetId(), -atTransaction.getAssetAmount());\n+                    builder = new Transaction.Builder((byte) 1, Genesis.getCreatorPublicKey(),\n+                        atTransaction.getAmount(), 0L, block.getTimestamp(), (short) 1440, new Attachment.ATColoredCoinsAssetTransfer(atTransaction.getAssetId(), atTransaction.getAssetAmount(), blockchain.getHeight()));\n+                }\n+                else{\n+                    builder = new Transaction.Builder((byte) 1, Genesis.getCreatorPublicKey(),\n                         atTransaction.getAmount(), 0L, block.getTimestamp(), (short) 1440, Attachment.AT_PAYMENT);\n+                }\n \n                 builder.senderId(AtApiHelper.getLong(atTransaction.getSenderId()))\n                         .recipientId(AtApiHelper.getLong(atTransaction.getRecipientId()))\n@@ -271,16 +308,24 @@ public void notify(Block block) {\n \n                 byte[] message = atTransaction.getMessage();\n                 if (message != null) {\n-                    builder.message(new Appendix.Message(message, blockchain.getHeight()));\n+                    if(messageIsText)\n+                        builder.message(new Appendix.Message(Convert.toString( message), blockchain.getHeight()));\n+                    else\n+                        builder.message(new Appendix.Message(message, blockchain.getHeight()));\n                 }\n \n                 try {\n                     Transaction transaction = builder.build();\n                     if (!transactionDb.hasTransaction(transaction.getId())) {\n+\n+                        transaction.getType().applyAT(transaction, accountService.getAccount(AtApiHelper.getLong(atTransaction.getSenderId())), accountService.getAccount(AtApiHelper.getLong(atTransaction.getRecipientId())));\n+\n                         transactions.add(transaction);\n+\n+                        \n                     }\n                 } catch (BurstException.NotValidException e) {\n-                    throw new RuntimeException(\"Failed to construct AT payment transaction\", e);\n+                    throw new RuntimeException(\"Failed to construct AT transaction\", e);\n                 }\n               }\n               pendingTransactionsMap.remove(hash);"
  },
  {
    "sha": "5804384292d05606551505dc77ef5792177d30c8",
    "filename": "src/brs/at/AtApi.java",
    "status": "modified",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtApi.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtApi.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/at/AtApi.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -431,6 +431,30 @@\n      */\n     long getAmountForTxInA(AtMachineState state);\n \n+    /**\n+     * @param state AT machine state\n+     * @return bool if A is a valid tx with @addr to tx asset id\n+     */\n+    long getAssetIdForTxInA(AtMachineState state);\n+\n+    /**\n+     * @param state AT machine state\n+     * @return bool if A is a valid tx with @addr to tx asset amount\n+     */\n+    long getAssetAmountForTxInA(AtMachineState state);\n+\n+     /**\n+     * @param state AT machine state\n+     * @return bool if Mold is done successfully set A to the asset id, asset information in  B1(assetDecimals) B2(assetQuantity) A1~4(assetDesc) B3-4(assetName)\n+     */\n+    long mold(AtMachineState state);\n+\n+     /**\n+     * @param state AT machine state\n+     * @return bool if B1 is a valid address then send it the amount, asset and msg.  B1(address) B2(asset amount) A1~4(message) B3(asset id) B4(amount)\n+     */\n+    long mint(AtMachineState state);\n+\n     /**\n      * @param state AT machine state\n      * @return bool if A is a valid tx with @addr to the tx timestamp\n@@ -479,6 +503,13 @@\n      */\n     long getCurrentBalance(AtMachineState state);\n \n+        /**\n+     * sets @addr to asset mintable balance of the AT\n+     *\n+     * @param state AT machine state\n+     */\n+    long getAssetMintableBalance(AtMachineState state);\n+\n     /**\n      * sets @addr to the balance it had last had when running\n      * this amount does not include any additional amounts sent to the"
  },
  {
    "sha": "cafb98033c9780869fcf6406c6b7fa513bc2e61a",
    "filename": "src/brs/at/AtApiController.java",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtApiController.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtApiController.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/at/AtApiController.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -134,7 +134,10 @@ public static long func(int funcNum, AtMachineState state) {\n             case 779:\n                 atApi.bToAddressOfCreator(state);\n                 break;\n-\n+            case 780:  \n+                return atApi.getAssetIdForTxInA(state);  //0x030c get the asset id in a asset transfer transaction\n+            case 781:  \n+                return atApi.getAssetAmountForTxInA(state);  //0x030d get the asset amount in a asset transfer transaction\n             case 1024:\n                 return atApi.getCurrentBalance(state);\n             case 1025:\n@@ -148,6 +151,14 @@ public static long func(int funcNum, AtMachineState state) {\n             case 1029:\n                 atApi.sendAToAddressInB(state);\n                 break;\n+            case 1031:\n+                atApi.mold(state);    //0x0407  if Mold is done successfully set A to the asset id, asset information in  B1(assetDecimals) B2(assetQuantity) A1~4(assetDesc) B3-4(assetName)\n+                break;\n+            case 1032:\n+                atApi.mint(state);    //0x0408  if B1 is a valid address then send it the amount, asset and msg.  B1(address) B2(asset amount) A1~4(message) B3(asset id) B4(amount)\n+                break;\n+            case 1033:\n+                return atApi.getAssetMintableBalance(state);  //0x0409  if B1 is a valid asset id and the asset is issued by the AT then return its mintable amount, \n             default:\n                 return 0;\n         }"
  },
  {
    "sha": "09eb648734957726f66336b6d4c20e6f02e13eac",
    "filename": "src/brs/at/AtApiImpl.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtApiImpl.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtApiImpl.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/at/AtApiImpl.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -682,6 +682,26 @@ public long getAmountForTxInA(AtMachineState state) {\n         return platform.getAmountForTxInA(state);\n     }\n \n+    @Override\n+    public long getAssetIdForTxInA(AtMachineState state) {\n+        return platform.getAssetIdForTxInA(state);\n+    }\n+ \n+    @Override\n+    public long getAssetAmountForTxInA(AtMachineState state) {\n+        return platform.getAssetAmountForTxInA(state);\n+    }\n+\n+    @Override\n+    public long mold(AtMachineState state) {\n+        return platform.mold(state);\n+    }\n+\n+    @Override\n+    public long mint(AtMachineState state) {\n+        return platform.mint(state);\n+    }\n+\n     @Override\n     public long getTimestampForTxInA(AtMachineState state) {\n         return platform.getTimestampForTxInA(state);\n@@ -714,6 +734,11 @@ public long getCurrentBalance(AtMachineState state) {\n         return platform.getCurrentBalance(state);\n     }\n \n+    @Override\n+    public long getAssetMintableBalance(AtMachineState state) {\n+        return platform.getAssetMintableBalance(state);\n+    }\n+\n     @Override\n     public long getPreviousBalance(AtMachineState state) {\n         return platform.getPreviousBalance(state);"
  },
  {
    "sha": "181ad75e1d6830265b103cf471914f89411f5097",
    "filename": "src/brs/at/AtApiPlatformImpl.java",
    "status": "modified",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtApiPlatformImpl.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtApiPlatformImpl.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/at/AtApiPlatformImpl.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -3,6 +3,7 @@\n import brs.Appendix;\n import brs.Burst;\n import brs.Transaction;\n+import brs.Attachment.ColoredCoinsAssetTransfer;\n import brs.crypto.Crypto;\n import brs.fluxcapacitor.FluxValues;\n import org.slf4j.Logger;\n@@ -105,6 +106,11 @@ public long getTypeForTxInA(AtMachineState state) {\n             return 1;\n         }\n \n+        ColoredCoinsAssetTransfer attachment = (tx.getAttachment() instanceof ColoredCoinsAssetTransfer)?(ColoredCoinsAssetTransfer)tx.getAttachment():null;\n+        if (attachment != null) {\n+            return 2;\n+        }\n+\n         return 0;\n     }\n \n@@ -125,6 +131,119 @@ public long getAmountForTxInA(AtMachineState state) {\n         return 0;\n     }\n \n+    @Override\n+    public long getAssetIdForTxInA(AtMachineState state) {\n+        long txId = AtApiHelper.getLong(state.getA1());\n+\n+        Transaction tx = Burst.getBlockchain().getTransaction(txId);\n+\n+        if (tx == null || (tx.getHeight() >= state.getHeight())) {\n+            return -1;\n+        }\n+\n+        ColoredCoinsAssetTransfer attachment = (tx.getAttachment() instanceof ColoredCoinsAssetTransfer)?(ColoredCoinsAssetTransfer)tx.getAttachment():null;\n+        if (attachment != null) {\n+            return attachment.getAssetId();\n+        }\n+\n+        return -1;\n+    }\n+\n+    @Override\n+    public long getAssetAmountForTxInA(AtMachineState state) {\n+        long txId = AtApiHelper.getLong(state.getA1());\n+\n+        Transaction tx = Burst.getBlockchain().getTransaction(txId);\n+\n+        if (tx == null || (tx.getHeight() >= state.getHeight())) {\n+            return -1;\n+        }\n+\n+        ColoredCoinsAssetTransfer attachment = (tx.getAttachment() instanceof ColoredCoinsAssetTransfer)?(ColoredCoinsAssetTransfer)tx.getAttachment():null;\n+        if (attachment != null) {\n+            return attachment.getQuantityQNT();\n+        }\n+\n+        return 0;\n+    }\n+\n+    @Override\n+    public long mold(AtMachineState state) {\n+\n+        //if Mold is done successfully set A to the asset id, asset information in  B1(assetDecimals) B2(assetQuantity) A1~4(assetDesc) B3-4(assetName)\n+\n+        //asset name in B3 and B4\n+        ByteBuffer bName = ByteBuffer.allocate(16);\n+        bName.order(ByteOrder.LITTLE_ENDIAN);\n+        bName.put(state.getB3());\n+        bName.put(state.getB4());\n+        bName.clear(); \n+\n+        //asset description in A1 ~ A4\n+        ByteBuffer bDesc = ByteBuffer.allocate(32);\n+        bDesc.order(ByteOrder.LITTLE_ENDIAN);\n+        bDesc.put(state.getA1());\n+        bDesc.put(state.getA2());\n+        bDesc.put(state.getA3());\n+        bDesc.put(state.getA4());\n+        bDesc.clear();\n+\n+        //asset quantity QNT in B2\n+        long quantityQNT = AtApiHelper.getLong(state.getB2());\n+\n+        //asset decimals in B1\n+        long decimals = AtApiHelper.getLong(state.getB1());\n+\n+        int height = state.getHeight();\n+\n+\n+        AtTransaction tx = new AtTransaction(state.getId(), AtApiHelper.getByteArray(0L), 0L,bName.array());\n+        long assetState = tx.setAsset(bName.array(), bDesc.array(), quantityQNT, (byte)decimals, height);\n+        if(assetState < 0){\n+            state.setA1(AtApiHelper.getByteArray(assetState));\n+            return assetState;\n+        }\n+        \n+        state.setA1(AtApiHelper.getByteArray(tx.getAssetId()));\n+        \n+        state.addTransaction(tx);\n+        \n+        return tx.getAssetId();\n+    }\n+\n+    @Override\n+    public long mint(AtMachineState state) {\n+\n+        //if B1 is a valid address then send it the amount, asset and msg.  B1(address) B2(asset amount) A1~4(message) B3(asset id) B4(amount)\n+\n+        //burstcoin amount QNT in B4\n+        long amountQNT = AtApiHelper.getLong(state.getB4());\n+\n+        //message in A1 ~ A4\n+        ByteBuffer bMsg = ByteBuffer.allocate(32);\n+        bMsg.order(ByteOrder.LITTLE_ENDIAN);\n+        bMsg.put(state.getA1());\n+        bMsg.put(state.getA2());\n+        bMsg.put(state.getA3());\n+        bMsg.put(state.getA4());\n+        bMsg.clear();\n+\n+        //asset id in B3\n+        long assetId = AtApiHelper.getLong(state.getB3());\n+\n+        //asset amount QNT in B2\n+        long assetAmountQNT = AtApiHelper.getLong(state.getB2());\n+\n+        AtTransaction tx = new AtTransaction(state.getId(), state.getB1().clone(), amountQNT, bMsg.array());\n+        tx.setAssetId(assetId);\n+        tx.setAssetAmount(assetAmountQNT);\n+        state.addTransaction(tx);\n+       \n+\n+        return 0;\n+        \n+    }\n+ \n     @Override\n     public long getTimestampForTxInA(AtMachineState state) {\n         long txId = AtApiHelper.getLong(state.getA1());\n@@ -278,6 +397,27 @@ public long getCurrentBalance(AtMachineState state) {\n         return state.getgBalance();\n     }\n \n+    @Override\n+    public long getAssetMintableBalance(AtMachineState state) {\n+\n+        if (!Burst.getFluxCapacitor().getValue(FluxValues.AT_FIX_BLOCK_2, state.getHeight())) {\n+            return 0;\n+        }\n+\n+        //asset id in B1\n+        long assetId = AtApiHelper.getLong(state.getB1());\n+        brs.Asset asset = Burst.getStores().getAssetStore().getAssetTable().getBy(brs.schema.Tables.ASSET.ID.eq(assetId));\n+        if(asset != null && asset.getAccountId() == AtApiHelper.getLong(state.getId()))\n+        {\n+            brs.Account.AccountAsset accountAsset = Burst.getStores().getAccountStore().getAccountAssetTable().getBy(brs.schema.Tables.ACCOUNT_ASSET.ACCOUNT_ID.eq(asset.getAccountId())\n+                                                                                                    .and(brs.schema.Tables.ACCOUNT_ASSET.ASSET_ID.eq(assetId)));\n+            if(accountAsset != null)\n+                return accountAsset.getQuantityQNT();\n+        }\n+        \n+        return 0;\n+    }\n+\n     @Override\n     public long getPreviousBalance(AtMachineState state) {\n         if (!Burst.getFluxCapacitor().getValue(FluxValues.AT_FIX_BLOCK_2, state.getHeight())) {"
  },
  {
    "sha": "cb0b3942bc2255822cdce295b43afa82613194ef",
    "filename": "src/brs/at/AtController.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtController.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtController.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/at/AtController.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -421,7 +421,7 @@ private static long makeTransactions(AT at, int blockHeight, long generatorId) t\n         long totalAmount = 0;\n         if (!Burst.getFluxCapacitor().getValue(FluxValues.AT_FIX_BLOCK_4, at.getHeight())) {\n             for (AtTransaction tx : at.getTransactions()) {\n-                if (AT.findPendingTransaction(tx.getRecipientId(), blockHeight, generatorId)) {\n+                if (AT.findPendingTransaction(tx.getRecipientId(), tx.getAssetId(), blockHeight, generatorId)) {\n                     throw new AtException(\"Conflicting transaction found\");\n                 }\n             }"
  },
  {
    "sha": "455e00da358b529f362a6086cf9f3c8774110d76",
    "filename": "src/brs/at/AtMachineState.java",
    "status": "modified",
    "additions": 19,
    "deletions": 8,
    "changes": 27,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtMachineState.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtMachineState.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/at/AtMachineState.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -211,16 +211,27 @@ void setB4(byte[] b4) {\n     }\n \n     void addTransaction(AtTransaction tx) {\n-        ByteBuffer recipId = ByteBuffer.wrap(tx.getRecipientId());\n-        AtTransaction oldTx = transactions.get(recipId);\n-        if (oldTx == null) {\n-            transactions.put(recipId, tx);\n+\n+        ByteBuffer keyBuf = ByteBuffer.allocate(16);\n+        keyBuf.put(tx.getRecipientId());\n+        keyBuf.putLong(tx.getAssetId()); //add asset id to the key which might be 0L\n+        keyBuf.position(0);\n+\n+        AtTransaction oldTx = transactions.get(keyBuf);\n+        if (oldTx == null || tx.getAsset() != null) {  //a duplicated mold call will replace the previous mold with the same asset\n+            transactions.put(keyBuf, tx);\n         } else {\n             AtTransaction newTx = new AtTransaction(tx.getSenderId(),\n-                    tx.getRecipientId(),\n-                    oldTx.getAmount() + tx.getAmount(),\n-                    tx.getMessage() != null ? tx.getMessage() : oldTx.getMessage());\n-            transactions.put(recipId, newTx);\n+                tx.getRecipientId(),\n+                oldTx.getAmount() + tx.getAmount(),\n+                tx.getMessage() != null ? tx.getMessage() : oldTx.getMessage());\n+\n+            if(tx.getAssetId() != 0L ){\n+                newTx.setAssetId(tx.getAssetId());\n+                newTx.setAssetAmount(oldTx.getAssetAmount() + tx.getAssetAmount());\n+            }\n+\n+            transactions.put(keyBuf, newTx);\n         }\n     }\n "
  },
  {
    "sha": "dd275bc9c1a006ac6d45e6ee8f16092d4fe88e5f",
    "filename": "src/brs/at/AtTransaction.java",
    "status": "modified",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtTransaction.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/at/AtTransaction.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/at/AtTransaction.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -7,21 +7,34 @@\n \n package brs.at;\n \n+import brs.crypto.Crypto;\n+import brs.Attachment.ATColoredCoinsAssetIssuance;\n+import brs.util.Convert;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n public class AtTransaction {\n     private static final SortedMap<Long, SortedMap<Long, AtTransaction>> all_AT_Txs = new TreeMap<>();\n     private final byte[] message;\n     private final long amount;\n+    private long assetId;\n+    private long assetAmount;\n+    private ATColoredCoinsAssetIssuance asset;\n     private byte[] senderId;\n     private byte[] recipientId;\n+    private byte[] fullHash;\n \n     AtTransaction(byte[] senderId, byte[] recipientId, long amount, byte[] message) {\n         this.senderId = senderId.clone();\n         this.recipientId = recipientId.clone();\n         this.amount = amount;\n         this.message = (message != null) ? message.clone() : null;\n+        this.assetId = 0;\n+        this.assetAmount = 0;\n+        this.asset = null;\n     }\n \n     public static AtTransaction getATTransaction(Long atId, Long height) {\n@@ -48,6 +61,36 @@ public Long getAmount() {\n         return message;\n     }\n \n+    public long getAssetId(){\n+\n+        if(assetId == 0 && asset != null){\n+\n+            int bytesLength = asset.getSize() + senderId.length;\n+            ByteBuffer buffer = ByteBuffer.allocate(bytesLength);\n+            buffer.order(ByteOrder.LITTLE_ENDIAN);\n+            asset.putBytes(buffer);\n+            buffer.put(senderId);\n+\n+            fullHash = Crypto.sha256().digest(buffer.array());\n+            \n+            assetId = Convert.fullHashToId(fullHash);\n+        }\n+\n+        return assetId;\n+    }\n+\n+    public byte[] getFullHash(){\n+        return fullHash;\n+    }\n+\n+    public long getAssetAmount(){\n+        return assetAmount;\n+    }\n+\n+    public ATColoredCoinsAssetIssuance getAsset(){\n+        return asset;\n+    }\n+\n     public void addTransaction(long atId, Long height) {\n         if (all_AT_Txs.containsKey(atId)) {\n             all_AT_Txs.get(atId).put(height, this);\n@@ -57,4 +100,46 @@ public void addTransaction(long atId, Long height) {\n             all_AT_Txs.put(atId, temp);\n         }\n     }\n+\n+    public void setAssetId(long assetId){\n+        this.assetId = assetId;\n+    }\n+\n+    public void setAssetAmount(long assetAmount){\n+        this.assetAmount = assetAmount;\n+    }\n+\n+    public long setAsset(byte[] bName, byte[] bDesc, long quantityQNT, byte decimals, int blockchainHeight){\n+\n+        String name = Convert.toString(bName);\n+        String description = Convert.toString(bDesc);\n+\n+        if (name == null) {\n+            return -1;\n+          }\n+      \n+        name = name.trim();\n+        if (name.length() < brs.Constants.MIN_ASSET_NAME_LENGTH || name.length() > brs.Constants.MAX_ASSET_NAME_LENGTH) {\n+        return -2;\n+        }\n+    \n+        if (!brs.util.TextUtils.isInAlphabet(name)) {\n+        return -3;\n+        }\n+    \n+        description = description.trim();\n+        if (description != null && description.length() > brs.Constants.MAX_ASSET_DESCRIPTION_LENGTH) {\n+        return -4;\n+        }\n+\n+        if (quantityQNT <= 0 || quantityQNT > brs.Constants.MAX_ASSET_QUANTITY_QNT)\n+        return -5;\n+\n+        if (decimals < 0 || decimals > 8)\n+        return -6;\n+\n+        this.asset = new ATColoredCoinsAssetIssuance( name, description, quantityQNT, decimals, blockchainHeight);\n+\n+        return 0;\n+    }\n }"
  },
  {
    "sha": "962595762d831cf92530a35a9d6e33ea15dd146f",
    "filename": "src/brs/grpc/proto/BrsApiServiceGrpc.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/grpc/proto/BrsApiServiceGrpc.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/grpc/proto/BrsApiServiceGrpc.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/grpc/proto/BrsApiServiceGrpc.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -15,9 +15,11 @@\n import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;\n import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;\n \n+import javax.annotation.processing.Generated;\n+\n /**\n  */\n-@javax.annotation.Generated(\n+@Generated(\n     value = \"by gRPC proto compiler (version 1.23.0)\",\n     comments = \"Source: brsApi.proto\")\n public final class BrsApiServiceGrpc {"
  },
  {
    "sha": "1c528e278727256338a6afbbfdcd151aa918775d",
    "filename": "src/brs/http/GetAccountAssets.java",
    "status": "modified",
    "additions": 15,
    "deletions": 2,
    "changes": 17,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/http/GetAccountAssets.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/http/GetAccountAssets.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/http/GetAccountAssets.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -38,14 +38,27 @@ JsonElement processRequest(HttpServletRequest req) throws BurstException {\n         JsonArray assetBalances = new JsonArray();\n         JsonArray unconfirmedAssetBalances = new JsonArray();\n \n+        //the account is an AT\n+        boolean accountIsAT = brs.at.AT.getAT(account.getId()) != null;\n+\n         for (Account.AccountAsset accountAsset : accountService.getAssets(account.getId(), firstIndex, lastIndex)) {\n+\n+            // the asset balance will show zero if the the asset is issued by an AT which is the current account \n+            boolean showAssetBalance = true; \n+            if(accountIsAT){\n+                brs.Asset asset = brs.Burst.getStores().getAssetStore().getAssetTable().getBy(brs.schema.Tables.ASSET.ID.eq(accountAsset.getAssetId()));\n+                if(asset != null && asset.getAccountId() == account.getId()){\n+                showAssetBalance = false;\n+                }\n+            }\n+\n             JsonObject assetBalance = new JsonObject();\n             assetBalance.addProperty(ASSET_RESPONSE, Convert.toUnsignedLong(accountAsset.getAssetId()));\n-            assetBalance.addProperty(BALANCE_QNT_RESPONSE, String.valueOf(accountAsset.getQuantityQNT()));\n+            assetBalance.addProperty(BALANCE_QNT_RESPONSE, showAssetBalance ? String.valueOf(accountAsset.getQuantityQNT()) : \"0\");\n             assetBalances.add(assetBalance);\n             JsonObject unconfirmedAssetBalance = new JsonObject();\n             unconfirmedAssetBalance.addProperty(ASSET_RESPONSE, Convert.toUnsignedLong(accountAsset.getAssetId()));\n-            unconfirmedAssetBalance.addProperty(UNCONFIRMED_BALANCE_QNT_RESPONSE, String.valueOf(accountAsset.getUnconfirmedQuantityQNT()));\n+            unconfirmedAssetBalance.addProperty(UNCONFIRMED_BALANCE_QNT_RESPONSE, showAssetBalance ? String.valueOf(accountAsset.getUnconfirmedQuantityQNT()) : \"0\");\n             unconfirmedAssetBalances.add(unconfirmedAssetBalance);\n         }\n "
  },
  {
    "sha": "ff1f9538b4c40602795d4735eb591f7659476c91",
    "filename": "src/brs/http/TransferAsset.java",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/http/TransferAsset.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/http/TransferAsset.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/http/TransferAsset.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -17,7 +17,7 @@\n   private final AccountService accountService;\n \n   public TransferAsset(ParameterService parameterService, Blockchain blockchain, APITransactionManager apiTransactionManager, AccountService accountService) {\n-    super(new APITag[] {APITag.AE, APITag.CREATE_TRANSACTION}, apiTransactionManager, RECIPIENT_PARAMETER, ASSET_PARAMETER, QUANTITY_QNT_PARAMETER);\n+    super(new APITag[] {APITag.AE, APITag.CREATE_TRANSACTION}, apiTransactionManager, RECIPIENT_PARAMETER, ASSET_PARAMETER, QUANTITY_QNT_PARAMETER, AMOUNT_NQT_PARAMETER);\n     this.parameterService = parameterService;\n     this.blockchain = blockchain;\n     this.accountService = accountService;\n@@ -32,13 +32,21 @@ JsonElement processRequest(HttpServletRequest req) throws BurstException {\n     long quantityQNT = ParameterParser.getQuantityQNT(req);\n     Account account = parameterService.getSenderAccount(req);\n \n+    long BurstCoinAmountQNT;\n+    try{\n+      BurstCoinAmountQNT = ParameterParser.getAmountNQT(req);\n+    }catch(Exception ex)\n+    {\n+      BurstCoinAmountQNT = 0L;\n+    }\n+\n     long assetBalance = accountService.getUnconfirmedAssetBalanceQNT(account, asset.getId());\n     if (assetBalance < 0 || quantityQNT > assetBalance) {\n       return NOT_ENOUGH_ASSETS;\n     }\n \n     Attachment attachment = new Attachment.ColoredCoinsAssetTransfer(asset.getId(), quantityQNT, blockchain.getHeight());\n-    return createTransaction(req, account, recipient, 0, attachment);\n+    return createTransaction(req, account, recipient, BurstCoinAmountQNT, attachment);\n \n   }\n "
  },
  {
    "sha": "9a2605be7295faf5936b18b5dc0697ce7724c211",
    "filename": "src/brs/schema/Db.java",
    "status": "modified",
    "additions": 31,
    "deletions": 5,
    "changes": 36,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/Db.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/Db.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/Db.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,15 +4,41 @@\n package brs.schema;\n \n \n-import brs.schema.tables.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.annotation.processing.Generated;\n+\n import org.jooq.Catalog;\n import org.jooq.Table;\n import org.jooq.impl.SchemaImpl;\n \n-import javax.annotation.Generated;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n+import brs.schema.tables.Account;\n+import brs.schema.tables.AccountAsset;\n+import brs.schema.tables.Alias;\n+import brs.schema.tables.AliasOffer;\n+import brs.schema.tables.AskOrder;\n+import brs.schema.tables.Asset;\n+import brs.schema.tables.AssetTransfer;\n+import brs.schema.tables.At;\n+import brs.schema.tables.AtState;\n+import brs.schema.tables.BidOrder;\n+import brs.schema.tables.Block;\n+import brs.schema.tables.Escrow;\n+import brs.schema.tables.EscrowDecision;\n+import brs.schema.tables.FlywaySchemaHistory;\n+import brs.schema.tables.Goods;\n+import brs.schema.tables.IndirectIncoming;\n+import brs.schema.tables.Peer;\n+import brs.schema.tables.Purchase;\n+import brs.schema.tables.PurchaseFeedback;\n+import brs.schema.tables.PurchasePublicFeedback;\n+import brs.schema.tables.RewardRecipAssign;\n+import brs.schema.tables.Subscription;\n+import brs.schema.tables.Trade;\n+import brs.schema.tables.Transaction;\n+import brs.schema.tables.UnconfirmedTransaction;\n \n \n /**"
  },
  {
    "sha": "1398e6b612e6525d90645703b201a5a6907bf59d",
    "filename": "src/brs/schema/DefaultCatalog.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/DefaultCatalog.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/DefaultCatalog.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/DefaultCatalog.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,14 +4,15 @@\n package brs.schema;\n \n \n-import org.jooq.Schema;\n-import org.jooq.impl.CatalogImpl;\n-\n-import javax.annotation.Generated;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n+import javax.annotation.processing.Generated;\n+\n+import org.jooq.Schema;\n+import org.jooq.impl.CatalogImpl;\n+\n \n /**\n  * This class is generated by jOOQ."
  },
  {
    "sha": "c02a591287315416de75e5e5a0b99e41c4c64938",
    "filename": "src/brs/schema/Indexes.java",
    "status": "modified",
    "additions": 27,
    "deletions": 2,
    "changes": 29,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/Indexes.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/Indexes.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/Indexes.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,12 +4,37 @@\n package brs.schema;\n \n \n-import brs.schema.tables.*;\n+import javax.annotation.processing.Generated;\n+\n import org.jooq.Index;\n import org.jooq.OrderField;\n import org.jooq.impl.Internal;\n \n-import javax.annotation.Generated;\n+import brs.schema.tables.Account;\n+import brs.schema.tables.AccountAsset;\n+import brs.schema.tables.Alias;\n+import brs.schema.tables.AliasOffer;\n+import brs.schema.tables.AskOrder;\n+import brs.schema.tables.Asset;\n+import brs.schema.tables.AssetTransfer;\n+import brs.schema.tables.At;\n+import brs.schema.tables.AtState;\n+import brs.schema.tables.BidOrder;\n+import brs.schema.tables.Block;\n+import brs.schema.tables.Escrow;\n+import brs.schema.tables.EscrowDecision;\n+import brs.schema.tables.FlywaySchemaHistory;\n+import brs.schema.tables.Goods;\n+import brs.schema.tables.IndirectIncoming;\n+import brs.schema.tables.Peer;\n+import brs.schema.tables.Purchase;\n+import brs.schema.tables.PurchaseFeedback;\n+import brs.schema.tables.PurchasePublicFeedback;\n+import brs.schema.tables.RewardRecipAssign;\n+import brs.schema.tables.Subscription;\n+import brs.schema.tables.Trade;\n+import brs.schema.tables.Transaction;\n+import brs.schema.tables.UnconfirmedTransaction;\n \n \n /**"
  },
  {
    "sha": "53561c656919bb3adf5c3466fe952d5b69f968ae",
    "filename": "src/brs/schema/Keys.java",
    "status": "modified",
    "additions": 52,
    "deletions": 3,
    "changes": 55,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/Keys.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/Keys.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/Keys.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,14 +4,63 @@\n package brs.schema;\n \n \n-import brs.schema.tables.*;\n-import brs.schema.tables.records.*;\n+import javax.annotation.processing.Generated;\n+\n import org.jooq.ForeignKey;\n import org.jooq.Identity;\n import org.jooq.UniqueKey;\n import org.jooq.impl.Internal;\n \n-import javax.annotation.Generated;\n+import brs.schema.tables.Account;\n+import brs.schema.tables.AccountAsset;\n+import brs.schema.tables.Alias;\n+import brs.schema.tables.AliasOffer;\n+import brs.schema.tables.AskOrder;\n+import brs.schema.tables.Asset;\n+import brs.schema.tables.AssetTransfer;\n+import brs.schema.tables.At;\n+import brs.schema.tables.AtState;\n+import brs.schema.tables.BidOrder;\n+import brs.schema.tables.Block;\n+import brs.schema.tables.Escrow;\n+import brs.schema.tables.EscrowDecision;\n+import brs.schema.tables.FlywaySchemaHistory;\n+import brs.schema.tables.Goods;\n+import brs.schema.tables.IndirectIncoming;\n+import brs.schema.tables.Peer;\n+import brs.schema.tables.Purchase;\n+import brs.schema.tables.PurchaseFeedback;\n+import brs.schema.tables.PurchasePublicFeedback;\n+import brs.schema.tables.RewardRecipAssign;\n+import brs.schema.tables.Subscription;\n+import brs.schema.tables.Trade;\n+import brs.schema.tables.Transaction;\n+import brs.schema.tables.UnconfirmedTransaction;\n+import brs.schema.tables.records.AccountAssetRecord;\n+import brs.schema.tables.records.AccountRecord;\n+import brs.schema.tables.records.AliasOfferRecord;\n+import brs.schema.tables.records.AliasRecord;\n+import brs.schema.tables.records.AskOrderRecord;\n+import brs.schema.tables.records.AssetRecord;\n+import brs.schema.tables.records.AssetTransferRecord;\n+import brs.schema.tables.records.AtRecord;\n+import brs.schema.tables.records.AtStateRecord;\n+import brs.schema.tables.records.BidOrderRecord;\n+import brs.schema.tables.records.BlockRecord;\n+import brs.schema.tables.records.EscrowDecisionRecord;\n+import brs.schema.tables.records.EscrowRecord;\n+import brs.schema.tables.records.FlywaySchemaHistoryRecord;\n+import brs.schema.tables.records.GoodsRecord;\n+import brs.schema.tables.records.IndirectIncomingRecord;\n+import brs.schema.tables.records.PeerRecord;\n+import brs.schema.tables.records.PurchaseFeedbackRecord;\n+import brs.schema.tables.records.PurchasePublicFeedbackRecord;\n+import brs.schema.tables.records.PurchaseRecord;\n+import brs.schema.tables.records.RewardRecipAssignRecord;\n+import brs.schema.tables.records.SubscriptionRecord;\n+import brs.schema.tables.records.TradeRecord;\n+import brs.schema.tables.records.TransactionRecord;\n+import brs.schema.tables.records.UnconfirmedTransactionRecord;\n \n \n /**"
  },
  {
    "sha": "ab828cb6260a6457cf288f778bd185bcab4b2154",
    "filename": "src/brs/schema/Tables.java",
    "status": "modified",
    "additions": 27,
    "deletions": 3,
    "changes": 30,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/Tables.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/Tables.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/Tables.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,9 +4,33 @@\n package brs.schema;\n \n \n-import brs.schema.tables.*;\n-\n-import javax.annotation.Generated;\n+import javax.annotation.processing.Generated;\n+\n+import brs.schema.tables.Account;\n+import brs.schema.tables.AccountAsset;\n+import brs.schema.tables.Alias;\n+import brs.schema.tables.AliasOffer;\n+import brs.schema.tables.AskOrder;\n+import brs.schema.tables.Asset;\n+import brs.schema.tables.AssetTransfer;\n+import brs.schema.tables.At;\n+import brs.schema.tables.AtState;\n+import brs.schema.tables.BidOrder;\n+import brs.schema.tables.Block;\n+import brs.schema.tables.Escrow;\n+import brs.schema.tables.EscrowDecision;\n+import brs.schema.tables.FlywaySchemaHistory;\n+import brs.schema.tables.Goods;\n+import brs.schema.tables.IndirectIncoming;\n+import brs.schema.tables.Peer;\n+import brs.schema.tables.Purchase;\n+import brs.schema.tables.PurchaseFeedback;\n+import brs.schema.tables.PurchasePublicFeedback;\n+import brs.schema.tables.RewardRecipAssign;\n+import brs.schema.tables.Subscription;\n+import brs.schema.tables.Trade;\n+import brs.schema.tables.Transaction;\n+import brs.schema.tables.UnconfirmedTransaction;\n \n \n /**"
  },
  {
    "sha": "8993f5e59f0568aa3e03fe357150c49d3208295b",
    "filename": "src/brs/schema/tables/Account.java",
    "status": "modified",
    "additions": 18,
    "deletions": 7,
    "changes": 25,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/Account.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/Account.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/tables/Account.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,17 +4,28 @@\n package brs.schema.tables;\n \n \n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.annotation.processing.Generated;\n+\n+import org.jooq.Field;\n+import org.jooq.ForeignKey;\n+import org.jooq.Identity;\n+import org.jooq.Index;\n+import org.jooq.Name;\n+import org.jooq.Record;\n+import org.jooq.Schema;\n+import org.jooq.Table;\n+import org.jooq.TableField;\n+import org.jooq.UniqueKey;\n+import org.jooq.impl.DSL;\n+import org.jooq.impl.TableImpl;\n+\n import brs.schema.Db;\n import brs.schema.Indexes;\n import brs.schema.Keys;\n import brs.schema.tables.records.AccountRecord;\n-import org.jooq.*;\n-import org.jooq.impl.DSL;\n-import org.jooq.impl.TableImpl;\n-\n-import javax.annotation.Generated;\n-import java.util.Arrays;\n-import java.util.List;\n \n \n /**"
  },
  {
    "sha": "f01f8d213f34461800f1ccd9a1909ff08fde33b7",
    "filename": "src/brs/schema/tables/AccountAsset.java",
    "status": "modified",
    "additions": 18,
    "deletions": 7,
    "changes": 25,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/AccountAsset.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/AccountAsset.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/tables/AccountAsset.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,17 +4,28 @@\n package brs.schema.tables;\n \n \n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.annotation.processing.Generated;\n+\n+import org.jooq.Field;\n+import org.jooq.ForeignKey;\n+import org.jooq.Identity;\n+import org.jooq.Index;\n+import org.jooq.Name;\n+import org.jooq.Record;\n+import org.jooq.Schema;\n+import org.jooq.Table;\n+import org.jooq.TableField;\n+import org.jooq.UniqueKey;\n+import org.jooq.impl.DSL;\n+import org.jooq.impl.TableImpl;\n+\n import brs.schema.Db;\n import brs.schema.Indexes;\n import brs.schema.Keys;\n import brs.schema.tables.records.AccountAssetRecord;\n-import org.jooq.*;\n-import org.jooq.impl.DSL;\n-import org.jooq.impl.TableImpl;\n-\n-import javax.annotation.Generated;\n-import java.util.Arrays;\n-import java.util.List;\n \n \n /**"
  },
  {
    "sha": "044a15bf22c106d4f050a8ee20651310892bcb44",
    "filename": "src/brs/schema/tables/Alias.java",
    "status": "modified",
    "additions": 18,
    "deletions": 7,
    "changes": 25,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/Alias.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/Alias.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/tables/Alias.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,17 +4,28 @@\n package brs.schema.tables;\n \n \n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.annotation.processing.Generated;\n+\n+import org.jooq.Field;\n+import org.jooq.ForeignKey;\n+import org.jooq.Identity;\n+import org.jooq.Index;\n+import org.jooq.Name;\n+import org.jooq.Record;\n+import org.jooq.Schema;\n+import org.jooq.Table;\n+import org.jooq.TableField;\n+import org.jooq.UniqueKey;\n+import org.jooq.impl.DSL;\n+import org.jooq.impl.TableImpl;\n+\n import brs.schema.Db;\n import brs.schema.Indexes;\n import brs.schema.Keys;\n import brs.schema.tables.records.AliasRecord;\n-import org.jooq.*;\n-import org.jooq.impl.DSL;\n-import org.jooq.impl.TableImpl;\n-\n-import javax.annotation.Generated;\n-import java.util.Arrays;\n-import java.util.List;\n \n \n /**"
  },
  {
    "sha": "15bb50341a20c7431a943a688db0f9f8f67fdf6b",
    "filename": "src/brs/schema/tables/AliasOffer.java",
    "status": "modified",
    "additions": 18,
    "deletions": 7,
    "changes": 25,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/AliasOffer.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/AliasOffer.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/tables/AliasOffer.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,17 +4,28 @@\n package brs.schema.tables;\n \n \n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.annotation.processing.Generated;\n+\n+import org.jooq.Field;\n+import org.jooq.ForeignKey;\n+import org.jooq.Identity;\n+import org.jooq.Index;\n+import org.jooq.Name;\n+import org.jooq.Record;\n+import org.jooq.Schema;\n+import org.jooq.Table;\n+import org.jooq.TableField;\n+import org.jooq.UniqueKey;\n+import org.jooq.impl.DSL;\n+import org.jooq.impl.TableImpl;\n+\n import brs.schema.Db;\n import brs.schema.Indexes;\n import brs.schema.Keys;\n import brs.schema.tables.records.AliasOfferRecord;\n-import org.jooq.*;\n-import org.jooq.impl.DSL;\n-import org.jooq.impl.TableImpl;\n-\n-import javax.annotation.Generated;\n-import java.util.Arrays;\n-import java.util.List;\n \n \n /**"
  },
  {
    "sha": "49352b21a4ae7a2fa101e968963d4e1521bbef02",
    "filename": "src/brs/schema/tables/AskOrder.java",
    "status": "modified",
    "additions": 18,
    "deletions": 7,
    "changes": 25,
    "blob_url": "https://github.com/burst-apps-team/burstcoin/blob/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/AskOrder.java",
    "raw_url": "https://github.com/burst-apps-team/burstcoin/raw/7e1b0b45498c8a0505164a5be99828b7c3a75e18/src/brs/schema/tables/AskOrder.java",
    "contents_url": "https://api.github.com/repos/burst-apps-team/burstcoin/contents/src/brs/schema/tables/AskOrder.java?ref=7e1b0b45498c8a0505164a5be99828b7c3a75e18",
    "patch": "@@ -4,17 +4,28 @@\n package brs.schema.tables;\n \n \n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.annotation.processing.Generated;\n+\n+import org.jooq.Field;\n+import org.jooq.ForeignKey;\n+import org.jooq.Identity;\n+import org.jooq.Index;\n+import org.jooq.Name;\n+import org.jooq.Record;\n+import org.jooq.Schema;\n+import org.jooq.Table;\n+import org.jooq.TableField;\n+import org.jooq.UniqueKey;\n+import org.jooq.impl.DSL;\n+import org.jooq.impl.TableImpl;\n+\n import brs.schema.Db;\n import brs.schema.Indexes;\n import brs.schema.Keys;\n import brs.schema.tables.records.AskOrderRecord;\n-import org.jooq.*;\n-import org.jooq.impl.DSL;\n-import org.jooq.impl.TableImpl;\n-\n-import javax.annotation.Generated;\n-import java.util.Arrays;\n-import java.util.List;\n \n \n /**"
  }
]
