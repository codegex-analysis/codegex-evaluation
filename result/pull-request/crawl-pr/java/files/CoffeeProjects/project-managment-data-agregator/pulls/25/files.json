[
  {
    "sha": "3b448beffc13b7388671af66efef2bbca52eddde",
    "filename": "README.md",
    "status": "modified",
    "additions": 11,
    "deletions": 5,
    "changes": 16,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/README.md",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/README.md",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/README.md?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -5,11 +5,17 @@\n - Master branch ![build status of master branch](https://travis-ci.org/CoffeeProjects/project-managment-data-agregator.svg?branch=master)\n \n ## Build & run\n-- This project is compiled & run with classic Maven commands :\n-    - `mvn clean install`\n-    - `mvn spring-boot:run`\n-        - DEV profile `-Drun.profiles=\"dev\"`\n-        - Debug mode `-Dspring-boot.run.jvmArguments=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\"`\n+This project is compiled & run with classic Maven commands :\n+- `mvn clean install`\n+- `mvn spring-boot:run`\n+    - DEV profile `-Drun.profiles=\"dev\"`\n+    - Debug mode `-Dspring-boot.run.jvmArguments=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\"`\n+    \n+During the build, you can add the DB connector library to include in the package, via the following profiles :\n+- postgresql (default)\n+- oracle\n+\n+This repo includes a file allowing to mount the postgreSQL database via docker, in resources (docker-compose.yml)\n \n ## Data model update\n Each addition, modification or deletion of an entity must be indicated in a new script in this directory :"
  },
  {
    "sha": "3f038bd4cea24bac19ea5e46377efbb7dc998f81",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/pom.xml",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/pom.xml",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/pom.xml?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -6,7 +6,7 @@\n \t<parent>\n \t\t<groupId>org.springframework.boot</groupId>\n \t\t<artifactId>spring-boot-starter-parent</artifactId>\n-\t\t<version>2.3.8.RELEASE</version>\n+\t\t<version>2.4.2</version>\n \t\t<relativePath/>\n \t</parent>\n \t<groupId>org.coffeeprojects</groupId>\n@@ -18,7 +18,7 @@\n \t<properties>\n \t\t<start-class>org.coffeeprojects.pmda.PmdaApplication</start-class>\n \t\t<java.version>11</java.version>\n-\t\t<spring-cloud.version>Hoxton.SR9</spring-cloud.version>\n+\t\t<spring-cloud.version>2020.0.1</spring-cloud.version>\n \t\t<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>\n \t\t<org.mapstruct.version>1.4.2.Final</org.mapstruct.version>\n \t\t<commons-lang3.version>3.11</commons-lang3.version>"
  },
  {
    "sha": "79da91ca08eba27d378fd6687141439a1d4da2af",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/changelog/ChangelogEntity.java",
    "status": "modified",
    "additions": 16,
    "deletions": 10,
    "changes": 26,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/changelog/ChangelogEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/changelog/ChangelogEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/changelog/ChangelogEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -1,7 +1,6 @@\n package org.coffeeprojects.pmda.feature.changelog;\n \n import org.coffeeprojects.pmda.entity.BaseEntity;\n-import org.coffeeprojects.pmda.feature.component.ComponentEntity;\n import org.coffeeprojects.pmda.feature.user.UserEntity;\n \n import javax.persistence.*;\n@@ -11,7 +10,7 @@\n \n @Entity\n @Table(name = \"changelog\")\n-public class ChangelogEntity extends BaseEntity<ComponentEntity> implements Serializable {\n+public class ChangelogEntity extends BaseEntity<ChangelogEntity> implements Serializable {\n \n     @OneToOne(cascade = {CascadeType.MERGE, CascadeType.PERSIST})\n     private UserEntity author;\n@@ -35,56 +34,63 @@ public UserEntity getAuthor() {\n         return author;\n     }\n \n-    public void setAuthor(UserEntity author) {\n+    public ChangelogEntity setAuthor(UserEntity author) {\n         this.author = author;\n+        return this;\n     }\n \n     public String getField() {\n         return field;\n     }\n \n-    public void setField(String field) {\n+    public ChangelogEntity setField(String field) {\n         this.field = field;\n+        return this;\n     }\n \n     public String getFieldType() {\n         return fieldType;\n     }\n \n-    public void setFieldType(String fieldType) {\n+    public ChangelogEntity setFieldType(String fieldType) {\n         this.fieldType = fieldType;\n+        return this;\n     }\n \n     public String getFieldId() {\n         return fieldId;\n     }\n \n-    public void setFieldId(String fieldId) {\n+    public ChangelogEntity setFieldId(String fieldId) {\n         this.fieldId = fieldId;\n+        return this;\n     }\n \n     public String getFromString() {\n         return fromString;\n     }\n \n-    public void setFromString(String fromString) {\n+    public ChangelogEntity setFromString(String fromString) {\n         this.fromString = fromString;\n+        return this;\n     }\n \n     public String getToString() {\n         return toString;\n     }\n \n-    public void setToString(String toString) {\n+    public ChangelogEntity setToString(String toString) {\n         this.toString = toString;\n+        return this;\n     }\n \n     public Date getCreated() {\n         return created;\n     }\n \n-    public void setCreated(Date created) {\n+    public ChangelogEntity setCreated(Date created) {\n         this.created = created;\n+        return this;\n     }\n \n     @Override\n@@ -93,7 +99,7 @@ public boolean equals(Object o) {\n         if (o == null || getClass() != o.getClass()) return false;\n         if (!super.equals(o)) return false;\n         ChangelogEntity that = (ChangelogEntity) o;\n-        return Objects.equals(author, that.author) && Objects.equals(field, that.field) && Objects.equals(fieldType, that.fieldType) && Objects.equals(fieldId, that.fieldId) && Objects.equals(fromString, that.fromString) && Objects.equals(toString, that.toString) && Objects.equals(created, that.created);\n+        return Objects.equals(id, that.id) && Objects.equals(author, that.author) && Objects.equals(field, that.field) && Objects.equals(fieldType, that.fieldType) && Objects.equals(fieldId, that.fieldId) && Objects.equals(fromString, that.fromString) && Objects.equals(toString, that.toString) && Objects.equals(created, that.created);\n     }\n \n     @Override"
  },
  {
    "sha": "3729d77558577f15406e0e3d3d56d94f148a4722",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/changelog/ChangelogMapper.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/changelog/ChangelogMapper.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/changelog/ChangelogMapper.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/changelog/ChangelogMapper.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -0,0 +1,50 @@\n+package org.coffeeprojects.pmda.feature.changelog;\n+\n+import org.coffeeprojects.pmda.entity.CompositeIdBaseEntity;\n+import org.coffeeprojects.pmda.feature.changelog.jirabean.ChangelogJiraBean;\n+import org.coffeeprojects.pmda.feature.changelog.jirabean.ItemHistoryJiraBean;\n+import org.coffeeprojects.pmda.feature.user.UserEntity;\n+import org.coffeeprojects.pmda.feature.user.UserMapper;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.factory.Mappers;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+\n+@Mapper(componentModel = \"spring\", uses = {UserMapper.class})\n+public interface ChangelogMapper {\n+\n+    String ID_DATE_FORMAT = \"yyyyMMddHHmmss\";\n+    UserMapper USER_MAPPER = Mappers.getMapper(UserMapper.class);\n+\n+    ChangelogEntity toEntity(ChangelogJiraBean changelogJiraBean);\n+    ChangelogEntity toEntity(ItemHistoryJiraBean itemHistoryJiraBean);\n+\n+    default Set<ChangelogEntity> toEntities(ChangelogJiraBean changelogJiraBean) {\n+        return Optional.ofNullable(changelogJiraBean)\n+                .stream()\n+                .flatMap(c -> c.getHistories().stream())\n+                .flatMap(h -> {\n+                        AtomicInteger itemCount = new AtomicInteger();\n+                        UserEntity authorEntity = Optional.ofNullable(h.getAuthor()).map(USER_MAPPER::toEntity)\n+                                .map(a -> a.setId(new CompositeIdBaseEntity().setClientId(h.getAuthor().getAccountId()))).orElse(null);\n+\n+                        return h.getItems().stream().map(i -> {\n+                            ChangelogEntity changelogEntity = toEntity(i);\n+                            changelogEntity.setId(generateChangelogId(h.getId(), h.getCreated(), itemCount.getAndIncrement()));\n+                            changelogEntity.setAuthor(authorEntity);\n+                            changelogEntity.setCreated(h.getCreated());\n+                            return changelogEntity;\n+                        });\n+                }).collect(Collectors.toSet());\n+    }\n+\n+    private CompositeIdBaseEntity generateChangelogId(String id, Date date, int itemCount) {\n+        SimpleDateFormat formatter = new SimpleDateFormat(ID_DATE_FORMAT);\n+        return new CompositeIdBaseEntity().setClientId(id + \"_\" + formatter.format(date) + \"_\" + itemCount);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "386227eabfbe6f999334983596efd905b1e90071",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/changelog/jirabean/HistoryJiraBean.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/changelog/jirabean/HistoryJiraBean.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/changelog/jirabean/HistoryJiraBean.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/changelog/jirabean/HistoryJiraBean.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -19,32 +19,36 @@ public String getId() {\n         return id;\n     }\n \n-    public void setId(String id) {\n+    public HistoryJiraBean setId(String id) {\n         this.id = id;\n+        return this;\n     }\n \n     public Date getCreated() {\n         return created;\n     }\n \n-    public void setCreated(Date created) {\n+    public HistoryJiraBean setCreated(Date created) {\n         this.created = created;\n+        return this;\n     }\n \n     public UserJiraBean getAuthor() {\n         return author;\n     }\n \n-    public void setAuthor(UserJiraBean author) {\n+    public HistoryJiraBean setAuthor(UserJiraBean author) {\n         this.author = author;\n+        return this;\n     }\n \n     public Set<ItemHistoryJiraBean> getItems() {\n         return items;\n     }\n \n-    public void setItems(Set<ItemHistoryJiraBean> items) {\n+    public HistoryJiraBean setItems(Set<ItemHistoryJiraBean> items) {\n         this.items = items;\n+        return this;\n     }\n \n     @Override"
  },
  {
    "sha": "0846d8b1001c9f5bf3adbb3c072c8984816e0d21",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/changelog/jirabean/ItemHistoryJiraBean.java",
    "status": "modified",
    "additions": 14,
    "deletions": 7,
    "changes": 21,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/changelog/jirabean/ItemHistoryJiraBean.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/changelog/jirabean/ItemHistoryJiraBean.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/changelog/jirabean/ItemHistoryJiraBean.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -23,56 +23,63 @@ public String getField() {\n         return field;\n     }\n \n-    public void setField(String field) {\n+    public ItemHistoryJiraBean setField(String field) {\n         this.field = field;\n+        return this;\n     }\n \n     public String getFieldType() {\n         return fieldType;\n     }\n \n-    public void setFieldType(String fieldType) {\n+    public ItemHistoryJiraBean setFieldType(String fieldType) {\n         this.fieldType = fieldType;\n+        return this;\n     }\n \n     public String getFieldId() {\n         return fieldId;\n     }\n \n-    public void setFieldId(String fieldId) {\n+    public ItemHistoryJiraBean setFieldId(String fieldId) {\n         this.fieldId = fieldId;\n+        return this;\n     }\n \n     public String getFrom() {\n         return from;\n     }\n \n-    public void setFrom(String from) {\n+    public ItemHistoryJiraBean setFrom(String from) {\n         this.from = from;\n+        return this;\n     }\n \n     public String getFromString() {\n         return fromString;\n     }\n \n-    public void setFromString(String fromString) {\n+    public ItemHistoryJiraBean setFromString(String fromString) {\n         this.fromString = fromString;\n+        return this;\n     }\n \n     public String getTo() {\n         return to;\n     }\n \n-    public void setTo(String to) {\n+    public ItemHistoryJiraBean setTo(String to) {\n         this.to = to;\n+        return this;\n     }\n \n     public String getToString() {\n         return toString;\n     }\n \n-    public void setToString(String toString) {\n+    public ItemHistoryJiraBean setToString(String toString) {\n         this.toString = toString;\n+        return this;\n     }\n \n     @Override"
  },
  {
    "sha": "27fae3e830029dd6a12e441e9b401b5de0242350",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/component/ComponentEntity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/component/ComponentEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/component/ComponentEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/component/ComponentEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -39,8 +39,8 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"ComponentEntity{\" +\n-                \"name='\" + name + '\\'' +\n-                \", id=\" + id +\n+                \"id=\" + super.toString() +\n+                \", name='\" + name + '\\'' +\n                 \", createdAt=\" + createdAt +\n                 \", updatedAt=\" + updatedAt +\n                 '}';"
  },
  {
    "sha": "a917def18b0c725a119b2e014d633b4749a0f614",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/issue/IssueEntity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -329,7 +329,8 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"IssueEntity{\" +\n-                \"key='\" + key + '\\'' +\n+                \"id=\" + super.toString() +\n+                \", key='\" + key + '\\'' +\n                 \", assignee=\" + assignee +\n                 \", reporter=\" + reporter +\n                 \", creator=\" + creator +"
  },
  {
    "sha": "a99f953add33bdaec8c44e7604cc3b8e4af703d1",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/issue/IssueMapper.java",
    "status": "modified",
    "additions": 5,
    "deletions": 41,
    "changes": 46,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueMapper.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueMapper.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueMapper.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -1,7 +1,7 @@\n package org.coffeeprojects.pmda.feature.issue;\n \n-import org.coffeeprojects.pmda.entity.CompositeIdBaseEntity;\n import org.coffeeprojects.pmda.feature.changelog.ChangelogEntity;\n+import org.coffeeprojects.pmda.feature.changelog.ChangelogMapper;\n import org.coffeeprojects.pmda.feature.changelog.jirabean.ChangelogJiraBean;\n import org.coffeeprojects.pmda.feature.component.ComponentMapper;\n import org.coffeeprojects.pmda.feature.issue.jirabean.IssueJiraBean;\n@@ -11,25 +11,23 @@\n import org.coffeeprojects.pmda.feature.resolution.ResolutionMapper;\n import org.coffeeprojects.pmda.feature.sprint.SprintMapper;\n import org.coffeeprojects.pmda.feature.status.StatusMapper;\n-import org.coffeeprojects.pmda.feature.user.UserEntity;\n-import org.coffeeprojects.pmda.feature.user.UserJiraBean;\n import org.coffeeprojects.pmda.feature.user.UserMapper;\n import org.coffeeprojects.pmda.feature.version.VersionMapper;\n import org.mapstruct.InjectionStrategy;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.mapstruct.Named;\n+import org.mapstruct.factory.Mappers;\n \n-import java.text.SimpleDateFormat;\n-import java.util.HashSet;\n import java.util.Set;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n @Mapper(componentModel = \"spring\", uses = {UserMapper.class, StatusMapper.class, ResolutionMapper.class,\n         PriorityMapper.class, IssueTypeMapper.class, ProjectMapper.class, VersionMapper.class,\n         ComponentMapper.class, SprintMapper.class}, injectionStrategy = InjectionStrategy.CONSTRUCTOR)\n public interface IssueMapper {\n \n+    ChangelogMapper CHANGELOG_MAPPER = Mappers.getMapper(ChangelogMapper.class);\n+\n     @Mapping(target = \"id.clientId\", source = \"id\")\n     @Mapping(target = \"assignee\", source = \"fields.assignee\")\n     @Mapping(target = \"reporter\", source = \"fields.reporter\")\n@@ -54,40 +52,6 @@\n \n     @Named(\"changelog\")\n     default Set<ChangelogEntity> changelog(ChangelogJiraBean changelogJiraBean) {\n-        if (changelogJiraBean != null) {\n-            Set<ChangelogEntity> changelogEntities = new HashSet<>();\n-            if (changelogJiraBean.getHistories() != null) {\n-                changelogJiraBean.getHistories().stream().forEach(h -> {\n-                    AtomicInteger count = new AtomicInteger();\n-                    UserJiraBean authorJiraBean = h.getAuthor();\n-                    if (authorJiraBean != null && h.getItems() != null) {\n-                        UserEntity authorEntity = new UserEntity();\n-                        authorEntity.setId(new CompositeIdBaseEntity().setClientId(authorJiraBean.getAccountId()));\n-                        authorEntity.setEmailAddress(authorJiraBean.getEmailAddress());\n-                        authorEntity.setDisplayName(authorJiraBean.getDisplayName());\n-                        authorEntity.setTimeZone(authorJiraBean.getTimeZone());\n-                        authorEntity.setActive(authorJiraBean.isActive());\n-                        h.getItems().stream().forEach(i -> {\n-                            if (i.getField() != null && i.getFieldType() != null) {\n-                                SimpleDateFormat formatter = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n-                                ChangelogEntity changelogEntity = new ChangelogEntity();\n-                                changelogEntity.setId(new CompositeIdBaseEntity().setClientId(h.getId() + \"_\" + formatter.format(h.getCreated()) + \"_\" + count.getAndIncrement()));\n-                                changelogEntity.setAuthor(authorEntity);\n-                                changelogEntity.setField(i.getField());\n-                                changelogEntity.setFieldType(i.getFieldType());\n-                                changelogEntity.setFieldId(i.getFieldId());\n-                                changelogEntity.setFromString(i.getFromString());\n-                                changelogEntity.setToString(i.getToString());\n-                                changelogEntity.setCreated(h.getCreated());\n-                                changelogEntities.add(changelogEntity);\n-                            }\n-                        });\n-                    }\n-                });\n-            }\n-            return changelogEntities;\n-        } else {\n-            return null;\n-        }\n+        return CHANGELOG_MAPPER.toEntities(changelogJiraBean);\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "05029934692988f10110f7cffab187948afddd90",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/issue/IssueUtils.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueUtils.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueUtils.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/issue/IssueUtils.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -17,7 +17,7 @@ public static void removeDuplicateUsers(List<IssueEntity> issueEntities) {\n         Optional.ofNullable(issueEntities)\n                 .orElse(Collections.emptyList())\n                 .forEach(i -> {\n-                    List<UserEntity> existingUsers = new ArrayList<>();\n+                    Set<UserEntity> existingUsers = new HashSet<>();\n                     existingUsers.add(i.getProject().getAdministrator());\n \n                     i.setAssignee(getNonDuplicateUser(existingUsers, i.getAssignee()));\n@@ -26,13 +26,11 @@ public static void removeDuplicateUsers(List<IssueEntity> issueEntities) {\n \n                     Optional.ofNullable(i.getChangelog())\n                             .orElse(Collections.emptySet())\n-                            .forEach(c -> {\n-                                c.setAuthor(getNonDuplicateUser(existingUsers, c.getAuthor()));\n-                            });\n+                            .forEach(c -> c.setAuthor(getNonDuplicateUser(existingUsers, c.getAuthor())));\n         });\n     }\n \n-    private static UserEntity getNonDuplicateUser(List<UserEntity> existingUsers, UserEntity user) {\n+    private static UserEntity getNonDuplicateUser(Set<UserEntity> existingUsers, UserEntity user) {\n         if (user == null) {\n             return null;\n         }"
  },
  {
    "sha": "2863df855c895d3723524ea983afa3f9c703713a",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/issue/service/impl/JiraIssueService.java",
    "status": "modified",
    "additions": 50,
    "deletions": 43,
    "changes": 93,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/issue/service/impl/JiraIssueService.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/issue/service/impl/JiraIssueService.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/issue/service/impl/JiraIssueService.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -4,6 +4,7 @@\n import org.coffeeprojects.pmda.exception.ExceptionConstant;\n import org.coffeeprojects.pmda.exception.InvalidDataException;\n import org.coffeeprojects.pmda.feature.issue.*;\n+import org.coffeeprojects.pmda.feature.issue.jirabean.FieldsJiraBean;\n import org.coffeeprojects.pmda.feature.issue.jirabean.IssueJiraBean;\n import org.coffeeprojects.pmda.feature.issue.service.IssueService;\n import org.coffeeprojects.pmda.feature.project.ProjectCustomField;\n@@ -99,52 +100,55 @@ public void deleteMissingIssues(ProjectEntity projectEntity) {\n \n     private void fillSprints(IssueEntity issueEntity, ProjectEntity projectEntity, IssueJiraBean issueJiraBean) {\n         ProjectCustomField projectCustomField = getProjectCustomField(projectEntity, SPRINTS_FIELD);\n-        List<LinkedHashMap> sprints = (List<LinkedHashMap>) getIssueCustomValue(issueJiraBean, projectCustomField);\n+        List<LinkedHashMap<Object, Object>> sprints = (List<LinkedHashMap<Object, Object>>) getIssueCustomValue(issueJiraBean, projectCustomField);\n         SprintUtils.toEntity(sprints, issueEntity);\n     }\n \n     private void fillIssueCustomFields(IssueEntity issueEntity, ProjectEntity projectEntity, IssueJiraBean issueJiraBean) {\n         Set<IssueCustomField> customFields = new HashSet<>();\n \n-        if (projectEntity != null && projectEntity.getProjectCustomFields() != null) {\n-            projectEntity.getProjectCustomFields().stream()\n-                    .filter(projectCustomField -> !SPRINTS_FIELD.equalsIgnoreCase(projectCustomField.getLocalName()))\n-                    .forEach(projectCustomField -> {\n-                        Object issueCustomFieldValue = getIssueCustomValue(issueJiraBean, projectCustomField);\n-\n-                        if (issueCustomFieldValue != null) {\n-                            if (issueCustomFieldValue instanceof ArrayList) {\n-                                fillListOfCustomField(issueEntity, projectEntity, customFields, projectCustomField, (ArrayList) issueCustomFieldValue);\n-                            } else if (issueCustomFieldValue instanceof HashMap) {\n-                                fillCustomField(issueEntity, projectEntity, customFields, projectCustomField, (HashMap) issueCustomFieldValue);\n-                            } else {\n-                                fillDefaultCustomField(issueEntity, projectEntity, customFields, projectCustomField, issueCustomFieldValue);\n-                            }\n+        Optional.ofNullable(projectEntity)\n+                .map(ProjectEntity::getProjectCustomFields)\n+                .orElse(new HashSet<>())\n+                .stream()\n+                .filter(projectCustomField -> !SPRINTS_FIELD.equalsIgnoreCase(projectCustomField.getLocalName()))\n+                .forEach(projectCustomField -> {\n+                    Object issueCustomFieldValue = getIssueCustomValue(issueJiraBean, projectCustomField);\n+\n+                    if (issueCustomFieldValue != null) {\n+                        if (issueCustomFieldValue instanceof ArrayList) {\n+                            fillListOfCustomField(issueEntity, projectEntity, customFields, projectCustomField, (ArrayList) issueCustomFieldValue);\n+                        } else if (issueCustomFieldValue instanceof HashMap) {\n+                            fillCustomField(issueEntity, projectEntity, customFields, projectCustomField, (HashMap) issueCustomFieldValue);\n+                        } else {\n+                            fillDefaultCustomField(issueEntity, projectEntity, customFields, projectCustomField, issueCustomFieldValue);\n                         }\n-                    });\n-\n-            issueEntity.setIssueCustomFields(customFields);\n-        }\n+                    }\n+                    issueEntity.setIssueCustomFields(customFields);\n+                });\n     }\n \n-    private void fillListOfCustomField(IssueEntity issueEntity, ProjectEntity projectEntity, Set<IssueCustomField> customFields, ProjectCustomField projectCustomField, ArrayList issueCustomFieldValues) {\n-        issueCustomFieldValues.stream().forEach(i -> {\n+    private void fillListOfCustomField(IssueEntity issueEntity, ProjectEntity projectEntity, Set<IssueCustomField> customFields, ProjectCustomField projectCustomField, ArrayList<Object> issueCustomFieldValues) {\n+        issueCustomFieldValues.forEach(i -> {\n             if (i instanceof HashMap) {\n                 fillCustomField(issueEntity, projectEntity, customFields, projectCustomField, (HashMap) i);\n             } else {\n-                fillDefaultCustomField(issueEntity, projectEntity, customFields, projectCustomField, issueCustomFieldValues);\n+                fillDefaultCustomField(issueEntity, projectEntity, customFields, projectCustomField, i);\n             }\n         });\n     }\n \n-    private void fillCustomField(IssueEntity issueEntity, ProjectEntity projectEntity, Set<IssueCustomField> customFields, ProjectCustomField projectCustomField, HashMap issueCustomFieldValue) {\n+    private void fillCustomField(IssueEntity issueEntity, ProjectEntity projectEntity, Set<IssueCustomField> customFields, ProjectCustomField projectCustomField, HashMap<Object, Object> issueCustomFieldValue) {\n         IssueCustomField issueCustomField = new IssueCustomField();\n         issueCustomField.setId(new CompositeIdBaseEntity()\n                 .setClientId(issueEntity.getId().getClientId() + \"_\" + issueCustomFieldValue.get(ID) + \"_\" + projectCustomField.getLocalName())\n                 .setTrackerType(projectEntity.getId().getTrackerType())\n                 .setTrackerLocalId(projectEntity.getId().getTrackerLocalId()));\n \n-        issueCustomField.setValue(issueCustomFieldValue.get(VALUE).toString());\n+        issueCustomField.setValue(Optional.ofNullable(issueCustomFieldValue\n+                .get(VALUE))\n+                .map(Object::toString)\n+                .orElse(\"\"));\n         customFields.add(issueCustomField);\n     }\n \n@@ -155,30 +159,33 @@ private void fillDefaultCustomField(IssueEntity issueEntity, ProjectEntity proje\n                 .setTrackerType(projectEntity.getId().getTrackerType())\n                 .setTrackerLocalId(projectEntity.getId().getTrackerLocalId()));\n \n-        issueCustomField.setValue(issueCustomFieldValue.toString());\n+        issueCustomField.setValue(Optional.ofNullable(issueCustomFieldValue)\n+                .map(Object::toString)\n+                .orElse(\"\"));\n         customFields.add(issueCustomField);\n     }\n \n     private ProjectCustomField getProjectCustomField(ProjectEntity projectEntity, String field) {\n-        if (projectEntity != null && projectEntity.getProjectCustomFields() != null) {\n-            return projectEntity.getProjectCustomFields().stream()\n-                    .filter(p -> field.equalsIgnoreCase(p.getLocalName()))\n-                    .findFirst()\n-                    .orElse(null);\n-        }\n-        return null;\n+        return Optional.ofNullable(projectEntity)\n+                .map(ProjectEntity::getProjectCustomFields)\n+                .orElse(Collections.emptySet())\n+                .stream()\n+                .filter(p -> p.getLocalName().equalsIgnoreCase(field))\n+                .findFirst()\n+                .orElse(null);\n     }\n \n-    private Object getIssueCustomValue(IssueJiraBean issueJiraBean, ProjectCustomField projectCustomField) {\n-        if (projectCustomField != null && projectCustomField.getClientName() != null) {\n-            return issueJiraBean.getFields().getCustomFields().entrySet().stream()\n-                    .filter(customFieldEntry -> customFieldEntry.getKey().equals(projectCustomField.getClientName()))\n-                    .filter(customFieldEntry -> customFieldEntry.getValue() != null)\n-                    .map(Map.Entry::getValue)\n-                    .findFirst()\n-                    .orElse(null);\n-\n-        }\n-        return null;\n+    protected Object getIssueCustomValue(IssueJiraBean issueJiraBean, ProjectCustomField projectCustomField) {\n+        String projectCustomFieldClientName = Optional.ofNullable(projectCustomField).map(ProjectCustomField::getClientName).orElse(\"\");\n+        return Optional.ofNullable(issueJiraBean.getFields())\n+                .map(FieldsJiraBean::getCustomFields)\n+                .orElse(new HashMap<>())\n+                .entrySet()\n+                .stream()\n+                .filter(customFieldEntry -> customFieldEntry.getKey().equals(projectCustomFieldClientName))\n+                .filter(customFieldEntry -> customFieldEntry.getValue() != null)\n+                .map(Map.Entry::getValue)\n+                .findFirst()\n+                .orElse(null);\n     }\n }"
  },
  {
    "sha": "d2aa451ebc352968465299b25d4b4f0b93023ba6",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/priority/PriorityEntity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/priority/PriorityEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/priority/PriorityEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/priority/PriorityEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -38,8 +38,8 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"PriorityEntity{\" +\n-                \"name='\" + name + '\\'' +\n-                \", id=\" + id +\n+                \"id=\" + super.toString() +\n+                \", name='\" + name + '\\'' +\n                 \", createdAt=\" + createdAt +\n                 \", updatedAt=\" + updatedAt +\n                 '}';"
  },
  {
    "sha": "c7d90e73ad1d534688c223045d58fd8ad960ae1a",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/project/ProjectCustomField.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/project/ProjectCustomField.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/project/ProjectCustomField.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/project/ProjectCustomField.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -9,7 +9,7 @@\n \n @Entity\n @Table(name = \"project_custom_field\")\n-public class ProjectCustomField extends BaseEntity implements Serializable {\n+public class ProjectCustomField extends BaseEntity<ProjectCustomField> implements Serializable {\n \n     String localName;\n \n@@ -51,7 +51,8 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"ProjectCustomField{\" +\n-                \"localName='\" + localName + '\\'' +\n+                \"id=\" + super.toString() +\n+                \", localName='\" + localName + '\\'' +\n                 \", clientName='\" + clientName + '\\'' +\n                 '}';\n     }"
  },
  {
    "sha": "fa0abbfc95e6944117b4c16b75fbad763965d979",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/project/ProjectEntity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/project/ProjectEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/project/ProjectEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/project/ProjectEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -134,7 +134,8 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"ProjectEntity{\" +\n-                \"key='\" + key + '\\'' +\n+                \"id=\" + super.toString() +\n+                \", key='\" + key + '\\'' +\n                 \", name='\" + name + '\\'' +\n                 \", administrator=\" + administrator +\n                 \", lastCheck=\" + lastCheck +"
  },
  {
    "sha": "26caadd28ba392ab6c26c60e9b7e4f00d4b288f2",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/resolution/ResolutionEntity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/resolution/ResolutionEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/resolution/ResolutionEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/resolution/ResolutionEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -51,7 +51,8 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"ResolutionEntity{\" +\n-                \"name='\" + name + '\\'' +\n+                \"id=\" + super.toString() +\n+                \", name='\" + name + '\\'' +\n                 \", description='\" + description + '\\'' +\n                 \", id=\" + id +\n                 \", createdAt=\" + createdAt +"
  },
  {
    "sha": "8bf4ece9be16ac258df6a99d2fd0eb56ccd48201",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/sprint/SprintEntity.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/sprint/SprintEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/sprint/SprintEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/sprint/SprintEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -107,7 +107,7 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"SprintEntity{\" +\n-                \"id='\" + getId() + '\\'' +\n+                \"id=\" + super.toString() +\n                 \", rapidViewId='\" + rapidViewId + '\\'' +\n                 \", state='\" + state + '\\'' +\n                 \", name='\" + name + '\\'' +"
  },
  {
    "sha": "dee61dd0a890aebce2cbfba17bddbd9144d900ed",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/sprint/SprintUtils.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/sprint/SprintUtils.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/sprint/SprintUtils.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/sprint/SprintUtils.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -66,7 +66,7 @@ private static void fillSprintValues(SprintEntity sprintSorted, SprintEntity spr\n         sprint.setCompleteDate(sprintSorted.getCompleteDate());\n     }\n \n-    public static void toEntity(List<LinkedHashMap> input, IssueEntity output) {\n+    public static void toEntity(List<LinkedHashMap<Object, Object>> input, IssueEntity output) {\n         // Mapping des sprints\n         if (input != null && !input.isEmpty()) {\n             Set<SprintEntity> sprintEntities = new HashSet<>();"
  },
  {
    "sha": "47d8503b7e8132668c38ee9bd90daab76bef9cba",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/status/StatusEntity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/status/StatusEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/status/StatusEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/status/StatusEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -49,7 +49,8 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"StatusEntity{\" +\n-                \"name='\" + name + '\\'' +\n+                \"id=\" + super.toString() +\n+                \", name='\" + name + '\\'' +\n                 \", description='\" + description + '\\'' +\n                 \", id=\" + id +\n                 \", createdAt=\" + createdAt +"
  },
  {
    "sha": "41b79a13d0d7d9b97b6f097c54c5e87624fa902e",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/user/UserEntity.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/user/UserEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/user/UserEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/user/UserEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -72,7 +72,7 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"UserEntity{\" +\n-                \"id='\" + getId() + '\\'' +\n+                \"id=\" + super.toString() +\n                 \", emailAddress='\" + emailAddress + '\\'' +\n                 \", displayName='\" + displayName + '\\'' +\n                 \", timeZone='\" + timeZone + '\\'' +"
  },
  {
    "sha": "6baed027cf529e632120b4bd9497c1f0d64f8aeb",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/version/VersionEntity.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/version/VersionEntity.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/version/VersionEntity.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/version/VersionEntity.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -35,32 +35,36 @@ public String getDescription() {\n         return description;\n     }\n \n-    public void setDescription(String description) {\n+    public VersionEntity setDescription(String description) {\n         this.description = description;\n+        return this;\n     }\n \n     public Boolean getArchived() {\n         return archived;\n     }\n \n-    public void setArchived(Boolean archived) {\n+    public VersionEntity setArchived(Boolean archived) {\n         this.archived = archived;\n+        return this;\n     }\n \n     public Boolean getReleased() {\n         return released;\n     }\n \n-    public void setReleased(Boolean released) {\n+    public VersionEntity setReleased(Boolean released) {\n         this.released = released;\n+        return this;\n     }\n \n     public Instant getReleaseDate() {\n         return releaseDate;\n     }\n \n-    public void setReleaseDate(Instant releaseDate) {\n+    public VersionEntity setReleaseDate(Instant releaseDate) {\n         this.releaseDate = releaseDate;\n+        return this;\n     }\n \n \n@@ -81,7 +85,8 @@ public int hashCode() {\n     @Override\n     public String toString() {\n         return \"VersionEntity{\" +\n-                \"name='\" + name + '\\'' +\n+                \"id=\" + super.toString() +\n+                \", name='\" + name + '\\'' +\n                 \", description='\" + description + '\\'' +\n                 \", archived=\" + archived +\n                 \", released=\" + released +"
  },
  {
    "sha": "ae5e0d5897aabec24b9f8ae7e9f7ec9cffe175b3",
    "filename": "src/main/java/org/coffeeprojects/pmda/feature/version/VersionJiraBean.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/version/VersionJiraBean.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/feature/version/VersionJiraBean.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/feature/version/VersionJiraBean.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -54,16 +54,18 @@ public Boolean getReleased() {\n         return released;\n     }\n \n-    public void setReleased(Boolean released) {\n+    public VersionJiraBean setReleased(Boolean released) {\n         this.released = released;\n+        return this;\n     }\n \n     public Date getReleaseDate() {\n         return releaseDate;\n     }\n \n-    public void setReleaseDate(Date releaseDate) {\n+    public VersionJiraBean setReleaseDate(Date releaseDate) {\n         this.releaseDate = releaseDate;\n+        return this;\n     }\n \n "
  },
  {
    "sha": "123933347c966d94799604af71dbe2d9b29b7099",
    "filename": "src/main/java/org/coffeeprojects/pmda/tracker/TrackerUtils.java",
    "status": "modified",
    "additions": 39,
    "deletions": 57,
    "changes": 96,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/tracker/TrackerUtils.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/tracker/TrackerUtils.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/tracker/TrackerUtils.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -13,11 +13,14 @@\n import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeParseException;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n public class TrackerUtils {\n \n     private static final Logger log = LoggerFactory.getLogger(TrackerUtils.class);\n+    public static final String NULL = \"<null>\";\n+    public static final String DATETIME_FORMATTER = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n \n     private TrackerUtils() {\n         throw new IllegalStateException(\"Utility class\");\n@@ -33,73 +36,52 @@ public static void fillIdsFromIssueEntities(ProjectEntity projectEntity, List<Is\n \n     public static void fillIdsFromIssueEntity(ProjectEntity projectEntity, IssueEntity issueEntity) {\n         fillIds(projectEntity, issueEntity);\n-        if (issueEntity != null) {\n-            if (issueEntity.getAssignee() != null) {\n-                fillIds(projectEntity, issueEntity.getAssignee());\n-            }\n-            if (issueEntity.getCreator() != null) {\n-                fillIds(projectEntity, issueEntity.getCreator());\n-            }\n-            if (issueEntity.getReporter() != null) {\n-                fillIds(projectEntity, issueEntity.getReporter());\n-            }\n-            if (issueEntity.getStatus() != null) {\n-                fillIds(projectEntity, issueEntity.getStatus());\n-            }\n-            if (issueEntity.getResolution() != null) {\n-                fillIds(projectEntity, issueEntity.getResolution());\n-            }\n-            if (issueEntity.getPriority() != null) {\n-                fillIds(projectEntity, issueEntity.getPriority());\n-            }\n-            if (issueEntity.getIssueType() != null) {\n-                fillIds(projectEntity, issueEntity.getIssueType());\n-            }\n-            if (issueEntity.getProject() != null) {\n-                fillIds(projectEntity, issueEntity.getProject());\n-            }\n-            if (issueEntity.getFixVersions() != null) {\n-                fillIds(projectEntity, issueEntity.getFixVersions());\n-            }\n-            if (issueEntity.getComponents() != null) {\n-                fillIds(projectEntity, issueEntity.getComponents());\n-            }\n-            if (issueEntity.getSprints() != null) {\n-                fillIds(projectEntity, issueEntity.getSprints());\n-            }\n-            if (issueEntity.getChangelog() != null) {\n-                fillIds(projectEntity, issueEntity.getChangelog());\n-                issueEntity.getChangelog().stream().forEach(i -> fillIds(projectEntity, i.getAuthor()));\n-            }\n-        }\n+        Optional.ofNullable(issueEntity).ifPresent(i -> {\n+            Optional.ofNullable(i.getAssignee()).ifPresent(assignee -> fillIds(projectEntity, assignee));\n+            Optional.ofNullable(i.getCreator()).ifPresent(creator -> fillIds(projectEntity, creator));\n+            Optional.ofNullable(i.getReporter()).ifPresent(reporter -> fillIds(projectEntity, reporter));\n+            Optional.ofNullable(i.getStatus()).ifPresent(status -> fillIds(projectEntity, status));\n+            Optional.ofNullable(i.getResolution()).ifPresent(resolution -> fillIds(projectEntity, resolution));\n+            Optional.ofNullable(i.getPriority()).ifPresent(priority -> fillIds(projectEntity, priority));\n+            Optional.ofNullable(i.getIssueType()).ifPresent(issueType -> fillIds(projectEntity, issueType));\n+            Optional.ofNullable(i.getProject()).ifPresent(project -> fillIds(projectEntity, project));\n+            Optional.ofNullable(i.getFixVersions()).ifPresent(fixVersions -> fillIds(projectEntity, fixVersions));\n+            Optional.ofNullable(i.getComponents()).ifPresent(components -> fillIds(projectEntity, components));\n+            Optional.ofNullable(i.getSprints()).ifPresent(sprints -> fillIds(projectEntity, sprints));\n+            Optional.ofNullable(i.getChangelog()).ifPresent(changelog -> {\n+                fillIds(projectEntity, changelog);\n+                changelog.forEach(c -> fillIds(projectEntity, c.getAuthor()));\n+            });\n+        });\n     }\n \n     private static <T extends BaseEntity> void fillIds(ProjectEntity projectEntity, Set<T> baseEntities) {\n         baseEntities.forEach(p -> fillIds(projectEntity, p));\n     }\n \n     private static void fillIds(ProjectEntity projectEntity, BaseEntity baseEntity) {\n-        if (baseEntity != null && baseEntity.getId() != null && projectEntity != null && projectEntity.getId() != null) {\n-            if (projectEntity.getId().getTrackerLocalId() != null && projectEntity.getId().getTrackerType() != null) {\n-                baseEntity.getId().setTrackerType(projectEntity.getId().getTrackerType());\n-                baseEntity.getId().setTrackerLocalId(projectEntity.getId().getTrackerLocalId());\n-            } else\n-                log.error(\"trackerId and / or trackerType not entered for this projet : {}\", projectEntity);\n-        } else {\n-            log.error(\"baseEntity or projectEntity could not be null\");\n-        }\n+        Optional.ofNullable(baseEntity)\n+                .map(BaseEntity::getId)\n+                .ifPresentOrElse(bId -> Optional.ofNullable(projectEntity)\n+                        .map(ProjectEntity::getId)\n+                        .filter(p -> p.getTrackerLocalId() != null && p.getTrackerType() != null)\n+                        .ifPresentOrElse(pId -> {\n+                            bId.setTrackerType(pId.getTrackerType());\n+                            bId.setTrackerLocalId(pId.getTrackerLocalId());\n+                        }, () -> log.error(\"trackerId and / or trackerType not entered for this project : {}\", projectEntity)),\n+                        () -> log.error(\"BaseEntity or ProjectEntity could not be null\"));\n     }\n \n     public static Instant getInstantFromTimezone(String timezone) {\n-        if (timezone != null && !timezone.isBlank() && !\"<null>\".equals(timezone)) {\n-            try {\n-                return LocalDateTime.parse(timezone, DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"))\n-                        .atZone(ZoneId.systemDefault()).toInstant();\n-            } catch (DateTimeParseException e) {\n-                log.error(\"Unable to parse in Instant with timezone : {}\", timezone);\n-                return null;\n-            }\n+        try {\n+            return Optional.ofNullable(timezone)\n+                    .filter(s -> !s.isBlank())\n+                    .filter(s -> !NULL.equals(s))\n+                    .map(s -> LocalDateTime.parse(s, DateTimeFormatter.ofPattern(DATETIME_FORMATTER)).atZone(ZoneId.systemDefault()).toInstant())\n+                    .orElse(null);\n+        } catch (DateTimeParseException e) {\n+            log.error(\"Unable to parse in Instant with timezone : {}\", timezone);\n+            return null;\n         }\n-        return null;\n     }\n }"
  },
  {
    "sha": "71128561878810ec3a16ea85aa51775cb31bc1d6",
    "filename": "src/main/java/org/coffeeprojects/pmda/tracker/TrackersProperties.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/tracker/TrackersProperties.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/tracker/TrackersProperties.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/tracker/TrackersProperties.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -27,7 +27,6 @@ public void init() {\n \n                 if (StringUtils.isEmpty(type) || StringUtils.isEmpty(localId) || StringUtils.isEmpty(clientId) ||\n                         StringUtils.isEmpty(url) || StringUtils.isEmpty(user) || StringUtils.isEmpty(password)) {\n-                    // TODO: j aurai levé une exception avec un message : ta conf des trackers est pourries, verifie (CF : ajouté ci-dessous ?)\n                     throw new ExceptionInInitializerError(\"Unable to initialize the list of trackers. Please check your configuration file\");\n                 }\n             });"
  },
  {
    "sha": "f341dee0a7a5636ee0cf6b0239377c0b2ea89c83",
    "filename": "src/main/java/org/coffeeprojects/pmda/tracker/jira/JiraRepository.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/tracker/jira/JiraRepository.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/java/org/coffeeprojects/pmda/tracker/jira/JiraRepository.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/java/org/coffeeprojects/pmda/tracker/jira/JiraRepository.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -108,10 +108,10 @@ public ProjectJiraBean getProjectDetails(ProjectEntity projectEntity) {\n     public List<IssueJiraBean> getExistingIssues(ProjectEntity projectEntity, List<String> issuesKey, String fields) {\n         logger.info(\"Get modified issues from Jira of project: {}, with issuesKey: {}, with fields: {}\", projectEntity, issuesKey, fields);\n \n-        List<List<String>> IssuesKeyPartition = ListUtils.partition(issuesKey, MAX_ISSUES_IN_REQUEST);\n+        List<List<String>> issuesKeyPartition = ListUtils.partition(issuesKey, MAX_ISSUES_IN_REQUEST);\n         List<IssueJiraBean> issueJiraBeans = new ArrayList<>();\n \n-        IssuesKeyPartition.stream().forEach(i -> {\n+        issuesKeyPartition.forEach(i -> {\n             String jql = String.format(SEARCH_WITH_ISSUES_QUERIES, StringUtils.join(i, \"\\\",\\\"\"));\n             issueJiraBeans.addAll(getIssuesFromJira(projectEntity, jql, fields));\n         });"
  },
  {
    "sha": "b38104eae58b49a14233610cf3a603364571df5e",
    "filename": "src/main/resources/docker-compose.yml",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/resources/docker-compose.yml",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/main/resources/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/main/resources/docker-compose.yml?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -0,0 +1,12 @@\n+postgres-pmda:\n+  image: postgres:latest\n+  container_name: postgres\n+  restart: always\n+  ports:\n+    - 5432:5432\n+  environment:\n+    - POSTGRES_DB=pmda\n+    - POSTGRES_USER=postgres\n+    - POSTGRES_PASSWORD=postgres123\n+  volumes:\n+    - /Users/pmda/docker/postgres/data:/var/lib/postgresql/data\n\\ No newline at end of file"
  },
  {
    "sha": "b4ca0d59e9cab466300ed20782e6bb348a4420b0",
    "filename": "src/test/java/org/coffeeprojects/pmda/feature/component/ComponentMapperTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/component/ComponentMapperTest.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/component/ComponentMapperTest.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/test/java/org/coffeeprojects/pmda/feature/component/ComponentMapperTest.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -2,11 +2,7 @@\n \n import org.coffeeprojects.pmda.entity.CompositeIdBaseEntity;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n import org.mapstruct.factory.Mappers;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -31,4 +27,10 @@ void to_entity_should_map_component_jira_bean_to_user_entity() {\n \n         assertThat(componentEntity).isEqualToIgnoringGivenFields(expectedComponentEntity);\n     }\n+\n+    @Test\n+    void to_entity_with_version_jira_bean_null() {\n+        // Given / When / Then\n+        assertThat(componentMapper.toEntity(null)).isNull();\n+    }\n }"
  },
  {
    "sha": "820b84c353445d7a2809685faf2fa733b5c003e2",
    "filename": "src/test/java/org/coffeeprojects/pmda/feature/issue/IssueMapperTest.java",
    "status": "modified",
    "additions": 135,
    "deletions": 7,
    "changes": 142,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/issue/IssueMapperTest.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/issue/IssueMapperTest.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/test/java/org/coffeeprojects/pmda/feature/issue/IssueMapperTest.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -1,6 +1,10 @@\n package org.coffeeprojects.pmda.feature.issue;\n \n import org.coffeeprojects.pmda.entity.CompositeIdBaseEntity;\n+import org.coffeeprojects.pmda.feature.changelog.ChangelogEntity;\n+import org.coffeeprojects.pmda.feature.changelog.jirabean.ChangelogJiraBean;\n+import org.coffeeprojects.pmda.feature.changelog.jirabean.HistoryJiraBean;\n+import org.coffeeprojects.pmda.feature.changelog.jirabean.ItemHistoryJiraBean;\n import org.coffeeprojects.pmda.feature.component.ComponentEntity;\n import org.coffeeprojects.pmda.feature.component.ComponentJiraBean;\n import org.coffeeprojects.pmda.feature.component.ComponentMapperImpl;\n@@ -33,8 +37,8 @@\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -49,9 +53,13 @@\n     @Test\n     void to_entity_should_map_issue_jira_bean_to_issue_entity() {\n         // Given\n+        Date dateCreated = new Date();\n+        HistoryJiraBean historyJiraBean = new HistoryJiraBean().setId(\"changelog1\").setCreated(dateCreated).setItems(Collections.singleton(new ItemHistoryJiraBean())).setAuthor(new UserJiraBean());\n+        ChangelogJiraBean changelogJiraBean = new ChangelogJiraBean().setHistories(Collections.singleton(historyJiraBean));\n         IssueJiraBean issueJiraBean = new IssueJiraBean()\n                 .setId(\"id\")\n                 .setKey(\"key1\")\n+                .setChangelog(changelogJiraBean)\n                 .setFields(\n                         new FieldsJiraBean()\n                                 .setSummary(\"summary\")\n@@ -72,14 +80,15 @@ void to_entity_should_map_issue_jira_bean_to_issue_entity() {\n         IssueEntity issueEntity = issueMapper.toEntity(issueJiraBean);\n \n         // Then\n+        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n         IssueEntity expectedIssueEntity = new IssueEntity()\n                 .setId(new CompositeIdBaseEntity().setClientId(\"id\"))\n                 .setKey(\"key1\")\n                 .setSummary(\"summary\")\n                 .setLabels(Arrays.asList(\"test-label\", \"label2\"))\n-                .setAssignee(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"assigneeUserId\")))\n-                .setReporter(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"reporterUserId\")))\n-                .setCreator(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"creatorUserId\")))\n+                .setAssignee(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"assigneeUserId\")).setActive(false))\n+                .setReporter(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"reporterUserId\")).setActive(false))\n+                .setCreator(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"creatorUserId\")).setActive(false))\n                 .setResolution(new ResolutionEntity().setId(new CompositeIdBaseEntity().setClientId(\"resolutionId\")))\n                 .setPriority(new PriorityEntity().setId(new CompositeIdBaseEntity().setClientId(\"priorityId\")))\n                 .setIssueType(new IssueTypeEntity().setId(new CompositeIdBaseEntity().setClientId(\"issueTypeId\")))\n@@ -88,8 +97,127 @@ void to_entity_should_map_issue_jira_bean_to_issue_entity() {\n                 .setTimeSpentSeconds(1)\n                 .setOriginalEstimateSeconds(2)\n                 .setRemainingEstimateSeconds(3)\n-                .setComponents(Collections.singleton(new ComponentEntity().setId(new CompositeIdBaseEntity().setClientId(\"componentId\"))));\n+                .setComponents(Collections.singleton(new ComponentEntity().setId(new CompositeIdBaseEntity().setClientId(\"componentId\"))))\n+                .setChangelog(Collections.singleton(new ChangelogEntity()\n+                        .setId(new CompositeIdBaseEntity().setClientId(\"changelog1_\" + formatter.format(dateCreated) + \"_0\"))\n+                        .setAuthor(new UserEntity().setId(new CompositeIdBaseEntity()).setActive(false))\n+                        .setCreated(dateCreated)\n+                ));\n \n-        assertThat(issueEntity).isEqualToComparingFieldByField(expectedIssueEntity);\n+        assertThat(issueEntity).usingRecursiveComparison().isEqualTo(expectedIssueEntity);\n+    }\n+\n+    @Test\n+    void to_entity_should_map_issue_jira_bean_to_issue_entity_changelog_field() {\n+        // Given\n+        Date dateCreated = new Date();\n+\n+        Set<HistoryJiraBean> historyJiraBeans = new HashSet<>();\n+\n+        Set<ItemHistoryJiraBean> items1 = new HashSet<>();\n+        items1.add(new ItemHistoryJiraBean().setField(\"field\").setFieldType(\"fieldType\").setFieldId(\"fieldId\").setFrom(\"from\").setFromString(\"fromStringItem1\").setTo(\"to\").setToString(\"toStringItem1\"));\n+        items1.add(new ItemHistoryJiraBean().setField(\"field\").setFieldType(\"fieldType\").setFieldId(\"fieldId\").setFrom(\"from\").setFromString(\"fromStringItem2\").setTo(\"to\").setToString(\"toStringItem2\"));\n+\n+        Set<ItemHistoryJiraBean> items2 = new HashSet<>();\n+        items2.add(new ItemHistoryJiraBean().setField(\"field\").setFieldType(\"fieldType\").setFieldId(\"fieldId\").setFrom(\"from\").setFromString(\"fromString2_1\").setTo(\"to\").setToString(\"toString2_1\"));\n+\n+        historyJiraBeans.add(new HistoryJiraBean().setId(\"changelog1\").setCreated(dateCreated).setItems(items1).setAuthor(new UserJiraBean().setAccountId(\"userAccount\")));\n+        historyJiraBeans.add(new HistoryJiraBean().setId(\"changelog2\").setCreated(dateCreated).setItems(items2).setAuthor(new UserJiraBean().setAccountId(\"userAccount\")));\n+\n+        ChangelogJiraBean changelogJiraBean = new ChangelogJiraBean().setHistories(historyJiraBeans);\n+\n+        IssueJiraBean issueJiraBean = new IssueJiraBean()\n+                .setId(\"id\")\n+                .setKey(\"key1\")\n+                .setChangelog(changelogJiraBean)\n+                .setFields(\n+                        new FieldsJiraBean()\n+                                .setSummary(\"summary\")\n+                                .setLabels(Arrays.asList(\"test-label\", \"label2\"))\n+                                .setAssignee(new UserJiraBean().setAccountId(\"assigneeUserId\"))\n+                                .setReporter(new UserJiraBean().setAccountId(\"reporterUserId\"))\n+                                .setCreator(new UserJiraBean().setAccountId(\"creatorUserId\"))\n+                                .setResolution(new ResolutionJiraBean().setId(\"resolutionId\"))\n+                                .setPriority(new PriorityJiraBean().setId(\"priorityId\"))\n+                                .setIssueType(new IssueTypeJiraBean().setId(\"issueTypeId\"))\n+                                .setProject(new ProjectJiraBean().setId(\"projectId\"))\n+                                .setFixVersions(Collections.singleton(new VersionJiraBean().setId(\"versionId\")))\n+                                .setTimeTracking(new TimeTrackingJiraBean().setTimeSpentSeconds(1).setOriginalEstimateSeconds(2).setRemainingEstimateSeconds(3))\n+                                .setComponents(Collections.singleton(new ComponentJiraBean().setId(\"componentId\")))\n+                );\n+\n+        // When\n+        IssueEntity issueEntity = issueMapper.toEntity(issueJiraBean);\n+\n+        // Then\n+        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n+        Set<ChangelogEntity> changelogEntities = new HashSet<>();\n+        String fromStringChangelog1_1 = issueEntity.getChangelog().stream().filter(p -> p.getId().getClientId().equals(\"changelog1_\" + formatter.format(dateCreated) + \"_0\")).findFirst().get().getFromString();\n+        String toStringChangelog1_1 = issueEntity.getChangelog().stream().filter(p -> p.getId().getClientId().equals(\"changelog1_\" + formatter.format(dateCreated) + \"_0\")).findFirst().get().getToString();\n+        String fromStringChangelog1_2 = issueEntity.getChangelog().stream().filter(p -> p.getId().getClientId().equals(\"changelog1_\" + formatter.format(dateCreated) + \"_1\")).findFirst().get().getFromString();\n+        String toStringChangelog1_2 = issueEntity.getChangelog().stream().filter(p -> p.getId().getClientId().equals(\"changelog1_\" + formatter.format(dateCreated) + \"_1\")).findFirst().get().getToString();\n+\n+        changelogEntities.add(new ChangelogEntity().setId(new CompositeIdBaseEntity().setClientId(\"changelog1_\" + formatter.format(dateCreated) + \"_0\"))\n+                .setCreated(dateCreated)\n+                .setField(\"field\").setFieldType(\"fieldType\").setFieldId(\"fieldId\").setFromString(fromStringChangelog1_1).setToString(toStringChangelog1_1)\n+                .setAuthor(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"userAccount\")).setActive(false)));\n+        changelogEntities.add(new ChangelogEntity().setId(new CompositeIdBaseEntity().setClientId(\"changelog1_\" + formatter.format(dateCreated) + \"_1\"))\n+                .setCreated(dateCreated)\n+                .setField(\"field\").setFieldType(\"fieldType\").setFieldId(\"fieldId\").setFromString(fromStringChangelog1_2).setToString(toStringChangelog1_2)\n+                .setAuthor(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"userAccount\")).setActive(false)));\n+        changelogEntities.add(new ChangelogEntity().setId(new CompositeIdBaseEntity().setClientId(\"changelog2_\" + formatter.format(dateCreated) + \"_0\"))\n+                .setCreated(dateCreated)\n+                .setField(\"field\").setFieldType(\"fieldType\").setFieldId(\"fieldId\").setFromString(\"fromString2_1\").setToString(\"toString2_1\")\n+                .setAuthor(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"userAccount\")).setActive(false)));\n+\n+        IssueEntity expectedIssueEntity = new IssueEntity()\n+                .setId(new CompositeIdBaseEntity().setClientId(\"id\"))\n+                .setKey(\"key1\")\n+                .setSummary(\"summary\")\n+                .setLabels(Arrays.asList(\"test-label\", \"label2\"))\n+                .setAssignee(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"assigneeUserId\")).setActive(false))\n+                .setReporter(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"reporterUserId\")).setActive(false))\n+                .setCreator(new UserEntity().setId(new CompositeIdBaseEntity().setClientId(\"creatorUserId\")).setActive(false))\n+                .setResolution(new ResolutionEntity().setId(new CompositeIdBaseEntity().setClientId(\"resolutionId\")))\n+                .setPriority(new PriorityEntity().setId(new CompositeIdBaseEntity().setClientId(\"priorityId\")))\n+                .setIssueType(new IssueTypeEntity().setId(new CompositeIdBaseEntity().setClientId(\"issueTypeId\")))\n+                .setProject(new ProjectEntity().setId(new CompositeIdBaseEntity().setClientId(\"projectId\")))\n+                .setFixVersions(Collections.singleton(new VersionEntity().setId(new CompositeIdBaseEntity().setClientId(\"versionId\"))))\n+                .setTimeSpentSeconds(1)\n+                .setOriginalEstimateSeconds(2)\n+                .setRemainingEstimateSeconds(3)\n+                .setComponents(Collections.singleton(new ComponentEntity().setId(new CompositeIdBaseEntity().setClientId(\"componentId\"))))\n+                .setChangelog(changelogEntities);\n+\n+        assertThat(issueEntity).usingRecursiveComparison().isEqualTo(expectedIssueEntity);\n+    }\n+\n+    @Test\n+    void to_entity_should_map_issue_jira_bean_null() {\n+        // When\n+        IssueEntity issueEntity = issueMapper.toEntity(null);\n+        assertThat(issueEntity).isNull();\n+    }\n+\n+    @Test\n+    void to_entity_should_map_issue_jira_bean_with_all_fields_null() {\n+        // Given\n+        IssueJiraBean issueJiraBean = new IssueJiraBean();\n+\n+        // When\n+        IssueEntity issueEntity = issueMapper.toEntity(issueJiraBean);\n+\n+        // Then\n+        IssueEntity expectedIssueEntity = new IssueEntity()\n+                .setId(new CompositeIdBaseEntity())\n+                .setChangelog(new HashSet<>());\n+\n+        assertThat(issueEntity).usingRecursiveComparison().isEqualTo(expectedIssueEntity);\n+    }\n+\n+    @Test\n+    void to_entity_with_version_jira_bean_null() {\n+        // Given / When / Then\n+        assertThat(issueMapper.toEntity(null)).isNull();\n     }\n }"
  },
  {
    "sha": "80b3e22e07ebefcd324fac3540c6f56f95c90c28",
    "filename": "src/test/java/org/coffeeprojects/pmda/feature/issue/IssueUtilsTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/issue/IssueUtilsTest.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/issue/IssueUtilsTest.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/test/java/org/coffeeprojects/pmda/feature/issue/IssueUtilsTest.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -258,7 +258,6 @@ void test_remove_duplicate_users_in_each_issue() {\n         assertThat(localIssueEntity2.getReporter()).isEqualTo(reporter2);\n     }\n \n-    @Disabled\n     @Test\n     void test_remove_duplicate_users_in_each_issue_and_administrator() {\n         UserEntity administrator = new UserEntity().setId(new CompositeIdBaseEntity().setTrackerType(TrackerType.JIRA).setClientId(\"1\"));\n@@ -287,15 +286,14 @@ void test_remove_duplicate_users_in_each_issue_and_administrator() {\n         localIssueEntities.add(localIssueEntity2);\n \n         IssueUtils.removeDuplicateUsers(localIssueEntities);\n-        assertThat(localIssueEntity1.getCreator()).isEqualTo(reporter1);\n+        assertThat(localIssueEntity1.getCreator()).isEqualTo(creator1);\n         assertThat(localIssueEntity1.getAssignee()).isEqualTo(assignee1);\n         assertThat(localIssueEntity1.getReporter()).isEqualTo(administrator);\n         assertThat(localIssueEntity2.getCreator()).isEqualTo(creator2);\n         assertThat(localIssueEntity2.getAssignee()).isEqualTo(reporter2);\n         assertThat(localIssueEntity2.getReporter()).isEqualTo(reporter2);\n     }\n \n-    @Disabled\n     @Test\n     void test_remove_duplicate_users_with_some_null() {\n         UserEntity administrator = new UserEntity().setId(new CompositeIdBaseEntity().setTrackerType(TrackerType.JIRA).setClientId(\"1\"));\n@@ -321,7 +319,7 @@ void test_remove_duplicate_users_with_some_null() {\n         localIssueEntities.add(localIssueEntity2);\n \n         IssueUtils.removeDuplicateUsers(localIssueEntities);\n-        assertThat(localIssueEntity1.getCreator()).isEqualTo(reporter1);\n+        assertThat(localIssueEntity1.getCreator()).isEqualTo(creator1);\n         assertThat(localIssueEntity1.getAssignee()).isNull();\n         assertThat(localIssueEntity1.getReporter()).isEqualTo(administrator);\n         assertThat(localIssueEntity2.getCreator()).isNull();"
  },
  {
    "sha": "5bae9efc0c63320a79b93a37f5747398558654a4",
    "filename": "src/test/java/org/coffeeprojects/pmda/feature/issue/service/impl/JiraIssueServiceTest.java",
    "status": "modified",
    "additions": 188,
    "deletions": 5,
    "changes": 193,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/issue/service/impl/JiraIssueServiceTest.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/issue/service/impl/JiraIssueServiceTest.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/test/java/org/coffeeprojects/pmda/feature/issue/service/impl/JiraIssueServiceTest.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -1,6 +1,7 @@\n package org.coffeeprojects.pmda.feature.issue.service.impl;\n \n import org.coffeeprojects.pmda.entity.CompositeIdBaseEntity;\n+import org.coffeeprojects.pmda.exception.InvalidDataException;\n import org.coffeeprojects.pmda.feature.issue.IssueCustomField;\n import org.coffeeprojects.pmda.feature.issue.IssueEntity;\n import org.coffeeprojects.pmda.feature.issue.IssueMapper;\n@@ -22,6 +23,7 @@\n import java.util.*;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.*;\n \n@@ -55,7 +57,7 @@ void setup() {\n \n     @Test\n     void update_last_modified_issues_should_update_issues() {\n-        LinkedHashMap<String, String> sprint = new LinkedHashMap<String, String>();\n+        LinkedHashMap<String, String> sprint = new LinkedHashMap<>();\n         sprint.put(\"id\", \"1\");\n         sprint.put(\"name\", \"Sprint1\");\n \n@@ -84,7 +86,7 @@ void update_last_modified_issues_should_update_issues() {\n                 .setKey(\"issue1\")\n                 .setId(new CompositeIdBaseEntity().setClientId(\"i1\"))\n                 .setProject(projectEntity)\n-                .setSprints(Collections.singleton(new SprintEntity().setName(\"Sprint1\").setId(new CompositeIdBaseEntity().setClientId(\"1\"))))\n+                .setSprints(Collections.singleton(new SprintEntity().setName(\"Sprint1\").setId(new CompositeIdBaseEntity().setClientId(\"1\")).setRapidViewId(\"\").setState(\"\").setGoal(\"\")))\n                 .setIssueCustomFields(Collections.singleton(\n                         new IssueCustomField().setId(new CompositeIdBaseEntity().setClientId(\"i1_custom1key\")).setValue(\"custom1Value\")\n                 ));\n@@ -93,15 +95,166 @@ void update_last_modified_issues_should_update_issues() {\n                 .setKey(\"issue2\")\n                 .setId(new CompositeIdBaseEntity().setClientId(\"i2\"))\n                 .setProject(projectEntity)\n-                .setSprints(Collections.singleton(new SprintEntity().setName(\"Sprint1\").setId(new CompositeIdBaseEntity().setClientId(\"1\"))))\n+                .setSprints(Collections.singleton(new SprintEntity().setName(\"Sprint1\").setId(new CompositeIdBaseEntity().setClientId(\"1\")).setRapidViewId(\"\").setState(\"\").setGoal(\"\")))\n                 .setIssueCustomFields(Collections.singleton(\n                         new IssueCustomField().setId(new CompositeIdBaseEntity().setClientId(\"i2_custom2key\")).setValue(\"custom2Value\")\n                 ));\n \n         List<IssueEntity> issueEntities = issueEntitiesArgumentCaptor.getValue();\n         assertThat(issueEntities).hasSize(2);\n-        assertThat(issueEntities.get(0)).isEqualToComparingFieldByField(expectedIssueEntity1);\n-        assertThat(issueEntities.get(1)).isEqualToComparingFieldByField(expectedIssueEntity2);\n+        assertThat(issueEntities.get(0)).usingRecursiveComparison().isEqualTo(expectedIssueEntity1);\n+        assertThat(issueEntities.get(1)).usingRecursiveComparison().isEqualTo(expectedIssueEntity2);\n+    }\n+\n+    @Test\n+    void update_last_modified_issues_should_update_issues_with_exception() {\n+        // Given\n+        LinkedHashMap<String, String> sprint = new LinkedHashMap<String, String>();\n+        sprint.put(\"id\", \"1\");\n+        sprint.put(\"name\", \"Sprint1\");\n+\n+        ProjectEntity projectEntity = new ProjectEntity()\n+                .setId(new CompositeIdBaseEntity().setClientId(\"p1\"))\n+                .setProjectCustomFields(\n+                        new HashSet<>(Arrays.asList(\n+                                new ProjectCustomField().setLocalName(\"SPRINTS\").setClientName(\"SPRINTS\"),\n+                                new ProjectCustomField().setLocalName(\"custom1key\").setClientName(\"custom1Key\"),\n+                                new ProjectCustomField().setLocalName(\"custom2key\").setClientName(\"custom2Key\")\n+                        )));\n+\n+        List<IssueJiraBean> issueJiraBeans = Arrays.asList(\n+                new IssueJiraBean().setId(\"i1\").setKey(\"issue1\").setFields(new FieldsJiraBean().setCustomFields(\"SPRINTS\", Collections.singletonList(sprint)).setCustomFields(\"custom1Key\", \"custom1Value\")),\n+                new IssueJiraBean().setId(\"i2\").setKey(\"issue2\").setFields(new FieldsJiraBean().setCustomFields(\"SPRINTS\", Collections.singletonList(sprint)).setCustomFields(\"custom2Key\", \"custom2Value\"))\n+        );\n+\n+        // When\n+        when(jiraRepository.getModifiedIssues(any(), any())).thenReturn(issueJiraBeans);\n+        when(issueRepository.saveAll(any())).thenThrow(new IllegalArgumentException());\n+        assertThatThrownBy(() -> jiraIssueService.updateLastModifiedIssues(projectEntity)).isInstanceOf(InvalidDataException.class);\n+    }\n+\n+    @Test\n+    void update_last_modified_issues_should_update_issues_without_custom_field_in_project_entity() {\n+        // Given\n+        LinkedHashMap<String, String> customField1 = new LinkedHashMap<>();\n+        customField1.put(\"id\", \"customFieldId1\");\n+        customField1.put(\"name\", \"customFieldName1\");\n+        customField1.put(\"value\", \"customFieldValue1\");\n+\n+        ProjectEntity projectEntity = new ProjectEntity()\n+                .setId(new CompositeIdBaseEntity().setClientId(\"p1\"));\n+\n+        List<IssueJiraBean> issueJiraBeans = Arrays.asList(\n+                new IssueJiraBean().setId(\"i1\").setKey(\"issue1\")\n+                        .setFields(\n+                                new FieldsJiraBean().setCustomFields(\"CUSTOM_FIELD\", customField1))\n+        );\n+        when(jiraRepository.getModifiedIssues(any(), any())).thenReturn(issueJiraBeans);\n+\n+        // When\n+        jiraIssueService.updateLastModifiedIssues(projectEntity);\n+\n+        // Then\n+        verify(issueRepository, times(1)).saveAll(issueEntitiesArgumentCaptor.capture());\n+\n+        IssueEntity expectedIssueEntity = new IssueEntity()\n+                .setKey(\"issue1\")\n+                .setId(new CompositeIdBaseEntity().setClientId(\"i1\"))\n+                .setProject(projectEntity);\n+\n+        List<IssueEntity> issueEntities = issueEntitiesArgumentCaptor.getValue();\n+        assertThat(issueEntities).hasSize(1);\n+        assertThat(issueEntities.get(0)).usingRecursiveComparison().isEqualTo(expectedIssueEntity);\n+    }\n+\n+    @Test\n+    void update_last_modified_issues_should_update_issues_with_custom_field() {\n+        // Given\n+        LinkedHashMap<String, String> customField1 = new LinkedHashMap<>();\n+        customField1.put(\"id\", \"customFieldId1\");\n+        customField1.put(\"name\", \"customFieldName1\");\n+        customField1.put(\"value\", \"customFieldValue1\");\n+\n+        ProjectEntity projectEntity = new ProjectEntity()\n+                .setId(new CompositeIdBaseEntity().setClientId(\"p1\"))\n+                .setProjectCustomFields(\n+                        new HashSet<>(Arrays.asList(\n+                                new ProjectCustomField().setLocalName(\"CUSTOM_FIELD\").setClientName(\"CUSTOM_FIELD\")\n+                        )));\n+\n+        List<IssueJiraBean> issueJiraBeans = Arrays.asList(\n+                new IssueJiraBean().setId(\"i1\").setKey(\"issue1\")\n+                        .setFields(\n+                                new FieldsJiraBean().setCustomFields(\"CUSTOM_FIELD\", customField1))\n+        );\n+        when(jiraRepository.getModifiedIssues(any(), any())).thenReturn(issueJiraBeans);\n+\n+        // When\n+        jiraIssueService.updateLastModifiedIssues(projectEntity);\n+\n+        // Then\n+        verify(issueRepository, times(1)).saveAll(issueEntitiesArgumentCaptor.capture());\n+\n+        IssueEntity expectedIssueEntity = new IssueEntity()\n+                .setKey(\"issue1\")\n+                .setId(new CompositeIdBaseEntity().setClientId(\"i1\"))\n+                .setProject(projectEntity)\n+                .setIssueCustomFields(new HashSet<>(Arrays.asList(\n+                        new IssueCustomField().setId(new CompositeIdBaseEntity().setClientId(\"i1_customFieldId1_CUSTOM_FIELD\")).setValue(\"customFieldValue1\")\n+                )));\n+\n+        List<IssueEntity> issueEntities = issueEntitiesArgumentCaptor.getValue();\n+        assertThat(issueEntities).hasSize(1);\n+        assertThat(issueEntities.get(0)).usingRecursiveComparison().isEqualTo(expectedIssueEntity);\n+    }\n+\n+    @Test\n+    void update_last_modified_issues_should_update_issues_with_custom_fields_list() {\n+        // Given\n+        LinkedHashMap<String, String> customField1 = new LinkedHashMap<>();\n+        customField1.put(\"id\", \"customFieldId1\");\n+        customField1.put(\"name\", \"customFieldName1\");\n+\n+        LinkedHashMap<String, String> customField2 = new LinkedHashMap<>();\n+        customField2.put(\"id\", \"customFieldId2\");\n+        customField2.put(\"name\", \"customFieldName2\");\n+        customField2.put(\"value\", \"customFieldValue2\");\n+\n+        String customField3 = \"customField3\";\n+\n+        ProjectEntity projectEntity = new ProjectEntity()\n+                .setId(new CompositeIdBaseEntity().setClientId(\"p1\"))\n+                .setProjectCustomFields(\n+                        new HashSet<>(Arrays.asList(\n+                                new ProjectCustomField().setLocalName(\"CUSTOM_FIELDS_LIST\").setClientName(\"CUSTOM_FIELDS_LIST\")\n+                        )));\n+\n+        List<IssueJiraBean> issueJiraBeans = Arrays.asList(\n+                new IssueJiraBean().setId(\"i1\").setKey(\"issue1\")\n+                        .setFields(\n+                                new FieldsJiraBean().setCustomFields(\"CUSTOM_FIELDS_LIST\", new ArrayList<>(Arrays.asList(customField1, customField2, customField3))))\n+            );\n+        when(jiraRepository.getModifiedIssues(any(), any())).thenReturn(issueJiraBeans);\n+\n+        // When\n+        jiraIssueService.updateLastModifiedIssues(projectEntity);\n+\n+        // Then\n+        verify(issueRepository, times(1)).saveAll(issueEntitiesArgumentCaptor.capture());\n+\n+        IssueEntity expectedIssueEntity = new IssueEntity()\n+                .setKey(\"issue1\")\n+                .setId(new CompositeIdBaseEntity().setClientId(\"i1\"))\n+                .setProject(projectEntity)\n+                .setIssueCustomFields(new HashSet<>(Arrays.asList(\n+                        new IssueCustomField().setId(new CompositeIdBaseEntity().setClientId(\"i1_customFieldId2_CUSTOM_FIELDS_LIST\")).setValue(\"customFieldValue2\"),\n+                        new IssueCustomField().setId(new CompositeIdBaseEntity().setClientId(\"i1_CUSTOM_FIELDS_LIST\")).setValue(\"customField3\"),\n+                        new IssueCustomField().setId(new CompositeIdBaseEntity().setClientId(\"i1_customFieldId1_CUSTOM_FIELDS_LIST\")).setValue(\"\")\n+                )));\n+\n+        List<IssueEntity> issueEntities = issueEntitiesArgumentCaptor.getValue();\n+        assertThat(issueEntities).hasSize(1);\n+        assertThat(issueEntities.get(0)).usingRecursiveComparison().isEqualTo(expectedIssueEntity);\n     }\n \n     @Test\n@@ -137,4 +290,34 @@ void delete_missing_issues_should_delete_issues() {\n         assertThat(deletedIssuesEntities).hasSize(1);\n         assertThat(deletedIssuesEntities.get(0).getKey()).isEqualTo(\"issue1Key\");\n     }\n+\n+    @Test\n+    void delete_missing_issues_should_delete_issues_with_exception() {\n+        // Given\n+        ProjectEntity projectEntity = new ProjectEntity()\n+                .setId(new CompositeIdBaseEntity().setClientId(\"p1\"))\n+                .setProjectCustomFields(\n+                        new HashSet<>(Arrays.asList(\n+                                new ProjectCustomField().setLocalName(\"SPRINTS\").setClientName(\"SPRINTS\"),\n+                                new ProjectCustomField().setLocalName(\"custom1key\").setClientName(\"custom1Key\"),\n+                                new ProjectCustomField().setLocalName(\"custom2key\").setClientName(\"custom2Key\")\n+                        )));\n+\n+        List<IssueEntity> issueEntities = Arrays.asList(\n+                new IssueEntity().setId(new CompositeIdBaseEntity().setClientId(\"issue1Id\")).setKey(\"issue1Key\"),\n+                new IssueEntity().setId(new CompositeIdBaseEntity().setClientId(\"issue2Id\")).setKey(\"issue2Key\")\n+        );\n+        when(issueRepository.findByProjectAndResolutionDateIsNull(projectEntity)).thenReturn(issueEntities);\n+\n+        List<IssueJiraBean> issueJiraBeans = Collections.singletonList(\n+                new IssueJiraBean().setId(\"issue2Id\").setKey(\"issue2Key\")\n+        );\n+        when(jiraRepository.getExistingIssues(eq(projectEntity), eq(Arrays.asList(\"issue1Key\", \"issue2Key\")), anyString()))\n+                .thenReturn(issueJiraBeans);\n+\n+        doThrow(new IllegalArgumentException()).when(issueRepository).deleteAll(any());\n+\n+        // When / Then\n+        assertThatThrownBy(() -> jiraIssueService.deleteMissingIssues(projectEntity)).isInstanceOf(InvalidDataException.class);\n+    }\n }"
  },
  {
    "sha": "4cc74f8b736c7c5a3a055a1f3dd31425c5eb3090",
    "filename": "src/test/java/org/coffeeprojects/pmda/feature/issuetype/IssueTypeMapperTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/blob/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/issuetype/IssueTypeMapperTest.java",
    "raw_url": "https://github.com/CoffeeProjects/project-managment-data-agregator/raw/df9a6745294b45c860cc941a0644f38dfac1373a/src/test/java/org/coffeeprojects/pmda/feature/issuetype/IssueTypeMapperTest.java",
    "contents_url": "https://api.github.com/repos/CoffeeProjects/project-managment-data-agregator/contents/src/test/java/org/coffeeprojects/pmda/feature/issuetype/IssueTypeMapperTest.java?ref=df9a6745294b45c860cc941a0644f38dfac1373a",
    "patch": "@@ -27,6 +27,12 @@ void to_entity_should_map_issuetype_jira_bean_to_user_entity() {\n                 .setName(\"Name\")\n                 .setDescription(\"Description\");\n \n-        assertThat(issueTypeEntity).isEqualToComparingFieldByField(expectedIssueTypeEntity);\n+        assertThat(issueTypeEntity).usingRecursiveComparison().isEqualTo(expectedIssueTypeEntity);\n+    }\n+\n+    @Test\n+    void to_entity_with_version_jira_bean_null() {\n+        // Given / When / Then\n+        assertThat(issueTypeMapper.toEntity(null)).isNull();\n     }\n }"
  }
]
