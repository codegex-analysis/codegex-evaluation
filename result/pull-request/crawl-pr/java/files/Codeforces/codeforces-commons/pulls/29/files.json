[
  {
    "sha": "a88c79aeb6f1a3e08851a342d561f8e15aaf91cb",
    "filename": "code/src/main/java/com/codeforces/commons/reflection/ReflectionUtil.java",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Codeforces/codeforces-commons/blob/84c2fe376374128fce0bc6a2b2165140f6a3df62/code/src/main/java/com/codeforces/commons/reflection/ReflectionUtil.java",
    "raw_url": "https://github.com/Codeforces/codeforces-commons/raw/84c2fe376374128fce0bc6a2b2165140f6a3df62/code/src/main/java/com/codeforces/commons/reflection/ReflectionUtil.java",
    "contents_url": "https://api.github.com/repos/Codeforces/codeforces-commons/contents/code/src/main/java/com/codeforces/commons/reflection/ReflectionUtil.java?ref=84c2fe376374128fce0bc6a2b2165140f6a3df62",
    "patch": "@@ -13,6 +13,7 @@\n import java.util.*;\r\n import java.util.concurrent.ConcurrentHashMap;\r\n import java.util.concurrent.ConcurrentMap;\r\n+import java.util.function.BiConsumer;\r\n \r\n /**\r\n  * @author Maxim Shipko (sladethe@gmail.com)\r\n@@ -465,6 +466,35 @@ public static void copyProperties(Object source, Object target) {\n         }\r\n     }\r\n \r\n+    public static void iterateProperties(Object source, BiConsumer<String, Object> nameAndValueConsumer, Set<String> ignoreFieldNames) {\r\n+        if (source == null) {\r\n+            throw new NullPointerException(\"Argument source can't be null (if target is not null).\");\r\n+        }\r\n+\r\n+        Map<String, FastMethod> sourceGetters = getGettersMap(source.getClass());\r\n+\r\n+        for (Map.Entry<String, FastMethod> getterEntry : sourceGetters.entrySet()) {\r\n+            if (ignoreFieldNames.contains(getterEntry.getKey())) {\r\n+                continue;\r\n+            }\r\n+\r\n+            FastMethod getter = getterEntry.getValue();\r\n+\r\n+            Object value;\r\n+            try {\r\n+                value = getter.invoke(source, ArrayUtils.EMPTY_OBJECT_ARRAY);\r\n+            } catch (InvocationTargetException e) {\r\n+                throw new RuntimeException(String.format(\r\n+                        \"Can't get property '%s' from %s.\", getterEntry.getKey(), source.getClass()\r\n+                ), e);\r\n+            }\r\n+\r\n+            if (value != null) {\r\n+                nameAndValueConsumer.accept(getterEntry.getKey(), value);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n     private ReflectionUtil() {\r\n         throw new UnsupportedOperationException();\r\n     }\r"
  },
  {
    "sha": "133ad67f2fe14383b19162e7258762ea578368db",
    "filename": "code/src/test/java/com/codeforces/commons/reflection/ReflectionUtilTest.java",
    "status": "modified",
    "additions": 76,
    "deletions": 5,
    "changes": 81,
    "blob_url": "https://github.com/Codeforces/codeforces-commons/blob/84c2fe376374128fce0bc6a2b2165140f6a3df62/code/src/test/java/com/codeforces/commons/reflection/ReflectionUtilTest.java",
    "raw_url": "https://github.com/Codeforces/codeforces-commons/raw/84c2fe376374128fce0bc6a2b2165140f6a3df62/code/src/test/java/com/codeforces/commons/reflection/ReflectionUtilTest.java",
    "contents_url": "https://api.github.com/repos/Codeforces/codeforces-commons/contents/code/src/test/java/com/codeforces/commons/reflection/ReflectionUtilTest.java?ref=84c2fe376374128fce0bc6a2b2165140f6a3df62",
    "patch": "@@ -1,8 +1,10 @@\n package com.codeforces.commons.reflection;\r\n \r\n+import com.codeforces.commons.collection.SetBuilder;\r\n import com.codeforces.commons.math.RandomUtil;\r\n import com.codeforces.commons.text.StringUtil;\r\n import junit.framework.TestCase;\r\n+import org.junit.Assert;\r\n \r\n import java.lang.reflect.InvocationTargetException;\r\n import java.util.*;\r\n@@ -71,11 +73,7 @@ public void testGetDeepValue() throws Exception {\n                 ReflectionUtil.getDeepValue(personMax, \"friendByName.Mike.firstFriend.friendByName.Ivan.admin\")\r\n         );\r\n \r\n-        assertEquals(\r\n-                \"personMike.friendByName.Mike mismatch.\",\r\n-                null,\r\n-                ReflectionUtil.getDeepValue(personMike, \"friendByName.Mike\")\r\n-        );\r\n+        assertNull(\"personMike.friendByName.Mike mismatch.\", ReflectionUtil.getDeepValue(personMike, \"friendByName.Mike\"));\r\n \r\n         assertEquals(\r\n                 \"personMax.friendByName.Mike.firstFriend.friendList.-1.friendSet.0.friendSet.-2.name mismatch.\",\r\n@@ -129,6 +127,25 @@ public void testCopyProperties() throws InvocationTargetException, IllegalAccess\n         }\r\n     }\r\n \r\n+    public void testIterateProperties() {\r\n+        SimpleDataClass simpleDataClass = new SimpleDataClass(55, \"test\", SimpleDataClass.Type.C, null);\r\n+        Map<String, Object> map = new HashMap<>();\r\n+        ReflectionUtil.iterateProperties(simpleDataClass, (name, value) -> {\r\n+            assertFalse(\"Duplicated property name \" + name, map.containsKey(name));\r\n+            map.put(name, value);\r\n+        }, Collections.emptySet());\r\n+\r\n+        assertEquals(3, map.size());\r\n+        assertEquals(55, (long) map.get(\"id\"));\r\n+        assertEquals(\"test\", (String) map.get(\"name\"));\r\n+        assertEquals(SimpleDataClass.Type.C, map.get(\"type\"));\r\n+\r\n+        SimpleDataClass simpleDataClass1 = new SimpleDataClass(37, \"sample\", SimpleDataClass.Type.A, simpleDataClass);\r\n+        ReflectionUtil.iterateProperties(simpleDataClass1, (name, value) -> {\r\n+            assertEquals(simpleDataClass, simpleDataClass1.getInner());\r\n+        }, new SetBuilder<String>().add(\"id\").add(\"name\").add(\"type\").buildUnmodifiable());\r\n+    }\r\n+\r\n     public B newB() {\r\n         B b = new B();\r\n         b.setId(RandomUtil.getRandomLong());\r\n@@ -153,6 +170,60 @@ public B newB() {\n         return b;\r\n     }\r\n \r\n+    private static class DataClass {\r\n+        private final long id;\r\n+        private final String name;\r\n+        private final Type type;\r\n+        private final DataClass inner;\r\n+        private final Object noGetter = new Object();\r\n+\r\n+        public DataClass(long id, String name, Type type, DataClass inner) {\r\n+            this.id = id;\r\n+            this.name = name;\r\n+            this.type = type;\r\n+            this.inner = inner;\r\n+        }\r\n+\r\n+        public long getId() {\r\n+            return id;\r\n+        }\r\n+\r\n+        public String getName() {\r\n+            return name;\r\n+        }\r\n+\r\n+        public Type getType() {\r\n+            return type;\r\n+        }\r\n+\r\n+        public DataClass getInner() {\r\n+            return inner;\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean equals(Object o) {\r\n+            if (this == o) return true;\r\n+            if (!(o instanceof DataClass)) return false;\r\n+            DataClass that = (DataClass) o;\r\n+            return getId() == that.getId() && Objects.equals(getName(), that.getName()) && getType() == that.getType() && Objects.equals(getInner(), that.getInner());\r\n+        }\r\n+\r\n+        @Override\r\n+        public int hashCode() {\r\n+            return Objects.hash(getId(), getName(), getType(), getInner());\r\n+        }\r\n+\r\n+        enum Type {\r\n+            A, B, C;\r\n+        }\r\n+    }\r\n+\r\n+    private static class SimpleDataClass extends DataClass {\r\n+        public SimpleDataClass(long id, String name, Type type, DataClass inner) {\r\n+            super(id, name, type, inner);\r\n+        }\r\n+    }\r\n+\r\n     private static class Person {\r\n         protected final long id;\r\n         protected final int age;\r"
  }
]
