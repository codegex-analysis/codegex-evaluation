[
  {
    "sha": "a5437f51a0b2475a04d739e4e3c5fee474d8710d",
    "filename": "emr-dynamodb-tools/src/main/java/org/apache/hadoop/dynamodb/tools/DynamoDBExport.java",
    "status": "modified",
    "additions": 44,
    "deletions": 14,
    "changes": 58,
    "blob_url": "https://github.com/awslabs/emr-dynamodb-connector/blob/1fb61fb6ae0cb9aa3ad689358d3c2393d7164de0/emr-dynamodb-tools/src/main/java/org/apache/hadoop/dynamodb/tools/DynamoDBExport.java",
    "raw_url": "https://github.com/awslabs/emr-dynamodb-connector/raw/1fb61fb6ae0cb9aa3ad689358d3c2393d7164de0/emr-dynamodb-tools/src/main/java/org/apache/hadoop/dynamodb/tools/DynamoDBExport.java",
    "contents_url": "https://api.github.com/repos/awslabs/emr-dynamodb-connector/contents/emr-dynamodb-tools/src/main/java/org/apache/hadoop/dynamodb/tools/DynamoDBExport.java?ref=1fb61fb6ae0cb9aa3ad689358d3c2393d7164de0",
    "patch": "@@ -14,6 +14,10 @@\n package org.apache.hadoop.dynamodb.tools;\n \n import com.amazonaws.services.dynamodbv2.model.TableDescription;\n+import com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient;\n+import com.amazonaws.services.applicationautoscaling.model.DescribeScalableTargetsRequest;\n+import com.amazonaws.services.applicationautoscaling.model.ScalableDimension;\n+import com.amazonaws.services.applicationautoscaling.model.ServiceNamespace;\n import java.util.Date;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -105,25 +109,51 @@ private void setTableProperties(JobConf jobConf, String tableName, Double readRa\n \n     DynamoDBClient client = new DynamoDBClient(jobConf);\n     TableDescription description = client.describeTable(tableName);\n+    AWSApplicationAutoScalingClient aaClient = new AWSApplicationAutoScalingClient();\n \n     Long itemCount = description.getItemCount();\n     Long tableSizeBytes = description.getTableSizeBytes();\n-\n-    if (description.getBillingModeSummary() == null\n-            || description.getBillingModeSummary().getBillingMode()\n-        .equals(DynamoDBConstants.BILLING_MODE_PROVISIONED)) {\n-      jobConf.set(DynamoDBConstants.READ_THROUGHPUT,\n-          description.getProvisionedThroughput().getReadCapacityUnits().toString());\n-      jobConf.set(DynamoDBConstants.WRITE_THROUGHPUT,\n-          description.getProvisionedThroughput().getWriteCapacityUnits().toString());\n+    String writeThroughput = null;\n+    String readThroughput = null;\n+\n+    if (description.getBillingModeSummary() != null \n+            && description.getBillingModeSummary().getBillingMode() == DynamoDBConstants.ON_DEMAND) {\n+      // For On-Demand, set throughput to default values (40,000)\n+      writeThroughput = DynamoDBConstants.DEFAULT_CAPACITY_FOR_ON_DEMAND.toString();\n+      readThroughput = DynamoDBConstants.DEFAULT_CAPACITY_FOR_ON_DEMAND.toString();\n     } else {\n-      // If not specified at the table level, set a hard coded value of 40,000\n-      jobConf.set(DynamoDBConstants.READ_THROUGHPUT,\n-          DynamoDBConstants.DEFAULT_CAPACITY_FOR_ON_DEMAND.toString());\n-      jobConf.set(DynamoDBConstants.WRITE_THROUGHPUT,\n-          DynamoDBConstants.DEFAULT_CAPACITY_FOR_ON_DEMAND.toString());\n+      // Set the throughput based on provisioned capacity\n+      if (description.getBillingModeSummary().getBillingMode().equals(DynamoDBConstants.BILLING_MODE_PROVISIONED)) {\n+        writeThroughput = description.getProvisionedThroughput().getWriteCapacityUnits().toString());\n+        readThroughput description.getProvisionedThroughput().getReadCapacityUnits().toString());\n+        \n+      // Test for autoscale provisioning, and set throughput based on max allotment\n+      ServiceNamespace ns = ServiceNamespace.Dynamodb;\n+      ScalableDimension tableWCUs = ScalableDimension.DynamodbTableWriteCapacityUnits;\n+      String resourceID = \"table/\" + tableName;\n+      \n+      DescribeScalableTargetsRequest dscRequest = new DescribeScalableTargetsRequest()\n+            .withServiceNamespace(ns)\n+            .withScalableDimension(tableWCUs)\n+            .withResourceIds(resourceID);\n+      \n+      try {\n+        DescribeScalableTargetsResult dsaResult = aaClient.describeScalableTargets(dscRequest);\n+        writeThroughput = dsaResult.getScalableTargets()\n+            .filter(target->\"dynamodb:table:WriteCapacityUnits\".equals(target.getScalableDimension()))\n+            .getMaxCapacity()\n+            .toString();\n+        readThroughput = dsaResult.getScalableTargets()\n+            .filter(target->\"dynamodb:table:ReadCapacityUnits\".equals(target.getScalableDimension()))\n+            .getMaxCapacity()\n+            .toString();\n+      } catch (Exception e) {\n+        System.out.println(tableName + \" doesn't have autoscaling provisioning\")\n+      }\n     }\n-\n+    \n+    jobConf.set(DynamoDBConstants.WRITE_THROUGHPUT, writeThroughput)\n+    jobConf.set(DynamoDBConstants.READ_THROUGHPUT, readThroughput)\n     jobConf.set(DynamoDBConstants.ITEM_COUNT, itemCount.toString());\n     jobConf.set(DynamoDBConstants.TABLE_SIZE_BYTES, tableSizeBytes.toString());\n "
  }
]
