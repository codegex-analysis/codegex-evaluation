[
  {
    "sha": "e38a0002ac6751ee7f5bd3d4eed5516689ee4745",
    "filename": "smithy-typescript-codegen/src/main/java/software/amazon/smithy/typescript/codegen/HttpProtocolTestGenerator.java",
    "status": "modified",
    "additions": 120,
    "deletions": 12,
    "changes": 132,
    "blob_url": "https://github.com/awslabs/smithy-typescript/blob/fb5b097fba6358f836abf976ec81896f4b9c0717/smithy-typescript-codegen/src/main/java/software/amazon/smithy/typescript/codegen/HttpProtocolTestGenerator.java",
    "raw_url": "https://github.com/awslabs/smithy-typescript/raw/fb5b097fba6358f836abf976ec81896f4b9c0717/smithy-typescript-codegen/src/main/java/software/amazon/smithy/typescript/codegen/HttpProtocolTestGenerator.java",
    "contents_url": "https://api.github.com/repos/awslabs/smithy-typescript/contents/smithy-typescript-codegen/src/main/java/software/amazon/smithy/typescript/codegen/HttpProtocolTestGenerator.java?ref=fb5b097fba6358f836abf976ec81896f4b9c0717",
    "patch": "@@ -177,6 +177,12 @@ private void generateServerOperationTests(OperationShape operation, OperationInd\n                     onlyIfProtocolMatches(testCase, () -> generateServerRequestTest(operation, testCase));\n                 }\n             });\n+            // 2. Generate test cases for each response.\n+            operation.getTrait(HttpResponseTestsTrait.class).ifPresent(trait -> {\n+                for (HttpResponseTestCase testCase : trait.getTestCasesFor(AppliesTo.SERVER)) {\n+                    onlyIfProtocolMatches(testCase, () -> generateServerResponseTest(operation, testCase));\n+                }\n+            });\n         }\n     }\n \n@@ -242,7 +248,7 @@ private void generateClientRequestTest(OperationShape operation, HttpRequestTest\n                        + \"  }\\n\"\n                        + \"  const r = err.request;\")\n                     .indent()\n-                    .call(() -> writeRequestAssertions(operation, testCase))\n+                    .call(() -> writeHttpRequestAssertions(testCase))\n                     .dedent()\n                     .write(\"}\");\n         });\n@@ -349,16 +355,22 @@ private ObjectNode buildQueryBag(HttpRequestTestCase testCase) {\n     }\n \n     // Ensure that the serialized request matches the expected request.\n-    private void writeRequestAssertions(OperationShape operation, HttpRequestTestCase testCase) {\n+    private void writeHttpRequestAssertions(HttpRequestTestCase testCase) {\n         writer.write(\"expect(r.method).toBe($S);\", testCase.getMethod());\n         writer.write(\"expect(r.path).toBe($S);\", testCase.getUri());\n \n-        writeRequestHeaderAssertions(testCase);\n-        writeRequestQueryAssertions(testCase);\n-        writeRequestBodyAssertions(operation, testCase);\n+        writeHttpHeaderAssertions(testCase);\n+        writeHttpQueryAssertions(testCase);\n+        writeHttpBodyAssertions(testCase);\n+    }\n+\n+    private void writeHttpResponseAssertions(HttpResponseTestCase testCase) {\n+        writer.write(\"expect(r.statusCode).toBe($L);\", testCase.getCode());\n+        writeHttpHeaderAssertions(testCase);\n+        writeHttpBodyAssertions(testCase);\n     }\n \n-    private void writeRequestQueryAssertions(HttpRequestTestCase testCase) {\n+    private void writeHttpQueryAssertions(HttpRequestTestCase testCase) {\n         testCase.getRequireQueryParams().forEach(requiredQueryParam ->\n                 writer.write(\"expect(r.query[$S]).toBeDefined();\", requiredQueryParam));\n         writer.write(\"\");\n@@ -380,7 +392,7 @@ private void writeRequestQueryAssertions(HttpRequestTestCase testCase) {\n         writer.write(\"\");\n     }\n \n-    private void writeRequestHeaderAssertions(HttpRequestTestCase testCase) {\n+    private void writeHttpHeaderAssertions(HttpMessageTestCase testCase) {\n         testCase.getRequireHeaders().forEach(requiredHeader -> {\n             writer.write(\"expect(r.headers[$S]).toBeDefined();\", requiredHeader.toLowerCase());\n         });\n@@ -398,7 +410,7 @@ private void writeRequestHeaderAssertions(HttpRequestTestCase testCase) {\n         writer.write(\"\");\n     }\n \n-    private void writeRequestBodyAssertions(OperationShape operation, HttpRequestTestCase testCase) {\n+    private void writeHttpBodyAssertions(HttpMessageTestCase testCase) {\n         testCase.getBody().ifPresent(body -> {\n             // If we expect an empty body, expect it to be falsy.\n             if (body.isEmpty()) {\n@@ -413,6 +425,17 @@ private void writeRequestBodyAssertions(OperationShape operation, HttpRequestTes\n             String mediaType = testCase.getBodyMediaType().orElse(\"UNKNOWN\");\n             String comparatorInvoke = registerBodyComparatorStub(mediaType);\n \n+            // If this is a request case then we know we're generating a client test,\n+            // because a request case for servers would be comparing parsed objects. We\n+            // need to know which is which here to be able to grab the utf8Encoder from\n+            // the right place.\n+            if (testCase instanceof HttpRequestTestCase) {\n+                writer.write(\"const utf8Encoder = client.config.utf8Encoder;\");\n+            } else {\n+                writer.addImport(\"toUtf8\", \"__utf8Encoder\", \"@aws-sdk/util-utf8-node\");\n+                writer.write(\"const utf8Encoder = __utf8Encoder;\");\n+            }\n+\n             // Handle escaping strings with quotes inside them.\n             writer.write(\"const bodyString = `$L`;\", body.replace(\"\\\"\", \"\\\\\\\"\"));\n             writer.write(\"const unequalParts: any = $L;\", comparatorInvoke);\n@@ -436,19 +459,83 @@ private String registerBodyComparatorStub(String mediaType) {\n                 additionalStubs.add(\"protocol-test-xml-stub.ts\");\n                 return \"compareEquivalentXmlBodies(bodyString, r.body.toString())\";\n             case \"application/octet-stream\":\n+                writer.addImport(\"Encoder\", \"__Encoder\", \"@aws-sdk/types\");\n                 additionalStubs.add(\"protocol-test-octet-stream-stub.ts\");\n-                return \"compareEquivalentOctetStreamBodies(client.config, bodyString, r.body)\";\n+                return \"compareEquivalentOctetStreamBodies(utf8Encoder, bodyString, r.body)\";\n             case \"text/plain\":\n                 additionalStubs.add(\"protocol-test-text-stub.ts\");\n                 return \"compareEquivalentTextBodies(bodyString, r.body)\";\n             default:\n                 LOGGER.warning(\"Unable to compare bodies with unknown media type `\" + mediaType\n                         + \"`, defaulting to direct comparison.\");\n+                writer.addImport(\"Encoder\", \"__Encoder\", \"@aws-sdk/types\");\n                 additionalStubs.add(\"protocol-test-unknown-type-stub.ts\");\n-                return \"compareEquivalentUnknownTypeBodies(client.config, bodyString, r.body)\";\n+                return \"compareEquivalentUnknownTypeBodies(utf8Encoder, bodyString, r.body)\";\n         }\n     }\n \n+    public void generateServerResponseTest(OperationShape operation, HttpResponseTestCase testCase) {\n+        Symbol serviceSymbol = serverSymbolProvider.toSymbol(service);\n+        Symbol operationSymbol = serverSymbolProvider.toSymbol(operation);\n+        Symbol handlerSymbol = serviceSymbol.expectProperty(\"handler\", Symbol.class);\n+        Symbol serviceOperationsSymbol = serviceSymbol.expectProperty(\"operations\", Symbol.class);\n+        testCase.getDocumentation().ifPresent(writer::writeDocs);\n+        String testName = testCase.getId() + \":ServerResponse\";\n+        writer.openBlock(\"it($S, async () => {\", \"});\\n\", testName, () -> {\n+            Symbol outputType = operationSymbol.expectProperty(\"outputType\", Symbol.class);\n+            writer.openBlock(\"class TestService implements Partial<$T> {\", \"}\", serviceSymbol, () -> {\n+                writer.openBlock(\"$L(input: any, request: HttpRequest): $T {\", \"}\",\n+                        operationSymbol.getName(), outputType, () -> {\n+                    Optional<ShapeId> outputOptional = operation.getOutput();\n+                    if (outputOptional.isPresent()) {\n+                        StructureShape outputShape = model.expectShape(outputOptional.get(), StructureShape.class);\n+                        writer.writeInline(\"let response = \");\n+                        testCase.getParams().accept(new CommandInputNodeVisitor(outputShape, true));\n+                        writer.write(\"return { ...response, '$$metadata': {} };\");\n+                    } else {\n+                        writer.write(\"return { '$$metadata': {} };\");\n+                    }\n+                });\n+            });\n+\n+            writer.write(\"const service: any = new TestService()\");\n+\n+            // There's a lot of setup here, including creating our own mux, serializers list, and ultimately\n+            // our own service handler. This is largely in service of avoiding having to go through the\n+            // request deserializer\n+            writer.addImport(\"httpbinding\", null, \"@aws-smithy/server-common\");\n+            writer.openBlock(\"const testMux = new httpbinding.HttpBindingMux<$S, keyof $T>([\", \"]);\",\n+                service.getId().getName(), serviceSymbol, () -> {\n+                    writer.openBlock(\"new httpbinding.UriSpec<$S, $S>('POST', [], [], {\", \"}),\",\n+                        service.getId().getName(), operation.getId().getName(), () -> {\n+                            writer.write(\"service: $S,\", service.getId().getName());\n+                            writer.write(\"operation: $S,\", operation.getId().getName());\n+                        });\n+                });\n+\n+            writer.write(\"const request = new HttpRequest({method: 'POST', hostname: 'example.com'});\");\n+\n+            String serializerName = ProtocolGenerator.getGenericSerFunctionName(operationSymbol) + \"Response\";\n+            writer.addImport(serializerName, serializerName,\n+                    \"./protocols/\" + ProtocolGenerator.getSanitizedName(protocolGenerator.getName()));\n+\n+            writer.addImport(\"OperationSerializer\", \"__OperationSerializer\", \"@aws-smithy/server-common\");\n+            writer.openBlock(\"const serFn: (op: $1T) => __OperationSerializer<$2T, $1T> = (op) => {\", \"};\",\n+                    serviceOperationsSymbol, serviceSymbol, () -> {\n+                writer.openBlock(\"return {\", \"};\", () -> {\n+                    writer.write(\"serialize: $L,\", serializerName);\n+                    writer.openBlock(\"deserialize: (output: any, context: any): Promise<any> => {\", \"},\", () -> {\n+                        writer.write(\"return Promise.resolve({});\");\n+                    });\n+                });\n+            });\n+\n+            writer.write(\"const handler = new $T(service, testMux, serFn);\", handlerSymbol);\n+            writer.write(\"let r = await handler.handle(request)\").write(\"\");\n+            writeHttpResponseAssertions(testCase);\n+        });\n+    }\n+\n     private void generateResponseTest(OperationShape operation, HttpResponseTestCase testCase) {\n         testCase.getDocumentation().ifPresent(writer::writeDocs);\n         String testName = testCase.getId() + \":Response\";\n@@ -657,10 +744,16 @@ private void writeParamAssertions(\n     private final class CommandInputNodeVisitor implements NodeVisitor<Void> {\n         private final StructureShape inputShape;\n         private Shape workingShape;\n+        private boolean appendSemicolon;\n \n         private CommandInputNodeVisitor(StructureShape inputShape) {\n+            this(inputShape, false);\n+        }\n+\n+        private CommandInputNodeVisitor(StructureShape inputShape, boolean appendSemicolon) {\n             this.inputShape = inputShape;\n             this.workingShape = inputShape;\n+            this.appendSemicolon = appendSemicolon;\n         }\n \n         @Override\n@@ -716,10 +809,25 @@ public Void objectNode(ObjectNode node) {\n \n             // Both objects and maps can use a majority of the same logic.\n             // Use \"as any\" to have TS complain less about undefined entries.\n-            writer.openBlock(\"{\", \"} as any,\\n\", () -> {\n+            String suffix = \"} as any\";\n+\n+            // When generating a server response test, we need the top level structure to have a semicolon\n+            // rather than a comma.\n+            if (appendSemicolon) {\n+                suffix += \";\";\n+                appendSemicolon = false;\n+            } else {\n+                suffix += \",\\n\";\n+            }\n+\n+            writer.openBlock(\"{\", suffix, () -> {\n                 Shape wrapperShape = this.workingShape;\n                 node.getMembers().forEach((keyNode, valueNode) -> {\n-                    writer.writeInline(\"$L: \", keyNode.getValue());\n+                    if (keyNode.getValue().matches(\"[^\\\\w]+\")) {\n+                        writer.writeInline(\"$L: \", keyNode.getValue());\n+                    } else {\n+                        writer.writeInline(\"$S: \", keyNode.getValue());\n+                    }\n \n                     // Grab the correct member related to the node member we have.\n                     MemberShape memberShape;"
  },
  {
    "sha": "15b017a24743936063585f9698da2a6d384e5c9d",
    "filename": "smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/base-package.json",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/awslabs/smithy-typescript/blob/fb5b097fba6358f836abf976ec81896f4b9c0717/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/base-package.json",
    "raw_url": "https://github.com/awslabs/smithy-typescript/raw/fb5b097fba6358f836abf976ec81896f4b9c0717/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/base-package.json",
    "contents_url": "https://api.github.com/repos/awslabs/smithy-typescript/contents/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/base-package.json?ref=fb5b097fba6358f836abf976ec81896f4b9c0717",
    "patch": "@@ -33,7 +33,7 @@\n     \"downlevel-dts\": \"0.7.0\",\n     \"jest\": \"^26.1.0\",\n     \"rimraf\": \"^3.0.0\",\n-    \"typedoc\": \"^0.19.2\",\n+    \"typedoc\": \"^0.20.0\",\n     \"typescript\": \"~4.1.2\"\n   },\n   \"engines\": {"
  },
  {
    "sha": "7a17093343dd583c3a784e7061bf72acfea7b3ba",
    "filename": "smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/protocol-test-octet-stream-stub.ts",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/awslabs/smithy-typescript/blob/fb5b097fba6358f836abf976ec81896f4b9c0717/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/protocol-test-octet-stream-stub.ts",
    "raw_url": "https://github.com/awslabs/smithy-typescript/raw/fb5b097fba6358f836abf976ec81896f4b9c0717/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/protocol-test-octet-stream-stub.ts",
    "contents_url": "https://api.github.com/repos/awslabs/smithy-typescript/contents/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/protocol-test-octet-stream-stub.ts?ref=fb5b097fba6358f836abf976ec81896f4b9c0717",
    "patch": "@@ -3,12 +3,12 @@\n  * discrepancies between the components.\n  */\n const compareEquivalentOctetStreamBodies = (\n-  config: any,\n+  utf8Encoder: __Encoder,\n   expectedBody: string,\n   generatedBody: Uint8Array\n ): Object => {\n   const expectedParts = {Value: expectedBody};\n-  const generatedParts = {Value: config.utf8Encoder(generatedBody)};\n+  const generatedParts = {Value: utf8Encoder(generatedBody)};\n \n   return compareParts(expectedParts, generatedParts);\n }"
  },
  {
    "sha": "04b095ba6152f64d34d5ef5b82f40b0adbf86287",
    "filename": "smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/protocol-test-unknown-type-stub.ts",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/awslabs/smithy-typescript/blob/fb5b097fba6358f836abf976ec81896f4b9c0717/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/protocol-test-unknown-type-stub.ts",
    "raw_url": "https://github.com/awslabs/smithy-typescript/raw/fb5b097fba6358f836abf976ec81896f4b9c0717/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/protocol-test-unknown-type-stub.ts",
    "contents_url": "https://api.github.com/repos/awslabs/smithy-typescript/contents/smithy-typescript-codegen/src/main/resources/software/amazon/smithy/typescript/codegen/protocol-test-unknown-type-stub.ts?ref=fb5b097fba6358f836abf976ec81896f4b9c0717",
    "patch": "@@ -3,13 +3,13 @@\n  * discrepancies between the components.\n  */\n const compareEquivalentUnknownTypeBodies = (\n-  config: any,\n+  utf8Encoder: __Encoder,\n   expectedBody: string,\n   generatedBody: string | Uint8Array\n ): Object => {\n   const expectedParts = {Value: expectedBody};\n   const generatedParts = {\n-    Value: generatedBody instanceof Uint8Array ? config.utf8Encoder(generatedBody) : generatedBody\n+    Value: generatedBody instanceof Uint8Array ? utf8Encoder(generatedBody) : generatedBody\n   };\n \n   return compareParts(expectedParts, generatedParts);"
  }
]
