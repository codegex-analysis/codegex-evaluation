[
  {
    "sha": "395b1d3dd649f1047d33ef32924f51c8b524ea9e",
    "filename": "Car.java",
    "status": "removed",
    "additions": 0,
    "deletions": 26,
    "changes": 26,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/665937cc8da029866fd481e9099bbb50c38ee248/Car.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/665937cc8da029866fd481e9099bbb50c38ee248/Car.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/Car.java?ref=665937cc8da029866fd481e9099bbb50c38ee248",
    "patch": "@@ -1,26 +0,0 @@\n-\n-public class Car {\n-\n-    private String brand;\n-    private int tankVolume;\n-    private boolean transmission;\n-\n-    public Car(String brand, int tankVolume, boolean transmission) {\n-\n-        this.tankVolume = tankVolume;\n-        this.brand = brand.toUpperCase();\n-        this.transmission = transmission;\n-    }\n-\n-    public String getBrand() {\n-        return brand;\n-    }\n-\n-    public int getTankVolume() {\n-        return tankVolume;\n-    }\n-\n-    public boolean isTransmission() {\n-        return transmission;\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "ee037cbf28234b3c2675f872456f6030792291d1",
    "filename": "java_/DateParse.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/DateParse.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/DateParse.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/DateParse.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,16 @@\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+public class DateParse {\n+    public static final String pattern = \"yyyy-MM-dd HH:mm:ss Z\";\n+\n+    public static Date strToDate(String strDate) {\n+        SimpleDateFormat template = new SimpleDateFormat(pattern);\n+        try {\n+            return template.parse(strDate);\n+        } catch (ParseException e) {\n+            return null;\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f3135970ab25a91c9e3ab29088a850e1d6c2f041",
    "filename": "java_/DateSortingType.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/DateSortingType.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/DateSortingType.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/DateSortingType.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,3 @@\n+public enum DateSortingType {\n+    ASENDING,DESCENDING\n+}"
  },
  {
    "sha": "007ba8dea952f1cf9c4a8cb9c3b29b39c1f64ce0",
    "filename": "java_/DomParser.java",
    "status": "added",
    "additions": 142,
    "deletions": 0,
    "changes": 142,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/DomParser.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/DomParser.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/DomParser.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,142 @@\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+public class DomParser implements ParseStratedgy, Variables {\n+    private String url;\n+\n+    public DomParser(String url) {\n+        this.url = url;\n+    }\n+\n+    @Override\n+    public Root parse() {\n+        Root root = new Root();\n+        Document doc;\n+        try {\n+            doc = buildDocument();\n+        } catch (Exception e) {\n+            System.out.println(\"Open parsing error\" + e.toString());\n+            return null;\n+        }\n+\n+        Node rootNode = doc.getFirstChild();\n+        NodeList rootChilds = rootNode.getChildNodes();\n+\n+        String name = null;\n+        String location = null;\n+        Node newsNode = null;\n+\n+        for (int i = 0; i < rootChilds.getLength(); i++) {\n+            if (rootChilds.item(i).getNodeType() != Node.ELEMENT_NODE) {\n+                continue;\n+            }\n+            switch (rootChilds.item(i).getNodeName()) {\n+                case TAG_NAME: {\n+                    name = rootChilds.item(i).getTextContent();\n+                    break;\n+                }\n+                case TAG_LOCATION: {\n+                    location = rootChilds.item(i).getTextContent();\n+                    break;\n+                }\n+                case TAG_NEWS: {\n+                    newsNode = rootChilds.item(i);\n+                    break;\n+                }\n+            }\n+        }\n+        if (newsNode == null) {\n+            return null;\n+        }\n+\n+        List<News> newsList = parsNews(newsNode);\n+        root.setName(name);\n+        root.setLocation(location);\n+        root.setNews(newsList);\n+\n+        System.out.println(\"Вы выбрали DOM-парсер\");\n+        return root;\n+    }\n+\n+    private Document buildDocument() throws Exception {\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        return dbf.newDocumentBuilder().parse(url);\n+    }\n+\n+    private List<News> parsNews(Node newsNode) {\n+        List<News> newsList = new ArrayList<>();\n+        NodeList newsChilds = newsNode.getChildNodes();\n+\n+        for (int i = 0; i < newsChilds.getLength(); i++) {\n+            if (newsChilds.item(i).getNodeType() != Node.ELEMENT_NODE) {\n+                continue;\n+            }\n+            if (!newsChilds.item(i).getNodeName().equals(TAG_ELEMENT)) {\n+                continue;\n+            }\n+            News news = parsElement(newsChilds.item(i));\n+            newsList.add(news);\n+        }\n+        return newsList;\n+    }\n+\n+    private News parsElement(Node elementNode) {\n+        int id = 0;\n+        String title = \"\";\n+        String description = \"\";\n+        boolean visible = false;\n+        String dateStr = null;\n+        Date date = null;\n+        List<String> keywords = new ArrayList<>();\n+        String element = \"\";\n+\n+        NodeList elementChilds = elementNode.getChildNodes();\n+        for (int j = 0; j < elementChilds.getLength(); j++) {\n+            if (elementChilds.item(j).getNodeType() != Node.ELEMENT_NODE) {\n+                continue;\n+            }\n+            switch (elementChilds.item(j).getNodeName()) {\n+                case TAG_ID: {\n+                    try {\n+                        id = Integer.valueOf(elementChilds.item(j).getTextContent());\n+                        break;\n+                    } catch (Exception e) {\n+                        System.out.println(\"Type not integer\" + e.toString());\n+                    }\n+                }\n+                case TAG_TITLE: {\n+                    title = elementChilds.item(j).getTextContent();\n+                    break;\n+                }\n+                case TAG_DESCRIPTION: {\n+                    description = elementChilds.item(j).getTextContent();\n+                    break;\n+                }\n+                case TAG_DATE: {\n+                    dateStr = elementChilds.item(j).getTextContent();\n+                    date = DateParse.strToDate(dateStr);\n+                    break;\n+                }\n+                case TAG_VISIBLE: {\n+                    visible = Boolean.valueOf(elementChilds.item(j).getTextContent());\n+                    break;\n+                }\n+                case TAG_KEYWORDS: {\n+                    for (int k = 0; k < elementChilds.getLength(); k++) {\n+                        element = elementChilds.item(j).getTextContent();\n+                    }\n+                    keywords.add(element);\n+                    break;\n+                }\n+            }\n+        }\n+        News news = new News(date, description, id, keywords, title, visible);\n+        return news;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a6b5d54142abf71d73447077fd2ae17955f021e1",
    "filename": "java_/Downloader.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/Downloader.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/Downloader.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/Downloader.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,38 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+public class Downloader {\n+\n+    //метод для скачивания файла из интернета при помощи HttpURLConnection\n+    public static String load(String URL) {\n+\n+        InputStream inputStream = null;\n+        try (OutputStream outputStream = new ByteArrayOutputStream()) {\n+\n+            URL url = new URL(URL);\n+            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n+            int responseCode = httpURLConnection.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                inputStream = httpURLConnection.getInputStream();\n+                int byteRead = -1;\n+                byte[] buffer = new byte[1024 * 10];\n+                while ((byteRead = inputStream.read(buffer)) != -1) {\n+                    outputStream.write(buffer, 0, byteRead);\n+                }\n+                return outputStream.toString();\n+            }\n+        } catch (IOException e) {\n+            System.out.println(\"Internet connection error\");\n+        } finally {\n+            try {\n+                inputStream.close();\n+            } catch (IOException e) {\n+            }\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "60651428ca155cc25e342b3815baae81261b19f1",
    "filename": "java_/GsonParser.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/GsonParser.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/GsonParser.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/GsonParser.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,24 @@\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+public class GsonParser extends Downloader implements ParseStratedgy {\n+    private String stringToParse;\n+\n+    public GsonParser(String stringToParse) {\n+        this.stringToParse = stringToParse;\n+    }\n+\n+    public Root parse() {\n+        Gson gson = new GsonBuilder().setDateFormat(DateParse.pattern).create();\n+\n+        try {\n+            Root root = gson.fromJson(stringToParse, Root.class);\n+            System.out.println(\"Вы выбрали Gson-парсер\");\n+            return root;\n+\n+        } catch (Exception e) {\n+            System.out.println(\"Parsing error\" + e.toString());\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3496e1b6cb4dc40ebdde9f9f634e6c70d6782e2c",
    "filename": "java_/News.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/News.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/News.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/News.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,101 @@\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class News {\n+\n+    private Date date;\n+    private String description;\n+    private int id;\n+    private List<String> keywords;\n+    private String title;\n+    private boolean visible;\n+\n+    public News() {\n+    }\n+\n+    public News(Date date, String description, int id, List<String> keywords, String title, boolean visible) {\n+        this.date = date;\n+        this.description = description;\n+        this.id = id;\n+        this.keywords = keywords;\n+        this.title = title;\n+        this.visible = visible;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public Date getDate() {\n+        return date;\n+    }\n+\n+    public void setDate(Date date) {\n+        this.date = date;\n+    }\n+\n+    public List<String> getKeywords() {\n+        return keywords;\n+    }\n+\n+    public void setKeywords(List<String> keywords) {\n+        this.keywords = keywords;\n+    }\n+\n+    public boolean isVisible() {\n+        return visible;\n+    }\n+\n+    public void setVisible(boolean visible) {\n+        this.visible = visible;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"News{\" +\n+                \"id=\" + id +\n+                \", title='\" + title + '\\'' +\n+                \", description='\" + description + '\\'' +\n+                \", date='\" + date + '\\'' +\n+                \", keywords=\" + keywords +\n+                \", visible=\" + visible +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        News news = (News) o;\n+        return date == news.date &&\n+                Objects.equals(id, news.id) && Objects.equals(title, news.title) && Objects.equals(description, news.description)\n+                && Objects.equals(keywords, news.keywords) && Objects.equals(visible, news.visible);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id, date, title, description, date, keywords, visible);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "67b9d0e1bc8d842a06b1b6a0ddf28e367ff1adce",
    "filename": "java_/ParseStratedgy.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/ParseStratedgy.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/ParseStratedgy.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/ParseStratedgy.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,3 @@\n+public interface ParseStratedgy {\n+        Root parse();\n+    }"
  },
  {
    "sha": "97c61a347d466321dbed67a1caa5b49c08b2f687",
    "filename": "java_/ParsingMethodType.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/ParsingMethodType.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/ParsingMethodType.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/ParsingMethodType.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,3 @@\n+public enum ParsingMethodType {\n+    XML,JSON\n+}"
  },
  {
    "sha": "c101a25a8466d08dc2cd9d8a229c203baf62ca7e",
    "filename": "java_/Root.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/Root.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/Root.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/Root.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,32 @@\n+import java.util.List;\n+\n+public class Root {\n+    private String name;\n+    private String location;\n+    private List<News> news;\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public List<News> getNews() {\n+        return news;\n+    }\n+\n+    public void setLocation(String location) {\n+        this.location = location;\n+    }\n+\n+    public void setNews(List<News> news) {\n+        this.news = news;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Root{\" +\n+                \"name='\" + name + '\\'' +\n+                \", location='\" + location + '\\'' +\n+                \", news=\" + news +\n+                '}';\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "45c59666217636af73b06e11cedb3f1ca0c3745b",
    "filename": "java_/SortByDateAscending.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/SortByDateAscending.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/SortByDateAscending.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/SortByDateAscending.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,9 @@\n+import java.util.Comparator;\n+\n+public class SortByDateAscending implements Comparator<News> {\n+\n+    @Override\n+    public int compare(News news1, News news2) {\n+       return news1.getDate().compareTo(news2.getDate());\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7146be9816d6bb05e0d74b0a755da69f8c64e62c",
    "filename": "java_/SortByDateDescending.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/SortByDateDescending.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/SortByDateDescending.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/SortByDateDescending.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,14 @@\n+import java.util.Comparator;\n+\n+public class SortByDateDescending implements Comparator<News> {\n+    @Override\n+    public int compare(News news1, News news2) {\n+        if (news1.getDate().compareTo(news2.getDate()) > 0) {\n+            return -1;\n+        }\n+        if (news1.getDate().compareTo(news2.getDate()) == 0) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e18801d207ba43edde4d1f855e36ad6be621b00b",
    "filename": "java_/ThreadSelectDateSorting.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/ThreadSelectDateSorting.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/ThreadSelectDateSorting.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/ThreadSelectDateSorting.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,29 @@\n+import java.util.Collections;\n+\n+//поток осуществляет сортировку новостей по возрастанию/убыванию даты\n+public class ThreadSelectDateSorting extends Thread {\n+\n+    DateSortingType dateSorting;\n+    Root root;\n+\n+    public ThreadSelectDateSorting(DateSortingType dateSorting, Root root) {\n+        this.dateSorting = dateSorting;\n+        this.root = root;\n+    }\n+    @Override\n+    public void run() {\n+        switch (dateSorting) {\n+            case ASENDING: {\n+                Collections.sort(root.getNews(), new SortByDateAscending());\n+                break;\n+            }\n+            case DESCENDING: {\n+                Collections.sort(root.getNews(), new SortByDateDescending());\n+                break;\n+            }\n+            default:\n+                throw new IllegalStateException(\"Unexpected value: \" + dateSorting);\n+        }\n+        root.getNews();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "389ddfe2369c497afcf5035ca3c175603e73a5b8",
    "filename": "java_/ThreadSelectDoParse.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/ThreadSelectDoParse.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/ThreadSelectDoParse.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/ThreadSelectDoParse.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,36 @@\n+\n+//поток осуществляет парсинг файла, скаченного из интернета\n+public class ThreadSelectDoParse extends Thread {\n+\n+    private Root root;\n+    private ParsingMethodType type;\n+\n+\n+    public ThreadSelectDoParse(ParsingMethodType type) {\n+        this.type = type;\n+    }\n+\n+    public Root getRoot() {\n+        return root;\n+    }\n+\n+    @Override\n+    public void run() {\n+        ParseStratedgy parserStratedgy;\n+        switch (type) {\n+            case XML: {\n+                parserStratedgy = new DomParser(UrlXmlUtils.URL);\n+                break;\n+            }\n+            case JSON: {\n+                String strToParse = Downloader.load(UrlJsonUtils.URL);\n+                parserStratedgy = new GsonParser(strToParse);\n+                break;\n+            }\n+            default:\n+                throw new IllegalStateException(\"Unexpected value: \" + type);\n+        }\n+        root = parserStratedgy.parse();\n+        String resultToPrint = \"Root \" + root.toString();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ecfdf2f991e1a14ba9d7f7833869032939bc6c4e",
    "filename": "java_/TreadSearchByTegValue.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/TreadSearchByTegValue.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/TreadSearchByTegValue.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/TreadSearchByTegValue.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,38 @@\n+import java.util.Scanner;\n+\n+//в поотоке осуществялет поиск новостей по ключевому слову\n+public class TreadSearchByTegValue extends Thread {\n+\n+    public TreadSearchByTegValue(Root root) {\n+        this.root = root;\n+    }\n+\n+    Root root;\n+    public Root getRoot() {\n+        return root;\n+    }\n+\n+    News news;\n+    public News getNews() {\n+        return news;\n+    }\n+\n+    @Override\n+    public void run() {\n+        String keyWordValue = valueForSearch();\n+        for (News news : root.getNews()) {\n+            for (String value : news.getKeywords()) {\n+                if (value.equals(keyWordValue)) {\n+                    System.out.println(\"результат поиска: \" + news);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static String valueForSearch() {\n+        Scanner scan = new Scanner(System.in);\n+        System.out.println(\"Введите ключевое слово:\");\n+        String valueForSearch = scan.next();\n+        return valueForSearch;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "dbe2906767ae73d28ea4e213b755a309360ce566",
    "filename": "java_/UrlJsonUtils.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/UrlJsonUtils.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/UrlJsonUtils.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/UrlJsonUtils.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,3 @@\n+public interface UrlJsonUtils {\n+  String URL = \"https://api.kiparo.com/static/it_news.json\";\n+}"
  },
  {
    "sha": "0fee1d30c317b0b857d2b9e29010efce8a73dc45",
    "filename": "java_/UrlXmlUtils.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/UrlXmlUtils.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/UrlXmlUtils.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/UrlXmlUtils.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,3 @@\n+public interface UrlXmlUtils {\n+    String URL = \"https://api.kiparo.com/static/it_news.xml\";\n+}"
  },
  {
    "sha": "93ddf338d6a9bcec6748a3b3c8d0a273338d9e01",
    "filename": "java_/UsersOptions.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/UsersOptions.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/UsersOptions.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/UsersOptions.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,3 @@\n+public enum UsersOptions {\n+    SORT_BY_DATE, SEARCH_BY_KEYWORD,EXIT\n+}"
  },
  {
    "sha": "be1a5b517ad16ae82f2de2245d1cd7ea8a424e7e",
    "filename": "java_/Variables.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/Variables.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/Variables.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/Variables.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,14 @@\n+public interface Variables {\n+\n+    String TAG_ID = \"id\";\n+    String TAG_TITLE = \"title\";\n+    String TAG_DESCRIPTION = \"description\";\n+    String TAG_DATE = \"date\";\n+    String TAG_KEYWORDS = \"keywords\";\n+    String TAG_VISIBLE = \"visible\";\n+    String TAG_ELEMENT = \"element\";\n+\n+    String TAG_NAME = \"name\";\n+    String TAG_LOCATION = \"location\";\n+    String TAG_NEWS = \"news\";\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3c72d8bed08ac4939b2234bc8f02188a929baef6",
    "filename": "java_/main.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/main.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/6e04b87ac38ca0230388320fe8674a75cd71d7af/java_/main.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/java_/main.java?ref=6e04b87ac38ca0230388320fe8674a75cd71d7af",
    "patch": "@@ -0,0 +1,109 @@\n+import java.util.List;\n+import java.util.Scanner;\n+\n+public class main {\n+    private static final String XML = \"1\";\n+    private static final String JSON = \"2\";\n+\n+    public static void main(String[] args) {\n+\n+        //парсинг xml(json) в зависимости от выбора пользователя\n+        ParsingMethodType type = null;\n+        DateSortingType dateSorting = null;\n+        UsersOptions usersOptions = null;\n+\n+        int parsingMethod = chooseParse();\n+        if (parsingMethod == 1) {\n+            type = ParsingMethodType.XML;\n+        } else {\n+            if (parsingMethod == 2) {\n+                type = ParsingMethodType.JSON;\n+            }\n+        }\n+        ThreadSelectDoParse threadSelectDoParse = new ThreadSelectDoParse(type);\n+        threadSelectDoParse.start();\n+        try {\n+            threadSelectDoParse.join();\n+        } catch (InterruptedException e) {\n+        }\n+\n+        Root root = threadSelectDoParse.getRoot();\n+        System.out.println(root);                    //результат выбранного парсинга\n+\n+        System.out.println(\"Выберите необходимое действие: \");\n+        Scanner scan = new Scanner(System.in);\n+        System.out.println(\"1-\" + UsersOptions.SORT_BY_DATE.toString() +\n+                \"  2-\" + UsersOptions.SEARCH_BY_KEYWORD.toString() +\n+                \"  3-\" + UsersOptions.EXIT.toString());\n+        int choose = scan.nextInt();\n+        if (choose == 1) {\n+            usersOptions = UsersOptions.SORT_BY_DATE;\n+        }\n+        if (choose == 2) {\n+            usersOptions = UsersOptions.SEARCH_BY_KEYWORD;\n+        }\n+        if (choose == 3) {\n+            usersOptions = UsersOptions.EXIT;\n+        }\n+        switch (usersOptions) {\n+            case SORT_BY_DATE: {\n+                int dateSortingChoose = chooseDateSorting();\n+                if (dateSortingChoose == 1) {\n+                    dateSorting = DateSortingType.ASENDING;\n+                } else {\n+                    if (dateSortingChoose == 2) {\n+                        dateSorting = DateSortingType.DESCENDING;\n+                    }\n+                }\n+                ThreadSelectDateSorting threadSelectDateSorting = new ThreadSelectDateSorting(dateSorting, root);\n+                threadSelectDateSorting.start();\n+                try {\n+                    threadSelectDateSorting.join();\n+                } catch (InterruptedException e) {\n+                }\n+                printInput(root.getNews());\n+                break;\n+            }\n+            case SEARCH_BY_KEYWORD: {\n+                TreadSearchByTegValue treadSearchByTegValue = new TreadSearchByTegValue(root);\n+                treadSearchByTegValue.start();\n+                try {\n+                    treadSearchByTegValue.join();\n+                } catch (InterruptedException e) {\n+                }\n+                break;\n+            }\n+            case EXIT: {\n+                System.out.println(\"Программа завершена\");\n+                break;\n+            }\n+            default: {\n+                throw new IllegalStateException(\"Unexpected value: \" + parsingMethod);\n+            }\n+        }\n+    }\n+\n+    public static int chooseParse() {\n+        Scanner scanner = new Scanner(System.in);\n+        System.out.println(\"Please, select a parsing method:\" + \"\\n\" +\n+                \"1-\" + ParsingMethodType.XML.toString() + \"\\n\" +\n+                \"2-\" + ParsingMethodType.JSON.toString());\n+        final int parsingMethod = scanner.nextInt();\n+        return parsingMethod;\n+    }\n+\n+    public static int chooseDateSorting() {\n+        Scanner scanner = new Scanner(System.in);\n+        System.out.println(\"Please, select a sorting types:\" + \"\\n\" +\n+                \"1-\" + DateSortingType.ASENDING.toString() + \"\\n\" +\n+                \"2-\" + DateSortingType.DESCENDING.toString());\n+        final int dateSorting = scanner.nextInt();\n+        return dateSorting;\n+    }\n+\n+    public static void printInput(List<News> news) {\n+        for (News value : news) {\n+            System.out.println(value);\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d159517ae4276fd0cb087d84d782fb76627c288b",
    "filename": "main.java",
    "status": "removed",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/665937cc8da029866fd481e9099bbb50c38ee248/main.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/665937cc8da029866fd481e9099bbb50c38ee248/main.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/main.java?ref=665937cc8da029866fd481e9099bbb50c38ee248",
    "patch": "@@ -1,52 +0,0 @@\n-import java.util.Scanner;\n-\n-public class Main {\n-\n-    private static final int CARSSIZE = 3;\n-    int cars[];\n-\n-    public static void main(String[] arg) {\n-        Car[] cars = Main.vvodInfo();\n-        printInfo(cars);\n-        Car[] searchcars = vvodSearch(cars);\n-        printInfo(searchcars);\n-    }\n-\n-    public static Car[] vvodInfo() {\n-        Car[] cars = new Car[CARSSIZE];\n-        for (int i = 0; i < cars.length; i++) {\n-            Scanner scanner = new Scanner(System.in);\n-            System.out.println(\"Введите марку авто\");\n-            String brand = scanner.nextLine();\n-            System.out.println(\"Введите объем бака автомобиля\");\n-            int tankVolume = scanner.nextInt();\n-            System.out.println(\"Выберите верное: коробка автомат - true; механика - false\");\n-            boolean transmission = scanner.nextBoolean();\n-            Car car = new Car(brand, tankVolume, transmission);\n-            cars[i] = car;\n-        }\n-        return cars;\n-    }\n-\n-    public static void printInfo(Car[] cars) {\n-        for (int i = 0; i < cars.length; i++) {\n-            System.out.println(\"Car model: \" + cars[i].getBrand() + \"  Tank volume: \" + cars[i].getTankVolume() + \"  Automаtic transmission: \" + cars[i].isTransmission());\n-        }\n-    }\n-    public static Car[] vvodSearch(Car[] cars) {\n-        System.out.println(\"Введите марку авто для поиска\");\n-        Scanner scanner = new Scanner(System.in);\n-        String brand = scanner.nextLine();\n-        Car[] carsFilter = new Car[cars.length];\n-        int j = 0;\n-        for (int i = 0; i < cars.length; i++) {\n-            if (cars[i].getBrand().equals(brand.toUpperCase())) {\n-                carsFilter[j] = cars[i];\n-                j++;\n-            }\n-        }\n-        Car[] carsResult = new Car[j];\n-        System.arraycopy(carsFilter, 0, carsResult, 0, j);\n-        return carsResult;\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "bcc62cf9f25f33ab6cbac5064335e1b7c773dddb",
    "filename": "main2.java",
    "status": "removed",
    "additions": 0,
    "deletions": 27,
    "changes": 27,
    "blob_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/blob/665937cc8da029866fd481e9099bbb50c38ee248/main2.java",
    "raw_url": "https://github.com/belorusochkayul/Jakovenko_JAVA/raw/665937cc8da029866fd481e9099bbb50c38ee248/main2.java",
    "contents_url": "https://api.github.com/repos/belorusochkayul/Jakovenko_JAVA/contents/main2.java?ref=665937cc8da029866fd481e9099bbb50c38ee248",
    "patch": "@@ -1,27 +0,0 @@\n-import java.util.Scanner;\n-\n-public class main2 {\n-\n-    public static void main(String[] args) {\n-\n-        int[] first = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n-        int[] second = {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};\n-        int[] result = new int[second.length + first.length];\n-        System.arraycopy(second, 0, result, 0, second.length / 2);\n-        System.arraycopy(first, 0, result, 10, first.length);\n-        System.arraycopy(second, 0, result, 20, second.length / 2);\n-\n-        System.out.println(\"Source1:\");\n-        printArray(first);\n-        System.out.println(\"Source2:\");\n-        printArray(second);\n-        System.out.println(\"Result:\");\n-        printArray(result);\n-    }\n-\n-    static void printArray(int[] array) {\n-        for (int i : array)\n-            System.out.printf(\"%3d\", i);  //увидела такой вариант с printf, решила попробовать\n-        System.out.println();\n-    }\n-}\n\\ No newline at end of file"
  }
]
