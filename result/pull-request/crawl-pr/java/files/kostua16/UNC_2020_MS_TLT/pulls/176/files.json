[
  {
    "sha": "d1c088f80e11632d1b0c34d233deb59105ff532a",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "status": "modified",
    "additions": 36,
    "deletions": 37,
    "changes": 73,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -22,47 +22,46 @@\n @EqualsAndHashCode\n public class PaymentRequest {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long paymentRequestId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long paymentRequestId;\n \n-    @NotNull(message = \"Incorrect service ID\")\n-    @Min(value = 1L, message = \"Incorrect service ID\")\n-    @Column(nullable = false, updatable = false)\n-    private Long serviceId;\n+  @NotNull(message = \"Incorrect service ID\")\n+  @Min(value = 1L, message = \"Incorrect service ID\")\n+  @Column(nullable = false, updatable = false)\n+  private Long serviceId;\n \n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(value = 1L, message = \"Incorrect citizen ID\")\n-    @Column(nullable = false, updatable = false)\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(value = 1L, message = \"Incorrect citizen ID\")\n+  @Column(nullable = false, updatable = false)\n+  private Long citizenId;\n \n-    @NotNull\n-    @Column(nullable = false)\n-    private Boolean status;\n+  @NotNull\n+  @Column(nullable = false)\n+  private Boolean status;\n \n-    @NotNull(message = \"Incorrect amount\")\n-    @Min(value = 1, message = \"Incorrect amount\")\n-    @Column(nullable = false)\n-    private Integer amount;\n+  @NotNull(message = \"Incorrect amount\")\n+  @Min(value = 1, message = \"Incorrect amount\")\n+  @Column(nullable = false)\n+  private Integer amount;\n \n-    @NotNull(message = \"Incorrect tax ID\")\n-    @Min(value = 1L, message = \"Incorrect tax ID\")\n-    @Column(nullable = false, updatable = false, unique = true)\n-    private Long taxId;\n+  @NotNull(message = \"Incorrect tax ID\")\n+  @Min(value = 1L, message = \"Incorrect tax ID\")\n+  @Column(nullable = false, updatable = false, unique = true)\n+  private Long taxId;\n \n-    @Builder\n-    public PaymentRequest(\n-        final Long paymentRequestId,\n-        final Long serviceId,\n-        final Integer amount,\n-        final Long citizenId,\n-        final Long taxId\n-    ) {\n-        this.paymentRequestId = paymentRequestId;\n-        this.serviceId = serviceId;\n-        this.citizenId = citizenId;\n-        this.status = false;\n-        this.amount = amount;\n-        this.taxId = taxId;\n-    }\n+  @Builder\n+  public PaymentRequest(\n+      final Long paymentRequestId,\n+      final Long serviceId,\n+      final Integer amount,\n+      final Long citizenId,\n+      final Long taxId) {\n+    this.paymentRequestId = paymentRequestId;\n+    this.serviceId = serviceId;\n+    this.citizenId = citizenId;\n+    this.status = false;\n+    this.amount = amount;\n+    this.taxId = taxId;\n+  }\n }"
  },
  {
    "sha": "5955464cff6a93fad69be060bab2abdf5738d36c",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "status": "modified",
    "additions": 34,
    "deletions": 35,
    "changes": 69,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,7 @@\n package nc.unc.cs.services.bank.entities;\n \n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import java.util.Date;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -9,8 +11,6 @@\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import java.util.Date;\n-import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -26,42 +26,41 @@\n @EqualsAndHashCode\n public class Transaction {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long transactionId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long transactionId;\n \n-    @Column(nullable = false, updatable = false)\n-    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    @NotNull\n-    private Date creationDate;\n+  @Column(nullable = false, updatable = false)\n+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n+  @Temporal(value = TemporalType.TIMESTAMP)\n+  @NotNull\n+  private Date creationDate;\n \n-    @NotNull\n-    @Min(value = 1, message = \"Incorrect payment amount\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer amount;\n+  @NotNull\n+  @Min(value = 1, message = \"Incorrect payment amount\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer amount;\n \n-    @NotNull\n-    @Min(value = 1L, message = \"Incorrect payment request ID\")\n-    @Column(nullable = false, updatable = false)\n-    private Long paymentRequestId;\n+  @NotNull\n+  @Min(value = 1L, message = \"Incorrect payment request ID\")\n+  @Column(nullable = false, updatable = false)\n+  private Long paymentRequestId;\n \n-    @NotNull\n-    @Min(value = 1L, message = \"Incorrect citizen ID\")\n-    @Column(nullable = false, updatable = false)\n-    private Long citizenId;\n+  @NotNull\n+  @Min(value = 1L, message = \"Incorrect citizen ID\")\n+  @Column(nullable = false, updatable = false)\n+  private Long citizenId;\n \n-    @Builder\n-    public Transaction(\n-        final Long transactionId,\n-        final Integer amount,\n-        final Long paymentRequestId,\n-        final Long citizenId\n-    ) {\n-        this.transactionId = transactionId;\n-        this.creationDate = new Date();\n-        this.amount = amount;\n-        this.paymentRequestId = paymentRequestId;\n-        this.citizenId = citizenId;\n-    }\n+  @Builder\n+  public Transaction(\n+      final Long transactionId,\n+      final Integer amount,\n+      final Long paymentRequestId,\n+      final Long citizenId) {\n+    this.transactionId = transactionId;\n+    this.creationDate = new Date();\n+    this.amount = amount;\n+    this.paymentRequestId = paymentRequestId;\n+    this.citizenId = citizenId;\n+  }\n }"
  },
  {
    "sha": "830cc5ea3a7affd90a597ff54b379d6ea17a89c0",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "status": "modified",
    "additions": 132,
    "deletions": 156,
    "changes": 288,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,8 +1,8 @@\n package nc.unc.cs.services.bank.services;\n \n+import feign.FeignException;\n import java.util.Date;\n import java.util.List;\n-import feign.FeignException;\n import nc.unc.cs.services.bank.entities.PaymentRequest;\n import nc.unc.cs.services.bank.entities.Transaction;\n import nc.unc.cs.services.bank.exceptions.PaymentRequestNotFoundException;\n@@ -21,165 +21,141 @@\n @Service\n public class BankService {\n \n-    /** Логгер. */\n-    private static final Logger logger = LoggerFactory.getLogger(BankService.class);\n-\n-    /** Репозиторий выставленных счетов. */\n-    private final PaymentRequestRepository paymentRequestRepository;\n-    /** Репозиторий с информацией о проведённых операциях. */\n-    private final TransactionRepository transactionRepository;\n-    /** Сервис логгирования. */\n-    private final LoggingService logging;\n-    /** Налоговый сервис. */\n-    private final TaxIntegrationService taxIntegrationService;\n-\n-    @Autowired\n-    public BankService(\n-        final PaymentRequestRepository paymentRequestRepository,\n-        final TransactionRepository transactionRepository,\n-        final TaxIntegrationService taxIntegrationService,\n-        final LoggingService logging\n-    ) {\n-        this.paymentRequestRepository = paymentRequestRepository;\n-        this.transactionRepository = transactionRepository;\n-        this.taxIntegrationService = taxIntegrationService;\n-        this.logging = logging;\n-    }\n-\n-    /**\n-     * Возвращает выставленный счёт (PaymentRequest).\n-     *\n-     * @param paymentRequestId идентификатор ыставленного счёта.\n-     * @return счёт на оплату\n-     * @throws PaymentRequestNotFoundException\n-     *      если не удалсться найти PaymentRequest\n-     */\n-    public PaymentRequest findPaymentRequestById(\n-        final Long paymentRequestId\n-    ) throws PaymentRequestNotFoundException {\n-        return this.paymentRequestRepository\n-            .findById(paymentRequestId)\n-            .orElseThrow(\n-                () -> new PaymentRequestNotFoundException(paymentRequestId)\n-            );\n-    }\n-\n-    /**\n-     * Регистрация проведённых услуг.\n-     *\n-     * @param paymentPayload информация для регистрации усуги\n-     * @return идентификатор выставленного счёта;\n-     * @throws PaymentRequestNotFoundException\n-     *      если не удалсться найти PaymentRequest\n-     */\n-    public ResponseEntity<Long> requestPayment(\n-        final PaymentPayload paymentPayload\n-    ) throws FeignException {\n-        final PaymentRequest paymentRequest = PaymentRequest\n-            .builder()\n+  /** Логгер. */\n+  private static final Logger logger = LoggerFactory.getLogger(BankService.class);\n+\n+  /** Репозиторий выставленных счетов. */\n+  private final PaymentRequestRepository paymentRequestRepository;\n+  /** Репозиторий с информацией о проведённых операциях. */\n+  private final TransactionRepository transactionRepository;\n+  /** Сервис логгирования. */\n+  private final LoggingService logging;\n+  /** Налоговый сервис. */\n+  private final TaxIntegrationService taxIntegrationService;\n+\n+  @Autowired\n+  public BankService(\n+      final PaymentRequestRepository paymentRequestRepository,\n+      final TransactionRepository transactionRepository,\n+      final TaxIntegrationService taxIntegrationService,\n+      final LoggingService logging) {\n+    this.paymentRequestRepository = paymentRequestRepository;\n+    this.transactionRepository = transactionRepository;\n+    this.taxIntegrationService = taxIntegrationService;\n+    this.logging = logging;\n+  }\n+\n+  /**\n+   * Возвращает выставленный счёт (PaymentRequest).\n+   *\n+   * @param paymentRequestId идентификатор ыставленного счёта.\n+   * @return счёт на оплату\n+   * @throws PaymentRequestNotFoundException если не удалсться найти PaymentRequest\n+   */\n+  public PaymentRequest findPaymentRequestById(final Long paymentRequestId)\n+      throws PaymentRequestNotFoundException {\n+    return this.paymentRequestRepository\n+        .findById(paymentRequestId)\n+        .orElseThrow(() -> new PaymentRequestNotFoundException(paymentRequestId));\n+  }\n+\n+  /**\n+   * Регистрация проведённых услуг.\n+   *\n+   * @param paymentPayload информация для регистрации усуги\n+   * @return идентификатор выставленного счёта;\n+   * @throws PaymentRequestNotFoundException если не удалсться найти PaymentRequest\n+   */\n+  public ResponseEntity<Long> requestPayment(final PaymentPayload paymentPayload)\n+      throws FeignException {\n+    final PaymentRequest paymentRequest =\n+        PaymentRequest.builder()\n             .serviceId(paymentPayload.getServiceId())\n             .citizenId(paymentPayload.getCitizenId())\n             .amount(paymentPayload.getAmount())\n             .build();\n \n-        final Long taxId = this.taxIntegrationService\n-            .createTax(\n-                paymentPayload.getServiceId(),\n-                paymentPayload.getCitizenId(),\n-                paymentPayload.getTaxAmount()\n-            );\n-        paymentRequest.setTaxId(taxId);\n-\n-        logger.info(\"Tax with ID = {} has been created\", taxId);\n-        logging.addLog(\n-            LogEntry\n-                .builder()\n-                .service(\"bank\")\n-                .created(new Date())\n-                .message(\n-                    String.format(\n-                        \"Tax with ID = %d has been created for serviceId = %d, citizenId = %d\",\n-                        taxId,\n-                        paymentPayload.getServiceId(),\n-                        paymentPayload.getCitizenId()\n-                    )\n-                )\n-                .build()\n-        );\n-        this.paymentRequestRepository.save(paymentRequest);\n-\n-        return ResponseEntity.ok(paymentRequest.getPaymentRequestId());\n-    }\n-\n-    /**\n-     * Оплата выставленного счёта.\n-     *\n-     * @param paymentRequestId идентификатор выставленного счёта\n-     * @return http-ответ, в теле которого находится чек\n-     * @throws FeignException если не удасться обратиться к Банковскому сервису\n-     * @throws PaymentRequestNotFoundException\n-     *      если не удалсться найти PaymentRequest\n-     */\n-    public ResponseEntity<Transaction> payment(\n-        final Long paymentRequestId\n-    ) throws FeignException, PaymentRequestNotFoundException {\n-\n-        final PaymentRequest paymentRequest;\n-        final ResponseEntity<Transaction> response;\n-\n-        paymentRequest = findPaymentRequestById(paymentRequestId);\n-        Boolean isPaid = paymentRequest.getStatus();\n-        if (Boolean.TRUE.equals(isPaid)) {\n-            logger.error(\"Payment Request with ID = {} already paid!\", paymentRequestId);\n-            response = ResponseEntity\n-                .status(HttpStatus.BAD_REQUEST)\n-                .body(null);\n-        } else {\n-            paymentRequest.setStatus(true);\n-            final Transaction transaction = Transaction\n-                .builder()\n-                .paymentRequestId(paymentRequestId)\n-                .amount(paymentRequest.getAmount())\n-                .citizenId(paymentRequest.getCitizenId())\n-                .build();\n-            this.taxIntegrationService.payTax(\n-                paymentRequest.getTaxId(),\n-                transaction.getCreationDate()\n-            );\n-            logging.addLog(\n-                LogEntry\n-                    .builder()\n-                    .service(\"bank\")\n-                    .created(new Date())\n-                    .message(String.format(\"Tax paid for id = %d\", paymentRequestId))\n-                    .build()\n-            );\n-\n-            this.transactionRepository.save(transaction);\n-            this.paymentRequestRepository.save(paymentRequest);\n-            response = ResponseEntity.ok(transaction);\n-        }\n-        return response;\n-    }\n-\n-    /**\n-     * Возвращает статус оплаты выставленного счёта.\n-     *\n-     * @param paymentId идентификатор высталвенного счёта\n-     * @return статус оплаты\n-     */\n-    public Boolean isPaid(final Long paymentId) {\n-        return findPaymentRequestById(paymentId).getStatus();\n-    }\n-\n-    /**\n-     * Возвращает все неоплаченные счета указанного гражданина.\n-     *\n-     * @param citizenId идентификатор гражданина\n-     * @return список выставленных счетов\n-     */\n-    public List<PaymentRequest> getDebtPaymentRequests(final Long citizenId) {\n-        return this.paymentRequestRepository\n-            .findAllByCitizenIdAndStatus(citizenId, false);\n+    final Long taxId =\n+        this.taxIntegrationService.createTax(\n+            paymentPayload.getServiceId(),\n+            paymentPayload.getCitizenId(),\n+            paymentPayload.getTaxAmount());\n+    paymentRequest.setTaxId(taxId);\n+\n+    logger.info(\"Tax with ID = {} has been created\", taxId);\n+    logging.addLog(\n+        LogEntry.builder()\n+            .service(\"bank\")\n+            .created(new Date())\n+            .message(\n+                String.format(\n+                    \"Tax with ID = %d has been created for serviceId = %d, citizenId = %d\",\n+                    taxId, paymentPayload.getServiceId(), paymentPayload.getCitizenId()))\n+            .build());\n+    this.paymentRequestRepository.save(paymentRequest);\n+\n+    return ResponseEntity.ok(paymentRequest.getPaymentRequestId());\n+  }\n+\n+  /**\n+   * Оплата выставленного счёта.\n+   *\n+   * @param paymentRequestId идентификатор выставленного счёта\n+   * @return http-ответ, в теле которого находится чек\n+   * @throws FeignException если не удасться обратиться к Банковскому сервису\n+   * @throws PaymentRequestNotFoundException если не удалсться найти PaymentRequest\n+   */\n+  public ResponseEntity<Transaction> payment(final Long paymentRequestId)\n+      throws FeignException, PaymentRequestNotFoundException {\n+\n+    final PaymentRequest paymentRequest;\n+    final ResponseEntity<Transaction> response;\n+\n+    paymentRequest = findPaymentRequestById(paymentRequestId);\n+    Boolean isPaid = paymentRequest.getStatus();\n+    if (Boolean.TRUE.equals(isPaid)) {\n+      logger.error(\"Payment Request with ID = {} already paid!\", paymentRequestId);\n+      response = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n+    } else {\n+      paymentRequest.setStatus(true);\n+      final Transaction transaction =\n+          Transaction.builder()\n+              .paymentRequestId(paymentRequestId)\n+              .amount(paymentRequest.getAmount())\n+              .citizenId(paymentRequest.getCitizenId())\n+              .build();\n+      this.taxIntegrationService.payTax(paymentRequest.getTaxId(), transaction.getCreationDate());\n+      logging.addLog(\n+          LogEntry.builder()\n+              .service(\"bank\")\n+              .created(new Date())\n+              .message(String.format(\"Tax paid for id = %d\", paymentRequestId))\n+              .build());\n+\n+      this.transactionRepository.save(transaction);\n+      this.paymentRequestRepository.save(paymentRequest);\n+      response = ResponseEntity.ok(transaction);\n     }\n+    return response;\n+  }\n+\n+  /**\n+   * Возвращает статус оплаты выставленного счёта.\n+   *\n+   * @param paymentId идентификатор высталвенного счёта\n+   * @return статус оплаты\n+   */\n+  public Boolean isPaid(final Long paymentId) {\n+    return findPaymentRequestById(paymentId).getStatus();\n+  }\n+\n+  /**\n+   * Возвращает все неоплаченные счета указанного гражданина.\n+   *\n+   * @param citizenId идентификатор гражданина\n+   * @return список выставленных счетов\n+   */\n+  public List<PaymentRequest> getDebtPaymentRequests(final Long citizenId) {\n+    return this.paymentRequestRepository.findAllByCitizenIdAndStatus(citizenId, false);\n+  }\n }"
  },
  {
    "sha": "182c88049f6662f454eb1ff658cb0de3f8d81db7",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 29,
    "changes": 51,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,7 @@\n package nc.unc.cs.services.bank.services;\n \n+import static org.mockito.BDDMockito.given;\n+\n import java.util.Optional;\n import nc.unc.cs.services.bank.entities.PaymentRequest;\n import nc.unc.cs.services.bank.exceptions.PaymentRequestNotFoundException;\n@@ -10,47 +12,38 @@\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n public class FindDataTest {\n-    @Mock\n-    private PaymentRequestRepository paymentRequestRepository;\n-    @InjectMocks\n-    private BankService bankService;\n-\n-    @Test\n-    void findPaymentRequestByIdTest() {\n-        final PaymentRequest paymentRequest = PaymentRequest\n-            .builder()\n+  @Mock private PaymentRequestRepository paymentRequestRepository;\n+  @InjectMocks private BankService bankService;\n+\n+  @Test\n+  void findPaymentRequestByIdTest() {\n+    final PaymentRequest paymentRequest =\n+        PaymentRequest.builder()\n             .paymentRequestId(1L)\n             .amount(10000)\n             .citizenId(111L)\n             .serviceId(20L)\n             .taxId(1L)\n             .build();\n \n-        given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n-            .willReturn(Optional.of(paymentRequest));\n-\n-        final PaymentRequest response =\n-            this.bankService.findPaymentRequestById(paymentRequest.getPaymentRequestId());\n+    given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n+        .willReturn(Optional.of(paymentRequest));\n \n-        Assertions.assertEquals(\n-            paymentRequest.getPaymentRequestId(),\n-            response.getPaymentRequestId()\n-        );\n-    }\n+    final PaymentRequest response =\n+        this.bankService.findPaymentRequestById(paymentRequest.getPaymentRequestId());\n \n-    @Test\n-    void findPaymentRequestByIdExceptionTest() {\n-        given(this.paymentRequestRepository.findById(1L))\n-            .willThrow(new PaymentRequestNotFoundException(1L));\n+    Assertions.assertEquals(paymentRequest.getPaymentRequestId(), response.getPaymentRequestId());\n+  }\n \n+  @Test\n+  void findPaymentRequestByIdExceptionTest() {\n+    given(this.paymentRequestRepository.findById(1L))\n+        .willThrow(new PaymentRequestNotFoundException(1L));\n \n-        Assertions.assertThrows(\n-            PaymentRequestNotFoundException.class,\n-            () -> this.bankService.findPaymentRequestById(1L)\n-        );\n-    }\n+    Assertions.assertThrows(\n+        PaymentRequestNotFoundException.class, () -> this.bankService.findPaymentRequestById(1L));\n+  }\n }"
  },
  {
    "sha": "37809ff43c14b1db157040357f179537aee8140a",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 52,
    "changes": 94,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,8 @@\n package nc.unc.cs.services.bank.services;\n \n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+\n import java.util.Date;\n import java.util.Optional;\n import nc.unc.cs.services.bank.entities.PaymentRequest;\n@@ -15,66 +18,53 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n public class PaymentTest {\n-    @Mock\n-    private PaymentRequestRepository paymentRequestRepository;\n-    @Mock\n-    private TransactionRepository transactionRepository;\n-    @Mock\n-    private LoggingService logging;\n-    @Mock\n-    private TaxIntegrationService taxIntegrationService;\n-    @InjectMocks\n-    private BankService bankService;\n+  @Mock private PaymentRequestRepository paymentRequestRepository;\n+  @Mock private TransactionRepository transactionRepository;\n+  @Mock private LoggingService logging;\n+  @Mock private TaxIntegrationService taxIntegrationService;\n+  @InjectMocks private BankService bankService;\n \n-    private PaymentRequest createPaymentRequest() {\n-        return PaymentRequest\n-            .builder()\n-            .paymentRequestId(1L)\n-            .amount(10000)\n-            .citizenId(111L)\n-            .serviceId(20L)\n-            .taxId(1L)\n-            .build();\n-    }\n+  private PaymentRequest createPaymentRequest() {\n+    return PaymentRequest.builder()\n+        .paymentRequestId(1L)\n+        .amount(10000)\n+        .citizenId(111L)\n+        .serviceId(20L)\n+        .taxId(1L)\n+        .build();\n+  }\n \n-    @Test\n-    void paymentCorrectTest() {\n-        final PaymentRequest paymentRequest = this.createPaymentRequest();\n+  @Test\n+  void paymentCorrectTest() {\n+    final PaymentRequest paymentRequest = this.createPaymentRequest();\n \n-        given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n-            .willReturn(Optional.of(paymentRequest));\n+    given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n+        .willReturn(Optional.of(paymentRequest));\n \n-        given(\n-            this.taxIntegrationService.payTax(\n-                paymentRequest.getTaxId(),\n-                new Date()\n-            ))\n-            .willReturn(ResponseEntity.ok(1L));\n+    given(this.taxIntegrationService.payTax(paymentRequest.getTaxId(), new Date()))\n+        .willReturn(ResponseEntity.ok(1L));\n \n-        given(this.logging.addLog(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n-        given(this.transactionRepository.save(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n-        given(this.paymentRequestRepository.save(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.logging.addLog(any())).willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.transactionRepository.save(any()))\n+        .willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.paymentRequestRepository.save(any()))\n+        .willAnswer(invocation -> invocation.getArgument(0));\n \n-        final ResponseEntity<Transaction> response =\n-            this.bankService.payment(paymentRequest.getPaymentRequestId());\n+    final ResponseEntity<Transaction> response =\n+        this.bankService.payment(paymentRequest.getPaymentRequestId());\n \n-        Assertions.assertAll(\n-            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n-            () -> Assertions.assertEquals(paymentRequest.getAmount(), response.getBody().getAmount()),\n-            () -> Assertions.assertEquals(\n-                paymentRequest.getPaymentRequestId(),\n-                response.getBody().getPaymentRequestId()\n-            ),\n-            () -> Assertions.assertEquals(paymentRequest.getCitizenId(), response.getBody().getCitizenId()),\n-            () -> Assertions.assertTrue(paymentRequest.getStatus())\n-        );\n-    }\n+    Assertions.assertAll(\n+        () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+        () -> Assertions.assertEquals(paymentRequest.getAmount(), response.getBody().getAmount()),\n+        () ->\n+            Assertions.assertEquals(\n+                paymentRequest.getPaymentRequestId(), response.getBody().getPaymentRequestId()),\n+        () ->\n+            Assertions.assertEquals(\n+                paymentRequest.getCitizenId(), response.getBody().getCitizenId()),\n+        () -> Assertions.assertTrue(paymentRequest.getStatus()));\n+  }\n }"
  },
  {
    "sha": "faff9550103c1704f1210cbe6ca7325aaddfc9fd",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "status": "modified",
    "additions": 33,
    "deletions": 39,
    "changes": 72,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,8 @@\n package nc.unc.cs.services.bank.services;\n \n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+\n import nc.unc.cs.services.bank.repositories.PaymentRequestRepository;\n import nc.unc.cs.services.common.clients.bank.PaymentPayload;\n import nc.unc.cs.services.common.clients.logging.LoggingService;\n@@ -11,51 +14,42 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n class RequestPaymentTestTest {\n-    @Mock\n-    private PaymentRequestRepository paymentRequestRepository;\n-    @Mock\n-    private LoggingService logging;\n-    @Mock\n-    private TaxIntegrationService taxIntegrationService;\n-    @InjectMocks\n-    private BankService bankService;\n-\n-    private PaymentPayload createPaymentPayload() {\n-        return PaymentPayload\n-            .builder()\n-            .serviceId(20L)\n-            .citizenId(111L)\n-            .amount(10000)\n-            .taxAmount(1000)\n-            .build();\n-    }\n-\n-    @Test\n-    void requestPaymentCorrectTest() {\n-        final Long testTaxId = 1L;\n-        final PaymentPayload paymentPayload = this.createPaymentPayload();\n-\n-        given(this.taxIntegrationService\n-            .createTax(\n+  @Mock private PaymentRequestRepository paymentRequestRepository;\n+  @Mock private LoggingService logging;\n+  @Mock private TaxIntegrationService taxIntegrationService;\n+  @InjectMocks private BankService bankService;\n+\n+  private PaymentPayload createPaymentPayload() {\n+    return PaymentPayload.builder()\n+        .serviceId(20L)\n+        .citizenId(111L)\n+        .amount(10000)\n+        .taxAmount(1000)\n+        .build();\n+  }\n+\n+  @Test\n+  void requestPaymentCorrectTest() {\n+    final Long testTaxId = 1L;\n+    final PaymentPayload paymentPayload = this.createPaymentPayload();\n+\n+    given(\n+            this.taxIntegrationService.createTax(\n                 paymentPayload.getServiceId(),\n                 paymentPayload.getCitizenId(),\n-                paymentPayload.getTaxAmount()\n-            ))\n-            .willReturn(testTaxId);\n+                paymentPayload.getTaxAmount()))\n+        .willReturn(testTaxId);\n \n-        given(this.logging.addLog(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n-        given(this.paymentRequestRepository.save(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.logging.addLog(any())).willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.paymentRequestRepository.save(any()))\n+        .willAnswer(invocation -> invocation.getArgument(0));\n \n-        ResponseEntity<Long> response = this.bankService.requestPayment(paymentPayload);\n-        System.out.println(response);\n+    ResponseEntity<Long> response = this.bankService.requestPayment(paymentPayload);\n+    System.out.println(response);\n \n-        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());\n-    }\n+    Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());\n+  }\n }"
  },
  {
    "sha": "3cfe2e79728ac9ff2a9e774ac4bbb611626ac883",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/controllers/ExceptionController.java",
    "status": "modified",
    "additions": 32,
    "deletions": 39,
    "changes": 71,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/ExceptionController.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/ExceptionController.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/ExceptionController.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -14,48 +14,41 @@\n \n @ControllerAdvice\n public class ExceptionController {\n-    /** Логгер. */\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ExceptionController.class);\n-    /** Стандартное сообщение для фронта. */\n-    private static final String SERVICE_UNAVAILABLE_MESSAGE = \"Operation failed!\";\n+  /** Логгер. */\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExceptionController.class);\n+  /** Стандартное сообщение для фронта. */\n+  private static final String SERVICE_UNAVAILABLE_MESSAGE = \"Operation failed!\";\n \n-    @ExceptionHandler(value = {FeignException.class})\n-    public ResponseEntity<Object> serviceUnavailableException(\n-        final FeignException fe\n-    ) {\n-        LOGGER.error(SERVICE_UNAVAILABLE_MESSAGE, fe);\n-        return new ResponseEntity<>(SERVICE_UNAVAILABLE_MESSAGE, HttpStatus.SERVICE_UNAVAILABLE);\n-    }\n+  @ExceptionHandler(value = {FeignException.class})\n+  public ResponseEntity<Object> serviceUnavailableException(final FeignException fe) {\n+    LOGGER.error(SERVICE_UNAVAILABLE_MESSAGE, fe);\n+    return new ResponseEntity<>(SERVICE_UNAVAILABLE_MESSAGE, HttpStatus.SERVICE_UNAVAILABLE);\n+  }\n \n-    @ExceptionHandler(value = {PropertyNotFoundException.class})\n-    public ResponseEntity<Object> propertyNotFoundException(\n-        final PropertyNotFoundException pe\n-    ) {\n-        LOGGER.error(\"Property Not Found!\", pe);\n-        return new ResponseEntity<>(pe.getMessage(), HttpStatus.BAD_REQUEST);\n-    }\n+  @ExceptionHandler(value = {PropertyNotFoundException.class})\n+  public ResponseEntity<Object> propertyNotFoundException(final PropertyNotFoundException pe) {\n+    LOGGER.error(\"Property Not Found!\", pe);\n+    return new ResponseEntity<>(pe.getMessage(), HttpStatus.BAD_REQUEST);\n+  }\n \n-    @ExceptionHandler(value = {PropertyTaxNotFoundException.class})\n-    public ResponseEntity<Object> propertyTaxNotFoundException(\n-        final PropertyTaxNotFoundException pt\n-    ) {\n-        LOGGER.error(\"Property Tax Not Found!\", pt);\n-        return new ResponseEntity<>(pt.getMessage(), HttpStatus.BAD_REQUEST);\n-    }\n+  @ExceptionHandler(value = {PropertyTaxNotFoundException.class})\n+  public ResponseEntity<Object> propertyTaxNotFoundException(\n+      final PropertyTaxNotFoundException pt) {\n+    LOGGER.error(\"Property Tax Not Found!\", pt);\n+    return new ResponseEntity<>(pt.getMessage(), HttpStatus.BAD_REQUEST);\n+  }\n \n-    @ExceptionHandler(value = {PropertyTaxValueNotFoundException.class})\n-    public ResponseEntity<Object> propertyTaxValueNotFoundException(\n-        final PropertyTaxValueNotFoundException ptv\n-    ) {\n-        LOGGER.error(\"Property Tax Value Not Found!\", ptv);\n-        return new ResponseEntity<>(ptv.getMessage(), HttpStatus.BAD_REQUEST);\n-    }\n+  @ExceptionHandler(value = {PropertyTaxValueNotFoundException.class})\n+  public ResponseEntity<Object> propertyTaxValueNotFoundException(\n+      final PropertyTaxValueNotFoundException ptv) {\n+    LOGGER.error(\"Property Tax Value Not Found!\", ptv);\n+    return new ResponseEntity<>(ptv.getMessage(), HttpStatus.BAD_REQUEST);\n+  }\n \n-    @ExceptionHandler(value = {UtilitiesPriceListNotFoundException.class})\n-    public ResponseEntity<Object> propertyTaxValueNotFoundException(\n-        final UtilitiesPriceListNotFoundException upe\n-    ) {\n-        LOGGER.error(\"Utilities Price List Not Found!\", upe);\n-        return new ResponseEntity<>(upe.getMessage(), HttpStatus.BAD_REQUEST);\n-    }\n+  @ExceptionHandler(value = {UtilitiesPriceListNotFoundException.class})\n+  public ResponseEntity<Object> propertyTaxValueNotFoundException(\n+      final UtilitiesPriceListNotFoundException upe) {\n+    LOGGER.error(\"Utilities Price List Not Found!\", upe);\n+    return new ResponseEntity<>(upe.getMessage(), HttpStatus.BAD_REQUEST);\n+  }\n }"
  },
  {
    "sha": "3f11d41d37c7df1e645603a949d29b89e083ead6",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/controllers/PropertyController.java",
    "status": "modified",
    "additions": 14,
    "deletions": 16,
    "changes": 30,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/PropertyController.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/PropertyController.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/PropertyController.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -20,23 +20,21 @@\n @Tag(name = \"Property Api\")\n public class PropertyController {\n \n-    private final RegistrationService registrationService;\n+  private final RegistrationService registrationService;\n \n-    @Autowired\n-    public PropertyController(final RegistrationService registrationService) {\n-        this.registrationService = registrationService;\n-    }\n+  @Autowired\n+  public PropertyController(final RegistrationService registrationService) {\n+    this.registrationService = registrationService;\n+  }\n \n-    @PostMapping(produces = \"application/json\", consumes = \"application/json\")\n-    public ResponseEntity<Property> addCitizensProperty(\n-        @Validated @RequestBody final CreationProperty newProperty) {\n-        return this.registrationService.addCitizensProperty(newProperty);\n-    }\n+  @PostMapping(produces = \"application/json\", consumes = \"application/json\")\n+  public ResponseEntity<Property> addCitizensProperty(\n+      @Validated @RequestBody final CreationProperty newProperty) {\n+    return this.registrationService.addCitizensProperty(newProperty);\n+  }\n \n-    @GetMapping(value = \"citizen/{citizenId}\", produces = \"application/json\")\n-    public List<Property> getPropertiesByCitizenId(\n-        @PathVariable(\"citizenId\") final Long citizenId\n-    ) {\n-        return this.registrationService.getPropertiesByCitizenId(citizenId);\n-    }\n+  @GetMapping(value = \"citizen/{citizenId}\", produces = \"application/json\")\n+  public List<Property> getPropertiesByCitizenId(@PathVariable(\"citizenId\") final Long citizenId) {\n+    return this.registrationService.getPropertiesByCitizenId(citizenId);\n+  }\n }"
  },
  {
    "sha": "b40623b68625815623ff8fc396d37211f606fcb7",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/controllers/payloads/UtilitiesPayload.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/payloads/UtilitiesPayload.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/payloads/UtilitiesPayload.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/payloads/UtilitiesPayload.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -16,19 +16,19 @@\n @EqualsAndHashCode\n @Builder\n public class UtilitiesPayload {\n-    @NotNull(message = \"Incorrect property ID\")\n-    @Min(1L)\n-    private Long propertyId;\n+  @NotNull(message = \"Incorrect property ID\")\n+  @Min(1L)\n+  private Long propertyId;\n \n-    @NotNull(message = \"Incorrect data\")\n-    @Min(1)\n-    private Integer coldWater;\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(1)\n+  private Integer coldWater;\n \n-    @NotNull(message = \"Incorrect data\")\n-    @Min(1)\n-    private Integer hotWater;\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(1)\n+  private Integer hotWater;\n \n-    @NotNull(message = \"Incorrect data\")\n-    @Min(1)\n-    private Integer electricity;\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(1)\n+  private Integer electricity;\n }"
  },
  {
    "sha": "e48e49a66639e5a802d6b77b6f2af1d193b6d6b8",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/Property.java",
    "status": "modified",
    "additions": 65,
    "deletions": 66,
    "changes": 131,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Property.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Property.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Property.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -21,83 +21,82 @@\n @ToString\n @EqualsAndHashCode\n public class Property {\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long propertyId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long propertyId;\n \n-    @NotBlank(message = \"Incorrect region name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect region name\")\n-    @Column(nullable = false, updatable = false, length = 40)\n-    private String region;\n+  @NotBlank(message = \"Incorrect region name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect region name\")\n+  @Column(nullable = false, updatable = false, length = 40)\n+  private String region;\n \n-    @NotBlank(message = \"Incorrect city name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect city name\")\n-    @Column(nullable = false, updatable = false, length = 40)\n-    private String city;\n+  @NotBlank(message = \"Incorrect city name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect city name\")\n+  @Column(nullable = false, updatable = false, length = 40)\n+  private String city;\n \n-    @NotBlank(message = \"Incorrect street name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect street name\")\n-    @Column(nullable = false, updatable = false, length = 40)\n-    private String street;\n+  @NotBlank(message = \"Incorrect street name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect street name\")\n+  @Column(nullable = false, updatable = false, length = 40)\n+  private String street;\n \n-    @NotBlank(message = \"Incorrect house name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect house name\")\n-    @Column(nullable = false, updatable = false, length = 40)\n-    private String house;\n+  @NotBlank(message = \"Incorrect house name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect house name\")\n+  @Column(nullable = false, updatable = false, length = 40)\n+  private String house;\n \n-    @NotBlank(message = \"Incorrect apartment name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect apartment name\")\n-    @Column(nullable = false, updatable = false, length = 40)\n-    private String apartment;\n+  @NotBlank(message = \"Incorrect apartment name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect apartment name\")\n+  @Column(nullable = false, updatable = false, length = 40)\n+  private String apartment;\n \n-    @NotNull(message = \"Incorrect Apartment size\")\n-    @Min(value = 10, message = \"Apartment size is incorrect\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer apartmentSize;\n+  @NotNull(message = \"Incorrect Apartment size\")\n+  @Min(value = 10, message = \"Apartment size is incorrect\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer apartmentSize;\n \n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(1L)\n-    @Column(nullable = false)\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(1L)\n+  @Column(nullable = false)\n+  private Long citizenId;\n \n-    @Builder\n-    public Property(\n-        final Long propertyId,\n-        final String region,\n-        final String city,\n-        final String street,\n-        final String house,\n-        final String apartment,\n-        final Integer apartmentSize,\n-        final Long citizenId\n-    ) {\n-        this.propertyId = propertyId;\n-        this.region = region.trim().toUpperCase();\n-        this.city = city.trim().toUpperCase();\n-        this.street = street.trim().toUpperCase();\n-        this.house = house.trim().toUpperCase();\n-        this.apartment = apartment.trim().toUpperCase();\n-        this.apartmentSize = apartmentSize;\n-        this.citizenId = citizenId;\n-    }\n+  @Builder\n+  public Property(\n+      final Long propertyId,\n+      final String region,\n+      final String city,\n+      final String street,\n+      final String house,\n+      final String apartment,\n+      final Integer apartmentSize,\n+      final Long citizenId) {\n+    this.propertyId = propertyId;\n+    this.region = region.trim().toUpperCase();\n+    this.city = city.trim().toUpperCase();\n+    this.street = street.trim().toUpperCase();\n+    this.house = house.trim().toUpperCase();\n+    this.apartment = apartment.trim().toUpperCase();\n+    this.apartmentSize = apartmentSize;\n+    this.citizenId = citizenId;\n+  }\n \n-    public void setRegion(final String region) {\n-        this.region = region.trim().toUpperCase();\n-    }\n+  public void setRegion(final String region) {\n+    this.region = region.trim().toUpperCase();\n+  }\n \n-    public void setCity(final String city) {\n-        this.city = city.trim().toUpperCase();\n-    }\n+  public void setCity(final String city) {\n+    this.city = city.trim().toUpperCase();\n+  }\n \n-    public void setStreet(final String street) {\n-        this.street = street.trim().toUpperCase();\n-    }\n+  public void setStreet(final String street) {\n+    this.street = street.trim().toUpperCase();\n+  }\n \n-    public void setHouse(final String house) {\n-        this.house = house.trim().toUpperCase();\n-    }\n+  public void setHouse(final String house) {\n+    this.house = house.trim().toUpperCase();\n+  }\n \n-    public void setApartment(final String apartment) {\n-        this.apartment = apartment.trim().toUpperCase();\n-    }\n+  public void setApartment(final String apartment) {\n+    this.apartment = apartment.trim().toUpperCase();\n+  }\n }"
  },
  {
    "sha": "9bee3dd451a38dcd65d91d05a0395bc05ff67b75",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTax.java",
    "status": "modified",
    "additions": 46,
    "deletions": 47,
    "changes": 93,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTax.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTax.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTax.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,7 @@\n package nc.unc.cs.services.communal.entities;\n \n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import java.util.Date;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -9,8 +11,6 @@\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import java.util.Date;\n-import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -24,57 +24,56 @@\n @EqualsAndHashCode\n public class PropertyTax {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long propertyTaxId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long propertyTaxId;\n \n-    @NotNull(message = \"Incorrect tax amount\")\n-    @Min(1)\n-    @Column(updatable = false, nullable = false)\n-    private Integer taxAmount;\n+  @NotNull(message = \"Incorrect tax amount\")\n+  @Min(1)\n+  @Column(updatable = false, nullable = false)\n+  private Integer taxAmount;\n \n-    @NotNull\n-    @Column(nullable = false)\n-    private Boolean isPaid;\n+  @NotNull\n+  @Column(nullable = false)\n+  private Boolean isPaid;\n \n-    @NotNull\n-    @Column(updatable = false, nullable = false)\n-    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    private Date date;\n+  @NotNull\n+  @Column(updatable = false, nullable = false)\n+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n+  @Temporal(value = TemporalType.TIMESTAMP)\n+  private Date date;\n \n-    @NotNull(message = \"Incorrect property ID\")\n-    @Min(1L)\n-    @Column(updatable = false, nullable = false)\n-    private Long propertyId;\n+  @NotNull(message = \"Incorrect property ID\")\n+  @Min(1L)\n+  @Column(updatable = false, nullable = false)\n+  private Long propertyId;\n \n-    @NotNull(message = \"Incorrect payment request ID\")\n-    @Min(1L)\n-    @Column(updatable = false, nullable = false)\n-    private Long paymentRequestId;\n+  @NotNull(message = \"Incorrect payment request ID\")\n+  @Min(1L)\n+  @Column(updatable = false, nullable = false)\n+  private Long paymentRequestId;\n \n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(1L)\n-    @Column(updatable = false, nullable = false)\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(1L)\n+  @Column(updatable = false, nullable = false)\n+  private Long citizenId;\n \n-    @Builder\n-    public PropertyTax(\n-        final Integer taxAmount,\n-        final Long propertyId,\n-        final Long paymentRequestId,\n-        final Long citizenId\n-    ) {\n-        this.taxAmount = taxAmount;\n-        this.isPaid = false;\n-        this.date = new Date();\n-        this.propertyId = propertyId;\n-        this.paymentRequestId = paymentRequestId;\n-        this.citizenId = citizenId;\n-    }\n+  @Builder\n+  public PropertyTax(\n+      final Integer taxAmount,\n+      final Long propertyId,\n+      final Long paymentRequestId,\n+      final Long citizenId) {\n+    this.taxAmount = taxAmount;\n+    this.isPaid = false;\n+    this.date = new Date();\n+    this.propertyId = propertyId;\n+    this.paymentRequestId = paymentRequestId;\n+    this.citizenId = citizenId;\n+  }\n \n-    public PropertyTax() {\n-        this.isPaid = false;\n-        this.date = new Date();\n-    }\n+  public PropertyTax() {\n+    this.isPaid = false;\n+    this.date = new Date();\n+  }\n }"
  },
  {
    "sha": "ef0e712d616a9b42022d8b65e6b602a6635db11a",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTaxValue.java",
    "status": "modified",
    "additions": 30,
    "deletions": 31,
    "changes": 61,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTaxValue.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTaxValue.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTaxValue.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -22,40 +22,39 @@\n @ToString\n @EqualsAndHashCode\n public class PropertyTaxValue {\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long propertyTaxValueId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long propertyTaxValueId;\n \n-    @NotBlank(message = \"Incorrect region name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect region name\")\n-    @Column(nullable = false, unique = true, updatable = false, length = 40)\n-    private String region;\n+  @NotBlank(message = \"Incorrect region name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect region name\")\n+  @Column(nullable = false, unique = true, updatable = false, length = 40)\n+  private String region;\n \n-    @NotNull(message = \"Incorrect price per square meter size\")\n-    @Min(value = 1, message = \"Apartment price per square meter is incorrect\")\n-    @Column(nullable = false)\n-    private Integer pricePerSquareMeter;\n+  @NotNull(message = \"Incorrect price per square meter size\")\n+  @Min(value = 1, message = \"Apartment price per square meter is incorrect\")\n+  @Column(nullable = false)\n+  private Integer pricePerSquareMeter;\n \n-    @NotNull(message = \"Incorrect cadastral value size\")\n-    @Min(value = 1, message = \"Apartment cadastral value is incorrect\")\n-    @Max(value = 100, message = \"Apartment cadastral value is incorrect\")\n-    @Column(nullable = false)\n-    private Integer cadastralValue;\n+  @NotNull(message = \"Incorrect cadastral value size\")\n+  @Min(value = 1, message = \"Apartment cadastral value is incorrect\")\n+  @Max(value = 100, message = \"Apartment cadastral value is incorrect\")\n+  @Column(nullable = false)\n+  private Integer cadastralValue;\n \n-    @Builder\n-    public PropertyTaxValue(\n-        final Long propertyTaxValueId,\n-        final String region,\n-        final Integer pricePerSquareMeter,\n-        final Integer cadastralValue\n-    ) {\n-        this.propertyTaxValueId = propertyTaxValueId;\n-        this.region = region.trim().toUpperCase();\n-        this.pricePerSquareMeter = pricePerSquareMeter;\n-        this.cadastralValue = cadastralValue;\n-    }\n+  @Builder\n+  public PropertyTaxValue(\n+      final Long propertyTaxValueId,\n+      final String region,\n+      final Integer pricePerSquareMeter,\n+      final Integer cadastralValue) {\n+    this.propertyTaxValueId = propertyTaxValueId;\n+    this.region = region.trim().toUpperCase();\n+    this.pricePerSquareMeter = pricePerSquareMeter;\n+    this.cadastralValue = cadastralValue;\n+  }\n \n-    public void setRegion(final String region) {\n-        this.region = region.trim().toUpperCase();\n-    }\n+  public void setRegion(final String region) {\n+    this.region = region.trim().toUpperCase();\n+  }\n }"
  },
  {
    "sha": "6c6b95e4adb04bc822d26b47c2695e576ec24449",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/Registration.java",
    "status": "modified",
    "additions": 64,
    "deletions": 65,
    "changes": 129,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Registration.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Registration.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Registration.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -21,82 +21,81 @@\n @ToString\n @EqualsAndHashCode\n public class Registration {\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long registrationId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long registrationId;\n \n-    @NotBlank(message = \"Incorrect region name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect region name\")\n-    @Column(nullable = false, length = 40)\n-    private String region;\n+  @NotBlank(message = \"Incorrect region name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect region name\")\n+  @Column(nullable = false, length = 40)\n+  private String region;\n \n-    @NotBlank(message = \"Incorrect city name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect city name\")\n-    @Column(nullable = false, length = 40)\n-    private String city;\n+  @NotBlank(message = \"Incorrect city name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect city name\")\n+  @Column(nullable = false, length = 40)\n+  private String city;\n \n-    @NotBlank(message = \"Incorrect street name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect street name\")\n-    @Column(nullable = false, length = 40)\n-    private String street;\n+  @NotBlank(message = \"Incorrect street name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect street name\")\n+  @Column(nullable = false, length = 40)\n+  private String street;\n \n-    @NotBlank(message = \"Incorrect house name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect house name\")\n-    @Column(nullable = false, length = 10)\n-    private String house;\n+  @NotBlank(message = \"Incorrect house name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect house name\")\n+  @Column(nullable = false, length = 10)\n+  private String house;\n \n-    @NotBlank(message = \"Incorrect apartment name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect apartment name\")\n-    @Column(nullable = false, length = 10)\n-    private String apartment;\n+  @NotBlank(message = \"Incorrect apartment name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect apartment name\")\n+  @Column(nullable = false, length = 10)\n+  private String apartment;\n \n-    @NotNull\n-    @Column(nullable = false)\n-    private Boolean isActive;\n+  @NotNull\n+  @Column(nullable = false)\n+  private Boolean isActive;\n \n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(1L)\n-    @Column(nullable = false)\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(1L)\n+  @Column(nullable = false)\n+  private Long citizenId;\n \n-    @Builder\n-    public Registration(\n-        final Long registrationId,\n-        final String region,\n-        final String city,\n-        final String street,\n-        final String house,\n-        final String apartment,\n-        final Boolean isActive,\n-        final Long citizenId\n-    ) {\n-        this.registrationId = registrationId;\n-        this.region = region.trim().toUpperCase();\n-        this.city = city.trim().toUpperCase();\n-        this.street = street.trim().toUpperCase();\n-        this.house = house.trim().toUpperCase();\n-        this.apartment = apartment.trim().toUpperCase();\n-        this.isActive = isActive;\n-        this.citizenId = citizenId;\n-    }\n+  @Builder\n+  public Registration(\n+      final Long registrationId,\n+      final String region,\n+      final String city,\n+      final String street,\n+      final String house,\n+      final String apartment,\n+      final Boolean isActive,\n+      final Long citizenId) {\n+    this.registrationId = registrationId;\n+    this.region = region.trim().toUpperCase();\n+    this.city = city.trim().toUpperCase();\n+    this.street = street.trim().toUpperCase();\n+    this.house = house.trim().toUpperCase();\n+    this.apartment = apartment.trim().toUpperCase();\n+    this.isActive = isActive;\n+    this.citizenId = citizenId;\n+  }\n \n-    public void setRegion(final String region) {\n-        this.region = region.trim().toUpperCase();\n-    }\n+  public void setRegion(final String region) {\n+    this.region = region.trim().toUpperCase();\n+  }\n \n-    public void setCity(final String city) {\n-        this.city = city.trim().toUpperCase();\n-    }\n+  public void setCity(final String city) {\n+    this.city = city.trim().toUpperCase();\n+  }\n \n-    public void setStreet(final String street) {\n-        this.street = street.trim().toUpperCase();\n-    }\n+  public void setStreet(final String street) {\n+    this.street = street.trim().toUpperCase();\n+  }\n \n-    public void setHouse(final String house) {\n-        this.house = house.trim().toUpperCase();\n-    }\n+  public void setHouse(final String house) {\n+    this.house = house.trim().toUpperCase();\n+  }\n \n-    public void setApartment(final String apartment) {\n-        this.apartment = apartment.trim().toUpperCase();\n-    }\n+  public void setApartment(final String apartment) {\n+    this.apartment = apartment.trim().toUpperCase();\n+  }\n }"
  },
  {
    "sha": "c983d1eecb2a9b1cc46d7c8a4c2a38dd963b4e32",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilitiesPriceList.java",
    "status": "modified",
    "additions": 35,
    "deletions": 36,
    "changes": 71,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilitiesPriceList.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilitiesPriceList.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilitiesPriceList.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -22,46 +22,45 @@\n @EqualsAndHashCode\n public class UtilitiesPriceList {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long utilitiesPriceListId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long utilitiesPriceListId;\n \n-    @NotBlank(message = \"Incorrect region name\")\n-    @Size(min = 2, max = 40, message = \"Incorrect region name\")\n-    @Column(nullable = false, unique = true, updatable = false, length = 40)\n-    private String region;\n+  @NotBlank(message = \"Incorrect region name\")\n+  @Size(min = 2, max = 40, message = \"Incorrect region name\")\n+  @Column(nullable = false, unique = true, updatable = false, length = 40)\n+  private String region;\n \n-    @NotNull(message = \"Incorrect cold water price size\")\n-    @Min(value = 1, message = \"Apartment cold water price is incorrect\")\n-    @Column(nullable = false)\n-    private Integer coldWaterPrice;\n+  @NotNull(message = \"Incorrect cold water price size\")\n+  @Min(value = 1, message = \"Apartment cold water price is incorrect\")\n+  @Column(nullable = false)\n+  private Integer coldWaterPrice;\n \n-    @NotNull(message = \"Incorrect hot water pricer size\")\n-    @Min(value = 1, message = \"Apartment hot water price is incorrect\")\n-    @Column(nullable = false)\n-    private Integer hotWaterPrice;\n+  @NotNull(message = \"Incorrect hot water pricer size\")\n+  @Min(value = 1, message = \"Apartment hot water price is incorrect\")\n+  @Column(nullable = false)\n+  private Integer hotWaterPrice;\n \n-    @NotNull(message = \"Incorrect electricity price size\")\n-    @Min(value = 1, message = \"Apartment cold water price is incorrect\")\n-    @Column(nullable = false)\n-    private Integer electricityPrice;\n+  @NotNull(message = \"Incorrect electricity price size\")\n+  @Min(value = 1, message = \"Apartment cold water price is incorrect\")\n+  @Column(nullable = false)\n+  private Integer electricityPrice;\n \n-    @Builder\n-    public UtilitiesPriceList(\n-        final Long utilitiesPriceListId,\n-        final String region,\n-        final Integer coldWaterPrice,\n-        final Integer hotWaterPrice,\n-        final Integer electricityPrice\n-    ) {\n-        this.utilitiesPriceListId = utilitiesPriceListId;\n-        this.region = region.trim().toUpperCase();\n-        this.coldWaterPrice = coldWaterPrice;\n-        this.hotWaterPrice = hotWaterPrice;\n-        this.electricityPrice = electricityPrice;\n-    }\n+  @Builder\n+  public UtilitiesPriceList(\n+      final Long utilitiesPriceListId,\n+      final String region,\n+      final Integer coldWaterPrice,\n+      final Integer hotWaterPrice,\n+      final Integer electricityPrice) {\n+    this.utilitiesPriceListId = utilitiesPriceListId;\n+    this.region = region.trim().toUpperCase();\n+    this.coldWaterPrice = coldWaterPrice;\n+    this.hotWaterPrice = hotWaterPrice;\n+    this.electricityPrice = electricityPrice;\n+  }\n \n-    public void setRegion(final String region) {\n-        this.region = region.trim().toUpperCase();\n-    }\n+  public void setRegion(final String region) {\n+    this.region = region.trim().toUpperCase();\n+  }\n }"
  },
  {
    "sha": "bc858be83a9a6818ad70d83e058c6103be29cad5",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilityBill.java",
    "status": "modified",
    "additions": 85,
    "deletions": 86,
    "changes": 171,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilityBill.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilityBill.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilityBill.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,7 @@\n package nc.unc.cs.services.communal.entities;\n \n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import java.util.Date;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -9,8 +11,6 @@\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import java.util.Date;\n-import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -26,88 +26,87 @@\n @EqualsAndHashCode\n public class UtilityBill {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long utilityBillId;\n-\n-    @NotNull(message = \"Date is null\")\n-    @Column(nullable = false, updatable = false)\n-    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    private Date date;\n-\n-    @NotNull\n-    @Column(nullable = false)\n-    private Boolean isPaid;\n-\n-    @NotNull(message = \"Incorrect data\")\n-    @Min(value = 1, message = \"Incorrect data size\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer coldWater;\n-\n-    @NotNull(message = \"Incorrect data\")\n-    @Min(value = 1, message = \"Incorrect data size\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer hotWater;\n-\n-    @NotNull(message = \"Incorrect data\")\n-    @Min(value = 1, message = \"Incorrect data size\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer electricity;\n-\n-    @NotNull(message = \"Incorrect data\")\n-    @Min(value = 1, message = \"Incorrect data size\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer coldWaterAmount;\n-\n-    @NotNull(message = \"Incorrect data\")\n-    @Min(value = 1, message = \"Incorrect data size\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer hotWaterAmount;\n-\n-    @NotNull(message = \"Incorrect data\")\n-    @Min(value = 1, message = \"Incorrect data size\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer electricityAmount;\n-\n-    @NotNull(message = \"Incorrect data\")\n-    @Min(value = 1, message = \"Incorrect data size\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer utilityAmount;\n-\n-    @NotNull(message = \"Incorrect payment request ID\")\n-    @Min(1L)\n-    @Column(nullable = false, updatable = false)\n-    private Long paymentRequestId;\n-\n-    @NotNull(message = \"Incorrect property ID\")\n-    @Min(1L)\n-    @Column(nullable = false, updatable = false)\n-    private Long propertyId;\n-\n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(1L)\n-    @Column(nullable = false, updatable = false)\n-    private Long citizenId;\n-\n-    @Builder\n-    public UtilityBill(\n-        final Integer coldWater,\n-        final Integer hotWater,\n-        final Integer electricity,\n-        final Integer coldWaterAmount,\n-        final Integer hotWaterAmount,\n-        final Integer electricityAmount,\n-        final Long propertyId\n-    ) {\n-        this.date = new Date();\n-        this.isPaid = false;\n-        this.coldWater = coldWater;\n-        this.hotWater = hotWater;\n-        this.electricity = electricity;\n-        this.coldWaterAmount = coldWaterAmount;\n-        this.hotWaterAmount = hotWaterAmount;\n-        this.electricityAmount = electricityAmount;\n-        this.propertyId = propertyId;\n-    }\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long utilityBillId;\n+\n+  @NotNull(message = \"Date is null\")\n+  @Column(nullable = false, updatable = false)\n+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n+  @Temporal(value = TemporalType.TIMESTAMP)\n+  private Date date;\n+\n+  @NotNull\n+  @Column(nullable = false)\n+  private Boolean isPaid;\n+\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(value = 1, message = \"Incorrect data size\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer coldWater;\n+\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(value = 1, message = \"Incorrect data size\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer hotWater;\n+\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(value = 1, message = \"Incorrect data size\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer electricity;\n+\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(value = 1, message = \"Incorrect data size\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer coldWaterAmount;\n+\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(value = 1, message = \"Incorrect data size\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer hotWaterAmount;\n+\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(value = 1, message = \"Incorrect data size\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer electricityAmount;\n+\n+  @NotNull(message = \"Incorrect data\")\n+  @Min(value = 1, message = \"Incorrect data size\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer utilityAmount;\n+\n+  @NotNull(message = \"Incorrect payment request ID\")\n+  @Min(1L)\n+  @Column(nullable = false, updatable = false)\n+  private Long paymentRequestId;\n+\n+  @NotNull(message = \"Incorrect property ID\")\n+  @Min(1L)\n+  @Column(nullable = false, updatable = false)\n+  private Long propertyId;\n+\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(1L)\n+  @Column(nullable = false, updatable = false)\n+  private Long citizenId;\n+\n+  @Builder\n+  public UtilityBill(\n+      final Integer coldWater,\n+      final Integer hotWater,\n+      final Integer electricity,\n+      final Integer coldWaterAmount,\n+      final Integer hotWaterAmount,\n+      final Integer electricityAmount,\n+      final Long propertyId) {\n+    this.date = new Date();\n+    this.isPaid = false;\n+    this.coldWater = coldWater;\n+    this.hotWater = hotWater;\n+    this.electricity = electricity;\n+    this.coldWaterAmount = coldWaterAmount;\n+    this.hotWaterAmount = hotWaterAmount;\n+    this.electricityAmount = electricityAmount;\n+    this.propertyId = propertyId;\n+  }\n }"
  },
  {
    "sha": "2d5f56cf84369de4ab5c03e6180cc65bb7b694ef",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/PropertyNotFoundException.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/PropertyNotFoundException.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/PropertyNotFoundException.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/PropertyNotFoundException.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,7 +1,7 @@\n package nc.unc.cs.services.communal.exceptions;\n \n public class PropertyNotFoundException extends RuntimeException {\n-    public PropertyNotFoundException(final Long id) {\n-        super(\"Property with ID = \" + id + \" not found!\");\n-    }\n+  public PropertyNotFoundException(final Long id) {\n+    super(\"Property with ID = \" + id + \" not found!\");\n+  }\n }"
  },
  {
    "sha": "d5324ff7353ee414509a838e51e954ce7dab4d9e",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/UtilitiesPriceListNotFoundException.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/UtilitiesPriceListNotFoundException.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/UtilitiesPriceListNotFoundException.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/UtilitiesPriceListNotFoundException.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,7 +1,7 @@\n package nc.unc.cs.services.communal.exceptions;\n \n public class UtilitiesPriceListNotFoundException extends RuntimeException {\n-    public UtilitiesPriceListNotFoundException(final String region) {\n-        super(\"UtilitiesPriceList with region = \" + region + \" not found!\");\n-    }\n+  public UtilitiesPriceListNotFoundException(final String region) {\n+    super(\"UtilitiesPriceList with region = \" + region + \" not found!\");\n+  }\n }"
  },
  {
    "sha": "7ec839c481ece9cc7d0f8d927293b578a9cf8532",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/services/CommunalService.java",
    "status": "modified",
    "additions": 153,
    "deletions": 164,
    "changes": 317,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/services/CommunalService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/services/CommunalService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/services/CommunalService.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -20,182 +20,171 @@\n @Service\n public class CommunalService {\n \n-    private static final Logger logger = LoggerFactory.getLogger(CommunalService.class);\n-\n-    /** Идентификатор сервиса, поставляеющего услугу. */\n-    public static final Long SERVICE_ID = 21L;\n-    /** Налоговый процент. */\n-    public static final Integer TAX_PERCENT = 10;\n-\n-    private final PropertyRepository propertyRepository;\n-    private final UtilityBillRepository utilityBillRepository;\n-    private final UtilitiesPriceListRepository utilitiesPriceListRepository;\n-    private final BankIntegrationService bankIntegrationService;\n-\n-    @Autowired\n-    public CommunalService(\n-        final PropertyRepository propertyRepository,\n-        final UtilityBillRepository utilityBillRepository,\n-        final UtilitiesPriceListRepository utilitiesPriceListRepository,\n-        final BankIntegrationService bankIntegrationService\n-    ) {\n-        this.propertyRepository = propertyRepository;\n-        this.utilityBillRepository = utilityBillRepository;\n-        this.utilitiesPriceListRepository = utilitiesPriceListRepository;\n-        this.bankIntegrationService = bankIntegrationService;\n+  private static final Logger logger = LoggerFactory.getLogger(CommunalService.class);\n+\n+  /** Идентификатор сервиса, поставляеющего услугу. */\n+  public static final Long SERVICE_ID = 21L;\n+  /** Налоговый процент. */\n+  public static final Integer TAX_PERCENT = 10;\n+\n+  private final PropertyRepository propertyRepository;\n+  private final UtilityBillRepository utilityBillRepository;\n+  private final UtilitiesPriceListRepository utilitiesPriceListRepository;\n+  private final BankIntegrationService bankIntegrationService;\n+\n+  @Autowired\n+  public CommunalService(\n+      final PropertyRepository propertyRepository,\n+      final UtilityBillRepository utilityBillRepository,\n+      final UtilitiesPriceListRepository utilitiesPriceListRepository,\n+      final BankIntegrationService bankIntegrationService) {\n+    this.propertyRepository = propertyRepository;\n+    this.utilityBillRepository = utilityBillRepository;\n+    this.utilitiesPriceListRepository = utilitiesPriceListRepository;\n+    this.bankIntegrationService = bankIntegrationService;\n+  }\n+\n+  /**\n+   * Возвращает прейскурант для рассчёта стоимости затраченных коммунальных услуг.\n+   *\n+   * @param region наименование региона\n+   * @return прейскурант\n+   * @throws UtilitiesPriceListNotFoundException если не удасться найти прейскурант по заданному\n+   *     региону\n+   */\n+  public UtilitiesPriceList findPriceListByRegion(final String region) {\n+    final UtilitiesPriceList priceList =\n+        this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(region);\n+    if (priceList == null) {\n+      throw new UtilitiesPriceListNotFoundException(region);\n     }\n-\n-    /**\n-     * Возвращает прейскурант для рассчёта стоимости\n-     *          затраченных коммунальных услуг.\n-     *\n-     * @param region наименование региона\n-     * @return прейскурант\n-     * @throws UtilitiesPriceListNotFoundException если не удасться найти\n-     *          прейскурант по заданному региону\n-     */\n-    public UtilitiesPriceList findPriceListByRegion(\n-        final String region\n-    ) {\n-        final UtilitiesPriceList priceList =\n-            this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(region);\n-        if (priceList == null) {\n-            throw new UtilitiesPriceListNotFoundException(region);\n-        }\n-        return priceList;\n-    }\n-\n-    /**\n-     * Возвращает данные о объект недвижимость.\n-     *\n-     * @param propertyId идентификатор недвижимости\n-     * @return объект недвижимость\n-     * @throws PropertyNotFoundException если не удасться найти недвижимость\n-     *          с заданным идентификатором\n-     */\n-    public Property findPropertyById(final Long propertyId) {\n-        final Property property = this.propertyRepository\n-            .findPropertyByPropertyId(propertyId);\n-        if (property == null) {\n-            throw new PropertyNotFoundException(propertyId);\n-        }\n-        return property;\n+    return priceList;\n+  }\n+\n+  /**\n+   * Возвращает данные о объект недвижимость.\n+   *\n+   * @param propertyId идентификатор недвижимости\n+   * @return объект недвижимость\n+   * @throws PropertyNotFoundException если не удасться найти недвижимость с заданным\n+   *     идентификатором\n+   */\n+  public Property findPropertyById(final Long propertyId) {\n+    final Property property = this.propertyRepository.findPropertyByPropertyId(propertyId);\n+    if (property == null) {\n+      throw new PropertyNotFoundException(propertyId);\n     }\n-\n-    /**\n-     * Возвращает все прейскуранты из БД.\n-     *\n-     * @return список прейскурантов\n-     */\n-    public List<UtilitiesPriceList> getAllUtilitiesPriceList() {\n-        return this.utilitiesPriceListRepository.findAll();\n-    }\n-\n-    /**\n-     * Добовляет/Обнавляет прейскурант.\n-     *\n-     * @param newPriceList информация о прейскуранте\n-     * @return http-ответ, в теле которого находится сохранённый прейскурант\n-     */\n-    public ResponseEntity<UtilitiesPriceList> addUtilitiesPriceList(\n-        final CreationUtilitiesPriceList newPriceList\n-    ) {\n-        final ResponseEntity<UtilitiesPriceList> response;\n-        final UtilitiesPriceList utilitiesPriceList = UtilitiesPriceList\n-            .builder()\n+    return property;\n+  }\n+\n+  /**\n+   * Возвращает все прейскуранты из БД.\n+   *\n+   * @return список прейскурантов\n+   */\n+  public List<UtilitiesPriceList> getAllUtilitiesPriceList() {\n+    return this.utilitiesPriceListRepository.findAll();\n+  }\n+\n+  /**\n+   * Добовляет/Обнавляет прейскурант.\n+   *\n+   * @param newPriceList информация о прейскуранте\n+   * @return http-ответ, в теле которого находится сохранённый прейскурант\n+   */\n+  public ResponseEntity<UtilitiesPriceList> addUtilitiesPriceList(\n+      final CreationUtilitiesPriceList newPriceList) {\n+    final ResponseEntity<UtilitiesPriceList> response;\n+    final UtilitiesPriceList utilitiesPriceList =\n+        UtilitiesPriceList.builder()\n             .region(newPriceList.getRegion())\n             .coldWaterPrice(newPriceList.getColdWaterPrice())\n             .hotWaterPrice(newPriceList.getHotWaterPrice())\n             .electricityPrice(newPriceList.getElectricityPrice())\n             .build();\n-        final UtilitiesPriceList lastPriceList = // пришлось использовать метод из напрямую репозитория\n-            this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(newPriceList.getRegion());\n-        if (lastPriceList == null) { // пришлось сделать так, а не через catch\n-            this.utilitiesPriceListRepository.save(utilitiesPriceList);\n-            logger.info(\"UtilitiesPriceList has been created!\");\n-\n-            response = ResponseEntity.ok(utilitiesPriceList);\n-        } else {\n-            lastPriceList.setElectricityPrice(newPriceList.getElectricityPrice());\n-            lastPriceList.setColdWaterPrice(newPriceList.getColdWaterPrice());\n-            lastPriceList.setHotWaterPrice(newPriceList.getHotWaterPrice());\n-\n-            this.utilitiesPriceListRepository.save(lastPriceList);\n-            logger.info(\"UtilitiesPriceList has been updated!\");\n-\n-            response = ResponseEntity.ok(lastPriceList);\n-        }\n-        return response;\n+    final UtilitiesPriceList lastPriceList = // пришлось использовать метод из напрямую репозитория\n+        this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(newPriceList.getRegion());\n+    if (lastPriceList == null) { // пришлось сделать так, а не через catch\n+      this.utilitiesPriceListRepository.save(utilitiesPriceList);\n+      logger.info(\"UtilitiesPriceList has been created!\");\n+\n+      response = ResponseEntity.ok(utilitiesPriceList);\n+    } else {\n+      lastPriceList.setElectricityPrice(newPriceList.getElectricityPrice());\n+      lastPriceList.setColdWaterPrice(newPriceList.getColdWaterPrice());\n+      lastPriceList.setHotWaterPrice(newPriceList.getHotWaterPrice());\n+\n+      this.utilitiesPriceListRepository.save(lastPriceList);\n+      logger.info(\"UtilitiesPriceList has been updated!\");\n+\n+      response = ResponseEntity.ok(lastPriceList);\n     }\n-\n-    /**\n-     * Рассчитывает коммунальные затраты и вписывает их в квитанцию.\n-     *\n-     * @param region наименование региона.\n-     * @param utilitiesPayload входные данные с идентификатором имущества,\n-     *          и кол-вом затраченных коммунальных услуг\n-     * @return квитанция с заполненными данными о коммунальных затратах\n-     */\n-    public UtilityBill calculateUtilityCosts(\n-        final String region,\n-        final UtilitiesPayload utilitiesPayload\n-    ) {\n-        final UtilitiesPriceList utilitiesPriceList = this.findPriceListByRegion(region);\n-        final UtilityBill utilityBill = UtilityBill\n-            .builder()\n+    return response;\n+  }\n+\n+  /**\n+   * Рассчитывает коммунальные затраты и вписывает их в квитанцию.\n+   *\n+   * @param region наименование региона.\n+   * @param utilitiesPayload входные данные с идентификатором имущества, и кол-вом затраченных\n+   *     коммунальных услуг\n+   * @return квитанция с заполненными данными о коммунальных затратах\n+   */\n+  public UtilityBill calculateUtilityCosts(\n+      final String region, final UtilitiesPayload utilitiesPayload) {\n+    final UtilitiesPriceList utilitiesPriceList = this.findPriceListByRegion(region);\n+    final UtilityBill utilityBill =\n+        UtilityBill.builder()\n             .coldWater(utilitiesPayload.getColdWater())\n             .hotWater(utilitiesPayload.getHotWater())\n             .electricity(utilitiesPayload.getElectricity())\n             .propertyId(utilitiesPayload.getPropertyId())\n-            .coldWaterAmount(utilitiesPayload.getColdWater() * utilitiesPriceList.getColdWaterPrice())\n+            .coldWaterAmount(\n+                utilitiesPayload.getColdWater() * utilitiesPriceList.getColdWaterPrice())\n             .hotWaterAmount(utilitiesPayload.getHotWater() * utilitiesPriceList.getHotWaterPrice())\n-            .electricityAmount(utilitiesPayload.getElectricity() * utilitiesPriceList.getElectricityPrice())\n+            .electricityAmount(\n+                utilitiesPayload.getElectricity() * utilitiesPriceList.getElectricityPrice())\n             .build();\n-        utilityBill.setUtilityAmount(\n-            utilityBill.getColdWaterAmount()\n-                + utilityBill.getHotWaterAmount()\n-                + utilityBill.getElectricityAmount());\n-\n-        logger.info(\"SSS Initial Utility Bill: {}\", utilityBill);\n-        return utilityBill;\n-    }\n-\n-    /**\n-     * Создание квитанцию на затраченные коммунальные услуги.\n-     *\n-     * @param utilitiesPayload входные данные с идентификатором имущества,\n-     *          и кол-вом затраченных коммунальных услуг\n-     * @return ответ со статусм 200 и созданная квитанция\n-     */\n-    public ResponseEntity<UtilityBill> calculateUtilityBill(\n-        final UtilitiesPayload utilitiesPayload\n-    ) {\n-        final Property property =\n-            this.findPropertyById(utilitiesPayload.getPropertyId());\n-        final UtilityBill utilityBill =\n-            this.calculateUtilityCosts(property.getRegion(), utilitiesPayload);\n-        utilityBill.setCitizenId(property.getCitizenId());\n-        final Long paymentRequestId =\n-            this.bankIntegrationService\n-                .bankRequest(\n-                    SERVICE_ID,\n-                    utilityBill.getCitizenId(),\n-                    utilityBill.getUtilityAmount(),\n-                    utilityBill.getUtilityAmount() / TAX_PERCENT\n-                );\n-        utilityBill.setPaymentRequestId(paymentRequestId);\n-        this.utilityBillRepository.save(utilityBill);\n-\n-        logger.info(\"Utility Bill has been created\");\n-        return ResponseEntity.ok(utilityBill);\n-    }\n-\n-    /**\n-     * Возвращает все коммунальные квитанции.\n-     *\n-     * @return список коммунальных квитанций\n-     */\n-    public List<UtilityBill> getAllUtilityBills() {\n-        return this.utilityBillRepository.findAll();\n-    }\n+    utilityBill.setUtilityAmount(\n+        utilityBill.getColdWaterAmount()\n+            + utilityBill.getHotWaterAmount()\n+            + utilityBill.getElectricityAmount());\n+\n+    logger.info(\"SSS Initial Utility Bill: {}\", utilityBill);\n+    return utilityBill;\n+  }\n+\n+  /**\n+   * Создание квитанцию на затраченные коммунальные услуги.\n+   *\n+   * @param utilitiesPayload входные данные с идентификатором имущества, и кол-вом затраченных\n+   *     коммунальных услуг\n+   * @return ответ со статусм 200 и созданная квитанция\n+   */\n+  public ResponseEntity<UtilityBill> calculateUtilityBill(final UtilitiesPayload utilitiesPayload) {\n+    final Property property = this.findPropertyById(utilitiesPayload.getPropertyId());\n+    final UtilityBill utilityBill =\n+        this.calculateUtilityCosts(property.getRegion(), utilitiesPayload);\n+    utilityBill.setCitizenId(property.getCitizenId());\n+    final Long paymentRequestId =\n+        this.bankIntegrationService.bankRequest(\n+            SERVICE_ID,\n+            utilityBill.getCitizenId(),\n+            utilityBill.getUtilityAmount(),\n+            utilityBill.getUtilityAmount() / TAX_PERCENT);\n+    utilityBill.setPaymentRequestId(paymentRequestId);\n+    this.utilityBillRepository.save(utilityBill);\n+\n+    logger.info(\"Utility Bill has been created\");\n+    return ResponseEntity.ok(utilityBill);\n+  }\n+\n+  /**\n+   * Возвращает все коммунальные квитанции.\n+   *\n+   * @return список коммунальных квитанций\n+   */\n+  public List<UtilityBill> getAllUtilityBills() {\n+    return this.utilityBillRepository.findAll();\n+  }\n }"
  },
  {
    "sha": "507a6155541195b592d803853d3e203a499bf753",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/services/PropertyTaxService.java",
    "status": "modified",
    "additions": 217,
    "deletions": 243,
    "changes": 460,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/services/PropertyTaxService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/main/java/nc/unc/cs/services/communal/services/PropertyTaxService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/services/PropertyTaxService.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,7 +1,7 @@\n package nc.unc.cs.services.communal.services;\n \n-import java.util.List;\n import feign.FeignException;\n+import java.util.List;\n import nc.unc.cs.services.communal.controllers.payloads.CreationPropertyTaxValue;\n import nc.unc.cs.services.communal.entities.Property;\n import nc.unc.cs.services.communal.entities.PropertyTax;\n@@ -21,283 +21,257 @@\n \n @Service\n public class PropertyTaxService {\n-    /** Логгер. */\n-    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyTaxService.class);\n+  /** Логгер. */\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PropertyTaxService.class);\n \n-    /** Налоговый процент от стоимости платежа. */\n-    public static final Integer TAX_PERCENT = 10;\n-    /** Номер сервиса. */\n-    public static final Long SERVICE_ID = 20L;\n-    /** Процентный делитель. */\n-    public static final Double PERCENT_DIVISOR = 100.0;\n+  /** Налоговый процент от стоимости платежа. */\n+  public static final Integer TAX_PERCENT = 10;\n+  /** Номер сервиса. */\n+  public static final Long SERVICE_ID = 20L;\n+  /** Процентный делитель. */\n+  public static final Double PERCENT_DIVISOR = 100.0;\n \n-    /** Репозиторий недвижимости. */\n-    private final PropertyRepository propertyRepository;\n-    /** Репозиторий налогов на недвижимость. */\n-    private final PropertyTaxRepository propertyTaxRepository;\n-    /** Репозиторий прейскурантов. */\n-    private final PropertyTaxValueRepository propertyTaxValueRepository;\n-    /** Класс с интеграциями с банковским сервисом. */\n-    private final BankIntegrationService bankIntegrationService;\n+  /** Репозиторий недвижимости. */\n+  private final PropertyRepository propertyRepository;\n+  /** Репозиторий налогов на недвижимость. */\n+  private final PropertyTaxRepository propertyTaxRepository;\n+  /** Репозиторий прейскурантов. */\n+  private final PropertyTaxValueRepository propertyTaxValueRepository;\n+  /** Класс с интеграциями с банковским сервисом. */\n+  private final BankIntegrationService bankIntegrationService;\n \n-    /**\n-     * Конструктор.\n-     *\n-     * @param propertyRepository репозиторий недвижимости\n-     * @param propertyTaxRepository репозиторий налогов на недвижимость\n-     * @param propertyTaxValueRepository репозиторий прейскурантов\n-     * @param bankIntegrationService класс с интеграциями с банковским сервисом.\n-     */\n-    @Autowired\n-    public PropertyTaxService(\n-        final PropertyRepository propertyRepository,\n-        final PropertyTaxRepository propertyTaxRepository,\n-        final PropertyTaxValueRepository propertyTaxValueRepository,\n-        final BankIntegrationService bankIntegrationService\n-    ) {\n-        this.propertyRepository = propertyRepository;\n-        this.propertyTaxRepository = propertyTaxRepository;\n-        this.propertyTaxValueRepository = propertyTaxValueRepository;\n-        this.bankIntegrationService = bankIntegrationService;\n-    }\n+  /**\n+   * Конструктор.\n+   *\n+   * @param propertyRepository репозиторий недвижимости\n+   * @param propertyTaxRepository репозиторий налогов на недвижимость\n+   * @param propertyTaxValueRepository репозиторий прейскурантов\n+   * @param bankIntegrationService класс с интеграциями с банковским сервисом.\n+   */\n+  @Autowired\n+  public PropertyTaxService(\n+      final PropertyRepository propertyRepository,\n+      final PropertyTaxRepository propertyTaxRepository,\n+      final PropertyTaxValueRepository propertyTaxValueRepository,\n+      final BankIntegrationService bankIntegrationService) {\n+    this.propertyRepository = propertyRepository;\n+    this.propertyTaxRepository = propertyTaxRepository;\n+    this.propertyTaxValueRepository = propertyTaxValueRepository;\n+    this.bankIntegrationService = bankIntegrationService;\n+  }\n \n-    /**\n-     * Добавляет или изменяет прейскурант.\n-     *\n-     * @param newPropertyTaxValue новый прейскурант\n-     * @return http-ответ, в теле которого находится созданный прейскурант\n-     */\n-    public ResponseEntity<PropertyTaxValue> addPropertyTaxValue(\n-        final CreationPropertyTaxValue newPropertyTaxValue\n-    ) {\n-        final PropertyTaxValue propertyTaxValue = PropertyTaxValue\n-            .builder()\n+  /**\n+   * Добавляет или изменяет прейскурант.\n+   *\n+   * @param newPropertyTaxValue новый прейскурант\n+   * @return http-ответ, в теле которого находится созданный прейскурант\n+   */\n+  public ResponseEntity<PropertyTaxValue> addPropertyTaxValue(\n+      final CreationPropertyTaxValue newPropertyTaxValue) {\n+    final PropertyTaxValue propertyTaxValue =\n+        PropertyTaxValue.builder()\n             .region(newPropertyTaxValue.getRegion())\n             .pricePerSquareMeter(newPropertyTaxValue.getPricePerSquareMeter())\n             .cadastralValue(newPropertyTaxValue.getCadastralValue())\n             .build();\n \n-        final ResponseEntity<PropertyTaxValue> response;\n-        final PropertyTaxValue lastPropertyTaxValue =\n-            this.propertyTaxValueRepository\n-                .findPropertyTaxValueByRegion(\n-                    propertyTaxValue.getRegion());\n-        if (lastPropertyTaxValue == null) {\n-            this.propertyTaxValueRepository.save(propertyTaxValue);\n-            LOGGER.info(\"Property Tax Value has been created.\");\n-            response = ResponseEntity.ok(propertyTaxValue);\n-        } else {\n-            lastPropertyTaxValue\n-                .setCadastralValue(propertyTaxValue\n-                    .getCadastralValue());\n-            lastPropertyTaxValue\n-                .setPricePerSquareMeter(propertyTaxValue\n-                    .getPricePerSquareMeter());\n-            this.propertyTaxValueRepository.save(lastPropertyTaxValue);\n-            LOGGER.info(\"PropertyTaxValue has been updated.\");\n-            response = ResponseEntity.ok(lastPropertyTaxValue);\n-        }\n-        return response;\n+    final ResponseEntity<PropertyTaxValue> response;\n+    final PropertyTaxValue lastPropertyTaxValue =\n+        this.propertyTaxValueRepository.findPropertyTaxValueByRegion(propertyTaxValue.getRegion());\n+    if (lastPropertyTaxValue == null) {\n+      this.propertyTaxValueRepository.save(propertyTaxValue);\n+      LOGGER.info(\"Property Tax Value has been created.\");\n+      response = ResponseEntity.ok(propertyTaxValue);\n+    } else {\n+      lastPropertyTaxValue.setCadastralValue(propertyTaxValue.getCadastralValue());\n+      lastPropertyTaxValue.setPricePerSquareMeter(propertyTaxValue.getPricePerSquareMeter());\n+      this.propertyTaxValueRepository.save(lastPropertyTaxValue);\n+      LOGGER.info(\"PropertyTaxValue has been updated.\");\n+      response = ResponseEntity.ok(lastPropertyTaxValue);\n     }\n+    return response;\n+  }\n \n-    /**\n-     * Возвращает все прейскуранты.\n-     *\n-     * @return Налоговая квитанция\n-     */\n-    public List<PropertyTaxValue> getListPropertyTaxValue() {\n-        return this.propertyTaxValueRepository.findAll();\n-    }\n+  /**\n+   * Возвращает все прейскуранты.\n+   *\n+   * @return Налоговая квитанция\n+   */\n+  public List<PropertyTaxValue> getListPropertyTaxValue() {\n+    return this.propertyTaxValueRepository.findAll();\n+  }\n \n-    /**\n-     * Возвращает прейскурант по указанному идентификатору.\n-     *\n-     * @param propertyTaxValueId идентификатор прейскуранта\n-     * @return Налоговая квитанция\n-     */\n-    public PropertyTaxValue getPropertyTaxValueById(final Long propertyTaxValueId) {\n-        return this.propertyTaxValueRepository\n-            .findPropertyTaxValueByPropertyTaxValueId(propertyTaxValueId);\n-    }\n+  /**\n+   * Возвращает прейскурант по указанному идентификатору.\n+   *\n+   * @param propertyTaxValueId идентификатор прейскуранта\n+   * @return Налоговая квитанция\n+   */\n+  public PropertyTaxValue getPropertyTaxValueById(final Long propertyTaxValueId) {\n+    return this.propertyTaxValueRepository.findPropertyTaxValueByPropertyTaxValueId(\n+        propertyTaxValueId);\n+  }\n \n-    /**\n-     * Возвращает прейскурант для указанного региона.\n-     *\n-     * @param region название региона\n-     * @return Налоговая квитанция\n-     */\n-    public PropertyTaxValue getPropertyTaxValueByRegion(final String region) {\n-        return this.propertyTaxValueRepository\n-            .findPropertyTaxValueByRegion(region.trim().toUpperCase());\n-    }\n+  /**\n+   * Возвращает прейскурант для указанного региона.\n+   *\n+   * @param region название региона\n+   * @return Налоговая квитанция\n+   */\n+  public PropertyTaxValue getPropertyTaxValueByRegion(final String region) {\n+    return this.propertyTaxValueRepository.findPropertyTaxValueByRegion(\n+        region.trim().toUpperCase());\n+  }\n \n-    /**\n-     * Расчёт налога на имущество.\n-     *\n-     * @param apartmentSize кол-во кв.м. в помещении\n-     * @param pricePerSquareMeter стоимость кв.м. в данном регионе\n-     * @param cadastralValue кадастровый значение (процент) в данном регионе\n-     * @return расчитанный налог\n-     */\n-    public Integer calculatePropertyTaxAmount(\n-        final Double apartmentSize,\n-        final Double pricePerSquareMeter,\n-        final Double cadastralValue\n-    ) {\n-        return\n-            (int) (apartmentSize * pricePerSquareMeter / PERCENT_DIVISOR\n-                * (cadastralValue / PERCENT_DIVISOR));\n-    }\n+  /**\n+   * Расчёт налога на имущество.\n+   *\n+   * @param apartmentSize кол-во кв.м. в помещении\n+   * @param pricePerSquareMeter стоимость кв.м. в данном регионе\n+   * @param cadastralValue кадастровый значение (процент) в данном регионе\n+   * @return расчитанный налог\n+   */\n+  public Integer calculatePropertyTaxAmount(\n+      final Double apartmentSize, final Double pricePerSquareMeter, final Double cadastralValue) {\n+    return (int)\n+        (apartmentSize\n+            * pricePerSquareMeter\n+            / PERCENT_DIVISOR\n+            * (cadastralValue / PERCENT_DIVISOR));\n+  }\n \n-    /**\n-     * Возвращает прайс-лист для имущественного расчёта налога.\n-     *\n-     * @param region наименование региона\n-     * @return прайс-лист\n-     * @throws PropertyTaxValueNotFoundException если не удасться найти\n-     *          прайс-лист с заданным регионом\n-     */\n-    public PropertyTaxValue findPropertyTaxValueByRegion(\n-        final String region\n-    ) throws PropertyTaxValueNotFoundException {\n-        final PropertyTaxValue propertyTaxValue =\n-            this.propertyTaxValueRepository.findPropertyTaxValueByRegion(region);\n-        if (propertyTaxValue == null) {\n-            throw new PropertyTaxValueNotFoundException(region);\n-        }\n-        return propertyTaxValue;\n+  /**\n+   * Возвращает прайс-лист для имущественного расчёта налога.\n+   *\n+   * @param region наименование региона\n+   * @return прайс-лист\n+   * @throws PropertyTaxValueNotFoundException если не удасться найти прайс-лист с заданным регионом\n+   */\n+  public PropertyTaxValue findPropertyTaxValueByRegion(final String region)\n+      throws PropertyTaxValueNotFoundException {\n+    final PropertyTaxValue propertyTaxValue =\n+        this.propertyTaxValueRepository.findPropertyTaxValueByRegion(region);\n+    if (propertyTaxValue == null) {\n+      throw new PropertyTaxValueNotFoundException(region);\n     }\n+    return propertyTaxValue;\n+  }\n \n-    /**\n-     * Возвращает данные о объект недвижимость.\n-     *\n-     * @param propertyId идентификатор недвижимости\n-     * @return объект недвижимость\n-     * @throws PropertyNotFoundException если не удасться найти недвижимость\n-     *          с заданным идентификатором\n-     */\n-    public Property findPropertyById(\n-        final Long propertyId\n-    ) throws PropertyNotFoundException {\n-        final Property property =\n-            this.propertyRepository.findPropertyByPropertyId(propertyId);\n-        if (property == null) {\n-            throw new PropertyNotFoundException(propertyId);\n-        }\n-        return property;\n+  /**\n+   * Возвращает данные о объект недвижимость.\n+   *\n+   * @param propertyId идентификатор недвижимости\n+   * @return объект недвижимость\n+   * @throws PropertyNotFoundException если не удасться найти недвижимость с заданным\n+   *     идентификатором\n+   */\n+  public Property findPropertyById(final Long propertyId) throws PropertyNotFoundException {\n+    final Property property = this.propertyRepository.findPropertyByPropertyId(propertyId);\n+    if (property == null) {\n+      throw new PropertyNotFoundException(propertyId);\n     }\n+    return property;\n+  }\n \n-    /**\n-     * Создаёт налог на недвижимость.\n-     *\n-     * @param propertyId идетнтификатор недвижимости\n-     * @return http-ответ, в теле которого находится налоговая квитанция\n-     * @throws FeignException если не удасться обратиться к Банковскому сервису\n-     */\n-    public ResponseEntity<PropertyTax> calculatePropertyTax(\n-        final Long propertyId\n-    ) throws FeignException {\n-        final Property property =\n-            this.findPropertyById(propertyId);\n-        final PropertyTaxValue propertyTaxValue =\n-            this.findPropertyTaxValueByRegion((property.getRegion()));\n-        final Integer amount = this.calculatePropertyTaxAmount(\n+  /**\n+   * Создаёт налог на недвижимость.\n+   *\n+   * @param propertyId идетнтификатор недвижимости\n+   * @return http-ответ, в теле которого находится налоговая квитанция\n+   * @throws FeignException если не удасться обратиться к Банковскому сервису\n+   */\n+  public ResponseEntity<PropertyTax> calculatePropertyTax(final Long propertyId)\n+      throws FeignException {\n+    final Property property = this.findPropertyById(propertyId);\n+    final PropertyTaxValue propertyTaxValue =\n+        this.findPropertyTaxValueByRegion((property.getRegion()));\n+    final Integer amount =\n+        this.calculatePropertyTaxAmount(\n             Double.valueOf(property.getApartmentSize()),\n             Double.valueOf(propertyTaxValue.getPricePerSquareMeter()),\n             Double.valueOf(propertyTaxValue.getCadastralValue()));\n \n-        final PropertyTax propertyTax = PropertyTax\n-            .builder()\n+    final PropertyTax propertyTax =\n+        PropertyTax.builder()\n             .propertyId(property.getPropertyId())\n             .citizenId(property.getCitizenId())\n             .taxAmount(amount)\n             .paymentRequestId(\n                 this.bankIntegrationService.bankRequest(\n-                    SERVICE_ID,\n-                    property.getCitizenId(),\n-                    amount,\n-                    TAX_PERCENT))\n+                    SERVICE_ID, property.getCitizenId(), amount, TAX_PERCENT))\n             .build();\n-        this.propertyTaxRepository.save(propertyTax);\n-        LOGGER.info(\"PropertyTax successfully created\");\n-        return ResponseEntity.ok(propertyTax);\n-    }\n+    this.propertyTaxRepository.save(propertyTax);\n+    LOGGER.info(\"PropertyTax successfully created\");\n+    return ResponseEntity.ok(propertyTax);\n+  }\n \n-    /**\n-     * Проверяет и изменяет статуса опалаты налоговой квитанции.\n-     *\n-     * @param propertyTaxId идентификатор квитанции с данными о налоге\n-     * @return http-ответ, в теле которого находится\n-     *          изменённая налоговая квитанция\n-     */\n-    public ResponseEntity<PropertyTax> changePropertyTaxStatus(final Long propertyTaxId) {\n-        final ResponseEntity<PropertyTax> response;\n-        final PropertyTax propertyTax = this.getPropertyTaxById(propertyTaxId);\n-        final Boolean isPaid = this.bankIntegrationService\n-            .checkPaymentStatus(propertyTax.getPaymentRequestId());\n-        if (Boolean.TRUE.equals(isPaid)) {\n-            propertyTax.setIsPaid(true);\n-            this.propertyTaxRepository.save(propertyTax);\n-            LOGGER.info(\"PropertyTax with ID = {} has been paid\", propertyTaxId);\n+  /**\n+   * Проверяет и изменяет статуса опалаты налоговой квитанции.\n+   *\n+   * @param propertyTaxId идентификатор квитанции с данными о налоге\n+   * @return http-ответ, в теле которого находится изменённая налоговая квитанция\n+   */\n+  public ResponseEntity<PropertyTax> changePropertyTaxStatus(final Long propertyTaxId) {\n+    final ResponseEntity<PropertyTax> response;\n+    final PropertyTax propertyTax = this.getPropertyTaxById(propertyTaxId);\n+    final Boolean isPaid =\n+        this.bankIntegrationService.checkPaymentStatus(propertyTax.getPaymentRequestId());\n+    if (Boolean.TRUE.equals(isPaid)) {\n+      propertyTax.setIsPaid(true);\n+      this.propertyTaxRepository.save(propertyTax);\n+      LOGGER.info(\"PropertyTax with ID = {} has been paid\", propertyTaxId);\n \n-            response = ResponseEntity.ok(propertyTax);\n-        } else {\n-            LOGGER.error(\"PropertyTax with ID = {} was not paid\", propertyTax.getPropertyTaxId());\n-            response = ResponseEntity\n-                .status(HttpStatus.PAYMENT_REQUIRED)\n-                .body(propertyTax);\n-        }\n-        return response;\n+      response = ResponseEntity.ok(propertyTax);\n+    } else {\n+      LOGGER.error(\"PropertyTax with ID = {} was not paid\", propertyTax.getPropertyTaxId());\n+      response = ResponseEntity.status(HttpStatus.PAYMENT_REQUIRED).body(propertyTax);\n     }\n+    return response;\n+  }\n \n-    /**\n-     * Возвращает все налоговые квитанции на недвижимость\n-     *          для конкретного гражданина.\n-     *\n-     * @param citizenId идентификатор гражданина\n-     * @return Список налоговых квитанций\n-     */\n-    public List<PropertyTax> getPropertyTaxesByCitizenId(final Long citizenId) {\n-        return this.propertyTaxRepository.findPropertyTaxByCitizenId(citizenId);\n-    }\n+  /**\n+   * Возвращает все налоговые квитанции на недвижимость для конкретного гражданина.\n+   *\n+   * @param citizenId идентификатор гражданина\n+   * @return Список налоговых квитанций\n+   */\n+  public List<PropertyTax> getPropertyTaxesByCitizenId(final Long citizenId) {\n+    return this.propertyTaxRepository.findPropertyTaxByCitizenId(citizenId);\n+  }\n \n-    /**\n-     * Возвращает все налоговые квитанции на недвижимость\n-     *          для конкретного имущества.\n-     *\n-     * @param propertyId идентификатор недвижимости,\n-     *         на которую были расчитаны налоги\n-     * @return Список налоговых квитанций\n-     */\n-    public List<PropertyTax> getDebtPropertyTaxesByProperty(final Long propertyId) {\n-        return this.propertyTaxRepository.findPropertyTaxesByPropertyIdAndIsPaid(propertyId, false);\n-    }\n+  /**\n+   * Возвращает все налоговые квитанции на недвижимость для конкретного имущества.\n+   *\n+   * @param propertyId идентификатор недвижимости, на которую были расчитаны налоги\n+   * @return Список налоговых квитанций\n+   */\n+  public List<PropertyTax> getDebtPropertyTaxesByProperty(final Long propertyId) {\n+    return this.propertyTaxRepository.findPropertyTaxesByPropertyIdAndIsPaid(propertyId, false);\n+  }\n \n-    /**\n-     * Возвращает все налоговые квитанции.\n-     *\n-     * @return Список налоговых квитанций\n-     */\n-    public List<PropertyTax> getAllPropertyTax() {\n-        return this.propertyTaxRepository.findAll();\n-    }\n+  /**\n+   * Возвращает все налоговые квитанции.\n+   *\n+   * @return Список налоговых квитанций\n+   */\n+  public List<PropertyTax> getAllPropertyTax() {\n+    return this.propertyTaxRepository.findAll();\n+  }\n \n-    /**\n-     * Возвращает налоговую квитанции на недвижимость\n-     *          по указаноому идентификатору.\n-     *\n-     * @param propertyTaxId идентификатор налоговой квитанции\n-     * @return налоговая квитанция\n-     * @throws PropertyTaxNotFoundException если не найдётся налог на имущество\n-     */\n-    public PropertyTax getPropertyTaxById(\n-        final Long propertyTaxId\n-    ) throws PropertyTaxNotFoundException {\n-        final PropertyTax propertyTax = this.propertyTaxRepository\n-            .findPropertyTaxByPropertyTaxId(propertyTaxId);\n-        if (propertyTax == null) {\n-            throw new PropertyTaxNotFoundException(propertyTaxId);\n-        }\n-        return propertyTax;\n+  /**\n+   * Возвращает налоговую квитанции на недвижимость по указаноому идентификатору.\n+   *\n+   * @param propertyTaxId идентификатор налоговой квитанции\n+   * @return налоговая квитанция\n+   * @throws PropertyTaxNotFoundException если не найдётся налог на имущество\n+   */\n+  public PropertyTax getPropertyTaxById(final Long propertyTaxId)\n+      throws PropertyTaxNotFoundException {\n+    final PropertyTax propertyTax =\n+        this.propertyTaxRepository.findPropertyTaxByPropertyTaxId(propertyTaxId);\n+    if (propertyTax == null) {\n+      throw new PropertyTaxNotFoundException(propertyTaxId);\n     }\n+    return propertyTax;\n+  }\n }"
  },
  {
    "sha": "f82fb7cc22685fc18f651659fa80acd326dd12ef",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/UtilityBillPriceListParent.java",
    "status": "modified",
    "additions": 21,
    "deletions": 22,
    "changes": 43,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/UtilityBillPriceListParent.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/UtilityBillPriceListParent.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/UtilityBillPriceListParent.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -10,28 +10,27 @@\n \n @WebMvcTest(controllers = {UtilitiesPriceListController.class})\n public class UtilityBillPriceListParent extends ParentWeb {\n-    protected static final String UTILITY_BILL_PRICE_LIST_MAPPING =\n-            \"http://localhost:8083/communal/utilities/price-list\";\n-    @MockBean protected CommunalService communalService;\n+  protected static final String UTILITY_BILL_PRICE_LIST_MAPPING =\n+      \"http://localhost:8083/communal/utilities/price-list\";\n+  @MockBean protected CommunalService communalService;\n \n-    protected final UtilitiesPriceList createUtilitiesPriceList() {\n-        CreationUtilitiesPriceList creationUtilitiesPriceList =\n-                this.createCreationUtilitiesPriceList();\n-        return UtilitiesPriceList.builder()\n-                .utilitiesPriceListId(1L)\n-                .region(creationUtilitiesPriceList.getRegion())\n-                .coldWaterPrice(creationUtilitiesPriceList.getColdWaterPrice())\n-                .hotWaterPrice(creationUtilitiesPriceList.getHotWaterPrice())\n-                .electricityPrice(creationUtilitiesPriceList.getElectricityPrice())\n-                .build();\n-    }\n+  protected final UtilitiesPriceList createUtilitiesPriceList() {\n+    CreationUtilitiesPriceList creationUtilitiesPriceList = this.createCreationUtilitiesPriceList();\n+    return UtilitiesPriceList.builder()\n+        .utilitiesPriceListId(1L)\n+        .region(creationUtilitiesPriceList.getRegion())\n+        .coldWaterPrice(creationUtilitiesPriceList.getColdWaterPrice())\n+        .hotWaterPrice(creationUtilitiesPriceList.getHotWaterPrice())\n+        .electricityPrice(creationUtilitiesPriceList.getElectricityPrice())\n+        .build();\n+  }\n \n-    protected final CreationUtilitiesPriceList createCreationUtilitiesPriceList() {\n-        return CreationUtilitiesPriceList.builder()\n-                .region(\" samara \")\n-                .coldWaterPrice(3)\n-                .hotWaterPrice(20)\n-                .electricityPrice(5)\n-                .build();\n-    }\n+  protected final CreationUtilitiesPriceList createCreationUtilitiesPriceList() {\n+    return CreationUtilitiesPriceList.builder()\n+        .region(\" samara \")\n+        .coldWaterPrice(3)\n+        .hotWaterPrice(20)\n+        .electricityPrice(5)\n+        .build();\n+  }\n }"
  },
  {
    "sha": "350dea0cc424866b0c4efff9c59172d629dd7e4a",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/correct/AddUtilityBillPriceListTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 19,
    "changes": 35,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/correct/AddUtilityBillPriceListTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/correct/AddUtilityBillPriceListTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/correct/AddUtilityBillPriceListTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -14,25 +14,22 @@\n import org.springframework.http.ResponseEntity;\n \n class AddUtilityBillPriceListTest extends UtilityBillPriceListParent {\n-    @Test\n-    void addPropertyTaxValue() throws Exception {\n-        final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n-        final UtilitiesPriceList priceList = this.createUtilitiesPriceList();\n+  @Test\n+  void addPropertyTaxValue() throws Exception {\n+    final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n+    final UtilitiesPriceList priceList = this.createUtilitiesPriceList();\n \n-        when(this.communalService.addUtilitiesPriceList(newPriceList))\n-                .thenReturn(ResponseEntity.ok(priceList));\n+    when(this.communalService.addUtilitiesPriceList(newPriceList))\n+        .thenReturn(ResponseEntity.ok(priceList));\n \n-        this.mockMvc\n-                .perform(\n-                        post(UTILITY_BILL_PRICE_LIST_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPriceList)))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(\n-                        content()\n-                                .string(\n-                                        containsString(\n-                                                this.objectMapper.writeValueAsString(priceList))));\n-    }\n+    this.mockMvc\n+        .perform(\n+            post(UTILITY_BILL_PRICE_LIST_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPriceList)))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(\n+            content().string(containsString(this.objectMapper.writeValueAsString(priceList))));\n+  }\n }"
  },
  {
    "sha": "cd9da7eb344e08047815f9ced869d1c8076a8cde",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/IncorrectRegionNameTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/IncorrectRegionNameTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/IncorrectRegionNameTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/IncorrectRegionNameTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -11,18 +11,18 @@\n \n class IncorrectRegionNameTest extends UtilityBillPriceListParent {\n \n-    @ParameterizedTest\n-    @ValueSource(strings = {\"   \", \" 1 \", \"sssssssssssssssssssssssssssssssssssssssss\"})\n-    void checkRegionNameTest(final String word) throws Exception {\n-        final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n-        newPriceList.setRegion(word);\n+  @ParameterizedTest\n+  @ValueSource(strings = {\"   \", \" 1 \", \"sssssssssssssssssssssssssssssssssssssssss\"})\n+  void checkRegionNameTest(final String word) throws Exception {\n+    final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n+    newPriceList.setRegion(word);\n \n-        this.mockMvc\n-                .perform(\n-                        post(UTILITY_BILL_PRICE_LIST_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPriceList)))\n-                .andDo(print())\n-                .andExpect(status().isBadRequest());\n-    }\n+    this.mockMvc\n+        .perform(\n+            post(UTILITY_BILL_PRICE_LIST_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPriceList)))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest());\n+  }\n }"
  },
  {
    "sha": "99cd959f146f70b92f3fc375cba0b58d0f7e7b39",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/NumericalTest.java",
    "status": "modified",
    "additions": 41,
    "deletions": 41,
    "changes": 82,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/NumericalTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/NumericalTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/NumericalTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -10,45 +10,45 @@\n \n class NumericalTest extends UtilityBillPriceListParent {\n \n-    @Test\n-    void smallerColdWaterPrice() throws Exception {\n-        final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n-        newPriceList.setColdWaterPrice(-1);\n-\n-        this.mockMvc\n-                .perform(\n-                        post(UTILITY_BILL_PRICE_LIST_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPriceList)))\n-                .andDo(print())\n-                .andExpect(status().isBadRequest());\n-    }\n-\n-    @Test\n-    void smallerHotWaterPrice() throws Exception {\n-        final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n-        newPriceList.setHotWaterPrice(-1);\n-\n-        this.mockMvc\n-                .perform(\n-                        post(UTILITY_BILL_PRICE_LIST_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPriceList)))\n-                .andDo(print())\n-                .andExpect(status().isBadRequest());\n-    }\n-\n-    @Test\n-    void smallerElectricityPrice() throws Exception {\n-        final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n-        newPriceList.setElectricityPrice(-1);\n-\n-        this.mockMvc\n-                .perform(\n-                        post(UTILITY_BILL_PRICE_LIST_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPriceList)))\n-                .andDo(print())\n-                .andExpect(status().isBadRequest());\n-    }\n+  @Test\n+  void smallerColdWaterPrice() throws Exception {\n+    final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n+    newPriceList.setColdWaterPrice(-1);\n+\n+    this.mockMvc\n+        .perform(\n+            post(UTILITY_BILL_PRICE_LIST_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPriceList)))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  void smallerHotWaterPrice() throws Exception {\n+    final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n+    newPriceList.setHotWaterPrice(-1);\n+\n+    this.mockMvc\n+        .perform(\n+            post(UTILITY_BILL_PRICE_LIST_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPriceList)))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  void smallerElectricityPrice() throws Exception {\n+    final CreationUtilitiesPriceList newPriceList = this.createCreationUtilitiesPriceList();\n+    newPriceList.setElectricityPrice(-1);\n+\n+    this.mockMvc\n+        .perform(\n+            post(UTILITY_BILL_PRICE_LIST_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPriceList)))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest());\n+  }\n }"
  },
  {
    "sha": "5089e5f6de5c2a96bb6b15bfa58e678dd8cd65f2",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/PropertyTaxValueParent.java",
    "status": "modified",
    "additions": 19,
    "deletions": 20,
    "changes": 39,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/PropertyTaxValueParent.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/PropertyTaxValueParent.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/PropertyTaxValueParent.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -10,26 +10,25 @@\n \n @WebMvcTest(controllers = {PropertyTaxValueController.class})\n public class PropertyTaxValueParent extends ParentWeb {\n-    protected static final String PROPERTY_TAX_VALUE_CONTROLLER_MAPPING =\n-            \"http://localhost:8083/communal/tax/price-list\";\n-    @MockBean protected PropertyTaxService propertyTaxService;\n+  protected static final String PROPERTY_TAX_VALUE_CONTROLLER_MAPPING =\n+      \"http://localhost:8083/communal/tax/price-list\";\n+  @MockBean protected PropertyTaxService propertyTaxService;\n \n-    protected final PropertyTaxValue createPropertyTaxValue() {\n-        final CreationPropertyTaxValue creationPropertyTaxValue =\n-                this.createCreationPropertyTaxValue();\n-        return PropertyTaxValue.builder()\n-                .propertyTaxValueId(1L)\n-                .region(creationPropertyTaxValue.getRegion())\n-                .pricePerSquareMeter(creationPropertyTaxValue.getPricePerSquareMeter())\n-                .cadastralValue(creationPropertyTaxValue.getCadastralValue())\n-                .build();\n-    }\n+  protected final PropertyTaxValue createPropertyTaxValue() {\n+    final CreationPropertyTaxValue creationPropertyTaxValue = this.createCreationPropertyTaxValue();\n+    return PropertyTaxValue.builder()\n+        .propertyTaxValueId(1L)\n+        .region(creationPropertyTaxValue.getRegion())\n+        .pricePerSquareMeter(creationPropertyTaxValue.getPricePerSquareMeter())\n+        .cadastralValue(creationPropertyTaxValue.getCadastralValue())\n+        .build();\n+  }\n \n-    protected CreationPropertyTaxValue createCreationPropertyTaxValue() {\n-        return CreationPropertyTaxValue.builder()\n-                .region(\"samara \")\n-                .pricePerSquareMeter(100000)\n-                .cadastralValue(20)\n-                .build();\n-    }\n+  protected CreationPropertyTaxValue createCreationPropertyTaxValue() {\n+    return CreationPropertyTaxValue.builder()\n+        .region(\"samara \")\n+        .pricePerSquareMeter(100000)\n+        .cadastralValue(20)\n+        .build();\n+  }\n }"
  },
  {
    "sha": "64b3edc95c7a13d57bd3e2bf843a32f41ec7e7c4",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/correct/AddPropertyTaxValueTest.java",
    "status": "modified",
    "additions": 18,
    "deletions": 22,
    "changes": 40,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/correct/AddPropertyTaxValueTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/correct/AddPropertyTaxValueTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/correct/AddPropertyTaxValueTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -15,29 +15,25 @@\n \n class AddPropertyTaxValueTest extends PropertyTaxValueParent {\n \n-    @Test\n-    void addPropertyTaxValue() throws Exception {\n-        final CreationPropertyTaxValue creationPropertyTaxValue =\n-                this.createCreationPropertyTaxValue();\n-        final PropertyTaxValue propertyTaxValue = this.createPropertyTaxValue();\n+  @Test\n+  void addPropertyTaxValue() throws Exception {\n+    final CreationPropertyTaxValue creationPropertyTaxValue = this.createCreationPropertyTaxValue();\n+    final PropertyTaxValue propertyTaxValue = this.createPropertyTaxValue();\n \n-        System.out.println(creationPropertyTaxValue);\n+    System.out.println(creationPropertyTaxValue);\n \n-        when(propertyTaxService.addPropertyTaxValue(creationPropertyTaxValue))\n-                .thenReturn(ResponseEntity.ok(propertyTaxValue));\n+    when(propertyTaxService.addPropertyTaxValue(creationPropertyTaxValue))\n+        .thenReturn(ResponseEntity.ok(propertyTaxValue));\n \n-        this.mockMvc\n-                .perform(\n-                        post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(creationPropertyTaxValue)))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(\n-                        content()\n-                                .string(\n-                                        containsString(\n-                                                this.objectMapper.writeValueAsString(\n-                                                        propertyTaxValue))));\n-    }\n+    this.mockMvc\n+        .perform(\n+            post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(creationPropertyTaxValue)))\n+        .andDo(print())\n+        .andExpect(status().isOk())\n+        .andExpect(\n+            content()\n+                .string(containsString(this.objectMapper.writeValueAsString(propertyTaxValue))));\n+  }\n }"
  },
  {
    "sha": "665ad213543d05ddbf36948a42b58569a2066219",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/IncorrectRegionNameTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/IncorrectRegionNameTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/IncorrectRegionNameTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/IncorrectRegionNameTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -10,18 +10,18 @@\n import org.junit.jupiter.params.provider.ValueSource;\n \n class IncorrectRegionNameTest extends PropertyTaxValueParent {\n-    @ParameterizedTest\n-    @ValueSource(strings = {\"   \", \" 1 \", \"sssssssssssssssssssssssssssssssssssssssss\"})\n-    void checkRegionNameTest(final String word) throws Exception {\n-        final CreationPropertyTaxValue newPropertyTaxValue = this.createCreationPropertyTaxValue();\n-        newPropertyTaxValue.setRegion(word);\n+  @ParameterizedTest\n+  @ValueSource(strings = {\"   \", \" 1 \", \"sssssssssssssssssssssssssssssssssssssssss\"})\n+  void checkRegionNameTest(final String word) throws Exception {\n+    final CreationPropertyTaxValue newPropertyTaxValue = this.createCreationPropertyTaxValue();\n+    newPropertyTaxValue.setRegion(word);\n \n-        this.mockMvc\n-                .perform(\n-                        post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPropertyTaxValue)))\n-                .andDo(print())\n-                .andExpect(status().isBadRequest());\n-    }\n+    this.mockMvc\n+        .perform(\n+            post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPropertyTaxValue)))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest());\n+  }\n }"
  },
  {
    "sha": "bc11f15f09efce44bc985ac9378e0a79eb38338c",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/NumericalTest.java",
    "status": "modified",
    "additions": 41,
    "deletions": 41,
    "changes": 82,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/NumericalTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/NumericalTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/NumericalTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -10,45 +10,45 @@\n \n class NumericalTest extends PropertyTaxValueParent {\n \n-    @Test\n-    void smallerPricePerSquareMeter() throws Exception {\n-        final CreationPropertyTaxValue newPropertyTaxValue = this.createCreationPropertyTaxValue();\n-        newPropertyTaxValue.setPricePerSquareMeter(-1);\n-\n-        this.mockMvc\n-                .perform(\n-                        post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPropertyTaxValue)))\n-                .andDo(print())\n-                .andExpect(status().isBadRequest());\n-    }\n-\n-    @Test\n-    void smallerCadastralValue() throws Exception {\n-        final CreationPropertyTaxValue newPropertyTaxValue = this.createCreationPropertyTaxValue();\n-        newPropertyTaxValue.setCadastralValue(-1);\n-\n-        this.mockMvc\n-                .perform(\n-                        post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPropertyTaxValue)))\n-                .andDo(print())\n-                .andExpect(status().isBadRequest());\n-    }\n-\n-    @Test\n-    void overSizeCadastralValue() throws Exception {\n-        final CreationPropertyTaxValue newPropertyTaxValue = this.createCreationPropertyTaxValue();\n-        newPropertyTaxValue.setCadastralValue(101);\n-\n-        this.mockMvc\n-                .perform(\n-                        post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n-                                .contentType(\"application/json\")\n-                                .content(objectMapper.writeValueAsString(newPropertyTaxValue)))\n-                .andDo(print())\n-                .andExpect(status().isBadRequest());\n-    }\n+  @Test\n+  void smallerPricePerSquareMeter() throws Exception {\n+    final CreationPropertyTaxValue newPropertyTaxValue = this.createCreationPropertyTaxValue();\n+    newPropertyTaxValue.setPricePerSquareMeter(-1);\n+\n+    this.mockMvc\n+        .perform(\n+            post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPropertyTaxValue)))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  void smallerCadastralValue() throws Exception {\n+    final CreationPropertyTaxValue newPropertyTaxValue = this.createCreationPropertyTaxValue();\n+    newPropertyTaxValue.setCadastralValue(-1);\n+\n+    this.mockMvc\n+        .perform(\n+            post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPropertyTaxValue)))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  void overSizeCadastralValue() throws Exception {\n+    final CreationPropertyTaxValue newPropertyTaxValue = this.createCreationPropertyTaxValue();\n+    newPropertyTaxValue.setCadastralValue(101);\n+\n+    this.mockMvc\n+        .perform(\n+            post(PROPERTY_TAX_VALUE_CONTROLLER_MAPPING)\n+                .contentType(\"application/json\")\n+                .content(objectMapper.writeValueAsString(newPropertyTaxValue)))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest());\n+  }\n }"
  },
  {
    "sha": "3674a1f1f4e78a914d0aa29d44b67ba6db8232aa",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/CalculatePropertyTaxTest.java",
    "status": "modified",
    "additions": 95,
    "deletions": 102,
    "changes": 197,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/CalculatePropertyTaxTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/CalculatePropertyTaxTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/CalculatePropertyTaxTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,9 @@\n package nc.unc.cs.services.communal.services.integrations.property_tax;\n \n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.BDDMockito.given;\n+\n import nc.unc.cs.services.communal.entities.Property;\n import nc.unc.cs.services.communal.entities.PropertyTax;\n import nc.unc.cs.services.communal.entities.PropertyTaxValue;\n@@ -20,113 +24,102 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyLong;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n class CalculatePropertyTaxTest {\n-    private static final Logger logger = LoggerFactory.getLogger(CalculatePropertyTaxTest.class);\n-\n-    /** Налоговый процент от стоимости платежа. */\n-    static final Integer TAX_PERCENT = PropertyTaxService.TAX_PERCENT;\n-    /** Номер сервиса. */\n-    static final Long SERVICE_ID = PropertyTaxService.SERVICE_ID;\n-    /** Процентный делитель. */\n-    static final Double PERCENT_DIVISOR = PropertyTaxService.PERCENT_DIVISOR;\n-\n-    @Mock\n-    private PropertyRepository propertyRepository;\n-    @Mock\n-    private PropertyTaxRepository propertyTaxRepository;\n-    @Mock\n-    private PropertyTaxValueRepository propertyTaxValueRepository;\n-    @Mock\n-    private BankIntegrationService bankIntegrationService;\n-\n-    @InjectMocks\n-    private PropertyTaxService propertyTaxService;\n-\n-    private Property getProperty() {\n-        return Property\n-            .builder()\n-            .propertyId(1L)\n-            .region(\" samara \")\n-            .city(\"samara\")\n-            .street(\"main\")\n-            .house(\"12d\")\n-            .apartment(\"11\")\n-            .apartmentSize(1000)\n-            .citizenId(111L)\n-            .build();\n-    }\n-\n-    PropertyTaxValue getPropertyTaxValue() {\n-        return PropertyTaxValue\n-            .builder()\n-            .propertyTaxValueId(1L)\n-            .region(\" samara \")\n-            .pricePerSquareMeter(10000)\n-            .cadastralValue(15)\n-            .build();\n-    }\n-\n-    @Test\n-    void calculatePropertyTaxTest() {\n-        final Property property = this.getProperty();\n-        final PropertyTaxValue propertyTaxValue = getPropertyTaxValue();\n-\n-        given(this.propertyRepository.findPropertyByPropertyId(property.getPropertyId()))\n-            .willReturn(property);\n-        given(this.propertyTaxValueRepository.findPropertyTaxValueByRegion(property.getRegion()))\n-            .willReturn(propertyTaxValue);\n-\n-        final Integer amount = this.propertyTaxService.calculatePropertyTaxAmount(\n+  private static final Logger logger = LoggerFactory.getLogger(CalculatePropertyTaxTest.class);\n+\n+  /** Налоговый процент от стоимости платежа. */\n+  static final Integer TAX_PERCENT = PropertyTaxService.TAX_PERCENT;\n+  /** Номер сервиса. */\n+  static final Long SERVICE_ID = PropertyTaxService.SERVICE_ID;\n+  /** Процентный делитель. */\n+  static final Double PERCENT_DIVISOR = PropertyTaxService.PERCENT_DIVISOR;\n+\n+  @Mock private PropertyRepository propertyRepository;\n+  @Mock private PropertyTaxRepository propertyTaxRepository;\n+  @Mock private PropertyTaxValueRepository propertyTaxValueRepository;\n+  @Mock private BankIntegrationService bankIntegrationService;\n+\n+  @InjectMocks private PropertyTaxService propertyTaxService;\n+\n+  private Property getProperty() {\n+    return Property.builder()\n+        .propertyId(1L)\n+        .region(\" samara \")\n+        .city(\"samara\")\n+        .street(\"main\")\n+        .house(\"12d\")\n+        .apartment(\"11\")\n+        .apartmentSize(1000)\n+        .citizenId(111L)\n+        .build();\n+  }\n+\n+  PropertyTaxValue getPropertyTaxValue() {\n+    return PropertyTaxValue.builder()\n+        .propertyTaxValueId(1L)\n+        .region(\" samara \")\n+        .pricePerSquareMeter(10000)\n+        .cadastralValue(15)\n+        .build();\n+  }\n+\n+  @Test\n+  void calculatePropertyTaxTest() {\n+    final Property property = this.getProperty();\n+    final PropertyTaxValue propertyTaxValue = getPropertyTaxValue();\n+\n+    given(this.propertyRepository.findPropertyByPropertyId(property.getPropertyId()))\n+        .willReturn(property);\n+    given(this.propertyTaxValueRepository.findPropertyTaxValueByRegion(property.getRegion()))\n+        .willReturn(propertyTaxValue);\n+\n+    final Integer amount =\n+        this.propertyTaxService.calculatePropertyTaxAmount(\n             Double.valueOf(property.getApartmentSize()),\n             Double.valueOf(propertyTaxValue.getPricePerSquareMeter()),\n             Double.valueOf(propertyTaxValue.getCadastralValue()));\n \n-        given(this.bankIntegrationService.bankRequest(\n-            SERVICE_ID, property.getCitizenId(), amount, TAX_PERCENT))\n-            .willReturn(15L);\n-\n-        given(this.propertyTaxRepository.save(any()))\n-            .willAnswer(invocationOnMock -> invocationOnMock.getArgument(0));\n-\n-        final ResponseEntity<PropertyTax> response =\n-            this.propertyTaxService.calculatePropertyTax(property.getPropertyId());\n-\n-        logger.info(\"Response {}\", response.getBody());\n-\n-        Assertions.assertAll(\n-            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n-            () -> Assertions.assertNotNull(response.getBody().getTaxAmount()),\n-            () -> Assertions.assertFalse(response.getBody().getIsPaid()),\n-            () -> Assertions.assertEquals(15L, response.getBody().getPaymentRequestId()));\n-    }\n-\n-    @Test\n-    void propertyNotFoundCalculateTest() {\n-        given(this.propertyRepository.findPropertyByPropertyId(anyLong()))\n-            .willReturn(null);\n-        Assertions.assertThrows(\n-            PropertyNotFoundException.class,\n-            () -> this.propertyTaxService.calculatePropertyTax(anyLong())\n-        );\n-    }\n-\n-    @Test\n-    void propertyTaxValueNotFoundCalculateTest() {\n-        final Property property = this.getProperty();\n-\n-        given(this.propertyRepository.findPropertyByPropertyId(property.getPropertyId()))\n-            .willReturn(property);\n-        given(this.propertyTaxValueRepository.findPropertyTaxValueByRegion(property.getRegion()))\n-            .willReturn(null);\n-\n-        Assertions.assertThrows(\n-            PropertyTaxValueNotFoundException.class,\n-            () -> this.propertyTaxService.calculatePropertyTax(property.getPropertyId())\n-        );\n-    }\n+    given(\n+            this.bankIntegrationService.bankRequest(\n+                SERVICE_ID, property.getCitizenId(), amount, TAX_PERCENT))\n+        .willReturn(15L);\n+\n+    given(this.propertyTaxRepository.save(any()))\n+        .willAnswer(invocationOnMock -> invocationOnMock.getArgument(0));\n+\n+    final ResponseEntity<PropertyTax> response =\n+        this.propertyTaxService.calculatePropertyTax(property.getPropertyId());\n+\n+    logger.info(\"Response {}\", response.getBody());\n+\n+    Assertions.assertAll(\n+        () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+        () -> Assertions.assertNotNull(response.getBody().getTaxAmount()),\n+        () -> Assertions.assertFalse(response.getBody().getIsPaid()),\n+        () -> Assertions.assertEquals(15L, response.getBody().getPaymentRequestId()));\n+  }\n+\n+  @Test\n+  void propertyNotFoundCalculateTest() {\n+    given(this.propertyRepository.findPropertyByPropertyId(anyLong())).willReturn(null);\n+    Assertions.assertThrows(\n+        PropertyNotFoundException.class,\n+        () -> this.propertyTaxService.calculatePropertyTax(anyLong()));\n+  }\n+\n+  @Test\n+  void propertyTaxValueNotFoundCalculateTest() {\n+    final Property property = this.getProperty();\n+\n+    given(this.propertyRepository.findPropertyByPropertyId(property.getPropertyId()))\n+        .willReturn(property);\n+    given(this.propertyTaxValueRepository.findPropertyTaxValueByRegion(property.getRegion()))\n+        .willReturn(null);\n+\n+    Assertions.assertThrows(\n+        PropertyTaxValueNotFoundException.class,\n+        () -> this.propertyTaxService.calculatePropertyTax(property.getPropertyId()));\n+  }\n }"
  },
  {
    "sha": "bea6a79c1239444911e86994d00ae85b61cd7a70",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/ChangePropertyTaxTest.java",
    "status": "modified",
    "additions": 43,
    "deletions": 46,
    "changes": 89,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/ChangePropertyTaxTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/ChangePropertyTaxTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/ChangePropertyTaxTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,7 @@\n package nc.unc.cs.services.communal.services.integrations.property_tax;\n \n+import static org.mockito.BDDMockito.given;\n+\n import nc.unc.cs.services.communal.entities.PropertyTax;\n import nc.unc.cs.services.communal.repositories.PropertyTaxRepository;\n import nc.unc.cs.services.communal.services.BankIntegrationService;\n@@ -14,68 +16,63 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n class ChangePropertyTaxTest {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(ChangePropertyTaxTest.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ChangePropertyTaxTest.class);\n \n-    @Mock\n-    private PropertyTaxRepository propertyTaxRepository;\n-    @Mock\n-    private BankIntegrationService bankIntegrationService;\n+  @Mock private PropertyTaxRepository propertyTaxRepository;\n+  @Mock private BankIntegrationService bankIntegrationService;\n \n-    @InjectMocks\n-    private PropertyTaxService propertyTaxService;\n+  @InjectMocks private PropertyTaxService propertyTaxService;\n \n-    private PropertyTax createPropertyTax() {\n-        return PropertyTax\n-            .builder()\n-            .paymentRequestId(1L)\n-            .propertyId(1L)\n-            .taxAmount(10000)\n-            .citizenId(111L)\n-            .paymentRequestId(15L)\n-            .build();\n-    }\n+  private PropertyTax createPropertyTax() {\n+    return PropertyTax.builder()\n+        .paymentRequestId(1L)\n+        .propertyId(1L)\n+        .taxAmount(10000)\n+        .citizenId(111L)\n+        .paymentRequestId(15L)\n+        .build();\n+  }\n \n-    @Test\n-    void changePropertyTaxStatusTest() {\n-        final PropertyTax propertyTax = this.createPropertyTax();\n+  @Test\n+  void changePropertyTaxStatusTest() {\n+    final PropertyTax propertyTax = this.createPropertyTax();\n \n-        LOGGER.debug(\"Initial object state: {}\", propertyTax);\n+    LOGGER.debug(\"Initial object state: {}\", propertyTax);\n \n-        given(this.propertyTaxRepository.findPropertyTaxByPropertyTaxId(propertyTax.getPropertyTaxId()))\n-            .willReturn(propertyTax);\n+    given(this.propertyTaxRepository.findPropertyTaxByPropertyTaxId(propertyTax.getPropertyTaxId()))\n+        .willReturn(propertyTax);\n \n-        given(this.bankIntegrationService.checkPaymentStatus(propertyTax.getPaymentRequestId()))\n-            .willReturn(true);\n-        given(this.propertyTaxRepository.save(propertyTax)).willReturn(propertyTax);\n+    given(this.bankIntegrationService.checkPaymentStatus(propertyTax.getPaymentRequestId()))\n+        .willReturn(true);\n+    given(this.propertyTaxRepository.save(propertyTax)).willReturn(propertyTax);\n \n-        final ResponseEntity<PropertyTax> response =\n-            this.propertyTaxService.changePropertyTaxStatus(propertyTax.getPropertyTaxId());\n+    final ResponseEntity<PropertyTax> response =\n+        this.propertyTaxService.changePropertyTaxStatus(propertyTax.getPropertyTaxId());\n \n-        LOGGER.debug(\"Final object state: {}\", propertyTax);\n+    LOGGER.debug(\"Final object state: {}\", propertyTax);\n \n-        Assertions.assertAll(\n-            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n-            () -> Assertions.assertTrue(response.getBody().getIsPaid()));\n-    }\n+    Assertions.assertAll(\n+        () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+        () -> Assertions.assertTrue(response.getBody().getIsPaid()));\n+  }\n \n-    @Test\n-    void changeAlreadyPaidPropertyTaxStatusTest() {\n-        final PropertyTax propertyTax = this.createPropertyTax();\n+  @Test\n+  void changeAlreadyPaidPropertyTaxStatusTest() {\n+    final PropertyTax propertyTax = this.createPropertyTax();\n \n-        propertyTax.setIsPaid(true);\n-        given(this.propertyTaxRepository.findPropertyTaxByPropertyTaxId(propertyTax.getPropertyTaxId()))\n-            .willReturn(propertyTax);\n+    propertyTax.setIsPaid(true);\n+    given(this.propertyTaxRepository.findPropertyTaxByPropertyTaxId(propertyTax.getPropertyTaxId()))\n+        .willReturn(propertyTax);\n \n-        final ResponseEntity<PropertyTax> response =\n-            this.propertyTaxService.changePropertyTaxStatus(propertyTax.getPropertyTaxId());\n+    final ResponseEntity<PropertyTax> response =\n+        this.propertyTaxService.changePropertyTaxStatus(propertyTax.getPropertyTaxId());\n \n-        Assertions.assertAll(\n-            () -> Assertions.assertEquals(HttpStatus.PAYMENT_REQUIRED, response.getStatusCode()),\n-            () -> Assertions.assertTrue(response.getBody().getIsPaid()));\n-    }\n+    Assertions.assertAll(\n+        () -> Assertions.assertEquals(HttpStatus.PAYMENT_REQUIRED, response.getStatusCode()),\n+        () -> Assertions.assertTrue(response.getBody().getIsPaid()));\n+  }\n }"
  },
  {
    "sha": "42ee430da94789a66e46668118e4c8de067143f8",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/utility/bill/CreateUtilityBillTest.java",
    "status": "modified",
    "additions": 124,
    "deletions": 127,
    "changes": 251,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/utility/bill/CreateUtilityBillTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/8add45eb5c9411d3127f58797105cb0c966fb919/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/utility/bill/CreateUtilityBillTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/utility/bill/CreateUtilityBillTest.java?ref=8add45eb5c9411d3127f58797105cb0c966fb919",
    "patch": "@@ -1,5 +1,7 @@\n package nc.unc.cs.services.communal.services.integrations.utility.bill;\n \n+import static org.mockito.BDDMockito.given;\n+\n import nc.unc.cs.services.communal.controllers.payloads.UtilitiesPayload;\n import nc.unc.cs.services.communal.entities.Property;\n import nc.unc.cs.services.communal.entities.UtilitiesPriceList;\n@@ -19,135 +21,130 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n class CreateUtilityBillTest {\n \n-    @Mock\n-    private PropertyRepository propertyRepository;\n-    @Mock\n-    private UtilityBillRepository utilityBillRepository;\n-    @Mock\n-    private UtilitiesPriceListRepository utilitiesPriceListRepository;\n-    @Mock\n-    private BankIntegrationService bankIntegrationService;\n-    @InjectMocks\n-    private CommunalService communalService;\n-\n-    /** Идентификатор сервиса, поставляеющего услугу. */\n-    public static final Long SERVICE_ID = CommunalService.SERVICE_ID;\n-    /** Налоговый процент. */\n-    public static final Integer TAX_PERCENT = CommunalService.TAX_PERCENT;\n-\n-    private UtilitiesPayload createUtilitiesPayload() {\n-        return UtilitiesPayload\n-            .builder()\n-            .propertyId(1L)\n-            .coldWater(200)\n-            .hotWater(200)\n-            .electricity(200)\n-            .build();\n-    }\n-\n-    private UtilitiesPriceList createUtilitiesPriceList() {\n-        return UtilitiesPriceList\n-            .builder()\n-            .utilitiesPriceListId(1L)\n-            .region(\"samara\")\n-            .coldWaterPrice(5)\n-            .hotWaterPrice(20)\n-            .electricityPrice(5)\n-            .build();\n-    }\n-\n-    private UtilityBill createUtilityBill() {\n-        final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n-        return UtilityBill\n-            .builder()\n-            .coldWater(utilitiesPayload.getColdWater())\n-            .hotWater(utilitiesPayload.getHotWater())\n-            .electricity(utilitiesPayload.getElectricity())\n-            .build();\n-    }\n-\n-    private Property createProperty() {\n-        return Property.builder()\n-            .propertyId(1L)\n-            .region(\"Samara\")\n-            .city(\"Samara\")\n-            .street(\"main\")\n-            .house(\"111\")\n-            .apartment(\"1b\")\n-            .apartmentSize(1000)\n-            .citizenId(111L)\n-            .build();\n-    }\n-\n-    @Test\n-    void calculateUtilityBill() {\n-        final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n-        final Property property = this.createProperty();\n-        final UtilitiesPriceList priceList = this.createUtilitiesPriceList();\n-        final UtilityBill utilityBill = this.createUtilityBill();\n-        utilityBill.setCitizenId(property.getCitizenId());\n-        utilityBill.setPaymentRequestId(15L);\n-        utilityBill.setColdWaterAmount(utilitiesPayload.getColdWater() * priceList.getColdWaterPrice());\n-        utilityBill.setHotWaterAmount(utilitiesPayload.getHotWater() * priceList.getHotWaterPrice());\n-        utilityBill.setElectricityAmount(utilitiesPayload.getElectricity() * priceList.getElectricityPrice());\n-        utilityBill.setUtilityAmount(\n-            utilityBill.getColdWaterAmount()\n-                + utilityBill.getHotWaterAmount()\n-                + utilityBill.getElectricityAmount()\n-        );\n-        given(this.propertyRepository.findPropertyByPropertyId(utilitiesPayload.getPropertyId()))\n-            .willReturn(property);\n-        given(this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(property.getRegion()))\n-            .willReturn(priceList);\n-        given(this.bankIntegrationService.bankRequest(\n-            SERVICE_ID,\n-            utilityBill.getCitizenId(),\n-            utilityBill.getUtilityAmount(),\n-            utilityBill.getUtilityAmount() / TAX_PERCENT\n-        ))\n-            .willReturn(15L);\n-        given(this.utilityBillRepository.save(utilityBill)).willReturn(utilityBill);\n-\n-        System.out.println(utilityBill);\n-\n-        final ResponseEntity<UtilityBill> response = this.communalService.calculateUtilityBill(utilitiesPayload);\n-\n-        Assertions.assertAll(\n-            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n-            () -> Assertions.assertEquals(utilityBill.getUtilityAmount(), response.getBody().getUtilityAmount()),\n-            () -> Assertions.assertEquals(utilitiesPayload.getHotWater(), response.getBody().getHotWater()),\n-            () -> Assertions.assertEquals(utilitiesPayload.getPropertyId(), response.getBody().getPropertyId()),\n-            () -> Assertions.assertEquals(property.getCitizenId(), response.getBody().getCitizenId())\n-        );\n-    }\n-\n-    @Test\n-    void calculateUtilityCostsPropertyNotFoundTest() {\n-        final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n-\n-        given(this.propertyRepository.findPropertyByPropertyId(utilitiesPayload.getPropertyId()))\n-            .willReturn(null);\n-        Assertions.assertThrows(\n-            PropertyNotFoundException.class,\n-            () -> this.communalService.calculateUtilityBill(utilitiesPayload)\n-        );\n-    }\n-\n-    @Test\n-    void calculateUtilityCostsUtilitiesPriceListNotFoundTest() {\n-        final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n-        final Property property = this.createProperty();\n-\n-        given(this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(property.getRegion()))\n-            .willReturn(null);\n-        Assertions.assertThrows(\n-            UtilitiesPriceListNotFoundException.class,\n-            () -> this.communalService.calculateUtilityCosts(property.getRegion(), utilitiesPayload)\n-        );\n-    }\n+  @Mock private PropertyRepository propertyRepository;\n+  @Mock private UtilityBillRepository utilityBillRepository;\n+  @Mock private UtilitiesPriceListRepository utilitiesPriceListRepository;\n+  @Mock private BankIntegrationService bankIntegrationService;\n+  @InjectMocks private CommunalService communalService;\n+\n+  /** Идентификатор сервиса, поставляеющего услугу. */\n+  public static final Long SERVICE_ID = CommunalService.SERVICE_ID;\n+  /** Налоговый процент. */\n+  public static final Integer TAX_PERCENT = CommunalService.TAX_PERCENT;\n+\n+  private UtilitiesPayload createUtilitiesPayload() {\n+    return UtilitiesPayload.builder()\n+        .propertyId(1L)\n+        .coldWater(200)\n+        .hotWater(200)\n+        .electricity(200)\n+        .build();\n+  }\n+\n+  private UtilitiesPriceList createUtilitiesPriceList() {\n+    return UtilitiesPriceList.builder()\n+        .utilitiesPriceListId(1L)\n+        .region(\"samara\")\n+        .coldWaterPrice(5)\n+        .hotWaterPrice(20)\n+        .electricityPrice(5)\n+        .build();\n+  }\n+\n+  private UtilityBill createUtilityBill() {\n+    final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n+    return UtilityBill.builder()\n+        .coldWater(utilitiesPayload.getColdWater())\n+        .hotWater(utilitiesPayload.getHotWater())\n+        .electricity(utilitiesPayload.getElectricity())\n+        .build();\n+  }\n+\n+  private Property createProperty() {\n+    return Property.builder()\n+        .propertyId(1L)\n+        .region(\"Samara\")\n+        .city(\"Samara\")\n+        .street(\"main\")\n+        .house(\"111\")\n+        .apartment(\"1b\")\n+        .apartmentSize(1000)\n+        .citizenId(111L)\n+        .build();\n+  }\n+\n+  @Test\n+  void calculateUtilityBill() {\n+    final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n+    final Property property = this.createProperty();\n+    final UtilitiesPriceList priceList = this.createUtilitiesPriceList();\n+    final UtilityBill utilityBill = this.createUtilityBill();\n+    utilityBill.setCitizenId(property.getCitizenId());\n+    utilityBill.setPaymentRequestId(15L);\n+    utilityBill.setColdWaterAmount(utilitiesPayload.getColdWater() * priceList.getColdWaterPrice());\n+    utilityBill.setHotWaterAmount(utilitiesPayload.getHotWater() * priceList.getHotWaterPrice());\n+    utilityBill.setElectricityAmount(\n+        utilitiesPayload.getElectricity() * priceList.getElectricityPrice());\n+    utilityBill.setUtilityAmount(\n+        utilityBill.getColdWaterAmount()\n+            + utilityBill.getHotWaterAmount()\n+            + utilityBill.getElectricityAmount());\n+    given(this.propertyRepository.findPropertyByPropertyId(utilitiesPayload.getPropertyId()))\n+        .willReturn(property);\n+    given(this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(property.getRegion()))\n+        .willReturn(priceList);\n+    given(\n+            this.bankIntegrationService.bankRequest(\n+                SERVICE_ID,\n+                utilityBill.getCitizenId(),\n+                utilityBill.getUtilityAmount(),\n+                utilityBill.getUtilityAmount() / TAX_PERCENT))\n+        .willReturn(15L);\n+    given(this.utilityBillRepository.save(utilityBill)).willReturn(utilityBill);\n+\n+    System.out.println(utilityBill);\n+\n+    final ResponseEntity<UtilityBill> response =\n+        this.communalService.calculateUtilityBill(utilitiesPayload);\n+\n+    Assertions.assertAll(\n+        () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+        () ->\n+            Assertions.assertEquals(\n+                utilityBill.getUtilityAmount(), response.getBody().getUtilityAmount()),\n+        () ->\n+            Assertions.assertEquals(\n+                utilitiesPayload.getHotWater(), response.getBody().getHotWater()),\n+        () ->\n+            Assertions.assertEquals(\n+                utilitiesPayload.getPropertyId(), response.getBody().getPropertyId()),\n+        () -> Assertions.assertEquals(property.getCitizenId(), response.getBody().getCitizenId()));\n+  }\n+\n+  @Test\n+  void calculateUtilityCostsPropertyNotFoundTest() {\n+    final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n+\n+    given(this.propertyRepository.findPropertyByPropertyId(utilitiesPayload.getPropertyId()))\n+        .willReturn(null);\n+    Assertions.assertThrows(\n+        PropertyNotFoundException.class,\n+        () -> this.communalService.calculateUtilityBill(utilitiesPayload));\n+  }\n+\n+  @Test\n+  void calculateUtilityCostsUtilitiesPriceListNotFoundTest() {\n+    final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n+    final Property property = this.createProperty();\n+\n+    given(this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(property.getRegion()))\n+        .willReturn(null);\n+    Assertions.assertThrows(\n+        UtilitiesPriceListNotFoundException.class,\n+        () -> this.communalService.calculateUtilityCosts(property.getRegion(), utilitiesPayload));\n+  }\n }"
  }
]
