[
  {
    "sha": "2531f20665044e2ea91e8251e0f492ab13e29abd",
    "filename": "config/src/main/java/nc/unc/cs/config/ConfigApplication.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/config/src/main/java/nc/unc/cs/config/ConfigApplication.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/config/src/main/java/nc/unc/cs/config/ConfigApplication.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/config/src/main/java/nc/unc/cs/config/ConfigApplication.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -6,7 +6,7 @@\n @SpringBootApplication\n public class ConfigApplication {\n \n-    public static void main(String[] args) {\n-        SpringApplication.run(ConfigApplication.class, args);\n-    }\n+  public static void main(String[] args) {\n+    SpringApplication.run(ConfigApplication.class, args);\n+  }\n }"
  },
  {
    "sha": "d6e9df2bd3e4ba63bc1c64c7a8ab754156acb0a6",
    "filename": "config/src/main/java/nc/unc/cs/config/SecurityConfig.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/config/src/main/java/nc/unc/cs/config/SecurityConfig.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/config/src/main/java/nc/unc/cs/config/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/config/src/main/java/nc/unc/cs/config/SecurityConfig.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -9,9 +9,9 @@\n @Configuration\n public class SecurityConfig extends WebSecurityConfigurerAdapter {\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        http.csrf().disable();\n-        super.configure(http);\n-    }\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.csrf().disable();\n+    super.configure(http);\n+  }\n }"
  },
  {
    "sha": "bc6bc0c388d47d94de96eb4845a0f5c3d3381488",
    "filename": "discovery/src/main/java/nc/unc/cs/discovery/DiscoveryApplication.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/discovery/src/main/java/nc/unc/cs/discovery/DiscoveryApplication.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/discovery/src/main/java/nc/unc/cs/discovery/DiscoveryApplication.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/discovery/src/main/java/nc/unc/cs/discovery/DiscoveryApplication.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -6,7 +6,7 @@\n @SpringBootApplication\n public class DiscoveryApplication {\n \n-    public static void main(String[] args) {\n-        SpringApplication.run(DiscoveryApplication.class, args);\n-    }\n+  public static void main(String[] args) {\n+    SpringApplication.run(DiscoveryApplication.class, args);\n+  }\n }"
  },
  {
    "sha": "7017fe0ff38f76ce3d3d68a1b16a8c5012a66119",
    "filename": "discovery/src/main/java/nc/unc/cs/discovery/SecurityConfig.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/discovery/src/main/java/nc/unc/cs/discovery/SecurityConfig.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/discovery/src/main/java/nc/unc/cs/discovery/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/discovery/src/main/java/nc/unc/cs/discovery/SecurityConfig.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -9,9 +9,9 @@\n @Configuration\n public class SecurityConfig extends WebSecurityConfigurerAdapter {\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        http.csrf().ignoringAntMatchers(\"/eureka/**\");\n-        super.configure(http);\n-    }\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.csrf().ignoringAntMatchers(\"/eureka/**\");\n+    super.configure(http);\n+  }\n }"
  },
  {
    "sha": "3ce8eb70eb6d75cf689b6cf11438bebd96e2264a",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/BankApplication.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/BankApplication.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/BankApplication.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/BankApplication.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -9,7 +9,7 @@\n @EnableDiscoveryClient\n @EnableFeignClients(basePackages = \"nc.unc.cs.services\")\n public class BankApplication {\n-    public static void main(String[] args) {\n-        SpringApplication.run(BankApplication.class, args);\n-    }\n+  public static void main(String[] args) {\n+    SpringApplication.run(BankApplication.class, args);\n+  }\n }"
  },
  {
    "sha": "bc03015d2245556bc8e69e6c073e40636d43d882",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/confogurations/WebConfiguration.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/confogurations/WebConfiguration.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/confogurations/WebConfiguration.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/confogurations/WebConfiguration.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -8,8 +8,8 @@\n @Configuration\n @EnableWebMvc\n public class WebConfiguration implements WebMvcConfigurer {\n-    @Override\n-    public void addCorsMappings(final CorsRegistry registry) {\n-        registry.addMapping(\"/**\");\n-    }\n+  @Override\n+  public void addCorsMappings(final CorsRegistry registry) {\n+    registry.addMapping(\"/**\");\n+  }\n }"
  },
  {
    "sha": "0ad87e33911f619b307c70150daf2bd08ac38b05",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/controllers/ExceptionController.java",
    "status": "modified",
    "additions": 14,
    "deletions": 15,
    "changes": 29,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/controllers/ExceptionController.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/controllers/ExceptionController.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/controllers/ExceptionController.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -12,21 +12,20 @@\n @ControllerAdvice\n public class ExceptionController {\n \n-    /** Логгер. */\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ExceptionController.class);\n-    /** Стандартное сообщение для фронта. */\n-    private static final String TAX_SERVICE_UNAVAILABLE_MESSAGE = \"Tax service unavailable!\";\n+  /** Логгер. */\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExceptionController.class);\n+  /** Стандартное сообщение для фронта. */\n+  private static final String TAX_SERVICE_UNAVAILABLE_MESSAGE = \"Tax service unavailable!\";\n \n-    @ExceptionHandler(value = {FeignException.class})\n-    public ResponseEntity<Object> serviceUnavailableException(final FeignException fe) {\n-        LOGGER.error(TAX_SERVICE_UNAVAILABLE_MESSAGE, fe);\n-        return new ResponseEntity<>(\n-                TAX_SERVICE_UNAVAILABLE_MESSAGE, HttpStatus.SERVICE_UNAVAILABLE);\n-    }\n+  @ExceptionHandler(value = {FeignException.class})\n+  public ResponseEntity<Object> serviceUnavailableException(final FeignException fe) {\n+    LOGGER.error(TAX_SERVICE_UNAVAILABLE_MESSAGE, fe);\n+    return new ResponseEntity<>(TAX_SERVICE_UNAVAILABLE_MESSAGE, HttpStatus.SERVICE_UNAVAILABLE);\n+  }\n \n-    @ExceptionHandler(value = {PaymentRequestNotFoundException.class})\n-    public ResponseEntity<Object> paymentRequestNotFound(final PaymentRequestNotFoundException pe) {\n-        LOGGER.error(\"Search failed!\", pe);\n-        return new ResponseEntity<>(pe.getMessage(), HttpStatus.BAD_REQUEST);\n-    }\n+  @ExceptionHandler(value = {PaymentRequestNotFoundException.class})\n+  public ResponseEntity<Object> paymentRequestNotFound(final PaymentRequestNotFoundException pe) {\n+    LOGGER.error(\"Search failed!\", pe);\n+    return new ResponseEntity<>(pe.getMessage(), HttpStatus.BAD_REQUEST);\n+  }\n }"
  },
  {
    "sha": "d1c088f80e11632d1b0c34d233deb59105ff532a",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "status": "modified",
    "additions": 36,
    "deletions": 37,
    "changes": 73,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -22,47 +22,46 @@\n @EqualsAndHashCode\n public class PaymentRequest {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long paymentRequestId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long paymentRequestId;\n \n-    @NotNull(message = \"Incorrect service ID\")\n-    @Min(value = 1L, message = \"Incorrect service ID\")\n-    @Column(nullable = false, updatable = false)\n-    private Long serviceId;\n+  @NotNull(message = \"Incorrect service ID\")\n+  @Min(value = 1L, message = \"Incorrect service ID\")\n+  @Column(nullable = false, updatable = false)\n+  private Long serviceId;\n \n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(value = 1L, message = \"Incorrect citizen ID\")\n-    @Column(nullable = false, updatable = false)\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(value = 1L, message = \"Incorrect citizen ID\")\n+  @Column(nullable = false, updatable = false)\n+  private Long citizenId;\n \n-    @NotNull\n-    @Column(nullable = false)\n-    private Boolean status;\n+  @NotNull\n+  @Column(nullable = false)\n+  private Boolean status;\n \n-    @NotNull(message = \"Incorrect amount\")\n-    @Min(value = 1, message = \"Incorrect amount\")\n-    @Column(nullable = false)\n-    private Integer amount;\n+  @NotNull(message = \"Incorrect amount\")\n+  @Min(value = 1, message = \"Incorrect amount\")\n+  @Column(nullable = false)\n+  private Integer amount;\n \n-    @NotNull(message = \"Incorrect tax ID\")\n-    @Min(value = 1L, message = \"Incorrect tax ID\")\n-    @Column(nullable = false, updatable = false, unique = true)\n-    private Long taxId;\n+  @NotNull(message = \"Incorrect tax ID\")\n+  @Min(value = 1L, message = \"Incorrect tax ID\")\n+  @Column(nullable = false, updatable = false, unique = true)\n+  private Long taxId;\n \n-    @Builder\n-    public PaymentRequest(\n-        final Long paymentRequestId,\n-        final Long serviceId,\n-        final Integer amount,\n-        final Long citizenId,\n-        final Long taxId\n-    ) {\n-        this.paymentRequestId = paymentRequestId;\n-        this.serviceId = serviceId;\n-        this.citizenId = citizenId;\n-        this.status = false;\n-        this.amount = amount;\n-        this.taxId = taxId;\n-    }\n+  @Builder\n+  public PaymentRequest(\n+      final Long paymentRequestId,\n+      final Long serviceId,\n+      final Integer amount,\n+      final Long citizenId,\n+      final Long taxId) {\n+    this.paymentRequestId = paymentRequestId;\n+    this.serviceId = serviceId;\n+    this.citizenId = citizenId;\n+    this.status = false;\n+    this.amount = amount;\n+    this.taxId = taxId;\n+  }\n }"
  },
  {
    "sha": "5955464cff6a93fad69be060bab2abdf5738d36c",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "status": "modified",
    "additions": 34,
    "deletions": 35,
    "changes": 69,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -1,5 +1,7 @@\n package nc.unc.cs.services.bank.entities;\n \n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import java.util.Date;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -9,8 +11,6 @@\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import java.util.Date;\n-import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -26,42 +26,41 @@\n @EqualsAndHashCode\n public class Transaction {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long transactionId;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long transactionId;\n \n-    @Column(nullable = false, updatable = false)\n-    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    @NotNull\n-    private Date creationDate;\n+  @Column(nullable = false, updatable = false)\n+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n+  @Temporal(value = TemporalType.TIMESTAMP)\n+  @NotNull\n+  private Date creationDate;\n \n-    @NotNull\n-    @Min(value = 1, message = \"Incorrect payment amount\")\n-    @Column(nullable = false, updatable = false)\n-    private Integer amount;\n+  @NotNull\n+  @Min(value = 1, message = \"Incorrect payment amount\")\n+  @Column(nullable = false, updatable = false)\n+  private Integer amount;\n \n-    @NotNull\n-    @Min(value = 1L, message = \"Incorrect payment request ID\")\n-    @Column(nullable = false, updatable = false)\n-    private Long paymentRequestId;\n+  @NotNull\n+  @Min(value = 1L, message = \"Incorrect payment request ID\")\n+  @Column(nullable = false, updatable = false)\n+  private Long paymentRequestId;\n \n-    @NotNull\n-    @Min(value = 1L, message = \"Incorrect citizen ID\")\n-    @Column(nullable = false, updatable = false)\n-    private Long citizenId;\n+  @NotNull\n+  @Min(value = 1L, message = \"Incorrect citizen ID\")\n+  @Column(nullable = false, updatable = false)\n+  private Long citizenId;\n \n-    @Builder\n-    public Transaction(\n-        final Long transactionId,\n-        final Integer amount,\n-        final Long paymentRequestId,\n-        final Long citizenId\n-    ) {\n-        this.transactionId = transactionId;\n-        this.creationDate = new Date();\n-        this.amount = amount;\n-        this.paymentRequestId = paymentRequestId;\n-        this.citizenId = citizenId;\n-    }\n+  @Builder\n+  public Transaction(\n+      final Long transactionId,\n+      final Integer amount,\n+      final Long paymentRequestId,\n+      final Long citizenId) {\n+    this.transactionId = transactionId;\n+    this.creationDate = new Date();\n+    this.amount = amount;\n+    this.paymentRequestId = paymentRequestId;\n+    this.citizenId = citizenId;\n+  }\n }"
  },
  {
    "sha": "7877fce0ff9a00bc7f87418f1e9ecb580ef915bf",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/exceptions/PaymentRequestNotFoundException.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/exceptions/PaymentRequestNotFoundException.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/exceptions/PaymentRequestNotFoundException.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/exceptions/PaymentRequestNotFoundException.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -1,7 +1,7 @@\n package nc.unc.cs.services.bank.exceptions;\n \n public class PaymentRequestNotFoundException extends RuntimeException {\n-    public PaymentRequestNotFoundException(final Long paymentId) {\n-        super(\"Payment request with ID: \" + paymentId + \" was not found!\");\n-    }\n+  public PaymentRequestNotFoundException(final Long paymentId) {\n+    super(\"Payment request with ID: \" + paymentId + \" was not found!\");\n+  }\n }"
  },
  {
    "sha": "91ed874b97c9a612648e84fbdc680c46527906bc",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/repositories/PaymentRequestRepository.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/repositories/PaymentRequestRepository.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/repositories/PaymentRequestRepository.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/repositories/PaymentRequestRepository.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -7,5 +7,5 @@\n \n @Repository\n public interface PaymentRequestRepository extends JpaRepository<PaymentRequest, Long> {\n-    List<PaymentRequest> findAllByCitizenIdAndStatus(Long citizenId, Boolean status);\n+  List<PaymentRequest> findAllByCitizenIdAndStatus(Long citizenId, Boolean status);\n }"
  },
  {
    "sha": "830cc5ea3a7affd90a597ff54b379d6ea17a89c0",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "status": "modified",
    "additions": 132,
    "deletions": 156,
    "changes": 288,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -1,8 +1,8 @@\n package nc.unc.cs.services.bank.services;\n \n+import feign.FeignException;\n import java.util.Date;\n import java.util.List;\n-import feign.FeignException;\n import nc.unc.cs.services.bank.entities.PaymentRequest;\n import nc.unc.cs.services.bank.entities.Transaction;\n import nc.unc.cs.services.bank.exceptions.PaymentRequestNotFoundException;\n@@ -21,165 +21,141 @@\n @Service\n public class BankService {\n \n-    /** Логгер. */\n-    private static final Logger logger = LoggerFactory.getLogger(BankService.class);\n-\n-    /** Репозиторий выставленных счетов. */\n-    private final PaymentRequestRepository paymentRequestRepository;\n-    /** Репозиторий с информацией о проведённых операциях. */\n-    private final TransactionRepository transactionRepository;\n-    /** Сервис логгирования. */\n-    private final LoggingService logging;\n-    /** Налоговый сервис. */\n-    private final TaxIntegrationService taxIntegrationService;\n-\n-    @Autowired\n-    public BankService(\n-        final PaymentRequestRepository paymentRequestRepository,\n-        final TransactionRepository transactionRepository,\n-        final TaxIntegrationService taxIntegrationService,\n-        final LoggingService logging\n-    ) {\n-        this.paymentRequestRepository = paymentRequestRepository;\n-        this.transactionRepository = transactionRepository;\n-        this.taxIntegrationService = taxIntegrationService;\n-        this.logging = logging;\n-    }\n-\n-    /**\n-     * Возвращает выставленный счёт (PaymentRequest).\n-     *\n-     * @param paymentRequestId идентификатор ыставленного счёта.\n-     * @return счёт на оплату\n-     * @throws PaymentRequestNotFoundException\n-     *      если не удалсться найти PaymentRequest\n-     */\n-    public PaymentRequest findPaymentRequestById(\n-        final Long paymentRequestId\n-    ) throws PaymentRequestNotFoundException {\n-        return this.paymentRequestRepository\n-            .findById(paymentRequestId)\n-            .orElseThrow(\n-                () -> new PaymentRequestNotFoundException(paymentRequestId)\n-            );\n-    }\n-\n-    /**\n-     * Регистрация проведённых услуг.\n-     *\n-     * @param paymentPayload информация для регистрации усуги\n-     * @return идентификатор выставленного счёта;\n-     * @throws PaymentRequestNotFoundException\n-     *      если не удалсться найти PaymentRequest\n-     */\n-    public ResponseEntity<Long> requestPayment(\n-        final PaymentPayload paymentPayload\n-    ) throws FeignException {\n-        final PaymentRequest paymentRequest = PaymentRequest\n-            .builder()\n+  /** Логгер. */\n+  private static final Logger logger = LoggerFactory.getLogger(BankService.class);\n+\n+  /** Репозиторий выставленных счетов. */\n+  private final PaymentRequestRepository paymentRequestRepository;\n+  /** Репозиторий с информацией о проведённых операциях. */\n+  private final TransactionRepository transactionRepository;\n+  /** Сервис логгирования. */\n+  private final LoggingService logging;\n+  /** Налоговый сервис. */\n+  private final TaxIntegrationService taxIntegrationService;\n+\n+  @Autowired\n+  public BankService(\n+      final PaymentRequestRepository paymentRequestRepository,\n+      final TransactionRepository transactionRepository,\n+      final TaxIntegrationService taxIntegrationService,\n+      final LoggingService logging) {\n+    this.paymentRequestRepository = paymentRequestRepository;\n+    this.transactionRepository = transactionRepository;\n+    this.taxIntegrationService = taxIntegrationService;\n+    this.logging = logging;\n+  }\n+\n+  /**\n+   * Возвращает выставленный счёт (PaymentRequest).\n+   *\n+   * @param paymentRequestId идентификатор ыставленного счёта.\n+   * @return счёт на оплату\n+   * @throws PaymentRequestNotFoundException если не удалсться найти PaymentRequest\n+   */\n+  public PaymentRequest findPaymentRequestById(final Long paymentRequestId)\n+      throws PaymentRequestNotFoundException {\n+    return this.paymentRequestRepository\n+        .findById(paymentRequestId)\n+        .orElseThrow(() -> new PaymentRequestNotFoundException(paymentRequestId));\n+  }\n+\n+  /**\n+   * Регистрация проведённых услуг.\n+   *\n+   * @param paymentPayload информация для регистрации усуги\n+   * @return идентификатор выставленного счёта;\n+   * @throws PaymentRequestNotFoundException если не удалсться найти PaymentRequest\n+   */\n+  public ResponseEntity<Long> requestPayment(final PaymentPayload paymentPayload)\n+      throws FeignException {\n+    final PaymentRequest paymentRequest =\n+        PaymentRequest.builder()\n             .serviceId(paymentPayload.getServiceId())\n             .citizenId(paymentPayload.getCitizenId())\n             .amount(paymentPayload.getAmount())\n             .build();\n \n-        final Long taxId = this.taxIntegrationService\n-            .createTax(\n-                paymentPayload.getServiceId(),\n-                paymentPayload.getCitizenId(),\n-                paymentPayload.getTaxAmount()\n-            );\n-        paymentRequest.setTaxId(taxId);\n-\n-        logger.info(\"Tax with ID = {} has been created\", taxId);\n-        logging.addLog(\n-            LogEntry\n-                .builder()\n-                .service(\"bank\")\n-                .created(new Date())\n-                .message(\n-                    String.format(\n-                        \"Tax with ID = %d has been created for serviceId = %d, citizenId = %d\",\n-                        taxId,\n-                        paymentPayload.getServiceId(),\n-                        paymentPayload.getCitizenId()\n-                    )\n-                )\n-                .build()\n-        );\n-        this.paymentRequestRepository.save(paymentRequest);\n-\n-        return ResponseEntity.ok(paymentRequest.getPaymentRequestId());\n-    }\n-\n-    /**\n-     * Оплата выставленного счёта.\n-     *\n-     * @param paymentRequestId идентификатор выставленного счёта\n-     * @return http-ответ, в теле которого находится чек\n-     * @throws FeignException если не удасться обратиться к Банковскому сервису\n-     * @throws PaymentRequestNotFoundException\n-     *      если не удалсться найти PaymentRequest\n-     */\n-    public ResponseEntity<Transaction> payment(\n-        final Long paymentRequestId\n-    ) throws FeignException, PaymentRequestNotFoundException {\n-\n-        final PaymentRequest paymentRequest;\n-        final ResponseEntity<Transaction> response;\n-\n-        paymentRequest = findPaymentRequestById(paymentRequestId);\n-        Boolean isPaid = paymentRequest.getStatus();\n-        if (Boolean.TRUE.equals(isPaid)) {\n-            logger.error(\"Payment Request with ID = {} already paid!\", paymentRequestId);\n-            response = ResponseEntity\n-                .status(HttpStatus.BAD_REQUEST)\n-                .body(null);\n-        } else {\n-            paymentRequest.setStatus(true);\n-            final Transaction transaction = Transaction\n-                .builder()\n-                .paymentRequestId(paymentRequestId)\n-                .amount(paymentRequest.getAmount())\n-                .citizenId(paymentRequest.getCitizenId())\n-                .build();\n-            this.taxIntegrationService.payTax(\n-                paymentRequest.getTaxId(),\n-                transaction.getCreationDate()\n-            );\n-            logging.addLog(\n-                LogEntry\n-                    .builder()\n-                    .service(\"bank\")\n-                    .created(new Date())\n-                    .message(String.format(\"Tax paid for id = %d\", paymentRequestId))\n-                    .build()\n-            );\n-\n-            this.transactionRepository.save(transaction);\n-            this.paymentRequestRepository.save(paymentRequest);\n-            response = ResponseEntity.ok(transaction);\n-        }\n-        return response;\n-    }\n-\n-    /**\n-     * Возвращает статус оплаты выставленного счёта.\n-     *\n-     * @param paymentId идентификатор высталвенного счёта\n-     * @return статус оплаты\n-     */\n-    public Boolean isPaid(final Long paymentId) {\n-        return findPaymentRequestById(paymentId).getStatus();\n-    }\n-\n-    /**\n-     * Возвращает все неоплаченные счета указанного гражданина.\n-     *\n-     * @param citizenId идентификатор гражданина\n-     * @return список выставленных счетов\n-     */\n-    public List<PaymentRequest> getDebtPaymentRequests(final Long citizenId) {\n-        return this.paymentRequestRepository\n-            .findAllByCitizenIdAndStatus(citizenId, false);\n+    final Long taxId =\n+        this.taxIntegrationService.createTax(\n+            paymentPayload.getServiceId(),\n+            paymentPayload.getCitizenId(),\n+            paymentPayload.getTaxAmount());\n+    paymentRequest.setTaxId(taxId);\n+\n+    logger.info(\"Tax with ID = {} has been created\", taxId);\n+    logging.addLog(\n+        LogEntry.builder()\n+            .service(\"bank\")\n+            .created(new Date())\n+            .message(\n+                String.format(\n+                    \"Tax with ID = %d has been created for serviceId = %d, citizenId = %d\",\n+                    taxId, paymentPayload.getServiceId(), paymentPayload.getCitizenId()))\n+            .build());\n+    this.paymentRequestRepository.save(paymentRequest);\n+\n+    return ResponseEntity.ok(paymentRequest.getPaymentRequestId());\n+  }\n+\n+  /**\n+   * Оплата выставленного счёта.\n+   *\n+   * @param paymentRequestId идентификатор выставленного счёта\n+   * @return http-ответ, в теле которого находится чек\n+   * @throws FeignException если не удасться обратиться к Банковскому сервису\n+   * @throws PaymentRequestNotFoundException если не удалсться найти PaymentRequest\n+   */\n+  public ResponseEntity<Transaction> payment(final Long paymentRequestId)\n+      throws FeignException, PaymentRequestNotFoundException {\n+\n+    final PaymentRequest paymentRequest;\n+    final ResponseEntity<Transaction> response;\n+\n+    paymentRequest = findPaymentRequestById(paymentRequestId);\n+    Boolean isPaid = paymentRequest.getStatus();\n+    if (Boolean.TRUE.equals(isPaid)) {\n+      logger.error(\"Payment Request with ID = {} already paid!\", paymentRequestId);\n+      response = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n+    } else {\n+      paymentRequest.setStatus(true);\n+      final Transaction transaction =\n+          Transaction.builder()\n+              .paymentRequestId(paymentRequestId)\n+              .amount(paymentRequest.getAmount())\n+              .citizenId(paymentRequest.getCitizenId())\n+              .build();\n+      this.taxIntegrationService.payTax(paymentRequest.getTaxId(), transaction.getCreationDate());\n+      logging.addLog(\n+          LogEntry.builder()\n+              .service(\"bank\")\n+              .created(new Date())\n+              .message(String.format(\"Tax paid for id = %d\", paymentRequestId))\n+              .build());\n+\n+      this.transactionRepository.save(transaction);\n+      this.paymentRequestRepository.save(paymentRequest);\n+      response = ResponseEntity.ok(transaction);\n     }\n+    return response;\n+  }\n+\n+  /**\n+   * Возвращает статус оплаты выставленного счёта.\n+   *\n+   * @param paymentId идентификатор высталвенного счёта\n+   * @return статус оплаты\n+   */\n+  public Boolean isPaid(final Long paymentId) {\n+    return findPaymentRequestById(paymentId).getStatus();\n+  }\n+\n+  /**\n+   * Возвращает все неоплаченные счета указанного гражданина.\n+   *\n+   * @param citizenId идентификатор гражданина\n+   * @return список выставленных счетов\n+   */\n+  public List<PaymentRequest> getDebtPaymentRequests(final Long citizenId) {\n+    return this.paymentRequestRepository.findAllByCitizenIdAndStatus(citizenId, false);\n+  }\n }"
  },
  {
    "sha": "f08b74973e4c3a56b8f3b907e115499dd17d6a2f",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/services/TaxIntegrationService.java",
    "status": "modified",
    "additions": 36,
    "deletions": 36,
    "changes": 72,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/services/TaxIntegrationService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/main/java/nc/unc/cs/services/bank/services/TaxIntegrationService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/services/TaxIntegrationService.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -11,44 +11,44 @@\n \n @Service\n public class TaxIntegrationService {\n-    private final TaxService taxService;\n+  private final TaxService taxService;\n \n-    @Autowired\n-    public TaxIntegrationService(final TaxService taxService) {\n-        this.taxService = taxService;\n-    }\n+  @Autowired\n+  public TaxIntegrationService(final TaxService taxService) {\n+    this.taxService = taxService;\n+  }\n \n-    /**\n-     * Создание налога на предоставленную услугу.\n-     *\n-     * @param serviceId идентификатор сервиса предоставившего услугу\n-     * @param citizenId идентификатор гражданина\n-     * @param taxAmount сумма налога\n-     * @return идентификатор созданного налога;\n-     * @throws FeignException если не удасться обратиться к Банковскому сервису\n-     */\n-    public Long createTax(final Long serviceId, final Long citizenId, final Integer taxAmount)\n-            throws FeignException {\n-        final CreationTax creationTax =\n-                CreationTax.builder()\n-                        .serviceId(serviceId)\n-                        .citizenId(citizenId)\n-                        .taxAmount(taxAmount)\n-                        .build();\n+  /**\n+   * Создание налога на предоставленную услугу.\n+   *\n+   * @param serviceId идентификатор сервиса предоставившего услугу\n+   * @param citizenId идентификатор гражданина\n+   * @param taxAmount сумма налога\n+   * @return идентификатор созданного налога;\n+   * @throws FeignException если не удасться обратиться к Банковскому сервису\n+   */\n+  public Long createTax(final Long serviceId, final Long citizenId, final Integer taxAmount)\n+      throws FeignException {\n+    final CreationTax creationTax =\n+        CreationTax.builder()\n+            .serviceId(serviceId)\n+            .citizenId(citizenId)\n+            .taxAmount(taxAmount)\n+            .build();\n \n-        return this.taxService.createTax(creationTax);\n-    }\n+    return this.taxService.createTax(creationTax);\n+  }\n \n-    /**\n-     * Изменяет статус оплаты налога на \"оплачен\".\n-     *\n-     * @param taxId идентификатор налога\n-     * @param date дата оплаты выставленного счёта\n-     * @return http-ответ, в теле которого находится идентификатор оплаченного налога\n-     * @throws FeignException если не удасться обратиться к Банковскому сервису\n-     */\n-    public ResponseEntity<Long> payTax(final Long taxId, final Date date) throws FeignException {\n-        final TaxPayment taxPayment = new TaxPayment(taxId, date);\n-        return this.taxService.payTax(taxPayment);\n-    }\n+  /**\n+   * Изменяет статус оплаты налога на \"оплачен\".\n+   *\n+   * @param taxId идентификатор налога\n+   * @param date дата оплаты выставленного счёта\n+   * @return http-ответ, в теле которого находится идентификатор оплаченного налога\n+   * @throws FeignException если не удасться обратиться к Банковскому сервису\n+   */\n+  public ResponseEntity<Long> payTax(final Long taxId, final Date date) throws FeignException {\n+    final TaxPayment taxPayment = new TaxPayment(taxId, date);\n+    return this.taxService.payTax(taxPayment);\n+  }\n }"
  },
  {
    "sha": "182c88049f6662f454eb1ff658cb0de3f8d81db7",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 29,
    "changes": 51,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -1,5 +1,7 @@\n package nc.unc.cs.services.bank.services;\n \n+import static org.mockito.BDDMockito.given;\n+\n import java.util.Optional;\n import nc.unc.cs.services.bank.entities.PaymentRequest;\n import nc.unc.cs.services.bank.exceptions.PaymentRequestNotFoundException;\n@@ -10,47 +12,38 @@\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n public class FindDataTest {\n-    @Mock\n-    private PaymentRequestRepository paymentRequestRepository;\n-    @InjectMocks\n-    private BankService bankService;\n-\n-    @Test\n-    void findPaymentRequestByIdTest() {\n-        final PaymentRequest paymentRequest = PaymentRequest\n-            .builder()\n+  @Mock private PaymentRequestRepository paymentRequestRepository;\n+  @InjectMocks private BankService bankService;\n+\n+  @Test\n+  void findPaymentRequestByIdTest() {\n+    final PaymentRequest paymentRequest =\n+        PaymentRequest.builder()\n             .paymentRequestId(1L)\n             .amount(10000)\n             .citizenId(111L)\n             .serviceId(20L)\n             .taxId(1L)\n             .build();\n \n-        given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n-            .willReturn(Optional.of(paymentRequest));\n-\n-        final PaymentRequest response =\n-            this.bankService.findPaymentRequestById(paymentRequest.getPaymentRequestId());\n+    given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n+        .willReturn(Optional.of(paymentRequest));\n \n-        Assertions.assertEquals(\n-            paymentRequest.getPaymentRequestId(),\n-            response.getPaymentRequestId()\n-        );\n-    }\n+    final PaymentRequest response =\n+        this.bankService.findPaymentRequestById(paymentRequest.getPaymentRequestId());\n \n-    @Test\n-    void findPaymentRequestByIdExceptionTest() {\n-        given(this.paymentRequestRepository.findById(1L))\n-            .willThrow(new PaymentRequestNotFoundException(1L));\n+    Assertions.assertEquals(paymentRequest.getPaymentRequestId(), response.getPaymentRequestId());\n+  }\n \n+  @Test\n+  void findPaymentRequestByIdExceptionTest() {\n+    given(this.paymentRequestRepository.findById(1L))\n+        .willThrow(new PaymentRequestNotFoundException(1L));\n \n-        Assertions.assertThrows(\n-            PaymentRequestNotFoundException.class,\n-            () -> this.bankService.findPaymentRequestById(1L)\n-        );\n-    }\n+    Assertions.assertThrows(\n+        PaymentRequestNotFoundException.class, () -> this.bankService.findPaymentRequestById(1L));\n+  }\n }"
  },
  {
    "sha": "37809ff43c14b1db157040357f179537aee8140a",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 52,
    "changes": 94,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -1,5 +1,8 @@\n package nc.unc.cs.services.bank.services;\n \n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+\n import java.util.Date;\n import java.util.Optional;\n import nc.unc.cs.services.bank.entities.PaymentRequest;\n@@ -15,66 +18,53 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n public class PaymentTest {\n-    @Mock\n-    private PaymentRequestRepository paymentRequestRepository;\n-    @Mock\n-    private TransactionRepository transactionRepository;\n-    @Mock\n-    private LoggingService logging;\n-    @Mock\n-    private TaxIntegrationService taxIntegrationService;\n-    @InjectMocks\n-    private BankService bankService;\n+  @Mock private PaymentRequestRepository paymentRequestRepository;\n+  @Mock private TransactionRepository transactionRepository;\n+  @Mock private LoggingService logging;\n+  @Mock private TaxIntegrationService taxIntegrationService;\n+  @InjectMocks private BankService bankService;\n \n-    private PaymentRequest createPaymentRequest() {\n-        return PaymentRequest\n-            .builder()\n-            .paymentRequestId(1L)\n-            .amount(10000)\n-            .citizenId(111L)\n-            .serviceId(20L)\n-            .taxId(1L)\n-            .build();\n-    }\n+  private PaymentRequest createPaymentRequest() {\n+    return PaymentRequest.builder()\n+        .paymentRequestId(1L)\n+        .amount(10000)\n+        .citizenId(111L)\n+        .serviceId(20L)\n+        .taxId(1L)\n+        .build();\n+  }\n \n-    @Test\n-    void paymentCorrectTest() {\n-        final PaymentRequest paymentRequest = this.createPaymentRequest();\n+  @Test\n+  void paymentCorrectTest() {\n+    final PaymentRequest paymentRequest = this.createPaymentRequest();\n \n-        given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n-            .willReturn(Optional.of(paymentRequest));\n+    given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n+        .willReturn(Optional.of(paymentRequest));\n \n-        given(\n-            this.taxIntegrationService.payTax(\n-                paymentRequest.getTaxId(),\n-                new Date()\n-            ))\n-            .willReturn(ResponseEntity.ok(1L));\n+    given(this.taxIntegrationService.payTax(paymentRequest.getTaxId(), new Date()))\n+        .willReturn(ResponseEntity.ok(1L));\n \n-        given(this.logging.addLog(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n-        given(this.transactionRepository.save(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n-        given(this.paymentRequestRepository.save(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.logging.addLog(any())).willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.transactionRepository.save(any()))\n+        .willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.paymentRequestRepository.save(any()))\n+        .willAnswer(invocation -> invocation.getArgument(0));\n \n-        final ResponseEntity<Transaction> response =\n-            this.bankService.payment(paymentRequest.getPaymentRequestId());\n+    final ResponseEntity<Transaction> response =\n+        this.bankService.payment(paymentRequest.getPaymentRequestId());\n \n-        Assertions.assertAll(\n-            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n-            () -> Assertions.assertEquals(paymentRequest.getAmount(), response.getBody().getAmount()),\n-            () -> Assertions.assertEquals(\n-                paymentRequest.getPaymentRequestId(),\n-                response.getBody().getPaymentRequestId()\n-            ),\n-            () -> Assertions.assertEquals(paymentRequest.getCitizenId(), response.getBody().getCitizenId()),\n-            () -> Assertions.assertTrue(paymentRequest.getStatus())\n-        );\n-    }\n+    Assertions.assertAll(\n+        () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+        () -> Assertions.assertEquals(paymentRequest.getAmount(), response.getBody().getAmount()),\n+        () ->\n+            Assertions.assertEquals(\n+                paymentRequest.getPaymentRequestId(), response.getBody().getPaymentRequestId()),\n+        () ->\n+            Assertions.assertEquals(\n+                paymentRequest.getCitizenId(), response.getBody().getCitizenId()),\n+        () -> Assertions.assertTrue(paymentRequest.getStatus()));\n+  }\n }"
  },
  {
    "sha": "faff9550103c1704f1210cbe6ca7325aaddfc9fd",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "status": "modified",
    "additions": 33,
    "deletions": 39,
    "changes": 72,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -1,5 +1,8 @@\n package nc.unc.cs.services.bank.services;\n \n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+\n import nc.unc.cs.services.bank.repositories.PaymentRequestRepository;\n import nc.unc.cs.services.common.clients.bank.PaymentPayload;\n import nc.unc.cs.services.common.clients.logging.LoggingService;\n@@ -11,51 +14,42 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n class RequestPaymentTestTest {\n-    @Mock\n-    private PaymentRequestRepository paymentRequestRepository;\n-    @Mock\n-    private LoggingService logging;\n-    @Mock\n-    private TaxIntegrationService taxIntegrationService;\n-    @InjectMocks\n-    private BankService bankService;\n-\n-    private PaymentPayload createPaymentPayload() {\n-        return PaymentPayload\n-            .builder()\n-            .serviceId(20L)\n-            .citizenId(111L)\n-            .amount(10000)\n-            .taxAmount(1000)\n-            .build();\n-    }\n-\n-    @Test\n-    void requestPaymentCorrectTest() {\n-        final Long testTaxId = 1L;\n-        final PaymentPayload paymentPayload = this.createPaymentPayload();\n-\n-        given(this.taxIntegrationService\n-            .createTax(\n+  @Mock private PaymentRequestRepository paymentRequestRepository;\n+  @Mock private LoggingService logging;\n+  @Mock private TaxIntegrationService taxIntegrationService;\n+  @InjectMocks private BankService bankService;\n+\n+  private PaymentPayload createPaymentPayload() {\n+    return PaymentPayload.builder()\n+        .serviceId(20L)\n+        .citizenId(111L)\n+        .amount(10000)\n+        .taxAmount(1000)\n+        .build();\n+  }\n+\n+  @Test\n+  void requestPaymentCorrectTest() {\n+    final Long testTaxId = 1L;\n+    final PaymentPayload paymentPayload = this.createPaymentPayload();\n+\n+    given(\n+            this.taxIntegrationService.createTax(\n                 paymentPayload.getServiceId(),\n                 paymentPayload.getCitizenId(),\n-                paymentPayload.getTaxAmount()\n-            ))\n-            .willReturn(testTaxId);\n+                paymentPayload.getTaxAmount()))\n+        .willReturn(testTaxId);\n \n-        given(this.logging.addLog(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n-        given(this.paymentRequestRepository.save(any()))\n-            .willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.logging.addLog(any())).willAnswer(invocation -> invocation.getArgument(0));\n+    given(this.paymentRequestRepository.save(any()))\n+        .willAnswer(invocation -> invocation.getArgument(0));\n \n-        ResponseEntity<Long> response = this.bankService.requestPayment(paymentPayload);\n-        System.out.println(response);\n+    ResponseEntity<Long> response = this.bankService.requestPayment(paymentPayload);\n+    System.out.println(response);\n \n-        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());\n-    }\n+    Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());\n+  }\n }"
  },
  {
    "sha": "a80c59f6536df3edde12056e5657e7e832f45ece",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/actuator/DiscoveryServices.java",
    "status": "modified",
    "additions": 49,
    "deletions": 54,
    "changes": 103,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/actuator/DiscoveryServices.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/actuator/DiscoveryServices.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/actuator/DiscoveryServices.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -1,14 +1,14 @@\n package nc.unc.cs.services.common.actuator;\n \n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.discovery.EurekaClient;\n+import com.netflix.discovery.shared.Application;\n import java.io.IOException;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Optional;\n-import com.netflix.appinfo.InstanceInfo;\n-import com.netflix.discovery.EurekaClient;\n-import com.netflix.discovery.shared.Application;\n import lombok.extern.slf4j.Slf4j;\n import okhttp3.Call;\n import okhttp3.OkHttpClient;\n@@ -25,64 +25,59 @@\n @Slf4j\n public class DiscoveryServices {\n \n-    private final OkHttpClient httpClient;\n+  private final OkHttpClient httpClient;\n \n-    private final EurekaClient client;\n+  private final EurekaClient client;\n \n-    private final List<Integer> correctCodes = Arrays.asList(200, 401, 403);\n+  private final List<Integer> correctCodes = Arrays.asList(200, 401, 403);\n \n-    @Autowired\n-    public DiscoveryServices(final EurekaClient client, final OkHttpClient httpClient) {\n-        this.client = client;\n-        this.httpClient = httpClient;\n-    }\n+  @Autowired\n+  public DiscoveryServices(final EurekaClient client, final OkHttpClient httpClient) {\n+    this.client = client;\n+    this.httpClient = httpClient;\n+  }\n \n-    @ReadOperation\n-    public List<Application> listServices() {\n-        return this.client.getApplications().getRegisteredApplications();\n-    }\n+  @ReadOperation\n+  public List<Application> listServices() {\n+    return this.client.getApplications().getRegisteredApplications();\n+  }\n \n-    @ReadOperation\n-    public List<String> serviceInfo(@Selector String name) throws IOException {\n-        List<String> result = new ArrayList<>();\n-        final Optional<Application> service =\n-                this.client.getApplications().getRegisteredApplications().stream()\n-                        .filter(app -> name.equals(app.getName()))\n-                        .findFirst();\n+  @ReadOperation\n+  public List<String> serviceInfo(@Selector String name) throws IOException {\n+    List<String> result = new ArrayList<>();\n+    final Optional<Application> service =\n+        this.client.getApplications().getRegisteredApplications().stream()\n+            .filter(app -> name.equals(app.getName()))\n+            .findFirst();\n \n-        if (service.isPresent()) {\n-            String current = \"\";\n-            final Application application = service.get();\n-            for (InstanceInfo instance : application.getInstances()) {\n-                log.error(\n-                        String.format(\n-                                \"Testing %s - %s...\", application.getName(), instance.getId()));\n-                try {\n-                    final Call call =\n-                            this.httpClient.newCall(\n-                                    new Request.Builder()\n-                                            .get()\n-                                            .url(new URL(instance.getHealthCheckUrl()))\n-                                            .build());\n-                    final Response response = call.execute();\n-                    current =\n-                            String.format(\n-                                    \"[%s = %s, Code: %d, Success: %b]\",\n-                                    instance.getId(),\n-                                    instance.getHostName(),\n-                                    response.code(),\n-                                    response.isSuccessful());\n+    if (service.isPresent()) {\n+      String current = \"\";\n+      final Application application = service.get();\n+      for (InstanceInfo instance : application.getInstances()) {\n+        log.error(String.format(\"Testing %s - %s...\", application.getName(), instance.getId()));\n+        try {\n+          final Call call =\n+              this.httpClient.newCall(\n+                  new Request.Builder().get().url(new URL(instance.getHealthCheckUrl())).build());\n+          final Response response = call.execute();\n+          current =\n+              String.format(\n+                  \"[%s = %s, Code: %d, Success: %b]\",\n+                  instance.getId(),\n+                  instance.getHostName(),\n+                  response.code(),\n+                  response.isSuccessful());\n \n-                } catch (IOException exception) {\n-                    log.error(\"Test failed\", exception);\n-                    String.format(\n-                            \"[%s = %s, Fail: %s]\",\n-                            instance.getId(), instance.getHostName(), exception.getMessage());\n-                }\n-                result.add(current);\n-                log.error(current);\n-            }\n+        } catch (IOException exception) {\n+          log.error(\"Test failed\", exception);\n+          String.format(\n+              \"[%s = %s, Fail: %s]\",\n+              instance.getId(), instance.getHostName(), exception.getMessage());\n         }\n-        return result;\n+        result.add(current);\n+        log.error(current);\n+      }\n     }\n+    return result;\n+  }\n }"
  },
  {
    "sha": "99542a3bb55f9cdce8fc96735b9e28c71ec812ad",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/bank/BankService.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/bank/BankService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/bank/BankService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/bank/BankService.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -11,12 +11,12 @@\n @FeignClient(name = \"BANK\", path = \"bank\", url = \"${app.bank-url}\")\n @ConditionalOnMissingClass(\"nc.unc.cs.services.bank.controllers.BankController\")\n public interface BankService {\n-    @PostMapping(\n-            value = \"request-payment\",\n-            consumes = \"application/json\",\n-            produces = \"application/json\")\n-    ResponseEntity<Long> requestPayment(@RequestBody final PaymentPayload paymentPayload);\n+  @PostMapping(\n+      value = \"request-payment\",\n+      consumes = \"application/json\",\n+      produces = \"application/json\")\n+  ResponseEntity<Long> requestPayment(@RequestBody final PaymentPayload paymentPayload);\n \n-    @GetMapping(value = \"{paymentId}\", produces = \"application/json\")\n-    Boolean checkPaymentStatus(@PathVariable(\"paymentId\") final Long paymentId);\n+  @GetMapping(value = \"{paymentId}\", produces = \"application/json\")\n+  Boolean checkPaymentStatus(@PathVariable(\"paymentId\") final Long paymentId);\n }"
  },
  {
    "sha": "e22f4ce9590e65212d9857694f0d76a4a9b3b6c3",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/bank/PaymentPayload.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/bank/PaymentPayload.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/bank/PaymentPayload.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/bank/PaymentPayload.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -16,19 +16,19 @@\n @NoArgsConstructor\n @Builder\n public class PaymentPayload {\n-    @NotNull(message = \"Incorrect service ID\")\n-    @Min(value = 1L, message = \"Incorrect service ID\")\n-    private Long serviceId;\n+  @NotNull(message = \"Incorrect service ID\")\n+  @Min(value = 1L, message = \"Incorrect service ID\")\n+  private Long serviceId;\n \n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(value = 1L, message = \"Incorrect citizen ID\")\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(value = 1L, message = \"Incorrect citizen ID\")\n+  private Long citizenId;\n \n-    @NotNull(message = \"Incorrect amount\")\n-    @Min(value = 1, message = \"Incorrect amount\")\n-    private Integer amount;\n+  @NotNull(message = \"Incorrect amount\")\n+  @Min(value = 1, message = \"Incorrect amount\")\n+  private Integer amount;\n \n-    @NotNull(message = \"Incorrect taxAmount\")\n-    @Min(value = 1, message = \"Incorrect tax ID\")\n-    private Integer taxAmount;\n+  @NotNull(message = \"Incorrect taxAmount\")\n+  @Min(value = 1, message = \"Incorrect tax ID\")\n+  private Integer taxAmount;\n }"
  },
  {
    "sha": "5dd349397f48f6b853742ff49488e66043eb4f48",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/logging/LogEntry.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/logging/LogEntry.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/logging/LogEntry.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/logging/LogEntry.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -9,13 +9,13 @@\n @Builder\n public class LogEntry {\n \n-    private long id;\n+  private long id;\n \n-    private Date created;\n+  private Date created;\n \n-    @Size(min = 1, max = 10)\n-    private String service;\n+  @Size(min = 1, max = 10)\n+  private String service;\n \n-    @Size(min = 1, max = 4000)\n-    private String message;\n+  @Size(min = 1, max = 4000)\n+  private String message;\n }"
  },
  {
    "sha": "b43985794baa21db623ac9a817d81f28f2f15981",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/logging/LoggingService.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/logging/LoggingService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/logging/LoggingService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/logging/LoggingService.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -11,12 +11,12 @@\n @FeignClient(name = \"LOGGER\", path = \"logs\", url = \"${app.logging-url}\")\n @ConditionalOnMissingClass(\"nc.unc.cs.services.logging.services.LogsService\")\n public interface LoggingService {\n-    @GetMapping(path = \"/\", produces = \"application/json\")\n-    public List<LogEntry> viewLastLogs();\n+  @GetMapping(path = \"/\", produces = \"application/json\")\n+  public List<LogEntry> viewLastLogs();\n \n-    @GetMapping(path = \"/{service}\", produces = \"application/json\")\n-    public List<LogEntry> viewLogs(@PathVariable final String service);\n+  @GetMapping(path = \"/{service}\", produces = \"application/json\")\n+  public List<LogEntry> viewLogs(@PathVariable final String service);\n \n-    @PostMapping(value = \"/\", produces = \"application/json\", consumes = \"application/json\")\n-    public LogEntry addLog(@RequestBody final LogEntry log);\n+  @PostMapping(value = \"/\", produces = \"application/json\", consumes = \"application/json\")\n+  public LogEntry addLog(@RequestBody final LogEntry log);\n }"
  },
  {
    "sha": "0cce93d3b8b056246d6f1a1d9185c45850076302",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/tax/CreationTax.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/CreationTax.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/CreationTax.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/CreationTax.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -17,15 +17,15 @@\n @Builder\n public class CreationTax {\n \n-    @NotNull(message = \"Incorrect service ID\")\n-    @Min(1L)\n-    private Long serviceId;\n+  @NotNull(message = \"Incorrect service ID\")\n+  @Min(1L)\n+  private Long serviceId;\n \n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(1L)\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(1L)\n+  private Long citizenId;\n \n-    @NotNull(message = \"Incorrect tax amount\")\n-    @Min(1)\n-    private Integer taxAmount;\n+  @NotNull(message = \"Incorrect tax amount\")\n+  @Min(1)\n+  private Integer taxAmount;\n }"
  },
  {
    "sha": "bd70692d0a70255dcea761c36eece8ec9a2d20b6",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/tax/IdInfo.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/IdInfo.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/IdInfo.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/IdInfo.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -12,11 +12,11 @@\n @ToString\n @EqualsAndHashCode\n public class IdInfo {\n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(1L)\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(1L)\n+  private Long citizenId;\n \n-    @NotNull(message = \"Incorrect service ID\")\n-    @Min(1L)\n-    private Long serviceId;\n+  @NotNull(message = \"Incorrect service ID\")\n+  @Min(1L)\n+  private Long serviceId;\n }"
  },
  {
    "sha": "e9a8d027b2516c4059f37fe6a8c699256a905cd0",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/tax/Tax.java",
    "status": "modified",
    "additions": 21,
    "deletions": 21,
    "changes": 42,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/Tax.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/Tax.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/Tax.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -19,31 +19,31 @@\n @Builder\n public class Tax {\n \n-    @NotNull(message = \"Incorrect tax ID\")\n-    @Min(1L)\n-    private Long taxId;\n+  @NotNull(message = \"Incorrect tax ID\")\n+  @Min(1L)\n+  private Long taxId;\n \n-    @NotNull(message = \"Incorrect tax amount\")\n-    @Min(1)\n-    private Integer taxAmount;\n+  @NotNull(message = \"Incorrect tax amount\")\n+  @Min(1)\n+  private Integer taxAmount;\n \n-    @NotNull private Boolean status;\n+  @NotNull private Boolean status;\n \n-    @NotNull\n-    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    private Date creationDate;\n+  @NotNull\n+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n+  @Temporal(value = TemporalType.TIMESTAMP)\n+  private Date creationDate;\n \n-    @NotNull\n-    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    private Date taxPaymentDate;\n+  @NotNull\n+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n+  @Temporal(value = TemporalType.TIMESTAMP)\n+  private Date taxPaymentDate;\n \n-    @NotNull(message = \"Incorrect citizen ID\")\n-    @Min(1L)\n-    private Long citizenId;\n+  @NotNull(message = \"Incorrect citizen ID\")\n+  @Min(1L)\n+  private Long citizenId;\n \n-    @NotNull(message = \"Incorrect service ID\")\n-    @Min(1L)\n-    private Long serviceId;\n+  @NotNull(message = \"Incorrect service ID\")\n+  @Min(1L)\n+  private Long serviceId;\n }"
  },
  {
    "sha": "3428a5679a484b069ccf6cc80cb5dfaa8a818546",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/tax/TaxPayment.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/TaxPayment.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/TaxPayment.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/TaxPayment.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -20,12 +20,12 @@\n @NoArgsConstructor\n @Builder\n public class TaxPayment {\n-    @NotNull(message = \"Incorrect tax ID\")\n-    @Min(1L)\n-    private Long taxId;\n+  @NotNull(message = \"Incorrect tax ID\")\n+  @Min(1L)\n+  private Long taxId;\n \n-    @NotNull\n-    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    private Date taxPaymentDate;\n+  @NotNull\n+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n+  @Temporal(value = TemporalType.TIMESTAMP)\n+  private Date taxPaymentDate;\n }"
  },
  {
    "sha": "6146bd7c8a6e5990379a5e1575981d03fa969b01",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/clients/tax/TaxService.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/TaxService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/TaxService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/clients/tax/TaxService.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -10,12 +10,12 @@\n @ConditionalOnMissingClass(\"nc.unc.cs.services.tax.controllers.TaxController\")\n public interface TaxService {\n \n-    @PostMapping(value = \"create\", produces = \"application/json\", consumes = \"application/json\")\n-    Long createTax(@RequestBody final CreationTax creationTax);\n+  @PostMapping(value = \"create\", produces = \"application/json\", consumes = \"application/json\")\n+  Long createTax(@RequestBody final CreationTax creationTax);\n \n-    @PostMapping(value = \"pay-tax\", produces = \"application/json\", consumes = \"application/json\")\n-    ResponseEntity<Long> payTax(@RequestBody final TaxPayment taxPayment);\n+  @PostMapping(value = \"pay-tax\", produces = \"application/json\", consumes = \"application/json\")\n+  ResponseEntity<Long> payTax(@RequestBody final TaxPayment taxPayment);\n \n-    @PostMapping(value = \"debt\", produces = \"application/json\", consumes = \"application/json\")\n-    Boolean getListUnpaidTaxes(@RequestBody final IdInfo idInfo);\n+  @PostMapping(value = \"debt\", produces = \"application/json\", consumes = \"application/json\")\n+  Boolean getListUnpaidTaxes(@RequestBody final IdInfo idInfo);\n }"
  },
  {
    "sha": "2cc48fdc54b4f6326ff3802ebe4f16b56ab95b02",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/services/HttpClientConfiguration.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/services/HttpClientConfiguration.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/services/HttpClientConfiguration.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/services/HttpClientConfiguration.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -1,7 +1,7 @@\n package nc.unc.cs.services.common.services;\n \n-import java.util.concurrent.TimeUnit;\n import feign.okhttp.OkHttpClient;\n+import java.util.concurrent.TimeUnit;\n import okhttp3.OkHttpClient.Builder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n@@ -10,14 +10,14 @@\n @Configuration\n public class HttpClientConfiguration {\n \n-    @Bean\n-    public okhttp3.OkHttpClient okHttpClient() {\n-        return new Builder().connectTimeout(2, TimeUnit.SECONDS).build();\n-    }\n+  @Bean\n+  public okhttp3.OkHttpClient okHttpClient() {\n+    return new Builder().connectTimeout(2, TimeUnit.SECONDS).build();\n+  }\n \n-    @Bean\n-    @Autowired\n-    public OkHttpClient client(okhttp3.OkHttpClient okHttpClient) {\n-        return new OkHttpClient(okHttpClient);\n-    }\n+  @Bean\n+  @Autowired\n+  public OkHttpClient client(okhttp3.OkHttpClient okHttpClient) {\n+    return new OkHttpClient(okHttpClient);\n+  }\n }"
  },
  {
    "sha": "6761e70f14a8b446772b0fb4ccef89baf2284885",
    "filename": "services/common/src/main/java/nc/unc/cs/services/common/services/HttpClientLogger.java",
    "status": "modified",
    "additions": 22,
    "deletions": 31,
    "changes": 53,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/services/HttpClientLogger.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/common/src/main/java/nc/unc/cs/services/common/services/HttpClientLogger.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/common/src/main/java/nc/unc/cs/services/common/services/HttpClientLogger.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -13,39 +13,30 @@\n @Slf4j\n @Component\n public class HttpClientLogger\n-        implements LoadBalancerLifecycle<RequestDataContext, ResponseData, ServiceInstance> {\n+    implements LoadBalancerLifecycle<RequestDataContext, ResponseData, ServiceInstance> {\n \n-    @Override\n-    public void onStart(Request<RequestDataContext> request) {}\n+  @Override\n+  public void onStart(Request<RequestDataContext> request) {}\n \n-    @Override\n-    public void onStartRequest(\n-            Request<RequestDataContext> request, Response<ServiceInstance> lbResponse) {\n-        log.warn(\"Request STARTED: {}\", request.getContext().getClientRequest().getUrl());\n-    }\n+  @Override\n+  public void onStartRequest(\n+      Request<RequestDataContext> request, Response<ServiceInstance> lbResponse) {\n+    log.warn(\"Request STARTED: {}\", request.getContext().getClientRequest().getUrl());\n+  }\n \n-    @Override\n-    public void onComplete(\n-            CompletionContext<ResponseData, ServiceInstance, RequestDataContext>\n-                    completionContext) {\n-        if (completionContext.status().equals(CompletionContext.Status.FAILED)) {\n-            log.error(\n-                    \"Request FAILED({}): {}\",\n-                    completionContext.getClientResponse().getHttpStatus(),\n-                    completionContext\n-                            .getLoadBalancerRequest()\n-                            .getContext()\n-                            .getClientRequest()\n-                            .getUrl());\n-        } else {\n-            log.warn(\n-                    \"Request SUCCESS({}): {}\",\n-                    completionContext.getClientResponse().getHttpStatus(),\n-                    completionContext\n-                            .getLoadBalancerRequest()\n-                            .getContext()\n-                            .getClientRequest()\n-                            .getUrl());\n-        }\n+  @Override\n+  public void onComplete(\n+      CompletionContext<ResponseData, ServiceInstance, RequestDataContext> completionContext) {\n+    if (completionContext.status().equals(CompletionContext.Status.FAILED)) {\n+      log.error(\n+          \"Request FAILED({}): {}\",\n+          completionContext.getClientResponse().getHttpStatus(),\n+          completionContext.getLoadBalancerRequest().getContext().getClientRequest().getUrl());\n+    } else {\n+      log.warn(\n+          \"Request SUCCESS({}): {}\",\n+          completionContext.getClientResponse().getHttpStatus(),\n+          completionContext.getLoadBalancerRequest().getContext().getClientRequest().getUrl());\n     }\n+  }\n }"
  },
  {
    "sha": "5d4502209e7bc71ea216a4c6a6d7dcb49ed48bb0",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/CommunalApplication.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/communal/src/main/java/nc/unc/cs/services/communal/CommunalApplication.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/communal/src/main/java/nc/unc/cs/services/communal/CommunalApplication.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/CommunalApplication.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -9,7 +9,7 @@\n @EnableDiscoveryClient\n @EnableFeignClients(basePackages = \"nc.unc.cs.services\")\n public class CommunalApplication {\n-    public static void main(String[] args) {\n-        SpringApplication.run(CommunalApplication.class);\n-    }\n+  public static void main(String[] args) {\n+    SpringApplication.run(CommunalApplication.class);\n+  }\n }"
  },
  {
    "sha": "cb87ba4f6583a19c52099859b6ec621e8956b237",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/confogurations/WebConfiguration.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/communal/src/main/java/nc/unc/cs/services/communal/confogurations/WebConfiguration.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/7b4c735a9ef370dc46923dee69d6a53bf217a521/services/communal/src/main/java/nc/unc/cs/services/communal/confogurations/WebConfiguration.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/confogurations/WebConfiguration.java?ref=7b4c735a9ef370dc46923dee69d6a53bf217a521",
    "patch": "@@ -8,8 +8,8 @@\n @Configuration\n @EnableWebMvc\n public class WebConfiguration implements WebMvcConfigurer {\n-    @Override\n-    public void addCorsMappings(final CorsRegistry registry) {\n-        registry.addMapping(\"/**\");\n-    }\n+  @Override\n+  public void addCorsMappings(final CorsRegistry registry) {\n+    registry.addMapping(\"/**\");\n+  }\n }"
  }
]
