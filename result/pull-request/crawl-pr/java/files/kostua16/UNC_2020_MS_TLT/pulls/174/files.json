[
  {
    "sha": "79e14534a754aaf0c0c06c5d7ed6e56409913d21",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 1,
    "changes": 17,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/entities/PaymentRequest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -20,7 +20,6 @@\n @AllArgsConstructor\n @ToString\n @EqualsAndHashCode\n-@Builder\n public class PaymentRequest {\n \n     @Id\n@@ -50,4 +49,20 @@\n     @Min(value = 1L, message = \"Incorrect tax ID\")\n     @Column(nullable = false, updatable = false, unique = true)\n     private Long taxId;\n+\n+    @Builder\n+    public PaymentRequest(\n+        final Long paymentRequestId,\n+        final Long serviceId,\n+        final Integer amount,\n+        final Long citizenId,\n+        final Long taxId\n+    ) {\n+        this.paymentRequestId = paymentRequestId;\n+        this.serviceId = serviceId;\n+        this.citizenId = citizenId;\n+        this.status = false;\n+        this.amount = amount;\n+        this.taxId = taxId;\n+    }\n }"
  },
  {
    "sha": "30f6564d66dc60e0915e2705c0d430db753ff440",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "status": "modified",
    "additions": 24,
    "deletions": 6,
    "changes": 30,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/entities/Transaction.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,7 +1,5 @@\n package nc.unc.cs.services.bank.entities;\n \n-import com.fasterxml.jackson.annotation.JsonFormat;\n-import java.util.Date;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -11,6 +9,8 @@\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import java.util.Date;\n+import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -24,26 +24,44 @@\n @AllArgsConstructor\n @ToString\n @EqualsAndHashCode\n-@Builder\n public class Transaction {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long transactionId;\n \n-    @Column(updatable = false)\n+    @Column(nullable = false, updatable = false)\n     @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd HH:mm:ss\")\n     @Temporal(value = TemporalType.TIMESTAMP)\n     @NotNull\n     private Date creationDate;\n \n     @NotNull\n     @Min(value = 1, message = \"Incorrect payment amount\")\n-    @Column(nullable = false)\n+    @Column(nullable = false, updatable = false)\n     private Integer amount;\n \n     @NotNull\n     @Min(value = 1L, message = \"Incorrect payment request ID\")\n-    @Column(nullable = false)\n+    @Column(nullable = false, updatable = false)\n     private Long paymentRequestId;\n+\n+    @NotNull\n+    @Min(value = 1L, message = \"Incorrect citizen ID\")\n+    @Column(nullable = false, updatable = false)\n+    private Long citizenId;\n+\n+    @Builder\n+    public Transaction(\n+        final Long transactionId,\n+        final Integer amount,\n+        final Long paymentRequestId,\n+        final Long citizenId\n+    ) {\n+        this.transactionId = transactionId;\n+        this.creationDate = new Date();\n+        this.amount = amount;\n+        this.paymentRequestId = paymentRequestId;\n+        this.citizenId = citizenId;\n+    }\n }"
  },
  {
    "sha": "acb43030796c65eb86f51317d10a02844cc2c2bb",
    "filename": "services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "status": "modified",
    "additions": 89,
    "deletions": 57,
    "changes": 146,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/main/java/nc/unc/cs/services/bank/services/BankService.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,8 +1,8 @@\n package nc.unc.cs.services.bank.services;\n \n-import feign.FeignException;\n import java.util.Date;\n import java.util.List;\n+import feign.FeignException;\n import nc.unc.cs.services.bank.entities.PaymentRequest;\n import nc.unc.cs.services.bank.entities.Transaction;\n import nc.unc.cs.services.bank.exceptions.PaymentRequestNotFoundException;\n@@ -21,19 +21,25 @@\n @Service\n public class BankService {\n \n+    /** Логгер. */\n     private static final Logger logger = LoggerFactory.getLogger(BankService.class);\n \n+    /** Репозиторий выставленных счетов. */\n     private final PaymentRequestRepository paymentRequestRepository;\n+    /** Репозиторий с информацией о проведённых операциях. */\n     private final TransactionRepository transactionRepository;\n+    /** Сервис логгирования. */\n     private final LoggingService logging;\n+    /** Налоговый сервис. */\n     private final TaxIntegrationService taxIntegrationService;\n \n     @Autowired\n     public BankService(\n-            final PaymentRequestRepository paymentRequestRepository,\n-            final TransactionRepository transactionRepository,\n-            final TaxIntegrationService taxIntegrationService,\n-            final LoggingService logging) {\n+        final PaymentRequestRepository paymentRequestRepository,\n+        final TransactionRepository transactionRepository,\n+        final TaxIntegrationService taxIntegrationService,\n+        final LoggingService logging\n+    ) {\n         this.paymentRequestRepository = paymentRequestRepository;\n         this.transactionRepository = transactionRepository;\n         this.taxIntegrationService = taxIntegrationService;\n@@ -44,66 +50,79 @@ public BankService(\n      * Возвращает выставленный счёт (PaymentRequest).\n      *\n      * @param paymentRequestId идентификатор ыставленного счёта.\n+     * @return счёт на оплату\n+     * @throws PaymentRequestNotFoundException\n+     *      если не удалсться найти PaymentRequest\n      */\n-    public PaymentRequest findPaymentRequestById(final Long paymentRequestId)\n-            throws PaymentRequestNotFoundException {\n+    public PaymentRequest findPaymentRequestById(\n+        final Long paymentRequestId\n+    ) throws PaymentRequestNotFoundException {\n         return this.paymentRequestRepository\n-                .findById(paymentRequestId)\n-                .orElseThrow(() -> new PaymentRequestNotFoundException(paymentRequestId));\n+            .findById(paymentRequestId)\n+            .orElseThrow(\n+                () -> new PaymentRequestNotFoundException(paymentRequestId)\n+            );\n     }\n \n     /**\n      * Регистрация проведённых услуг.\n      *\n      * @param paymentPayload информация для регистрации усуги\n      * @return идентификатор выставленного счёта;\n-     * @throws PaymentRequestNotFoundException если не удалсться найти PaymentRequest\n+     * @throws PaymentRequestNotFoundException\n+     *      если не удалсться найти PaymentRequest\n      */\n-    public ResponseEntity<Long> requestPayment(final PaymentPayload paymentPayload)\n-            throws FeignException {\n-        final PaymentRequest paymentRequest =\n-                PaymentRequest.builder()\n-                        .serviceId(paymentPayload.getServiceId())\n-                        .citizenId(paymentPayload.getCitizenId())\n-                        .status(false)\n-                        .amount(paymentPayload.getAmount())\n-                        .build();\n-\n-        final Long taxId =\n-                this.taxIntegrationService.createTax(\n-                        paymentPayload.getServiceId(),\n-                        paymentPayload.getCitizenId(),\n-                        paymentPayload.getTaxAmount());\n+    public ResponseEntity<Long> requestPayment(\n+        final PaymentPayload paymentPayload\n+    ) throws FeignException {\n+        final PaymentRequest paymentRequest = PaymentRequest\n+            .builder()\n+            .serviceId(paymentPayload.getServiceId())\n+            .citizenId(paymentPayload.getCitizenId())\n+            .amount(paymentPayload.getAmount())\n+            .build();\n+\n+        final Long taxId = this.taxIntegrationService\n+            .createTax(\n+                paymentPayload.getServiceId(),\n+                paymentPayload.getCitizenId(),\n+                paymentPayload.getTaxAmount()\n+            );\n         paymentRequest.setTaxId(taxId);\n \n         logger.info(\"Tax with ID = {} has been created\", taxId);\n         logging.addLog(\n-                LogEntry.builder()\n-                        .service(\"bank\")\n-                        .created(new Date())\n-                        .message(\n-                                String.format(\n-                                        \"Tax with ID = %d has been created for serviceId = %d,\"\n-                                                + \" citizenId = %d\",\n-                                        taxId,\n-                                        paymentPayload.getServiceId(),\n-                                        paymentPayload.getCitizenId()))\n-                        .build());\n+            LogEntry\n+                .builder()\n+                .service(\"bank\")\n+                .created(new Date())\n+                .message(\n+                    String.format(\n+                        \"Tax with ID = %d has been created for serviceId = %d, citizenId = %d\",\n+                        taxId,\n+                        paymentPayload.getServiceId(),\n+                        paymentPayload.getCitizenId()\n+                    )\n+                )\n+                .build()\n+        );\n         this.paymentRequestRepository.save(paymentRequest);\n \n         return ResponseEntity.ok(paymentRequest.getPaymentRequestId());\n     }\n \n     /**\n-     * Payment of invoice and tax.\n+     * Оплата выставленного счёта.\n      *\n      * @param paymentRequestId идентификатор выставленного счёта\n      * @return http-ответ, в теле которого находится чек\n      * @throws FeignException если не удасться обратиться к Банковскому сервису\n-     * @throws PaymentRequestNotFoundException если не удалсться найти PaymentRequest\n+     * @throws PaymentRequestNotFoundException\n+     *      если не удалсться найти PaymentRequest\n      */\n-    public ResponseEntity<Transaction> payment(final Long paymentRequestId)\n-            throws FeignException, PaymentRequestNotFoundException {\n+    public ResponseEntity<Transaction> payment(\n+        final Long paymentRequestId\n+    ) throws FeignException, PaymentRequestNotFoundException {\n \n         final PaymentRequest paymentRequest;\n         final ResponseEntity<Transaction> response;\n@@ -112,23 +131,29 @@ public PaymentRequest findPaymentRequestById(final Long paymentRequestId)\n         Boolean isPaid = paymentRequest.getStatus();\n         if (Boolean.TRUE.equals(isPaid)) {\n             logger.error(\"Payment Request with ID = {} already paid!\", paymentRequestId);\n-            response = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n+            response = ResponseEntity\n+                .status(HttpStatus.BAD_REQUEST)\n+                .body(null);\n         } else {\n             paymentRequest.setStatus(true);\n-            final Transaction transaction =\n-                    Transaction.builder()\n-                            .paymentRequestId(paymentRequestId)\n-                            .amount(paymentRequest.getAmount())\n-                            .creationDate(new Date())\n-                            .build();\n+            final Transaction transaction = Transaction\n+                .builder()\n+                .paymentRequestId(paymentRequestId)\n+                .amount(paymentRequest.getAmount())\n+                .citizenId(paymentRequest.getCitizenId())\n+                .build();\n             this.taxIntegrationService.payTax(\n-                    paymentRequest.getTaxId(), transaction.getCreationDate());\n+                paymentRequest.getTaxId(),\n+                transaction.getCreationDate()\n+            );\n             logging.addLog(\n-                    LogEntry.builder()\n-                            .service(\"bank\")\n-                            .created(new Date())\n-                            .message(String.format(\"Tax paid for id = %d\", paymentRequestId))\n-                            .build());\n+                LogEntry\n+                    .builder()\n+                    .service(\"bank\")\n+                    .created(new Date())\n+                    .message(String.format(\"Tax paid for id = %d\", paymentRequestId))\n+                    .build()\n+            );\n \n             this.transactionRepository.save(transaction);\n             this.paymentRequestRepository.save(paymentRequest);\n@@ -138,16 +163,23 @@ public PaymentRequest findPaymentRequestById(final Long paymentRequestId)\n     }\n \n     /**\n-     * Checking the status of the issued invoice.\n+     * Возвращает статус оплаты выставленного счёта.\n      *\n-     * @param paymentId;\n-     * @return payment status;\n+     * @param paymentId идентификатор высталвенного счёта\n+     * @return статус оплаты\n      */\n     public Boolean isPaid(final Long paymentId) {\n         return findPaymentRequestById(paymentId).getStatus();\n     }\n \n+    /**\n+     * Возвращает все неоплаченные счета указанного гражданина.\n+     *\n+     * @param citizenId идентификатор гражданина\n+     * @return список выставленных счетов\n+     */\n     public List<PaymentRequest> getDebtPaymentRequests(final Long citizenId) {\n-        return this.paymentRequestRepository.findAllByCitizenIdAndStatus(citizenId, false);\n+        return this.paymentRequestRepository\n+            .findAllByCitizenIdAndStatus(citizenId, false);\n     }\n }"
  },
  {
    "sha": "57b250978c12f630ac49fb02e58bcd826b178e6b",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/FindDataTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -0,0 +1,56 @@\n+package nc.unc.cs.services.bank.services;\n+\n+import java.util.Optional;\n+import nc.unc.cs.services.bank.entities.PaymentRequest;\n+import nc.unc.cs.services.bank.exceptions.PaymentRequestNotFoundException;\n+import nc.unc.cs.services.bank.repositories.PaymentRequestRepository;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import static org.mockito.BDDMockito.given;\n+\n+@ExtendWith(SpringExtension.class)\n+public class FindDataTest {\n+    @Mock\n+    private PaymentRequestRepository paymentRequestRepository;\n+    @InjectMocks\n+    private BankService bankService;\n+\n+    @Test\n+    void findPaymentRequestByIdTest() {\n+        final PaymentRequest paymentRequest = PaymentRequest\n+            .builder()\n+            .paymentRequestId(1L)\n+            .amount(10000)\n+            .citizenId(111L)\n+            .serviceId(20L)\n+            .taxId(1L)\n+            .build();\n+\n+        given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n+            .willReturn(Optional.of(paymentRequest));\n+\n+        final PaymentRequest response =\n+            this.bankService.findPaymentRequestById(paymentRequest.getPaymentRequestId());\n+\n+        Assertions.assertEquals(\n+            paymentRequest.getPaymentRequestId(),\n+            response.getPaymentRequestId()\n+        );\n+    }\n+\n+    @Test\n+    void findPaymentRequestByIdExceptionTest() {\n+        given(this.paymentRequestRepository.findById(1L))\n+            .willThrow(new PaymentRequestNotFoundException(1L));\n+\n+\n+        Assertions.assertThrows(\n+            PaymentRequestNotFoundException.class,\n+            () -> this.bankService.findPaymentRequestById(1L)\n+        );\n+    }\n+}"
  },
  {
    "sha": "30c974c7a6e21a3c92077c8c5702acb73de409fe",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/PaymentTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -0,0 +1,80 @@\n+package nc.unc.cs.services.bank.services;\n+\n+import java.util.Date;\n+import java.util.Optional;\n+import nc.unc.cs.services.bank.entities.PaymentRequest;\n+import nc.unc.cs.services.bank.entities.Transaction;\n+import nc.unc.cs.services.bank.repositories.PaymentRequestRepository;\n+import nc.unc.cs.services.bank.repositories.TransactionRepository;\n+import nc.unc.cs.services.common.clients.logging.LoggingService;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+\n+@ExtendWith(SpringExtension.class)\n+public class PaymentTest {\n+    @Mock\n+    private PaymentRequestRepository paymentRequestRepository;\n+    @Mock\n+    private TransactionRepository transactionRepository;\n+    @Mock\n+    private LoggingService logging;\n+    @Mock\n+    private TaxIntegrationService taxIntegrationService;\n+    @InjectMocks\n+    private BankService bankService;\n+\n+    private PaymentRequest createPaymentRequest() {\n+        return PaymentRequest\n+            .builder()\n+            .paymentRequestId(1L)\n+            .amount(10000)\n+            .citizenId(111L)\n+            .serviceId(20L)\n+            .taxId(1L)\n+            .build();\n+    }\n+\n+    @Test\n+    void paymentCorrectTest() {\n+        final PaymentRequest paymentRequest = this.createPaymentRequest();\n+\n+        given(this.paymentRequestRepository.findById(paymentRequest.getPaymentRequestId()))\n+            .willReturn(Optional.of(paymentRequest));\n+\n+        given(\n+            this.taxIntegrationService.payTax(\n+                paymentRequest.getTaxId(),\n+                new Date()\n+            ))\n+            .willReturn(ResponseEntity.ok(1L));\n+\n+        given(this.logging.addLog(any()))\n+            .willAnswer(invocation -> invocation.getArgument(0));\n+        given(this.transactionRepository.save(any()))\n+            .willAnswer(invocation -> invocation.getArgument(0));\n+        given(this.paymentRequestRepository.save(any()))\n+            .willAnswer(invocation -> invocation.getArgument(0));\n+\n+        final ResponseEntity<Transaction> response =\n+            this.bankService.payment(paymentRequest.getPaymentRequestId());\n+\n+        Assertions.assertAll(\n+            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+            () -> Assertions.assertEquals(paymentRequest.getAmount(), response.getBody().getAmount()),\n+            () -> Assertions.assertEquals(\n+                paymentRequest.getPaymentRequestId(),\n+                response.getBody().getPaymentRequestId()\n+            ),\n+            () -> Assertions.assertEquals(paymentRequest.getCitizenId(), response.getBody().getCitizenId()),\n+            () -> Assertions.assertTrue(paymentRequest.getStatus())\n+        );\n+    }\n+}"
  },
  {
    "sha": "35cedaba475984940864eac8db2f5256526c9b5d",
    "filename": "services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/bank/src/test/java/nc/unc/cs/services/bank/services/RequestPaymentTestTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -0,0 +1,61 @@\n+package nc.unc.cs.services.bank.services;\n+\n+import nc.unc.cs.services.bank.repositories.PaymentRequestRepository;\n+import nc.unc.cs.services.common.clients.bank.PaymentPayload;\n+import nc.unc.cs.services.common.clients.logging.LoggingService;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+\n+@ExtendWith(SpringExtension.class)\n+class RequestPaymentTestTest {\n+    @Mock\n+    private PaymentRequestRepository paymentRequestRepository;\n+    @Mock\n+    private LoggingService logging;\n+    @Mock\n+    private TaxIntegrationService taxIntegrationService;\n+    @InjectMocks\n+    private BankService bankService;\n+\n+    private PaymentPayload createPaymentPayload() {\n+        return PaymentPayload\n+            .builder()\n+            .serviceId(20L)\n+            .citizenId(111L)\n+            .amount(10000)\n+            .taxAmount(1000)\n+            .build();\n+    }\n+\n+    @Test\n+    void requestPaymentCorrectTest() {\n+        final Long testTaxId = 1L;\n+        final PaymentPayload paymentPayload = this.createPaymentPayload();\n+\n+        given(this.taxIntegrationService\n+            .createTax(\n+                paymentPayload.getServiceId(),\n+                paymentPayload.getCitizenId(),\n+                paymentPayload.getTaxAmount()\n+            ))\n+            .willReturn(testTaxId);\n+\n+        given(this.logging.addLog(any()))\n+            .willAnswer(invocation -> invocation.getArgument(0));\n+        given(this.paymentRequestRepository.save(any()))\n+            .willAnswer(invocation -> invocation.getArgument(0));\n+\n+        ResponseEntity<Long> response = this.bankService.requestPayment(paymentPayload);\n+        System.out.println(response);\n+\n+        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());\n+    }\n+}"
  },
  {
    "sha": "ff58f6487079fa60b1cc30df9ae2b7fddb35ac11",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/controllers/ExceptionController.java",
    "status": "modified",
    "additions": 39,
    "deletions": 1,
    "changes": 40,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/ExceptionController.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/ExceptionController.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/ExceptionController.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,6 +1,10 @@\n package nc.unc.cs.services.communal.controllers;\n \n import feign.FeignException;\n+import nc.unc.cs.services.communal.exceptions.PropertyNotFoundException;\n+import nc.unc.cs.services.communal.exceptions.PropertyTaxNotFoundException;\n+import nc.unc.cs.services.communal.exceptions.PropertyTaxValueNotFoundException;\n+import nc.unc.cs.services.communal.exceptions.UtilitiesPriceListNotFoundException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n@@ -16,8 +20,42 @@\n     private static final String SERVICE_UNAVAILABLE_MESSAGE = \"Operation failed!\";\n \n     @ExceptionHandler(value = {FeignException.class})\n-    public ResponseEntity<Object> serviceUnavailableException(final FeignException fe) {\n+    public ResponseEntity<Object> serviceUnavailableException(\n+        final FeignException fe\n+    ) {\n         LOGGER.error(SERVICE_UNAVAILABLE_MESSAGE, fe);\n         return new ResponseEntity<>(SERVICE_UNAVAILABLE_MESSAGE, HttpStatus.SERVICE_UNAVAILABLE);\n     }\n+\n+    @ExceptionHandler(value = {PropertyNotFoundException.class})\n+    public ResponseEntity<Object> propertyNotFoundException(\n+        final PropertyNotFoundException pe\n+    ) {\n+        LOGGER.error(\"Property Not Found!\", pe);\n+        return new ResponseEntity<>(pe.getMessage(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @ExceptionHandler(value = {PropertyTaxNotFoundException.class})\n+    public ResponseEntity<Object> propertyTaxNotFoundException(\n+        final PropertyTaxNotFoundException pt\n+    ) {\n+        LOGGER.error(\"Property Tax Not Found!\", pt);\n+        return new ResponseEntity<>(pt.getMessage(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @ExceptionHandler(value = {PropertyTaxValueNotFoundException.class})\n+    public ResponseEntity<Object> propertyTaxValueNotFoundException(\n+        final PropertyTaxValueNotFoundException ptv\n+    ) {\n+        LOGGER.error(\"Property Tax Value Not Found!\", ptv);\n+        return new ResponseEntity<>(ptv.getMessage(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @ExceptionHandler(value = {UtilitiesPriceListNotFoundException.class})\n+    public ResponseEntity<Object> propertyTaxValueNotFoundException(\n+        final UtilitiesPriceListNotFoundException upe\n+    ) {\n+        LOGGER.error(\"Utilities Price List Not Found!\", upe);\n+        return new ResponseEntity<>(upe.getMessage(), HttpStatus.BAD_REQUEST);\n+    }\n }"
  },
  {
    "sha": "34912887cde933840a74325e2ab61d8555da4fe6",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/controllers/PropertyController.java",
    "status": "modified",
    "additions": 18,
    "deletions": 16,
    "changes": 34,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/PropertyController.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/PropertyController.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/PropertyController.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -7,34 +7,36 @@\n import nc.unc.cs.services.communal.services.RegistrationService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.stereotype.Controller;\n import org.springframework.validation.annotation.Validated;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n \n-@Controller\n+@RestController\n @RequestMapping(\"communal/property\")\n @Tag(name = \"Property Api\")\n public class PropertyController {\n \n-  private final RegistrationService registrationService;\n+    private final RegistrationService registrationService;\n \n-  @Autowired\n-  public PropertyController(final RegistrationService registrationService) {\n-    this.registrationService = registrationService;\n-  }\n+    @Autowired\n+    public PropertyController(final RegistrationService registrationService) {\n+        this.registrationService = registrationService;\n+    }\n \n-  @PostMapping(produces = \"application/json\", consumes = \"application/json\")\n-  public ResponseEntity<Property> addCitizensProperty(\n-      @Validated @RequestBody final CreationProperty newProperty) {\n-    return this.registrationService.addCitizensProperty(newProperty);\n-  }\n+    @PostMapping(produces = \"application/json\", consumes = \"application/json\")\n+    public ResponseEntity<Property> addCitizensProperty(\n+        @Validated @RequestBody final CreationProperty newProperty) {\n+        return this.registrationService.addCitizensProperty(newProperty);\n+    }\n \n-  @GetMapping(value = \"property/citizen/{citizenId}\", produces = \"application/json\")\n-  public List<Property> getPropertiesByCitizenId(@PathVariable(\"citizenId\") final Long citizenId) {\n-    return this.registrationService.getPropertiesByCitizenId(citizenId);\n-  }\n+    @GetMapping(value = \"citizen/{citizenId}\", produces = \"application/json\")\n+    public List<Property> getPropertiesByCitizenId(\n+        @PathVariable(\"citizenId\") final Long citizenId\n+    ) {\n+        return this.registrationService.getPropertiesByCitizenId(citizenId);\n+    }\n }"
  },
  {
    "sha": "24c7cc05b13f4b9db8801f8f031116dc5a6a92ab",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/controllers/payloads/UtilitiesPayload.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/payloads/UtilitiesPayload.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/payloads/UtilitiesPayload.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/controllers/payloads/UtilitiesPayload.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -2,9 +2,19 @@\n \n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n \n @Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@ToString\n+@EqualsAndHashCode\n+@Builder\n public class UtilitiesPayload {\n     @NotNull(message = \"Incorrect property ID\")\n     @Min(1L)"
  },
  {
    "sha": "3b53b26a0ae726add8f42bb6171ea84e192503f2",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/Property.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Property.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Property.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Property.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -62,14 +62,15 @@\n \n     @Builder\n     public Property(\n-            final Long propertyId,\n-            final String region,\n-            final String city,\n-            final String street,\n-            final String house,\n-            final String apartment,\n-            final Integer apartmentSize,\n-            final Long citizenId) {\n+        final Long propertyId,\n+        final String region,\n+        final String city,\n+        final String street,\n+        final String house,\n+        final String apartment,\n+        final Integer apartmentSize,\n+        final Long citizenId\n+    ) {\n         this.propertyId = propertyId;\n         this.region = region.trim().toUpperCase();\n         this.city = city.trim().toUpperCase();"
  },
  {
    "sha": "3398bb735b9a89c554114c418ee6c9cbcd1d8e19",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTax.java",
    "status": "modified",
    "additions": 23,
    "deletions": 5,
    "changes": 28,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTax.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTax.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTax.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,7 +1,5 @@\n package nc.unc.cs.services.communal.entities;\n \n-import com.fasterxml.jackson.annotation.JsonFormat;\n-import java.util.Date;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -11,21 +9,21 @@\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import java.util.Date;\n+import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n-import lombok.NoArgsConstructor;\n import lombok.ToString;\n \n @Entity\n @Data\n @AllArgsConstructor\n-@NoArgsConstructor\n @ToString\n @EqualsAndHashCode\n-@Builder(toBuilder = true)\n public class PropertyTax {\n+\n     @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long propertyTaxId;\n@@ -59,4 +57,24 @@\n     @Min(1L)\n     @Column(updatable = false, nullable = false)\n     private Long citizenId;\n+\n+    @Builder\n+    public PropertyTax(\n+        final Integer taxAmount,\n+        final Long propertyId,\n+        final Long paymentRequestId,\n+        final Long citizenId\n+    ) {\n+        this.taxAmount = taxAmount;\n+        this.isPaid = false;\n+        this.date = new Date();\n+        this.propertyId = propertyId;\n+        this.paymentRequestId = paymentRequestId;\n+        this.citizenId = citizenId;\n+    }\n+\n+    public PropertyTax() {\n+        this.isPaid = false;\n+        this.date = new Date();\n+    }\n }"
  },
  {
    "sha": "6821011b828d136e62c0fbc377b90ae201baebc4",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTaxValue.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTaxValue.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTaxValue.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/PropertyTaxValue.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -44,10 +44,11 @@\n \n     @Builder\n     public PropertyTaxValue(\n-            final Long propertyTaxValueId,\n-            final String region,\n-            final Integer pricePerSquareMeter,\n-            final Integer cadastralValue) {\n+        final Long propertyTaxValueId,\n+        final String region,\n+        final Integer pricePerSquareMeter,\n+        final Integer cadastralValue\n+    ) {\n         this.propertyTaxValueId = propertyTaxValueId;\n         this.region = region.trim().toUpperCase();\n         this.pricePerSquareMeter = pricePerSquareMeter;"
  },
  {
    "sha": "b163cecd32edca3cd0a61c04d4c4b3d5a6b55ad5",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/Registration.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Registration.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Registration.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/Registration.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -61,14 +61,15 @@\n \n     @Builder\n     public Registration(\n-            final Long registrationId,\n-            final String region,\n-            final String city,\n-            final String street,\n-            final String house,\n-            final String apartment,\n-            final Boolean isActive,\n-            final Long citizenId) {\n+        final Long registrationId,\n+        final String region,\n+        final String city,\n+        final String street,\n+        final String house,\n+        final String apartment,\n+        final Boolean isActive,\n+        final Long citizenId\n+    ) {\n         this.registrationId = registrationId;\n         this.region = region.trim().toUpperCase();\n         this.city = city.trim().toUpperCase();"
  },
  {
    "sha": "093fb245abb1bf4bf0b751d008e19b4711b31d08",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilitiesPriceList.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilitiesPriceList.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilitiesPriceList.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilitiesPriceList.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -48,11 +48,12 @@\n \n     @Builder\n     public UtilitiesPriceList(\n-            final Long utilitiesPriceListId,\n-            final String region,\n-            final Integer coldWaterPrice,\n-            final Integer hotWaterPrice,\n-            final Integer electricityPrice) {\n+        final Long utilitiesPriceListId,\n+        final String region,\n+        final Integer coldWaterPrice,\n+        final Integer hotWaterPrice,\n+        final Integer electricityPrice\n+    ) {\n         this.utilitiesPriceListId = utilitiesPriceListId;\n         this.region = region.trim().toUpperCase();\n         this.coldWaterPrice = coldWaterPrice;"
  },
  {
    "sha": "f4bdab368fd9ea446381730a286f6841e22fe8b6",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilityBill.java",
    "status": "modified",
    "additions": 24,
    "deletions": 3,
    "changes": 27,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilityBill.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilityBill.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/entities/UtilityBill.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,7 +1,5 @@\n package nc.unc.cs.services.communal.entities;\n \n-import com.fasterxml.jackson.annotation.JsonFormat;\n-import java.util.Date;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -11,6 +9,8 @@\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import java.util.Date;\n+import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -24,8 +24,8 @@\n @NoArgsConstructor\n @ToString\n @EqualsAndHashCode\n-@Builder\n public class UtilityBill {\n+\n     @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long utilityBillId;\n@@ -89,4 +89,25 @@\n     @Min(1L)\n     @Column(nullable = false, updatable = false)\n     private Long citizenId;\n+\n+    @Builder\n+    public UtilityBill(\n+        final Integer coldWater,\n+        final Integer hotWater,\n+        final Integer electricity,\n+        final Integer coldWaterAmount,\n+        final Integer hotWaterAmount,\n+        final Integer electricityAmount,\n+        final Long propertyId\n+    ) {\n+        this.date = new Date();\n+        this.isPaid = false;\n+        this.coldWater = coldWater;\n+        this.hotWater = hotWater;\n+        this.electricity = electricity;\n+        this.coldWaterAmount = coldWaterAmount;\n+        this.hotWaterAmount = hotWaterAmount;\n+        this.electricityAmount = electricityAmount;\n+        this.propertyId = propertyId;\n+    }\n }"
  },
  {
    "sha": "a465a26e9eaa383486f71f28bd230bd7b3021dfc",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/PropertyNotFoundException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/PropertyNotFoundException.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/PropertyNotFoundException.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/PropertyNotFoundException.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -0,0 +1,7 @@\n+package nc.unc.cs.services.communal.exceptions;\n+\n+public class PropertyNotFoundException extends RuntimeException {\n+    public PropertyNotFoundException(final Long id) {\n+        super(\"Property with ID = \" + id + \" not found!\");\n+    }\n+}"
  },
  {
    "sha": "f202a63546b95085af73bf57bd54015d4d8530a3",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/UtilitiesPriceListNotFoundException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/UtilitiesPriceListNotFoundException.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/UtilitiesPriceListNotFoundException.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/exceptions/UtilitiesPriceListNotFoundException.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -0,0 +1,7 @@\n+package nc.unc.cs.services.communal.exceptions;\n+\n+public class UtilitiesPriceListNotFoundException extends RuntimeException {\n+    public UtilitiesPriceListNotFoundException(final String region) {\n+        super(\"UtilitiesPriceList with region = \" + region + \" not found!\");\n+    }\n+}"
  },
  {
    "sha": "e271f6af0655a2f0f351ecc0f531ceeed46da77c",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/services/CommunalService.java",
    "status": "modified",
    "additions": 137,
    "deletions": 85,
    "changes": 222,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/services/CommunalService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/services/CommunalService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/services/CommunalService.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,14 +1,13 @@\n package nc.unc.cs.services.communal.services;\n \n-import java.util.Date;\n import java.util.List;\n-import nc.unc.cs.services.common.clients.bank.BankService;\n-import nc.unc.cs.services.common.clients.bank.PaymentPayload;\n import nc.unc.cs.services.communal.controllers.payloads.CreationUtilitiesPriceList;\n import nc.unc.cs.services.communal.controllers.payloads.UtilitiesPayload;\n import nc.unc.cs.services.communal.entities.Property;\n import nc.unc.cs.services.communal.entities.UtilitiesPriceList;\n import nc.unc.cs.services.communal.entities.UtilityBill;\n+import nc.unc.cs.services.communal.exceptions.PropertyNotFoundException;\n+import nc.unc.cs.services.communal.exceptions.UtilitiesPriceListNotFoundException;\n import nc.unc.cs.services.communal.repositories.PropertyRepository;\n import nc.unc.cs.services.communal.repositories.UtilitiesPriceListRepository;\n import nc.unc.cs.services.communal.repositories.UtilityBillRepository;\n@@ -23,38 +22,95 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(CommunalService.class);\n \n+    /** Идентификатор сервиса, поставляеющего услугу. */\n+    public static final Long SERVICE_ID = 21L;\n+    /** Налоговый процент. */\n+    public static final Integer TAX_PERCENT = 10;\n+\n     private final PropertyRepository propertyRepository;\n     private final UtilityBillRepository utilityBillRepository;\n     private final UtilitiesPriceListRepository utilitiesPriceListRepository;\n-    private final BankService bankService;\n+    private final BankIntegrationService bankIntegrationService;\n \n     @Autowired\n     public CommunalService(\n-            final PropertyRepository propertyRepository,\n-            final UtilityBillRepository utilityBillRepository,\n-            final UtilitiesPriceListRepository utilitiesPriceListRepository,\n-            final BankService bankService) {\n+        final PropertyRepository propertyRepository,\n+        final UtilityBillRepository utilityBillRepository,\n+        final UtilitiesPriceListRepository utilitiesPriceListRepository,\n+        final BankIntegrationService bankIntegrationService\n+    ) {\n         this.propertyRepository = propertyRepository;\n         this.utilityBillRepository = utilityBillRepository;\n         this.utilitiesPriceListRepository = utilitiesPriceListRepository;\n-        this.bankService = bankService;\n+        this.bankIntegrationService = bankIntegrationService;\n+    }\n+\n+    /**\n+     * Возвращает прейскурант для рассчёта стоимости\n+     *          затраченных коммунальных услуг.\n+     *\n+     * @param region наименование региона\n+     * @return прейскурант\n+     * @throws UtilitiesPriceListNotFoundException если не удасться найти\n+     *          прейскурант по заданному региону\n+     */\n+    public UtilitiesPriceList findPriceListByRegion(\n+        final String region\n+    ) {\n+        final UtilitiesPriceList priceList =\n+            this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(region);\n+        if (priceList == null) {\n+            throw new UtilitiesPriceListNotFoundException(region);\n+        }\n+        return priceList;\n+    }\n+\n+    /**\n+     * Возвращает данные о объект недвижимость.\n+     *\n+     * @param propertyId идентификатор недвижимости\n+     * @return объект недвижимость\n+     * @throws PropertyNotFoundException если не удасться найти недвижимость\n+     *          с заданным идентификатором\n+     */\n+    public Property findPropertyById(final Long propertyId) {\n+        final Property property = this.propertyRepository\n+            .findPropertyByPropertyId(propertyId);\n+        if (property == null) {\n+            throw new PropertyNotFoundException(propertyId);\n+        }\n+        return property;\n+    }\n+\n+    /**\n+     * Возвращает все прейскуранты из БД.\n+     *\n+     * @return список прейскурантов\n+     */\n+    public List<UtilitiesPriceList> getAllUtilitiesPriceList() {\n+        return this.utilitiesPriceListRepository.findAll();\n     }\n \n-    // стоит ли добавлять и обнавлять прейскурант в одной функции???\n+    /**\n+     * Добовляет/Обнавляет прейскурант.\n+     *\n+     * @param newPriceList информация о прейскуранте\n+     * @return http-ответ, в теле которого находится сохранённый прейскурант\n+     */\n     public ResponseEntity<UtilitiesPriceList> addUtilitiesPriceList(\n-            final CreationUtilitiesPriceList newPriceList) {\n+        final CreationUtilitiesPriceList newPriceList\n+    ) {\n         final ResponseEntity<UtilitiesPriceList> response;\n-        final UtilitiesPriceList utilitiesPriceList =\n-                UtilitiesPriceList.builder()\n-                        .region(newPriceList.getRegion())\n-                        .coldWaterPrice(newPriceList.getColdWaterPrice())\n-                        .hotWaterPrice(newPriceList.getHotWaterPrice())\n-                        .electricityPrice(newPriceList.getElectricityPrice())\n-                        .build();\n-        final UtilitiesPriceList lastPriceList =\n-                this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(\n-                        newPriceList.getRegion());\n-        if (lastPriceList == null) {\n+        final UtilitiesPriceList utilitiesPriceList = UtilitiesPriceList\n+            .builder()\n+            .region(newPriceList.getRegion())\n+            .coldWaterPrice(newPriceList.getColdWaterPrice())\n+            .hotWaterPrice(newPriceList.getHotWaterPrice())\n+            .electricityPrice(newPriceList.getElectricityPrice())\n+            .build();\n+        final UtilitiesPriceList lastPriceList = // пришлось использовать метод из напрямую репозитория\n+            this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(newPriceList.getRegion());\n+        if (lastPriceList == null) { // пришлось сделать так, а не через catch\n             this.utilitiesPriceListRepository.save(utilitiesPriceList);\n             logger.info(\"UtilitiesPriceList has been created!\");\n \n@@ -72,77 +128,73 @@ public CommunalService(\n         return response;\n     }\n \n-    public List<UtilitiesPriceList> getAllUtilitiesPriceList() {\n-        return this.utilitiesPriceListRepository.findAll();\n-    }\n-\n     /**\n-     * Создание квитанции на затраченные коммунальные услуги\n+     * Рассчитывает коммунальные затраты и вписывает их в квитанцию.\n      *\n-     * @param utilitiesPayload входные данные с идентификатором имущества, и кол-вом затраченных\n-     *     коммунальных услуг\n-     * @return Ответ со статусм 200 и созданная квитанция\n+     * @param region наименование региона.\n+     * @param utilitiesPayload входные данные с идентификатором имущества,\n+     *          и кол-вом затраченных коммунальных услуг\n+     * @return квитанция с заполненными данными о коммунальных затратах\n      */\n-    public ResponseEntity<UtilityBill> calculateUtilityBill(UtilitiesPayload utilitiesPayload) {\n-        UtilityBill utilityBill = new UtilityBill();\n-\n-        Property property =\n-                this.propertyRepository.findPropertyByPropertyId(utilitiesPayload.getPropertyId());\n-        if (property == null) {\n-            logger.error(\"Property with ID = {} not found\", utilitiesPayload.getPropertyId());\n-            return ResponseEntity.status(400).body(utilityBill);\n-        }\n+    public UtilityBill calculateUtilityCosts(\n+        final String region,\n+        final UtilitiesPayload utilitiesPayload\n+    ) {\n+        final UtilitiesPriceList utilitiesPriceList = this.findPriceListByRegion(region);\n+        final UtilityBill utilityBill = UtilityBill\n+            .builder()\n+            .coldWater(utilitiesPayload.getColdWater())\n+            .hotWater(utilitiesPayload.getHotWater())\n+            .electricity(utilitiesPayload.getElectricity())\n+            .propertyId(utilitiesPayload.getPropertyId())\n+            .coldWaterAmount(utilitiesPayload.getColdWater() * utilitiesPriceList.getColdWaterPrice())\n+            .hotWaterAmount(utilitiesPayload.getHotWater() * utilitiesPriceList.getHotWaterPrice())\n+            .electricityAmount(utilitiesPayload.getElectricity() * utilitiesPriceList.getElectricityPrice())\n+            .build();\n+        utilityBill.setUtilityAmount(\n+            utilityBill.getColdWaterAmount()\n+                + utilityBill.getHotWaterAmount()\n+                + utilityBill.getElectricityAmount());\n \n-        UtilitiesPriceList utilitiesPriceList =\n-                this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(\n-                        property.getRegion());\n-        if (utilitiesPriceList == null) { // сделать в скрипте общий прайс-лист и юзать его, если не\n-            // находится региональный\n-            logger.error(\"UtilitiesPriceList with region {} not found\", property.getRegion());\n-            return ResponseEntity.status(503).body(utilityBill);\n-        }\n+        logger.info(\"SSS Initial Utility Bill: {}\", utilityBill);\n+        return utilityBill;\n+    }\n \n+    /**\n+     * Создание квитанцию на затраченные коммунальные услуги.\n+     *\n+     * @param utilitiesPayload входные данные с идентификатором имущества,\n+     *          и кол-вом затраченных коммунальных услуг\n+     * @return ответ со статусм 200 и созданная квитанция\n+     */\n+    public ResponseEntity<UtilityBill> calculateUtilityBill(\n+        final UtilitiesPayload utilitiesPayload\n+    ) {\n+        final Property property =\n+            this.findPropertyById(utilitiesPayload.getPropertyId());\n+        final UtilityBill utilityBill =\n+            this.calculateUtilityCosts(property.getRegion(), utilitiesPayload);\n         utilityBill.setCitizenId(property.getCitizenId());\n-        utilityBill.setPropertyId(property.getPropertyId());\n-        utilityBill.setDate(new Date());\n-        utilityBill.setColdWater(utilitiesPayload.getColdWater());\n-        utilityBill.setHotWater(utilitiesPayload.getHotWater());\n-        utilityBill.setElectricity(utilitiesPayload.getElectricity());\n-        utilityBill.setIsPaid(false);\n-        utilityBill.setColdWaterAmount(\n-                utilitiesPayload.getColdWater() * utilitiesPriceList.getHotWaterPrice());\n-        utilityBill.setHotWaterAmount(\n-                utilitiesPayload.getHotWater() * utilitiesPriceList.getHotWaterPrice());\n-        utilityBill.setElectricityAmount(\n-                utilitiesPayload.getElectricity() * utilitiesPriceList.getElectricityPrice());\n-        utilityBill.setUtilityAmount(\n-                utilityBill.getColdWaterAmount()\n-                        + utilityBill.getHotWaterAmount()\n-                        + utilityBill.getElectricityAmount());\n-\n-        try {\n-            Long paymentRequestId =\n-                    this.bankService\n-                            .requestPayment(\n-                                    new PaymentPayload(\n-                                            21L,\n-                                            utilityBill.getCitizenId(),\n-                                            utilityBill.getUtilityAmount(),\n-                                            utilityBill.getUtilityAmount() / 10))\n-                            .getBody();\n-            utilityBill.setPaymentRequestId(paymentRequestId);\n-            this.utilityBillRepository.save(utilityBill);\n-\n-            logger.info(\"Utility Bill has been created\");\n-            return ResponseEntity.ok(utilityBill);\n-        } catch (Exception e) {\n-            logger.error(\"Failed to create PropertyTax!\");\n-            e.printStackTrace();\n-\n-            return ResponseEntity.status(503).body(utilityBill);\n-        }\n+        final Long paymentRequestId =\n+            this.bankIntegrationService\n+                .bankRequest(\n+                    SERVICE_ID,\n+                    utilityBill.getCitizenId(),\n+                    utilityBill.getUtilityAmount(),\n+                    utilityBill.getUtilityAmount() / TAX_PERCENT\n+                );\n+        utilityBill.setPaymentRequestId(paymentRequestId);\n+        this.utilityBillRepository.save(utilityBill);\n+\n+        logger.info(\"Utility Bill has been created\");\n+        return ResponseEntity.ok(utilityBill);\n     }\n \n+    /**\n+     * Возвращает все коммунальные квитанции.\n+     *\n+     * @return список коммунальных квитанций\n+     */\n     public List<UtilityBill> getAllUtilityBills() {\n         return this.utilityBillRepository.findAll();\n     }"
  },
  {
    "sha": "e1c76e06dac3726a46e343d6c954b031e9e6f307",
    "filename": "services/communal/src/main/java/nc/unc/cs/services/communal/services/PropertyTaxService.java",
    "status": "modified",
    "additions": 139,
    "deletions": 109,
    "changes": 248,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/services/PropertyTaxService.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/main/java/nc/unc/cs/services/communal/services/PropertyTaxService.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/main/java/nc/unc/cs/services/communal/services/PropertyTaxService.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,12 +1,14 @@\n package nc.unc.cs.services.communal.services;\n \n-import feign.FeignException;\n-import java.util.Date;\n import java.util.List;\n+import feign.FeignException;\n import nc.unc.cs.services.communal.controllers.payloads.CreationPropertyTaxValue;\n import nc.unc.cs.services.communal.entities.Property;\n import nc.unc.cs.services.communal.entities.PropertyTax;\n import nc.unc.cs.services.communal.entities.PropertyTaxValue;\n+import nc.unc.cs.services.communal.exceptions.PropertyNotFoundException;\n+import nc.unc.cs.services.communal.exceptions.PropertyTaxNotFoundException;\n+import nc.unc.cs.services.communal.exceptions.PropertyTaxValueNotFoundException;\n import nc.unc.cs.services.communal.repositories.PropertyRepository;\n import nc.unc.cs.services.communal.repositories.PropertyTaxRepository;\n import nc.unc.cs.services.communal.repositories.PropertyTaxValueRepository;\n@@ -20,7 +22,7 @@\n @Service\n public class PropertyTaxService {\n     /** Логгер. */\n-    private static final Logger logger = LoggerFactory.getLogger(PropertyTaxService.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyTaxService.class);\n \n     /** Налоговый процент от стоимости платежа. */\n     public static final Integer TAX_PERCENT = 10;\n@@ -48,10 +50,11 @@\n      */\n     @Autowired\n     public PropertyTaxService(\n-            final PropertyRepository propertyRepository,\n-            final PropertyTaxRepository propertyTaxRepository,\n-            final PropertyTaxValueRepository propertyTaxValueRepository,\n-            final BankIntegrationService bankIntegrationService) {\n+        final PropertyRepository propertyRepository,\n+        final PropertyTaxRepository propertyTaxRepository,\n+        final PropertyTaxValueRepository propertyTaxValueRepository,\n+        final BankIntegrationService bankIntegrationService\n+    ) {\n         this.propertyRepository = propertyRepository;\n         this.propertyTaxRepository = propertyTaxRepository;\n         this.propertyTaxValueRepository = propertyTaxValueRepository;\n@@ -65,27 +68,33 @@ public PropertyTaxService(\n      * @return http-ответ, в теле которого находится созданный прейскурант\n      */\n     public ResponseEntity<PropertyTaxValue> addPropertyTaxValue(\n-            final CreationPropertyTaxValue newPropertyTaxValue) {\n-        final PropertyTaxValue propertyTaxValue =\n-                PropertyTaxValue.builder()\n-                        .region(newPropertyTaxValue.getRegion())\n-                        .pricePerSquareMeter(newPropertyTaxValue.getPricePerSquareMeter())\n-                        .cadastralValue(newPropertyTaxValue.getCadastralValue())\n-                        .build();\n+        final CreationPropertyTaxValue newPropertyTaxValue\n+    ) {\n+        final PropertyTaxValue propertyTaxValue = PropertyTaxValue\n+            .builder()\n+            .region(newPropertyTaxValue.getRegion())\n+            .pricePerSquareMeter(newPropertyTaxValue.getPricePerSquareMeter())\n+            .cadastralValue(newPropertyTaxValue.getCadastralValue())\n+            .build();\n \n         final ResponseEntity<PropertyTaxValue> response;\n         final PropertyTaxValue lastPropertyTaxValue =\n-                this.propertyTaxValueRepository.findPropertyTaxValueByRegion(\n-                        propertyTaxValue.getRegion());\n+            this.propertyTaxValueRepository\n+                .findPropertyTaxValueByRegion(\n+                    propertyTaxValue.getRegion());\n         if (lastPropertyTaxValue == null) {\n             this.propertyTaxValueRepository.save(propertyTaxValue);\n-            logger.info(\"Property Tax Value has been created.\");\n+            LOGGER.info(\"Property Tax Value has been created.\");\n             response = ResponseEntity.ok(propertyTaxValue);\n         } else {\n-            lastPropertyTaxValue.setCadastralValue(propertyTaxValue.getCadastralValue());\n-            lastPropertyTaxValue.setPricePerSquareMeter(propertyTaxValue.getPricePerSquareMeter());\n+            lastPropertyTaxValue\n+                .setCadastralValue(propertyTaxValue\n+                    .getCadastralValue());\n+            lastPropertyTaxValue\n+                .setPricePerSquareMeter(propertyTaxValue\n+                    .getPricePerSquareMeter());\n             this.propertyTaxValueRepository.save(lastPropertyTaxValue);\n-            logger.info(\"PropertyTaxValue has been updated.\");\n+            LOGGER.info(\"PropertyTaxValue has been updated.\");\n             response = ResponseEntity.ok(lastPropertyTaxValue);\n         }\n         return response;\n@@ -107,8 +116,8 @@ public PropertyTaxService(\n      * @return Налоговая квитанция\n      */\n     public PropertyTaxValue getPropertyTaxValueById(final Long propertyTaxValueId) {\n-        return this.propertyTaxValueRepository.findPropertyTaxValueByPropertyTaxValueId(\n-                propertyTaxValueId);\n+        return this.propertyTaxValueRepository\n+            .findPropertyTaxValueByPropertyTaxValueId(propertyTaxValueId);\n     }\n \n     /**\n@@ -118,8 +127,8 @@ public PropertyTaxValue getPropertyTaxValueById(final Long propertyTaxValueId) {\n      * @return Налоговая квитанция\n      */\n     public PropertyTaxValue getPropertyTaxValueByRegion(final String region) {\n-        return this.propertyTaxValueRepository.findPropertyTaxValueByRegion(\n-                region.trim().toUpperCase());\n+        return this.propertyTaxValueRepository\n+            .findPropertyTaxValueByRegion(region.trim().toUpperCase());\n     }\n \n     /**\n@@ -131,109 +140,119 @@ public PropertyTaxValue getPropertyTaxValueByRegion(final String region) {\n      * @return расчитанный налог\n      */\n     public Integer calculatePropertyTaxAmount(\n-            final Double apartmentSize,\n-            final Double pricePerSquareMeter,\n-            final Double cadastralValue) {\n-        return (int)\n-                (apartmentSize\n-                        * pricePerSquareMeter\n-                        / PERCENT_DIVISOR\n-                        * (cadastralValue / PERCENT_DIVISOR));\n+        final Double apartmentSize,\n+        final Double pricePerSquareMeter,\n+        final Double cadastralValue\n+    ) {\n+        return\n+            (int) (apartmentSize * pricePerSquareMeter / PERCENT_DIVISOR\n+                * (cadastralValue / PERCENT_DIVISOR));\n+    }\n+\n+    /**\n+     * Возвращает прайс-лист для имущественного расчёта налога.\n+     *\n+     * @param region наименование региона\n+     * @return прайс-лист\n+     * @throws PropertyTaxValueNotFoundException если не удасться найти\n+     *          прайс-лист с заданным регионом\n+     */\n+    public PropertyTaxValue findPropertyTaxValueByRegion(\n+        final String region\n+    ) throws PropertyTaxValueNotFoundException {\n+        final PropertyTaxValue propertyTaxValue =\n+            this.propertyTaxValueRepository.findPropertyTaxValueByRegion(region);\n+        if (propertyTaxValue == null) {\n+            throw new PropertyTaxValueNotFoundException(region);\n+        }\n+        return propertyTaxValue;\n+    }\n+\n+    /**\n+     * Возвращает данные о объект недвижимость.\n+     *\n+     * @param propertyId идентификатор недвижимости\n+     * @return объект недвижимость\n+     * @throws PropertyNotFoundException если не удасться найти недвижимость\n+     *          с заданным идентификатором\n+     */\n+    public Property findPropertyById(\n+        final Long propertyId\n+    ) throws PropertyNotFoundException {\n+        final Property property =\n+            this.propertyRepository.findPropertyByPropertyId(propertyId);\n+        if (property == null) {\n+            throw new PropertyNotFoundException(propertyId);\n+        }\n+        return property;\n     }\n \n     /**\n      * Создаёт налог на недвижимость.\n      *\n      * @param propertyId идетнтификатор недвижимости\n      * @return http-ответ, в теле которого находится налоговая квитанция\n-     * @throws NullPointerException если не удасться найти недвижимостьея или прейскурант\n+     * @throws FeignException если не удасться обратиться к Банковскому сервису\n      */\n-    public ResponseEntity<PropertyTax> calculatePropertyTax(final Long propertyId) {\n-        ResponseEntity<PropertyTax> response;\n-        try {\n-            final Property property = this.propertyRepository.findPropertyByPropertyId(propertyId);\n-            final PropertyTaxValue propertyTaxValue =\n-                    this.propertyTaxValueRepository.findPropertyTaxValueByRegion(\n-                            property.getRegion());\n-\n-            final Integer amount =\n-                    this.calculatePropertyTaxAmount(\n-                            Double.valueOf(property.getApartmentSize()),\n-                            Double.valueOf(propertyTaxValue.getPricePerSquareMeter()),\n-                            Double.valueOf(propertyTaxValue.getCadastralValue()));\n-\n-            final PropertyTax propertyTax =\n-                    PropertyTax.builder()\n-                            .propertyId(property.getPropertyId())\n-                            .citizenId(property.getCitizenId())\n-                            .isPaid(false)\n-                            .date(new Date())\n-                            .taxAmount(amount)\n-                            .paymentRequestId(\n-                                    this.bankIntegrationService.bankRequest(\n-                                            SERVICE_ID,\n-                                            property.getCitizenId(),\n-                                            amount,\n-                                            TAX_PERCENT))\n-                            .build();\n-            this.propertyTaxRepository.save(propertyTax);\n+    public ResponseEntity<PropertyTax> calculatePropertyTax(\n+        final Long propertyId\n+    ) throws FeignException {\n+        final Property property =\n+            this.findPropertyById(propertyId);\n+        final PropertyTaxValue propertyTaxValue =\n+            this.findPropertyTaxValueByRegion((property.getRegion()));\n+        final Integer amount = this.calculatePropertyTaxAmount(\n+            Double.valueOf(property.getApartmentSize()),\n+            Double.valueOf(propertyTaxValue.getPricePerSquareMeter()),\n+            Double.valueOf(propertyTaxValue.getCadastralValue()));\n \n-            logger.info(\"PropertyTax successfully created\");\n-            response = ResponseEntity.ok(propertyTax);\n-        } catch (NullPointerException npe) {\n-            logger.error(\"Data of property not found\", npe);\n-            response =\n-                    ResponseEntity.status(HttpStatus.BAD_REQUEST)\n-                            .body(new PropertyTax()); // or null ???\n-        } catch (FeignException fe) {\n-            logger.error(\n-                    \"Failed to create PropertyTax!\"\n-                            + \" Failed to send a request to the BankService.\",\n-                    fe);\n-            response = ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(null);\n-        }\n-        return response;\n+        final PropertyTax propertyTax = PropertyTax\n+            .builder()\n+            .propertyId(property.getPropertyId())\n+            .citizenId(property.getCitizenId())\n+            .taxAmount(amount)\n+            .paymentRequestId(\n+                this.bankIntegrationService.bankRequest(\n+                    SERVICE_ID,\n+                    property.getCitizenId(),\n+                    amount,\n+                    TAX_PERCENT))\n+            .build();\n+        this.propertyTaxRepository.save(propertyTax);\n+        LOGGER.info(\"PropertyTax successfully created\");\n+        return ResponseEntity.ok(propertyTax);\n     }\n \n     /**\n      * Проверяет и изменяет статуса опалаты налоговой квитанции.\n      *\n      * @param propertyTaxId идентификатор квитанции с данными о налоге\n-     * @return http-ответ, в теле которого находится изменённая налоговая квитанция\n-     * @throws NullPointerException если не удасться найти налоговую квитанцию\n-     * @throws FeignException если не удасться обратиться к Банковскому сервису\n+     * @return http-ответ, в теле которого находится\n+     *          изменённая налоговая квитанция\n      */\n     public ResponseEntity<PropertyTax> changePropertyTaxStatus(final Long propertyTaxId) {\n-        ResponseEntity<PropertyTax> response;\n+        final ResponseEntity<PropertyTax> response;\n         final PropertyTax propertyTax = this.getPropertyTaxById(propertyTaxId);\n+        final Boolean isPaid = this.bankIntegrationService\n+            .checkPaymentStatus(propertyTax.getPaymentRequestId());\n+        if (Boolean.TRUE.equals(isPaid)) {\n+            propertyTax.setIsPaid(true);\n+            this.propertyTaxRepository.save(propertyTax);\n+            LOGGER.info(\"PropertyTax with ID = {} has been paid\", propertyTaxId);\n \n-        try {\n-            final Boolean isPaid =\n-                    this.bankIntegrationService.checkPaymentStatus(\n-                            propertyTax.getPaymentRequestId());\n-            if (Boolean.TRUE.equals(isPaid)) {\n-                propertyTax.setIsPaid(true);\n-                this.propertyTaxRepository.save(propertyTax);\n-                logger.info(\"PropertyTax with ID = {} has been paid\", propertyTaxId);\n-\n-                response = ResponseEntity.ok(propertyTax);\n-            } else {\n-                logger.error(\n-                        \"PropertyTax with ID = {} was not paid\", propertyTax.getPropertyTaxId());\n-                response = ResponseEntity.status(HttpStatus.PAYMENT_REQUIRED).body(propertyTax);\n-            }\n-        } catch (NullPointerException npe) {\n-            logger.error(\"PropertyTax with ID = {} not found\", propertyTaxId, npe);\n-            response = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(propertyTax);\n-        } catch (FeignException fe) {\n-            logger.info(\"Failed to verify payment\", fe);\n-            response = ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(propertyTax);\n+            response = ResponseEntity.ok(propertyTax);\n+        } else {\n+            LOGGER.error(\"PropertyTax with ID = {} was not paid\", propertyTax.getPropertyTaxId());\n+            response = ResponseEntity\n+                .status(HttpStatus.PAYMENT_REQUIRED)\n+                .body(propertyTax);\n         }\n         return response;\n     }\n \n     /**\n-     * Возвращает все налоговые квитанции на недвижимость для конкретного гражданина.\n+     * Возвращает все налоговые квитанции на недвижимость\n+     *          для конкретного гражданина.\n      *\n      * @param citizenId идентификатор гражданина\n      * @return Список налоговых квитанций\n@@ -243,9 +262,11 @@ public Integer calculatePropertyTaxAmount(\n     }\n \n     /**\n-     * Возвращает все налоговые квитанции на недвижимость для конкретного имущества.\n+     * Возвращает все налоговые квитанции на недвижимость\n+     *          для конкретного имущества.\n      *\n-     * @param propertyId идентификатор недвижимости, на которую были расчитаны налоги\n+     * @param propertyId идентификатор недвижимости,\n+     *         на которую были расчитаны налоги\n      * @return Список налоговых квитанций\n      */\n     public List<PropertyTax> getDebtPropertyTaxesByProperty(final Long propertyId) {\n@@ -262,12 +283,21 @@ public Integer calculatePropertyTaxAmount(\n     }\n \n     /**\n-     * Возвращает налоговую квитанции на недвижимость по указаноому идентификатору.\n+     * Возвращает налоговую квитанции на недвижимость\n+     *          по указаноому идентификатору.\n      *\n      * @param propertyTaxId идентификатор налоговой квитанции\n-     * @return Налоговая квитанция\n+     * @return налоговая квитанция\n+     * @throws PropertyTaxNotFoundException если не найдётся налог на имущество\n      */\n-    public PropertyTax getPropertyTaxById(final Long propertyTaxId) {\n-        return this.propertyTaxRepository.findPropertyTaxByPropertyTaxId(propertyTaxId);\n+    public PropertyTax getPropertyTaxById(\n+        final Long propertyTaxId\n+    ) throws PropertyTaxNotFoundException {\n+        final PropertyTax propertyTax = this.propertyTaxRepository\n+            .findPropertyTaxByPropertyTaxId(propertyTaxId);\n+        if (propertyTax == null) {\n+            throw new PropertyTaxNotFoundException(propertyTaxId);\n+        }\n+        return propertyTax;\n     }\n }"
  },
  {
    "sha": "b221de12691f7f0b4c7841db2ab4b8a5fd742706",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/UtilityBillPriceListParent.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/UtilityBillPriceListParent.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/UtilityBillPriceListParent.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/UtilityBillPriceListParent.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,4 +1,4 @@\n-package nc.unc.cs.services.communal.controllers.mock.price_lists.bill;\n+package nc.unc.cs.services.communal.controllers.mock.price.bill;\n \n import nc.unc.cs.services.communal.controllers.UtilitiesPriceListController;\n import nc.unc.cs.services.communal.controllers.mock.ParentWeb;",
    "previous_filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price_lists/bill/UtilityBillPriceListParent.java"
  },
  {
    "sha": "48fcb775ad4b7899cd234777c95cb5e8c157f67a",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/correct/AddUtilityBillPriceListTest.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/correct/AddUtilityBillPriceListTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/correct/AddUtilityBillPriceListTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/correct/AddUtilityBillPriceListTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,4 +1,4 @@\n-package nc.unc.cs.services.communal.controllers.mock.price_lists.bill.correct;\n+package nc.unc.cs.services.communal.controllers.mock.price.bill.correct;\n \n import static org.hamcrest.Matchers.containsString;\n import static org.mockito.Mockito.when;\n@@ -7,7 +7,7 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import nc.unc.cs.services.communal.controllers.mock.price_lists.bill.UtilityBillPriceListParent;\n+import nc.unc.cs.services.communal.controllers.mock.price.bill.UtilityBillPriceListParent;\n import nc.unc.cs.services.communal.controllers.payloads.CreationUtilitiesPriceList;\n import nc.unc.cs.services.communal.entities.UtilitiesPriceList;\n import org.junit.jupiter.api.Test;",
    "previous_filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price_lists/bill/correct/AddUtilityBillPriceListTest.java"
  },
  {
    "sha": "930f1b358b696c64a493639030e42af226eff98b",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/IncorrectRegionNameTest.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/IncorrectRegionNameTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/IncorrectRegionNameTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/IncorrectRegionNameTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,10 +1,10 @@\n-package nc.unc.cs.services.communal.controllers.mock.price_lists.bill.faulty;\n+package nc.unc.cs.services.communal.controllers.mock.price.bill.faulty;\n \n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import nc.unc.cs.services.communal.controllers.mock.price_lists.bill.UtilityBillPriceListParent;\n+import nc.unc.cs.services.communal.controllers.mock.price.bill.UtilityBillPriceListParent;\n import nc.unc.cs.services.communal.controllers.payloads.CreationUtilitiesPriceList;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.ValueSource;",
    "previous_filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price_lists/bill/faulty/IncorrectRegionNameTest.java"
  },
  {
    "sha": "ae711e2e5889eb509786fa05d4fb4a036554c8f3",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/NumericalTest.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/NumericalTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/NumericalTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/bill/faulty/NumericalTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,10 +1,10 @@\n-package nc.unc.cs.services.communal.controllers.mock.price_lists.bill.faulty;\n+package nc.unc.cs.services.communal.controllers.mock.price.bill.faulty;\n \n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import nc.unc.cs.services.communal.controllers.mock.price_lists.bill.UtilityBillPriceListParent;\n+import nc.unc.cs.services.communal.controllers.mock.price.bill.UtilityBillPriceListParent;\n import nc.unc.cs.services.communal.controllers.payloads.CreationUtilitiesPriceList;\n import org.junit.jupiter.api.Test;\n ",
    "previous_filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price_lists/bill/faulty/NumericalTest.java"
  },
  {
    "sha": "fd340c31ce81fafb2baa09c308c5e8e807c0785e",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/PropertyTaxValueParent.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/PropertyTaxValueParent.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/PropertyTaxValueParent.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/PropertyTaxValueParent.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,4 +1,4 @@\n-package nc.unc.cs.services.communal.controllers.mock.price_lists.tax;\n+package nc.unc.cs.services.communal.controllers.mock.price.tax;\n \n import nc.unc.cs.services.communal.controllers.PropertyTaxValueController;\n import nc.unc.cs.services.communal.controllers.mock.ParentWeb;",
    "previous_filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price_lists/tax/PropertyTaxValueParent.java"
  },
  {
    "sha": "62b9587e793997581bd7a4ec7ff44398718690b7",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/correct/AddPropertyTaxValueTest.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/correct/AddPropertyTaxValueTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/correct/AddPropertyTaxValueTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/correct/AddPropertyTaxValueTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,4 +1,4 @@\n-package nc.unc.cs.services.communal.controllers.mock.price_lists.tax.correct;\n+package nc.unc.cs.services.communal.controllers.mock.price.tax.correct;\n \n import static org.hamcrest.Matchers.containsString;\n import static org.mockito.Mockito.when;\n@@ -7,7 +7,7 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import nc.unc.cs.services.communal.controllers.mock.price_lists.tax.PropertyTaxValueParent;\n+import nc.unc.cs.services.communal.controllers.mock.price.tax.PropertyTaxValueParent;\n import nc.unc.cs.services.communal.controllers.payloads.CreationPropertyTaxValue;\n import nc.unc.cs.services.communal.entities.PropertyTaxValue;\n import org.junit.jupiter.api.Test;",
    "previous_filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price_lists/tax/correct/AddPropertyTaxValueTest.java"
  },
  {
    "sha": "94f90422275c5461dccea97449b2ce204749f27f",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/IncorrectRegionNameTest.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/IncorrectRegionNameTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/IncorrectRegionNameTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/IncorrectRegionNameTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,10 +1,10 @@\n-package nc.unc.cs.services.communal.controllers.mock.price_lists.tax.faulty;\n+package nc.unc.cs.services.communal.controllers.mock.price.tax.faulty;\n \n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import nc.unc.cs.services.communal.controllers.mock.price_lists.tax.PropertyTaxValueParent;\n+import nc.unc.cs.services.communal.controllers.mock.price.tax.PropertyTaxValueParent;\n import nc.unc.cs.services.communal.controllers.payloads.CreationPropertyTaxValue;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.ValueSource;",
    "previous_filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price_lists/tax/faulty/IncorrectRegionNameTest.java"
  },
  {
    "sha": "79581ae8bd2091feea17490f4574acc43b70c90c",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/NumericalTest.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/NumericalTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/NumericalTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price/tax/faulty/NumericalTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,10 +1,10 @@\n-package nc.unc.cs.services.communal.controllers.mock.price_lists.tax.faulty;\n+package nc.unc.cs.services.communal.controllers.mock.price.tax.faulty;\n \n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-import nc.unc.cs.services.communal.controllers.mock.price_lists.tax.PropertyTaxValueParent;\n+import nc.unc.cs.services.communal.controllers.mock.price.tax.PropertyTaxValueParent;\n import nc.unc.cs.services.communal.controllers.payloads.CreationPropertyTaxValue;\n import org.junit.jupiter.api.Test;\n ",
    "previous_filename": "services/communal/src/test/java/nc/unc/cs/services/communal/controllers/mock/price_lists/tax/faulty/NumericalTest.java"
  },
  {
    "sha": "ff911b05d8d994f267910db7f36532e815291c92",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/CalculatePropertyTaxTest.java",
    "status": "modified",
    "additions": 85,
    "deletions": 63,
    "changes": 148,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/CalculatePropertyTaxTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/CalculatePropertyTaxTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/CalculatePropertyTaxTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,11 +1,10 @@\n package nc.unc.cs.services.communal.services.integrations.property_tax;\n \n-import static org.mockito.BDDMockito.given;\n-\n-import java.util.Date;\n import nc.unc.cs.services.communal.entities.Property;\n import nc.unc.cs.services.communal.entities.PropertyTax;\n import nc.unc.cs.services.communal.entities.PropertyTaxValue;\n+import nc.unc.cs.services.communal.exceptions.PropertyNotFoundException;\n+import nc.unc.cs.services.communal.exceptions.PropertyTaxValueNotFoundException;\n import nc.unc.cs.services.communal.repositories.PropertyRepository;\n import nc.unc.cs.services.communal.repositories.PropertyTaxRepository;\n import nc.unc.cs.services.communal.repositories.PropertyTaxValueRepository;\n@@ -21,6 +20,9 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n class CalculatePropertyTaxTest {\n@@ -33,78 +35,98 @@\n     /** Процентный делитель. */\n     static final Double PERCENT_DIVISOR = PropertyTaxService.PERCENT_DIVISOR;\n \n-    @Mock private PropertyRepository propertyRepository;\n-    @Mock private PropertyTaxRepository propertyTaxRepository;\n-    @Mock private PropertyTaxValueRepository propertyTaxValueRepository;\n-    @Mock private BankIntegrationService bankIntegrationService;\n+    @Mock\n+    private PropertyRepository propertyRepository;\n+    @Mock\n+    private PropertyTaxRepository propertyTaxRepository;\n+    @Mock\n+    private PropertyTaxValueRepository propertyTaxValueRepository;\n+    @Mock\n+    private BankIntegrationService bankIntegrationService;\n+\n+    @InjectMocks\n+    private PropertyTaxService propertyTaxService;\n+\n+    private Property getProperty() {\n+        return Property\n+            .builder()\n+            .propertyId(1L)\n+            .region(\" samara \")\n+            .city(\"samara\")\n+            .street(\"main\")\n+            .house(\"12d\")\n+            .apartment(\"11\")\n+            .apartmentSize(1000)\n+            .citizenId(111L)\n+            .build();\n+    }\n \n-    @InjectMocks private PropertyTaxService propertyTaxService;\n+    PropertyTaxValue getPropertyTaxValue() {\n+        return PropertyTaxValue\n+            .builder()\n+            .propertyTaxValueId(1L)\n+            .region(\" samara \")\n+            .pricePerSquareMeter(10000)\n+            .cadastralValue(15)\n+            .build();\n+    }\n \n-    Property getProperty() {\n-        Property property = new Property();\n+    @Test\n+    void calculatePropertyTaxTest() {\n+        final Property property = this.getProperty();\n+        final PropertyTaxValue propertyTaxValue = getPropertyTaxValue();\n \n-        property.setPropertyId(1L);\n-        property.setRegion(\" samara \");\n-        property.setCity(\" tlt\");\n-        property.setStreet(\"main \");\n-        property.setHouse(\"12B\");\n-        property.setApartment(\"11-d\");\n-        property.setApartmentSize(100);\n-        property.setCitizenId(111L);\n+        given(this.propertyRepository.findPropertyByPropertyId(property.getPropertyId()))\n+            .willReturn(property);\n+        given(this.propertyTaxValueRepository.findPropertyTaxValueByRegion(property.getRegion()))\n+            .willReturn(propertyTaxValue);\n \n-        return property;\n-    }\n+        final Integer amount = this.propertyTaxService.calculatePropertyTaxAmount(\n+            Double.valueOf(property.getApartmentSize()),\n+            Double.valueOf(propertyTaxValue.getPricePerSquareMeter()),\n+            Double.valueOf(propertyTaxValue.getCadastralValue()));\n \n-    PropertyTaxValue getPropertyTaxValue() {\n-        PropertyTaxValue ptv = new PropertyTaxValue();\n-        ptv.setPropertyTaxValueId(1L);\n-        ptv.setRegion(\"samara  \");\n-        ptv.setPricePerSquareMeter(1000);\n-        ptv.setCadastralValue(15);\n+        given(this.bankIntegrationService.bankRequest(\n+            SERVICE_ID, property.getCitizenId(), amount, TAX_PERCENT))\n+            .willReturn(15L);\n+\n+        given(this.propertyTaxRepository.save(any()))\n+            .willAnswer(invocationOnMock -> invocationOnMock.getArgument(0));\n+\n+        final ResponseEntity<PropertyTax> response =\n+            this.propertyTaxService.calculatePropertyTax(property.getPropertyId());\n+\n+        logger.info(\"Response {}\", response.getBody());\n+\n+        Assertions.assertAll(\n+            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+            () -> Assertions.assertNotNull(response.getBody().getTaxAmount()),\n+            () -> Assertions.assertFalse(response.getBody().getIsPaid()),\n+            () -> Assertions.assertEquals(15L, response.getBody().getPaymentRequestId()));\n+    }\n \n-        return ptv;\n+    @Test\n+    void propertyNotFoundCalculateTest() {\n+        given(this.propertyRepository.findPropertyByPropertyId(anyLong()))\n+            .willReturn(null);\n+        Assertions.assertThrows(\n+            PropertyNotFoundException.class,\n+            () -> this.propertyTaxService.calculatePropertyTax(anyLong())\n+        );\n     }\n \n     @Test\n-    void calculatePropertyTaxTest() {\n+    void propertyTaxValueNotFoundCalculateTest() {\n         final Property property = this.getProperty();\n-        PropertyTaxValue propertyTaxValue = getPropertyTaxValue();\n \n-        given(this.propertyRepository.findPropertyByPropertyId(1L)).willReturn(property);\n+        given(this.propertyRepository.findPropertyByPropertyId(property.getPropertyId()))\n+            .willReturn(property);\n         given(this.propertyTaxValueRepository.findPropertyTaxValueByRegion(property.getRegion()))\n-                .willReturn(propertyTaxValue);\n-\n-        PropertyTax propertyTax = new PropertyTax();\n-        propertyTax.setPropertyId(property.getPropertyId());\n-        propertyTax.setIsPaid(false);\n-        propertyTax.setDate(new Date());\n-        propertyTax.setCitizenId(111L);\n-        propertyTax.setTaxAmount(\n-                this.propertyTaxService.calculatePropertyTaxAmount(\n-                        Double.valueOf(property.getApartmentSize()),\n-                        Double.valueOf(propertyTaxValue.getPricePerSquareMeter()),\n-                        Double.valueOf(propertyTaxValue.getCadastralValue())));\n-\n-        System.out.println(propertyTax.toString());\n-\n-        given(\n-                        this.bankIntegrationService.bankRequest(\n-                                SERVICE_ID,\n-                                property.getCitizenId(),\n-                                propertyTax.getTaxAmount(),\n-                                TAX_PERCENT))\n-                .willReturn(15L);\n-\n-        propertyTax.setPaymentRequestId(1L);\n-        propertyTax.setPropertyTaxId(1L);\n-        given(this.propertyTaxRepository.save(propertyTax)).willReturn(propertyTax);\n-\n-        ResponseEntity<PropertyTax> response = this.propertyTaxService.calculatePropertyTax(1L);\n+            .willReturn(null);\n \n-        Assertions.assertAll(\n-                () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n-                () -> Assertions.assertNotNull(response.getBody().getTaxAmount()),\n-                () -> Assertions.assertFalse(response.getBody().getIsPaid()),\n-                () -> Assertions.assertEquals(15L, response.getBody().getPaymentRequestId()));\n+        Assertions.assertThrows(\n+            PropertyTaxValueNotFoundException.class,\n+            () -> this.propertyTaxService.calculatePropertyTax(property.getPropertyId())\n+        );\n     }\n }"
  },
  {
    "sha": "206010ac24cdba8d4133a522a622488f39205a84",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/ChangePropertyTaxTest.java",
    "status": "modified",
    "additions": 51,
    "deletions": 22,
    "changes": 73,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/ChangePropertyTaxTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/ChangePropertyTaxTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/property_tax/ChangePropertyTaxTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -1,8 +1,5 @@\n package nc.unc.cs.services.communal.services.integrations.property_tax;\n \n-import static org.mockito.BDDMockito.given;\n-\n-import java.util.Date;\n import nc.unc.cs.services.communal.entities.PropertyTax;\n import nc.unc.cs.services.communal.repositories.PropertyTaxRepository;\n import nc.unc.cs.services.communal.services.BankIntegrationService;\n@@ -12,41 +9,73 @@\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import static org.mockito.BDDMockito.given;\n \n @ExtendWith(SpringExtension.class)\n class ChangePropertyTaxTest {\n \n-    @Mock private PropertyTaxRepository propertyTaxRepository;\n-    @Mock private BankIntegrationService bankIntegrationService;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ChangePropertyTaxTest.class);\n+\n+    @Mock\n+    private PropertyTaxRepository propertyTaxRepository;\n+    @Mock\n+    private BankIntegrationService bankIntegrationService;\n \n-    @InjectMocks private PropertyTaxService propertyTaxService;\n+    @InjectMocks\n+    private PropertyTaxService propertyTaxService;\n+\n+    private PropertyTax createPropertyTax() {\n+        return PropertyTax\n+            .builder()\n+            .paymentRequestId(1L)\n+            .propertyId(1L)\n+            .taxAmount(10000)\n+            .citizenId(111L)\n+            .paymentRequestId(15L)\n+            .build();\n+    }\n \n     @Test\n     void changePropertyTaxStatusTest() {\n-        final PropertyTax propertyTax = new PropertyTax();\n-        propertyTax.setPropertyTaxId(1L);\n-        propertyTax.setPropertyId(1L);\n-        propertyTax.setTaxAmount(10000);\n-        propertyTax.setDate(new Date());\n-        propertyTax.setIsPaid(false);\n-        propertyTax.setCitizenId(111L);\n-        propertyTax.setPaymentRequestId(15L);\n-\n-        given(this.propertyTaxService.getPropertyTaxById(propertyTax.getPropertyTaxId()))\n-                .willReturn(propertyTax);\n+        final PropertyTax propertyTax = this.createPropertyTax();\n+\n+        LOGGER.debug(\"Initial object state: {}\", propertyTax);\n+\n+        given(this.propertyTaxRepository.findPropertyTaxByPropertyTaxId(propertyTax.getPropertyTaxId()))\n+            .willReturn(propertyTax);\n \n         given(this.bankIntegrationService.checkPaymentStatus(propertyTax.getPaymentRequestId()))\n-                .willReturn(true);\n+            .willReturn(true);\n         given(this.propertyTaxRepository.save(propertyTax)).willReturn(propertyTax);\n \n-        ResponseEntity<PropertyTax> response = this.propertyTaxService.changePropertyTaxStatus(1L);\n-        System.out.println(propertyTax.getIsPaid());\n+        final ResponseEntity<PropertyTax> response =\n+            this.propertyTaxService.changePropertyTaxStatus(propertyTax.getPropertyTaxId());\n+\n+        LOGGER.debug(\"Final object state: {}\", propertyTax);\n+\n+        Assertions.assertAll(\n+            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+            () -> Assertions.assertTrue(response.getBody().getIsPaid()));\n+    }\n+\n+    @Test\n+    void changeAlreadyPaidPropertyTaxStatusTest() {\n+        final PropertyTax propertyTax = this.createPropertyTax();\n+\n+        propertyTax.setIsPaid(true);\n+        given(this.propertyTaxRepository.findPropertyTaxByPropertyTaxId(propertyTax.getPropertyTaxId()))\n+            .willReturn(propertyTax);\n+\n+        final ResponseEntity<PropertyTax> response =\n+            this.propertyTaxService.changePropertyTaxStatus(propertyTax.getPropertyTaxId());\n \n         Assertions.assertAll(\n-                () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n-                () -> Assertions.assertTrue(response.getBody().getIsPaid()));\n+            () -> Assertions.assertEquals(HttpStatus.PAYMENT_REQUIRED, response.getStatusCode()),\n+            () -> Assertions.assertTrue(response.getBody().getIsPaid()));\n     }\n }"
  },
  {
    "sha": "ad599a089f9b3932cf565528e84fd88482021c4d",
    "filename": "services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/utility/bill/CreateUtilityBillTest.java",
    "status": "added",
    "additions": 153,
    "deletions": 0,
    "changes": 153,
    "blob_url": "https://github.com/kostua16/UNC_2020_MS_TLT/blob/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/utility/bill/CreateUtilityBillTest.java",
    "raw_url": "https://github.com/kostua16/UNC_2020_MS_TLT/raw/a55784ed1c4631c35597a8b249920a88d7433211/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/utility/bill/CreateUtilityBillTest.java",
    "contents_url": "https://api.github.com/repos/kostua16/UNC_2020_MS_TLT/contents/services/communal/src/test/java/nc/unc/cs/services/communal/services/integrations/utility/bill/CreateUtilityBillTest.java?ref=a55784ed1c4631c35597a8b249920a88d7433211",
    "patch": "@@ -0,0 +1,153 @@\n+package nc.unc.cs.services.communal.services.integrations.utility.bill;\n+\n+import nc.unc.cs.services.communal.controllers.payloads.UtilitiesPayload;\n+import nc.unc.cs.services.communal.entities.Property;\n+import nc.unc.cs.services.communal.entities.UtilitiesPriceList;\n+import nc.unc.cs.services.communal.entities.UtilityBill;\n+import nc.unc.cs.services.communal.exceptions.PropertyNotFoundException;\n+import nc.unc.cs.services.communal.exceptions.UtilitiesPriceListNotFoundException;\n+import nc.unc.cs.services.communal.repositories.PropertyRepository;\n+import nc.unc.cs.services.communal.repositories.UtilitiesPriceListRepository;\n+import nc.unc.cs.services.communal.repositories.UtilityBillRepository;\n+import nc.unc.cs.services.communal.services.BankIntegrationService;\n+import nc.unc.cs.services.communal.services.CommunalService;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import static org.mockito.BDDMockito.given;\n+\n+@ExtendWith(SpringExtension.class)\n+class CreateUtilityBillTest {\n+\n+    @Mock\n+    private PropertyRepository propertyRepository;\n+    @Mock\n+    private UtilityBillRepository utilityBillRepository;\n+    @Mock\n+    private UtilitiesPriceListRepository utilitiesPriceListRepository;\n+    @Mock\n+    private BankIntegrationService bankIntegrationService;\n+    @InjectMocks\n+    private CommunalService communalService;\n+\n+    /** Идентификатор сервиса, поставляеющего услугу. */\n+    public static final Long SERVICE_ID = CommunalService.SERVICE_ID;\n+    /** Налоговый процент. */\n+    public static final Integer TAX_PERCENT = CommunalService.TAX_PERCENT;\n+\n+    private UtilitiesPayload createUtilitiesPayload() {\n+        return UtilitiesPayload\n+            .builder()\n+            .propertyId(1L)\n+            .coldWater(200)\n+            .hotWater(200)\n+            .electricity(200)\n+            .build();\n+    }\n+\n+    private UtilitiesPriceList createUtilitiesPriceList() {\n+        return UtilitiesPriceList\n+            .builder()\n+            .utilitiesPriceListId(1L)\n+            .region(\"samara\")\n+            .coldWaterPrice(5)\n+            .hotWaterPrice(20)\n+            .electricityPrice(5)\n+            .build();\n+    }\n+\n+    private UtilityBill createUtilityBill() {\n+        final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n+        return UtilityBill\n+            .builder()\n+            .coldWater(utilitiesPayload.getColdWater())\n+            .hotWater(utilitiesPayload.getHotWater())\n+            .electricity(utilitiesPayload.getElectricity())\n+            .build();\n+    }\n+\n+    private Property createProperty() {\n+        return Property.builder()\n+            .propertyId(1L)\n+            .region(\"Samara\")\n+            .city(\"Samara\")\n+            .street(\"main\")\n+            .house(\"111\")\n+            .apartment(\"1b\")\n+            .apartmentSize(1000)\n+            .citizenId(111L)\n+            .build();\n+    }\n+\n+    @Test\n+    void calculateUtilityBill() {\n+        final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n+        final Property property = this.createProperty();\n+        final UtilitiesPriceList priceList = this.createUtilitiesPriceList();\n+        final UtilityBill utilityBill = this.createUtilityBill();\n+        utilityBill.setCitizenId(property.getCitizenId());\n+        utilityBill.setPaymentRequestId(15L);\n+        utilityBill.setColdWaterAmount(utilitiesPayload.getColdWater() * priceList.getColdWaterPrice());\n+        utilityBill.setHotWaterAmount(utilitiesPayload.getHotWater() * priceList.getHotWaterPrice());\n+        utilityBill.setElectricityAmount(utilitiesPayload.getElectricity() * priceList.getElectricityPrice());\n+        utilityBill.setUtilityAmount(\n+            utilityBill.getColdWaterAmount()\n+                + utilityBill.getHotWaterAmount()\n+                + utilityBill.getElectricityAmount()\n+        );\n+        given(this.propertyRepository.findPropertyByPropertyId(utilitiesPayload.getPropertyId()))\n+            .willReturn(property);\n+        given(this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(property.getRegion()))\n+            .willReturn(priceList);\n+        given(this.bankIntegrationService.bankRequest(\n+            SERVICE_ID,\n+            utilityBill.getCitizenId(),\n+            utilityBill.getUtilityAmount(),\n+            utilityBill.getUtilityAmount() / TAX_PERCENT\n+        ))\n+            .willReturn(15L);\n+        given(this.utilityBillRepository.save(utilityBill)).willReturn(utilityBill);\n+\n+        System.out.println(utilityBill);\n+\n+        final ResponseEntity<UtilityBill> response = this.communalService.calculateUtilityBill(utilitiesPayload);\n+\n+        Assertions.assertAll(\n+            () -> Assertions.assertEquals(HttpStatus.OK, response.getStatusCode()),\n+            () -> Assertions.assertEquals(utilityBill.getUtilityAmount(), response.getBody().getUtilityAmount()),\n+            () -> Assertions.assertEquals(utilitiesPayload.getHotWater(), response.getBody().getHotWater()),\n+            () -> Assertions.assertEquals(utilitiesPayload.getPropertyId(), response.getBody().getPropertyId()),\n+            () -> Assertions.assertEquals(property.getCitizenId(), response.getBody().getCitizenId())\n+        );\n+    }\n+\n+    @Test\n+    void calculateUtilityCostsPropertyNotFoundTest() {\n+        final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n+\n+        given(this.propertyRepository.findPropertyByPropertyId(utilitiesPayload.getPropertyId()))\n+            .willReturn(null);\n+        Assertions.assertThrows(\n+            PropertyNotFoundException.class,\n+            () -> this.communalService.calculateUtilityBill(utilitiesPayload)\n+        );\n+    }\n+\n+    @Test\n+    void calculateUtilityCostsUtilitiesPriceListNotFoundTest() {\n+        final UtilitiesPayload utilitiesPayload = this.createUtilitiesPayload();\n+        final Property property = this.createProperty();\n+\n+        given(this.utilitiesPriceListRepository.findUtilitiesPriceListByRegion(property.getRegion()))\n+            .willReturn(null);\n+        Assertions.assertThrows(\n+            UtilitiesPriceListNotFoundException.class,\n+            () -> this.communalService.calculateUtilityCosts(property.getRegion(), utilitiesPayload)\n+        );\n+    }\n+}"
  }
]
