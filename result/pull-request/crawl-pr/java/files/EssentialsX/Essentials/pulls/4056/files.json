[
  {
    "sha": "d6e5fe4e335237290a20be7c4d655b8983f6de6e",
    "filename": "Essentials/src/main/java/com/earth2me/essentials/signs/SignTrade.java",
    "status": "modified",
    "additions": 20,
    "deletions": 20,
    "changes": 40,
    "blob_url": "https://github.com/EssentialsX/Essentials/blob/b71718e8d33d17da64fa9d2267ef2fc02736c187/Essentials/src/main/java/com/earth2me/essentials/signs/SignTrade.java",
    "raw_url": "https://github.com/EssentialsX/Essentials/raw/b71718e8d33d17da64fa9d2267ef2fc02736c187/Essentials/src/main/java/com/earth2me/essentials/signs/SignTrade.java",
    "contents_url": "https://api.github.com/repos/EssentialsX/Essentials/contents/Essentials/src/main/java/com/earth2me/essentials/signs/SignTrade.java?ref=b71718e8d33d17da64fa9d2267ef2fc02736c187",
    "patch": "@@ -18,6 +18,8 @@\n \n //TODO: TL exceptions\n public class SignTrade extends EssentialsSign {\n+    private static int MAX_STOCK_LINE_LENGTH = 15;\n+\n     public SignTrade() {\n         super(\"Trade\");\n     }\n@@ -82,9 +84,8 @@ protected boolean onSignInteract(final ISign sign, final User player, final Stri\n     private Trade rechargeSign(final ISign sign, final IEssentials ess, final User player) throws SignException, ChargeException {\n         final Trade trade = getTrade(sign, 2, AmountType.COST, false, true, ess);\n         if (trade.getItemStack() != null && player.getBase().getItemInHand() != null && trade.getItemStack().getType() == player.getBase().getItemInHand().getType() && trade.getItemStack().getDurability() == player.getBase().getItemInHand().getDurability() && trade.getItemStack().getEnchantments().equals(player.getBase().getItemInHand().getEnchantments())) {\n-            int amount = player.getBase().getItemInHand().getAmount();\n-            amount -= amount % trade.getItemStack().getAmount();\n-            if (amount > 0) {\n+            final int amount = trade.getItemStack().getAmount();\n+            if (player.getBase().getInventory().containsAtLeast(trade.getItemStack(), amount)) {\n                 final ItemStack stack = player.getBase().getItemInHand().clone();\n                 stack.setAmount(amount);\n                 final Trade store = new Trade(stack, ess);\n@@ -141,6 +142,12 @@ protected boolean onSignBreak(final ISign sign, final User player, final String\n         }\n     }\n \n+    private void validateSignLength(final String newLine) throws SignException {\n+        if (newLine.length() > MAX_STOCK_LINE_LENGTH) {\n+            throw new SignException(\"This sign is full!\");\n+        }\n+    }\n+\n     protected final void validateTrade(final ISign sign, final int index, final boolean amountNeeded, final IEssentials ess) throws SignException {\n         final String line = sign.getLine(index).trim();\n         if (line.isEmpty()) {\n@@ -151,10 +158,9 @@ protected final void validateTrade(final ISign sign, final int index, final bool\n         if (split.length == 1 && !amountNeeded) {\n             final BigDecimal money = getMoney(split[0], ess);\n             if (money != null) {\n-                if (NumberUtil.shortCurrency(money, ess).length() * 2 > 15) {\n-                    throw new SignException(\"Line can be too long!\");\n-                }\n-                sign.setLine(index, NumberUtil.shortCurrency(money, ess) + \":0\");\n+                final String newLine = NumberUtil.shortCurrency(money, ess) + \":0\";\n+                validateSignLength(newLine);\n+                sign.setLine(index, newLine);\n                 return;\n             }\n         }\n@@ -167,7 +173,9 @@ protected final void validateTrade(final ISign sign, final int index, final bool\n                 if (amount.compareTo(MINTRANSACTION) < 0 || money.compareTo(MINTRANSACTION) < 0) {\n                     throw new SignException(tl(\"moreThanZero\"));\n                 }\n-                sign.setLine(index, NumberUtil.shortCurrency(money, ess) + \":\" + NumberUtil.shortCurrency(amount, ess).substring(1));\n+                final String newLine = NumberUtil.shortCurrency(money, ess) + \":\" + NumberUtil.shortCurrency(amount, ess).substring(1);\n+                validateSignLength(newLine);\n+                sign.setLine(index, newLine);\n                 return;\n             }\n         }\n@@ -182,9 +190,7 @@ protected final void validateTrade(final ISign sign, final int index, final bool\n                 throw new SignException(tl(\"moreThanZero\"));\n             }\n             final String newline = amount + \" \" + split[1] + \":0\";\n-            if ((newline + amount).length() > 15) {\n-                throw new SignException(\"Line can be too long!\");\n-            }\n+            validateSignLength(newline);\n             sign.setLine(index, newline);\n             return;\n         }\n@@ -321,9 +327,7 @@ private void setAmount(final ISign sign, final int index, final BigDecimal value\n             final BigDecimal amount = getBigDecimal(split[1], ess);\n             if (money != null && amount != null) {\n                 final String newline = NumberUtil.shortCurrency(money, ess) + \":\" + NumberUtil.shortCurrency(value, ess).substring(1);\n-                if (newline.length() > 15) {\n-                    throw new SignException(\"This sign is full: Line too long!\");\n-                }\n+                validateSignLength(newline);\n                 sign.setLine(index, newline);\n                 return;\n             }\n@@ -333,18 +337,14 @@ private void setAmount(final ISign sign, final int index, final BigDecimal value\n             if (split[1].equalsIgnoreCase(\"exp\") || split[1].equalsIgnoreCase(\"xp\")) {\n                 final int stackamount = getIntegerPositive(split[0]);\n                 final String newline = stackamount + \" \" + split[1] + \":\" + value.intValueExact();\n-                if (newline.length() > 15) {\n-                    throw new SignException(\"This sign is full: Line too long!\");\n-                }\n+                validateSignLength(newline);\n                 sign.setLine(index, newline);\n                 return;\n             } else {\n                 final int stackamount = getIntegerPositive(split[0]);\n                 getItemStack(split[1], stackamount, ess);\n                 final String newline = stackamount + \" \" + split[1] + \":\" + value.intValueExact();\n-                if (newline.length() > 15) {\n-                    throw new SignException(\"This sign is full: Line too long!\");\n-                }\n+                validateSignLength(newline);\n                 sign.setLine(index, newline);\n                 return;\n             }"
  }
]
