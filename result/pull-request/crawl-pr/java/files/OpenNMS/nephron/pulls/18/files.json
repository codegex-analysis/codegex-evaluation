[
  {
    "sha": "02e448f6565b6ce21a39dd7f6e410f823044335d",
    "filename": "catheter",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": null,
    "raw_url": null,
    "contents_url": "https://api.github.com/repos/OpenNMS/nephron/contents/catheter?ref=f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8",
    "patch": "@@ -1 +1 @@\n-Subproject commit 875dd862385acfd439c9533198685b2ebfae5da2\n+Subproject commit 02e448f6565b6ce21a39dd7f6e410f823044335d"
  },
  {
    "sha": "183c5eaf3d5f127b24d48d108c919728b64cff08",
    "filename": "generator/pom.xml",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/OpenNMS/nephron/blob/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/generator/pom.xml",
    "raw_url": "https://github.com/OpenNMS/nephron/raw/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/generator/pom.xml",
    "contents_url": "https://api.github.com/repos/OpenNMS/nephron/contents/generator/pom.xml?ref=f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8",
    "patch": "@@ -0,0 +1,119 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <parent>\n+        <groupId>org.opennms.nephron</groupId>\n+        <artifactId>nephron-parent</artifactId>\n+        <version>0.1.2-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>nephron-generator</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Nephron :: Generator</name>\n+\n+    <properties>\n+        <skipITs>true</skipITs>\n+        <moxy.version>2.5.1</moxy.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>8</source>\n+                    <target>8</target>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <version>3.1.0</version>\n+                <configuration>\n+                    <archive>\n+                        <manifest>\n+                            <mainClass>org.opennms.nephron.generaotr.Generator</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    <descriptorRefs>\n+                        <descriptorRef>jar-with-dependencies</descriptorRef>\n+                    </descriptorRefs>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>make-assembly</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>single</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.opennms.nephron</groupId>\n+            <artifactId>nephron-proto</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.opennms.catheter</groupId>\n+            <artifactId>catheter</artifactId>\n+            <version>1.0-SNAPSHOT</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>${kafka.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.persistence</groupId>\n+            <artifactId>org.eclipse.persistence.moxy</artifactId>\n+            <version>${moxy.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.awaitility</groupId>\n+            <artifactId>awaitility</artifactId>\n+            <version>4.0.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest-core</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>kafka</artifactId>\n+            <version>${testcontainers.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <snapshots>\n+                <enabled>false</enabled>\n+            </snapshots>\n+            <releases>\n+                <enabled>true</enabled>\n+            </releases>\n+            <id>opennms-repo</id>\n+            <name>OpenNMS Repository</name>\n+            <url>http://maven.opennms.org/content/groups/opennms.org-release/</url>\n+        </repository>\n+    </repositories>\n+</project>"
  },
  {
    "sha": "5a857edc530d046785ba4f93d79739e8756382e4",
    "filename": "generator/src/main/java/org/opennms/nephron/generator/Generator.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/OpenNMS/nephron/blob/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/generator/src/main/java/org/opennms/nephron/generator/Generator.java",
    "raw_url": "https://github.com/OpenNMS/nephron/raw/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/generator/src/main/java/org/opennms/nephron/generator/Generator.java",
    "contents_url": "https://api.github.com/repos/OpenNMS/nephron/contents/generator/src/main/java/org/opennms/nephron/generator/Generator.java?ref=f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8",
    "patch": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2021 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2021 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.nephron.generator;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.persistence.jaxb.MarshallerProperties;\n+import org.kohsuke.args4j.Argument;\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.CmdLineParser;\n+import org.opennms.nephron.catheter.Exporter;\n+import org.opennms.nephron.catheter.FlowGenerator;\n+import org.opennms.nephron.catheter.Simulation;\n+import org.opennms.nephron.catheter.json.ExporterJson;\n+import org.opennms.nephron.catheter.json.SimulationJson;\n+\n+public class Generator implements Cloneable {\n+\n+    @Argument\n+    private File jsonConfigFile;\n+\n+    private void run(final String... args) throws IOException, JAXBException {\n+        final CmdLineParser parser = new CmdLineParser(this);\n+\n+        try {\n+            parser.parseArgument(args);\n+\n+            if (this.jsonConfigFile == null) {\n+                throw new CmdLineException(parser, \"No argument is given\");\n+            }\n+        } catch (CmdLineException e) {\n+            System.err.println(e.getMessage());\n+            System.err.println(\"java -jar catheter-1.0-SNAPSHOT-jar-with-dependencies.jar JSON-file\");\n+            parser.printUsage(System.err);\n+            System.err.println();\n+\n+            return;\n+        }\n+\n+        final Simulation simulation = Generator.fromFile(this.jsonConfigFile);\n+        simulation.start();\n+    }\n+\n+    public static void main(final String... args) throws Exception {\n+        new Generator().run(args);\n+    }\n+\n+    public static Simulation fromFile(final File file) throws JAXBException, FileNotFoundException {\n+        return fromSource(new StreamSource(new FileReader(file)));\n+    }\n+\n+    public static Simulation fromJson(final String json) throws JAXBException {\n+        return fromSource(new StreamSource(new StringReader(json)));\n+    }\n+\n+    private static Simulation fromSource(final Source source) throws JAXBException {\n+        final Unmarshaller unmarshaller = JAXBContext.newInstance(SimulationJson.class).createUnmarshaller();\n+        unmarshaller.setProperty(MarshallerProperties.MEDIA_TYPE, \"application/json\");\n+\n+        final SimulationJson simulationJson = unmarshaller.unmarshal(source, SimulationJson.class).getValue();\n+\n+        final List<Exporter.Builder> exporterBuilders = new ArrayList<>();\n+\n+        for(final ExporterJson exporterJson : simulationJson.getExporters()) {\n+            final FlowGenerator.Builder flowGeneratorBuilder = FlowGenerator.builder()\n+                                                                            .withMaxFlowCount(exporterJson.getFlowGenerator().getMaxFlowCount())\n+                                                                            .withMinFlowDuration(Duration.ofMillis(exporterJson.getFlowGenerator().getMinFlowDurationMs()))\n+                                                                            .withMaxFlowDuration(Duration.ofMillis(exporterJson.getFlowGenerator().getMaxFlowDurationMs()))\n+                                                                            .withActiveTimeout(Duration.ofMillis(exporterJson.getFlowGenerator().getActiveTimeoutMs()))\n+                                                                            .withBytesPerSecond(exporterJson.getFlowGenerator().getBytesPerSecond());\n+\n+            exporterBuilders.add(Exporter.builder()\n+                                         .withForeignId(exporterJson.getForeignId())\n+                                         .withForeignSource(exporterJson.getForeignSource())\n+                                         .withNodeId(exporterJson.getNodeId())\n+                                         .withLocation(exporterJson.getLocation())\n+                                         .withInputSnmp(exporterJson.getInputSnmp())\n+                                         .withOutputSnmp(exporterJson.getOutputSnmp())\n+                                         .withGenerator(flowGeneratorBuilder)\n+                                         .withClockOffset(Duration.ofMillis(exporterJson.getClockOffsetMs())));\n+        }\n+\n+        final Handler handler = new Handler(simulationJson.getBootstrapServers(), simulationJson.getFlowTopic(), new Random(simulationJson.getSeed()));\n+\n+        return Simulation.builder(handler)\n+                         .withStartTime(simulationJson.getStartTime())\n+                         .withSeed(simulationJson.getSeed())\n+                         .withTickMs(Duration.ofMillis(simulationJson.getTickMs()))\n+                         .withRealtime(simulationJson.getRealtime())\n+                         .withExporters(exporterBuilders).build();\n+    }\n+}"
  },
  {
    "sha": "3a6b806aaaee7c984447b3cc9be5e22b0c26b2ab",
    "filename": "generator/src/main/java/org/opennms/nephron/generator/Handler.java",
    "status": "added",
    "additions": 184,
    "deletions": 0,
    "changes": 184,
    "blob_url": "https://github.com/OpenNMS/nephron/blob/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/generator/src/main/java/org/opennms/nephron/generator/Handler.java",
    "raw_url": "https://github.com/OpenNMS/nephron/raw/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/generator/src/main/java/org/opennms/nephron/generator/Handler.java",
    "contents_url": "https://api.github.com/repos/OpenNMS/nephron/contents/generator/src/main/java/org/opennms/nephron/generator/Handler.java?ref=f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8",
    "patch": "@@ -0,0 +1,184 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2021 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2021 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.nephron.generator;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.opennms.nephron.catheter.Exporter;\n+import org.opennms.nephron.catheter.FlowReport;\n+import org.opennms.netmgt.flows.persistence.model.FlowDocument;\n+import org.opennms.netmgt.flows.persistence.model.Locality;\n+import org.opennms.netmgt.flows.persistence.model.NodeInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.net.InetAddresses;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class Handler implements BiConsumer<Exporter, FlowReport>, Closeable {\n+    private static final Logger LOG = LoggerFactory.getLogger(Handler.class);\n+\n+    private final KafkaProducer<String, byte[]> kafkaProducer;\n+    private final String flowTopic;\n+\n+    private final Random random;\n+\n+    private final List<Integer> protocols;\n+    private final List<String> applications;\n+    private final List<String> hosts;\n+    private final List<AddrHost> addresses;\n+\n+    public Handler(final String bootstrapServers,\n+                   final String flowTopic,\n+                   final Random random) {\n+        final Map<String, Object> producerProps = new HashMap<>();\n+        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class);\n+\n+        this.kafkaProducer = new KafkaProducer<>(producerProps);\n+        this.flowTopic = flowTopic;\n+\n+        this.random = random;\n+\n+        this.protocols = Arrays.asList(6, 17);\n+        this.applications = generate(200, generateString(15));\n+        this.hosts = generate(5, generateString(10));\n+        this.addresses = generate(100, () -> new AddrHost(generateInetAddr().get(), generateString(10).get()));\n+    }\n+\n+    @Override\n+    public void accept(final Exporter exporter, final FlowReport report) {\n+        final FlowDocument flowDocument = createFlowDocument(exporter, report);\n+\n+        this.kafkaProducer.send(new ProducerRecord<>(this.flowTopic, flowDocument.toByteArray()), (metadata, exception) -> {\n+            if (exception != null) {\n+                LOG.warn(\"Simulation: error sending flow document to Kafka topic\", exception);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        this.kafkaProducer.close();\n+    }\n+\n+    private  FlowDocument createFlowDocument(final Exporter exporter, final FlowReport report) {\n+        final int protocol = choose(this.protocols);\n+        final String application = choose(this.applications);\n+\n+        final AddrHost srcAddr = choose(this.addresses);\n+        final AddrHost dstAddr = choose(this.addresses);\n+\n+        final InetAddress[] convo = InetAddresses.coerceToInteger(srcAddr.address) < InetAddresses.coerceToInteger(dstAddr.address)\n+                                    ? new InetAddress[]{srcAddr.address, dstAddr.address}\n+                                    : new InetAddress[]{dstAddr.address, srcAddr.address};\n+\n+        final String convoKey = \"[\\\"\" + exporter.getLocation() + \"\\\",\\\"\" + protocol + \",\\\"\" + InetAddresses.toAddrString(convo[0]) + \"\\\",\\\"\" + InetAddresses.toAddrString(convo[1]) + \"\\\",\\\"\" + application + \"\\\"]\";\n+\n+        final FlowDocument.Builder flowBuilder = FlowDocument.newBuilder();\n+        flowBuilder.setApplication(application);\n+        flowBuilder.setHost(choose(this.hosts));\n+        flowBuilder.setLocation(exporter.getLocation());\n+        flowBuilder.setDstLocality(Locality.PUBLIC);\n+        flowBuilder.setSrcLocality(Locality.PUBLIC);\n+        flowBuilder.setFlowLocality(Locality.PUBLIC);\n+        flowBuilder.setSrcAddress(InetAddresses.toAddrString(srcAddr.address));\n+        flowBuilder.setDstAddress(InetAddresses.toAddrString(dstAddr.address));\n+        flowBuilder.setSrcHostname(srcAddr.hostname);\n+        flowBuilder.setDstHostname(dstAddr.hostname);\n+        flowBuilder.setFirstSwitched(UInt64Value.of(report.getStart().plus(exporter.getClockOffset()).toEpochMilli()));\n+        flowBuilder.setDeltaSwitched(UInt64Value.of(report.getStart().plus(exporter.getClockOffset()).toEpochMilli()));\n+        flowBuilder.setLastSwitched(UInt64Value.of(report.getEnd().plus(exporter.getClockOffset()).toEpochMilli()));\n+        flowBuilder.setNumBytes(UInt64Value.of(report.getBytes()));\n+        flowBuilder.setConvoKey(convoKey);\n+        flowBuilder.setInputSnmpIfindex(UInt32Value.of(exporter.getInputSnmp()));\n+        flowBuilder.setOutputSnmpIfindex(UInt32Value.of(exporter.getOutputSnmp()));\n+\n+        final NodeInfo.Builder exporterBuilder = NodeInfo.newBuilder();\n+        exporterBuilder.setNodeId(exporter.getNodeId());\n+        exporterBuilder.setForeignSource(exporter.getForeignSource());\n+        exporterBuilder.setForeginId(exporter.getForeignId());\n+        flowBuilder.setExporterNode(exporterBuilder);\n+\n+        return flowBuilder.build();\n+    }\n+\n+    private Supplier<String> generateString(final int length) {\n+        return () -> random.ints(97, 123)\n+                           .limit(length)\n+                           .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n+                           .toString();\n+    }\n+\n+    private <T> List<T> generate(final int count, final Supplier<T> f) {\n+        return IntStream.range(0, count)\n+                        .mapToObj(i -> f.get())\n+                        .collect(Collectors.toList());\n+    }\n+\n+    private Supplier<Inet4Address> generateInetAddr() {\n+        return () -> InetAddresses.fromInteger(random.nextInt());\n+    }\n+\n+\n+    private <T> T choose(final List<T> options) {\n+        return options.get(random.nextInt(options.size()));\n+    }\n+\n+    private static class AddrHost {\n+        public final InetAddress address;\n+        public final String hostname;\n+\n+        private AddrHost(final InetAddress address, final String hostname) {\n+            this.address = Objects.requireNonNull(address);\n+            this.hostname = Objects.requireNonNull(hostname);\n+        }\n+    }\n+}"
  },
  {
    "sha": "21fd4ee6ba0611d21900551e7a171ee34912261b",
    "filename": "generator/src/test/java/org/opennms/nephron/generator/GeneratorIT.java",
    "status": "added",
    "additions": 207,
    "deletions": 0,
    "changes": 207,
    "blob_url": "https://github.com/OpenNMS/nephron/blob/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/generator/src/test/java/org/opennms/nephron/generator/GeneratorIT.java",
    "raw_url": "https://github.com/OpenNMS/nephron/raw/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/generator/src/test/java/org/opennms/nephron/generator/GeneratorIT.java",
    "contents_url": "https://api.github.com/repos/OpenNMS/nephron/contents/generator/src/test/java/org/opennms/nephron/generator/GeneratorIT.java?ref=f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8",
    "patch": "@@ -0,0 +1,207 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2021 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2021 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.nephron.generator;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.Marshaller;\n+\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.eclipse.persistence.jaxb.MarshallerProperties;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.opennms.nephron.catheter.Exporter;\n+import org.opennms.nephron.catheter.FlowGenerator;\n+import org.opennms.nephron.catheter.Simulation;\n+import org.opennms.nephron.catheter.json.ExporterJson;\n+import org.opennms.nephron.catheter.json.FlowGeneratorJson;\n+import org.opennms.nephron.catheter.json.SimulationJson;\n+import org.opennms.netmgt.flows.persistence.model.FlowDocument;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.shaded.com.fasterxml.jackson.databind.deser.std.StringDeserializer;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+\n+public class GeneratorIT {\n+    public static final String FLOW_TOPIC = \"flows\";\n+\n+    @Rule\n+    public KafkaContainer kafka = new KafkaContainer();\n+\n+    @Before\n+    public void before() {\n+        createTopics(FLOW_TOPIC);\n+    }\n+\n+    private void createTopics(String... topics) {\n+        final List<NewTopic> newTopics =\n+                Arrays.stream(topics)\n+                      .map(topic -> new NewTopic(topic, 1, (short) 1))\n+                      .collect(Collectors.toList());\n+        try (final AdminClient admin = AdminClient.create(ImmutableMap.<String, Object>builder()\n+                                                                  .put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers())\n+                                                                  .build())) {\n+            admin.createTopics(newTopics);\n+        }\n+    }\n+\n+    @Test\n+    public void testMainMethod() throws Exception {\n+        final SimulationJson simulationJson = new SimulationJson();\n+        simulationJson.setBootstrapServers(kafka.getBootstrapServers());\n+        simulationJson.setFlowTopic(FLOW_TOPIC);\n+        simulationJson.setRealtime(true);\n+        simulationJson.setStartTime(Instant.now());\n+        simulationJson.setTickMs(250);\n+\n+        final FlowGeneratorJson flowGeneratorJson1 = new FlowGeneratorJson();\n+        flowGeneratorJson1.setActiveTimeoutMs(1000);\n+        flowGeneratorJson1.setBytesPerSecond(1000_000);\n+        flowGeneratorJson1.setMaxFlowCount(10);\n+        flowGeneratorJson1.setMinFlowDurationMs(1000);\n+        flowGeneratorJson1.setMaxFlowDurationMs(20000);\n+\n+        final ExporterJson exporterJson1 = new ExporterJson();\n+        exporterJson1.setForeignSource(\"foreignSource1\");\n+        exporterJson1.setForeignId(\"foreignId1\");\n+        exporterJson1.setNodeId(1);\n+        exporterJson1.setClockOffsetMs(10);\n+        exporterJson1.setFlowGenerator(flowGeneratorJson1);\n+        exporterJson1.setLocation(\"Default\");\n+\n+        simulationJson.setExporters(Arrays.asList(exporterJson1));\n+\n+        final Marshaller marshaller = JAXBContext.newInstance(SimulationJson.class).createMarshaller();\n+        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n+        marshaller.setProperty(MarshallerProperties.MEDIA_TYPE, \"application/json\");\n+        marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT, true);\n+\n+        final File tempFile = File.createTempFile(\"test-\", \".json\");\n+        tempFile.deleteOnExit();\n+\n+        // write JSON file\n+        marshaller.marshal(simulationJson, tempFile);\n+        // run main with JSON file argument\n+        Generator.main(tempFile.getAbsolutePath());\n+        // setup consumer\n+        final KafkaConsumer<String, FlowDocument> kafkaConsumer = createConsumer();\n+        // check whether data arrive...\n+        await().pollDelay(Duration.ofSeconds(1)).atMost(Duration.ofMinutes(1)).until(() -> kafkaConsumer.poll(250).count() > 0);\n+        // close the consumer\n+        kafkaConsumer.close();\n+    }\n+\n+    @Test\n+    public void testJsonHandling() throws Exception {\n+        final Simulation simulation = Generator.fromFile(new File(\"src/test/resources/simulation.json\"));\n+\n+        final Simulation expected = Simulation.builder(simulation.getHandler())\n+                                              .withRealtime(true)\n+                                              .withStartTime(Instant.parse(\"2020-11-27T09:16:31.122Z\"))\n+                                              .withTickMs(Duration.ofMillis(250))\n+                                              .withExporters(\n+                                                      Exporter.builder()\n+                                                              .withInputSnmp(98)\n+                                                              .withOutputSnmp(99)\n+                                                              .withNodeId(1)\n+                                                              .withForeignSource(\"foreignSource1\")\n+                                                              .withForeignId(\"foreignId1\")\n+                                                              .withClockOffset(Duration.ofSeconds(10))\n+                                                              .withLocation(\"Default\")\n+                                                              .withGenerator(FlowGenerator.builder()\n+                                                                                          .withBytesPerSecond(1000_000L)\n+                                                                                          .withMaxFlowCount(10)\n+                                                                                          .withActiveTimeout(Duration.ofSeconds(1))\n+                                                                                          .withMinFlowDuration(Duration.ofSeconds(1))\n+                                                                                          .withMaxFlowDuration(Duration.ofSeconds(20))),\n+                                                      Exporter.builder()\n+                                                              .withInputSnmp(11)\n+                                                              .withOutputSnmp(12)\n+                                                              .withNodeId(2)\n+                                                              .withForeignSource(\"foreignSource2\")\n+                                                              .withForeignId(\"foreignId2\")\n+                                                              .withClockOffset(Duration.ofSeconds(-10))\n+                                                              .withLocation(\"Minion\")\n+                                                              .withGenerator(FlowGenerator.builder()\n+                                                                                          .withBytesPerSecond(1000_000L)\n+                                                                                          .withMaxFlowCount(10)\n+                                                                                          .withActiveTimeout(Duration.ofSeconds(1))\n+                                                                                          .withMinFlowDuration(Duration.ofSeconds(2))\n+                                                                                          .withMaxFlowDuration(Duration.ofSeconds(15)))\n+                                                            )\n+                                              .withSeed(1606468048782L)\n+                                              .build();\n+\n+        // check whether loaded file and expected simulation instance is equal\n+        assertThat(simulation, is(expected));\n+    }\n+\n+    private KafkaConsumer<String, FlowDocument> createConsumer() {\n+        final Map<String, Object> consumerProps = new HashMap<>();\n+        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n+        consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, \"test-\" + UUID.randomUUID().toString());\n+        consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, KafkaInputFlowDeserializer.class);\n+        final KafkaConsumer<String, FlowDocument> kafkaConsumer = new KafkaConsumer<>(consumerProps);\n+        kafkaConsumer.subscribe(Collections.singletonList(FLOW_TOPIC));\n+        return kafkaConsumer;\n+    }\n+\n+    public static class KafkaInputFlowDeserializer implements Deserializer<FlowDocument> {\n+        @Override\n+        public FlowDocument deserialize(String topic, byte[] data) {\n+            try {\n+                return FlowDocument.parseFrom(data);\n+            } catch (InvalidProtocolBufferException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "c2057c2e1316663c7762008b2a5387060877a1a2",
    "filename": "main/pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/OpenNMS/nephron/blob/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/main/pom.xml",
    "raw_url": "https://github.com/OpenNMS/nephron/raw/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/main/pom.xml",
    "contents_url": "https://api.github.com/repos/OpenNMS/nephron/contents/main/pom.xml?ref=f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8",
    "patch": "@@ -185,6 +185,12 @@\n             <artifactId>junit-vintage-engine</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.opennms.nephron</groupId>\n+            <artifactId>nephron-generator</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n     <profiles>"
  },
  {
    "sha": "c3514d29f0ab4d30a03a0730775a39ac020d262f",
    "filename": "main/src/test/java/org/opennms/nephron/RandomFlowIT.java",
    "status": "modified",
    "additions": 7,
    "deletions": 9,
    "changes": 16,
    "blob_url": "https://github.com/OpenNMS/nephron/blob/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/main/src/test/java/org/opennms/nephron/RandomFlowIT.java",
    "raw_url": "https://github.com/OpenNMS/nephron/raw/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/main/src/test/java/org/opennms/nephron/RandomFlowIT.java",
    "contents_url": "https://api.github.com/repos/OpenNMS/nephron/contents/main/src/test/java/org/opennms/nephron/RandomFlowIT.java?ref=f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8",
    "patch": "@@ -48,10 +48,12 @@\n import java.util.List;\n import java.util.LongSummaryStatistics;\n import java.util.Map;\n+import java.util.Random;\n import java.util.TreeMap;\n import java.util.TreeSet;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n import java.util.stream.Collectors;\n \n import org.apache.beam.runners.flink.FlinkPipelineOptions;\n@@ -82,8 +84,10 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.opennms.nephron.catheter.Exporter;\n+import org.opennms.nephron.catheter.FlowReport;\n import org.opennms.nephron.catheter.Simulation;\n import org.opennms.nephron.elastic.FlowSummary;\n+import org.opennms.nephron.generator.Handler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.testcontainers.containers.KafkaContainer;\n@@ -186,9 +190,7 @@ public void canPee() throws Exception {\n \n         final Instant start = Instant.now().minus(Duration.ofSeconds(10));\n \n-        final Simulation simulation = Simulation.builder()\n-                .withBootstrapServers(this.kafka.getBootstrapServers())\n-                .withFlowTopic(options.getFlowSourceTopic())\n+        final Simulation simulation = Simulation.builder(new Handler(this.kafka.getBootstrapServers(), options.getFlowSourceTopic(), new Random()))\n                 .withTickMs(Duration.ofMillis(100))\n                 .withRealtime(true)\n                 .withExporters(Exporter.builder()\n@@ -310,9 +312,7 @@ public void canPeeWithClockSkew() throws Exception {\n \n         final Instant start = Instant.now().minus(Duration.ofSeconds(10));\n \n-        final Simulation simulation = Simulation.builder()\n-                .withBootstrapServers(this.kafka.getBootstrapServers())\n-                .withFlowTopic(options.getFlowSourceTopic())\n+        final Simulation simulation = Simulation.builder(new Handler(this.kafka.getBootstrapServers(), options.getFlowSourceTopic(), new Random()))\n                 .withTickMs(Duration.ofMillis(100))\n                 .withRealtime(true)\n                 .withExporters(Exporter.builder()\n@@ -474,9 +474,7 @@ public void canPeeApplications() throws Exception {\n \n         final Instant start = Instant.now().minus(Duration.ofSeconds(10));\n \n-        final Simulation simulation = Simulation.builder()\n-                .withBootstrapServers(this.kafka.getBootstrapServers())\n-                .withFlowTopic(options.getFlowSourceTopic())\n+        final Simulation simulation = Simulation.builder(new Handler(this.kafka.getBootstrapServers(), options.getFlowSourceTopic(), new Random()))\n                 .withTickMs(Duration.ofMillis(100))\n                 .withRealtime(true)\n                 .withExporters(Exporter.builder()"
  },
  {
    "sha": "11ca32b7a9bcc748a2ab7f36824c6319a87468e9",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/OpenNMS/nephron/blob/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/pom.xml",
    "raw_url": "https://github.com/OpenNMS/nephron/raw/f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8/pom.xml",
    "contents_url": "https://api.github.com/repos/OpenNMS/nephron/contents/pom.xml?ref=f67cc8fcb5171b9db8bdb0a7921e9ec7a2304ba8",
    "patch": "@@ -52,6 +52,7 @@\n         <module>main</module>\n         <module>proto</module>\n         <module>catheter</module>\n+        <module>generator</module>\n     </modules>\n \n     <dependencyManagement>"
  }
]
