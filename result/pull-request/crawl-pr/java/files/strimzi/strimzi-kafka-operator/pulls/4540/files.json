[
  {
    "sha": "b78ffe2d27c4e4fe87495fa139ca721b732ca6a6",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/CHANGELOG.md",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/CHANGELOG.md?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -6,6 +6,7 @@\n * Remove support for Kafka 2.5.x\n * Remove direct ZooKeeper access for handling user quotas in the User Operator. Add usage of Admin Client API instead.\n * Migrate to CRD v1 (required by Kubernetes 1.22+)\n+* Support for configuring custom Authorizer implementation \n \n ### Changes, deprecations and removals\n "
  },
  {
    "sha": "458fac84c52b5fce9d5f8a0f4969e80e757805c3",
    "filename": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorization.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorization.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorization.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorization.java?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -23,7 +23,8 @@\n @JsonSubTypes({\n         @JsonSubTypes.Type(name = KafkaAuthorizationSimple.TYPE_SIMPLE, value = KafkaAuthorizationSimple.class),\n         @JsonSubTypes.Type(name = KafkaAuthorizationOpa.TYPE_OPA, value = KafkaAuthorizationOpa.class),\n-        @JsonSubTypes.Type(name = KafkaAuthorizationKeycloak.TYPE_KEYCLOAK, value = KafkaAuthorizationKeycloak.class)\n+        @JsonSubTypes.Type(name = KafkaAuthorizationKeycloak.TYPE_KEYCLOAK, value = KafkaAuthorizationKeycloak.class),\n+        @JsonSubTypes.Type(name = KafkaAuthorizationCustom.TYPE_CUSTOM, value = KafkaAuthorizationCustom.class)\n })\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @EqualsAndHashCode\n@@ -33,10 +34,11 @@\n     private Map<String, Object> additionalProperties;\n \n     @Description(\"Authorization type. \" +\n-            \"Currently, the supported types are `simple`, `keycloak`, and `opa`. \" +\n+            \"Currently, the supported types are `simple`, `keycloak`, `opa` and `custom`. \" +\n             \"`simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. \" +\n             \"`keycloak` authorization type uses Keycloak Authorization Services for authorization. \" +\n-            \"`opa` authorization type uses Open Policy Agent based authorization.\")\n+            \"`opa` authorization type uses Open Policy Agent based authorization.\" +\n+            \"`custom` authorization type uses user-provided implementation for authorization.\")\n     public abstract String getType();\n \n     @Override"
  },
  {
    "sha": "10586ad74aff16d5871ab034d5490cc41c490715",
    "filename": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationCustom.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationCustom.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationCustom.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationCustom.java?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker for custom authorization module\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"authorizerClass\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationCustom extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_CUSTOM = \"custom\";\n+\n+    private String authorizerClass;\n+    private List<String> superUsers;\n+\n+    @Description(\"Must be `\" + TYPE_CUSTOM + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_CUSTOM;\n+    }\n+\n+    @Description(\"List of super users, which are user principals with unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"Authorization implementation class, which must be available in classpath\")\n+    public String getAuthorizerClass() {\n+        return authorizerClass;\n+    }\n+\n+    public void setAuthorizerClass(String clazz) {\n+        this.authorizerClass = clazz;\n+    }\n+}"
  },
  {
    "sha": "6f0a992cd93145b3be2b10fe88fcb29fc4e7a8ba",
    "filename": "api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka.yaml",
    "status": "modified",
    "additions": 36,
    "deletions": 15,
    "changes": 51,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka.yaml",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka.yaml",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/api/src/test/resources/io/strimzi/api/kafka/model/040-Crd-kafka.yaml?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -696,6 +696,10 @@ spec:\n                           the Open Policy Agent, for example, when it is temporarily\n                           unavailable). Defaults to `false` - all actions will be\n                           denied.\n+                      authorizerClass:\n+                        type: string\n+                        description: Authorization implementation class, which must\n+                          be available in classpath.\n                       clientId:\n                         type: string\n                         description: OAuth Client ID which the Kafka client can use\n@@ -744,8 +748,8 @@ spec:\n                         type: array\n                         items:\n                           type: string\n-                        description: List of super users. Should contain list of user\n-                          principals which should get unlimited access rights.\n+                        description: List of super users, which are user principals\n+                          with unlimited access rights.\n                       tlsTrustedCertificates:\n                         type: array\n                         items:\n@@ -772,12 +776,15 @@ spec:\n                         - simple\n                         - opa\n                         - keycloak\n+                        - custom\n                         description: Authorization type. Currently, the supported\n-                          types are `simple`, `keycloak`, and `opa`. `simple` authorization\n-                          type uses Kafka's `kafka.security.authorizer.AclAuthorizer`\n+                          types are `simple`, `keycloak`, `opa` and `custom`. `simple`\n+                          authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer`\n                           class for authorization. `keycloak` authorization type uses\n                           Keycloak Authorization Services for authorization. `opa`\n-                          authorization type uses Open Policy Agent based authorization.\n+                          authorization type uses Open Policy Agent based authorization.`custom`\n+                          authorization type uses user-provided implementation for\n+                          authorization.\n                       url:\n                         type: string\n                         example: http://opa:8181/v1/data/kafka/authz/allow\n@@ -7490,6 +7497,10 @@ spec:\n                           the Open Policy Agent, for example, when it is temporarily\n                           unavailable). Defaults to `false` - all actions will be\n                           denied.\n+                      authorizerClass:\n+                        type: string\n+                        description: Authorization implementation class, which must\n+                          be available in classpath.\n                       clientId:\n                         type: string\n                         description: OAuth Client ID which the Kafka client can use\n@@ -7538,8 +7549,8 @@ spec:\n                         type: array\n                         items:\n                           type: string\n-                        description: List of super users. Should contain list of user\n-                          principals which should get unlimited access rights.\n+                        description: List of super users, which are user principals\n+                          with unlimited access rights.\n                       tlsTrustedCertificates:\n                         type: array\n                         items:\n@@ -7566,12 +7577,15 @@ spec:\n                         - simple\n                         - opa\n                         - keycloak\n+                        - custom\n                         description: Authorization type. Currently, the supported\n-                          types are `simple`, `keycloak`, and `opa`. `simple` authorization\n-                          type uses Kafka's `kafka.security.authorizer.AclAuthorizer`\n+                          types are `simple`, `keycloak`, `opa` and `custom`. `simple`\n+                          authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer`\n                           class for authorization. `keycloak` authorization type uses\n                           Keycloak Authorization Services for authorization. `opa`\n-                          authorization type uses Open Policy Agent based authorization.\n+                          authorization type uses Open Policy Agent based authorization.`custom`\n+                          authorization type uses user-provided implementation for\n+                          authorization.\n                       url:\n                         type: string\n                         example: http://opa:8181/v1/data/kafka/authz/allow\n@@ -15865,6 +15879,10 @@ spec:\n                           the Open Policy Agent, for example, when it is temporarily\n                           unavailable). Defaults to `false` - all actions will be\n                           denied.\n+                      authorizerClass:\n+                        type: string\n+                        description: Authorization implementation class, which must\n+                          be available in classpath.\n                       clientId:\n                         type: string\n                         description: OAuth Client ID which the Kafka client can use\n@@ -15913,8 +15931,8 @@ spec:\n                         type: array\n                         items:\n                           type: string\n-                        description: List of super users. Should contain list of user\n-                          principals which should get unlimited access rights.\n+                        description: List of super users, which are user principals\n+                          with unlimited access rights.\n                       tlsTrustedCertificates:\n                         type: array\n                         items:\n@@ -15941,12 +15959,15 @@ spec:\n                         - simple\n                         - opa\n                         - keycloak\n+                        - custom\n                         description: Authorization type. Currently, the supported\n-                          types are `simple`, `keycloak`, and `opa`. `simple` authorization\n-                          type uses Kafka's `kafka.security.authorizer.AclAuthorizer`\n+                          types are `simple`, `keycloak`, `opa` and `custom`. `simple`\n+                          authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer`\n                           class for authorization. `keycloak` authorization type uses\n                           Keycloak Authorization Services for authorization. `opa`\n-                          authorization type uses Open Policy Agent based authorization.\n+                          authorization type uses Open Policy Agent based authorization.`custom`\n+                          authorization type uses user-provided implementation for\n+                          authorization.\n                       url:\n                         type: string\n                         example: http://opa:8181/v1/data/kafka/authz/allow"
  },
  {
    "sha": "2bf54b5463869bbf196cc31c4a87a298c399276e",
    "filename": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -8,6 +8,7 @@\n import io.strimzi.api.kafka.model.CertAndKeySecretSource;\n import io.strimzi.api.kafka.model.CruiseControlSpec;\n import io.strimzi.api.kafka.model.KafkaAuthorization;\n+import io.strimzi.api.kafka.model.KafkaAuthorizationCustom;\n import io.strimzi.api.kafka.model.KafkaAuthorizationKeycloak;\n import io.strimzi.api.kafka.model.KafkaAuthorizationOpa;\n import io.strimzi.api.kafka.model.KafkaAuthorizationSimple;\n@@ -481,6 +482,14 @@ private void configureAuthorization(String clusterName, List<String> superUsers,\n             if (keycloakAuthz.getSuperUsers() != null && keycloakAuthz.getSuperUsers().size() > 0) {\n                 superUsers.addAll(keycloakAuthz.getSuperUsers().stream().map(e -> String.format(\"User:%s\", e)).collect(Collectors.toList()));\n             }\n+        } else if (KafkaAuthorizationCustom.TYPE_CUSTOM.equals(authorization.getType())) {\n+            KafkaAuthorizationCustom customAuthz = (KafkaAuthorizationCustom) authorization;\n+            writer.println(\"authorizer.class.name=\" + customAuthz.getAuthorizerClass());\n+\n+            // User configured super users\n+            if (customAuthz.getSuperUsers() != null && customAuthz.getSuperUsers().size() > 0) {\n+                superUsers.addAll(customAuthz.getSuperUsers().stream().map(e -> String.format(\"User:%s\", e)).collect(Collectors.toList()));\n+            }\n         }\n     }\n "
  },
  {
    "sha": "ebe50c137573e7f97438796616e207fce65a2a15",
    "filename": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationCustom.adoc",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationCustom.adoc",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationCustom.adoc",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationCustom.adoc?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -0,0 +1,45 @@\n+To use custom authorization in Strimzi, you can configure your own `Authorizer` plugin to define Access Control Lists (ACLs).\n+\n+ACLs allow you to define which users have access to which resources at a granular level.\n+\n+Configure the `Kafka` custom resource to use custom authorization.\n+Set the `type` property in the `authorization` section to the value `custom`,\n+and the set following properties.\n+\n+IMPORTANT: The custom Authorizer must implement the org.apache.kafka.server.authorizer.Authorizer interface, and support configuration of super users using the super.users configuration property.\n+\n+\n+=== `authorizerClass`\n+(Required)Java class that implements the `org.apache.kafka.server.authorizer.Authorizer` interface to support the custom ACLs.\n+\n+\n+[id='property-simple-authorization-superusers-{context}']\n+=== `superUsers`\n+A list of user principals treated as super users, so that they are always allowed without querying ACL rules.\n+For more information see xref:con-securing-kafka-authorization-str[Kafka authorization].\n+\n+Configuration required for the custom authorizer can be provided using `Kafka.spec.kafka.config` and those properties will be supplied to custom authorizer in `config` method for initialization.\n+\n+.An example of custom authorization configuration under `Kafka.spec`\n+[source,yaml,subs=\"attributes+\"]\n+----\n+spec:\n+  kafka:\n+    # ...\n+    authorization:\n+      type: custom\n+      authorizerClass: io.mycompany.CustomAuthorizer\n+      superUsers:\n+        - CN=client_1\n+        - user_2\n+        - CN=client_3\n+    # ...\n+    config:\n+      authorization.custom.property1=value1\n+      authorization.custom.property2=value2\n+    # ...\n+----\n+\n+NOTE: The `super.user` configuration option in the `config` property in `Kafka.spec.kafka` is ignored.\n+Designate super users in the `authorization` property instead.\n+For more information, see xref:type-KafkaClusterSpec-reference[Kafka broker configuration]."
  },
  {
    "sha": "d2757447831102d7968deaa785f84cebd7f17b0f",
    "filename": "documentation/modules/appendix_crds.adoc",
    "status": "modified",
    "additions": 31,
    "deletions": 5,
    "changes": 36,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/documentation/modules/appendix_crds.adoc",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/documentation/modules/appendix_crds.adoc",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/documentation/modules/appendix_crds.adoc?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -73,8 +73,8 @@ include::../api/io.strimzi.api.kafka.model.KafkaClusterSpec.adoc[leveloffset=+1]\n |map\n |storage              1.2+<.<|Storage configuration (disk). Cannot be updated. The type depends on the value of the `storage.type` property within the given object, which must be one of [ephemeral, persistent-claim, jbod].\n |xref:type-EphemeralStorage-{context}[`EphemeralStorage`], xref:type-PersistentClaimStorage-{context}[`PersistentClaimStorage`], xref:type-JbodStorage-{context}[`JbodStorage`]\n-|authorization        1.2+<.<|Authorization configuration for Kafka brokers. The type depends on the value of the `authorization.type` property within the given object, which must be one of [simple, opa, keycloak].\n-|xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationOpa-{context}[`KafkaAuthorizationOpa`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`]\n+|authorization        1.2+<.<|Authorization configuration for Kafka brokers. The type depends on the value of the `authorization.type` property within the given object, which must be one of [simple, opa, keycloak, custom].\n+|xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationOpa-{context}[`KafkaAuthorizationOpa`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`], xref:type-KafkaAuthorizationCustom-{context}[`KafkaAuthorizationCustom`]\n |rack                 1.2+<.<|Configuration of the `broker.rack` broker config.\n |xref:type-Rack-{context}[`Rack`]\n |brokerRackInitImage  1.2+<.<|The image of the init container used for initializing the `broker.rack`.\n@@ -909,7 +909,7 @@ include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationSimple.adoc[levelof\n ==== `KafkaAuthorizationSimple` schema properties\n \n \n-The `type` property is a discriminator that distinguishes use of the `KafkaAuthorizationSimple` type from xref:type-KafkaAuthorizationOpa-{context}[`KafkaAuthorizationOpa`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+The `type` property is a discriminator that distinguishes use of the `KafkaAuthorizationSimple` type from xref:type-KafkaAuthorizationOpa-{context}[`KafkaAuthorizationOpa`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`], xref:type-KafkaAuthorizationCustom-{context}[`KafkaAuthorizationCustom`].\n It must have the value `simple` for the type `KafkaAuthorizationSimple`.\n [options=\"header\"]\n |====\n@@ -933,7 +933,7 @@ include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc[leveloffse\n ==== `KafkaAuthorizationOpa` schema properties\n \n \n-The `type` property is a discriminator that distinguishes use of the `KafkaAuthorizationOpa` type from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+The `type` property is a discriminator that distinguishes use of the `KafkaAuthorizationOpa` type from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`], xref:type-KafkaAuthorizationCustom-{context}[`KafkaAuthorizationCustom`].\n It must have the value `opa` for the type `KafkaAuthorizationOpa`.\n [options=\"header\"]\n |====\n@@ -960,7 +960,7 @@ It must have the value `opa` for the type `KafkaAuthorizationOpa`.\n Used in: xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`]\n \n \n-The `type` property is a discriminator that distinguishes use of the `KafkaAuthorizationKeycloak` type from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationOpa-{context}[`KafkaAuthorizationOpa`].\n+The `type` property is a discriminator that distinguishes use of the `KafkaAuthorizationKeycloak` type from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationOpa-{context}[`KafkaAuthorizationOpa`], xref:type-KafkaAuthorizationCustom-{context}[`KafkaAuthorizationCustom`].\n It must have the value `keycloak` for the type `KafkaAuthorizationKeycloak`.\n [options=\"header\"]\n |====\n@@ -985,6 +985,32 @@ It must have the value `keycloak` for the type `KafkaAuthorizationKeycloak`.\n |string array\n |====\n \n+[id='type-KafkaAuthorizationCustom-{context}']\n+### `KafkaAuthorizationCustom` schema reference\n+\n+Used in: xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`]\n+\n+xref:type-KafkaAuthorizationCustom-schema-{context}[Full list of `KafkaAuthorizationCustom` schema properties]\n+\n+include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationCustom.adoc[leveloffset=+1]\n+\n+[id='type-KafkaAuthorizationCustom-schema-{context}']\n+==== `KafkaAuthorizationCustom` schema properties\n+\n+\n+The `type` property is a discriminator that distinguishes use of the `KafkaAuthorizationCustom` type from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationOpa-{context}[`KafkaAuthorizationOpa`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+It must have the value `custom` for the type `KafkaAuthorizationCustom`.\n+[options=\"header\"]\n+|====\n+|Property                |Description\n+|type             1.2+<.<|Must be `custom`.\n+|string\n+|authorizerClass  1.2+<.<|Authorization implementation class, which must be available in classpath.\n+|string\n+|superUsers       1.2+<.<|List of super users, which are user principals with unlimited access rights.\n+|string array\n+|====\n+\n [id='type-Rack-{context}']\n ### `Rack` schema reference\n "
  },
  {
    "sha": "dba1fa04006c26c1a3dee40dc28119091ee4b32f",
    "filename": "helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml",
    "status": "modified",
    "additions": 18,
    "deletions": 6,
    "changes": 24,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -469,6 +469,9 @@ spec:\n                         allowOnError:\n                           type: boolean\n                           description: Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n+                        authorizerClass:\n+                          type: string\n+                          description: Authorization implementation class, which must be available in classpath.\n                         clientId:\n                           type: string\n                           description: OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.\n@@ -499,7 +502,7 @@ spec:\n                           type: array\n                           items:\n                             type: string\n-                          description: List of super users. Should contain list of user principals which should get unlimited access rights.\n+                          description: List of super users, which are user principals with unlimited access rights.\n                         tlsTrustedCertificates:\n                           type: array\n                           items:\n@@ -524,7 +527,8 @@ spec:\n                             - simple\n                             - opa\n                             - keycloak\n-                          description: Authorization type. Currently, the supported types are `simple`, `keycloak`, and `opa`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.\n+                            - custom\n+                          description: Authorization type. Currently, the supported types are `simple`, `keycloak`, `opa` and `custom`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.`custom` authorization type uses user-provided implementation for authorization.\n                         url:\n                           type: string\n                           example: http://opa:8181/v1/data/kafka/authz/allow\n@@ -6102,6 +6106,9 @@ spec:\n                         allowOnError:\n                           type: boolean\n                           description: Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n+                        authorizerClass:\n+                          type: string\n+                          description: Authorization implementation class, which must be available in classpath.\n                         clientId:\n                           type: string\n                           description: OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.\n@@ -6132,7 +6139,7 @@ spec:\n                           type: array\n                           items:\n                             type: string\n-                          description: List of super users. Should contain list of user principals which should get unlimited access rights.\n+                          description: List of super users, which are user principals with unlimited access rights.\n                         tlsTrustedCertificates:\n                           type: array\n                           items:\n@@ -6157,7 +6164,8 @@ spec:\n                             - simple\n                             - opa\n                             - keycloak\n-                          description: Authorization type. Currently, the supported types are `simple`, `keycloak`, and `opa`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.\n+                            - custom\n+                          description: Authorization type. Currently, the supported types are `simple`, `keycloak`, `opa` and `custom`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.`custom` authorization type uses user-provided implementation for authorization.\n                         url:\n                           type: string\n                           example: http://opa:8181/v1/data/kafka/authz/allow\n@@ -13198,6 +13206,9 @@ spec:\n                         allowOnError:\n                           type: boolean\n                           description: Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n+                        authorizerClass:\n+                          type: string\n+                          description: Authorization implementation class, which must be available in classpath.\n                         clientId:\n                           type: string\n                           description: OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.\n@@ -13228,7 +13239,7 @@ spec:\n                           type: array\n                           items:\n                             type: string\n-                          description: List of super users. Should contain list of user principals which should get unlimited access rights.\n+                          description: List of super users, which are user principals with unlimited access rights.\n                         tlsTrustedCertificates:\n                           type: array\n                           items:\n@@ -13253,7 +13264,8 @@ spec:\n                             - simple\n                             - opa\n                             - keycloak\n-                          description: Authorization type. Currently, the supported types are `simple`, `keycloak`, and `opa`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.\n+                            - custom\n+                          description: Authorization type. Currently, the supported types are `simple`, `keycloak`, `opa` and `custom`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.`custom` authorization type uses user-provided implementation for authorization.\n                         url:\n                           type: string\n                           example: http://opa:8181/v1/data/kafka/authz/allow"
  },
  {
    "sha": "51f0da37153964b8f84da391e1882e933edcdd1c",
    "filename": "packaging/helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/packaging/helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/packaging/helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/packaging/helm-charts/helm3/strimzi-kafka-operator/crds/040-Crd-kafka.yaml?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -478,6 +478,9 @@ spec:\n                         allowOnError:\n                           type: boolean\n                           description: Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n+                        authorizerClass:\n+                          type: string\n+                          description: Authorization implementation class, which must be available in classpath.\n                         clientId:\n                           type: string\n                           description: OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.\n@@ -508,7 +511,7 @@ spec:\n                           type: array\n                           items:\n                             type: string\n-                          description: List of super users. Should contain list of user principals which should get unlimited access rights.\n+                          description: List of super users, which are user principals with unlimited access rights.\n                         tlsTrustedCertificates:\n                           type: array\n                           items:\n@@ -533,7 +536,8 @@ spec:\n                             - simple\n                             - opa\n                             - keycloak\n-                          description: Authorization type. Currently, the supported types are `simple`, `keycloak`, and `opa`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.\n+                            - custom\n+                          description: Authorization type. Currently, the supported types are `simple`, `keycloak`, `opa` and `custom`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.`custom` authorization type uses user-provided implementation for authorization.\n                         url:\n                           type: string\n                           example: http://opa:8181/v1/data/kafka/authz/allow"
  },
  {
    "sha": "2873683e9ba6728bf14201458e9534aa0fd471af",
    "filename": "packaging/install/cluster-operator/040-Crd-kafka.yaml",
    "status": "modified",
    "additions": 12,
    "deletions": 5,
    "changes": 17,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/packaging/install/cluster-operator/040-Crd-kafka.yaml",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/packaging/install/cluster-operator/040-Crd-kafka.yaml",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/packaging/install/cluster-operator/040-Crd-kafka.yaml?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -705,6 +705,10 @@ spec:\n                           the Open Policy Agent, for example, when it is temporarily\n                           unavailable). Defaults to `false` - all actions will be\n                           denied.\n+                      authorizerClass:\n+                        type: string\n+                        description: Authorization implementation class, which must\n+                          be available in classpath.\n                       clientId:\n                         type: string\n                         description: OAuth Client ID which the Kafka client can use\n@@ -753,8 +757,8 @@ spec:\n                         type: array\n                         items:\n                           type: string\n-                        description: List of super users. Should contain list of user\n-                          principals which should get unlimited access rights.\n+                        description: List of super users, which are user principals\n+                          with unlimited access rights.\n                       tlsTrustedCertificates:\n                         type: array\n                         items:\n@@ -781,12 +785,15 @@ spec:\n                         - simple\n                         - opa\n                         - keycloak\n+                        - custom\n                         description: Authorization type. Currently, the supported\n-                          types are `simple`, `keycloak`, and `opa`. `simple` authorization\n-                          type uses Kafka's `kafka.security.authorizer.AclAuthorizer`\n+                          types are `simple`, `keycloak`, `opa` and `custom`. `simple`\n+                          authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer`\n                           class for authorization. `keycloak` authorization type uses\n                           Keycloak Authorization Services for authorization. `opa`\n-                          authorization type uses Open Policy Agent based authorization.\n+                          authorization type uses Open Policy Agent based authorization.`custom`\n+                          authorization type uses user-provided implementation for\n+                          authorization.\n                       url:\n                         type: string\n                         example: http://opa:8181/v1/data/kafka/authz/allow"
  },
  {
    "sha": "511bd39061be00d13b8a4a9e970d64639cd057a6",
    "filename": "systemtest/src/test/java/io/strimzi/systemtest/security/custom/CustomAuthorizerST.java",
    "status": "added",
    "additions": 207,
    "deletions": 0,
    "changes": 207,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/34f5265abdb2c3f4a926fd306894f82ca9694579/systemtest/src/test/java/io/strimzi/systemtest/security/custom/CustomAuthorizerST.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/34f5265abdb2c3f4a926fd306894f82ca9694579/systemtest/src/test/java/io/strimzi/systemtest/security/custom/CustomAuthorizerST.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/systemtest/src/test/java/io/strimzi/systemtest/security/custom/CustomAuthorizerST.java?ref=34f5265abdb2c3f4a926fd306894f82ca9694579",
    "patch": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.security.custom;\n+\n+\n+import io.strimzi.api.kafka.model.AclOperation;\n+import io.strimzi.api.kafka.model.KafkaAuthorizationSimple;\n+import io.strimzi.api.kafka.model.KafkaUser;\n+import io.strimzi.api.kafka.model.listener.KafkaListenerAuthenticationTls;\n+import io.strimzi.api.kafka.model.listener.arraylistener.KafkaListenerType;\n+import io.strimzi.systemtest.AbstractST;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.kafkaclients.internalClients.InternalKafkaClient;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n+import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.resources.crd.KafkaUserResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.strimzi.systemtest.Constants.REGRESSION;\n+import static io.strimzi.systemtest.Constants.INTERNAL_CLIENTS_USED;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@Tag(REGRESSION)\n+public class CustomAuthorizerST extends AbstractST {\n+    static final String NAMESPACE = \"custom-authorizer-test\";\n+    static final String CLUSTER_NAME = \"custom-authorizer\";\n+    static final String ADMIN = \"sre-admin\";\n+    private static final Logger LOGGER = LogManager.getLogger(CustomAuthorizerST.class);\n+\n+    @Test\n+    @Tag(INTERNAL_CLIENTS_USED)\n+    void testAclRuleReadAndWrite() {\n+        final String kafkaUserWrite = \"kafka-user-write\";\n+        final String kafkaUserRead = \"kafka-user-read\";\n+        final String topicName = KafkaTopicUtils.generateRandomNameOfTopic();\n+        final int numberOfMessages = 500;\n+        final String consumerGroupName = \"consumer-group-name-1\";\n+\n+        KafkaTopicResource.createAndWaitForReadiness(KafkaTopicResource.topic(CLUSTER_NAME, topicName).build());\n+\n+        KafkaUser writeUser = KafkaUserResource.tlsUser(CLUSTER_NAME, kafkaUserWrite)\n+            .editSpec()\n+                .withNewKafkaUserAuthorizationSimple()\n+                    .addNewAcl()\n+                        .withNewAclRuleTopicResource()\n+                            .withName(topicName)\n+                        .endAclRuleTopicResource()\n+                        .withOperation(AclOperation.WRITE)\n+                    .endAcl()\n+                    .addNewAcl()\n+                        .withNewAclRuleTopicResource()\n+                            .withName(topicName)\n+                        .endAclRuleTopicResource()\n+                        .withOperation(AclOperation.DESCRIBE)\n+                    .endAcl()\n+                .endKafkaUserAuthorizationSimple()\n+            .endSpec()\n+            .build();\n+\n+        writeUser = KafkaUserResource.createAndWaitForReadiness(writeUser);\n+\n+        LOGGER.info(\"Checking KafkaUser {} that is able to send messages to topic '{}'\", kafkaUserWrite, topicName);\n+\n+        KafkaClientsResource.createAndWaitForReadiness(KafkaClientsResource.deployKafkaClients(true, kafkaClientsName + \"-\" + Constants.KAFKA_CLIENTS, writeUser).build());\n+        String kafkaClientsPodName = kubeClient().listPodsByPrefixInName(kafkaClientsName + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withTopicName(topicName)\n+            .withNamespaceName(NAMESPACE)\n+            .withClusterName(CLUSTER_NAME)\n+            .withKafkaUsername(kafkaUserWrite)\n+            .withMessageCount(numberOfMessages)\n+            .withUsingPodName(kafkaClientsPodName)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .build();\n+\n+        assertThat(internalKafkaClient.sendMessagesTls(), is(numberOfMessages));\n+        assertThat(internalKafkaClient.receiveMessagesTls(), is(0));\n+\n+        KafkaUser readUser = KafkaUserResource.tlsUser(CLUSTER_NAME, kafkaUserRead)\n+            .editSpec()\n+                .withNewKafkaUserAuthorizationSimple()\n+                    .addNewAcl()\n+                        .withNewAclRuleTopicResource()\n+                            .withName(topicName)\n+                        .endAclRuleTopicResource()\n+                        .withOperation(AclOperation.READ)\n+                    .endAcl()\n+                    .addNewAcl()\n+                        .withNewAclRuleGroupResource()\n+                            .withName(consumerGroupName)\n+                        .endAclRuleGroupResource()\n+                        .withOperation(AclOperation.READ)\n+                    .endAcl()\n+                    .addNewAcl()\n+                        .withNewAclRuleTopicResource()\n+                            .withName(topicName)\n+                        .endAclRuleTopicResource()\n+                        .withOperation(AclOperation.DESCRIBE)\n+                    .endAcl()\n+                .endKafkaUserAuthorizationSimple()\n+            .endSpec()\n+            .build();\n+\n+        readUser = KafkaUserResource.createAndWaitForReadiness(readUser);\n+        KafkaClientsResource.createAndWaitForReadiness(KafkaClientsResource.deployKafkaClients(true, kafkaClientsName + \"-\" + Constants.KAFKA_CLIENTS, readUser).build());\n+        kafkaClientsPodName = kubeClient().listPodsByPrefixInName(kafkaClientsName + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        InternalKafkaClient newInternalKafkaClient = internalKafkaClient.toBuilder()\n+            .withKafkaUsername(kafkaUserRead)\n+            .withConsumerGroupName(consumerGroupName)\n+            .withUsingPodName(kafkaClientsPodName)\n+            .build();\n+\n+        assertThat(newInternalKafkaClient.receiveMessagesTls(), is(numberOfMessages));\n+\n+        LOGGER.info(\"Checking KafkaUser {} that is not able to send messages to topic '{}'\", kafkaUserRead, topicName);\n+        assertThat(newInternalKafkaClient.sendMessagesTls(), is(-1));\n+    }\n+\n+    @Test\n+    @Tag(INTERNAL_CLIENTS_USED)\n+    void testAclWithSuperUser() {\n+        KafkaTopicResource.createAndWaitForReadiness(KafkaTopicResource.topic(CLUSTER_NAME, TOPIC_NAME).build());\n+\n+        KafkaUser adminUser = KafkaUserResource.tlsUser(CLUSTER_NAME, ADMIN)\n+            .editSpec()\n+                .withNewKafkaUserAuthorizationSimple()\n+                    .addNewAcl()\n+                        .withNewAclRuleTopicResource()\n+                            .withName(TOPIC_NAME)\n+                        .endAclRuleTopicResource()\n+                        .withOperation(AclOperation.WRITE)\n+                    .endAcl()\n+                    .addNewAcl()\n+                        .withNewAclRuleTopicResource()\n+                            .withName(TOPIC_NAME)\n+                        .endAclRuleTopicResource()\n+                        .withOperation(AclOperation.DESCRIBE)\n+                    .endAcl()\n+                .endKafkaUserAuthorizationSimple()\n+            .endSpec()\n+            .build();\n+\n+        adminUser = KafkaUserResource.createAndWaitForReadiness(adminUser);\n+        KafkaClientsResource.createAndWaitForReadiness(KafkaClientsResource.deployKafkaClients(true, kafkaClientsName + \"-\" + Constants.KAFKA_CLIENTS, adminUser).build());\n+        String kafkaClientsPodName = kubeClient().listPodsByPrefixInName(kafkaClientsName + \"-\" + Constants.KAFKA_CLIENTS).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Checking kafka super user:{} that is able to send messages to topic:{}\", ADMIN, TOPIC_NAME);\n+\n+        InternalKafkaClient internalKafkaClient = new InternalKafkaClient.Builder()\n+            .withTopicName(TOPIC_NAME)\n+            .withNamespaceName(NAMESPACE)\n+            .withClusterName(CLUSTER_NAME)\n+            .withKafkaUsername(ADMIN)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withListenerName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+            .withUsingPodName(kafkaClientsPodName)\n+            .build();\n+\n+        assertThat(internalKafkaClient.sendMessagesTls(), is(MESSAGE_COUNT));\n+\n+        LOGGER.info(\"Checking kafka super user:{} that is able to read messages to topic:{} regardless that \" +\n+                \"we configured Acls with only write operation\", ADMIN, TOPIC_NAME);\n+\n+        assertThat(internalKafkaClient.receiveMessagesTls(), is(MESSAGE_COUNT));\n+    }\n+\n+    @BeforeAll\n+    public void setup() {\n+        ResourceManager.setClassResources();\n+        installClusterOperator(NAMESPACE);\n+\n+        KafkaResource.createAndWaitForReadiness(KafkaResource.kafkaEphemeral(CLUSTER_NAME,  1, 1)\n+            .editSpec()\n+                .editKafka()\n+                    .withNewKafkaAuthorizationCustom()\n+                        .withAuthorizerClass(KafkaAuthorizationSimple.AUTHORIZER_CLASS_NAME)\n+                        .withSuperUsers(\"CN=\" + ADMIN)\n+                    .endKafkaAuthorizationCustom()\n+                    .withNewListeners()\n+                        .addNewGenericKafkaListener()\n+                            .withName(Constants.TLS_LISTENER_DEFAULT_NAME)\n+                            .withPort(9093)\n+                            .withType(KafkaListenerType.INTERNAL)\n+                            .withTls(true)\n+                            .withAuth(new KafkaListenerAuthenticationTls())\n+                        .endGenericKafkaListener()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .build());\n+    }\n+}"
  }
]
