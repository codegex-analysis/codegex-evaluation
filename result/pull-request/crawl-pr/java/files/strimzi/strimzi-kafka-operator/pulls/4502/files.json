[
  {
    "sha": "99d2f6731e1e710720cb04f4fccc2397044cea02",
    "filename": "topic-operator/src/main/java/io/strimzi/operator/topic/TopicOperator.java",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/18bde483d4574c7449b842bddfe0a009b6a3a866/topic-operator/src/main/java/io/strimzi/operator/topic/TopicOperator.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/18bde483d4574c7449b842bddfe0a009b6a3a866/topic-operator/src/main/java/io/strimzi/operator/topic/TopicOperator.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/topic-operator/src/main/java/io/strimzi/operator/topic/TopicOperator.java?ref=18bde483d4574c7449b842bddfe0a009b6a3a866",
    "patch": "@@ -12,6 +12,7 @@\n import io.micrometer.core.instrument.Tag;\n import io.micrometer.core.instrument.Tags;\n import io.micrometer.core.instrument.Timer;\n+import io.micrometer.core.instrument.Meter;\n import io.strimzi.api.kafka.model.KafkaTopic;\n import io.strimzi.api.kafka.model.KafkaTopicBuilder;\n import io.strimzi.api.kafka.model.status.KafkaTopicStatus;\n@@ -39,6 +40,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -473,6 +475,33 @@ public void setTopicCount(int topics) {\n                 action.execute().onComplete(actionResult -> {\n                     LOGGER.debug(\"{}: Executing handler for action {} on topic {}\", logContext, action, lockName);\n                     action.result = actionResult;\n+\n+                    String keytag = namespace + \":\" + \"KafkaTopic\" + \"/\" + key.asKubeName().toString();\n+                    Optional<Meter> metric = metrics.meterRegistry().getMeters()\n+                            .stream()\n+                            .filter(meter -> meter.getId().getName().equals(METRICS_PREFIX + \"resource.state\") &&\n+                                    meter.getId().getTags().contains(Tag.of(\"kind\", \"KafkaTopic\")) &&\n+                                    meter.getId().getTags().contains(Tag.of(\"name\", key.asKubeName().toString())) &&\n+                                    meter.getId().getTags().contains(Tag.of(\"resource-namespace\", namespace))\n+                            ).findFirst();\n+                    if (metric.isPresent()) {\n+                        // remove metric so it can be re-added with new tags\n+                        metrics.meterRegistry().remove(metric.get().getId());\n+                        LOGGER.debug(\"Removed metric \" + METRICS_PREFIX + \"resource.state{}\", keytag);\n+                    }\n+\n+                    if (action.topic != null) {\n+                        boolean succeeded = actionResult.succeeded();\n+                        Tags metricTags;\n+                        metricTags = Tags.of(\n+                                Tag.of(\"kind\", action.topic.getKind()),\n+                                Tag.of(\"name\", action.topic.getMetadata().getName()),\n+                                Tag.of(\"resource-namespace\", namespace),\n+                                Tag.of(\"reason\", succeeded ? \"none\" : actionResult.cause().getMessage() == null ? \"unknown error\" : actionResult.cause().getMessage()));\n+\n+                        metrics.gauge(METRICS_PREFIX + \"resource.state\", \"Current state of the resource: 1 ready, 0 fail\", metricTags).set(actionResult.succeeded() ? 1 : 0);\n+                        LOGGER.debug(\"Updated metric \" + METRICS_PREFIX + \"resource.state{} = {}\", metricTags, succeeded ? 1 : 0);\n+                    }\n                     // Update status with lock held so that event is ignored via statusUpdateGeneration\n                     action.updateStatus(logContext).onComplete(statusResult -> {\n                         if (statusResult.failed()) {"
  },
  {
    "sha": "8fdee75a6b873a45fe2ea07de8841887b22ceb3d",
    "filename": "topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorTest.java",
    "status": "modified",
    "additions": 64,
    "deletions": 1,
    "changes": 65,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/18bde483d4574c7449b842bddfe0a009b6a3a866/topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorTest.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/18bde483d4574c7449b842bddfe0a009b6a3a866/topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorTest.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorTest.java?ref=18bde483d4574c7449b842bddfe0a009b6a3a866",
    "patch": "@@ -158,13 +158,14 @@ public void testOnKafkaTopicAdded_invalidResource(VertxTestContext context) {\n                     .withConfig(singletonMap(null, null))\n                 .endSpec()\n             .build();\n+        String errorMessage = \"KafkaTopic's spec.config has invalid entry: The key 'null' of the topic config is invalid: The value corresponding to the key must have a string, number or boolean value but the value was null\";\n         mockK8s.setGetFromNameResponse(new ResourceName(kafkaTopic), Future.succeededFuture(kafkaTopic));\n         LogContext logContext = LogContext.kubeWatch(Watcher.Action.ADDED, kafkaTopic);\n         Checkpoint async = context.checkpoint();\n         topicOperator.onResourceEvent(logContext, kafkaTopic, ADDED).onComplete(ar -> {\n             assertFailed(context, ar);\n             context.verify(() -> assertThat(ar.cause(), instanceOf(InvalidTopicException.class)));\n-            context.verify(() -> assertThat(ar.cause().getMessage(), is(\"KafkaTopic's spec.config has invalid entry: The key 'null' of the topic config is invalid: The value corresponding to the key must have a string, number or boolean value but the value was null\")));\n+            context.verify(() -> assertThat(ar.cause().getMessage(), is(errorMessage)));\n             mockKafka.assertEmpty(context);\n             mockTopicStore.assertEmpty(context);\n             assertNotReadyStatus(context, new InvalidTopicException(null, ar.cause().getMessage()));\n@@ -177,6 +178,13 @@ public void testOnKafkaTopicAdded_invalidResource(VertxTestContext context) {\n \n                 assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().count(), is(0L));\n                 assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().totalTime(TimeUnit.MILLISECONDS), is(0.0));\n+\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"resource.state\")\n+                        .tag(\"kind\", \"KafkaTopic\")\n+                        .tag(\"name\", \"invalid\")\n+                        .tag(\"resource-namespace\", \"default-namespace\")\n+                        .tag(\"reason\", errorMessage)\n+                        .gauge().value(), is(0.0));\n             });\n             async.flag();\n \n@@ -334,6 +342,15 @@ public void testOnTopicCreated(VertxTestContext context) {\n             mockK8s.assertExists(context, resourceName);\n             Topic t = TopicSerialization.fromTopicMetadata(topicMetadata);\n             mockTopicStore.assertContains(context, t);\n+            context.verify(() -> {\n+                MeterRegistry registry = metrics.meterRegistry();\n+\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"resource.state\")\n+                        .tag(\"kind\", \"KafkaTopic\")\n+                        .tag(\"name\", topicName.toString())\n+                        .tag(\"resource-namespace\", \"default-namespace\")\n+                        .gauge().value(), is(1.0));\n+            });\n             async.flag();\n         });\n     }\n@@ -390,6 +407,12 @@ public void testOnTopicCreated_retry(VertxTestContext context) {\n \n                 assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().count(), is(1L));\n                 assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().totalTime(TimeUnit.MILLISECONDS), greaterThan(0.0));\n+\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"resource.state\")\n+                        .tag(\"kind\", \"KafkaTopic\")\n+                        .tag(\"name\", topicName.toString())\n+                        .tag(\"resource-namespace\", \"default-namespace\")\n+                        .gauge().value(), is(1.0));\n             });\n             async.flag();\n         });\n@@ -476,6 +499,23 @@ public void testOnTopicChanged(VertxTestContext context) {\n                 context.verify(() -> assertThat(TopicSerialization.fromTopicResource(ar2.result()).getConfig().get(\"cleanup.policy\"), is(\"baz\")));\n                 async.flag();\n             });\n+\n+            context.verify(() -> {\n+                MeterRegistry registry = metrics.meterRegistry();\n+\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations\").tag(\"kind\", \"KafkaTopic\").counter().count(), is(1.0));\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.successful\").tag(\"kind\", \"KafkaTopic\").counter().count(), is(1.0));\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.failed\").tag(\"kind\", \"KafkaTopic\").counter().count(), is(0.0));\n+\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().count(), is(1L));\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().totalTime(TimeUnit.MILLISECONDS), greaterThan(0.0));\n+\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"resource.state\")\n+                        .tag(\"kind\", \"KafkaTopic\")\n+                        .tag(\"name\", topicName.toString())\n+                        .tag(\"resource-namespace\", \"default-namespace\")\n+                        .gauge().value(), is(1.0));\n+            });\n             async.flag();\n         });\n     }\n@@ -691,6 +731,12 @@ public void testReconcile_withResource_withKafka_noPrivate_matching(VertxTestCon\n \n                 assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().count(), is(1L));\n                 assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().totalTime(TimeUnit.MILLISECONDS), greaterThan(0.0));\n+\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"resource.state\")\n+                        .tag(\"kind\", \"KafkaTopic\")\n+                        .tag(\"name\", topicName.toString())\n+                        .tag(\"resource-namespace\", \"default-namespace\")\n+                        .gauge().value(), is(0.0));\n             });\n \n         });\n@@ -1010,6 +1056,17 @@ public void testOnKafkaTopicChanged(VertxTestContext context) {\n                 context.verify(() -> assertThat(TopicSerialization.fromTopicResource(ar2.result()).getConfig().get(\"cleanup.policy\"), is(\"baz\")));\n                 async.countDown();\n             });\n+\n+            context.verify(() -> {\n+                MeterRegistry registry = metrics.meterRegistry();\n+\n+                assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"resource.state\")\n+                        .tag(\"kind\", \"KafkaTopic\")\n+                        .tag(\"name\", topicName.toString())\n+                        .tag(\"resource-namespace\", \"default-namespace\")\n+                        .gauge().value(), is(1.0));\n+            });\n+\n             async.countDown();\n             try {\n                 async.await(60, TimeUnit.SECONDS);\n@@ -1193,6 +1250,12 @@ public void testReconcileMetrics(VertxTestContext context) throws InterruptedExc\n             assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().count(), is(1L));\n             assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"reconciliations.duration\").tag(\"kind\", \"KafkaTopic\").timer().totalTime(TimeUnit.MILLISECONDS), greaterThan(0.0));\n \n+            assertThat(registry.get(TopicOperator.METRICS_PREFIX + \"resource.state\")\n+                    .tag(\"kind\", \"KafkaTopic\")\n+                    .tag(\"name\", topicName.toString())\n+                    .tag(\"resource-namespace\", \"default-namespace\")\n+                    .gauge().value(), is(1.0));\n+\n             async.flag();\n         })));\n     }"
  }
]
