[
  {
    "sha": "119b7a295b1928259caabf051d0dd93e6b40aeb1",
    "filename": "certificate-manager/src/main/java/io/strimzi/certs/CertManager.java",
    "status": "modified",
    "additions": 0,
    "deletions": 34,
    "changes": 34,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/main/java/io/strimzi/certs/CertManager.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/main/java/io/strimzi/certs/CertManager.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/certificate-manager/src/main/java/io/strimzi/certs/CertManager.java?ref=cbdcc7b28ce39e0305231aee03911dd2bd75f932",
    "patch": "@@ -23,16 +23,6 @@\n      */\n     void generateSelfSignedCert(File keyFile, File certFile, Subject sbj, int days) throws IOException;\n \n-    /**\n-     * Generate a self-signed certificate\n-     *\n-     * @param keyFile path to the file which will contain the private key\n-     * @param certFile path to the file which will contain the self signed certificate\n-     * @param days certificate duration\n-     * @throws IOException If an input or output file could not be read/written.\n-     */\n-    void generateSelfSignedCert(File keyFile, File certFile, int days) throws IOException;\n-\n     /**\n      * Renew a new self-signed certificate, keeping the existing private key\n      * @param keyFile path to the file containing the existing private key\n@@ -95,18 +85,6 @@ void deleteFromTrustStore(List<String> aliases, File trustStoreFile, String trus\n      */\n     void generateCsr(File keyFile, File csrFile, Subject sbj) throws IOException;\n \n-    /**\n-     * Generate a certificate signed by a Certificate Authority\n-     *\n-     * @param csrFile path to the file containing the certificate sign request\n-     * @param caKey path to the file containing the CA private key\n-     * @param caCert path to the file containing the CA certificate\n-     * @param crtFile path to the file which will contain the signed certificate\n-     * @param days certificate duration\n-     * @throws IOException If an input or output file could not be read/written.\n-     */\n-    void generateCert(File csrFile, File caKey, File caCert, File crtFile, int days) throws IOException;\n-\n     /**\n      * Generate a certificate signed by a Certificate Authority\n      *\n@@ -120,18 +98,6 @@ void deleteFromTrustStore(List<String> aliases, File trustStoreFile, String trus\n      */\n     void generateCert(File csrFile, File caKey, File caCert, File crtFile, Subject sbj, int days) throws IOException;\n \n-    /**\n-     * Generate a certificate signed by a Certificate Authority\n-     *\n-     * @param csrFile path to the file containing the certificate sign request\n-     * @param caKey CA private key bytes\n-     * @param caCert CA certificate bytes\n-     * @param crtFile path to the file which will contain the signed certificate\n-     * @param days certificate duration\n-     * @throws IOException If an input or output file could not be read/written.\n-     */\n-    void generateCert(File csrFile, byte[] caKey, byte[] caCert, File crtFile, int days) throws IOException;\n-\n     /**\n      * Generate a certificate signed by a Certificate Authority\n      *"
  },
  {
    "sha": "1388fff1a1ca1bc746751ee7cc1de8733cba92e1",
    "filename": "certificate-manager/src/main/java/io/strimzi/certs/OpenSslCertManager.java",
    "status": "modified",
    "additions": 496,
    "deletions": 217,
    "changes": 713,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/main/java/io/strimzi/certs/OpenSslCertManager.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/main/java/io/strimzi/certs/OpenSslCertManager.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/certificate-manager/src/main/java/io/strimzi/certs/OpenSslCertManager.java?ref=cbdcc7b28ce39e0305231aee03911dd2bd75f932",
    "patch": "@@ -24,166 +24,76 @@\n import java.security.cert.CertificateException;\n import java.security.cert.CertificateFactory;\n import java.security.cert.X509Certificate;\n-import java.util.ArrayList;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n-import static java.util.Arrays.asList;\n-\n /**\n- * An OpenSSL based certificates manager\n+ * An OpenSSL based certificate manager.\n+ * @see \"Chapter 11 of 'Bulletproof SSL and TLS' by Ivan Ristic.\"\n+ * @see \"The man page for <code>config(5)</code>.\"\n+ * @see \"The man page for <code>openssl-ca(1)</code>.\"\n+ * @see \"The man page for <code>openssl-req(1)</code>.\"\n  */\n public class OpenSslCertManager implements CertManager {\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER = new DateTimeFormatterBuilder()\n+            .appendValue(ChronoField.YEAR, 4)\n+            .appendValue(ChronoField.MONTH_OF_YEAR, 2)\n+            .appendValue(ChronoField.DAY_OF_MONTH, 2)\n+            .appendValue(ChronoField.HOUR_OF_DAY, 2)\n+            .appendValue(ChronoField.MINUTE_OF_HOUR, 2)\n+            .appendValue(ChronoField.SECOND_OF_MINUTE, 2)\n+            .appendOffsetId().toFormatter();\n     public static final int MAXIMUM_CN_LENGTH = 64;\n \n     private static final Logger log = LogManager.getLogger(OpenSslCertManager.class);\n+    public static final ZoneId UTC = ZoneId.of(\"UTC\");\n \n     public OpenSslCertManager() {}\n \n-    @Override\n-    public void generateSelfSignedCert(File keyFile, File certFile, int days) throws IOException {\n-        generateSelfSignedCert(keyFile, certFile, null, days);\n-    }\n-\n-    @Override\n-    public void generateSelfSignedCert(File keyFile, File certFile, Subject sbj, int days) throws IOException {\n-\n-        List<String> cmd = new ArrayList<>(asList(\"openssl\", \"req\", \"-x509\", \"-new\", \"-days\", String.valueOf(days), \"-batch\", \"-nodes\",\n-                \"-out\", certFile.getAbsolutePath(), \"-keyout\", keyFile.getAbsolutePath()));\n-\n-        File sna = null;\n-        if (sbj != null) {\n-\n-            if (sbj.subjectAltNames() != null && sbj.subjectAltNames().size() > 0) {\n-\n-                // subject alt names need to be in an openssl configuration file\n-                sna = buildConfigFile(sbj, true);\n-                cmd.addAll(asList(\"-config\", sna.toPath().toString(), \"-extensions\", \"v3_req\"));\n-            }\n-\n-            cmd.addAll(asList(\"-subj\", sbj.toString()));\n-        }\n-\n-        exec(cmd);\n-\n-        if (sna != null) {\n-            if (!sna.delete()) {\n-                log.warn(\"{} cannot be deleted\", sna.getName());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addCertToTrustStore(File certFile, String certAlias, File trustStoreFile, String trustStorePassword)\n-            throws IOException, CertificateException, KeyStoreException, NoSuchAlgorithmException {\n-\n-        try {\n-            FileInputStream isTrustStore = null;\n-            try {\n-                // check if the truststore file is empty or not, for loading its content eventually\n-                // the KeyStore class is able to create an empty store if the input stream is null\n-                if (trustStoreFile.length() > 0) {\n-                    isTrustStore = new FileInputStream(trustStoreFile);\n-                }\n-\n-                try (FileInputStream isCertificate = new FileInputStream(certFile)) {\n-\n-                    CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n-                    X509Certificate certificate = (X509Certificate) certFactory.generateCertificate(isCertificate);\n-\n-                    KeyStore trustStore = KeyStore.getInstance(\"PKCS12\");\n-                    trustStore.load(isTrustStore, trustStorePassword.toCharArray());\n-                    trustStore.setEntry(certAlias, new KeyStore.TrustedCertificateEntry(certificate), null);\n-\n-                    try (FileOutputStream osTrustStore = new FileOutputStream(trustStoreFile)) {\n-                        trustStore.store(osTrustStore, trustStorePassword.toCharArray());\n-                    }\n-                }\n-            } finally {\n-                if (isTrustStore != null) {\n-                    isTrustStore.close();\n-                }\n-            }\n-        } catch (IOException | CertificateException | KeyStoreException | NoSuchAlgorithmException e) {\n-            throw e;\n+    void checkValidity(ZonedDateTime notBefore, ZonedDateTime notAfter) {\n+        Objects.requireNonNull(notBefore);\n+        Objects.requireNonNull(notAfter);\n+        if (!notBefore.isBefore(notAfter)) {\n+            throw new IllegalArgumentException(\"Invalid notBefore and notAfter: \" + notBefore + \" must be before \" + notAfter);\n         }\n     }\n \n-    @Override\n-    public void addKeyAndCertToKeyStore(File keyFile, File certFile, String alias, File keyStoreFile, String keyStorePassword) throws IOException {\n-\n-        List<String> cmd = asList(\"openssl\", \"pkcs12\", \"-export\", \"-in\", certFile.getAbsolutePath(),\n-                \"-inkey\", keyFile.getAbsolutePath(), \"-name\", alias, \"-out\", keyStoreFile.getAbsolutePath(), \"-passout\",\n-                \"pass:\" + keyStorePassword);\n-\n-        exec(cmd);\n-    }\n-\n-    @Override\n-    public void deleteFromTrustStore(List<String> aliases, File trustStoreFile, String trustStorePassword)\n-            throws IOException, CertificateException, KeyStoreException, NoSuchAlgorithmException {\n-\n-        try {\n-            try (FileInputStream isTrustStore = new FileInputStream(trustStoreFile)) {\n-                KeyStore trustStore = KeyStore.getInstance(\"PKCS12\");\n-                trustStore.load(isTrustStore, trustStorePassword.toCharArray());\n-                for (String alias : aliases) {\n-                    trustStore.deleteEntry(alias);\n-                }\n-                try (FileOutputStream osTrustStore = new FileOutputStream(trustStoreFile)) {\n-                    trustStore.store(osTrustStore, trustStorePassword.toCharArray());\n+    static void delete(Path fileOrDir) throws IOException {\n+        if (fileOrDir != null)\n+            if (Files.isDirectory(fileOrDir)) {\n+                Files.walk(fileOrDir)\n+                        .sorted(Comparator.reverseOrder())\n+                        .forEach(path -> {\n+                            try {\n+                                Files.delete(path);\n+                            } catch (IOException e) {\n+                                log.debug(\"File could not be deleted: {}\", fileOrDir);\n+                            }\n+                        });\n+            } else {\n+                if (!Files.deleteIfExists(fileOrDir)) {\n+                    log.debug(\"File not deleted, because it did not exist: {}\", fileOrDir);\n                 }\n             }\n-        } catch (IOException | CertificateException | KeyStoreException | NoSuchAlgorithmException e) {\n-            throw e;\n-        }\n     }\n \n-    @Override\n-    public void renewSelfSignedCert(File keyFile, File certFile, Subject sbj, int days) throws IOException {\n-        // See https://serverfault.com/a/501513\n-\n-        //openssl req -new -key root.key -out newcsr.csr\n-        File csrFile = Files.createTempFile(\"renewal\", \".csr\").toFile();\n-\n-        List<String> cmd = new ArrayList<>(asList(\"openssl\", \"req\",\n-                \"-new\",\n-                \"-batch\",\n-                \"-out\", csrFile.getAbsolutePath(),\n-                \"-key\", keyFile.getAbsolutePath()));\n-        if (sbj != null) {\n-            if (sbj.subjectAltNames() != null && sbj.subjectAltNames().size() > 0) {\n-                File sna = buildConfigFile(sbj, true);\n-                cmd.addAll(asList(\"-config\", sna.toPath().toString(), \"-extensions\", \"v3_req\"));\n-            }\n-            cmd.addAll(asList(\"-subj\", sbj.toString()));\n-        }\n-\n-        exec(cmd);\n-\n-        //openssl x509 -req -days 3650 -in newcsr.csr -signkey root.key -out newroot.pem\n-        List<String> cmd2 = new ArrayList<>(asList(\"openssl\", \"x509\",\n-                \"-req\",\n-                \"-days\", String.valueOf(days),\n-                \"-in\", csrFile.getAbsolutePath(),\n-                \"-signkey\", keyFile.getAbsolutePath(),\n-                \"-out\", certFile.getAbsolutePath()));\n-\n-        // subject alt names need to be in an openssl configuration file\n-        File sna = buildConfigFile(sbj, true);\n-        cmd2.addAll(asList(\"-extfile\", sna.toPath().toString(), \"-extensions\", \"v3_req\"));\n-\n-        exec(cmd2);\n-\n-        if (!sna.delete()) {\n-            log.warn(\"{} cannot be deleted\", sna.getName());\n-        }\n-\n-        if (!csrFile.delete()) {\n-            log.warn(\"{} cannot be deleted\", csrFile.getName());\n+    private Path createDefaultConfig() throws IOException {\n+        try (InputStream is = getClass().getClassLoader().getResourceAsStream(\"openssl.conf\")) {\n+            Path openSslConf = Files.createTempFile(null, null);\n+            Files.copy(is, openSslConf, StandardCopyOption.REPLACE_EXISTING);\n+            return openSslConf;\n         }\n     }\n \n@@ -194,9 +104,9 @@ public void renewSelfSignedCert(File keyFile, File certFile, Subject sbj, int da\n      * @return openssl configuration file with subject alt names added\n      * @throws IOException\n      */\n-    private File buildConfigFile(Subject sbj, boolean isCa) throws IOException {\n-        File sna = createDefaultConfig().toFile();\n-        try (BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(sna, true), StandardCharsets.UTF_8))) {\n+    private Path buildConfigFile(Subject sbj, boolean isCa) throws IOException {\n+        Path sna = createDefaultConfig();\n+        try (BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(sna.toFile(), true), StandardCharsets.UTF_8))) {\n             if (isCa) {\n                 out.append(\"basicConstraints = critical,CA:true,pathlen:0\\n\");\n             }\n@@ -216,139 +126,508 @@ private File buildConfigFile(Subject sbj, boolean isCa) throws IOException {\n                 }\n             }\n         }\n-\n         return sna;\n     }\n \n     @Override\n-    public void generateCsr(File keyFile, File csrFile, Subject sbj) throws IOException {\n+    public void generateSelfSignedCert(File keyFile, File certFile, Subject sbj, int days) throws IOException {\n+        Instant now = Instant.now();\n+        ZonedDateTime notBefore = now.atZone(UTC);\n+        ZonedDateTime notAfter = now.plus(days, ChronoUnit.DAYS).atZone(UTC);\n+        generateRootCaCert(keyFile, certFile, sbj, notBefore, notAfter, 0);\n+    }\n \n-        List<String> cmd = new ArrayList<>(asList(\"openssl\", \"req\", \"-new\", \"-batch\", \"-nodes\",\n-                \"-keyout\", keyFile.getAbsolutePath(), \"-out\", csrFile.getAbsolutePath()));\n+    public void generateRootCaCert(File keyFile, File certFile, Subject subject,\n+                                   ZonedDateTime notBefore, ZonedDateTime notAfter, int pathLength) throws IOException {\n+        // Preconditions\n+        Objects.requireNonNull(keyFile);\n+        Objects.requireNonNull(certFile);\n+        Objects.requireNonNull(subject);\n+        checkValidity(notBefore, notAfter);\n+        if (pathLength < 0) {\n+            throw new IllegalArgumentException(\"pathLength cannot be negative: \" + pathLength);\n+        }\n+        if (subject.subjectAltNames() != null && !subject.subjectAltNames().isEmpty()) {\n+            throw new IllegalArgumentException(\"CA certificates should not have Subject Alternative Names\");\n+        }\n+\n+        // Generate a CSR for the key\n+        Path tmpKey = null;\n+        Path defaultConfig = null;\n+        Path csrFile = null;\n+        Path newCertsDir = null;\n+        Path database = null;\n \n-        File sna = null;\n-        if (sbj != null) {\n+        try {\n+            tmpKey = Files.createTempFile(null, null);\n+            // Generate a key pair\n+            new OpensslArgs(\"openssl\", \"genrsa\")\n+                    .optArg(\"-out\", tmpKey)\n+                    .opt(\"4096\")\n+                    .exec();\n+\n+            csrFile = Files.createTempFile(null, null);\n+            new OpensslArgs(\"openssl\", \"req\")\n+                    .opt(\"-new\")\n+                    .optArg(\"-key\", tmpKey)\n+                    .optArg(\"-out\", csrFile)\n+                    .optArg(\"-subj\", subject)\n+                    .exec();\n+\n+            // Generate a self signed cert for the CA\n+            database = Files.createTempFile(null, null);\n+            newCertsDir = Files.createTempDirectory(null);\n+            defaultConfig = createDefaultConfig();\n+            new OpensslArgs(\"openssl\", \"ca\")\n+                    .opt(\"-utf8\").opt(\"-batch\").opt(\"-notext\")\n+                    .opt(\"-selfsign\")\n+                    .optArg(\"-in\", csrFile)\n+                    .optArg(\"-out\", certFile)\n+                    .optArg(\"-keyfile\", tmpKey)\n+                    .optArg(\"-startdate\", notBefore)\n+                    .optArg(\"-enddate\", notAfter)\n+                    .optArg(\"-subj\", subject)\n+                    .optArg(\"-config\", defaultConfig)\n+                    .database(database)\n+                    .newCertsDir(newCertsDir)\n+                    .basicConstraints(\"critical,CA:true,pathlen:\" + pathLength)\n+                    .keyUsage(\"critical,keyCertSign,cRLSign\")\n+                    .exec();\n+\n+            // The key will be in pkcs#1 format (bracketed by BEGIN/END RSA PRIVATE KEY)\n+            // Convert it to pkcs#8 format (bracketed by BEGIN/END PRIVATE KEY)\n+            new OpensslArgs(\"openssl\", \"pkcs8\")\n+                    .opt(\"-topk8\").opt(\"-nocrypt\")\n+                    .optArg(\"-in\", tmpKey)\n+                    .optArg(\"-out\", keyFile)\n+                    .exec();\n+        } finally {\n+            delete(tmpKey);\n+            delete(database);\n+            delete(newCertsDir);\n+            delete(csrFile);\n+            delete(defaultConfig);\n+        }\n+    }\n \n-            if (sbj.subjectAltNames() != null && sbj.subjectAltNames().size() > 0) {\n+    public void generateIntermediateCaCert(File issuerCaKeyFile, File issuerCaCertFile,\n+                                           Subject subject,\n+                                           File subjectKeyFile, File subjectCertFile,\n+                                           ZonedDateTime notBefore, ZonedDateTime notAfter, int pathLength) throws IOException {\n+        // Preconditions\n+        Objects.requireNonNull(issuerCaKeyFile);\n+        Objects.requireNonNull(issuerCaCertFile);\n+        Objects.requireNonNull(subject);\n+        Objects.requireNonNull(subjectKeyFile);\n+        Objects.requireNonNull(subjectCertFile);\n+        checkValidity(notBefore, notAfter);\n+        if (pathLength < 0) {\n+            throw new IllegalArgumentException(\"pathLength cannot be negative: \" + pathLength);\n+        }\n+        if (subject.subjectAltNames() != null && !subject.subjectAltNames().isEmpty()) {\n+            throw new IllegalArgumentException(\"CA certificates should not have Subject Alternative Names\");\n+        }\n \n-                // subject alt names need to be in an openssl configuration file\n-                sna = buildConfigFile(sbj, false);\n-                cmd.addAll(asList(\"-config\", sna.toPath().toString(), \"-extensions\", \"v3_req\"));\n-            }\n+        // Generate a CSR for the key\n+        Path tmpKey = null;\n+        Path defaultConfig = null;\n+        Path csrFile = null;\n+        Path newCertsDir = null;\n+        Path database = null;\n \n-            cmd.addAll(asList(\"-subj\", sbj.toString()));\n+        try {\n+            tmpKey = Files.createTempFile(null, null);\n+            // Generate a key pair\n+            new OpensslArgs(\"openssl\", \"genrsa\")\n+                    .optArg(\"-out\", tmpKey)\n+                    .opt(\"4096\")\n+                    .exec();\n+\n+            csrFile = Files.createTempFile(null, null);\n+            defaultConfig = buildConfigFile(subject, true);\n+            new OpensslArgs(\"openssl\", \"req\")\n+                    .opt(\"-new\")\n+                    .optArg(\"-config\", defaultConfig, true)\n+                    .optArg(\"-key\", tmpKey)\n+                    .optArg(\"-out\", csrFile)\n+                    .optArg(\"-subj\", subject)\n+                    .exec();\n+\n+            // Generate a self signed cert for the CA\n+            database = Files.createTempFile(null, null);\n+            newCertsDir = Files.createTempDirectory(null);\n+            defaultConfig = createDefaultConfig();\n+            new OpensslArgs(\"openssl\", \"ca\")\n+                    .opt(\"-utf8\").opt(\"-batch\").opt(\"-notext\")\n+                    .optArg(\"-in\", csrFile)\n+                    .optArg(\"-out\", subjectCertFile)\n+                    .optArg(\"-startdate\", notBefore)\n+                    .optArg(\"-enddate\", notAfter)\n+                    .optArg(\"-subj\", subject)\n+                    .optArg(\"-config\", defaultConfig)\n+                    .optArg(\"-cert\", issuerCaCertFile)\n+                    .optArg(\"-keyfile\", issuerCaKeyFile)\n+                    .database(database)\n+                    .newCertsDir(newCertsDir)\n+                    .basicConstraints(\"critical,CA:true,pathlen:\" + pathLength)\n+                    .keyUsage(\"critical,keyCertSign,cRLSign\")\n+                    .exec();\n+\n+            // The key will be in pkcs#1 format (bracketed by BEGIN/END RSA PRIVATE KEY)\n+            // Convert it to pkcs#8 format (bracketed by BEGIN/END PRIVATE KEY)\n+            new OpensslArgs(\"openssl\", \"pkcs8\")\n+                    .opt(\"-topk8\").opt(\"-nocrypt\")\n+                    .optArg(\"-in\", tmpKey)\n+                    .optArg(\"-out\", subjectKeyFile)\n+                    .exec();\n+        } finally {\n+            delete(tmpKey);\n+            delete(database);\n+            delete(newCertsDir);\n+            delete(csrFile);\n+            delete(defaultConfig);\n         }\n+    }\n \n-        exec(cmd);\n+    @Override\n+    public void addCertToTrustStore(File certFile, String certAlias, File trustStoreFile, String trustStorePassword)\n+            throws IOException, CertificateException, KeyStoreException, NoSuchAlgorithmException {\n+        // Preconditions\n+        Objects.requireNonNull(certFile);\n+        Objects.requireNonNull(certAlias);\n+        Objects.requireNonNull(trustStoreFile);\n+        Objects.requireNonNull(trustStorePassword);\n \n-        if (sna != null) {\n-            if (!sna.delete()) {\n-                log.warn(\"{} cannot be deleted\", sna.getName());\n+        FileInputStream isTrustStore = null;\n+        try {\n+            // check if the truststore file is empty or not, for loading its content eventually\n+            // the KeyStore class is able to create an empty store if the input stream is null\n+            if (trustStoreFile.length() > 0) {\n+                isTrustStore = new FileInputStream(trustStoreFile);\n+            }\n+\n+            try (FileInputStream isCertificate = new FileInputStream(certFile)) {\n+\n+                CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n+                X509Certificate certificate = (X509Certificate) certFactory.generateCertificate(isCertificate);\n+\n+                KeyStore trustStore = KeyStore.getInstance(\"PKCS12\");\n+                trustStore.load(isTrustStore, trustStorePassword.toCharArray());\n+                trustStore.setEntry(certAlias, new KeyStore.TrustedCertificateEntry(certificate), null);\n+\n+                try (FileOutputStream osTrustStore = new FileOutputStream(trustStoreFile)) {\n+                    trustStore.store(osTrustStore, trustStorePassword.toCharArray());\n+                }\n+            }\n+        } finally {\n+            if (isTrustStore != null) {\n+                isTrustStore.close();\n             }\n         }\n     }\n \n     @Override\n-    public void generateCert(File csrFile, File caKey, File caCert, File crtFile, int days) throws IOException {\n-        generateCert(csrFile, caKey, caCert, crtFile, null, days);\n+    public void addKeyAndCertToKeyStore(File keyFile, File certFile, String alias, File keyStoreFile, String keyStorePassword) throws IOException {\n+        new OpensslArgs(\"openssl\", \"pkcs12\")\n+                .opt(\"-export\")\n+                .optArg(\"-in\", certFile)\n+                .optArg(\"-inkey\", keyFile)\n+                .optArg(\"-name\", alias)\n+                .optArg(\"-out\", keyStoreFile)\n+                .optArg(\"-passout\", \"pass:\" + keyStorePassword)\n+                .exec();\n     }\n \n     @Override\n-    public void generateCert(File csrFile, byte[] caKey, byte[] caCert, File crtFile, int days) throws IOException {\n-        generateCert(csrFile, caKey, caCert, crtFile, null, days);\n+    public void deleteFromTrustStore(List<String> aliases, File trustStoreFile, String trustStorePassword)\n+            throws IOException, CertificateException, KeyStoreException, NoSuchAlgorithmException {\n+        // Preconditions\n+        Objects.requireNonNull(aliases);\n+        Objects.requireNonNull(trustStoreFile);\n+        Objects.requireNonNull(trustStorePassword);\n+\n+        try (FileInputStream isTrustStore = new FileInputStream(trustStoreFile)) {\n+            KeyStore trustStore = KeyStore.getInstance(\"PKCS12\");\n+            trustStore.load(isTrustStore, trustStorePassword.toCharArray());\n+            for (String alias : aliases) {\n+                trustStore.deleteEntry(alias);\n+            }\n+            try (FileOutputStream osTrustStore = new FileOutputStream(trustStoreFile)) {\n+                trustStore.store(osTrustStore, trustStorePassword.toCharArray());\n+            }\n+        }\n     }\n \n     @Override\n-    public void generateCert(File csrFile, File caKey, File caCert, File crtFile, Subject sbj, int days) throws IOException {\n+    public void renewSelfSignedCert(File keyFile, File certFile, Subject subject, int days) throws IOException {\n+        // Preconditions\n+        Objects.requireNonNull(keyFile);\n+        Objects.requireNonNull(certFile);\n+        Objects.requireNonNull(subject);\n+        if (days <= 0) {\n+            throw new IllegalArgumentException(\"Invalid validityDays \" + days);\n+        }\n+\n+        // See https://serverfault.com/a/501513\n+        Path sna = null;\n+        Path csrFile = null;\n+        try {\n+            csrFile = Files.createTempFile(null, null);\n+\n+            OpensslArgs args = new OpensslArgs(\"openssl\", \"req\")\n+                    .opt(\"-new\")\n+                    .opt(\"-batch\")\n+                    .optArg(\"-out\", csrFile)\n+                    .optArg(\"-key\", keyFile);\n+            if (subject != null) {\n+                if (subject.subjectAltNames() != null && subject.subjectAltNames().size() > 0) {\n+                    sna = buildConfigFile(subject, true);\n+                    args.optArg(\"-config\", sna, true).optArg(\"-extensions\", \"v3_req\");\n+                }\n+                args.optArg(\"-subj\", subject);\n+            }\n \n-        List<String> cmd = new ArrayList<>(asList(\"openssl\", \"x509\", \"-req\", \"-days\", String.valueOf(days),\n-            \"-in\", csrFile.getAbsolutePath(), \"-CA\", caCert.getAbsolutePath(), \"-CAkey\", caKey.getAbsolutePath(), \"-CAcreateserial\",\n-            \"-out\", crtFile.getAbsolutePath()));\n+            args.exec();\n+            delete(sna);\n+\n+            // subject alt names need to be in an openssl configuration file\n+            sna = buildConfigFile(subject, true);\n+            new OpensslArgs(\"openssl\", \"x509\")\n+                    .opt(\"-req\")\n+                    .optArg(\"-days\", String.valueOf(days))\n+                    .optArg(\"-in\", csrFile)\n+                    .optArg(\"-signkey\", keyFile)\n+                    .optArg(\"-out\", certFile)\n+                    .optArg(\"-extfile\", sna, true)\n+                    .optArg(\"-extensions\", \"v3_req\")\n+                    .exec();\n+        } finally {\n+            delete(sna);\n+            delete(csrFile);\n+        }\n+    }\n+\n+    @Override\n+    public void generateCsr(File keyFile, File csrFile, Subject subject) throws IOException {\n+        Objects.requireNonNull(keyFile);\n+        Objects.requireNonNull(csrFile);\n+        Objects.requireNonNull(subject);\n+\n+        OpensslArgs cmd = new OpensslArgs(\"openssl\", \"req\")\n+                .opt(\"-new\").opt(\"-batch\").opt(\"-nodes\")\n+                .optArg(\"-keyout\", keyFile)\n+                .optArg(\"-out\", csrFile);\n+\n+        Path sna = null;\n+        try {\n+            if (subject != null) {\n \n-        File sna = null;\n-        if (sbj != null) {\n+                if (subject.subjectAltNames() != null && subject.subjectAltNames().size() > 0) {\n \n-            if (sbj.subjectAltNames() != null && sbj.subjectAltNames().size() > 0) {\n+                    // subject alt names need to be in an openssl configuration file\n+                    sna = buildConfigFile(subject, false);\n+                    cmd.optArg(\"-config\", sna, true).optArg(\"-extensions\", \"v3_req\");\n+                }\n \n-                // subject alt names need to be in an openssl configuration file\n-                sna = buildConfigFile(sbj, false);\n-                cmd.addAll(asList(\"-extfile\", sna.toPath().toString(), \"-extensions\", \"v3_req\"));\n+                cmd.optArg(\"-subj\", subject);\n             }\n+\n+            cmd.exec();\n+        } finally {\n+            delete(sna);\n         }\n+    }\n \n-        exec(cmd);\n+    @Override\n+    public void generateCert(File csrFile, File caKey, File caCert, File crtFile, Subject sbj, int days) throws IOException {\n+        Instant now = Instant.now();\n+        ZonedDateTime notBefore = now.atZone(UTC);\n+        ZonedDateTime notAfter = now.plus(days, ChronoUnit.DAYS).atZone(UTC);\n+        generateCert(csrFile, caKey, caCert, crtFile, sbj, notBefore, notAfter);\n+    }\n+\n+    public void generateCert(File csrFile, File caKey, File caCert, File crtFile, Subject sbj, ZonedDateTime notBefore, ZonedDateTime notAfter) throws IOException {\n+        // Preconditions\n+        Objects.requireNonNull(csrFile);\n+        Objects.requireNonNull(caKey);\n+        Objects.requireNonNull(caCert);\n+        Objects.requireNonNull(crtFile);\n+        Objects.requireNonNull(sbj);\n+        checkValidity(notBefore, notAfter);\n+\n+        Path defaultConfig = null;\n+        Path database = null;\n+        Path newCertsDir = null;\n+        Path sna = null;\n+        try {\n+            defaultConfig = createDefaultConfig();\n+            database = Files.createTempFile(null, null);\n+            newCertsDir = Files.createTempDirectory(null);\n+            OpensslArgs cmd = new OpensslArgs(\"openssl\", \"ca\")\n+                    .opt(\"-utf8\").opt(\"-batch\").opt(\"-notext\")\n+                    .optArg(\"-in\", csrFile)\n+                    .optArg(\"-out\", crtFile)\n+                    .optArg(\"-cert\", caCert)\n+                    .optArg(\"-keyfile\", caKey)\n+                    .optArg(\"-startdate\", notBefore)\n+                    .optArg(\"-enddate\", notAfter)\n+                    .optArg(\"-config\", defaultConfig, true);\n+\n+            if (sbj != null) {\n \n-        if (sna != null) {\n-            if (!sna.delete()) {\n-                log.warn(\"{} cannot be deleted\", sna.getName());\n+                if (sbj.subjectAltNames() != null && sbj.subjectAltNames().size() > 0) {\n+                    cmd.optArg(\"-extensions\", \"v3_req\");\n+                    // subject alt names need to be in an openssl configuration file\n+                    sna = buildConfigFile(sbj, false);\n+                    cmd.optArg(\"-extfile\", sna, true);\n+                }\n             }\n+\n+            cmd.database(database).newCertsDir(newCertsDir);\n+            cmd.exec();\n+        } finally {\n+            delete(database);\n+            delete(newCertsDir);\n+            delete(defaultConfig);\n+            delete(sna);\n         }\n \n         // We need to remove CA serial file\n         Path path = Paths.get(caCert.getPath().replaceAll(\".[a-zA-Z0-9]+$\", \".srl\"));\n-        if (Files.exists(path)) {\n-            Files.delete(path);\n-        }\n+        delete(path);\n     }\n \n-    private Path createDefaultConfig() throws IOException {\n-        try (InputStream is = getClass().getClassLoader().getResourceAsStream(\"openssl.conf\")) {\n-            Path openSslConf = Files.createTempFile(\"openssl-\", \".conf\");\n-            Files.copy(is, openSslConf, StandardCopyOption.REPLACE_EXISTING);\n-            return openSslConf;\n-        }\n-    }\n \n     @Override\n     public void generateCert(File csrFile, byte[] caKey, byte[] caCert, File crtFile, Subject sbj, int days) throws IOException {\n+        Path caKeyFile = null;\n+        Path caCertFile = null;\n+        try {\n+            caKeyFile = Files.write(Files.createTempFile(null, null), caKey);\n+            caCertFile = Files.write(Files.createTempFile(null, null), caCert);\n+            generateCert(csrFile, caKeyFile.toFile(), caCertFile.toFile(), crtFile, sbj, days);\n+        } finally {\n+            delete(caKeyFile);\n+            delete(caCertFile);\n+        }\n+    }\n \n-        File caKeyFile = Files.createTempFile(\"ca-key-\", \".key\").toFile();\n-        Files.write(caKeyFile.toPath(), caKey);\n+    /**\n+     * Helper for building arg lists and environments.\n+     * The environment is used so that the config file can be parameterised for things like basic constraints.\n+     * But it's still necessary to use dynamically generated configs for specifying SANs\n+     * (see {@link OpenSslCertManager#buildConfigFile(Subject, boolean)}).\n+     */\n+    private static class OpensslArgs {\n+        ProcessBuilder pb = new ProcessBuilder();\n+        public OpensslArgs(String binary, String command) {\n+            pb.command().add(binary);\n+            pb.command().add(command);\n+        }\n+        public OpensslArgs optArg(String opt, File file) throws IOException {\n+            return optArg(opt, file, false);\n+        }\n+        public OpensslArgs optArg(String opt, File file, boolean mayLog) throws IOException {\n+            if (mayLog && log.isTraceEnabled()) {\n+                log.trace(\"Contents of {} for option {} is:\\n{}\", file, opt, Files.readString(file.toPath()));\n+            }\n+            opt(opt);\n+            pb.command().add(file.getAbsolutePath());\n+            return this;\n+        }\n+        public OpensslArgs optArg(String opt, Path file) throws IOException {\n+            return optArg(opt, file.toFile(), false);\n+        }\n+        public OpensslArgs optArg(String opt, Path file, boolean mayLog) throws IOException {\n+            return optArg(opt, file.toFile(), mayLog);\n+        }\n+        public OpensslArgs optArg(String opt, ZonedDateTime dateTime) {\n+            opt(opt);\n+            pb.command().add(DATE_TIME_FORMATTER.format(dateTime));\n+            return this;\n+        }\n+        public OpensslArgs opt(String option) {\n+            pb.command().add(option);\n+            return this;\n+        }\n \n-        File caCertFile = Files.createTempFile(\"ca-crt-\", \".crt\").toFile();\n-        Files.write(caCertFile.toPath(), caCert);\n+        public OpensslArgs optArg(String opt, Subject subject) {\n+            opt(opt);\n+            pb.command().add(subject.toString());\n+            return this;\n+        }\n \n-        generateCert(csrFile, caKeyFile, caCertFile, crtFile, sbj, days);\n+        public OpensslArgs optArg(String opt, String s) {\n+            opt(opt);\n+            pb.command().add(s);\n+            return this;\n+        }\n \n-        if (!caKeyFile.delete()) {\n-            log.warn(\"{} cannot be deleted\", caKeyFile.getName());\n+        public OpensslArgs basicConstraints(String basicConstraints) {\n+            pb.environment().put(\"STRIMZI_basicConstraints\", basicConstraints);\n+            return this;\n         }\n-        if (!caCertFile.delete()) {\n-            log.warn(\"{} cannot be deleted\", caCertFile.getName());\n+        public OpensslArgs keyUsage(String keyUsage) {\n+            pb.environment().put(\"STRIMZI_keyUsage\", keyUsage);\n+            return this;\n+        }\n+        public OpensslArgs database(Path database) {\n+            pb.environment().put(\"STRIMZI_database\", database != null ? database.toFile().getAbsolutePath() : \"STRIMZI_database\");\n+            return this;\n+        }\n+        public OpensslArgs newCertsDir(Path newCertsDir) {\n+            pb.environment().put(\"STRIMZI_new_certs_dir\", newCertsDir != null ? newCertsDir.toFile().getAbsolutePath() : \"STRIMZI_new_certs_dir\");\n+            return this;\n         }\n-    }\n \n-    private void exec(List<String> cmd) throws IOException {\n-        File out = null;\n+        public void exec() throws IOException {\n \n-        try {\n-\n-            out = Files.createTempFile(\"openssl-\", Integer.toString(cmd.hashCode())).toFile();\n+            if (!pb.environment().containsKey(\"STRIMZI_basicConstraints\")) {\n+                basicConstraints(\"critical,CA:false\");\n+            }\n+            if (!pb.environment().containsKey(\"STRIMZI_keyUsage\")) {\n+                keyUsage(\"critical,digitalSignature,keyEncipherment\");\n+            }\n+            if (!pb.environment().containsKey(\"STRIMZI_database\")) {\n+                pb.environment().put(\"STRIMZI_database\", \"/dev/null\");\n+            }\n+            if (!pb.environment().containsKey(\"STRIMZI_new_certs_dir\")) {\n+                pb.environment().put(\"STRIMZI_new_certs_dir\", \"/dev/null\");\n+            }\n \n-            ProcessBuilder processBuilder = new ProcessBuilder(cmd)\n-                    .redirectOutput(out)\n-                    .redirectErrorStream(true);\n-            log.debug(\"Running command {}\", processBuilder.command());\n+            Path out = null;\n+            try {\n+                out = Files.createTempFile(null, null);\n+                pb.redirectErrorStream(true)\n+                        .redirectOutput(out.toFile());\n \n-            Process proc = processBuilder.start();\n+                log.debug(\"Running command {}\", pb.command());\n \n-            OutputStream outputStream = proc.getOutputStream();\n-            // close subprocess' stdin\n-            outputStream.close();\n+                Process proc = pb.start();\n \n-            int result = proc.waitFor();\n-            String stdout = Files.readString(out.toPath(), Charset.defaultCharset());\n+                OutputStream outputStream = proc.getOutputStream();\n+                // close subprocess' stdin\n+                outputStream.close();\n \n-            log.debug(stdout);\n-            log.debug(\"result {}\", result);\n+                int result = proc.waitFor();\n \n-        } catch (InterruptedException ignored) {\n-        } finally {\n-            if (out != null) {\n-                if (!out.delete()) {\n-                    log.warn(\"{} cannot be deleted\", out.getName());\n+                if (result != 0) {\n+                    log.error(Files.readString(out, Charset.defaultCharset()));\n+                    log.error(\"result {}\", result);\n+                    throw new RuntimeException(\"openssl status code \" + result);\n+                } else {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(Files.readString(out, Charset.defaultCharset()));\n+                    }\n+                    log.debug(\"result {}\", result);\n                 }\n+\n+            } catch (InterruptedException ignored) {\n+            } finally {\n+                delete(out);\n             }\n+\n         }\n     }\n+\n }"
  },
  {
    "sha": "4a6d394ed6dee5962d01468e47a41038a2dcf106",
    "filename": "certificate-manager/src/main/java/io/strimzi/certs/Subject.java",
    "status": "modified",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/main/java/io/strimzi/certs/Subject.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/main/java/io/strimzi/certs/Subject.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/certificate-manager/src/main/java/io/strimzi/certs/Subject.java?ref=cbdcc7b28ce39e0305231aee03911dd2bd75f932",
    "patch": "@@ -4,17 +4,69 @@\n  */\n package io.strimzi.certs;\n \n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * Represents the subject for a certificate\n  */\n public class Subject {\n \n+    static class Builder {\n+        private String organizationName;\n+        private String commonName;\n+        private Map<String, Set<String>> subjectAltNames;\n+        public Builder withCommonName(String commonName) {\n+            this.commonName = commonName;\n+            return this;\n+        }\n+        public Builder withOrganizationName(String organizationName) {\n+            this.organizationName = organizationName;\n+            return this;\n+        }\n+        public Builder withSubjectAlternativeName(String type, String san) {\n+            if (subjectAltNames == null) {\n+                subjectAltNames = new HashMap<>();\n+            }\n+            subjectAltNames.computeIfAbsent(type, k -> new HashSet<>()).add(san);\n+            return this;\n+        }\n+        public Builder addDnsName(String dnsName) {\n+            return withSubjectAlternativeName(\"DNS\", dnsName);\n+        }\n+        public Builder withIpName(String ip) {\n+            return withSubjectAlternativeName(\"IP\", ip);\n+        }\n+        public Subject build() {\n+            Map<String, String> san = new HashMap<>();\n+            if (subjectAltNames != null) {\n+                for (Map.Entry<String, Set<String>> entry : subjectAltNames.entrySet()) {\n+                    int i = 0;\n+                    for (String n : entry.getValue()) {\n+                        san.put(entry.getKey() + \".\" + (i++), n);\n+                    }\n+                }\n+            }\n+            return new Subject(commonName, organizationName, san);\n+        }\n+\n+    }\n+\n     private String organizationName;\n     private String commonName;\n     private Map<String, String> subjectAltNames;\n \n+    public Subject() {\n+    }\n+\n+    private Subject(String commonName, String organizationName, Map<String, String> subjectAltNames) {\n+        this.organizationName = organizationName;\n+        this.commonName = commonName;\n+        this.subjectAltNames = subjectAltNames;\n+    }\n+\n     public String organizationName() {\n         return organizationName;\n     }"
  },
  {
    "sha": "1bb66f0e144548af59b78bb21e059dd071316040",
    "filename": "certificate-manager/src/main/resources/openssl.conf",
    "status": "modified",
    "additions": 45,
    "deletions": 6,
    "changes": 51,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/main/resources/openssl.conf",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/main/resources/openssl.conf",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/certificate-manager/src/main/resources/openssl.conf?ref=cbdcc7b28ce39e0305231aee03911dd2bd75f932",
    "patch": "@@ -1,11 +1,50 @@\n-[req]\n-distinguished_name = req_distinguished_name\n-req_extensions = v3_req\n+[ ca ]\n+default_ca           = strimzi_ca_section\n \n-[req_distinguished_name]\n+[ strimzi_ca_section ]\n+database             = ${ENV::STRIMZI_database}\n+new_certs_dir        = ${ENV::STRIMZI_new_certs_dir}\n+email_in_dn          = no\n+rand_serial          =\n+default_md           = sha512\n+policy               = policy_c_o_match\n+default_days         = 1\n+x509_extensions      = strimzi_x509_extensions\n \n-[v3_req]\n+[ policy_c_o_match ]\n+# Issued cert's O is optional\n+organizationName     = optional\n+# Issued cert's CN must be supplied\n+commonName           = optional\n+\n+[ strimzi_x509_extensions ]\n+subjectKeyIdentifier = hash\n+basicConstraints     = ${ENV::STRIMZI_basicConstraints}\n+keyUsage             = ${ENV::STRIMZI_keyUsage}\n+\n+[ server_ext ]\n+basicConstraints     = critical,CA:false\n+extendedKeyUsage     = clientAuth,serverAuth\n+keyUsage             = critical,digitalSignature,keyEncipherment\n+subjectKeyIdentifier = hash\n+\n+#[ client_ext ]\n+#basicConstraints     = critical,CA:false\n+#extendedKeyUsage     = clientAuth\n+#keyUsage             = critical,digitalSignature\n+#subjectKeyIdentifier = hash\n+\n+[ req ]\n+# Used for renewSelfSignedCert() only\n+x509_extensions      = strimzi_x509_extensions\n+distinguished_name   = req_distinguished_name\n+prompt               = no\n+req_extensions       = v3_req\n+\n+[ req_distinguished_name ]\n+\n+[ v3_req ]\n+# Used for renewSelfSignedCert() only\n # basicConstraints = critical,CA:true,pathlen:1 may be added programmatically\n # \"subjectAltName = @alt_names\" may be added programmatically\n-\n # [alt_names] section may be added programmatically"
  },
  {
    "sha": "5c83024f462f7a0b0392bf38c975c7960cc3bb52",
    "filename": "certificate-manager/src/test/java/io/strimzi/certs/OpenSslCertManagerTest.java",
    "status": "modified",
    "additions": 189,
    "deletions": 98,
    "changes": 287,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/test/java/io/strimzi/certs/OpenSslCertManagerTest.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/test/java/io/strimzi/certs/OpenSslCertManagerTest.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/certificate-manager/src/test/java/io/strimzi/certs/OpenSslCertManagerTest.java?ref=cbdcc7b28ce39e0305231aee03911dd2bd75f932",
    "patch": "@@ -7,6 +7,7 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.security.InvalidKeyException;\n@@ -16,16 +17,25 @@\n import java.security.NoSuchProviderException;\n import java.security.Principal;\n import java.security.SignatureException;\n+import java.security.cert.CertPath;\n+import java.security.cert.CertPathValidator;\n import java.security.cert.Certificate;\n import java.security.cert.CertificateException;\n import java.security.cert.CertificateFactory;\n import java.security.cert.CertificateParsingException;\n+import java.security.cert.PKIXParameters;\n+import java.security.cert.TrustAnchor;\n import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.time.temporal.ChronoUnit;\n import java.util.Base64;\n import java.util.Collection;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import org.junit.jupiter.api.Assumptions;\n import org.junit.jupiter.api.BeforeAll;\n@@ -41,7 +51,7 @@\n public class OpenSslCertManagerTest {\n \n     private static CertificateFactory certFactory;\n-    private static CertManager ssl;\n+    private static OpenSslCertManager ssl;\n \n     @BeforeAll\n     public static void before() throws CertificateException {\n@@ -50,77 +60,76 @@ public static void before() throws CertificateException {\n         ssl = new OpenSslCertManager();\n     }\n \n-    @Test\n-    public void testGenerateSelfSignedCert() throws Exception {\n-        File key = File.createTempFile(\"key-\", \".key\");\n-        File cert = File.createTempFile(\"crt-\", \".crt\");\n-        File store = File.createTempFile(\"crt-\", \".p12\");\n-\n-        doGenerateSelfSignedCert(key, cert, store, \"123456\", null);\n-\n-        key.delete();\n-        cert.delete();\n-        store.delete();\n+    interface Cmd {\n+        void exec() throws IOException;\n     }\n \n     @Test\n-    public void testGenerateSelfSignedCertWithSubject() throws Exception {\n+    public void testGenerateRootCaCertWithDays() throws Exception {\n \n         File key = File.createTempFile(\"key-\", \".key\");\n         File cert = File.createTempFile(\"crt-\", \".crt\");\n         File store = File.createTempFile(\"crt-\", \".p12\");\n-        Subject sbj = new Subject();\n-        sbj.setCommonName(\"MyCommonName\");\n-        sbj.setOrganizationName(\"MyOrganization\");\n-\n-        doGenerateSelfSignedCert(key, cert, store, \"123456\", sbj);\n+        Subject sbj = new Subject.Builder().withCommonName(\"MyCommonName\").withOrganizationName(\"MyOrganization\").build();\n+\n+        ((Cmd) () -> ssl.generateSelfSignedCert(key, cert, sbj, 365)).exec();\n+        ssl.addCertToTrustStore(cert, \"ca\", store, \"123456\");\n+\n+        X509Certificate x509Certificate1 = loadCertificate(cert);\n+        assertTrue(selfVerifies(x509Certificate1),\n+                \"Unexpected self-verification\");\n+        assertEquals(x509Certificate1.getSubjectDN(), x509Certificate1.getIssuerDN(), \"Unexpected self-signedness\");\n+        assertSubject(sbj, x509Certificate1);\n+        X509Certificate x509Certificate = x509Certificate1;\n+        assertEquals(0, x509Certificate.getBasicConstraints(),\n+                \"Expected a certificate with CA:\" + true + \", but basic constraints = \" + x509Certificate.getBasicConstraints());\n+\n+        // truststore verification\n+        KeyStore store1 = KeyStore.getInstance(\"PKCS12\");\n+        store1.load(new FileInputStream(store), \"123456\".toCharArray());\n+        X509Certificate storeCert = (X509Certificate) store1.getCertificate(\"ca\");\n+        storeCert.verify(storeCert.getPublicKey());\n \n         key.delete();\n         cert.delete();\n         store.delete();\n     }\n \n     @Test\n-    public void testGenerateSelfSignedCertWithSubjectAndAltNames() throws Exception {\n-\n+    public void testGenerateRootCaCertWithDates() throws Exception {\n         File key = File.createTempFile(\"key-\", \".key\");\n         File cert = File.createTempFile(\"crt-\", \".crt\");\n         File store = File.createTempFile(\"crt-\", \".p12\");\n-        Subject sbj = new Subject();\n-        sbj.setCommonName(\"MyCommonName\");\n-        sbj.setOrganizationName(\"MyOrganization\");\n-        Map<String, String> subjectAltNames = new HashMap<>();\n-        subjectAltNames.put(\"DNS.1\", \"example1.com\");\n-        subjectAltNames.put(\"DNS.2\", \"example2.com\");\n-        sbj.setSubjectAltNames(subjectAltNames);\n+        Subject sbj = new Subject.Builder().withCommonName(\"MyCommonName\").withOrganizationName(\"MyOrganization\").build();\n+\n+        Instant now = Instant.now();\n+        ZonedDateTime notBefore = now.plus(1, ChronoUnit.HOURS).truncatedTo(ChronoUnit.SECONDS).atZone(OpenSslCertManager.UTC);\n+        ZonedDateTime notAfter = now.plus(2, ChronoUnit.HOURS).truncatedTo(ChronoUnit.SECONDS).atZone(OpenSslCertManager.UTC);\n+        ssl.generateRootCaCert(key, cert, sbj, notBefore, notAfter, 0);\n+        ssl.addCertToTrustStore(cert, \"ca\", store, \"123456\");\n \n-        doGenerateSelfSignedCert(key, cert, store, \"123456\", sbj);\n+        // cert verification\n+        X509Certificate x509Certificate = loadCertificate(cert);\n+        assertTrue(selfVerifies(x509Certificate),\n+                \"Unexpected self-verification\");\n+        assertEquals(x509Certificate.getSubjectDN(), x509Certificate.getIssuerDN(), \"Expected self-signed certificate\");\n+        assertSubject(sbj, x509Certificate);\n+        assertEquals(0, x509Certificate.getBasicConstraints(),\n+                \"Expected a certificate with CA:\" + true + \", but basic constraints = \" + x509Certificate.getBasicConstraints());\n+        assertEquals(notBefore.toInstant(), x509Certificate.getNotBefore().toInstant());\n+        assertEquals(notAfter.toInstant(), x509Certificate.getNotAfter().toInstant());\n+\n+        // truststore verification\n+        KeyStore store1 = KeyStore.getInstance(\"PKCS12\");\n+        store1.load(new FileInputStream(store), \"123456\".toCharArray());\n+        X509Certificate storeCert = (X509Certificate) store1.getCertificate(\"ca\");\n+        storeCert.verify(storeCert.getPublicKey());\n \n         key.delete();\n         cert.delete();\n         store.delete();\n     }\n \n-    private void doGenerateSelfSignedCert(File key, File cert, File trustStore, String trustStorePassword, Subject sbj) throws Exception {\n-        ssl.generateSelfSignedCert(key, cert, sbj, 365);\n-        ssl.addCertToTrustStore(cert, \"ca\", trustStore, trustStorePassword);\n-\n-        X509Certificate x509Certificate = loadCertificate(cert);\n-        assertCaCertificate(x509Certificate, true);\n-        // subject verification if provided\n-        if (sbj != null) {\n-            assertSubject(sbj, x509Certificate);\n-        }\n-\n-        // truststore verification if provided\n-        if (trustStore != null) {\n-            KeyStore store = KeyStore.getInstance(\"PKCS12\");\n-            store.load(new FileInputStream(trustStore), trustStorePassword.toCharArray());\n-            X509Certificate storeCert = (X509Certificate) store.getCertificate(\"ca\");\n-            storeCert.verify(storeCert.getPublicKey());\n-        }\n-    }\n-\n     private X509Certificate loadCertificate(File cert) throws CertificateException, FileNotFoundException {\n         Certificate c1 = certFactory.generateCertificate(new FileInputStream(cert));\n         assertTrue(c1 instanceof X509Certificate);\n@@ -129,25 +138,33 @@ private X509Certificate loadCertificate(File cert) throws CertificateException,\n     }\n \n     private void assertCaCertificate(X509Certificate x509Certificate, boolean expectCa) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {\n+        assertEquals(expectCa, selfVerifies(x509Certificate),\n+                \"Unexpected self-verification\");\n+        assertEquals(expectCa, x509Certificate.getIssuerDN().equals(x509Certificate.getSubjectDN()),\n+                \"Unexpected self-signedness\");\n+        assertEquals(expectCa, x509Certificate.getBasicConstraints() >= 0,\n+                \"Expected a certificate with CA:\" + expectCa + \", but basic constraints = \" + x509Certificate.getBasicConstraints());\n+    }\n+\n+    private boolean selfVerifies(X509Certificate x509Certificate) throws CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {\n+        boolean isSelfSigned;\n         try {\n             x509Certificate.verify(x509Certificate.getPublicKey());\n-            if (!expectCa) {\n-                fail(\"A non-CA cert should not be self signed\");\n-            }\n-        } catch (Exception e) {\n-            if (expectCa) {\n-                fail(\"Expected a self signed cert\", e);\n-            }\n+            isSelfSigned = true;\n+        } catch (SignatureException | InvalidKeyException e) {\n+            isSelfSigned = false;\n         }\n-        assertEquals(expectCa, x509Certificate.getBasicConstraints() >= 0,\n-                \"Expected a certificate with CA:\" + expectCa + \", but basic constraints = \" + x509Certificate.getBasicConstraints());\n+        return isSelfSigned;\n     }\n \n     private void assertSubject(Subject sbj, X509Certificate x509Certificate) throws CertificateParsingException {\n         Principal p = x509Certificate.getSubjectDN();\n-\n         assertThat(String.format(\"CN=%s, O=%s\", sbj.commonName(), sbj.organizationName()), is(p.getName()));\n \n+        assertSubjectAlternativeNames(sbj, x509Certificate);\n+    }\n+\n+    private void assertSubjectAlternativeNames(Subject sbj, X509Certificate x509Certificate) throws CertificateParsingException {\n         if (sbj.subjectAltNames() != null && sbj.subjectAltNames().size() > 0) {\n             final Collection<List<?>> sans = x509Certificate.getSubjectAlternativeNames();\n             assertThat(sans, is(notNullValue()));\n@@ -158,8 +175,88 @@ private void assertSubject(Subject sbj, X509Certificate x509Certificate) throws\n         }\n     }\n \n+    private void assertIssuer(Subject sbj, X509Certificate x509Certificate) {\n+        Principal p = x509Certificate.getIssuerDN();\n+        assertThat(String.format(\"CN=%s, O=%s\", sbj.commonName(), sbj.organizationName()), is(p.getName()));\n+    }\n+\n     @Test\n-    public void testGenerateSignedCert() throws Exception {\n+    public void testGenerateIntermediateCaCertWithDates() throws Exception {\n+\n+        File rootKey = File.createTempFile(\"key-\", \".key\");\n+        File rootCert = File.createTempFile(\"crt-\", \".crt\");\n+        File intermediateKey = File.createTempFile(\"key-\", \".key\");\n+        File intermediateCert = File.createTempFile(\"crt-\", \".crt\");\n+        Subject rootSubject = new Subject.Builder().withCommonName(\"RootCn\").withOrganizationName(\"MyOrganization\").build();\n+\n+        // Generate a root cert\n+        Instant now = Instant.now();\n+        ZonedDateTime notBefore = now.plus(1, ChronoUnit.HOURS).truncatedTo(ChronoUnit.SECONDS).atZone(OpenSslCertManager.UTC);\n+        ZonedDateTime notAfter = now.plus(2, ChronoUnit.HOURS).truncatedTo(ChronoUnit.SECONDS).atZone(OpenSslCertManager.UTC);\n+        int rootPathLen = 1;\n+        ssl.generateRootCaCert(rootKey, rootCert, rootSubject, notBefore, notAfter, rootPathLen);\n+\n+        X509Certificate rootX509 = loadCertificate(rootCert);\n+        assertTrue(selfVerifies(rootX509),\n+                \"Unexpected self-verification\");\n+        assertTrue(rootX509.getIssuerDN().equals(rootX509.getSubjectDN()),\n+                \"Unexpected self-signed cert\");\n+        assertSubject(rootSubject, rootX509);\n+        assertEquals(rootPathLen, rootX509.getBasicConstraints(),\n+                \"Expected a certificate with CA:\" + true + \", but basic constraints = \" + rootX509.getBasicConstraints());\n+        assertEquals(notBefore.toInstant(), rootX509.getNotBefore().toInstant());\n+        assertEquals(notAfter.toInstant(), rootX509.getNotAfter().toInstant());\n+\n+        // Generate an intermediate cert\n+        Subject intermediateSubject = new Subject.Builder().withCommonName(\"IntermediateCn\").withOrganizationName(\"MyOrganization\").build();\n+        int intermediatePathLen = 1;\n+        ssl.generateIntermediateCaCert(rootKey, rootCert, intermediateSubject, intermediateKey, intermediateCert, notBefore, notAfter, intermediatePathLen);\n+\n+        X509Certificate intermediateX509 = loadCertificate(intermediateCert);\n+        assertTrue(intermediateX509.getIssuerDN().equals(rootX509.getSubjectDN()),\n+                \"Unexpected intermediate's issued to be root\");\n+        assertSubject(intermediateSubject, intermediateX509);\n+        assertEquals(intermediatePathLen, intermediateX509.getBasicConstraints(),\n+                \"Expected a certificate with CA:\" + true + \", but basic constraints = \" + intermediateX509.getBasicConstraints());\n+        assertEquals(notBefore.toInstant(), intermediateX509.getNotBefore().toInstant());\n+        assertEquals(notAfter.toInstant(), intermediateX509.getNotAfter().toInstant());\n+\n+        File leafKey = File.createTempFile(\"key-\", \".key\");\n+        File csr = File.createTempFile(\"csr-\", \".csr\");\n+        Subject sbj = new Subject.Builder().withCommonName(\"MyCommonName\").withOrganizationName(\"MyOrganization\").build();\n+        Map<String, String> subjectAltNames = new HashMap<>();\n+        subjectAltNames.put(\"DNS.1\", \"example1.com\");\n+        subjectAltNames.put(\"DNS.2\", \"example2.com\");\n+        sbj.setSubjectAltNames(subjectAltNames);\n+\n+        File leafCert = File.createTempFile(\"crt-\", \".crt\");\n+\n+        doGenerateSignedCert(intermediateKey, intermediateCert, intermediateSubject, leafKey, csr, leafCert, null, \"123456\", sbj);\n+\n+        // Validate that when the root cert is trusted and the cert chain includes the leaf+intermediate,\n+        // that the leaf is considered valid by PKIX validation\n+        X509Certificate leafX509 = loadCertificate(leafCert);\n+        Set<TrustAnchor> trustAnchors = Set.of(new TrustAnchor(rootX509, null));\n+        CertPath cp = CertificateFactory.getInstance(\"X.509\").generateCertPath(List.of(leafX509, intermediateX509));\n+\n+        PKIXParameters pkixp = new PKIXParameters(trustAnchors);\n+        pkixp.setRevocationEnabled(false);\n+        pkixp.setDate(new Date(now.plus(90, ChronoUnit.MINUTES).getEpochSecond() * 1000));\n+\n+        CertPathValidator.getInstance(\"PKIX\").validate(cp, pkixp);\n+\n+        leafKey.delete();\n+        csr.delete();\n+        leafCert.delete();\n+\n+        rootKey.delete();\n+        rootCert.delete();\n+        intermediateKey.delete();\n+        intermediateCert.delete();\n+    }\n+\n+    @Test\n+    public void testGenerateClientCert() throws Exception {\n \n         Path path = Files.createTempDirectory(OpenSslCertManagerTest.class.getSimpleName());\n         path.toFile().deleteOnExit();\n@@ -168,17 +265,14 @@ public void testGenerateSignedCert() throws Exception {\n         File caCert = File.createTempFile(\"ca-crt-\", \".crt\");\n         File store = File.createTempFile(\"store-\", \".p12\");\n \n-        Subject caSbj = new Subject();\n-        caSbj.setCommonName(\"CACommonName\");\n-        caSbj.setOrganizationName(\"CAOrganizationName\");\n+        Subject caSbj = new Subject.Builder().withCommonName(\"CACommonName\").withOrganizationName(\"CAOrganizationName\").build();\n \n         File key = File.createTempFile(\"key-\", \".key\");\n         File csr = File.createTempFile(\"csr-\", \".csr\");\n-        Subject sbj = new Subject();\n-        sbj.setCommonName(\"MyCommonName\");\n-        sbj.setOrganizationName(\"MyOrganization\");\n+        Subject sbj = new Subject.Builder().withCommonName(\"MyCommonName\").withOrganizationName(\"MyOrganization\").build();\n         File cert = File.createTempFile(\"crt-\", \".crt\");\n \n+        ssl.generateSelfSignedCert(caKey, caCert, caSbj, 365);\n         doGenerateSignedCert(caKey, caCert, caSbj, key, csr, cert, store, \"123456\", sbj);\n \n         caKey.delete();\n@@ -192,28 +286,25 @@ public void testGenerateSignedCert() throws Exception {\n     }\n \n     @Test\n-    public void testGenerateSignedCertWithSubjectAndAltNames() throws Exception {\n+    public void testGenerateClientCertWithSubjectAndAltNames() throws Exception {\n \n         File caKey = File.createTempFile(\"ca-key-\", \".key\");\n         File caCert = File.createTempFile(\"ca-crt-\", \".crt\");\n         File store = File.createTempFile(\"store-\", \".p12\");\n \n-        Subject caSbj = new Subject();\n-        caSbj.setCommonName(\"CACommonName\");\n-        caSbj.setOrganizationName(\"CAOrganizationName\");\n+        Subject caSbj = new Subject.Builder().withCommonName(\"CACommonName\").withOrganizationName(\"CAOrganizationName\").build();\n \n         File key = File.createTempFile(\"key-\", \".key\");\n         File csr = File.createTempFile(\"csr-\", \".csr\");\n-        Subject sbj = new Subject();\n-        sbj.setCommonName(\"MyCommonName\");\n-        sbj.setOrganizationName(\"MyOrganization\");\n+        Subject sbj = new Subject.Builder().withCommonName(\"MyCommonName\").withOrganizationName(\"MyOrganization\").build();\n         Map<String, String> subjectAltNames = new HashMap<>();\n         subjectAltNames.put(\"DNS.1\", \"example1.com\");\n         subjectAltNames.put(\"DNS.2\", \"example2.com\");\n         sbj.setSubjectAltNames(subjectAltNames);\n \n         File cert = File.createTempFile(\"crt-\", \".crt\");\n \n+        ssl.generateSelfSignedCert(caKey, caCert, caSbj, 365);\n         doGenerateSignedCert(caKey, caCert, caSbj, key, csr, cert, store, \"123456\", sbj);\n \n         caKey.delete();\n@@ -226,14 +317,13 @@ public void testGenerateSignedCertWithSubjectAndAltNames() throws Exception {\n \n     private void doGenerateSignedCert(File caKey, File caCert, Subject caSbj, File key, File csr, File cert,\n                                       File keyStore, String keyStorePassword, Subject sbj) throws Exception {\n-\n-        ssl.generateSelfSignedCert(caKey, caCert, caSbj, 365);\n-\n         ssl.generateCsr(key, csr, sbj);\n \n         ssl.generateCert(csr, caKey, caCert, cert, sbj, 365);\n \n-        ssl.addKeyAndCertToKeyStore(caKey, caCert, \"ca\", keyStore, keyStorePassword);\n+        if (keyStore != null) {\n+            ssl.addKeyAndCertToKeyStore(caKey, caCert, \"ca\", keyStore, keyStorePassword);\n+        }\n \n         X509Certificate c = loadCertificate(cert);\n         assertCaCertificate(c, false);\n@@ -252,7 +342,7 @@ private void doGenerateSignedCert(File caKey, File caCert, Subject caSbj, File k\n                     assertThat(sbj.subjectAltNames().containsValue(sanItem.get(1)), is(true));\n                 }\n             } else {\n-                fail();\n+                fail(\"Missing expected SAN\");\n             }\n         }\n \n@@ -276,23 +366,7 @@ private void doGenerateSignedCert(File caKey, File caCert, Subject caSbj, File k\n \n     @Test\n     public void testRenewSelfSignedCertWithSubject() throws Exception {\n-        Subject caSubject = new Subject();\n-        caSubject.setCommonName(\"MyCommonName\");\n-        caSubject.setOrganizationName(\"MyOrganization\");\n-\n-        doRenewSelfSignedCertWithSubject(caSubject);\n-    }\n-\n-    @Test\n-    public void testRenewSelfSignedCertWithSubjectAndAltNames() throws Exception {\n-        Subject caSubject = new Subject();\n-        caSubject.setCommonName(\"MyCommonName\");\n-        caSubject.setOrganizationName(\"MyOrganization\");\n-        Map<String, String> subjectAltNames = new HashMap<>();\n-        subjectAltNames.put(\"DNS.1\", \"example1.com\");\n-        subjectAltNames.put(\"DNS.2\", \"example2.com\");\n-        caSubject.setSubjectAltNames(subjectAltNames);\n-\n+        Subject caSubject = new Subject.Builder().withCommonName(\"MyCommonName\").withOrganizationName(\"MyOrganization\").build();\n         doRenewSelfSignedCertWithSubject(caSubject);\n     }\n \n@@ -302,15 +376,32 @@ public void doRenewSelfSignedCertWithSubject(Subject caSubject) throws Exception\n         File originalCert = File.createTempFile(\"crt-\", \".crt\");\n         File originalStore = File.createTempFile(\"crt-\", \".p12\");\n \n-        doGenerateSelfSignedCert(caKey, originalCert, originalStore, \"123456\", caSubject);\n+        ((Cmd) () -> ssl.generateSelfSignedCert(caKey, originalCert, caSubject, 365)).exec();\n+        ssl.addCertToTrustStore(originalCert, \"ca\", originalStore, \"123456\");\n+\n+        X509Certificate x509Certificate1 = loadCertificate(originalCert);\n+        assertTrue(selfVerifies(x509Certificate1),\n+                \"Unexpected self-verification\");\n+        assertTrue(x509Certificate1.getIssuerDN().equals(x509Certificate1.getSubjectDN()),\n+                \"Unexpected self-signedness\");\n+        // subject verification if provided\n+        if (caSubject != null) {\n+            assertSubject(caSubject, x509Certificate1);\n+        }\n+\n+        // truststore verification if provided\n+        if (originalStore != null) {\n+            KeyStore store = KeyStore.getInstance(\"PKCS12\");\n+            store.load(new FileInputStream(originalStore), \"123456\".toCharArray());\n+            X509Certificate storeCert = (X509Certificate) store.getCertificate(\"ca\");\n+            storeCert.verify(storeCert.getPublicKey());\n+        }\n \n         // generate a client cert\n         File clientKey = File.createTempFile(\"client-\", \".key\");\n         File csr = File.createTempFile(\"client-\", \".csr\");\n         File clientCert = File.createTempFile(\"client-\", \".crt\");\n-        Subject clientSubject = new Subject();\n-        clientSubject.setCommonName(\"MyCommonName\");\n-        clientSubject.setOrganizationName(\"MyOrganization\");\n+        Subject clientSubject = new Subject.Builder().withCommonName(\"MyCommonName\").withOrganizationName(\"MyOrganization\").build();\n         ssl.generateCsr(clientKey, csr, clientSubject);\n \n         ssl.generateCert(csr, caKey, originalCert, clientCert, clientSubject, 365);"
  },
  {
    "sha": "f76dbe7c60b3d3fe3bb7bee543bb6dd190b23d10",
    "filename": "certificate-manager/src/test/java/io/strimzi/certs/SecretCertProviderTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/test/java/io/strimzi/certs/SecretCertProviderTest.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/test/java/io/strimzi/certs/SecretCertProviderTest.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/certificate-manager/src/test/java/io/strimzi/certs/SecretCertProviderTest.java?ref=cbdcc7b28ce39e0305231aee03911dd2bd75f932",
    "patch": "@@ -48,7 +48,7 @@ public void testKeyAndCertInSecret() throws Exception {\n         File cert = File.createTempFile(\"crt-\", \".crt\");\n         File store = File.createTempFile(\"crt-\", \".str\");\n \n-        ssl.generateSelfSignedCert(key, cert, 365);\n+        ssl.generateSelfSignedCert(key, cert, new Subject.Builder().withCommonName(\"Test CA\").build(), 365);\n         ssl.addCertToTrustStore(cert, \"ca\", store, \"123456\");\n \n         Secret secret = secretCertProvider.createSecret(\"my-namespace\", \"my-secret\",\n@@ -81,7 +81,7 @@ public void testAddKeyAndCertInSecret() throws Exception {\n         File key = File.createTempFile(\"key-\", \".key\");\n         File cert = File.createTempFile(\"crt-\", \".crt\");\n \n-        ssl.generateSelfSignedCert(key, cert, 365);\n+        ssl.generateSelfSignedCert(key, cert, new Subject.Builder().withCommonName(\"Test CA\").build(), 365);\n \n         Secret secret = secretCertProvider.createSecret(\"my-namespace\", \"my-secret\",\n                 \"ca.key\", \"ca.crt\",\n@@ -93,7 +93,7 @@ public void testAddKeyAndCertInSecret() throws Exception {\n         File addedKey = File.createTempFile(\"added-key-\", \".key\");\n         File addedCert = File.createTempFile(\"added-crt-\", \".crt\");\n \n-        ssl.generateSelfSignedCert(addedKey, addedCert, 365);\n+        ssl.generateSelfSignedCert(addedKey, addedCert, new Subject.Builder().withCommonName(\"Test CA\").build(), 365);\n \n         secret = secretCertProvider.addSecret(secret, \"added-key\", \"added-cert\", addedKey, addedCert);\n "
  },
  {
    "sha": "5251c292ceb9d099435874234e4da7241ffe0d16",
    "filename": "certificate-manager/src/test/resources/log4j2.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/test/resources/log4j2.properties",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/cbdcc7b28ce39e0305231aee03911dd2bd75f932/certificate-manager/src/test/resources/log4j2.properties",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/certificate-manager/src/test/resources/log4j2.properties?ref=cbdcc7b28ce39e0305231aee03911dd2bd75f932",
    "patch": "@@ -8,4 +8,4 @@ appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\n rootLogger.level = ${env:STRIMZI_LOG_LEVEL:-INFO}\n rootLogger.appenderRefs = stdout\n rootLogger.appenderRef.console.ref = STDOUT\n-rootLogger.additivity = false\n\\ No newline at end of file\n+rootLogger.additivity = false"
  },
  {
    "sha": "5c8d1aa1f5817c578851bb4b3ecc67013813e32d",
    "filename": "operator-common/src/test/java/io/strimzi/operator/common/operator/MockCertManager.java",
    "status": "modified",
    "additions": 0,
    "deletions": 43,
    "changes": 43,
    "blob_url": "https://github.com/strimzi/strimzi-kafka-operator/blob/cbdcc7b28ce39e0305231aee03911dd2bd75f932/operator-common/src/test/java/io/strimzi/operator/common/operator/MockCertManager.java",
    "raw_url": "https://github.com/strimzi/strimzi-kafka-operator/raw/cbdcc7b28ce39e0305231aee03911dd2bd75f932/operator-common/src/test/java/io/strimzi/operator/common/operator/MockCertManager.java",
    "contents_url": "https://api.github.com/repos/strimzi/strimzi-kafka-operator/contents/operator-common/src/test/java/io/strimzi/operator/common/operator/MockCertManager.java?ref=cbdcc7b28ce39e0305231aee03911dd2bd75f932",
    "patch": "@@ -191,19 +191,6 @@ public void generateSelfSignedCert(File keyFile, File certFile, Subject sbj, int\n         write(certFile, CLUSTER_CERT);\n     }\n \n-    /**\n-     * Generate a self-signed certificate\n-     *\n-     * @param keyFile  path to the file which will contain the private key\n-     * @param certFile path to the file which will contain the self signed certificate\n-     * @param days     certificate duration\n-     * @throws IOException\n-     */\n-    @Override\n-    public void generateSelfSignedCert(File keyFile, File certFile, int days) throws IOException {\n-        generateSelfSignedCert(keyFile, certFile, null, days);\n-    }\n-\n     /**\n      * Renew a new self-signed certificate, keeping the existing private key\n      *\n@@ -253,41 +240,11 @@ public void generateCsr(File keyFile, File csrFile, Subject sbj) throws IOExcept\n         write(csrFile, \"csr file\");\n     }\n \n-    /**\n-     * Generate a certificate signed by a Certificate Authority\n-     *\n-     * @param csrFile path to the file containing the certificate sign request\n-     * @param caKey   path to the file containing the CA private key\n-     * @param caCert  path to the file containing the CA certificate\n-     * @param crtFile path to the file which will contain the signed certificate\n-     * @param days    certificate duration\n-     * @throws IOException\n-     */\n-    @Override\n-    public void generateCert(File csrFile, File caKey, File caCert, File crtFile, int days) throws IOException {\n-        write(crtFile, \"crt file\");\n-    }\n-\n     @Override\n     public void generateCert(File csrFile, File caKey, File caCert, File crtFile, Subject sbj, int days) throws IOException {\n         write(crtFile, \"crt file\");\n     }\n \n-    /**\n-     * Generate a certificate signed by a Certificate Authority\n-     *\n-     * @param csrFile path to the file containing the certificate sign request\n-     * @param caKey   CA private key bytes\n-     * @param caCert  CA certificate bytes\n-     * @param crtFile path to the file which will contain the signed certificate\n-     * @param days    certificate duration\n-     * @throws IOException\n-     */\n-    @Override\n-    public void generateCert(File csrFile, byte[] caKey, byte[] caCert, File crtFile, int days) throws IOException {\n-        write(crtFile, \"crt file\");\n-    }\n-\n     @Override\n     public void generateCert(File csrFile, byte[] caKey, byte[] caCert, File crtFile, Subject sbj, int days) throws IOException {\n         write(crtFile, \"crt file\");"
  }
]
