[
  {
    "sha": "c3a2e49f2c31751ff2fd6a84c2c11c48246e9051",
    "filename": "CNKB/.idea/dictionaries/user.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/.idea/dictionaries/user.xml",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/.idea/dictionaries/user.xml",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/.idea/dictionaries/user.xml?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -4,11 +4,9 @@\n       <w>bais</w>\n       <w>baos</w>\n       <w>chestplate</w>\n+      <w>closerate</w>\n       <w>cnkb</w>\n       <w>debuff</w>\n-      <w>deserialized</w>\n-      <w>handleable</w>\n-      <w>incre</w>\n       <w>kakao</w>\n       <w>matk</w>\n       <w>maxhp</w>\n@@ -18,7 +16,6 @@\n       <w>mdra</w>\n       <w>namsic</w>\n       <w>noti</w>\n-      <w>unhandleable</w>\n     </words>\n   </dictionary>\n </component>\n\\ No newline at end of file"
  },
  {
    "sha": "f46917c6b4ee5cfe5487fbc85dd852462552e53f",
    "filename": "CNKB/.idea/inspectionProfiles/Project_Default.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/.idea/inspectionProfiles/Project_Default.xml",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/.idea/inspectionProfiles/Project_Default.xml",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/.idea/inspectionProfiles/Project_Default.xml?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -43,6 +43,7 @@\n       <option name=\"myAdditionalJavadocTags\" value=\"description,prefer\" />\n     </inspection_tool>\n     <inspection_tool class=\"SameParameterValue\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" />\n+    <inspection_tool class=\"SuspiciousToArrayCall\" enabled=\"false\" level=\"WARNING\" enabled_by_default=\"false\" />\n     <inspection_tool class=\"UNCHECKED_WARNING\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n       <option name=\"IGNORE_UNCHECKED_ASSIGNMENT\" value=\"false\" />\n       <option name=\"IGNORE_UNCHECKED_GENERICS_ARRAY_CREATION\" value=\"false\" />"
  },
  {
    "sha": "0e514f72586cc6cc7d75b8e56d949bda1dec85d3",
    "filename": "CNKB/.idea/misc.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/.idea/misc.xml",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/.idea/misc.xml?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -45,7 +45,7 @@\n       </value>\n     </option>\n   </component>\n-  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" default=\"true\" project-jdk-name=\"15\" project-jdk-type=\"JavaSDK\">\n+  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_14\" default=\"false\" project-jdk-name=\"15\" project-jdk-type=\"JavaSDK\">\n     <output url=\"file://$PROJECT_DIR$/build/classes\" />\n   </component>\n   <component name=\"ProjectType\">"
  },
  {
    "sha": "ebf9fc016f31163963a83af1418826e194ce4a8d",
    "filename": "CNKB/app/build.gradle",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/build.gradle",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/build.gradle",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/build.gradle?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -26,7 +26,10 @@ dependencies {\n     implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n     implementation 'androidx.appcompat:appcompat:1.2.0'\n     implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n+    implementation 'androidx.work:work-runtime:2.5.0'\n     testImplementation 'junit:junit:4.13.1'\n     androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n+    compileOnly 'org.projectlombok:lombok:1.18.16'\n+    annotationProcessor 'org.projectlombok:lombok:1.18.16'\n }\n\\ No newline at end of file"
  },
  {
    "sha": "669beae5366140feac71ecb5fbf2018798a40652",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Base/ConcurrentList.java",
    "status": "added",
    "additions": 281,
    "deletions": 0,
    "changes": 281,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/ConcurrentList.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/ConcurrentList.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Base/ConcurrentList.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,281 @@\n+package lkd.namsic.Game.Base;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+public class ConcurrentList<T> implements List<T> {\n+\n+    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+    private final List<T> list;\n+\n+    public ConcurrentList(List<T> list) {\n+        this.list = list;\n+    }\n+\n+    @Override\n+    public int size() {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.size();\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.isEmpty();\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean contains(@Nullable Object o) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.contains(o);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Iterator<T> iterator() {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return new ArrayList<>(list).iterator();\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Object[] toArray() {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.toArray();\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public <T1> T1[] toArray(@NonNull T1[] a) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.toArray(a);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean add(T t) {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            return list.add(t);\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean remove(@Nullable Object o) {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            return list.remove(o);\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean containsAll(@NonNull Collection<?> c) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.containsAll(c);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean addAll(@NonNull Collection<? extends T> c) {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            return list.addAll(c);\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean addAll(int index, @NonNull Collection<? extends T> c) {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            return list.addAll(index, c);\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAll(@NonNull Collection<?> c) {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            return list.removeAll(c);\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public boolean retainAll(@NonNull Collection<?> c) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.retainAll(c);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public void clear() {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            list.clear();\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public T get(int index) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.get(index);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public T set(int index, T element) {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            return list.set(index, element);\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public void add(int index, T element) {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            list.add(index, element);\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public T remove(int index) {\n+        readWriteLock.writeLock().lock();\n+\n+        try {\n+            return list.remove(index);\n+        } finally {\n+            readWriteLock.writeLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public int indexOf(@Nullable Object o) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.indexOf(o);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @Override\n+    public int lastIndexOf(@Nullable Object o) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return list.lastIndexOf(o);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public ListIterator<T> listIterator() {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return new ArrayList<>(list).listIterator();\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public ListIterator<T> listIterator(int index) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return new ArrayList<>(list).listIterator(index);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+\n+    @NonNull\n+    @Override\n+    public List<T> subList(int fromIndex, int toIndex) {\n+        readWriteLock.readLock().lock();\n+\n+        try {\n+            return new ArrayList<>(list).subList(fromIndex, toIndex);\n+        } finally {\n+            readWriteLock.readLock().unlock();\n+        }\n+    }\n+}"
  },
  {
    "sha": "4464085ee1f0fbc7ba11b774efa916592b3ff26d",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Base/IdClass.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/IdClass.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/IdClass.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Base/IdClass.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,16 @@\n+package lkd.namsic.Game.Base;\n+\n+import lkd.namsic.Game.Enum.Id;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class IdClass {\n+\n+    Id id = null;\n+    long objectId = 0;\n+\n+    public IdClass() {}\n+\n+}"
  },
  {
    "sha": "25ab174a0244effe3641fa0f9043f50968bf2d96",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Base/LimitDouble.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/LimitDouble.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/LimitDouble.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Base/LimitDouble.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,60 @@\n+package lkd.namsic.Game.Base;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import lkd.namsic.Game.Exception.NumberRangeException;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class LimitDouble {\n+\n+    @Getter\n+    @Setter\n+    private Double min;\n+\n+    @Getter\n+    @Setter\n+    private Double max;\n+\n+    private double value;\n+\n+    public LimitDouble(double value, @Nullable Double min, @Nullable Double max) {\n+        if(min != null && max != null && min > max) {\n+            throw new RuntimeException(\"minValue can't be bigger than maxValue\");\n+        }\n+\n+        this.min = min;\n+        this.max = max;\n+        this.set(value);\n+    }\n+\n+    public double get() {\n+        double returnValue = value;\n+\n+        if(min != null && returnValue < min) {\n+            returnValue = min;\n+        } else if(max != null && returnValue > max) {\n+            returnValue = max;\n+        }\n+\n+        return returnValue;\n+    }\n+\n+    public void set(double setValue) {\n+        if (min != null && setValue < min) {\n+            throw new NumberRangeException(this);\n+        } else if (max != null && setValue > max) {\n+            throw new NumberRangeException(this);\n+        }\n+\n+        this.value = setValue;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"Value: \" + this.value + \", Min: \" + this.min + \", Max: \" + this.max;\n+    }\n+\n+}"
  },
  {
    "sha": "114f74056eb9437e3924b5f2b86157a690eb08a5",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Base/LimitInteger.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/LimitInteger.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/LimitInteger.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Base/LimitInteger.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,60 @@\n+package lkd.namsic.Game.Base;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import lkd.namsic.Game.Exception.NumberRangeException;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public class LimitInteger {\n+\n+    @Getter\n+    @Setter\n+    private Integer min;\n+\n+    @Getter\n+    @Setter\n+    private Integer max;\n+\n+    private int value;\n+\n+    public LimitInteger(int value, @Nullable Integer min, @Nullable Integer max) {\n+        if(min != null && max != null && min > max) {\n+            throw new RuntimeException(\"minValue can't be bigger than maxValue\");\n+        }\n+\n+        this.min = min;\n+        this.max = max;\n+        this.set(value);\n+    }\n+\n+    public int get() {\n+        int returnValue = value;\n+\n+        if(min != null && returnValue < min) {\n+            returnValue = min;\n+        } else if(max != null && returnValue > max) {\n+            returnValue = max;\n+        }\n+\n+        return returnValue;\n+    }\n+\n+    public void set(int setValue) {\n+        if (min != null && setValue < min) {\n+            throw new NumberRangeException(this);\n+        } else if (max != null && setValue > max) {\n+            throw new NumberRangeException(this);\n+        }\n+\n+        this.value = setValue;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"Value: \" + this.value + \", Min: \" + this.min + \", Max: \" + this.max;\n+    }\n+\n+}"
  },
  {
    "sha": "628206df5a74b56b6a807da872a083dd4d53ab4d",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Base/Location.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/Location.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/Location.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Base/Location.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,27 @@\n+package lkd.namsic.Game.Base;\n+\n+import androidx.annotation.NonNull;\n+\n+import lkd.namsic.Game.Config;\n+import lombok.Getter;\n+\n+@Getter\n+public class Location {\n+\n+    private final LimitInteger x = new LimitInteger(0, Config.MIN_MAP_X, Config.MAX_MAP_X);\n+    private final LimitInteger y = new LimitInteger(0, Config.MIN_MAP_Y, Config.MAX_MAP_Y);\n+\n+    public Location() {}\n+\n+    public Location(int x, int y) {\n+        this.x.set(x);\n+        this.y.set(y);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"x: \" + x.get() + \", y: \" + y.get();\n+    }\n+\n+}"
  },
  {
    "sha": "2a8512e74cfaf65b667d8e990139db31d808aa71",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Base/RangeInteger.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/RangeInteger.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/RangeInteger.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Base/RangeInteger.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,27 @@\n+package lkd.namsic.Game.Base;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class RangeInteger {\n+\n+    int min;\n+    int max;\n+\n+    public RangeInteger(int min, int max) {\n+        this.min = min;\n+        this.max = max;\n+    }\n+\n+    public boolean isInRange(int value) {\n+        return value >= this.min && value <= this.max;\n+    }\n+\n+    public void set(int min, int max) {\n+        this.min = min;\n+        this.max = max;\n+    }\n+\n+}"
  },
  {
    "sha": "7a41c7f8f5c7bf25f24454ee8c23fb5fffedf77d",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Base/RangeIntegerMap.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/RangeIntegerMap.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Base/RangeIntegerMap.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Base/RangeIntegerMap.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,73 @@\n+package lkd.namsic.Game.Base;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Map;\n+\n+import lkd.namsic.Game.Config;\n+import lkd.namsic.Game.Exception.NumberRangeException;\n+import lombok.Getter;\n+\n+@Getter\n+public class RangeIntegerMap<T> {\n+\n+    @NonNull\n+    Map<T, Integer> min;\n+\n+    @NonNull\n+    Map<T, Integer> max;\n+\n+    public RangeIntegerMap(@NonNull Map<T, Integer> min, @NonNull Map<T, Integer> max) {\n+        T key;\n+        Integer minValue, maxValue;\n+        for(Map.Entry<T, Integer> minEntry : min.entrySet()) {\n+            key = minEntry.getKey();\n+            minValue = minEntry.getValue();\n+            maxValue = max.get(key);\n+\n+            if(maxValue != null) {\n+                if(maxValue < minValue) {\n+                    throw new NumberRangeException(key, minValue, maxValue);\n+                }\n+            }\n+        }\n+\n+        this.min = min;\n+        this.max = max;\n+    }\n+\n+    public void set(Map<T, Integer> min, Map<T, Integer> max) {\n+        if(Config.compareMap(min, max, false)) {\n+            this.min = min;\n+            this.max = max;\n+        } else {\n+            throw new NumberRangeException(min, max);\n+        }\n+    }\n+\n+    public boolean isInRange(@NonNull T key, int value) {\n+        Integer minValue = this.min.get(key);\n+        Integer maxValue = this.max.get(key);\n+\n+        if(minValue != null && maxValue != null) {\n+            return minValue <= value && maxValue >= value;\n+        } else if(minValue == null && maxValue == null) {\n+            return true;\n+        } else if(minValue == null) {\n+            return value <= maxValue;\n+        } else {\n+            return value >= minValue;\n+        }\n+    }\n+\n+    public boolean isInRange(@NonNull Map<T, Integer> map) {\n+        for(Map.Entry<T, Integer> entry : map.entrySet()) {\n+            if(!isInRange(entry.getKey(), entry.getValue())) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+}"
  },
  {
    "sha": "056e52d1ae068938648f5062881013caabbd15ba",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Achieve.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Achieve.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Achieve.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Achieve.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,5 @@\n+package lkd.namsic.Game.Class;\n+\n+public class Achieve implements GameObject {\n+\n+}"
  },
  {
    "sha": "8a5e7cafb86e6fd20eb0fbc51f0064be189fbc7a",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Building.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Building.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Building.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Building.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,5 @@\n+package lkd.namsic.Game.Class;\n+\n+public class Building implements GameObject {\n+\n+}"
  },
  {
    "sha": "e358a2da1e6b78ccd4a1a3a9b4b39fc4aab38319",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Chat.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Chat.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Chat.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Chat.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,5 @@\n+package lkd.namsic.Game.Class;\n+\n+public class Chat implements GameObject {\n+\n+}"
  },
  {
    "sha": "946794b46ce714c42b3a4325702ffa54bb97b6b1",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Entity.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Entity.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Entity.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Entity.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,5 @@\n+package lkd.namsic.Game.Class;\n+\n+public interface Entity extends GameObject {\n+\n+}"
  },
  {
    "sha": "9faaf00ce1c05d49dc702d8b633f64b4d7b45d7a",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Equipment.java",
    "status": "added",
    "additions": 210,
    "deletions": 0,
    "changes": 210,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Equipment.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Equipment.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Equipment.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,210 @@\n+package lkd.namsic.Game.Class;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import lkd.namsic.Game.Base.LimitInteger;\n+import lkd.namsic.Game.Config;\n+import lkd.namsic.Game.Enum.EquipType;\n+import lkd.namsic.Game.Enum.Id;\n+import lkd.namsic.Game.Enum.StatType;\n+import lkd.namsic.Game.Exception.MapSetterException;\n+import lkd.namsic.Game.Exception.UnhandledEnumException;\n+import lkd.namsic.Game.Exception.NumberRangeException;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+public class Equipment extends Item {\n+\n+    @Setter\n+    @NonNull\n+    EquipType equipType;\n+\n+    LimitInteger reinforceCount = new LimitInteger(Config.MIN_REINFORCE_COUNT, Config.MIN_REINFORCE_COUNT, Config.MAX_REINFORCE_COUNT);\n+    LimitInteger limitLv = new LimitInteger(Config.MIN_LV, Config.MIN_LV, Config.MAX_LV);\n+\n+    @Setter\n+    int lvDown = 0;\n+\n+    Map<StatType, Integer> limitStat;\n+    Map<StatType, Integer> basicStat;\n+    Map<StatType, Integer> reinforceStat;\n+    Map<StatType, Integer> stat; //basic + reinforce\n+\n+    public Equipment(@NonNull EquipType equipType, @NonNull String name) {\n+        new Equipment(equipType, name, \"\", Config.MIN_HANDLE_LV);\n+    }\n+\n+    public Equipment(@NonNull EquipType equipType, @NonNull String name, @NonNull String description, int handleLv) {\n+        new Equipment(equipType, name, description, handleLv, null, new ArrayList<Map<Long, Integer>>());\n+    }\n+\n+    public Equipment(@NonNull EquipType equipType, @NonNull String name, @NonNull String description, int handleLv,\n+                     @Nullable Use use, @NonNull List<Map<Long, Integer>> recipe) {\n+        new Equipment(equipType, name, description, handleLv, use, recipe, Config.MIN_REINFORCE_COUNT,\n+                Config.MAX_REINFORCE_COUNT, Config.MIN_LV, 0, new HashMap<StatType, Integer>(),\n+                new HashMap<StatType, Integer>(), new HashMap<StatType, Integer>());\n+    }\n+\n+    public Equipment(@NonNull EquipType equipType, @NonNull String name, @NonNull String description, int handleLv,\n+                     @Nullable Use use, @NonNull List<Map<Long, Integer>> recipe, int reinforceCount, int maxReinforceCount,\n+                     int limitLv, int lvDown, @NonNull Map<StatType, Integer> limitStat,\n+                     @NonNull Map<StatType, Integer> basicStat, @NonNull Map<StatType, Integer> reinforceStat) {\n+        super(name, description, handleLv, use, recipe);\n+        this.id.setId(Id.EQUIPMENT);\n+\n+        this.equipType = equipType;\n+        this.reinforceCount.setMax(maxReinforceCount);\n+        this.reinforceCount.set(reinforceCount);\n+        this.limitLv.set(limitLv);\n+        this.lvDown = lvDown;\n+        this.setLimitStat(limitStat);\n+        this.setBasicStat(basicStat).setReinforceStat(reinforceStat).revalidateStat();\n+    }\n+\n+    public int getTotalLimitLv() {\n+        int lvDown = this.limitLv.get() - this.lvDown;\n+\n+        if(lvDown < Config.MIN_LV) {\n+            lvDown = Config.MIN_LV;\n+        } else if(lvDown > Config.MAX_LV) {\n+            lvDown = Config.MAX_LV;\n+        }\n+\n+        return lvDown;\n+    }\n+\n+    public void setLimitStat(@NonNull Map<StatType, Integer> limitStat) {\n+        Map<StatType, Integer> copy = new HashMap<>(this.limitStat);\n+\n+        try {\n+            for(Map.Entry<StatType, Integer> entry : limitStat.entrySet()) {\n+                this.setLimitStat(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.limitStat = copy;\n+            throw new MapSetterException(copy, limitStat, e);\n+        }\n+    }\n+\n+    public void setLimitStat(@NonNull StatType statType, int stat) {\n+        if(statType.equals(StatType.MAXHP) || statType.equals(StatType.MAXMN)) {\n+            throw new UnhandledEnumException(statType);\n+        }\n+\n+        if(stat < 0) {\n+            throw new NumberRangeException(stat, 0);\n+        }\n+\n+        if(stat == 0) {\n+            this.limitStat.remove(statType);\n+        } else {\n+            this.limitStat.put(statType, stat);\n+        }\n+    }\n+\n+    public int getLimitStat(@NonNull StatType statType) {\n+        Integer value = this.limitStat.get(statType);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    public Equipment setBasicStat(@NonNull Map<StatType, Integer> basicStat) {\n+        Map<StatType, Integer> copy = new HashMap<>(this.basicStat);\n+\n+        try {\n+            for(Map.Entry<StatType, Integer> entry : basicStat.entrySet()) {\n+                this.setBasicStat(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.basicStat = copy;\n+            throw new MapSetterException(copy, basicStat, e);\n+        }\n+\n+        return this;\n+    }\n+\n+    public Equipment setBasicStat(@NonNull StatType statType, int stat) {\n+        if(statType.equals(StatType.MAXHP) || statType.equals(StatType.MAXMN)) {\n+            throw new UnhandledEnumException(statType);\n+        }\n+\n+        if(stat == 0) {\n+            this.basicStat.remove(statType);\n+        } else {\n+            this.basicStat.put(statType, stat);\n+        }\n+\n+        return this;\n+    }\n+\n+    public int getBasicStat(@NonNull StatType statType) {\n+        Integer value = this.basicStat.get(statType);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    public Equipment setReinforceStat(@NonNull Map<StatType, Integer> reinforceStat) {\n+        Map<StatType, Integer> copy = new HashMap<>(this.reinforceStat);\n+\n+        try {\n+            for(Map.Entry<StatType, Integer> entry : reinforceStat.entrySet()) {\n+                this.setReinforceStat(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.basicStat = copy;\n+            throw new MapSetterException(copy, reinforceStat, e);\n+        }\n+\n+        return this;\n+    }\n+\n+    public Equipment setReinforceStat(@NonNull StatType statType, int stat) {\n+        if(statType.equals(StatType.MAXHP) || statType.equals(StatType.MAXMN)) {\n+            throw new UnhandledEnumException(statType);\n+        }\n+\n+        if(stat == 0) {\n+            this.reinforceStat.remove(statType);\n+        } else {\n+            this.reinforceStat.put(statType, stat);\n+        }\n+\n+        return this;\n+    }\n+\n+    public int getReinforceStat(@NonNull StatType statType) {\n+        Integer value = this.reinforceStat.get(statType);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    public void revalidateStat() {\n+        for(StatType statType : StatType.values()) {\n+            if(statType.equals(StatType.MAXHP) || statType.equals(StatType.MAXMN)) {\n+                continue;\n+            }\n+\n+            this.stat.put(statType, this.getBasicStat(statType) + this.getReinforceStat(statType));\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "f56a879f6c4b9e1c03e5065927955783fdff1397",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/GameObject.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/GameObject.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/GameObject.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/GameObject.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,11 @@\n+package lkd.namsic.Game.Class;\n+\n+import java.io.Serializable;\n+\n+import lkd.namsic.Game.Base.IdClass;\n+\n+public interface GameObject extends Serializable, Cloneable {\n+\n+    IdClass id = new IdClass();\n+\n+}"
  },
  {
    "sha": "204bb2aa29dd841fef0f2fb45ec54db23cd66a84",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Item.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Item.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Item.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Item.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,76 @@\n+package lkd.namsic.Game.Class;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import lkd.namsic.Game.Base.LimitInteger;\n+import lkd.namsic.Game.Config;\n+import lkd.namsic.Game.Enum.Id;\n+import lkd.namsic.Game.Exception.ListAddFailedException;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+public class Item implements GameObject {\n+\n+    @Setter\n+    @NonNull\n+    String name;\n+\n+    @Setter\n+    @NonNull\n+    String description;\n+\n+    @Setter\n+    @Nullable\n+    Use use;\n+\n+    LimitInteger handleLv = new LimitInteger(Config.MIN_HANDLE_LV, Config.MIN_HANDLE_LV, Config.MAX_HANDLE_LV);\n+\n+    List<Map<Long, Integer>> recipe;\n+\n+    protected Item() {}\n+\n+    public Item(@NonNull String name) {\n+        new Item(name, \"\", Config.MIN_HANDLE_LV);\n+    }\n+\n+    public Item(@NonNull String name, @NonNull String description, int handleLv) {\n+        new Item(name, description, handleLv, null, new ArrayList<Map<Long, Integer>>());\n+    }\n+\n+    public Item(@NonNull String name, @NonNull String description, int handleLv,\n+                @Nullable Use use, @NonNull List<Map<Long, Integer>> recipe) {\n+        this.id.setId(Id.ITEM);\n+\n+        this.name = name;\n+        this.description = description;\n+        this.handleLv.set(handleLv);\n+        this.use = use;\n+        this.recipe = recipe;\n+    }\n+\n+    public void addRecipe(@NonNull Map<Long, Integer> recipe) {\n+        int value;\n+        for(Map.Entry<Long, Integer> entry : recipe.entrySet()) {\n+            value = entry.getValue();\n+\n+            if(value < 1) {\n+                throw new ListAddFailedException(\"Recipe count cannot lower than 1 - \" + entry.getKey() + \", \" + value);\n+            }\n+        }\n+\n+        for(Map<Long, Integer> anotherRecipe : this.recipe) {\n+            if(anotherRecipe.equals(recipe)) {\n+                throw new ListAddFailedException(\"Recipe already exists - \" + recipe.toString());\n+            }\n+        }\n+\n+        this.recipe.add(recipe);\n+    }\n+\n+}"
  },
  {
    "sha": "4f534e1708abc35332c418828ce87039fbba45cd",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Monster.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Monster.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Monster.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Monster.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,5 @@\n+package lkd.namsic.Game.Class;\n+\n+public class Monster implements Entity {\n+\n+}"
  },
  {
    "sha": "9b50334d10f97acb2f4d77c5910cbc988bd981da",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Npc.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Npc.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Npc.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Npc.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,5 @@\n+package lkd.namsic.Game.Class;\n+\n+public class Npc implements Entity {\n+\n+}"
  },
  {
    "sha": "efea2f6bc5d3389b22db340bb3e1506ac9ff9899",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Player.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Player.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Player.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Player.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,16 @@\n+package lkd.namsic.Game.Class;\n+\n+import androidx.annotation.NonNull;\n+\n+import lkd.namsic.Game.Enum.Id;\n+import lkd.namsic.Setting.FileManager;\n+\n+public class Player implements Entity {\n+\n+    @NonNull\n+    @Override\n+    public String getPath() {\n+        return FileManager.DATA_PATH_MAP.get(Id.PLAYER) + this.objectId + \".txt\";\n+    }\n+\n+}"
  },
  {
    "sha": "3a903aa3c853f2e80e09af478a2de4fabed0ad52",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Quest.java",
    "status": "added",
    "additions": 319,
    "deletions": 0,
    "changes": 319,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Quest.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Quest.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Quest.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,319 @@\n+package lkd.namsic.Game.Class;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import lkd.namsic.Game.Base.RangeInteger;\n+import lkd.namsic.Game.Base.RangeIntegerMap;\n+import lkd.namsic.Game.Config;\n+import lkd.namsic.Game.Enum.Id;\n+import lkd.namsic.Game.Enum.StatType;\n+import lkd.namsic.Game.Exception.MapSetterException;\n+import lkd.namsic.Game.Exception.NumberRangeException;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+public class Quest implements GameObject {\n+\n+    @Setter\n+    @NonNull\n+    String name;\n+\n+    @Setter\n+    boolean isRepeatable = false;\n+\n+    RangeInteger limitLv = new RangeInteger(Config.MIN_LV, Config.MAX_LV);\n+    RangeIntegerMap<Long> limitCloseRate = new RangeIntegerMap<>(\n+            new HashMap<Long, Integer>(), new HashMap<Long, Integer>()\n+    );\n+    RangeIntegerMap<StatType> limitStat = new RangeIntegerMap<>(\n+            new HashMap<StatType, Integer>(), new HashMap<StatType, Integer>()\n+    );\n+\n+    @Setter\n+    int needMoney;\n+    @Setter\n+    int needExp;\n+    @Setter\n+    int needAdv;\n+\n+    Map<Long, Integer> needItem;\n+    Map<StatType, Integer> needStat;\n+    Map<Long, Integer> needCloseRate;\n+\n+    @Setter\n+    int rewardMoney;\n+    @Setter\n+    int rewardExp;\n+    @Setter\n+    int rewardAdv;\n+\n+    Map<Long, Integer> rewardItem;\n+    Map<StatType, Integer> rewardStat;\n+    Map<Long, Integer> rewardCloseRate;\n+\n+    @Setter\n+    long npcId;\n+\n+    public Quest(@NonNull String name, boolean isRepeatable) {\n+        new Quest(name, isRepeatable, 0, Config.MIN_LV, Config.MAX_LV, new HashMap<Long, Integer>(), new HashMap<Long, Integer>(),\n+                new HashMap<StatType, Integer>(), new HashMap<StatType, Integer>(), 0, 0, 0,\n+                new HashMap<Long, Integer>(), new HashMap<StatType, Integer>(), new HashMap<Long, Integer>(), 0,\n+                0, 0, new HashMap<Long, Integer>(), new HashMap<StatType, Integer>(), new HashMap<Long, Integer>());\n+    }\n+\n+    public Quest(@NonNull String name, boolean isRepeatable, long npcId, int minLimitLv, int maxLimitLv,\n+                 @NonNull Map<Long, Integer> minLimitCloseRate, @NonNull Map<Long, Integer> maxLimitCloseRate,\n+                 @NonNull Map<StatType, Integer> minLimitStat, @NonNull Map<StatType, Integer> maxLimitStat,\n+                 int needMoney, int needExp, int needAdv, @NonNull Map<Long, Integer> needItem,\n+                 @NonNull Map<StatType, Integer> needStat, @NonNull Map<Long, Integer> needCloseRate,\n+                 int rewardMoney, int rewardExp, int rewardAdv, @NonNull Map<Long, Integer> rewardItem,\n+                 @NonNull Map<StatType, Integer> rewardStat, @NonNull Map<Long, Integer> rewardCloseRate) {\n+        this.id.setId(Id.QUEST);\n+\n+        this.name = name;\n+        this.isRepeatable = isRepeatable;\n+\n+        this.npcId = npcId;\n+\n+        this.limitLv.set(minLimitLv, maxLimitLv);\n+        this.limitCloseRate.set(minLimitCloseRate, maxLimitCloseRate);\n+        this.limitStat.set(minLimitStat, maxLimitStat);\n+\n+        this.needMoney = needMoney;\n+        this.needExp = needExp;\n+        this.needAdv = needAdv;\n+        this.setNeedItem(needItem);\n+        this.setNeedStat(needStat);\n+        this.setNeedCloseRate(needCloseRate);\n+\n+        this.rewardMoney = rewardMoney;\n+        this.rewardExp = rewardExp;\n+        this.rewardAdv = rewardAdv;\n+        this.setRewardItem(rewardItem);\n+        this.setRewardStat(rewardStat);\n+        this.setRewardCloseRate(rewardCloseRate);\n+    }\n+\n+    public void setNeedItem(Map<Long, Integer> needItem) {\n+        Map<Long, Integer> copy = new HashMap<>(this.needItem);\n+\n+        try {\n+            for(Map.Entry<Long, Integer> entry : needItem.entrySet()) {\n+                this.setNeedItem(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.needItem = copy;\n+            throw new MapSetterException(copy, needItem, e);\n+        }\n+    }\n+\n+    public void setNeedItem(long itemId, int count) {\n+        Config.checkId(Id.ITEM, itemId);\n+\n+        if(count < 0) {\n+            throw new NumberRangeException(count, 0);\n+        }\n+\n+        if(count == 0) {\n+            this.needItem.remove(itemId);\n+        } else {\n+            this.needItem.put(itemId, count);\n+        }\n+    }\n+\n+    public int getNeedItem(long itemId) {\n+        Integer value = this.needItem.get(itemId);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    public void setNeedStat(Map<StatType, Integer> needStat) {\n+        Map<StatType, Integer> copy = new HashMap<>(this.needStat);\n+\n+        try {\n+            for(Map.Entry<StatType, Integer> entry : needStat.entrySet()) {\n+                this.setNeedStat(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.needStat = copy;\n+            throw new MapSetterException(copy, needStat, e);\n+        }\n+    }\n+\n+    public void setNeedStat(StatType statType, int stat) {\n+        if(stat < 0) {\n+            throw new NumberRangeException(stat, 0);\n+        }\n+\n+        if(stat == 0) {\n+            this.needStat.remove(statType);\n+        } else {\n+            this.needStat.put(statType, stat);\n+        }\n+    }\n+\n+    public int getNeedStat(StatType statType) {\n+        Integer value = this.needStat.get(statType);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    public void setNeedCloseRate(Map<Long, Integer> needCloseRate) {\n+        Map<Long, Integer> copy = new HashMap<>(this.needCloseRate);\n+\n+        try {\n+            for(Map.Entry<Long, Integer> entry : needCloseRate.entrySet()) {\n+                this.setNeedCloseRate(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.needCloseRate = copy;\n+            throw new MapSetterException(copy, needCloseRate, e);\n+        }\n+    }\n+\n+    public void setNeedCloseRate(long npcId, int closeRate) {\n+        Config.checkId(Id.NPC, npcId);\n+\n+        if(closeRate < 0) {\n+            throw new NumberRangeException(closeRate, 0);\n+        }\n+\n+        if(closeRate == 0) {\n+            this.needCloseRate.remove(npcId);\n+        } else {\n+            this.needCloseRate.put(npcId, closeRate);\n+        }\n+    }\n+\n+    public int getNeedCloseRate(long npcId) {\n+        Integer value = this.needCloseRate.get(npcId);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    public void setRewardItem(Map<Long, Integer> rewardItem) {\n+        Map<Long, Integer> copy = new HashMap<>(this.rewardItem);\n+\n+        try {\n+            for(Map.Entry<Long, Integer> entry : rewardItem.entrySet()) {\n+                this.setRewardItem(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.rewardItem = copy;\n+            throw new MapSetterException(copy, rewardItem, e);\n+        }\n+    }\n+\n+    public void setRewardItem(long itemId, int count) {\n+        Config.checkId(Id.ITEM, itemId);\n+\n+        if(count < 0) {\n+            throw new NumberRangeException(count, 0);\n+        }\n+\n+        if(count == 0) {\n+            this.rewardItem.remove(itemId);\n+        } else {\n+            this.rewardItem.put(itemId, count);\n+        }\n+    }\n+\n+    public int getRewardItem(long itemId) {\n+        Integer value = this.rewardItem.get(itemId);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    public void setRewardCloseRate(Map<Long, Integer> rewardCloseRate) {\n+        Map<Long, Integer> copy = new HashMap<>(this.rewardCloseRate);\n+\n+        try {\n+            for(Map.Entry<Long, Integer> entry : rewardCloseRate.entrySet()) {\n+                this.setRewardCloseRate(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.rewardCloseRate = copy;\n+            throw new MapSetterException(copy, rewardCloseRate, e);\n+        }\n+    }\n+\n+    public void setRewardCloseRate(long npcId, int closeRate) {\n+        Config.checkId(Id.NPC, npcId);\n+\n+        if(closeRate < 0) {\n+            throw new NumberRangeException(closeRate, 0);\n+        }\n+\n+        if(closeRate == 0) {\n+            this.rewardCloseRate.remove(npcId);\n+        } else {\n+            this.rewardCloseRate.put(npcId, closeRate);\n+        }\n+    }\n+\n+    public int getRewardCloseRate(long npcId) {\n+        Integer value = this.rewardCloseRate.get(npcId);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    public void setRewardStat(Map<StatType, Integer> rewardStat) {\n+        Map<StatType, Integer> copy = new HashMap<>(this.rewardStat);\n+\n+        try {\n+            for(Map.Entry<StatType, Integer> entry : rewardStat.entrySet()) {\n+                this.setRewardStat(entry.getKey(), entry.getValue());\n+            }\n+        } catch (Exception e) {\n+            this.rewardStat = copy;\n+            throw new MapSetterException(copy, rewardStat, e);\n+        }\n+    }\n+\n+    public void setRewardStat(StatType statType, int stat) {\n+        if(stat < 0) {\n+            throw new NumberRangeException(stat, 0);\n+        }\n+\n+        if(stat == 0) {\n+            this.rewardStat.remove(statType);\n+        } else {\n+            this.rewardStat.put(statType, stat);\n+        }\n+    }\n+\n+    public int getRewardStat(StatType statType) {\n+        Integer value = this.rewardStat.get(statType);\n+\n+        if(value == null) {\n+            return 0;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "c91d691ec016cc43fdd414a25e4dbfe985f550d2",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Research.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Research.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Research.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Research.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,5 @@\n+package lkd.namsic.Game.Class;\n+\n+public class Research implements GameObject {\n+\n+}"
  },
  {
    "sha": "99c4c9232ab52003ad4aabf6ab6f75ed8f9bc094",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Skill.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Skill.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Skill.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Skill.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,44 @@\n+package lkd.namsic.Game.Class;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import lkd.namsic.Game.Base.RangeIntegerMap;\n+import lkd.namsic.Game.Enum.Id;\n+import lkd.namsic.Game.Enum.StatType;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+public class Skill implements GameObject {\n+\n+    @Setter\n+    @NonNull\n+    String name;\n+\n+    @Setter\n+    boolean isPassive = false;\n+\n+    @Nullable\n+    @Setter\n+    Use use;\n+\n+    //Only use on getting\n+    RangeIntegerMap<StatType> limitStat = new RangeIntegerMap<>(\n+            new HashMap<StatType, Integer>(), new HashMap<StatType, Integer>()\n+    );\n+\n+    public Skill(@NonNull String name, boolean isPassive, @Nullable Use use,\n+                 @NonNull Map<StatType, Integer> minLimitStat, @NonNull Map<StatType, Integer> maxLimitStat) {\n+        this.id.setId(Id.SKILL);\n+\n+        this.name = name;\n+        this.isPassive = isPassive;\n+        this.use = use;\n+        this.limitStat.set(minLimitStat, maxLimitStat);\n+    }\n+\n+}"
  },
  {
    "sha": "35b70bbba30b3fa797543613bba68a219d7bc4e6",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Class/Use.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Use.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Class/Use.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Class/Use.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,9 @@\n+package lkd.namsic.Game.Class;\n+\n+import java.util.List;\n+\n+public interface Use {\n+\n+    void use(Entity user, List<Entity> other);\n+\n+}"
  },
  {
    "sha": "f9f453e2521478d605b8a58bcd40ba11e351c90b",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Config.java",
    "status": "added",
    "additions": 221,
    "deletions": 0,
    "changes": 221,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Config.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Config.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Config.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,221 @@\n+package lkd.namsic.Game;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.AbstractMap;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import lkd.namsic.Game.Class.GameObject;\n+import lkd.namsic.Game.Enum.Id;\n+import lkd.namsic.Game.Exception.NumberRangeException;\n+import lkd.namsic.Setting.FileManager;\n+import lkd.namsic.Setting.Logger;\n+\n+public class Config {\n+\n+    public static final Map<Id, Map<Long, GameObject>> CURRENT_OBJECT = new ConcurrentHashMap<>();\n+    public static final Map<Id, Map<Long, Long>> CURRENT_OBJECT_COUNT = new ConcurrentHashMap<>();\n+    public static final Map<Id, Long> ID_MAP = new ConcurrentHashMap<>();\n+\n+    public static final int MIN_MAP_X = 0;\n+    public static final int MAX_MAP_X = 10;\n+    public static final int MIN_MAP_Y = 0;\n+    public static final int MAX_MAP_Y = 10;\n+\n+    public static final int MIN_HANDLE_LV = 1;\n+    public static final int MAX_HANDLE_LV = 20;\n+    public static final int MIN_REINFORCE_COUNT = 0;\n+    public static final int MAX_REINFORCE_COUNT = 19;\n+    public static final int MIN_LV = 1;\n+    public static final int MAX_LV = 999;\n+\n+    public static void init() {\n+        if(!CURRENT_OBJECT.isEmpty()) {\n+            return;\n+        }\n+\n+        for(Id id : Id.values()) {\n+            CURRENT_OBJECT.put(id, new ConcurrentHashMap<Long, GameObject>());\n+            CURRENT_OBJECT_COUNT.put(id, new ConcurrentHashMap<Long, Long>());\n+            ID_MAP.put(id, 1L);\n+        }\n+    }\n+\n+    public static JSONObject createConfig() throws JSONException {\n+        JSONObject jsonObject = new JSONObject();\n+\n+        JSONObject idObject = new JSONObject();\n+        for(Id id : Id.values()) {\n+            idObject.put(id.toString(), 1L);\n+        }\n+        jsonObject.put(\"id\", idObject);\n+\n+        return jsonObject;\n+    }\n+\n+    public static void parseConfig(JSONObject jsonObject) throws JSONException {\n+        JSONObject idObject = jsonObject.getJSONObject(\"id\");\n+\n+        String idName;\n+        for(Id id : Id.values()) {\n+            idName = id.toString();\n+            idObject.put(idName, idObject.getLong(idName));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    public static <T extends GameObject> T newObject(@NonNull T t) {\n+        Id id = t.id.getId();\n+        long objectId = ID_MAP.get(id);\n+\n+        t.id.setObjectId(objectId);\n+        ID_MAP.put(id, objectId + 1);\n+\n+        return t;\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    public static void checkId(Id id, long objectId) throws NumberRangeException {\n+        if(objectId < 1 || ID_MAP.get(id) < objectId) {\n+            throw new NumberRangeException(objectId, 1, ID_MAP.get(id));\n+        }\n+    }\n+\n+    @Nullable\n+    public static String serialize(@NonNull GameObject gameObject) {\n+        byte[] serialized;\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n+            ObjectOutputStream oos = new ObjectOutputStream(baos);\n+            oos.writeObject(gameObject);\n+            serialized = baos.toByteArray();\n+        } catch (IOException e) {\n+            Logger.e(\"serialize\", e);\n+            return null;\n+        }\n+\n+        return Base64.getEncoder().encodeToString(serialized);\n+    }\n+\n+    @Nullable\n+    public static <T extends GameObject> T deserialize(String byteStr) {\n+        byte[] serialized = Base64.getDecoder().decode(byteStr);\n+        try (ByteArrayInputStream bais = new ByteArrayInputStream(serialized)) {\n+            ObjectInputStream ois = new ObjectInputStream(bais);\n+            Object object = ois.readObject();\n+            return (T) object;\n+        } catch (IOException | ClassNotFoundException e) {\n+            Logger.e(\"deserialize\", e);\n+            return null;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    public static void saveObject(GameObject gameObject) {\n+        Id id = gameObject.id.getId();\n+        long objectId = gameObject.id.getObjectId();\n+        Long objectCount = CURRENT_OBJECT_COUNT.get(id).get(objectId);\n+\n+        if(objectCount != 1) {\n+            CURRENT_OBJECT_COUNT.get(id).put(objectId, objectCount - 1);\n+        } else {\n+            String serialized = serialize(gameObject);\n+            String path = getPath(id, objectId);\n+            if (serialized == null) {\n+                Logger.e(\"saveObject\", new RuntimeException(\"Failed to save object - \" + path));\n+                return;\n+            }\n+\n+            FileManager.save(path, serialized);\n+            CURRENT_OBJECT.get(id).remove(objectId);\n+            CURRENT_OBJECT_COUNT.get(id).remove(objectId);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Nullable\n+    public static <T extends GameObject> T getObject(Id id, long objectId) {\n+        Long objectCount = CURRENT_OBJECT_COUNT.get(id).get(objectId);\n+\n+        if(objectCount == null) {\n+            String serialized = FileManager.read(getPath(id, objectId));\n+            if (serialized.equals(\"\")) {\n+                Logger.e(\"getObject\", new RuntimeException(\"Failed to get object - \" + id + \", \" + objectId));\n+                return null;\n+            }\n+\n+            T t = deserialize(serialized);\n+            CURRENT_OBJECT.get(id).put(objectId, t);\n+            CURRENT_OBJECT_COUNT.get(id).put(objectId, 1L);\n+            return t;\n+        } else {\n+            CURRENT_OBJECT_COUNT.get(id).put(objectId, objectCount + 1);\n+            return (T) CURRENT_OBJECT.get(id).get(objectId);\n+        }\n+    }\n+\n+    @NonNull\n+    public static String mapsToString(@NonNull Map<?, ?> map1, @NonNull Map<?, ?> map2) {\n+        String str1, str2;\n+\n+        if(map1 instanceof AbstractMap) {\n+            str1 = map1.toString();\n+        } else {\n+            str1 = new HashMap<>(map1).toString();\n+        }\n+\n+        if(map2 instanceof AbstractMap) {\n+            str2 = map2.toString();\n+        } else {\n+            str2 = new HashMap<>(map2).toString();\n+        }\n+\n+        return str1 + \", \" + str2;\n+    }\n+\n+    public static <T> boolean compareMap(Map<T, Integer> map1, Map<T, Integer> map2, boolean firstIsBig) {\n+        Integer value;\n+        for(Map.Entry<T, Integer> entry : map1.entrySet()) {\n+            if((value = map2.get(entry.getKey())) != null) {\n+                if(firstIsBig) {\n+                    if(entry.getValue() < value) {\n+                        return false;\n+                    }\n+                } else if(entry.getValue() > value) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private static String getPath(Id id, long objectId) {\n+        return FileManager.DATA_PATH_MAP.get(id) + objectId + \".txt\";\n+    }\n+\n+    public static String errorString(Throwable throwable) {\n+        StringBuilder builder = new StringBuilder(throwable.getClass().getName());\n+        builder.append(\": \");\n+        builder.append(throwable.getMessage());\n+        builder.append(\"\\n\");\n+        for(StackTraceElement element : throwable.getStackTrace()) {\n+            builder.append(\"\\tat\");\n+            builder.append(element.toString());\n+        }\n+\n+        return builder.toString();\n+    }\n+\n+}"
  },
  {
    "sha": "711d3771eb7deedcd7b99579ea88d618bc9be5ed",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Enum/DamageType.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Enum/DamageType.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Enum/DamageType.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Enum/DamageType.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,9 @@\n+package lkd.namsic.Game.Enum;\n+\n+public enum DamageType {\n+\n+    PHYSICS,\n+    MAGIC,\n+    STATIC\n+\n+}"
  },
  {
    "sha": "c779800a8184fbfd35813c028bf7ee1612f4a2ac",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Enum/Doing.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Enum/Doing.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Enum/Doing.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Enum/Doing.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,16 @@\n+package lkd.namsic.Game.Enum;\n+\n+public enum Doing {\n+\n+    IDLE,\n+    MOVE,\n+    BUY,\n+    CHAT,\n+    FIGHT,\n+    EXPLORE,\n+    MINE,\n+    GATHER,\n+    HARVEST,\n+    REINFORCE\n+\n+}"
  },
  {
    "sha": "4184a8b486f808f0f1bf5f8715cd5082e0165433",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Enum/EquipType.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Enum/EquipType.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Enum/EquipType.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Enum/EquipType.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -0,0 +1,55 @@\n+package lkd.namsic.Game.Enum;\n+\n+public enum EquipType {\n+\n+    /**\n+     * 투구 - 치명타 방어\n+     */\n+    HELMET,\n+\n+    /**\n+     * 갑옷(상의) - 기본 방어1\n+     */\n+    CHESTPLATE,\n+\n+    /**\n+     * 갑옷(하의) - 기본 방어2\n+     */\n+    LEGGINGS,\n+\n+    /**\n+     * 신발 - 이속, 회피, 정확성\n+     */\n+    SHOES,\n+\n+    /**\n+     * 반지 - 속성 강화\n+     */\n+    RING,\n+\n+    /**\n+     * 귀걸이 - 스텟 강화1\n+     */\n+    EARRING,\n+\n+    /**\n+     * 목걸이 - 스텟 강화2\n+     */\n+    NECKLACE,\n+\n+    /**\n+     * 보석 - 패시브 스킬\n+     */\n+    GEM,\n+\n+    /**\n+     * 액티브 스킬(보석 3개 장착 시 자동 생성)\n+     */\n+    HEART_GEM,\n+\n+    /**\n+     * 부적 - 각각 특별한 효과\n+     */\n+    AMULET\n+\n+}"
  },
  {
    "sha": "b1555e56d3179f93512bb0cda118a5207da5d1ea",
    "filename": "CNKB/app/src/main/java/lkd/namsic/Game/Enum/Id.java",
    "status": "modified",
    "additions": 10,
    "deletions": 3,
    "changes": 13,
    "blob_url": "https://github.com/namsic6460/CNKB_Android/blob/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Enum/Id.java",
    "raw_url": "https://github.com/namsic6460/CNKB_Android/raw/f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41/CNKB/app/src/main/java/lkd/namsic/Game/Enum/Id.java",
    "contents_url": "https://api.github.com/repos/namsic6460/CNKB_Android/contents/CNKB/app/src/main/java/lkd/namsic/Game/Enum/Id.java?ref=f6eaf8c29f4daad2ec9a8a4477ef1c21c0478d41",
    "patch": "@@ -2,9 +2,16 @@\n \n public enum Id {\n \n-    PLAYER,\n-    MONSTER,\n+    ACHIEVE,\n+    BUILDING,\n+    CHAT,\n+    EQUIPMENT,\n     ITEM,\n-    EQUIPMENT\n+    MONSTER,\n+    NPC,\n+    PLAYER,\n+    QUEST,\n+    RESEARCH,\n+    SKILL\n \n }"
  }
]
