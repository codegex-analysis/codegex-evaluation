[
  {
    "sha": "06cfb7843d4736b101d94dc92a53990e7271dea4",
    "filename": "src/main/java/gregtech/loaders/oreprocessing/ProcessingPlate.java",
    "status": "modified",
    "additions": 551,
    "deletions": 175,
    "changes": 726,
    "blob_url": "https://github.com/GTNewHorizons/GT5-Unofficial/blob/e5f7be89071a0da87f5590279dc22f8142b445c8/src/main/java/gregtech/loaders/oreprocessing/ProcessingPlate.java",
    "raw_url": "https://github.com/GTNewHorizons/GT5-Unofficial/raw/e5f7be89071a0da87f5590279dc22f8142b445c8/src/main/java/gregtech/loaders/oreprocessing/ProcessingPlate.java",
    "contents_url": "https://api.github.com/repos/GTNewHorizons/GT5-Unofficial/contents/src/main/java/gregtech/loaders/oreprocessing/ProcessingPlate.java?ref=e5f7be89071a0da87f5590279dc22f8142b445c8",
    "patch": "@@ -1,18 +1,34 @@\n package gregtech.loaders.oreprocessing;\n \n import gregtech.api.GregTech_API;\n-import gregtech.api.enums.*;\n+import gregtech.api.enums.ConfigCategories;\n+import gregtech.api.enums.ItemList;\n+import gregtech.api.enums.Materials;\n+import gregtech.api.enums.OrePrefixes;\n+import gregtech.api.enums.SubTag;\n+import gregtech.api.enums.TextureSet;\n+import gregtech.api.enums.ToolDictNames;\n import gregtech.api.objects.GT_CopiedBlockTexture;\n-import gregtech.api.objects.GT_RenderedTexture;\n+import gregtech.api.objects.GT_StdRenderedTexture;\n import gregtech.api.util.GT_ModHandler;\n import gregtech.api.util.GT_OreDictUnificator;\n import gregtech.api.util.GT_RecipeRegistrator;\n import gregtech.api.util.GT_Utility;\n-import gregtech.common.GT_Proxy;\n+import net.minecraft.block.Block;\n import net.minecraft.init.Blocks;\n+import net.minecraft.init.Items;\n import net.minecraft.item.ItemStack;\n \n-public class ProcessingPlate implements gregtech.api.interfaces.IOreRecipeRegistrator {//TODO COMPARE WITH OLD PLATE## generator\n+import static gregtech.api.enums.ConfigCategories.Recipes.harderrecipes;\n+import static gregtech.api.enums.GT_Values.L;\n+import static gregtech.api.enums.GT_Values.NI;\n+import static gregtech.api.enums.GT_Values.RA;\n+import static gregtech.api.enums.GT_Values.W;\n+import static gregtech.api.util.GT_ModHandler.RecipeBits.BUFFERED;\n+import static gregtech.api.util.GT_ModHandler.RecipeBits.DO_NOT_CHECK_FOR_COLLISIONS;\n+import static gregtech.common.GT_Proxy.tBits;\n+\n+public class ProcessingPlate implements gregtech.api.interfaces.IOreRecipeRegistrator {\n     public ProcessingPlate() {\n         OrePrefixes.plate.add(this);\n         OrePrefixes.plateDouble.add(this);\n@@ -24,195 +40,555 @@ public ProcessingPlate() {\n         OrePrefixes.itemCasing.add(this);\n     }\n \n-    public void registerOre(OrePrefixes aPrefix, Materials aMaterial, String aOreDictName, String aModName, ItemStack aStack) {\n-        boolean aNoSmashing = aMaterial.contains(SubTag.NO_SMASHING);\n-        boolean aNoWorking = aMaterial.contains(SubTag.NO_WORKING);\n-        long aMaterialMass = aMaterial.getMass();\n-        \n+    /**\n+     * Register processes for the {@link ItemStack} with Ore Dictionary Name Prefix \"plate\"\n+     *\n+     * @param aPrefix      always != null, the {@link OrePrefixes} of the {@link ItemStack}\n+     * @param aMaterial    always != null, and can be == _NULL if the Prefix is Self Referencing or not Material based!\n+     *                     the {@link Materials} of the {@link ItemStack}\n+     * @param aOreDictName the Ore Dictionary Name {@link String} of the {@link ItemStack}\n+     * @param aModName     the ModID {@link String} of the mod providing this {@link ItemStack}\n+     * @param aStack       always != null, the {@link ItemStack} to register\n+     */\n+    public void registerOre(OrePrefixes aPrefix,\n+                            Materials aMaterial,\n+                            String aOreDictName,\n+                            String aModName,\n+                            ItemStack aStack) {\n+\n+        final boolean aNoSmashing = aMaterial.contains(SubTag.NO_SMASHING);\n+        final boolean aNoWorking = aMaterial.contains(SubTag.NO_WORKING);\n+        final long aMaterialMass = aMaterial.getMass();\n+\n         switch (aPrefix) {\n             case plate:\n-                GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                GT_ModHandler.removeRecipeDelayed(aStack);\n-\n-                if (aMaterial.mStandardMoltenFluid != null) {\n-                    if (!(aMaterial == Materials.AnnealedCopper || aMaterial == Materials.WroughtIron)) {\n-                        GT_Values.RA.addFluidSolidifierRecipe(ItemList.Shape_Mold_Plate.get(0L), aMaterial.getMolten(144L), GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 1L), 32, 8);\n-                    }\n-                }\n-                switch (aMaterial.mName) {\n-                    case \"Iron\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.iron_block, 1, 0), null);\n-                        break;\n-                    case \"Gold\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.gold_block, 1, 0), null);\n-                        break;\n-                    case \"Diamond\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.diamond_block, 1, 0), null);\n-                        break;\n-                    case \"Emerald\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.emerald_block, 1, 0), null);\n-                        break;\n-                    case \"Lapis\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.lapis_block, 1, 0), null);\n-                        break;\n-                    case \"Coal\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.coal_block, 1, 0), null);\n-                        break;\n-                    case \"Redstone\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.redstone_block, 1, 0), null);\n-                        break;\n-                    case \"Glowstone\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.glowstone, 1, 0), null);\n-                        break;\n-                    case \"NetherQuartz\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.quartz_block, 1, 0), null);\n-                        break;\n-                    case \"Obsidian\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.obsidian, 1, 0), null);\n-                        break;\n-                    case \"Stone\":\n-                        GregTech_API.registerCover(aStack, new GT_CopiedBlockTexture(Blocks.stone, 1, 0), null);\n-                        break;\n-                    case \"GraniteBlack\":\n-                        GregTech_API.registerCover(aStack, new GT_RenderedTexture(gregtech.api.enums.Textures.BlockIcons.GRANITE_BLACK_SMOOTH), null);\n-                        break;\n-                    case \"GraniteRed\":\n-                        GregTech_API.registerCover(aStack, new GT_RenderedTexture(gregtech.api.enums.Textures.BlockIcons.GRANITE_RED_SMOOTH), null);\n-                        break;\n-                    case \"Basalt\":\n-                        GregTech_API.registerCover(aStack, new GT_RenderedTexture(gregtech.api.enums.Textures.BlockIcons.BASALT_SMOOTH), null);\n-                        break;\n-                    case \"Marble\":\n-                        GregTech_API.registerCover(aStack, new GT_RenderedTexture(gregtech.api.enums.Textures.BlockIcons.MARBLE_SMOOTH), null);\n-                        break;\n-                    case \"Concrete\":\n-                        GregTech_API.registerCover(aStack, new GT_RenderedTexture(gregtech.api.enums.Textures.BlockIcons.CONCRETE_LIGHT_SMOOTH), null);\n-                        break;\n-                    default:\n-                        GregTech_API.registerCover(aStack, new GT_RenderedTexture(aMaterial.mIconSet.mTextures[71], aMaterial.mRGBa, false), null);\n-                }\n-\n-                if (aMaterial.mFuelPower > 0)\n-                    GT_Values.RA.addFuel(GT_Utility.copyAmount(1L, aStack), null, aMaterial.mFuelPower, aMaterial.mFuelType);\n-                GT_Utility.removeSimpleIC2MachineRecipe(GT_Utility.copyAmount(9L, aStack), GT_ModHandler.getCompressorRecipeList(), GT_OreDictUnificator.get(OrePrefixes.plateDense, aMaterial, 1L));\n-                GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.foil, aMaterial, 2L), GT_Proxy.tBits, new Object[]{\"hX\", 'X', OrePrefixes.plate.get(aMaterial)});\n-                \n-                if (aMaterial == Materials.Paper)\n-                    GT_ModHandler.addCraftingRecipe(GT_Utility.copyAmount(GregTech_API.sRecipeFile.get(gregtech.api.enums.ConfigCategories.Recipes.harderrecipes, aStack, true) ? 2L : 3L, aStack), GT_ModHandler.RecipeBits.BUFFERED, new Object[]{\"XXX\", 'X', new ItemStack(net.minecraft.init.Items.reeds, 1, 32767)});\n-\n-                if ((aMaterial.mUnificatable) && (aMaterial.mMaterialInto == aMaterial)) {\n-                    if (!aNoSmashing && GregTech_API.sRecipeFile.get(ConfigCategories.Tools.hammerplating, aMaterial.toString(), true)) {\n-                        GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 1L), GT_Proxy.tBits, new Object[]{\"h\", \"X\", \"X\", 'X', OrePrefixes.ingot.get(aMaterial)});\n-                        GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 1L), GT_Proxy.tBits, new Object[]{\"H\", \"X\", 'H', ToolDictNames.craftingToolForgeHammer, 'X', OrePrefixes.ingot.get(aMaterial)});\n-                        GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 1L), GT_Proxy.tBits, new Object[]{\"h\", \"X\", 'X', OrePrefixes.gem.get(aMaterial)});\n-                        GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 1L), GT_Proxy.tBits, new Object[]{\"H\", \"X\", 'H', ToolDictNames.craftingToolForgeHammer, 'X', OrePrefixes.gem.get(aMaterial)});\n-                        //GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 1L), GT_Proxy.tBits, new Object[]{\"h\", \"X\", 'X', OrePrefixes.ingotDouble.get(aMaterial)});\n-                        //GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 2L), GT_Proxy.tBits, new Object[]{\"H\", \"X\", 'H', ToolDictNames.craftingToolForgeHammer, 'X', OrePrefixes.ingotDouble.get(aMaterial)});\n-                    }\n-                    if ((aMaterial.contains(SubTag.MORTAR_GRINDABLE)) && (GregTech_API.sRecipeFile.get(ConfigCategories.Tools.mortar, aMaterial.mName, true)))\n-                        GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.dust, aMaterial, 1L), GT_Proxy.tBits, new Object[]{\"X\", \"m\", 'X', OrePrefixes.plate.get(aMaterial)});\n-                }\n+                registerPlate(aMaterial, aStack, aNoSmashing);\n                 break;\n             case plateDouble:\n-                GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                GregTech_API.registerCover(aStack, new gregtech.api.objects.GT_RenderedTexture(aMaterial.mIconSet.mTextures[72], aMaterial.mRGBa, false), null);\n-                if (!aNoSmashing) {\n-                    GT_Values.RA.addBenderRecipe(GT_Utility.copyAmount(2L, aStack), GT_OreDictUnificator.get(OrePrefixes.plateQuadruple, aMaterial, 1L), (int) Math.max(aMaterialMass * 2L, 1L), 96);\n-                    if (GregTech_API.sRecipeFile.get(gregtech.api.enums.ConfigCategories.Tools.hammerdoubleplate, OrePrefixes.plate.get(aMaterial).toString(), true)) {\n-                        Object aPlateStack = OrePrefixes.plate.get(aMaterial);\n-                        GT_ModHandler.addCraftingRecipe(GT_Utility.copyAmount(1L, aStack), gregtech.api.util.GT_ModHandler.RecipeBits.DO_NOT_CHECK_FOR_COLLISIONS | gregtech.api.util.GT_ModHandler.RecipeBits.BUFFERED, new Object[]{\"I\", \"B\", \"h\", 'I', aPlateStack, 'B', aPlateStack});\n-                        GT_ModHandler.addShapelessCraftingRecipe(GT_Utility.copyAmount(1L, aStack), new Object[]{gregtech.api.enums.ToolDictNames.craftingToolForgeHammer, aPlateStack, aPlateStack});\n-                    }\n-                    GT_Values.RA.addBenderRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 2L), GT_Utility.copyAmount(1L, aStack), (int) Math.max(aMaterialMass * 2L, 1L), 96);\n-                } else {\n-                        GT_Values.RA.addAssemblerRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 2L), gregtech.api.enums.ItemList.Circuit_Integrated.getWithDamage(0L, 2L), Materials.Glue.getFluid(10L), GT_Utility.copyAmount(1L, aStack), 64, 8);\n-                    }\n+                registerPlateDouble(aMaterial, aStack, aNoSmashing, aMaterialMass);\n                 break;\n             case plateTriple:\n-                GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                GregTech_API.registerCover(aStack, new gregtech.api.objects.GT_RenderedTexture(aMaterial.mIconSet.mTextures[73], aMaterial.mRGBa, false), null);\n-                if (!aNoSmashing) {\n-                    GT_Values.RA.addBenderRecipe(GT_Utility.copyAmount(3L, aStack), GT_OreDictUnificator.get(OrePrefixes.plateDense, aMaterial, 1L), (int) Math.max(aMaterialMass * 3L, 1L), 96);\n-                    if (GregTech_API.sRecipeFile.get(gregtech.api.enums.ConfigCategories.Tools.hammertripleplate, OrePrefixes.plate.get(aMaterial).toString(), true)) {\n-                        Object aPlateStack = OrePrefixes.plate.get(aMaterial);\n-                        GT_ModHandler.addCraftingRecipe(GT_Utility.copyAmount(1L, aStack), gregtech.api.util.GT_ModHandler.RecipeBits.DO_NOT_CHECK_FOR_COLLISIONS | gregtech.api.util.GT_ModHandler.RecipeBits.BUFFERED, new Object[]{\"I\", \"B\", \"h\", 'I', OrePrefixes.plateDouble.get(aMaterial), 'B', aPlateStack});\n-                        GT_ModHandler.addShapelessCraftingRecipe(GT_Utility.copyAmount(1L, aStack), new Object[]{gregtech.api.enums.ToolDictNames.craftingToolForgeHammer, aPlateStack, aPlateStack, aPlateStack});\n-                    } \n-                    GT_Values.RA.addBenderRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 3L), GT_Utility.copyAmount(1L, aStack), (int) Math.max(aMaterialMass * 3L, 1L), 96);\n-                }else {\n-                        GT_Values.RA.addAssemblerRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 3L), gregtech.api.enums.ItemList.Circuit_Integrated.getWithDamage(0L, 3L), Materials.Glue.getFluid(20L), GT_Utility.copyAmount(1L, aStack), 96, 8);\n-                    }\n-                GT_Values.RA.addImplosionRecipe(GT_Utility.copyAmount(1L, aStack), 2, GT_OreDictUnificator.get(OrePrefixes.compressed, aMaterial, 1L), GT_OreDictUnificator.get(OrePrefixes.dustTiny, Materials.DarkAsh, 1L));//added\n+                registerPlateTriple(aMaterial, aStack, aNoSmashing, aMaterialMass);\n                 break;\n             case plateQuadruple:\n-                GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                GregTech_API.registerCover(aStack, new gregtech.api.objects.GT_RenderedTexture(aMaterial.mIconSet.mTextures[74], aMaterial.mRGBa, false), null);\n-                if (!aNoWorking)\n-                    GT_Values.RA.addCNCRecipe(GT_Utility.copyAmount(1L, aStack), GT_OreDictUnificator.get(OrePrefixes.gearGt, aMaterial, 1L), (int) Math.max(aMaterialMass * 2L, 1L), 30);\n-                if (!aNoSmashing) {\n-                    if (GregTech_API.sRecipeFile.get(gregtech.api.enums.ConfigCategories.Tools.hammerquadrupleplate, OrePrefixes.plate.get(aMaterial).toString(), true)) {\n-                        Object aPlateStack = OrePrefixes.plate.get(aMaterial);\n-                        GT_ModHandler.addCraftingRecipe(GT_Utility.copyAmount(1L, aStack), gregtech.api.util.GT_ModHandler.RecipeBits.DO_NOT_CHECK_FOR_COLLISIONS | gregtech.api.util.GT_ModHandler.RecipeBits.BUFFERED, new Object[]{\"I\", \"B\", \"h\", 'I', OrePrefixes.plateTriple.get(aMaterial), 'B', aPlateStack});\n-                        GT_ModHandler.addShapelessCraftingRecipe(GT_Utility.copyAmount(1L, aStack), new Object[]{gregtech.api.enums.ToolDictNames.craftingToolForgeHammer, aPlateStack, aPlateStack, aPlateStack, aPlateStack});\n-                    }\n-                    GT_Values.RA.addBenderRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 4L), GT_Utility.copyAmount(1L, aStack), (int) Math.max(aMaterialMass * 4L, 1L), 96);\n-                } else {\n-                        GT_Values.RA.addAssemblerRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 4L), gregtech.api.enums.ItemList.Circuit_Integrated.getWithDamage(0L, 4L), Materials.Glue.getFluid(30L), GT_Utility.copyAmount(1L, aStack), 128, 8);\n-                    }\n+                registerPlateQuadruple(aMaterial, aStack, aNoSmashing, aMaterialMass, aNoWorking);\n                 break;\n             case plateQuintuple:\n-                GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                GregTech_API.registerCover(aStack, new gregtech.api.objects.GT_RenderedTexture(aMaterial.mIconSet.mTextures[75], aMaterial.mRGBa, false), null);\n-                if (!aNoSmashing) {\n-                    if (GregTech_API.sRecipeFile.get(gregtech.api.enums.ConfigCategories.Tools.hammerquintupleplate, OrePrefixes.plate.get(aMaterial).toString(), true)) {\n-                        Object aPlateStack = OrePrefixes.plate.get(aMaterial);\n-                        GT_ModHandler.addCraftingRecipe(GT_Utility.copyAmount(1L, aStack), GT_ModHandler.RecipeBits.DO_NOT_CHECK_FOR_COLLISIONS | GT_ModHandler.RecipeBits.BUFFERED, new Object[]{\"I\", \"B\", \"h\", 'I', OrePrefixes.plateQuadruple.get(aMaterial), 'B', aPlateStack});\n-                        GT_ModHandler.addShapelessCraftingRecipe(GT_Utility.copyAmount(1L, aStack), new Object[]{ToolDictNames.craftingToolForgeHammer, aPlateStack, aPlateStack, aPlateStack, aPlateStack, aPlateStack});\n-                    }\n-                    GT_Values.RA.addBenderRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 5L), GT_Utility.copyAmount(1L, aStack), (int) Math.max(aMaterialMass * 5L, 1L), 96);\n-                } else {\n-                        gregtech.api.enums.GT_Values.RA.addAssemblerRecipe(gregtech.api.util.GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 5L), ItemList.Circuit_Integrated.getWithDamage(0L, 5L), Materials.Glue.getFluid(40L), GT_Utility.copyAmount(1L, aStack), 160, 8);\n-                    }\n+                registerPlateQuintuple(aMaterial, aStack, aNoSmashing, aMaterialMass);\n                 break;\n             case plateDense:\n-                GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                GregTech_API.registerCover(aStack, new GT_RenderedTexture(aMaterial.mIconSet.mTextures[76], aMaterial.mRGBa, false), null);\n-                if (!aNoSmashing) {\n-                    GT_Values.RA.addBenderRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 9L), GT_Utility.copyAmount(1L, aStack), (int) Math.max(aMaterialMass * 9L, 1L), 96);\n-                }\n+                registerPlateDense(aMaterial, aStack, aNoSmashing, aMaterialMass);\n                 break;\n             case itemCasing:\n+                registerItemCasing(aPrefix, aMaterial, aStack, aNoSmashing);\n+                break;\n+            case plateAlloy:\n+                registerPlateAlloy(aOreDictName, aStack);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void registerPlate(final Materials aMaterial, final ItemStack aStack, final boolean aNoSmashing) {\n+\n+        registerCover(aMaterial, aStack);\n+\n+        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n+        GT_ModHandler.removeRecipeDelayed(aStack);\n+\n+        GT_Utility.removeSimpleIC2MachineRecipe(\n+                GT_Utility.copyAmount(9L, aStack),\n+                GT_ModHandler.getCompressorRecipeList(),\n+                GT_OreDictUnificator.get(OrePrefixes.plateDense, aMaterial, 1L));\n+\n+        if (aMaterial.mFuelPower > 0) {\n+\n+            RA.addFuel(\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    NI,\n+                    aMaterial.mFuelPower,\n+                    aMaterial.mFuelType);\n+\n+        }\n+\n+        if (aMaterial.mStandardMoltenFluid != null &&\n+                !(aMaterial == Materials.AnnealedCopper || aMaterial == Materials.WroughtIron)) {\n+\n+            RA.addFluidSolidifierRecipe(\n+                    ItemList.Shape_Mold_Plate.get(0L),\n+                    aMaterial.getMolten(L),\n+                    aMaterial.getPlates(1),\n+                    32, 8);\n+\n+        }\n+\n+        GT_ModHandler.addCraftingRecipe(\n+                GT_OreDictUnificator.get(OrePrefixes.foil, aMaterial, 2L),\n+                tBits, // DO_NOT_CHECK_FOR_COLLISIONS|BUFFERED|ONLY_ADD_IF_RESULT_IS_NOT_NULL|NOT_REMOVABLE\n+                new Object[]{\n+                        \"hX\",\n+                        'X', OrePrefixes.plate.get(aMaterial)});\n+\n+        if (aMaterial == Materials.Paper) {\n+\n+            GT_ModHandler.addCraftingRecipe(\n+                    GT_Utility.copyAmount(\n+                            GregTech_API.sRecipeFile.get(harderrecipes, aStack, true) ? 2L : 3L,\n+                            aStack),\n+                    BUFFERED,\n+                    new Object[]{\n+                            \"XXX\",\n+                            'X', new ItemStack(Items.reeds, 1, W)});\n+        }\n+\n+        if (aMaterial.mUnificatable && aMaterial.mMaterialInto == aMaterial) {\n+\n+            if (!aNoSmashing &&\n+                    GregTech_API.sRecipeFile.get(ConfigCategories.Tools.hammerplating, aMaterial.toString(), true)) {\n+\n+                GT_ModHandler.addCraftingRecipe(\n+                        aMaterial.getPlates(1),\n+                        tBits, // DO_NOT_CHECK_FOR_COLLISIONS|BUFFERED|ONLY_ADD_IF_RESULT_IS_NOT_NULL|NOT_REMOVABLE\n+                        new Object[]{\n+                                \"h\", // craftingToolHardHammer\n+                                \"X\",\n+                                \"X\",\n+                                'X', OrePrefixes.ingot.get(aMaterial)});\n+\n+                // Only added if IC2 Forge Hammer is enabled in Recipes.cfg: B:ic2forgehammer_true=false\n+                GT_ModHandler.addCraftingRecipe(\n+                        aMaterial.getPlates(1),\n+                        tBits, // DO_NOT_CHECK_FOR_COLLISIONS|BUFFERED|ONLY_ADD_IF_RESULT_IS_NOT_NULL|NOT_REMOVABLE\n+                        new Object[]{\n+                                \"H\", // craftingToolForgeHammer\n+                                \"X\",\n+                                'H', ToolDictNames.craftingToolForgeHammer,\n+                                'X', OrePrefixes.ingot.get(aMaterial)});\n+\n+                GT_ModHandler.addCraftingRecipe(\n+                        aMaterial.getPlates(1),\n+                        tBits, // DO_NOT_CHECK_FOR_COLLISIONS|BUFFERED|ONLY_ADD_IF_RESULT_IS_NOT_NULL|NOT_REMOVABLE\n+                        new Object[]{\n+                                \"h\", // craftingToolHardHammer\n+                                \"X\",\n+                                'X', OrePrefixes.gem.get(aMaterial)});\n+\n+                // Only added if IC2 Forge Hammer is enabled in Recipes.cfg: B:ic2forgehammer_true=false\n+                GT_ModHandler.addCraftingRecipe(\n+                        aMaterial.getPlates(1),\n+                        tBits, // DO_NOT_CHECK_FOR_COLLISIONS|BUFFERED|ONLY_ADD_IF_RESULT_IS_NOT_NULL|NOT_REMOVABLE\n+                        new Object[]{\n+                                \"H\", // craftingToolForgeHammer\n+                                \"X\",\n+                                'H', ToolDictNames.craftingToolForgeHammer,\n+                                'X', OrePrefixes.gem.get(aMaterial)});\n+\n+            }\n+\n+            if ((aMaterial.contains(SubTag.MORTAR_GRINDABLE)) &&\n+                    (GregTech_API.sRecipeFile.get(ConfigCategories.Tools.mortar, aMaterial.mName, true))) {\n+\n+                GT_ModHandler.addCraftingRecipe(\n+                        aMaterial.getDust(1),\n+                        tBits, // DO_NOT_CHECK_FOR_COLLISIONS|BUFFERED|ONLY_ADD_IF_RESULT_IS_NOT_NULL|NOT_REMOVABLE\n+                        new Object[]{\n+                                \"X\",\n+                                \"m\",\n+                                'X', OrePrefixes.plate.get(aMaterial)});\n+\n+            }\n+        }\n+    }\n+\n+    private void registerPlateDouble(final Materials aMaterial,\n+                                     final ItemStack aStack,\n+                                     final boolean aNoSmashing,\n+                                     final long aMaterialMass) {\n+\n+        registerCover(aMaterial, aStack);\n+\n+        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n+\n+        if (!aNoSmashing) {\n+\n+            RA.addBenderRecipe(\n+                    GT_Utility.copyAmount(2L, aStack),\n+                    GT_OreDictUnificator.get(OrePrefixes.plateQuadruple, aMaterial, 1L),\n+                    (int) Math.max(aMaterialMass * 2L, 1L),\n+                    96);\n+\n+            if (GregTech_API.sRecipeFile.get(\n+                    gregtech.api.enums.ConfigCategories.Tools.hammerdoubleplate,\n+                    OrePrefixes.plate.get(aMaterial).toString(), true)) {\n+\n+                Object aPlateStack = OrePrefixes.plate.get(aMaterial);\n+\n+                GT_ModHandler.addCraftingRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        DO_NOT_CHECK_FOR_COLLISIONS | BUFFERED,\n+                        new Object[]{\n+                                \"I\",\n+                                \"B\",\n+                                \"h\", // craftingToolHardHammer\n+                                'I', aPlateStack,\n+                                'B', aPlateStack});\n+\n+                // Only added if IC2 Forge Hammer is enabled in Recipes.cfg: B:ic2forgehammer_true=false\n+                GT_ModHandler.addShapelessCraftingRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        DO_NOT_CHECK_FOR_COLLISIONS | BUFFERED,\n+                        new Object[]{\n+                                gregtech.api.enums.ToolDictNames.craftingToolForgeHammer,\n+                                aPlateStack,\n+                                aPlateStack});\n+\n+            }\n+\n+            RA.addBenderRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 2L),\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    (int) Math.max(aMaterialMass * 2L, 1L),\n+                    96);\n+\n+        } else {\n+\n+            RA.addAssemblerRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 2L),\n+                    gregtech.api.enums.ItemList.Circuit_Integrated.getWithDamage(0L, 2L),\n+                    Materials.Glue.getFluid(10L),\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    64, 8);\n+\n+        }\n+    }\n+\n+    private void registerPlateTriple(final Materials aMaterial,\n+                                     final ItemStack aStack,\n+                                     final boolean aNoSmashing,\n+                                     final long aMaterialMass) {\n+\n+        registerCover(aMaterial, aStack);\n+\n+        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n+\n+        if (!aNoSmashing) {\n+\n+            RA.addBenderRecipe(\n+                    GT_Utility.copyAmount(3L, aStack),\n+                    GT_OreDictUnificator.get(OrePrefixes.plateDense, aMaterial, 1L),\n+                    (int) Math.max(aMaterialMass * 3L, 1L),\n+                    96);\n+\n+            if (GregTech_API.sRecipeFile.get(\n+                    gregtech.api.enums.ConfigCategories.Tools.hammertripleplate,\n+                    OrePrefixes.plate.get(aMaterial).toString(), true)) {\n+\n+                Object aPlateStack = OrePrefixes.plate.get(aMaterial);\n+\n+                GT_ModHandler.addCraftingRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        DO_NOT_CHECK_FOR_COLLISIONS | BUFFERED,\n+                        new Object[]{\n+                                \"I\",\n+                                \"B\",\n+                                \"h\", // craftingToolHardHammer\n+                                'I', OrePrefixes.plateDouble.get(aMaterial),\n+                                'B', aPlateStack});\n+\n+                GT_ModHandler.addShapelessCraftingRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        DO_NOT_CHECK_FOR_COLLISIONS | BUFFERED,\n+                        new Object[]{\n+                                gregtech.api.enums.ToolDictNames.craftingToolForgeHammer,\n+                                aPlateStack, aPlateStack, aPlateStack});\n+\n+            }\n+\n+            RA.addBenderRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 3L),\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    (int) Math.max(aMaterialMass * 3L, 1L),\n+                    96);\n+\n+        } else {\n+\n+            RA.addAssemblerRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 3L),\n+                    gregtech.api.enums.ItemList.Circuit_Integrated.getWithDamage(0L, 3L),\n+                    Materials.Glue.getFluid(20L),\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    96, 8);\n+\n+        }\n+\n+        RA.addImplosionRecipe(\n+                GT_Utility.copyAmount(1L, aStack),\n+                2,\n+                GT_OreDictUnificator.get(OrePrefixes.compressed, aMaterial, 1L),\n+                GT_OreDictUnificator.get(OrePrefixes.dustTiny, Materials.DarkAsh, 1L));\n+\n+    }\n+\n+    private void registerPlateQuadruple(final Materials aMaterial,\n+                                        final ItemStack aStack,\n+                                        final boolean aNoSmashing,\n+                                        final long aMaterialMass,\n+                                        final boolean aNoWorking) {\n+\n+        registerCover(aMaterial, aStack);\n+\n+        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n+\n+        if (!aNoWorking)\n+\n+            RA.addCNCRecipe(\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    GT_OreDictUnificator.get(OrePrefixes.gearGt, aMaterial, 1L),\n+                    (int) Math.max(aMaterialMass * 2L, 1L),\n+                    30);\n+\n+        if (!aNoSmashing) {\n+\n+            if (GregTech_API.sRecipeFile.get(\n+                    gregtech.api.enums.ConfigCategories.Tools.hammerquadrupleplate,\n+                    OrePrefixes.plate.get(aMaterial).toString(), true)) {\n+\n+                Object aPlateStack = OrePrefixes.plate.get(aMaterial);\n+\n+                GT_ModHandler.addCraftingRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        DO_NOT_CHECK_FOR_COLLISIONS | BUFFERED,\n+                        new Object[]{\n+                                \"I\",\n+                                \"B\",\n+                                \"h\", // craftingToolHardHammer\n+                                'I', OrePrefixes.plateTriple.get(aMaterial),\n+                                'B', aPlateStack});\n+\n+                GT_ModHandler.addShapelessCraftingRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        DO_NOT_CHECK_FOR_COLLISIONS | BUFFERED,\n+                        new Object[]{gregtech.api.enums.ToolDictNames.craftingToolForgeHammer,\n+                                aPlateStack, aPlateStack, aPlateStack, aPlateStack});\n+\n+            }\n+\n+            RA.addBenderRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 4L),\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    (int) Math.max(aMaterialMass * 4L, 1L),\n+                    96);\n+\n+        } else {\n+\n+            RA.addAssemblerRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 4L),\n+                    gregtech.api.enums.ItemList.Circuit_Integrated.getWithDamage(0L, 4L),\n+                    Materials.Glue.getFluid(30L), GT_Utility.copyAmount(1L, aStack),\n+                    128, 8);\n+\n+        }\n+    }\n+\n+    private void registerPlateQuintuple(final Materials aMaterial,\n+                                        final ItemStack aStack,\n+                                        final boolean aNoSmashing,\n+                                        final long aMaterialMass) {\n+\n+        registerCover(aMaterial, aStack);\n+\n+        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n+\n+        if (!aNoSmashing) {\n+\n+            if (GregTech_API.sRecipeFile.get(\n+                    gregtech.api.enums.ConfigCategories.Tools.hammerquintupleplate,\n+                    OrePrefixes.plate.get(aMaterial).toString(), true)) {\n+\n+                Object aPlateStack = OrePrefixes.plate.get(aMaterial);\n+\n+                GT_ModHandler.addCraftingRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        DO_NOT_CHECK_FOR_COLLISIONS | BUFFERED,\n+                        new Object[]{\n+                                \"I\",\n+                                \"B\",\n+                                \"h\", // craftingToolHardHammer\n+                                'I', OrePrefixes.plateQuadruple.get(aMaterial),\n+                                'B', aPlateStack});\n+\n+                GT_ModHandler.addShapelessCraftingRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        DO_NOT_CHECK_FOR_COLLISIONS | BUFFERED,\n+                        new Object[]{\n+                                ToolDictNames.craftingToolForgeHammer,\n+                                aPlateStack, aPlateStack, aPlateStack, aPlateStack, aPlateStack});\n+\n+            }\n+\n+            RA.addBenderRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 5L),\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    (int) Math.max(aMaterialMass * 5L, 1L),\n+                    96);\n+\n+        } else {\n+\n+            RA.addAssemblerRecipe(\n+                    gregtech.api.util.GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 5L),\n+                    ItemList.Circuit_Integrated.getWithDamage(0L, 5L),\n+                    Materials.Glue.getFluid(40L),\n+                    GT_Utility.copyAmount(1L, aStack),\n+                    160, 8);\n+\n+        }\n+    }\n+\n+    private void registerPlateDense(final Materials aMaterial,\n+                                    final ItemStack aStack,\n+                                    final boolean aNoSmashing,\n+                                    final long aMaterialMass) {\n+\n+        registerCover(aMaterial, aStack);\n+\n+        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n+\n+        if (!aNoSmashing) {\n+\n+            RA.addBenderRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 9L),\n+                    GT_Utility.copyAmount(1L, aStack), (int) Math.max(aMaterialMass * 9L, 1L),\n+                    96);\n+\n+        }\n+\n+    }\n+\n+    private void registerItemCasing(final OrePrefixes aPrefix,\n+                                    final Materials aMaterial,\n+                                    final ItemStack aStack,\n+                                    final boolean aNoSmashing) {\n+\n+        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n+\n+        if (aMaterial.mStandardMoltenFluid != null) {\n+\n+            RA.addFluidSolidifierRecipe(\n+                    ItemList.Shape_Mold_Casing.get(0L),\n+                    aMaterial.getMolten(L / 2),\n+                    GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 1L),\n+                    16, 8);\n+\n+        }\n+\n+        if (aMaterial.mUnificatable &&\n+                aMaterial.mMaterialInto == aMaterial &&\n+                !aNoSmashing &&\n+                GregTech_API.sRecipeFile.get(ConfigCategories.Tools.hammerplating, aMaterial.toString(), true)) {\n+\n+            GT_ModHandler.addCraftingRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 1L),\n+                    tBits, // DO_NOT_CHECK_FOR_COLLISIONS|BUFFERED|ONLY_ADD_IF_RESULT_IS_NOT_NULL|NOT_REMOVABLE\n+                    new Object[]{\n+                            \"h X\",\n+                            'X', OrePrefixes.plate.get(aMaterial)});\n+\n+            // Only added if IC2 Forge Hammer is enabled in Recipes.cfg: B:ic2forgehammer_true=false\n+            GT_ModHandler.addCraftingRecipe(\n+                    GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 1L),\n+                    tBits, // DO_NOT_CHECK_FOR_COLLISIONS|BUFFERED|ONLY_ADD_IF_RESULT_IS_NOT_NULL|NOT_REMOVABLE\n+                    new Object[]{\n+                            \"H X\",\n+                            'H', ToolDictNames.craftingToolForgeHammer,\n+                            'X', OrePrefixes.plate.get(aMaterial)});\n+\n+        }\n+\n+        RA.addAlloySmelterRecipe(\n+                GT_OreDictUnificator.get(OrePrefixes.ingot, aMaterial, 2L),\n+                ItemList.Shape_Mold_Casing.get(0L), GT_Utility.copyAmount(3L, aStack), 128, 15);\n+\n+        RA.addCutterRecipe(\n+                GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 1L),\n+                GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 2L),\n+                NI,\n+                (int) Math.max(aMaterial.getMass(), 1L),\n+                16);\n+\n+        RA.addExtruderRecipe(\n+                GT_OreDictUnificator.get(OrePrefixes.ingot, aMaterial, 1L),\n+                ItemList.Shape_Extruder_Casing.get(0L),\n+                GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 2L),\n+                (int) Math.max(aMaterial.getMass(), 1L),\n+                45);\n+\n+        GT_RecipeRegistrator.registerReverseFluidSmelting(aStack, aMaterial, aPrefix.mMaterialAmount, null);\n+\n+    }\n+\n+    private void registerPlateAlloy(final String aOreDictName,\n+                                    final ItemStack aStack) {\n+\n+        switch (aOreDictName) {\n+\n+            case \"plateAlloyCarbon\":\n+\n+                RA.addAssemblerRecipe(\n+                        GT_ModHandler.getIC2Item(\"generator\", 1L),\n+                        GT_Utility.copyAmount(4L, aStack),\n+                        GT_ModHandler.getIC2Item(\"windMill\", 1L),\n+                        6400, 8);\n+\n+                break;\n+\n+            case \"plateAlloyAdvanced\":\n+\n+                GT_ModHandler.addAlloySmelterRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        new ItemStack(Blocks.glass, 3, W),\n+                        GT_ModHandler.getIC2Item(\"reinforcedGlass\", 4L),\n+                        400, 4, false);\n+\n+                GT_ModHandler.addAlloySmelterRecipe(\n+                        GT_Utility.copyAmount(1L, aStack),\n+                        Materials.Glass.getDust(3),\n+                        GT_ModHandler.getIC2Item(\"reinforcedGlass\", 4L),\n+                        400, 4, false);\n+\n+                break;\n+\n+            case \"plateAlloyIridium\":\n+\n+                // Remove IC2 Shaped recipe for Iridium Reinforced Plate\n                 GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                if (aMaterial.mStandardMoltenFluid != null) {\n-                    GT_Values.RA.addFluidSolidifierRecipe(ItemList.Shape_Mold_Casing.get(0L), aMaterial.getMolten(72L), GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 1L), 16, 8);\n-                }\n-                if ((aMaterial.mUnificatable) && (aMaterial.mMaterialInto == aMaterial)) {\n-                    if (!aNoSmashing && GregTech_API.sRecipeFile.get(ConfigCategories.Tools.hammerplating, aMaterial.toString(), true)) {\n-                        GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 1L), GT_Proxy.tBits, new Object[]{\"h X\", 'X', OrePrefixes.plate.get(aMaterial)});\n-                        GT_ModHandler.addCraftingRecipe(GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 1L), GT_Proxy.tBits, new Object[]{\"H X\", 'H', ToolDictNames.craftingToolForgeHammer, 'X', OrePrefixes.plate.get(aMaterial)});\n-                    }\n-                }\n-                GT_Values.RA.addAlloySmelterRecipe(GT_OreDictUnificator.get(OrePrefixes.ingot, aMaterial, 2L), ItemList.Shape_Mold_Casing.get(0L), GT_Utility.copyAmount(3L, aStack), 128, 15);\n-                GT_Values.RA.addCutterRecipe(GT_OreDictUnificator.get(OrePrefixes.plate, aMaterial, 1L), GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 2L), null, (int) Math.max(aMaterial.getMass(), 1L), 16);\n-                GT_Values.RA.addExtruderRecipe(GT_OreDictUnificator.get(OrePrefixes.ingot, aMaterial, 1L), ItemList.Shape_Extruder_Casing.get(0L), GT_OreDictUnificator.get(OrePrefixes.itemCasing, aMaterial, 2L), (int) Math.max(aMaterial.getMass(), 1L), 45);\n-                GT_RecipeRegistrator.registerReverseFluidSmelting(aStack, aMaterial, aPrefix.mMaterialAmount, null);\n+\n                 break;\n \n-            case plateAlloy:\n-                switch (aOreDictName) {\n-                    case \"plateAlloyCarbon\":\n-                        GT_Values.RA.addAssemblerRecipe(GT_ModHandler.getIC2Item(\"generator\", 1L), GT_Utility.copyAmount(4L, aStack), GT_ModHandler.getIC2Item(\"windMill\", 1L), 6400, 8);\n-                    case \"plateAlloyAdvanced\":\n-                        GT_ModHandler.addAlloySmelterRecipe(GT_Utility.copyAmount(1L, aStack), new ItemStack(Blocks.glass, 3, 32767), GT_ModHandler.getIC2Item(\"reinforcedGlass\", 4L), 400, 4, false);\n-                        GT_ModHandler.addAlloySmelterRecipe(GT_Utility.copyAmount(1L, aStack), GT_OreDictUnificator.get(OrePrefixes.dust, Materials.Glass, 3L), GT_ModHandler.getIC2Item(\"reinforcedGlass\", 4L), 400, 4, false);\n-                    case \"plateAlloyIridium\":\n-                        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                    case \"plateIron\": case \"plateCopper\": case \"plateTin\": case \"plateBronze\": case \"plateGold\": case \"plateSteel \": case \"plateLead\": case \"plateAluminium\": case \"plateStainlessSteel\": case \"plateTitanium\": case \"plateTungsten\": case \"plateTungstenSteel\": case \"plateIridium\": case \"plateChrome\": case \"plateOsmium\": case \"plateNeutronium\":\n-                        GT_ModHandler.removeRecipeByOutputDelayed(aStack);\n-                }\n+            default:\n                 break;\n-\t\tdefault:\n-\t\t\tbreak;\n+\n         }\n+\n     }\n+\n+    private void registerCover(final Materials aMaterial, final ItemStack aStack) {\n+\n+        // Get ItemStack of Block matching Materials\n+        final ItemStack tStack = aMaterial.getBlocks(1);\n+\n+        // Register the cover\n+        GregTech_API.registerCover(\n+                aStack,\n+                // If there is an ItemStack of Block for Materials\n+                tStack != NI ?\n+                        // Copy Block texture\n+                        new GT_CopiedBlockTexture(Block.getBlockFromItem(tStack.getItem()), 1, tStack.getItemDamage()) :\n+                        // or use Materials mRGBa dyed blocs/materialicons/MATERIALSET/block1 icons\n+                        new GT_StdRenderedTexture(\n+                                aMaterial.mIconSet.mTextures[TextureSet.INDEX_block1], aMaterial.mRGBa, false),\n+                null);\n+\n+    }\n+\n }"
  }
]
