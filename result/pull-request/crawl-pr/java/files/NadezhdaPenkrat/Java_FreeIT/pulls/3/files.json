[
  {
    "sha": "922509b8bd93d6812280e2f2f9eead1b66735c78",
    "filename": "lesson_3/src/com/freeit/methodicaltasks/Task18RegExFoundCount.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/blob/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task18RegExFoundCount.java",
    "raw_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/raw/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task18RegExFoundCount.java",
    "contents_url": "https://api.github.com/repos/NadezhdaPenkrat/Java_FreeIT/contents/lesson_3/src/com/freeit/methodicaltasks/Task18RegExFoundCount.java?ref=557cf2c5d55879e53961c70d4d27f82b222d6ce0",
    "patch": "@@ -0,0 +1,25 @@\n+package com.freeit.methodicaltasks;\n+\n+import java.util.Scanner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/*\n+Найти в строке не только запятые,\n+но и другие знаки препинания.\n+Подсчитать общее их количество.\n+*/\n+public class Task18RegExFoundCount {\n+    public static void main(String[] args) {\n+        Pattern pattern = Pattern.compile(\"[!.,;:?\\\\-]\");\n+        System.out.println(\"please. write your text: \");\n+        Scanner scanner = new Scanner(System.in);\n+        Matcher matcher = pattern.matcher(scanner.nextLine());\n+        int count = 0;\n+        while (matcher.find()) {\n+            count++;\n+        }\n+\n+        System.out.println(count);\n+    }\n+}"
  },
  {
    "sha": "5e79ea7d49090f05fd4094a722bb8b292d32322d",
    "filename": "lesson_3/src/com/freeit/methodicaltasks/Task19CountWords.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/blob/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task19CountWords.java",
    "raw_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/raw/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task19CountWords.java",
    "contents_url": "https://api.github.com/repos/NadezhdaPenkrat/Java_FreeIT/contents/lesson_3/src/com/freeit/methodicaltasks/Task19CountWords.java?ref=557cf2c5d55879e53961c70d4d27f82b222d6ce0",
    "patch": "@@ -0,0 +1,31 @@\n+package com.freeit.methodicaltasks;\n+\n+import java.util.Scanner;\n+\n+/*\n+Имеется строка с текстом.\n+Подсчитать количество слов в тексте.\n+Желательно учесть, что слова могут\n+разделяться несколькими пробелами,\n+в начале и конце текста\n+также могут быть пробелы,\n+но могут и отсутствовать.\n+*/\n+public class Task19CountWords {\n+    public static int countWords(String str) {\n+        int count = 0;\n+        for (int i = 0; i < str.length() - 1; i++) {\n+            if (str.charAt(i) == ' ' && str.charAt(i + 1) != ' ') {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+\n+    public static void main(String[] args) {\n+        Scanner in = new Scanner(System.in);\n+        System.out.print(\"Enter a sentence: \");\n+        String sentence = in.nextLine();\n+        System.out.print(\"Your sentence has \" + countWords(sentence) + \" words.\");\n+    }\n+}"
  },
  {
    "sha": "d7c101cc8745fc9c5261180933a2f486db6edcc7",
    "filename": "lesson_3/src/com/freeit/methodicaltasks/Task20LastCharString.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/blob/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task20LastCharString.java",
    "raw_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/raw/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task20LastCharString.java",
    "contents_url": "https://api.github.com/repos/NadezhdaPenkrat/Java_FreeIT/contents/lesson_3/src/com/freeit/methodicaltasks/Task20LastCharString.java?ref=557cf2c5d55879e53961c70d4d27f82b222d6ce0",
    "patch": "@@ -0,0 +1,26 @@\n+package com.freeit.methodicaltasks;\n+\n+import java.util.Scanner;\n+\n+/*\n+Имеется строка с текстом.\n+Вывести текст,\n+составленный из последних букв всех слов.\n+*/\n+public class Task20LastCharString {\n+    public static void main(String[] args) {\n+        Scanner scanner = new Scanner(System.in);\n+        System.out.print(\"Enter a sentence: \");\n+        String str = scanner.nextLine();\n+\n+        StringBuilder res = new StringBuilder();\n+\n+        String[] words = str.split(\"\\\\s+\");\n+        for (String word : words)\n+            res.append(word.toCharArray()[word.length() - 1]);\n+\n+        System.out.println(\"String: \" + str);\n+        System.out.println(\"Result: \" + res.toString());\n+    }\n+\n+}"
  },
  {
    "sha": "194b14bdb5b4c5ae016f810704e2b57e9d0bc5f3",
    "filename": "lesson_3/src/com/freeit/methodicaltasks/Task21BuilderBufferString.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/blob/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task21BuilderBufferString.java",
    "raw_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/raw/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task21BuilderBufferString.java",
    "contents_url": "https://api.github.com/repos/NadezhdaPenkrat/Java_FreeIT/contents/lesson_3/src/com/freeit/methodicaltasks/Task21BuilderBufferString.java?ref=557cf2c5d55879e53961c70d4d27f82b222d6ce0",
    "patch": "@@ -0,0 +1,44 @@\n+package com.freeit.methodicaltasks;\n+\n+/*\n+Напишите три цикла выполняющих\n+многократное сложение строк,\n+один с помощью оператора сложения и String,\n+другой с помощью StringBuilder\n+и метода append,\n+а также аналогино для StringBuffer.\n+Сравните скорость их выполнения.\n+*/\n+public class Task21BuilderBufferString {\n+    public static void main(String[] args) {\n+\n+        String string = new String();\n+        long beginLaunchTimeString = System.currentTimeMillis();\n+        for (int i = 0; i < 10000; i++) {\n+            string += i;\n+        }\n+        long completeLaunchTimeString = System.currentTimeMillis();\n+        long goneTimeString = completeLaunchTimeString - beginLaunchTimeString;\n+        System.out.println(\"gone Time String: \" + (goneTimeString) + \"ms\");\n+\n+\n+        StringBuilder stringBuilder = new StringBuilder();\n+        long beginLaunchTimeStringBuilder = System.currentTimeMillis();\n+        for (int i = 0; i < 10000; i++) {\n+            stringBuilder.append(i);\n+        }\n+        long completeLaunchTimeStringBuilder = System.currentTimeMillis();\n+        long goneTimeStringBuilder = completeLaunchTimeStringBuilder - beginLaunchTimeStringBuilder;\n+        System.out.println(\"gone Time String Builder: \" + (goneTimeStringBuilder) + \"ms\");\n+\n+\n+        StringBuffer stringBuffer = new StringBuffer();\n+        long beginLaunchStringBuffer = System.currentTimeMillis();\n+        for (int i = 0; i < 10000; i++) {\n+            stringBuffer.append(i);\n+        }\n+        long completeLaunchTimeStringBuffer = System.currentTimeMillis();\n+        long goneTimeStringBuffer = completeLaunchTimeStringBuffer - beginLaunchStringBuffer;\n+        System.out.println(\"gone Time String Buffer: \" + (goneTimeStringBuffer) + \"ms\");\n+    }\n+}"
  },
  {
    "sha": "b37468fe92f8e211714c062ac140d115eb010b82",
    "filename": "lesson_3/src/com/freeit/methodicaltasks/Task22RegularExpressions.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/blob/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task22RegularExpressions.java",
    "raw_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/raw/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task22RegularExpressions.java",
    "contents_url": "https://api.github.com/repos/NadezhdaPenkrat/Java_FreeIT/contents/lesson_3/src/com/freeit/methodicaltasks/Task22RegularExpressions.java?ref=557cf2c5d55879e53961c70d4d27f82b222d6ce0",
    "patch": "@@ -0,0 +1,22 @@\n+package com.freeit.methodicaltasks;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+/*\n+ Написать программу,\n+ выполняющую поиск в строке шестнадцатеричных чисел,\n+ записаных по правилам Java,\n+с помощью регулярных выражений и\n+вывести их на страницу.\n+*/\n+public class Task22RegularExpressions {\n+    public static void main(String[] args) {\n+\n+        String text = \"  write your text <p id=p1>\";\n+        System.out.println(text.replaceAll(\"<p id=p1>\", \"<p>\"));\n+        Pattern pattern=Pattern.compile(\"0x[A-Fa-f0-9]{1,4}\");\n+        Matcher matcher = pattern.matcher(text);\n+        while(matcher.find()){\n+            System.out.println(matcher.start()+\" \"+matcher.end());\n+        }\n+    }\n+}"
  },
  {
    "sha": "c91b6b7db4635972e277ee1f95eb6766eb3128ca",
    "filename": "lesson_3/src/com/freeit/methodicaltasks/Task23TagsChange.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/blob/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task23TagsChange.java",
    "raw_url": "https://github.com/NadezhdaPenkrat/Java_FreeIT/raw/557cf2c5d55879e53961c70d4d27f82b222d6ce0/lesson_3/src/com/freeit/methodicaltasks/Task23TagsChange.java",
    "contents_url": "https://api.github.com/repos/NadezhdaPenkrat/Java_FreeIT/contents/lesson_3/src/com/freeit/methodicaltasks/Task23TagsChange.java?ref=557cf2c5d55879e53961c70d4d27f82b222d6ce0",
    "patch": "@@ -0,0 +1,22 @@\n+package com.freeit.methodicaltasks;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/*\n+Написать программу,\n+выполняющую поиск в строке всех тегов абзацев,\n+в т.ч. тех, у которых есть параметры,\n+например <p id=”p1”>, и замену их\n+на простые теги абзацев <p>.\n+*/\n+public class Task23TagsChange {\n+    public static void main(String[] args) {\n+\n+        String text = \"</div> если ты всё ещё думаешь об этом </div>\\n\" +\n+                \"</p> то это стоит того  </p id=”p251”>\\n\" +\n+                \"<div> чтобы сделать <p>.\";\n+        System.out.println(text.replaceAll(\"</?p( id=”p[1-9]+”)?>|</?div>\", \"<p>\"));\n+\n+    }\n+}"
  }
]
