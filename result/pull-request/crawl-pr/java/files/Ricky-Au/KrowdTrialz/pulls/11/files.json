[
  {
    "sha": "598869eb578d58ab8c369666e67e308019e53873",
    "filename": "app/src/main/java/com/T05/krowdtrialz/ui/ExperimentDetailsNonOwnerActivity.java",
    "status": "modified",
    "additions": 424,
    "deletions": 424,
    "changes": 848,
    "blob_url": "https://github.com/Ricky-Au/KrowdTrialz/blob/f572984cde6c67aec1df6cdba26465be97a3e057/app/src/main/java/com/T05/krowdtrialz/ui/ExperimentDetailsNonOwnerActivity.java",
    "raw_url": "https://github.com/Ricky-Au/KrowdTrialz/raw/f572984cde6c67aec1df6cdba26465be97a3e057/app/src/main/java/com/T05/krowdtrialz/ui/ExperimentDetailsNonOwnerActivity.java",
    "contents_url": "https://api.github.com/repos/Ricky-Au/KrowdTrialz/contents/app/src/main/java/com/T05/krowdtrialz/ui/ExperimentDetailsNonOwnerActivity.java?ref=f572984cde6c67aec1df6cdba26465be97a3e057",
    "patch": "@@ -75,32 +75,32 @@ protected void onCreate(Bundle savedInstanceState) {\n         // TODO: Use this to get experiment object\n         String experimentID = intent.getStringExtra(MainActivity.EXTRA_EXPERIMENT_ID);\n \n-        addTrialButton = findViewById(R.id.add_trials_non_owner_screen_button);\n-\n-        addTrialButton.setOnClickListener(new View.OnClickListener() {\n-            @Override\n-            public void onClick(View v) {\n-                Log.d(TAG, \"Add Trials selected.\");\n-                addTrial();\n-            }\n-        });\n-\n-        db.getExperimentByID(experimentID, new Database.GetExperimentCallback() {\n-            @Override\n-            public void onSuccess(Experiment exp) {\n-                experiment = exp;\n-                populateMainInfo();\n-                populateTrialResults();\n-\n-                populateHistogram();\n-                populateTimePlot();\n-            }\n-\n-            @Override\n-            public void onFailure() {\n-                Log.e(TAG, \"Error Searching Database for experiment\");\n-            }\n-        });\n+//        addTrialButton = findViewById(R.id.add_trials_non_owner_screen_button);\n+//\n+//        addTrialButton.setOnClickListener(new View.OnClickListener() {\n+//            @Override\n+//            public void onClick(View v) {\n+//                Log.d(TAG, \"Add Trials selected.\");\n+//                addTrial();\n+//            }\n+//        });\n+\n+//        db.getExperimentByID(experimentID, new Database.GetExperimentCallback() {\n+//            @Override\n+//            public void onSuccess(Experiment exp) {\n+//                experiment = exp;\n+////                populateMainInfo();\n+////                populateTrialResults();\n+//\n+////                populateHistogram();\n+////                populateTimePlot();\n+//            }\n+//\n+//            @Override\n+//            public void onFailure() {\n+//                Log.e(TAG, \"Error Searching Database for experiment\");\n+//            }\n+//        });\n     }\n \n     /**\n@@ -221,402 +221,402 @@ void addTrial(){\n     }\n \n \n-    /**\n-     * This method creates a Histogram based on experiment\n-     * @author\n-     *  Furmaan Sekhon and Jacques Leong-Sit\n-     */\n-    private void populateHistogram (){\n-\n-        barChart = findViewById(R.id.histogram_non_owner);\n-\n-        // Get experiment object\n-        Bundle extras = getIntent().getExtras();\n-        experiment = (Experiment) extras.get(\"experiment\");\n-\n-        // Get array of data from experiment\n-        List<BarEntry> entries = new ArrayList<BarEntry>();\n-        if (this.experiment.getType() == \"Binomial\") { // Binomial format: {successCount, failureCount}\n-            // make list of data\n-            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n-            BinomialExperiment binomialExperiment = (BinomialExperiment) extras.get(\"experiment\");\n-            dataPoints.add(binomialExperiment.getSuccessCount());\n-            dataPoints.add(binomialExperiment.getFailureCount());\n-\n-            // make list of entries\n-            for (int i = 0; i < dataPoints.size(); i++) {\n-                // turn your data into Entry objects\n-                entries.add(new BarEntry(i, dataPoints.get(i)));\n-            }\n-        }else if (this.experiment.getType() == \"Count\"){ // Count format: {Count}\n-            // make list of data\n-            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n-            dataPoints.add(this.experiment.getTrials().size());\n-\n-            // make list of entries\n-            for (int i = 0; i < dataPoints.size(); i++) {\n-                // turn your data into Entry objects\n-                entries.add(new BarEntry(i, dataPoints.get(i)));\n-            }\n-        }\n-        else if (this.experiment.getType() == \"Integer\"){ // Integer format: list of data points\n-            // make list of data\n-            IntegerExperiment integerExperiment = (IntegerExperiment) extras.get(\"experiment\");\n-            double[] temp = integerExperiment.getTrials().stream()\n-                    .mapToDouble(trial -> ((IntegerTrial) trial).getValue())\n-                    .toArray();\n-\n-            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n-            for(int i=0; i<temp.length; i++) {\n-                dataPoints.add((int) temp[i]);\n-            }\n-\n-            // make dictionary that stores the frequency of each unique data point\n-            Hashtable<Integer, Integer> uniqueDataPoints = new Hashtable<Integer, Integer>();\n-            for (int i = 0; i < dataPoints.size(); i++) {\n-                // Count the number of occurrences of each data point\n-                if (uniqueDataPoints.containsKey(dataPoints.get(i))) {\n-                    uniqueDataPoints.put(dataPoints.get(i), uniqueDataPoints.get(dataPoints.get(i)) + 1);\n-                }else{\n-                    uniqueDataPoints.put(dataPoints.get(i), 1);\n-                }\n-            }\n-\n-            // make list of entries\n-            for (int i : uniqueDataPoints.keySet()) {\n-                // turn your data into Entry objects\n-                entries.add(new BarEntry(i ,uniqueDataPoints.get(i)));\n-            }\n-\n-        }else if (this.experiment.getType() == \"Measurement\") {\n-            // make list of data\n-            MeasurementExperiment measurementExperiment = (MeasurementExperiment) extras.get(\"experiment\");\n-\n-            double[] temp = measurementExperiment.getTrials().stream()\n-                    .mapToDouble(trial -> ((MeasurementTrial) trial).getMeasurementValue())\n-                    .toArray();\n-\n-            ArrayList<Double> dataPoints = new ArrayList<Double>();\n-            for(int i=0; i<temp.length; i++) {\n-                dataPoints.add(temp[i]);\n-            }\n-\n-            // make dictionary that stores the frequency of each unique data point\n-            Hashtable<Double, Integer> uniqueDataPoints = new Hashtable<Double, Integer>();\n-            for (int i = 0; i < dataPoints.size(); i++) {\n-                // Count the number of occurrences of each data point\n-                if (uniqueDataPoints.containsKey(dataPoints.get(i))) {\n-                    uniqueDataPoints.put(dataPoints.get(i), uniqueDataPoints.get(dataPoints.get(i)) + 1);\n-                }else{\n-                    uniqueDataPoints.put(dataPoints.get(i), 1);\n-                }\n-            }\n-\n-            // make list of entries\n-            for (double i : uniqueDataPoints.keySet()) {\n-                // turn your data into Entry objects\n-                entries.add(new BarEntry((float) i, (float) uniqueDataPoints.get(i)));\n-            }\n-        }\n-\n-        // create data set\n-        BarDataSet barDataSet = new BarDataSet(entries, String.format(\"%s Trials\", experiment.getType()));\n-        BarData barData = new BarData(barDataSet);\n-\n-        // add data to chart\n-        barChart.setData(barData);\n-        barData.setBarWidth(0.9f); // set custom bar width\n-        barChart.setFitBars(true);\n-        barChart.invalidate(); // Refreshes chart\n-    }// end populateHistogram\n-\n-    /**\n-     * This method creates a TimePlot based on experiment\n-     * @author\n-     *  Furmaan Sekhon and Jacques Leong-Sit\n-     */\n-    private void populateTimePlot () {\n-        scatterChart = findViewById(R.id.time_plot_non_owner);\n-\n-        // Get experiment object\n-        Bundle extras = getIntent().getExtras();\n-        experiment = (Experiment) extras.get(\"experiment\");\n-\n-        // Get array of data from experiment\n-        if (this.experiment.getType() == \"Binomial\") { // Binomial format: {successCount, failureCount}\n-\n-            List<Entry> passEntries = new ArrayList<Entry>();\n-            List<Entry> failEntries = new ArrayList<Entry>();\n-\n-            // make list of data\n-            BinomialExperiment binomialExperiment = (BinomialExperiment) this.experiment;\n-\n-            ArrayList<Trial> temp = binomialExperiment.getTrials();\n-            ArrayList<BinomialTrial> binomialTrials = new ArrayList<BinomialTrial>();\n-            for (Trial trial : temp){\n-                binomialTrials.add((BinomialTrial) trial);\n-            }\n-\n-            Hashtable<String, Integer> datePasses = new Hashtable<String, Integer>();\n-            Hashtable<String, Integer> dateFails = new Hashtable<String, Integer>();\n-            for (BinomialTrial trial : binomialTrials){\n-                int passes = trial.getPassCount();\n-                int fails = trial.getFailCount();\n-                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n-\n-                if (datePasses.containsKey(dateOfTrial)){\n-                    datePasses.put(dateOfTrial, datePasses.get(dateOfTrial) + passes);\n-                }else{\n-                    datePasses.put(dateOfTrial,passes);\n-                }\n-                if (dateFails.containsKey(dateOfTrial)){\n-                    dateFails.put(dateOfTrial, dateFails.get(dateOfTrial) + fails);\n-                }else{\n-                    dateFails.put(dateOfTrial,fails);\n-                }\n-\n-            }\n-\n-            // make list of entries\n-            for (String key : datePasses.keySet()) {\n-                // turn your data into Entry objects\n-                passEntries.add(new Entry(decodeDate(key), datePasses.get(key)));\n-            }\n-            for (String key : dateFails.keySet()) {\n-                // turn your data into Entry objects\n-                failEntries.add(new Entry(decodeDate(key), dateFails.get(key)));\n-            }\n-\n-            ScatterDataSet passDataSet = new ScatterDataSet(passEntries, binomialExperiment.getPassUnit());\n-            ScatterDataSet failDataSet = new ScatterDataSet(failEntries, binomialExperiment.getFailUnit());\n-\n-            passDataSet.setColors(new int[] {R.color.purple_700, R.color.teal_700});\n-\n-            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n-\n-            dataSets.add(passDataSet);\n-            dataSets.add(failDataSet);\n-\n-            // create data set\n-            ScatterData scatterData = new ScatterData(dataSets);\n-\n-            ValueFormatter formatter = new ValueFormatter() {\n-                @Override\n-                public String getAxisLabel(float value, AxisBase axis) {\n-                    return formatDate(value);\n-                }\n-            };\n-            XAxis xAxis = scatterChart.getXAxis();\n-            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n-            xAxis.setValueFormatter(formatter);\n-\n-            // add data to chart\n-            scatterChart.setData(scatterData);\n-            scatterChart.invalidate(); // Refreshes chart\n-\n-        }else if (this.experiment.getType() == \"Count\"){ // Count format: {Count}\n-            List<Entry> entries = new ArrayList<Entry>();\n-\n-            // make list of data\n-            CountExperiment countExperiment = (CountExperiment) this.experiment;\n-\n-            ArrayList<Trial> temp = countExperiment.getTrials();\n-            ArrayList<CountTrial> countTrials = new ArrayList<CountTrial>();\n-            for (Trial trial : temp){\n-                countTrials.add((CountTrial) trial);\n-            }\n-\n-            Hashtable<String, Integer> dateCounts = new Hashtable<String, Integer>();\n-            for (CountTrial trial : countTrials){\n-                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n-\n-                if (dateCounts.containsKey(dateOfTrial)){\n-                    dateCounts.put(dateOfTrial, dateCounts.get(dateOfTrial) + 1);\n-                }else{\n-                    dateCounts.put(dateOfTrial, 1);\n-                }\n-            }\n-\n-            // make list of entries\n-            for (String key : dateCounts.keySet()) {\n-                // turn your data into Entry objects\n-                entries.add(new Entry(decodeDate(key), dateCounts.get(key)));\n-            }\n-\n-            ScatterDataSet countDataSet = new ScatterDataSet(entries, countExperiment.getUnit());\n-\n-            countDataSet.setColors(new int[] {R.color.purple_700});\n-\n-            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n-\n-            dataSets.add(countDataSet);\n-\n-\n-            // create data set\n-            ScatterData scatterData = new ScatterData(dataSets);\n-\n-            ValueFormatter formatter = new ValueFormatter() {\n-                @Override\n-                public String getAxisLabel(float value, AxisBase axis) {\n-                    return formatDate(value);\n-                }\n-            };\n-            XAxis xAxis = scatterChart.getXAxis();\n-            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n-            xAxis.setValueFormatter(formatter);\n-\n-            // add data to chart\n-            scatterChart.setData(scatterData);\n-            scatterChart.invalidate(); // Refreshes chart\n-        } else if (this.experiment.getType() == \"Integer\"){ // Integer format: list of data points\n-            List<Entry> entries = new ArrayList<Entry>();\n-\n-            // make list of data\n-            IntegerExperiment integerExperiment = (IntegerExperiment) this.experiment;\n-\n-            ArrayList<Trial> temp = integerExperiment.getTrials();\n-            ArrayList<IntegerTrial> integerTrials = new ArrayList<IntegerTrial>();\n-            for (Trial trial : temp){\n-                integerTrials.add((IntegerTrial) trial);\n-            }\n-\n-            Hashtable<String, ArrayList<Integer>> dateValues = new Hashtable<String, ArrayList<Integer>>();\n-            for (IntegerTrial trial : integerTrials){\n-                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n-                ArrayList<Integer> values;\n-\n-                if (dateValues.containsKey(dateOfTrial)){\n-                    values = dateValues.get(dateOfTrial);\n-                }else{\n-                    values = new ArrayList<Integer>();\n-                }\n-                values.add(trial.getValue());\n-                dateValues.put(dateOfTrial, values);\n-            }\n-\n-            // make list of entries\n-            for (String key : dateValues.keySet()) {\n-                // turn your data into Entry objects\n-                for (int value : dateValues.get(key)){\n-                    entries.add(new Entry(decodeDate(key), value));\n-                }\n-\n-            }\n-\n-            ScatterDataSet integerDataSet = new ScatterDataSet(entries, integerExperiment.getUnit());\n-\n-            integerDataSet.setColors(new int[] {R.color.purple_700});\n-\n-            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n-\n-            dataSets.add(integerDataSet);\n-\n-\n-            // create data set\n-            ScatterData scatterData = new ScatterData(dataSets);\n-\n-            ValueFormatter formatter = new ValueFormatter() {\n-                @Override\n-                public String getAxisLabel(float value, AxisBase axis) {\n-                    return formatDate(value);\n-                }\n-            };\n-            XAxis xAxis = scatterChart.getXAxis();\n-            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n-            xAxis.setValueFormatter(formatter);\n-\n-            // add data to chart\n-            scatterChart.setData(scatterData);\n-            scatterChart.invalidate(); // Refreshes chart\n-\n-        }else if (this.experiment.getType() == \"Measurement\") {\n-            List<Entry> entries = new ArrayList<Entry>();\n-\n-            // make list of data\n-            MeasurementExperiment measurementExperiment = (MeasurementExperiment) this.experiment;\n-\n-            ArrayList<Trial> temp = measurementExperiment.getTrials();\n-            ArrayList<MeasurementTrial> measurementTrials = new ArrayList<MeasurementTrial>();\n-            for (Trial trial : temp){\n-                measurementTrials.add((MeasurementTrial) trial);\n-            }\n-\n-            Hashtable<String, ArrayList<Float>> dateValues = new Hashtable<String, ArrayList<Float>>();\n-            for (MeasurementTrial trial : measurementTrials){\n-                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n-                ArrayList<Float> values;\n-\n-                if (dateValues.containsKey(dateOfTrial)){\n-                    values = dateValues.get(dateOfTrial);\n-                }else{\n-                    values = new ArrayList<Float>();\n-                }\n-                values.add(trial.getMeasurementValue());\n-                dateValues.put(dateOfTrial, values);\n-            }\n-\n-            // make list of entries\n-            for (String key : dateValues.keySet()) {\n-                // turn your data into Entry objects\n-                for (float value : dateValues.get(key)){\n-                    entries.add(new Entry(decodeDate(key), value));\n-                }\n-\n-            }\n-\n-            ScatterDataSet measurementDataSet = new ScatterDataSet(entries, measurementExperiment.getUnit());\n-\n-            measurementDataSet.setColors(new int[] {R.color.purple_700});\n-\n-            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n-\n-            dataSets.add(measurementDataSet);\n-\n-\n-            // create data set\n-            ScatterData scatterData = new ScatterData(dataSets);\n-\n-            ValueFormatter formatter = new ValueFormatter() {\n-                @Override\n-                public String getAxisLabel(float value, AxisBase axis) {\n-                    return formatDate(value);\n-                }\n-            };\n-            XAxis xAxis = scatterChart.getXAxis();\n-            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n-            xAxis.setValueFormatter(formatter);\n-\n-            // add data to chart\n-            scatterChart.setData(scatterData);\n-            scatterChart.invalidate(); // Refreshes chart\n-        }\n-    }// end populateTimePlot\n-\n-    private String encodeDate (int year, int month,int day){\n-        String stringYear = String.valueOf(year);\n-        stringYear = stringYear.substring(2,4);\n-        String stringMonth;\n-        String stringDay;\n-        if (month < 10){\n-            stringMonth = \"0\"+String.valueOf(month);\n-        }else{\n-            stringMonth = String.valueOf(month);\n-        }\n-        if (day < 10){\n-            stringDay = \"0\"+String.valueOf(day);\n-        }else{\n-            stringDay = String.valueOf(day);\n-        }\n-\n-        return stringYear + \"/\" + stringMonth + \"/\" + stringDay;\n-\n-    }\n-    private float decodeDate (String date){\n-        return (float) Integer.parseInt(date.replaceAll(\"/\",\"\"));\n-    }\n-    private String formatDate (float date) {\n-        int dateInt = (int) date;\n-        String formattedDate = String.valueOf(dateInt);\n-        return \"20\" + formattedDate.substring(0,2) + \"/\" + formattedDate.substring(2,4) + \"/\" + formattedDate.substring(4,6);\n-    }\n+//    /**\n+//     * This method creates a Histogram based on experiment\n+//     * @author\n+//     *  Furmaan Sekhon and Jacques Leong-Sit\n+//     */\n+//    private void populateHistogram (){\n+//\n+//        barChart = findViewById(R.id.histogram_non_owner);\n+//\n+//        // Get experiment object\n+//        Bundle extras = getIntent().getExtras();\n+//        experiment = (Experiment) extras.get(\"experiment\");\n+//\n+//        // Get array of data from experiment\n+//        List<BarEntry> entries = new ArrayList<BarEntry>();\n+//        if (this.experiment.getType() == \"Binomial\") { // Binomial format: {successCount, failureCount}\n+//            // make list of data\n+//            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n+//            BinomialExperiment binomialExperiment = (BinomialExperiment) extras.get(\"experiment\");\n+//            dataPoints.add(binomialExperiment.getSuccessCount());\n+//            dataPoints.add(binomialExperiment.getFailureCount());\n+//\n+//            // make list of entries\n+//            for (int i = 0; i < dataPoints.size(); i++) {\n+//                // turn your data into Entry objects\n+//                entries.add(new BarEntry(i, dataPoints.get(i)));\n+//            }\n+//        }else if (this.experiment.getType() == \"Count\"){ // Count format: {Count}\n+//            // make list of data\n+//            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n+//            dataPoints.add(this.experiment.getTrials().size());\n+//\n+//            // make list of entries\n+//            for (int i = 0; i < dataPoints.size(); i++) {\n+//                // turn your data into Entry objects\n+//                entries.add(new BarEntry(i, dataPoints.get(i)));\n+//            }\n+//        }\n+//        else if (this.experiment.getType() == \"Integer\"){ // Integer format: list of data points\n+//            // make list of data\n+//            IntegerExperiment integerExperiment = (IntegerExperiment) extras.get(\"experiment\");\n+//            double[] temp = integerExperiment.getTrials().stream()\n+//                    .mapToDouble(trial -> ((IntegerTrial) trial).getValue())\n+//                    .toArray();\n+//\n+//            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n+//            for(int i=0; i<temp.length; i++) {\n+//                dataPoints.add((int) temp[i]);\n+//            }\n+//\n+//            // make dictionary that stores the frequency of each unique data point\n+//            Hashtable<Integer, Integer> uniqueDataPoints = new Hashtable<Integer, Integer>();\n+//            for (int i = 0; i < dataPoints.size(); i++) {\n+//                // Count the number of occurrences of each data point\n+//                if (uniqueDataPoints.containsKey(dataPoints.get(i))) {\n+//                    uniqueDataPoints.put(dataPoints.get(i), uniqueDataPoints.get(dataPoints.get(i)) + 1);\n+//                }else{\n+//                    uniqueDataPoints.put(dataPoints.get(i), 1);\n+//                }\n+//            }\n+//\n+//            // make list of entries\n+//            for (int i : uniqueDataPoints.keySet()) {\n+//                // turn your data into Entry objects\n+//                entries.add(new BarEntry(i ,uniqueDataPoints.get(i)));\n+//            }\n+//\n+//        }else if (this.experiment.getType() == \"Measurement\") {\n+//            // make list of data\n+//            MeasurementExperiment measurementExperiment = (MeasurementExperiment) extras.get(\"experiment\");\n+//\n+//            double[] temp = measurementExperiment.getTrials().stream()\n+//                    .mapToDouble(trial -> ((MeasurementTrial) trial).getMeasurementValue())\n+//                    .toArray();\n+//\n+//            ArrayList<Double> dataPoints = new ArrayList<Double>();\n+//            for(int i=0; i<temp.length; i++) {\n+//                dataPoints.add(temp[i]);\n+//            }\n+//\n+//            // make dictionary that stores the frequency of each unique data point\n+//            Hashtable<Double, Integer> uniqueDataPoints = new Hashtable<Double, Integer>();\n+//            for (int i = 0; i < dataPoints.size(); i++) {\n+//                // Count the number of occurrences of each data point\n+//                if (uniqueDataPoints.containsKey(dataPoints.get(i))) {\n+//                    uniqueDataPoints.put(dataPoints.get(i), uniqueDataPoints.get(dataPoints.get(i)) + 1);\n+//                }else{\n+//                    uniqueDataPoints.put(dataPoints.get(i), 1);\n+//                }\n+//            }\n+//\n+//            // make list of entries\n+//            for (double i : uniqueDataPoints.keySet()) {\n+//                // turn your data into Entry objects\n+//                entries.add(new BarEntry((float) i, (float) uniqueDataPoints.get(i)));\n+//            }\n+//        }\n+//\n+//        // create data set\n+//        BarDataSet barDataSet = new BarDataSet(entries, String.format(\"%s Trials\", experiment.getType()));\n+//        BarData barData = new BarData(barDataSet);\n+//\n+//        // add data to chart\n+//        barChart.setData(barData);\n+//        barData.setBarWidth(0.9f); // set custom bar width\n+//        barChart.setFitBars(true);\n+//        barChart.invalidate(); // Refreshes chart\n+//    }// end populateHistogram\n+//\n+//    /**\n+//     * This method creates a TimePlot based on experiment\n+//     * @author\n+//     *  Furmaan Sekhon and Jacques Leong-Sit\n+//     */\n+//    private void populateTimePlot () {\n+//        scatterChart = findViewById(R.id.time_plot_non_owner);\n+//\n+//        // Get experiment object\n+//        Bundle extras = getIntent().getExtras();\n+//        experiment = (Experiment) extras.get(\"experiment\");\n+//\n+//        // Get array of data from experiment\n+//        if (this.experiment.getType() == \"Binomial\") { // Binomial format: {successCount, failureCount}\n+//\n+//            List<Entry> passEntries = new ArrayList<Entry>();\n+//            List<Entry> failEntries = new ArrayList<Entry>();\n+//\n+//            // make list of data\n+//            BinomialExperiment binomialExperiment = (BinomialExperiment) this.experiment;\n+//\n+//            ArrayList<Trial> temp = binomialExperiment.getTrials();\n+//            ArrayList<BinomialTrial> binomialTrials = new ArrayList<BinomialTrial>();\n+//            for (Trial trial : temp){\n+//                binomialTrials.add((BinomialTrial) trial);\n+//            }\n+//\n+//            Hashtable<String, Integer> datePasses = new Hashtable<String, Integer>();\n+//            Hashtable<String, Integer> dateFails = new Hashtable<String, Integer>();\n+//            for (BinomialTrial trial : binomialTrials){\n+//                int passes = trial.getPassCount();\n+//                int fails = trial.getFailCount();\n+//                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n+//\n+//                if (datePasses.containsKey(dateOfTrial)){\n+//                    datePasses.put(dateOfTrial, datePasses.get(dateOfTrial) + passes);\n+//                }else{\n+//                    datePasses.put(dateOfTrial,passes);\n+//                }\n+//                if (dateFails.containsKey(dateOfTrial)){\n+//                    dateFails.put(dateOfTrial, dateFails.get(dateOfTrial) + fails);\n+//                }else{\n+//                    dateFails.put(dateOfTrial,fails);\n+//                }\n+//\n+//            }\n+//\n+//            // make list of entries\n+//            for (String key : datePasses.keySet()) {\n+//                // turn your data into Entry objects\n+//                passEntries.add(new Entry(decodeDate(key), datePasses.get(key)));\n+//            }\n+//            for (String key : dateFails.keySet()) {\n+//                // turn your data into Entry objects\n+//                failEntries.add(new Entry(decodeDate(key), dateFails.get(key)));\n+//            }\n+//\n+//            ScatterDataSet passDataSet = new ScatterDataSet(passEntries, binomialExperiment.getPassUnit());\n+//            ScatterDataSet failDataSet = new ScatterDataSet(failEntries, binomialExperiment.getFailUnit());\n+//\n+//            passDataSet.setColors(new int[] {R.color.purple_700, R.color.teal_700});\n+//\n+//            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n+//\n+//            dataSets.add(passDataSet);\n+//            dataSets.add(failDataSet);\n+//\n+//            // create data set\n+//            ScatterData scatterData = new ScatterData(dataSets);\n+//\n+//            ValueFormatter formatter = new ValueFormatter() {\n+//                @Override\n+//                public String getAxisLabel(float value, AxisBase axis) {\n+//                    return formatDate(value);\n+//                }\n+//            };\n+//            XAxis xAxis = scatterChart.getXAxis();\n+//            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n+//            xAxis.setValueFormatter(formatter);\n+//\n+//            // add data to chart\n+//            scatterChart.setData(scatterData);\n+//            scatterChart.invalidate(); // Refreshes chart\n+//\n+//        }else if (this.experiment.getType() == \"Count\"){ // Count format: {Count}\n+//            List<Entry> entries = new ArrayList<Entry>();\n+//\n+//            // make list of data\n+//            CountExperiment countExperiment = (CountExperiment) this.experiment;\n+//\n+//            ArrayList<Trial> temp = countExperiment.getTrials();\n+//            ArrayList<CountTrial> countTrials = new ArrayList<CountTrial>();\n+//            for (Trial trial : temp){\n+//                countTrials.add((CountTrial) trial);\n+//            }\n+//\n+//            Hashtable<String, Integer> dateCounts = new Hashtable<String, Integer>();\n+//            for (CountTrial trial : countTrials){\n+//                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n+//\n+//                if (dateCounts.containsKey(dateOfTrial)){\n+//                    dateCounts.put(dateOfTrial, dateCounts.get(dateOfTrial) + 1);\n+//                }else{\n+//                    dateCounts.put(dateOfTrial, 1);\n+//                }\n+//            }\n+//\n+//            // make list of entries\n+//            for (String key : dateCounts.keySet()) {\n+//                // turn your data into Entry objects\n+//                entries.add(new Entry(decodeDate(key), dateCounts.get(key)));\n+//            }\n+//\n+//            ScatterDataSet countDataSet = new ScatterDataSet(entries, countExperiment.getUnit());\n+//\n+//            countDataSet.setColors(new int[] {R.color.purple_700});\n+//\n+//            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n+//\n+//            dataSets.add(countDataSet);\n+//\n+//\n+//            // create data set\n+//            ScatterData scatterData = new ScatterData(dataSets);\n+//\n+//            ValueFormatter formatter = new ValueFormatter() {\n+//                @Override\n+//                public String getAxisLabel(float value, AxisBase axis) {\n+//                    return formatDate(value);\n+//                }\n+//            };\n+//            XAxis xAxis = scatterChart.getXAxis();\n+//            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n+//            xAxis.setValueFormatter(formatter);\n+//\n+//            // add data to chart\n+//            scatterChart.setData(scatterData);\n+//            scatterChart.invalidate(); // Refreshes chart\n+//        } else if (this.experiment.getType() == \"Integer\"){ // Integer format: list of data points\n+//            List<Entry> entries = new ArrayList<Entry>();\n+//\n+//            // make list of data\n+//            IntegerExperiment integerExperiment = (IntegerExperiment) this.experiment;\n+//\n+//            ArrayList<Trial> temp = integerExperiment.getTrials();\n+//            ArrayList<IntegerTrial> integerTrials = new ArrayList<IntegerTrial>();\n+//            for (Trial trial : temp){\n+//                integerTrials.add((IntegerTrial) trial);\n+//            }\n+//\n+//            Hashtable<String, ArrayList<Integer>> dateValues = new Hashtable<String, ArrayList<Integer>>();\n+//            for (IntegerTrial trial : integerTrials){\n+//                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n+//                ArrayList<Integer> values;\n+//\n+//                if (dateValues.containsKey(dateOfTrial)){\n+//                    values = dateValues.get(dateOfTrial);\n+//                }else{\n+//                    values = new ArrayList<Integer>();\n+//                }\n+//                values.add(trial.getValue());\n+//                dateValues.put(dateOfTrial, values);\n+//            }\n+//\n+//            // make list of entries\n+//            for (String key : dateValues.keySet()) {\n+//                // turn your data into Entry objects\n+//                for (int value : dateValues.get(key)){\n+//                    entries.add(new Entry(decodeDate(key), value));\n+//                }\n+//\n+//            }\n+//\n+//            ScatterDataSet integerDataSet = new ScatterDataSet(entries, integerExperiment.getUnit());\n+//\n+//            integerDataSet.setColors(new int[] {R.color.purple_700});\n+//\n+//            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n+//\n+//            dataSets.add(integerDataSet);\n+//\n+//\n+//            // create data set\n+//            ScatterData scatterData = new ScatterData(dataSets);\n+//\n+//            ValueFormatter formatter = new ValueFormatter() {\n+//                @Override\n+//                public String getAxisLabel(float value, AxisBase axis) {\n+//                    return formatDate(value);\n+//                }\n+//            };\n+//            XAxis xAxis = scatterChart.getXAxis();\n+//            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n+//            xAxis.setValueFormatter(formatter);\n+//\n+//            // add data to chart\n+//            scatterChart.setData(scatterData);\n+//            scatterChart.invalidate(); // Refreshes chart\n+//\n+//        }else if (this.experiment.getType() == \"Measurement\") {\n+//            List<Entry> entries = new ArrayList<Entry>();\n+//\n+//            // make list of data\n+//            MeasurementExperiment measurementExperiment = (MeasurementExperiment) this.experiment;\n+//\n+//            ArrayList<Trial> temp = measurementExperiment.getTrials();\n+//            ArrayList<MeasurementTrial> measurementTrials = new ArrayList<MeasurementTrial>();\n+//            for (Trial trial : temp){\n+//                measurementTrials.add((MeasurementTrial) trial);\n+//            }\n+//\n+//            Hashtable<String, ArrayList<Float>> dateValues = new Hashtable<String, ArrayList<Float>>();\n+//            for (MeasurementTrial trial : measurementTrials){\n+//                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n+//                ArrayList<Float> values;\n+//\n+//                if (dateValues.containsKey(dateOfTrial)){\n+//                    values = dateValues.get(dateOfTrial);\n+//                }else{\n+//                    values = new ArrayList<Float>();\n+//                }\n+//                values.add(trial.getMeasurementValue());\n+//                dateValues.put(dateOfTrial, values);\n+//            }\n+//\n+//            // make list of entries\n+//            for (String key : dateValues.keySet()) {\n+//                // turn your data into Entry objects\n+//                for (float value : dateValues.get(key)){\n+//                    entries.add(new Entry(decodeDate(key), value));\n+//                }\n+//\n+//            }\n+//\n+//            ScatterDataSet measurementDataSet = new ScatterDataSet(entries, measurementExperiment.getUnit());\n+//\n+//            measurementDataSet.setColors(new int[] {R.color.purple_700});\n+//\n+//            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n+//\n+//            dataSets.add(measurementDataSet);\n+//\n+//\n+//            // create data set\n+//            ScatterData scatterData = new ScatterData(dataSets);\n+//\n+//            ValueFormatter formatter = new ValueFormatter() {\n+//                @Override\n+//                public String getAxisLabel(float value, AxisBase axis) {\n+//                    return formatDate(value);\n+//                }\n+//            };\n+//            XAxis xAxis = scatterChart.getXAxis();\n+//            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n+//            xAxis.setValueFormatter(formatter);\n+//\n+//            // add data to chart\n+//            scatterChart.setData(scatterData);\n+//            scatterChart.invalidate(); // Refreshes chart\n+//        }\n+//    }// end populateTimePlot\n+//\n+//    private String encodeDate (int year, int month,int day){\n+//        String stringYear = String.valueOf(year);\n+//        stringYear = stringYear.substring(2,4);\n+//        String stringMonth;\n+//        String stringDay;\n+//        if (month < 10){\n+//            stringMonth = \"0\"+String.valueOf(month);\n+//        }else{\n+//            stringMonth = String.valueOf(month);\n+//        }\n+//        if (day < 10){\n+//            stringDay = \"0\"+String.valueOf(day);\n+//        }else{\n+//            stringDay = String.valueOf(day);\n+//        }\n+//\n+//        return stringYear + \"/\" + stringMonth + \"/\" + stringDay;\n+//\n+//    }\n+//    private float decodeDate (String date){\n+//        return (float) Integer.parseInt(date.replaceAll(\"/\",\"\"));\n+//    }\n+//    private String formatDate (float date) {\n+//        int dateInt = (int) date;\n+//        String formattedDate = String.valueOf(dateInt);\n+//        return \"20\" + formattedDate.substring(0,2) + \"/\" + formattedDate.substring(2,4) + \"/\" + formattedDate.substring(4,6);\n+//    }\n }// end ExperimentDetailsNonOwnerActivity\n\\ No newline at end of file"
  },
  {
    "sha": "d1f0af8c03e2ad549fbea62055fef90f19a75f17",
    "filename": "app/src/main/java/com/T05/krowdtrialz/ui/ExperimentDetailsOwnerActivity.java",
    "status": "modified",
    "additions": 450,
    "deletions": 452,
    "changes": 902,
    "blob_url": "https://github.com/Ricky-Au/KrowdTrialz/blob/f572984cde6c67aec1df6cdba26465be97a3e057/app/src/main/java/com/T05/krowdtrialz/ui/ExperimentDetailsOwnerActivity.java",
    "raw_url": "https://github.com/Ricky-Au/KrowdTrialz/raw/f572984cde6c67aec1df6cdba26465be97a3e057/app/src/main/java/com/T05/krowdtrialz/ui/ExperimentDetailsOwnerActivity.java",
    "contents_url": "https://api.github.com/repos/Ricky-Au/KrowdTrialz/contents/app/src/main/java/com/T05/krowdtrialz/ui/ExperimentDetailsOwnerActivity.java?ref=f572984cde6c67aec1df6cdba26465be97a3e057",
    "patch": "@@ -94,6 +94,48 @@ public void onClick(View v) {\n             @Override\n             public void onSuccess(Experiment exp) {\n                 experiment = exp;\n+                description.setText(experiment.getDescription());\n+                minTrials.setText(String.valueOf(experiment.getMinTrials()));\n+                populateRegionInfo();\n+                populateTrialResults();\n+\n+                /**\n+                 * This method updates the Description when the owner edits the text\n+                 * NOTE: user must click something else to update catch their changes\n+                 * @author\n+                 *  Ricky Au\n+                 */\n+                description.setOnFocusChangeListener(new View.OnFocusChangeListener() {\n+                    @Override\n+                    public void onFocusChange(View v, boolean hasFocus) {\n+                        if (!hasFocus){\n+                            Log.d(TAG, \"edited the description\");\n+                            Toast.makeText(ExperimentDetailsOwnerActivity.this, \"changed description to \" + description.getText().toString(),Toast.LENGTH_SHORT).show();\n+                            //TODO: currently crashes if you retry to edit Description maybe just have confirm button that saves edit fields\n+\n+                            //TODO: verify this works when we can pass experiment\n+                            experiment.setDescription(description.getText().toString());\n+                            db.updateExperiment(experiment);\n+                        }\n+                    }\n+                });\n+\n+                // For entering minimum number of trials\n+                minTrials.setOnFocusChangeListener(new View.OnFocusChangeListener() {\n+                    @Override\n+                    public void onFocusChange(View v, boolean hasFocus) {\n+                        if (!hasFocus){\n+                            Log.d(TAG, \"edited the min number of trials\");\n+                            //TODO: currently crashes if you retry to edit Description maybe just have confirm button that saves edit fields\n+                            //TODO: verify this works when we can pass experiment\n+                            String numStr = minTrials.getText().toString();\n+                            int num = Integer.parseInt(numStr);\n+                            Toast.makeText(ExperimentDetailsOwnerActivity.this, \"num trial is now \" + num,Toast.LENGTH_SHORT).show();\n+                            experiment.setMinTrials(num);\n+                            db.updateExperiment(experiment);\n+                        }\n+                    }\n+                });\n             }\n \n             @Override\n@@ -102,87 +144,43 @@ public void onFailure() {\n             }\n         });\n \n-\n-        description.setText(experiment.getDescription());\n-        minTrials.setText(String.valueOf(experiment.getMinTrials()));\n-\n-        /**\n-         * This method updates the Description when the owner edits the text\n-         * NOTE: user must click something else to update catch their changes\n-         * @author\n-         *  Ricky Au\n-         */\n-        description.setOnFocusChangeListener(new View.OnFocusChangeListener() {\n-            @Override\n-            public void onFocusChange(View v, boolean hasFocus) {\n-                if (!hasFocus){\n-                    Log.d(TAG, \"edited the description\");\n-                    Toast.makeText(ExperimentDetailsOwnerActivity.this, \"changed description to \" + description.getText().toString(),Toast.LENGTH_SHORT).show();\n-                    //TODO: currently crashes if you retry to edit Description maybe just have confirm button that saves edit fields\n-\n-                    //TODO: verify this works when we can pass experiment\n-                    experiment.setDescription(description.getText().toString());\n-                    db.updateExperiment(experiment);\n-                }\n-            }\n-        });\n-\n-        // For entering minimum number of trials\n-        minTrials.setOnFocusChangeListener(new View.OnFocusChangeListener() {\n-            @Override\n-            public void onFocusChange(View v, boolean hasFocus) {\n-                if (!hasFocus){\n-                    Log.d(TAG, \"edited the min number of trials\");\n-                    //TODO: currently crashes if you retry to edit Description maybe just have confirm button that saves edit fields\n-                    //TODO: verify this works when we can pass experiment\n-                    String numStr = minTrials.getText().toString();\n-                    int num = Integer.parseInt(numStr);\n-                    Toast.makeText(ExperimentDetailsOwnerActivity.this, \"num trial is now \" + num,Toast.LENGTH_SHORT).show();\n-                    experiment.setMinTrials(num);\n-                    db.updateExperiment(experiment);\n-                }\n-            }\n-        });\n-\n-        populateRegionInfo();\n-        populateTrialResults();\n-\n     }// end onCreate\n \n \n     /**\n      * This method starts an add trial activity based on the experiment type.\n      * @author Vasu Gupta\n      */\n-    void addTrial(){\n+    void addTrial() {\n         Intent intent = null;\n         String type = experiment.getType();\n \n-        if(type.equals(\"Binomial\")){\n+        if (type.equals(\"Binomial\")) {\n             intent = new Intent(this, AddBinomialTrialActivity.class);\n-        } else if(type.equals(\"Count\")){\n+        } else if (type.equals(\"Count\")) {\n             intent = new Intent(this, AddCountTrialActivity.class);\n-        }else if(type.equals(\"Measurement\")){\n+        } else if (type.equals(\"Measurement\")) {\n             intent = new Intent(this, AddMeasurementTrialActivity.class);\n-        } else if(type.equals(\"Integer\")){\n+        } else if (type.equals(\"Integer\")) {\n             intent = new Intent(this, AddIntegerTrialActivity.class);\n         }\n \n-        if(intent != null){\n+        if (intent != null) {\n             Log.d(TAG, \"Starting Add\" + type + \"Trial activity.\");\n             intent.putExtra(MainActivity.EXTRA_EXPERIMENT_ID, experiment.getId());\n             startActivity(intent);\n-        } else{\n-            Log.e(TAG,\"Intent is null: Could not get Trial type.\");\n+        } else {\n+            Log.e(TAG, \"Intent is null: Could not get Trial type.\");\n         }\n+    }\n \n \n     /**\n      * This method fills out Region, If none exist it will be blank\n      * @author\n      *  Ricky Au\n      */\n-    private void populateRegionInfo() {\n+    private void populateRegionInfo(){\n \n         // fill out region\n         region = findViewById(R.id.region_detail_owner_screen_textView);\n@@ -297,403 +295,403 @@ public void viewQnA(View view){\n     }\n \n \n-    /**\n-     * This method creates a Histogram based on experiment\n-     * @author\n-     *  Furmaan Sekhon and Jacques Leong-Sit\n-     */\n-    private void populateHistogram (){\n-\n-        barChart = findViewById(R.id.histogram_owner);\n-\n-        // Get experiment object\n-        Bundle extras = getIntent().getExtras();\n-        experiment = (Experiment) extras.get(\"experiment\");\n-\n-        // Get array of data from experiment\n-        List<BarEntry> entries = new ArrayList<BarEntry>();\n-        if (this.experiment.getType() == \"Binomial\") { // Binomial format: {successCount, failureCount}\n-            // make list of data\n-            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n-            BinomialExperiment binomialExperiment = (BinomialExperiment) extras.get(\"experiment\");\n-            dataPoints.add(binomialExperiment.getSuccessCount());\n-            dataPoints.add(binomialExperiment.getFailureCount());\n-\n-            // make list of entries\n-            for (int i = 0; i < dataPoints.size(); i++) {\n-                // turn your data into Entry objects\n-                entries.add(new BarEntry(i, dataPoints.get(i)));\n-            }\n-        }else if (this.experiment.getType() == \"Count\"){ // Count format: {Count}\n-            // make list of data\n-            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n-            dataPoints.add(this.experiment.getTrials().size());\n-\n-            // make list of entries\n-            for (int i = 0; i < dataPoints.size(); i++) {\n-                // turn your data into Entry objects\n-                entries.add(new BarEntry(i, dataPoints.get(i)));\n-            }\n-        }\n-        else if (this.experiment.getType() == \"Integer\"){ // Integer format: list of data points\n-            // make list of data\n-            IntegerExperiment integerExperiment = (IntegerExperiment) extras.get(\"experiment\");\n-            double[] temp = integerExperiment.getTrials().stream()\n-                    .mapToDouble(trial -> ((IntegerTrial) trial).getValue())\n-                    .toArray();\n-\n-            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n-            for(int i=0; i<temp.length; i++) {\n-                dataPoints.add((int) temp[i]);\n-            }\n-\n-            // make dictionary that stores the frequency of each unique data point\n-            Hashtable<Integer, Integer> uniqueDataPoints = new Hashtable<Integer, Integer>();\n-            for (int i = 0; i < dataPoints.size(); i++) {\n-                // Count the number of occurrences of each data point\n-                if (uniqueDataPoints.containsKey(dataPoints.get(i))) {\n-                    uniqueDataPoints.put(dataPoints.get(i), uniqueDataPoints.get(dataPoints.get(i)) + 1);\n-                }else{\n-                    uniqueDataPoints.put(dataPoints.get(i), 1);\n-                }\n-            }\n-\n-            // make list of entries\n-            for (int i : uniqueDataPoints.keySet()) {\n-                // turn your data into Entry objects\n-                entries.add(new BarEntry(i ,uniqueDataPoints.get(i)));\n-            }\n-\n-        }else if (this.experiment.getType() == \"Measurement\") {\n-            // make list of data\n-            MeasurementExperiment measurementExperiment = (MeasurementExperiment) extras.get(\"experiment\");\n-\n-            double[] temp = measurementExperiment.getTrials().stream()\n-                    .mapToDouble(trial -> ((MeasurementTrial) trial).getMeasurementValue())\n-                    .toArray();\n-\n-            ArrayList<Double> dataPoints = new ArrayList<Double>();\n-            for(int i=0; i<temp.length; i++) {\n-                dataPoints.add(temp[i]);\n-            }\n-\n-            // make dictionary that stores the frequency of each unique data point\n-            Hashtable<Double, Integer> uniqueDataPoints = new Hashtable<Double, Integer>();\n-            for (int i = 0; i < dataPoints.size(); i++) {\n-                // Count the number of occurrences of each data point\n-                if (uniqueDataPoints.containsKey(dataPoints.get(i))) {\n-                    uniqueDataPoints.put(dataPoints.get(i), uniqueDataPoints.get(dataPoints.get(i)) + 1);\n-                }else{\n-                    uniqueDataPoints.put(dataPoints.get(i), 1);\n-                }\n-            }\n-\n-            // make list of entries\n-            for (double i : uniqueDataPoints.keySet()) {\n-                // turn your data into Entry objects\n-                entries.add(new BarEntry((float) i, (float) uniqueDataPoints.get(i)));\n-            }\n-        }\n-\n-        // create data set\n-        BarDataSet barDataSet = new BarDataSet(entries, String.format(\"%s Trials\", experiment.getType()));\n-        BarData barData = new BarData(barDataSet);\n-\n-        // add data to chart\n-        barChart.setData(barData);\n-        barData.setBarWidth(0.9f); // set custom bar width\n-        barChart.setFitBars(true);\n-        barChart.invalidate(); // Refreshes chart\n-    }// end populateHistogram\n-\n-    /**\n-     * This method creates a TimePlot based on experiment\n-     * @author\n-     *  Furmaan Sekhon and Jacques Leong-Sit\n-     */\n-    private void populateTimePlot () {\n-        scatterChart = findViewById(R.id.time_plot_owner);\n-\n-        // Get experiment object\n-        Bundle extras = getIntent().getExtras();\n-        experiment = (Experiment) extras.get(\"experiment\");\n-\n-        // Get array of data from experiment\n-        if (this.experiment.getType() == \"Binomial\") { // Binomial format: {successCount, failureCount}\n-\n-            List<Entry> passEntries = new ArrayList<Entry>();\n-            List<Entry> failEntries = new ArrayList<Entry>();\n-\n-            // make list of data\n-            BinomialExperiment binomialExperiment = (BinomialExperiment) this.experiment;\n-\n-            ArrayList<Trial> temp = binomialExperiment.getTrials();\n-            ArrayList<BinomialTrial> binomialTrials = new ArrayList<BinomialTrial>();\n-            for (Trial trial : temp){\n-                binomialTrials.add((BinomialTrial) trial);\n-            }\n-\n-            Hashtable<String, Integer> datePasses = new Hashtable<String, Integer>();\n-            Hashtable<String, Integer> dateFails = new Hashtable<String, Integer>();\n-            for (BinomialTrial trial : binomialTrials){\n-                int passes = trial.getPassCount();\n-                int fails = trial.getFailCount();\n-                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n-\n-                if (datePasses.containsKey(dateOfTrial)){\n-                    datePasses.put(dateOfTrial, datePasses.get(dateOfTrial) + passes);\n-                }else{\n-                    datePasses.put(dateOfTrial,passes);\n-                }\n-                if (dateFails.containsKey(dateOfTrial)){\n-                    dateFails.put(dateOfTrial, dateFails.get(dateOfTrial) + fails);\n-                }else{\n-                    dateFails.put(dateOfTrial,fails);\n-                }\n-\n-            }\n-\n-            // make list of entries\n-            for (String key : datePasses.keySet()) {\n-                // turn your data into Entry objects\n-                passEntries.add(new Entry(decodeDate(key), datePasses.get(key)));\n-            }\n-            for (String key : dateFails.keySet()) {\n-                // turn your data into Entry objects\n-                failEntries.add(new Entry(decodeDate(key), dateFails.get(key)));\n-            }\n-\n-            ScatterDataSet passDataSet = new ScatterDataSet(passEntries, binomialExperiment.getPassUnit());\n-            ScatterDataSet failDataSet = new ScatterDataSet(failEntries, binomialExperiment.getFailUnit());\n-\n-            passDataSet.setColors(new int[] {R.color.purple_700, R.color.teal_700});\n-\n-            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n-\n-            dataSets.add(passDataSet);\n-            dataSets.add(failDataSet);\n-\n-            // create data set\n-            ScatterData scatterData = new ScatterData(dataSets);\n-\n-            ValueFormatter formatter = new ValueFormatter() {\n-                @Override\n-                public String getAxisLabel(float value, AxisBase axis) {\n-                    return formatDate(value);\n-                }\n-            };\n-            XAxis xAxis = scatterChart.getXAxis();\n-            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n-            xAxis.setValueFormatter(formatter);\n-\n-            // add data to chart\n-            scatterChart.setData(scatterData);\n-            scatterChart.invalidate(); // Refreshes chart\n-\n-        }else if (this.experiment.getType() == \"Count\"){ // Count format: {Count}\n-            List<Entry> entries = new ArrayList<Entry>();\n-\n-            // make list of data\n-            CountExperiment countExperiment = (CountExperiment) this.experiment;\n-\n-            ArrayList<Trial> temp = countExperiment.getTrials();\n-            ArrayList<CountTrial> countTrials = new ArrayList<CountTrial>();\n-            for (Trial trial : temp){\n-                countTrials.add((CountTrial) trial);\n-            }\n-\n-            Hashtable<String, Integer> dateCounts = new Hashtable<String, Integer>();\n-            for (CountTrial trial : countTrials){\n-                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n-\n-                if (dateCounts.containsKey(dateOfTrial)){\n-                    dateCounts.put(dateOfTrial, dateCounts.get(dateOfTrial) + 1);\n-                }else{\n-                    dateCounts.put(dateOfTrial, 1);\n-                }\n-            }\n-\n-            // make list of entries\n-            for (String key : dateCounts.keySet()) {\n-                // turn your data into Entry objects\n-                entries.add(new Entry(decodeDate(key), dateCounts.get(key)));\n-            }\n-\n-            ScatterDataSet countDataSet = new ScatterDataSet(entries, countExperiment.getUnit());\n-\n-            countDataSet.setColors(new int[] {R.color.purple_700});\n-\n-            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n-\n-            dataSets.add(countDataSet);\n-\n-\n-            // create data set\n-            ScatterData scatterData = new ScatterData(dataSets);\n-\n-            ValueFormatter formatter = new ValueFormatter() {\n-                @Override\n-                public String getAxisLabel(float value, AxisBase axis) {\n-                    return formatDate(value);\n-                }\n-            };\n-            XAxis xAxis = scatterChart.getXAxis();\n-            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n-            xAxis.setValueFormatter(formatter);\n-\n-            // add data to chart\n-            scatterChart.setData(scatterData);\n-            scatterChart.invalidate(); // Refreshes chart\n-        } else if (this.experiment.getType() == \"Integer\"){ // Integer format: list of data points\n-            List<Entry> entries = new ArrayList<Entry>();\n-\n-            // make list of data\n-            IntegerExperiment integerExperiment = (IntegerExperiment) this.experiment;\n-\n-            ArrayList<Trial> temp = integerExperiment.getTrials();\n-            ArrayList<IntegerTrial> integerTrials = new ArrayList<IntegerTrial>();\n-            for (Trial trial : temp){\n-                integerTrials.add((IntegerTrial) trial);\n-            }\n-\n-            Hashtable<String, ArrayList<Integer>> dateValues = new Hashtable<String, ArrayList<Integer>>();\n-            for (IntegerTrial trial : integerTrials){\n-                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n-                ArrayList<Integer> values;\n-\n-                if (dateValues.containsKey(dateOfTrial)){\n-                    values = dateValues.get(dateOfTrial);\n-                }else{\n-                    values = new ArrayList<Integer>();\n-                }\n-                values.add(trial.getValue());\n-                dateValues.put(dateOfTrial, values);\n-            }\n-\n-            // make list of entries\n-            for (String key : dateValues.keySet()) {\n-                // turn your data into Entry objects\n-                for (int value : dateValues.get(key)){\n-                    entries.add(new Entry(decodeDate(key), value));\n-                }\n-\n-            }\n-\n-            ScatterDataSet integerDataSet = new ScatterDataSet(entries, integerExperiment.getUnit());\n-\n-            integerDataSet.setColors(new int[] {R.color.purple_700});\n-\n-            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n-\n-            dataSets.add(integerDataSet);\n-\n-\n-            // create data set\n-            ScatterData scatterData = new ScatterData(dataSets);\n-\n-            ValueFormatter formatter = new ValueFormatter() {\n-                @Override\n-                public String getAxisLabel(float value, AxisBase axis) {\n-                    return formatDate(value);\n-                }\n-            };\n-            XAxis xAxis = scatterChart.getXAxis();\n-            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n-            xAxis.setValueFormatter(formatter);\n-\n-            // add data to chart\n-            scatterChart.setData(scatterData);\n-            scatterChart.invalidate(); // Refreshes chart\n-\n-        }else if (this.experiment.getType() == \"Measurement\") {\n-            List<Entry> entries = new ArrayList<Entry>();\n-\n-            // make list of data\n-            MeasurementExperiment measurementExperiment = (MeasurementExperiment) this.experiment;\n-\n-            ArrayList<Trial> temp = measurementExperiment.getTrials();\n-            ArrayList<MeasurementTrial> measurementTrials = new ArrayList<MeasurementTrial>();\n-            for (Trial trial : temp){\n-                measurementTrials.add((MeasurementTrial) trial);\n-            }\n-\n-            Hashtable<String, ArrayList<Float>> dateValues = new Hashtable<String, ArrayList<Float>>();\n-            for (MeasurementTrial trial : measurementTrials){\n-                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n-                ArrayList<Float> values;\n-\n-                if (dateValues.containsKey(dateOfTrial)){\n-                    values = dateValues.get(dateOfTrial);\n-                }else{\n-                    values = new ArrayList<Float>();\n-                }\n-                values.add(trial.getMeasurementValue());\n-                dateValues.put(dateOfTrial, values);\n-            }\n-\n-            // make list of entries\n-            for (String key : dateValues.keySet()) {\n-                // turn your data into Entry objects\n-                for (float value : dateValues.get(key)){\n-                    entries.add(new Entry(decodeDate(key), value));\n-                }\n-\n-            }\n-\n-            ScatterDataSet measurementDataSet = new ScatterDataSet(entries, measurementExperiment.getUnit());\n-\n-            measurementDataSet.setColors(new int[] {R.color.purple_700});\n-\n-            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n-\n-            dataSets.add(measurementDataSet);\n-\n-\n-            // create data set\n-            ScatterData scatterData = new ScatterData(dataSets);\n-\n-            ValueFormatter formatter = new ValueFormatter() {\n-                @Override\n-                public String getAxisLabel(float value, AxisBase axis) {\n-                    return formatDate(value);\n-                }\n-            };\n-            XAxis xAxis = scatterChart.getXAxis();\n-            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n-            xAxis.setValueFormatter(formatter);\n-\n-            // add data to chart\n-            scatterChart.setData(scatterData);\n-            scatterChart.invalidate(); // Refreshes chart\n-        }\n-    }// end populateTimePlot\n-\n-    private String encodeDate (int year, int month,int day){\n-        String stringYear = String.valueOf(year);\n-        stringYear = stringYear.substring(2,4);\n-        String stringMonth;\n-        String stringDay;\n-        if (month < 10){\n-            stringMonth = \"0\"+String.valueOf(month);\n-        }else{\n-            stringMonth = String.valueOf(month);\n-        }\n-        if (day < 10){\n-            stringDay = \"0\"+String.valueOf(day);\n-        }else{\n-            stringDay = String.valueOf(day);\n-        }\n-\n-        return stringYear + \"/\" + stringMonth + \"/\" + stringDay;\n-\n-    }\n-    private float decodeDate (String date){\n-        return (float) Integer.parseInt(date.replaceAll(\"/\",\"\"));\n-    }\n-    private String formatDate (float date) {\n-        int dateInt = (int) date;\n-        String formattedDate = String.valueOf(dateInt);\n-        return \"20\" + formattedDate.substring(0,2) + \"/\" + formattedDate.substring(2,4) + \"/\" + formattedDate.substring(4,6);\n-    }\n+//    /**\n+//     * This method creates a Histogram based on experiment\n+//     * @author\n+//     *  Furmaan Sekhon and Jacques Leong-Sit\n+//     */\n+//    private void populateHistogram (){\n+//\n+//        barChart = findViewById(R.id.histogram_owner);\n+//\n+//        // Get experiment object\n+//        Bundle extras = getIntent().getExtras();\n+//        experiment = (Experiment) extras.get(\"experiment\");\n+//\n+//        // Get array of data from experiment\n+//        List<BarEntry> entries = new ArrayList<BarEntry>();\n+//        if (this.experiment.getType() == \"Binomial\") { // Binomial format: {successCount, failureCount}\n+//            // make list of data\n+//            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n+//            BinomialExperiment binomialExperiment = (BinomialExperiment) extras.get(\"experiment\");\n+//            dataPoints.add(binomialExperiment.getSuccessCount());\n+//            dataPoints.add(binomialExperiment.getFailureCount());\n+//\n+//            // make list of entries\n+//            for (int i = 0; i < dataPoints.size(); i++) {\n+//                // turn your data into Entry objects\n+//                entries.add(new BarEntry(i, dataPoints.get(i)));\n+//            }\n+//        }else if (this.experiment.getType() == \"Count\"){ // Count format: {Count}\n+//            // make list of data\n+//            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n+//            dataPoints.add(this.experiment.getTrials().size());\n+//\n+//            // make list of entries\n+//            for (int i = 0; i < dataPoints.size(); i++) {\n+//                // turn your data into Entry objects\n+//                entries.add(new BarEntry(i, dataPoints.get(i)));\n+//            }\n+//        }\n+//        else if (this.experiment.getType() == \"Integer\"){ // Integer format: list of data points\n+//            // make list of data\n+//            IntegerExperiment integerExperiment = (IntegerExperiment) extras.get(\"experiment\");\n+//            double[] temp = integerExperiment.getTrials().stream()\n+//                    .mapToDouble(trial -> ((IntegerTrial) trial).getValue())\n+//                    .toArray();\n+//\n+//            ArrayList<Integer> dataPoints = new ArrayList<Integer>();\n+//            for(int i=0; i<temp.length; i++) {\n+//                dataPoints.add((int) temp[i]);\n+//            }\n+//\n+//            // make dictionary that stores the frequency of each unique data point\n+//            Hashtable<Integer, Integer> uniqueDataPoints = new Hashtable<Integer, Integer>();\n+//            for (int i = 0; i < dataPoints.size(); i++) {\n+//                // Count the number of occurrences of each data point\n+//                if (uniqueDataPoints.containsKey(dataPoints.get(i))) {\n+//                    uniqueDataPoints.put(dataPoints.get(i), uniqueDataPoints.get(dataPoints.get(i)) + 1);\n+//                }else{\n+//                    uniqueDataPoints.put(dataPoints.get(i), 1);\n+//                }\n+//            }\n+//\n+//            // make list of entries\n+//            for (int i : uniqueDataPoints.keySet()) {\n+//                // turn your data into Entry objects\n+//                entries.add(new BarEntry(i ,uniqueDataPoints.get(i)));\n+//            }\n+//\n+//        }else if (this.experiment.getType() == \"Measurement\") {\n+//            // make list of data\n+//            MeasurementExperiment measurementExperiment = (MeasurementExperiment) extras.get(\"experiment\");\n+//\n+//            double[] temp = measurementExperiment.getTrials().stream()\n+//                    .mapToDouble(trial -> ((MeasurementTrial) trial).getMeasurementValue())\n+//                    .toArray();\n+//\n+//            ArrayList<Double> dataPoints = new ArrayList<Double>();\n+//            for(int i=0; i<temp.length; i++) {\n+//                dataPoints.add(temp[i]);\n+//            }\n+//\n+//            // make dictionary that stores the frequency of each unique data point\n+//            Hashtable<Double, Integer> uniqueDataPoints = new Hashtable<Double, Integer>();\n+//            for (int i = 0; i < dataPoints.size(); i++) {\n+//                // Count the number of occurrences of each data point\n+//                if (uniqueDataPoints.containsKey(dataPoints.get(i))) {\n+//                    uniqueDataPoints.put(dataPoints.get(i), uniqueDataPoints.get(dataPoints.get(i)) + 1);\n+//                }else{\n+//                    uniqueDataPoints.put(dataPoints.get(i), 1);\n+//                }\n+//            }\n+//\n+//            // make list of entries\n+//            for (double i : uniqueDataPoints.keySet()) {\n+//                // turn your data into Entry objects\n+//                entries.add(new BarEntry((float) i, (float) uniqueDataPoints.get(i)));\n+//            }\n+//        }\n+//\n+//        // create data set\n+//        BarDataSet barDataSet = new BarDataSet(entries, String.format(\"%s Trials\", experiment.getType()));\n+//        BarData barData = new BarData(barDataSet);\n+//\n+//        // add data to chart\n+//        barChart.setData(barData);\n+//        barData.setBarWidth(0.9f); // set custom bar width\n+//        barChart.setFitBars(true);\n+//        barChart.invalidate(); // Refreshes chart\n+//    }// end populateHistogram\n+//\n+//    /**\n+//     * This method creates a TimePlot based on experiment\n+//     * @author\n+//     *  Furmaan Sekhon and Jacques Leong-Sit\n+//     */\n+//    private void populateTimePlot () {\n+//        scatterChart = findViewById(R.id.time_plot_owner);\n+//\n+//        // Get experiment object\n+//        Bundle extras = getIntent().getExtras();\n+//        experiment = (Experiment) extras.get(\"experiment\");\n+//\n+//        // Get array of data from experiment\n+//        if (this.experiment.getType() == \"Binomial\") { // Binomial format: {successCount, failureCount}\n+//\n+//            List<Entry> passEntries = new ArrayList<Entry>();\n+//            List<Entry> failEntries = new ArrayList<Entry>();\n+//\n+//            // make list of data\n+//            BinomialExperiment binomialExperiment = (BinomialExperiment) this.experiment;\n+//\n+//            ArrayList<Trial> temp = binomialExperiment.getTrials();\n+//            ArrayList<BinomialTrial> binomialTrials = new ArrayList<BinomialTrial>();\n+//            for (Trial trial : temp){\n+//                binomialTrials.add((BinomialTrial) trial);\n+//            }\n+//\n+//            Hashtable<String, Integer> datePasses = new Hashtable<String, Integer>();\n+//            Hashtable<String, Integer> dateFails = new Hashtable<String, Integer>();\n+//            for (BinomialTrial trial : binomialTrials){\n+//                int passes = trial.getPassCount();\n+//                int fails = trial.getFailCount();\n+//                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n+//\n+//                if (datePasses.containsKey(dateOfTrial)){\n+//                    datePasses.put(dateOfTrial, datePasses.get(dateOfTrial) + passes);\n+//                }else{\n+//                    datePasses.put(dateOfTrial,passes);\n+//                }\n+//                if (dateFails.containsKey(dateOfTrial)){\n+//                    dateFails.put(dateOfTrial, dateFails.get(dateOfTrial) + fails);\n+//                }else{\n+//                    dateFails.put(dateOfTrial,fails);\n+//                }\n+//\n+//            }\n+//\n+//            // make list of entries\n+//            for (String key : datePasses.keySet()) {\n+//                // turn your data into Entry objects\n+//                passEntries.add(new Entry(decodeDate(key), datePasses.get(key)));\n+//            }\n+//            for (String key : dateFails.keySet()) {\n+//                // turn your data into Entry objects\n+//                failEntries.add(new Entry(decodeDate(key), dateFails.get(key)));\n+//            }\n+//\n+//            ScatterDataSet passDataSet = new ScatterDataSet(passEntries, binomialExperiment.getPassUnit());\n+//            ScatterDataSet failDataSet = new ScatterDataSet(failEntries, binomialExperiment.getFailUnit());\n+//\n+//            passDataSet.setColors(new int[] {R.color.purple_700, R.color.teal_700});\n+//\n+//            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n+//\n+//            dataSets.add(passDataSet);\n+//            dataSets.add(failDataSet);\n+//\n+//            // create data set\n+//            ScatterData scatterData = new ScatterData(dataSets);\n+//\n+//            ValueFormatter formatter = new ValueFormatter() {\n+//                @Override\n+//                public String getAxisLabel(float value, AxisBase axis) {\n+//                    return formatDate(value);\n+//                }\n+//            };\n+//            XAxis xAxis = scatterChart.getXAxis();\n+//            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n+//            xAxis.setValueFormatter(formatter);\n+//\n+//            // add data to chart\n+//            scatterChart.setData(scatterData);\n+//            scatterChart.invalidate(); // Refreshes chart\n+//\n+//        }else if (this.experiment.getType() == \"Count\"){ // Count format: {Count}\n+//            List<Entry> entries = new ArrayList<Entry>();\n+//\n+//            // make list of data\n+//            CountExperiment countExperiment = (CountExperiment) this.experiment;\n+//\n+//            ArrayList<Trial> temp = countExperiment.getTrials();\n+//            ArrayList<CountTrial> countTrials = new ArrayList<CountTrial>();\n+//            for (Trial trial : temp){\n+//                countTrials.add((CountTrial) trial);\n+//            }\n+//\n+//            Hashtable<String, Integer> dateCounts = new Hashtable<String, Integer>();\n+//            for (CountTrial trial : countTrials){\n+//                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n+//\n+//                if (dateCounts.containsKey(dateOfTrial)){\n+//                    dateCounts.put(dateOfTrial, dateCounts.get(dateOfTrial) + 1);\n+//                }else{\n+//                    dateCounts.put(dateOfTrial, 1);\n+//                }\n+//            }\n+//\n+//            // make list of entries\n+//            for (String key : dateCounts.keySet()) {\n+//                // turn your data into Entry objects\n+//                entries.add(new Entry(decodeDate(key), dateCounts.get(key)));\n+//            }\n+//\n+//            ScatterDataSet countDataSet = new ScatterDataSet(entries, countExperiment.getUnit());\n+//\n+//            countDataSet.setColors(new int[] {R.color.purple_700});\n+//\n+//            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n+//\n+//            dataSets.add(countDataSet);\n+//\n+//\n+//            // create data set\n+//            ScatterData scatterData = new ScatterData(dataSets);\n+//\n+//            ValueFormatter formatter = new ValueFormatter() {\n+//                @Override\n+//                public String getAxisLabel(float value, AxisBase axis) {\n+//                    return formatDate(value);\n+//                }\n+//            };\n+//            XAxis xAxis = scatterChart.getXAxis();\n+//            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n+//            xAxis.setValueFormatter(formatter);\n+//\n+//            // add data to chart\n+//            scatterChart.setData(scatterData);\n+//            scatterChart.invalidate(); // Refreshes chart\n+//        } else if (this.experiment.getType() == \"Integer\"){ // Integer format: list of data points\n+//            List<Entry> entries = new ArrayList<Entry>();\n+//\n+//            // make list of data\n+//            IntegerExperiment integerExperiment = (IntegerExperiment) this.experiment;\n+//\n+//            ArrayList<Trial> temp = integerExperiment.getTrials();\n+//            ArrayList<IntegerTrial> integerTrials = new ArrayList<IntegerTrial>();\n+//            for (Trial trial : temp){\n+//                integerTrials.add((IntegerTrial) trial);\n+//            }\n+//\n+//            Hashtable<String, ArrayList<Integer>> dateValues = new Hashtable<String, ArrayList<Integer>>();\n+//            for (IntegerTrial trial : integerTrials){\n+//                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n+//                ArrayList<Integer> values;\n+//\n+//                if (dateValues.containsKey(dateOfTrial)){\n+//                    values = dateValues.get(dateOfTrial);\n+//                }else{\n+//                    values = new ArrayList<Integer>();\n+//                }\n+//                values.add(trial.getValue());\n+//                dateValues.put(dateOfTrial, values);\n+//            }\n+//\n+//            // make list of entries\n+//            for (String key : dateValues.keySet()) {\n+//                // turn your data into Entry objects\n+//                for (int value : dateValues.get(key)){\n+//                    entries.add(new Entry(decodeDate(key), value));\n+//                }\n+//\n+//            }\n+//\n+//            ScatterDataSet integerDataSet = new ScatterDataSet(entries, integerExperiment.getUnit());\n+//\n+//            integerDataSet.setColors(new int[] {R.color.purple_700});\n+//\n+//            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n+//\n+//            dataSets.add(integerDataSet);\n+//\n+//\n+//            // create data set\n+//            ScatterData scatterData = new ScatterData(dataSets);\n+//\n+//            ValueFormatter formatter = new ValueFormatter() {\n+//                @Override\n+//                public String getAxisLabel(float value, AxisBase axis) {\n+//                    return formatDate(value);\n+//                }\n+//            };\n+//            XAxis xAxis = scatterChart.getXAxis();\n+//            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n+//            xAxis.setValueFormatter(formatter);\n+//\n+//            // add data to chart\n+//            scatterChart.setData(scatterData);\n+//            scatterChart.invalidate(); // Refreshes chart\n+//\n+//        }else if (this.experiment.getType() == \"Measurement\") {\n+//            List<Entry> entries = new ArrayList<Entry>();\n+//\n+//            // make list of data\n+//            MeasurementExperiment measurementExperiment = (MeasurementExperiment) this.experiment;\n+//\n+//            ArrayList<Trial> temp = measurementExperiment.getTrials();\n+//            ArrayList<MeasurementTrial> measurementTrials = new ArrayList<MeasurementTrial>();\n+//            for (Trial trial : temp){\n+//                measurementTrials.add((MeasurementTrial) trial);\n+//            }\n+//\n+//            Hashtable<String, ArrayList<Float>> dateValues = new Hashtable<String, ArrayList<Float>>();\n+//            for (MeasurementTrial trial : measurementTrials){\n+//                String dateOfTrial = encodeDate(trial.getDateCreated().getYear(), trial.getDateCreated().getMonthValue(), trial.getDateCreated().getDayOfMonth());\n+//                ArrayList<Float> values;\n+//\n+//                if (dateValues.containsKey(dateOfTrial)){\n+//                    values = dateValues.get(dateOfTrial);\n+//                }else{\n+//                    values = new ArrayList<Float>();\n+//                }\n+//                values.add(trial.getMeasurementValue());\n+//                dateValues.put(dateOfTrial, values);\n+//            }\n+//\n+//            // make list of entries\n+//            for (String key : dateValues.keySet()) {\n+//                // turn your data into Entry objects\n+//                for (float value : dateValues.get(key)){\n+//                    entries.add(new Entry(decodeDate(key), value));\n+//                }\n+//\n+//            }\n+//\n+//            ScatterDataSet measurementDataSet = new ScatterDataSet(entries, measurementExperiment.getUnit());\n+//\n+//            measurementDataSet.setColors(new int[] {R.color.purple_700});\n+//\n+//            List<IScatterDataSet> dataSets = new ArrayList<IScatterDataSet>();\n+//\n+//            dataSets.add(measurementDataSet);\n+//\n+//\n+//            // create data set\n+//            ScatterData scatterData = new ScatterData(dataSets);\n+//\n+//            ValueFormatter formatter = new ValueFormatter() {\n+//                @Override\n+//                public String getAxisLabel(float value, AxisBase axis) {\n+//                    return formatDate(value);\n+//                }\n+//            };\n+//            XAxis xAxis = scatterChart.getXAxis();\n+//            xAxis.setGranularity(1f); // minimum axis-step (interval) is 1\n+//            xAxis.setValueFormatter(formatter);\n+//\n+//            // add data to chart\n+//            scatterChart.setData(scatterData);\n+//            scatterChart.invalidate(); // Refreshes chart\n+//        }\n+//    }// end populateTimePlot\n+//\n+//    private String encodeDate (int year, int month,int day){\n+//        String stringYear = String.valueOf(year);\n+//        stringYear = stringYear.substring(2,4);\n+//        String stringMonth;\n+//        String stringDay;\n+//        if (month < 10){\n+//            stringMonth = \"0\"+String.valueOf(month);\n+//        }else{\n+//            stringMonth = String.valueOf(month);\n+//        }\n+//        if (day < 10){\n+//            stringDay = \"0\"+String.valueOf(day);\n+//        }else{\n+//            stringDay = String.valueOf(day);\n+//        }\n+//\n+//        return stringYear + \"/\" + stringMonth + \"/\" + stringDay;\n+//\n+//    }\n+//    private float decodeDate (String date){\n+//        return (float) Integer.parseInt(date.replaceAll(\"/\",\"\"));\n+//    }\n+//    private String formatDate (float date) {\n+//        int dateInt = (int) date;\n+//        String formattedDate = String.valueOf(dateInt);\n+//        return \"20\" + formattedDate.substring(0,2) + \"/\" + formattedDate.substring(2,4) + \"/\" + formattedDate.substring(4,6);\n+//    }\n }// end ExperimentDetailsOwnerActivity\n "
  }
]
