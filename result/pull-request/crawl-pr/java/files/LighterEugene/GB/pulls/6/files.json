[
  {
    "sha": "ff24d807c250572ed6ae8f17528a208c0a6661f9",
    "filename": "untitled/src/HomeWork8.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/LighterEugene/GB/blob/1b4176ef2a21072de3a4ab6d5a038741c589ed1e/untitled/src/HomeWork8.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/1b4176ef2a21072de3a4ab6d5a038741c589ed1e/untitled/src/HomeWork8.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/HomeWork8.java?ref=1b4176ef2a21072de3a4ab6d5a038741c589ed1e",
    "patch": "@@ -0,0 +1,13 @@\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class HomeWork8 {\n+    public static void main(String[] args) {\n+        MyWindow myWindow = new MyWindow();\n+    }\n+\n+}"
  },
  {
    "sha": "6802668b7aae0f74d55a05077da46a3be98a919d",
    "filename": "untitled/src/Homework3.java",
    "status": "removed",
    "additions": 0,
    "deletions": 95,
    "changes": 95,
    "blob_url": "https://github.com/LighterEugene/GB/blob/45a3b5108cc00e71c20415b4ded48a6eeeddf35f/untitled/src/Homework3.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/45a3b5108cc00e71c20415b4ded48a6eeeddf35f/untitled/src/Homework3.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/Homework3.java?ref=45a3b5108cc00e71c20415b4ded48a6eeeddf35f",
    "patch": "@@ -1,95 +0,0 @@\n-\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Random;\n-\n-public class Homework3 {\n-\n-    //1. Написать программу, которая загадывает случайное число от 0 до 9 и пользователю дается 3 попытки угадать\n-    // это число. При каждой попытке компьютер должен сообщить, больше ли указанное пользователем число, чем загаданное,\n-    // или меньше. После победы или проигрыша выводится\n-    // запрос – «Повторить игру еще раз? 1 да / 0 – нет»(1 – повторить, 0 – нет).\n-\n-\n-    public static void guessingNumberGame() throws IOException {\n-        System.out.println(\"Требуется угадать число от 0 до 9, у вас 3 попытки. Введите пожалуйста число:\");\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n-        Random rand = new Random();\n-        int guessedNumber = rand.nextInt(10);\n-        for (int i = 3; i > 0; i--) {\n-            byte answerOfPerson = Byte.parseByte(reader.readLine());\n-            if (answerOfPerson > guessedNumber) System.out.println(\" Введёное число больше загаданного, осталось \" + ( i - 1) + \" попробуйте ввести другое число\");\n-            else if (answerOfPerson < guessedNumber) System.out.println(\" Введёное число меньше загаданного, осталось \" + ( i - 1) + \" попыток, попробуйте ввести другое число\");\n-            else if (answerOfPerson == guessedNumber) {\n-                System.out.println(\"Поздравляю, Вы угадали!\");\n-                break;\n-            }\n-            if (i == 1 && answerOfPerson != guessedNumber) System.out.println(\"ой, а ввести уже ничего не получится, ваши попытки исчерпаны \\n к сожалению, вы не угадали...\");\n-        }\n-        System.out.println(\"Повторить игру еще раз? Введите 1 если хотите и 0 если нет\");\n-        byte answerOfPersonOfEndingOrContinuing = Byte.parseByte(reader.readLine());\n-        if (answerOfPersonOfEndingOrContinuing == 1) guessingNumberGame();\n-        else if (answerOfPersonOfEndingOrContinuing == 0) System.out.println(\"Игра окончена!\");\n-        reader.close();\n-    }\n-\n-    /*2  Создать массив из слов\n-String[] words = {\"apple\", \"orange\", \"lemon\", \"banana\", \"apricot\", \"avocado\", \"broccoli\", \"carrot\", \"cherry\", \"garlic\", \"grape\", \"melon\", \"leak\", \"kiwi\", \"mango\", \"mushroom\", \"nut\", \"olive\", \"pea\", \"peanut\", \"pear\", \"pepper\", \"pineapple\", \"pumpkin\", \"potato\"}.\n-        При запуске программы компьютер загадывает слово, запрашивает ответ у пользователя, сравнивает его с загаданным словом и сообщает, правильно ли ответил пользователь. Если слово не угадано, компьютер показывает буквы, которые стоят на своих местах.\n-apple – загаданное\n-apricot - ответ игрока\n-ap############# (15 символов, чтобы пользователь не мог узнать длину слова)\n-Для сравнения двух слов посимвольно можно пользоваться:\n-String str = \"apple\";\n-char a = str.charAt(0); - метод вернет char, который стоит в слове str на первой позиции\n-Играем до тех пор, пока игрок не отгадает слово.\n-Используем только маленькие буквы.\n-*/\n-    public static void guessingWordGame() throws IOException {\n-        Random rand = new Random();\n-        int plate = rand.nextInt(25);\n-        String[] words = new String[]{\"apple\", \"orange\", \"lemon\", \"banana\", \"apricot\", \"avocado\", \"broccoli\", \"carrot\", \"cherry\", \"garlic\", \"grape\", \"melon\", \"leak\", \"kiwi\", \"mango\", \"mushroom\", \"nut\", \"olive\", \"pea\", \"peanut\", \"pear\", \"pepper\", \"pineapple\", \"pumpkin\", \"potato\"};\n-        System.out.println(\"Компьютер загадал слово,попытайтесь отгадать, играем до тех пор, пока игрок не отгадает слово:\");\n-        String guessedWord = words[plate];\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n-        while(true){\n-            String answerOfPerson = reader.readLine().toLowerCase();\n-            int maxLength = answerOfPerson.length() < guessedWord.length() ? answerOfPerson.length() : guessedWord.length();\n-            if(answerOfPerson.equals(guessedWord)){\n-                System.out.println(\"Поздравляю, Вы угадали!\");\n-                break;\n-            }\n-            else if (!answerOfPerson.equals(guessedWord)){\n-                System.out.println(\"Попробуйте ещё раз, вы не угадали, сейчас будет выведена подсказка, какие буквы вами угаданы, # не означает что буква обязательно есть, она может как быть:\");\n-                String[] promptArray = new String[15];\n-                for (int i = 0; i < 15; i++)promptArray[i] = \"#\";\n-                for (int i = 0; i < maxLength;i++){\n-                    if (answerOfPerson.charAt(i) == guessedWord.charAt(i)){\n-                        promptArray[i] = Character.toString(guessedWord.charAt(i));\n-                    }\n-                    else if(answerOfPerson.charAt(i) != guessedWord.charAt(i)){\n-                        promptArray[i] =\"#\";\n-                    }\n-\n-                }\n-                ArrayList<String> list = new ArrayList<String>(Arrays.asList(promptArray));\n-                for (String partOfList: list)\n-                {\n-                    System.out.print(partOfList);\n-                }\n-                System.out.println();\n-            }\n-        }\n-    }\n-    //\n-    public static void main(String[] args) throws IOException{\n-        guessingWordGame();\n-\n-\n-\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "c9dfee6d4dd7bd631bdb4ccb9f765ce6f19f4d78",
    "filename": "untitled/src/MyWindow.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/LighterEugene/GB/blob/1b4176ef2a21072de3a4ab6d5a038741c589ed1e/untitled/src/MyWindow.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/1b4176ef2a21072de3a4ab6d5a038741c589ed1e/untitled/src/MyWindow.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/MyWindow.java?ref=1b4176ef2a21072de3a4ab6d5a038741c589ed1e",
    "patch": "@@ -0,0 +1,27 @@\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionListener;\n+\n+class MyWindow extends JFrame {\n+    public MyWindow() {\n+        setVisible(true);\n+        setLocation(650,650);\n+        setSize(500,500);\n+        setTitle(\"Моё крутое окошко!\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setBounds(300, 300, 400, 400);\n+\n+        JPanel panel = new JPanel(new GridLayout(2,2));\n+        JButton btn1 = new JButton(\"Выход\");\n+        panel.add(btn1);\n+\n+        ActionListener actionListener = new closeActionListener();\n+\n+        btn1.addActionListener(actionListener);\n+\n+        JButton btn2 = new JButton(\"Кнопка\");\n+        panel.add(btn2);\n+        add(panel,BorderLayout.SOUTH);\n+\n+    }\n+}"
  },
  {
    "sha": "5bc8b9beb319715b43c07ce3e3b06efd1fdb7a71",
    "filename": "untitled/src/closeActionListener.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/LighterEugene/GB/blob/1b4176ef2a21072de3a4ab6d5a038741c589ed1e/untitled/src/closeActionListener.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/1b4176ef2a21072de3a4ab6d5a038741c589ed1e/untitled/src/closeActionListener.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/closeActionListener.java?ref=1b4176ef2a21072de3a4ab6d5a038741c589ed1e",
    "patch": "@@ -0,0 +1,10 @@\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class closeActionListener implements ActionListener {\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        System.exit(0);\n+    }\n+}"
  }
]
