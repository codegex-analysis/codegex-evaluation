[
  {
    "sha": "5f3a56840c0c0eeef01fddeb385e8a7b57cf2554",
    "filename": "untitled/src/Cat.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Cat.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Cat.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/Cat.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,49 @@\n+public class Cat implements JumpableRunnable{\n+    private int maxHeight;\n+    private int maxLengthOfRunning;\n+    private String name;\n+\n+    public Cat(int maxHeight, int maxLengthOfRunning, String name) {\n+        this.maxHeight = maxHeight;\n+        this.maxLengthOfRunning = maxLengthOfRunning;\n+        this.name = name;\n+    }\n+    @Override\n+    public int getMaxHeight() {\n+        return maxHeight;\n+    }\n+\n+    public void setMaxHeight(int maxHeight) {\n+        this.maxHeight = maxHeight;\n+    }\n+    @Override\n+    public int maxLengthOfRunning() {\n+        return maxLengthOfRunning;\n+    }\n+\n+    public void setMaxLengthOfRunning(int maxLengthOfRunning) {\n+        this.maxLengthOfRunning = maxLengthOfRunning;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+   public void jump(){\n+        System.out.println(\"Кот прыгнул!\");\n+    }\n+    @Override\n+      public void run(){\n+        System.out.println(\"Кот побежал!\");\n+\n+    }\n+    @Override\n+    public String toString() {\n+        return \"Кот по кличке \" + name;\n+    }\n+}"
  },
  {
    "sha": "de0bc3ea91ca1cb101150560e59b5a6eaa62ef91",
    "filename": "untitled/src/DayOfWeek.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/DayOfWeek.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/DayOfWeek.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/DayOfWeek.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,37 @@\n+public enum DayOfWeek {\n+    MONDAY(8,17), TUESDAY(8, 17),\n+    WEDNESDAY(8, 17), THURSDAY(8, 17),\n+    FRIDAY (8, 16), SATURDAY, SUNDAY;\n+\n+   private int beginDayHour;\n+    private int endDayHour;\n+\n+    DayOfWeek(int beginDayHour, int endDayHour) {// констуктор для рабочих дней\n+        this.beginDayHour = beginDayHour;\n+        this.endDayHour = endDayHour;\n+    }\n+\n+    DayOfWeek() {// констуктор для выходных\n+        this.beginDayHour = 0;\n+        this.endDayHour = 0;\n+    }\n+\n+    static int getTodayWorkingHours(DayOfWeek day) {\n+        int result = day.endDayHour - day.beginDayHour;\n+        return (result > 0) ? result : 0;\n+    }\n+\n+    static String getWorkingHours(DayOfWeek day) {\n+        if (getTodayWorkingHours(day) == 0) {// досрочное прекращение программы, если на выходе функции будет 0.\n+            return \"Сегодня выходной\";\n+        }\n+\n+        int result = 0;\n+        for (int i = day.ordinal(); i < DayOfWeek.values().length; i++) {//определяем порядок дня в ENUM, до тех пор пока меньше списка дня цикл будет продолжаться.\n+            result += DayOfWeek.getTodayWorkingHours(DayOfWeek.values()[i]);// Возвращает массив котов и тут же уточняет элемент этого массива, затем функция работает с этим элементом\n+        }\n+\n+        return \"До конца недели осталось проработать \" + result + \" часов\";\n+    }\n+}\n+"
  },
  {
    "sha": "efbe304cb3bc403c54b3b265d3a248c371dd6731",
    "filename": "untitled/src/DayOfWeekMain.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/DayOfWeekMain.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/DayOfWeekMain.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/DayOfWeekMain.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,6 @@\n+\n+public class DayOfWeekMain {\n+    public static void main(String[] args) {\n+        System.out.println(DayOfWeek.getWorkingHours(DayOfWeek.SATURDAY));\n+    }\n+}"
  },
  {
    "sha": "6802668b7aae0f74d55a05077da46a3be98a919d",
    "filename": "untitled/src/Homework3.java",
    "status": "removed",
    "additions": 0,
    "deletions": 95,
    "changes": 95,
    "blob_url": "https://github.com/LighterEugene/GB/blob/45a3b5108cc00e71c20415b4ded48a6eeeddf35f/untitled/src/Homework3.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/45a3b5108cc00e71c20415b4ded48a6eeeddf35f/untitled/src/Homework3.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/Homework3.java?ref=45a3b5108cc00e71c20415b4ded48a6eeeddf35f",
    "patch": "@@ -1,95 +0,0 @@\n-\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Random;\n-\n-public class Homework3 {\n-\n-    //1. Написать программу, которая загадывает случайное число от 0 до 9 и пользователю дается 3 попытки угадать\n-    // это число. При каждой попытке компьютер должен сообщить, больше ли указанное пользователем число, чем загаданное,\n-    // или меньше. После победы или проигрыша выводится\n-    // запрос – «Повторить игру еще раз? 1 да / 0 – нет»(1 – повторить, 0 – нет).\n-\n-\n-    public static void guessingNumberGame() throws IOException {\n-        System.out.println(\"Требуется угадать число от 0 до 9, у вас 3 попытки. Введите пожалуйста число:\");\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n-        Random rand = new Random();\n-        int guessedNumber = rand.nextInt(10);\n-        for (int i = 3; i > 0; i--) {\n-            byte answerOfPerson = Byte.parseByte(reader.readLine());\n-            if (answerOfPerson > guessedNumber) System.out.println(\" Введёное число больше загаданного, осталось \" + ( i - 1) + \" попробуйте ввести другое число\");\n-            else if (answerOfPerson < guessedNumber) System.out.println(\" Введёное число меньше загаданного, осталось \" + ( i - 1) + \" попыток, попробуйте ввести другое число\");\n-            else if (answerOfPerson == guessedNumber) {\n-                System.out.println(\"Поздравляю, Вы угадали!\");\n-                break;\n-            }\n-            if (i == 1 && answerOfPerson != guessedNumber) System.out.println(\"ой, а ввести уже ничего не получится, ваши попытки исчерпаны \\n к сожалению, вы не угадали...\");\n-        }\n-        System.out.println(\"Повторить игру еще раз? Введите 1 если хотите и 0 если нет\");\n-        byte answerOfPersonOfEndingOrContinuing = Byte.parseByte(reader.readLine());\n-        if (answerOfPersonOfEndingOrContinuing == 1) guessingNumberGame();\n-        else if (answerOfPersonOfEndingOrContinuing == 0) System.out.println(\"Игра окончена!\");\n-        reader.close();\n-    }\n-\n-    /*2  Создать массив из слов\n-String[] words = {\"apple\", \"orange\", \"lemon\", \"banana\", \"apricot\", \"avocado\", \"broccoli\", \"carrot\", \"cherry\", \"garlic\", \"grape\", \"melon\", \"leak\", \"kiwi\", \"mango\", \"mushroom\", \"nut\", \"olive\", \"pea\", \"peanut\", \"pear\", \"pepper\", \"pineapple\", \"pumpkin\", \"potato\"}.\n-        При запуске программы компьютер загадывает слово, запрашивает ответ у пользователя, сравнивает его с загаданным словом и сообщает, правильно ли ответил пользователь. Если слово не угадано, компьютер показывает буквы, которые стоят на своих местах.\n-apple – загаданное\n-apricot - ответ игрока\n-ap############# (15 символов, чтобы пользователь не мог узнать длину слова)\n-Для сравнения двух слов посимвольно можно пользоваться:\n-String str = \"apple\";\n-char a = str.charAt(0); - метод вернет char, который стоит в слове str на первой позиции\n-Играем до тех пор, пока игрок не отгадает слово.\n-Используем только маленькие буквы.\n-*/\n-    public static void guessingWordGame() throws IOException {\n-        Random rand = new Random();\n-        int plate = rand.nextInt(25);\n-        String[] words = new String[]{\"apple\", \"orange\", \"lemon\", \"banana\", \"apricot\", \"avocado\", \"broccoli\", \"carrot\", \"cherry\", \"garlic\", \"grape\", \"melon\", \"leak\", \"kiwi\", \"mango\", \"mushroom\", \"nut\", \"olive\", \"pea\", \"peanut\", \"pear\", \"pepper\", \"pineapple\", \"pumpkin\", \"potato\"};\n-        System.out.println(\"Компьютер загадал слово,попытайтесь отгадать, играем до тех пор, пока игрок не отгадает слово:\");\n-        String guessedWord = words[plate];\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n-        while(true){\n-            String answerOfPerson = reader.readLine().toLowerCase();\n-            int maxLength = answerOfPerson.length() < guessedWord.length() ? answerOfPerson.length() : guessedWord.length();\n-            if(answerOfPerson.equals(guessedWord)){\n-                System.out.println(\"Поздравляю, Вы угадали!\");\n-                break;\n-            }\n-            else if (!answerOfPerson.equals(guessedWord)){\n-                System.out.println(\"Попробуйте ещё раз, вы не угадали, сейчас будет выведена подсказка, какие буквы вами угаданы, # не означает что буква обязательно есть, она может как быть:\");\n-                String[] promptArray = new String[15];\n-                for (int i = 0; i < 15; i++)promptArray[i] = \"#\";\n-                for (int i = 0; i < maxLength;i++){\n-                    if (answerOfPerson.charAt(i) == guessedWord.charAt(i)){\n-                        promptArray[i] = Character.toString(guessedWord.charAt(i));\n-                    }\n-                    else if(answerOfPerson.charAt(i) != guessedWord.charAt(i)){\n-                        promptArray[i] =\"#\";\n-                    }\n-\n-                }\n-                ArrayList<String> list = new ArrayList<String>(Arrays.asList(promptArray));\n-                for (String partOfList: list)\n-                {\n-                    System.out.print(partOfList);\n-                }\n-                System.out.println();\n-            }\n-        }\n-    }\n-    //\n-    public static void main(String[] args) throws IOException{\n-        guessingWordGame();\n-\n-\n-\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "66125e6d8d9f50d9f1f8f4b582e1e09300cd262a",
    "filename": "untitled/src/Human.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Human.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Human.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/Human.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,53 @@\n+public class Human implements JumpableRunnable {\n+    private int maxHeight;\n+    private int maxLengthOfRunning;\n+    private String name;\n+\n+    public Human(int maxHeight, int maxLengthOfRunning, String name) {\n+        this.maxHeight = maxHeight;\n+        this.maxLengthOfRunning = maxLengthOfRunning;\n+        this.name = name;\n+    }\n+    @Override\n+    public int getMaxHeight() {\n+        return maxHeight;\n+    }\n+\n+    public void setMaxHeight(int maxHeight) {\n+        this.maxHeight = maxHeight;\n+    }\n+\n+    @Override\n+    public int maxLengthOfRunning() {\n+        return maxLengthOfRunning;\n+    }\n+\n+    public void setMaxLengthOfRunning(int maxLengthOfRunning) {\n+        this.maxLengthOfRunning = maxLengthOfRunning;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void jump() {\n+        System.out.println(\"Человек прыгнул!\");\n+    }\n+\n+\n+\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Человек побежал!\");\n+    }\n+    @Override\n+    public String toString() {\n+        return \"Человек по имени \" + name;\n+    }\n+}"
  },
  {
    "sha": "afde24794463f8fdc3671c584f35bfef493aab82",
    "filename": "untitled/src/JumpableRunnable.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/JumpableRunnable.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/JumpableRunnable.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/JumpableRunnable.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,7 @@\n+public interface JumpableRunnable {\n+    int getMaxHeight();\n+    void jump();\n+\n+    int maxLengthOfRunning();\n+    void run();\n+}"
  },
  {
    "sha": "593a81c10cb0e7789ab3c2f1e752e3abf5d0b09f",
    "filename": "untitled/src/MainClass.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/MainClass.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/MainClass.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/MainClass.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,32 @@\n+public class MainClass {\n+    public static void main(String[] args) {\n+     JumpableRunnable[] members = {new Robot(3,2,432),new Robot(8,8,505) };\n+\n+      Overcomable[] obstacles ={new RunningTrack(3),new RunningTrack(5),new Wall(4),new Wall(4)};\n+\n+        for ( JumpableRunnable member : members){\n+            boolean winner = true;\n+            System.out.println(\"К прохождению препятствий приступает \" + member);\n+\n+            for ( Overcomable obstacle : obstacles){\n+                System.out.println( member + \" пытается пройти препятствие \" + obstacle);\n+               if (obstacle.toJump(member.getMaxHeight()) || obstacle.toRun(member.maxLengthOfRunning())){\n+                   System.out.println(\"И у него получается!\");\n+               }\n+                else {\n+                    winner = false;\n+                    System.out.println(\"И у него не получается.\");\n+                    break;\n+\n+                }\n+            }\n+\n+            if(winner) {\n+                System.out.println(member + \" прошёл дистанцию!\");\n+            } else {\n+                System.out.println(member + \" проиграл.\");\n+            }\n+            System.out.println();\n+        }\n+    }\n+}"
  },
  {
    "sha": "697ce1563835d4708a1fc716d9a328cd4436fc25",
    "filename": "untitled/src/Overcomable.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Overcomable.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Overcomable.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/Overcomable.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,4 @@\n+public interface Overcomable {\n+    boolean toRun(int b);\n+    boolean toJump(int a);\n+}"
  },
  {
    "sha": "17399e03b2de24bf9b0bd695615deeaa94e0a267",
    "filename": "untitled/src/Robot.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Robot.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Robot.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/Robot.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,54 @@\n+public class Robot implements JumpableRunnable {\n+    private int maxHeight;\n+    private int maxLengthOfRunning;\n+    private int serialNumber;\n+\n+    public Robot(int maxHeight, int maxLength, int serialNumber) {\n+        this.maxHeight = maxHeight;\n+        this.maxLengthOfRunning = maxLength;\n+        this.serialNumber = serialNumber;\n+    }\n+\n+\n+\n+    @Override\n+    public void jump() {\n+        System.out.println(\"Робот прыгнул\");\n+    }\n+    @Override\n+    public void run() {\n+        System.out.println(\"Робот бежит\");\n+    }\n+\n+    public void setMaxHeight(int maxHeight) {\n+        this.maxHeight = maxHeight;\n+    }\n+\n+    public void setMaxLengthOfRunning(int maxLengthOfRunning) {\n+        this.maxLengthOfRunning = maxLengthOfRunning;\n+    }\n+\n+    public void setSerialNumber(int serialNumber) {\n+        this.serialNumber = serialNumber;\n+    }\n+\n+    public int getMaxHeight() {\n+        return maxHeight;\n+    }\n+\n+    @Override\n+    public int maxLengthOfRunning() {\n+        return maxLengthOfRunning;\n+    }\n+\n+    public int getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"Робот с серийным номером \" + serialNumber;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b482ebcaa08f0d557d07ef3299da496745903155",
    "filename": "untitled/src/Wall.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Wall.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/Wall.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/Wall.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,22 @@\n+public class Wall implements Overcomable {\n+    int height;\n+\n+    public Wall(int height) {\n+        this.height = height;\n+    }\n+\n+    @Override\n+    public boolean toRun(int anything) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean toJump(int maxHeight) {\n+        return maxHeight >= this.height;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Стена высотой \" + height + \" м\";\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8494fcdcdfaf01279ba63f42a51fb968253b2229",
    "filename": "untitled/src/runningTrack.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/LighterEugene/GB/blob/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/runningTrack.java",
    "raw_url": "https://github.com/LighterEugene/GB/raw/53698d279ba1876db4132a2f0c349ba12548137c/untitled/src/runningTrack.java",
    "contents_url": "https://api.github.com/repos/LighterEugene/GB/contents/untitled/src/runningTrack.java?ref=53698d279ba1876db4132a2f0c349ba12548137c",
    "patch": "@@ -0,0 +1,22 @@\n+ class RunningTrack implements Overcomable {\n+    int length;\n+\n+    public RunningTrack(int length) {\n+        this.length = length;\n+    }\n+\n+    @Override\n+    public boolean toRun(int maxLength) {\n+        return (maxLength >= length);\n+    }\n+\n+    @Override\n+    public boolean toJump(int maxHeight) {\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Беговая дорожка длиной \" + length + \" м\";\n+    }\n+}\n\\ No newline at end of file"
  }
]
