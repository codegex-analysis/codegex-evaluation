[
  {
    "sha": "4b7cfccc83d0f6a55a2c06882b651d2f579cfd9c",
    "filename": "src/main/java/de/uni_stuttgart/it_rex/media/web/rest/written/VideoResource.java",
    "status": "modified",
    "additions": 25,
    "deletions": 8,
    "changes": 33,
    "blob_url": "https://github.com/IT-REX-Platform/MediaService/blob/89fac2da91edfc6865fbfb8cdc6e2544404202c7/src/main/java/de/uni_stuttgart/it_rex/media/web/rest/written/VideoResource.java",
    "raw_url": "https://github.com/IT-REX-Platform/MediaService/raw/89fac2da91edfc6865fbfb8cdc6e2544404202c7/src/main/java/de/uni_stuttgart/it_rex/media/web/rest/written/VideoResource.java",
    "contents_url": "https://api.github.com/repos/IT-REX-Platform/MediaService/contents/src/main/java/de/uni_stuttgart/it_rex/media/web/rest/written/VideoResource.java?ref=89fac2da91edfc6865fbfb8cdc6e2544404202c7",
    "patch": "@@ -40,8 +40,10 @@\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.UUID;\n+import java.util.stream.Collectors;\n \n import static org.hibernate.id.IdentifierGenerator.ENTITY_NAME;\n \n@@ -157,15 +159,15 @@ public VideoResource(final VideoService vss,\n   }\n \n   /**\n-   * {@code GET  /videos} : get all the videos of a Course.\n+   * {@code GET  /videos/course/{courseId:.+}} : get all the videos of a Course.\n    *\n    * @param courseId Course ID.\n    * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the\n    * list of videos in body.\n    */\n-  @GetMapping(\"/videos\")\n+  @GetMapping(\"/videos/course/{courseId:.+}\")\n   public List<Video> findAllVideosOfACourse(\n-      @RequestParam(\"course_id\") final UUID courseId) {\n+      @PathVariable final UUID courseId) {\n     LOGGER.debug(\"REST request to get all Videos\");\n     return videoService.findAllVideosOfACourse(courseId);\n   }\n@@ -191,7 +193,7 @@ private ByteRangeDTO parseByteRange(final HttpHeaders headers,\n    * @param headers The request headers.\n    * @return A ResponseEntity to stream the file to the client.\n    */\n-  @GetMapping(\"/videos/{id:.+}\")\n+  @GetMapping(\"/videos/download/{id:.+}\")\n   public ResponseEntity<Resource> downloadVideo(\n     @PathVariable final UUID id,\n     @RequestHeader final HttpHeaders headers) {\n@@ -250,10 +252,25 @@ private ByteRangeDTO parseByteRange(final HttpHeaders headers,\n \n     final Video result = videoService.patch(video);\n     return ResponseEntity.ok()\n-      .headers(HeaderUtil\n-        .createEntityUpdateAlert(this.getApplicationName(),\n-          true, ENTITY_NAME, result.getId().toString()))\n-      .body(result);\n+        .headers(HeaderUtil\n+            .createEntityUpdateAlert(this.getApplicationName(),\n+                true, ENTITY_NAME, result.getId().toString()))\n+        .body(result);\n+  }\n+\n+  /**\n+   * {@code GET  /videos/} : get all the videos with ids.\n+   *\n+   * @param videoIds Video IDs as comma separated list.\n+   * @return the map of videos in the body.\n+   */\n+  @GetMapping(\"/videos\")\n+  public Map<UUID, Video> findAllWithIds(\n+      @RequestParam final List<UUID> videoIds) {\n+    LOGGER.info(\"REST request to get all videos with the ids: {}\", videoIds);\n+    final List<Video> videos = videoService.findAllWithIds(videoIds);\n+    return videos.stream().collect(\n+        Collectors.toMap(Video::getId, video -> video));\n   }\n \n   /**"
  },
  {
    "sha": "a978a45a119f866ccbbb26c07548bc031acdfe9a",
    "filename": "src/test/java/de/uni_stuttgart/it_rex/media/web/rest/written/VideoResourceTestIT.java",
    "status": "modified",
    "additions": 29,
    "deletions": 3,
    "changes": 32,
    "blob_url": "https://github.com/IT-REX-Platform/MediaService/blob/89fac2da91edfc6865fbfb8cdc6e2544404202c7/src/test/java/de/uni_stuttgart/it_rex/media/web/rest/written/VideoResourceTestIT.java",
    "raw_url": "https://github.com/IT-REX-Platform/MediaService/raw/89fac2da91edfc6865fbfb8cdc6e2544404202c7/src/test/java/de/uni_stuttgart/it_rex/media/web/rest/written/VideoResourceTestIT.java",
    "contents_url": "https://api.github.com/repos/IT-REX-Platform/MediaService/contents/src/test/java/de/uni_stuttgart/it_rex/media/web/rest/written/VideoResourceTestIT.java?ref=89fac2da91edfc6865fbfb8cdc6e2544404202c7",
    "patch": "@@ -7,6 +7,7 @@\n import de.uni_stuttgart.it_rex.media.repository.written.VideoRepository;\n import de.uni_stuttgart.it_rex.media.service.written.VideoService;\n import de.uni_stuttgart.it_rex.media.util.written.VideoUtil;\n+import org.hamcrest.collection.IsMapContaining;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestInstance;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -19,11 +20,16 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.context.WebApplicationContext;\n \n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.UUID;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n@@ -36,6 +42,9 @@\n \n   private static final UUID COURSE_ID = UUID.randomUUID();\n \n+  @Autowired\n+  private VideoResource videoResource;\n+\n   @Autowired\n   private VideoService videoService;\n \n@@ -79,9 +88,9 @@ void uploadDownloadAndDeleteFile() throws Exception {\n       .andReturn().getResponse().getContentAsString();\n \n     String id = JsonPath.read(result, \"$.id\");\n-    restCourseMockMvc.perform(get(\"/api/videos/\" + id)).andExpect(status().isPartialContent());\n+    restCourseMockMvc.perform(get(\"/api/videos/download/\" + id)).andExpect(status().isPartialContent());\n     restCourseMockMvc.perform(delete(\"/api/videos/\" + id)).andExpect(status().isNoContent());\n-    restCourseMockMvc.perform(get(\"/api/videos/\" + id)).andExpect(status().is4xxClientError());\n+    restCourseMockMvc.perform(get(\"/api/videos/download/\" + id)).andExpect(status().is4xxClientError());\n   }\n \n   @Test\n@@ -122,7 +131,7 @@ void uploadFileToWrongEndpoint() throws Exception {\n   @Test\n   void downloadNonExistingFile() throws Exception {\n     MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n-    mockMvc.perform(get(\"/api/videos/\" + UUID.randomUUID().toString())).andExpect(status().isNotFound());\n+    mockMvc.perform(get(\"/api/videos/download/\" + UUID.randomUUID().toString())).andExpect(status().isNotFound());\n   }\n \n   @Test\n@@ -134,4 +143,21 @@ void getByCourseId() throws Exception {\n     final List<Video> result = videoService.findAllVideosOfACourse(COURSE_ID);\n     assertTrue(result.containsAll(videos));\n   }\n+\n+  @Test\n+  void findAllWithIds() {\n+    List<Video> videos = VideoUtil.createVideos(3);\n+    videos.forEach(video -> video.setCourseId(COURSE_ID));\n+    videos = videoRepository.saveAll(videos);\n+    final List<UUID> ids = Arrays.asList(videos.get(0).getId(), videos.get(2).getId());\n+    final Map<UUID, Video> expected = new HashMap<>();\n+    expected.put(videos.get(0).getId(), videos.get(0));\n+    expected.put(videos.get(2).getId(), videos.get(2));\n+\n+    final Map<UUID, Video> result = videoResource.findAllWithIds(ids);\n+\n+    assertThat(result, IsMapContaining.hasEntry(videos.get(0).getId(), videos.get(0)));\n+    assertThat(result, IsMapContaining.hasEntry(videos.get(2).getId(), videos.get(2)));\n+    assertEquals(result.size(), expected.size());\n+  }\n }"
  }
]
