[
  {
    "sha": "54d29ddfc07c87e7bfa57d39bc71326ee9b8ad7c",
    "filename": "src/main/java/com/powsybl/openloadflow/ac/equations/AcEquationSystem.java",
    "status": "modified",
    "additions": 40,
    "deletions": 4,
    "changes": 44,
    "blob_url": "https://github.com/powsybl/powsybl-open-loadflow/blob/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/AcEquationSystem.java",
    "raw_url": "https://github.com/powsybl/powsybl-open-loadflow/raw/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/AcEquationSystem.java",
    "contents_url": "https://api.github.com/repos/powsybl/powsybl-open-loadflow/contents/src/main/java/com/powsybl/openloadflow/ac/equations/AcEquationSystem.java?ref=9706765cd7825501f641b4850b4a363ac1c23787",
    "patch": "@@ -262,8 +262,12 @@ private static void createImpedantBranch(LfBranch branch, LfBus bus1, LfBus bus2\n                                              EquationSystem equationSystem) {\n         EquationTerm p1 = null;\n         EquationTerm q1 = null;\n+        EquationTerm reI1 = null;\n+        EquationTerm imI1 = null;\n         EquationTerm p2 = null;\n         EquationTerm q2 = null;\n+        EquationTerm reI2 = null;\n+        EquationTerm imI2 = null;\n         EquationTerm i1 = null;\n         EquationTerm i2 = null;\n         boolean deriveA1 = creationParameters.isPhaseControl() && branch.isPhaseController()\n@@ -276,6 +280,14 @@ private static void createImpedantBranch(LfBranch branch, LfBus bus1, LfBus bus2\n             q1 = new ClosedBranchSide1ReactiveFlowEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n             p2 = new ClosedBranchSide2ActiveFlowEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n             q2 = new ClosedBranchSide2ReactiveFlowEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+            if (!bus1.isVoltageControlled() && bus1.getTargetP() == 0 && bus1.getTargetQ() == 0) {\n+                reI1 = new ClosedBranchSide1CurrentRealEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+                imI1 = new ClosedBranchSide1CurrentImgEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+            }\n+            if (!bus2.isVoltageControlled() && bus2.getTargetP() == 0 && bus2.getTargetQ() == 0) {\n+                reI2 = new ClosedBranchSide2CurrentRealEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+                imI2 = new ClosedBranchSide2CurrentImgEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+            }\n             if (createCurrent) {\n                 i1 = new ClosedBranchSide1CurrentMagnitudeEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n                 i2 = new ClosedBranchSide2CurrentMagnitudeEquationTerm(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n@@ -294,26 +306,50 @@ private static void createImpedantBranch(LfBranch branch, LfBus bus1, LfBus bus2\n             }\n         }\n \n+        if (reI1 != null) {\n+            equationSystem.createEquation(bus1.getNum(), EquationType.BUS_RE_I_ZERO).addTerm(reI1);\n+        }\n         if (p1 != null) {\n-            equationSystem.createEquation(bus1.getNum(), EquationType.BUS_P).addTerm(p1);\n+            Equation p = equationSystem.createEquation(bus1.getNum(), EquationType.BUS_P).addTerm(p1);\n+            if (reI1 != null) {\n+                p.setActive(false);\n+            }\n             branch.setP1(p1);\n             if (creationParameters.isPhaseControl()) {\n                 createBranchActivePowerTargetEquation(branch, DiscretePhaseControl.ControlledSide.ONE, equationSystem, p1);\n             }\n         }\n+        if (imI1 != null) {\n+            equationSystem.createEquation(bus1.getNum(), EquationType.BUS_IMG_I_ZERO).addTerm(imI1);\n+        }\n         if (q1 != null) {\n-            equationSystem.createEquation(bus1.getNum(), EquationType.BUS_Q).addTerm(q1);\n+            Equation q = equationSystem.createEquation(bus1.getNum(), EquationType.BUS_Q).addTerm(q1);\n+            if (imI1 != null) {\n+                q.setActive(false);\n+            }\n             branch.setQ1(q1);\n         }\n+        if (reI2 != null) {\n+            equationSystem.createEquation(bus2.getNum(), EquationType.BUS_RE_I_ZERO).addTerm(reI2);\n+        }\n         if (p2 != null) {\n-            equationSystem.createEquation(bus2.getNum(), EquationType.BUS_P).addTerm(p2);\n+            Equation p = equationSystem.createEquation(bus2.getNum(), EquationType.BUS_P).addTerm(p2);\n+            if (reI2 != null) {\n+                p.setActive(false);\n+            }\n             branch.setP2(p2);\n             if (creationParameters.isPhaseControl()) {\n                 createBranchActivePowerTargetEquation(branch, DiscretePhaseControl.ControlledSide.TWO, equationSystem, p2);\n             }\n         }\n+        if (imI2 != null) {\n+            equationSystem.createEquation(bus2.getNum(), EquationType.BUS_IMG_I_ZERO).addTerm(imI2);\n+        }\n         if (q2 != null) {\n-            equationSystem.createEquation(bus2.getNum(), EquationType.BUS_Q).addTerm(q2);\n+            Equation q = equationSystem.createEquation(bus2.getNum(), EquationType.BUS_Q).addTerm(q2);\n+            if (imI2 != null) {\n+                q.setActive(false);\n+            }\n             branch.setQ2(q2);\n         }\n "
  },
  {
    "sha": "9a540dee189546170f9b0e09867d7683ec5ffc3d",
    "filename": "src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide1CurrentImgEquationTerm.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/powsybl/powsybl-open-loadflow/blob/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide1CurrentImgEquationTerm.java",
    "raw_url": "https://github.com/powsybl/powsybl-open-loadflow/raw/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide1CurrentImgEquationTerm.java",
    "contents_url": "https://api.github.com/repos/powsybl/powsybl-open-loadflow/contents/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide1CurrentImgEquationTerm.java?ref=9706765cd7825501f641b4850b4a363ac1c23787",
    "patch": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.openloadflow.ac.equations;\n+\n+import com.powsybl.openloadflow.equations.Variable;\n+import com.powsybl.openloadflow.equations.VariableSet;\n+import com.powsybl.openloadflow.network.LfBranch;\n+import com.powsybl.openloadflow.network.LfBus;\n+import net.jafama.FastMath;\n+\n+import java.util.Objects;\n+\n+import static com.powsybl.openloadflow.network.PiModel.A2;\n+import static com.powsybl.openloadflow.network.PiModel.R2;\n+\n+/**\n+ * @author Gael Macherel <gael.macherel at artelys.com>\n+ */\n+public class ClosedBranchSide1CurrentImgEquationTerm extends AbstractClosedBranchAcFlowEquationTerm {\n+\n+    private double imI1;\n+\n+    private double dimI1dv1;\n+\n+    private double dimI1dv2;\n+\n+    private double dimI1dph1;\n+\n+    private double dimI1dph2;\n+\n+    private double dimI1da1;\n+\n+    public ClosedBranchSide1CurrentImgEquationTerm(LfBranch branch, LfBus bus1, LfBus bus2, VariableSet variableSet,\n+                                                   boolean deriveA1, boolean deriveR1) {\n+        super(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+    }\n+\n+    @Override\n+    protected double calculateDer(double dph1, double dph2, double dv1, double dv2, double a1, double r1) {\n+        return dimI1dph1 * dph1 + dimI1dph2 * dph2 + dimI1dv1 * dv1 + dimI1dv2 * dv2;\n+    }\n+\n+    @Override\n+    public void update(double[] x) {\n+        Objects.requireNonNull(x);\n+        double v1 = x[v1Var.getRow()];\n+        double v2 = x[v2Var.getRow()];\n+        double ph1 = x[ph1Var.getRow()];\n+        double ph2 = x[ph2Var.getRow()];\n+        double r1 = r1Var != null && r1Var.isActive() ? x[r1Var.getRow()] : branch.getPiModel().getR1();\n+        double w1 = r1 * v1;\n+        double w2 = y * R2 * v2;\n+        double cosPh1 = FastMath.cos(ph1);\n+        double sinPh1 = FastMath.sin(ph1);\n+        double cosPh1Ksi = FastMath.cos(ph1 + ksi);\n+        double sinPh1Ksi = FastMath.sin(ph1 + ksi);\n+        double theta = ksi - (a1Var != null && a1Var.isActive() ? x[a1Var.getRow()] : branch.getPiModel().getA1())\n+            + A2 + ph2;\n+        double sinTheta = FastMath.sin(theta);\n+        double cosTheta = FastMath.cos(theta);\n+\n+        imI1 = r1 * (w1 * (g1 * sinPh1 + b1 * cosPh1 - y * cosPh1Ksi) + w2 * cosTheta) * CURRENT_NORMALIZATION_FACTOR;\n+\n+        dimI1dv1 = r1 * r1 * (g1 * sinPh1 + b1 * cosPh1 - y * cosPh1Ksi) * CURRENT_NORMALIZATION_FACTOR;\n+        dimI1dv2 = r1 * (y * R2 * cosTheta) * CURRENT_NORMALIZATION_FACTOR;\n+        dimI1dph1 = r1 * w1 * (g1 * cosPh1 - b1 * sinPh1 + y * sinPh1Ksi) * CURRENT_NORMALIZATION_FACTOR;\n+        dimI1dph2 = r1 * (-w2 * sinTheta) * CURRENT_NORMALIZATION_FACTOR;\n+\n+        if (a1Var != null) {\n+            dimI1da1 = -dimI1dph2;\n+        }\n+    }\n+\n+    @Override\n+    public double eval() {\n+        return imI1;\n+    }\n+\n+    @Override\n+    public double der(Variable variable) {\n+        Objects.requireNonNull(variable);\n+        if (variable.equals(v1Var)) {\n+            return dimI1dv1;\n+        } else if (variable.equals(v2Var)) {\n+            return dimI1dv2;\n+        } else if (variable.equals(ph1Var)) {\n+            return dimI1dph1;\n+        } else if (variable.equals(ph2Var)) {\n+            return dimI1dph2;\n+        } else if (variable.equals(a1Var)) {\n+            return dimI1da1;\n+        } else {\n+            throw new IllegalStateException(\"Unknown variable: \" + variable);\n+        }\n+    }\n+\n+    @Override\n+    protected String getName() {\n+        return \"ac_img_i_closed_1\";\n+    }\n+}"
  },
  {
    "sha": "9c09e0be80bcbf1660fedb4bb7acc4b5c58e4169",
    "filename": "src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide1CurrentRealEquationTerm.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/powsybl/powsybl-open-loadflow/blob/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide1CurrentRealEquationTerm.java",
    "raw_url": "https://github.com/powsybl/powsybl-open-loadflow/raw/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide1CurrentRealEquationTerm.java",
    "contents_url": "https://api.github.com/repos/powsybl/powsybl-open-loadflow/contents/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide1CurrentRealEquationTerm.java?ref=9706765cd7825501f641b4850b4a363ac1c23787",
    "patch": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.openloadflow.ac.equations;\n+\n+import com.powsybl.openloadflow.equations.Variable;\n+import com.powsybl.openloadflow.equations.VariableSet;\n+import com.powsybl.openloadflow.network.LfBranch;\n+import com.powsybl.openloadflow.network.LfBus;\n+import net.jafama.FastMath;\n+\n+import java.util.Objects;\n+\n+import static com.powsybl.openloadflow.network.PiModel.A2;\n+import static com.powsybl.openloadflow.network.PiModel.R2;\n+\n+/**\n+ * @author Gael Macherel <gael.macherel at artelys.com>\n+ */\n+public class ClosedBranchSide1CurrentRealEquationTerm extends AbstractClosedBranchAcFlowEquationTerm {\n+\n+    private double reI1;\n+\n+    private double dreI1dv1;\n+\n+    private double dreI1dv2;\n+\n+    private double dreI1dph1;\n+\n+    private double dreI1dph2;\n+\n+    private double dreI1da1;\n+\n+    public ClosedBranchSide1CurrentRealEquationTerm(LfBranch branch, LfBus bus1, LfBus bus2, VariableSet variableSet,\n+                                                    boolean deriveA1, boolean deriveR1) {\n+        super(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+    }\n+\n+    @Override\n+    protected double calculateDer(double dph1, double dph2, double dv1, double dv2, double a1, double r1) {\n+        return dreI1dph1 * dph1 + dreI1dph2 * dph2 + dreI1dv1 * dv1 + dreI1dv2 * dv2;\n+    }\n+\n+    @Override\n+    public void update(double[] x) {\n+        Objects.requireNonNull(x);\n+        double v1 = x[v1Var.getRow()];\n+        double v2 = x[v2Var.getRow()];\n+        double ph1 = x[ph1Var.getRow()];\n+        double ph2 = x[ph2Var.getRow()];\n+        double r1 = r1Var != null && r1Var.isActive() ? x[r1Var.getRow()] : branch.getPiModel().getR1();\n+        double w1 = r1 * v1;\n+        double w2 = y * R2 * v2;\n+        double cosPh1 = FastMath.cos(ph1);\n+        double sinPh1 = FastMath.sin(ph1);\n+        double cosPh1Ksi = FastMath.cos(ph1 + ksi);\n+        double sinPh1Ksi = FastMath.sin(ph1 + ksi);\n+        double theta = ksi - (a1Var != null && a1Var.isActive() ? x[a1Var.getRow()] : branch.getPiModel().getA1())\n+            + A2 + ph2;\n+        double sinTheta = FastMath.sin(theta);\n+        double cosTheta = FastMath.cos(theta);\n+\n+        reI1 = r1 * (w1 * (g1 * cosPh1 - b1 * sinPh1 + y * sinPh1Ksi) - w2 * sinTheta) * CURRENT_NORMALIZATION_FACTOR;\n+\n+        dreI1dv1 = r1 * r1 * (g1 * cosPh1 - b1 * sinPh1 + y * sinPh1Ksi) * CURRENT_NORMALIZATION_FACTOR;\n+        dreI1dv2 = r1 * (-y * R2 * sinTheta) * CURRENT_NORMALIZATION_FACTOR;\n+        dreI1dph1 = r1 * w1 * (-g1 * sinPh1 - b1 * cosPh1 + y * cosPh1Ksi) * CURRENT_NORMALIZATION_FACTOR;\n+        dreI1dph2 = r1 * (-w2 * cosTheta) * CURRENT_NORMALIZATION_FACTOR;\n+\n+        if (a1Var != null) {\n+            dreI1da1 = -dreI1dph2;\n+        }\n+    }\n+\n+    @Override\n+    public double eval() {\n+        return reI1;\n+    }\n+\n+    @Override\n+    public double der(Variable variable) {\n+        Objects.requireNonNull(variable);\n+        if (variable.equals(v1Var)) {\n+            return dreI1dv1;\n+        } else if (variable.equals(v2Var)) {\n+            return dreI1dv2;\n+        } else if (variable.equals(ph1Var)) {\n+            return dreI1dph1;\n+        } else if (variable.equals(ph2Var)) {\n+            return dreI1dph2;\n+        } else if (variable.equals(a1Var)) {\n+            return dreI1da1;\n+        } else {\n+            throw new IllegalStateException(\"Unknown variable: \" + variable);\n+        }\n+    }\n+\n+    @Override\n+    protected String getName() {\n+        return \"ac_re_i_closed_1\";\n+    }\n+}"
  },
  {
    "sha": "80659b4ed4e7fdd269685c0e3b9c91d891cce90a",
    "filename": "src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide2CurrentImgEquationTerm.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/powsybl/powsybl-open-loadflow/blob/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide2CurrentImgEquationTerm.java",
    "raw_url": "https://github.com/powsybl/powsybl-open-loadflow/raw/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide2CurrentImgEquationTerm.java",
    "contents_url": "https://api.github.com/repos/powsybl/powsybl-open-loadflow/contents/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide2CurrentImgEquationTerm.java?ref=9706765cd7825501f641b4850b4a363ac1c23787",
    "patch": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.openloadflow.ac.equations;\n+\n+import com.powsybl.openloadflow.equations.Variable;\n+import com.powsybl.openloadflow.equations.VariableSet;\n+import com.powsybl.openloadflow.network.LfBranch;\n+import com.powsybl.openloadflow.network.LfBus;\n+import net.jafama.FastMath;\n+\n+import java.util.Objects;\n+\n+import static com.powsybl.openloadflow.network.PiModel.A2;\n+import static com.powsybl.openloadflow.network.PiModel.R2;\n+\n+/**\n+ * @author Gael Macherel <gael.macherel at artelys.com>\n+ */\n+public class ClosedBranchSide2CurrentImgEquationTerm extends AbstractClosedBranchAcFlowEquationTerm {\n+\n+    private double imI2;\n+\n+    private double dimI2dv2;\n+\n+    private double dimI2dv1;\n+\n+    private double dimI2dph2;\n+\n+    private double dimI2dph1;\n+\n+    private double dimI2da1;\n+\n+    public ClosedBranchSide2CurrentImgEquationTerm(LfBranch branch, LfBus bus1, LfBus bus2, VariableSet variableSet,\n+                                                   boolean deriveA1, boolean deriveR1) {\n+        super(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+    }\n+\n+    @Override\n+    protected double calculateDer(double dph1, double dph2, double dv1, double dv2, double a1, double r1) {\n+        return dimI2dph1 * dph1 + dimI2dph2 * dph2 + dimI2dv1 * dv1 + dimI2dv2 * dv2;\n+    }\n+\n+    @Override\n+    public void update(double[] x) {\n+        Objects.requireNonNull(x);\n+        double v2 = x[v2Var.getRow()];\n+        double v1 = x[v1Var.getRow()];\n+        double ph2 = x[ph2Var.getRow()];\n+        double ph1 = x[ph1Var.getRow()];\n+        double r1 = r1Var != null && r1Var.isActive() ? x[r1Var.getRow()] : branch.getPiModel().getR1();\n+        double w2 = R2 * v2;\n+        double w1 = y * r1 * v1;\n+        double cosPh2 = FastMath.cos(ph2);\n+        double sinPh2 = FastMath.sin(ph2);\n+        double cosPh2Ksi = FastMath.cos(ph2 + ksi);\n+        double sinPh2Ksi = FastMath.sin(ph2 + ksi);\n+        double theta = ksi - (a1Var != null && a1Var.isActive() ? x[a1Var.getRow()] : branch.getPiModel().getA1())\n+            + A2 + ph1;\n+        double sinTheta = FastMath.sin(theta);\n+        double cosTheta = FastMath.cos(theta);\n+\n+        imI2 = R2 * (w2 * (g2 * sinPh2 + b2 * cosPh2 - y * cosPh2Ksi) + w1 * cosTheta) * CURRENT_NORMALIZATION_FACTOR;\n+\n+        dimI2dv2 = R2 * R2 * (g2 * sinPh2 + b2 * cosPh2 - y * cosPh2Ksi) * CURRENT_NORMALIZATION_FACTOR;\n+        dimI2dv1 = R2 * (y * r1 * cosTheta) * CURRENT_NORMALIZATION_FACTOR;\n+        dimI2dph2 = R2 * w2 * (g2 * cosPh2 - b2 * sinPh2 + y * sinPh2Ksi) * CURRENT_NORMALIZATION_FACTOR;\n+        dimI2dph1 = R2 * (-w1 * sinTheta) * CURRENT_NORMALIZATION_FACTOR;\n+\n+        if (a1Var != null) {\n+            dimI2da1 = -dimI2dph1;\n+        }\n+    }\n+\n+    @Override\n+    public double eval() {\n+        return imI2;\n+    }\n+\n+    @Override\n+    public double der(Variable variable) {\n+        Objects.requireNonNull(variable);\n+        if (variable.equals(v1Var)) {\n+            return dimI2dv1;\n+        } else if (variable.equals(v2Var)) {\n+            return dimI2dv2;\n+        } else if (variable.equals(ph1Var)) {\n+            return dimI2dph1;\n+        } else if (variable.equals(ph2Var)) {\n+            return dimI2dph2;\n+        } else if (variable.equals(a1Var)) {\n+            return dimI2da1;\n+        } else {\n+            throw new IllegalStateException(\"Unknown variable: \" + variable);\n+        }\n+    }\n+\n+    @Override\n+    protected String getName() {\n+        return \"ac_img_i_closed_2\";\n+    }\n+}"
  },
  {
    "sha": "d1e39eb15ba01a84f1a80daa8cd196bcd166b4b8",
    "filename": "src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide2CurrentRealEquationTerm.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/powsybl/powsybl-open-loadflow/blob/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide2CurrentRealEquationTerm.java",
    "raw_url": "https://github.com/powsybl/powsybl-open-loadflow/raw/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide2CurrentRealEquationTerm.java",
    "contents_url": "https://api.github.com/repos/powsybl/powsybl-open-loadflow/contents/src/main/java/com/powsybl/openloadflow/ac/equations/ClosedBranchSide2CurrentRealEquationTerm.java?ref=9706765cd7825501f641b4850b4a363ac1c23787",
    "patch": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.openloadflow.ac.equations;\n+\n+import com.powsybl.openloadflow.equations.Variable;\n+import com.powsybl.openloadflow.equations.VariableSet;\n+import com.powsybl.openloadflow.network.LfBranch;\n+import com.powsybl.openloadflow.network.LfBus;\n+import net.jafama.FastMath;\n+\n+import java.util.Objects;\n+\n+import static com.powsybl.openloadflow.network.PiModel.A2;\n+import static com.powsybl.openloadflow.network.PiModel.R2;\n+\n+/**\n+ * @author Gael Macherel <gael.macherel at artelys.com>\n+ */\n+public class ClosedBranchSide2CurrentRealEquationTerm extends AbstractClosedBranchAcFlowEquationTerm {\n+\n+    private double reI2;\n+\n+    private double dreI2dv2;\n+\n+    private double dreI2dv1;\n+\n+    private double dreI2dph2;\n+\n+    private double dreI2dph1;\n+\n+    private double dreI2da1;\n+\n+    public ClosedBranchSide2CurrentRealEquationTerm(LfBranch branch, LfBus bus1, LfBus bus2, VariableSet variableSet,\n+                                                    boolean deriveA1, boolean deriveR1) {\n+        super(branch, bus1, bus2, variableSet, deriveA1, deriveR1);\n+    }\n+\n+    @Override\n+    protected double calculateDer(double dph1, double dph2, double dv1, double dv2, double a1, double r1) {\n+        return dreI2dph1 * dph1 + dreI2dph2 * dph2 + dreI2dv1 * dv1 + dreI2dv2 * dv2;\n+    }\n+\n+    @Override\n+    public void update(double[] x) {\n+        Objects.requireNonNull(x);\n+        double v2 = x[v2Var.getRow()];\n+        double v1 = x[v1Var.getRow()];\n+        double ph2 = x[ph2Var.getRow()];\n+        double ph1 = x[ph1Var.getRow()];\n+        double r1 = r1Var != null && r1Var.isActive() ? x[r1Var.getRow()] : branch.getPiModel().getR1();\n+        double w2 = R2 * v2;\n+        double w1 = y * r1 * v1;\n+        double cosPh2 = FastMath.cos(ph2);\n+        double sinPh2 = FastMath.sin(ph2);\n+        double cosPh2Ksi = FastMath.cos(ph2 + ksi);\n+        double sinPh2Ksi = FastMath.sin(ph2 + ksi);\n+        double theta = ksi - (a1Var != null && a1Var.isActive() ? x[a1Var.getRow()] : branch.getPiModel().getA1())\n+            + A2 + ph1;\n+        double sinTheta = FastMath.sin(theta);\n+        double cosTheta = FastMath.cos(theta);\n+\n+        reI2 = R2 * (w2 * (g2 * cosPh2 - b2 * sinPh2 + y * sinPh2Ksi) - w1 * sinTheta) * CURRENT_NORMALIZATION_FACTOR;\n+\n+        dreI2dv2 = R2 * R2 * (g2 * cosPh2 - b2 * sinPh2 + y * sinPh2Ksi) * CURRENT_NORMALIZATION_FACTOR;\n+        dreI2dv1 = R2 * (-y * r1 * sinTheta) * CURRENT_NORMALIZATION_FACTOR;\n+        dreI2dph2 = R2 * w2 * (-g2 * sinPh2 - b2 * cosPh2 + y * cosPh2Ksi) * CURRENT_NORMALIZATION_FACTOR;\n+        dreI2dph1 = R2 * (-w1 * cosTheta) * CURRENT_NORMALIZATION_FACTOR;\n+\n+        if (a1Var != null) {\n+            dreI2da1 = -dreI2dph1;\n+        }\n+    }\n+\n+    @Override\n+    public double eval() {\n+        return reI2;\n+    }\n+\n+    @Override\n+    public double der(Variable variable) {\n+        Objects.requireNonNull(variable);\n+        if (variable.equals(v1Var)) {\n+            return dreI2dv1;\n+        } else if (variable.equals(v2Var)) {\n+            return dreI2dv2;\n+        } else if (variable.equals(ph1Var)) {\n+            return dreI2dph1;\n+        } else if (variable.equals(ph2Var)) {\n+            return dreI2dph2;\n+        } else if (variable.equals(a1Var)) {\n+            return dreI2da1;\n+        } else {\n+            throw new IllegalStateException(\"Unknown variable: \" + variable);\n+        }\n+    }\n+\n+    @Override\n+    protected String getName() {\n+        return \"ac_re_i_closed_2\";\n+    }\n+}"
  },
  {
    "sha": "490b50627e0281c74682707810909f27e87a261b",
    "filename": "src/main/java/com/powsybl/openloadflow/equations/Equation.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/powsybl/powsybl-open-loadflow/blob/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/equations/Equation.java",
    "raw_url": "https://github.com/powsybl/powsybl-open-loadflow/raw/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/equations/Equation.java",
    "contents_url": "https://api.github.com/repos/powsybl/powsybl-open-loadflow/contents/src/main/java/com/powsybl/openloadflow/equations/Equation.java?ref=9706765cd7825501f641b4850b4a363ac1c23787",
    "patch": "@@ -217,6 +217,11 @@ void initTarget(LfNetwork network, double[] targets) {\n                 targets[column] = getRho1DistributionTarget(network, num, getData());\n                 break;\n \n+            case BUS_RE_I_ZERO:\n+            case BUS_IMG_I_ZERO:\n+                targets[column] = 0;\n+                break;\n+\n             default:\n                 throw new IllegalStateException(\"Unknown state variable type: \"  + type);\n         }"
  },
  {
    "sha": "f473c5dbd27fe616cb35e605e7e37be3a6e9d826",
    "filename": "src/main/java/com/powsybl/openloadflow/equations/EquationType.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/powsybl/powsybl-open-loadflow/blob/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/equations/EquationType.java",
    "raw_url": "https://github.com/powsybl/powsybl-open-loadflow/raw/9706765cd7825501f641b4850b4a363ac1c23787/src/main/java/com/powsybl/openloadflow/equations/EquationType.java",
    "contents_url": "https://api.github.com/repos/powsybl/powsybl-open-loadflow/contents/src/main/java/com/powsybl/openloadflow/equations/EquationType.java?ref=9706765cd7825501f641b4850b4a363ac1c23787",
    "patch": "@@ -10,6 +10,8 @@\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n public enum EquationType {\n+    BUS_RE_I_ZERO(\"re_i_zero\", SubjectType.BUS),\n+    BUS_IMG_I_ZERO(\"img_i_zero\", SubjectType.BUS),\n     BUS_P(\"p\", SubjectType.BUS),\n     BUS_I(\"b_i\", SubjectType.BUS),\n     BUS_Q(\"q\", SubjectType.BUS),"
  }
]
