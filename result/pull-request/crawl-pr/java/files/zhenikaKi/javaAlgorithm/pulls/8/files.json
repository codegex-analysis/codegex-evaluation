[
  {
    "sha": "c900c5c5b534b84ea79a0aa1aadb93c64856ddde",
    "filename": "src/main/java/ru/kirea/lesson8/HashTable.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/zhenikaKi/javaAlgorithm/blob/55b3c10305855edef4a0979758b432a96bd710f3/src/main/java/ru/kirea/lesson8/HashTable.java",
    "raw_url": "https://github.com/zhenikaKi/javaAlgorithm/raw/55b3c10305855edef4a0979758b432a96bd710f3/src/main/java/ru/kirea/lesson8/HashTable.java",
    "contents_url": "https://api.github.com/repos/zhenikaKi/javaAlgorithm/contents/src/main/java/ru/kirea/lesson8/HashTable.java?ref=55b3c10305855edef4a0979758b432a96bd710f3",
    "patch": "@@ -0,0 +1,107 @@\n+package ru.kirea.lesson8;\n+\n+public class HashTable {\n+    private HashTableItem[] hashArr;\n+    private int arrSize;\n+    private HashTableItem nonItem;\n+\n+    private int tableSize;\n+    private int hashCoefficient;\n+\n+    public HashTable(int arrSize) {\n+        this.arrSize = arrSize;\n+        hashArr = new HashTableItem[arrSize];\n+        nonItem = new HashTableItem(-1);\n+\n+        tableSize = getPrime(arrSize);\n+        hashCoefficient = tableSize % 10;\n+    }\n+\n+    //вывести ключи\n+    public String displayValues() {\n+        StringBuilder result = new StringBuilder();\n+        for (int ind = 0; ind < arrSize; ind++) {\n+            result.append(hashArr[ind] == null ? \"null\" : hashArr[ind].getKey()).append(\" \");\n+        }\n+        return result.toString();\n+    }\n+\n+    private int hashFunc(int key) {\n+        return key % arrSize;\n+    }\n+\n+    private int hashFuncDouble(int key) {\n+        return hashCoefficient - key % hashCoefficient;\n+    }\n+\n+    //добавление значения\n+    public void insert(HashTableItem item, boolean asDouble) {\n+\n+        int key = item.getKey();\n+        int hash = hashFunc(key);\n+        int step = hashFuncDouble(key);\n+        while (hashArr[hash] != null && hashArr[hash].getKey() != -1) {\n+            if (asDouble) {\n+                hash += step;\n+            } else {\n+                ++hash;\n+            }\n+            hash %= arrSize;\n+        }\n+        hashArr[hash] = item;\n+    }\n+\n+    //поиск нужного элемента\n+    public HashTableItem find(int key, boolean asDouble) {\n+        int hash = findHash(key, asDouble);\n+        return hash < 0 ? null : hashArr[hash];\n+    }\n+\n+    //поиск позицииэлемента\n+    public int findHash(int key, boolean asDouble) {\n+        int hash = hashFunc(key);\n+        int step = hashFuncDouble(key);\n+        while (hashArr[hash] != null) {\n+            if (hashArr[hash].getKey() == key) {\n+                return hash;\n+            }\n+            if (asDouble) {\n+                hash += step;\n+            } else {\n+                ++hash;\n+            }\n+            hash %= arrSize;\n+\n+        }\n+        return -1;\n+    }\n+\n+    //удаление значения\n+    public HashTableItem delete(int key, boolean asDouble) {\n+        int hash = findHash(key, asDouble);\n+        if (hash != -1) {\n+            HashTableItem deletedItem = hashArr[hash];\n+            hashArr[hash] = nonItem;\n+            return deletedItem;\n+        }\n+        return null; //не нашли элемент для удаления\n+    }\n+\n+    //увеличение таблицы\n+    private int getPrime(int min) {\n+        for (int ind = min+1; true; ind++) {\n+            if (isPrime(ind)) {\n+                return ind;\n+            }\n+        }\n+    }\n+\n+    private boolean isPrime(int ind) {\n+        for (int ind2 = 2; (ind2*ind2 <= ind); ind2++) {\n+            if (ind % ind2 == 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}"
  },
  {
    "sha": "d1e52c0123a689fbf933f73d3f495084fa2c1206",
    "filename": "src/main/java/ru/kirea/lesson8/HashTableItem.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/zhenikaKi/javaAlgorithm/blob/55b3c10305855edef4a0979758b432a96bd710f3/src/main/java/ru/kirea/lesson8/HashTableItem.java",
    "raw_url": "https://github.com/zhenikaKi/javaAlgorithm/raw/55b3c10305855edef4a0979758b432a96bd710f3/src/main/java/ru/kirea/lesson8/HashTableItem.java",
    "contents_url": "https://api.github.com/repos/zhenikaKi/javaAlgorithm/contents/src/main/java/ru/kirea/lesson8/HashTableItem.java?ref=55b3c10305855edef4a0979758b432a96bd710f3",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.kirea.lesson8;\n+\n+public class HashTableItem {\n+    private int key;\n+\n+    public HashTableItem(int key) {\n+        this.key = key;\n+    }\n+\n+    public int getKey() {\n+        return key;\n+    }\n+}"
  },
  {
    "sha": "38b1b07422b2f4c3272224c5d2ad5323ea069f83",
    "filename": "src/main/java/ru/kirea/lesson8/Main8.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/zhenikaKi/javaAlgorithm/blob/55b3c10305855edef4a0979758b432a96bd710f3/src/main/java/ru/kirea/lesson8/Main8.java",
    "raw_url": "https://github.com/zhenikaKi/javaAlgorithm/raw/55b3c10305855edef4a0979758b432a96bd710f3/src/main/java/ru/kirea/lesson8/Main8.java",
    "contents_url": "https://api.github.com/repos/zhenikaKi/javaAlgorithm/contents/src/main/java/ru/kirea/lesson8/Main8.java?ref=55b3c10305855edef4a0979758b432a96bd710f3",
    "patch": "@@ -0,0 +1,57 @@\n+package ru.kirea.lesson8;\n+/*\n+Задание 8.1\n+Приведите пример использование хеш-таблиц.\n+Задание 8.2\n+Приведите примеры ключей и коллизий.\n+Задание 8.3\n+Приведите примеры популярных и эффективных хеш-функций.\n+Задание 8.4\n+На основе данных массива из задания 2.3 реализуйте хеш-таблицу с помощью открытой адресации, а конкретнее метода линейного пробирования\n+Задание 8.5\n+Перестройте программный код задания 8.4 из алгоритма линейного пробирования в алгоритм двойного хеширования.\n+Сравните отличительные черты двух алгоритмов.\n+ */\n+\n+import ru.kirea.lesson2.ArrHelper;\n+\n+import java.util.Arrays;\n+\n+public class Main8 {\n+    public static void main(String[] args) {\n+        /* Задание 8.1. карточки клиентов в больнице, расположенные на полках.\n+           Каждая полка обозначается буквами алфавита, карточки лежат на той полке,\n+           которая обозначена как первая буква фамилии клиента.\n+           Хеш таблица - весь стелаж с карточками, индекс хеш-таблицы - пронумированная ячейка.*/\n+\n+        /* Задание 8.2. Из примера выше ключ - это ячейка с буквой \"И\".\n+           Коллизия - это карточки клиентов с фамилией \"Иванов\". С такой фамилией может быть много карточек клиента.*/\n+\n+        /* Задание 8.3.\n+           Популярные хеш-функции: SHA-1, SHA256, SHA512.\n+           Эффективные хеш-функции: Keccak, BLAKE, Grøstl, Skein, JH/*/\n+\n+        //Задание 8.4\n+        System.out.println(\"Задание 8.4\");\n+        taskHashTable(10, false);\n+\n+        //Задание 8.5\n+        System.out.println(\"Задание 8.5\");\n+        taskHashTable(10, true);\n+    }\n+\n+    private static void taskHashTable(int size, boolean asDouble) {\n+        int[] arr = ArrHelper.generateRandomArr(size, 100);\n+        HashTable hashTable = new HashTable(size);\n+        for (int value: arr) {\n+            hashTable.insert(new HashTableItem(value), asDouble);\n+        }\n+        System.out.println(\"Массив: \" + Arrays.toString(arr));\n+        System.out.println(\"Хеш-таблица: \" + hashTable.displayValues());\n+\n+        System.out.println(\"Позиции в массиве и хеш-таблице:\");\n+        for (int ind = 0; ind < arr.length; ind++) {\n+            System.out.println(arr[ind] + \": в массеве \" + ind + \", в хеш-таблице \" + hashTable.findHash(arr[ind], asDouble));\n+        }\n+    }\n+}"
  }
]
