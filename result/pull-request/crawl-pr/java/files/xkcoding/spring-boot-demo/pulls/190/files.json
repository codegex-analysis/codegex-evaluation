[
  {
    "sha": "238ee5a423433e9860a157e7ae00c33af4b3c9d9",
    "filename": "demo-zookeeper/src/main/java/com/xkcoding/zookeeper/aspectj/ZooLockAspect.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/xkcoding/spring-boot-demo/blob/95a0074e1f4757ec3499c5ad47b73931e2def3ad/demo-zookeeper/src/main/java/com/xkcoding/zookeeper/aspectj/ZooLockAspect.java",
    "raw_url": "https://github.com/xkcoding/spring-boot-demo/raw/95a0074e1f4757ec3499c5ad47b73931e2def3ad/demo-zookeeper/src/main/java/com/xkcoding/zookeeper/aspectj/ZooLockAspect.java",
    "contents_url": "https://api.github.com/repos/xkcoding/spring-boot-demo/contents/demo-zookeeper/src/main/java/com/xkcoding/zookeeper/aspectj/ZooLockAspect.java?ref=95a0074e1f4757ec3499c5ad47b73931e2def3ad",
    "patch": "@@ -101,7 +101,7 @@ private String buildLockKey(ZooLock lock, Method method, Object[] args) throws N\n             // 循环该参数全部注解\n             for (Annotation annotation : parameterAnnotations[i]) {\n                 // 注解不是 @LockKeyParam\n-                if (!annotation.annotationType().isInstance(LockKeyParam.class)) {\n+                if (!LockKeyParam.class.isAssignableFrom(annotation.annotationType())) {\n                     continue;\n                 }\n \n@@ -119,7 +119,7 @@ private String buildLockKey(ZooLock lock, Method method, Object[] args) throws N\n                         Class<?> clazz = args[i].getClass();\n                         Field declaredField = clazz.getDeclaredField(field);\n                         declaredField.setAccessible(true);\n-                        Object value = declaredField.get(clazz);\n+                        Object value = declaredField.get(args[i]);\n                         key.append(KEY_SEPARATOR).append(value);\n                     }\n                 }"
  },
  {
    "sha": "e14bbf239a1e6a046b52b2626e9ede3485820dce",
    "filename": "demo-zookeeper/src/test/java/com/xkcoding/zookeeper/SpringBootDemoZookeeperApplicationTests.java",
    "status": "modified",
    "additions": 41,
    "deletions": 3,
    "changes": 44,
    "blob_url": "https://github.com/xkcoding/spring-boot-demo/blob/95a0074e1f4757ec3499c5ad47b73931e2def3ad/demo-zookeeper/src/test/java/com/xkcoding/zookeeper/SpringBootDemoZookeeperApplicationTests.java",
    "raw_url": "https://github.com/xkcoding/spring-boot-demo/raw/95a0074e1f4757ec3499c5ad47b73931e2def3ad/demo-zookeeper/src/test/java/com/xkcoding/zookeeper/SpringBootDemoZookeeperApplicationTests.java",
    "contents_url": "https://api.github.com/repos/xkcoding/spring-boot-demo/contents/demo-zookeeper/src/test/java/com/xkcoding/zookeeper/SpringBootDemoZookeeperApplicationTests.java?ref=95a0074e1f4757ec3499c5ad47b73931e2def3ad",
    "patch": "@@ -1,7 +1,11 @@\n package com.xkcoding.zookeeper;\n \n+import com.xkcoding.zookeeper.annotation.LockKeyParam;\n import com.xkcoding.zookeeper.annotation.ZooLock;\n import com.xkcoding.zookeeper.aspectj.ZooLockAspect;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.curator.framework.CuratorFramework;\n import org.apache.curator.framework.recipes.locks.InterProcessMutex;\n@@ -38,7 +42,8 @@ public Integer getCount() {\n     @Test\n     public void test() throws InterruptedException {\n         IntStream.range(0, 10000).forEach(i -> executorService.execute(this::doBuy));\n-        TimeUnit.MINUTES.sleep(1);\n+        executorService.shutdown();\n+        executorService.awaitTermination(10, TimeUnit.MINUTES);\n         log.error(\"count值为{}\", count);\n     }\n \n@@ -54,7 +59,25 @@ public void testAopLock() throws InterruptedException {\n         factory.addAspect(aspect);\n         SpringBootDemoZookeeperApplicationTests proxy = factory.getProxy();\n         IntStream.range(0, 10000).forEach(i -> executorService.execute(() -> proxy.aopBuy(i)));\n-        TimeUnit.MINUTES.sleep(1);\n+        executorService.shutdown();\n+        executorService.awaitTermination(10, TimeUnit.MINUTES);\n+        log.error(\"count值为{}\", proxy.getCount());\n+    }\n+\n+    /**\n+     * 测试AOP分布式锁-动态key\n+     */\n+    @Test\n+    public void testAopLockDynamicKey() throws InterruptedException {\n+        // 测试类中使用AOP需要手动代理\n+        SpringBootDemoZookeeperApplicationTests target = new SpringBootDemoZookeeperApplicationTests();\n+        AspectJProxyFactory factory = new AspectJProxyFactory(target);\n+        ZooLockAspect aspect = new ZooLockAspect(zkClient);\n+        factory.addAspect(aspect);\n+        SpringBootDemoZookeeperApplicationTests proxy = factory.getProxy();\n+        IntStream.range(0, 10000).forEach(i -> executorService.execute(() -> proxy.aopBuy(new Goods(\"asdfasdf\"))));\n+        executorService.shutdown();\n+        executorService.awaitTermination(10, TimeUnit.MINUTES);\n         log.error(\"count值为{}\", proxy.getCount());\n     }\n \n@@ -64,7 +87,8 @@ public void testAopLock() throws InterruptedException {\n     @Test\n     public void testManualLock() throws InterruptedException {\n         IntStream.range(0, 10000).forEach(i -> executorService.execute(this::manualBuy));\n-        TimeUnit.MINUTES.sleep(1);\n+        executorService.shutdown();\n+        executorService.awaitTermination(10, TimeUnit.MINUTES);\n         log.error(\"count值为{}\", count);\n     }\n \n@@ -75,6 +99,14 @@ public void aopBuy(int userId) {\n         log.info(\"{} 扣库存成功。。。\", userId);\n     }\n \n+    @ZooLock(key = \"buy\", timeout = 1, timeUnit = TimeUnit.MINUTES)\n+    public void aopBuy(@LockKeyParam(fields = \"skuId\") Goods goods) {\n+        String skuId = goods.getSkuId();\n+        log.info(\"{} 正在出库。。。\", skuId);\n+        doBuy();\n+        log.info(\"{} 扣库存成功。。。\", skuId);\n+    }\n+\n     public void manualBuy() {\n         String lockPath = \"/buy\";\n         log.info(\"try to buy sth.\");\n@@ -98,5 +130,11 @@ public void doBuy() {\n         log.info(\"count值为{}\", count);\n     }\n \n+    @Data\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    private static class Goods {\n+        private String skuId;\n+    }\n }\n "
  }
]
