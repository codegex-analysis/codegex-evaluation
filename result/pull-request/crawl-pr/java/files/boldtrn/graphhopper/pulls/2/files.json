[
  {
    "sha": "aece532b3adaffee252dd04b23d1cb2a6e884c4e",
    "filename": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java",
    "status": "modified",
    "additions": 14,
    "deletions": 3,
    "changes": 17,
    "blob_url": "https://github.com/boldtrn/graphhopper/blob/24ee1bb2a51aa634e46143159d0fb1675b05fad1/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java",
    "raw_url": "https://github.com/boldtrn/graphhopper/raw/24ee1bb2a51aa634e46143159d0fb1675b05fad1/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java",
    "contents_url": "https://api.github.com/repos/boldtrn/graphhopper/contents/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java?ref=24ee1bb2a51aa634e46143159d0fb1675b05fad1",
    "patch": "@@ -566,6 +566,10 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         return id;\n     }\n \n+    protected IntsRef updateFlagsForNode(IntsRef flags, long osmNodeId){\n+        return flags;\n+    }\n+\n     /**\n      * This method creates from an OSM way (via the osm ids) one or more edges in the graph.\n      */\n@@ -575,9 +579,13 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         int firstNode = -1;\n         int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n+        IntsRef tmpFlags = flags;\n         try {\n             for (int i = 0; i < osmNodeIds.size(); i++) {\n                 long osmNodeId = osmNodeIds.get(i);\n+\n+                tmpFlags = updateFlagsForNode(tmpFlags, osmNodeId);\n+\n                 int tmpNode = getNodeMap().get(osmNodeId);\n                 if (tmpNode == EMPTY_NODE)\n                     continue;\n@@ -597,9 +605,10 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n                         tmpNode = -tmpNode - 3;\n                         if (pointList.getSize() > 1 && firstNode >= 0) {\n                             // TOWER node\n-                            newEdges.add(addEdge(firstNode, tmpNode, pointList, flags, wayOsmId));\n+                            newEdges.add(addEdge(firstNode, tmpNode, pointList, tmpFlags, wayOsmId));\n                             pointList.clear();\n                             pointList.add(nodeAccess, tmpNode);\n+                            tmpFlags = flags;\n                         }\n                         firstNode = tmpNode;\n                         lastInBoundsPillarNode = -1;\n@@ -635,17 +644,19 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n                         }\n \n                         int newEndNode = -handlePillarNode(lastGHNodeId, lastOsmNodeId, pointList, true) - 3;\n-                        newEdges.add(addEdge(firstNode, newEndNode, pointList, flags, wayOsmId));\n+                        newEdges.add(addEdge(firstNode, newEndNode, pointList, tmpFlags, wayOsmId));\n                         pointList.clear();\n                         pointList.add(nodeAccess, newEndNode);\n                         firstNode = newEndNode;\n+                        tmpFlags = flags;\n                     }\n \n                     pointList.add(nodeAccess, tmpNode);\n                     if (firstNode >= 0) {\n-                        newEdges.add(addEdge(firstNode, tmpNode, pointList, flags, wayOsmId));\n+                        newEdges.add(addEdge(firstNode, tmpNode, pointList, tmpFlags, wayOsmId));\n                         pointList.clear();\n                         pointList.add(nodeAccess, tmpNode);\n+                        tmpFlags = flags;\n                     }\n                     firstNode = tmpNode;\n                 }"
  }
]
