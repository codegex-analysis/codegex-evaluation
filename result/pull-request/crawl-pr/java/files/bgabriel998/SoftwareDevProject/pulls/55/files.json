[
  {
    "sha": "e0917af9830969f0cec211e32072649473a4c14a",
    "filename": "app/src/main/java/com/github/ravifrancesco/softwaredevproject/GPSTracker.java",
    "status": "modified",
    "additions": 135,
    "deletions": 84,
    "changes": 219,
    "blob_url": "https://github.com/bgabriel998/SoftwareDevProject/blob/cbed2667d3ca9d8c16d1c2dc688102e496f5528e/app/src/main/java/com/github/ravifrancesco/softwaredevproject/GPSTracker.java",
    "raw_url": "https://github.com/bgabriel998/SoftwareDevProject/raw/cbed2667d3ca9d8c16d1c2dc688102e496f5528e/app/src/main/java/com/github/ravifrancesco/softwaredevproject/GPSTracker.java",
    "contents_url": "https://api.github.com/repos/bgabriel998/SoftwareDevProject/contents/app/src/main/java/com/github/ravifrancesco/softwaredevproject/GPSTracker.java?ref=cbed2667d3ca9d8c16d1c2dc688102e496f5528e",
    "patch": "@@ -15,6 +15,19 @@\n \n import androidx.core.app.ActivityCompat;\n \n+/**\n+ * GPSTracker is a class that provides update on the user location for the UserPoint class.\n+ * It is observed by userPoint.\n+ * It incapsulates the state information needed for retrieving the user location.\n+ * It extends Service and implements LocationListener, that allow for the UserPoint to get\n+ * notified and update when a  change in location is detected\n+ *\n+ * <ul>\n+ * <li> MIN_DISTANCE_CHANGE_FOR_UPDATES is the minimum delta in meters that can be detected\n+ * <li> MIN_TIME_BW_UPDATES is the minimum time in milliseconds to pass to request a new location\n+ * </ul>\n+ * <p>\n+ */\n public class GPSTracker extends Service implements LocationListener {\n \n     private final Context mContext;\n@@ -29,10 +42,6 @@\n     private boolean canGetLocation = false;\n \n     protected  Location location; // location\n-    private double latitude; // latitude\n-    private double longitude; // longitude\n-    private double altitude; // altitude\n-    private double accuracy; // accuracy\n \n     // The minimum distance to change Updates in meters\n     private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 0; // 1 meter\n@@ -43,71 +52,47 @@\n     // Declaring a Location Manager\n     protected LocationManager locationManager;\n \n+    // User Point\n+    UserPoint userPoint;\n+\n+    /**\n+     * Constructor for GPSTracker class\n+     *\n+     * @param mContext current context of the application\n+     * @param userPoint observer UserPoint\n+     */\n     public GPSTracker(Context mContext, UserPoint userPoint) {\n         this.mContext = mContext;\n         this.userPoint = userPoint;\n         getLocation();\n     }\n \n-    // User Point\n-    UserPoint userPoint;\n-\n-    // checks the permits and requests location through android.location.LocationManager;\n-    public Location getLocation() {\n+    /**\n+     * Method used to get updates on the location. Once called it will request a new location to the\n+     * location manager and update the location.\n+     * Before requesting the location the method will check if the requisites are satisfied, and\n+     * will request a new location via NETWORK_PROVIDER if it is available, otherwise it will request\n+     * it through the GPS_PROVIDER (less precise)\n+     *\n+     * In case it fails to do so it will stop the program and print the stack strace of the error\n+     */\n+    private void getLocation() {\n         try {\n-            locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);\n-\n-            // getting GPS status\n-            isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);\n-\n-            // getting network status\n-            isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\n \n+            checkLocationManagerStatus();\n             if (!isGPSEnabled && !isNetworkEnabled) {\n                 // display some errors\n             } else {\n                 this.canGetLocation = true;\n-                // First get location from Network Provider\n-                if (isNetworkEnabled) {\n-                    //check the network permission\n-                    if (ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n-                        ActivityCompat.requestPermissions((Activity) mContext, new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 101);\n-                    }\n-                    locationManager.requestLocationUpdates(\n-                            LocationManager.NETWORK_PROVIDER,\n-                            MIN_TIME_BW_UPDATES,\n-                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);\n-\n-                    Log.d(\"Network\", \"Network\");\n-                    if (locationManager != null) {\n-                        location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\n-                    }\n-\n-                    if (locationManager != null) {\n-                        location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\n-                    }\n+                if (isNetworkEnabled) { // First get location from Network Provider\n+                    setLocation(LocationManager.NETWORK_PROVIDER);\n+                    Log.d(\"Provider\", \"Network\");\n                 }\n \n-                // if GPS Enabled get lat/long using GPS Services\n-                if (isGPSEnabled) {\n+                if (isGPSEnabled) { // if GPS Enabled get lat/long using GPS Services\n                     if (location == null) {\n-                        //check the network permission\n-                        if (ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n-                            ActivityCompat.requestPermissions((Activity) mContext, new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 101);\n-                        }\n-                        locationManager.requestLocationUpdates(\n-                                LocationManager.GPS_PROVIDER,\n-                                MIN_TIME_BW_UPDATES,\n-                                MIN_DISTANCE_CHANGE_FOR_UPDATES, this);\n-\n-                        Log.d(\"GPS Enabled\", \"GPS Enabled\");\n-                        if (locationManager != null) {\n-                            location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);\n-                        }\n-\n-                        if (locationManager != null) {\n-                            location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\n-                        }\n+                        setLocation(LocationManager.GPS_PROVIDER);\n+                        Log.d(\"Provider\", \"GPS Enabled\");\n                     }\n                 }\n             }\n@@ -116,80 +101,146 @@ public Location getLocation() {\n             e.printStackTrace();\n         }\n \n-        return location;\n     }\n \n-    // stop the GPS in the app\n-    public void stopUsingGPS(){\n-        if(locationManager != null){\n-            locationManager.removeUpdates(GPSTracker.this);\n-        }\n+    /**\n+     * Method that checks which providers are enabled for requesting location\n+     * It will update class variable isNetworkEnabled and isGPSEnabled accordingly\n+     */\n+    private void checkLocationManagerStatus() {\n+        locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);\n+\n+        // getting network status\n+        isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\n+\n+        // getting GPS status\n+        isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);\n     }\n \n-    public double getLatitude(){\n-        if(location != null){\n-            latitude = location.getLatitude();\n+    /**\n+     * This method handles the request to update the location.\n+     * First it checks if the app has the proper permissions, then it will request a new location\n+     * through the location manager\n+     *\n+     * @param selectedProvider  string indicating the chosen provider for requesting location\n+     */\n+    private void setLocation(String selectedProvider) {\n+        //check the permission\n+        if (ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n+            ActivityCompat.requestPermissions((Activity) mContext, new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 101);\n+        }\n+        // request location\n+        locationManager.requestLocationUpdates(\n+                selectedProvider,\n+                MIN_TIME_BW_UPDATES,\n+                MIN_DISTANCE_CHANGE_FOR_UPDATES, this);\n+        // set new location\n+        if (locationManager != null) {\n+            location = locationManager.getLastKnownLocation(selectedProvider);\n         }\n+    }\n \n-        // return latitude\n-        return latitude;\n+    /**\n+     *\n+     * @return latitude (in degrees)\n+     */\n+    public double getLatitude(){\n+        return location != null ? location.getLatitude() : 0.0;\n     }\n \n+    /**\n+     *\n+     * @return longitude (in degrees)\n+     */\n     public double getLongitude(){\n-        if(location != null){\n-            longitude = location.getLongitude();\n-        }\n-\n-        // return longitude\n-        return longitude;\n+        return location != null ? location.getLongitude() : 0.0;\n     }\n \n+    /**\n+     *\n+     * @return altitude (in meters)\n+     */\n     public double getAltitude(){\n-        if(location != null){\n-            altitude = location.getAltitude();\n-        }\n-\n-        // return altitude\n-        return altitude;\n+        return location != null ? location.getAltitude() : 0.0;\n     }\n \n+    /**\n+     *\n+     * @return accuracy (in meters)\n+     */\n     public double getAccuracy() {\n-        if(location != null){\n-            accuracy = location.getAccuracy();\n-        }\n-\n-        // return accuracy\n-        return accuracy;\n+        return location != null ? location.getAccuracy() : 0.0;\n     }\n \n-    // returns a boolean that indicates if the permits for accessing location are ok\n+\n+    /**\n+     *\n+     * @return  <code>true</code> if is able to get the current location;\n+     *          <code>false</code> otherwise.\n+     */\n     public boolean canGetLocation() {\n         return this.canGetLocation;\n     }\n \n+    /**\n+     * Method from interface LocationListener.\n+     * Called when the location has changed and locations are being delivered in batches.\n+     * Once called it will update the UserPoint that is observing this object.\n+     *\n+     * @param location current location\n+     */\n     @Override\n     public void onLocationChanged(Location location) {\n         getLocation();\n         userPoint.update();\n     }\n \n+    /**\n+     * Method from interface LocationListener.\n+     * Called when the provider this listener is registered with becomes disabled.\n+     * Throws an error.\n+     *\n+     * @param provider current provider\n+     */\n     @Override\n     public void onProviderDisabled(String provider) {\n         // print some error\n     }\n \n+    /**\n+     * Method from interface LocationListener.\n+     * Called when a provider this listener is registered with becomes enabled.\n+     * Once called it will update the UserPoint that is observing this object.\n+     *\n+     * @param provider current provider\n+     */\n     @Override\n     public void onProviderEnabled(String provider) {\n         getLocation();\n         userPoint.update();\n     }\n \n+    /**\n+     * Method from interface LocationListener.\n+     * This method was deprecated in API level 29. This callback will never be invoked on Android Q and above.\n+     *  Once called it will update the UserPoint that is observing this object.\n+     *\n+     * @param provider current provider\n+     * @param status current status\n+     * @param extras extras\n+     */\n     @Override\n     public void onStatusChanged(String provider, int status, Bundle extras) {\n         getLocation();\n         userPoint.update();\n     }\n \n+    /**\n+     * Method from class Service\n+     *\n+     * @param arg0 intent\n+     * @return the communication channel to the service.\n+     */\n     @Override\n     public IBinder onBind(Intent arg0) {\n         return null;"
  }
]
