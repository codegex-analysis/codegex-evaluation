[
  {
    "sha": "4171fa23195be107e535e325c94d16184310d2be",
    "filename": "newrelic-agent/src/main/java/com/newrelic/agent/config/AgentConfigImpl.java",
    "status": "modified",
    "additions": 13,
    "deletions": 26,
    "changes": 39,
    "blob_url": "https://github.com/newrelic/newrelic-java-agent/blob/6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc/newrelic-agent/src/main/java/com/newrelic/agent/config/AgentConfigImpl.java",
    "raw_url": "https://github.com/newrelic/newrelic-java-agent/raw/6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc/newrelic-agent/src/main/java/com/newrelic/agent/config/AgentConfigImpl.java",
    "contents_url": "https://api.github.com/repos/newrelic/newrelic-java-agent/contents/newrelic-agent/src/main/java/com/newrelic/agent/config/AgentConfigImpl.java?ref=6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc",
    "patch": "@@ -13,16 +13,7 @@\n import com.newrelic.agent.transport.DataSenderImpl;\n \n import java.text.MessageFormat;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.regex.Pattern;\n@@ -122,7 +113,6 @@\n     public static final double DEFAULT_APDEX_T = 1.0; // 1 second\n     public static final String DEFAULT_API_HOST = \"rpm.newrelic.com\";\n     public static final String DEFAULT_CA_BUNDLE_PATH = null;\n-    public static final boolean DEFAULT_USE_PRIVATE_SSL = false;\n     public static final String DEFAULT_COMPRESSED_CONTENT_ENCODING = DataSenderImpl.GZIP_ENCODING;\n     public static final boolean DEFAULT_CPU_SAMPLING_ENABLED = true;\n     public static final boolean DEFAULT_ENABLED = true;\n@@ -181,7 +171,6 @@\n     private final boolean autoAppNamingEnabled;\n     private final boolean autoTransactionNamingEnabled;\n     private final String caBundlePath;\n-    private final boolean usePrivateSSL;\n     private final String compressedContentEncoding;\n     private final boolean cpuSamplingEnabled;\n     private final boolean customInstrumentationEditorAllowed;\n@@ -299,8 +288,7 @@ private AgentConfigImpl(Map<String, Object> props) {\n         startupTimingEnabled = getProperty(STARTUP_TIMING, DEFAULT_STARTUP_TIMING);\n         sendJvmProps = getProperty(SEND_JVM_PROPS, true);\n         litemode = getProperty(LITE_MODE, false);\n-        caBundlePath = initCaBundlePathConfig();\n-        usePrivateSSL = initUsePrivateSSLConfig();\n+        caBundlePath = initSSLConfig();\n         trimStats = getProperty(TRIM_STATS, DEFAULT_TRIM_STATS);\n         platformInformationEnabled = getProperty(PLATFORM_INFORMATION_ENABLED, DEFAULT_PLATFORM_INFORMATION_ENABLED);\n         ibmWorkaroundEnabled = getProperty(IBM_WORKAROUND, DEFAULT_IBM_WORKAROUND);\n@@ -358,16 +346,20 @@ private AgentConfigImpl(Map<String, Object> props) {\n         this.customParameters = getProperty(LaspPolicies.LASP_CUSTOM_PARAMETERS, !highSecurity);\n \n         if (getProperty(REPORT_SQL_PARSER_ERRORS) != null) {\n-            addDeprecatedProperty(new String[] { REPORT_SQL_PARSER_ERRORS }, null);\n+            addDeprecatedProperty(new String[]{REPORT_SQL_PARSER_ERRORS}, null);\n         }\n     }\n \n-    private String initCaBundlePathConfig() {\n-        return getProperty(CA_BUNDLE_PATH, DEFAULT_CA_BUNDLE_PATH);\n-    }\n-\n-    private boolean initUsePrivateSSLConfig() {\n-        return getProperty(USE_PRIVATE_SSL, DEFAULT_USE_PRIVATE_SSL);\n+    private String initSSLConfig() {\n+        String caBundlePath = getProperty(CA_BUNDLE_PATH, DEFAULT_CA_BUNDLE_PATH);\n+        if (getProperty(USE_PRIVATE_SSL) != null) {\n+            if (caBundlePath != null) {\n+                Agent.LOG.log(Level.INFO, \"use_private_ssl configuration setting has been removed.\");\n+            } else {\n+                Agent.LOG.log(Level.SEVERE, \"The use_private_ssl configuration setting has been removed and will be ignored. The agent will use the JVM/JRE truststore by default unless you configure ca_bundle_path to use a different truststore.\");\n+            }\n+        }\n+        return caBundlePath;\n     }\n \n     /**\n@@ -1105,11 +1097,6 @@ public String getCaBundlePath() {\n         return caBundlePath;\n     }\n \n-    @Override\n-    public boolean getUsePrivateSSL() {\n-        return usePrivateSSL;\n-    }\n-\n     @Override\n     public boolean isLogDaily() {\n         return logDaily;"
  },
  {
    "sha": "64dd05f205bdbb44c7ff51be4765a787d095cdc8",
    "filename": "newrelic-agent/src/main/java/com/newrelic/agent/config/DataSenderConfig.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/newrelic/newrelic-java-agent/blob/6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc/newrelic-agent/src/main/java/com/newrelic/agent/config/DataSenderConfig.java",
    "raw_url": "https://github.com/newrelic/newrelic-java-agent/raw/6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc/newrelic-agent/src/main/java/com/newrelic/agent/config/DataSenderConfig.java",
    "contents_url": "https://api.github.com/repos/newrelic/newrelic-java-agent/contents/newrelic-agent/src/main/java/com/newrelic/agent/config/DataSenderConfig.java?ref=6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc",
    "patch": "@@ -31,8 +31,6 @@\n \n     String getCaBundlePath();\n \n-    boolean getUsePrivateSSL();\n-\n     /**\n      * If simple compression is enabled we will prevent data within a payload from being compressed. However,\n      * the payload itself may still be compressed before being sent to the collector."
  },
  {
    "sha": "ffdd557f74714523d6f8961d9c090008dcc3ac82",
    "filename": "newrelic-agent/src/main/java/com/newrelic/agent/transport/apache/ApacheSSLManager.java",
    "status": "modified",
    "additions": 2,
    "deletions": 71,
    "changes": 73,
    "blob_url": "https://github.com/newrelic/newrelic-java-agent/blob/6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc/newrelic-agent/src/main/java/com/newrelic/agent/transport/apache/ApacheSSLManager.java",
    "raw_url": "https://github.com/newrelic/newrelic-java-agent/raw/6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc/newrelic-agent/src/main/java/com/newrelic/agent/transport/apache/ApacheSSLManager.java",
    "contents_url": "https://api.github.com/repos/newrelic/newrelic-java-agent/contents/newrelic-agent/src/main/java/com/newrelic/agent/transport/apache/ApacheSSLManager.java?ref=6730bf91c9f75f35cd5fca799bd62fe6c26a1bcc",
    "patch": "@@ -7,7 +7,6 @@\n \n package com.newrelic.agent.transport.apache;\n \n-import com.google.common.collect.ImmutableList;\n import com.newrelic.agent.Agent;\n import com.newrelic.agent.config.DataSenderConfig;\n import org.apache.http.ssl.SSLContextBuilder;\n@@ -17,37 +16,24 @@\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.URL;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n import java.security.cert.CertificateException;\n-import java.security.cert.CertificateExpiredException;\n import java.security.cert.CertificateFactory;\n-import java.security.cert.CertificateNotYetValidException;\n import java.security.cert.X509Certificate;\n-import java.util.Calendar;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.LinkedList;\n import java.util.logging.Level;\n \n public class ApacheSSLManager {\n-    private static final String NEW_RELIC_CERTS_PATH = \"META-INF/certs/\";\n-    private static final Collection<String> NEW_RELIC_CERTS = ImmutableList.of(\"newrelic-com.pem\",\n-            \"eu-newrelic-com.pem\", \"eu01-nr-data-net.pem\");\n \n     public static SSLContext createSSLContext(DataSenderConfig config) {\n         SSLContextBuilder sslContextBuilder = new SSLContextBuilder();\n         try {\n             if (config.getCaBundlePath() != null) {\n-                if (config.getUsePrivateSSL()) {\n-                   Agent.LOG.log(Level.FINE, \"Ignoring use_private_ssl config.\" +\n-                           \" Using SSL certificates provided by ca_bundle_path.\");\n-                }\n+                Agent.LOG.log(Level.INFO, \"Using ca_bundle_path: {0}\", config.getCaBundlePath());\n                 sslContextBuilder.loadTrustMaterial(getKeyStore(config.getCaBundlePath()), null);\n-            } else if (config.getUsePrivateSSL()){\n-                addNewRelicCertToTrustStore(sslContextBuilder);\n             }\n             return sslContextBuilder.build();\n         } catch (Exception e) {\n@@ -56,61 +42,6 @@ public static SSLContext createSSLContext(DataSenderConfig config) {\n         }\n     }\n \n-    private static void addNewRelicCertToTrustStore(SSLContextBuilder sslContextBuilder) {\n-        // Initialize keystore and add valid New Relic certificates\n-        try {\n-            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n-            keystore.load(null, null);\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            for (String file : NEW_RELIC_CERTS) {\n-                URL nrCertUrl = ApacheSSLManager.class.getClassLoader().getResource(NEW_RELIC_CERTS_PATH + file);\n-                if (nrCertUrl != null) {\n-                    try (InputStream is = nrCertUrl.openStream()) {\n-                        X509Certificate cert = (X509Certificate) cf.generateCertificate(is);\n-                        boolean sslCertIsValid = isSslCertValid(cert);\n-                        if (sslCertIsValid) {\n-                            logIfExpiringSoon(cert.getNotAfter());\n-                            String alias = file.split(\"\\\\.pem\")[0];\n-                            keystore.setCertificateEntry(alias, cert);\n-                            Agent.LOG.log(Level.FINEST, \"Installed New Relic ssl certificate at alias: \" + alias);\n-                            Agent.LOG.log(Level.FINEST, \"SSL Certificate expires on: {0}\", cert.getNotAfter());\n-                        }\n-                    } catch (IOException e) {\n-                        Agent.LOG.log(Level.INFO, \"Unable to add bundled New Relic ssl certificate.\", e);\n-                    }\n-                } else {\n-                    Agent.LOG.log(Level.INFO, \"Unable to find bundled New Relic ssl certificates.\");\n-                }\n-            }\n-            sslContextBuilder.loadTrustMaterial(keystore, null);\n-        } catch (IOException | CertificateException | NoSuchAlgorithmException | KeyStoreException e) {\n-            Agent.LOG.log(Level.INFO, \"Unable to add bundled New Relic ssl certificate.\", e);\n-        }\n-    }\n-\n-    private static void logIfExpiringSoon(Date expiry) {\n-        // log if less than 3 months left until certificate expires\n-        Calendar cal = Calendar.getInstance();\n-        cal.add(Calendar.MONTH, +3);\n-        if (cal.getTime().compareTo(expiry) > 0) {\n-            Agent.LOG.log(Level.WARNING, \"New Relic ssl certificate expire on {0}.\\n\" +\n-                    \"Applications using a custom Truststore may need to update the agent \" +\n-                    \"or provide a valid certificate using the ca_bundle_path config\", expiry);\n-        }\n-    }\n-\n-    private static boolean isSslCertValid(X509Certificate cert) {\n-        try {\n-            cert.checkValidity();\n-        } catch (CertificateExpiredException | CertificateNotYetValidException e) {\n-            Agent.LOG.log(Level.WARNING, \"New Relic ssl certificate has expired.\\n\" +\n-                    \"Applications using a custom Truststore may need to update the agent \" +\n-                    \"or provide a valid certificate using the ca_bundle_path config\", e);\n-            return false;\n-        }\n-        return true;\n-    }\n-\n     private static KeyStore getKeyStore(String caBundlePath)\n             throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {\n         KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n@@ -127,7 +58,7 @@ private static KeyStore getKeyStore(String caBundlePath)\n                         caCerts.add((X509Certificate) cf.generateCertificate(is));\n                     } catch (Throwable t) {\n                         Agent.LOG.log(Level.SEVERE,\n-                                \"Unable to generate ca_bundle_path certificate. Will not process further certs.\", t);\n+                                \"Unable to generate ca_bundle_path certificate. Verify the certificate format. Will not process further certs.\", t);\n                         break;\n                     }\n                 }"
  },
  {
    "sha": "f35bf08082389dfbea8d09fc688630a495be2d36",
    "filename": "newrelic-agent/src/main/resources/META-INF/certs/eu-newrelic-com.pem",
    "status": "removed",
    "additions": 0,
    "deletions": 41,
    "changes": 41,
    "blob_url": "https://github.com/newrelic/newrelic-java-agent/blob/910144d887c9e44824779c2e80fff5446443b1da/newrelic-agent/src/main/resources/META-INF/certs/eu-newrelic-com.pem",
    "raw_url": "https://github.com/newrelic/newrelic-java-agent/raw/910144d887c9e44824779c2e80fff5446443b1da/newrelic-agent/src/main/resources/META-INF/certs/eu-newrelic-com.pem",
    "contents_url": "https://api.github.com/repos/newrelic/newrelic-java-agent/contents/newrelic-agent/src/main/resources/META-INF/certs/eu-newrelic-com.pem?ref=910144d887c9e44824779c2e80fff5446443b1da",
    "patch": "@@ -1,41 +0,0 @@\n------BEGIN CERTIFICATE-----\r\n-MIIHLTCCBhWgAwIBAgIQAbm2WL12atsmJFQ7SjYkfDANBgkqhkiG9w0BAQsFADBN\r\n-MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMScwJQYDVQQDEx5E\r\n-aWdpQ2VydCBTSEEyIFNlY3VyZSBTZXJ2ZXIgQ0EwHhcNMjAwODE5MDAwMDAwWhcN\r\n-MjIxMTIyMDAwMDAwWjBwMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5p\r\n-YTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEYMBYGA1UEChMPTmV3IFJlbGljLCBJ\r\n-bmMuMRowGAYDVQQDDBEqLmV1Lm5ld3JlbGljLmNvbTCCASIwDQYJKoZIhvcNAQEB\r\n-BQADggEPADCCAQoCggEBAMZXnx2CbaFxMmYV2T2IQJPDB6DkRsRsN05oQU0i4oQi\r\n-6FBc/UMSZ0CFjX8/5s3yb5a/b4W9ZrwjKMSfiF7LraIZ29RFvCrOetZkpyQT6FWq\r\n-DTPW3EYl/D+n73jutScsf2qsPcwnMQnq2XeX8/3kkfS5LdeKjYA4Tf1iQuP98dgP\r\n-dSKZpJe+taFNGJMFg2LjtO5z4hGY/6dFLjzjWIf87RWbzoaotZFRrOt+tdrG3G67\r\n-bbaVGKAZnD9QMyy0l0mp1YIGFmoADmzyweVlkyL/lu1AV878Vw1p1txDbh3FbNql\r\n-mYmXhOMMrdPgvR8D8XpJfbTDnuEpdAfwuJGgHY4cVkUCAwEAAaOCA+QwggPgMB8G\r\n-A1UdIwQYMBaAFA+AYRyCMWHVLyjnjUY4tCzhxtniMB0GA1UdDgQWBBQxQ+aRxwSg\r\n-OQj3564dwJiw4WHXpjAtBgNVHREEJjAkghEqLmV1Lm5ld3JlbGljLmNvbYIPZXUu\r\n-bmV3cmVsaWMuY29tMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcD\r\n-AQYIKwYBBQUHAwIwawYDVR0fBGQwYjAvoC2gK4YpaHR0cDovL2NybDMuZGlnaWNl\r\n-cnQuY29tL3NzY2Etc2hhMi1nNi5jcmwwL6AtoCuGKWh0dHA6Ly9jcmw0LmRpZ2lj\r\n-ZXJ0LmNvbS9zc2NhLXNoYTItZzYuY3JsMEwGA1UdIARFMEMwNwYJYIZIAYb9bAEB\r\n-MCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwCAYG\r\n-Z4EMAQICMHwGCCsGAQUFBwEBBHAwbjAkBggrBgEFBQcwAYYYaHR0cDovL29jc3Au\r\n-ZGlnaWNlcnQuY29tMEYGCCsGAQUFBzAChjpodHRwOi8vY2FjZXJ0cy5kaWdpY2Vy\r\n-dC5jb20vRGlnaUNlcnRTSEEyU2VjdXJlU2VydmVyQ0EuY3J0MAwGA1UdEwEB/wQC\r\n-MAAwggH3BgorBgEEAdZ5AgQCBIIB5wSCAeMB4QB3ACl5vvCeOTkh8FZzn2Old+W+\r\n-V32cYAr4+U1dJlwlXceEAAABdAfCybMAAAQDAEgwRgIhALGcb8jP7a7R1mSpAZWX\r\n-QkiGLor/QxqwNdqFr3hIjRUVAiEA2kBrYq9eUFPTwS02WAkbWvlgSrbvzYLr2Wxh\r\n-P7wPHAkAdgBByMqx3yJGShDGoToJQodeTjGLGwPr60vHaPCQYpYG9gAAAXQHwsla\r\n-AAAEAwBHMEUCIGhkFbGd5QtNUNvj1M150dDCeH1hxbbFJmCIPhfc2YgxAiEAqEXL\r\n-idwpIWMHg8jwIlh6wMBgD3uVVb7R3+6tOkTJb94AdQBGpVXrdfqRIDC1oolp9PN9\r\n-ESxBdL79SbiFq/L8cP5tRwAAAXQHwsoOAAAEAwBGMEQCIFjseSIg1NKi2enOjxDI\r\n-mzi3gVQh8uv2KQa5LeErXNjDAiBp7CE17PwYc3zQA3qWMcbC/GgR0k9F3EFqVPNz\r\n-pccWzwB3AG9Tdqwx8DEZ2JkApFEV/3cVHBHZAsEAKQaNsgiaN9kTAAABdAfCy3oA\r\n-AAQDAEgwRgIhAP7IC3qsW75WOMBPJ9Rg3Kuf/70DFq4sZkyVynW0pb4OAiEAmBoP\r\n-bRCpBIrWdqrChFaGow9hok/GR3ZhJ+YaTohragowDQYJKoZIhvcNAQELBQADggEB\r\n-ABYfSelCt9reHKchYmPro3NdrxCCQ5YFcnFYS3FiBTIm9bD4oTL7X7F2ZKQk1gjj\r\n-A2U1382FOGFvNb6B//iP2QPZ2dnqdI6QaWD3YUX/JuIxxqPdJZXfZJAHOxzLri8g\r\n-OhHDneyCmlH7fRtCErUc43Sqdx0wSQVgcT4rEPnDx66bg2kKb7Yz8SmnpNnDO8Yn\r\n-D21m/On0+WOvQeNWqZiEJZRwvYQofKGFuWDgneK5KWAcW2DYu7f3ORUK8YF9BjA0\r\n-vSO4Fd184eeVquJeWRfvtoTzD1m4yqMW0QxuiTcnkDcA0J4kE4qTkYy3H9rXn0nI\r\n-EKGikOyOmtaLWus3AA3jKoo=\r\n------END CERTIFICATE-----\r"
  },
  {
    "sha": "4c268c78eca95573ade94a261c545d21810d05cf",
    "filename": "newrelic-agent/src/main/resources/META-INF/certs/eu01-nr-data-net.pem",
    "status": "removed",
    "additions": 0,
    "deletions": 38,
    "changes": 38,
    "blob_url": "https://github.com/newrelic/newrelic-java-agent/blob/910144d887c9e44824779c2e80fff5446443b1da/newrelic-agent/src/main/resources/META-INF/certs/eu01-nr-data-net.pem",
    "raw_url": "https://github.com/newrelic/newrelic-java-agent/raw/910144d887c9e44824779c2e80fff5446443b1da/newrelic-agent/src/main/resources/META-INF/certs/eu01-nr-data-net.pem",
    "contents_url": "https://api.github.com/repos/newrelic/newrelic-java-agent/contents/newrelic-agent/src/main/resources/META-INF/certs/eu01-nr-data-net.pem?ref=910144d887c9e44824779c2e80fff5446443b1da",
    "patch": "@@ -1,38 +0,0 @@\n------BEGIN CERTIFICATE-----\n-MIIGtzCCBZ+gAwIBAgIQCBflwGdmH3qAeNydtCm8ZDANBgkqhkiG9w0BAQsFADBN\n-MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMScwJQYDVQQDEx5E\n-aWdpQ2VydCBTSEEyIFNlY3VyZSBTZXJ2ZXIgQ0EwHhcNMjAwMjA0MDAwMDAwWhcN\n-MjIwMjA4MTIwMDAwWjBxMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5p\n-YTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEYMBYGA1UEChMPTmV3IFJlbGljLCBJ\n-bmMuMRswGQYDVQQDDBIqLmV1MDEubnItZGF0YS5uZXQwggEiMA0GCSqGSIb3DQEB\n-AQUAA4IBDwAwggEKAoIBAQDWQq63H7zKI5sQ0LJIMOjHzCQ5R96PFe75mtF/uN/Q\n-El5ao5IZcispqxLRRNZNivyW9n6w+oGWcuhQWOnLHkNuU1O4bK1HPHXNZMjgX4ss\n-ZJpalCVx74U+uC3ta4ywNHgiPlwwGBXn9ow+wfi8OAlN/jG0RW+s/6wRRHhBNpWt\n-d9y8uKH8LPUKmct0JNMKHb3pigUY9piJf1xExR8FpmdbCtOgP/319lmcfHje8TMB\n-cJ9Kl/BnWu6QGustndZ4gkx0Kl4T1VzAl2Pzzzs/OR69rgax4FIWeYXpiAHNSSxB\n-AEsO152NZvEU/4bVG7rCfXLokkP+m4C+mH7sfWPVNVlXAgMBAAGjggNtMIIDaTAf\n-BgNVHSMEGDAWgBQPgGEcgjFh1S8o541GOLQs4cbZ4jAdBgNVHQ4EFgQULbvrib1J\n-0IoiGqhwMimtNiEzjC4wLwYDVR0RBCgwJoISKi5ldTAxLm5yLWRhdGEubmV0ghBl\n-dTAxLm5yLWRhdGEubmV0MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEF\n-BQcDAQYIKwYBBQUHAwIwawYDVR0fBGQwYjAvoC2gK4YpaHR0cDovL2NybDMuZGln\n-aWNlcnQuY29tL3NzY2Etc2hhMi1nNi5jcmwwL6AtoCuGKWh0dHA6Ly9jcmw0LmRp\n-Z2ljZXJ0LmNvbS9zc2NhLXNoYTItZzYuY3JsMEwGA1UdIARFMEMwNwYJYIZIAYb9\n-bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMw\n-CAYGZ4EMAQICMHwGCCsGAQUFBwEBBHAwbjAkBggrBgEFBQcwAYYYaHR0cDovL29j\n-c3AuZGlnaWNlcnQuY29tMEYGCCsGAQUFBzAChjpodHRwOi8vY2FjZXJ0cy5kaWdp\n-Y2VydC5jb20vRGlnaUNlcnRTSEEyU2VjdXJlU2VydmVyQ0EuY3J0MAwGA1UdEwEB\n-/wQCMAAwggF+BgorBgEEAdZ5AgQCBIIBbgSCAWoBaAB3AO5Lvbd1zmC64UJpH6vh\n-nmajD35fsHLYgwDEe4l6qP3LAAABcBHGnuIAAAQDAEgwRgIhAKCkr4VpbYxrrdyn\n-vq5cX9oGpr0q3xqBk2mFhOwUffcVAiEAv/yHaJj+YSGij3mv5KDk5ojyC13okxIl\n-rvtEo63YYL0AdQBRo7D1/QF5nFZtuDd4jwykeswbJ8v3nohCmg3+1IsF5QAAAXAR\n-xp8QAAAEAwBGMEQCIG0nWPBfAoXDmCy64liAYaDS0dvWPeCyhUr3KB77pa9VAiBW\n-6G8Jpqjl8/PAkPXkM6ebHkSsaR/qDiy+8cf7BRRtbQB2AEHIyrHfIkZKEMahOglC\n-h15OMYsbA+vrS8do8JBilgb2AAABcBHGnlcAAAQDAEcwRQIhANuXCyiTRLmT1gJi\n-vs2Ycy49Dg8LK5/yjJDEdvLh1MEVAiAbxb0p/oo4lXvQPnRG9MlbCm71qvLQbgwl\n-Tzyx6G/GBzANBgkqhkiG9w0BAQsFAAOCAQEAEy0GufbczPZukMkcRrYV/SYEwnMg\n-KT5YgTWZFNwF05xRzL/ulC26ptU6xvqv6nCMsl887mn2CaHG3biA6zTMc2kwIV/G\n-rbNTWYAcrZRJG8t5EY57PCAsOPGDlUT1nwW4SrGaj4zwuktMhprniYAkwOdiRhdT\n-4mRAUoInma5BCzYyqjkk+yHTGETVk6mMcI0UzUDfZkFNSv48H6AbIKtKjMa31Wzp\n-x1Rn7uRrErIgkvZNQ+FjIPHy/IWhWvslC4yXYDM90pKmw+E7OwOQIpYIYzSqf4mS\n-K71Fy4eq+qre35KveASXlie75iJDsdmUyhljy4VohwqzrFg6o1Z8miCj1A==\n------END CERTIFICATE-----\n\\ No newline at end of file"
  },
  {
    "sha": "909eb5394af83eb41014abd49b4ece9c7636a68a",
    "filename": "newrelic-agent/src/main/resources/META-INF/certs/newrelic-com.pem",
    "status": "removed",
    "additions": 0,
    "deletions": 35,
    "changes": 35,
    "blob_url": "https://github.com/newrelic/newrelic-java-agent/blob/910144d887c9e44824779c2e80fff5446443b1da/newrelic-agent/src/main/resources/META-INF/certs/newrelic-com.pem",
    "raw_url": "https://github.com/newrelic/newrelic-java-agent/raw/910144d887c9e44824779c2e80fff5446443b1da/newrelic-agent/src/main/resources/META-INF/certs/newrelic-com.pem",
    "contents_url": "https://api.github.com/repos/newrelic/newrelic-java-agent/contents/newrelic-agent/src/main/resources/META-INF/certs/newrelic-com.pem?ref=910144d887c9e44824779c2e80fff5446443b1da",
    "patch": "@@ -1,35 +0,0 @@\n------BEGIN CERTIFICATE-----\r\n-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\r\n-aSfWVsATwHjpT+pVxJLT47vYMlo=\r\n------END CERTIFICATE-----\r"
  }
]
