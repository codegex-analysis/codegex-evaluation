[
  {
    "sha": "cc5756cde3d8c07e40f0682db15a9c120141970e",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/pom.xml",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/pom.xml",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/pom.xml?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -46,6 +46,20 @@\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-security</artifactId>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "68de8b5a6b40d03814e0c0f282b9ad266c7d6f2c",
    "filename": "src/main/java/pl/mt/demo/Author.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/Author.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/Author.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/Author.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,29 @@\n+package pl.mt.demo;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+import javax.persistence.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+@Entity\n+public class Author {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+    private String name;\n+\n+    @ManyToMany(mappedBy = \"authors\", cascade = {CascadeType.MERGE, CascadeType.PERSIST})\n+    private List<Book> books = new ArrayList<>();\n+\n+    public void addBook(Book book) {\n+        this.books.add(book);\n+        book.getAuthors().add(this);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ac09918c3bd84c1de1a88809c9d60b80e5e04265",
    "filename": "src/main/java/pl/mt/demo/AuthorFilters.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/AuthorFilters.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/AuthorFilters.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/AuthorFilters.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,22 @@\n+package pl.mt.demo;\n+\n+public class AuthorFilters {\n+    private String title;\n+    private String name;\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "004588f1178de6d816b9dbb8524ce74453b8e29f",
    "filename": "src/main/java/pl/mt/demo/AuthorRepository.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/AuthorRepository.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/AuthorRepository.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/AuthorRepository.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,12 @@\n+package pl.mt.demo;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public interface AuthorRepository extends JpaRepository<Author, Long> {\n+\n+    @Modifying\n+    @Transactional\n+    void deleteByBooksId(Long id);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6ef81423b9cb08aa65de30d37716a6372ca15480",
    "filename": "src/main/java/pl/mt/demo/Book.java",
    "status": "modified",
    "additions": 36,
    "deletions": 1,
    "changes": 37,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/Book.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/Book.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/Book.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -1,4 +1,39 @@\n package pl.mt.demo;\n \n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+import javax.persistence.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+@Entity\n public class Book {\n-}\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+    private String title;\n+    private String publisher;\n+    private String translation;\n+    private String genre;\n+    private String publishingCycle;\n+    private String isbn;\n+    private String releaseDate;\n+\n+    @ManyToMany(cascade = {CascadeType.MERGE, CascadeType.PERSIST})\n+    private List<Author> authors = new ArrayList<>();\n+\n+    public List<Author> getAuthors() {\n+        return authors;\n+    }\n+\n+    public void addAuthor(Author author) {\n+        this.authors.add(author);\n+        author.getBooks().add(this);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2df6221a1d0e2d5380e7c01c969c788de9ac048d",
    "filename": "src/main/java/pl/mt/demo/BookCatalogRepository.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/BookCatalogRepository.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/BookCatalogRepository.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/BookCatalogRepository.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,21 @@\n+package pl.mt.demo;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+import java.util.List;\n+\n+public interface BookCatalogRepository extends JpaRepository<Book, Long> {\n+\n+    List<Book> findByTitleContainingIgnoreCase(String title);\n+\n+//     Część do przemyślenia i ew. rozwoju\n+\n+//      @Query(\"SELECT b FROM Book b INNER JOIN Book_Authors ba ON books_id = b.id INNER JOIN \" +\n+//     \"Author a ON a.id = authors_id\")\n+//     List<Book> findByFilters(String title, String name);\n+//    @Query(\"SELECT b.title, a.name FROM Book b JOIN b.authors p\")\n+//    @Query(\" SELECT DISTINCT b FROM Book b JOIN b.authors a WHERE a.name = :name\")\n+//    List<Book> findAllBooksByAuthorName(@Param(\"name\") String authorName);\n+//    @Query(\"SELECT b, a FROM Book b, Author a WHERE b.id = a.id\")\n+//    @Query(value = \"SELECT LOWER(Book.title), LOWER(Author.name) FROM Book  INNER JOIN Author ON Book.id=Author.id \")\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ee74eb07f1a6679c9df0c6a577bcdcf4971c1f99",
    "filename": "src/main/java/pl/mt/demo/BookController.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/BookController.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/BookController.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/BookController.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,123 @@\n+package pl.mt.demo;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Controller\n+public class BookController {\n+\n+    private final CatalogService catalogService;\n+\n+    public BookController(CatalogService bookCatalogService) {\n+        this.catalogService = bookCatalogService;\n+    }\n+\n+    @GetMapping(\"/home\")\n+    public String home() {\n+        return \"home\";\n+    }\n+\n+    @GetMapping(\"/books\")\n+    public String books(BookFilters bookFilters, Model model) {\n+        List<Book> bookList;\n+        if (!(bookFilters.getTitle() == null && bookFilters.getName() == null)) {\n+            bookList = catalogService.findAllForFilters(bookFilters);\n+        } else {\n+            bookList = catalogService.findAllBook();\n+        }\n+        model.addAttribute(\"listAllBooks\", bookList);\n+        model.addAttribute(\"filters\", bookFilters);\n+        return \"books\";\n+    }\n+\n+    @GetMapping(\"/{id}/book-details\")\n+    public String bookDetail(@PathVariable(\"id\") Long id, Model model) {\n+        Optional<Book> book = catalogService.findById(id);\n+        if (book.isPresent()) {\n+            Book books = book.get();\n+\n+            model.addAttribute(\"bookDetails\", books);\n+            return \"bookdetails\";\n+        } else\n+            return \"redirect:/\";\n+    }\n+\n+    @GetMapping(\"/add-book\")\n+    public String addBook(Model model) {\n+        model.addAttribute(\"author\", catalogService.findAllAuthors());\n+        model.addAttribute(\"addBook\", new Book());\n+        return \"addbook\";\n+    }\n+\n+    @PostMapping(\"/add-book\")\n+    public String addBook(Book book) {\n+        catalogService.addBook(book);\n+        return \"redirect:/books\";\n+    }\n+\n+    @GetMapping(\"/{id}/edit-book\")\n+    public String editBook(@PathVariable(\"id\") Long id, Model model) {\n+        Optional<Book> byId = catalogService.findById(id);\n+        if (byId.isPresent()) {\n+            Book book = byId.get();\n+            List<Author> authors = catalogService.findAllAuthors();\n+            model.addAttribute(\"authorEdit\", catalogService.findAllBook());\n+            model.addAttribute(\"author\", authors);\n+            model.addAttribute(\"updateBook\", book);\n+            model.addAttribute(\"model\", \"updateBook\");\n+\n+            return \"/editbook\";\n+        } else {\n+            return \"redirect:/\";\n+        }\n+    }\n+\n+    @GetMapping(\"/{id}/edit-book/delete\")\n+    public String deleteBook(@PathVariable Long id) {\n+        catalogService.deleteBookById(id);\n+        return \"redirect:/books\";\n+    }\n+\n+    @GetMapping(\"{id}/addauthor/delete\")\n+    public String deleteAuthor(@PathVariable Long id){\n+        catalogService.deleteAuthorById(id);\n+        return \"redirect:/\";\n+    }\n+\n+    @GetMapping(\"/{bookId}/author-remove/{authorId}\")\n+    public String removeAuthorFromBook(@PathVariable Long bookId,@PathVariable Long authorId){\n+        catalogService.removeAuthorFromBook(bookId,authorId);\n+        return \"redirect:/books\";\n+    }\n+\n+    @GetMapping(\"/{bookId}/author-add/{authorId}\")\n+    public String addAuthorToBook(@PathVariable Long bookId,@PathVariable Long authorId){\n+        catalogService.adAuthorToBook(bookId,authorId);\n+        return \"redirect:/books\";\n+    }\n+\n+    @PostMapping(\"/{id}/edit-book\")\n+    public String editBook(Book book) {\n+        catalogService.upgradeBook(book);\n+        return \"redirect:/books\";\n+    }\n+\n+    @GetMapping(\"/add-author\")\n+    public String addAuthor(Model model) {\n+        model.addAttribute(\"deleteAuthor\", catalogService.findAllAuthors());\n+        model.addAttribute(\"author\", new Author());\n+        return \"addauthor\";\n+    }\n+\n+    @PostMapping(\"/add-author\")\n+    public String addAuthor(Author author) {\n+        catalogService.addAuthor(author);\n+        return \"redirect:/\";\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c63be9d5343fd1b3f9cac65ea8dd05efb5f13924",
    "filename": "src/main/java/pl/mt/demo/BookFilters.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/BookFilters.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/BookFilters.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/BookFilters.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,22 @@\n+package pl.mt.demo;\n+\n+public class BookFilters {\n+    private String title;\n+    private String name;\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "866d98dae519e10e2daf6b850549f901340f3658",
    "filename": "src/main/java/pl/mt/demo/CatalogService.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/CatalogService.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/CatalogService.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/CatalogService.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,81 @@\n+package pl.mt.demo;\n+\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+public class CatalogService {\n+\n+    private final BookCatalogRepository bookCatalogRepository;\n+    private final AuthorRepository authorRepository;\n+\n+    public CatalogService(BookCatalogRepository bookCatalogRepository, AuthorRepository authorRepository) {\n+        this.bookCatalogRepository = bookCatalogRepository;\n+        this.authorRepository = authorRepository;\n+    }\n+\n+    public List<Book> findAllBook() {\n+        return bookCatalogRepository.findAll();\n+    }\n+\n+    public Book addBook(Book book) {\n+        return bookCatalogRepository.save(book);\n+    }\n+\n+    public Author addAuthor(Author author) {\n+        return authorRepository.save(author);\n+    }\n+\n+    public void upgradeBook(Book book) {\n+        bookCatalogRepository.save(book);\n+    }\n+\n+    public Optional<Book> findById(Long id) {\n+        return bookCatalogRepository.findById(id);\n+    }\n+\n+    public List<Book> findAllForFilters(BookFilters bookFilters) {\n+        return bookCatalogRepository.findByTitleContainingIgnoreCase(\n+                bookFilters.getTitle());\n+    }\n+\n+    public List<Author> findAllAuthors() {\n+        return authorRepository.findAll();\n+    }\n+\n+    public void deleteBookById(Long id) {\n+        bookCatalogRepository.deleteById(id);\n+    }\n+\n+    public void deleteAuthorById(Long id){\n+        authorRepository.deleteById(id);\n+    }\n+\n+    public void removeAuthorFromBook(Long bookId, Long authorId) {\n+     Optional<Author> author = authorRepository.findById(authorId);\n+     Optional<Book> book = bookCatalogRepository.findById(bookId);\n+\n+     if(author.isPresent() && book.isPresent()){\n+         Book editBook = book.get();\n+         editBook.getAuthors().remove(author.get());\n+         bookCatalogRepository.save(editBook);\n+     }else {\n+         System.err.println(\"Nie udało się usunąć autora\");\n+     }\n+    }\n+\n+    public void adAuthorToBook(Long bookId, Long authorId) {\n+        Optional<Author> author = authorRepository.findById(authorId);\n+        Optional<Book> book = bookCatalogRepository.findById(bookId);\n+\n+        if(author.isPresent() && book.isPresent()){\n+            Book editBook = book.get();\n+            editBook.getAuthors().add(author.get());\n+            bookCatalogRepository.save(editBook);\n+        }else {\n+            System.err.println(\"Nie udało się doać autora\");\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f3ee170c31fbbb19687dc2e5ed01ec34f568bba7",
    "filename": "src/main/java/pl/mt/demo/RentalBook.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/RentalBook.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/RentalBook.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/RentalBook.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,24 @@\n+//package pl.mt.demo;\n+//\n+//import lombok.Data;\n+//\n+//import javax.persistence.*;\n+//import java.util.ArrayList;\n+//import java.util.List;\n+//\n+//@Data\n+//@Entity\n+//public class RentalBook {\n+//    @Id\n+//    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+//    Long id;\n+//    String name;\n+//\n+//    @ManyToMany(mappedBy = \"authors\", cascade = {CascadeType.MERGE, CascadeType.PERSIST})\n+//    private List<Book> books = new ArrayList<>();\n+//\n+//    public void addBook(Book book){\n+//        this.books.add(book);\n+//        book.getAuthors().add(this);\n+//    }\n+//}"
  },
  {
    "sha": "8ebd037e1b9c274f30bf445725a7cf054ff7ce46",
    "filename": "src/main/java/pl/mt/demo/admin/AdministratorController.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/admin/AdministratorController.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/admin/AdministratorController.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/admin/AdministratorController.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,30 @@\n+package pl.mt.demo.admin;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import pl.mt.demo.user.User;\n+import pl.mt.demo.user.UserDto;\n+import pl.mt.demo.user.UserDtoService;\n+import pl.mt.demo.user.UserService;\n+\n+import java.util.List;\n+\n+@Controller\n+public class AdministratorController {\n+\n+    private final UserService userService;\n+    private final UserDtoService userDtoService;\n+\n+    public AdministratorController(UserService userService, UserDtoService userDtoService) {\n+        this.userService = userService;\n+        this.userDtoService = userDtoService;\n+    }\n+\n+    @GetMapping(\"/admin\")\n+    public String administrationPanel(Model model) {\n+        List<User> users = userService.findAll();\n+        model.addAttribute(\"users\", users);\n+        return \"/admin\";\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9f959026e94b2d81df5adef4858723f10a570cb0",
    "filename": "src/main/java/pl/mt/demo/config/MyUserDetailsService.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/config/MyUserDetailsService.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/config/MyUserDetailsService.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/config/MyUserDetailsService.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,48 @@\n+package pl.mt.demo.config;\n+\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import pl.mt.demo.user.User;\n+import pl.mt.demo.user.UserRepository;\n+import pl.mt.demo.user.UserRole;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Service\n+public class MyUserDetailsService implements UserDetailsService {\n+\n+    private UserRepository userRepository;\n+\n+    public MyUserDetailsService(UserRepository userRepository) {\n+        this.userRepository = userRepository;\n+    }\n+\n+    @Transactional\n+    @Override\n+    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\n+\n+        User user = userRepository.findByEmail(email);\n+        if (user == null)\n+            throw new UsernameNotFoundException(\"User not found\");\n+            org.springframework.security.core.userdetails.User userDetails =\n+                    new org.springframework.security.core.userdetails.User(\n+                            user.getEmail(),\n+                            user.getPassword(),\n+                            convertAuthorities(user.getRoles()));\n+\n+            return userDetails;\n+        }\n+\n+    private Set<GrantedAuthority> convertAuthorities(Set<UserRole> userRoles) {\n+        Set<GrantedAuthority> authorities = new HashSet<>();\n+        for (UserRole user : userRoles) {\n+            authorities.add(new SimpleGrantedAuthority(user.getRole().name()));\n+        }\n+        return authorities;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0cee524098c97041dd2c710705f3091efcb35ffe",
    "filename": "src/main/java/pl/mt/demo/config/SecurityConfig.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/config/SecurityConfig.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/config/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/config/SecurityConfig.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,46 @@\n+package pl.mt.demo.config;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.builders.WebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.crypto.factory.PasswordEncoderFactories;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+\n+@Configuration\n+public class SecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        http.authorizeRequests()\n+                .antMatchers(\"/\").permitAll()\n+                .antMatchers(\"/resources/**\").permitAll()\n+                .antMatchers(\"/register\").permitAll()\n+                .antMatchers(\"/login\").permitAll()\n+                .antMatchers(\"/h2-console/**\").permitAll()\n+                .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n+                .anyRequest().authenticated()\n+                .and()\n+                .formLogin()\n+                .loginPage(\"/login\")\n+                .defaultSuccessUrl(\"/home\",true)\n+                .permitAll()\n+                .and()\n+                .logout()\n+                .logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\"))\n+                .logoutSuccessUrl(\"/\");\n+    }\n+\n+    @Override\n+    public void configure(WebSecurity web) throws Exception {\n+        web.ignoring()\n+                .antMatchers(\"/h2-console/**\");\n+    }\n+\n+    @Bean\n+    public PasswordEncoder passwordEncoder() {\n+        return PasswordEncoderFactories.createDelegatingPasswordEncoder();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0501c684e411e76dd29431f94bea2467441d0ee7",
    "filename": "src/main/java/pl/mt/demo/passwordOrLogin/AuthenicationService.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/passwordOrLogin/AuthenicationService.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/passwordOrLogin/AuthenicationService.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/passwordOrLogin/AuthenicationService.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,43 @@\n+package pl.mt.demo.passwordOrLogin;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+import org.springframework.stereotype.Service;\n+import pl.mt.demo.user.*;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+@Service\n+public class AuthenicationService {\n+\n+    private final UserRepository userRepository;\n+    private final UserRoleRepository userRoleRepository;\n+    private final PasswordEncoder passwordEncoder;\n+\n+    @Autowired\n+    public AuthenicationService(UserRepository userRepository, UserRoleRepository userRoleRepository, PasswordEncoder passwordEncoder) {\n+        this.userRepository = userRepository;\n+        this.userRoleRepository = userRoleRepository;\n+        this.passwordEncoder = passwordEncoder;\n+    }\n+\n+    public void addWithDefaultRole(User user) {\n+        Role defaultRole = Role.ROLE_USER;\n+        UserRole userRole = new UserRole(user, defaultRole);\n+\n+        List<UserRole> list = Collections.singletonList(userRole);\n+        user.setRoles(new HashSet<>(list));\n+\n+        String passwordHash = passwordEncoder.encode(user.getPassword());\n+        user.setPassword(passwordHash);\n+\n+        userRepository.save(user);\n+        userRoleRepository.save(userRole);\n+    }\n+\n+    public void updatePassword(User user, String password) {\n+        user.setPassword(passwordEncoder.encode(password));\n+    }\n+}"
  },
  {
    "sha": "ea5491d326774d1640c212447728f67e97efc49f",
    "filename": "src/main/java/pl/mt/demo/passwordOrLogin/SecurityController.java",
    "status": "added",
    "additions": 94,
    "deletions": 0,
    "changes": 94,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/passwordOrLogin/SecurityController.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/passwordOrLogin/SecurityController.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/passwordOrLogin/SecurityController.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,94 @@\n+package pl.mt.demo.passwordOrLogin;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import pl.mt.demo.user.User;\n+import pl.mt.demo.user.UserDto;\n+import pl.mt.demo.user.UserDtoService;\n+import pl.mt.demo.user.UserService;\n+\n+import java.security.Principal;\n+\n+@Controller\n+public class SecurityController {\n+\n+    private final UserService userService;\n+    private final UserDtoService userDtoService;\n+\n+    public SecurityController(UserService userService, UserDtoService userDtoService) {\n+        this.userService = userService;\n+        this.userDtoService = userDtoService;\n+    }\n+\n+    @GetMapping(\"/\")\n+    public String index() {\n+        return \"index\";\n+    }\n+\n+    @GetMapping(\"/login\")\n+    public String loginPage(@RequestParam(required = false) String error, Model model) {\n+        boolean errorInformation = false;\n+        if (error != null) {\n+            errorInformation = true;\n+        }\n+        model.addAttribute(\"showErrorMessage\", errorInformation);\n+        return \"/login\";\n+    }\n+\n+    @GetMapping(\"/register\")\n+    public String register(Model model) {\n+        model.addAttribute(\"user\", new User());\n+        return \"/register\";\n+    }\n+\n+    @PostMapping(\"/register\")\n+    public String registerUser(User user) {\n+        String email = user.getEmail();\n+        String password = user.getPassword();\n+        userService.registerUser(email, password);\n+        return \"/registerSuccess\";\n+    }\n+\n+    @GetMapping(\"/edit-password\")\n+    public String editUserPassword(Model model, Principal principal) {\n+        User userToEdit = userService.findByEmail(principal.getName());\n+        model.addAttribute(\"user\", userToEdit);\n+        return \"/editPassword\";\n+    }\n+\n+    @PostMapping(\"/edit-password\")\n+    public String saveNewPassword(User user, @RequestParam String password) {\n+        userService.updatePassword(user, password);\n+        return \"redirect:/home\";\n+    }\n+\n+    @GetMapping(\"/edit-user\")\n+    public String editUser(Model model, Principal principal) {\n+        User userToEdit = userService.findByEmail(principal.getName());\n+        model.addAttribute(\"user\", userToEdit);\n+        return \"/edituser\";\n+    }\n+\n+    @PostMapping(\"/edit-user\")\n+    public String editAndSaveUser(@RequestParam Long id, @RequestParam String email) {\n+        userService.updateUser(id, email);\n+        return \"redirect:/home\";\n+    }\n+\n+    @GetMapping(\"/{id}/edit-user\")\n+    public String getUser(@PathVariable Long id, Model model) {\n+        UserDto userDto = userService.getUserDtoFromUser(id);\n+        model.addAttribute(\"user\", userDto);\n+        return \"editUserRole\";\n+    }\n+\n+    @PostMapping(\"/{id}/edit-user\")\n+    public String editUser(UserDto userDto) {\n+        userDtoService.saveDtoForUser(userDto);\n+        return \"redirect:/admin\";\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "68d54c1e3159832be4a21acedd70cfff762cf273",
    "filename": "src/main/java/pl/mt/demo/user/Role.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/Role.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/Role.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/user/Role.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,6 @@\n+package pl.mt.demo.user;\n+\n+public enum Role {\n+\n+    ROLE_USER, ROLE_ADMIN\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "11cbd807cab290c369254fbc23feb9d38780d902",
    "filename": "src/main/java/pl/mt/demo/user/User.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/User.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/User.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/user/User.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,64 @@\n+package pl.mt.demo.user;\n+\n+import javax.persistence.*;\n+import java.util.Set;\n+\n+@Entity\n+public class User {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    private String password;\n+\n+    private String email;\n+\n+    private String role;\n+\n+    @OneToMany(mappedBy = \"user\", cascade = CascadeType.PERSIST)\n+    private Set<UserRole> roles;\n+\n+    public User() {\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public String getRole() {\n+        return role;\n+    }\n+\n+    public void setRole(String role) {\n+        this.role = role;\n+    }\n+\n+    public Set<UserRole> getRoles() {\n+        return roles;\n+    }\n+\n+    public void setRoles(Set<UserRole> roles) {\n+        this.roles = roles;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f6d3fdd31be81a107b2c3b2989bdbb304944e885",
    "filename": "src/main/java/pl/mt/demo/user/UserDto.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserDto.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserDto.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/user/UserDto.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,41 @@\n+package pl.mt.demo.user;\n+\n+public class UserDto {\n+\n+    private Long id;\n+    private String email;\n+    private boolean administratorAcces;\n+\n+    public UserDto() {\n+    }\n+\n+    public UserDto(Long id, String email, boolean administratorAcces) {\n+        this.id = id;\n+        this.email = email;\n+        this.administratorAcces = administratorAcces;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public boolean isAdministratorAcces() {\n+        return administratorAcces;\n+    }\n+\n+    public void setAdministratorAcces(boolean administratorAcces) {\n+        this.administratorAcces = administratorAcces;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "99dfcda5b651f8815ceef568904df6d645dd2731",
    "filename": "src/main/java/pl/mt/demo/user/UserDtoService.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserDtoService.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserDtoService.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/user/UserDtoService.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,55 @@\n+package pl.mt.demo.user;\n+\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static pl.mt.demo.user.Role.ROLE_ADMIN;\n+import static pl.mt.demo.user.Role.ROLE_USER;\n+\n+@Component\n+public class UserDtoService {\n+\n+    private UserRepository userRepository;\n+    private UserRoleRepository userRoleRepository;\n+\n+    public UserDtoService(UserRepository userRepository, UserRoleRepository userRoleRepository) {\n+        this.userRepository = userRepository;\n+        this.userRoleRepository = userRoleRepository;\n+    }\n+\n+    public UserDto userToDto(User user) {\n+        return new UserDto(user.getId(), user.getEmail(), userIsAdmin(user));\n+    }\n+\n+    public void saveDtoForUser(UserDto userDto) {\n+        Optional<User> optionalUser = userRepository.findById(userDto.getId());\n+        if (optionalUser.isPresent()) {\n+            User user = optionalUser.get();\n+            setRoleForUser(user, userDto.isAdministratorAcces());\n+        }\n+    }\n+\n+    @Transactional\n+    public void setRoleForUser(User user, boolean isAdministratorAcces) {\n+        userRoleRepository.deleteByUser(user);\n+        if (isAdministratorAcces) {\n+            UserRole userRole = new UserRole(user, ROLE_USER);\n+            UserRole adminRole = new UserRole(user, ROLE_ADMIN);\n+            userRoleRepository.save(userRole);\n+            userRoleRepository.save(adminRole);\n+        } else {\n+            UserRole userRole = new UserRole(user, ROLE_USER);\n+            userRoleRepository.save(userRole);\n+        }\n+    }\n+\n+    public boolean userIsAdmin(User user) {\n+        Set<UserRole> roles = user.getRoles();\n+        boolean match = roles.stream()\n+                .anyMatch(userRole -> userRole.getRole().name().equals(ROLE_ADMIN.name()));\n+        return match;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "783a81da18537902d02313e22717069c26ce2ead",
    "filename": "src/main/java/pl/mt/demo/user/UserRepository.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserRepository.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserRepository.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/user/UserRepository.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,8 @@\n+package pl.mt.demo.user;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+public interface UserRepository extends JpaRepository<User, Long> {\n+\n+    User findByEmail(String email);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d529ecf1e992248ef21d3692986d926197029499",
    "filename": "src/main/java/pl/mt/demo/user/UserRole.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserRole.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserRole.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/user/UserRole.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,49 @@\n+package pl.mt.demo.user;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class UserRole {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @ManyToOne\n+    private User user;\n+\n+    @Enumerated(EnumType.STRING)\n+    private Role role;\n+\n+    public UserRole() {\n+    }\n+\n+    public UserRole(User user, Role role) {\n+        this.user = user;\n+        this.role = role;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(User user) {\n+        this.user = user;\n+    }\n+\n+    public Role getRole() {\n+        return role;\n+    }\n+\n+    public void setRole(Role role) {\n+        this.role = role;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1d0450dcf43342e28738277cf6ce8bd92b037e38",
    "filename": "src/main/java/pl/mt/demo/user/UserRoleRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserRoleRepository.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserRoleRepository.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/user/UserRoleRepository.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,14 @@\n+package pl.mt.demo.user;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+public interface UserRoleRepository extends JpaRepository<UserRole, Long> {\n+\n+    List<UserRole> findByUser(User user);\n+\n+    @Transactional\n+    List<UserRole> deleteByUser(User user);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "867f7b85005b816aa2840661f67d16ec1ea1c598",
    "filename": "src/main/java/pl/mt/demo/user/UserService.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserService.java",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/java/pl/mt/demo/user/UserService.java",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/java/pl/mt/demo/user/UserService.java?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,74 @@\n+package pl.mt.demo.user;\n+\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+import org.springframework.stereotype.Service;\n+import pl.mt.demo.passwordOrLogin.AuthenicationService;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service\n+public class UserService {\n+\n+    private final PasswordEncoder passwordEncoder;\n+    private final UserRepository userRepository;\n+    private final AuthenicationService authenicationService;\n+    private final UserDtoService userDtoService;\n+\n+    public UserService(PasswordEncoder passwordEncoder, UserRepository userRepository, AuthenicationService authenicationService, UserDtoService userDtoService) {\n+        this.passwordEncoder = passwordEncoder;\n+        this.userRepository = userRepository;\n+        this.authenicationService = authenicationService;\n+        this.userDtoService = userDtoService;\n+    }\n+\n+    public void registerUser(String email, String password) {\n+        User userCreate = new User();\n+\n+        userCreate.setEmail(email);\n+        String codePassword = passwordEncoder.encode(password);\n+        userCreate.setPassword(codePassword);\n+        List<UserRole> list = Collections.singletonList(new UserRole(userCreate, Role.ROLE_USER));\n+\n+        userCreate.setRoles(new HashSet<>(list));\n+        userRepository.save(userCreate);\n+    }\n+\n+    public void updatePassword(User user, String password) {\n+        Optional<User> foundUser = userRepository.findById(user.getId());\n+        if (foundUser.isPresent()) {\n+            User userToUpdate = foundUser.get();\n+            authenicationService.updatePassword(userToUpdate, password);\n+            userRepository.save(userToUpdate);\n+        }\n+    }\n+\n+    public User getUsersById(Long id) {\n+        return userRepository.findById(id).orElseThrow(IllegalArgumentException::new);\n+    }\n+\n+    public User findById(Long id) {\n+        return userRepository.findById(id).orElseThrow(IllegalArgumentException::new);\n+    }\n+\n+    public void updateUser(Long id, String email) {\n+        User userToEdit = findById(id);\n+        userToEdit.setEmail(email);\n+        userRepository.save(userToEdit);\n+    }\n+    public UserDto getUserDtoFromUser(Long id) {\n+        User userToEdit = getUsersById(id);\n+        UserDto userDto = userDtoService.userToDto(userToEdit);\n+        return userDto;\n+    }\n+\n+    public List<User> findAll() {\n+        return userRepository.findAll();\n+    }\n+\n+    public User findByEmail(String email){\n+        return userRepository.findByEmail(email);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "71c3bde69f7bf50144af89c005c5ae566351c4a5",
    "filename": "src/main/resources/application.properties",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/application.properties",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/resources/application.properties?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1 @@\n+spring.datasource.url=jdbc:h2:mem:testdb"
  },
  {
    "sha": "102a777a5bd5bf7142a0388a71289942331fd7f2",
    "filename": "src/main/resources/data.sql",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/data.sql",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/data.sql",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/resources/data.sql?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,39 @@\n+INSERT INTO book (title,publisher,translation, genre, publishing_cycle, isbn, release_date)VALUES\n+('Przez ciemne zwierciadło', 'Dom Wydawniczy REBIS','Tomasz Jabłoński', 'science fiction','','978-83-7510-920-7', '2016') ,\n+('Labirynt śmierci', 'Dom Wydawniczy REBIS','Arkadiusz Nakoniecznik', 'science fiction','','978-83-8062-255-5', '2017'),\n+('Boża inwazja', 'Dom Wydawniczy REBIS','Lech Jęczmyk', 'science fiction','','978-83-7510-119-5','2017'),\n+('Wbrew wskazówkom zegara', 'Dom Wydawniczy REBIS','Maciej Szymański', 'science fiction','','978-83-7818-476-8','2013'),\n+('Wyznania łgarza', 'Dom Wydawniczy REBIS','Tomasz Jabłońsk', 'science fiction','','978-83-7510-859-0', '2012'),\n+('Doktor Bluthgeld', 'Dom Wydawniczy REBIS','Tomasz Jabłońsk', 'science fiction','','978-83-7510-569-8', '2016'),\n+('Oko na niebie', 'Dom Wydawniczy REBIS','Katarzyna Mioduszewicz', 'science fiction','','978-83-7818-577-2', '2015'),\n+('Elektryczna mrówka', 'Dom Wydawniczy REBIS','Janusz Szczepański', 'science fiction','','978-83-8062-141-1', '2017'),\n+('Zbrojni', 'Prószyński i S-ka','Piotr W. Cholewa', 'Fantasy','Świat Dysku','83-7337-201-6', ''),\n+('Ciekawe Czasy', 'Prószyński i S-ka','Piotr W. Cholewa', 'Fantasy','Świat Dysku','83-7337-292-X', '2003');\n+INSERT INTO author (name)VALUES\n+('Philip K. Dick'),\n+('Terry Pratchett');\n+INSERT INTO book_authors(books_id, authors_id)VALUES\n+(1,1),\n+(2,1),\n+(3,1),\n+(4,1),\n+(5,1),\n+(6,1),\n+(7,1),\n+(8,1),\n+(9,2),\n+(10,2);\n+\n+INSERT INTO user ( email, password) VALUES\n+('admin@byom.de','{noop}123'),\n+('ziltoid@byom.de','{noop}321'),\n+('wilqu@byom.de','{noop}321'),\n+('entombed@byom.de','{noop}321');\n+\n+INSERT INTO user_role(user_id, role) VALUES\n+(1,'ROLE_ADMIN'),\n+(1,'ROLE_USER'),\n+(2,'ROLE_USER'),\n+(3,'ROLE_USER'),\n+(4,'ROLE_USER'),\n+(4,'ROLE_ADMIN');\n\\ No newline at end of file"
  },
  {
    "sha": "b158dc5b1b8523db4b96c29fe522896f4c7226de",
    "filename": "src/main/resources/static/style/style.css",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/static/style/style.css",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/static/style/style.css",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/resources/static/style/style.css?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,78 @@\n+* {\n+    box-sizing: border-box;\n+}\n+html {\n+    min-height: 100%;\n+    position: relative;\n+}\n+body {\n+    margin: 0;\n+    padding: 0;\n+    background: whitesmoke;\n+    font-family: 'Lato', sans-serif;\n+    min-height: 100%;\n+}\n+.container {\n+    background-color: whitesmoke ;\n+    border-radius: 10px;\n+    text-align: center;\n+    padding: 10px;\n+    margin: 10px auto;\n+    width: 80%;\n+    min-height: 100%;\n+    position: relative;\n+}\n+.footerstyle{\n+    position: absolute;\n+    bottom: 0;\n+    width: 100%;\n+    padding: 0.5rem;\n+    text-align: center;\n+}\n+.headerstyle{\n+    padding: 0.5rem;\n+    background: whitesmoke;\n+    text-align: center;\n+    height: 10rem;\n+}\n+.layout {\n+    padding: 100px 0;\n+    text-align: center;\n+}\n+.top {\n+    max-width: 800px;\n+    margin: auto;\n+    background-color: whitesmoke;\n+    color: white;\n+    width: 80%;\n+    border-radius: 10px;\n+    padding: 30px;\n+}\n+.margin{\n+    margin: 10px;\n+}\n+a {\n+    text-decoration: none;\n+}\n+.menu {\n+    margin: 10px;\n+    padding-bottom: 10px;\n+}\n+.btn-outline-success{\n+    margin: 10px;\n+}\n+.table {\n+    width: 80%;\n+    height: 80%;\n+    margin: auto;\n+}\n+.form-check form-switch{\n+  position: center;\n+}\n+.details {\n+    margin: auto;\n+    padding-top: 20px;\n+}\n+.deletebtn {\n+    text-align: right;\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7098b28aac98f066a468484717fb048f6a4e994a",
    "filename": "src/main/resources/templates/addauthor.html",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/templates/addauthor.html",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/templates/addauthor.html",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/resources/templates/addauthor.html?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,36 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>Dodawanie autora</title>\n+    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n+          integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\" crossorigin=\"anonymous\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"../style.css\">\n+</head>\n+<body>\n+<div class=\"container\">\n+    <a type=\"button\" class=\"btn btn-outline-success\" href=\"/\">Powrót do Strony głównej</a>\n+</div>\n+<div>\n+    <form action=\"/add-author\" method=\"post\" th:object=\"${author}\" class=\"container\">\n+        <input type=\"hidden\" th:field=\"*{id}\"/>\n+        <div class=\"margin\">\n+            <h3>Dodawanie Autora</h3>\n+            <h3>Imię i nazwisko autora</h3>\n+            <input class=\"form-control\" type=\"text\" placeholder=\"\" aria-label=\"default input example\"\n+                   th:field=\"*{name}\">\n+        </div>\n+        <br>\n+        <input type=\"submit\" th:value=\"Zapisz\" class=\"btn btn-primary\">\n+    </form>\n+    <div class=\"container\">\n+        <h3>Usuwanie Autora Niedopisanego do książki (Opcjonalnie)</h3>\n+        <form action=\"/add-author\" method=\"post\" th:object=\"${deleteAuthor}\" class=\"container\">\n+            <a type=\"button\" class=\"btn btn-outline-danger\" th:href=\"|/${authors.id}/addauthor/delete|\"\n+               th:each=\"authors: ${deleteAuthor}\" th:text=\"${authors.name}\" th:value=\"${authors.id}\"> </a>\n+        </form>\n+    </div>\n+</div>\n+<div th:replace=\"fragments::footer\"></div>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "9265042af6167f70354396fbed12016a9b894534",
    "filename": "src/main/resources/templates/addbook.html",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/templates/addbook.html",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/templates/addbook.html",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/resources/templates/addbook.html?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,49 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>Dodawanie książki</title>\n+    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n+          integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\" crossorigin=\"anonymous\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"../style.css\">\n+</head>\n+<body>\n+<div class=\"container\">\n+    <a type=\"button\" class=\"btn btn-outline-success\" href=\"/\">Powrót do Strony głównej</a>\n+</div>\n+<div>\n+    <form action=\"/add-book\" method=\"post\" th:object=\"${addBook}\" class=\"container\">\n+        <input type=\"hidden\" th:field=\"*{id}\"/>\n+        <div class=\"margin\">\n+            <h3>Tyłuł książki</h3>\n+            <input class=\"form-control\" type=\"text\" placeholder=\"\" aria-label=\"default input example\"\n+                   th:field=\"*{title}\">\n+            <h3>Autor</h3>\n+            <select class=\"form-select\" aria-label=\"Default select example\" th:field=\"*{authors}\" multiple>\n+                <option th:each=\"aut: ${author}\" th:text=\"${aut.name}\" th:value=\"${aut.id}\">One</option>\n+            </select>\n+            <h3>Cykl</h3>\n+            <input class=\"form-control\" type=\"text\" placeholder=\"\" aria-label=\"default input example\"\n+                   th:field=\"*{publishingCycle}\">\n+            <h3>Wydawca</h3>\n+            <input class=\"form-control\" type=\"text\" placeholder=\"\" aria-label=\"default input example\"\n+                   th:field=\"*{publisher}\">\n+            <h3>Tłumaczenie</h3>\n+            <input class=\"form-control\" type=\"text\" placeholder=\"\" aria-label=\"default input example\"\n+                   th:field=\"*{translation}\">\n+            <h3>Rok wydania</h3>\n+            <input class=\"form-control\" type=\"text\" placeholder=\"\" aria-label=\"default input example\"\n+                   th:field=\"*{releaseDate}\">\n+            <h3>ISBN</h3>\n+            <input class=\"form-control\" type=\"text\" placeholder=\"\" aria-label=\"default input example\"\n+                   th:field=\"*{isbn}\">\n+            <h3>Gatunek</h3>\n+            <input class=\"form-control\" type=\"text\" placeholder=\"\" aria-label=\"default input example\"\n+                   th:field=\"*{genre}\">\n+        </div>\n+        <br>\n+        <input type=\"submit\" th:value=\"Zapisz\" class=\"btn btn-primary\">\n+    </form>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "f7059cd7483466054c527047411e65b4e7e7d6e1",
    "filename": "src/main/resources/templates/admin.html",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/templates/admin.html",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/templates/admin.html",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/resources/templates/admin.html?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,37 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>Panel Administratora</title>\n+    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n+          integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\" crossorigin=\"anonymous\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"style/style.css\">\n+</head>\n+<body>\n+<div class=\"container\">\n+    <h1>Panel Administratora</h1>\n+    <div>\n+        <a type=\"button\" href=\"/home\" class=\"btn btn-outline-success\"> Strona główna </a>\n+    </div>\n+</div>\n+<table class=\"table\">\n+    <thead>\n+    <tr>\n+        <th scope=\"col\">Login</th>\n+        <th scope=\"col\">Hasło</th>\n+        <th scope=\"col\">Nadaj prawa admin.</th>\n+    </tr>\n+    </thead>\n+    <tbody>\n+    <tr th:each=\"user:${users}\">\n+        <td th:text=\"${user.email}\"></td>\n+        <td th:text=\"${user.password}\"></td>\n+        <td>\n+            <a type=\"button\" class=\"btn btn-outline-success\" role=\"button\" th:href=\"|/${user.id}/edit-user|\">Edytuj\n+            </a>\n+        </td>\n+    </tr>\n+    </tbody>\n+</table>\n+</body>\n+</html>\n\\ No newline at end of file"
  },
  {
    "sha": "4e346711556c8d249700b508f90ba9ed32ddb19c",
    "filename": "src/main/resources/templates/bookdetails.html",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/MaciejTomaszewski81/modul27b/blob/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/templates/bookdetails.html",
    "raw_url": "https://github.com/MaciejTomaszewski81/modul27b/raw/98b1f361b81efaff7c77ec4d4bae038f44057f5b/src/main/resources/templates/bookdetails.html",
    "contents_url": "https://api.github.com/repos/MaciejTomaszewski81/modul27b/contents/src/main/resources/templates/bookdetails.html?ref=98b1f361b81efaff7c77ec4d4bae038f44057f5b",
    "patch": "@@ -0,0 +1,63 @@\n+<!DOCTYPE html>\n+<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>Szczegóły</title>\n+    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n+          integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\" crossorigin=\"anonymous\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"/style.css\">\n+</head>\n+<body>\n+<div class=\"details\">\n+    <div class=\"table-responsive\">\n+        <table class=\"table\">\n+            <tbody>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Tytuł</th>\n+                <td th:text=\"*{title}\"></td>\n+            </tr>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Autor</th>\n+                <td>\n+                    <p th:each=\"author: *{authors}\" th:text=\"${author.name}\"></p>\n+                </td>\n+            </tr>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Tytuł</th>\n+                <td th:text=\"*{title}\"></td>\n+            </tr>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Data wytdania</th>\n+                <td th:text=\"*{releaseDate}\"></td>\n+            </tr>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Wydawca</th>\n+                <td th:text=\"*{publisher}\"></td>\n+            </tr>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Tłumaczenie</th>\n+                <td th:text=\"*{translation}\"></td>\n+            </tr>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Cykl wydawniczy</th>\n+                <td th:text=\"*{publishingCycle}\"></td>\n+            </tr>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Gatunek literacki</th>\n+                <td th:text=\"*{genre}\"></td>\n+            </tr>\n+            <tr th:object=\"${bookDetails}\">\n+                <th scope=\"row\">Isbn</th>\n+                <td th:text=\"*{isbn}\"></td>\n+            </tr>\n+            </tbody>\n+        </table>\n+    </div>\n+    <div class=\"container\">\n+        <a type=\"button\" class=\"btn btn-outline-success\" href=\"/books\"> Powrót do listy książek </a>\n+        <a type=\"button\" class=\"btn btn-outline-success\" href=\"/\"> Powrót do strony głównej </a>\n+    </div>\n+</div>\n+<div th:replace=\"fragments::footer\"></div>\n+</body>\n+</html>\n\\ No newline at end of file"
  }
]
