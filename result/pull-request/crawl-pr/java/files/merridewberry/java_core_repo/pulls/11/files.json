[
  {
    "sha": "31d86e26c4ff16d1ce757dd72a40763a1a280dba",
    "filename": "Lesson09/Lesson09.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/merridewberry/java_core_repo/blob/2f5476cf0b862ee9f288a5032a54b2f6642585f2/Lesson09/Lesson09.java",
    "raw_url": "https://github.com/merridewberry/java_core_repo/raw/2f5476cf0b862ee9f288a5032a54b2f6642585f2/Lesson09/Lesson09.java",
    "contents_url": "https://api.github.com/repos/merridewberry/java_core_repo/contents/Lesson09/Lesson09.java?ref=2f5476cf0b862ee9f288a5032a54b2f6642585f2",
    "patch": "@@ -0,0 +1,96 @@\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class Lesson09 {\n+\n+    static class Student {\n+        protected String name;\n+        protected List<Course> allCourses;\n+\n+        public Student(String name, List<Course> allCourses) {\n+            this.name = name;\n+            this.allCourses = allCourses;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public List<Course> getAllCourses() {\n+            return allCourses;\n+        }\n+    }\n+\n+    static class Course {\n+        protected String name;\n+\n+        public Course(String name) {\n+            this.name = name;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+    }\n+\n+    static List<Course> getUniqueCourses(List<Student> students) {\n+        return students.stream()\n+                .map(Student::getAllCourses)\n+                .flatMap(List::stream)\n+                .distinct()\n+                .collect(Collectors.toList());\n+    }\n+\n+    static List<Student> getMostCourses(List<Student> students) {\n+        return students.stream()\n+                .sorted((s1, s2) -> s2.getAllCourses().size() - s1.getAllCourses().size())\n+                .limit(3)\n+                .collect(Collectors.toList());\n+    }\n+\n+   static List<Student> getStudentList(List<Student> students, Course course) {\n+        return students.stream()\n+                .filter(student -> student.getAllCourses().contains(course))\n+                .collect(Collectors.toList());\n+    }\n+\n+    public static void main(String[] args) {\n+\n+        Course math = new Course(\"Math\");\n+        Course english = new Course(\"English\");\n+        Course literature = new Course(\"Literature\");\n+        Course history = new Course(\"History\");\n+        Course science = new Course(\"Science\");\n+        Course pe = new Course(\"PE\");\n+\n+        Student student1 = new Student(\"Jack\", Arrays.asList(math, english, literature, history, science));\n+        Student student2 = new Student(\"Jill\", Arrays.asList(pe, science, math, english));\n+        Student student3 = new Student(\"Alexander Hamilton\", Arrays.asList(history));\n+        Student student4 = new Student(\"Piglet Pyotr\", Arrays.asList(pe, english));\n+        Student student5 = new Student(\"Ella the Cannibal\", Arrays.asList(english, literature, science));\n+        Student student6 = new Student(\"Valentina Tereshkova\", Arrays.asList(pe, math, science, history));\n+\n+        List<Student> students = Arrays.asList(student1, student2, student3, student4, student5, student6);\n+\n+\n+        System.out.println(\"1. Unique courses list:\");\n+        getUniqueCourses(students).stream()\n+                .map(Course::getName)\n+                .forEach(System.out::println);\n+\n+        System.out.println(\"\\n2. Three students partaking in the most courses:\");\n+        getMostCourses(students).stream()\n+                .map(Student::getName)\n+                .forEach(System.out::println);\n+\n+        System.out.println(\"\\n3. Students partaking in the PE course:\");\n+        getStudentList(students, pe).stream()\n+                .map(Student::getName)\n+                .forEach(System.out::println);\n+\n+\n+    }\n+\n+\n+}"
  }
]
