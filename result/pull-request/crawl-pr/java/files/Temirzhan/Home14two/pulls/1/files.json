[
  {
    "sha": "087215a3f30d989dc840ee906ef1bab1586c8cb7",
    "filename": "src/main/java/NewArray.java",
    "status": "modified",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/Temirzhan/Home14two/blob/f35e5001266adb9342ecdb8b514e750c8ff30ec4/src/main/java/NewArray.java",
    "raw_url": "https://github.com/Temirzhan/Home14two/raw/f35e5001266adb9342ecdb8b514e750c8ff30ec4/src/main/java/NewArray.java",
    "contents_url": "https://api.github.com/repos/Temirzhan/Home14two/contents/src/main/java/NewArray.java?ref=f35e5001266adb9342ecdb8b514e750c8ff30ec4",
    "patch": "@@ -1,2 +1,42 @@\n public class NewArray {\n+    public int[] getAfterFour(int[] array){\n+        int lastFour = -1;\n+        if(array.length == 0)\n+            throw new RuntimeException();\n+        for(int i = 0; i < array.length; i++){\n+            if(array[i] == 4)\n+                lastFour = i;\n+        }\n+        if(lastFour != -1){\n+            lastFour++;\n+            int[] newArray = new int[array.length - lastFour];\n+\n+            for (int i = lastFour; i < array.length; i++){\n+                newArray[i-lastFour] = array[i];\n+            }\n+            return newArray;\n+        }else {\n+            throw new RuntimeException();\n+        }\n+\n+    }\n+\n+    public boolean haveOneAndFour(int[] array){\n+        int four = 0;\n+        int one =0;\n+        for(int i = 0; i < array.length; i++){\n+            if(array[i] != 4 && array[i]!= 1) {\n+                return false;\n+            }else if(array[i] == 4)\n+                four = 1;\n+            else if(array[i]==1)\n+                one = 1;\n+            else\n+                return false;\n+        }\n+        if(four != 0 && one !=0)\n+            return true;\n+\n+        return false;\n+    }\n }"
  },
  {
    "sha": "145cfd1ee65629ac942b1b73b78d62c6f3a38547",
    "filename": "src/test/java/ParametrizedTest.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/Temirzhan/Home14two/blob/f35e5001266adb9342ecdb8b514e750c8ff30ec4/src/test/java/ParametrizedTest.java",
    "raw_url": "https://github.com/Temirzhan/Home14two/raw/f35e5001266adb9342ecdb8b514e750c8ff30ec4/src/test/java/ParametrizedTest.java",
    "contents_url": "https://api.github.com/repos/Temirzhan/Home14two/contents/src/test/java/ParametrizedTest.java?ref=f35e5001266adb9342ecdb8b514e750c8ff30ec4",
    "patch": "@@ -0,0 +1,46 @@\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+@RunWith(Parameterized.class)\n+public class ParametrizedTest {\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> params() {\n+        return Arrays.asList(new Object[][]{\n+                {Arrays.asList( 1, 1, 1, 4, 4, 1, 4, 4 ), true},\n+                {Arrays.asList( 1, 1, 1, 1, 1 ,1), false},\n+                {Arrays.asList(4 ,4 ,4 ,4), false},\n+                {Arrays.asList( 1, 4, 4, 1, 1 ,3), false}\n+        });\n+    }\n+\n+    private int[] n1;\n+    private boolean res;\n+    private NewArray array;\n+\n+    public ParametrizedTest(List<Integer> n1,  boolean res) {\n+\n+        this.n1 = new int[n1.size()];\n+        this.res = res;\n+        for(int i = 0;i < this.n1.length;i++){\n+            this.n1[i] = n1.get(i);\n+        }\n+    }\n+    @Before\n+    public void init(){\n+        array = new NewArray();\n+    }\n+    @Test\n+    public void newArrayTest() throws RuntimeException{\n+        Assert.assertEquals(res, array.haveOneAndFour(n1));\n+    }\n+\n+}"
  }
]
