[
  {
    "sha": "86c9fa1abab4dc3707e50b7568b05d3cdc05dda1",
    "filename": "integration_tests/ctesque/src/test/java/android/graphics/BitmapTest.java",
    "status": "modified",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/integration_tests/ctesque/src/test/java/android/graphics/BitmapTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/integration_tests/ctesque/src/test/java/android/graphics/BitmapTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/integration_tests/ctesque/src/test/java/android/graphics/BitmapTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -1,5 +1,6 @@\n package android.graphics;\n \n+import static android.os.Build.VERSION_CODES.JELLY_BEAN;\n import static android.os.Build.VERSION_CODES.M;\n import static android.os.Build.VERSION_CODES.P;\n import static androidx.test.InstrumentationRegistry.getTargetContext;\n@@ -10,6 +11,8 @@\n import androidx.test.filters.SdkSuppress;\n import androidx.test.runner.AndroidJUnit4;\n import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -103,4 +106,49 @@ public void compress() {\n     assertThat(bitmap.compress(CompressFormat.JPEG, 0, stm)).isTrue();\n     assertThat(stm.toByteArray()).isNotEmpty();\n   }\n+\n+  @Test\n+  public void getConfigAfterCompress() throws IOException {\n+    InputStream inputStream = resources.getAssets().open(\"robolectric.png\");\n+    Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\n+    Matrix matrix = new Matrix();\n+    matrix.setScale(0.5f, 0.5f);\n+    Bitmap scaledBitmap =\n+        Bitmap.createBitmap(\n+            bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, /* filter */ true);\n+    assertThat(scaledBitmap.getConfig()).isEqualTo(Bitmap.Config.ARGB_8888);\n+  }\n+\n+  @Test\n+  public void getConfigAfterCreateScaledBitmap() throws IOException {\n+    InputStream inputStream = resources.getAssets().open(\"robolectric.png\");\n+    Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\n+    Bitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap, 50, 50, /* filter= */ false);\n+    assertThat(scaledBitmap.getConfig()).isEqualTo(Bitmap.Config.ARGB_8888);\n+  }\n+\n+  @Test\n+  public void scaledBitmap_sameAs() {\n+    Bitmap bitmap1 = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);\n+    bitmap1.eraseColor(0xffff0000);\n+    Bitmap bitmap2 = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);\n+    bitmap2.eraseColor(0xff00ff00);\n+    assertThat(bitmap1.sameAs(bitmap2)).isFalse();\n+\n+    Bitmap scaled1 = Bitmap.createScaledBitmap(bitmap1, 200, 200, false);\n+    Bitmap scaled2 = Bitmap.createScaledBitmap(bitmap2, 200, 200, false);\n+    assertThat(scaled1.sameAs(scaled2)).isFalse();\n+  }\n+\n+  @Test\n+  @Config(minSdk = JELLY_BEAN)\n+  public void checkBitmapNotRecycled() throws IOException {\n+    InputStream inputStream = resources.getAssets().open(\"robolectric.png\");\n+    BitmapFactory.Options options = new BitmapFactory.Options();\n+    options.inScaled = true;\n+    options.inDensity = 100;\n+    options.inTargetDensity = 500;\n+    Bitmap bitmap = BitmapFactory.decodeStream(inputStream, null, options);\n+    assertThat(bitmap.isRecycled()).isFalse();\n+  }\n }"
  },
  {
    "sha": "cfc9f997bf25c6e8c17a5a5c5a172a4c02bfd9b7",
    "filename": "robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java",
    "status": "modified",
    "additions": 25,
    "deletions": 31,
    "changes": 56,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/main/java/org/robolectric/android/internal/AndroidTestEnvironment.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -102,7 +102,8 @@\n   public AndroidTestEnvironment(\n       @Named(\"runtimeSdk\") Sdk runtimeSdk,\n       @Named(\"compileSdk\") Sdk compileSdk,\n-      ResourcesMode resourcesMode, ApkLoader apkLoader,\n+      ResourcesMode resourcesMode,\n+      ApkLoader apkLoader,\n       ShadowProvider[] shadowProviders,\n       TestEnvironmentLifecyclePlugin[] lifecyclePlugins) {\n     this.runtimeSdk = runtimeSdk;\n@@ -119,8 +120,8 @@ public AndroidTestEnvironment(\n   }\n \n   @Override\n-  public void setUpApplicationState(Method method,\n-      Configuration configuration, AndroidManifest appManifest) {\n+  public void setUpApplicationState(\n+      Method method, Configuration configuration, AndroidManifest appManifest) {\n \n     for (TestEnvironmentLifecyclePlugin e : testEnvironmentLifecyclePlugins) {\n       e.onSetupApplicationState();\n@@ -132,6 +133,7 @@ public void setUpApplicationState(Method method,\n \n     RuntimeEnvironment.application = null;\n     RuntimeEnvironment.setActivityThread(null);\n+    Bootstrap.displaySet = false;\n     RuntimeEnvironment.setTempDirectory(new TempDirectory(createTestDataDirRootPath(method)));\n     if (ShadowLooper.looperMode() == LooperMode.Mode.LEGACY) {\n       RuntimeEnvironment.setMasterScheduler(new Scheduler());\n@@ -151,12 +153,12 @@ public void setUpApplicationState(Method method,\n         new android.content.res.Configuration();\n     DisplayMetrics displayMetrics = new DisplayMetrics();\n \n-    Bootstrap.applyQualifiers(config.qualifiers(), apiLevel, androidConfiguration,\n-        displayMetrics);\n+    Bootstrap.applyQualifiers(config.qualifiers(), apiLevel, androidConfiguration, displayMetrics);\n \n-    Locale locale = apiLevel >= VERSION_CODES.N\n-        ? androidConfiguration.getLocales().get(0)\n-        : androidConfiguration.locale;\n+    Locale locale =\n+        apiLevel >= VERSION_CODES.N\n+            ? androidConfiguration.getLocales().get(0)\n+            : androidConfiguration.locale;\n     Locale.setDefault(locale);\n \n     // Looper needs to be prepared before the activity thread is created\n@@ -172,6 +174,7 @@ public void setUpApplicationState(Method method,\n     preloadClasses(apiLevel);\n \n     RuntimeEnvironment.setAndroidFrameworkJarPath(sdkJarPath);\n+    Bootstrap.setDisplayConfiguration(androidConfiguration, displayMetrics);\n \n     if (configuration.get(LazyLoad.class) == LazyLoad.ON) {\n       RuntimeEnvironment.setConfiguredApplicationClass(\n@@ -247,10 +250,10 @@ private Instrumentation installAndCreateApplication(\n     ShadowActivityThread.setApplicationInfo(applicationInfo);\n \n     _activityThread_.setCompatConfiguration(androidConfiguration);\n-    ReflectionHelpers\n-        .setStaticField(ActivityThread.class, \"sMainThreadHandler\", new Handler(Looper.myLooper()));\n+    ReflectionHelpers.setStaticField(\n+        ActivityThread.class, \"sMainThreadHandler\", new Handler(Looper.myLooper()));\n \n-    Bootstrap.setUpDisplay(androidConfiguration, displayMetrics);\n+    Bootstrap.setUpDisplay();\n     activityThread.applyConfigurationToResources(androidConfiguration);\n \n     Resources systemResources = Resources.getSystem();\n@@ -326,9 +329,7 @@ private Instrumentation installAndCreateApplication(\n \n   private Package loadAppPackage(Config config, AndroidManifest appManifest) {\n     return PerfStatsCollector.getInstance()\n-        .measure(\n-            \"parse package\",\n-            () -> loadAppPackage_measured(config, appManifest));\n+        .measure(\"parse package\", () -> loadAppPackage_measured(config, appManifest));\n   }\n \n   private Package loadAppPackage_measured(Config config, AndroidManifest appManifest) {\n@@ -388,12 +389,11 @@ private ResourcePath createRuntimeSdkResourcePath() {\n     }\n   }\n \n-\n   private void injectResourceStuffForLegacy(AndroidManifest appManifest) {\n     PackageResourceTable systemResourceTable = getSystemResourceTable();\n     PackageResourceTable appResourceTable = apkLoader.getAppResourceTable(appManifest);\n-    RoutingResourceTable combinedAppResourceTable = new RoutingResourceTable(appResourceTable,\n-        systemResourceTable);\n+    RoutingResourceTable combinedAppResourceTable =\n+        new RoutingResourceTable(appResourceTable, systemResourceTable);\n \n     PackageResourceTable compileTimeSdkResourceTable = apkLoader.getCompileTimeSdkResourceTable();\n     ResourceTable combinedCompileTimeResourceTable =\n@@ -419,8 +419,8 @@ private void populateAssetPaths(AssetManager assetManager, AndroidManifest appMa\n   }\n \n   @VisibleForTesting\n-  static Application createApplication(AndroidManifest appManifest, Config config,\n-      ApplicationInfo applicationInfo) {\n+  static Application createApplication(\n+      AndroidManifest appManifest, Config config, ApplicationInfo applicationInfo) {\n     return ReflectionHelpers.callConstructor(\n         getApplicationClass(appManifest, config, applicationInfo));\n   }\n@@ -494,8 +494,7 @@ static String getTestApplicationName(String applicationName) {\n   }\n \n   private static Instrumentation createInstrumentation(\n-      ActivityThread activityThread,\n-      ApplicationInfo applicationInfo, Application application) {\n+      ActivityThread activityThread, ApplicationInfo applicationInfo, Application application) {\n     Instrumentation androidInstrumentation = new RoboMonitoringInstrumentation();\n     reflector(_ActivityThread_.class, activityThread).setInstrumentation(androidInstrumentation);\n \n@@ -513,9 +512,7 @@ private static Instrumentation createInstrumentation(\n     return androidInstrumentation;\n   }\n \n-  /**\n-   * Create a file system safe directory path name for the current test.\n-   */\n+  /** Create a file system safe directory path name for the current test. */\n   private String createTestDataDirRootPath(Method method) {\n     return method.getClass().getSimpleName()\n         + \"_\"\n@@ -557,15 +554,14 @@ public void resetState() {\n   }\n \n   // TODO(christianw): reconcile with ShadowPackageManager.setUpPackageStorage\n-  private void setUpPackageStorage(ApplicationInfo applicationInfo,\n-      PackageParser.Package parsedPackage) {\n+  private void setUpPackageStorage(\n+      ApplicationInfo applicationInfo, PackageParser.Package parsedPackage) {\n     // TempDirectory tempDirectory = RuntimeEnvironment.getTempDirectory();\n     // packageInfo.setVolumeUuid(tempDirectory.createIfNotExists(packageInfo.packageName +\n     // \"-dataDir\").toAbsolutePath().toString());\n \n     if (RuntimeEnvironment.useLegacyResources()) {\n-      applicationInfo.sourceDir =\n-          createTempDir(applicationInfo.packageName + \"-sourceDir\");\n+      applicationInfo.sourceDir = createTempDir(applicationInfo.packageName + \"-sourceDir\");\n       applicationInfo.publicSourceDir =\n           createTempDir(applicationInfo.packageName + \"-publicSourceDir\");\n     } else {\n@@ -599,8 +595,7 @@ private String createTempDir(String name) {\n \n   // TODO move/replace this with packageManager\n   @VisibleForTesting\n-  static void registerBroadcastReceivers(\n-      Application application, AndroidManifest androidManifest) {\n+  static void registerBroadcastReceivers(Application application, AndroidManifest androidManifest) {\n     for (BroadcastReceiverData receiver : androidManifest.getBroadcastReceivers()) {\n       IntentFilter filter = new IntentFilter();\n       for (String action : receiver.getActions()) {\n@@ -624,5 +619,4 @@ static void registerBroadcastReceivers(\n     }\n     return receiverClassName;\n   }\n-\n }"
  },
  {
    "sha": "a81f31e5993999cd8a21660f6f5510026a39d7f7",
    "filename": "robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/RobolectricTestRunnerTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -48,6 +48,8 @@\n import org.robolectric.android.internal.AndroidTestEnvironment;\n import org.robolectric.annotation.Config;\n import org.robolectric.annotation.Config.Implementation;\n+import org.robolectric.annotation.LazyLoadApplication;\n+import org.robolectric.annotation.LazyLoadApplication.LazyLoad;\n import org.robolectric.internal.AndroidSandbox.TestEnvironmentSpec;\n import org.robolectric.internal.ResourcesMode;\n import org.robolectric.internal.ShadowProvider;\n@@ -350,6 +352,7 @@ public void second() throws Exception {\n   @Ignore\n   @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n   @Config(application = TestWithBrokenAppCreate.MyTestApplication.class)\n+  @LazyLoadApplication(LazyLoad.OFF)\n   public static class TestWithBrokenAppCreate {\n     @Test\n     public void first() throws Exception {}\n@@ -369,6 +372,7 @@ public void onCreate() {\n   @Ignore\n   @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n   @Config(application = TestWithBrokenAppTerminate.MyTestApplication.class)\n+  @LazyLoadApplication(LazyLoad.OFF)\n   public static class TestWithBrokenAppTerminate {\n     @Test\n     public void first() throws Exception {}"
  },
  {
    "sha": "78dd2715524309c93bc16c048230fd0491cdc18b",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/FrameMetricsBuilderTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/FrameMetricsBuilderTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/FrameMetricsBuilderTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/FrameMetricsBuilderTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -2,7 +2,6 @@\n \n import static android.os.Build.VERSION_CODES.N;\n import static android.os.Build.VERSION_CODES.O;\n-import static android.os.Build.VERSION_CODES.R;\n import static com.google.common.truth.Truth.assertThat;\n \n import android.view.FrameMetrics;\n@@ -25,7 +24,7 @@ public void firstDrawFrame() throws Exception {\n   }\n \n   @Test\n-  @Config(minSdk = O, maxSdk = R)\n+  @Config(minSdk = O)\n   public void intendedVsyncTimestamp() throws Exception {\n     FrameMetrics metrics =\n         new FrameMetricsBuilder().setMetric(FrameMetrics.INTENDED_VSYNC_TIMESTAMP, 123L).build();\n@@ -34,7 +33,7 @@ public void intendedVsyncTimestamp() throws Exception {\n   }\n \n   @Test\n-  @Config(minSdk = O, maxSdk = R)\n+  @Config(minSdk = O)\n   public void vsyncTimestamp() throws Exception {\n     FrameMetrics metrics =\n         new FrameMetricsBuilder().setMetric(FrameMetrics.VSYNC_TIMESTAMP, 321L).build();"
  },
  {
    "sha": "0d7c05114747d91334b255697a09db004daf6945",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowCallTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowCallTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowCallTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowCallTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -0,0 +1,53 @@\n+package org.robolectric.shadows;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+import android.os.Build.VERSION_CODES;\n+import android.telecom.Call;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.annotation.Config;\n+import org.robolectric.util.ReflectionHelpers;\n+\n+/** Test of ShadowCall. */\n+@RunWith(AndroidJUnit4.class)\n+@Config(minSdk = VERSION_CODES.LOLLIPOP)\n+public final class ShadowCallTest {\n+  Call call;\n+  ShadowCall shadowCall;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    call = ReflectionHelpers.callConstructor(Call.class);\n+    shadowCall = shadowOf(call);\n+  }\n+\n+  @Test\n+  @Config(minSdk = VERSION_CODES.P)\n+  public void sendRttRequest() {\n+    call.sendRttRequest();\n+\n+    assertThat(shadowCall.hasSentRttRequest()).isTrue();\n+  }\n+\n+  @Test\n+  @Config(minSdk = VERSION_CODES.P)\n+  public void clearHasSentRttRequest() {\n+    call.sendRttRequest();\n+\n+    shadowCall.clearHasSentRttRequest();\n+\n+    assertThat(shadowCall.hasSentRttRequest()).isFalse();\n+  }\n+\n+  @Test\n+  @Config(minSdk = VERSION_CODES.P)\n+  public void hasRespondedToRttRequest() {\n+    call.respondToRttRequest(0, true);\n+\n+    assertThat(shadowCall.hasRespondedToRttRequest()).isTrue();\n+  }\n+}"
  },
  {
    "sha": "a08f7585647f7cc134e547b7e9e24a8101d3e205",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayManagerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayManagerTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayManagerTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowDisplayManagerTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -4,7 +4,6 @@\n import static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;\n import static android.os.Build.VERSION_CODES.P;\n import static android.os.Build.VERSION_CODES.Q;\n-import static android.os.Build.VERSION_CODES.R;\n import static com.google.common.truth.Truth.assertThat;\n import static org.junit.Assert.fail;\n import static org.robolectric.Shadows.shadowOf;\n@@ -331,7 +330,7 @@ public void getBrightnessEvent_unset_shouldReturnEmpty() {\n   }\n \n   @Test\n-  @Config(minSdk = Q, maxSdk = R)\n+  @Config(minSdk = Q)\n   public void getBrightnessEvent_setToValue_shouldReturnValue() {\n     List<BrightnessChangeEvent> events = new ArrayList<>();\n     events.add("
  },
  {
    "sha": "d31d1858e555a5f37c7be9fb21663f07d885aaa2",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowImsMmTelManagerTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowImsMmTelManagerTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowImsMmTelManagerTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowImsMmTelManagerTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -317,7 +317,6 @@ public void createForSubscriptionId_invalidSubscriptionId_throwsIllegalArgumentE\n \n   @Test\n   @SuppressLint(\"NewApi\")\n-  @Config(maxSdk = VERSION_CODES.R)\n   public void createForSubscriptionId_multipleValidSubscriptionIds_sharesInstances() {\n     ImsMmTelManager imsMmTelManager1 = ShadowImsMmTelManager.createForSubscriptionId(1);\n     ImsMmTelManager imsMmTelManager2 = ShadowImsMmTelManager.createForSubscriptionId(2);"
  },
  {
    "sha": "b6e475462411ddd55b43878ebb4b36e9491c81a1",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowInstrumentationTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowInstrumentationTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowInstrumentationTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowInstrumentationTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -6,6 +6,7 @@\n import static org.robolectric.Shadows.shadowOf;\n \n import android.app.Application;\n+import android.content.Context;\n import android.content.Intent;\n import android.os.Handler;\n import android.os.HandlerThread;\n@@ -40,10 +41,11 @@ public void concurrentStartService_hasCorrectStartServiceCount() throws Interrup\n \n     Intent intent = new Intent(\"do_the_thing\");\n     intent.setClassName(\"com.blah\", \"com.blah.service\");\n+    Context context = ApplicationProvider.getApplicationContext();\n     Runnable startServicesTask =\n         () -> {\n           for (int i = 0; i < 10000; i++) {\n-            ApplicationProvider.getApplicationContext().startService(intent);\n+            context.startService(intent);\n           }\n         };\n "
  },
  {
    "sha": "ab746f0d84149013d8cfd431bba145bf8fa6aa99",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowLauncherAppsTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowLauncherAppsTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowLauncherAppsTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowLauncherAppsTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -4,7 +4,6 @@\n import static android.os.Build.VERSION_CODES.M;\n import static android.os.Build.VERSION_CODES.N;\n import static android.os.Build.VERSION_CODES.O_MR1;\n-import static android.os.Build.VERSION_CODES.R;\n import static com.google.common.truth.Truth.assertThat;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n@@ -116,7 +115,7 @@ public void testGetActivityListPreN() {\n   }\n \n   @Test\n-  @Config(minSdk = N, maxSdk = R)\n+  @Config(minSdk = N)\n   public void testGetActivityList() {\n     String testPackageName = TEST_PACKAGE_NAME;\n     UserHandle userHandle = UserHandle.CURRENT;"
  },
  {
    "sha": "a221d788a5042134f03907c8ce3534104f24bc24",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowMediaControllerTest.java",
    "status": "modified",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowMediaControllerTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowMediaControllerTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowMediaControllerTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -3,14 +3,17 @@\n import static android.os.Build.VERSION_CODES.LOLLIPOP;\n import static android.os.Build.VERSION_CODES.Q;\n import static android.os.Looper.getMainLooper;\n+import static com.google.common.truth.Truth.assertThat;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.robolectric.Shadows.shadowOf;\n \n import android.content.Context;\n import android.media.MediaMetadata;\n+import android.media.Rating;\n import android.media.session.ISessionController;\n import android.media.session.MediaController;\n import android.media.session.MediaController.Callback;\n@@ -72,6 +75,36 @@ public void setAndGetMetadata() {\n     assertEquals(metadata, mediaController.getMetadata());\n   }\n \n+  @Test\n+  @Config(minSdk = LOLLIPOP)\n+  public void setInvalidRatingType() {\n+    int ratingType = Rating.RATING_PERCENTAGE + 1;\n+    IllegalArgumentException thrown =\n+        assertThrows(\n+            IllegalArgumentException.class, () -> shadowMediaController.setRatingType(ratingType));\n+    assertThat(thrown)\n+        .hasMessageThat()\n+        .contains(\n+            \"Invalid RatingType value \"\n+                + ratingType\n+                + \". The valid range is from 0 to \"\n+                + Rating.RATING_PERCENTAGE);\n+  }\n+\n+  @Test\n+  @Config(minSdk = LOLLIPOP)\n+  public void getDefaultRatingType() {\n+    assertThat(mediaController.getRatingType()).isEqualTo(Rating.RATING_NONE);\n+  }\n+\n+  @Test\n+  @Config(minSdk = LOLLIPOP)\n+  public void setAndGetRatingType() {\n+    int ratingType = Rating.RATING_HEART;\n+    shadowMediaController.setRatingType(ratingType);\n+    assertThat(mediaController.getRatingType()).isEqualTo(ratingType);\n+  }\n+\n   @Test\n   @Config(minSdk = LOLLIPOP)\n   public void registerAndGetCallback() {"
  },
  {
    "sha": "5f97a37523a2883c2a02358d9519d8b35e5f1af5",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java",
    "status": "modified",
    "additions": 285,
    "deletions": 3,
    "changes": 288,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowPackageManagerTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -1,5 +1,7 @@\n package org.robolectric.shadows;\n \n+import static android.Manifest.permission.READ_CONTACTS;\n+import static android.Manifest.permission.READ_SMS;\n import static android.Manifest.permission.SUSPEND_APPS;\n import static android.content.pm.ApplicationInfo.FLAG_ALLOW_BACKUP;\n import static android.content.pm.ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA;\n@@ -14,6 +16,9 @@\n import static android.content.pm.ApplicationInfo.FLAG_VM_SAFE_MODE;\n import static android.content.pm.PackageInfo.REQUESTED_PERMISSION_GRANTED;\n import static android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED;\n+import static android.content.pm.PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;\n+import static android.content.pm.PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;\n+import static android.content.pm.PackageManager.FLAG_PERMISSION_USER_FIXED;\n import static android.content.pm.PackageManager.MATCH_DISABLED_COMPONENTS;\n import static android.content.pm.PackageManager.MATCH_UNINSTALLED_PACKAGES;\n import static android.content.pm.PackageManager.PERMISSION_DENIED;\n@@ -374,6 +379,283 @@ public void testRevokeRuntimePermission() throws Exception {\n     assertThat(packageInfo.requestedPermissionsFlags[1]).isEqualTo(0);\n   }\n \n+  @Test\n+  @Config(minSdk = M)\n+  public void getPermissionFlags_whenNoPackagePermissionFlagsProvided_returnsZero() {\n+    // Don't add any permission flags\n+    int flags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+\n+    assertThat(flags).isEqualTo(0);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void getPermissionFlags_whenPackagePermissionFlagsProvided_returnsPermissionFlags() {\n+    // Add the SYSTEM_FIXED permission flag\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        Process.myUserHandle());\n+\n+    int flags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+\n+    assertThat(flags).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void getPermissionFlags_whenPackagePermissionFlagsProvidedForDiffPermission_returnsZero() {\n+    // Add the SYSTEM_FIXED permission flag to the READ_SMS permission\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        Process.myUserHandle());\n+\n+    int flags =\n+        packageManager.getPermissionFlags(READ_CONTACTS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+\n+    assertThat(flags).isEqualTo(0);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void getPermissionFlags_whenPermissionFlagsProvidedForDifferentPackage_returnsZero() {\n+    // Add the SYSTEM_FIXED permission flag to the READ_SMS permission for TEST_PACKAGE_NAME\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        Process.myUserHandle());\n+\n+    int flags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE2_NAME, Process.myUserHandle());\n+\n+    assertThat(flags).isEqualTo(0);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void updatePermissionFlags_whenNoFlagMaskProvided_doesNotUpdateFlags() {\n+    // Check that we have no permission flags set beforehand\n+    int oldFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(oldFlags).isEqualTo(0);\n+\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        /* flagMask= */ 0,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        Process.myUserHandle());\n+\n+    int newFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(newFlags).isEqualTo(0);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void updatePermissionFlags_whenPackageHasOnePermissionFlagTurnedOn_updatesFlagToBeOn() {\n+    // Check that we have no permission flags set beforehand\n+    int oldFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(oldFlags).isEqualTo(0);\n+\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        Process.myUserHandle());\n+\n+    int newFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(newFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void updatePermissionFlags_whenPackageHasOnePermissionFlagTurnedOff_updatesFlagToBeOff() {\n+    // Check that we have one permission flag set beforehand\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        Process.myUserHandle());\n+    int oldFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(oldFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        /* flagValues= */ 0,\n+        Process.myUserHandle());\n+\n+    int newFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(newFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(0);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void\n+      updatePermissionFlags_whenPackageHasMultiplePermissionFlagsTurnedOn_updatesFlagsToBeOn() {\n+    // Check that we have no permission flags set beforehand\n+    int oldFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(oldFlags).isEqualTo(0);\n+\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        Process.myUserHandle());\n+\n+    int newFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(newFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+    assertThat(newFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT)\n+        .isEqualTo(FLAG_PERMISSION_GRANTED_BY_DEFAULT);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void\n+      updatePermissionFlags_whenPackageHasMultiplePermissionFlagsTurnedOff_updatesFlagsToBeOff() {\n+    // Check that we have one permission flag set beforehand\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        Process.myUserHandle());\n+    int oldFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(oldFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+    assertThat(oldFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT)\n+        .isEqualTo(FLAG_PERMISSION_GRANTED_BY_DEFAULT);\n+\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        /* flagValues= */ 0,\n+        Process.myUserHandle());\n+\n+    int newFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(newFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(0);\n+    assertThat(newFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT).isEqualTo(0);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void\n+      updatePermissionFlags_whenPackageHasMultiplePermissionFlagsTurnedOn_turnOneFlagOff_onlyAffectsOneFlag() {\n+    // Check that we have one permission flag set beforehand\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        Process.myUserHandle());\n+    int oldFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(oldFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+    assertThat(oldFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT)\n+        .isEqualTo(FLAG_PERMISSION_GRANTED_BY_DEFAULT);\n+\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED,\n+        /* flagValues= */ 0,\n+        Process.myUserHandle());\n+\n+    int newFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(newFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(0);\n+    // The GRANTED_BY_DEFAULT flag should be untouched\n+    assertThat(newFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT)\n+        .isEqualTo(FLAG_PERMISSION_GRANTED_BY_DEFAULT);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void\n+      updatePermissionFlags_whenPackageHasMultiplePermissionFlagsTurnedOn_turnDiffFlagOn_doesNotAffectOtherFlags() {\n+    // Check that we have one permission flag set beforehand\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        Process.myUserHandle());\n+    int oldFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(oldFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+    assertThat(oldFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT)\n+        .isEqualTo(FLAG_PERMISSION_GRANTED_BY_DEFAULT);\n+\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_USER_FIXED,\n+        FLAG_PERMISSION_USER_FIXED,\n+        Process.myUserHandle());\n+\n+    int newFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    // The SYSTEM_FIXED and GRANTED_BY_DEFAULT flags should not be affected\n+    assertThat(newFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+    assertThat(newFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT)\n+        .isEqualTo(FLAG_PERMISSION_GRANTED_BY_DEFAULT);\n+    assertThat(newFlags & FLAG_PERMISSION_USER_FIXED).isEqualTo(FLAG_PERMISSION_USER_FIXED);\n+  }\n+\n+  @Test\n+  @Config(minSdk = M)\n+  public void updatePermissionFlags_forDifferentPermission_doesNotAffectOriginalPermissionFlags() {\n+    // Check that we have one permission flag set beforehand\n+    packageManager.updatePermissionFlags(\n+        READ_SMS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_GRANTED_BY_DEFAULT,\n+        Process.myUserHandle());\n+    int oldSmsFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(oldSmsFlags & FLAG_PERMISSION_SYSTEM_FIXED).isEqualTo(FLAG_PERMISSION_SYSTEM_FIXED);\n+    assertThat(oldSmsFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT)\n+        .isEqualTo(FLAG_PERMISSION_GRANTED_BY_DEFAULT);\n+\n+    packageManager.updatePermissionFlags(\n+        READ_CONTACTS,\n+        TEST_PACKAGE_NAME,\n+        FLAG_PERMISSION_USER_FIXED,\n+        FLAG_PERMISSION_USER_FIXED,\n+        Process.myUserHandle());\n+\n+    int newSmsFlags =\n+        packageManager.getPermissionFlags(READ_SMS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    // Check we haven't changed the permission flags of the READ_SMS permission\n+    assertThat(oldSmsFlags).isEqualTo(newSmsFlags);\n+    int contactsFlags =\n+        packageManager.getPermissionFlags(READ_CONTACTS, TEST_PACKAGE_NAME, Process.myUserHandle());\n+    assertThat(contactsFlags & FLAG_PERMISSION_USER_FIXED).isEqualTo(FLAG_PERMISSION_USER_FIXED);\n+  }\n+\n   @Test\n   public void testQueryBroadcastReceiverSucceeds() {\n     Intent intent = new Intent(\"org.robolectric.ACTION_RECEIVER_PERMISSION_PACKAGE\");\n@@ -3625,7 +3907,7 @@ private static PackageInfo createPackageInfoWithPackageName(String packageName)\n   }\n \n   @Test\n-  public void addActicityIfNotPresent_newPackage() throws Exception {\n+  public void addActivityIfNotPresent_newPackage() throws Exception {\n     ComponentName componentName = new ComponentName(\"test.package\", \"Activity\");\n     shadowOf(packageManager).addActivityIfNotPresent(componentName);\n \n@@ -3637,7 +3919,7 @@ public void addActicityIfNotPresent_newPackage() throws Exception {\n   }\n \n   @Test\n-  public void addActicityIfNotPresent_existing() throws Exception {\n+  public void addActivityIfNotPresent_existing() throws Exception {\n     String packageName = ApplicationProvider.getApplicationContext().getPackageName();\n     ComponentName componentName =\n         new ComponentName(packageName, ActivityWithFilters.class.getName());\n@@ -3651,7 +3933,7 @@ public void addActicityIfNotPresent_existing() throws Exception {\n   }\n \n   @Test\n-  public void addActicityIfNotPresent_newActivity() throws Exception {\n+  public void addActivityIfNotPresent_newActivity() throws Exception {\n     String packageName = ApplicationProvider.getApplicationContext().getPackageName();\n     ComponentName componentName = new ComponentName(packageName, \"NewActivity\");\n     shadowOf(packageManager).addActivityIfNotPresent(componentName);"
  },
  {
    "sha": "863f44843b6e8db68ff726264a0db6eab81bd439",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowStorageManagerTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowStorageManagerTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowStorageManagerTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowStorageManagerTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -1,7 +1,6 @@\n package org.robolectric.shadows;\n \n import static android.os.Build.VERSION_CODES.N;\n-import static android.os.Build.VERSION_CODES.R;\n import static com.google.common.truth.Truth.assertThat;\n import static org.robolectric.RuntimeEnvironment.getApplication;\n import static org.robolectric.Shadows.shadowOf;\n@@ -40,15 +39,15 @@ public void getVolumeList() {\n   }\n \n   @Test\n-  @Config(minSdk = N, maxSdk = R)\n+  @Config(minSdk = N)\n   public void getStorageVolumes() {\n     File file1 = new File(sdcardStorage);\n     shadowOf(storageManager).addStorageVolume(buildAndGetStorageVolume(file1, \"sd card\"));\n     assertThat(shadowOf(storageManager).getStorageVolumes()).isNotNull();\n   }\n \n   @Test\n-  @Config(minSdk = N, maxSdk = R)\n+  @Config(minSdk = N)\n   public void getStorageVolumesHaveDifferentUUID() {\n     File file1 = new File(sdcardStorage);\n     File file2 = new File(internalStorage);\n@@ -64,7 +63,7 @@ public void getStorageVolumesHaveDifferentUUID() {\n   }\n \n   @Test\n-  @Config(minSdk = N, maxSdk = R)\n+  @Config(minSdk = N)\n   public void getStorageVolume() {\n     File file1 = new File(internalStorage);\n     File file2 = new File(sdcardStorage);"
  },
  {
    "sha": "f0a6f17482a21b51f70792f2f47eec20d6080a5e",
    "filename": "robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/robolectric/src/test/java/org/robolectric/shadows/ShadowTelecomManagerTest.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -427,7 +427,7 @@ public void createLaunchEmergencyDialerIntent_shouldReturnValidIntent() {\n     assertThat(intent.getAction()).isEqualTo(Intent.ACTION_DIAL_EMERGENCY);\n   }\n \n-  @Config(minSdk = R, maxSdk = R)\n+  @Config(minSdk = R)\n   @Test\n   public void createLaunchEmergencyDialerIntent_whenPackageAvailable_shouldContainPackage()\n       throws NameNotFoundException {"
  },
  {
    "sha": "820f1d6fe1a2c7971ade270a5950c920446b3849",
    "filename": "shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java",
    "status": "modified",
    "additions": 33,
    "deletions": 18,
    "changes": 51,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/RuntimeEnvironment.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -4,6 +4,7 @@\n import static org.robolectric.annotation.LooperMode.Mode.LEGACY;\n import static org.robolectric.shadows.ShadowLooper.assertLooperMode;\n \n+import android.app.ActivityThread;\n import android.app.Application;\n import android.content.Context;\n import android.content.res.Configuration;\n@@ -14,11 +15,19 @@\n import org.robolectric.android.Bootstrap;\n import org.robolectric.android.ConfigurationV25;\n import org.robolectric.res.ResourceTable;\n+import org.robolectric.util.ReflectionHelpers;\n import org.robolectric.util.Scheduler;\n import org.robolectric.util.TempDirectory;\n \n public class RuntimeEnvironment {\n-  public static Context systemContext;\n+  /**\n+   * @deprecated Use {@link #getApplication} or {@link\n+   *     androidx.test.core.app.ApplicationProvider#getApplicationContext} instead. Note that unlike\n+   *     the alternatives, this field is inherently incompatible with {@link\n+   *     org.robolectric.annotation.LazyLoadApplication}. This field may be removed in a later\n+   *     release\n+   */\n+  @Deprecated public static Context systemContext;\n \n   /**\n    * @deprecated Please migrate to {@link\n@@ -43,7 +52,7 @@\n    * Get a reference to the {@link Application} under test.\n    *\n    * The Application may be created a test setup time or created lazily at call time, based on the\n-   * test's {@Link LazyLoadApplication) setting. If lazy loading is enabled, this method must be\n+   * test's {@link LazyLoadApplication) setting. If lazy loading is enabled, this method must be\n    * called on the main/test thread.\n    *\n    * An alternate API is\n@@ -126,6 +135,9 @@ public static void setMainThread(Thread newMainThread) {\n   }\n \n   public static Object getActivityThread() {\n+    if (activityThread == null) {\n+      activityThread = ReflectionHelpers.newInstance(ActivityThread.class);\n+    }\n     return activityThread;\n   }\n \n@@ -134,9 +146,11 @@ public static void setActivityThread(Object newActivityThread) {\n   }\n \n   /**\n-   * Returns a qualifier string describing the current {@link Configuration} of the system resources.\n+   * Returns a qualifier string describing the current {@link Configuration} of the system\n+   * resources.\n    *\n-   * @return a qualifier string as described (https://developer.android.com/guide/topics/resources/providing-resources.html#QualifierRules)[here].\n+   * @return a qualifier string as described\n+   *     (https://developer.android.com/guide/topics/resources/providing-resources.html#QualifierRules)[here].\n    */\n   public static String getQualifiers() {\n     Resources systemResources = Resources.getSystem();\n@@ -148,7 +162,8 @@ public static String getQualifiers() {\n    *\n    * @param configuration the configuration.\n    * @param displayMetrics the display metrics.\n-   * @return a qualifier string as described (https://developer.android.com/guide/topics/resources/providing-resources.html#QualifierRules)[here].\n+   * @return a qualifier string as described\n+   *     (https://developer.android.com/guide/topics/resources/providing-resources.html#QualifierRules)[here].\n    */\n   public static String getQualifiers(Configuration configuration, DisplayMetrics displayMetrics) {\n     return ConfigurationV25.resourceQualifierString(configuration, displayMetrics);\n@@ -188,7 +203,8 @@ public static int getApiLevel() {\n   }\n \n   public static Number castNativePtr(long ptr) {\n-    // Weird, using a ternary here doesn't work, there's some auto promotion of boxed types happening.\n+    // Weird, using a ternary here doesn't work, there's some auto promotion of boxed types\n+    // happening.\n     if (getApiLevel() >= LOLLIPOP) {\n       return ptr;\n     } else {\n@@ -197,28 +213,27 @@ public static Number castNativePtr(long ptr) {\n   }\n \n   /**\n-   * Retrieves the current master scheduler. This scheduler is always used by the main\n-   * {@link android.os.Looper Looper}, and if the global scheduler option is set it is also used for\n-   * the background scheduler and for all other {@link android.os.Looper Looper}s\n+   * Retrieves the current master scheduler. This scheduler is always used by the main {@link\n+   * android.os.Looper Looper}, and if the global scheduler option is set it is also used for the\n+   * background scheduler and for all other {@link android.os.Looper Looper}s\n    *\n    * @return The current master scheduler.\n-   * @see #setMasterScheduler(Scheduler)\n-   * see org.robolectric.Robolectric#getForegroundThreadScheduler()\n-   * see org.robolectric.Robolectric#getBackgroundThreadScheduler()\n+   * @see #setMasterScheduler(Scheduler) see\n+   *     org.robolectric.Robolectric#getForegroundThreadScheduler() see\n+   *     org.robolectric.Robolectric#getBackgroundThreadScheduler()\n    */\n   public static Scheduler getMasterScheduler() {\n     return masterScheduler;\n   }\n \n   /**\n-   * Sets the current master scheduler. See {@link #getMasterScheduler()} for details.\n-   * Note that this method is primarily intended to be called by the Robolectric core setup code.\n-   * Changing the master scheduler during a test will have unpredictable results.\n+   * Sets the current master scheduler. See {@link #getMasterScheduler()} for details. Note that\n+   * this method is primarily intended to be called by the Robolectric core setup code. Changing the\n+   * master scheduler during a test will have unpredictable results.\n    *\n    * @param masterScheduler the new master scheduler.\n-   * @see #getMasterScheduler()\n-   * see org.robolectric.Robolectric#getForegroundThreadScheduler()\n-   * see org.robolectric.Robolectric#getBackgroundThreadScheduler()\n+   * @see #getMasterScheduler() see org.robolectric.Robolectric#getForegroundThreadScheduler() see\n+   *     org.robolectric.Robolectric#getBackgroundThreadScheduler()\n    */\n   public static void setMasterScheduler(Scheduler masterScheduler) {\n     RuntimeEnvironment.masterScheduler = masterScheduler;"
  },
  {
    "sha": "66110905bb3bb6f1b5ff04a600959245932997a6",
    "filename": "shadows/framework/src/main/java/org/robolectric/android/Bootstrap.java",
    "status": "modified",
    "additions": 28,
    "deletions": 10,
    "changes": 38,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/android/Bootstrap.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/android/Bootstrap.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/android/Bootstrap.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -11,21 +11,40 @@\n \n public class Bootstrap {\n \n-  public static void setUpDisplay(Configuration configuration, DisplayMetrics displayMetrics) {\n-    if (Build.VERSION.SDK_INT == VERSION_CODES.JELLY_BEAN) {\n-      ShadowWindowManagerImpl.configureDefaultDisplayForJBOnly(configuration, displayMetrics);\n-    } else {\n-      ShadowDisplayManager.configureDefaultDisplay(configuration, displayMetrics);\n+  private static Configuration configuration;\n+  private static DisplayMetrics displayMetrics;\n+  /** internal only */\n+  public static boolean displaySet = false;\n+\n+  /** internal only */\n+  public static void setDisplayConfiguration(\n+      Configuration configuration, DisplayMetrics displayMetrics) {\n+    Bootstrap.configuration = configuration;\n+    Bootstrap.displayMetrics = displayMetrics;\n+  }\n+\n+  /** internal only */\n+  public static void setUpDisplay() {\n+    if (!displaySet) {\n+      displaySet = true;\n+      if (Build.VERSION.SDK_INT == VERSION_CODES.JELLY_BEAN) {\n+        ShadowWindowManagerImpl.configureDefaultDisplayForJBOnly(configuration, displayMetrics);\n+      } else {\n+        ShadowDisplayManager.configureDefaultDisplay(configuration, displayMetrics);\n+      }\n     }\n   }\n \n-  public static void applyQualifiers(String qualifiersStrs, int apiLevel,\n-      Configuration configuration, DisplayMetrics displayMetrics) {\n+  public static void applyQualifiers(\n+      String qualifiersStrs,\n+      int apiLevel,\n+      Configuration configuration,\n+      DisplayMetrics displayMetrics) {\n \n     String[] qualifiersParts = qualifiersStrs.split(\" \", 0);\n     int i = qualifiersParts.length - 1;\n     // find the index of the left-most qualifier string that doesn't start with '+'\n-    for (; i >= 0 ; i--) {\n+    for (; i >= 0; i--) {\n       String qualifiersStr = qualifiersParts[i];\n       if (qualifiersStr.startsWith(\"+\")) {\n         qualifiersParts[i] = qualifiersStr.substring(1);\n@@ -34,7 +53,7 @@ public static void applyQualifiers(String qualifiersStrs, int apiLevel,\n       }\n     }\n \n-    for (i = (i < 0) ? 0 : i; i < qualifiersParts.length ; i++) {\n+    for (i = (i < 0) ? 0 : i; i < qualifiersParts.length; i++) {\n       String qualifiersStr = qualifiersParts[i];\n       int platformVersion = Qualifiers.getPlatformVersion(qualifiersStr);\n       if (platformVersion != -1 && platformVersion != apiLevel) {\n@@ -62,5 +81,4 @@ private static void fixJellyBean(Configuration configuration, DisplayMetrics dis\n       displayMetrics.ydpi = displayMetrics.noncompatYdpi = displayMetrics.densityDpi;\n     }\n   }\n-\n }"
  },
  {
    "sha": "8bc58f6aa4d05d84149cfda1e0d74fdea5ec6b85",
    "filename": "shadows/framework/src/main/java/org/robolectric/shadows/FrameMetricsBuilder.java",
    "status": "modified",
    "additions": 9,
    "deletions": 13,
    "changes": 22,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/FrameMetricsBuilder.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/FrameMetricsBuilder.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/shadows/FrameMetricsBuilder.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -4,6 +4,8 @@\n \n import android.view.FrameMetrics;\n import android.view.FrameMetrics.Metric;\n+import com.google.common.primitives.Longs;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import org.robolectric.util.ReflectionHelpers;\n@@ -19,7 +21,6 @@\n   private static final int FLAGS_INDEX = 0;\n   private static final int INTENDED_VSYNC_INDEX = 1;\n   private static final int VSYNC_INDEX = 2;\n-  private static final int FRAME_STATS_COUNT = 16;\n \n   private final Map<Integer, Long> metricsMap = new HashMap<>();\n   private long syncDelayTimeNanos = 0;\n@@ -54,23 +55,15 @@ public FrameMetricsBuilder setSyncDelayTimeNanos(long syncDelayTimeNanos) {\n \n   public FrameMetrics build() throws Exception {\n     FrameMetrics metrics = ReflectionHelpers.callConstructor(FrameMetrics.class);\n-    // TODO: get the right size\n-    long[] timingData = new long[FRAME_STATS_COUNT];\n+    long[] timingData = reflector(FrameMetricsReflector.class, metrics).getTimingData();\n \n     // This value is left shifted 0 in the real code.\n     timingData[FLAGS_INDEX] = getMetric(FrameMetrics.FIRST_DRAW_FRAME);\n \n     timingData[INTENDED_VSYNC_INDEX] = getMetric(FrameMetrics.INTENDED_VSYNC_TIMESTAMP);\n     timingData[VSYNC_INDEX] = getMetric(FrameMetrics.VSYNC_TIMESTAMP);\n \n-    // This is more complicated than it seems it should be because\n-    // TOTAL_DURATION != sum(other durations).\n-    // This is because TOTAL_DURATION is from Index.INTENDED_VSYNC to Index.FRAME_COMPLETED and\n-    // there's a discontinuity between the end of DRAW_DURATION and the start of SYNC_DURATION,\n-    // presumably because there's a delay between when the sync is queued and when the sync starts,\n-    // and that enqueued time isn't directly measurable.\n-\n-    // So first we calculate everything up to and including DRAW_DURATION.\n+    // First we calculate everything up to and including DRAW_DURATION.\n     for (@Metric int metric = FrameMetrics.UNKNOWN_DELAY_DURATION;\n         metric <= FrameMetrics.DRAW_DURATION;\n         metric++) {\n@@ -94,7 +87,10 @@ public FrameMetrics build() throws Exception {\n           timingData[getStartIndexForMetric(metric)] + getMetric(metric);\n     }\n \n-    reflector(FrameMetricsReflector.class, metrics).setTimingData(timingData);\n+    // Even as FrameMetrics are added, the end point of TOTAL_DURATION should always equal the\n+    // maximum of this list.\n+    timingData[getEndIndexForMetric(FrameMetrics.TOTAL_DURATION)] =\n+        Collections.max(Longs.asList(timingData));\n     return metrics;\n   }\n \n@@ -121,7 +117,7 @@ private long getMetric(@Metric int metric) {\n   @ForType(FrameMetrics.class)\n   private interface FrameMetricsReflector {\n     @Accessor(\"mTimingData\")\n-    void setTimingData(long[] timingData);\n+    long[] getTimingData();\n \n     @Accessor(\"DURATIONS\")\n     @Static"
  },
  {
    "sha": "79b4f9d87dea8f80c9a3445eab91e7fad6a63cef",
    "filename": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/shadows/ShadowApplicationPackageManager.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -92,6 +92,7 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n@@ -1401,14 +1402,43 @@ private int getPermissionIndex(PackageInfo packageInfo, String permissionName) {\n     return -1;\n   }\n \n+  /**\n+   * This method differs from the real implementation in that we only return the permission flags\n+   * that were added via updatePermissionFlags, and do not perform any verification of permissions,\n+   * packages or users.\n+   */\n   @Implementation(minSdk = M)\n   protected int getPermissionFlags(String permissionName, String packageName, UserHandle user) {\n+    if (permissionFlags.containsKey(packageName)) {\n+      return permissionFlags.get(packageName).getOrDefault(permissionName, /* defaultValue= */ 0);\n+    }\n+\n     return 0;\n   }\n \n+  /**\n+   * This method differs from the real implementation in that no permission checking or package\n+   * existent checks are performed here.\n+   */\n   @Implementation(minSdk = M)\n   protected void updatePermissionFlags(\n-      String permissionName, String packageName, int flagMask, int flagValues, UserHandle user) {}\n+      String permissionName,\n+      String packageName,\n+      @PackageManager.PermissionFlags int flagMask,\n+      @PackageManager.PermissionFlags int flagValues,\n+      UserHandle user) {\n+    if (!permissionFlags.containsKey(packageName)) {\n+      permissionFlags.put(packageName, new HashMap<String, Integer>());\n+    }\n+\n+    int existingFlags =\n+        permissionFlags.get(packageName).getOrDefault(permissionName, /* defaultValue= */ 0);\n+    int flagsToKeep = ~flagMask & existingFlags;\n+    int flagsToChange = flagMask & flagValues;\n+    int newFlags = flagsToKeep | flagsToChange;\n+\n+    permissionFlags.get(packageName).put(permissionName, newFlags);\n+  }\n \n   @Implementation\n   protected int getUidForSharedUser(String sharedUserName) throws NameNotFoundException {"
  },
  {
    "sha": "365991c86023c65e80d1fcd762118f9affbcf57a",
    "filename": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmap.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -5,6 +5,7 @@\n import static android.os.Build.VERSION_CODES.M;\n \n import android.graphics.Bitmap;\n+import android.graphics.Bitmap.Config;\n import android.graphics.Color;\n import android.graphics.Matrix;\n import android.graphics.Paint;\n@@ -39,6 +40,7 @@\n   FileDescriptor createdFromFileDescriptor;\n   byte[] createdFromBytes;\n   private Bitmap createdFromBitmap;\n+  private Bitmap scaledFromBitmap;\n   private int createdFromX = -1;\n   private int createdFromY = -1;\n   private int createdFromWidth = -1;\n@@ -250,9 +252,14 @@ protected static Bitmap createScaledBitmap(\n     }\n \n     shadowBitmap.createdFromBitmap = src;\n+    shadowBitmap.scaledFromBitmap = src;\n     shadowBitmap.createdFromFilter = filter;\n     shadowBitmap.width = dstWidth;\n     shadowBitmap.height = dstHeight;\n+    shadowBitmap.config = src.getConfig();\n+    if (shadowBitmap.config == null) {\n+      shadowBitmap.config = Config.ARGB_8888;\n+    }\n     shadowBitmap.setPixels(new int[shadowBitmap.getHeight() * shadowBitmap.getWidth()], 0, 0, 0, 0, shadowBitmap.getWidth(), shadowBitmap.getHeight());\n     return scaledBitmap;\n   }\n@@ -316,6 +323,10 @@ protected static Bitmap createBitmap(\n     shadowNewBitmap.createdFromHeight = height;\n     shadowNewBitmap.createdFromMatrix = matrix;\n     shadowNewBitmap.createdFromFilter = filter;\n+    shadowNewBitmap.config = src.getConfig();\n+    if (shadowNewBitmap.config == null) {\n+      shadowNewBitmap.config = Config.ARGB_8888;\n+    }\n \n     if (matrix != null) {\n       ShadowMatrix shadowMatrix = Shadow.extract(matrix);\n@@ -666,6 +677,11 @@ protected boolean sameAs(Bitmap other) {\n     if (!Arrays.equals(colors, shadowOtherBitmap.colors)) {\n       return false;\n     }\n+    // When Bitmap.createScaledBitmap is called, the colors array is cleared, so we need a basic\n+    // way to detect if two scaled bitmaps are the same.\n+    if (scaledFromBitmap != null && shadowOtherBitmap.scaledFromBitmap != null) {\n+      return scaledFromBitmap.sameAs(shadowOtherBitmap.scaledFromBitmap);\n+    }\n     return true;\n   }\n "
  },
  {
    "sha": "749ce262a9c8913813f635a19159602d7c07dd1d",
    "filename": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/shadows/ShadowBitmapFactory.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -248,7 +248,7 @@ private static Bitmap create(\n           ClassParameter.from(Bitmap.class, bitmap),\n           ClassParameter.from(BitmapFactory.Options.class, options));\n     } else {\n-      ReflectionHelpers.callStaticMethod(\n+      bitmap = ReflectionHelpers.callStaticMethod(\n           BitmapFactory.class,\n           \"finishDecode\",\n           ClassParameter.from(Bitmap.class, bitmap),"
  },
  {
    "sha": "6d60f6f4e12d5aab2bb91b817c42e765390d271e",
    "filename": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowCall.java",
    "status": "modified",
    "additions": 38,
    "deletions": 1,
    "changes": 39,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowCall.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowCall.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/shadows/ShadowCall.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -18,8 +18,45 @@\n import org.robolectric.util.ReflectionHelpers.ClassParameter;\n \n /** Robolectric test for {@link android.telecom.Call}. */\n-@Implements(Call.class)\n+@Implements(value = Call.class, minSdk = VERSION_CODES.LOLLIPOP)\n public class ShadowCall {\n+\n+  private boolean hasSentRttRequest;\n+  private boolean hasRespondedToRttRequest;\n+\n+  @Implementation(minSdk = VERSION_CODES.P)\n+  protected void sendRttRequest() {\n+    hasSentRttRequest = true;\n+  }\n+\n+  /**\n+   * Determines whether sendRttRequest() was called.\n+   *\n+   * @return true if sendRttRequest() was called, false otherwise.\n+   */\n+  public boolean hasSentRttRequest() {\n+    return hasSentRttRequest;\n+  }\n+\n+  /** \"Forgets\" that sendRttRequest() was called. */\n+  public void clearHasSentRttRequest() {\n+    hasSentRttRequest = false;\n+  }\n+\n+  @Implementation(minSdk = VERSION_CODES.P)\n+  protected void respondToRttRequest(int id, boolean accept) {\n+    hasRespondedToRttRequest = true;\n+  }\n+\n+  /**\n+   * Determines whether respondToRttRequest() was called.\n+   *\n+   * @return True if respondToRttRequest() was called, false otherwise.\n+   */\n+  public boolean hasRespondedToRttRequest() {\n+    return hasRespondedToRttRequest;\n+  }\n+\n   /** Robolectric test for {@link android.telecom.Call.RttCall}. */\n   @Implements(value = Call.RttCall.class, minSdk = VERSION_CODES.O_MR1)\n   public static class ShadowRttCall {"
  },
  {
    "sha": "9d3b3b3c9c889311d55f2d4b5c1e4054888b5104",
    "filename": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManagerGlobal.java",
    "status": "modified",
    "additions": 13,
    "deletions": 8,
    "changes": 21,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManagerGlobal.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManagerGlobal.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/shadows/ShadowDisplayManagerGlobal.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -19,6 +19,7 @@\n import java.util.List;\n import java.util.TreeMap;\n import javax.annotation.Nullable;\n+import org.robolectric.android.Bootstrap;\n import org.robolectric.annotation.HiddenApi;\n import org.robolectric.annotation.Implementation;\n import org.robolectric.annotation.Implements;\n@@ -49,14 +50,17 @@ public static void reset() {\n   }\n \n   @Implementation\n-  synchronized public static DisplayManagerGlobal getInstance() {\n+  public static synchronized DisplayManagerGlobal getInstance() {\n     if (instance == null) {\n       MyDisplayManager myIDisplayManager = new MyDisplayManager();\n-      IDisplayManager proxy = ReflectionHelpers.createDelegatingProxy(IDisplayManager.class, myIDisplayManager);\n-      instance = ReflectionHelpers.callConstructor(DisplayManagerGlobal.class,\n-          ClassParameter.from(IDisplayManager.class, proxy));\n+      IDisplayManager proxy =\n+          ReflectionHelpers.createDelegatingProxy(IDisplayManager.class, myIDisplayManager);\n+      instance =\n+          ReflectionHelpers.callConstructor(\n+              DisplayManagerGlobal.class, ClassParameter.from(IDisplayManager.class, proxy));\n       ShadowDisplayManagerGlobal shadow = Shadow.extract(instance);\n       shadow.mDm = myIDisplayManager;\n+      Bootstrap.setUpDisplay();\n     }\n     return instance;\n   }\n@@ -116,18 +120,19 @@ public DisplayInfo getDisplayInfo(int i) throws RemoteException {\n     }\n \n     // @Override\n-    public void registerCallback(IDisplayManagerCallback iDisplayManagerCallback) throws RemoteException {\n+    public void registerCallback(IDisplayManagerCallback iDisplayManagerCallback)\n+        throws RemoteException {\n       this.callbacks.add(iDisplayManagerCallback);\n     }\n \n-    synchronized private int addDisplay(DisplayInfo displayInfo) {\n+    private synchronized int addDisplay(DisplayInfo displayInfo) {\n       int nextId = nextDisplayId++;\n       displayInfos.put(nextId, displayInfo);\n       notifyListeners(nextId, DisplayManagerGlobal.EVENT_DISPLAY_ADDED);\n       return nextId;\n     }\n \n-    synchronized private void changeDisplay(int displayId, DisplayInfo displayInfo) {\n+    private synchronized void changeDisplay(int displayId, DisplayInfo displayInfo) {\n       if (!displayInfos.containsKey(displayId)) {\n         throw new IllegalStateException(\"no display \" + displayId);\n       }\n@@ -136,7 +141,7 @@ synchronized private void changeDisplay(int displayId, DisplayInfo displayInfo)\n       notifyListeners(displayId, DisplayManagerGlobal.EVENT_DISPLAY_CHANGED);\n     }\n \n-    synchronized private void removeDisplay(int displayId) {\n+    private synchronized void removeDisplay(int displayId) {\n       if (!displayInfos.containsKey(displayId)) {\n         throw new IllegalStateException(\"no display \" + displayId);\n       }"
  },
  {
    "sha": "d6681805f80130a67edcb0c0c35977fb59f1aa38",
    "filename": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaController.java",
    "status": "modified",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaController.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaController.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/shadows/ShadowMediaController.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -5,6 +5,7 @@\n \n import android.annotation.NonNull;\n import android.media.MediaMetadata;\n+import android.media.Rating;\n import android.media.session.MediaController;\n import android.media.session.MediaController.Callback;\n import android.media.session.PlaybackState;\n@@ -26,6 +27,12 @@\n   private MediaController realMediaController;\n   private PlaybackState playbackState;\n   private MediaMetadata mediaMetadata;\n+  /**\n+   * A value of RATING_NONE for ratingType indicates that rating media is not supported by the media\n+   * session associated with the media controller\n+   */\n+  private int ratingType = Rating.RATING_NONE;\n+\n   private final List<Callback> callbacks = new ArrayList<>();\n \n   /** Saves the package name for use inside the shadow. */\n@@ -60,6 +67,27 @@ protected MediaMetadata getMetadata() {\n     return mediaMetadata;\n   }\n \n+  /**\n+   * Saves the rating type to control the return value of {@link MediaController#getRatingType()}.\n+   */\n+  public void setRatingType(int ratingType) {\n+    if (ratingType >= 0 && ratingType <= Rating.RATING_PERCENTAGE) {\n+      this.ratingType = ratingType;\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Invalid RatingType value \"\n+              + ratingType\n+              + \". The valid range is from 0 to \"\n+              + Rating.RATING_PERCENTAGE);\n+    }\n+  }\n+\n+  /** Gets the rating type set via {@link #setRatingType}. */\n+  @Implementation\n+  protected int getRatingType() {\n+    return ratingType;\n+  }\n+\n   /**\n    * Register callback and store it in the shadow to make it easier to check the state of the\n    * registered callbacks."
  },
  {
    "sha": "282eafe2299ecd84171e08f1cdd701a1c8543c12",
    "filename": "shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/robolectric/robolectric/blob/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java",
    "raw_url": "https://github.com/robolectric/robolectric/raw/6196080bd27487469ce4c9686b92a8f05d55c55b/shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java",
    "contents_url": "https://api.github.com/repos/robolectric/robolectric/contents/shadows/framework/src/main/java/org/robolectric/shadows/ShadowPackageManager.java?ref=6196080bd27487469ce4c9686b92a8f05d55c55b",
    "patch": "@@ -149,6 +149,12 @@\n   static final Map<String, Integer> applicationEnabledSettingMap = new HashMap<>();\n   static Map<String, PermissionInfo> extraPermissions = new HashMap<>();\n   static Map<String, PermissionGroupInfo> permissionGroups = new HashMap<>();\n+  /**\n+   * Map of package names to an inner map where the key is the permission and the integer represents\n+   * the permission flags set for that particular permission\n+   */\n+  static Map<String, Map<String, Integer>> permissionFlags = new HashMap<>();\n+\n   public static Map<String, Resources> resources = new HashMap<>();\n   static final Map<Intent, List<ResolveInfo>> resolveInfoForIntent =\n       new TreeMap<>(new IntentComparator());\n@@ -1653,6 +1659,7 @@ public static void reset() {\n       applicationEnabledSettingMap.clear();\n       extraPermissions.clear();\n       permissionGroups.clear();\n+      permissionFlags.clear();\n       resources.clear();\n       resolveInfoForIntent.clear();\n       deletedPackages.clear();"
  }
]
