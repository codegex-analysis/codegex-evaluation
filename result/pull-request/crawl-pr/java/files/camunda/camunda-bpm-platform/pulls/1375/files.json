[
  {
    "sha": "4fb24f62f3ddfcc42138d30e3f2cc83ebfe4cf1b",
    "filename": "engine/pom.xml",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/pom.xml",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/pom.xml",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/pom.xml?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -343,6 +343,18 @@\n \n   <build>\n     <!-- filter test configurations to inject properties -->\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+      </resource>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+        <includes>\n+          <include>org/camunda/bpm/engine/product-info.properties</include>\n+        </includes>\n+      </resource>\n+    </resources>\n     <testResources>\n       <testResource>\n         <directory>src/test/resources</directory>"
  },
  {
    "sha": "ed42f321e9b1efd756e037e5be4870c0d61a34c7",
    "filename": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -2745,7 +2745,7 @@ protected void initTelemetryData() {\n     }\n \n     ProcessEngineDetails engineInfo = ParseUtil\n-        .parseProcessEngineVersion(ProcessEngineConfigurationImpl.class.getPackage().getImplementationVersion(), true);\n+        .parseProcessEngineVersion(true);\n \n     Product product = new Product(PRODUCT_NAME, engineInfo.getVersion(), engineInfo.getEdition(), internals);\n "
  },
  {
    "sha": "85cc815dac80166c972ce80064b24bebd61c46ac",
    "filename": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryLogger.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryLogger.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryLogger.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryLogger.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -18,6 +18,8 @@\n \n import org.camunda.bpm.engine.ProcessEngineException;\n import org.camunda.bpm.engine.impl.ProcessEngineLogger;\n+import org.camunda.bpm.engine.impl.telemetry.dto.Data;\n+import org.camunda.bpm.engine.impl.telemetry.dto.Product;\n \n public class TelemetryLogger extends ProcessEngineLogger {\n \n@@ -110,6 +112,19 @@ public void telemetrySentSuccessfully(boolean isInitialMessage) {\n         \"016\", \"{} request was successful.\", getInitialMessageTextCapitalized(isInitialMessage));\n   }\n \n+  public void sendingTelemetryDataFails(Data productData) {\n+    Product product = productData.getProduct();\n+    String installationId = productData.getInstallation();\n+    logWarn(\"017\",\"Cannot send the telemetry data. Some of the data is invalid. \" +\n+        \"Set this logger to DEBUG/FINE to see more details.\");\n+    logDebug(\"018\", \"Cannot send the telemetry task data. The following values must be non-empty \" +\n+        \"Strings: '{}' (name), '{}' (version), '{}' (edition), '{}' (UUIDv4 installation id).\",\n+      product.getName(),\n+      product.getVersion(),\n+      product.getEdition(),\n+      installationId);\n+  }\n+\n   protected String getInitialMessageText(boolean isInitialMessage) {\n     return isInitialMessage ? \"initial \" : \"\";\n   }"
  },
  {
    "sha": "d97b8b5f78d0bfe625e007843071cab159edb300",
    "filename": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java",
    "status": "modified",
    "additions": 63,
    "deletions": 40,
    "changes": 103,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -20,6 +20,7 @@\n import static org.camunda.bpm.engine.impl.util.ConnectUtil.PARAM_NAME_RESPONSE_STATUS_CODE;\n import static org.camunda.bpm.engine.impl.util.ConnectUtil.addRequestTimeoutConfiguration;\n import static org.camunda.bpm.engine.impl.util.ConnectUtil.assembleRequestParameters;\n+import static org.camunda.bpm.engine.impl.util.StringUtil.hasText;\n import static org.camunda.bpm.engine.management.Metrics.ACTIVTY_INSTANCE_START;\n import static org.camunda.bpm.engine.management.Metrics.EXECUTED_DECISION_ELEMENTS;\n import static org.camunda.bpm.engine.management.Metrics.EXECUTED_DECISION_INSTANCES;\n@@ -63,6 +64,7 @@\n   protected static final TelemetryLogger LOG = ProcessEngineLogger.TELEMETRY_LOGGER;\n   protected static final Set<String> METRICS_TO_REPORT = new HashSet<>();\n   protected static final String TELEMETRY_INIT_MESSAGE_SENT_NAME = \"camunda.telemetry.initial.message.sent\";\n+  protected static final String UUID4_PATTERN = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}\";\n \n   static {\n     METRICS_TO_REPORT.add(ROOT_PROCESS_INSTANCE_START);\n@@ -117,30 +119,20 @@ public void run() {\n \n     updateTelemetryFlag(true);\n \n-    int triesLeft = telemetryRequestRetries + 1;\n-    boolean requestSuccessful = false;\n-    do {\n-      try {\n-        triesLeft--;\n-\n-        updateStaticData();\n-        Internals dynamicData = resolveDynamicData();\n-        Data mergedData = new Data(staticData);\n-        mergedData.mergeInternals(dynamicData);\n-\n-        try {\n-          sendData(mergedData, false);\n-        } catch (Exception e) {\n-          // so that we send it again the next time\n-          restoreDynamicData(dynamicData);\n-          throw e;\n-        }\n+    performDataSend(false, () -> {\n+      updateStaticData();\n+      Internals dynamicData = resolveDynamicData();\n+      Data mergedData = new Data(staticData);\n+      mergedData.mergeInternals(dynamicData);\n \n-        requestSuccessful = true;\n+      try {\n+        sendData(mergedData, false);\n       } catch (Exception e) {\n-        LOG.exceptionWhileSendingTelemetryData(e, false);\n+        // so that we send it again the next time\n+        restoreDynamicData(dynamicData);\n+        throw e;\n       }\n-    } while (!requestSuccessful && triesLeft > 0);\n+    });\n   }\n \n   protected void sendInitialMessage() {\n@@ -165,25 +157,16 @@ protected void sendInitialMessage(CommandContext commandContext) {\n      */\n     if (null == commandContext.getPropertyManager().findPropertyById(TELEMETRY_INIT_MESSAGE_SENT_NAME)) {\n       // message has not been sent yet\n-      int triesLeft = telemetryRequestRetries + 1;\n-      boolean requestSuccessful = false;\n-      do {\n-        try {\n-          triesLeft--;\n-\n-          Data initData = new Data(staticData.getInstallation(), new Product(staticData.getProduct()));\n-          Internals internals = new Internals();\n-          internals.setTelemetryEnabled(new IsTelemetryEnabledCmd().execute(commandContext));\n-          initData.getProduct().setInternals(internals);\n-\n-          sendData(initData, true);\n-          requestSuccessful = true;\n-          sendInitialMessage = false;\n-          commandContext.getPropertyManager().insert(new PropertyEntity(TELEMETRY_INIT_MESSAGE_SENT_NAME, \"true\"));\n-        } catch (Exception e) {\n-          LOG.exceptionWhileSendingTelemetryData(e, true);\n-        }\n-      } while (!requestSuccessful && triesLeft > 0);\n+      performDataSend(true, () -> {\n+        Data initData = new Data(staticData.getInstallation(), new Product(staticData.getProduct()));\n+        Internals internals = new Internals();\n+        internals.setTelemetryEnabled(new IsTelemetryEnabledCmd().execute(commandContext));\n+        initData.getProduct().setInternals(internals);\n+\n+        sendData(initData, true);\n+        sendInitialMessage = false;\n+        commandContext.getPropertyManager().insert(new PropertyEntity(TELEMETRY_INIT_MESSAGE_SENT_NAME, \"true\"));\n+      });\n     } else {\n       // message has already been sent by another node\n       sendInitialMessage = false;\n@@ -335,4 +318,44 @@ public Void execute(CommandContext commandContext) {\n       return null;\n     }\n   }\n+\n+  protected void performDataSend(Boolean isInitialMessage, Runnable runnable) {\n+    if (validateData(staticData)) {\n+      int triesLeft = telemetryRequestRetries + 1;\n+      boolean requestSuccessful = false;\n+      do {\n+        try {\n+          triesLeft--;\n+\n+          runnable.run();\n+\n+          requestSuccessful = true;\n+        } catch (Exception e) {\n+          LOG.exceptionWhileSendingTelemetryData(e, isInitialMessage);\n+        }\n+      } while (!requestSuccessful && triesLeft > 0);\n+    } else {\n+      LOG.sendingTelemetryDataFails(staticData);\n+    }\n+  }\n+\n+  protected Boolean validateData(Data dataToSend) {\n+    // validate product data\n+    Product product = dataToSend.getProduct();\n+    String installationId = dataToSend.getInstallation();\n+    String edition = product.getEdition();\n+    String version = product.getVersion();\n+    String name = product.getName();\n+\n+    // ensure that data is not null or empty strings\n+    boolean validProductData = hasText(name) && hasText(version) && hasText(edition) && hasText(installationId);\n+\n+    // validate installation id\n+    if (validProductData) {\n+      validProductData = validProductData && installationId.matches(UUID4_PATTERN);\n+    }\n+\n+    return validProductData;\n+  }\n+\n }"
  },
  {
    "sha": "6eff0532627127c22653798ddbddcf89dd295b04",
    "filename": "engine/src/main/java/org/camunda/bpm/engine/impl/util/EngineUtilLogger.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/EngineUtilLogger.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/EngineUtilLogger.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/java/org/camunda/bpm/engine/impl/util/EngineUtilLogger.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -234,4 +234,9 @@ public void logAccessExternalSchemaNotSupported(Exception e) {\n         + \"This indicates that this is not supported by your JAXP implementation: {}\",\n         e.getMessage());\n   }\n+\n+  public void logMissingPropertiesFile(String file) {\n+    logWarn(\"032\", \"Could not find the '{}' file on the classpath. \" +\n+      \"If you have removed it, please restore it.\", file);\n+  }\n }"
  },
  {
    "sha": "94a2e46a91cd941f6f51ec583c357cad02ae7702",
    "filename": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -104,11 +104,15 @@ public static FailedJobRetryConfiguration parseRetryIntervals(String retryInterv\n     }\n   }\n \n-  public static ProcessEngineDetails parseProcessEngineVersion(String packageImplementationVersion, boolean trimSuffixEE) {\n-    String version = packageImplementationVersion;\n+  public static ProcessEngineDetails parseProcessEngineVersion(boolean trimSuffixEE) {\n+    String version = ProductPropertiesUtil.getProductVersion();\n+    return parseProcessEngineVersion(version, trimSuffixEE);\n+  }\n+\n+  public static ProcessEngineDetails parseProcessEngineVersion(String version, boolean trimSuffixEE) {\n     String edition = ProcessEngineDetails.EDITION_COMMUNITY;\n \n-    if (version != null && version.contains(\"-ee\")) {\n+    if (version.contains(\"-ee\")) {\n       edition = ProcessEngineDetails.EDITION_ENTERPRISE;\n       if (trimSuffixEE) {\n         version = version.replace(\"-ee\", \"\"); // trim `-ee` suffix"
  },
  {
    "sha": "c6dadc7929a45934c1187995f2ed52ac03325dfb",
    "filename": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ProductPropertiesUtil.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/ProductPropertiesUtil.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/ProductPropertiesUtil.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/java/org/camunda/bpm/engine/impl/util/ProductPropertiesUtil.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.util;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Provides product information data loaded from a *.properties file.\n+ */\n+public class ProductPropertiesUtil {\n+\n+  protected static final String PROPERTIES_FILE_PATH = \"/org/camunda/bpm/engine/product-info.properties\";\n+  protected static final String VERSION_PROPERTY = \"camunda.version\";\n+  protected static final Properties INSTANCE = PropertiesUtil.getProperties(PROPERTIES_FILE_PATH);\n+\n+  protected ProductPropertiesUtil() {\n+  }\n+\n+  /**\n+   * @return the current version of the product (e.g. <code>7.15.0-SNAPSHOT</code>)\n+   */\n+  public static String getProductVersion() {\n+    // in case the `product-info.properties` file is missing,\n+    // try to get the product version from the manifest\n+    return INSTANCE.getProperty(VERSION_PROPERTY, ProductPropertiesUtil.class.getPackage().getImplementationVersion());\n+  }\n+\n+}"
  },
  {
    "sha": "c01429d11328d5190bdffc21b527a8559ed19d45",
    "filename": "engine/src/main/java/org/camunda/bpm/engine/impl/util/PropertiesUtil.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/PropertiesUtil.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/PropertiesUtil.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/java/org/camunda/bpm/engine/impl/util/PropertiesUtil.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.util;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+import org.camunda.bpm.engine.impl.ProcessEngineLogger;\n+\n+public class PropertiesUtil {\n+\n+  protected static final EngineUtilLogger LOG = ProcessEngineLogger.UTIL_LOGGER;\n+\n+  /**\n+   * Reads a <code>.properties</code> file from the classpath and provides a {@link Properties} object.\n+   */\n+  public static Properties getProperties(String propertiesFile) {\n+    Properties productProperties = new Properties();\n+    try (InputStream inputStream = ProductPropertiesUtil.class.getResourceAsStream(propertiesFile)) {\n+      productProperties.load(inputStream);\n+    } catch (IOException | NullPointerException e) {\n+      // if `propertiesFile` is null, the file is missing, or an error occurs during reading\n+      LOG.logMissingPropertiesFile(propertiesFile);\n+    }\n+\n+    return productProperties;\n+  }\n+}"
  },
  {
    "sha": "f0edb85972a310c0ab6ab18e790a83d6a8e8e37a",
    "filename": "engine/src/main/java/org/camunda/bpm/engine/impl/util/StringUtil.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/StringUtil.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/java/org/camunda/bpm/engine/impl/util/StringUtil.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/java/org/camunda/bpm/engine/impl/util/StringUtil.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -199,6 +199,14 @@ public String next() {\n     });\n   }\n \n+  /**\n+   * @param string the String to check.\n+   * @return a boolean <code>TRUE</code> if the String is not null and not empty. <code>FALSE</code> otherwise.\n+   */\n+  public static boolean hasText(String string) {\n+    return string != null && !string.isEmpty();\n+  }\n+\n   public static String join(Iterator<String> iterator) {\n     StringBuilder builder = new StringBuilder();\n "
  },
  {
    "sha": "88875803fbfcc2226f318e4cebbe3b630fdbf000",
    "filename": "engine/src/main/resources/org/camunda/bpm/engine/product-info.properties",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/resources/org/camunda/bpm/engine/product-info.properties",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/main/resources/org/camunda/bpm/engine/product-info.properties",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/main/resources/org/camunda/bpm/engine/product-info.properties?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -0,0 +1 @@\n+camunda.version=${project.version}\n\\ No newline at end of file"
  },
  {
    "sha": "4a37278045f26eb80d714c66acab8df6df1ff871",
    "filename": "engine/src/test/java/org/camunda/bpm/engine/impl/util/PropertiesUtilTest.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/impl/util/PropertiesUtilTest.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/impl/util/PropertiesUtilTest.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/test/java/org/camunda/bpm/engine/impl/util/PropertiesUtilTest.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Properties;\n+\n+import org.camunda.commons.testing.ProcessEngineLoggingRule;\n+import org.camunda.commons.testing.WatchLogger;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class PropertiesUtilTest {\n+\n+  @Rule\n+  public ProcessEngineLoggingRule loggingRule = new ProcessEngineLoggingRule();\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.util\"}, level = \"DEBUG\")\n+  public void shouldLogMissingFile() {\n+    // given\n+    String invalidFile = \"/missingProps.properties\";\n+\n+    // when\n+    PropertiesUtil.getProperties(invalidFile);\n+\n+    // then\n+    String logMessage = String.format(\"Could not find the '%s' file on the classpath. \" +\n+        \"If you have removed it, please restore it.\", invalidFile);\n+    assertThat(loggingRule.getFilteredLog(logMessage)).hasSize(1);\n+  }\n+}"
  },
  {
    "sha": "419f64bcd36e8e0ace533176bac064d9ceafb0e0",
    "filename": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/ProcessEngineDetailsTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/ProcessEngineDetailsTest.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/ProcessEngineDetailsTest.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/ProcessEngineDetailsTest.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -22,6 +22,7 @@\n import static org.camunda.bpm.engine.impl.util.ProcessEngineDetails.EDITION_ENTERPRISE;\n \n import org.camunda.bpm.engine.impl.util.ProcessEngineDetails;\n+import org.camunda.bpm.engine.test.util.TestconfigProperties;\n import org.junit.Test;\n \n public class ProcessEngineDetailsTest {\n@@ -147,4 +148,16 @@ public void shouldAssertProcessEngineVersionSnapshotPatch() {\n     assertThat(engineInfo.getVersion()).isEqualTo(\"7.14.1-ee\");\n     assertThat(engineInfo.getEdition()).isEqualTo(EDITION_ENTERPRISE);\n   }\n+\n+  @Test\n+  public void shouldAssertCurrentProcessEngineVersionFromPropertiesFile() {\n+    // when\n+    // the version is not available from the package\n+    ProcessEngineDetails engineInfo = parseProcessEngineVersion(false);\n+\n+    // then\n+    // the version is read from the product-info.properties file\n+    assertThat(engineInfo.getVersion()).isEqualTo(TestconfigProperties.getEngineVersion());\n+    assertThat(engineInfo.getEdition()).isEqualTo(EDITION_COMMUNITY);\n+  }\n }"
  },
  {
    "sha": "857c8b14f30bd2fb03ee5644110de18e260bde4a",
    "filename": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java",
    "status": "modified",
    "additions": 98,
    "deletions": 4,
    "changes": 102,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -101,7 +101,8 @@\n public class TelemetryReporterTest {\n \n   protected static final String TELEMETRY_ENDPOINT = \"http://localhost:8084/pings\";\n-  private static final String TELEMETRY_ENDPOINT_PATH = \"/pings\";\n+  protected static final String TELEMETRY_ENDPOINT_PATH = \"/pings\";\n+  protected static final String VALID_UUID_V4 = \"cb07ce31-c8e3-4f5f-94c2-1b28175c2022\";\n \n   public static String DMN_FILE = \"org/camunda/bpm/engine/test/api/mgmt/metrics/ExecutedDecisionElementsTest.dmn11.xml\";\n   public static VariableMap VARIABLES = Variables.createVariables().putValue(\"status\", \"\").putValue(\"sum\", 100);\n@@ -297,7 +298,63 @@ public void shouldNotReportInitialDataWhenReporterActivatedAndInitTelemetryEnabl\n \n     // then\n     verify(1, postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH))\n-        .withHeader(\"Content-Type\",  equalTo(\"application/json\")));  }\n+        .withHeader(\"Content-Type\",  equalTo(\"application/json\")));\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenProductNameIsNull() {\n+    executeDataValidationTest(null, \"7.15.0\", \"community\", VALID_UUID_V4);\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenProductNameIsEmpty() {\n+    executeDataValidationTest(\"\", \"7.15.0\", \"community\", VALID_UUID_V4);\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenProductVersionIsNull() {\n+    executeDataValidationTest(\"Runtime\", null, \"community\", VALID_UUID_V4);\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenProductVersionIsEmpty() {\n+    executeDataValidationTest(\"Runtime\", \"\", \"community\", VALID_UUID_V4);\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenProductEditionIsNull() {\n+    executeDataValidationTest(\"Runtime\", \"7.15.0\", null, VALID_UUID_V4);\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenProductEditionIsEmpty() {\n+    executeDataValidationTest(\"Runtime\", \"7.15.0\", \"\", VALID_UUID_V4);\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenInstallationIdIsNull() {\n+    executeDataValidationTest(\"Runtime\", \"7.15.0\", \"community\", null);\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenInstallationIdIsEmpty() {\n+    executeDataValidationTest(\"Runtime\", \"7.15.0\", \"community\", \"\");\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldNotReportInitialDataWhenInstallationIdIsInvalid() {\n+    String invalidUUID = \"f5b19e2e-b49a-11ea-b3de-0242ac130004\";\n+    executeDataValidationTest(\"Runtime\", \"7.15.0\", \"community\", invalidUUID);\n+  }\n \n   @Test\n   public void shouldReportInitialDataWhenReporterActivatedAndInitTelemetryUndefined() {\n@@ -1135,6 +1192,10 @@ protected void buildEngine(ProcessEngineConfigurationImpl processEngineConfigura\n   }\n \n   protected Data createDataToSend() {\n+    return createDataToSendWithCustomValues(\"Runtime\", \"7.14.0\", \"special\", VALID_UUID_V4);\n+  }\n+\n+  protected Data createDataToSendWithCustomValues(String name, String version, String edition, String installationId) {\n     Database database = new Database(\"mySpecialDb\", \"v.1.2.3\");\n     Jdk jdk = ParseUtil.parseJdkDetails();\n     Internals internals = new Internals(database, new ApplicationServer(\"Apache Tomcat/10.0.1\"), null, jdk);\n@@ -1146,8 +1207,8 @@ protected Data createDataToSend() {\n     Map<String, Metric> metrics = getDefaultMetrics();\n     internals.setMetrics(metrics);\n \n-    Product product = new Product(\"Runtime\", \"7.14.0\", \"special\", internals);\n-    Data data = new Data(\"f5b19e2e-b49a-11ea-b3de-0242ac130004\", product);\n+    Product product = new Product(name, version, edition, internals);\n+    Data data = new Data(installationId, product);\n     return data;\n   }\n \n@@ -1285,5 +1346,38 @@ protected BpmnModelInstance createProcessWithBusinessRuleTask(String processId,\n     return modelInstance;\n   }\n \n+  protected void executeDataValidationTest(String name, String version, String edition, String installationId) {\n+    managementService.toggleTelemetry(true);\n+    Data invalidData = createDataToSendWithCustomValues(name, version, edition, installationId);\n+    stubFor(post(urlEqualTo(TELEMETRY_ENDPOINT_PATH))\n+      .willReturn(aResponse()\n+        .withStatus(HttpURLConnection.HTTP_ACCEPTED)));\n+\n+    standaloneReporter = new TelemetryReporter(configuration.getCommandExecutorTxRequired(),\n+      TELEMETRY_ENDPOINT,\n+      0,\n+      1000,\n+      invalidData,\n+      configuration.getTelemetryHttpConnector(),\n+      configuration.getTelemetryRegistry(),\n+      configuration.getMetricsRegistry(),\n+      configuration.getTelemetryRequestTimeout());\n+\n+    // when\n+    standaloneReporter.reportNow();\n+\n+    // then\n+    verify(0, postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH)));\n+    String warnLogMessage = \"Cannot send the telemetry data. Some of the data is invalid. \" +\n+        \"Set this logger to DEBUG/FINE to see more details.\";\n+    String debugLogMessage = String.format(\"Cannot send the telemetry task data. The following values must be \" +\n+        \"non-empty Strings: '%s' (name), '%s' (version), '%s' (edition), '%s' (UUIDv4 installation id).\",\n+      name,\n+      version,\n+      edition,\n+      installationId);\n+    assertThat(loggingRule.getFilteredLog(warnLogMessage)).hasSize(1);\n+    assertThat(loggingRule.getFilteredLog(debugLogMessage)).hasSize(1);\n+  }\n \n }"
  },
  {
    "sha": "3df9d5894c99c10c72cc900a135b79c68f4db7b6",
    "filename": "engine/src/test/java/org/camunda/bpm/engine/test/standalone/db/SchemaLogEnsureSqlScriptTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 21,
    "changes": 25,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/test/standalone/db/SchemaLogEnsureSqlScriptTest.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/test/standalone/db/SchemaLogEnsureSqlScriptTest.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/test/java/org/camunda/bpm/engine/test/standalone/db/SchemaLogEnsureSqlScriptTest.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -18,13 +18,11 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Properties;\n \n import org.camunda.bpm.engine.management.SchemaLogEntry;\n+import org.camunda.bpm.engine.test.util.TestconfigProperties;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -34,10 +32,6 @@\n  */\n public class SchemaLogEnsureSqlScriptTest extends SchemaLogTestCase {\n \n-  protected static final String PROPERTIES_FILE_PATH = \"/testconfig.properties\";\n-  protected static final String VERSION_PROPERTY = \"camunda.version\";\n-\n-  protected Properties connectionProperties;\n   protected String currentSchemaVersion;\n   protected String dataBaseType;\n \n@@ -53,7 +47,7 @@ public void init() {\n   }\n \n   @Test\n-  public void ensureUpgradeScriptsUpdateSchemaLogVersion() throws IOException {\n+  public void ensureUpgradeScriptsUpdateSchemaLogVersion() {\n     List<String> scriptsForDB = new ArrayList<>();\n     for (String file : folderContents.get(UPGRADE_SCRIPT_FOLDER)) {\n       if (file.startsWith(dataBaseType)) {\n@@ -114,19 +108,8 @@ protected boolean isLaterVersionThan(String v1, String v2) {\n     return false;\n   }\n \n-  protected String getCurrentMinorVersion() throws IOException {\n-    if (connectionProperties == null) {\n-      InputStream propStream = null;\n-      try {\n-        propStream = SchemaLogEnsureSqlScriptTest.class.getResourceAsStream(PROPERTIES_FILE_PATH);\n-        connectionProperties = new Properties();\n-        connectionProperties.load(propStream);\n-      } finally {\n-        propStream.close();\n-      }\n-    }\n-\n-    String version = connectionProperties.getProperty(VERSION_PROPERTY);\n+  protected String getCurrentMinorVersion() {\n+    String version = TestconfigProperties.getEngineVersion();\n     // remove the patch version, and create a \"clean\" minor version\n     int lastPos = version.lastIndexOf(\".\");\n     version = version.substring(0, lastPos);"
  },
  {
    "sha": "ae8693eba3704511a1cb515a9ff1fdb30b19dd5c",
    "filename": "engine/src/test/java/org/camunda/bpm/engine/test/util/TestconfigProperties.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/camunda/camunda-bpm-platform/blob/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/test/util/TestconfigProperties.java",
    "raw_url": "https://github.com/camunda/camunda-bpm-platform/raw/fbadf4c4233660e943dfe3729af4452e61c701dd/engine/src/test/java/org/camunda/bpm/engine/test/util/TestconfigProperties.java",
    "contents_url": "https://api.github.com/repos/camunda/camunda-bpm-platform/contents/engine/src/test/java/org/camunda/bpm/engine/test/util/TestconfigProperties.java?ref=fbadf4c4233660e943dfe3729af4452e61c701dd",
    "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.test.util;\n+\n+import java.util.Properties;\n+\n+import org.camunda.bpm.engine.impl.util.PropertiesUtil;\n+\n+public class TestconfigProperties {\n+\n+  protected static final String PROPERTIES_FILE_PATH = \"/testconfig.properties\";\n+  protected static final String VERSION_PROPERTY = \"camunda.version\";\n+  protected static final Properties INSTANCE = PropertiesUtil.getProperties(PROPERTIES_FILE_PATH);\n+\n+  protected TestconfigProperties() {\n+  }\n+\n+  public static String getEngineVersion() {\n+    return INSTANCE.getProperty(VERSION_PROPERTY);\n+  }\n+\n+}"
  }
]
