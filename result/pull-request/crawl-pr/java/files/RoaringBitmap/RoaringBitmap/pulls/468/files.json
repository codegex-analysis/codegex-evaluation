[
  {
    "sha": "4ec120b481623ef833787902c170a16c22b56286",
    "filename": "real-roaring-dataset/src/main/java/org/roaringbitmap/ZipRealDataRetriever.java",
    "status": "modified",
    "additions": 26,
    "deletions": 44,
    "changes": 70,
    "blob_url": "https://github.com/RoaringBitmap/RoaringBitmap/blob/45bc54193c54c7393b261bdebf0788db57c99e6d/real-roaring-dataset/src/main/java/org/roaringbitmap/ZipRealDataRetriever.java",
    "raw_url": "https://github.com/RoaringBitmap/RoaringBitmap/raw/45bc54193c54c7393b261bdebf0788db57c99e6d/real-roaring-dataset/src/main/java/org/roaringbitmap/ZipRealDataRetriever.java",
    "contents_url": "https://api.github.com/repos/RoaringBitmap/RoaringBitmap/contents/real-roaring-dataset/src/main/java/org/roaringbitmap/ZipRealDataRetriever.java?ref=45bc54193c54c7393b261bdebf0788db57c99e6d",
    "patch": "@@ -5,6 +5,8 @@\n import java.io.InputStreamReader;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.util.List;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n@@ -31,60 +33,40 @@ public String getName() {\n   }\n \n   /**\n-   * \n+   *\n    * @return an {@link Iterable} of int[], as read from the resource\n    * @throws IOException something went wrong while reading the resource\n    */\n-  public Iterable<int[]> fetchBitPositions() throws IOException {\n-    final ZipInputStream zis = getResourceAsStream();\n+  public List<int[]> fetchBitPositions() throws IOException {\n+    List<int[]> bitPositions = new ArrayList<>();\n \n-    return new Iterable<int[]>() {\n \n-      @Override\n-      public Iterator<int[]> iterator() {\n-        return new Iterator<int[]>() {\n+    try (\n+        final ZipInputStream zis = getResourceAsStream();\n+        final BufferedReader buf = new BufferedReader(new InputStreamReader(zis));\n+    ) {\n \n-          ZipEntry nextEntry = nextEntry();\n-          BufferedReader buf = new BufferedReader(new InputStreamReader(zis));\n \n-          @Override\n-          public boolean hasNext() {\n-            return nextEntry != null;\n-          }\n-\n-          @Override\n-          public int[] next() {\n-            try {\n-              String oneLine = buf.readLine(); // a single, perhaps very long, line\n-              String[] positions = oneLine.split(\",\");\n-              int[] ans = new int[positions.length];\n-              for (int i = 0; i < positions.length; i++) {\n-                ans[i] = Integer.parseInt(positions[i]);\n-              }\n-              return ans;\n-            } catch (IOException e) {\n-              throw new RuntimeException(e);\n-            } finally {\n-              nextEntry = nextEntry();\n-            }\n-          }\n+      while (true) {\n+        ZipEntry nextEntry = zis.getNextEntry();\n+        if (nextEntry == null) {\n+          break;\n+        }\n \n-          @Override\n-          public void remove() {\n-            throw new UnsupportedOperationException();\n+        try {\n+          String oneLine = buf.readLine(); // a single, perhaps very long, line\n+          String[] positions = oneLine.split(\",\");\n+          int[] ans = new int[positions.length];\n+          for (int i = 0; i < positions.length; i++) {\n+            ans[i] = Integer.parseInt(positions[i]);\n           }\n-\n-          private ZipEntry nextEntry() {\n-            try {\n-              return zis.getNextEntry();\n-            } catch (IOException e) {\n-              throw new RuntimeException(e);\n-            }\n-          }\n-        };\n+          bitPositions.add(ans);\n+        } catch (IOException e) {\n+          throw new RuntimeException(e);\n+        }\n       }\n-\n-    };\n+    }\n+    return bitPositions;\n   }\n \n   private URL getResource() {"
  },
  {
    "sha": "810e94f3aa6ba7a793b85df51414dab66e58b85a",
    "filename": "simplebenchmark/src/main/java/simplebenchmark.java",
    "status": "modified",
    "additions": 27,
    "deletions": 47,
    "changes": 74,
    "blob_url": "https://github.com/RoaringBitmap/RoaringBitmap/blob/45bc54193c54c7393b261bdebf0788db57c99e6d/simplebenchmark/src/main/java/simplebenchmark.java",
    "raw_url": "https://github.com/RoaringBitmap/RoaringBitmap/raw/45bc54193c54c7393b261bdebf0788db57c99e6d/simplebenchmark/src/main/java/simplebenchmark.java",
    "contents_url": "https://api.github.com/repos/RoaringBitmap/RoaringBitmap/contents/simplebenchmark/src/main/java/simplebenchmark.java?ref=45bc54193c54c7393b261bdebf0788db57c99e6d",
    "patch": "@@ -224,57 +224,37 @@ public ZipRealDataRetriever(String dataset) throws IOException, URISyntaxExcepti\n         this.dataset = dataset;\n     }\n \n+    public List<int[]> fetchBitPositions() throws IOException {\n+        List<int[]> bitPositions = new ArrayList<>();\n \n-    public Iterable<int[]> fetchBitPositions() throws IOException {\n-        final ZipInputStream zis = getResourceAsStream();\n-\n-        return new Iterable<int[]>() {\n-\n-            @Override\n-            public Iterator<int[]> iterator() {\n-                return new Iterator<int[]>() {\n-\n-                    ZipEntry nextEntry = nextEntry();\n-\n-                    @Override\n-                    public boolean hasNext() {\n-                        return nextEntry != null;\n-                    }\n-\n-                    @Override\n-                    public int[] next() {\n-                        try (BufferedReader buf = new BufferedReader(new InputStreamReader(zis))) {\n-                            String oneLine = buf.readLine(); // a single, perhaps very long, line\n-                            String[] positions = oneLine.split(\",\");\n-                            int[] ans = new int[positions.length];\n-                            for (int i = 0; i < positions.length; i++) {\n-                                ans[i] = Integer.parseInt(positions[i]);\n-                            }\n-                            return ans;\n-                        } catch (IOException e) {\n-                            throw new RuntimeException(e);\n-                        } finally {\n-                            nextEntry = nextEntry();\n-                        }\n-                    }\n-\n-                    @Override\n-                    public void remove() {\n-                        throw new UnsupportedOperationException();\n-                    }\n-\n-                    private ZipEntry nextEntry() {\n-                        try {\n-                            return zis.getNextEntry();\n-                        } catch (IOException e) {\n-                            throw new RuntimeException(e);\n-                        }\n-                    }\n-                };\n+        try (\n+            final ZipInputStream zis = getResourceAsStream();\n+            final BufferedReader buf = new BufferedReader(new InputStreamReader(zis));\n+        ) {\n+\n+\n+        while (true) {\n+            ZipEntry nextEntry = zis.getNextEntry();\n+            if (nextEntry == null) {\n+            break;\n             }\n \n-        };\n+            try {\n+            String oneLine = buf.readLine(); // a single, perhaps very long, line\n+            String[] positions = oneLine.split(\",\");\n+            int[] ans = new int[positions.length];\n+            for (int i = 0; i < positions.length; i++) {\n+                ans[i] = Integer.parseInt(positions[i]);\n+            }\n+            bitPositions.add(ans);\n+            } catch (IOException e) {\n+            throw new RuntimeException(e);\n+            }\n+        }\n+        }\n+        return bitPositions;\n     }\n+\n     public String getName() {\n         return new File(dataset).getName();\n     }"
  }
]
