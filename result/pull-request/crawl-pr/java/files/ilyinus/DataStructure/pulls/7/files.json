[
  {
    "sha": "75e1279915ac455b03d1b532f1f955f2444bd46b",
    "filename": "src/lesson8/homework08/HashTableChainImpl.java",
    "status": "added",
    "additions": 161,
    "deletions": 0,
    "changes": 161,
    "blob_url": "https://github.com/ilyinus/DataStructure/blob/77ecca9b812548858f8bf967c27c7fb367d151ba/src/lesson8/homework08/HashTableChainImpl.java",
    "raw_url": "https://github.com/ilyinus/DataStructure/raw/77ecca9b812548858f8bf967c27c7fb367d151ba/src/lesson8/homework08/HashTableChainImpl.java",
    "contents_url": "https://api.github.com/repos/ilyinus/DataStructure/contents/src/lesson8/homework08/HashTableChainImpl.java?ref=77ecca9b812548858f8bf967c27c7fb367d151ba",
    "patch": "@@ -0,0 +1,161 @@\n+package lesson8.homework08;\n+\n+import lesson8.HashTable;\n+\n+public class HashTableChainImpl<K, V> implements HashTable<K, V> {\n+\n+    static class Item<K, V> implements Entry<K, V> {\n+        private final K key;\n+        private V value;\n+        private Item<K, V> next;\n+\n+        public Item(K key, V value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder(\"Item{\" +\n+                    \"key=\" + key +\n+                    \", value=\" + value +\n+                    '}');\n+\n+            Item<K, V> cur = getNext();\n+\n+            while (cur != null) {\n+                sb.append(\" -> \").append(\"Item{\" + \"key=\").append(cur.key).append(\", value=\").append(cur.value).append('}');\n+                cur = cur.getNext();\n+            }\n+\n+            return sb.toString();\n+        }\n+\n+        @Override\n+        public K getKey() {\n+            return key;\n+        }\n+\n+        @Override\n+        public V getValue() {\n+            return value;\n+        }\n+\n+        @Override\n+        public void setValue(V value) {\n+            this.value = value;\n+        }\n+\n+        public Item<K, V> getNext() {\n+            return next;\n+        }\n+\n+        public void setNext(Item<K, V> next) {\n+            this.next = next;\n+        }\n+\n+    }\n+\n+    private final Item<K, V>[] data;\n+    private int size;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public HashTableChainImpl(int maxSize) {\n+        this.data = new Item[maxSize];\n+    }\n+\n+    private int hashFunc(K key) {\n+        return key.hashCode() % data.length;\n+    }\n+\n+    @Override\n+    public boolean put(K key, V value) {\n+        int index = hashFunc(key);\n+\n+        if (data[index] != null) {\n+\n+            if (data[index].getKey().equals(key)) {\n+                data[index].setValue(value);\n+                return true;\n+            }\n+\n+            Item<K, V> curNode = data[index];\n+\n+            while (curNode.getNext() != null) {\n+                curNode = curNode.getNext();\n+            }\n+\n+            curNode.setNext(new Item<>(key, value));\n+            size++;\n+            return true;\n+\n+        }\n+\n+        data[index] = new Item<>(key, value);\n+        size++;\n+        return true;\n+    }\n+\n+    @Override\n+    public V get(K key) {\n+        int index = hashFunc(key);\n+\n+        Item<K, V> item = data[index];\n+\n+        while (item != null) {\n+            if (item.getKey().equals(key))\n+                return item.getValue();\n+            else\n+                item = item.getNext();\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public V remove(K key) {\n+        int index = hashFunc(key);\n+\n+        Item<K, V> prev = null;\n+        Item<K, V> item = data[index];\n+\n+        while (item != null) {\n+            if (item.getKey().equals(key)) {\n+                if (prev == null) {\n+                    data[index] = item.getNext();\n+                } else {\n+                    prev.setNext(item.getNext());\n+                }\n+                size--;\n+                item.setNext(null);\n+                return item.getValue();\n+            } else {\n+                prev = item;\n+                item = item.getNext();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return size;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return size == 0;\n+    }\n+\n+    @Override\n+    public void display() {\n+        System.out.println(\"----------\");\n+        for (int i = 0; i < data.length; i++) {\n+            System.out.printf(\"%d = [%s]\", i, data[i]);\n+            System.out.println();\n+        }\n+        System.out.println(\"----------\");\n+    }\n+\n+}"
  },
  {
    "sha": "e30806599607da3f9dbf4b3cce9c6c6a0b47a9a3",
    "filename": "src/lesson8/homework08/Main.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/ilyinus/DataStructure/blob/77ecca9b812548858f8bf967c27c7fb367d151ba/src/lesson8/homework08/Main.java",
    "raw_url": "https://github.com/ilyinus/DataStructure/raw/77ecca9b812548858f8bf967c27c7fb367d151ba/src/lesson8/homework08/Main.java",
    "contents_url": "https://api.github.com/repos/ilyinus/DataStructure/contents/src/lesson8/homework08/Main.java?ref=77ecca9b812548858f8bf967c27c7fb367d151ba",
    "patch": "@@ -0,0 +1,37 @@\n+package lesson8.homework08;\n+\n+import lesson8.HashTable;\n+import lesson8.Product;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        HashTable<Product, Integer> hashTable = new HashTableChainImpl<>(3);\n+\n+        hashTable.put(new Product(1, \"Orange\"), 150);\n+        hashTable.put(new Product(77, \"Banana\"), 100);\n+        hashTable.put(new Product(77, \"Carrot\"), 228);\n+        hashTable.put(new Product(60, \"Lemon\"), 250);\n+        hashTable.put(new Product(52, \"Milk\"), 120);\n+        hashTable.put(new Product(21, \"Potato\"), 67);\n+\n+        System.out.println(\"Size is \" + hashTable.size());\n+        hashTable.display();\n+\n+        System.out.println(\"Cost potato is \" + hashTable.get(new Product(21, \"Potato\")));\n+        System.out.println(\"Cost banana is \" + hashTable.get(new Product(77, \"Banana\")));\n+        System.out.println(\"Cost carrot is \" + hashTable.get(new Product(77, \"Carrot\")));\n+\n+        hashTable.remove(new Product(21, \"Potato\"));\n+        hashTable.remove(new Product(77, \"Banana\"));\n+\n+        System.out.println(\"Cost potato is \" + hashTable.get(new Product(21, \"Potato\")));\n+        System.out.println(\"Cost banana is \" + hashTable.get(new Product(77, \"Banana\")));\n+        System.out.println(\"Cost carrot is \" + hashTable.get(new Product(77, \"Carrot\")));\n+\n+        hashTable.display();\n+\n+    }\n+\n+}"
  }
]
