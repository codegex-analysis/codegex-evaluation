[
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/.idea/uiDesigner.xml?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Palette2\">\n+    <group name=\"Swing\">\n+      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Button\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"RadioButton\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"CheckBox\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Label\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n+          <preferred-size width=\"-1\" height=\"20\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+    </group>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "915c0c804c8022443daf054b76a4c7f4bc61cf8f",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/Main.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/Main.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/Main.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/Main.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "e6b3be05f93e78f9a77570477528dfa00d0bf0db",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/Multiply.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/Multiply.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/Multiply.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/Multiply.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "b48aecbcf45984a6ce380a9a902a1976f3d47ab3",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/MyArrayList.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/MyArrayList.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/MyArrayList.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/MyArrayList.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "05dc467536123d549a8d4fa52095ddce9364cd68",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/MySortedArrayList.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/MySortedArrayList.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/MySortedArrayList.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/MySortedArrayList.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "c02c557ba85df80ac764a673d7379de8e0c2c7f6",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/lesson3/Expression.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/Expression.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/Expression.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/Expression.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "9b2f65555e51d53c80dfad2a9fde0e0ed477a9f9",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/lesson3/Main.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/Main.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/Main.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/Main.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "b05d9277e27f67bbc4e9adb70857d9d2174e5450",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyDequeue.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyDequeue.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyDequeue.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyDequeue.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "0856c0f69124830c004eb3b14fc8393e1e6ef73a",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyPriorityQueue.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyPriorityQueue.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyPriorityQueue.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyPriorityQueue.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "c5a05fdeef0920085ca225a8897354cab701b267",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyQueue.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyQueue.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyQueue.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyQueue.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "71f52d1b88af542242b0c06220a7c24541bf0a17",
    "filename": "out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyStack.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyStack.class",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyStack.class",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/out/production/StructuresAlgoritms/ru/geekbrains/lesson3/MyStack.class?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e"
  },
  {
    "sha": "5817a991226209df4f1746b30901085b2514b2d2",
    "filename": "src/ru/geekbrains/Main.java",
    "status": "modified",
    "additions": 53,
    "deletions": 90,
    "changes": 143,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/Main.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/Main.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/Main.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -1,108 +1,71 @@\n package ru.geekbrains;\n \n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.function.UnaryOperator;\n+\n public class Main {\n \n     public static void main(String[] args) {\n-//\tint a = 5;\n-//\tint b = 5;\n-//        System.out.println(a==b);\n-//        int c=5;\n+//        int[] arr = new int[10];\n+//        int[][] arr2 = new int[10][];\n //\n-//        inc(c);\n-//        System.out.println(c);\n-        Person p = new Person(\"Ivan\");\n-        update(p);\n-        System.out.println(p.getName());\n-    }\n-    public static void update(Person p){\n-        p.setName(\"Super \"+p.getName());\n-    }\n-    public static void inc(int c) {\n-        c++;\n-        System.out.println(c);\n-    }\n-\n-    //O(log n)\n-    public static int find1(int x){\n-        int i  =1;\n-        while(i<x){\n-            i*=2;\n+//        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 2, 2, 2, 3, 4, 5));\n+//        list.removeIf(i -> i == 2);\n+//        list.removeAll(Collections.singletonList(2));\n+//        list.replaceAll(i -> i*i);\n+//        list.remove(new Integer(2));\n+//        System.out.println(list);\n+\n+\n+//        MySortedArrayList<Integer> msal= new MySortedArrayList<>();\n+//        msal.add(13);\n+//        msal.add(5);\n+//        msal.add(1);\n+//        msal.add(13);\n+//        msal.add(6);\n+//        msal.add(1);\n+//        msal.add(2);\n+//        System.out.println(msal);\n+//        System.out.println(msal.binaryIndexOf(13));\n+\n+        MyArrayList<Integer> myArrayList = new MyArrayList<>(100000);\n+        Random r = new Random();\n+        for (int i = 0; i < 100000; i++) {\n+            myArrayList.add(r.nextInt(1000));\n         }\n-        return i;\n-    }\n \n+        // получено время - 9614мс\n+//        long timeStart = System.currentTimeMillis();\n+//        myArrayList.selectionSort();\n+//        long timeEnd = System.currentTimeMillis();\n+//        long deltaTime = timeEnd-timeStart;\n+//        System.out.println(\"Time of selectionSort : \"+ deltaTime);\n \n-    //O(n^1/2)\n-    public static boolean find2(int x){\n-        for (int i = 2; i*i <= x; i++) {\n-            if(x%i==0){\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n \n+        // 3982 мс\n+//        long timeStart = System.currentTimeMillis();\n+//        myArrayList.insertionSort();\n+//        long timeEnd = System.currentTimeMillis();\n+//        long deltaTime = timeEnd-timeStart;\n+//        System.out.println(\"Time of insertionSort : \"+ deltaTime);\n \n-    //O(N)\n-    public static int find3(int x){\n-        int sum = 0;\n-        for (int i = 0; i <= x; i++) {\n-            sum+=i;\n-        }\n-        return sum;\n-    }\n \n-  //O(n*log(n))\n-    public static int find4(int x){\n-        int sum =0;\n-        for (int i = 1; i <= x; i++) {\n-            for (int j = 1; j < x; j*=2) {\n-                sum +=i*j;\n-            }\n-        }\n-        return sum;\n-    }\n-\n-\n-    //O(N*N)\n-    public static int find5(int x){\n-        int sum =0;\n-        for (int i = 1; i <= x; i++) {\n-            for (int j = 1; j < x; j+=2) {\n-                sum +=i*j;\n-            }\n-        }\n-        return sum;\n-    }\n-\n-    //O(N*N*N1/2)  O(N^5/2)\n-    public static int find6(int x){\n-        int sum =0;\n-        int s = (int) Math.sqrt(x);\n-        for (int i = 1; i <= x; i++) {\n-            for (int j = 1; j < x; j+=2) {\n-                for (int k = 0; k < s; k++) {\n-                    sum+=i+j+k;\n-                }\n-            }\n-        }\n-        return sum;\n-    }\n+        // Time of bubbleSort : 28822\n+//        long timeStart = System.currentTimeMillis();\n+//        myArrayList.bubbleSort();\n+//        long timeEnd = System.currentTimeMillis();\n+//        long deltaTime = timeEnd-timeStart;\n+//        System.out.println(\"Time of bubbleSort : \"+ deltaTime);\n \n \n-    //O(N^3)\n-    public static int find7(int x){\n-        int sum =0;\n-        for (int i = 1; i <= x; i++) {\n-            for (int j = 1; j < x; j+=2) {\n-                for (int k = 0; k < x; k++) {\n-                    sum+=i+j+k;\n-                }\n-            }\n-        }\n-        return sum;\n+      //  Time of bubbleSortOptimal : 28989\n+        long timeStart = System.currentTimeMillis();\n+        myArrayList.bubbleSortOptimal();\n+        long timeEnd = System.currentTimeMillis();\n+        long deltaTime = timeEnd-timeStart;\n+        System.out.println(\"Time of bubbleSortOptimal : \"+ deltaTime);\n     }\n \n \n-\n }"
  },
  {
    "sha": "0e3c504128450241ef50a1b48d8e7bcce949552f",
    "filename": "src/ru/geekbrains/MyArrayList.java",
    "status": "added",
    "additions": 192,
    "deletions": 0,
    "changes": 192,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/MyArrayList.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/MyArrayList.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/MyArrayList.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,192 @@\n+package ru.geekbrains;\n+\n+import java.util.Arrays;\n+\n+public class MyArrayList<T extends Comparable<T>> {\n+\n+    private T[] list;\n+    private int size;\n+    private int capacity;\n+    private final int DEFAULT_CAPACITY = 10;\n+\n+    public MyArrayList(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity <= 0  \" + capacity);\n+        }\n+        this.capacity = capacity;\n+        list = (T[]) new Comparable[capacity];\n+    }\n+\n+    public int getCapacity() {\n+        return capacity;\n+    }\n+\n+    public MyArrayList() {\n+        this.capacity = DEFAULT_CAPACITY;\n+        list = (T[]) new Comparable[capacity];\n+    }\n+\n+    public void add(T item) {\n+        // проверка на превышение лоад фактора (0.75)\n+        checkLoadF();\n+        list[size] = item;\n+        size++;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"[ \");\n+        for (int i = 0; i < size; i++) {\n+            sb.append(list[i]).append(\", \");\n+        }\n+        if (size > 0) {\n+            sb.setLength(sb.length() - 2);\n+        }\n+        sb.append(\" ]\");\n+        return sb.toString();\n+    }\n+\n+    public void add(int index, T item) {\n+        // проверка на превышение лоад фактора (0.75)\n+        checkLoadF();\n+        if (index>=size){\n+            throw new ArrayIndexOutOfBoundsException(index);\n+        }\n+        for (int i = size; i > index; i--) {\n+            list[i] = list[i - 1];\n+        }\n+        list[index] = item;\n+        size++;\n+    }\n+\n+    public T remove(int index) {\n+       if (index>=size){\n+           throw new ArrayIndexOutOfBoundsException(index);\n+       }\n+        T temp = list[index];\n+        for (int i = index; i < size; i++) {\n+            list[i] = list[i + 1];\n+        }\n+        size--;\n+        list[size] = null;\n+        return temp;\n+    }\n+\n+    public int indexOf(T obj) {\n+        for (int i = 0; i < size; i++) {\n+            if (list[i].equals(obj)) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public T get(int index) {\n+        if (index>=size){\n+            throw new ArrayIndexOutOfBoundsException(index);\n+        }\n+        return list[index];\n+    }\n+\n+    public void set(int index, T item) {\n+        if (index>=size){\n+            throw new ArrayIndexOutOfBoundsException(index);\n+        }\n+        list[index] = item;\n+    }\n+\n+    public int size() {\n+        return size;\n+    }\n+\n+\n+    public boolean remove(T obj) {\n+        int i = indexOf(obj);\n+        if (i == -1) {\n+            return false;\n+        }\n+        remove(i);\n+        return true;\n+    }\n+\n+    private void checkLoadF (){\n+        if (size > capacity*3/4){\n+            capacity+=capacity;\n+            T[] listOld = list.clone();\n+            list = (T[]) new Comparable[capacity];\n+            for (int i = 0; i < listOld.length; i++) {\n+                list[i]=listOld[i];\n+            }\n+        }\n+    }\n+\n+    private boolean less(T item1, T item2) {\n+        return item1.compareTo(item2) < 0;\n+    }\n+\n+    private void swap(int index1, int index2) {\n+        T temp = list[index1];\n+        list[index1] = list[index2];\n+        list[index2] = temp;\n+    }\n+\n+\n+    // квадратичная сортировка\n+    public void selectionSort() {\n+        int indexMin;\n+        for (int i = 0; i < size - 1; i++) {\n+            indexMin = i;\n+            for (int j = i + 1; j < size; j++) {\n+                if (less(list[j], list[indexMin])) {\n+                    indexMin = j;\n+                }\n+            }\n+            swap(i, indexMin);\n+        }\n+    }\n+\n+\n+    // от линейной до квадратичной, оптимально для уже частично отсортированного массива\n+    public void insertionSort() {\n+        T key;\n+        for (int i = 1; i < size; i++) {\n+            int j = i;\n+            key = list[i];\n+            while (j>0&&less(key,list[j-1])){\n+                list[j]=list[j-1];\n+                j--;\n+            }\n+         list[j]=key;\n+        }\n+    }\n+\n+    //квадратичная сортировка\n+    public void bubbleSort(){\n+        for (int i = size-1; i > 0; i--) {\n+            for (int j = 0; j < i; j++) {\n+                if(less(list[j+1], list[j])){\n+                    swap(j+1, j);\n+                }\n+\n+            }\n+\n+        }\n+    }\n+\n+    public void bubbleSortOptimal(){\n+        boolean isSorted;\n+        for (int i = size-1; i > 0; i--) {\n+            isSorted=true;\n+            for (int j = 0; j < i; j++) {\n+                if(less(list[j+1], list[j])){\n+                    swap(j+1, j);\n+                    isSorted=false;\n+                }\n+            }\n+            if(isSorted){\n+                return;\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "bb4803cb6efde502977ddd3add23d94ea4a99d32",
    "filename": "src/ru/geekbrains/MySortedArrayList.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/MySortedArrayList.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/MySortedArrayList.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/MySortedArrayList.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,39 @@\n+package ru.geekbrains;\n+\n+public class MySortedArrayList<T extends Comparable<T>> extends MyArrayList<T> {\n+\n+    @Override\n+    public void add(T item) {\n+        int i = 0;\n+        while (i < size() && get(i).compareTo(item) <= 0) {\n+            i++;\n+        }\n+        super.add(i, item);\n+    }\n+\n+    @Override\n+    public void add(int index, T item) {\n+        add(item);\n+    }\n+\n+    @Override\n+    public void set(int index, T item) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    public int binaryIndexOf(T item) {\n+        int lo = 0;\n+        int hi = size() - 1;\n+        while (lo <= hi) {\n+            int mid = lo + (hi - lo) / 2;\n+            if (item.compareTo(get(mid)) < 0) {\n+                hi = mid - 1;\n+            } else if (item.compareTo(get(mid)) > 0) {\n+                lo = mid + 1;\n+            } else {\n+                return mid;\n+            }\n+        }\n+        return -1;\n+    }\n+}"
  },
  {
    "sha": "a796128aaf29e3ba808e1b776ea0b3f6c225483e",
    "filename": "src/ru/geekbrains/lesson3/Expression.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/Expression.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/Expression.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/lesson3/Expression.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,43 @@\n+package ru.geekbrains.lesson3;\n+\n+import sun.font.CreatedFontTracker;\n+\n+public class Expression {\n+\n+    private String exp;\n+\n+    public Expression(String exp) {\n+        this.exp = exp;\n+\n+    }\n+\n+    public boolean checkBracket() {\n+        MyStack<Character> stack = new MyStack<>(exp.length());\n+        for (int i = 0; i < exp.length(); i++) {\n+            char ch = exp.charAt(i);\n+            if (ch == '(' || ch == '[' || ch == '{') {\n+                stack.push(ch);\n+            } else if (ch == ')' || ch == ']' || ch == '}') {\n+                if (stack.isEmpty()) {\n+                    System.out.println(\"Error in \" + i + \" position\");\n+                    return false;\n+                }\n+                char top = stack.pop();\n+                if (!isPair(ch, top)) {\n+                    System.out.println(\"Error in \" + i + \" position: bracket doesn't match\");\n+                    return false;\n+                }\n+\n+            }\n+        }\n+        if(!stack.isEmpty()){\n+            System.out.println(\"Error : bracket doesn't match\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean isPair(char i, char j) {\n+        return ((i == ')') && (j == '(')) || ((i == ']') && (j == '[')) || ((i == '}') && (j == '{'));\n+    }\n+}"
  },
  {
    "sha": "4ffc570562d998dff196f8a39226d18fa810cab0",
    "filename": "src/ru/geekbrains/lesson3/Main.java",
    "status": "added",
    "additions": 137,
    "deletions": 0,
    "changes": 137,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/Main.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/Main.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/lesson3/Main.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,137 @@\n+package ru.geekbrains.lesson3;\n+\n+\n+import java.util.Scanner;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+//        MyStack<String> myStack = new MyStack(3);\n+//        myStack.push(\"asd\");\n+//        myStack.push(\"bnm\");\n+//        myStack.push(\"123\");\n+//        myStack.push(\"asd\");\n+//        myStack.push(\"bnm\");\n+//        myStack.push(\"123\");\n+//        myStack.push(\"asd\");\n+//        System.out.println(myStack.size());\n+//        for (int i = 0; i < 7; i++) {\n+//            System.out.println(myStack.pop());\n+//        }\n+//        System.out.println(myStack.size());\n+\n+//        Expression exp = new Expression(\"{[()]}\");\n+//        System.out.println(exp.checkBracket());\n+\n+//        MyQueue<Integer> myQueue = new MyQueue<>(10);\n+//\n+//        for (int i = 0; i < 10; i++) {\n+//            myQueue.insert(i*10);\n+//        }\n+//        for (int i = 0; i < 5; i++) {\n+//            myQueue.remove();\n+//        }\n+//        System.out.println(myQueue);\n+//\n+//        for (int i = 0; i < 5; i++) {\n+//            myQueue.insert(i*10);\n+//        }\n+//        System.out.println(myQueue);\n+//        for (int i = 0; i < 5; i++) {\n+//            myQueue.insert(i*10);\n+//        }\n+//        System.out.println(myQueue);\n+//        for (int i = 0; i < 5; i++) {\n+//            myQueue.remove();\n+//        }\n+//        System.out.println(myQueue);\n+//        for (int i = 0; i < 15; i++) {\n+//            myQueue.insert(i*10);\n+//        }\n+//        System.out.println(myQueue);\n+//        for (int i = 0; i < 5; i++) {\n+//            myQueue.remove();\n+//        }\n+//        System.out.println(myQueue);\n+\n+\n+//        MyPriorityQueue <Integer> myPriorityQueue = new MyPriorityQueue<>(4);\n+//        myPriorityQueue.insert(5);\n+//        myPriorityQueue.insert(4);\n+//        myPriorityQueue.insert(1);\n+//        myPriorityQueue.insert(3);\n+//        myPriorityQueue.insert(8);\n+//        System.out.println(myPriorityQueue);\n+//        System.out.println(myPriorityQueue.remove());\n+//        myPriorityQueue.insert(4);\n+//        System.out.println(myPriorityQueue);\n+//        myPriorityQueue.insert(4);\n+//        myPriorityQueue.insert(1);\n+//        myPriorityQueue.insert(3);\n+//        myPriorityQueue.insert(8);\n+//\n+//        System.out.println(myPriorityQueue);\n+\n+\n+   //     reverseExpression();\n+\n+        MyDequeue<Integer> myDequeue =new MyDequeue<>(3);\n+        myDequeue.insertRight(2);\n+        myDequeue.insertRight(5);\n+        myDequeue.insertRight(7);\n+        myDequeue.insertRight(9);\n+        System.out.println(myDequeue);\n+        System.out.println(myDequeue.removeRight());\n+        System.out.println(myDequeue.removeLeft());\n+        System.out.println(myDequeue.removeLeft());\n+        System.out.println(myDequeue);\n+        myDequeue.insertRight(2);\n+        myDequeue.insertRight(5);\n+        myDequeue.insertRight(7);\n+        myDequeue.insertRight(9);\n+        System.out.println(myDequeue);\n+        myDequeue.insertLeft(4);\n+        myDequeue.insertRight(12);\n+        System.out.println(myDequeue);\n+        System.out.println(myDequeue.removeRight());\n+        System.out.println(myDequeue.removeLeft());\n+        System.out.println(myDequeue.removeLeft());\n+        System.out.println(myDequeue.removeLeft());\n+        System.out.println(myDequeue);\n+        myDequeue.insertLeft(4);\n+        myDequeue.insertLeft(13);\n+        myDequeue.insertRight(12);\n+        myDequeue.insertRight(16);\n+        myDequeue.insertLeft(4);\n+        myDequeue.insertLeft(13);\n+        myDequeue.insertRight(12);\n+        myDequeue.insertRight(16);\n+        myDequeue.insertLeft(4);\n+        myDequeue.insertLeft(13);\n+        myDequeue.insertRight(12);\n+        myDequeue.insertRight(16);\n+        System.out.println(myDequeue);\n+        System.out.println(myDequeue.removeRight());\n+        System.out.println(myDequeue.removeLeft());\n+        System.out.println(myDequeue.removeLeft());\n+        System.out.println(myDequeue.removeLeft());\n+        System.out.println(myDequeue);\n+        myDequeue.insertLeft(13);\n+        myDequeue.insertRight(12);\n+        myDequeue.insertRight(16);\n+        System.out.println(myDequeue);\n+    }\n+\n+    public static void reverseExpression(){\n+        System.out.println(\"Введите любую фразу.\");\n+        Scanner scanner = new Scanner(System.in);\n+        String exp = scanner.nextLine();\n+        MyStack<Character> myStack = new MyStack<>(exp.length());\n+        for (int i = 0; i < exp.length(); i++) {\n+            myStack.push(exp.charAt(i));\n+        }\n+        System.out.println(\"Перевернутая фраза: \");\n+        for (int i = 0; i < exp.length(); i++) {\n+            System.out.print(myStack.pop());\n+        }\n+    }\n+}"
  },
  {
    "sha": "e44db41987e5f917a510652ae172acbea6a19096",
    "filename": "src/ru/geekbrains/lesson3/MyDequeue.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/MyDequeue.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/MyDequeue.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/lesson3/MyDequeue.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,150 @@\n+package ru.geekbrains.lesson3;\n+\n+import java.util.NoSuchElementException;\n+\n+public class MyDequeue<T> {\n+\n+    private T[] list;\n+    private int size;\n+    private int capacity;\n+    private final int DEFAULT_CAPACITY = 10;\n+    private int begin;\n+    private int end;\n+\n+    public MyDequeue(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity: \" + capacity);\n+        }\n+        this.capacity = capacity;\n+        list = (T[]) new Object[capacity];\n+\n+    }\n+\n+    public MyDequeue() {\n+        this.capacity = DEFAULT_CAPACITY;\n+        list = (T[]) new Object[capacity];\n+\n+    }\n+\n+    public boolean isFull() {\n+        return size == list.length;\n+    }\n+\n+    public boolean isEmpty() {\n+        return size == 0;\n+    }\n+\n+    public int size() {\n+        return size;\n+    }\n+\n+    private int nextIndex(int index) {\n+        return (index + 1) % list.length;\n+    }\n+\n+    private int prevIndex(int index) {\n+        return (index - 1) >= 0 ? index - 1 : list.length - 1;\n+    }\n+\n+    /**\n+     * Метод добавления в очередь нового элемента слева\n+     *\n+     * @param item добавляет элемент\n+     */\n+    public void insertLeft(T item){\n+        if (isFull()) {\n+            reCapacity(capacity * 2);\n+            //  throw new IllegalStateException(\"очередь полная\");\n+        }\n+        size++;\n+        begin = prevIndex(begin);\n+        list[begin] = item;\n+    }\n+\n+\n+    /**\n+     * Метод получения из очереди первого элемента слева с его последующим удалением из очереди\n+     *\n+     */\n+    public T removeLeft() {\n+        T temp = peekLeft();\n+        size--;\n+        list[begin] = null;\n+        begin = nextIndex(begin);\n+        return temp;\n+    }\n+\n+    /**\n+     * Метод добавления в очередь нового элемента справа\n+     *\n+     * @param item добавляет элемент\n+     */\n+    public void insertRight(T item) {\n+        if (isFull()) {\n+            reCapacity(capacity * 2);\n+            //реализовать расширение массива\n+            // throw new IllegalStateException(\"очередь полная\");\n+        }\n+        size++;\n+        list[end] = item;\n+        end = nextIndex(end);\n+    }\n+\n+    public T peekLeft() throws NoSuchElementException {\n+        if (isEmpty()) {\n+            throw new NoSuchElementException();\n+        }\n+        return list[begin];\n+    }\n+\n+    public T peekRight() throws NoSuchElementException {\n+        if (isEmpty()) {\n+            throw new NoSuchElementException();\n+        }\n+        return list[prevIndex(end)];\n+    }\n+\n+\n+    /**\n+     * Метод получения из очереди первого элемента справа с его последующим удалением из очереди\n+     *\n+     */\n+    public T removeRight() {\n+        T temp = peekRight();\n+        size--;\n+        list[prevIndex(end)] = null;\n+        end = prevIndex(end);\n+        return temp;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder(\"[ \");\n+        int i = begin;\n+        if (size > 0) {\n+            do {\n+                sb.append(list[i]).append(\", \");\n+                i = nextIndex(i);\n+            }\n+            while (i != end);\n+            sb.setLength(sb.length() - 2);\n+        }\n+        sb.append(\" ]\");\n+        return sb.toString();\n+    }\n+\n+\n+    private void reCapacity(int newCapacity) {\n+        T[] tempArr = (T[]) new Object[newCapacity];\n+        if (begin < end) {\n+            System.arraycopy(list, 0, tempArr, 0, size);\n+        } else {\n+            System.arraycopy(list, begin, tempArr, 0, size - begin);\n+            System.arraycopy(list, 0, tempArr, size - begin, end);\n+        }\n+        begin = 0;\n+        end = size;\n+        list = tempArr;\n+        capacity = newCapacity;\n+    }\n+}"
  },
  {
    "sha": "cd16e0389235c4394ba1b34182779bd70f6e3105",
    "filename": "src/ru/geekbrains/lesson3/MyPriorityQueue.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/MyPriorityQueue.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/MyPriorityQueue.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/lesson3/MyPriorityQueue.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,83 @@\n+package ru.geekbrains.lesson3;\n+\n+import java.util.Arrays;\n+import java.util.EmptyStackException;\n+\n+public class MyPriorityQueue <T extends Comparable<T>>{\n+    private T[]list ;\n+    private int size;\n+    private int capacity;\n+    private final int DEFAULT_CAPACITY=10;\n+\n+    public MyPriorityQueue(int capacity) {\n+        if (capacity<=0){\n+            throw new IllegalArgumentException(\"capacity: \"+ capacity);\n+        }\n+        this.capacity = capacity;\n+        list = (T[]) new Comparable[capacity];\n+\n+    }\n+    public MyPriorityQueue() {\n+        this.capacity = DEFAULT_CAPACITY;\n+        list= (T[]) new Comparable[capacity];\n+\n+    }\n+\n+    public boolean isFull(){\n+        return size == list.length;\n+    }\n+\n+    public boolean isEmpty(){\n+        return size == 0;\n+    }\n+\n+    public int size() {\n+        return size;\n+    }\n+\n+    public void insert(T item){\n+        if (isFull()){\n+           reCapacity(capacity*2);\n+          //  throw new StackOverflowError(\"Очередь заполнена\");\n+        }\n+\n+        list[size]=item;\n+        size++;\n+        int i = size-1;\n+        while (i>0 && list[i-1].compareTo(list[i])<0){\n+         swap(i,i-1);\n+         i--;\n+        }\n+    }\n+\n+    public T peek(){\n+        if (isEmpty()){\n+            throw new EmptyStackException();\n+        }\n+        return list[size-1];\n+    }\n+\n+    public T remove(){\n+        T temp = peek();\n+        size--;\n+        list[size]=null;\n+        return temp;\n+    }\n+    private void reCapacity(int newCapacity){\n+        T[] tempArr = (T[]) new Comparable[newCapacity];\n+        System.arraycopy(list,0,tempArr,0,size);\n+        capacity=newCapacity;\n+        list=tempArr;\n+    }\n+\n+    private void swap(int index1, int index2) {\n+        T temp = list[index1];\n+        list[index1] = list[index2];\n+        list[index2] = temp;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Arrays.toString(Arrays.copyOf(list, size));\n+    }\n+}"
  },
  {
    "sha": "4680f1de3807a0cb152bade94d30e870baea4b54",
    "filename": "src/ru/geekbrains/lesson3/MyQueue.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/MyQueue.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/MyQueue.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/lesson3/MyQueue.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,107 @@\n+package ru.geekbrains.lesson3;\n+\n+import java.util.Arrays;\n+import java.util.NoSuchElementException;\n+\n+public class MyQueue<T> {\n+    private T[] list;\n+    private int size;\n+    private int capacity;\n+    private final int DEFAULT_CAPACITY = 10;\n+    private int begin;\n+    private int end;\n+\n+    public MyQueue(int capacity) {\n+        if (capacity <= 0) {\n+            throw new IllegalArgumentException(\"capacity: \" + capacity);\n+        }\n+        this.capacity = capacity;\n+        list = (T[]) new Object[capacity];\n+\n+    }\n+\n+    public MyQueue() {\n+        this.capacity = DEFAULT_CAPACITY;\n+        list = (T[]) new Object[capacity];\n+\n+    }\n+\n+    public boolean isFull() {\n+        return size == list.length;\n+    }\n+\n+    public boolean isEmpty() {\n+        return size == 0;\n+    }\n+\n+    public int size() {\n+        return size;\n+    }\n+\n+    private int nextIndex(int index) {\n+        return (index + 1) % list.length;\n+    }\n+\n+    /**\n+     * Метод добавления в очередь нового элемента\n+     *\n+     * @param item добавляет элемент\n+     * @throws IllegalStateException если очередь полная\n+     */\n+    public void insert(T item) throws IllegalStateException {\n+        if (isFull()) {\n+            reCapacity(capacity * 2);\n+            // throw new IllegalStateException(\"очередь полная\");\n+        }\n+        size++;\n+        list[end] = item;\n+        end = nextIndex(end);\n+    }\n+\n+    public T peekFront() throws NoSuchElementException {\n+        if (isEmpty()) {\n+            throw new NoSuchElementException();\n+        }\n+        return list[begin];\n+\n+    }\n+\n+    public T remove() {\n+        T temp = peekFront();\n+        size--;\n+        list[begin] = null;\n+        begin = nextIndex(begin);\n+        return temp;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder(\"[ \");\n+        int i = begin;\n+        if (size > 0) {\n+            do {\n+                sb.append(list[i]).append(\", \");\n+                i = nextIndex(i);\n+            }\n+            while (i != end);\n+            sb.setLength(sb.length() - 2);\n+        }\n+        sb.append(\" ]\");\n+        return sb.toString();\n+    }\n+\n+    private void reCapacity(int newCapacity) {\n+        T[] tempArr = (T[]) new Object[newCapacity];\n+        if (begin < end) {\n+            System.arraycopy(list, 0, tempArr, 0, size);\n+        } else {\n+            System.arraycopy(list, begin, tempArr, 0, size - begin);\n+            System.arraycopy(list, 0, tempArr, size - begin, end);\n+\n+        }\n+        begin = 0;\n+        end = size;\n+        list = tempArr;\n+        capacity = newCapacity;\n+    }\n+}"
  },
  {
    "sha": "421fcec065265fdd62cd91cf3118762dca61af6d",
    "filename": "src/ru/geekbrains/lesson3/MyStack.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/blob/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/MyStack.java",
    "raw_url": "https://github.com/AlexaNovikova/StructuresAlgoritms/raw/8dfdaa554d6b1130787916872b3b9c46c57ae43e/src/ru/geekbrains/lesson3/MyStack.java",
    "contents_url": "https://api.github.com/repos/AlexaNovikova/StructuresAlgoritms/contents/src/ru/geekbrains/lesson3/MyStack.java?ref=8dfdaa554d6b1130787916872b3b9c46c57ae43e",
    "patch": "@@ -0,0 +1,65 @@\n+package ru.geekbrains.lesson3;\n+\n+import java.util.EmptyStackException;\n+\n+public class MyStack <T>{\n+    private T[]list ;\n+    private int size;\n+    private int capacity;\n+    private final int DEFAULT_CAPACITY=10;\n+\n+    public MyStack(int capacity) {\n+        if (capacity<=0){\n+            throw new IllegalArgumentException(\"capacity: \"+ capacity);\n+        }\n+        this.capacity = capacity;\n+        list = (T[])new Object[capacity];\n+\n+    }\n+    public MyStack() {\n+        this.capacity = DEFAULT_CAPACITY;\n+        list= (T[]) new Object[capacity];\n+\n+    }\n+\n+    public boolean isFull(){\n+        return size == list.length;\n+    }\n+\n+    public boolean isEmpty(){\n+        return size == 0;\n+    }\n+\n+    public int size() {\n+        return size;\n+    }\n+\n+    public void push(T item){\n+        if (isFull()){\n+            reCapacity(capacity*2);\n+        //    throw new StackOverflowError(\"нет места в стеке\");\n+        }\n+        list[size]=item;\n+        size++;\n+    }\n+\n+    public T pick() throws EmptyStackException{\n+        if (isEmpty()){\n+            throw new EmptyStackException();\n+        }\n+        return list[size-1];\n+    }\n+\n+    public T pop(){\n+        T temp = pick();\n+        size--;\n+        list[size]=null;\n+        return temp;\n+    }\n+    private void reCapacity(int newCapacity){\n+        T[] tempArr = (T[]) new Object[newCapacity];\n+        System.arraycopy(list,0,tempArr,0,size);\n+        list=tempArr;\n+        capacity= newCapacity;\n+    }\n+}"
  }
]
