[
  {
    "sha": "3e4f66cd0673b267d9ae6b145ce1fea64b5d4af5",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/pom.xml",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/pom.xml",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/pom.xml?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -313,6 +313,17 @@\n \t\t\t<artifactId>opencsv</artifactId>\n \t\t\t<version>3.3</version>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.poi</groupId>\n+\t\t\t<artifactId>poi</artifactId>\n+\t\t\t<version>4.1.2</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.poi</groupId>\n+\t\t\t<artifactId>poi-ooxml</artifactId>\n+\t\t\t<version>4.1.2</version>\n+\t\t</dependency>\n+\n \n \t</dependencies>\n \t<build>"
  },
  {
    "sha": "4e4c842d03eace38af0dc5a9061acd87181fb7b8",
    "filename": "src/main/java/com/strandls/observation/ApiConstants.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/ApiConstants.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/ApiConstants.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/ApiConstants.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -80,4 +80,6 @@\n \tpublic static final String LISTCSV = \"/listcsv\";\n \tpublic static final String LISTDOWNLOAD = \"/listdownload\";\n \n+    public static final String BULK = \"/bulk\";\n+\tpublic static final String UPLOAD = \"/upload\";\n }"
  },
  {
    "sha": "80d6c304823fd6e58de8a9452539ddf14bf10a8a",
    "filename": "src/main/java/com/strandls/observation/ObservationServeletContextListener.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/ObservationServeletContextListener.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/ObservationServeletContextListener.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/ObservationServeletContextListener.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -75,7 +75,6 @@ protected void configureServlets() {\n \t\t\t\t\t\tconfiguration.addAnnotatedClass(cls);\n \t\t\t\t\t}\n \t\t\t\t} catch (ClassNotFoundException | IOException | URISyntaxException e) {\n-\t\t\t\t\te.printStackTrace();\n \t\t\t\t\tlogger.error(e.getMessage());\n \t\t\t\t}\n \n@@ -187,8 +186,7 @@ public void contextDestroyed(ServletContextEvent servletContextEvent) {\n \t\ttry {\n \t\t\tchannel.getConnection().close();\n \t\t} catch (IOException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n+\t\t\tlogger.error(e.getMessage());\n \t\t}\n \n \t\tsuper.contextDestroyed(servletContextEvent);"
  },
  {
    "sha": "e2a1531318419f8f1aa9857698e5be66e0686489",
    "filename": "src/main/java/com/strandls/observation/contorller/ObservationController.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/contorller/ObservationController.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/contorller/ObservationController.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/contorller/ObservationController.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -32,6 +32,8 @@\n import javax.ws.rs.core.Response.Status;\n import javax.ws.rs.core.UriInfo;\n \n+import com.strandls.observation.dto.ObservationBulkDTO;\n+import com.strandls.observation.pojo.*;\n import org.pac4j.core.profile.CommonProfile;\n \n import com.strandls.activity.pojo.Activity;\n@@ -47,6 +49,7 @@\n import com.strandls.esmodule.pojo.MapSearchQuery;\n import com.strandls.observation.ApiConstants;\n import com.strandls.observation.dao.ObservationDownloadLogDAO;\n+import com.strandls.observation.es.util.ESUpdate;\n import com.strandls.observation.es.util.ESUtility;\n import com.strandls.observation.es.util.ObservationListCSVThread;\n import com.strandls.observation.es.util.ObservationListElasticMapping;\n@@ -118,6 +121,9 @@\n \t@Inject\n \tprivate ObservationMapperHelper observationHelper;\n \n+\t@Inject\n+\tprivate ESUpdate esUpdate;\n+\n \t@Inject\n \tprivate ESUtility esUtility;\n \n@@ -1346,4 +1352,20 @@ public Response getObservationIdentifiedUserInfo(@PathParam(\"userId\") String use\n \n \t}\n \n+\t@POST\n+\t@Path(ApiConstants.BULK + ApiConstants.UPLOAD + ApiConstants.OBSERVATION)\n+\t@ValidateUser\n+\t@Consumes(MediaType.APPLICATION_JSON)\n+\t@ApiOperation(value = \"Perform Bulk Upload of Observations\", notes = \"empty response\")\n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 400, message = \"unable to perform bulk upload\", response = String.class) })\n+\tpublic Response bulkObservationUpload(@Context HttpServletRequest request, ObservationBulkDTO observationBulkData) {\n+\t\ttry {\n+\t\t\tobservationService.observationBulkUpload(request, observationBulkData);\n+\t\t\treturn Response.status(Status.OK).build();\n+\t\t} catch (Exception ex) {\n+\t\t\treturn Response.status(Status.BAD_REQUEST).entity(ex.getMessage()).build();\n+\t\t}\n+\t}\n+\n }\n\\ No newline at end of file"
  },
  {
    "sha": "31d47f7664f233bbd6766e9e16be5ea14fb9b969",
    "filename": "src/main/java/com/strandls/observation/dao/DataTableDAO.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/dao/DataTableDAO.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/dao/DataTableDAO.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/dao/DataTableDAO.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,37 @@\n+package com.strandls.observation.dao;\n+\n+import javax.inject.Inject;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.strandls.observation.pojo.DataTable;\n+import com.strandls.observation.util.AbstractDAO;\n+\n+public class DataTableDAO extends AbstractDAO<DataTable, Long> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DataTableDAO.class);\n+\n+    @Inject\n+    protected DataTableDAO(SessionFactory sessionFactory) {\n+        super(sessionFactory);\n+    }\n+\n+    @Override\n+    public DataTable findById(Long id) {\n+        Session session = sessionFactory.openSession();\n+        DataTable entity = null;\n+        try {\n+            entity = session.get(DataTable.class, id);\n+        } catch (Exception e) {\n+            logger.info(e.getMessage());\n+            logger.error(e.toString());\n+        } finally {\n+            session.close();\n+        }\n+        return entity;\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "746e01a40cab9cbbde829898e5e8dad935927d4b",
    "filename": "src/main/java/com/strandls/observation/dao/ObservationDAO.java",
    "status": "modified",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/dao/ObservationDAO.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/dao/ObservationDAO.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/dao/ObservationDAO.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -3,6 +3,7 @@\n  */\n package com.strandls.observation.dao;\n \n+import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -165,4 +166,20 @@ public Observation findById(Long id) {\n \t\treturn maxVotedRecoFreq;\n \t}\n \n+\tpublic List<Observation> getObservationCountForDatatable(Long datatableId) {\n+\t\tSession session = sessionFactory.openSession();\n+\t\tList<Observation> observationList = new ArrayList<>();\n+\t\tString hql = \"from Observation o where o.dataTableId = :datatable\";\n+\t\ttry {\n+\t\t\tQuery query = session.createQuery(hql);\n+\t\t\tquery.setParameter(\"datatable\", datatableId);\n+\t\t\tobservationList = query.list();\n+\t\t} catch (Exception ex) {\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t} finally {\n+\t\t\tsession.close();\n+\t\t}\n+\t\treturn observationList;\n+\t}\n+\n }"
  },
  {
    "sha": "71d03dfaae022338a66d047e9825c4febd69d3a3",
    "filename": "src/main/java/com/strandls/observation/dto/ObservationBulkDTO.java",
    "status": "added",
    "additions": 214,
    "deletions": 0,
    "changes": 214,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/dto/ObservationBulkDTO.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/dto/ObservationBulkDTO.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/dto/ObservationBulkDTO.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,214 @@\n+package com.strandls.observation.dto;\n+\n+import java.util.Date;\n+import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ObservationBulkDTO {\n+    // title\n+    private String title;\n+    private String summary;\n+    private String description;\n+    private Date createdOn;\n+\n+    // usage rights\n+    private Long licenseId;\n+\n+    // party\n+    private Long contributors;\n+    private String attribution;\n+\n+    // taxonomic coverage\n+    private String sGroup;\n+\n+    // temporal coverage\n+    private String dateAccuracy;\n+    private Date observedFromDate;\n+    private Date observedToDate;\n+\n+    // geographical coverage\n+    private String locationScale;\n+    private String locationAccuracy;\n+    private String observedAt;\n+    private String reverseGeocoded;\n+    private Double latitude;\n+    private Double longitude;\n+    private Boolean useDegMinSec;\n+    private String degMinSec;\n+    private Boolean hidePreciseLocation;\n+\n+    // others\n+    private String project;\n+    private String methods;\n+    private String basisOfData;\n+\n+    // other fields related to bulk upload\n+    private Long dataset;\n+    private String filename;\n+    private Long languageId;\n+    private Map<String, Integer> columns;\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+    public String getSummary() {\n+        return summary;\n+    }\n+    public void setSummary(String summary) {\n+        this.summary = summary;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+    public Date getCreatedOn() {\n+        return createdOn;\n+    }\n+    public void setCreatedOn(Date createdOn) {\n+        this.createdOn = createdOn;\n+    }\n+    public Long getLicenseId() {\n+        return licenseId;\n+    }\n+    public void setLicenseId(Long licenseId) {\n+        this.licenseId = licenseId;\n+    }\n+    public Long getContributors() {\n+        return contributors;\n+    }\n+    public void setContributors(Long contributors) {\n+        this.contributors = contributors;\n+    }\n+    public String getAttribution() {\n+        return attribution;\n+    }\n+    public void setAttribution(String attribution) {\n+        this.attribution = attribution;\n+    }\n+    public String getSGroup() {\n+        return sGroup;\n+    }\n+    public void setSGroup(String sGroup) {\n+        this.sGroup = sGroup;\n+    }\n+    public String getDateAccuracy() {\n+        return dateAccuracy;\n+    }\n+    public void setDateAccuracy(String dateAccuracy) {\n+        this.dateAccuracy = dateAccuracy;\n+    }\n+    public Date getObservedFromDate() {\n+        return observedFromDate;\n+    }\n+    public void setObservedFromDate(Date observedFromDate) {\n+        this.observedFromDate = observedFromDate;\n+    }\n+    public Date getObservedToDate() {\n+        return observedToDate;\n+    }\n+    public void setObservedToDate(Date observedToDate) {\n+        this.observedToDate = observedToDate;\n+    }\n+    public String getLocationScale() {\n+        return locationScale;\n+    }\n+    public void setLocationScale(String locationScale) {\n+        this.locationScale = locationScale;\n+    }\n+    public String getLocationAccuracy() {\n+        return locationAccuracy;\n+    }\n+    public void setLocationAccuracy(String locationAccuracy) {\n+        this.locationAccuracy = locationAccuracy;\n+    }\n+    public String getObservedAt() {\n+        return observedAt;\n+    }\n+    public void setObservedAt(String observedAt) {\n+        this.observedAt = observedAt;\n+    }\n+    public String getReverseGeocoded() {\n+        return reverseGeocoded;\n+    }\n+    public void setReverseGeocoded(String reverseGeocoded) {\n+        this.reverseGeocoded = reverseGeocoded;\n+    }\n+    public Double getLatitude() {\n+        return latitude;\n+    }\n+    public void setLatitude(Double latitude) {\n+        this.latitude = latitude;\n+    }\n+    public Double getLongitude() {\n+        return longitude;\n+    }\n+    public void setLongitude(Double longitude) {\n+        this.longitude = longitude;\n+    }\n+    public Boolean getUseDegMinSec() {\n+        return useDegMinSec;\n+    }\n+    public void setUseDegMinSec(Boolean useDegMinSec) {\n+        this.useDegMinSec = useDegMinSec;\n+    }\n+    public String getDegMinSec() {\n+        return degMinSec;\n+    }\n+    public void setDegMinSec(String degMinSec) {\n+        this.degMinSec = degMinSec;\n+    }\n+    public Boolean getHidePreciseLocation() {\n+        return hidePreciseLocation;\n+    }\n+    public void setHidePreciseLocation(Boolean hidePreciseLocation) {\n+        this.hidePreciseLocation = hidePreciseLocation;\n+    }\n+    public String getProject() {\n+        return project;\n+    }\n+    public void setProject(String project) {\n+        this.project = project;\n+    }\n+    public String getMethods() {\n+        return methods;\n+    }\n+    public void setMethods(String methods) {\n+        this.methods = methods;\n+    }\n+    public String getBasisOfData() {\n+        return basisOfData;\n+    }\n+    public void setBasisOfData(String basisOfData) {\n+        this.basisOfData = basisOfData;\n+    }\n+    public Long getDataset() {\n+        return dataset;\n+    }\n+    public void setDataset(Long dataset) {\n+        this.dataset = dataset;\n+    }\n+    public String getFilename() {\n+        return filename;\n+    }\n+    public void setFilename(String filename) {\n+        this.filename = filename;\n+    }\n+    public Long getLanguageId() {\n+        return languageId;\n+    }\n+    public void setLanguageId(Long languageId) {\n+        this.languageId = languageId;\n+    }\n+    public Map<String, Integer> getColumns() {\n+        return columns;\n+    }\n+    public void setColumns(Map<String, Integer> columns) {\n+        this.columns = columns;\n+    }\n+}"
  },
  {
    "sha": "47be14968eab0d52cd7b238d2f1be820fa57cfd8",
    "filename": "src/main/java/com/strandls/observation/es/util/ConstructESDocument.java",
    "status": "modified",
    "additions": 24,
    "deletions": 22,
    "changes": 46,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ConstructESDocument.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ConstructESDocument.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/es/util/ConstructESDocument.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -3,14 +3,16 @@\n  */\n package com.strandls.observation.es.util;\n \n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n import org.hibernate.Session;\n import org.hibernate.SessionFactory;\n import org.hibernate.query.Query;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.inject.Inject;\n-\n /**\n  * @author Abhishek Rudra\n  *\n@@ -22,7 +24,7 @@\n \t@Inject\n \tprivate SessionFactory sessionFactory;\n \n-\tpublic ObservationESDocument getESDocumentStub(String observationId) {\n+\tpublic List<ObservationESDocument> getESDocumentStub(String observationId) {\n \n \t\tString qry = \"SELECT id observation_id, author_id, created_by, profile_pic, created_on, group_id, group_name, CONCAT(group_id,'|',group_name,'|',group_order) sgroup_filter, \"\n \t\t\t\t+ \"row_to_json((SELECT t FROM (SELECT latitude AS lat, longitude as lon)t))\\\\:\\\\:text AS location, \"\n@@ -67,8 +69,8 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"visit_count, max_voted_reco_id, is_checklist, to_date,  \" + \"checklist_annotations,  \"\n \t\t\t\t+ \"is_locked, language_id, location_scale,  \"\n \t\t\t\t+ \"dataset_id, repr_image_id, protocol, no_of_images, no_of_videos, no_of_audio,  \"\n-\t\t\t\t+ \"no_of_identifications, data_table_id, date_accuracy, is_verified FROM observation where is_deleted = false AND id = \"\n-\t\t\t\t+ observationId + \") O \" + \"LEFT OUTER JOIN  \"\n+\t\t\t\t+ \"no_of_identifications, data_table_id, date_accuracy, is_verified FROM observation where is_deleted IS NOT TRUE AND id in ( \"\n+\t\t\t\t+ observationId + \" )) O \" + \"LEFT OUTER JOIN  \"\n \t\t\t\t+ \"(SELECT id r_id, file_name AS repr_image_url FROM resource) I ON I.r_id = O.repr_image_id   \"\n \t\t\t\t+ \"LEFT OUTER JOIN \"\n \t\t\t\t+ \"(SELECT id d_id, title as dataset_title FROM dataset) D ON O.dataset_id = D.d_id \"\n@@ -131,13 +133,13 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"\t\t\tEND AS common_name,language_id, is_scientific_name, accepted_name_id,Count \"\n \t\t\t\t+ \"\t\tFROM  \"\n \t\t\t\t+ \"\t\t(SELECT id, observation_id, author_id , confidence, recommendation_id, common_name_reco_id, voted_on, comment, 1\\\\:\\\\:integer AS Count \"\n-\t\t\t\t+ \"  \" + \"\t\tFROM recommendation_vote WHERE observation_id = \" + observationId + \") extended_rv \"\n-\t\t\t\t+ \"\t\tINNER JOIN\t \"\n+\t\t\t\t+ \"  \" + \"\t\tFROM recommendation_vote WHERE observation_id in ( \" + observationId\n+\t\t\t\t+ \" )) extended_rv \" + \"\t\tINNER JOIN\t \"\n \t\t\t\t+ \"\t\t(SELECT id rid, taxon_concept_id, name AS recommendation_name, is_scientific_name, language_id,  \"\n \t\t\t\t+ \"\t\taccepted_name_id, last_modified FROM recommendation) extended_reco \"\n \t\t\t\t+ \"\t\tON rid =  recommendation_id \" + \"\t\tLEFT OUTER JOIN \"\n-\t\t\t\t+ \"\t\t(SELECT id a_id, name voted_by, COALESCE(profile_pic,  icon) profile_pic from suser ) A ON a_id = author_id \" + \"\t\t \"\n-\t\t\t\t+ \"\t\tUNION \" + \"\t\t \" + \"\t\tSELECT  \"\n+\t\t\t\t+ \"\t\t(SELECT id a_id, name voted_by, COALESCE(profile_pic,  icon) profile_pic from suser ) A ON a_id = author_id \"\n+\t\t\t\t+ \"\t\t \" + \"\t\tUNION \" + \"\t\t \" + \"\t\tSELECT  \"\n \t\t\t\t+ \"\t\tobservation_id, id reco_vote_id, author_id voted_by_author_id, voted_by, confidence, recommendation_id,  \"\n \t\t\t\t+ \"\t\tcommon_name_reco_id, voted_on, comment, taxon_concept_id, last_modified, profile_pic, recommendation_name, \"\n \t\t\t\t+ \"\t\tCASE  \"\n@@ -146,7 +148,7 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"\t\t\tEND AS common_name, language_id, is_scientific_name, accepted_name_id, Count\"\n \t\t\t\t+ \"\t\tFROM  \" + \"\t\t(SELECT  \"\n \t\t\t\t+ \"\t\tid, observation_id, author_id, confidence, recommendation_id, common_name_reco_id, voted_on, comment,0\\\\:\\\\:integer AS Count  \"\n-\t\t\t\t+ \"\t\tFROM recommendation_vote WHERE observation_id = \" + observationId + \" ) extended_rv \"\n+\t\t\t\t+ \"\t\tFROM recommendation_vote WHERE observation_id in ( \" + observationId + \" ) ) extended_rv \"\n \t\t\t\t+ \"\t\tINNER JOIN\t \"\n \t\t\t\t+ \"\t\t(SELECT id rid, null\\\\:\\\\:integer AS taxon_concept_id, name AS recommendation_name, is_scientific_name, language_id,  \"\n \t\t\t\t+ \"\t\taccepted_name_id, last_modified FROM recommendation) extended_reco \"\n@@ -168,8 +170,8 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"\t\t( \" + \"\t\tSELECT  observation_id ,  \" + \"\t\tjsonb_agg( DISTINCT  \"\n \t\t\t\t+ \"\t\tto_jsonb((row_to_json((SELECT t FROM (SELECT resource_id id, description , file_name , type ,url, rating , upload_time , uploader_id, license_id) t ))  \"\n \t\t\t\t+ \"\t\t)))\\\\:\\\\:json observation_resource \" + \"\t\tFROM  \"\n-\t\t\t\t+ \"\t\t(SELECT resource_id or_resource_id, observation_id FROM observation_resource WHERE observation_id = \"\n-\t\t\t\t+ observationId + \") EO \" + \"\t\tINNER JOIN \"\n+\t\t\t\t+ \"\t\t(SELECT resource_id or_resource_id, observation_id FROM observation_resource WHERE observation_id in (\"\n+\t\t\t\t+ observationId + \" )) EO \" + \"\t\tINNER JOIN \"\n \t\t\t\t+ \"\t\t(SELECT id resource_id, description , file_name , type ,url, rating , upload_time , uploader_id, license_id FROM resource ) extended_resource \"\n \t\t\t\t+ \"\t\tON or_resource_id = resource_id GROUP BY observation_id \"\n \t\t\t\t+ \"\t\t) obr ON obr.observation_id = O.id  \" + \"LEFT OUTER JOIN \"\n@@ -260,7 +262,7 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"\t\t\t\t\t\t\t\tELSE NULL \" + \" \" + \"\t\t\t\t\t\t\tEND \"\n \t\t\t\t+ \"\t\t\t\t\tEND \" + \"\t\t\tEND AS max_range \" + \" \" + \"\t\t\tFROM  \" + \"\t\t\t( \"\n \t\t\t\t+ \"\t\t\t\t(SELECT observation_id ugo_observation_id, user_group_id ugo_user_group_id  \"\n-\t\t\t\t+ \"\t\t\t\tFROM user_group_observations WHERE observation_id = \" + observationId + \") UGO \"\n+\t\t\t\t+ \"\t\t\t\tFROM user_group_observations WHERE observation_id in ( \" + observationId + \" )) UGO \"\n \t\t\t\t+ \"\t\t\t\tLEFT OUTER JOIN \"\n \t\t\t\t+ \"\t\t\t\t(SELECT u_custom_field_id, cf_author_id, cf_data_type, cf_field_type, cf_icon_url, cf_name,  \"\n \t\t\t\t+ \"\t\t\t\tcf_notes, cf_units, u_allowed_participation, u_author_id, u_deafult_value, u_display_order,  \"\n@@ -282,8 +284,8 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"\t\t\t\t\tcustom_field_value_id o_custom_field_value_id, last_modified o_last_modified,  \"\n \t\t\t\t+ \"\t\t\t\t\tobservation_id o_observation_id, user_group_id o_user_group_id, value_date o_value_date, \"\n \t\t\t\t+ \"\t\t\t\t\tvalue_numeric o_value_numeric, value_string o_value_string \"\n-\t\t\t\t+ \"\t\t\t\t\tFROM  \" + \"\t\t\t\t\tobservation_custom_field WHERE observation_id = \"\n-\t\t\t\t+ observationId + \")O  \" + \"\t\t\t\t\tLEFT OUTER JOIN \"\n+\t\t\t\t+ \"\t\t\t\t\tFROM  \" + \"\t\t\t\t\tobservation_custom_field WHERE observation_id in ( \"\n+\t\t\t\t+ observationId + \" ))O  \" + \"\t\t\t\t\tLEFT OUTER JOIN \"\n \t\t\t\t+ \"\t\t\t\t\t(SELECT id, author_id cv_author_id, custom_field_id cv_id, icon_url cv_icon_url, notes cv_notes,  \"\n \t\t\t\t+ \"\t\t\t\t\tvalue AS cv_value \" + \"\t\t\t\t\tFROM  \"\n \t\t\t\t+ \"\t\t\t\t\tcustom_field_values) CV ON CV.id = O.o_custom_field_value_id \" + \" \"\n@@ -306,8 +308,8 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"\t\tjsonb_agg( DISTINCT (to_jsonb(row_to_json(( SELECT t FROM (SELECT flag_id id,  \"\n \t\t\t\t+ \"\t\tauthor_id,notes,author_name, profile_pic, created_on, flag )t)))))\\\\:\\\\:json flags \"\n \t\t\t\t+ \"\t\tFROM \" + \"\t\t(SELECT id flag_id, object_id, author_id, notes, created_on, flag   \"\n-\t\t\t\t+ \"\t\tFROM flag WHERE object_type = 'species.participation.Observation' AND object_id = \"\n-\t\t\t\t+ observationId + \") F \" + \"\t\tLEFT OUTER JOIN \"\n+\t\t\t\t+ \"\t\tFROM flag WHERE object_type = 'species.participation.Observation' AND object_id in ( \"\n+\t\t\t\t+ observationId + \" )) F \" + \"\t\tLEFT OUTER JOIN \"\n \t\t\t\t+ \"\t\t(SELECT id, name author_name, COALESCE(profile_pic,  icon) profile_pic from suser ) U ON U.id = author_id GROUP BY object_id \"\n \t\t\t\t+ \"\t\t) F ON F.observation_id = O.id \" + \"LEFT OUTER JOIN \" + \"\t\t( \"\n \t\t\t\t+ \"\t\tSELECT tag_ref as observation_id,  \"\n@@ -319,8 +321,8 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"\t\tjsonb_agg(DISTINCT(to_jsonb(row_to_json(( SELECT t FROM (SELECT id, author_id, author_name, profile_pic, created_on, notes,  \"\n \t\t\t\t+ \"\t\tuser_group_id, language_id, language_name)t )) )))\\\\:\\\\:json featured \" + \"\t\tFROM \"\n \t\t\t\t+ \"\t\t(SELECT id, author_id, created_on, notes, user_group_id, \" + \"\t\tlanguage_id, object_id  \"\n-\t\t\t\t+ \"\t\tFROM featured WHERE object_type = 'species.participation.Observation' AND object_id = \"\n-\t\t\t\t+ observationId + \") F  \" + \"\t\tLEFT OUTER JOIN \"\n+\t\t\t\t+ \"\t\tFROM featured WHERE object_type = 'species.participation.Observation' AND object_id in ( \"\n+\t\t\t\t+ observationId + \" )) F  \" + \"\t\tLEFT OUTER JOIN \"\n \t\t\t\t+ \"\t\t(SELECT id u_id, name author_name, COALESCE(profile_pic,  icon) profile_pic FROM suser) U ON u_id = author_id \"\n \t\t\t\t+ \"\t\tLEFT OUTER JOIN \"\n \t\t\t\t+ \"\t\t(SELECT id l_id, name language_name, three_letter_code FROM language ) L ON l_id = language_id GROUP BY object_id \"\n@@ -340,7 +342,7 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \t\t\t\t+ \"\t\t\t\t(SELECT id fact_id, object_id observation_fact_id, contributor_id,  \"\n \t\t\t\t+ \"\t\t\t\ttrait_instance_id, trait_value_id, value fact_value, to_value, from_date, to_date \"\n \t\t\t\t+ \"\t\t\t\tFROM fact WHERE object_type = 'species.participation.Observation' and is_deleted = false  \"\n-\t\t\t\t+ \"\t\t\t\tAND object_id = \" + observationId + \" \" + \"\t\t\t\t) F   \"\n+\t\t\t\t+ \"\t\t\t\tAND object_id in ( \" + observationId + \" \" + \"\t\t\t\t)) F   \"\n \t\t\t\t+ \"\t\t\t\tINNER JOIN \"\n \t\t\t\t+ \"\t\t\t\t(SELECT id trait_id, description, field_id, icon trait_icon, name, is_participatory, units, trait_types, data_types  \"\n \t\t\t\t+ \"\t\t\t\tFROM  trait where source = 'IBP') T \"\n@@ -352,13 +354,13 @@ public ObservationESDocument getESDocumentStub(String observationId) {\n \n \t\tSession session = sessionFactory.getCurrentSession();\n \t\tsession.beginTransaction();\n-\t\tObservationESDocument result = null;\n+\t\tList<ObservationESDocument> result = null;\n \t\ttry {\n \t\t\tSystem.out.println();\n \t\t\tSystem.out.println(\"-------------QUERY STARTED--------OBSERVATIONID :\" + observationId);\n \t\t\tSystem.out.println(qry);\n \t\t\tQuery<ObservationESDocument> query = session.createNativeQuery(qry, ObservationESDocument.class);\n-\t\t\tresult = query.getSingleResult();\n+\t\t\tresult = query.getResultList();\n \t\t\tSystem.out.println();\n \t\t\tSystem.out.println(\"-------------QUERY COMPLETED---------OBSERVATION ID :\" + observationId);\n "
  },
  {
    "sha": "5c5f8c84b8123fefa11bfacd376e0bbc14200f67",
    "filename": "src/main/java/com/strandls/observation/es/util/ESBulkUpload.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ESBulkUpload.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ESBulkUpload.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/es/util/ESBulkUpload.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,37 @@\n+package com.strandls.observation.es.util;\n+\n+import java.util.List;\n+\n+/**\t\n+ * \n+ * @author vishnu\n+ *\n+ */\n+public class ESBulkUpload implements Runnable {\n+\n+\tprivate ESUpdate esUpdate;\n+\tprivate List<Long> observationIds;\n+\n+\t/**\n+\t * \n+\t */\n+\tpublic ESBulkUpload() {\n+\t\tsuper();\n+\t}\n+\n+\t/**\n+\t * @param esUpdate\n+\t * @param observationId\n+\t */\n+\tpublic ESBulkUpload(ESUpdate esUpdate, List<Long> observationIds) {\n+\t\tsuper();\n+\t\tthis.esUpdate = esUpdate;\n+\t\tthis.observationIds = observationIds;\n+\t}\n+\n+\t@Override\n+\tpublic void run() {\n+\t\tesUpdate.esBulkUpload(observationIds);\n+\t}\n+\n+}"
  },
  {
    "sha": "32de79254170c72bf90ce9029020c0e7b980634e",
    "filename": "src/main/java/com/strandls/observation/es/util/ESBulkUploadThread.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ESBulkUploadThread.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ESBulkUploadThread.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/es/util/ESBulkUploadThread.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,33 @@\n+package com.strandls.observation.es.util;\n+\n+import java.util.List;\n+\n+public class ESBulkUploadThread implements Runnable  {\n+\t\n+\t\n+\tprivate ESUpdate esUpdate;\n+\tprivate List<Long> observationIds;\n+\n+\t/**\n+\t * \n+\t */\n+\tpublic ESBulkUploadThread() {\n+\t\tsuper();\n+\t}\n+\n+\t/**\n+\t * @param esUpdate\n+\t * @param observationIds\n+\t */\n+\tpublic ESBulkUploadThread(ESUpdate esUpdate, List<Long> observationIds) {\n+\t\tsuper();\n+\t\tthis.esUpdate = esUpdate;\n+\t\tthis.observationIds = observationIds;\n+\t}\n+\n+\t@Override\n+\tpublic void run() {\n+\t\tesUpdate.esBulkUpload(observationIds);;\n+\t}\n+\n+}"
  },
  {
    "sha": "690b349a63c18e56a566ee22c99a2bafb2b9c178",
    "filename": "src/main/java/com/strandls/observation/es/util/ESUpdate.java",
    "status": "modified",
    "additions": 41,
    "deletions": 6,
    "changes": 47,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ESUpdate.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ESUpdate.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/es/util/ESUpdate.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -3,15 +3,23 @@\n  */\n package com.strandls.observation.es.util;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import javax.inject.Inject;\n-\n+import com.strandls.esmodule.ApiException;\n import com.strandls.esmodule.controllers.EsServicesApi;\n import com.strandls.esmodule.pojo.MapDocument;\n import com.strandls.esmodule.pojo.MapQueryResponse;\n+import com.strandls.observation.pojo.ShowData;\n \n /**\n  * @author Abhishek Rudra\n@@ -33,10 +41,10 @@\n \tpublic void pushToElastic(String observationId) {\n \t\ttry {\n \t\t\tSystem.out.println(\"Observation getting pushed to elastic, ID:\" + observationId);\n-\t\t\tObservationESDocument result = constructESDocument.getESDocumentStub(observationId);\n+\t\t\tList<ObservationESDocument> result = constructESDocument.getESDocumentStub(observationId);\n //\t\t\tSimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");\n //\t\t\tom.setDateFormat(df);\n-\t\t\tString resultString = om.writeValueAsString(result);\n+\t\t\tString resultString = om.writeValueAsString(result.get(0));\n \t\t\tMapDocument doc = new MapDocument();\n \t\t\tdoc.setDocument(resultString);\n \t\t\tMapQueryResponse response = esService.create(ObservationIndex.index.getValue(),\n@@ -48,16 +56,43 @@ public void pushToElastic(String observationId) {\n \t\t}\n \t}\n \n+\tpublic void esBulkUpload(List<Long> observationIds) {\n+\n+\t\tString observationList = StringUtils.join(observationIds, ',');\n+\t\tSystem.out.println(\"--------------------observation es Bulk Upload Started---------\" + observationList);\n+\t\ttry {\n+\t\t\tList<ObservationESDocument> ESObservationList;\n+\n+\t\t\tESObservationList = constructESDocument.getESDocumentStub(observationList);\n+\t\t\tif (!ESObservationList.isEmpty()) {\n+\n+\t\t\t\tList<Map<String, Object>> bulkEsDoc = ESObservationList.stream().map(s -> {\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\t\tMap<String, Object> doc = om.convertValue(s, Map.class);\n+\t\t\t\t\tdoc.putIfAbsent(\"id\", s.getObservation_id());\n+\t\t\t\t\treturn doc;\n+\t\t\t\t}).collect(Collectors.toList());\n+\t\t\t\tString json = om.writeValueAsString(bulkEsDoc);\n+\t\t\t\tesService.bulkUpload(\"extended_observation\", \"_doc\", json.toString());\n+\t\t\t\tSystem.out.println(\"--------------completed-------------observationId\");\n+\n+\t\t\t}\n+\n+\t\t} catch (ApiException | JsonProcessingException e) {\n+\t\t\tlogger.error(e.getMessage());\n+\t\t}\n+\t}\n+\n \tpublic void updateESInstance(String observationId) {\n \t\ttry {\n \t\t\tSystem.out.println(\"--------------------observation es Update---------\");\n \t\t\tSystem.out.println();\n \t\t\tSystem.out.println(\"------started----------\");\n \t\t\tSystem.out.println(\"Observation getting UPDATED to elastic, ID:\" + observationId);\n-\t\t\tObservationESDocument result = constructESDocument.getESDocumentStub(observationId);\n+\t\t\tList<ObservationESDocument> result = constructESDocument.getESDocumentStub(observationId);\n //\t\t\tSimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");\n //\t\t\tom.setDateFormat(df);\n-\t\t\tString resultString = om.writeValueAsString(result);\n+\t\t\tString resultString = om.writeValueAsString(result.get(0));\n \t\t\tMapDocument doc = new MapDocument();\n \t\t\tdoc.setDocument(resultString);\n \t\t\tMapQueryResponse response = esService.create(ObservationIndex.index.getValue(),"
  },
  {
    "sha": "cc633b5322253fe1011371e8d20c45e7a4f5a759",
    "filename": "src/main/java/com/strandls/observation/es/util/ObservationUtilityFunctions.java",
    "status": "modified",
    "additions": 75,
    "deletions": 22,
    "changes": 97,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ObservationUtilityFunctions.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/es/util/ObservationUtilityFunctions.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/es/util/ObservationUtilityFunctions.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -17,14 +17,25 @@\n import java.util.Date;\n import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Row.MissingCellPolicy;\n+import org.pac4j.core.profile.CommonProfile;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.opencsv.CSVWriter;\n+import com.strandls.authentication_utility.util.AuthUtil;\n+import com.strandls.observation.dao.ObservationDAO;\n import com.strandls.observation.pojo.DownloadLog;\n+import com.strandls.observation.pojo.Observation;\n+import com.strandls.observation.pojo.ObservationBulkData;\n+import com.strandls.observation.service.Impl.ObservationBulkMapperHelper;\n \n /**\n  * @author ashish\n@@ -45,7 +56,7 @@\n \tpublic String getCsvFileNameDownloadPath() {\n \n \t\tDate date = new Date();\n-\t\tString fileName = \"obv_\"+date.getTime()+\".csv\";\n+\t\tString fileName = \"obv_\" + date.getTime() + \".csv\";\n \t\tString filePathName = csvFileDownloadPath + File.separator + fileName;\n \t\tFile file = new File(filePathName);\n \t\ttry {\n@@ -206,6 +217,51 @@ public PublicationGrade GradeObservation(ObservationListElasticMapping observati\n \t\treturn observationGrade;\n \t}\n \n+\tpublic Long createObservationAndMappings(ObservationBulkMapperHelper mapper, ObservationDAO observationDAO,\n+\t\t\tObservationBulkData observationData, Map<String, String> myImageUpload) {\n+\n+\t\ttry {\n+\t\t\tObservation observation = null;\n+\t\t\tCommonProfile profile = AuthUtil.getProfileFromRequest(observationData.getRequest());\n+\t\t\tMap<String, Integer> fieldMapping = observationData.getFieldMapping();\n+\t\t\tRow dataRow = observationData.getDataRow();\n+\t\t\tLong userId = Long.parseLong(profile.getId());\n+\n+\t\t\tif (fieldMapping.get(\"user\") != null) {\n+\t\t\t\tCell userCell = dataRow.getCell(fieldMapping.get(\"user\"), MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (userCell != null) {\n+\t\t\t\t\tuserCell.setCellType(CellType.NUMERIC);\n+\t\t\t\t\tuserId = (long) userCell.getNumericCellValue();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tobservation = mapper.creationObservationMapping(userId, fieldMapping, dataRow,\n+\t\t\t\t\tobservationData.getDataTable(), observationData.getSpeciesGroupList());\n+\t\t\tif (observation != null) {\n+\t\t\t\tobservation = observationDAO.save(observation);\n+\t\t\t\tmapper.createObservationResource(observationData.getRequest(), dataRow, fieldMapping,\n+\t\t\t\t\t\tobservationData.getLicenses(), userId, observation,myImageUpload);\n+\t\t\t\tmapper.createRecoMapping(observationData.getRequest(), fieldMapping, dataRow, observation, userId);\n+\t\t\t\tmapper.createFactsMapping(observationData.getRequest(), fieldMapping, dataRow,\n+\t\t\t\t\t\tobservationData.getPairs(), observation.getId());\n+\t\t\t\tmapper.createTags(observationData.getRequest(), fieldMapping, dataRow, observation.getId());\n+\t\t\t\tmapper.createUserGroupMapping(observationData.getRequest(), fieldMapping, dataRow,\n+\t\t\t\t\t\tobservationData.getUserGroupsList(), observation.getId());\n+\t\t\t\tmapper.updateGeoPrivacy(observation);\n+\t\t\t\tmapper.updateUserGroupFilter(observationData.getRequest(), observation);\n+\t\t\t}\n+\n+\t\t\treturn observation.getId();\n+\n+\t\t} catch (Exception ex) {\n+\t\t\t\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\n+\t\treturn 1L;\n+\n+\t}\n+\n \tprivate String fetchMaxVotedCommonName(Max_voted_reco reco) {\n \t\tList<Common_names> names = reco.getCommon_names();\n \t\tString value = \"\";\n@@ -343,7 +399,7 @@ private String getCustomFieldValue(Custom_field_values values, String fieldType)\n \t\t\t\t\t\t\t+ level.getTaxon_id() + \" | \";\n \t\t\t\t}\n \t\t\t\tif (value.length() > 3) {\n-\t\t\t\t\tmap.replace(taxonomicValues[3], value.substring(0, value.length()-3));\n+\t\t\t\t\tmap.replace(taxonomicValues[3], value.substring(0, value.length() - 3));\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -395,7 +451,7 @@ private String fetchTraitValue(List<Trait_value> values) {\n \n \tprivate Collection<String> fetchTemporalForCsv(List<String> temporal, ObservationListElasticMapping document) {\n \t\tLinkedHashMap<String, String> map = createLinkedHashMap(temporal);\n-\t\tString[] temporalFields = {\"observedInMonth\", \"lastRevised\",\"toDate\"};\n+\t\tString[] temporalFields = { \"observedInMonth\", \"lastRevised\", \"toDate\" };\n \t\tmap.replace(temporalFields[0], document.getObservedInMonth());\n \t\tmap.replace(temporalFields[1], document.getLastRevised());\n \t\tmap.replace(temporalFields[2], document.getToDate());\n@@ -404,9 +460,8 @@ private String fetchTraitValue(List<Trait_value> values) {\n \n \tprivate Collection<String> fetchMiscForCsv(List<String> misc, ObservationListElasticMapping document) {\n \t\tLinkedHashMap<String, String> map = createLinkedHashMap(misc);\n-\t\tString[] miscFields = { \"datasetName\", \"containsMedia\", \"uploadProtocol\", \n-\t\t\t\t\"flagCount\", \"organismRemarks\",\"annotations\", \"tags\", \n-\t\t\t\t\"userGroup\",\"noOfImages\",\"speciesGroup\" };\n+\t\tString[] miscFields = { \"datasetName\", \"containsMedia\", \"uploadProtocol\", \"flagCount\", \"organismRemarks\",\n+\t\t\t\t\"annotations\", \"tags\", \"userGroup\", \"noOfImages\", \"speciesGroup\" };\n \t\tmap.replace(miscFields[0], document.getDatasetTitle());\n \t\tmap.replace(miscFields[1], document.getContainsMedia().toString());\n \t\tmap.replace(miscFields[2], document.getUploadProtocol());\n@@ -424,7 +479,7 @@ private String fetchTraitValue(List<Trait_value> values) {\n \tprivate String fetchTags(List<Tags> tags) {\n \t\tString value = \"\";\n \t\tfor (Tags tag : tags) {\n-\t\t\tvalue += tag.getName()+\" | \";\n+\t\t\tvalue += tag.getName() + \" | \";\n \t\t}\n \t\tif (value.length() > 3)\n \t\t\treturn value.substring(0, value.length() - 3);\n@@ -448,24 +503,22 @@ private String fetchFlags(List<Flags> flags) {\n \t\t}\n \t\treturn map;\n \t}\n-\t\n+\n \tprivate String parseDate(String date) {\n-        DateFormat originalFormat = new SimpleDateFormat(\"dd/MM/yyyy\"); \n-        DateFormat secondaryFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n-        if(!(date == null)) {\n-\t        if(date.contains(\"-\") || date.contains(\"T\")) {\n-\t        \ttry {\n-\t        \t\treturn originalFormat.format(new Date(secondaryFormat.parse(date).getTime())).toString();\n+\t\tDateFormat originalFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\n+\t\tDateFormat secondaryFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\t\tif (!(date == null)) {\n+\t\t\tif (date.contains(\"-\") || date.contains(\"T\")) {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn originalFormat.format(new Date(secondaryFormat.parse(date).getTime())).toString();\n \t\t\t\t} catch (ParseException e) {\n-\t\t\t\t\tlogger.error(\"Date Parsing Error - \"+e.getMessage());\n+\t\t\t\t\tlogger.error(\"Date Parsing Error - \" + e.getMessage());\n \t\t\t\t}\n-\t        }\n-\t        else\n-\t        {\n-\t        \treturn originalFormat.format(new Date(Long.parseLong(date))).toString();\n-\t        }\n-        }\n-        return \"\";\n+\t\t\t} else {\n+\t\t\t\treturn originalFormat.format(new Date(Long.parseLong(date))).toString();\n+\t\t\t}\n+\t\t}\n+\t\treturn \"\";\n \n \t}\n }"
  },
  {
    "sha": "e5a941fdb4268a863184374164c3ddeec0173afa",
    "filename": "src/main/java/com/strandls/observation/pojo/DataTable.java",
    "status": "added",
    "additions": 536,
    "deletions": 0,
    "changes": 536,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/pojo/DataTable.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/pojo/DataTable.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/pojo/DataTable.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,536 @@\n+package com.strandls.observation.pojo;\n+\n+import com.vividsolutions.jts.geom.Geometry;\n+\n+import javax.persistence.*;\n+import java.util.Date;\n+import java.util.Objects;\n+\n+@Entity\n+@Table(name = \"data_table\", schema = \"public\")\n+public class DataTable {\n+    private Long id;\n+    private Long version;\n+    private Long accessLicenseId;\n+    private String accessRights;\n+    private Boolean agreeTerms;\n+    private Long checklistId;\n+    private String columns;\n+    private Date createdOn;\n+    private String customFields;\n+    private String dataTableType;\n+    private Long datasetId;\n+    private String description;\n+    private String externalId;\n+    private String externalUrl;\n+    private Integer featureCount;\n+    private Integer flagCount;\n+    private Boolean geographicalCoverageGeoPrivacy;\n+    private Double geographicalCoverageLatitude;\n+    private String geographicalCoverageLocationAccuracy;\n+    private String geographicalCoverageLocationScale;\n+    private Double geographicalCoverageLongitude;\n+    private String geographicalCoveragePlaceName;\n+    private Geometry geographicalCoverageTopology;\n+    private Boolean isDeleted;\n+    private Date lastRevised;\n+    private String methods;\n+    private String partyAttributions;\n+    private Long partyContributorId;\n+    private Long partyUploaderId;\n+    private String project;\n+    private Integer rating;\n+    private String taxonomicCoverageGroupIds;\n+    private Date temporalCoverageFromDate;\n+    private Date temporalCoverageToDate;\n+    private String title;\n+    private String viaCode;\n+    private String viaId;\n+    private String temporalCoverageDateAccuracy;\n+    private String summary;\n+    private String basisOfData;\n+    private Long imagesFileId;\n+    private Long languageId;\n+    private Long traitValueFileId;\n+    private Long uploadLogId;\n+    private Long uFileId;\n+    private Long uploaderId;\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    @Basic\n+    @Column(name = \"version\")\n+    public Long getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(Long version) {\n+        this.version = version;\n+    }\n+\n+    @Basic\n+    @Column(name = \"access_license_id\")\n+    public Long getAccessLicenseId() {\n+        return accessLicenseId;\n+    }\n+\n+    public void setAccessLicenseId(Long accessLicenseId) {\n+        this.accessLicenseId = accessLicenseId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"access_rights\")\n+    public String getAccessRights() {\n+        return accessRights;\n+    }\n+\n+    public void setAccessRights(String accessRights) {\n+        this.accessRights = accessRights;\n+    }\n+\n+    @Basic\n+    @Column(name = \"agree_terms\")\n+    public Boolean getAgreeTerms() {\n+        return agreeTerms;\n+    }\n+\n+    public void setAgreeTerms(Boolean agreeTerms) {\n+        this.agreeTerms = agreeTerms;\n+    }\n+\n+    @Basic\n+    @Column(name = \"checklist_id\")\n+    public Long getChecklistId() {\n+        return checklistId;\n+    }\n+\n+    public void setChecklistId(Long checklistId) {\n+        this.checklistId = checklistId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"columns\")\n+    public String getColumns() {\n+        return columns;\n+    }\n+\n+    public void setColumns(String columns) {\n+        this.columns = columns;\n+    }\n+\n+    @Basic\n+    @Column(name = \"created_on\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    public Date getCreatedOn() {\n+        return createdOn;\n+    }\n+\n+    public void setCreatedOn(Date createdOn) {\n+        this.createdOn = createdOn;\n+    }\n+\n+    @Basic\n+    @Column(name = \"custom_fields\")\n+    public String getCustomFields() {\n+        return customFields;\n+    }\n+\n+    public void setCustomFields(String customFields) {\n+        this.customFields = customFields;\n+    }\n+\n+    @Basic\n+    @Column(name = \"data_table_type\")\n+    public String getDataTableType() {\n+        return dataTableType;\n+    }\n+\n+    public void setDataTableType(String dataTableType) {\n+        this.dataTableType = dataTableType;\n+    }\n+\n+    @Basic\n+    @Column(name = \"dataset_id\")\n+    public Long getDatasetId() {\n+        return datasetId;\n+    }\n+\n+    public void setDatasetId(Long datasetId) {\n+        this.datasetId = datasetId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"description\")\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    @Basic\n+    @Column(name = \"external_id\")\n+    public String getExternalId() {\n+        return externalId;\n+    }\n+\n+    public void setExternalId(String externalId) {\n+        this.externalId = externalId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"external_url\")\n+    public String getExternalUrl() {\n+        return externalUrl;\n+    }\n+\n+    public void setExternalUrl(String externalUrl) {\n+        this.externalUrl = externalUrl;\n+    }\n+\n+    @Basic\n+    @Column(name = \"feature_count\")\n+    public Integer getFeatureCount() {\n+        return featureCount;\n+    }\n+\n+    public void setFeatureCount(Integer featureCount) {\n+        this.featureCount = featureCount;\n+    }\n+\n+    @Basic\n+    @Column(name = \"flag_count\")\n+    public Integer getFlagCount() {\n+        return flagCount;\n+    }\n+\n+    public void setFlagCount(Integer flagCount) {\n+        this.flagCount = flagCount;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_geo_privacy\")\n+    public Boolean getGeographicalCoverageGeoPrivacy() {\n+        return geographicalCoverageGeoPrivacy;\n+    }\n+\n+    public void setGeographicalCoverageGeoPrivacy(Boolean geographicalCoverageGeoPrivacy) {\n+        this.geographicalCoverageGeoPrivacy = geographicalCoverageGeoPrivacy;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_latitude\")\n+    public Double getGeographicalCoverageLatitude() {\n+        return geographicalCoverageLatitude;\n+    }\n+\n+    public void setGeographicalCoverageLatitude(Double geographicalCoverageLatitude) {\n+        this.geographicalCoverageLatitude = geographicalCoverageLatitude;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_location_accuracy\")\n+    public String getGeographicalCoverageLocationAccuracy() {\n+        return geographicalCoverageLocationAccuracy;\n+    }\n+\n+    public void setGeographicalCoverageLocationAccuracy(String geographicalCoverageLocationAccuracy) {\n+        this.geographicalCoverageLocationAccuracy = geographicalCoverageLocationAccuracy;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_location_scale\")\n+    public String getGeographicalCoverageLocationScale() {\n+        return geographicalCoverageLocationScale;\n+    }\n+\n+    public void setGeographicalCoverageLocationScale(String geographicalCoverageLocationScale) {\n+        this.geographicalCoverageLocationScale = geographicalCoverageLocationScale;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_longitude\")\n+    public Double getGeographicalCoverageLongitude() {\n+        return geographicalCoverageLongitude;\n+    }\n+\n+    public void setGeographicalCoverageLongitude(Double geographicalCoverageLongitude) {\n+        this.geographicalCoverageLongitude = geographicalCoverageLongitude;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_place_name\")\n+    public String getGeographicalCoveragePlaceName() {\n+        return geographicalCoveragePlaceName;\n+    }\n+\n+    public void setGeographicalCoveragePlaceName(String geographicalCoveragePlaceName) {\n+        this.geographicalCoveragePlaceName = geographicalCoveragePlaceName;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_topology\")\n+    public Geometry getGeographicalCoverageTopology() {\n+        return geographicalCoverageTopology;\n+    }\n+\n+    public void setGeographicalCoverageTopology(Geometry geographicalCoverageTopology) {\n+        this.geographicalCoverageTopology = geographicalCoverageTopology;\n+    }\n+\n+    @Basic\n+    @Column(name = \"is_deleted\")\n+    public Boolean getDeleted() {\n+        return isDeleted;\n+    }\n+\n+    public void setDeleted(Boolean deleted) {\n+        isDeleted = deleted;\n+    }\n+\n+    @Basic\n+    @Column(name = \"last_revised\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    public Date getLastRevised() {\n+        return lastRevised;\n+    }\n+\n+    public void setLastRevised(Date lastRevised) {\n+        this.lastRevised = lastRevised;\n+    }\n+\n+    @Basic\n+    @Column(name = \"methods\")\n+    public String getMethods() {\n+        return methods;\n+    }\n+\n+    public void setMethods(String methods) {\n+        this.methods = methods;\n+    }\n+\n+    @Basic\n+    @Column(name = \"party_attributions\")\n+    public String getPartyAttributions() {\n+        return partyAttributions;\n+    }\n+\n+    public void setPartyAttributions(String partyAttributions) {\n+        this.partyAttributions = partyAttributions;\n+    }\n+\n+    @Basic\n+    @Column(name = \"party_contributor_id\")\n+    public long getPartyContributorId() {\n+        return partyContributorId;\n+    }\n+\n+    public void setPartyContributorId(long partyContributorId) {\n+        this.partyContributorId = partyContributorId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"party_uploader_id\")\n+    public long getPartyUploaderId() {\n+        return partyUploaderId;\n+    }\n+\n+    public void setPartyUploaderId(long partyUploaderId) {\n+        this.partyUploaderId = partyUploaderId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"project\")\n+    public String getProject() {\n+        return project;\n+    }\n+\n+    public void setProject(String project) {\n+        this.project = project;\n+    }\n+\n+    @Basic\n+    @Column(name = \"rating\")\n+    public int getRating() {\n+        return rating;\n+    }\n+\n+    public void setRating(int rating) {\n+        this.rating = rating;\n+    }\n+\n+    @Basic\n+    @Column(name = \"taxonomic_coverage_group_ids\")\n+    public String getTaxonomicCoverageGroupIds() {\n+        return taxonomicCoverageGroupIds;\n+    }\n+\n+    public void setTaxonomicCoverageGroupIds(String taxonomicCoverageGroupIds) {\n+        this.taxonomicCoverageGroupIds = taxonomicCoverageGroupIds;\n+    }\n+\n+    @Basic\n+    @Column(name = \"temporal_coverage_from_date\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    public Date getTemporalCoverageFromDate() {\n+        return temporalCoverageFromDate;\n+    }\n+\n+    public void setTemporalCoverageFromDate(Date temporalCoverageFromDate) {\n+        this.temporalCoverageFromDate = temporalCoverageFromDate;\n+    }\n+\n+    @Basic\n+    @Column(name = \"temporal_coverage_to_date\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    public Date getTemporalCoverageToDate() {\n+        return temporalCoverageToDate;\n+    }\n+\n+    public void setTemporalCoverageToDate(Date temporalCoverageToDate) {\n+        this.temporalCoverageToDate = temporalCoverageToDate;\n+    }\n+\n+    @Basic\n+    @Column(name = \"title\")\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    @Basic\n+    @Column(name = \"via_code\")\n+    public String getViaCode() {\n+        return viaCode;\n+    }\n+\n+    public void setViaCode(String viaCode) {\n+        this.viaCode = viaCode;\n+    }\n+\n+    @Basic\n+    @Column(name = \"via_id\")\n+    public String getViaId() {\n+        return viaId;\n+    }\n+\n+    public void setViaId(String viaId) {\n+        this.viaId = viaId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"temporal_coverage_date_accuracy\")\n+    public String getTemporalCoverageDateAccuracy() {\n+        return temporalCoverageDateAccuracy;\n+    }\n+\n+    public void setTemporalCoverageDateAccuracy(String temporalCoverageDateAccuracy) {\n+        this.temporalCoverageDateAccuracy = temporalCoverageDateAccuracy;\n+    }\n+\n+    @Basic\n+    @Column(name = \"summary\")\n+    public String getSummary() {\n+        return summary;\n+    }\n+\n+    public void setSummary(String summary) {\n+        this.summary = summary;\n+    }\n+\n+    @Basic\n+    @Column(name = \"basis_of_data\", columnDefinition = \"varchar(255) default 'PRIMARY_OBSERVATION'\")\n+    public String getBasisOfData() {\n+        return basisOfData;\n+    }\n+\n+    public void setBasisOfData(String basisOfData) {\n+        this.basisOfData = basisOfData;\n+    }\n+\n+    @Basic\n+    @Column(name = \"images_file_id\")\n+    public Long getImagesFileId() {\n+        return imagesFileId;\n+    }\n+\n+    public void setImagesFileId(Long imagesFileId) {\n+        this.imagesFileId = imagesFileId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"language_id\")\n+    public Long getLanguageId() {\n+        return languageId;\n+    }\n+\n+    public void setLanguageId(Long languageId) {\n+        this.languageId = languageId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"trait_value_file_id\")\n+    public Long getTraitValueFileId() {\n+        return traitValueFileId;\n+    }\n+\n+    public void setTraitValueFileId(Long traitValueFileId) {\n+        this.traitValueFileId = traitValueFileId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"u_file_id\", nullable = false)\n+    public Long getuFileId() {\n+        return uFileId;\n+    }\n+\n+    public void setuFileId(Long uFileId) {\n+        this.uFileId = uFileId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"upload_log_id\")\n+    public Long getUploadLogId() {\n+        return uploadLogId;\n+    }\n+\n+    public void setUploadLogId(Long uploadLogId) {\n+        this.uploadLogId = uploadLogId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"uploader_id\", nullable = false)\n+    public Long getUploaderId() {\n+        return uploaderId;\n+    }\n+\n+    public void setUploaderId(Long uploaderId) {\n+        this.uploaderId = uploaderId;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        DataTable dataTable = (DataTable) o;\n+        return Objects.equals(id, dataTable.id) && Objects.equals(version, dataTable.version) && Objects.equals(accessLicenseId, dataTable.accessLicenseId) && agreeTerms == dataTable.agreeTerms && Objects.equals(featureCount, dataTable.featureCount) && Objects.equals(flagCount, dataTable.flagCount) && geographicalCoverageGeoPrivacy == dataTable.geographicalCoverageGeoPrivacy && Double.compare(dataTable.geographicalCoverageLatitude, geographicalCoverageLatitude) == 0 && Double.compare(dataTable.geographicalCoverageLongitude, geographicalCoverageLongitude) == 0 && isDeleted == dataTable.isDeleted && Objects.equals(partyContributorId, dataTable.partyContributorId) && Objects.equals(partyUploaderId, dataTable.partyUploaderId) && Objects.equals(rating, dataTable.rating) && Objects.equals(accessRights, dataTable.accessRights) && Objects.equals(checklistId, dataTable.checklistId) && Objects.equals(columns, dataTable.columns) && Objects.equals(createdOn, dataTable.createdOn) && Objects.equals(customFields, dataTable.customFields) && Objects.equals(dataTableType, dataTable.dataTableType) && Objects.equals(description, dataTable.description) && Objects.equals(externalId, dataTable.externalId) && Objects.equals(externalUrl, dataTable.externalUrl) && Objects.equals(geographicalCoverageLocationAccuracy, dataTable.geographicalCoverageLocationAccuracy) && Objects.equals(geographicalCoverageLocationScale, dataTable.geographicalCoverageLocationScale) && Objects.equals(geographicalCoveragePlaceName, dataTable.geographicalCoveragePlaceName) && Objects.equals(geographicalCoverageTopology, dataTable.geographicalCoverageTopology) && Objects.equals(lastRevised, dataTable.lastRevised) && Objects.equals(methods, dataTable.methods) && Objects.equals(partyAttributions, dataTable.partyAttributions) && Objects.equals(project, dataTable.project) && Objects.equals(taxonomicCoverageGroupIds, dataTable.taxonomicCoverageGroupIds) && Objects.equals(temporalCoverageFromDate, dataTable.temporalCoverageFromDate) && Objects.equals(temporalCoverageToDate, dataTable.temporalCoverageToDate) && Objects.equals(title, dataTable.title) && Objects.equals(viaCode, dataTable.viaCode) && Objects.equals(viaId, dataTable.viaId) && Objects.equals(temporalCoverageDateAccuracy, dataTable.temporalCoverageDateAccuracy) && Objects.equals(summary, dataTable.summary) && Objects.equals(basisOfData, dataTable.basisOfData);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id, version, accessLicenseId, accessRights, agreeTerms, checklistId, columns, createdOn, customFields, dataTableType, description, externalId, externalUrl, featureCount, flagCount, geographicalCoverageGeoPrivacy, geographicalCoverageLatitude, geographicalCoverageLocationAccuracy, geographicalCoverageLocationScale, geographicalCoverageLongitude, geographicalCoveragePlaceName, geographicalCoverageTopology, isDeleted, lastRevised, methods, partyAttributions, partyContributorId, partyUploaderId, project, rating, taxonomicCoverageGroupIds, temporalCoverageFromDate, temporalCoverageToDate, title, viaCode, viaId, temporalCoverageDateAccuracy, summary, basisOfData);\n+    }\n+}"
  },
  {
    "sha": "242bea01818765d15ecaa8ecbd3e9dd53ac6ee4f",
    "filename": "src/main/java/com/strandls/observation/pojo/Dataset.java",
    "status": "added",
    "additions": 400,
    "deletions": 0,
    "changes": 400,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/pojo/Dataset.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/pojo/Dataset.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/pojo/Dataset.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,400 @@\n+package com.strandls.observation.pojo;\n+\n+import com.vividsolutions.jts.geom.Geometry;\n+\n+import javax.persistence.*;\n+import java.sql.Timestamp;\n+import java.util.Objects;\n+\n+@Entity\n+@Table(name = \"dataset1\", schema = \"public\")\n+public class Dataset {\n+    private long id;\n+    private long version;\n+    private long accessLicenseId;\n+    private String accessRights;\n+    private Timestamp createdOn;\n+    private String customFields;\n+    private String description;\n+    private String externalId;\n+    private String externalUrl;\n+    private int featureCount;\n+    private int flagCount;\n+    private boolean geographicalCoverageGeoPrivacy;\n+    private double geographicalCoverageLatitude;\n+    private String geographicalCoverageLocationAccuracy;\n+    private String geographicalCoverageLocationScale;\n+    private double geographicalCoverageLongitude;\n+    private String geographicalCoveragePlaceName;\n+    private Geometry geographicalCoverageTopology;\n+    private boolean isDeleted;\n+    private Timestamp lastRevised;\n+    private String methods;\n+    private String partyAttributions;\n+    private long partyContributorId;\n+    private long partyUploaderId;\n+    private String project;\n+    private int rating;\n+    private String taxonomicCoverageGroupIds;\n+    private Timestamp temporalCoverageFromDate;\n+    private Timestamp temporalCoverageToDate;\n+    private String title;\n+    private String viaCode;\n+    private String viaId;\n+    private String temporalCoverageDateAccuracy;\n+    private String summary;\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    @Basic\n+    @Column(name = \"version\")\n+    public long getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(long version) {\n+        this.version = version;\n+    }\n+\n+    @Basic\n+    @Column(name = \"access_license_id\")\n+    public long getAccessLicenseId() {\n+        return accessLicenseId;\n+    }\n+\n+    public void setAccessLicenseId(long accessLicenseId) {\n+        this.accessLicenseId = accessLicenseId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"access_rights\")\n+    public String getAccessRights() {\n+        return accessRights;\n+    }\n+\n+    public void setAccessRights(String accessRights) {\n+        this.accessRights = accessRights;\n+    }\n+\n+    @Basic\n+    @Column(name = \"created_on\")\n+    public Timestamp getCreatedOn() {\n+        return createdOn;\n+    }\n+\n+    public void setCreatedOn(Timestamp createdOn) {\n+        this.createdOn = createdOn;\n+    }\n+\n+    @Basic\n+    @Column(name = \"custom_fields\")\n+    public String getCustomFields() {\n+        return customFields;\n+    }\n+\n+    public void setCustomFields(String customFields) {\n+        this.customFields = customFields;\n+    }\n+\n+    @Basic\n+    @Column(name = \"description\")\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    @Basic\n+    @Column(name = \"external_id\")\n+    public String getExternalId() {\n+        return externalId;\n+    }\n+\n+    public void setExternalId(String externalId) {\n+        this.externalId = externalId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"external_url\")\n+    public String getExternalUrl() {\n+        return externalUrl;\n+    }\n+\n+    public void setExternalUrl(String externalUrl) {\n+        this.externalUrl = externalUrl;\n+    }\n+\n+    @Basic\n+    @Column(name = \"feature_count\")\n+    public int getFeatureCount() {\n+        return featureCount;\n+    }\n+\n+    public void setFeatureCount(int featureCount) {\n+        this.featureCount = featureCount;\n+    }\n+\n+    @Basic\n+    @Column(name = \"flag_count\")\n+    public int getFlagCount() {\n+        return flagCount;\n+    }\n+\n+    public void setFlagCount(int flagCount) {\n+        this.flagCount = flagCount;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_geo_privacy\")\n+    public boolean isGeographicalCoverageGeoPrivacy() {\n+        return geographicalCoverageGeoPrivacy;\n+    }\n+\n+    public void setGeographicalCoverageGeoPrivacy(boolean geographicalCoverageGeoPrivacy) {\n+        this.geographicalCoverageGeoPrivacy = geographicalCoverageGeoPrivacy;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_latitude\")\n+    public double getGeographicalCoverageLatitude() {\n+        return geographicalCoverageLatitude;\n+    }\n+\n+    public void setGeographicalCoverageLatitude(double geographicalCoverageLatitude) {\n+        this.geographicalCoverageLatitude = geographicalCoverageLatitude;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_location_accuracy\")\n+    public String getGeographicalCoverageLocationAccuracy() {\n+        return geographicalCoverageLocationAccuracy;\n+    }\n+\n+    public void setGeographicalCoverageLocationAccuracy(String geographicalCoverageLocationAccuracy) {\n+        this.geographicalCoverageLocationAccuracy = geographicalCoverageLocationAccuracy;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_location_scale\")\n+    public String getGeographicalCoverageLocationScale() {\n+        return geographicalCoverageLocationScale;\n+    }\n+\n+    public void setGeographicalCoverageLocationScale(String geographicalCoverageLocationScale) {\n+        this.geographicalCoverageLocationScale = geographicalCoverageLocationScale;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_longitude\")\n+    public double getGeographicalCoverageLongitude() {\n+        return geographicalCoverageLongitude;\n+    }\n+\n+    public void setGeographicalCoverageLongitude(double geographicalCoverageLongitude) {\n+        this.geographicalCoverageLongitude = geographicalCoverageLongitude;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_place_name\")\n+    public String getGeographicalCoveragePlaceName() {\n+        return geographicalCoveragePlaceName;\n+    }\n+\n+    public void setGeographicalCoveragePlaceName(String geographicalCoveragePlaceName) {\n+        this.geographicalCoveragePlaceName = geographicalCoveragePlaceName;\n+    }\n+\n+    @Basic\n+    @Column(name = \"geographical_coverage_topology\")\n+    public Geometry getGeographicalCoverageTopology() {\n+        return geographicalCoverageTopology;\n+    }\n+\n+    public void setGeographicalCoverageTopology(Geometry geographicalCoverageTopology) {\n+        this.geographicalCoverageTopology = geographicalCoverageTopology;\n+    }\n+\n+    @Basic\n+    @Column(name = \"is_deleted\")\n+    public boolean isDeleted() {\n+        return isDeleted;\n+    }\n+\n+    public void setDeleted(boolean deleted) {\n+        isDeleted = deleted;\n+    }\n+\n+    @Basic\n+    @Column(name = \"last_revised\")\n+    public Timestamp getLastRevised() {\n+        return lastRevised;\n+    }\n+\n+    public void setLastRevised(Timestamp lastRevised) {\n+        this.lastRevised = lastRevised;\n+    }\n+\n+    @Basic\n+    @Column(name = \"methods\")\n+    public String getMethods() {\n+        return methods;\n+    }\n+\n+    public void setMethods(String methods) {\n+        this.methods = methods;\n+    }\n+\n+    @Basic\n+    @Column(name = \"party_attributions\")\n+    public String getPartyAttributions() {\n+        return partyAttributions;\n+    }\n+\n+    public void setPartyAttributions(String partyAttributions) {\n+        this.partyAttributions = partyAttributions;\n+    }\n+\n+    @Basic\n+    @Column(name = \"party_contributor_id\")\n+    public long getPartyContributorId() {\n+        return partyContributorId;\n+    }\n+\n+    public void setPartyContributorId(long partyContributorId) {\n+        this.partyContributorId = partyContributorId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"party_uploader_id\")\n+    public long getPartyUploaderId() {\n+        return partyUploaderId;\n+    }\n+\n+    public void setPartyUploaderId(long partyUploaderId) {\n+        this.partyUploaderId = partyUploaderId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"project\")\n+    public String getProject() {\n+        return project;\n+    }\n+\n+    public void setProject(String project) {\n+        this.project = project;\n+    }\n+\n+    @Basic\n+    @Column(name = \"rating\")\n+    public int getRating() {\n+        return rating;\n+    }\n+\n+    public void setRating(int rating) {\n+        this.rating = rating;\n+    }\n+\n+    @Basic\n+    @Column(name = \"taxonomic_coverage_group_ids\")\n+    public String getTaxonomicCoverageGroupIds() {\n+        return taxonomicCoverageGroupIds;\n+    }\n+\n+    public void setTaxonomicCoverageGroupIds(String taxonomicCoverageGroupIds) {\n+        this.taxonomicCoverageGroupIds = taxonomicCoverageGroupIds;\n+    }\n+\n+    @Basic\n+    @Column(name = \"temporal_coverage_from_date\")\n+    public Timestamp getTemporalCoverageFromDate() {\n+        return temporalCoverageFromDate;\n+    }\n+\n+    public void setTemporalCoverageFromDate(Timestamp temporalCoverageFromDate) {\n+        this.temporalCoverageFromDate = temporalCoverageFromDate;\n+    }\n+\n+    @Basic\n+    @Column(name = \"temporal_coverage_to_date\")\n+    public Timestamp getTemporalCoverageToDate() {\n+        return temporalCoverageToDate;\n+    }\n+\n+    public void setTemporalCoverageToDate(Timestamp temporalCoverageToDate) {\n+        this.temporalCoverageToDate = temporalCoverageToDate;\n+    }\n+\n+    @Basic\n+    @Column(name = \"title\")\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    @Basic\n+    @Column(name = \"via_code\")\n+    public String getViaCode() {\n+        return viaCode;\n+    }\n+\n+    public void setViaCode(String viaCode) {\n+        this.viaCode = viaCode;\n+    }\n+\n+    @Basic\n+    @Column(name = \"via_id\")\n+    public String getViaId() {\n+        return viaId;\n+    }\n+\n+    public void setViaId(String viaId) {\n+        this.viaId = viaId;\n+    }\n+\n+    @Basic\n+    @Column(name = \"temporal_coverage_date_accuracy\")\n+    public String getTemporalCoverageDateAccuracy() {\n+        return temporalCoverageDateAccuracy;\n+    }\n+\n+    public void setTemporalCoverageDateAccuracy(String temporalCoverageDateAccuracy) {\n+        this.temporalCoverageDateAccuracy = temporalCoverageDateAccuracy;\n+    }\n+\n+    @Basic\n+    @Column(name = \"summary\")\n+    public String getSummary() {\n+        return summary;\n+    }\n+\n+    public void setSummary(String summary) {\n+        this.summary = summary;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Dataset dataset = (Dataset) o;\n+        return id == dataset.id && version == dataset.version && accessLicenseId == dataset.accessLicenseId && featureCount == dataset.featureCount && flagCount == dataset.flagCount && geographicalCoverageGeoPrivacy == dataset.geographicalCoverageGeoPrivacy && Double.compare(dataset.geographicalCoverageLatitude, geographicalCoverageLatitude) == 0 && Double.compare(dataset.geographicalCoverageLongitude, geographicalCoverageLongitude) == 0 && isDeleted == dataset.isDeleted && partyContributorId == dataset.partyContributorId && partyUploaderId == dataset.partyUploaderId && rating == dataset.rating && Objects.equals(accessRights, dataset.accessRights) && Objects.equals(createdOn, dataset.createdOn) && Objects.equals(customFields, dataset.customFields) && Objects.equals(description, dataset.description) && Objects.equals(externalId, dataset.externalId) && Objects.equals(externalUrl, dataset.externalUrl) && Objects.equals(geographicalCoverageLocationAccuracy, dataset.geographicalCoverageLocationAccuracy) && Objects.equals(geographicalCoverageLocationScale, dataset.geographicalCoverageLocationScale) && Objects.equals(geographicalCoveragePlaceName, dataset.geographicalCoveragePlaceName) && Objects.equals(geographicalCoverageTopology, dataset.geographicalCoverageTopology) && Objects.equals(lastRevised, dataset.lastRevised) && Objects.equals(methods, dataset.methods) && Objects.equals(partyAttributions, dataset.partyAttributions) && Objects.equals(project, dataset.project) && Objects.equals(taxonomicCoverageGroupIds, dataset.taxonomicCoverageGroupIds) && Objects.equals(temporalCoverageFromDate, dataset.temporalCoverageFromDate) && Objects.equals(temporalCoverageToDate, dataset.temporalCoverageToDate) && Objects.equals(title, dataset.title) && Objects.equals(viaCode, dataset.viaCode) && Objects.equals(viaId, dataset.viaId) && Objects.equals(temporalCoverageDateAccuracy, dataset.temporalCoverageDateAccuracy) && Objects.equals(summary, dataset.summary);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id, version, accessLicenseId, accessRights, createdOn, customFields, description, externalId, externalUrl, featureCount, flagCount, geographicalCoverageGeoPrivacy, geographicalCoverageLatitude, geographicalCoverageLocationAccuracy, geographicalCoverageLocationScale, geographicalCoverageLongitude, geographicalCoveragePlaceName, geographicalCoverageTopology, isDeleted, lastRevised, methods, partyAttributions, partyContributorId, partyUploaderId, project, rating, taxonomicCoverageGroupIds, temporalCoverageFromDate, temporalCoverageToDate, title, viaCode, viaId, temporalCoverageDateAccuracy, summary);\n+    }\n+}"
  },
  {
    "sha": "f719e9c0fdac4637dd5c726bb53558681f70dfaf",
    "filename": "src/main/java/com/strandls/observation/pojo/Observation.java",
    "status": "modified",
    "additions": 108,
    "deletions": 2,
    "changes": 110,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/pojo/Observation.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/pojo/Observation.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/pojo/Observation.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -26,7 +26,7 @@\n public class Observation implements Serializable {\n \n \t/**\n-\t * \n+\t *\n \t */\n \tprivate static final long serialVersionUID = 8040652447273785394L;\n \tprivate Long id;\n@@ -86,6 +86,80 @@\n \tprivate String dateAccuracy;\n \tprivate Boolean isVerified;\n \n+\tpublic Observation() {}\n+\n+\tpublic Observation(Long id, Long version, Long authorId, Date createdOn, Long groupId, Double latitude,\n+\t\t\t\t\t   Double longitude, String notes, Date fromDate, String placeName, Integer rating, String reverseGeocodedName,\n+\t\t\t\t\t   Integer flagCount, Boolean geoPrivacy, Long habitatId, Boolean isDeleted, Date lastRevised,\n+\t\t\t\t\t   String locationAccuracy, Long visitCount, String searchText, Long maxVotedRecoId, Boolean agreeTerms,\n+\t\t\t\t\t   Boolean isChecklist, Boolean isShowable, Long sourceId, Date toDate, Geometry topology,\n+\t\t\t\t\t   String checklistAnnotations, Integer featureCount, Boolean isLocked, Long licenseId, Long languageId,\n+\t\t\t\t\t   String locationScale, String accessRights, String catalogNumber, Long datasetId, String externalDatasetKey,\n+\t\t\t\t\t   String externalId, String externalUrl, String informationWithheld, Date lastCrawled, Date lastInterpreted,\n+\t\t\t\t\t   String originalAuthor, String publishingCountry, Long reprImageId, String viaCode, String viaId,\n+\t\t\t\t\t   String protocol, String basisOfRecord, Integer noOfImages, Integer noOfVideos, Integer noOfAudio,\n+\t\t\t\t\t   Integer noOfIdentifications, Long dataTableId, String dateAccuracy, String basisOfData) {\n+\t\tsuper();\n+\t\tthis.id = id;\n+\t\tthis.version = version;\n+\t\tthis.authorId = authorId;\n+\t\tthis.createdOn = createdOn;\n+\t\tthis.groupId = groupId;\n+\t\tthis.latitude = latitude;\n+\t\tthis.longitude = longitude;\n+\t\tthis.notes = notes;\n+\t\tthis.fromDate = fromDate;\n+\t\tthis.placeName = placeName;\n+\t\tthis.rating = rating;\n+\t\tthis.reverseGeocodedName = reverseGeocodedName;\n+\t\tthis.flagCount = flagCount;\n+\t\tthis.geoPrivacy = geoPrivacy;\n+\t\tthis.habitatId = habitatId;\n+\t\tthis.isDeleted = isDeleted;\n+\t\tthis.lastRevised = lastRevised;\n+\t\tthis.locationAccuracy = locationAccuracy;\n+\t\tthis.visitCount = visitCount;\n+\t\tthis.searchText = searchText;\n+\t\tthis.maxVotedRecoId = maxVotedRecoId;\n+\t\tthis.agreeTerms = agreeTerms;\n+\t\tthis.isChecklist = isChecklist;\n+\t\tthis.isShowable = isShowable;\n+\t\tthis.sourceId = sourceId;\n+\t\tthis.toDate = toDate;\n+\t\tthis.topology = topology;\n+\t\tthis.checklistAnnotations = checklistAnnotations;\n+\t\tthis.featureCount = featureCount;\n+\t\tthis.isLocked = isLocked;\n+\t\tthis.licenseId = licenseId;\n+\t\tthis.languageId = languageId;\n+\t\tthis.locationScale = locationScale;\n+\t\tthis.accessRights = accessRights;\n+\t\tthis.catalogNumber = catalogNumber;\n+\t\tthis.datasetId = datasetId;\n+\t\tthis.externalDatasetKey = externalDatasetKey;\n+\t\tthis.externalId = externalId;\n+\t\tthis.externalUrl = externalUrl;\n+\t\tthis.informationWithheld = informationWithheld;\n+\t\tthis.lastCrawled = lastCrawled;\n+\t\tthis.lastInterpreted = lastInterpreted;\n+\t\tthis.originalAuthor = originalAuthor;\n+\t\tthis.publishingCountry = publishingCountry;\n+\t\tthis.reprImageId = reprImageId;\n+\t\tthis.viaCode = viaCode;\n+\t\tthis.viaId = viaId;\n+\t\tthis.protocol = protocol;\n+\t\tthis.basisOfRecord = basisOfRecord;\n+\t\tthis.noOfImages = noOfImages;\n+\t\tthis.noOfVideos = noOfVideos;\n+\t\tthis.noOfAudio = noOfAudio;\n+\t\tthis.noOfIdentifications = noOfIdentifications;\n+\t\tthis.dataTableId = dataTableId;\n+\t\tthis.dateAccuracy = dateAccuracy;\n+\t}\n+\n+\t\n+\t\n+\t\n \t@Id\n \t@Column(name = \"id\", nullable = false)\n \t@GeneratedValue(strategy = GenerationType.AUTO)\n@@ -594,4 +668,36 @@ public void setIsVerified(Boolean isVerified) {\n \t\tthis.isVerified = isVerified;\n \t}\n \n-}\n+\tpublic Boolean getDeleted() {\n+\t\treturn isDeleted;\n+\t}\n+\n+\tpublic void setDeleted(Boolean deleted) {\n+\t\tisDeleted = deleted;\n+\t}\n+\n+\tpublic Boolean getChecklist() {\n+\t\treturn isChecklist;\n+\t}\n+\n+\tpublic void setChecklist(Boolean checklist) {\n+\t\tisChecklist = checklist;\n+\t}\n+\n+\tpublic Boolean getShowable() {\n+\t\treturn isShowable;\n+\t}\n+\n+\tpublic void setShowable(Boolean showable) {\n+\t\tisShowable = showable;\n+\t}\n+\n+\tpublic Boolean getLocked() {\n+\t\treturn isLocked;\n+\t}\n+\n+\tpublic void setLocked(Boolean locked) {\n+\t\tisLocked = locked;\n+\t}\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "abfae5c20909a483bd8e3002b1710d47f7ac6f3b",
    "filename": "src/main/java/com/strandls/observation/pojo/ObservationBulkData.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/pojo/ObservationBulkData.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/pojo/ObservationBulkData.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/pojo/ObservationBulkData.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,67 @@\n+package com.strandls.observation.pojo;\n+\n+import com.strandls.resource.pojo.License;\n+import com.strandls.taxonomy.pojo.SpeciesGroup;\n+import com.strandls.traits.pojo.TraitsValuePair;\n+import com.strandls.userGroup.pojo.UserGroupIbp;\n+import org.apache.poi.ss.usermodel.Row;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ObservationBulkData {\n+    private final Map<String, Integer> fieldMapping;\n+    private final Row dataRow;\n+    private final HttpServletRequest request;\n+    private final DataTable dataTable;\n+    private final List<SpeciesGroup> speciesGroupList;\n+    private final List<TraitsValuePair> pairs;\n+    private final List<UserGroupIbp> userGroupsList;\n+    private final List<License> licenses;\n+\n+    public ObservationBulkData(Map<String, Integer> fieldMapping, Row dataRow, HttpServletRequest request,\n+                               DataTable dataTable, List<SpeciesGroup> speciesGroupList, List<TraitsValuePair> pairs,\n+                               List<UserGroupIbp> userGroupsList, List<License> licenses) {\n+        this.fieldMapping = fieldMapping;\n+        this.dataRow = dataRow;\n+        this.request = request;\n+        this.dataTable = dataTable;\n+        this.speciesGroupList = speciesGroupList;\n+        this.pairs = pairs;\n+        this.userGroupsList = userGroupsList;\n+        this.licenses = licenses;\n+    }\n+\n+    public Map<String, Integer> getFieldMapping() {\n+        return fieldMapping;\n+    }\n+\n+    public Row getDataRow() {\n+        return dataRow;\n+    }\n+\n+    public HttpServletRequest getRequest() {\n+        return request;\n+    }\n+\n+    public List<SpeciesGroup> getSpeciesGroupList() {\n+        return speciesGroupList;\n+    }\n+\n+    public List<TraitsValuePair> getPairs() {\n+        return pairs;\n+    }\n+\n+    public List<UserGroupIbp> getUserGroupsList() {\n+        return userGroupsList;\n+    }\n+\n+    public List<License> getLicenses() {\n+        return licenses;\n+    }\n+\n+    public DataTable getDataTable() {\n+        return dataTable;\n+    }\n+}"
  },
  {
    "sha": "2b48b2670d40bf37d6c821235d18abb0d52d89ad",
    "filename": "src/main/java/com/strandls/observation/service/Impl/DataTableHelper.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/DataTableHelper.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/DataTableHelper.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/service/Impl/DataTableHelper.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,80 @@\n+package com.strandls.observation.service.Impl;\n+\n+import com.strandls.observation.dto.ObservationBulkDTO;\n+import com.strandls.observation.pojo.DataTable;\n+import com.vividsolutions.jts.geom.Coordinate;\n+import com.vividsolutions.jts.geom.Geometry;\n+import com.vividsolutions.jts.geom.GeometryFactory;\n+import com.vividsolutions.jts.geom.PrecisionModel;\n+\n+import java.math.RoundingMode;\n+import java.text.DecimalFormat;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+public class DataTableHelper {\n+\n+    public DataTable createDataTable(ObservationBulkDTO observationBulkData, Long userId) {\n+        DataTable dataTable = new DataTable();\n+        dataTable.setAccessLicenseId(observationBulkData.getLicenseId());\n+        dataTable.setAccessRights(null);\n+        dataTable.setAgreeTerms(true);\n+        dataTable.setChecklistId(null);\n+        dataTable.setColumns(new ArrayList<String>().toString()); // ask\n+        dataTable.setCreatedOn(observationBulkData.getCreatedOn());\n+        dataTable.setCustomFields(new HashMap<String, String>().toString()); // ask\n+        dataTable.setDatasetId(observationBulkData.getDataset());\n+        dataTable.setDataTableType(\"OBSERVATIONS\");\n+        dataTable.setDeleted(false);\n+        dataTable.setDescription(observationBulkData.getDescription());\n+        dataTable.setExternalId(null);\n+        dataTable.setExternalUrl(null);\n+        dataTable.setFeatureCount(0);\n+        dataTable.setFlagCount(0);\n+\n+        // geo fields\n+        dataTable.setGeographicalCoverageGeoPrivacy(false);\n+        dataTable.setGeographicalCoverageLatitude(observationBulkData.getLatitude());\n+        dataTable.setGeographicalCoverageLongitude(observationBulkData.getLongitude());\n+        dataTable.setGeographicalCoverageLocationAccuracy(observationBulkData.getLocationAccuracy());\n+        dataTable.setGeographicalCoverageLocationScale(observationBulkData.getLocationScale());\n+        dataTable.setGeographicalCoveragePlaceName(observationBulkData.getObservedAt());\n+\n+        GeometryFactory geofactory = new GeometryFactory(new PrecisionModel(), 4326);\n+        DecimalFormat df = new DecimalFormat(\"#.####\");\n+        df.setRoundingMode(RoundingMode.HALF_EVEN);\n+        double latitude = Double.parseDouble(df.format(observationBulkData.getLatitude()));\n+        double longitude = Double.parseDouble(df.format(observationBulkData.getLongitude()));\n+        Coordinate c = new Coordinate(longitude, latitude);\n+        Geometry topology = geofactory.createPoint(c);\n+        dataTable.setGeographicalCoverageTopology(topology);\n+\n+        dataTable.setImagesFileId(null);\n+        dataTable.setLanguageId(205L);\n+        dataTable.setLastRevised(observationBulkData.getCreatedOn());\n+        dataTable.setMethods(observationBulkData.getMethods());\n+        dataTable.setPartyAttributions(observationBulkData.getAttribution());\n+        dataTable.setPartyUploaderId(userId);\n+        dataTable.setPartyContributorId(observationBulkData.getContributors()); // only one contributor\n+        dataTable.setProject(observationBulkData.getProject());\n+        dataTable.setRating(0);\n+        dataTable.setSummary(observationBulkData.getSummary());\n+        dataTable.setTaxonomicCoverageGroupIds(observationBulkData.getSGroup());\n+        dataTable.setTemporalCoverageDateAccuracy(observationBulkData.getDateAccuracy());\n+        dataTable.setTemporalCoverageFromDate(observationBulkData.getObservedFromDate());\n+        dataTable.setTemporalCoverageToDate(observationBulkData.getObservedToDate());\n+        dataTable.setTitle(observationBulkData.getTitle());\n+        dataTable.setTraitValueFileId(null);\n+        dataTable.setuFileId(1L); // uFile table id\n+        dataTable.setVersion(2L);\n+        dataTable.setViaCode(null);\n+        dataTable.setViaId(null);\n+        dataTable.setUploadLogId(null);\n+        dataTable.setUploaderId(userId);\n+        dataTable.setBasisOfData(observationBulkData.getBasisOfData());\n+\n+        System.out.println(\"\\n***** DataTable Prepared *****\\n\");\n+        System.out.println(dataTable.toString());\n+        return dataTable;\n+    }\n+}"
  },
  {
    "sha": "5343ec6509d6b448d8f0e13431661bfede78f420",
    "filename": "src/main/java/com/strandls/observation/service/Impl/ElasticThreadWorker.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ElasticThreadWorker.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ElasticThreadWorker.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/service/Impl/ElasticThreadWorker.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,37 @@\n+package com.strandls.observation.service.Impl;\n+\n+import com.strandls.observation.es.util.ESCreateThread;\n+import com.strandls.observation.es.util.ESUpdate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+public class ElasticThreadWorker extends Thread {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ElasticThreadWorker.class);\n+\n+    private final ESUpdate esUpdate;\n+    private final Long id;\n+\n+    public ElasticThreadWorker(ESUpdate esUpdate, Long id) {\n+        this.esUpdate = esUpdate;\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            ExecutorService executorService = Executors.newSingleThreadExecutor();\n+            ESCreateThread esThread = new ESCreateThread(esUpdate, id.toString());\n+            executorService.submit(esThread).get();\n+            executorService.shutdownNow();\n+            executorService.awaitTermination(5, TimeUnit.MINUTES);\n+        } catch (Exception ex) {\n+            \n+            logger.error(ex.getMessage());\n+        }\n+    }\n+}"
  },
  {
    "sha": "755f6b15bc5830bc3c294f5cc15358f9e8494498",
    "filename": "src/main/java/com/strandls/observation/service/Impl/ObservationBulkMapperHelper.java",
    "status": "added",
    "additions": 706,
    "deletions": 0,
    "changes": 706,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ObservationBulkMapperHelper.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ObservationBulkMapperHelper.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/service/Impl/ObservationBulkMapperHelper.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,706 @@\n+package com.strandls.observation.service.Impl;\n+\n+import com.strandls.file.api.UploadApi;\n+import com.strandls.file.model.FilesDTO;\n+import com.strandls.observation.Headers;\n+import com.strandls.observation.dao.ObservationDAO;\n+import com.strandls.observation.es.util.ESUpdate;\n+import com.strandls.observation.pojo.DataTable;\n+import com.strandls.observation.pojo.Observation;\n+import com.strandls.observation.pojo.RecoCreate;\n+import com.strandls.observation.pojo.RecoData;\n+import com.strandls.observation.service.RecommendationService;\n+import com.strandls.resource.controllers.ResourceServicesApi;\n+import com.strandls.resource.pojo.License;\n+import com.strandls.resource.pojo.Resource;\n+import com.strandls.taxonomy.pojo.SpeciesGroup;\n+import com.strandls.traits.controller.TraitsServiceApi;\n+import com.strandls.traits.pojo.FactsCreateData;\n+import com.strandls.traits.pojo.TraitsValue;\n+import com.strandls.traits.pojo.TraitsValuePair;\n+import com.strandls.userGroup.controller.CustomFieldServiceApi;\n+import com.strandls.userGroup.controller.UserGroupSerivceApi;\n+import com.strandls.userGroup.pojo.*;\n+import com.strandls.utility.controller.UtilityServiceApi;\n+import com.strandls.utility.pojo.Tags;\n+import com.strandls.utility.pojo.TagsMapping;\n+import com.strandls.utility.pojo.TagsMappingData;\n+import com.vividsolutions.jts.geom.Coordinate;\n+import com.vividsolutions.jts.geom.Geometry;\n+import com.vividsolutions.jts.geom.GeometryFactory;\n+import com.vividsolutions.jts.geom.PrecisionModel;\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Row.MissingCellPolicy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.HttpHeaders;\n+import java.math.RoundingMode;\n+import java.text.DecimalFormat;\n+import java.util.*;\n+\n+public class ObservationBulkMapperHelper {\n+\n+\tprivate final Logger logger = LoggerFactory.getLogger(ObservationBulkMapperHelper.class);\n+\n+\t@Inject\n+\tUtilityServiceApi utilityServiceApi;\n+\n+\t@Inject\n+\tTraitsServiceApi traitServiceApi;\n+\n+\t@Inject\n+\tRecommendationService recoService;\n+\n+\t@Inject\n+\tUploadApi fileUploadApi;\n+\n+\t@Inject\n+\tResourceServicesApi resourceServicesApi;\n+\n+\t@Inject\n+\tUserGroupSerivceApi userGroupServiceApi;\n+\n+\t@Inject\n+\tCustomFieldServiceApi cfServiceApi;\n+\n+\t@Inject\n+\tUserGroupSerivceApi userGroupSerivceApi;\n+\n+\t@Inject\n+\tLogActivities logActivities;\n+\n+\t@Inject\n+\tObservationMapperHelper observationMapperHelper;\n+\n+\t@Inject\n+\tObservationDAO observationDAO;\n+\n+\t@Inject\n+\tprivate Headers headers;\n+\n+\t@Inject\n+\tESUpdate esUpdate;\n+\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic Observation creationObservationMapping(Long userId, Map<String, Integer> fieldMapping, Row dataRow,\n+\t\t\tDataTable dataTable, List<SpeciesGroup> speciesGroupList) {\n+\t\ttry {\n+\t\t\tBoolean geoPrivacy = Boolean.TRUE;\n+\t\t\tif (fieldMapping.get(\"geoPrivacy\") != null) {\n+\t\t\t\tCell geoPrivacyCell = dataRow.getCell(fieldMapping.get(\"geoPrivacy\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (geoPrivacyCell != null) {\n+\t\t\t\t\tgeoPrivacyCell.setCellType(CellType.BOOLEAN);\n+\t\t\t\t\tgeoPrivacy = geoPrivacyCell.getBooleanCellValue();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tSpeciesGroup speciesGroup = null;\n+\t\t\tif (fieldMapping.get(\"sGroup\") != null) {\n+\t\t\t\tCell sGroupCell = dataRow.getCell(fieldMapping.get(\"sGroup\"), MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (sGroupCell != null) {\n+\t\t\t\t\tsGroupCell.setCellType(CellType.STRING);\n+\n+\t\t\t\t\tspeciesGroup = speciesGroupList.stream().filter(group -> {\n+\t\t\t\t\t\tfinal String sGroup = sGroupCell.getStringCellValue();\n+\t\t\t\t\t\treturn group.getName().equalsIgnoreCase(sGroup);\n+\t\t\t\t\t}).findFirst().orElse(null);\n+\n+\t\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\t\tspeciesGroup = new SpeciesGroup();\n+\t\t\t\t\tspeciesGroup.setId(Long.parseLong(dataTable.getTaxonomicCoverageGroupIds().split(\",\")[0].trim()));\n+\t\t\t\t}\n+\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\tspeciesGroup = new SpeciesGroup();\n+\t\t\t\tspeciesGroup.setId(Long.parseLong(dataTable.getTaxonomicCoverageGroupIds().split(\",\")[0].trim()));\n+\t\t\t}\n+\n+\t\t\tDate fromDate = null;\n+\t\t\tif (fieldMapping.get(\"fromDate\") != null) {\n+\t\t\t\tCell fromDateCell = dataRow.getCell(fieldMapping.get(\"fromDate\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (fromDateCell != null) {\n+\t\t\t\t\tfromDateCell.setCellType(CellType.NUMERIC);\n+\t\t\t\t\tfromDate = fromDateCell.getDateCellValue();\n+\t\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\t\tfromDate = dataTable.getTemporalCoverageFromDate();\n+\t\t\t\t}\n+\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\tfromDate = dataTable.getTemporalCoverageFromDate();\n+\t\t\t}\n+\n+\t\t\tDate toDate = null;\n+\t\t\tif (fieldMapping.get(\"toDate\") != null) {\n+\t\t\t\tCell toDateCell = dataRow.getCell(fieldMapping.get(\"toDate\"), MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (toDateCell != null) {\n+\t\t\t\t\ttoDateCell.setCellType(CellType.NUMERIC);\n+\t\t\t\t\ttoDate = toDateCell.getDateCellValue();\n+\t\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\t\ttoDate = dataTable.getTemporalCoverageToDate();\n+\t\t\t\t}\n+\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\ttoDate = dataTable.getTemporalCoverageToDate();\n+\t\t\t}\n+\n+\t\t\tString observedAt = \"\";\n+\t\t\tif (fieldMapping.get(\"observedAt\") != null) {\n+\t\t\t\tCell observedAtCell = dataRow.getCell(fieldMapping.get(\"observedAt\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (observedAtCell != null) {\n+\t\t\t\t\tobservedAtCell.setCellType(CellType.STRING);\n+\t\t\t\t\tobservedAt = observedAtCell.getStringCellValue();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tString locationScale = \"APPROXIMATE\";\n+\t\t\tif (fieldMapping.get(\"locationScale\") != null) {\n+\t\t\t\tCell locationScaleCell = dataRow.getCell(fieldMapping.get(\"locationScale\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (locationScaleCell != null) {\n+\t\t\t\t\tlocationScaleCell.setCellType(CellType.STRING);\n+\t\t\t\t\tlocationScale = locationScaleCell.getStringCellValue();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tDouble latitude = null;\n+\t\t\tif (fieldMapping.get(\"latitude\") != null) {\n+\t\t\t\tCell latitudeCell = dataRow.getCell(fieldMapping.get(\"latitude\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (latitudeCell != null) {\n+\t\t\t\t\tlatitudeCell.setCellType(CellType.STRING);\n+\t\t\t\t\tlatitude = Double.parseDouble(latitudeCell.getStringCellValue());\n+\t\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\t\tlatitude = dataTable.getGeographicalCoverageLatitude();\n+\t\t\t\t}\n+\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\tlatitude = dataTable.getGeographicalCoverageLatitude();\n+\t\t\t}\n+\n+\t\t\tDouble longitude = null;\n+\t\t\tif (fieldMapping.get(\"longitude\") != null) {\n+\t\t\t\tCell longitudeCell = dataRow.getCell(fieldMapping.get(\"longitude\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (longitudeCell != null) {\n+\t\t\t\t\tlongitudeCell.setCellType(CellType.STRING);\n+\t\t\t\t\tlongitude = Double.parseDouble(longitudeCell.getStringCellValue());\n+\t\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\t\tlongitude = dataTable.getGeographicalCoverageLongitude();\n+\t\t\t\t}\n+\t\t\t} else { // get value from dataTable metadata if not mentioned in excel\n+\t\t\t\tlongitude = dataTable.getGeographicalCoverageLongitude();\n+\t\t\t}\n+\n+\t\t\tString dateAccuracy = \"ACCURATE\";\n+\t\t\tif (fieldMapping.get(\"dateAccuracy\") != null) {\n+\t\t\t\tCell dateAccuracyCell = dataRow.getCell(fieldMapping.get(\"dateAccuracy\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (dateAccuracyCell != null) {\n+\t\t\t\t\tdateAccuracyCell.setCellType(CellType.STRING);\n+\t\t\t\t\tdateAccuracy = dateAccuracyCell.getStringCellValue();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tString notes = null;\n+\t\t\tif (fieldMapping.get(\"notes\") != null) {\n+\t\t\t\tCell notesCell = dataRow.getCell(fieldMapping.get(\"notes\"), MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (notesCell != null) {\n+\t\t\t\t\tnotesCell.setCellType(CellType.STRING);\n+\t\t\t\t\tnotes = notesCell.getStringCellValue();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tGeometry topology = null;\n+\t\t\tif (latitude != null && longitude != null) {\n+\t\t\t\tGeometryFactory geofactory = new GeometryFactory(new PrecisionModel(), 4326);\n+\t\t\t\tDecimalFormat df = new DecimalFormat(\"#.####\");\n+\t\t\t\tdf.setRoundingMode(RoundingMode.HALF_EVEN);\n+\t\t\t\tdouble lat = Double.parseDouble(df.format(latitude));\n+\t\t\t\tdouble lon = Double.parseDouble(df.format(longitude));\n+\t\t\t\tCoordinate c = new Coordinate(lat, lon);\n+\t\t\t\ttopology = geofactory.createPoint(c);\n+\t\t\t}\n+\n+\t\t\tObservation observation = new Observation();\n+\n+\t\t\tobservation.setAuthorId(userId);\n+\t\t\tobservation.setIsShowable(true);\n+\t\t\tobservation.setVersion(0L);\n+\t\t\tobservation.setCreatedOn(new Date());\n+\t\t\tobservation.setGroupId(speciesGroup != null ? speciesGroup.getId() : null);\n+\t\t\tobservation.setLatitude(latitude);\n+\t\t\tobservation.setLongitude(longitude);\n+\t\t\tobservation.setNotes(notes);\n+\t\t\tobservation.setIsDeleted(false);\n+\t\t\tobservation.setFromDate(fromDate);\n+\t\t\tobservation.setPlaceName(observedAt); // place name given by user\n+\t\t\tobservation.setRating(0);// what to insert\n+\t\t\tobservation.setToDate(toDate);\n+\t\t\tobservation.setGeoPrivacy(geoPrivacy);\n+\t\t\tobservation.setTopology(topology);\n+\t\t\tobservation.setFeatureCount(0);// update field initially 0, used only after its attached and featured to a\n+\t\t\tobservation.setIsLocked(false);// update field , initially false\n+\t\t\tobservation.setLicenseId(822L);// default 822\n+\t\t\tobservation.setLanguageId(205L);\n+\t\t\tobservation.setLocationScale(locationScale); // 5 options\n+\n+\t\t\tobservation.setReprImageId(null);\n+\t\t\tobservation.setProtocol(\"LIST\");\n+\t\t\tobservation.setBasisOfRecord(\"PRIMARY_OBSERVATION\");\n+\t\t\tobservation.setNoOfImages(0);\n+\t\t\tobservation.setNoOfAudio(0);\n+\t\t\tobservation.setNoOfVideos(0);\n+\n+\t\t\tobservation.setNoOfIdentifications(1);\n+\t\t\tobservation.setDataTableId(dataTable.getId());//\n+\t\t\tobservation.setDateAccuracy(dateAccuracy);\n+\t\t\tobservation.setFlagCount(0);\n+\t\t\tobservation.setVisitCount(0L);\n+\t\t\tobservation.setIsChecklist(false);// false for nrml case only used in DATATABLE\n+\t\t\tobservation.setSourceId(null);// observation id in nrml case, used only in GBIF\n+\t\t\tobservation.setChecklistAnnotations(null);// from data set\n+\t\t\tobservation.setAccessRights(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setCatalogNumber(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setDatasetId(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setExternalDatasetKey(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setExternalId(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setExternalUrl(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setInformationWithheld(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setLastCrawled(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setLastInterpreted(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setOriginalAuthor(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setPublishingCountry(null);// from IP address\n+\t\t\tobservation.setViaCode(null);// null for nrml case only used in GBIF\n+\t\t\tobservation.setViaId(null);// null for nrml case only used in GBIF\n+\n+\t\t\treturn observation;\n+\t\t} catch (Exception ex) {\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic void createTags(HttpServletRequest request, Map<String, Integer> fieldMapping, Row dataRow,\n+\t\t\tLong observationId) {\n+\t\ttry {\n+\t\t\tif (fieldMapping.get(\"tags\") != null) {\n+\t\t\t\tCell cell = dataRow.getCell(fieldMapping.get(\"tags\"), MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tString tagsInCell = cell != null ? cell.getStringCellValue() : \"\";\n+\t\t\t\tif (!tagsInCell.isEmpty()) {\n+\t\t\t\t\tTagsMapping tagsMapping = new TagsMapping();\n+\t\t\t\t\tList<Tags> tags = new ArrayList<>();\n+\t\t\t\t\tfor (String tag : tagsInCell.split(\",\")) {\n+\t\t\t\t\t\tTags t = new Tags();\n+\t\t\t\t\t\tt.setName(tag);\n+\t\t\t\t\t\ttags.add(t);\n+\t\t\t\t\t}\n+\t\t\t\t\ttagsMapping.setObjectId(observationId);\n+\t\t\t\t\ttagsMapping.setTags(tags);\n+\n+\t\t\t\t\tTagsMappingData tagsMappingData = new TagsMappingData();\n+\t\t\t\t\ttagsMappingData.setTagsMapping(tagsMapping);\n+\t\t\t\t\ttagsMappingData.setMailData(null);\n+\n+\t\t\t\t\tutilityServiceApi = headers.addUtilityHeaders(utilityServiceApi,\n+\t\t\t\t\t\t\trequest.getHeader(HttpHeaders.AUTHORIZATION));\n+\t\t\t\t\tutilityServiceApi.createTags(\"observation\", tagsMappingData);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception ex) {\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic void createFactsMapping(HttpServletRequest request, Map<String, Integer> fieldMapping, Row dataRow,\n+\t\t\tList<TraitsValuePair> pairs, Long observationId) {\n+\t\ttry {\n+\t\t\tMap<String, List<Long>> facts = new HashMap<>();\n+\t\t\tfor (TraitsValuePair pair : pairs) {\n+\t\t\t\tInteger field = fieldMapping.get(pair.getTraits().getName());\n+\t\t\t\tif (field == null)\n+\t\t\t\t\tcontinue;\n+\n+\t\t\t\tCell traitCell = dataRow.getCell(field, MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (traitCell != null) {\n+\t\t\t\t\ttraitCell.setCellType(CellType.STRING);\n+\t\t\t\t\tString[] traitsValues = traitCell.getStringCellValue().split(\",\");\n+\n+\t\t\t\t\tList<Long> traits = new ArrayList<>();\n+\t\t\t\t\tfor (TraitsValue tv : pair.getValues()) {\n+\t\t\t\t\t\tfor (String t : traitsValues) {\n+\t\t\t\t\t\t\tif (t.equalsIgnoreCase(tv.getValue())) {\n+\t\t\t\t\t\t\t\ttraits.add(tv.getId());\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tfacts.put(String.valueOf(pair.getTraits().getId()), traits);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (facts.isEmpty())\n+\t\t\t\treturn;\n+\t\t\tFactsCreateData factsCreateData = new FactsCreateData();\n+\t\t\tfactsCreateData.setFactValuePairs(facts);\n+\t\t\tfactsCreateData.setMailData(null);\n+\t\t\ttraitServiceApi = headers.addTraitsHeaders(traitServiceApi, request.getHeader(HttpHeaders.AUTHORIZATION));\n+\t\t\ttraitServiceApi.createFacts(\"species.participation.Observation\", String.valueOf(observationId),\n+\t\t\t\t\tfactsCreateData);\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\tpublic void createRecoMapping(HttpServletRequest request, Map<String, Integer> fieldMapping, Row dataRow,\n+\t\t\tObservation observation, Long userId) {\n+\t\ttry {\n+\t\t\tRecoCreate recoCreate = prepareRecoMapping(dataRow, fieldMapping);\n+\t\t\tif (recoCreate != null) {\n+\t\t\t\tLong maxVotedReco = recoService.createRecoVote(request, userId, observation.getId(),\n+\t\t\t\t\t\trecoCreate.getScientificNameId(), recoCreate, true);\n+\t\t\t\tobservation.setMaxVotedRecoId(maxVotedReco);\n+\t\t\t\tobservationDAO.update(observation);\n+\t\t\t}\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\tprivate RecoCreate prepareRecoMapping(Row dataRow, Map<String, Integer> fieldMapping) {\n+\t\tRecoCreate recoCreate = null;\n+\t\ttry {\n+\t\t\tRecoData recoData = new RecoData();\n+\t\t\tString commonName;\n+\t\t\tif (fieldMapping.get(\"commonName\") != null) {\n+\t\t\t\tCell commonNameCell = dataRow.getCell(fieldMapping.get(\"commonName\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (commonNameCell != null) {\n+\t\t\t\t\tcommonNameCell.setCellType(CellType.STRING);\n+\t\t\t\t\tcommonName = commonNameCell.getStringCellValue();\n+\n+\t\t\t\t\trecoData.setTaxonCommonName(commonName);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tString scientificName;\n+\t\t\tif (fieldMapping.get(\"scientificName\") != null) {\n+\t\t\t\tCell scientificNameCell = dataRow.getCell(fieldMapping.get(\"scientificName\"),\n+\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (scientificNameCell != null) {\n+\t\t\t\t\tscientificNameCell.setCellType(CellType.STRING);\n+\t\t\t\t\tscientificName = scientificNameCell.getStringCellValue();\n+\n+\t\t\t\t\trecoData.setTaxonScientificName(scientificName);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tString comment;\n+\t\t\tif (fieldMapping.get(\"comment\") != null) {\n+\t\t\t\tCell commentCell = dataRow.getCell(fieldMapping.get(\"comment\"), MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\tif (commentCell != null) {\n+\t\t\t\t\tcommentCell.setCellType(CellType.STRING);\n+\t\t\t\t\tcomment = commentCell.getStringCellValue();\n+\n+\t\t\t\t\trecoData.setRecoComment(comment);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\trecoCreate = observationMapperHelper.createRecoMapping(recoData);\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t\treturn recoCreate;\n+\t}\n+\n+\tpublic void createObservationResource(HttpServletRequest request, Row dataRow, Map<String, Integer> fieldMapping,\n+\t\t\tList<License> licenses, Long userId, Observation observation, Map<String, String> myImageUpload) {\n+\t\tList<String> filesWithPath = new ArrayList<>();\n+\t\ttry {\n+\t\t\tif (fieldMapping.get(\"fileName\") == null || myImageUpload.isEmpty())\n+\t\t\t\treturn;\n+\t\t\tCell cell = dataRow.getCell(fieldMapping.get(\"fileName\"), MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\tif (cell == null)\n+\t\t\t\treturn;\n+\t\t\tcell.setCellType(CellType.STRING);\n+\n+\t\t\tString fileNames = cell.getStringCellValue();\n+\t\t\tList<String> cellFiles = Arrays.asList(fileNames.split(\",\"));\n+\t\t\tif (cellFiles.isEmpty())\n+\t\t\t\treturn;\n+\n+\t\t\tfor (String file : cellFiles) {\n+\t\t\t\tif (myImageUpload.containsKey(file)) {\n+\t\t\t\t\tfilesWithPath.add(myImageUpload.get(file));\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (filesWithPath.isEmpty())\n+\t\t\t\treturn;\n+\n+\t\t\tFilesDTO files = new FilesDTO();\n+\t\t\tfiles.setFiles(filesWithPath);\n+\t\t\tfiles.setFolder(\"observations\");\n+\t\t\tfiles.setModule(\"observation\");\n+\n+\t\t\tfileUploadApi = headers.addFileUploadHeader(fileUploadApi, request.getHeader(HttpHeaders.AUTHORIZATION));\n+\t\t\tMap<String, Object> fileResponse = fileUploadApi.moveFiles(files);\n+\t\t\tif (fileResponse != null && !fileResponse.isEmpty()) {\n+\t\t\t\tList<Resource> resources = mapFileResponseToResource(fieldMapping, dataRow, licenses, fileResponse,\n+\t\t\t\t\t\tuserId);\n+\t\t\t\tif (resources == null)\n+\t\t\t\t\treturn;\n+\n+\t\t\t\tresourceServicesApi = headers.addResourceHeaders(resourceServicesApi,\n+\t\t\t\t\t\trequest.getHeader(HttpHeaders.AUTHORIZATION));\n+\t\t\t\tList<Resource> response = resourceServicesApi.createResource(\"OBSERVATION\",\n+\t\t\t\t\t\tString.valueOf(observation.getId()), resources);\n+\n+\t\t\t\tInteger noOfImages = 0;\n+\t\t\t\tInteger noOfAudio = 0;\n+\t\t\t\tInteger noOfVideo = 0;\n+\n+\t\t\t\tLong reprImage = null;\n+\t\t\t\tint rating = 0;\n+\t\t\t\tfor (Resource res : response) {\n+\t\t\t\t\tswitch (res.getType()) {\n+\t\t\t\t\tcase \"AUDIO\":\n+\t\t\t\t\t\tnoOfAudio++;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"IMAGE\":\n+\t\t\t\t\t\tnoOfImages++;\n+\t\t\t\t\t\tif (reprImage == null)\n+\t\t\t\t\t\t\treprImage = res.getId();\n+\t\t\t\t\t\tif (res.getRating() != null && res.getRating() > rating) {\n+\t\t\t\t\t\t\treprImage = res.getId();\n+\t\t\t\t\t\t\trating = res.getRating();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"VIDEO\":\n+\t\t\t\t\t\tnoOfVideo++;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tobservation.setNoOfAudio(noOfAudio);\n+\t\t\t\tobservation.setNoOfImages(noOfImages);\n+\t\t\t\tobservation.setNoOfVideos(noOfVideo);\n+\t\t\t\tobservation.setReprImageId(reprImage);\n+\t\t\t\tobservationDAO.update(observation);\n+\t\t\t}\n+\t\t\tlogActivities.LogActivity(request.getHeader(HttpHeaders.AUTHORIZATION), null, observation.getId(),\n+\t\t\t\t\tobservation.getId(), \"observation\", null, \"Observation created\", null);\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\tprivate List<Resource> mapFileResponseToResource(Map<String, Integer> fieldMapping, Row dataRow,\n+\t\t\tList<License> licenses, Map<String, Object> fileResponse, Long userId) {\n+\t\tList<Resource> resources = new ArrayList<>();\n+\t\ttry {\n+\t\t\tfor (Map.Entry<String, Object> resourceData : fileResponse.entrySet()) {\n+\t\t\t\tMap<String, String> values = (Map<String, String>) resourceData.getValue();\n+\t\t\t\tResource resource = new Resource();\n+\t\t\t\tresource.setVersion(0L);\n+\t\t\t\tresource.setDescription(null);\n+\n+\t\t\t\tresource.setMimeType(null);\n+\t\t\t\tif (values.get(\"mimeType\").startsWith(\"image\") || values.get(\"mimeType\").equalsIgnoreCase(\"image\"))\n+\t\t\t\t\tresource.setType(\"IMAGE\");\n+\t\t\t\telse if (values.get(\"mimeType\").startsWith(\"audio\") || values.get(\"mimeType\").equalsIgnoreCase(\"audio\"))\n+\t\t\t\t\tresource.setType(\"AUDIO\");\n+\t\t\t\telse if (values.get(\"mimeType\").startsWith(\"video\") || values.get(\"mimeType\").equalsIgnoreCase(\"video\"))\n+\t\t\t\t\tresource.setType(\"VIDEO\");\n+\t\t\t\tresource.setFileName(values.get(\"name\"));\n+\t\t\t\tresource.setUrl(null);\n+\t\t\t\tresource.setRating(null);\n+\t\t\t\tresource.setUploadTime(new Date());\n+\t\t\t\tresource.setUploaderId(userId);\n+\t\t\t\tresource.setContext(\"OBSERVATION\");\n+\t\t\t\tresource.setLanguageId(205L);\n+\t\t\t\tresource.setAccessRights(null);\n+\t\t\t\tresource.setAnnotations(null);\n+\t\t\t\tresource.setGbifId(null);\n+\n+\t\t\t\tLicense license;\n+\t\t\t\tif (fieldMapping.get(\"license\") != null) {\n+\t\t\t\t\tCell licenseCell = dataRow.getCell(fieldMapping.get(\"license\"),\n+\t\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\t\tif (licenseCell != null) {\n+\t\t\t\t\t\tlicenseCell.setCellType(CellType.STRING);\n+\n+\t\t\t\t\t\tlicense = licenses.stream().filter(l -> {\n+\t\t\t\t\t\t\tfinal String docLicense;\n+\t\t\t\t\t\t\tdocLicense = licenseCell.getStringCellValue().replaceAll(\"-\", \"_\").toUpperCase();\n+\t\t\t\t\t\t\treturn l.getName().endsWith(docLicense);\n+\t\t\t\t\t\t}).findAny().orElse(null);\n+\n+\t\t\t\t\t\tif (license == null) {\n+\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlicense = new License();\n+\t\t\t\t\t\tlicense.setId(822L);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tlicense = new License();\n+\t\t\t\t\tlicense.setId(822L);\n+\t\t\t\t}\n+\n+\t\t\t\tresource.setLicenseId(license.getId());\n+\n+\t\t\t\tresources.add(resource);\n+\t\t\t}\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t\treturn resources;\n+\t}\n+\n+\tpublic void createUserGroupMapping(HttpServletRequest request, Map<String, Integer> fieldMapping, Row dataRow,\n+\t\t\tList<UserGroupIbp> userGroupsList, Long observationId) {\n+\t\ttry {\n+\t\t\tif (fieldMapping.get(\"userGroups\") == null)\n+\t\t\t\treturn;\n+\t\t\tCell cell = dataRow.getCell(fieldMapping.get(\"userGroups\"), MissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\tif (cell == null)\n+\t\t\t\treturn;\n+\n+\t\t\tcell.setCellType(CellType.STRING);\n+\t\t\tString[] cellGroups = cell.getStringCellValue().split(\",\");\n+\t\t\tList<Long> userGroupIds = new ArrayList<>();\n+\t\t\tfor (String cellGroup : cellGroups) {\n+\t\t\t\tfor (UserGroupIbp group : userGroupsList) {\n+\t\t\t\t\tif (group.getName().equalsIgnoreCase(cellGroup.trim())) {\n+\t\t\t\t\t\tuserGroupIds.add(group.getId());\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (userGroupIds.isEmpty())\n+\t\t\t\treturn;\n+\t\t\tUserGroupMappingCreateData userGroupMappingCreateData = new UserGroupMappingCreateData();\n+\t\t\tuserGroupMappingCreateData.setUserGroups(userGroupIds);\n+\t\t\tuserGroupMappingCreateData.setMailData(null);\n+\n+\t\t\tuserGroupServiceApi = headers.addUserGroupHeader(userGroupServiceApi,\n+\t\t\t\t\trequest.getHeader(HttpHeaders.AUTHORIZATION));\n+\t\t\tuserGroupServiceApi.createObservationUserGroupMapping(String.valueOf(observationId),\n+\t\t\t\t\tuserGroupMappingCreateData);\n+\n+\t\t\t// custom field function call\n+\t\t\tcreateCustomFieldMapping(request, fieldMapping, dataRow, userGroupIds, observationId);\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\tpublic void createCustomFieldMapping(HttpServletRequest request, Map<String, Integer> fieldMapping, Row dataRow,\n+\t\t\tList<Long> userGroupIds, Long observationId) {\n+\t\ttry {\n+\t\t\tList<CustomFieldFactsInsert> customFieldFactsInsertList = new ArrayList<>();\n+\t\t\tcfServiceApi = headers.addCFHeaders(cfServiceApi, request.getHeader(HttpHeaders.AUTHORIZATION));\n+\t\t\tfor (Long userGroupId : userGroupIds) {\n+\t\t\t\tList<CustomFieldDetails> customFieldDetails = cfServiceApi\n+\t\t\t\t\t\t.getUserGroupCustomFields(String.valueOf(userGroupId));\n+\t\t\t\tfor (CustomFieldDetails customFieldDetail : customFieldDetails) {\n+\t\t\t\t\tString customFieldLabel = customFieldDetail.getCustomFields().getName();\n+\t\t\t\t\tif (fieldMapping.get(customFieldLabel) != null) {\n+\t\t\t\t\t\tCell docCustomFieldCell = dataRow.getCell(fieldMapping.get(customFieldLabel),\n+\t\t\t\t\t\t\t\tMissingCellPolicy.RETURN_BLANK_AS_NULL);\n+\t\t\t\t\t\tif (docCustomFieldCell == null)\n+\t\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\t\tdocCustomFieldCell.setCellType(CellType.STRING);\n+\t\t\t\t\t\tString docCellValue = docCustomFieldCell.getStringCellValue();\n+\t\t\t\t\t\tList<CustomFieldValues> customFieldValues = cfServiceApi.getCustomFieldOptions(\n+\t\t\t\t\t\t\t\tString.valueOf(observationId), String.valueOf(userGroupId),\n+\t\t\t\t\t\t\t\tString.valueOf(customFieldDetail.getCustomFields().getId()));\n+\n+\t\t\t\t\t\tCustomFieldFactsInsert customFieldFactsInsert = new CustomFieldFactsInsert();\n+\t\t\t\t\t\tcustomFieldFactsInsert.setCustomFieldId(customFieldDetail.getCustomFields().getId());\n+\t\t\t\t\t\tcustomFieldFactsInsert.setObservationId(observationId);\n+\t\t\t\t\t\tcustomFieldFactsInsert.setUserGroupId(userGroupId);\n+\n+\t\t\t\t\t\tif (customFieldDetail.getCustomFields().getFieldType().equalsIgnoreCase(\"FIELD TEXT\")) {\n+\t\t\t\t\t\t\tcustomFieldFactsInsert.setTextBoxValue(docCellValue);\n+\t\t\t\t\t\t} else if (customFieldDetail.getCustomFields().getFieldType()\n+\t\t\t\t\t\t\t\t.equalsIgnoreCase(\"SINGLE CATEGORICAL\")) {\n+\t\t\t\t\t\t\tCustomFieldValues customFieldValue = null;\n+\t\t\t\t\t\t\tfor (CustomFieldValues customField : customFieldValues) {\n+\t\t\t\t\t\t\t\tif (customField.getValues().equalsIgnoreCase(docCellValue)) {\n+\t\t\t\t\t\t\t\t\tcustomFieldValue = customField;\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (customFieldValue == null)\n+\t\t\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\t\t\tcustomFieldFactsInsert.setSingleCategorical(customFieldValue.getId());\n+\t\t\t\t\t\t} else if (customFieldDetail.getCustomFields().getFieldType()\n+\t\t\t\t\t\t\t\t.equalsIgnoreCase(\"MULTIPLE CATEGORICAL\")) {\n+\t\t\t\t\t\t\tList<Long> multiCatValues = new ArrayList<>();\n+\t\t\t\t\t\t\tfor (CustomFieldValues customField : customFieldValues) {\n+\t\t\t\t\t\t\t\tif (customField.getValues().equalsIgnoreCase(docCellValue)) {\n+\t\t\t\t\t\t\t\t\tmultiCatValues.add(customField.getId());\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (multiCatValues.isEmpty())\n+\t\t\t\t\t\t\t\tcontinue;\n+\n+\t\t\t\t\t\t\tcustomFieldFactsInsert.setMultipleCategorical(multiCatValues);\n+\t\t\t\t\t\t} else if (customFieldDetail.getCustomFields().getFieldType().equalsIgnoreCase(\"RANGE\")) {\n+\t\t\t\t\t\t\t// fill this\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tcustomFieldFactsInsertList.add(customFieldFactsInsert);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (customFieldFactsInsertList.isEmpty())\n+\t\t\t\treturn;\n+\n+\t\t\tfor (CustomFieldFactsInsert customFieldFactsInsert : customFieldFactsInsertList) {\n+\t\t\t\tCustomFieldFactsInsertData customFieldFactsInsertData = new CustomFieldFactsInsertData();\n+\t\t\t\tcustomFieldFactsInsertData.setFactsCreateData(customFieldFactsInsert);\n+\t\t\t\tcustomFieldFactsInsertData.setMailData(null);\n+\t\t\t\tcfServiceApi.addUpdateCustomFieldData(customFieldFactsInsertData);\n+\t\t\t}\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\tpublic void updateUserGroupFilter(HttpServletRequest request, Observation observation) {\n+\t\ttry {\n+\t\t\tUserGroupObvFilterData ugObvFilterData = observationMapperHelper.getUGFilterObvData(observation);\n+\t\t\tuserGroupServiceApi = headers.addUserGroupHeader(userGroupServiceApi,\n+\t\t\t\t\trequest.getHeader(HttpHeaders.AUTHORIZATION));\n+\t\t\tuserGroupServiceApi.getFilterRule(ugObvFilterData);\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n+\n+\tpublic void updateGeoPrivacy(Observation observation) {\n+\t\ttry {\n+\t\t\tobservationMapperHelper.updateGeoPrivacy(Collections.singletonList(observation));\n+\t\t} catch (Exception ex) {\n+\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n+}"
  },
  {
    "sha": "f9fa1eed4332f55d0c4769dede99412334313caf",
    "filename": "src/main/java/com/strandls/observation/service/Impl/ObservationListServiceImpl.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ObservationListServiceImpl.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ObservationListServiceImpl.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/service/Impl/ObservationListServiceImpl.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -99,7 +99,7 @@ else if (view.equalsIgnoreCase(\"stats\")) {\n \t\t\telse {\n \n \t\t\t\tMapResponse result = esService.search(index, type, geoAggregationField, geoAggegationPrecision,\n-\t\t\t\t\t\tonlyFilteredAggregation, termsAggregationField, querys);\n+\t\t\t\t\t\tonlyFilteredAggregation, termsAggregationField, null, querys);\n \t\t\t\tList<MapDocument> documents = result.getDocuments();\n \t\t\t\ttotalCount = result.getTotalDocuments();\n \n@@ -890,7 +890,7 @@ public FilterPanelData getAllFilter() {\n \t\t\tfor (String s : resourceUrls.split(\",\")) {\n \t\t\t\tMapSearchQuery query = esUtility.getSearchQueryResource(s);\n \t\t\t\tMapResponse result = esService.search(ObservationIndex.index.getValue(),\n-\t\t\t\t\t\tObservationIndex.type.getValue(), null, null, null, null, query);\n+\t\t\t\t\t\tObservationIndex.type.getValue(), null, null, null, null, null, query);\n \t\t\t\tList<MapDocument> documents = result.getDocuments();\n \t\t\t\tMapDocument document = documents.get(0);\n \t\t\t\ttry {\n@@ -933,7 +933,7 @@ public ObservationListMinimalData getObservationMinimal(String observationId) {\n \t\ttry {\n \t\t\tList<ObservationListElasticMapping> observationList = new ArrayList<ObservationListElasticMapping>();\n \t\t\tMapResponse result = esService.search(index, type, geoAggregationField, geoAggegationPrecision,\n-\t\t\t\t\tonlyFilteredAggregation, termsAggregationField, querys);\n+\t\t\t\t\tonlyFilteredAggregation, termsAggregationField, null, querys);\n \t\t\tList<MapDocument> documents = result.getDocuments();\n \t\t\tfor (MapDocument document : documents) {\n \t\t\t\ttry {\n@@ -950,4 +950,4 @@ public ObservationListMinimalData getObservationMinimal(String observationId) {\n \t\treturn null;\n \t}\n \n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "56a8aa0bfafd7194641a60856066c39973c0d5ff",
    "filename": "src/main/java/com/strandls/observation/service/Impl/ObservationMapperHelper.java",
    "status": "modified",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ObservationMapperHelper.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ObservationMapperHelper.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/service/Impl/ObservationMapperHelper.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -27,7 +27,9 @@\n import com.strandls.file.api.UploadApi;\n import com.strandls.file.model.FilesDTO;\n import com.strandls.observation.Headers;\n+import com.strandls.observation.dao.ObservationDAO;\n import com.strandls.observation.dao.RecommendationDao;\n+import com.strandls.observation.es.util.RabbitMQProducer;\n import com.strandls.observation.pojo.Observation;\n import com.strandls.observation.pojo.ObservationCreate;\n import com.strandls.observation.pojo.ObservationResourceData;\n@@ -38,6 +40,8 @@\n import com.strandls.observation.util.ObservationInputException;\n import com.strandls.resource.pojo.Resource;\n import com.strandls.resource.pojo.ResourceData;\n+import com.strandls.traits.controller.TraitsServiceApi;\n+import com.strandls.userGroup.pojo.UserGroupObvFilterData;\n import com.strandls.utility.controller.UtilityServiceApi;\n import com.strandls.utility.pojo.ParsedName;\n import com.vividsolutions.jts.geom.Coordinate;\n@@ -72,6 +76,15 @@\n \t@Inject\n \tprivate Headers headers;\n \n+\t@Inject\n+\tprivate RabbitMQProducer rabbitMQProducer;\n+\n+\t@Inject\n+\tObservationDAO observationDAO;\n+\n+\t@Inject\n+\tprivate TraitsServiceApi traitsServiceApi;\n+\n \tpublic Boolean checkIndiaBounds(ObservationCreate observationData) {\n \t\ttry {\n \t\t\tString topleft = \"\";\n@@ -498,4 +511,65 @@ else if (resourceData.getType().startsWith(\"video\") || resourceData.getType().eq\n \n \t}\n \n+\tpublic UserGroupObvFilterData getUGFilterObvData(Observation observation) {\n+\t\tUserGroupObvFilterData ugFilterData = new UserGroupObvFilterData();\n+\t\tLong taxonomyId = null;\n+\t\tif (observation.getMaxVotedRecoId() != null)\n+\t\t\ttaxonomyId = recoSerivce.fetchTaxonId(observation.getMaxVotedRecoId());\n+\t\tugFilterData.setObservationId(observation.getId());\n+\t\tugFilterData.setCreatedOnDate(observation.getCreatedOn());\n+\t\tugFilterData.setLatitude(observation.getLatitude());\n+\t\tugFilterData.setLongitude(observation.getLongitude());\n+\t\tugFilterData.setObservedOnDate(observation.getFromDate());\n+\t\tugFilterData.setAuthorId(observation.getAuthorId());\n+\t\tugFilterData.setTaxonomyId(taxonomyId);\n+\n+\t\treturn ugFilterData;\n+\t}\n+\n+\tpublic void updateGeoPrivacy(List<Observation> observationList) {\n+\n+\t\ttry {\n+\n+\t\t\tInputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"config.properties\");\n+\n+\t\t\tProperties properties = new Properties();\n+\t\t\ttry {\n+\t\t\t\tproperties.load(in);\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tlogger.error(e.getMessage());\n+\t\t\t}\n+\t\t\tString geoPrivacyTraitsValue = properties.getProperty(\"geoPrivacyValues\");\n+\t\t\tin.close();\n+\n+\t\t\tList<Long> geoPrivateTaxonId = traitsServiceApi.getTaxonListByValueId(geoPrivacyTraitsValue);\n+\n+\t\t\tfor (Observation observation : observationList) {\n+\t\t\t\tSystem.out.println(\"--------START---------\");\n+\t\t\t\tSystem.out.println(\"Observation Id : \" + observation.getId());\n+\t\t\t\tSystem.out.println(\"---------END----------\");\n+\n+\t\t\t\tif (observation.getGeoPrivacy() == false && observation.getMaxVotedRecoId() != null) {\n+\t\t\t\t\tLong taxonId = recoSerivce.fetchTaxonId(observation.getMaxVotedRecoId());\n+\t\t\t\t\tif (taxonId != null) {\n+\n+\t\t\t\t\t\tif (geoPrivateTaxonId.contains(taxonId)) {\n+\t\t\t\t\t\t\tSystem.out.println(\"---------BEGIN----------\");\n+\t\t\t\t\t\t\tSystem.out.println(\"Observation Id : \" + observation.getId());\n+\t\t\t\t\t\t\tobservation.setGeoPrivacy(true);\n+\t\t\t\t\t\t\tobservationDAO.update(observation);\n+\t\t\t\t\t\t\trabbitMQProducer.setMessage(\"esmodule\", observation.getId().toString(), \"Observation Core\");\n+\t\t\t\t\t\t\tSystem.out.println(\"----------END------------\");\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(e.getMessage());\n+\t\t}\n+\n+\t}\n+\n }"
  },
  {
    "sha": "d21eb8d743d77191f64e496406b8fe1457532583",
    "filename": "src/main/java/com/strandls/observation/service/Impl/ObservationServiceImpl.java",
    "status": "modified",
    "additions": 116,
    "deletions": 1,
    "changes": 117,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ObservationServiceImpl.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/Impl/ObservationServiceImpl.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/service/Impl/ObservationServiceImpl.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -3,21 +3,28 @@\n  */\n package com.strandls.observation.service.Impl;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Properties;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.HttpHeaders;\n \n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Row.MissingCellPolicy;\n+import org.apache.poi.xssf.usermodel.XSSFSheet;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n import org.pac4j.core.profile.CommonProfile;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -37,26 +44,34 @@\n import com.strandls.esmodule.pojo.MapDocument;\n import com.strandls.esmodule.pojo.MapQueryResponse;\n import com.strandls.esmodule.pojo.MapQueryResponse.ResultEnum;\n+import com.strandls.file.api.UploadApi;\n+import com.strandls.file.model.FilesDTO;\n import com.strandls.esmodule.pojo.MaxVotedRecoFreq;\n import com.strandls.esmodule.pojo.ObservationInfo;\n import com.strandls.esmodule.pojo.ObservationNearBy;\n import com.strandls.esmodule.pojo.UserScore;\n import com.strandls.naksha.controller.LayerServiceApi;\n import com.strandls.naksha.pojo.ObservationLocationInfo;\n import com.strandls.observation.Headers;\n+import com.strandls.observation.dao.DataTableDAO;\n import com.strandls.observation.dao.ObservationDAO;\n import com.strandls.observation.dao.ObservationDownloadLogDAO;\n import com.strandls.observation.dao.RecommendationVoteDao;\n+import com.strandls.observation.dto.ObservationBulkDTO;\n+import com.strandls.observation.es.util.ESBulkUploadThread;\n import com.strandls.observation.es.util.ESCreateThread;\n import com.strandls.observation.es.util.ESUpdate;\n import com.strandls.observation.es.util.ObservationIndex;\n import com.strandls.observation.es.util.ObservationListElasticMapping;\n+import com.strandls.observation.es.util.ObservationUtilityFunctions;\n import com.strandls.observation.es.util.RabbitMQProducer;\n import com.strandls.observation.pojo.AllRecoSugguestions;\n+import com.strandls.observation.pojo.DataTable;\n import com.strandls.observation.pojo.DownloadLog;\n import com.strandls.observation.pojo.ListPagePermissions;\n import com.strandls.observation.pojo.MaxVotedRecoPermission;\n import com.strandls.observation.pojo.Observation;\n+import com.strandls.observation.pojo.ObservationBulkData;\n import com.strandls.observation.pojo.ObservationCreate;\n import com.strandls.observation.pojo.ObservationCreateUGContext;\n import com.strandls.observation.pojo.ObservationUGContextCreatePageData;\n@@ -69,9 +84,11 @@\n import com.strandls.observation.pojo.UniqueSpeciesInfo;\n import com.strandls.observation.service.ObservationService;\n import com.strandls.observation.util.ObservationInputException;\n+import com.strandls.resource.controllers.LicenseControllerApi;\n import com.strandls.resource.controllers.ResourceServicesApi;\n import com.strandls.resource.pojo.Resource;\n import com.strandls.resource.pojo.ResourceData;\n+import com.strandls.resource.pojo.License;\n import com.strandls.resource.pojo.ResourceRating;\n import com.strandls.taxonomy.controllers.TaxonomyServicesApi;\n import com.strandls.taxonomy.pojo.SpeciesGroup;\n@@ -185,6 +202,21 @@\n \t@Inject\n \tprivate ObservationDownloadLogDAO downloadLogDao;\n \n+\t@Inject\n+\tprivate DataTableHelper dataTableHelper;\n+\n+\t@Inject\n+\tprivate DataTableDAO dataTableDAO;\n+\n+\t@Inject\n+\tprivate LicenseControllerApi licenseControllerApi;\n+\n+\t@Inject\n+\tprivate ObservationBulkMapperHelper observationBulkMapperHelper;\n+\n+\t@Inject\n+\tprivate UploadApi fileUploadApi;\n+\n \t@Override\n \tpublic ShowData findById(Long id) {\n \n@@ -1199,7 +1231,7 @@ private void updateGeoPrivacy(List<Observation> observationList) {\n \t\t\ttry {\n \t\t\t\tproperties.load(in);\n \t\t\t} catch (IOException e) {\n-\t\t\t\te.printStackTrace();\n+\t\t\t\tlogger.error(e.getMessage());\n \t\t\t}\n \t\t\tString geoPrivacyTraitsValue = properties.getProperty(\"geoPrivacyValues\");\n \t\t\tin.close();\n@@ -1582,4 +1614,87 @@ public ObservationUserPageInfo observationIdentifiedInfo(Long userId, Long sGrou\n \t\t\t\tidentifiedSpeciesCount);\n \t\treturn result;\n \t}\n+\n+\t@Override\n+\tpublic void observationBulkUpload(HttpServletRequest request, ObservationBulkDTO observationBulkData) {\n+\t\tCommonProfile profile = AuthUtil.getProfileFromRequest(request);\n+\t\tLong userId = Long.parseLong(profile.getId());\n+\t\tDataTable dataTable = dataTableHelper.createDataTable(observationBulkData, userId);\n+\t\tdataTable = dataTableDAO.save(dataTable);\n+\n+\t\ttry (XSSFWorkbook workbook = new XSSFWorkbook(new File(observationBulkData.getFilename()))) {\n+\t\t\tList<TraitsValuePair> traitsList = traitService.getAllTraits();\n+\t\t\tList<UserGroupIbp> userGroupIbpList = userGroupService.getAllUserGroup();\n+\t\t\tList<License> licenseList = licenseControllerApi.getAllLicenses();\n+\t\t\tXSSFSheet sheet = workbook.getSheetAt(0);\n+\t\t\tIterator<Row> rows = sheet.iterator();\n+\t\t\tList<Long> observationIds = new ArrayList<Long>();\n+\t\t\tFilesDTO filesDto = new FilesDTO();\n+\t\t\tfilesDto.setFolder(\"observations\");\n+\t\t\tfilesDto.setModule(\"observation\");\n+\t\t\tMap<String, String> myImageUpload = headers\n+\t\t\t\t\t.addFileUploadHeader(fileUploadApi, request.getHeader(HttpHeaders.AUTHORIZATION))\n+\t\t\t\t\t.getAllFilePathsByUser(filesDto).entrySet().stream()\n+\t\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, e -> (String) e.getValue()));\n+\t\t\t;\n+\n+\t\t\tRow dataRow;\n+\t\t\t// skip header\n+\t\t\trows.next();\n+\n+\t\t\twhile (rows.hasNext()) {\n+\t\t\t\tdataRow = rows.next();\n+\t\t\t\tif (dataRow.getCell(0, MissingCellPolicy.RETURN_BLANK_AS_NULL) != null) {\n+\t\t\t\t\tObservationUtilityFunctions obUtil = new ObservationUtilityFunctions();\n+\t\t\t\t\tObservationBulkData data = new ObservationBulkData(observationBulkData.getColumns(), dataRow,\n+\t\t\t\t\t\t\trequest, dataTable, getAllSpeciesGroup(), traitsList, userGroupIbpList, licenseList);\n+\n+\t\t\t\t\tLong obsId = obUtil.createObservationAndMappings(observationBulkMapperHelper, observationDao, data,\n+\t\t\t\t\t\t\tmyImageUpload);\n+\t\t\t\t\tobservationIds.add(obsId);\n+\t\t\t\t\tif (observationIds.size() >= 300) {\n+\t\t\t\t\t\tesUpdate.esBulkUpload(observationIds);\n+\t\t\t\t\t\tESBulkUploadThread updateThread = new ESBulkUploadThread(esUpdate, observationIds);\n+\t\t\t\t\t\tThread thread = new Thread(updateThread);\n+\t\t\t\t\t\tthread.start();\n+\t\t\t\t\t\tobservationIds.clear();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t}\n+\n+\t\t\tif (!rows.hasNext() && !observationIds.isEmpty()) {\n+\t\t\t\tESBulkUploadThread updateThread = new ESBulkUploadThread(esUpdate, observationIds);\n+\t\t\t\tThread thread = new Thread(updateThread);\n+\t\t\t\tthread.start();\n+\t\t\t}\n+//\t\t\tfinal int THREAD_COUNT = 5;\n+//\t\t\tBlockingQueue<ObservationBulkData> queue = new ArrayBlockingQueue<>(100);\n+//\t\t\tExecutorService service = Executors.newFixedThreadPool(THREAD_COUNT);\n+//\t\t\tfor (int i = 0; i < THREAD_COUNT - 1; i++) {\n+//\t\t\t\t//consumer 4\n+//\t\t\t\tservice.submit(new ObservationTask(queue, observationBulkMapperHelper, observationDao));\n+//\t\t\t}\n+//\n+//\t\t\t//publisher 1\n+//\t\t\tservice.submit(new FileTask(queue, observationBulkData.getColumns(), observationBulkData.getFilename(),\n+//\t\t\t\t\trequest, dataTable, getAllSpeciesGroup(), traitsList,\n+//\t\t\t\t\tuserGroupIbpList, licenseList))\n+//\t\t\t\t\t.get();\n+//\t\t\tservice.shutdownNow();\n+//\t\t\tservice.awaitTermination(6, TimeUnit.HOURS);\n+\n+//\t\t\tBlockingQueue<Long> observationQueue = new ArrayBlockingQueue<>(200);\n+//\t\t\tExecutorService elasticService = Executors.newFixedThreadPool(THREAD_COUNT);\n+//\t\t\tfor (int i = 0; i < THREAD_COUNT - 1; i++) {\n+//\t\t\t\telasticService.submit(new ElasticThread(observationQueue, esUpdate));\n+//\t\t\t}\n+//\n+//\t\t\telasticService.submit(new ObservationThread(observationQueue, observationDao, dataTable.getId())).get();\n+//\t\t\telasticService.shutdownNow();\n+//\t\t\telasticService.awaitTermination(6, TimeUnit.HOURS);\n+\t\t} catch (Exception ex) {\n+\t\t\tlogger.error(ex.getMessage());\n+\t\t}\n+\t}\n }"
  },
  {
    "sha": "c65a0278a41932478371e30da9c3908ace33fc6e",
    "filename": "src/main/java/com/strandls/observation/service/ObservationService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/ObservationService.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/service/ObservationService.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/service/ObservationService.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -5,9 +5,11 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n \n import javax.servlet.http.HttpServletRequest;\n \n+import com.strandls.observation.dto.ObservationBulkDTO;\n import org.pac4j.core.profile.CommonProfile;\n \n import com.strandls.activity.pojo.Activity;\n@@ -152,4 +154,6 @@ public ObservationListElasticMapping getObservationPublicationGrade(String index\n \n \tpublic ObservationUserPageInfo observationIdentifiedInfo(Long userId, Long sGroupId, Boolean hasMedia, Long offset);\n \n+\tpublic void observationBulkUpload(HttpServletRequest request, ObservationBulkDTO observationBulkData) throws InterruptedException, ExecutionException;\n+\n }"
  },
  {
    "sha": "b4f5b82dc35cb0e89aeb6f6bc576adb4d8da675d",
    "filename": "src/main/java/com/strandls/observation/util/ElasticThread.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/util/ElasticThread.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/util/ElasticThread.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/util/ElasticThread.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,51 @@\n+package com.strandls.observation.util;\n+\n+import com.strandls.observation.es.util.ESCreateThread;\n+import com.strandls.observation.es.util.ESUpdate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+public class ElasticThread implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ElasticThread.class);\n+    private final BlockingQueue<Long> queue;\n+    private final ESUpdate esUpdate;\n+\n+    public ElasticThread(BlockingQueue<Long> queue, ESUpdate esUpdate) {\n+        this.queue = queue;\n+        this.esUpdate = esUpdate;\n+    }\n+\n+    @Override\n+    public void run() {\n+        Long id;\n+        while (true) {\n+            try {\n+                id = queue.take();\n+                performElasticUpdate(id);\n+            } catch (Exception ex) {\n+                break;\n+            }\n+        }\n+        while ((id = queue.poll()) != null) {\n+            performElasticUpdate(id);\n+        }\n+    }\n+\n+    public void performElasticUpdate(Long id) {\n+        try {\n+            ExecutorService executorService = Executors.newSingleThreadExecutor();\n+            ESCreateThread esThread = new ESCreateThread(esUpdate, id.toString());\n+            executorService.submit(esThread).get();\n+            executorService.shutdownNow();\n+            executorService.awaitTermination(5, TimeUnit.MINUTES);\n+        } catch (Exception ex) {\n+            \n+            logger.error(ex.getMessage());\n+        }\n+    }\n+}"
  },
  {
    "sha": "b83e9bd7b8a996cccd7da5c03f5c069b8d1b8310",
    "filename": "src/main/java/com/strandls/observation/util/FileTask.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/util/FileTask.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/util/FileTask.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/util/FileTask.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,65 @@\n+package com.strandls.observation.util;\n+\n+import com.strandls.observation.pojo.DataTable;\n+import com.strandls.observation.pojo.ObservationBulkData;\n+import com.strandls.resource.pojo.License;\n+import com.strandls.taxonomy.pojo.SpeciesGroup;\n+import com.strandls.traits.pojo.TraitsValuePair;\n+import com.strandls.userGroup.pojo.UserGroupIbp;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.xssf.usermodel.XSSFSheet;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.File;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BlockingQueue;\n+\n+public class FileTask implements Runnable {\n+    private final BlockingQueue<ObservationBulkData> queue;\n+    private final String filePath;\n+    private final Map<String, Integer> fieldMapping;\n+    private final HttpServletRequest request;\n+    private final DataTable dataTable;\n+    private final List<SpeciesGroup> speciesGroupList;\n+    private final List<TraitsValuePair> pairs;\n+    private final List<UserGroupIbp> userGroupsList;\n+    private final List<License> licenses;\n+\n+    public FileTask(BlockingQueue<ObservationBulkData> queue, Map<String, Integer> fieldMapping, String filePath,\n+                    HttpServletRequest request, DataTable dataTable, List<SpeciesGroup> speciesGroupList,\n+                    List<TraitsValuePair> pairs, List<UserGroupIbp> userGroupsList, List<License> licenses) {\n+        this.queue = queue;\n+        this.fieldMapping = fieldMapping;\n+        this.filePath = filePath;\n+        this.request = request;\n+        this.dataTable = dataTable;\n+        this.speciesGroupList = speciesGroupList;\n+        this.pairs = pairs;\n+        this.userGroupsList = userGroupsList;\n+        this.licenses = licenses;\n+    }\n+\n+    @Override\n+    public void run() {\n+        try (XSSFWorkbook workbook = new XSSFWorkbook(new File(filePath))) {\n+            XSSFSheet sheet = workbook.getSheetAt(0);\n+            Iterator<Row> rows = sheet.rowIterator();\n+\n+            Row dataRow;\n+            // skip header\n+            rows.next();\n+\n+            while (rows.hasNext()) {\n+                dataRow = rows.next();\n+                ObservationBulkData observationBulkData = new ObservationBulkData(fieldMapping, dataRow,\n+                        request, dataTable, speciesGroupList, pairs, userGroupsList, licenses);\n+                queue.put(observationBulkData);\n+            }\n+        } catch (Exception ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+}"
  },
  {
    "sha": "fa530a972e184670d1754f4c63653b7a445074a9",
    "filename": "src/main/java/com/strandls/observation/util/ObservationThread.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/util/ObservationThread.java",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/java/com/strandls/observation/util/ObservationThread.java",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/java/com/strandls/observation/util/ObservationThread.java?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -0,0 +1,42 @@\n+package com.strandls.observation.util;\n+\n+import com.strandls.observation.dao.ObservationDAO;\n+import com.strandls.observation.pojo.Observation;\n+\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+\n+public class ObservationThread implements Runnable {\n+\n+    private final Long datatableId;\n+    private final BlockingQueue<Long> queue;\n+    private final ObservationDAO observationDAO;\n+\n+    public ObservationThread(BlockingQueue<Long> queue, ObservationDAO observationDAO, Long datatableId) {\n+        this.queue = queue;\n+        this.observationDAO = observationDAO;\n+        this.datatableId = datatableId;\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            List<Observation> observationList = observationDAO.getObservationCountForDatatable(datatableId);\n+            String ObservationIds = null;\n+            \n+            \n+            for (Observation observation: observationList) {\n+            \tObservationIds = ObservationIds + \",\"+observation.getId().toString();\n+            \tif(ObservationIds.length() >= 100 ) {\n+            \t\t//call BulkUpload function as a thread;\n+            \t\t//clear observation;\n+            \t}\n+            \t\n+                queue.put(observation.getId());\n+            }\n+        } catch (Exception ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+    \n+}"
  },
  {
    "sha": "7966415960f7d1479b59f46e85406731a5ece578",
    "filename": "src/main/webapp/WEB-INF/classes/hibernate.cfg.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/strandls/biodiv-observation/blob/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/webapp/WEB-INF/classes/hibernate.cfg.xml",
    "raw_url": "https://github.com/strandls/biodiv-observation/raw/3a6c270cbffb2734e6d07c2a66b5de826338d8ab/src/main/webapp/WEB-INF/classes/hibernate.cfg.xml",
    "contents_url": "https://api.github.com/repos/strandls/biodiv-observation/contents/src/main/webapp/WEB-INF/classes/hibernate.cfg.xml?ref=3a6c270cbffb2734e6d07c2a66b5de826338d8ab",
    "patch": "@@ -37,5 +37,7 @@\n \t\t<mapping class=\"com.strandls.observation.pojo.Recommendation\" />\n \t\t<mapping\n \t\t\tclass=\"com.strandls.observation.pojo.RecommendationVote\" />\n+\t\t<mapping class=\"com.strandls.observation.pojo.DataTable\"/>\n+\t\t<mapping class=\"com.strandls.observation.pojo.Dataset\"/>\n \t</session-factory>\n </hibernate-configuration>\n\\ No newline at end of file"
  }
]
