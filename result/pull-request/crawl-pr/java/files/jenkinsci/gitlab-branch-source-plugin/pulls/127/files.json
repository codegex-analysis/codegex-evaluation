[
  {
    "sha": "375e7c00bea0527996969dc806307c4d0e19e1dc",
    "filename": "src/main/java/io/jenkins/plugins/gitlabbranchsource/Cause/GitLabMergeRequestNoteData.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/blob/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/Cause/GitLabMergeRequestNoteData.java",
    "raw_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/raw/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/Cause/GitLabMergeRequestNoteData.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/gitlab-branch-source-plugin/contents/src/main/java/io/jenkins/plugins/gitlabbranchsource/Cause/GitLabMergeRequestNoteData.java?ref=e618502fa17d04a433ea050cfb397866a65b4a40",
    "patch": "@@ -0,0 +1,55 @@\n+package io.jenkins.plugins.gitlabbranchsource.Cause;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.gitlab4j.api.webhook.NoteEvent;\n+import org.kohsuke.stapler.export.Exported;\n+import org.kohsuke.stapler.export.ExportedBean;\n+\n+import static io.jenkins.plugins.gitlabbranchsource.Cause.GitLabCauseUtils.defaultIntString;\n+import static io.jenkins.plugins.gitlabbranchsource.Cause.GitLabCauseUtils.defaultVisibilityString;\n+import static org.apache.commons.lang.StringUtils.defaultString;\n+\n+@ExportedBean\n+public class GitLabMergeRequestNoteData {\n+\n+    private final Map<String, String> variables = new HashMap<>();\n+\n+    public GitLabMergeRequestNoteData(NoteEvent noteEvent) {\n+        this.variables.put(\"GITLAB_OBJECT_KIND\",  defaultString(NoteEvent.OBJECT_KIND));\n+        this.variables.put(\"GITLAB_COMMENT_TRIGGER\",  defaultString(noteEvent.getObjectAttributes().getNote()));\n+        this.variables.put(\"GITLAB_USER_ID\", defaultIntString(noteEvent.getUser().getId()));\n+        this.variables.put(\"GITLAB_PROJECT_ID\", defaultIntString(noteEvent.getProjectId()));\n+        this.variables.put(\"GITLAB_PROJECT_ID_2\", defaultIntString(noteEvent.getProject().getId()));\n+        this.variables.put(\"GITLAB_PROJECT_NAME\", defaultString(noteEvent.getProject().getName()));\n+        this.variables.put(\"GITLAB_PROJECT_DESCRIPTION\", defaultString(noteEvent.getProject().getDescription()));\n+        this.variables.put(\"GITLAB_PROJECT_WEB_URL\", defaultString(noteEvent.getProject().getWebUrl()));\n+        this.variables.put(\"GITLAB_PROJECT_AVATAR_URL\", defaultString(noteEvent.getProject().getAvatarUrl()));\n+        this.variables.put(\"GITLAB_PROJECT_GIT_SSH_URL\", defaultString(noteEvent.getProject().getGitSshUrl()));\n+        this.variables.put(\"GITLAB_PROJECT_GIT_HTTP_URL\", defaultString(noteEvent.getProject().getGitHttpUrl()));\n+        this.variables.put(\"GITLAB_PROJECT_NAMESPACE\", defaultString(noteEvent.getProject().getNamespace()));\n+        this.variables.put(\"GITLAB_PROJECT_VISIBILITY_LEVEL\", defaultVisibilityString(noteEvent.getProject().getVisibilityLevel()));\n+        this.variables.put(\"GITLAB_PROJECT_PATH_NAMESPACE\", defaultString(noteEvent.getProject().getPathWithNamespace()));\n+        this.variables.put(\"GITLAB_PROJECT_CI_CONFIG_PATH\", defaultString(noteEvent.getProject().getCiConfigPath()));\n+        this.variables.put(\"GITLAB_PROJECT_DEFAULT_BRANCH\", defaultString(noteEvent.getProject().getDefaultBranch()));\n+        this.variables.put(\"GITLAB_PROJECT_HOMEPAGE\", defaultString(noteEvent.getProject().getHomepage()));\n+        this.variables.put(\"GITLAB_PROJECT_URL\", defaultString(noteEvent.getProject().getUrl()));\n+        this.variables.put(\"GITLAB_PROJECT_SSH_URL\", defaultString(noteEvent.getProject().getSshUrl()));\n+        this.variables.put(\"GITLAB_PROJECT_HTTP_URL\", defaultString(noteEvent.getProject().getHttpUrl()));\n+        this.variables.put(\"GITLAB_REPO_NAME\", defaultString(noteEvent.getRepository().getName()));\n+        this.variables.put(\"GITLAB_REPO_URL\", defaultString(noteEvent.getRepository().getUrl()));\n+        this.variables.put(\"GITLAB_REPO_DESCRIPTION\", defaultString(noteEvent.getRepository().getDescription()));\n+        this.variables.put(\"GITLAB_REPO_HOMEPAGE\", defaultString(noteEvent.getRepository().getHomepage()));\n+        this.variables.put(\"GITLAB_REPO_GIT_SSH_URL\", defaultString(noteEvent.getRepository().getGit_ssh_url()));\n+        this.variables.put(\"GITLAB_REPO_GIT_HTTP_URL\", defaultString(noteEvent.getRepository().getGit_http_url()));\n+        this.variables.put(\"GITLAB_REPO_VISIBILITY_LEVEL\", defaultVisibilityString(noteEvent.getRepository().getVisibility_level()));\n+        this.variables.put(\"GITLAB_REQUEST_URL\", defaultString(noteEvent.getRequestUrl()));\n+        this.variables.put(\"GITLAB_REQUEST_STRING\", defaultString(noteEvent.getRequestQueryString()));\n+        this.variables.put(\"GITLAB_REQUEST_TOKEN\", defaultString(noteEvent.getRequestSecretToken()));\n+    }\n+\n+    @Exported\n+    public Map<String, String> getBuildVariables() {\n+        return variables;\n+    }\n+}"
  },
  {
    "sha": "17b3809e2cff4baf15e1627d8713a63a484ebec9",
    "filename": "src/main/java/io/jenkins/plugins/gitlabbranchsource/Environment/GitLabWebHookEnvironmentContributor.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/blob/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/Environment/GitLabWebHookEnvironmentContributor.java",
    "raw_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/raw/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/Environment/GitLabWebHookEnvironmentContributor.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/gitlab-branch-source-plugin/contents/src/main/java/io/jenkins/plugins/gitlabbranchsource/Environment/GitLabWebHookEnvironmentContributor.java?ref=e618502fa17d04a433ea050cfb397866a65b4a40",
    "patch": "@@ -5,7 +5,9 @@\n import hudson.model.EnvironmentContributor;\n import hudson.model.Run;\n import hudson.model.TaskListener;\n+import io.jenkins.plugins.gitlabbranchsource.GitLabMergeRequestCommentCause;\n import io.jenkins.plugins.gitlabbranchsource.GitLabWebHookCause;\n+import java.util.Map;\n import javax.annotation.Nonnull;\n import org.jenkinsci.plugins.workflow.job.WorkflowRun;\n \n@@ -15,10 +17,15 @@\n     @Override\n     public void buildEnvironmentFor(@Nonnull Run r, @Nonnull EnvVars envs, @Nonnull TaskListener listener) {\n         GitLabWebHookCause gitLabWebHookCause = null;\n+        GitLabMergeRequestCommentCause gitLabMergeRequestCommentCause = null;\n+\n         if (r instanceof WorkflowRun) {\n             gitLabWebHookCause = (GitLabWebHookCause) r.getCause(GitLabWebHookCause.class);\n+            gitLabMergeRequestCommentCause = (GitLabMergeRequestCommentCause)\n+                r.getCause(GitLabMergeRequestCommentCause.class);\n         }\n         envs.override(\"GITLAB_OBJECT_KIND\", \"none\");\n+\n         if (gitLabWebHookCause != null) {\n             if(gitLabWebHookCause.getGitLabPushCauseData() != null) {\n                 envs.overrideAll(gitLabWebHookCause.getGitLabPushCauseData().getBuildVariables());\n@@ -28,5 +35,17 @@ public void buildEnvironmentFor(@Nonnull Run r, @Nonnull EnvVars envs, @Nonnull\n                 envs.overrideAll(gitLabWebHookCause.getGitLabTagPushCauseData().getBuildVariables());\n             }\n         }\n+\n+        // There is GitLabMergeRequestCommentCause so we have to do extra check\n+        // for processing these variables. If someone wants to refactor it - look at\n+        // inheritance hierarchy of GitLabWebHookCause and GitLabMergeRequestCommentCause\n+        // TODO combine GitLabWebHookCause and GitLabMergeRequestCommentCause to refactor this class properly\n+        if (gitLabMergeRequestCommentCause != null) {\n+            if (gitLabMergeRequestCommentCause.getGitLabMergeRequestNoteData() != null) {\n+                Map<String, String> buildVariables = gitLabMergeRequestCommentCause\n+                    .getGitLabMergeRequestNoteData().getBuildVariables();\n+                envs.overrideAll(buildVariables);\n+            }\n+        }\n     }\n }"
  },
  {
    "sha": "a15425031f44797f894d7d3505708973ad1cb21a",
    "filename": "src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabMergeRequestCommentCause.java",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/blob/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabMergeRequestCommentCause.java",
    "raw_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/raw/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabMergeRequestCommentCause.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/gitlab-branch-source-plugin/contents/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabMergeRequestCommentCause.java?ref=e618502fa17d04a433ea050cfb397866a65b4a40",
    "patch": "@@ -1,18 +1,22 @@\n package io.jenkins.plugins.gitlabbranchsource;\n \n import hudson.model.Cause;\n+import io.jenkins.plugins.gitlabbranchsource.Cause.GitLabMergeRequestNoteData;\n+import org.gitlab4j.api.webhook.NoteEvent;\n \n public final class GitLabMergeRequestCommentCause extends Cause {\n \n     private final String commentUrl;\n+    private final GitLabMergeRequestNoteData gitLabMergeRequestNoteData;\n \n     /**\n      * Constructor.\n      *\n      * @param commentUrl the URL for the GitLab comment\n      */\n-    public GitLabMergeRequestCommentCause(String commentUrl) {\n+    public GitLabMergeRequestCommentCause(String commentUrl, NoteEvent noteEvent) {\n         this.commentUrl = commentUrl;\n+        this.gitLabMergeRequestNoteData = new GitLabMergeRequestNoteData(noteEvent);\n     }\n \n     @Override\n@@ -28,4 +32,12 @@ public String getShortDescription() {\n     public String getCommentUrl() {\n         return commentUrl;\n     }\n+\n+    /**\n+     * Retrieves the cause data\n+     * @return cause data\n+     */\n+    public GitLabMergeRequestNoteData getGitLabMergeRequestNoteData() {\n+        return gitLabMergeRequestNoteData;\n+    }\n }"
  },
  {
    "sha": "4f52611b5c04a70486940c7d837c7de1198ea656",
    "filename": "src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabMergeRequestCommentTrigger.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/blob/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabMergeRequestCommentTrigger.java",
    "raw_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/raw/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabMergeRequestCommentTrigger.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/gitlab-branch-source-plugin/contents/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabMergeRequestCommentTrigger.java?ref=e618502fa17d04a433ea050cfb397866a65b4a40",
    "patch": "@@ -64,7 +64,7 @@ public void isMatch() {\n                                         .matches()) {\n                                         ParameterizedJobMixIn.scheduleBuild2(job, 0,\n                                             new CauseAction(\n-                                                new GitLabMergeRequestCommentCause(commentUrl)));\n+                                                new GitLabMergeRequestCommentCause(commentUrl, getPayload())));\n                                         LOGGER.log(Level.INFO,\n                                             \"Triggered build for {0} due to MR comment on {1}\",\n                                             new Object[]{"
  },
  {
    "sha": "19f2eae72890a4479deb3b79c34c7d3605b637fc",
    "filename": "src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabWebHookListener.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/blob/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabWebHookListener.java",
    "raw_url": "https://github.com/jenkinsci/gitlab-branch-source-plugin/raw/e618502fa17d04a433ea050cfb397866a65b4a40/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabWebHookListener.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/gitlab-branch-source-plugin/contents/src/main/java/io/jenkins/plugins/gitlabbranchsource/GitLabWebHookListener.java?ref=e618502fa17d04a433ea050cfb397866a65b4a40",
    "patch": "@@ -5,6 +5,7 @@\n import jenkins.scm.api.SCMHeadEvent;\n import org.gitlab4j.api.webhook.MergeRequestEvent;\n import org.gitlab4j.api.webhook.NoteEvent;\n+import org.gitlab4j.api.webhook.NoteEvent.NoteableType;\n import org.gitlab4j.api.webhook.PushEvent;\n import org.gitlab4j.api.webhook.TagPushEvent;\n import org.gitlab4j.api.webhook.WebHookListener;\n@@ -22,8 +23,12 @@ public GitLabWebHookListener(String origin) {\n     @Override\n     public void onNoteEvent(NoteEvent noteEvent) {\n         LOGGER.log(Level.FINE, noteEvent.toString());\n-        GitLabMergeRequestCommentTrigger trigger = new GitLabMergeRequestCommentTrigger(noteEvent);\n-        AbstractGitLabJobTrigger.fireNow(trigger);\n+\n+        // Add additional checks to process different noteable types\n+        if (noteEvent.getObjectAttributes().getNoteableType() == NoteableType.MERGE_REQUEST) {\n+            GitLabMergeRequestCommentTrigger trigger = new GitLabMergeRequestCommentTrigger(noteEvent);\n+            AbstractGitLabJobTrigger.fireNow(trigger);\n+        }\n     }\n \n     @Override"
  }
]
