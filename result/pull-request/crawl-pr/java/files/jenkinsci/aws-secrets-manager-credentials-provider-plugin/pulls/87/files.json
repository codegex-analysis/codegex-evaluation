[
  {
    "sha": "179833083bc5c090fd9c3b5ffe3f843ab8dae5a0",
    "filename": "docs/README.md",
    "status": "modified",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/blob/234d9845390aafabdcb383c13724e0f668da77bb/docs/README.md",
    "raw_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/raw/234d9845390aafabdcb383c13724e0f668da77bb/docs/README.md",
    "contents_url": "https://api.github.com/repos/jenkinsci/aws-secrets-manager-credentials-provider-plugin/contents/docs/README.md?ref=234d9845390aafabdcb383c13724e0f668da77bb",
    "patch": "@@ -272,6 +272,56 @@ node {\n }\n ```\n \n+#### Github App Credentials (Optional)\n+\n+Requires *git-source-branch* plugin to create this credential type\n+\n+A github *private key*, with a *github app id*.\n+\n+- Value: *content*\n+- Tags:\n+  - `jenkins:credentials:type` = `githubApp`\n+  - `jenkins:credentials:appid` = *Github App Id*\n+\n+The private key format used is PKCS#8 (starts with `-----BEGIN PRIVATE KEY-----`).\n+\n+##### Example\n+\n+AWS CLI:\n+\n+```bash\n+openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in pkcs1.key -out pkcs8.key\n+aws secretsmanager create-secret --name 'githubapp' --secret-string 'file://pkcs8.key' --tags 'Key=jenkins:credentials:type,Value=githubApp' 'Key=jenkins:credentials:appid,Value=11111' --description 'Github App Credentials'\n+```\n+\n+Declarative Pipeline:\n+\n+```groovy\n+pipeline {\n+    agent any\n+    environment {\n+        GITHUB_APP = credentials('githubapp')\n+    }\n+    stages {\n+        stage('Example') {\n+            steps {\n+              echo 'Hello world'\n+            }\n+        }\n+    }\n+}\n+```\n+\n+Scripted Pipeline:\n+\n+```groovy\n+node {\n+    withCredentials([usernamePassword(credentialsId: 'githubapp', usernameVariable: 'GITHUBAPP_USR', passwordVariable: 'GITHUBAPP_PSW')]) {\n+        echo 'Hello world'\n+    }\n+}\n+```\n+\n ### SecretSource\n \n The plugin allows JCasC to interpolate string secrets from Secrets Manager."
  },
  {
    "sha": "1d5889ed2dc25c2c80846e4c7e307a00f8001af7",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/blob/234d9845390aafabdcb383c13724e0f668da77bb/pom.xml",
    "raw_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/raw/234d9845390aafabdcb383c13724e0f668da77bb/pom.xml",
    "contents_url": "https://api.github.com/repos/jenkinsci/aws-secrets-manager-credentials-provider-plugin/contents/pom.xml?ref=234d9845390aafabdcb383c13724e0f668da77bb",
    "patch": "@@ -105,6 +105,12 @@\n             <version>3.19.0</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jenkins-ci.plugins</groupId>\n+            <artifactId>github-branch-source</artifactId>\n+            <version>2.9.3</version>\n+            <optional>true</optional>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "3a4a3f1291852521d3078fe420b065569dfed953",
    "filename": "src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/CredentialsFactory.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/blob/234d9845390aafabdcb383c13724e0f668da77bb/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/CredentialsFactory.java",
    "raw_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/raw/234d9845390aafabdcb383c13724e0f668da77bb/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/CredentialsFactory.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/aws-secrets-manager-credentials-provider-plugin/contents/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/CredentialsFactory.java?ref=234d9845390aafabdcb383c13724e0f668da77bb",
    "patch": "@@ -12,6 +12,7 @@\n import io.jenkins.plugins.credentials.secretsmanager.Messages;\n import io.jenkins.plugins.credentials.secretsmanager.factory.certificate.AwsCertificateCredentials;\n import io.jenkins.plugins.credentials.secretsmanager.factory.file.AwsFileCredentials;\n+import io.jenkins.plugins.credentials.secretsmanager.factory.git_app.GitCredentialFactory;\n import io.jenkins.plugins.credentials.secretsmanager.factory.ssh_user_private_key.AwsSshUserPrivateKey;\n import io.jenkins.plugins.credentials.secretsmanager.factory.string.AwsStringCredentials;\n import io.jenkins.plugins.credentials.secretsmanager.factory.username_password.AwsUsernamePasswordCredentials;\n@@ -40,6 +41,7 @@ private CredentialsFactory() {\n         final String type = tags.getOrDefault(Tags.type, \"\");\n         final String username = tags.getOrDefault(Tags.username, \"\");\n         final String filename = tags.getOrDefault(Tags.filename, name);\n+        final String appId = tags.getOrDefault(Tags.appid, \"\");\n \n         switch (type) {\n             case Type.string:\n@@ -52,6 +54,8 @@ private CredentialsFactory() {\n                 return Optional.of(new AwsCertificateCredentials(name, description, new SecretBytesSupplier(client, name)));\n             case Type.file:\n                 return Optional.of(new AwsFileCredentials(name, description, filename, new SecretBytesSupplier(client, name)));\n+            case Type.githubApp:\n+                return new GitCredentialFactory().createCredential(name, description, appId, Secret.fromString(new StringSupplier(client, name).get()));\n             default:\n                 return Optional.empty();\n         }"
  },
  {
    "sha": "bae8fac22397f4cd82a35dc4915c7d0740143ced",
    "filename": "src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/Tags.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/blob/234d9845390aafabdcb383c13724e0f668da77bb/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/Tags.java",
    "raw_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/raw/234d9845390aafabdcb383c13724e0f668da77bb/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/Tags.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/aws-secrets-manager-credentials-provider-plugin/contents/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/Tags.java?ref=234d9845390aafabdcb383c13724e0f668da77bb",
    "patch": "@@ -9,6 +9,7 @@\n     public static final String filename = namespace + \"filename\";\n     public static final String type = namespace + \"type\";\n     public static final String username = namespace + \"username\";\n+    public static final String appid = namespace + \"appid\";\n \n     private Tags() {\n "
  },
  {
    "sha": "e461fc390bb2272477d987ce27a0864a694fd0d1",
    "filename": "src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/Type.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/blob/234d9845390aafabdcb383c13724e0f668da77bb/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/Type.java",
    "raw_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/raw/234d9845390aafabdcb383c13724e0f668da77bb/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/Type.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/aws-secrets-manager-credentials-provider-plugin/contents/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/Type.java?ref=234d9845390aafabdcb383c13724e0f668da77bb",
    "patch": "@@ -9,6 +9,7 @@\n     public static final String usernamePassword = \"usernamePassword\";\n     public static final String sshUserPrivateKey = \"sshUserPrivateKey\";\n     public static final String string = \"string\";\n+    public static final String githubApp = \"githubApp\";\n \n     private Type() {\n "
  },
  {
    "sha": "fe81f9f11b2de9d567e7ae1584eb920ce9e1156b",
    "filename": "src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/git_app/GitCredentialFactory.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/blob/234d9845390aafabdcb383c13724e0f668da77bb/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/git_app/GitCredentialFactory.java",
    "raw_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/raw/234d9845390aafabdcb383c13724e0f668da77bb/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/git_app/GitCredentialFactory.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/aws-secrets-manager-credentials-provider-plugin/contents/src/main/java/io/jenkins/plugins/credentials/secretsmanager/factory/git_app/GitCredentialFactory.java?ref=234d9845390aafabdcb383c13724e0f668da77bb",
    "patch": "@@ -0,0 +1,28 @@\n+package io.jenkins.plugins.credentials.secretsmanager.factory.git_app;\r\n+\r\n+import com.cloudbees.plugins.credentials.CredentialsScope;\r\n+import com.cloudbees.plugins.credentials.common.StandardCredentials;\r\n+import hudson.Extension;\r\n+import hudson.util.Secret;\r\n+import io.jenkins.plugins.credentials.secretsmanager.factory.Type;\r\n+import jenkins.model.Jenkins;\r\n+import org.jenkinsci.plugins.github_branch_source.GitHubAppCredentials;\r\n+\r\n+import java.util.Optional;\r\n+import java.util.logging.Level;\r\n+import java.util.logging.Logger;\r\n+\r\n+@Extension(optional = true)\r\n+public class GitCredentialFactory {\r\n+    private static final Logger LOG = Logger.getLogger(GitCredentialFactory.class.getName());\r\n+\r\n+    public Optional<StandardCredentials> createCredential(String name, String description, String appId, Secret secret) {\r\n+        if (Jenkins.get().getPlugin(\"github-branch-source\") == null) {\r\n+            LOG.warning(\"Plugin not installed: github-branch-source. Cannot create type: \" + Type.githubApp);\r\n+            return Optional.empty();\r\n+        }\r\n+\r\n+        return Optional.of(new GitHubAppCredentials(CredentialsScope.GLOBAL, name, description, appId, secret));\r\n+    }\r\n+}\r\n+\r"
  },
  {
    "sha": "a144870965d27652c1ec265fb6373c720872b1ef",
    "filename": "src/test/java/io/jenkins/plugins/credentials/secretsmanager/GithubAppCredentialsIT.java",
    "status": "added",
    "additions": 196,
    "deletions": 0,
    "changes": 196,
    "blob_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/blob/234d9845390aafabdcb383c13724e0f668da77bb/src/test/java/io/jenkins/plugins/credentials/secretsmanager/GithubAppCredentialsIT.java",
    "raw_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/raw/234d9845390aafabdcb383c13724e0f668da77bb/src/test/java/io/jenkins/plugins/credentials/secretsmanager/GithubAppCredentialsIT.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/aws-secrets-manager-credentials-provider-plugin/contents/src/test/java/io/jenkins/plugins/credentials/secretsmanager/GithubAppCredentialsIT.java?ref=234d9845390aafabdcb383c13724e0f668da77bb",
    "patch": "@@ -0,0 +1,196 @@\n+package io.jenkins.plugins.credentials.secretsmanager;\r\n+\r\n+import com.amazonaws.services.secretsmanager.model.*;\r\n+import com.cloudbees.plugins.credentials.CredentialsScope;\r\n+import com.cloudbees.plugins.credentials.common.StandardCredentials;\r\n+import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;\r\n+import hudson.util.ListBoxModel;\r\n+import hudson.util.Secret;\r\n+import io.jenkins.plugins.casc.misc.ConfiguredWithCode;\r\n+import io.jenkins.plugins.credentials.secretsmanager.factory.Type;\r\n+import io.jenkins.plugins.credentials.secretsmanager.util.*;\r\n+import org.jenkinsci.plugins.github_branch_source.GitHubAppCredentials;\r\n+import org.jenkinsci.plugins.workflow.job.WorkflowRun;\r\n+import org.junit.BeforeClass;\r\n+import org.junit.Rule;\r\n+import org.junit.Test;\r\n+import org.junit.rules.RuleChain;\r\n+\r\n+import java.util.List;\r\n+import java.util.Optional;\r\n+\r\n+import static io.jenkins.plugins.credentials.secretsmanager.util.assertions.CustomAssertions.assertThat;\r\n+import static org.junit.Assume.assumeTrue;\r\n+\r\n+public class GithubAppCredentialsIT implements CredentialsTests {\r\n+\r\n+    private static final String APP_ID = \"11111\";\r\n+    private static final String PRIVATE_KEY = Crypto.newPrivateKey()\r\n+            .replace(\"-----BEGIN RSA PRIVATE KEY-----\", \"\")\r\n+            .replace(\"-----END RSA PRIVATE KEY-----\", \"\");;\r\n+\r\n+    public final MyJenkinsConfiguredWithCodeRule jenkins = new MyJenkinsConfiguredWithCodeRule();\r\n+    public final AWSSecretsManagerRule secretsManager = new AutoErasingAWSSecretsManagerRule();\r\n+\r\n+    @Rule\r\n+    public final RuleChain chain = RuleChain\r\n+            .outerRule(Rules.awsAccessKey(\"fake\", \"fake\"))\r\n+            .around(jenkins)\r\n+            .around(secretsManager);\r\n+\r\n+    @BeforeClass\r\n+    public static void GitHubAppCredentialsExists() {\r\n+        Optional<Class> clazz = getGithubAppCredentialClass();\r\n+        assumeTrue(clazz.isPresent());\r\n+    }\r\n+\r\n+    @Test\r\n+    @ConfiguredWithCode(value = \"/integration.yml\")\r\n+    public void shouldSupportListView() {\r\n+        // Given\r\n+        final CreateSecretResult foo = createGitHubAppCredentialSecret(APP_ID, PRIVATE_KEY);\r\n+\r\n+        // When\r\n+        final ListBoxModel list = jenkins.getCredentials().list(StandardCredentials.class);\r\n+\r\n+        // Then\r\n+        assertThat(list)\r\n+                .containsOption(APP_ID + \"/******\", foo.getName());\r\n+    }\r\n+\r\n+    @Test\r\n+    @ConfiguredWithCode(value = \"/integration.yml\")\r\n+    public void shouldHaveDescriptorIcon() {\r\n+        final CreateSecretResult foo = createGitHubAppCredentialSecret(APP_ID, PRIVATE_KEY);\r\n+        final GitHubAppCredentials ours = lookup(GitHubAppCredentials.class, foo.getName());\r\n+\r\n+        final GitHubAppCredentials theirs = new GitHubAppCredentials(CredentialsScope.GLOBAL, \"name\", \"description\", \"11111\", Secret.fromString(\"secret\"));\r\n+\r\n+        assertThat(ours)\r\n+                .hasSameDescriptorIconAs(theirs);\r\n+    }\r\n+\r\n+    //Cannot test binding because GitHubAppCredential requires connection to api.github.com\r\n+    public void shouldSupportWithCredentialsBinding() {\r\n+        // Given\r\n+        final CreateSecretResult foo = createGitHubAppCredentialSecret(APP_ID, PRIVATE_KEY);\r\n+\r\n+        ListSecretsRequest getSecretValueRequest = new ListSecretsRequest();\r\n+        ListSecretsResult list = secretsManager.getClient().listSecrets(getSecretValueRequest);\r\n+        // When\r\n+        final WorkflowRun run = runPipeline(\"\",\r\n+                \"withCredentials([usernamePassword(credentialsId: '\" + foo.getName() + \"', usernameVariable: 'USR', passwordVariable: 'PSW')]) {\",\r\n+                \"  echo \\\"Credential: {username: $USR, password: $PSW}\\\"\",\r\n+                \"}\");\r\n+\r\n+        // Then\r\n+        assertThat(run)\r\n+                .hasResult(hudson.model.Result.FAILURE)\r\n+                .hasLogContaining(\"java.io.FileNotFoundException: https://api.github.com/app\");\r\n+    }\r\n+\r\n+    //Cannot test binding because GitHubAppCredential requires connection to api.github.com\r\n+    public void shouldSupportEnvironmentBinding() {\r\n+        // Given\r\n+        final CreateSecretResult foo = createGitHubAppCredentialSecret(APP_ID, PRIVATE_KEY);\r\n+\r\n+        // When\r\n+        final WorkflowRun run = runPipeline(\"\",\r\n+                \"pipeline {\",\r\n+                \"  agent none\",\r\n+                \"  stages {\",\r\n+                \"    stage('Example') {\",\r\n+                \"      environment {\",\r\n+                \"        FOO = credentials('\" + foo.getName() + \"')\",\r\n+                \"      }\",\r\n+                \"      steps {\",\r\n+                \"        echo \\\"{variable: $FOO, username: $FOO_USR, password: $FOO_PSW}\\\"\",\r\n+                \"      }\",\r\n+                \"    }\",\r\n+                \"  }\",\r\n+                \"}\");\r\n+\r\n+        // Then\r\n+        assertThat(run)\r\n+                .hasResult(hudson.model.Result.FAILURE)\r\n+                .hasLogContaining(\"java.io.FileNotFoundException: https://api.github.com/app\");\r\n+    }\r\n+\r\n+    @Test\r\n+    @ConfiguredWithCode(value = \"/integration.yml\")\r\n+    public void shouldSupportSnapshots() {\r\n+        // Given\r\n+        final CreateSecretResult foo = createGitHubAppCredentialSecret(APP_ID, PRIVATE_KEY);\r\n+        final GitHubAppCredentials before = jenkins.getCredentials().lookup(GitHubAppCredentials.class, foo.getName());\r\n+\r\n+        // When\r\n+        final GitHubAppCredentials after = CredentialSnapshots.snapshot(before);\r\n+\r\n+        // Then\r\n+        //Cannot test password because GitHubAppCredential requires connection to api.github.com\r\n+        assertThat(after)\r\n+                .hasUsername(before.getUsername())\r\n+                .hasId(before.getId());\r\n+    }\r\n+\r\n+    @Test\r\n+    @ConfiguredWithCode(value = \"/integration.yml\")\r\n+    public void shouldHaveId() {\r\n+        // Given\r\n+        final CreateSecretResult foo = createGitHubAppCredentialSecret(APP_ID, PRIVATE_KEY);\r\n+\r\n+        // When\r\n+        final GitHubAppCredentials credential =\r\n+                jenkins.getCredentials().lookup(GitHubAppCredentials.class, foo.getName());\r\n+\r\n+        // Then\r\n+        assertThat(credential)\r\n+                .hasId(foo.getName());\r\n+    }\r\n+\r\n+    @Test\r\n+    @ConfiguredWithCode(value = \"/integration.yml\")\r\n+    public void shouldHaveUsername() {\r\n+        // Given\r\n+        final CreateSecretResult foo = createGitHubAppCredentialSecret(APP_ID, PRIVATE_KEY);\r\n+\r\n+        // When\r\n+        final StandardUsernamePasswordCredentials credential =\r\n+                jenkins.getCredentials().lookup(GitHubAppCredentials.class, foo.getName());\r\n+\r\n+        // Then\r\n+        assertThat(credential)\r\n+                .hasUsername(APP_ID);\r\n+    }\r\n+\r\n+    private CreateSecretResult createGitHubAppCredentialSecret(String appId, String privateKey) {\r\n+        final List<Tag> tags = Lists.of(\r\n+                AwsTags.type(Type.githubApp),\r\n+                AwsTags.appid(appId));\r\n+\r\n+        final CreateSecretRequest request = new CreateSecretRequest()\r\n+                .withName(CredentialNames.random())\r\n+                .withSecretString(privateKey)\r\n+                .withTags(tags);\r\n+\r\n+        return secretsManager.getClient().createSecret(request);\r\n+    }\r\n+\r\n+    private WorkflowRun runPipeline(String... pipeline) {\r\n+        return jenkins.getPipelines().run(Strings.m(pipeline));\r\n+    }\r\n+\r\n+    private <C extends StandardCredentials> C lookup(Class<C> type, String id) {\r\n+        return jenkins.getCredentials().lookup(type, id);\r\n+    }\r\n+\r\n+    private static Optional<Class> getGithubAppCredentialClass() {\r\n+        Class githubCredentials;\r\n+        try {\r\n+            githubCredentials = Class.forName(\"org.jenkinsci.plugins.github_branch_source.GitHubAppCredentials\");\r\n+        } catch (Throwable ex) {\r\n+            return Optional.empty();\r\n+        }\r\n+        return Optional.of(githubCredentials);\r\n+    }\r\n+}\r"
  },
  {
    "sha": "7cf1b960e1578b086446c7c43bedecc4bb2744c2",
    "filename": "src/test/java/io/jenkins/plugins/credentials/secretsmanager/util/AwsTags.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/blob/234d9845390aafabdcb383c13724e0f668da77bb/src/test/java/io/jenkins/plugins/credentials/secretsmanager/util/AwsTags.java",
    "raw_url": "https://github.com/jenkinsci/aws-secrets-manager-credentials-provider-plugin/raw/234d9845390aafabdcb383c13724e0f668da77bb/src/test/java/io/jenkins/plugins/credentials/secretsmanager/util/AwsTags.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/aws-secrets-manager-credentials-provider-plugin/contents/src/test/java/io/jenkins/plugins/credentials/secretsmanager/util/AwsTags.java?ref=234d9845390aafabdcb383c13724e0f668da77bb",
    "patch": "@@ -19,6 +19,10 @@ public static Tag username(String username) {\n         return AwsTags.tag(Tags.username, username);\n     }\n \n+    public static Tag appid(String id) {\n+        return AwsTags.tag(Tags.appid, id);\n+    }\n+\n     public static Tag type(String type) {\n         return tag(Tags.type, type);\n     }"
  }
]
