[
  {
    "sha": "5a033a26d6dd21ea5df4151e60ee459f7932d8b9",
    "filename": "src/main/java/io/jenkins/plugins/appcenter/task/internal/FinishReleaseTask.java",
    "status": "modified",
    "additions": 33,
    "deletions": 1,
    "changes": 34,
    "blob_url": "https://github.com/jenkinsci/appcenter-plugin/blob/5fc9b06897a66f55e2cf6ed5d186b03c499a728a/src/main/java/io/jenkins/plugins/appcenter/task/internal/FinishReleaseTask.java",
    "raw_url": "https://github.com/jenkinsci/appcenter-plugin/raw/5fc9b06897a66f55e2cf6ed5d186b03c499a728a/src/main/java/io/jenkins/plugins/appcenter/task/internal/FinishReleaseTask.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/appcenter-plugin/contents/src/main/java/io/jenkins/plugins/appcenter/task/internal/FinishReleaseTask.java?ref=5fc9b06897a66f55e2cf6ed5d186b03c499a728a",
    "patch": "@@ -4,6 +4,7 @@\n import io.jenkins.plugins.appcenter.AppCenterException;\n import io.jenkins.plugins.appcenter.AppCenterLogger;\n import io.jenkins.plugins.appcenter.api.AppCenterServiceFactory;\n+import io.jenkins.plugins.appcenter.model.appcenter.SymbolUploadEndRequest;\n import io.jenkins.plugins.appcenter.task.request.UploadRequest;\n \n import javax.annotation.Nonnull;\n@@ -34,7 +35,14 @@\n     @Nonnull\n     @Override\n     public CompletableFuture<UploadRequest> execute(@Nonnull UploadRequest request) {\n-        return finishRelease(request);\n+\n+\n+        if (request.symbolUploadId == null) {\n+            return finishRelease(request);\n+        } else {\n+            return finishRelease(request)\n+                .thenCompose(this::finishSymbolRelease);\n+        }\n     }\n \n     @Nonnull\n@@ -69,6 +77,30 @@ private String getUrl(@Nonnull String uploadDomain, @Nonnull String packageAsset\n         return String.format(\"%1$s/upload/finished/%2$s?token=%3$s\", uploadDomain, packageAssetId, token);\n     }\n \n+    @Nonnull\n+    private CompletableFuture<UploadRequest> finishSymbolRelease(@Nonnull UploadRequest request) {\n+        final String symbolUploadId = requireNonNull(request.symbolUploadId, \"symbolUploadId cannot be null\");\n+\n+        log(\"Finishing symbol release.\");\n+\n+        final CompletableFuture<UploadRequest> future = new CompletableFuture<>();\n+        final SymbolUploadEndRequest symbolUploadEndRequest = new SymbolUploadEndRequest(SymbolUploadEndRequest.StatusEnum.committed);\n+\n+        factory.createAppCenterService()\n+            .symbolUploadsComplete(request.ownerName, request.appName, symbolUploadId, symbolUploadEndRequest)\n+            .whenComplete((symbolUploadEndResponse, throwable) -> {\n+                if (throwable != null) {\n+                    final AppCenterException exception = logFailure(\"Finishing symbol release unsuccessful: \", throwable);\n+                    future.completeExceptionally(exception);\n+                } else {\n+                    log(\"Finishing symbol release successful.\");\n+                    future.complete(request);\n+                }\n+            });\n+\n+        return future;\n+    }\n+\n     @Override\n     public PrintStream getLogger() {\n         return taskListener.getLogger();"
  },
  {
    "sha": "c973f40cfdb64ac3a57b3da8d8d7289ffaa50ef4",
    "filename": "src/test/java/io/jenkins/plugins/appcenter/EnvInterpolationTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/jenkinsci/appcenter-plugin/blob/5fc9b06897a66f55e2cf6ed5d186b03c499a728a/src/test/java/io/jenkins/plugins/appcenter/EnvInterpolationTest.java",
    "raw_url": "https://github.com/jenkinsci/appcenter-plugin/raw/5fc9b06897a66f55e2cf6ed5d186b03c499a728a/src/test/java/io/jenkins/plugins/appcenter/EnvInterpolationTest.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/appcenter-plugin/contents/src/test/java/io/jenkins/plugins/appcenter/EnvInterpolationTest.java?ref=5fc9b06897a66f55e2cf6ed5d186b03c499a728a",
    "patch": "@@ -142,6 +142,7 @@ public void should_InterpolateEnv_InDestinationGroups() throws Exception {\n         mockWebServer.takeRequest();\n         mockWebServer.takeRequest();\n         mockWebServer.takeRequest();\n+        mockWebServer.takeRequest();\n         final RecordedRequest recordedRequest = mockWebServer.takeRequest();\n         assertThat(recordedRequest.getBody().readUtf8()).contains(\"[{\\\"name\\\":\\\"casey\\\"},{\\\"name\\\":\\\"niccoli\\\"}]\");\n     }\n@@ -164,6 +165,7 @@ public void should_InterpolateEnv_InReleaseNotes() throws Exception {\n         mockWebServer.takeRequest();\n         mockWebServer.takeRequest();\n         mockWebServer.takeRequest();\n+        mockWebServer.takeRequest();\n         final RecordedRequest recordedRequest = mockWebServer.takeRequest();\n         assertThat(recordedRequest.getBody().readUtf8()).contains(\"\\\"release_notes\\\":\\\"I miss you my dear Xiola\\\\n\\\\nI prepared the room tonight with Christmas lights.\\\"\");\n     }"
  },
  {
    "sha": "6e52e07d2a80fa1ec5d439a9b6e0a15fcbc1f4ef",
    "filename": "src/test/java/io/jenkins/plugins/appcenter/task/internal/FinishReleaseTaskTest.java",
    "status": "modified",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/jenkinsci/appcenter-plugin/blob/5fc9b06897a66f55e2cf6ed5d186b03c499a728a/src/test/java/io/jenkins/plugins/appcenter/task/internal/FinishReleaseTaskTest.java",
    "raw_url": "https://github.com/jenkinsci/appcenter-plugin/raw/5fc9b06897a66f55e2cf6ed5d186b03c499a728a/src/test/java/io/jenkins/plugins/appcenter/task/internal/FinishReleaseTaskTest.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/appcenter-plugin/contents/src/test/java/io/jenkins/plugins/appcenter/task/internal/FinishReleaseTaskTest.java?ref=5fc9b06897a66f55e2cf6ed5d186b03c499a728a",
    "patch": "@@ -134,4 +134,64 @@ public void should_ReturnException_When_RequestIsUnSuccessful() {\n         assertThat(exception).hasCauseThat().isInstanceOf(AppCenterException.class);\n         assertThat(exception).hasCauseThat().hasMessageThat().contains(\"Finishing release unsuccessful: HTTP 400 Client Error: \");\n     }\n+\n+    @Test\n+    public void should_ReturnResponse_When_SymbolRequestIsSuccessful() throws Exception {\n+        // Given\n+        final UploadRequest uploadRequest = baseRequest.newBuilder()\n+            .setUploadDomain(\"upload-domain\")\n+            .setPackageAssetId(\"package_asset_id\")\n+            .setToken(\"token\")\n+            .setSymbolUploadId(\"symbol_upload_id\")\n+            .build();\n+        mockWebServer.enqueue(new MockResponse().setResponseCode(200));\n+        mockWebServer.enqueue(new MockResponse().setResponseCode(200).setBody(\"{\\n\" +\n+            \"  \\\"symbol_upload_id\\\": \\\"string\\\",\\n\" +\n+            \"  \\\"app_id\\\": \\\"string\\\",\\n\" +\n+            \"  \\\"user\\\": {\\n\" +\n+            \"    \\\"email\\\": \\\"string\\\",\\n\" +\n+            \"    \\\"display_name\\\": \\\"string\\\"\\n\" +\n+            \"  },\\n\" +\n+            \"  \\\"status\\\": \\\"created\\\",\\n\" +\n+            \"  \\\"symbol_type\\\": \\\"AndroidProguard\\\",\\n\" +\n+            \"  \\\"symbols_uploaded\\\": [\\n\" +\n+            \"    {\\n\" +\n+            \"      \\\"symbol_id\\\": \\\"string\\\",\\n\" +\n+            \"      \\\"platform\\\": \\\"string\\\"\\n\" +\n+            \"    }\\n\" +\n+            \"  ],\\n\" +\n+            \"  \\\"origin\\\": \\\"User\\\",\\n\" +\n+            \"  \\\"file_name\\\": \\\"string\\\",\\n\" +\n+            \"  \\\"file_size\\\": 0,\\n\" +\n+            \"  \\\"timestamp\\\": \\\"2019-11-17T12:12:06.701Z\\\"\\n\" +\n+            \"}\"));\n+\n+        // When\n+        final UploadRequest actual = task.execute(uploadRequest).get();\n+\n+        // Then\n+        assertThat(actual)\n+            .isEqualTo(uploadRequest);\n+    }\n+\n+    @Test\n+    public void should_ReturnException_When_SymbolRequestIsUnSuccessful() {\n+        // Given\n+        final UploadRequest uploadRequest = baseRequest.newBuilder()\n+            .setUploadDomain(\"upload-domain\")\n+            .setPackageAssetId(\"package_asset_id\")\n+            .setToken(\"token\")\n+            .setSymbolUploadId(\"symbol_upload_id\")\n+            .build();\n+        mockWebServer.enqueue(new MockResponse().setResponseCode(200));\n+        mockWebServer.enqueue(new MockResponse().setResponseCode(400));\n+\n+        // When\n+        final ThrowingRunnable throwingRunnable = () -> task.execute(uploadRequest).get();\n+\n+        // Then\n+        final ExecutionException exception = assertThrows(ExecutionException.class, throwingRunnable);\n+        assertThat(exception).hasCauseThat().isInstanceOf(AppCenterException.class);\n+        assertThat(exception).hasCauseThat().hasMessageThat().contains(\"Finishing symbol release unsuccessful: \");\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "0a3a80aed045b588302aeddaf89a0edddf8008bf",
    "filename": "src/test/java/io/jenkins/plugins/appcenter/util/MockWebServerUtil.java",
    "status": "modified",
    "additions": 17,
    "deletions": 17,
    "changes": 34,
    "blob_url": "https://github.com/jenkinsci/appcenter-plugin/blob/5fc9b06897a66f55e2cf6ed5d186b03c499a728a/src/test/java/io/jenkins/plugins/appcenter/util/MockWebServerUtil.java",
    "raw_url": "https://github.com/jenkinsci/appcenter-plugin/raw/5fc9b06897a66f55e2cf6ed5d186b03c499a728a/src/test/java/io/jenkins/plugins/appcenter/util/MockWebServerUtil.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/appcenter-plugin/contents/src/test/java/io/jenkins/plugins/appcenter/util/MockWebServerUtil.java?ref=5fc9b06897a66f55e2cf6ed5d186b03c499a728a",
    "patch": "@@ -93,21 +93,7 @@ public static void enqueueSuccessWithSymbols(final @Nonnull MockWebServer mockAp\n         // Finish Release\n         mockAppCenterServer.enqueue(new MockResponse().setResponseCode(HTTP_OK));\n \n-        // Update Release\n-        mockAppCenterServer.enqueue(new MockResponse().setResponseCode(HTTP_OK).setBody(\"{\\n\" +\n-            \"  \\\"id\\\": \\\"1234\\\",\\n\" +\n-            \"  \\\"upload_status\\\": \\\"uploadFinished\\\"\\n\" +\n-            \"}\"));\n-\n-        // Poll For Release\n-        mockAppCenterServer.enqueue(new MockResponse().setResponseCode(HTTP_OK).setBody(\"{\\n\" +\n-            \"  \\\"id\\\": \\\"1234\\\",\\n\" +\n-            \"  \\\"upload_status\\\": \\\"readyToBePublished\\\",\\n\" +\n-            \"  \\\"release_distinct_id\\\": \\\"4321\\\",\\n\" +\n-            \"  \\\"release_url\\\": \\\"string\\\"\\n\" +\n-            \"}\"));\n-\n-        // Commit debug symbols\n+        // Finish symbol release\n         mockAppCenterServer.enqueue(new MockResponse().setResponseCode(HTTP_OK).setBody(\"{\\n\" +\n             \"  \\\"symbol_upload_id\\\": \\\"string\\\",\\n\" +\n             \"  \\\"app_id\\\": \\\"string\\\",\\n\" +\n@@ -116,7 +102,7 @@ public static void enqueueSuccessWithSymbols(final @Nonnull MockWebServer mockAp\n             \"    \\\"display_name\\\": \\\"string\\\"\\n\" +\n             \"  },\\n\" +\n             \"  \\\"status\\\": \\\"created\\\",\\n\" +\n-            \"  \\\"symbol_type\\\": \\\"Apple\\\",\\n\" +\n+            \"  \\\"symbol_type\\\": \\\"AndroidProguard\\\",\\n\" +\n             \"  \\\"symbols_uploaded\\\": [\\n\" +\n             \"    {\\n\" +\n             \"      \\\"symbol_id\\\": \\\"string\\\",\\n\" +\n@@ -126,7 +112,21 @@ public static void enqueueSuccessWithSymbols(final @Nonnull MockWebServer mockAp\n             \"  \\\"origin\\\": \\\"User\\\",\\n\" +\n             \"  \\\"file_name\\\": \\\"string\\\",\\n\" +\n             \"  \\\"file_size\\\": 0,\\n\" +\n-            \"  \\\"timestamp\\\": \\\"2020-03-18T21:28:19.024Z\\\"\\n\" +\n+            \"  \\\"timestamp\\\": \\\"2019-11-17T12:12:06.701Z\\\"\\n\" +\n+            \"}\"));\n+\n+        // Update Release\n+        mockAppCenterServer.enqueue(new MockResponse().setResponseCode(HTTP_OK).setBody(\"{\\n\" +\n+            \"  \\\"id\\\": \\\"1234\\\",\\n\" +\n+            \"  \\\"upload_status\\\": \\\"uploadFinished\\\"\\n\" +\n+            \"}\"));\n+\n+        // Poll For Release\n+        mockAppCenterServer.enqueue(new MockResponse().setResponseCode(HTTP_OK).setBody(\"{\\n\" +\n+            \"  \\\"id\\\": \\\"1234\\\",\\n\" +\n+            \"  \\\"upload_status\\\": \\\"readyToBePublished\\\",\\n\" +\n+            \"  \\\"release_distinct_id\\\": \\\"4321\\\",\\n\" +\n+            \"  \\\"release_url\\\": \\\"string\\\"\\n\" +\n             \"}\"));\n \n         // Distribute app"
  }
]
