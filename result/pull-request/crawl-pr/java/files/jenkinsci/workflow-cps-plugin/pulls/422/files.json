[
  {
    "sha": "4fd720a2bca8065c042ed96f7c32c59d09114dd8",
    "filename": "src/test/java/org/jenkinsci/plugins/workflow/cps/CpsBodyExecutionTest.java",
    "status": "modified",
    "additions": 79,
    "deletions": 1,
    "changes": 80,
    "blob_url": "https://github.com/jenkinsci/workflow-cps-plugin/blob/19c913d80916126d7dbc556f4e290a9e065ea0f7/src/test/java/org/jenkinsci/plugins/workflow/cps/CpsBodyExecutionTest.java",
    "raw_url": "https://github.com/jenkinsci/workflow-cps-plugin/raw/19c913d80916126d7dbc556f4e290a9e065ea0f7/src/test/java/org/jenkinsci/plugins/workflow/cps/CpsBodyExecutionTest.java",
    "contents_url": "https://api.github.com/repos/jenkinsci/workflow-cps-plugin/contents/src/test/java/org/jenkinsci/plugins/workflow/cps/CpsBodyExecutionTest.java?ref=19c913d80916126d7dbc556f4e290a9e065ea0f7",
    "patch": "@@ -8,6 +8,7 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -24,6 +25,9 @@\n import org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;\n import org.jenkinsci.plugins.workflow.steps.BodyExecution;\n import org.jenkinsci.plugins.workflow.steps.BodyExecutionCallback;\n+import org.jenkinsci.plugins.workflow.steps.Step;\n+import org.jenkinsci.plugins.workflow.steps.StepContext;\n+import org.jenkinsci.plugins.workflow.steps.StepDescriptor;\n import org.jenkinsci.plugins.workflow.steps.StepExecution;\n import org.jenkinsci.plugins.workflow.test.steps.SemaphoreStep;\n import org.junit.ClassRule;\n@@ -250,4 +254,78 @@ public boolean start() throws Exception {\n         });\n     }\n \n-}\n\\ No newline at end of file\n+    /**\n+     * When an exception is thrown in {@link BodyExecutionCallback#onStart(StepContext)}, we must ensure that we clean\n+     * up after ourselves and not leave a zombie work unit runing on an executor.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void unhandledAssertionsShouldNotCreateZombieExecutions() throws Exception {\n+        rr.then(r -> {\n+            r.jenkins.setNumExecutors(1);\n+            WorkflowJob job = r.createProject(WorkflowJob.class);\n+            job.setDefinition(new CpsFlowDefinition(\"node('master') { withStartFailure { echo 'oh dear' } }\"));\n+            r.buildAndAssertStatus(Result.FAILURE, job);\n+            assertThat(r.jenkins.getComputers()[0].getExecutors().get(0).getCurrentWorkUnit(), nullValue());\n+        });\n+    }\n+\n+    public static class WithStartFailureStep extends Step {\n+\n+        @DataBoundConstructor\n+        public WithStartFailureStep() {}\n+\n+        @TestExtension(\"unhandledAssertionsShouldNotCreateZombieExecutions\")\n+        public static class DescriptorImpl extends StepDescriptor {\n+            @Override\n+            public String getFunctionName() {\n+                return \"withStartFailure\";\n+            }\n+\n+            @Override\n+            public Set<? extends Class<?>> getRequiredContext() {\n+                return Collections.emptySet();\n+            }\n+\n+            @Override\n+            public boolean takesImplicitBlockArgument() {\n+                return true;\n+            }\n+        }\n+\n+        @Override\n+        public StepExecution start(StepContext context) throws Exception {\n+            return new WithStartFailureStepExecution(context);\n+        }\n+\n+        static class WithStartFailureStepExecution extends AbstractStepExecutionImpl {\n+\n+            WithStartFailureStepExecution(final StepContext context) {\n+                super(context);\n+            }\n+\n+            @Override\n+            public boolean start() throws Exception {\n+                getContext().newBodyInvoker().withCallback(new WithStartFailureStepCallback()).start();\n+                return false;\n+            }\n+\n+            static class WithStartFailureStepCallback extends BodyExecutionCallback {\n+                @Override\n+                public void onStart(StepContext context) {\n+                    throw new RuntimeException(\"onStart broken\");\n+                }\n+\n+                @Override\n+                public void onSuccess(StepContext context, Object result) {\n+                    context.onSuccess(result);\n+                }\n+\n+                @Override\n+                public void onFailure(StepContext context, Throwable t) {\n+                    context.onFailure(t);\n+                }\n+            }\n+        }\n+    }\n+}"
  }
]
