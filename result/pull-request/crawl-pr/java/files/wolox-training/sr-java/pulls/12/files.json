[
  {
    "sha": "062b55e255c6327a31da0afc400f1c89a0014be5",
    "filename": "src/main/java/wolox/training/model/User.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/wolox-training/sr-java/blob/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/main/java/wolox/training/model/User.java",
    "raw_url": "https://github.com/wolox-training/sr-java/raw/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/main/java/wolox/training/model/User.java",
    "contents_url": "https://api.github.com/repos/wolox-training/sr-java/contents/src/main/java/wolox/training/model/User.java?ref=4b90d9d89047c4a7347ceacbed94bfc34b353799",
    "patch": "@@ -21,6 +21,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.Table;\n import java.time.LocalDate;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n@@ -53,7 +54,7 @@\n     @JoinTable(name = \"user_book\",\n             joinColumns = @JoinColumn(name = \"user_id\", referencedColumnName = \"id\"),\n             inverseJoinColumns = @JoinColumn(name = \"book_id\", referencedColumnName = \"id\"))\n-    private List<Book> books;\n+    private List<Book> books = new ArrayList<>();\n \n     public List<Book> getBooks() {\n         return Collections.unmodifiableList(books);"
  },
  {
    "sha": "0557774cd2441cab069098dbdfcf008c914c5e9c",
    "filename": "src/test/java/wolox/training/controller/BookControllerTest.java",
    "status": "added",
    "additions": 179,
    "deletions": 0,
    "changes": 179,
    "blob_url": "https://github.com/wolox-training/sr-java/blob/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/controller/BookControllerTest.java",
    "raw_url": "https://github.com/wolox-training/sr-java/raw/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/controller/BookControllerTest.java",
    "contents_url": "https://api.github.com/repos/wolox-training/sr-java/contents/src/test/java/wolox/training/controller/BookControllerTest.java?ref=4b90d9d89047c4a7347ceacbed94bfc34b353799",
    "patch": "@@ -0,0 +1,179 @@\n+package wolox.training.controller;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.web.servlet.MockMvc;\n+import wolox.training.factory.BookFactory;\n+import wolox.training.model.Book;\n+import wolox.training.repository.BookRepository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static wolox.training.factory.DataTestConstants.BOOK_CONTENT;\n+import static wolox.training.factory.DataTestConstants.BOOK_CONTENT_WITHOUT_ID;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+class BookControllerTest {\n+\n+    public static final String API_BOOKS = \"/api/books\";\n+    public static final String API_BOOKS_AUTHOR = \"/api/books/author?author=Dan Brown\";\n+    public static final String API_BOOKS_1 = \"/api/books/1\";\n+    public static final String API_BOOKS_2 = \"/api/books/2\";\n+    private final List<Book> bookList = new ArrayList<>();\n+\n+    private Book testBook;\n+\n+    @Autowired\n+    private MockMvc mvc;\n+\n+    @MockBean\n+    private BookRepository mockBookRepository;\n+\n+    @BeforeEach\n+    void setUp() {\n+        testBook = new BookFactory().newInstance();\n+        bookList.add(testBook);\n+    }\n+\n+    @Test\n+    void whenFindAll_thenBooksIsReturned() throws Exception {\n+        when(mockBookRepository.findAll()).thenReturn(bookList);\n+\n+        mvc.perform(get(API_BOOKS)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", hasSize(1)))\n+                .andExpect(jsonPath(\"$[0].author\", is(testBook.getAuthor())))\n+                .andExpect(jsonPath(\"$[0].genre\", is(testBook.getGenre())))\n+                .andExpect(jsonPath(\"$[0].publisher\", is(testBook.getPublisher())))\n+                .andExpect(jsonPath(\"$[0].isbn\", is(testBook.getIsbn())));\n+    }\n+\n+    @Test\n+    void whenFindAll_thenNoBooksExist() throws Exception {\n+        when(mockBookRepository.findAll()).thenReturn(Collections.emptyList());\n+        mvc.perform(get(API_BOOKS)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", hasSize(0)));\n+    }\n+\n+    @Test\n+    void whenFindOneByAuthor_thenUserIsReturned() throws Exception {\n+        when(mockBookRepository.findByAuthor(testBook.getAuthor())).thenReturn(Optional.of(testBook));\n+\n+        mvc.perform(get(API_BOOKS_AUTHOR)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.author\", is(testBook.getAuthor())))\n+                .andExpect(jsonPath(\"$.genre\", is(testBook.getGenre())))\n+                .andExpect(jsonPath(\"$.publisher\", is(testBook.getPublisher())))\n+                .andExpect(jsonPath(\"$.isbn\", is(testBook.getIsbn())));\n+    }\n+\n+    @Test\n+    void whenFindOneByAuthor_thenNotFound() throws Exception {\n+        when(mockBookRepository.findByAuthor(testBook.getAuthor())).thenReturn(Optional.empty());\n+\n+        mvc.perform(get(API_BOOKS_AUTHOR)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    void whenCreateBook_thenBookIsPersisted() throws Exception {\n+        when(mockBookRepository.save(any(Book.class))).thenReturn(testBook);\n+\n+        mvc.perform(post(API_BOOKS)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(BOOK_CONTENT_WITHOUT_ID))\n+                .andExpect(status().isCreated())\n+                .andExpect(jsonPath(\"$.author\", is(testBook.getAuthor())))\n+                .andExpect(jsonPath(\"$.genre\", is(testBook.getGenre())))\n+                .andExpect(jsonPath(\"$.publisher\", is(testBook.getPublisher())))\n+                .andExpect(jsonPath(\"$.isbn\", is(testBook.getIsbn())));\n+    }\n+\n+\n+    @Test\n+    void whenUpdatedUser_thenUserIsPersisted() throws Exception {\n+        when(mockBookRepository.findById(anyLong())).thenReturn(Optional.of(testBook));\n+        when(mockBookRepository.save(any(Book.class))).thenReturn(testBook);\n+\n+        mvc.perform(put(API_BOOKS_1)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(BOOK_CONTENT))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.author\", is(testBook.getAuthor())))\n+                .andExpect(jsonPath(\"$.genre\", is(testBook.getGenre())))\n+                .andExpect(jsonPath(\"$.publisher\", is(testBook.getPublisher())))\n+                .andExpect(jsonPath(\"$.isbn\", is(testBook.getIsbn())));\n+\n+    }\n+\n+    @Test\n+    void whenUpdatedUserWithIdNotExist_thenThrowException() throws Exception {\n+        when(mockBookRepository.findById(anyLong())).thenReturn(Optional.empty());\n+\n+        mvc.perform(put(API_BOOKS_1)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(BOOK_CONTENT))\n+                .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    void whenUpdatedUserWithIdNotMismatch_thenThrowException() throws Exception {\n+\n+        mvc.perform(put(API_BOOKS_2)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(BOOK_CONTENT))\n+                .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    void whenDeleteUser_thenUserIsDeleted() throws Exception {\n+        when(mockBookRepository.findById(anyLong())).thenReturn(Optional.of(testBook));\n+\n+        mvc.perform(delete(API_BOOKS_1)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isOk());\n+\n+        Long ID_PATH_VARIABLE = 1L;\n+        verify(mockBookRepository).deleteById(ID_PATH_VARIABLE);\n+\n+    }\n+\n+    @Test\n+    void whenDeleteUserNotExist_thenThrowException() throws Exception {\n+        when(mockBookRepository.findById(anyLong())).thenReturn(Optional.empty());\n+\n+        mvc.perform(delete(API_BOOKS_1)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isNotFound());\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ec828c26977665613acbfd6a56e4ec3dfed5a42d",
    "filename": "src/test/java/wolox/training/controller/UserControllerTest.java",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/wolox-training/sr-java/blob/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/controller/UserControllerTest.java",
    "raw_url": "https://github.com/wolox-training/sr-java/raw/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/controller/UserControllerTest.java",
    "contents_url": "https://api.github.com/repos/wolox-training/sr-java/contents/src/test/java/wolox/training/controller/UserControllerTest.java?ref=4b90d9d89047c4a7347ceacbed94bfc34b353799",
    "patch": "@@ -0,0 +1,182 @@\n+package wolox.training.controller;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.web.servlet.MockMvc;\n+import wolox.training.factory.BookFactory;\n+import wolox.training.factory.UserFactory;\n+import wolox.training.model.Book;\n+import wolox.training.model.User;\n+import wolox.training.repository.UserRepository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static wolox.training.factory.DataTestConstants.USER_CONTENT;\n+import static wolox.training.factory.DataTestConstants.USER_CONTENT_WITHOUT_ID;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+class UserControllerTest {\n+\n+    public static final String API_USERS = \"/api/users\";\n+    public static final String API_USERS_1 = \"/api/users/1\";\n+    public static final String API_USERS_2 = \"/api/users/2\";\n+    private final List<User> userList = new ArrayList<>();\n+    private User testUser;\n+    @Autowired\n+    private MockMvc mvc;\n+\n+    @MockBean\n+    private UserRepository mockUserRepository;\n+\n+    @BeforeEach\n+    void setUp() {\n+        Book testBook = new BookFactory().newInstance();\n+        testUser = new UserFactory().newInstance();\n+        testUser.addBook(testBook);\n+        userList.add(testUser);\n+    }\n+\n+    @Test\n+    void whenFindAll_thenUsersIsReturned() throws Exception {\n+        when(mockUserRepository.findAll()).thenReturn(userList);\n+\n+        mvc.perform(get(API_USERS)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", hasSize(1)))\n+                .andExpect(jsonPath(\"$[0].name\", is(testUser.getName())))\n+                .andExpect(jsonPath(\"$[0].username\", is(testUser.getUsername())));\n+    }\n+\n+    @Test\n+    void whenFindAll_thenNoUserExist() throws Exception {\n+        when(mockUserRepository.findAll()).thenReturn(Collections.emptyList());\n+        mvc.perform(get(API_USERS)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", hasSize(0)));\n+    }\n+\n+    @Test\n+    void whenFindById_thenUserIsReturned() throws Exception {\n+        when(mockUserRepository.findById(anyLong())).thenReturn(Optional.of(testUser));\n+\n+        mvc.perform(get(API_USERS_1)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.name\", is(testUser.getName())))\n+                .andExpect(jsonPath(\"$.username\", is(testUser.getUsername())));\n+    }\n+\n+    @Test\n+    void whenFindById_thenNotFound() throws Exception {\n+        when(mockUserRepository.findById(anyLong())).thenReturn(Optional.empty());\n+\n+        mvc.perform(get(API_USERS_2)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    void whenCreateUser_thenUserIsPersisted() throws Exception {\n+        when(mockUserRepository.save(any(User.class))).thenReturn(testUser);\n+\n+        mvc.perform(post(API_USERS)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(USER_CONTENT_WITHOUT_ID))\n+                .andExpect(status().isCreated())\n+                .andExpect(jsonPath(\"$.name\", is(testUser.getName())))\n+                .andExpect(jsonPath(\"$.username\", is(testUser.getUsername())));\n+    }\n+\n+    @Test\n+    void whenCreateUserWithId_thenThrowException() throws Exception {\n+        when(mockUserRepository.save(any(User.class))).thenReturn(testUser);\n+\n+        mvc.perform(post(API_USERS)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(USER_CONTENT))\n+                .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    void whenUpdatedUser_thenUserIsPersisted() throws Exception {\n+        when(mockUserRepository.findById(anyLong())).thenReturn(Optional.of(testUser));\n+        when(mockUserRepository.save(any(User.class))).thenReturn(testUser);\n+\n+        mvc.perform(put(API_USERS_1)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(USER_CONTENT))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.name\", is(testUser.getName())))\n+                .andExpect(jsonPath(\"$.username\", is(testUser.getUsername())));\n+\n+    }\n+\n+    @Test\n+    void whenUpdatedUserWithIdNotExist_thenThrowException() throws Exception {\n+        when(mockUserRepository.findById(anyLong())).thenReturn(Optional.empty());\n+\n+        mvc.perform(put(API_USERS_1)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(USER_CONTENT))\n+                .andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    void whenUpdatedUserWithIdNotMismatch_thenThrowException() throws Exception {\n+\n+        mvc.perform(put(API_USERS_2)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .content(USER_CONTENT))\n+                .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    void whenDeleteUser_thenUserIsDeleted() throws Exception {\n+        when(mockUserRepository.findById(anyLong())).thenReturn(Optional.of(testUser));\n+\n+        mvc.perform(delete(API_USERS_1)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isOk());\n+\n+        Long ID_PATH_VARIABLE = 1L;\n+        verify(mockUserRepository).deleteById(ID_PATH_VARIABLE);\n+\n+    }\n+\n+    @Test\n+    void whenDeleteUserNotExist_thenThrowException() throws Exception {\n+        when(mockUserRepository.findById(anyLong())).thenReturn(Optional.empty());\n+\n+        mvc.perform(delete(API_USERS_1)\n+                .contentType(MediaType.APPLICATION_JSON))\n+                .andExpect(status().isNotFound());\n+    }\n+\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f16cccd14002924536d7bcd24fe7c73551e0b336",
    "filename": "src/test/java/wolox/training/factory/BookFactory.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/wolox-training/sr-java/blob/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/factory/BookFactory.java",
    "raw_url": "https://github.com/wolox-training/sr-java/raw/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/factory/BookFactory.java",
    "contents_url": "https://api.github.com/repos/wolox-training/sr-java/contents/src/test/java/wolox/training/factory/BookFactory.java?ref=4b90d9d89047c4a7347ceacbed94bfc34b353799",
    "patch": "@@ -0,0 +1,107 @@\n+package wolox.training.factory;\n+\n+\n+import wolox.training.model.Book;\n+\n+import static wolox.training.factory.DataTestConstants.AUTHOR;\n+import static wolox.training.factory.DataTestConstants.GENRE;\n+import static wolox.training.factory.DataTestConstants.IMAGE;\n+import static wolox.training.factory.DataTestConstants.ISBN;\n+import static wolox.training.factory.DataTestConstants.PAGES;\n+import static wolox.training.factory.DataTestConstants.PUBLISHER;\n+import static wolox.training.factory.DataTestConstants.SUBTITLE;\n+import static wolox.training.factory.DataTestConstants.TITLE;\n+import static wolox.training.factory.DataTestConstants.YEAR;\n+\n+public class BookFactory {\n+\n+\n+    private Long id;\n+    private String genre;\n+    private String author;\n+    private String image;\n+    private String title;\n+    private String subtitle;\n+    private String publisher;\n+    private String year;\n+    private String pages;\n+    private String isbn;\n+\n+    public BookFactory() {\n+        this.id = null;\n+        this.genre = GENRE;\n+        this.author = AUTHOR;\n+        this.image = IMAGE;\n+        this.title = TITLE;\n+        this.subtitle = SUBTITLE;\n+        this.publisher = PUBLISHER;\n+        this.year = YEAR;\n+        this.pages = PAGES;\n+        this.isbn = ISBN;\n+    }\n+\n+    public Book newInstance(){\n+        Book testBook = new Book();\n+        testBook.setId(this.id);\n+        testBook.setGenre(this.genre);\n+        testBook.setAuthor(this.author);\n+        testBook.setImage(this.image);\n+        testBook.setTitle(this.title);\n+        testBook.setSubtitle(this.subtitle);\n+        testBook.setPublisher(this.publisher);\n+        testBook.setYear(this.year);\n+        testBook.setPages(this.pages);\n+        testBook.setIsbn(this.isbn);\n+        return testBook;\n+    }\n+\n+    public BookFactory setId(Long id){\n+        this.id = id;\n+        return this;\n+    }\n+\n+    public BookFactory setGenre(String genre) {\n+        this.genre = genre;\n+        return this;\n+    }\n+\n+    public BookFactory setAuthor(String author) {\n+        this.author = author;\n+        return this;\n+    }\n+\n+    public BookFactory setImage(String image) {\n+        this.image = image;\n+        return this;\n+    }\n+\n+    public BookFactory setTitle(String title) {\n+        this.title = title;\n+        return this;\n+    }\n+\n+    public BookFactory setSubtitle(String subtitle) {\n+        this.subtitle = subtitle;\n+        return this;\n+    }\n+\n+    public BookFactory setPublisher(String publisher) {\n+        this.publisher = publisher;\n+        return this;\n+    }\n+\n+    public BookFactory setYear(String year) {\n+        this.year = year;\n+        return this;\n+    }\n+\n+    public BookFactory setPages(String pages) {\n+        this.pages = pages;\n+        return this;\n+    }\n+\n+    public BookFactory setIsbn(String isbn) {\n+        this.isbn = isbn;\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "49afc4e58af63116e11bf351bdfbe25dea771920",
    "filename": "src/test/java/wolox/training/factory/DataTestConstants.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/wolox-training/sr-java/blob/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/factory/DataTestConstants.java",
    "raw_url": "https://github.com/wolox-training/sr-java/raw/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/factory/DataTestConstants.java",
    "contents_url": "https://api.github.com/repos/wolox-training/sr-java/contents/src/test/java/wolox/training/factory/DataTestConstants.java?ref=4b90d9d89047c4a7347ceacbed94bfc34b353799",
    "patch": "@@ -0,0 +1,30 @@\n+package wolox.training.factory;\n+\n+public interface DataTestConstants {\n+    static final String GENRE = \"Mystery\";\n+    static final String AUTHOR = \"Dan Brown\";\n+    static final String IMAGE = \"https://upload.wikimedia.org/wikipedia/en/b/bb/Inferno-cover.jpg\";\n+    static final String TITLE = \"Inferno\";\n+    static final String SUBTITLE = \"Robert Langdon series\";\n+    static final String PUBLISHER = \"Doubleday\";\n+    static final String YEAR = \"2013\";\n+    static final String PAGES = \"642\";\n+    static final String ISBN = \"978-0-385-53785-8\";\n+    static final String NAME = \"Sebastian Rincón\";\n+    static final String USERNAME = \"srincon\";\n+    static final String BIRTHDATE = \"1997-06-05\";\n+\n+     static final String BOOK_CONTENT_WITHOUT_ID =\"{  \\\"author\\\": \\\"Dan Brown\\\",  \\\"genre\\\": \\\"Mystery\\\",  \\\"id\\\": null,  \\\"image\\\"\"+\n+            \": \\\"https://upload.wikimedia.org/wikipedia/en/b/bb/Inferno-cover.jpg\\\",  \\\"isbn\\\": \\\"978-0-385-53785-8\\\"\"+\n+            \",  \\\"pages\\\": \\\"642\\\",  \\\"publisher\\\": \\\"Doubleday\\\",  \\\"subtitle\\\": \\\"Robert Langdon series\\\",  \\\"title\\\":\"+\n+            \" \\\"Inferno\\\",  \\\"year\\\": \\\"2013\\\"}\";\n+\n+     static final String  BOOK_CONTENT =\"{  \\\"author\\\": \\\"Dan Brown\\\",  \\\"genre\\\": \\\"Mystery\\\",  \\\"id\\\": 1,  \\\"image\\\"\"+\n+            \": \\\"https://upload.wikimedia.org/wikipedia/en/b/bb/Inferno-cover.jpg\\\",  \\\"isbn\\\": \\\"978-0-385-53785-8\\\"\"+\n+            \",  \\\"pages\\\": \\\"642\\\",  \\\"publisher\\\": \\\"Doubleday\\\",  \\\"subtitle\\\": \\\"Robert Langdon series\\\",  \\\"title\\\":\"+\n+            \" \\\"Inferno\\\",  \\\"year\\\": \\\"2013\\\"}\";\n+\n+     static final String  USER_CONTENT_WITHOUT_ID = \"{\\\"id\\\": null,\\\"username\\\": \\\"srincon\\\", \\\"name\\\": \\\"Sebastian Rincón\\\", \\\"birthdate\\\": \\\"2021-03-16T15:00:01.460Z\\\", \\\"books\\\":[]}\";\n+     static final String  USER_CONTENT = \"{\\\"id\\\": 1,\\\"username\\\": \\\"srincon\\\", \\\"name\\\": \\\"Sebastian Rincón\\\", \\\"birthdate\\\": \\\"2021-03-16T15:00:01.460Z\\\", \\\"books\\\":[]}\";\n+\n+}"
  },
  {
    "sha": "b9d06ed034bee77c6d8754565f6bf06be663a652",
    "filename": "src/test/java/wolox/training/factory/UserFactory.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/wolox-training/sr-java/blob/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/factory/UserFactory.java",
    "raw_url": "https://github.com/wolox-training/sr-java/raw/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/factory/UserFactory.java",
    "contents_url": "https://api.github.com/repos/wolox-training/sr-java/contents/src/test/java/wolox/training/factory/UserFactory.java?ref=4b90d9d89047c4a7347ceacbed94bfc34b353799",
    "patch": "@@ -0,0 +1,56 @@\n+package wolox.training.factory;\n+\n+import wolox.training.model.User;\n+\n+import java.time.LocalDate;\n+\n+import static wolox.training.factory.DataTestConstants.BIRTHDATE;\n+import static wolox.training.factory.DataTestConstants.NAME;\n+import static wolox.training.factory.DataTestConstants.USERNAME;\n+\n+public class UserFactory {\n+\n+\n+    private Long id;\n+    private String username;\n+    private String name;\n+    private LocalDate birthdate;\n+\n+    public UserFactory() {\n+        this.id = null;\n+        this.name = NAME;\n+        this.username = USERNAME;\n+        this.birthdate = LocalDate.parse(BIRTHDATE);\n+    }\n+\n+    public User newInstance() {\n+        User user = new User();\n+        user.setId(this.id);\n+        user.setName(this.name);\n+        user.setUsername(this.username);\n+        user.setBirthdate(this.birthdate);\n+\n+        return user;\n+    }\n+\n+    public UserFactory setId(Long id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    public UserFactory setUsername(String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    public UserFactory setName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public UserFactory setBirthdate(LocalDate birthdate) {\n+        this.birthdate = birthdate;\n+        return this;\n+    }\n+\n+}"
  },
  {
    "sha": "128d969b4064968a84eb78bb52178b03d3ac59a3",
    "filename": "src/test/java/wolox/training/repository/BookRepositoryTest.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/wolox-training/sr-java/blob/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/repository/BookRepositoryTest.java",
    "raw_url": "https://github.com/wolox-training/sr-java/raw/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/repository/BookRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/wolox-training/sr-java/contents/src/test/java/wolox/training/repository/BookRepositoryTest.java?ref=4b90d9d89047c4a7347ceacbed94bfc34b353799",
    "patch": "@@ -0,0 +1,71 @@\n+package wolox.training.repository;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import wolox.training.factory.BookFactory;\n+import wolox.training.model.Book;\n+\n+import javax.persistence.EntityManager;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+\n+@DataJpaTest\n+@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n+class BookRepositoryTest {\n+\n+    @Autowired\n+    EntityManager entityManager;\n+\n+    @Autowired\n+    BookRepository bookRepository;\n+\n+    private Book testBook;\n+\n+    @BeforeEach\n+    void setUp() {\n+        testBook = new BookFactory().newInstance();\n+\n+    }\n+\n+    @Test\n+    void whenSave_thenBookIsPersisted() {\n+        Book persistedBook = bookRepository.save(testBook);\n+\n+        assertThat(persistedBook.getAuthor())\n+                .isEqualTo(testBook.getAuthor());\n+        assertThat(persistedBook.getIsbn())\n+                .isEqualTo(testBook.getIsbn());\n+        assertThat(persistedBook.getTitle())\n+                .isEqualTo(testBook.getTitle());\n+        assertThat(persistedBook.getSubtitle())\n+                .isEqualTo(testBook.getSubtitle());\n+        assertThat(persistedBook.getImage())\n+                .isEqualTo(testBook.getImage());\n+        assertThat(persistedBook.getPublisher())\n+                .isEqualTo(testBook.getPublisher());\n+        assertThat(persistedBook.getYear())\n+                .isEqualTo(testBook.getYear());\n+        assertThat(persistedBook.getGenre())\n+                .isEqualTo(testBook.getGenre());\n+    }\n+\n+    @Test\n+    void whenSaveBookWithoutAuthor_thenThrowException() {\n+        testBook.setAuthor(null);\n+\n+        Assertions.assertThrows(DataIntegrityViolationException.class, () -> {\n+            bookRepository.save(testBook);\n+        });\n+    }\n+\n+    @Test\n+    void whenGetAll_thenReturnBooks() {\n+        assertThat(bookRepository.findAll().size() > 0).isTrue();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "62445152d63a5a37b09c79267b48540a4fa5368a",
    "filename": "src/test/java/wolox/training/repository/UserRepositoryTest.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/wolox-training/sr-java/blob/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/repository/UserRepositoryTest.java",
    "raw_url": "https://github.com/wolox-training/sr-java/raw/4b90d9d89047c4a7347ceacbed94bfc34b353799/src/test/java/wolox/training/repository/UserRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/wolox-training/sr-java/contents/src/test/java/wolox/training/repository/UserRepositoryTest.java?ref=4b90d9d89047c4a7347ceacbed94bfc34b353799",
    "patch": "@@ -0,0 +1,62 @@\n+package wolox.training.repository;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import wolox.training.factory.UserFactory;\n+import wolox.training.model.User;\n+\n+import javax.persistence.EntityManager;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+@DataJpaTest\n+@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n+class UserRepositoryTest {\n+\n+    @Autowired\n+    EntityManager entityManager;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    private User testUser;\n+\n+    @BeforeEach\n+    void setUp() {\n+\n+        testUser = new UserFactory().newInstance();\n+    }\n+\n+    @Test\n+    void whenSave_thenUserIsPersisted() {\n+        User persistedUser = userRepository.save(testUser);\n+\n+        assertThat(persistedUser.getUsername())\n+                .isEqualTo(testUser.getUsername());\n+\n+        assertThat(persistedUser.getName())\n+                .isEqualTo(testUser.getName());\n+\n+        assertThat(persistedUser.getBirthdate())\n+                .isEqualTo(testUser.getBirthdate());\n+\n+        assertThat(persistedUser.getBooks().size()).isSameAs(testUser.getBooks().size());\n+    }\n+\n+    @Test\n+    void whenSaveUserWithoutName_thenThrowException() {\n+        testUser.setName(null);\n+\n+        Assertions.assertThrows(DataIntegrityViolationException.class, () -> userRepository.save(testUser));\n+    }\n+\n+    @Test\n+    void whenGetAll_thenReturnUsers() {\n+        assertThat(userRepository.findAll().size() > 0).isTrue();\n+    }\n+}\n\\ No newline at end of file"
  }
]
