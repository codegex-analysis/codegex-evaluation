[
  {
    "sha": "676b034bdd110b68827731c1a7d94bf2ccb97383",
    "filename": "README.md",
    "status": "modified",
    "additions": 52,
    "deletions": 48,
    "changes": 100,
    "blob_url": "https://github.com/COMPSCI331-2021/lab-git/blob/5279c0852db934ac883c7bc3be64ce8519f2954e/README.md",
    "raw_url": "https://github.com/COMPSCI331-2021/lab-git/raw/5279c0852db934ac883c7bc3be64ce8519f2954e/README.md",
    "contents_url": "https://api.github.com/repos/COMPSCI331-2021/lab-git/contents/README.md?ref=5279c0852db934ac883c7bc3be64ce8519f2954e",
    "patch": "@@ -11,56 +11,54 @@ For this exercise the three team members will individually complete the tasks\n below to fix faults in their own copy of the repository. The issue is then how\n to combine all of the changes into a single version on the remote repository.\n \n-***Task 1: Increment Fix***\n-Fix the faulty in Counter increment(). All code changes and relevant commits must be performed on the master branch.\n-\n-***Task 2: Decrement Fix***\n-Fix the faulty in Counter decrement(). All code changes and relevant commits must be performed on the master branch.\n-\n-***Task 3: Reset Fix***\n-Fix the faulty in Counter reset(). All code changes and relevant commits must be performed on the master branch.\n-\n-Each team member makes the change, commits it to their local repository (of\n-course making meaningful comment messages!) and then attempt to push the\n+For each task, each team member makes an appropriate change, commits it to their local repository (of\n+course adding meaningful commit messages!) and then attempts to push their\n changes to the remote repository. The first one should work without problems,\n but for the second and third, the local repositories are now out of date with\n-respect to the remote repository. Note that all of this should be done on a\n-the master branch. Using separate brances is in a later exercise.\n+respect to the remote repository. Note that **all of this should be done on the master branch**. Using separate branches is in a later exercise.\n \n <ol>\n-  <li>Dev1,2,3 - clone the project to the local repository. Doing this\n-  in Eclipse as follows (note that use of Eclipse is not required):\n+  <li>Dev1,2,3 - clone the project to the local repository. To do this in Eclipse (note that use of Eclipse is not required):\n   \t\t<ul>\n   \t\t\t<li>import as a project from Git</li>\n-  \t\t\t<li>Right click on project, Configure > Convert to Maven project</li>\n-  \t\t\t<li>Run the project with package goal, all tests should fail</li>\n+  \t\t\t<li>Right click on project, Configure -> Convert to Maven project</li>\n+  \t\t\t<li>Run the project with `package` goal, all tests should fail</li>\n   \t\t</ul>\n   <li>Dev1,2,3 - performs tasks 1, 2 and 3 (below) respectively on their own local source code</li>\n   <li>Dev1 - stage, commit and push the changes for task 1</li>\n   <li>Dev2 - perform code synchonisation as explained below and push the changes for task 2</li>\n   <li>Dev3 - perform code synchonisation as explained below and push the changes for task 3</li>\n </ol>\n \n+***Task 1: Increment Fix***\n+Fix the fault in Counter `increment()`. All code changes and relevant commits _must_ be performed on the master branch.\n+\n+***Task 2: Decrement Fix***\n+Fix the fault in Counter `decrement()`. All code changes and relevant commits _must_ be performed on the master branch.\n+\n+***Task 3: Reset Fix***\n+Fix the fault in Counter `reset()`. All code changes and relevant commits _must_ be performed on the master branch.\n+\n ### Testing ###\n-There are four test scripts in /src/test folder. The `TestCounter` is for testing changes you have to perform for this exercise, while the others are for the next exercise. You should read the source code in this test script and find the test method that test your task, for example, `testIncrement()` is for testing Task1. After you make the change according to your task, you can execute this test script by running Maven with the `test` goal. This will compile and run all tests on the project. Please make sure that the test method for your task is pass. \n+There are four test scripts in <tt>/src/test</tt> folder. The `TestCounter` is for testing changes you have to perform for this exercise, while the others are for the next exercise. You should read the source code in this test script and find the test method that test your task, for example, `testIncrement()` is for testing Task1. After you make the change the task, you can execute this test script by running Maven with the `test` goal. This will compile and run all tests on the project. Please make sure that the test method for your task passes. \n \n #### Continuous Integration ####\n \n In COMPSCI331 we will be using the continuous integration (CI) features of\n-GitHub. Basically this means that whenever you push something to your\n-repository, some tests will be run. You will receive email summarising the\n+GitHub. Basically, this means that whenever you push something to your\n+repository, some tests will be run. You will receive an email summarising the\n results of the tests. The results are also available on GitHub. Further\n-information about CI are below and more will be provided in later labs. For\n+information about CI is below and more will be provided in later labs. For\n now, just be aware that any push (even if you are not changing code) will\n-cause the tests to be run and email sent to you.\n+cause the tests to be run and an email sent to you.\n \n-#### Code Synchonisation\n+#### Code Synchronisation\n \n-When Dev2 and Dev3 try to commit and push their changes, the push should be fail and show the error as shown in the figure below (Eclipse). This is because dev1 has already push the source code to Git so the source code that Dev2 and Dev3 is not in sync with the code on the remote repository. Github does not allow you to push the source code for this reason and therefore give the rejected message.\n+When Dev2 and Dev3 try to commit and push their changes, the push should fail and show the error as shown in the figure below (Eclipse). This is because Dev1 has already pushed their source code to GitHub so the source code that Dev2 and Dev3 have is not in-sync with the code on the remote repository. Github does not allow you to push the source code for this reason and therefore gives the rejection message.\n \n ![](src/resources/rejected-commit.png)\n \n-\"non-fast-forward\" is a complicated way to say that there is a newer version of the file being pushed on the remote repository, probably because someone else has changed the file and pushed it to the remote repository. The command line message is slightly more useful:\n+\"non-fast-forward\" is a complicated way to say that there is a newer version of the file being pushed on the remote repository, probably because someone else has changed the file and already pushed it to the remote repository. The command line message is slightly more useful:\n \n ```\n ! [rejected]        master -> master (non-fast-forward)\n@@ -71,7 +69,7 @@ hint: 'git pull ...') before pushing again.\n hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n ```\n \n-Note the comment about <tt>git pull...</tt>, and you can ignore the\n+Note the comment about <tt>git pull...</tt>.  You can ignore the\n \"fast-forwards\" hint.\n \n What Dev2 and Dev3 now need to do (first one, then the other, otherwise the\n@@ -82,14 +80,14 @@ From Eclipse, ensure \"Merge\" is selected when doing the merge.\n \n ![](src/resources/pullmerge.png)\n \n-From the command line when you do the command you will see something like:\n+From the command line when you run the command you should see something like:\n ```\n Auto-merging filethatwaschanged.txt\n CONFLICT (content): Merge conflict in filethatwaschanged.txt\n Automatic merge failed; fix conflicts and then commit the result.\n ```\n \n-Now the file affected (in this case <tt>filethatwaschanged.txt</tt>) will have both sets of changes. When the <tt>pull</tt> is done (really the <tt>merge</tt> that is parge of the <tt>pull</tt>), the two sets of changes are merged into the file, with annotations to show which is which. This will be shown in the file with something like:\n+Now the file affected (in this case <tt>filethatwaschanged.txt</tt>) will have both sets of changes. When the <tt>pull</tt> is done (specifically the <tt>merge</tt> that is part of the <tt>pull</tt>), the two sets of changes are merged into the file, with annotations to show which is which. This will be shown in the file with something like:\n \n ```\n <<<<<<< HEAD\n@@ -115,18 +113,18 @@ Once both Dev2 and Dev3 have resolved the conflicts this exercise is complete.\n \n ## Exercise 2 - Git Branches\n \n-For this exercise, the three developers will again make three changes (this time adding features), but this time on different branches. \n+For this exercise, the three developers will again make three changes (this time adding features), but this time on _different_ branches. \n **Before starting this exercise, please make sure that all three developers pull the latest source code from the repository.**\n \n-Feature 1 by Dev1 is to implement the increment method **incrementToEven()** that increases the counter to the next even number. implement the decrement method **decrementToEven()** that decrease the counter the previous even number.\n+Feature 1 by Dev1 is to implement the increment method `incrementToEven()` that increases the counter to the next even number. Implement the decrement method `decrementToEven()` that decreases the counter the previous even number.\n \n-Feature 2 by Dev2 is to implement the increment method **incrementToPrime()** that increases the counter to the next prime number. implement the decrement method **decrementToPrime()** that decrease the counter the previous prime number.\n+Feature 2 by Dev2 is to implement the increment method `incrementToPrime()` that increases the counter to the next prime number. Implement the decrement method `decrementToPrime()` that decreases the counter the previous prime number.\n \n-Feature 3 by Dev3 is to implement the **countFrequency()** method. This method count the number of word in the given sentence. Also, you must refactor the code implemented by dev1 and dev2. The code refactoring should improve the overall quality of source code such as getting rid of replicate code, apply the standard code convention, etc.\n+Feature 3 by Dev3 is to implement the `countFrequency()` method. This method counts the number of words in a given sentence. Also, you must refactor the code implemented by dev1 and dev2. The code refactoring should improve the overall quality of source code such as getting rid of duplicate code, apply standard code conventions, etc.\n \n #### Development Process\n \n-Each dev works on these features on three separately branches namely feature1, feature2 and feature3 before merging them into the master branch. The overall process is:\n+Each dev works on these features on three separate branches named \"feature1\", \"feature2\" and \"feature3\" before merging them into the master branch. The overall process is:\n \n <ol>\n   <li>Dev1,2,3 - clone the project to local repository</li>\n@@ -135,40 +133,46 @@ Each dev works on these features on three separately branches namely feature1, f\n   <li>Dev2 - stage, commit and push changes on the feature2 branch</li>\n   <li>Dev3 - stage, commit and push changes on the feature3 branch</li>\n   <li>Dev1,2,3 - create a pull request to merge from their own branch to the master branch</li>\n-  <li>team leader approves the pull requests</li>\n+  <li>Team leader approves the pull requests</li>\n </ol>\n \n #### New Branch, Build and Test\n \n-Each dev needs to create a branch for the feature they are implementing as named above. Creating a branch from the command line is done with:\n+Each dev needs to create a branch for the feature they are implementing as named above. Creating a branch and switching over to work in it from the command line is done with:\n ```\n prompt> git branch feature1\n+prompt> git checkout feature1\n ```\n-In Eclipse, you can create a new branch by going to Team > switch To > New\n+or\n+```\n+prompt> git checkout -b feature1\n+```\n+\n+In Eclipse, you can create a new branch by going to Team > Switch To > New\n Branch.\n \n-Once you have made the changes needed, commit them.  Make sure you are on your\n-own branch before making a commit.\n+Once you have made the changes needed, commit them.  **Make sure you are on your\n+own branch before making a commit**.\n \n-There are three test scripts in place namely TestFeature1, TestFeature2 and TestFeature3 for testing each feature.  You can test only a feature on your branch by put in goal in maven as **-Dtest=[test script] test**. For example, **-Dtest=TestFeature1 test** is for testing feature 1.\n+There are three test scripts in place namely TestFeature1, TestFeature2 and TestFeature3 for testing each feature.  You can test only the features for your branch by putting as the goal in maven `-Dtest=[test script] test`. For example, `-Dtest=TestFeature1 test` is for testing feature 1.\n \n-After you commit source code on your branch, github classroom workflow will be executed to test your code. Please make sure your code on the branch passes designated test. The figure below shows the log file (it also can be accessed from Github's Actions tab) after Dev1 has commited on feature1 branch; testfeature1 is success, while testfeature2 and testfeature3 fails. Similarly, the execution of feature2 branch should have testfeature2 sucess, while testfeature1 and testfeature3 fails.  \n+After you push source code on your branch, GitHub Classroom workflow will be executed to test your code. Please make sure your code on the branch passes its designated test(s_. The figure below shows the log file (it also can be accessed from Github's Actions tab) after Dev1 has commited on feature1 branch; Testfeature1 succeeds, while testfeature2 and testfeature3 fail. Similarly, the execution of feature2 branch should be testfeature2 sucessful, while testfeature1 and testfeature3 fail.  \n \n ![](src/resources/testrun-github.png)\n \n There are a number of tutorials available on-line. A reasonable one\n (although with more detail than needed for this lab) is by [Atlassian](https://www.atlassian.com/git/tutorials/using-branches)\n \n #### Pull Request\n-The implementation of new features are separately stored on different branches. In order to combine all implementations, we need to merge the source from feature1-3 branches into the master branch. To achieve this, we create pull requests on Github by going to Pull Request tab and click new pull request button. Then, select the branch to merge into master branch, Github will show the comparison of files on master branch and feature branch as the figure below.\n+The implementation of new features is peformed separately on different branches. In order to combine the implementations, we need to merge the source from feature1-3 branches into the master branch. To achieve this, we create pull requests on Github by going to the Pull Request tab and clicking the \"Create pull request\" button. Then, select the branch to merge into the master branch. Github will show the comparison of files on the master and feature branches as in the figure below.\n \n ![](src/resources/pull-request1.png)\n \n If there is no conflict in the file, the branches can be automatically merged. However, if there is any conflict, the developer must resolve it when approving the pull request. In this case, you can click on create pull request button and enter the message of this pull request for later approval.\n \n ![](src/resources/pull-request2.png)\n \n-On the approval as the figure above shown, Github informs us that there is no conflict so we can choose to merge the pull request. However, if there is conflict as sample shown below, you must resolve the conflict before you can merge it into the master.\n+On the approval as the figure above shown, Github informs us that there is no conflict so we can choose to merge the pull request. If, however, there is a conflict as  shown in the below sample, you must resolve the conflict before you can merge it into master.\n \n \n ![](src/resources/pull-request3.png)\n@@ -177,20 +181,20 @@ On the approval as the figure above shown, Github informs us that there is no co\n After that, the implementation of the feature will be added into the master branch. You have to repeat the same process to merge all three features into the master branch.\n   \n <h2>Build & Run project on GitHub</h2>\n-To see the result of building and running test on Github, you can click on Action tab. GitHub Action is CI-CD pipeline provided by GitHub. It is similar to other CI-CD pipeline platform e.g. Travis CI, Jenkins etc. In this project, there is a workflow already defined namely Github Classroom, as shown in the figure below. This workflow is used for auto grading purpose. Every time you push the code on your repository, this workflow will be queued to execute automatically. You have to ensure that after your team made the last commit to combine all features and resolve all conflicts, the execution of this workflow runs successfully without any error (as the figure below show the success execution of last run). \n+To see the result of building and running tests on Github, you can click on the \"Action\" tab. GitHub Actions is a CI-CD pipeline provided by GitHub. It is similar to other CI-CD pipeline platforms e.g. Travis CI, Jenkins etc. In this project, there is a workflow defined already namely \"Github Classroom\", as shown in the figure below. This workflow is used for auto-grading purposes. Every time you push code on your repository, this workflow will be queued to execute automatically. You _must_ ensure that after your team has made the last commit to combine all the features and resolve all conflicts, the execution of this workflow runs successfully without any error (as per the figure below showing the successful execution of the last run). \n \n ![](src/resources/test-success.png)\n \n <h2>Assessment</h2>\n \n The marking of this lab will be based on your team repository as of Friday 19\n March 1700hrs. As well as the changes made to it for the above exercises, you\n-must include a file <tt>Team.md</tt> containing the list of members in your\n+must also include a file <tt>Team.md</tt> containing the list of members in your\n team and a brief summary of what role each member played. For example:\n \n-* Ewan - Dev1 in exercise 1, Dev3 in exercise 2\n-* Paramvir - Dev3 in exercise 1, Dev2 in exercise 2\n-* Nacha - Dev2 in exercise 1, Dev1 in exercise 1\n+* Ewan - Ewan's UPI - Dev1 in exercise 1, Dev3 in exercise 2\n+* Paramvir - Paramvir's UPI - Dev3 in exercise 1, Dev2 in exercise 2\n+* Nacha - Nacha's UPI - Dev2 in exercise 1, Dev1 in exercise 1\n \n If this file is not provided then there will be a 50% penalty.\n \n@@ -199,5 +203,5 @@ information associated with your team repository.  You must demonstrate that\n you have engaged with the lab material and fully participated with the\n team. This means we expect to see non-trivial commits, with meaningful commit\n messages, corresponding to each exercise. Different team members will do\n-different things and different times, but we will be looking for evidence that\n+different things and at different times, but we will be looking for evidence that\n there was cooperation and collaboration."
  }
]
