[
  {
    "sha": "d4f52daa6f6cfc1a4d18b9cc40d076a8bc331c03",
    "filename": "src/main/java/com/buinak/imageapi/controller/ImageController.java",
    "status": "modified",
    "additions": 15,
    "deletions": 20,
    "changes": 35,
    "blob_url": "https://github.com/buinak/imageapi/blob/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/main/java/com/buinak/imageapi/controller/ImageController.java",
    "raw_url": "https://github.com/buinak/imageapi/raw/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/main/java/com/buinak/imageapi/controller/ImageController.java",
    "contents_url": "https://api.github.com/repos/buinak/imageapi/contents/src/main/java/com/buinak/imageapi/controller/ImageController.java?ref=1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45",
    "patch": "@@ -1,18 +1,16 @@\n package com.buinak.imageapi.controller;\n \n import com.buinak.imageapi.entity.Image;\n-import com.buinak.imageapi.repository.ImageRepository;\n import com.buinak.imageapi.service.ImageService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.multipart.MultipartFile;\n \n-import java.util.Optional;\n+import java.util.List;\n \n-@Controller(\"/image\")\n+@RestController\n public class ImageController {\n \n     private final ImageService imageService;\n@@ -22,34 +20,31 @@ public ImageController(ImageService imageService) {\n         this.imageService = imageService;\n     }\n \n-    @PostMapping(path = \"addImage\")\n+    @PostMapping(path = \"/images\")\n     public ResponseEntity<Image> addImage(@RequestParam(defaultValue = \"NAME\") String name,\n                                           @RequestParam(defaultValue = \"DESC\") String description,\n                                           @RequestParam() MultipartFile file) {\n         return ResponseEntity.ok().body(imageService.addImage(name, description, file));\n     }\n \n-    @GetMapping(path = \"findImageById\")\n-    public ResponseEntity<Image> findImageById(@RequestParam Long id){\n-        Optional<Image> optionalImage = imageService.findImageById(id);\n-\n-        return optionalImage.map(imageInformationView -> ResponseEntity.ok().body(imageInformationView)).orElseGet(() -> ResponseEntity.notFound().build());\n+    @GetMapping(path = \"/images/links\")\n+    public ResponseEntity<List<String>> getImageLinks(){\n+        return ResponseEntity.ok().body(imageService.listImageUrls());\n     }\n \n-    @GetMapping(path = \"findImageByName\")\n-    public ResponseEntity<ImageRepository.ImageInformationView> findImageByName(@RequestParam String name){\n-        Optional<ImageRepository.ImageInformationView> optionalImage = imageService.findImageByName(name);\n-\n-        return optionalImage.map(imageInformationView -> ResponseEntity.ok().body(imageInformationView)).orElseGet(() -> ResponseEntity.notFound().build());\n+    @GetMapping(path = \"/images/{id}\")\n+    public ResponseEntity<Image> findImageById(@PathVariable Long id){\n+        return ResponseEntity.ok(imageService.findImageById(id));\n     }\n \n-    @PatchMapping(path = \"patchImage\")\n-    public ResponseEntity<Optional<ImageRepository.ImageInformationView>> patchImage(@RequestBody Image image){\n-        return ResponseEntity.ok(imageService.patchImage(image));\n+\n+    @PatchMapping(path = \"/images/{id}\")\n+    public ResponseEntity<Image> patchImage(@PathVariable Long id, @RequestBody Image image){\n+        return ResponseEntity.ok(imageService.patchImage(id, image));\n     }\n \n-    @DeleteMapping(path = \"deleteImageById\")\n-    public ResponseEntity<?> deleteImageById(@RequestParam long id){\n+    @DeleteMapping(path = \"/images/{id}\")\n+    public ResponseEntity<?> deleteImageById(@PathVariable long id){\n         imageService.deleteImage(id);\n         return new ResponseEntity<>(id, HttpStatus.ACCEPTED);\n     }"
  },
  {
    "sha": "7f07169f7226dbb05c03634fefb44a2f83c6909b",
    "filename": "src/main/java/com/buinak/imageapi/repository/ImageRepository.java",
    "status": "modified",
    "additions": 1,
    "deletions": 9,
    "changes": 10,
    "blob_url": "https://github.com/buinak/imageapi/blob/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/main/java/com/buinak/imageapi/repository/ImageRepository.java",
    "raw_url": "https://github.com/buinak/imageapi/raw/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/main/java/com/buinak/imageapi/repository/ImageRepository.java",
    "contents_url": "https://api.github.com/repos/buinak/imageapi/contents/src/main/java/com/buinak/imageapi/repository/ImageRepository.java?ref=1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45",
    "patch": "@@ -6,14 +6,6 @@\n import java.util.Optional;\n \n public interface ImageRepository extends JpaRepository<Image, Long> {\n-    Optional<ImageInformationView> findByName(String name);\n+    Optional<Image> findByName(String name);\n     Optional<Image> findById(Long id);\n-\n-\n-    interface ImageInformationView {\n-        long getId();\n-        String getName();\n-        String getDescription();\n-        String getPath();\n-    }\n }"
  },
  {
    "sha": "683e94be327f60c9fd77d509411ca55202dbbfa1",
    "filename": "src/main/java/com/buinak/imageapi/service/ImageService.java",
    "status": "modified",
    "additions": 19,
    "deletions": 8,
    "changes": 27,
    "blob_url": "https://github.com/buinak/imageapi/blob/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/main/java/com/buinak/imageapi/service/ImageService.java",
    "raw_url": "https://github.com/buinak/imageapi/raw/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/main/java/com/buinak/imageapi/service/ImageService.java",
    "contents_url": "https://api.github.com/repos/buinak/imageapi/contents/src/main/java/com/buinak/imageapi/service/ImageService.java?ref=1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45",
    "patch": "@@ -6,8 +6,11 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.springframework.web.multipart.MultipartFile;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n \n-import java.util.Optional;\n+import java.io.File;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n @Service\n public class ImageService {\n@@ -35,22 +38,30 @@ public Image addImage(String name, String description, MultipartFile file) {\n         return imageRepository.saveAndFlush(image);\n     }\n \n-    public Optional<Image> findImageById(long id) {\n-        return imageRepository.findById(id);\n+    public List<String> listImageUrls() {\n+        final String BASE_URL =\n+                ServletUriComponentsBuilder.fromCurrentContextPath().build().toUriString();\n+        return imageRepository.findAll().stream()\n+                .map(image -> BASE_URL + File.separator + image.getPath())\n+                .collect(Collectors.toList());\n     }\n \n-    public Optional<ImageRepository.ImageInformationView> findImageByName(String name) {\n-        return imageRepository.findByName(name);\n+    public Image findImageById(long id) {\n+        return imageRepository.findById(id).get();\n     }\n \n-    public Optional<ImageRepository.ImageInformationView> patchImage(Image image) {\n-        Image managedImage = imageRepository.findById(image.getId()).orElseThrow(ImageApiRuntimeException::new);\n+    public Image findImageByName(String name) {\n+        return imageRepository.findByName(name).get();\n+    }\n+\n+    public Image patchImage(Long id, Image image) {\n+        Image managedImage = imageRepository.findById(id).orElseThrow(ImageApiRuntimeException::new);\n \n         managedImage.setName(image.getName());\n         managedImage.setDescription(image.getDescription());\n \n         imageRepository.saveAndFlush(managedImage);\n-        return imageRepository.findByName(image.getName());\n+        return imageRepository.findByName(image.getName()).get();\n     }\n \n     public void deleteImage(long id) {"
  },
  {
    "sha": "892cd3b20d954db3586cb27d18231b5d6f80e8f9",
    "filename": "src/main/java/com/buinak/imageapi/service/StorageService.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/buinak/imageapi/blob/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/main/java/com/buinak/imageapi/service/StorageService.java",
    "raw_url": "https://github.com/buinak/imageapi/raw/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/main/java/com/buinak/imageapi/service/StorageService.java",
    "contents_url": "https://api.github.com/repos/buinak/imageapi/contents/src/main/java/com/buinak/imageapi/service/StorageService.java?ref=1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45",
    "patch": "@@ -20,7 +20,8 @@\n \n     public String uploadFile(MultipartFile file) {\n \n-        String fileLocation = uploadDir + File.separator + StringUtils.cleanPath(Objects.requireNonNull(file.getOriginalFilename()));\n+        String fileName = StringUtils.cleanPath(Objects.requireNonNull(file.getOriginalFilename()));\n+        String fileLocation = uploadDir + File.separator + fileName;\n \n         try {\n             Path copyLocation = Paths\n@@ -30,11 +31,11 @@ public String uploadFile(MultipartFile file) {\n             e.printStackTrace();\n         }\n \n-        return fileLocation;\n+        return fileName;\n     }\n \n     public void deleteImage(String path){\n-        File fileToDelete = new File(path);\n+        File fileToDelete = new File(uploadDir + File.separator + path);\n         fileToDelete.delete();\n     }\n }"
  },
  {
    "sha": "17e903f56ef3020dd8a03437819bdf45f475d284",
    "filename": "src/test/java/com/buinak/imageapi/controller/ImageControllerIT.java",
    "status": "modified",
    "additions": 42,
    "deletions": 21,
    "changes": 63,
    "blob_url": "https://github.com/buinak/imageapi/blob/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/test/java/com/buinak/imageapi/controller/ImageControllerIT.java",
    "raw_url": "https://github.com/buinak/imageapi/raw/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/test/java/com/buinak/imageapi/controller/ImageControllerIT.java",
    "contents_url": "https://api.github.com/repos/buinak/imageapi/contents/src/test/java/com/buinak/imageapi/controller/ImageControllerIT.java?ref=1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45",
    "patch": "@@ -2,20 +2,19 @@\n \n import com.buinak.imageapi.entity.Image;\n import com.buinak.imageapi.repository.ImageRepository;\n+import com.buinak.imageapi.service.ImageService;\n import org.junit.Test;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.http.ResponseEntity;\n import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.web.multipart.MultipartFile;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n \n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.util.Optional;\n+import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -30,44 +29,66 @@\n     @Autowired\n     ImageRepository imageRepository;\n \n-    final static String IMG_PATH = \"src/test/java/com/buinak/imageapi/controller/testimg.jpeg\";\n+    @Autowired\n+    ImageService imageService;\n \n \n     @Test\n-    public void addImage() throws IOException {\n-        MultipartFile multipartFile = new MockMultipartFile(\"testimg.jpeg\", new FileInputStream(new File(IMG_PATH)));\n+    public void addImage() {\n+        MockMultipartFile multipartFile = new MockMultipartFile(\"data\", \"testimg.jpeg\", \"text/plain\", \"some xml\".getBytes());\n \n         imageController.addImage(\"NAME1\", \"DESC1\", multipartFile);\n \n-        ImageRepository.ImageInformationView imageInformationView = imageController.findImageByName(\"NAME1\").getBody();\n-        assertThat(imageInformationView.getName()).isEqualTo(\"NAME1\");\n-        assertThat(imageInformationView.getDescription()).isEqualTo(\"DESC1\");\n+        Image image= imageService.findImageByName(\"NAME1\");\n+        assertThat(image.getName()).isEqualTo(\"NAME1\");\n+        assertThat(image.getDescription()).isEqualTo(\"DESC1\");\n+    }\n+\n+    @Test\n+    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\n+    public void listImages() {\n+        //setup\n+        final String BASE_URL =\n+                ServletUriComponentsBuilder.fromCurrentContextPath().build().toUriString();\n+        MockMultipartFile firstFile = new MockMultipartFile(\"data\", \"testimg.jpeg\", \"text/plain\", \"some xml\".getBytes());\n+        MockMultipartFile secondFile = new MockMultipartFile(\"data2\", \"testimg2.jpeg\", \"text/plain\", \"some xml\".getBytes());\n+\n+        //action\n+        imageController.addImage(\"list\", \"list\", firstFile);\n+        imageController.addImage(\"list2\", \"list2\", secondFile);\n+\n+        //assert\n+        List<String> images = imageController.getImageLinks().getBody();\n+        assertThat(images.size()).isEqualTo(2);\n+        assertThat(images.get(0)).isEqualTo(BASE_URL + File.separator + \"testimg.jpeg\");\n+        assertThat(images.get(1)).isEqualTo(BASE_URL + File.separator + \"testimg2.jpeg\");\n+\n     }\n \n     @Test\n-    public void patchImage() throws IOException {\n-        MultipartFile multipartFile = new MockMultipartFile(\"testimg.jpeg\", new FileInputStream(new File(IMG_PATH)));\n+    public void patchImage() {\n+        MockMultipartFile multipartFile = new MockMultipartFile(\"data\", \"testimg.jpeg\", \"text/plain\", \"some xml\".getBytes());\n         ResponseEntity<Image> responseImage = imageController.addImage(\"NAME2\", \"DESC2\", multipartFile);\n         Image image = responseImage.getBody();\n         image.setDescription(\"string\");\n         image.setName(\"string\");\n \n-        imageController.patchImage(image);\n+        imageController.patchImage(image.getId(), image);\n \n-        ImageRepository.ImageInformationView imageInformationView = imageController.findImageByName(\"string\").getBody();\n-        assertThat(imageInformationView.getName()).isEqualTo(\"string\");\n-        assertThat(imageInformationView.getDescription()).isEqualTo(\"string\");\n+        Image image2 = imageService.findImageByName(\"string\");\n+        assertThat(image2.getName()).isEqualTo(\"string\");\n+        assertThat(image2.getDescription()).isEqualTo(\"string\");\n     }\n \n     @Test\n-    public void deleteImage() throws IOException {\n-        MultipartFile multipartFile = new MockMultipartFile(\"testimg.jpeg\", new FileInputStream(new File(IMG_PATH)));\n+    public void deleteImage() {\n+        MockMultipartFile multipartFile = new MockMultipartFile(\"data\", \"testimg.jpeg\", \"text/plain\", \"some xml\".getBytes());\n         ResponseEntity<Image> responseImage = imageController.addImage(\"NAME3\", \"DESC3\", multipartFile);\n         Image image = responseImage.getBody();\n         long id = image.getId();\n \n-        assertThat(imageController.findImageByName(\"NAME3\").getBody()).isNotNull();\n+        assertThat(imageService.findImageByName(\"NAME3\")).isNotNull();\n         imageController.deleteImageById(id);\n-        assertThat(imageController.findImageByName(\"NAME3\").getBody()).isNull();\n+        assertThat(imageService.findImageByName(\"NAME3\")).isNull();\n     }\n }"
  },
  {
    "sha": "5da73a1c8e65cc20ca9bfe9a8da6f55e8f166ed0",
    "filename": "src/test/java/com/buinak/imageapi/controller/testimg2.jpeg",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/buinak/imageapi/blob/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/test/java/com/buinak/imageapi/controller/testimg2.jpeg",
    "raw_url": "https://github.com/buinak/imageapi/raw/1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45/src/test/java/com/buinak/imageapi/controller/testimg2.jpeg",
    "contents_url": "https://api.github.com/repos/buinak/imageapi/contents/src/test/java/com/buinak/imageapi/controller/testimg2.jpeg?ref=1b3f9d9bfd3cdbd7bebc85252a2d9b6b46a6bc45"
  }
]
