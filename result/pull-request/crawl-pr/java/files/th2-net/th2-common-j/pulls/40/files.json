[
  {
    "sha": "6db77b740bc1255628bf0a41787f8e258a8ebad4",
    "filename": "src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/AbstractRabbitSender.java",
    "status": "modified",
    "additions": 10,
    "deletions": 7,
    "changes": 17,
    "blob_url": "https://github.com/th2-net/th2-common-j/blob/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/AbstractRabbitSender.java",
    "raw_url": "https://github.com/th2-net/th2-common-j/raw/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/AbstractRabbitSender.java",
    "contents_url": "https://api.github.com/repos/th2-net/th2-common-j/contents/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/AbstractRabbitSender.java?ref=ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458",
    "patch": "@@ -227,7 +227,7 @@ private void createChannel() {\n \n     private boolean sendSync(T value) {\n         try {\n-            addExecutedHandler(createSendRetryBuilder(value,false).createWithAction(), value).get();\n+            addExecutedHandler(createSendRetryBuilder(value,false), value).get();\n             return true;\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Can not send message to exchangeName='{}', routing key ='{}': '{}'\", exchangeName, sendQueue, toShortDebugString(value), e);\n@@ -239,24 +239,23 @@ private boolean sendSync(T value) {\n         LOGGER.warn(\"Retry send message to exchangeName='{}', routing key='{}': '{}'\",\n                 exchangeName, sendQueue, toShortDebugString(value));\n \n-        RetryBuilder<Void> builder = createSendRetryBuilder(value, true);\n+        RetryBuilder<Void> builder = connectionManager.createRetryBuilder();\n \n         long delay = getNextDelay();\n         if (delay > 0) {\n             builder.setDelay(delay, TimeUnit.MILLISECONDS);\n         }\n \n-        return addExecutedHandler(builder.createWithAction(), value);\n+        return addExecutedHandler(createSendRetryBuilder(builder, value, true), value);\n     }\n \n-    private RetryBuilder<Void> createSendRetryBuilder(T value, boolean addToResended) {\n+    private CompletableFuture<Void> createSendRetryBuilder(RetryBuilder<Void> builder, T value, boolean addToResended) {\n         byte[] bytes = valueToBytes(value);\n \n-        return connectionManager.<Void>createRetryBuilder()\n-                .setChannelCreator(() -> null)\n+        return builder.setChannelCreator(() -> null)\n                 .setChannel(null)\n                 .setMetrics(metrics)\n-                .setAction(ignore -> {\n+                .build(ignore -> {\n                     long seq;\n                     synchronized (channelLock) {\n                         seq = channel.getNextPublishSeqNo();\n@@ -270,6 +269,10 @@ private boolean sendSync(T value) {\n                 });\n     }\n \n+    private CompletableFuture<Void> createSendRetryBuilder(T value, boolean addToResended) {\n+        return createSendRetryBuilder(connectionManager.createRetryBuilder(), value, addToResended);\n+    }\n+\n     private CompletableFuture<?> addExecutedHandler(CompletableFuture<?> future, T value) {\n         return future.exceptionally(ex -> {\n             if (ex instanceof CreateChannelException) {"
  },
  {
    "sha": "8452ed0c118f8d01bcda558c08f449a0703ce084",
    "filename": "src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/AbstractRabbitSubscriber.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/th2-net/th2-common-j/blob/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/AbstractRabbitSubscriber.java",
    "raw_url": "https://github.com/th2-net/th2-common-j/raw/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/AbstractRabbitSubscriber.java",
    "contents_url": "https://api.github.com/repos/th2-net/th2-common-j/contents/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/AbstractRabbitSubscriber.java?ref=ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458",
    "patch": "@@ -44,8 +44,7 @@\n     private final ConnectionManager connectionManager;\n     private final AtomicReference<SubscriberMonitor> consumerMonitor = new AtomicReference<>();\n \n-    private final MetricMonitor livenessMonitor = CommonMetrics.registerLiveness(this);\n-    private final MetricMonitor readinessMonitor = CommonMetrics.registerReadiness(this);\n+    private final HealthMetrics healthMetrics = new HealthMetrics(this);\n \n     public AbstractRabbitSubscriber(ConnectionManager connectionManager,\n                                     String exchangeName, SubscribeTarget target) {\n@@ -63,7 +62,7 @@ public void start() {\n \n         consumerMonitor.updateAndGet(monitor -> {\n             if (monitor == null) {\n-                monitor = connectionManager.basicConsume(queue, this::handle, this::canceled, new HealthMetrics(livenessMonitor, readinessMonitor));\n+                monitor = connectionManager.basicConsume(queue, this::handle, this::canceled, healthMetrics);\n                 LOGGER.info(\"Start listening exchangeName='{}', routing key='{}', queue name='{}'\", exchangeName, routingKey, queue);\n             }\n             return monitor;\n@@ -160,7 +159,7 @@ private void resubscribe() {\n \n     private void canceled(String consumerTag) {\n         LOGGER.warn(\"Consuming cancelled for: '{}'\", consumerTag);\n-        readinessMonitor.disable();\n+        healthMetrics.getReadinessMonitor().disable();\n         resubscribe();\n     }\n "
  },
  {
    "sha": "fc978f837a20d1f6acb510339e35a4cca694b87a",
    "filename": "src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/connection/ConnectionManager.java",
    "status": "modified",
    "additions": 33,
    "deletions": 31,
    "changes": 64,
    "blob_url": "https://github.com/th2-net/th2-common-j/blob/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/connection/ConnectionManager.java",
    "raw_url": "https://github.com/th2-net/th2-common-j/raw/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/connection/ConnectionManager.java",
    "contents_url": "https://api.github.com/repos/th2-net/th2-common-j/contents/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/connection/ConnectionManager.java?ref=ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458",
    "patch": "@@ -14,6 +14,23 @@\n  */\n package com.exactpro.th2.common.schema.message.impl.rabbitmq.connection;\n \n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import com.exactpro.th2.common.metrics.CommonMetrics;\n import com.exactpro.th2.common.metrics.HealthMetrics;\n import com.exactpro.th2.common.schema.message.SubscriberMonitor;\n@@ -28,22 +45,6 @@\n import com.rabbitmq.client.ConnectionFactory;\n import com.rabbitmq.client.DeliverCallback;\n import com.rabbitmq.client.Recoverable;\n-import org.apache.commons.lang3.StringUtils;\n-import org.jetbrains.annotations.NotNull;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.IOException;\n-import java.util.Objects;\n-import java.util.concurrent.CancellationException;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ForkJoinPool;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n public class ConnectionManager implements AutoCloseable {\n \n@@ -148,17 +149,19 @@ public SubscriberMonitor basicConsume(String queue, DeliverCallback deliverCallb\n     public SubscriberMonitor basicConsume(String queue, DeliverCallback deliverCallback, CancelCallback cancelCallback, HealthMetrics metrics) {\n         String consumerTag = subscriberName + '_' + nextSubscriberId.getAndIncrement();\n         CompletableFuture<String> future = this.<String>createRetryBuilder()\n-                .setFunction(channel -> channel.basicConsume(queue, false, consumerTag, (tag, delivery) -> {\n-                    try {\n-                        deliverCallback.handle(tag, delivery);\n-                    } catch (IOException e) {\n-                        LOGGER.error(\"Can not handle delivery for consumer with tag '{}'\", consumerTag, e);\n-                    } finally {\n-                        basicAck(channel, delivery.getEnvelope().getDeliveryTag(), metrics);\n-                    }\n-                }, cancelCallback))\n+//                .setFunction()\n                 .setMetrics(metrics)\n-                .createWithFunc();\n+                .build(channel -> {\n+                    return channel.basicConsume(queue, false, consumerTag, (tag, delivery) -> {\n+                        try {\n+                            deliverCallback.handle(tag, delivery);\n+                        } catch (IOException e) {\n+                            LOGGER.error(\"Can not handle delivery for consumer with tag '{}'\", consumerTag, e);\n+                        } finally {\n+                            basicAck(channel, delivery.getEnvelope().getDeliveryTag(), metrics);\n+                        }\n+                    }, cancelCallback);\n+                });\n         return new RabbitMqSubscriberMonitor(future, subscriberName);\n     }\n \n@@ -170,10 +173,9 @@ public SubscriberMonitor basicConsume(String queue, DeliverCallback deliverCallb\n     @Deprecated(forRemoval = true)\n     public void basicCancel(Channel channel, String consumerTag) {\n         createRetryBuilder()\n-                .setAction(channel1 -> channel1.basicCancel(consumerTag))\n                 .setChannelCreator(() -> channel)\n                 .setMetrics(managerMetrics)\n-                .createWithAction()\n+                .build(channel1 -> { channel1.basicCancel(consumerTag); })\n                 .exceptionally(ex -> {\n                     LOGGER.error(\"Can not cancel consumer with tag '{}'\", consumerTag, ex);\n                     return null;\n@@ -182,9 +184,8 @@ public void basicCancel(Channel channel, String consumerTag) {\n \n     public void basicCancel(String consumerTag, HealthMetrics metrics) {\n         createRetryBuilder()\n-                .setAction(channel1 -> channel1.basicCancel(consumerTag))\n                 .setMetrics(metrics)\n-                .createWithAction()\n+                .build(channel1 -> { channel1.basicCancel(consumerTag); })\n                 .exceptionally(ex -> {\n                     LOGGER.error(\"Can not cancel consumer with tag '{}'\", consumerTag, ex);\n                     return null;\n@@ -198,9 +199,10 @@ public void close() throws IllegalStateException {\n         }\n \n \n-        tasker.shutdown();\n         try {\n+            tasker.shutdown();\n             if (!tasker.awaitTermination(DEFAULT_CLOSE_TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                LOGGER.warn(\"Thread pool cannot be shutdown for {} milliseconds\", DEFAULT_CLOSE_TIMEOUT);\n                 tasker.shutdownNow();\n             }\n         } catch (InterruptedException e) {"
  },
  {
    "sha": "91658d9bc2bce35a35e03992043f49bc47150c4c",
    "filename": "src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/connection/retry/RetryBuilder.java",
    "status": "modified",
    "additions": 17,
    "deletions": 71,
    "changes": 88,
    "blob_url": "https://github.com/th2-net/th2-common-j/blob/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/connection/retry/RetryBuilder.java",
    "raw_url": "https://github.com/th2-net/th2-common-j/raw/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/connection/retry/RetryBuilder.java",
    "contents_url": "https://api.github.com/repos/th2-net/th2-common-j/contents/src/main/java/com/exactpro/th2/common/schema/message/impl/rabbitmq/connection/retry/RetryBuilder.java?ref=ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458",
    "patch": "@@ -15,31 +15,31 @@\n \n package com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.retry;\n \n-import com.exactpro.th2.common.metrics.HealthMetrics;\n-import com.exactpro.th2.common.metrics.MetricMonitor;\n-import com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration;\n-import com.rabbitmq.client.AlreadyClosedException;\n-import com.rabbitmq.client.Channel;\n-import org.jetbrains.annotations.NotNull;\n+import static java.util.Objects.requireNonNull;\n \n import java.io.IOException;\n-import java.util.Objects;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Supplier;\n \n+import org.jetbrains.annotations.NotNull;\n+\n+import com.exactpro.th2.common.metrics.HealthMetrics;\n+import com.exactpro.th2.common.metrics.MetricMonitor;\n+import com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration;\n+import com.rabbitmq.client.AlreadyClosedException;\n+import com.rabbitmq.client.Channel;\n+\n public class RetryBuilder<T> {\n \n     private final RabbitMQConfiguration configuration;\n     private final ScheduledExecutorService scheduler;\n     private final AtomicBoolean connectionIsClosed;\n     private final ExecutorService tasker;\n \n-    private RetryFunction<T> function = null;\n-    private RetryAction action = null;\n     private Channel channel = null;\n     private MetricMonitor liveness = null;\n     private MetricMonitor readness = null;\n@@ -48,20 +48,10 @@\n     private TimeUnit unit;\n \n     public RetryBuilder(@NotNull RabbitMQConfiguration configuration, @NotNull ScheduledExecutorService scheduler, @NotNull ExecutorService tasker, @NotNull AtomicBoolean connectionIsClosed) {\n-        this.configuration = Objects.requireNonNull(configuration, \"Configuration can not be null\");\n-        this.scheduler = Objects.requireNonNull(scheduler, \"Scheduler can not be null\");\n-        this.tasker = Objects.requireNonNull(tasker, \"Tasker can not be null\");\n-        this.connectionIsClosed = Objects.requireNonNull(connectionIsClosed, \"Connection checker can not be null\");\n-    }\n-\n-    public RetryBuilder<T> setFunction(RetryFunction<T> function) {\n-        this.function = function;\n-        return this;\n-    }\n-\n-    public RetryBuilder<T> setAction(RetryAction action) {\n-        this.action = action;\n-        return this;\n+        this.configuration = requireNonNull(configuration, \"Configuration can not be null\");\n+        this.scheduler = requireNonNull(scheduler, \"Scheduler can not be null\");\n+        this.tasker = requireNonNull(tasker, \"Tasker can not be null\");\n+        this.connectionIsClosed = requireNonNull(connectionIsClosed, \"Connection checker can not be null\");\n     }\n \n     public RetryBuilder<T> setChannel(Channel channel) {\n@@ -96,10 +86,8 @@ public RetryBuilder(@NotNull RabbitMQConfiguration configuration, @NotNull Sched\n         return this;\n     }\n \n-    public CompletableFuture<T> createWithFunc() throws IllegalStateException {\n-        if (function == null) {\n-            throw new IllegalStateException(\"Function or action should be not null\");\n-        }\n+    public CompletableFuture<T> build(RetryFunction<T> function) throws IllegalStateException {\n+        requireNonNull(function, \"Function or action should be not null\");\n \n         RetryRequest<T> request = new RetryRequest<T>(channel, channelCreator, connectionIsClosed, configuration, scheduler, tasker, liveness, readness) {\n             @Override\n@@ -111,10 +99,8 @@ protected T action(Channel channel) throws IOException, AlreadyClosedException {\n         return executeRetry(request);\n     }\n \n-    public CompletableFuture<Void> createWithAction() throws IllegalStateException {\n-        if (action == null) {\n-            throw new IllegalStateException(\"Function or action should be not null\");\n-        }\n+    public CompletableFuture<Void> build(RetryAction action) throws IllegalStateException {\n+        requireNonNull(action, \"Function or action should be not null\");\n \n         RetryRequest<Void> request = new RetryRequest<Void>(channel, channelCreator, connectionIsClosed, configuration, scheduler, tasker, liveness, readness) {\n             @Override\n@@ -127,46 +113,6 @@ protected Void action(Channel channel) throws IOException, AlreadyClosedExceptio\n         return executeRetry(request);\n     }\n \n-    public CompletableFuture<?> create() throws IllegalStateException {\n-        if (function == null && action == null) {\n-            throw new IllegalStateException(\"Function or action should be not null\");\n-        }\n-\n-        RetryRequest<?> request = null;\n-        if (function != null) {\n-            request = new RetryRequest<T>(channel, channelCreator, connectionIsClosed, configuration, scheduler, tasker, liveness, readness) {\n-                @Override\n-                protected T action(Channel channel) throws IOException, AlreadyClosedException {\n-                    return function.apply(channel);\n-                }\n-            };\n-        } else {\n-            request = new RetryRequest<Void>(channel, channelCreator, connectionIsClosed, configuration, scheduler, tasker, liveness, readness) {\n-                @Override\n-                protected Void action(Channel channel) throws IOException, AlreadyClosedException {\n-                    action.apply(channel);\n-                    return null;\n-                }\n-            };\n-        }\n-\n-        CompletableFuture<Void> future = new CompletableFuture<>();\n-\n-        if (time > 0 && unit != null) {\n-            scheduler.schedule(() -> {\n-                future.complete(null);\n-            }, time, unit);\n-        } else {\n-            future.complete(null);\n-        }\n-\n-        RetryRequest<?> finalRequest1 = request;\n-        return future.thenCompose(ignore -> {\n-            tasker.execute(finalRequest1);\n-            return finalRequest1.getCompletableFuture();\n-        });\n-    }\n-\n     private <R> CompletableFuture<R> executeRetry(RetryRequest<R> request) {\n         CompletableFuture<Void> future = new CompletableFuture<>();\n "
  },
  {
    "sha": "b612ef678c2712fce93c086a437ca38e84812725",
    "filename": "src/main/kotlin/com/exactpro/th2/common/metrics/CommonMetrics.kt",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/th2-net/th2-common-j/blob/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/kotlin/com/exactpro/th2/common/metrics/CommonMetrics.kt",
    "raw_url": "https://github.com/th2-net/th2-common-j/raw/ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458/src/main/kotlin/com/exactpro/th2/common/metrics/CommonMetrics.kt",
    "contents_url": "https://api.github.com/repos/th2-net/th2-common-j/contents/src/main/kotlin/com/exactpro/th2/common/metrics/CommonMetrics.kt?ref=ede56d1f3e8d8ca03dc3f1dd8c215819c0a2b458",
    "patch": "@@ -16,6 +16,7 @@\n \n package com.exactpro.th2.common.metrics\n \n+import java.util.Objects\n import java.util.concurrent.CopyOnWriteArrayList\n import java.util.concurrent.atomic.AtomicBoolean\n \n@@ -110,6 +111,9 @@ fun setGRPCReadiness(value: Boolean) {\n \n class HealthMetrics(val livenessMonitor: MetricMonitor,\n                     val readinessMonitor: MetricMonitor) {\n+\n+    constructor(parent: Object) : this(registerLiveness(parent), registerReadiness(parent))\n+\n     fun enable() {\n         livenessMonitor.enable()\n         readinessMonitor.enable()"
  }
]
