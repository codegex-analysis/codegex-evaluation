[
  {
    "sha": "8ca2774264245d394bbba39b581146a2dc5bd29b",
    "filename": "core/src/main/resources/i18n/displayStrings.properties",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/bisq-network/bisq/blob/5604369880d962b5e2d5309ae2a0f64950a61826/core/src/main/resources/i18n/displayStrings.properties",
    "raw_url": "https://github.com/bisq-network/bisq/raw/5604369880d962b5e2d5309ae2a0f64950a61826/core/src/main/resources/i18n/displayStrings.properties",
    "contents_url": "https://api.github.com/repos/bisq-network/bisq/contents/core/src/main/resources/i18n/displayStrings.properties?ref=5604369880d962b5e2d5309ae2a0f64950a61826",
    "patch": "@@ -1029,6 +1029,11 @@ funds.withdrawal.fillDestAddress=Fill in your destination address\n funds.withdrawal.warn.noSourceAddressSelected=You need to select a source address in the table above.\n funds.withdrawal.warn.amountExceeds=You don't have sufficient funds available from the selected address.\\n\\\n   Consider to select multiple addresses in the table above or change the fee toggle to include the miner fee.\n+funds.withdrawal.txFee=Withdrawal transaction fee (satoshis/vbyte)\n+funds.withdrawal.useCustomFeeValueInfo=Insert a custom transaction fee value\n+funds.withdrawal.useCustomFeeValue=Use custom value\n+funds.withdrawal.txFeeMin=Transaction fee must be at least {0} satoshis/vbyte\n+funds.withdrawal.txFeeTooLarge=Your input is above any reasonable value (>5000 satoshis/vbyte). Transaction fee is usually in the range of 50-400 satoshis/vbyte.\n \n funds.reserved.noFunds=No funds are reserved in open offers\n funds.reserved.reserved=Reserved in local wallet for offer with ID: {0}\n@@ -1199,10 +1204,6 @@ setting.preferences.autoConfirmRequiredConfirmations=Required confirmations\n setting.preferences.autoConfirmMaxTradeSize=Max. trade amount (BTC)\n setting.preferences.autoConfirmServiceAddresses=Monero Explorer URLs (uses Tor, except for localhost, LAN IP addresses, and *.local hostnames)\n setting.preferences.deviationToLarge=Values higher than {0}% are not allowed.\n-setting.preferences.txFee=Withdrawal transaction fee (satoshis/vbyte)\n-setting.preferences.useCustomValue=Use custom value\n-setting.preferences.txFeeMin=Transaction fee must be at least {0} satoshis/vbyte\n-setting.preferences.txFeeTooLarge=Your input is above any reasonable value (>5000 satoshis/vbyte). Transaction fee is usually in the range of 50-400 satoshis/vbyte.\n setting.preferences.ignorePeers=Ignored peers [onion address:port]\n setting.preferences.ignoreDustThreshold=Min. non-dust output value\n setting.preferences.currenciesInList=Currencies in market price feed list"
  },
  {
    "sha": "fa47417165ebfc8fb435d827b2f45d4e6ce324a0",
    "filename": "desktop/src/main/java/bisq/desktop/main/funds/withdrawal/WithdrawalView.java",
    "status": "modified",
    "additions": 72,
    "deletions": 6,
    "changes": 78,
    "blob_url": "https://github.com/bisq-network/bisq/blob/5604369880d962b5e2d5309ae2a0f64950a61826/desktop/src/main/java/bisq/desktop/main/funds/withdrawal/WithdrawalView.java",
    "raw_url": "https://github.com/bisq-network/bisq/raw/5604369880d962b5e2d5309ae2a0f64950a61826/desktop/src/main/java/bisq/desktop/main/funds/withdrawal/WithdrawalView.java",
    "contents_url": "https://api.github.com/repos/bisq-network/bisq/contents/desktop/src/main/java/bisq/desktop/main/funds/withdrawal/WithdrawalView.java?ref=5604369880d962b5e2d5309ae2a0f64950a61826",
    "patch": "@@ -23,6 +23,7 @@\n import bisq.desktop.components.AutoTooltipLabel;\n import bisq.desktop.components.ExternalHyperlink;\n import bisq.desktop.components.HyperlinkWithIcon;\n+import bisq.desktop.components.InputTextField;\n import bisq.desktop.components.TitledGroupBg;\n import bisq.desktop.main.overlays.popups.Popup;\n import bisq.desktop.main.overlays.windows.TxDetails;\n@@ -38,14 +39,14 @@\n import bisq.core.btc.wallet.BtcWalletService;\n import bisq.core.btc.wallet.Restrictions;\n import bisq.core.locale.Res;\n+import bisq.core.provider.fee.FeeService;\n import bisq.core.trade.Trade;\n import bisq.core.trade.TradeManager;\n import bisq.core.user.DontShowAgainLookup;\n import bisq.core.user.Preferences;\n import bisq.core.util.FormattingUtils;\n import bisq.core.util.ParsingUtils;\n import bisq.core.util.coin.CoinFormatter;\n-import bisq.core.util.coin.CoinUtil;\n import bisq.core.util.validation.BtcAddressValidator;\n \n import bisq.network.p2p.P2PService;\n@@ -79,6 +80,7 @@\n import javafx.scene.control.TableView;\n import javafx.scene.control.TextField;\n import javafx.scene.control.Toggle;\n+import javafx.scene.control.ToggleButton;\n import javafx.scene.control.ToggleGroup;\n import javafx.scene.control.Tooltip;\n import javafx.scene.layout.GridPane;\n@@ -124,7 +126,7 @@\n \n     private RadioButton useAllInputsRadioButton, useCustomInputsRadioButton, feeExcludedRadioButton, feeIncludedRadioButton;\n     private Label amountLabel;\n-    private TextField amountTextField, withdrawFromTextField, withdrawToTextField, withdrawMemoTextField;\n+    private TextField amountTextField, withdrawFromTextField, withdrawToTextField, withdrawMemoTextField, transactionFeeInputTextField;\n \n     private final BtcWalletService btcWalletService;\n     private final TradeManager tradeManager;\n@@ -143,12 +145,15 @@\n     private Coin amountAsCoin = Coin.ZERO;\n     private Coin sendersAmount = Coin.ZERO;\n     private ChangeListener<String> amountListener;\n-    private ChangeListener<Boolean> amountFocusListener;\n+    private ChangeListener<Boolean> amountFocusListener, useCustomFeeCheckboxListener, transactionFeeFocusedListener;\n     private ChangeListener<Toggle> feeToggleGroupListener, inputsToggleGroupListener;\n+    private ChangeListener<Number> transactionFeeChangeListener;\n     private ToggleGroup feeToggleGroup, inputsToggleGroup;\n+    private ToggleButton useCustomFee;\n     private final BooleanProperty useAllInputs = new SimpleBooleanProperty(true);\n     private boolean feeExcluded;\n     private int rowIndex = 0;\n+    private final FeeService feeService;\n \n \n     ///////////////////////////////////////////////////////////////////////////////////////////\n@@ -163,7 +168,8 @@ private WithdrawalView(BtcWalletService btcWalletService,\n                            @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter formatter,\n                            Preferences preferences,\n                            BtcAddressValidator btcAddressValidator,\n-                           WalletPasswordWindow walletPasswordWindow) {\n+                           WalletPasswordWindow walletPasswordWindow,\n+                           FeeService feeService) {\n         this.btcWalletService = btcWalletService;\n         this.tradeManager = tradeManager;\n         this.p2PService = p2PService;\n@@ -172,6 +178,7 @@ private WithdrawalView(BtcWalletService btcWalletService,\n         this.preferences = preferences;\n         this.btcAddressValidator = btcAddressValidator;\n         this.walletPasswordWindow = walletPasswordWindow;\n+        this.feeService = feeService;\n     }\n \n     @Override\n@@ -221,6 +228,52 @@ public void initialize() {\n         withdrawMemoTextField = addTopLabelInputTextField(gridPane, ++rowIndex,\n                 Res.get(\"funds.withdrawal.memoLabel\", Res.getBaseCurrencyCode())).second;\n \n+        Tuple3<Label, InputTextField, ToggleButton> customFeeTuple = addTopLabelInputTextFieldSlideToggleButton(gridPane, ++rowIndex,\n+                Res.get(\"funds.withdrawal.txFee\"), Res.get(\"funds.withdrawal.useCustomFeeValue\"));\n+        transactionFeeInputTextField = customFeeTuple.second;\n+        useCustomFee = customFeeTuple.third;\n+\n+        useCustomFeeCheckboxListener = (observable, oldValue, newValue) -> {\n+            transactionFeeInputTextField.setEditable(newValue);\n+            if (!newValue) {\n+                try {\n+                    transactionFeeInputTextField.setText(String.valueOf(feeService.getTxFeePerVbyte().value));\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        };\n+\n+        transactionFeeFocusedListener = (o, oldValue, newValue) -> {\n+            if (oldValue && !newValue) {\n+                String estimatedFee = String.valueOf(feeService.getTxFeePerVbyte().value);\n+                try {\n+                    int withdrawalTxFeePerVbyte = Integer.parseInt(transactionFeeInputTextField.getText());\n+                    final long minFeePerVbyte = feeService.getMinFeePerVByte();\n+                    if (withdrawalTxFeePerVbyte < minFeePerVbyte) {\n+                        new Popup().warning(Res.get(\"funds.withdrawal.txFeeMin\", minFeePerVbyte)).show();\n+                        transactionFeeInputTextField.setText(estimatedFee);\n+                    } else if (withdrawalTxFeePerVbyte > 5000) {\n+                        new Popup().warning(Res.get(\"funds.withdrawal.txFeeTooLarge\")).show();\n+                        transactionFeeInputTextField.setText(estimatedFee);\n+                    } else {\n+                        preferences.setWithdrawalTxFeeInVbytes(withdrawalTxFeePerVbyte);\n+                    }\n+                } catch (NumberFormatException t) {\n+                    log.error(t.toString());\n+                    t.printStackTrace();\n+                    new Popup().warning(Res.get(\"validation.integerOnly\")).show();\n+                    transactionFeeInputTextField.setText(estimatedFee);\n+                } catch (Throwable t) {\n+                    log.error(t.toString());\n+                    t.printStackTrace();\n+                    new Popup().warning(Res.get(\"validation.inputError\", t.getMessage())).show();\n+                    transactionFeeInputTextField.setText(estimatedFee);\n+                }\n+            }\n+        };\n+        transactionFeeChangeListener = (observable, oldValue, newValue) -> transactionFeeInputTextField.setText(String.valueOf(feeService.getTxFeePerVbyte().value));\n+\n         final Button withdrawButton = addButton(gridPane, ++rowIndex, Res.get(\"funds.withdrawal.withdrawButton\"), 15);\n \n         withdrawButton.setOnAction(event -> onWithdraw());\n@@ -304,6 +357,13 @@ protected void activate() {\n         if (inputsToggleGroup.getSelectedToggle() == null)\n             inputsToggleGroup.selectToggle(useAllInputsRadioButton);\n \n+        useCustomFee.setSelected(false);\n+        transactionFeeInputTextField.setEditable(false);\n+        transactionFeeInputTextField.setText(String.valueOf(feeService.getTxFeePerVbyte().value));\n+        feeService.feeUpdateCounterProperty().addListener(transactionFeeChangeListener);\n+        useCustomFee.selectedProperty().addListener(useCustomFeeCheckboxListener);\n+        transactionFeeInputTextField.focusedProperty().addListener(transactionFeeFocusedListener);\n+\n         updateInputSelection();\n         GUIUtil.requestFocus(withdrawToTextField);\n     }\n@@ -317,6 +377,10 @@ protected void deactivate() {\n         amountTextField.focusedProperty().removeListener(amountFocusListener);\n         feeToggleGroup.selectedToggleProperty().removeListener(feeToggleGroupListener);\n         inputsToggleGroup.selectedToggleProperty().removeListener(inputsToggleGroupListener);\n+        transactionFeeInputTextField.focusedProperty().removeListener(transactionFeeFocusedListener);\n+        if (transactionFeeChangeListener != null)\n+            feeService.feeUpdateCounterProperty().removeListener(transactionFeeChangeListener);\n+        useCustomFee.selectedProperty().removeListener(useCustomFeeCheckboxListener);\n     }\n \n \n@@ -361,15 +425,14 @@ private void onWithdraw() {\n                     log.info(\"Fee for tx with size {}: {} \" + Res.getBaseCurrencyCode() + \"\", txVsize, fee.toPlainString());\n \n                     if (receiverAmount.isPositive()) {\n-                        double feePerVbyte = CoinUtil.getFeePerVbyte(fee, txVsize);\n                         double vkb = txVsize / 1000d;\n \n                         String messageText = Res.get(\"shared.sendFundsDetailsWithFee\",\n                                 formatter.formatCoinWithCode(sendersAmount),\n                                 withdrawFromTextField.getText(),\n                                 withdrawToTextField.getText(),\n                                 formatter.formatCoinWithCode(fee),\n-                                feePerVbyte,\n+                                Double.parseDouble(transactionFeeInputTextField.getText()),\n                                 vkb,\n                                 formatter.formatCoinWithCode(receiverAmount));\n                         if (dust.isPositive()) {\n@@ -550,6 +613,9 @@ private void reset() {\n         withdrawMemoTextField.setText(\"\");\n         withdrawMemoTextField.setPromptText(Res.get(\"funds.withdrawal.memo\"));\n \n+        transactionFeeInputTextField.setText(\"\");\n+        transactionFeeInputTextField.setPromptText(Res.get(\"funds.withdrawal.useCustomFeeValueInfo\"));\n+\n         selectedItems.clear();\n         tableView.getSelectionModel().clearSelection();\n     }"
  },
  {
    "sha": "246e30f6543e1c0a14203da5f58674a92a5ad9ed",
    "filename": "desktop/src/main/java/bisq/desktop/main/settings/preferences/PreferencesView.java",
    "status": "modified",
    "additions": 3,
    "deletions": 84,
    "changes": 87,
    "blob_url": "https://github.com/bisq-network/bisq/blob/5604369880d962b5e2d5309ae2a0f64950a61826/desktop/src/main/java/bisq/desktop/main/settings/preferences/PreferencesView.java",
    "raw_url": "https://github.com/bisq-network/bisq/raw/5604369880d962b5e2d5309ae2a0f64950a61826/desktop/src/main/java/bisq/desktop/main/settings/preferences/PreferencesView.java",
    "contents_url": "https://api.github.com/repos/bisq-network/bisq/contents/desktop/src/main/java/bisq/desktop/main/settings/preferences/PreferencesView.java?ref=5604369880d962b5e2d5309ae2a0f64950a61826",
    "patch": "@@ -47,7 +47,6 @@\n import bisq.core.locale.TradeCurrency;\n import bisq.core.payment.PaymentAccount;\n import bisq.core.payment.payload.PaymentMethod;\n-import bisq.core.provider.fee.FeeService;\n import bisq.core.user.Preferences;\n import bisq.core.user.User;\n import bisq.core.util.FormattingUtils;\n@@ -120,21 +119,19 @@\n     private ComboBox<TradeCurrency> preferredTradeCurrencyComboBox;\n \n     private ToggleButton showOwnOffersInOfferBook, useAnimations, useDarkMode, sortMarketCurrenciesNumerically,\n-            avoidStandbyMode, useCustomFee, autoConfirmXmrToggle, hideNonAccountPaymentMethodsToggle, denyApiTakerToggle,\n+            avoidStandbyMode, autoConfirmXmrToggle, hideNonAccountPaymentMethodsToggle, denyApiTakerToggle,\n             notifyOnPreReleaseToggle;\n     private int gridRow = 0;\n     private int displayCurrenciesGridRowIndex = 0;\n-    private InputTextField transactionFeeInputTextField, ignoreTradersListInputTextField, ignoreDustThresholdInputTextField,\n+    private InputTextField ignoreTradersListInputTextField, ignoreDustThresholdInputTextField,\n             autoConfRequiredConfirmationsTf, autoConfServiceAddressTf, autoConfTradeLimitTf, /*referralIdInputTextField,*/\n             rpcUserTextField, blockNotifyPortTextField;\n     private ToggleButton isDaoFullNodeToggleButton;\n     private PasswordTextField rpcPwTextField;\n     private TitledGroupBg daoOptionsTitledGroupBg;\n \n-    private ChangeListener<Boolean> transactionFeeFocusedListener;\n     private ChangeListener<Boolean> autoConfServiceAddressFocusOutListener, autoConfRequiredConfirmationsFocusOutListener;\n     private final Preferences preferences;\n-    private final FeeService feeService;\n     //private final ReferralIdService referralIdService;\n     private final AssetService assetService;\n     private final FilterManager filterManager;\n@@ -159,8 +156,6 @@\n             rpcUserListener, rpcPwListener, blockNotifyPortListener,\n             autoConfTradeLimitListener, autoConfServiceAddressListener;\n     private ChangeListener<Boolean> deviationFocusedListener, bsqAverageTrimThresholdFocusedListener;\n-    private ChangeListener<Boolean> useCustomFeeCheckboxListener;\n-    private ChangeListener<Number> transactionFeeChangeListener;\n     private final boolean daoOptionsSet;\n     private final boolean displayStandbyModeFeature;\n     private ChangeListener<Filter> filterChangeListener;\n@@ -173,7 +168,6 @@\n     @Inject\n     public PreferencesView(PreferencesViewModel model,\n                            Preferences preferences,\n-                           FeeService feeService,\n                            AssetService assetService,\n                            FilterManager filterManager,\n                            DaoFacade daoFacade,\n@@ -188,7 +182,6 @@ public PreferencesView(PreferencesViewModel model,\n         this.user = user;\n         this.formatter = formatter;\n         this.preferences = preferences;\n-        this.feeService = feeService;\n         this.assetService = assetService;\n         this.filterManager = filterManager;\n         this.daoFacade = daoFacade;\n@@ -250,7 +243,7 @@ protected void deactivate() {\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     private void initializeGeneralOptions() {\n-        int titledGroupBgRowSpan = displayStandbyModeFeature ? 9 : 8;\n+        int titledGroupBgRowSpan = displayStandbyModeFeature ? 8 : 7;\n         TitledGroupBg titledGroupBg = addTitledGroupBg(root, gridRow, titledGroupBgRowSpan, Res.get(\"setting.preferences.general\"));\n         GridPane.setColumnSpan(titledGroupBg, 1);\n \n@@ -269,56 +262,6 @@ private void initializeGeneralOptions() {\n         bsqExplorerTextField = bsqExp.first;\n         editCustomBsqExplorer = bsqExp.second;\n \n-        Tuple3<Label, InputTextField, ToggleButton> tuple = addTopLabelInputTextFieldSlideToggleButton(root, ++gridRow,\n-                Res.get(\"setting.preferences.txFee\"), Res.get(\"setting.preferences.useCustomValue\"));\n-        transactionFeeInputTextField = tuple.second;\n-        useCustomFee = tuple.third;\n-\n-        useCustomFeeCheckboxListener = (observable, oldValue, newValue) -> {\n-            preferences.setUseCustomWithdrawalTxFee(newValue);\n-            transactionFeeInputTextField.setEditable(newValue);\n-            if (!newValue) {\n-                transactionFeeInputTextField.setText(String.valueOf(feeService.getTxFeePerVbyte().value));\n-                try {\n-                    preferences.setWithdrawalTxFeeInVbytes(feeService.getTxFeePerVbyte().value);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            preferences.setUseCustomWithdrawalTxFee(newValue);\n-        };\n-\n-        transactionFeeFocusedListener = (o, oldValue, newValue) -> {\n-            if (oldValue && !newValue) {\n-                String estimatedFee = String.valueOf(feeService.getTxFeePerVbyte().value);\n-                try {\n-                    int withdrawalTxFeePerVbyte = Integer.parseInt(transactionFeeInputTextField.getText());\n-                    final long minFeePerVbyte = feeService.getMinFeePerVByte();\n-                    if (withdrawalTxFeePerVbyte < minFeePerVbyte) {\n-                        new Popup().warning(Res.get(\"setting.preferences.txFeeMin\", minFeePerVbyte)).show();\n-                        transactionFeeInputTextField.setText(estimatedFee);\n-                    } else if (withdrawalTxFeePerVbyte > 5000) {\n-                        new Popup().warning(Res.get(\"setting.preferences.txFeeTooLarge\")).show();\n-                        transactionFeeInputTextField.setText(estimatedFee);\n-                    } else {\n-                        preferences.setWithdrawalTxFeeInVbytes(withdrawalTxFeePerVbyte);\n-                    }\n-                } catch (NumberFormatException t) {\n-                    log.error(t.toString());\n-                    t.printStackTrace();\n-                    new Popup().warning(Res.get(\"validation.integerOnly\")).show();\n-                    transactionFeeInputTextField.setText(estimatedFee);\n-                } catch (Throwable t) {\n-                    log.error(t.toString());\n-                    t.printStackTrace();\n-                    new Popup().warning(Res.get(\"validation.inputError\", t.getMessage())).show();\n-                    transactionFeeInputTextField.setText(estimatedFee);\n-                }\n-            }\n-        };\n-        transactionFeeChangeListener = (observable, oldValue, newValue) -> transactionFeeInputTextField.setText(String.valueOf(feeService.getTxFeePerVbyte().value));\n-\n         // deviation\n         deviationInputTextField = addInputTextField(root, ++gridRow,\n                 Res.get(\"setting.preferences.deviation\"));\n@@ -800,16 +743,6 @@ private void initializeAutoConfirmOptions() {\n     ///////////////////////////////////////////////////////////////////////////////////////////\n \n     private void activateGeneralOptions() {\n-        boolean useCustomWithdrawalTxFee = preferences.isUseCustomWithdrawalTxFee();\n-        useCustomFee.setSelected(useCustomWithdrawalTxFee);\n-\n-        transactionFeeInputTextField.setEditable(useCustomWithdrawalTxFee);\n-        if (!useCustomWithdrawalTxFee) {\n-            transactionFeeInputTextField.setText(String.valueOf(feeService.getTxFeePerVbyte().value));\n-            feeService.feeUpdateCounterProperty().addListener(transactionFeeChangeListener);\n-        }\n-\n-        transactionFeeInputTextField.setText(String.valueOf(getTxFeeForWithdrawalPerVbyte()));\n         ignoreTradersListInputTextField.setText(String.join(\", \", preferences.getIgnoreTradersList()));\n         /* referralIdService.getOptionalReferralId().ifPresent(referralId -> referralIdInputTextField.setText(referralId));\n         referralIdInputTextField.setPromptText(Res.get(\"setting.preferences.refererId.prompt\"));*/\n@@ -873,21 +806,11 @@ public Country fromString(String string) {\n         deviationInputTextField.textProperty().addListener(deviationListener);\n         deviationInputTextField.focusedProperty().addListener(deviationFocusedListener);\n \n-        transactionFeeInputTextField.focusedProperty().addListener(transactionFeeFocusedListener);\n         ignoreTradersListInputTextField.textProperty().addListener(ignoreTradersListListener);\n-        useCustomFee.selectedProperty().addListener(useCustomFeeCheckboxListener);\n         //referralIdInputTextField.textProperty().addListener(referralIdListener);\n         ignoreDustThresholdInputTextField.textProperty().addListener(ignoreDustThresholdListener);\n     }\n \n-    private Coin getTxFeeForWithdrawalPerVbyte() {\n-        Coin fee = (preferences.isUseCustomWithdrawalTxFee()) ?\n-                Coin.valueOf(preferences.getWithdrawalTxFeeInVbytes()) :\n-                feeService.getTxFeePerVbyte();\n-        log.info(\"tx fee = \" + fee.toFriendlyString());\n-        return fee;\n-    }\n-\n     private void activateDisplayCurrencies() {\n         preferredTradeCurrencyComboBox.setItems(tradeCurrencies);\n         preferredTradeCurrencyComboBox.getSelectionModel().select(preferences.getPreferredTradeCurrency());\n@@ -1119,11 +1042,7 @@ private void deactivateGeneralOptions() {\n         editCustomBsqExplorer.setOnAction(null);\n         deviationInputTextField.textProperty().removeListener(deviationListener);\n         deviationInputTextField.focusedProperty().removeListener(deviationFocusedListener);\n-        transactionFeeInputTextField.focusedProperty().removeListener(transactionFeeFocusedListener);\n-        if (transactionFeeChangeListener != null)\n-            feeService.feeUpdateCounterProperty().removeListener(transactionFeeChangeListener);\n         ignoreTradersListInputTextField.textProperty().removeListener(ignoreTradersListListener);\n-        useCustomFee.selectedProperty().removeListener(useCustomFeeCheckboxListener);\n         //referralIdInputTextField.textProperty().removeListener(referralIdListener);\n         ignoreDustThresholdInputTextField.textProperty().removeListener(ignoreDustThresholdListener);\n     }"
  }
]
