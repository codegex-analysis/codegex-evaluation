[
  {
    "sha": "3fa3c6506c404e95f9a659efafd4e633ab0f96bf",
    "filename": "Jenkinsfile",
    "status": "modified",
    "additions": 73,
    "deletions": 49,
    "changes": 122,
    "blob_url": "https://github.com/senx/warp10-platform/blob/69ee032f82b1c613f73c60dfdf1002dcfaff7195/Jenkinsfile",
    "raw_url": "https://github.com/senx/warp10-platform/raw/69ee032f82b1c613f73c60dfdf1002dcfaff7195/Jenkinsfile",
    "contents_url": "https://api.github.com/repos/senx/warp10-platform/contents/Jenkinsfile?ref=69ee032f82b1c613f73c60dfdf1002dcfaff7195",
    "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env groovy\n //\n-//   Copyright 2018  SenX S.A.S.\n+//   Copyright 2018-2021  SenX S.A.S.\n //\n //   Licensed under the Apache License, Version 2.0 (the \"License\");\n //   you may not use this file except in compliance with the License.\n@@ -25,98 +25,117 @@ pipeline {\n     }\n     environment {\n         THRIFT_HOME = '/opt/thrift-0.11.0'\n-        version = \"${getVersion()}\"\n-        BINTRAY_USER = getParam('BINTRAY_USER')\n-        BINTRAY_API_KEY = getParam('BINTRAY_API_KEY')\n+        GRADLE_CMD = \"./gradlew -Psigning.gnupg.keyName=${getParam('gpgKeyName')} -PossrhUsername=${getParam('ossrhUsername')} -PossrhPassword=${getParam('ossrhPassword')} -PnexusHost=${getParam('nexusHost')}  -PnexusUsername=${getParam('nexusUsername')} -PnexusPassword=${getParam('nexusPassword')}\"\n     }\n     stages {\n \n         stage('Checkout') {\n             steps {\n-                this.notifyBuild('STARTED', version)\n-                git credentialsId: 'github', poll: false, url: 'git@github.com:senx/warp10-platform.git'\n-                sh 'git fetch --tags'\n-                echo \"Building ${version}\"\n+                notifyBuild('STARTED')\n+                git poll: false, branch: \"${getParam('gitBranch')}\", url: \"git@${getParam('gitHost')}:${getParam('gitOwner')}/${getParam('gitRepo')}.git\"\n+                script {\n+                    VERSION = getVersion()\n+                    TAG = getTag()\n+                }\n+                echo \"Building ${VERSION}\"\n             }\n         }\n \n         stage('Build') {\n             steps {\n-                sh './gradlew clean build -x test'\n-                sh './gradlew generateChangelog'\n+                sh '$GRADLE_CMD clean build -x test'\n+                sh '$GRADLE_CMD generateChangelog'\n+                archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/libs/*.jar', fingerprint: true\n             }\n         }\n \n         stage('Test') {\n             options { retry(3) }\n             steps {\n-                sh './gradlew -Djava.security.egd=file:/dev/urandom test'\n+                sh '$GRADLE_CMD -Djava.security.egd=file:/dev/urandom test'\n                 junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/build/test-results/**/*.xml'\n                 step([$class: 'JUnitResultArchiver', allowEmptyResults: true, keepLongStdio: true, testResults: '**/build/test-results/**/*.xml'])\n             }\n         }\n \n-\n-        stage('Pack and Tar') {\n+        stage('Tar') {\n             steps {\n-                sh './gradlew jar pack -x test'\n-                archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/libs/*.jar', fingerprint: true\n-                sh './gradlew createTarArchive -x test'\n+                sh '$GRADLE_CMD createTarArchive -x test'\n                 archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/libs/*.tar.gz', fingerprint: true\n             }\n         }\n \n-/*        stage('Publish') {\n+        stage('Deploy libs to SenX\\' Nexus') {\n+            options {\n+                timeout(time: 2, unit: 'HOURS')\n+            }\n+            input {\n+                message \"Should we deploy libs?\"\n+            }\n             steps {\n-                sh './gradlew warp10:uploadArchives'\n-                sh './gradlew warpscript:uploadArchives'\n+                sh '$GRADLE_CMD publishMavenPublicationToNexusRepository -x test'\n             }\n-        }*/\n+        }\n \n-        stage('Deploy') {\n+        stage('Release tar.gz on GitHub') {\n             when {\n-                expression { return isItATagCommit() }\n+                beforeInput true\n+                // Only possible if code pulled from github because the release will refer to the\n+                // given tag in the given branch. If no such tag exists, it is created from the\n+                // HEAD of the branch.\n+                expression { return 'github.com' == getParam('gitHost') }\n+            }\n+            options {\n+                timeout(time: 2, unit: 'HOURS')\n             }\n-            parallel {\n-                stage('Deploy to Bintray') {\n-                    options {\n-                        timeout(time: 2, unit: 'HOURS')\n-                    }\n-                    input {\n-                        message 'Should we deploy to Bintray?'\n-                    }\n-                    steps {\n-                        sh './gradlew crypto:clean crypto:bintrayUpload -x test'\n-                        sh './gradlew token:clean  token:bintrayUpload -x test'\n-                        sh './gradlew warp10:clean warp10:bintrayUpload -x test'\n-                        sh './gradlew warp10:clean warpscript:bintrayUpload -x test'\n-                        this.notifyBuild('PUBLISHED', version)\n-                    }\n+            input {\n+                message \"Should we release Warp 10?\"\n+            }\n+            steps {\n+                script {\n+                    releaseID = createGitHubRelease()\n                 }\n+                sh \"curl -f -X POST -H \\\"Authorization:token ${getParam('githubToken')}\\\" -H \\\"Content-Type:application/octet-stream\\\" -T warp10/build/libs/warp10-${VERSION}.tar.gz https://uploads.github.com/repos/${getParam('gitOwner')}/${getParam('gitRepo')}/releases/${releaseID}/assets?name=warp10-${VERSION}.tar.gz\"\n             }\n         }\n+\n+        stage('Deploy libs to Maven Central') {\n+            options {\n+                timeout(time: 2, unit: 'HOURS')\n+            }\n+            input {\n+                message \"Should we deploy libs?\"\n+            }\n+            steps {\n+                sh '$GRADLE_CMD publish'\n+                sh '$GRADLE_CMD closeRepository'\n+                sh '$GRADLE_CMD releaseRepository'\n+                notifyBuild('PUBLISHED')\n+            }\n+        }\n+\n     }\n \n     post {\n         success {\n-            this.notifyBuild('SUCCESSFUL', version)\n+            notifyBuild('SUCCESSFUL')\n         }\n         failure {\n-            this.notifyBuild('FAILURE', version)\n+            notifyBuild('FAILURE')\n         }\n         aborted {\n-            this.notifyBuild('ABORTED', version)\n+            notifyBuild('ABORTED')\n         }\n         unstable {\n-            this.notifyBuild('UNSTABLE', version)\n+            notifyBuild('UNSTABLE')\n         }\n     }\n }\n \n-void notifyBuild(String buildStatus, String version) {\n+void notifyBuild(String buildStatus) {\n     // build status of null means successful\n     buildStatus = buildStatus ?: 'SUCCESSFUL'\n-    String subject = \"${buildStatus}: Job ${env.JOB_NAME} [${env.BUILD_DISPLAY_NAME}] | ${version}\"\n+    String subject = \"${buildStatus}: Job ${env.JOB_NAME} [${env.BUILD_DISPLAY_NAME}]\"\n     String summary = \"${subject} (${env.BUILD_URL})\"\n     // Override default values based on build status\n     if (buildStatus == 'STARTED') {\n@@ -134,7 +153,7 @@ void notifyBuild(String buildStatus, String version) {\n     }\n \n     // Send notifications\n-    this.notifySlack(colorCode, summary, buildStatus)\n+    notifySlack(colorCode, summary, buildStatus)\n }\n \n void notifySlack(color, message, buildStatus) {\n@@ -143,16 +162,21 @@ void notifySlack(color, message, buildStatus) {\n     sh \"curl -X POST -H 'Content-type: application/json' --data '${payload}' ${slackURL}\"\n }\n \n+String createGitHubRelease() {\n+    String githubURL = \"https://api.github.com/repos/${getParam('gitOwner')}/${getParam('gitRepo')}/releases\"\n+    String payload = \"{\\\"tag_name\\\": \\\"${VERSION}\\\", \\\"name\\\": \\\"${VERSION}\\\", \\\"body\\\": \\\"Release ${VERSION}\\\", \\\"target_commitish\\\": \\\"${getParam('gitBranch')}\\\", \\\"draft\\\": false, \\\"prerelease\\\": false}\"\n+    releaseID = sh (returnStdout: true, script: \"curl -f -X POST -H \\\"Authorization:token ${getParam('githubToken')} \\\" --data '${payload}' ${githubURL} | sed -n -e 's/\\\"id\\\":\\\\ \\\\([0-9]\\\\+\\\\),/\\\\1/p' | head -n 1\").trim()\n+    return releaseID\n+}\n+\n String getParam(key) {\n     return params.get(key)\n }\n \n String getVersion() {\n-    return sh(returnStdout: true, script: 'git describe --abbrev=0 --tags').trim()\n+    return sh(returnStdout: true, script: '$GRADLE_CMD --quiet version').trim()\n }\n \n-boolean isItATagCommit() {\n-    String lastCommit = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()\n-    String tag = sh(returnStdout: true, script: \"git show-ref --tags -d | grep ^${lastCommit} | sed -e 's,.* refs/tags/,,' -e 's/\\\\^{}//'\").trim()\n-    return tag != ''\n+String getTag() {\n+    return sh(returnStdout: true, script: 'git describe --tags').trim()\n }"
  },
  {
    "sha": "d579d7f56027cd0808da9b5c33eb09e77c5742c1",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 83,
    "deletions": 47,
    "changes": 130,
    "blob_url": "https://github.com/senx/warp10-platform/blob/69ee032f82b1c613f73c60dfdf1002dcfaff7195/build.gradle",
    "raw_url": "https://github.com/senx/warp10-platform/raw/69ee032f82b1c613f73c60dfdf1002dcfaff7195/build.gradle",
    "contents_url": "https://api.github.com/repos/senx/warp10-platform/contents/build.gradle?ref=69ee032f82b1c613f73c60dfdf1002dcfaff7195",
    "patch": "@@ -1,3 +1,6 @@\n+import org.gradle.api.artifacts.maven.MavenDeployment\n+import org.gradle.api.publish.maven.MavenPublication\n+\n //\n //   Copyright 2018-2021  SenX S.A.S.\n //\n@@ -15,7 +18,7 @@\n //\n \n plugins {\n-    id \"com.jfrog.bintray\" version \"1.8.4\" apply false // Not applied to root, only to sub projects\n+    id 'io.codearte.nexus-staging' version '0.22.0'\n }\n \n //\n@@ -63,19 +66,19 @@ subprojects {\n     apply plugin: 'eclipse'\n     apply plugin: 'idea'\n     apply plugin: 'maven-publish'\n-    apply plugin: 'com.jfrog.bintray'\n+    apply plugin: 'signing'\n+\n \n     version = versionFromGit\n     group = 'io.warp10'\n \n-    sourceCompatibility = 1.8\n-    targetCompatibility = 1.8\n+    sourceCompatibility = JavaVersion.VERSION_1_8\n+    targetCompatibility = JavaVersion.VERSION_1_8\n \n     //\n     // Repositories for dependency resolution for all subprojects\n     //\n     repositories {\n-        jcenter()\n         mavenCentral()\n         //mavenLocal()\n     }\n@@ -112,16 +115,23 @@ subprojects {\n         //options.debugOptions.debugLevel = ''\n     }\n \n+    // Disable crazy-strict fail-fast javadoc checks\n+    javadoc.options.addStringOption('Xdoclint:none', '-quiet')\n+\n+    // Adds sourceJar and javadocJar task\n+    java {\n+        withSourcesJar()\n+        withJavadocJar()\n+    }\n+\n     //\n-    // IDE CONFIGURATIONS \n+    // IDE confs\n     //\n-    // IDEA DEFAULT CONFIGURATION\n     idea {\n         module {\n             inheritOutputDirs = true\n         }\n     }\n-    // ECLIPSE\n     eclipse {\n         classpath {\n             //customizing the classes output directory:\n@@ -157,14 +167,6 @@ subprojects {\n         }\n     }\n \n-    //\n-    // Sources jar\n-    //\n-    task sourcesJar(type: Jar) {\n-        archiveClassifier = 'sources'\n-        from sourceSets.main.allSource\n-    }\n-\n     //\n     // Common jar conf\n     //\n@@ -173,17 +175,20 @@ subprojects {\n \n         manifest {\n             attributes(\n-                    // \"Implementation-Title\" to be set by each sub-project\n-                    \"Implementation-Vendor\": \"Warp 10\",\n-                    \"Implementation-Version\": project.version)\n+                // \"Implementation-Title\": to be set by each sub-project\n+                \"Implementation-Vendor\": \"Warp 10\",\n+                \"Implementation-Version\": project.version)\n         }\n     }\n \n     //\n-    // Disable the new gradle metadata generation because it is not uploaded to bintray by the plugin\n+    // Sign maven publication only if signing key name is in the properties\n     //\n-    tasks.withType(GenerateModuleMetadata) {\n-        enabled = false\n+    if (project.hasProperty(\"signing.gnupg.keyName\")) {\n+        signing {\n+            useGpgCmd()\n+            sign publishing.publications\n+        }\n     }\n \n     //\n@@ -193,39 +198,68 @@ subprojects {\n         publications {\n             maven(MavenPublication) {\n                 from components.java\n+                pom {\n+                    // name = to be set by each sub-project\n+                    // description = to be set by each sub-project\n+                    url = 'https://warp10.io/'\n+                    licenses {\n+                        license {\n+                            name = 'The Apache License, Version 2.0'\n+                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n+                        }\n+                    }\n+                    developers {\n+                        developer {\n+                            id = 'senx'\n+                            name = 'SenX'\n+                            email = 'contact@senx.io'\n+                        }\n+                    }\n+                    scm {\n+                        connection = 'scm:git:git://github.com:senx/warp10-platform.git'\n+                        developerConnection = 'scm:git:git://github.com:senx/warp10-platform.git'\n+                        url = 'https://github.com/senx/warp10-platform'\n+                    }\n+                }\n             }\n         }\n-    }\n-\n-    //\n-    // Bintray deployment common conf\n-    //\n-    bintray {\n-        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')\n-        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')\n-\n-        publish = true\n-//        dryRun = true\n-\n-        // publications (for maven repo) or filesSpec (for generic repo) to be set by each subproject.\n-\n-        pkg {\n-            // repo and name to be set by each subproject\n-            userOrg = 'senx'\n-            licenses = ['Apache-2.0']\n-            vcsUrl = 'https://github.com/senx/warp10-platform.git'\n-            version {\n-                name = project.version\n-                released = new Date()\n-                vcsTag = project.version\n+        repositories {\n+            if (project.hasProperty(\"ossrhUsername\")) {\n+                maven {\n+                    url \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n+                    credentials {\n+                        username ossrhUsername\n+                        password ossrhPassword\n+                    }\n+                }\n+            }\n+            if (project.hasProperty(\"nexusUsername\")) {\n+                maven {\n+                    name \"nexus\"\n+                    url \"$nexusHost/repository/maven-releases/\"\n+                    credentials {\n+                        username nexusUsername\n+                        password nexusPassword\n+                    }\n+                }\n             }\n         }\n     }\n \n     build.dependsOn updateRevision\n-    bintrayUpload.dependsOn checkPublicationState\n }\n \n+if (project.hasProperty(\"ossrhUsername\")) {\n+    nexusStaging {\n+        packageGroup = \"io.warp10\"\n+//        stagingProfileId = \"io.warp10\"\n+//        stagingRepositoryId = \"iowarp10-1026\"\n+        username ossrhUsername\n+        password ossrhPassword\n+    }\n+}\n+\n+\n // ------------------------------------------------------------------\n //                    AUTO RELEASE MANAGEMENT\n // Gets the version name from the latest Git tag\n@@ -247,4 +281,6 @@ def getVersionFromGit() {\n     }\n }\n \n-\n+task version {\n+    println getVersionFromGit()\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9a091ca5e5cda0b77bdfbe37e76e5712aa79458d",
    "filename": "crypto/build.gradle",
    "status": "modified",
    "additions": 11,
    "deletions": 9,
    "changes": 20,
    "blob_url": "https://github.com/senx/warp10-platform/blob/69ee032f82b1c613f73c60dfdf1002dcfaff7195/crypto/build.gradle",
    "raw_url": "https://github.com/senx/warp10-platform/raw/69ee032f82b1c613f73c60dfdf1002dcfaff7195/crypto/build.gradle",
    "contents_url": "https://api.github.com/repos/senx/warp10-platform/contents/crypto/build.gradle?ref=69ee032f82b1c613f73c60dfdf1002dcfaff7195",
    "patch": "@@ -19,9 +19,9 @@\n //\n dependencies {\n     testImplementation 'junit:junit:4.6'\n-    // UTILS\n+    // Utils\n     api 'com.google.guava:guava:15.0'\n-    // CRYPTO JAVA PROVIDER\n+    // Crypto Java provider\n     api 'org.bouncycastle:bcprov-jdk16:1.46'\n     // OSS\n     api 'com.geoxp.oss:oss-client:1.0.1'\n@@ -35,13 +35,15 @@ tasks.withType(Jar) {\n }\n \n //\n-// Configure bintray artifacts, repo and name.\n+// Customize POM name and description.\n //\n-bintray {\n-    publications = ['maven']\n-\n-    pkg {\n-        repo = 'maven'\n-        name = 'warp10'\n+publishing {\n+    publications {\n+        maven(MavenPublication) {\n+            pom {\n+                name = \"Crypto\"\n+                description = \"Warp 10 crypto utilities\"\n+            }\n+        }\n     }\n }"
  },
  {
    "sha": "8c14628c5a6cbbe2a2d28abd0bd12394a7d5ebaa",
    "filename": "hbaseFilters/build.gradle",
    "status": "modified",
    "additions": 24,
    "deletions": 20,
    "changes": 44,
    "blob_url": "https://github.com/senx/warp10-platform/blob/69ee032f82b1c613f73c60dfdf1002dcfaff7195/hbaseFilters/build.gradle",
    "raw_url": "https://github.com/senx/warp10-platform/raw/69ee032f82b1c613f73c60dfdf1002dcfaff7195/hbaseFilters/build.gradle",
    "contents_url": "https://api.github.com/repos/senx/warp10-platform/contents/hbaseFilters/build.gradle?ref=69ee032f82b1c613f73c60dfdf1002dcfaff7195",
    "patch": "@@ -14,32 +14,36 @@\n //   limitations under the License.\n //\n \n+sourceSets {\n+  main {\n+    java {\n+      srcDir new File(project(':warp10').projectDir, \"src/main/java/\")\n+      include \"org/apache/hadoop/hbase/filter/*.java\"\n+    }\n+  }\n+}\n+\n+dependencies {\n+  compileOnly project(':warp10')\n+}\n+\n //\n-// Set jars title and class inclusion/exclusion\n+// Set jars title\n //\n tasks.withType(Jar) {\n     manifest.attributes.put(\"Implementation-Title\", \"HBase Filters\")\n-\n-    if('sources' == archiveClassifier) {\n-        from project(':warp10').sourceSets.main.allSource\n-    } else {\n-        from project(':warp10').sourceSets.main.output\n-    }\n-    include 'org/apache/hadoop/hbase/filter/**'\n }\n \n //\n-// Configure bintray artifacts, repo and name.\n+// Customize POM name and description.\n //\n-bintray {\n-    // Not uploaded to a maven repo, so just copy the jar.\n-    filesSpec {\n-        from jar\n-        into project.group.replaceAll('\\\\.', '/') + \"/$project.name/$project.version\"\n+publishing {\n+  publications {\n+    maven(MavenPublication) {\n+      pom {\n+        name = \"HBaseFilter\"\n+        description = \"Warp 10 HBase custom filter\"\n+      }\n     }\n-\n-    pkg {\n-        repo = 'generic'\n-        name = project.name\n-    }\n-}\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f9329690c78648652eb214f01726758eb80d5a5a",
    "filename": "token/build.gradle",
    "status": "modified",
    "additions": 10,
    "deletions": 8,
    "changes": 18,
    "blob_url": "https://github.com/senx/warp10-platform/blob/69ee032f82b1c613f73c60dfdf1002dcfaff7195/token/build.gradle",
    "raw_url": "https://github.com/senx/warp10-platform/raw/69ee032f82b1c613f73c60dfdf1002dcfaff7195/token/build.gradle",
    "contents_url": "https://api.github.com/repos/senx/warp10-platform/contents/token/build.gradle?ref=69ee032f82b1c613f73c60dfdf1002dcfaff7195",
    "patch": "@@ -41,14 +41,16 @@ tasks.withType(Jar) {\n }\n \n //\n-// Configure bintray artifacts, repo and name.\n-//\n-bintray {\n-    publications = ['maven']\n-\n-    pkg {\n-        repo = 'maven'\n-        name = 'warp10'\n+// Customize POM name and description.\n+//\n+publishing {\n+    publications {\n+        maven(MavenPublication) {\n+            pom {\n+                name = \"Token\"\n+                description = \"Warp 10 token utilities\"\n+            }\n+        }\n     }\n }\n "
  },
  {
    "sha": "0a4526e126f41de336dc73b3ba2763a5566e07bc",
    "filename": "warp10/build.gradle",
    "status": "modified",
    "additions": 9,
    "deletions": 22,
    "changes": 31,
    "blob_url": "https://github.com/senx/warp10-platform/blob/69ee032f82b1c613f73c60dfdf1002dcfaff7195/warp10/build.gradle",
    "raw_url": "https://github.com/senx/warp10-platform/raw/69ee032f82b1c613f73c60dfdf1002dcfaff7195/warp10/build.gradle",
    "contents_url": "https://api.github.com/repos/senx/warp10-platform/contents/warp10/build.gradle?ref=69ee032f82b1c613f73c60dfdf1002dcfaff7195",
    "patch": "@@ -19,22 +19,11 @@ plugins {\n     id \"com.selesse.git.changelog\" version \"0.3.0\"\n }\n \n-//\n-// Configurations\n-//\n-configurations {\n-    provided\n-}\n-\n sourceSets {\n     main {\n-        compileClasspath += configurations.provided\n         java {\n             srcDirs 'src/generated/thrift/gen-java'\n         }\n-        resources {\n-            srcDirs 'src/main/resources'\n-        }\n     }\n }\n \n@@ -219,18 +208,16 @@ tasks.withType(Jar) {\n }\n \n //\n-// Configure bintray artifacts, repo and name.\n+// Customize POM name and description.\n //\n-bintray {\n-    // Not uploaded to a maven repo, so just copy the jar.\n-    filesSpec {\n-        from createTarArchive\n-        into project.group.replaceAll('\\\\.', '/') + \"/$project.name/$project.version\"\n-    }\n-\n-    pkg {\n-        repo = 'generic'\n-        name = project.name\n+publishing {\n+    publications {\n+        maven(MavenPublication) {\n+            pom {\n+                name = \"Warp 10\"\n+                description = \"Warp 10 platform for time series storage and analysis\"\n+            }\n+        }\n     }\n }\n "
  },
  {
    "sha": "8debb163ff2f0c46f1fae42c7dee35961fb18099",
    "filename": "warpscript/build.gradle",
    "status": "modified",
    "additions": 92,
    "deletions": 116,
    "changes": 208,
    "blob_url": "https://github.com/senx/warp10-platform/blob/69ee032f82b1c613f73c60dfdf1002dcfaff7195/warpscript/build.gradle",
    "raw_url": "https://github.com/senx/warp10-platform/raw/69ee032f82b1c613f73c60dfdf1002dcfaff7195/warpscript/build.gradle",
    "contents_url": "https://api.github.com/repos/senx/warp10-platform/contents/warpscript/build.gradle?ref=69ee032f82b1c613f73c60dfdf1002dcfaff7195",
    "patch": "@@ -1,3 +1,5 @@\n+import org.gradle.api.tasks.bundling.Jar\n+\n //\n //   Copyright 2018-2021  SenX S.A.S.\n //\n@@ -31,91 +33,80 @@ ext {\n                         'jts2geojson', 'jackson-core', 'jackson-databind', 'jackson-annotations' ]\n }\n \n-//\n-// Set jars title and class inclusion/exclusion\n-//\n-tasks.withType(Jar) {\n-    manifest.attributes.put(\"Implementation-Title\", \"WarpScript\")\n-\n-    if('sources' == archiveClassifier) {\n-        from project(':warp10').sourceSets.main.allSource\n-    } else {\n-        from project(':warp10').sourceSets.main.output\n-    }\n-    include('REVISION')\n-    include 'io/warp10/Py4JEntryPoint.*'\n-    include 'io/warp10/SortedPathIterator.*'\n-    include 'io/warp10/SortedPathIterator$*'\n-    include 'io/warp10/WarpClassLoader.*'\n-    include 'io/warp10/json/**'\n-    include 'io/warp10/script/**'\n-    exclude 'io/warp10/script/ScriptRunner*.*'\n-    include 'io/warp10/CapacityExtractorOutputStream.*'\n-    include 'io/warp10/udf/**'\n-    include 'io/warp10/thrift/**'\n-    include 'io/warp10/WarpConfig.*'\n-    include 'io/warp10/WarpConfig$1.*'\n-    include 'io/warp10/WarpHexDecoder.*'\n-    include 'io/warp10/WarpManager.*'\n-    include 'io/warp10/WarpURLEncoder.*'\n-    include 'io/warp10/WarpURLDecoder.*'\n-    include 'io/warp10/DoubleUtils.*'\n-    include 'io/warp10/FloatUtils.*'\n-    include 'io/warp10/WrapperList.*'\n-    include 'io/warp10/WrapperList$ArrayItr.*'\n-    include 'io/warp10/Revision.*'\n-    include 'io/warp10/ThrowableUtils.*'\n-    include 'io/warp10/continuum/AuthenticationPlugin.*'\n-    include 'io/warp10/continuum/MetadataUtils.*'\n-    include 'io/warp10/continuum/MetadataUtils$*'\n-    include 'io/warp10/continuum/index/**'\n-    include 'io/warp10/continuum/thrift/data/**'\n-    include 'io/warp10/continuum/Configuration.*'\n-    include 'io/warp10/continuum/TimeSource.*'\n-    include 'io/warp10/continuum/TimeSource$*'\n-    include 'io/warp10/continuum/TextFileShuffler.*'\n-    include 'io/warp10/continuum/TextFileShuffler$*'\n-    include 'io/warp10/continuum/SortUtil.*'\n-    include 'io/warp10/continuum/SortUtil$*'\n-    include 'io/warp10/continuum/Tokens.*'\n-    include 'io/warp10/continuum/Tokens$*'\n-    include 'io/warp10/continuum/gts/**'\n-    include 'io/warp10/continuum/store/Constants.*'\n-    include 'io/warp10/continuum/store/DirectoryClient.*'\n-    include 'io/warp10/continuum/store/GTSDecoderIterator.*'\n-    include 'io/warp10/continuum/store/MetadataIterator.*'\n-    include 'io/warp10/continuum/store/thrift/data/**'\n-    include 'io/warp10/warp/sdk/**'\n-    include 'io/warp10/continuum/sensision/SensisionConstants.*'\n-    include 'io/warp10/continuum/store/StoreClient.*'\n-    include 'io/warp10/hadoop/**'\n-    include 'io/warp10/standalone/AcceleratorConfig.*'\n-    include 'io/warp10/standalone/AcceleratorConfig$*.*'\n-\n-    if('sources' == archiveClassifier) {\n-        from project(':token').sourceSets.main.allSource\n-    } else {\n-        from project(':token').sourceSets.main.output\n-    }\n-    include 'io/warp10/quasar/token/thrift/data/**'\n-    include 'io/warp10/quasar/filter/QuasarTokenFilter.*'\n-    include 'io/warp10/quasar/filter/exception/QuasarTokenException.*'\n-\n-    if('sources' == archiveClassifier) {\n-        from project(':crypto').sourceSets.main.allSource\n-    } else {\n-        from project(':crypto').sourceSets.main.output\n+sourceSets {\n+    main {\n+        java {\n+            srcDir new File(project(':warp10').projectDir, \"src/main/java\")\n+            include 'io/warp10/Py4JEntryPoint.*'\n+            include 'io/warp10/SortedPathIterator.*'\n+            include 'io/warp10/SortedPathIterator$*'\n+            include 'io/warp10/WarpClassLoader.*'\n+            include 'io/warp10/json/**'\n+            include 'io/warp10/script/**'\n+            exclude 'io/warp10/script/ScriptRunner*.*'\n+            include 'io/warp10/CapacityExtractorOutputStream.*'\n+            include 'io/warp10/udf/**'\n+            include 'io/warp10/thrift/**'\n+            include 'io/warp10/WarpConfig.*'\n+            include 'io/warp10/WarpConfig$1.*'\n+            include 'io/warp10/WarpHexDecoder.*'\n+            include 'io/warp10/WarpManager.*'\n+            include 'io/warp10/WarpURLEncoder.*'\n+            include 'io/warp10/WarpURLDecoder.*'\n+            include 'io/warp10/DoubleUtils.*'\n+            include 'io/warp10/FloatUtils.*'\n+            include 'io/warp10/WrapperList.*'\n+            include 'io/warp10/WrapperList$ArrayItr.*'\n+            include 'io/warp10/Revision.*'\n+            include 'io/warp10/ThrowableUtils.*'\n+            include 'io/warp10/continuum/AuthenticationPlugin.*'\n+            include 'io/warp10/continuum/MetadataUtils.*'\n+            include 'io/warp10/continuum/MetadataUtils$*'\n+            include 'io/warp10/continuum/index/**'\n+            include 'io/warp10/continuum/Configuration.*'\n+            include 'io/warp10/continuum/TimeSource.*'\n+            include 'io/warp10/continuum/TimeSource$*'\n+            include 'io/warp10/continuum/TextFileShuffler.*'\n+            include 'io/warp10/continuum/TextFileShuffler$*'\n+            include 'io/warp10/continuum/SortUtil.*'\n+            include 'io/warp10/continuum/SortUtil$*'\n+            include 'io/warp10/continuum/Tokens.*'\n+            include 'io/warp10/continuum/Tokens$*'\n+            include 'io/warp10/continuum/gts/**'\n+            include 'io/warp10/continuum/store/Constants.*'\n+            include 'io/warp10/continuum/store/DirectoryClient.*'\n+            include 'io/warp10/continuum/store/GTSDecoderIterator.*'\n+            include 'io/warp10/continuum/store/MetadataIterator.*'\n+            include 'io/warp10/warp/sdk/**'\n+            include 'io/warp10/continuum/sensision/SensisionConstants.*'\n+            include 'io/warp10/continuum/store/StoreClient.*'\n+            include 'io/warp10/hadoop/**'\n+            include 'io/warp10/standalone/AcceleratorConfig.*'\n+            include 'io/warp10/standalone/AcceleratorConfig$*.*'\n+\n+            srcDir new File(project(':warp10').projectDir, \"src/generated/thrift/gen-java\")\n+            include 'io/warp10/continuum/thrift/data/**'\n+            include 'io/warp10/continuum/store/thrift/data/**'\n+\n+            srcDir new File(project(':token').projectDir, \"src/generated/thrift/gen-java\")\n+            include 'io/warp10/quasar/filter/QuasarTokenFilter.*'\n+            include 'io/warp10/quasar/filter/exception/QuasarTokenException.*'\n+\n+            srcDir new File(project(':token').projectDir, \"src/main/java\")\n+            include 'io/warp10/quasar/token/thrift/data/**'\n+\n+            srcDir new File(project(':crypto').projectDir, \"src/main/java\")\n+            include 'io/warp10/crypto/**'\n+        }\n+        resources {\n+            srcDir new File(project(':warp10').projectDir, \"src/main/resources\")\n+            include('REVISION')\n+        }\n     }\n-    include 'io/warp10/crypto/**'\n }\n \n-//\n-// Customize POM filename\n-//\n-model {\n-    tasks.generatePomFileForMavenPublication {\n-        destination = file(\"$buildDir/generated-pom.xml\")\n-    }\n+dependencies {\n+    compileOnly project(':warp10')\n }\n \n //\n@@ -124,40 +115,25 @@ model {\n publishing {\n     publications {\n         maven(MavenPublication) {\n-            genPomForWarpscript(pom)\n-        }\n-    }\n-}\n-\n-//\n-// Configure bintray artifacts, repo and name.\n-//\n-bintray {\n-    publications = ['maven']\n-\n-    pkg {\n-        repo = 'maven'\n-        name = project.name\n-    }\n-}\n-\n-//\n-// Generate custom pom for WarpScript with the minimal dependencies\n-//\n-def genPomForWarpscript(Object pom) {\n-    pom.withXml {\n-        // compute the list of dependencies\n-        project(\":warp10\").configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each {\n-            directDep ->\n-                addChildsToWarpscriptDeps(directDep)\n-        }\n-\n-        def dependenciesNode = asNode().appendNode('dependencies')\n-        mc2DepsList.each {\n-            def dependencyNode = dependenciesNode.appendNode('dependency')\n-            dependencyNode.appendNode('groupId', it.getModuleGroup())\n-            dependencyNode.appendNode('artifactId', it.getModuleName())\n-            dependencyNode.appendNode('version', it.getModuleVersion())\n+            pom {\n+                name = \"WarpScript\"\n+                description = \"Warp 10 functions for the manipulation and analysis of time series\"\n+            }\n+            pom.withXml {\n+                // compute the list of dependencies\n+                project(\":warp10\").configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each {\n+                    directDep ->\n+                        addChildsToWarpscriptDeps(directDep)\n+                }\n+\n+                def dependenciesNode = asNode().appendNode('dependencies')\n+                mc2DepsList.each {\n+                    def dependencyNode = dependenciesNode.appendNode('dependency')\n+                    dependencyNode.appendNode('groupId', it.getModuleGroup())\n+                    dependencyNode.appendNode('artifactId', it.getModuleName())\n+                    dependencyNode.appendNode('version', it.getModuleVersion())\n+                }\n+            }\n         }\n     }\n }"
  }
]
