[
  {
    "sha": "1d1d8187b73650e38e9b914aa9fc7a333c659249",
    "filename": "Simplenote/src/androidTest/java/com/automattic/simplenote/utils/TagUtilsTest.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/Automattic/simplenote-android/blob/ae66fa3092b8656e09ab2576c0abb02cf9870fa7/Simplenote/src/androidTest/java/com/automattic/simplenote/utils/TagUtilsTest.java",
    "raw_url": "https://github.com/Automattic/simplenote-android/raw/ae66fa3092b8656e09ab2576c0abb02cf9870fa7/Simplenote/src/androidTest/java/com/automattic/simplenote/utils/TagUtilsTest.java",
    "contents_url": "https://api.github.com/repos/Automattic/simplenote-android/contents/Simplenote/src/androidTest/java/com/automattic/simplenote/utils/TagUtilsTest.java?ref=ae66fa3092b8656e09ab2576c0abb02cf9870fa7",
    "patch": "@@ -0,0 +1,48 @@\n+package com.automattic.simplenote.utils;\n+\n+import androidx.test.filters.SmallTest;\n+import androidx.test.runner.AndroidJUnit4;\n+\n+import com.automattic.simplenote.models.Note;\n+\n+import junit.framework.TestCase;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static androidx.test.espresso.matcher.ViewMatchers.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@RunWith(AndroidJUnit4.class)\n+@SmallTest\n+public class TagUtilsTest extends TestCase {\n+\n+    @Test\n+    public void testRenameTagInNote() {\n+        Note note = new Note(\"key\");\n+        note.setTags(tagList(\"one\", \"two\", \"three\"));\n+\n+        TagUtils.renameTagInNote(note, \"one\", \"four\");\n+        assertThat(note.getTags(), is(tagList(\"four\", \"two\", \"three\")));\n+\n+        TagUtils.renameTagInNote(note, \"two\", \"Two\");\n+        assertThat(note.getTags(), is(tagList(\"four\", \"Two\", \"three\")));\n+\n+        TagUtils.renameTagInNote(note, \"three\", \"four\");\n+        assertThat(note.getTags(), is(tagList(\"four\", \"Two\")));\n+\n+        TagUtils.renameTagInNote(note, \"four\", \"two\");\n+        assertThat(note.getTags(), is(tagList(\"Two\")));\n+    }\n+\n+    private List<String> tagList(String... tags) {\n+        List<String> tagArray = new ArrayList<>(tags.length);\n+        Collections.addAll(tagArray, tags);\n+        return tagArray;\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "841cdc69812ac26665b084ca667526af4e7bd084",
    "filename": "Simplenote/src/main/java/com/automattic/simplenote/models/Tag.java",
    "status": "modified",
    "additions": 24,
    "deletions": 43,
    "changes": 67,
    "blob_url": "https://github.com/Automattic/simplenote-android/blob/ae66fa3092b8656e09ab2576c0abb02cf9870fa7/Simplenote/src/main/java/com/automattic/simplenote/models/Tag.java",
    "raw_url": "https://github.com/Automattic/simplenote-android/raw/ae66fa3092b8656e09ab2576c0abb02cf9870fa7/Simplenote/src/main/java/com/automattic/simplenote/models/Tag.java",
    "contents_url": "https://api.github.com/repos/Automattic/simplenote-android/contents/Simplenote/src/main/java/com/automattic/simplenote/models/Tag.java?ref=ae66fa3092b8656e09ab2576c0abb02cf9870fa7",
    "patch": "@@ -11,8 +11,6 @@\n \n import org.json.JSONObject;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.Locale;\n \n import static com.automattic.simplenote.models.Note.TAGS_PROPERTY;\n@@ -78,55 +76,38 @@ public void setIndex(Integer tagIndex) {\n     }\n \n     public void renameTo(String tagOld, String tagNew, int index, Bucket<Note> notesBucket) throws BucketObjectNameInvalid {\n-        // When old tag ID is equal to new tag hash, tag is being renamed to lexical variation.\n-        boolean isOldIdEqualToNewHash = getSimperiumKey().equals(TagUtils.hashTag(tagNew));\n+        if (tagOld.equals(tagNew)) return;\n+\n+        renameTagInNotes(tagOld, tagNew, notesBucket);\n+\n         //noinspection unchecked\n         Bucket<Tag> tagsBucket = (Bucket<Tag>) getBucket();\n-        // Get all notes with old tag to update.\n-        ObjectCursor<Note> notes = findNotes(notesBucket, tagOld);\n-\n-        while (notes.moveToNext()) {\n-            Note note = notes.getObject();\n-            List<String> tagsNew = new ArrayList<>();\n-            List<String> tagsHash = new ArrayList<>();\n-\n-            // Create lists of note's tags excluding old tag.\n-            for (String tag : note.getTags()) {\n-                if (!tag.equals(tagOld)) {\n-                    tagsNew.add(tag);\n-                    tagsHash.add(TagUtils.hashTag(tag));\n-                }\n-            }\n \n-            // Add lexical tag to note.  Update this tag's name and save it.\n-            if (isOldIdEqualToNewHash) {\n-                tagsNew.add(tagNew);\n-\n-                if (!getName().equals(tagNew)) {\n-                    setName(tagNew);\n-                    save();\n-                }\n-            // Add new canonical tag to note and create new tag.  Delete this tag.\n-            } else {\n-                // Add new tag if note doesn't already have same hashed tag.\n-                if (!tagsHash.contains(TagUtils.hashTag(tagNew))) {\n-                    tagsNew.add(TagUtils.getCanonicalFromLexical(tagsBucket, tagNew));\n-                }\n-\n-                // Create new tag if canonical tag doesn't already exist.\n-                if (!TagUtils.hasCanonicalOfLexical(tagsBucket, tagNew)) {\n-                    TagUtils.createTag(tagsBucket, tagNew, index);\n-                }\n-\n-                delete();\n+        boolean isOldIdEqualToNewHash = getSimperiumKey().equals(TagUtils.hashTag(tagNew));\n+        if (isOldIdEqualToNewHash) {\n+            setName(tagNew);\n+            save();\n+\n+        } else {\n+            // Create new tag if canonical tag doesn't already exist.\n+            if (!TagUtils.hasCanonicalOfLexical(tagsBucket, tagNew)) {\n+                TagUtils.createTag(tagsBucket, tagNew, index);\n             }\n \n-            // Add new tags to note and save it.\n-            note.setTags(tagsNew);\n+            delete();\n+        }\n+    }\n+\n+    private void renameTagInNotes(String tagOld, String tagNew, Bucket<Note> notesBucket) {\n+        ObjectCursor<Note> notesWithOldTag = findNotes(notesBucket, tagOld);\n+\n+        while (notesWithOldTag.moveToNext()) {\n+            Note note = notesWithOldTag.getObject();\n+            TagUtils.renameTagInNote(note, tagOld, tagNew);\n             note.save();\n         }\n \n-        notes.close();\n+        notesWithOldTag.close();\n     }\n \n     public ObjectCursor<Note> findNotes(Bucket<Note> notesBucket, String name) {"
  },
  {
    "sha": "af6ddc2c3536cdd9aeb10a13a6e42a58f09ba50c",
    "filename": "Simplenote/src/main/java/com/automattic/simplenote/utils/TagUtils.java",
    "status": "modified",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/Automattic/simplenote-android/blob/ae66fa3092b8656e09ab2576c0abb02cf9870fa7/Simplenote/src/main/java/com/automattic/simplenote/utils/TagUtils.java",
    "raw_url": "https://github.com/Automattic/simplenote-android/raw/ae66fa3092b8656e09ab2576c0abb02cf9870fa7/Simplenote/src/main/java/com/automattic/simplenote/utils/TagUtils.java",
    "contents_url": "https://api.github.com/repos/Automattic/simplenote-android/contents/Simplenote/src/main/java/com/automattic/simplenote/utils/TagUtils.java?ref=ae66fa3092b8656e09ab2576c0abb02cf9870fa7",
    "patch": "@@ -2,6 +2,7 @@\n \n import android.util.Log;\n \n+import com.automattic.simplenote.models.Note;\n import com.automattic.simplenote.models.Tag;\n import com.simperium.client.Bucket;\n import com.simperium.client.BucketObjectMissingException;\n@@ -11,6 +12,9 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.text.Normalizer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n import java.util.Locale;\n \n public class TagUtils {\n@@ -165,4 +169,42 @@ private static String replaceEncoded(String encoded) {\n             .replace(\".\", \"%2E\")\n             .replace(\"_\", \"%5F\");\n     }\n+\n+    /**\n+     * Rename a tag in a note, given the name of the tag to be renamed and the new tag name.\n+     * @param tagOld The tag to be renamed.\n+     * @param tagNew The tag to replace the old tag.\n+     * @param note The note object to be modified.\n+     */\n+    public static void renameTagInNote(Note note, String tagOld, String tagNew) {\n+        List<String> tags = note.getTags();\n+\n+        List<String> tagHashList = new ArrayList<>();\n+        for (String tag : tags) {\n+            tagHashList.add(TagUtils.hashTag(tag));\n+        }\n+\n+        String tagOldHash = TagUtils.hashTag(tagOld);\n+        String tagNewHash = TagUtils.hashTag(tagNew);\n+        boolean isOldHashEqualNew = tagOldHash.equals(tagNewHash);\n+\n+        ListIterator<String> iterator = tags.listIterator();\n+        while (iterator.hasNext()) {\n+            String tag = iterator.next();\n+\n+            if (tag.equals(tagOld)) {\n+                // Remove old tag\n+                iterator.remove();\n+\n+                if (isOldHashEqualNew || !tagHashList.contains(tagNewHash)) {\n+                    // Add new tag\n+                    iterator.add(tagNew);\n+                }\n+            }\n+\n+        }\n+\n+        note.setTags(tags);\n+    }\n+\n }"
  }
]
