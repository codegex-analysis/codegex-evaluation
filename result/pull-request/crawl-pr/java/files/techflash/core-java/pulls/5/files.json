[
  {
    "sha": "e4aa3d9934f88fa0255a75c3d4473f3e02455c34",
    "filename": ".idea/codeStyles/Project.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/.idea/codeStyles/Project.xml",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/.idea/codeStyles/Project.xml",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/.idea/codeStyles/Project.xml?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -166,18 +166,6 @@\n         <option name=\"TAB_SIZE\" value=\"2\" />\n       </indentOptions>\n     </codeStyleSettings>\n-    <codeStyleSettings language=\"SASS\">\n-      <indentOptions>\n-        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n-        <option name=\"TAB_SIZE\" value=\"2\" />\n-      </indentOptions>\n-    </codeStyleSettings>\n-    <codeStyleSettings language=\"SCSS\">\n-      <indentOptions>\n-        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n-        <option name=\"TAB_SIZE\" value=\"2\" />\n-      </indentOptions>\n-    </codeStyleSettings>\n     <codeStyleSettings language=\"TypeScript\">\n       <indentOptions>\n         <option name=\"INDENT_SIZE\" value=\"2\" />"
  },
  {
    "sha": "835a4efe43f25962e3794648a09fcd280234ef7c",
    "filename": "src/main/java/Test.java",
    "status": "modified",
    "additions": 87,
    "deletions": 15,
    "changes": 102,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/Test.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/Test.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/main/java/Test.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -1,28 +1,100 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n public abstract class Test {\n \n   private static StringBuilder resu = new StringBuilder();\n \n-  public static void main(String[] args) {\n-    List<String> rowIds = new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n-    List<String> toBeDeleted = new ArrayList<>(Arrays.asList(\"2\", \"4\"));\n+//  public static void main(String[] args) {\n+//    List<String> rowIds = new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n+//    List<String> toBeDeleted = new ArrayList<>(Arrays.asList(\"2\", \"4\"));\n+//\n+//    List<String> sublist = rowIds.subList(1, rowIds.size());\n+//    sublist.add(rowIds.size() - 1, rowIds.get(0));\n+//    System.out.println(sublist);\n+//  }\n+\n+  /** Gets or Sets SectionType */\n+  public enum SectionType {\n+    FORMSECTION(\"FormSection\"),\n+\n+    SUPPLIERSECTION(\"SupplierSection\"),\n+\n+    TEAMSECTION(\"TeamSection\"),\n+\n+    TODOSECTION(\"TodoSection\"),\n+\n+    FIELDSSECTION(\"FieldsSection\"),\n+\n+    FINDINGSSECTION(\"FindingsSection\"),\n+\n+    VERBATIMSSECTION(\"VerbatimsSection\"),\n+\n+    SUPPLIERASSESSMENTSECTION(\"SupplierAssessmentSection\"),\n+\n+    PROJECTASSESSMENTSECTION(\"ProjectAssessmentSection\"),\n \n-    List<String> sublist = rowIds.subList(1, rowIds.size());\n-    sublist.add(rowIds.size() - 1, rowIds.get(0));\n-    System.out.println(sublist);\n+    KNOWLEDGECHECKSECTION(\"KnowledgeCheckSection\"),\n+\n+    FUNDINGSECTION(\"FundingSection\"),\n+\n+    ACTUALSSECTION(\"ActualsSection\"),\n+\n+    LIBRARYSECTION(\"LibrarySection\"),\n+\n+    TABLESECTION(\"TableSection\"),\n+\n+    NESTEDPROJECTSSECTION(\"NestedProjectsSection\"),\n+\n+    ANALYSISPROJECTSECTION(\"AnalysisProjectSection\");\n+\n+    private String value;\n+\n+    SectionType(String value) {\n+      this.value = value;\n+    }\n+\n+\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+\n+    public static SectionType fromValue(String text) {\n+      for (SectionType b : SectionType.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  static class ABC {\n+   private SectionType sectionType;\n+\n+\n+    public SectionType getSectionType() {\n+      return sectionType;\n+    }\n+\n+    public void setSectionType(SectionType sectionType) {\n+      this.sectionType = sectionType;\n+    }\n   }\n \n-  private static void getDocumentPage(int n) {\n-    System.out.println(n);\n+    public static void main(String[] args) {\n+//    List<String> lists = Arrays.asList(\"x\", \"y\", \"zff\");\n+//\n+//    List<String> stuff = lists.stream()\n+//        .filter( x -> x.length() >=3 )\n+//        .collect(Collectors.toUnmodifiableList());\n+\n+    System.out.println(SectionType.valueOf(\"erer\"));\n   }\n \n+\n   private static String conv(int no) {\n-      if (no <= 0) {\n-          return \"0\";\n-      }\n+    if (no <= 0) {\n+      return \"0\";\n+    }\n     int s = no % 2;\n     conv(no / 2);\n     return resu.append(s).toString();"
  },
  {
    "sha": "fc3d76f81e5c654a8985339d7872b4d4531b891c",
    "filename": "src/main/java/collection/CollectionOperations.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/collection/CollectionOperations.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/collection/CollectionOperations.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/main/java/collection/CollectionOperations.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,33 @@\n+package collection;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CollectionOperations {\n+\n+  public static void main(String[] args) {\n+    retainAllSample();\n+  }\n+\n+  public static void retainAllSample() {\n+\n+    Map<String, String> sourceFieldsByFieldDefId = new HashMap<>();\n+    Map<String, String> destinationFieldsByFieldDefId = new HashMap<>();\n+\n+    sourceFieldsByFieldDefId.put(\"1\", \"abc\");\n+    sourceFieldsByFieldDefId.put(\"2\", \"abcd\");\n+    sourceFieldsByFieldDefId.put(\"3\", \"abcde\");\n+\n+    destinationFieldsByFieldDefId.put(\"1\", \"abc\");\n+    destinationFieldsByFieldDefId.put(\"3\", \"abcde\");\n+\n+    sourceFieldsByFieldDefId.keySet().retainAll(destinationFieldsByFieldDefId.keySet());\n+\n+    sourceFieldsByFieldDefId.forEach((k, v) -> {\n+      System.out.println(\"k \" + k);\n+      System.out.println(\"v \" + v);\n+    });\n+  }\n+}\n+\n+"
  },
  {
    "sha": "3b0af637838191bef6fce4f4e470145c48110462",
    "filename": "src/main/java/collection/ListSort.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/collection/ListSort.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/collection/ListSort.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/main/java/collection/ListSort.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,34 @@\n+package collection;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class ListSort {\n+\n+  public static void main(String[] args) {\n+\n+    List<Integer> unsortedList1 = Arrays.asList(10, 3, 4, 11, 222, 33);\n+    List<Integer> unsortedList2 = Arrays.asList(3, 33, 10, 222, 4, 11);\n+\n+    unsortedList1.sort((a, b) -> {\n+      Integer pos1 = unsortedList2.indexOf(a);\n+      Integer pos2 = unsortedList2.indexOf(b);\n+      return pos1.compareTo(pos2);\n+    });\n+\n+    System.out.println(unsortedList1);\n+  }\n+\n+\n+  public void sortListAsPerOther(List<Integer> listToBeSorted, List<Integer> listAsPerSort) {\n+    if (listAsPerSort.isEmpty() && listToBeSorted.isEmpty()\n+        && listToBeSorted.size() != listAsPerSort.size()) {\n+      return;\n+    }\n+\n+    for (int i = 0; i < listToBeSorted.size(); i++) {\n+      int targetIndex = listAsPerSort.indexOf(listAsPerSort.get(i));\n+\n+    }\n+  }\n+}"
  },
  {
    "sha": "cecaf3b4211657f3f82e88d8120957453ced64e7",
    "filename": "src/main/java/file/FileStreamDemo.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/file/FileStreamDemo.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/file/FileStreamDemo.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/main/java/file/FileStreamDemo.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,16 @@\n+package file;\n+\n+import java.io.IOException;\n+import java.util.function.Supplier;\n+\n+public class FileStreamDemo {\n+  public static void main(String[] args) throws IOException {\n+    runAfunc(() -> \"shit\");\n+  }\n+\n+  private static void runAfunc(Supplier<String> doShit) {\n+    System.out.println(doShit.get());\n+  }\n+\n+}\n+"
  },
  {
    "sha": "f95f85d6e13133d880add2bff2a5d54d125c3c1d",
    "filename": "src/main/java/ll/LinkList.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/ll/LinkList.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/ll/LinkList.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/main/java/ll/LinkList.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -78,7 +78,7 @@ public void insert(T data, int position) {\n   }\n \n   public void reverse() {\n-    Node<T> current = head, prev = null, next = null;\n+    Node<T> current = head, prev = null, next;\n     if (head == null || head.next == null) {\n       return;\n     }"
  },
  {
    "sha": "4d2790c3de8c8fe1f855ecbb97636ffadeb7b2cb",
    "filename": "src/main/java/throwaway/Inner.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/throwaway/Inner.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/throwaway/Inner.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/main/java/throwaway/Inner.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright 2018. All rights reserved. All rights, titles and interest in and to this software are\n+ * owned by Market Logic Software AG, Berlin, Germany. Permission to use, copy, modify, distribute\n+ * or otherwise make this software available to any third party and for any purpose requires a\n+ * signed licensing agreement. Visit us at www.MarketLogicSoftware.com for commercial licensing\n+ * opportunities.\n+ */\n+package throwaway;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Objects;\n+\n+public class Inner extends HashMap<String, String> implements Serializable {\n+  private static final long serialVersionUID = 1L;\n+\n+  private String id = null;\n+\n+  private String text = null;\n+\n+  public Inner id(String id) {\n+    this.id = id;\n+    return this;\n+  }\n+\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public void setId(String id) {\n+    this.id = id;\n+  }\n+\n+  public Inner text(String text) {\n+    this.text = text;\n+    return this;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public void setText(String text) {\n+    this.text = text;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    Inner inner = (Inner) o;\n+    return Objects.equals(this.id, inner.id)\n+        && Objects.equals(this.text, inner.text)\n+        && super.equals(o);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(id, text, super.hashCode());\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"class Inner {\\n\");\n+    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+    sb.append(\"    id: \").append(toIndentedString(id)).append(\"\\n\");\n+    sb.append(\"    text: \").append(toIndentedString(text)).append(\"\\n\");\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Convert the given object to string with each line indented by 4 spaces (except the first line).\n+   */\n+  private String toIndentedString(java.lang.Object o) {\n+    if (o == null) {\n+      return \"null\";\n+    }\n+    return o.toString().replace(\"\\n\", \"\\n    \");\n+  }\n+}"
  },
  {
    "sha": "108409e966b467fc39ab38ddebef6a20b0b0f650",
    "filename": "src/main/java/tree/BTree.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/tree/BTree.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/tree/BTree.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/main/java/tree/BTree.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,45 @@\n+package tree;\n+\n+public class BTree {\n+\n+  private Node root;\n+\n+  public void add(int data) {\n+    root = add(data, root);\n+  }\n+\n+  private Node add(int data, Node root) {\n+    if (root == null) {\n+      root = newNode(data);\n+    } else if (data > root.data) {\n+      root.right = (add(data, root.right));\n+    } else {\n+      return root.left = add(data, root.left);\n+    }\n+    return root;\n+  }\n+\n+  private Node newNode(int data) {\n+    return new Node(data, null, null);\n+  }\n+\n+  public void delete(int data) {\n+\n+  }\n+\n+  public void print() {\n+    print(root);\n+  }\n+\n+  private void print(Node root) {\n+    if (root == null) {\n+      return;\n+    } else if (root.left != null) {\n+      print(root.left);\n+    } else if (root.right != null) {\n+      print(root.right);\n+    }\n+\n+    System.out.println(root.data);\n+  }\n+}"
  },
  {
    "sha": "43ed282f1ce65a80ad38278aefb80e9c39fd3ac0",
    "filename": "src/main/java/tree/Node.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/tree/Node.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/main/java/tree/Node.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/main/java/tree/Node.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,12 @@\n+package tree;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Node {\n+  public int data;\n+  public Node right;\n+  public Node left;\n+}"
  },
  {
    "sha": "1ee40296473cd78d1b303764e37bf9197dc799f0",
    "filename": "src/test/java/general/GeneralTest.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/general/GeneralTest.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/general/GeneralTest.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/test/java/general/GeneralTest.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,33 @@\n+package general;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+\n+enum Time {\n+  GOODTIME,\n+  BADTIME;\n+\n+  public static boolean isValidKey(String key) {\n+    try {\n+      return Time.valueOf(key) instanceof Time;\n+    } catch (IllegalArgumentException e) {\n+      return false;\n+    }\n+  }\n+}\n+\n+  public class GeneralTest {\n+\n+\n+    @Test\n+    public void test() {\n+      List<String> x = new ArrayList<>();\n+      x.add(\"a\");\n+      x.add(\"b\");\n+      x.add(\"c\");\n+      x.removeAll(Arrays.asList(\"2\", \"1\"));\n+      System.out.println(x);\n+    }\n+  }"
  },
  {
    "sha": "bb5ff491a4c965caf8d0adf1bea6eee0a4f6b1da",
    "filename": "src/test/java/general/Inner.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/general/Inner.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/general/Inner.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/test/java/general/Inner.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright 2018. All rights reserved. All rights, titles and interest in and to this software are\n+ * owned by Market Logic Software AG, Berlin, Germany. Permission to use, copy, modify, distribute\n+ * or otherwise make this software available to any third party and for any purpose requires a\n+ * signed licensing agreement. Visit us at www.MarketLogicSoftware.com for commercial licensing\n+ * opportunities.\n+ */\n+package general;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Objects;\n+\n+public class Inner extends HashMap<String, String> implements Serializable {\n+  private static final long serialVersionUID = 1L;\n+\n+  private String id = null;\n+\n+  private String text = null;\n+\n+  public Inner id(String id) {\n+    this.id = id;\n+    return this;\n+  }\n+\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public void setId(String id) {\n+    this.id = id;\n+  }\n+\n+  public Inner text(String text) {\n+    this.text = text;\n+    return this;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public void setText(String text) {\n+    this.text = text;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    Inner inner = (Inner) o;\n+    return Objects.equals(this.id, inner.id)\n+        && Objects.equals(this.text, inner.text)\n+        && super.equals(o);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(id, text, super.hashCode());\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"class Inner {\\n\");\n+    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+    sb.append(\"    id: \").append(toIndentedString(id)).append(\"\\n\");\n+    sb.append(\"    text: \").append(toIndentedString(text)).append(\"\\n\");\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Convert the given object to string with each line indented by 4 spaces (except the first line).\n+   */\n+  private String toIndentedString(Object o) {\n+    if (o == null) {\n+      return \"null\";\n+    }\n+    return o.toString().replace(\"\\n\", \"\\n    \");\n+  }\n+}"
  },
  {
    "sha": "88ea1225c7f4ef3fce607a2919adcc37312485d9",
    "filename": "src/test/java/rough/FileTests.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/rough/FileTests.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/rough/FileTests.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/test/java/rough/FileTests.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,39 @@\n+package rough;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.Test;\n+\n+public class FileTests {\n+\n+  @Test\n+  public void TestArrayStream() {\n+    byte x[] = {'a', 'b', 'c'};\n+    ByteArrayInputStream stream = new ByteArrayInputStream(x);\n+\n+    int l;\n+    while ((l = stream.read()) > -1) {\n+      System.out.println((char) l);\n+    }\n+  }\n+\n+  @Test\n+  public void TestStreamChaining() throws IOException {\n+    BufferedReader br =\n+        Files.newBufferedReader(Path.of(\"src/test/java/rough/xyz.txt\"));\n+\n+//        new BufferedInputStream(\n+//        new FileInputStream(\"\"));\n+\n+    String line;\n+    while ((line = br.readLine()) != null) {\n+      System.out.print(line);\n+    }\n+    System.out.println();\n+  }\n+}"
  },
  {
    "sha": "36e9c03c4fff3769349f3601cc9c5b074aaa2b12",
    "filename": "src/test/java/rough/Tests.java",
    "status": "added",
    "additions": 157,
    "deletions": 0,
    "changes": 157,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/rough/Tests.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/rough/Tests.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/test/java/rough/Tests.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,157 @@\n+package rough;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.function.BooleanSupplier;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+\n+public class Tests {\n+\n+  @Test\n+  public void testLambdas() {\n+    int x = 1;\n+    BooleanSupplier shouldPush = () -> x == 1;\n+    System.out.println(shouldPush.getAsBoolean());\n+\n+    Function<Integer, String> concept = (input) -> input + \"1\";\n+\n+    String result = concept.apply(10);\n+    System.out.println(result);\n+\n+  }\n+\n+  enum Switch {\n+    ON,\n+    OFF\n+  }\n+\n+  @Test\n+  public void someTest() {\n+\n+    List<Integer> items = Arrays.asList(10, 20, 30)\n+        .stream()\n+        .filter(i -> i > 10)\n+        .collect(Collectors.toList());\n+    System.out.println(items);\n+    System.out.println(items.size());\n+  }\n+\n+  @Test\n+  public void immutableTest() {\n+    System.out.println(\"\".equals(\"\"));\n+    System.out.println(new ArrayList<>().size());\n+    Arrays.stream(\"\".split(\",\")).forEach(System.out::print);\n+    List<String> lists = Arrays.asList(\"\".split(\",\"));\n+    System.out.println(lists.get(0));\n+    System.out.println(lists.size());\n+    System.out.println(lists == null || lists.isEmpty());\n+  }\n+\n+\n+  @Test\n+  public void enumTest() {\n+    Switch lightSwitch = Switch.OFF;\n+    System.out.println(lightSwitch == null);\n+  }\n+\n+  @Test\n+  public void dateTest() throws ParseException {\n+    Date projectStartDate1 = new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2021-02-24\");\n+    Date projectStartDate2 = new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2021-02-25\");\n+\n+    Date projectEndDate1 = new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2021-02-27\");\n+    Date projectEndDate2 = new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2021-02-28\");\n+\n+    System.out.println(projectStartDate2);\n+  }\n+\n+  @Test\n+  public void testConsumer() {\n+    List<Integer> evenNumbers = new ArrayList<>();\n+    collectAllEvens(Arrays.asList(10, 20, 30, 11, 31, 37, 95, 100),\n+        n -> {\n+          if (n % 2 == 0) {\n+            evenNumbers.add(n);\n+          }\n+        });\n+    System.out.println(evenNumbers);\n+  }\n+\n+  private static void collectAllEvens(List<Integer> numbers, Consumer<Integer> consumer) {\n+    numbers.forEach(consumer);\n+  }\n+\n+  @Test\n+  public void flatMap(){\n+    class Add {\n+      public String streetName;\n+      public String city;\n+\n+      public Add(String streetName, String city) {\n+        this.streetName = streetName;\n+        this.city = city;\n+      }\n+\n+      @Override\n+      public String toString() {\n+        return \"Add{\" +\n+            \"streetName='\" + streetName + '\\'' +\n+            \", city='\" + city + '\\'' +\n+            '}';\n+      }\n+    }\n+    class Emp {\n+      String name;\n+      List<Add> addresses;\n+\n+      public Emp(String name, List<Add> addresses) {\n+        this.name = name;\n+        this.addresses = addresses;\n+      }\n+    }\n+\n+    class Dept {\n+      List<Emp> emp;\n+      public Dept(List<Emp> emp) {\n+        this.emp = emp;\n+      }\n+    }\n+\n+    Dept dept = new Dept(Arrays.asList(\n+        new Emp(\"sunil\",\n+            Arrays.asList(\n+                new Add(\"Leibniz\", \"Berlin\"),\n+                new Add(\"Bismark\", \"Berlin\"))\n+            ),\n+        new Emp(\"xyz\",\n+            Arrays.asList(\n+                new Add(\"abc\", \"Berlin\"),\n+                new Add(\"exy\", \"Berlin\"))\n+            )\n+\n+    ));\n+\n+    dept.emp\n+        .stream()\n+        .flatMap(emp -> emp.addresses.stream())\n+        .forEach(\n+            add -> System.out.println(add)\n+        );\n+  }\n+\n+  @Test\n+  public void removeAll() {\n+    char [] x = {'l'};\n+    List<String> list = new ArrayList<>();\n+    list.add(\"1\");\n+    list.removeAll(Arrays.asList(\"1\", \"2\"));\n+    System.out.println(list);\n+  }\n+}"
  },
  {
    "sha": "95d09f2b10159347eece71399a7e2e907ea3df4f",
    "filename": "src/test/java/rough/xyz.txt",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/rough/xyz.txt",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/rough/xyz.txt",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/test/java/rough/xyz.txt?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1 @@\n+hello world\n\\ No newline at end of file"
  },
  {
    "sha": "8f9c526bd03c5b5863d04a02b2d05fbec789dba7",
    "filename": "src/test/java/tree/TreeTest.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/techflash/core-java/blob/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/tree/TreeTest.java",
    "raw_url": "https://github.com/techflash/core-java/raw/febf94b0fd145d5407e3959cb56165e402d086f1/src/test/java/tree/TreeTest.java",
    "contents_url": "https://api.github.com/repos/techflash/core-java/contents/src/test/java/tree/TreeTest.java?ref=febf94b0fd145d5407e3959cb56165e402d086f1",
    "patch": "@@ -0,0 +1,18 @@\n+package tree;\n+\n+import org.junit.Test;\n+\n+public class TreeTest {\n+\n+  @Test\n+  public void addTest() {\n+    BTree bTree = new BTree();\n+    bTree.add(10);\n+    bTree.add(11);\n+    bTree.add(12);\n+    bTree.add(9);\n+\n+    bTree.print();\n+  }\n+\n+}"
  }
]
