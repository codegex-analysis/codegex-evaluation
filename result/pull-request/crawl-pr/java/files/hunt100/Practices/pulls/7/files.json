[
  {
    "sha": "604c8c6373cd97b59c9a6be892a60f91d87547c3",
    "filename": "src/main/java/kz/test/Main.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/hunt100/Practices/blob/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/Main.java",
    "raw_url": "https://github.com/hunt100/Practices/raw/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/Main.java",
    "contents_url": "https://api.github.com/repos/hunt100/Practices/contents/src/main/java/kz/test/Main.java?ref=100dfe85acfba3e5a6afb722f295b8dcca9c4703",
    "patch": "@@ -1,8 +1,40 @@\n package kz.test;\n \n+import kz.test.practice6.Animal;\n+import kz.test.practice6.Cat;\n+import kz.test.practice6.Dog;\n+\n+import java.util.List;\n+\n public class Main {\n \n     public static void main(String[] args) {\n+        Cat cat = new Cat(\"cat\", 200);\n+        Dog dog = new Dog(\"dog\", 500, 10);\n+        Animal aniCat = new Cat(\"Meow\", 200);\n+        Animal aniDog = new Dog(\"Bark\", 500, 10);\n+\n+        cat.run(200);\n+        aniCat.swim(10);\n+\n+        dog.run(250);\n+        aniDog.swim(10);\n+\n+        System.out.println();\n+        getAnimalCount(List.of(cat, dog, aniCat, aniDog));\n+    }\n \n+    private static void getAnimalCount(List<Animal> animals) {\n+        int catCount = 0;\n+        int dogCount = 0;\n+        for (Animal a : animals) {\n+            if (a instanceof Cat) {\n+                catCount += 1;\n+            }\n+            if (a instanceof Dog) {\n+                dogCount += 1;\n+            }\n+        }\n+        System.out.println(\"Количество животных: \" + animals.size() + \"\\nКоличество кошек: \" + catCount + \"\\nКоличество собак:\" + dogCount);\n     }\n }"
  },
  {
    "sha": "c5988ba33ab0020cec2ea584b02ddbe8082bab22",
    "filename": "src/main/java/kz/test/practice6/Animal.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/hunt100/Practices/blob/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/practice6/Animal.java",
    "raw_url": "https://github.com/hunt100/Practices/raw/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/practice6/Animal.java",
    "contents_url": "https://api.github.com/repos/hunt100/Practices/contents/src/main/java/kz/test/practice6/Animal.java?ref=100dfe85acfba3e5a6afb722f295b8dcca9c4703",
    "patch": "@@ -0,0 +1,31 @@\n+package kz.test.practice6;\n+\n+import kz.test.practice6.utils.Practice6Utils;\n+\n+public abstract class Animal {\n+\n+    private String name;\n+\n+    protected Animal(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void run(int distance) {\n+        if (Practice6Utils.isPositive(distance)) {\n+            System.out.println(this.getName() + \" пробежал \" + distance + \" м.\");\n+        }\n+    }\n+\n+    public void swim(int distance) {\n+        System.out.println(name + \" не умеет плавать. А так хотелось :(\");\n+    }\n+\n+}"
  },
  {
    "sha": "42df1cc6a7d08f109b14836939339078c4576156",
    "filename": "src/main/java/kz/test/practice6/Cat.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/hunt100/Practices/blob/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/practice6/Cat.java",
    "raw_url": "https://github.com/hunt100/Practices/raw/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/practice6/Cat.java",
    "contents_url": "https://api.github.com/repos/hunt100/Practices/contents/src/main/java/kz/test/practice6/Cat.java?ref=100dfe85acfba3e5a6afb722f295b8dcca9c4703",
    "patch": "@@ -0,0 +1,31 @@\n+package kz.test.practice6;\n+\n+import kz.test.practice6.utils.Practice6Utils;\n+\n+public class Cat extends Animal {\n+\n+    private int maxRunDistance;\n+\n+    public Cat(String name, int maxRunDistance) {\n+        super(name);\n+        this.maxRunDistance = maxRunDistance;\n+    }\n+\n+    public int getMaxRunDistance() {\n+        return maxRunDistance;\n+    }\n+\n+    public void setMaxRunDistance(int maxRunDistance) {\n+        this.maxRunDistance = maxRunDistance;\n+    }\n+\n+    @Override\n+    public void run(int distance) {\n+        try {\n+            Practice6Utils.validateValue(this.getClass().getSimpleName(), distance, maxRunDistance);\n+            System.out.println(this.getName() + \" пробежал \" + distance + \" м.\");\n+        } catch (Exception e) {\n+            System.err.println(e.toString());\n+        }\n+    }\n+}"
  },
  {
    "sha": "c41800ffb988c8007b2a532471e5b34f90d831a5",
    "filename": "src/main/java/kz/test/practice6/Dog.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/hunt100/Practices/blob/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/practice6/Dog.java",
    "raw_url": "https://github.com/hunt100/Practices/raw/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/practice6/Dog.java",
    "contents_url": "https://api.github.com/repos/hunt100/Practices/contents/src/main/java/kz/test/practice6/Dog.java?ref=100dfe85acfba3e5a6afb722f295b8dcca9c4703",
    "patch": "@@ -0,0 +1,51 @@\n+package kz.test.practice6;\n+\n+import kz.test.practice6.utils.Practice6Utils;\n+\n+public class Dog extends Animal {\n+\n+    private int maxRunDistance;\n+    private int maxSwimDistance;\n+\n+    public Dog(String name, int maxRunDistance, int maxSwimDistance) {\n+        super(name);\n+        this.maxRunDistance = maxRunDistance;\n+        this.maxSwimDistance = maxSwimDistance;\n+    }\n+\n+    public int getMaxRunDistance() {\n+        return maxRunDistance;\n+    }\n+\n+    public void setMaxRunDistance(int maxRunDistance) {\n+        this.maxRunDistance = maxRunDistance;\n+    }\n+\n+    public int getMaxSwimDistance() {\n+        return maxSwimDistance;\n+    }\n+\n+    public void setMaxSwimDistance(int maxSwimDistance) {\n+        this.maxSwimDistance = maxSwimDistance;\n+    }\n+\n+    @Override\n+    public void run(int distance) {\n+        try {\n+            Practice6Utils.validateValue(this.getClass().getSimpleName(), distance, maxRunDistance);\n+            System.out.println(this.getName() + \" пробежал \" + distance + \" м.\");\n+        } catch (Exception e) {\n+            System.err.println(e.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void swim(int distance) {\n+        try {\n+            Practice6Utils.validateValue(this.getClass().getSimpleName(), distance, maxSwimDistance);\n+            System.out.println(this.getName() + \" проплыл \" + distance + \" м.\");\n+        } catch (Exception e) {\n+            System.err.println(e.toString());\n+        }\n+    }\n+}"
  },
  {
    "sha": "7176d5517595f75090408d8af0ae3eb44af38509",
    "filename": "src/main/java/kz/test/practice6/utils/Practice6Utils.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/hunt100/Practices/blob/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/practice6/utils/Practice6Utils.java",
    "raw_url": "https://github.com/hunt100/Practices/raw/100dfe85acfba3e5a6afb722f295b8dcca9c4703/src/main/java/kz/test/practice6/utils/Practice6Utils.java",
    "contents_url": "https://api.github.com/repos/hunt100/Practices/contents/src/main/java/kz/test/practice6/utils/Practice6Utils.java?ref=100dfe85acfba3e5a6afb722f295b8dcca9c4703",
    "patch": "@@ -0,0 +1,23 @@\n+package kz.test.practice6.utils;\n+\n+public final class Practice6Utils {\n+\n+    private Practice6Utils() {\n+        throw new IllegalStateException(\"Util class\");\n+    }\n+\n+    public static void validateValue(String className, int value, int maxValue) {\n+        if (!isPositive(value)) {\n+            throw new IllegalArgumentException(\"Нарушено одно из ограничений. Дистанция должна быть положительной: \" + value);\n+        }\n+        if (value > maxValue) {\n+            throw new IllegalStateException(\n+                    \"Нарушено одно из ограничений. Дистанция не должна превышать максимальное допустимое значение для \" +\n+                            className + \": \" + maxValue + \". Текущая дистанция: \" + value);\n+        }\n+    }\n+\n+    public static boolean isPositive(int value) {\n+        return value >= 0;\n+    }\n+}"
  }
]
