[
  {
    "sha": "4bf91a99071501ae81dcd42dc29999141d7d283c",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/CHANGELOG.md",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/CHANGELOG.md?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -11,6 +11,10 @@\n   * `ThreeDSecureV2LabelCustomization`\n   * `ThreeDSecureV2TextBoxCustomization`\n   * `ThreeDSecureV2ToolbarCustomization`\n+* Add `PayPalCheckoutRequest`\n+* Add `PayPalVaultRequest`\n+* Add `tokenizePayPalAccount` method to `PayPalClient`\n+* Add `requestBillingAgreement` to `PayPalCheckoutRequest`\n * Breaking Changes\n   * Make `AmericanExpressRewardsBalance#fromJson()` package-private\n   * Make `TYPE` and `API_RESOURCE_KEY` in `CardNonce` package-private\n@@ -58,6 +62,11 @@\n   * Rename `VenmoAuthorizeAccountCallback` to `VenmoTokenizeAccountCallback`\n   * Remove `activity` parameter from `GooglePayClient#onActivityResult()`\n   * Remove `activity` parameter from `GooglePayClient#getTokenizationParameters()`\n+  * Update `PayPalClient#requestOneTimePayment()` to expect a `PayPalCheckoutRequest` and deprecate method\n+  * Update `PayPalClient#requestBillingAgreement()` to expect a `PayPalVaultRequest` and deprecate method\n+  * Make `PayPalRequest` abstract\n+  * Update `PayPalRequest` setter method names and remove method chaining\n+  * Make `PayPalAccountBuilder` package-private\n \n ## 4.0.0-beta1\n "
  },
  {
    "sha": "ada064d29df56587d83318ef9153929231e10f97",
    "filename": "Demo/src/main/java/com/braintreepayments/demo/PayPalFragment.java",
    "status": "modified",
    "additions": 5,
    "deletions": 49,
    "changes": 54,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/Demo/src/main/java/com/braintreepayments/demo/PayPalFragment.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/Demo/src/main/java/com/braintreepayments/demo/PayPalFragment.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/Demo/src/main/java/com/braintreepayments/demo/PayPalFragment.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -15,9 +15,10 @@\n import com.braintreepayments.api.BrowserSwitchResult;\n import com.braintreepayments.api.DataCollector;\n import com.braintreepayments.api.PayPalClient;\n-import com.braintreepayments.api.PayPalRequest;\n import com.braintreepayments.api.PaymentMethodNonce;\n-import com.braintreepayments.api.PostalAddress;\n+\n+import static com.braintreepayments.demo.PayPalRequestFactory.createPayPalCheckoutRequest;\n+import static com.braintreepayments.demo.PayPalRequestFactory.createPayPalVaultRequest;\n \n public class PayPalFragment extends BaseFragment {\n \n@@ -69,13 +70,13 @@ private void launchPayPal(boolean isBillingAgreement) {\n                     dataCollector.collectDeviceData(activity, (deviceData, dataCollectorError) -> mDeviceData = deviceData);\n                 }\n                 if (isBillingAgreement) {\n-                    payPalClient.requestBillingAgreement(activity, getPayPalRequest(null), payPalError -> {\n+                    payPalClient.tokenizePayPalAccount(activity, createPayPalVaultRequest(activity), payPalError -> {\n                         if (payPalError != null) {\n                             handleError(payPalError);\n                         }\n                     });\n                 } else {\n-                    payPalClient.requestOneTimePayment(activity, getPayPalRequest(\"1.00\"), payPalError -> {\n+                    payPalClient.tokenizePayPalAccount(activity, createPayPalCheckoutRequest(activity, \"1.00\"), payPalError -> {\n                         if (payPalError != null) {\n                             handleError(payPalError);\n                         }\n@@ -97,51 +98,6 @@ private void handlePayPalResult(PaymentMethodNonce paymentMethodNonce, Exception\n         }\n     }\n \n-    private PayPalRequest getPayPalRequest(@Nullable String amount) {\n-        FragmentActivity activity = getActivity();\n-        PayPalRequest request = new PayPalRequest()\n-               .amount(amount);\n-\n-        request.displayName(Settings.getPayPalDisplayName(activity));\n-\n-        String landingPageType = Settings.getPayPalLandingPageType(activity);\n-        if (getString(R.string.paypal_landing_page_type_billing).equals(landingPageType)) {\n-            request.landingPageType(PayPalRequest.LANDING_PAGE_TYPE_BILLING);\n-        } else if (getString(R.string.paypal_landing_page_type_login).equals(landingPageType)) {\n-            request.landingPageType(PayPalRequest.LANDING_PAGE_TYPE_LOGIN);\n-        }\n-\n-        String intentType = Settings.getPayPalIntentType(activity);\n-        if (intentType.equals(getString(R.string.paypal_intent_authorize))) {\n-            request.intent(PayPalRequest.INTENT_AUTHORIZE);\n-        } else if (intentType.equals(getString(R.string.paypal_intent_order))) {\n-            request.intent(PayPalRequest.INTENT_ORDER);\n-        } else if (intentType.equals(getString(R.string.paypal_intent_sale))) {\n-            request.intent(PayPalRequest.INTENT_SALE);\n-        }\n-\n-        if (Settings.isPayPalUseractionCommitEnabled(activity)) {\n-            request.userAction(PayPalRequest.USER_ACTION_COMMIT);\n-        }\n-\n-        if (Settings.isPayPalCreditOffered(activity)) {\n-            request.offerCredit(true);\n-        }\n-\n-        if (Settings.usePayPalAddressOverride(activity)) {\n-            request.shippingAddressOverride(new PostalAddress()\n-                    .recipientName(\"Brian Tree\")\n-                    .streetAddress(\"123 Fake Street\")\n-                    .extendedAddress(\"Floor A\")\n-                    .locality(\"San Francisco\")\n-                    .region(\"CA\")\n-                    .countryCodeAlpha2(\"US\")\n-            );\n-        }\n-\n-        return request;\n-    }\n-\n     public void handlePayPalBrowserSwitchResult(BrowserSwitchResult browserSwitchResult) {\n         if (browserSwitchResult != null) {\n             payPalClient.onBrowserSwitchResult(browserSwitchResult, (payPalAccountNonce, error) -> handlePayPalResult(payPalAccountNonce, error));"
  },
  {
    "sha": "5306a6f78b6236bb6bf16ff4187ac2e4319419aa",
    "filename": "Demo/src/main/java/com/braintreepayments/demo/PayPalRequestFactory.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/Demo/src/main/java/com/braintreepayments/demo/PayPalRequestFactory.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/Demo/src/main/java/com/braintreepayments/demo/PayPalRequestFactory.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/Demo/src/main/java/com/braintreepayments/demo/PayPalRequestFactory.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -0,0 +1,81 @@\n+package com.braintreepayments.demo;\n+\n+import android.content.Context;\n+\n+import com.braintreepayments.api.PayPalCheckoutRequest;\n+import com.braintreepayments.api.PayPalRequest;\n+import com.braintreepayments.api.PayPalVaultRequest;\n+import com.braintreepayments.api.PostalAddress;\n+\n+public class PayPalRequestFactory {\n+\n+    public static PayPalVaultRequest createPayPalVaultRequest(Context context) {\n+\n+        PayPalVaultRequest request = new PayPalVaultRequest();\n+\n+        request.setDisplayName(Settings.getPayPalDisplayName(context));\n+\n+        String landingPageType = Settings.getPayPalLandingPageType(context);\n+        if (context.getString(R.string.paypal_landing_page_type_billing).equals(landingPageType)) {\n+            request.setLandingPageType(PayPalRequest.LANDING_PAGE_TYPE_BILLING);\n+        } else if (context.getString(R.string.paypal_landing_page_type_login).equals(landingPageType)) {\n+            request.setLandingPageType(PayPalRequest.LANDING_PAGE_TYPE_LOGIN);\n+        }\n+\n+        if (Settings.isPayPalCreditOffered(context)) {\n+            request.setOfferCredit(true);\n+        }\n+\n+        if (Settings.usePayPalAddressOverride(context)) {\n+            request.setShippingAddressOverride(new PostalAddress()\n+                    .recipientName(\"Brian Tree\")\n+                    .streetAddress(\"123 Fake Street\")\n+                    .extendedAddress(\"Floor A\")\n+                    .locality(\"San Francisco\")\n+                    .region(\"CA\")\n+                    .countryCodeAlpha2(\"US\")\n+            );\n+        }\n+\n+        return request;\n+    }\n+\n+    public static PayPalCheckoutRequest createPayPalCheckoutRequest(Context context, String amount) {\n+        PayPalCheckoutRequest request = new PayPalCheckoutRequest(amount);\n+\n+        request.setDisplayName(Settings.getPayPalDisplayName(context));\n+\n+        String landingPageType = Settings.getPayPalLandingPageType(context);\n+        if (context.getString(R.string.paypal_landing_page_type_billing).equals(landingPageType)) {\n+            request.setLandingPageType(PayPalRequest.LANDING_PAGE_TYPE_BILLING);\n+        } else if (context.getString(R.string.paypal_landing_page_type_login).equals(landingPageType)) {\n+            request.setLandingPageType(PayPalRequest.LANDING_PAGE_TYPE_LOGIN);\n+        }\n+\n+        String intentType = Settings.getPayPalIntentType(context);\n+        if (intentType.equals(context.getString(R.string.paypal_intent_authorize))) {\n+            request.setIntent(PayPalCheckoutRequest.INTENT_AUTHORIZE);\n+        } else if (intentType.equals(context.getString(R.string.paypal_intent_order))) {\n+            request.setIntent(PayPalCheckoutRequest.INTENT_ORDER);\n+        } else if (intentType.equals(context.getString(R.string.paypal_intent_sale))) {\n+            request.setIntent(PayPalCheckoutRequest.INTENT_SALE);\n+        }\n+\n+        if (Settings.isPayPalUseractionCommitEnabled(context)) {\n+            request.setUserAction(PayPalCheckoutRequest.USER_ACTION_COMMIT);\n+        }\n+\n+        if (Settings.usePayPalAddressOverride(context)) {\n+            request.setShippingAddressOverride(new PostalAddress()\n+                    .recipientName(\"Brian Tree\")\n+                    .streetAddress(\"123 Fake Street\")\n+                    .extendedAddress(\"Floor A\")\n+                    .locality(\"San Francisco\")\n+                    .region(\"CA\")\n+                    .countryCodeAlpha2(\"US\")\n+            );\n+        }\n+\n+        return request;\n+    }\n+}"
  },
  {
    "sha": "0d31ad27e454843512ff3b35ad84a087fc0e08e9",
    "filename": "Demo/src/main/java/com/braintreepayments/demo/PreferredPaymentMethodsFragment.java",
    "status": "modified",
    "additions": 9,
    "deletions": 51,
    "changes": 60,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/Demo/src/main/java/com/braintreepayments/demo/PreferredPaymentMethodsFragment.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/Demo/src/main/java/com/braintreepayments/demo/PreferredPaymentMethodsFragment.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/Demo/src/main/java/com/braintreepayments/demo/PreferredPaymentMethodsFragment.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -12,13 +12,18 @@\n import androidx.fragment.app.FragmentActivity;\n \n import com.braintreepayments.InitializeFeatureClientsCallback;\n+import com.braintreepayments.api.PayPalCheckoutRequest;\n import com.braintreepayments.api.PayPalClient;\n import com.braintreepayments.api.PayPalRequest;\n+import com.braintreepayments.api.PayPalVaultRequest;\n import com.braintreepayments.api.PostalAddress;\n import com.braintreepayments.api.PreferredPaymentMethodsClient;\n import com.braintreepayments.api.VenmoClient;\n import com.braintreepayments.api.VenmoRequest;\n \n+import static com.braintreepayments.demo.PayPalRequestFactory.createPayPalCheckoutRequest;\n+import static com.braintreepayments.demo.PayPalRequestFactory.createPayPalVaultRequest;\n+\n public class PreferredPaymentMethodsFragment extends BaseFragment {\n \n     private Button mPreferredPaymentMethodsButton;\n@@ -76,8 +81,8 @@ public void launchSinglePayment(View v) {\n         getActivity().setProgressBarIndeterminateVisibility(true);\n \n         initializeFeatureClients(initError -> {\n-            PayPalRequest payPalRequest = getPayPalRequest(\"1.00\");\n-            payPalClient.requestOneTimePayment(getActivity(), payPalRequest, requestError -> {\n+            PayPalCheckoutRequest payPalRequest = createPayPalCheckoutRequest(getActivity(), \"1.00\");\n+            payPalClient.tokenizePayPalAccount(getActivity(), payPalRequest, requestError -> {\n                 if (requestError != null) {\n                     handleError(requestError);\n                 }\n@@ -89,8 +94,8 @@ public void launchBillingAgreement(View v) {\n         getActivity().setProgressBarIndeterminateVisibility(true);\n \n         initializeFeatureClients(initError -> {\n-            PayPalRequest payPalRequest = getPayPalRequest(null);\n-            payPalClient.requestBillingAgreement(getActivity(), payPalRequest, requestError -> {\n+            PayPalVaultRequest payPalRequest = createPayPalVaultRequest(getActivity());\n+            payPalClient.tokenizePayPalAccount(getActivity(), payPalRequest, requestError -> {\n                 if (requestError != null) {\n                     handleError(requestError);\n                 }\n@@ -111,51 +116,4 @@ public void launchVenmo(View v) {\n             });\n         });\n     }\n-\n-    // Launching a payment method from the home screen creates a new BraintreeFragment. To maintain sessionID within a\n-    // fragment, we opted to add PayPal within the PreferredPaymentMethodsActivity.\n-    private PayPalRequest getPayPalRequest(@Nullable String amount) {\n-        PayPalRequest request = new PayPalRequest()\n-                .amount(amount);\n-\n-        FragmentActivity activity = getActivity();\n-        request.displayName(Settings.getPayPalDisplayName(activity));\n-\n-        String landingPageType = Settings.getPayPalLandingPageType(activity);\n-        if (getString(R.string.paypal_landing_page_type_billing).equals(landingPageType)) {\n-            request.landingPageType(PayPalRequest.LANDING_PAGE_TYPE_BILLING);\n-        } else if (getString(R.string.paypal_landing_page_type_login).equals(landingPageType)) {\n-            request.landingPageType(PayPalRequest.LANDING_PAGE_TYPE_LOGIN);\n-        }\n-\n-        String intentType = Settings.getPayPalIntentType(activity);\n-        if (intentType.equals(getString(R.string.paypal_intent_authorize))) {\n-            request.intent(PayPalRequest.INTENT_AUTHORIZE);\n-        } else if (intentType.equals(getString(R.string.paypal_intent_order))) {\n-            request.intent(PayPalRequest.INTENT_ORDER);\n-        } else if (intentType.equals(getString(R.string.paypal_intent_sale))) {\n-            request.intent(PayPalRequest.INTENT_SALE);\n-        }\n-\n-        if (Settings.isPayPalUseractionCommitEnabled(activity)) {\n-            request.userAction(PayPalRequest.USER_ACTION_COMMIT);\n-        }\n-\n-        if (Settings.isPayPalCreditOffered(activity)) {\n-            request.offerCredit(true);\n-        }\n-\n-        if (Settings.usePayPalAddressOverride(activity)) {\n-            request.shippingAddressOverride(new PostalAddress()\n-                    .recipientName(\"Brian Tree\")\n-                    .streetAddress(\"123 Fake Street\")\n-                    .extendedAddress(\"Floor A\")\n-                    .locality(\"San Francisco\")\n-                    .region(\"CA\")\n-                    .countryCodeAlpha2(\"US\")\n-            );\n-        }\n-\n-        return request;\n-    }\n }"
  },
  {
    "sha": "49c60e0255b14042f50b5e09552fa7c1c9d6b8ff",
    "filename": "PayPal/src/main/java/com/braintreepayments/api/PayPalAccountBuilder.java",
    "status": "modified",
    "additions": 7,
    "deletions": 9,
    "changes": 16,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalAccountBuilder.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalAccountBuilder.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/main/java/com/braintreepayments/api/PayPalAccountBuilder.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -2,8 +2,6 @@\n \n import android.content.Context;\n \n-import com.braintreepayments.api.PayPalRequest.PayPalPaymentIntent;\n-\n import org.json.JSONException;\n import org.json.JSONObject;\n \n@@ -12,7 +10,7 @@\n /**\n  * Builder used to construct a PayPal account tokenization request\n  */\n-public class PayPalAccountBuilder extends PaymentMethodBuilder<PayPalAccountBuilder> {\n+class PayPalAccountBuilder extends PaymentMethodBuilder<PayPalAccountBuilder> {\n \n     private static final String PAYPAL_ACCOUNT_KEY = \"paypalAccount\";\n     private static final String CORRELATION_ID_KEY = \"correlationId\";\n@@ -24,7 +22,7 @@\n     private String mIntent;\n     private String mMerchantAccountId;\n \n-    public PayPalAccountBuilder() {\n+    PayPalAccountBuilder() {\n         super();\n     }\n \n@@ -35,7 +33,7 @@ public PayPalAccountBuilder() {\n      * {@link com.braintreepayments.api.PayPalDataCollector#getClientMetadataId(Context)}.\n      * @return {@link PayPalAccountBuilder}\n      */\n-    public PayPalAccountBuilder clientMetadataId(String clientMetadataId) {\n+    PayPalAccountBuilder clientMetadataId(String clientMetadataId) {\n         mClientMetadataId = clientMetadataId;\n         return this;\n     }\n@@ -49,7 +47,7 @@ public PayPalAccountBuilder clientMetadataId(String clientMetadataId) {\n      * @param urlResponseData The data parsed from the PayPal callback url.\n      * @return {@link PayPalAccountBuilder}\n      */\n-    public PayPalAccountBuilder urlResponseData(JSONObject urlResponseData) {\n+    PayPalAccountBuilder urlResponseData(JSONObject urlResponseData) {\n         if (urlResponseData != null) {\n             mUrlResponseData = urlResponseData;\n         }\n@@ -59,10 +57,10 @@ public PayPalAccountBuilder urlResponseData(JSONObject urlResponseData) {\n     /**\n      * Used by PayPal wrappers to construct a request to create a PayPal account.\n      *\n-     * @param intent Can be either {@link PayPalRequest#INTENT_AUTHORIZE} or {@link PayPalRequest#INTENT_SALE}.\n+     * @param intent Can be either {@link PayPalCheckoutRequest#INTENT_AUTHORIZE} or {@link PayPalCheckoutRequest#INTENT_SALE}.\n      * @return {@link PayPalAccountBuilder}\n      */\n-    public PayPalAccountBuilder intent(@PayPalPaymentIntent String intent) {\n+    PayPalAccountBuilder intent(@PayPalCheckoutRequest.PayPalPaymentIntent String intent) {\n         mIntent = intent;\n         return this;\n     }\n@@ -73,7 +71,7 @@ public PayPalAccountBuilder intent(@PayPalPaymentIntent String intent) {\n      * @param merchantAccountId String merchant account id\n      * @return {@link PayPalAccountBuilder}\n      */\n-    public PayPalAccountBuilder merchantAccountId(String merchantAccountId) {\n+    PayPalAccountBuilder merchantAccountId(String merchantAccountId) {\n         mMerchantAccountId = merchantAccountId;\n         return this;\n     }"
  },
  {
    "sha": "8ac1db978dc8d40d1a197d6e971da686d031e914",
    "filename": "PayPal/src/main/java/com/braintreepayments/api/PayPalCheckoutRequest.java",
    "status": "added",
    "additions": 246,
    "deletions": 0,
    "changes": 246,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalCheckoutRequest.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalCheckoutRequest.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/main/java/com/braintreepayments/api/PayPalCheckoutRequest.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -0,0 +1,246 @@\n+package com.braintreepayments.api;\n+\n+import android.text.TextUtils;\n+\n+import androidx.annotation.StringDef;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Represents the parameters that are needed to start the PayPal Checkout flow\n+ */\n+public class PayPalCheckoutRequest extends PayPalRequest {\n+\n+    @Retention(RetentionPolicy.SOURCE)\n+    @StringDef({PayPalCheckoutRequest.INTENT_ORDER, PayPalCheckoutRequest.INTENT_SALE, PayPalCheckoutRequest.INTENT_AUTHORIZE})\n+    @interface PayPalPaymentIntent {}\n+\n+    /**\n+     * Payment intent to create an order\n+     */\n+    public static final String INTENT_ORDER = \"order\";\n+\n+    /**\n+     * Payment intent for immediate payment\n+     */\n+    public static final String INTENT_SALE = \"sale\";\n+\n+    /**\n+     * Payment intent to authorize a payment for capture later\n+     */\n+    public static final String INTENT_AUTHORIZE = \"authorize\";\n+\n+    @Retention(RetentionPolicy.SOURCE)\n+    @StringDef({PayPalCheckoutRequest.USER_ACTION_DEFAULT, PayPalCheckoutRequest.USER_ACTION_COMMIT})\n+    @interface PayPalPaymentUserAction {}\n+\n+    /**\n+     * Shows the default call-to-action text on the PayPal Express Checkout page. This option indicates that a final\n+     * confirmation will be shown on the merchant checkout site before the user's payment method is charged.\n+     */\n+    public static final String USER_ACTION_DEFAULT = \"\";\n+\n+    /**\n+     * Shows a deterministic call-to-action. This option indicates to the user that their payment method will be charged\n+     * when they click the call-to-action button on the PayPal Checkout page, and that no final confirmation page will\n+     * be shown on the merchant's checkout page. This option works for both checkout and vault flows.\n+     */\n+    public static final String USER_ACTION_COMMIT = \"commit\";\n+\n+    private String intent = INTENT_AUTHORIZE;\n+    private String userAction = USER_ACTION_DEFAULT;\n+    private final String amount;\n+    private String currencyCode;\n+    private boolean requestBillingAgreement;\n+    private boolean offerPayLater;\n+\n+    /**\n+     * This amount may differ slightly from the transaction amount. The exact decline rules\n+     * for mismatches between this client-side amount and the final amount in the Transaction\n+     * are determined by the gateway.\n+     *\n+     * @param amount The transaction amount in currency units (as * determined by setCurrencyCode).\n+     * For example, \"1.20\" corresponds to one dollar and twenty cents. Amount must be a non-negative\n+     * number, may optionally contain exactly 2 decimal places separated by '.', optional\n+     * thousands separator ',', limited to 7 digits before the decimal point.\n+     **/\n+    public PayPalCheckoutRequest(String amount) {\n+        this.amount = amount;\n+    }\n+\n+    /**\n+     * Optional: A valid ISO currency code to use for the transaction. Defaults to merchant currency\n+     * code if not set.\n+     *\n+     * If unspecified, the currency code will be chosen based on the active merchant account in the\n+     * client token.\n+     *\n+     * @param currencyCode A currency code, such as \"USD\"\n+     */\n+    public void setCurrencyCode(String currencyCode) {\n+        this.currencyCode = currencyCode;\n+    }\n+\n+    /**\n+     * Optional: Payment intent. Must be set to {@link PayPalCheckoutRequest#INTENT_SALE} for immediate payment,\n+     * {@link PayPalCheckoutRequest#INTENT_AUTHORIZE} to authorize a payment for capture later, or\n+     * {@link PayPalCheckoutRequest#INTENT_ORDER} to create an order.\n+     *\n+     * Defaults to authorize.\n+     *\n+     * @param intent {@link PayPalPaymentIntent}\n+     *\n+     * @see <a href=\"https://developer.paypal.com/docs/api/payments/v1/#definition-payment\">\"intent\" under the \"payment\" definition</a>\n+     * @see <a href=\"https://developer.paypal.com/docs/integration/direct/payments/create-process-order/\">Create and process orders</a>\n+     * for more information\n+     *\n+     */\n+    public void setIntent(@PayPalPaymentIntent String intent) {\n+        this.intent = intent;\n+    }\n+\n+    /**\n+     * Optional: The call-to-action in the PayPal Checkout flow.\n+     *\n+     * By default the final button will show the localized word for \"Continue\" and implies that the\n+     * final amount billed is not yet known. Setting the PayPalCheckoutRequest's userAction to\n+     * {@link PayPalCheckoutRequest#USER_ACTION_COMMIT} changes the button text to \"Pay Now\",\n+     * conveying to the user that billing will take place immediately.\n+     *\n+     * @param userAction Must be a be {@link PayPalPaymentUserAction} value:\n+     * <ul>\n+     * <li>{@link PayPalCheckoutRequest#USER_ACTION_COMMIT}</li>\n+     * <li>{@link PayPalCheckoutRequest#USER_ACTION_DEFAULT}</li>\n+     * </ul>\n+     *\n+     * @see <a href=\"https://developer.paypal.com/docs/api/payments/v1/#definition-application_context\">See \"user_action\" under the \"application_context\" definition</a>\n+     */\n+    public void setUserAction(@PayPalPaymentUserAction String userAction) {\n+        this.userAction = userAction;\n+    }\n+\n+    /**\n+     * Optional: Offers PayPal Pay Later if the customer qualifies. Defaults to false.\n+     *\n+     * @param offerPayLater Whether to offer PayPal Pay Later.\n+     */\n+    public void setOfferPayLater(boolean offerPayLater) {\n+        this.offerPayLater = offerPayLater;\n+    }\n+\n+    /**\n+     * Optional: If set to true, this enables the Checkout with Vault flow, where the customer will be\n+     * prompted to consent to a billing agreement during checkout.\n+     *\n+     * @param requestBillingAgreement Whether to request billing agreement during checkout.\n+     */\n+    public void setRequestBillingAgreement(boolean requestBillingAgreement) {\n+        this.requestBillingAgreement = requestBillingAgreement;\n+    }\n+\n+    public String getAmount() {\n+        return amount;\n+    }\n+\n+    public String getCurrencyCode() {\n+        return currencyCode;\n+    }\n+\n+    @PayPalPaymentIntent\n+    public String getIntent() {\n+        return intent;\n+    }\n+\n+    @PayPalPaymentUserAction\n+    public String getUserAction() {\n+        return userAction;\n+    }\n+\n+    public boolean shouldOfferPayLater() {\n+        return offerPayLater;\n+    }\n+\n+    public boolean shouldRequestBillingAgreement() {\n+        return requestBillingAgreement;\n+    }\n+\n+    String createRequestBody(Configuration configuration, Authorization authorization, String successUrl, String cancelUrl) throws JSONException {\n+        JSONObject parameters = new JSONObject()\n+                .put(RETURN_URL_KEY, successUrl)\n+                .put(CANCEL_URL_KEY, cancelUrl)\n+                .put(OFFER_PAY_LATER_KEY, offerPayLater);\n+\n+        if (authorization instanceof ClientToken) {\n+            parameters.put(AUTHORIZATION_FINGERPRINT_KEY, authorization.getBearer());\n+        } else {\n+            parameters.put(TOKENIZATION_KEY, authorization.getBearer());\n+        }\n+\n+        if (requestBillingAgreement) {\n+            parameters.put(REQUEST_BILLING_AGREEMENT_KEY, true);\n+        }\n+\n+        String billingAgreementDescription = getBillingAgreementDescription();\n+        if (requestBillingAgreement && !TextUtils.isEmpty(billingAgreementDescription)) {\n+            parameters.put(DESCRIPTION_KEY, billingAgreementDescription);\n+        }\n+\n+        String currencyCode = getCurrencyCode();\n+        if (currencyCode == null) {\n+            currencyCode = configuration.getPayPalCurrencyIsoCode();\n+        }\n+\n+        parameters\n+                .put(AMOUNT_KEY, amount)\n+                .put(CURRENCY_ISO_CODE_KEY, currencyCode)\n+                .put(INTENT_KEY, intent);\n+\n+        if (!getLineItems().isEmpty()) {\n+            JSONArray lineItems = new JSONArray();\n+            for (PayPalLineItem lineItem : getLineItems()) {\n+                lineItems.put(lineItem.toJson());\n+            }\n+            parameters.put(LINE_ITEMS_KEY, lineItems);\n+        }\n+\n+        JSONObject experienceProfile = new JSONObject();\n+        experienceProfile.put(NO_SHIPPING_KEY, !isShippingAddressRequired());\n+        experienceProfile.put(LANDING_PAGE_TYPE_KEY, getLandingPageType());\n+        String displayName = getDisplayName();\n+        if (TextUtils.isEmpty(displayName)) {\n+            displayName = configuration.getPayPalDisplayName();\n+        }\n+        experienceProfile.put(DISPLAY_NAME_KEY, displayName);\n+\n+        if (getLocaleCode() != null) {\n+            experienceProfile.put(LOCALE_CODE_KEY, getLocaleCode());\n+        }\n+\n+        if (getShippingAddressOverride() != null) {\n+            experienceProfile.put(ADDRESS_OVERRIDE_KEY, !isShippingAddressEditable());\n+\n+            PostalAddress shippingAddress = getShippingAddressOverride();\n+            parameters.put(PostalAddressParser.LINE_1_KEY, shippingAddress.getStreetAddress());\n+            parameters.put(PostalAddressParser.LINE_2_KEY, shippingAddress.getExtendedAddress());\n+            parameters.put(PostalAddressParser.LOCALITY_KEY, shippingAddress.getLocality());\n+            parameters.put(PostalAddressParser.REGION_KEY, shippingAddress.getRegion());\n+            parameters.put(PostalAddressParser.POSTAL_CODE_UNDERSCORE_KEY, shippingAddress.getPostalCode());\n+            parameters.put(PostalAddressParser.COUNTRY_CODE_UNDERSCORE_KEY, shippingAddress.getCountryCodeAlpha2());\n+            parameters.put(PostalAddressParser.RECIPIENT_NAME_UNDERSCORE_KEY, shippingAddress.getRecipientName());\n+        } else {\n+            experienceProfile.put(ADDRESS_OVERRIDE_KEY, false);\n+        }\n+\n+        if (getMerchantAccountId() != null) {\n+            parameters.put(MERCHANT_ACCOUNT_ID, getMerchantAccountId());\n+        }\n+\n+        parameters.put(EXPERIENCE_PROFILE_KEY, experienceProfile);\n+        return parameters.toString();\n+    }\n+}"
  },
  {
    "sha": "15f627bc6c02c78d5d05cb52ef16b9d053c94647",
    "filename": "PayPal/src/main/java/com/braintreepayments/api/PayPalClient.java",
    "status": "modified",
    "additions": 82,
    "deletions": 67,
    "changes": 149,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalClient.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalClient.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/main/java/com/braintreepayments/api/PayPalClient.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -11,7 +11,7 @@\n import org.json.JSONObject;\n \n /**\n- * Used to create and tokenize PayPal accounts. For more information see the\n+ * Used to tokenize PayPal accounts. For more information see the\n  * <a href=\"https://developers.braintreepayments.com/guides/paypal/overview/android/\">documentation</a>\n  */\n public class PayPalClient {\n@@ -54,91 +54,106 @@ private static Exception createBrowserSwitchError() {\n     }\n \n     /**\n-     * Starts the One-Time Payment flow for PayPal.\n+     * Tokenize a PayPal account for vault or checkout.\n      *\n      * @param activity Android FragmentActivity\n-     * @param payPalRequest a {@link PayPalRequest} used to customize the request. An amount MUST be specified.\n+     * @param payPalRequest a {@link PayPalRequest} used to customize the request.\n      * @param callback {@link PayPalFlowStartedCallback}\n      */\n-    public void requestOneTimePayment(final FragmentActivity activity, final PayPalRequest payPalRequest, final PayPalFlowStartedCallback callback) {\n-        if (payPalRequest.getAmount() != null) {\n-            braintreeClient.sendAnalyticsEvent(\"paypal.single-payment.selected\");\n-            if (payPalRequest.shouldOfferCredit()) {\n-                braintreeClient.sendAnalyticsEvent(\"paypal.single-payment.credit.offered\");\n-            }\n-            \n-            if (payPalRequest.shouldOfferPayLater()) {\n-                braintreeClient.sendAnalyticsEvent(\"paypal.single-payment.paylater.offered\");\n-            }\n-\n-            braintreeClient.getConfiguration(new ConfigurationCallback() {\n-                @Override\n-                public void onResult(@Nullable final Configuration configuration, @Nullable Exception error) {\n-                    if (payPalConfigInvalid(configuration)) {\n-                        Exception configInvalidError = createPayPalError();\n-                        callback.onResult(configInvalidError);\n-                        return;\n-                    }\n-\n-                    if (browserSwitchNotPossible(activity)) {\n-                        braintreeClient.sendAnalyticsEvent(\"paypal.invalid-manifest\");\n-                        Exception manifestInvalidError = createBrowserSwitchError();\n-                        callback.onResult(manifestInvalidError);\n-                        return;\n-                    }\n-                    sendCheckoutRequest(activity, payPalRequest, false, callback);\n-                }\n-            });\n+    public void tokenizePayPalAccount(final FragmentActivity activity, final PayPalRequest payPalRequest, final PayPalFlowStartedCallback callback) {\n+       if (payPalRequest instanceof PayPalCheckoutRequest) {\n+           sendCheckoutRequest(activity, (PayPalCheckoutRequest) payPalRequest, callback);\n+       } else if (payPalRequest instanceof PayPalVaultRequest) {\n+           sendVaultRequest(activity, (PayPalVaultRequest) payPalRequest, callback);\n+       }\n+    }\n \n-        } else {\n-            callback.onResult(new BraintreeException(\"An amount must be specified for the Single Payment flow.\"));\n-        }\n+    /**\n+     * @deprecated Use {@link PayPalClient#tokenizePayPalAccount(FragmentActivity, PayPalRequest, PayPalFlowStartedCallback)} instead.\n+     * Starts the One-Time Payment (Checkout) flow for PayPal.\n+     *\n+     * @param activity Android FragmentActivity\n+     * @param payPalCheckoutRequest a {@link PayPalCheckoutRequest} used to customize the request.\n+     * @param callback {@link PayPalFlowStartedCallback}\n+     */\n+    @Deprecated\n+    public void requestOneTimePayment(final FragmentActivity activity, final PayPalCheckoutRequest payPalCheckoutRequest, final PayPalFlowStartedCallback callback) {\n+        tokenizePayPalAccount(activity, payPalCheckoutRequest, callback);\n     }\n \n     /**\n-     * Starts the Billing Agreement flow for PayPal.\n+     * @deprecated Use {@link PayPalClient#tokenizePayPalAccount(FragmentActivity, PayPalRequest, PayPalFlowStartedCallback)} instead.\n+     * Starts the Billing Agreement (Vault) flow for PayPal.\n      *\n      * @param activity Android FragmentActivity\n-     * @param payPalRequest a {@link PayPalRequest} used to customize the request.\n+     * @param payPalVaultRequest a {@link PayPalVaultRequest} used to customize the request.\n      * @param callback {@link PayPalFlowStartedCallback}\n      */\n-    public void requestBillingAgreement(final FragmentActivity activity, final PayPalRequest payPalRequest, final PayPalFlowStartedCallback callback) {\n-        if (payPalRequest.getAmount() == null) {\n-            braintreeClient.sendAnalyticsEvent(\"paypal.billing-agreement.selected\");\n-            if (payPalRequest.shouldOfferCredit()) {\n-                braintreeClient.sendAnalyticsEvent(\"paypal.billing-agreement.credit.offered\");\n-            }\n+    @Deprecated\n+    public void requestBillingAgreement(final FragmentActivity activity, final PayPalVaultRequest payPalVaultRequest, final PayPalFlowStartedCallback callback) {\n+        tokenizePayPalAccount(activity, payPalVaultRequest, callback);\n+    }\n \n-            braintreeClient.getConfiguration(new ConfigurationCallback() {\n-                @Override\n-                public void onResult(@Nullable final Configuration configuration, @Nullable Exception error) {\n-                    if (payPalConfigInvalid(configuration)) {\n-                        Exception configInvalidError = createPayPalError();\n-                        callback.onResult(configInvalidError);\n-                        return;\n-                    }\n+    private void sendCheckoutRequest(final FragmentActivity activity, final PayPalCheckoutRequest payPalCheckoutRequest, final PayPalFlowStartedCallback callback) {\n+        braintreeClient.sendAnalyticsEvent(\"paypal.single-payment.selected\");\n+        if (payPalCheckoutRequest.shouldOfferPayLater()) {\n+            braintreeClient.sendAnalyticsEvent(\"paypal.single-payment.paylater.offered\");\n+        }\n \n-                    if (browserSwitchNotPossible(activity)) {\n-                        braintreeClient.sendAnalyticsEvent(\"paypal.invalid-manifest\");\n-                        Exception manifestInvalidError = createBrowserSwitchError();\n-                        callback.onResult(manifestInvalidError);\n-                        return;\n-                    }\n+        braintreeClient.getConfiguration(new ConfigurationCallback() {\n+            @Override\n+            public void onResult(@Nullable final Configuration configuration, @Nullable Exception error) {\n+                if (payPalConfigInvalid(configuration)) {\n+                    Exception configInvalidError = createPayPalError();\n+                    callback.onResult(configInvalidError);\n+                    return;\n+                }\n \n-                    sendCheckoutRequest(activity, payPalRequest, true, callback);\n+                if (browserSwitchNotPossible(activity)) {\n+                    braintreeClient.sendAnalyticsEvent(\"paypal.invalid-manifest\");\n+                    Exception manifestInvalidError = createBrowserSwitchError();\n+                    callback.onResult(manifestInvalidError);\n+                    return;\n                 }\n-            });\n-        } else {\n-            callback.onResult(new BraintreeException(\"There must be no amount specified for the Billing Agreement flow\"));\n+                sendPayPalRequest(activity, payPalCheckoutRequest, callback);\n+            }\n+        });\n+\n+    }\n+\n+    private void sendVaultRequest(final FragmentActivity activity, final PayPalVaultRequest payPalVaultRequest, final PayPalFlowStartedCallback callback) {\n+        braintreeClient.sendAnalyticsEvent(\"paypal.billing-agreement.selected\");\n+        if (payPalVaultRequest.shouldOfferCredit()) {\n+            braintreeClient.sendAnalyticsEvent(\"paypal.billing-agreement.credit.offered\");\n         }\n+\n+        braintreeClient.getConfiguration(new ConfigurationCallback() {\n+            @Override\n+            public void onResult(@Nullable final Configuration configuration, @Nullable Exception error) {\n+                if (payPalConfigInvalid(configuration)) {\n+                    Exception configInvalidError = createPayPalError();\n+                    callback.onResult(configInvalidError);\n+                    return;\n+                }\n+\n+                if (browserSwitchNotPossible(activity)) {\n+                    braintreeClient.sendAnalyticsEvent(\"paypal.invalid-manifest\");\n+                    Exception manifestInvalidError = createBrowserSwitchError();\n+                    callback.onResult(manifestInvalidError);\n+                    return;\n+                }\n+\n+                sendPayPalRequest(activity, payPalVaultRequest, callback);\n+            }\n+        });\n     }\n \n-    private void sendCheckoutRequest(final FragmentActivity activity, final PayPalRequest payPalRequest, final boolean isBillingAgreement, final PayPalFlowStartedCallback callback) {\n-        internalPayPalClient.sendRequest(activity, payPalRequest, isBillingAgreement, new PayPalInternalClientCallback() {\n+    private void sendPayPalRequest(final FragmentActivity activity, final PayPalRequest payPalRequest, final PayPalFlowStartedCallback callback) {\n+        internalPayPalClient.sendRequest(activity, payPalRequest, new PayPalInternalClientCallback() {\n             @Override\n             public void onResult(PayPalResponse payPalResponse, Exception error) {\n                 if (payPalResponse != null) {\n-                    String analyticsPrefix = getAnalyticsEventPrefix(isBillingAgreement);\n+                    String analyticsPrefix = getAnalyticsEventPrefix(payPalRequest);\n                     braintreeClient.sendAnalyticsEvent(String.format(\"%s.browser-switch.started\", analyticsPrefix));\n \n                     try {\n@@ -176,8 +191,8 @@ private void startBrowserSwitch(FragmentActivity activity, PayPalResponse payPal\n         braintreeClient.startBrowserSwitch(activity, browserSwitchOptions);\n     }\n \n-    private static String getAnalyticsEventPrefix(boolean isBillingAgreement) {\n-        return isBillingAgreement ? \"paypal.billing-agreement\" : \"paypal.single-payment\";\n+    private static String getAnalyticsEventPrefix(PayPalRequest request) {\n+        return request instanceof PayPalVaultRequest ? \"paypal.billing-agreement\" : \"paypal.single-payment\";\n     }\n \n     /**\n@@ -195,7 +210,7 @@ public void onBrowserSwitchResult(BrowserSwitchResult browserSwitchResult, final\n \n         boolean isBillingAgreement = paymentType.equalsIgnoreCase(\"billing-agreement\");\n         String tokenKey = isBillingAgreement ? \"ba_token\" : \"token\";\n-        String analyticsPrefix = getAnalyticsEventPrefix(isBillingAgreement);\n+        String analyticsPrefix = isBillingAgreement ? \"paypal.billing-agreement\" : \"paypal.single-payment\";\n \n         int result = browserSwitchResult.getStatus();\n         switch (result) {"
  },
  {
    "sha": "e946bbeb5f7de84b96402ea8f961bdcece281aee",
    "filename": "PayPal/src/main/java/com/braintreepayments/api/PayPalFlowStartedCallback.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalFlowStartedCallback.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalFlowStartedCallback.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/main/java/com/braintreepayments/api/PayPalFlowStartedCallback.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -5,8 +5,9 @@\n \n /**\n  * Callback for receiving result of\n- * {@link PayPalClient#requestOneTimePayment(FragmentActivity, PayPalRequest, PayPalFlowStartedCallback)} and\n- * {@link PayPalClient#requestBillingAgreement(FragmentActivity, PayPalRequest, PayPalFlowStartedCallback)}.\n+ * {@link PayPalClient#requestOneTimePayment(FragmentActivity, PayPalCheckoutRequest, PayPalFlowStartedCallback)} and\n+ * {@link PayPalClient#requestBillingAgreement(FragmentActivity, PayPalVaultRequest, PayPalFlowStartedCallback)} and\n+ * {@link PayPalClient#tokenizePayPalAccount(FragmentActivity, PayPalRequest, PayPalFlowStartedCallback)}.\n  */\n public interface PayPalFlowStartedCallback {\n "
  },
  {
    "sha": "55a5e2a1e6941437d19e334ddb79bf0fb14975d5",
    "filename": "PayPal/src/main/java/com/braintreepayments/api/PayPalInternalClient.java",
    "status": "modified",
    "additions": 5,
    "deletions": 114,
    "changes": 119,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalInternalClient.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalInternalClient.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/main/java/com/braintreepayments/api/PayPalInternalClient.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -2,37 +2,14 @@\n \n import android.content.Context;\n import android.net.Uri;\n-import android.text.TextUtils;\n \n import androidx.annotation.Nullable;\n import androidx.annotation.VisibleForTesting;\n \n-import org.json.JSONArray;\n import org.json.JSONException;\n-import org.json.JSONObject;\n \n class PayPalInternalClient {\n \n-    private static final String NO_SHIPPING_KEY = \"no_shipping\";\n-    private static final String ADDRESS_OVERRIDE_KEY = \"address_override\";\n-    private static final String LOCALE_CODE_KEY = \"locale_code\";\n-    private static final String DESCRIPTION_KEY = \"description\";\n-    private static final String AUTHORIZATION_FINGERPRINT_KEY = \"authorization_fingerprint\";\n-    private static final String TOKENIZATION_KEY = \"client_key\";\n-    private static final String RETURN_URL_KEY = \"return_url\";\n-    private static final String OFFER_CREDIT_KEY = \"offer_paypal_credit\";\n-    private static final String OFFER_PAY_LATER_KEY = \"offer_pay_later\";\n-    private static final String CANCEL_URL_KEY = \"cancel_url\";\n-    private static final String EXPERIENCE_PROFILE_KEY = \"experience_profile\";\n-    private static final String AMOUNT_KEY = \"amount\";\n-    private static final String CURRENCY_ISO_CODE_KEY = \"currency_iso_code\";\n-    private static final String INTENT_KEY = \"intent\";\n-    private static final String LANDING_PAGE_TYPE_KEY = \"landing_page_type\";\n-    private static final String DISPLAY_NAME_KEY = \"brand_name\";\n-    private static final String SHIPPING_ADDRESS_KEY = \"shipping_address\";\n-    private static final String MERCHANT_ACCOUNT_ID = \"merchant_account_id\";\n-    private static final String LINE_ITEMS_KEY = \"line_items\";\n-\n     private static final String CREATE_SINGLE_PAYMENT_ENDPOINT = \"paypal_hermes/create_payment_resource\";\n     private static final String SETUP_BILLING_AGREEMENT_ENDPOINT = \"paypal_hermes/setup_billing_agreement\";\n \n@@ -57,7 +34,7 @@\n         this.successUrl = String.format(\"%s://onetouch/v1/success\", braintreeClient.getReturnUrlScheme());\n     }\n \n-    void sendRequest(final Context context, final PayPalRequest payPalRequest, final boolean isBillingAgreement, final PayPalInternalClientCallback callback) {\n+    void sendRequest(final Context context, final PayPalRequest payPalRequest, final PayPalInternalClientCallback callback) {\n         braintreeClient.getConfiguration(new ConfigurationCallback() {\n             @Override\n             public void onResult(@Nullable Configuration configuration, @Nullable Exception error) {\n@@ -66,20 +43,18 @@ public void onResult(@Nullable Configuration configuration, @Nullable Exception\n                     return;\n                 }\n                 try {\n+                    final boolean isBillingAgreement = payPalRequest instanceof PayPalVaultRequest;\n                     String endpoint = isBillingAgreement\n                             ? SETUP_BILLING_AGREEMENT_ENDPOINT : CREATE_SINGLE_PAYMENT_ENDPOINT;\n                     String url = String.format(\"/v1/%s\", endpoint);\n \n-                    String requestBody = createRequestBody(payPalRequest, isBillingAgreement, configuration);\n+                    String requestBody = payPalRequest.createRequestBody(configuration, braintreeClient.getAuthorization(), successUrl, cancelUrl);\n \n                     braintreeClient.sendPOST(url, requestBody, new HttpResponseCallback() {\n                         @Override\n                         public void success(String responseBody) {\n                             try {\n-                                PayPalResponse payPalResponse = new PayPalResponse()\n-                                        .intent(payPalRequest.getIntent())\n-                                        .isBillingAgreement(isBillingAgreement)\n-                                        .merchantAccountId(payPalRequest.getMerchantAccountId())\n+                                PayPalResponse payPalResponse = new PayPalResponse(payPalRequest)\n                                         .successUrl(successUrl);\n \n                                 PayPalPaymentResource paypalPaymentResource = PayPalPaymentResource.fromJson(responseBody);\n@@ -98,7 +73,7 @@ public void success(String responseBody) {\n \n                                     String approvalUrl = parsedRedirectUri\n                                             .buildUpon()\n-                                            .appendQueryParameter(USER_ACTION_KEY, payPalRequest.getUserAction())\n+                                            .appendQueryParameter(USER_ACTION_KEY, payPalResponse.getUserAction())\n                                             .toString();\n                                     payPalResponse.approvalUrl(approvalUrl);\n                                 }\n@@ -121,88 +96,4 @@ public void failure(Exception exception) {\n             }\n         });\n     }\n-\n-    private String createRequestBody(PayPalRequest payPalRequest, boolean isBillingAgreement, Configuration configuration) throws JSONException {\n-\n-        JSONObject parameters = new JSONObject()\n-                .put(RETURN_URL_KEY, successUrl)\n-                .put(CANCEL_URL_KEY, cancelUrl)\n-                .put(OFFER_CREDIT_KEY, payPalRequest.shouldOfferCredit())\n-                .put(OFFER_PAY_LATER_KEY, payPalRequest.shouldOfferPayLater());\n-\n-        Authorization authorization = braintreeClient.getAuthorization();\n-        if (authorization instanceof ClientToken) {\n-            parameters.put(AUTHORIZATION_FINGERPRINT_KEY, authorization.getBearer());\n-        } else {\n-            parameters.put(TOKENIZATION_KEY, authorization.getBearer());\n-        }\n-\n-        if (isBillingAgreement) {\n-            String billingAgreementDescription = payPalRequest.getBillingAgreementDescription();\n-            if (!TextUtils.isEmpty(billingAgreementDescription)) {\n-                parameters.put(DESCRIPTION_KEY, billingAgreementDescription);\n-            }\n-        } else {\n-            String currencyCode = payPalRequest.getCurrencyCode();\n-            if (currencyCode == null) {\n-                currencyCode = configuration.getPayPalCurrencyIsoCode();\n-            }\n-\n-            parameters\n-                    .put(AMOUNT_KEY, payPalRequest.getAmount())\n-                    .put(CURRENCY_ISO_CODE_KEY, currencyCode)\n-                    .put(INTENT_KEY, payPalRequest.getIntent());\n-\n-            if (!payPalRequest.getLineItems().isEmpty()) {\n-                JSONArray lineItems = new JSONArray();\n-                for (PayPalLineItem lineItem : payPalRequest.getLineItems()) {\n-                    lineItems.put(lineItem.toJson());\n-                }\n-                parameters.put(LINE_ITEMS_KEY, lineItems);\n-            }\n-        }\n-\n-        JSONObject experienceProfile = new JSONObject();\n-        experienceProfile.put(NO_SHIPPING_KEY, !payPalRequest.isShippingAddressRequired());\n-        experienceProfile.put(LANDING_PAGE_TYPE_KEY, payPalRequest.getLandingPageType());\n-        String displayName = payPalRequest.getDisplayName();\n-        if (TextUtils.isEmpty(displayName)) {\n-            displayName = configuration.getPayPalDisplayName();\n-        }\n-        experienceProfile.put(DISPLAY_NAME_KEY, displayName);\n-\n-        if (payPalRequest.getLocaleCode() != null) {\n-            experienceProfile.put(LOCALE_CODE_KEY, payPalRequest.getLocaleCode());\n-        }\n-\n-        if (payPalRequest.getShippingAddressOverride() != null) {\n-            experienceProfile.put(ADDRESS_OVERRIDE_KEY, !payPalRequest.isShippingAddressEditable());\n-\n-            JSONObject shippingAddressJson;\n-            if (isBillingAgreement) {\n-                shippingAddressJson = new JSONObject();\n-                parameters.put(SHIPPING_ADDRESS_KEY, shippingAddressJson);\n-            } else {\n-                shippingAddressJson = parameters;\n-            }\n-\n-            PostalAddress shippingAddress = payPalRequest.getShippingAddressOverride();\n-            shippingAddressJson.put(PostalAddressParser.LINE_1_KEY, shippingAddress.getStreetAddress());\n-            shippingAddressJson.put(PostalAddressParser.LINE_2_KEY, shippingAddress.getExtendedAddress());\n-            shippingAddressJson.put(PostalAddressParser.LOCALITY_KEY, shippingAddress.getLocality());\n-            shippingAddressJson.put(PostalAddressParser.REGION_KEY, shippingAddress.getRegion());\n-            shippingAddressJson.put(PostalAddressParser.POSTAL_CODE_UNDERSCORE_KEY, shippingAddress.getPostalCode());\n-            shippingAddressJson.put(PostalAddressParser.COUNTRY_CODE_UNDERSCORE_KEY, shippingAddress.getCountryCodeAlpha2());\n-            shippingAddressJson.put(PostalAddressParser.RECIPIENT_NAME_UNDERSCORE_KEY, shippingAddress.getRecipientName());\n-        } else {\n-            experienceProfile.put(ADDRESS_OVERRIDE_KEY, false);\n-        }\n-\n-        if (payPalRequest.getMerchantAccountId() != null) {\n-            parameters.put(MERCHANT_ACCOUNT_ID, payPalRequest.getMerchantAccountId());\n-        }\n-\n-        parameters.put(EXPERIENCE_PROFILE_KEY, experienceProfile);\n-        return parameters.toString();\n-    }\n }"
  },
  {
    "sha": "4ba82df3fd0f608a721e3689c45f7843e93fbc66",
    "filename": "PayPal/src/main/java/com/braintreepayments/api/PayPalRequest.java",
    "status": "modified",
    "additions": 46,
    "deletions": 186,
    "changes": 232,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalRequest.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalRequest.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/main/java/com/braintreepayments/api/PayPalRequest.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -1,30 +1,40 @@\n package com.braintreepayments.api;\n \n-import androidx.annotation.Nullable;\n import androidx.annotation.StringDef;\n \n+import org.json.JSONException;\n+\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.util.ArrayList;\n import java.util.Collection;\n \n /**\n- * Represents the parameters that are needed to start a Checkout with PayPal\n- *\n- * In the checkout flow, the user is presented with details about the order and only agrees to a\n- * single payment. The result is not eligible for being saved in the Vault; however, you will receive\n- * shipping information and the user will not be able to revoke the consent.\n- *\n- * @see <a href=\"https://developer.paypal.com/docs/api/#inputfields-object\">PayPal REST API Reference</a>\n+ * Represents the parameters that are needed to tokenize a PayPal account.\n+ * See {@link PayPalCheckoutRequest} and {@link PayPalVaultRequest}.\n  */\n-public class PayPalRequest {\n-\n-    @Retention(RetentionPolicy.SOURCE)\n-    @StringDef({PayPalRequest.INTENT_ORDER, PayPalRequest.INTENT_SALE, PayPalRequest.INTENT_AUTHORIZE})\n-    @interface PayPalPaymentIntent {}\n-    public static final String INTENT_ORDER = \"order\";\n-    public static final String INTENT_SALE = \"sale\";\n-    public static final String INTENT_AUTHORIZE = \"authorize\";\n+public abstract class PayPalRequest {\n+\n+    static final String NO_SHIPPING_KEY = \"no_shipping\";\n+    static final String ADDRESS_OVERRIDE_KEY = \"address_override\";\n+    static final String LOCALE_CODE_KEY = \"locale_code\";\n+    static final String REQUEST_BILLING_AGREEMENT_KEY = \"request_billing_agreement\";\n+    static final String DESCRIPTION_KEY = \"description\";\n+    static final String AUTHORIZATION_FINGERPRINT_KEY = \"authorization_fingerprint\";\n+    static final String TOKENIZATION_KEY = \"client_key\";\n+    static final String RETURN_URL_KEY = \"return_url\";\n+    static final String OFFER_CREDIT_KEY = \"offer_paypal_credit\";\n+    static final String OFFER_PAY_LATER_KEY = \"offer_pay_later\";\n+    static final String CANCEL_URL_KEY = \"cancel_url\";\n+    static final String EXPERIENCE_PROFILE_KEY = \"experience_profile\";\n+    static final String AMOUNT_KEY = \"amount\";\n+    static final String CURRENCY_ISO_CODE_KEY = \"currency_iso_code\";\n+    static final String INTENT_KEY = \"intent\";\n+    static final String LANDING_PAGE_TYPE_KEY = \"landing_page_type\";\n+    static final String DISPLAY_NAME_KEY = \"brand_name\";\n+    static final String SHIPPING_ADDRESS_KEY = \"shipping_address\";\n+    static final String MERCHANT_ACCOUNT_ID = \"merchant_account_id\";\n+    static final String LINE_ITEMS_KEY = \"line_items\";\n \n     @Retention(RetentionPolicy.SOURCE)\n     @StringDef({PayPalRequest.LANDING_PAGE_TYPE_BILLING, PayPalRequest.LANDING_PAGE_TYPE_LOGIN})\n@@ -40,103 +50,45 @@\n      */\n     public static final String LANDING_PAGE_TYPE_LOGIN = \"login\";\n \n-    @Retention(RetentionPolicy.SOURCE)\n-    @StringDef({PayPalRequest.USER_ACTION_DEFAULT, PayPalRequest.USER_ACTION_COMMIT})\n-    @interface PayPalPaymentUserAction {}\n-\n-    /**\n-     * Shows the default call-to-action text on the PayPal Express Checkout page. This option indicates that a final\n-     * confirmation will be shown on the merchant checkout site before the user's payment method is charged.\n-     */\n-    public static final String USER_ACTION_DEFAULT = \"\";\n-\n-    /**\n-     * Shows a deterministic call-to-action. This option indicates to the user that their payment method will be charged\n-     * when they click the call-to-action button on the PayPal Checkout page, and that no final confirmation page will\n-     * be shown on the merchant's checkout page. This option works for both checkout and vault flows.\n-     */\n-    public static final String USER_ACTION_COMMIT = \"commit\";\n-\n-    private String mAmount;\n-    private String mCurrencyCode;\n     private String mLocaleCode;\n     private String mBillingAgreementDescription;\n     private boolean mShippingAddressRequired;\n     private boolean mShippingAddressEditable = false;\n     private PostalAddress mShippingAddressOverride;\n-    private String mIntent = INTENT_AUTHORIZE;\n     private String mLandingPageType;\n-    private String mUserAction = USER_ACTION_DEFAULT;\n     private String mDisplayName;\n-    private boolean mOfferCredit;\n-    private boolean mOfferPayLater;\n     private String mMerchantAccountId;\n     private final ArrayList<PayPalLineItem> mLineItems = new ArrayList<>();\n \n     /**\n-     * Constructs a request for PayPal Single Payment and Billing Agreement flows.\n+     * Constructs a request for PayPal Checkout and Vault flows.\n      */\n     public PayPalRequest() {\n         mShippingAddressRequired = false;\n-        mOfferCredit = false;\n-        mOfferPayLater = false;\n-    }\n-\n-    /**\n-     * This amount may differ slightly from the transaction amount. The exact decline rules\n-     * for mismatches between this client-side amount and the final amount in the Transaction\n-     * are determined by the gateway.\n-     *\n-     * @param amount The transaction amount in currency units (as * determined by setCurrencyCode).\n-     * For example, \"1.20\" corresponds to one dollar and twenty cents. Amount must be a non-negative\n-     * number, may optionally contain exactly 2 decimal places separated by '.', optional\n-     * thousands separator ',', limited to 7 digits before the decimal point.\n-     *\n-     * This value must be null for Billing Agreements.\n-     */\n-    public PayPalRequest amount(@Nullable String amount) {\n-        mAmount = amount;\n-        return this;\n-    }\n-\n-    /**\n-     * Optional: A valid ISO currency code to use for the transaction. Defaults to merchant currency\n-     * code if not set.\n-     *\n-     * If unspecified, the currency code will be chosen based on the active merchant account in the\n-     * client token.\n-     *\n-     * @param currencyCode A currency code, such as \"USD\"\n-     */\n-    public PayPalRequest currencyCode(String currencyCode) {\n-        mCurrencyCode = currencyCode;\n-        return this;\n     }\n \n     /**\n      * Defaults to false. When set to true, the shipping address selector will be displayed.\n      *\n      * @param shippingAddressRequired Whether to hide the shipping address in the flow.\n      */\n-    public PayPalRequest shippingAddressRequired(boolean shippingAddressRequired) {\n+    public void setShippingAddressRequired(boolean shippingAddressRequired) {\n         mShippingAddressRequired = shippingAddressRequired;\n-        return this;\n     }\n \n     /**\n      * Defaults to false. Set to true to enable user editing of the shipping address.\n-     * Only applies when {@link PayPalRequest#shippingAddressOverride(PostalAddress)} is set\n+     * Only applies when {@link PayPalRequest#setShippingAddressOverride(PostalAddress)} is set\n      * with a {@link PostalAddress}.\n      *\n      * @param shippingAddressEditable Whether to allow the the shipping address to be editable.\n      */\n-    public PayPalRequest shippingAddressEditable(boolean shippingAddressEditable) {\n+    public void setShippingAddressEditable(boolean shippingAddressEditable) {\n         mShippingAddressEditable = shippingAddressEditable;\n-        return this;\n     }\n \n     /**\n-     * Whether to use a custom locale code.\n+     * Optional: A locale code to use for the transaction.\n      * <br>\n      * Supported locales are:\n      * <br>\n@@ -168,69 +120,41 @@ public PayPalRequest shippingAddressEditable(boolean shippingAddressEditable) {\n      * <code>zh_TW</code>,\n      * <code>zh_XC</code>.\n      *\n-     * @param localeCode Whether to use a custom locale code.\n+     * @param localeCode A locale code to use for the transaction.\n      */\n-    public PayPalRequest localeCode(String localeCode) {\n+    public void setLocaleCode(String localeCode) {\n         mLocaleCode = localeCode;\n-        return this;\n     }\n \n     /**\n-     * The merchant name displayed in the PayPal flow; defaults to the company name on your Braintree account.\n+     * Optional: The merchant name displayed in the PayPal flow; defaults to the company name on your Braintree account.\n      *\n      * @param displayName The name to be displayed in the PayPal flow.\n      */\n-    public PayPalRequest displayName(String displayName) {\n+    public void setDisplayName(String displayName) {\n         mDisplayName = displayName;\n-        return this;\n     }\n \n     /**\n-     * Display a custom description to the user for a billing agreement.\n+     * Optional: Display a custom description to the user for a billing agreement.\n      *\n      * @param description The description to display.\n      */\n-    public PayPalRequest billingAgreementDescription(String description) {\n+    public void setBillingAgreementDescription(String description) {\n         mBillingAgreementDescription = description;\n-        return this;\n     }\n \n     /**\n-     * A custom shipping address to be used for the checkout flow.\n+     * Optional: A valid shipping address to be displayed in the transaction flow. An error will occur if this address is not valid\n      *\n      * @param shippingAddressOverride a custom {@link PostalAddress}\n      */\n-    public PayPalRequest shippingAddressOverride(PostalAddress shippingAddressOverride) {\n+    public void setShippingAddressOverride(PostalAddress shippingAddressOverride) {\n         mShippingAddressOverride = shippingAddressOverride;\n-        return this;\n-    }\n-\n-    /**\n-     * Payment intent. Must be set to {@link #INTENT_SALE} for immediate payment,\n-     * {@link #INTENT_AUTHORIZE} to authorize a payment for capture later, or\n-     * {@link #INTENT_ORDER} to create an order.\n-     *\n-     * Defaults to authorize. Only works in the Single Payment flow.\n-     *\n-     * @param intent Must be a {@link PayPalPaymentIntent} value:\n-     * <ul>\n-     * <li>{@link PayPalRequest#INTENT_AUTHORIZE} to authorize a payment for capture later </li>\n-     * <li>{@link PayPalRequest#INTENT_ORDER} to create an order </li>\n-     * <li>{@link PayPalRequest#INTENT_SALE} for immediate payment </li>\n-     * </ul>\n-     *\n-     * @see <a href=\"https://developer.paypal.com/docs/api/payments/v1/#definition-payment\">\"intent\" under the \"payment\" definition</a>\n-     * @see <a href=\"https://developer.paypal.com/docs/integration/direct/payments/create-process-order/\">Create and process orders</a>\n-     * for more information\n-     *\n-     */\n-    public PayPalRequest intent(@PayPalPaymentIntent String intent) {\n-        mIntent = intent;\n-        return this;\n     }\n \n     /**\n-     * Use this option to specify the PayPal page to display when a user lands on the PayPal site to complete the payment.\n+     * Optional: Use this option to specify the PayPal page to display when a user lands on the PayPal site to complete the payment.\n      *\n      * @param landingPageType Must be a {@link PayPalLandingPageType} value:\n      * <ul>\n@@ -239,75 +163,27 @@ public PayPalRequest intent(@PayPalPaymentIntent String intent) {\n      *\n      * @see <a href=\"https://developer.paypal.com/docs/api/payments/v1/#definition-application_context\">See \"landing_page\" under the \"application_context\" definition</a>\n      */\n-    public PayPalRequest landingPageType(@PayPalLandingPageType String landingPageType) {\n+    public void setLandingPageType(@PayPalLandingPageType String landingPageType) {\n         mLandingPageType = landingPageType;\n-        return this;\n-    }\n-\n-    /**\n-     * Set the checkout user action which determines the button text.\n-     *\n-     * @param userAction Must be a be {@link PayPalPaymentUserAction} value:\n-     * <ul>\n-     * <li>{@link #USER_ACTION_COMMIT}</li>\n-     * <li>{@link #USER_ACTION_DEFAULT}</li>\n-     * </ul>\n-     *\n-     * @see <a href=\"https://developer.paypal.com/docs/api/payments/v1/#definition-application_context\">See \"user_action\" under the \"application_context\" definition</a>\n-     */\n-    public PayPalRequest userAction(@PayPalPaymentUserAction String userAction) {\n-        mUserAction = userAction;\n-        return this;\n-    }\n-\n-    /**\n-     * Offers PayPal Credit prominently in the payment flow. Defaults to false. Only available with Billing Agreements\n-     * and PayPal Checkout.\n-     *\n-     * @param offerCredit Whether to offer PayPal Credit.\n-     */\n-    public PayPalRequest offerCredit(boolean offerCredit) {\n-        mOfferCredit = offerCredit;\n-        return this;\n-    }\n-\n-    /**\n-     * Offers PayPal Pay Later prominently in the payment flow. Defaults to false. Only available with PayPal Checkout.\n-     *\n-     * @param offerPayLater Whether to offer PayPal Pay Later.\n-     */\n-    public PayPalRequest offerPayLater(boolean offerPayLater) {\n-        mOfferPayLater = offerPayLater;\n-        return this;\n     }\n \n     /**\n-     * Specify a merchant account Id other than the default to use during tokenization.\n+     * Optional: Specify a merchant account Id other than the default to use during tokenization.\n      *\n      * @param merchantAccountId the non-default merchant account Id.\n      */\n-    public PayPalRequest merchantAccountId(String merchantAccountId) {\n+    public void setMerchantAccountId(String merchantAccountId) {\n         mMerchantAccountId = merchantAccountId;\n-        return this;\n     }\n \n     /**\n-     * The line items for this transaction. It can include up to 249 line items.\n+     * Optional: The line items for this transaction. It can include up to 249 line items.\n      *\n      * @param lineItems a collection of {@link PayPalLineItem}\n      */\n-    public PayPalRequest lineItems(Collection<PayPalLineItem> lineItems) {\n+    public void setLineItems(Collection<PayPalLineItem> lineItems) {\n         mLineItems.clear();\n         mLineItems.addAll(lineItems);\n-        return this;\n-    }\n-\n-    public String getAmount() {\n-        return mAmount;\n-    }\n-\n-    public String getCurrencyCode() {\n-        return mCurrencyCode;\n     }\n \n     public String getLocaleCode() {\n@@ -334,14 +210,6 @@ public String getDisplayName() {\n         return mDisplayName;\n     }\n \n-    public boolean shouldOfferCredit() {\n-        return mOfferCredit;\n-    }\n-\n-    public boolean shouldOfferPayLater() {\n-        return mOfferPayLater;\n-    }\n-\n     public String getMerchantAccountId() {\n         return mMerchantAccountId;\n     }\n@@ -350,18 +218,10 @@ public String getMerchantAccountId() {\n         return mLineItems;\n     }\n \n-    @PayPalPaymentIntent\n-    public String getIntent() {\n-        return mIntent;\n-    }\n-\n     @PayPalLandingPageType\n     public String getLandingPageType() {\n         return mLandingPageType;\n     }\n \n-    @PayPalPaymentUserAction\n-    public String getUserAction() {\n-        return mUserAction;\n-    }\n+    abstract String createRequestBody(Configuration configuration, Authorization authorization, String successUrl, String cancelUrl) throws JSONException;\n }"
  },
  {
    "sha": "1fda69a87f93a6b28390cefed318391ae2508a6a",
    "filename": "PayPal/src/main/java/com/braintreepayments/api/PayPalResponse.java",
    "status": "modified",
    "additions": 16,
    "deletions": 20,
    "changes": 36,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalResponse.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalResponse.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/main/java/com/braintreepayments/api/PayPalResponse.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -4,14 +4,15 @@\n \n     private String approvalUrl;\n     private String clientMetadataId;\n-    private String intent;\n-\n-    private boolean isBillingAgreement;\n-    private String merchantAccountId;\n     private String pairingId;\n+    private final PayPalRequest payPalRequest;\n \n     private String successUrl;\n \n+    PayPalResponse(PayPalRequest payPalRequest) {\n+        this.payPalRequest = payPalRequest;\n+    }\n+\n     String getApprovalUrl() {\n         return approvalUrl;\n     }\n@@ -31,30 +32,25 @@ PayPalResponse clientMetadataId(String value) {\n     }\n \n     String getIntent() {\n-        return intent;\n+        if (payPalRequest instanceof PayPalCheckoutRequest) {\n+            return ((PayPalCheckoutRequest) payPalRequest).getIntent();\n+        }\n+        return null;\n     }\n \n-    PayPalResponse intent(String value) {\n-        intent = value;\n-        return this;\n+    String getUserAction() {\n+        if (payPalRequest instanceof  PayPalCheckoutRequest) {\n+            return ((PayPalCheckoutRequest) payPalRequest).getUserAction();\n+        }\n+        return \"\";\n     }\n \n     boolean isBillingAgreement() {\n-        return isBillingAgreement;\n-    }\n-\n-    PayPalResponse isBillingAgreement(boolean value) {\n-        isBillingAgreement = value;\n-        return this;\n+        return payPalRequest instanceof PayPalVaultRequest;\n     }\n \n     String getMerchantAccountId() {\n-        return merchantAccountId;\n-    }\n-\n-    PayPalResponse merchantAccountId(String value) {\n-        merchantAccountId = value;\n-        return this;\n+        return payPalRequest.getMerchantAccountId();\n     }\n \n     String getPairingId() {"
  },
  {
    "sha": "fadf9848bd2c5f087d434d993fee94a975f0fc85",
    "filename": "PayPal/src/main/java/com/braintreepayments/api/PayPalVaultRequest.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalVaultRequest.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/main/java/com/braintreepayments/api/PayPalVaultRequest.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/main/java/com/braintreepayments/api/PayPalVaultRequest.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -0,0 +1,85 @@\n+package com.braintreepayments.api;\n+\n+import android.text.TextUtils;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Represents the parameters that are needed to start the PayPal Vault flow\n+ */\n+public class PayPalVaultRequest extends PayPalRequest {\n+\n+    private boolean offerCredit;\n+\n+    public PayPalVaultRequest() {}\n+\n+    /**\n+     * Optional: Offers PayPal Credit if the customer qualifies. Defaults to false.\n+     *\n+     * @param offerCredit Whether to offer PayPal Credit.\n+     */\n+    public void setOfferCredit(boolean offerCredit) {\n+        this.offerCredit = offerCredit;\n+    }\n+\n+    public boolean shouldOfferCredit() {\n+        return offerCredit;\n+    }\n+\n+    String createRequestBody(Configuration configuration, Authorization authorization, String successUrl, String cancelUrl) throws JSONException {\n+        JSONObject parameters = new JSONObject()\n+                .put(RETURN_URL_KEY, successUrl)\n+                .put(CANCEL_URL_KEY, cancelUrl)\n+                .put(OFFER_CREDIT_KEY, offerCredit);\n+\n+        if (authorization instanceof ClientToken) {\n+            parameters.put(AUTHORIZATION_FINGERPRINT_KEY, authorization.getBearer());\n+        } else {\n+            parameters.put(TOKENIZATION_KEY, authorization.getBearer());\n+        }\n+\n+        String billingAgreementDescription = getBillingAgreementDescription();\n+        if (!TextUtils.isEmpty(billingAgreementDescription)) {\n+            parameters.put(DESCRIPTION_KEY, billingAgreementDescription);\n+        }\n+\n+        JSONObject experienceProfile = new JSONObject();\n+        experienceProfile.put(NO_SHIPPING_KEY, !isShippingAddressRequired());\n+        experienceProfile.put(LANDING_PAGE_TYPE_KEY, getLandingPageType());\n+        String displayName = getDisplayName();\n+        if (TextUtils.isEmpty(displayName)) {\n+            displayName = configuration.getPayPalDisplayName();\n+        }\n+        experienceProfile.put(DISPLAY_NAME_KEY, displayName);\n+\n+        if (getLocaleCode() != null) {\n+            experienceProfile.put(LOCALE_CODE_KEY, getLocaleCode());\n+        }\n+\n+        if (getShippingAddressOverride() != null) {\n+            experienceProfile.put(ADDRESS_OVERRIDE_KEY, !isShippingAddressEditable());\n+\n+            JSONObject shippingAddressJson = new JSONObject();\n+            parameters.put(SHIPPING_ADDRESS_KEY, shippingAddressJson);\n+\n+            PostalAddress shippingAddress = getShippingAddressOverride();\n+            shippingAddressJson.put(PostalAddressParser.LINE_1_KEY, shippingAddress.getStreetAddress());\n+            shippingAddressJson.put(PostalAddressParser.LINE_2_KEY, shippingAddress.getExtendedAddress());\n+            shippingAddressJson.put(PostalAddressParser.LOCALITY_KEY, shippingAddress.getLocality());\n+            shippingAddressJson.put(PostalAddressParser.REGION_KEY, shippingAddress.getRegion());\n+            shippingAddressJson.put(PostalAddressParser.POSTAL_CODE_UNDERSCORE_KEY, shippingAddress.getPostalCode());\n+            shippingAddressJson.put(PostalAddressParser.COUNTRY_CODE_UNDERSCORE_KEY, shippingAddress.getCountryCodeAlpha2());\n+            shippingAddressJson.put(PostalAddressParser.RECIPIENT_NAME_UNDERSCORE_KEY, shippingAddress.getRecipientName());\n+        } else {\n+            experienceProfile.put(ADDRESS_OVERRIDE_KEY, false);\n+        }\n+\n+        if (getMerchantAccountId() != null) {\n+            parameters.put(MERCHANT_ACCOUNT_ID, getMerchantAccountId());\n+        }\n+\n+        parameters.put(EXPERIENCE_PROFILE_KEY, experienceProfile);\n+        return parameters.toString();\n+    }\n+}"
  },
  {
    "sha": "586402819bc02d7fc4c2d870efd501099eda6498",
    "filename": "PayPal/src/test/java/com/braintreepayments/api/MockPayPalInternalClientBuilder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/MockPayPalInternalClientBuilder.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/MockPayPalInternalClientBuilder.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/test/java/com/braintreepayments/api/MockPayPalInternalClientBuilder.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -6,7 +6,6 @@\n import org.mockito.stubbing.Answer;\n \n import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.anyBoolean;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n \n@@ -31,15 +30,15 @@ public PayPalInternalClient build() {\n         doAnswer(new Answer<Void>() {\n             @Override\n             public Void answer(InvocationOnMock invocation) {\n-                PayPalInternalClientCallback callback = (PayPalInternalClientCallback) invocation.getArguments()[3];\n+                PayPalInternalClientCallback callback = (PayPalInternalClientCallback) invocation.getArguments()[2];\n                 if (successResponse != null) {\n                     callback.onResult(successResponse, null);\n                 } else if (error != null) {\n                     callback.onResult(null, error);\n                 }\n                 return null;\n             }\n-        }).when(payPalInternalClient).sendRequest(any(Context.class), any(PayPalRequest.class), anyBoolean(), any(PayPalInternalClientCallback.class));\n+        }).when(payPalInternalClient).sendRequest(any(Context.class), any(PayPalRequest.class), any(PayPalInternalClientCallback.class));\n \n         return payPalInternalClient;\n     }"
  },
  {
    "sha": "fc0209413249050feda1f573c1bcbf306d694a94",
    "filename": "PayPal/src/test/java/com/braintreepayments/api/PayPalAccountBuilderUnitTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalAccountBuilderUnitTest.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalAccountBuilderUnitTest.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/test/java/com/braintreepayments/api/PayPalAccountBuilderUnitTest.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -21,7 +21,7 @@\n     @Test\n     public void build_correctlyBuildsAPayPalAccount() throws JSONException {\n         PayPalAccountBuilder paypalAccountBuilder = new PayPalAccountBuilder()\n-                .intent(PayPalRequest.INTENT_SALE)\n+                .intent(PayPalCheckoutRequest.INTENT_SALE)\n                 .clientMetadataId(\"correlation_id\")\n                 .source(\"paypal-sdk\")\n                 .merchantAccountId(\"alt_merchant_account_id\");\n@@ -33,7 +33,7 @@ public void build_correctlyBuildsAPayPalAccount() throws JSONException {\n \n         assertNull(jsonAccount.opt(\"details\"));\n         assertEquals(\"correlation_id\", jsonAccount.getString(\"correlationId\"));\n-        assertEquals(PayPalRequest.INTENT_SALE, jsonAccount.getString(\"intent\"));\n+        assertEquals(PayPalCheckoutRequest.INTENT_SALE, jsonAccount.getString(\"intent\"));\n         assertEquals(\"custom\", jsonMetadata.getString(\"integration\"));\n         assertEquals(\"paypal-sdk\", jsonMetadata.getString(\"source\"));\n         assertEquals(\"alt_merchant_account_id\", jsonObject.getString(\"merchant_account_id\"));"
  },
  {
    "sha": "ee2507f573607b413383b45d992c467651971f98",
    "filename": "PayPal/src/test/java/com/braintreepayments/api/PayPalCheckoutRequestUnitTest.java",
    "status": "renamed",
    "additions": 24,
    "deletions": 23,
    "changes": 47,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalCheckoutRequestUnitTest.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalCheckoutRequestUnitTest.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/test/java/com/braintreepayments/api/PayPalCheckoutRequestUnitTest.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -8,54 +8,55 @@\n import static junit.framework.Assert.assertFalse;\n import static junit.framework.Assert.assertNull;\n import static junit.framework.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n \n @RunWith(RobolectricTestRunner.class)\n-public class PayPalRequestUnitTest {\n+public class PayPalCheckoutRequestUnitTest {\n \n     @Test\n-    public void newPayPalRequest_setsDefaultValues() {\n-        PayPalRequest request = new PayPalRequest();\n+    public void newPayPalCheckoutRequest_setsDefaultValues() {\n+        PayPalCheckoutRequest request = new PayPalCheckoutRequest(\"1.00\");\n \n-        assertNull(request.getAmount());\n+        assertNotNull(request.getAmount());\n         assertNull(request.getCurrencyCode());\n         assertNull(request.getLocaleCode());\n         assertFalse(request.isShippingAddressRequired());\n         assertNull(request.getShippingAddressOverride());\n         assertNull(request.getDisplayName());\n-        assertEquals(PayPalRequest.INTENT_AUTHORIZE, request.getIntent());\n+        assertEquals(PayPalCheckoutRequest.INTENT_AUTHORIZE, request.getIntent());\n         assertNull(request.getLandingPageType());\n-        assertFalse(request.shouldOfferCredit());\n+        assertNull(request.getBillingAgreementDescription());\n         assertFalse(request.shouldOfferPayLater());\n     }\n \n     @Test\n     public void setsValuesCorrectly() {\n         PostalAddress postalAddress = new PostalAddress();\n-        PayPalRequest request = new PayPalRequest()\n-                .amount(\"1.00\")\n-                .currencyCode(\"USD\")\n-                .localeCode(\"US\")\n-                .billingAgreementDescription(\"Billing Agreement Description\")\n-                .shippingAddressRequired(true)\n-                .shippingAddressOverride(postalAddress)\n-                .intent(PayPalRequest.INTENT_SALE)\n-                .userAction(PayPalRequest.USER_ACTION_COMMIT)\n-                .displayName(\"Display Name\")\n-                .landingPageType(PayPalRequest.LANDING_PAGE_TYPE_LOGIN)\n-                .offerCredit(true)\n-                .offerPayLater(true);\n+        PayPalCheckoutRequest request = new PayPalCheckoutRequest(\"1.00\");\n+        request.setCurrencyCode(\"USD\");\n+        request.setOfferPayLater(true);\n+        request.setIntent(PayPalCheckoutRequest.INTENT_SALE);\n+\n+        request.setLocaleCode(\"US\");\n+        request.setRequestBillingAgreement(true);\n+        request.setBillingAgreementDescription(\"Billing Agreement Description\");\n+        request.setShippingAddressRequired(true);\n+        request.setShippingAddressOverride(postalAddress);\n+        request.setUserAction(PayPalCheckoutRequest.USER_ACTION_COMMIT);\n+        request.setDisplayName(\"Display Name\");\n+        request.setLandingPageType(PayPalRequest.LANDING_PAGE_TYPE_LOGIN);\n \n         assertEquals(\"1.00\", request.getAmount());\n         assertEquals(\"USD\", request.getCurrencyCode());\n         assertEquals(\"US\", request.getLocaleCode());\n+        assertTrue(request.shouldRequestBillingAgreement());\n         assertEquals(\"Billing Agreement Description\", request.getBillingAgreementDescription());\n         assertTrue(request.isShippingAddressRequired());\n         assertEquals(postalAddress, request.getShippingAddressOverride());\n-        assertEquals(PayPalRequest.INTENT_SALE, request.getIntent());\n-        assertEquals(PayPalRequest.USER_ACTION_COMMIT, request.getUserAction());\n+        assertEquals(PayPalCheckoutRequest.INTENT_SALE, request.getIntent());\n+        assertEquals(PayPalCheckoutRequest.USER_ACTION_COMMIT, request.getUserAction());\n         assertEquals(\"Display Name\", request.getDisplayName());\n         assertEquals(PayPalRequest.LANDING_PAGE_TYPE_LOGIN, request.getLandingPageType());\n-        assertTrue(request.shouldOfferCredit());\n         assertTrue(request.shouldOfferPayLater());\n     }\n-}\n+}\n\\ No newline at end of file",
    "previous_filename": "PayPal/src/test/java/com/braintreepayments/api/PayPalRequestUnitTest.java"
  },
  {
    "sha": "8f475592b4e7794316df47643d4ac1d94b336142",
    "filename": "PayPal/src/test/java/com/braintreepayments/api/PayPalClientUnitTest.java",
    "status": "modified",
    "additions": 40,
    "deletions": 83,
    "changes": 123,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalClientUnitTest.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalClientUnitTest.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/test/java/com/braintreepayments/api/PayPalClientUnitTest.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -20,6 +20,7 @@\n import static org.mockito.Matchers.isNull;\n import static org.mockito.Matchers.same;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n@@ -45,21 +46,6 @@ public void beforeEach() throws JSONException {\n         payPalFlowStartedCallback = mock(PayPalFlowStartedCallback.class);\n     }\n \n-    @Test\n-    public void requestBillingAgreement_throwsExceptionWhenAmountIsIncluded() {\n-        BraintreeClient braintreeClient = new MockBraintreeClientBuilder().build();\n-        TokenizationClient tokenizationClient = new MockTokenizationClientBuilder().build();\n-        PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder().build();\n-\n-        PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n-        sut.requestBillingAgreement(context, new PayPalRequest().amount(\"1.00\"), payPalFlowStartedCallback);\n-\n-        ArgumentCaptor<Exception> errorCaptor = ArgumentCaptor.forClass(Exception.class);\n-        verify(payPalFlowStartedCallback).onResult(errorCaptor.capture());\n-        assertTrue(errorCaptor.getValue() instanceof BraintreeException);\n-        assertEquals(\"There must be no amount specified for the Billing Agreement flow\", errorCaptor.getValue().getMessage());\n-    }\n-\n     @Test\n     public void requestBillingAgreement_whenPayPalNotEnabled_throwsError() {\n         TokenizationClient tokenizationClient = new MockTokenizationClientBuilder().build();\n@@ -70,7 +56,7 @@ public void requestBillingAgreement_whenPayPalNotEnabled_throwsError() {\n                 .build();\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n-        sut.requestBillingAgreement(context, new PayPalRequest(), payPalFlowStartedCallback);\n+        sut.requestBillingAgreement(context, new PayPalVaultRequest(), payPalFlowStartedCallback);\n \n         ArgumentCaptor<Exception> errorCaptor = ArgumentCaptor.forClass(Exception.class);\n         verify(payPalFlowStartedCallback).onResult(errorCaptor.capture());\n@@ -91,7 +77,7 @@ public void requestBillingAgreement_whenDeviceCantPerformBrowserSwitch_throwsErr\n                 .build();\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n-        sut.requestBillingAgreement(context, new PayPalRequest(), payPalFlowStartedCallback);\n+        sut.requestBillingAgreement(context, new PayPalVaultRequest(), payPalFlowStartedCallback);\n \n         ArgumentCaptor<Exception> errorCaptor = ArgumentCaptor.forClass(Exception.class);\n         verify(payPalFlowStartedCallback).onResult(errorCaptor.capture());\n@@ -106,13 +92,13 @@ public void requestBillingAgreement_whenDeviceCantPerformBrowserSwitch_throwsErr\n     public void requestBillingAgreement_startsBrowser() throws JSONException, BrowserSwitchException {\n         TokenizationClient tokenizationClient = new MockTokenizationClientBuilder().build();\n \n-        PayPalResponse payPalResponse = new PayPalResponse()\n+        PayPalVaultRequest payPalVaultRequest = new PayPalVaultRequest();\n+        payPalVaultRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n+\n+        PayPalResponse payPalResponse = new PayPalResponse(payPalVaultRequest)\n                 .approvalUrl(\"https://example.com/approval/url\")\n                 .successUrl(\"https://example.com/success/url\")\n-                .isBillingAgreement(true)\n-                .clientMetadataId(\"sample-client-metadata-id\")\n-                .merchantAccountId(\"sample-merchant-account-id\")\n-                .intent(\"authorize\");\n+                .clientMetadataId(\"sample-client-metadata-id\");\n         PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder()\n                 .success(payPalResponse)\n                 .build();\n@@ -123,8 +109,7 @@ public void requestBillingAgreement_startsBrowser() throws JSONException, Browse\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n \n-        PayPalRequest payPalRequest = new PayPalRequest();\n-        sut.requestBillingAgreement(context, payPalRequest, payPalFlowStartedCallback);\n+        sut.requestBillingAgreement(context, payPalVaultRequest, payPalFlowStartedCallback);\n \n         verify(payPalFlowStartedCallback).onResult(null);\n \n@@ -143,20 +128,19 @@ public void requestBillingAgreement_startsBrowser() throws JSONException, Browse\n         assertEquals(\"sample-client-metadata-id\", metadata.get(\"client-metadata-id\"));\n         assertEquals(\"sample-merchant-account-id\", metadata.get(\"merchant-account-id\"));\n         assertEquals(\"paypal-browser\", metadata.get(\"source\"));\n-        assertEquals(\"authorize\", metadata.get(\"intent\"));\n     }\n \n     @Test\n     public void requestBillingAgreement_sendsAnalyticsEvents() {\n         TokenizationClient tokenizationClient = new MockTokenizationClientBuilder().build();\n \n-        PayPalResponse payPalResponse = new PayPalResponse()\n+        PayPalVaultRequest payPalVaultRequest = new PayPalVaultRequest();\n+        payPalVaultRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n+\n+        PayPalResponse payPalResponse = new PayPalResponse(payPalVaultRequest)\n                 .approvalUrl(\"https://example.com/approval/url\")\n                 .successUrl(\"https://example.com/success/url\")\n-                .isBillingAgreement(true)\n-                .clientMetadataId(\"sample-client-metadata-id\")\n-                .merchantAccountId(\"sample-merchant-account-id\")\n-                .intent(\"authorize\");\n+                .clientMetadataId(\"sample-client-metadata-id\");\n         PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder()\n                 .success(payPalResponse)\n                 .build();\n@@ -168,8 +152,7 @@ public void requestBillingAgreement_sendsAnalyticsEvents() {\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n \n-        PayPalRequest payPalRequest = new PayPalRequest();\n-        sut.requestBillingAgreement(context, payPalRequest, payPalFlowStartedCallback);\n+        sut.requestBillingAgreement(context, payPalVaultRequest, payPalFlowStartedCallback);\n \n         verify(braintreeClient).sendAnalyticsEvent(\"paypal.billing-agreement.selected\");\n         verify(braintreeClient).sendAnalyticsEvent(\"paypal.billing-agreement.browser-switch.started\");\n@@ -179,13 +162,14 @@ public void requestBillingAgreement_sendsAnalyticsEvents() {\n     public void requestOneTimePayment_startsBrowser() throws JSONException, BrowserSwitchException {\n         TokenizationClient tokenizationClient = new MockTokenizationClientBuilder().build();\n \n-        PayPalResponse payPalResponse = new PayPalResponse()\n+        PayPalCheckoutRequest payPalCheckoutRequest = new PayPalCheckoutRequest(\"1.00\");\n+        payPalCheckoutRequest.setIntent(\"authorize\");\n+        payPalCheckoutRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n+\n+        PayPalResponse payPalResponse = new PayPalResponse(payPalCheckoutRequest)\n                 .approvalUrl(\"https://example.com/approval/url\")\n                 .successUrl(\"https://example.com/success/url\")\n-                .isBillingAgreement(false)\n-                .clientMetadataId(\"sample-client-metadata-id\")\n-                .merchantAccountId(\"sample-merchant-account-id\")\n-                .intent(\"authorize\");\n+                .clientMetadataId(\"sample-client-metadata-id\");\n         PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder()\n                 .success(payPalResponse)\n                 .build();\n@@ -196,8 +180,7 @@ public void requestOneTimePayment_startsBrowser() throws JSONException, BrowserS\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n \n-        PayPalRequest payPalRequest = new PayPalRequest().amount(\"1.00\");\n-        sut.requestOneTimePayment(context, payPalRequest, payPalFlowStartedCallback);\n+        sut.requestOneTimePayment(context, payPalCheckoutRequest, payPalFlowStartedCallback);\n \n         verify(payPalFlowStartedCallback).onResult(null);\n \n@@ -229,7 +212,7 @@ public void requestOneTimePayment_whenPayPalNotEnabled_throwsError() {\n                 .build();\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n-        sut.requestOneTimePayment(context, new PayPalRequest().amount(\"1.00\"), payPalFlowStartedCallback);\n+        sut.requestOneTimePayment(context, new PayPalCheckoutRequest(\"1.00\"), payPalFlowStartedCallback);\n \n         ArgumentCaptor<Exception> errorCaptor = ArgumentCaptor.forClass(Exception.class);\n         verify(payPalFlowStartedCallback).onResult(errorCaptor.capture());\n@@ -250,7 +233,7 @@ public void requestOneTimePayment_whenDeviceCantPerformBrowserSwitch_throwsError\n                 .build();\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n-        sut.requestOneTimePayment(context, new PayPalRequest().amount(\"1.00\"), payPalFlowStartedCallback);\n+        sut.requestOneTimePayment(context, new PayPalCheckoutRequest(\"1.00\"), payPalFlowStartedCallback);\n \n         ArgumentCaptor<Exception> errorCaptor = ArgumentCaptor.forClass(Exception.class);\n         verify(payPalFlowStartedCallback).onResult(errorCaptor.capture());\n@@ -266,13 +249,14 @@ public void requestOneTimePayment_whenDeviceCantPerformBrowserSwitch_throwsError\n     public void requestOneTimePayment_sendsBrowserSwitchStartAnalyticsEvent() {\n         TokenizationClient tokenizationClient = new MockTokenizationClientBuilder().build();\n \n-        PayPalResponse payPalResponse = new PayPalResponse()\n+        PayPalCheckoutRequest payPalCheckoutRequest = new PayPalCheckoutRequest(\"1.00\");\n+        payPalCheckoutRequest.setIntent(\"authorize\");\n+        payPalCheckoutRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n+\n+        PayPalResponse payPalResponse = new PayPalResponse(payPalCheckoutRequest)\n                 .approvalUrl(\"https://example.com/approval/url\")\n                 .successUrl(\"https://example.com/success/url\")\n-                .isBillingAgreement(false)\n-                .clientMetadataId(\"sample-client-metadata-id\")\n-                .merchantAccountId(\"sample-merchant-account-id\")\n-                .intent(\"authorize\");\n+                .clientMetadataId(\"sample-client-metadata-id\");\n         PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder()\n                 .success(payPalResponse)\n                 .build();\n@@ -283,8 +267,7 @@ public void requestOneTimePayment_sendsBrowserSwitchStartAnalyticsEvent() {\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n \n-        PayPalRequest payPalRequest = new PayPalRequest().amount(\"1.00\");\n-        sut.requestOneTimePayment(context, payPalRequest, payPalFlowStartedCallback);\n+        sut.requestOneTimePayment(context, payPalCheckoutRequest, payPalFlowStartedCallback);\n \n         verify(braintreeClient).sendAnalyticsEvent(\"paypal.single-payment.selected\");\n         verify(braintreeClient).sendAnalyticsEvent(\"paypal.single-payment.browser-switch.started\");\n@@ -297,7 +280,9 @@ public void requestOneTimePayment_sendsPayPalPayLaterOfferedAnalyticsEvent() {\n         PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder().build();\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n-        sut.requestOneTimePayment(context, new PayPalRequest().amount(\"1\").offerPayLater(true), payPalFlowStartedCallback);\n+        PayPalCheckoutRequest request = new PayPalCheckoutRequest(\"1.00\");\n+        request.setOfferPayLater(true);\n+        sut.requestOneTimePayment(context, request, payPalFlowStartedCallback);\n \n         verify(braintreeClient).sendAnalyticsEvent(\"paypal.single-payment.paylater.offered\");\n     }\n@@ -311,12 +296,12 @@ public void requestBillingAgreement_sendsPayPalRequestViaInternalClient() {\n                 .configuration(payPalEnabledConfig)\n                 .build();\n \n-        PayPalRequest payPalRequest = new PayPalRequest();\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n         sut.requestBillingAgreement(context, payPalRequest, payPalFlowStartedCallback);\n \n-        verify(payPalInternalClient).sendRequest(same(context), same(payPalRequest), eq(true), any(PayPalInternalClientCallback.class));\n+        verify(payPalInternalClient).sendRequest(same(context), same(payPalRequest), any(PayPalInternalClientCallback.class));\n     }\n \n     @Test\n@@ -328,12 +313,12 @@ public void requestOneTimePayment_sendsPayPalRequestViaInternalClient() {\n                 .configuration(payPalEnabledConfig)\n                 .build();\n \n-        PayPalRequest payPalRequest = new PayPalRequest().amount(\"1.00\");\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n \n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n         sut.requestOneTimePayment(context, payPalRequest, payPalFlowStartedCallback);\n \n-        verify(payPalInternalClient).sendRequest(same(context), same(payPalRequest), eq(false), any(PayPalInternalClientCallback.class));\n+        verify(payPalInternalClient).sendRequest(same(context), same(payPalRequest), any(PayPalInternalClientCallback.class));\n     }\n \n     @Test\n@@ -342,7 +327,8 @@ public void requestBillingAgreement_sendsPayPalCreditOfferedAnalyticsEvent() {\n         PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder().build();\n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder().build();\n \n-        PayPalRequest payPalRequest = new PayPalRequest().offerCredit(true);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setOfferCredit(true);\n         PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n \n         sut.requestBillingAgreement(context, payPalRequest, payPalFlowStartedCallback);\n@@ -593,33 +579,4 @@ public void onBrowserSwitchResult_whenBrowserSwitchCanceled_forwardsExceptionAnd\n \n         verify(braintreeClient).sendAnalyticsEvent(eq(\"paypal.single-payment.browser-switch.canceled\"));\n     }\n-\n-    @Test\n-    public void requestOneTimePayment_throwsExceptionWhenNoAmountSet() {\n-        BraintreeClient braintreeClient = new MockBraintreeClientBuilder().build();\n-        TokenizationClient tokenizationClient = new MockTokenizationClientBuilder().build();\n-        PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder().build();\n-\n-        PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n-        sut.requestOneTimePayment(context, new PayPalRequest(), payPalFlowStartedCallback);\n-\n-        ArgumentCaptor<Exception> errorCaptor = ArgumentCaptor.forClass(Exception.class);\n-        verify(payPalFlowStartedCallback).onResult(errorCaptor.capture());\n-        assertTrue(errorCaptor.getValue() instanceof BraintreeException);\n-        assertEquals(\"An amount must be specified for the Single Payment flow.\", errorCaptor.getValue().getMessage());\n-    }\n-\n-    @Test\n-    public void requestOneTimePayment_sendsPayPalCreditOfferedAnalyticsEvent() {\n-        BraintreeClient braintreeClient = new MockBraintreeClientBuilder().build();\n-        TokenizationClient tokenizationClient = new MockTokenizationClientBuilder().build();\n-        PayPalInternalClient payPalInternalClient = new MockPayPalInternalClientBuilder().build();\n-\n-        PayPalClient sut = new PayPalClient(braintreeClient, tokenizationClient, payPalInternalClient);\n-\n-        PayPalRequest payPalRequest = new PayPalRequest().amount(\"1.00\").offerCredit(true);\n-        sut.requestOneTimePayment(context, payPalRequest, payPalFlowStartedCallback);\n-\n-        verify(braintreeClient).sendAnalyticsEvent(\"paypal.single-payment.credit.offered\");\n-    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "fea718e7e25f5a7b1dfee26957f431bc05b6dfeb",
    "filename": "PayPal/src/test/java/com/braintreepayments/api/PayPalInternalClientUnitTest.java",
    "status": "modified",
    "additions": 130,
    "deletions": 79,
    "changes": 209,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalInternalClientUnitTest.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalInternalClientUnitTest.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/test/java/com/braintreepayments/api/PayPalInternalClientUnitTest.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -49,7 +49,7 @@ public void beforeEach() {\n     }\n \n     @Test\n-    public void sendRequest_withBillingAgreement_sendsAllParameters() throws JSONException {\n+    public void sendRequest_withPayPalVaultRequest_sendsAllParameters() throws JSONException {\n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n                 .configuration(Configuration.fromJson(Fixtures.CONFIGURATION_WITH_LIVE_PAYPAL))\n                 .authorization(clientToken)\n@@ -68,18 +68,18 @@ public void sendRequest_withBillingAgreement_sendsAllParameters() throws JSONExc\n                 .postalCode(\"12345\")\n                 .countryCodeAlpha2(\"US\");\n \n-        PayPalRequest payPalRequest = new PayPalRequest()\n-                .billingAgreementDescription(\"Billing Agreement Description\")\n-                .merchantAccountId(\"sample-merchant-account-id\")\n-                .landingPageType(\"sample-landing-page-type\")\n-                .displayName(\"sample-display-name\")\n-                .localeCode(\"US\")\n-                .shippingAddressRequired(true)\n-                .shippingAddressEditable(true)\n-                .offerCredit(true)\n-                .shippingAddressOverride(shippingAddressOverride);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setBillingAgreementDescription(\"Billing Agreement Description\");\n+        payPalRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n+        payPalRequest.setLandingPageType(\"sample-landing-page-type\");\n+        payPalRequest.setDisplayName(\"sample-display-name\");\n+        payPalRequest.setLocaleCode(\"US\");\n+        payPalRequest.setShippingAddressRequired(true);\n+        payPalRequest.setShippingAddressEditable(true);\n+        payPalRequest.setOfferCredit(true);\n+        payPalRequest.setShippingAddressOverride(shippingAddressOverride);\n \n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(eq(\"/v1/paypal_hermes/setup_billing_agreement\"), captor.capture(), any(HttpResponseCallback.class));\n@@ -92,7 +92,6 @@ public void sendRequest_withBillingAgreement_sendsAllParameters() throws JSONExc\n                 .put(\"return_url\", \"sample-scheme://onetouch/v1/success\")\n                 .put(\"cancel_url\", \"sample-scheme://onetouch/v1/cancel\")\n                 .put(\"offer_paypal_credit\", true)\n-                .put(\"offer_pay_later\", false)\n                 .put(\"description\", \"Billing Agreement Description\")\n                 .put(\"experience_profile\", new JSONObject()\n                         .put(\"no_shipping\", false)\n@@ -114,7 +113,7 @@ public void sendRequest_withBillingAgreement_sendsAllParameters() throws JSONExc\n     }\n \n     @Test\n-    public void sendRequest_withOneTimePayment_sendsAllParameters() throws JSONException {\n+    public void sendRequest_withPayPalCheckoutRequest_sendsAllParameters() throws JSONException {\n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n                 .configuration(Configuration.fromJson(Fixtures.CONFIGURATION_WITH_LIVE_PAYPAL))\n                 .authorization(clientToken)\n@@ -139,22 +138,22 @@ public void sendRequest_withOneTimePayment_sendsAllParameters() throws JSONExcep\n         item.setUnitTaxAmount(\"1.50\");\n         item.setUrl(\"http://example.com\");\n \n-        PayPalRequest payPalRequest = new PayPalRequest()\n-                .amount(\"1.00\")\n-                .currencyCode(\"USD\")\n-                .intent(\"authorize\")\n-                .merchantAccountId(\"sample-merchant-account-id\")\n-                .landingPageType(\"sample-landing-page-type\")\n-                .displayName(\"sample-display-name\")\n-                .localeCode(\"US\")\n-                .shippingAddressRequired(true)\n-                .shippingAddressEditable(true)\n-                .offerCredit(true)\n-                .offerPayLater(true)\n-                .lineItems(Collections.singletonList(item))\n-                .shippingAddressOverride(shippingAddressOverride);\n-\n-        sut.sendRequest(context, payPalRequest, false, payPalInternalClientCallback);\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        payPalRequest.setCurrencyCode(\"USD\");\n+        payPalRequest.setIntent(\"authorize\");\n+        payPalRequest.setRequestBillingAgreement(true);\n+        payPalRequest.setBillingAgreementDescription(\"Billing Agreement Description\");\n+        payPalRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n+        payPalRequest.setLandingPageType(\"sample-landing-page-type\");\n+        payPalRequest.setDisplayName(\"sample-display-name\");\n+        payPalRequest.setLocaleCode(\"US\");\n+        payPalRequest.setShippingAddressRequired(true);\n+        payPalRequest.setShippingAddressEditable(true);\n+        payPalRequest.setOfferPayLater(true);\n+        payPalRequest.setLineItems(Collections.singletonList(item));\n+        payPalRequest.setShippingAddressOverride(shippingAddressOverride);\n+\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(eq(\"/v1/paypal_hermes/create_payment_resource\"), captor.capture(), any(HttpResponseCallback.class));\n@@ -169,8 +168,9 @@ public void sendRequest_withOneTimePayment_sendsAllParameters() throws JSONExcep\n                 .put(\"authorization_fingerprint\", \"client-token-bearer\")\n                 .put(\"return_url\", \"sample-scheme://onetouch/v1/success\")\n                 .put(\"cancel_url\", \"sample-scheme://onetouch/v1/cancel\")\n-                .put(\"offer_paypal_credit\", true)\n                 .put(\"offer_pay_later\", true)\n+                .put(\"request_billing_agreement\", true)\n+                .put(\"description\", \"Billing Agreement Description\")\n                 .put(\"line_items\", new JSONArray()\n                         .put(new JSONObject()\n                                 .put(\"kind\", \"debit\")\n@@ -209,8 +209,8 @@ public void sendRequest_withTokenizationKey_sendsClientKeyParam() throws JSONExc\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest();\n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n@@ -231,8 +231,9 @@ public void sendRequest_withEmptyDisplayName_fallsBackToPayPalConfigurationDispl\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest().displayName(\"\");\n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setDisplayName(\"\");\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n@@ -252,8 +253,9 @@ public void sendRequest_withLocaleNotSpecified_omitsLocale() throws JSONExceptio\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest().localeCode(null);\n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setLocaleCode(null);\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n@@ -273,8 +275,9 @@ public void sendRequest_withMerchantAccountIdNotSpecified_omitsMerchantAccountId\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest().merchantAccountId(null);\n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setMerchantAccountId(null);\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n@@ -294,8 +297,9 @@ public void sendRequest_withShippingAddressOverrideNotSpecified_sendsAddressOver\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest().shippingAddressOverride(null);\n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setShippingAddressOverride(null);\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n@@ -316,11 +320,11 @@ public void sendRequest_withShippingAddressSpecified_sendsAddressOverrideBasedOn\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest()\n-                .shippingAddressEditable(false)\n-                .shippingAddressOverride(new PostalAddress());\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setShippingAddressEditable(false);\n+        payPalRequest.setShippingAddressOverride(new PostalAddress());\n \n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(eq(\"/v1/paypal_hermes/setup_billing_agreement\"), captor.capture(), any(HttpResponseCallback.class));\n@@ -332,16 +336,17 @@ public void sendRequest_withShippingAddressSpecified_sendsAddressOverrideBasedOn\n     }\n \n     @Test\n-    public void sendRequest_withBillingAgreement_omitsEmptyBillingAgreementDescription() throws JSONException {\n+    public void sendRequest_withPayPalVaultRequest_omitsEmptyBillingAgreementDescription() throws JSONException {\n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n                 .configuration(Configuration.fromJson(Fixtures.CONFIGURATION_WITH_LIVE_PAYPAL))\n                 .authorization(tokenizationKey)\n                 .build();\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest().billingAgreementDescription(\"\");\n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setBillingAgreementDescription(\"\");\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n@@ -353,16 +358,16 @@ public void sendRequest_withBillingAgreement_omitsEmptyBillingAgreementDescripti\n     }\n \n     @Test\n-    public void sendRequest_withOneTimePayment_fallsBackToPayPalConfigurationCurrencyCode() throws JSONException {\n+    public void sendRequest_withPayPalCheckoutRequest_fallsBackToPayPalConfigurationCurrencyCode() throws JSONException {\n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n                 .configuration(Configuration.fromJson(Fixtures.CONFIGURATION_WITH_LIVE_PAYPAL_INR))\n                 .authorization(tokenizationKey)\n                 .build();\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest();\n-        sut.sendRequest(context, payPalRequest, false, payPalInternalClientCallback);\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n@@ -374,16 +379,17 @@ public void sendRequest_withOneTimePayment_fallsBackToPayPalConfigurationCurrenc\n     }\n \n     @Test\n-    public void sendRequest_withOneTimePayment_omitsEmptyLineItems() throws JSONException {\n+    public void sendRequest_withPayPalCheckoutRequest_omitsEmptyLineItems() throws JSONException {\n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n                 .configuration(Configuration.fromJson(Fixtures.CONFIGURATION_WITH_LIVE_PAYPAL))\n                 .authorization(tokenizationKey)\n                 .build();\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest().lineItems(new ArrayList<PayPalLineItem>());\n-        sut.sendRequest(context, payPalRequest, false, payPalInternalClientCallback);\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        payPalRequest.setLineItems(new ArrayList<PayPalLineItem>());\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n@@ -395,7 +401,31 @@ public void sendRequest_withOneTimePayment_omitsEmptyLineItems() throws JSONExce\n     }\n \n     @Test\n-    public void sendRequest_withBillingAgreement_callsBackPayPalResponseOnSuccess() throws JSONException {\n+    public void sendRequest_withPayPalCheckoutRequest_whenRequestBillingAgreementFalse_andBillingAgreementDescriptionSet_doesNotSettBillingAgreementDescription() throws JSONException {\n+        BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n+                .configuration(Configuration.fromJson(Fixtures.CONFIGURATION_WITH_LIVE_PAYPAL))\n+                .authorization(tokenizationKey)\n+                .build();\n+\n+        PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n+\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        payPalRequest.setRequestBillingAgreement(false);\n+        payPalRequest.setBillingAgreementDescription(\"Billing agreement description\");\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n+\n+        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n+        verify(braintreeClient).sendPOST(anyString(), captor.capture(), any(HttpResponseCallback.class));\n+\n+        String result = captor.getValue();\n+        JSONObject actual = new JSONObject(result);\n+\n+        assertFalse(actual.has(\"request_billing_agreement\"));\n+        assertFalse(actual.has(\"description\"));\n+    }\n+\n+    @Test\n+    public void sendRequest_withPayPalVaultRequest_callsBackPayPalResponseOnSuccess() throws JSONException {\n         when(payPalDataCollector.getClientMetadataId(context)).thenReturn(\"sample-client-metadata-id\");\n \n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n@@ -407,22 +437,19 @@ public void sendRequest_withBillingAgreement_callsBackPayPalResponseOnSuccess()\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest()\n-                .intent(\"authorize\")\n-                .merchantAccountId(\"sample-merchant-account-id\")\n-                .userAction(PayPalRequest.USER_ACTION_COMMIT);\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+        payPalRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n \n-        sut.sendRequest(context, payPalRequest, true, payPalInternalClientCallback);\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<PayPalResponse> captor = ArgumentCaptor.forClass(PayPalResponse.class);\n         verify(payPalInternalClientCallback).onResult(captor.capture(), (Exception) isNull());\n \n         String expectedUrl =\n-            \"https://checkout.paypal.com/one-touch-login-sandbox/index.html?action=create_payment_resource\\u0026authorization_fingerprint=63cc461306c35080ce674a3372bffe1580b4130c7fd33d33968aa76bb93cdd06%7Ccreated_at%3D2015-10-13T18%3A49%3A48.371382792%2B0000%26merchant_id%3Ddcpspy2brwdjr3qn%26public_key%3D9wwrzqk3vr3t4nc8\\u0026cancel_url=com.braintreepayments.api.test.braintree%3A%2F%2Fonetouch%2Fv1%2Fcancel\\u0026controller=client_api%2Fpaypal_hermes\\u0026experience_profile%5Baddress_override%5D=false\\u0026experience_profile%5Bno_shipping%5D=false\\u0026merchant_id=dcpspy2brwdjr3qn\\u0026return_url=com.braintreepayments.api.test.braintree%3A%2F%2Fonetouch%2Fv1%2Fsuccess\\u0026ba_token=EC-HERMES-SANDBOX-EC-TOKEN\\u0026offer_paypal_credit=true\\u0026version=1\\u0026useraction=commit\";\n+            \"https://checkout.paypal.com/one-touch-login-sandbox/index.html?action=create_payment_resource\\u0026authorization_fingerprint=63cc461306c35080ce674a3372bffe1580b4130c7fd33d33968aa76bb93cdd06%7Ccreated_at%3D2015-10-13T18%3A49%3A48.371382792%2B0000%26merchant_id%3Ddcpspy2brwdjr3qn%26public_key%3D9wwrzqk3vr3t4nc8\\u0026cancel_url=com.braintreepayments.api.test.braintree%3A%2F%2Fonetouch%2Fv1%2Fcancel\\u0026controller=client_api%2Fpaypal_hermes\\u0026experience_profile%5Baddress_override%5D=false\\u0026experience_profile%5Bno_shipping%5D=false\\u0026merchant_id=dcpspy2brwdjr3qn\\u0026return_url=com.braintreepayments.api.test.braintree%3A%2F%2Fonetouch%2Fv1%2Fsuccess\\u0026ba_token=EC-HERMES-SANDBOX-EC-TOKEN\\u0026offer_paypal_credit=true\\u0026version=1\\u0026useraction=\";\n \n         PayPalResponse payPalResponse = captor.getValue();\n         assertTrue(payPalResponse.isBillingAgreement());\n-        assertEquals(\"authorize\", payPalResponse.getIntent());\n         assertEquals(\"sample-merchant-account-id\", payPalResponse.getMerchantAccountId());\n         assertEquals(\"sample-scheme://onetouch/v1/success\", payPalResponse.getSuccessUrl());\n         assertEquals(\"EC-HERMES-SANDBOX-EC-TOKEN\", payPalResponse.getPairingId());\n@@ -431,7 +458,7 @@ public void sendRequest_withBillingAgreement_callsBackPayPalResponseOnSuccess()\n     }\n \n     @Test\n-    public void sendRequest_withOneTimePayment_callsBackPayPalResponseOnSuccess() throws JSONException {\n+    public void sendRequest_withPayPalCheckoutRequest_callsBackPayPalResponseOnSuccess() throws JSONException {\n         when(payPalDataCollector.getClientMetadataId(context)).thenReturn(\"sample-client-metadata-id\");\n \n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n@@ -443,12 +470,12 @@ public void sendRequest_withOneTimePayment_callsBackPayPalResponseOnSuccess() th\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest()\n-                .intent(\"authorize\")\n-                .merchantAccountId(\"sample-merchant-account-id\")\n-                .userAction(PayPalRequest.USER_ACTION_COMMIT);\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        payPalRequest.setIntent(\"authorize\");\n+        payPalRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n+        payPalRequest.setUserAction(PayPalCheckoutRequest.USER_ACTION_COMMIT);\n \n-        sut.sendRequest(context, payPalRequest, false, payPalInternalClientCallback);\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<PayPalResponse> captor = ArgumentCaptor.forClass(PayPalResponse.class);\n         verify(payPalInternalClientCallback).onResult(captor.capture(), (Exception) isNull());\n@@ -467,7 +494,7 @@ public void sendRequest_withOneTimePayment_callsBackPayPalResponseOnSuccess() th\n     }\n \n     @Test\n-    public void sendRequest_setsApprovalUrlUserActionToEmptyStringOnDefault() throws JSONException {\n+    public void sendRequest_withPayPalCheckoutRequest_setsApprovalUrlUserActionToEmptyStringOnDefault() throws JSONException {\n         BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n                 .configuration(Configuration.fromJson(Fixtures.CONFIGURATION_WITH_LIVE_PAYPAL))\n                 .authorization(clientToken)\n@@ -476,11 +503,11 @@ public void sendRequest_setsApprovalUrlUserActionToEmptyStringOnDefault() throws\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest()\n-                .intent(\"authorize\")\n-                .merchantAccountId(\"sample-merchant-account-id\");\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        payPalRequest.setIntent(\"authorize\");\n+        payPalRequest.setMerchantAccountId(\"sample-merchant-account-id\");\n \n-        sut.sendRequest(context, payPalRequest, false, payPalInternalClientCallback);\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         ArgumentCaptor<PayPalResponse> captor = ArgumentCaptor.forClass(PayPalResponse.class);\n         verify(payPalInternalClientCallback).onResult(captor.capture(), (Exception) isNull());\n@@ -492,6 +519,30 @@ public void sendRequest_setsApprovalUrlUserActionToEmptyStringOnDefault() throws\n         assertEquals(expectedUrl, payPalResponse.getApprovalUrl());\n     }\n \n+    @Test\n+    public void sendRequest_withPayPalVaultRequest_setsApprovalUrlUserActionToEmptyStringOnDefault() throws JSONException {\n+        BraintreeClient braintreeClient = new MockBraintreeClientBuilder()\n+                .configuration(Configuration.fromJson(Fixtures.CONFIGURATION_WITH_LIVE_PAYPAL))\n+                .authorization(clientToken)\n+                .sendPOSTSuccessfulResponse(Fixtures.PAYPAL_HERMES_BILLING_AGREEMENT_RESPONSE)\n+                .build();\n+\n+        PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n+\n+        PayPalVaultRequest payPalRequest = new PayPalVaultRequest();\n+\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n+\n+        ArgumentCaptor<PayPalResponse> captor = ArgumentCaptor.forClass(PayPalResponse.class);\n+        verify(payPalInternalClientCallback).onResult(captor.capture(), (Exception) isNull());\n+\n+        String expectedUrl =\n+                \"https://checkout.paypal.com/one-touch-login-sandbox/index.html?action=create_payment_resource\\u0026authorization_fingerprint=63cc461306c35080ce674a3372bffe1580b4130c7fd33d33968aa76bb93cdd06%7Ccreated_at%3D2015-10-13T18%3A49%3A48.371382792%2B0000%26merchant_id%3Ddcpspy2brwdjr3qn%26public_key%3D9wwrzqk3vr3t4nc8\\u0026cancel_url=com.braintreepayments.api.test.braintree%3A%2F%2Fonetouch%2Fv1%2Fcancel\\u0026controller=client_api%2Fpaypal_hermes\\u0026experience_profile%5Baddress_override%5D=false\\u0026experience_profile%5Bno_shipping%5D=false\\u0026merchant_id=dcpspy2brwdjr3qn\\u0026return_url=com.braintreepayments.api.test.braintree%3A%2F%2Fonetouch%2Fv1%2Fsuccess\\u0026ba_token=EC-HERMES-SANDBOX-EC-TOKEN\\u0026offer_paypal_credit=true\\u0026version=1\\u0026useraction=\";\n+\n+        PayPalResponse payPalResponse = captor.getValue();\n+        assertEquals(expectedUrl, payPalResponse.getApprovalUrl());\n+    }\n+\n     @Test\n     public void sendRequest_propagatesHttpErrors() throws JSONException {\n         Exception httpError = new Exception(\"http error\");\n@@ -503,8 +554,8 @@ public void sendRequest_propagatesHttpErrors() throws JSONException {\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest();\n-        sut.sendRequest(context, payPalRequest, false, payPalInternalClientCallback);\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         verify(payPalInternalClientCallback).onResult(null, httpError);\n     }\n@@ -519,8 +570,8 @@ public void sendRequest_propagatesMalformedJSONResponseErrors() throws JSONExcep\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest();\n-        sut.sendRequest(context, payPalRequest, false, payPalInternalClientCallback);\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         verify(payPalInternalClientCallback).onResult((PayPalResponse) isNull(), any(JSONException.class));\n     }\n@@ -535,8 +586,8 @@ public void sendRequest_propagatesGetConfigurationErrors() {\n \n         PayPalInternalClient sut = new PayPalInternalClient(braintreeClient, payPalDataCollector);\n \n-        PayPalRequest payPalRequest = new PayPalRequest();\n-        sut.sendRequest(context, payPalRequest, false, payPalInternalClientCallback);\n+        PayPalCheckoutRequest payPalRequest = new PayPalCheckoutRequest(\"1.00\");\n+        sut.sendRequest(context, payPalRequest, payPalInternalClientCallback);\n \n         verify(payPalInternalClientCallback).onResult(null, configurationError);\n     }"
  },
  {
    "sha": "2026b5980b226196ba5d16cf8786b42493f2db28",
    "filename": "PayPal/src/test/java/com/braintreepayments/api/PayPalVaultRequestUnitTest.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalVaultRequestUnitTest.java",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/PayPal/src/test/java/com/braintreepayments/api/PayPalVaultRequestUnitTest.java",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/PayPal/src/test/java/com/braintreepayments/api/PayPalVaultRequestUnitTest.java?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -0,0 +1,47 @@\n+package com.braintreepayments.api;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static junit.framework.Assert.assertNull;\n+import static junit.framework.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class PayPalVaultRequestUnitTest {\n+\n+    @Test\n+    public void newPayPalVaultRequest_setsDefaultValues() {\n+        PayPalVaultRequest request = new PayPalVaultRequest();\n+\n+        assertNull(request.getLocaleCode());\n+        assertFalse(request.isShippingAddressRequired());\n+        assertNull(request.getShippingAddressOverride());\n+        assertNull(request.getDisplayName());\n+        assertNull(request.getLandingPageType());\n+        assertFalse(request.shouldOfferCredit());\n+    }\n+\n+    @Test\n+    public void setsValuesCorrectly() {\n+        PostalAddress postalAddress = new PostalAddress();\n+        PayPalVaultRequest request = new PayPalVaultRequest();\n+        request.setLocaleCode(\"US\");\n+        request.setBillingAgreementDescription(\"Billing Agreement Description\");\n+        request.setShippingAddressRequired(true);\n+        request.setShippingAddressOverride(postalAddress);\n+        request.setDisplayName(\"Display Name\");\n+        request.setLandingPageType(PayPalRequest.LANDING_PAGE_TYPE_LOGIN);\n+        request.setOfferCredit(true);\n+\n+        assertEquals(\"US\", request.getLocaleCode());\n+        assertEquals(\"Billing Agreement Description\", request.getBillingAgreementDescription());\n+        assertTrue(request.isShippingAddressRequired());\n+        assertEquals(postalAddress, request.getShippingAddressOverride());\n+        assertEquals(\"Display Name\", request.getDisplayName());\n+        assertEquals(PayPalRequest.LANDING_PAGE_TYPE_LOGIN, request.getLandingPageType());\n+        assertTrue(request.shouldOfferCredit());\n+    }\n+}"
  },
  {
    "sha": "cf68b5efa76da5a9211aa3430b1eebdde46b59a7",
    "filename": "v4_MIGRATION_GUIDE.md",
    "status": "modified",
    "additions": 21,
    "deletions": 11,
    "changes": 32,
    "blob_url": "https://github.com/braintree/braintree_android/blob/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/v4_MIGRATION_GUIDE.md",
    "raw_url": "https://github.com/braintree/braintree_android/raw/a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0/v4_MIGRATION_GUIDE.md",
    "contents_url": "https://api.github.com/repos/braintree/braintree_android/contents/v4_MIGRATION_GUIDE.md?ref=a1b9f9222cbfa2ae94aa9c70ac74b6e2ce93c4d0",
    "patch": "@@ -410,25 +410,23 @@ public class PayPalActivity extends AppCompatActivity {\n     setIntent(newIntent);\n   }\n \n-  private void myRequestBillingAgreementMethod() {\n-    PayPalRequest request = new PayPalRequest()\n-        .localeCode(\"US\")\n-        .billingAgreementDescription(\"Your agreement description\");\n+  private void myTokenizePayPalAccountWithCheckoutMethod() {\n+    PayPalCheckoutRequest request = new PayPalCheckoutRequest(\"1.00\");\n+    request.setCurrencyCode(\"USD\");\n+    request.setIntent(PayPalCheckoutRequest.INTENT_AUTHORIZE);\n \n-    payPalClient.requestBillingAgreement(this, request, (error) -> {\n+    payPalClient.tokenizePayPalAccount(this, request, (error) -> {\n       if (error != null) {\n         // Handle error\n       }\n     });\n   }\n \n-  private void myRequestOneTimePaymentMethod() {\n-    PayPalRequest request = new PayPalRequest()\n-        .amount(\"1\")\n-        .currencyCode(\"USD\")\n-        .intent(PayPalRequest.INTENT_AUTHORIZE);\n+  private void myTokenizePayPalAccountWithVaultMethod() {\n+    PayPalVaultRequest request = new PayPalVaultRequest();\n+    request.setBillingAgreementDescription(\"Your agreement description\");\n \n-    payPalClient.requestOneTimePayment(this, request, (error) -> {\n+    payPalClient.tokenizePayPalAccount(this, request, (error) -> {\n       if (error != null) {\n         // Handle error\n       }\n@@ -437,6 +435,18 @@ public class PayPalActivity extends AppCompatActivity {\n }\n ```\n \n+#### PayPal Request\n+\n+v4 introduces two subclasses of `PayPalRequest`: \n+- `PayPalCheckoutRequest`, for checkout flows\n+- `PayPalVaultRequest`, for vault flows\n+\n+The setters on the request classes have been updated to remove method chaining.\n+\n+The `requestOneTimePayment` and `requestBillingAgreement` methods on `PayPalClient` have been updated to expect instances of `PayPalCheckoutRequest` and `PayPalVaultRequest`, respectively.\n+\n+However, `requestOneTimePayment` and `requestBillingAgreement` have been deprecated in favor of `tokenizePayPalAccount`.\n+\n ## Visa Checkout\n \n The Visa Checkout feature is now supported in a single dependency:"
  }
]
