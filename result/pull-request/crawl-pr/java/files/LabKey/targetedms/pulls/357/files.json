[
  {
    "sha": "650c9ae36081f25f47ffc092814b1bc0f9f6f216",
    "filename": "resources/queries/targetedms/qcMetricsConfig.sql",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/resources/queries/targetedms/qcMetricsConfig.sql",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/resources/queries/targetedms/qcMetricsConfig.sql",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/resources/queries/targetedms/qcMetricsConfig.sql?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -29,7 +29,10 @@ SELECT\n        qmc.EnabledSchemaName,\n        qem.Enabled,\n        CASE WHEN qem.metric IS NULL THEN FALSE\n-            ELSE TRUE END AS Inserted\n+            ELSE TRUE END AS Inserted,\n+       qmc.TraceValue,\n+       qmc.TimeValue,\n+       qmc.TraceName\n FROM\n       qcmetricconfiguration qmc\n FULL JOIN   qcenabledmetrics qem"
  },
  {
    "sha": "0bf92a9cf3b1e20f6a8153fb0773fb7ceb17929a",
    "filename": "resources/schemas/dbscripts/postgresql/targetedms-21.003-21.004.sql",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/resources/schemas/dbscripts/postgresql/targetedms-21.003-21.004.sql",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/resources/schemas/dbscripts/postgresql/targetedms-21.003-21.004.sql",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/resources/schemas/dbscripts/postgresql/targetedms-21.003-21.004.sql?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -0,0 +1,18 @@\n+ALTER TABLE targetedms.QCMetricConfiguration ADD COLUMN TraceValue REAL;\n+ALTER TABLE targetedms.QCMetricConfiguration ADD COLUMN TimeValue REAL;\n+ALTER TABLE targetedms.QCMetricConfiguration ADD COLUMN TraceName VARCHAR(200);\n+\n+CREATE TABLE targetedms.QCTraceMetricValues\n+(\n+    Id              SERIAL NOT NULL ,\n+    metric          INT,\n+    value           REAL,\n+    sampleFileId    BIGINT,\n+\n+    CONSTRAINT PK_QCTraceMetricValues PRIMARY KEY (Id),\n+    CONSTRAINT FK_QCTraceMetricValues_Metric FOREIGN KEY (metric) REFERENCES targetedms.QCMetricConfiguration(Id),\n+    CONSTRAINT FK_QCTraceMetricValues_SampleFile FOREIGN KEY (sampleFileId) REFERENCES targetedms.SampleFile(Id)\n+);\n+\n+CREATE INDEX IX_QCTraceMetricValues_SampleFile ON targetedms.QCTraceMetricValues(sampleFileId);\n+CREATE INDEX IX_QCTraceMetricValues_Metric ON targetedms.QCTraceMetricValues(metric);"
  },
  {
    "sha": "57f69bcfc24fd8cc2c399038544e534202349eab",
    "filename": "resources/schemas/dbscripts/sqlserver/targetedms-21.003-21.004.sql",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/resources/schemas/dbscripts/sqlserver/targetedms-21.003-21.004.sql",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/resources/schemas/dbscripts/sqlserver/targetedms-21.003-21.004.sql",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/resources/schemas/dbscripts/sqlserver/targetedms-21.003-21.004.sql?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -0,0 +1,20 @@\n+ALTER TABLE targetedms.QCMetricConfiguration ADD TraceValue REAL;\n+ALTER TABLE targetedms.QCMetricConfiguration ADD TimeValue REAL;\n+ALTER TABLE targetedms.QCMetricConfiguration ADD TraceName NVARCHAR(200);\n+GO\n+\n+CREATE TABLE targetedms.QCTraceMetricValues\n+(\n+    Id              INT IDENTITY(1, 1) NOT NULL ,\n+    metric          INT,\n+    value           REAL,\n+    sampleFileId    BIGINT,\n+\n+    CONSTRAINT PK_QCTraceMetricValues PRIMARY KEY (Id),\n+    CONSTRAINT FK_QCTraceMetricValues_Metric FOREIGN KEY (metric) REFERENCES targetedms.QCMetricConfiguration(Id),\n+    CONSTRAINT FK_QCTraceMetricValues_SampleFile FOREIGN KEY (sampleFileId) REFERENCES targetedms.SampleFile(Id)\n+);\n+\n+CREATE INDEX IX_QCTraceMetricValues_SampleFile ON targetedms.QCTraceMetricValues(sampleFileId);\n+CREATE INDEX IX_QCTraceMetricValues_Metric ON targetedms.QCTraceMetricValues(metric);\n+GO\n\\ No newline at end of file"
  },
  {
    "sha": "a3c79c036cdf9093817d895a414838fbf00b8500",
    "filename": "resources/schemas/targetedms.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/resources/schemas/targetedms.xml",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/resources/schemas/targetedms.xml",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/resources/schemas/targetedms.xml?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -1313,6 +1313,9 @@\n             <column columnName=\"PrecursorScoped\"/>\n             <column columnName=\"EnabledQueryName\"/>\n             <column columnName=\"EnabledSchemaName\"/>\n+            <column columnName=\"TraceValue\"/>\n+            <column columnName=\"TimeValue\"/>\n+            <column columnName=\"TraceName\"/>\n         </columns>\n     </table>\n     <table tableName=\"QCMetricExclusion\" tableDbType=\"TABLE\">\n@@ -1676,4 +1679,12 @@\n             <column columnName=\"label\"/>\n         </columns>\n     </table>\n+    <table tableName=\"QCTraceMetricValues\" tableDbType=\"TABLE\">\n+        <columns>\n+            <column columnName=\"Id\"/>\n+            <column columnName=\"metric\"/>\n+            <column columnName=\"value\"/>\n+            <column columnName=\"sampleFileId\"/>\n+        </columns>\n+    </table>\n </tables>"
  },
  {
    "sha": "822aaab591c863f3ab43b26920b61e66f6da10ae",
    "filename": "src/org/labkey/targetedms/SkylineDocImporter.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/SkylineDocImporter.java",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/SkylineDocImporter.java",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/src/org/labkey/targetedms/SkylineDocImporter.java?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -58,6 +58,7 @@\n import org.labkey.targetedms.SkylinePort.Irt.RetentionTimeProviderImpl;\n import org.labkey.targetedms.calculations.RunQuantifier;\n import org.labkey.targetedms.calculations.quantification.RegressionFit;\n+import org.labkey.targetedms.model.QCMetricConfiguration;\n import org.labkey.targetedms.parser.*;\n import org.labkey.targetedms.parser.list.ListData;\n import org.labkey.targetedms.parser.skyaudit.AuditLogException;\n@@ -96,6 +97,7 @@\n import java.util.Set;\n import java.util.TreeSet;\n import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n \n import static org.labkey.targetedms.TargetedMSManager.getTableInfoPrecursorChromInfo;\n import static org.labkey.targetedms.TargetedMSManager.getTableInfoTransitionChromInfo;\n@@ -333,6 +335,9 @@ private void importSkylineDoc(TargetedMSRun run, File f) throws XMLStreamExcepti\n             // Data settings -- these are the annotation settings\n             List<GroupComparisonSettings> groupComparisons = insertDataSettings(parser);\n \n+            // calculate and insert values for trace metrics\n+            insertTraceCalculations(run);\n+\n             // Store the data\n             // 1. peptide group\n             if(_isProteinLibraryDoc)\n@@ -2872,4 +2877,15 @@ public void complete(String message)\n \n         int getProgressPercent();\n     }\n+\n+    public void insertTraceCalculations(TargetedMSRun run)\n+    {\n+        List<QCMetricConfiguration> qcMetricConfigurations = TargetedMSManager.getTraceMetricConfigurations(_container, _user);\n+\n+        if (!qcMetricConfigurations.isEmpty())\n+        {\n+            var qcTraceMetricValues = TargetedMSManager.calculateTraceMetricValues(qcMetricConfigurations, run);\n+            qcTraceMetricValues.forEach(qcTraceMetricValue -> Table.insert(_user, TargetedMSManager.getTableQCTraceMetricValues(), qcTraceMetricValue));\n+        }\n+    }\n }"
  },
  {
    "sha": "7fe0f2c09eeb647af1ba14727985bbdbfef2b659",
    "filename": "src/org/labkey/targetedms/TargetedMSManager.java",
    "status": "modified",
    "additions": 92,
    "deletions": 1,
    "changes": 93,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/TargetedMSManager.java",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/TargetedMSManager.java",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/src/org/labkey/targetedms/TargetedMSManager.java?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -81,8 +81,10 @@\n import org.labkey.targetedms.model.GuideSetKey;\n import org.labkey.targetedms.model.GuideSetStats;\n import org.labkey.targetedms.model.QCMetricConfiguration;\n+import org.labkey.targetedms.model.QCTraceMetricValues;\n import org.labkey.targetedms.model.RawMetricDataSet;\n import org.labkey.targetedms.outliers.OutlierGenerator;\n+import org.labkey.targetedms.parser.Chromatogram;\n import org.labkey.targetedms.parser.GeneralMolecule;\n import org.labkey.targetedms.parser.Replicate;\n import org.labkey.targetedms.parser.RepresentativeDataState;\n@@ -506,6 +508,11 @@ public static TableInfo getTableInfoQCEnabledMetrics()\n         return getSchema().getTable(TargetedMSSchema.TABLE_QC_ENABLED_METRICS);\n     }\n \n+    public static TableInfo getTableQCTraceMetricValues()\n+    {\n+        return getSchema().getTable(TargetedMSSchema.TABLE_QC_TRACE_METRIC_VALUES);\n+    }\n+\n     public static TableInfo getTableInfoSkylineAuditLogEntry()\n     {\n         return getSchema().getTable(TargetedMSSchema.TABLE_SKYLINE_AUDITLOG_ENTRY);\n@@ -1451,6 +1458,9 @@ public static void purgeDeletedSampleFiles(long sampleFileId)\n         // Delete from PeptideChromInfo\n         execute(\"DELETE FROM \" + getTableInfoGeneralMoleculeChromInfo() + \" WHERE SampleFileId = ?\", sampleFileId);\n \n+        // Delete from QCTraceMetricValues\n+        execute(\"DELETE FROM \" + getTableQCTraceMetricValues() + \" WHERE SampleFileId = ?\", sampleFileId);\n+\n         // Delete from SampleFileChromInfo\n         execute(\"DELETE FROM \" + getTableInfoSampleFileChromInfo() + \" WHERE SampleFileId = ?\", sampleFileId);\n     }\n@@ -1540,6 +1550,9 @@ private static void purgeDeletedRuns()\n         // Delete from PeptideGroupAnnotation\n         deletePeptideGroupDependent(getTableInfoPeptideGroupAnnotation());\n \n+        // Delete from QCTraceMetricValues\n+        deleteSampleFileDependent(getTableQCTraceMetricValues());\n+\n         // Delete from SampleFileChromInfo\n         deleteSampleFileDependent(getTableInfoSampleFileChromInfo());\n \n@@ -2100,7 +2113,7 @@ private static Double getValue(Object o)\n         return Math.log(value.doubleValue()) / Math.log(2);\n     }\n \n-    public List<QCMetricConfiguration> getEnabledQCMetricConfigurations(Container container, User user)\n+    public static List<QCMetricConfiguration> getEnabledQCMetricConfigurations(Container container, User user)\n     {\n         QuerySchema targetedMSSchema = DefaultSchema.get(user, container).getSchema(TargetedMSSchema.SCHEMA_NAME);\n         if (targetedMSSchema == null)\n@@ -2480,4 +2493,82 @@ public static void updateModifiedAreaProportions(Logger log, @NotNull TargetedMS\n \n         return new SqlSelector(getSchema(), sql).getArrayList(Long.class);\n     }\n+\n+    private static List<SampleFileChromInfo> getSampleFileChromInfosByName(String traceName, long runId)\n+    {\n+        var sql = new SQLFragment(\" SELECT sfi.Id, sfi.SampleFileId, sfi.StartTime, sfi.EndTime, sfi.NumPoints,\" +\n+                \" sfi.UncompressedSize, sfi.ChromatogramFormat, sfi.ChromatogramOffset, sfi.ChromatogramLength, sfi.TextId\" +\n+                \" FROM \" + getTableInfoSampleFileChromInfo() + \" sfi\" +\n+                \" INNER JOIN \" + getTableInfoSampleFile() + \" sf ON sf.Id = sfi.SampleFileId\" +\n+                \" INNER JOIN \" + getTableInfoReplicate() + \" r ON r.Id = sf.ReplicateId\" +\n+                \" INNER JOIN \" + getTableInfoRuns() + \" rn ON rn.Id = r.RunId\" +\n+                \" WHERE TextId = ?\" +\n+                \" AND rn.ID = ? \").add(traceName).add(runId);\n+        return new SqlSelector(getSchema(), sql).getArrayList(SampleFileChromInfo.class);\n+    }\n+\n+    public static List<QCTraceMetricValues> calculateTraceMetricValues(List<QCMetricConfiguration> qcMetricConfigurations, TargetedMSRun run)\n+    {\n+        List<QCTraceMetricValues> qcTraceMetricValuesList = new ArrayList<>();\n+        if (!qcMetricConfigurations.isEmpty())\n+        {\n+            for (QCMetricConfiguration qcMetricConfiguration : qcMetricConfigurations)\n+            {\n+                List<SampleFileChromInfo> sampleFileChromInfos = getSampleFileChromInfosByName(qcMetricConfiguration.getTraceName(), run.getRunId());\n+                Map<SampleFileChromInfo, Float> valuesToStore = new HashMap<>();\n+\n+                for (SampleFileChromInfo sampleFileChromInfo : sampleFileChromInfos)\n+                {\n+                    Chromatogram chromatogram = sampleFileChromInfo.createChromatogram(run);\n+                    if (null != chromatogram)\n+                    {\n+                        float[] times = chromatogram.getTimes();\n+                        float[] values = chromatogram.getIntensities(0);\n+\n+                        if (times.length != values.length)\n+                        {\n+                            throw new IllegalStateException(\"Incorrect values in skyd file for time and intensities for trace - \" + sampleFileChromInfo.getTextId());\n+                        }\n+\n+                        for (int i = 0; i < times.length; i++)\n+                        {\n+                            Double timeValue = qcMetricConfiguration.getTimeValue();\n+                            Double traceValue = qcMetricConfiguration.getTraceValue();\n+\n+                            if (timeValue != null && times[i] >= timeValue)\n+                            {\n+                                valuesToStore.put(sampleFileChromInfo, values[i]);\n+                                break;\n+                            }\n+                            else if (traceValue != null && values[i] >= traceValue)\n+                            {\n+                                valuesToStore.put(sampleFileChromInfo, times[i]);\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                if (!valuesToStore.isEmpty())\n+                {\n+                    valuesToStore.forEach((key,val) -> {\n+                        QCTraceMetricValues qcTraceMetricValues = new QCTraceMetricValues();\n+                        qcTraceMetricValues.setMetric(qcMetricConfiguration.getId());\n+                        qcTraceMetricValues.setSampleFileId(key.getSampleFileId());\n+                        qcTraceMetricValues.setValue(val);\n+                        qcTraceMetricValuesList.add(qcTraceMetricValues);\n+                    });\n+                }\n+            }\n+        }\n+        return qcTraceMetricValuesList;\n+    }\n+\n+    public static List<QCMetricConfiguration> getTraceMetricConfigurations(Container container, User user)\n+    {\n+        return getEnabledQCMetricConfigurations(container, user)\n+                .stream()\n+                .filter(qcMetricConfiguration -> qcMetricConfiguration.getTraceName() != null)\n+                .collect(Collectors.toList());\n+    }\n }"
  },
  {
    "sha": "d677e63f8dd2c3f4295e1a59b74e6535cdbe34e6",
    "filename": "src/org/labkey/targetedms/TargetedMSModule.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/TargetedMSModule.java",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/TargetedMSModule.java",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/src/org/labkey/targetedms/TargetedMSModule.java?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -214,7 +214,7 @@ public String getName()\n     @Override\n     public Double getSchemaVersion()\n     {\n-        return 21.003;\n+        return 21.004;\n     }\n \n     @Override"
  },
  {
    "sha": "7e591075997d7570fa2ba27617aba7278f66dfde",
    "filename": "src/org/labkey/targetedms/TargetedMSSchema.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/TargetedMSSchema.java",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/TargetedMSSchema.java",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/src/org/labkey/targetedms/TargetedMSSchema.java?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -180,6 +180,7 @@\n     public static final String TABLE_QC_METRIC_CONFIGURATION = \"QCMetricConfiguration\";\n     public static final String TABLE_QC_METRIC_EXCLUSION = \"QCMetricExclusion\";\n     public static final String TABLE_QC_ENABLED_METRICS = \"QCEnabledMetrics\";\n+    public static final String TABLE_QC_TRACE_METRIC_VALUES = \"QCTraceMetricValues\";\n \n     public static final String TABLE_GUIDE_SET = \"GuideSet\";\n \n@@ -910,10 +911,14 @@ public TableInfo createTable(String name, ContainerFilter cf)\n         {\n             return new QCMetricConfigurationTable(this, cf);\n         }\n-        if(TABLE_QC_ENABLED_METRICS.equalsIgnoreCase(name))\n+        if (TABLE_QC_ENABLED_METRICS.equalsIgnoreCase(name))\n         {\n             return new QCEnabledMetricsTable(this, cf);\n         }\n+        if (TABLE_QC_TRACE_METRIC_VALUES.equalsIgnoreCase(name))\n+        {\n+            return new QCTraceMetricValuesTable(this, cf);\n+        }\n         if (TABLE_GUIDE_SET.equalsIgnoreCase(name))\n         {\n             return new GuideSetTable(this, cf);\n@@ -1508,6 +1513,7 @@ public void renderGridCellContents(RenderContext ctx, Writer out) throws IOExcep\n         hs.add(TABLE_QC_METRIC_CONFIGURATION);\n         hs.add(TABLE_QC_METRIC_EXCLUSION);\n         hs.add(TABLE_QC_ENABLED_METRICS);\n+        hs.add(TABLE_QC_TRACE_METRIC_VALUES);\n         hs.add(TABLE_SKYLINE_AUDITLOG_ENTRY);\n         hs.add(TABLE_SKYLINE_AUDITLOG_MESSAGE);\n         hs.add(TABLE_LIST_DEFINITION);"
  },
  {
    "sha": "89322e5e56603a586a97afacb0aeea39a457e661",
    "filename": "src/org/labkey/targetedms/model/QCMetricConfiguration.java",
    "status": "modified",
    "additions": 48,
    "deletions": 5,
    "changes": 53,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/model/QCMetricConfiguration.java",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/model/QCMetricConfiguration.java",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/src/org/labkey/targetedms/model/QCMetricConfiguration.java?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -31,6 +31,9 @@\n     private String _enabledQueryName;\n     private String _enabledSchemaName;\n     private Boolean _enabled;\n+    private String _traceName;\n+    private Double _timeValue;\n+    private Double _traceValue;\n \n     public int getId()\n     {\n@@ -151,6 +154,36 @@ public void setEnabledSchemaName(String enabledSchemaName)\n         _enabledSchemaName = enabledSchemaName;\n     }\n \n+    public String getTraceName()\n+    {\n+        return _traceName;\n+    }\n+\n+    public void setTraceName(String traceName)\n+    {\n+        _traceName = traceName;\n+    }\n+\n+    public Double getTimeValue()\n+    {\n+        return _timeValue;\n+    }\n+\n+    public void setTimeValue(Double timeValue)\n+    {\n+        _timeValue = timeValue;\n+    }\n+\n+    public Double getTraceValue()\n+    {\n+        return _traceValue;\n+    }\n+\n+    public void setTraceValue(Double traceValue)\n+    {\n+        _traceValue = traceValue;\n+    }\n+\n     public JSONObject toJSON(){\n         JSONObject jsonObject = new JSONObject();\n         jsonObject.put(\"id\", _id);\n@@ -159,21 +192,31 @@ public JSONObject toJSON(){\n         jsonObject.put(\"series1SchemaName\", _series1SchemaName);\n         jsonObject.put(\"series1QueryName\",  _series1QueryName);\n         jsonObject.put(\"precursorScoped\",  _precursorScoped);\n-        if(_series2Label != null){\n+        if (_series2Label != null) {\n             jsonObject.put(\"series2Label\",      _series2Label);\n         }\n-        if(_series2SchemaName != null){\n+        if (_series2SchemaName != null) {\n             jsonObject.put(\"series2SchemaName\", _series2SchemaName);\n         }\n-        if(_series2QueryName != null){\n+        if (_series2QueryName != null) {\n             jsonObject.put(\"series2QueryName\",  _series2QueryName);\n         }\n-        if(_enabledQueryName != null){\n+        if (_enabledQueryName != null) {\n             jsonObject.put(\"enabledQueryName\", _enabledQueryName);\n         }\n-        if(_enabledQueryName != null){\n+        if (_enabledQueryName != null) {\n             jsonObject.put(\"enabledSchemaName\", _enabledSchemaName);\n         }\n+        if (_traceName != null) {\n+            jsonObject.put(\"traceName\", _traceName);\n+        }\n+        if (_traceValue != null) {\n+            jsonObject.put(\"traceValue\", _traceValue);\n+        }\n+        if (_timeValue != null) {\n+            jsonObject.put(\"timeValue\", _timeValue);\n+        }\n+\n         return jsonObject;\n     }\n }"
  },
  {
    "sha": "df8a6760b892471c979e6b86d6a6310a0f5d0985",
    "filename": "src/org/labkey/targetedms/model/QCTraceMetricValues.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/model/QCTraceMetricValues.java",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/model/QCTraceMetricValues.java",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/src/org/labkey/targetedms/model/QCTraceMetricValues.java?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -0,0 +1,49 @@\n+package org.labkey.targetedms.model;\n+\n+public class QCTraceMetricValues\n+{\n+    private int _id;\n+    private int _metric;\n+    private float _value;\n+    private long _sampleFileId;\n+\n+    public int getId()\n+    {\n+        return _id;\n+    }\n+\n+    public void setId(int id)\n+    {\n+        _id = id;\n+    }\n+\n+    public int getMetric()\n+    {\n+        return _metric;\n+    }\n+\n+    public void setMetric(int metric)\n+    {\n+        _metric = metric;\n+    }\n+\n+    public float getValue()\n+    {\n+        return _value;\n+    }\n+\n+    public void setValue(float value)\n+    {\n+        _value = value;\n+    }\n+\n+    public long getSampleFileId()\n+    {\n+        return _sampleFileId;\n+    }\n+\n+    public void setSampleFileId(long sampleFileId)\n+    {\n+        _sampleFileId = sampleFileId;\n+    }\n+}"
  },
  {
    "sha": "5c78fc06f7f077bc5b97fb34eb50769d97efdb61",
    "filename": "src/org/labkey/targetedms/query/QCMetricConfigurationTable.java",
    "status": "modified",
    "additions": 79,
    "deletions": 1,
    "changes": 80,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/query/QCMetricConfigurationTable.java",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/query/QCMetricConfigurationTable.java",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/src/org/labkey/targetedms/query/QCMetricConfigurationTable.java?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -16,21 +16,37 @@\n package org.labkey.targetedms.query;\n \n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n import org.labkey.api.data.Container;\n import org.labkey.api.data.ContainerFilter;\n import org.labkey.api.data.ContainerManager;\n+import org.labkey.api.data.SQLFragment;\n+import org.labkey.api.data.SqlExecutor;\n+import org.labkey.api.data.Table;\n+import org.labkey.api.data.TableInfo;\n+import org.labkey.api.query.BatchValidationException;\n import org.labkey.api.query.DefaultQueryUpdateService;\n+import org.labkey.api.query.DuplicateKeyException;\n import org.labkey.api.query.FilteredTable;\n+import org.labkey.api.query.InvalidKeyException;\n import org.labkey.api.query.QueryUpdateService;\n+import org.labkey.api.query.QueryUpdateServiceException;\n+import org.labkey.api.query.ValidationException;\n+import org.labkey.api.security.User;\n import org.labkey.api.security.UserPrincipal;\n import org.labkey.api.security.permissions.AdminPermission;\n import org.labkey.api.security.permissions.Permission;\n import org.labkey.api.security.permissions.ReadPermission;\n import org.labkey.targetedms.TargetedMSManager;\n+import org.labkey.targetedms.TargetedMSRun;\n import org.labkey.targetedms.TargetedMSSchema;\n+import org.labkey.targetedms.model.QCMetricConfiguration;\n \n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n public class QCMetricConfigurationTable extends FilteredTable<TargetedMSSchema>\n {\n@@ -64,7 +80,7 @@ public boolean hasPermission(@NotNull UserPrincipal user, @NotNull Class<? exten\n     @Override\n     public QueryUpdateService getUpdateService()\n     {\n-        return new DefaultQueryUpdateService(this, getRealTable());\n+        return new QCMetricConfigurationTableUpdateService(this, getRealTable());\n     }\n \n     public static ContainerFilter getDefaultMetricContainerFilter(Container currentContainer)\n@@ -75,4 +91,66 @@ public static ContainerFilter getDefaultMetricContainerFilter(Container currentC\n         containers.add(currentContainer);\n         return new ContainerFilter.SimpleContainerFilter(containers);\n     }\n+\n+    public static class QCMetricConfigurationTableUpdateService extends DefaultQueryUpdateService\n+    {\n+        protected QCMetricConfigurationTableUpdateService(TableInfo queryTable, TableInfo realTable)\n+        {\n+            super(queryTable, realTable);\n+        }\n+\n+        @Override\n+        protected Map<String, Object> insertRow(User user, Container container, Map<String, Object> row) throws DuplicateKeyException, ValidationException, QueryUpdateServiceException, SQLException\n+        {\n+            var insertedRow = super.insertRow(user, container, row);\n+            calculateAndInsertTraceValuesForMetric((int) insertedRow.get(\"Id\"), container, user);\n+            return insertedRow;\n+        }\n+\n+        @Override\n+        protected Map<String, Object> updateRow(User user, Container container, Map<String, Object> row, @NotNull Map<String, Object> oldRow) throws InvalidKeyException, ValidationException, QueryUpdateServiceException, SQLException\n+        {\n+            var updatedRow = super.updateRow(user, container, row, oldRow);\n+            var metricId = (int) updatedRow.get(\"Id\");\n+            deleteTraceValueForMetric(metricId, container);\n+            calculateAndInsertTraceValuesForMetric(metricId, container, user);\n+            return updatedRow;\n+        }\n+\n+        @Override\n+        protected Map<String, Object> deleteRow(User user, Container container, Map<String, Object> oldRow) throws InvalidKeyException, QueryUpdateServiceException, SQLException\n+        {\n+            deleteTraceValueForMetric((Integer) oldRow.get(\"id\"), container);\n+            return super.deleteRow(user, container, oldRow);\n+        }\n+\n+        private void deleteTraceValueForMetric(int metricId, Container container)\n+        {\n+            var sql = new SQLFragment(\" DELETE FROM \" + TargetedMSManager.getTableQCTraceMetricValues() + \" WHERE metric IN (\"+\n+                    \" SELECT qc.Id FROM \" + TargetedMSManager.getTableInfoQCMetricConfiguration() + \" qc\" +\n+                    \" INNER JOIN \" + TargetedMSManager.getTableInfoSampleFileChromInfo() + \" sfi ON sfi.TextId = qc.TraceName\" +\n+                    \" INNER JOIN \" + TargetedMSManager.getTableInfoSampleFile() + \" sf ON sf.id = sfi.SampleFileId\" +\n+                    \" INNER JOIN \" + TargetedMSManager.getTableInfoReplicate() + \" rep ON rep.Id = sf.ReplicateId\" +\n+                    \" INNER JOIN \" + TargetedMSManager.getTableInfoRuns() + \" r ON rep.RunId = r.Id\" +\n+                    \" WHERE qc.Id = ? AND r.container = ? ) \").add(metricId).add(container.getId());\n+            new SqlExecutor(TargetedMSManager.getSchema()).execute(sql);\n+        }\n+\n+        private void calculateAndInsertTraceValuesForMetric(int metricId, Container container, User user)\n+        {\n+            var qcMetricConfigurations = TargetedMSManager\n+                    .getEnabledQCMetricConfigurations(container, user)\n+                    .stream()\n+                    .filter(qcMetricConfiguration -> qcMetricConfiguration.getId() == metricId)\n+                    .collect(Collectors.toList());\n+            var runsInContainer = TargetedMSManager.getRunsInContainer(container);\n+\n+            for (TargetedMSRun run : runsInContainer)\n+            {\n+                var qcTraceMetricValues = TargetedMSManager.calculateTraceMetricValues(qcMetricConfigurations, run);\n+                qcTraceMetricValues.forEach(qcTraceMetricValue -> Table.insert(user, TargetedMSManager.getTableQCTraceMetricValues(), qcTraceMetricValue));\n+            }\n+        }\n+\n+    }\n }"
  },
  {
    "sha": "b14f06263a7606d149cc3f0216f1f46011ce66ba",
    "filename": "src/org/labkey/targetedms/query/QCTraceMetricValuesTable.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/LabKey/targetedms/blob/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/query/QCTraceMetricValuesTable.java",
    "raw_url": "https://github.com/LabKey/targetedms/raw/c02820be34440ee004ddf7987812f4af3ff52559/src/org/labkey/targetedms/query/QCTraceMetricValuesTable.java",
    "contents_url": "https://api.github.com/repos/LabKey/targetedms/contents/src/org/labkey/targetedms/query/QCTraceMetricValuesTable.java?ref=c02820be34440ee004ddf7987812f4af3ff52559",
    "patch": "@@ -0,0 +1,14 @@\n+package org.labkey.targetedms.query;\n+\n+import org.labkey.api.data.ContainerFilter;\n+import org.labkey.targetedms.TargetedMSSchema;\n+\n+public class QCTraceMetricValuesTable extends TargetedMSTable\n+{\n+    public QCTraceMetricValuesTable(TargetedMSSchema schema, ContainerFilter cf)\n+    {\n+        super(TargetedMSSchema.getSchema().getTable(TargetedMSSchema.TABLE_QC_TRACE_METRIC_VALUES), schema, cf, TargetedMSSchema.ContainerJoinType.SampleFileFK);\n+        TargetedMSTable.fixupLookups(this);\n+        wrapAllColumns(true);\n+    }\n+}"
  }
]
