[
  {
    "sha": "509f61a770bbe54a16c5e0f48456a0f5f946677c",
    "filename": "dev/com.ibm.ws.logging.osgi/bnd.bnd",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/bnd.bnd",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/bnd.bnd",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/bnd.bnd?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -36,7 +36,12 @@ Export-Package: \\\n Service-Component= \\\n   com.ibm.ws.logging.internal.ffdcjanitor; \\\n     scheduler=java.util.concurrent.ScheduledExecutorService; \\\n-    implementation:=com.ibm.ws.logging.internal.osgi.FFDCJanitor\n+    implementation:=com.ibm.ws.logging.internal.osgi.FFDCJanitor, \\\n+  com.ibm.ws.logging.internal.osgi.stackjoiner.ThrowableProxyComponent; \\\n+    implementation:=\"com.ibm.ws.logging.internal.osgi.stackjoiner.ThrowableProxyComponent\"; \\\n+    instrumentation=java.lang.instrument.Instrumentation; \\\n+    properties:=\"service.vendor=IBM\"; \\\n+    version:=1.1 \\\n    \n IBM-Default-Config: OSGI-INF/wlp/defaultInstances.xml\n \n@@ -46,10 +51,12 @@ instrument.disabled: true\n \torg.eclipse.osgi;version=latest,\\\n \tcom.ibm.websphere.org.osgi.core;version=latest,\\\n \tcom.ibm.websphere.org.osgi.service.cm;version=latest,\\\n+\tcom.ibm.websphere.org.osgi.service.component,\\\n \tcom.ibm.wsspi.org.osgi.service.event;version=latest,\\\n \tcom.ibm.wsspi.org.osgi.service.log;version=latest,\\\n \tcom.ibm.ws.logging;version=latest,\\\n \tcom.ibm.ws.ras.instrument;version=latest, \\\n+\tcom.ibm.ws.org.objectweb.asm;version=latest,\\\n \tcom.ibm.ws.org.osgi.annotation.versioning;version=latest\n \n -testpath: \\"
  },
  {
    "sha": "bc15f149c2e3055a844e8fbe1cc7c4fbbdc6ae6e",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ReflectionHelper.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ReflectionHelper.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ReflectionHelper.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ReflectionHelper.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.logging.internal.osgi.stackjoiner;\n+\n+import java.lang.reflect.AccessibleObject;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+/**\n+ * Helper class that performs necessary doPriv during reflection.\n+ * \n+ * This class is borrowed from com.ibm.ws.monitor/src/com/ibm/ws/monitor/internal/ReflectionHelper.java.\n+ */\n+class ReflectionHelper {\n+\n+    private final static boolean securityEnabled = System.getSecurityManager() != null;\n+\n+    private ReflectionHelper() {}\n+\n+    static Field getDeclaredField(final Class<?> clazz, final String fieldName) {\n+        if (clazz != null) {\n+            return securityEnabled ? doPrivGetDeclaredField(clazz, fieldName) : doGetDeclaredField(clazz, fieldName);\n+        }\n+        return null;\n+    }\n+\n+    private static Field doGetDeclaredField(final Class<?> clazz, final String fieldName) {\n+        Field field = null;\n+        try {\n+            field = clazz.getDeclaredField(fieldName);\n+        } catch (NoSuchFieldException nsfe) {\n+        }\n+        return field;\n+    }\n+\n+    private static Field doPrivGetDeclaredField(final Class<?> clazz, final String fieldName) {\n+        return AccessController.doPrivileged(new PrivilegedAction<Field>() {\n+            public Field run() {\n+                return doGetDeclaredField(clazz, fieldName);\n+            }\n+        });\n+    }\n+\n+    static Method getDeclaredMethod(final Class<?> clazz, final String methodName, final Class<?>... parameterTypes) {\n+        if (clazz != null) {\n+            return securityEnabled ?\n+                            doPrivGetDeclaredMethod(clazz, methodName, parameterTypes) :\n+                            doGetDeclaredMethod(clazz, methodName, parameterTypes);\n+        }\n+        return null;\n+    }\n+\n+    private static Method doGetDeclaredMethod(final Class<?> clazz, final String methodName, final Class<?>... parameterTypes) {\n+        Method method = null;\n+        try {\n+            method = clazz.getDeclaredMethod(methodName, parameterTypes);\n+        } catch (NoSuchMethodException e) {\n+        }\n+        return method;\n+    }\n+\n+    private static Method doPrivGetDeclaredMethod(final Class<?> clazz, final String methodName, final Class<?>... parameterTypes) {\n+        return AccessController.doPrivileged(new PrivilegedAction<Method>() {\n+            public Method run() {\n+                return doGetDeclaredMethod(clazz, methodName, parameterTypes);\n+            }\n+        });\n+    }\n+\n+    static void setAccessible(final AccessibleObject accessibleObject, final boolean visible) {\n+        if (securityEnabled) {\n+            doPrivSetAccessible(accessibleObject, visible);\n+        } else {\n+            doSetAccessible(accessibleObject, visible);\n+        }\n+    }\n+\n+    private static void doSetAccessible(final AccessibleObject accessibleObject, final boolean visible) {\n+        accessibleObject.setAccessible(visible);\n+    }\n+\n+    private static void doPrivSetAccessible(final AccessibleObject accessibleObject, final boolean visible) {\n+        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+            public Object run() {\n+                doSetAccessible(accessibleObject, visible);\n+                return null;\n+            }\n+        });\n+    }\n+}"
  },
  {
    "sha": "e623aeb2e97b71675d71871a36e171c2b0d1fd03",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableInfo.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableInfo.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableInfo.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableInfo.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.internal.osgi.stackjoiner;\n+\n+import java.io.PrintStream;\n+import java.lang.instrument.Instrumentation;\n+import java.lang.reflect.Method;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+\n+/**\n+ * Retrieves the printStackTraceOverride method from BaseTraceService via reflection.\n+ */\n+public class ThrowableInfo {\n+\t\n+\t private static final TraceComponent tc = Tr.register(ThrowableInfo.class);\n+\n+    final String BASE_TRACE_SERVICE_CLASS_NAME = \"com.ibm.ws.logging.internal.impl.BaseTraceService\";\n+    final String BASE_TRACE_SERVICE_METHOD_NAME = \"printStackTraceOverride\";\n+\n+    private Method btsMethod;\n+\n+    \n+    public ThrowableInfo(Instrumentation inst) {\n+    \tif (System.getenv(\"WLP_LOGGING_STACK_JOIN\") != null && System.getenv(\"WLP_LOGGING_STACK_JOIN\").equals(\"true\")) {\n+\t    \tClass<?> btsClass = retrieveClass(inst, BASE_TRACE_SERVICE_CLASS_NAME);\n+\t        if (btsClass != null) {\n+\t\t\t\tMethod method = ReflectionHelper.getDeclaredMethod(btsClass, BASE_TRACE_SERVICE_METHOD_NAME, Throwable.class, PrintStream.class);\n+\t\t\t\tsetBtsMethod(method);\n+\t        }\n+    \t}\n+    }\n+    public boolean isInitialized() {\n+    \tif (System.getenv(\"WLP_LOGGING_STACK_JOIN\").equals(\"true\")) {\n+\t    \tif (getBtsMethod() == null) {\n+\t    \t\tif (tc.isDebugEnabled())\n+\t    \t\t\tTr.debug(tc, \"Stack joiner could not be initialized. Failed to reflect method \" + BASE_TRACE_SERVICE_METHOD_NAME + \" in \" + BASE_TRACE_SERVICE_CLASS_NAME + \".\");\n+\t        \treturn false;\n+\t        }\n+\t    \treturn true;\n+    \t}\n+    \treturn false;\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+\tprivate Class<?> retrieveClass(Instrumentation inst, String classGroup) {\n+        if (inst != null) {\n+            Class[] loadedClasses = inst.getAllLoadedClasses();\n+            for (int i = 0; i < loadedClasses.length; i++) {\n+                String name = loadedClasses[i].getName();\n+                if (name.equals(classGroup)) {\n+                    return loadedClasses[i];\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void setBtsMethod(Method method) {\n+        btsMethod = method;\n+    }\n+\n+    public Method getBtsMethod() {\n+        return btsMethod;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6806c793d531464a476a386b3b56ca64aaf0e7f1",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableProxyActivator.java",
    "status": "added",
    "additions": 396,
    "deletions": 0,
    "changes": 396,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableProxyActivator.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableProxyActivator.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableProxyActivator.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,396 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.internal.osgi.stackjoiner;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.lang.instrument.Instrumentation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.text.DateFormat;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+\n+import com.ibm.ws.logging.internal.osgi.stackjoiner.bci.AddVersionFieldClassAdapter;\n+import com.ibm.ws.logging.internal.osgi.stackjoiner.bci.ThrowableClassFileTransformer;\n+import com.ibm.ws.logging.internal.osgi.stackjoiner.boot.templates.ThrowableProxy;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.commons.ClassRemapper;\n+import org.objectweb.asm.commons.SimpleRemapper;\n+\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Bundle;\n+\n+public class ThrowableProxyActivator {\n+\t\n+\tprivate ThrowableInfo throwableInfo;\n+\tprivate Instrumentation inst;\n+\tprivate BundleContext bundleContext;\n+\t\n+\t/**\n+     * The target package for the boot loader delegated classes.\n+     */\n+    public final static String BOOT_DELEGATED_PACKAGE = \"com.ibm.ws.boot.delegated.logging\";\n+    \n+    /**\n+     * The bundle entry path prefix to the template classes.\n+     */\n+    final static String TEMPLATE_CLASSES_PATH = ThrowableProxy.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\");\n+    \n+    /**\n+     * The name of the {@link ThrowableProxy} class that needs to be\n+     * made available on the bootstrap class loader.\n+     */\n+    public final static String THROWABLE_PROXY_CLASS_NAME = BOOT_DELEGATED_PACKAGE + \".\" + ThrowableProxy.class.getSimpleName();\n+\n+    /**\n+     * The internal name of the {@link ThrowableProxy} class.\n+     */\n+    public final static String THROWABLE_PROXY_CLASS_INTERNAL_NAME = THROWABLE_PROXY_CLASS_NAME.replaceAll(\"\\\\.\", \"/\");\n+    \n+    /**\n+     * The name of the field in generated classes that will contain the\n+     * generating bundle version.\n+     */\n+    final static String VERSION_FIELD_NAME = \"BUNDLE_VERSION\";\n+\n+    /**\n+     * The proxy jar manifest header that indicates the version of the bundle\n+     * that created the jar.\n+     */\n+    final static String LOGGING_VERSION_MANIFEST_HEADER = \"Liberty-Logging-Osgi-Bundle-Version\";\n+    \n+\t\n+    public ThrowableProxyActivator(Instrumentation inst, BundleContext bundleContext) {\n+    \tthis.inst = inst;\n+    \tthis.bundleContext = bundleContext;\n+    }\n+    \n+    /**\n+     * Activation callback from the Declarative Services runtime where the\n+     * component is ready for activation.\n+     *\n+     * @param bundleContext the bundleContext\n+     */\n+    protected void activate() throws Exception {    \n+        // Store a reference to the printStackTraceOverride method from BaseTraceService\n+        throwableInfo = new ThrowableInfo(inst);\n+        \n+        if (throwableInfo.isInitialized()) {\n+        \tString runtimeVersion = getRuntimeClassVersion();\n+            if (runtimeVersion != null && !runtimeVersion.equals(getCurrentVersion())) {\n+                // TODO: Use a compatibility check instead\n+                throw new IllegalStateException(\"Incompatible proxy code (version \" + runtimeVersion + \")\");\n+            }\n+\n+            // Find or create the proxy jar if the runtime code isn't loaded\n+            if (runtimeVersion == null) {\n+    \t        JarFile proxyJar = getBootProxyJarIfCurrent();\n+    \t        if (proxyJar == null) {\n+    \t            proxyJar = createBootProxyJar();\n+    \t        }\n+    \t        inst.appendToBootstrapClassLoaderSearch(proxyJar);\n+            }\n+            \n+        \tactivateThrowableProxyMethodTarget();\n+    \n+        \tThrowableClassFileTransformer tcfTransformer = new ThrowableClassFileTransformer();\n+\t\t\t//for (Class<?> clazz : ) {\n+\t\t\t  //  if (clazz.getName().equals(\"java.lang.Throwable\")) {\n+\t\t\t    \ttry {\n+\t\t\t    \t\tinst.addTransformer(tcfTransformer, true);\n+\t\t\t            inst.retransformClasses(Throwable.class); //something to replace retransfornm\n+\t\t\t        } catch (Throwable t) {\n+\t\t\t            t.printStackTrace();\n+\t\t\t        } finally {\n+\t\t\t        \tinst.removeTransformer(tcfTransformer);\n+\t\t\t        }\n+\t\t\t   //  }\n+\t//\t\t}\n+        }\n+    \t\n+\t}\n+\t\n+\tprotected void deactivate() throws Exception {\n+        try {\n+        \tif (throwableInfo.isInitialized())\n+        \t\tdeactivateThrowableProxyTarget();\n+        } catch (Exception e) {\n+            throw new Exception(e);\n+        }\n+    }\n+\t\n+\t/**\n+     * Determine if the boot delegated proxy is already available and, if so,\n+     * what its version is.\n+     *\n+     * @return the runtime version of the emitter proxy or null if the class\n+     *         is not currently available\n+     */\n+    @FFDCIgnore(Exception.class)\n+    String getRuntimeClassVersion() {\n+        String runtimeVersion = null;\n+        try {\n+            Class<?> clazz = Class.forName(THROWABLE_PROXY_CLASS_NAME);\n+            Field version = ReflectionHelper.getDeclaredField(clazz, VERSION_FIELD_NAME);\n+            runtimeVersion = (String) version.get(null);\n+        } catch (Exception e) {\n+        }\n+        return runtimeVersion;\n+    }\n+    \n+\t/**\n+     * Create a jar file that contains the proxy code that will live in the\n+     * boot delegation package.\n+     *\n+     * @return the jar file containing the proxy code to append to the boot\n+     *         class path\n+     *\n+     * @throws IOException if a file I/O error occurs\n+     */\n+    JarFile createBootProxyJar() throws IOException {\n+        File dataFile = bundleContext.getDataFile(\"boot-proxy-throwable.jar\");\n+\n+        // Create the file if it doesn't already exist\n+        if (!dataFile.exists()) {\n+            dataFile.createNewFile();\n+        }\n+\n+        // Generate a manifest\n+        Manifest manifest = createBootJarManifest();\n+\n+        // Create the file\n+        FileOutputStream fileOutputStream = new FileOutputStream(dataFile, false);\n+        JarOutputStream jarOutputStream = new JarOutputStream(fileOutputStream, manifest);\n+\n+        // Add the jar path entries to reduce class load times\n+        createDirectoryEntries(jarOutputStream, BOOT_DELEGATED_PACKAGE);\n+\n+        // Map the template classes into the delegation package and add to the jar\n+        Bundle bundle = bundleContext.getBundle();\n+        Enumeration<?> entryPaths = bundle.getEntryPaths(TEMPLATE_CLASSES_PATH);\n+        if (entryPaths != null) {\n+            while (entryPaths.hasMoreElements()) {\n+                URL sourceClassResource = bundle.getEntry((String) entryPaths.nextElement());\n+                if (sourceClassResource != null)\n+                    writeRemappedClass(sourceClassResource, jarOutputStream, BOOT_DELEGATED_PACKAGE);\n+            }\n+        }\n+\n+        jarOutputStream.close();\n+        fileOutputStream.close();\n+\n+        return new JarFile(dataFile);\n+    }\n+    \n+    /**\n+     * Transform the proxy template class that's in this package into a class\n+     * that's in a package on the framework boot delegation package list.\n+     *\n+     * @return the byte array containing the updated class\n+     *\n+     * @throws IOException if an IO exception raised while processing the class\n+     */\n+    private void writeRemappedClass(URL classUrl, JarOutputStream jarStream, String targetPackage) throws IOException {\n+        InputStream inputStream = classUrl.openStream();\n+        String sourceInternalName = getClassInternalName(classUrl);\n+        String targetInternalName = getTargetInternalName(sourceInternalName, targetPackage);\n+        SimpleRemapper remapper = new SimpleRemapper(sourceInternalName, targetInternalName);\n+\n+        ClassReader reader = new ClassReader(inputStream);\n+        ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_FRAMES);\n+        ClassRemapper remappingVisitor = new ClassRemapper(writer, remapper);\n+        ClassVisitor versionVisitor = new AddVersionFieldClassAdapter(remappingVisitor, VERSION_FIELD_NAME, getCurrentVersion());\n+        reader.accept(versionVisitor, ClassReader.EXPAND_FRAMES);\n+\n+        JarEntry jarEntry = new JarEntry(targetInternalName + \".class\");\n+        jarStream.putNextEntry(jarEntry);\n+        jarStream.write(writer.toByteArray());\n+    }\n+    \n+    /**\n+     * Create the jar directory entries corresponding to the specified package\n+     * name.\n+     *\n+     * @param jarStream the target jar's output stream\n+     * @param packageName the target package name\n+     *\n+     * @throws IOException if an IO exception raised while creating the entries\n+     */\n+    public void createDirectoryEntries(JarOutputStream jarStream, String packageName) throws IOException {\n+        StringBuilder entryName = new StringBuilder(packageName.length());\n+        for (String str : packageName.split(\"\\\\.\")) {\n+            entryName.append(str).append(\"/\");\n+            JarEntry jarEntry = new JarEntry(entryName.toString());\n+            jarStream.putNextEntry(jarEntry);\n+        }\n+    }\n+    \n+    /**\n+     * Get the internal class name of the class referenced by {@code classUrl}.\n+     *\n+     * @param classUrl the URL of the class to inspect\n+     *\n+     * @return the internal class name of the class referenced by {@code classUrl}\n+     *\n+     * @throws IOException if an IO error occurs during processing\n+     */\n+    String getClassInternalName(URL classUrl) throws IOException {\n+        InputStream inputStream = classUrl.openStream();\n+\n+        ClassReader reader = new ClassReader(inputStream);\n+        reader.accept(new ClassVisitor(Opcodes.ASM7) {}, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n+        inputStream.close();\n+\n+        return reader.getClassName();\n+    }\n+\n+    /**\n+     * Get the class internal name that should be used where moving the internal\n+     * class across packages.\n+     *\n+     * @param sourceInternalName the internal name of the template class\n+     * @param targetPackage the package to move the class to\n+     *\n+     * @return the target class name\n+     */\n+    String getTargetInternalName(String sourceInternalName, String targetPackage) {\n+        StringBuilder targetInternalName = new StringBuilder();\n+        targetInternalName.append(targetPackage.replaceAll(\"\\\\.\", \"/\"));\n+\n+        int lastSlashIndex = sourceInternalName.lastIndexOf('/');\n+        targetInternalName.append(sourceInternalName.substring(lastSlashIndex));\n+\n+        return targetInternalName.toString();\n+    }\n+    \n+    /**\n+     * Get the boot proxy jar from the current data area if the code\n+     * matches the current bundle version.\n+     *\n+     * @return the proxy jar iff the proxy jar exits and matches this\n+     *         bundle's version\n+     */\n+    JarFile getBootProxyJarIfCurrent() {\n+        File dataFile = bundleContext.getDataFile(\"boot-proxy-throwable.jar\");\n+        if (!dataFile.exists()) {\n+            return null;\n+        }\n+\n+        JarFile jarFile = null;\n+        try {\n+            jarFile = new JarFile(dataFile);\n+            Manifest manifest = jarFile.getManifest();\n+            Attributes attrs = manifest.getMainAttributes();\n+            String jarVersion = attrs.getValue(LOGGING_VERSION_MANIFEST_HEADER);\n+            if (!getCurrentVersion().equals(jarVersion)) {\n+                jarFile.close();\n+                jarFile = null;\n+            }\n+        } catch (Exception e) {\n+        }\n+\n+        return jarFile;\n+    }\n+    \n+    /**\n+     * Create the {@code Manifest} for the boot proxy jar.\n+     *\n+     * @return the boot proxy jar {@code Manifest}\n+     */\n+    Manifest createBootJarManifest() {\n+        Manifest manifest = new Manifest();\n+\n+        Attributes manifestAttributes = manifest.getMainAttributes();\n+        manifestAttributes.putValue(Attributes.Name.MANIFEST_VERSION.toString(), \"1.0\");\n+        manifestAttributes.putValue(\"Created-By\", \"Liberty Logging Osgi Extender\");\n+        manifestAttributes.putValue(\"Created-Time\", DateFormat.getInstance().format(new Date()));\n+        manifestAttributes.putValue(LOGGING_VERSION_MANIFEST_HEADER, getCurrentVersion());\n+\n+        return manifest;\n+    }\n+    \n+    /**\n+     * Get the host bundle's version string.\n+     *\n+     * @return the host bundle's version string\n+     */\n+    String getCurrentVersion() {\n+        return bundleContext.getBundle().getVersion().toString();\n+    }\n+\t\n+    /**\n+     * Binds this ThrowableProxyActivator class' printStackTraceOverride method to ThrowableProxy.\n+     *\n+     * @throws Exception the method invocation exception\n+     */\n+    void activateThrowableProxyMethodTarget() throws Exception {\n+        Method method = ReflectionHelper.getDeclaredMethod(getClass(), \"printStackTraceOverride\", Throwable.class, PrintStream.class);\n+        ReflectionHelper.setAccessible(method, true);\n+        findThrowableProxySetFireTargetMethod().invoke(null, this, method);\n+    }\n+    \n+    /**\n+     * Returns the Method object representing a setter for the ThrowableProxy instance variables.\n+     *\n+     * @return\n+     * @throws Exception\n+     */\n+    Method findThrowableProxySetFireTargetMethod() throws Exception {\n+        Class<?> proxyClass = Class.forName(THROWABLE_PROXY_CLASS_NAME);\n+        Method method = ReflectionHelper.getDeclaredMethod(proxyClass, \"setFireTarget\", Object.class, Method.class);\n+        ReflectionHelper.setAccessible(method, true);\n+        return method;\n+    }\n+\n+    /**\n+     * Unbinds the Activator class' and its method from ThrowableProxy.\n+     *\n+     * @throws Exception\n+     */\n+    void deactivateThrowableProxyTarget() throws Exception {\n+        findThrowableProxySetFireTargetMethod().invoke(null, null, null);\n+    }\n+\n+    /**\n+     * Invokes the static BaseTraceService.printStackTraceOverride() method from the com.ibm.ws.logging package.\n+     * This method is bound to the ThrowableProxy, which will be visible by the bootstrap class loader\n+     * \n+     * @param t the\n+     * @param originalStream that is retrieved via ThrowableMethodAdpater \n+     * \n+     * @return true if printStackTraceOverride() method in BaseTraceService evaluated to true, false otherwise\n+     */\n+    public boolean printStackTraceOverride(Throwable t, PrintStream originalStream) {\n+        Method method = throwableInfo.getBtsMethod();\n+        Boolean b = Boolean.FALSE;\n+        try {\n+            b = (Boolean) method.invoke(null, t, originalStream);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return b;\n+    }\n+}"
  },
  {
    "sha": "238d3afa2ca108fa6cb0afd3e631a6c9427310bb",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableProxyComponent.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableProxyComponent.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableProxyComponent.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/ThrowableProxyComponent.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,53 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.internal.osgi.stackjoiner;\n+\n+import java.lang.instrument.Instrumentation;\n+import org.osgi.service.component.ComponentContext;\n+\n+public class ThrowableProxyComponent {\n+\t\n+\tprivate ComponentContext componentContext;\n+\tprivate Instrumentation instrumentation;\n+\tprivate ThrowableProxyActivator proxyActivator;\n+\t\n+    /**\n+     * Activation callback from the Declarative Services runtime where the\n+     * component is ready for activation.\n+     *\n+     * @param bundleContext the bundleContext\n+     */\n+    synchronized void activate(ComponentContext componentContext) throws Exception {\n+    \tthis.componentContext = componentContext;\n+        this.proxyActivator = new ThrowableProxyActivator(this.instrumentation, componentContext.getBundleContext());\n+        this.proxyActivator.activate();\n+    }\n+    \n+    /**\n+     * Deactivation callback from the Declarative Services runtime where the\n+     * component is deactivated.\n+     *\n+     * @param bundleContext the bundleContext\n+     */\n+    synchronized void deactivate() throws Exception {\n+        this.proxyActivator.deactivate();\n+    }\n+    \n+    /**\n+     * Inject reference to the {@link java.lang.instrument.Instrumentation} implementation.\n+     *\n+     * @param instrumentationAgent the JVM's {@code Instrumentation) reference\n+     */\n+    protected void setInstrumentation(Instrumentation instrumentation) {\n+        this.instrumentation = instrumentation;\n+    }\n+    \n+}"
  },
  {
    "sha": "cd189d455a2c2656205233ec8d78c71a2d833a91",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/AddVersionFieldClassAdapter.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/AddVersionFieldClassAdapter.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/AddVersionFieldClassAdapter.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/AddVersionFieldClassAdapter.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.internal.osgi.stackjoiner.bci;\n+\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+/**\n+ * Simple adapter that adds a field to hold a version string. This is used\n+ * where mapping the template classes into the bootstrap package so we can\n+ * detect stale versions.\n+ * <p>\n+ * This implementation will <em>not<em> overwrite an existing field.\n+ * \n+ * This class is borrowed from com.ibm.ws.monitor/src/com/ibm/ws/monitor/internal/bci/remap/AddVersionFieldClassAdapter.java.\n+ */\n+public class AddVersionFieldClassAdapter extends ClassVisitor {\n+\n+    /**\n+     * The name of the version field.\n+     */\n+    final String versionFieldName;\n+\n+    /**\n+     * The {@link String} value of the version field.\n+     */\n+    final String versionFieldValue;\n+\n+    /**\n+     * Inidication that the field existed before augmentation.\n+     */\n+    boolean fieldAlreadyExists = false;\n+\n+    /**\n+     * Create a class visitor that will create a field to hold a version {@link String}.\n+     * \n+     * @param delegate the chained {@link ClassVisitor}\n+     * @param versionFieldName the name of the version field\n+     * @param versionFieldValue the value to associate with the version field\n+     */\n+    public AddVersionFieldClassAdapter(ClassVisitor delegate, String versionFieldName, String versionFieldValue) {\n+        super(Opcodes.ASM8, delegate);\n+        this.versionFieldName = versionFieldName;\n+        this.versionFieldValue = versionFieldValue;\n+    }\n+\n+    /**\n+     * Field visitor that observes existing fields before chaining to the\n+     * delegate {@ClassVisitor}.\n+     * <p> {@inheritDoc}\n+     */\n+    @Override\n+    public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {\n+        fieldAlreadyExists |= name.equals(versionFieldName);\n+\n+        return super.visitField(access, name, desc, signature, value);\n+    }\n+\n+    /**\n+     * End of class visitor that creates a version field definition if an\n+     * existing definition wasn't observed.\n+     */\n+    @Override\n+    public void visitEnd() {\n+        if (!fieldAlreadyExists) {\n+            FieldVisitor fv = super.visitField(\n+                                               Opcodes.ACC_PUBLIC + Opcodes.ACC_FINAL + Opcodes.ACC_STATIC,\n+                                               versionFieldName,\n+                                               Type.getDescriptor(String.class),\n+                                               null,\n+                                               versionFieldValue);\n+            fv.visitEnd();\n+        }\n+\n+        super.visitEnd();\n+    }\n+\n+    /**\n+     * Indication of whether or not a version field existed. Existing fields\n+     * are not overriden by this adapter.\n+     * \n+     * @return true if the version field named existed before adapter execution\n+     */\n+    public boolean doesFieldAlreadyExist() {\n+        return fieldAlreadyExists;\n+    }\n+}"
  },
  {
    "sha": "d005fe4a2b80faacec54e24db45bde4b5b7d3230",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableClassAdapter.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableClassAdapter.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableClassAdapter.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableClassAdapter.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,34 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.internal.osgi.stackjoiner.bci;\n+\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+\n+/**\n+ * Applies a transformation to the java.lang.Throwable class\n+ *\n+ */\n+public class ThrowableClassAdapter extends ClassVisitor implements Opcodes {\n+\n+    public ThrowableClassAdapter(ClassVisitor cv) {\n+        super(ASM8, cv);\n+    }\n+\n+    @Override\n+    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n+        MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);\n+        MethodVisitor tmv = new ThrowableMethodAdapter(mv, name, desc, signature);\n+        return tmv != null ? tmv : mv;\n+    };\n+\n+}"
  },
  {
    "sha": "33869f49be5a61a4062ccf9ec2bec91357c24fcd",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableClassFileTransformer.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableClassFileTransformer.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableClassFileTransformer.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableClassFileTransformer.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,50 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.internal.osgi.stackjoiner.bci;\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.security.ProtectionDomain;\n+\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+\n+public class ThrowableClassFileTransformer implements ClassFileTransformer {\n+\n+    @Override\n+    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain,\n+                            byte[] classfileBuffer) throws IllegalClassFormatException {\n+        byte[] ba = null;\n+        try {\n+            ba = transformClassIfThrowable(classfileBuffer, className);;\n+        } catch (Exception e) {\n+\n+            throw e;\n+        }\n+        return ba;\n+    }\n+\n+    @SuppressWarnings(\"static-access\")\n+\tprivate byte[] transformClassIfThrowable(byte[] cBuffer, String nameOfClass) {\n+        ClassReader reader = new ClassReader(cBuffer);\n+        ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_FRAMES);\n+        ClassVisitor visitor = writer;\n+        /*\n+        if (nameOfClass.equals(\"java/lang/Throwable\")) {\n+            visitor = new ThrowableClassAdapter(visitor);\n+        }*/\n+        visitor = new ThrowableClassAdapter(visitor);\n+        reader.accept(visitor, reader.SKIP_FRAMES);\n+        return writer.toByteArray();\n+    }\n+\n+}"
  },
  {
    "sha": "e3b26429a6ccb3e335b92f8cc55ac537d9fc3dca",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableMethodAdapter.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableMethodAdapter.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableMethodAdapter.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/bci/ThrowableMethodAdapter.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.internal.osgi.stackjoiner.bci;\n+\n+import java.io.PrintStream;\n+\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+/**\n+ * Injects all Throwable.printStackTrace(PrintStream) calls with a decision to override\n+ * itself to squash stack traces into one line.\n+ */\n+class ThrowableMethodAdapter extends MethodVisitor implements Opcodes {\n+\n+    private final String name;\n+    private final String desc;\n+    private final String signature;\n+\n+    public ThrowableMethodAdapter(MethodVisitor mv, String name, String desc, String signature) {\n+        super(ASM8, mv);\n+        this.name = name;\n+        this.desc = desc;\n+        this.signature = signature;\n+    }\n+    \n+    @Override\n+    public void visitCode() {\n+    \tif (name.equals(\"printStackTrace\") && desc.equals(\"(Ljava/io/PrintStream;)V\")) {\n+            mv.visitVarInsn(ALOAD, 0); // Loads 'this' (Throwable) onto the stack.\n+            mv.visitVarInsn(ALOAD, 1); // Loads the first param (PrintStream) onto the stack.\n+            // Call ThrowableProxy.fireMethod(Throwable, PrintStream) which invokes\n+            // BaseTraceService.printStackTraceOverride(Throwable, PrintStream) via reflection.\n+            // This method call consumes/pops the two objects off of the stack.\n+            mv.visitMethodInsn(\n+                               INVOKESTATIC,\n+                               \"com/ibm/ws/boot/delegated/logging/ThrowableProxy\",\n+                               \"fireMethod\",\n+                               Type.getMethodDescriptor(\n+                                                        Type.BOOLEAN_TYPE,\n+                                                        new Type[] { Type.getType(Throwable.class), Type.getType(PrintStream.class) }),\n+                               false);  // Pushes the Boolean value returned by BaseTraceService.printStackTraceOverride(...) onto the stack\n+            Label l0 = new Label();     // Generate a reference to Label L0.\n+            mv.visitJumpInsn(IFEQ, l0); // POP top of the stack, IF value on the stack is 0 (false), JUMP to Label L0.\n+            mv.visitInsn(RETURN);       // ELSE trigger a RETURN.\n+            mv.visitLabel(l0);          // Start of Label L0.\n+        }\n+    }\n+} "
  },
  {
    "sha": "8b0eea9b98475bbfad71aed07a80b8d6e42b5b4d",
    "filename": "dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/boot/templates/ThrowableProxy.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/boot/templates/ThrowableProxy.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/boot/templates/ThrowableProxy.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging.osgi/src/com/ibm/ws/logging/internal/osgi/stackjoiner/boot/templates/ThrowableProxy.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.internal.osgi.stackjoiner.boot.templates;\n+\n+import java.io.PrintStream;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * ThrowableProxy exposes an annotated BaseTraceService method to the Java Bootstrap ClassLoader\n+ */\n+public final class ThrowableProxy {\n+\n+    /**\n+     * The method to be fired upon\n+     */\n+    private static Method fireMethod;\n+\n+    /**\n+     * The class object in which the method is fired\n+     */\n+    private static Object fireTarget;\n+\n+    /**\n+     * Sets the fire target\n+     *\n+     * @param target instance in which the method resides\n+     * @param method to be fired\n+     */\n+    public final static void setFireTarget(Object target, Method method) {\n+        fireTarget = target;\n+        fireMethod = method;\n+    }\n+\n+    /**\n+     * Invokes the method that attempts a printStackTrace override\n+     * \n+     * @return true if Throwable.printStackTrace(PrintStream) is overriden, false otherwise\n+     */\n+    public final static boolean fireMethod(Throwable t, PrintStream originalStream) {\n+    \tBoolean b = Boolean.FALSE;\n+        try {\n+            b = (Boolean) fireMethod.invoke(fireTarget, t, originalStream);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return b;\n+    }\n+\n+}"
  },
  {
    "sha": "4f28e3ed9122c2415389160b5457babf801ece15",
    "filename": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java",
    "status": "modified",
    "additions": 68,
    "deletions": 19,
    "changes": 87,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -260,7 +260,7 @@ public BaseTraceService() {\n      * of system properties we expect (for FFDC and logging).\n      *\n      * @param config a {@link LogProviderConfigImpl} containing TrService configuration\n-     *                   from bootstrap properties\n+     *            from bootstrap properties\n      */\n     @Override\n     public void init(LogProviderConfig config) {\n@@ -286,12 +286,10 @@ public void publish(LogRecord logRecord) {\n             }\n \n             @Override\n-            public void flush() {\n-            }\n+            public void flush() {}\n \n             @Override\n-            public void close() {\n-            }\n+            public void close() {}\n         });\n     }\n \n@@ -308,7 +306,7 @@ protected void unregisterLoggerHandlerSingleton() {\n      * so values set there are not unset by metatype defaults.\n      *\n      * @param config a {@link LogProviderConfigImpl} containing dynamic updates from\n-     *                   the OSGi managed service.\n+     *            the OSGi managed service.\n      */\n     @Override\n     public synchronized void update(LogProviderConfig config) {\n@@ -1043,10 +1041,10 @@ protected void publishToLogSource(RoutedMessage routedMessage) {\n     /**\n      * Publish a trace log record.\n      *\n-     * @param detailLog           the trace writer\n+     * @param detailLog the trace writer\n      * @param logRecord\n-     * @param id                  the trace object id\n-     * @param formattedMsg        the result of {@link BaseTraceFormatter#formatMessage}\n+     * @param id the trace object id\n+     * @param formattedMsg the result of {@link BaseTraceFormatter#formatMessage}\n      * @param formattedVerboseMsg the result of {@link BaseTraceFormatter#formatVerboseMessage}\n      */\n     protected void publishTraceLogRecord(TraceWriter detailLog, LogRecord logRecord, Object id, String formattedMsg, String formattedVerboseMsg) {\n@@ -1193,7 +1191,7 @@ public void unsetTraceRouter(WsTraceRouter traceRouter) {\n      * the trace file.\n      *\n      * @param config a {@link LogProviderConfigImpl} containing TrService configuration\n-     *                   from bootstrap properties\n+     *            from bootstrap properties\n      */\n     protected void initializeWriters(LogProviderConfigImpl config) {\n         // createFileLog may or may not return the original log holder..\n@@ -1337,8 +1335,7 @@ public void writeRecord(String record) {\n \n         /** {@inheritDoc} */\n         @Override\n-        public void close() throws IOException {\n-        }\n+        public void close() throws IOException {}\n \n         /**\n          * Only allow \"off\" as a valid value for toggling system.out\n@@ -1550,7 +1547,10 @@ public synchronized void println(char c[]) {\n         public synchronized void println(String s) {\n             TrOutputStream.isPrinting.set(true);\n             try {\n-                super.print(s);\n+                if (TrOutputStream.isPrintingStackTrace.get())\n+                    super.println(s);\n+                else\n+                    super.print(s);\n             } finally {\n                 TrOutputStream.isPrinting.set(false);\n                 super.flush();\n@@ -1561,7 +1561,10 @@ public synchronized void println(String s) {\n         public synchronized void println(Object obj) {\n             TrOutputStream.isPrinting.set(true);\n             try {\n-                super.print(obj);\n+                if (TrOutputStream.isPrintingStackTrace.get())\n+                    super.println(obj);\n+                else\n+                    super.print(obj);\n             } finally {\n                 TrOutputStream.isPrinting.set(false);\n                 super.flush();\n@@ -1585,6 +1588,12 @@ protected Boolean initialValue() {\n                 return Boolean.FALSE;\n             }\n         };\n+        public static ThreadLocal<Boolean> isPrintingStackTrace = new ThreadLocal<Boolean>() {\n+            @Override\n+            protected Boolean initialValue() {\n+                return Boolean.FALSE;\n+            }\n+        };\n \n         public TrOutputStream(SystemLogHolder slh, BaseTraceService service) {\n             this.holder = slh;\n@@ -1595,11 +1604,11 @@ public TrOutputStream(SystemLogHolder slh, BaseTraceService service) {\n         public synchronized void flush() throws IOException {\n \n             /*\n-             * sPrinting is a ThreadLocal that is set to disable flushing while printing.\n+             * isPrinting is a ThreadLocal that is set to disable flushing while printing.\n              * This helps us ignore flush requests that the JDK automatically creates in the middle of printing large (>8k) strings.\n              * We want the whole String to be flushed in one shot for benefit of downstream event consumers.\n              */\n-            if (isPrinting.get())\n+            if (isPrinting.get() || isPrintingStackTrace.get())\n                 return;\n \n             super.flush();\n@@ -1654,8 +1663,8 @@ protected void restoreSystemStreams() {\n      * Write the text to the associated original stream.\n      * This is preserved as a subroutine for extension by other delegates (test, JSR47 logging)\n      *\n-     * @param tc        StreamTraceComponent associated with original stream\n-     * @param txt       pre-formatted or raw message\n+     * @param tc StreamTraceComponent associated with original stream\n+     * @param txt pre-formatted or raw message\n      * @param rawStream if true, this is from direct invocation of System.out or System.err\n      */\n     protected synchronized void writeStreamOutput(SystemLogHolder holder, String txt, boolean rawStream) {\n@@ -1665,6 +1674,46 @@ protected synchronized void writeStreamOutput(SystemLogHolder holder, String txt\n         holder.originalStream.println(txt);\n     }\n \n+    /**\n+     * This method is accessed via reflection by the com.ibm.ws.logging.osgi.stackjoiner.bci.ThrowableInfo class\n+     * It will be called on any Throwable.printStackTrace(PrintStream) invocation.\n+     *\n+     * @param t reference to the current Throwable object calling printStackTrace\n+     * @param originalStream reference to the PrintStream object to be written to\n+     * @return true if the printStackTrace method was overridden, false otherwise\n+     */\n+    public static boolean printStackTraceOverride(Throwable t, PrintStream originalStream) {\n+        if ((originalStream == System.err || originalStream == System.out) && !TrOutputStream.isPrintingStackTrace.get()) {\n+            TrOutputStream.isPrintingStackTrace.set(true);\n+            t.printStackTrace(originalStream);\n+            TrOutputStream.isPrintingStackTrace.set(false);\n+            originalStream.flush();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Trim multi or single line stack traces\n+     */\n+    public static String filterStackTraces(String txt) {\n+        String[] lines = txt.split(\"\\\\r?\\\\n\");\n+        if (lines.length > 1) {\n+            StringBuilder sb = new StringBuilder();\n+            for (int i = 0; i < lines.length; i++) {\n+                String filteredLine = filterStackTracesOriginal(lines[i]);\n+                if (filteredLine != null) {\n+                    sb.append(filteredLine);\n+                    if (i != lines.length - 1) {\n+                        sb.append(\"\\n\");\n+                    }\n+                }\n+            }\n+            return sb.toString();\n+        }\n+        return filterStackTracesOriginal(txt);\n+    }\n+\n     /**\n      * Trim stack traces. This isn't as sophisticated as what TruncatableThrowable\n      * does, since pass through all code except code which is clearly IBM-internal.\n@@ -1686,7 +1735,7 @@ protected synchronized void writeStreamOutput(SystemLogHolder holder, String txt\n      * @return null if the stack trace should be suppressed, or an indicator we're suppressing,\n      *         or maybe the original stack trace\n      */\n-    public static String filterStackTraces(String txt) {\n+    public static String filterStackTracesOriginal(String txt) {\n         // Check for stack traces, which we may want to trim\n         StackTraceFlags stackTraceFlags = traceFlags.get();\n         // We have a little thread-local state machine here with four states controlled by two"
  },
  {
    "sha": "02e1b9fe427650add631057642003088097dfc51",
    "filename": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/FATSuite.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/FATSuite.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/FATSuite.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/FATSuite.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -25,6 +25,7 @@\n                 StackTraceFilteringForNoClassDefFoundErrorTest.class, StackTraceFilteringForBadlyWrittenThrowableTest.class,\n                 StackTraceFilteringForIBMFeatureExceptionTest.class, StackTraceFilteringForUserFeatureExceptionTest.class,\n                 StackTraceFilteringForSpecificationClassesExceptionTest.class,\n+                StackTraceJoinerTest.class,\n                 InvalidTraceSpecificationTest.class,\n                 HealthCenterTest.class,\n                 TestHideMessages.class,"
  },
  {
    "sha": "661f0e9c46e284bc3a911b5ca5222b66c0504d6d",
    "filename": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/StackTraceJoinerTest.java",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/StackTraceJoinerTest.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/StackTraceJoinerTest.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/StackTraceJoinerTest.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,123 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.fat;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.RemoteFile;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.HttpUtils;\n+\n+/**\n+ * This test class ensures that stack traces are written as single events\n+ */\n+@RunWith(FATRunner.class)\n+public class StackTraceJoinerTest {\n+\n+    protected static LibertyServer server;\n+    protected static RemoteFile messagesLog;\n+    protected static RemoteFile consoleLog;\n+\n+    protected static final int CONN_TIMEOUT = 10;\n+\n+    protected static void hitWebPage(String contextRoot, String servletName, boolean failureAllowed) throws MalformedURLException, IOException, ProtocolException {\n+        try {\n+            URL url = new URL(\"http://\" + server.getHostname() + \":\" + server.getHttpDefaultPort() + \"/\" + contextRoot + \"/\" + servletName);\n+            int expectedResponseCode = failureAllowed ? HttpURLConnection.HTTP_INTERNAL_ERROR : HttpURLConnection.HTTP_OK;\n+            HttpURLConnection con = HttpUtils.getHttpConnection(url, expectedResponseCode, CONN_TIMEOUT);\n+            BufferedReader br = HttpUtils.getConnectionStream(con);\n+            String line = br.readLine();\n+            // Make sure the server gave us something back\n+            assertNotNull(line);\n+            con.disconnect();\n+        } catch (IOException e) {\n+            // A message about a 500 code may be fine\n+            if (!failureAllowed) {\n+                throw e;\n+            }\n+\n+        }\n+\n+    }\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.logging.stackjoiner\", StackTraceJoinerTest.class);\n+        ShrinkHelper.defaultDropinApp(server, \"broken-servlet\", \"com.ibm.ws.logging.fat.broken.servlet\");\n+        server.startServer();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        if (server != null && server.isStarted()) {\n+            server.stopServer();\n+        }\n+    }\n+\n+    @Test\n+    public void testPrintStackTracePrintStream() throws Exception {\n+        consoleLog = server.getConsoleLogFile();\n+        server.setMarkToEndOfLog(consoleLog);\n+        hitWebPage(\"broken-servlet\", \"BrokenWithCustomPrintStreamServlet\", false);\n+        List<String> systemErrOutput = server.findStringsInLogsUsingMark(\"err.*\", consoleLog);\n+\n+        assertTrue(\"Expected two single-lined stack traces to be found but found \" + systemErrOutput.size() + \" messages.\", systemErrOutput.size() == 2);\n+        assertTrue(\"Expected two single-lined stack traces to be identical but they were not.\", systemErrOutput.get(0).equals(systemErrOutput.get(1)));\n+    }\n+\n+    @Test\n+    public void testSingleLinedStackTraceConsoleLog() throws Exception {\n+        consoleLog = server.getConsoleLogFile();\n+        server.setMarkToEndOfLog(consoleLog);\n+        hitWebPage(\"broken-servlet\", \"ExceptionPrintingServlet\", false);\n+        List<String> systemErrOutput = server.findStringsInLogsUsingMark(\"err.*\", consoleLog);\n+        assertTrue(\"Expected stack trace as a single event but found \" + systemErrOutput.size() + \" messages.\", systemErrOutput.size() == 1);\n+    }\n+\n+    @Test\n+    public void testSingleLinedStackTraceMessagesLog() throws Exception {\n+        messagesLog = server.getDefaultLogFile();\n+        server.setMarkToEndOfLog(messagesLog);\n+        hitWebPage(\"broken-servlet\", \"ExceptionPrintingServlet\", false);\n+        List<String> systemErrOutput = server.findStringsInLogsUsingMark(\"SystemErr.*\", messagesLog);\n+        assertTrue(\"Expected stack trace as a single event but found \" + systemErrOutput.size() + \" messages.\", systemErrOutput.size() == 1);\n+    }\n+\n+    @Test\n+    public void testPrintStackTraceOverrideReflection() throws Exception {\n+        hitWebPage(\"broken-servlet\", \"ExceptionPrintingServlet\", false);\n+        List<String> traceOutput = server.findStringsInTrace(\"Stack joiner could not be initialized..*\");\n+        assertTrue(\"Stack joiner could not be initialized message was found in the trace.\", traceOutput.size() == 0);\n+    }\n+\n+    @Test\n+    public void testPrintStackTraceMultipleThreads() {\n+        // TODO: Test printStackTrace in multiple threads and ensure that messages are not leaking from one stack trace to another\n+    }\n+}"
  },
  {
    "sha": "d05a42c7cdfcf12d5e966f2023362dea80b8d524",
    "filename": "dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/bootstrap.properties",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/bootstrap.properties",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/bootstrap.properties",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/bootstrap.properties?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,12 @@\n+###############################################################################\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+###############################################################################\n+bootstrap.include=../testports.properties\n+com.ibm.ws.logging.trace.specification=com.ibm.ws.logging.*=debug"
  },
  {
    "sha": "9843f97d38d1923b08066c2e08d3bc2ca4d2d365",
    "filename": "dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/server.env",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/server.env",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/server.env",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/server.env?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1 @@\n+WLP_LOGGING_STACK_JOIN=true\n\\ No newline at end of file"
  },
  {
    "sha": "f04f60cc068b7cc6a56650cffefdfab8a076caab",
    "filename": "dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/server.xml",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/server.xml",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/server.xml",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging_fat/publish/servers/com.ibm.ws.logging.stackjoiner/server.xml?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,20 @@\n+<!--\n+    Copyright (c) 2020 IBM Corporation and others.\n+    All rights reserved. This program and the accompanying materials\n+    are made available under the terms of the Eclipse Public License v1.0\n+    which accompanies this distribution, and is available at\n+    http://www.eclipse.org/legal/epl-v10.html\n+   \n+    Contributors:\n+        IBM Corporation - initial API and implementation\n+ -->\n+<server description=\"Server for testing Liberty logging in a server\">\n+\n+    <include location=\"../fatTestPorts.xml\"/>\n+\n+    <featureManager>\n+\t   <feature>jsp-2.3</feature>\n+    </featureManager>\n+    \n+    \n+</server>"
  },
  {
    "sha": "d632e7766488ee962127a78fb7af3c9faf5a4d22",
    "filename": "dev/com.ibm.ws.logging_fat/test-applications/broken-servlet/src/com/ibm/ws/logging/fat/broken/servlet/BrokenWithCustomPrintStreamServlet.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/test-applications/broken-servlet/src/com/ibm/ws/logging/fat/broken/servlet/BrokenWithCustomPrintStreamServlet.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/5b48694a6fecbc972a6c019763e1fa1f506d872e/dev/com.ibm.ws.logging_fat/test-applications/broken-servlet/src/com/ibm/ws/logging/fat/broken/servlet/BrokenWithCustomPrintStreamServlet.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.logging_fat/test-applications/broken-servlet/src/com/ibm/ws/logging/fat/broken/servlet/BrokenWithCustomPrintStreamServlet.java?ref=5b48694a6fecbc972a6c019763e1fa1f506d872e",
    "patch": "@@ -0,0 +1,66 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.fat.broken.servlet;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Servlet which throws an exception.\n+ */\n+@WebServlet(\"/BrokenWithCustomPrintStreamServlet\")\n+public class BrokenWithCustomPrintStreamServlet extends HttpServlet {\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * @see HttpServlet#HttpServlet()\n+     */\n+    public BrokenWithCustomPrintStreamServlet() {\n+        super();\n+    }\n+\n+    /**\n+     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n+     */\n+    @Override\n+    protected void doGet(HttpServletRequest request,\n+                         HttpServletResponse response) throws ServletException, IOException {\n+        response.setContentType(\"text/plain\");\n+\n+        response.getWriter().println(\"Howdy! This servlet is working just fine, except for all the bits that are deliberately broken.\");\n+\n+        // In the absence of the jndi feature, this lookup shouldn't go well\n+        try {\n+            InitialContext ctx = new InitialContext();\n+            ctx.lookup(\"something/That/Does/Not/Exist\");\n+        } catch (NamingException e) {\n+            // Print two stack traces to System.err\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            PrintStream ps = new PrintStream(baos);\n+            e.printStackTrace(ps);\n+            System.err.println(baos.toString());\n+            e.printStackTrace();\n+        }\n+\n+        response.getWriter().println(\"There should be two exceptions in your logs.\");\n+\n+    }\n+\n+}"
  }
]
