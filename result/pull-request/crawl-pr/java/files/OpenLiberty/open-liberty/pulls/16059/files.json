[
  {
    "sha": "f14b6462e2b8e05413d0018db323d678c6740409",
    "filename": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/utils/IndexUtils.java",
    "status": "modified",
    "additions": 25,
    "deletions": 12,
    "changes": 37,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/ef329ba3b4349d114a61283f0f687249dd8fc7a0/dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/utils/IndexUtils.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/ef329ba3b4349d114a61283f0f687249dd8fc7a0/dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/utils/IndexUtils.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/utils/IndexUtils.java?ref=ef329ba3b4349d114a61283f0f687249dd8fc7a0",
    "patch": "@@ -10,21 +10,10 @@\n  *******************************************************************************/\n package io.openliberty.microprofile.openapi20.utils;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.List;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipInputStream;\n \n import org.jboss.jandex.DotName;\n import org.jboss.jandex.IndexView;\n@@ -36,8 +25,10 @@\n import com.ibm.ws.container.service.app.deploy.ContainerInfo.Type;\n import com.ibm.ws.container.service.app.deploy.ModuleClassesContainerInfo;\n import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n import com.ibm.wsspi.adaptable.module.Container;\n import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.FastModeControl;\n import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n \n import io.smallrye.openapi.api.OpenApiConfig;\n@@ -76,7 +67,12 @@ public static IndexView getIndexView(WebModuleInfo webModuleInfo, ModuleClassesC\n                 indexContainer(ci.getContainer(), null, indexer, filter);\n             } else if (ci.getType() == Type.WEB_INF_LIB) {\n                 if (acceptJarForScanning(config, ci.getContainer().getName())) {\n-                    indexContainer(ci.getContainer(), null, indexer, filter);\n+                    FastModeControl control = enableFastMode(ci.getContainer());\n+                    try {\n+                        indexContainer(ci.getContainer(), null, indexer, filter);\n+                    } finally {\n+                        disableFastMode(control);\n+                    }\n                 }\n             }\n         }\n@@ -190,4 +186,21 @@ private static boolean acceptJarForScanning(final OpenApiConfig config, final St\n         \n         return acceptJar;\n     }\n+    \n+    @FFDCIgnore(UnableToAdaptException.class)\n+    private static FastModeControl enableFastMode(Container container) {\n+        try {\n+            FastModeControl control = container.adapt(FastModeControl.class);\n+            control.useFastMode();\n+            return control;\n+        } catch (UnableToAdaptException e) {\n+            return null;\n+        }\n+    }\n+    \n+    private static void disableFastMode(FastModeControl fastMode) {\n+        if (fastMode != null) {\n+            fastMode.stopUsingFastMode();\n+        }\n+    }\n }"
  }
]
