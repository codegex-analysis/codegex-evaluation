[
  {
    "sha": "2e703563b895b9dd9ae1463ed52464e0326a29ef",
    "filename": "dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java",
    "status": "modified",
    "additions": 43,
    "deletions": 3,
    "changes": 46,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/e82e4bdbc50513999010e3538ff6f55583b32f92/dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/e82e4bdbc50513999010e3538ff6f55583b32f92/dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java?ref=e82e4bdbc50513999010e3538ff6f55583b32f92",
    "patch": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2020 IBM Corporation and others.\n+ * Copyright (c) 2021 IBM Corporation and others.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n@@ -15,6 +15,7 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.PrintStream;\n+import java.nio.file.CopyOption;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -310,10 +311,12 @@ public static void transformApp(Path appPath, Path newAppPath) {\n                     if (!Files.exists(backupAppPath)) {\n                         Files.createFile(backupAppPath);\n                     }\n+\n                     // move original to backup\n-                    Files.move(appPath, backupAppPath, StandardCopyOption.REPLACE_EXISTING);\n+                    retryableMove(appPath, backupAppPath, StandardCopyOption.REPLACE_EXISTING);\n+\n                     // rename jakarta app to the original filename\n-                    Files.move(outputPath, appPath);\n+                    retryableMove(outputPath, appPath);\n                 }\n             } else {\n                 throw new RuntimeException(\"Jakarta transformer failed for: \" + appPath);\n@@ -333,4 +336,41 @@ public static void transformApp(Path appPath, Path newAppPath) {\n             Log.info(c, m, \"Transforming complete app: \" + outputPath);\n         }\n     }\n+\n+    /**\n+     * A move with retries built in. This is particularly useful for when encountering an issue on Windows where the JakartaTransformer applications has finished executing, but\n+     * files it accessed may still not have had their handles released by the system.\n+     *\n+     * @param  source      The source path.\n+     * @param  target      The target path.\n+     * @param  options     Copy options.\n+     * @return             The path of the copied file.\n+     * @throws IOException If the source path was unable to be moved.\n+     */\n+    private static Path retryableMove(Path source, Path target, CopyOption... options) throws IOException {\n+        IOException failure = null;\n+        boolean issuedMsg = false;\n+        for (int idx = 0; idx < 30; idx++) {\n+            try {\n+                return Files.move(source, target, options);\n+            } catch (IOException e) {\n+                if (!issuedMsg) {\n+                   Log.warning(c, m, \"Failed to move file, will retry for 30 seconds: \" + e);\n+                   issuedMsg = true;\n+                }\n+\n+                /*\n+                 * On windows we often see java.nio.file.FileSystemException with error message:\n+                 * \"The process cannot access the file because it is being used by another process\"\n+                 */\n+                failure = e; // Save for later.\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (InterruptedException e1) {\n+                    /* Ignore. Try again. */\n+                }\n+            }\n+        }\n+        throw failure;\n+    }\n }"
  }
]
