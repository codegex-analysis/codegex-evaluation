[
  {
    "sha": "fb36a905361147871a7f2f3ed92e34edaf0fe79d",
    "filename": "dev/cnf/dependabot/check_this_in_if_it_changes/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/cnf/dependabot/check_this_in_if_it_changes/pom.xml",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/cnf/dependabot/check_this_in_if_it_changes/pom.xml",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/cnf/dependabot/check_this_in_if_it_changes/pom.xml?ref=88ea339cdb62611cbdf2a7be13ef4dc47f9007fb",
    "patch": "@@ -804,7 +804,7 @@\n     <dependency>\n       <groupId>jakarta.ws.rs</groupId>\n       <artifactId>jakarta.ws.rs-api</artifactId>\n-      <version>3.0.0-M1</version>\n+      <version>3.0.0</version>\n     </dependency>\n     <dependency>\n       <groupId>jakarta.xml.bind</groupId>"
  },
  {
    "sha": "541de209116a6127d3c07ed15bb2d292b40cbb0b",
    "filename": "dev/com.ibm.ws.security.authentication.builtin/src/com/ibm/ws/security/authentication/jaas/modules/UsernameAndPasswordLoginModule.java",
    "status": "modified",
    "additions": 14,
    "deletions": 7,
    "changes": 21,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/com.ibm.ws.security.authentication.builtin/src/com/ibm/ws/security/authentication/jaas/modules/UsernameAndPasswordLoginModule.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/com.ibm.ws.security.authentication.builtin/src/com/ibm/ws/security/authentication/jaas/modules/UsernameAndPasswordLoginModule.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.security.authentication.builtin/src/com/ibm/ws/security/authentication/jaas/modules/UsernameAndPasswordLoginModule.java?ref=88ea339cdb62611cbdf2a7be13ef4dc47f9007fb",
    "patch": "@@ -28,10 +28,11 @@\n import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n import com.ibm.ws.security.AccessIdUtil;\n import com.ibm.ws.security.authentication.AuthenticationException;\n-import com.ibm.ws.security.authentication.UserRevokedException;\n import com.ibm.ws.security.authentication.PasswordExpiredException;\n+import com.ibm.ws.security.authentication.UserRevokedException;\n import com.ibm.ws.security.authentication.internal.jaas.modules.ServerCommonLoginModule;\n import com.ibm.ws.security.authentication.principals.WSPrincipal;\n+import com.ibm.ws.security.context.SubjectRegistryManager;\n import com.ibm.ws.security.registry.UserRegistry;\n \n /**\n@@ -74,8 +75,16 @@ public boolean login() throws LoginException {\n             userRegistry = getUserRegistry();\n             urAuthenticatedId = userRegistry.checkPassword(user, String.valueOf(passwordChars));\n             if (urAuthenticatedId != null) {\n-                username = getSecurityName(user, urAuthenticatedId);\n-                setUpTemporarySubject();\n+                try {\n+                    //We only need to start registry detection if there is a SAF registry configured\n+                    //This method doesn't provide information about the user logging in, only\n+                    //that there is a SAF registry.\n+                    SubjectRegistryManager.startSubjectRegistryDetectionOnZOS();\n+                    username = getSecurityName(user, urAuthenticatedId);\n+                    setUpTemporarySubject();\n+                } finally {\n+                    SubjectRegistryManager.clearSubjectRegistryDetectionOnZOS();\n+                }\n                 updateSharedState();\n                 return true;\n             } else {\n@@ -86,13 +95,11 @@ public boolean login() throws LoginException {\n                                                                                new Object[] { user },\n                                                                                \"CWWKS1100A: Authentication failed for the userid {0}. A bad userid and/or password was specified.\"));\n             }\n-        } \n-        catch (com.ibm.ws.security.registry.PasswordExpiredException e) {\n+        } catch (com.ibm.ws.security.registry.PasswordExpiredException e) {\n             throw new PasswordExpiredException(e.getLocalizedMessage(), e);\n         } catch (com.ibm.ws.security.registry.UserRevokedException e) {\n             throw new UserRevokedException(e.getLocalizedMessage(), e);\n-        } \n-        catch (AuthenticationException e) {\n+        } catch (AuthenticationException e) {\n \n             // NO FFDC: AuthenticationExceptions are expected (bad userid/password is pretty normal)\n             throw e; // no-need to wrap"
  },
  {
    "sha": "c87cec69a56625676a32b9a4faf96b5dc6b58527",
    "filename": "dev/com.ibm.ws.security.wim.registry/bnd.bnd",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/com.ibm.ws.security.wim.registry/bnd.bnd",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/com.ibm.ws.security.wim.registry/bnd.bnd",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.security.wim.registry/bnd.bnd?ref=88ea339cdb62611cbdf2a7be13ef4dc47f9007fb",
    "patch": "@@ -33,6 +33,7 @@ IBM-Default-Config: OSGI-INF/wlp/defaultInstances.xml\n instrument.classesExcludes: com/ibm/ws/security/wim/registry/util/resources/*.class\n \n -buildpath: \\\n+\tcom.ibm.ws.security;version=latest,\\\n \tcom.ibm.ws.security.wim.core;version=latest,\\\n \tcom.ibm.websphere.org.osgi.core;version=latest,\\\n \tcom.ibm.websphere.org.osgi.service.component;version=latest,\\"
  },
  {
    "sha": "036bb752f002096b5c75964e99b36d1b2b242f65",
    "filename": "dev/com.ibm.ws.security/src/com/ibm/ws/security/context/SubjectRegistryManager.java",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/com.ibm.ws.security/src/com/ibm/ws/security/context/SubjectRegistryManager.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/com.ibm.ws.security/src/com/ibm/ws/security/context/SubjectRegistryManager.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.security/src/com/ibm/ws/security/context/SubjectRegistryManager.java?ref=88ea339cdb62611cbdf2a7be13ef4dc47f9007fb",
    "patch": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.context;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.security.context.internal.SubjectRegistryThreadContext;\n+\n+/**\n+ * The SubjectRegistryManager sets and gets caller/invocation subject information\n+ * off the thread and provides the ability to clear the subject registry info off the thread.\n+ * See {@link SubjectRegistryThreadContext} for more information.\n+ */\n+public class SubjectRegistryManager {\n+\n+    private static ThreadLocal<SubjectRegistryThreadContext> threadLocal = new SecurityThreadLocal();\n+\n+    /**\n+     * Gets the subject registry thread context that is unique per thread.\n+     * If/when a common thread storage framework is supplied, then this method\n+     * implementation may need to be updated to take it into consideration.\n+     *\n+     * @return the subject registry thread context.\n+     */\n+    @Trivial\n+    protected static SubjectRegistryThreadContext getSubjectRegistryThreadContext() {\n+        ThreadLocal<SubjectRegistryThreadContext> currentThreadLocal = getThreadLocal();\n+        SubjectRegistryThreadContext subjectRegistryThreadContext = currentThreadLocal.get();\n+        if (subjectRegistryThreadContext == null) {\n+            subjectRegistryThreadContext = new SubjectRegistryThreadContext();\n+            currentThreadLocal.set(subjectRegistryThreadContext);\n+        }\n+        return subjectRegistryThreadContext;\n+    }\n+\n+    /**\n+     * Set whether or not the subject is from the SAF registry.\n+     *\n+     * @param isSAF True if the subject is from the SAF registry.\n+     */\n+    public static void setSubjectIsSAF(boolean isSAF) {\n+        if (!isZOS()) {\n+            return;\n+        }\n+        SubjectRegistryThreadContext subjectRegistryThreadContext = getSubjectRegistryThreadContext();\n+        subjectRegistryThreadContext.setIsSAF(isSAF);\n+    }\n+\n+    /**\n+     * Start subject registry detection. This is only required if a SAF\n+     * registry is configured.\n+     *\n+     * @param isSAFRegistryConfigured\n+     */\n+    public static void startSubjectRegistryDetectionOnZOS() {\n+        if (!isZOS()) {\n+            return;\n+        }\n+        SubjectRegistryThreadContext subjectRegistryThreadContext = getSubjectRegistryThreadContext();\n+        subjectRegistryThreadContext.detect();\n+    }\n+\n+    /**\n+     * Clear the subject registry detection. This is only required if a SAF\n+     * registry is configured.\n+     *\n+     * @param isSAFRegistryConfigured\n+     */\n+    public static void clearSubjectRegistryDetectionOnZOS() {\n+        if (!isZOS()) {\n+            return;\n+        }\n+        SubjectRegistryThreadContext subjectRegistryThreadContext = getSubjectRegistryThreadContext();\n+        subjectRegistryThreadContext.donotdetect();\n+    }\n+\n+    /**\n+     * Determine if a SAF credential should be created.\n+     * The instances when a SAF credential should be\n+     * created are:\n+     * <ol>\n+     * <li>SAF registry is configured and subject is from the SAF registry</li>\n+     * <li>mapDistributedIdentities is true</li>\n+     * <li>Subject is from the OS registry (and not logging in)</li>\n+     * </ol>\n+     *\n+     * @return True if a SAF credential should be created and false if it should not\n+     */\n+    public static boolean isCreateSAFCredential() {\n+        if (!isZOS()) {\n+            return false;\n+        }\n+        SubjectRegistryThreadContext subjectRegistryThreadContext = getSubjectRegistryThreadContext();\n+        return subjectRegistryThreadContext.isCreateSAFCredential();\n+    }\n+\n+    /**\n+     * Gets the thread local object.\n+     * If/when a common thread storage framework is supplied, then this method\n+     * implementation may need to be updated to take it into consideration.\n+     *\n+     * @return the thread local object.\n+     */\n+    @Trivial\n+    private static ThreadLocal<SubjectRegistryThreadContext> getThreadLocal() {\n+        return threadLocal;\n+    }\n+\n+    /**\n+     * Initialize the thread local object.\n+     */\n+    private static final class SecurityThreadLocal extends ThreadLocal<SubjectRegistryThreadContext> {\n+        @Override\n+        protected SubjectRegistryThreadContext initialValue() {\n+            return new SubjectRegistryThreadContext();\n+        }\n+    }\n+\n+    /**\n+     * Check if this is z/OS\n+     *\n+     * @return true if on z/OS\n+     */\n+    public static final boolean isZOS() {\n+        String osName = System.getProperty(\"os.name\");\n+        if (osName.contains(\"OS/390\") || osName.contains(\"z/OS\") || osName.contains(\"zOS\")) {\n+            return true;\n+        }\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "e16592a27a6bf2cd1519daad132bb8156025f03f",
    "filename": "dev/com.ibm.ws.security/src/com/ibm/ws/security/context/internal/SubjectRegistryThreadContext.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/OpenLiberty/open-liberty/blob/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/com.ibm.ws.security/src/com/ibm/ws/security/context/internal/SubjectRegistryThreadContext.java",
    "raw_url": "https://github.com/OpenLiberty/open-liberty/raw/88ea339cdb62611cbdf2a7be13ef4dc47f9007fb/dev/com.ibm.ws.security/src/com/ibm/ws/security/context/internal/SubjectRegistryThreadContext.java",
    "contents_url": "https://api.github.com/repos/OpenLiberty/open-liberty/contents/dev/com.ibm.ws.security/src/com/ibm/ws/security/context/internal/SubjectRegistryThreadContext.java?ref=88ea339cdb62611cbdf2a7be13ef4dc47f9007fb",
    "patch": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.context.internal;\n+\n+/**\n+ * The thread context that holds the registry information for a subject.\n+ * This is used to determine whether or not to create a SAF credential\n+ * after authenticating. The instances when a SAF credential should be\n+ * created are:\n+ * <ol>\n+ * <li>SAF registry is configured and subject is from the SAF registry</li>\n+ * <li>mapDistributedIdentities is true</li>\n+ * <li>Subject is from the OS registry (and not logging in)</li>\n+ * </ol>\n+ *\n+ * The subject's registry is determined by following the subject's login\n+ * path. In {@link UsernameAndPasswordLoginModule#login()}, start registry\n+ * detection in a try/catch (DETECT). In getUserSecurityName, the SAFRegistry or\n+ * SAFAuthorizedRegistry will be called if the user is from the SAF registry.\n+ * Set the thread context in those classes to IS_SAF.\n+ * <p>\n+ * When SAFCredentialsServiceImpl.setCredential is called, the thread context\n+ * is checked. If the value is DONT_DETECT, the subject is not logging in.\n+ * This is the case for OS registry users, and they should create a credential.\n+ * If the value is DETECT, the SAFRegistry classes were not accessed, meaning\n+ * the subject is not from the SAF registry. In this case, do not attempt to\n+ * create the credential. Lastly, IS_SAF means create the credential.\n+ */\n+public class SubjectRegistryThreadContext {\n+\n+    /**\n+     * This is used to determine where we are in a user's login.\n+     * When login begins, we DETECT. Once we see we are in the\n+     * SAF registry, set IS_SAF or NOT_SAF. After login completes, DONT_DETECT.\n+     */\n+    private enum SAFDetectEnum {\n+        DONT_DETECT,\n+        DETECT,\n+        IS_SAF,\n+        NOT_SAF\n+    }\n+\n+    /**\n+     * This is used to determine where we are in a user's login.\n+     * When login begins, we DETECT. Once we see we are in the\n+     * SAF registry, set IS_SAF. After login completes, DONT_DETECT.\n+     */\n+    private SAFDetectEnum SAFDetector = SAFDetectEnum.DONT_DETECT;\n+\n+    /**\n+     * Set the SAFDetector when the registry is known.\n+     *\n+     * @param isSAF True if the user is from the SAF registry.\n+     */\n+    public void setIsSAF(boolean isSAF) {\n+        if (SAFDetector == SAFDetectEnum.DETECT) {\n+            if (isSAF) {\n+                SAFDetector = SAFDetectEnum.IS_SAF;\n+            } else {\n+                SAFDetector = SAFDetectEnum.NOT_SAF;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Stop detection. This is called when login is complete or\n+     * there was an error.\n+     */\n+    public void donotdetect() {\n+        SAFDetector = SAFDetectEnum.DONT_DETECT;\n+    }\n+\n+    /**\n+     * Start detection. This is called at the beginning of a login.\n+     * This means the subject is not the initial OS subject.\n+     */\n+    public void detect() {\n+        SAFDetector = SAFDetectEnum.DETECT;\n+    }\n+\n+    /**\n+     * Determine if the credential should be created. The credential\n+     * should be created if detection has not started (DONT_DETECT)\n+     * or if we have a SAF user.\n+     *\n+     * @return True if the credential should be created and False if\n+     *         it should not.\n+     */\n+    public boolean isCreateSAFCredential() {\n+        return SAFDetector == SAFDetectEnum.DONT_DETECT || SAFDetector == SAFDetectEnum.IS_SAF;\n+    }\n+\n+}"
  }
]
