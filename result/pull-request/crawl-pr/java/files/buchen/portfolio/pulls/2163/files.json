[
  {
    "sha": "ae8cff9062d52eb34797d4cc05bdd7d34bf2e8d8",
    "filename": "name.abuchen.portfolio.tests/src/name/abuchen/portfolio/datatransfer/pdf/justtrade/Dividende01.txt",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/buchen/portfolio/blob/d507f0a32b459e2e7c134554b144f77c71398371/name.abuchen.portfolio.tests/src/name/abuchen/portfolio/datatransfer/pdf/justtrade/Dividende01.txt",
    "raw_url": "https://github.com/buchen/portfolio/raw/d507f0a32b459e2e7c134554b144f77c71398371/name.abuchen.portfolio.tests/src/name/abuchen/portfolio/datatransfer/pdf/justtrade/Dividende01.txt",
    "contents_url": "https://api.github.com/repos/buchen/portfolio/contents/name.abuchen.portfolio.tests/src/name/abuchen/portfolio/datatransfer/pdf/justtrade/Dividende01.txt?ref=d507f0a32b459e2e7c134554b144f77c71398371",
    "patch": "@@ -0,0 +1,38 @@\n+PDF Autor: ''\r\n+PDFBox Version: 1.8.16\r\n+-----------------------------------------\r\n+justTRADE\r\n+Ein Service der Sutor Bank\r\n+JT Technologies GmbH\r\n+Kaiserhofstraße 16\r\n+Herr 60313 Frankfurt am Main\r\n+x x Email: service@justtrade.com\r\n+x x Str 1 Web: www.justtrade.com\r\n+00000 x\r\n+Name des Kunden: x x\r\n+Depotnummer: 999123456\r\n+16. März 2021\r\n+Dividende - Vierteljährlich\r\n+Produktbezeichnung - Kellogg Co.:\r\n+Internationale Wertpapierkennnummer US4878361082\r\n+(ISIN)\r\n+Anzahl/Nominale 30,00\r\n+Referenz 3528\r\n+Ex Datum - Tag 01. März 2021\r\n+Zahlbarkeitstag 15. März 2021\r\n+Valutadatum 15. März 2021\r\n+Dividende pro Stück/Nominal EUR 0,476445\r\n+Devisenkurs (EUR/ USD) 1,1964\r\n+Dividendengutschrift EUR 14,29\r\n+Einbehaltende Quellensteuer EUR 2,14\r\n+Anrechenbare Quellensteuer EUR 2,14\r\n+Ausmachender Betrag EUR 12,15\r\n+Bei Fragen oder im Falle einer fehlerhaften Abrechnung wenden Sie sich bitte an den justTRADE -\r\n+Kundenservice. Sie finden die Kontaktdetails im Briefkopf dieser Abrechnung.\r\n+Der Gegenwert der Transaktion wird per Valutatag gebucht. Keine Steuerbescheinigung.\r\n+Dieses Dokument wurde maschinell erstellt und wird nicht unterschrieben.\r\n+MAX HEINR. SUTOR OHG TELEFON 040-8090685-0 GESCHÄFTSLEITUNG FINANZAMT HAMBURG AMTSGERICHT HAMBURG\r\n+HERMANNSTRASSE 46 TELEFAX 040-8090685-810 ROBERT FREITAG STNR: 2761000074 HRA 25379\r\n+20095 HAMBURG THOMAS MEIER UST-IDNR: DE155617009\r\n+POSTFACH 11 33 37 INFO@SUTORBANK.DE BANKLEITZAHL 202 308 00\r\n+20433 HAMBURG WWW.SUTORBANK.DE BIC CODE: MHSBDEHBXXX\n\\ No newline at end of file"
  },
  {
    "sha": "cc24723f1da485adafab3c485103db6d7eca16b6",
    "filename": "name.abuchen.portfolio.tests/src/name/abuchen/portfolio/datatransfer/pdf/justtrade/JustTradePDFExtractorTest.java",
    "status": "modified",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/buchen/portfolio/blob/d507f0a32b459e2e7c134554b144f77c71398371/name.abuchen.portfolio.tests/src/name/abuchen/portfolio/datatransfer/pdf/justtrade/JustTradePDFExtractorTest.java",
    "raw_url": "https://github.com/buchen/portfolio/raw/d507f0a32b459e2e7c134554b144f77c71398371/name.abuchen.portfolio.tests/src/name/abuchen/portfolio/datatransfer/pdf/justtrade/JustTradePDFExtractorTest.java",
    "contents_url": "https://api.github.com/repos/buchen/portfolio/contents/name.abuchen.portfolio.tests/src/name/abuchen/portfolio/datatransfer/pdf/justtrade/JustTradePDFExtractorTest.java?ref=d507f0a32b459e2e7c134554b144f77c71398371",
    "patch": "@@ -15,8 +15,10 @@\n import name.abuchen.portfolio.datatransfer.Extractor.Item;\n import name.abuchen.portfolio.datatransfer.Extractor.SecurityItem;\n import name.abuchen.portfolio.datatransfer.actions.AssertImportActions;\n+import name.abuchen.portfolio.datatransfer.Extractor.TransactionItem;\n import name.abuchen.portfolio.datatransfer.pdf.JustTradePDFExtractor;\n import name.abuchen.portfolio.datatransfer.pdf.PDFInputFile;\n+import name.abuchen.portfolio.model.AccountTransaction;\n import name.abuchen.portfolio.model.BuySellEntry;\n import name.abuchen.portfolio.model.Client;\n import name.abuchen.portfolio.model.PortfolioTransaction;\n@@ -225,4 +227,35 @@ public void testSammelabrechnung01()\n         \n     }\n \n+    @Test\n+    public void testDividende01()\n+    {\n+        Client client = new Client();\n+\n+        JustTradePDFExtractor extractor = new JustTradePDFExtractor(client);\n+\n+        List<Exception> errors = new ArrayList<>();\n+\n+        List<Item> results = extractor.extract(PDFInputFile.loadTestCase(getClass(), \"Dividende01.txt\"), errors);\n+\n+        assertThat(errors, empty());\n+        assertThat(results.size(), is(2));\n+        new AssertImportActions().check(results, \"EUR\");\n+\n+        Security security = results.stream().filter(i -> i instanceof SecurityItem).findFirst().get().getSecurity();\n+        assertThat(security.getIsin(), is(\"US4878361082\"));\n+        assertThat(security.getName(), is(\"Kellogg Co.\"));\n+\n+        AccountTransaction t = (AccountTransaction) results.stream().filter(i -> i instanceof TransactionItem).findFirst()\n+                        .orElseThrow(IllegalArgumentException::new).getSubject();\n+\n+        assertThat(t.getType(), is(AccountTransaction.Type.DIVIDENDS));\n+        assertThat(t.getMonetaryAmount(), is(Money.of(\"EUR\", Values.Amount.factorize(12.15))));\n+        assertThat(t.getShares(), is(Values.Share.factorize(30)));\n+        assertThat(t.getDateTime(), is(LocalDateTime.parse(\"2021-03-01T00:00\")));\n+\n+        assertThat(t.getGrossValue(), is(Money.of(\"EUR\", Values.Amount.factorize(14.29))));\n+        assertThat(t.getUnitSum(Unit.Type.TAX), is(Money.of(\"EUR\", Values.Amount.factorize(2.14))));\n+        assertThat(t.getUnitSum(Unit.Type.FEE), is(Money.of(CurrencyUnit.EUR, Values.Amount.factorize(0.00))));\n+    }\n }"
  },
  {
    "sha": "8b1168585b2e10672b389757da384695210d890c",
    "filename": "name.abuchen.portfolio/src/name/abuchen/portfolio/datatransfer/pdf/JustTradePDFExtractor.java",
    "status": "modified",
    "additions": 107,
    "deletions": 3,
    "changes": 110,
    "blob_url": "https://github.com/buchen/portfolio/blob/d507f0a32b459e2e7c134554b144f77c71398371/name.abuchen.portfolio/src/name/abuchen/portfolio/datatransfer/pdf/JustTradePDFExtractor.java",
    "raw_url": "https://github.com/buchen/portfolio/raw/d507f0a32b459e2e7c134554b144f77c71398371/name.abuchen.portfolio/src/name/abuchen/portfolio/datatransfer/pdf/JustTradePDFExtractor.java",
    "contents_url": "https://api.github.com/repos/buchen/portfolio/contents/name.abuchen.portfolio/src/name/abuchen/portfolio/datatransfer/pdf/JustTradePDFExtractor.java?ref=d507f0a32b459e2e7c134554b144f77c71398371",
    "patch": "@@ -1,12 +1,15 @@\n package name.abuchen.portfolio.datatransfer.pdf;\r\n \r\n+import java.time.LocalDate;\r\n import java.time.LocalDateTime;\r\n import java.time.format.DateTimeFormatter;\r\n import java.util.Locale;\r\n+import java.util.Map;\r\n \r\n import name.abuchen.portfolio.datatransfer.pdf.PDFParser.Block;\r\n import name.abuchen.portfolio.datatransfer.pdf.PDFParser.DocumentType;\r\n import name.abuchen.portfolio.datatransfer.pdf.PDFParser.Transaction;\r\n+import name.abuchen.portfolio.model.AccountTransaction;\r\n import name.abuchen.portfolio.model.BuySellEntry;\r\n import name.abuchen.portfolio.model.Client;\r\n import name.abuchen.portfolio.model.PortfolioTransaction;\r\n@@ -15,7 +18,7 @@\n \r\n public class JustTradePDFExtractor extends AbstractPDFExtractor\r\n {\r\n-\r\n+    private static final String FLAG_WITHHOLDING_TAX_FOUND  = \"false\"; //$NON-NLS-1$\r\n     private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"d LLL yyyy HH:mm:ss\", //$NON-NLS-1$\r\n                     Locale.GERMANY);\r\n \r\n@@ -27,6 +30,7 @@ public JustTradePDFExtractor(Client client)\n \r\n         addBuyTransactionOld();\r\n         addBuySellTransaction();\r\n+        addDividendeTransaction();\r\n     }\r\n \r\n     private String stripTrailing(String value)\r\n@@ -173,8 +177,108 @@ private void addBuySellTransaction()\n                         })\r\n \r\n                         .wrap(BuySellEntryItem::new);\r\n-        \r\n-        \r\n+    }\r\n+\r\n+    @SuppressWarnings(\"nls\")\r\n+    private void addDividendeTransaction()\r\n+    {\r\n+        DocumentType type = new DocumentType(\"Dividende\");\r\n+        this.addDocumentTyp(type);\r\n+\r\n+        Block block = new Block(\"^(Dividende [^pro]).*\");\r\n+        type.addBlock(block);\r\n+        Transaction<AccountTransaction> pdfTransaction = new Transaction<AccountTransaction>()\r\n+            .subject(() -> {\r\n+                AccountTransaction entry = new AccountTransaction();\r\n+                entry.setType(AccountTransaction.Type.DIVIDENDS);\r\n+                return entry;\r\n+            });\r\n+\r\n+        pdfTransaction\r\n+\r\n+                // Produktbezeichnung - Kellogg Co.:\r\n+                // Internationale Wertpapierkennnummer US4878361082\r\n+                .section(\"name\", \"isin\")\r\n+                .match(\"^Produktbezeichnung - (?<name>.*):\")\r\n+                .match(\"^Internationale Wertpapierkennnummer (?<isin>.*)\")\r\n+                .assign((t, v) -> {\r\n+                    t.setSecurity(getOrCreateSecurity(v));\r\n+                })\r\n+\r\n+                // Anzahl/Nominale 30,00\r\n+                .section(\"shares\")\r\n+                .match(\"^Anzahl\\\\/Nominale (?<shares>[\\\\d.]+,\\\\d+)\")\r\n+                .assign((t, v) -> {\r\n+                    t.setShares(asShares(v.get(\"shares\")));\r\n+                })\r\n+\r\n+                // Ex Datum - Tag 01. März 2021\r\n+                .section(\"date\")\r\n+                .match(\"^Ex Datum - Tag (?<date>\\\\d+. .* \\\\d{4})\")\r\n+                .assign((t, v) -> {\r\n+                    // Formate the date from 01. März 2021 to 01.03.2021\r\n+                    v.put(\"date\", DateTimeFormatter.ofPattern(\"dd.MM.yyyy\").format(LocalDate.parse(v.get(\"date\"), DateTimeFormatter.ofPattern(\"d. MMMM yyyy\", Locale.GERMANY))));\r\n+                    t.setDateTime(asDate(v.get(\"date\")));\r\n+                })\r\n+\r\n+                // Ausmachender Betrag EUR 12,15\r\n+                .section(\"currency\", \"amount\")\r\n+                .match(\"^Ausmachender Betrag (?<currency>\\\\w{3}) (?<amount>[\\\\d.]+,\\\\d+)\")\r\n+                .assign((t, v) -> {\r\n+                    t.setAmount(asAmount(v.get(\"amount\")));\r\n+                    t.setCurrencyCode(v.get(\"currency\"));\r\n+                })\r\n+\r\n+                .wrap(TransactionItem::new);\r\n+\r\n+        addTaxesSectionsTransaction(pdfTransaction, type);\r\n+\r\n+        block.set(pdfTransaction);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"nls\")\r\n+    private <T extends Transaction<?>> void addTaxesSectionsTransaction(T transaction, DocumentType type)\r\n+    {\r\n+        transaction\r\n+                // Einbehaltende Quellensteuer EUR 2,14\r\n+                .section(\"quellensteinbeh\", \"currency\").optional()\r\n+                .match(\"^Einbehaltende Quellensteuer (?<currency>\\\\w{3}) (?<quellensteinbeh>[.,\\\\d]+)$\")\r\n+                .assign((t, v) ->  {\r\n+                    type.getCurrentContext().put(FLAG_WITHHOLDING_TAX_FOUND, \"true\");\r\n+                    addTax(type, t, v, \"quellensteinbeh\");\r\n+                })\r\n+\r\n+                // Anrechenbare Quellensteuer EUR 2,14\r\n+                .section(\"quellenstanr\", \"currency\").optional()\r\n+                .match(\"^Anrechenbare Quellensteuer (?<currency>\\\\w{3}) (?<quellenstanr>[.,\\\\d]+)$\")\r\n+                .assign((t, v) -> addTax(type, t, v, \"quellenstanr\"));\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"nls\")\r\n+    private void addTax(DocumentType type, Object t, Map<String, String> v, String taxtype)\r\n+    {\r\n+        // Wenn es 'Einbehaltene Quellensteuer' gibt, dann die weiteren\r\n+        // Quellensteuer-Arten nicht berücksichtigen.\r\n+        if (checkWithholdingTax(type, taxtype))\r\n+        {\r\n+            ((name.abuchen.portfolio.model.Transaction) t)\r\n+                    .addUnit(new Unit(Unit.Type.TAX, \r\n+                                    Money.of(asCurrencyCode(v.get(\"currency\")), \r\n+                                                    asAmount(v.get(taxtype)))));\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"nls\")\r\n+    private boolean checkWithholdingTax(DocumentType type, String taxtype)\r\n+    {\r\n+        if (Boolean.valueOf(type.getCurrentContext().get(FLAG_WITHHOLDING_TAX_FOUND)))\r\n+        {\r\n+            if (\"quellenstanr\".equalsIgnoreCase(taxtype))\r\n+            { \r\n+                return false; \r\n+            }\r\n+        }\r\n+        return true;\r\n     }\r\n \r\n     @Override\r"
  }
]
