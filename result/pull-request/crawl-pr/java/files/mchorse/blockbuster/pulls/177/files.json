[
  {
    "sha": "f86a76d11c4f6be753d6404a5ae13d702bdccb48",
    "filename": "help/en_US/gui.yml",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/help/en_US/gui.yml",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/help/en_US/gui.yml",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/help/en_US/gui.yml?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -391,9 +391,15 @@ blockbuster.gui:\n             title: Particle space\n \n             position: Local position\n+            position_tooltip: Particles will simulate in entity space.\n             rotation: Local rotation\n+            rotation_tooltip: Particle rotation will simulate in entity space. Only works if local position is enabled too.\n+            scale: Local scale\n+            scale_tooltip: It scales the particles according to the target's scale. It works best with local position and rotation. It doesn't work well with collision!\n             direction: Local direction\n+            direction_tooltip: It rotates the direction vector according to the target's rotation at spawn time once.\n             acceleration: Local acceleration\n+            acceleration_tooltip: It rotates the acceleration vector according to the target's rotation throughout the whole lifetime.\n             gravity: Gravity\n \n         initialization:\n@@ -462,6 +468,12 @@ blockbuster.gui:\n \n             position: Position\n             position_speed: Initial speed\n+            speed: Speed\n+            acceleration_title: Acceleration\n+            acceleration_x: X acceleration\n+            acceleration_y: Y acceleration\n+            acceleration_z: Z acceleration\n+            position_drag_title: Air drag\n             position_drag: Motion drag\n \n             rotation: Rotation\n@@ -541,6 +553,8 @@ blockbuster.gui:\n             preserve_energy_tooltip: Preserve energy option allows to preserve velocity of particles after collision\n             entity_collision: Collision with entities\n             momentum: Momentum for entity collision\n+            realistic_collision_drag: Realistic collision drag\n+            realistic_collision_drag_tooltip: Collision drag will be reset when particle stops colliding. Activating this will also fix particles accelerating away with high collision drag values.\n             drag: Collision drag adds a drag (slowdown) after particle's collision with blocks in the world\n             bounciness: Bounciness multiplies particle's acceleration after collision\n             random_direction: Random Direction - randomize the direction vector. It doesn't affect the velocity."
  },
  {
    "sha": "a3983ce079a5087fe43b27516bfd08e38e0ee8a9",
    "filename": "src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormCollisionSection.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormCollisionSection.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormCollisionSection.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormCollisionSection.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -21,6 +21,7 @@\n     public GuiToggleElement realisticCollision;\n     public GuiToggleElement entityCollision;\n     public GuiToggleElement momentum;\n+    public GuiToggleElement realisticCollisionDrag;\n     public GuiTrackpadElement drag;\n     public GuiTrackpadElement bounciness;\n     public GuiTrackpadElement randomBounciness; //randomize the direction vector\n@@ -64,6 +65,13 @@ public GuiSnowstormCollisionSection(Minecraft mc, GuiSnowstorm parent)\n             this.component.momentum = b.isToggled();\n             this.parent.dirty();\n         });\n+\n+        this.realisticCollisionDrag = new GuiToggleElement(mc, IKey.lang(\"blockbuster.gui.snowstorm.collision.realistic_collision_drag\"), (b) ->\n+        {\n+            this.component.realisticCollisionDrag = b.isToggled();\n+            this.parent.dirty();\n+        });\n+        this.realisticCollisionDrag.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.realistic_collision_drag_tooltip\"));\n         \n         this.drag = new GuiTrackpadElement(mc, (value) ->\n         {\n@@ -154,7 +162,7 @@ public GuiSnowstormCollisionSection(Minecraft mc, GuiSnowstorm parent)\n \n         this.randomBouncinessRow.add(this.randomBounciness);\n         \n-        this.fields.add(this.controlToggleElements, this.drag, this.bounciness, this.randomBouncinessRow , this.radius, this.expire, this.expirationDelay);\n+        this.fields.add(this.controlToggleElements, this.realisticCollisionDrag, this.drag, this.bounciness, this.randomBouncinessRow , this.radius, this.expire, this.expirationDelay);\n         this.fields.add(Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.collision.damping.title\"), 20).anchor(0, 1F), this.damp, this.randomDamp);\n         this.fields.add(Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.collision.split_particle.title\"), 20).anchor(0, 1F), this.splitParticle,  this.splitParticleSpeedThreshold);\n     }\n@@ -187,6 +195,7 @@ protected void fillData()\n         this.realisticCollision.toggled(this.component.realisticCollision);\n         this.entityCollision.toggled(this.component.entityCollision);\n         this.momentum.toggled(this.component.momentum);\n+        this.realisticCollisionDrag.toggled(this.component.realisticCollisionDrag);\n         this.drag.setValue(this.component.collisionDrag);\n         this.bounciness.setValue(this.component.bounciness);\n         this.randomBounciness.setValue(this.component.randomBounciness);"
  },
  {
    "sha": "eadc27155682aba1a2438588571c68d96a5d429f",
    "filename": "src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormMotionSection.java",
    "status": "modified",
    "additions": 50,
    "deletions": 9,
    "changes": 59,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormMotionSection.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormMotionSection.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormMotionSection.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -16,16 +16,20 @@\n public class GuiSnowstormMotionSection extends GuiSnowstormModeSection<BedrockComponentMotion>\n {\n     public GuiElement position;\n+    public GuiElement positionElements;\n     public GuiTextElement positionSpeed;\n     public GuiTextElement positionX;\n     public GuiTextElement positionY;\n     public GuiTextElement positionZ;\n     public GuiTextElement positionDrag;\n+    public GuiElement positionDragRow;\n+    public GuiElement positionTitle = Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.motion.acceleration_title\"), 20).anchor(0, 1F);\n \n     public GuiElement rotation;\n     public GuiTextElement rotationAngle;\n     public GuiTextElement rotationRate;\n     public GuiTextElement rotationAcceleration;\n+    public GuiElement rotationDragRow;\n     public GuiTextElement rotationDrag;\n \n     private BedrockComponentInitialSpeed speed;\n@@ -38,11 +42,11 @@ public GuiSnowstormMotionSection(Minecraft mc, GuiSnowstorm parent)\n         this.positionSpeed = new GuiTextElement(mc, 10000, (str) -> this.speed.speed = this.parse(str, this.positionSpeed, this.speed.speed));\n         this.positionSpeed.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.motion.position_speed\"));\n         this.positionX = new GuiTextElement(mc, 10000, (str) -> this.updatePosition(str, this.positionX, 0));\n-        this.positionX.tooltip(IKey.lang(\"blockbuster.gui.model_block.x\"));\n+        this.positionX.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.motion.acceleration_x\"));\n         this.positionY = new GuiTextElement(mc, 10000, (str) -> this.updatePosition(str, this.positionY, 1));\n-        this.positionY.tooltip(IKey.lang(\"blockbuster.gui.model_block.y\"));\n+        this.positionY.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.motion.acceleration_y\"));\n         this.positionZ = new GuiTextElement(mc, 10000, (str) -> this.updatePosition(str, this.positionZ, 2));\n-        this.positionZ.tooltip(IKey.lang(\"blockbuster.gui.model_block.z\"));\n+        this.positionZ.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.motion.acceleration_z\"));\n         this.positionDrag = new GuiTextElement(mc, 10000, (str) ->\n         {\n             BedrockComponentMotionDynamic component = (BedrockComponentMotionDynamic) this.component;\n@@ -80,9 +84,26 @@ public GuiSnowstormMotionSection(Minecraft mc, GuiSnowstorm parent)\n         this.rotationDrag.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.motion.rotation_drag\"));\n \n         this.position = new GuiElement(mc);\n+\n         this.position.flex().column(5).vertical().stretch();\n-        this.position.add(Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.motion.position\"), 20).anchor(0, 1F), this.positionSpeed);\n-        this.position.add(this.positionX, this.positionY, this.positionZ);\n+        this.position.add(Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.motion.speed\"), 20).anchor(0, 1F), this.positionSpeed);\n+\n+        this.positionElements = new GuiElement(mc);\n+\n+        this.positionElements.flex().column(5).vertical().stretch();\n+        this.positionElements.add(this.positionX, this.positionY, this.positionZ);\n+        this.positionElements.addBefore(this.positionX, this.positionTitle);\n+        this.position.add(this.positionElements);\n+\n+        this.positionDragRow = new GuiElement(mc);\n+        this.rotationDragRow = new GuiElement(mc);\n+\n+        this.rotationDragRow.flex().column(5).vertical().stretch();\n+        this.rotationDragRow.add(Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.motion.rotation_drag\")), this.rotationDrag);\n+\n+        this.positionDragRow.flex().column(5).vertical().stretch();\n+        this.positionDragRow.add(Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.motion.position_drag_title\")), this.positionDrag);\n+\n \n         this.rotation = new GuiElement(mc);\n         this.rotation.flex().column(5).vertical().stretch();\n@@ -156,13 +177,23 @@ protected void fillData()\n         this.set(this.rotationAngle, this.spin.rotation);\n         this.set(this.rotationRate, this.spin.rate);\n \n-        this.positionDrag.removeFromParent();\n-        this.rotationDrag.removeFromParent();\n+        this.positionDragRow.removeFromParent();\n+        this.rotationDragRow.removeFromParent();\n \n         if (this.component instanceof BedrockComponentMotionDynamic)\n         {\n             BedrockComponentMotionDynamic component = (BedrockComponentMotionDynamic) this.component;\n \n+            this.positionElements.remove(this.positionTitle);\n+\n+            this.positionTitle = Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.motion.acceleration_title\"), 20).anchor(0, 1F);\n+\n+            this.positionElements.addBefore(this.positionX, this.positionTitle);\n+\n+            this.positionX.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.motion.acceleration_x\"));\n+            this.positionY.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.motion.acceleration_y\"));\n+            this.positionZ.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.motion.acceleration_z\"));\n+\n             this.set(this.positionX, component.motionAcceleration[0]);\n             this.set(this.positionY, component.motionAcceleration[1]);\n             this.set(this.positionZ, component.motionAcceleration[2]);\n@@ -171,13 +202,23 @@ protected void fillData()\n             this.set(this.positionDrag, component.motionDrag);\n             this.set(this.rotationDrag, component.rotationDrag);\n \n-            this.position.add(this.positionDrag);\n-            this.rotation.add(this.rotationDrag);\n+            this.position.add(this.positionDragRow);\n+            this.rotation.add(this.rotationDragRow);\n         }\n         else\n         {\n             BedrockComponentMotionParametric component = (BedrockComponentMotionParametric) this.component;\n \n+            this.positionElements.remove(this.positionTitle);\n+\n+            this.positionTitle = Elements.label(IKey.lang(\"blockbuster.gui.snowstorm.motion.position\"), 20).anchor(0, 1F);\n+\n+            this.positionElements.addBefore(this.positionX, this.positionTitle);\n+\n+            this.positionX.tooltip(IKey.lang(\"blockbuster.gui.model_block.x\"));\n+            this.positionY.tooltip(IKey.lang(\"blockbuster.gui.model_block.y\"));\n+            this.positionZ.tooltip(IKey.lang(\"blockbuster.gui.model_block.z\"));\n+\n             this.set(this.positionX, component.position[0]);\n             this.set(this.positionY, component.position[1]);\n             this.set(this.positionZ, component.position[2]);"
  },
  {
    "sha": "1e5155ea914609f53e7347582269302e75b2617e",
    "filename": "src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormSpaceSection.java",
    "status": "modified",
    "additions": 16,
    "deletions": 1,
    "changes": 17,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormSpaceSection.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormSpaceSection.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/client/gui/dashboard/panels/snowstorm/sections/GuiSnowstormSpaceSection.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -11,6 +11,7 @@\n {\n     public GuiToggleElement position;\n     public GuiToggleElement rotation;\n+    public GuiToggleElement scale;\n     public GuiToggleElement direction; //local direction for physical accurate systems\n     public GuiToggleElement acceleration;\n     public GuiToggleElement gravity;\n@@ -24,30 +25,43 @@ public GuiSnowstormSpaceSection(Minecraft mc, GuiSnowstorm parent)\n             this.component.position = b.isToggled();\n             this.parent.dirty();\n         });\n+        this.position.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.space.position_tooltip\"));\n \n         this.rotation = new GuiToggleElement(mc, IKey.lang(\"blockbuster.gui.snowstorm.space.rotation\"), (b) ->\n         {\n             this.component.rotation = b.isToggled();\n             this.parent.dirty();\n         });\n+        this.rotation.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.space.rotation_tooltip\"));\n+\n+        this.scale = new GuiToggleElement(mc, IKey.lang(\"blockbuster.gui.snowstorm.space.scale\"), (b) ->\n+        {\n+            this.component.scale = b.isToggled();\n+            this.parent.dirty();\n+        });\n+        this.scale.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.space.scale_tooltip\"));\n \n         this.direction = new GuiToggleElement(mc, IKey.lang(\"blockbuster.gui.snowstorm.space.direction\"), (b) ->\n         {\n             this.component.direction = b.isToggled();\n             this.parent.dirty();\n         });\n+        this.direction.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.space.direction_tooltip\"));\n+\n         this.acceleration = new GuiToggleElement(mc, IKey.lang(\"blockbuster.gui.snowstorm.space.acceleration\"), (b) ->\n         {\n             this.component.acceleration = b.isToggled();\n             this.parent.dirty();\n         });\n+        this.acceleration.tooltip(IKey.lang(\"blockbuster.gui.snowstorm.space.acceleration_tooltip\"));\n+\n         this.gravity = new GuiToggleElement(mc, IKey.lang(\"blockbuster.gui.snowstorm.space.gravity\"), (b) ->\n         {\n             this.component.gravity = b.isToggled();\n             this.parent.dirty();\n         });\n \n-        this.fields.add(this.position, this.rotation, this.direction, this.acceleration, this.gravity);\n+        this.fields.add(this.position, this.rotation, this.scale, this.direction, this.acceleration, this.gravity);\n     }\n \n     @Override\n@@ -67,6 +81,7 @@ protected void fillData()\n     {\n         this.position.toggled(this.component.position);\n         this.rotation.toggled(this.component.rotation);\n+        this.scale.toggled(this.component.scale);\n         this.direction.toggled(this.component.direction);\n         this.acceleration.toggled(this.component.acceleration);\n         this.gravity.toggled(this.component.gravity);"
  },
  {
    "sha": "f29772afe666d41f767f5c206a098b2918c563ef",
    "filename": "src/main/java/mchorse/blockbuster/client/particles/components/appearance/BedrockComponentAppearanceBillboard.java",
    "status": "modified",
    "additions": 45,
    "deletions": 3,
    "changes": 48,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/particles/components/appearance/BedrockComponentAppearanceBillboard.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/particles/components/appearance/BedrockComponentAppearanceBillboard.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/client/particles/components/appearance/BedrockComponentAppearanceBillboard.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -17,9 +17,7 @@\n import net.minecraft.util.math.MathHelper;\n import org.lwjgl.opengl.GL11;\n \n-import javax.vecmath.Matrix4f;\n-import javax.vecmath.Vector3f;\n-import javax.vecmath.Vector4f;\n+import javax.vecmath.*;\n \n public class BedrockComponentAppearanceBillboard extends BedrockComponentBase implements IComponentParticleRender\n {\n@@ -274,10 +272,41 @@ public void render(BedrockEmitter emitter, BedrockParticle particle, BufferBuild\n             py = this.vector.y;\n             pz = this.vector.z;\n \n+            if(particle.relativeScale)\n+            {\n+                Vector3d pos = new Vector3d(px, py, pz);\n+\n+                Matrix3d scale = new Matrix3d(emitter.scale[0], 0, 0,\n+                                              0, emitter.scale[1], 0,\n+                                              0, 0, emitter.scale[2]);\n+\n+                scale.transform(pos);\n+\n+                px = pos.x;\n+                py = pos.y;\n+                pz = pos.z;\n+            }\n+\n             px += emitter.lastGlobal.x;\n             py += emitter.lastGlobal.y;\n             pz += emitter.lastGlobal.z;\n         }\n+        else if(particle.relativeScale)\n+        {\n+            Vector3d pos = new Vector3d(px, py, pz);\n+\n+            Matrix3d scale = new Matrix3d(emitter.scale[0], 0, 0,\n+                                     0, emitter.scale[1], 0,\n+                                     0, 0, emitter.scale[2]);\n+\n+            pos.sub(emitter.lastGlobal); //transform back to local\n+            scale.transform(pos);\n+            pos.add(emitter.lastGlobal); //transform back to global\n+\n+            px = pos.x;\n+            py = pos.y;\n+            pz = pos.z;\n+        }\n \n         /* Calculate yaw and pitch based on the facing mode */\n         float entityYaw = emitter.cYaw;\n@@ -323,6 +352,19 @@ else if (emitter.perspective == 100 && !lookAt)\n         this.vertices[3].set(-this.w / 2, this.h / 2, 0, 1);\n         this.transform.setIdentity();\n \n+        if(particle.relativeScale)\n+        {\n+            Matrix4d scale = new Matrix4d(emitter.scale[0], 0, 0, 0,\n+                                     0, emitter.scale[1], 0, 0,\n+                                     0, 0, emitter.scale[2], 0,\n+                                     0, 0, 0, 1);\n+\n+            for (Vector4f vertex : this.vertices)\n+            {\n+                scale.transform(vertex);\n+            }\n+        }\n+\n         if (this.facing == CameraFacing.ROTATE_XYZ || this.facing == CameraFacing.LOOKAT_XYZ)\n         {\n             this.rotation.rotY(entityYaw / 180 * (float) Math.PI);"
  },
  {
    "sha": "ba413118442aa3f89e73850660021a673c32501e",
    "filename": "src/main/java/mchorse/blockbuster/client/particles/components/meta/BedrockComponentLocalSpace.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/particles/components/meta/BedrockComponentLocalSpace.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/particles/components/meta/BedrockComponentLocalSpace.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/client/particles/components/meta/BedrockComponentLocalSpace.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -13,6 +13,7 @@\n {\n     public boolean position;\n     public boolean rotation;\n+    public boolean scale;\n     public boolean direction;\n     public boolean acceleration;\n     public boolean gravity;\n@@ -25,6 +26,7 @@ public BedrockComponentBase fromJson(JsonElement elem, MolangParser parser) thro\n \n         if (element.has(\"position\")) this.position = element.get(\"position\").getAsBoolean();\n         if (element.has(\"rotation\")) this.rotation = element.get(\"rotation\").getAsBoolean();\n+        if (element.has(\"scale\")) this.scale = element.get(\"scale\").getAsBoolean();\n         if (element.has(\"direction\")) this.direction = element.get(\"direction\").getAsBoolean();\n         if (element.has(\"acceleration\")) this.acceleration = element.get(\"acceleration\").getAsBoolean();\n         if (element.has(\"gravity\")) this.gravity = element.get(\"gravity\").getAsBoolean();\n@@ -39,6 +41,7 @@ public JsonElement toJson()\n \n         if (this.position) object.addProperty(\"position\", true);\n         if (this.rotation) object.addProperty(\"rotation\", true);\n+        if (this.scale) object.addProperty(\"scale\", true);\n         if (this.direction) object.addProperty(\"direction\", true);\n         if (this.acceleration) object.addProperty(\"acceleration\", true);\n         if (this.gravity) object.addProperty(\"gravity\", true);\n@@ -51,6 +54,7 @@ public void apply(BedrockEmitter emitter, BedrockParticle particle)\n     {\n         particle.relativePosition = this.position;\n         particle.relativeRotation = this.rotation;\n+        particle.relativeScale = this.scale;\n         particle.relativeDirection = this.direction;\n         particle.relativeAcceleration = this.acceleration;\n         particle.gravity = this.gravity;"
  },
  {
    "sha": "3a3f37d9febd680f056b1e2333fe316461553069",
    "filename": "src/main/java/mchorse/blockbuster/client/particles/components/motion/BedrockComponentMotionCollision.java",
    "status": "modified",
    "additions": 153,
    "deletions": 27,
    "changes": 180,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/particles/components/motion/BedrockComponentMotionCollision.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/particles/components/motion/BedrockComponentMotionCollision.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/client/particles/components/motion/BedrockComponentMotionCollision.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -12,22 +12,22 @@\n import mchorse.blockbuster.client.particles.molang.MolangException;\n import mchorse.blockbuster.client.particles.molang.MolangParser;\n import mchorse.blockbuster.client.particles.molang.expressions.MolangExpression;\n+import mchorse.blockbuster.utils.EntityTransformationUtils;\n import mchorse.mclib.math.Operation;\n import mchorse.mclib.utils.MathUtils;\n import net.minecraft.entity.Entity;\n import net.minecraft.util.EnumFacing;\n import net.minecraft.util.math.AxisAlignedBB;\n import net.minecraft.util.math.BlockPos;\n \n+import javax.annotation.Nullable;\n import javax.vecmath.Vector3d;\n import javax.vecmath.Vector3f;\n import java.util.HashMap;\n import java.util.List;\n \n public class BedrockComponentMotionCollision extends BedrockComponentBase implements IComponentParticleUpdate\n {\n-    private static final CollisionOffset OFFSET = new CollisionOffset();\n-    \n     public MolangExpression enabled = MolangParser.ONE;\n     public boolean preserveEnergy = false;\n     public boolean entityCollision;\n@@ -43,6 +43,7 @@\n     public boolean expireOnImpact;\n     public MolangExpression expirationDelay = MolangParser.ZERO;\n     public boolean realisticCollision;\n+    public boolean realisticCollisionDrag;\n \n     /* Runtime options */\n     private Vector3d previous = new Vector3d();\n@@ -129,6 +130,7 @@ public BedrockComponentBase fromJson(JsonElement elem, MolangParser parser) thro\n         if (element.has(\"enabled\")) this.enabled = parser.parseJson(element.get(\"enabled\"));\n         if (element.has(\"entityCollision\")) this.entityCollision = element.get(\"entityCollision\").getAsBoolean();\n         if (element.has(\"momentum\")) this.momentum = element.get(\"momentum\").getAsBoolean();\n+        if (element.has(\"realistic_collision_drag\")) this.realisticCollisionDrag = element.get(\"realistic_collision_drag\").getAsBoolean();\n         if (element.has(\"collision_drag\")) this.collisionDrag = element.get(\"collision_drag\").getAsFloat();\n         if (element.has(\"coefficient_of_restitution\")) this.bounciness = element.get(\"coefficient_of_restitution\").getAsFloat();\n         if (element.has(\"bounciness_randomness\")) this.randomBounciness = element.get(\"bounciness_randomness\").getAsFloat();\n@@ -166,6 +168,7 @@ public JsonElement toJson()\n         if (this.realisticCollision) object.addProperty(\"realisticCollision\", true);\n         if (this.entityCollision) object.addProperty(\"entityCollision\", true);\n         if (this.momentum) object.addProperty(\"momentum\", true);\n+        if (this.realisticCollisionDrag) object.addProperty(\"realistic_collision_drag\", true);\n         if (this.collisionDrag != 0) object.addProperty(\"collision_drag\", this.collisionDrag);\n         if (this.bounciness != 1) object.addProperty(\"coefficient_of_restitution\", this.bounciness);\n         if (this.randomBounciness != 0) object.addProperty(\"bounciness_randomness\", this.randomBounciness);\n@@ -184,6 +187,8 @@ public JsonElement toJson()\n     @Override\n     public void update(BedrockEmitter emitter, BedrockParticle particle)\n     {\n+        particle.realisticCollisionDrag = this.realisticCollisionDrag;\n+\n         if (emitter.world == null)\n         {\n             return;\n@@ -219,6 +224,7 @@ public void update(BedrockEmitter emitter, BedrockParticle particle)\n \n             List<Entity> entities = emitter.world.getEntitiesWithinAABB(Entity.class, aabb.expand(x, y, z));\n             HashMap<Entity, AxisAlignedBB> entityAABBs = new HashMap<Entity, AxisAlignedBB>();\n+            HashMap<Entity, CollisionOffset> staticEntityAABBs = new HashMap<>(); //for newtons first law\n             /* for own hitbox implementation: check for hitbox expanded for the previous position - prevent fast moving tunneling */\n             List<AxisAlignedBB> list = emitter.world.getCollisionBoxes(null, aabb.expand(x, y, z));\n \n@@ -229,7 +235,6 @@ public void update(BedrockEmitter emitter, BedrockParticle particle)\n                     AxisAlignedBB aabb2 = aabb;\n                     AxisAlignedBB entityAABB = entity.getEntityBoundingBox();\n \n-\n                     double y2 = y, x2 = x, z2 = z;\n \n                     y2 = entityAABB.calculateYOffset(aabb2, y2);\n@@ -241,17 +246,20 @@ public void update(BedrockEmitter emitter, BedrockParticle particle)\n                     z2 = entityAABB.calculateZOffset(aabb2, z2);\n                     aabb2 = aabb2.offset(0.0D, 0.0D, z2);\n \n-                    Vector3f speedEntity = new Vector3f((float) (entity.posX - entity.prevPosX), (float) (entity.posY - entity.prevPosY), (float) (entity.posZ - entity.prevPosZ));\n-\n-                    if (this.momentum && this.entityCollision)\n+                    if (d0 == y2 && origX == x2 && origZ == z2)\n                     {\n-                        particle.speed.x += 2 * speedEntity.x;\n-                        particle.speed.y += 2 * speedEntity.y;\n-                        particle.speed.z += 2 * speedEntity.z;\n+                        entityAABBs.put(entity, entityAABB); //Note to myself: maybe start already here with collision response?\n                     }\n+                    else\n+                    {\n+                        list.add(entityAABB);\n+                        staticEntityAABBs.put(entity, new CollisionOffset(entityAABB, x2, y2, z2));\n \n-                    if (d0 == y2 && origX == x2 && origZ == z2) entityAABBs.put(entity, entityAABB);\n-                    else list.add(entityAABB);\n+                        if(this.momentum && d0 == y2)\n+                        {\n+                            momentum(particle,entity);\n+                        }\n+                    }\n                 }\n             }\n \n@@ -271,14 +279,42 @@ public void update(BedrockEmitter emitter, BedrockParticle particle)\n                 {\n                     if (d0 < y) now.y = aabb.minY;\n                     else now.y = aabb.maxY;\n+\n                     now.y += d0 < y ? r : -r;\n+\n                     collisionHandler(particle, emitter, EnumFacing.Axis.Y, now, prev);\n+\n+                    /* here comes inertia */\n+                    /* remove unecessary elements from collisionTime*/\n+                    particle.entityCollisionTime.keySet().retainAll(staticEntityAABBs.keySet());\n+\n+                    for(HashMap.Entry<Entity, CollisionOffset> entry : staticEntityAABBs.entrySet())\n+                    {\n+                        CollisionOffset offsetData2 = entry.getValue();\n+                        AxisAlignedBB entityAABB = offsetData2.aabb;\n+                        Entity collidingEntity = entry.getKey();\n+\n+                        if (d0 != offsetData2.y && origX == offsetData2.x && origZ == offsetData2.z)\n+                        {\n+                            inertia(particle, collidingEntity, now);\n+                        }\n+\n+                        if(particle.entityCollisionTime.containsKey(collidingEntity))\n+                        {\n+                            particle.entityCollisionTime.get(collidingEntity).y = particle.age;\n+                        }\n+                        else\n+                        {\n+                            particle.entityCollisionTime.put(entry.getKey(), new Vector3f(-1F, particle.age, -1F));\n+                        }\n+                    }\n                 }\n \n                 if (origX != x)\n                 {\n                     if (origX < x) now.x = aabb.minX;\n                     else now.x = aabb.maxX;\n+\n                     now.x += origX < x ? r : -r;\n \n                     collisionHandler(particle, emitter, EnumFacing.Axis.X, now, prev);\n@@ -288,24 +324,24 @@ public void update(BedrockEmitter emitter, BedrockParticle particle)\n                 {\n                     if (origZ < z) now.z = aabb.minZ;\n                     else now.z = aabb.maxZ;\n+\n                     now.z += origZ < z ? r : -r;\n \n                     collisionHandler(particle, emitter, EnumFacing.Axis.Z, now, prev);\n                 }\n \n                 particle.position.set(now);\n \n-                /* only apply drag when speed is almost not zero and randombounciness and realisticCollision are off\n-                 * prevent particles from accelerating away when randomBounciness is active */\n-                if (!((this.randomBounciness != 0 || this.realisticCollision) && Math.round(particle.speed.length()) == 0))\n-                {\n-                    particle.dragFactor += this.collisionDrag;\n-                }\n+                drag(particle);\n+            }\n+            else if(entityAABBs.isEmpty() && this.realisticCollisionDrag) //no collision - reset collision drag\n+            {\n+                particle.dragFactor = 0;\n             }\n \n+\n             for (HashMap.Entry<Entity, AxisAlignedBB> entry : entityAABBs.entrySet())\n             {\n-\n                 AxisAlignedBB entityAABB = entry.getValue();\n                 Entity entity = entry.getKey();\n \n@@ -331,6 +367,7 @@ public void update(BedrockEmitter emitter, BedrockParticle particle)\n                 }\n \n                 Vector3d frac = intersect(ray, particle.getGlobalPosition(emitter), entityAABB);\n+\n                 if (frac != null)\n                 {\n                     particle.position.add(frac);\n@@ -355,6 +392,11 @@ public void update(BedrockEmitter emitter, BedrockParticle particle)\n                     }\n                 }\n             }\n+\n+            if(!entityAABBs.isEmpty())\n+            {\n+                drag(particle);\n+            }\n         }\n     }\n \n@@ -399,16 +441,27 @@ public void entityCollision(BedrockParticle particle, BedrockEmitter emitter, En\n         Vector3f entitySpeed = new Vector3f((float) (entity.posX - entity.prevPosX), (float) (entity.posY - entity.prevPosY), (float) (entity.posZ - entity.prevPosZ));\n         Vector3d entityPosition = new Vector3d(entity.posX, entity.posY,entity.posZ);\n \n+        if(this.momentum)\n+        {\n+            momentum(particle,entity);\n+        }\n+\n         /* collisionTime should be not changed - otherwise the particles will stop when moving against moving entites */\n         float tmpTime = getComponent(particle.collisionTime, component);\n         double delta = getComponent(particle.position, component) - getComponent(entityPosition, component);\n+\n         setComponent(particle.position, component, getComponent(particle.position, component) + (delta > 0 ? this.radius : -this.radius));\n         \n         collisionHandler(particle, emitter, component, particle.position, prev);\n \n         /* collisionTime should not change or otherwise particles will lose their speed although they should be reflected */\n         setComponent(particle.collisionTime, component, tmpTime);\n \n+        if (delta > 0 && component == EnumFacing.Axis.Y) //particle is above\n+        {\n+            inertia(particle, entity, null);\n+        }\n+\n         /* particle speed is always switched (realistcCollision==true), as it always collides with the entity, but it should only have one correct direction */\n         if (getComponent(particle.speed, component) > 0)\n         {\n@@ -420,6 +473,7 @@ else if (getComponent(particle.speed, component) < 0)\n         }\n \n         /* otherwise particles would stick on the body and get reflected when entity stops */\n+        /* note to myself: when particle lies on top and you fly up it floats weirdly - need to redo this system a little bit*/\n         setComponent(particle.position, component, getComponent(particle.position, component) + getComponent(particle.speed, component) / 20F);\n     }\n \n@@ -478,6 +532,78 @@ else if (collisionTime == (particle.age - 1))\n         setComponent(particle.collisionTime, component, particle.age);\n     }\n \n+    public void inertia(BedrockParticle particle, Entity entity, @Nullable Vector3d now)\n+    {\n+        if(this.collisionDrag==0)\n+        {\n+            return;\n+        }\n+\n+        Vector3d entitySpeed = new Vector3d((entity.posX - entity.prevPosX), (entity.posY - entity.prevPosY), (entity.posZ - entity.prevPosZ));\n+\n+        double prevPrevPosX = EntityTransformationUtils.getPrevPrevPosX(entity);\n+        double prevPrevPosY = EntityTransformationUtils.getPrevPrevPosY(entity);\n+        double prevPrevPosZ = EntityTransformationUtils.getPrevPrevPosZ(entity);\n+\n+        Vector3d prevEntitySpeed = new Vector3d(entity.prevPosX-prevPrevPosX, entity.prevPosY-prevPrevPosY, entity.prevPosZ-prevPrevPosZ);\n+\n+        /*if(Math.round((prevEntitySpeed.x-entitySpeed.x)*1000D) != 0 || Math.round((prevEntitySpeed.y-entitySpeed.y)*1000D) != 0 || Math.round((prevEntitySpeed.z-entitySpeed.z)*1000D) != 0)\n+        {\n+            particle.dragFactor = 0;\n+        }*/\n+\n+        /* for first collision from the inertial system of the particle it is acceleration from zero to current velocity */\n+        if(!particle.entityCollisionTime.containsKey(entity))\n+        {\n+            prevEntitySpeed.scale(0);\n+        }\n+        else\n+        {\n+            /* stick the particle on top of the entity */\n+            particle.offset.x = entitySpeed.x;\n+            particle.offset.z = entitySpeed.z;\n+\n+            if(now==null)\n+            {\n+                particle.position.x += entitySpeed.x;\n+                particle.position.z += entitySpeed.z;\n+            }\n+            else\n+            {\n+                now.x += entitySpeed.x;\n+                now.z += entitySpeed.z;\n+            }\n+        }\n+\n+        particle.speed.x += Math.round((prevEntitySpeed.x-entitySpeed.x)*1000D)/250D; //scale it up so it gets more noticable\n+        particle.speed.y += Math.round((prevEntitySpeed.y-entitySpeed.y)*1000D)/250D;\n+        particle.speed.z += Math.round((prevEntitySpeed.z-entitySpeed.z)*1000D)/250D;\n+    }\n+\n+    public void momentum(BedrockParticle particle, Entity entity)\n+    {\n+        particle.speed.x += 2 * (entity.posX - entity.prevPosX);\n+        particle.speed.y += 2 * (entity.posY - entity.prevPosY);\n+        particle.speed.z += 2 * (entity.posZ - entity.prevPosZ);\n+    }\n+\n+    public void drag(BedrockParticle particle)\n+    {\n+        /* only apply drag when speed is almost not zero and randombounciness and realisticCollision are off\n+         * prevent particles from accelerating away when randomBounciness is active */\n+        if (!((this.randomBounciness != 0 || this.realisticCollision) && Math.round(particle.speed.x*10000) == 0 && Math.round(particle.speed.y*10000) == 0 && Math.round(particle.speed.z*10000) == 0))\n+        {\n+            if(this.realisticCollisionDrag)\n+            {\n+                particle.dragFactor = 3*this.collisionDrag;\n+            }\n+            else\n+            {\n+                particle.dragFactor += this.collisionDrag;\n+            }\n+        }\n+    }\n+\n     public Vector3f damping(Vector3f vector)\n     {\n         float random = (float) (this.randomDamp * (Math.random() * 2 - 1));\n@@ -498,7 +624,6 @@ public void splitParticle(BedrockParticle particle, BedrockEmitter emitter, Enum\n             splitParticle.position.set(now);\n             splitParticle.prevPosition.set(prev);\n \n-            /* Mh is this necessary? */\n             splitParticle.acceleration.set(particle.acceleration);\n             splitParticle.accelerationFactor.set(particle.accelerationFactor);\n             splitParticle.drag = particle.drag;\n@@ -508,6 +633,7 @@ public void splitParticle(BedrockParticle particle, BedrockEmitter emitter, Enum\n             splitParticle.expirationDelay = particle.expirationDelay;\n             splitParticle.expireAge = particle.expireAge;\n             splitParticle.firstCollision = particle.firstCollision;\n+            splitParticle.realisticCollisionDrag = particle.realisticCollisionDrag;\n \n             splitParticle.age = particle.age;\n \n@@ -660,11 +786,13 @@ public Vector3d intersect(Vector3f ray, Vector3d orig, AxisAlignedBB aabb)\n         return ray1;\n     }\n \n-    /*\n+    /**\n      * @param aabb AxisAlignedBoundingBox of the main aabb\n      * @param list List of AxisAlignedBoundingBoxs of the targets\n-     * @param xyz origins\n-     * @return Object Array {aabb, x, y, z}\n+     * @param x origin\n+     * @param y origin\n+     * @param z origin\n+     * @return CollisionOffset which includes aabb, x, y, z\n      */\n     public CollisionOffset calculateOffsets(AxisAlignedBB aabb, List<AxisAlignedBB> list, double x, double y, double z)\n     {\n@@ -689,7 +817,7 @@ public CollisionOffset calculateOffsets(AxisAlignedBB aabb, List<AxisAlignedBB>\n \n         aabb = aabb.offset(0.0D, 0.0D, z);\n \n-        return OFFSET.set(aabb, x, y, z);\n+        return new CollisionOffset(aabb, x, y, z);\n     }\n \n     @Override\n@@ -698,21 +826,19 @@ public int getSortingIndex()\n         return 50;\n     }\n \n-    public static class CollisionOffset\n+    public class CollisionOffset\n     {\n         public AxisAlignedBB aabb;\n         public double x;\n         public double y;\n         public double z;\n \n-        public CollisionOffset set(AxisAlignedBB aabb, double x, double y, double z)\n+        public CollisionOffset(AxisAlignedBB aabb, double x, double y, double z)\n         {\n             this.aabb = aabb;\n             this.x = x;\n             this.y = y;\n             this.z = z;\n-\n-            return this;\n         }\n     }\n }"
  },
  {
    "sha": "f1c655c0293138aa8e5a8fc1ac7016e9166724b9",
    "filename": "src/main/java/mchorse/blockbuster/client/particles/emitter/BedrockParticle.java",
    "status": "modified",
    "additions": 63,
    "deletions": 13,
    "changes": 76,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/particles/emitter/BedrockParticle.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/client/particles/emitter/BedrockParticle.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/client/particles/emitter/BedrockParticle.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -1,8 +1,12 @@\n package mchorse.blockbuster.client.particles.emitter;\n \n+import mchorse.blockbuster.client.particles.components.motion.BedrockComponentMotionCollision;\n+import net.minecraft.entity.Entity;\n+\n import javax.vecmath.Matrix3f;\n import javax.vecmath.Vector3d;\n import javax.vecmath.Vector3f;\n+import java.util.HashMap;\n \n public class BedrockParticle\n {\n@@ -23,7 +27,9 @@\n     public boolean relativePosition;\n     public boolean relativeRotation;\n     public boolean relativeDirection;\n+    public boolean relativeScale;\n     public boolean relativeAcceleration;\n+    public boolean realisticCollisionDrag;\n     /* Works best with relativeDirection */\n     public boolean gravity;\n     public boolean manual;\n@@ -36,6 +42,7 @@\n      * I think this probably never happens in practice\n      */\n     public Vector3f collisionTime = new Vector3f(-2f, -2f,-2f);\n+    public HashMap<Entity, Vector3f> entityCollisionTime = new HashMap<>();\n     public boolean collisionTexture;\n     public boolean collisionTinting;\n     public int bounces;\n@@ -54,6 +61,8 @@\n     public float rotationAcceleration;\n     public float rotationDrag;\n \n+    /* for transforming into intertial systems (currently just used for inertia)*/\n+    public Vector3d offset = new Vector3d();\n     /* Position */\n     public Vector3d position = new Vector3d();\n     public Vector3d initialPosition = new Vector3d();\n@@ -137,6 +146,31 @@ public void update(BedrockEmitter emitter)\n \n         if (!this.manual)\n         {\n+            //this.position.add(this.offset);\n+\n+            if(this.realisticCollisionDrag && Math.round(this.speed.x*10000) == 0 && Math.round(this.speed.y*10000) == 0 && Math.round(this.speed.z*10000) == 0)\n+            {\n+                this.dragFactor = 0;\n+                this.speed.scale(0);\n+            }\n+\n+            /* lazy fix for transforming from moving intertial system back to global space */\n+            if(this.entityCollisionTime.isEmpty())\n+            {\n+                transformOffsetToGlobal();\n+            }\n+            else\n+            {\n+                for(HashMap.Entry<Entity, Vector3f> entry : this.entityCollisionTime.entrySet())\n+                {\n+                    if(entry.getValue().y!=this.age)\n+                    {\n+                        transformOffsetToGlobal();\n+                    }\n+                }\n+            }\n+\n+\n             float rotationAcceleration = this.rotationAcceleration / 20F -this.rotationDrag * this.rotationVelocity;\n             this.rotationVelocity += rotationAcceleration / 20F;\n             this.rotation = this.initialRotation + this.rotationVelocity * this.age;\n@@ -152,31 +186,32 @@ public void update(BedrockEmitter emitter)\n                 emitter.rotation.transform(this.acceleration);\n             }\n             \n-            Vector3f vec = new Vector3f(this.speed);\n-            vec.scale(-(this.drag + this.dragFactor));\n-            \n+            Vector3f drag = new Vector3f(this.speed);\n+\n+            drag.scale(-(this.drag + this.dragFactor));\n+\n             if (this.gravity)\n             {\n                 this.acceleration.y -= 9.81;\n             }\n-            \n-            this.acceleration.add(vec);\n+\n+            this.acceleration.add(drag);\n             this.acceleration.scale(1 / 20F);\n             this.speed.add(this.acceleration);\n \n-            vec.set(this.speed);\n-            vec.x *= this.accelerationFactor.x;\n-            vec.y *= this.accelerationFactor.y;\n-            vec.z *= this.accelerationFactor.z;\n+            Vector3f speed0 = new Vector3f(this.speed);\n+            speed0.x *= this.accelerationFactor.x;\n+            speed0.y *= this.accelerationFactor.y;\n+            speed0.z *= this.accelerationFactor.z;\n \n             if (this.relativePosition || this.relativeRotation)\n             {\n-                this.matrix.transform(vec);\n+                this.matrix.transform(speed0);\n             }\n             \n-            this.position.x += vec.x / 20F;\n-            this.position.y += vec.y / 20F;\n-            this.position.z += vec.z / 20F;\n+            this.position.x += speed0.x / 20F;\n+            this.position.y += speed0.y / 20F;\n+            this.position.z += speed0.z / 20F;\n         }\n \n         if (this.lifetime >= 0 &&\n@@ -207,4 +242,19 @@ else if (this.relativeRotation)\n             this.matrix.set(emitter.rotation);\n         }\n     }\n+\n+    /**\n+     * This method adds the offset to the speed to transform from a moving inertial system to the global space\n+     * (especially for inertia)\n+     */\n+    public void transformOffsetToGlobal()\n+    {\n+        this.offset.scale(6); //scale it up so it gets more noticeable (artistic choice)\n+\n+        this.speed.x += this.offset.x;\n+        this.speed.y += this.offset.y;\n+        this.speed.z += this.offset.z;\n+\n+        this.offset.scale(0);\n+    }\n }"
  },
  {
    "sha": "4e07c303266278e24cda4b8d44a1cb87aa1f1133",
    "filename": "src/main/java/mchorse/blockbuster/core/BBCoreClassTransformer.java",
    "status": "modified",
    "additions": 16,
    "deletions": 4,
    "changes": 20,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/core/BBCoreClassTransformer.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/core/BBCoreClassTransformer.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/core/BBCoreClassTransformer.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -1,10 +1,8 @@\n package mchorse.blockbuster.core;\n \n-import mchorse.blockbuster.core.transformers.EntityRendererTransformer;\n-import mchorse.blockbuster.core.transformers.RenderGlobalTransformer;\n-import mchorse.blockbuster.core.transformers.RenderItemTransformer;\n-import mchorse.blockbuster.core.transformers.WorldTransformer;\n+import mchorse.blockbuster.core.transformers.*;\n import mchorse.blockbuster.utils.mclib.coremod.CoreClassTransformer;\n+import net.minecraft.entity.Entity;\n import org.objectweb.asm.tree.AbstractInsnNode;\n import org.objectweb.asm.tree.FieldInsnNode;\n import org.objectweb.asm.tree.InsnList;\n@@ -21,6 +19,8 @@\n     private RenderGlobalTransformer render = new RenderGlobalTransformer();\n     private EntityRendererTransformer entityRenderer = new EntityRendererTransformer();\n     private RenderItemTransformer renderItem = new RenderItemTransformer();\n+    private EntityTransformer entity = new EntityTransformer();\n+    private EntityTransformationUtilsTransformer entityTransformationUtils = new EntityTransformationUtilsTransformer();\n \n     @Override\n     public byte[] transform(String name, String transformedName, byte[] basicClass)\n@@ -37,6 +37,18 @@ else if (checkName(name, \"buy\", \"net.minecraft.client.renderer.RenderGlobal\"))\n \n             return this.render.transform(name, basicClass);\n         }\n+        else if (checkName(name, \"vg\", \"net.minecraft.entity.Entity\"))\n+        {\n+            System.out.println(\"BBCoreMod: Transforming Entity class (\" + name + \")\");\n+\n+            return this.entity.transform(name, basicClass);\n+        }\n+        else if (name.equals(\"mchorse.blockbuster.utils.EntityTransformationUtils\"))\n+        {\n+            System.out.println(\"BBCoreMod: Transforming EntityTransformationUtils class (\" + name + \")\");\n+\n+            return this.entityTransformationUtils.transform(name, basicClass);\n+        }\n         else if (checkName(name, \"buq\", \"net.minecraft.client.renderer.EntityRenderer\"))\n         {\n             System.out.println(\"BBCoreMod: Transforming EntityRenderer class (\" + name + \")\");"
  },
  {
    "sha": "97c7e3ba29b54d75c1a1e7796ec01f99faded4fc",
    "filename": "src/main/java/mchorse/blockbuster/core/transformers/EntityTransformationUtilsTransformer.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/core/transformers/EntityTransformationUtilsTransformer.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/core/transformers/EntityTransformationUtilsTransformer.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/core/transformers/EntityTransformationUtilsTransformer.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -0,0 +1,69 @@\n+package mchorse.blockbuster.core.transformers;\n+\n+import mchorse.blockbuster.utils.mclib.coremod.ClassTransformer;\n+import mchorse.blockbuster.utils.mclib.coremod.CoreClassTransformer;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.tree.*;\n+\n+import java.util.Iterator;\n+\n+public class EntityTransformationUtilsTransformer extends ClassTransformer\n+{\n+    @Override\n+    public void process(String s, ClassNode node)\n+    {\n+        for (MethodNode method : node.methods)\n+        {\n+            String entityDesc = \"Lnet/minecraft/entity/Entity;\";\n+\n+            if (method.name.equals(\"getPrevPrevPosX\") && method.desc.equals(\"(\"+entityDesc+\")D\"))\n+            {\n+                this.processGetPrevPrevPos(method, \"X\");\n+            }\n+            else if (method.name.equals(\"getPrevPrevPosY\") && method.desc.equals(\"(\"+entityDesc+\")D\"))\n+            {\n+                this.processGetPrevPrevPos(method, \"Y\");\n+            }\n+            else if (method.name.equals(\"getPrevPrevPosZ\") && method.desc.equals(\"(\"+entityDesc+\")D\"))\n+            {\n+                this.processGetPrevPrevPos(method, \"Z\");\n+            }\n+        }\n+\n+        System.out.println(\"BBCoreMod: successfully patched EntityTransformationUtils!\");\n+    }\n+\n+    public void processGetPrevPrevPos(MethodNode method, String axis)\n+    {\n+        Iterator<AbstractInsnNode> it = method.instructions.iterator();\n+        AbstractInsnNode target = null;\n+        int index = -1;\n+\n+        while (it.hasNext())\n+        {\n+            index++;\n+            AbstractInsnNode node = it.next();\n+\n+            if(node instanceof InsnNode)\n+            {\n+                if(node.getOpcode() == Opcodes.DCONST_0)\n+                {\n+                    target = node;\n+\n+                    break;\n+                }\n+            }\n+        }\n+\n+        method.instructions.remove(target);\n+\n+        target =  method.instructions.get(index-1);\n+        InsnList list = new InsnList();\n+\n+        list.add(new VarInsnNode(Opcodes.ALOAD, 0));\n+        list.add(new FieldInsnNode(Opcodes.GETFIELD, CoreClassTransformer.get(\"vg\", \"net/minecraft/entity/Entity\"), \"prevPrevPos\"+axis, \"D\"));\n+        method.instructions.insert(target, list);\n+\n+        System.out.println(\"BBCoreMod: successfully patched getPrevPrevPos\"+axis+\"!\");\n+    }\n+}"
  },
  {
    "sha": "6ab785d14db8054c2fda9f0f293b4b54d2b7b1a7",
    "filename": "src/main/java/mchorse/blockbuster/core/transformers/EntityTransformer.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/core/transformers/EntityTransformer.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/core/transformers/EntityTransformer.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/core/transformers/EntityTransformer.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -0,0 +1,72 @@\n+package mchorse.blockbuster.core.transformers;\n+\n+import mchorse.blockbuster.utils.mclib.coremod.ClassTransformer;\n+import mchorse.blockbuster.utils.mclib.coremod.CoreClassTransformer;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.tree.ClassNode;\n+import org.objectweb.asm.tree.FieldNode;\n+import org.objectweb.asm.tree.FieldInsnNode;\n+import org.objectweb.asm.tree.InsnList;\n+import org.objectweb.asm.tree.MethodNode;\n+import org.objectweb.asm.tree.VarInsnNode;\n+\n+/**\n+ * This patches the entity to save the position before the previous position.\n+ * The reason for this is to be able to calculate acceleration - the difference of previous velocity and current velocity\n+ * @author Christian F. (known as Chryfi)\n+ */\n+\n+public class EntityTransformer extends ClassTransformer\n+{\n+\n+    @Override\n+    public void process(String s, ClassNode node)\n+    {\n+        FieldNode prevPrevPosX = new FieldNode(Opcodes.ASM4, Opcodes.ACC_PUBLIC, \"prevPrevPosX\", \"D\", null, null);\n+        FieldNode prevPrevPosY = new FieldNode(Opcodes.ASM4, Opcodes.ACC_PUBLIC, \"prevPrevPosY\", \"D\", null, null);\n+        FieldNode prevPrevPosZ = new FieldNode(Opcodes.ASM4, Opcodes.ACC_PUBLIC, \"prevPrevPosZ\", \"D\", null, null);\n+        \n+        node.fields.add(prevPrevPosX);\n+        node.fields.add(prevPrevPosY);\n+        node.fields.add(prevPrevPosZ);\n+\n+        for (MethodNode method : node.methods)\n+        {\n+            String methodName = this.checkName(method, \"Y\", \"()V\", \"onEntityUpdate\", \"()V\");\n+\n+            if (methodName != null)\n+            {\n+                this.processOnEntityUpdate(method);\n+\n+                break;\n+            }\n+        }\n+        \n+        System.out.println(\"BBCoreMod: successfully patched Entities!\");\n+    }\n+\n+    public void processOnEntityUpdate(MethodNode method)\n+    {\n+        InsnList list = new InsnList();\n+        String entity = CoreClassTransformer.get(\"vg\", \"net/minecraft/entity/Entity\");\n+        String prevPosX = CoreClassTransformer.get(\"m\", \"prevPosX\");\n+        String prevPosY = CoreClassTransformer.get(\"n\", \"prevPosY\");\n+        String prevPosZ = CoreClassTransformer.get(\"o\", \"prevPosZ\");\n+\n+        buildFieldAssignmentInsn(list, entity, prevPosX, \"prevPrevPosX\");\n+        buildFieldAssignmentInsn(list, entity, prevPosY, \"prevPrevPosY\");\n+        buildFieldAssignmentInsn(list, entity, prevPosZ, \"prevPrevPosZ\");\n+\n+        method.instructions.insert(this.getFirstLabel(method), list);\n+\n+        System.out.println(\"BBCoreMod: successfully patched onEntityUpdate!\");\n+    }\n+\n+    public void buildFieldAssignmentInsn(InsnList list, String owner, String get, String put)\n+    {\n+        list.add(new VarInsnNode(Opcodes.ALOAD, 0));\n+        list.add(new VarInsnNode(Opcodes.ALOAD, 0));\n+        list.add(new FieldInsnNode(Opcodes.GETFIELD, owner, get, \"D\"));\n+        list.add(new FieldInsnNode(Opcodes.PUTFIELD, owner, put, \"D\"));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "90b2924f3b5e80d13bbcce06e87e34c211068a1b",
    "filename": "src/main/java/mchorse/blockbuster/utils/EntityTransformationUtils.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/utils/EntityTransformationUtils.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster/utils/EntityTransformationUtils.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster/utils/EntityTransformationUtils.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -0,0 +1,27 @@\n+package mchorse.blockbuster.utils;\n+\n+import net.minecraft.entity.Entity;\n+\n+/**\n+ * This is a utils class to avoid reflection to get asm injected variables of entity class.\n+ */\n+\n+public class EntityTransformationUtils\n+{\n+    /* LEAVE THE RETURN TYPES 0 or the core asm transformation will fail!*/\n+\n+    public static double getPrevPrevPosX(Entity entity)\n+    {\n+        return 0;\n+    }\n+\n+    public static double getPrevPrevPosY(Entity entity)\n+    {\n+        return 0;\n+    }\n+\n+    public static double getPrevPrevPosZ(Entity entity)\n+    {\n+        return 0;\n+    }\n+}"
  },
  {
    "sha": "db232f7491bba9b7fbd779227fe77443e07a9581",
    "filename": "src/main/java/mchorse/blockbuster_pack/morphs/SnowstormMorph.java",
    "status": "modified",
    "additions": 22,
    "deletions": 3,
    "changes": 25,
    "blob_url": "https://github.com/mchorse/blockbuster/blob/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster_pack/morphs/SnowstormMorph.java",
    "raw_url": "https://github.com/mchorse/blockbuster/raw/8e8a1169bd2f6df68008a89e88418a5edc2b429b/src/main/java/mchorse/blockbuster_pack/morphs/SnowstormMorph.java",
    "contents_url": "https://api.github.com/repos/mchorse/blockbuster/contents/src/main/java/mchorse/blockbuster_pack/morphs/SnowstormMorph.java?ref=8e8a1169bd2f6df68008a89e88418a5edc2b429b",
    "patch": "@@ -16,9 +16,7 @@\n import net.minecraftforge.fml.relauncher.Side;\n import net.minecraftforge.fml.relauncher.SideOnly;\n \n-import javax.vecmath.Matrix4f;\n-import javax.vecmath.Vector3f;\n-import javax.vecmath.Vector4f;\n+import javax.vecmath.*;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -200,6 +198,27 @@ public void render(EntityLivingBase target, double x, double y, double z, float\n             emitter.rotation.setRow(1, ay);\n             emitter.rotation.setRow(2, az);\n \n+            Matrix3d rotation = new Matrix3d(emitter.rotation);\n+            Matrix3d rotscale = new Matrix3d(parent.m00, parent.m01, parent.m02,\n+                                             parent.m10, parent.m11, parent.m12,\n+                                             parent.m20, parent.m21, parent.m22);\n+\n+            try\n+            {\n+                rotation.invert();\n+                rotscale.mul(rotation);\n+\n+                emitter.scale[0] = rotscale.m00;\n+                emitter.scale[1] = rotscale.m11;\n+                emitter.scale[2] = rotscale.m22;\n+            }\n+            catch(SingularMatrixException e)\n+            {\n+                emitter.scale[0] = 0;\n+                emitter.scale[1] = 0;\n+                emitter.scale[2] = 0;\n+            }\n+\n             Iterator<BedrockEmitter> it = this.getLastEmitters().iterator();\n \n             while (it.hasNext())"
  }
]
