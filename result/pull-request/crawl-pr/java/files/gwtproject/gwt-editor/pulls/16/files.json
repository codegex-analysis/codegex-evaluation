[
  {
    "sha": "624b1c6a8a1e73cc7182d5cf8b5d7aa85b5e06f0",
    "filename": "gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -31,7 +31,8 @@ public String getModuleName() {\n     return \"org.gwtproject.editor.EditorGwt2Test\";\n   }\n \n-  class AddressEditorWithErrors extends AddressEditor implements ValueAwareEditor<Address> {\n+  public static class AddressEditorWithErrors extends AddressEditor\n+      implements ValueAwareEditor<Address> {\n \n     private EditorDelegate<Address> delegate;\n \n@@ -52,7 +53,8 @@ public void setDelegate(EditorDelegate<Address> delegate) {\n     public void setValue(Address value) {}\n   }\n \n-  class AddressEditorReceivesErrors extends AddressEditor implements HasEditorErrors<Address> {\n+  public static class AddressEditorReceivesErrors extends AddressEditor\n+      implements HasEditorErrors<Address> {\n     List<EditorError> errors;\n \n     @Override\n@@ -64,7 +66,8 @@ public void showErrors(List<EditorError> errors) {\n     }\n   }\n \n-  class PersonEditorReceivesErrors extends PersonEditor implements HasEditorErrors<Person> {\n+  public static class PersonEditorReceivesErrors extends PersonEditor\n+      implements HasEditorErrors<Person> {\n     List<EditorError> errors;\n \n     @Override\n@@ -76,15 +79,15 @@ public void showErrors(List<EditorError> errors) {\n     }\n   }\n \n-  class Workgroup {\n+  public static class Workgroup {\n     List<Person> people = new ArrayList<Person>();\n \n     List<Person> getPeople() {\n       return people;\n     }\n   }\n \n-  class WorkgroupEditor implements HasEditorErrors<Workgroup> {\n+  public static class WorkgroupEditor implements HasEditorErrors<Workgroup> {\n     ListEditor<Person, PersonEditor> people =\n         ListEditor.of(\n             new EditorSource<PersonEditor>() {\n@@ -107,7 +110,7 @@ public void showErrors(List<EditorError> errors) {\n   @IsDriver\n   interface WorkgroupEditorDriver extends SimpleBeanEditorDriver<Workgroup, WorkgroupEditor> {}\n \n-  class WorkgroupNestedErrorsEditor implements HasEditorErrors<Workgroup> {\n+  public static class WorkgroupNestedErrorsEditor implements HasEditorErrors<Workgroup> {\n     ListEditor<Person, PersonEditorReceivesErrors> people =\n         ListEditor.of(\n             new EditorSource<PersonEditorReceivesErrors>() {"
  },
  {
    "sha": "103a5370fbd14808b469d87f0b361ae1fe85ecaa",
    "filename": "gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/PersonEditor.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -18,7 +18,7 @@\n import org.gwtproject.editor.client.adapters.SimpleEditor;\n \n /** Simple editor used by multiple tests. */\n-class PersonEditor implements Editor<Person> {\n+public class PersonEditor implements Editor<Person> {\n   public AddressEditor addressEditor = new AddressEditor();\n   public SimpleEditor<Long> localTime = SimpleEditor.of(System.currentTimeMillis());\n   public SimpleEditor<String> name = SimpleEditor.of(SimpleBeanEditorTest.UNINITIALIZED);"
  },
  {
    "sha": "292404037b9dea75ad11ef6f6dbaf3053f7a0411",
    "filename": "gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-gwt2-tests/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -295,7 +295,8 @@ public void setDelegate(EditorDelegate<T> delegate) {\n     }\n   }\n \n-  class ValueAwareAddressEditor extends AddressEditor implements ValueAwareEditor<Address> {\n+  public static class ValueAwareAddressEditor extends AddressEditor\n+      implements ValueAwareEditor<Address> {\n     int flushCalled;\n     int setDelegateCalled;\n     int setValueCalled;"
  },
  {
    "sha": "6b08fe028e8d158c121830ec771bf8d162718ef6",
    "filename": "gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -63,7 +63,7 @@ public void showErrors(List<EditorError> errors) {\n     }\n   }\n \n-  class PersonEditorReceivesErrors extends PersonEditor implements HasEditorErrors<Person> {\n+  public class PersonEditorReceivesErrors extends PersonEditor implements HasEditorErrors<Person> {\n     List<EditorError> errors;\n \n     @Override"
  },
  {
    "sha": "103a5370fbd14808b469d87f0b361ae1fe85ecaa",
    "filename": "gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/PersonEditor.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -18,7 +18,7 @@\n import org.gwtproject.editor.client.adapters.SimpleEditor;\n \n /** Simple editor used by multiple tests. */\n-class PersonEditor implements Editor<Person> {\n+public class PersonEditor implements Editor<Person> {\n   public AddressEditor addressEditor = new AddressEditor();\n   public SimpleEditor<Long> localTime = SimpleEditor.of(System.currentTimeMillis());\n   public SimpleEditor<String> name = SimpleEditor.of(SimpleBeanEditorTest.UNINITIALIZED);"
  },
  {
    "sha": "43a8abe066e3ca282cf0274bbc51a49488a14b6c",
    "filename": "gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-j2cl-tests/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -295,7 +295,7 @@ public void setDelegate(EditorDelegate<T> delegate) {\n     }\n   }\n \n-  class ValueAwareAddressEditor extends AddressEditor implements ValueAwareEditor<Address> {\n+  public class ValueAwareAddressEditor extends AddressEditor implements ValueAwareEditor<Address> {\n     int flushCalled;\n     int setDelegateCalled;\n     int setValueCalled;"
  },
  {
    "sha": "e1db23312b818782a8d4112d8d10627e3f7ace74",
    "filename": "gwt-editor-processor/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/pom.xml",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/pom.xml",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/pom.xml?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -49,8 +49,8 @@\n         <maven.compiler.source>1.8</maven.compiler.source>\n         <maven.compiler.target>1.8</maven.compiler.target>\n \n-        <auto.common.version>0.10</auto.common.version>\n-        <auto.service.version>1.0-rc6</auto.service.version>\n+        <auto.common.version>0.11</auto.common.version>\n+        <auto.service.version>1.0-rc7</auto.service.version>\n         <compile-testing.version>0.18</compile-testing.version>\n         <gwt.version>2.8.2</gwt.version>\n         <javapoet.version>1.12.1</javapoet.version>"
  },
  {
    "sha": "cbdb7bef46d70836e759d5f141625ed32bfc7e07",
    "filename": "gwt-editor-processor/src/main/java/org/gwtproject/editor/processor/DriverProcessor.java",
    "status": "modified",
    "additions": 26,
    "deletions": 10,
    "changes": 36,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/main/java/org/gwtproject/editor/processor/DriverProcessor.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/main/java/org/gwtproject/editor/processor/DriverProcessor.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/main/java/org/gwtproject/editor/processor/DriverProcessor.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -147,6 +147,14 @@ private void generate(TypeElement interfaceToImplement, EditorModel rootEditorMo\n     String pkgName = this.elements.getPackageOf(interfaceToImplement).getQualifiedName().toString();\n     String typeName = createNameFromEnclosedTypes(interfaceToImplement, \"_Impl\");\n \n+    String classNameToGenerate = pkgName + \".\" + typeName;\n+    // check, if typename is already generated ...\n+    if (this.generatedDelegates.contains(classNameToGenerate)) {\n+      // alreday generated ... nothing to do\n+      return;\n+    }\n+    this.generatedDelegates.add(classNameToGenerate);\n+\n     // impl accept(visitor) method\n     ParameterizedTypeName rootEdContextType =\n         ParameterizedTypeName.get(\n@@ -216,8 +224,8 @@ private void generate(TypeElement interfaceToImplement, EditorModel rootEditorMo\n       driverFile.writeTo(this.filer);\n     } catch (IOException e) {\n       this.createMessage(\n-          Diagnostic.Kind.WARNING,\n-          \"Exception: type >>\"\n+          Diagnostic.Kind.NOTE,\n+          \"type >>\"\n               + rootEditorModel.getEditorType().toString()\n               + \" << - trying to write: >>\"\n               + driverFile.packageName\n@@ -250,13 +258,13 @@ private ClassName getEditorDelegate(EditorModel editorModel, EditorProperty data\n             .getQualifiedName()\n             .toString();\n \n-    String delegateClassName = packageName + \".\" + delegateSimpleName;\n-    // check, if delegate is already generatd ...\n-    if (this.generatedDelegates.contains(delegateClassName)) {\n+    String classNameToGenerate = packageName + \".\" + delegateSimpleName;\n+    // check, if delegate is already generated ...\n+    if (this.generatedDelegates.contains(classNameToGenerate)) {\n       // alreday generated ... nothing to do\n       return ClassName.get(packageName, delegateSimpleName);\n     }\n-    this.generatedDelegates.add(delegateClassName);\n+    this.generatedDelegates.add(classNameToGenerate);\n \n     TypeName rawEditorType = ClassName.get(types.erasure(data.getEditorType()));\n \n@@ -403,8 +411,8 @@ private ClassName getEditorDelegate(EditorModel editorModel, EditorProperty data\n       delegateFile.writeTo(filer);\n     } catch (IOException e) {\n       this.createMessage(\n-          Diagnostic.Kind.WARNING,\n-          \"Exception: type >>\"\n+          Diagnostic.Kind.NOTE,\n+          \"type >>\"\n               + editorModel.getEditorType().toString()\n               + \" << - trying to write: >>\"\n               + delegateFile.packageName\n@@ -454,6 +462,14 @@ private ClassName getEditorContext(EditorProperty parent, EditorProperty data) {\n             .getQualifiedName()\n             .toString();\n \n+    String classNameToGenerate = packageName + \".\" + contextSimpleName;\n+    // check, if context is already generated ...\n+    if (this.generatedDelegates.contains(classNameToGenerate)) {\n+      // already generated ... nothing to do\n+      return ClassName.get(packageName, contextSimpleName);\n+    }\n+    this.generatedDelegates.add(classNameToGenerate);\n+\n     //    try {\n     TypeSpec.Builder contextTypeBuilder =\n         TypeSpec.classBuilder(contextSimpleName)\n@@ -548,8 +564,8 @@ private ClassName getEditorContext(EditorProperty parent, EditorProperty data) {\n       contextFile.writeTo(filer);\n     } catch (IOException e) {\n       this.createMessage(\n-          Diagnostic.Kind.WARNING,\n-          \"Exception: type >>\"\n+          Diagnostic.Kind.NOTE,\n+          \"type >>\"\n               + parent.getEditorType().toString()\n               + \" << - trying to write: >>\"\n               + contextFile.packageName"
  },
  {
    "sha": "2a1be9d1684d7c6638c172b8a95bdd3b28ef78ff",
    "filename": "gwt-editor-processor/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/EditorErrorTest.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -26,7 +26,8 @@\n \n /** Tests error propagation in generated code. */\n public class EditorErrorTest extends TestCase {\n-  class AddressEditorWithErrors extends AddressEditor implements ValueAwareEditor<Address> {\n+  public static class AddressEditorWithErrors extends AddressEditor\n+      implements ValueAwareEditor<Address> {\n \n     private EditorDelegate<Address> delegate;\n \n@@ -47,7 +48,8 @@ public void setDelegate(EditorDelegate<Address> delegate) {\n     public void setValue(Address value) {}\n   }\n \n-  class AddressEditorReceivesErrors extends AddressEditor implements HasEditorErrors<Address> {\n+  public static class AddressEditorReceivesErrors extends AddressEditor\n+      implements HasEditorErrors<Address> {\n     List<EditorError> errors;\n \n     @Override\n@@ -59,7 +61,8 @@ public void showErrors(List<EditorError> errors) {\n     }\n   }\n \n-  class PersonEditorReceivesErrors extends PersonEditor implements HasEditorErrors<Person> {\n+  public static class PersonEditorReceivesErrors extends PersonEditor\n+      implements HasEditorErrors<Person> {\n     List<EditorError> errors;\n \n     @Override\n@@ -71,15 +74,15 @@ public void showErrors(List<EditorError> errors) {\n     }\n   }\n \n-  class Workgroup {\n+  public static class Workgroup {\n     List<Person> people = new ArrayList<Person>();\n \n     List<Person> getPeople() {\n       return people;\n     }\n   }\n \n-  class WorkgroupEditor implements HasEditorErrors<Workgroup> {\n+  public static class WorkgroupEditor implements HasEditorErrors<Workgroup> {\n     ListEditor<Person, PersonEditor> people =\n         ListEditor.of(\n             new EditorSource<PersonEditor>() {\n@@ -102,7 +105,7 @@ public void showErrors(List<EditorError> errors) {\n   @IsDriver\n   interface WorkgroupEditorDriver extends SimpleBeanEditorDriver<Workgroup, WorkgroupEditor> {}\n \n-  class WorkgroupNestedErrorsEditor implements HasEditorErrors<Workgroup> {\n+  public static class WorkgroupNestedErrorsEditor implements HasEditorErrors<Workgroup> {\n     ListEditor<Person, PersonEditorReceivesErrors> people =\n         ListEditor.of(\n             new EditorSource<PersonEditorReceivesErrors>() {"
  },
  {
    "sha": "103a5370fbd14808b469d87f0b361ae1fe85ecaa",
    "filename": "gwt-editor-processor/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/PersonEditor.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/PersonEditor.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -18,7 +18,7 @@\n import org.gwtproject.editor.client.adapters.SimpleEditor;\n \n /** Simple editor used by multiple tests. */\n-class PersonEditor implements Editor<Person> {\n+public class PersonEditor implements Editor<Person> {\n   public AddressEditor addressEditor = new AddressEditor();\n   public SimpleEditor<Long> localTime = SimpleEditor.of(System.currentTimeMillis());\n   public SimpleEditor<String> name = SimpleEditor.of(SimpleBeanEditorTest.UNINITIALIZED);"
  },
  {
    "sha": "351220fb704b8607745d12081138b0ea194b47de",
    "filename": "gwt-editor-processor/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 22,
    "changes": 47,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/java/org/gwtproject/editor/client/SimpleBeanEditorTest.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -37,15 +37,15 @@ public LeafAddressEditor asEditor() {\n     }\n   }\n \n-  class AddressEditorPartOne implements Editor<Address> {\n+  public static class AddressEditorPartOne implements Editor<Address> {\n     SimpleEditor<String> city = SimpleEditor.of(UNINITIALIZED);\n   }\n \n-  class AddressEditorPartTwo implements Editor<Address> {\n+  public static class AddressEditorPartTwo implements Editor<Address> {\n     SimpleEditor<String> street = SimpleEditor.of(UNINITIALIZED);\n   }\n \n-  class AddressEditorView implements IsEditor<LeafAddressEditor> {\n+  public static class AddressEditorView implements IsEditor<LeafAddressEditor> {\n     LeafAddressEditor addressEditor = new LeafAddressEditor();\n \n     @Override\n@@ -54,7 +54,7 @@ public LeafAddressEditor asEditor() {\n     }\n   }\n \n-  static class DepartmentWithList extends Department {\n+  public static class DepartmentWithList extends Department {\n     List<Intern> interns = new ArrayList<Intern>();\n \n     public List<Intern> getInterns() {\n@@ -66,7 +66,7 @@ public void setInterns(List<Intern> interns) {\n     }\n   }\n \n-  static class DepartmentWithListEditor implements Editor<DepartmentWithList> {\n+  public static class DepartmentWithListEditor implements Editor<DepartmentWithList> {\n     PersonEditor manager = new PersonEditor();\n     ListEditor<Intern, PersonEditor> interns =\n         ListEditor.of(\n@@ -85,7 +85,7 @@ public PersonEditor create(int index) {\n   /**\n    * See <a href=\"http://code.google.com/p/google-web-toolkit/issues/detail?id=6016\" >issue 6016</a>\n    */\n-  static class EditorWithGenericSubEditors implements Editor<Department> {\n+  public static class EditorWithGenericSubEditors implements Editor<Department> {\n \n     PersonGenericEditor<Manager> manager = new PersonGenericEditor<Manager>();\n \n@@ -96,7 +96,7 @@ public PersonEditor create(int index) {\n   interface EditorWithGenericSubEditorsDriver\n       extends SimpleBeanEditorDriver<Department, EditorWithGenericSubEditors> {}\n \n-  class LeafAddressEditor extends AddressEditor implements LeafValueEditor<Address> {\n+  public static class LeafAddressEditor extends AddressEditor implements LeafValueEditor<Address> {\n     /*\n      * These two fields are used to ensure that getValue() and setValue() aren't\n      * called excessively.\n@@ -122,7 +122,7 @@ public void setValue(Address value) {\n   interface ListEditorDriver\n       extends SimpleBeanEditorDriver<List<String>, ListEditor<String, SimpleEditor<String>>> {}\n \n-  class PersonEditorWithAddressEditorView implements Editor<Person> {\n+  public static class PersonEditorWithAddressEditorView implements Editor<Person> {\n     AddressEditorView addressEditor = new AddressEditorView();\n     SimpleEditor<String> name = SimpleEditor.of(UNINITIALIZED);\n   }\n@@ -139,7 +139,7 @@ public void setValue(Address value) {\n   interface SampleEditorDriver extends SimpleBeanEditorDriver<Sample, SampleView> {}\n \n   /** A test for assigning the object associated with an editor to an immediate child editors. */\n-  class PersonEditorWithAliasedSubEditors implements Editor<Person> {\n+  public static class PersonEditorWithAliasedSubEditors implements Editor<Person> {\n     @Path(\"\")\n     PersonEditor e1 = new PersonEditor();\n \n@@ -160,7 +160,8 @@ public void setValue(Address value) {\n   interface PersonEditorWithCoAddressEditorViewDriver\n       extends SimpleBeanEditorDriver<Person, PersonEditorWithCoAddressEditorView> {}\n \n-  static class PersonEditorWithDelegate extends PersonEditor implements HasEditorDelegate<Person> {\n+  public static class PersonEditorWithDelegate extends PersonEditor\n+      implements HasEditorDelegate<Person> {\n     EditorDelegate<Person> delegate;\n \n     @Override\n@@ -173,7 +174,7 @@ public void setDelegate(EditorDelegate<Person> delegate) {\n   interface PersonEditorWithDelegateDriver\n       extends SimpleBeanEditorDriver<Person, PersonEditorWithDelegate> {}\n \n-  class PersonEditorWithLeafAddressEditor implements Editor<Person> {\n+  public static class PersonEditorWithLeafAddressEditor implements Editor<Person> {\n     LeafAddressEditor addressEditor = new LeafAddressEditor();\n     SimpleEditor<String> name = SimpleEditor.of(UNINITIALIZED);\n \n@@ -185,7 +186,7 @@ public void setDelegate(EditorDelegate<Person> delegate) {\n   interface PersonEditorWithLeafAddressEditorDriver\n       extends SimpleBeanEditorDriver<Person, PersonEditorWithLeafAddressEditor> {}\n \n-  class PersonEditorWithManagerNameWithDelegate implements Editor<Person> {\n+  public static class PersonEditorWithManagerNameWithDelegate implements Editor<Person> {\n     @Path(\"manager.name\")\n     SimpleEditorWithDelegate<String> managerName =\n         new SimpleEditorWithDelegate<String>(UNINITIALIZED);\n@@ -195,7 +196,7 @@ public void setDelegate(EditorDelegate<Person> delegate) {\n   interface PersonEditorWithManagerNameWithDelegateDriver\n       extends SimpleBeanEditorDriver<Person, PersonEditorWithManagerNameWithDelegate> {}\n \n-  class PersonEditorWithMultipleBindings implements Editor<Person> {\n+  public static class PersonEditorWithMultipleBindings implements Editor<Person> {\n     @Path(\"address\")\n     AddressEditorPartOne one = new AddressEditorPartOne();\n \n@@ -211,7 +212,7 @@ public void setDelegate(EditorDelegate<Person> delegate) {\n   interface PersonEditorWithOptionalAddressDriver\n       extends SimpleBeanEditorDriver<Person, PersonEditorWithOptionalAddressEditor> {}\n \n-  static class PersonEditorWithOptionalAddressEditor implements Editor<Person> {\n+  public static class PersonEditorWithOptionalAddressEditor implements Editor<Person> {\n     OptionalFieldEditor<Address, AddressEditor> address;\n     SimpleEditor<String> name = SimpleEditor.of(UNINITIALIZED);\n \n@@ -277,7 +278,8 @@ public ValueAwareAddressEditor create(int index) {\n   interface PersonWithListEditorDriver\n       extends SimpleBeanEditorDriver<PersonWithList, PersonWithListEditor> {}\n \n-  class SimpleEditorWithDelegate<T> extends SimpleEditor<T> implements HasEditorDelegate<T> {\n+  public static class SimpleEditorWithDelegate<T> extends SimpleEditor<T>\n+      implements HasEditorDelegate<T> {\n     EditorDelegate<T> delegate;\n \n     public SimpleEditorWithDelegate(T value) {\n@@ -290,7 +292,8 @@ public void setDelegate(EditorDelegate<T> delegate) {\n     }\n   }\n \n-  class ValueAwareAddressEditor extends AddressEditor implements ValueAwareEditor<Address> {\n+  public static class ValueAwareAddressEditor extends AddressEditor\n+      implements ValueAwareEditor<Address> {\n     int flushCalled;\n     int setDelegateCalled;\n     int setValueCalled;\n@@ -609,7 +612,7 @@ public void setIndex(SimpleEditor<String> editor, int index) {\n         rawData,\n         Arrays.asList(\n             editors.get(0).getValue(), editors.get(1).getValue(), editors.get(2).getValue()));\n-    assertEquals(editors, new ArrayList<SimpleEditor<String>>(positionMap.values()));\n+    assertEquals(editors, new ArrayList<>(positionMap.values()));\n \n     List<String> mutableList = editor.getList();\n     assertEquals(rawData, mutableList);\n@@ -628,15 +631,15 @@ public void setIndex(SimpleEditor<String> editor, int index) {\n     mutableList.add(\"quux\");\n     assertEquals(4, editors.size());\n     assertEquals(\"quux\", editors.get(3).getValue());\n-    assertEquals(editors, new ArrayList<SimpleEditor<String>>(positionMap.values()));\n+    assertEquals(editors, new ArrayList<>(positionMap.values()));\n \n     // Delete an element\n     SimpleEditor<String> expectedDisposed = editors.get(0);\n     mutableList.remove(0);\n     assertSame(expectedDisposed, disposed[0]);\n     assertEquals(3, editors.size());\n     assertEquals(\"quux\", editors.get(2).getValue());\n-    assertEquals(editors, new ArrayList<SimpleEditor<String>>(positionMap.values()));\n+    assertEquals(editors, new ArrayList<>(positionMap.values()));\n \n     // Change list outside editor: shouldn't impact editors\n     rawData.clear();\n@@ -648,7 +651,7 @@ public void setIndex(SimpleEditor<String> editor, int index) {\n         expectedList,\n         Arrays.asList(\n             editors.get(0).getValue(), editors.get(1).getValue(), editors.get(2).getValue()));\n-    assertEquals(editors, new ArrayList<SimpleEditor<String>>(positionMap.values()));\n+    assertEquals(editors, new ArrayList<>(positionMap.values()));\n \n     // Edit again: should reuse sub-editors and dispose unneeded ones\n     disposed[0] = null;\n@@ -813,7 +816,7 @@ public void testEditorWithParameterizedModel() {\n     TaggedItemAddressEditor editor = new TaggedItemAddressEditor();\n     driver.initialize(editor);\n \n-    TaggedItem<Address> taggedAddress = new TaggedItem<Address>();\n+    TaggedItem<Address> taggedAddress = new TaggedItem<>();\n     taggedAddress.setTag(\"tag1\");\n     taggedAddress.setItem(personAddress);\n     driver.edit(taggedAddress);\n@@ -833,7 +836,7 @@ public void testEditorWithParameterizedModel() {\n   }\n \n   @Override\n-  protected void setUp() throws Exception {\n+  protected void setUp() {\n     personAddress = new Address();\n     personAddress.city = \"City\";\n     personAddress.street = \"Street\";"
  },
  {
    "sha": "295317229b3f3dbb63fadc2752ef83ae818c2db3",
    "filename": "gwt-editor-processor/src/test/java/org/gwtproject/editor/processor/test/DriverProcessorTest.java",
    "status": "modified",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/java/org/gwtproject/editor/processor/test/DriverProcessorTest.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/java/org/gwtproject/editor/processor/test/DriverProcessorTest.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/java/org/gwtproject/editor/processor/test/DriverProcessorTest.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -241,4 +241,47 @@ public void testEditor07() {\n             JavaFileObjects.forResource(\n                 \"org/gwtproject/editor/processor/test07/result/TestEditor07_SimpleBeanEditorDelegate.java\"));\n   }\n+\n+  @Test\n+  public void testEditor08() {\n+    Compilation compilation =\n+        javac()\n+            .withProcessors(new DriverProcessor())\n+            .compile(\n+                Arrays.asList(\n+                    JavaFileObjects.forResource(\n+                        \"org/gwtproject/editor/processor/test08/TestEditor08.java\")));\n+    CompilationSubject.assertThat(compilation).succeeded();\n+    CompilationSubject.assertThat(compilation)\n+        .generatedSourceFile(\"org/gwtproject/editor/processor/test08/TestEditor08_Driver_Impl\")\n+        .hasSourceEquivalentTo(\n+            JavaFileObjects.forResource(\n+                \"org/gwtproject/editor/processor/test08/result/TestEditor08_Driver_Impl.java\"));\n+    CompilationSubject.assertThat(compilation)\n+        .generatedSourceFile(\"org/gwtproject/editor/processor/test08/TestEditor08_email_Context\")\n+        .hasSourceEquivalentTo(\n+            JavaFileObjects.forResource(\n+                \"org/gwtproject/editor/processor/test08/result/TestEditor08_email_Context.java\"));\n+    CompilationSubject.assertThat(compilation)\n+        .generatedSourceFile(\"org/gwtproject/editor/processor/test08/TestEditor08_name_Context\")\n+        .hasSourceEquivalentTo(\n+            JavaFileObjects.forResource(\n+                \"org/gwtproject/editor/processor/test08/result/TestEditor08_name_Context.java\"));\n+    CompilationSubject.assertThat(compilation)\n+        .generatedSourceFile(\"org/gwtproject/editor/processor/test08/TestEditor08_id_Context\")\n+        .hasSourceEquivalentTo(\n+            JavaFileObjects.forResource(\n+                \"org/gwtproject/editor/processor/test08/result/TestEditor08_id_Context.java\"));\n+    CompilationSubject.assertThat(compilation)\n+        .generatedSourceFile(\"org/gwtproject/editor/processor/test08/TestEditor08_phone_Context\")\n+        .hasSourceEquivalentTo(\n+            JavaFileObjects.forResource(\n+                \"org/gwtproject/editor/processor/test08/result/TestEditor08_phone_Context.java\"));\n+    CompilationSubject.assertThat(compilation)\n+        .generatedSourceFile(\n+            \"org/gwtproject/editor/processor/test08/TestEditor08_SimpleBeanEditorDelegate\")\n+        .hasSourceEquivalentTo(\n+            JavaFileObjects.forResource(\n+                \"org/gwtproject/editor/processor/test08/result/TestEditor08_SimpleBeanEditorDelegate.java\"));\n+  }\n }"
  },
  {
    "sha": "12de8f6086366d0544a89441890c02e6e19c9b90",
    "filename": "gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test07/result/TestEditor07_SimpleBeanEditorDelegate.java",
    "status": "modified",
    "additions": 16,
    "deletions": 16,
    "changes": 32,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test07/result/TestEditor07_SimpleBeanEditorDelegate.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test07/result/TestEditor07_SimpleBeanEditorDelegate.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test07/result/TestEditor07_SimpleBeanEditorDelegate.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -1,5 +1,4 @@\n package org.gwtproject.editor.processor.test07;\n-\n import java.lang.Object;\n import java.lang.Override;\n import java.lang.String;\n@@ -9,34 +8,35 @@\n import org.gwtproject.editor.processor.common.Model01Generic02Dto;\n \n public class TestEditor07_SimpleBeanEditorDelegate extends SimpleBeanEditorDelegate {\n+\n   private TestEditor07 editor;\n   private Model01Generic02Dto<String> object;\n-  \n-  @Override()\n+\n+  @Override\n   protected TestEditor07 getEditor() {\n     return editor;\n   }\n-  \n-  @Override()\n+\n+  @Override\n   protected void setEditor(Editor editor) {\n-    this.editor = (TestEditor07)editor;\n+    this.editor = (TestEditor07) editor;\n   }\n-  \n-  @Override()\n+\n+  @Override\n   public Model01Generic02Dto<String> getObject() {\n     return object;\n   }\n-  \n-  @Override()\n+\n+  @Override\n   protected void setObject(Object object) {\n-    this.object = (Model01Generic02Dto<String>)object;\n+    this.object = (Model01Generic02Dto<String>) object;\n   }\n-  \n-  @Override()\n+\n+  @Override\n   protected void initializeSubDelegates() {\n   }\n-  \n-  @Override()\n+\n+  @Override\n   public void accept(EditorVisitor visitor) {\n     {\n       TestEditor07_id_Context ctx = new TestEditor07_id_Context(getObject(), editor.id, appendPath(\"id\"));\n@@ -55,4 +55,4 @@ public void accept(EditorVisitor visitor) {\n       ctx.traverse(visitor, null);\n     }\n   }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "a3623dcd5537e0d9f437322b0b24295f09629df3",
    "filename": "gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/TestEditor08.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/TestEditor08.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/TestEditor08.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/TestEditor08.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -0,0 +1,31 @@\n+package org.gwtproject.editor.processor.test08;\n+\n+import org.gwtproject.editor.client.testing.FakeLeafValueEditorWithHasEditorDelegate;\n+import org.gwtproject.editor.processor.common.Model01Dto;\n+import org.gwtproject.editor.client.testing.FakeLeafValueEditorWithHasEditorDelegate;\n+import org.gwtproject.editor.client.annotation.IsDriver;\n+import org.gwtproject.editor.client.Editor;\n+import org.gwtproject.editor.client.Editor.Path;\n+import org.gwtproject.editor.client.SimpleBeanEditorDriver;\n+\n+public class TestEditor08 implements Editor<Model01Dto> {\n+  \n+  private Driver driver;\n+  \n+  @IsDriver\n+  interface Driver\n+      extends SimpleBeanEditorDriver<Model01Dto, TestEditor08> {\n+    \n+  }\n+  \n+  FakeLeafValueEditorWithHasEditorDelegate<Long> id;\n+  FakeLeafValueEditorWithHasEditorDelegate<String> name;\n+  FakeLeafValueEditorWithHasEditorDelegate<String> phone;\n+  FakeLeafValueEditorWithHasEditorDelegate<String> email;\n+  \n+  public TestEditor08() {\n+    driver = new TestEditor08_Driver_Impl();\n+    driver.initialize(this);\n+  }\n+  \n+}\n\\ No newline at end of file"
  },
  {
    "sha": "30726c1a76a0dd15a854b6bb080944510a277812",
    "filename": "gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_Driver_Impl.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_Driver_Impl.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_Driver_Impl.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_Driver_Impl.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -0,0 +1,21 @@\n+package org.gwtproject.editor.processor.test08;\n+\n+import java.lang.Override;\n+import org.gwtproject.editor.client.EditorVisitor;\n+import org.gwtproject.editor.client.impl.AbstractSimpleBeanEditorDriver;\n+import org.gwtproject.editor.client.impl.RootEditorContext;\n+import org.gwtproject.editor.client.impl.SimpleBeanEditorDelegate;\n+import org.gwtproject.editor.processor.common.Model01Dto;\n+\n+public class TestEditor08_Driver_Impl extends AbstractSimpleBeanEditorDriver<Model01Dto, TestEditor08> implements TestEditor08.Driver {\n+  @Override\n+  public void accept(EditorVisitor visitor) {\n+    RootEditorContext<Model01Dto> ctx = new RootEditorContext<Model01Dto>(getDelegate(), (Class<Model01Dto>)(Class)org.gwtproject.editor.processor.common.Model01Dto.class, getObject());\n+    ctx.traverse(visitor, getDelegate());\n+  }\n+  \n+  @Override\n+  protected SimpleBeanEditorDelegate<Model01Dto, TestEditor08> createDelegate() {\n+    return new TestEditor08_SimpleBeanEditorDelegate();\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bec32580015697b6e0759fe27810902991d286d9",
    "filename": "gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_SimpleBeanEditorDelegate.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_SimpleBeanEditorDelegate.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_SimpleBeanEditorDelegate.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_SimpleBeanEditorDelegate.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -0,0 +1,75 @@\n+package org.gwtproject.editor.processor.test08;\n+import java.lang.Object;\n+import java.lang.Override;\n+import org.gwtproject.editor.client.Editor;\n+import org.gwtproject.editor.client.EditorVisitor;\n+import org.gwtproject.editor.client.impl.SimpleBeanEditorDelegate;\n+import org.gwtproject.editor.client.testing.FakeLeafValueEditorWithHasEditorDelegate_Long_SimpleBeanEditorDelegate;\n+import org.gwtproject.editor.client.testing.FakeLeafValueEditorWithHasEditorDelegate_String_SimpleBeanEditorDelegate;\n+import org.gwtproject.editor.processor.common.Model01Dto;\n+public class TestEditor08_SimpleBeanEditorDelegate extends SimpleBeanEditorDelegate {\n+  private TestEditor08 editor;\n+  private Model01Dto object;\n+  private SimpleBeanEditorDelegate idDelegate;\n+  private SimpleBeanEditorDelegate nameDelegate;\n+  private SimpleBeanEditorDelegate phoneDelegate;\n+  private SimpleBeanEditorDelegate emailDelegate;\n+  @Override\n+  protected TestEditor08 getEditor() {\n+    return editor;\n+  }\n+  @Override\n+  protected void setEditor(Editor editor) {\n+    this.editor = (TestEditor08) editor;\n+  }\n+  @Override\n+  public Model01Dto getObject() {\n+    return object;\n+  }\n+  @Override\n+  protected void setObject(Object object) {\n+    this.object = (Model01Dto) object;\n+  }\n+  @Override\n+  protected void initializeSubDelegates() {\n+    if (editor.id != null) {\n+      idDelegate = new FakeLeafValueEditorWithHasEditorDelegate_Long_SimpleBeanEditorDelegate();\n+      addSubDelegate(idDelegate, appendPath(\"id\"), editor.id);\n+    }\n+    if (editor.name != null) {\n+      nameDelegate = new FakeLeafValueEditorWithHasEditorDelegate_String_SimpleBeanEditorDelegate();\n+      addSubDelegate(nameDelegate, appendPath(\"name\"), editor.name);\n+    }\n+    if (editor.phone != null) {\n+      phoneDelegate = new FakeLeafValueEditorWithHasEditorDelegate_String_SimpleBeanEditorDelegate();\n+      addSubDelegate(phoneDelegate, appendPath(\"phone\"), editor.phone);\n+    }\n+    if (editor.email != null) {\n+      emailDelegate = new FakeLeafValueEditorWithHasEditorDelegate_String_SimpleBeanEditorDelegate();\n+      addSubDelegate(emailDelegate, appendPath(\"email\"), editor.email);\n+    }\n+  }\n+  @Override\n+  public void accept(EditorVisitor visitor) {\n+    if (idDelegate != null) {\n+      TestEditor08_id_Context ctx = new TestEditor08_id_Context(getObject(), editor.id, appendPath(\"id\"));\n+      ctx.setEditorDelegate(idDelegate);\n+      ctx.traverse(visitor, idDelegate);\n+    }\n+    if (nameDelegate != null) {\n+      TestEditor08_name_Context ctx = new TestEditor08_name_Context(getObject(), editor.name, appendPath(\"name\"));\n+      ctx.setEditorDelegate(nameDelegate);\n+      ctx.traverse(visitor, nameDelegate);\n+    }\n+    if (phoneDelegate != null) {\n+      TestEditor08_phone_Context ctx = new TestEditor08_phone_Context(getObject(), editor.phone, appendPath(\"phone\"));\n+      ctx.setEditorDelegate(phoneDelegate);\n+      ctx.traverse(visitor, phoneDelegate);\n+    }\n+    if (emailDelegate != null) {\n+      TestEditor08_email_Context ctx = new TestEditor08_email_Context(getObject(), editor.email, appendPath(\"email\"));\n+      ctx.setEditorDelegate(emailDelegate);\n+      ctx.traverse(visitor, emailDelegate);\n+    }\n+  }\n+}"
  },
  {
    "sha": "fb2f570cdbaeb5316781b6b520b6f1e28b90e465",
    "filename": "gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_email_Context.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_email_Context.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_email_Context.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_email_Context.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -0,0 +1,43 @@\n+package org.gwtproject.editor.processor.test08;\n+\n+import java.lang.Class;\n+import java.lang.Object;\n+import java.lang.Override;\n+import java.lang.String;\n+import org.gwtproject.editor.client.Editor;\n+import org.gwtproject.editor.client.impl.AbstractEditorContext;\n+import org.gwtproject.editor.processor.common.Model01Dto;\n+\n+public class TestEditor08_email_Context extends AbstractEditorContext<String> {\n+  private final Model01Dto parent;\n+  \n+  public TestEditor08_email_Context(Model01Dto parent, Editor<String> editor, String path) {\n+    super(editor, path);\n+    this.parent = parent;\n+  }\n+  \n+  @Override\n+  public boolean canSetInModel() {\n+    return parent != null && true && true;\n+  }\n+  \n+  @Override\n+  public String checkAssignment(Object value) {\n+    return (String) value;\n+  }\n+  \n+  @Override\n+  public Class getEditedType() {\n+    return java.lang.String.class;\n+  }\n+  \n+  @Override\n+  public String getFromModel() {\n+    return (parent != null && true) ? parent.getEmail() : null;\n+  }\n+  \n+  @Override\n+  public void setInModel(String data) {\n+    parent.setEmail(data);\n+  }\n+}"
  },
  {
    "sha": "3ff50c577b3c27064c82ab44848622ae5ed22711",
    "filename": "gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_id_Context.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_id_Context.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_id_Context.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_id_Context.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -0,0 +1,44 @@\n+package org.gwtproject.editor.processor.test08;\n+\n+import java.lang.Class;\n+import java.lang.Long;\n+import java.lang.Object;\n+import java.lang.Override;\n+import java.lang.String;\n+import org.gwtproject.editor.client.Editor;\n+import org.gwtproject.editor.client.impl.AbstractEditorContext;\n+import org.gwtproject.editor.processor.common.Model01Dto;\n+\n+public class TestEditor08_id_Context extends AbstractEditorContext<Long> {\n+  private final Model01Dto parent;\n+  \n+  public TestEditor08_id_Context(Model01Dto parent, Editor<Long> editor, String path) {\n+    super(editor, path);\n+    this.parent = parent;\n+  }\n+  \n+  @Override\n+  public boolean canSetInModel() {\n+    return parent != null && true && true;\n+  }\n+  \n+  @Override\n+  public Long checkAssignment(Object value) {\n+    return (Long) value;\n+  }\n+  \n+  @Override\n+  public Class getEditedType() {\n+    return java.lang.Long.class;\n+  }\n+  \n+  @Override\n+  public Long getFromModel() {\n+    return (parent != null && true) ? parent.getId() : null;\n+  }\n+  \n+  @Override\n+  public void setInModel(Long data) {\n+    parent.setId(data);\n+  }\n+}"
  },
  {
    "sha": "43140ab245b77ef2a139ef451e846bc0a5054f20",
    "filename": "gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_name_Context.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_name_Context.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_name_Context.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_name_Context.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -0,0 +1,43 @@\n+package org.gwtproject.editor.processor.test08;\n+\n+import java.lang.Class;\n+import java.lang.Object;\n+import java.lang.Override;\n+import java.lang.String;\n+import org.gwtproject.editor.client.Editor;\n+import org.gwtproject.editor.client.impl.AbstractEditorContext;\n+import org.gwtproject.editor.processor.common.Model01Dto;\n+\n+public class TestEditor08_name_Context extends AbstractEditorContext<String> {\n+  private final Model01Dto parent;\n+  \n+  public TestEditor08_name_Context(Model01Dto parent, Editor<String> editor, String path) {\n+    super(editor, path);\n+    this.parent = parent;\n+  }\n+  \n+  @Override\n+  public boolean canSetInModel() {\n+    return parent != null && true && true;\n+  }\n+  \n+  @Override\n+  public String checkAssignment(Object value) {\n+    return (String) value;\n+  }\n+  \n+  @Override\n+  public Class getEditedType() {\n+    return java.lang.String.class;\n+  }\n+  \n+  @Override\n+  public String getFromModel() {\n+    return (parent != null && true) ? parent.getName() : null;\n+  }\n+  \n+  @Override\n+  public void setInModel(String data) {\n+    parent.setName(data);\n+  }\n+}"
  },
  {
    "sha": "9784d83c5848930352d27868603c88585e2e25c6",
    "filename": "gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_phone_Context.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_phone_Context.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_phone_Context.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor-processor/src/test/resources/org/gwtproject/editor/processor/test08/result/TestEditor08_phone_Context.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -0,0 +1,43 @@\n+package org.gwtproject.editor.processor.test08;\n+\n+import java.lang.Class;\n+import java.lang.Object;\n+import java.lang.Override;\n+import java.lang.String;\n+import org.gwtproject.editor.client.Editor;\n+import org.gwtproject.editor.client.impl.AbstractEditorContext;\n+import org.gwtproject.editor.processor.common.Model01Dto;\n+\n+public class TestEditor08_phone_Context extends AbstractEditorContext<String> {\n+  private final Model01Dto parent;\n+  \n+  public TestEditor08_phone_Context(Model01Dto parent, Editor<String> editor, String path) {\n+    super(editor, path);\n+    this.parent = parent;\n+  }\n+  \n+  @Override\n+  public boolean canSetInModel() {\n+    return parent != null && true && true;\n+  }\n+  \n+  @Override\n+  public String checkAssignment(Object value) {\n+    return (String) value;\n+  }\n+  \n+  @Override\n+  public Class getEditedType() {\n+    return java.lang.String.class;\n+  }\n+  \n+  @Override\n+  public String getFromModel() {\n+    return (parent != null && true) ? parent.getPhone() : null;\n+  }\n+  \n+  @Override\n+  public void setInModel(String data) {\n+    parent.setPhone(data);\n+  }\n+}"
  },
  {
    "sha": "6c650722486cb017e7859193551e87112efca691",
    "filename": "gwt-editor/src/main/java/org/gwtproject/editor/client/impl/Initializer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor/src/main/java/org/gwtproject/editor/client/impl/Initializer.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor/src/main/java/org/gwtproject/editor/client/impl/Initializer.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor/src/main/java/org/gwtproject/editor/client/impl/Initializer.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -24,6 +24,7 @@\n  * Extends the logic in Refresher to provide the editor instance with references to framework\n  * plumbing fixes.\n  */\n+@SuppressWarnings(\"rawtypes\")\n public class Initializer extends Refresher {\n \n   @Override"
  },
  {
    "sha": "210dbad376073b434e9dea71963199bc10d05a20",
    "filename": "gwt-editor/src/main/java/org/gwtproject/editor/client/testing/FakeLeafValueEditorWithHasEditorDelegate.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/gwtproject/gwt-editor/blob/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor/src/main/java/org/gwtproject/editor/client/testing/FakeLeafValueEditorWithHasEditorDelegate.java",
    "raw_url": "https://github.com/gwtproject/gwt-editor/raw/7928d18af7778aaefa8c3ecbaab9dc082204723c/gwt-editor/src/main/java/org/gwtproject/editor/client/testing/FakeLeafValueEditorWithHasEditorDelegate.java",
    "contents_url": "https://api.github.com/repos/gwtproject/gwt-editor/contents/gwt-editor/src/main/java/org/gwtproject/editor/client/testing/FakeLeafValueEditorWithHasEditorDelegate.java?ref=7928d18af7778aaefa8c3ecbaab9dc082204723c",
    "patch": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright © 2018 The GWT Project Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.gwtproject.editor.client.testing;\n+\n+import org.gwtproject.editor.client.EditorDelegate;\n+import org.gwtproject.editor.client.HasEditorDelegate;\n+\n+/**\n+ * A no-op Editor.\n+ *\n+ * @param <T> the type not being edited\n+ */\n+public class FakeLeafValueEditorWithHasEditorDelegate<T> extends FakeLeafValueEditor<T>\n+    implements HasEditorDelegate<T> {\n+\n+  @Override\n+  public void setDelegate(EditorDelegate<T> delegate) {}\n+}"
  }
]
