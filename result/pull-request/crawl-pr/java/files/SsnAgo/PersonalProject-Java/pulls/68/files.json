[
  {
    "sha": "7636d8140cfc38d0cf5475ca3e753cf72765571a",
    "filename": "131802125/README.md",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/SsnAgo/PersonalProject-Java/blob/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/README.md",
    "raw_url": "https://github.com/SsnAgo/PersonalProject-Java/raw/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/README.md",
    "contents_url": "https://api.github.com/repos/SsnAgo/PersonalProject-Java/contents/131802125/README.md?ref=7296e4ab94911dcc2a8626cd330cba374a6cc97f",
    "patch": "@@ -0,0 +1,17 @@\n+# 项目描述\n+[toc]\n+---\n+## 如何运行\n+>先从cmd窗口进入src文件夹，利用javac WordCount.java 再使用java WordCount input.txt output.txt来运行项目。\n+\n+## 功能简介\n+>1. 对输入的input.txt的文本进行字符数统计。\n+>2. 对文本的单词数统计\n+>3. 对文本的有效行数进行统计\n+>4. 对统计频率最高的10个单词进行输出，如果同频率则按字典序小的在前。\n+\n+## 作业连接\n+[软工实践寒假作业（2/2）](https://www.cnblogs.com/cj-whales/p/14488427.html)\n+\n+## 博客连接\n+[我的博客](https://www.cnblogs.com/cj-whales/)\n\\ No newline at end of file"
  },
  {
    "sha": "aa74f21a702ebb4f532d2881e0f09dff2ac949d5",
    "filename": "131802125/codestyle.md",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/SsnAgo/PersonalProject-Java/blob/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/codestyle.md",
    "raw_url": "https://github.com/SsnAgo/PersonalProject-Java/raw/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/codestyle.md",
    "contents_url": "https://api.github.com/repos/SsnAgo/PersonalProject-Java/contents/131802125/codestyle.md?ref=7296e4ab94911dcc2a8626cd330cba374a6cc97f",
    "patch": "@@ -0,0 +1,63 @@\n+# 代码规范制定\n+[toc]\n+---\n+## 缩进\n+>程序块要采用缩进风格编写，缩进的空格数为4个。\n+>如果使用TAB键，要设置空格数为4格。\n+## 变量命名\n+>使用正确的英文单词，可以让读者易于理解,力求简单清楚，避免使用引起误解的词汇和模糊的使人产生误解.\n+>采用驼峰命名法\n+>变量的命名采用“小驼峰法”，如：camelCase，即第一个单词全小写，后面单词首字母大写。\n+\n+## 每行最多字符数\n+>较长的语句（>80字符）要分成多行书写。\n+## 函数最大行\n+>不超过120行\n+## 函数、类命名\n+>函数的命名，使用英文单词尽量可以描述该函数主要功能,可采用（动-名）或者（谓-宾）的结构。\n+>二者皆采用大驼峰命名法，即所有单词首字母都大写。\n+\n+>如下形式例外（领域模型的相关命名）：\n+正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal /   TaPromotion\n+反例：macroPolo / UserDo / XMLService / TCPUDPDeal /   TAPromotion\n+## 常量\n+>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\n+## 空行规则\n+>1. 相对独立的程序块之间要使用空行分开；\n+>2. 变量声明应尽可能靠近第一次使用处，避免一次性声明一组没有马上使用的变量。\n+>3. 函数间要使用空行分开；\n+>4. 每个类声明之后应该加入空格同\n+其他代码分开\n+## 注释规则\n+>1. 注释应与其描述的代码相近，对代码的注释应放在其上方或右方（对单条语句的\n+注释）相邻位置，不可放在下面，如放于上方则需与其上面的代码用空行隔开。\n+>2. 注释要与内容有相同的缩排\n+>3. 注释要与上面无关的代码用空行隔开\n+>4. 变量与常量的注释放在其右方\n+>5. 在源文件头部应列出，生成日期、作者、代码的主要功能。\n+## 操作符前后空格\n+>1. 值操作符、比较操作符、算术操作符、逻辑操作符、位域操作符，如“=”、“+=”、“>=”、“+”、“*”、“%”、“&&”、“||”、“<<”、“^”等二元操作符前后应当加空格。\n+>2. 一元操作符“！”、“~”、“++”、“--”、“&”等前后不加空格。\n+>3. 如“[]”、“.”、“->”这类操作符前后不加空格\n+## 其他规则\n+1. 关于命名的缩写：\n+>较短的单词可以通过去掉“元音”形成缩写；较长的单词可取单词头几个字母形成缩写；一些单词有公认的缩写，如：\n+temp 可缩写为 tmp ; \n+flag 可缩写为 flg ; \n+statistic 可缩写为 stat ; \n+increment 可缩写为 inc ; \n+message 可缩写为 msg ;\n+2. 程序的分界符如“{ }”要独占一行。如：\n+>for (...) \n+{ \n+ ... // program code \n+} \n+if (...) \n+{ \n+ ... // program code \n+} \n+void example_fun( void ) \n+{ \n+ ... // program code \n+}\n+3. if、for、do、while、case、switch、default等语句自占一行，且if、for、do、while等语句的执行语句部分无论多少都要加括号{}。\n\\ No newline at end of file"
  },
  {
    "sha": "7d2ce11dea24bb00bc0a466b432154abcbaabd2d",
    "filename": "131802125/src/CompareRule.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/SsnAgo/PersonalProject-Java/blob/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/src/CompareRule.java",
    "raw_url": "https://github.com/SsnAgo/PersonalProject-Java/raw/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/src/CompareRule.java",
    "contents_url": "https://api.github.com/repos/SsnAgo/PersonalProject-Java/contents/131802125/src/CompareRule.java?ref=7296e4ab94911dcc2a8626cd330cba374a6cc97f",
    "patch": "@@ -0,0 +1,28 @@\n+import java.util.*;\n+\n+public class CompareRule implements Comparator<Word>\n+{\n+    public int compare(Word aWord,Word bWord)\n+    {\n+        if(aWord.GetFrequent() > bWord.GetFrequent())   //词频大的在前\n+        {\n+            return -1;\n+        }\n+        else if(aWord.GetFrequent() == bWord.GetFrequent())\n+        {\n+            if(aWord.GetWords().compareTo(bWord.GetWords()) < 0)    //字典序小的在前\n+            {\n+                return -1;\n+            }\n+            else\n+            {\n+                return 0;\n+            }\n+        }\n+        else\n+        {\n+            return 1;\n+        }\n+        \n+    }\n+}"
  },
  {
    "sha": "959ab8f9952d85a67d8b70a7e34bcc2104856b87",
    "filename": "131802125/src/Function.java",
    "status": "added",
    "additions": 275,
    "deletions": 0,
    "changes": 275,
    "blob_url": "https://github.com/SsnAgo/PersonalProject-Java/blob/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/src/Function.java",
    "raw_url": "https://github.com/SsnAgo/PersonalProject-Java/raw/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/src/Function.java",
    "contents_url": "https://api.github.com/repos/SsnAgo/PersonalProject-Java/contents/131802125/src/Function.java?ref=7296e4ab94911dcc2a8626cd330cba374a6cc97f",
    "patch": "@@ -0,0 +1,275 @@\n+import java.util.*;\n+import java.io.*;\n+\n+public class Function {\n+    public Function()\n+    {\n+    }\n+    \n+    public boolean IsEmptyLine(String wordLine)\n+    {\n+        if(wordLine.replaceAll(\"\\\\s*\", \"\").equals(\"\"))   //替换掉输入行的空格、制表、换页符后是否为空\n+        {\n+            return true;\n+        }\n+        else\n+        {\n+            return false;\n+        }\n+    }\n+    \n+    public int CountChar(File readFile)\n+    {\n+        int charNum=0;      //用于统计字符数\n+        \n+        try\n+        {\n+            if (readFile.isFile() && readFile.exists())\n+            {\n+                FileInputStream fileIn = new FileInputStream(readFile);\n+                int readChar =0;\n+                while((readChar = fileIn.read())!=-1)       //每读入一个字符，字符数自增1\n+                {\n+                    charNum++;\n+                }\n+                \n+                fileIn.close();\n+            }\n+            \n+        }\n+        catch(Exception e)\n+        {\n+            System.out.println(\"没有找到文件\");\n+            e.printStackTrace();\n+        }\n+        \n+        return charNum;\n+        \n+    }\n+    \n+    public int CountLine(File readFile)\n+    {\n+        int lineNum=0;      //用于统计有效行数\n+        try\n+        {\n+            if (readFile.isFile() && readFile.exists())\n+            {\n+                InputStreamReader inReader = new InputStreamReader(\n+                                             new FileInputStream(readFile));\n+                BufferedReader bufferedReader = new BufferedReader(inReader);\n+                String wordLine;\n+                \n+                while((wordLine=bufferedReader.readLine())!=null)\n+                {\n+                    if(!IsEmptyLine(wordLine))\n+                    {\n+                        lineNum++;\n+                    }\n+                }\n+            }\n+            \n+        }\n+        catch(Exception e)\n+        {\n+            System.out.println(\"没有找到文件\");\n+            e.printStackTrace();\n+        }\n+        \n+        return lineNum;\n+    }\n+    \n+    public int CountWord(File readFile)\n+    {\n+        int wordNum=0;      //用于统计单词数\n+        int wordLength=0;          //用于判断是否为一个单词，既4个英文字母开头\n+        int resetWord=0;           //用于判断是否重新开始一个单词读入 \n+        int isNotWord=0;            //与wordLength共同作用，判断是不是一个单词\n+        \n+        try\n+        {\n+            if (readFile.isFile() && readFile.exists())\n+            {\n+                String wordLine;\n+                FileInputStream fileIn = new FileInputStream(readFile);\n+                int readChar=0;\n+                String word=\"\";     //用于拼接读入的字符成为单词\n+                \n+                while((readChar = fileIn.read())!=-1)       //每读入一个字符，字符数自增1\n+                {\n+                    resetWord = 0;\n+                    \n+                    if((readChar>='a'&&readChar<='z')\n+                            ||(readChar>='A'&&readChar<='Z')\n+                                ||(readChar>='0'&&readChar<='9'))\n+                    {\n+                        if(readChar>='0'&&readChar<='9')\n+                        {\n+                            if(wordLength>=4)\n+                            {\n+                                char[] ch = new char[1];\n+                                ch[0] = (char)readChar;\n+                                word += ch[0];\n+                                wordLength++;\n+                            }\n+                            else\n+                            {\n+                                isNotWord = 1;\n+                            }\n+                        }\n+                        else \n+                        {\n+                            char[] ch = new char[1];\n+                            ch[0] = (char)readChar;\n+                            word += ch[0];\n+                            wordLength++;\n+                        }\n+                    }\n+                    else\n+                    {\n+                        if(wordLength>=4 && isNotWord != 1)\n+                        {\n+                            wordNum++;\n+                        }\n+                        isNotWord = 0;\n+                        resetWord = 1;\n+                    }\n+                    \n+                    if(resetWord==1)\n+                    {\n+                        word = \"\";\n+                        wordLength = 0;\n+                    }\n+                }\n+                if(wordLength>=4)\n+                {\n+                    wordNum++;\n+                }\n+            }\n+            \n+        }\n+        catch(Exception e)\n+        {\n+            System.out.println(\"没有找到文件\");\n+            e.printStackTrace();\n+        }\n+        \n+        return wordNum;\n+    }\n+    \n+    public Vector<Word> CountFrequentWord(File readFile)\n+    {\n+        int wordLength=0;          //用于判断是否为一个单词，既4个英文字母开头\n+        int resetWord=0;           //用于判断是否重新开始一个单词读入 \n+        int isNotWord=0;            //与wordLength共同作用，判断是不是一个单词\n+        \n+        Vector<Word> allWords = new Vector<Word>();\n+        int noRepeatWordNum = 0;\n+        try\n+        {\n+            if (readFile.isFile() && readFile.exists())\n+            {\n+                String wordLine;\n+                FileInputStream fileIn = new FileInputStream(readFile);\n+                int readChar=0;\n+                String word=\"\";     //用于拼接读入的字符成为单词\n+                \n+                while((readChar = fileIn.read())!=-1)       //每读入一个字符，字符数自增1\n+                {\n+                    resetWord = 0;\n+                    \n+                    if((readChar>='a'&&readChar<='z')\n+                            ||(readChar>='A'&&readChar<='Z')\n+                                ||(readChar>='0'&&readChar<='9'))\n+                    {\n+                        if(readChar>='0'&&readChar<='9')\n+                        {\n+                            if(wordLength>=4)\n+                            {\n+                                char[] ch = new char[1];\n+                                ch[0] = (char)readChar;\n+                                word += ch[0];\n+                                wordLength++;\n+                            }\n+                            else\n+                            {\n+                                isNotWord = 1;\n+                            }\n+                        }\n+                        else \n+                        {\n+                            char[] ch = new char[1];\n+                            ch[0] = (char)readChar;\n+                            word += ch[0];\n+                            wordLength++;\n+                        }\n+                    }\n+                    else\n+                    {\n+                        if(wordLength>=4 && isNotWord !=1)\n+                        {\n+                            word = word.toLowerCase();\n+                            int index = FindWord(allWords,word);    //查找有是否重复，重复则返回下标\n+                            if(index!=-1)\n+                            {\n+                                allWords.get(index).AddFrequent();\n+                            }\n+                            else \n+                            {\n+                                noRepeatWordNum++;        //用于计数总共有多少个单词存入了已经\n+                                Word aWord = new Word(word,1);\n+                                allWords.add(aWord);\n+                            }\n+                        }\n+                        isNotWord = 0;\n+                        resetWord = 1;\n+                    }\n+                    \n+                    if(resetWord==1)\n+                    {\n+                        word = \"\";\n+                        wordLength = 0;\n+                    }\n+                }\n+                \n+                /*防止最后一次读入的是合理的字符，导致最后一个单词没有计入数据*/\n+                if(wordLength>=4 && isNotWord != 1)\n+                {\n+                    word = word.toLowerCase();\n+                    int index = FindWord(allWords,word);    //查找有是否重复，重复则返回下标\n+                    if(index!=-1)\n+                    {\n+                        allWords.get(index).AddFrequent();\n+                    }\n+                    else \n+                    {\n+                        noRepeatWordNum++;        //用于计数总共有多少个单词存入了已经\n+                        Word aWord = new Word(word,1);\n+                        allWords.add(aWord);\n+                    }\n+                }\n+                \n+                Comparator<Word> cmp = new CompareRule();\n+                Collections.sort(allWords,cmp);\n+            }\n+            \n+        }\n+        catch(Exception e)\n+        {\n+            System.out.println(\"没有找到文件\");\n+            e.printStackTrace();\n+        }\n+        return allWords;\n+    }\n+    \n+    public int FindWord(Vector<Word> allWords,String word)\n+    {\n+        for(int i = 0;i<allWords.size();i++)\n+        {\n+            if(allWords.get(i).GetWords().equals(word))\n+            {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+}"
  },
  {
    "sha": "dff098e24e26549ac84e5f292ccb4eaac2e10121",
    "filename": "131802125/src/Word.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/SsnAgo/PersonalProject-Java/blob/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/src/Word.java",
    "raw_url": "https://github.com/SsnAgo/PersonalProject-Java/raw/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/src/Word.java",
    "contents_url": "https://api.github.com/repos/SsnAgo/PersonalProject-Java/contents/131802125/src/Word.java?ref=7296e4ab94911dcc2a8626cd330cba374a6cc97f",
    "patch": "@@ -0,0 +1,44 @@\n+import java.util.*;\n+import java.io.*;\n+\n+public class Word {\n+    private String words;\n+    private int frequent;\n+    \n+    public Word()\n+    {\n+        words = \"\";\n+        frequent = 0;\n+    }\n+    \n+    public Word(String word,int fre)\n+    {\n+        words = word;\n+        frequent = fre;\n+    }\n+    \n+    public void SetWords(String word)\n+    {\n+        words = word;\n+    }\n+    \n+    public void SetFrequent(int fre)\n+    {\n+        frequent = fre;\n+    }\n+    \n+    public String GetWords()\n+    {\n+        return words;\n+    }\n+    \n+    public int GetFrequent()\n+    {\n+        return frequent;\n+    }\n+    \n+    public void AddFrequent()\n+    {\n+        frequent = frequent + 1;\n+    }\n+}"
  },
  {
    "sha": "6a8f6b924b128444070af276928f1824bb386cfb",
    "filename": "131802125/src/WordCount.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/SsnAgo/PersonalProject-Java/blob/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/src/WordCount.java",
    "raw_url": "https://github.com/SsnAgo/PersonalProject-Java/raw/7296e4ab94911dcc2a8626cd330cba374a6cc97f/131802125/src/WordCount.java",
    "contents_url": "https://api.github.com/repos/SsnAgo/PersonalProject-Java/contents/131802125/src/WordCount.java?ref=7296e4ab94911dcc2a8626cd330cba374a6cc97f",
    "patch": "@@ -0,0 +1,63 @@\n+/************************************************************\n+* FileName: WordCount.cpp\n+* \n+* Author: 131802125邱梓洛\n+* \n+* Function List: 1.统计字符数 2.统计单词数 3.统计最多的10个单词及其词频\n+* \n+************************************************************/\n+\n+import java.util.*;\n+import java.io.*;\n+\n+public class WordCount\n+{\n+    public static void main(String[] args)\n+    {\n+        int lineNum=0;\n+        int charNum=0;\n+        int wordNum=0;\n+        String fileName=args[0];\n+        String outFileName=args[1];\n+        File readFile = new File(fileName);\n+        Function functionMethod = new Function();\n+        charNum=functionMethod.CountChar(readFile);\n+        lineNum = functionMethod.CountLine(readFile);\n+        wordNum = functionMethod.CountWord(readFile);\n+        Vector<Word> allWords = functionMethod.CountFrequentWord(readFile);\n+        \n+        /*输出文件部分*/\n+        String outMsg = \"\";\n+        outMsg+=\"characters: \"+charNum+\"\\n\";\n+        outMsg+=\"words: \"+wordNum+\"\\n\";\n+        outMsg+=\"lines: \"+lineNum+\"\\n\";\n+        if(allWords.size() <= 10)\n+        {\n+            for(int i = 0;i < allWords.size();i++)\n+            {\n+                outMsg+=allWords.get(i).GetWords()+\": \"\n+                                    +allWords.get(i).GetFrequent()+\"\\n\";\n+            }\n+        }\n+        else\n+        {\n+            for(int i = 0;i < 10;i++)\n+            {\n+                outMsg+=allWords.get(i).GetWords()+\": \"\n+                                    +allWords.get(i).GetFrequent()+\"\\n\";\n+            }\n+        }\n+        try \n+        {\n+            File outFile = new File(outFileName);\n+            PrintStream printStream = new PrintStream(new FileOutputStream(outFile));\n+            \n+            printStream.print(outMsg);\n+        }\n+        catch(Exception e)\n+        {\n+            System.out.println(\"没有找到文件\");\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\\ No newline at end of file"
  }
]
