[
  {
    "sha": "95cdaf33482fbf4dba61051c612ffb05ffaed9ef",
    "filename": "control-plane/pkg/reconciler/trigger/trigger.go",
    "status": "modified",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/knative-sandbox/eventing-kafka-broker/blob/75612680810b1411ae5abc17dba0fb5aa98c209c/control-plane/pkg/reconciler/trigger/trigger.go",
    "raw_url": "https://github.com/knative-sandbox/eventing-kafka-broker/raw/75612680810b1411ae5abc17dba0fb5aa98c209c/control-plane/pkg/reconciler/trigger/trigger.go",
    "contents_url": "https://api.github.com/repos/knative-sandbox/eventing-kafka-broker/contents/control-plane/pkg/reconciler/trigger/trigger.go?ref=75612680810b1411ae5abc17dba0fb5aa98c209c",
    "patch": "@@ -19,6 +19,7 @@ package trigger\n import (\n \t\"context\"\n \t\"fmt\"\n+\t\"strings\"\n \n \t\"knative.dev/eventing-kafka-broker/control-plane/pkg/contract\"\n \t\"knative.dev/eventing-kafka-broker/control-plane/pkg/reconciler/kafka\"\n@@ -40,6 +41,12 @@ import (\n \t\"knative.dev/eventing-kafka-broker/control-plane/pkg/reconciler/base\"\n )\n \n+const (\n+\tdeliveryOrderAnnotation = \"kafka.eventing.knative.dev/delivery.order\"\n+\tdeliveryOrderOrdered    = \"ordered\"\n+\tdeliveryOrderUnordered  = \"unordered\"\n+)\n+\n type Reconciler struct {\n \t*base.Reconciler\n \n@@ -279,6 +286,15 @@ func (r *Reconciler) getTriggerConfig(ctx context.Context, trigger *eventing.Tri\n \t}\n \tegress.EgressConfig = egressConfig\n \n+\tdeliveryOrderAnnotationValue, ok := trigger.Annotations[deliveryOrderAnnotation]\n+\tif ok {\n+\t\tdeliveryOrder, err := parseTriggerOrder(deliveryOrderAnnotationValue)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tegress.DeliveryOrder = deliveryOrder\n+\t}\n+\n \treturn egress, nil\n }\n \n@@ -297,3 +313,14 @@ func isOurBroker(broker *eventing.Broker) (bool, string) {\n \tbrokerClass := broker.GetAnnotations()[eventing.BrokerClassAnnotationKey]\n \treturn brokerClass == kafka.BrokerClass, brokerClass\n }\n+\n+func parseTriggerOrder(val string) (contract.DeliveryOrder, error) {\n+\tswitch strings.ToLower(val) {\n+\tcase deliveryOrderOrdered:\n+\t\treturn contract.DeliveryOrder_ORDERED, nil\n+\tcase deliveryOrderUnordered:\n+\t\treturn contract.DeliveryOrder_UNORDERED, nil\n+\tdefault:\n+\t\treturn contract.DeliveryOrder_UNORDERED, fmt.Errorf(\"invalid annotation %s value: %s. Allowed values [ %q | %q ]\", deliveryOrderAnnotation, val, deliveryOrderOrdered, deliveryOrderUnordered)\n+\t}\n+}"
  },
  {
    "sha": "ddb50a91cc0cae615f2a7041d4c5cb706cb1c5ba",
    "filename": "control-plane/pkg/reconciler/trigger/trigger_test.go",
    "status": "modified",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/knative-sandbox/eventing-kafka-broker/blob/75612680810b1411ae5abc17dba0fb5aa98c209c/control-plane/pkg/reconciler/trigger/trigger_test.go",
    "raw_url": "https://github.com/knative-sandbox/eventing-kafka-broker/raw/75612680810b1411ae5abc17dba0fb5aa98c209c/control-plane/pkg/reconciler/trigger/trigger_test.go",
    "contents_url": "https://api.github.com/repos/knative-sandbox/eventing-kafka-broker/contents/control-plane/pkg/reconciler/trigger/trigger_test.go?ref=75612680810b1411ae5abc17dba0fb5aa98c209c",
    "patch": "@@ -153,6 +153,132 @@ func triggerReconciliation(t *testing.T, format string, configs broker.Configs)\n \t\t\t\t},\n \t\t\t},\n \t\t},\n+\t\t{\n+\t\t\tName: \"Reconciled normal - Trigger with ordered delivery\",\n+\t\t\tObjects: []runtime.Object{\n+\t\t\t\tNewBroker(\n+\t\t\t\t\tBrokerReady,\n+\t\t\t\t),\n+\t\t\t\tnewTrigger(reconcilertesting.WithAnnotation(deliveryOrderAnnotation, deliveryOrderOrdered)),\n+\t\t\t\tNewService(),\n+\t\t\t\tNewConfigMapFromContract(&contract.Contract{\n+\t\t\t\t\tResources: []*contract.Resource{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tUid:     BrokerUUID,\n+\t\t\t\t\t\t\tTopics:  []string{BrokerTopic()},\n+\t\t\t\t\t\t\tIngress: &contract.Ingress{IngressType: &contract.Ingress_Path{Path: receiver.Path(BrokerNamespace, BrokerName)}},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t}, &configs),\n+\t\t\t\tBrokerDispatcherPod(configs.SystemNamespace, nil),\n+\t\t\t},\n+\t\t\tKey: testKey,\n+\t\t\tWantEvents: []string{\n+\t\t\t\tfinalizerUpdatedEvent,\n+\t\t\t},\n+\t\t\tWantPatches: []clientgotesting.PatchActionImpl{\n+\t\t\t\tpatchFinalizers(),\n+\t\t\t},\n+\t\t\tWantUpdates: []clientgotesting.UpdateActionImpl{\n+\t\t\t\tConfigMapUpdate(&configs, &contract.Contract{\n+\t\t\t\t\tResources: []*contract.Resource{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tUid:     BrokerUUID,\n+\t\t\t\t\t\t\tTopics:  []string{BrokerTopic()},\n+\t\t\t\t\t\t\tIngress: &contract.Ingress{IngressType: &contract.Ingress_Path{Path: receiver.Path(BrokerNamespace, BrokerName)}},\n+\t\t\t\t\t\t\tEgresses: []*contract.Egress{\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tDestination:   ServiceURL,\n+\t\t\t\t\t\t\t\t\tConsumerGroup: TriggerUUID,\n+\t\t\t\t\t\t\t\t\tUid:           TriggerUUID,\n+\t\t\t\t\t\t\t\t\tDeliveryOrder: contract.DeliveryOrder_ORDERED,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t\tGeneration: 1,\n+\t\t\t\t}),\n+\t\t\t\tBrokerDispatcherPodUpdate(configs.SystemNamespace, map[string]string{\n+\t\t\t\t\tbase.VolumeGenerationAnnotationKey: \"1\",\n+\t\t\t\t}),\n+\t\t\t},\n+\t\t\tWantStatusUpdates: []clientgotesting.UpdateActionImpl{\n+\t\t\t\t{\n+\t\t\t\t\tObject: newTrigger(\n+\t\t\t\t\t\treconcilertesting.WithInitTriggerConditions,\n+\t\t\t\t\t\treconcilertesting.WithTriggerSubscribed(),\n+\t\t\t\t\t\twithSubscriberURI,\n+\t\t\t\t\t\treconcilertesting.WithTriggerDependencyReady(),\n+\t\t\t\t\t\treconcilertesting.WithTriggerBrokerReady(),\n+\t\t\t\t\t\treconcilertesting.WithTriggerSubscriberResolvedSucceeded(),\n+\t\t\t\t\t\treconcilertesting.WithAnnotation(deliveryOrderAnnotation, deliveryOrderOrdered),\n+\t\t\t\t\t),\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tName: \"Reconciled normal - Trigger with unordered delivery\",\n+\t\t\tObjects: []runtime.Object{\n+\t\t\t\tNewBroker(\n+\t\t\t\t\tBrokerReady,\n+\t\t\t\t),\n+\t\t\t\tnewTrigger(reconcilertesting.WithAnnotation(deliveryOrderAnnotation, deliveryOrderUnordered)),\n+\t\t\t\tNewService(),\n+\t\t\t\tNewConfigMapFromContract(&contract.Contract{\n+\t\t\t\t\tResources: []*contract.Resource{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tUid:     BrokerUUID,\n+\t\t\t\t\t\t\tTopics:  []string{BrokerTopic()},\n+\t\t\t\t\t\t\tIngress: &contract.Ingress{IngressType: &contract.Ingress_Path{Path: receiver.Path(BrokerNamespace, BrokerName)}},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t}, &configs),\n+\t\t\t\tBrokerDispatcherPod(configs.SystemNamespace, nil),\n+\t\t\t},\n+\t\t\tKey: testKey,\n+\t\t\tWantEvents: []string{\n+\t\t\t\tfinalizerUpdatedEvent,\n+\t\t\t},\n+\t\t\tWantPatches: []clientgotesting.PatchActionImpl{\n+\t\t\t\tpatchFinalizers(),\n+\t\t\t},\n+\t\t\tWantUpdates: []clientgotesting.UpdateActionImpl{\n+\t\t\t\tConfigMapUpdate(&configs, &contract.Contract{\n+\t\t\t\t\tResources: []*contract.Resource{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tUid:     BrokerUUID,\n+\t\t\t\t\t\t\tTopics:  []string{BrokerTopic()},\n+\t\t\t\t\t\t\tIngress: &contract.Ingress{IngressType: &contract.Ingress_Path{Path: receiver.Path(BrokerNamespace, BrokerName)}},\n+\t\t\t\t\t\t\tEgresses: []*contract.Egress{\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tDestination:   ServiceURL,\n+\t\t\t\t\t\t\t\t\tConsumerGroup: TriggerUUID,\n+\t\t\t\t\t\t\t\t\tUid:           TriggerUUID,\n+\t\t\t\t\t\t\t\t\tDeliveryOrder: contract.DeliveryOrder_UNORDERED,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t\tGeneration: 1,\n+\t\t\t\t}),\n+\t\t\t\tBrokerDispatcherPodUpdate(configs.SystemNamespace, map[string]string{\n+\t\t\t\t\tbase.VolumeGenerationAnnotationKey: \"1\",\n+\t\t\t\t}),\n+\t\t\t},\n+\t\t\tWantStatusUpdates: []clientgotesting.UpdateActionImpl{\n+\t\t\t\t{\n+\t\t\t\t\tObject: newTrigger(\n+\t\t\t\t\t\treconcilertesting.WithInitTriggerConditions,\n+\t\t\t\t\t\treconcilertesting.WithTriggerSubscribed(),\n+\t\t\t\t\t\twithSubscriberURI,\n+\t\t\t\t\t\treconcilertesting.WithTriggerDependencyReady(),\n+\t\t\t\t\t\treconcilertesting.WithTriggerBrokerReady(),\n+\t\t\t\t\t\treconcilertesting.WithTriggerSubscriberResolvedSucceeded(),\n+\t\t\t\t\t\treconcilertesting.WithAnnotation(deliveryOrderAnnotation, deliveryOrderUnordered),\n+\t\t\t\t\t),\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n \t\t{\n \t\t\tName: \"Reconciled normal - Trigger delivery\",\n \t\t\tObjects: []runtime.Object{"
  },
  {
    "sha": "af430c52da3af8c75fdbc9e18a214bdc3a1539fe",
    "filename": "test/e2e_new/broker_test.go",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/knative-sandbox/eventing-kafka-broker/blob/75612680810b1411ae5abc17dba0fb5aa98c209c/test/e2e_new/broker_test.go",
    "raw_url": "https://github.com/knative-sandbox/eventing-kafka-broker/raw/75612680810b1411ae5abc17dba0fb5aa98c209c/test/e2e_new/broker_test.go",
    "contents_url": "https://api.github.com/repos/knative-sandbox/eventing-kafka-broker/contents/test/e2e_new/broker_test.go?ref=75612680810b1411ae5abc17dba0fb5aa98c209c",
    "patch": "@@ -28,8 +28,8 @@ import (\n \t\"knative.dev/reconciler-test/pkg/k8s\"\n \t\"knative.dev/reconciler-test/pkg/knative\"\n \n-\t\"knative.dev/eventing/test/rekt/resources/broker\"\n \tbrokerfeatures \"knative.dev/eventing/test/rekt/features/broker\"\n+\t\"knative.dev/eventing/test/rekt/resources/broker\"\n )\n \n func TestBrokerSourceToSink(t *testing.T) {"
  },
  {
    "sha": "172603d877f96bb4c8bafc8276a3710a790fd112",
    "filename": "test/e2e_new/ordered_test.go",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/knative-sandbox/eventing-kafka-broker/blob/75612680810b1411ae5abc17dba0fb5aa98c209c/test/e2e_new/ordered_test.go",
    "raw_url": "https://github.com/knative-sandbox/eventing-kafka-broker/raw/75612680810b1411ae5abc17dba0fb5aa98c209c/test/e2e_new/ordered_test.go",
    "contents_url": "https://api.github.com/repos/knative-sandbox/eventing-kafka-broker/contents/test/e2e_new/ordered_test.go?ref=75612680810b1411ae5abc17dba0fb5aa98c209c",
    "patch": "@@ -0,0 +1,124 @@\n+// +build e2e\n+\n+/*\n+ * Copyright 2021 The Knative Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package e2e_new\n+\n+import (\n+\t\"context\"\n+\t\"sort\"\n+\t\"strconv\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\tcloudevents \"github.com/cloudevents/sdk-go/v2\"\n+\tcetest \"github.com/cloudevents/sdk-go/v2/test\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"knative.dev/eventing-kafka-broker/control-plane/pkg/reconciler/kafka\"\n+\t\"knative.dev/eventing/test/rekt/features\"\n+\t\"knative.dev/eventing/test/rekt/resources/broker\"\n+\t\"knative.dev/eventing/test/rekt/resources/svc\"\n+\t\"knative.dev/pkg/system\"\n+\t\"knative.dev/reconciler-test/pkg/environment\"\n+\t\"knative.dev/reconciler-test/pkg/eventshub\"\n+\t\"knative.dev/reconciler-test/pkg/feature\"\n+\t\"knative.dev/reconciler-test/pkg/k8s\"\n+\t\"knative.dev/reconciler-test/pkg/knative\"\n+\n+\t\"knative.dev/eventing-kafka-broker/test/e2e_new/trigger\"\n+\n+\t. \"knative.dev/reconciler-test/pkg/eventshub/assert\"\n+)\n+\n+func OrderedDelivery() *feature.Feature {\n+\tf := feature.NewFeature()\n+\n+\tsourceName := feature.MakeRandomK8sName(\"source\")\n+\tsinkName := feature.MakeRandomK8sName(\"sink\")\n+\ttriggerName := feature.MakeRandomK8sName(\"trigger\")\n+\tbrokerName := feature.MakeRandomK8sName(\"broker\")\n+\n+\tev := cetest.FullEvent()\n+\t// We need to make sure the event goes always in the same partition, because ordering is per partition\n+\tev.SetExtension(\"partitionkey\", \"abc\")\n+\n+\tf.Setup(\"install broker\", broker.Install(brokerName, broker.WithBrokerClass(kafka.BrokerClass)))\n+\tf.Setup(\"broker is ready\", broker.IsReady(brokerName))\n+\tf.Setup(\"broker is addressable\", broker.IsAddressable(brokerName, features.Interval, features.Timeout))\n+\n+\tf.Setup(\"install sink\", eventshub.Install(\n+\t\tsinkName,\n+\t\teventshub.StartReceiver,\n+\t\teventshub.ResponseWaitTime(100*time.Millisecond),\n+\t))\n+\tf.Setup(\"install trigger\", trigger.Install(\n+\t\ttriggerName,\n+\t\tbrokerName,\n+\t\ttrigger.WithSubscriber(svc.AsRef(sinkName), \"\"),\n+\t\ttrigger.WithAnnotation(\"kafka.eventing.knative.dev/delivery.order\", \"ordered\"),\n+\t))\n+\tf.Setup(\"trigger is ready\", trigger.IsReady(triggerName))\n+\n+\tf.Setup(\"install source\", eventshub.Install(\n+\t\tsourceName,\n+\t\teventshub.StartSenderToResource(broker.Gvr(), brokerName),\n+\t\teventshub.InputEventWithEncoding(ev, cloudevents.EncodingBinary),\n+\t\teventshub.AddSequence,\n+\t\teventshub.SendMultipleEvents(20, 100*time.Millisecond),\n+\t))\n+\n+\tf.Assert(\"receive events in order\", func(ctx context.Context, t feature.T) {\n+\t\tevents := eventshub.StoreFromContext(ctx, sinkName).AssertExact(\n+\t\t\t20,\n+\t\t\tMatchKind(EventReceived),\n+\t\t\tMatchEvent(cetest.ContainsExtensions(\"sequence\")),\n+\t\t)\n+\n+\t\t// Check we received exactly 20 and no more\n+\t\trequire.Len(t, events, 20)\n+\n+\t\t// Now we need to check we received these in order\n+\t\tsort.SliceStable(events, func(i, j int) bool {\n+\t\t\treturn events[i].Time.Before(events[j].Time)\n+\t\t})\n+\t\tfor i, event := range events {\n+\t\t\texpectedSequence := i + 1 // sequence is 1 indexed\n+\t\t\tvar actualSequenceStr string\n+\t\t\terr := event.Event.ExtensionAs(\"sequence\", &actualSequenceStr)\n+\t\t\trequire.NoError(t, err)\n+\t\t\tactualSequence, err := strconv.Atoi(actualSequenceStr)\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, expectedSequence, actualSequence, \"events: %+v\", events)\n+\t\t}\n+\t})\n+\n+\treturn f\n+}\n+\n+func TestOrderedDelivery(t *testing.T) {\n+\tt.Parallel()\n+\n+\tctx, env := global.Environment(\n+\t\tknative.WithKnativeNamespace(system.Namespace()),\n+\t\tknative.WithLoggingConfig,\n+\t\tknative.WithTracingConfig,\n+\t\tk8s.WithEventListener,\n+\t\tenvironment.Managed(t),\n+\t)\n+\n+\tenv.Test(ctx, t, OrderedDelivery())\n+}"
  },
  {
    "sha": "9479220a5f770344b7525f0e3e754db23b4b3aef",
    "filename": "test/e2e_new/trigger/trigger.go",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/knative-sandbox/eventing-kafka-broker/blob/75612680810b1411ae5abc17dba0fb5aa98c209c/test/e2e_new/trigger/trigger.go",
    "raw_url": "https://github.com/knative-sandbox/eventing-kafka-broker/raw/75612680810b1411ae5abc17dba0fb5aa98c209c/test/e2e_new/trigger/trigger.go",
    "contents_url": "https://api.github.com/repos/knative-sandbox/eventing-kafka-broker/contents/test/e2e_new/trigger/trigger.go?ref=75612680810b1411ae5abc17dba0fb5aa98c209c",
    "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2021 The Knative Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package trigger\n+\n+import (\n+\t\"context\"\n+\t\"time\"\n+\n+\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n+\tduckv1 \"knative.dev/pkg/apis/duck/v1\"\n+\t\"knative.dev/reconciler-test/pkg/feature\"\n+\t\"knative.dev/reconciler-test/pkg/k8s\"\n+\t\"knative.dev/reconciler-test/pkg/manifest\"\n+)\n+\n+// TODO copy pasted from eventing, remove once upstream is clear how templating should work...\n+\n+type CfgFn func(map[string]interface{})\n+\n+func gvr() schema.GroupVersionResource {\n+\treturn schema.GroupVersionResource{Group: \"eventing.knative.dev\", Version: \"v1\", Resource: \"triggers\"}\n+}\n+\n+// WithAnnotation adds an annotation\n+func WithAnnotation(key string, value string) CfgFn {\n+\treturn func(cfg map[string]interface{}) {\n+\t\tif _, set := cfg[\"annotations\"]; !set {\n+\t\t\tcfg[\"annotations\"] = map[string]interface{}{}\n+\t\t}\n+\t\t(cfg[\"annotations\"].(map[string]interface{}))[key] = value\n+\t}\n+}\n+\n+// WithSubscriber adds the subscriber related config to a Trigger spec.\n+func WithSubscriber(ref *duckv1.KReference, uri string) CfgFn {\n+\treturn func(cfg map[string]interface{}) {\n+\t\tif _, set := cfg[\"subscriber\"]; !set {\n+\t\t\tcfg[\"subscriber\"] = map[string]interface{}{}\n+\t\t}\n+\t\tsubscriber := cfg[\"subscriber\"].(map[string]interface{})\n+\n+\t\tif uri != \"\" {\n+\t\t\tsubscriber[\"uri\"] = uri\n+\t\t}\n+\t\tif ref != nil {\n+\t\t\tif _, set := subscriber[\"ref\"]; !set {\n+\t\t\t\tsubscriber[\"ref\"] = map[string]interface{}{}\n+\t\t\t}\n+\t\t\tsref := subscriber[\"ref\"].(map[string]interface{})\n+\t\t\tsref[\"apiVersion\"] = ref.APIVersion\n+\t\t\tsref[\"kind\"] = ref.Kind\n+\t\t\t// skip namespace\n+\t\t\tsref[\"name\"] = ref.Name\n+\t\t}\n+\t}\n+}\n+\n+// Install will create a Trigger resource, augmented with the config fn options.\n+func Install(name, brokerName string, opts ...CfgFn) feature.StepFn {\n+\tcfg := map[string]interface{}{\n+\t\t\"name\": name,\n+\t}\n+\tif len(brokerName) > 0 {\n+\t\tcfg[\"brokerName\"] = brokerName\n+\t}\n+\tfor _, fn := range opts {\n+\t\tfn(cfg)\n+\t}\n+\treturn func(ctx context.Context, t feature.T) {\n+\t\tif _, err := manifest.InstallLocalYaml(ctx, cfg); err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t}\n+}\n+\n+// IsReady tests to see if a Trigger becomes ready within the time given.\n+func IsReady(name string, timing ...time.Duration) feature.StepFn {\n+\treturn k8s.IsReady(gvr(), name, timing...)\n+}"
  },
  {
    "sha": "6b512395e0258943851ecdd8317ee196a630e7ac",
    "filename": "test/e2e_new/trigger/trigger.yaml",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/knative-sandbox/eventing-kafka-broker/blob/75612680810b1411ae5abc17dba0fb5aa98c209c/test/e2e_new/trigger/trigger.yaml",
    "raw_url": "https://github.com/knative-sandbox/eventing-kafka-broker/raw/75612680810b1411ae5abc17dba0fb5aa98c209c/test/e2e_new/trigger/trigger.yaml",
    "contents_url": "https://api.github.com/repos/knative-sandbox/eventing-kafka-broker/contents/test/e2e_new/trigger/trigger.yaml?ref=75612680810b1411ae5abc17dba0fb5aa98c209c",
    "patch": "@@ -0,0 +1,47 @@\n+# Copyright 2021 The Knative Authors\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+apiVersion: eventing.knative.dev/v1\n+kind: Trigger\n+metadata:\n+  name: {{ .name }}\n+  namespace: {{ .namespace }}\n+  annotations:\n+  {{ range $key, $value := .annotations }}\n+    {{ $key }}: \"{{ $value }}\"\n+  {{ end }}\n+spec:\n+  {{ if .brokerName }}\n+  broker: {{ .brokerName }}\n+  {{ end }}\n+  {{ if .filter }}\n+  filter:\n+    attributes:\n+    {{ range $key, $value := .filter.attributes }}\n+      {{ $key }}: \"{{ $value }}\"\n+    {{ end }}\n+  {{end}}\n+  {{if .subscriber }}\n+  subscriber:\n+    {{ if .subscriber.ref }}\n+    ref:\n+      kind: {{ .subscriber.ref.kind }}\n+      namespace: {{ .namespace }}\n+      name: {{ .subscriber.ref.name }}\n+      apiVersion: {{ .subscriber.ref.apiVersion }}\n+    {{ end }}\n+    {{ if .subscriber.uri }}\n+    uri: {{ .subscriber.uri }}\n+    {{ end }}\n+  {{ end }}"
  }
]
