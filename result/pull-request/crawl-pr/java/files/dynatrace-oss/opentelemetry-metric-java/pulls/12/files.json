[
  {
    "sha": "b149a47cacc745e1ac6f538b83c26583561fdbb3",
    "filename": "README.md",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/blob/8955bb226d98813b5bba33374273053bacf9783f/README.md",
    "raw_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/raw/8955bb226d98813b5bba33374273053bacf9783f/README.md",
    "contents_url": "https://api.github.com/repos/dynatrace-oss/opentelemetry-metric-java/contents/README.md?ref=8955bb226d98813b5bba33374273053bacf9783f",
    "patch": "@@ -84,3 +84,25 @@ Creating an API token for your Dynatrace environment is described in the [Dynatr\n The scope required for sending metrics is the `Ingest metrics` scope in the **API v2** section:\n \n ![API token creation](docs/img/api_token.png)\n+\n+#### Metric Key Prefix\n+\n+The `setPrefix` function of the builder specifies an optional prefix, which is prepended metric key, separated by a dot (`<prefix>.<namespace>.<name>`).\n+When running `DynatraceMetricExporter.getDefault()`, the prefix will be set to `otel.java`.\n+\n+#### Default Dimensions\n+\n+The `setDefaultDimensions` parameter can be used to optionally specify a list of key/value pairs (`Label`s), which will be added as additional dimensions to all data points.\n+Dimension keys are unique will be de-duplicated, and only one dimension value per key will be sent to the server.\n+\n+#### Export OneAgent Metadata\n+\n+Can be set by adding `setEnrichWithOneAgentMetaData`. If running on a host with a running OneAgent, setting this option will export metadata collected by the OneAgent to the Dynatrace endpoint.\n+If no Dynatrace API endpoint is set, the default exporter endpoint will be the OneAgent endpoint, and this option will be set automatically.\n+Therefore, if no endpoint is specified, we assume a OneAgent is running and export to it, including metadata.\n+\n+### Logging\n+\n+The log-level for the example project is set to print everything that is logged in the program to the console.\n+This also prints which messages are sent to the server.\n+If this is too verbose, set the log level (`.level`) in the [logging.properties](example/src/main/resources/logging.properties) to a higher level, e.g. `INFO` or `WARNING`"
  },
  {
    "sha": "acb2bfe8bf8cbb7d76d440ee7295dc96770c83ca",
    "filename": "dynatrace/src/main/java/com/dynatrace/opentelemetry/metric/DynatraceMetricExporter.java",
    "status": "modified",
    "additions": 34,
    "deletions": 6,
    "changes": 40,
    "blob_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/blob/8955bb226d98813b5bba33374273053bacf9783f/dynatrace/src/main/java/com/dynatrace/opentelemetry/metric/DynatraceMetricExporter.java",
    "raw_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/raw/8955bb226d98813b5bba33374273053bacf9783f/dynatrace/src/main/java/com/dynatrace/opentelemetry/metric/DynatraceMetricExporter.java",
    "contents_url": "https://api.github.com/repos/dynatrace-oss/opentelemetry-metric-java/contents/dynatrace/src/main/java/com/dynatrace/opentelemetry/metric/DynatraceMetricExporter.java?ref=8955bb226d98813b5bba33374273053bacf9783f",
    "patch": "@@ -1,4 +1,4 @@\n-/*\n+/**\n  * Copyright 2020 Dynatrace LLC\n  *\n  * <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file\n@@ -14,6 +14,7 @@\n package com.dynatrace.opentelemetry.metric;\n \n import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.api.metrics.common.Labels;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.metrics.export.MetricExporter;\n@@ -36,19 +37,32 @@\n \n   private static final Logger logger = Logger.getLogger(DynatraceMetricExporter.class.getName());\n \n-  private DynatraceMetricExporter(URL url, String apiToken, Boolean enrichWithOneAgentMetaData) {\n+  private DynatraceMetricExporter(\n+      URL url,\n+      String apiToken,\n+      String prefix,\n+      Labels defaultDimensions,\n+      Boolean enrichWithOneAgentMetaData) {\n     this.url = url;\n     this.apiToken = apiToken;\n \n-    Collection<AbstractMap.SimpleEntry<String, String>> localTags = new ArrayList<>();\n+    Collection<AbstractMap.SimpleEntry<String, String>> localDimensions = new ArrayList<>();\n \n     if (enrichWithOneAgentMetaData) {\n       OneAgentMetadataEnricher enricher = new OneAgentMetadataEnricher(logger);\n-      localTags.addAll(enricher.getDimensionsFromOneAgentMetadata());\n+      localDimensions.addAll(enricher.getDimensionsFromOneAgentMetadata());\n     }\n \n+    if (defaultDimensions != null) {\n+      defaultDimensions.forEach(\n+          (String k, String v) -> {\n+            localDimensions.add(new AbstractMap.SimpleEntry<>(k, v));\n+          });\n+    }\n+\n+    MetricAdapter.getInstance().setPrefix(prefix);\n     // add the tags to the MetricAdapter.\n-    MetricAdapter.getInstance().setTags(localTags);\n+    MetricAdapter.getInstance().setTags(localDimensions);\n   }\n \n   public static Builder builder() {\n@@ -61,6 +75,7 @@ public static DynatraceMetricExporter getDefault() {\n     try {\n       builder\n           .setUrl(new URL(\"http://127.0.0.1:14499/metrics/ingest\"))\n+          .setPrefix(\"otel.java\")\n           .setEnrichWithOneAgentMetaData(true);\n     } catch (MalformedURLException e) {\n       // we can ignore the URL exception.\n@@ -127,6 +142,8 @@ public CompletableResultCode shutdown() {\n     private URL url;\n     private String apiToken = null;\n     private Boolean enrichWithOneAgentMetaData = false;\n+    private String prefix;\n+    private Labels defaultDimensions;\n \n     public Builder setUrl(String url) throws MalformedURLException {\n       this.url = new URL(url);\n@@ -148,8 +165,19 @@ public Builder setEnrichWithOneAgentMetaData(Boolean enrich) {\n       return this;\n     }\n \n+    public Builder setPrefix(String prefix) {\n+      this.prefix = prefix;\n+      return this;\n+    }\n+\n+    public Builder setDefaultDimensions(Labels defaultDimensions) {\n+      this.defaultDimensions = defaultDimensions;\n+      return this;\n+    }\n+\n     public DynatraceMetricExporter build() {\n-      return new DynatraceMetricExporter(url, apiToken, enrichWithOneAgentMetaData);\n+      return new DynatraceMetricExporter(\n+          url, apiToken, prefix, defaultDimensions, enrichWithOneAgentMetaData);\n     }\n   }\n }"
  },
  {
    "sha": "9171c23569ee39962b9395d5501010f640822f03",
    "filename": "dynatrace/src/main/java/com/dynatrace/opentelemetry/metric/MetricAdapter.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/blob/8955bb226d98813b5bba33374273053bacf9783f/dynatrace/src/main/java/com/dynatrace/opentelemetry/metric/MetricAdapter.java",
    "raw_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/raw/8955bb226d98813b5bba33374273053bacf9783f/dynatrace/src/main/java/com/dynatrace/opentelemetry/metric/MetricAdapter.java",
    "contents_url": "https://api.github.com/repos/dynatrace-oss/opentelemetry-metric-java/contents/dynatrace/src/main/java/com/dynatrace/opentelemetry/metric/MetricAdapter.java?ref=8955bb226d98813b5bba33374273053bacf9783f",
    "patch": "@@ -18,6 +18,7 @@\n import com.dynatrace.opentelemetry.metric.mint.MintMetricsMessage;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n import io.opentelemetry.api.metrics.common.Labels;\n import io.opentelemetry.sdk.metrics.data.AggregationTemporality;\n import io.opentelemetry.sdk.metrics.data.DoublePointData;\n@@ -61,6 +62,8 @@ public static MetricAdapter getInstance() {\n    */\n   private Map<String, Dimension> constantDimensions = null;\n \n+  private String prefix = null;\n+\n   /**\n    * Sets the dimensions (as key-value pairs) that should be added as dimensions to all metrics.\n    * Keys and values are sanitized by {@link #toMintDimension}. Tags specified here will overwrite\n@@ -95,6 +98,12 @@ public void setTags(Collection<AbstractMap.SimpleEntry<String, String>> tags) {\n     }\n   }\n \n+  public void setPrefix(String prefix) {\n+    if (this.prefix == null) {\n+      this.prefix = prefix;\n+    }\n+  }\n+\n   @VisibleForTesting\n   static void resetForTest() {\n     instance = null;\n@@ -305,6 +314,10 @@ private static void addGaugeData(\n    *     allowed length limits.\n    */\n   static String toMintMetricKey(String metricKey) throws DynatraceExporterException {\n+    String prefix = MetricAdapter.getInstance().prefix;\n+    if (!Strings.isNullOrEmpty(prefix)) {\n+      metricKey = prefix + \".\" + metricKey;\n+    }\n     StringBuilder builder = new StringBuilder();\n     for (String metricKeySection : SPLITTER.split(metricKey)) {\n       if (builder.length() != 0) {"
  },
  {
    "sha": "697fdb4bddeac9f0eca201568540f0d9629c1136",
    "filename": "dynatrace/src/test/java/com/dynatrace/opentelemetry/metric/ExportTest.java",
    "status": "modified",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/blob/8955bb226d98813b5bba33374273053bacf9783f/dynatrace/src/test/java/com/dynatrace/opentelemetry/metric/ExportTest.java",
    "raw_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/raw/8955bb226d98813b5bba33374273053bacf9783f/dynatrace/src/test/java/com/dynatrace/opentelemetry/metric/ExportTest.java",
    "contents_url": "https://api.github.com/repos/dynatrace-oss/opentelemetry-metric-java/contents/dynatrace/src/test/java/com/dynatrace/opentelemetry/metric/ExportTest.java?ref=8955bb226d98813b5bba33374273053bacf9783f",
    "patch": "@@ -30,10 +30,16 @@\n import java.net.HttpURLConnection;\n import java.net.URL;\n import java.util.Collections;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class ExportTest {\n \n+  @BeforeEach\n+  void reset() {\n+    MetricAdapter.resetForTest();\n+  }\n+\n   public static MetricData generateMetricData() {\n     return MetricData.createDoubleSum(\n         Resource.create(Attributes.builder().build()),\n@@ -47,6 +53,19 @@ public static MetricData generateMetricData() {\n             Collections.singleton(DoublePointData.create(123, 4560000, Labels.empty(), 194.0))));\n   }\n \n+  public static MetricData generateMetricDataWithLabels(Labels labels) {\n+    return MetricData.createDoubleSum(\n+        Resource.create(Attributes.builder().build()),\n+        InstrumentationLibraryInfo.getEmpty(),\n+        \"name\",\n+        \"desc\",\n+        \"\",\n+        DoubleSumData.create(\n+            true,\n+            AggregationTemporality.CUMULATIVE,\n+            Collections.singleton(DoublePointData.create(123, 4560000, labels, 194.0))));\n+  }\n+\n   @Test\n   public void testExport() throws IOException {\n     MetricData md = generateMetricData();\n@@ -89,4 +108,78 @@ public void testFailedExport() throws IOException {\n \n     assertEquals(CompletableResultCode.ofFailure(), result);\n   }\n+\n+  @Test\n+  public void testAddPrefix() throws IOException {\n+    MetricData md = generateMetricData();\n+    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    HttpURLConnection connection = mock(HttpURLConnection.class);\n+    when(connection.getURL()).thenReturn(new URL(\"http://localhost\"));\n+    when(connection.getOutputStream()).thenReturn(bos);\n+    when(connection.getResponseCode()).thenReturn(202);\n+\n+    DynatraceMetricExporter metricExporter =\n+        DynatraceMetricExporter.builder()\n+            .setApiToken(\"mytoken\")\n+            .setUrl(connection.getURL())\n+            .setPrefix(\"prefix\")\n+            .build();\n+\n+    CompletableResultCode result = metricExporter.export(Collections.singleton(md), connection);\n+\n+    verify(connection).setRequestMethod(\"POST\");\n+    verify(connection).setRequestProperty(\"Authorization\", \"Api-Token mytoken\");\n+    verify(connection).setRequestProperty(\"Content-Type\", \"text/plain; charset=utf-8\");\n+    assertEquals(\"prefix.name count,194.0 4\\n\", bos.toString());\n+    assertEquals(CompletableResultCode.ofSuccess(), result);\n+  }\n+\n+  @Test\n+  public void addDefaultDimensions() throws IOException {\n+    MetricData md = generateMetricData();\n+    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    HttpURLConnection connection = mock(HttpURLConnection.class);\n+    when(connection.getURL()).thenReturn(new URL(\"http://localhost\"));\n+    when(connection.getOutputStream()).thenReturn(bos);\n+    when(connection.getResponseCode()).thenReturn(202);\n+\n+    DynatraceMetricExporter metricExporter =\n+        DynatraceMetricExporter.builder()\n+            .setApiToken(\"mytoken\")\n+            .setUrl(connection.getURL())\n+            .setDefaultDimensions(Labels.of(\"default\", \"value\"))\n+            .build();\n+\n+    CompletableResultCode result = metricExporter.export(Collections.singleton(md), connection);\n+\n+    verify(connection).setRequestMethod(\"POST\");\n+    verify(connection).setRequestProperty(\"Authorization\", \"Api-Token mytoken\");\n+    verify(connection).setRequestProperty(\"Content-Type\", \"text/plain; charset=utf-8\");\n+    assertEquals(\"name,default=value count,194.0 4\\n\", bos.toString());\n+    assertEquals(CompletableResultCode.ofSuccess(), result);\n+  }\n+\n+  @Test\n+  public void testWithLabels() throws IOException {\n+    MetricData md = generateMetricDataWithLabels(Labels.of(\"label1\", \"val1\", \"label2\", \"val2\"));\n+    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    HttpURLConnection connection = mock(HttpURLConnection.class);\n+    when(connection.getURL()).thenReturn(new URL(\"http://localhost\"));\n+    when(connection.getOutputStream()).thenReturn(bos);\n+    when(connection.getResponseCode()).thenReturn(202);\n+\n+    DynatraceMetricExporter metricExporter =\n+        DynatraceMetricExporter.builder()\n+            .setApiToken(\"mytoken\")\n+            .setUrl(connection.getURL())\n+            .build();\n+\n+    CompletableResultCode result = metricExporter.export(Collections.singleton(md), connection);\n+\n+    verify(connection).setRequestMethod(\"POST\");\n+    verify(connection).setRequestProperty(\"Authorization\", \"Api-Token mytoken\");\n+    verify(connection).setRequestProperty(\"Content-Type\", \"text/plain; charset=utf-8\");\n+    assertEquals(\"name,label1=val1,label2=val2 count,194.0 4\\n\", bos.toString());\n+    assertEquals(CompletableResultCode.ofSuccess(), result);\n+  }\n }"
  },
  {
    "sha": "861f0d33841f7ee95b62cff4c222bdba22e111eb",
    "filename": "dynatrace/src/test/java/com/dynatrace/opentelemetry/metric/OneAgentMetadataEnricherTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/blob/8955bb226d98813b5bba33374273053bacf9783f/dynatrace/src/test/java/com/dynatrace/opentelemetry/metric/OneAgentMetadataEnricherTest.java",
    "raw_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/raw/8955bb226d98813b5bba33374273053bacf9783f/dynatrace/src/test/java/com/dynatrace/opentelemetry/metric/OneAgentMetadataEnricherTest.java",
    "contents_url": "https://api.github.com/repos/dynatrace-oss/opentelemetry-metric-java/contents/dynatrace/src/test/java/com/dynatrace/opentelemetry/metric/OneAgentMetadataEnricherTest.java?ref=8955bb226d98813b5bba33374273053bacf9783f",
    "patch": "@@ -1,3 +1,16 @@\n+/**\n+ * Copyright 2021 Dynatrace LLC\n+ *\n+ * <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * <p>http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * <p>Unless required by applicable law or agreed to in writing, software distributed under the\n+ * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.dynatrace.opentelemetry.metric;\n \n import static org.junit.jupiter.api.Assertions.*;"
  },
  {
    "sha": "d3cf01f2a9b7288331f044a39d985e95a246d790",
    "filename": "example/src/main/java/com/dynatrace/opentelemetry/metric/example/DynatraceExporterExample.java",
    "status": "modified",
    "additions": 16,
    "deletions": 2,
    "changes": 18,
    "blob_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/blob/8955bb226d98813b5bba33374273053bacf9783f/example/src/main/java/com/dynatrace/opentelemetry/metric/example/DynatraceExporterExample.java",
    "raw_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/raw/8955bb226d98813b5bba33374273053bacf9783f/example/src/main/java/com/dynatrace/opentelemetry/metric/example/DynatraceExporterExample.java",
    "contents_url": "https://api.github.com/repos/dynatrace-oss/opentelemetry-metric-java/contents/example/src/main/java/com/dynatrace/opentelemetry/metric/example/DynatraceExporterExample.java?ref=8955bb226d98813b5bba33374273053bacf9783f",
    "patch": "@@ -26,6 +26,14 @@\n \n public class DynatraceExporterExample {\n \n+  static {\n+    // read logging.properties to set up the logging levels.\n+    String path =\n+        DynatraceExporterExample.class.getClassLoader().getResource(\"logging.properties\").getFile();\n+\n+    System.setProperty(\"java.util.logging.config.file\", path);\n+  }\n+\n   private static final Random random = new Random();\n \n   public static void main(String[] args) throws Exception {\n@@ -35,8 +43,14 @@ public static void main(String[] args) throws Exception {\n       String endpointUrl = args[0];\n       String apiToken = args[1];\n       System.out.println(\"Setting up DynatraceMetricExporter to export to \" + endpointUrl);\n+      Labels defaultDimensions = Labels.of(\"environment\", \"staging\");\n       exporter =\n-          DynatraceMetricExporter.builder().setUrl(endpointUrl).setApiToken(apiToken).build();\n+          DynatraceMetricExporter.builder()\n+              .setUrl(endpointUrl)\n+              .setApiToken(apiToken)\n+              .setPrefix(\"otel.java\")\n+              .setDefaultDimensions(defaultDimensions)\n+              .build();\n     } else {\n       // default is to export to local OneAgent\n       System.out.println(\"No endpoint URL and API token passed as command line args\");\n@@ -59,7 +73,7 @@ public static void main(String[] args) throws Exception {\n     // Create a counter\n     LongCounter counter =\n         meter\n-            .longCounterBuilder(\"otel.java.example_counter\")\n+            .longCounterBuilder(\"example_counter\")\n             .setDescription(\"Just some counter used as an example\")\n             .setUnit(\"1\")\n             .build();"
  },
  {
    "sha": "2686d46d27639932f64a60fc1067f899522ddd70",
    "filename": "example/src/main/resources/logging.properties",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/blob/8955bb226d98813b5bba33374273053bacf9783f/example/src/main/resources/logging.properties",
    "raw_url": "https://github.com/dynatrace-oss/opentelemetry-metric-java/raw/8955bb226d98813b5bba33374273053bacf9783f/example/src/main/resources/logging.properties",
    "contents_url": "https://api.github.com/repos/dynatrace-oss/opentelemetry-metric-java/contents/example/src/main/resources/logging.properties?ref=8955bb226d98813b5bba33374273053bacf9783f",
    "patch": "@@ -0,0 +1,10 @@\n+# log to console.\n+handlers= java.util.logging.ConsoleHandler\n+\n+# default global logging level\n+.level= FINEST\n+\n+# set logging level for console export.\n+java.util.logging.ConsoleHandler.level = FINEST\n+java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n+java.util.logging.SimpleFormatter.format=[%1$tF %1$tT] [%4$-7s] %5$s %n\n\\ No newline at end of file"
  }
]
