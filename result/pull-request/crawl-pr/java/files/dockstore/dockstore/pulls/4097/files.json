[
  {
    "sha": "50b99356070cbb496042fd0e401ee1b9050ab4f4",
    "filename": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/EntryResourceIT.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/dockstore/dockstore/blob/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/EntryResourceIT.java",
    "raw_url": "https://github.com/dockstore/dockstore/raw/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/EntryResourceIT.java",
    "contents_url": "https://api.github.com/repos/dockstore/dockstore/contents/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/EntryResourceIT.java?ref=ad254478dbc4ba112c739c9aadff019467ebcd07",
    "patch": "@@ -0,0 +1,89 @@\n+package io.dockstore.client.cli;\n+\n+import java.util.List;\n+\n+import io.dockstore.common.CommonTestUtilities;\n+import io.dockstore.common.DescriptorLanguage;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.openapi.client.ApiClient;\n+import io.dockstore.openapi.client.ApiException;\n+import io.dockstore.openapi.client.api.EntriesApi;\n+import io.dockstore.openapi.client.api.UsersApi;\n+import io.dockstore.openapi.client.api.WorkflowsApi;\n+import io.dockstore.openapi.client.model.User;\n+import io.dockstore.openapi.client.model.Workflow;\n+import io.dockstore.openapi.client.model.WorkflowVersion;\n+import io.dockstore.webservice.resources.EntryResource;\n+import org.apache.http.HttpStatus;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.ExpectedSystemExit;\n+import org.junit.contrib.java.lang.system.SystemErrRule;\n+import org.junit.contrib.java.lang.system.SystemOutRule;\n+\n+import static org.junit.Assert.fail;\n+\n+public class EntryResourceIT extends BaseIT {\n+    @Rule\n+    public final ExpectedSystemExit systemExit = ExpectedSystemExit.none();\n+\n+    @Rule\n+    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog().muteForSuccessfulTests();\n+\n+    @Rule\n+    public final SystemErrRule systemErrRule = new SystemErrRule().enableLog().muteForSuccessfulTests();\n+\n+    @Before\n+    @Override\n+    public void resetDBBetweenTests() throws Exception {\n+        CommonTestUtilities.cleanStatePrivate2(SUPPORT, false);\n+    }\n+\n+    /**\n+     * Tests that exporting to ORCID does not work for entries or versions without DOI\n+     */\n+    @Test\n+    public void testOrcidExport() {\n+        ApiClient client = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        EntriesApi entriesApi = new EntriesApi(client);\n+        UsersApi usersApi = new UsersApi(client);\n+        User user = usersApi.getUser();\n+        WorkflowsApi workflowsApi = new WorkflowsApi(client);\n+        workflowsApi.manualRegister(SourceControl.GITHUB.name(), \"DockstoreTestUser/dockstore-whalesay-wdl\", \"/dockstore.wdl\", \"\",\n+                DescriptorLanguage.WDL.getShortName(), \"\");\n+\n+        List<Workflow> workflows = usersApi.userWorkflows(user.getId());\n+        Long workflowId = workflows.get(0).getId();\n+        workflowsApi.refresh1(workflowId, false);\n+        Assert.assertTrue(workflows.size() > 0);\n+        Workflow workflow = workflowsApi.getWorkflow(workflowId, null);\n+        List<WorkflowVersion> workflowVersions = workflow.getWorkflowVersions();\n+        Long workflowVersionId = workflowVersions.get(0).getId();\n+\n+        try {\n+            entriesApi.exportToORCID(workflowId, null);\n+            fail(\"Should not have been able to export an entry without DOI concept URL\");\n+        } catch (ApiException e) {\n+            Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, e.getCode());\n+            Assert.assertEquals(EntryResource.ENTRY_NO_DOI_ERROR_MESSAGE, e.getMessage());\n+        }\n+        testingPostgres.runUpdateStatement(\"update workflow set conceptDOI='dummy'\");\n+        try {\n+            entriesApi.exportToORCID(workflowId, workflowVersionId);\n+            fail(\"Should not have been able to export a version without DOI URL\");\n+        } catch (ApiException e) {\n+            Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, e.getCode());\n+            Assert.assertEquals(EntryResource.VERSION_NO_DOI_ERROR_MESSAGE, e.getMessage());\n+        }\n+        try {\n+            entriesApi.exportToORCID(workflowId, workflowVersionId + 1);\n+            fail(\"Should not have been able to export a version that doesn't belong to the entry\");\n+        } catch (ApiException e) {\n+            Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, e.getCode());\n+            Assert.assertEquals(EntryResource.VERSION_NOT_BELONG_TO_ENTRY_ERROR_MESSAGE, e.getMessage());\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "158c2389de671a8a1b3067d44a703551957bb2c3",
    "filename": "dockstore-integration-testing/src/test/resources/partialDockstoreTest.yml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/dockstore/dockstore/blob/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-integration-testing/src/test/resources/partialDockstoreTest.yml",
    "raw_url": "https://github.com/dockstore/dockstore/raw/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-integration-testing/src/test/resources/partialDockstoreTest.yml",
    "contents_url": "https://api.github.com/repos/dockstore/dockstore/contents/dockstore-integration-testing/src/test/resources/partialDockstoreTest.yml?ref=ad254478dbc4ba112c739c9aadff019467ebcd07",
    "patch": "@@ -105,3 +105,7 @@ uiConfig:\n   cwlVisualizerUri: https://view.commonwl.org\n \n   gitHubAppInstallationUrl: https://github.com/apps/dockstore-testing-application\n+\n+  orcidAuthUrl: https://sandbox.orcid.org/oauth/authorize\n+  orcidScope: /activities/update\n+  orcidRedirectPath: /auth/orcid.org"
  },
  {
    "sha": "f755809121fbe8a9aebf2c96ddd8817205003075",
    "filename": "dockstore-webservice/src/main/java/io/dockstore/webservice/DockstoreWebserviceApplication.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/dockstore/dockstore/blob/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/java/io/dockstore/webservice/DockstoreWebserviceApplication.java",
    "raw_url": "https://github.com/dockstore/dockstore/raw/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/java/io/dockstore/webservice/DockstoreWebserviceApplication.java",
    "contents_url": "https://api.github.com/repos/dockstore/dockstore/contents/dockstore-webservice/src/main/java/io/dockstore/webservice/DockstoreWebserviceApplication.java?ref=ad254478dbc4ba112c739c9aadff019467ebcd07",
    "patch": "@@ -334,7 +334,7 @@ public void run(DockstoreWebserviceConfiguration configuration, Environment envi\n \n         final PermissionsInterface authorizer = PermissionsFactory.createAuthorizer(tokenDAO, configuration);\n \n-        final EntryResource entryResource = new EntryResource(toolDAO, versionDAO, configuration);\n+        final EntryResource entryResource = new EntryResource(tokenDAO, toolDAO, versionDAO, configuration);\n         environment.jersey().register(entryResource);\n \n         final WorkflowResource workflowResource = new WorkflowResource(httpClient, hibernate.getSessionFactory(), authorizer, entryResource, configuration);"
  },
  {
    "sha": "f677010690e49e89dc307549760cf501b2da71dd",
    "filename": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/ORCIDHelper.java",
    "status": "modified",
    "additions": 10,
    "deletions": 11,
    "changes": 21,
    "blob_url": "https://github.com/dockstore/dockstore/blob/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/ORCIDHelper.java",
    "raw_url": "https://github.com/dockstore/dockstore/raw/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/ORCIDHelper.java",
    "contents_url": "https://api.github.com/repos/dockstore/dockstore/contents/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/ORCIDHelper.java?ref=ad254478dbc4ba112c739c9aadff019467ebcd07",
    "patch": "@@ -104,17 +104,7 @@ public static HttpResponse postProdWorkString(String id, String workString, Stri\n         return postWorkString(ORCID_BASE_URL, id, workString, token);\n     }\n \n-\n-    private static String transformWork(Work work) throws JAXBException {\n-        JAXBContext context = JAXBContext.newInstance(Work.class);\n-        StringWriter writer = new StringWriter();\n-        Marshaller marshaller = context.createMarshaller();\n-        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n-        marshaller.marshal(work, writer);\n-        return writer.getBuffer().toString();\n-    }\n-\n-    private static HttpResponse postWorkString(String baseURL, String id, String workString, String token) throws IOException {\n+    public static HttpResponse postWorkString(String baseURL, String id, String workString, String token) throws IOException {\n         HttpPost postRequest = new HttpPost(baseURL + id + \"/work\");\n         postRequest.addHeader(\"content-type\", \"application/vnd.orcid+xml\");\n         postRequest.addHeader(\"Authorization\", \"Bearer \" + token);\n@@ -127,4 +117,13 @@ private static HttpResponse postWorkString(String baseURL, String id, String wor\n             httpClient.close();\n         }\n     }\n+\n+    private static String transformWork(Work work) throws JAXBException {\n+        JAXBContext context = JAXBContext.newInstance(Work.class);\n+        StringWriter writer = new StringWriter();\n+        Marshaller marshaller = context.createMarshaller();\n+        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n+        marshaller.marshal(work, writer);\n+        return writer.getBuffer().toString();\n+    }\n }"
  },
  {
    "sha": "8d998b7e4763f56819d75c8a5c7614d2be9bcd70",
    "filename": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java",
    "status": "modified",
    "additions": 74,
    "deletions": 2,
    "changes": 76,
    "blob_url": "https://github.com/dockstore/dockstore/blob/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java",
    "raw_url": "https://github.com/dockstore/dockstore/raw/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java",
    "contents_url": "https://api.github.com/repos/dockstore/dockstore/contents/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EntryResource.java?ref=ad254478dbc4ba112c739c9aadff019467ebcd07",
    "patch": "@@ -17,6 +17,7 @@\n \n import java.io.IOException;\n import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.List;\n import java.util.Optional;\n@@ -32,6 +33,8 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.datatype.DatatypeConfigurationException;\n \n import com.codahale.metrics.annotation.Timed;\n import io.dockstore.common.DescriptorLanguage;\n@@ -42,11 +45,14 @@\n import io.dockstore.webservice.core.Entry;\n import io.dockstore.webservice.core.Service;\n import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Token;\n import io.dockstore.webservice.core.Tool;\n import io.dockstore.webservice.core.User;\n import io.dockstore.webservice.core.Version;\n import io.dockstore.webservice.core.database.VersionVerifiedPlatform;\n+import io.dockstore.webservice.helpers.ORCIDHelper;\n import io.dockstore.webservice.helpers.PublicStateManager;\n+import io.dockstore.webservice.jdbi.TokenDAO;\n import io.dockstore.webservice.jdbi.ToolDAO;\n import io.dockstore.webservice.jdbi.VersionDAO;\n import io.dropwizard.auth.Auth;\n@@ -71,6 +77,7 @@\n import io.swagger.v3.oas.annotations.security.SecurityScheme;\n import io.swagger.v3.oas.annotations.security.SecuritySchemes;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.http.HttpResponse;\n import org.apache.http.HttpStatus;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -90,8 +97,12 @@\n @Tag(name = \"entries\", description = ResourceConstants.ENTRIES)\n public class EntryResource implements AuthenticatedResourceInterface, AliasableResourceInterface<Entry> {\n \n+    public static final String VERSION_NOT_BELONG_TO_ENTRY_ERROR_MESSAGE = \"Version does not belong to entry\";\n+    public static final String ENTRY_NO_DOI_ERROR_MESSAGE = \"Entry does not have a concept DOI associated with it\";\n+    public static final String VERSION_NO_DOI_ERROR_MESSAGE = \"Version does not have a DOI url associated with it\";\n     private static final Logger LOG = LoggerFactory.getLogger(EntryResource.class);\n \n+    private final TokenDAO tokenDAO;\n     private final ToolDAO toolDAO;\n     private final VersionDAO versionDAO;\n     private final TopicsApi topicsApi;\n@@ -101,14 +112,22 @@\n     private final String discourseApiUsername = \"system\";\n     private final int maxDescriptionLength = 500;\n     private final String hostName;\n+    private String baseApiURL;\n \n-    public EntryResource(ToolDAO toolDAO, VersionDAO versionDAO, DockstoreWebserviceConfiguration configuration) {\n+    public EntryResource(TokenDAO tokenDAO, ToolDAO toolDAO, VersionDAO versionDAO, DockstoreWebserviceConfiguration configuration) {\n         this.toolDAO = toolDAO;\n         this.versionDAO = versionDAO;\n-\n+        this.tokenDAO = tokenDAO;\n         discourseUrl = configuration.getDiscourseUrl();\n         discourseKey = configuration.getDiscourseKey();\n         discourseCategoryId = configuration.getDiscourseCategoryId();\n+        try {\n+            URL orcidAuthUrl = new URL(configuration.getUiConfig().getOrcidAuthUrl());\n+            // baseUrl should result in something like \"https://api.sandbox.orcid.org/v3.0/\" or \"https://api.orcid.org/v3.0/\";\n+            baseApiURL = orcidAuthUrl.getProtocol() + \"://api.\" + orcidAuthUrl.getHost() + \"/v3.0/\";\n+        } catch (MalformedURLException e) {\n+            LOG.error(\"The ORCID Auth URL in the dropwizard configuration file is malformed.\", e);\n+        }\n \n         ApiClient apiClient = Configuration.getDefaultApiClient();\n         apiClient.addDefaultHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n@@ -196,6 +215,59 @@ public void checkEntryPermissions(final Optional<User> user, final Entry<? exten\n         }\n     }\n \n+    @POST\n+    @Path(\"/{entryId}/exportToOrcid\")\n+    @Timed\n+    @UnitOfWork\n+    @Operation(description = \"Export entry to ORCID\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiResponse(responseCode = HttpStatus.SC_NO_CONTENT + \"\", description = \"No Content\")\n+    @ApiResponse(responseCode = HttpStatus.SC_INTERNAL_SERVER_ERROR + \"\", description = \"Internal Server Error\")\n+    @ApiResponse(responseCode = HttpStatus.SC_NOT_FOUND + \"\", description = \"Not Found\")\n+    @ApiResponse(responseCode = HttpStatus.SC_BAD_REQUEST + \"\", description = \"Bad Request\")\n+    @ApiOperation(value = \"hidden\", hidden = true)\n+    public void exportToORCID(@Parameter(hidden = true, name = \"user\") @Auth User user, @Parameter(description = \"The id of the entry to export.\", name = \"entryId\", in = ParameterIn.PATH, required = true)\n+        @PathParam(\"entryId\") Long entryId,\n+        @Parameter(description = \"Optional version ID of the entry version to export.\", name = \"versionId\", in = ParameterIn.QUERY) @QueryParam(\"versionId\") Long versionId) {\n+        Entry<? extends Entry, ? extends Version> entry = toolDAO.getGenericEntryById(entryId);\n+        checkEntry(entry);\n+        checkEntryPermissions(Optional.of(user), entry);\n+        List<Token> orcidByUserId = tokenDAO.findOrcidByUserId(user.getId());\n+\n+        Optional<Version> optionalVersion = Optional.empty();\n+        if (versionId != null) {\n+            Version version = versionDAO.findVersionInEntry(entry.getId(), versionId);\n+            if (version == null) {\n+                throw new CustomWebApplicationException(VERSION_NOT_BELONG_TO_ENTRY_ERROR_MESSAGE, HttpStatus.SC_BAD_REQUEST);\n+            }\n+            if (version.getDoiURL() == null) {\n+                throw new CustomWebApplicationException(VERSION_NO_DOI_ERROR_MESSAGE, HttpStatus.SC_BAD_REQUEST);\n+            }\n+            optionalVersion = Optional.ofNullable(version);\n+        } else {\n+            if (entry.getConceptDoi() == null) {\n+                throw new CustomWebApplicationException(ENTRY_NO_DOI_ERROR_MESSAGE, HttpStatus.SC_BAD_REQUEST);\n+            }\n+        }\n+        if (baseApiURL == null) {\n+            LOG.error(\"ORCID auth URL is likely incorrect\");\n+            throw new CustomWebApplicationException(\"Could not export to ORCID: Dockstore ORCID integration is not set up correctly.\", HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        }\n+        if (orcidByUserId.isEmpty()) {\n+            throw new CustomWebApplicationException(\"ORCID account is not linked to user account\", HttpStatus.SC_BAD_REQUEST);\n+        }\n+        try {\n+            String orcidWorkString = ORCIDHelper.getOrcidWorkString(entry, optionalVersion);\n+            HttpResponse response = ORCIDHelper.postWorkString(baseApiURL, user.getOrcid(), orcidWorkString,\n+                    orcidByUserId.get(0).getToken());\n+            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_CREATED) {\n+                throw new CustomWebApplicationException(\"Could not export to ORCID: \" + response.getStatusLine().getReasonPhrase(), response.getStatusLine().getStatusCode());\n+            }\n+        } catch (JAXBException | DatatypeConfigurationException | IOException e) {\n+            throw new CustomWebApplicationException(\"Could not export to ORCID: \" + e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n+        }\n+\n+    }\n+\n     @POST\n     @Path(\"/{id}/topic\")\n     @Timed"
  },
  {
    "sha": "c595040e30aa1765065716d4f057dd46443484af",
    "filename": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/TokenResource.java",
    "status": "modified",
    "additions": 15,
    "deletions": 4,
    "changes": 19,
    "blob_url": "https://github.com/dockstore/dockstore/blob/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/TokenResource.java",
    "raw_url": "https://github.com/dockstore/dockstore/raw/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/TokenResource.java",
    "contents_url": "https://api.github.com/repos/dockstore/dockstore/contents/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/TokenResource.java?ref=ad254478dbc4ba112c739c9aadff019467ebcd07",
    "patch": "@@ -17,6 +17,8 @@\n package io.dockstore.webservice.resources;\n \n import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n import java.text.MessageFormat;\n import java.util.Collections;\n import java.util.Date;\n@@ -116,7 +118,6 @@\n     private static final String QUAY_URL = \"https://quay.io/api/v1/\";\n     private static final String BITBUCKET_URL = \"https://bitbucket.org/\";\n     private static final String GITLAB_URL = \"https://gitlab.com/\";\n-    private static final String ORCID_URL = \"https://orcid.org/\";\n     private static final TOSVersion CURRENT_TOS_VERSION = TOSVersion.TOS_VERSION_2;\n     private static final PrivacyPolicyVersion CURRENT_PRIVACY_POLICY_VERSION = PrivacyPolicyVersion.PRIVACY_POLICY_VERSION_2_5;\n     private static final Logger LOG = LoggerFactory.getLogger(TokenResource.class);\n@@ -141,11 +142,13 @@\n     private final String googleClientSecret;\n     private final String orcidClientID;\n     private final String orcidClientSecret;\n+    private final String orcidScope;\n     private final HttpClient client;\n     private final CachingAuthenticator<String, User> cachingAuthenticator;\n \n     private final String orcidSummary = \"Add a new orcid.org token\";\n     private final String orcidDescription = \"Using OAuth code from ORCID, request and store tokens from ORCID API\";\n+    private String orcidUrl = null;\n \n     public TokenResource(TokenDAO tokenDAO, UserDAO enduserDAO, DeletedUsernameDAO deletedUsernameDAO, HttpClient client, CachingAuthenticator<String, User> cachingAuthenticator,\n             DockstoreWebserviceConfiguration configuration) {\n@@ -167,9 +170,17 @@ public TokenResource(TokenDAO tokenDAO, UserDAO enduserDAO, DeletedUsernameDAO d\n         this.googleClientID = configuration.getGoogleClientID();\n         this.googleClientSecret = configuration.getGoogleClientSecret();\n         this.orcidClientID = configuration.getOrcidClientID();\n+        this.orcidScope = configuration.getUiConfig().getOrcidScope();\n         this.orcidClientSecret = configuration.getOrcidClientSecret();\n         this.client = client;\n         this.cachingAuthenticator = cachingAuthenticator;\n+        try {\n+            URL orcidAuthUrl = new URL(configuration.getUiConfig().getOrcidAuthUrl());\n+            // orcidUrl should be something like \"https://sandbox.orcid.org/\" or \"https://orcid.org/\"\n+            orcidUrl = orcidAuthUrl.getProtocol() + \"://\" + orcidAuthUrl.getHost() + \"/\";\n+        } catch (MalformedURLException e) {\n+            LOG.error(\"The ORCID Auth URL in the dropwizard configuration file is malformed.\", e);\n+        }\n     }\n \n     @GET\n@@ -684,12 +695,12 @@ public Token addOrcidToken(@ApiParam(hidden = true) @Parameter(hidden = true, na\n         }\n \n         final AuthorizationCodeFlow flow = new AuthorizationCodeFlow.Builder(BearerToken.authorizationHeaderAccessMethod(), HTTP_TRANSPORT,\n-                JSON_FACTORY, new GenericUrl(ORCID_URL + \"oauth/token\"),\n+                JSON_FACTORY, new GenericUrl(orcidUrl + \"oauth/token\"),\n                 new ClientParametersAuthentication(orcidClientID, orcidClientSecret), orcidClientID,\n-                ORCID_URL + \"/authorize\").build();\n+                orcidUrl + \"/authorize\").build();\n \n         try {\n-            TokenResponse tokenResponse = flow.newTokenRequest(code).setScopes(Collections.singletonList(\"/authenticate\"))\n+            TokenResponse tokenResponse = flow.newTokenRequest(code).setScopes(Collections.singletonList(orcidScope))\n                     .setRequestInitializer(request -> request.getHeaders().setAccept(\"application/json\")).execute();\n             accessToken = tokenResponse.getAccessToken();\n             refreshToken = tokenResponse.getRefreshToken();"
  },
  {
    "sha": "dfdb148f2bb480436e761b4a3ce4dd292f33256e",
    "filename": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml",
    "status": "modified",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/dockstore/dockstore/blob/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/resources/openapi3/openapi.yaml",
    "raw_url": "https://github.com/dockstore/dockstore/raw/ad254478dbc4ba112c739c9aadff019467ebcd07/dockstore-webservice/src/main/resources/openapi3/openapi.yaml",
    "contents_url": "https://api.github.com/repos/dockstore/dockstore/contents/dockstore-webservice/src/main/resources/openapi3/openapi.yaml?ref=ad254478dbc4ba112c739c9aadff019467ebcd07",
    "patch": "@@ -3766,6 +3766,37 @@ paths:\n         - bearer: []\n       tags:\n         - curation\n+  /entries/{entryId}/exportToOrcid:\n+    post:\n+      description: Export entry to ORCID\n+      operationId: exportToORCID\n+      parameters:\n+        - description: The id of the entry to export.\n+          in: path\n+          name: entryId\n+          required: true\n+          schema:\n+            format: int64\n+            type: integer\n+        - description: Optional version ID of the entry version to export.\n+          in: query\n+          name: versionId\n+          schema:\n+            format: int64\n+            type: integer\n+      responses:\n+        \"204\":\n+          description: No Content\n+        \"400\":\n+          description: Bad Request\n+        \"404\":\n+          description: Not Found\n+        \"500\":\n+          description: Internal Server Error\n+      security:\n+        - bearer: []\n+      tags:\n+        - entries\n   /entries/{entryId}/verifiedPlatforms:\n     get:\n       description: Get the verified platforms for each version of an entry."
  }
]
