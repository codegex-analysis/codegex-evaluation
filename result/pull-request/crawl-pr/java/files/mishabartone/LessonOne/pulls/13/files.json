[
  {
    "sha": "273551e2e6b30d86986665f8ab95177018fc8ef3",
    "filename": ".idea/compiler.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/.idea/compiler.xml",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/.idea/compiler.xml",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/.idea/compiler.xml?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -7,6 +7,7 @@\n         <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n         <outputRelativeToContentRoot value=\"true\" />\n         <module name=\"HomeWork1\" />\n+        <module name=\"Repository\" />\n       </profile>\n     </annotationProcessing>\n   </component>"
  },
  {
    "sha": "eb564db44115b6afcb49437a0ea7d26e63608187",
    "filename": ".idea/misc.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/.idea/misc.xml",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/.idea/misc.xml?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -1,6 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project version=\"4\">\n   <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n+  <component name=\"JavaScriptSettings\">\n+    <option name=\"languageLevel\" value=\"ES6\" />\n+  </component>\n   <component name=\"MavenProjectsManager\">\n     <option name=\"originalFiles\">\n       <list>"
  },
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/.idea/uiDesigner.xml?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Palette2\">\n+    <group name=\"Swing\">\n+      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Button\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"RadioButton\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"CheckBox\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Label\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n+          <preferred-size width=\"-1\" height=\"20\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+    </group>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "bfd2da1c2b560c896f6b7367b0c5dd179c1db579",
    "filename": "src/main/java/HomeWork1/FirstClass.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork1/FirstClass.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork1/FirstClass.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork1/FirstClass.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -1,6 +1,7 @@\n package HomeWork1;\n \n public class FirstClass {\n+\n     public static void main(String[] args) {\n         byte b = 0;                 // 8 бит -128 .. 127\n         short s = 0;                // 16 бит -32768 .. 32767"
  },
  {
    "sha": "9826a51460a8586a18aa44cae6f65093eac08724",
    "filename": "src/main/java/HomeWork10/Main.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork10/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork10/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork10/Main.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,35 @@\n+package HomeWork10;\n+\n+public class Main {\n+\n+    public static void main(String[] args) throws MyArraySizeException, MyArrayDataException {\n+\n+        String [][] arr = {{\"5\", \"7\", \"3\", \"17\"}, {\"7\", \"0\", \"1\", \"12\"}, {\"7\", \"0\", \"1\", \"12\"}, {\"7\", \"0\", \"1\", \"1\"}};\n+        if (checkMyArray(arr)) {\n+            System.out.println(\"Массив преобразован корректно!\");\n+        };\n+\n+    }\n+\n+    public static boolean checkMyArray(String[][] arr) throws MyArraySizeException, MyArrayDataException{\n+\n+        itsFourFour(arr);\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            for (int j = 0; j < arr[i].length; j++) {\n+                try {\n+                    int num = Integer.parseInt(arr[i][j]);\n+                } catch (NumberFormatException e){\n+                    throw new MyArrayDataException(arr, i, j);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void itsFourFour(String[][] arr) throws MyArraySizeException {\n+        if(arr.length != 4 || arr[0].length != 4){\n+            throw new MyArraySizeException();\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "78918b727ed283b1fbaec830bda934e9426512cf",
    "filename": "src/main/java/HomeWork10/MyArrayDataException.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork10/MyArrayDataException.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork10/MyArrayDataException.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork10/MyArrayDataException.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,9 @@\n+package HomeWork10;\n+\n+public class MyArrayDataException extends Exception {\n+\n+    public MyArrayDataException(String[][] arr, int i, int j){\n+        super(\"Array data Exception! Value \" + arr[i][j] + \" on the position \" + i + \" \" + j +\" can't be transformed into int\");\n+    }\n+\n+}"
  },
  {
    "sha": "7abad43dfc03c3e29563cda6aad6aed8e30da233",
    "filename": "src/main/java/HomeWork10/MyArraySizeException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork10/MyArraySizeException.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork10/MyArraySizeException.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork10/MyArraySizeException.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,7 @@\n+package HomeWork10;\n+\n+public class MyArraySizeException extends Exception {\n+    public MyArraySizeException(){\n+        super(\"Array size Exception!\");\n+    }\n+}"
  },
  {
    "sha": "6ee05ab0dd613578691d777e46f77709b6da3aaa",
    "filename": "src/main/java/HomeWork11/Main.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork11/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork11/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork11/Main.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,43 @@\n+package HomeWork11;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        String[] words = {\"привет\" , \"пока\", \"кот\", \"пес\", \"сергей\", \"узкий\", \"пока\", \"зачем\", \"кто\", \"кот\"};\n+\n+        Map<String, Integer> wordsMap = new HashMap<>();\n+\n+        for (String word : words){\n+\n+            if (!wordsMap.containsKey(word)){\n+                wordsMap.put(word, 1);\n+            } else {\n+                int curValue = wordsMap.get(word);\n+                wordsMap.put(word, ++curValue);\n+            }\n+\n+        }\n+\n+        for(Map.Entry<String, Integer> item : wordsMap.entrySet()){\n+\n+            System.out.printf(\"Слово: %s Повторений: %d \\n\", item.getKey(), item.getValue());\n+        }\n+\n+        PhoneCataloque pc = new PhoneCataloque();\n+        pc.add(\"911\", \"Police\");\n+        pc.add(\"112\", \"Police\");\n+        pc.add(\"02\", \"Police\");\n+        pc.add(\"03\", \"Medicine\");\n+        pc.add(\"01\", \"Firefighters\");\n+\n+        for (String num : pc.get(\"Police\")){\n+            System.out.println(num);\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "06490ec1e9b8a7b0186fc4aa9167fb34ddb9cac1",
    "filename": "src/main/java/HomeWork11/PhoneCataloque.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork11/PhoneCataloque.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork11/PhoneCataloque.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork11/PhoneCataloque.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,31 @@\n+package HomeWork11;\n+\n+import java.util.*;\n+\n+public class PhoneCataloque {\n+\n+    private Map<String, String> cataloque = new HashMap<>();\n+\n+    public Map<String, String> getCataloque() {\n+        return cataloque;\n+    }\n+\n+    public void add(String phoneNum, String surname){\n+        cataloque.put(phoneNum, surname);\n+    }\n+\n+    public List<String> get(String surname){\n+\n+        List<String> phoneList = new ArrayList<>();\n+        Set<Map.Entry<String, String>> entrySet = cataloque.entrySet();\n+\n+        for (Map.Entry<String, String> pair : entrySet) {\n+            if (surname.equals(pair.getValue())) {\n+                phoneList.add(pair.getKey()); // нашли наше значение и возвращаем  ключ\n+            }\n+        }\n+\n+        return phoneList;\n+    }\n+\n+}"
  },
  {
    "sha": "531b748bd1f622acc2fdc3d4dff27bd893fb7cf1",
    "filename": "src/main/java/HomeWork12/Main.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork12/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork12/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork12/Main.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,98 @@\n+package HomeWork12;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        // 2\n+        int needNum = 1;\n+        ArrayList<Integer> test = new ArrayList<>();\n+        test.add(1);\n+        test.add(2);\n+\n+        Operation index = ()->{\n+            for (int i = 0; i < test.size(); i++) {\n+                if (test.get(i) == needNum){\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        };\n+        System.out.println(index.calculate());\n+\n+        // 3\n+        String myStr = \"I love java\";\n+\n+        OperationStringList reverseList = () -> {\n+            char[] arrCh =  myStr.toCharArray();\n+            List<String> strList = new ArrayList<>();\n+            String result = \"\";\n+            for (int i = arrCh.length - 1; i >= 0; i--) {\n+                strList.add(String.valueOf(arrCh[i]));\n+            }\n+            return strList;\n+        };\n+\n+        String result = \"\";\n+        for (String el : reverseList.needList()){\n+            result += el;\n+        }\n+\n+        System.out.println(result);\n+\n+        // 4\n+        Operation maximum = ()->{\n+\n+            if (test.size() > 0){\n+                int max = test.get(0);\n+                for (int i = 1; i < test.size(); i++) {\n+                    if (test.get(i) > max){\n+                        max = test.get(i);\n+                    }\n+                }\n+                return max;\n+            }\n+            return 0; // либо бросаем какую-либо ошибку\n+        };\n+\n+        System.out.println(maximum.calculate());\n+\n+        // 5 через лямбда -\n+        Operation average = ()->{\n+            int sum = 0;\n+            for(int el : test){\n+                sum += el;\n+            }\n+            return sum / test.size();\n+        };\n+\n+        System.out.println(average.calculate());\n+\n+        // 6\n+        List<String> stringList = new ArrayList<>();\n+        stringList.add(\"hey\");\n+        stringList.add(\"aga\");\n+        stringList.add(\"ara\");\n+        stringList.add(\"mey\");\n+        stringList.add(\"arr\");\n+\n+        OperationStringList searchList = ()->{\n+            List<String> needList = new ArrayList<>();\n+            for(String el : stringList){\n+                if (el.length() == 3 && el.charAt(0) == 'a'){\n+                    needList.add(el);\n+                }\n+            }\n+            return needList;\n+        };\n+\n+        for (String el : searchList.needList()){\n+            System.out.println(el);\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "4f5e523578befeb7f4374e79a7c64a810c518410",
    "filename": "src/main/java/HomeWork12/Operation.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork12/Operation.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork12/Operation.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork12/Operation.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,5 @@\n+package HomeWork12;\n+\n+public interface Operation {\n+    int calculate();\n+}"
  },
  {
    "sha": "b9e4a7bd81300e1ebd5c95c6616b6f1c1c564f17",
    "filename": "src/main/java/HomeWork12/OperationStringList.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork12/OperationStringList.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork12/OperationStringList.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork12/OperationStringList.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,7 @@\n+package HomeWork12;\n+\n+import java.util.List;\n+\n+public interface OperationStringList {\n+    List<String> needList();\n+}"
  },
  {
    "sha": "fafeeddb89b056b92a6d9cfe7ad3e68dfeafccfd",
    "filename": "src/main/java/HomeWork13/Main.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork13/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork13/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork13/Main.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,52 @@\n+package HomeWork13;\n+\n+public class Main {\n+\n+    public static void main(String[] args) throws InterruptedException {\n+\n+        final int size = 10000000;\n+        float[] arr = new float[size];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = 1.0f;\n+        }\n+\n+        makeFloat1(arr);\n+        makeFloat2(arr);\n+\n+    }\n+\n+    public static void makeFloat1(float[] arr){\n+\n+        long a = System.currentTimeMillis();\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = (float)(arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+        }\n+        System.out.println(System.currentTimeMillis() - a);\n+\n+    }\n+\n+    public static void makeFloat2(float[] arr) throws InterruptedException {\n+\n+        final int h = arr.length / 2;\n+\n+        float[] a1 = new float[h];\n+        float[] a2 = new float[arr.length - h];\n+\n+        long a = System.currentTimeMillis();\n+        System.arraycopy(arr, 0, a1, 0, h);\n+        System.arraycopy(arr, h, a2, 0, h);\n+\n+        Thread thread1 = new Thread(new MyThread(a1));\n+        Thread thread2 = new Thread(new MyThread(a2));\n+\n+        thread1.join();\n+        thread2.join();\n+\n+        System.arraycopy(a1, 0, arr, 0, h);\n+        System.arraycopy(a2, 0, arr, h, h);\n+        System.out.println(System.currentTimeMillis() - a);\n+\n+    }\n+\n+}"
  },
  {
    "sha": "5be48f6ec480fc834526070333489f22010ee201",
    "filename": "src/main/java/HomeWork13/MyThread.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork13/MyThread.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork13/MyThread.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork13/MyThread.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,19 @@\n+package HomeWork13;\n+\n+public class MyThread extends Thread {\n+\n+    private float[] arr;\n+\n+    public MyThread(float[] arr) {\n+        this.arr = arr;\n+    }\n+\n+    @Override\n+    public void run() {\n+        synchronized (arr){\n+            for (int i = 0; i < arr.length; i++) {\n+                arr[i] = (float)(arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "d5d312230cd8b4aa9b4d92bd9d48425e1572c81c",
    "filename": "src/main/java/HomeWork14/EchoClient.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork14/EchoClient.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork14/EchoClient.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork14/EchoClient.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,151 @@\n+package HomeWork14;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final String SERVER_ADDR = \"localhost\";\n+    private final int SERVER_PORT = 8189;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream in;\n+    private DataOutputStream out;\n+\n+    public EchoClient() {\n+        try {\n+            openConnection();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public void openConnection() throws IOException {\n+        socket = new Socket(SERVER_ADDR, SERVER_PORT);\n+        in = new DataInputStream(socket.getInputStream());\n+        out = new DataOutputStream(socket.getOutputStream());\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    while (true) {\n+                        String strFromServer = in.readUTF();\n+                        if (strFromServer.equalsIgnoreCase(\"/end\")) {\n+                            break;\n+                        }\n+                        chatArea.append(strFromServer);\n+                        chatArea.append(\"\\n\");\n+                    }\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }).start();\n+    }\n+\n+    public void closeConnection() {\n+        try {\n+            in.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            out.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            socket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void sendMessage() {\n+        if (!msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                String msg = msgInputField.getText();\n+                chatArea.append(\"Client: \" + msg);\n+                chatArea.append(\"\\n\");\n+\n+                out.writeUTF(msg);\n+                msgInputField.setText(\"\");\n+                msgInputField.grabFocus();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+                JOptionPane.showMessageDialog(null, \"Ошибка отправки сообщения\");\n+            }\n+        }\n+    }\n+\n+    public void prepareGUI() {\n+        // Параметры окна\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+        // Текстовое поле для вывода сообщений\n+        chatArea = new JTextArea();\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+        // Нижняя панель с полем для ввода сообщений и кнопкой отправки сообщений\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+        btnSendMsg.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                sendMessage();\n+            }\n+        });\n+        msgInputField.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                sendMessage();\n+            }\n+        });\n+\n+        // Настраиваем действие на закрытие окна\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    out.writeUTF(\"/end\");\n+                    closeConnection();\n+                } catch (IOException exc) {\n+                    exc.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(new Runnable() {\n+            @Override\n+            public void run() {\n+                new EchoClient();\n+            }\n+        });\n+    }\n+\n+}"
  },
  {
    "sha": "23abbaac27ef371fc44e16148d5660cad0012b6d",
    "filename": "src/main/java/HomeWork14/EchoServer.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork14/EchoServer.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork14/EchoServer.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork14/EchoServer.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,46 @@\n+package HomeWork14;\n+\n+import java.io.*;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+\n+public class EchoServer {\n+\n+    public static void main(String[] args) {\n+        Socket socket = null;\n+        try (ServerSocket serverSocket = new ServerSocket(8189)) {\n+            System.out.println(\"Сервер запущен, ожидаем подключения...\");\n+            socket = serverSocket.accept();\n+            System.out.println(\"Клиент подключился\");\n+            DataInputStream in = new DataInputStream(socket.getInputStream());\n+            DataOutputStream out = new DataOutputStream(socket.getOutputStream());\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n+            while (true) {\n+                String str = in.readUTF();\n+                System.out.println(str);\n+                if (str.equals(\"/end\")) {\n+                    break;\n+                }\n+                new Thread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        try {\n+                            while (true) {\n+                                String name = reader.readLine();\n+                                out.writeUTF(\"Serv: \" + name);\n+                                if (name.equalsIgnoreCase(\"/end\")) {\n+                                    break;\n+                                }\n+                            }\n+                        } catch (Exception e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n+                }).start();\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "80bfe256a8127a6bb982c583ad0079b8c34dcb4f",
    "filename": "src/main/java/HomeWork2/SecClass.java",
    "status": "added",
    "additions": 142,
    "deletions": 0,
    "changes": 142,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork2/SecClass.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork2/SecClass.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork2/SecClass.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,142 @@\n+package HomeWork2;\n+\n+public class SecClass {\n+\n+    public static void main(String[] args) {\n+\n+        // 1\n+        int[] arrayOne = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0 };\n+        for (int i = 0; i < arrayOne.length; i++) {\n+            if (arrayOne[i] == 0){\n+                arrayOne[i] = 1;\n+            } else if (arrayOne[i] == 1){\n+                arrayOne[i] = 0;\n+            }\n+        }\n+\n+        // 2\n+        int[] arrayTwo = {0, 3, 6, 9, 12, 15, 18, 21};\n+        for (int i = 0; i < arrayTwo.length; i++) {\n+            if(i == 0){\n+                arrayTwo[i] = 0;\n+            } else if (i == 1){\n+                arrayTwo[i] = 3;\n+            } else if (i == 2){\n+                arrayTwo[i] = 6;\n+            } else if (i == 3){\n+                arrayTwo[i] = 9;\n+            } else if (i == 4){\n+                arrayTwo[i] = 12;\n+            } else if (i == 5){\n+                arrayTwo[i] = 15;\n+            } else if (i == 6){\n+                arrayTwo[i] = 18;\n+            } else if (i == 7){\n+                arrayTwo[i] = 21;\n+            }\n+        }\n+\n+        // 3\n+        int[] arrayThree = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 };\n+        for (int i = 0; i < arrayThree.length; i++) {\n+            if (arrayThree[i] < 6){\n+                arrayThree[i] *= 2;\n+            }\n+        }\n+\n+        // 4\n+        int [][] doubleArr = new int[7][7];\n+        for (int i = 0; i < doubleArr.length; i++) {\n+            doubleArr[i][i] = 1;\n+            doubleArr[i][doubleArr[i].length-i-1] = 1;\n+        }\n+\n+        // 5\n+        if (arrayThree.length > 0) {\n+            int min = arrayThree[0];\n+            int max = arrayThree[0];\n+            for (int i = 0; i < arrayThree.length; i++){\n+                if (arrayThree[i] < min) {\n+                    min = arrayThree[i];\n+                }\n+                if (arrayThree[i] > max) {\n+                    max = arrayThree[i];\n+                }\n+            }\n+        }\n+\n+        // 6\n+        int[] arraySix = {1, 1, 1, 2, 1};\n+        boolean balance = checkBalance(arraySix);\n+\n+        // 7 - не получилось\n+        int[] arraySeven = {1, 2, 3};\n+        int n = 1;\n+        changePosition(arraySeven, n);\n+\n+\n+    }\n+\n+    static void changePosition(int[] mas, int number){\n+\n+//        boolean isSorted = false;\n+//        int buf;\n+//\n+//        if (mas.length > 0){\n+//            mas[0] = mas.length-1;\n+//        }\n+//\n+//        while(!isSorted) {\n+//            isSorted = true;\n+//            for (int i = 0; i < mas.length-1; i++) {\n+//                if(mas[i] > mas[i+1]){\n+//                    isSorted = false;\n+//\n+//                    buf = mas[i];\n+//                    mas[i] = mas[i+1];\n+//                    mas[i+1] = buf;\n+//                }\n+//            }\n+//        }\n+\n+\n+//        int buf;\n+//\n+//        for (int i = 0; i < mas.length - 1; i++) {\n+//            buf = mas[i];\n+//            if (i == number - 1) {\n+//                mas[i] = mas[mas.length-number];\n+//            } else if (i == number) {\n+//\n+//            } else {\n+//                mas[i] = mas[i + 1];\n+//            }\n+//            mas[i + 1] = buf;\n+//        }\n+//\n+//\n+//        for (int i = 0; i < mas.length; i++){\n+//            System.out.println(mas[i]);\n+//        }\n+\n+    }\n+\n+    static boolean checkBalance(int[] array){\n+        int sum1 = 0;\n+        int sum2 = 0;\n+        for (int i = 0; i < array.length; i++){\n+            sum1 += array[i];\n+            for (int j = i+1; j < array.length; j++){\n+                sum2 += array[j];\n+                if (j == array.length - 1){\n+                    if (sum1 == sum2){\n+                        return true;\n+                    } else {\n+                        sum2 = 0;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "08381b174f7118acf17dc3f479061f8a167fbf11",
    "filename": "src/main/java/HomeWork3/ThirdClass.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork3/ThirdClass.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork3/ThirdClass.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork3/ThirdClass.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,81 @@\n+package HomeWork3;\n+\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class ThirdClass {\n+    public static void main(String[] args) {\n+\n+        // 1\n+        Scanner sc = new Scanner(System.in);\n+\n+        boolean tryAgain = true;\n+\n+        while (tryAgain){\n+            Random rd = new Random(); // число от 0 до n-1\n+            int needNum = rd.nextInt(10); // от 0 до 9 включительно\n+\n+            for (int i = 0; i < 3; i++) {\n+                System.out.println(\"Please enter number\");\n+                if (sc.hasNextInt()) {\n+                    int number = sc.nextInt();\n+                    if (number > needNum) {\n+                        System.out.println(\"Number is smaller\");\n+                    } else if (number < needNum) {\n+                        System.out.println(\"Number is bigger\");\n+                    } else {\n+                        System.out.println(\"Correct!\");\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            System.out.println(\"Wanna try again?  1 – yes, 0 – no\");\n+            if (sc.hasNextInt()){\n+                if (sc.nextInt() == 0) {\n+                    tryAgain = false;\n+                }\n+            }\n+        }\n+\n+\n+        // 2\n+        String[] words = {\"apple\", \"orange\", \"lemon\", \"banana\", \"apricot\", \"avocado\", \"broccoli\",\n+                \"carrot\", \"cherry\", \"garlic\", \"grape\", \"melon\", \"leak\", \"kiwi\", \"mango\", \"mushroom\",\n+                \"nut\", \"olive\", \"pea\", \"peanut\", \"pear\", \"pepper\", \"pineapple\", \"pumpkin\", \"potato\"};\n+\n+        Random rd = new Random(); // число от 0 до n-1\n+        int index = rd.nextInt(26); // от 0 до 26 включительно\n+\n+        String help = \"###############\";\n+        String theWord = words[index];\n+\n+        while (true){\n+            System.out.println(\"Please enter the word\");\n+            String myWord = sc.nextLine();\n+\n+            if (!myWord.equals(theWord)) {\n+                for(int i = 0; i < theWord.length() - 1; i++){\n+                    if (myWord.length() > i){\n+                        char curW = theWord.charAt(i);\n+                        char curM = myWord.charAt(i);\n+                        if (curW == curM){\n+                            help = changeCharInPosition(i, curM, help);\n+                        }\n+                    }\n+                }\n+                System.out.println(\"Nope, here's your help-word: \" + help);\n+            } else {\n+                System.out.println(\"Correct!\");\n+                break;\n+            }\n+        }\n+\n+    }\n+\n+    public static String changeCharInPosition(int position, char ch, String str){\n+        char[] charArray = str.toCharArray();\n+        charArray[position] = ch;\n+        return new String(charArray);\n+    }\n+}"
  },
  {
    "sha": "1a2b9d47cabd1fa8c4e90ac790da7a58f62a14c8",
    "filename": "src/main/java/HomeWork4/FourClass.java",
    "status": "added",
    "additions": 210,
    "deletions": 0,
    "changes": 210,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork4/FourClass.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork4/FourClass.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork4/FourClass.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,210 @@\n+package HomeWork4;\n+\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class FourClass {\n+\n+    public static Scanner sc = new Scanner(System.in);\n+    private static char[][] gameMap;\n+    private static final int DOTS_TO_WIN = 4;\n+    private static final char EMPTY_DOT = '.';\n+    private static final char X_DOT = 'X';\n+    private static final char O_DOT = 'O';\n+    private static boolean gameOn = true;\n+\n+    public static void main(String[] args) {\n+        startGame();\n+    }\n+\n+    private static void startGame() {\n+        createMap();\n+        printMap();\n+\n+        int count = 0;\n+        while (gameOn) {\n+            humanTurn();\n+            count++;\n+            printMap();\n+            if (checkWin(X_DOT)){\n+                System.out.println(\"You win\");\n+                break;\n+            } else if (count == DOTS_TO_WIN * DOTS_TO_WIN){\n+                System.out.println(\"Its draw\");\n+                break;\n+            }\n+            System.out.println(\"--------------\");\n+            pcTurn();\n+            count++;\n+            printMap();\n+            if (checkWin(O_DOT)){\n+                System.out.println(\"PC win\");\n+                break;\n+            } else if (count == DOTS_TO_WIN * DOTS_TO_WIN){\n+                System.out.println(\"Its draw\");\n+                break;\n+            }\n+        }\n+    }\n+\n+    private static void pcTurn(){\n+        try {\n+            Thread.sleep(700);\n+        } catch (Exception e){}\n+\n+        int x = 0;\n+        int y = 0;\n+\n+        Random rd = new Random();\n+        boolean checkValid = false;\n+        checkValid = pcBeatYou();\n+        while(!checkValid) {\n+            x = rd.nextInt(DOTS_TO_WIN);\n+            y = rd.nextInt(DOTS_TO_WIN);\n+            checkValid = isValid(x, y);\n+            if (checkValid) {\n+                gameMap[x][y] = O_DOT;\n+            } else {\n+                continue;\n+            }\n+        }\n+    }\n+\n+    private static boolean pcBeatYou(){\n+        int crossNum1 = 0;\n+        int crossNum2 = 0;\n+        for (int i = 0; i < DOTS_TO_WIN; i++) {\n+            int curWinH = 0;\n+            int curWinW = 0;\n+            for (int j = 0; j < DOTS_TO_WIN; j++) {\n+                if (gameMap[j][i] == X_DOT){\n+                    curWinH++;\n+                }\n+                if (gameMap[i][j] == X_DOT){\n+                    curWinW++;\n+                }\n+            }\n+            if (curWinH == DOTS_TO_WIN - 1){\n+                for (int j = 0; j < DOTS_TO_WIN; j++) {\n+                    if (gameMap[j][i] == EMPTY_DOT){\n+                        gameMap[j][i] = O_DOT;\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (curWinW == DOTS_TO_WIN - 1){\n+                for (int j = 0; j < DOTS_TO_WIN; j++) {\n+                    if (gameMap[i][j] == EMPTY_DOT){\n+                        gameMap[i][j] = O_DOT;\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (gameMap[i][i] == X_DOT){\n+                crossNum1++;\n+            }\n+            if (gameMap[i][gameMap[i].length-i-1] == X_DOT){\n+                crossNum2++;\n+            }\n+        }\n+        if (crossNum1 == DOTS_TO_WIN - 1){\n+            for (int i = 0; i < DOTS_TO_WIN; i++) {\n+                if (gameMap[i][i] == EMPTY_DOT){\n+                    gameMap[i][i] = O_DOT;\n+                    return true;\n+                }\n+            }\n+        }\n+        if (crossNum2 == DOTS_TO_WIN - 1){\n+            for (int i = 0; i < DOTS_TO_WIN; i++) {\n+                if (gameMap[i][gameMap[i].length-i-1] == EMPTY_DOT){\n+                    gameMap[i][gameMap[i].length-i-1] = O_DOT;\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static void humanTurn() {\n+        boolean checkValid = false;\n+        while(!checkValid) {\n+            int x = -1;\n+            int y = -1;\n+            System.out.println(\"Please write X and Y coordination\");\n+            if (sc.hasNextInt()) {\n+                x = sc.nextInt() - 1;\n+            }\n+            if (sc.hasNextInt()) {\n+                y = sc.nextInt() - 1;\n+            }\n+            checkValid = isValid(x, y);\n+            if (checkValid) {\n+                sc.nextLine();\n+                gameMap[x][y] = X_DOT;\n+            }\n+        }\n+    }\n+\n+    private static boolean isValid(int x, int y) {\n+        if (x < 0 || y < 0 || x > DOTS_TO_WIN || y > DOTS_TO_WIN || gameMap[x][y] != EMPTY_DOT) {\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private static void printMap() {\n+        for (int i = 0; i < gameMap.length; i++) {\n+            for (int j = 0; j < gameMap[i].length; j++) {\n+                System.out.print(\"|\");\n+                System.out.print(gameMap[i][j]);\n+            }\n+            System.out.println(\"|\");\n+        }\n+    }\n+\n+    private static void createMap() {\n+        if (DOTS_TO_WIN < 3) {\n+            System.out.println(\"Field is too small\");\n+            System.exit(1);\n+        }\n+        gameMap = new char[DOTS_TO_WIN][DOTS_TO_WIN];\n+        for (int i = 0; i < gameMap.length; i++) {\n+            for (int j = 0; j < gameMap[i].length; j++) {\n+                gameMap[i][j] = EMPTY_DOT;\n+            }\n+        }\n+    }\n+\n+    private static boolean checkWin(char c) {\n+        int crossNum1 = 0;\n+        int crossNum2 = 0;\n+        for (int i = 0; i < DOTS_TO_WIN; i++) {\n+            int curWinH = 0;\n+            int curWinW = 0;\n+            for (int j = 0; j < DOTS_TO_WIN; j++) {\n+                if (gameMap[j][i] == c){\n+                    curWinH++;\n+                }\n+                if (gameMap[i][j] == c){\n+                    curWinW++;\n+                }\n+            }\n+            if (curWinH == DOTS_TO_WIN || curWinW == DOTS_TO_WIN){\n+                return true;\n+            }\n+            if (gameMap[i][i] == c){\n+                crossNum1++;\n+            }\n+            if (gameMap[i][gameMap[i].length-i-1] == c){\n+                crossNum2++;\n+            }\n+        }\n+        if (crossNum1 == DOTS_TO_WIN || crossNum2 == DOTS_TO_WIN){\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+}"
  },
  {
    "sha": "40d0776ee7bad61a7bd29d863ebca9f368a7fdeb",
    "filename": "src/main/java/HomeWork5/Employee.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork5/Employee.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork5/Employee.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork5/Employee.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,53 @@\n+package HomeWork5;\n+\n+public class Employee {\n+\n+    private String email;\n+    private long phoneNumber;\n+    private int salary;\n+    private int age;\n+\n+    public Employee(String email, long phoneNumber, int salary, int age) {\n+        this.email = email;\n+        this.phoneNumber = phoneNumber;\n+        this.salary = salary;\n+        this.age = age;\n+    }\n+\n+    public void printEmployeeInfo() {\n+        System.out.println(\"Employee email is \" + email + \", his phone number is \" + phoneNumber\n+        + \", his salary is \" + salary + \" his age is \" + age + \".\");\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public long getPhoneNumber() {\n+        return phoneNumber;\n+    }\n+\n+    public void setPhoneNumber(long phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public int getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(int salary) {\n+        this.salary = salary;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+}"
  },
  {
    "sha": "6d164867652df95f457011643d51431743dabd4f",
    "filename": "src/main/java/HomeWork5/FiveClass.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork5/FiveClass.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork5/FiveClass.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork5/FiveClass.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,22 @@\n+package HomeWork5;\n+\n+public class FiveClass {\n+\n+    public static void main(String[] args) {\n+\n+        Employee[] employeesArray = new Employee[5];\n+        employeesArray[0] = new Employee(\"mail@mail.ru\", 911, 15000, 22);\n+        employeesArray[1] = new Employee(\"mail@gmail.ru\", 112, 25000, 42);\n+        employeesArray[2] = new Employee(\"gmail@mail.ru\", 89095719589l, 10000, 34);\n+        employeesArray[3] = new Employee(\"mail@onego.ru\", 89214581059l, 5000, 24);\n+        employeesArray[4] = new Employee(\"mail@rkmail.ru\", 02, 9000, 18);\n+\n+        for (int i = 0; i < employeesArray.length; i++) {\n+            if(employeesArray[i].getAge() > 40){\n+                employeesArray[i].printEmployeeInfo();\n+            }\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "0f317730f914e6a4476973158a8faee6aeaf1e2a",
    "filename": "src/main/java/HomeWork6/Animal.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork6/Animal.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork6/Animal.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork6/Animal.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,21 @@\n+package HomeWork6;\n+\n+public class Animal {\n+\n+    static int animalCount = 0;\n+    String name;\n+\n+    public Animal(String name) {\n+        animalCount++;\n+        this.name = name;\n+    }\n+\n+    public void run(int length){\n+        System.out.println(\"Animal run \" + length);\n+    }\n+\n+    public void swim(int length){\n+        System.out.println(\"Animal swim \" + length);\n+    }\n+\n+}"
  },
  {
    "sha": "d942dcae955eb141004dda52e4ccfa5195e5c3b9",
    "filename": "src/main/java/HomeWork6/Cat.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork6/Cat.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork6/Cat.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork6/Cat.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,26 @@\n+package HomeWork6;\n+\n+public class Cat extends Animal {\n+\n+    static int catCount = 0;\n+\n+    public Cat(String name) {\n+        super(name);\n+        catCount++;\n+    }\n+\n+    @Override\n+    public void run(int length) {\n+        if (length > 200){\n+            System.out.println(\"Its too much for \" + this.name);\n+        } else {\n+            System.out.println(\"\" + this.name + \" пробежал \" + length + \"м.\");\n+        }\n+    }\n+\n+    @Override\n+    public void swim(int length) {\n+        System.out.println(\"\" + this.name + \" cant swim!\");\n+    }\n+\n+}"
  },
  {
    "sha": "211cd3715d04ae0976de88055989fa6e99a1a034",
    "filename": "src/main/java/HomeWork6/Dog.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork6/Dog.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork6/Dog.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork6/Dog.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,29 @@\n+package HomeWork6;\n+\n+public class Dog extends Animal {\n+\n+    static int dogCount = 0;\n+\n+    public Dog(String name) {\n+        super(name);\n+        dogCount++;\n+    }\n+\n+    @Override\n+    public void run(int length) {\n+        if (length > 500){\n+            System.out.println(\"Its too much for \" + this.name);\n+        } else {\n+            System.out.println(\"\" + this.name + \" пробежал \" + length + \"м.\");\n+        }\n+    }\n+\n+    @Override\n+    public void swim(int length) {\n+        if (length > 10){\n+            System.out.println(\"Its too much for \" + this.name);\n+        } else {\n+            System.out.println(\"\" + this.name + \" проплыл \" + length + \"м.\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "bf530ac9ab9fb78b42f2446b8f99e36421957b35",
    "filename": "src/main/java/HomeWork6/Main.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork6/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork6/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork6/Main.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,27 @@\n+package HomeWork6;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        Dog muhtar = new Dog(\"Muhtar\");\n+        Dog rex = new Dog(\"Rex\");\n+\n+        Cat barsik = new Cat(\"Barsik\");\n+        Cat igor = new Cat(\"Igor\");\n+\n+        muhtar.run(500);\n+        muhtar.swim(100);\n+\n+        rex.swim(1);\n+        rex.run(100);\n+\n+        barsik.run(15);\n+        barsik.swim(15);\n+\n+        igor.run(100);\n+        igor.swim(1);\n+\n+    }\n+\n+}"
  },
  {
    "sha": "7733eb70fdff1163a8816f608e0d433451e4855b",
    "filename": "src/main/java/HomeWork7/Animals/Cat.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork7/Animals/Cat.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork7/Animals/Cat.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork7/Animals/Cat.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,20 @@\n+package HomeWork7.Animals;\n+\n+import HomeWork7.Stuff.Plate;\n+\n+public class Cat {\n+\n+    String name;\n+    boolean satiety = false;\n+\n+    public Cat(String name) {\n+        this.name = name;\n+    }\n+\n+    public void eat(Plate plate){\n+        if (plate.tryToEat(15)){\n+            this.satiety = true;\n+        }\n+        System.out.println(\"Cat \" + this.name + (this.satiety ? \" is satiety\" : \" is hungry\"));\n+    }\n+}"
  },
  {
    "sha": "a6ea47621d207eae7c0488bad2a61f515941a5f3",
    "filename": "src/main/java/HomeWork7/Main.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork7/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork7/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork7/Main.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,23 @@\n+package HomeWork7;\n+\n+import HomeWork7.Animals.Cat;\n+import HomeWork7.Stuff.Plate;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        Cat[] cats = new Cat[5];\n+        cats[0] = new Cat(\"Vaska\");\n+        cats[1] = new Cat(\"Igor\");\n+        cats[2] = new Cat(\"Senya\");\n+        cats[3] = new Cat(\"Timofey\");\n+        cats[4] = new Cat(\"Weeknd\");\n+\n+        Plate plate = new Plate(40);\n+\n+        for (int i = 0; i < cats.length; i++){\n+            cats[i].eat(plate);\n+        }\n+    }\n+}"
  },
  {
    "sha": "6660612516ae03bad7e2ad612ccdffce3c90f7c9",
    "filename": "src/main/java/HomeWork7/Stuff/Plate.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork7/Stuff/Plate.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork7/Stuff/Plate.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork7/Stuff/Plate.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,27 @@\n+package HomeWork7.Stuff;\n+\n+public class Plate {\n+\n+    private int food = 0;\n+\n+    public Plate(int food) {\n+        this.food = food;\n+    }\n+\n+    public void addFood(int newFood){\n+        this.food += newFood;\n+    }\n+\n+    public boolean tryToEat(int useFood){\n+        if (this.food - useFood >= 0){\n+            this.food -= useFood;\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    public int getFood() {\n+        return food;\n+    }\n+}"
  },
  {
    "sha": "33dca8cf24602c0fadc80a4a83717a4d0e05f78d",
    "filename": "src/main/java/HomeWork8/Main.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork8/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork8/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork8/Main.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,7 @@\n+package HomeWork8;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        new NewWindow();\n+    }\n+}"
  },
  {
    "sha": "c064b55ef5ba8698e719cdaeec5ba80e5602900e",
    "filename": "src/main/java/HomeWork8/NewWindow.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork8/NewWindow.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/9786e350d1e63e957eb3931b9694475028872ed0/src/main/java/HomeWork8/NewWindow.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork8/NewWindow.java?ref=9786e350d1e63e957eb3931b9694475028872ed0",
    "patch": "@@ -0,0 +1,82 @@\n+package HomeWork8;\n+\n+import javax.swing.*;\n+import javax.swing.border.EmptyBorder;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.util.Random;\n+\n+public class NewWindow extends JFrame {\n+    public NewWindow() {\n+\n+        setTitle(\"Your chat window\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        setBounds(200, 200, 600, 600);\n+        setVisible(true);\n+\n+        JPanel mainPanel = new JPanel();\n+\n+        mainPanel.setLayout(new BorderLayout());\n+\n+        JTextField field = new JTextField();\n+        JTextArea chatArea = new JTextArea();\n+\n+        chatArea.setEditable(false);\n+        chatArea.setColumns(20);\n+        chatArea.setRows(5);\n+        chatArea.setLineWrap(true);\n+        chatArea.setText(\"Say hello then answer.\" +  \"\\n\");\n+        chatArea.setWrapStyleWord(true);\n+        chatArea.setCaretPosition(chatArea.getDocument().getLength());\n+\n+        mainPanel.add(field, BorderLayout.SOUTH);\n+        mainPanel.add(chatArea, BorderLayout.CENTER);\n+\n+        JScrollPane sp = new JScrollPane(chatArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n+        mainPanel.add(sp);\n+\n+        field.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                String t = e.getActionCommand();\n+                chatArea.append(\"YOU --> \" + t + \"\\n\");\n+                chatArea.setCaretPosition(chatArea.getDocument().getLength());\n+                String answer = botAnswer(t);\n+                chatArea.append(\"CPU --> \" + answer + \"\\n\");\n+                chatArea.setCaretPosition(chatArea.getDocument().getLength());\n+                field.setText(\"\");\n+\n+            }\n+        });\n+\n+        chatArea.setBackground(Color.LIGHT_GRAY);\n+\n+        add(mainPanel);\n+        setVisible(true);\n+    }\n+\n+    String botAnswer(String myMessage){\n+            try {\n+                Thread.sleep(700);\n+            } catch (Exception e){}\n+\n+            if (myMessage.contains(\"hey\") || myMessage.contains(\"hello\")){\n+                return \"hey man\";\n+            }\n+\n+            Random rd = new Random();\n+            int num = rd.nextInt(4);\n+            if (num == 0){\n+                return \"sup bro\";\n+            } else if (num == 1){\n+                return \"yeah\";\n+            } else if (num == 2){\n+                return \"no i dont think so\";\n+            } else if (num == 3){\n+                return \"probably, good luck!\";\n+            } else {\n+                return \"sorry i dont know i'am just a program!\";\n+            }\n+    }\n+}"
  }
]
