[
  {
    "sha": "7eb7681c6f309163acb04236f853964843ce8f98",
    "filename": ".idea/compiler.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/.idea/compiler.xml",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/.idea/compiler.xml",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/.idea/compiler.xml?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -6,6 +6,7 @@\n         <sourceOutputDir name=\"target/generated-sources/annotations\" />\n         <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n         <outputRelativeToContentRoot value=\"true\" />\n+        <module name=\"Repository\" />\n         <module name=\"HomeWork1\" />\n       </profile>\n     </annotationProcessing>"
  },
  {
    "sha": "eb564db44115b6afcb49437a0ea7d26e63608187",
    "filename": ".idea/misc.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/.idea/misc.xml",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/.idea/misc.xml",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/.idea/misc.xml?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -1,6 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project version=\"4\">\n   <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n+  <component name=\"JavaScriptSettings\">\n+    <option name=\"languageLevel\" value=\"ES6\" />\n+  </component>\n   <component name=\"MavenProjectsManager\">\n     <option name=\"originalFiles\">\n       <list>"
  },
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/.idea/uiDesigner.xml?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Palette2\">\n+    <group name=\"Swing\">\n+      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Button\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"RadioButton\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"CheckBox\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Label\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n+          <preferred-size width=\"-1\" height=\"20\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+    </group>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "bfd2da1c2b560c896f6b7367b0c5dd179c1db579",
    "filename": "src/main/java/HomeWork1/FirstClass.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork1/FirstClass.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork1/FirstClass.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork1/FirstClass.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -1,6 +1,7 @@\n package HomeWork1;\n \n public class FirstClass {\n+\n     public static void main(String[] args) {\n         byte b = 0;                 // 8 бит -128 .. 127\n         short s = 0;                // 16 бит -32768 .. 32767"
  },
  {
    "sha": "9826a51460a8586a18aa44cae6f65093eac08724",
    "filename": "src/main/java/HomeWork10/Main.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork10/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork10/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork10/Main.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,35 @@\n+package HomeWork10;\n+\n+public class Main {\n+\n+    public static void main(String[] args) throws MyArraySizeException, MyArrayDataException {\n+\n+        String [][] arr = {{\"5\", \"7\", \"3\", \"17\"}, {\"7\", \"0\", \"1\", \"12\"}, {\"7\", \"0\", \"1\", \"12\"}, {\"7\", \"0\", \"1\", \"1\"}};\n+        if (checkMyArray(arr)) {\n+            System.out.println(\"Массив преобразован корректно!\");\n+        };\n+\n+    }\n+\n+    public static boolean checkMyArray(String[][] arr) throws MyArraySizeException, MyArrayDataException{\n+\n+        itsFourFour(arr);\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            for (int j = 0; j < arr[i].length; j++) {\n+                try {\n+                    int num = Integer.parseInt(arr[i][j]);\n+                } catch (NumberFormatException e){\n+                    throw new MyArrayDataException(arr, i, j);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void itsFourFour(String[][] arr) throws MyArraySizeException {\n+        if(arr.length != 4 || arr[0].length != 4){\n+            throw new MyArraySizeException();\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "78918b727ed283b1fbaec830bda934e9426512cf",
    "filename": "src/main/java/HomeWork10/MyArrayDataException.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork10/MyArrayDataException.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork10/MyArrayDataException.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork10/MyArrayDataException.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,9 @@\n+package HomeWork10;\n+\n+public class MyArrayDataException extends Exception {\n+\n+    public MyArrayDataException(String[][] arr, int i, int j){\n+        super(\"Array data Exception! Value \" + arr[i][j] + \" on the position \" + i + \" \" + j +\" can't be transformed into int\");\n+    }\n+\n+}"
  },
  {
    "sha": "7abad43dfc03c3e29563cda6aad6aed8e30da233",
    "filename": "src/main/java/HomeWork10/MyArraySizeException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork10/MyArraySizeException.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork10/MyArraySizeException.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork10/MyArraySizeException.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,7 @@\n+package HomeWork10;\n+\n+public class MyArraySizeException extends Exception {\n+    public MyArraySizeException(){\n+        super(\"Array size Exception!\");\n+    }\n+}"
  },
  {
    "sha": "6ee05ab0dd613578691d777e46f77709b6da3aaa",
    "filename": "src/main/java/HomeWork11/Main.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork11/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork11/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork11/Main.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,43 @@\n+package HomeWork11;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        String[] words = {\"привет\" , \"пока\", \"кот\", \"пес\", \"сергей\", \"узкий\", \"пока\", \"зачем\", \"кто\", \"кот\"};\n+\n+        Map<String, Integer> wordsMap = new HashMap<>();\n+\n+        for (String word : words){\n+\n+            if (!wordsMap.containsKey(word)){\n+                wordsMap.put(word, 1);\n+            } else {\n+                int curValue = wordsMap.get(word);\n+                wordsMap.put(word, ++curValue);\n+            }\n+\n+        }\n+\n+        for(Map.Entry<String, Integer> item : wordsMap.entrySet()){\n+\n+            System.out.printf(\"Слово: %s Повторений: %d \\n\", item.getKey(), item.getValue());\n+        }\n+\n+        PhoneCataloque pc = new PhoneCataloque();\n+        pc.add(\"911\", \"Police\");\n+        pc.add(\"112\", \"Police\");\n+        pc.add(\"02\", \"Police\");\n+        pc.add(\"03\", \"Medicine\");\n+        pc.add(\"01\", \"Firefighters\");\n+\n+        for (String num : pc.get(\"Police\")){\n+            System.out.println(num);\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "06490ec1e9b8a7b0186fc4aa9167fb34ddb9cac1",
    "filename": "src/main/java/HomeWork11/PhoneCataloque.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork11/PhoneCataloque.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork11/PhoneCataloque.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork11/PhoneCataloque.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,31 @@\n+package HomeWork11;\n+\n+import java.util.*;\n+\n+public class PhoneCataloque {\n+\n+    private Map<String, String> cataloque = new HashMap<>();\n+\n+    public Map<String, String> getCataloque() {\n+        return cataloque;\n+    }\n+\n+    public void add(String phoneNum, String surname){\n+        cataloque.put(phoneNum, surname);\n+    }\n+\n+    public List<String> get(String surname){\n+\n+        List<String> phoneList = new ArrayList<>();\n+        Set<Map.Entry<String, String>> entrySet = cataloque.entrySet();\n+\n+        for (Map.Entry<String, String> pair : entrySet) {\n+            if (surname.equals(pair.getValue())) {\n+                phoneList.add(pair.getKey()); // нашли наше значение и возвращаем  ключ\n+            }\n+        }\n+\n+        return phoneList;\n+    }\n+\n+}"
  },
  {
    "sha": "531b748bd1f622acc2fdc3d4dff27bd893fb7cf1",
    "filename": "src/main/java/HomeWork12/Main.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork12/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork12/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork12/Main.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,98 @@\n+package HomeWork12;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        // 2\n+        int needNum = 1;\n+        ArrayList<Integer> test = new ArrayList<>();\n+        test.add(1);\n+        test.add(2);\n+\n+        Operation index = ()->{\n+            for (int i = 0; i < test.size(); i++) {\n+                if (test.get(i) == needNum){\n+                    return i;\n+                }\n+            }\n+            return -1;\n+        };\n+        System.out.println(index.calculate());\n+\n+        // 3\n+        String myStr = \"I love java\";\n+\n+        OperationStringList reverseList = () -> {\n+            char[] arrCh =  myStr.toCharArray();\n+            List<String> strList = new ArrayList<>();\n+            String result = \"\";\n+            for (int i = arrCh.length - 1; i >= 0; i--) {\n+                strList.add(String.valueOf(arrCh[i]));\n+            }\n+            return strList;\n+        };\n+\n+        String result = \"\";\n+        for (String el : reverseList.needList()){\n+            result += el;\n+        }\n+\n+        System.out.println(result);\n+\n+        // 4\n+        Operation maximum = ()->{\n+\n+            if (test.size() > 0){\n+                int max = test.get(0);\n+                for (int i = 1; i < test.size(); i++) {\n+                    if (test.get(i) > max){\n+                        max = test.get(i);\n+                    }\n+                }\n+                return max;\n+            }\n+            return 0; // либо бросаем какую-либо ошибку\n+        };\n+\n+        System.out.println(maximum.calculate());\n+\n+        // 5 через лямбда -\n+        Operation average = ()->{\n+            int sum = 0;\n+            for(int el : test){\n+                sum += el;\n+            }\n+            return sum / test.size();\n+        };\n+\n+        System.out.println(average.calculate());\n+\n+        // 6\n+        List<String> stringList = new ArrayList<>();\n+        stringList.add(\"hey\");\n+        stringList.add(\"aga\");\n+        stringList.add(\"ara\");\n+        stringList.add(\"mey\");\n+        stringList.add(\"arr\");\n+\n+        OperationStringList searchList = ()->{\n+            List<String> needList = new ArrayList<>();\n+            for(String el : stringList){\n+                if (el.length() == 3 && el.charAt(0) == 'a'){\n+                    needList.add(el);\n+                }\n+            }\n+            return needList;\n+        };\n+\n+        for (String el : searchList.needList()){\n+            System.out.println(el);\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "4f5e523578befeb7f4374e79a7c64a810c518410",
    "filename": "src/main/java/HomeWork12/Operation.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork12/Operation.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork12/Operation.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork12/Operation.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,5 @@\n+package HomeWork12;\n+\n+public interface Operation {\n+    int calculate();\n+}"
  },
  {
    "sha": "b9e4a7bd81300e1ebd5c95c6616b6f1c1c564f17",
    "filename": "src/main/java/HomeWork12/OperationStringList.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork12/OperationStringList.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork12/OperationStringList.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork12/OperationStringList.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,7 @@\n+package HomeWork12;\n+\n+import java.util.List;\n+\n+public interface OperationStringList {\n+    List<String> needList();\n+}"
  },
  {
    "sha": "fafeeddb89b056b92a6d9cfe7ad3e68dfeafccfd",
    "filename": "src/main/java/HomeWork13/Main.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork13/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork13/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork13/Main.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,52 @@\n+package HomeWork13;\n+\n+public class Main {\n+\n+    public static void main(String[] args) throws InterruptedException {\n+\n+        final int size = 10000000;\n+        float[] arr = new float[size];\n+\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = 1.0f;\n+        }\n+\n+        makeFloat1(arr);\n+        makeFloat2(arr);\n+\n+    }\n+\n+    public static void makeFloat1(float[] arr){\n+\n+        long a = System.currentTimeMillis();\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = (float)(arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+        }\n+        System.out.println(System.currentTimeMillis() - a);\n+\n+    }\n+\n+    public static void makeFloat2(float[] arr) throws InterruptedException {\n+\n+        final int h = arr.length / 2;\n+\n+        float[] a1 = new float[h];\n+        float[] a2 = new float[arr.length - h];\n+\n+        long a = System.currentTimeMillis();\n+        System.arraycopy(arr, 0, a1, 0, h);\n+        System.arraycopy(arr, h, a2, 0, h);\n+\n+        Thread thread1 = new Thread(new MyThread(a1));\n+        Thread thread2 = new Thread(new MyThread(a2));\n+\n+        thread1.join();\n+        thread2.join();\n+\n+        System.arraycopy(a1, 0, arr, 0, h);\n+        System.arraycopy(a2, 0, arr, h, h);\n+        System.out.println(System.currentTimeMillis() - a);\n+\n+    }\n+\n+}"
  },
  {
    "sha": "5be48f6ec480fc834526070333489f22010ee201",
    "filename": "src/main/java/HomeWork13/MyThread.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork13/MyThread.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork13/MyThread.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork13/MyThread.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,19 @@\n+package HomeWork13;\n+\n+public class MyThread extends Thread {\n+\n+    private float[] arr;\n+\n+    public MyThread(float[] arr) {\n+        this.arr = arr;\n+    }\n+\n+    @Override\n+    public void run() {\n+        synchronized (arr){\n+            for (int i = 0; i < arr.length; i++) {\n+                arr[i] = (float)(arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "5a571b4539c065a4ee4e5d9fc5b1d12a616d2b5b",
    "filename": "src/main/java/HomeWork14/EchoClient.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork14/EchoClient.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork14/EchoClient.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork14/EchoClient.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,150 @@\n+package HomeWork14;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class EchoClient extends JFrame {\n+\n+    private final String SERVER_ADDR = \"localhost\";\n+    private final int SERVER_PORT = 8189;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    private Socket socket;\n+    private DataInputStream in;\n+    private DataOutputStream out;\n+\n+    public EchoClient() {\n+        try {\n+            openConnection();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public void openConnection() throws IOException {\n+        socket = new Socket(SERVER_ADDR, SERVER_PORT);\n+        in = new DataInputStream(socket.getInputStream());\n+        out = new DataOutputStream(socket.getOutputStream());\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    while (true) {\n+                        String strFromServer = in.readUTF();\n+                        if (strFromServer.equalsIgnoreCase(\"/end\")) {\n+                            break;\n+                        }\n+                        chatArea.append(strFromServer);\n+                        chatArea.append(\"\\n\");\n+                    }\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }).start();\n+    }\n+\n+    public void closeConnection() {\n+        try {\n+            in.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            out.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            socket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void sendMessage() {\n+        if (!msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                String msg = msgInputField.getText();\n+                chatArea.append(\"Client: \" + msg);\n+                chatArea.append(\"\\n\");\n+                out.writeUTF(msg);\n+                msgInputField.setText(\"\");\n+                msgInputField.grabFocus();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+                JOptionPane.showMessageDialog(null, \"Ошибка отправки сообщения\");\n+            }\n+        }\n+    }\n+\n+    public void prepareGUI() {\n+        // Параметры окна\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+        // Текстовое поле для вывода сообщений\n+        chatArea = new JTextArea();\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+        // Нижняя панель с полем для ввода сообщений и кнопкой отправки сообщений\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+        btnSendMsg.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                sendMessage();\n+            }\n+        });\n+        msgInputField.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                sendMessage();\n+            }\n+        });\n+\n+        // Настраиваем действие на закрытие окна\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    out.writeUTF(\"/end\");\n+                    closeConnection();\n+                } catch (IOException exc) {\n+                    exc.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(new Runnable() {\n+            @Override\n+            public void run() {\n+                new EchoClient();\n+            }\n+        });\n+    }\n+\n+}"
  },
  {
    "sha": "663fa2d25ece16eea2ffe12f5db2241902f2766b",
    "filename": "src/main/java/HomeWork14/EchoServer.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork14/EchoServer.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork14/EchoServer.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork14/EchoServer.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,47 @@\n+package HomeWork14;\n+\n+import java.io.*;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+\n+public class EchoServer {\n+\n+    public static void main(String[] args) {\n+        Socket socket = null;\n+        try (ServerSocket serverSocket = new ServerSocket(8189)) {\n+            System.out.println(\"Сервер запущен, ожидаем подключения...\");\n+            socket = serverSocket.accept();\n+            System.out.println(\"Клиент подключился\");\n+            DataInputStream in = new DataInputStream(socket.getInputStream());\n+            DataOutputStream out = new DataOutputStream(socket.getOutputStream());\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n+            while (true) {\n+                String str = in.readUTF();\n+                System.out.println(str);\n+                if (str.equals(\"/end\")) {\n+                    break;\n+                }\n+                \n+                new Thread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        try {\n+                            while (true) {\n+                                String name = reader.readLine();\n+                                out.writeUTF(\"Serv: \" + name);\n+                                if (name.equalsIgnoreCase(\"/end\")) {\n+                                    break;\n+                                }\n+                            }\n+                        } catch (Exception e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n+                }).start();\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "9af36355a157df70bad4c79a7204c0dc6639f1ac",
    "filename": "src/main/java/HomeWork15/Main.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork15/Main.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,11 @@\n+package HomeWork15;\n+\n+import HomeWork15.server.MyServer;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        new MyServer();\n+    }\n+\n+}"
  },
  {
    "sha": "eb5d7b86dfc2ab4810c030cda335434ebdcb49b4",
    "filename": "src/main/java/HomeWork15/clients/firstEchoClient.java",
    "status": "added",
    "additions": 165,
    "deletions": 0,
    "changes": 165,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/clients/firstEchoClient.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/clients/firstEchoClient.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork15/clients/firstEchoClient.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,165 @@\n+package HomeWork15.clients;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+\n+public class firstEchoClient extends JFrame  {\n+\n+    private final static String IP_ADDRESS = \"localhost\"; //127.0.0.1 ip address\n+    private final static int SERVER_PORT = 8081;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    String nickname;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+\n+    private boolean isAuthorized;\n+\n+    public firstEchoClient() {\n+        try {\n+            connection();\n+        } catch (IOException ignored) {\n+            ignored.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> {\n+            new firstEchoClient();\n+        });\n+    }\n+\n+    public boolean isAuthorized() {\n+        return isAuthorized;\n+    }\n+\n+    public void setAuthorized(boolean authorized) {\n+        isAuthorized = authorized;\n+    }\n+\n+    private void connection() throws IOException {\n+        socket = new Socket(IP_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        setAuthorized(false);\n+        Thread thread = new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.startsWith(\"/authok\")) {\n+                        setAuthorized(true);\n+                        nickname = serverMessage.substring(8);\n+                        chatArea.append(serverMessage + \"\\n\");\n+                        break;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+                while (isAuthorized) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.contains(\": /w \")) {\n+                        if (serverMessage.contains(\": /w \" + nickname)){\n+                            String cur = \": /w \" + nickname;\n+                            int lastind = serverMessage.lastIndexOf(cur);\n+                            String who = \"(private) \" + serverMessage.substring(0, lastind + 2);\n+                            serverMessage = serverMessage.substring(lastind + cur.length() + 1);\n+                            chatArea.append(who + serverMessage + \"\\n\");\n+                        }\n+                        continue;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+            } catch (IOException ignored) {\n+                ignored.printStackTrace();\n+            }\n+            closeConnection();\n+        });\n+        thread.start();\n+    }\n+\n+    private void sendMessageToServer() {\n+        if (!msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                String messageToServer = msgInputField.getText();\n+                dos.writeUTF(messageToServer);\n+                msgInputField.setText(\"\");\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+\n+    private void prepareGUI() {\n+\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+\n+        chatArea = new JTextArea();\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+\n+        btnSendMsg.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        msgInputField.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/q\");\n+                } catch (IOException ignored) {\n+                }\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    private void closeConnection() {\n+\n+        try {\n+            dos.flush();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dos.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+}"
  },
  {
    "sha": "71cdec6d6cf298ac22531c4e7eee43db51538519",
    "filename": "src/main/java/HomeWork15/clients/secEchoClient.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/clients/secEchoClient.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/clients/secEchoClient.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork15/clients/secEchoClient.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,140 @@\n+package HomeWork15.clients;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+\n+public class secEchoClient extends JFrame  {\n+\n+    private final Integer SERVER_PORT = 8081;\n+    private final String SERVER_ADDRESS = \"localhost\";\n+    private Socket socket;\n+    DataInputStream dis;\n+    DataOutputStream dos;\n+    boolean isAuthorized = false;\n+    String nickname;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    public secEchoClient() {\n+        try {\n+            connection();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public void connection() throws IOException {\n+        socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String messageFromServer = dis.readUTF();\n+                    if (messageFromServer.startsWith(\"/authok\")) {\n+                        isAuthorized = true;\n+                        nickname = messageFromServer.substring(8);\n+                        chatArea.append(messageFromServer + \"\\n\");\n+                        break;\n+                    }\n+                    chatArea.append(messageFromServer + \"\\n\");\n+                }\n+                while (isAuthorized) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.contains(\": /w \")) {\n+                        if (serverMessage.contains(\": /w \" + nickname)){\n+                            String cur = \": /w \" + nickname;\n+                            int lastind = serverMessage.lastIndexOf(cur);\n+                            String who = \"(private) \" + serverMessage.substring(0, lastind + 2);\n+                            serverMessage = serverMessage.substring(lastind + cur.length() + 1);\n+                            chatArea.append(who + serverMessage + \"\\n\");\n+                        }\n+                        continue;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+            } catch (IOException ignored) {\n+\n+            }\n+        }).start();\n+    }\n+\n+    public void send() {\n+        if (msgInputField.getText() != null && !msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                dos.writeUTF(msgInputField.getText());\n+                if (msgInputField.getText().equals(\"/end\")) {\n+                    isAuthorized = false;\n+                    closeConnection();\n+                }\n+                msgInputField.setText(\"\");\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+\n+    private void closeConnection() {\n+        try {\n+            dis.close();\n+            dos.close();\n+            socket.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+\n+    public void prepareGUI() {\n+\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+\n+        chatArea = new JTextArea();\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+\n+        btnSendMsg.addActionListener(e -> {\n+            send();\n+        });\n+\n+        msgInputField.addActionListener(e -> {\n+            send();\n+        });\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> {\n+            new secEchoClient();\n+        });\n+    }\n+\n+}"
  },
  {
    "sha": "7ebf23fe52adfc5c5dce8e9b529d447caeaa3491",
    "filename": "src/main/java/HomeWork15/clients/thirdEchoClient.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/clients/thirdEchoClient.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/clients/thirdEchoClient.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork15/clients/thirdEchoClient.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,140 @@\n+package HomeWork15.clients;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+\n+public class thirdEchoClient extends JFrame  {\n+\n+    private final Integer SERVER_PORT = 8081;\n+    private final String SERVER_ADDRESS = \"localhost\";\n+    private Socket socket;\n+    DataInputStream dis;\n+    DataOutputStream dos;\n+    boolean isAuthorized = false;\n+    String nickname;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    public thirdEchoClient() {\n+        try {\n+            connection();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public void connection() throws IOException {\n+        socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        new Thread(() -> {\n+            try {\n+                while (true) {\n+                    String messageFromServer = dis.readUTF();\n+                    if (messageFromServer.startsWith(\"/authok\")) {\n+                        isAuthorized = true;\n+                        nickname = messageFromServer.substring(8);\n+                        chatArea.append(messageFromServer + \"\\n\");\n+                        break;\n+                    }\n+                    chatArea.append(messageFromServer + \"\\n\");\n+                }\n+\n+                while (isAuthorized) {\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.contains(\": /w \")) {\n+                        if (serverMessage.contains(\": /w \" + nickname)){\n+                            String cur = \": /w \" + nickname;\n+                            int lastind = serverMessage.lastIndexOf(cur);\n+                            String who = \"(private) \" + serverMessage.substring(0, lastind + 2);\n+                            serverMessage = serverMessage.substring(lastind + cur.length() + 1);\n+                            chatArea.append(who + serverMessage + \"\\n\");\n+                        }\n+                        continue;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+            } catch (IOException ignored) {\n+\n+            }\n+        }).start();\n+    }\n+\n+    public void send() {\n+        if (msgInputField.getText() != null && !msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                dos.writeUTF(msgInputField.getText());\n+                if (msgInputField.getText().equals(\"/end\")) {\n+                    isAuthorized = false;\n+                    closeConnection();\n+                }\n+                msgInputField.setText(\"\");\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+\n+    private void closeConnection() {\n+        try {\n+            dis.close();\n+            dos.close();\n+            socket.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    public void prepareGUI() {\n+\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+\n+        chatArea = new JTextArea();\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+\n+        btnSendMsg.addActionListener(e -> {\n+            send();\n+        });\n+\n+        msgInputField.addActionListener(e -> {\n+            send();\n+        });\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> {\n+            new thirdEchoClient();\n+        });\n+    }\n+\n+}"
  },
  {
    "sha": "306dc275bf75240347141b000db137e15f779896",
    "filename": "src/main/java/HomeWork15/server/AuthService.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/server/AuthService.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/server/AuthService.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork15/server/AuthService.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,7 @@\n+package HomeWork15.server;\n+\n+public interface AuthService {\n+    void start();\n+    String getNickByLoginPass(String login, String pass);\n+    void stop();\n+}"
  },
  {
    "sha": "4d34ff58868cbfe74999f398605b9f7d5055b426",
    "filename": "src/main/java/HomeWork15/server/BaseAuthService.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/server/BaseAuthService.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/server/BaseAuthService.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork15/server/BaseAuthService.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,47 @@\n+package HomeWork15.server;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BaseAuthService implements AuthService {\n+    private class Entry {\n+        private String login;\n+        private String pass;\n+        private String nick;\n+\n+        public Entry(String login, String pass, String nick) {\n+            this.login = login;\n+            this.pass = pass;\n+            this.nick = nick;\n+        }\n+    }\n+\n+    private List<Entry> entries;\n+\n+    @Override\n+    public void start() {\n+        System.out.println(\"Сервис аутентификации запущен\");\n+    }\n+\n+    @Override\n+    public void stop() {\n+        System.out.println(\"Сервис аутентификации остановлен\");\n+    }\n+\n+\n+    public BaseAuthService() {\n+        entries = new ArrayList<>();\n+        entries.add(new Entry(\"login1\", \"pass1\", \"nick1\"));\n+        entries.add(new Entry(\"login2\", \"pass2\", \"nick2\"));\n+        entries.add(new Entry(\"login3\", \"pass3\", \"nick3\"));\n+    }\n+\n+    @Override\n+    public String getNickByLoginPass(String login, String pass) {\n+        for (Entry o : entries) {\n+            if (o.login.equals(login) && o.pass.equals(pass)) return o.nick;\n+        }\n+        return null;\n+    }\n+\n+}"
  },
  {
    "sha": "c5164d5f0d2371b56d6f9fd38d216e568013cb19",
    "filename": "src/main/java/HomeWork15/server/ClientHandler.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/server/ClientHandler.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/server/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork15/server/ClientHandler.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,106 @@\n+package HomeWork15.server;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class ClientHandler {\n+\n+    private MyServer myServer;\n+    private Socket socket;\n+    private DataInputStream in;\n+    private DataOutputStream out;\n+\n+    private String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public ClientHandler(MyServer myServer, Socket socket) {\n+        try {\n+            this.myServer = myServer;\n+            this.socket = socket;\n+            this.in = new DataInputStream(socket.getInputStream());\n+            this.out = new DataOutputStream(socket.getOutputStream());\n+            this.name = \"\";\n+            new Thread(() -> {\n+                try {\n+                    authentication();\n+                    readMessages();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    closeConnection();\n+                }\n+            }).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Проблемы при создании обработчика клиента\");\n+        }\n+    }\n+\n+    public void authentication() throws IOException {\n+        while (true) {\n+            String str = in.readUTF();\n+            if (str.startsWith(\"/auth\")) {\n+                String[] parts = str.split(\"\\\\s\");\n+                String nick = myServer.getAuthService().getNickByLoginPass(parts[1], parts[2]);\n+                if (nick != null) {\n+                    if (!myServer.isNickBusy(nick)) {\n+                        sendMsg(\"/authok \" + nick);\n+                        name = nick;\n+                        myServer.broadcastMsg(name + \" зашел в чат\");\n+                        myServer.subscribe(this);\n+                        return;\n+                    } else {\n+                        sendMsg(\"Учетная запись уже используется\");\n+                    }\n+                } else {\n+                    sendMsg(\"Неверные логин/пароль\");\n+                }\n+            }\n+        }\n+    }\n+\n+    public void readMessages() throws IOException {\n+        while (true) {\n+            String strFromClient = in.readUTF();\n+            System.out.println(\"от \" + name + \": \" + strFromClient);\n+            if (strFromClient.equals(\"/end\")) {\n+                return;\n+            }\n+            myServer.broadcastMsg(name + \": \" + strFromClient);\n+        }\n+    }\n+\n+    public void sendMsg(String msg) {\n+        try {\n+            out.writeUTF(msg);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void closeConnection() {\n+        myServer.unsubscribe(this);\n+        myServer.broadcastMsg(name + \" вышел из чата\");\n+        try {\n+            in.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            out.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            socket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "33b9ace6705e1aeaa70116e1f3f612ffd84aefa2",
    "filename": "src/main/java/HomeWork15/server/MyServer.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/server/MyServer.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork15/server/MyServer.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork15/server/MyServer.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,63 @@\n+package HomeWork15.server;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyServer {\n+\n+    private final int PORT = 8081;\n+\n+    private List<ClientHandler> clients;\n+    private AuthService authService;\n+\n+    public AuthService getAuthService() {\n+        return authService;\n+    }\n+\n+    public MyServer() {\n+        try (ServerSocket server = new ServerSocket(PORT)) {\n+            authService = new BaseAuthService();\n+            authService.start();\n+            clients = new ArrayList<>();\n+            while (true) {\n+                System.out.println(\"Сервер ожидает подключения\");\n+                Socket socket = server.accept();\n+                System.out.println(\"Клиент подключился\");\n+                new ClientHandler(this, socket);\n+            }\n+        } catch (IOException e) {\n+            System.out.println(\"Ошибка в работе сервера\");\n+        } finally {\n+            if (authService != null) {\n+                authService.stop();\n+            }\n+        }\n+    }\n+\n+    public synchronized boolean isNickBusy(String nick) {\n+        for (ClientHandler o : clients) {\n+            if (o.getName().equals(nick)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public synchronized void broadcastMsg(String msg) {\n+        for (ClientHandler o : clients) {\n+            o.sendMsg(msg);\n+        }\n+    }\n+\n+    public synchronized void unsubscribe(ClientHandler o) {\n+        clients.remove(o);\n+    }\n+\n+    public synchronized void subscribe(ClientHandler o) {\n+        clients.add(o);\n+    }\n+\n+}"
  },
  {
    "sha": "3f85e94707d935e7d0465afc9387cc7302aac1a0",
    "filename": "src/main/java/HomeWork16/AuthService.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/AuthService.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/AuthService.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork16/AuthService.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,7 @@\n+package HomeWork16;\n+\n+public interface AuthService {\n+    void start();\n+    String getNickByLoginPass(String login, String pass);\n+    void stop();\n+}"
  },
  {
    "sha": "35098309d8c5c22758dc79fbc9a54dd1ae0611f8",
    "filename": "src/main/java/HomeWork16/BaseAuthService.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/BaseAuthService.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/BaseAuthService.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork16/BaseAuthService.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,47 @@\n+package HomeWork16;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BaseAuthService implements AuthService {\n+    private class Entry {\n+        private String login;\n+        private String pass;\n+        private String nick;\n+\n+        public Entry(String login, String pass, String nick) {\n+            this.login = login;\n+            this.pass = pass;\n+            this.nick = nick;\n+        }\n+    }\n+\n+    private List<Entry> entries;\n+\n+    @Override\n+    public void start() {\n+        System.out.println(\"Сервис аутентификации запущен\");\n+    }\n+\n+    @Override\n+    public void stop() {\n+        System.out.println(\"Сервис аутентификации остановлен\");\n+    }\n+\n+\n+    public BaseAuthService() {\n+        entries = new ArrayList<>();\n+        entries.add(new Entry(\"login1\", \"pass1\", \"nick1\"));\n+        entries.add(new Entry(\"login2\", \"pass2\", \"nick2\"));\n+        entries.add(new Entry(\"login3\", \"pass3\", \"nick3\"));\n+    }\n+\n+    @Override\n+    public String getNickByLoginPass(String login, String pass) {\n+        for (Entry o : entries) {\n+            if (o.login.equals(login) && o.pass.equals(pass)) return o.nick;\n+        }\n+        return null;\n+    }\n+\n+}"
  },
  {
    "sha": "939e5ceb068c58608412a14f2c37d8aadb4c0bf7",
    "filename": "src/main/java/HomeWork16/ClientHandler.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/ClientHandler.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork16/ClientHandler.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,111 @@\n+package HomeWork16;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public class ClientHandler {\n+\n+    private MyServer myServer;\n+    private Socket socket;\n+    private DataInputStream in;\n+    private DataOutputStream out;\n+\n+    private String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public ClientHandler(MyServer myServer, Socket socket) {\n+        try {\n+            this.myServer = myServer;\n+            this.socket = socket;\n+            this.in = new DataInputStream(socket.getInputStream());\n+            this.out = new DataOutputStream(socket.getOutputStream());\n+            this.name = \"\";\n+            new Thread(() -> {\n+                try {\n+                    authentication();\n+                    readMessages();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    closeConnection();\n+                }\n+            }).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Проблемы при создании обработчика клиента\");\n+        }\n+    }\n+\n+    public void authentication() throws IOException {\n+        while (true) {\n+            String str = in.readUTF();\n+            if (str.startsWith(\"/auth\")) {\n+                String[] parts = str.split(\"\\\\s\");\n+                String nick = myServer.getAuthService().getNickByLoginPass(parts[1], parts[2]);\n+                if (nick != null) {\n+                    if (!myServer.isNickBusy(nick)) {\n+                        sendMsg(\"/authok \" + nick);\n+                        name = nick;\n+                        myServer.broadcastMsg(name + \" зашел в чат\");\n+                        myServer.subscribe(this);\n+                        return;\n+                    } else {\n+                        sendMsg(\"Учетная запись уже используется\");\n+                    }\n+                } else {\n+                    sendMsg(\"Неверные логин/пароль\");\n+                }\n+            }\n+        }\n+    }\n+\n+    public void readMessages() throws IOException {\n+        while (true) {\n+            String strFromClient = in.readUTF();\n+\n+            if (strFromClient.startsWith(\"/\")){\n+\n+                if (strFromClient.equals(\"/end\")) {\n+                    return;\n+                }\n+\n+            }\n+\n+            myServer.broadcastMsg(name + \": \" + strFromClient);\n+        }\n+    }\n+\n+    public void sendMsg(String msg) {\n+        try {\n+            out.writeUTF(msg);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void closeConnection() {\n+        myServer.unsubscribe(this);\n+        myServer.broadcastMsg(name + \" вышел из чата\");\n+        try {\n+            in.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            out.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            socket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "dbbd109be476b64aaa025fbef4b81ceb7c8ef9b8",
    "filename": "src/main/java/HomeWork16/Main.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/Main.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/Main.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork16/Main.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,9 @@\n+package HomeWork16;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        new MyServer();\n+    }\n+\n+}"
  },
  {
    "sha": "a3912a53cc64c5f45fc14a8579304dfa5abb5687",
    "filename": "src/main/java/HomeWork16/MyServer.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/MyServer.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/MyServer.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork16/MyServer.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,64 @@\n+package HomeWork16;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyServer {\n+\n+    private final int PORT = 8081;\n+\n+    private List<ClientHandler> clients;\n+    private AuthService authService;\n+\n+    public AuthService getAuthService() {\n+        return authService;\n+    }\n+\n+    public MyServer() {\n+        try (ServerSocket server = new ServerSocket(PORT)) {\n+            authService = new BaseAuthService();\n+            authService.start();\n+            clients = new ArrayList<>();\n+            while (true) {\n+                System.out.println(\"Сервер ожидает подключения\");\n+                Socket socket = server.accept();\n+                System.out.println(\"Клиент подключился\");\n+                new ClientHandler(this, socket);\n+            }\n+        } catch (IOException e) {\n+            System.out.println(\"Ошибка в работе сервера\");\n+        } finally {\n+            if (authService != null) {\n+                authService.stop();\n+            }\n+        }\n+    }\n+\n+    public synchronized boolean isNickBusy(String nick) {\n+        for (ClientHandler o : clients) {\n+            if (o.getName().equals(nick)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public synchronized void broadcastMsg(String msg) {\n+        for (ClientHandler o : clients) {\n+            o.sendMsg(msg);\n+        }\n+    }\n+\n+    public synchronized void unsubscribe(ClientHandler o) {\n+        clients.remove(o);\n+    }\n+\n+    public synchronized void subscribe(ClientHandler o) {\n+        clients.add(o);\n+    }\n+\n+\n+}"
  },
  {
    "sha": "c071e8928aaa0f37f367cd782b0dd266e138022f",
    "filename": "src/main/java/HomeWork16/clients/firstEchoClient.java",
    "status": "added",
    "additions": 185,
    "deletions": 0,
    "changes": 185,
    "blob_url": "https://github.com/mishabartone/LessonOne/blob/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/clients/firstEchoClient.java",
    "raw_url": "https://github.com/mishabartone/LessonOne/raw/b2b74d75c84dbb5804991988b4726affc76385a4/src/main/java/HomeWork16/clients/firstEchoClient.java",
    "contents_url": "https://api.github.com/repos/mishabartone/LessonOne/contents/src/main/java/HomeWork16/clients/firstEchoClient.java?ref=b2b74d75c84dbb5804991988b4726affc76385a4",
    "patch": "@@ -0,0 +1,185 @@\n+package HomeWork16.clients;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+\n+public class firstEchoClient extends JFrame  {\n+\n+    private final static String IP_ADDRESS = \"localhost\"; //127.0.0.1 ip address\n+    private final static int SERVER_PORT = 8081;\n+\n+    private JTextField msgInputField;\n+    private JTextArea chatArea;\n+\n+    String nickname;\n+\n+    private Socket socket;\n+    private DataInputStream dis;\n+    private DataOutputStream dos;\n+\n+    private boolean isAuthorized;\n+\n+    public firstEchoClient() {\n+        try {\n+            connection();\n+        } catch (IOException ignored) {\n+            ignored.printStackTrace();\n+        }\n+        prepareGUI();\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(() -> {\n+            new firstEchoClient();\n+        });\n+    }\n+\n+    public boolean isAuthorized() {\n+        return isAuthorized;\n+    }\n+\n+    public void setAuthorized(boolean authorized) {\n+        isAuthorized = authorized;\n+    }\n+\n+    private void connection() throws IOException {\n+        socket = new Socket(IP_ADDRESS, SERVER_PORT);\n+        dis = new DataInputStream(socket.getInputStream());\n+        dos = new DataOutputStream(socket.getOutputStream());\n+        setAuthorized(false);\n+        Thread thread = new Thread(() -> {\n+            try {\n+\n+                Calendar c = Calendar.getInstance();\n+                c.setTime(new Date()); // Now use today date.\n+                c.add(Calendar.SECOND, 120);\n+\n+                while (true) {\n+\n+                    Calendar s = Calendar.getInstance();\n+                    s.setTime(new Date());\n+\n+                    new Thread(new Runnable() {\n+                        public void run() {\n+                            while(!isAuthorized) { //бесконечно крутим\n+                                try {\n+                                    Thread.sleep(3000); // 3 секунды в милисекундах\n+                                    if (c.getTime().compareTo(s.getTime()) == 1 && !isAuthorized){\n+                                        closeConnection();\n+                                        System.exit(0);\n+                                        return;\n+                                    }\n+                                } catch (InterruptedException e) {\n+                                    e.printStackTrace();\n+                                }\n+                            }\n+                        }\n+                    }).start();\n+\n+                    String serverMessage = dis.readUTF();\n+                    if (serverMessage.startsWith(\"/authok\")) {\n+                        setAuthorized(true);\n+                        nickname = serverMessage.substring(8);\n+                        chatArea.append(serverMessage + \"\\n\");\n+                        break;\n+                    }\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+                while (isAuthorized) {\n+                    String serverMessage = dis.readUTF();\n+                    chatArea.append(serverMessage + \"\\n\");\n+                }\n+            } catch (IOException ignored) {\n+                ignored.printStackTrace();\n+            }\n+            closeConnection();\n+        });\n+        thread.start();\n+    }\n+\n+    private void sendMessageToServer() {\n+        if (!msgInputField.getText().trim().isEmpty()) {\n+            try {\n+                String messageToServer = msgInputField.getText();\n+                dos.writeUTF(messageToServer);\n+                msgInputField.setText(\"\");\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+\n+    private void prepareGUI() {\n+\n+        setBounds(600, 300, 500, 500);\n+        setTitle(\"Клиент\");\n+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+\n+        chatArea = new JTextArea();\n+        chatArea.setEditable(false);\n+        chatArea.setLineWrap(true);\n+        add(new JScrollPane(chatArea), BorderLayout.CENTER);\n+\n+\n+        JPanel bottomPanel = new JPanel(new BorderLayout());\n+        JButton btnSendMsg = new JButton(\"Отправить\");\n+        bottomPanel.add(btnSendMsg, BorderLayout.EAST);\n+        msgInputField = new JTextField();\n+        add(bottomPanel, BorderLayout.SOUTH);\n+        bottomPanel.add(msgInputField, BorderLayout.CENTER);\n+\n+        btnSendMsg.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        msgInputField.addActionListener(e -> {\n+            sendMessageToServer();\n+        });\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                try {\n+                    dos.writeUTF(\"/q\");\n+                } catch (IOException ignored) {\n+                }\n+            }\n+        });\n+\n+        setVisible(true);\n+    }\n+\n+    private void closeConnection() {\n+\n+        try {\n+            dos.flush();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dis.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            dos.close();\n+        } catch (IOException ignored) {\n+        }\n+\n+        try {\n+            socket.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+}"
  }
]
