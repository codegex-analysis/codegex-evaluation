[
  {
    "sha": "c0af3e37db2380dcb28de5e8a872ab22f3ec94ed",
    "filename": "src/main/java/com/parkit/parkingsystem/model/Ticket.java",
    "status": "modified",
    "additions": 54,
    "deletions": 55,
    "changes": 109,
    "blob_url": "https://github.com/OpenClassrooms-Student-Center/parkingsystem/blob/0a30884d761edd9efab61d109d00961757816071/src/main/java/com/parkit/parkingsystem/model/Ticket.java",
    "raw_url": "https://github.com/OpenClassrooms-Student-Center/parkingsystem/raw/0a30884d761edd9efab61d109d00961757816071/src/main/java/com/parkit/parkingsystem/model/Ticket.java",
    "contents_url": "https://api.github.com/repos/OpenClassrooms-Student-Center/parkingsystem/contents/src/main/java/com/parkit/parkingsystem/model/Ticket.java?ref=0a30884d761edd9efab61d109d00961757816071",
    "patch": "@@ -1,61 +1,60 @@\n package com.parkit.parkingsystem.model;\n \n-import java.util.Calendar;\n import java.util.Date;\n \n public class Ticket {\n-    private int id;\n-    private ParkingSpot parkingSpot;\n-    private String vehicleRegNumber;\n-    private double price;\n-    private Date inTime;\n-    private Date outTime;\n-\n-    public int getId() {\n-        return id;\n-    }\n-\n-    public void setId(int id) {\n-        this.id = id;\n-    }\n-\n-    public ParkingSpot getParkingSpot() {\n-        return parkingSpot;\n-    }\n-\n-    public void setParkingSpot(ParkingSpot parkingSpot) {\n-        this.parkingSpot = parkingSpot;\n-    }\n-\n-    public String getVehicleRegNumber() {\n-        return vehicleRegNumber;\n-    }\n-\n-    public void setVehicleRegNumber(String vehicleRegNumber) {\n-        this.vehicleRegNumber = vehicleRegNumber;\n-    }\n-\n-    public double getPrice() {\n-        return price;\n-    }\n-\n-    public void setPrice(double price) {\n-        this.price = price;\n-    }\n-\n-    public Date getInTime() {\n-        return inTime;\n-    }\n-\n-    public void setInTime(Date inTime) {\n-        this.inTime = inTime;\n-    }\n-\n-    public Date getOutTime() {\n-        return outTime;\n-    }\n-\n-    public void setOutTime(Date outTime) {\n-        this.outTime = outTime;\n-    }\n+\tprivate int id;\n+\tprivate ParkingSpot parkingSpot;\n+\tprivate String vehicleRegNumber;\n+\tprivate double price;\n+\tprivate Date inTime;\n+\tprivate Date outTime;\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic ParkingSpot getParkingSpot() {\n+\t\treturn parkingSpot;\n+\t}\n+\n+\tpublic void setParkingSpot(ParkingSpot parkingSpot) {\n+\t\tthis.parkingSpot = parkingSpot;\n+\t}\n+\n+\tpublic String getVehicleRegNumber() {\n+\t\treturn vehicleRegNumber;\n+\t}\n+\n+\tpublic void setVehicleRegNumber(String vehicleRegNumber) {\n+\t\tthis.vehicleRegNumber = vehicleRegNumber;\n+\t}\n+\n+\tpublic double getPrice() {\n+\t\treturn price;\n+\t}\n+\n+\tpublic void setPrice(double price) {\n+\t\tthis.price = price;\n+\t}\n+\n+\tpublic Date getInTime() {\n+\t\treturn inTime;\n+\t}\n+\n+\tpublic void setInTime(Date inTime) {\n+\t\tthis.inTime = inTime;\n+\t}\n+\n+\tpublic Date getOutTime() {\n+\t\treturn outTime;\n+\t}\n+\n+\tpublic void setOutTime(Date outTime) {\n+\t\tthis.outTime = outTime;\n+\t}\n }"
  },
  {
    "sha": "44f0da3d72edb27c5efab4389ab972900f7f3318",
    "filename": "src/main/java/com/parkit/parkingsystem/service/FareCalculatorService.java",
    "status": "modified",
    "additions": 24,
    "deletions": 21,
    "changes": 45,
    "blob_url": "https://github.com/OpenClassrooms-Student-Center/parkingsystem/blob/0a30884d761edd9efab61d109d00961757816071/src/main/java/com/parkit/parkingsystem/service/FareCalculatorService.java",
    "raw_url": "https://github.com/OpenClassrooms-Student-Center/parkingsystem/raw/0a30884d761edd9efab61d109d00961757816071/src/main/java/com/parkit/parkingsystem/service/FareCalculatorService.java",
    "contents_url": "https://api.github.com/repos/OpenClassrooms-Student-Center/parkingsystem/contents/src/main/java/com/parkit/parkingsystem/service/FareCalculatorService.java?ref=0a30884d761edd9efab61d109d00961757816071",
    "patch": "@@ -1,31 +1,34 @@\n package com.parkit.parkingsystem.service;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n+\n import com.parkit.parkingsystem.constants.Fare;\n import com.parkit.parkingsystem.model.Ticket;\n \n public class FareCalculatorService {\n \n-    public void calculateFare(Ticket ticket){\n-        if( (ticket.getOutTime() == null) || (ticket.getOutTime().before(ticket.getInTime())) ){\n-            throw new IllegalArgumentException(\"Out time provided is incorrect:\"+ticket.getOutTime().toString());\n-        }\n-\n-        int inHour = ticket.getInTime().getHours();\n-        int outHour = ticket.getOutTime().getHours();\n+\tpublic void calculateFare(Ticket ticket) {\n+\t\tif ((ticket.getOutTime() == null) || (ticket.getOutTime().before(ticket.getInTime()))) {\n+\t\t\tthrow new IllegalArgumentException(\"Out time provided is incorrect:\" + ticket.getOutTime().toString());\n+\t\t}\n \n-        //TODO: Some tests are failing here. Need to check if this logic is correct\n-        int duration = outHour - inHour;\n+\t\tdouble duration = SECONDS.between(ticket.getInTime().toInstant(), ticket.getOutTime().toInstant());\n \n-        switch (ticket.getParkingSpot().getParkingType()){\n-            case CAR: {\n-                ticket.setPrice(duration * Fare.CAR_RATE_PER_HOUR);\n-                break;\n-            }\n-            case BIKE: {\n-                ticket.setPrice(duration * Fare.BIKE_RATE_PER_HOUR);\n-                break;\n-            }\n-            default: throw new IllegalArgumentException(\"Unkown Parking Type\");\n-        }\n-    }\n+\t\tswitch (ticket.getParkingSpot().getParkingType()) {\n+\t\tcase CAR: {\n+\t\t\tif (duration > 1800) {\n+\t\t\t\tticket.setPrice(duration / 3600 * Fare.CAR_RATE_PER_HOUR);\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase BIKE: {\n+\t\t\tif (duration > 1800) {\n+\t\t\t\tticket.setPrice(duration / 3600 * Fare.BIKE_RATE_PER_HOUR);\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t\tdefault:\n+\t\t\tthrow new IllegalArgumentException(\"Unkown Parking Type\");\n+\t\t}\n+\t}\n }\n\\ No newline at end of file"
  },
  {
    "sha": "2743cec5b780c0d4bbb9a13911b13eced79bd7d2",
    "filename": "src/test/java/com/parkit/parkingsystem/FareCalculatorServiceTest.java",
    "status": "modified",
    "additions": 155,
    "deletions": 115,
    "changes": 270,
    "blob_url": "https://github.com/OpenClassrooms-Student-Center/parkingsystem/blob/0a30884d761edd9efab61d109d00961757816071/src/test/java/com/parkit/parkingsystem/FareCalculatorServiceTest.java",
    "raw_url": "https://github.com/OpenClassrooms-Student-Center/parkingsystem/raw/0a30884d761edd9efab61d109d00961757816071/src/test/java/com/parkit/parkingsystem/FareCalculatorServiceTest.java",
    "contents_url": "https://api.github.com/repos/OpenClassrooms-Student-Center/parkingsystem/contents/src/test/java/com/parkit/parkingsystem/FareCalculatorServiceTest.java?ref=0a30884d761edd9efab61d109d00961757816071",
    "patch": "@@ -1,127 +1,167 @@\n package com.parkit.parkingsystem;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Date;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n import com.parkit.parkingsystem.constants.Fare;\n import com.parkit.parkingsystem.constants.ParkingType;\n import com.parkit.parkingsystem.model.ParkingSpot;\n import com.parkit.parkingsystem.model.Ticket;\n import com.parkit.parkingsystem.service.FareCalculatorService;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-import java.util.Date;\n \n public class FareCalculatorServiceTest {\n \n-    private static FareCalculatorService fareCalculatorService;\n-    private Ticket ticket;\n-\n-    @BeforeAll\n-    private static void setUp() {\n-        fareCalculatorService = new FareCalculatorService();\n-    }\n-\n-    @BeforeEach\n-    private void setUpPerTest() {\n-        ticket = new Ticket();\n-    }\n-\n-    @Test\n-    public void calculateFareCar(){\n-        Date inTime = new Date();\n-        inTime.setTime( System.currentTimeMillis() - (  60 * 60 * 1000) );\n-        Date outTime = new Date();\n-        ParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.CAR,false);\n-\n-        ticket.setInTime(inTime);\n-        ticket.setOutTime(outTime);\n-        ticket.setParkingSpot(parkingSpot);\n-        fareCalculatorService.calculateFare(ticket);\n-        assertEquals(ticket.getPrice(), Fare.CAR_RATE_PER_HOUR);\n-    }\n-\n-    @Test\n-    public void calculateFareBike(){\n-        Date inTime = new Date();\n-        inTime.setTime( System.currentTimeMillis() - (  60 * 60 * 1000) );\n-        Date outTime = new Date();\n-        ParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.BIKE,false);\n-\n-        ticket.setInTime(inTime);\n-        ticket.setOutTime(outTime);\n-        ticket.setParkingSpot(parkingSpot);\n-        fareCalculatorService.calculateFare(ticket);\n-        assertEquals(ticket.getPrice(), Fare.BIKE_RATE_PER_HOUR);\n-    }\n-\n-    @Test\n-    public void calculateFareUnkownType(){\n-        Date inTime = new Date();\n-        inTime.setTime( System.currentTimeMillis() - (  60 * 60 * 1000) );\n-        Date outTime = new Date();\n-        ParkingSpot parkingSpot = new ParkingSpot(1, null,false);\n-\n-        ticket.setInTime(inTime);\n-        ticket.setOutTime(outTime);\n-        ticket.setParkingSpot(parkingSpot);\n-        assertThrows(NullPointerException.class, () -> fareCalculatorService.calculateFare(ticket));\n-    }\n-\n-    @Test\n-    public void calculateFareBikeWithFutureInTime(){\n-        Date inTime = new Date();\n-        inTime.setTime( System.currentTimeMillis() + (  60 * 60 * 1000) );\n-        Date outTime = new Date();\n-        ParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.BIKE,false);\n-\n-        ticket.setInTime(inTime);\n-        ticket.setOutTime(outTime);\n-        ticket.setParkingSpot(parkingSpot);\n-        assertThrows(IllegalArgumentException.class, () -> fareCalculatorService.calculateFare(ticket));\n-    }\n-\n-    @Test\n-    public void calculateFareBikeWithLessThanOneHourParkingTime(){\n-        Date inTime = new Date();\n-        inTime.setTime( System.currentTimeMillis() - (  45 * 60 * 1000) );//45 minutes parking time should give 3/4th parking fare\n-        Date outTime = new Date();\n-        ParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.BIKE,false);\n-\n-        ticket.setInTime(inTime);\n-        ticket.setOutTime(outTime);\n-        ticket.setParkingSpot(parkingSpot);\n-        fareCalculatorService.calculateFare(ticket);\n-        assertEquals((0.75 * Fare.BIKE_RATE_PER_HOUR), ticket.getPrice() );\n-    }\n-\n-    @Test\n-    public void calculateFareCarWithLessThanOneHourParkingTime(){\n-        Date inTime = new Date();\n-        inTime.setTime( System.currentTimeMillis() - (  45 * 60 * 1000) );//45 minutes parking time should give 3/4th parking fare\n-        Date outTime = new Date();\n-        ParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.CAR,false);\n-\n-        ticket.setInTime(inTime);\n-        ticket.setOutTime(outTime);\n-        ticket.setParkingSpot(parkingSpot);\n-        fareCalculatorService.calculateFare(ticket);\n-        assertEquals( (0.75 * Fare.CAR_RATE_PER_HOUR) , ticket.getPrice());\n-    }\n-\n-    @Test\n-    public void calculateFareCarWithMoreThanADayParkingTime(){\n-        Date inTime = new Date();\n-        inTime.setTime( System.currentTimeMillis() - (  24 * 60 * 60 * 1000) );//24 hours parking time should give 24 * parking fare per hour\n-        Date outTime = new Date();\n-        ParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.CAR,false);\n-\n-        ticket.setInTime(inTime);\n-        ticket.setOutTime(outTime);\n-        ticket.setParkingSpot(parkingSpot);\n-        fareCalculatorService.calculateFare(ticket);\n-        assertEquals( (24 * Fare.CAR_RATE_PER_HOUR) , ticket.getPrice());\n-    }\n+\tprivate static FareCalculatorService fareCalculatorService;\n+\tprivate Ticket ticket;\n+\n+\t@BeforeAll\n+\tprivate static void setUp() {\n+\t\tfareCalculatorService = new FareCalculatorService();\n+\t}\n+\n+\t@BeforeEach\n+\tprivate void setUpPerTest() {\n+\t\tticket = new Ticket();\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareCar() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() - (60 * 60 * 1000));\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.CAR, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tfareCalculatorService.calculateFare(ticket);\n+\n+\t\tassertEquals(ticket.getPrice(), Fare.CAR_RATE_PER_HOUR);\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareBike() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() - (60 * 60 * 1000));\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.BIKE, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tfareCalculatorService.calculateFare(ticket);\n+\n+\t\tassertEquals(ticket.getPrice(), Fare.BIKE_RATE_PER_HOUR);\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareUnkownType() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() - (60 * 60 * 1000));\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, null, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tassertThrows(NullPointerException.class, () -> fareCalculatorService.calculateFare(ticket));\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareBikeWithFutureInTime() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() + (60 * 60 * 1000));\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.BIKE, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tassertThrows(IllegalArgumentException.class, () -> fareCalculatorService.calculateFare(ticket));\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareBikeWithLessThanOneHourParkingTime() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() - (45 * 60 * 1000));// 45 minutes parking time should give 3/4th\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// parking fare\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.BIKE, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tfareCalculatorService.calculateFare(ticket);\n+\n+\t\tassertEquals((0.75 * Fare.BIKE_RATE_PER_HOUR), ticket.getPrice());\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareCarWithLessThanOneHourParkingTime() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() - (45 * 60 * 1000));// 45 minutes parking time should give 3/4th\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// parking fare\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.CAR, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tfareCalculatorService.calculateFare(ticket);\n+\n+\t\tassertEquals((0.75 * Fare.CAR_RATE_PER_HOUR), ticket.getPrice());\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareCarWithMoreThanADayParkingTime() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() - (24 * 60 * 60 * 1000));// 24 hours parking time should give 24h\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// parking fare per hour\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.CAR, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tfareCalculatorService.calculateFare(ticket);\n+\n+\t\tassertEquals((24 * Fare.CAR_RATE_PER_HOUR), ticket.getPrice());\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareCarWithLessThanThrityMinutesParkingTime() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() - (25 * 60 * 1000));// 25 minutes parking free time\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.CAR, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tfareCalculatorService.calculateFare(ticket);\n+\n+\t\tassertEquals((0 * Fare.CAR_RATE_PER_HOUR), ticket.getPrice());\n+\t}\n+\n+\t@Test\n+\tpublic void calculateFareBikeWithLessThanThrityMinutesParkingTime() {\n+\t\tDate inTime = new Date();\n+\t\tinTime.setTime(System.currentTimeMillis() - (25 * 60 * 1000));// 25 minutes parking free time\n+\t\tDate outTime = new Date();\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.BIKE, false);\n+\t\tticket.setInTime(inTime);\n+\t\tticket.setOutTime(outTime);\n+\t\tticket.setParkingSpot(parkingSpot);\n+\n+\t\tfareCalculatorService.calculateFare(ticket);\n+\n+\t\tassertEquals((0 * Fare.BIKE_RATE_PER_HOUR), ticket.getPrice());\n+\t}\n \n }"
  },
  {
    "sha": "eb8710032779f70800802b59c91094f3c6a51524",
    "filename": "src/test/java/com/parkit/parkingsystem/integration/ParkingDataBaseIT.java",
    "status": "modified",
    "additions": 91,
    "deletions": 50,
    "changes": 141,
    "blob_url": "https://github.com/OpenClassrooms-Student-Center/parkingsystem/blob/0a30884d761edd9efab61d109d00961757816071/src/test/java/com/parkit/parkingsystem/integration/ParkingDataBaseIT.java",
    "raw_url": "https://github.com/OpenClassrooms-Student-Center/parkingsystem/raw/0a30884d761edd9efab61d109d00961757816071/src/test/java/com/parkit/parkingsystem/integration/ParkingDataBaseIT.java",
    "contents_url": "https://api.github.com/repos/OpenClassrooms-Student-Center/parkingsystem/contents/src/test/java/com/parkit/parkingsystem/integration/ParkingDataBaseIT.java?ref=0a30884d761edd9efab61d109d00961757816071",
    "patch": "@@ -1,65 +1,106 @@\n package com.parkit.parkingsystem.integration;\n \n-import com.parkit.parkingsystem.dao.ParkingSpotDAO;\n-import com.parkit.parkingsystem.dao.TicketDAO;\n-import com.parkit.parkingsystem.integration.config.DataBaseTestConfig;\n-import com.parkit.parkingsystem.integration.service.DataBasePrepareService;\n-import com.parkit.parkingsystem.service.ParkingService;\n-import com.parkit.parkingsystem.util.InputReaderUtil;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Date;\n+\n import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n import org.mockito.junit.jupiter.MockitoExtension;\n-import static org.mockito.Mockito.when;\n+\n+import com.parkit.parkingsystem.constants.ParkingType;\n+import com.parkit.parkingsystem.dao.ParkingSpotDAO;\n+import com.parkit.parkingsystem.dao.TicketDAO;\n+import com.parkit.parkingsystem.integration.config.DataBaseTestConfig;\n+import com.parkit.parkingsystem.integration.service.DataBasePrepareService;\n+import com.parkit.parkingsystem.model.ParkingSpot;\n+import com.parkit.parkingsystem.model.Ticket;\n+import com.parkit.parkingsystem.service.ParkingService;\n+import com.parkit.parkingsystem.util.InputReaderUtil;\n \n @ExtendWith(MockitoExtension.class)\n public class ParkingDataBaseIT {\n \n-    private static DataBaseTestConfig dataBaseTestConfig = new DataBaseTestConfig();\n-    private static ParkingSpotDAO parkingSpotDAO;\n-    private static TicketDAO ticketDAO;\n-    private static DataBasePrepareService dataBasePrepareService;\n-\n-    @Mock\n-    private static InputReaderUtil inputReaderUtil;\n-\n-    @BeforeAll\n-    private static void setUp() throws Exception{\n-        parkingSpotDAO = new ParkingSpotDAO();\n-        parkingSpotDAO.dataBaseConfig = dataBaseTestConfig;\n-        ticketDAO = new TicketDAO();\n-        ticketDAO.dataBaseConfig = dataBaseTestConfig;\n-        dataBasePrepareService = new DataBasePrepareService();\n-    }\n-\n-    @BeforeEach\n-    private void setUpPerTest() throws Exception {\n-        when(inputReaderUtil.readSelection()).thenReturn(1);\n-        when(inputReaderUtil.readVehicleRegistrationNumber()).thenReturn(\"ABCDEF\");\n-        dataBasePrepareService.clearDataBaseEntries();\n-    }\n-\n-    @AfterAll\n-    private static void tearDown(){\n-\n-    }\n-\n-    @Test\n-    public void testParkingACar(){\n-        ParkingService parkingService = new ParkingService(inputReaderUtil, parkingSpotDAO, ticketDAO);\n-        parkingService.processIncomingVehicle();\n-        //TODO: check that a ticket is actualy saved in DB and Parking table is updated with availability\n-    }\n-\n-    @Test\n-    public void testParkingLotExit(){\n-        testParkingACar();\n-        ParkingService parkingService = new ParkingService(inputReaderUtil, parkingSpotDAO, ticketDAO);\n-        parkingService.processExitingVehicle();\n-        //TODO: check that the fare generated and out time are populated correctly in the database\n-    }\n+\tprivate static final String VehiculeRegNumber = \"ABCDEF\";\n+\n+\tprivate static DataBaseTestConfig dataBaseTestConfig = new DataBaseTestConfig();\n+\tprivate static DataBasePrepareService dataBasePrepareService;\n+\n+\t@Mock\n+\tprivate static ParkingSpotDAO parkingSpotDAO;\n+\n+\t@Mock\n+\tprivate static TicketDAO ticketDAO;\n+\n+\t@Mock\n+\tprivate static Ticket ticket;\n+\n+\t@Mock\n+\tprivate static InputReaderUtil inputReaderUtil;\n+\n+\t@BeforeAll\n+\tprivate static void setUp() throws Exception {\n+\n+\t\tdataBasePrepareService = new DataBasePrepareService();\n+\t}\n+\n+\t@AfterAll\n+\tprivate static void tearDown() {\n+\t}\n+\n+\t@BeforeEach\n+\tprivate void setUpPerTest() throws Exception {\n+\t\twhen(inputReaderUtil.readSelection()).thenReturn(1);\n+\t\twhen(inputReaderUtil.readVehicleRegistrationNumber()).thenReturn(VehiculeRegNumber);\n+\t\tdataBasePrepareService.clearDataBaseEntries();\n+\t}\n+\n+\t@Test\n+\tpublic void testParkingACar() {\n+\t\tParkingService parkingService = new ParkingService(inputReaderUtil, parkingSpotDAO, ticketDAO);\n+\t\tMockito.when(parkingSpotDAO.getNextAvailableSlot(Mockito.any())).thenReturn(1);\n+\n+\t\tparkingService.processIncomingVehicle();\n+\n+\t\tMockito.verify(ticketDAO).saveTicket(Mockito.any(Ticket.class));\n+\t\tMockito.verify(parkingSpotDAO).updateParking(Mockito.any(ParkingSpot.class));\n+\n+\t\t// TODO: check that a ticket is actually saved in DB and Parking table is\n+\t\t// updated with availability\n+\t}\n+\n+\t@Test\n+\tpublic void testParkingLotExit() {\n+\t\tParkingService parkingService = new ParkingService(inputReaderUtil, parkingSpotDAO, ticketDAO);\n+\t\tparkingService.processIncomingVehicle();\n+\n+\t\tParkingSpot parkingSpot = new ParkingSpot(1, ParkingType.CAR, false);\n+\t\tTicket ticket = new Ticket();\n+\t\tticket.setParkingSpot(parkingSpot);\n+\t\tticket.setVehicleRegNumber(VehiculeRegNumber);\n+\t\tticket.setPrice(0);\n+\t\tticket.setInTime(new Date(System.currentTimeMillis() - (60 * 60 * 1000)));\n+\t\tticket.setOutTime(null);\n+\t\tticketDAO.saveTicket(ticket);\n+\t\tMockito.when(ticketDAO.getTicket(anyString())).thenReturn(ticket);\n+\t\tMockito.when(ticketDAO.updateTicket(any(Ticket.class))).thenReturn(true);\n+\t\tMockito.when(parkingSpotDAO.updateParking(any(ParkingSpot.class))).thenReturn(true);\n+\n+\t\tParkingService parkingServiceOut = new ParkingService(inputReaderUtil, parkingSpotDAO, ticketDAO);\n+\t\tparkingServiceOut.processExitingVehicle();\n+\n+\t\tMockito.verify(parkingSpotDAO).updateParking(Mockito.any(ParkingSpot.class));\n+\t\tAssertions.assertEquals(1.5, ticket.getPrice());\n+\t\t// TODO: check that the fare generated and out time are populated correctly in\n+\t\t// the database\n+\t}\n \n }"
  }
]
