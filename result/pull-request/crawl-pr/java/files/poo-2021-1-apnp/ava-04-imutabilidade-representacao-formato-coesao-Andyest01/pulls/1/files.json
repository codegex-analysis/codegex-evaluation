[
  {
    "sha": "d95dc7ba84784c802c502b106c569eda1a5b1657",
    "filename": ".vscode/settings.json",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/blob/c18bb0ef3b2121240623ab899234c408c4fafb66/.vscode/settings.json",
    "raw_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/raw/c18bb0ef3b2121240623ab899234c408c4fafb66/.vscode/settings.json",
    "contents_url": "https://api.github.com/repos/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/contents/.vscode/settings.json?ref=c18bb0ef3b2121240623ab899234c408c4fafb66",
    "patch": "@@ -14,7 +14,7 @@\n   \"editor.multiCursorModifier\": \"ctrlCmd\",\n   \"editor.renderWhitespace\": \"boundary\",\n   \"editor.renderControlCharacters\": true,\n-  \"editor.lineNumbers\": \"off\",\n+  \"editor.lineNumbers\": \"on\",\n   \"window.zoomLevel\": 0,\n   \"vsicons.dontShowNewVersionMessage\": true,\n   \"workbench.iconTheme\": \"vscode-icons\","
  },
  {
    "sha": "3cb619745210e8b1072c129d886f48ba007011b2",
    "filename": "src/App.java",
    "status": "modified",
    "additions": 98,
    "deletions": 2,
    "changes": 100,
    "blob_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/blob/c18bb0ef3b2121240623ab899234c408c4fafb66/src/App.java",
    "raw_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/raw/c18bb0ef3b2121240623ab899234c408c4fafb66/src/App.java",
    "contents_url": "https://api.github.com/repos/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/contents/src/App.java?ref=c18bb0ef3b2121240623ab899234c408c4fafb66",
    "patch": "@@ -1,7 +1,103 @@\n+import java.lang.Math;\n+import model.Time;\n+\n+\n class App {\n   public static void main(String[] args) {\n-    System.out.println(\"Olá mundo!\");\n-\n+    Time t1 = new Time();\n+    // representação string, padrão 00:00:00\n+    System.out.println(t1.toString().equals(\"00:00:00\"));\n+    Time t2 = new Time(1, 40, 5);\n+    System.out.println(t2.toString().equals(\"01:40:05\"));\n+    Time t3 = t1.plus(t2);\n+    System.out.println(t3.toString().equals(\"01:40:05\"));\n+    System.out.println(t3.hours() == 1);\n+    System.out.println(t3.minutes() == 40);\n+    System.out.println(t3.seconds() == 5);\n+    // deve ser imutável\n+    System.out.println(t1.hours() == 0);\n+    System.out.println(t1.minutes() == 0);\n+    System.out.println(t1.seconds() == 0);\n+    // plus\n+    Time t4 = t3.plus(t2);\n+    System.out.println(t4.toString().equals(\"03:20:10\"));\n+    // implementar equals\n+    System.out.println(t4.equals(new Time(3, 20, 10)));\n+    Time t5 = t2.plusHours(1);\n+    System.out.println(t5.toString().equals(\"02:40:05\"));\n+    Time t6 = t4.plusHours(23);\n+    System.out.println(t6.toString().equals(\"02:20:10\"));\n+    Time t7 = t6.plusMinutes(10);\n+    System.out.println(t7.toString().equals(\"02:30:10\"));\n+    Time t8 = t7.plusSeconds(80);\n+    System.out.println(t8.toString().equals(\"02:31:30\"));\n+    Time t9 = new Time().plusHours(19).plusMinutes(23).plusSeconds(18);\n+    System.out.println(t9.toString().equals(\"19:23:18\"));\n+    Time t10 = t9.plusHours(-1).plusMinutes(-1).plusSeconds(-1);\n+    System.out.println(t10.toString().equals(\"18:22:17\"));\n+    Time t11 = t10.minusHours(2).minusMinutes(2).minusSeconds(2);\n+    System.out.println(t11.toString().equals(\"16:20:15\"));\n+    Time t12 = t11.minusHours(-5);\n+    System.out.println(t12.toString().equals(\"21:20:15\"));\n+    Time t13 = t11.minus(t12);\n+    System.out.println(t13.toString().equals(\"19:00:00\"));\n+System.out.println(t13.isMidDay() == false);\n+Time t14 = t13.minus(t13);\n+System.out.println(t14.toString().equals(\"00:00:00\"));\n+System.out.println(t14.isMidDay() == false);\n+System.out.println(t14.isMidNight() == true);\n+System.out.println(t14.plusHours(12).isMidDay() == true);\n+Time t15 = new Time(3, 40);\n+System.out.println(t15.toString().equals(\"03:40:00\"));\n+Time t16 = t15.shift();\n+System.out.println(t16.toString().equals(\"15:40:00\"));\n+Time t17 = t16.shift();\n+System.out.println(t17.toString().equals(\"03:40:00\"));\n+Time t18 = t17.tick();\n+System.out.println(t18.toString().equals(\"03:40:01\"));\n+Time t19 = t18.tick().tick().tick();\n+System.out.println(t19.toString().equals(\"03:40:04\"));\n+Time t20 = t19.plusHours(50).plusMinutes(50).minusSeconds(50).tick().shift();\n+System.out.println(t20.toString().equals(\"18:29:15\"));\n \n+Time tr1 = new Time(9, 40, 15);\n+// representação string, padrão 00:00:00\n+System.out.println(tr1.toString().equals(\"09:40:15\"));\n+// representação string com formato alternativo\n+System.out.println(tr1.toLongString().equals(\"9 horas 40 minutos e 15 segundos\"));\n+// fromString, formato 00:00:00\n+Time tr2 = Time.fromString(\"01:36:00\");\n+System.out.println(tr2.toLongString().equals(\"1 hora e 36 minutos\"));\n+// fromDouble\n+Time tr3 = Time.fromDouble(3.824);\n+System.out.println(tr3.toLongString().equals(\"3 horas 49 minutos e 26 segundos\"));\n+// sem arredondamentos\n+System.out.println(Time.fromDouble(17.1447).toLongString().equals(\"17 horas 8 minutos e 40 segundos\"));\n+// fromSeconds\n+//Time tr4 = Time.fromSeconds(76632);\n+//System.out.println(tr4.toLongString().equals(\"21 horas 17 minutos e 12 segundos\"));//.equals(\"21 horas 15 minutos e 32 segundos\"));\n+System.out.println(Time.fromSeconds(68400).toLongString().equals(\"19 horas\"));\n+// toDouble\n+Time tr4 = Time.fromString(\"16:45:11\");\n+System.out.println(tr4.toDouble()); // 16.75305556 aproximadamente\n+System.out.println(Time.fromString(\"13:04:59\").toDouble()); // 13.08305556 aproximadamente\n+double tr5double = Time.fromString(\"13:04:59\").toDouble();\n+Time tr5 = Time.fromDouble(tr5double);\n+System.out.println(tr5.toLongString().equals(\"13 horas 4 minutos e 59 segundos\"));\n+// fromTime\n+Time tr6 = Time.from(tr5);\n+// toShortString\n+System.out.println(tr6.toShortString().equals(\"13h04m59s\"));\n+System.out.println(Time.fromString(\"15:03:00\").toShortString().equals(\"15h03m\"));\n+// System.out.println(Time.fromString(\"05:00:01\").toShortString().equals(\"15h00m01s\"));\n+// // PATCHED:\n+System.out.println(Time.fromString(\"15:00:01\").toShortString().equals(\"15h00m01s\"));\n+// constantes\n+Time tr7 = Time.MIDDAY;\n+System.out.println(tr7.toShortString().equals(\"12h\"));\n+Time tr8 = Time.MIDNIGHT;\n+System.out.println(tr8.toShortString().equals(\"00h\"));\n+System.out.println(Time.MIDDAY.toInt() == 43200);\n+System.out.println(Time.MIDNIGHT.toInt() == 0);\n   }\n }"
  },
  {
    "sha": "8e20692e3b8678cd87be0b64ae9fc054fb4a2f29",
    "filename": "src/model/Time.java",
    "status": "added",
    "additions": 189,
    "deletions": 0,
    "changes": 189,
    "blob_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/blob/c18bb0ef3b2121240623ab899234c408c4fafb66/src/model/Time.java",
    "raw_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/raw/c18bb0ef3b2121240623ab899234c408c4fafb66/src/model/Time.java",
    "contents_url": "https://api.github.com/repos/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/contents/src/model/Time.java?ref=c18bb0ef3b2121240623ab899234c408c4fafb66",
    "patch": "@@ -0,0 +1,189 @@\n+package model;\n+import model.util.TimeManager;\n+import static java.lang.Integer.parseInt;\n+\n+public class Time {\n+  private final int seconds;\n+  public static final Time MIDDAY = new Time(12, 0);\n+  public static final Time MIDNIGHT = new Time();\n+\n+  public Time() {\n+    this(0, 0, 0);\n+  }\n+\n+  public Time(int h, int m) {\n+    this(h, m, 0);\n+  }\n+\n+  public Time(int h, int m, int s) {\n+    this.seconds = TimeManager.checkTimeOverflow(h, m, s);\n+  }\n+\n+  public static Time fromString(String time) {\n+    return new Time(getHoursFromString(time), getMinutesFromString(time), getSecondsFromString(time));\n+  }\n+\n+  // \"01234567\"\n+  // \"01:36:00\"\n+  public static int getHoursFromString (String time) {\n+    return parseInt(time.substring(0, 2));\n+  }\n+\n+  public static int getMinutesFromString(String time) {\n+    return parseInt(time.substring(3, 5));\n+  }\n+\n+  public static int getSecondsFromString(String time) {\n+    return parseInt(time.substring(6, 8));\n+  }\n+\n+  // Time\n+  public static Time from(Time time) {\n+    return time;\n+  }\n+\n+  // 64021\n+  public static Time fromSeconds(int time) {\n+    return new Time(0, 0, time);\n+  }\n+\n+  // 3.824\n+  public static Time fromDouble(double time) {\n+    return fromSeconds(TimeManager.hoursToSeconds(time));\n+  }\n+\n+  public int hours() {\n+    return TimeManager.secondsToHours(this.seconds);\n+  }\n+\n+  public int minutes() {\n+    return TimeManager.secondsToMinutes(this.seconds);\n+  }\n+\n+  public int seconds() {\n+    return TimeManager.secondsToSeconds(this.seconds);\n+  }\n+\n+  public int toInt() {\n+    return this.seconds;\n+  }\n+\n+  // \"00:00:00\"\n+\tpublic String toString() {\n+\t\treturn (String.format(\"%02d:%02d:%02d\", this.hours(), this.minutes(), this.seconds()));\n+\t}\n+\n+  public String toLongString() {\n+    String time;\n+    if (this.hours() > 0) {\n+      time = this.hours() + \" hora\";\n+      if (this.hours() != 1) time += \"s\";\n+    } else {\n+      time = \"Meia noite \";\n+    }\n+\n+    if (this.minutes() > 0) {\n+      if (this.seconds() ==0)\n+        time += \" e\";\n+\n+      time += \" \" + this.minutes() + \" minutos\";\n+    }\n+\n+    if (this.seconds() > 0) {\n+      time += \" e \" + this.seconds() + \" segundos\";\n+    }\n+    return time;\n+  }\n+\n+  public String toShortString () {\n+    String time = (String.format(\"%02dh\", this.hours()));\n+\n+    if ((this.minutes() == 0) && (this.seconds() == 0))\n+        return time;\n+\n+    time += (String.format(\"%02dm\", this.minutes()));\n+\n+    if (this.seconds() > 0)\n+      time += (String.format(\"%02ds\", this.seconds()));\n+\n+    return time;\n+  }\n+\n+  public Double toDouble() {\n+    return (TimeManager.secondsToDoubleHours(this.seconds));\n+  }\n+\n+  public Time plus(Time t2) {\n+    return fromSeconds(this.toInt()+t2.toInt());\n+  }\n+\n+  public Time plusHours(int h) {\n+    return this.plus(new Time(h, 0, 0));\n+  }\n+\n+  public Time plusMinutes(int m) {\n+    return this.plus(new Time(0, m, 0));\n+  }\n+\n+  public Time plusSeconds(int s) {\n+    return this.plus(new Time(0, 0, s));\n+  }\n+\n+  public Time minus (Time t2) {\n+    return fromSeconds(this.toInt() - t2.toInt());\n+  }\n+\n+  public Time minusHours(int h) {\n+    return this.plusHours(-h);\n+  }\n+\n+  public Time minusMinutes(int m) {\n+    return this.plusMinutes(-m);\n+  }\n+\n+  public Time minusSeconds(int s) {\n+    return this.plusSeconds(-s);\n+  }\n+\n+  public boolean isMidDay() {\n+    return this.equals(\"12:00:00\");\n+  }\n+\n+  public boolean isMidNight() {\n+    return this.equals(\"00:00:00\");\n+  }\n+\n+  public Time shift() {\n+    return this.plusHours(12);\n+  }\n+\n+  public Time tick() {\n+    return this.plusSeconds(1);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (null == o) return false;\n+\n+    if (o instanceof String){\n+      String objString = (String) o;\n+\n+      if (objString.equals(this.toString()) ||\n+          objString.equals(this.toLongString())) {\n+        return true;\n+      }\n+    }\n+\n+    if (!(o instanceof Time))\n+      return false;\n+\n+    Time time2 = (Time) o;\n+    return (this.toInt() == time2.toInt());\n+  }\n+\n+  @Override\n+  public int hashCode() { // Não sei o que é nem para que serve, só fiz como o professor x)\n+    return this.toInt() * 7919;\n+  }\n+}"
  },
  {
    "sha": "fd7c4344af85161e53358e602af96a59b493a70b",
    "filename": "src/model/util/TimeConstants.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/blob/c18bb0ef3b2121240623ab899234c408c4fafb66/src/model/util/TimeConstants.java",
    "raw_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/raw/c18bb0ef3b2121240623ab899234c408c4fafb66/src/model/util/TimeConstants.java",
    "contents_url": "https://api.github.com/repos/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/contents/src/model/util/TimeConstants.java?ref=c18bb0ef3b2121240623ab899234c408c4fafb66",
    "patch": "@@ -0,0 +1,14 @@\n+package model.util;\n+\n+enum TimeConstants {\n+// seconds in a:\n+  DAY (86400),\n+  HOUR (3600),\n+  MINUTE (60);\n+\n+  final int seconds;\n+\n+  TimeConstants(int seconds) {\n+    this.seconds = seconds;\n+  }\n+}"
  },
  {
    "sha": "7d8bafa8ac499453188c2a0c95a93951ee36005b",
    "filename": "src/model/util/TimeManager.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/blob/c18bb0ef3b2121240623ab899234c408c4fafb66/src/model/util/TimeManager.java",
    "raw_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/raw/c18bb0ef3b2121240623ab899234c408c4fafb66/src/model/util/TimeManager.java",
    "contents_url": "https://api.github.com/repos/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-Andyest01/contents/src/model/util/TimeManager.java?ref=c18bb0ef3b2121240623ab899234c408c4fafb66",
    "patch": "@@ -0,0 +1,50 @@\n+package model.util;\n+\n+public final class TimeManager {\n+  static final double INVERSE_MINUTE = 1.0D / TimeConstants.MINUTE.seconds;\n+  static final double INVERSE_HOUR = 1.0D / TimeConstants.HOUR.seconds;\n+  // Divide only once\n+\n+  private TimeManager ()\n+  {} // Just to avoid default public class from being called elsewhere\n+\n+  public static int hoursToSeconds (int h) {\n+    return h * TimeConstants.HOUR.seconds;\n+  } // internal class use, public just in case\n+\n+  public static int hoursToSeconds(double h) {\n+    return (int) (h * TimeConstants.HOUR.seconds);\n+  } // external use\n+\n+  public static int minutesToSeconds (int m) {\n+    return m * TimeConstants.MINUTE.seconds;\n+  }\n+\n+  public static int secondsToHours (int s) {\n+    return (int) (s * INVERSE_HOUR);\n+  }\n+\n+  public static int secondsToMinutes(int s) {\n+    return (int) ((s % TimeConstants.HOUR.seconds) * INVERSE_MINUTE);\n+  }\n+\n+  public static int secondsToSeconds (int s) { // loved this name\n+    return s % TimeConstants.MINUTE.seconds;\n+  }\n+\n+  public static double secondsToDoubleHours (int s) {\n+    return (s * INVERSE_HOUR);\n+  }\n+\n+  public static int checkTimeOverflow(int h, int m, int s) {\n+    int seconds = hoursToSeconds(h) + minutesToSeconds(m) + s;\n+\n+    if (Math.abs(seconds) >= TimeConstants.DAY.seconds)\n+      seconds = seconds % TimeConstants.DAY.seconds;\n+\n+    if (seconds < 0)\n+      seconds = TimeConstants.DAY.seconds + seconds;\n+\n+    return seconds;\n+  }\n+}"
  }
]
