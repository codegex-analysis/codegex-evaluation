[
  {
    "sha": "319e60ef4a187d0daa3c1ab3aab5136c7b05ddbe",
    "filename": "src/App.java",
    "status": "modified",
    "additions": 69,
    "deletions": 3,
    "changes": 72,
    "blob_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-cristiancpaz/blob/1383c60b1197b51e3e81d5f18bd82b9f9ed66c78/src/App.java",
    "raw_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-cristiancpaz/raw/1383c60b1197b51e3e81d5f18bd82b9f9ed66c78/src/App.java",
    "contents_url": "https://api.github.com/repos/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-cristiancpaz/contents/src/App.java?ref=1383c60b1197b51e3e81d5f18bd82b9f9ed66c78",
    "patch": "@@ -1,7 +1,73 @@\n class App {\n-  public static void main(String[] args) {\n-    System.out.println(\"Olá mundo!\");\n+    public static void main(String[] args) {\n+        \n+    Time t1 = new Time();\n+// representação string, padrão 00:00:00\n+System.out.println(t1.toString().equals(\"00:00:00\"));\n+System.out.println(t1.toString().equals(\"00:00:00\"));\n \n \n-  }\n+Time t2 = new Time(1, 40, 5);\n+System.out.println(t2.toString().equals(\"01:40:05\"));\n+//System.out.println(t2.toString());\n+Time t3 = t1.plus(t2);\n+System.out.println(t3.toString().equals(\"01:40:05\"));\n+System.out.println(t3.toString()+ \"teste\");\n+\n+System.out.println(t3.getHours() == 1);//alterado para getH esttava somente hours\n+\n+System.out.println(t3.getMinutes() == 40);\n+System.out.println(t3.getSeconds() == 5);\n+\n+// deve ser imutável\n+System.out.println(t1.getHours() == 0);\n+System.out.println(t1.getMinutes() == 0);\n+System.out.println(t1.getSeconds() == 0);\n+\n+// plus\n+Time t4 = t3.plus(t2);\n+System.out.println(t4.toString().equals(\"03:20:10\"));\n+System.out.println(t4.toString()+\"teste\");\n+/*\n+// implementar equals\n+System.out.println(t4.equals(new Time(3, 20, 10)));\n+Time t5 = t2.plusHours(1);\n+System.out.println(t5.toString().equals(\"02:40:05\"));\n+Time t6 = t4.plusHours(23);\n+System.out.println(t6.toString().equals(\"02:20:10\"));\n+Time t7 = t6.plusMinutes(10);\n+System.out.println(t7.toString().equals(\"02:30:10\"));\n+Time t8 = t7.plusSeconds(80);\n+System.out.println(t8.toString().equals(\"02:31:30\"));\n+Time t9 = new Time().plusHours(19).plusMinutes(23).plusSeconds(18);\n+System.out.println(t9.toString().equals(\"19:23:18\"));\n+Time t10 = t9.plusHours(-1).plusMinutes(-1).plusSeconds(-1);\n+System.out.println(t10.toString().equals(\"18:22:17\"));\n+Time t11 = t10.minusHours(2).minusMinutes(2).minusSeconds(2);\n+System.out.println(t11.toString().equals(\"16:20:15\"));\n+Time t12 = t11.minusHours(-5);\n+System.out.println(t12.toString().equals(\"21:20:15\"));\n+Time t13 = t11.minus(t12);\n+System.out.println(t13.toString().equals(\"19:00:00\"));\n+System.out.println(t13.isMidDay() == false);\n+Time t14 = t13.minus(t13);\n+System.out.println(t14.toString().equals(\"00:00:00\"));\n+System.out.println(t14.isMidDay() == false);\n+System.out.println(t14.isMidNight() == true);\n+System.out.println(t14.plusHours(12).isMidDay() == true);\n+Time t15 = new Time(3, 40);\n+System.out.println(t15.toString().equals(\"03:40:00\"));\n+Time t16 = t15.shift();\n+System.out.println(t16.toString().equals(\"15:40:00\"));\n+Time t17 = t16.shift();\n+System.out.println(t17.toString().equals(\"03:40:00\"));\n+Time t18 = t17.tick();\n+System.out.println(t18.toString().equals(\"03:40:01\"));\n+Time t19 = t18.tick().tick().tick();\n+System.out.println(t19.toString().equals(\"03:40:04\"));\n+Time t20 = t19.plusHours(50).plusMinutes(50).minusSeconds(50).tick().shift();\n+System.out.println(t20.toString().equals(\"quanto vale t20? escreva aqui\"));\n+   \n+*/\n+    }\n }"
  },
  {
    "sha": "42cedea4ca7dfb10569c023054586abbf6bc1765",
    "filename": "src/Time.java",
    "status": "added",
    "additions": 203,
    "deletions": 0,
    "changes": 203,
    "blob_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-cristiancpaz/blob/1383c60b1197b51e3e81d5f18bd82b9f9ed66c78/src/Time.java",
    "raw_url": "https://github.com/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-cristiancpaz/raw/1383c60b1197b51e3e81d5f18bd82b9f9ed66c78/src/Time.java",
    "contents_url": "https://api.github.com/repos/poo-2021-1-apnp/ava-04-imutabilidade-representacao-formato-coesao-cristiancpaz/contents/src/Time.java?ref=1383c60b1197b51e3e81d5f18bd82b9f9ed66c78",
    "patch": "@@ -0,0 +1,203 @@\n+class Time {\n+     private final int hours;\n+     private final int minutes;\n+     private final int seconds;\n+     \n+\n+    Time(){\n+        this.hours = 0;\n+        this.minutes = 0;\n+        this.seconds = 0;\n+    }\n+    Time(int hours, int minutes, int seconds){\n+        this.hours = hours;\n+        this.minutes = minutes;\n+        this.seconds = seconds;\n+    }\n+    Time(int hours, int minutes){\n+        this.hours = hours;\n+        this.minutes = minutes;\n+        this.seconds = 0;\n+    }\n+    Time(int hours){\n+        this.hours = hours;\n+        this.minutes = 0;\n+        this.seconds = 0;\n+    }\n+       \n+    public int getHours(){\n+        return this.hours;\n+    }\n+    public int getMinutes(){\n+        \n+        return this.minutes;\n+    }\n+    public int getSeconds(){\n+        return this.seconds;\n+    }\n+    \n+    public Time plus(Time time) {\n+        Time t3 = new Time();\n+        int sec1 = this.converteSegundos();\n+        int sec2 = time.converteSegundos();\n+        int segundsTotal = sec1 + sec2;\n+        t3 = converteTempo(segundsTotal);\n+        return  t3;\n+    }\n+    \n+    public Time plusHours(int hora) {\n+        int hr = this.getHours() + hora;\n+       if(hr <= 23){\n+           hr = hr + 0;\n+       }\n+       if(hr == 24){\n+           hr = 00;\n+       }\n+       if(hr > 24){\n+           hr = hr - 24;\n+       }\n+\n+        return new Time(hr, this.minutes, this.seconds);\n+    }\n+    //minus\n+    public Time minusHours(int i) {\n+        int hr = this.getHours() - i;\n+        return new Time(hr, this.minutes, this.seconds);\n+    } \n+    public Time minusMinutes(int i) {\n+        int min = this.getMinutes() - i;\n+        return new Time(this.hours, min, this.seconds);\n+    } \n+    public Time minusSeconds(int i) {\n+        int sc = this.getSeconds() - i;\n+        return new Time(this.hours, this.minutes, sc);\n+    } \n+    public Time minus(Time t){\n+        return new Time((this.getHours() - t.hours)+(this.getMinutes() - t.minutes)+(this.getSeconds() - t.seconds));\n+    }\n+    public boolean isMidDay(){\n+        if(this.getHours() == 12){\n+            return true;\n+        }else{\n+            return false;\n+        }\n+        \n+    }\n+    public boolean isMidNight(){\n+        if(this.getHours() == 00){\n+            return true;\n+        }else{\n+            return false;\n+        }\n+    }\n+    public Time tick(){\n+        \n+        return this.plusSeconds(1);\n+    }\n+   \n+  \n+    public Time shift() {\n+        return this.plusHours(12);\n+    }\n+        \n+    \n+    //fim  minus\n+\n+    public Time plusMinutes(int min){\n+        \n+        int mn = min * 60;//converte para segundos\n+        int timeHora = this.getHours() * 3600;//converte para segundos\n+        int timeMinutes = this.getMinutes() * 60 + mn;//converte para segundos e soma o valor passado\n+        int timeSeconds = this.getSeconds();\n+\n+        int timeTotal = timeHora + timeMinutes + timeSeconds;\n+        int hours = timeTotal / 3600;\n+            timeTotal -= (hours * 3600);\n+        int minutes = timeTotal / 60;\n+            timeTotal = timeTotal % 60;\n+        int seconds = timeTotal;\n+        return new Time(hours, minutes, seconds);\n+    }\n+    \n+    public Time plusSeconds(int sec) {\n+        int second = this.getSeconds() + sec;\n+        int mn = 0;\n+        if (second < 59) {\n+            second = second + 0;\n+        }\n+        if (second == 60) {\n+            mn = this.getMinutes() + 1;\n+            second = 00;\n+        }\n+        if (second > 59) {\n+            int sc = (int)second / 60;\n+            mn = this.getMinutes() + sc;\n+            second = second - 60;\n+        }\n+        return new Time(this.hours, this.minutes, second);\n+    }\n+    //converte o obj para segundos\n+    public int converteSegundos(){\n+        return (this.getHours() * 3600) + (this.getMinutes() * 60) + (this.getSeconds());\n+    }\n+    //converte segundos para tempo\n+    public Time converteTempo(int totalSegundos){\n+        int seconds = totalSegundos;\n+        int hours = seconds / 3600;\n+            seconds -= (hours*3600);\n+        int minutes = seconds / 60;\n+            //segunds -= (minutes*60);\n+        seconds = seconds % 60;\n+        return new Time(hours, minutes, seconds);\n+    }\n+\n+    public String toLongString(){\n+        if (seconds == 0) {\n+            return String.valueOf(hours + \" hora e \") + String.valueOf(minutes + \" minutos\");\n+        }\n+        if(hours == 1){\n+            return String.valueOf(hours + \" hora \") + String.valueOf(minutes + \" minutos e \")\n+                    + String.valueOf(seconds + \" segundos\");\n+                \n+        }\n+        return String.valueOf(hours + \" horas \") + String.valueOf(minutes + \" minutos e \") +\n+        String.valueOf(seconds + \" segundos\"); \n+       \n+    }\n+    public static Time fromString(String str){\n+        String h = str.substring(0, 2);\n+        String m = str.substring(3, 5);\n+        String s = str.substring(7, 8);\n+        return new Time(Integer.parseInt(h),Integer.parseInt(m),Integer.parseInt(s));\n+    }\n+    public static Time fromDouble(Double num){\n+        Double seconds = num * 3600;\n+        int hours = seconds / 3600;\n+        seconds -= (hours * 3600);\n+        Double minutes = seconds / 60;\n+        // segunds -= (minutes*60);\n+        seconds = seconds % 60;\n+        return new Time((hours),(minutes),(seconds));\n+        \n+    }\n+\n+    @Override\n+    public String toString(){\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj){\n+        if(obj instanceof Time){\n+            Time outroTime = (Time) obj;\n+            return this.hours   == outroTime.hours &&\n+                   this.minutes == outroTime.minutes &&\n+                   this.seconds == outroTime.seconds; \n+        }\n+        return false;\n+    }\n+   \n+   \n+   \n+    \n+}"
  }
]
