[
  {
    "sha": "3aa2f09ecfbceaf2d1cfba7179059177857fd438",
    "filename": "sdk-actors/src/main/java/io/dapr/actors/runtime/DaprStateAsyncProvider.java",
    "status": "modified",
    "additions": 5,
    "deletions": 9,
    "changes": 14,
    "blob_url": "https://github.com/dapr/java-sdk/blob/d3cfb8d84d5d8ea53b19a398231df84156ebce7c/sdk-actors/src/main/java/io/dapr/actors/runtime/DaprStateAsyncProvider.java",
    "raw_url": "https://github.com/dapr/java-sdk/raw/d3cfb8d84d5d8ea53b19a398231df84156ebce7c/sdk-actors/src/main/java/io/dapr/actors/runtime/DaprStateAsyncProvider.java",
    "contents_url": "https://api.github.com/repos/dapr/java-sdk/contents/sdk-actors/src/main/java/io/dapr/actors/runtime/DaprStateAsyncProvider.java?ref=d3cfb8d84d5d8ea53b19a398231df84156ebce7c",
    "patch": "@@ -9,6 +9,7 @@\n import io.dapr.actors.ActorId;\r\n import io.dapr.config.Properties;\r\n import io.dapr.serializer.DaprObjectSerializer;\r\n+import io.dapr.serializer.DefaultObjectSerializer;\r\n import io.dapr.utils.TypeRef;\r\n import reactor.core.publisher.Mono;\r\n \r\n@@ -26,11 +27,6 @@\n    */\r\n   private static final Charset CHARSET = Properties.STRING_CHARSET.get();\r\n \r\n-  /**\r\n-   * Marker to identify Json serializers.\r\n-   */\r\n-  public static final String JSON_CONTENT_TYPE = \"application/json\";\r\n-\r\n   /**\r\n    * Handles special serialization cases.\r\n    */\r\n@@ -49,7 +45,7 @@\n   /**\r\n    * Flag determining if state serializer is the default serializer instead of user provided.\r\n    */\r\n-  private final boolean isStateSerializerJson;\r\n+  private final boolean isStateSerializerDefault;\r\n \r\n   /**\r\n    * Instantiates a new Actor's state provider.\r\n@@ -60,7 +56,7 @@\n   DaprStateAsyncProvider(DaprClient daprClient, DaprObjectSerializer stateSerializer) {\r\n     this.daprClient = daprClient;\r\n     this.stateSerializer = stateSerializer;\r\n-    this.isStateSerializerJson = JSON_CONTENT_TYPE.equals(stateSerializer.getContentType());\r\n+    this.isStateSerializerDefault = stateSerializer.getClass() == DefaultObjectSerializer.class;\r\n   }\r\n \r\n   <T> Mono<T> load(String actorType, ActorId actorId, String stateName, TypeRef<T> type) {\r\n@@ -73,7 +69,7 @@\n         }\r\n \r\n         T response = this.stateSerializer.deserialize(s, type);\r\n-        if (this.isStateSerializerJson && (response instanceof byte[])) {\r\n+        if (this.isStateSerializerDefault && (response instanceof byte[])) {\r\n           if (s.length == 0) {\r\n             return Mono.empty();\r\n           }\r\n@@ -142,7 +138,7 @@\n         try {\r\n           byte[] data = this.stateSerializer.serialize(stateChange.getValue());\r\n           if (data != null) {\r\n-            if (this.isStateSerializerJson && !(stateChange.getValue() instanceof byte[])) {\r\n+            if (this.isStateSerializerDefault && !(stateChange.getValue() instanceof byte[])) {\r\n               // DefaultObjectSerializer is a JSON serializer, so we just pass it on.\r\n               value = new String(data, CHARSET);\r\n             } else {\r"
  },
  {
    "sha": "3b8a27320eef288ba84a9cec089aada08e494e1a",
    "filename": "sdk-actors/src/test/java/io/dapr/actors/runtime/DaprStateAsyncProviderTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 65,
    "changes": 66,
    "blob_url": "https://github.com/dapr/java-sdk/blob/d3cfb8d84d5d8ea53b19a398231df84156ebce7c/sdk-actors/src/test/java/io/dapr/actors/runtime/DaprStateAsyncProviderTest.java",
    "raw_url": "https://github.com/dapr/java-sdk/raw/d3cfb8d84d5d8ea53b19a398231df84156ebce7c/sdk-actors/src/test/java/io/dapr/actors/runtime/DaprStateAsyncProviderTest.java",
    "contents_url": "https://api.github.com/repos/dapr/java-sdk/contents/sdk-actors/src/test/java/io/dapr/actors/runtime/DaprStateAsyncProviderTest.java?ref=d3cfb8d84d5d8ea53b19a398231df84156ebce7c",
    "patch": "@@ -7,15 +7,13 @@\n \r\n import com.fasterxml.jackson.databind.ObjectMapper;\r\n import io.dapr.actors.ActorId;\r\n-import io.dapr.client.ObjectSerializer;\r\n import io.dapr.serializer.DaprObjectSerializer;\r\n import io.dapr.serializer.DefaultObjectSerializer;\r\n import io.dapr.utils.TypeRef;\r\n import org.junit.Assert;\r\n import org.junit.Test;\r\n import reactor.core.publisher.Mono;\r\n \r\n-import java.io.IOException;\r\n import java.util.Arrays;\r\n import java.util.Objects;\r\n \r\n@@ -29,29 +27,10 @@\n \r\n   private static final DaprObjectSerializer SERIALIZER = new DefaultObjectSerializer();\r\n \r\n-\r\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\r\n \r\n   private static final double EPSILON = 1e-10;\r\n \r\n-  class CustomJsonSerializer implements DaprObjectSerializer{\r\n-    private final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\r\n-\r\n-    @Override\r\n-    public byte[] serialize(Object o) throws IOException {\r\n-      return OBJECT_MAPPER.writeValueAsBytes(o);\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T> T deserialize(byte[] data, TypeRef<T> type) throws IOException {\r\n-      return OBJECT_MAPPER.readValue(data, OBJECT_MAPPER.constructType(type.getType()));\r\n-    }\r\n-\r\n-    @Override\r\n-    public String getContentType() {\r\n-      return \"application/json\";\r\n-    }\r\n-  }\r\n-\r\n   /**\r\n    * Class used to test JSON serialization.\r\n    */\r\n@@ -157,49 +136,6 @@ public void happyCaseApply() {\n     verify(daprClient).saveStateTransactionally(eq(\"MyActor\"), eq(\"123\"), any());\r\n   }\r\n \r\n-  @Test\r\n-  public void happyCaseApplyWithCustomJsonSerializer() {\r\n-    DaprClient daprClient = mock(DaprClient.class);\r\n-    when(daprClient\r\n-            .saveStateTransactionally(\r\n-                    eq(\"MyActor\"),\r\n-                    eq(\"123\"),\r\n-                    argThat(operations -> {\r\n-                      if (operations == null) {\r\n-                        return false;\r\n-                      }\r\n-\r\n-                      if (operations.size() != 1) {\r\n-                        return false;\r\n-                      }\r\n-                      ActorStateOperation operation = operations.get(0);\r\n-                        if (operation.getOperationType() == null) {\r\n-                          return false;\r\n-                        }\r\n-                        if (operation.getKey() == null) {\r\n-                          return false;\r\n-                        }\r\n-\r\n-                        String opName = operation.getOperationType();\r\n-                        String key = operation.getKey();\r\n-                        Object value = operation.getValue();\r\n-\r\n-                        return \"upsert\".equals(opName) &&\r\n-                                \"object\".equals(key) &&\r\n-                                \"{\\\"id\\\":1000,\\\"name\\\":\\\"Roxane\\\"}\".equals(value);\r\n-                    })))\r\n-            .thenReturn(Mono.empty());\r\n-\r\n-    DaprStateAsyncProvider provider = new DaprStateAsyncProvider(daprClient, new CustomJsonSerializer());\r\n-    provider.apply(\"MyActor\",\r\n-            new ActorId(\"123\"),\r\n-            createInsertChange(\"object\", new Customer().setId(1000).setName(\"Roxane\")))\r\n-            .block();\r\n-\r\n-    verify(daprClient).saveStateTransactionally(eq(\"MyActor\"), eq(\"123\"), any());\r\n-  }\r\n-\r\n-\r\n   @Test\r\n   public void happyCaseLoad() throws Exception {\r\n     DaprClient daprClient = mock(DaprClient.class);\r"
  }
]
