[
  {
    "sha": "107037bb6e4a2c55770d643ec58af7b949843ade",
    "filename": "AnkiDroid/src/main/java/com/ichi2/anki/HtmlImageGetter.java",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/ankidroid/Anki-Android/blob/5fa2093c90dd17f4245b7bdcd4f4e3c55278ac69/AnkiDroid/src/main/java/com/ichi2/anki/HtmlImageGetter.java",
    "raw_url": "https://github.com/ankidroid/Anki-Android/raw/5fa2093c90dd17f4245b7bdcd4f4e3c55278ac69/AnkiDroid/src/main/java/com/ichi2/anki/HtmlImageGetter.java",
    "contents_url": "https://api.github.com/repos/ankidroid/Anki-Android/contents/AnkiDroid/src/main/java/com/ichi2/anki/HtmlImageGetter.java?ref=5fa2093c90dd17f4245b7bdcd4f4e3c55278ac69",
    "patch": "@@ -0,0 +1,90 @@\n+package com.ichi2.anki;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.graphics.drawable.BitmapDrawable;\n+import android.graphics.drawable.Drawable;\n+import android.graphics.drawable.LevelListDrawable;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.text.Html;\n+import android.text.Html.ImageGetter;\n+import android.text.Spanned;\n+import android.util.Log;\n+import android.widget.ImageView;\n+import android.widget.TextView;\n+\n+public class HtmlImageGetter extends Activity implements ImageGetter {\n+    private final static String TAG = \"HtmlImageGetter\";\n+    private TextView mTv;\n+    private Context mContext;\n+\n+    @SuppressWarnings( \"deprecation\" )\n+    public HtmlImageGetter(TextView txt, String source, Context context) {\n+        this.mTv = txt; this.mContext = context;\n+        Spanned spanned = Html.fromHtml(source, this, null);\n+        mTv.setText(spanned);\n+    }\n+\n+    @SuppressWarnings( \"deprecation\" )\n+    @Override\n+    public Drawable getDrawable(String source) {\n+        LevelListDrawable d = new LevelListDrawable();\n+        Drawable empty = mContext.getResources().getDrawable(R.drawable.ic_add_toolbar_icon);\n+        d.addLevel(0, 0, empty);\n+        d.setBounds(0, 0, empty.getIntrinsicWidth(), empty.getIntrinsicHeight());\n+\n+        new LoadImage().execute(source, d);\n+\n+        return d;\n+    }\n+\n+    @SuppressWarnings( \"deprecation\" )\n+    class LoadImage extends AsyncTask<Object, Void, Bitmap> {\n+\n+        private LevelListDrawable mDrawable;\n+\n+        @Override\n+        protected Bitmap doInBackground(Object... params) {\n+            String source = (String) params[0];\n+            mDrawable = (LevelListDrawable) params[1];\n+            Log.d(TAG, \"doInBackground \" + source);\n+            try {\n+                InputStream is = new URL(source).openStream();\n+                return BitmapFactory.decodeStream(is);\n+            } catch (FileNotFoundException e) {\n+                e.printStackTrace();\n+            } catch (MalformedURLException e) {\n+                e.printStackTrace();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        protected void onPostExecute(Bitmap bitmap) {\n+            Log.d(TAG, \"onPostExecute drawable \" + mDrawable);\n+            Log.d(TAG, \"onPostExecute bitmap \" + bitmap);\n+            if (bitmap != null) {\n+                BitmapDrawable d = new BitmapDrawable(bitmap);\n+                mDrawable.addLevel(1, 1, d);\n+                mDrawable.setBounds(0, 0, bitmap.getWidth(), bitmap.getHeight());\n+                mDrawable.setLevel(1);\n+                // i don't know yet a better way to refresh TextView\n+                // mTv.invalidate() doesn't work as expected\n+                CharSequence t = mTv.getText();\n+                mTv.setText(t);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "98ef650be2f4e123f7f063aa0645b441e93ca6cf",
    "filename": "AnkiDroid/src/main/java/com/ichi2/anki/StudyOptionsFragment.java",
    "status": "modified",
    "additions": 36,
    "deletions": 10,
    "changes": 46,
    "blob_url": "https://github.com/ankidroid/Anki-Android/blob/5fa2093c90dd17f4245b7bdcd4f4e3c55278ac69/AnkiDroid/src/main/java/com/ichi2/anki/StudyOptionsFragment.java",
    "raw_url": "https://github.com/ankidroid/Anki-Android/raw/5fa2093c90dd17f4245b7bdcd4f4e3c55278ac69/AnkiDroid/src/main/java/com/ichi2/anki/StudyOptionsFragment.java",
    "contents_url": "https://api.github.com/repos/ankidroid/Anki-Android/contents/AnkiDroid/src/main/java/com/ichi2/anki/StudyOptionsFragment.java?ref=5fa2093c90dd17f4245b7bdcd4f4e3c55278ac69",
    "patch": "@@ -18,6 +18,13 @@\n import android.content.Context;\n import android.content.Intent;\n import android.content.res.Resources;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.graphics.Canvas;\n+import android.graphics.drawable.BitmapDrawable;\n+import android.graphics.drawable.Drawable;\n+import android.graphics.drawable.LevelListDrawable;\n+import android.os.AsyncTask;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n@@ -27,15 +34,19 @@\n import androidx.fragment.app.Fragment;\n import androidx.appcompat.widget.Toolbar;\n \n+import android.text.Html;\n import android.text.Spanned;\n import android.text.method.LinkMovementMethod;\n+import android.util.DisplayMetrics;\n+import android.util.Log;\n import android.view.LayoutInflater;\n import android.view.Menu;\n import android.view.MenuItem;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.Button;\n import android.widget.TextView;\n+import android.widget.Toast;\n \n import com.afollestad.materialdialogs.MaterialDialog;\n import com.ichi2.anim.ActivityTransitionAnimation;\n@@ -54,6 +65,15 @@\n import com.ichi2.utils.BooleanGetter;\n import com.ichi2.utils.HtmlUtils;\n \n+\n+\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n import timber.log.Timber;\n \n import static com.ichi2.anim.ActivityTransitionAnimation.Direction.*;\n@@ -69,6 +89,8 @@\n     private static final int BROWSE_CARDS = 3;\n     private static final int STATISTICS = 4;\n     private static final int DECK_OPTIONS = 5;\n+    int ScreenW, ScreenH;\n+\n \n     /**\n      * Constants for selecting which content view to display\n@@ -95,6 +117,10 @@\n     /**\n      * UI elements for \"Study Options\" view\n      */\n+\n+\n+\n+\n     @Nullable\n     private View mStudyOptionsView;\n     private View mDeckInfoLayout;\n@@ -205,6 +231,15 @@ public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,\n             configureToolbar();\n         }\n         refreshInterface(true);\n+\n+        //For Displaying Image in Desc\n+        DisplayMetrics displayMetrics = getResources().getDisplayMetrics();\n+        float dpWidth = displayMetrics.widthPixels;\n+        float dpHeight = displayMetrics.heightPixels;\n+\n+         ScreenW = (int) dpWidth;\n+         ScreenH = (int) dpHeight;\n+\n         return studyOptionsView;\n     }\n \n@@ -625,7 +660,7 @@ public void onPostExecute(int[] obj) {\n                         desc = getCol().getDecks().getActualDescription();\n                     }\n                     if (desc.length() > 0) {\n-                        mTextDeckDescription.setText(formatDescription(desc));\n+                        new HtmlImageGetter(mTextDeckDescription, desc, getContext());\n                         mTextDeckDescription.setVisibility(View.VISIBLE);\n                     } else {\n                         mTextDeckDescription.setVisibility(View.GONE);\n@@ -696,15 +731,6 @@ private boolean tryOpenCramDeckOptions() {\n         return true;\n     }\n \n-    @VisibleForTesting()\n-    static Spanned formatDescription(String desc) {\n-        //#5715: In deck description, ignore what is in style and script tag\n-        //Since we don't currently execute the JS/CSS, it's not worth displaying.\n-        String withStrippedTags = Utils.stripHTMLScriptAndStyleTags(desc);\n-        //#5188 - fromHtml displays newlines as \" \"\n-        String withFixedNewlines = HtmlUtils.convertNewlinesToHtml(withStrippedTags);\n-        return HtmlCompat.fromHtml(withFixedNewlines, HtmlCompat.FROM_HTML_MODE_LEGACY);\n-    }\n \n     private Collection getCol() {\n         return CollectionHelper.getInstance().getCol(getContext());"
  }
]
