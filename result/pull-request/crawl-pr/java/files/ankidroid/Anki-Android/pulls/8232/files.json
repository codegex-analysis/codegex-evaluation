[
  {
    "sha": "217296ef55b780fc88464e7eca85aa69520cc6e5",
    "filename": "AnkiDroid/src/main/java/com/ichi2/anki/widgets/DeckAdapter.java",
    "status": "modified",
    "additions": 15,
    "deletions": 28,
    "changes": 43,
    "blob_url": "https://github.com/ankidroid/Anki-Android/blob/a08a188331ac9aef5ce040f5ee4b8d491719150f/AnkiDroid/src/main/java/com/ichi2/anki/widgets/DeckAdapter.java",
    "raw_url": "https://github.com/ankidroid/Anki-Android/raw/a08a188331ac9aef5ce040f5ee4b8d491719150f/AnkiDroid/src/main/java/com/ichi2/anki/widgets/DeckAdapter.java",
    "contents_url": "https://api.github.com/repos/ankidroid/Anki-Android/contents/AnkiDroid/src/main/java/com/ichi2/anki/widgets/DeckAdapter.java?ref=a08a188331ac9aef5ce040f5ee4b8d491719150f",
    "patch": "@@ -61,7 +61,7 @@\n \n     private final LayoutInflater mLayoutInflater;\n     private final List<T> mDeckList;\n-    /** A subset of mDeckList (currently displayed) */\n+    /**A subset of mDeckList (currently displayed)*/\n     private final List<AbstractDeckTreeNode<?>> mCurrentDeckList = new ArrayList<>();\n     private final int mZeroCountColor;\n     private final int mNewCountColor;\n@@ -131,7 +131,7 @@ public DeckAdapter(LayoutInflater layoutInflater, Context context) {\n                 android.R.attr.textColor,\n                 R.attr.dynDeckColor,\n                 R.attr.expandRef,\n-                R.attr.collapseRef };\n+                R.attr.collapseRef};\n         TypedArray ta = context.obtainStyledAttributes(attrs);\n         mZeroCountColor = ta.getColor(0, ContextCompat.getColor(context, R.color.black));\n         mNewCountColor = ta.getColor(1, ContextCompat.getColor(context, R.color.black));\n@@ -160,13 +160,13 @@ public void setDeckExpanderClickListener(View.OnClickListener listener) {\n     public void setDeckLongClickListener(View.OnLongClickListener listener) {\n         mDeckLongClickListener = listener;\n     }\n-\n-    /** Sets whether the control should have partial transparency to allow a background to be seen */\n+    /**\n+     * Sets whether the control should have partial transparency to allow a background to be seen\n+     */\n     public void enablePartialTransparencyForBackground(boolean isTransparent) {\n         mPartiallyTransparentForBackground = isTransparent;\n     }\n \n-\n     /**\n      * Consume a list of {@link AbstractDeckTreeNode}s to render a new deck list.\n      * @param filter The string to filter the deck by\n@@ -188,15 +188,13 @@ public void buildDeckList(List<T> nodes, Collection col, @Nullable CharSequence\n         return getDeckList().get(pos);\n     }\n \n-\n     @NonNull\n     @Override\n     public DeckAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n         View v = mLayoutInflater.inflate(R.layout.deck_item, parent, false);\n         return new ViewHolder(v);\n     }\n \n-\n     @Override\n     public void onBindViewHolder(ViewHolder holder, int position) {\n         // Update views for this node\n@@ -247,11 +245,11 @@ public void onBindViewHolder(ViewHolder holder, int position) {\n         // Set the card counts and their colors\n         if (node.shouldDisplayCounts()) {\n             holder.deckNew.setText(String.valueOf(node.getNewCount()));\n-            holder.deckNew.setTextColor((node.getNewCount() == 0) ? mZeroCountColor : mNewCountColor);\n+            holder.deckNew.setTextColor(mNewCountColor);\n             holder.deckLearn.setText(String.valueOf(node.getLrnCount()));\n-            holder.deckLearn.setTextColor((node.getLrnCount() == 0) ? mZeroCountColor : mLearnCountColor);\n+            holder.deckLearn.setTextColor(mLearnCountColor);\n             holder.deckRev.setText(String.valueOf(node.getRevCount()));\n-            holder.deckRev.setTextColor((node.getRevCount() == 0) ? mZeroCountColor : mReviewCountColor);\n+            holder.deckRev.setTextColor(mReviewCountColor);\n         }\n \n         // Store deck ID in layout's tag for easy retrieval in our click listeners\n@@ -264,34 +262,30 @@ public void onBindViewHolder(ViewHolder holder, int position) {\n         holder.countsLayout.setOnClickListener(mCountsClickListener);\n     }\n \n-\n     private void setBackgroundAlpha(View view, @SuppressWarnings(\"SameParameterValue\") double alphaPercentage) {\n         Drawable background = view.getBackground().mutate();\n         background.setAlpha((int) (255 * alphaPercentage));\n         view.setBackground(background);\n     }\n \n-\n     private boolean isCurrentlySelectedDeck(AbstractDeckTreeNode<?> node) {\n         return node.getDid() == mCol.getDecks().current().optLong(\"id\");\n     }\n \n-\n     @Override\n     public int getItemCount() {\n         return mCurrentDeckList.size();\n     }\n \n-\n-    private void setDeckExpander(ImageButton expander, ImageButton indent, AbstractDeckTreeNode<?> node){\n+    private void setDeckExpander(ImageButton expander, ImageButton indent, AbstractDeckTreeNode<?> node) {\n         boolean collapsed = mCol.getDecks().get(node.getDid()).optBoolean(\"collapsed\", false);\n         // Apply the correct expand/collapse drawable\n         if (node.hasChildren()) {\n             expander.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);\n             if (collapsed) {\n                 expander.setImageDrawable(mExpandImage);\n                 expander.setContentDescription(expander.getContext().getString(R.string.expand));\n-            } else  {\n+            } else {\n                 expander.setImageDrawable(mCollapseImage);\n                 expander.setContentDescription(expander.getContext().getString(R.string.collapse));\n             }\n@@ -304,7 +298,6 @@ private void setDeckExpander(ImageButton expander, ImageButton indent, AbstractD\n         indent.setMinimumWidth(width);\n     }\n \n-\n     private void processNodes(List<T> nodes) {\n         for (T node : nodes) {\n             // If the default deck is empty, hide it by not adding it to the deck list.\n@@ -336,12 +329,10 @@ private void processNodes(List<T> nodes) {\n             processNodes(node.getChildren());\n         }\n     }\n-\n-\n     /**\n      * Return the position of the deck in the deck list. If the deck is a child of a collapsed deck\n      * (i.e., not visible in the deck list), then the position of the parent deck is returned instead.\n-     *\n+     * <p>\n      * An invalid deck ID will return position 0.\n      */\n     public int findDeckPosition(long did) {\n@@ -381,15 +372,15 @@ public Integer getDue() {\n         return mCurrentDeckList;\n     }\n \n-\n     @Override\n     public Filter getFilter() {\n         return new DeckFilter();\n     }\n \n-\n     private class DeckFilter extends Filter {\n-        private final @NonNull ArrayList<AbstractDeckTreeNode<?>> mFilteredDecks = new ArrayList<>();\n+        private final @NonNull\n+        ArrayList<AbstractDeckTreeNode<?>> mFilteredDecks = new ArrayList<>();\n+\n         private DeckFilter() {\n             super();\n         }\n@@ -411,7 +402,6 @@ protected FilterResults performFiltering(CharSequence constraint) {\n                 List<T> filteredDecks = filterDecks(filterPattern, allDecks);\n                 mFilteredDecks.addAll(filteredDecks);\n             }\n-\n             return FilterResultsUtils.fromCollection(mFilteredDecks);\n         }\n \n@@ -422,7 +412,6 @@ protected void publishResults(CharSequence constraint, FilterResults results) {\n             notifyDataSetChanged();\n         }\n \n-\n         private List<T> filterDecks(String filterPattern, List<T> allDecks) {\n             ArrayList<T> ret = new ArrayList<>(allDecks.size());\n             for (T tag : allDecks) {\n@@ -450,12 +439,10 @@ private T filterDeckInternal(String filterPattern, T root) {\n                     ret.add(returned);\n                 }\n             }\n-\n             // If any of a deck's children contains the search string, then the deck is valid\n             return ret.isEmpty() ? null : root.withChildren(ret);\n         }\n-\n-\n+        \n         private boolean containsFilterString(String filterPattern, T root) {\n             String deckName = root.getFullDeckName();\n             return deckName.toLowerCase(Locale.getDefault()).contains(filterPattern) || deckName.toLowerCase(Locale.ROOT).contains(filterPattern);"
  },
  {
    "sha": "f7f468e5931456980b6e73198e2533a2a7ff7879",
    "filename": "AnkiDroid/src/main/res/layout/homescreen.xml",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/ankidroid/Anki-Android/blob/a08a188331ac9aef5ce040f5ee4b8d491719150f/AnkiDroid/src/main/res/layout/homescreen.xml",
    "raw_url": "https://github.com/ankidroid/Anki-Android/raw/a08a188331ac9aef5ce040f5ee4b8d491719150f/AnkiDroid/src/main/res/layout/homescreen.xml",
    "contents_url": "https://api.github.com/repos/ankidroid/Anki-Android/contents/AnkiDroid/src/main/res/layout/homescreen.xml?ref=a08a188331ac9aef5ce040f5ee4b8d491719150f",
    "patch": "@@ -1,13 +1,16 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<androidx.drawerlayout.widget.ClosableDrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-                                           android:id=\"@+id/drawer_layout\"\n-                                           android:layout_width=\"match_parent\"\n-                                           android:layout_height=\"match_parent\"\n-                                           android:fitsSystemWindows=\"true\">\n+<androidx.drawerlayout.widget.ClosableDrawerLayout android:id=\"@+id/drawer_layout\"\n+    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    android:fitsSystemWindows=\"true\">\n+\n     <com.drakeet.drawer.FullDraggableContainer\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\">\n-        <include layout=\"@layout/deck_picker\"/>\n+\n+        <include layout=\"@layout/deck_picker\" />\n     </com.drakeet.drawer.FullDraggableContainer>\n+\n     <include layout=\"@layout/navigation_drawer\" />\n </androidx.drawerlayout.widget.ClosableDrawerLayout>"
  }
]
