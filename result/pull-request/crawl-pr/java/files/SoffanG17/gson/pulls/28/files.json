[
  {
    "sha": "957b3ea3504e4d4d2abc3c4c9d6e34ea425b7fe6",
    "filename": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
    "status": "modified",
    "additions": 117,
    "deletions": 1,
    "changes": 118,
    "blob_url": "https://github.com/SoffanG17/gson/blob/46973963ae58208998d102180dc27622e2675c19/gson/src/main/java/com/google/gson/stream/JsonReader.java",
    "raw_url": "https://github.com/SoffanG17/gson/raw/46973963ae58208998d102180dc27622e2675c19/gson/src/main/java/com/google/gson/stream/JsonReader.java",
    "contents_url": "https://api.github.com/repos/SoffanG17/gson/contents/gson/src/main/java/com/google/gson/stream/JsonReader.java?ref=46973963ae58208998d102180dc27622e2675c19",
    "patch": "@@ -23,6 +23,9 @@\n import java.io.IOException;\n import java.io.Reader;\n import java.util.Arrays;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.File;\n \n /**\n  * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n@@ -419,6 +422,7 @@ public boolean hasNext() throws IOException {\n    * Returns the type of the next token without consuming it.\n    */\n   public JsonToken peek() throws IOException {\n+\n     int p = peeked;\n     if (p == PEEKED_NONE) {\n       p = doPeek();\n@@ -456,137 +460,249 @@ public JsonToken peek() throws IOException {\n       throw new AssertionError();\n     }\n   }\n-\n+  public static int covCount;\n+  public static boolean[] doPflags;\n   int doPeek() throws IOException {\n+    if(doPflags == null){\n+      doPflags = new boolean[51];\n+    }\n     int peekStack = stack[stackSize - 1];\n     if (peekStack == JsonScope.EMPTY_ARRAY) {\n+      //#0\n+      doPflags[0] = true;\n       stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;\n     } else if (peekStack == JsonScope.NONEMPTY_ARRAY) {\n+      //#1\n+      doPflags[1] = true;\n       // Look for a comma before the next element.\n       int c = nextNonWhitespace(true);\n       switch (c) {\n       case ']':\n+      //#2\n+      doPflags[2] = true;\n         return peeked = PEEKED_END_ARRAY;\n       case ';':\n+      //#3\n+      doPflags[3] = true;\n         checkLenient(); // fall-through\n       case ',':\n+      //#4\n+      doPflags[4] = true;\n         break;\n       default:\n+      //#5\n+      doPflags[5] = true;\n         throw syntaxError(\"Unterminated array\");\n       }\n     } else if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\n+      //#6\n+      doPflags[6] = true;\n       stack[stackSize - 1] = JsonScope.DANGLING_NAME;\n       // Look for a comma before the next element.\n       if (peekStack == JsonScope.NONEMPTY_OBJECT) {\n+        //#7\n+        doPflags[7] = true;\n         int c = nextNonWhitespace(true);\n         switch (c) {\n         case '}':\n+        //#8\n+        doPflags[8] = true;\n           return peeked = PEEKED_END_OBJECT;\n         case ';':\n+        //#9\n+        doPflags[9] = true;\n           checkLenient(); // fall-through\n         case ',':\n+        //#10\n+        doPflags[10] = true;\n           break;\n         default:\n+        //#11\n+        doPflags[11] = true;\n           throw syntaxError(\"Unterminated object\");\n         }\n       }\n       int c = nextNonWhitespace(true);\n       switch (c) {\n       case '\"':\n+      //#12\n+      doPflags[12] = true;\n         return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n       case '\\'':\n+      //#13\n+      doPflags[13] = true;\n         checkLenient();\n         return peeked = PEEKED_SINGLE_QUOTED_NAME;\n       case '}':\n+      //#14\n+      doPflags[14] = true;\n         if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n+          //#15\n+          doPflags[15] = true;\n           return peeked = PEEKED_END_OBJECT;\n         } else {\n+          //#16\n+          doPflags[16] = true;\n           throw syntaxError(\"Expected name\");\n         }\n       default:\n+      //#17\n+      doPflags[17] = true;\n         checkLenient();\n         pos--; // Don't consume the first character in an unquoted string.\n         if (isLiteral((char) c)) {\n+          //#18\n+          doPflags[18] = true;\n           return peeked = PEEKED_UNQUOTED_NAME;\n         } else {\n+          //#19\n+          doPflags[19] = true;\n           throw syntaxError(\"Expected name\");\n         }\n       }\n     } else if (peekStack == JsonScope.DANGLING_NAME) {\n+      //#20\n+      doPflags[20] = true;\n       stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;\n       // Look for a colon before the value.\n       int c = nextNonWhitespace(true);\n       switch (c) {\n       case ':':\n+        //#21\n+        doPflags[21] = true;\n         break;\n       case '=':\n+        //#22\n+        doPflags[22] = true;\n         checkLenient();\n         if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\n+          //#23\n+          doPflags[23] = true;\n           pos++;\n+        }else{\n+          //#24\n+          doPflags[24] = true;\n         }\n         break;\n       default:\n+        //#25\n+        doPflags[25] = true;\n         throw syntaxError(\"Expected ':'\");\n       }\n     } else if (peekStack == JsonScope.EMPTY_DOCUMENT) {\n+      //#26\n+      doPflags[26] = true;\n       if (lenient) {\n+        //#27\n+        doPflags[27] = true;\n         consumeNonExecutePrefix();\n+      }else{\n+        //#28\n+        doPflags[28] = true;\n       }\n       stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;\n     } else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {\n+      //#29\n+      doPflags[29] = true;\n       int c = nextNonWhitespace(false);\n       if (c == -1) {\n+        //#30\n+        doPflags[30] = true;\n         return peeked = PEEKED_EOF;\n       } else {\n+        //#31\n+        doPflags[31] = true;\n         checkLenient();\n         pos--;\n       }\n     } else if (peekStack == JsonScope.CLOSED) {\n+      //#32\n+      doPflags[32] = true;\n       throw new IllegalStateException(\"JsonReader is closed\");\n     }\n \n     int c = nextNonWhitespace(true);\n     switch (c) {\n     case ']':\n+    //#33\n+    doPflags[33] = true;\n       if (peekStack == JsonScope.EMPTY_ARRAY) {\n+        //#34\n+        doPflags[34] = true;\n         return peeked = PEEKED_END_ARRAY;\n+      }else{\n+        //#35\n+        doPflags[35] = true;\n       }\n       // fall-through to handle \",]\"\n     case ';':\n+      //#36\n+      doPflags[36] = true;\n     case ',':\n+      //#37\n+      doPflags[37] = true;\n       // In lenient mode, a 0-length literal in an array means 'null'.\n       if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n+        //#38\n+        doPflags[38] = true;\n         checkLenient();\n         pos--;\n         return peeked = PEEKED_NULL;\n       } else {\n+        //#39\n+        doPflags[39] = true;\n         throw syntaxError(\"Unexpected value\");\n       }\n     case '\\'':\n+    //#40\n+    doPflags[40] = true;\n       checkLenient();\n       return peeked = PEEKED_SINGLE_QUOTED;\n     case '\"':\n+    //#41\n+    doPflags[41] = true;\n       return peeked = PEEKED_DOUBLE_QUOTED;\n     case '[':\n+    //#42\n+    doPflags[42] = true;\n       return peeked = PEEKED_BEGIN_ARRAY;\n     case '{':\n+    //#43\n+    doPflags[43] = true;\n       return peeked = PEEKED_BEGIN_OBJECT;\n     default:\n+    //#44\n+    doPflags[44] = true;\n       pos--; // Don't consume the first character in a literal value.\n     }\n \n     int result = peekKeyword();\n     if (result != PEEKED_NONE) {\n+      //#45\n+      doPflags[45] = true;\n       return result;\n+    }else{\n+      //#46\n+      doPflags[46] = true;\n     }\n \n     result = peekNumber();\n     if (result != PEEKED_NONE) {\n+      //#47\n+      doPflags[47] = true;\n       return result;\n+    }else{\n+      //#48\n+      doPflags[48] = true;\n     }\n \n     if (!isLiteral(buffer[pos])) {\n+      //#49\n+      doPflags[49] = true;\n       throw syntaxError(\"Expected value\");\n+    }else{\n+      //#50\n+      doPflags[50] = true;\n     }\n \n     checkLenient();"
  },
  {
    "sha": "94014931b8ee2a98ad34cc597d6228dc46139e7c",
    "filename": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
    "status": "modified",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/SoffanG17/gson/blob/46973963ae58208998d102180dc27622e2675c19/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
    "raw_url": "https://github.com/SoffanG17/gson/raw/46973963ae58208998d102180dc27622e2675c19/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
    "contents_url": "https://api.github.com/repos/SoffanG17/gson/contents/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java?ref=46973963ae58208998d102180dc27622e2675c19",
    "patch": "@@ -22,6 +22,10 @@\n import java.io.StringReader;\n import java.util.Arrays;\n import junit.framework.TestCase;\n+import junit.framework.TestResult;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.File;\n \n import static com.google.gson.stream.JsonToken.BEGIN_ARRAY;\n import static com.google.gson.stream.JsonToken.BEGIN_OBJECT;\n@@ -35,6 +39,70 @@\n \n @SuppressWarnings(\"resource\")\n public final class JsonReaderTest extends TestCase {\n+\n+  \n+  @Override\n+  public void run(TestResult result) {\n+    int len = 52;\n+    if (JsonReader.covCount == 0){\n+      System.out.println(\"Init DIY coverage\");\n+      \n+      JsonReader.doPflags = new boolean[len];\n+      for(int i=0; i<len; i++){\n+        JsonReader.doPflags[i] = false;\n+      }\n+      JsonReader.covCount++;\n+    }else{\n+      JsonReader.covCount++;\n+      //System.out.println(\"Test nr: \" + JsonReader.covCount);\n+    }\n+\n+    super.run(result);\n+\n+    if(JsonReader.covCount == 120){\n+      try{\n+        System.out.println(\"Closing DIY coverage\");\n+        File file = new File(\"DiyCov.txt\");\n+        if (!file.exists()) {\n+          file.createNewFile();\n+       }\n+        BufferedWriter writer = new BufferedWriter(new FileWriter(file, false));\n+        int missed = 0;\n+        for(int i=0; i<len; i++){\n+          if(JsonReader.doPflags[i]){\n+            writer.write(\"[\" +i+ \"]true \");\n+          }else{\n+            writer.write(\"[\" +i+ \"]false \");    \n+            missed++;\n+          }\n+        }\n+        double coverage = 1.0 - (double) missed / (double)len;\n+        writer.write(\"\\nCoverage: \" + coverage * 100.0 + \"%\");\n+        writer.write(\"\\nDone!\\n\");\n+        writer.flush();\n+        writer.close();\n+      }catch(Exception e){}\n+    }\n+    \n+  }\n+  /**\n+   * Test that an unterminated Array throws the expected exception \n+   */\n+  public void testUnterminatedArray() throws IOException{\n+    JsonReader reader = new JsonReader(reader(\"[false [\"));\n+    reader.setLenient(true);\n+    try{\n+      \n+      reader.beginArray();\n+      reader.nextBoolean();\n+      reader.peek();\n+    }catch(com.google.gson.stream.MalformedJsonException e){\n+      assertTrue(true);\n+      return;\n+    }\n+    assertTrue(false);\n+  }\n+\n   public void testReadArray() throws IOException {\n     JsonReader reader = new JsonReader(reader(\"[true, true]\"));\n     reader.beginArray();"
  }
]
