[
  {
    "sha": "75d55c1f1630625c6c2b9d34f1931aa523c39889",
    "filename": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/MethodNode.java",
    "status": "modified",
    "additions": 14,
    "deletions": 25,
    "changes": 39,
    "blob_url": "https://github.com/hibernate/hibernate-orm/blob/3144cf75443264e0c26ae81768b7a6b1f72a0562/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/MethodNode.java",
    "raw_url": "https://github.com/hibernate/hibernate-orm/raw/3144cf75443264e0c26ae81768b7a6b1f72a0562/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/MethodNode.java",
    "contents_url": "https://api.github.com/repos/hibernate/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/MethodNode.java?ref=3144cf75443264e0c26ae81768b7a6b1f72a0562",
    "patch": "@@ -141,20 +141,25 @@ protected void resolveCollectionProperty(AST expr) throws SemanticException {\n \t\tString propertyName = CollectionProperties.getNormalizedPropertyName( methodName );\n \t\tif ( expr instanceof FromReferenceNode ) {\n \t\t\tFromReferenceNode collectionNode = (FromReferenceNode) expr;\n+\t\t\tfromElement = collectionNode.getFromElement();\n \t\t\t// If this is 'elements' then create a new FROM element.\n \t\t\tif ( CollectionPropertyNames.COLLECTION_ELEMENTS.equals( propertyName ) ) {\n-\t\t\t\thandleElements( collectionNode, propertyName );\n+\t\t\t\tQueryableCollection queryableCollection = fromElement.getQueryableCollection();\n+\n+\t\t\t\tString path = collectionNode.getPath() + \"[].\" + propertyName;\n+\t\t\t\tLOG.debugf( \"Creating elements for %s\", path );\n+\n+\t\t\t\tif ( !fromElement.isCollectionOfValuesOrComponents() ) {\n+\t\t\t\t\tgetWalker().addQuerySpaces( queryableCollection.getElementPersister().getQuerySpaces() );\n+\t\t\t\t}\n+\n+\t\t\t\tsetDataType( queryableCollection.getElementType() );\n+\t\t\t\tselectColumns = fromElement.toColumns( fromElement.getTableAlias(), propertyName, inSelect );\n \t\t\t}\n \t\t\telse {\n \t\t\t\t// Not elements(x)\n-\t\t\t\tfromElement = collectionNode.getFromElement();\n-\n-\t\t\t\tfinal CollectionPropertyReference cpr = fromElement.getCollectionPropertyReference( propertyName );\n-\t\t\t\tsetDataType( cpr.getType() );\n-\t\t\t\tselectColumns = cpr.toColumns( fromElement.getTableAlias() );\n-\n-//\t\t\t\tsetDataType( fromElement.getPropertyType( propertyName, propertyName ) );\n-//\t\t\t\tselectColumns = fromElement.toColumns( fromElement.getTableAlias(), propertyName, inSelect );\n+\t\t\t\tsetDataType( fromElement.getPropertyType( propertyName, propertyName ) );\n+\t\t\t\tselectColumns = fromElement.toColumns( fromElement.getTableAlias(), propertyName, inSelect );\n \t\t\t}\n \n \t\t\tif ( collectionNode instanceof DotNode ) {\n@@ -190,22 +195,6 @@ private void prepareAnyImplicitJoins(DotNode dotNode) throws SemanticException {\n \t\t}\n \t}\n \n-\tprivate void handleElements(FromReferenceNode collectionNode, String propertyName) {\n-\t\tFromElement collectionFromElement = collectionNode.getFromElement();\n-\t\tQueryableCollection queryableCollection = collectionFromElement.getQueryableCollection();\n-\n-\t\tString path = collectionNode.getPath() + \"[].\" + propertyName;\n-\t\tLOG.debugf( \"Creating elements for %s\", path );\n-\n-\t\tfromElement = collectionFromElement;\n-\t\tif ( !collectionFromElement.isCollectionOfValuesOrComponents() ) {\n-\t\t\tgetWalker().addQuerySpaces( queryableCollection.getElementPersister().getQuerySpaces() );\n-\t\t}\n-\n-\t\tsetDataType( queryableCollection.getElementType() );\n-\t\tselectColumns = collectionFromElement.toColumns( fromElement.getTableAlias(), propertyName, inSelect );\n-\t}\n-\n \t@Override\n \tpublic void setScalarColumnText(int i) throws SemanticException {\n \t\tif ( selectColumns == null ) {    // Dialect function"
  },
  {
    "sha": "ddeae05664eeb4031171a28384f41b7645fd407f",
    "filename": "hibernate-core/src/test/java/org/hibernate/test/hql/IndicesTest.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/hibernate/hibernate-orm/blob/3144cf75443264e0c26ae81768b7a6b1f72a0562/hibernate-core/src/test/java/org/hibernate/test/hql/IndicesTest.java",
    "raw_url": "https://github.com/hibernate/hibernate-orm/raw/3144cf75443264e0c26ae81768b7a6b1f72a0562/hibernate-core/src/test/java/org/hibernate/test/hql/IndicesTest.java",
    "contents_url": "https://api.github.com/repos/hibernate/hibernate-orm/contents/hibernate-core/src/test/java/org/hibernate/test/hql/IndicesTest.java?ref=3144cf75443264e0c26ae81768b7a6b1f72a0562",
    "patch": "@@ -0,0 +1,111 @@\n+package org.hibernate.test.hql;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.MapKeyJoinColumn;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import static org.hamcrest.core.Is.is;\n+import org.hibernate.testing.TestForIssue;\n+import org.hibernate.testing.junit4.BaseNonConfigCoreFunctionalTestCase;\n+import static org.hibernate.testing.transaction.TransactionUtil.doInHibernate;\n+import org.junit.Before;\n+import org.junit.Test;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * @author Burkhard Graves\n+ */\n+@TestForIssue(jiraKey = \"HHH-14475\")\n+public class IndicesTest extends BaseNonConfigCoreFunctionalTestCase {\n+    \n+    @Override\n+    protected Class[] getAnnotatedClasses() {\n+        return new Class[] {Project.class, Role.class, Person.class};\n+    }\n+    \n+    @Before\n+    public void setUp() {\n+        doInHibernate( this::sessionFactory, session -> {\n+\n+            Project project = new Project(1);\n+            Role role = new Role(1);\n+            \n+            session.save( project );\n+            session.save( role );\n+\n+            Person person = new Person(1, project, role);\n+            \n+            session.save( person );\n+        });\n+    }\n+    \n+    @Test\n+    public void testSelectIndices() {\n+        doInHibernate( this::sessionFactory, session -> {\n+            \n+            List<Object> result = session.createQuery(\n+                    \"select indices(p.roles) from Person p\"\n+            ).list();\n+\n+            assertThat( result.size(), is( 1 ) );\n+        });\n+    }\n+\n+    @Entity(name = \"Person\")\n+    public static class Person {\n+\n+        @Id\n+        private Integer id;\n+\n+        @OneToMany\n+        @JoinTable(name = \"person_to_role\",\n+                joinColumns = @JoinColumn(name = \"person_id\"),\n+                inverseJoinColumns = @JoinColumn(name = \"role_id\")\n+        )\n+        @MapKeyJoinColumn(name = \"project_id\")\n+        private Map<Project, Role> roles;\n+\n+        public Person() {\n+        }\n+        \n+        public Person(Integer id, Project project, Role role) {\n+            this.id = id;\n+            roles = new HashMap<>();\n+            roles.put(project, role);\n+        }\n+    }\n+\n+    @Entity(name = \"Project\")\n+    public static class Project {\n+\n+        @Id\n+        private Integer id;\n+\n+        public Project() {\n+        }\n+        \n+        public Project(Integer id) {\n+            this.id = id;\n+        }\n+    }\n+\n+    @Entity(name = \"Role\")\n+    public static class Role {\n+\n+        @Id\n+        private Integer id;\n+\n+        public Role() {\n+        }\n+        \n+        public Role(Integer id) {\n+            this.id = id;\n+        }\n+    }\n+}"
  }
]
