[
  {
    "sha": "ebef5617eff26c133b53621f6b3e1c2c25a6ff12",
    "filename": "README.md",
    "status": "removed",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/sgul554/java-3.3-task-1-2/blob/c27b30c8ba1c4753df9fe5e865b50c61fd5043c7/README.md",
    "raw_url": "https://github.com/sgul554/java-3.3-task-1-2/raw/c27b30c8ba1c4753df9fe5e865b50c61fd5043c7/README.md",
    "contents_url": "https://api.github.com/repos/sgul554/java-3.3-task-1-2/contents/README.md?ref=c27b30c8ba1c4753df9fe5e865b50c61fd5043c7",
    "patch": "@@ -1,15 +0,0 @@\n-## Счетчик COMPLEXITY\n-1. Математически цикломатическая сложность структурированной программы определяется с помощью ориентированного графа, узлами которого являются блоки программы, соединенные рёбрами, если управление может переходить с одного блока на другой. Тогда сложность определяется как:\n-\n-M = E − N + 2P,\n-где:\n-\n-M = цикломатическая сложность,\n-\n-E = количество рёбер в графе,\n-\n-N = количество узлов в графе,\n-\n-P = количество компонент связности.\n-\n-2. Одно из первоначально предложенных Маккейбом применений состоит в том, что необходимо ограничивать сложность программ во время их разработки. Он рекомендует, чтобы программистов обязывали вычислять сложность разрабатываемых ими модулей и разделять модули на более мелкие всякий раз, когда цикломатическая сложность этих модулей превысит десять.\n\\ No newline at end of file"
  },
  {
    "sha": "87377b89676fcfe8555406472f8379a53c2fe328",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/sgul554/java-3.3-task-1-2/blob/81e75513618ebf48f35399aa211f513a7dc6d243/pom.xml",
    "raw_url": "https://github.com/sgul554/java-3.3-task-1-2/raw/81e75513618ebf48f35399aa211f513a7dc6d243/pom.xml",
    "contents_url": "https://api.github.com/repos/sgul554/java-3.3-task-1-2/contents/pom.xml?ref=81e75513618ebf48f35399aa211f513a7dc6d243",
    "patch": "@@ -21,6 +21,12 @@\n             <version>5.4.2</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <version>1.18.16</version>\n+            <scope>provided</scope>\n+        </dependency>\n     </dependencies>\n \n     <build>\n@@ -52,13 +58,6 @@\n                             <goal>report</goal>\n                         </goals>\n                     </execution>\n-                    <execution>\n-                        <id>jacoco-check</id>\n-                        <goals>\n-                            <goal>check</goal>\n-                        </goals>\n-\n-                    </execution>\n                 </executions>\n             </plugin>\n         </plugins>"
  },
  {
    "sha": "de4526c9ac18573841b060c08977597c0c75ccf9",
    "filename": "src/main/java/ru/netology/domain/Lombok.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/sgul554/java-3.3-task-1-2/blob/81e75513618ebf48f35399aa211f513a7dc6d243/src/main/java/ru/netology/domain/Lombok.java",
    "raw_url": "https://github.com/sgul554/java-3.3-task-1-2/raw/81e75513618ebf48f35399aa211f513a7dc6d243/src/main/java/ru/netology/domain/Lombok.java",
    "contents_url": "https://api.github.com/repos/sgul554/java-3.3-task-1-2/contents/src/main/java/ru/netology/domain/Lombok.java?ref=81e75513618ebf48f35399aa211f513a7dc6d243",
    "patch": "@@ -0,0 +1,18 @@\n+package ru.netology.domain;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Data\n+\n+public class Lombok {\n+    private int currentStation;\n+    int minStation = 0;\n+    int maxStation = 10;\n+    int maxVolume = 100;\n+    int minVolume = 0;\n+    private int currentVolume;\n+}"
  },
  {
    "sha": "cc49abf5e127eb0061328c671ccc1bc8206eb665",
    "filename": "src/main/java/ru/netology/domain/Radio.java",
    "status": "modified",
    "additions": 35,
    "deletions": 25,
    "changes": 60,
    "blob_url": "https://github.com/sgul554/java-3.3-task-1-2/blob/81e75513618ebf48f35399aa211f513a7dc6d243/src/main/java/ru/netology/domain/Radio.java",
    "raw_url": "https://github.com/sgul554/java-3.3-task-1-2/raw/81e75513618ebf48f35399aa211f513a7dc6d243/src/main/java/ru/netology/domain/Radio.java",
    "contents_url": "https://api.github.com/repos/sgul554/java-3.3-task-1-2/contents/src/main/java/ru/netology/domain/Radio.java?ref=81e75513618ebf48f35399aa211f513a7dc6d243",
    "patch": "@@ -1,15 +1,28 @@\n package ru.netology.domain;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Data\n+\n public class Radio {\n-    private int currentStation = 5;\n+    private int currentStation;\n     int minStation = 0;\n-    int maxStation = 9;\n-    int maxVolume = 10;\n+    int maxStation = 10;\n+    int maxVolume = 100;\n     int minVolume = 0;\n-    private int currentVolume = 7;\n+    private int currentVolume;\n+\n+//    public Radio(int currentStation, int currentVolume) {\n+//        this.currentStation = currentStation;\n+//        this.currentVolume = currentVolume;\n+//    }\n \n     public int countControlStat(int controlStat) {\n-        if (controlStat <= 9 && controlStat >= 0) {\n+        if (controlStat <= maxStation && controlStat >= minStation) {\n             currentStation = controlStat;\n         }\n         return currentStation;\n@@ -32,34 +45,31 @@ public void countCurrentStatPrev() {\n     }\n \n     public void countCurrentVolPlus() {\n-        if (currentVolume == maxVolume) {\n-            return;\n+        if (currentVolume >= maxVolume) {\n+            currentVolume = maxVolume;\n         } else {\n             currentVolume += 1;\n         }\n     }\n \n     public void countCurrentVolMinus() {\n-        if (currentVolume == minVolume) {\n-            return;\n+        if (currentVolume <= minVolume) {\n+            currentVolume = minVolume;\n         } else {\n             currentVolume -= 1;\n         }\n     }\n \n-    public int getCurrentStation() {\n-        return currentStation;\n-    }\n-\n-    public void setCurrentStation(int currentStation) {\n-        this.currentStation = currentStation;\n-    }\n-\n-    public int getCurrentVolume() {\n-        return currentVolume;\n-    }\n-\n-    public void setCurrentVolume(int currentVolume) {\n-        this.currentVolume = currentVolume;\n-    }\n-}\n+//    public int getCurrentStation() {\n+//        return currentStation;\n+//    }\n+//\n+//\n+//    public int getCurrentVolume() {\n+//        return currentVolume;\n+//    }\n+//\n+//    public void setCurrentVolume(int currentVolume) {\n+//        this.currentVolume = currentVolume;\n+//    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9e8c1fc13416e3e3bad5b4d3ddad99fc626444af",
    "filename": "src/test/java/ru/netology/domain/LombokTest.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/sgul554/java-3.3-task-1-2/blob/81e75513618ebf48f35399aa211f513a7dc6d243/src/test/java/ru/netology/domain/LombokTest.java",
    "raw_url": "https://github.com/sgul554/java-3.3-task-1-2/raw/81e75513618ebf48f35399aa211f513a7dc6d243/src/test/java/ru/netology/domain/LombokTest.java",
    "contents_url": "https://api.github.com/repos/sgul554/java-3.3-task-1-2/contents/src/test/java/ru/netology/domain/LombokTest.java?ref=81e75513618ebf48f35399aa211f513a7dc6d243",
    "patch": "@@ -0,0 +1,14 @@\n+package ru.netology.domain;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class LombokTest {\n+    @Test\n+    public void shouldCreate() {\n+        Lombok lombok = new Lombok(0,0,0,0,0,0);\n+    }\n+\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "cc217518d0efceebf3f23f652ce547a7803dce9b",
    "filename": "src/test/java/ru/netology/domain/RadioTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 21,
    "changes": 37,
    "blob_url": "https://github.com/sgul554/java-3.3-task-1-2/blob/81e75513618ebf48f35399aa211f513a7dc6d243/src/test/java/ru/netology/domain/RadioTest.java",
    "raw_url": "https://github.com/sgul554/java-3.3-task-1-2/raw/81e75513618ebf48f35399aa211f513a7dc6d243/src/test/java/ru/netology/domain/RadioTest.java",
    "contents_url": "https://api.github.com/repos/sgul554/java-3.3-task-1-2/contents/src/test/java/ru/netology/domain/RadioTest.java?ref=81e75513618ebf48f35399aa211f513a7dc6d243",
    "patch": "@@ -8,25 +8,25 @@\n \n     @Test\n     public void shouldControlStationInLimit() {\n-        Radio radio = new Radio();\n+        Radio radio = new Radio(5,0,10,100,0,5);\n         assertEquals(5, radio.countControlStat(5));\n     }\n \n     @Test\n     public void shouldControlStationUnderLimit() {\n         Radio radio = new Radio();\n-        assertEquals(5, radio.countControlStat(98));\n+        assertEquals(0, radio.countControlStat(11));\n     }\n \n     @Test\n     public void shouldControlStationOnMaxLimit() {\n         Radio radio = new Radio();\n-        assertEquals(9, radio.countControlStat(9));\n+        assertEquals(10, radio.countControlStat(10));\n     }\n \n     @Test\n     public void shouldControlStationAboveLimit() {\n-        Radio radio = new Radio();\n+        Radio radio = new Radio(5,0,10,100,0,5);\n         assertEquals(5, radio.countControlStat(-1));\n     }\n \n@@ -38,63 +38,58 @@ public void shouldControlStationOnMinLimit() {\n \n     @Test\n     public void shouldCurrentStationNext() {\n-        Radio radio = new Radio();\n-        radio.setCurrentStation(5);\n+        Radio radio = new Radio(5,0,10,100,0,5);\n         radio.countCurrentStatNext();\n         assertEquals(6, radio.getCurrentStation());\n     }\n \n     @Test\n     public void shouldCurrentStationOnMaxNext() {\n-        Radio radio = new Radio();\n-        radio.setCurrentStation(9);\n+        Radio radio = new Radio(10,0,10,100,0,5);\n         radio.countCurrentStatNext();\n         assertEquals(0, radio.getCurrentStation());\n     }\n \n     @Test\n     public void shouldCurrentStationPrev() {\n-        Radio radio = new Radio();\n-        radio.setCurrentStation(4);\n+        Radio radio = new Radio(9,0,10,100,0,5);\n         radio.countCurrentStatPrev();\n-        assertEquals(3, radio.getCurrentStation());\n+        assertEquals(8, radio.getCurrentStation());\n     }\n \n     @Test\n     public void shouldCurrentStationOnMinPrev() {\n-        Radio radio = new Radio();\n-        radio.setCurrentStation(0);\n+        Radio radio = new Radio(0,0,10,100,0,5);\n         radio.countCurrentStatPrev();\n-        assertEquals(9, radio.getCurrentStation());\n+        assertEquals(10, radio.getCurrentStation());\n     }\n \n     @Test\n     public void shouldCurrentVolumeButtonPlusOnMax() {\n         Radio radio = new Radio();\n-        radio.setCurrentVolume(10);\n+        radio.setCurrentVolume(101);\n         radio.countCurrentVolPlus();\n-        assertEquals(10, radio.getCurrentVolume());\n+        assertEquals(100, radio.getCurrentVolume());\n     }\n \n     @Test\n     public void shouldCurrentVolumeButtonPlus() {\n-        Radio radio = new Radio();\n+        Radio radio = new Radio(5,0,10,100,0,5);\n         radio.countCurrentVolPlus();\n-        assertEquals(8, radio.getCurrentVolume());\n+        assertEquals(6, radio.getCurrentVolume());\n     }\n \n     @Test\n     public void shouldCurrentVolumeButtonMinus() {\n-        Radio radio = new Radio();\n-        radio.setCurrentVolume(5);\n+        Radio radio = new Radio(5,0,10,100,0,5);\n         radio.countCurrentVolMinus();\n         assertEquals(4, radio.getCurrentVolume());\n     }\n \n     @Test\n     public void shouldCurrentVolumeButtonPlusOnMin() {\n         Radio radio = new Radio();\n-        radio.setCurrentVolume(0);\n+        radio.setCurrentVolume(-1);\n         radio.countCurrentVolMinus();\n         assertEquals(0, radio.getCurrentVolume());\n     }"
  }
]
