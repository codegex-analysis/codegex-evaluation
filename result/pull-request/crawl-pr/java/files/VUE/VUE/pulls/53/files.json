[
  {
    "sha": "ff560e0b5a60ca6792954a56987491ad86b880f6",
    "filename": "VUE2/src/tufts/vue/VUE.java",
    "status": "modified",
    "additions": 1,
    "deletions": 155,
    "changes": 156,
    "blob_url": "https://github.com/VUE/VUE/blob/6903e7222e5185d9117937b336d6b97c4aa585d2/VUE2/src/tufts/vue/VUE.java",
    "raw_url": "https://github.com/VUE/VUE/raw/6903e7222e5185d9117937b336d6b97c4aa585d2/VUE2/src/tufts/vue/VUE.java",
    "contents_url": "https://api.github.com/repos/VUE/VUE/contents/VUE2/src/tufts/vue/VUE.java?ref=6903e7222e5185d9117937b336d6b97c4aa585d2",
    "patch": "@@ -1151,24 +1151,6 @@ public static void main(String[] args)\n         //-------------------------------------------------------\n \n         Thread.currentThread().setPriority(Thread.MIN_PRIORITY);\n-        \n-        if (!SKIP_SPLASH) {\n-            // start in another thread as may pop dialog\n-            // that will block further progress on the\n-            // run-out of main\n-            final Thread versionThread = new Thread(\"version-check\") {\n-                    public void run() {\n-                        if (DEBUG.THREAD) Log.debug(\"version-check kicked off\");\n-                        checkLatestVersion();\n-                    }\n-                };\n-            versionThread.setPriority(Thread.MIN_PRIORITY);\n-            versionThread.setDaemon(true);\n-            // delay kickoff until after any already outstanding AWT invocations (e.g., map open's, data source loads)\n-            GUI.invokeAfterAWT(new Runnable() { public void run() {            \n-                versionThread.start();\n-            }});\n-        }\n \n //         try {\n //             // any immediate user UI requests (mouse-click) for a tufts.vue.DataSource\n@@ -3821,143 +3803,7 @@ private static Frame makeRootFrame() {\n     }\n     */\n \n-    /* This mehtod checks if later version of VUE is available. In case later version\n-     * is available it prompts user to download it.\n-     */\n-    \n-   public static void checkLatestVersion() {\n-       Log.info(\"Checking for latest version of VUE\");\n-        try {\n-            URL url = new URL(VueResources.getString(\"vue.release.url\"));\n-            XPathFactory  factory=XPathFactory.newInstance();\n-            XPath xPath=factory.newXPath();\n-            if (DEBUG.Enabled) Log.debug(\"opening \" + url);\n-            InputSource inputSource =  new InputSource(url.openStream());\n-            XPathExpression  xSession= xPath.compile(\"/current_release/version/text()\");\n-            String version = xSession.evaluate(inputSource);\n-            if (DEBUG.Enabled) Log.debug(\"got current version id [\" + version + \"]\");\n-            final String currentVersion = VueResources.getString(\"vue.version\").trim();\n-            final String newVersion = version.trim();\n-            if (!isHigherVersion(currentVersion, newVersion))\n-            {\n-            \t//final ShowAgainDialog sad = new ShowAgainDialog(VUE.getApplicationFrame(),\"checkForNewVersion2\",\"New Release Available\",\"Remind me later\",(String)null);\n-            \tfinal ShowAgainDialog sad = new ShowAgainDialog(VUE.getApplicationFrame(),\"checkForNewVersion2\",\"New Release Available\",\"Get latest version\",\"Close Window\");\n-            \tJPanel panel = new JPanel(new GridLayout(1,1));\n-            \t/*JLabel vLabel = new  JLabel(\"<html>A newer version of VUE is available (\"\n-                                            + newVersion\n-                                            + \") &nbsp; <font color=\\\"#20316A\\\"><u>Get the latest version</u></font></html\", JLabel.LEFT);*/\n-            \tJLabel vLabel = new  JLabel(\"<html>\"+VueResources.getString(\"jlabel.newversion\") +\" (\"\n-                        + newVersion\n-                        + \") &nbsp; <font color=\\\"#20316A\\\"></html\", JLabel.LEFT);\n-            \tif(Util.isMacPlatform()){\n-            \t\tpanel.setPreferredSize(new Dimension(425,25));\n-            \t\tpanel.setSize(new Dimension(425,25));\n-            \t\tpanel.setMinimumSize(new Dimension(425,25));\n-            \t}else{\n-            \t\tpanel.setPreferredSize(new Dimension(425,25));\n-            \t}\n-            \t//vLabel.setBorder(BorderFactory.createLineBorder(Color.red, 1));\n-            \t//panel.setBorder(BorderFactory.createLineBorder(Color.green, 1));\n-        \t    panel.add(vLabel, FlowLayout.LEFT);\n-        \t    sad.setContentPanel(panel);\n-                \n-                vLabel.addMouseListener(new javax.swing.event.MouseInputAdapter() {\n-                    public void mouseClicked(MouseEvent evt) {\n-                        try {\n-                            VueUtil.openURL(VueResources.getString(\"vue.download.url\"));\n-                            sad.setVisible(false);\n-                            sad.dispose();\n-                        }catch (Throwable t) { t.printStackTrace();}\n-                    }\n-                    \n-                    \n-                });\n-                                                                                                      \n-                \n-                VueUtil.centerOnScreen(sad);\n-                if (sad.showAgain())\n-                {\n-                \tsad.setVisible(true);\n-                \t\n-                \n-                \tsad.setVisible(false);\n-                    sad.dispose();\n-                \n-                }\n-    \n-                \n-              }\n-        }catch(Throwable t) {\n-            Log.error(\"Error Checking latest VUE release:\", t);\n-        }\n-   }\n-   // check if v1 > v2\n-   private static boolean isHigherVersion(String v1,String v2) {\n-     \n-\t   HashMap<String,Integer> priorityMap = new HashMap<String,Integer>();\n-\t   priorityMap.put(\"alpha\", 0);\n-\t   priorityMap.put(\"beta\", 1);\n-\t   priorityMap.put(\"preview\",2); \n-\t   priorityMap.put(\"gold\", 3);\n-\t   // if current version is same as latest version\n-\t\t  \n-       if(v1.equalsIgnoreCase(v2)) {\n-           return true;\n-       }\n-       String[] v1Parts = v1.split(\"\\\\D+\");\n-       String[] v2Parts = v2.split(\"\\\\D+\");\n-      //check the first number in version\n-       if(v1Parts.length>0 && v2Parts.length > 0) {\n-    \t   if(Integer.parseInt(v1Parts[0])> Integer.parseInt(v2Parts[0])) return true;\n-    \t   else if(Integer.parseInt(v1Parts[0])< Integer.parseInt(v2Parts[0])) return false;\n-    \t   else {\n-    \t\t   System.out.println(\"0\\t\"+v1Parts[0]+\"\\t\"+v2Parts[0]+\"\\t\"+v1Parts.length+\"\\t\"+v2Parts.length);\n-    \t\t   if(v1Parts.length>1 && v2Parts.length > 1) {\n-    \t    \t   if(Integer.parseInt(v1Parts[1])> Integer.parseInt(v2Parts[1]))  return true;\n-    \t    \t   else if(Integer.parseInt(v1Parts[1])<  Integer.parseInt(v2Parts[1]))  return false;\n-    \t    \t   else {\n-    \t    \t\t   System.out.println(\"1\\t\"+v1Parts[1]+\"\\t\"+v2Parts[1]);\n-    \t    \t\t   String p1 = getPriority(v1, priorityMap);\n-    \t    \t\t   String p2 = getPriority(v2,priorityMap);\n-    \t    \t\t   if(priorityMap.get(p1)> priorityMap.get(p2))  return true;\n-    \t    \t\t   else if(priorityMap.get(p1)<  priorityMap.get(p2))  return false;\n-    \t    \t\t   else {\n-    \t    \t\t\t   System.out.println(\"P\\t\"+p1+\"\\t\"+p2);\n-    \t    \t\t\t   if(v1Parts.length>2 ) {\n-    \t    \t\t\t\t   if(v2Parts.length == 2)   return true;\n-    \t    \t\t\t\t   else {\n-    \t    \t\t\t\t\t   System.out.println(\"2\\t\"+v1Parts[2]+\"\\t\"+v2Parts[2]);\n-    \t    \t\t\t\t\t   if(Integer.parseInt(v1Parts[2])> Integer.parseInt(v2Parts[2])) return true;\n-    \t    \t\t\t\t\t   else if(Integer.parseInt(v1Parts[2])< Integer.parseInt(v2Parts[2])) return false;\n-    \t    \t\t\t\t\t   else {\n-    \t    \t\t\t\t\t\t   if(v1Parts.length>3 ) {\n-    \t    \t\t\t\t\t\t\t   if(v2Parts.length == 3) return true;\n-    \t    \t\t\t\t\t\t\t   else {\n-    \t    \t\t\t\t\t\t\t\t   System.out.println(\"1\\t\"+v1Parts[3]+\"\\t\"+v2Parts[3]);\n-    \t    \t\t\t\t\t\t\t\t   if(Integer.parseInt(v1Parts[3])>= Integer.parseInt(v2Parts[3]))  return true; \t    \t\t\t\t\t\t\t\t    \n-    \t    \t\t\t\t\t\t\t   }\n-    \t    \t\t\t\t\t\t   }\n-    \t    \t\t\t\t\t   }\n-    \t    \t\t\t\t   } \n-    \t    \t\t\t   }\n-    \t    \t\t   }\n-    \t    \t   }\n-    \t\t   }\n-    \t   }\n-       }\n-       \n-       return false;\n-   }\n-   private static String getPriority(String version,HashMap<String, Integer> priorityMap) {\n-\t   String priority = \"gold\";\n-\t   for(String key: priorityMap.keySet()) {\n-\t\t   if(version.toLowerCase().contains(key)) {\n-\t\t\t   return key;\n-\t\t   }\n-\t   }\n-\t   return priority;\n-   }\n-   \n+\n     public static String getName() {\n         if (NAME == null)\n             NAME = VueResources.getString(\"application.name\");"
  }
]
