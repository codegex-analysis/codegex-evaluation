[
  {
    "sha": "61345c0a6d1ad625169ea6c63e26814c6f654f16",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/build.gradle",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/build.gradle",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/build.gradle?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -17,6 +17,10 @@ repositories {\n \tmaven {url \"https://raw.github.com/SpinyOwl/repo/releases\"}\n }\n \n+minecraft {\n+\taccessWidener =  file(\"src/main/resources/breakoutapi.accesswidener\")\n+}\n+\n dependencies {\n \tminecraft \"com.mojang:minecraft:${project.minecraft_version}\"\n \tmappings \"net.fabricmc:yarn:${project.yarn_mappings}:v2\""
  },
  {
    "sha": "226eb667d554a50d0c497da8a43535212b509494",
    "filename": "gradle.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/gradle.properties",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/gradle.properties",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/gradle.properties?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -3,17 +3,17 @@ org.gradle.jvmargs=-Xmx4G\n \n # Fabric Properties\n # check these on https://modmuss50.me/fabric.html\n-minecraft_version=21w10a\n-yarn_mappings=21w10a+build.2\n-loader_version=0.11.2\n+minecraft_version=21w11a\n+yarn_mappings=21w11a+build.4\n+loader_version=0.11.3\n \n # Mod Properties\n mod_version=1.0.5\n maven_group=com.raphydaphy\n archives_base_name=breakoutapi\n \n # Dependencies\n-fabric_version=0.32.1+1.17\n+fabric_version=0.32.4+1.17\n joml_version=1.9.25\n cbchain_version=1.0.0\n lwjgl_version=3.2.2"
  },
  {
    "sha": "5fdcb69e347c9557e4f75485497551a509c36028",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/breakout/AbstractBreakout.java",
    "status": "modified",
    "additions": 15,
    "deletions": 8,
    "changes": 23,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/AbstractBreakout.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/AbstractBreakout.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/breakout/AbstractBreakout.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -1,9 +1,6 @@\n package com.raphydaphy.breakoutapi.breakout;\n \n-import com.mojang.blaze3d.platform.GlStateManager;\n import com.mojang.blaze3d.systems.RenderSystem;\n-import com.raphydaphy.breakoutapi.BreakoutAPI;\n-import com.raphydaphy.breakoutapi.BreakoutAPIClient;\n import com.raphydaphy.breakoutapi.breakout.window.BreakoutWindow;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.gl.Framebuffer;\n@@ -18,19 +15,24 @@\n   protected BreakoutWindow window;\n   protected Framebuffer framebuffer;\n   protected MinecraftClient client;\n+  protected SavedGlState glState;\n \n   public AbstractBreakout(Identifier identifier, BreakoutWindow window) {\n     this.identifier = identifier;\n     this.window = window;\n     this.client = MinecraftClient.getInstance();\n+    this.glState = new SavedGlState();\n+    try (BreakoutWindow.ContextHolder ctx = window.switchToContext()) {\n+      this.glState.glRecord();\n \n-    this.framebuffer = new Framebuffer(this.window.getFramebufferWidth(), this.window.getFramebufferHeight(), true, MinecraftClient.IS_SYSTEM_MAC);\n-    this.framebuffer.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);\n+      this.framebuffer = new Framebuffer(this.window.getFramebufferWidth(), this.window.getFramebufferHeight(), true, MinecraftClient.IS_SYSTEM_MAC);\n+      this.framebuffer.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);\n \n-    RenderSystem.setupDefaultState(0, 0, this.window.getFramebufferWidth(), this.window.getFramebufferHeight());\n+      RenderSystem.setupDefaultState(0, 0, this.window.getFramebufferWidth(), this.window.getFramebufferHeight());\n \n-    this.onResolutionChanged(this.window.getFramebufferWidth(), this.window.getFramebufferHeight());\n-    this.window.keeper.getChainResolutionChangedCallback().add(this::onResolutionChanged);\n+      this.onResolutionChanged(this.window.getFramebufferWidth(), this.window.getFramebufferHeight());\n+      this.window.keeper.getChainResolutionChangedCallback().add(this::onResolutionChanged);\n+    }\n   }\n \n   public abstract void render(MatrixStack matrixStack);\n@@ -39,7 +41,10 @@ protected void postRender() {}\n   public void setupRender() {\n     if (this.window.shouldClose()) return;\n \n+    RenderContextTracker.pushContext(this);\n+\n     GLFW.glfwMakeContextCurrent(this.window.getHandle());\n+    glState.apply();\n \n     MatrixStack matrixStack = RenderSystem.getModelViewStack();\n     matrixStack.push();\n@@ -64,6 +69,8 @@ public void setupRender() {\n \n     this.postRender();\n \n+    glState.record();\n+    RenderContextTracker.popContext();\n   }\n \n "
  },
  {
    "sha": "66e3c25cfc50dcbab611673d5049847ee01388e5",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/breakout/Breakout.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/Breakout.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/Breakout.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/breakout/Breakout.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -29,7 +29,7 @@ public void render(MatrixStack matrixStack) {\n     Matrix4f matrix4f = Matrix4f.method_34239(0.0F, (float)((double)window.getFramebufferWidth()), 0.0F, (float)((double)window.getFramebufferHeight()), 1000.0F, 3000.0F);\n     RenderSystem.setProjectionMatrix(matrix4f);\n \n-    matrixStack.method_34426();\n+    matrixStack.loadIdentity();\n     matrixStack.translate(0.0D, 0.0D, -2000.0D);\n     RenderSystem.applyModelViewMatrix();\n     DiffuseLighting.enableGuiDepthLighting();"
  },
  {
    "sha": "aa53a770e804f77f5c55cf836d816ea3397b7186",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/breakout/GUIBreakout.java",
    "status": "modified",
    "additions": 15,
    "deletions": 8,
    "changes": 23,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/GUIBreakout.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/GUIBreakout.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/breakout/GUIBreakout.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -1,6 +1,7 @@\n package com.raphydaphy.breakoutapi.breakout;\n \n import com.raphydaphy.breakoutapi.breakout.window.BreakoutWindow;\n+import com.raphydaphy.breakoutapi.mixin.client.BufferRendererAccessor;\n import net.minecraft.client.util.math.MatrixStack;\n import net.minecraft.util.Identifier;\n import org.liquidengine.legui.animation.AnimatorProvider;\n@@ -22,18 +23,20 @@\n   public GUIBreakout(Identifier identifier, BreakoutWindow window) {\n     super(identifier, window);\n \n-    this.frame = new Frame(this.window.getWidth(), this.window.getHeight());\n+    try (BreakoutWindow.ContextHolder ctx = window.switchToContext()) {\n+      this.frame = new Frame(this.window.getWidth(), this.window.getHeight());\n \n-    this.context = new Context(this.getWindow().getHandle());\n+      this.context = new Context(this.getWindow().getHandle());\n \n-    this.systemEventProcessor = new SystemEventProcessorImpl();\n-    SystemEventProcessor.addDefaultCallbacks(this.window.keeper, this.systemEventProcessor);\n+      this.systemEventProcessor = new SystemEventProcessorImpl();\n+      SystemEventProcessor.addDefaultCallbacks(this.window.keeper, this.systemEventProcessor);\n \n-    this.renderer = new NvgRenderer();\n-    renderer.initialize();\n+      this.renderer = new NvgRenderer();\n+      renderer.initialize();\n \n-    this.window.keeper.getChainWindowSizeCallback().add(this::onWindowSizeChanged);\n-    this.createGuiElements(this.window.getWidth(), this.window.getHeight());\n+      this.window.keeper.getChainWindowSizeCallback().add(this::onWindowSizeChanged);\n+      this.createGuiElements(this.window.getWidth(), this.window.getHeight());\n+    }\n   }\n \n   protected abstract void createGuiElements(int width, int height);\n@@ -59,6 +62,10 @@ public void render(MatrixStack matrixStack) {\n     this.context.updateGlfwWindow();\n     LayoutManager.getInstance().layout(this.frame);\n     this.renderer.render(this.getFrame(), this.getContext());\n+\n+    BufferRendererAccessor.setCurrentElementBufferObject(-1);\n+    BufferRendererAccessor.setCurrentVertexArrayObject(-1);\n+    BufferRendererAccessor.setCurrentVertexBufferObject(-1);\n   }\n \n   @Override"
  },
  {
    "sha": "c3f704358ab8d825e50c28c5b9b1a8a30ac45153",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/breakout/RenderContextTracker.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/RenderContextTracker.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/RenderContextTracker.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/breakout/RenderContextTracker.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -0,0 +1,20 @@\n+package com.raphydaphy.breakoutapi.breakout;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+public class RenderContextTracker {\n+  private static final ThreadLocal<Deque<AbstractBreakout>> CONTEXT = ThreadLocal.withInitial(ArrayDeque::new);\n+\n+  public static AbstractBreakout getCurrentContext() {\n+    return CONTEXT.get().peek();\n+  }\n+\n+  public static void popContext() {\n+    CONTEXT.get().pop();\n+  }\n+\n+  public static void pushContext(AbstractBreakout breakout) {\n+    CONTEXT.get().push(breakout);\n+  }\n+}"
  },
  {
    "sha": "67d46c95381e90aa3702c5a47a66576aec56fd1a",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/breakout/SavedGlState.java",
    "status": "added",
    "additions": 228,
    "deletions": 0,
    "changes": 228,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/SavedGlState.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/SavedGlState.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/breakout/SavedGlState.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -0,0 +1,228 @@\n+package com.raphydaphy.breakoutapi.breakout;\n+\n+import com.mojang.blaze3d.platform.GlStateManager;\n+import com.raphydaphy.breakoutapi.mixin.client.BufferRendererAccessor;\n+import com.raphydaphy.breakoutapi.mixin.client.CapabilityTrackerAccessor;\n+import com.raphydaphy.breakoutapi.mixin.client.GlStateManagerAccessor;\n+import org.lwjgl.opengl.GL30;\n+import org.lwjgl.system.MemoryUtil;\n+\n+import java.nio.ByteBuffer;\n+\n+public class SavedGlState {\n+  private boolean blendEnabled;\n+  private int blendSrcFactorRGB;\n+  private int blendDstFactorRGB;\n+  private int blendSrcFactorAlpha;\n+  private int blendDstFactorAlpha;\n+\n+  private int depthFunc;\n+  private boolean depthMask;\n+  private boolean depthTestEnabled;\n+\n+  private boolean cullEnabled;\n+  private int cullMode;\n+\n+  private boolean polyOffsetFill;\n+  private boolean polyOffsetLine;\n+  private float polyOffsetFactor;\n+  private float polyOffsetUnits;\n+\n+  private boolean colorLogicEnabled;\n+  private int colorLogicOp;\n+\n+  private int stencilSubFunc;\n+  private int stencilSubRef;\n+  private int stencilSubMask;\n+  private int stencilMask;\n+  private int stencilSfail;\n+  private int stencilDpfail;\n+  private int stencilDppass;\n+\n+  private boolean scissorTestEnabled;\n+\n+  private int activeTexture;\n+  private final boolean[] texturesEnabled = new boolean[12];\n+  private final int[] texturesBound = new int[12];\n+\n+  private boolean colorMaskRed;\n+  private boolean colorMaskGreen;\n+  private boolean colorMaskBlue;\n+  private boolean colorMaskAlpha;\n+\n+  private int currentVertexArrayObject;\n+  private int currentVertexBufferObject;\n+  private int currentElementBufferObject;\n+\n+  public void glRecord() {\n+    blendEnabled = GL30.glIsEnabled(GL30.GL_BLEND);\n+    blendSrcFactorRGB = GL30.glGetInteger(GL30.GL_BLEND_SRC_RGB);\n+    blendDstFactorRGB = GL30.glGetInteger(GL30.GL_BLEND_DST_RGB);\n+    blendSrcFactorAlpha = GL30.glGetInteger(GL30.GL_BLEND_SRC_ALPHA);\n+    blendDstFactorAlpha = GL30.glGetInteger(GL30.GL_BLEND_DST_ALPHA);\n+\n+    depthFunc = GL30.glGetInteger(GL30.GL_DEPTH_FUNC);\n+    depthMask = GL30.glGetBoolean(GL30.GL_DEPTH_WRITEMASK);\n+    depthTestEnabled = GL30.glIsEnabled(GL30.GL_DEPTH_TEST);\n+\n+    cullEnabled = GL30.glIsEnabled(GL30.GL_CULL_FACE);\n+    cullMode = GL30.glGetInteger(GL30.GL_CULL_FACE_MODE);\n+\n+    polyOffsetFill = GL30.glIsEnabled(GL30.GL_POLYGON_OFFSET_FILL);\n+    polyOffsetLine = GL30.glIsEnabled(GL30.GL_POLYGON_OFFSET_LINE);\n+    polyOffsetFactor = GL30.glGetFloat(GL30.GL_POLYGON_OFFSET_FACTOR);\n+    polyOffsetUnits = GL30.glGetFloat(GL30.GL_POLYGON_OFFSET_UNITS);\n+\n+    colorLogicEnabled = GL30.glIsEnabled(GL30.GL_COLOR_LOGIC_OP);\n+    colorLogicOp = GL30.glGetInteger(GL30.GL_LOGIC_OP_MODE);\n+\n+    stencilSubFunc = GL30.glGetInteger(GL30.GL_STENCIL_FUNC);\n+    stencilSubRef = GL30.glGetInteger(GL30.GL_STENCIL_REF);\n+    stencilSubMask = GL30.glGetInteger(GL30.GL_STENCIL_VALUE_MASK);\n+    stencilMask = GL30.glGetInteger(GL30.GL_STENCIL_WRITEMASK);\n+    stencilSfail = GL30.glGetInteger(GL30.GL_STENCIL_FAIL);\n+    stencilDpfail = GL30.glGetInteger(GL30.GL_STENCIL_PASS_DEPTH_FAIL);\n+    stencilDppass = GL30.glGetInteger(GL30.GL_STENCIL_PASS_DEPTH_PASS);\n+\n+    scissorTestEnabled = GL30.glIsEnabled(GL30.GL_SCISSOR_TEST);\n+\n+    activeTexture = GL30.glGetInteger(GL30.GL_ACTIVE_TEXTURE) - GL30.GL_TEXTURE0;\n+\n+//    GlStateManager.Texture2DState[] textures = GlStateManagerAccessor.getTextures();\n+//    for (int i = 0; i < 12; i++) {\n+//      texturesBound[i] = textures[i].boundTexture;\n+//      texturesEnabled[i] = textures[i].capState;\n+//    }\n+\n+    ByteBuffer buf = MemoryUtil.memAlloc(4);\n+\n+    GL30.glGetBooleanv(GL30.GL_COLOR_WRITEMASK, buf);\n+\n+    colorMaskRed = buf.get(0) != 0;\n+    colorMaskGreen = buf.get(1) != 0;\n+    colorMaskBlue = buf.get(2) != 0;\n+    colorMaskAlpha = buf.get(3) != 0;\n+\n+    MemoryUtil.memFree(buf);\n+\n+    currentElementBufferObject = GL30.glGetInteger(GL30.GL_ELEMENT_ARRAY_BUFFER_BINDING);\n+    currentVertexArrayObject = GL30.glGetInteger(GL30.GL_VERTEX_ARRAY_BINDING);\n+    currentVertexBufferObject = GL30.glGetInteger(GL30.GL_VERTEX_ARRAY_BUFFER_BINDING);\n+  }\n+\n+  public void record() {\n+    GlStateManager.BlendFuncState blend = GlStateManagerAccessor.getBlend();\n+    blendEnabled = ((CapabilityTrackerAccessor)blend.capState).getState();\n+    blendSrcFactorRGB = blend.srcFactorRGB;\n+    blendDstFactorRGB = blend.dstFactorRGB;\n+    blendSrcFactorAlpha = blend.srcFactorAlpha;\n+    blendDstFactorAlpha = blend.dstFactorAlpha;\n+\n+    GlStateManager.DepthTestState depth = GlStateManagerAccessor.getDepth();\n+    depthFunc = depth.func;\n+    depthMask = depth.mask;\n+    depthTestEnabled = ((CapabilityTrackerAccessor) depth.capState).getState();\n+\n+    GlStateManager.CullFaceState cull = GlStateManagerAccessor.getCull();\n+    cullEnabled = ((CapabilityTrackerAccessor)cull.capState).getState();\n+    cullMode = cull.mode;\n+\n+    GlStateManager.PolygonOffsetState polyOffset = GlStateManagerAccessor.getPolyOffset();\n+    polyOffsetFill = ((CapabilityTrackerAccessor)polyOffset.capFill).getState();\n+    polyOffsetLine = ((CapabilityTrackerAccessor)polyOffset.capLine).getState();\n+    polyOffsetFactor = polyOffset.factor;\n+    polyOffsetUnits = polyOffset.units;\n+\n+    GlStateManager.LogicOpState colorLogic = GlStateManagerAccessor.getColorLogic();\n+    colorLogicEnabled = ((CapabilityTrackerAccessor)colorLogic.capState).getState();\n+    colorLogicOp = colorLogic.op;\n+\n+    GlStateManager.StencilState stencil = GlStateManagerAccessor.getStencil();\n+    stencilSubFunc = stencil.subState.func;\n+    stencilSubRef = stencil.subState.ref;\n+    stencilSubMask = stencil.subState.mask;\n+    stencilMask = stencil.mask;\n+    stencilSfail = stencil.sfail;\n+    stencilDpfail = stencil.dpfail;\n+    stencilDppass = stencil.dppass;\n+\n+    GlStateManager.ScissorTestState scissorTest = GlStateManagerAccessor.getScissorTest();\n+    scissorTestEnabled = ((CapabilityTrackerAccessor)scissorTest.capState).getState();\n+\n+    activeTexture = GlStateManagerAccessor.getActiveTexture();\n+\n+    GlStateManager.Texture2DState[] textures = GlStateManagerAccessor.getTextures();\n+    for (int i = 0; i < 12; i++) {\n+      texturesBound[i] = textures[i].boundTexture;\n+      texturesEnabled[i] = textures[i].capState;\n+    }\n+\n+    GlStateManager.ColorMask colorMask = GlStateManagerAccessor.getColorMask();\n+    colorMaskRed = colorMask.red;\n+    colorMaskGreen = colorMask.green;\n+    colorMaskBlue = colorMask.blue;\n+    colorMaskAlpha = colorMask.alpha;\n+\n+    currentElementBufferObject = BufferRendererAccessor.getCurrentElementBufferObject();\n+    currentVertexArrayObject = BufferRendererAccessor.getCurrentVertexArrayObject();\n+    currentVertexBufferObject = BufferRendererAccessor.getCurrentVertexBufferObject();\n+  }\n+\n+  public void apply() {\n+    GlStateManager.BlendFuncState blend = GlStateManagerAccessor.getBlend();\n+    ((CapabilityTrackerAccessor)blend.capState).setStateInternal(blendEnabled);\n+    blend.srcFactorRGB = blendSrcFactorRGB;\n+    blend.dstFactorRGB = blendDstFactorRGB;\n+    blend.srcFactorAlpha = blendSrcFactorAlpha;\n+    blend.dstFactorAlpha = blendDstFactorAlpha;\n+\n+    GlStateManager.DepthTestState depth = GlStateManagerAccessor.getDepth();\n+    depth.func = depthFunc;\n+    depth.mask = depthMask;\n+    ((CapabilityTrackerAccessor)depth.capState).setStateInternal(depthTestEnabled);\n+\n+    GlStateManager.CullFaceState cull = GlStateManagerAccessor.getCull();\n+    ((CapabilityTrackerAccessor)cull.capState).setStateInternal(cullEnabled);\n+    cull.mode = cullMode;\n+\n+    GlStateManager.PolygonOffsetState polyOffset = GlStateManagerAccessor.getPolyOffset();\n+    ((CapabilityTrackerAccessor)polyOffset.capFill).setStateInternal(polyOffsetFill);\n+    ((CapabilityTrackerAccessor)polyOffset.capLine).setStateInternal(polyOffsetLine);\n+    polyOffset.factor = polyOffsetFactor;\n+    polyOffset.units = polyOffsetUnits;\n+\n+    GlStateManager.LogicOpState colorLogic = GlStateManagerAccessor.getColorLogic();\n+    ((CapabilityTrackerAccessor)colorLogic.capState).setStateInternal(colorLogicEnabled);\n+    colorLogic.op = colorLogicOp;\n+\n+    GlStateManager.StencilState stencil = GlStateManagerAccessor.getStencil();\n+    stencil.subState.func = stencilSubFunc;\n+    stencil.subState.ref = stencilSubRef;\n+    stencil.subState.mask = stencilSubMask;\n+    stencil.mask = stencilMask;\n+    stencil.sfail = stencilSfail;\n+    stencil.dpfail = stencilDpfail;\n+    stencil.dppass = stencilDppass;\n+\n+    GlStateManager.ScissorTestState scissorTest = GlStateManagerAccessor.getScissorTest();\n+    ((CapabilityTrackerAccessor)scissorTest.capState).setStateInternal(scissorTestEnabled);\n+\n+    GlStateManagerAccessor.setActiveTexture(activeTexture);\n+\n+    GlStateManager.Texture2DState[] textures = GlStateManagerAccessor.getTextures();\n+    for (int i = 0; i < 12; i++) {\n+      textures[i].boundTexture = texturesBound[i];\n+      textures[i].capState = texturesEnabled[i];\n+    }\n+\n+    GlStateManager.ColorMask colorMask = GlStateManagerAccessor.getColorMask();\n+    colorMask.red = colorMaskRed;\n+    colorMask.green = colorMaskGreen;\n+    colorMask.blue = colorMaskBlue;\n+    colorMask.alpha = colorMaskAlpha;\n+\n+    BufferRendererAccessor.setCurrentElementBufferObject(currentElementBufferObject);\n+    BufferRendererAccessor.setCurrentVertexArrayObject(currentVertexArrayObject);\n+    BufferRendererAccessor.setCurrentVertexBufferObject(currentVertexBufferObject);\n+  }\n+}"
  },
  {
    "sha": "f8fd9dfc616fb381f8926353a94643826af07e02",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/breakout/window/BreakoutWindow.java",
    "status": "modified",
    "additions": 34,
    "deletions": 2,
    "changes": 36,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/window/BreakoutWindow.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/breakout/window/BreakoutWindow.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/breakout/window/BreakoutWindow.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -1,9 +1,14 @@\n package com.raphydaphy.breakoutapi.breakout.window;\n \n+import com.mojang.blaze3d.platform.GlStateManager;\n import com.mojang.blaze3d.systems.RenderSystem;\n import com.raphydaphy.breakoutapi.BreakoutAPI;\n import com.raphydaphy.breakoutapi.breakout.window.callback.BreakoutWindowCallbackKeeper;\n+import it.unimi.dsi.fastutil.objects.Reference2IntMap;\n+import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;\n import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gl.GlDebug;\n+import net.minecraft.client.render.VertexFormat;\n import net.minecraft.client.texture.TextureUtil;\n import net.minecraft.client.util.Monitor;\n import net.minecraft.client.util.Window;\n@@ -36,6 +41,8 @@\n   private int framebufferWidth;\n   private int framebufferHeight;\n \n+  protected Reference2IntMap<VertexFormat> vertexFormatVAOs = new Reference2IntOpenHashMap<>();\n+\n   public final BreakoutWindowCallbackKeeper keeper;\n \n   /***\n@@ -63,6 +70,13 @@ public BreakoutWindow(String title, int width, int height, @Nullable Monitor mon\n     \n     // This is to release the current context, as per the documentation.\n     GLFW.glfwMakeContextCurrent(NULL);\n+    GLFW.glfwDefaultWindowHints();\n+    GLFW.glfwWindowHint(GLFW.GLFW_CLIENT_API, GLFW.GLFW_OPENGL_API);\n+    GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_CREATION_API, GLFW.GLFW_NATIVE_CONTEXT_API);\n+    GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MAJOR, 3);\n+    GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_VERSION_MINOR, 2);\n+    GLFW.glfwWindowHint(GLFW.GLFW_OPENGL_PROFILE, GLFW.GLFW_OPENGL_CORE_PROFILE);\n+    GLFW.glfwWindowHint(GLFW.GLFW_OPENGL_FORWARD_COMPAT, 1);\n     this.handle = GLFW.glfwCreateWindow(this.width, this.height, title, monitor == null ? 0L : monitor.getHandle(), sharedContext);\n     \n     if (this.handle == NULL) {\n@@ -81,6 +95,7 @@ public BreakoutWindow(String title, int width, int height, @Nullable Monitor mon\n     }\n \n     GLFW.glfwMakeContextCurrent(this.handle);\n+    GlDebug.enableDebug(this.client.options.glDebugVerbosity, false);\n     this.updateFramebufferSize();\n \n     this.keeper = new BreakoutWindowCallbackKeeper();\n@@ -89,6 +104,7 @@ public BreakoutWindow(String title, int width, int height, @Nullable Monitor mon\n     this.keeper.getChainFramebufferSizeCallback().add(this::onFramebufferSizeChanged);\n     this.keeper.getChainWindowSizeCallback().add(this::onWindowSizeChanged);\n     this.keeper.getChainWindowPosCallback().add(this::onWindowPosChanged);\n+    GLFW.glfwMakeContextCurrent(sharedContext);\n   }\n \n   public void setPos(int x, int y) {\n@@ -160,8 +176,8 @@ public void setIcon(Identifier icon16, Identifier icon32) {\n     RenderSystem.assertThread(RenderSystem::isInInitPhase);\n \n     try {\n-      InputStream icon16Stream = this.client.getResourcePackDownloader().getPack().open(ResourceType.CLIENT_RESOURCES, icon16);\n-      InputStream icon32Stream = this.client.getResourcePackDownloader().getPack().open(ResourceType.CLIENT_RESOURCES, icon32);\n+      InputStream icon16Stream = this.client.getResourcePackProvider().getPack().open(ResourceType.CLIENT_RESOURCES, icon16);\n+      InputStream icon32Stream = this.client.getResourcePackProvider().getPack().open(ResourceType.CLIENT_RESOURCES, icon32);\n \n       MemoryStack memoryStack = MemoryStack.stackPush();\n       Throwable var4 = null;\n@@ -284,4 +300,20 @@ public boolean shouldClose() {\n   public void destroy() {\n     GLFW.glfwDestroyWindow(this.handle);\n   }\n+\n+  public int getVAOforVertexFormat(VertexFormat fmt) {\n+    return vertexFormatVAOs.computeIntIfAbsent(fmt, format -> GlStateManager.genVertexArray());\n+  }\n+\n+  public ContextHolder switchToContext() {\n+    GLFW.glfwMakeContextCurrent(handle);\n+    return new ContextHolder();\n+  }\n+\n+  public class ContextHolder implements AutoCloseable {\n+    @Override\n+    public void close() {\n+      GLFW.glfwMakeContextCurrent(BreakoutWindow.this.client.getWindow().getHandle());\n+    }\n+  }\n }"
  },
  {
    "sha": "7f590e8ad182d7e750d8bef40212635b823692fe",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/mixin/client/BufferRendererAccessor.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/BufferRendererAccessor.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/BufferRendererAccessor.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/mixin/client/BufferRendererAccessor.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -0,0 +1,38 @@\n+package com.raphydaphy.breakoutapi.mixin.client;\n+\n+import net.minecraft.client.render.BufferRenderer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+@Mixin(BufferRenderer.class)\n+public interface BufferRendererAccessor {\n+  @Accessor(\"currentElementBufferObject\")\n+  static int getCurrentElementBufferObject() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"currentElementBufferObject\")\n+  static void setCurrentElementBufferObject(int ebo) {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"currentVertexArrayObject\")\n+  static int getCurrentVertexArrayObject() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"currentVertexArrayObject\")\n+  static void setCurrentVertexArrayObject(int vao) {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"currentVertexBufferObject\")\n+  static int getCurrentVertexBufferObject() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"currentVertexBufferObject\")\n+  static void setCurrentVertexBufferObject(int vbo) {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+}"
  },
  {
    "sha": "bbca9973b1114f1fa0e48a739fc654f25707128c",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/mixin/client/CapabilityTrackerAccessor.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/CapabilityTrackerAccessor.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/CapabilityTrackerAccessor.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/mixin/client/CapabilityTrackerAccessor.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -0,0 +1,14 @@\n+package com.raphydaphy.breakoutapi.mixin.client;\n+\n+import com.mojang.blaze3d.platform.GlStateManager;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+@Mixin(GlStateManager.CapabilityTracker.class)\n+public interface CapabilityTrackerAccessor {\n+  @Accessor\n+  boolean getState();\n+\n+  @Accessor(\"state\")\n+  void setStateInternal(boolean state);\n+}"
  },
  {
    "sha": "dc5abb5b443ca613f433d30b4b3f2185e5909614",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/mixin/client/GlStateManagerAccessor.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/GlStateManagerAccessor.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/GlStateManagerAccessor.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/mixin/client/GlStateManagerAccessor.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -0,0 +1,63 @@\n+package com.raphydaphy.breakoutapi.mixin.client;\n+\n+import com.mojang.blaze3d.platform.GlStateManager;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+@Mixin(GlStateManager.class)\n+public interface GlStateManagerAccessor {\n+  @Accessor(\"BLEND\")\n+  static GlStateManager.BlendFuncState getBlend() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"DEPTH\")\n+  static GlStateManager.DepthTestState getDepth() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"CULL\")\n+  static GlStateManager.CullFaceState getCull() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"POLY_OFFSET\")\n+  static GlStateManager.PolygonOffsetState getPolyOffset() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"COLOR_LOGIC\")\n+  static GlStateManager.LogicOpState getColorLogic() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"STENCIL\")\n+  static GlStateManager.StencilState getStencil() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"SCISSOR_TEST\")\n+  static GlStateManager.ScissorTestState getScissorTest() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"activeTexture\")\n+  static int getActiveTexture() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"activeTexture\")\n+  static void setActiveTexture(int activeTexture) {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"TEXTURES\")\n+  static GlStateManager.Texture2DState[] getTextures() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+\n+  @Accessor(\"COLOR_MASK\")\n+  static GlStateManager.ColorMask getColorMask() {\n+    throw new IllegalStateException(\"Mixin not applied!\");\n+  }\n+}"
  },
  {
    "sha": "9718bdc5d5bbc9a67fe65d09ce12f5a666050be4",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/mixin/client/MinecraftClientMixin.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/MinecraftClientMixin.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/MinecraftClientMixin.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/mixin/client/MinecraftClientMixin.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -4,13 +4,15 @@\n import com.raphydaphy.breakoutapi.BreakoutAPIClient;\n import com.raphydaphy.breakoutapi.breakout.AbstractBreakout;\n import com.raphydaphy.breakoutapi.breakout.Breakout;\n+import com.raphydaphy.breakoutapi.breakout.SavedGlState;\n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.util.Window;\n import net.minecraft.util.Identifier;\n import org.lwjgl.glfw.GLFW;\n import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n@@ -23,6 +25,9 @@\n \t@Shadow @Final\n \tprivate Window window;\n \n+\t@Unique\n+\tprivate final SavedGlState mainContextState = new SavedGlState();\n+\n \t@Inject(method = \"onResolutionChanged\", at = @At(\"HEAD\"))\n \tpublic void onResolutionChanged(CallbackInfo info) {\n \t\tGLFW.glfwMakeContextCurrent(this.window.getHandle());\n@@ -34,6 +39,8 @@ private void afterRender(CallbackInfo info) {\n \n \t\tBreakout.checkError(\"before rendering breakouts\");\n \n+\t\tmainContextState.record();\n+\n \t\tIterator<Map.Entry<Identifier, AbstractBreakout>> iter = BreakoutAPIClient.getBreakouts().entrySet().iterator();\n \t\twhile (iter.hasNext()) {\n \t\t\tMap.Entry<Identifier, AbstractBreakout> entry = iter.next();\n@@ -52,5 +59,6 @@ private void afterRender(CallbackInfo info) {\n \n \t\tBreakout.checkError(\"after rendering breakouts\");\n \t\tGLFW.glfwMakeContextCurrent(this.window.getHandle());\n+\t\tmainContextState.apply();\n \t}\n }"
  },
  {
    "sha": "c1a01a661876786c344959f46ee16e6fa7c9d8dc",
    "filename": "src/main/java/com/raphydaphy/breakoutapi/mixin/client/VertexFormatMixin.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/VertexFormatMixin.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/com/raphydaphy/breakoutapi/mixin/client/VertexFormatMixin.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/com/raphydaphy/breakoutapi/mixin/client/VertexFormatMixin.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -0,0 +1,17 @@\n+package com.raphydaphy.breakoutapi.mixin.client;\n+\n+import com.raphydaphy.breakoutapi.breakout.RenderContextTracker;\n+import net.minecraft.client.render.VertexFormat;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+@Mixin(VertexFormat.class)\n+public class VertexFormatMixin {\n+  @Inject(method = \"method_34446\", at = @At(\"HEAD\"), cancellable = true)\n+  public void getVertexArray(CallbackInfoReturnable<Integer> cir) {\n+    if (RenderContextTracker.getCurrentContext() != null)\n+      cir.setReturnValue(RenderContextTracker.getCurrentContext().getWindow().getVAOforVertexFormat((VertexFormat)(Object) this));\n+  }\n+}"
  },
  {
    "sha": "aaaadaf6de0b869dd340909a0c1ea1ef7aa56892",
    "filename": "src/main/java/org/liquidengine/legui/config/Configuration.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/org/liquidengine/legui/config/Configuration.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/org/liquidengine/legui/config/Configuration.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/org/liquidengine/legui/config/Configuration.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -47,7 +47,7 @@\n     private static void initialize() {\n         Gson gson = new Gson();\n         try {\n-            DefaultResourcePack pack = MinecraftClient.getInstance().getResourcePackDownloader().getPack();\n+            DefaultResourcePack pack = MinecraftClient.getInstance().getResourcePackProvider().getPack();\n             InputStream defaultConfigStream = pack.open(ResourceType.CLIENT_RESOURCES, new Identifier(Legui.ID, \"default_config.json\"));\n             String defaultConfig = new String(IOUtil.resourceToString(defaultConfigStream).getBytes(), StandardCharsets.UTF_8);\n             JsonObject initial = gson.fromJson(defaultConfig, JsonObject.class);"
  },
  {
    "sha": "e7dc8a511d840272a33c8ef29e891f20a38b9613",
    "filename": "src/main/java/org/liquidengine/legui/image/StbBackedLoadableImage.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/org/liquidengine/legui/image/StbBackedLoadableImage.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/org/liquidengine/legui/image/StbBackedLoadableImage.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/org/liquidengine/legui/image/StbBackedLoadableImage.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -57,7 +57,7 @@ public StbBackedLoadableImage(Identifier path) {\n     @Override\n     public void load() {\n         try {\n-            InputStream stream = MinecraftClient.getInstance().getResourcePackDownloader().getPack().open(ResourceType.CLIENT_RESOURCES, getPath());\n+            InputStream stream = MinecraftClient.getInstance().getResourcePackProvider().getPack().open(ResourceType.CLIENT_RESOURCES, getPath());\n             ByteBuffer byteBuffer = IOUtil.resourceToByteBuffer(stream);\n             int[] width = {0};\n             int[] height = {0};"
  },
  {
    "sha": "0134a757d123641bb2c32457750f0d808c3aad5c",
    "filename": "src/main/java/org/liquidengine/legui/style/font/Font.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/org/liquidengine/legui/style/font/Font.java",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/java/org/liquidengine/legui/style/font/Font.java",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/java/org/liquidengine/legui/style/font/Font.java?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -57,7 +57,7 @@ public Font(Identifier path, ByteBuffer data) {\n \n     public void load() {\n         try {\n-            InputStream stream = MinecraftClient.getInstance().getResourcePackDownloader().getPack().open(ResourceType.CLIENT_RESOURCES, path);\n+            InputStream stream = MinecraftClient.getInstance().getResourcePackProvider().getPack().open(ResourceType.CLIENT_RESOURCES, path);\n             data = IOUtil.resourceToByteBuffer(stream);\n         } catch (IOException e) {\n             throw FAILED_TO_LOAD_FONT.create(e, path.toString());"
  },
  {
    "sha": "e127a2136a253a00b688d5f6f94f58ee73d32a21",
    "filename": "src/main/resources/breakoutapi.accesswidener",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/resources/breakoutapi.accesswidener",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/resources/breakoutapi.accesswidener",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/resources/breakoutapi.accesswidener?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -0,0 +1,18 @@\n+accessWidener   v1  named\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$AlphaTestState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$CapabilityTracker\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$ColorMaterialState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$BlendFuncState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$DepthTestState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$FogState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$CullFaceState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$PolygonOffsetState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$LogicOpState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$TexGenState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$TexGenCoordState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$StencilState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$ScissorTestState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$Texture2DState\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$ColorMask\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$Color4\n+accessible  class   com/mojang/blaze3d/platform/GlStateManager$StencilSubState\n\\ No newline at end of file"
  },
  {
    "sha": "0dd641458170d5a874b2edaa06acd0daba258f81",
    "filename": "src/main/resources/breakoutapi.mixins.json",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/resources/breakoutapi.mixins.json",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/resources/breakoutapi.mixins.json",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/resources/breakoutapi.mixins.json?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -3,12 +3,14 @@\n   \"minVersion\": \"0.8\",\n   \"package\": \"com.raphydaphy.breakoutapi.mixin\",\n   \"compatibilityLevel\": \"JAVA_8\",\n-  \"mixins\": [\n-  ],\n   \"client\": [\n+    \"client.CapabilityTrackerAccessor\",\n+    \"client.GlStateManagerAccessor\",\n     \"client.MinecraftClientMixin\",\n+    \"client.MonitorTrackerMixin\",\n     \"client.WindowMixin\",\n-    \"client.MonitorTrackerMixin\"\n+    \"client.VertexFormatMixin\",\n+    \"client.BufferRendererAccessor\"\n   ],\n   \"injectors\": {\n     \"defaultRequire\": 1"
  },
  {
    "sha": "a15fdfca93419e7ebde2312001b50df0123126a7",
    "filename": "src/main/resources/fabric.mod.json",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/raphydaphy/breakoutapi/blob/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/resources/fabric.mod.json",
    "raw_url": "https://github.com/raphydaphy/breakoutapi/raw/0a3e92e593c7ec3ce682784242080a9171382c46/src/main/resources/fabric.mod.json",
    "contents_url": "https://api.github.com/repos/raphydaphy/breakoutapi/contents/src/main/resources/fabric.mod.json?ref=0a3e92e593c7ec3ce682784242080a9171382c46",
    "patch": "@@ -28,6 +28,7 @@\n   \"mixins\": [\n     \"breakoutapi.mixins.json\"\n   ],\n+  \"accessWidener\": \"breakoutapi.accesswidener\",\n \n   \"depends\": {\n     \"fabricloader\": \">=0.7.4\","
  }
]
