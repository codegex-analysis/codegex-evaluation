[
  {
    "sha": "f380e9d6d6c3e81b80b0e9b6d3916fd555256109",
    "filename": "app/src/main/java/org/jellyfin/androidtv/integration/LeanbackChannelWorker.kt",
    "status": "modified",
    "additions": 104,
    "deletions": 15,
    "changes": 119,
    "blob_url": "https://github.com/jellyfin/jellyfin-androidtv/blob/7bd493e8197af2e76772a90ba311d2af7cb5326d/app/src/main/java/org/jellyfin/androidtv/integration/LeanbackChannelWorker.kt",
    "raw_url": "https://github.com/jellyfin/jellyfin-androidtv/raw/7bd493e8197af2e76772a90ba311d2af7cb5326d/app/src/main/java/org/jellyfin/androidtv/integration/LeanbackChannelWorker.kt",
    "contents_url": "https://api.github.com/repos/jellyfin/jellyfin-androidtv/contents/app/src/main/java/org/jellyfin/androidtv/integration/LeanbackChannelWorker.kt?ref=7bd493e8197af2e76772a90ba311d2af7cb5326d",
    "patch": "@@ -15,18 +15,23 @@ import kotlinx.coroutines.Dispatchers\n import kotlinx.coroutines.withContext\n import org.jellyfin.androidtv.R\n import org.jellyfin.androidtv.TvApp\n+import org.jellyfin.androidtv.preference.UserPreferences\n import org.jellyfin.androidtv.ui.startup.StartupActivity\n import org.jellyfin.androidtv.util.ImageUtils\n+import org.jellyfin.androidtv.util.apiclient.getItem\n import org.jellyfin.androidtv.util.apiclient.getNextUpEpisodes\n import org.jellyfin.androidtv.util.apiclient.getUserViews\n import org.jellyfin.androidtv.util.dp\n import org.jellyfin.apiclient.interaction.ApiClient\n import org.jellyfin.apiclient.model.drawing.ImageFormat\n import org.jellyfin.apiclient.model.dto.BaseItemDto\n import org.jellyfin.apiclient.model.dto.ImageOptions\n+import org.jellyfin.apiclient.model.entities.SeriesStatus\n import org.jellyfin.apiclient.model.querying.ItemFields\n import org.jellyfin.apiclient.model.querying.NextUpQuery\n \n+import org.koin.java.KoinJavaComponent.get\n+\n /**\n  * Manages channels on the android tv home screen\n  *\n@@ -62,8 +67,12 @@ class LeanbackChannelWorker(\n \t\t// Retry later if no authenticated user is found\n \t\tTvApp.getApplication().currentUser == null -> Result.retry()\n \t\telse -> {\n+\t\t\t// Delete current items\n+\t\t\tcontext.contentResolver.delete(TvContractCompat.PreviewPrograms.CONTENT_URI, null, null)\n+\n \t\t\t// Update various channels\n \t\t\tupdateMyMedia()\n+\t\t\tupdateNextUp()\n \t\t\tupdateWatchNext()\n \n \t\t\t// Success!\n@@ -116,9 +125,6 @@ class LeanbackChannelWorker(\n \n \t\tval response = apiClient.getUserViews() ?: return\n \n-\t\t// Delete current items\n-\t\tcontext.contentResolver.delete(TvContractCompat.PreviewPrograms.CONTENT_URI, null, null)\n-\n \t\t// Add new items\n \t\tcontext.contentResolver.bulkInsert(TvContractCompat.PreviewPrograms.CONTENT_URI, response.items.map { item ->\n \t\t\tval imageUri = if (item.hasPrimaryImage) Uri.parse(apiClient.GetImageUrl(item, ImageOptions()))\n@@ -138,6 +144,75 @@ class LeanbackChannelWorker(\n \t\t}.toTypedArray())\n \t}\n \n+\t/**\n+\t * Updates the \"next up\" row with current episodes\n+\t */\n+\tprivate suspend fun updateNextUp() {\n+\t\t// Get channel\n+\t\tval channelUri = getChannelUri(\"next_up\", Channel.Builder()\n+\t\t\t\t.setType(TvContractCompat.Channels.TYPE_PREVIEW)\n+\t\t\t\t.setDisplayName(context.getString(R.string.lbl_next_up))\n+\t\t\t\t.setAppLinkIntent(Intent(context, StartupActivity::class.java))\n+\t\t\t\t.build())\n+\n+\t\t// Get user or return if no user is found (not authenticated)\n+\t\tval user = TvApp.getApplication().currentUser ?: return\n+\n+\t\tval response = apiClient.getNextUpEpisodes(NextUpQuery().apply {\n+\t\t\tuserId = user?.id\n+\t\t\timageTypeLimit = 1\n+\t\t\tlimit = 15\n+\t\t})\n+\n+\t\tval preferParentThumb = get(UserPreferences::class.java)[UserPreferences.seriesThumbnailsEnabled]\n+\n+\t\t// Add new items\n+\t\tresponse?.items?.map { item ->\n+\t\t\tval imageUri = if (preferParentThumb && item.parentThumbItemId != null) {\n+\t\t\t\tUri.parse(apiClient.GetImageUrl(item.seriesId, ImageOptions().apply {\n+\t\t\t\t\tformat = ImageFormat.Png\n+\t\t\t\t\theight = 288\n+\t\t\t\t\twidth = 512\n+\t\t\t\t\timageType = org.jellyfin.apiclient.model.entities.ImageType.Thumb\n+\t\t\t\t}))\n+\t\t\t} else {\n+\t\t\t\tUri.parse(apiClient.GetImageUrl(item, ImageOptions().apply {\n+\t\t\t\t\tformat = ImageFormat.Png\n+\t\t\t\t\theight = 288\n+\t\t\t\t\twidth = 512\n+\t\t\t\t}))\n+\t\t\t}\n+\n+\t\t\tval seasonString = if (item.parentIndexNumber != null) {\n+\t\t\t\t\"${item.parentIndexNumber}\"\n+\t\t\t} else {\n+\t\t\t\t\"\"\n+\t\t\t}\n+\n+\t\t\tval episodeString = if (item.indexNumber != null && item.indexNumberEnd != null) {\n+\t\t\t\t\"${item.indexNumber}-${item.indexNumberEnd}\"\n+\t\t\t} else if (item.indexNumber != null) {\n+\t\t\t\t\"${item.indexNumber}\"\n+\t\t\t} else {\n+\t\t\t\t\"\"\n+\t\t\t}\n+\n+\t\t\tPreviewProgram.Builder()\n+\t\t\t\t\t.setChannelId(ContentUris.parseId(channelUri))\n+\t\t\t\t\t.setType(WatchNextPrograms.TYPE_TV_EPISODE)\n+\t\t\t\t\t.setTitle(item.seriesName)\n+\t\t\t\t\t.setEpisodeTitle(item.name)\n+\t\t\t\t\t.setSeasonNumber(seasonString, item.parentIndexNumber ?: 0)\n+\t\t\t\t\t.setEpisodeNumber(episodeString, item.indexNumber ?: 0)\n+\t\t\t\t\t.setPosterArtUri(imageUri)\n+\t\t\t\t\t.setPosterArtAspectRatio(TvContractCompat.PreviewPrograms.ASPECT_RATIO_16_9)\n+\t\t\t\t\t.setIntent(Intent(context, StartupActivity::class.java).apply {\n+\t\t\t\t\t\tputExtra(StartupActivity.ITEM_ID, item.id)\n+\t\t\t\t\t})\n+\t\t\t\t\t.build().toContentValues()\n+\t\t}?.let { context.contentResolver.bulkInsert(TvContractCompat.PreviewPrograms.CONTENT_URI, it.toTypedArray()) }\n+\t}\n+\n \t/**\n \t * Updates the \"watch next\" row with new and unfinished episodes\n \t * does not include movies, music or other types of media\n@@ -171,18 +246,31 @@ class LeanbackChannelWorker(\n \t *\n \t * Assumes the item type is \"episode\"\n \t */\n-\tprivate fun getBaseItemAsWatchNextProgram(item: BaseItemDto) = WatchNextProgram.Builder().apply {\n+\tprivate suspend fun getBaseItemAsWatchNextProgram(item: BaseItemDto) = WatchNextProgram.Builder().apply {\n+\t\tval preferParentThumb = get(UserPreferences::class.java)[UserPreferences.seriesThumbnailsEnabled]\n+\t\tval seriesItem = apiClient.getItem(item.seriesId)\n+\n \t\tsetInternalProviderId(item.id)\n \t\tsetType(WatchNextPrograms.TYPE_TV_EPISODE)\n \t\tsetTitle(\"${item.seriesName} - ${item.name}\")\n \n \t\t// Poster image\n \t\tsetPosterArtAspectRatio(WatchNextPrograms.ASPECT_RATIO_16_9)\n-\t\tsetPosterArtUri(Uri.parse(apiClient.GetImageUrl(item, ImageOptions().apply {\n-\t\t\tformat = ImageFormat.Png\n-\t\t\theight = 288\n-\t\t\twidth = 512\n-\t\t})))\n+\t\tif (preferParentThumb && seriesItem != null && seriesItem.hasThumb) {\n+\t\t\tsetPosterArtUri(Uri.parse(apiClient.GetImageUrl(seriesItem, ImageOptions().apply {\n+\t\t\t\tformat = ImageFormat.Png\n+\t\t\t\theight = 288\n+\t\t\t\twidth = 512\n+\t\t\t\timageType = org.jellyfin.apiclient.model.entities.ImageType.Thumb\n+\t\t\t})))\n+\t\t}\n+\t\telse {\n+\t\t\tsetPosterArtUri(Uri.parse(apiClient.GetImageUrl(item, ImageOptions().apply {\n+\t\t\t\tformat = ImageFormat.Png\n+\t\t\t\theight = 288\n+\t\t\t\twidth = 512\n+\t\t\t})))\n+\t\t}\n \n \t\t// Use date created or fallback to current time if unavailable\n \t\tsetLastEngagementTimeUtcMillis(item.dateCreated?.time ?: System.currentTimeMillis())\n@@ -193,12 +281,8 @@ class LeanbackChannelWorker(\n \t\t\t\tsetWatchNextType(WatchNextPrograms.WATCH_NEXT_TYPE_CONTINUE)\n \t\t\t\tsetLastPlaybackPositionMillis((item.resumePositionTicks / TICKS_IN_MILLISECOND).toInt())\n \t\t\t}\n-\t\t\t// Episode runtime has been determined\n-\t\t\titem.runTimeTicks != null -> {\n-\t\t\t\tsetDurationMillis((item.runTimeTicks / TICKS_IN_MILLISECOND).toInt())\n-\t\t\t}\n-\t\t\t// First episode of the season\n-\t\t\titem.indexNumber == 0 -> {\n+\t\t\t// Most recently aired episode\n+\t\t\tseriesItem?.userData?.unplayedItemCount == 1 && seriesItem.seriesStatus == SeriesStatus.Continuing -> {\n \t\t\t\tsetWatchNextType(WatchNextPrograms.WATCH_NEXT_TYPE_NEW)\n \t\t\t}\n \t\t\t// Default\n@@ -207,6 +291,11 @@ class LeanbackChannelWorker(\n \t\t\t}\n \t\t}\n \n+\t\t// Episode runtime has been determined\n+\t\tif (item.runTimeTicks != null) {\n+\t\t\tsetDurationMillis((item.runTimeTicks / TICKS_IN_MILLISECOND).toInt())\n+\t\t}\n+\n \t\t// Set intent to open the episode\n \t\tsetIntent(Intent(context, StartupActivity::class.java).apply {\n \t\t\tputExtra(StartupActivity.ITEM_ID, item.id)"
  }
]
