[
  {
    "sha": "761f9a7a5862b59df0f292bfeaf437c116d5db15",
    "filename": "examples/hmf/rerun.json",
    "status": "removed",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/1ccc99630bcc8832e4878759fb6677d77318d8f6/examples/hmf/rerun.json",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/1ccc99630bcc8832e4878759fb6677d77318d8f6/examples/hmf/rerun.json",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/examples/hmf/rerun.json?ref=1ccc99630bcc8832e4878759fb6677d77318d8f6",
    "patch": "@@ -1,17 +0,0 @@\n-{\n-  \"serviceAccount\":{\n-    \"name\": \"hmf-crunch@hmf-crunch.iam.gserviceaccount.com\",\n-    \"existingSecret\": \"service-account-key\"\n-  },\n-  \"cluster\": \"rerun-cluster\",\n-  \"image\": \"eu.gcr.io/hmf-images/pipeline5:5.?.?\",\n-  \"cmek\": \"\",\n-  \"apiUrl\": \"https://api.hartwigmedicalfoundation.nl\",\n-  \"keystorePassword\": \"\",\n-  \"argumentOverrides\": {\n-    \"starting_point\": \"\"\n-  },\n-  \"biopsies\": [\n-    \"\"\n-  ]\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "c632700531d2099380a4246b19f4d74fe37bc570",
    "filename": "examples/quickstart/input.yaml",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/examples/quickstart/input.yaml",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/examples/quickstart/input.yaml",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/examples/quickstart/input.yaml?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,36 @@\n+image: \"eu.gcr.io/hmf-images/pipeline5:ccia-set-test\"\n+samples:\n+  - name: CPCT12345678T\n+    tumors:\n+      - name: CPCT12345678T\n+        fastq:\n+          - read1: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L001_R1_001.fastq.gz\"\n+            read2: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L001_R2_001.fastq.gz\"\n+          - read1: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L002_R1_001.fastq.gz\"\n+            read2: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L002_R2_001.fastq.gz\"\n+          - read1: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L003_R1_001.fastq.gz\"\n+            read2: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L003_R2_001.fastq.gz\"\n+          - read1: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L004_R1_001.fastq.gz\"\n+            read2: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L004_R2_001.fastq.gz\"\n+      - name: CPCT12345678TII\n+        fastq:\n+          - read1: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L001_R1_001.fastq.gz\"\n+            read2: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L001_R2_001.fastq.gz\"\n+          - read1: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L002_R1_001.fastq.gz\"\n+            read2: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L002_R2_001.fastq.gz\"\n+          - read1: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L003_R1_001.fastq.gz\"\n+            read2: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L003_R2_001.fastq.gz\"\n+          - read1: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L004_R1_001.fastq.gz\"\n+            read2: \"gs://hmf-public/cancerPanel/CPCT12345678T_AHHKYHDSXX_S12_L004_R2_001.fastq.gz\"\n+    normal:\n+      name: CPCT12345678R\n+      fastq:\n+        - read1: \"gs://hmf-public/cancerPanel/CPCT12345678R_AHHKYHDSXX_S13_L001_R1_001.fastq.gz\"\n+          read2: \"gs://hmf-public/cancerPanel/CPCT12345678R_AHHKYHDSXX_S13_L001_R2_001.fastq.gz\"\n+        - read1: \"gs://hmf-public/cancerPanel/CPCT12345678R_AHHKYHDSXX_S13_L002_R1_001.fastq.gz\"\n+          read2: \"gs://hmf-public/cancerPanel/CPCT12345678R_AHHKYHDSXX_S13_L002_R1_001.fastq.gz\"\n+        - read1: \"gs://hmf-public/cancerPanel/CPCT12345678R_AHHKYHDSXX_S13_L001_R1_001.fastq.gz\"\n+          read2: \"gs://hmf-public/cancerPanel/CPCT12345678R_AHHKYHDSXX_S13_L001_R1_001.fastq.gz\"\n+        - read1: \"gs://hmf-public/cancerPanel/CPCT12345678R_AHHKYHDSXX_S13_L001_R1_001.fastq.gz\"\n+          read2: \"gs://hmf-public/cancerPanel/CPCT12345678R_AHHKYHDSXX_S13_L001_R1_001.fastq.gz\"\n+"
  },
  {
    "sha": "22fa068a4823a6fba73621ba7de062c261261f80",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/pom.xml",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/pom.xml",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/pom.xml?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -107,6 +107,11 @@\n             <artifactId>jackson-datatype-jdk8</artifactId>\n             <version>${jackson.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.dataformat</groupId>\n+            <artifactId>jackson-dataformat-yaml</artifactId>\n+            <version>${jackson.version}</version>\n+        </dependency>\n         <dependency>\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-log4j12</artifactId>"
  },
  {
    "sha": "9de9d9e5e6ada625a610f54a67ad563ff149b7af",
    "filename": "src/main/java/com/hartwig/platinum/Platinum.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/Platinum.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/Platinum.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/Platinum.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -1,5 +1,7 @@\n package com.hartwig.platinum;\n \n+import static java.util.stream.Collectors.toList;\n+\n import java.util.List;\n \n import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n@@ -11,6 +13,9 @@\n import com.hartwig.platinum.iam.PipelineServiceAccount;\n import com.hartwig.platinum.iam.ServiceAccountPrivateKey;\n import com.hartwig.platinum.kubernetes.KubernetesEngine;\n+import com.hartwig.platinum.kubernetes.SampleArgument;\n+import com.hartwig.platinum.p5sample.DecomposeSamples;\n+import com.hartwig.platinum.p5sample.TumorNormalPair;\n import com.hartwig.platinum.storage.OutputBucket;\n \n import org.slf4j.Logger;\n@@ -28,7 +33,7 @@\n     private final Iam iam;\n     private final CloudResourceManager resourceManager;\n     private final KubernetesEngine kubernetesEngine;\n-    private PlatinumConfiguration configuration;\n+    private final PlatinumConfiguration configuration;\n \n     public Platinum(final String runName, final String input, final Storage storage, final Iam iam,\n             final CloudResourceManager resourceManager, final KubernetesEngine clusterProvider, final PlatinumConfiguration configuration) {\n@@ -49,12 +54,20 @@ public void run() {\n         String serviceAccountEmail = serviceAccount.findOrCreate();\n         ServiceAccountPrivateKey privateKey = ServiceAccountPrivateKey.from(configuration, iam);\n         JsonKey jsonKey = privateKey.create(gcpConfiguration.projectOrThrow(), serviceAccountEmail);\n+        List<TumorNormalPair> pairs = DecomposeSamples.apply(configuration.samples());\n         List<Job> submitted = kubernetesEngine.findOrCreate(runName,\n-                configuration,\n+                pairs,\n                 jsonKey,\n                 OutputBucket.from(storage).findOrCreate(runName, gcpConfiguration.regionOrThrow(), serviceAccountEmail, configuration),\n-                serviceAccountEmail).submit(configuration);\n+                serviceAccountEmail).submit(samples(configuration, pairs, runName));\n         LOGGER.info(\"Platinum started {} pipelines on GCP\", Console.bold(String.valueOf(submitted.size())));\n         LOGGER.info(\"You can monitor their progress with: {}\", Console.bold(\"./platinum status\"));\n     }\n+\n+    private List<SampleArgument> samples(final PlatinumConfiguration configuration, final List<TumorNormalPair> pairs,\n+            final String runName) {\n+        return configuration.sampleIds().isEmpty()\n+                ? pairs.stream().map(p -> SampleArgument.sampleJson(p, runName)).collect(toList())\n+                : configuration.sampleIds().stream().map(SampleArgument::biopsy).collect(toList());\n+    }\n }"
  },
  {
    "sha": "ee92d47ae4daaa4e29a22a2740b89c0c8de6987a",
    "filename": "src/main/java/com/hartwig/platinum/PlatinumMain.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/PlatinumMain.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/PlatinumMain.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/PlatinumMain.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -46,7 +46,7 @@ public Integer call() {\n                     StorageOptions.newBuilder().setProjectId(configuration.gcp().projectOrThrow()).build().getService(),\n                     IamProvider.get(),\n                     ResourceManagerProvider.get(),\n-                    new KubernetesEngine(ContainerProvider.get(), new ProcessRunner()),\n+                    new KubernetesEngine(ContainerProvider.get(), new ProcessRunner(), configuration),\n                     configuration).run();\n             return 0;\n         } catch (Exception e) {"
  },
  {
    "sha": "dbaee3c023f6ab861e7d23357dffc52d7e0032dd",
    "filename": "src/main/java/com/hartwig/platinum/config/FastqConfiguration.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/config/FastqConfiguration.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/config/FastqConfiguration.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/config/FastqConfiguration.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,14 @@\n+package com.hartwig.platinum.config;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+@JsonDeserialize(as = ImmutableFastqConfiguration.class)\n+public interface FastqConfiguration {\n+\n+    String read1();\n+\n+    String read2();\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "82f3312aa595611a6b5683cf7e7754ce2d1e80d2",
    "filename": "src/main/java/com/hartwig/platinum/config/PlatinumConfiguration.java",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/config/PlatinumConfiguration.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/config/PlatinumConfiguration.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/config/PlatinumConfiguration.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -7,9 +7,9 @@\n import java.util.Optional;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n \n import org.immutables.value.Value;\n@@ -31,12 +31,17 @@ default GcpConfiguration gcp() {\n         return GcpConfiguration.builder().build();\n     }\n \n+    @Value.Default\n+    default boolean namespaced() {\n+        return false;\n+    }\n+\n     Optional<String> outputBucket();\n \n     Optional<String> cmek();\n \n     Optional<ServiceAccountConfiguration> serviceAccount();\n-    \n+\n     Optional<String> cluster();\n \n     Optional<String> apiUrl();\n@@ -49,7 +54,7 @@ default PlatinumConfiguration withGcp(final GcpConfiguration gcp) {\n \n     Map<String, String> argumentOverrides();\n \n-    Map<String, JsonNode> samples();\n+    List<SampleConfiguration> samples();\n \n     List<String> sampleIds();\n \n@@ -58,7 +63,7 @@ default PlatinumConfiguration withGcp(final GcpConfiguration gcp) {\n     }\n \n     static PlatinumConfiguration from(String inputFile) {\n-        ObjectMapper objectMapper = new ObjectMapper();\n+        ObjectMapper objectMapper = inputFile.endsWith(\"yaml\") ? new ObjectMapper(new YAMLFactory()) : new ObjectMapper();\n         objectMapper.registerModule(new Jdk8Module());\n         try {\n             PlatinumConfiguration platinumConfiguration = objectMapper.readValue(new File(inputFile), new TypeReference<>() {\n@@ -71,7 +76,6 @@ static PlatinumConfiguration from(String inputFile) {\n         } catch (IOException ioe) {\n             throw new RuntimeException(\"Could not parse input\", ioe);\n         }\n-\n     }\n }\n "
  },
  {
    "sha": "e9e8298da873c60548012b27f978c7babf293e6c",
    "filename": "src/main/java/com/hartwig/platinum/config/RawDataConfiguration.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/config/RawDataConfiguration.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/config/RawDataConfiguration.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/config/RawDataConfiguration.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,17 @@\n+package com.hartwig.platinum.config;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+@Value.Style(jdkOnly = true)\n+@JsonDeserialize(as = ImmutableRawDataConfiguration.class)\n+public interface RawDataConfiguration {\n+\n+    String name();\n+\n+    List<FastqConfiguration> fastq();\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "883804ef037b08cc794dc1d41ee15b7f7a7c9e98",
    "filename": "src/main/java/com/hartwig/platinum/config/SampleConfiguration.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/config/SampleConfiguration.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/config/SampleConfiguration.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/config/SampleConfiguration.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,29 @@\n+package com.hartwig.platinum.config;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+@Value.Style(jdkOnly = true)\n+@JsonDeserialize(as = ImmutableSampleConfiguration.class)\n+public interface SampleConfiguration {\n+\n+    String name();\n+\n+    List<RawDataConfiguration> tumors();\n+\n+    RawDataConfiguration normal();\n+\n+    default String asJsonString(final ObjectMapper objectMapper) {\n+        try {\n+            return objectMapper.writeValueAsString(this);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "97d9e13ce086282246cbc6ab812a328c80c17b1b",
    "filename": "src/main/java/com/hartwig/platinum/kubernetes/KubernetesCluster.java",
    "status": "modified",
    "additions": 6,
    "deletions": 11,
    "changes": 17,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/KubernetesCluster.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/KubernetesCluster.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/kubernetes/KubernetesCluster.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -22,23 +22,26 @@\n     private final KubernetesComponent<Volume> configMap;\n     private final String outputBucketName;\n     private final String serviceAccountEmail;\n+    private final PlatinumConfiguration configuration;\n \n     KubernetesCluster(final String runName, final JobScheduler scheduler, final KubernetesComponent<Volume> serviceAccountSecret,\n-            final KubernetesComponent<Volume> configMap, final String outputBucketName, final String serviceAccountEmail) {\n+            final KubernetesComponent<Volume> configMap, final String outputBucketName, final String serviceAccountEmail,\n+            final PlatinumConfiguration configuration) {\n         this.runName = runName.toLowerCase();\n         this.scheduler = scheduler;\n         this.serviceAccountSecret = serviceAccountSecret;\n         this.configMap = configMap;\n         this.outputBucketName = outputBucketName;\n         this.serviceAccountEmail = serviceAccountEmail;\n+        this.configuration = configuration;\n     }\n \n-    public List<Job> submit(final PlatinumConfiguration configuration) {\n+    public List<Job> submit(final List<SampleArgument> samples) {\n         Volume configMapVolume = configMap.asKubernetes();\n         Volume secretVolume = serviceAccountSecret.asKubernetes();\n         Volume maybeJksVolume = new JksSecret().asKubernetes();\n         List<Job> submitted = new ArrayList<>();\n-        for (SampleArgument sample : samples(configuration)) {\n+        for (SampleArgument sample : samples) {\n             PipelineContainer pipelineContainer = new PipelineContainer(sample,\n                     runName,\n                     new PipelineArguments(configuration.argumentOverrides(), outputBucketName, serviceAccountEmail, runName, configuration),\n@@ -55,12 +58,4 @@\n         }\n         return submitted;\n     }\n-\n-    private List<SampleArgument> samples(final PlatinumConfiguration configuration) {\n-        return configuration.sampleIds().isEmpty() ? configuration.samples()\n-                .keySet()\n-                .stream()\n-                .map(SampleArgument::sampleJson)\n-                .collect(toList()) : configuration.sampleIds().stream().map(SampleArgument::biopsy).collect(toList());\n-    }\n }"
  },
  {
    "sha": "faea9c9b27f7699e48750801cd360be860910072",
    "filename": "src/main/java/com/hartwig/platinum/kubernetes/KubernetesEngine.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/KubernetesEngine.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/KubernetesEngine.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/kubernetes/KubernetesEngine.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -24,6 +24,7 @@\n import com.hartwig.platinum.config.GcpConfiguration;\n import com.hartwig.platinum.config.PlatinumConfiguration;\n import com.hartwig.platinum.iam.JsonKey;\n+import com.hartwig.platinum.p5sample.TumorNormalPair;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -36,10 +37,12 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(KubernetesEngine.class);\n     private final Container containerApi;\n     private final ProcessRunner processRunner;\n+    private final PlatinumConfiguration configuration;\n \n-    public KubernetesEngine(final Container containerApi, final ProcessRunner processRunner) {\n+    public KubernetesEngine(final Container containerApi, final ProcessRunner processRunner, final PlatinumConfiguration configuration) {\n         this.containerApi = containerApi;\n         this.processRunner = processRunner;\n+        this.configuration = configuration;\n     }\n \n     private Optional<Cluster> find(final String path) throws IOException {\n@@ -118,7 +121,7 @@ private static void create(final Container containerApi, final String parent, fi\n         }\n     }\n \n-    public KubernetesCluster findOrCreate(final String runName, final PlatinumConfiguration configuration, final JsonKey jsonKey,\n+    public KubernetesCluster findOrCreate(final String runName, final List<TumorNormalPair> pairs, final JsonKey jsonKey,\n             final String outputBucketName, final String serviceAccountEmail) {\n         try {\n             String clusterName = configuration.cluster().orElse(runName);\n@@ -146,9 +149,10 @@ public KubernetesCluster findOrCreate(final String runName, final PlatinumConfig\n             return new KubernetesCluster(runName,\n                     new JobScheduler(kubernetesClient),\n                     new PipelineServiceAccountSecretVolume(jsonKey, kubernetesClient, \"service-account-key\"),\n-                    new PipelineConfigMapVolume(configuration, kubernetesClient, runName),\n+                    new PipelineConfigMapVolume(pairs, kubernetesClient, runName),\n                     outputBucketName,\n-                    serviceAccountEmail);\n+                    serviceAccountEmail,\n+                    configuration);\n         } catch (Exception e) {\n             throw new RuntimeException(\"Failed to create cluster\", e);\n         }"
  },
  {
    "sha": "21f0798752c2473e99d9adc67cf9457e0d76c955",
    "filename": "src/main/java/com/hartwig/platinum/kubernetes/PipelineArguments.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/PipelineArguments.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/PipelineArguments.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/kubernetes/PipelineArguments.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -50,8 +50,7 @@ public PipelineArguments(final Map<String, String> overrides, final String outpu\n                 .put(\"-region\", gcpConfiguration.regionOrThrow())\n                 .put(\"-network\", gcpConfiguration.networkUrl())\n                 .put(\"-subnet\", gcpConfiguration.subnetUrl())\n-                .put(\"-service_account_email\", serviceAccountEmail)\n-                .put(\"-run_id\", runName);\n+                .put(\"-service_account_email\", serviceAccountEmail);\n         if (!gcpConfiguration.networkTags().isEmpty()) {\n             builder.put(\"-network_tags\", String.join(\",\", gcpConfiguration.networkTags()));\n         }"
  },
  {
    "sha": "ee120efb35c81bf5ddbb18580e64ff90c21e53b8",
    "filename": "src/main/java/com/hartwig/platinum/kubernetes/PipelineConfigMapVolume.java",
    "status": "modified",
    "additions": 20,
    "deletions": 9,
    "changes": 29,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/PipelineConfigMapVolume.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/PipelineConfigMapVolume.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/kubernetes/PipelineConfigMapVolume.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -1,10 +1,12 @@\n package com.hartwig.platinum.kubernetes;\n \n-import static java.util.stream.Collectors.toMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n-import java.util.Map.Entry;\n-\n-import com.hartwig.platinum.config.PlatinumConfiguration;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.hartwig.platinum.p5sample.TumorNormalPair;\n \n import io.fabric8.kubernetes.api.model.Volume;\n import io.fabric8.kubernetes.api.model.VolumeBuilder;\n@@ -13,29 +15,38 @@\n public class PipelineConfigMapVolume implements KubernetesComponent<Volume> {\n \n     private static final String SAMPLES = \"samples\";\n-    private final PlatinumConfiguration configuration;\n+    private final List<TumorNormalPair> pairs;\n     private final KubernetesClient kubernetesClient;\n     private final String runName;\n \n-    public PipelineConfigMapVolume(final PlatinumConfiguration configuration, final KubernetesClient kubernetesClient,\n-            final String runName) {\n-        this.configuration = configuration;\n+    public PipelineConfigMapVolume(final List<TumorNormalPair> pairs, final KubernetesClient kubernetesClient, final String runName) {\n         this.kubernetesClient = kubernetesClient;\n         this.runName = runName;\n+        this.pairs = pairs;\n     }\n \n     public Volume asKubernetes() {\n         String name = runName + \"-\" + SAMPLES;\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.registerModule(new Jdk8Module());\n         kubernetesClient.configMaps()\n                 .inNamespace(KubernetesCluster.NAMESPACE)\n                 .withName(name)\n                 .createOrReplaceWithNew()\n-                .addToData(configuration.samples().entrySet().stream().collect(toMap(Entry::getKey, e -> e.getValue().toString())))\n+                .addToData(pairs.stream().collect(Collectors.toMap(p -> p.name().toLowerCase() + \"-\" + runName, p -> toJson(objectMapper, p))))\n                 .withNewMetadata()\n                 .withName(name)\n                 .withNamespace(KubernetesCluster.NAMESPACE)\n                 .endMetadata()\n                 .done();\n         return new VolumeBuilder().withName(name).editOrNewConfigMap().withName(name).endConfigMap().build();\n     }\n+\n+    private String toJson(final ObjectMapper objectMapper, final TumorNormalPair p) {\n+        try {\n+            return objectMapper.writeValueAsString(p);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n }"
  },
  {
    "sha": "96c2cf459030d3046fa8014b7395480d2648451f",
    "filename": "src/main/java/com/hartwig/platinum/kubernetes/SampleArgument.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/SampleArgument.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/kubernetes/SampleArgument.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/kubernetes/SampleArgument.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -4,6 +4,8 @@\n \n import java.util.Map;\n \n+import com.hartwig.platinum.p5sample.TumorNormalPair;\n+\n import org.immutables.value.Value;\n \n @Value.Immutable\n@@ -13,11 +15,12 @@\n \n     Map<String, String> arguments();\n \n-    static SampleArgument sampleJson(final String sample) {\n+    static SampleArgument sampleJson(final TumorNormalPair pair, final String runName) {\n         return ImmutableSampleArgument.builder()\n-                .id(sample.toLowerCase())\n-                .putArguments(\"-sample_json\", format(\"samples/%s\", sample))\n-                .putArguments(\"-set_id\", sample)\n+                .id(pair.name().toLowerCase())\n+                .putArguments(\"-sample_json\", format(\"samples/%s-%s\", pair.name().toLowerCase(), runName))\n+                .putArguments(\"-set_id\", pair.name() + \"-set\")\n+                .putArguments(\"-run_id\", runName + pair.tumorIndex().map(ti -> \"-\" + ti).orElse(\"\"))\n                 .build();\n     }\n "
  },
  {
    "sha": "fe6b28f343cd25494b7529e9ff014f608cbcb2fe",
    "filename": "src/main/java/com/hartwig/platinum/p5sample/DecomposeSamples.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/p5sample/DecomposeSamples.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/p5sample/DecomposeSamples.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/p5sample/DecomposeSamples.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,57 @@\n+package com.hartwig.platinum.p5sample;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import com.hartwig.platinum.config.FastqConfiguration;\n+import com.hartwig.platinum.config.RawDataConfiguration;\n+import com.hartwig.platinum.config.SampleConfiguration;\n+\n+public class DecomposeSamples {\n+\n+    public static List<TumorNormalPair> apply(final List<SampleConfiguration> configurations) {\n+        List<TumorNormalPair> pairs = new ArrayList<>();\n+        for (SampleConfiguration sample : configurations) {\n+            if (sample.name().length() >= 55) {\n+                throw new IllegalArgumentException(\"Platinum can only support sample names up to 55 characters. Please shorten the sample \"\n+                        + \"name (this name will not be used for file naming or in any headers)\");\n+            }\n+            boolean indexTumors = sample.tumors().size() > 1;\n+            int tumorIndex = 1;\n+            for (RawDataConfiguration tumor : sample.tumors()) {\n+                pairs.add(ImmutableTumorNormalPair.builder()\n+                        .reference(ImmutableSample.builder().name(sample.normal().name()).lanes(toLanes(sample.normal().fastq())).build())\n+                        .tumor(ImmutableSample.builder().name(tumor.name()).lanes(toLanes(tumor.fastq())).build())\n+                        .tumorIndex(indexTumors ? Optional.of(tumorIndexString(tumorIndex)) : Optional.empty())\n+                        .name(indexTumors ? sample.name() + \"-\" + tumorIndexString(tumorIndex) : sample.name())\n+                        .build());\n+                tumorIndex++;\n+            }\n+        }\n+        return pairs;\n+    }\n+\n+    public static String tumorIndexString(final int tumorIndex) {\n+        return \"t\" + tumorIndex;\n+    }\n+\n+    private static List<ImmutableLane> toLanes(final List<FastqConfiguration> referenceFastq) {\n+        return IntStream.rangeClosed(1, referenceFastq.size())\n+                .boxed()\n+                .map(i -> Map.entry(String.valueOf(i), referenceFastq.get(i - 1)))\n+                .map(e -> ImmutableLane.builder()\n+                        .laneNumber(e.getKey())\n+                        .firstOfPairPath(stripGs(e.getValue().read1()))\n+                        .secondOfPairPath(stripGs(e.getValue().read2()))\n+                        .build())\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static String stripGs(final String maybeWithGs) {\n+        return maybeWithGs.replace(\"gs://\", \"\");\n+    }\n+}"
  },
  {
    "sha": "d06650327f416d340530fda786a2c05557b2227c",
    "filename": "src/main/java/com/hartwig/platinum/p5sample/Lane.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/p5sample/Lane.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/p5sample/Lane.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/p5sample/Lane.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,20 @@\n+package com.hartwig.platinum.p5sample;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+@JsonDeserialize(as = ImmutableLane.class)\n+public interface Lane {\n+\n+    String laneNumber();\n+\n+    String firstOfPairPath();\n+\n+    String secondOfPairPath();\n+\n+    static ImmutableLane.Builder builder() {\n+        return ImmutableLane.builder();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c67aaf9aaae7a580da9d4979d02d537f4ecfbe74",
    "filename": "src/main/java/com/hartwig/platinum/p5sample/Sample.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/p5sample/Sample.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/p5sample/Sample.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/p5sample/Sample.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,21 @@\n+package com.hartwig.platinum.p5sample;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+@JsonDeserialize(as = ImmutableSample.class)\n+@Value.Style(jdkOnly = true)\n+public interface Sample {\n+\n+    String name();\n+\n+    List<Lane> lanes();\n+\n+    static ImmutableSample.Builder builder(final String name) {\n+        return ImmutableSample.builder().name(name);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6c02c45122a8ee778569c154949197c6d569dec8",
    "filename": "src/main/java/com/hartwig/platinum/p5sample/TumorNormalPair.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/p5sample/TumorNormalPair.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/main/java/com/hartwig/platinum/p5sample/TumorNormalPair.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/main/java/com/hartwig/platinum/p5sample/TumorNormalPair.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,23 @@\n+package com.hartwig.platinum.p5sample;\n+\n+import java.util.Optional;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+import org.immutables.value.Value;\n+\n+@JsonSerialize(as = ImmutableTumorNormalPair.class)\n+@Value.Immutable\n+public interface TumorNormalPair {\n+\n+    @JsonIgnore\n+    String name();\n+\n+    @JsonIgnore\n+    Optional<String> tumorIndex();\n+\n+    Sample reference();\n+\n+    Sample tumor();\n+}"
  },
  {
    "sha": "a7194a10b095b47755eaf9f26d1cdcb3f46b84c7",
    "filename": "src/test/java/com/hartwig/platinum/kubernetes/KubernetesClusterTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 12,
    "changes": 34,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/test/java/com/hartwig/platinum/kubernetes/KubernetesClusterTest.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/test/java/com/hartwig/platinum/kubernetes/KubernetesClusterTest.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/test/java/com/hartwig/platinum/kubernetes/KubernetesClusterTest.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -4,9 +4,8 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n \n-import java.util.Map;\n+import java.util.List;\n \n-import com.fasterxml.jackson.databind.node.TextNode;\n import com.hartwig.platinum.config.GcpConfiguration;\n import com.hartwig.platinum.config.ImmutableGcpConfiguration;\n import com.hartwig.platinum.config.PlatinumConfiguration;\n@@ -21,29 +20,33 @@\n \n public class KubernetesClusterTest {\n \n-    private static final Map<String, TextNode> SAMPLES = Map.of(\"sample\", new TextNode(\"test\"));\n+    private static final List<SampleArgument> SAMPLES = List.of(ImmutableSampleArgument.builder().id(\"sample\").build());\n     private static final ImmutableGcpConfiguration GCP = GcpConfiguration.builder().project(\"project\").region(\"region\").build();\n     private static final String SECRET = \"secret\";\n     private static final String CONFIG = \"config\";\n     private KubernetesCluster victim;\n     private JobScheduler scheduler;\n+    private Volume secret;\n+    private Volume configMap;\n \n     @Before\n     public void setUp() {\n-        Volume secret = new VolumeBuilder().withName(SECRET).build();\n-        Volume configMap = new VolumeBuilder().withName(CONFIG).build();\n+        secret = new VolumeBuilder().withName(SECRET).build();\n+        configMap = new VolumeBuilder().withName(CONFIG).build();\n         scheduler = mock(JobScheduler.class);\n-        victim = new KubernetesCluster(\"test\", scheduler, () -> secret, () -> configMap, \"output\", \"sa@gcloud.com\");\n     }\n \n     @Test\n     public void addsJksVolumeAndContainerIfPasswordSpecified() {\n         ArgumentCaptor<PipelineJob> job = ArgumentCaptor.forClass(PipelineJob.class);\n-        victim.submit(PlatinumConfiguration.builder()\n-                .samples(SAMPLES)\n-                .keystorePassword(\"changeit\")\n-                .gcp(GcpConfiguration.builder().project(\"project\").region(\"region\").build())\n-                .build());\n+        victim = new KubernetesCluster(\"test\",\n+                scheduler,\n+                () -> secret,\n+                () -> configMap,\n+                \"output\",\n+                \"sa@gcloud.com\",\n+                PlatinumConfiguration.builder().keystorePassword(\"changeit\").gcp(GCP).build());\n+        victim.submit(List.of(ImmutableSampleArgument.builder().id(\"sample\").build()));\n         verify(scheduler).submit(job.capture());\n         PipelineJob result = job.getValue();\n         assertThat(result.getVolumes()).extracting(Volume::getName).contains(\"jks\");\n@@ -56,7 +59,14 @@ public void addsJksVolumeAndContainerIfPasswordSpecified() {\n     @Test\n     public void addsConfigMapAndSecretVolumes() {\n         ArgumentCaptor<PipelineJob> job = ArgumentCaptor.forClass(PipelineJob.class);\n-        victim.submit(PlatinumConfiguration.builder().samples(SAMPLES).gcp(GCP).build());\n+        victim = new KubernetesCluster(\"test\",\n+                scheduler,\n+                () -> secret,\n+                () -> configMap,\n+                \"output\",\n+                \"sa@gcloud.com\",\n+                PlatinumConfiguration.builder().gcp(GCP).build());\n+        victim.submit(SAMPLES);\n         verify(scheduler).submit(job.capture());\n         PipelineJob result = job.getValue();\n         assertThat(result.getVolumes()).extracting(Volume::getName).containsExactly(CONFIG, SECRET);"
  },
  {
    "sha": "24e65a4440b441a8d71bfbf10a1bca4206ad65e6",
    "filename": "src/test/java/com/hartwig/platinum/kubernetes/KubernetesEngineTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/test/java/com/hartwig/platinum/kubernetes/KubernetesEngineTest.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/test/java/com/hartwig/platinum/kubernetes/KubernetesEngineTest.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/test/java/com/hartwig/platinum/kubernetes/KubernetesEngineTest.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -15,6 +15,7 @@\n import static org.mockito.Mockito.when;\n \n import java.io.IOException;\n+import java.util.Collections;\n import java.util.List;\n \n import com.google.api.client.googleapis.json.GoogleJsonResponseException;\n@@ -63,13 +64,13 @@ public void setup() {\n         when(projects.locations()).thenReturn(locations);\n         when(locations.clusters()).thenReturn(clusters);\n         when(processRunner.execute(anyList())).thenReturn(true);\n-        victim = new KubernetesEngine(container, processRunner);\n+        victim = new KubernetesEngine(container, processRunner, CONFIGURATION);\n     }\n \n     @Test\n     public void shouldReturnExistingInstanceIfFound() throws IOException {\n         mocksForClusterExists();\n-        victim.findOrCreate(RUN_NAME, CONFIGURATION, JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n+        victim.findOrCreate(RUN_NAME, Collections.emptyList(), JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n         verify(clusters).get(anyString());\n         verify(clusters, never()).create(any(), any());\n     }\n@@ -88,7 +89,7 @@ public void shouldCreateAndReturnInstanceWhenNoneExists() throws IOException {\n \n         mockForClusterCreation();\n \n-        victim.findOrCreate(RUN_NAME, CONFIGURATION, JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n+        victim.findOrCreate(RUN_NAME, Collections.emptyList(), JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n         verify(created).execute();\n     }\n \n@@ -112,7 +113,7 @@ public void shouldPollUntilCreateClusterOperationHasCompleted() throws Exception\n         when(operationsGet.execute()).thenReturn(executedOperationsGet);\n         when(executedOperationsGet.getStatus()).thenReturn(null).thenReturn(\"RUNNING\").thenReturn(\"DONE\");\n \n-        victim.findOrCreate(RUN_NAME, CONFIGURATION, JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n+        victim.findOrCreate(RUN_NAME, Collections.emptyList(), JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n         //noinspection ResultOfMethodCallIgnored\n         verify(executedOperationsGet, times(3)).getStatus();\n     }\n@@ -121,14 +122,14 @@ public void shouldPollUntilCreateClusterOperationHasCompleted() throws Exception\n     public void shouldThrowIfGcloudCredentialFetchFails() {\n         mocksForClusterExists();\n         when(processRunner.execute(argThat(startsWithGcloud()))).thenReturn(false);\n-        victim.findOrCreate(RUN_NAME, CONFIGURATION, JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n+        victim.findOrCreate(RUN_NAME, Collections.emptyList(), JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n     }\n \n     @Test(expected = RuntimeException.class)\n     public void shouldThrowIfKubectlCommandFails() {\n         mocksForClusterExists();\n         when(processRunner.execute(anyList())).thenReturn(true).thenReturn(false);\n-        victim.findOrCreate(RUN_NAME, CONFIGURATION, JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n+        victim.findOrCreate(RUN_NAME, Collections.emptyList(), JSON_KEY, BUCKET, SERVICE_ACCOUNT);\n     }\n \n     @Test\n@@ -152,12 +153,12 @@ public void usesConfiguredClusterName() throws Exception {\n         when(executedCreate.getName()).thenReturn(\"created\");\n         mockForClusterCreation();\n         victim.findOrCreate(RUN_NAME,\n-                PlatinumConfiguration.builder().from(CONFIGURATION).cluster(\"cluster\").build(),\n+                Collections.emptyList(),\n                 JSON_KEY,\n                 BUCKET,\n                 SERVICE_ACCOUNT);\n \n-        assertThat(createRequest.getValue().getCluster().getName()).isEqualTo(\"cluster\");\n+        assertThat(createRequest.getValue().getCluster().getName()).isEqualTo(\"runName\");\n     }\n \n     public void mockForClusterCreation() throws IOException {"
  },
  {
    "sha": "238583ec790cae539d851dd2e809638bebfbbee3",
    "filename": "src/test/java/com/hartwig/platinum/kubernetes/PipelineArgumentsTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/test/java/com/hartwig/platinum/kubernetes/PipelineArgumentsTest.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/test/java/com/hartwig/platinum/kubernetes/PipelineArgumentsTest.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/test/java/com/hartwig/platinum/kubernetes/PipelineArgumentsTest.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -7,6 +7,8 @@\n \n import com.hartwig.platinum.config.GcpConfiguration;\n import com.hartwig.platinum.config.PlatinumConfiguration;\n+import com.hartwig.platinum.p5sample.ImmutableSample;\n+import com.hartwig.platinum.p5sample.ImmutableTumorNormalPair;\n \n import org.junit.Test;\n \n@@ -37,7 +39,11 @@ public void allowsOverridingOfDefaults() {\n     }\n \n     private List<String> asCommand(final PipelineArguments victim) {\n-        return victim.asCommand(SampleArgument.sampleJson(\"sample\"), \"/secrets\", \"key.json\");\n+        return victim.asCommand(SampleArgument.sampleJson(ImmutableTumorNormalPair.builder()\n+                .name(\"sample\")\n+                .tumor(ImmutableSample.builder().name(\"tumor\").build())\n+                .reference(ImmutableSample.builder().name(\"normal\").build())\n+                .build(), \"run\"), \"/secrets\", \"key.json\");\n     }\n \n     private PipelineArguments createVictimWithOverrides(final String s, final String value) {"
  },
  {
    "sha": "90869109186ed5da863d46eac0b193c98f8180d0",
    "filename": "src/test/java/com/hartwig/platinum/p5sample/DecomposeSamplesTest.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/hartwigmedical/platinum/blob/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/test/java/com/hartwig/platinum/p5sample/DecomposeSamplesTest.java",
    "raw_url": "https://github.com/hartwigmedical/platinum/raw/c3624d1b87a3caf1302d4190f148d4862b4a0ec9/src/test/java/com/hartwig/platinum/p5sample/DecomposeSamplesTest.java",
    "contents_url": "https://api.github.com/repos/hartwigmedical/platinum/contents/src/test/java/com/hartwig/platinum/p5sample/DecomposeSamplesTest.java?ref=c3624d1b87a3caf1302d4190f148d4862b4a0ec9",
    "patch": "@@ -0,0 +1,72 @@\n+package com.hartwig.platinum.p5sample;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import com.hartwig.platinum.config.FastqConfiguration;\n+import com.hartwig.platinum.config.ImmutableFastqConfiguration;\n+import com.hartwig.platinum.config.ImmutableRawDataConfiguration;\n+import com.hartwig.platinum.config.ImmutableSampleConfiguration;\n+\n+import org.junit.Test;\n+\n+public class DecomposeSamplesTest {\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void throwsIllegalArgumentWhenSampleNameExceeds55Chars() {\n+        DecomposeSamples.apply(List.of(ImmutableSampleConfiguration.builder().name(stringOf(55)).normal(data(\"normal\")).build()));\n+    }\n+\n+    @Test\n+    public void decomposesMultiNormalSamplesIntoPairs() {\n+        List<TumorNormalPair> pairs = DecomposeSamples.apply(List.of(ImmutableSampleConfiguration.builder()\n+                .name(\"sample\")\n+                .tumors(List.of(data(\"first_tumor\"), data(\"second_tumor\")))\n+                .normal(data(\"normal\"))\n+                .build()));\n+        assertThat(pairs).hasSize(2);\n+        TumorNormalPair firstPair = pairs.get(0);\n+        assertThat(firstPair.name()).isEqualTo(\"sample-t1\");\n+        assertThat(firstPair.tumor().name()).isEqualTo(\"first_tumor\");\n+        assertThat(firstPair.reference().name()).isEqualTo(\"normal\");\n+        assertThat(firstPair.tumorIndex()).hasValue(\"t1\");\n+        TumorNormalPair secondPair = pairs.get(1);\n+        assertThat(secondPair.name()).isEqualTo(\"sample-t2\");\n+        assertThat(secondPair.tumor().name()).isEqualTo(\"second_tumor\");\n+        assertThat(secondPair.reference().name()).isEqualTo(\"normal\");\n+        assertThat(secondPair.tumorIndex()).hasValue(\"t2\");\n+    }\n+\n+    @Test\n+    public void populatesTumorAndNormalLanes() {\n+        List<TumorNormalPair> pairs = DecomposeSamples.apply(List.of(ImmutableSampleConfiguration.builder()\n+                .name(\"sample\")\n+                .tumors(List.of(data(\"first_tumor\",\n+                        ImmutableFastqConfiguration.builder().read1(\"first_tumor_read1.fastq\").read2(\"first_tumor_read2.fastq\").build())))\n+                .normal(data(\"normal\",\n+                        ImmutableFastqConfiguration.builder().read1(\"normal_read1.fastq\").read2(\"normal_read2.fastq\").build()))\n+                .build()));\n+        TumorNormalPair pair = pairs.get(0);\n+        assertThat(pair.tumor().lanes()).containsOnly(ImmutableLane.builder()\n+                .laneNumber(\"1\")\n+                .firstOfPairPath(\"first_tumor_read1.fastq\")\n+                .secondOfPairPath(\"first_tumor_read2.fastq\")\n+                .build());\n+        assertThat(pair.reference().lanes()).containsOnly(ImmutableLane.builder()\n+                .laneNumber(\"1\")\n+                .firstOfPairPath(\"normal_read1.fastq\")\n+                .secondOfPairPath(\"normal_read2.fastq\")\n+                .build());\n+    }\n+\n+    public ImmutableRawDataConfiguration data(final String first_tumor, final FastqConfiguration... fastq) {\n+        return ImmutableRawDataConfiguration.builder().name(first_tumor).addFastq(fastq).build();\n+    }\n+\n+    public String stringOf(final int chars) {\n+        return IntStream.rangeClosed(0, chars - 1).boxed().map(i -> \" \").collect(Collectors.joining());\n+    }\n+}\n\\ No newline at end of file"
  }
]
