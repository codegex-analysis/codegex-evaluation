[
  {
    "sha": "7b84263bff7d5b5fe21627654fdbfbe46e903783",
    "filename": "HIRS_AttestationCAPortal/src/main/java/hirs/attestationca/portal/page/controllers/ValidationReportsPageController.java",
    "status": "modified",
    "additions": 48,
    "deletions": 11,
    "changes": 59,
    "blob_url": "https://github.com/nsacyber/HIRS/blob/175d2238d29be060fcbc15bb991c52806fdabd85/HIRS_AttestationCAPortal/src/main/java/hirs/attestationca/portal/page/controllers/ValidationReportsPageController.java",
    "raw_url": "https://github.com/nsacyber/HIRS/raw/175d2238d29be060fcbc15bb991c52806fdabd85/HIRS_AttestationCAPortal/src/main/java/hirs/attestationca/portal/page/controllers/ValidationReportsPageController.java",
    "contents_url": "https://api.github.com/repos/nsacyber/HIRS/contents/HIRS_AttestationCAPortal/src/main/java/hirs/attestationca/portal/page/controllers/ValidationReportsPageController.java?ref=175d2238d29be060fcbc15bb991c52806fdabd85",
    "patch": "@@ -35,15 +35,17 @@\n import java.io.BufferedWriter;\n import java.io.IOException;\n import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Enumeration;\n+import java.util.List;\n import java.util.UUID;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n /**\n  * Controller for the Validation Reports page.\n@@ -59,7 +61,7 @@\n     private static String columnHeaders = \"Verified Manufacturer,\"\n             + \"Model,SN,Verification Date,Device Status,\"\n             + \"Component name,Component manufacturer,Component model,\"\n-            + \"Component SN,Component status\";\n+            + \"Component SN,Issuer,Component status\";\n     private static final String DEFAULT_COMPANY = \"AllDevices\";\n     private static final String UNDEFINED = \"undefined\";\n     private static final Logger LOGGER = getLogger(ValidationReportsPageController.class);\n@@ -138,6 +140,7 @@ public void modify(final Criteria criteria) {\n      * @param response object\n      * @throws IOException thrown by BufferedWriter object\n      */\n+    @SuppressWarnings(\"checkstyle:magicnumber\")\n     @RequestMapping(value = \"download\", method = RequestMethod.POST)\n     public void download(final HttpServletRequest request,\n                          final HttpServletResponse response) throws IOException {\n@@ -190,7 +193,8 @@ public void download(final HttpServletRequest request,\n                     }\n                     break;\n                 case \"createTimes\":\n-                    if (!parameterValue.equals(UNDEFINED)) {\n+                    if (!parameterValue.equals(UNDEFINED)\n+                        && !parameterValue.isEmpty()) {\n                         String[] timestamps = parameterValue.split(\",\");\n                         for (String timestamp : timestamps) {\n                             createTimes.add(LocalDateTime.parse(timestamp,\n@@ -199,7 +203,8 @@ public void download(final HttpServletRequest request,\n                     }\n                     break;\n                 case \"deviceNames\":\n-                    if (!parameterValue.equals(UNDEFINED)) {\n+                    if (!parameterValue.equals(UNDEFINED)\n+                        && !parameterValue.isEmpty()) {\n                         deviceNames = parameterValue.split(\",\");\n                     }\n                     break;\n@@ -211,7 +216,7 @@ public void download(final HttpServletRequest request,\n         response.setHeader(\"Content-Disposition\",\n                 \"attachment;filename=validation_report.csv\");\n         BufferedWriter bufferedWriter = new BufferedWriter(\n-                new OutputStreamWriter(response.getOutputStream(), \"UTF-8\"));\n+                new OutputStreamWriter(response.getOutputStream(), StandardCharsets.UTF_8));\n         StringBuilder reportData = new StringBuilder();\n         bufferedWriter.append(\"Company: \" + company + \"\\n\");\n         bufferedWriter.append(\"Contract number: \" + contractNumber + \"\\n\");\n@@ -237,7 +242,9 @@ public void download(final HttpServletRequest request,\n                     reportData.deleteCharAt(reportData.length() - 1);\n                     reportData.append(\"\\n,,,,,\");\n                 }\n-                reportData.delete(reportData.lastIndexOf(\"\\n\"), reportData.length());\n+                if (reportData.lastIndexOf(\",\") > 4) {\n+                    reportData.delete(reportData.lastIndexOf(\",\") - 4, reportData.length());\n+                }\n             }\n         }\n         bufferedWriter.append(columnHeaders + \"\\n\");\n@@ -259,13 +266,42 @@ public void download(final HttpServletRequest request,\n      */\n     private ArrayList<ArrayList<String>> parseComponents(final PlatformCredential pc) {\n         ArrayList<ArrayList<String>> parsedComponents = new ArrayList<ArrayList<String>>();\n+        ArrayList<ArrayList<Object>> chainComponents = new ArrayList<>();\n+\n+        StringBuilder componentFailureString = new StringBuilder();\n         if (pc.getComponentIdentifiers() != null\n                 && pc.getComponentIdentifiers().size() > 0) {\n-            LOGGER.info(\"Component failures: \" + pc.getComponentFailures());\n-            ArrayList<String> componentFailures =\n-                    new ArrayList<String>(Arrays.asList(pc.getComponentFailures().split(\";\")));\n+            componentFailureString.append(pc.getComponentFailures());\n+            // get all the certificates associated with the platform serial\n+            List<PlatformCredential> chainCertificates = PlatformCredential\n+                    .select(certificateManager)\n+                    .byBoardSerialNumber(pc.getPlatformSerial())\n+                    .getCertificates().stream().collect(Collectors.toList());\n+            // combine all components in each certificate\n             for (ComponentIdentifier ci : pc.getComponentIdentifiers()) {\n+                ArrayList<Object> issuerAndComponent = new ArrayList<Object>();\n+                issuerAndComponent.add(pc.getIssuer());\n+                issuerAndComponent.add(ci);\n+                chainComponents.add(issuerAndComponent);\n+            }\n+\n+            for (PlatformCredential cert : chainCertificates) {\n+                componentFailureString.append(cert.getComponentFailures());\n+                if (!cert.isBase()) {\n+                    for (ComponentIdentifier ci : cert.getComponentIdentifiers()) {\n+                        ArrayList<Object> issuerAndComponent = new ArrayList<Object>();\n+                        issuerAndComponent.add(cert.getIssuer());\n+                        issuerAndComponent.add(ci);\n+                        chainComponents.add(issuerAndComponent);\n+                    }\n+                }\n+            }\n+            LOGGER.info(\"Component failures: \" + componentFailureString.toString());\n+            for (ArrayList<Object> issuerAndComponent : chainComponents) {\n                 ArrayList<String> componentData = new ArrayList<String>();\n+                String issuer = (String) issuerAndComponent.get(0);\n+                issuer = issuer.replaceAll(\",\", \" \");\n+                ComponentIdentifier ci = (ComponentIdentifier) issuerAndComponent.get(1);\n                 if (ci instanceof ComponentIdentifierV2) {\n                     componentData.add(((ComponentIdentifierV2) ci).getComponentClass().toString());\n                 } else {\n@@ -274,8 +310,9 @@ public void download(final HttpServletRequest request,\n                 componentData.add(ci.getComponentManufacturer().getString());\n                 componentData.add(ci.getComponentModel().getString());\n                 componentData.add(ci.getComponentSerial().getString());\n-                //Failing components are identified by manufacturer + model\n-                if (componentFailures.contains(componentData.get(1) + componentData.get(2))) {\n+                componentData.add(issuer);\n+                //Failing components are identified by hashcode\n+                if (componentFailureString.toString().contains(String.valueOf(ci.hashCode()))) {\n                     componentData.add(\"Fail\");\n                 } else {\n                     componentData.add(\"Pass\");"
  },
  {
    "sha": "c67fdac398306b5b3d5542d9f337a8eb0b134646",
    "filename": "scripts/download_validation_reports.sh",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/nsacyber/HIRS/blob/175d2238d29be060fcbc15bb991c52806fdabd85/scripts/download_validation_reports.sh",
    "raw_url": "https://github.com/nsacyber/HIRS/raw/175d2238d29be060fcbc15bb991c52806fdabd85/scripts/download_validation_reports.sh",
    "contents_url": "https://api.github.com/repos/nsacyber/HIRS/contents/scripts/download_validation_reports.sh?ref=175d2238d29be060fcbc15bb991c52806fdabd85",
    "patch": "@@ -0,0 +1,26 @@\n+#!/bin/bash\n+\n+#User input parameters:\n+#$1 filter start date 'yyyy-mm-dd'\n+#$2 filter end date 'yyyy-mm-dd'\n+#$3 ACA address, default is localhost if not given\n+\n+if [ -z \"$3\" ]\n+ then\n+  endpoint=\"https://localhost:8443/HIRS_AttestationCAPortal/portal/validation-reports\"\n+ else\n+  endpoint=\"https://$3:8443/HIRS_AttestationCAPortal/portal/validation-reports\"\n+fi\n+echo \"$endpoint\"\n+content=$(curl --insecure $endpoint/list)\n+rawTimes=$(jq -r '.data | map(.createTime | tostring) | join(\",\")' <<< \"$content\")\n+createTimes=\"\"\n+for i in ${rawTimes//,/ }\n+do\n+\tcreateTimes+=\"$(date -u +\"%Y-%m-%d %H:%M:%S\" -d @\"$(($i/1000))\"),\"\n+done\n+deviceNames=$(jq -r '.data | map(.device.name) | join(\",\")' <<< \"$content\")\n+echo \"Create times: $createTimes\"\n+echo \"Device names: $deviceNames\"\n+curl --data \"dateStart=$1&dateEnd=$2&createTimes=$createTimes&deviceNames=$deviceNames\" --insecure $endpoint/download\n+"
  }
]
