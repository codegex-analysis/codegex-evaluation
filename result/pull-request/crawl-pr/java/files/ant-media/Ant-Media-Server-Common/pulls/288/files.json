[
  {
    "sha": "0fe082f7ddfcb1408de4438f2ab02a1e2e4e769d",
    "filename": "src/main/java/io/antmedia/muxer/HLSMuxer.java",
    "status": "modified",
    "additions": 82,
    "deletions": 2,
    "changes": 84,
    "blob_url": "https://github.com/ant-media/Ant-Media-Server-Common/blob/f72312038576feb95523e2918edff4dfc10fdf01/src/main/java/io/antmedia/muxer/HLSMuxer.java",
    "raw_url": "https://github.com/ant-media/Ant-Media-Server-Common/raw/f72312038576feb95523e2918edff4dfc10fdf01/src/main/java/io/antmedia/muxer/HLSMuxer.java",
    "contents_url": "https://api.github.com/repos/ant-media/Ant-Media-Server-Common/contents/src/main/java/io/antmedia/muxer/HLSMuxer.java?ref=f72312038576feb95523e2918edff4dfc10fdf01",
    "patch": "@@ -67,6 +67,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.antmedia.storage.StorageClient;\n+import io.antmedia.storage.StorageClient.FileType;\n import io.vertx.core.Vertx;\n \n \n@@ -98,13 +100,17 @@\n \tprivate int audioIndex;\n \tprivate int videoIndex;\n \tprivate String hlsFlags;\n+\tprivate String streamId;\n \t\n \tprivate Map<Integer, AVRational> codecTimeBaseMap = new HashMap<>();\n \tprivate AVPacket videoPkt;\n+\tprotected StorageClient storageClient = null;\n+\tprivate String subFolder = null;\n \n \n-\tpublic HLSMuxer(Vertx vertx, String hlsListSize, String hlsTime, String hlsPlayListType, String hlsFlags) {\n+\tpublic HLSMuxer(Vertx vertx, StorageClient storageClient, String hlsListSize, String hlsTime, String hlsPlayListType, String hlsFlags) {\n \t\tsuper(vertx);\n+\t\tthis.storageClient = storageClient;\n \t\textension = \".m3u8\";\n \t\tformat = \"hls\";\n \n@@ -139,6 +145,8 @@ public HLSMuxer(Vertx vertx, String hlsListSize, String hlsTime, String hlsPlayL\n \tpublic void init(IScope scope, String name, int resolutionHeight) {\n \t\tif (!isInitialized) {\n \t\t\tsuper.init(scope, name, resolutionHeight);\n+\t\t\t\n+\t\t\tstreamId = name;\n \n \t\t\toptions.put(\"hls_list_size\", hlsListSize);\n \t\t\toptions.put(\"hls_time\", hlsTime);\n@@ -374,8 +382,80 @@ public boolean accept(File dir, String name) {\n \t\t\t\t}\n \t\t\t});\n \t\t}\n-\n+\t\t\n \t\tisRecording = false;\t\n+\t\t\n+\t\tif (vertx != null && storageClient != null && !deleteFileOnExit) {\n+\t\t\tlogger.info(\"Storage client is available saving {} to storage\", file.getName());\n+\t\t\tvertx.setTimer(Integer.parseInt(hlsTime) * Integer.parseInt(hlsListSize) * 1000, l -> {\n+\t\t\t\t\n+\t\t\t\tvertx.executeBlocking(r->{\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tlogger.info(\"Uploading HLS files on exit\");\n+\n+\t\t\t\t\t\tString streamIdWithExtension = streamId + \".m3u8\";\n+\t\t\t\t\t\tString streamIdWithAdaptive = streamId + \"_adaptive.m3u8\";\n+\t\t\t\t\t\tString streamFolderName = streamId;\n+\t\t\t\t\t\tString tmpStreamName = streamId;\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif(subFolder != null) {\n+\t\t\t\t\t\t\tstreamFolderName = subFolder;\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tif (storageClient.fileExist(FileType.TYPE_STREAM.getValue() +\"/\" + streamFolderName + \"/\" + streamIdWithExtension ) || storageClient.fileExist(FileType.TYPE_STREAM.getValue() + \"/\" + streamFolderName + \"/\" + streamIdWithAdaptive)  ) { \n+\t\t\t\t\t\t\tint i = 0;\n+\t\t\t\t\t\t\tdo {\t\n+\t\t\t\t\t\t\t\ti++;\n+\t\t\t\t\t\t\t\tstreamFolderName = tmpStreamName.concat(\"_\"+ i);\n+\t\t\t\t\t\t\t} while (storageClient.fileExist(FileType.TYPE_STREAM.getValue() + \"/\" + streamFolderName  + \"/\"  + streamIdWithExtension) || storageClient.fileExist(FileType.TYPE_STREAM.getValue() + \"/\" + streamFolderName + \"/\" + streamIdWithAdaptive));\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tString streamIdwithResolution = file.getName().substring(0, file.getName().lastIndexOf(extension));\n+\n+\t\t\t\t\t\t//It's necessarry for RTMP ingest\n+\t\t\t\t\t\tif( file.getName().substring(0, file.getName().lastIndexOf(extension)).equals(streamId)) {\n+\t\t\t\t\t\t\tstreamIdwithResolution= streamIdwithResolution+\"_0p\";\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tfinal String filenameWithoutExtension = streamIdwithResolution;\n+\n+\t\t\t\t\t\tFile[] files  = file.getParentFile().listFiles(new FilenameFilter() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean accept(File dir, String name) {\n+\t\t\t\t\t\t\t\treturn name.contains(filenameWithoutExtension) && name.endsWith(\".ts\"); \n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\n+\t\t\t\t\t\tif (files != null)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tfor (int i = 0; i < files.length; i++) {\n+\t\t\t\t\t\t\t\tif (!files[i].exists()) {\n+\t\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tsaveToStorage(files[i],streamFolderName);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tif (file.exists() ) { \n+\t\t\t\t\t\t\tsaveToStorage(file,streamFolderName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\tlogger.error(e.getMessage());\n+\t\t\t\t\t}\n+\t\t\t\t}, r->{});\n+\n+\t\t\t});\n+\t\t\t\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\tpublic void saveToStorage(File fileToUpload, String streamFolderName) {\n+\t\t// Check file exist in S3 and change file names. In this way, new file is created after the file name changed.\n+\t\tvertx.setTimer(1000, l3 -> {\n+\t\t\tstorageClient.save(FileType.TYPE_STREAM.getValue() + \"/\"+streamFolderName+\"/\" + fileToUpload.getName(), fileToUpload);\n+\t\t});\n \t}\n \n "
  },
  {
    "sha": "56c98b14bcf63678863dc463a530cd3418d47391",
    "filename": "src/main/java/io/antmedia/muxer/MuxAdaptor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ant-media/Ant-Media-Server-Common/blob/f72312038576feb95523e2918edff4dfc10fdf01/src/main/java/io/antmedia/muxer/MuxAdaptor.java",
    "raw_url": "https://github.com/ant-media/Ant-Media-Server-Common/raw/f72312038576feb95523e2918edff4dfc10fdf01/src/main/java/io/antmedia/muxer/MuxAdaptor.java",
    "contents_url": "https://api.github.com/repos/ant-media/Ant-Media-Server-Common/contents/src/main/java/io/antmedia/muxer/MuxAdaptor.java?ref=f72312038576feb95523e2918edff4dfc10fdf01",
    "patch": "@@ -344,7 +344,7 @@ public boolean init(IScope scope, String streamId, boolean isAppend) {\n \t\t}\n \t\t\n \t\tif (hlsMuxingEnabled) {\n-\t\t\tHLSMuxer hlsMuxer = new HLSMuxer(vertx, hlsListSize, hlsTime, hlsPlayListType, getAppSettings().getHlsFlags());\n+\t\t\tHLSMuxer hlsMuxer = new HLSMuxer(vertx, storageClient, hlsListSize, hlsTime, hlsPlayListType, getAppSettings().getHlsFlags());\n \t\t\thlsMuxer.setDeleteFileOnExit(deleteHLSFilesOnExit);\n \t\t\taddMuxer(hlsMuxer);\n \t\t\tlogger.info(\"adding HLS Muxer for {}\", streamId);"
  },
  {
    "sha": "7a8aa22baf878cb3dc4dd78124f99c94bc84958f",
    "filename": "src/main/java/io/antmedia/muxer/RecordMuxer.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/ant-media/Ant-Media-Server-Common/blob/f72312038576feb95523e2918edff4dfc10fdf01/src/main/java/io/antmedia/muxer/RecordMuxer.java",
    "raw_url": "https://github.com/ant-media/Ant-Media-Server-Common/raw/f72312038576feb95523e2918edff4dfc10fdf01/src/main/java/io/antmedia/muxer/RecordMuxer.java",
    "contents_url": "https://api.github.com/repos/ant-media/Ant-Media-Server-Common/contents/src/main/java/io/antmedia/muxer/RecordMuxer.java?ref=f72312038576feb95523e2918edff4dfc10fdf01",
    "patch": "@@ -65,6 +65,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n \n+import io.antmedia.datastore.db.types.Broadcast;\n import io.antmedia.storage.StorageClient;\n import io.antmedia.storage.StorageClient.FileType;\n import io.vertx.core.Vertx;\n@@ -86,6 +87,8 @@\n \n \tprotected AVPacket videoPkt;\n \tprotected int rotation;\n+\t\n+\tprivate String subFolder = null;\n \n \t/**\n \t * By default first video key frame should be checked\n@@ -102,7 +105,7 @@\n \tprotected boolean dynamic = false;\n \n \n-\tpublic RecordMuxer(StorageClient storageClient, Vertx vertx) {\n+\tpublic RecordMuxer(StorageClient storageClient, Vertx vertx ) {\n \t\tsuper(vertx);\n \t\tthis.storageClient = storageClient;\n \t}\n@@ -456,19 +459,23 @@ public void saveToStorage(File fileToUpload) {\n \t\tvertx.setTimer(1000, l2 -> {\n \t\t\t// Check file exist in S3 and change file names. In this way, new file is created after the file name changed.\n \n+\t\t\tif(subFolder != null) {\n+\t\t\t\tsubFolder= \"/\"+subFolder;\n+\t\t\t}\n+\t\t\t\n \t\t\tString fileName = getFile().getName();\n-\t\t\tif (storageClient.fileExist(FileType.TYPE_STREAM.getValue() + \"/\" + fileName)) {\n+\t\t\tif (storageClient.fileExist(FileType.TYPE_STREAM.getValue() + subFolder + \"/\" + fileName)) {\n \n \t\t\t\tString tmpName =  fileName;\n \n \t\t\t\tint i = 0;\n \t\t\t\tdo {\n \t\t\t\t\ti++;\n \t\t\t\t\tfileName = tmpName.replace(\".\", \"_\"+ i +\".\");\n-\t\t\t\t} while (storageClient.fileExist(FileType.TYPE_STREAM.getValue() + \"/\" + fileName));\n+\t\t\t\t} while (storageClient.fileExist(FileType.TYPE_STREAM.getValue() + subFolder + \"/\" + fileName));\n \t\t\t}\n \n-\t\t\tstorageClient.save(FileType.TYPE_STREAM.getValue() + \"/\" + fileName, fileToUpload);\n+\t\t\tstorageClient.save(FileType.TYPE_STREAM.getValue()  + subFolder + \"/\" + fileName, fileToUpload);\n \t\t});\n \t}\n "
  }
]
