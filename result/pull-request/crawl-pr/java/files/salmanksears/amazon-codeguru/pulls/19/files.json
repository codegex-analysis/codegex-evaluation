[
  {
    "sha": "091b240bf4fc63fc99ca0acf8e2c3ec2dd6bb707",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/salmanksears/amazon-codeguru/blob/a770c2632bfa84136ce00512096b0fd10ed7880c/pom.xml",
    "raw_url": "https://github.com/salmanksears/amazon-codeguru/raw/a770c2632bfa84136ce00512096b0fd10ed7880c/pom.xml",
    "contents_url": "https://api.github.com/repos/salmanksears/amazon-codeguru/contents/pom.xml?ref=a770c2632bfa84136ce00512096b0fd10ed7880c",
    "patch": "@@ -22,7 +22,8 @@\n   \t<dependency>\n   \t\t<groupId>com.amazonaws</groupId>\n   \t\t<artifactId>aws-java-sdk-s3</artifactId>\n-  \t\t<version>1.11.624</version>\n+  \t\t<!-- <version>1.11.624</version> -->\n+\t\t<version>1.11.974</version>\n   \t</dependency>\n   \t<dependency>\n   \t\t<groupId>org.apache.commons</groupId>\n@@ -39,4 +40,4 @@\n   \t\t</plugin>\n   \t</plugins>\n   </build>\n-</project>\n\\ No newline at end of file\n+</project>"
  },
  {
    "sha": "8d983e58ccc5dffc3a670942a0cd3248de3d5441",
    "filename": "src/main/java/com/shipmentEvents/demo/EventHandler.java",
    "status": "removed",
    "additions": 0,
    "deletions": 174,
    "changes": 174,
    "blob_url": "https://github.com/salmanksears/amazon-codeguru/blob/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/EventHandler.java",
    "raw_url": "https://github.com/salmanksears/amazon-codeguru/raw/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/EventHandler.java",
    "contents_url": "https://api.github.com/repos/salmanksears/amazon-codeguru/contents/src/main/java/com/shipmentEvents/demo/EventHandler.java?ref=e5e0f2c60f25765351992ca06d89319614eab959",
    "patch": "@@ -1,174 +0,0 @@\n-package com.shipmentEvents.handlers;\n-\n-import java.time.Duration;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-import com.amazonaws.regions.Regions;\n-import com.amazonaws.services.lambda.runtime.Context;\n-import com.amazonaws.services.lambda.runtime.RequestHandler;\n-import com.amazonaws.services.lambda.runtime.LambdaLogger;\n-import com.amazonaws.services.lambda.runtime.events.ScheduledEvent;\n-import com.amazonaws.services.s3.AmazonS3;\n-import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n-import com.amazonaws.services.s3.model.DeleteObjectsRequest;\n-import com.amazonaws.services.s3.model.DeleteObjectsRequest.KeyVersion;\n-import com.amazonaws.services.s3.model.ObjectListing;\n-import com.amazonaws.services.s3.model.S3ObjectSummary;\n-import com.shipmentEvents.util.Constants;\n-\n-import org.apache.commons.lang3.tuple.MutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n-\n-\n-public class EventHandler implements RequestHandler<ScheduledEvent, String> {\n-\n-    /**\n-     * Shipment events for a carrier are uploaded to separate S3 buckets based on the source of events. E.g., events originating from\n-     * the hand-held scanner are stored in a separate bucket than the ones from mobile App. The Lambda processes events from multiple\n-     * sources and updates the latest status of the package in a summary S3 bucket every 15 minutes.\n-     * \n-     * The events are stored in following format:\n-     * - Each status update is a file, where the name of the file is tracking number + random id.\n-     * - Each file has status and time-stamp as the first 2 lines respectively.\n-     * - The time at which the file is stored in S3 is not an indication of the time-stamp of the event.\n-     * - Once the status is marked as DELIVERED, we can stop tracking the package.\n-     * \n-     * A Sample files looks as below:\n-     *  FILE-NAME-> '8787323232232332--55322798-dd29-4a04-97f4-93e18feed554'\n-     *   >status:IN TRANSIT\n-     *   >timestamp: 1573410202\n-     *   >Other fields like...tracking history and address\n-     */\n-    public String handleRequest(ScheduledEvent scheduledEvent, Context context) {\n-\n-        final LambdaLogger logger = context.getLogger();\n-        try {\n-            processShipmentUpdates(logger);\n-            return \"SUCCESS\";\n-        } catch (final Exception ex) {\n-            logger.log(String.format(\"Failed to process shipment Updates in %s due to %s\", scheduledEvent.getAccount(), ex.getMessage()));\n-            throw new RuntimeException(ex);\n-        }\n-    }\n-\n-\n-    private void processShipmentUpdates(final LambdaLogger logger) throws InterruptedException {\n-\n-        final List<String> bucketsToProcess = Constants.BUCKETS_TO_PROCESS;\n-        final Map<String, Pair<Long, String>> latestStatusForTrackingNumber = new HashMap<String, Pair<Long, String>>();\n-        final Map<String, List<KeyVersion>> filesToDelete = new HashMap<String, List<DeleteObjectsRequest.KeyVersion>>(); \n-        for (final String bucketName : bucketsToProcess) {\n-            final List<KeyVersion> filesProcessed = processEventsInBucket(bucketName, logger, latestStatusForTrackingNumber);\n-            filesToDelete.put(bucketName, filesProcessed);\n-        }\n-        final AmazonS3 s3Client = EventHandler.getS3Client();\n-\n-        //Create a new file in the Constants.SUMMARY_BUCKET\n-        logger.log(\"Map of statuses -> \" + latestStatusForTrackingNumber);\n-        String summaryUpdateName = Long.toString(System.currentTimeMillis());\n-        \n-        EventHandler.getS3Client().putObject(Constants.SUMMARY_BUCKET, summaryUpdateName, latestStatusForTrackingNumber.toString());\n-        \n-        long expirationTime = System.currentTimeMillis() + Duration.ofMinutes(1).toMillis();\n-        while(System.currentTimeMillis() < expirationTime) {\n-            if (s3Client.doesObjectExist(Constants.SUMMARY_BUCKET, summaryUpdateName)) {\n-                break;\n-            }\n-            logger.log(\"waiting for file to be created \" + summaryUpdateName);\n-            Thread.sleep(1000);\n-        }\n-        \n-        // Before we delete the shipment updates make sure the summary update file exists\n-        if (EventHandler.getS3Client().doesObjectExist(Constants.SUMMARY_BUCKET, summaryUpdateName)) {\n-            deleteProcessedFiles(filesToDelete);\n-            logger.log(\"All updates successfully processed\");\n-        } else {\n-            throw new RuntimeException(\"Failed to write summary status, will be retried in 15 minutes\");\n-        }\n-        \n-    }\n-\n-    private List<KeyVersion> processEventsInBucket(String bucketName, LambdaLogger logger, Map<String, Pair<Long, String>> latestStatusForTrackingNumber) {\n-        final AmazonS3 s3Client = EventHandler.getS3Client();\n-        logger.log(\"Processing Bucket: \" + bucketName);\n-\n-        ObjectListing files = s3Client.listObjects(bucketName);\n-        List<KeyVersion> filesProcessed = new ArrayList<DeleteObjectsRequest.KeyVersion>();\n-\n-        for (Iterator<?> iterator = files.getObjectSummaries().iterator(); iterator.hasNext(); ) {\n-            S3ObjectSummary summary = (S3ObjectSummary) iterator.next();\n-            logger.log(\"Reading Object: \" + summary.getKey());\n-\n-            String trackingNumber = summary.getKey().split(\"--\")[0];\n-            Pair<Long, String> lastKnownStatus = latestStatusForTrackingNumber.get(trackingNumber);\n-\n-            // Check if this shipment has already been delivered, skip this file\n-            if (lastKnownStatus != null && \"DELIVERED\".equals(lastKnownStatus.getRight())) {\n-                continue;\n-            }\n-\n-            String fileContents = s3Client.getObjectAsString(bucketName, summary.getKey());\n-\n-            if (!isValidFile(fileContents)) {\n-                logger.log(String.format(\"Skipping invalid file %s\", summary.getKey()));\n-                continue;\n-            }\n-            \n-            if (!fileContents.contains(\"\\n\")) {\n-                \n-            }\n-            String[] lines = fileContents.split(\"\\n\");\n-            String line1 = lines[0];\n-            String line2 = lines[1];\n-\n-            String status = line1.split(\":\")[1];\n-            Long timeStamp = Long.parseLong(line2.split(\":\")[1]);\n-\n-\n-            if (null == lastKnownStatus || lastKnownStatus.getLeft() < timeStamp) {\n-                lastKnownStatus = new MutablePair<Long, String>(timeStamp, status);\n-                latestStatusForTrackingNumber.put(trackingNumber, lastKnownStatus);\n-            }\n-\n-            //Add to list of processed files\n-            filesProcessed.add(new KeyVersion(summary.getKey()));\n-            logger.log(\"logging Contents of the file\" + fileContents);\n-        }\n-        return filesProcessed;\n-    }\n-    \n-\n-    private void deleteProcessedFiles(Map<String, List<KeyVersion>> filesToDelete) {\n-      final AmazonS3 s3Client = EventHandler.getS3Client();\n-      for (Entry<String, List<KeyVersion>> entry : filesToDelete.entrySet()) {\n-          final DeleteObjectsRequest deleteRequest = new DeleteObjectsRequest(entry.getKey()).withKeys(entry.getValue()).withQuiet(false);\n-          s3Client.deleteObjects(deleteRequest);\n-      }\n-    }\n-    \n-    private boolean isValidFile(String fileContents) {\n-        if (!fileContents.contains(\"\\n\")) {\n-            return false;\n-        }\n-        String[] lines = fileContents.split(\"\\n\");\n-        for (String l: lines) {\n-            if (!l.contains(\":\")) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-    \n-    public static AmazonS3 getS3Client() {\n-        return AmazonS3ClientBuilder.standard().withRegion(Regions.DEFAULT_REGION).build();\n-    }\n-    \n-    \n-}\n-\n-"
  },
  {
    "sha": "11505b7a0bdab011c06df4795f1d5be2d034433e",
    "filename": "src/main/java/com/shipmentEvents/demo/aws.java",
    "status": "removed",
    "additions": 0,
    "deletions": 172,
    "changes": 172,
    "blob_url": "https://github.com/salmanksears/amazon-codeguru/blob/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/aws.java",
    "raw_url": "https://github.com/salmanksears/amazon-codeguru/raw/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/aws.java",
    "contents_url": "https://api.github.com/repos/salmanksears/amazon-codeguru/contents/src/main/java/com/shipmentEvents/demo/aws.java?ref=e5e0f2c60f25765351992ca06d89319614eab959",
    "patch": "@@ -1,172 +0,0 @@\n-package com.shipmentEvents.handlers;\n-\n-import java.time.Duration;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-import com.amazonaws.regions.Regions;\n-import com.amazonaws.services.lambda.runtime.Context;\n-import com.amazonaws.services.lambda.runtime.RequestHandler;\n-import com.amazonaws.services.lambda.runtime.LambdaLogger;\n-import com.amazonaws.services.lambda.runtime.events.ScheduledEvent;\n-import com.amazonaws.services.s3.AmazonS3;\n-import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n-import com.amazonaws.services.s3.model.DeleteObjectsRequest;\n-import com.amazonaws.services.s3.model.DeleteObjectsRequest.KeyVersion;\n-import com.amazonaws.services.s3.model.ObjectListing;\n-import com.amazonaws.services.s3.model.S3ObjectSummary;\n-import com.shipmentEvents.util.Constants;\n-\n-import org.apache.commons.lang3.tuple.MutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n-\n-\n-public class EventHandler implements RequestHandler<ScheduledEvent, String> {\n-\n-    /**\n-     * Shipment events for a carrier are uploaded to separate S3 buckets based on the source of events. E.g., events originating from\n-     * the hand-held scanner are stored in a separate bucket than the ones from mobile App. The Lambda processes events from multiple\n-     * sources and updates the latest status of the package in a summary S3 bucket every 15 minutes.\n-     * \n-     * The events are stored in following format:\n-     * - Each status update is a file, where the name of the file is tracking number + random id.\n-     * - Each file has status and time-stamp as the first 2 lines respectively.\n-     * - The time at which the file is stored in S3 is not an indication of the time-stamp of the event.\n-     * - Once the status is marked as DELIVERED, we can stop tracking the package.\n-     * \n-     * A Sample files looks as below:\n-     *  FILE-NAME-> '8787323232232332--55322798-dd29-4a04-97f4-93e18feed554'\n-     *   >status:IN TRANSIT\n-     *   >timestamp: 1573410202\n-     *   >Other fields like...tracking history and address\n-     */\n-    public String handleRequest(ScheduledEvent scheduledEvent, Context context) {\n-\n-        final LambdaLogger logger = context.getLogger();\n-        try {\n-            processShipmentUpdates(logger);\n-            return \"SUCCESS\";\n-        } catch (final Exception ex) {\n-            logger.log(String.format(\"Failed to process shipment Updates in %s due to %s\", scheduledEvent.getAccount(), ex.getMessage()));\n-            throw new RuntimeException(ex);\n-        }\n-    }\n-\n-\n-    private void processShipmentUpdates(final LambdaLogger logger) throws InterruptedException {\n-\n-        final List<String> bucketsToProcess = Constants.BUCKETS_TO_PROCESS;\n-        final Map<String, Pair<Long, String>> latestStatusForTrackingNumber = new HashMap<String, Pair<Long, String>>();\n-        final Map<String, List<KeyVersion>> filesToDelete = new HashMap<String, List<DeleteObjectsRequest.KeyVersion>>(); \n-        for (final String bucketName : bucketsToProcess) {\n-            final List<KeyVersion> filesProcessed = processEventsInBucket(bucketName, logger, latestStatusForTrackingNumber);\n-            filesToDelete.put(bucketName, filesProcessed);\n-        }\n-        final AmazonS3 s3Client = EventHandler.getS3Client();\n-\n-        //Create a new file in the Constants.SUMMARY_BUCKET\n-        logger.log(\"Map of statuses -> \" + latestStatusForTrackingNumber);\n-        String summaryUpdateName = Long.toString(System.currentTimeMillis());\n-        \n-        EventHandler.getS3Client().putObject(Constants.SUMMARY_BUCKET, summaryUpdateName, latestStatusForTrackingNumber.toString());\n-        \n-        long expirationTime = System.currentTimeMillis() + Duration.ofMinutes(1).toMillis();\n-        while(System.currentTimeMillis() < expirationTime) {\n-            if (s3Client.doesObjectExist(Constants.SUMMARY_BUCKET, summaryUpdateName)) {\n-                break;\n-            }\n-            logger.log(\"waiting for file to be created \" + summaryUpdateName);\n-            Thread.sleep(1000);\n-        }\n-        \n-        // Before we delete the shipment updates make sure the summary update file exists\n-        if (EventHandler.getS3Client().doesObjectExist(Constants.SUMMARY_BUCKET, summaryUpdateName)) {\n-            deleteProcessedFiles(filesToDelete);\n-            logger.log(\"All updates successfully processed\");\n-        } else {\n-            throw new RuntimeException(\"Failed to write summary status, will be retried in 15 minutes\");\n-        }\n-        \n-    }\n-\n-    private List<KeyVersion> processEventsInBucket(String bucketName, LambdaLogger logger, Map<String, Pair<Long, String>> latestStatusForTrackingNumber) {\n-        final AmazonS3 s3Client = EventHandler.getS3Client();\n-        logger.log(\"Processing Bucket: \" + bucketName);\n-\n-        ObjectListing files = s3Client.listObjects(bucketName);\n-        List<KeyVersion> filesProcessed = new ArrayList<DeleteObjectsRequest.KeyVersion>();\n-\n-        for (Iterator<?> iterator = files.getObjectSummaries().iterator(); iterator.hasNext(); ) {\n-            S3ObjectSummary summary = (S3ObjectSummary) iterator.next();\n-            logger.log(\"Reading Object: \" + summary.getKey());\n-\n-            String trackingNumber = summary.getKey().split(\"--\")[0];\n-            Pair<Long, String> lastKnownStatus = latestStatusForTrackingNumber.get(trackingNumber);\n-\n-            // Check if this shipment has already been delivered, skip this file\n-            if (lastKnownStatus != null && \"DELIVERED\".equals(lastKnownStatus.getRight())) {\n-                continue;\n-            }\n-\n-            String fileContents = s3Client.getObjectAsString(bucketName, summary.getKey());\n-\n-            if (!isValidFile(fileContents)) {\n-                logger.log(String.format(\"Skipping invalid file %s\", summary.getKey()));\n-                continue;\n-            }\n-            \n-            if (!fileContents.contains(\"\\n\")) {\n-                \n-            }\n-            String[] lines = fileContents.split(\"\\n\");\n-            String line1 = lines[0];\n-            String line2 = lines[1];\n-\n-            String status = line1.split(\":\")[1];\n-            Long timeStamp = Long.parseLong(line2.split(\":\")[1]);\n-\n-\n-            if (null == lastKnownStatus || lastKnownStatus.getLeft() < timeStamp) {\n-                lastKnownStatus = new MutablePair<Long, String>(timeStamp, status);\n-                latestStatusForTrackingNumber.put(trackingNumber, lastKnownStatus);\n-            }\n-\n-            //Add to list of processed files\n-            filesProcessed.add(new KeyVersion(summary.getKey()));\n-            logger.log(\"logging Contents of the file\" + fileContents);\n-        }\n-        return filesProcessed;\n-    }\n-    \n-\n-    private void deleteProcessedFiles(Map<String, List<KeyVersion>> filesToDelete) {\n-      final AmazonS3 s3Client = EventHandler.getS3Client();\n-      for (Entry<String, List<KeyVersion>> entry : filesToDelete.entrySet()) {\n-          final DeleteObjectsRequest deleteRequest = new DeleteObjectsRequest(entry.getKey()).withKeys(entry.getValue()).withQuiet(false);\n-          s3Client.deleteObjects(deleteRequest);\n-      }\n-    }\n-    \n-    private boolean isValidFile(String fileContents) {\n-        if (!fileContents.contains(\"\\n\")) {\n-            return false;\n-        }\n-        String[] lines = fileContents.split(\"\\n\");\n-        for (String l: lines) {\n-            if (!l.contains(\":\")) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-    \n-    public static AmazonS3 getS3Client() {\n-        return AmazonS3ClientBuilder.standard().withRegion(Regions.DEFAULT_REGION).build();\n-    }\n-    \n-    \n-}"
  },
  {
    "sha": "d1fe3f2d29cd39f5598aab6d55eeb3b695e9a9b3",
    "filename": "src/main/java/com/shipmentEvents/demo/new.java",
    "status": "removed",
    "additions": 0,
    "deletions": 61,
    "changes": 61,
    "blob_url": "https://github.com/salmanksears/amazon-codeguru/blob/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/new.java",
    "raw_url": "https://github.com/salmanksears/amazon-codeguru/raw/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/new.java",
    "contents_url": "https://api.github.com/repos/salmanksears/amazon-codeguru/contents/src/main/java/com/shipmentEvents/demo/new.java?ref=e5e0f2c60f25765351992ca06d89319614eab959",
    "patch": "@@ -1,61 +0,0 @@\n-package com.searshc.hspartcatalog.adapter;\n-\n-import java.io.UnsupportedEncodingException;\n-import java.net.URLDecoder;\n-\n-import org.apache.solr.client.solrj.SolrQuery;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class SolrServiceItemSearchAdapter {\n-\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(SolrServiceItemSearchAdapter.class);\n-\t\n-\t@Value(\"${model.similarity.factor}\")\n-\tprivate String modelSimilarityFactor;\n-\t\n-\tpublic SolrQuery prepareSearchModelFuzzyQuery(String modelNo){\n-\t\tString formattedModelNo = modelNo.replaceAll(\"[^A-Za-z0-9]\", \"\"); // TODO - move to utility\n-\t\t\n-\t\tSolrQuery query = new SolrQuery();\n-\t\tString queryStr = String.format(\"formattedModelNo:%s~%s\", formattedModelNo, modelSimilarityFactor);    \n-\t\tquery.setQuery(queryStr);\n-\t\tquery.setStart(0);\n-\t\tquery.setRows(1500); //TODO - fetch from request other wise properties file.\n-\t\t\n-\t\tqueryLogger(query);\n-\t\t\n-\t\treturn query;\n-\t}\n-\t\n-\t\n-\t\n-\t\n-\tpublic SolrQuery prepareSearchItemModelJoinSchematicQuery(String formattedModelNo){\n-\t\tSolrQuery query = new SolrQuery();\n-\t\tString queryStr = String.format(\"{!join from=modelSchematics to=itemSchematics}formattedModelNo:%s\", formattedModelNo.replaceAll(\"[^A-Za-z0-9]\", \"\"));\n-\t\tquery.setQuery(queryStr);\n-\t\tquery.setStart(0);\n-\t\tquery.setRows(1500); //TODO - fetch from request other wise properties file.\n-\t\t\n-\t\tqueryLogger(query);\n-\t\t\n-\t\treturn query;\n-\t}\n-\t\n-\t\n-\tprivate static void queryLogger(SolrQuery query){\n-\t\tString str = query.toString();\n-\t\ttry {\n-\t\t\tstr = URLDecoder.decode(str, \"UTF-8\");\n-\t\t}\n-\t\tcatch(UnsupportedEncodingException usee) {\n-\t\t\tLOGGER.error(\"UnsupportedEncodingException >>> {}\", usee.getMessage());\n-\t\t}\n-\t\t\n-\t\tLOGGER.debug(\"SOLR query --> {}\", str);\n-\t}\n-}"
  },
  {
    "sha": "8d983e58ccc5dffc3a670942a0cd3248de3d5441",
    "filename": "src/main/java/com/shipmentEvents/demo/test.java",
    "status": "removed",
    "additions": 0,
    "deletions": 174,
    "changes": 174,
    "blob_url": "https://github.com/salmanksears/amazon-codeguru/blob/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/test.java",
    "raw_url": "https://github.com/salmanksears/amazon-codeguru/raw/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/test.java",
    "contents_url": "https://api.github.com/repos/salmanksears/amazon-codeguru/contents/src/main/java/com/shipmentEvents/demo/test.java?ref=e5e0f2c60f25765351992ca06d89319614eab959",
    "patch": "@@ -1,174 +0,0 @@\n-package com.shipmentEvents.handlers;\n-\n-import java.time.Duration;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-import com.amazonaws.regions.Regions;\n-import com.amazonaws.services.lambda.runtime.Context;\n-import com.amazonaws.services.lambda.runtime.RequestHandler;\n-import com.amazonaws.services.lambda.runtime.LambdaLogger;\n-import com.amazonaws.services.lambda.runtime.events.ScheduledEvent;\n-import com.amazonaws.services.s3.AmazonS3;\n-import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n-import com.amazonaws.services.s3.model.DeleteObjectsRequest;\n-import com.amazonaws.services.s3.model.DeleteObjectsRequest.KeyVersion;\n-import com.amazonaws.services.s3.model.ObjectListing;\n-import com.amazonaws.services.s3.model.S3ObjectSummary;\n-import com.shipmentEvents.util.Constants;\n-\n-import org.apache.commons.lang3.tuple.MutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n-\n-\n-public class EventHandler implements RequestHandler<ScheduledEvent, String> {\n-\n-    /**\n-     * Shipment events for a carrier are uploaded to separate S3 buckets based on the source of events. E.g., events originating from\n-     * the hand-held scanner are stored in a separate bucket than the ones from mobile App. The Lambda processes events from multiple\n-     * sources and updates the latest status of the package in a summary S3 bucket every 15 minutes.\n-     * \n-     * The events are stored in following format:\n-     * - Each status update is a file, where the name of the file is tracking number + random id.\n-     * - Each file has status and time-stamp as the first 2 lines respectively.\n-     * - The time at which the file is stored in S3 is not an indication of the time-stamp of the event.\n-     * - Once the status is marked as DELIVERED, we can stop tracking the package.\n-     * \n-     * A Sample files looks as below:\n-     *  FILE-NAME-> '8787323232232332--55322798-dd29-4a04-97f4-93e18feed554'\n-     *   >status:IN TRANSIT\n-     *   >timestamp: 1573410202\n-     *   >Other fields like...tracking history and address\n-     */\n-    public String handleRequest(ScheduledEvent scheduledEvent, Context context) {\n-\n-        final LambdaLogger logger = context.getLogger();\n-        try {\n-            processShipmentUpdates(logger);\n-            return \"SUCCESS\";\n-        } catch (final Exception ex) {\n-            logger.log(String.format(\"Failed to process shipment Updates in %s due to %s\", scheduledEvent.getAccount(), ex.getMessage()));\n-            throw new RuntimeException(ex);\n-        }\n-    }\n-\n-\n-    private void processShipmentUpdates(final LambdaLogger logger) throws InterruptedException {\n-\n-        final List<String> bucketsToProcess = Constants.BUCKETS_TO_PROCESS;\n-        final Map<String, Pair<Long, String>> latestStatusForTrackingNumber = new HashMap<String, Pair<Long, String>>();\n-        final Map<String, List<KeyVersion>> filesToDelete = new HashMap<String, List<DeleteObjectsRequest.KeyVersion>>(); \n-        for (final String bucketName : bucketsToProcess) {\n-            final List<KeyVersion> filesProcessed = processEventsInBucket(bucketName, logger, latestStatusForTrackingNumber);\n-            filesToDelete.put(bucketName, filesProcessed);\n-        }\n-        final AmazonS3 s3Client = EventHandler.getS3Client();\n-\n-        //Create a new file in the Constants.SUMMARY_BUCKET\n-        logger.log(\"Map of statuses -> \" + latestStatusForTrackingNumber);\n-        String summaryUpdateName = Long.toString(System.currentTimeMillis());\n-        \n-        EventHandler.getS3Client().putObject(Constants.SUMMARY_BUCKET, summaryUpdateName, latestStatusForTrackingNumber.toString());\n-        \n-        long expirationTime = System.currentTimeMillis() + Duration.ofMinutes(1).toMillis();\n-        while(System.currentTimeMillis() < expirationTime) {\n-            if (s3Client.doesObjectExist(Constants.SUMMARY_BUCKET, summaryUpdateName)) {\n-                break;\n-            }\n-            logger.log(\"waiting for file to be created \" + summaryUpdateName);\n-            Thread.sleep(1000);\n-        }\n-        \n-        // Before we delete the shipment updates make sure the summary update file exists\n-        if (EventHandler.getS3Client().doesObjectExist(Constants.SUMMARY_BUCKET, summaryUpdateName)) {\n-            deleteProcessedFiles(filesToDelete);\n-            logger.log(\"All updates successfully processed\");\n-        } else {\n-            throw new RuntimeException(\"Failed to write summary status, will be retried in 15 minutes\");\n-        }\n-        \n-    }\n-\n-    private List<KeyVersion> processEventsInBucket(String bucketName, LambdaLogger logger, Map<String, Pair<Long, String>> latestStatusForTrackingNumber) {\n-        final AmazonS3 s3Client = EventHandler.getS3Client();\n-        logger.log(\"Processing Bucket: \" + bucketName);\n-\n-        ObjectListing files = s3Client.listObjects(bucketName);\n-        List<KeyVersion> filesProcessed = new ArrayList<DeleteObjectsRequest.KeyVersion>();\n-\n-        for (Iterator<?> iterator = files.getObjectSummaries().iterator(); iterator.hasNext(); ) {\n-            S3ObjectSummary summary = (S3ObjectSummary) iterator.next();\n-            logger.log(\"Reading Object: \" + summary.getKey());\n-\n-            String trackingNumber = summary.getKey().split(\"--\")[0];\n-            Pair<Long, String> lastKnownStatus = latestStatusForTrackingNumber.get(trackingNumber);\n-\n-            // Check if this shipment has already been delivered, skip this file\n-            if (lastKnownStatus != null && \"DELIVERED\".equals(lastKnownStatus.getRight())) {\n-                continue;\n-            }\n-\n-            String fileContents = s3Client.getObjectAsString(bucketName, summary.getKey());\n-\n-            if (!isValidFile(fileContents)) {\n-                logger.log(String.format(\"Skipping invalid file %s\", summary.getKey()));\n-                continue;\n-            }\n-            \n-            if (!fileContents.contains(\"\\n\")) {\n-                \n-            }\n-            String[] lines = fileContents.split(\"\\n\");\n-            String line1 = lines[0];\n-            String line2 = lines[1];\n-\n-            String status = line1.split(\":\")[1];\n-            Long timeStamp = Long.parseLong(line2.split(\":\")[1]);\n-\n-\n-            if (null == lastKnownStatus || lastKnownStatus.getLeft() < timeStamp) {\n-                lastKnownStatus = new MutablePair<Long, String>(timeStamp, status);\n-                latestStatusForTrackingNumber.put(trackingNumber, lastKnownStatus);\n-            }\n-\n-            //Add to list of processed files\n-            filesProcessed.add(new KeyVersion(summary.getKey()));\n-            logger.log(\"logging Contents of the file\" + fileContents);\n-        }\n-        return filesProcessed;\n-    }\n-    \n-\n-    private void deleteProcessedFiles(Map<String, List<KeyVersion>> filesToDelete) {\n-      final AmazonS3 s3Client = EventHandler.getS3Client();\n-      for (Entry<String, List<KeyVersion>> entry : filesToDelete.entrySet()) {\n-          final DeleteObjectsRequest deleteRequest = new DeleteObjectsRequest(entry.getKey()).withKeys(entry.getValue()).withQuiet(false);\n-          s3Client.deleteObjects(deleteRequest);\n-      }\n-    }\n-    \n-    private boolean isValidFile(String fileContents) {\n-        if (!fileContents.contains(\"\\n\")) {\n-            return false;\n-        }\n-        String[] lines = fileContents.split(\"\\n\");\n-        for (String l: lines) {\n-            if (!l.contains(\":\")) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-    \n-    public static AmazonS3 getS3Client() {\n-        return AmazonS3ClientBuilder.standard().withRegion(Regions.DEFAULT_REGION).build();\n-    }\n-    \n-    \n-}\n-\n-"
  },
  {
    "sha": "fbe1e479d7838303c1c5acbb58d793b233c20ff9",
    "filename": "src/main/java/com/shipmentEvents/demo/test2.java",
    "status": "removed",
    "additions": 0,
    "deletions": 77,
    "changes": 77,
    "blob_url": "https://github.com/salmanksears/amazon-codeguru/blob/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/test2.java",
    "raw_url": "https://github.com/salmanksears/amazon-codeguru/raw/e5e0f2c60f25765351992ca06d89319614eab959/src/main/java/com/shipmentEvents/demo/test2.java",
    "contents_url": "https://api.github.com/repos/salmanksears/amazon-codeguru/contents/src/main/java/com/shipmentEvents/demo/test2.java?ref=e5e0f2c60f25765351992ca06d89319614eab959",
    "patch": "@@ -1,77 +0,0 @@\n-package com.searshc.hspartcatalog.domain.discount;\n-\n-import com.searshc.hspartcatalog.util.DiscountConstants;\n-\n-public class ClientDiscount {\n-\n-\tprivate String businessCd;\n-\tprivate String discountType;\n-\tprivate String discountPercent;\n-\tprivate String listMinusType;\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\tStringBuilder builder = new StringBuilder();\n-\t\tbuilder.append(\"Discount [businessCd=\");\n-\t\tbuilder.append(businessCd);\n-\t\tbuilder.append(\", discountType=\");\n-\t\tbuilder.append(discountType);\n-\t\tbuilder.append(\", discountPercent=\");\n-\t\tbuilder.append(discountPercent);\n-\t\tbuilder.append(\", listMinusType=\");\n-\t\tbuilder.append(listMinusType);\n-\t\tbuilder.append(\"]\");\n-\t\treturn builder.toString();\n-\t}\n-\n-\tpublic String getBusinessCd() {\n-\t\treturn businessCd;\n-\t}\n-\n-\tpublic void setBusinessCd(String businessCd) {\n-\t\tthis.businessCd = businessCd;\n-\t}\n-\n-\tpublic String getDiscountType() {\n-\t\treturn discountType;\n-\t}\n-\n-\tpublic void setDiscountType(String discountType) {\n-\t\tthis.discountType = discountType;\n-\t}\n-\n-\tpublic String getDiscountPercent() {\n-\t\treturn discountPercent;\n-\t}\n-\n-\tpublic void setDiscountPercent(String discountPercent) {\n-\t\tthis.discountPercent = discountPercent;\n-\t}\n-\n-\tpublic String getListMinusType() {\n-\t\treturn listMinusType;\n-\t}\n-\n-\tpublic void setListMinusType(String listMinusType) {\n-\t\tthis.listMinusType = listMinusType;\n-\t}\n-\tpublic boolean isCostPlus() {\n-\t\tif (discountType != null && discountType.compareTo(DiscountConstants.COST_PLUS) == 0)\n-\t\t\treturn true;\n-\t\telse\n-\t\t\treturn false;\n-\t}\n-\tpublic boolean isListMinus() {\n-\t\tif (discountType != null && discountType.compareTo(DiscountConstants.LIST_MINUS) == 0)\n-\t\t\treturn true;\n-\t\telse\n-\t\t\treturn false;\n-\t}\n-\tpublic boolean isListMinus2() {\n-\t\tif (discountType != null && discountType.compareTo(DiscountConstants.LIST_MINUS2) == 0)\n-\t\t\treturn true;\n-\t\telse\n-\t\t\treturn false;\n-\t}\n-}\n-<img src=\"logo.png\">"
  }
]
