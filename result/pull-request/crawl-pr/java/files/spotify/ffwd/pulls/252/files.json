[
  {
    "sha": "3f12d3592f42a620c87f9fd49ae5162dc28e03f7",
    "filename": "api/src/main/java/com/spotify/ffwd/model/v2/BatchMetadata.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/spotify/ffwd/blob/da8c0117418ef0dce40f2939e02e942d06eea88e/api/src/main/java/com/spotify/ffwd/model/v2/BatchMetadata.java",
    "raw_url": "https://github.com/spotify/ffwd/raw/da8c0117418ef0dce40f2939e02e942d06eea88e/api/src/main/java/com/spotify/ffwd/model/v2/BatchMetadata.java",
    "contents_url": "https://api.github.com/repos/spotify/ffwd/contents/api/src/main/java/com/spotify/ffwd/model/v2/BatchMetadata.java?ref=da8c0117418ef0dce40f2939e02e942d06eea88e",
    "patch": "@@ -0,0 +1,51 @@\n+/*-\n+ * -\\-\\-\n+ * FastForward HTTP Module\n+ * --\n+ * Copyright (C) 2016 - 2018 Spotify AB\n+ * --\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * -/-/-\n+ */\n+\n+package com.spotify.ffwd.model.v2;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+@Data\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@EqualsAndHashCode(of = { \"commonTags\", \"commonResource\" })\n+public class BatchMetadata {\n+\n+  private final Map<String, String> commonTags;\n+  private final Map<String, String> commonResource;\n+\n+  /**\n+   * JSON creator.\n+   */\n+  @JsonCreator\n+  public static BatchMetadata create(\n+      @JsonProperty(\"commonTags\") final Optional<Map<String, String>> commonTags,\n+      @JsonProperty(\"commonResource\") final Optional<Map<String, String>> commonResource\n+  ) {\n+    return new BatchMetadata(commonTags.orElseGet(ImmutableMap::of),\n+        commonResource.orElseGet(ImmutableMap::of));\n+  }\n+}"
  },
  {
    "sha": "71b019b44087d5fc1ea58e98cd31d917ff658711",
    "filename": "modules/http/src/main/java/com/spotify/ffwd/http/HttpDecoder.java",
    "status": "modified",
    "additions": 40,
    "deletions": 7,
    "changes": 47,
    "blob_url": "https://github.com/spotify/ffwd/blob/da8c0117418ef0dce40f2939e02e942d06eea88e/modules/http/src/main/java/com/spotify/ffwd/http/HttpDecoder.java",
    "raw_url": "https://github.com/spotify/ffwd/raw/da8c0117418ef0dce40f2939e02e942d06eea88e/modules/http/src/main/java/com/spotify/ffwd/http/HttpDecoder.java",
    "contents_url": "https://api.github.com/repos/spotify/ffwd/contents/modules/http/src/main/java/com/spotify/ffwd/http/HttpDecoder.java?ref=da8c0117418ef0dce40f2939e02e942d06eea88e",
    "patch": "@@ -25,9 +25,9 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.spotify.ffwd.model.v2.Batch;\n+import com.spotify.ffwd.model.v2.BatchMetadata;\n import com.spotify.ffwd.model.v2.Metric;\n import com.spotify.ffwd.model.v2.Value;\n-import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufInputStream;\n import io.netty.channel.ChannelFutureListener;\n import io.netty.channel.ChannelHandler.Sharable;\n@@ -39,16 +39,20 @@\n import io.netty.handler.codec.http.HttpVersion;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n import javax.inject.Inject;\n import javax.inject.Named;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n @Sharable\n public class HttpDecoder extends MessageToMessageDecoder<FullHttpRequest> {\n+  private final int MAX_BATCH_SIZE = 100_000;\n+  private final int MAX_INPUT_MB = 800;\n \n   private static final Logger log = LoggerFactory.getLogger(HttpDecoder.class);\n \n@@ -94,23 +98,34 @@ private boolean matchContentType(final FullHttpRequest in, final String expected\n   private void postBatch(\n       final ChannelHandlerContext ctx, final FullHttpRequest in, final List<Object> out\n   ) {\n-    final Object batch = convertToBatch(in);\n-    out.add(batch);\n+    final List<Object> batches = convertToBatches(in);\n+    out.addAll(batches);\n     ctx\n         .channel()\n         .writeAndFlush(new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK))\n         .addListener((ChannelFutureListener) future -> future.channel().close());\n   }\n \n-  private Object convertToBatch(final FullHttpRequest in) {\n+  private List<Object> convertToBatches(final FullHttpRequest in) {\n     final String endPoint = in.uri();\n     try (final InputStream inputStream = new ByteBufInputStream(in.content())) {\n+      int inputSizeMb = inputStream.available() / 1000000;\n+      if (inputSizeMb > MAX_INPUT_MB) {\n+        BatchMetadata metadata = mapper.readValue(inputStream, BatchMetadata.class);\n+        log.error(\n+            \"Input size is {}mb which is over the limit of {}mb. commonTags: {}, commonResource: {}\",\n+            inputSizeMb,\n+            MAX_BATCH_SIZE,\n+            metadata.getCommonTags(),\n+            metadata.getCommonResource());\n+        throw new HttpException(HttpResponseStatus.REQUEST_ENTITY_TOO_LARGE);\n+      }\n       if (\"/v2/batch\".equals(endPoint)) {\n-        return mapper.readValue(inputStream, Batch.class);\n+        return splitBatch(mapper.readValue(inputStream, Batch.class));\n       } else {\n         com.spotify.ffwd.model.Batch batch =\n             mapper.readValue(inputStream, com.spotify.ffwd.model.Batch.class);\n-        return convert(batch);\n+        return splitBatch(convert(batch));\n       }\n     } catch (final IOException e) {\n       log.error(\n@@ -119,6 +134,24 @@ private Object convertToBatch(final FullHttpRequest in) {\n     }\n   }\n \n+  private List<Object> splitBatch(Batch batch) {\n+    if (batch.getPoints().size() <= MAX_BATCH_SIZE) {\n+      return Collections.singletonList(batch);\n+    }\n+    List<Metric> points = batch.getPoints();\n+    int numBatches = points.size() / MAX_BATCH_SIZE + 1;\n+    log.info(\"Splitting input into {} batches.\", numBatches);\n+    return IntStream.range(0, numBatches).mapToObj(\n+        n -> points.subList(n * MAX_BATCH_SIZE, n == numBatches - 1 ? points.size() : (n + 1) * MAX_BATCH_SIZE))\n+        .map(\n+            batchedPoints ->\n+                Batch.create(\n+                    Optional.of(batch.getCommonTags()),\n+                    Optional.of(batch.getCommonResource()),\n+                    batchedPoints))\n+        .collect(Collectors.toList());\n+  }\n+\n   private Batch convert(final com.spotify.ffwd.model.Batch batch) {\n     List<com.spotify.ffwd.model.Batch.Point> v1Point = batch.getPoints();\n     final List<Metric> v2Point = v1Point"
  }
]
