[
  {
    "sha": "27ee7742ad5cd0635f89aafcfbfd21768db39ca9",
    "filename": "Jenkinsfile",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/Jenkinsfile",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/Jenkinsfile",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/Jenkinsfile?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -133,7 +133,7 @@ pipeline {\n     options {\n         disableConcurrentBuilds()\n         buildDiscarder(logRotator(daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5'))\n-        timeout(time: 1, unit: 'HOURS')\n+        timeout(time: 2, unit: 'HOURS')\n     }\n     environment {\n         ORG = 'nuxeo'"
  },
  {
    "sha": "03a4ca9e1ad960042546ad611c4782a39825669f",
    "filename": "addons/nuxeo-ai-aws-core/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-core/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>nuxeo-ai-addons</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-aws-core</artifactId>\n   <name>Nuxeo AI AWS Core</name>"
  },
  {
    "sha": "e491f49ca1c638c348a0b24b58d1cdeb3450ece1",
    "filename": "addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/AnalyzeDocumentEnrichmentProvider.java",
    "status": "modified",
    "additions": 24,
    "deletions": 28,
    "changes": 52,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/AnalyzeDocumentEnrichmentProvider.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/AnalyzeDocumentEnrichmentProvider.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/AnalyzeDocumentEnrichmentProvider.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -18,35 +18,35 @@\n  */\n package org.nuxeo.ai.enrichment;\n \n-import static java.util.Collections.singleton;\n-import static org.nuxeo.ai.enrichment.DetectDocumentTextEnrichmentProvider.processWithProcessors;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n-import static org.nuxeo.ai.enrichment.LabelsEnrichmentProvider.MINIMUM_CONFIDENCE;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n+import com.amazonaws.services.textract.model.AnalyzeDocumentResult;\n+import com.amazonaws.services.textract.model.Block;\n+import net.jodah.failsafe.RetryPolicy;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.nuxeo.ai.AWSHelper;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n import org.nuxeo.ai.textract.TextractService;\n import org.nuxeo.ecm.core.api.NuxeoException;\n import org.nuxeo.ecm.core.blob.ManagedBlob;\n import org.nuxeo.runtime.api.Framework;\n-import com.amazonaws.services.textract.model.AnalyzeDocumentResult;\n-import com.amazonaws.services.textract.model.Block;\n \n-import net.jodah.failsafe.RetryPolicy;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Collections.singleton;\n+import static org.nuxeo.ai.enrichment.DetectDocumentTextEnrichmentProvider.processWithProcessors;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n+import static org.nuxeo.ai.enrichment.LabelsEnrichmentProvider.MINIMUM_CONFIDENCE;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n \n /**\n  * Analyzes text in a document using AWS TextractService.\n+ *\n  * @since 2.1.2\n  */\n public class AnalyzeDocumentEnrichmentProvider extends AbstractEnrichmentProvider implements EnrichmentCachable {\n@@ -83,8 +83,8 @@ public String getCacheKey(BlobTextFromDocument blobTextFromDoc) {\n         return AWSHelper.handlingExceptions(() -> {\n             List<EnrichmentMetadata> enriched = new ArrayList<>();\n             for (Map.Entry<String, ManagedBlob> blob : blobTextFromDoc.getBlobs().entrySet()) {\n-                AnalyzeDocumentResult result =\n-                        Framework.getService(TextractService.class).analyzeDocument(blob.getValue(), features);\n+                AnalyzeDocumentResult result = Framework.getService(TextractService.class)\n+                                                        .analyzeDocument(blob.getValue(), features);\n                 if (result != null && !result.getBlocks().isEmpty()) {\n                     enriched.addAll(processResults(blobTextFromDoc, blob.getKey(), result.getBlocks()));\n                 }\n@@ -97,24 +97,20 @@ public String getCacheKey(BlobTextFromDocument blobTextFromDoc) {\n      * Process the result of the call\n      */\n     protected Collection<? extends EnrichmentMetadata> processResults(BlobTextFromDocument blobTextFromDoc,\n-                                                                      String propName,\n-                                                                      List<Block> blocks) {\n+            String propName, List<Block> blocks) {\n \n         EnrichmentMetadata.Builder builder = new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc);\n         processWithProcessors(blobTextFromDoc, blocks, builder, name);\n         String raw = toJsonString(jg -> jg.writeObjectField(\"blocks\", blocks));\n         String rawKey = saveJsonAsRawBlob(raw);\n-        return Collections.singletonList(builder\n-                                                 .withRawKey(rawKey)\n-                                                 .withDocumentProperties(singleton(propName))\n-                                                 .build());\n+        return Collections.singletonList(\n+                builder.withRawKey(rawKey).withDocumentProperties(singleton(propName)).build());\n     }\n \n     @Override\n     public RetryPolicy getRetryPolicy() {\n-        return new RetryPolicy()\n-                .abortOn(NuxeoException.class, FatalEnrichmentError.class)\n-                .withMaxRetries(2)\n-                .withBackoff(10, 60, TimeUnit.SECONDS);\n+        return new RetryPolicy().abortOn(NuxeoException.class, FatalEnrichmentError.class)\n+                                .withMaxRetries(2)\n+                                .withBackoff(10, 60, TimeUnit.SECONDS);\n     }\n }"
  },
  {
    "sha": "6928abea39824a8b536a76d727dc4c012bfac611",
    "filename": "addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectDocumentTextEnrichmentProvider.java",
    "status": "modified",
    "additions": 26,
    "deletions": 30,
    "changes": 56,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectDocumentTextEnrichmentProvider.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectDocumentTextEnrichmentProvider.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectDocumentTextEnrichmentProvider.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -18,22 +18,13 @@\n  */\n package org.nuxeo.ai.enrichment;\n \n-import static java.util.Collections.singleton;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n-import static org.nuxeo.ai.enrichment.LabelsEnrichmentProvider.MINIMUM_CONFIDENCE;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n+import com.amazonaws.services.textract.model.Block;\n+import com.amazonaws.services.textract.model.DetectDocumentTextResult;\n+import net.jodah.failsafe.RetryPolicy;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.nuxeo.ai.AWSHelper;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n import org.nuxeo.ai.textract.TextractProcessor;\n import org.nuxeo.ai.textract.TextractService;\n import org.nuxeo.ecm.core.api.CoreInstance;\n@@ -43,13 +34,22 @@\n import org.nuxeo.ecm.core.blob.ManagedBlob;\n import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.transaction.TransactionHelper;\n-import com.amazonaws.services.textract.model.Block;\n-import com.amazonaws.services.textract.model.DetectDocumentTextResult;\n \n-import net.jodah.failsafe.RetryPolicy;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Collections.singleton;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n+import static org.nuxeo.ai.enrichment.LabelsEnrichmentProvider.MINIMUM_CONFIDENCE;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n \n /**\n  * Detects text in a document.\n+ *\n  * @since 2.1.2\n  */\n public class DetectDocumentTextEnrichmentProvider extends AbstractEnrichmentProvider implements EnrichmentCachable {\n@@ -63,7 +63,8 @@\n     /**\n      * Process the Textract response with any available processors.\n      */\n-    protected static void processWithProcessors(BlobTextFromDocument blobTextFromDoc, List<Block> blocks, EnrichmentMetadata.Builder builder, String name) {\n+    protected static void processWithProcessors(BlobTextFromDocument blobTextFromDoc, List<Block> blocks,\n+            EnrichmentMetadata.Builder builder, String name) {\n         List<TextractProcessor> processors = Framework.getService(TextractService.class).getProcessors(name);\n         if (!processors.isEmpty()) {\n             TransactionHelper.runInTransaction(\n@@ -76,8 +77,7 @@ protected static void processWithProcessors(BlobTextFromDocument blobTextFromDoc\n                                 log.warn(\"Textract processing error.\", e);\n                             }\n                         }\n-                    })\n-            );\n+                    }));\n         }\n     }\n \n@@ -97,8 +97,8 @@ public String getCacheKey(BlobTextFromDocument blobTextFromDoc) {\n         return AWSHelper.handlingExceptions(() -> {\n             List<EnrichmentMetadata> enriched = new ArrayList<>();\n             for (Map.Entry<String, ManagedBlob> blob : blobTextFromDoc.getBlobs().entrySet()) {\n-                DetectDocumentTextResult result =\n-                        Framework.getService(TextractService.class).detectText(blob.getValue());\n+                DetectDocumentTextResult result = Framework.getService(TextractService.class)\n+                                                           .detectText(blob.getValue());\n                 if (result != null && !result.getBlocks().isEmpty()) {\n                     enriched.addAll(processResults(blobTextFromDoc, blob.getKey(), result.getBlocks()));\n                 }\n@@ -111,24 +111,20 @@ public String getCacheKey(BlobTextFromDocument blobTextFromDoc) {\n      * Process the result of the call\n      */\n     protected Collection<? extends EnrichmentMetadata> processResults(BlobTextFromDocument blobTextFromDoc,\n-                                                                      String propName,\n-                                                                      List<Block> blocks) {\n+            String propName, List<Block> blocks) {\n \n         EnrichmentMetadata.Builder builder = new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc);\n         processWithProcessors(blobTextFromDoc, blocks, builder, name);\n         String raw = toJsonString(jg -> jg.writeObjectField(\"blocks\", blocks));\n         String rawKey = saveJsonAsRawBlob(raw);\n-        return Collections.singletonList(builder\n-                                                 .withRawKey(rawKey)\n-                                                 .withDocumentProperties(singleton(propName))\n-                                                 .build());\n+        return Collections.singletonList(\n+                builder.withRawKey(rawKey).withDocumentProperties(singleton(propName)).build());\n     }\n \n     @Override\n     public RetryPolicy getRetryPolicy() {\n-        return new RetryPolicy()\n-                .abortOn(NuxeoException.class, FatalEnrichmentError.class)\n-                .withMaxRetries(2)\n-                .withBackoff(10, 60, TimeUnit.SECONDS);\n+        return new RetryPolicy().abortOn(NuxeoException.class, FatalEnrichmentError.class)\n+                                .withMaxRetries(2)\n+                                .withBackoff(10, 60, TimeUnit.SECONDS);\n     }\n }"
  },
  {
    "sha": "9bdeefd36a6a1693b0333ec5de434ba4625eb33c",
    "filename": "addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectTextEnrichmentProvider.java",
    "status": "modified",
    "additions": 24,
    "deletions": 25,
    "changes": 49,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectTextEnrichmentProvider.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectTextEnrichmentProvider.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectTextEnrichmentProvider.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -18,10 +18,15 @@\n  */\n package org.nuxeo.ai.enrichment;\n \n-import static java.util.Collections.singleton;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n-import static org.nuxeo.ai.enrichment.LabelsEnrichmentProvider.MINIMUM_CONFIDENCE;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n+import com.amazonaws.services.rekognition.model.BoundingBox;\n+import com.amazonaws.services.rekognition.model.DetectTextResult;\n+import com.amazonaws.services.rekognition.model.TextDetection;\n+import org.nuxeo.ai.AWSHelper;\n+import org.nuxeo.ai.metadata.AIMetadata;\n+import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n+import org.nuxeo.ai.rekognition.RekognitionService;\n+import org.nuxeo.ecm.core.blob.ManagedBlob;\n+import org.nuxeo.runtime.api.Framework;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -33,16 +38,11 @@\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import org.nuxeo.ai.AWSHelper;\n-import org.nuxeo.ai.metadata.AIMetadata;\n-import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n-import org.nuxeo.ai.rekognition.RekognitionService;\n-import org.nuxeo.ecm.core.blob.ManagedBlob;\n-import org.nuxeo.runtime.api.Framework;\n-import com.amazonaws.services.rekognition.model.BoundingBox;\n-import com.amazonaws.services.rekognition.model.DetectTextResult;\n-import com.amazonaws.services.rekognition.model.TextDetection;\n+\n+import static java.util.Collections.singleton;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n+import static org.nuxeo.ai.enrichment.LabelsEnrichmentProvider.MINIMUM_CONFIDENCE;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n \n /**\n  * Detects words and lines in an image.\n@@ -75,9 +75,8 @@ public void init(EnrichmentDescriptor descriptor) {\n         if (textD.getConfidence() >= minConfidence && textTypes.contains(textD.getType())) {\n             BoundingBox box = textD.getGeometry().getBoundingBox();\n             return new EnrichmentMetadata.Tag(textD.getDetectedText(), kind, null,\n-                                              new AIMetadata.Box(box.getWidth(), box.getHeight(), box.getLeft(), box\n-                                                      .getTop()),\n-                                              null, textD.getConfidence() / 100);\n+                    new AIMetadata.Box(box.getWidth(), box.getHeight(), box.getLeft(), box.getTop()), null,\n+                    textD.getConfidence() / 100);\n         }\n         return null;\n     }\n@@ -87,8 +86,7 @@ public void init(EnrichmentDescriptor descriptor) {\n         return AWSHelper.handlingExceptions(() -> {\n             List<EnrichmentMetadata> enriched = new ArrayList<>();\n             for (Map.Entry<String, ManagedBlob> blob : blobTextFromDoc.getBlobs().entrySet()) {\n-                DetectTextResult result = Framework.getService(RekognitionService.class)\n-                                                   .detectText(blob.getValue());\n+                DetectTextResult result = Framework.getService(RekognitionService.class).detectText(blob.getValue());\n                 if (result != null && !result.getTextDetections().isEmpty()) {\n                     enriched.addAll(processResults(blobTextFromDoc, blob.getKey(), result));\n                 }\n@@ -100,19 +98,20 @@ public void init(EnrichmentDescriptor descriptor) {\n     /**\n      * Processes the result of the call to AWS\n      */\n-    protected Collection<EnrichmentMetadata> processResults(BlobTextFromDocument blobTextFromDoc, String propName, DetectTextResult result) {\n+    protected Collection<EnrichmentMetadata> processResults(BlobTextFromDocument blobTextFromDoc, String propName,\n+            DetectTextResult result) {\n         List<AIMetadata.Tag> tags = result.getTextDetections()\n                                           .stream()\n                                           .map(this::newTag)\n                                           .filter(Objects::nonNull)\n                                           .collect(Collectors.toList());\n         String raw = toJsonString(jg -> jg.writeObjectField(\"textDetections\", result.getTextDetections()));\n         String rawKey = saveJsonAsRawBlob(raw);\n-        return Collections.singletonList(new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc)\n-                                                 .withTags(asTags(tags))\n-                                                 .withRawKey(rawKey)\n-                                                 .withDocumentProperties(singleton(propName))\n-                                                 .build());\n+        return Collections.singletonList(\n+                new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc).withTags(asTags(tags))\n+                                                                           .withRawKey(rawKey)\n+                                                                           .withDocumentProperties(singleton(propName))\n+                                                                           .build());\n     }\n \n     @Override"
  },
  {
    "sha": "f3f2aaf4efeadd0cb338c679e2a052c3f28ffab2",
    "filename": "addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectUnsafeImagesEnrichmentProvider.java",
    "status": "modified",
    "additions": 22,
    "deletions": 25,
    "changes": 47,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectUnsafeImagesEnrichmentProvider.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectUnsafeImagesEnrichmentProvider.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/DetectUnsafeImagesEnrichmentProvider.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -18,9 +18,15 @@\n  */\n package org.nuxeo.ai.enrichment;\n \n-import static java.util.Collections.singleton;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.services.rekognition.model.DetectModerationLabelsResult;\n+import com.amazonaws.services.rekognition.model.ModerationLabel;\n+import net.jodah.failsafe.RetryPolicy;\n+import org.nuxeo.ai.AWSHelper;\n+import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n+import org.nuxeo.ai.rekognition.RekognitionService;\n+import org.nuxeo.ecm.core.blob.ManagedBlob;\n+import org.nuxeo.runtime.api.Framework;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -30,17 +36,9 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n \n-import org.nuxeo.ai.AWSHelper;\n-import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n-import org.nuxeo.ai.rekognition.RekognitionService;\n-import org.nuxeo.ecm.core.blob.ManagedBlob;\n-import org.nuxeo.runtime.api.Framework;\n-\n-import com.amazonaws.SdkClientException;\n-import com.amazonaws.services.rekognition.model.DetectModerationLabelsResult;\n-import com.amazonaws.services.rekognition.model.ModerationLabel;\n-import net.jodah.failsafe.RetryPolicy;\n+import static java.util.Collections.singleton;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n \n /**\n  * Detect unsafe content in images.\n@@ -53,7 +51,6 @@\n \n     protected float minConfidence;\n \n-\n     protected EnrichmentMetadata.Label newLabel(ModerationLabel l) {\n         if (l.getConfidence() >= minConfidence) {\n             return new EnrichmentMetadata.Label(l.getName(), l.getConfidence() / 100);\n@@ -94,21 +91,21 @@ public RetryPolicy getRetryPolicy() {\n      * Processes the result of the call to AWS\n      */\n     protected Collection<EnrichmentMetadata> processResult(BlobTextFromDocument blobTextFromDoc, String propName,\n-                                                           DetectModerationLabelsResult result) {\n+            DetectModerationLabelsResult result) {\n         List<EnrichmentMetadata.Label> labels = result.getModerationLabels()\n-                .stream()\n-                .map(this::newLabel)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n+                                                      .stream()\n+                                                      .map(this::newLabel)\n+                                                      .filter(Objects::nonNull)\n+                                                      .collect(Collectors.toList());\n \n         String raw = toJsonString(jg -> jg.writeObjectField(\"labels\", result.getModerationLabels()));\n \n         String rawKey = saveJsonAsRawBlob(raw);\n-        return Collections.singletonList(new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc)\n-                .withLabels(asLabels(labels))\n-                .withRawKey(rawKey)\n-                .withDocumentProperties(singleton(propName))\n-                .build());\n+        return Collections.singletonList(\n+                new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc).withLabels(asLabels(labels))\n+                                                                           .withRawKey(rawKey)\n+                                                                           .withDocumentProperties(singleton(propName))\n+                                                                           .build());\n     }\n \n     @Override"
  },
  {
    "sha": "97a7c51f10a727fffa6d163e1811ffc34e771ece",
    "filename": "addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/async/DetectCelebritiesEnrichmentProvider.java",
    "status": "modified",
    "additions": 31,
    "deletions": 33,
    "changes": 64,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/async/DetectCelebritiesEnrichmentProvider.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/async/DetectCelebritiesEnrichmentProvider.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/async/DetectCelebritiesEnrichmentProvider.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -18,36 +18,34 @@\n  */\n package org.nuxeo.ai.enrichment.async;\n \n-import static java.util.Collections.singleton;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n-import static org.nuxeo.ai.enrichment.LabelsEnrichmentProvider.MINIMUM_CONFIDENCE;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n-\n-import java.io.Serializable;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-\n+import com.amazonaws.services.rekognition.model.BoundingBox;\n+import com.amazonaws.services.rekognition.model.CelebrityDetail;\n+import com.amazonaws.services.rekognition.model.CelebrityRecognition;\n+import com.amazonaws.services.rekognition.model.GetCelebrityRecognitionResult;\n import org.nuxeo.ai.enrichment.AbstractEnrichmentProvider;\n import org.nuxeo.ai.enrichment.EnrichmentCachable;\n import org.nuxeo.ai.enrichment.EnrichmentDescriptor;\n import org.nuxeo.ai.enrichment.EnrichmentMetadata;\n import org.nuxeo.ai.metadata.AIMetadata;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n import org.nuxeo.ai.rekognition.RekognitionService;\n import org.nuxeo.ecm.core.blob.ManagedBlob;\n import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.kv.KeyValueStore;\n \n-import com.amazonaws.services.rekognition.model.BoundingBox;\n-import com.amazonaws.services.rekognition.model.CelebrityDetail;\n-import com.amazonaws.services.rekognition.model.CelebrityRecognition;\n-import com.amazonaws.services.rekognition.model.GetCelebrityRecognitionResult;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.singleton;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n+import static org.nuxeo.ai.enrichment.LabelsEnrichmentProvider.MINIMUM_CONFIDENCE;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n \n /**\n  * Detects celebrity faces in an image\n@@ -87,24 +85,25 @@ public void init(EnrichmentDescriptor descriptor) {\n      * Processes the result of the call to AWS\n      */\n     public Collection<EnrichmentMetadata> processResults(BlobTextFromDocument blobTextFromDoc, String propName,\n-                                                            GetCelebrityRecognitionResult result) {\n-        List<AIMetadata.Tag> tags = result.getCelebrities().stream()\n-                .map(c -> newCelebrityTag(c.getCelebrity(), c.getTimestamp()))\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n+            GetCelebrityRecognitionResult result) {\n+        List<AIMetadata.Tag> tags = result.getCelebrities()\n+                                          .stream()\n+                                          .map(c -> newCelebrityTag(c.getCelebrity(), c.getTimestamp()))\n+                                          .filter(Objects::nonNull)\n+                                          .collect(Collectors.toList());\n \n         String raw = toJsonString(jg -> {\n-            jg.writeObjectField(\"celebrityFaces\", result.getCelebrities().stream()\n-                    .map(CelebrityRecognition::getCelebrity));\n+            jg.writeObjectField(\"celebrityFaces\",\n+                    result.getCelebrities().stream().map(CelebrityRecognition::getCelebrity));\n             jg.writeObjectField(\"unrecognizedFaces\", Collections.emptyList());\n         });\n \n         String rawKey = saveJsonAsRawBlob(raw);\n-        return Collections.singletonList(new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc)\n-                .withTags(asTags(tags))\n-                .withRawKey(rawKey)\n-                .withDocumentProperties(singleton(propName))\n-                .build());\n+        return Collections.singletonList(\n+                new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc).withTags(asTags(tags))\n+                                                                           .withRawKey(rawKey)\n+                                                                           .withDocumentProperties(singleton(propName))\n+                                                                           .build());\n     }\n \n     /**\n@@ -116,8 +115,7 @@ public void init(EnrichmentDescriptor descriptor) {\n             return new AIMetadata.Tag(celebrity.getName(), kind, celebrity.getId(),\n                     new AIMetadata.Box(box.getWidth(), box.getHeight(), box.getLeft(), box.getTop()),\n                     Collections.singletonList(new AIMetadata.Label(null, 0, timestamp)),\n-                    celebrity.getFace().getConfidence() / 100\n-            );\n+                    celebrity.getFace().getConfidence() / 100);\n         }\n         return null;\n     }"
  },
  {
    "sha": "7098e089b2bd84741285fb37316801a533742ba0",
    "filename": "addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/async/DetectUnsafeImagesEnrichmentProvider.java",
    "status": "modified",
    "additions": 26,
    "deletions": 28,
    "changes": 54,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/async/DetectUnsafeImagesEnrichmentProvider.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/async/DetectUnsafeImagesEnrichmentProvider.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-core/src/main/java/org/nuxeo/ai/enrichment/async/DetectUnsafeImagesEnrichmentProvider.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -18,34 +18,32 @@\n  */\n package org.nuxeo.ai.enrichment.async;\n \n-import static java.util.Collections.singleton;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n-\n-import java.io.Serializable;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.services.rekognition.model.GetContentModerationResult;\n+import com.amazonaws.services.rekognition.model.ModerationLabel;\n+import net.jodah.failsafe.RetryPolicy;\n import org.nuxeo.ai.enrichment.AbstractEnrichmentProvider;\n import org.nuxeo.ai.enrichment.EnrichmentCachable;\n import org.nuxeo.ai.enrichment.EnrichmentDescriptor;\n import org.nuxeo.ai.enrichment.EnrichmentMetadata;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n import org.nuxeo.ai.rekognition.RekognitionService;\n import org.nuxeo.ecm.core.blob.ManagedBlob;\n import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.kv.KeyValueStore;\n \n-import com.amazonaws.SdkClientException;\n-import com.amazonaws.services.rekognition.model.GetContentModerationResult;\n-import com.amazonaws.services.rekognition.model.ModerationLabel;\n-import net.jodah.failsafe.RetryPolicy;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.singleton;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.makeKeyUsingBlobDigests;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.toJsonString;\n \n /**\n  * Detect unsafe content in images.\n@@ -100,21 +98,21 @@ public RetryPolicy getRetryPolicy() {\n     }\n \n     public Collection<EnrichmentMetadata> processResult(BlobTextFromDocument blobTextFromDoc, String propName,\n-                                                        GetContentModerationResult result) {\n+            GetContentModerationResult result) {\n         List<EnrichmentMetadata.Label> labels = result.getModerationLabels()\n-                .stream()\n-                .map(l -> newLabel(l.getModerationLabel(), l.getTimestamp()))\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n+                                                      .stream()\n+                                                      .map(l -> newLabel(l.getModerationLabel(), l.getTimestamp()))\n+                                                      .filter(Objects::nonNull)\n+                                                      .collect(Collectors.toList());\n \n         String raw = toJsonString(jg -> jg.writeObjectField(\"labels\", result.getModerationLabels()));\n \n         String rawKey = saveJsonAsRawBlob(raw);\n-        return Collections.singletonList(new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc)\n-                .withLabels(asLabels(labels))\n-                .withRawKey(rawKey)\n-                .withDocumentProperties(singleton(propName))\n-                .build());\n+        return Collections.singletonList(\n+                new EnrichmentMetadata.Builder(kind, name, blobTextFromDoc).withLabels(asLabels(labels))\n+                                                                           .withRawKey(rawKey)\n+                                                                           .withDocumentProperties(singleton(propName))\n+                                                                           .build());\n     }\n \n     @Override"
  },
  {
    "sha": "7abe3c7f0774aec337e3e3761f5a3b11f7dd1d19",
    "filename": "addons/nuxeo-ai-aws-package/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-package/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-package/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-package/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>nuxeo-ai-addons</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-aws-package</artifactId>\n   <packaging>zip</packaging>"
  },
  {
    "sha": "463a92661d8196e2f2d329e67b79178c0f35c34f",
    "filename": "addons/nuxeo-ai-aws-package/src/main/resources/install/templates/nuxeo-ai-aws/config/ai-aws-config.xml.nxftl",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-package/src/main/resources/install/templates/nuxeo-ai-aws/config/ai-aws-config.xml.nxftl",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-aws-package/src/main/resources/install/templates/nuxeo-ai-aws/config/ai-aws-config.xml.nxftl",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-aws-package/src/main/resources/install/templates/nuxeo-ai-aws/config/ai-aws-config.xml.nxftl?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -91,8 +91,8 @@\n                      logConfig=\"${nuxeo.ai.stream.config.name}\"\n                      class=\"org.nuxeo.ai.enrichment.EnrichingStreamProcessor\">\n       <policy name=\"default\" maxRetries=\"${nuxeo.enrichment.aws.enrichment.retry}\" delay=\"200ms\" maxDelay=\"2s\" continueOnFailure=\"true\" />\n-      <option name=\"source\">ai/text</option>\n-      <option name=\"sink\">ai/enrichment-in</option>\n+      <option name=\"source\">text</option>\n+      <option name=\"sink\">enrichment.in</option>\n       <option name=\"enrichmentProviderName\">aws.textKeyphrase</option>\n       <option name=\"cache\">${nuxeo.enrichment.aws.cache}</option>\n     </streamProcessor>\n@@ -103,8 +103,8 @@\n                      logConfig=\"${nuxeo.ai.stream.config.name}\"\n                      class=\"org.nuxeo.ai.enrichment.EnrichingStreamProcessor\">\n       <policy name=\"default\" maxRetries=\"${nuxeo.enrichment.aws.enrichment.retry}\" delay=\"200ms\" maxDelay=\"2s\" continueOnFailure=\"true\" />\n-      <option name=\"source\">ai/text</option>\n-      <option name=\"sink\">ai/enrichment-in</option>\n+      <option name=\"source\">text</option>\n+      <option name=\"sink\">enrichment.in</option>\n       <option name=\"enrichmentProviderName\">aws.textEntities</option>\n       <option name=\"cache\">${nuxeo.enrichment.aws.cache}</option>\n     </streamProcessor>\n@@ -114,8 +114,8 @@\n     <streamProcessor name=\"textKeyphraseProcessor\" defaultConcurrency=\"1\" defaultPartitions=\"4\"\n                      logConfig=\"${nuxeo.ai.stream.config.name}\"\n                      class=\"org.nuxeo.ai.enrichment.EnrichingStreamProcessor\">\n-      <option name=\"source\">ai/text</option>\n-      <option name=\"sink\">ai/enrichment-in</option>\n+      <option name=\"source\">text</option>\n+      <option name=\"sink\">enrichment.in</option>\n       <option name=\"enrichmentProviderName\">aws.textKeyphrase</option>\n       <option name=\"cache\">${nuxeo.enrichment.aws.cache}</option>\n     </streamProcessor>"
  },
  {
    "sha": "5eaa24248a4e57b7399bd9d522a6f9d7494d0a73",
    "filename": "addons/nuxeo-ai-gcp-core/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-gcp-core/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-gcp-core/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-gcp-core/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -4,7 +4,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>nuxeo-ai-addons</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-gcp-core</artifactId>\n   <name>Nuxeo AI GCP Core</name>"
  },
  {
    "sha": "4774767d79f6d3e1d6eeef2a2ca5bcc2042612e8",
    "filename": "addons/nuxeo-ai-gcp-package/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-gcp-package/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-gcp-package/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-gcp-package/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>nuxeo-ai-addons</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-gcp-package</artifactId>\n   <packaging>zip</packaging>"
  },
  {
    "sha": "2be4a276eda37c55ae1d9b2093c42b152ac5ee53",
    "filename": "addons/nuxeo-ai-image-quality-core/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-image-quality-core/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-image-quality-core/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-image-quality-core/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>nuxeo-ai-addons</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-image-quality-core</artifactId>\n   <name>Nuxeo AI image quality core</name>"
  },
  {
    "sha": "d0830c0f0e468f4bbe227dbf72fe16a36bb6f000",
    "filename": "addons/nuxeo-ai-image-quality-package/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-image-quality-package/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/nuxeo-ai-image-quality-package/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/nuxeo-ai-image-quality-package/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>nuxeo-ai-addons</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>nuxeo-ai-image-quality-package</artifactId>"
  },
  {
    "sha": "55c88118303bbc54f84f4f33d302e24b15f53cda",
    "filename": "addons/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/addons/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/addons/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>ai-core-parent</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-addons</artifactId>\n   <name>Nuxeo AI Addons parent POM</name>"
  },
  {
    "sha": "5b92c3e28642d92d450b55530b0d226de44c9928",
    "filename": "nuxeo-ai-config/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-config/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-config/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-config/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -4,7 +4,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>ai-core-parent</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-config</artifactId>\n   <name>Nuxeo AI Config Module</name>"
  },
  {
    "sha": "fb50513ad2d0d69443900e3d9a7810fa4c34b0ac",
    "filename": "nuxeo-ai-config/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/AIRoot.java",
    "status": "modified",
    "additions": 33,
    "deletions": 7,
    "changes": 40,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-config/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/AIRoot.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-config/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/AIRoot.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-config/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/AIRoot.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -65,13 +65,28 @@\n \n     public static final String DATASOURCE_CONF_VAR = \"nuxeo.ai.insight.datasource.label\";\n \n+    public static final String PROJECT_ID_VAR = \"nuxeo.ai.insight.client.projectid\";\n+\n+    public static final String MANAGERS_GROUP_SUFFIX = \"-managers\";\n+\n+    public static final String LIBRARIANS_GROUP_SUFFIX = \"-librarians\";\n+\n+    protected String projectId;\n+\n+    @Override\n+    protected void initialize(Object... args) {\n+        super.initialize(args);\n+        projectId = Framework.getProperty(PROJECT_ID_VAR);\n+    }\n+\n     @POST\n     @Path(\"config\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public Response setNuxeoConfVars(String conf) throws JsonProcessingException {\n         Map<String, String> confMap = MAPPER.readValue(conf, NUXEO_CONF_REF);\n-        if (!ctx.getPrincipal().isAdministrator()) {\n+        if (!(ctx.getPrincipal().isMemberOf(projectId + MANAGERS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isAdministrator())) {\n             return Response.status(Response.Status.UNAUTHORIZED).build();\n         }\n         try {\n@@ -108,7 +123,8 @@ public Response isExportActivated() {\n     public Response setThresholdsFromJSON(String thresholdsJSON) throws JsonProcessingException {\n         ThresholdConfiguratorDescriptor thresholds = MAPPER.readValue(thresholdsJSON,\n                 ThresholdConfiguratorDescriptor.class);\n-        if (!ctx.getPrincipal().isAdministrator()) {\n+        if (!(ctx.getPrincipal().isMemberOf(projectId + MANAGERS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isAdministrator())) {\n             return Response.status(Response.Status.UNAUTHORIZED).build();\n         }\n \n@@ -130,7 +146,8 @@ public Response setThresholdsFromXML(@PathParam(\"docType\") String docType, Strin\n             throw new WebApplicationException(\n                     Response.status(Response.Status.BAD_REQUEST).entity(\"docType parameter is mandatory\").build());\n         }\n-        if (!ctx.getPrincipal().isAdministrator()) {\n+        if (!(ctx.getPrincipal().isMemberOf(projectId + MANAGERS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isAdministrator())) {\n             return Response.status(Response.Status.UNAUTHORIZED).build();\n         }\n         try {\n@@ -149,7 +166,8 @@ public Response removeThreshold(@PathParam(\"docType\") String docType) {\n             throw new WebApplicationException(\n                     Response.status(Response.Status.BAD_REQUEST).entity(\"docType parameter is mandatory\").build());\n         }\n-        if (!ctx.getPrincipal().isAdministrator()) {\n+        if (!(ctx.getPrincipal().isMemberOf(projectId + MANAGERS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isAdministrator())) {\n             return Response.status(Response.Status.UNAUTHORIZED).build();\n         }\n         try {\n@@ -165,7 +183,8 @@ public Response removeThreshold(@PathParam(\"docType\") String docType) {\n     @Path(\"extension/thresholds\")\n     @Produces(MediaType.APPLICATION_XML)\n     public Response getAllThresholds() {\n-        if (!ctx.getPrincipal().isAdministrator()) {\n+        if (!(ctx.getPrincipal().isMemberOf(projectId + MANAGERS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isAdministrator())) {\n             return Response.status(Response.Status.UNAUTHORIZED).build();\n         }\n         try {\n@@ -183,7 +202,8 @@ public Response getAllThresholds() {\n     @Consumes(MediaType.APPLICATION_XML)\n     @Produces(MediaType.APPLICATION_JSON)\n     public Response setModelFromXML(@PathParam(\"modelId\") String modelId, String modelXML) {\n-        if (!ctx.getPrincipal().isAdministrator()) {\n+        if (!(ctx.getPrincipal().isMemberOf(projectId + MANAGERS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isAdministrator())) {\n             return Response.status(Response.Status.UNAUTHORIZED).build();\n         }\n         try {\n@@ -202,7 +222,8 @@ public Response deleteModel(@PathParam(\"modelId\") String modelId) {\n             throw new WebApplicationException(\n                     Response.status(Response.Status.BAD_REQUEST).entity(\"modelId parameter is mandatory\").build());\n         }\n-        if (!ctx.getPrincipal().isAdministrator()) {\n+        if (!(ctx.getPrincipal().isMemberOf(projectId + MANAGERS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isAdministrator())) {\n             return Response.status(Response.Status.UNAUTHORIZED).build();\n         }\n         try {\n@@ -221,6 +242,11 @@ public Response deleteModel(@PathParam(\"modelId\") String modelId) {\n      */\n     @Path(\"search\")\n     public Resource getDocumentsToAnnotate() {\n+        if (!(ctx.getPrincipal().isMemberOf(projectId + MANAGERS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isMemberOf(projectId + LIBRARIANS_GROUP_SUFFIX)\n+                || ctx.getPrincipal().isAdministrator())) {\n+            return null;\n+        }\n         return ctx.newObject(AISearchObject.TYPE);\n     }\n }"
  },
  {
    "sha": "8ee4ba738977b15b4d0053ea2646d98c87dd9ffc",
    "filename": "nuxeo-ai-core-package/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core-package/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core-package/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core-package/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>ai-core-parent</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>nuxeo-ai-core-package</artifactId>\n@@ -43,7 +43,6 @@\n     <dependency>\n       <groupId>org.nuxeo.client</groupId>\n       <artifactId>nuxeo-java-client</artifactId>\n-      <scope>compile</scope>\n     </dependency>\n   </dependencies>\n "
  },
  {
    "sha": "ce77c7bd399894ec0f05db31ada7e25a323c9aea",
    "filename": "nuxeo-ai-core-package/src/main/resources/install/templates/nuxeo-ai-core/config/ai-cloud-client-config.xml.nxftl",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core-package/src/main/resources/install/templates/nuxeo-ai-core/config/ai-cloud-client-config.xml.nxftl",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core-package/src/main/resources/install/templates/nuxeo-ai-core/config/ai-cloud-client-config.xml.nxftl",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core-package/src/main/resources/install/templates/nuxeo-ai-core/config/ai-cloud-client-config.xml.nxftl?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,12 +3,18 @@\n   <require>org.nuxeo.ai.services.AIComponent</require>\n   <#if \"${nuxeo.ai.insight.client.enable}\" == \"true\">\n \n+  <extension target=\"org.nuxeo.ai.keystore.JWTKeyService\" point=\"keys\">\n+    <key id=\"${nuxeo.ai.insight.client.projectid}\"\n+           audience=\"${nuxeo.ai.insight.client.audience}\"\n+           expiresAt=\"${nuxeo.ai.insight.jwt.expiration}\">\n+    </key>\n+  </extension>\n+\n   <extension target=\"org.nuxeo.ai.cloud.NuxeoClient\" point=\"config\">\n     <config id=\"njConfig\"\n         projectId=\"${nuxeo.ai.insight.client.projectid}\"\n         url=\"${nuxeo.ai.insight.client.target.url}\"\n         datasource=\"${nuxeo.ai.insight.datasource.label}\">\n-      <authentication token=\"${nuxeo.ai.insight.client.token}\" />\n     </config>\n   </extension>\n "
  },
  {
    "sha": "a2c5aeb097c07a3b50ceee2091168623a7843470",
    "filename": "nuxeo-ai-core-package/src/main/resources/install/templates/nuxeo-ai-core/nuxeo.defaults",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core-package/src/main/resources/install/templates/nuxeo-ai-core/nuxeo.defaults",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core-package/src/main/resources/install/templates/nuxeo-ai-core/nuxeo.defaults",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core-package/src/main/resources/install/templates/nuxeo-ai-core/nuxeo.defaults?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -48,7 +48,6 @@ nuxeo.ai.insight.datasource.label=dev\n # If client enabled: set project id, insight url and token access (see AI team for setup)\n # nuxeo.ai.insight.client.projectid=\n # nuxeo.ai.insight.client.target.url=\n-# nuxeo.ai.insight.client.token=\n # All additional urls to disable cors on (separated with spaces)\n # nuxeo.cors.urls=\n "
  },
  {
    "sha": "afb24314b707d366b318ea3d4fff6bd2bb70f0b5",
    "filename": "nuxeo-ai-core/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>ai-core-parent</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-core</artifactId>\n   <name>Ai core</name>"
  },
  {
    "sha": "209651fc625c4fc068f16b3c07f901669db7db8d",
    "filename": "nuxeo-ai-core/src/main/java/org/nuxeo/ai/enrichment/EnrichmentOp.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/main/java/org/nuxeo/ai/enrichment/EnrichmentOp.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/main/java/org/nuxeo/ai/enrichment/EnrichmentOp.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/src/main/java/org/nuxeo/ai/enrichment/EnrichmentOp.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -19,17 +19,12 @@\n  */\n package org.nuxeo.ai.enrichment;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.nuxeo.ai.metadata.AIMetadata;\n import org.nuxeo.ai.pipes.events.DocEventToStream;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n+import org.nuxeo.ai.sdk.objects.PropertyType;\n import org.nuxeo.ai.services.AIComponent;\n import org.nuxeo.ecm.automation.OperationContext;\n import org.nuxeo.ecm.automation.core.Constants;\n@@ -45,6 +40,11 @@\n import org.nuxeo.ecm.core.api.NuxeoException;\n import org.nuxeo.ecm.core.api.impl.DocumentModelListImpl;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n /**\n  * Calls an enrichment provider.\n  */"
  },
  {
    "sha": "45ed9ef872d70e15285d1d8951fc8b758252cfd4",
    "filename": "nuxeo-ai-core/src/main/java/org/nuxeo/ai/services/AIComponent.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/main/java/org/nuxeo/ai/services/AIComponent.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/main/java/org/nuxeo/ai/services/AIComponent.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/src/main/java/org/nuxeo/ai/services/AIComponent.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -43,6 +43,7 @@\n import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeEntry;\n import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.Component;\n import org.nuxeo.runtime.model.ComponentContext;\n import org.nuxeo.runtime.model.ComponentInstance;\n import org.nuxeo.runtime.model.DefaultComponent;\n@@ -81,6 +82,17 @@ public void registerContribution(Object contribution, String extensionPoint, Com\n         }\n     }\n \n+    @Override\n+    public int getApplicationStartedOrder() {\n+        Component component = (Component) Framework.getRuntime()\n+                .getComponent(\"org.nuxeo.ecm.core.convert.service.ConversionServiceImpl\");\n+        if (component == null) {\n+            // TF Writers are using the conversion service when starting up\n+            return super.getApplicationStartedOrder() + 1;\n+        }\n+        return component.getApplicationStartedOrder() + 1;\n+    }\n+\n     @Override\n     public void start(ComponentContext context) {\n         super.start(context);"
  },
  {
    "sha": "45dd4314d2d9365db82e0311ef28e8ed14cb01ab",
    "filename": "nuxeo-ai-core/src/main/java/org/nuxeo/ai/tensorflow/TFRecordWriter.java",
    "status": "modified",
    "additions": 22,
    "deletions": 23,
    "changes": 45,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/main/java/org/nuxeo/ai/tensorflow/TFRecordWriter.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/main/java/org/nuxeo/ai/tensorflow/TFRecordWriter.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/src/main/java/org/nuxeo/ai/tensorflow/TFRecordWriter.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -19,33 +19,15 @@\n  */\n package org.nuxeo.ai.tensorflow;\n \n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.CONVERSION_SERVICE;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.DEFAULT_CONVERTER;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.getBlobFromProvider;\n-import static org.nuxeo.ai.enrichment.EnrichmentUtils.optionAsInteger;\n-import static org.nuxeo.ai.pipes.functions.PropertyUtils.IMAGE_TYPE;\n-import static org.nuxeo.ai.pipes.functions.PropertyUtils.LIST_DELIMITER_PATTERN;\n-import static org.nuxeo.ai.pipes.functions.PropertyUtils.TEXT_TYPE;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.MAPPER;\n-\n-import java.io.BufferedOutputStream;\n-import java.io.DataOutputStream;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-\n+import com.google.protobuf.ByteString;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.nuxeo.ai.bulk.AbstractRecordWriter;\n import org.nuxeo.ai.enrichment.EnrichmentUtils;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n import org.nuxeo.ai.pipes.types.ExportRecord;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n+import org.nuxeo.ai.sdk.objects.PropertyType;\n import org.nuxeo.ai.tensorflow.ext.TensorflowWriter;\n import org.nuxeo.ecm.core.api.Blob;\n import org.nuxeo.ecm.core.api.Blobs;\n@@ -60,17 +42,34 @@\n import org.tensorflow.example.Features;\n import org.tensorflow.example.Int64List;\n \n-import com.google.protobuf.ByteString;\n+import java.io.BufferedOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.CONVERSION_SERVICE;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.DEFAULT_CONVERTER;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.getBlobFromProvider;\n+import static org.nuxeo.ai.enrichment.EnrichmentUtils.optionAsInteger;\n+import static org.nuxeo.ai.pipes.functions.PropertyUtils.IMAGE_TYPE;\n+import static org.nuxeo.ai.pipes.functions.PropertyUtils.LIST_DELIMITER_PATTERN;\n+import static org.nuxeo.ai.pipes.functions.PropertyUtils.TEXT_TYPE;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.MAPPER;\n \n /**\n  * Write TFRecords\n  */\n public class TFRecordWriter extends AbstractRecordWriter {\n \n-    private static final Logger log = LogManager.getLogger(TFRecordWriter.class);\n-\n     public static final String TFRECORD_MIME_TYPE = \"application/x-tensorflow-record\";\n \n+    private static final Logger log = LogManager.getLogger(TFRecordWriter.class);\n+\n     protected String imageConversionService;\n \n     protected int imageWidth;"
  },
  {
    "sha": "25d3415fc601da842d752ed481dada1c500e1aaa",
    "filename": "nuxeo-ai-core/src/test/java/org/nuxeo/ai/bulk/TensorTest.java",
    "status": "modified",
    "additions": 51,
    "deletions": 79,
    "changes": 130,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/java/org/nuxeo/ai/bulk/TensorTest.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/java/org/nuxeo/ai/bulk/TensorTest.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/src/test/java/org/nuxeo/ai/bulk/TensorTest.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -19,39 +19,18 @@\n  */\n package org.nuxeo.ai.bulk;\n \n-import static junit.framework.TestCase.assertTrue;\n-import static org.assertj.core.api.Java6Assertions.assertThat;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.FILE_CONTENT;\n-import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.blobTestImage;\n-import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.blobTestPdf;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.MAPPER;\n-\n-import java.io.DataInput;\n-import java.io.DataInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-\n-import javax.inject.Inject;\n-\n+import com.google.common.collect.Sets;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.nuxeo.ai.enrichment.EnrichmentTestFeature;\n import org.nuxeo.ai.pipes.functions.PropertyUtils;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n import org.nuxeo.ai.pipes.types.ExportRecord;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n+import org.nuxeo.ai.sdk.objects.PropertyType;\n import org.nuxeo.ai.services.AIComponent;\n import org.nuxeo.ai.tensorflow.TFRecord;\n import org.nuxeo.ai.tensorflow.ext.TFRecordReader;\n+import org.nuxeo.common.utils.FileUtils;\n import org.nuxeo.ecm.core.api.Blob;\n import org.nuxeo.ecm.core.api.CoreSession;\n import org.nuxeo.ecm.core.api.DocumentModel;\n@@ -65,7 +44,27 @@\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n import org.tensorflow.example.Feature;\n \n-import com.google.common.collect.Sets;\n+import javax.inject.Inject;\n+import java.io.DataInput;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.FILE_CONTENT;\n+import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.blobTestImage;\n+import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.blobTestPdf;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.MAPPER;\n \n @RunWith(FeaturesRunner.class)\n @Features({ EnrichmentTestFeature.class, PlatformFeature.class })\n@@ -81,6 +80,28 @@\n     @Inject\n     protected CoreSession session;\n \n+    /**\n+     * Count the number of tensorflow record example records.\n+     */\n+    public static int countNumberOfExamples(Blob blob, int numOfFeatures) throws IOException {\n+        if (blob == null) {\n+            return 0;\n+        }\n+        DataInput input = new DataInputStream(new FileInputStream(blob.getFile()));\n+        TFRecordReader tfRecordReader = new TFRecordReader(input, true);\n+        byte[] exampleData;\n+        int countExamples = 0;\n+        while ((exampleData = tfRecordReader.read()) != null) {\n+            TFRecord tfRecord = TFRecord.from(exampleData);\n+            if (numOfFeatures > 0) {\n+                assertEquals(numOfFeatures, tfRecord.getFeatures().getFeatureCount());\n+            }\n+            assertThat(tfRecord.getDocId()).isNotBlank();\n+            countExamples++;\n+        }\n+        return countExamples;\n+    }\n+\n     @Test\n     public void testWriter() throws IOException {\n         RecordWriter writer = aiComponent.getRecordWriter(\"training\");\n@@ -110,28 +131,6 @@ public void testWriter() throws IOException {\n         assertEquals(numberOfRecords, countNumberOfExamples(blob.get(), 2));\n     }\n \n-    /**\n-     * Count the number of tensorflow record example records.\n-     */\n-    public static int countNumberOfExamples(Blob blob, int numOfFeatures) throws IOException {\n-        if (blob == null) {\n-            return 0;\n-        }\n-        DataInput input = new DataInputStream(new FileInputStream(blob.getFile()));\n-        TFRecordReader tfRecordReader = new TFRecordReader(input, true);\n-        byte[] exampleData;\n-        int countExamples = 0;\n-        while ((exampleData = tfRecordReader.read()) != null) {\n-            TFRecord tfRecord = TFRecord.from(exampleData);\n-            if (numOfFeatures > 0) {\n-                assertEquals(numOfFeatures, tfRecord.getFeatures().getFeatureCount());\n-            }\n-            assertThat(tfRecord.getDocId()).isNotBlank();\n-            countExamples++;\n-        }\n-        return countExamples;\n-    }\n-\n     @Test\n     public void testBlobWriter() throws IOException {\n         RecordWriter writer = aiComponent.getRecordWriter(\"validation\");\n@@ -233,21 +232,11 @@ public void testBadDescriptor() {\n \n     @Test\n     public void shouldWriteHTMLAsSingleValueTensor() throws IOException {\n-        String html = \"<p>Step to reproduce:</p>\\n\" +\n-                \"<ul>\\n\\t<li>select a File document in a content view and push the Copy button</li>\\n\" +\n-                \"\\t<li>push the Paste button</li>\\n\" +\n-                \"\\t<li>a new document is created in the same folder:\" +\n-                \" get its id (<tt>cd551cce-5322-4368-b045-e13086f250bb</tt> in my example)</li>\\n\" +\n-                \"\\t<li>edit the new document and increment the minor version</li>\\n\" +\n-                \"\\t<li>run the following SQL query against your database\\n\" +\n-                \"<div style=\\\"\\\\\\\"border-width:\\\" class=\\\"\\\\\\\"preformatted\\\"><div class=\\\"\\\\\\\"preformattedContent\\\">\\n\" +\n-                \"<pre>select * from versions where versionableid='cd551cce-5322-4368-b045-e13086f250bb';\\n\" +\n-                \" id | versionableid | created | label | description | islatest | islatestmajor \\n\" +\n-                \"--------------------------------------------------------------------------------------\" +\n-                \"------------------------------------------------\\\\n\" +\n-                \" ba10d4af-9045-48bc-be46-0c293b84b408 | cd551cce-5322-4368-b045-e13086f250bb | 2016-05-26 14:38:00.815 | | | t | f\\n\" +\n-                \"</pre>\\n</div></div>\\n<p>=> the label value is empty</p></li>\\n</ul>\\n\" +\n-                \"\\n\\n<p>This value is returned when calling <tt>session.getLastVersion(docRef).getLabel()</tt>.</p>\";\n+        File htmlFile = FileUtils.getResourceFileFromContext(\"files/htmlTensor.html\");\n+        String html = org.apache.commons.io.FileUtils.readFileToString(htmlFile, \"UTF-8\");\n+\n+        File expectedFile = FileUtils.getResourceFileFromContext(\"files/htmlTensorExpected.html\");\n+        String expected = org.apache.commons.io.FileUtils.readFileToString(expectedFile, \"UTF-8\");\n \n         DocumentModel doc = session.createDocumentModel(\"/\", \"TestDoc\", \"File\");\n         doc.setPropertyValue(\"dc:description\", html);\n@@ -261,7 +250,6 @@ public void shouldWriteHTMLAsSingleValueTensor() throws IOException {\n \n         byte[] bytes = MAPPER.writeValueAsBytes(blobTextFromDoc);\n \n-\n         RecordWriter writer = aiComponent.getRecordWriter(\"training\");\n         assertNotNull(writer);\n \n@@ -287,22 +275,6 @@ public void shouldWriteHTMLAsSingleValueTensor() throws IOException {\n         Feature feature = tfRecord.getFeatures().getFeatureOrDefault(\"dc:description\", null);\n         assertNotNull(feature);\n \n-        final String expected = \"<p>Step to reproduce:</p>\\n\" +\n-                \"<ul>\\n\\t<li>select a File document in a content view and push the Copy button</li>\\n\" +\n-                \"\\t<li>push the Paste button</li>\\n\" +\n-                \"\\t<li>a new document is created in the same folder:\" +\n-                \" get its id (<tt>cd551cce-5322-4368-b045-e13086f250bb</tt> in my example)</li>\\n\" +\n-                \"\\t<li>edit the new document and increment the minor version</li>\\n\" +\n-                \"\\t<li>run the following SQL query against your database\\n\" +\n-                \"<div style=\\\"\\\\\\\"border-width:\\\" class=\\\"\\\\\\\"preformatted\\\"><div class=\\\"\\\\\\\"preformattedContent\\\">\\n\" +\n-                \"<pre>select * from versions where versionableid='cd551cce-5322-4368-b045-e13086f250bb';\\n\" +\n-                \" id ; versionableid ; created ; label ; description ; islatest ; islatestmajor \\n\" +\n-                \"--------------------------------------------------------------------------------------\" +\n-                \"------------------------------------------------\\\\n\" +\n-                \" ba10d4af-9045-48bc-be46-0c293b84b408 ; cd551cce-5322-4368-b045-e13086f250bb ; 2016-05-26 14:38:00.815 ; ; ; t ; f\\n\" +\n-                \"</pre>\\n</div></div>\\n<p>=> the label value is empty</p></li>\\n</ul>\\n\" +\n-                \"\\n\\n<p>This value is returned when calling <tt>session.getLastVersion(docRef).getLabel()</tt>.</p>\";\n-\n         File txtFile = Framework.createTempFile(\"tf_HTML\", \"txt\");\n         try (FileOutputStream fos = new FileOutputStream(txtFile)) {\n             fos.write(feature.getBytesList().getValue(0).toByteArray());"
  },
  {
    "sha": "b438277a2203e61798f20101ce3f971f38437701",
    "filename": "nuxeo-ai-core/src/test/java/org/nuxeo/ai/enrichment/TestConfiguredStreamProcessors.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/java/org/nuxeo/ai/enrichment/TestConfiguredStreamProcessors.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/java/org/nuxeo/ai/enrichment/TestConfiguredStreamProcessors.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/src/test/java/org/nuxeo/ai/enrichment/TestConfiguredStreamProcessors.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -46,7 +46,7 @@\n import org.nuxeo.ai.metadata.AIMetadata;\n import org.nuxeo.ai.metadata.LabelSuggestion;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n+import org.nuxeo.ai.sdk.objects.PropertyType;\n import org.nuxeo.ecm.core.api.CoreSession;\n import org.nuxeo.ecm.core.api.DocumentModel;\n import org.nuxeo.ecm.core.api.IdRef;\n@@ -173,7 +173,7 @@ public void testCaching() throws IOException, InterruptedException {\n         BlobTextFromDocument blobTextFromDoc = blobTestImage(blobManager);\n         blobTextFromDoc.setId(docId);\n         blobTextFromDoc.setRepositoryName(testDoc.getRepositoryName());\n-        blobTextFromDoc.computePropertyBlobs().get(new PropertyType(FILE_CONTENT, \"img\")).setDigest(\"myUniqueDigest\");\n+        blobTextFromDoc.computePropertyBlobs().get(PropertyType.of(FILE_CONTENT, \"img\")).setDigest(\"myUniqueDigest\");\n         Record record = toRecord(\"c1\", blobTextFromDoc);\n \n         // Append the record and check the results"
  },
  {
    "sha": "3d57342844e9fb8c4b3f432e8e410ca96ed9dfec",
    "filename": "nuxeo-ai-core/src/test/java/org/nuxeo/ai/enrichment/TestEnrichmentMetaData.java",
    "status": "modified",
    "additions": 36,
    "deletions": 30,
    "changes": 66,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/java/org/nuxeo/ai/enrichment/TestEnrichmentMetaData.java",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/java/org/nuxeo/ai/enrichment/TestEnrichmentMetaData.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/src/test/java/org/nuxeo/ai/enrichment/TestEnrichmentMetaData.java?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -18,32 +18,14 @@\n  */\n package org.nuxeo.ai.enrichment;\n \n-import static com.tngtech.jgiven.impl.util.AssertionUtil.assertNotNull;\n-import static java.util.Collections.singletonList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.FILE_CONTENT;\n-import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.blobTestImage;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.fromRecord;\n-import static org.nuxeo.ai.pipes.services.JacksonUtil.toRecord;\n-\n-import java.io.IOException;\n-import java.time.Instant;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import javax.inject.Inject;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.nuxeo.ai.metadata.AIMetadata;\n import org.nuxeo.ai.metadata.LabelSuggestion;\n import org.nuxeo.ai.metadata.TagSuggestion;\n import org.nuxeo.ai.pipes.types.BlobTextFromDocument;\n-import org.nuxeo.ai.pipes.types.PropertyType;\n+import org.nuxeo.ai.sdk.objects.PropertyType;\n import org.nuxeo.ecm.core.blob.BlobManager;\n import org.nuxeo.ecm.core.blob.BlobMetaImpl;\n import org.nuxeo.ecm.core.blob.ManagedBlob;\n@@ -52,6 +34,24 @@\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n+import javax.inject.Inject;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.tngtech.jgiven.impl.util.AssertionUtil.assertNotNull;\n+import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.FILE_CONTENT;\n+import static org.nuxeo.ai.enrichment.EnrichmentTestFeature.blobTestImage;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.fromRecord;\n+import static org.nuxeo.ai.pipes.services.JacksonUtil.toRecord;\n+\n @RunWith(FeaturesRunner.class)\n @Features({ EnrichmentTestFeature.class, PlatformFeature.class })\n public class TestEnrichmentMetaData {\n@@ -88,14 +88,19 @@ public void testJson() {\n                                                   .collect(Collectors.toList());\n         BlobTextFromDocument blobTextFromDoc = new BlobTextFromDocument(\"doc1\", repositoryName, null, \"File\", null);\n         blobTextFromDoc.addProperty(\"dc:title\", \"tbloby\");\n-        EnrichmentMetadata metadata = new EnrichmentMetadata.Builder(\"m1\", \"test\",\n-                blobTextFromDoc).withLabels(Collections.singletonList(new LabelSuggestion(\"my:property\", labels)))\n-                                .withTags(Collections.singletonList(new TagSuggestion(\"my:property2\", tags)))\n-                                .withDigest(\"blobxx\")\n-                                .withDigest(\"freblogs\")\n-                                .withCreator(\"bob\")\n-                                .withRawKey(\"xyz\")\n-                                .build();\n+        EnrichmentMetadata metadata = new EnrichmentMetadata.Builder(\"m1\", \"test\", blobTextFromDoc).withLabels(\n+                Collections.singletonList(new LabelSuggestion(\"my:property\", labels)))\n+                                                                                                   .withTags(\n+                                                                                                           Collections.singletonList(\n+                                                                                                                   new TagSuggestion(\n+                                                                                                                           \"my:property2\",\n+                                                                                                                           tags)))\n+                                                                                                   .withDigest(\"blobxx\")\n+                                                                                                   .withDigest(\n+                                                                                                           \"freblogs\")\n+                                                                                                   .withCreator(\"bob\")\n+                                                                                                   .withRawKey(\"xyz\")\n+                                                                                                   .build();\n         assertNotNull(metadata);\n         Record record = toRecord(\"k\", metadata);\n         EnrichmentMetadata metadataBackAgain = fromRecord(record, EnrichmentMetadata.class);\n@@ -121,12 +126,13 @@ public void testRawJson() throws IOException {\n     public void testCacheKeys() throws IOException {\n         BlobTextFromDocument blobTextFromDoc = blobTestImage(blobManager);\n         assertNull(EnrichmentUtils.makeKeyUsingBlobDigests(blobTextFromDoc, \"testin\"));\n-        PropertyType fileContentProp = new PropertyType(FILE_CONTENT, \"img\");\n+        PropertyType fileContentProp = PropertyType.of(FILE_CONTENT, \"img\");\n         blobTextFromDoc.computePropertyBlobs().get(fileContentProp).setDigest(\"47XX\");\n         assertEquals(\"testin47XX\", EnrichmentUtils.makeKeyUsingBlobDigests(blobTextFromDoc, \"testin\"));\n         ManagedBlob blob = blobTextFromDoc.computePropertyBlobs().get(fileContentProp);\n-        blobTextFromDoc.addBlob(\"TEST_AGAIN\", \"img\", new BlobMetaImpl(blob.getProviderId(), blob.getMimeType(),\n-                blob.getKey(), \"58YY\", blob.getEncoding(), blob.getLength()));\n+        blobTextFromDoc.addBlob(\"TEST_AGAIN\", \"img\",\n+                new BlobMetaImpl(blob.getProviderId(), blob.getMimeType(), blob.getKey(), \"58YY\", blob.getEncoding(),\n+                        blob.getLength()));\n         assertEquals(\"testin47XX_58YY\", EnrichmentUtils.makeKeyUsingBlobDigests(blobTextFromDoc, \"testin\"));\n     }\n }"
  },
  {
    "sha": "a3b2bd031f9c8259624a343376c34f0908681aa7",
    "filename": "nuxeo-ai-core/src/test/resources/files/htmlTensor.html",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/resources/files/htmlTensor.html",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/resources/files/htmlTensor.html",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/src/test/resources/files/htmlTensor.html?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -0,0 +1,22 @@\n+<p>Step to reproduce:</p>\n+<ul>\n+    <li>select a File document in a content view and push the Copy button</li>\n+    <li>push the Paste button</li>\n+    <li>a new document is created in the same folder:\n+        get its id (<tt>cd551cce-5322-4368-b045-e13086f250bb</tt> in my example)\n+    </li>\n+    <li>edit the new document and increment the minor version</li>\n+    <li>run the following SQL query against your database\n+        <div style=\"border-width: 20px\" class=\"preformatted\">\n+            <div class=\"preformattedContent\">\n+            <pre>select * from versions where versionableid='cd551cce-5322-4368-b045-e13086f250bb';\n+                id | versionableid | created | label | description | islatest | islatestmajor \n+                --------------------------------------------------------------------------------------\n+                ------------------------------------------------\n+                ba10d4af-9045-48bc-be46-0c293b84b408 | cd551cce-5322-4368-b045-e13086f250bb | 2016-05-26 14:38:00.815 | | | t | f\n+                </pre>\n+            </div>\n+        </div>\n+        <p>=> the label value is empty</p></li>\n+</ul>\n+<p>This value is returned when calling <tt>session.getLastVersion(docRef).getLabel()</tt>.</p>\n\\ No newline at end of file"
  },
  {
    "sha": "e4c94c602435f0156b8b659338519a2cf31d347d",
    "filename": "nuxeo-ai-core/src/test/resources/files/htmlTensorExpected.html",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/resources/files/htmlTensorExpected.html",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-core/src/test/resources/files/htmlTensorExpected.html",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-core/src/test/resources/files/htmlTensorExpected.html?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -0,0 +1,22 @@\n+<p>Step to reproduce:</p>\n+<ul>\n+    <li>select a File document in a content view and push the Copy button</li>\n+    <li>push the Paste button</li>\n+    <li>a new document is created in the same folder:\n+        get its id (<tt>cd551cce-5322-4368-b045-e13086f250bb</tt> in my example)\n+    </li>\n+    <li>edit the new document and increment the minor version</li>\n+    <li>run the following SQL query against your database\n+        <div style=\"border-width: 20px\" class=\"preformatted\">\n+            <div class=\"preformattedContent\">\n+            <pre>select * from versions where versionableid='cd551cce-5322-4368-b045-e13086f250bb';\n+                id ; versionableid ; created ; label ; description ; islatest ; islatestmajor \n+                --------------------------------------------------------------------------------------\n+                ------------------------------------------------\n+                ba10d4af-9045-48bc-be46-0c293b84b408 ; cd551cce-5322-4368-b045-e13086f250bb ; 2016-05-26 14:38:00.815 ; ; ; t ; f\n+                </pre>\n+            </div>\n+        </div>\n+        <p>=> the label value is empty</p></li>\n+</ul>\n+<p>This value is returned when calling <tt>session.getLastVersion(docRef).getLabel()</tt>.</p>\n\\ No newline at end of file"
  },
  {
    "sha": "a5df4b65a05bb32ba8b374ba338ab61e1ac56f12",
    "filename": "nuxeo-ai-model/pom.xml",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/nuxeo/nuxeo-ai/blob/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-model/pom.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo-ai/raw/01c03557e06e6b8ca328844cd8c374e324d16d0b/nuxeo-ai-model/pom.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo-ai/contents/nuxeo-ai-model/pom.xml?ref=01c03557e06e6b8ca328844cd8c374e324d16d0b",
    "patch": "@@ -3,7 +3,7 @@\n   <parent>\n     <groupId>org.nuxeo.ai</groupId>\n     <artifactId>ai-core-parent</artifactId>\n-    <version>2.5.2-SNAPSHOT</version>\n+    <version>2.6.0-SNAPSHOT</version>\n   </parent>\n   <artifactId>nuxeo-ai-model</artifactId>\n   <name>Ai custom models</name>\n@@ -16,10 +16,17 @@\n       <groupId>org.nuxeo.ai</groupId>\n       <artifactId>nuxeo-ai-core</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.nuxeo.ai</groupId>\n+      <artifactId>insight-rest-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.nuxeo.ai</groupId>\n+      <artifactId>insight-rest-objects</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.nuxeo.client</groupId>\n       <artifactId>nuxeo-java-client</artifactId>\n-      <scope>compile</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.nuxeo.elasticsearch</groupId>"
  }
]
