[
  {
    "sha": "97bf6279f74e634e33a5979ecacf4828f316c4da",
    "filename": "nuxeo-features/nuxeo-platform-oauth/src/main/java/org/nuxeo/ecm/platform/oauth2/providers/FrameIOOAuth2ServiceProvider.java",
    "status": "added",
    "additions": 167,
    "deletions": 0,
    "changes": 167,
    "blob_url": "https://github.com/nuxeo/nuxeo/blob/8ebb5c160316b1d931f6ba667d64e0d3f5636a80/nuxeo-features/nuxeo-platform-oauth/src/main/java/org/nuxeo/ecm/platform/oauth2/providers/FrameIOOAuth2ServiceProvider.java",
    "raw_url": "https://github.com/nuxeo/nuxeo/raw/8ebb5c160316b1d931f6ba667d64e0d3f5636a80/nuxeo-features/nuxeo-platform-oauth/src/main/java/org/nuxeo/ecm/platform/oauth2/providers/FrameIOOAuth2ServiceProvider.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo/contents/nuxeo-features/nuxeo-platform-oauth/src/main/java/org/nuxeo/ecm/platform/oauth2/providers/FrameIOOAuth2ServiceProvider.java?ref=8ebb5c160316b1d931f6ba667d64e0d3f5636a80",
    "patch": "@@ -0,0 +1,167 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.platform.oauth2.providers;\n+\n+import static org.nuxeo.ecm.platform.oauth2.Constants.STATE_PARAM;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.text.CharacterPredicates;\n+import org.apache.commons.text.RandomStringGenerator;\n+import org.nuxeo.ecm.core.api.LockHelper;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;\n+import com.google.api.client.auth.oauth2.BearerToken;\n+import com.google.api.client.auth.oauth2.Credential;\n+import com.google.api.client.auth.oauth2.TokenResponse;\n+import com.google.api.client.http.BasicAuthentication;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpExecuteInterceptor;\n+\n+/**\n+ * @since 11.0\n+ */\n+public class FrameIOOAuth2ServiceProvider extends NuxeoOAuth2ServiceProvider {\n+\n+    public static final String FRAMEIO_KEY_VALUE_STORE_NAME = \"frameio\";\n+\n+    public static final String FRAMEIO_OAUTH2_KVS_KEY = \"nuxeo.provider.frameio.oauth2.key\";\n+\n+    public static final String FRAMEIO_OAUTH2_KVS_STATE_KEY = \"nuxeo.provider.frameio.oauth2.state\";\n+\n+    private static final RandomStringGenerator GENERATOR = new RandomStringGenerator.Builder().filteredBy(\n+            CharacterPredicates.LETTERS, CharacterPredicates.DIGITS).withinRange('0', 'z').build();\n+\n+    @Override\n+    public String getAuthorizationUrl(HttpServletRequest request) {\n+        return getAuthorizationCodeFlow().newAuthorizationUrl()\n+                                         .setState(getState())\n+                                         .setRedirectUri(getCallbackUrl(request))\n+                                         .build();\n+    }\n+\n+    @Override\n+    public String getAuthorizationUrl(String serverURL) {\n+        return getAuthorizationCodeFlow().newAuthorizationUrl()\n+                                         .setState(getState())\n+                                         .setRedirectUri(getCallbackUrl(serverURL))\n+                                         .build();\n+    }\n+\n+    @Override\n+    public Credential handleAuthorizationCallback(HttpServletRequest request) {\n+\n+        // Checking if there was an error such as the user denied access\n+        String error = getError(request);\n+        if (error != null) {\n+            throw new NuxeoException(\"There was an error: \\\"\" + error + \"\\\".\");\n+        }\n+\n+        // Checking conditions on the \"code\" URL parameter\n+        String code = getAuthorizationCode(request);\n+        if (code == null) {\n+            // FIXME: improve the error log: error_hint, error_description\n+            throw new NuxeoException(\"There is not code provided as QueryParam.\");\n+        }\n+\n+        String state = StringUtils.isBlank(request.getParameter(STATE_PARAM)) //\n+                ? null\n+                : request.getParameter(STATE_PARAM);\n+        checkState(state);\n+\n+        try {\n+            AuthorizationCodeFlow flow = getAuthorizationCodeFlow();\n+\n+            String redirectUri = getCallbackUrl(request);\n+\n+            TokenResponse tokenResponse = flow.newTokenRequest(code)\n+                                              .setScopes(getScopes().isEmpty() ? null : getScopes())\n+                                              .setRedirectUri(redirectUri)\n+                                              .execute();\n+\n+            // Create a unique userId to use with the credential store\n+            String userId = getOrCreateServiceUser(request, tokenResponse.getAccessToken());\n+\n+            return flow.createAndStoreCredential(tokenResponse, userId);\n+        } catch (IOException e) {\n+            throw new NuxeoException(\"Failed to retrieve credential\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AuthorizationCodeFlow getAuthorizationCodeFlow() {\n+        Credential.AccessMethod method = BearerToken.authorizationHeaderAccessMethod();\n+        GenericUrl tokenServerUrl = new GenericUrl(getTokenServerURL());\n+        String clientId = getClientId();\n+        HttpExecuteInterceptor basicAuthentication = new BasicAuthentication(clientId, getClientSecret());\n+        String authorizationServerUrl = getAuthorizationServerURL();\n+\n+        return new AuthorizationCodeFlow.Builder(method, HTTP_TRANSPORT, JSON_FACTORY, tokenServerUrl,\n+                basicAuthentication, getClientId(), authorizationServerUrl)\n+                                                                           .setScopes(getScopes())\n+                                                                           .setCredentialDataStore(\n+                                                                                   getCredentialDataStore())\n+                                                                           .build();\n+    }\n+\n+    protected String getState() {\n+        KeyValueService keyValueService = Framework.getService(KeyValueService.class);\n+        KeyValueStore keyValueStore = keyValueService.getKeyValueStore(FRAMEIO_KEY_VALUE_STORE_NAME);\n+        return LockHelper.doAtomically(FRAMEIO_OAUTH2_KVS_KEY, () -> {\n+            String state = keyValueStore.getString(FRAMEIO_OAUTH2_KVS_STATE_KEY);\n+            if (StringUtils.isEmpty(state)) {\n+                state = GENERATOR.generate(25);\n+                keyValueStore.put(FRAMEIO_OAUTH2_KVS_STATE_KEY, state);\n+            }\n+\n+            return state;\n+        });\n+    }\n+\n+    protected void checkState(final String state) {\n+        KeyValueService keyValueService = Framework.getService(KeyValueService.class);\n+        KeyValueStore keyValueStore = keyValueService.getKeyValueStore(FRAMEIO_KEY_VALUE_STORE_NAME);\n+        LockHelper.doAtomically(FRAMEIO_OAUTH2_KVS_KEY, () -> {\n+            String kvsState = keyValueStore.getString(FRAMEIO_OAUTH2_KVS_STATE_KEY);\n+            if (StringUtils.isEmpty(kvsState)) {\n+                throw new NuxeoException(\"Unknown state. KVS state is null or empty\");\n+            }\n+\n+            if (!kvsState.equals(state)) {\n+                throw new NuxeoException(\"Invalid state.\");\n+            }\n+\n+            // FIXME to discuss with the team, removing the state brings two issues:\n+            // - WEB UI is calling the #getAuthorizationUrl one time at the refresh. We cannot delete the state otherwise it will fail, when we click on the FrameIOProvider button\n+            // - Race condition: First Call create the state, the second call wait and will find the sate. But at meanwhile it might be deleted by the first call\n+\n+            // Possible solutions to fix :up, is to implement a refresh logic\n+            // keyValueStore.put(FRAMEIO_OAUTH2_KVS_STATE_KEY, \"\");\n+        });\n+    }\n+\n+}"
  },
  {
    "sha": "cd94031d645bef5a1f8e75f4c4dbadde96f57221",
    "filename": "nuxeo-features/nuxeo-platform-oauth/src/main/resources/META-INF/MANIFEST.MF",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/nuxeo/nuxeo/blob/8ebb5c160316b1d931f6ba667d64e0d3f5636a80/nuxeo-features/nuxeo-platform-oauth/src/main/resources/META-INF/MANIFEST.MF",
    "raw_url": "https://github.com/nuxeo/nuxeo/raw/8ebb5c160316b1d931f6ba667d64e0d3f5636a80/nuxeo-features/nuxeo-platform-oauth/src/main/resources/META-INF/MANIFEST.MF",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo/contents/nuxeo-features/nuxeo-platform-oauth/src/main/resources/META-INF/MANIFEST.MF?ref=8ebb5c160316b1d931f6ba667d64e0d3f5636a80",
    "patch": "@@ -11,6 +11,7 @@ Nuxeo-Component: OSGI-INF/authentication-contrib.xml,\n  OSGI-INF/schema-contrib.xml,\n  OSGI-INF/directory-contrib.xml,\n  OSGI-INF/oauth2clientservice-framework.xml,\n- OSGI-INF/marshallers-contrib.xml\n+ OSGI-INF/marshallers-contrib.xml,\n+ OSGI-INF/frameio-config.xml\n Bundle-SymbolicName: org.nuxeo.ecm.platform.oauth;singleton:=true\n Nuxeo-WebModule: org.nuxeo.ecm.webengine.app.WebEngineModule;name=oauth2;extends=base;headless=true;package=org/nuxeo/ecm/webengine/oauth2"
  },
  {
    "sha": "56ceb3b05c04305add138ff8202c33ecb40ac856",
    "filename": "nuxeo-features/nuxeo-platform-oauth/src/main/resources/OSGI-INF/frameio-config.xml",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/nuxeo/nuxeo/blob/8ebb5c160316b1d931f6ba667d64e0d3f5636a80/nuxeo-features/nuxeo-platform-oauth/src/main/resources/OSGI-INF/frameio-config.xml",
    "raw_url": "https://github.com/nuxeo/nuxeo/raw/8ebb5c160316b1d931f6ba667d64e0d3f5636a80/nuxeo-features/nuxeo-platform-oauth/src/main/resources/OSGI-INF/frameio-config.xml",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo/contents/nuxeo-features/nuxeo-platform-oauth/src/main/resources/OSGI-INF/frameio-config.xml?ref=8ebb5c160316b1d931f6ba667d64e0d3f5636a80",
    "patch": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.frameio.core.contributions\" version=\"1.0.0\">\n+\n+  <require>org.nuxeo.ecm.platform.oauth2.providers.OAuth2ServiceProviderRegistry</require>\n+\n+  <documentation>\n+    Management of FrameIO configuration.\n+  </documentation>\n+\n+  <extension target=\"org.nuxeo.ecm.platform.oauth2.providers.OAuth2ServiceProviderRegistry\" point=\"providers\">\n+    <provider>\n+      <name>frameio</name>\n+      <description>Frame IO Provider</description>\n+      <class>org.nuxeo.ecm.platform.oauth2.providers.FrameIOOAuth2ServiceProvider</class>\n+      <tokenServerURL>https://applications.frame.io/oauth2/token</tokenServerURL>\n+      <authorizationServerURL>https://applications.frame.io/oauth2/auth</authorizationServerURL>\n+      <scope>team.read</scope>\n+      <scope>account.read</scope>\n+      <scope>offline</scope>\n+    </provider>\n+  </extension>\n+\n+</component>"
  }
]
