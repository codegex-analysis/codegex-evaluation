[
  {
    "sha": "58823c66b9cf8a8fc2fa36052dbde9fd9367f3a0",
    "filename": "admin/src/main/java/org/bahmni/module/admin/csv/models/SectionPositionValue.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/csv/models/SectionPositionValue.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/csv/models/SectionPositionValue.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/csv/models/SectionPositionValue.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -0,0 +1,60 @@\n+package org.bahmni.module.admin.csv.models;\n+\n+public class SectionPositionValue {\n+\n+    private String value;\n+    private String sectionIndex;\n+    private int valueIndex;\n+\n+    private int multiSelectIndex;\n+    private int addmoreIndex;\n+\n+    public SectionPositionValue(String value, String sectionIndex, int valueIndex, int multiSelectIndex, int addmoreIndex) {\n+        this.value = value;\n+        this.sectionIndex = sectionIndex;\n+        this.valueIndex = valueIndex;\n+        this.multiSelectIndex = multiSelectIndex;\n+        this.addmoreIndex = addmoreIndex;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getSectionIndex() {\n+        return sectionIndex;\n+    }\n+\n+    public void setSectionIndex(String sectionIndex) {\n+        this.sectionIndex = sectionIndex;\n+    }\n+\n+    public int getValueIndex() {\n+        return valueIndex;\n+    }\n+\n+    public void setValueIndex(int valueIndex) {\n+        this.valueIndex = valueIndex;\n+    }\n+\n+    public int getMultiSelectIndex() {\n+        return multiSelectIndex;\n+    }\n+\n+    public void setMultiSelectIndex(int multiSelectIndex) {\n+        this.multiSelectIndex = multiSelectIndex;\n+    }\n+\n+    public int getAddmoreIndex() {\n+        return addmoreIndex;\n+    }\n+\n+    public void setAddmoreIndex(int addmoreIndex) {\n+        this.addmoreIndex = addmoreIndex;\n+    }\n+\n+}"
  },
  {
    "sha": "6bead3c897913e0a853a461a5dddb73c4f08d190",
    "filename": "admin/src/main/java/org/bahmni/module/admin/csv/persister/EncounterPersister.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/csv/persister/EncounterPersister.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/csv/persister/EncounterPersister.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/csv/persister/EncounterPersister.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -46,14 +46,16 @@\n     private String patientMatchingAlgorithmClassName;\n     private boolean shouldMatchExactPatientId;\n     private String loginUuid;\n+    private boolean shouldPerformForm2Validations;\n \n     private static final Logger log = Logger.getLogger(EncounterPersister.class);\n \n-    public void init(UserContext userContext, String patientMatchingAlgorithmClassName, boolean shouldMatchExactPatientId, String loginUuid) {\n+    public void init(UserContext userContext, String patientMatchingAlgorithmClassName, boolean shouldMatchExactPatientId, String loginUuid, boolean shouldPerformForm2Validations) {\n         this.userContext = userContext;\n         this.patientMatchingAlgorithmClassName = patientMatchingAlgorithmClassName;\n         this.shouldMatchExactPatientId = shouldMatchExactPatientId;\n         this.loginUuid = loginUuid;\n+        this.shouldPerformForm2Validations = shouldPerformForm2Validations;\n     }\n \n     @Override\n@@ -84,7 +86,7 @@ public Messages persist(MultipleEncounterRow multipleEncounterRow) {\n                     return noMatchingProviders(multipleEncounterRow);\n                 }\n \n-                List<BahmniEncounterTransaction> bahmniEncounterTransactions = bahmniEncounterTransactionImportService.getBahmniEncounterTransaction(multipleEncounterRow, patient);\n+                List<BahmniEncounterTransaction> bahmniEncounterTransactions = bahmniEncounterTransactionImportService.getBahmniEncounterTransaction(multipleEncounterRow, patient, shouldPerformForm2Validations);\n \n                 for (BahmniEncounterTransaction bahmniEncounterTransaction : bahmniEncounterTransactions) {\n                     bahmniEncounterTransaction.setLocationUuid(loginUuid);"
  },
  {
    "sha": "46e68d8d7d458e94f9e4f6d897a85a1b90052881",
    "filename": "admin/src/main/java/org/bahmni/module/admin/csv/service/FormFieldPathGeneratorService.java",
    "status": "added",
    "additions": 146,
    "deletions": 0,
    "changes": 146,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/csv/service/FormFieldPathGeneratorService.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/csv/service/FormFieldPathGeneratorService.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/csv/service/FormFieldPathGeneratorService.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -0,0 +1,146 @@\n+package org.bahmni.module.admin.csv.service;\n+\n+import org.bahmni.csv.KeyValue;\n+import org.bahmni.form2.service.FormFieldPathService;\n+import org.bahmni.module.admin.csv.models.SectionPositionValue;\n+import org.openmrs.module.emrapi.encounter.domain.EncounterTransaction;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.bahmni.module.admin.observation.CSVObservationHelper.getLastItem;\n+import static org.springframework.util.CollectionUtils.isEmpty;\n+\n+@Component\n+public class FormFieldPathGeneratorService {\n+\n+    private static final String FORM_NAMESPACE = \"Bahmni\";\n+    private static final String FORM_FIELD_PATH_SEPARATOR = \"/\";\n+    private Map<String, Boolean> formFieldPathAddmoreAttribute = new HashMap<>();\n+    private Map<String, List<Integer>> addmoreSectionIndices = new HashMap<>();\n+\n+    private FormFieldPathService formFieldPathService;\n+\n+    @Autowired\n+    public FormFieldPathGeneratorService(FormFieldPathService formFieldPathService) {\n+        this.formFieldPathService = formFieldPathService;\n+    }\n+\n+    public void setFormNamespaceAndFieldPath(List<EncounterTransaction.Observation> form2Observations, List<String> form2CSVHeaderParts) {\n+        if (isEmpty(form2Observations)) {\n+            return;\n+        }\n+        final EncounterTransaction.Observation observation = getLastItem(form2Observations);\n+        final String formFieldPath = formFieldPathService.getFormFieldPath(form2CSVHeaderParts);\n+        observation.setFormFieldPath(formFieldPath);\n+        observation.setFormNamespace(FORM_NAMESPACE);\n+    }\n+\n+    public void setFormNamespaceAndFieldPathForMultiSelectObs(List<EncounterTransaction.Observation> form2Observations, List<String> form2CSVHeaderParts, List<KeyValue> multiSelectForm2CSVObservations) {\n+        if (isEmpty(form2Observations)) {\n+            return;\n+        }\n+        int prevObsCount = form2Observations.size() - multiSelectForm2CSVObservations.size();\n+        for(int i = 0; i < multiSelectForm2CSVObservations.size(); i++) {\n+            final EncounterTransaction.Observation observation = form2Observations.get(prevObsCount + i);\n+            final String formFieldPath = formFieldPathService.getFormFieldPath(form2CSVHeaderParts);\n+            observation.setFormFieldPath(formFieldPath);\n+            observation.setFormNamespace(FORM_NAMESPACE);\n+        }\n+    }\n+\n+    public void setFormNamespaceAndFieldPathForAddmoreObs(List<EncounterTransaction.Observation> form2Observations, List<String> form2CSVHeaderParts, List<KeyValue> addmoreForm2CSVObservations) {\n+        if (isEmpty(form2Observations)) {\n+            return;\n+        }\n+        int prevObsCount = form2Observations.size() - addmoreForm2CSVObservations.size();\n+        final String formFieldPath = formFieldPathService.getFormFieldPath(form2CSVHeaderParts);\n+        String[] tokens = formFieldPath.split(FORM_FIELD_PATH_SEPARATOR);\n+        int formFieldPathPosition = tokens.length - 1;\n+        String path = tokens[formFieldPathPosition];\n+        String controlIdPrefix = path.split(\"-\")[0];\n+\n+        for(int i = 0; i < addmoreForm2CSVObservations.size(); i++) {\n+            final EncounterTransaction.Observation observation = form2Observations.get(prevObsCount + i);\n+            tokens[formFieldPathPosition] = controlIdPrefix + \"-\" + i;\n+            observation.setFormFieldPath(String.join(FORM_FIELD_PATH_SEPARATOR, tokens));\n+            observation.setFormNamespace(FORM_NAMESPACE);\n+        }\n+    }\n+\n+    public void setFormNamespaceAndFieldPathForJsonValue(List<EncounterTransaction.Observation> form2Observations, List<String> form2CSVHeaderParts, List<KeyValue> addmoreSectionCSVObservations, List<SectionPositionValue> sectionPositionValues) {\n+        if (isEmpty(form2Observations)) {\n+            return;\n+        }\n+\n+        updateFormFieldPathWithAddmoreAttribute(form2CSVHeaderParts);\n+\n+        int prevObsCount = form2Observations.size() - addmoreSectionCSVObservations.size();\n+        final String formFieldPath = formFieldPathService.getFormFieldPath(form2CSVHeaderParts);\n+\n+        for(int i = 0; i < addmoreSectionCSVObservations.size(); i++) {\n+            final EncounterTransaction.Observation observation = form2Observations.get(prevObsCount + i);\n+            updateObsWithFormFieldPath(observation, form2CSVHeaderParts, sectionPositionValues, prevObsCount, formFieldPath, i);\n+        }\n+    }\n+\n+    private void updateObsWithFormFieldPath(EncounterTransaction.Observation observation, List<String> form2CSVHeaderParts, List<SectionPositionValue> sectionPositionValues, int prevObsCount, String formFieldPath, int csvObservationIndex) {\n+        String[] tokens = formFieldPath.split(FORM_FIELD_PATH_SEPARATOR);\n+        List<Integer> indicesInJson = addmoreSectionIndices.get(form2CSVHeaderParts.toString());\n+        String sectionPositionIndex = sectionPositionValues.get(csvObservationIndex).getSectionIndex();\n+\n+        // update form field path for sections based on JSON value\n+        for(int j = 0; j < indicesInJson.size() - 1; j++) {\n+            int addmoreSectionIndex = 0;\n+            int sectionIndexPosition = indicesInJson.get(j);\n+            String partialFormFieldPath = tokens[sectionIndexPosition];\n+            String controlIdPrefix = partialFormFieldPath.split(\"-\")[0];\n+            if(sectionPositionIndex.contains(FORM_FIELD_PATH_SEPARATOR)) {\n+                String[] indices = sectionPositionIndex.split(FORM_FIELD_PATH_SEPARATOR);\n+                addmoreSectionIndex = Integer.parseInt(indices[j+1]);\n+            } else {\n+                addmoreSectionIndex = Integer.parseInt(sectionPositionIndex);\n+            }\n+            tokens[sectionIndexPosition] = controlIdPrefix + \"-\" + addmoreSectionIndex;\n+        }\n+\n+        // update form field path for section having observation.\n+        int sectionWithObsIndexPosition = indicesInJson.get(indicesInJson.size() - 1);\n+        String partialFormFieldPath = tokens[sectionWithObsIndexPosition];\n+        String controlIdPrefix = partialFormFieldPath.split(\"-\")[0];\n+        tokens[sectionWithObsIndexPosition] = controlIdPrefix + \"-\" + sectionPositionValues.get(csvObservationIndex).getValueIndex();\n+\n+        if(sectionPositionValues.get(csvObservationIndex).getAddmoreIndex() != -1) {\n+            int obsAddmoreIndex = sectionPositionValues.get(csvObservationIndex).getAddmoreIndex();\n+            String addmoreFormControlId = tokens[tokens.length - 1];\n+            String addmoreControlIdPrefix = addmoreFormControlId.split(\"-\")[0];\n+            tokens[tokens.length - 1] = addmoreControlIdPrefix + \"-\" + obsAddmoreIndex;\n+        }\n+        observation.setFormFieldPath(String.join(FORM_FIELD_PATH_SEPARATOR, tokens));\n+        observation.setFormNamespace(FORM_NAMESPACE);\n+    }\n+\n+    private void updateFormFieldPathWithAddmoreAttribute(List<String> form2CSVHeaderParts) {\n+        if(formFieldPathAddmoreAttribute.get(form2CSVHeaderParts.toString()) == null) {\n+           List<Integer> indices = new ArrayList<>();\n+           boolean isFirstAddmoreIdentified = false;\n+           int intialSectionsWithoutAddmore = 0;\n+           for (int i = 1; i < form2CSVHeaderParts.size(); i++) {\n+               List<String> headerPartsList = form2CSVHeaderParts.subList(0, i + 1);\n+               boolean addmore = formFieldPathService.isAddmore(headerPartsList);\n+               if(!addmore && !isFirstAddmoreIdentified) {\n+                   isFirstAddmoreIdentified = true;\n+                   intialSectionsWithoutAddmore++;\n+               }\n+               formFieldPathAddmoreAttribute.put(headerPartsList.toString(), addmore);\n+               if(addmore)\n+                   indices.add(i - intialSectionsWithoutAddmore);\n+           }\n+           addmoreSectionIndices.put(form2CSVHeaderParts.toString(), indices);\n+        }\n+    }\n+}"
  },
  {
    "sha": "4a8a1168c9e4c957f2b0d889dd41a4224179685b",
    "filename": "admin/src/main/java/org/bahmni/module/admin/encounter/BahmniEncounterTransactionImportService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/encounter/BahmniEncounterTransactionImportService.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/encounter/BahmniEncounterTransactionImportService.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/encounter/BahmniEncounterTransactionImportService.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -37,7 +37,7 @@ public BahmniEncounterTransactionImportService(EncounterService encounterService\n         this.fromETObsToBahmniObs = fromETObsToBahmniObs;\n     }\n \n-    public List<BahmniEncounterTransaction> getBahmniEncounterTransaction(MultipleEncounterRow multipleEncounterRow, Patient patient) throws ParseException {\n+    public List<BahmniEncounterTransaction> getBahmniEncounterTransaction(MultipleEncounterRow multipleEncounterRow, Patient patient, boolean shouldPerformForm2Validations) throws ParseException {\n         if (multipleEncounterRow.encounterRows == null || multipleEncounterRow.encounterRows.isEmpty())\n             return new ArrayList<>();\n \n@@ -51,7 +51,7 @@ public BahmniEncounterTransactionImportService(EncounterService encounterService\n         String visitType = multipleEncounterRow.visitType;\n \n         for (EncounterRow encounterRow : multipleEncounterRow.getNonEmptyEncounterRows()) {\n-            List<EncounterTransaction.Observation> allObservations = observationMapper.getObservations(encounterRow);\n+            List<EncounterTransaction.Observation> allObservations = observationMapper.getObservations(encounterRow, shouldPerformForm2Validations);\n             List<BahmniDiagnosisRequest> allDiagnosis = diagnosisMapper.getBahmniDiagnosis(encounterRow);\n \n             BahmniEncounterTransaction bahmniEncounterTransaction = new BahmniEncounterTransaction();"
  },
  {
    "sha": "69293b19f8c86e81baf26a6a838f035a389c677b",
    "filename": "admin/src/main/java/org/bahmni/module/admin/observation/CSVObservationHelper.java",
    "status": "modified",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/CSVObservationHelper.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/CSVObservationHelper.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/observation/CSVObservationHelper.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -37,6 +37,11 @@\n     private static final String FORM2_TYPE = \"form2\";\n     private static final String OBS_PATH_SPLITTER_PROPERTY = \"bahmni.admin.csv.upload.obsPath.splitter\";\n     private static final String DEFAULT_OBSPATH_SPLITTER = \".\";\n+    private static final String MULTI_SELECT_OBS_SPLITTER_PROPERTY = \"bahmni.admin.csv.upload.obs.multiSelect.splitter\";\n+    private static final String DEFAULT_MULTI_SELECT_OBS_SPLITTER = \"|\";\n+    private static final String ADDMORE_OBS_SPLITTER_PROPERTY = \"bahmni.admin.csv.upload.obs.addmore.splitter\";\n+    private static final String DEFAULT_ADDMORE_OBS_SPLITTER = \"|\";\n+    private static final String DATE = \"Date\";\n     private final ConceptCache conceptCache;\n     private final ConceptService conceptService;\n     private AdministrationService administrationService;\n@@ -60,6 +65,18 @@ protected Concept getConcept(String conceptName) {\n         return conceptCache.getConcept(conceptName);\n     }\n \n+    public void createObservations(List<Observation> observations, Date encounterDate,\n+                                   List<KeyValue> obsRows, List<String> conceptNames) throws ParseException {\n+        Observation existingObservation = getRootObservationIfExists(observations, conceptNames, null);\n+        if (existingObservation == null) {\n+            for(KeyValue obsRow : obsRows)\n+                observations.add(createObservation(conceptNames, encounterDate, obsRow));\n+        } else {\n+            for(KeyValue obsRow : obsRows)\n+                updateObservation(conceptNames, existingObservation, encounterDate, obsRow);\n+        }\n+    }\n+\n     public void createObservations(List<Observation> observations, Date encounterDate,\n                                    KeyValue obsRow, List<String> conceptNames) throws ParseException {\n         Observation existingObservation = getRootObservationIfExists(observations, conceptNames, null);\n@@ -115,6 +132,8 @@ private Observation createObservation(List<String> conceptNames, Date encounterD\n             observation.setValue(getValue(obsRow, obsConcept));\n             if (obsConcept.getDatatype().isNumeric()) {\n                 validateAndUpdateObservationInterpretation(obsRow, obsConcept, observation);\n+            } else if(obsConcept.getDatatype().isDate()) {\n+                observation.getConcept().setDataType(DATE);\n             }\n         } else {\n             conceptNames.remove(0);\n@@ -175,6 +194,41 @@ private String getObsPathSplitter() {\n         return isNotBlank(obsPathSplitter) ? obsPathSplitter : DEFAULT_OBSPATH_SPLITTER;\n     }\n \n+    public List<String> getMultiSelectObs(KeyValue csvObservation) {\n+        String multiSelectRawValue = csvObservation.getValue();\n+        return isNotBlank(multiSelectRawValue) ? new ArrayList<>(asList(multiSelectRawValue.split(String.format(\"\\\\%s\", getMultiSelectObsSplitter()))))\n+                : new ArrayList<>();\n+    }\n+\n+    public List<String> getAddmoreObs(KeyValue csvObservation) {\n+        String addmoreRawValue = csvObservation.getValue();\n+        return isNotBlank(addmoreRawValue) ? new ArrayList<>(asList(addmoreRawValue.split(String.format(\"\\\\%s\", getAddmoreObsSplitter()))))\n+                : new ArrayList<>();\n+    }\n+\n+    private String getMultiSelectObsSplitter() {\n+        final String multiSelectObsSplitter = administrationService.getGlobalProperty(MULTI_SELECT_OBS_SPLITTER_PROPERTY);\n+        return isNotBlank(multiSelectObsSplitter) ? multiSelectObsSplitter : DEFAULT_MULTI_SELECT_OBS_SPLITTER;\n+    }\n+\n+    private String getAddmoreObsSplitter() {\n+        final String addmoreObsSplitter = administrationService.getGlobalProperty(ADDMORE_OBS_SPLITTER_PROPERTY);\n+        return isNotBlank(addmoreObsSplitter) ? addmoreObsSplitter : DEFAULT_ADDMORE_OBS_SPLITTER;\n+    }\n+\n+    public List<String> getMultiSelectObsForJsonValue(String jsonValue) {\n+        List<String> multiSelectValues = new ArrayList<>();\n+        if(isNotBlank(jsonValue))\n+            multiSelectValues.addAll(asList(jsonValue.split(String.format(\"\\\\%s\", getMultiSelectObsSplitter()))));\n+        return multiSelectValues;\n+    }\n+\n+    public List<String> getAddmoreObsForJsonValue(String jsonValue) {\n+        List<String> addmoreValues = new ArrayList<>();\n+        if(isNotBlank(jsonValue))\n+            addmoreValues.addAll(asList(jsonValue.split(String.format(\"\\\\%s\", getAddmoreObsSplitter()))));\n+        return addmoreValues;\n+    }\n     public boolean isForm2Type(KeyValue obsRow) {\n         String key = obsRow.getKey();\n         if (StringUtils.isNotBlank(key)) {"
  },
  {
    "sha": "9b98944513b3e4a4417eb8921e97265a23d68420",
    "filename": "admin/src/main/java/org/bahmni/module/admin/observation/ObservationMapper.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/ObservationMapper.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/ObservationMapper.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/observation/ObservationMapper.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -30,4 +30,13 @@ public ObservationMapper(ConceptService conceptService) {\n         return observations;\n     }\n \n+    public List<EncounterTransaction.Observation> getObservations(EncounterRow encounterRow, boolean shouldPerformForm2Validations) throws ParseException {\n+        final List<EncounterTransaction.Observation> observations = new ArrayList<>();\n+        for (CSVObsHandler csvObsHandler : csvObsHandlers) {\n+            final List<EncounterTransaction.Observation> allObs = csvObsHandler.handle(encounterRow, shouldPerformForm2Validations);\n+            if(allObs != null)\n+                observations.addAll(allObs);\n+        }\n+        return observations;\n+    }\n }"
  },
  {
    "sha": "cf4dee55043343aa70c9f4540fb7bdcad6afe1e2",
    "filename": "admin/src/main/java/org/bahmni/module/admin/observation/handler/CSVObsHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/handler/CSVObsHandler.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/handler/CSVObsHandler.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/observation/handler/CSVObsHandler.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -13,4 +13,6 @@\n     List<KeyValue> getRelatedCSVObs(EncounterRow encounterRow);\n \n     List<EncounterTransaction.Observation> handle(EncounterRow encounterRow) throws ParseException;\n+\n+    List<EncounterTransaction.Observation> handle(EncounterRow encounterRow, boolean shouldPerformForm2Validations) throws ParseException;\n }"
  },
  {
    "sha": "45008e29a0bcfcb510eff9576413e23d76f86eb3",
    "filename": "admin/src/main/java/org/bahmni/module/admin/observation/handler/Form1CSVObsHandler.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/handler/Form1CSVObsHandler.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/handler/Form1CSVObsHandler.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/observation/handler/Form1CSVObsHandler.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -46,4 +46,9 @@ public Form1CSVObsHandler(CSVObservationHelper csvObservationHelper) {\n         return observations;\n     }\n \n+    @Override\n+    public List<EncounterTransaction.Observation> handle(EncounterRow encounterRow, boolean shouldPerformForm2Validations) throws ParseException {\n+        return null;\n+    }\n+\n }"
  },
  {
    "sha": "ca7ba9a529097423f3e2d5c34470e02df7da5342",
    "filename": "admin/src/main/java/org/bahmni/module/admin/observation/handler/Form2CSVObsHandler.java",
    "status": "modified",
    "additions": 218,
    "deletions": 15,
    "changes": 233,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/handler/Form2CSVObsHandler.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/main/java/org/bahmni/module/admin/observation/handler/Form2CSVObsHandler.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/main/java/org/bahmni/module/admin/observation/handler/Form2CSVObsHandler.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -2,36 +2,47 @@\n \n import org.bahmni.csv.KeyValue;\n import org.bahmni.module.admin.csv.models.EncounterRow;\n+import org.bahmni.module.admin.csv.models.SectionPositionValue;\n+import org.bahmni.module.admin.csv.service.FormFieldPathGeneratorService;\n+import org.bahmni.module.admin.csv.utils.CSVUtils;\n import org.bahmni.module.admin.observation.CSVObservationHelper;\n import org.bahmni.form2.service.FormFieldPathService;\n import org.openmrs.api.APIException;\n import org.openmrs.module.emrapi.encounter.domain.EncounterTransaction;\n+import org.openmrs.module.webservices.rest.SimpleObject;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n import java.text.ParseException;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.*;\n import java.util.stream.Collectors;\n \n import static java.lang.String.format;\n import static java.util.Arrays.asList;\n import static org.apache.commons.lang.StringUtils.isNotBlank;\n import static org.bahmni.module.admin.observation.CSVObservationHelper.getLastItem;\n-import static org.springframework.util.CollectionUtils.isEmpty;\n \n @Component\n public class Form2CSVObsHandler implements CSVObsHandler {\n \n-    private static final String FORM_NAMESPACE = \"Bahmni\";\n+    private static final String DATE = \"Date\";\n+    private static final String ATTRIBUTE_QUERY_SEPARATOR = \"?\";\n+    private static final String ATTRIBUTE_SEPARATOR = \"&\";\n+    private static final String ATTRIBUTE_ISJSON = \"isJson\";\n+    private static final String SECTION_SPLITTER = \"/\";\n+    private static final String KEY_SECTION_VALUES = \"values\";\n+    private static final int NOT_MULTISELECT_OBS_INDEX = -1;\n+    private static final int NOT_ADDMORE_OBS_INDEX = -1;\n \n     private CSVObservationHelper csvObservationHelper;\n     private FormFieldPathService formFieldPathService;\n+    private FormFieldPathGeneratorService formFieldPathGeneratorService;\n \n     @Autowired\n-    public Form2CSVObsHandler(CSVObservationHelper csvObservationHelper, FormFieldPathService formFieldPathService) {\n+    public Form2CSVObsHandler(CSVObservationHelper csvObservationHelper, FormFieldPathService formFieldPathService, FormFieldPathGeneratorService formFieldPathGeneratorService) {\n         this.csvObservationHelper = csvObservationHelper;\n         this.formFieldPathService = formFieldPathService;\n+        this.formFieldPathGeneratorService = formFieldPathGeneratorService;\n     }\n \n     @Override\n@@ -51,24 +62,45 @@ public Form2CSVObsHandler(CSVObservationHelper csvObservationHelper, FormFieldPa\n                 csvObservationHelper.verifyNumericConceptValue(form2CSVObservation, form2CSVHeaderParts);\n                 csvObservationHelper.createObservations(form2Observations, encounterRow.getEncounterDate(),\n                         form2CSVObservation, getConceptNames(form2CSVHeaderParts));\n-                setFormNamespaceAndFieldPath(form2Observations, form2CSVHeaderParts);\n+                formFieldPathGeneratorService.setFormNamespaceAndFieldPath(form2Observations, form2CSVHeaderParts);\n             }\n         }\n         return form2Observations;\n     }\n \n-    private void verifyCSVHeaderHasConcepts(KeyValue form2CSVObservation, List<String> form2CSVHeaderParts) {\n-        if (form2CSVHeaderParts.size() <= 1) {\n-            throw new APIException(format(\"No concepts found in %s\", form2CSVObservation.getKey()));\n+    @Override\n+    public List<EncounterTransaction.Observation> handle(EncounterRow encounterRow, boolean shouldPerformForm2Validations) throws ParseException {\n+        if(!shouldPerformForm2Validations)\n+            return handle(encounterRow);\n+        List<EncounterTransaction.Observation> form2Observations = new ArrayList<>();\n+        List<KeyValue> form2CSVObservations = getRelatedCSVObs(encounterRow);\n+        for (KeyValue form2CSVObservation : form2CSVObservations) {\n+            Map<String, Boolean> headerAttributes = parseCSVHeader(form2CSVObservation);\n+            boolean isJsonAttribute = headerAttributes.getOrDefault(ATTRIBUTE_ISJSON, false);\n+            final List<String> form2CSVHeaderParts = getCSVHeaderPartsByIgnoringForm2KeyWord(form2CSVObservation);\n+            final boolean validCSVHeader = formFieldPathService.isValidCSVHeader(form2CSVHeaderParts);\n+            if(!validCSVHeader)\n+                throw new APIException(format(\"No concepts found in %s\", form2CSVObservation.getKey()));\n+            if (isNotBlank(form2CSVObservation.getValue())) {\n+                if(isJsonAttribute) {\n+                    processJsonConceptValue(form2CSVObservation, form2CSVHeaderParts, form2Observations, encounterRow);\n+                } else {\n+                    verifyCSVHeaderHasConcepts(form2CSVObservation, form2CSVHeaderParts);\n+                    csvObservationHelper.verifyNumericConceptValue(form2CSVObservation, form2CSVHeaderParts);\n+                    verifyForMultiSelect(encounterRow, form2Observations, form2CSVObservation, form2CSVHeaderParts);\n+                    verifyForAddMore(encounterRow, form2Observations, form2CSVObservation, form2CSVHeaderParts);\n+                    verifyAndValidateObs(encounterRow, form2Observations, form2CSVObservation, form2CSVHeaderParts);\n+                }\n+            } else {\n+                verifyForMandatoryObs(form2CSVHeaderParts);\n+            }\n         }\n+        return form2Observations;\n     }\n \n-    private void setFormNamespaceAndFieldPath(List<EncounterTransaction.Observation> form2Observations, List<String> form2CSVHeaderParts) {\n-        if (!isEmpty(form2Observations)) {\n-            final EncounterTransaction.Observation observation = getLastItem(form2Observations);\n-            final String formFieldPath = formFieldPathService.getFormFieldPath(form2CSVHeaderParts);\n-            observation.setFormFieldPath(formFieldPath);\n-            observation.setFormNamespace(FORM_NAMESPACE);\n+    private void verifyCSVHeaderHasConcepts(KeyValue form2CSVObservation, List<String> form2CSVHeaderParts) {\n+        if (form2CSVHeaderParts.size() <= 1) {\n+            throw new APIException(format(\"No concepts found in %s\", form2CSVObservation.getKey()));\n         }\n     }\n \n@@ -82,4 +114,175 @@ private void setFormNamespaceAndFieldPath(List<EncounterTransaction.Observation>\n     private List<String> getConceptNames(List<String> form2CSVHeaderParts) {\n         return asList(getLastItem(form2CSVHeaderParts));\n     }\n+\n+    private void verifyForMultiSelect(EncounterRow encounterRow, List<EncounterTransaction.Observation> form2Observations, KeyValue form2CSVObservation, List<String> form2CSVHeaderParts) throws ParseException {\n+        boolean isMultiSelectObs = formFieldPathService.isMultiSelectObs(form2CSVHeaderParts);\n+        if(isMultiSelectObs) {\n+            processMultiSelectObs(encounterRow, form2Observations, form2CSVObservation, form2CSVHeaderParts);\n+        }\n+    }\n+\n+    private void verifyForAddMore(EncounterRow encounterRow, List<EncounterTransaction.Observation> form2Observations, KeyValue form2CSVObservation, List<String> form2CSVHeaderParts) throws ParseException {\n+        boolean isAddmoreConceptObs = formFieldPathService.isAddmore(form2CSVHeaderParts);\n+        boolean isMultiSelectObs = formFieldPathService.isMultiSelectObs(form2CSVHeaderParts);\n+        if(!isMultiSelectObs && isAddmoreConceptObs) {\n+            processAddmoreConcept(encounterRow, form2Observations, form2CSVObservation, form2CSVHeaderParts);\n+        }\n+    }\n+\n+    private void verifyForMandatoryObs(List<String> form2CSVHeaderParts) {\n+        boolean mandatoryFieldMissing = formFieldPathService.isMandatory(form2CSVHeaderParts);\n+        if(mandatoryFieldMissing) {\n+            throw new APIException(format(\"Empty value provided for mandatory field %s\", form2CSVHeaderParts.get(form2CSVHeaderParts.size()-1)));\n+        }\n+    }\n+\n+    private void verifyAndValidateObs(EncounterRow encounterRow, List<EncounterTransaction.Observation> form2Observations, KeyValue form2CSVObservation, List<String> form2CSVHeaderParts) throws ParseException {\n+        boolean isMultiSelectObs = formFieldPathService.isMultiSelectObs(form2CSVHeaderParts);\n+        boolean isAddmoreConceptObs = formFieldPathService.isAddmore(form2CSVHeaderParts);\n+        if(!isMultiSelectObs && !isAddmoreConceptObs) {\n+            csvObservationHelper.createObservations(form2Observations, encounterRow.getEncounterDate(),\n+                    form2CSVObservation, getConceptNames(form2CSVHeaderParts));\n+            formFieldPathGeneratorService.setFormNamespaceAndFieldPath(form2Observations, form2CSVHeaderParts);\n+            validateObsForFutureDate(form2Observations, form2CSVObservation, form2CSVHeaderParts);\n+        }\n+    }\n+\n+    private void processMultiSelectObs(EncounterRow encounterRow, List<EncounterTransaction.Observation> form2Observations, KeyValue form2CSVObservation, List<String> form2CSVHeaderParts) throws ParseException {\n+        List<String> multiSelectValues = csvObservationHelper.getMultiSelectObs(form2CSVObservation);\n+        List<KeyValue> multiSelectCSVObservations = processMultipleValues(encounterRow, form2Observations, form2CSVObservation, form2CSVHeaderParts, multiSelectValues);\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPathForMultiSelectObs(form2Observations, form2CSVHeaderParts, multiSelectCSVObservations);\n+    }\n+\n+    private void processAddmoreConcept(EncounterRow encounterRow, List<EncounterTransaction.Observation> form2Observations, KeyValue form2CSVObservation, List<String> form2CSVHeaderParts) throws ParseException {\n+        List<String> multiSelectValues = csvObservationHelper.getAddmoreObs(form2CSVObservation);\n+        List<KeyValue> addmoreCSVObservations = processMultipleValues(encounterRow, form2Observations, form2CSVObservation, form2CSVHeaderParts, multiSelectValues);\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPathForAddmoreObs(form2Observations, form2CSVHeaderParts, addmoreCSVObservations);\n+    }\n+\n+    private List<KeyValue> processMultipleValues(EncounterRow encounterRow, List<EncounterTransaction.Observation> form2Observations, KeyValue form2CSVObservation, List<String> form2CSVHeaderParts, List<String> multipleValues) throws ParseException {\n+        List<KeyValue> form2CSVObservations = new ArrayList<>();\n+        for (String value : multipleValues) {\n+            KeyValue newForm2CSVObservation = new KeyValue();\n+            newForm2CSVObservation.setKey(form2CSVObservation.getKey());\n+            newForm2CSVObservation.setValue(value.trim());\n+            form2CSVObservations.add(newForm2CSVObservation);\n+        }\n+        csvObservationHelper.createObservations(form2Observations, encounterRow.getEncounterDate(),\n+                form2CSVObservations, getConceptNames(form2CSVHeaderParts));\n+        return form2CSVObservations;\n+    }\n+\n+    private void validateObsForFutureDate(List<EncounterTransaction.Observation> form2Observations, KeyValue form2CSVObservation, List<String> form2CSVHeaderParts) throws ParseException {\n+        EncounterTransaction.Observation observation = getLastItem(form2Observations);\n+        if(DATE.equals(observation.getConcept().getDataType())) {\n+            boolean isAllowFutureDates = formFieldPathService.isAllowFutureDates(form2CSVHeaderParts);\n+            if(!isAllowFutureDates) {\n+                Date todaysDate = CSVUtils.getTodayDate();\n+                if(todaysDate.before(CSVUtils.getDateFromString((String)observation.getValue()))) {\n+                    throw new APIException(format(\"Future date [%s] is not allowed for [%s]\", form2CSVObservation.getValue(), form2CSVHeaderParts.get(form2CSVHeaderParts.size()-1)));\n+                }\n+            }\n+        }\n+    }\n+\n+    private void processJsonConceptValue(KeyValue form2CSVObservation, List<String> form2CSVHeaderParts, List<EncounterTransaction.Observation> form2Observations, EncounterRow encounterRow) throws ParseException {\n+        SimpleObject jsonObject = parseJson(form2CSVObservation);\n+        List<SectionPositionValue> sectionPositionValues = getSectionPositions(form2CSVObservation, jsonObject, form2CSVHeaderParts);\n+        verifyCSVHeaderHasConcepts(form2CSVObservation, form2CSVHeaderParts);\n+        verifyAndValidateObsForJsonValue(encounterRow, form2Observations, form2CSVObservation, form2CSVHeaderParts, sectionPositionValues);\n+    }\n+\n+    private void verifyAndValidateObsForJsonValue(EncounterRow encounterRow, List<EncounterTransaction.Observation> form2Observations, KeyValue form2CSVObservation, List<String> form2CSVHeaderParts, List<SectionPositionValue> sectionPositionValues) throws ParseException {\n+        List<KeyValue> form2CSVObservations = new ArrayList<>();\n+        sectionPositionValues.stream().forEach(sectionPositionValue -> {\n+            if(isNotBlank(sectionPositionValue.getValue())) {\n+                KeyValue newForm2CSVObservation = new KeyValue();\n+                newForm2CSVObservation.setKey(form2CSVObservation.getKey());\n+                newForm2CSVObservation.setValue(sectionPositionValue.getValue().trim());\n+                form2CSVObservations.add(newForm2CSVObservation);\n+            }\n+        });\n+        csvObservationHelper.createObservations(form2Observations, encounterRow.getEncounterDate(),\n+                form2CSVObservations, getConceptNames(form2CSVHeaderParts));\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPathForJsonValue(form2Observations, form2CSVHeaderParts, form2CSVObservations, sectionPositionValues);\n+    }\n+\n+    private Map<String, Boolean> parseCSVHeader(KeyValue form2CSVObservation) {\n+        Map<String, Boolean> attributeMap = new HashMap<>();\n+        String header = form2CSVObservation.getKey();\n+        final int attributeStartIndex = header.lastIndexOf(ATTRIBUTE_QUERY_SEPARATOR);\n+        if(attributeStartIndex != -1) {\n+            final String[] attributes = header.substring(attributeStartIndex + 1).split(ATTRIBUTE_SEPARATOR);\n+            Arrays.stream(attributes).forEach(attribute -> {\n+                if(attribute.contains(\"=\")) {\n+                    String attributeName = attribute.split(\"=\")[0];\n+                    String attributeValue = attribute.split(\"=\")[1];\n+                    attributeMap.put(attributeName, Boolean.valueOf(attributeValue));\n+                }\n+            });\n+            if(attributeMap.size() > 0)\n+                form2CSVObservation.setKey(header.substring(0, header.lastIndexOf(ATTRIBUTE_QUERY_SEPARATOR)));\n+        }\n+        return attributeMap;\n+    }\n+\n+    private SimpleObject parseJson(KeyValue form2CSVObservation) {\n+        SimpleObject jsonObject;\n+        try {\n+            String jsonValueStr = form2CSVObservation.getValue();\n+            jsonObject = SimpleObject.parseJson(jsonValueStr);\n+        } catch (Exception e) {\n+            throw new APIException(format(\"Error in parsing json value for %s\", form2CSVObservation.getKey()));\n+        }\n+        return jsonObject;\n+    }\n+\n+    private List<SectionPositionValue> getSectionPositions(KeyValue form2CSVObservation, SimpleObject jsonObject, List<String> form2CSVHeaderParts) {\n+        List<SectionPositionValue> sectionPositionValues = new ArrayList<>();\n+        String initialSectionIndex = \"0\";\n+        Object objectValue = jsonObject.get(KEY_SECTION_VALUES);\n+        if(objectValue == null)\n+            throw new APIException(format(\"Error in parsing json value for %s\", form2CSVObservation.getKey()));\n+\n+        boolean isAddmoreConceptObs = formFieldPathService.isAddmore(form2CSVHeaderParts);\n+        boolean isMultiSelectObs = formFieldPathService.isMultiSelectObs(form2CSVHeaderParts);\n+\n+        updateSectionPositionValues(sectionPositionValues, objectValue, initialSectionIndex, isMultiSelectObs, isAddmoreConceptObs);\n+        return sectionPositionValues;\n+    }\n+\n+    private void updateSectionPositionValues(List<SectionPositionValue> sectionPositionValues, Object objectValue, String sectionIndex, boolean isMultiselectObs, boolean isAddmoreObs) {\n+        if(objectValue instanceof List) {\n+            List<Object> values = (ArrayList) objectValue;\n+            for(int i = 0; i < values.size(); i++) {\n+                if(values.get(i) instanceof String) {\n+                    String value = (String) values.get(i);\n+                    if(isMultiselectObs) {\n+                        List<String> multiSelectObs = csvObservationHelper.getMultiSelectObsForJsonValue(value);\n+                        addObstoList(sectionPositionValues, sectionIndex, isMultiselectObs, isAddmoreObs, i, value, multiSelectObs);\n+                    } else if(isAddmoreObs) {\n+                        List<String> addmoreObs = csvObservationHelper.getAddmoreObsForJsonValue(value);\n+                        addObstoList(sectionPositionValues, sectionIndex, isMultiselectObs, isAddmoreObs, i, value, addmoreObs);\n+                    } else {\n+                        SectionPositionValue sectionPositionValue = new SectionPositionValue(value, sectionIndex, i, NOT_MULTISELECT_OBS_INDEX, NOT_ADDMORE_OBS_INDEX);\n+                        sectionPositionValues.add(sectionPositionValue);\n+                    }\n+                } else {\n+                    updateSectionPositionValues(sectionPositionValues, values.get(i), sectionIndex + SECTION_SPLITTER + i, isMultiselectObs, isAddmoreObs);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void addObstoList(List<SectionPositionValue> sectionPositionValues, String sectionIndex, boolean isMultiselectObs, boolean isAddmoreObs, int obsIndex, String value, List<String> multipleObs) {\n+        for(int i = 0; i < multipleObs.size(); i++) {\n+            SectionPositionValue sectionPositionValue = null;\n+            if(isMultiselectObs)\n+                sectionPositionValue = new SectionPositionValue(multipleObs.get(i), sectionIndex, obsIndex, i, NOT_ADDMORE_OBS_INDEX);\n+            else if(isMultiselectObs)\n+                sectionPositionValue = new SectionPositionValue(multipleObs.get(i), sectionIndex, obsIndex, NOT_MULTISELECT_OBS_INDEX, i);\n+            sectionPositionValues.add(sectionPositionValue);\n+        }\n+    }\n }"
  },
  {
    "sha": "424744779efdde4e2ed8e80e1d80bc89e20260b5",
    "filename": "admin/src/test/java/org/bahmni/module/admin/csv/persister/EncounterPersisterIT.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/csv/persister/EncounterPersisterIT.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/csv/persister/EncounterPersisterIT.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/java/org/bahmni/module/admin/csv/persister/EncounterPersisterIT.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -61,7 +61,8 @@ public void setUp() throws Exception {\n         Context.authenticate(\"admin\", \"test\");\n         userContext = Context.getUserContext();\n         boolean shouldMatchExactPatientId = false;\n-        encounterPersister.init(userContext, null, shouldMatchExactPatientId, null);\n+        boolean shouldPerformForm2Validations = false;\n+        encounterPersister.init(userContext, null, shouldMatchExactPatientId, null, shouldPerformForm2Validations);\n     }\n \n     @Test\n@@ -597,7 +598,7 @@ public void throwErrorWhenPatientNotFound() throws Exception {\n         multipleEncounterRow.visitType = \"OPD\";\n         multipleEncounterRow.patientIdentifier = \"GAN200001\";\n \n-        encounterPersister.init(userContext, \"NoMatch.groovy\", shouldMatchExactPatientId, null);\n+        encounterPersister.init(userContext, \"NoMatch.groovy\", shouldMatchExactPatientId, null, false);\n \n         Messages errorMessages = encounterPersister.persist(multipleEncounterRow);\n         assertThat(errorMessages.size(), is(Matchers.greaterThan(0)));\n@@ -610,7 +611,7 @@ public void throwErrorWhenMultiplePatientsFound() throws Exception {\n         multipleEncounterRow.encounterType = \"Consultation\";\n         multipleEncounterRow.visitType = \"OPD\";\n         multipleEncounterRow.patientIdentifier = \"200000\";\n-        encounterPersister.init(userContext, \"MultipleMatchPatient.groovy\", shouldMatchExactPatientId, null);\n+        encounterPersister.init(userContext, \"MultipleMatchPatient.groovy\", shouldMatchExactPatientId, null, false);\n \n         Messages errorMessages = encounterPersister.persist(multipleEncounterRow);\n \n@@ -625,7 +626,7 @@ public void externalAlgorithmShouldReturnOnlyPatientsWithGanIdentifier() throws\n         multipleEncounterRow.encounterType = \"Consultation\";\n         multipleEncounterRow.visitType = \"OPD\";\n         multipleEncounterRow.patientIdentifier = patientId;\n-        encounterPersister.init(userContext, \"GANIdentifier.groovy\", shouldMatchExactPatientId, null);\n+        encounterPersister.init(userContext, \"GANIdentifier.groovy\", shouldMatchExactPatientId, null, false);\n \n         EncounterRow anEncounter = new EncounterRow();\n         anEncounter.obsRows = new ArrayList<>();\n@@ -654,7 +655,7 @@ public void externalAlgorithmReturnsPatientsMatchingIdAndName() throws Exception\n         multipleEncounterRow.visitType = \"OPD\";\n         multipleEncounterRow.patientIdentifier = \"GAN200000\";\n         multipleEncounterRow.patientAttributes = getPatientAttributes();\n-        encounterPersister.init(userContext, \"IdAndNameMatch.groovy\", shouldMatchExactPatientId, null);\n+        encounterPersister.init(userContext, \"IdAndNameMatch.groovy\", shouldMatchExactPatientId, null, false);\n \n         EncounterRow anEncounter = new EncounterRow();\n         anEncounter.obsRows = new ArrayList<>();"
  },
  {
    "sha": "e1321b2f6620d2b4a245b93ff22855fb26ff4995",
    "filename": "admin/src/test/java/org/bahmni/module/admin/csv/service/FormFieldPathGeneratorServiceTest.java",
    "status": "added",
    "additions": 252,
    "deletions": 0,
    "changes": 252,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/csv/service/FormFieldPathGeneratorServiceTest.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/csv/service/FormFieldPathGeneratorServiceTest.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/java/org/bahmni/module/admin/csv/service/FormFieldPathGeneratorServiceTest.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -0,0 +1,252 @@\n+package org.bahmni.module.admin.csv.service;\n+\n+import org.bahmni.csv.KeyValue;\n+import org.bahmni.form2.service.FormFieldPathService;\n+import org.bahmni.module.admin.csv.models.SectionPositionValue;\n+import org.bahmni.module.admin.observation.CSVObservationHelper;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openmrs.module.emrapi.encounter.domain.EncounterTransaction;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static java.util.Arrays.asList;\n+import static org.mockito.Matchers.anyListOf;\n+import static org.mockito.Mockito.mock;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+@PrepareForTest(CSVObservationHelper.class)\n+@RunWith(PowerMockRunner.class)\n+public class FormFieldPathGeneratorServiceTest {\n+\n+    private FormFieldPathService formFieldPathService;\n+    private FormFieldPathGeneratorService formFieldPathGeneratorService;\n+\n+    @Before\n+    public void setUp() {\n+        formFieldPathService = mock(FormFieldPathService.class);\n+        formFieldPathGeneratorService = new FormFieldPathGeneratorService(formFieldPathService);\n+    }\n+\n+    @Test\n+    public void shouldNotSetFormFieldPathForEmptyObserevations() {\n+        List<EncounterTransaction.Observation> form2Observations = asList();\n+        List<String> form2CSVHeaderParts = null;\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPath(form2Observations, form2CSVHeaderParts);\n+\n+        assertEquals(0, form2Observations.size());\n+    }\n+\n+    @Test\n+    public void shouldSetFormFieldPathForObserevation() {\n+        EncounterTransaction.Observation observation = new EncounterTransaction.Observation();\n+        observation.setUuid(\"UUID\");\n+        observation.setConcept(new EncounterTransaction.Concept());\n+        observation.setValue(\"Dummy Value\");\n+\n+        List<EncounterTransaction.Observation> form2Observations = asList(observation);\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"Vitals\", \"Height\"));\n+\n+        PowerMockito.mockStatic(CSVObservationHelper.class);\n+        when(CSVObservationHelper.getLastItem(anyListOf(EncounterTransaction.Observation.class))).thenReturn(observation);\n+        when(formFieldPathService.getFormFieldPath(anyListOf(String.class))).thenReturn(\"Vitals.1/1-0\");\n+\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPath(form2Observations, headerParts);\n+\n+        assertEquals(\"Vitals.1/1-0\", form2Observations.get(0).getFormFieldPath());\n+        assertEquals(\"Bahmni\", form2Observations.get(0).getFormNamespace());\n+    }\n+\n+    @Test\n+    public void shouldSetFormFieldPathForMultiSelectObserevation() {\n+        EncounterTransaction.Observation observation1 = new EncounterTransaction.Observation();\n+        observation1.setUuid(\"UUID1\");\n+        observation1.setConcept(new EncounterTransaction.Concept());\n+        observation1.setValue(\"Cough\");\n+\n+        EncounterTransaction.Observation observation2 = new EncounterTransaction.Observation();\n+        observation2.setUuid(\"UUID2\");\n+        observation2.setConcept(new EncounterTransaction.Concept());\n+        observation2.setValue(\"Fever\");\n+\n+        final KeyValue obs1 = new KeyValue(\"Covid.Symptoms\", \"Cough\");\n+        final KeyValue obs2 = new KeyValue(\"Covid.Symptoms\", \"Fever\");\n+\n+        List<EncounterTransaction.Observation> form2Observations = asList(observation1, observation2);\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"Covid\", \"Symptoms\"));\n+\n+        PowerMockito.mockStatic(CSVObservationHelper.class);\n+        when(CSVObservationHelper.getLastItem(anyListOf(EncounterTransaction.Observation.class))).thenReturn(observation1);\n+        when(formFieldPathService.getFormFieldPath(anyListOf(String.class))).thenReturn(\"Covid.1/1-0\");\n+\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPathForMultiSelectObs(form2Observations, headerParts, asList(obs1,obs2));\n+\n+        assertEquals(\"Covid.1/1-0\", form2Observations.get(0).getFormFieldPath());\n+        assertEquals(\"Covid.1/1-0\", form2Observations.get(1).getFormFieldPath());\n+        assertEquals(\"Bahmni\", form2Observations.get(0).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(1).getFormNamespace());\n+    }\n+\n+    @Test\n+    public void shouldSetFormFieldPathForAddmoreObserevation() {\n+        EncounterTransaction.Observation observation1 = new EncounterTransaction.Observation();\n+        observation1.setUuid(\"UUID1\");\n+        observation1.setConcept(new EncounterTransaction.Concept());\n+        observation1.setValue(\"Cough\");\n+\n+        EncounterTransaction.Observation observation2 = new EncounterTransaction.Observation();\n+        observation2.setUuid(\"UUID2\");\n+        observation2.setConcept(new EncounterTransaction.Concept());\n+        observation2.setValue(\"Fever\");\n+\n+        final KeyValue obs1 = new KeyValue(\"Covid.Symptoms\", \"Cough\");\n+        final KeyValue obs2 = new KeyValue(\"Covid.Symptoms\", \"Fever\");\n+\n+        List<EncounterTransaction.Observation> form2Observations = asList(observation1, observation2);\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"Covid\", \"Symptoms\"));\n+\n+        PowerMockito.mockStatic(CSVObservationHelper.class);\n+        when(CSVObservationHelper.getLastItem(anyListOf(EncounterTransaction.Observation.class))).thenReturn(observation1);\n+        when(formFieldPathService.getFormFieldPath(anyListOf(String.class))).thenReturn(\"Covid.1/1-0\");\n+\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPathForAddmoreObs(form2Observations, headerParts, asList(obs1,obs2));\n+\n+        assertEquals(\"Covid.1/1-0\", form2Observations.get(0).getFormFieldPath());\n+        assertEquals(\"Covid.1/1-1\", form2Observations.get(1).getFormFieldPath());\n+        assertEquals(\"Bahmni\", form2Observations.get(0).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(1).getFormNamespace());\n+    }\n+\n+    @Test\n+    public void shouldSetFormFieldPathForObservationInsideAddmoreSection() {\n+        EncounterTransaction.Observation observation1 = new EncounterTransaction.Observation();\n+        observation1.setUuid(\"UUID1\");\n+        observation1.setConcept(new EncounterTransaction.Concept());\n+        observation1.setValue(\"Male\");\n+\n+        EncounterTransaction.Observation observation2 = new EncounterTransaction.Observation();\n+        observation2.setUuid(\"UUID2\");\n+        observation2.setConcept(new EncounterTransaction.Concept());\n+        observation2.setValue(\"Female\");\n+\n+        KeyValue csvObs1 = new KeyValue(\"form2.Birth Details.Infant Details.Infant Gender\", \"Male\");\n+        KeyValue csvObs2 = new KeyValue(\"form2.Birth Details.Infant Details.Infant Gender\", \"Female\");\n+\n+        SectionPositionValue sectionPositionValue1 = new SectionPositionValue(\"Male\", \"0\", 0, -1, -1);\n+        SectionPositionValue sectionPositionValue2 = new SectionPositionValue(\"Female\", \"0\", 1, -1, -1);\n+\n+        List<EncounterTransaction.Observation> form2Observations = asList(observation1, observation2);\n+        List<String> headerParts = asList(\"form2\", \"Birth Details\", \"Infant Details\", \"Infant Gender\");\n+        List<KeyValue> csvObservations = asList(csvObs1, csvObs2);\n+        List<SectionPositionValue> sectionPositionValuesList = asList(sectionPositionValue1, sectionPositionValue2);\n+\n+        when(formFieldPathService.getFormFieldPath(anyListOf(String.class))).thenReturn(\"Birth Details.1/1-0/10-0\");\n+        when(formFieldPathService.isAddmore(headerParts.subList(0,3))).thenReturn(true);\n+\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPathForJsonValue(form2Observations, headerParts, csvObservations, sectionPositionValuesList);\n+\n+        assertEquals(\"Birth Details.1/1-0/10-0\", form2Observations.get(0).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/1-1/10-0\", form2Observations.get(1).getFormFieldPath());\n+        assertEquals(\"Bahmni\", form2Observations.get(0).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(1).getFormNamespace());\n+    }\n+\n+    @Test\n+    public void shouldSetFormFieldPathForObservationInsideNestedAddmoreSection() {\n+        List<EncounterTransaction.Observation> form2Observations = new ArrayList<>();\n+        List<String> obsInJson = asList(\"Xpert Qual/DNA PCR\", \"Antibody Test (RDT)\", \"Ultrasensitive AgP24\", \"Xpert Qual/DNA PCR\", \"Not specified\");\n+        obsInJson.stream().forEach(obs -> {\n+            EncounterTransaction.Observation observation = new EncounterTransaction.Observation();\n+            observation.setUuid(\"UUID\" + obs);\n+            observation.setConcept(new EncounterTransaction.Concept());\n+            observation.setValue(obs);\n+            form2Observations.add(observation);\n+        });\n+\n+        KeyValue csvObs1 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Xpert Qual/DNA PCR\");\n+        KeyValue csvObs2 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Antibody Test (RDT)\");\n+        KeyValue csvObs3 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Ultrasensitive AgP24\");\n+        KeyValue csvObs4 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Xpert Qual/DNA PCR\");\n+        KeyValue csvObs5 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Not specified\");\n+\n+        SectionPositionValue sectionPositionValue1 = new SectionPositionValue(\"Xpert Qual/DNA PCR\", \"0/0\", 0, -1, -1);\n+        SectionPositionValue sectionPositionValue2 = new SectionPositionValue(\"Antibody Test (RDT)\", \"0/0\", 1, -1, -1);\n+        SectionPositionValue sectionPositionValue3 = new SectionPositionValue(\"Ultrasensitive AgP24\", \"0/1\", 0, -1, -1);\n+        SectionPositionValue sectionPositionValue4 = new SectionPositionValue(\"Xpert Qual/DNA PCR\", \"0/1\", 1, -1, -1);\n+        SectionPositionValue sectionPositionValue5 = new SectionPositionValue(\"Not specified\", \"0/1\", 2, -1, -1);\n+\n+        List<String> headerParts = asList(\"form2\", \"Birth Details\", \"Infant Details\", \"HIV Assessments\", \"Infant interim HIV test type\");\n+        List<KeyValue> csvObservations = asList(csvObs1, csvObs2, csvObs3, csvObs4, csvObs5);\n+        List<SectionPositionValue> sectionPositionValuesList = asList(sectionPositionValue1, sectionPositionValue2, sectionPositionValue3, sectionPositionValue4, sectionPositionValue5);\n+\n+        when(formFieldPathService.getFormFieldPath(anyListOf(String.class))).thenReturn(\"Birth Details.1/17-0/31-0/57-0\");\n+        when(formFieldPathService.isAddmore(headerParts.subList(0,2))).thenReturn(true);\n+        when(formFieldPathService.isAddmore(headerParts.subList(0,3))).thenReturn(true);\n+\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPathForJsonValue(form2Observations, headerParts, csvObservations, sectionPositionValuesList);\n+\n+        assertEquals(\"Birth Details.1/17-0/31-0/57-0\", form2Observations.get(0).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/17-0/31-1/57-0\", form2Observations.get(1).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/17-1/31-0/57-0\", form2Observations.get(2).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/17-1/31-1/57-0\", form2Observations.get(3).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/17-1/31-2/57-0\", form2Observations.get(4).getFormFieldPath());\n+        assertEquals(\"Bahmni\", form2Observations.get(0).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(1).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(2).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(3).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(4).getFormNamespace());\n+    }\n+\n+    @Test\n+    public void shouldSetFormFieldPathForAddmoreObservationInsideNestedAddmoreSection() {\n+        List<EncounterTransaction.Observation> form2Observations = new ArrayList<>();\n+        List<String> obsInJson = asList(\"Xpert Qual/DNA PCR\", \"Antibody Test (RDT)\", \"Ultrasensitive AgP24\", \"Xpert Qual/DNA PCR\", \"Not specified\");\n+        obsInJson.stream().forEach(obs -> {\n+            EncounterTransaction.Observation observation = new EncounterTransaction.Observation();\n+            observation.setUuid(\"UUID\" + obs);\n+            observation.setConcept(new EncounterTransaction.Concept());\n+            observation.setValue(obs);\n+            form2Observations.add(observation);\n+        });\n+\n+        KeyValue csvObs1 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Xpert Qual/DNA PCR\");\n+        KeyValue csvObs2 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Antibody Test (RDT)\");\n+        KeyValue csvObs3 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Ultrasensitive AgP24\");\n+        KeyValue csvObs4 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Xpert Qual/DNA PCR\");\n+        KeyValue csvObs5 = new KeyValue(\"form2.Birth Details.Infant Details.HIV Assessments.Infant interim HIV test type\", \"Not specified\");\n+\n+        SectionPositionValue sectionPositionValue1 = new SectionPositionValue(\"Xpert Qual/DNA PCR\", \"0/0\", 0, -1, 0);\n+        SectionPositionValue sectionPositionValue2 = new SectionPositionValue(\"Antibody Test (RDT)\", \"0/0\", 0, -1, 1);\n+        SectionPositionValue sectionPositionValue3 = new SectionPositionValue(\"Ultrasensitive AgP24\", \"0/1\", 0, -1, 0);\n+        SectionPositionValue sectionPositionValue4 = new SectionPositionValue(\"Xpert Qual/DNA PCR\", \"0/1\", 0, -1, 1);\n+        SectionPositionValue sectionPositionValue5 = new SectionPositionValue(\"Not specified\", \"0/1\", 0, -1, 2);\n+\n+        List<String> headerParts = asList(\"form2\", \"Birth Details\", \"Infant Details\", \"HIV Assessments\", \"Infant interim HIV test type\");\n+        List<KeyValue> csvObservations = asList(csvObs1, csvObs2, csvObs3, csvObs4, csvObs5);\n+        List<SectionPositionValue> sectionPositionValuesList = asList(sectionPositionValue1, sectionPositionValue2, sectionPositionValue3, sectionPositionValue4, sectionPositionValue5);\n+\n+        when(formFieldPathService.getFormFieldPath(anyListOf(String.class))).thenReturn(\"Birth Details.1/17-0/31-0/57-0\");\n+        when(formFieldPathService.isAddmore(headerParts.subList(0,2))).thenReturn(true);\n+        when(formFieldPathService.isAddmore(headerParts.subList(0,3))).thenReturn(true);\n+\n+        formFieldPathGeneratorService.setFormNamespaceAndFieldPathForJsonValue(form2Observations, headerParts, csvObservations, sectionPositionValuesList);\n+\n+        assertEquals(\"Birth Details.1/17-0/31-0/57-0\", form2Observations.get(0).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/17-0/31-0/57-1\", form2Observations.get(1).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/17-1/31-0/57-0\", form2Observations.get(2).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/17-1/31-0/57-1\", form2Observations.get(3).getFormFieldPath());\n+        assertEquals(\"Birth Details.1/17-1/31-0/57-2\", form2Observations.get(4).getFormFieldPath());\n+        assertEquals(\"Bahmni\", form2Observations.get(0).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(1).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(2).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(3).getFormNamespace());\n+        assertEquals(\"Bahmni\", form2Observations.get(4).getFormNamespace());\n+    }\n+}"
  },
  {
    "sha": "6824e7bf2cfc00d9b380620720c4dc2b197817b5",
    "filename": "admin/src/test/java/org/bahmni/module/admin/encounter/BahmniEncounterTransactionImportServiceTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/encounter/BahmniEncounterTransactionImportServiceTest.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/encounter/BahmniEncounterTransactionImportServiceTest.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/java/org/bahmni/module/admin/encounter/BahmniEncounterTransactionImportServiceTest.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -23,10 +23,10 @@ public void returnEmptyEncounterTransactionForEmptyEncounterRow() throws ParseEx\n         BahmniEncounterTransactionImportService bahmniEncounterTransactionImportService = new BahmniEncounterTransactionImportService(mockEncounterService, null, null, null);\n         MultipleEncounterRow emptyEncounterRow = new MultipleEncounterRowBuilder().getEmptyMultipleEncounterRow(\"GAN12345\");\n         emptyEncounterRow.encounterType = \"Consultation\";\n-        List<BahmniEncounterTransaction> bahmniEncounterTransaction = bahmniEncounterTransactionImportService.getBahmniEncounterTransaction(emptyEncounterRow, null);\n+        List<BahmniEncounterTransaction> bahmniEncounterTransaction = bahmniEncounterTransactionImportService.getBahmniEncounterTransaction(emptyEncounterRow, null, false);\n         Assert.isTrue(bahmniEncounterTransaction.isEmpty(), \"Should ignore empty encounters\");\n \n-        bahmniEncounterTransaction = bahmniEncounterTransactionImportService.getBahmniEncounterTransaction(new MultipleEncounterRow(), null);\n+        bahmniEncounterTransaction = bahmniEncounterTransactionImportService.getBahmniEncounterTransaction(new MultipleEncounterRow(), null, false);\n         Assert.isTrue(bahmniEncounterTransaction.isEmpty(), \"Should ignore empty encounters\");\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "5bcc6855723463573d7b8f31a58a50dc593b01f2",
    "filename": "admin/src/test/java/org/bahmni/module/admin/observation/CSVObservationHelperTest.java",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/observation/CSVObservationHelperTest.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/observation/CSVObservationHelperTest.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/java/org/bahmni/module/admin/observation/CSVObservationHelperTest.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -398,4 +398,28 @@ public void shouldSplitCSVHeaderPartsWithDotIfNoValueIsConfigured() {\n         assertEquals(4, csvHeaderParts.size());\n \n     }\n+\n+    @Test\n+    public void shouldCreateMultipleObservationsForTheGivenObsRowHavingMultiSelectConcept() throws ParseException {\n+        KeyValue obs1 = new KeyValue(\"Height\", \"173\");\n+        KeyValue obs2 = new KeyValue(\"Height\", \"174\");\n+        conceptNames.add(\"Height\");\n+\n+        CSVObservationHelper csvObservationHelper = new CSVObservationHelper(conceptService, administrationService);\n+        Date encounterDate = new Date();\n+        csvObservationHelper.createObservations(observations, encounterDate, asList(obs1, obs2), conceptNames);\n+\n+\n+        assertEquals(2, observations.size());\n+        EncounterTransaction.Observation heightObservation1 = observations.get(0);\n+        assertEquals(\"Height\", heightObservation1.getConcept().getName());\n+        assertEquals(\"173\", heightObservation1.getValue());\n+        assertEquals(encounterDate, heightObservation1.getObservationDateTime());\n+\n+        EncounterTransaction.Observation heightObservation2 = observations.get(1);\n+        assertEquals(\"Height\", heightObservation2.getConcept().getName());\n+        assertEquals(\"174\", heightObservation2.getValue());\n+        assertEquals(encounterDate, heightObservation2.getObservationDateTime());\n+\n+    }\n }"
  },
  {
    "sha": "06cb2bcf8ea4a24abf25055ccb0e613fdf2af1e6",
    "filename": "admin/src/test/java/org/bahmni/module/admin/observation/ObservationMapperIT.java",
    "status": "modified",
    "additions": 25,
    "deletions": 1,
    "changes": 26,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/observation/ObservationMapperIT.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/observation/ObservationMapperIT.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/java/org/bahmni/module/admin/observation/ObservationMapperIT.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -48,4 +48,28 @@ public void shouldCreateForm1AndForm2Observations() throws ParseException {\n         assertEquals(\"Pulse\", pulseObs.getConcept().getName());\n         assertEquals(\"150\", pulseObs.getValue());\n     }\n-}\n+\n+    @Test\n+    public void shouldCreateForm2Observations() throws ParseException {\n+        EncounterRow anEncounter = new EncounterRow();\n+        anEncounter.obsRows = new ArrayList<>();\n+\n+        anEncounter.obsRows.add(new KeyValue(\"form2.Form2EncountersTest.HIV Infection History.WHO Stage Conditions\", \"Asymptomatic|Herpes Zoster\"));\n+        anEncounter.encounterDateTime = \"2019-09-19\";\n+\n+        final List<EncounterTransaction.Observation> observations = observationMapper.getObservations(anEncounter, true);\n+\n+        assertEquals(2, observations.size());\n+\n+        final EncounterTransaction.Observation multiSelectObs1 = observations.get(0);\n+        assertEquals(\"WHO Stage Conditions\", multiSelectObs1.getConcept().getName());\n+        assertEquals(\"Asymptomatic\", multiSelectObs1.getValue());\n+        assertEquals(\"Form2EncountersTest.2/2-0\", multiSelectObs1.getFormFieldPath());\n+\n+        final EncounterTransaction.Observation multiSelectObs2 = observations.get(1);\n+        assertEquals(\"WHO Stage Conditions\", multiSelectObs2.getConcept().getName());\n+        assertEquals(\"Herpes Zoster\", multiSelectObs2.getValue());\n+        assertEquals(\"Form2EncountersTest.2/2-0\", multiSelectObs2.getFormFieldPath());\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "66754e2e6cfc12966293d4c3a6fd8a44783b1b8e",
    "filename": "admin/src/test/java/org/bahmni/module/admin/observation/handler/Form2CSVObsHandlerTest.java",
    "status": "modified",
    "additions": 243,
    "deletions": 9,
    "changes": 252,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/observation/handler/Form2CSVObsHandlerTest.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/java/org/bahmni/module/admin/observation/handler/Form2CSVObsHandlerTest.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/java/org/bahmni/module/admin/observation/handler/Form2CSVObsHandlerTest.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -2,14 +2,19 @@\n \n import org.bahmni.csv.KeyValue;\n import org.bahmni.module.admin.csv.models.EncounterRow;\n+import org.bahmni.module.admin.csv.service.FormFieldPathGeneratorService;\n import org.bahmni.module.admin.observation.CSVObservationHelper;\n import org.bahmni.form2.service.FormFieldPathService;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n import org.openmrs.api.APIException;\n import org.openmrs.module.emrapi.encounter.domain.EncounterTransaction;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n \n import java.text.ParseException;\n import java.util.ArrayList;\n@@ -23,26 +28,26 @@\n import static org.junit.Assert.assertEquals;\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.anyListOf;\n-import static org.mockito.Mockito.doNothing;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.*;\n import static org.mockito.MockitoAnnotations.initMocks;\n \n+@PrepareForTest(CSVObservationHelper.class)\n+@RunWith(PowerMockRunner.class)\n public class Form2CSVObsHandlerTest {\n \n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n     private Form2CSVObsHandler form2CSVObsHandler;\n     private CSVObservationHelper csvObservationHelper;\n     private FormFieldPathService formFieldPathService;\n+    private FormFieldPathGeneratorService formFieldPathGeneratorService;\n \n     @Before\n     public void setUp() {\n         initMocks(this);\n         csvObservationHelper = mock(CSVObservationHelper.class);\n         formFieldPathService = mock(FormFieldPathService.class);\n+        formFieldPathGeneratorService = mock(FormFieldPathGeneratorService.class);\n     }\n \n     @Test\n@@ -56,7 +61,7 @@ public void shouldFilterForm2CSVObs() {\n         when(csvObservationHelper.isForm2Type(form1CSVObservation)).thenReturn(false);\n         when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n \n-        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, null);\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, null, null);\n \n         final List<KeyValue> form2CSVObs = form2CSVObsHandler.getRelatedCSVObs(encounterRow);\n \n@@ -85,7 +90,7 @@ public void shouldVerifyCreateObservationsIsCalled() throws ParseException {\n                 any(Date.class), any(KeyValue.class), anyListOf(String.class));\n         when(formFieldPathService.getFormFieldPath(asList(\"Vitals\", \"Height\"))).thenReturn(\"Vitals.1/1-0\");\n \n-        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService);\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n \n         form2CSVObsHandler.handle(encounterRow);\n \n@@ -109,7 +114,7 @@ public void shouldVerifyCreateObservationIsNotCalledWhenAnEmptyValueIsGiven() th\n         when(csvObservationHelper.isForm2Type(form1CSVObservation)).thenReturn(false);\n         when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n \n-        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService);\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n \n         form2CSVObsHandler.handle(encounterRow);\n \n@@ -130,11 +135,240 @@ public void shouldThrowAPIExceptionIfNoConceptProvidedWithCSVHeader() throws Par\n         final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"Vitals\"));\n         when(csvObservationHelper.getCSVHeaderParts(form2CSVObservation)).thenReturn(headerParts);\n \n-        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService);\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n \n         expectedException.expect(APIException.class);\n         expectedException.expectMessage(format(\"No concepts found in %s\", form2CSVObservation.getKey()));\n \n         form2CSVObsHandler.handle(encounterRow);\n     }\n+\n+    @Test\n+    public void shouldCreateObsForMultiSelectConcept() throws ParseException {\n+        final KeyValue form2CSVObservation = new KeyValue(\"form2.HIV_History.PresentConditions\", \"Asymptomatic|Herpes Zoster\");\n+\n+        final EncounterRow encounterRow = new EncounterRow();\n+        encounterRow.obsRows = asList(form2CSVObservation);\n+        encounterRow.encounterDateTime = \"2019-11-11\";\n+\n+        when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n+\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"HIV_History\", \"PresentConditions\"));\n+        final List<String> obsValues = new ArrayList<>(Arrays.asList(\"Asymptomatic\", \"Herpes Zoster\"));\n+        when(csvObservationHelper.getCSVHeaderParts(form2CSVObservation)).thenReturn(headerParts);\n+        when(csvObservationHelper.getMultiSelectObs(form2CSVObservation)).thenReturn(obsValues);\n+        doNothing().when(csvObservationHelper).verifyNumericConceptValue(form2CSVObservation, headerParts);\n+        doNothing().when(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+        when(formFieldPathService.isMultiSelectObs(asList(\"HIV_History\", \"PresentConditions\"))).thenReturn(true);\n+        when(formFieldPathService.isValidCSVHeader(asList(\"HIV_History\", \"PresentConditions\"))).thenReturn(true);\n+\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n+\n+        form2CSVObsHandler.handle(encounterRow, true);\n+        verify(csvObservationHelper).isForm2Type(form2CSVObservation);\n+        verify(csvObservationHelper).getCSVHeaderParts(form2CSVObservation);\n+        verify(csvObservationHelper).verifyNumericConceptValue(form2CSVObservation, headerParts);\n+        verify(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+    }\n+\n+    @Test\n+    public void shouldCreateObsForAddmoreConcept() throws ParseException {\n+        final KeyValue form2CSVObservation = new KeyValue(\"form2.TB.Method of confirmation\", \"Smear|Hain test\");\n+\n+        final EncounterRow encounterRow = new EncounterRow();\n+        encounterRow.obsRows = asList(form2CSVObservation);\n+        encounterRow.encounterDateTime = \"2019-11-11\";\n+\n+        when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n+\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"TB\", \"Method of confirmation\"));\n+        final List<String> obsValues = new ArrayList<>(Arrays.asList(\"Smear\", \"Hain test\"));\n+        when(csvObservationHelper.getCSVHeaderParts(form2CSVObservation)).thenReturn(headerParts);\n+        when(csvObservationHelper.getMultiSelectObs(form2CSVObservation)).thenReturn(obsValues);\n+        doNothing().when(csvObservationHelper).verifyNumericConceptValue(form2CSVObservation, headerParts);\n+        doNothing().when(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+        when(formFieldPathService.isAddmore(asList(\"TB\", \"Method of confirmation\"))).thenReturn(true);\n+        when(formFieldPathService.isValidCSVHeader(asList(\"TB\", \"Method of confirmation\"))).thenReturn(true);\n+\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n+\n+        form2CSVObsHandler.handle(encounterRow, true);\n+        verify(csvObservationHelper).isForm2Type(form2CSVObservation);\n+        verify(csvObservationHelper).getCSVHeaderParts(form2CSVObservation);\n+        verify(csvObservationHelper).verifyNumericConceptValue(form2CSVObservation, headerParts);\n+        verify(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+    }\n+\n+    @Test\n+    public void shouldThrowAPIExceptionIfMandatoryObsIsEmpty() throws ParseException {\n+        final KeyValue form2CSVObservation = new KeyValue(\"form2.Vitals\", \"\");\n+        final EncounterRow encounterRow = new EncounterRow();\n+        encounterRow.obsRows = singletonList(form2CSVObservation);\n+        encounterRow.encounterDateTime = \"2019-11-11\";\n+\n+        when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"Vitals\"));\n+        when(csvObservationHelper.getCSVHeaderParts(form2CSVObservation)).thenReturn(headerParts);\n+        when(formFieldPathService.isMandatory(asList(\"Vitals\"))).thenReturn(true);\n+        when(formFieldPathService.isValidCSVHeader(asList(\"Vitals\"))).thenReturn(true);\n+\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n+\n+        expectedException.expect(APIException.class);\n+        expectedException.expectMessage(\"Empty value provided for mandatory field Vitals\");\n+\n+        form2CSVObsHandler.handle(encounterRow, true);\n+    }\n+\n+    @Test\n+    public void shouldThrowAPIExceptionIfFutureDateIsProvided() throws ParseException {\n+        EncounterTransaction.Observation observation = new EncounterTransaction.Observation();\n+        observation.setUuid(\"UUID\");\n+        observation.setConcept(new EncounterTransaction.Concept());\n+        observation.setValue(\"2099-12-31\");\n+        observation.getConcept().setDataType(\"Date\");\n+\n+        final KeyValue form2CSVObservation = new KeyValue(\"form2.TB.Past Visit Date\", \"2099-12-31\");\n+        final EncounterRow encounterRow = new EncounterRow();\n+        encounterRow.obsRows = singletonList(form2CSVObservation);\n+        encounterRow.encounterDateTime = \"2019-11-11\";\n+\n+        when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"TB\", \"Past Visit Date\"));\n+        when(csvObservationHelper.getCSVHeaderParts(form2CSVObservation)).thenReturn(headerParts);\n+        when(formFieldPathService.isAllowFutureDates(asList(\"TB\", \"Past Visit Date\"))).thenReturn(false);\n+        when(formFieldPathService.isValidCSVHeader(asList(\"TB\", \"Past Visit Date\"))).thenReturn(true);\n+\n+        PowerMockito.mockStatic(CSVObservationHelper.class);\n+        when(csvObservationHelper.getLastItem(anyListOf(EncounterTransaction.Observation.class))).thenReturn(observation);\n+        when(csvObservationHelper.getLastItem(eq(asList(\"TB\", \"Past Visit Date\")))).thenReturn(\"Past Visit Date\");\n+\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n+\n+        expectedException.expect(APIException.class);\n+        expectedException.expectMessage(\"Future date [2099-12-31] is not allowed for [Past Visit Date]\");\n+\n+        form2CSVObsHandler.handle(encounterRow, true );\n+\n+        verify(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), any(KeyValue.class), anyListOf(String.class));\n+    }\n+\n+    @Test\n+    public void shouldThrowAPIExceptionIfCSVHeaderIsInvalid() throws ParseException {\n+        EncounterTransaction.Observation observation = new EncounterTransaction.Observation();\n+        observation.setUuid(\"UUID\");\n+        observation.setConcept(new EncounterTransaction.Concept());\n+        observation.setValue(\"2099-12-31\");\n+        observation.getConcept().setDataType(\"Date\");\n+\n+        final KeyValue form2CSVObservation = new KeyValue(\"form2.TB.Past Visit Date\", \"2099-12-31\");\n+        final EncounterRow encounterRow = new EncounterRow();\n+        encounterRow.obsRows = singletonList(form2CSVObservation);\n+        encounterRow.encounterDateTime = \"2019-11-11\";\n+\n+        when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"TB\", \"Past Visit Date\"));\n+        when(csvObservationHelper.getCSVHeaderParts(form2CSVObservation)).thenReturn(headerParts);\n+        when(formFieldPathService.isValidCSVHeader(asList(\"TB\", \"Past Visit Date\"))).thenReturn(false);\n+\n+        PowerMockito.mockStatic(CSVObservationHelper.class);\n+        when(csvObservationHelper.getLastItem(anyListOf(EncounterTransaction.Observation.class))).thenReturn(observation);\n+        when(csvObservationHelper.getLastItem(eq(asList(\"TB\", \"Past Visit Date\")))).thenReturn(\"Past Visit Date\");\n+\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n+\n+        expectedException.expect(APIException.class);\n+        expectedException.expectMessage(\"No concepts found in form2.TB.Past Visit Date\");\n+\n+        form2CSVObsHandler.handle(encounterRow, true );\n+\n+        verify(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), any(KeyValue.class), anyListOf(String.class));\n+    }\n+\n+    @Test\n+    public void shouldCreateObsForAddmoreSection() throws ParseException {\n+        final KeyValue form2CSVObservation = new KeyValue(\"form2.Birth Details.Infant Details.Infant Gender?isJson=true\", \"{\\\"values\\\":[\\\"Male\\\", \\\"Female\\\"]}\");\n+        final EncounterRow encounterRow = new EncounterRow();\n+        encounterRow.obsRows = asList(form2CSVObservation);\n+        encounterRow.encounterDateTime = \"2019-11-11\";\n+\n+        when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n+\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"Birth Details\", \"Infant Details\", \"Infant Gender\"));\n+        when(csvObservationHelper.getCSVHeaderParts(any(KeyValue.class))).thenReturn(headerParts);\n+        when(formFieldPathService.isValidCSVHeader(anyList())).thenReturn(true);\n+        doNothing().when(csvObservationHelper).verifyNumericConceptValue(form2CSVObservation, headerParts);\n+        doNothing().when(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n+\n+        form2CSVObsHandler.handle(encounterRow, true);\n+        verify(csvObservationHelper).isForm2Type(form2CSVObservation);\n+        verify(csvObservationHelper).getCSVHeaderParts(form2CSVObservation);\n+        verify(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+    }\n+\n+    @Test\n+    public void shouldCreateMultiSelectObsForAddmoreSection() throws ParseException {\n+        final KeyValue form2CSVObservation = new KeyValue(\"form2.TB History.Past TB Treatment.Past TB Drug regimen?isJson=true\", \"{\\\"values\\\":[\\\"Ethambutol (E)|Isoniazid (H)\\\",\\\"Streptomycin (S)|Thioacetazone (T)\\\"]}\");\n+\n+        final EncounterRow encounterRow = new EncounterRow();\n+        encounterRow.obsRows = asList(form2CSVObservation);\n+        encounterRow.encounterDateTime = \"2019-11-11\";\n+\n+        when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n+\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"TB History\", \"Past TB Treatment\", \"Past TB Drug regimen\"));\n+        when(csvObservationHelper.getCSVHeaderParts(any(KeyValue.class))).thenReturn(headerParts);\n+        when(csvObservationHelper.getMultiSelectObsForJsonValue(\"Ethambutol (E)|Isoniazid (H)\")).thenReturn(asList(\"Ethambutol (E)\",\"Isoniazid (H)\"));\n+        when(csvObservationHelper.getMultiSelectObsForJsonValue(\"Streptomycin (S)|Thioacetazone (T)\")).thenReturn(asList(\"Streptomycin (S)\",\"Thioacetazone (T)\"));\n+        when(formFieldPathService.isValidCSVHeader(anyList())).thenReturn(true);\n+        when(formFieldPathService.isMultiSelectObs(anyList())).thenReturn(true);\n+        doNothing().when(csvObservationHelper).verifyNumericConceptValue(form2CSVObservation, headerParts);\n+        doNothing().when(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n+\n+        form2CSVObsHandler.handle(encounterRow, true);\n+        verify(csvObservationHelper).isForm2Type(form2CSVObservation);\n+        verify(csvObservationHelper).getCSVHeaderParts(form2CSVObservation);\n+        verify(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+    }\n+\n+    @Test\n+    public void shouldThrowAPIExceptionIfJsonValueisIsInvalid() throws ParseException {\n+        final KeyValue form2CSVObservation = new KeyValue(\"form2.Birth Details.Infant Details.Infant Gender?isJson=true\", \"{INVALID JSON DATA}\");\n+        final EncounterRow encounterRow = new EncounterRow();\n+        encounterRow.obsRows = asList(form2CSVObservation);\n+        encounterRow.encounterDateTime = \"2019-11-11\";\n+\n+        when(csvObservationHelper.isForm2Type(form2CSVObservation)).thenReturn(true);\n+\n+        final List<String> headerParts = new ArrayList<>(Arrays.asList(\"form2\", \"Birth Details\", \"Infant Details\", \"Infant Gender\"));\n+        when(csvObservationHelper.getCSVHeaderParts(any(KeyValue.class))).thenReturn(headerParts);\n+        when(formFieldPathService.isValidCSVHeader(anyList())).thenReturn(true);\n+        doNothing().when(csvObservationHelper).verifyNumericConceptValue(form2CSVObservation, headerParts);\n+        doNothing().when(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), anyListOf(KeyValue.class), anyListOf(String.class));\n+\n+        form2CSVObsHandler = new Form2CSVObsHandler(csvObservationHelper, formFieldPathService, formFieldPathGeneratorService);\n+\n+        expectedException.expect(APIException.class);\n+        expectedException.expectMessage(\"Error in parsing json value for form2.Birth Details.Infant Details.Infant Gender\");\n+\n+        form2CSVObsHandler.handle(encounterRow, true );\n+\n+        verify(csvObservationHelper).createObservations(anyListOf(EncounterTransaction.Observation.class),\n+                any(Date.class), any(KeyValue.class), anyListOf(String.class));\n+    }\n }"
  },
  {
    "sha": "a346d8de98e2af3d5c1986a14e55952823e40a9d",
    "filename": "admin/src/test/resources/Form2Encounters.json",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/resources/Form2Encounters.json",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/resources/Form2Encounters.json",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/resources/Form2Encounters.json?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -0,0 +1,82 @@\n+{\n+  \"name\": \"Form2EncountersTest\",\n+  \"id\": 2,\n+  \"uuid\": \"47a3e6b8-0d5c-44ba-82b9-1ecfe5ae0803\",\n+  \"defaultLocale\": \"en\",\n+  \"controls\": [\n+    {\n+      \"type\": \"section\",\n+      \"label\": {\n+        \"translationKey\": \"SECTION_1\",\n+        \"type\": \"label\",\n+        \"value\": \"HIV Infection History\",\n+        \"id\": \"1\"\n+      },\n+      \"properties\": {\n+        \"addMore\": false,\n+        \"location\": {\n+          \"column\": 0,\n+          \"row\": 0\n+        }\n+      },\n+      \"id\": \"1\",\n+      \"controls\": [\n+        {\n+          \"type\": \"obsControl\",\n+          \"label\": {\n+            \"translationKey\": \"WHO_STAGE_CONDITIONS_2\",\n+            \"id\": \"2\",\n+            \"units\": \"\",\n+            \"type\": \"label\",\n+            \"value\": \"WHO Stage Conditions\"\n+          },\n+          \"properties\": {\n+            \"mandatory\": true,\n+            \"notes\": false,\n+            \"addMore\": false,\n+            \"hideLabel\": false,\n+            \"controlEvent\": false,\n+            \"location\": {\n+              \"column\": 0,\n+              \"row\": 1\n+            },\n+            \"autoComplete\": false,\n+            \"multiSelect\": true,\n+            \"dropDown\": false\n+          },\n+          \"id\": \"2\",\n+          \"concept\": {\n+            \"name\": \"WHO Stage Conditions\",\n+            \"uuid\": \"c6fb0220-45d0-47b4-8390-8c43f7baabb8\",\n+            \"datatype\": \"Coded\",\n+            \"conceptClass\": \"Misc\",\n+            \"conceptHandler\": null,\n+            \"answers\": [\n+              {\n+                \"uuid\": \"a36e5810-d096-42e3-a96e-795da3a1d052\",\n+                \"name\": {\n+                  \"display\": \"Asymptomatic\",\n+                  \"uuid\": \"4f1a0c32-f4ce-421d-bf32-d5d174b27274\",\n+                  \"name\": \"Asymptomatic\",\n+                  \"locale\": \"en\"\n+                },\n+                \"translationKey\": \"ASYMPTOMATIC_2\"\n+              },\n+              {\n+                \"uuid\": \"0b6c0cfb-141e-4ae2-a9de-384723ba158c\",\n+                \"name\": {\n+                  \"display\": \"Herpes Zoster\",\n+                  \"uuid\": \"62097855-a54e-4b50-8dea-69085f10815c\",\n+                  \"name\": \"Herpes Zoster\"\n+                },\n+                \"translationKey\": \"HERPES_2\"\n+              }\n+            ]\n+          }\n+        }\n+      ]\n+    }\n+  ],\n+  \"events\": {},\n+  \"translationsUrl\": \"/openmrs/ws/rest/v1/bahmniie/form/translations\"\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "fd8d756f549f06d953981134f21ca32c1605cc23",
    "filename": "admin/src/test/resources/conceptSetup.xml",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/resources/conceptSetup.xml",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/resources/conceptSetup.xml",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/resources/conceptSetup.xml?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -95,4 +95,24 @@\n                   concept_name_id=\"304\" voided=\"false\" uuid=\"5d2d4cb7-955b-yyyz-mmm7-0ecc9415555\"\n                   concept_name_type=\"FULLY_SPECIFIED\" locale_preferred=\"0\"/>\n \n+    <!--Concepts for form2 encounter validation-->\n+    <concept concept_id=\"152\" retired=\"0\" datatype_id=\"4\" class_id=\"11\" is_set=\"0\" creator=\"1\"\n+             date_created=\"2020-08-08 20:31:00\" uuid=\"5d2d4cb7-955b-4837-yyyz-0ccc78701112\"/>\n+    <concept_name concept_id=\"152\" name=\"Asymptomatic\" locale=\"en\" creator=\"1\" date_created=\"2020-08-08 20:31:00\"\n+                  concept_name_id=\"306\" voided=\"false\" uuid=\"5d2d4cb7-955b-yyyz-mmm7-0ecc9415556\"\n+                  concept_name_type=\"FULLY_SPECIFIED\" locale_preferred=\"0\"/>\n+    <concept concept_id=\"153\" retired=\"0\" datatype_id=\"4\" class_id=\"11\" is_set=\"0\" creator=\"1\"\n+             date_created=\"2020-08-08 20:31:00\" uuid=\"5d2d4cb7-955b-4837-yyyz-0ccc78701113\"/>\n+    <concept_name concept_id=\"153\" name=\"Herpes Zoster\" locale=\"en\" creator=\"1\" date_created=\"2020-08-08 20:31:00\"\n+                  concept_name_id=\"307\" voided=\"false\" uuid=\"5d2d4cb7-955b-yyyz-mmm7-0ecc9415557\"\n+                  concept_name_type=\"FULLY_SPECIFIED\" locale_preferred=\"0\"/>\n+\n+    <concept concept_id=\"154\" retired=\"0\" datatype_id=\"5\" class_id=\"11\" is_set=\"0\" creator=\"1\"\n+             date_created=\"2020-08-08 20:31:00\" uuid=\"5d2d4cb7-955b-4837-yyyz-0ccc78701114\"/>\n+    <concept_name concept_id=\"154\" name=\"WHO Stage Conditions\" locale=\"en\" creator=\"1\" date_created=\"2020-08-08 20:31:00\"\n+                  concept_name_id=\"308\" voided=\"false\" uuid=\"5d2d4cb7-955b-yyyz-mmm7-0ecc9415558\"\n+                  concept_name_type=\"FULLY_SPECIFIED\" locale_preferred=\"0\"/>\n+    <concept_answer concept_answer_id=\"2000\" concept_id=\"154\" answer_concept=\"152\" creator=\"1\" date_created=\"2020-08-08 20:31:00\"/>\n+    <concept_answer concept_answer_id=\"2001\" concept_id=\"154\" answer_concept=\"153\" creator=\"1\" date_created=\"2020-08-08 20:31:00\"/>\n+\n </dataset>"
  },
  {
    "sha": "2ccb75e2db49428fe63351dcc726b30d1a46fed9",
    "filename": "admin/src/test/resources/form2DataSetup.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/resources/form2DataSetup.xml",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/admin/src/test/resources/form2DataSetup.xml",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/admin/src/test/resources/form2DataSetup.xml?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -6,10 +6,15 @@\n     <form form_id=\"1\" name=\"Vitals\" version=\"1\" published=\"true\" creator=\"1\" date_created=\"2019-09-19 00:00:00.0\"\n           changed_by=\"1\" date_changed=\"2019-09-19 00:00:00.0\" retired=\"false\"\n           uuid=\"94234edc-dad4-11e9-8a34-2a2ae2dbcce4\"/>\n+    <form form_id=\"2\" name=\"Form2EncountersTest\" version=\"2\" published=\"true\" creator=\"1\" date_created=\"2020-08-08 00:00:00.0\"\n+          changed_by=\"1\" date_changed=\"2019-09-19 00:00:00.0\" retired=\"false\"\n+          uuid=\"94234edc-dad4-11e9-8a34-2a2ae2dbcce5\"/>\n \n     <form_resource form_resource_id=\"1\" form_id=\"1\" name=\"Vitals\" value_reference=\"src/test/resources/Vitals_1.json\"\n                    datatype=\"org.bahmni.customdatatype.datatype.FileSystemStorageDatatype\"\n                    uuid=\"94234edc-dad4-11e9-8a34-2a2ae2dbdde4\"/>\n-\n+    <form_resource form_resource_id=\"2\" form_id=\"2\" name=\"Form2EncountersTest\" value_reference=\"src/test/resources/Form2Encounters.json\"\n+                   datatype=\"org.bahmni.customdatatype.datatype.FileSystemStorageDatatype\"\n+                   uuid=\"94234edc-dad4-11e9-8a34-2a2ae2dbdde5\"/>\n \n </dataset>\n\\ No newline at end of file"
  },
  {
    "sha": "de52bd0eb0c44c2730a01c66d975d52a7cab0ab5",
    "filename": "bahmnicore-omod/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/bahmnicore-omod/pom.xml",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/bahmnicore-omod/pom.xml",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/bahmnicore-omod/pom.xml?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -76,6 +76,11 @@\n             <artifactId>file-uploader</artifactId>\n             <version>${bahmniJavaUtilsVersion}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.bahmni.module</groupId>\n+            <artifactId>bahmni-migrator</artifactId>\n+            <version>${bahmniJavaUtilsVersion}</version>\n+        </dependency>\n         <dependency>\n             <groupId>org.bahmni.module</groupId>\n             <artifactId>bahmnicore-api</artifactId>"
  },
  {
    "sha": "f967616b35bde85cf2b1fcc49063776d16cbc02c",
    "filename": "bahmnicore-omod/src/main/java/org/bahmni/module/bahmnicore/web/v1_0/controller/AdminImportController.java",
    "status": "modified",
    "additions": 14,
    "deletions": 1,
    "changes": 15,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/bahmnicore-omod/src/main/java/org/bahmni/module/bahmnicore/web/v1_0/controller/AdminImportController.java",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/bahmnicore-omod/src/main/java/org/bahmni/module/bahmnicore/web/v1_0/controller/AdminImportController.java",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/bahmnicore-omod/src/main/java/org/bahmni/module/bahmnicore/web/v1_0/controller/AdminImportController.java?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -137,6 +137,19 @@ public boolean upload(@CookieValue(value=\"bahmni.user.location\", required=true)\n                           @RequestParam(value = \"file\") MultipartFile file,\n                           @RequestParam(value = \"patientMatchingAlgorithm\", required = false) String patientMatchingAlgorithm) throws IOException {\n \n+        return uploadEncounter(loginCookie, file, patientMatchingAlgorithm, false);\n+    }\n+\n+    @RequestMapping(value = baseUrl + \"/form2encounter\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public boolean uploadForm2EncountersWithValidations(@CookieValue(value=\"bahmni.user.location\", required=true) String loginCookie,\n+                          @RequestParam(value = \"file\") MultipartFile file,\n+                          @RequestParam(value = \"patientMatchingAlgorithm\", required = false) String patientMatchingAlgorithm) throws IOException {\n+\n+        return uploadEncounter(loginCookie, file, patientMatchingAlgorithm, true);\n+    }\n+\n+    private boolean uploadEncounter(@CookieValue(value = \"bahmni.user.location\", required = true) String loginCookie, @RequestParam(\"file\") MultipartFile file, @RequestParam(value = \"patientMatchingAlgorithm\", required = false) String patientMatchingAlgorithm, boolean performForm2Validations) throws IOException {\n         try {\n             String configuredExactPatientIdMatch = administrationService.getGlobalProperty(SHOULD_MATCH_EXACT_PATIENT_ID_CONFIG);\n             JsonParser jsonParser = new JsonParser();\n@@ -146,7 +159,7 @@ public boolean upload(@CookieValue(value=\"bahmni.user.location\", required=true)\n             if (configuredExactPatientIdMatch != null)\n                 shouldMatchExactPatientId = Boolean.parseBoolean(configuredExactPatientIdMatch);\n \n-            encounterPersister.init(Context.getUserContext(), patientMatchingAlgorithm, shouldMatchExactPatientId, loginUuid);\n+            encounterPersister.init(Context.getUserContext(), patientMatchingAlgorithm, shouldMatchExactPatientId, loginUuid, performForm2Validations);\n             return importCsv(ENCOUNTER_FILES_DIRECTORY, file, encounterPersister, 5, true, MultipleEncounterRow.class);\n         } catch (Throwable e) {\n             logger.error(\"Could not upload file\", e);"
  },
  {
    "sha": "386f727d4e025ebab0502cca77127c0f2766f3be",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/msf-oca-his/bahmni-core/blob/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/pom.xml",
    "raw_url": "https://github.com/msf-oca-his/bahmni-core/raw/f07c921fd9dbb696f2a9fe44c031b3db48459c7f/pom.xml",
    "contents_url": "https://api.github.com/repos/msf-oca-his/bahmni-core/contents/pom.xml?ref=f07c921fd9dbb696f2a9fe44c031b3db48459c7f",
    "patch": "@@ -181,13 +181,6 @@\n                 <type>jar</type>\n                 <scope>provided</scope>\n             </dependency>\n-            <dependency>\n-                <groupId>org.bahmni.module</groupId>\n-                <artifactId>bahmni-migrator</artifactId>\n-                <version>${bahmniJavaUtilsVersion}</version>\n-                <type>jar</type>\n-                <scope>provided</scope>\n-            </dependency>\n             <dependency>\n                 <groupId>org.openmrs.module</groupId>\n                 <artifactId>webservices.rest-omod-common</artifactId>"
  }
]
