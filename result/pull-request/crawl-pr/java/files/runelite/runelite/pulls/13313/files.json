[
  {
    "sha": "c7a4279c028721cf5ff732365321bdbdcf0fc0a7",
    "filename": "runelite-client/src/main/java/net/runelite/client/plugins/crowdsourcing/dialogue/CrowdsourcingDialogue.java",
    "status": "modified",
    "additions": 45,
    "deletions": 24,
    "changes": 69,
    "blob_url": "https://github.com/runelite/runelite/blob/82bc4a4d44e01cc91791ca9e903752e2aeaa6554/runelite-client/src/main/java/net/runelite/client/plugins/crowdsourcing/dialogue/CrowdsourcingDialogue.java",
    "raw_url": "https://github.com/runelite/runelite/raw/82bc4a4d44e01cc91791ca9e903752e2aeaa6554/runelite-client/src/main/java/net/runelite/client/plugins/crowdsourcing/dialogue/CrowdsourcingDialogue.java",
    "contents_url": "https://api.github.com/repos/runelite/runelite/contents/runelite-client/src/main/java/net/runelite/client/plugins/crowdsourcing/dialogue/CrowdsourcingDialogue.java?ref=82bc4a4d44e01cc91791ca9e903752e2aeaa6554",
    "patch": "@@ -25,12 +25,15 @@\n \n package net.runelite.client.plugins.crowdsourcing.dialogue;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import javax.inject.Inject;\n import net.runelite.api.Client;\n-import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WidgetLoaded;\n import net.runelite.api.widgets.Widget;\n import net.runelite.api.widgets.WidgetID;\n import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.callback.ClientThread;\n import net.runelite.client.eventbus.Subscribe;\n import net.runelite.client.plugins.crowdsourcing.CrowdsourcingManager;\n \n@@ -41,12 +44,12 @@\n \t@Inject\n \tprivate Client client;\n \n+\t@Inject\n+\tprivate ClientThread clientThread;\n+\n \t@Inject\n \tprivate CrowdsourcingManager manager;\n \n-\tprivate String lastNpcDialogueText = null;\n-\tprivate String lastPlayerDialogueText = null;\n-\tprivate Widget[] dialogueOptions;\n \n \tprivate String sanitize(String dialogue)\n \t{\n@@ -55,36 +58,54 @@ private String sanitize(String dialogue)\n \t}\n \n \t@Subscribe\n-\tpublic void onGameTick(GameTick tick)\n+\tpublic void onWidgetLoaded(WidgetLoaded event)\n \t{\n-\t\tWidget npcDialogueTextWidget = client.getWidget(WidgetInfo.DIALOG_NPC_TEXT);\n-\t\tif (npcDialogueTextWidget != null && !npcDialogueTextWidget.getText().equals(lastNpcDialogueText))\n+\t\tif (event.getGroupId() == WidgetID.DIALOG_OPTION_GROUP_ID)\n \t\t{\n-\t\t\tlastNpcDialogueText = npcDialogueTextWidget.getText();\n-\t\t\tString npcName = client.getWidget(WidgetInfo.DIALOG_NPC_NAME).getText();\n-\t\t\tNpcDialogueData data = new NpcDialogueData(sanitize(lastNpcDialogueText), npcName);\n-\t\t\tmanager.storeEvent(data);\n+\t\t\tclientThread.invokeLater(this::handlePlayerDialogueOptions);\n \t\t}\n-\n-\t\tWidget playerDialogueTextWidget = client.getWidget(WidgetID.DIALOG_PLAYER_GROUP_ID, 4);\n-\t\tif (playerDialogueTextWidget != null && !playerDialogueTextWidget.getText().equals(lastPlayerDialogueText))\n+\t\telse if (event.getGroupId() == WidgetID.DIALOG_NPC_GROUP_ID)\n \t\t{\n-\t\t\tlastPlayerDialogueText = playerDialogueTextWidget.getText();\n-\t\t\tPlayerDialogueData data = new PlayerDialogueData(sanitize(lastPlayerDialogueText));\n-\t\t\tmanager.storeEvent(data);\n+\t\t\tclientThread.invokeLater(this::handleNpcDialogue);\n \t\t}\n+\t\telse if (event.getGroupId() == WidgetID.DIALOG_PLAYER_GROUP_ID)\n+\t\t{\n+\t\t\tclientThread.invokeLater(this::handlePlayerDialogue);\n+\t\t}\n+\t}\n \n+\tprivate void handlePlayerDialogueOptions()\n+\t{\n \t\tWidget playerDialogueOptionsWidget = client.getWidget(WidgetID.DIALOG_OPTION_GROUP_ID, 1);\n-\t\tif (playerDialogueOptionsWidget != null && playerDialogueOptionsWidget.getChildren() != dialogueOptions)\n+\t\tWidget[] dialogueOptions = playerDialogueOptionsWidget.getChildren();\n+\t\tList<String> options = new ArrayList<>();\n+\t\tfor (Widget dialogueOption : dialogueOptions)\n \t\t{\n-\t\t\tdialogueOptions = playerDialogueOptionsWidget.getChildren();\n-\t\t\tString[] optionsText = new String[dialogueOptions.length];\n-\t\t\tfor (int i = 0; i < dialogueOptions.length; i++)\n+\t\t\tString text = dialogueOption.getText();\n+\t\t\tif (!text.isEmpty())\n \t\t\t{\n-\t\t\t\toptionsText[i] = sanitize(dialogueOptions[i].getText());\n+\t\t\t\toptions.add(sanitize(text));\n \t\t\t}\n-\t\t\tDialogueOptionsData data = new DialogueOptionsData(optionsText);\n-\t\t\tmanager.storeEvent(data);\n \t\t}\n+\t\tDialogueOptionsData data = new DialogueOptionsData(options.toArray(new String[0]));\n+\t\tmanager.storeEvent(data);\n \t}\n+\n+\tprivate void handleNpcDialogue()\n+\t{\n+\t\tWidget npcDialogueTextWidget = client.getWidget(WidgetInfo.DIALOG_NPC_TEXT);\n+\t\tString npcDialogueText = npcDialogueTextWidget.getText();\n+\t\tString npcName = client.getWidget(WidgetInfo.DIALOG_NPC_NAME).getText();\n+\t\tNpcDialogueData data = new NpcDialogueData(sanitize(npcDialogueText), npcName);\n+\t\tmanager.storeEvent(data);\n+\t}\n+\n+\tprivate void handlePlayerDialogue()\n+\t{\n+\t\tWidget playerDialogueTextWidget = client.getWidget(WidgetID.DIALOG_PLAYER_GROUP_ID, 4);\n+\t\tString playerDialogueText = playerDialogueTextWidget.getText();\n+\t\tPlayerDialogueData data = new PlayerDialogueData(sanitize(playerDialogueText));\n+\t\tmanager.storeEvent(data);\n+\t}\n+\n }"
  }
]
