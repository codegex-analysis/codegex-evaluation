[
  {
    "sha": "95a7314d214a0263b094763b490c0ad9b46295a9",
    "filename": "ljv/src/main/java/org/atpfivt/ljv/GraphBuilder.java",
    "status": "modified",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/atp-mipt/ljv/blob/d75cc45dc0fb0bace01035a4d73bfbc3749be5ba/ljv/src/main/java/org/atpfivt/ljv/GraphBuilder.java",
    "raw_url": "https://github.com/atp-mipt/ljv/raw/d75cc45dc0fb0bace01035a4d73bfbc3749be5ba/ljv/src/main/java/org/atpfivt/ljv/GraphBuilder.java",
    "contents_url": "https://api.github.com/repos/atp-mipt/ljv/contents/ljv/src/main/java/org/atpfivt/ljv/GraphBuilder.java?ref=d75cc45dc0fb0bace01035a4d73bfbc3749be5ba",
    "patch": "@@ -5,7 +5,11 @@\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n+import java.util.AbstractMap;\n import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n \n final class GraphBuilder {\n     private final IdentityHashMap<Object, String> objectsId = new IdentityHashMap<>();\n@@ -232,4 +236,80 @@ public String generateDOT(Object obj) {\n                 .append(\"}\\n\")\n                 .toString();\n     }\n+\n+    private void generateHeader() {\n+        out.append(\"digraph Java {\\n\")\n+                .append(\"\\trankdir=\\\"\")\n+                .append(ljv.getDirection())\n+                .append(\"\\\";\\n\")\n+                .append(\"\\tnode[shape=plaintext]\\n\");\n+    }\n+\n+    String generateDOT() {\n+        List<Object> roots = this.ljv.getRoots();\n+        IdentityHashMap<Object, List<Object>> sameObjectMap = new IdentityHashMap<>();\n+        List<AbstractMap.SimpleEntry<Object, Boolean>> pairs = roots.stream()\n+                .map(root -> new AbstractMap.SimpleEntry<>(root, false))\n+                .collect(Collectors.toList());\n+        // create a map of object to its references\n+       while(true) {\n+           Optional<AbstractMap.SimpleEntry<Object, Boolean>> notProcessedPairOptional = findNotProcessedPair(pairs);\n+           if (notProcessedPairOptional.isPresent()) {\n+               AbstractMap.SimpleEntry<Object, Boolean> objectBooleanSimpleEntry = notProcessedPairOptional.get();\n+               objectBooleanSimpleEntry.setValue(Boolean.TRUE);\n+               List<AbstractMap.SimpleEntry<Object, Boolean>> references = findReferences(objectBooleanSimpleEntry, pairs);\n+               List<Object> refList = references.stream()\n+                       .map(AbstractMap.SimpleEntry::getKey)\n+                       .collect(Collectors.toList());\n+               // may be count is sufficient here check\n+               sameObjectMap.put(objectBooleanSimpleEntry.getKey(), refList);\n+           }\n+           else{\n+               break;\n+           }\n+       }\n+       // create the diagram first\n+       generateHeader();\n+       for(var entry : sameObjectMap.entrySet()){\n+            this.generateDotInternal(entry.getKey());\n+       }\n+       // link number of references\n+        for (var entry : sameObjectMap.entrySet()) {\n+            out.append(\"\\t\")\n+                    .append(entry.getValue().size()+1) // including itself\n+                    .append(\" -> \")\n+                    .append(dotName(entry.getKey()))\n+                    .append(\"[label=\\\"\")\n+                    .append(\"\\\",fontsize=12];\\n\");\n+        }\n+        // may be clear roots?\n+        this.ljv.getRoots().clear();\n+        return out\n+                .append(\"}\\n\")\n+                .toString();\n+\n+    }\n+\n+    /**\n+     *\n+     * @param pair\n+     * @param pairs\n+     * @return all references of a object in th pair and set the values to processed\n+     */\n+    private List<AbstractMap.SimpleEntry<Object, Boolean>> findReferences(AbstractMap.SimpleEntry<Object, Boolean> pair, List<AbstractMap.SimpleEntry<Object, Boolean>> pairs) {\n+        return pairs.stream()\n+                .filter(p -> p.getValue() == Boolean.FALSE)\n+                .filter(p -> p.getKey() == pair.getKey())\n+                .peek(p -> p.setValue(Boolean.TRUE)\n+                )\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Optional<AbstractMap.SimpleEntry<Object, Boolean>> findNotProcessedPair(List<AbstractMap.SimpleEntry<Object, Boolean>> pairs) {\n+        return pairs.stream()\n+                .filter(p -> p.getValue()\n+                        .equals(Boolean.FALSE))\n+                .findFirst();\n+    }\n+\n }"
  },
  {
    "sha": "1b1f896d20792ce8a57d1dab419d9fca187421c5",
    "filename": "ljv/src/main/java/org/atpfivt/ljv/LJV.java",
    "status": "modified",
    "additions": 29,
    "deletions": 1,
    "changes": 30,
    "blob_url": "https://github.com/atp-mipt/ljv/blob/d75cc45dc0fb0bace01035a4d73bfbc3749be5ba/ljv/src/main/java/org/atpfivt/ljv/LJV.java",
    "raw_url": "https://github.com/atp-mipt/ljv/raw/d75cc45dc0fb0bace01035a4d73bfbc3749be5ba/ljv/src/main/java/org/atpfivt/ljv/LJV.java",
    "contents_url": "https://api.github.com/repos/atp-mipt/ljv/contents/ljv/src/main/java/org/atpfivt/ljv/LJV.java?ref=d75cc45dc0fb0bace01035a4d73bfbc3749be5ba",
    "patch": "@@ -24,7 +24,8 @@\n import org.atpfivt.ljv.provider.ObjectAttributesProvider;\n import org.atpfivt.ljv.provider.impl.*;\n \n-import java.lang.reflect.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n import java.util.*;\n import java.util.stream.Collectors;\n \n@@ -37,6 +38,7 @@\n     private final List<ArrayElementAttributeProvider> arrayElementAttributeProviders = new ArrayList<>();\n     private final Set<Object> pretendPrimitiveSet = new HashSet<>();\n     private final Set<Object> ignoreSet = new HashSet<>();\n+    private final List<Object> roots = new ArrayList<>();\n     private Direction direction = Direction.TB;\n \n     public LJV setDirection(Direction direction) {\n@@ -252,6 +254,10 @@ public String getArrayElementAttributes(Object array, int index) {\n         }\n     }\n \n+    public List<Object> getRoots() {\n+        return roots;\n+    }\n+\n     /**\n      * Treat objects of this class as primitives; i.e., {@code toString}\n      * is called on the object, and the result displayed in the label like\n@@ -355,4 +361,26 @@ public boolean isIgnoreNullValuedFields() {\n     public String drawGraph(Object obj) {\n         return new GraphBuilder(this).generateDOT(obj);\n     }\n+\n+    /**\n+     *add an Object to {@code roots}\n+     * @param  root\n+     * @return this\n+     */\n+    public LJV addRoot(Object root){\n+        if(root != null) {\n+            this.roots.add(root);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * roots {@code roots} references counts can be visualized\n+     * @return String representation containing DOT commands to build the graph\n+     */\n+    public String drawGraph() {\n+        return new GraphBuilder(this).generateDOT();\n+    }\n+\n+\n }"
  },
  {
    "sha": "219092c303de46f6e93d39f52d600b0f95b4f271",
    "filename": "ljv/src/test/java/org/atpfivt/ljv/LJVTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 3,
    "changes": 14,
    "blob_url": "https://github.com/atp-mipt/ljv/blob/d75cc45dc0fb0bace01035a4d73bfbc3749be5ba/ljv/src/test/java/org/atpfivt/ljv/LJVTest.java",
    "raw_url": "https://github.com/atp-mipt/ljv/raw/d75cc45dc0fb0bace01035a4d73bfbc3749be5ba/ljv/src/test/java/org/atpfivt/ljv/LJVTest.java",
    "contents_url": "https://api.github.com/repos/atp-mipt/ljv/contents/ljv/src/test/java/org/atpfivt/ljv/LJVTest.java?ref=d75cc45dc0fb0bace01035a4d73bfbc3749be5ba",
    "patch": "@@ -1,13 +1,10 @@\n package org.atpfivt.ljv;\n \n import org.approvaltests.Approvals;\n-import org.atpfivt.ljv.provider.impl.NewObjectHighlighter;\n import org.junit.jupiter.api.Test;\n import org.reflections.ReflectionUtils;\n \n-import java.io.IOException;\n import java.lang.reflect.Field;\n-import java.net.URISyntaxException;\n import java.util.*;\n \n public class LJVTest {\n@@ -106,6 +103,17 @@ void paulsExample() {\n         Approvals.verify(actual_graph);\n     }\n \n+    @Test\n+    void multipleRoots() {\n+        ArrayList<Object> a = new ArrayList<>();\n+        Person p = new Person(\"Albert\", Gender.MALE, 35);\n+        Person p1 = p;\n+        Person p2 = p;\n+        Person p4 = new Person(\"Albert\", Gender.MALE, 35);\n+        String actual_graph = new LJV().addRoot(p).addRoot(p1).addRoot(p2).addRoot(p4).drawGraph();\n+        Approvals.verify(actual_graph);\n+    }\n+\n     @Test\n     void testNull() {\n         String actualGraph = new LJV().drawGraph(null);"
  },
  {
    "sha": "f2394919b918ef67cb357d3dd1358e75a9f62b68",
    "filename": "ljv/src/test/java/org/atpfivt/ljv/approvals/LJVTest.multipleRoots.approved.txt",
    "status": "added",
    "additions": 152,
    "deletions": 0,
    "changes": 152,
    "blob_url": "https://github.com/atp-mipt/ljv/blob/d75cc45dc0fb0bace01035a4d73bfbc3749be5ba/ljv/src/test/java/org/atpfivt/ljv/approvals/LJVTest.multipleRoots.approved.txt",
    "raw_url": "https://github.com/atp-mipt/ljv/raw/d75cc45dc0fb0bace01035a4d73bfbc3749be5ba/ljv/src/test/java/org/atpfivt/ljv/approvals/LJVTest.multipleRoots.approved.txt",
    "contents_url": "https://api.github.com/repos/atp-mipt/ljv/contents/ljv/src/test/java/org/atpfivt/ljv/approvals/LJVTest.multipleRoots.approved.txt?ref=d75cc45dc0fb0bace01035a4d73bfbc3749be5ba",
    "patch": "@@ -0,0 +1,152 @@\n+digraph Java {\n+\trankdir=\"TB\";\n+\tnode[shape=plaintext]\n+\tn1[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Person</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>age: 35</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>65</td>\n+\t\t\t\t<td>108</td>\n+\t\t\t\t<td>98</td>\n+\t\t\t\t<td>101</td>\n+\t\t\t\t<td>114</td>\n+\t\t\t\t<td>116</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn2 -> n3[label=\"value\",fontsize=12];\n+\tn1 -> n2[label=\"name\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Gender</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>ordinal: 0</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 2358797</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn6[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>77</td>\n+\t\t\t\t<td>65</td>\n+\t\t\t\t<td>76</td>\n+\t\t\t\t<td>69</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn5 -> n6[label=\"value\",fontsize=12];\n+\tn4 -> n5[label=\"name\",fontsize=12];\n+\tn1 -> n4[label=\"gender\",fontsize=12];\n+\tn7[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Person</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>age: 35</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn2[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 0</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn3[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>65</td>\n+\t\t\t\t<td>108</td>\n+\t\t\t\t<td>98</td>\n+\t\t\t\t<td>101</td>\n+\t\t\t\t<td>114</td>\n+\t\t\t\t<td>116</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn2 -> n3[label=\"value\",fontsize=12];\n+\tn7 -> n2[label=\"name\",fontsize=12];\n+\tn4[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='2'>Gender</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>ordinal: 0</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn5[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td rowspan='3'>String</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>hash: 2358797</td>\n+\t\t\t</tr>\n+\t\t\t<tr>\n+\t\t\t\t<td>coder: 0</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn6[label=<\n+\t\t<table border='0' cellborder='1' cellspacing='0'>\n+\t\t\t<tr>\n+\t\t\t\t<td>77</td>\n+\t\t\t\t<td>65</td>\n+\t\t\t\t<td>76</td>\n+\t\t\t\t<td>69</td>\n+\t\t\t</tr>\n+\t\t</table>\n+\t>];\n+\tn5 -> n6[label=\"value\",fontsize=12];\n+\tn4 -> n5[label=\"name\",fontsize=12];\n+\tn7 -> n4[label=\"gender\",fontsize=12];\n+\t1 -> n1[label=\"\",fontsize=12];\n+\t3 -> n7[label=\"\",fontsize=12];\n+}"
  }
]
