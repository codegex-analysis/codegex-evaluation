[
  {
    "sha": "6e11f24b6eb0d47af831f26cecc4e7ecc37738ad",
    "filename": "src/by/it/group873602/kavetski/lesson01/FiboA.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson01/FiboA.java",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson01/FiboA.java",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson01/FiboA.java?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,50 @@\n+package by.it.group873602.kavetski.lesson01;\n+\n+import java.math.BigInteger;\n+\n+/*\n+ * Вам необходимо выполнить рекурсивный способ вычисления чисел Фибоначчи\n+ */\n+\n+public class FiboA {\n+\n+    private long startTime = System.currentTimeMillis();\n+\n+    private long time() {\n+        return System.currentTimeMillis() - startTime;\n+    }\n+\n+    public static void main(String[] args) {\n+        FiboA fibo = new FiboA();\n+        int n = 33;\n+        System.out.printf(\"calc(%d)=%d \\n\\t time=%d \\n\\n\", n, fibo.calc(n), fibo.time());\n+\n+        //вычисление чисел фибоначчи медленным методом (рекурсией)\n+        fibo = new FiboA();\n+        n = 33;\n+        System.out.printf(\"slowA(%d)=%d \\n\\t time=%d \\n\\n\", n, fibo.slowA(n), fibo.time());\n+    }\n+\n+\n+    private int calc(int n) {\n+        //здесь простейший вариант, в котором код совпадает с мат.определением чисел Фибоначчи\n+        //время O(2^n)\n+        if(n < 2) return n;\n+        return calc(n - 1) + calc(n - 2);\n+    }\n+\n+\n+    BigInteger slowA(Integer n) {\n+        //рекурсия\n+        //здесь нужно реализовать вариант без ограничения на размер числа,\n+        //в котором код совпадает с мат.определением чисел Фибоначчи\n+        //время O(2^n)\n+        if (n == 0) return BigInteger.ZERO;\n+        if (n == 1) return BigInteger.ONE;\n+        else return slowA(n - 1).add(slowA(n - 2));\n+    }\n+\n+\n+\n+}\n+"
  },
  {
    "sha": "5ddd41d146a620b27a7768997640eee147e4043d",
    "filename": "src/by/it/group873602/kavetski/lesson01/FiboB.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson01/FiboB.java",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson01/FiboB.java",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson01/FiboB.java?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,39 @@\n+package by.it.group873602.kavetski.lesson01;\n+\n+import java.math.BigInteger;\n+\n+/*\n+ * Вам необходимо выполнить способ вычисления чисел Фибоначчи с вспомогательным массивом\n+ * без ограничений на размер результата (BigInteger)\n+ */\n+\n+public class FiboB {\n+\n+    private long startTime = System.currentTimeMillis();\n+\n+    private long time() {\n+        return System.currentTimeMillis() - startTime;\n+    }\n+\n+    public static void main(String[] args) {\n+\n+        //вычисление чисел простым быстрым методом\n+        FiboB fibo = new FiboB();\n+        int n = 55555;\n+        System.out.printf(\"fastB(%d)=%d \\n\\t time=%d \\n\\n\", n, fibo.fastB(n), fibo.time());\n+    }\n+\n+    BigInteger fastB(Integer n) {\n+        //здесь нужно реализовать вариант с временем O(n) и памятью O(n)\n+        if (n < 2) return BigInteger.valueOf(n);\n+        BigInteger[] fiboArray = new BigInteger[n + 1];\n+        fiboArray[0] = BigInteger.valueOf(0);\n+        fiboArray[1] = BigInteger.valueOf(1);\n+        for (Integer i = 2; i <= n; i++) {\n+            fiboArray[i] = fiboArray[i - 1].add(fiboArray[i - 2]);\n+        }\n+        return fiboArray[n];\n+    }\n+\n+}\n+"
  },
  {
    "sha": "6cfd2f73da7c6517131d8e4de322dcd0e1ae6e1c",
    "filename": "src/by/it/group873602/kavetski/lesson01/FiboC.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson01/FiboC.java",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson01/FiboC.java",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson01/FiboC.java?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,44 @@\n+package by.it.group873602.kavetski.lesson01;\n+\n+/*\n+ * Даны целые числа 1<=n<=1E18 и 2<=m<=1E5,\n+ * необходимо найти остаток от деления n-го числа Фибоначчи на m.\n+ * время расчета должно быть не более 2 секунд\n+ */\n+\n+public class FiboC {\n+\n+    private long startTime = System.currentTimeMillis();\n+\n+    private long time() {\n+        return System.currentTimeMillis() - startTime;\n+    }\n+\n+    public static void main(String[] args) {\n+        FiboC fibo = new FiboC();\n+        int n = 10;\n+        int m = 2;\n+        System.out.printf(\"fasterC(%d)=%d \\n\\t time=%d \\n\\n\", n, fibo.fasterC(n, m), fibo.time());\n+    }\n+\n+    long fasterC(long n, int m) {\n+        //решение практически невозможно найти интуитивно\n+        //вам потребуется дополнительный поиск информации\n+        //см. период Пизано\n+        int size = 6*m+1;\n+        long [] pisano = new long[size];\n+        pisano[0] = 1;\n+        pisano[1] = 1;\n+        for (int i = 2; i < size; i++) {\n+            pisano[i] = ((pisano[i-1] + pisano[i-2]) % m);\n+            if (pisano[i] == 1 && pisano[i-1] == 0) {\n+                int index = (int) (n % i) - 1;\n+                return pisano[index];\n+            }\n+        }\n+        return 0L;\n+    }\n+\n+\n+}\n+"
  },
  {
    "sha": "150c1486880427c4254e98f0ecdda91ac7938eeb",
    "filename": "src/by/it/group873602/kavetski/lesson01/FiboTest.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson01/FiboTest.java",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson01/FiboTest.java",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson01/FiboTest.java?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,44 @@\n+package by.it.group873602.kavetski.lesson01;\n+\n+import org.junit.Test;\n+\n+import java.math.BigInteger;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+@SuppressWarnings(\"all\")\n+public class FiboTest {\n+    /*\n+    для прохождения тестов создайте JUnit-конфигурацию на свой пакет:\n+    Поля:\n+    Name:               Test a_khmelev (тут ваша фамилия)\n+    Test kind:          All in package\n+    Package:            by.it.группа.a_khmelev (тут ваша фамилия)\n+    Search for test:    In whole project\n+    */\n+\n+    @Test(timeout = 2000)\n+    public void slowA() throws Exception {\n+        FiboA fibo=new FiboA();\n+        BigInteger res=fibo.slowA(33);\n+        boolean ok=res.toString().equals(\"3524578\");\n+        assertTrue(\"slowA failed\", ok);\n+    }\n+\n+    @Test(timeout = 2000)\n+    public void fastB() throws Exception {\n+        FiboB fibo=new FiboB();\n+        BigInteger res=fibo.fastB(55555);\n+        boolean ok=res.toString().equals(\"\");\n+        assertTrue(\"fastB failed\", ok);\n+    }\n+\n+\n+    @Test(timeout = 2000)\n+    public void fasterC() throws Exception {\n+        FiboC fibo=new FiboC();\n+        assertTrue(\"fasterC failed 1\", fibo.fasterC(10,2)==1L);\n+        assertTrue(\"fasterC failed 2\", fibo.fasterC(1,2)==1L);\n+        assertTrue(\"fasterC failed 3\", fibo.fasterC(999999999,321)==34L);\n+    }\n+}"
  },
  {
    "sha": "fb483e93d8f8bacebde54980839346f4ad5b38f1",
    "filename": "src/by/it/group873602/kavetski/lesson02/A_VideoRegistrator.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/A_VideoRegistrator.java",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/A_VideoRegistrator.java",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson02/A_VideoRegistrator.java?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,48 @@\n+package by.it.group873602.kavetski.lesson02;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+/*\n+даны события events\n+реализуйте метод calcStartTimes, так, чтобы число включений регистратора на\n+заданный период времени (1) было минимальным, а все события events\n+были зарегистрированы.\n+Алгоритм жадный. Для реализации обдумайте надежный шаг.\n+*/\n+\n+public class A_VideoRegistrator {\n+\n+    public static void main(String[] args) {\n+        A_VideoRegistrator instance=new A_VideoRegistrator();\n+        double[] events=new double[]{1, 1.1, 1.6, 2.2, 2.4, 2.7, 3.9, 8.1, 9.1, 5.5, 3.7};\n+        List<Double> starts=instance.calcStartTimes(events,1); //рассчитаем моменты старта, с длинной сеанса 1\n+        System.out.println(starts);                            //покажем моменты старта\n+    }\n+    //модификаторы доступа опущены для возможности тестирования\n+    List<Double> calcStartTimes(double[] events, double workDuration){\n+        //events - события которые нужно зарегистрировать\n+        //timeWorkDuration время работы видеокамеры после старта\n+        List<Double> result;\n+        result = new ArrayList<>();\n+        int i=0;                              //i - это индекс события events[i]\n+        //комментарии от проверочного решения сохранены для подсказки, но вы можете их удалить.\n+        //подготовка к жадному поглощению массива событий\n+        //hint: сортировка Arrays.sort обеспечит скорость алгоритма\n+        //C*(n log n) + C1*n = O(n log n)\n+\n+        //пока есть незарегистрированные события\n+        //получим одно событие по левому краю\n+        //и запомним время старта видеокамеры\n+        //вычислим момент окончания работы видеокамеры\n+        //и теперь пропустим все покрываемые события\n+        //за время до конца работы, увеличивая индекс\n+        Arrays.sort(events);\n+        while (i < events.length) {\n+            double shutdown = events[i] + workDuration;\n+            result.add(events[i]);\n+            while (i < events.length && (events[i] <= shutdown)) i++;\n+        }\n+        return result;                        //вернем итог\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "27b95f472b8a487752a0b32a2046e6df9ff579b2",
    "filename": "src/by/it/group873602/kavetski/lesson02/B_Sheduler.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/B_Sheduler.java",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/B_Sheduler.java",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson02/B_Sheduler.java?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,76 @@\n+package by.it.group873602.kavetski.lesson02;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+/*\n+даны интервальные события events\n+реализуйте метод calcStartTimes, так, чтобы число принятых к выполнению\n+непересекающихся событий было максимально.\n+Алгоритм жадный. Для реализации обдумайте надежный шаг.\n+*/\n+\n+public class B_Sheduler {\n+    //событие у аудитории(два поля: начало и конец)\n+    static class Event {\n+        int start;\n+        int stop;\n+\n+        Event(int start, int stop) {\n+            this.start = start;\n+            this.stop = stop;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"(\"+ start +\":\" + stop + \")\";\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        B_Sheduler instance = new B_Sheduler();\n+        Event[] events = {  new Event(0, 3),  new Event(0, 1), new Event(1, 2), new Event(3, 5),\n+                new Event(1, 3),  new Event(1, 3), new Event(1, 3), new Event(3, 6),\n+                new Event(2, 7),  new Event(2, 3), new Event(2, 7), new Event(7, 9),\n+                new Event(3, 5),  new Event(2, 4), new Event(2, 3), new Event(3, 7),\n+                new Event(4, 5),  new Event(6, 7), new Event(6, 9), new Event(7, 9),\n+                new Event(8, 9),  new Event(4, 6), new Event(8, 10), new Event(7, 10)\n+        };\n+\n+        List<Event> starts = instance.calcStartTimes(events,0,10);  //рассчитаем оптимальное заполнение аудитории\n+        System.out.println(starts);                                 //покажем рассчитанный график занятий\n+    }\n+\n+    List<Event> calcStartTimes(Event[] events, int from, int to) {\n+        //events - события которые нужно распределить в аудитории\n+        //в период [from, int] (включительно).\n+        //оптимизация проводится по наибольшему числу непересекающихся событий.\n+        //начало и конец событий могут совпадать.\n+        List<Event> result;\n+        result = new ArrayList<>();\n+        //ваше решение.\n+        Arrays.sort(events, (event1, event2) -> {\n+            if (event1.start == event2.start)\n+                return Integer.compare(event1.stop, event2.stop);\n+            return Integer.compare(event1.start, event2.start);\n+        });\n+        int i = 0;\n+        int min;\n+        int current = from;\n+        while (i < events.length && (events[i].start < from))\n+            i++;\n+        do {\n+            min = -1;\n+            for (int j = i; j < events.length; j++) {\n+                if (current <= events[j].start && events[j].stop <= to && (min == -1 || events[j].stop < events[min].stop)) min = j;\n+            }\n+            if (min != -1) {\n+                result.add(events[min]);\n+                i = min + 1;\n+                current = events[min].stop;\n+            }\n+\n+        } while (min != -1);\n+        return result;                        //вернем итог\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1050c47ea940ea29586e0e1e845eef2f5ba7a553",
    "filename": "src/by/it/group873602/kavetski/lesson02/C_GreedyKnapsack.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/C_GreedyKnapsack.java",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/C_GreedyKnapsack.java",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson02/C_GreedyKnapsack.java?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,86 @@\n+package by.it.group873602.kavetski.lesson02;\n+/*\n+Даны\n+1) объем рюкзака 4\n+2) число возможных предметов 60\n+3) сам набор предметов\n+    100 50\n+    120 30\n+    100 50\n+Все это указано в файле (by/it/a_khmelev/lesson02/greedyKnapsack.txt)\n+\n+Необходимо собрать наиболее дорогой вариант рюкзака для этого объема\n+Предметы можно резать на кусочки (т.е. алгоритм будет жадным)\n+ */\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.util.Arrays;\n+import java.util.Scanner;\n+\n+public class C_GreedyKnapsack {\n+    private class Item implements Comparable<Item> {\n+        int cost;\n+        int weight;\n+\n+        Item(int cost, int weight) {\n+            this.cost = cost;\n+            this.weight = weight;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Item{\" +\n+                    \"cost=\" + cost +\n+                    \", weight=\" + weight +\n+                    '}';\n+        }\n+\n+        @Override\n+        public int compareTo(Item o) {\n+            //тут может быть ваш компаратор\n+            return Double.compare((double)this.cost / (double)this.weight, (double)o.cost / (double)o.weight);\n+        }\n+    }\n+\n+    double calc(File source) throws FileNotFoundException {\n+        Scanner input = new Scanner(source);\n+        int n = input.nextInt();      //сколько предметов в файле\n+        int W = input.nextInt();      //какой вес у рюкзака\n+        Item[] items = new Item[n];   //получим список предметов\n+        for (int i = 0; i < n; i++) { //создавая каждый конструктором\n+            items[i] = new Item(input.nextInt(), input.nextInt());\n+        }\n+        //покажем предметы\n+        for (Item item:items) {\n+            System.out.println(item);\n+        }\n+        System.out.printf(\"Всего предметов: %d. Рюкзак вмещает %d кг.\\n\",n,W);\n+\n+        //тут необходимо реализовать решение задачи\n+        //итогом является максимально воможная стоимость вещей в рюкзаке\n+        //вещи можно резать на кусочки (непрерывный рюкзак)\n+        double result = 0;\n+        //тут реализуйте алгоритм сбора рюкзака\n+        //будет особенно хорошо, если с собственной сортировкой\n+        //кроме того, можете описать свой компаратор в классе Item\n+        //ваше решение.\n+        Arrays.sort(items);\n+        for (int i = n - 1; i >= 0 && W > 0; i--) {\n+            double w = Math.min(items[i].weight, W);\n+            W -= w;\n+            result += (double)items[i].cost * w / items[i].weight;\n+        }\n+\n+        System.out.printf(\"Удалось собрать рюкзак на сумму %f\\n\",result);\n+        return result;\n+    }\n+\n+    public static void main(String[] args) throws FileNotFoundException {\n+        long startTime = System.currentTimeMillis();\n+        String root=System.getProperty(\"user.dir\")+\"/src/\";\n+        File f=new File(root+\"by/it/a_khmelev/lesson02/greedyKnapsack.txt\");\n+        double costFinal=new C_GreedyKnapsack().calc(f);\n+        long finishTime = System.currentTimeMillis();\n+        System.out.printf(\"Общая стоимость %f (время %d)\",costFinal,finishTime - startTime);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c9582790963b5b927063b05dbb21b12afe998445",
    "filename": "src/by/it/group873602/kavetski/lesson02/Lesson2Test.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/Lesson2Test.java",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/Lesson2Test.java",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson02/Lesson2Test.java?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,54 @@\n+package by.it.group873602.kavetski.lesson02;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class Lesson2Test {\n+    /*\n+    для прохождения тестов создайте JUnit-конфигурацию на свой пакет:\n+    Поля:\n+    Name:               Test a_khmelev (тут ваша фамилия)\n+    Test kind:          All in package\n+    Package:            by.it.a_khmelev (тут ваша фамилия)\n+    Search for test:    In whole project\n+    */\n+\n+\n+    @Test\n+    public void A_VideoRegistrator() {\n+        A_VideoRegistrator instance=new A_VideoRegistrator();\n+        double[] events=new double[]{1, 1.1, 1.6, 2.2, 2.4, 2.7, 3.9, 8.1, 9.1, 5.5, 3.7};\n+        List<Double> starts=instance.calcStartTimes(events,1); //рассчитаем моменты старта, с длинной сеанса 1\n+        boolean ok=starts.toString().equals(\"[1.0, 2.2, 3.7, 5.5, 8.1]\");\n+        assertTrue(\"slowA failed\", ok);\n+    }\n+\n+    @Test\n+    public void B_Sheduler() {\n+        B_Sheduler instance = new B_Sheduler();\n+        B_Sheduler.Event[] events = {new B_Sheduler.Event(0, 3), new B_Sheduler.Event(0, 1), new B_Sheduler.Event(1, 2), new B_Sheduler.Event(3, 5),\n+                new B_Sheduler.Event(1, 3), new B_Sheduler.Event(1, 3), new B_Sheduler.Event(1, 3), new B_Sheduler.Event(3, 6),\n+                new B_Sheduler.Event(2, 7), new B_Sheduler.Event(2, 3), new B_Sheduler.Event(2, 7), new B_Sheduler.Event(7, 9),\n+                new B_Sheduler.Event(3, 5), new B_Sheduler.Event(2, 4), new B_Sheduler.Event(2, 3), new B_Sheduler.Event(3, 7),\n+                new B_Sheduler.Event(4, 5), new B_Sheduler.Event(6, 7), new B_Sheduler.Event(6, 9), new B_Sheduler.Event(7, 9),\n+                new B_Sheduler.Event(8, 9), new B_Sheduler.Event(4, 6), new B_Sheduler.Event(8, 10), new B_Sheduler.Event(7, 10)\n+        };\n+\n+        List<B_Sheduler.Event> starts = instance.calcStartTimes(events, 0, 10);  //рассчитаем оптимальное заполнение аудитории\n+        boolean ok=starts.toString().equals(\"[(0:1), (1:2), (2:3), (3:5), (6:7), (7:9)]\");\n+        assertTrue(\"B_Sheduler failed\", ok);\n+    }\n+    @Test\n+    public void C_GreedyKnapsack() throws Exception {\n+        String root=System.getProperty(\"user.dir\")+\"/src/\";\n+        File f=new File(root+\"by/it/a_khmelev/lesson02/greedyKnapsack.txt\");\n+        double costFinal=new C_GreedyKnapsack().calc(f);\n+        boolean ok=costFinal==200;\n+        assertTrue(\"B_Sheduler failed\", ok);\n+    }\n+\n+}"
  },
  {
    "sha": "60f162d0b8801ed4f620cefbea33eed7d45eb350",
    "filename": "src/by/it/group873602/kavetski/lesson02/greedyKnapsack.txt",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Khmelov/PISL2021-02-01/blob/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/greedyKnapsack.txt",
    "raw_url": "https://github.com/Khmelov/PISL2021-02-01/raw/88ac570aa2ed6f16b47504243d019d8d5d7926ea/src/by/it/group873602/kavetski/lesson02/greedyKnapsack.txt",
    "contents_url": "https://api.github.com/repos/Khmelov/PISL2021-02-01/contents/src/by/it/group873602/kavetski/lesson02/greedyKnapsack.txt?ref=88ac570aa2ed6f16b47504243d019d8d5d7926ea",
    "patch": "@@ -0,0 +1,5 @@\n+4 60\n+60 20\n+100 50\n+120 30\n+100 50"
  }
]
