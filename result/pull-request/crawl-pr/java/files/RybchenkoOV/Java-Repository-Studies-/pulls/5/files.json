[
  {
    "sha": "85198a6bf3dc2ddbd669ec7aa0ced14ca2c84932",
    "filename": "lesson1/HomeWork.java",
    "status": "removed",
    "additions": 0,
    "deletions": 146,
    "changes": 146,
    "blob_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/blob/a5915bbd53370ff93931a415b62c5552c5a1ead2/lesson1/HomeWork.java",
    "raw_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/raw/a5915bbd53370ff93931a415b62c5552c5a1ead2/lesson1/HomeWork.java",
    "contents_url": "https://api.github.com/repos/RybchenkoOV/Java-Repository-Studies-/contents/lesson1/HomeWork.java?ref=a5915bbd53370ff93931a415b62c5552c5a1ead2",
    "patch": "@@ -1,146 +0,0 @@\n-package lesson1;\n-\n-/**\n- * HOMEWORK LESSON 1\n- */\n-\n-import java.util.Scanner;\n-\n-/** Задание 1. Написать метод вычисляющий выражение a * (b + (c / d)) и возвращающий результат с плавающей точкой, где a, b, c, d – целочисленные входные параметры этого метода */\n-//\n-//public class FirstClass {\n-//    public static void main(String[] args) {\n-//\n-//        // Создаем переменные, вводим в них данные для передачи потом в мат.метод.\n-//        Scanner in = new Scanner(System.in);\n-//        System.out.print(\"Введите число a = \");\n-//        int a = in.nextInt();\n-//        System.out.print(\"Введите число b = \");\n-//        int b = in.nextInt();\n-//        System.out.print(\"Введите число c = \");\n-//        int c = in.nextInt();\n-//        System.out.print(\"Введите число d = \");\n-//        int d = in.nextInt();\n-//\n-//        // Запускаем метод, передавая в него переменные a, b, c, d\n-//        System.out.print(\"Рассчет по формуле: a * (b + (c / d)) = \");\n-//        float result = mathMethod(a, b, c, d);\n-//        System.out.print(result);\n-//    }\n-//\n-//    // Создаем мат.метод\n-//    public static float mathMethod(int argA, int argB, int argC, int argD) {\n-//        return argA * (argB + (argC / argD));\n-//    }\n-//}\n-\n-/** Задание 2. Написать метод, принимающий на вход два целых числа, и проверяющий что их сумма лежит в пределах от 10 до 20(включительно), если да – вернуть true, в противном случае – false */\n-//public class FirstClass {\n-//    public static void main(String[] args) {\n-//\n-//        // Создаем переменные, вводим в них данные для передачи потом в метод.\n-//        Scanner in = new Scanner(System.in);\n-//        System.out.print(\"Введите число 1 = \");\n-//        int numA = in.nextInt();\n-//        System.out.print(\"Введите число 2 = \");\n-//        int numB = in.nextInt();\n-//\n-//        // Запускаем метод, передавая в него переменные numA, numB\n-//        System.out.print(\"Сумма чисел в пределах (10, 20] = \");\n-//        boolean result = checkNumbers(numA, numB);\n-//        System.out.print(result);\n-//    }\n-//\n-//    // Создаем метод\n-//    public static boolean checkNumbers(int argA, int argB) {\n-//        int sum = argA + argB;\n-//        if (sum > 10 && sum <= 20) {\n-//            return true;\n-//        }\n-//        else {\n-//            return false;\n-//        }\n-//    }\n-//}\n-\n-/** Задание 3. Написать метод, которому в качестве параметра передается целое число, метод должен проверить положительное ли число передали, или отрицательное.\n- *  Замечание: ноль считаем положительным числом. Результат работы метода вывести в консоль */\n-//public class FirstClass {\n-//    public static void main(String[] args) {\n-//\n-//        // Создаем переменную, вводим в нее данные для передачи потом в метод.\n-//        Scanner in = new Scanner(System.in);\n-//        System.out.print(\"Введите число = \");\n-//        int numA = in.nextInt();\n-//\n-//        // Запускаем метод, передавая в него чило из переменной\n-//        System.out.print(\"Ваше число: \");\n-//        String result = posOrNeg(numA);\n-//        System.out.print(result);\n-//    }\n-//\n-//    // Создаем метод\n-//    public static String posOrNeg(int argA) {\n-//        if (argA >= 0) {\n-//            return \"положительное\";\n-//        }\n-//        else {\n-//            return \"отрицательное\";\n-//        }\n-//    }\n-//}\n-\n-/** Задание 4. Написать метод, которому в качестве параметра передается строка, обозначающая имя, метод должен вернуть приветственное сообщение «Привет, переданное_имя!»; Вывести приветствие в консоль. */\n-//public class FirstClass {\n-//    public static void main(String[] args) {\n-//\n-//        // Создаем переменную, вводим в нее данные для передачи потом в метод.\n-//        Scanner in = new Scanner(System.in);\n-//        System.out.print(\"Введите имя = \");\n-//        String name = in.next();\n-//\n-//        // Запускаем метод, передавая в него переменные a, b, c, d\n-//        System.out.print(\"Привет, \");\n-//        String result = namer(name+\"!\");\n-//        System.out.print(result);\n-//    }\n-//\n-//    // Создаем метод\n-//    public static String namer(String argA) {\n-//        return argA;\n-//        }\n-//}\n-\n-/** Задание 5. Написать метод, который определяет является ли год високосным. Каждый 4-й год является високосным, кроме каждого 100-го, при этом каждый 400-й – високосный.\n- * Для проверки работы вывести результаты работы метода в консоль */\n-//public class FirstClass {\n-//    public static void main(String[] args) {\n-//\n-//        // Создаем переменную, вводим в нее данные для передачи потом в метод.\n-//        Scanner in = new Scanner(System.in);\n-//        System.out.print(\"Введите год = \");\n-//        int year = in.nextInt();\n-//\n-//        // Запускаем метод, передавая в него введенный в переменную год\n-//        System.out.print(\"Год \" + year + \": \");\n-//\n-//        String result = checkYears(year);\n-//        System.out.print(result);\n-//    }\n-//\n-//    // Создаем метод\n-//    public static String checkYears(int argA) {\n-//        if (argA % 4 == 0) {\n-//            if (argA % 100 == 0) {\n-//                if (argA % 400 == 0) {\n-//                    return \"високосный\";\n-//                }\n-//                return \"обычный\";\n-//            }\n-//            return \"високосный\";\n-//        }\n-//        else {\n-//            return \"обычный\";\n-//        }\n-//    }\n-//}\n\\ No newline at end of file"
  },
  {
    "sha": "ef2fc53c2fbf1e8467f891c090987c778817fa36",
    "filename": "lesson1/java/io/annotations.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/blob/a5915bbd53370ff93931a415b62c5552c5a1ead2/lesson1/java/io/annotations.xml",
    "raw_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/raw/a5915bbd53370ff93931a415b62c5552c5a1ead2/lesson1/java/io/annotations.xml",
    "contents_url": "https://api.github.com/repos/RybchenkoOV/Java-Repository-Studies-/contents/lesson1/java/io/annotations.xml?ref=a5915bbd53370ff93931a415b62c5552c5a1ead2",
    "patch": "@@ -1 +0,0 @@\n-<root></root>\n\\ No newline at end of file"
  },
  {
    "sha": "5544d9e24e3e4520adc89338ab5e10d848085e93",
    "filename": "lesson5/Animal.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/blob/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/Animal.java",
    "raw_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/raw/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/Animal.java",
    "contents_url": "https://api.github.com/repos/RybchenkoOV/Java-Repository-Studies-/contents/lesson5/Animal.java?ref=170b9ad69a168fa3d8fb6a7398130e02bf2504ef",
    "patch": "@@ -0,0 +1,56 @@\n+package lesson5;\n+\n+public class Animal {\n+\n+    protected int abRun; // переменные можно задить уровня protected, т.к. их получают только все наследники\n+    protected int abSwim;\n+    protected float abJump;\n+    protected String name;\n+\n+    public Animal(String name, int abRun, int abSwim, float abJump) {\n+        this.name = name;\n+        this.abRun = rndRun(abRun); // изменяем стандартные значения, поступающие в конструктов с помощью рандомных модулей снизу\n+        this.abSwim = rndSwim(abSwim); // -//-\n+        this.abJump = rndJump(abJump); // -//-\n+    }\n+\n+    protected void run(int length) {\n+        if (length <= this.abRun) {\n+            System.out.println(\"The \" + name + \" ran \" + length + \" meters.\");\n+        }\n+        else {System.out.println(\"The distance is too long for the \" + name);}\n+        }\n+\n+    void swim(int length) {\n+        if (length <= this.abSwim) {\n+            System.out.println(\"The \" + name + \" swam \" + length + \" meters.\");\n+        }\n+        else {System.out.println(\"The distance is too long for the \" + name);}\n+        }\n+\n+    protected void jump(float height) {\n+        if (height <= this.abJump) {\n+            System.out.println(\"The \" + name + \" jumped \" + height + \" meters high.\");\n+        }\n+        else {System.out.println(\"It's too high for the \" + name);}\n+        }\n+\n+    /** Методы создающие случайные характеристики для животных */\n+\n+    int rndRun(int length) {\n+        float newLength = length * (float)(Math.random()*1+1);\n+        return (int)newLength;\n+    }\n+\n+    int rndSwim(int length) {\n+        float newLength = length * (float)(Math.random()*1+1);\n+        return (int)newLength;\n+    }\n+\n+    float rndJump(float height) {\n+        float newHeight = height * (float)(Math.random()*1+1);\n+        return newHeight;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "4a5782184f4e4c4a2d1d0ec9fec06793d429201e",
    "filename": "lesson5/Bird.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/blob/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/Bird.java",
    "raw_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/raw/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/Bird.java",
    "contents_url": "https://api.github.com/repos/RybchenkoOV/Java-Repository-Studies-/contents/lesson5/Bird.java?ref=170b9ad69a168fa3d8fb6a7398130e02bf2504ef",
    "patch": "@@ -0,0 +1,12 @@\n+package lesson5;\n+\n+public class Bird extends Animal{\n+\n+    public Bird (String name, int abRun, int abSwim, float abJump) {\n+        super(name, abRun, abSwim, abJump);\n+    }\n+\n+    void swim(int length) {\n+        System.out.println(\"Birds can't swim! The owl has drowned! You're an owl killer now! Now live with this!\");\n+    }\n+}"
  },
  {
    "sha": "b56f0cd70ec2633c2a5e95de9c2e1d4b2d4eebb7",
    "filename": "lesson5/Dog.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/blob/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/Dog.java",
    "raw_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/raw/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/Dog.java",
    "contents_url": "https://api.github.com/repos/RybchenkoOV/Java-Repository-Studies-/contents/lesson5/Dog.java?ref=170b9ad69a168fa3d8fb6a7398130e02bf2504ef",
    "patch": "@@ -0,0 +1,8 @@\n+package lesson5;\n+\n+public class Dog extends Animal{\n+\n+    public Dog (String name, int abRun, int abSwim, float abJump) {\n+        super(name, abRun, abSwim, abJump);\n+    }\n+}"
  },
  {
    "sha": "627595f36515b56115e8330769e896f852266844",
    "filename": "lesson5/Horse.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/blob/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/Horse.java",
    "raw_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/raw/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/Horse.java",
    "contents_url": "https://api.github.com/repos/RybchenkoOV/Java-Repository-Studies-/contents/lesson5/Horse.java?ref=170b9ad69a168fa3d8fb6a7398130e02bf2504ef",
    "patch": "@@ -0,0 +1,9 @@\n+package lesson5;\n+\n+public class Horse extends Animal{\n+\n+    public Horse (String name, int abRun, int abSwim, float abJump) {\n+        super(name, abRun, abSwim, abJump);\n+    }\n+\n+}"
  },
  {
    "sha": "14a4dc06bd3c28479da815c0e89e7a1ea963ef77",
    "filename": "lesson5/TomCat.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/blob/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/TomCat.java",
    "raw_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/raw/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/TomCat.java",
    "contents_url": "https://api.github.com/repos/RybchenkoOV/Java-Repository-Studies-/contents/lesson5/TomCat.java?ref=170b9ad69a168fa3d8fb6a7398130e02bf2504ef",
    "patch": "@@ -0,0 +1,13 @@\n+package lesson5;\n+\n+public class TomCat extends Animal{\n+\n+    public TomCat (String name, int abRun, int abSwim, float abJump) {\n+        super(name, abRun, abSwim, abJump);\n+    }\n+\n+    void swim(int length) {\n+        System.out.println(\"Tom Cat doesn't like water. He won't swim!!!\");\n+    }\n+\n+}"
  },
  {
    "sha": "b884d3e8d30ada16c29553394d84d486b4fe8e88",
    "filename": "lesson5/main.java",
    "status": "added",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/blob/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/main.java",
    "raw_url": "https://github.com/RybchenkoOV/Java-Repository-Studies-/raw/170b9ad69a168fa3d8fb6a7398130e02bf2504ef/lesson5/main.java",
    "contents_url": "https://api.github.com/repos/RybchenkoOV/Java-Repository-Studies-/contents/lesson5/main.java?ref=170b9ad69a168fa3d8fb6a7398130e02bf2504ef",
    "patch": "@@ -0,0 +1,80 @@\n+package lesson5;\n+\n+/** Домашнее задание Java1. Level1. Step5\n+ 1. Создать классы Собака, Лошадь, Птица и Кот с наследованием от класса Животное.\n+ 2. Животные могут выполнять действия: бежать, плыть, перепрыгивать препятствие.\n+ В качестве параметра каждому методу передается величина, означающая или длину препятствия (для бега и плавания), или высоту (для прыжков).\n+ 3. У каждого животного есть ограничения на действия (\n+ бег: кот 200 м., собака 500 м., Лошадь 1500 м., Птица 5 м.,;\n+ прыжок: кот 2 м., собака 0.5 м., Лошадь 3 м., Птица 0.2 м. ;\n+ плавание: кот и птица не умеет плавать, собака 10 м., лошадь 100 м.).\n+ 4. При попытке животного выполнить одно из этих действий, оно должно сообщить результат. (Например, dog1.run(150); -> результат: 'Пёсик пробежал!')\n+ 5. * Добавить животным разброс в ограничениях. То есть у одной собаки ограничение на бег может быть 400 м., у другой 600 м.*/\n+\n+public class main {\n+\n+    public static void main(String[] args) {\n+\n+        /** Создадим стандартных животных. Несмотря на заданные дефолтные параметры снизу у каждого животного они будут отличаться в большую или меньшую сторону\n+         * Это достигается внедрением модулей rndRun, rndSwim и rndJump в родительском классе Animal */\n+\n+        Bird bird = new Bird(\"Owl\", 5, 0, 0.2f);\n+        Horse horse = new Horse(\"Pony\", 1500, 100, 3.0f);\n+        Dog dog = new Dog(\"Bobik\", 500, 10, 0.5f);\n+        TomCat tomCat = new TomCat(\"TomCat\", 200, 0, 2.0f);\n+\n+        /** TomCat actions */\n+        System.out.println(tomCat.name + \" abilities: Run (\" + tomCat.abRun + \" m), Swim ( none ), Jump (\" + tomCat.abJump + \"m)\");\n+        tomCat.jump(50.0f); // invalid\n+        tomCat.jump(0.3f); // valid\n+        tomCat.run(2500); // invalid\n+        tomCat.run(10); // valid\n+        tomCat.swim(1); // impossible\n+        System.out.println(\"------------------\");\n+\n+        /** Dog actions */\n+        System.out.println(dog.name + \" abilities: Run (\" + dog.abRun + \" m), Swim (\" + dog.abSwim + \" m), Jump (\" + dog.abJump + \"m)\");\n+        dog.jump(50.0f); // invalid\n+        dog.jump(0.2f); // valid\n+        dog.run(2000); // invalid\n+        dog.run(30); // valid\n+        dog.swim(120); // invalid\n+        dog.swim(5); // valid\n+        System.out.println(\"------------------\");\n+\n+        /** Horse actions */\n+        System.out.println(horse.name + \" abilities: Run (\" + horse.abRun + \" m), Swim (\" + horse.abSwim + \" m), Jump (\" + horse.abJump + \"m)\");\n+        horse.jump(80.0f); // invalid\n+        horse.jump(1.2f); // valid\n+        horse.run(10000); // invalid\n+        horse.run(800); // valid\n+        horse.swim(5000); // invalid\n+        horse.swim(50); // valid\n+        System.out.println(\"------------------\");\n+\n+        /** Bird actions */\n+        System.out.println(bird.name + \" abilities: Run (\" + bird.abRun + \" m), Swim ( none ), Jump (\" + bird.abJump + \"m)\");\n+        bird.jump(80.0f); // invalid\n+        bird.jump(0.2f); // valid\n+        bird.run(10000); // invalid\n+        bird.run(2); // valid\n+        bird.swim(1); // impossible\n+        System.out.println(\"------------------\");\n+\n+        /** Для демонстрации 7 задания созданим несколько новых животных с дефолтными параметрами и выведем их характеристики*/\n+\n+        Dog dog1 = new Dog(\"Hatiko\", 500, 10, 0.5f);\n+        System.out.println(dog1.name + \" abilities: Run (\" + dog1.abRun + \" m), Swim (\" + dog1.abSwim + \" m), Jump (\" + dog1.abJump + \"m)\");\n+\n+        Bird bird1 = new Bird(\"Baklan\", 2, 10, 0.5f);\n+        System.out.println(bird1.name + \" abilities: Run (\" + bird1.abRun + \" m), Swim ( none ), Jump (\" + bird1.abJump + \"m)\");\n+\n+        TomCat tomCat1 = new TomCat(\"Koshara\", 2, 10, 0.5f);\n+        System.out.println(tomCat1.name + \" abilities: Run (\" + tomCat1.abRun + \" m), Swim ( none ), Jump (\" + tomCat1.abJump + \"m)\");\n+\n+        Horse horse1 = new Horse(\"Ishak\", 1500, 100, 3.0f);\n+        System.out.println(horse1.name + \" abilities: Run (\" + horse1.abRun + \" m), Swim (\" + horse1.abSwim + \" m), Jump (\" + horse1.abJump + \"m)\");\n+\n+    }\n+\n+}"
  }
]
