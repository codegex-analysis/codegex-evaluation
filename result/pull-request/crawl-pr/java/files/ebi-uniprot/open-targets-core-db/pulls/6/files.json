[
  {
    "sha": "0cecaf364afe1ec0c3f6600628d674158bd11142",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 17,
    "deletions": 3,
    "changes": 20,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/pom.xml",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/pom.xml",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/pom.xml?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -6,16 +6,17 @@\n \t<artifactId>open-targets</artifactId>\n \t<version>1.0.0</version>\n \t<properties>\n-\t\t<japi.version>1.0.34</japi.version>\n+\t\t<japi.version>1.0.37</japi.version>\n \t\t<jcommander.version>1.47</jcommander.version>\n \t\t<guice.version>4.0</guice.version>\n \t\t<slf4j.version>1.7.20</slf4j.version>\n \t\t<logback.version>1.1.7</logback.version>\n \t\t<mockito-version>1.10.19</mockito-version>\n-\t\t<junit.version>5.1.0</junit.version>\n+\t\t<junit.version>5.5.2</junit.version>\n \t\t<hamcrest.version>1.3</hamcrest.version>\n \t\t<jackson.version>2.9.6</jackson.version>\n \t\t<org.everit.json.schema.version>1.12.0</org.everit.json.schema.version>\n+\t\t<lombok.version>1.18.12</lombok.version>\n \n \t\t<!-- Auto-formatting -->\n \t\t<spotless.version>1.24.1</spotless.version>\n@@ -30,6 +31,12 @@\n \t</description>\n \n \t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>${lombok.version}</version>\n+\t\t\t<scope>provided</scope>\n+\t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>uk.ac.ebi.uniprot</groupId>\n \t\t\t<artifactId>japi</artifactId>\n@@ -55,12 +62,19 @@\n \t\t\t<artifactId>jcommander</artifactId>\n \t\t\t<version>${jcommander.version}</version>\n \t\t</dependency>\n+\t\t<!-- <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> \n+\t\t\t<version>${junit.version}</version> <scope>test</scope> </dependency> -->\n \t\t<dependency>\n \t\t\t<groupId>org.junit.jupiter</groupId>\n-\t\t\t<artifactId>junit-jupiter-engine</artifactId>\n+\t\t\t<artifactId>junit-jupiter</artifactId>\n \t\t\t<version>${junit.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.junit.platform</groupId>\n+\t\t\t<artifactId>junit-platform-commons</artifactId>\n+\t\t\t<version>1.5.2</version>\n+\t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.mockito</groupId>\n \t\t\t<artifactId>mockito-core</artifactId>"
  },
  {
    "sha": "8cd19935dfd9892ffbe6cebe41236e20052be671",
    "filename": "src/bin/OpenTargetsJSONZipper",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/bin/OpenTargetsJSONZipper",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/bin/OpenTargetsJSONZipper",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/bin/OpenTargetsJSONZipper?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -13,7 +13,7 @@ if [ ! -f $input_json ]; then\n     exit 1\n else\n     dir_original=$(dirname $(readlink -e $input_json))\n-    to_upload=$(date +\"$dir_original/cttv011-%d-%m-%Y.json.gz\")\n+    to_upload=$(date +\"./cttv011-%d-%m-%Y.json.gz\")\n     gzip -c $input_json > \"$to_upload\"\n     echo \"$input_json converted to $to_upload, ready for uploading\"\n fi"
  },
  {
    "sha": "7a1049f7d4f371e3fec1954c14eb0f0bf65ecf3a",
    "filename": "src/main/java/uk/ac/ebi/uniprot/ot/converter/UniProtDiseaseAssocCollator.java",
    "status": "modified",
    "additions": 44,
    "deletions": 45,
    "changes": 89,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/converter/UniProtDiseaseAssocCollator.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/converter/UniProtDiseaseAssocCollator.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/main/java/uk/ac/ebi/uniprot/ot/converter/UniProtDiseaseAssocCollator.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -1,38 +1,46 @@\n package uk.ac.ebi.uniprot.ot.converter;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.google.inject.Inject;\n-import com.google.inject.name.Named;\n+import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.CTTV_SCHEMA_VERSION;\n+import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.UNIPROT_LITERATURE;\n+import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.UNIPROT_SOMATIC;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n import org.apache.commons.io.FileUtils;\n import org.everit.json.schema.Schema;\n import org.everit.json.schema.loader.SchemaLoader;\n import org.json.JSONObject;\n import org.json.JSONTokener;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+\n import uk.ac.ebi.kraken.interfaces.uniprot.UniProtEntry;\n import uk.ac.ebi.kraken.interfaces.uniprot.comments.CommentType;\n import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseCommentStructured;\n import uk.ac.ebi.uniprot.ot.input.UniProtEvSource;\n import uk.ac.ebi.uniprot.ot.model.GeneticsRoot;\n-import uk.ac.ebi.uniprot.ot.model.LiteratureCuratedRoot;\n import uk.ac.ebi.uniprot.ot.model.base.Base;\n import uk.ac.ebi.uniprot.ot.model.factory.BaseFactory;\n-import uk.ac.ebi.uniprot.ot.model.provenance.Literature;\n import uk.ac.ebi.uniprot.ot.validation.json.JsonSchemaValidator;\n import uk.ac.ebi.uniprot.ot.validation.json.JsonValidator;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.URL;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.*;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n \n /**\n  * Transforms an evidence string source object into one or more {@link Base} instances.\n@@ -75,47 +83,38 @@ public UniProtDiseaseAssocCollator(BaseFactory baseFactory) throws IOException {\n    * @param litRoots the {@link LiteratureCuratedRoot} instances\n    * @param genRoots the {@link GeneticsRoot} instances\n    */\n-  static void removeDuplicates(List<LiteratureCuratedRoot> litRoots, List<GeneticsRoot> genRoots) {\n-    Set<LiteratureCuratedRoot> obsoleteLitRoots = new HashSet<>();\n-    Map<String, List<LiteratureCuratedRoot>> litRootsMap =\n-        litRoots.stream().collect(Collectors.groupingBy(LiteratureCuratedRoot::getSourceID));\n-\n-    List<LiteratureCuratedRoot> uniprotLit =\n-        litRootsMap.getOrDefault(UNIPROT_LITERATURE, Collections.emptyList());\n-    List<LiteratureCuratedRoot> somaticLit =\n-        litRootsMap.getOrDefault(UNIPROT_SOMATIC, Collections.emptyList());\n-\n-    for (LiteratureCuratedRoot litRoot : uniprotLit) {\n-      Set<Literature> litRefs = new HashSet<>(litRoot.getLiterature().getReferences());\n-      for (LiteratureCuratedRoot somaticLitRoot : somaticLit) {\n-        Set<Literature> somaticLitRefs =\n-            new HashSet<>(\n-                somaticLitRoot.getEvidence().getProvenance_type().getLiterature().getReferences());\n-        if (somaticLitRefs.equals(litRefs)) {\n-          obsoleteLitRoots.add(litRoot);\n+  static void removeDuplicates(List<Base> litRoots, List<GeneticsRoot> genRoots) {\n+    Set<Base> obsoleteLitRoots = new HashSet<>();\n+    Map<String, List<Base>> litRootsMap =\n+        litRoots.stream().collect(Collectors.groupingBy(Base::getDatasourceId));\n+\n+    List<Base> uniprotLit = litRootsMap.getOrDefault(UNIPROT_LITERATURE, Collections.emptyList());\n+    List<Base> somaticLit = litRootsMap.getOrDefault(UNIPROT_SOMATIC, Collections.emptyList());\n+\n+    for (Base litRoot : uniprotLit) {\n+      Set<String> litRefs = new HashSet<>(litRoot.getLiterature());\n+      for (Base somaticLitRoot : somaticLit) {\n+        if (somaticLitRoot != null && somaticLitRoot.getLiterature() != null) {\n+          Set<String> somaticLitRefs = new HashSet<>(somaticLitRoot.getLiterature());\n+          if (somaticLitRefs.equals(litRefs)) {\n+            obsoleteLitRoots.add(litRoot);\n+          }\n         }\n       }\n \n       for (GeneticsRoot genRoot : genRoots) {\n-        Set<Literature> genRefs =\n-            new HashSet<>(\n-                genRoot\n-                    .getEvidence()\n-                    .getVariant2disease()\n-                    .getProvenance_type()\n-                    .getLiterature()\n-                    .getReferences());\n+        Set<String> genRefs = new HashSet<>(genRoot.getLiterature());\n         if (genRefs.equals(litRefs)) {\n           obsoleteLitRoots.add(litRoot);\n         }\n       }\n     }\n \n     if (!obsoleteLitRoots.isEmpty()) {\n-      for (LiteratureCuratedRoot obsoleteLitRoot : obsoleteLitRoots) {\n+      for (Base obsoleteLitRoot : obsoleteLitRoots) {\n         LOGGER.debug(\n             \"Removing obsolete literature curated root [{}]\",\n-            obsoleteLitRoot.getUnique_association_fields());\n+            obsoleteLitRoot.getTargetFromSourceId());\n       }\n     }\n     litRoots.removeAll(obsoleteLitRoots);\n@@ -133,7 +132,7 @@ static void removeDuplicates(List<LiteratureCuratedRoot> litRoots, List<Genetics\n           .forEach(\n               disease -> {\n                 // create the disease association pojos\n-                List<LiteratureCuratedRoot> litRoots =\n+                List<Base> litRoots =\n                     this.baseFactory.createLiteratureCuratedRoot(uniProtEntry, disease);\n                 List<GeneticsRoot> genRoots =\n                     this.baseFactory.createGeneticsRoots(uniProtEntry, disease);"
  },
  {
    "sha": "d96a1eb656dfffc7b02feb9e1fa44dffc7638bcf",
    "filename": "src/main/java/uk/ac/ebi/uniprot/ot/model/GeneticsRoot.java",
    "status": "modified",
    "additions": 6,
    "deletions": 29,
    "changes": 35,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/GeneticsRoot.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/GeneticsRoot.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/main/java/uk/ac/ebi/uniprot/ot/model/GeneticsRoot.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -1,8 +1,8 @@\n package uk.ac.ebi.uniprot.ot.model;\n \n+import lombok.Getter;\n+import lombok.Setter;\n import uk.ac.ebi.uniprot.ot.model.base.Base;\n-import uk.ac.ebi.uniprot.ot.model.bioentity.Variant;\n-import uk.ac.ebi.uniprot.ot.model.evidence.GeneticsEvidence;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -12,33 +12,10 @@\n  *\n  * @author Edd\n  */\n+@Getter\n+@Setter\n @JsonInclude(JsonInclude.Include.NON_NULL)\n public class GeneticsRoot extends Base {\n-  @JsonProperty private String type = \"genetic_association\";\n-  @JsonProperty private Variant variant;\n-  @JsonProperty private GeneticsEvidence evidence;\n-\n-  public String getType() {\n-    return type;\n-  }\n-\n-  public void setType(String type) {\n-    this.type = type;\n-  }\n-\n-  public Variant getVariant() {\n-    return variant;\n-  }\n-\n-  public void setVariant(Variant variant) {\n-    this.variant = variant;\n-  }\n-\n-  public GeneticsEvidence getEvidence() {\n-    return evidence;\n-  }\n-\n-  public void setEvidence(GeneticsEvidence evidence) {\n-    this.evidence = evidence;\n-  }\n+  @JsonProperty private String variantFunctionalConsequenceId;\n+  @JsonProperty private String variantRsId;\n }"
  },
  {
    "sha": "eeb3dff91e8459f1bca62005cb9b4b071d182a77",
    "filename": "src/main/java/uk/ac/ebi/uniprot/ot/model/LiteratureCuratedRoot.java",
    "status": "removed",
    "additions": 0,
    "deletions": 39,
    "changes": 39,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/8e02867068de3e5b8072ce511bb222a1c3ab593d/src/main/java/uk/ac/ebi/uniprot/ot/model/LiteratureCuratedRoot.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/8e02867068de3e5b8072ce511bb222a1c3ab593d/src/main/java/uk/ac/ebi/uniprot/ot/model/LiteratureCuratedRoot.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/main/java/uk/ac/ebi/uniprot/ot/model/LiteratureCuratedRoot.java?ref=8e02867068de3e5b8072ce511bb222a1c3ab593d",
    "patch": "@@ -1,39 +0,0 @@\n-package uk.ac.ebi.uniprot.ot.model;\n-\n-import uk.ac.ebi.uniprot.ot.model.base.Base;\n-import uk.ac.ebi.uniprot.ot.model.evidence.LiteratureCuratedEvidence;\n-\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/**\n- * Created 08/05/15\n- *\n- * @author Edd\n- */\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-public class LiteratureCuratedRoot extends Base {\n-  @JsonProperty private String type = \"genetic_literature\";\n-  @JsonProperty private LiteratureCuratedEvidence evidence;\n-\n-  public String getType() {\n-    return type;\n-  }\n-\n-  public void setType(String type) {\n-    this.type = type;\n-  }\n-\n-  public LiteratureCuratedEvidence getEvidence() {\n-    return evidence;\n-  }\n-\n-  public void setEvidence(LiteratureCuratedEvidence evidence) {\n-    this.evidence = evidence;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"LiteratureCuratedRoot{\" + \"type='\" + type + '\\'' + \", evidence=\" + evidence + '}';\n-  }\n-}"
  },
  {
    "sha": "10e88f350eec07da1b24fff6c4aa3e5144e7f8fe",
    "filename": "src/main/java/uk/ac/ebi/uniprot/ot/model/base/Base.java",
    "status": "modified",
    "additions": 15,
    "deletions": 66,
    "changes": 81,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/base/Base.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/base/Base.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/main/java/uk/ac/ebi/uniprot/ot/model/base/Base.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -1,8 +1,9 @@\n package uk.ac.ebi.uniprot.ot.model.base;\n \n-import uk.ac.ebi.uniprot.ot.model.bioentity.Disease;\n-import uk.ac.ebi.uniprot.ot.model.bioentity.Target;\n-import uk.ac.ebi.uniprot.ot.model.provenance.LiteratureProvenanceType;\n+import java.util.Set;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -13,68 +14,16 @@\n  * @author Edd <eddturner@ebi.ac.uk>\n  */\n @JsonInclude(JsonInclude.Include.NON_NULL)\n+@Getter\n+@Setter\n public class Base {\n-  @JsonProperty private String sourceID;\n-  @JsonProperty private String access_level;\n-  @JsonProperty private String validated_against_schema_version;\n-  @JsonProperty private UniqueAssociationFields unique_association_fields;\n-  @JsonProperty private Target target;\n-  @JsonProperty private Disease disease;\n-  @JsonProperty private LiteratureProvenanceType literature;\n-\n-  public LiteratureProvenanceType getLiterature() {\n-    return literature;\n-  }\n-\n-  public void setLiterature(LiteratureProvenanceType literature) {\n-    this.literature = literature;\n-  }\n-\n-  public String getSourceID() {\n-    return sourceID;\n-  }\n-\n-  public void setSourceID(String sourceID) {\n-    this.sourceID = sourceID;\n-  }\n-\n-  public String getAccess_level() {\n-    return access_level;\n-  }\n-\n-  public void setAccess_level(String access_level) {\n-    this.access_level = access_level;\n-  }\n-\n-  public String getValidated_against_schema_version() {\n-    return validated_against_schema_version;\n-  }\n-\n-  public void setValidated_against_schema_version(String validated_against_schema_version) {\n-    this.validated_against_schema_version = validated_against_schema_version;\n-  }\n-\n-  public UniqueAssociationFields getUnique_association_fields() {\n-    return unique_association_fields;\n-  }\n-\n-  public void setUnique_association_fields(UniqueAssociationFields unique_association_fields) {\n-    this.unique_association_fields = unique_association_fields;\n-  }\n-\n-  public Target getTarget() {\n-    return target;\n-  }\n-\n-  public void setTarget(Target target) {\n-    this.target = target;\n-  }\n-\n-  public Disease getDisease() {\n-    return disease;\n-  }\n-\n-  public void setDisease(Disease disease) {\n-    this.disease = disease;\n-  }\n+  @JsonProperty private String datasourceId;\n+  @JsonProperty private String datatypeId;\n+  @JsonProperty private String diseaseFromSource;\n+  @JsonProperty private String diseaseFromSourceId;\n+  @JsonProperty private String confidence;\n+  @JsonProperty private String diseaseFromSourceMappedId;\n+  @JsonProperty private Set<String> literature;\n+  @JsonProperty private String targetFromSourceId;\n+  @JsonProperty private String targetModulation;\n }"
  },
  {
    "sha": "8e12918d36c0bb7b6a7f31b83719b8f5c71d44fb",
    "filename": "src/main/java/uk/ac/ebi/uniprot/ot/model/factory/BaseFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/BaseFactory.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/BaseFactory.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/BaseFactory.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -5,15 +5,15 @@\n import uk.ac.ebi.kraken.interfaces.uniprot.UniProtEntry;\n import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseCommentStructured;\n import uk.ac.ebi.uniprot.ot.model.GeneticsRoot;\n-import uk.ac.ebi.uniprot.ot.model.LiteratureCuratedRoot;\n+import uk.ac.ebi.uniprot.ot.model.base.Base;\n \n /**\n  * Created 11/05/15\n  *\n  * @author Edd\n  */\n public interface BaseFactory {\n-  List<LiteratureCuratedRoot> createLiteratureCuratedRoot(\n+  List<Base> createLiteratureCuratedRoot(\n       UniProtEntry uniProtEntry, DiseaseCommentStructured structuredDisease);\n \n   List<GeneticsRoot> createGeneticsRoots("
  },
  {
    "sha": "6cbc72914c3853a1f3adc487ba96a615c0feadd1",
    "filename": "src/main/java/uk/ac/ebi/uniprot/ot/model/factory/DefaultBaseFactory.java",
    "status": "modified",
    "additions": 319,
    "deletions": 379,
    "changes": 698,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/DefaultBaseFactory.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/DefaultBaseFactory.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/DefaultBaseFactory.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -3,416 +3,356 @@\n import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n \n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.time.ZoneId;\n import java.time.format.DateTimeFormatter;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+\n import uk.ac.ebi.kraken.interfaces.common.Value;\n import uk.ac.ebi.kraken.interfaces.uniprot.HasEvidences;\n import uk.ac.ebi.kraken.interfaces.uniprot.UniProtEntry;\n-import uk.ac.ebi.kraken.interfaces.uniprot.citationsNew.Citation;\n import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseCommentStructured;\n import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseNote;\n import uk.ac.ebi.kraken.interfaces.uniprot.evidences.EvidenceId;\n-import uk.ac.ebi.kraken.interfaces.uniprot.features.Feature;\n import uk.ac.ebi.kraken.interfaces.uniprot.features.FeatureType;\n import uk.ac.ebi.kraken.interfaces.uniprot.features.VariantFeature;\n import uk.ac.ebi.uniprot.ot.mapper.Omim2EfoMapper;\n import uk.ac.ebi.uniprot.ot.mapper.SomaticDbSNPMapper;\n import uk.ac.ebi.uniprot.ot.model.GeneticsRoot;\n-import uk.ac.ebi.uniprot.ot.model.LiteratureCuratedRoot;\n+import uk.ac.ebi.uniprot.ot.model.base.Base;\n import uk.ac.ebi.uniprot.ot.model.bioentity.Disease;\n import uk.ac.ebi.uniprot.ot.model.bioentity.Target;\n import uk.ac.ebi.uniprot.ot.model.evidence.LinkOut;\n-import uk.ac.ebi.uniprot.ot.model.evidence.association_score.ProbabilityAssScore;\n import uk.ac.ebi.uniprot.ot.model.provenance.DatabaseProvenanceType;\n import uk.ac.ebi.uniprot.ot.model.provenance.Literature;\n import uk.ac.ebi.uniprot.ot.model.provenance.LiteratureProvenanceType;\n import uk.ac.ebi.uniprot.ot.model.provenance.ProvenanceType;\n import uk.ac.ebi.uniprot.ot.model.variant.VariantLineInfo;\n \n-import com.google.common.util.concurrent.AtomicDouble;\n-import com.google.inject.Inject;\n-import com.google.inject.name.Named;\n-\n /**\n  * Created 11/05/15\n  *\n  * @author Edd <eddturner@ebi.ac.uk>\n  */\n public class DefaultBaseFactory implements BaseFactory {\n-  public static final String UNIPROT_SOMATIC = \"uniprot_somatic\";\n-  public static final String DB_SNP_URI_FORMAT = \"http://identifiers.org/dbsnp/%s\";\n-  public static final String UNIPROT_LITERATURE = \"uniprot_literature\";\n-  public static final String CTTV_SCHEMA_VERSION = \"1.7.5\";\n-  // logger\n-  protected static final Logger LOGGER = LoggerFactory.getLogger(DefaultBaseFactory.class);\n-  static final String ACCESS_LEVEL = \"public\";\n-  static final String UNIPROT = \"uniprot\";\n-  static final String LINK_OUT_NICE_NAME_PUBLISHED_REFERENCE = \"Published reference\";\n-  static final double ASSOCIATION_SCORE_DEFINITE = 1.0;\n-  static final double ASSOCIATION_SCORE_INDEFINITE = 0.5;\n-  static final String SCORE_METHOD_DESCRIPTION = \"Curator inference (either 1.0 or 0.5)\";\n-  static final String ASSOCIATIONS_SCORE_METHOD_DESCRIPTION_URL =\n-      \"https://github.com/CTTV/association_score_methods/blob/master/CTTV011_UniProt/description.md\";\n-  private static final String IDENTIFIERS_URI = \"http://identifiers.org\";\n-  private static final String UNIPROT_URI = \"http://www.uniprot.org/uniprot/%s\";\n-  private static final String EUROPEPMC_URI = \"http://europepmc.org\";\n-  private static final String PUBMED_URI_FORMAT = EUROPEPMC_URI + \"/abstract/MED/%s\";\n-  private static final String ECO_URI_FORMAT = \"http://purl.obolibrary.org/obo/%s\";\n-  static final String CTTV_FAVOURED_CURATED_EVIDENCE_ECO =\n-      String.format(ECO_URI_FORMAT, \"ECO_0000205\");\n-  public static final String SO_SUBSTITUTION_URI = String.format(ECO_URI_FORMAT, \"SO_0001583\");\n-  public static final String SO_MISSING_URI = String.format(ECO_URI_FORMAT, \"SO_0001822\");\n-  public static final String SO_SEQ_ALTERATION_URI = String.format(ECO_URI_FORMAT, \"SO_0001059\");\n-  private static final String UNIPROT_URI_FORMAT = IDENTIFIERS_URI + \"/uniprot/%s\";\n-  private static final String UNIPROT_DISEASE_URI_FORMAT = UNIPROT_URI + \"#pathology_and_biotech\";\n-  private static final String ACTIVITY_UP_DOWN = \"http://identifiers.org/cttv.activity/up_or_down\";\n-  private static final String PROTEIN_TARGET =\n-      \"http://identifiers.org/cttv.target/protein_evidence\";\n-  private static final List<String> INDEFINITE_DISEASE_NOTE_ASSOCIATIONS =\n-      asList(\n-          \"The disease may be caused by mutations affecting the gene represented in this entry\",\n-          \"The disease may be caused by mutations affecting distinct genetic loci, including the gene represented \"\n-              + \"in this entry\",\n-          \"Disease susceptibility may be associated with variations affecting the gene represented in this entry\",\n-          \"The gene represented in this entry may act as a disease modifier\",\n-          \"The gene represented in this entry may be involved in disease pathogenesis\",\n-          \"The protein represented in this entry may be involved in disease pathogenesis\");\n-  private static final String PUBMED_EVIDENCE_TYPE = \"PubMed\";\n-  private static final String ECO_0000269 = \"ECO:0000269\";\n-  private static final String ECO_0000303 = \"ECO:0000303\";\n-  private final LiteratureCuratedRootFactory literatureCuratedRootFactory =\n-      new LiteratureCuratedRootFactory(this);\n-  private final GeneticsRootFactory geneticsRootFactory = new GeneticsRootFactory(this);\n-\n-  private Omim2EfoMapper omim2EfoMapper;\n-  private String uniProtReleaseVersion;\n-\n-  private SomaticDbSNPMapper somaticDbSNPCache;\n-\n-  @Inject\n-  public void setOmim2EfoMapper(Omim2EfoMapper mapper) {\n-    this.omim2EfoMapper = mapper;\n-  }\n-\n-  @Inject\n-  public void setSomaticDbSNPMapper(SomaticDbSNPMapper somaticDbSNPCache) {\n-    this.somaticDbSNPCache = somaticDbSNPCache;\n-  }\n-\n-  @Override\n-  public List<LiteratureCuratedRoot> createLiteratureCuratedRoot(\n-      UniProtEntry uniProtEntry, DiseaseCommentStructured structuredDisease) {\n-    List<LiteratureCuratedRoot> lcrs = new ArrayList<>();\n-\n-    // get all disease evidence ids with pubmed references\n-    List<EvidenceId> diseasePubmedEvs = extractAllPubMedEvidenceIds(structuredDisease);\n-\n-    // pubmed evidence ids exist for this disease\n-    if (!diseasePubmedEvs.isEmpty()) {\n-      for (String efo : efoMappings(structuredDisease)) {\n-        // for each variant,  of the disease, and if\n-        for (Feature variantFeature : uniProtEntry.getFeatures(FeatureType.VARIANT)) {\n-          List<EvidenceId> variantPubmedEvs =\n-              variantFeature.getEvidenceIds().stream()\n-                  .filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE))\n-                  .collect(Collectors.toList());\n-\n-          // ... containing pubmed evidence ids\n-          if (!variantPubmedEvs.isEmpty()) {\n-            VariantFeature variant = (VariantFeature) variantFeature;\n-            VariantLineInfo vli = VariantLineInfo.createInstance(variant);\n-\n-            if (isSomatic(uniProtEntry, efo, vli)\n-                && vli.containsDbSNPInfoForDisease(structuredDisease)) {\n-              lcrs.add(\n-                  literatureCuratedRootFactory.createLiteratureCuratedRoot(\n-                      uniProtEntry, structuredDisease, variantPubmedEvs, efo, vli));\n-            }\n-          }\n-        }\n-\n-        // always add evidence for the basic disease\n-        lcrs.add(\n-            literatureCuratedRootFactory.createLiteratureCuratedRoot(\n-                uniProtEntry, structuredDisease, diseasePubmedEvs, efo));\n-      }\n-\n-      //            efoMappings(structuredDisease)\n-      //                    .forEach(efo -> {\n-      //                        // always add evidence for the basic disease\n-      //                        lcrs.add(literatureCuratedRootFactory.createLiteratureCuratedRoot(\n-      //                                uniProtEntry,\n-      //                                structuredDisease,\n-      //                                pubmedEvidenceIds,\n-      //                                efo));\n-      //                    });\n-    }\n-\n-    return lcrs;\n-  }\n-\n-  @Override\n-  public List<GeneticsRoot> createGeneticsRoots(\n-      UniProtEntry uniProtEntry, DiseaseCommentStructured structuredDisease) {\n-    List<GeneticsRoot> grs = new ArrayList<>();\n-\n-    efoMappings(structuredDisease)\n-        .forEach(\n-            efo -> {\n-              uniProtEntry\n-                  .getFeatures(FeatureType.VARIANT)\n-                  .forEach(\n-                      variantFeature -> {\n-                        // for every variant feature ...\n-                        List<EvidenceId> pubmedEvIds =\n-                            variantFeature.getEvidenceIds().stream()\n-                                .filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE))\n-                                .collect(Collectors.toList());\n-\n-                        // ... containing pubmed evidence ids\n-                        if (!pubmedEvIds.isEmpty()) {\n-                          VariantFeature variant = (VariantFeature) variantFeature;\n-                          VariantLineInfo vli = VariantLineInfo.createInstance(variant);\n-\n-                          // generate only germline genetics info\n-                          if (!isSomatic(uniProtEntry, efo, vli)\n-                              && vli.containsDbSNPInfoForDisease(structuredDisease)) {\n-                            grs.add(\n-                                geneticsRootFactory.createGeneticsRoot(\n-                                    uniProtEntry,\n-                                    structuredDisease,\n-                                    pubmedEvIds,\n-                                    efo,\n-                                    variantFeature,\n-                                    variant,\n-                                    vli));\n-                          }\n-                        }\n-                      });\n-            });\n-\n-    return grs;\n-  }\n-\n-  static String latestPubMed(UniProtEntry uniProtEntry, Collection<String> pubmedIds) {\n-    for (Citation citation : uniProtEntry.getCitationsNew()) {\n-      for (String pubmedId : pubmedIds) {\n-        if (pubmedId.equals(citation.getCitationXrefs().getPubmedId().getValue())) {\n-          // return first match, as this is the most significant\n-          return pubmedId;\n-        }\n-      }\n-    }\n-    if (pubmedIds.isEmpty()) {\n-      LOGGER.warn(\n-          \"Could not find entry's pubmed for accession {} where pubmeds are {} -- using first one\",\n-          accession(uniProtEntry),\n-          pubmedIds);\n-    }\n-    return pubmedIds.iterator().next();\n-  }\n-\n-  static String createUniProtUrl(String accession) {\n-    return String.format(UNIPROT_URI_FORMAT, accession);\n-  }\n-\n-  static String dateString(Date date) {\n-    return DateTimeFormatter.ISO_INSTANT.withZone(ZoneId.systemDefault()).format(date.toInstant());\n-  }\n-\n-  private static String createEcoUrl(String ecoCode) {\n-    return String.format(ECO_URI_FORMAT, ecoCode.replace(\":\", \"_\"));\n-  }\n-\n-  static String createPubMedUrl(String pubmedId) {\n-    return String.format(PUBMED_URI_FORMAT, pubmedId);\n-  }\n-\n-  static String accession(UniProtEntry uniProtEntry) {\n-    return uniProtEntry.getPrimaryUniProtAccession().getValue();\n-  }\n-\n-  static String createUniProtDiseaseUrl(UniProtEntry uniProtEntry) {\n-    return String.format(UNIPROT_DISEASE_URI_FORMAT, accession(uniProtEntry));\n-  }\n-\n-  static LinkOut createLinkOut(String niceName, String url) {\n-    LinkOut lo = new LinkOut();\n-    lo.setNice_name(niceName);\n-    lo.setUrl(url);\n-    return lo;\n-  }\n-\n-  static HashSet<String> createDefaultECOsSet() {\n-    return new HashSet<>(singletonList(DefaultBaseFactory.CTTV_FAVOURED_CURATED_EVIDENCE_ECO));\n-  }\n-\n-  SomaticDbSNPMapper getSomaticDbSNPCache() {\n-    return somaticDbSNPCache;\n-  }\n-\n-  String getUniProtReleaseVersion() {\n-    return uniProtReleaseVersion;\n-  }\n-\n-  @Inject\n-  public void setUniProtReleaseVersion(\n-      @Named(\"uniProtReleaseVersion\") String uniProtReleaseVersion) {\n-    this.uniProtReleaseVersion = uniProtReleaseVersion;\n-  }\n-\n-  Target createTarget(UniProtEntry uniProtEntry) {\n-    Target target = new Target();\n-    target.setTarget_type(PROTEIN_TARGET);\n-    target.setId(createUniProtUrl(accession(uniProtEntry)));\n-    target.setActivity(ACTIVITY_UP_DOWN);\n-    return target;\n-  }\n-\n-  Disease createDisease(DiseaseCommentStructured structuredDisease, String efo) {\n-    Disease disease = new Disease();\n-    if (structuredDisease.hasDefinedDisease()) {\n-      disease.setName(structuredDisease.getDisease().getDiseaseId().getValue());\n-    }\n-    disease.setId(efo);\n-    disease.setAcronym(structuredDisease.getDisease().getAcronym().getValue());\n-\n-    return disease;\n-  }\n-\n-  void extractEcoAndPubMeds(\n-      Collection<EvidenceId> evidenceIds, Collection<String> ecos, Collection<String> pubmeds) {\n-    for (EvidenceId evidenceId : evidenceIds) {\n-      if (evidenceId.useECOCode()) {\n-        ecos.add(createEcoUrl(evidenceId.getEvidenceCode().getCodeValue()));\n-      }\n-      if (evidenceId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE)) {\n-        if (pubmeds == null) {\n-          pubmeds = new HashSet<>();\n-        }\n-        pubmeds.add(evidenceId.getAttribute().getValue());\n-      }\n-    }\n-  }\n-\n-  Collection<String> extractPubMeds(Collection<EvidenceId> evidenceIds) {\n-    List<String> pubmeds = new ArrayList<>();\n-    extractEcoAndPubMeds(evidenceIds, new ArrayList<>(), pubmeds);\n-    return pubmeds;\n-  }\n-\n-  Set<String> createEcoUrls(Set<String> ecos) {\n-    String standard269EcoUrl = createEcoUrl(ECO_0000269);\n-    String standard303EcoUrl = createEcoUrl(ECO_0000303);\n-\n-    if (ecos.contains(standard269EcoUrl)) {\n-      ecos.remove(standard269EcoUrl);\n-      ecos.add(CTTV_FAVOURED_CURATED_EVIDENCE_ECO);\n-\n-      // if we've just replaced a 269 -> 205, and still there's a 303, remove the 303, because 205\n-      // is stronger\n-      if (ecos.contains(standard303EcoUrl)) {\n-        ecos.remove(standard303EcoUrl);\n-      }\n-    }\n-\n-    return ecos;\n-  }\n-\n-  ProvenanceType createProvenanceType(Set<String> pubmeds) {\n-    ProvenanceType provenanceType = new ProvenanceType();\n-    LiteratureProvenanceType lpt = createLiteratureProvenanceType(pubmeds);\n-    provenanceType.setLiterature(lpt);\n-\n-    DatabaseProvenanceType database = new DatabaseProvenanceType();\n-    database.setId(UNIPROT);\n-    database.setVersion(uniProtReleaseVersion);\n-    provenanceType.setDatabase(database);\n-    return provenanceType;\n-  }\n-\n-  LiteratureProvenanceType createLiteratureProvenanceType(Set<String> pubmeds) {\n-    List<Literature> lits = new ArrayList<>();\n-\n-    pubmeds.forEach(\n-        pubmed -> {\n-          Literature lit = new Literature();\n-          lit.setLit_id(createPubMedUrl(pubmed));\n-          lits.add(lit);\n-        });\n-\n-    LiteratureProvenanceType lpt = new LiteratureProvenanceType();\n-    lpt.setReferences(lits);\n-    return lpt;\n-  }\n-\n-  ProbabilityAssScore createAssociationScore(DiseaseCommentStructured structuredDisease) {\n-    AtomicDouble assocScore = new AtomicDouble(ASSOCIATION_SCORE_DEFINITE);\n-\n-    if (structuredDisease != null) {\n-      DiseaseNote note = structuredDisease.getNote();\n-      if (note != null) {\n-        note.getTexts().stream()\n-            .map(Value::getValue)\n-            .filter(this::associationScoreForDiseaseNoteIsNotDefinite)\n-            .findFirst()\n-            .ifPresent(s -> assocScore.set(ASSOCIATION_SCORE_INDEFINITE));\n-      }\n-    }\n-\n-    ProbabilityAssScore score = new ProbabilityAssScore();\n-    score.setValue(assocScore.get());\n-    return score;\n-  }\n-\n-  private boolean isSomatic(UniProtEntry uniProtEntry, String efo, VariantLineInfo vli) {\n-    String accession = uniProtEntry.getPrimaryUniProtAccession().getValue();\n-    List<String> dbSNPs = vli.getDbSNPs();\n-\n-    if (dbSNPs.size() == 1) {\n-      return somaticDbSNPCache.isSomatic(accession, efo, dbSNPs.get(0));\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  private List<EvidenceId> extractAllPubMedEvidenceIds(DiseaseCommentStructured structuredDisease) {\n-    List<EvidenceId> pubmedEvidenceIds = new ArrayList<>();\n-    structuredDisease.getNote().getTexts().stream()\n-        .map(HasEvidences::getEvidenceIds)\n-        .forEach(\n-            evIds -> {\n-              evIds.stream()\n-                  .filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE))\n-                  .forEach(pubmedEvidenceIds::add);\n-            });\n-    structuredDisease.getDisease().getDescription().getEvidenceIds().stream()\n-        .filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE))\n-        .forEach(pubmedEvidenceIds::add);\n-    structuredDisease.getEvidenceIds().stream()\n-        .filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE))\n-        .forEach(pubmedEvidenceIds::add);\n-    return pubmedEvidenceIds;\n-  }\n-\n-  private Set<String> efoMappings(DiseaseCommentStructured structuredDisease) {\n-    String diseaseIdStr =\n-        structuredDisease.getDisease().getReference().getDiseaseReferenceId().getValue();\n-    return omim2EfoMapper.omim2Efo(diseaseIdStr);\n-  }\n-\n-  private boolean associationScoreForDiseaseNoteIsNotDefinite(String noteText) {\n-    for (String indefiniteDiseaseNote : INDEFINITE_DISEASE_NOTE_ASSOCIATIONS) {\n-      if (noteText.startsWith(indefiniteDiseaseNote)) {\n-        return true;\n-      }\n-    }\n-    return false;\n-  }\n+\tpublic static final String UNIPROT_SOMATIC = \"uniprot_somatic\";\n+\tpublic static final String DB_SNP_URI_FORMAT = \"http://identifiers.org/dbsnp/%s\";\n+\tpublic static final String UNIPROT_LITERATURE = \"uniprot_literature\";\n+\tpublic static final String CTTV_SCHEMA_VERSION = \"2.0.5\";\n+\t// logger\n+\tprotected static final Logger LOGGER = LoggerFactory.getLogger(DefaultBaseFactory.class);\n+\tstatic final String ACCESS_LEVEL = \"public\";\n+\tstatic final String UNIPROT = \"uniprot\";\n+\tstatic final String LINK_OUT_NICE_NAME_PUBLISHED_REFERENCE = \"Published reference\";\n+\tstatic final String ASSOCIATION_SCORE_DEFINITE = \"high\";\n+\tstatic final String ASSOCIATION_SCORE_INDEFINITE = \"medium\";\n+\tstatic final String SCORE_METHOD_DESCRIPTION = \"Curator inference (either 1.0 or 0.5)\";\n+\tstatic final String ASSOCIATIONS_SCORE_METHOD_DESCRIPTION_URL = \"https://github.com/CTTV/association_score_methods/blob/master/CTTV011_UniProt/description.md\";\n+\tprivate static final String IDENTIFIERS_URI = \"http://identifiers.org\";\n+\tprivate static final String UNIPROT_URI = \"http://www.uniprot.org/uniprot/%s\";\n+\tprivate static final String EUROPEPMC_URI = \"http://europepmc.org\";\n+\tprivate static final String PUBMED_URI_FORMAT = EUROPEPMC_URI + \"/abstract/MED/%s\";\n+\tprivate static final String ECO_URI_FORMAT = \"http://purl.obolibrary.org/obo/%s\";\n+\tstatic final String CTTV_FAVOURED_CURATED_EVIDENCE_ECO = String.format(ECO_URI_FORMAT, \"ECO_0000205\");\n+\tpublic static final String SO_SUBSTITUTION_URI = String.format(ECO_URI_FORMAT, \"SO_0001583\");\n+\tpublic static final String SO_MISSING_URI = String.format(ECO_URI_FORMAT, \"SO_0001822\");\n+\tpublic static final String SO_SEQ_ALTERATION_URI = String.format(ECO_URI_FORMAT, \"SO_0001059\");\n+\tprivate static final String UNIPROT_URI_FORMAT = IDENTIFIERS_URI + \"/uniprot/%s\";\n+\tprivate static final String UNIPROT_DISEASE_URI_FORMAT = UNIPROT_URI + \"#pathology_and_biotech\";\n+\tprotected static final String ACTIVITY_UP_DOWN = \"up_or_down\";\n+\tprivate static final String PROTEIN_TARGET = \"http://identifiers.org/cttv.target/protein_evidence\";\n+\tprivate static final List<String> INDEFINITE_DISEASE_NOTE_ASSOCIATIONS = asList(\n+\t\t\t\"The disease may be caused by mutations affecting the gene represented in this entry\",\n+\t\t\t\"The disease may be caused by mutations affecting distinct genetic loci, including the gene represented \"\n+\t\t\t\t\t+ \"in this entry\",\n+\t\t\t\"Disease susceptibility may be associated with variations affecting the gene represented in this entry\",\n+\t\t\t\"The gene represented in this entry may act as a disease modifier\",\n+\t\t\t\"The gene represented in this entry may be involved in disease pathogenesis\",\n+\t\t\t\"The protein represented in this entry may be involved in disease pathogenesis\");\n+\tprivate static final String PUBMED_EVIDENCE_TYPE = \"PubMed\";\n+\tprivate static final String ECO_0000269 = \"ECO:0000269\";\n+\tprivate static final String ECO_0000303 = \"ECO:0000303\";\n+\tpublic static final String UNIPROT_VARIANT = \"uniprot_variants\";\n+\tprivate final LiteratureCuratedRootFactory literatureCuratedRootFactory = new LiteratureCuratedRootFactory(this);\n+\tprivate final GeneticsRootFactory geneticsRootFactory = new GeneticsRootFactory(this);\n+\n+\tprivate Omim2EfoMapper omim2EfoMapper;\n+\tprivate String uniProtReleaseVersion;\n+\n+\tprivate SomaticDbSNPMapper somaticDbSNPCache;\n+\n+\t@Inject\n+\tpublic void setOmim2EfoMapper(Omim2EfoMapper mapper) {\n+\t\tthis.omim2EfoMapper = mapper;\n+\t}\n+\n+\t@Inject\n+\tpublic void setSomaticDbSNPMapper(SomaticDbSNPMapper somaticDbSNPCache) {\n+\t\tthis.somaticDbSNPCache = somaticDbSNPCache;\n+\t}\n+\n+\t@Override\n+\tpublic List<Base> createLiteratureCuratedRoot(UniProtEntry uniProtEntry,\n+\t\t\tDiseaseCommentStructured structuredDisease) {\n+\t\tList<Base> lcrs = new ArrayList<>();\n+\n+\t\t// get all disease evidence ids with pubmed references\n+\t\tList<EvidenceId> diseasePubmedEvs = extractAllPubMedEvidenceIds(structuredDisease);\n+\n+\t\t// pubmed evidence ids exist for this disease\n+\t\tif (!diseasePubmedEvs.isEmpty()) {\n+\t\t\tfor (String efo : efoMappings(structuredDisease)) {\n+\t\t\t\t// for each variant, of the disease, and if\n+\t\t\t\t// always add evidence for the basic disease\n+\t\t\t\tlcrs.add(literatureCuratedRootFactory.createLiteratureCuratedRoot(uniProtEntry, structuredDisease,\n+\t\t\t\t\t\tdiseasePubmedEvs, efo));\n+\t\t\t}\n+\t\t}\n+\t\treturn lcrs;\n+\t}\n+\n+\t@Override\n+\tpublic List<GeneticsRoot> createGeneticsRoots(UniProtEntry uniProtEntry,\n+\t\t\tDiseaseCommentStructured structuredDisease) {\n+\t\tList<GeneticsRoot> grs = new ArrayList<>();\n+\n+\t\tefoMappings(structuredDisease).forEach(efo -> {\n+\t\t\tuniProtEntry.getFeatures(FeatureType.VARIANT).forEach(variantFeature -> {\n+\t\t\t\t// for every variant feature ...\n+\t\t\t\tList<EvidenceId> pubmedEvIds = variantFeature.getEvidenceIds().stream()\n+\t\t\t\t\t\t.filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE)).collect(Collectors.toList());\n+\n+\t\t\t\t// ... containing pubmed evidence ids\n+\t\t\t\tif (!pubmedEvIds.isEmpty()) {\n+\t\t\t\t\tVariantFeature variant = (VariantFeature) variantFeature;\n+\t\t\t\t\tVariantLineInfo vli = VariantLineInfo.createInstance(variant);\n+\n+\t\t\t\t\t// generate only germline genetics info\n+\t\t\t\t\tif (!isSomatic(uniProtEntry, efo, vli) && vli.containsDbSNPInfoForDisease(structuredDisease)) {\n+\t\t\t\t\t\tvli.getDbSNPs().forEach(dbSNP -> {\n+\t\t\t\t\t\t\tgrs.add(geneticsRootFactory.createGeneticsRoot(uniProtEntry, structuredDisease, pubmedEvIds,\n+\t\t\t\t\t\t\t\t\tefo, variantFeature, variant, vli, dbSNP));\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t});\n+\t\t});\n+\n+\t\treturn grs;\n+\t}\n+\n+\t\n+\n+\tstatic String createUniProtUrl(String accession) {\n+\t\treturn String.format(UNIPROT_URI_FORMAT, accession);\n+\t}\n+\n+\tstatic String dateString(Date date) {\n+\t\treturn DateTimeFormatter.ISO_INSTANT.withZone(ZoneId.systemDefault()).format(date.toInstant());\n+\t}\n+\n+\tprivate static String createEcoUrl(String ecoCode) {\n+\t\treturn String.format(ECO_URI_FORMAT, ecoCode.replace(\":\", \"_\"));\n+\t}\n+\n+\tstatic String createPubMedUrl(String pubmedId) {\n+\t\treturn String.format(PUBMED_URI_FORMAT, pubmedId);\n+\t}\n+\n+\tstatic String accession(UniProtEntry uniProtEntry) {\n+\t\treturn uniProtEntry.getPrimaryUniProtAccession().getValue();\n+\t}\n+\n+\tstatic String createUniProtDiseaseUrl(UniProtEntry uniProtEntry) {\n+\t\treturn String.format(UNIPROT_DISEASE_URI_FORMAT, accession(uniProtEntry));\n+\t}\n+\n+\tstatic LinkOut createLinkOut(String niceName, String url) {\n+\t\tLinkOut lo = new LinkOut();\n+\t\tlo.setNice_name(niceName);\n+\t\tlo.setUrl(url);\n+\t\treturn lo;\n+\t}\n+\n+\tstatic HashSet<String> createDefaultECOsSet() {\n+\t\treturn new HashSet<>(singletonList(DefaultBaseFactory.CTTV_FAVOURED_CURATED_EVIDENCE_ECO));\n+\t}\n+\n+\tSomaticDbSNPMapper getSomaticDbSNPCache() {\n+\t\treturn somaticDbSNPCache;\n+\t}\n+\n+\tString getUniProtReleaseVersion() {\n+\t\treturn uniProtReleaseVersion;\n+\t}\n+\n+\t@Inject\n+\tpublic void setUniProtReleaseVersion(@Named(\"uniProtReleaseVersion\") String uniProtReleaseVersion) {\n+\t\tthis.uniProtReleaseVersion = uniProtReleaseVersion;\n+\t}\n+\n+\tTarget createTarget(UniProtEntry uniProtEntry) {\n+\t\tTarget target = new Target();\n+\t\ttarget.setTarget_type(PROTEIN_TARGET);\n+\t\ttarget.setId(createUniProtUrl(accession(uniProtEntry)));\n+\t\ttarget.setActivity(ACTIVITY_UP_DOWN);\n+\t\treturn target;\n+\t}\n+\n+\tDisease createDisease(DiseaseCommentStructured structuredDisease, String efo) {\n+\t\tDisease disease = new Disease();\n+\t\tif (structuredDisease.hasDefinedDisease()) {\n+\t\t\tdisease.setName(structuredDisease.getDisease().getDiseaseId().getValue());\n+\t\t}\n+\t\tdisease.setId(efo);\n+\t\tdisease.setAcronym(structuredDisease.getDisease().getAcronym().getValue());\n+\n+\t\treturn disease;\n+\t}\n+\n+\tvoid extractEcoAndPubMeds(Collection<EvidenceId> evidenceIds, Collection<String> ecos, Collection<String> pubmeds) {\n+\t\tfor (EvidenceId evidenceId : evidenceIds) {\n+\t\t\tif (evidenceId.useECOCode()) {\n+\t\t\t\tecos.add(createEcoUrl(evidenceId.getEvidenceCode().getCodeValue()));\n+\t\t\t}\n+\t\t\tif (evidenceId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE)) {\n+\t\t\t\tif (pubmeds == null) {\n+\t\t\t\t\tpubmeds = new HashSet<>();\n+\t\t\t\t}\n+\t\t\t\tpubmeds.add(evidenceId.getAttribute().getValue());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tCollection<String> extractPubMeds(Collection<EvidenceId> evidenceIds) {\n+\t\tList<String> pubmeds = new ArrayList<>();\n+\t\textractEcoAndPubMeds(evidenceIds, new ArrayList<>(), pubmeds);\n+\t\treturn pubmeds;\n+\t}\n+\n+\tSet<String> createEcoUrls(Set<String> ecos) {\n+\t\tString standard269EcoUrl = createEcoUrl(ECO_0000269);\n+\t\tString standard303EcoUrl = createEcoUrl(ECO_0000303);\n+\n+\t\tif (ecos.contains(standard269EcoUrl)) {\n+\t\t\tecos.remove(standard269EcoUrl);\n+\t\t\tecos.add(CTTV_FAVOURED_CURATED_EVIDENCE_ECO);\n+\n+\t\t\t// if we've just replaced a 269 -> 205, and still there's a 303, remove the 303,\n+\t\t\t// because 205\n+\t\t\t// is stronger\n+\t\t\tif (ecos.contains(standard303EcoUrl)) {\n+\t\t\t\tecos.remove(standard303EcoUrl);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn ecos;\n+\t}\n+\n+\tProvenanceType createProvenanceType(Set<String> pubmeds) {\n+\t\tProvenanceType provenanceType = new ProvenanceType();\n+\t\tLiteratureProvenanceType lpt = createLiteratureProvenanceType(pubmeds);\n+\t\tprovenanceType.setLiterature(lpt);\n+\n+\t\tDatabaseProvenanceType database = new DatabaseProvenanceType();\n+\t\tdatabase.setId(UNIPROT);\n+\t\tdatabase.setVersion(uniProtReleaseVersion);\n+\t\tprovenanceType.setDatabase(database);\n+\t\treturn provenanceType;\n+\t}\n+\n+\tLiteratureProvenanceType createLiteratureProvenanceType(Set<String> pubmeds) {\n+\t\tList<Literature> lits = new ArrayList<>();\n+\n+\t\tpubmeds.forEach(pubmed -> {\n+\t\t\tLiterature lit = new Literature();\n+\t\t\tlit.setLit_id(createPubMedUrl(pubmed));\n+\t\t\tlits.add(lit);\n+\t\t});\n+\n+\t\tLiteratureProvenanceType lpt = new LiteratureProvenanceType();\n+\t\tlpt.setReferences(lits);\n+\t\treturn lpt;\n+\t}\n+\n+\tprotected String createConfidence(DiseaseCommentStructured structuredDisease) {\n+\t\tString confidence = ASSOCIATION_SCORE_DEFINITE;\n+\n+\t\tif (structuredDisease != null) {\n+\t\t\tDiseaseNote note = structuredDisease.getNote();\n+\t\t\tif (note != null) {\n+\t\t\t\tOptional<String> val = note.getTexts().stream().map(Value::getValue)\n+\t\t\t\t\t\t.filter(this::associationScoreForDiseaseNoteIsNotDefinite).findFirst();\n+\t\t\t\tif (val.isPresent()) {\n+\t\t\t\t\tconfidence = ASSOCIATION_SCORE_INDEFINITE;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn confidence;\n+\t}\n+\n+\tprivate boolean isSomatic(UniProtEntry uniProtEntry, String efo, VariantLineInfo vli) {\n+\t\tString accession = uniProtEntry.getPrimaryUniProtAccession().getValue();\n+\t\tList<String> dbSNPs = vli.getDbSNPs();\n+\n+\t\tif (dbSNPs.size() == 1) {\n+\t\t\treturn somaticDbSNPCache.isSomatic(accession, efo, dbSNPs.get(0));\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tprivate List<EvidenceId> extractAllPubMedEvidenceIds(DiseaseCommentStructured structuredDisease) {\n+\t\tList<EvidenceId> pubmedEvidenceIds = new ArrayList<>();\n+\t\tstructuredDisease.getNote().getTexts().stream().map(HasEvidences::getEvidenceIds).forEach(evIds -> {\n+\t\t\tevIds.stream().filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE))\n+\t\t\t\t\t.forEach(pubmedEvidenceIds::add);\n+\t\t});\n+\t\tstructuredDisease.getDisease().getDescription().getEvidenceIds().stream()\n+\t\t\t\t.filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE)).forEach(pubmedEvidenceIds::add);\n+\t\tstructuredDisease.getEvidenceIds().stream().filter(evId -> evId.getTypeValue().equals(PUBMED_EVIDENCE_TYPE))\n+\t\t\t\t.forEach(pubmedEvidenceIds::add);\n+\t\treturn pubmedEvidenceIds;\n+\t}\n+\n+\tprivate Set<String> efoMappings(DiseaseCommentStructured structuredDisease) {\n+\t\tString diseaseIdStr = structuredDisease.getDisease().getReference().getDiseaseReferenceId().getValue();\n+\t\treturn omim2EfoMapper.omim2Efo(diseaseIdStr);\n+\t}\n+\n+\tprivate boolean associationScoreForDiseaseNoteIsNotDefinite(String noteText) {\n+\t\tfor (String indefiniteDiseaseNote : INDEFINITE_DISEASE_NOTE_ASSOCIATIONS) {\n+\t\t\tif (noteText.startsWith(indefiniteDiseaseNote)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tpublic static String getMappedId(String efo) {\n+\t\ttry {\n+\t\t\tURI uri = new URI(efo);\n+\t\t\tString[] segments = uri.getPath().split(\"/\");\n+\t\t\tString idStr = segments[segments.length - 1];\n+\t\t\treturn idStr;\n+\t\t} catch (URISyntaxException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\treturn null;\n+\t}\n }"
  },
  {
    "sha": "71368f6060be4181530dfbc89c97f1f4c53b0b63",
    "filename": "src/main/java/uk/ac/ebi/uniprot/ot/model/factory/GeneticsRootFactory.java",
    "status": "modified",
    "additions": 33,
    "deletions": 210,
    "changes": 243,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/GeneticsRootFactory.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/GeneticsRootFactory.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/GeneticsRootFactory.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -1,15 +1,10 @@\n package uk.ac.ebi.uniprot.ot.model.factory;\n \n-import static java.util.Collections.singletonList;\n-import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.*;\n-import static uk.ac.ebi.uniprot.ot.model.variant.VariantLineInfo.createVariant;\n-import static uk.ac.ebi.uniprot.ot.model.variant.VariantLineInfo.getFunctionalConsequenceURL;\n+import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.ACTIVITY_UP_DOWN;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -20,22 +15,19 @@\n import uk.ac.ebi.kraken.interfaces.uniprot.features.Feature;\n import uk.ac.ebi.kraken.interfaces.uniprot.features.VariantFeature;\n import uk.ac.ebi.uniprot.ot.model.GeneticsRoot;\n-import uk.ac.ebi.uniprot.ot.model.base.UniqueAssociationFields;\n-import uk.ac.ebi.uniprot.ot.model.evidence.Gene2VariantEvidence;\n-import uk.ac.ebi.uniprot.ot.model.evidence.GeneticsEvidence;\n-import uk.ac.ebi.uniprot.ot.model.evidence.LinkOut;\n-import uk.ac.ebi.uniprot.ot.model.evidence.Variant2DiseaseEvidence;\n-import uk.ac.ebi.uniprot.ot.model.provenance.ProvenanceType;\n import uk.ac.ebi.uniprot.ot.model.variant.VariantLineInfo;\n \n class GeneticsRootFactory {\n+  private static final String OMIM = \"OMIM:\";\n+  private static final String GENETIC_ASSOCIATION = \"genetic_association\";\n   static final String SNP_SINGLE = \"snp single\";\n   static final String STRUCTURAL_VARIANT = \"structural variant\";\n   static final String SNP_MULTIPLE = \"snp multiple\";\n   private static final Logger LOGGER = LoggerFactory.getLogger(GeneticsRootFactory.class);\n-  private static final String SOMATIC_MUTATION = \"somatic_mutation\";\n-  private static final String GERMLINE = \"germline\";\n   private final DefaultBaseFactory baseFactory;\n+  public static final String SO_SUBSTITUTION_URI = \"SO_0001583\";\n+  public static final String SO_MISSING_URI = \"SO_0001822\";\n+  public static final String SO_SEQ_ALTERATION_URI = \"SO_0001059\";\n \n   GeneticsRootFactory(DefaultBaseFactory baseFactory) {\n     this.baseFactory = baseFactory;\n@@ -48,207 +40,38 @@ GeneticsRoot createGeneticsRoot(\n       String efo,\n       Feature variantFeature,\n       VariantFeature variant,\n-      VariantLineInfo vli) {\n+      VariantLineInfo vli,\n+      String dbSNP) {\n \n     GeneticsRoot gr = new GeneticsRoot();\n-    gr.setAccess_level(DefaultBaseFactory.ACCESS_LEVEL);\n-    gr.setSourceID(DefaultBaseFactory.UNIPROT);\n-    gr.setValidated_against_schema_version(DefaultBaseFactory.CTTV_SCHEMA_VERSION);\n-    gr.setUnique_association_fields(\n-        createGeneticsUniqueAssociationFields(\n-            uniProtEntry, structuredDisease, variantFeature, efo, vli));\n-    gr.setDisease(baseFactory.createDisease(structuredDisease, efo));\n-    gr.setTarget(baseFactory.createTarget(uniProtEntry));\n-    if (vli.getDbSNPs() != null) {\n-      gr.setVariant(createVariant(vli));\n-    }\n-\n-    gr.setEvidence(\n-        createGeneticsEvidence(uniProtEntry, structuredDisease, pubmedEvIds, variant, vli));\n-\n-    insertSomaticInfo(gr, uniProtEntry, efo, vli);\n-\n+    gr.setDatatypeId(GENETIC_ASSOCIATION);\n+    gr.setDiseaseFromSource(structuredDisease.getDisease().getDiseaseId().getValue());\n+    gr.setDiseaseFromSourceMappedId(DefaultBaseFactory.getMappedId(efo));\n+    gr.setTargetFromSourceId(uniProtEntry.getPrimaryUniProtAccession().getValue());\n+    gr.setTargetModulation(ACTIVITY_UP_DOWN);\n+    gr.setDatasourceId(DefaultBaseFactory.UNIPROT_VARIANT);\n+    Set<String> pubMedIdsSet = new HashSet<>();\n+    pubMedIdsSet.addAll(baseFactory.extractPubMeds(pubmedEvIds));\n+    gr.setLiterature(pubMedIdsSet);\n+    gr.setVariantFunctionalConsequenceId(getFunctionalConsequence(vli));\n+    gr.setDiseaseFromSourceId(\n+        OMIM + structuredDisease.getDisease().getReference().getDiseaseReferenceId().getValue());\n+    gr.setConfidence(baseFactory.createConfidence(structuredDisease));\n+    gr.setVariantRsId(dbSNP);\n     return gr;\n   }\n \n-  private void insertSomaticInfo(\n-      GeneticsRoot gr, UniProtEntry uniProtEntry, String efo, VariantLineInfo vli) {\n-    String accession = uniProtEntry.getPrimaryUniProtAccession().getValue();\n-    List<String> dbSNPs = vli.getDbSNPs();\n-\n-    if (dbSNPs.size() == 1) {\n-      boolean isSomatic =\n-          baseFactory.getSomaticDbSNPCache().isSomatic(accession, efo, dbSNPs.get(0));\n-\n-      if (isSomatic) {\n-        gr.setType(SOMATIC_MUTATION);\n-        gr.getUnique_association_fields().setAlleleOrigin(SOMATIC_MUTATION);\n-      } else {\n-        gr.getUnique_association_fields().setAlleleOrigin(GERMLINE);\n-      }\n+  private String getFunctionalConsequence(VariantLineInfo vli) {\n+    switch (vli.getType()) {\n+      case MISSENSE:\n+        return SO_SUBSTITUTION_URI;\n+      case DELETION:\n+        return SO_MISSING_URI;\n+      case INS_DEL:\n+        return SO_SEQ_ALTERATION_URI;\n+      default:\n+        LOGGER.warn(\"Unknown variant type: {}\", vli.getType().name());\n     }\n-  }\n-\n-  private UniqueAssociationFields createGeneticsUniqueAssociationFields(\n-      UniProtEntry uniProtEntry,\n-      DiseaseCommentStructured structuredDisease,\n-      Feature variantFeature,\n-      String efo,\n-      VariantLineInfo vli) {\n-    String accession = uniProtEntry.getPrimaryUniProtAccession().getValue();\n-    List<String> dbSNPs = vli.getDbSNPs();\n-\n-    UniqueAssociationFields uaf = new UniqueAssociationFields();\n-    //        if (dbSNPs.size() == 1) {\n-    //            boolean isSomatic = baseFactory.getSomaticDbSNPCache().isSomatic(accession, efo,\n-    // dbSNPs.get(0));\n-    //            uaf.setAlleleOrigin(isSomatic ? \"somatic_mutation\" : \"germline\");\n-    //        }\n-\n-    uaf.setTarget(accession);\n-    uaf.setDisease_acronym(structuredDisease.getDisease().getAcronym().getValue());\n-    uaf.setUniprot_release(baseFactory.getUniProtReleaseVersion());\n-    uaf.setDisease_uri(efo);\n-    uaf.setDbSnps(dbSNPs.stream().collect(Collectors.joining(\", \")));\n-    uaf.setVariant_id(((VariantFeature) variantFeature).getFeatureId().getValue());\n-    return uaf;\n-  }\n-  //\n-  //    public static Variant createVariant(VariantLineInfo variantLineInfo) {\n-  //        Variant modelVariant = new Variant();\n-  //        modelVariant.setId(createDbSnpUrls(variantLineInfo));\n-  //        switch (variantLineInfo.getType()) {\n-  //            case MISSENSE:\n-  //                modelVariant.setType(SNP_SINGLE);\n-  //                break;\n-  //            case DELETION:\n-  //                modelVariant.setType(STRUCTURAL_VARIANT);\n-  //                break;\n-  //            case INS_DEL:\n-  //                modelVariant.setType(SNP_MULTIPLE);\n-  //                break;\n-  //            default:\n-  //                LOGGER.warn(\"Unknown variant type: \" + variantLineInfo.getType().name());\n-  //        }\n-  //        return modelVariant;\n-  //    }\n-  //\n-  //    public static String createDbSnpUrls(VariantLineInfo variantLineInfo) {\n-  //        List<String> dbSNPs = variantLineInfo.getDbSNPs()\n-  //                .stream()\n-  //                .map(dbsnp -> String.format(DefaultBaseFactory.DB_SNP_URI_FORMAT, dbsnp))\n-  //                .collect(Collectors.toList());\n-  //\n-  //        if (dbSNPs.isEmpty() || dbSNPs.size() > 1) {\n-  //            LOGGER.warn(\"Expected variant line information to contain only 1 dbsnp: {}\",\n-  // dbSNPs);\n-  //        }\n-  //        return dbSNPs.get(0);\n-  //    }\n-\n-  private GeneticsEvidence createGeneticsEvidence(\n-      UniProtEntry uniProtEntry,\n-      DiseaseCommentStructured structuredDisease,\n-      List<EvidenceId> pubmedEvIds,\n-      VariantFeature variant,\n-      VariantLineInfo vli) {\n-    GeneticsEvidence ge = new GeneticsEvidence();\n-\n-    // gene to variant\n-    ge.setGene2variant(createGene2VariantEvidence(uniProtEntry, variant, vli));\n-\n-    // variant to disease\n-    ge.setVariant2disease(\n-        createVariant2DiseaseEvidence(uniProtEntry, structuredDisease, pubmedEvIds));\n-\n-    return ge;\n-  }\n-\n-  private Gene2VariantEvidence createGene2VariantEvidence(\n-      UniProtEntry uniProtEntry, VariantFeature variant, VariantLineInfo vli) {\n-    Gene2VariantEvidence g2ve = new Gene2VariantEvidence();\n-\n-    // date asserted\n-    g2ve.setDate_asserted(\n-        DefaultBaseFactory.dateString(uniProtEntry.getEntryAudit().getLastAnnotationUpdateDate()));\n-\n-    // associated\n-    g2ve.setIs_associated(true);\n-\n-    // evidence codes\n-    Set<String> ecos = createDefaultECOsSet();\n-    Set<String> pubmeds = new HashSet<>();\n-\n-    baseFactory.extractEcoAndPubMeds(variant.getEvidenceIds(), ecos, pubmeds);\n-\n-    g2ve.setEvidenceCodes(new ArrayList<>(baseFactory.createEcoUrls(ecos)));\n-\n-    // provenance\n-    if (!pubmeds.isEmpty()) {\n-      ProvenanceType provenanceType = baseFactory.createProvenanceType(pubmeds);\n-      g2ve.setProvenance_type(provenanceType);\n-    }\n-\n-    // functional consequences\n-    g2ve.setFunctional_consequence(getFunctionalConsequenceURL(vli));\n-\n-    // urls\n-    g2ve.setUrls(\n-        singletonList(\n-            createLinkOut(\n-                \"Further details in UniProt database\", createUniProtDiseaseUrl(uniProtEntry))));\n-\n-    return g2ve;\n-  }\n-\n-  private Variant2DiseaseEvidence createVariant2DiseaseEvidence(\n-      UniProtEntry uniProtEntry,\n-      DiseaseCommentStructured structuredDisease,\n-      List<EvidenceId> pubmedEvIds) {\n-    Variant2DiseaseEvidence v2de = new Variant2DiseaseEvidence();\n-\n-    // association score\n-    v2de.setResource_score(baseFactory.createAssociationScore(structuredDisease));\n-\n-    // is associated\n-    v2de.setIs_associated(true);\n-\n-    // date asserted\n-    v2de.setDate_asserted(\n-        DefaultBaseFactory.dateString(uniProtEntry.getEntryAudit().getLastAnnotationUpdateDate()));\n-\n-    // evidence codes\n-    v2de.setEvidence_codes(singletonList(DefaultBaseFactory.CTTV_FAVOURED_CURATED_EVIDENCE_ECO));\n-\n-    // provenance\n-    Set<String> pubmeds =\n-        pubmedEvIds.stream()\n-            .map(evidenceId -> evidenceId.getAttribute().getValue())\n-            .collect(Collectors.toSet());\n-\n-    if (!pubmeds.isEmpty()) {\n-      ProvenanceType provenanceType = baseFactory.createProvenanceType(pubmeds);\n-      v2de.setProvenance_type(provenanceType);\n-    }\n-\n-    // unique experiment reference (refer to latest publication)\n-    v2de.setUniqueExperimentReference(\n-        DefaultBaseFactory.createPubMedUrl(DefaultBaseFactory.latestPubMed(uniProtEntry, pubmeds)));\n-\n-    // urls to contain links to all the publications\n-    List<LinkOut> linkouts = new ArrayList<>();\n-    linkouts.add(\n-        createLinkOut(\n-            \"Further details in UniProt database\", createUniProtDiseaseUrl(uniProtEntry)));\n-    pubmeds.stream().map(this::createLinkOutForPubMed).forEach(linkouts::add);\n-    v2de.setUrls(linkouts);\n-\n-    return v2de;\n-  }\n-\n-  private LinkOut createLinkOutForPubMed(String pubmed) {\n-    return createLinkOut(\n-        DefaultBaseFactory.LINK_OUT_NICE_NAME_PUBLISHED_REFERENCE,\n-        DefaultBaseFactory.createPubMedUrl(pubmed));\n+    return null;\n   }\n }"
  },
  {
    "sha": "2a7dd88d334578f82fb77329b0b3a86907006b88",
    "filename": "src/main/java/uk/ac/ebi/uniprot/ot/model/factory/LiteratureCuratedRootFactory.java",
    "status": "modified",
    "additions": 31,
    "deletions": 151,
    "changes": 182,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/LiteratureCuratedRootFactory.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/LiteratureCuratedRootFactory.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/main/java/uk/ac/ebi/uniprot/ot/model/factory/LiteratureCuratedRootFactory.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -1,183 +1,63 @@\n package uk.ac.ebi.uniprot.ot.model.factory;\n \n+import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.ACTIVITY_UP_DOWN;\n+import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.UNIPROT_SOMATIC;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n import uk.ac.ebi.kraken.interfaces.uniprot.UniProtEntry;\n import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseCommentStructured;\n import uk.ac.ebi.kraken.interfaces.uniprot.evidences.EvidenceId;\n-import uk.ac.ebi.uniprot.ot.model.LiteratureCuratedRoot;\n-import uk.ac.ebi.uniprot.ot.model.base.UniqueAssociationFields;\n-import uk.ac.ebi.uniprot.ot.model.bioentity.Variant;\n-import uk.ac.ebi.uniprot.ot.model.evidence.LinkOut;\n-import uk.ac.ebi.uniprot.ot.model.evidence.LiteratureCuratedEvidence;\n-import uk.ac.ebi.uniprot.ot.model.evidence.Mutation;\n-import uk.ac.ebi.uniprot.ot.model.provenance.ProvenanceType;\n+import uk.ac.ebi.uniprot.ot.model.base.Base;\n import uk.ac.ebi.uniprot.ot.model.variant.VariantLineInfo;\n \n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n-import static java.util.Collections.singletonList;\n-import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.*;\n-import static uk.ac.ebi.uniprot.ot.model.factory.GeneticsRootFactory.SNP_SINGLE;\n-import static uk.ac.ebi.uniprot.ot.model.variant.VariantLineInfo.*;\n-\n class LiteratureCuratedRootFactory {\n-  private static final String SOMATIC = \"somatic\";\n-  private static final String SOMATIC_MUTATION = \"somatic_mutation\";\n+  private static final String OMIM = \"OMIM:\";\n+  private static final String GENETIC_LITERATURE = \"genetic_literature\";\n   private final DefaultBaseFactory baseFactory;\n \n   LiteratureCuratedRootFactory(DefaultBaseFactory baseFactory) {\n     this.baseFactory = baseFactory;\n   }\n \n-  LiteratureCuratedRoot createLiteratureCuratedRoot(\n+  Base createLiteratureCuratedRoot(\n       UniProtEntry uniProtEntry,\n       DiseaseCommentStructured disease,\n       List<EvidenceId> pubmedEvidenceIds,\n       String efo,\n       VariantLineInfo vli) {\n \n-    LiteratureCuratedRoot lcr = new LiteratureCuratedRoot();\n-    lcr.setAccess_level(DefaultBaseFactory.ACCESS_LEVEL);\n-    lcr.setSourceID(DefaultBaseFactory.UNIPROT_SOMATIC);\n-    lcr.setValidated_against_schema_version(DefaultBaseFactory.CTTV_SCHEMA_VERSION);\n-\n-    UniqueAssociationFields associationFields =\n-        createLiteratureUniqueAssociationFields(uniProtEntry, disease, efo);\n-    associationFields.setAlleleOrigin(SOMATIC);\n-    associationFields.setDbSnps(vli.getDbSNPs().stream().collect(Collectors.joining(\",\")));\n-    associationFields.setMutationDescription(vli.getMutationTransformation());\n-    lcr.setUnique_association_fields(associationFields);\n-\n-    lcr.setType(SOMATIC_MUTATION);\n-    lcr.setDisease(baseFactory.createDisease(disease, efo));\n-    lcr.setTarget(baseFactory.createTarget(uniProtEntry));\n-\n-    lcr.setEvidence(createLitEvidence(uniProtEntry, disease, pubmedEvidenceIds, vli));\n-\n+    Base lcr = createLitCuratedRoot(uniProtEntry, disease, efo);\n+    lcr.setDatasourceId(UNIPROT_SOMATIC);\n     return lcr;\n   }\n \n-  LiteratureCuratedRoot createLiteratureCuratedRoot(\n+  Base createLiteratureCuratedRoot(\n       UniProtEntry uniProtEntry,\n       DiseaseCommentStructured structuredDisease,\n       List<EvidenceId> pubmedEvidenceIds,\n       String efoMapping) {\n-\n-    LiteratureCuratedRoot lcr = new LiteratureCuratedRoot();\n-    lcr.setAccess_level(DefaultBaseFactory.ACCESS_LEVEL);\n-    lcr.setSourceID(DefaultBaseFactory.UNIPROT_LITERATURE);\n-    lcr.setValidated_against_schema_version(DefaultBaseFactory.CTTV_SCHEMA_VERSION);\n-    lcr.setUnique_association_fields(\n-        createLiteratureUniqueAssociationFields(uniProtEntry, structuredDisease, efoMapping));\n-    lcr.setTarget(baseFactory.createTarget(uniProtEntry));\n-    lcr.setDisease(baseFactory.createDisease(structuredDisease, efoMapping));\n-    lcr.setEvidence(createLitEvidence(uniProtEntry, structuredDisease, pubmedEvidenceIds));\n-\n-    lcr.setLiterature(\n-        baseFactory.createLiteratureProvenanceType(\n-            new HashSet<>(baseFactory.extractPubMeds(pubmedEvidenceIds))));\n-\n+    Base lcr = createLitCuratedRoot(uniProtEntry, structuredDisease, efoMapping);\n+    lcr.setDatasourceId(DefaultBaseFactory.UNIPROT_LITERATURE);\n+    Set<String> pubMedIds = new HashSet<>();\n+    pubMedIds.addAll(baseFactory.extractPubMeds(pubmedEvidenceIds));\n+    lcr.setLiterature(pubMedIds);\n+    lcr.setConfidence(baseFactory.createConfidence(structuredDisease));\n+    lcr.setDiseaseFromSourceId(\n+        OMIM + structuredDisease.getDisease().getReference().getDiseaseReferenceId().getValue());\n     return lcr;\n   }\n \n-  private UniqueAssociationFields createLiteratureUniqueAssociationFields(\n-      UniProtEntry uniProtEntry, DiseaseCommentStructured structuredDisease, String efo) {\n-    UniqueAssociationFields uaf = new UniqueAssociationFields();\n-    uaf.setDisease_uri(efo);\n-    uaf.setDisease_acronym(structuredDisease.getDisease().getAcronym().getValue());\n-    uaf.setTarget(createUniProtUrl(accession(uniProtEntry)));\n-    return uaf;\n-  }\n-\n-  private LiteratureCuratedEvidence createLitEvidence(\n-      UniProtEntry uniProtEntry,\n-      DiseaseCommentStructured structuredDisease,\n-      List<EvidenceId> evidenceIds,\n-      VariantLineInfo vli) {\n-    LiteratureCuratedEvidence lce = new LiteratureCuratedEvidence();\n-\n-    // associated\n-    lce.setIs_associated(true);\n-\n-    // known mutations\n-    Mutation mutation = new Mutation();\n-\n-    Variant variant = createVariant(vli);\n-    String preferredName = variant.getType();\n-    if (variant.getType().equals(SNP_SINGLE)) {\n-      preferredName =\n-          \"missense_variant\"; // last minute requirement from CK -- inconsistent with other\n-      // things they want ...\n-    }\n-    mutation.setPreferred_name(preferredName);\n-    mutation.setFunctional_consequence(getFunctionalConsequenceURL(vli));\n-    lce.setKnown_mutations(singletonList(mutation));\n-\n-    // urls\n-    List<LinkOut> urls =\n-        singletonList(createLinkOut(\"Further details in UniProt database\", createDbSnpUrls(vli)));\n-    lce.setUrls(urls);\n-\n-    // evidences\n-    Set<String> ecos = createDefaultECOsSet();\n-    Set<String> pubmeds = new HashSet<>();\n-\n-    baseFactory.extractEcoAndPubMeds(evidenceIds, ecos, pubmeds);\n-\n-    lce.setEvidenceCodes(new ArrayList<>(baseFactory.createEcoUrls(ecos)));\n-\n-    // literature\n-    if (!pubmeds.isEmpty()) {\n-      ProvenanceType provenanceType = baseFactory.createProvenanceType(pubmeds);\n-      lce.setProvenance_type(provenanceType);\n-    }\n-\n-    // association score\n-    lce.setResource_score(baseFactory.createAssociationScore(structuredDisease));\n-\n-    // date asserted\n-    lce.setDate_asserted(\n-        DefaultBaseFactory.dateString(uniProtEntry.getEntryAudit().getLastAnnotationUpdateDate()));\n-\n-    return lce;\n-  }\n-\n-  private LiteratureCuratedEvidence createLitEvidence(\n-      UniProtEntry uniProtEntry,\n-      DiseaseCommentStructured structuredDisease,\n-      Collection<EvidenceId> evidenceIds) {\n-    LiteratureCuratedEvidence lce = new LiteratureCuratedEvidence();\n-\n-    // urls\n-    lce.setUrls(\n-        singletonList(\n-            createLinkOut(\n-                \"Further details in UniProt database\", createUniProtDiseaseUrl(uniProtEntry))));\n-\n-    // evidences\n-    Set<String> ecos = createDefaultECOsSet();\n-    Set<String> pubmeds = new HashSet<>();\n-\n-    baseFactory.extractEcoAndPubMeds(evidenceIds, ecos, pubmeds);\n-\n-    lce.setEvidenceCodes(new ArrayList<>(baseFactory.createEcoUrls(ecos)));\n-\n-    // literature\n-    if (!pubmeds.isEmpty()) {\n-      ProvenanceType provenanceType = baseFactory.createProvenanceType(pubmeds);\n-      lce.setProvenance_type(provenanceType);\n-    }\n-\n-    // associated\n-    lce.setIs_associated(true);\n-\n-    // association score\n-    lce.setResource_score(baseFactory.createAssociationScore(structuredDisease));\n-\n-    // date asserted\n-    lce.setDate_asserted(\n-        DefaultBaseFactory.dateString(uniProtEntry.getEntryAudit().getLastAnnotationUpdateDate()));\n-\n-    return lce;\n+  private Base createLitCuratedRoot(\n+      UniProtEntry uniProtEntry, DiseaseCommentStructured structuredDisease, String efoMapping) {\n+    Base lcr = new Base();\n+    lcr.setDatatypeId(GENETIC_LITERATURE);\n+    lcr.setDiseaseFromSource(structuredDisease.getDisease().getDiseaseId().getValue());\n+    lcr.setDiseaseFromSourceMappedId(DefaultBaseFactory.getMappedId(efoMapping));\n+    lcr.setTargetFromSourceId(uniProtEntry.getPrimaryUniProtAccession().getValue());\n+    lcr.setTargetModulation(ACTIVITY_UP_DOWN);\n+    return lcr;\n   }\n }"
  },
  {
    "sha": "1bbc90d8f9a3e06cdf866fc5cd14fcf621cea8eb",
    "filename": "src/test/java/uk/ac/ebi/uniprot/ot/converter/UniProtDiseaseAssocCollatorTest.java",
    "status": "modified",
    "additions": 31,
    "deletions": 43,
    "changes": 74,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/java/uk/ac/ebi/uniprot/ot/converter/UniProtDiseaseAssocCollatorTest.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/java/uk/ac/ebi/uniprot/ot/converter/UniProtDiseaseAssocCollatorTest.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/test/java/uk/ac/ebi/uniprot/ot/converter/UniProtDiseaseAssocCollatorTest.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -9,12 +9,14 @@\n import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.UNIPROT_SOMATIC;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n \n import org.junit.jupiter.api.Test;\n \n import uk.ac.ebi.uniprot.ot.model.GeneticsRoot;\n-import uk.ac.ebi.uniprot.ot.model.LiteratureCuratedRoot;\n+import uk.ac.ebi.uniprot.ot.model.base.Base;\n import uk.ac.ebi.uniprot.ot.model.evidence.GeneticsEvidence;\n import uk.ac.ebi.uniprot.ot.model.evidence.Variant2DiseaseEvidence;\n import uk.ac.ebi.uniprot.ot.model.provenance.Literature;\n@@ -29,30 +31,20 @@\n class UniProtDiseaseAssocCollatorTest {\n   @Test\n   void removeLitRootWhenGenRootHasSameEvidence() {\n-    List<Literature> litRootLit = new ArrayList<>();\n-    litRootLit.add(createLitInfo(\"id1\"));\n-    litRootLit.add(createLitInfo(\"id2\"));\n-    LiteratureCuratedRoot litRoot = new LiteratureCuratedRoot();\n-    litRoot.setSourceID(UNIPROT_LITERATURE);\n-    LiteratureProvenanceType litRootLitProv = new LiteratureProvenanceType();\n-    litRootLitProv.setReferences(litRootLit);\n-    litRoot.setLiterature(litRootLitProv);\n-    List<LiteratureCuratedRoot> litRoots = new ArrayList<>();\n+    Set<String> literatures = new HashSet<>();\n+    literatures.add(\"id1\");\n+    literatures.add(\"id2\");\n+    Base litRoot = new Base();\n+    litRoot.setDatasourceId(UNIPROT_LITERATURE);\n+    litRoot.setLiterature(literatures);\n+    List<Base> litRoots = new ArrayList<>();\n     litRoots.add(litRoot);\n \n-    List<Literature> genRootLit = new ArrayList<>();\n-    genRootLit.add(createLitInfo(\"id2\"));\n-    genRootLit.add(createLitInfo(\"id1\"));\n     GeneticsRoot genRoot = new GeneticsRoot();\n     GeneticsEvidence genEv = new GeneticsEvidence();\n-    LiteratureProvenanceType genLitProv = new LiteratureProvenanceType();\n-    genLitProv.setReferences(genRootLit);\n     Variant2DiseaseEvidence variant2DiseaseEvidence = new Variant2DiseaseEvidence();\n-    ProvenanceType genProvType = new ProvenanceType();\n-    genProvType.setLiterature(genLitProv);\n-    variant2DiseaseEvidence.setProvenance_type(genProvType);\n     genEv.setVariant2disease(variant2DiseaseEvidence);\n-    genRoot.setEvidence(genEv);\n+    //    genRoot.setEvidence(genEv);\n     List<GeneticsRoot> genRoots = new ArrayList<>();\n     genRoots.add(genRoot);\n \n@@ -64,25 +56,18 @@ void removeLitRootWhenGenRootHasSameEvidence() {\n \n   @Test\n   void removeLitRootWhenSomaticLitRootHasSameEvidence() {\n-    List<Literature> litRootLit = new ArrayList<>();\n-    litRootLit.add(createLitInfo(\"id1\"));\n-    litRootLit.add(createLitInfo(\"id2\"));\n-    LiteratureCuratedRoot litRoot = new LiteratureCuratedRoot();\n-    litRoot.setSourceID(UNIPROT_LITERATURE);\n-    LiteratureProvenanceType litRootLitProv = new LiteratureProvenanceType();\n-    litRootLitProv.setReferences(litRootLit);\n-    litRoot.setLiterature(litRootLitProv);\n-\n-    List<Literature> somaticLitRootLit = new ArrayList<>();\n-    somaticLitRootLit.add(createLitInfo(\"id1\"));\n-    somaticLitRootLit.add(createLitInfo(\"id2\"));\n-    LiteratureCuratedRoot somaticLitRoot = new LiteratureCuratedRoot();\n-    somaticLitRoot.setSourceID(UNIPROT_SOMATIC);\n-    LiteratureProvenanceType somaticLitRootLitProv = new LiteratureProvenanceType();\n-    somaticLitRootLitProv.setReferences(somaticLitRootLit);\n-    somaticLitRoot.setLiterature(somaticLitRootLitProv);\n-\n-    List<LiteratureCuratedRoot> litRoots = new ArrayList<>();\n+    Set<String> literatures = new HashSet<>();\n+    literatures.add(\"id1\");\n+    literatures.add(\"id2\");\n+    Base litRoot = new Base();\n+    litRoot.setDatasourceId(UNIPROT_LITERATURE);\n+    litRoot.setLiterature(literatures);\n+\n+    Base somaticLitRoot = new Base();\n+    somaticLitRoot.setDatasourceId(UNIPROT_SOMATIC);\n+    somaticLitRoot.setLiterature(literatures);\n+\n+    List<Base> litRoots = new ArrayList<>();\n     litRoots.add(litRoot);\n     litRoots.add(somaticLitRoot);\n \n@@ -98,12 +83,15 @@ void keepLitRootWhenGenRootHasDifferentEvidence() {\n     litRootLit.add(createLitInfo(\"id1\"));\n     litRootLit.add(createLitInfo(\"id2\"));\n     litRootLit.add(createLitInfo(\"id3\"));\n-    LiteratureCuratedRoot litRoot = new LiteratureCuratedRoot();\n-    litRoot.setSourceID(UNIPROT_LITERATURE);\n+    Set<String> literatures = new HashSet<>();\n+    literatures.add(\"id1\");\n+    literatures.add(\"id2\");\n+    Base litRoot = new Base();\n+    litRoot.setDatasourceId(UNIPROT_LITERATURE);\n     LiteratureProvenanceType litRootLitProv = new LiteratureProvenanceType();\n     litRootLitProv.setReferences(litRootLit);\n-    litRoot.setLiterature(litRootLitProv);\n-    List<LiteratureCuratedRoot> litRoots = new ArrayList<>();\n+    litRoot.setLiterature(literatures);\n+    List<Base> litRoots = new ArrayList<>();\n     litRoots.add(litRoot);\n \n     List<Literature> genRootLit = new ArrayList<>();\n@@ -118,7 +106,7 @@ void keepLitRootWhenGenRootHasDifferentEvidence() {\n     genProvType.setLiterature(genLitProv);\n     variant2DiseaseEvidence.setProvenance_type(genProvType);\n     genEv.setVariant2disease(variant2DiseaseEvidence);\n-    genRoot.setEvidence(genEv);\n+    //    genRoot.setEvidence(genEv);\n     List<GeneticsRoot> genRoots = new ArrayList<>();\n     genRoots.add(genRoot);\n "
  },
  {
    "sha": "5a502a77a706e91d2adbaf24e6f5d7486be08912",
    "filename": "src/test/java/uk/ac/ebi/uniprot/ot/model/factory/BaseFactoryTest.java",
    "status": "modified",
    "additions": 17,
    "deletions": 18,
    "changes": 35,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/java/uk/ac/ebi/uniprot/ot/model/factory/BaseFactoryTest.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/java/uk/ac/ebi/uniprot/ot/model/factory/BaseFactoryTest.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/test/java/uk/ac/ebi/uniprot/ot/model/factory/BaseFactoryTest.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -1,25 +1,25 @@\n package uk.ac.ebi.uniprot.ot.model.factory;\n \n+import static java.util.Collections.singletonList;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.when;\n+import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.ASSOCIATION_SCORE_DEFINITE;\n+import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.ASSOCIATION_SCORE_INDEFINITE;\n+\n+import java.util.List;\n+\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mock;\n+\n import uk.ac.ebi.kraken.interfaces.uniprot.EvidencedValue;\n import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseCommentStructured;\n import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseNote;\n import uk.ac.ebi.kraken.model.uniprot.EvidencedValueImpl;\n import uk.ac.ebi.uniprot.ot.MockitoExtension;\n-import uk.ac.ebi.uniprot.ot.model.evidence.association_score.ProbabilityAssScore;\n-\n-import java.util.List;\n-\n-import static java.util.Collections.singletonList;\n-import static org.hamcrest.CoreMatchers.notNullValue;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.when;\n-import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.ASSOCIATION_SCORE_DEFINITE;\n-import static uk.ac.ebi.uniprot.ot.model.factory.DefaultBaseFactory.ASSOCIATION_SCORE_INDEFINITE;\n \n /**\n  * Created 16/06/17\n@@ -46,9 +46,9 @@ void createsCertainAssociationScore() {\n     evidencedValue.setValue(\"Curator information ...\");\n     List<EvidencedValue> evidenceValues = singletonList(evidencedValue);\n     when(mockDiseaseNote.getTexts()).thenReturn(evidenceValues);\n-    ProbabilityAssScore associationScore = baseFactory.createAssociationScore(mockDiseaseComment);\n+    String confidence = baseFactory.createConfidence(mockDiseaseComment);\n \n-    assertThat(associationScore.getValue(), is(ASSOCIATION_SCORE_DEFINITE));\n+    assertThat(confidence, is(ASSOCIATION_SCORE_DEFINITE));\n   }\n \n   @Test\n@@ -60,15 +60,14 @@ void createsUncertainAssociationScore() {\n             + \"represented in this entry. More curator information ...\");\n     List<EvidencedValue> evidenceValues = singletonList(evidencedValue);\n     when(mockDiseaseNote.getTexts()).thenReturn(evidenceValues);\n-    ProbabilityAssScore associationScore = baseFactory.createAssociationScore(mockDiseaseComment);\n+    String confidence = baseFactory.createConfidence(mockDiseaseComment);\n \n-    assertThat(associationScore.getValue(), is(ASSOCIATION_SCORE_INDEFINITE));\n+    assertThat(confidence, is(ASSOCIATION_SCORE_INDEFINITE));\n   }\n \n   @Test\n   void creatingAssociationScoreForNullDiseaseSucceeds() {\n-    ProbabilityAssScore associationScore = baseFactory.createAssociationScore(null);\n-\n-    assertThat(associationScore, is(notNullValue()));\n+    String confidence = baseFactory.createConfidence(null);\n+    assertThat(confidence, is(notNullValue()));\n   }\n }"
  },
  {
    "sha": "8d0f2274bb995f7f82805f415dfbe9f62692f536",
    "filename": "src/test/java/uk/ac/ebi/uniprot/ot/model/factory/DefaultBaseFactoryTest.java",
    "status": "added",
    "additions": 286,
    "deletions": 0,
    "changes": 286,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/java/uk/ac/ebi/uniprot/ot/model/factory/DefaultBaseFactoryTest.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/java/uk/ac/ebi/uniprot/ot/model/factory/DefaultBaseFactoryTest.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/test/java/uk/ac/ebi/uniprot/ot/model/factory/DefaultBaseFactoryTest.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -0,0 +1,286 @@\n+package uk.ac.ebi.uniprot.ot.model.factory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import uk.ac.ebi.kraken.interfaces.uniprot.comments.Disease;\n+import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseDescription;\n+import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseId;\n+import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseReference;\n+import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseReferenceId;\n+import uk.ac.ebi.kraken.interfaces.uniprot.comments.DiseaseReferenceType;\n+import uk.ac.ebi.kraken.interfaces.uniprot.evidences.EvidenceId;\n+import uk.ac.ebi.kraken.interfaces.uniprot.features.Feature;\n+import uk.ac.ebi.kraken.interfaces.uniprot.features.FeatureLocation;\n+import uk.ac.ebi.kraken.interfaces.uniprot.features.FeatureType;\n+import uk.ac.ebi.kraken.model.common.SequenceImpl;\n+import uk.ac.ebi.kraken.model.uniprot.NcbiTaxonomyIdImpl;\n+import uk.ac.ebi.kraken.model.uniprot.UniProtEntryImpl;\n+import uk.ac.ebi.kraken.model.uniprot.UniProtIdImpl;\n+import uk.ac.ebi.kraken.model.uniprot.accessions.PrimaryUniProtAccessionImpl;\n+import uk.ac.ebi.kraken.model.uniprot.comments.DiseaseAcronymImpl;\n+import uk.ac.ebi.kraken.model.uniprot.comments.DiseaseCommentStructuredImpl;\n+import uk.ac.ebi.kraken.model.uniprot.comments.DiseaseDescriptionImpl;\n+import uk.ac.ebi.kraken.model.uniprot.comments.DiseaseIdImpl;\n+import uk.ac.ebi.kraken.model.uniprot.comments.DiseaseImpl;\n+import uk.ac.ebi.kraken.model.uniprot.comments.DiseaseReferenceIdImpl;\n+import uk.ac.ebi.kraken.model.uniprot.comments.DiseaseReferenceImpl;\n+import uk.ac.ebi.kraken.model.uniprot.evidences.EvidenceIdImpl;\n+import uk.ac.ebi.kraken.model.uniprot.features.FeatureImpl;\n+import uk.ac.ebi.kraken.model.uniprot.features.FeatureLocationImpl;\n+import uk.ac.ebi.kraken.model.uniprot.features.FeatureSequenceImpl;\n+import uk.ac.ebi.kraken.model.uniprot.features.VariantFeatureImpl;\n+import uk.ac.ebi.kraken.model.uniprot.features.VariantReportImpl;\n+import uk.ac.ebi.uniprot.ot.mapper.FFOmim2EfoMapper;\n+import uk.ac.ebi.uniprot.ot.mapper.SomaticDbSNPMapper;\n+import uk.ac.ebi.uniprot.ot.model.GeneticsRoot;\n+import uk.ac.ebi.uniprot.ot.model.base.Base;\n+\n+public class DefaultBaseFactoryTest {\n+\n+\tprivate static final String EFO_MAPPINGS = \"src/test/resources/mappings/omim2efo.mappings\";\n+\tprivate static final String SOMATIC_MAPPINGS = \"src/test/resources/mappings/somatic_census.txt\";\n+\n+\t@Test\n+\tvoid testCreateLiteratureCuratedRoot() {\n+\t\tUniProtEntryImpl entry = createEntry(\"P61981\", \"1433G_HUMAN\", 9606);\n+\t\tFeature feature1 = createFeature(FeatureType.ACT_SITE, \"\", 15, 15, \"test description\", \"V\", \"I\");\n+\t\tFeature feature2 = createFeature(FeatureType.BINDING, \"dfa\", 4, 5, \"\", \"\", \"\");\n+\t\tString description = \"in dbSNP:rs1554616630\";\n+\t\tFeature feature3 = createVariantFeature(description, 15, 15, \"T\", \"M\");\n+\n+\t\tList<Feature> features = Arrays.asList(feature1, feature2, feature3);\n+\t\tentry.setFeatures(features);\n+\n+\t\tEvidenceIdImpl evidenceIdImpl = new EvidenceIdImpl();\n+\t\tevidenceIdImpl.getAttribute().setValue(\"25533962\");\n+\t\tevidenceIdImpl.setValue(\"ECO:0000269|PubMed:25533962\");\n+\n+\t\tEvidenceIdImpl evidenceIdImpl1 = new EvidenceIdImpl();\n+\t\tevidenceIdImpl1.getAttribute().setValue(\"26168268\");\n+\t\tevidenceIdImpl1.setValue(\"ECO:0000269|PubMed:26168268\");\n+\n+\t\tList<EvidenceId> evidenceList = new ArrayList<>();\n+\t\tevidenceList.add(evidenceIdImpl);\n+\t\tevidenceList.add(evidenceIdImpl1);\n+\t\tString name = \"Mental retardation, autosomal dominant 35\";\n+\t\tString disDesc = \"A form of mental retardation, a disorder characterized by significantly \"\n+\t\t\t\t+ \"below average general intellectual functioning associated with impairments \"\n+\t\t\t\t+ \"in adaptive behavior and manifested during the developmental period.\";\n+\t\tDiseaseCommentStructuredImpl structuredDisease = createDiseaseComments(\"EIEE56\", name, disDesc, evidenceList,\n+\t\t\t\t\"616355\");\n+\n+\t\tDefaultBaseFactory defaultBaseFactory = new DefaultBaseFactory();\n+\t\tFFOmim2EfoMapper mapper = new FFOmim2EfoMapper(new File(EFO_MAPPINGS));\n+\t\tdefaultBaseFactory.setOmim2EfoMapper(mapper);\n+\t\tList<Base> bases = defaultBaseFactory.createLiteratureCuratedRoot(entry, structuredDisease);\n+\t\tassertEquals(1, bases.size());\n+\t\tassertEquals(\"OMIM:616355\", bases.get(0).getDiseaseFromSourceId());\n+\t\tassertEquals(\"P61981\", bases.get(0).getTargetFromSourceId());\n+\t\tassertEquals(\"Orphanet_178469\", bases.get(0).getDiseaseFromSourceMappedId());\n+\t\tassertEquals(\"Mental retardation, autosomal dominant 35\", bases.get(0).getDiseaseFromSource());\n+\t\tassertEquals(2, bases.get(0).getLiterature().size());\n+\t\tassertTrue(bases.get(0).getLiterature().contains(\"26168268\"));\n+\t\tassertTrue(bases.get(0).getLiterature().contains(\"25533962\"));\n+\t}\n+\n+\t@Test\n+\tvoid testCreateGeneticsRoots() {\n+\t\tEvidenceIdImpl evidenceIdImpl = new EvidenceIdImpl();\n+\t\tevidenceIdImpl.getAttribute().setValue(\"25533962\");\n+\t\tevidenceIdImpl.setValue(\"ECO:0000269|PubMed:25533962\");\n+\n+\t\tEvidenceIdImpl evidenceIdImpl1 = new EvidenceIdImpl();\n+\t\tevidenceIdImpl1.getAttribute().setValue(\"26168268\");\n+\t\tevidenceIdImpl1.setValue(\"ECO:0000269|PubMed:26168268\");\n+\n+\t\tList<EvidenceId> evidenceList = new ArrayList<>();\n+\t\tevidenceList.add(evidenceIdImpl);\n+\t\tevidenceList.add(evidenceIdImpl1);\n+\n+\t\tUniProtEntryImpl entry = createEntry(\"P04637\", \"1433G_HUMAN\", 9606);\n+\t\tFeature feature1 = createFeature(FeatureType.ACT_SITE, \"\", 15, 15, \"test description\", \"V\", \"I\");\n+\t\tFeature feature2 = createFeature(FeatureType.BINDING, \"dfa\", 4, 5, \"\", \"\", \"\");\n+\t\tString description = \"in EIEE56; associated with hyperlipoproteinemia and atherosclerosis; increased binding to LDL receptor; dbSNP:rs104886003\";\n+\t\tFeature feature3 = createVariantFeature(description, 15, 15, \"T\", \"M\");\n+\t\tfeature3.setEvidenceIds(evidenceList);\n+\n+\t\tVariantFeatureImpl feature4 = createVariantFeature(description, 201, 201, \"P\", \"R\");\n+\t\tList<Feature> features = Arrays.asList(feature1, feature2, feature3, feature4);\n+\n+\t\tentry.setFeatures(features);\n+\n+\t\tString name = \"Mental retardation, autosomal dominant 35\";\n+\t\tString disDesc = \"A form of mental retardation, a disorder characterized by significantly \"\n+\t\t\t\t+ \"below average general intellectual functioning associated with impairments \"\n+\t\t\t\t+ \"in adaptive behavior and manifested during the developmental period.\";\n+\t\tDiseaseCommentStructuredImpl structuredDisease = createDiseaseComments(\"EIEE56\", name, disDesc, evidenceList,\n+\t\t\t\t\"616355\");\n+\n+\t\tDefaultBaseFactory defaultBaseFactory = new DefaultBaseFactory();\n+\t\tFFOmim2EfoMapper mapper = new FFOmim2EfoMapper(new File(EFO_MAPPINGS));\n+\t\tdefaultBaseFactory.setOmim2EfoMapper(mapper);\n+\t\tSomaticDbSNPMapper somaticDbSNPCache = new SomaticDbSNPMapper(new File(SOMATIC_MAPPINGS));\n+\t\tdefaultBaseFactory.setSomaticDbSNPMapper(somaticDbSNPCache);\n+\t\tList<GeneticsRoot> bases = defaultBaseFactory.createGeneticsRoots(entry, structuredDisease);\n+\t\tassertEquals(1, bases.size());\n+\t\tassertEquals(\"OMIM:616355\", bases.get(0).getDiseaseFromSourceId());\n+\t\tassertEquals(\"P04637\", bases.get(0).getTargetFromSourceId());\n+\t\tassertEquals(\"Orphanet_178469\", bases.get(0).getDiseaseFromSourceMappedId());\n+\t\tassertEquals(\"Mental retardation, autosomal dominant 35\", bases.get(0).getDiseaseFromSource());\n+\t\tassertEquals(2, bases.get(0).getLiterature().size());\n+\t\tassertTrue(bases.get(0).getLiterature().contains(\"26168268\"));\n+\t\tassertTrue(bases.get(0).getLiterature().contains(\"25533962\"));\n+\t}\n+\t\n+\t@Test\n+\tvoid testCreateGeneticsRootsWith2VariantFeatures() {\n+\t\tEvidenceIdImpl evidenceIdImpl = new EvidenceIdImpl();\n+\t\tevidenceIdImpl.getAttribute().setValue(\"25533962\");\n+\t\tevidenceIdImpl.setValue(\"ECO:0000269|PubMed:25533962\");\n+\n+\t\tEvidenceIdImpl evidenceIdImpl1 = new EvidenceIdImpl();\n+\t\tevidenceIdImpl1.getAttribute().setValue(\"26168268\");\n+\t\tevidenceIdImpl1.setValue(\"ECO:0000269|PubMed:26168268\");\n+\n+\t\tList<EvidenceId> evidenceList = new ArrayList<>();\n+\t\tevidenceList.add(evidenceIdImpl);\n+\t\tevidenceList.add(evidenceIdImpl1);\n+\n+\t\tUniProtEntryImpl entry = createEntry(\"Q9UM73\", \"1433G_HUMAN\", 9606);\n+\t\tFeature feature1 = createFeature(FeatureType.ACT_SITE, \"\", 15, 15, \"test description\", \"V\", \"I\");\n+\t\tFeature feature2 = createFeature(FeatureType.BINDING, \"dfa\", 4, 5, \"\", \"\", \"\");\n+\t\tString description = \"in EIEE56; associated with hyperlipoproteinemia and atherosclerosis; increased binding to LDL receptor; dbSNP:rs113994087\";\n+\t\tFeature feature3 = createVariantFeature(description, 15, 15, \"T\", \"M\");\n+\t\tfeature3.setEvidenceIds(evidenceList);\n+\n+\t\tdescription = \"in EIEE56; ApoE4 Philadelphia, ApoE5 French-\\n\" + \n+\t\t\t\t\" Canadian and ApoE5-type; only ApoE4 Philadelphia is\\n\" + \n+\t\t\t\t\" associated with HLPP3; dbSNP:rs113994088\";\n+\n+\t\tVariantFeatureImpl feature4 = createVariantFeature(description, 201, 201, \"P\", \"R\");\n+\t\tfeature4.setEvidenceIds(evidenceList);\n+\t\tList<Feature> features = Arrays.asList(feature1, feature2, feature3, feature4);\n+\n+\t\tentry.setFeatures(features);\n+\n+\t\tString name = \"Mental retardation, autosomal dominant 35\";\n+\t\tString disDesc = \"A form of mental retardation, a disorder characterized by significantly \"\n+\t\t\t\t+ \"below average general intellectual functioning associated with impairments \"\n+\t\t\t\t+ \"in adaptive behavior and manifested during the developmental period.\";\n+\t\tDiseaseCommentStructuredImpl structuredDisease = createDiseaseComments(\"EIEE56\", name, disDesc, evidenceList,\n+\t\t\t\t\"616355\");\n+\n+\t\tDefaultBaseFactory defaultBaseFactory = new DefaultBaseFactory();\n+\t\tFFOmim2EfoMapper mapper = new FFOmim2EfoMapper(new File(EFO_MAPPINGS));\n+\t\tdefaultBaseFactory.setOmim2EfoMapper(mapper);\n+\t\tSomaticDbSNPMapper somaticDbSNPCache = new SomaticDbSNPMapper(new File(SOMATIC_MAPPINGS));\n+\t\tdefaultBaseFactory.setSomaticDbSNPMapper(somaticDbSNPCache);\n+\t\tList<GeneticsRoot> bases = defaultBaseFactory.createGeneticsRoots(entry, structuredDisease);\n+\t\tassertEquals(2, bases.size());\n+\t\tassertEquals(\"OMIM:616355\", bases.get(0).getDiseaseFromSourceId());\n+\t\tassertEquals(\"Q9UM73\", bases.get(0).getTargetFromSourceId());\n+\t\tassertEquals(\"Orphanet_178469\", bases.get(0).getDiseaseFromSourceMappedId());\n+\t\tassertEquals(\"Mental retardation, autosomal dominant 35\", bases.get(0).getDiseaseFromSource());\n+\t\tassertEquals(2, bases.get(0).getLiterature().size());\n+\t\tassertTrue(bases.get(0).getLiterature().contains(\"26168268\"));\n+\t\tassertTrue(bases.get(0).getLiterature().contains(\"25533962\"));\n+\t\tassertEquals(\"rs113994087\", bases.get(0).getVariantRsId());\n+\t\t\n+\t\tassertEquals(\"OMIM:616355\", bases.get(1).getDiseaseFromSourceId());\n+\t\tassertEquals(\"Q9UM73\", bases.get(1).getTargetFromSourceId());\n+\t\tassertEquals(\"Orphanet_178469\", bases.get(1).getDiseaseFromSourceMappedId());\n+\t\tassertEquals(\"Mental retardation, autosomal dominant 35\", bases.get(1).getDiseaseFromSource());\n+\t\tassertEquals(2, bases.get(1).getLiterature().size());\n+\t\tassertTrue(bases.get(1).getLiterature().contains(\"26168268\"));\n+\t\tassertTrue(bases.get(1).getLiterature().contains(\"25533962\"));\n+\t\tassertEquals(\"rs113994088\", bases.get(1).getVariantRsId());\n+\t}\n+\t\n+\tprivate FeatureImpl createFeature(FeatureType type, String description, int segStart, int segEnd, String desc,\n+\t\t\tString alt, String origSeq) {\n+\t\tFeatureImpl featureImpl = new FeatureImpl() {\n+\t\t\t@Override\n+\t\t\tpublic uk.ac.ebi.kraken.interfaces.uniprot.features.FeatureType getType() {\n+\t\t\t\treturn type;\n+\t\t\t}\n+\t\t};\n+\t\tFeatureLocation location = new FeatureLocationImpl();\n+\t\tlocation.setStart(15);\n+\t\tlocation.setEnd(15);\n+\t\tlocation.setSequence(\"\");\n+\t\tfeatureImpl.setFeatureLocation(location);\n+\t\treturn featureImpl;\n+\t}\n+\n+\tprivate VariantFeatureImpl createVariantFeature(String description, int segStart, int segEnd, String origSeq,\n+\t\t\tString alt) {\n+\t\tVariantFeatureImpl feature = new VariantFeatureImpl();\n+\t\tFeatureSequenceImpl alternativeSeq = new FeatureSequenceImpl();\n+\t\tif (alt != null)\n+\t\t\talternativeSeq.setValue(alt);\n+\t\tFeatureSequenceImpl originalSeq = new FeatureSequenceImpl();\n+\t\tif (origSeq != null)\n+\t\t\toriginalSeq.setValue(origSeq);\n+\t\tfeature.setAlternativeSequences(Arrays.asList(alternativeSeq));\n+\t\tfeature.setOriginalSequence(originalSeq);\n+\t\tVariantReportImpl report = new VariantReportImpl();\n+\t\treport.setValue(description);\n+\t\tfeature.setVariantReports(Arrays.asList(report));\n+\t\tFeatureLocation location = new FeatureLocationImpl();\n+\t\tlocation.setStart(segStart);\n+\t\tlocation.setEnd(segEnd);\n+\t\tfeature.setFeatureLocation(location);\n+\t\treturn feature;\n+\t}\n+\n+\tprivate UniProtEntryImpl createEntry(String accession, String name, Integer taxId) {\n+\t\tUniProtEntryImpl entry = new UniProtEntryImpl();\n+\t\tPrimaryUniProtAccessionImpl uniProtAccession = new PrimaryUniProtAccessionImpl();\n+\t\tuniProtAccession.setValue(accession);\n+\t\tentry.setPrimaryUniProtAccession(uniProtAccession);\n+\t\tNcbiTaxonomyIdImpl ncbiTaxonomyId = new NcbiTaxonomyIdImpl();\n+\t\tncbiTaxonomyId.setId(taxId);\n+\t\tncbiTaxonomyId.setValue(taxId.toString());\n+\t\tentry.setNcbiTaxonomyIds(Arrays.asList(ncbiTaxonomyId));\n+\t\tUniProtIdImpl uniProtId = new UniProtIdImpl();\n+\t\tuniProtId.setValue(name);\n+\t\tentry.setUniProtId(uniProtId);\n+\t\tSequenceImpl sequence = new SequenceImpl();\n+//\t\tsequence.setValue(createSequence().getSequence());\n+\t\tentry.setSequence(sequence);\n+\t\treturn entry;\n+\t}\n+\n+\tprivate DiseaseCommentStructuredImpl createDiseaseComments(String acronymVal, String name, String desc,\n+\t\t\tList<EvidenceId> evidenceList, String mimId) {\n+\t\tDiseaseCommentStructuredImpl comment = new DiseaseCommentStructuredImpl();\n+\t\tDisease disease = new DiseaseImpl();\n+\t\tDiseaseAcronymImpl acronym = new DiseaseAcronymImpl();\n+\t\tacronym.setValue(acronymVal);\n+\t\tdisease.setDiseaseAcronym(acronym);\n+\t\tDiseaseId diseaseId = new DiseaseIdImpl();\n+\t\tdiseaseId.setValue(name);\n+\t\tdisease.setDiseaseId(diseaseId);\n+\t\tDiseaseDescription diseaseDesc = new DiseaseDescriptionImpl();\n+\t\tdiseaseDesc.setValue(desc);\n+\t\tdiseaseDesc.setEvidenceIds(evidenceList);\n+\t\tdisease.setDiseaseDescription(diseaseDesc);\n+\t\tDiseaseReference ref = new DiseaseReferenceImpl();\n+\t\tDiseaseReferenceId refId = new DiseaseReferenceIdImpl();\n+\t\trefId.setValue(mimId);\n+\t\tref.setDiseaseReferenceId(refId);\n+\t\tref.setDiseaseReferenceType(DiseaseReferenceType.MIM);\n+\t\tdisease.setDiseaseReference(ref);\n+\t\tcomment.setDisease(disease);\n+\t\treturn comment;\n+\t}\n+\n+}"
  },
  {
    "sha": "755b9cfb98ca1e7b78a2728ea87ca1d62a3f7a63",
    "filename": "src/test/java/uk/ac/ebi/uniprot/ot/validation/json/JsonSchemaValidatorTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/java/uk/ac/ebi/uniprot/ot/validation/json/JsonSchemaValidatorTest.java",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/java/uk/ac/ebi/uniprot/ot/validation/json/JsonSchemaValidatorTest.java",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/test/java/uk/ac/ebi/uniprot/ot/validation/json/JsonSchemaValidatorTest.java?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -58,11 +58,11 @@ void createdSchemaIsNotNull() {\n   @Test\n   void shouldValidateInstanceWithSchema() throws IOException {\n     Base es = new Base();\n-    es.setAccess_level(\"public\");\n-    es.setValidated_against_schema_version(\"0.0.0\");\n-    es.setSourceID(\"accession\");\n+    //    es.setAccess_level(\"public\");\n+    //    es.setValidated_against_schema_version(\"0.0.0\");\n+    es.setDatasourceId(\"accession\");\n     UniqueAssociationFields uaf = new UniqueAssociationFields();\n-    es.setUnique_association_fields(uaf);\n+    //    es.setUnique_association_fields(uaf);\n \n     JsonSchemaValidator validator = new JsonSchemaValidator();\n     ObjectMapper mapper = new ObjectMapper();"
  },
  {
    "sha": "262ecc583d42a326acfb826c7fd2a7587422d752",
    "filename": "src/test/resources/mappings/omim2efo.mappings",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/ebi-uniprot/open-targets-core-db/blob/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/resources/mappings/omim2efo.mappings",
    "raw_url": "https://github.com/ebi-uniprot/open-targets-core-db/raw/aef25e2bdad69b8d960e30ac1a1fe61e4358da92/src/test/resources/mappings/omim2efo.mappings",
    "contents_url": "https://api.github.com/repos/ebi-uniprot/open-targets-core-db/contents/src/test/resources/mappings/omim2efo.mappings?ref=aef25e2bdad69b8d960e30ac1a1fe61e4358da92",
    "patch": "@@ -3,4 +3,6 @@ OMIM:613355\thttp://www.orpha.net/ORDO/Orphanet_261279\t17q23.1q23.2 microdeletion\n OMIM:100050\thttp://www.orpha.net/ORDO/Orphanet_915\tGalactose epimerase deficiency\n OMIM:151623\thttp://www.orpha.net/ORDO/Orphanet_524\tLi-Fraumeni syndrome\n OMIM:101200\thttp://www.orpha.net/ORDO/Orphanet_87\t17q12 microdeletion syndrome\n-OMIM:101200\thttp://www.ebi.ac.uk/efo/EFO_0004123\t17q12 microdeletion syndrome\n\\ No newline at end of file\n+OMIM:101200\thttp://www.ebi.ac.uk/efo/EFO_0004123\t17q12 microdeletion syndrome\n+OMIM:616355\thttp://www.orpha.net/ORDO/Orphanet_178469\tAutosomal dominant non-syndromic intellectual disability\n+OMIM:613014     http://www.ebi.ac.uk/efo/EFO_0000621    neuroblastoma\n\\ No newline at end of file"
  }
]
