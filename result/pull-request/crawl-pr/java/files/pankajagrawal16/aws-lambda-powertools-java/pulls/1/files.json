[
  {
    "sha": "28a35dce0ea0578f3a832ed175b842049f499c76",
    "filename": ".github/workflows/build-docs.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/.github/workflows/build-docs.yml",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/.github/workflows/build-docs.yml",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/.github/workflows/build-docs.yml?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -16,8 +16,7 @@ jobs:\n   docs:\n     runs-on: ubuntu-latest\n     steps:\n-      - uses: actions/checkout@v2\n-      - uses: borales/actions-yarn@v2.0.0\n+      - uses: actions/checkout@v1\n       - name: Set up Python\n         uses: actions/setup-python@v1\n         with:\n@@ -27,7 +26,5 @@ jobs:\n         run: |\n           echo \"SOURCE_BRANCH=${GITHUB_REF#refs/heads/}\" >> $GITHUB_ENV\n           echo \"SOURCE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV\n-      - name: install dependencies\n-        run: make dev-docs\n       - name: Build docs website\n         run: make build-docs-website\n\\ No newline at end of file"
  },
  {
    "sha": "69aef263c12b8f548f60203532f4531f0d7af819",
    "filename": ".github/workflows/docs.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/.github/workflows/docs.yml",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/.github/workflows/docs.yml",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/.github/workflows/docs.yml?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -10,8 +10,7 @@ jobs:\n   docs:\n     runs-on: ubuntu-latest\n     steps:\n-      - uses: actions/checkout@v2\n-      - uses: borales/actions-yarn@v2.0.0\n+      - uses: actions/checkout@v1\n       - name: Set up Python\n         uses: actions/setup-python@v1\n         with:\n@@ -21,8 +20,6 @@ jobs:\n         run: |\n           echo \"SOURCE_BRANCH=${GITHUB_REF#refs/heads/}\" >> $GITHUB_ENV\n           echo \"SOURCE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV\n-      - name: install dependencies\n-        run: make dev-docs\n       - name: Build docs website\n         run: make build-docs-website\n       - name: Deploy all docs"
  },
  {
    "sha": "e05b9dab273f77fac1a4cbdb0a99820f575f1966",
    "filename": "CHANGELOG.md",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/CHANGELOG.md",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/CHANGELOG.md?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,11 @@\n+# Changelog\n+\n+All notable changes to this project will be documented in this file.\n+\n+This project follows [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) format for changes and adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n+\n+\n+\n+## [Unreleased]\n+\n+## [1.3.0] - Coming soon!\n\\ No newline at end of file"
  },
  {
    "sha": "8fa41a398bde18852c0a364bf027768afaa2064e",
    "filename": "Makefile",
    "status": "modified",
    "additions": 7,
    "deletions": 9,
    "changes": 16,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/Makefile",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/Makefile",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/Makefile?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -1,17 +1,15 @@\n-\n-dev-docs:\n-\tcd docs && yarn install\n-\n build-docs:\n \t@$(MAKE) build-docs-website\n \n-build-docs-website: dev-docs\n+build-docs-website:\n \tmkdir -p dist\n-\tcd docs && yarn build\n-\tcp -R docs/public/* dist/\n+\tdocker build -t squidfunk/mkdocs-material ./docs/\n+\tdocker run --rm -t -v ${PWD}:/docs squidfunk/mkdocs-material build\n+\tcp -R site/* dist/\n \n-docs-local:\n-\tcd docs && yarn start\n+docs-local-docker:\n+\tdocker build -t squidfunk/mkdocs-material ./docs/\n+\tdocker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material\n \n test:\n \tmvn test"
  },
  {
    "sha": "74329d83b76bdc9e2e8c6e5adf98059d51f5d4e1",
    "filename": "README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/README.md",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/README.md",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/README.md?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -82,7 +82,8 @@ See **[example](./example/README.md)** for maven or gradle configurations includ\n \n ## Credits\n \n-* [Gatsby Apollo Theme for Docs](https://github.com/apollographql/gatsby-theme-apollo/tree/master/packages/gatsby-theme-apollo-docs)\n+* [MkDocs](https://www.mkdocs.org/)\n+* [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)\n \n ## License\n "
  },
  {
    "sha": "58d06c368a2aed2595c63288cae4a94d72972ead",
    "filename": "docs/.prettierignore",
    "status": "removed",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/.prettierignore",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/.prettierignore",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/.prettierignore?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,4 +0,0 @@\n-.cache\n-package.json\n-package-lock.json\n-public"
  },
  {
    "sha": "33d2cfa3f6193c91be64c1dbb3a7c7b0377adcc4",
    "filename": "docs/.prettierrc",
    "status": "removed",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/.prettierrc",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/.prettierrc",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/.prettierrc?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,4 +0,0 @@\n-{\n-  \"arrowParens\": \"avoid\",\n-  \"semi\": false\n-}"
  },
  {
    "sha": "7bf267f4f32d6d23046f9b5a77b5a61038b3ce73",
    "filename": "docs/Dockerfile",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/Dockerfile",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/Dockerfile",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/Dockerfile?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,2 @@\n+FROM squidfunk/mkdocs-material\n+RUN pip install mkdocs-git-revision-date-plugin"
  },
  {
    "sha": "c2705ba58cb53f19d8190ea103497f45c8aea904",
    "filename": "docs/changelog.md",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/changelog.md",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/changelog.md",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/changelog.md?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,2 @@\n+[comment]: <> (Includes Changelog content entire file as a snippet)\n+--8<-- \"CHANGELOG.md\""
  },
  {
    "sha": "59f0890ad0ca2d77189cfcfd833d074bc0137e26",
    "filename": "docs/content/core/logging.mdx",
    "status": "removed",
    "additions": 0,
    "deletions": 247,
    "changes": 247,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/core/logging.mdx",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/core/logging.mdx",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/core/logging.mdx?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,247 +0,0 @@\n----\n-title: Logging\n-description: Core utility\n----\n-\n-import Note from \"../../src/components/Note\"\n-\n-Logger provides an opinionated logger with output structured as JSON.\n-\n-**Key features**\n-\n-* Capture key fields from Lambda context, cold start and structures logging output as JSON\n-* Log Lambda event when instructed (disabled by default)\n-    - Enable explicitly via annotation param\n-* Append additional keys to structured log at any point in time\n-\n-## Initialization\n-\n-Powertools extends the functionality of Log4J. Below is an example log4j2.xml file, with the LambdaJsonLayout configured.\n-\n-```xml\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<Configuration packages=\"com.amazonaws.services.lambda.runtime.log4j2\">\n-    <Appenders>\n-        <Console name=\"JsonAppender\" target=\"SYSTEM_OUT\">\n-            <LambdaJsonLayout compact=\"true\" eventEol=\"true\"/>\n-        </Console>\n-    </Appenders>\n-    <Loggers>\n-        <Logger name=\"JsonLogger\" level=\"INFO\" additivity=\"false\">\n-            <AppenderRef ref=\"JsonAppender\"/>\n-        </Logger>\n-        <Root level=\"info\">\n-            <AppenderRef ref=\"JsonAppender\"/>\n-        </Root>\n-    </Loggers>\n-</Configuration>\n-```\n-\n-You can also override log level by setting `POWERTOOLS_LOG_LEVEL` env var  - Here is an example using AWS Serverless Application Model (SAM)\n-\n-```yaml:title=template.yaml\n-Resources:\n-    HelloWorldFunction:\n-        Type: AWS::Serverless::Function\n-        Properties:\n-        ...\n-        Runtime: java8\n-        Environment:\n-            Variables:\n-                POWERTOOLS_LOG_LEVEL: DEBUG # highlight-line\n-```\n-\n-You can also explicitly set a service name via `POWERTOOLS_SERVICE_NAME` env var. This sets **service** key that will be present across all log statements.\n-\n-## Standard structured keys\n-\n-Your Logger will always include the following keys to your structured logging:\n-\n-Key | Type | Example | Description\n-------------------------------------------------- | ------------------------------------------------- | --------------------------------------------------------------------------------- | -------------------------------------------------\n-**timestamp** | String | \"2020-05-24 18:17:33,774\" | Timestamp of actual log statement\n-**level** | String | \"INFO\" | Logging level\n-**coldStart** | Boolean | true| ColdStart value.\n-**service** | String | \"payment\" | Service name defined. \"service_undefined\" will be used if unknown\n-**samplingRate** | int |  0.1 | Debug logging sampling rate in percentage e.g. 10% in this case\n-**message** | String |  \"Collecting payment\" | Log statement value. Unserializable JSON values will be casted to string\n-**functionName**| String | \"example-powertools-HelloWorldFunction-1P1Z6B39FLU73\"\n-**functionVersion**| String | \"12\"\n-**functionMemorySize**| String | \"128\"\n-**functionArn**| String | \"arn:aws:lambda:eu-west-1:012345678910:function:example-powertools-HelloWorldFunction-1P1Z6B39FLU73\"\n-**xray_trace_id**| String | \"1-5759e988-bd862e3fe1be46a994272793\" | X-Ray Trace ID when Lambda function has enabled Tracing\n-**function_request_id**| String | \"899856cb-83d1-40d7-8611-9e78f15f32f4\"\" | AWS Request ID from lambda context\n-\n-## Capturing context Lambda info\n-\n-You can enrich your structured logs with key Lambda context information via `logEvent` annotation parameter.\n-\n-```java:title=App.java\n-package helloworld;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import software.amazon.lambda.logging.LoggingUtils;\n-import software.amazon.lambda.logging.Logging;\n-...\n-\n-/**\n- * Handler for requests to Lambda function.\n- */\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    Logger log = LogManager.getLogger();\n-\n-    @Logging\n-    public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n-     ...\n-    }\n-}\n-```\n-\n-You can also explicitly log any incoming event using `logEvent` param.\n-Refer [Override default object mapper](#override-default-object-mapper) to customise what is logged.\n-\n-<Note type=\"warning\">\n-   This is disabled by default to prevent sensitive info being logged.\n-</Note><br/>\n-\n-```java:title=App.java\n-package helloworld;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import software.amazon.lambda.logging.LoggingUtils;\n-import software.amazon.lambda.logging.Logging;\n-...\n-\n-/**\n- * Handler for requests to Lambda function.\n- */\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    Logger log = LogManager.getLogger();\n-    \n-    @Logging(logEvent = true)\n-    public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n-     ...\n-    }\n-}\n-```\n-\n-## Appending additional keys\n-\n-You can append your own keys to your existing Logger via `appendKey`.\n-\n-```java:title=App.java\n-package helloworld;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import software.amazon.lambda.logging.LoggingUtils;\n-import software.amazon.lambda.logging.Logging;\n-...\n-\n-/**\n- * Handler for requests to Lambda function.\n- */\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    Logger log = LogManager.getLogger();\n-\n-    @Logging(logEvent = true)\n-    public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n-        ...\n-        LoggingUtils.appendKey(\"test\", \"willBeLogged\");\n-        ...\n-\n-        ...\n-         Map<String, String> customKeys = new HashMap<>();\n-         customKeys.put(\"test\", \"value\");\n-         customKeys.put(\"test1\", \"value1\");\n-\n-         LoggingUtils.appendKeys(customKeys);\n-        ...\n-    }\n-}\n-```\n-\n-## Override default object mapper\n-\n-You can optionally choose to override default object mapper which is used to serialize lambda function events. You might\n-want to supply custom object mapper in order to control how serialisation is done, for example, when you want to log only\n-specific fields from received event due to security.\n-\n-```java:title=App.java\n-package helloworld;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import software.amazon.lambda.logging.LoggingUtils;\n-import software.amazon.lambda.logging.Logging;\n-...\n-\n-/**\n- * Handler for requests to Lambda function.\n- */\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    Logger log = LogManager.getLogger();\n-\n-    // highlight-start\n-    static {\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        LoggingUtils.defaultObjectMapper(objectMapper);\n-    }\n-    // highlight-end\n-\n-    @Logging(logEvent = true)\n-    public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n-        ...\n-    }\n-}\n-```\n-\n-## Sampling debug logs\n-\n-You can dynamically set a percentage of your logs to **DEBUG** level via env var `POWERTOOLS_LOGGER_SAMPLE_RATE` or\n-via `samplingRate` attribute on annotation.\n-\n-Configuration on environment variable is given precedence over sampling rate configuration on annotation, provided it's in valid value range.\n-\n-```java:title=App.java\n-package helloworld;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import software.amazon.lambda.logging.LoggingUtils;\n-import software.amazon.lambda.logging.Logging;\n-...\n-\n-/**\n- * Handler for requests to Lambda function.\n- */\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    Logger log = LogManager.getLogger();\n-\n-    @Logging(samplingRate = 0.5)\n-    public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n-     ...\n-    }\n-}\n-```\n-\n-You can also override sampling by setting `POWERTOOLS_LOGGER_SAMPLE_RATE` env var  - Here is an example using AWS Serverless Application Model (SAM)\n-\n-```yaml:title=template.yaml\n-Resources:\n-    HelloWorldFunction:\n-        Type: AWS::Serverless::Function\n-        Properties:\n-        ...\n-        Runtime: java8\n-        Environment:\n-            Variables:\n-                POWERTOOLS_LOGGER_SAMPLE_RATE: 0.5 # highlight-line\n-```\n\\ No newline at end of file"
  },
  {
    "sha": "e0ad09e5638e51266b12b533b7f1090b462328bf",
    "filename": "docs/content/core/metrics.mdx",
    "status": "removed",
    "additions": 0,
    "deletions": 156,
    "changes": 156,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/core/metrics.mdx",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/core/metrics.mdx",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/core/metrics.mdx?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,156 +0,0 @@\n----\n-title: Metrics\n-description: Core utility\n----\n-\n-Metrics creates custom metrics asynchronously by logging metrics to standard output following Amazon CloudWatch Embedded Metric Format (EMF).\n-\n-These metrics can be visualized through [Amazon CloudWatch Console](https://console.aws.amazon.com/cloudwatch/).\n-\n-**Key features**\n-\n-* Aggregate up to 100 metrics using a single CloudWatch EMF object (large JSON blob)\n-* Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc)\n-* Metrics are created asynchronously by the CloudWatch service, no custom stacks needed\n-* Context manager to create a one off metric with a different dimension\n-\n-## Initialization\n-\n-Set `POWERTOOLS_SERVICE_NAME` and `POWERTOOLS_METRICS_NAMESPACE` env vars as a start - Here is an example using AWS Serverless Application Model (SAM)\n-\n-```yaml:title=template.yaml\n-Resources:\n-    HelloWorldFunction:\n-        Type: AWS::Serverless::Function\n-        Properties:\n-        ...\n-        Runtime: java8\n-        Environment:\n-            Variables:\n-                POWERTOOLS_SERVICE_NAME: payment # highlight-line\n-                POWERTOOLS_METRICS_NAMESPACE: ServerlessAirline # highlight-line\n-```\n-\n-We recommend you use your application or main service as a metric namespace.\n-You can explicitly set a namespace name an annotation variable `namespace` param or via `POWERTOOLS_METRICS_NAMESPACE` env var.\n-\n-This sets **namespace** key that will be used for all metrics.\n-You can also pass a service name via `service` param or `POWERTOOLS_SERVICE_NAME` env var. This will create a dimension with the service name.\n-\n-```java:title=Handler.java\n-package example;\n-\n-import com.amazonaws.services.lambda.runtime.Context;\n-import com.amazonaws.services.lambda.runtime.RequestHandler;\n-import software.amazon.cloudwatchlogs.emf.logger.MetricsLogger;\n-import software.amazon.cloudwatchlogs.emf.model.Unit;\n-import software.amazon.lambda.powertools.metrics.Metrics;\n-import software.amazon.lambda.powertools.metrics.MetricsUtils;\n-\n-public class MetricsEnabledHandler implements RequestHandler<Object, Object> {\n-\n-    MetricsLogger metricsLogger = MetricsUtils.metricsLogger();\n-\n-    @Override\n-    @Metrics(namespace = \"ExampleApplication\", service = \"booking\")\n-    public Object handleRequest(Object input, Context context) {\n-        ...\n-    }\n-}\n-```\n-\n-You can initialize Metrics anywhere in your code as many times as you need - It'll keep track of your aggregate metrics in memory.\n-\n-## Creating metrics\n-\n-You can create metrics using `putMetric`, and manually create dimensions for all your aggregate metrics using `add_dimension`.\n-\n-```java:title=Handler.java\n-public class MetricsEnabledHandler implements RequestHandler<Object, Object> {\n-\n-    MetricsLogger metricsLogger = MetricsUtils.metricsLogger();\n-\n-    @Override\n-    @Metrics(namespace = \"ExampleApplication\", service = \"booking\")\n-    public Object handleRequest(Object input, Context context) {\n-        // highlight-start\n-        metricsLogger.putDimensions(DimensionSet.of(\"environment\", \"prod\"));\n-        metricsLogger.putMetric(\"SuccessfulBooking\", 1, Unit.COUNT);\n-        // highlight-end\n-        ...\n-    }\n-}\n-```\n-\n-The `Unit` enum facilitate finding a supported metric unit by CloudWatch.\n-\n-CloudWatch EMF supports a max of 100 metrics. Metrics utility will flush all metrics when adding the 100th metric while subsequent metrics will be aggregated into a new EMF object, for your convenience.\n-\n-## Creating a metric with a different dimension\n-\n-CloudWatch EMF uses the same dimensions across all your metrics. Use `single_metric` if you have a metric that should have different dimensions.\n-\n-<Note type=\"info\">\n-    Generally, this would be an edge case since you <a href=\"https://aws.amazon.com/cloudwatch/pricing/\">pay for unique metric</a>. Keep the following formula in mind:\n-    <br/><br/>\n-    <strong>unique metric = (metric_name + dimension_name + dimension_value)</strong>\n-</Note><br/>\n-\n-```java:title=Handler.java\n-withSingleMetric(\"CustomMetrics2\", 1, Unit.COUNT, \"Another\", (metric) -> {\n-    metric.setDimensions(DimensionSet.of(\"AnotherService\", \"CustomService\"));\n-});\n-```\n-\n-## Adding metadata\n-\n-You can use `putMetadata` for advanced use cases, where you want to metadata as part of the serialized metrics object.\n-\n-<Note type=\"info\">\n-    <strong>This will not be available during metrics visualization</strong> - Use <strong>dimensions</strong> for this purpose\n-</Note><br/>\n-\n-```java:title=Handler.java\n-@Metrics(namespace = \"ServerlessAirline\", service = \"payment\")\n-public APIGatewayProxyResponseEvent handleRequest(Object input, Context context) {\n-    metricsLogger().putMetric(\"CustomMetric1\", 1, Unit.COUNT);\n-    metricsLogger().putMetadata(\"booking_id\", \"1234567890\"); // highlight-line\n-    ...\n-}\n-```\n-\n-This will be available in CloudWatch Logs to ease operations on high cardinal data.\n-\n-The `@Metrics` annotation **validates**, **serializes**, and **flushes** all your metrics. During metrics validation, if no metrics are provided no exception will be raised.\n-\n-If metrics are provided, and any of the following criteria are not met, `ValidationException` exception will be raised:\n-\n-* Minimum of 1 dimension\n-* Maximum of 9 dimensions\n-\n-If you want to ensure that at least one metric is emitted, you can pass `raiseOnEmptyMetrics = true` to the **@Metrics** annotation:\n-\n-```java:title=Handler.java\n-@Metrics(raiseOnEmptyMetrics = true)\n-public Object handleRequest(Object input, Context context) {\n-...\n-}\n-```\n-\n-## Capturing cold start metric\n-\n-You can capture cold start metrics automatically with `@Metrics` via the `captureColdStart` variable.\n-\n-```java:title=Handler.java\n-@Metrics(captureColdStart = true)\n-public Object handleRequest(Object input, Context context) {\n-...\n-}\n-```\n-\n-If it's a cold start invocation, this feature will:\n-\n-* Create a separate EMF blob solely containing a metric named `ColdStart`\n-* Add `FunctionName` and `Service` dimensions\n-\n-This has the advantage of keeping cold start metric separate from your application metrics.\n\\ No newline at end of file"
  },
  {
    "sha": "3908440466cbb606b10d8e3d86ec6f5a91f5deb9",
    "filename": "docs/content/core/tracing.mdx",
    "status": "removed",
    "additions": 0,
    "deletions": 180,
    "changes": 180,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/core/tracing.mdx",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/core/tracing.mdx",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/core/tracing.mdx?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,180 +0,0 @@\n----\n-title: Tracing\n-description: Core utility\n----\n-\n-import Note from \"../../src/components/Note\"\n-\n-Powertools tracing is an opinionated thin wrapper for [AWS X-Ray Java SDK](https://github.com/aws/aws-xray-sdk-java/)\n-a provides functionality to reduce the overhead of performing common tracing tasks.\n-\n-![Tracer showcase](../media/tracer_utility_showcase.png)\n-\n- **Key Features**\n-\n- * Capture cold start as annotation, and responses as well as full exceptions as metadata\n- * Helper methods to improve the developer experience of creating new X-Ray subsegments.\n- * Better developer experience when developing with multiple threads.\n-\n-Initialization\n-Your AWS Lambda function must have permission to send traces to AWS X-Ray - Here is an example using AWS Serverless Application Model (SAM)\n-\n-```yaml:title=template.yaml\n-Resources:\n-    HelloWorldFunction:\n-        Type: AWS::Serverless::Function\n-        Properties:\n-        ...\n-        Runtime: java8\n-\n-        Tracing: Active\n-        Environment:\n-            Variables:\n-                POWERTOOLS_SERVICE_NAME: example\n-```\n-\n-The Powertools service name is used as the X-Ray namespace. This can be set using the environment variable\n-`POWERTOOLS_SERVICE_NAME`\n-\n-To enable Powertools tracing to your function add the @Tracing annotation to your handleRequest method or on\n-any method will capture the method as a separate subsegment automatically.\n-\n-```java:title=LambdaHandler.java\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    @Tracing\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-        businessLogic1();\n-\n-        businessLogic2();\n-    }\n-\n-    @Tracing\n-    public void businessLogic1(){\n-\n-    }\n-\n-    @Tracing\n-    public void businessLogic2(){\n-\n-    }\n-}\n-```\n-\n-If you want to customize segment name that appears in traces, use:\n-\n-```java:title=CustomSegmentName.java\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    @Tracing(segmentName=\"yourCustomName\")\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-    ...\n-    }\n-```\n-\n-By default, this annotation will automatically record method responses and exceptions. You can change the default behavior by setting\n-the environment variables `POWERTOOLS_TRACER_CAPTURE_RESPONSE` and `POWERTOOLS_TRACER_CAPTURE_ERROR` as needed. Optionally, you can override behavior by\n-different supported `captureMode` to record response, exception or both.\n-\n-<Note type=\"warning\">\n-  <strong>Returning sensitive information from your Lambda handler or functions, where Tracer is used?</strong>\n-  <br/><br/>\n-  You can disable annotation from capturing their responses and exception as tracing metadata with <strong><code>captureMode=DISABLED </code></strong>\n-   or globally by setting environment variables <strong><code>POWERTOOLS_TRACER_CAPTURE_RESPONSE</code></strong> and <strong><code>POWERTOOLS_TRACER_CAPTURE_ERROR</code></strong> to <strong><code>false</code></strong>.\n-</Note><br/>\n-\n-```java:title=HandlerWithoutCapturingResponseOrError.java\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    @Tracing(captureMode=CaptureMode.DISABLED)\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-    ...\n-    }\n-```\n-Globally:\n-\n-```yaml:title=template.yaml\n-Resources:\n-    HelloWorldFunction:\n-        Type: AWS::Serverless::Function\n-        Properties:\n-        ...\n-        Runtime: java8\n-\n-        Tracing: Active\n-        Environment:\n-            Variables:\n-                POWERTOOLS_TRACER_CAPTURE_RESPONSE: false # highlight-line\n-                POWERTOOLS_TRACER_CAPTURE_ERROR: false # highlight-line\n-```\n-\n-### Annotations\n-\n-Annotations are key-values indexed by AWS X-Ray on a per trace basis. You can use them to filter traces as well as to create [Trace Groups](https://aws.amazon.com/about-aws/whats-new/2018/11/aws-xray-adds-the-ability-to-group-traces/).\n-\n-You can add annotations using `putAnnotation()` method from TracingUtils and it will be correctly inject for the subsegment in concern.\n-\n-```java\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    @Tracing\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-        TracingUtils.putAnnotation(\"annotation\", \"value\");\n-    }\n-}\n-```\n-\n-### Metadata\n-\n-Metadata are non-indexed values that can add additional context for an operation.\n-\n-You can add metadata using `putMetadata()` method from TracingUtils and it will be correctly inject for the subsegment in concern.\n-\n-```java\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    @Tracing\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-        TracingUtils.putMetadata(\"content\", \"value\");\n-    }\n-}\n-```\n-\n-## Utilities\n-\n-Tracer modules comes with certain utility method when you don't want to use annotation for capturing a code block\n-under a subsegment, or you are doing multithreaded programming. Refer examples below.\n-\n-```java:title=InlineSubsegmentCapture.java\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-         TracingUtils.withSubsegment(\"loggingResponse\", subsegment -> {\n-            // Some business logic\n-         });\n-\n-         TracingUtils.withSubsegment(\"localNamespace\", \"loggingResponse\", subsegment -> {\n-            // Some business logic\n-         });\n-    }\n-}\n-```\n-\n-```java:title=ThreadedProgramming.java\n-public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-        // Extract existing trace data\n-        Entity traceEntity = AWSXRay.getTraceEntity();\n-\n-        Thread anotherThread = new Thread(() -> withEntitySubsegment(\"inlineLog\", traceEntity, subsegment -> {\n-            // Business logic in separate thread\n-        }));\n-    }\n-}\n-```\n-\n-## Instrumenting SDK clients and HTTP calls\n-\n-User should make sure to instrument the SDK clients explicitly based on the function dependency. Refer details on\n-[how to instrument SDK client with Xray](https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-awssdkclients.html) and [outgoing http calls](https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-httpclients.html)."
  },
  {
    "sha": "5b7bc5dbfe1996e815bc7c8b3ed19c213f02d860",
    "filename": "docs/content/dummy.md",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/dummy.md",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/dummy.md",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/dummy.md?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,7 +0,0 @@\n----\n-title: Dummy title\n-description: Dummy description\n----\n-\n-\n-dummy content\n\\ No newline at end of file"
  },
  {
    "sha": "02a49721bf0b1842544688395b8edc2e8fe1e87c",
    "filename": "docs/content/index.mdx",
    "status": "removed",
    "additions": 0,
    "deletions": 139,
    "changes": 139,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/index.mdx",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/index.mdx",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/index.mdx?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,139 +0,0 @@\n----\n-title: Homepage\n-description: AWS Lambda Powertools Java\n----\n-\n-import Note from \"../src/components/Note\"\n-\n-Powertools is a suite of utilities for AWS Lambda Functions that makes tracing with AWS X-Ray, structured logging and creating custom metrics asynchronously easier.\n-\n-<Note type=\"info\">\n-    <strong>Looking for a quick run through of the core utilities?</strong><br/><br/>\n-    Check out <a href=\"https://aws.amazon.com/blogs/opensource/simplifying-serverless-best-practices-with-aws-lambda-powertools-java/\">this detailed blog post</a> with a practical example.\n-</Note>\n-\n-## Install\n-\n-Powertools dependencies are available in Maven Central. You can use your favourite dependency management tool to install it\n-\n-* [maven](https://maven.apache.org/):\n-```xml\n-<dependencies>\n-    ...\n-    <dependency>\n-        <groupId>software.amazon.lambda</groupId>\n-        <artifactId>powertools-tracing</artifactId>\n-        <version>1.2.0</version>\n-    </dependency>\n-    <dependency>\n-        <groupId>software.amazon.lambda</groupId>\n-        <artifactId>powertools-logging</artifactId>\n-        <version>1.2.0</version>\n-    </dependency>\n-    <dependency>\n-        <groupId>software.amazon.lambda</groupId>\n-        <artifactId>powertools-metrics</artifactId>\n-        <version>1.2.0</version>\n-    </dependency>\n-    ...\n-</dependencies>\n-```\n-\n-And configure the aspectj-maven-plugin to compile-time weave (CTW) the aws-lambda-powertools-java aspects into your project:\n-\n-```xml\n-<build>\n-    <plugins>\n-        ...\n-        <plugin>\n-             <groupId>org.codehaus.mojo</groupId>\n-             <artifactId>aspectj-maven-plugin</artifactId>\n-             <version>1.11</version>\n-             <configuration>\n-                 <source>1.8</source>\n-                 <target>1.8</target>\n-                 <complianceLevel>1.8</complianceLevel>\n-                 <aspectLibraries>\n-                     <aspectLibrary>\n-                         <groupId>software.amazon.lambda</groupId>\n-                         <artifactId>powertools-tracing</artifactId>\n-                     </aspectLibrary>\n-                     <aspectLibrary>\n-                         <groupId>software.amazon.lambda</groupId>\n-                         <artifactId>powertools-logging</artifactId>\n-                     </aspectLibrary>\n-                     <aspectLibrary>\n-                         <groupId>software.amazon.lambda</groupId>\n-                         <artifactId>powertools-metrics</artifactId>\n-                     </aspectLibrary>\n-                 </aspectLibraries>\n-             </configuration>\n-             <executions>\n-                 <execution>\n-                     <goals>\n-                         <goal>compile</goal>\n-                     </goals>\n-                 </execution>\n-             </executions>\n-        </plugin>\n-        ...\n-    </plugins>\n-</build>\n-```\n-**Note:** If you are working with lambda function on runtime post java8, please refer [issue](https://github.com/awslabs/aws-lambda-powertools-java/issues/50) for workaround\n-\n-* [gradle](https://gradle.org):\n-```groovy\n-plugins{\n-    id 'java'\n-    id 'aspectj.AspectjGradlePlugin' version '0.0.6'\n-}\n-repositories {\n-    jcenter()\n-}\n-dependencies {\n-    implementation 'software.amazon.lambda:powertools-tracing:1.2.0'\n-    aspectpath 'software.amazon.lambda:powertools-tracing:1.2.0'\n-    implementation 'software.amazon.lambda:powertools-logging:1.2.0'\n-    aspectpath 'software.amazon.lambda:powertools-logging:1.2.0'\n-    implementation 'software.amazon.lambda:powertools-metrics:1.2.0'\n-    aspectpath 'software.amazon.lambda:powertools-metrics:1.2.0'\n-}\n-```\n-\n-**Note:**\n-\n-Please add `aspectjVersion = '1.9.6'` to the `gradle.properties` file. The aspectj plugin works at the moment with gradle 5.x only if\n-you are using `java 8` as runtime. Please refer to [open issue](https://github.com/awslabs/aws-lambda-powertools-java/issues/146) for more details.\n-\n-**Quick hello world examples using SAM CLI**\n-You can use [SAM](https://aws.amazon.com/serverless/sam/) to quickly setup a serverless project including AWS Lambda Powertools Java.\n-\n-```bash:title=hello_world.sh\n-sam init --location gh:aws-samples/cookiecutter-aws-sam-powertools-java\n-```\n-For more information about the project and available options refer to this [repository](https://github.com/aws-samples/cookiecutter-aws-sam-powertools-java/blob/main/README.md)\n-\n-## Environment variables\n-\n-**Environment variables** used across suite of utilities.\n-\n-Environment variable | Description | Utility\n-------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | -------------------------------------------------\n-**POWERTOOLS_SERVICE_NAME** | Sets service name used for tracing namespace, metrics dimension and structured logging | All\n-**POWERTOOLS_METRICS_NAMESPACE** | Sets namespace used for metrics | [Metrics](./core/metrics)\n-**POWERTOOLS_LOGGER_SAMPLE_RATE** | Debug log sampling | [Logging](./core/logging)\n-**POWERTOOLS_LOG_LEVEL** | Sets logging level | [Logging](./core/logging)\n-**POWERTOOLS_TRACER_CAPTURE_RESPONSE** | Enables/Disables tracing mode to capture method response | [Tracing](./core/tracing)\n-**POWERTOOLS_TRACER_CAPTURE_ERROR** | Enables/Disables tracing mode to capture method error | [Tracing](./core/tracing)\n-\n-## Tenets\n-\n-* **AWS Lambda only** – We optimise for AWS Lambda function environments and supported runtimes only. Utilities might work with web frameworks and non-Lambda environments, though they are not officially supported.\n-* **Eases the adoption of best practices** – The main priority of the utilities is to facilitate best practices adoption, as defined in the AWS Well-Architected Serverless Lens; all other functionality is optional.\n-* **Keep it lean** – Additional dependencies are carefully considered for security and ease of maintenance, and prevent negatively impacting startup time.\n-* **We strive for backwards compatibility** – New features and changes should keep backwards compatibility. If a breaking change cannot be avoided, the deprecation and migration process should be clearly defined.\n-* **We work backwards from the community** – We aim to strike a balance of what would work best for 80% of customers. Emerging practices are considered and discussed via Requests for Comment (RFCs)\n-* **Idiomatic** – Utilities follow programming language idioms and language-specific best practices.\n-\n-_`*` Core utilities are Tracer, Logger and Metrics. Optional utilities may vary across languages._\n\\ No newline at end of file"
  },
  {
    "sha": "8d5454a2a039d32f8e6e6498c7c4338b5e22814a",
    "filename": "docs/content/utilities/batch.mdx",
    "status": "removed",
    "additions": 0,
    "deletions": 251,
    "changes": 251,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/utilities/batch.mdx",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/utilities/batch.mdx",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/utilities/batch.mdx?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,251 +0,0 @@\n----\n-title: SQS Batch Processing\n-description: Utility\n----\n-\n-\n-import Note from \"../../src/components/Note\"\n-\n-The SQS batch processing utility provides a way to handle partial failures when processing batches of messages from SQS.\n-\n-**Key Features**\n-\n-* Prevent successfully processed messages from being returned to SQS\n-* A simple interface for individually processing messages from a batch\n-\n-**Background**\n-\n-When using SQS as a Lambda event source mapping, Lambda functions can be triggered with a batch of messages from SQS.\n-\n-If your function fails to process any message from the batch, the entire batch returns to your SQS queue, and your Lambda function will be triggered with the same batch again.\n-\n-With this utility, messages within a batch will be handled individually - only messages that were not successfully processed\n-are returned to the queue.\n-\n-<Note type=\"warning\">\n-  While this utility lowers the chance of processing messages more than once, it is not guaranteed. We recommend implementing processing logic in an idempotent manner wherever possible.\n-  <br/><br/>\n-  More details on how Lambda works with SQS can be found in the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html\">AWS documentation</a>\n-</Note>\n-\n-## Install\n-\n-To install this utility, add the following dependency to your project.\n-\n-```xml\n-<dependency>\n-    <groupId>software.amazon.lambda</groupId>\n-    <artifactId>powertools-sqs</artifactId>\n-    <version>1.2.0</version>\n-</dependency>\n-```\n-\n-And configure the aspectj-maven-plugin to compile-time weave (CTW) the\n-aws-lambda-powertools-java aspects into your project. You may already have this\n-plugin in your pom. In that case add the dependency to the `aspectLibraries`\n-section.\n-\n-```xml\n-<build>\n-    <plugins>\n-        ...\n-        <plugin>\n-             <groupId>org.codehaus.mojo</groupId>\n-             <artifactId>aspectj-maven-plugin</artifactId>\n-             <version>1.11</version>\n-             <configuration>\n-                 <source>1.8</source>\n-                 <target>1.8</target>\n-                 <complianceLevel>1.8</complianceLevel>\n-                 <aspectLibraries>\n-                     <!--    highlight-start    -->\n-                     <aspectLibrary>\n-                         <groupId>software.amazon.lambda</groupId>\n-                         <artifactId>powertools-sqs</artifactId>\n-                     </aspectLibrary>\n-                     <!--    highlight-end    -->\n-                 </aspectLibraries>\n-             </configuration>\n-             <executions>\n-                 <execution>\n-                     <goals>\n-                         <goal>compile</goal>\n-                     </goals>\n-                 </execution>\n-             </executions>\n-        </plugin>\n-        ...\n-    </plugins>\n-</build>\n-```\n-\n-**IAM Permissions**\n-\n-This utility requires additional permissions to work as expected. Lambda functions using this utility require the `sqs:GetQueueUrl` and `sqs:DeleteMessageBatch` permission.\n-\n-## Processing messages from SQS\n-\n-You can use either **[SqsBatch annotation](#sqsbatch-annotation)**, or **[SqsUtils Utility API](#sqsutils-utility-api)** as a fluent API.\n-\n-Both have nearly the same behaviour when it comes to processing messages from the batch:\n-\n-* **Entire batch has been successfully processed**, where your Lambda handler returned successfully, we will let SQS delete the batch to optimize your cost\n-* **Entire Batch has been partially processed successfully**, where exceptions were raised within your `SqsMessageHandler` interface implementation, we will:\n-    - **1)** Delete successfully processed messages from the queue by directly calling `sqs:DeleteMessageBatch`\n-    - **2)** Raise `SQSBatchProcessingException` to ensure failed messages return to your SQS queue\n-\n-The only difference is that **SqsUtils Utility API** will give you access to return from the processed messages if you need. Exception `SQSBatchProcessingException` thrown from the\n-utility will have access to both successful and failed messaged along with failure exceptions.\n-\n-## Functional Interface SqsMessageHandler\n-\n-Both [annotation](#sqsbatch-annotation) and [SqsUtils Utility API](#sqsutils-utility-api) requires an implementation of functional interface `SqsMessageHandler`.\n-\n-This implementation is responsible for processing each individual message from the batch, and to raise an exception if unable to process any of the messages sent.\n-\n-**Any non-exception/successful return from your record handler function** will instruct utility to queue up each individual message for deletion.\n-\n-### SqsBatch annotation\n-\n-When using this annotation, you need provide a class implementation of `SqsMessageHandler` that will process individual messages from the batch - It should raise an exception if it is unable to process the record.\n-\n-All records in the batch will be passed to this handler for processing, even if exceptions are thrown - Here's the behaviour after completing the batch:\n-\n-* **Any successfully processed messages**, we will delete them from the queue via `sqs:DeleteMessageBatch`\n-* **Any unprocessed messages detected**, we will raise `SQSBatchProcessingException` to ensure failed messages return to your SQS queue\n-\n-<Note type=\"warning\">\n-  You will not have accessed to the <strong>processed messages</strong> within the Lambda Handler - all processing logic will and should be performed by the implemented <code>SqsMessageHandler#process()</code> function.\n-</Note><br/>\n-\n-```java:title=App.java\n-public class AppSqsEvent implements RequestHandler<SQSEvent, String> {\n-    @Override\n-    @SqsBatch(SampleMessageHandler.class) // highlight-line\n-    public String handleRequest(SQSEvent input, Context context) {\n-        return \"{\\\"statusCode\\\": 200}\";\n-    }\n-\n-    public class SampleMessageHandler implements SqsMessageHandler<Object> {\n-\n-        @Override\n-        public String process(SQSMessage message) {\n-            // This will be called for each individual message from a batch\n-            // It should raise an exception if the message was not processed successfully\n-            String returnVal = doSomething(message.getBody());\n-            return returnVal;\n-        }\n-    }\n-}\n-```\n-\n-### SqsUtils Utility API\n-\n-If you require access to the result of processed messages, you can use this utility.\n-\n-The result from calling <code>SqsUtils#batchProcessor()</code> on the context manager will be a list of all the return values from your <code>SqsMessageHandler#process()</code>  function.\n-\n-```java:title=App.java\n-public class AppSqsEvent implements RequestHandler<SQSEvent, List<String>> {\n-    @Override\n-    public List<String> handleRequest(SQSEvent input, Context context) {\n-        List<String> returnValues = SqsUtils.batchProcessor(input, SampleMessageHandler.class); // highlight-line\n-\n-        return returnValues;\n-    }\n-\n-    public class SampleMessageHandler implements SqsMessageHandler<String> {\n-\n-        @Override\n-        public String process(SQSMessage message) {\n-            // This will be called for each individual message from a batch\n-            // It should raise an exception if the message was not processed successfully\n-            String returnVal = doSomething(message.getBody());\n-            return returnVal;\n-        }\n-    }\n-}\n-```\n-\n-You can also use the utility in a more functional way` by providing inline implementation of functional interface <code>SqsMessageHandler#process()</code>\n-\n-```java:title=App.java\n-public class AppSqsEvent implements RequestHandler<SQSEvent, List<String>> {\n-\n-    @Override\n-    public List<String> handleRequest(SQSEvent input, Context context) {\n-        // highlight-start\n-        List<String> returnValues = SqsUtils.batchProcessor(input, (message) -> {\n-            // This will be called for each individual message from a batch\n-            // It should raise an exception if the message was not processed successfully\n-            String returnVal = doSomething(message.getBody());\n-            return returnVal;\n-        });\n-        // highlight-end\n-\n-        return returnValues;\n-    }\n-}\n-```\n-\n-## Passing custom SqsClient\n-\n-If you need to pass custom SqsClient such as region to the SDK, you can pass your own `SqsClient` to be used by utility either for\n-**[SqsBatch annotation](#sqsbatch-annotation)**, or **[SqsUtils Utility API](#sqsutils-utility-api)**.\n-\n-```java:title=App.java\n-\n-public class AppSqsEvent implements RequestHandler<SQSEvent, List<String>> {\n-    // highlight-start\n-    static {\n-        SqsUtils.overrideSqsClient(SqsClient.builder()\n-                .build());\n-    }\n-    // highlight-end\n-\n-    @Override\n-    public List<String> handleRequest(SQSEvent input, Context context) {\n-        List<String> returnValues = SqsUtils.batchProcessor(input, SampleMessageHandler.class);\n-\n-        return returnValues;\n-    }\n-\n-    public class SampleMessageHandler implements SqsMessageHandler<String> {\n-\n-        @Override\n-        public String process(SQSMessage message) {\n-            // This will be called for each individual message from a batch\n-            // It should raise an exception if the message was not processed successfully\n-            String returnVal = doSomething(message.getBody());\n-            return returnVal;\n-        }\n-    }\n-}\n-\n-```\n-\n-## Suppressing exceptions\n-\n-If you want to disable the default behavior where `SQSBatchProcessingException` is raised if there are any exception, you can pass the `suppressException` boolean argument.\n-\n-**Within SqsBatch annotation**\n-\n-```java:title=App.java\n-...\n-    @Override\n-    @SqsBatch(value = SampleMessageHandler.class, suppressException = true) // highlight-line\n-    public String handleRequest(SQSEvent input, Context context) {\n-        return \"{\\\"statusCode\\\": 200}\";\n-    }\n-```\n-\n-**Within SqsUtils Utility API**\n-\n-```java:title=App.java\n-    @Override\n-    public List<String> handleRequest(SQSEvent input, Context context) {\n-        List<String> returnValues = SqsUtils.batchProcessor(input, true, SampleMessageHandler.class); // highlight-line\n-\n-        return returnValues;\n-    }\n-```"
  },
  {
    "sha": "d28e1fadd04f78ba8c3b8ec0696d15ea1bcb69df",
    "filename": "docs/content/utilities/parameters.mdx",
    "status": "removed",
    "additions": 0,
    "deletions": 369,
    "changes": 369,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/utilities/parameters.mdx",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/utilities/parameters.mdx",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/utilities/parameters.mdx?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,369 +0,0 @@\n----\n-title: Parameters\n-description: Utility\n----\n-\n-\n-\n-The parameters utility provides a way to retrieve parameter values from\n-[AWS Systems Manager Parameter Store](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html) or\n-[AWS Secrets Manager](https://aws.amazon.com/secrets-manager/). It also provides a base class to create your parameter provider implementation.\n-\n-**Key features**\n-\n-* Retrieve one or multiple parameters from the underlying provider\n-* Cache parameter values for a given amount of time (defaults to 5 seconds)\n-* Transform parameter values from JSON or base 64 encoded strings\n-\n-## Install\n-\n-To install this utility, add the following dependency to your project.\n-\n-```xml\n-<dependency>\n-    <groupId>software.amazon.lambda</groupId>\n-    <artifactId>powertools-parameters</artifactId>\n-    <version>1.2.0</version>\n-</dependency>\n-```\n-\n-**IAM Permissions**\n-\n-This utility requires additional permissions to work as expected. See the table below:\n-\n-Provider | Function/Method | IAM Permission\n-------------------------------------------------- | ------------------------------------------------- | ---------------------------------------------------------------------------------\n-SSM Parameter Store | `SSMProvider.get(String)` `SSMProvider.get(String, Class)`  | `ssm:GetParameter`\n-SSM Parameter Store | `SSMProvider.getMultiple(String)` | `ssm:GetParametersByPath`\n-Secrets Manager | `SecretsProvider.get(String)` `SecretsProvider.get(String, Class)` | `secretsmanager:GetSecretValue`\n-\n-## SSM Parameter Store\n-\n-You can retrieve a single parameter using SSMProvider.get() and pass the key of the parameter.\n-For multiple parameters, you can use SSMProvider.getMultiple() and pass the path to retrieve them all.\n-\n-```java:title=AppWithSSM.java\n-\n-public class AppWithSSM implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-    // Get an instance of the SSM Provider\n-    SSMProvider ssmProvider = ParamManager.getSsmProvider();\n-\n-    // Retrieve a single parameter\n-    String value = ssmProvider.get(\"/my/parameter\");\n-\n-    // Retrieve multiple parameters from a path prefix\n-    // This returns a Map with the parameter name as key\n-    Map<String, String> values = ssmProvider.getMultiple(\"/my/path/prefix\");\n-\n-}\n-```\n-\n-Alternatively, you can retrieve an instance of a provider and configure its underlying SDK client,\n-in order to get data from other regions or use specific credentials:\n-\n-```java\n-  SsmClient client = SsmClient.builder().region(Region.EU_CENTRAL_1).build();\n-  SSMProvider ssmProvider = ParamManager.getSsmProvider(client);\n-```\n-### Additional arguments\n-\n-The AWS Systems Manager Parameter Store provider supports two additional arguments for the `get()` and `getMultiple()` methods:\n-\n-| Option     | Default | Description |\n-|---------------|---------|-------------|\n-| **withDecryption()**   | `False` | Will automatically decrypt the parameter. |\n-| **recursive()** | `False`  | For `getMultiple()` only, will fetch all parameter values recursively based on a path prefix. |\n-\n-**Example:**\n-\n-```java:title=AppWithSSM.java\n-\n-public class AppWithSSM implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-    // Get an instance of the SSM Provider\n-    SSMProvider ssmProvider = ParamManager.getSsmProvider();\n-\n-    // Retrieve a single parameter and decrypt it\n-    String value = ssmProvider.withDecryption().get(\"/my/parameter\");\n-\n-    // Retrieve multiple parameters recursively from a path prefix\n-    Map<String, String> values = ssmProvider.recursive().getMultiple(\"/my/path/prefix\");\n-\n-}\n-```\n-\n-## Secrets Manager\n-\n-```java:title=AppWithSecrets.java\n-\n-public class AppWithSecrets implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-    // Get an instance of the Secrets Provider\n-    SecretsProvider secretsProvider = ParamManager.getSecretsProvider();\n-\n-    // Retrieve a single secret\n-    String value = secretsProvider.get(\"/my/secret\");\n-\n-}\n-```\n-\n-Alternatively, you can retrieve an instance of a provider and configure its underlying SDK client,\n-in order to get data from other regions or use specific credentials:\n-\n-```java\n-  SecretsManagerClient client = SecretsManagerClient.builder().region(Region.EU_CENTRAL_1).build();\n-  SecretsProvider secretsProvider = ParamManager.getSecretsProvider(client);\n-```\n-\n-## Advanced configuration\n-\n-### Caching\n-\n-By default, all parameters and their corresponding values are cached for 5 seconds.\n-\n-You can customize this default value using:\n-```java\n-  provider.defaultMaxAge(int, ChronoUnit)\n-```\n-\n-You can also customize this value for each parameter with:\n-```java\n-  provider.withMaxAge(int, ChronoUnit).get()\n-```\n-\n-### Transform values\n-\n-Parameter values can be transformed using ```withTransformation(transformerClass)```.\n-Base64 and JSON transformations are provided:\n-\n-```java\n-   String value = provider\n-                    .withTransformation(Transformer.base64)\n-                    .get(\"/my/parameter/b64\");\n-```\n-\n-For more complex transformation, you need to specify how to deserialize:\n-\n-```java\n-   MyObj object = provider\n-                    .withTransformation(Transformer.json)\n-                    .get(\"/my/parameter/json\", MyObj.class);\n-```\n-\n-**Note**: ```SSMProvider.getMultiple()``` does not support transformation and will return simple Strings.\n-\n-**Write your own Transformer**\n-\n-You can write your own transformer, by implementing the ```Transformer``` interface and the ```applyTransformation()``` method.\n-For example, if you wish to deserialize XML into an object:\n-\n-```java:title=XmlTransformer.java\n-public class XmlTransformer<T> implements Transformer<T> {\n-\n-    private final XmlMapper mapper = new XmlMapper();\n-\n-    @Override\n-    public T applyTransformation(String value, Class<T> targetClass) throws TransformationException {\n-        try {\n-            return mapper.readValue(value, targetClass);\n-        } catch (IOException e) {\n-            throw new TransformationException(e);\n-        }\n-    }\n-}\n-```\n-\n-Then use it like this:\n-\n-```java\n-MyObj object = provider\n-                    .withTransformation(XmlTransformer.class)\n-                    .get(\"/my/parameter/xml\", MyObj.class);\n-```\n-\n-### Fluent API\n-\n-To simplify the use of the library, you can chain all method calls before a get.\n-\n-**Example:**\n-\n-```java\n-ssmProvider\n-  .defaultMaxAge(10, SECONDS)     // will set 10 seconds as the default cache TTL\n-  .withMaxAge(1, MINUTES)         // will set the cache TTL for this value at 1 minute\n-  .withTransformation(json)       // json is a static import from Transformer.json\n-  .withDecryption()               // enable decryption of the parameter value\n-  .get(\"/my/param\", MyObj.class); // finally get the value\n-```\n-\n-## Create your own provider\n-You can create your own custom parameter store provider by inheriting the ```BaseProvider``` class and implementing the\n-```String getValue(String key)``` method to retrieve data from your underlying store.\n-\n-All transformation and caching logic is handled by the get() methods in the base class.\n-\n-Here is an example implementation using S3 as a custom parameter store:\n-\n-```java:title=S3Provider.java\n-public class S3Provider extends BaseProvider {\n-\n-    private final S3Client client;\n-    private String bucket;\n-\n-    S3Provider(CacheManager cacheManager) {\n-        this(cacheManager, S3Client.create());\n-    }\n-\n-    S3Provider(CacheManager cacheManager, S3Client client) {\n-        super(cacheManager);\n-        this.client = client;\n-    }\n-\n-    public S3Provider withBucket(String bucket) {\n-        this.bucket = bucket;\n-        return this;\n-    }\n-\n-    @Override\n-    protected String getValue(String key) {\n-        if (bucket == null) {\n-            throw new IllegalStateException(\"A bucket must be specified, using withBucket() method\");\n-        }\n-\n-        GetObjectRequest request = GetObjectRequest.builder().bucket(bucket).key(key).build();\n-        ResponseBytes<GetObjectResponse> response = client.getObject(request, ResponseTransformer.toBytes());\n-        return response.asUtf8String();\n-    }\n-\n-    @Override\n-    protected Map<String, String> getMultipleValues(String path) {\n-        if (bucket == null) {\n-            throw new IllegalStateException(\"A bucket must be specified, using withBucket() method\");\n-        }\n-\n-        ListObjectsV2Request listRequest = ListObjectsV2Request.builder().bucket(bucket).prefix(path).build();\n-        List<S3Object> s3Objects = client.listObjectsV2(listRequest).contents();\n-\n-        Map<String, String> result = new HashMap<>();\n-        s3Objects.forEach(s3Object -> {\n-            result.put(s3Object.key(), getValue(s3Object.key()));\n-        });\n-\n-        return result;\n-    }\n-\n-    @Override\n-    protected void resetToDefaults() {\n-        super.resetToDefaults();\n-        bucket = null;\n-    }\n-\n-}\n-```\n-And then use it like this :\n-\n-```java\n-S3Provider provider = new S3Provider(ParamManager.getCacheManager());\n-provider.setTransformationManager(ParamManager.getTransformationManager()); // optional, needed for transformations\n-String value = provider.withBucket(\"myBucket\").get(\"myKey\");\n-```\n-\n-## Annotation\n-You can make use of the annotation ```@Param``` to inject a parameter value in a variable.\n-\n-```java\n-@Param(key = \"/my/parameter\")\n-private String value;\n-```\n-By default it will use ```SSMProvider``` to retrieve the value from AWS System Manager Parameter Store.\n-You could specify a different provider as long as it extends ```BaseProvider``` and/or a ```Transformer```.\n-For example:\n-\n-```java\n-@Param(key = \"/my/parameter/json\", provider = SecretsProvider.class, transformer = JsonTransformer.class)\n-private ObjectToDeserialize value;\n-```\n-\n-In this case ```SecretsProvider``` will be used to retrieve a raw value that is then trasformed into the target Object by using ```JsonTransformer```.\n-To show the convenience of the annotation compare the following two code snippets.\n-\n-```java:title=AppWithoutAnnotation.java\n-\n-public class AppWithoutAnnotation implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    // Get an instance of the SSM Provider\n-    SSMProvider ssmProvider = ParamManager.getSsmProvider();\n-\n-    // Retrieve a single parameter\n-    ObjectToDeserialize value = ssmProvider\n-                                    .withTransformation(Transformer.json)\n-                                    .get(\"/my/parameter/json\");\n-\n-}\n-```\n-And with the usage of ```@Param```\n-\n-```java:title=AppWithAnnotation.java\n-public class AppWithAnnotation implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    @Param(key = \"/my/parameter/json\" transformer = JsonTransformer.class)\n-    ObjectToDeserialize value;\n-\n-}\n-```\n-\n-### Install\n-\n-If you want to use the ```@Param``` annotation in your project add configuration to compile-time weave (CTW) the powertools-parameters aspects into your project.\n-\n-* [maven](https://maven.apache.org/):\n-```xml\n-<build>\n-    <plugins>\n-        ...\n-        <plugin>\n-             <groupId>org.codehaus.mojo</groupId>\n-             <artifactId>aspectj-maven-plugin</artifactId>\n-             <version>1.11</version>\n-             <configuration>\n-                 ...\n-                 <aspectLibraries>\n-                     ...\n-                     <aspectLibrary>\n-                         <groupId>software.amazon.lambda</groupId>\n-                         <artifactId>powertools-parameters</artifactId>\n-                     </aspectLibrary>\n-                 </aspectLibraries>\n-             </configuration>\n-             <executions>\n-                 <execution>\n-                     <goals>\n-                         <goal>compile</goal>\n-                     </goals>\n-                 </execution>\n-             </executions>\n-        </plugin>\n-        ...\n-    </plugins>\n-</build>\n-```\n-**Note:** If you are working with lambda function on runtime post java8, please refer [issue](https://github.com/awslabs/aws-lambda-powertools-java/issues/50) for workaround\n-\n-* [gradle](https://gradle.org):\n-```groovy\n-plugins{\n-    id 'java'\n-    id 'aspectj.AspectjGradlePlugin' version '0.0.6'\n-}\n-repositories {\n-    jcenter()\n-}\n-dependencies {\n-    ...\n-    implementation 'software.amazon.lambda:powertools-parameters:1.2.0'\n-    aspectpath 'software.amazon.lambda:powertools-parameters:1.2.0'\n-}\n-```\n-\n-**Note:**\n-\n-Please add `aspectjVersion = '1.9.6'` to the `gradle.properties` file. The aspectj plugin works at the moment with gradle 5.x only if\n-you are using `java 8` as runtime. Please refer to [open issue](https://github.com/awslabs/aws-lambda-powertools-java/issues/146) for more details.\n\\ No newline at end of file"
  },
  {
    "sha": "e94f44943766303e6144f9d516143e42931d4d11",
    "filename": "docs/content/utilities/sqs_large_message_handling.mdx",
    "status": "removed",
    "additions": 0,
    "deletions": 153,
    "changes": 153,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/utilities/sqs_large_message_handling.mdx",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/utilities/sqs_large_message_handling.mdx",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/utilities/sqs_large_message_handling.mdx?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,153 +0,0 @@\n----\n-title: SQS Large Message Handling\n-description: Utility\n----\n-\n-The large message handling utility handles SQS messages which have had their payloads\n-offloaded to S3 due to them being larger than the SQS maximum.\n-\n-The utility automatically retrieves messages which have been offloaded to S3 using the\n-[amazon-sqs-java-extended-client-lib](https://github.com/awslabs/amazon-sqs-java-extended-client-lib)\n-client library. Once the message payloads have been processed successful the\n-utility can delete the message payloads from S3.\n-\n-This utility is compatible with versions *1.1.0+* of amazon-sqs-java-extended-client-lib.\n-\n-```xml\n-<dependency>\n-    <groupId>com.amazonaws</groupId>\n-    <artifactId>amazon-sqs-java-extended-client-lib</artifactId>\n-    <version>1.1.0</version>\n-</dependency>\n-```\n-\n-## Install\n-\n-To install this utility, add the following dependency to your project.\n-\n-```xml\n-<dependency>\n-    <groupId>software.amazon.lambda</groupId>\n-    <artifactId>powertools-sqs</artifactId>\n-    <version>1.2.0</version>\n-</dependency>\n-```\n-\n-And configure the aspectj-maven-plugin to compile-time weave (CTW) the\n-aws-lambda-powertools-java aspects into your project. You may already have this\n-plugin in your pom. In that case add the dependency to the `aspectLibraries`\n-section.\n-\n-```xml\n-<build>\n-    <plugins>\n-        ...\n-        <plugin>\n-             <groupId>org.codehaus.mojo</groupId>\n-             <artifactId>aspectj-maven-plugin</artifactId>\n-             <version>1.11</version>\n-             <configuration>\n-                 <source>1.8</source>\n-                 <target>1.8</target>\n-                 <complianceLevel>1.8</complianceLevel>\n-                 <aspectLibraries>\n-                    <!--    highlight-start    -->\n-                     <aspectLibrary>\n-                         <groupId>software.amazon.lambda</groupId>\n-                         <artifactId>powertools-sqs</artifactId>\n-                     </aspectLibrary>\n-                     <!--    highlight-end    -->\n-                 </aspectLibraries>\n-             </configuration>\n-             <executions>\n-                 <execution>\n-                     <goals>\n-                         <goal>compile</goal>\n-                     </goals>\n-                 </execution>\n-             </executions>\n-        </plugin>\n-        ...\n-    </plugins>\n-</build>\n-```\n-\n-The annotation `@SqsLargeMessage` should be used with the handleRequest method of a class\n-which implements `com.amazonaws.services.lambda.runtime.RequestHandler` with\n-`com.amazonaws.services.lambda.runtime.events.SQSEvent` as the first parameter.\n-\n-```java\n-public class SqsMessageHandler implements RequestHandler<SQSEvent, String> {\n-\n-    @Override\n-    @SqsLargeMessage\n-    public String handleRequest(SQSEvent sqsEvent, Context context) {\n-    // process messages\n-\n-    return \"ok\";\n-    }\n-}\n-```\n-\n-`@SqsLargeMessage` creates a default S3 Client `AmazonS3 amazonS3 = AmazonS3ClientBuilder.defaultClient()`.\n-When the Lambda function is invoked with an event from SQS, each record received\n-in the SQSEvent will be checked to see if it's body contains a payload which has\n-been offloaded to S3. If it does then `getObject(bucket, key)` will be called,\n-and the payload retrieved. If there is an error during this process then the\n-function will fail with a `FailedProcessingLargePayloadException` exception.\n-\n-If the request handler method returns without error then each payload will be\n-deleted from S3 using `deleteObject(bucket, key)`\n-\n-To disable deletion of payloads setting the following annotation parameter:\n-\n-```java\n-@SqsLargeMessage(deletePayloads=false)\n-public class SqsMessageHandler implements RequestHandler<SQSEvent, String> {\n-\n-}\n-```\n-\n-## Utility\n-\n-If you want to avoid using annotation and have control over error that can happen during payload enrichment.\n-\n-`SqsUtils.enrichedMessageFromS3()` provides you access with list of `SQSMessage` object enriched from S3 payload.\n-Original `SQSEvent` object is never mutated. You can also control if the S3 payload should be deleted after successful\n-processing. You can enrich messages from S3 with below code:\n-\n-```java\n-public class SqsMessageHandler implements RequestHandler<SQSEvent, String> {\n-\n-    @Override\n-    public String handleRequest(SQSEvent sqsEvent, Context context) {\n-\n-         Map<String, String> sqsMessage = SqsUtils.enrichedMessageFromS3(sqsEvent, sqsMessages -> {\n-            // Some business logic\n-            Map<String, String> someBusinessLogic = new HashMap<>();\n-            someBusinessLogic.put(\"Message\", sqsMessages.get(0).getBody());\n-            return someBusinessLogic;\n-        });\n-\n-         // Do not delete payload after processing.\n-         Map<String, String> sqsMessage = SqsUtils.enrichedMessageFromS3(sqsEvent, false, sqsMessages -> {\n-            // Some business logic\n-            Map<String, String> someBusinessLogic = new HashMap<>();\n-            someBusinessLogic.put(\"Message\", sqsMessages.get(0).getBody());\n-            return someBusinessLogic;\n-        });\n-\n-         // Better control over exception during enrichment\n-         try {\n-               // Do not delete payload after processing.\n-            SqsUtils.enrichedMessageFromS3(sqsEvent, false, sqsMessages -> {\n-                // Some business logic\n-            });\n-         } catch (FailedProcessingLargePayloadException e) {\n-             // handle any exception.\n-         }\n-\n-        return \"ok\";\n-    }\n-}\n-```\n\\ No newline at end of file"
  },
  {
    "sha": "f295f00572ee2dd2fd278579d109a59d75833fc5",
    "filename": "docs/content/utilities/validation.mdx",
    "status": "removed",
    "additions": 0,
    "deletions": 332,
    "changes": 332,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/utilities/validation.mdx",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/content/utilities/validation.mdx",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/content/utilities/validation.mdx?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,332 +0,0 @@\n----\n-title: Validation\n-description: Utility\n----\n-\n-\n-import Note from \"../../src/components/Note\"\n-\n-This utility provides JSON Schema validation for payloads held within events and response used in AWS Lambda.\n-\n-**Key features**\n-* Validate incoming events and responses\n-* Built-in validation for most common events (API Gateway, SNS, SQS, ...)\n-* JMESPath support validate only a sub part of the event\n-\n-## Install\n-\n-To install this utility, add the following dependency to your project.\n-\n-```xml\n-<dependency>\n-    <groupId>software.amazon.lambda</groupId>\n-    <artifactId>powertools-validation</artifactId>\n-    <version>1.2.0</version>\n-</dependency>\n-```\n-\n-And configure the aspectj-maven-plugin to compile-time weave (CTW) the\n-aws-lambda-powertools-java aspects into your project. You may already have this\n-plugin in your pom. In that case add the dependency to the `aspectLibraries`\n-section.\n-\n-```xml\n-<build>\n-    <plugins>\n-        ...\n-        <plugin>\n-             <groupId>org.codehaus.mojo</groupId>\n-             <artifactId>aspectj-maven-plugin</artifactId>\n-             <version>1.11</version>\n-             <configuration>\n-                 <source>1.8</source>\n-                 <target>1.8</target>\n-                 <complianceLevel>1.8</complianceLevel>\n-                 <aspectLibraries>\n-                    <!--    highlight-start    -->\n-                     <aspectLibrary>\n-                         <groupId>software.amazon.lambda</groupId>\n-                         <artifactId>powertools-validation</artifactId>\n-                     </aspectLibrary>\n-                     <!--    highlight-end    -->\n-                 </aspectLibraries>\n-             </configuration>\n-             <executions>\n-                 <execution>\n-                     <goals>\n-                         <goal>compile</goal>\n-                     </goals>\n-                 </execution>\n-             </executions>\n-        </plugin>\n-        ...\n-    </plugins>\n-</build>\n-```\n-\n-## Validating events\n-\n-You can validate inbound and outbound events using `@Validation` annotation.\n-\n-You can also use the `Validator#validate()` methods, if you want more control over the validation process such as handling a validation error.\n-\n-We support JSON schema version 4, 6, 7 and 201909 (from [jmespath-jackson library](https://github.com/burtcorp/jmespath-java)).\n-\n-### @Validation annotation\n-\n-`@Validation` annotation is used to validate either inbound events or functions' response.\n-\n-It will fail fast with `ValidationException` if an event or response doesn't conform with given JSON Schema.\n-\n-While it is easier to specify a json schema file in the classpath (using the notation `\"classpath:/path/to/schema.json\"`), you can also provide a JSON String containing the schema.\n-\n-```java\n-public class MyFunctionHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    @Override\n-    @Validation(inboundSchema = \"classpath:/schema_in.json\", outboundSchema = \"classpath:/schema_out.json\")\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-        // ...\n-        return something;\n-    }\n-}\n-```\n-\n-**NOTE**: It's not a requirement to validate both inbound and outbound schemas - You can either use one, or both.\n-\n-### Validate function\n-\n-Validate standalone function is used within the Lambda handler, or any other methods that perform data validation.\n-\n-You can also gracefully handle schema validation errors by catching `ValidationException`.\n-\n-```java\n-import static software.amazon.lambda.powertools.validation.ValidationUtils.*;\n-\n-public class MyFunctionHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n-\n-    @Override\n-    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n-        try {\n-            validate(input, \"classpath:/schema.json\");\n-        } catch (ValidationException ex) {\n-            // do something before throwing it\n-            throw ex;\n-        }\n-\n-        // ...\n-        return something;\n-    }\n-}\n-```\n-**NOTE**: Schemas are stored in memory for reuse, to avoid loading them from file each time.\n-\n-## Built-in events and responses\n-\n-For the following events and responses, the Validator will automatically perform validation on the content.\n-\n-** Events **\n-\n- Type of event | Class | Path to content |\n- ------------------------------------------------- | ------------------------------------------------- | -------------------------------------------------\n- API Gateway REST |  APIGatewayProxyRequestEvent |  `body`\n- API Gateway HTTP |  APIGatewayV2HTTPEvent | `body`\n- Application Load Balancer |  ApplicationLoadBalancerRequestEvent | `body`\n- Cloudformation Custom Resource |  CloudFormationCustomResourceEvent | `resourceProperties`\n- CloudWatch Logs |  CloudWatchLogsEvent | `awslogs.powertools_base64_gzip(data)`\n- EventBridge / Cloudwatch |  ScheduledEvent | `detail`\n- Kafka |  KafkaEvent | `records[*][*].value`\n- Kinesis |  KinesisEvent | `Records[*].kinesis.powertools_base64(data)`\n- Kinesis Firehose |  KinesisFirehoseEvent | `Records[*].powertools_base64(data)`\n- Kinesis Analytics from Firehose |  KinesisAnalyticsFirehoseInputPreprocessingEvent | `Records[*].powertools_base64(data)`\n- Kinesis Analytics from Streams |  KinesisAnalyticsStreamsInputPreprocessingEvent | `Records[*].powertools_base64(data)`\n- SNS |  SNSEvent | `Records[*].Sns.Message`\n- SQS |  SQSEvent | `Records[*].body`\n-\n-** Responses **\n-\n- Type of response | Class | Path to content (envelope)\n- ------------------------------------------------- | ------------------------------------------------- | -------------------------------------------------\n- API Gateway REST | APIGatewayProxyResponseEvent} | `body`\n- API Gateway HTTP | APIGatewayV2HTTPResponse} | `body`\n- API Gateway WebSocket | APIGatewayV2WebSocketResponse} | `body`\n- Load Balancer | ApplicationLoadBalancerResponseEvent} | `body`\n- Kinesis Analytics | KinesisAnalyticsInputPreprocessingResponse} | `Records[*].powertools_base64(data)``\n-\n-## Custom events and responses\n-\n-You can also validate any Event or Response type, once you have the appropriate schema.\n-\n-Sometimes, you might want to validate only a portion of it - This is where the envelope parameter is for.\n-\n-Envelopes are [JMESPath expressions](https://jmespath.org/tutorial.html) to extract a portion of JSON you want before applying JSON Schema validation.\n-\n-Here is a custom event where we only want to validate each products:\n-\n-```json\n-{\n-  \"basket\": {\n-    \"products\" : [\n-      {\n-        \"id\": 43242,\n-        \"name\": \"FooBar XY\",\n-        \"price\": 258\n-      },\n-      {\n-        \"id\": 765,\n-        \"name\": \"BarBaz AB\",\n-        \"price\": 43.99\n-      }\n-    ]\n-  }\n-}\n-```\n-\n-Here is how you'd use the `envelope` parameter to extract the payload inside the products key before validating:\n-\n-```java\n-public class MyCustomEventHandler implements RequestHandler<MyCustomEvent, String> {\n-\n-    @Override\n-    @Validation(inboundSchema = \"classpath:/my_custom_event_schema.json\",\n-                envelope = \"basket.products[*]\")\n-    public String handleRequest(MyCustomEvent input, Context context) {\n-        return \"OK\";\n-    }\n-}\n-```\n-\n-This is quite powerful because you can use JMESPath Query language to extract records from\n-[arrays, slice and dice](https://jmespath.org/tutorial.html#list-and-slice-projections),\n-to [pipe expressions](https://jmespath.org/tutorial.html#pipe-expressions)\n-and [function](https://jmespath.org/tutorial.html#functions) expressions, where you'd extract what you need before validating the actual payload.\n-\n-## JMESPath functions\n-\n-JMESPath functions ensure to make an operation on a specific part of the json.validate\n-\n-Powertools provides two built-in functions:\n-\n-### powertools_base64 function\n-\n-Use `powertools_base64` function to decode any base64 data.\n-\n-This sample will decode the base64 value within the data key, and decode the JSON string into a valid JSON before we can validate it:\n-\n-```json\n-{\n-   \"data\" : \"ewogICJpZCI6IDQzMjQyLAogICJuYW1lIjogIkZvb0JhciBYWSIsCiAgInByaWNlIjogMjU4Cn0=\"\n-}\n-```\n-\n-```java\n-public class MyEventHandler implements RequestHandler<MyEvent, String> {\n-\n-    @Override\n-    public String handleRequest(MyEvent myEvent, Context context) {\n-        validate(myEvent, \"classpath:/schema.json\", \"powertools_base64(data)\");\n-        return \"OK\";\n-   }\n-}\n-```\n-\n-### powertools_base64_gzip function\n-\n-Use `powertools_base64_gzip` function to decompress and decode base64 data.\n-\n-This sample will decompress and decode base64 data:\n-\n-```json\n-{\n-   \"data\" : \"H4sIAAAAAAAA/6vmUlBQykxRslIwMTYyMdIBcfMSc1OBAkpu+flOiUUKEZFKYOGCosxkkLiRqQVXLQDnWo6bOAAAAA==\"\n-}\n-```\n-\n-```java\n-public class MyEventHandler implements RequestHandler<MyEvent, String> {\n-\n-    @Override\n-    public String handleRequest(MyEvent myEvent, Context context) {\n-        validate(myEvent, \"classpath:/schema.json\", \"powertools_base64_gzip(data)\");\n-        return \"OK\";\n-   }\n-}\n-```\n-\n-**NOTE:** You don't need any function to transform a JSON String into a JSON object, powertools-validation will do it for you.\n-In the 2 previous example, data contains JSON. Just provide the function to transform the base64 / gzipped / ... string into a clear JSON string.\n-\n-### Bring your own JMESPath function\n-\n-<Note type=\"warning\">\n-This should only be used for advanced use cases where you have special formats not covered by the built-in functions.\n-New functions will be added to the 2 built-in ones.\n-</Note>\n-\n-\n-Your function must extend `io.burt.jmespath.function.BaseFunction`, take a String as parameter and return a String.\n-You can read the [doc](https://github.com/burtcorp/jmespath-java#adding-custom-functions) for more information.\n-\n-Here is an example that takes some xml and transform it into json:\n-```java\n-public class XMLFunction extends BaseFunction {\n-    public Base64Function() {\n-        super(\"powertools_xml\", ArgumentConstraints.typeOf(JmesPathType.STRING));\n-    }\n-\n-    @Override\n-    protected <T> T callFunction(Adapter<T> runtime, List<FunctionArgument<T>> arguments) {\n-        T value = arguments.get(0).value();\n-        String xmlString = runtime.toString(value);\n-\n-        String jsonString =  // ... transform xmlString to json\n-\n-        return runtime.createString(jsonString);\n-    }\n-}\n-```\n-\n-Once your function is created, you need to add it to powertools:\n-\n-```java\n-ValidationConfig.get().addFunction(new XMLFunction());\n-```\n-\n-You can then use it to do your validation:\n-```java\n-public class MyXMLEventHandler implements RequestHandler<MyEventWithXML, String> {\n-\n-    @Override\n-    public String handleRequest(MyEventWithXML myEvent, Context context) {\n-        validate(myEvent, \"classpath:/schema.json\", \"powertools_xml(path.to.xml_data)\");\n-        return \"OK\";\n-   }\n-}\n-```\n-or using annotation:\n-```java\n-public class MyXMLEventHandler implements RequestHandler<MyEventWithXML, String> {\n-\n-    @Override\n-    @Validation(inboundSchema=\"classpath:/schema.json\", envelope=\"powertools_xml(path.to.xml_data)\")\n-    public String handleRequest(MyEventWithXML myEvent, Context context) {\n-        return \"OK\";\n-   }\n-}\n-```\n-\n-## Change the schema version\n-By default, powertools-validation is configured with [V7](https://json-schema.org/draft-07/json-schema-release-notes.html).\n-You can use the `ValidationConfig` to change that behaviour:\n-\n-```java\n-ValidationConfig.get().setSchemaVersion(SpecVersion.VersionFlag.V4);\n-```\n-\n-## Advanced ObjectMapper settings\n-If you need to configure the Jackson ObjectMapper, you can use the `ValidationConfig`:\n-\n-```java\n-ObjectMapper objectMapper= ValidationConfig.get().getObjectMapper();\n-// update (de)serializationConfig or other properties\n-```\n\\ No newline at end of file"
  },
  {
    "sha": "36cc26c525157c06e085cfe5ef1457035e31a312",
    "filename": "docs/core/logging.md",
    "status": "added",
    "additions": 222,
    "deletions": 0,
    "changes": 222,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/core/logging.md",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/core/logging.md",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/core/logging.md?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,222 @@\n+---\n+title: Logging\n+description: Core utility\n+---\n+\n+Logging provides an opinionated logger with output structured as JSON.\n+\n+**Key features**\n+\n+* Capture key fields from Lambda context, cold start and structures logging output as JSON\n+* Log Lambda event when instructed, disabled by default, can be enabled explicitly via annotation param\n+* Append additional keys to structured log at any point in time\n+\n+## Initialization\n+\n+Powertools extends the functionality of Log4J. Below is an example `#!xml log4j2.xml` file, with the `#!java LambdaJsonLayout` configured.\n+\n+=== \"log4j2.xml\"\n+\n+    ```xml hl_lines=\"5\"\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <Configuration packages=\"com.amazonaws.services.lambda.runtime.log4j2\">\n+        <Appenders>\n+            <Console name=\"JsonAppender\" target=\"SYSTEM_OUT\">\n+                <LambdaJsonLayout compact=\"true\" eventEol=\"true\"/>\n+            </Console>\n+        </Appenders>\n+        <Loggers>\n+            <Logger name=\"JsonLogger\" level=\"INFO\" additivity=\"false\">\n+                <AppenderRef ref=\"JsonAppender\"/>\n+            </Logger>\n+            <Root level=\"info\">\n+                <AppenderRef ref=\"JsonAppender\"/>\n+            </Root>\n+        </Loggers>\n+    </Configuration>\n+    ```\n+\n+You can also override log level by setting **`POWERTOOLS_LOG_LEVEL`** env var. Here is an example using AWS Serverless Application Model (SAM)\n+\n+=== \"template.yaml\"\n+    ``` yaml hl_lines=\"9 10\"\n+    Resources:\n+        HelloWorldFunction:\n+            Type: AWS::Serverless::Function\n+            Properties:\n+            ...\n+            Runtime: java8\n+            Environment:\n+                Variables:\n+                    POWERTOOLS_LOG_LEVEL: DEBUG\n+                    POWERTOOLS_SERVICE_NAME: example\n+    ```\n+\n+You can also explicitly set a service name via **`POWERTOOLS_SERVICE_NAME`** env var. This sets **service** key that will be present across all log statements.\n+\n+## Standard structured keys\n+\n+Your logs will always include the following keys to your structured logging:\n+\n+Key | Type | Example | Description\n+------------------------------------------------- | ------------------------------------------------- | --------------------------------------------------------------------------------- | -------------------------------------------------\n+**timestamp** | String | \"2020-05-24 18:17:33,774\" | Timestamp of actual log statement\n+**level** | String | \"INFO\" | Logging level\n+**coldStart** | Boolean | true| ColdStart value.\n+**service** | String | \"payment\" | Service name defined. \"service_undefined\" will be used if unknown\n+**samplingRate** | int |  0.1 | Debug logging sampling rate in percentage e.g. 10% in this case\n+**message** | String |  \"Collecting payment\" | Log statement value. Unserializable JSON values will be casted to string\n+**functionName**| String | \"example-powertools-HelloWorldFunction-1P1Z6B39FLU73\"\n+**functionVersion**| String | \"12\"\n+**functionMemorySize**| String | \"128\"\n+**functionArn**| String | \"arn:aws:lambda:eu-west-1:012345678910:function:example-powertools-HelloWorldFunction-1P1Z6B39FLU73\"\n+**xray_trace_id**| String | \"1-5759e988-bd862e3fe1be46a994272793\" | X-Ray Trace ID when Lambda function has enabled Tracing\n+**function_request_id**| String | \"899856cb-83d1-40d7-8611-9e78f15f32f4\"\" | AWS Request ID from lambda context\n+\n+## Capturing context Lambda info\n+\n+You can enrich your structured logs with key Lambda context information via `logEvent` annotation parameter. \n+You can also explicitly log any incoming event using `logEvent` param. Refer [Override default object mapper](#override-default-object-mapper) \n+to customise what is logged.\n+\n+!!! warning\n+    Log event is disabled by default to prevent sensitive info being logged.\n+\n+\n+=== \"App.java\"\n+\n+    ```java hl_lines=\"14\"\n+    import org.apache.logging.log4j.LogManager;\n+    import org.apache.logging.log4j.Logger;\n+    import software.amazon.lambda.logging.LoggingUtils;\n+    import software.amazon.lambda.logging.Logging;\n+    ...\n+    \n+    /**\n+     * Handler for requests to Lambda function.\n+     */\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        Logger log = LogManager.getLogger();\n+    \n+        @Logging\n+        public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n+         ...\n+        }\n+    }\n+    ```\n+\n+=== \"AppLogEvent.java\"\n+    \n+    ```java hl_lines=\"8\"\n+    /**\n+     * Handler for requests to Lambda function.\n+     */\n+    public class AppLogEvent implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        Logger log = LogManager.getLogger();\n+        \n+        @Logging(logEvent = true)\n+        public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n+         ...\n+        }\n+    }\n+    ```\n+\n+## Appending additional keys\n+\n+You can append your own keys to your existing logs via `appendKey`.\n+\n+=== \"App.java\"\n+\n+    ```java hl_lines=\"11 19\"\n+    /**\n+     * Handler for requests to Lambda function.\n+     */\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        Logger log = LogManager.getLogger();\n+    \n+        @Logging(logEvent = true)\n+        public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n+            ...\n+            LoggingUtils.appendKey(\"test\", \"willBeLogged\");\n+            ...\n+    \n+            ...\n+             Map<String, String> customKeys = new HashMap<>();\n+             customKeys.put(\"test\", \"value\");\n+             customKeys.put(\"test1\", \"value1\");\n+    \n+             LoggingUtils.appendKeys(customKeys);\n+            ...\n+        }\n+    }\n+    ```\n+\n+## Override default object mapper\n+\n+You can optionally choose to override default object mapper which is used to serialize lambda function events. You might\n+want to supply custom object mapper in order to control how serialisation is done, for example, when you want to log only\n+specific fields from received event due to security.\n+\n+=== \"App.java\"\n+\n+    ```java hl_lines=\"9 10\"\n+    /**\n+     * Handler for requests to Lambda function.\n+     */\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        Logger log = LogManager.getLogger();\n+\n+        static {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            LoggingUtils.defaultObjectMapper(objectMapper);\n+        }\n+    \n+        @Logging(logEvent = true)\n+        public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n+            ...\n+        }\n+    }\n+    ```\n+\n+## Sampling debug logs\n+\n+You can dynamically set a percentage of your logs to **DEBUG** level via env var `POWERTOOLS_LOGGER_SAMPLE_RATE` or\n+via `samplingRate` attribute on annotation. \n+\n+!!! info\n+    Configuration on environment variable is given precedence over sampling rate configuration on annotation, provided it's in valid value range.\n+\n+=== \"Sampling via annotation attribute\"\n+\n+    ```java hl_lines=\"8\"\n+    /**\n+     * Handler for requests to Lambda function.\n+     */\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        Logger log = LogManager.getLogger();\n+    \n+        @Logging(samplingRate = 0.5)\n+        public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {\n+         ...\n+        }\n+    }\n+    ```\n+\n+=== \"Sampling via environment variable\"\n+\n+    ```yaml hl_lines=\"9\"\n+    Resources:\n+        HelloWorldFunction:\n+            Type: AWS::Serverless::Function\n+            Properties:\n+            ...\n+            Runtime: java8\n+            Environment:\n+                Variables:\n+                    POWERTOOLS_LOGGER_SAMPLE_RATE: 0.5\n+    ```\n\\ No newline at end of file"
  },
  {
    "sha": "cb470caa54b82dea9f9495bda7937adbdd2a4114",
    "filename": "docs/core/metrics.md",
    "status": "added",
    "additions": 208,
    "deletions": 0,
    "changes": 208,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/core/metrics.md",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/core/metrics.md",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/core/metrics.md?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,208 @@\n+---\n+title: Metrics\n+description: Core utility\n+---\n+\n+Metrics creates custom metrics asynchronously by logging metrics to standard output following Amazon CloudWatch Embedded Metric Format (EMF).\n+\n+These metrics can be visualized through [Amazon CloudWatch Console](https://console.aws.amazon.com/cloudwatch/).\n+\n+**Key features**\n+\n+* Aggregate up to 100 metrics using a single CloudWatch EMF object (large JSON blob).\n+* Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc).\n+* Metrics are created asynchronously by the CloudWatch service, no custom stacks needed.\n+* Context manager to create a one off metric with a different dimension.\n+\n+## Terminologies\n+\n+If you're new to Amazon CloudWatch, there are two terminologies you must be aware of before using this utility:\n+\n+* **Namespace**. It's the highest level container that will group multiple metrics from multiple services for a given application, for example `ServerlessEcommerce`.\n+* **Dimensions**. Metrics metadata in key-value format. They help you slice and dice metrics visualization, for example `ColdStart` metric by Payment `service`.\n+\n+<figure>\n+  <img src=\"../../media/metrics_terminology.png\" />\n+  <figcaption>Metric terminology, visually explained</figcaption>\n+</figure>\n+\n+\n+## Getting started\n+\n+Metric has two global settings that will be used across all metrics emitted:\n+\n+Setting | Description | Environment variable | Constructor parameter\n+------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- | -------------------------------------------------\n+**Metric namespace** | Logical container where all metrics will be placed e.g. `ServerlessAirline` |  `POWERTOOLS_METRICS_NAMESPACE` | `namespace`\n+**Service** | Optionally, sets **service** metric dimension across all metrics e.g. `payment` | `POWERTOOLS_SERVICE_NAME` | `service`\n+\n+!!! tip \"Use your application or main service as the metric namespace to easily group all metrics\"\n+\n+=== \"template.yaml\"\n+\n+    ```yaml hl_lines=\"9 10\"\n+    Resources:\n+        HelloWorldFunction:\n+            Type: AWS::Serverless::Function\n+            Properties:\n+            ...\n+            Runtime: java8\n+            Environment:\n+                Variables:\n+                    POWERTOOLS_SERVICE_NAME: payment\n+                    POWERTOOLS_METRICS_NAMESPACE: ServerlessAirline\n+    ```\n+\n+=== \"MetricsEnabledHandler.java\"\n+\n+    ```java hl_lines=\"8\"\n+    import software.amazon.lambda.powertools.metrics.Metrics;\n+    \n+    public class MetricsEnabledHandler implements RequestHandler<Object, Object> {\n+    \n+        MetricsLogger metricsLogger = MetricsUtils.metricsLogger();\n+    \n+        @Override\n+        @Metrics(namespace = \"ExampleApplication\", service = \"booking\")\n+        public Object handleRequest(Object input, Context context) {\n+            ...\n+        }\n+    }\n+    ```\n+\n+You can initialize Metrics anywhere in your code as many times as you need - It'll keep track of your aggregate metrics in memory.\n+\n+## Creating metrics\n+\n+You can create metrics using `putMetric`, and manually create dimensions for all your aggregate metrics using `putDimensions`.\n+\n+=== \"MetricsEnabledHandler.java\"\n+\n+    ```java hl_lines=\"11 12\"\n+    import software.amazon.lambda.powertools.metrics.Metrics;\n+    import software.amazon.cloudwatchlogs.emf.logger.MetricsLogger;\n+\n+    public class MetricsEnabledHandler implements RequestHandler<Object, Object> {\n+    \n+        MetricsLogger metricsLogger = MetricsUtils.metricsLogger();\n+    \n+        @Override\n+        @Metrics(namespace = \"ExampleApplication\", service = \"booking\")\n+        public Object handleRequest(Object input, Context context) {\n+            metricsLogger.putDimensions(DimensionSet.of(\"environment\", \"prod\"));\n+            metricsLogger.putMetric(\"SuccessfulBooking\", 1, Unit.COUNT);\n+            ...\n+        }\n+    }\n+    ```\n+\n+!!! tip \"The `Unit` enum facilitate finding a supported metric unit by CloudWatch.\"\n+\n+!!! note \"Metrics overflow\"\n+    CloudWatch EMF supports a max of 100 metrics. Metrics utility will flush all metrics when adding the 100th metric while subsequent metrics will be aggregated into a new EMF object, for your convenience.\n+\n+### Flushing metrics\n+\n+The `@Metrics` annotation **validates**, **serializes**, and **flushes** all your metrics. During metrics validation, \n+if no metrics are provided no exception will be raised. If metrics are provided, and any of the following criteria are \n+not met, `ValidationException` exception will be raised.\n+\n+!!! tip \"Metric validation\"\n+    * Minimum of 1 dimension\n+    * Maximum of 9 dimensions\n+\n+If you want to ensure that at least one metric is emitted, you can pass `raiseOnEmptyMetrics = true` to the **@Metrics** annotation:\n+\n+=== \"MetricsRaiseOnEmpty.java\"\n+\n+    ```java hl_lines=\"6\"\n+    import software.amazon.lambda.powertools.metrics.Metrics;\n+\n+    public class MetricsRaiseOnEmpty implements RequestHandler<Object, Object> {\n+\n+        @Override\n+        @Metrics(raiseOnEmptyMetrics = true)\n+        public Object handleRequest(Object input, Context context) {\n+        ...\n+        }\n+    }\n+    ```\n+\n+## Capturing cold start metric\n+\n+You can capture cold start metrics automatically with `@Metrics` via the `captureColdStart` variable.\n+\n+=== \"MetricsColdStart.java\"\n+\n+    ```java hl_lines=\"6\"\n+    import software.amazon.lambda.powertools.metrics.Metrics;\n+\n+    public class MetricsColdStart implements RequestHandler<Object, Object> {\n+\n+        @Override\n+        @Metrics(captureColdStart = true)\n+        public Object handleRequest(Object input, Context context) {\n+        ...\n+        }\n+    }\n+    ```\n+\n+If it's a cold start invocation, this feature will:\n+\n+* Create a separate EMF blob solely containing a metric named `ColdStart`\n+* Add `FunctionName` and `Service` dimensions\n+\n+This has the advantage of keeping cold start metric separate from your application metrics.\n+\n+## Advanced\n+\n+## Adding metadata\n+\n+You can use `putMetadata` for advanced use cases, where you want to metadata as part of the serialized metrics object.\n+\n+!!! info\n+    **This will not be available during metrics visualization, use `dimensions` for this purpose.**\n+\n+=== \"App.java\"\n+\n+    ```java hl_lines=\"8 9\" \n+    import software.amazon.lambda.powertools.metrics.Metrics;\n+    import software.amazon.cloudwatchlogs.emf.logger.MetricsLogger;\n+\n+    public class App implements RequestHandler<Object, Object> {\n+\n+        @Override\n+        @Metrics(namespace = \"ServerlessAirline\", service = \"payment\")\n+        public Object handleRequest(Object input, Context context) {\n+            metricsLogger().putMetric(\"CustomMetric1\", 1, Unit.COUNT);\n+            metricsLogger().putMetadata(\"booking_id\", \"1234567890\");\n+            ...\n+        }\n+    }\n+    ```\n+\n+This will be available in CloudWatch Logs to ease operations on high cardinal data.\n+\n+## Creating a metric with a different dimension\n+\n+CloudWatch EMF uses the same dimensions across all your metrics. Use `withSingleMetric` if you have a metric that should have different dimensions.\n+\n+!!! info\n+    Generally, this would be an edge case since you [pay for unique metric](https://aws.amazon.com/cloudwatch/pricing/). Keep the following formula in mind:\n+    **unique metric = (metric_name + dimension_name + dimension_value)**\n+\n+=== \"App.java\"\n+\n+    ```java hl_lines=\"7 8 9\" \n+    import static software.amazon.lambda.powertools.metrics.MetricsUtils.withSingleMetric;\n+\n+    public class App implements RequestHandler<Object, Object> {\n+\n+        @Override\n+        public Object handleRequest(Object input, Context context) {\n+             withSingleMetric(\"CustomMetrics2\", 1, Unit.COUNT, \"Another\", (metric) -> {\n+                metric.setDimensions(DimensionSet.of(\"AnotherService\", \"CustomService\"));\n+            });\n+        }\n+    }\n+    ```\n\\ No newline at end of file"
  },
  {
    "sha": "46d0542316649c92d11488948547cb41cc482cd6",
    "filename": "docs/core/tracing.md",
    "status": "added",
    "additions": 206,
    "deletions": 0,
    "changes": 206,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/core/tracing.md",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/core/tracing.md",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/core/tracing.md?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,206 @@\n+---\n+title: Tracing\n+description: Core utility\n+---\n+\n+Powertools tracing is an opinionated thin wrapper for [AWS X-Ray Java SDK](https://github.com/aws/aws-xray-sdk-java/)\n+a provides functionality to reduce the overhead of performing common tracing tasks.\n+\n+![Tracing showcase](../media/tracing_utility_showcase.png)\n+\n+ **Key Features**\n+\n+ * Capture cold start as annotation, and responses as well as full exceptions as metadata\n+ * Helper methods to improve the developer experience of creating new X-Ray subsegments.\n+ * Better developer experience when developing with multiple threads.\n+ * Auto patch supported modules by AWS X-Ray\n+\n+Initialization\n+\n+Before your use this utility, your AWS Lambda function [must have permissions](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html#services-xray-permissions) to send traces to AWS X-Ray.\n+\n+> Example using AWS Serverless Application Model (SAM)\n+\n+=== \"template.yaml\"\n+\n+    ```yaml hl_lines=\"8 11\"\n+    Resources:\n+        HelloWorldFunction:\n+            Type: AWS::Serverless::Function\n+            Properties:\n+            ...\n+            Runtime: java8\n+    \n+            Tracing: Active\n+            Environment:\n+                Variables:\n+                    POWERTOOLS_SERVICE_NAME: example\n+    ```\n+\n+The Powertools service name is used as the X-Ray namespace. This can be set using the environment variable\n+`POWERTOOLS_SERVICE_NAME`\n+\n+### Lambda handler\n+\n+To enable Powertools tracing to your function add the `@Tracing annotation to your `handleRequest` method or on\n+any method will capture the method as a separate subsegment automatically. You can optionally choose to customize \n+segment name that appears in traces.\n+\n+=== \"Tracing annotation\"\n+\n+    ```java hl_lines=\"3 10 15\"\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        @Tracing\n+        public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n+            businessLogic1();\n+    \n+            businessLogic2();\n+        }\n+    \n+        @Tracing\n+        public void businessLogic1(){\n+    \n+        }\n+    \n+        @Tracing\n+        public void businessLogic2(){\n+    \n+        }\n+    }\n+    ```\n+\n+=== \"Custom Segment names\"\n+\n+    ```java hl_lines=\"3\"\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        @Tracing(segmentName=\"yourCustomName\")\n+        public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n+        ...\n+        }\n+    ```\n+\n+By default, this annotation will automatically record method responses and exceptions. You can change the default behavior by setting\n+the environment variables `POWERTOOLS_TRACER_CAPTURE_RESPONSE` and `POWERTOOLS_TRACER_CAPTURE_ERROR` as needed. Optionally, you can override behavior by\n+different supported `captureMode` to record response, exception or both.\n+\n+!!! warning \"Returning sensitive information from your Lambda handler or functions, where `Tracing` is used?\"\n+    You can disable annotation from capturing their responses and exception as tracing metadata with **`captureMode=DISABLED`**\n+    or globally by setting environment variables **`POWERTOOLS_TRACER_CAPTURE_RESPONSE`** and **`POWERTOOLS_TRACER_CAPTURE_ERROR`** to **`false`**\n+\n+=== \"Disable on annotation\"\n+\n+    ```java hl_lines=\"3\"\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        @Tracing(captureMode=CaptureMode.DISABLED)\n+        public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n+        ...\n+        }\n+    ```\n+\n+=== \"Disable Globally\"\n+\n+    ```yaml hl_lines=\"11 12\"\n+    Resources:\n+        HelloWorldFunction:\n+            Type: AWS::Serverless::Function\n+            Properties:\n+            ...\n+            Runtime: java8\n+    \n+            Tracing: Active\n+            Environment:\n+                Variables:\n+                    POWERTOOLS_TRACER_CAPTURE_RESPONSE: false\n+                    POWERTOOLS_TRACER_CAPTURE_ERROR: false\n+    ```\n+\n+### Annotations & Metadata\n+\n+**Annotations** are key-values associated with traces and indexed by AWS X-Ray. You can use them to filter traces and to\n+create [Trace Groups](https://aws.amazon.com/about-aws/whats-new/2018/11/aws-xray-adds-the-ability-to-group-traces/) to slice and dice your transactions.\n+\n+**Metadata** are key-values also associated with traces but not indexed by AWS X-Ray. You can use them to add additional \n+context for an operation using any native object.\n+\n+=== \"Annotations\"\n+\n+    You can add annotations using `putAnnotation()` method from TracingUtils\n+    ```java hl_lines=\"8\"\n+    import software.amazon.lambda.powertools.tracing.Tracing;\n+    import software.amazon.lambda.powertools.tracing.TracingUtils;\n+\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        @Tracing\n+        public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n+            TracingUtils.putAnnotation(\"annotation\", \"value\");\n+        }\n+    }\n+    ```\n+\n+=== \"Metadata\"\n+\n+    You can add metadata using `putMetadata()` method from TracingUtils\n+    ```java hl_lines=\"8\"\n+    import software.amazon.lambda.powertools.tracing.Tracing;\n+    import software.amazon.lambda.powertools.tracing.TracingUtils;\n+\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        @Tracing\n+        public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n+            TracingUtils.putMetadata(\"content\", \"value\");\n+        }\n+    }\n+    ```\n+\n+## Utilities\n+\n+Tracing modules comes with certain utility method when you don't want to use annotation for capturing a code block\n+under a subsegment, or you are doing multithreaded programming. Refer examples below.\n+\n+=== \"Functional Api\"\n+\n+    ```java hl_lines=\"7 8 9 11 12 13\"\n+    import software.amazon.lambda.powertools.tracing.Tracing;\n+    import software.amazon.lambda.powertools.tracing.TracingUtils;\n+    \n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n+             TracingUtils.withSubsegment(\"loggingResponse\", subsegment -> {\n+                // Some business logic\n+             });\n+    \n+             TracingUtils.withSubsegment(\"localNamespace\", \"loggingResponse\", subsegment -> {\n+                // Some business logic\n+             });\n+        }\n+    }\n+    ```\n+\n+=== \"Multi Threaded Programming\"\n+\n+    ```java hl_lines=\"7 9 10 11\"\n+    import static software.amazon.lambda.powertools.tracing.TracingUtils.withEntitySubsegment;\n+\n+    public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n+    \n+        public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n+            // Extract existing trace data\n+            Entity traceEntity = AWSXRay.getTraceEntity();\n+    \n+            Thread anotherThread = new Thread(() -> withEntitySubsegment(\"inlineLog\", traceEntity, subsegment -> {\n+                // Business logic in separate thread\n+            }));\n+        }\n+    }\n+    ```\n+\n+## Instrumenting SDK clients and HTTP calls\n+\n+User should make sure to instrument the SDK clients explicitly based on the function dependency. Refer details on\n+[how to instrument SDK client with Xray](https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-awssdkclients.html) and [outgoing http calls](https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-httpclients.html)."
  },
  {
    "sha": "b5c868e2369303f33a75aa1de3ad26d2310d8966",
    "filename": "docs/gatsby-browser.js",
    "status": "removed",
    "additions": 0,
    "deletions": 27,
    "changes": 27,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/gatsby-browser.js",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/gatsby-browser.js",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/gatsby-browser.js?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,27 +0,0 @@\n-import \"./src/styles/global.css\"\n-import Amplify from 'aws-amplify';\n-import { Analytics, AWSKinesisFirehoseProvider } from '@aws-amplify/analytics';\n-import awsconfig from './src/config';\n-\n-export const onRouteUpdate = ({ location, prevLocation }) => {\n-    Analytics.record({\n-        data: {\n-            url: window.location.href,\n-            section: location.pathname,\n-            previous: prevLocation ? prevLocation.pathname : null,\n-            language: 'java'\n-        },\n-        streamName: awsconfig.aws_kinesis_firehose_stream_name\n-    }, 'AWSKinesisFirehose')\n-}\n-\n-export const onClientEntry = () => {\n-    Analytics.addPluggable(new AWSKinesisFirehoseProvider());\n-    Amplify.configure(awsconfig);\n-\n-    Analytics.configure({\n-        AWSKinesisFirehose: {\n-            region: awsconfig.aws_project_region\n-        }\n-    });\n-}"
  },
  {
    "sha": "0c973455995e0532ccbb5255e01c0e778d364de6",
    "filename": "docs/gatsby-config.js",
    "status": "removed",
    "additions": 0,
    "deletions": 75,
    "changes": 75,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/15de652244a962019389c87aadb1e4a0d89d7687/docs/gatsby-config.js",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/15de652244a962019389c87aadb1e4a0d89d7687/docs/gatsby-config.js",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/gatsby-config.js?ref=15de652244a962019389c87aadb1e4a0d89d7687",
    "patch": "@@ -1,75 +0,0 @@\n-const docsWebsite = \"https://awslabs.github.io/aws-lambda-powertools-java\"\n-\n-module.exports = {\n-    pathPrefix: '/aws-lambda-powertools-java',\n-    siteMetadata: {\n-        title: 'AWS Lambda Powertools Java',\n-        description: 'A suite of utilities for AWS Lambda Functions that makes tracing with AWS X-Ray, structured logging and creating custom metrics asynchronously easier',\n-        author: `Amazon Web Services`,\n-        siteName: 'AWS Lambda Powertools Java',\n-        siteUrl: `${docsWebsite}`\n-    },\n-    plugins: [\n-        {\n-            resolve: 'gatsby-theme-apollo-docs',\n-            options: {\n-                root: __dirname,\n-                menuTitle: 'Helpful resources',\n-                githubRepo: 'awslabs/aws-lambda-powertools-java',\n-                baseUrl: `${docsWebsite}`,\n-                logoLink: `${docsWebsite}`,\n-                sidebarCategories: {\n-                    null: [\n-                        'index'\n-                    ],\n-                    'Core utilities': [\n-                        'core/logging',\n-                        'core/tracing',\n-                        'core/metrics'\n-                    ],\n-                    'Utilities': [\n-                        'utilities/sqs_large_message_handling',\n-                        'utilities/batch',\n-                        'utilities/parameters',\n-                        'utilities/validation'\n-                    ],\n-                },\n-                navConfig: {\n-                    'Serverless Best Practices video': {\n-                        url: 'https://www.youtube.com/watch?v=9IYpGTS7Jy0',\n-                        description: 'AWS re:Invent ARC307: Serverless architectural patterns & best practices - Origins of Powertools',\n-                    },\n-                    'AWS Well-Architected Serverless Lens': {\n-                        url: 'https://d1.awsstatic.com/whitepapers/architecture/AWS-Serverless-Applications-Lens.pdf',\n-                        description: 'AWS Well-Architected Serverless Applications Lens whitepaper',\n-                    },\n-                    'Amazon Builders Library': {\n-                        url: 'https://aws.amazon.com/builders-library/',\n-                        description: 'Collection of living articles covering topics across architecture, software delivery, and operations'\n-                    },\n-                    'AWS CDK Patterns': {\n-                        url: 'https://cdkpatterns.com/patterns/',\n-                        description: \"CDK Patterns maintained by Matt Coulter (@nideveloper)\"\n-                    }\n-                },\n-                footerNavConfig: {\n-                    Serverless: {\n-                        href: 'https://aws.amazon.com/serverless/'\n-                    },\n-                    'AWS SAM Docs': {\n-                        href: 'https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html',\n-                    }\n-                }\n-            }\n-        },\n-        {\n-            resolve: `gatsby-plugin-catch-links`,\n-            options: {\n-                excludePattern: /\\/aws-lambda-powertools-java/,\n-            },\n-        },\n-        'gatsby-plugin-antd',\n-        'gatsby-remark-autolink-headers',\n-        'gatsby-plugin-sitemap'\n-    ]\n-};"
  },
  {
    "sha": "8baef75f1c6c26bb742f736375033c22fd3f9c52",
    "filename": "docs/index.md",
    "status": "added",
    "additions": 139,
    "deletions": 0,
    "changes": 139,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/index.md",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/index.md",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/index.md?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,139 @@\n+---\n+title: Homepage\n+description: AWS Lambda Powertools Java\n+---\n+\n+Powertools is a suite of utilities for AWS Lambda Functions that makes tracing with AWS X-Ray, structured logging and creating custom metrics asynchronously easier.\n+\n+!!! tip \"Looking for a quick run through of the core utilities?\"\n+    Check out [this detailed blog post](https://aws.amazon.com/blogs/opensource/simplifying-serverless-best-practices-with-aws-lambda-powertools-java/) with a practical example.\n+\n+## Tenets\n+\n+This project separates core utilities that will be available in other runtimes vs general utilities that might not be available across all runtimes.\n+\n+* **AWS Lambda only** – We optimise for AWS Lambda function environments and supported runtimes only. Utilities might work with web frameworks and non-Lambda environments, though they are not officially supported.\n+* **Eases the adoption of best practices** – The main priority of the utilities is to facilitate best practices adoption, as defined in the AWS Well-Architected Serverless Lens; all other functionality is optional.\n+* **Keep it lean** – Additional dependencies are carefully considered for security and ease of maintenance, and prevent negatively impacting startup time.\n+* **We strive for backwards compatibility** – New features and changes should keep backwards compatibility. If a breaking change cannot be avoided, the deprecation and migration process should be clearly defined.\n+* **We work backwards from the community** – We aim to strike a balance of what would work best for 80% of customers. Emerging practices are considered and discussed via Requests for Comment (RFCs)\n+* **Idiomatic** – Utilities follow programming language idioms and language-specific best practices.\n+\n+## Install\n+\n+Powertools dependencies are available in Maven Central. You can use your favourite dependency management tool to install it\n+\n+* [Maven](https://maven.apache.org/)\n+* [Gradle](https://gradle.org)\n+\n+**Quick hello world examples using SAM CLI**\n+\n+You can use [SAM](https://aws.amazon.com/serverless/sam/) to quickly setup a serverless project including AWS Lambda Powertools Java.\n+\n+```bash\n+  sam init --location gh:aws-samples/cookiecutter-aws-sam-powertools-java\n+```\n+\n+For more information about the project and available options refer to this [repository](https://github.com/aws-samples/cookiecutter-aws-sam-powertools-java/blob/main/README.md)\n+\n+=== \"Maven\"\n+\n+    ```xml hl_lines=\"3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\" \n+    <dependencies>\n+        ...\n+        <dependency>\n+            <groupId>software.amazon.lambda</groupId>\n+            <artifactId>powertools-tracing</artifactId>\n+            <version>1.2.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>software.amazon.lambda</groupId>\n+            <artifactId>powertools-logging</artifactId>\n+            <version>1.2.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>software.amazon.lambda</groupId>\n+            <artifactId>powertools-metrics</artifactId>\n+            <version>1.2.0</version>\n+        </dependency>\n+        ...\n+    </dependencies>\n+    ...\n+    <!-- configure the aspectj-maven-plugin to compile-time weave (CTW) the aws-lambda-powertools-java aspects into your project -->\n+    <build>\n+        <plugins>\n+            ...\n+            <plugin>\n+                 <groupId>org.codehaus.mojo</groupId>\n+                 <artifactId>aspectj-maven-plugin</artifactId>\n+                 <version>1.11</version>\n+                 <configuration>\n+                     <source>1.8</source>\n+                     <target>1.8</target>\n+                     <complianceLevel>1.8</complianceLevel>\n+                     <aspectLibraries>\n+                         <aspectLibrary>\n+                             <groupId>software.amazon.lambda</groupId>\n+                             <artifactId>powertools-tracing</artifactId>\n+                         </aspectLibrary>\n+                         <aspectLibrary>\n+                             <groupId>software.amazon.lambda</groupId>\n+                             <artifactId>powertools-logging</artifactId>\n+                         </aspectLibrary>\n+                         <aspectLibrary>\n+                             <groupId>software.amazon.lambda</groupId>\n+                             <artifactId>powertools-metrics</artifactId>\n+                         </aspectLibrary>\n+                     </aspectLibraries>\n+                 </configuration>\n+                 <executions>\n+                     <execution>\n+                         <goals>\n+                             <goal>compile</goal>\n+                         </goals>\n+                     </execution>\n+                 </executions>\n+            </plugin>\n+            ...\n+        </plugins>\n+    </build>\n+    ```\n+    **Note:** If you are working with lambda function on runtime post java8, please refer [issue](https://github.com/awslabs/aws-lambda-powertools-java/issues/50) for workaround.\n+\n+=== \"Gradle\"\n+\n+    ```groovy\n+    plugins{\n+        id 'java'\n+        id 'aspectj.AspectjGradlePlugin' version '0.0.6'\n+    }\n+    repositories {\n+        jcenter()\n+    }\n+    dependencies {\n+        implementation 'software.amazon.lambda:powertools-tracing:1.2.0'\n+        aspectpath 'software.amazon.lambda:powertools-tracing:1.2.0'\n+        implementation 'software.amazon.lambda:powertools-logging:1.2.0'\n+        aspectpath 'software.amazon.lambda:powertools-logging:1.2.0'\n+        implementation 'software.amazon.lambda:powertools-metrics:1.2.0'\n+        aspectpath 'software.amazon.lambda:powertools-metrics:1.2.0'\n+    }\n+    ```\n+    **Note:**\n+    \n+    Please add `aspectjVersion = '1.9.6'` to the `gradle.properties` file. The aspectj plugin works at the moment with gradle 5.x only if\n+    you are using `java 8` as runtime. Please refer to [open issue](https://github.com/awslabs/aws-lambda-powertools-java/issues/146) for more details.\n+\n+## Environment variables\n+\n+!!! info\n+    **Explicit parameters take precedence over environment variables.**\n+\n+| Environment variable | Description | Utility |\n+| ------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |\n+| **POWERTOOLS_SERVICE_NAME** | Sets service name used for tracing namespace, metrics dimension and structured logging | All |\n+| **POWERTOOLS_METRICS_NAMESPACE** | Sets namespace used for metrics | [Metrics](./core/metrics) |\n+| **POWERTOOLS_LOGGER_SAMPLE_RATE** | Debug log sampling | [Logging](./core/logging) |\n+| **POWERTOOLS_LOG_LEVEL** | Sets logging level | [Logging](./core/logging) |\n+| **POWERTOOLS_TRACER_CAPTURE_RESPONSE** | Enables/Disables tracing mode to capture method response | [Tracing](./core/tracing) |\n+| **POWERTOOLS_TRACER_CAPTURE_ERROR** | Enables/Disables tracing mode to capture method error | [Tracing](./core/tracing) |\n\\ No newline at end of file"
  },
  {
    "sha": "f19b36a50f30f55685d2b75690e884c64331004a",
    "filename": "docs/javascript/aws-amplify.min.js",
    "status": "added",
    "additions": 108,
    "deletions": 0,
    "changes": 108,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/javascript/aws-amplify.min.js",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/javascript/aws-amplify.min.js",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/javascript/aws-amplify.min.js?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01"
  },
  {
    "sha": "0ade322a60a969042892f9576666524f8e52c63b",
    "filename": "docs/javascript/extra.js",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/javascript/extra.js",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/javascript/extra.js",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/javascript/extra.js?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,71 @@\n+const Amplify = window.aws_amplify.Amplify\n+const Analytics = Amplify.Analytics\n+const KinesisFirehoseProvider = window.aws_amplify.AWSKinesisFirehoseProvider\n+\n+const awsconfig = {\n+\t\"aws_project_region\": \"eu-west-1\",\n+\t\"aws_cognito_identity_pool_id\": \"eu-west-1:3df3caec-4bb6-4891-b154-ee940c8264b8\",\n+\t\"aws_cognito_region\": \"eu-west-1\",\n+\t\"aws_kinesis_firehose_stream_name\": \"ClickStreamKinesisFirehose-OGX7PQdrynUo\",\n+};\n+\n+const RUNTIME = \"python\"\n+\n+const attachListeners = () => {\n+\t/* Register handler to log search on blur */\n+\tdocument.addEventListener(\"DOMContentLoaded\", function () {\n+\t\trecordPageView({\n+\t\t\tprevLocation: document.referrer\n+\t\t})\n+\t\tif (document.forms.search) {\n+\t\t\tlet query = document.forms.search.query\n+\t\t\tquery.addEventListener(\"blur\", function () {\n+\t\t\t\t// If Search result is ever actionable\n+\t\t\t\t// we should populate `value`\n+\t\t\t\tif (this.value) {\n+\t\t\t\t\tlet path = document.location.pathname;\n+\t\t\t\t\tconsole.info(`Search value: ${this.value}`)\n+\t\t\t\t\trecordPageView({\n+\t\t\t\t\t\tsearchPattern: this.value\n+\t\t\t\t\t})\n+\t\t\t\t}\n+\t\t\t})\n+\t\t}\n+\t})\n+\n+\t// Register handler for page sections when browser history is changed\n+\twindow.onpopstate = function (event) {\n+\t\trecordPageView({\n+\t\t\tprevLocation: document.referrer\n+\t\t})\n+\t};\n+}\n+\n+const init = () => {\n+\tAnalytics.addPluggable(new KinesisFirehoseProvider())\n+\tAmplify.configure(awsconfig);\n+\n+\tAnalytics.configure({\n+\t\tAWSKinesisFirehose: {\n+\t\t\tregion: awsconfig.aws_project_region\n+\t\t}\n+\t})\n+\n+\tattachListeners()\n+}\n+\n+const recordPageView = ({prevLocation, searchPattern}) => {\n+\tAnalytics.record({\n+\t\tdata: {\n+\t\t\t// Do not count page view for search\n+\t\t\turl: searchPattern ? null : window.location.href,\n+\t\t\tsection: searchPattern ? null : location.pathname,\n+\t\t\tprevious: prevLocation || null,\n+\t\t\tsearch: searchPattern || null,\n+\t\t\tlanguage: RUNTIME\n+\t\t},\n+\t\tstreamName: awsconfig.aws_kinesis_firehose_stream_name\n+\t}, 'AWSKinesisFirehose')\n+}\n+\n+init()"
  },
  {
    "sha": "982571b86e58fde61f48cbe264611a6abf07704b",
    "filename": "docs/media/aws-logo-light.svg",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/media/aws-logo-light.svg",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/media/aws-logo-light.svg",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/media/aws-logo-light.svg?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "patch": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n+<!-- Generator: Adobe Illustrator 19.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n+<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n+\t viewBox=\"0 0 304 182\" style=\"enable-background:new 0 0 304 182;\" xml:space=\"preserve\">\r\n+<style type=\"text/css\">\r\n+\t.st0{fill:#FFFFFF;}\r\n+\t.st1{fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;}\r\n+</style>\r\n+<g>\r\n+\t<path class=\"st0\" d=\"M86.4,66.4c0,3.7,0.4,6.7,1.1,8.9c0.8,2.2,1.8,4.6,3.2,7.2c0.5,0.8,0.7,1.6,0.7,2.3c0,1-0.6,2-1.9,3l-6.3,4.2\r\n+\t\tc-0.9,0.6-1.8,0.9-2.6,0.9c-1,0-2-0.5-3-1.4C76.2,90,75,88.4,74,86.8c-1-1.7-2-3.6-3.1-5.9c-7.8,9.2-17.6,13.8-29.4,13.8\r\n+\t\tc-8.4,0-15.1-2.4-20-7.2c-4.9-4.8-7.4-11.2-7.4-19.2c0-8.5,3-15.4,9.1-20.6c6.1-5.2,14.2-7.8,24.5-7.8c3.4,0,6.9,0.3,10.6,0.8\r\n+\t\tc3.7,0.5,7.5,1.3,11.5,2.2v-7.3c0-7.6-1.6-12.9-4.7-16c-3.2-3.1-8.6-4.6-16.3-4.6c-3.5,0-7.1,0.4-10.8,1.3c-3.7,0.9-7.3,2-10.8,3.4\r\n+\t\tc-1.6,0.7-2.8,1.1-3.5,1.3c-0.7,0.2-1.2,0.3-1.6,0.3c-1.4,0-2.1-1-2.1-3.1v-4.9c0-1.6,0.2-2.8,0.7-3.5c0.5-0.7,1.4-1.4,2.8-2.1\r\n+\t\tc3.5-1.8,7.7-3.3,12.6-4.5c4.9-1.3,10.1-1.9,15.6-1.9c11.9,0,20.6,2.7,26.2,8.1c5.5,5.4,8.3,13.6,8.3,24.6V66.4z M45.8,81.6\r\n+\t\tc3.3,0,6.7-0.6,10.3-1.8c3.6-1.2,6.8-3.4,9.5-6.4c1.6-1.9,2.8-4,3.4-6.4c0.6-2.4,1-5.3,1-8.7v-4.2c-2.9-0.7-6-1.3-9.2-1.7\r\n+\t\tc-3.2-0.4-6.3-0.6-9.4-0.6c-6.7,0-11.6,1.3-14.9,4c-3.3,2.7-4.9,6.5-4.9,11.5c0,4.7,1.2,8.2,3.7,10.6\r\n+\t\tC37.7,80.4,41.2,81.6,45.8,81.6z M126.1,92.4c-1.8,0-3-0.3-3.8-1c-0.8-0.6-1.5-2-2.1-3.9L96.7,10.2c-0.6-2-0.9-3.3-0.9-4\r\n+\t\tc0-1.6,0.8-2.5,2.4-2.5h9.8c1.9,0,3.2,0.3,3.9,1c0.8,0.6,1.4,2,2,3.9l16.8,66.2l15.6-66.2c0.5-2,1.1-3.3,1.9-3.9c0.8-0.6,2.2-1,4-1\r\n+\t\th8c1.9,0,3.2,0.3,4,1c0.8,0.6,1.5,2,1.9,3.9l15.8,67l17.3-67c0.6-2,1.3-3.3,2-3.9c0.8-0.6,2.1-1,3.9-1h9.3c1.6,0,2.5,0.8,2.5,2.5\r\n+\t\tc0,0.5-0.1,1-0.2,1.6c-0.1,0.6-0.3,1.4-0.7,2.5l-24.1,77.3c-0.6,2-1.3,3.3-2.1,3.9c-0.8,0.6-2.1,1-3.8,1h-8.6c-1.9,0-3.2-0.3-4-1\r\n+\t\tc-0.8-0.7-1.5-2-1.9-4L156,23l-15.4,64.4c-0.5,2-1.1,3.3-1.9,4c-0.8,0.7-2.2,1-4,1H126.1z M254.6,95.1c-5.2,0-10.4-0.6-15.4-1.8\r\n+\t\tc-5-1.2-8.9-2.5-11.5-4c-1.6-0.9-2.7-1.9-3.1-2.8c-0.4-0.9-0.6-1.9-0.6-2.8v-5.1c0-2.1,0.8-3.1,2.3-3.1c0.6,0,1.2,0.1,1.8,0.3\r\n+\t\tc0.6,0.2,1.5,0.6,2.5,1c3.4,1.5,7.1,2.7,11,3.5c4,0.8,7.9,1.2,11.9,1.2c6.3,0,11.2-1.1,14.6-3.3c3.4-2.2,5.2-5.4,5.2-9.5\r\n+\t\tc0-2.8-0.9-5.1-2.7-7c-1.8-1.9-5.2-3.6-10.1-5.2L246,52c-7.3-2.3-12.7-5.7-16-10.2c-3.3-4.4-5-9.3-5-14.5c0-4.2,0.9-7.9,2.7-11.1\r\n+\t\tc1.8-3.2,4.2-6,7.2-8.2c3-2.3,6.4-4,10.4-5.2c4-1.2,8.2-1.7,12.6-1.7c2.2,0,4.5,0.1,6.7,0.4c2.3,0.3,4.4,0.7,6.5,1.1\r\n+\t\tc2,0.5,3.9,1,5.7,1.6c1.8,0.6,3.2,1.2,4.2,1.8c1.4,0.8,2.4,1.6,3,2.5c0.6,0.8,0.9,1.9,0.9,3.3v4.7c0,2.1-0.8,3.2-2.3,3.2\r\n+\t\tc-0.8,0-2.1-0.4-3.8-1.2c-5.7-2.6-12.1-3.9-19.2-3.9c-5.7,0-10.2,0.9-13.3,2.8c-3.1,1.9-4.7,4.8-4.7,8.9c0,2.8,1,5.2,3,7.1\r\n+\t\tc2,1.9,5.7,3.8,11,5.5l14.2,4.5c7.2,2.3,12.4,5.5,15.5,9.6c3.1,4.1,4.6,8.8,4.6,14c0,4.3-0.9,8.2-2.6,11.6\r\n+\t\tc-1.8,3.4-4.2,6.4-7.3,8.8c-3.1,2.5-6.8,4.3-11.1,5.6C264.4,94.4,259.7,95.1,254.6,95.1z\"/>\r\n+\t<g>\r\n+\t\t<path class=\"st1\" d=\"M273.5,143.7c-32.9,24.3-80.7,37.2-121.8,37.2c-57.6,0-109.5-21.3-148.7-56.7c-3.1-2.8-0.3-6.6,3.4-4.4\r\n+\t\t\tc42.4,24.6,94.7,39.5,148.8,39.5c36.5,0,76.6-7.6,113.5-23.2C274.2,133.6,278.9,139.7,273.5,143.7z\"/>\r\n+\t\t<path class=\"st1\" d=\"M287.2,128.1c-4.2-5.4-27.8-2.6-38.5-1.3c-3.2,0.4-3.7-2.4-0.8-4.5c18.8-13.2,49.7-9.4,53.3-5\r\n+\t\t\tc3.6,4.5-1,35.4-18.6,50.2c-2.7,2.3-5.3,1.1-4.1-1.9C282.5,155.7,291.4,133.4,287.2,128.1z\"/>\r\n+\t</g>\r\n+</g>\r\n+</svg>\r"
  },
  {
    "sha": "a20fafd6a55744229df85c227e3342884c864764",
    "filename": "docs/media/metrics_terminology.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/media/metrics_terminology.png",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/media/metrics_terminology.png",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/media/metrics_terminology.png?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01"
  },
  {
    "sha": "55d7d5d0bf81135fda888b74a2ebbd983d9f9570",
    "filename": "docs/media/tracing_utility_showcase.png",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/media/tracing_utility_showcase.png",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/media/tracing_utility_showcase.png",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/media/tracing_utility_showcase.png?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01",
    "previous_filename": "docs/content/media/tracer_utility_showcase.png"
  },
  {
    "sha": "6c21eaf03a60004bcd6062666fa1600e9ac13197",
    "filename": "docs/overrides/assets/images/powertools_docs_thumbnail.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/blob/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/overrides/assets/images/powertools_docs_thumbnail.png",
    "raw_url": "https://github.com/pankajagrawal16/aws-lambda-powertools-java/raw/4f78b40cf137f3913e14cbb410fdbb394f8ccb01/docs/overrides/assets/images/powertools_docs_thumbnail.png",
    "contents_url": "https://api.github.com/repos/pankajagrawal16/aws-lambda-powertools-java/contents/docs/overrides/assets/images/powertools_docs_thumbnail.png?ref=4f78b40cf137f3913e14cbb410fdbb394f8ccb01"
  }
]
