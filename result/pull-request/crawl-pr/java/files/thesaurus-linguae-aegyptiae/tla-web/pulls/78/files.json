[
  {
    "sha": "51b1ad2f5f0a4414bf2211fe671fd9f5b7ca393f",
    "filename": ".github/workflows/integration.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/thesaurus-linguae-aegyptiae/tla-web/blob/fc28ac68a017bfc7c8e6ebc102910cb86b5b0c21/.github/workflows/integration.yml",
    "raw_url": "https://github.com/thesaurus-linguae-aegyptiae/tla-web/raw/fc28ac68a017bfc7c8e6ebc102910cb86b5b0c21/.github/workflows/integration.yml",
    "contents_url": "https://api.github.com/repos/thesaurus-linguae-aegyptiae/tla-web/contents/.github/workflows/integration.yml?ref=fc28ac68a017bfc7c8e6ebc102910cb86b5b0c21",
    "patch": "@@ -16,7 +16,7 @@ jobs:\n     - name: start backend containers\n       run: docker-compose up -d backend\n       env:\n-        SAMPLE_URL: http://aaew64.bbaw.de/resources/tla-data/tla-sample-20210113-1000t.tar.gz\n+        SAMPLE_URL: http://aaew64.bbaw.de/resources/tla-data/tla-sample-20210115-1000t.tar.gz\n         ES_PORT: 9201\n         BACKEND_PORT: 8090\n         LISTEN_PORT: 8080\n@@ -80,7 +80,7 @@ jobs:\n     - name: screenshot sentence details page\n       uses: \"flameddd/screenshots-ci-action@v1.1.1\"\n       with:\n-        url: http://localhost:8080/sentence/IBUBd2wlqrfGukOksfYWn6WXJWU#IBUBd7n4lcbxgkCyu0OfgWHfdWA\n+        url: http://localhost:8080/sentence/IBUBdQmK4memIEBelX9qTCsmuS8#IBUBdzrGyezPxknfiltJIvlQAn0\n         devices: iPhone 6,iPhone 6 landscape,Nexus 7,Pad Pro,Galaxy S III landscape,iPad Pro landscape\n         type: png\n "
  },
  {
    "sha": "acad43727f1dd03ff82f8a82da741c12ef77a7e3",
    "filename": "README.md",
    "status": "modified",
    "additions": 111,
    "deletions": 37,
    "changes": 148,
    "blob_url": "https://github.com/thesaurus-linguae-aegyptiae/tla-web/blob/fc28ac68a017bfc7c8e6ebc102910cb86b5b0c21/README.md",
    "raw_url": "https://github.com/thesaurus-linguae-aegyptiae/tla-web/raw/fc28ac68a017bfc7c8e6ebc102910cb86b5b0c21/README.md",
    "contents_url": "https://api.github.com/repos/thesaurus-linguae-aegyptiae/tla-web/contents/README.md?ref=fc28ac68a017bfc7c8e6ebc102910cb86b5b0c21",
    "patch": "@@ -7,65 +7,139 @@ TLA web frontend.\n \n Copyright (C) 2019-2021 Berlin-Brandenburgische Akademie der Wissenschaften\n \n-## Installation\n \n-There are 2 options.\n+## Usage\n \n+This Thesaurus Linguae Aegyptiae (TLA) web frontend requires an instance of the\n+corresponding [TLA backend application](https://github.com/thesaurus-linguae-aegyptiae/tla-es)\n+in order to work. You can either retrieve the TLA backend from github and run it yourself,\n+or you can utilize the [Docker Compose Setup](docker-compose.yml) shipped with this TLA frontend\n+source code repository, which contains services for population and execution of the TLA backend.\n \n-### 1. Docker\n \n-Requirements:\n+### Docker Compose Services\n \n-- Docker Compose\n+The Docker Compose setup configuration file [`docker-compose.yml`](docker-compose.yml) coming with\n+this TLA frontend source code repository defines 4 services, the first 3 of which constitute the\n+TLA backend:\n \n-Specify a URL where a `.tar.gz` archive containing TLA corpus data can be downloaded via\n-the environment variable `SAMPLE_URL` (for instance in a `.env` file).\n-Start docker containers for the entire stack with:\n+- `es`: An Elasticsearch node.\n+- `populate`: A temporary instance of the TLA backend application, used to retrieve, unpack, and index the contents of a TLA corpus data file.\n+- `backend`: The TLA backend application instance to which the TLA frontend application will actually connect.\n \n-    docker-compose up -d\n+All of these services come as individual Docker containers running processes that can be characterized as follows.\n \n-This will run Elasticsearch, a TLA backend for handling document retrieval, a temporary \n-second instance of the backend used for corpus data import, and last not least the TLA\n-web frontend.\n+The TLA backend relies on an Elasticsearch node running in the background for querying and retrieving raw TLA corpus data.\n+Elasticsearch is a search engine with built-in support for various natural languages, which is necessary for efficient\n+searches inside the TLA's text corpus und vocabularies. The Elasticsearch node, provided by the `es` service\n+defined in the Docker Compose setup inside this repository, need to be filled with TLA corpus data. This is the purpose\n+of the `populate` service. It downloads the required TLA data and starts up a temporary instance of the TLA backend\n+application, which in turn creates and configures the various Elasticsearch indices needed, stores the downloaded\n+TLA data in them, and then shuts itself down again after completion of these tasks. The `backend` service, a second\n+instance of the TLA backend application, then takes over and waits for the TLA frontend application (or any HTTP client\n+for that matter) to connect.\n \n-By default, the frontend's web interface can be accessed at port `8080`, the backend\n-at `8090`, and the backend's Elasticsearch instance at `9200`, but you may configure these\n-values to your liking via the environment variables `LISTEN_PORT`, `BACKEND_PORT`, and\n-`ES_PORT`, respectively.\n+The 4th service defined in [`docker-compose.yml`](docker-compose.yml) provides a container running the actual TLA\n+frontend application itself:\n \n+- `frontend`: An instance of the TLA frontend application implemented by this very source code repository.\n \n-### 2. Gradle\n+> Whether you make use of this containerized execution of the TLA frontend application is up to you. The alternative\n+> mode of execution using Gradle is being discussed further below.\n \n-Requirements:\n \n-- Java 11\n-- [tla-es](https://github.com/thesaurus-linguae-aegyptiae/tla-es)\n+#### Running the Docker Compose setup\n \n-Install, populate, and run the [backend](https://github.com/thesaurus-linguae-aegyptiae/tla-es) first.\n+As the `populate` service is needed to be able retrieve a TLA corpus data file in order for the\n+`backend` service to actually work, an assignment to the environment variable `SAMPLE_URL` is mandatory.\n+The value assigned to the environment variable `SAMPLE_URL` should be a URL pointing to a `.tar.gz` file\n+containing preferably recent TLA corpus data serialized to JSON files using a version of the TLA format\n+compatible to both the version of the TLA backend application, and the\n+[TLA model DTO library](https://github.com/thesaurus-linguae-aegyptiae/tla-common) used by this TLA frontend\n+application for communication with the TLA backend.\n \n+An example for the assignment of the `SAMPLE_URL` environment variable with an appropriate data source for the\n+TLA frontend version at hand would be:\n \n-Run the frontend application using the `bootRun` task from the spring boot gradle plugin\n-(on windows, you will probably need to use the native wrapper `./gradlew.bat` instead):\n+```bash\n+export SAMPLE_URL=http://aaew64.bbaw.de/resources/tla-data/tla-sample-20210115-1000t.tar.gz\n+```\n \n-    gradle bootrun\n+Alternatively, you can create a file named `.env` right inside your local folder containing this\n+`README.md`, and insert the following line:\n \n-On its first run, this will download and install third-party JS/CSS frameworks and libraries such as\n-[Bootstrap](https://getbootstrap.com/), [Font Awesome](https://fontawesome.com/), and\n-[JQuery](https://jquery.com/).\n-In order to override the respective default bundle versions of some of these, you can use the environment variables\n-shown in [`.env.template`](.env.template), e.g. by defining them in a `.env` file:\n+```ini\n+SAMPLE_URL=http://aaew64.bbaw.de/resources/tla-data/tla-sample-20210115-1000t.tar.gz\n+```\n \n-    BOOTSTRAP_VERSION=4.4.1\n-    FONTAWESOME_VERSION=5.12.1\n-    JQUERY_VERSION=3.5.0\n+Having set the `SAMPLE_URL` variable one way or another, you are ready to use Docker Compose for running either\n+all of the containers defined (including the TLA frontend), or all those required to get a TLA backend up and running\n+on your local machine.\n \n-However, this is of course optional as default versions are being defined in the\n-[build file](build.gradle).\n+For building and executing the entire stack, *including the TLA fontend*, run this command in your terminal:\n \n+```bash\n+docker-compose up --build --force-recreate -d\n+```\n \n-## Misc\n+For building and executing only the TLA backend stack, run the following. You will learn how to run the TLA frontend\n+seperately and outside of the containerized setup further down below.\n \n-You can check for the newest version of package dependencies by running:\n+```bash\n+docker-compose up --build --force-recreate -d backend\n+```\n+\n+It will take some time for Docker Compose to build and start the services required, and some additional time for\n+the `populate` service (running inside the `tla-ingest` container) to download, unpack, and store the TLA data\n+located at the URL specified via the `SAMPLE_URL` environment variable. In the meantime, you can check on the\n+`tla-ingest` container running the `populate` service with the following command:\n+\n+```bash\n+docker-compose ps\n+```\n+\n+If it takes the `tla-ingest` container longer than you anticipated to exit, you can monitor its progress by checking\n+the amount of data already uploaded into the Elasticsearch container by opening the `_cat/indices` endpoint of\n+Elasticsearch's HTTP API in a web browser:\n+\n+    http://localhost:9200/_cat/indices\n+\n+Once the populating phase of the backend setup is complete, you can check whether the TLA backend is available by\n+sending a request (for example by using your browser) to its thesaurus entry details endpoint:\n+\n+    http://localhost:8090/ths/get/7pupjz\n+\n+If the response contains a JSON representation of the TLA thesaurus term `\"Pianchi/Pije Usermaatre\"` instead of\n+an error message indicating a 404 HTTP status code or worse, the TLA backend is running and has been properly\n+populated with data.\n+\n+\n+### Run TLA frontend app using Gradle\n+\n+- Requires Java 11\n+\n+Provided a properly running TLA backend application is available, the TLA frontend application can be executed\n+using the included [build file](build.gradle). This requires a Java JDK version 11 or higher.\n+\n+This repository comes with Gradle wrappers for both Unix (`gradlew`) and Windows (`gradlew.bat`). Use the Gradle wrapper\n+appropriate for your platform in order to execute build tasks `install` defined in the build file and `bootRun`\n+from the Spring Boot Gradle plugin:\n+\n+    ./gradlew install bootrun --refresh-dependencies\n+\n+or \n+\n+    ./gradlew.bat install bootrun --refresh-dependencies\n+\n+The `bootRun` task ist configured to start up the application in `dev` mode, which disables static asset and template caches.\n+This means that modifications to file in the `templates` and `static` subdirectories of `src/main/resources` are being\n+reflected in the application's web interface without reboot.\n+\n+\n+## Configuration\n+\n+For config options and further methods of execution check out the [Dockerfile](Dockerfile),\n+the [Docker Compose file](docker-compose.yml), the [env var template file](.env.template), the\n+[Application Properties file](src/main/resources/application.yml), and the [build file](build.gradle).\n \n-    gradle dependencyUpdates\n "
  }
]
