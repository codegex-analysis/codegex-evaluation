[
  {
    "sha": "0e8a0eb36f4ca2c939201c0d54b5d82a1ea34778",
    "filename": "kubernetes/graphium-chart/.helmignore",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/.helmignore",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/.helmignore",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/.helmignore?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,23 @@\n+# Patterns to ignore when building packages.\n+# This supports shell glob matching, relative path matching, and\n+# negation (prefixed with !). Only one pattern per line.\n+.DS_Store\n+# Common VCS dirs\n+.git/\n+.gitignore\n+.bzr/\n+.bzrignore\n+.hg/\n+.hgignore\n+.svn/\n+# Common backup files\n+*.swp\n+*.bak\n+*.tmp\n+*.orig\n+*~\n+# Various IDEs\n+.project\n+.idea/\n+*.tmproj\n+.vscode/"
  },
  {
    "sha": "837536d953ee4cabe6a6a716a2ffd601e123d005",
    "filename": "kubernetes/graphium-chart/Chart.yaml",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/Chart.yaml",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/Chart.yaml",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/Chart.yaml?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,7 @@\n+apiVersion: v2\n+name: graphium\n+description: Helm chart for Graphium on Kubernetes.\n+\n+type: application\n+version: 0.1.0\n+appVersion: 1.1.0"
  },
  {
    "sha": "340ff11ad68f1d7a9bfae495ecbcb19b89911604",
    "filename": "kubernetes/graphium-chart/postgis-init/create_graphium_database.sql",
    "status": "added",
    "additions": 351,
    "deletions": 0,
    "changes": 351,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/postgis-init/create_graphium_database.sql",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/postgis-init/create_graphium_database.sql",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/postgis-init/create_graphium_database.sql?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,351 @@\n+CREATE EXTENSION IF NOT EXISTS hstore;\n+CREATE EXTENSION IF NOT EXISTS postgis;\n+\n+CREATE SCHEMA IF NOT EXISTS graphs AUTHORIZATION graphium;\n+\n+-- Table: graphs.schema_versioning\n+\n+-- DROP TABLE graphs.schema_versioning;\n+CREATE TABLE graphs.schema_versioning\n+(\n+  version integer NOT NULL,\n+  script_name character varying(255) NOT NULL,\n+  module_name character varying(255) NOT NULL DEFAULT 'graphium-core' ,\n+  execution_date timestamp with time zone NOT NULL DEFAULT now(),\n+  executor character varying(255) NOT NULL DEFAULT \"current_user\"(),\n+  CONSTRAINT graphs_schema_versioning_pk PRIMARY KEY (module_name, version)\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.schema_versioning\n+  OWNER TO graphium;\n+\n+--DROP FUNCTION graphs.graphium_version(module char);\n+CREATE FUNCTION graphs.graphium_version(module char)\n+  RETURNS integer AS $$\n+\tSELECT max(version) AS version FROM\n+\t    graphs.schema_versioning\n+\t\tWHERE module_name = module\n+$$\n+LANGUAGE SQL;\n+ALTER FUNCTION graphs.graphium_version(char)\n+  OWNER TO graphium;\n+  \n+--DROP FUNCTION graphs.graphium_version();\n+CREATE FUNCTION graphs.graphium_version()\n+  RETURNS integer AS $$\n+\tSELECT graphs.graphium_version('graphium-core');\n+$$\n+LANGUAGE SQL;\n+\n+--DROP FUNCTION graphs.db_schema_changed(version integer, script_name char, module char)\n+CREATE FUNCTION graphs.db_schema_changed(version integer, script_name char, module_name char)\n+  RETURNS void AS $$\n+  INSERT INTO graphs.schema_versioning (version, script_name, module_name) VALUES (version, script_name, module_name);\n+$$\n+LANGUAGE SQL;\n+\n+\n+--DROP FUNCTION graphs.db_schema_changed(version integer, script_name char)\n+CREATE FUNCTION graphs.db_schema_changed(version integer, script_name char)\n+  RETURNS void AS $$\n+\tSELECT graphs.db_schema_changed(version, script_name, 'graphium-core');\n+$$\n+LANGUAGE SQL;\n+\n+\n+CREATE TABLE graphs.accesses\n+(\n+  id smallint NOT NULL,\n+  \"type\" character varying(512),\n+  CONSTRAINT graphs_accesses_pk PRIMARY KEY (id)\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.accesses OWNER TO graphium;\n+\n+CREATE TABLE graphs.waysegments\n+(\n+  id bigint NOT NULL,\n+  geometry geometry,\n+  geometry_900913 geometry,\n+  name character varying(512),\n+  maxspeed_tow smallint NOT NULL,\n+  maxspeed_bkw smallint NOT NULL,\n+  speed_calc_tow smallint NOT NULL,\n+  speed_calc_bkw smallint NOT NULL,\n+  lanes_tow smallint NOT NULL DEFAULT 1,\n+  lanes_bkw smallint NOT NULL DEFAULT 1,\n+  frc smallint NOT NULL,\n+  formofway decimal(3),\n+  streettype character varying(512),\n+  way_id bigint NOT NULL,\n+  startnode_id bigint NOT NULL,\n+  startnode_index integer NOT NULL,\n+  endnode_id bigint NOT NULL,\n+  endnode_index integer NOT NULL,\n+  access_tow smallint[],\n+  access_bkw smallint[],\n+  tunnel boolean NOT NULL DEFAULT false,\n+  bridge boolean NOT NULL DEFAULT false,\n+  urban boolean,\n+  \"timestamp\" timestamp without time zone NOT NULL,\n+  tags hstore,\n+  CONSTRAINT graphs_waysegments_pk PRIMARY KEY (id)\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.waysegments OWNER TO graphium;\n+\n+CREATE TABLE graphs.waysegment_connections\n+(\n+  node_id bigint NOT NULL,\n+  from_segment_id bigint NOT NULL,\n+  to_segment_id bigint NOT NULL,\n+  access smallint[] NOT NULL,\n+  CONSTRAINT graphs_waysegment_connections_pk PRIMARY KEY (node_id, from_segment_id, to_segment_id),\n+  CONSTRAINT graphs_waysegment_connections_from_segment_id_fk FOREIGN KEY (from_segment_id)\n+      REFERENCES graphs.waysegments (id) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE NO ACTION,\n+  CONSTRAINT graphs_waysegment_connections_to_segment_id_fk FOREIGN KEY (to_segment_id)\n+      REFERENCES graphs.waysegments (id) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE NO ACTION\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.waysegment_connections OWNER TO graphium;\n+\n+CREATE TABLE graphs.waygraphs\n+(\n+  id bigserial,\n+  name character varying(255) NOT NULL,\n+  CONSTRAINT waygraphs_pk PRIMARY KEY (id),\n+  CONSTRAINT waygraphs_name_unq UNIQUE (name)\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.waygraphs OWNER TO graphium;\n+\n+CREATE TABLE graphs.sources\n+(\n+  id serial NOT NULL,\n+  name character varying(255) NOT NULL,\n+  CONSTRAINT graphs_sources_pk PRIMARY KEY (id),\n+  CONSTRAINT graphs_sources_unq UNIQUE (name)\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.sources OWNER TO graphium;\n+\n+CREATE TABLE graphs.waygraphmetadata\n+(\n+  id serial NOT NULL,\n+  graph_id bigint NOT NULL,\n+  graphname character varying(255) NOT NULL,\n+  version character varying(255) NOT NULL,\n+  origin_graphname character varying(255) NOT NULL,\n+  origin_version character varying(255) NOT NULL,\n+  state character varying(16) NOT NULL,\n+  valid_from timestamp without time zone NOT NULL,\n+  valid_to timestamp without time zone,\n+  covered_area geometry NOT NULL,\n+  segments_count integer NOT NULL DEFAULT 0,\n+  connections_count integer NOT NULL DEFAULT 0,\n+  accesstypes smallint[],\n+  tags hstore,\n+  source_id integer NOT NULL,\n+  \"type\" character varying(255),\n+  description character varying(255),\n+  creation_timestamp timestamp without time zone NOT NULL,\n+  storage_timestamp timestamp without time zone NOT NULL,\n+  creator character varying(255) NOT NULL,\n+  origin_url character varying(255),\n+  CONSTRAINT graphs_waygraphmetadata_pk PRIMARY KEY (id),\n+  CONSTRAINT graphs_waygraphmetadata_waygraphs_id_fk FOREIGN KEY (graph_id)\n+      REFERENCES graphs.waygraphs (id) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE NO ACTION,\n+  CONSTRAINT graphs_waygraphmetadata_waygraphs_name_fk FOREIGN KEY (graphname)\n+      REFERENCES graphs.waygraphs (name) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE NO ACTION,\n+  CONSTRAINT graphs_waygraphmetainfo_sources_fk FOREIGN KEY (source_id)\n+      REFERENCES graphs.sources (id) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE NO ACTION,\n+  CONSTRAINT graphs_waygraphmetadata_unq UNIQUE (graphname, version)\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.waygraphmetadata OWNER TO graphium;\n+\n+CREATE TABLE graphs.xinfo\n+(\n+  segment_id bigint NOT NULL,\n+  direction_tow boolean\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.xinfo OWNER TO graphium;\n+\n+CREATE TABLE graphs.default_xinfo\n+(\n+  segment_id bigint NOT NULL,\n+  direction_tow boolean,\n+  graphversion_id bigint,\n+  tags hstore\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.default_xinfo OWNER TO graphium;\n+\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('PEDESTRIAN', 1);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('BIKE', 2);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('PRIVATE_CAR', 3);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('PUBLIC_BUS', 4);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('RAILWAY', 5);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('TRAM', 6);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('SUBWAY', 7);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('FERRY_BOAT', 8);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('HIGH_OCCUPATION_CAR', 9);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('TRUCK', 10);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('TAXI', 11);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('EMERGENCY_VEHICLE', 12);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('MOTOR_COACH', 13);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('TROLLY_BUS', 14);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('MOTORCYCLE', 15);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('RACK_RAILWAY', 16);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('CABLE_RAILWAY', 17);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('CAR_FERRY', 18);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('CAMPER', 19);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('COMBUSTIBLES', 20);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('HAZARDOUS_TO_WATER', 21);\n+INSERT INTO graphs.accesses (\"type\", id) VALUES ('GARBAGE_COLLECTION_VEHICLE', 22);\n+\n+select graphs.db_schema_changed(1, '01_to_v1_create_base_model.sql');CREATE TABLE graphs.subscription_groups\n+(\n+  id serial NOT NULL,\n+  name character varying(255) NOT NULL,\n+  graph_id bigint NOT NULL,\n+  CONSTRAINT groups_pk PRIMARY KEY (id),\n+  CONSTRAINT groups_unq UNIQUE (name),\n+  CONSTRAINT groups_waygraphs_fk FOREIGN KEY (graph_id)\n+    REFERENCES graphs.waygraphs (id) MATCH SIMPLE\n+\tON UPDATE NO ACTION ON DELETE NO ACTION\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.subscription_groups OWNER TO graphium;\n+\n+CREATE TABLE graphs.subscriptions\n+(\n+  servername character varying(255) NOT NULL,\n+  viewname character varying(255) NOT NULL,\n+  group_id integer,\n+  url character varying(512) NOT NULL,\n+  \"user\" character varying(255),\n+  \"password\" character varying(255),\n+  \"timestamp\" timestamp with time zone DEFAULT now(),\n+  CONSTRAINT graphs_subscriptions_pk PRIMARY KEY (servername, viewname),\n+  CONSTRAINT graphs_subscriptions_groups_fk FOREIGN KEY (group_id)\n+      REFERENCES graphs.subscription_groups (id) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE NO ACTION\n+\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.subscriptions OWNER TO graphium;\n+\n+-- ONLY USED BY CENTRAL GRAPH SERVER --\n+CREATE TABLE graphs.graph_import_states\n+(\n+  servername character varying(255) NOT NULL,\n+  viewname character varying(255) NOT NULL,\n+  version character varying(255) NOT NULL,\n+  state character varying(16) NOT NULL,\n+  \"timestamp\" timestamp with time zone, \n+  CONSTRAINT graph_import_states_pk PRIMARY KEY (servername, viewname, version),\n+  CONSTRAINT graph_import_states_subscriptions_fk FOREIGN KEY (servername, viewname)\n+      REFERENCES graphs.subscriptions (servername, viewname) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE NO ACTION\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.graph_import_states OWNER TO graphium;\n+\n+select graphs.db_schema_changed(2, '02_from_v1_to_v2_create_subscriptions.sql');CREATE TABLE graphs.waygraph_view_metadata\n+(\n+  viewname character varying(255) NOT NULL,\n+  graph_id bigint NOT NULL,\n+  filter character varying(2048),\n+  covered_area geometry,\n+  segments_count integer,\n+  connections_count integer,\n+  tags hstore,\n+  creation_timestamp timestamp with time zone DEFAULT now(),\n+  CONSTRAINT graphs_waygraph_view_metadata_pk PRIMARY KEY (viewname),\n+  CONSTRAINT graphs_waygraph_view_metadata_waygraphs_fk FOREIGN KEY (graph_id)\n+      REFERENCES graphs.waygraphs (id) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE NO ACTION\n+)\n+WITH (\n+  OIDS=FALSE\n+);\n+ALTER TABLE graphs.waygraph_view_metadata OWNER TO graphium;\n+\n+select graphs.db_schema_changed(3, '03_from_v2_to_v3_create_views.sql');\n+\n+ALTER TABLE graphs.waysegments\n+  DROP COLUMN geometry_900913;\n+ALTER TABLE graphs.waysegments\n+  ADD COLUMN length real;\n+-- TODO: migrate data, set length to st_length\n+\n+UPDATE graphs.waysegments set length = ST_length(geometry,true);\n+\n+  \n+select graphs.db_schema_changed(4, '04_from_v3_to_v4_remove_geom900913_add_length.sql');ALTER TABLE graphs.waysegments\n+  ADD COLUMN graphversion_id integer;\n+ALTER TABLE graphs.waysegment_connections\n+  ADD COLUMN graphversion_id integer;\n+  \n+select graphs.db_schema_changed(5, '05_from_v4_to_v5_add_graphversion_id.sql');ALTER TABLE graphs.waygraph_view_metadata\n+  DROP COLUMN filter;\n+ALTER TABLE graphs.waygraph_view_metadata\n+  ADD COLUMN dbviewname character varying(255);\n+ALTER TABLE graphs.waygraph_view_metadata\n+  ADD COLUMN waysegments_included boolean;\n+  \n+select graphs.db_schema_changed(6, '06_from_v5_to_v6_update_view_definition.sql');ALTER TABLE graphs.graph_import_states DROP CONSTRAINT graph_import_states_subscriptions_fk;\n+\n+ALTER TABLE graphs.graph_import_states\n+  ADD CONSTRAINT graph_import_states_subscriptions_fk FOREIGN KEY (servername, viewname)\n+      REFERENCES graphs.subscriptions (servername, viewname) MATCH SIMPLE\n+      ON UPDATE NO ACTION ON DELETE CASCADE;\n+\n+select graphs.db_schema_changed(7, '07_from_v6_to_v7_correct_subscription_fk_constraints.sql');\n+\n+CREATE FUNCTION f_current_graphversion_immutable(in_graph text, in_version text)\n+  RETURNS integer AS\n+$func$\n+\tselect id as graphversion_id from graphs.waygraphmetadata\n+        where graph_id = (select graph_id as graph_id from graphs.waygraph_view_metadata  where viewname = in_graph)\n+        and\n+        case when 'null' != in_version\n+            THEN version = in_version\n+            ELSE state = 'ACTIVE'\n+\n+        END\n+        order by valid_from desc limit 1\n+$func$  LANGUAGE sql IMMUTABLE;\n+ALTER FUNCTION f_current_graphversion_immutable(text, text)\n+  OWNER TO graphium;\n\\ No newline at end of file"
  },
  {
    "sha": "c01fe945ea9ae66d9cc97cc59d5b86c7e5a4eaa0",
    "filename": "kubernetes/graphium-chart/postgis-init/postgis.sh",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/postgis-init/postgis.sh",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/postgis-init/postgis.sh",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/postgis-init/postgis.sh?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,23 @@\n+#!/bin/sh\n+\n+set -e\n+\n+# Perform all actions as $POSTGRES_USER\n+export PGUSER=\"$POSTGRES_USER\"\n+\n+# Create the 'template_postgis' template db\n+\"${psql[@]}\" <<- 'EOSQL'\n+CREATE DATABASE template_postgis;\n+UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template_postgis';\n+EOSQL\n+\n+# Load PostGIS into both template_database and $POSTGRES_DB\n+for DB in template_postgis \"$POSTGRES_DB\"; do\n+\techo \"Loading PostGIS extensions into $DB\"\n+\t\"${psql[@]}\" --dbname=\"$DB\" <<-'EOSQL'\n+\t\tCREATE EXTENSION IF NOT EXISTS postgis;\n+\t\tCREATE EXTENSION IF NOT EXISTS postgis_topology;\n+\t\tCREATE EXTENSION IF NOT EXISTS fuzzystrmatch;\n+\t\tCREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;\n+EOSQL\n+done\n\\ No newline at end of file"
  },
  {
    "sha": "4e644af171e372aeadb53abb259ddee5a9c9553a",
    "filename": "kubernetes/graphium-chart/templates/NOTES.txt",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/NOTES.txt",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/NOTES.txt",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/templates/NOTES.txt?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,22 @@\n+1. Get the application URL by running these commands:\n+{{- if .Values.ingress.enabled }}\n+{{- range $host := .Values.ingress.hosts }}\n+  {{- range .paths }}\n+  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n+  {{- end }}\n+{{- end }}\n+{{- else if contains \"NodePort\" .Values.service.type }}\n+  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"graphium-chart.fullname\" . }})\n+  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n+  echo http://$NODE_IP:$NODE_PORT/graphium/api/status\n+{{- else if contains \"LoadBalancer\" .Values.service.type }}\n+     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n+           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"graphium-chart.fullname\" . }}'\n+  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"graphium-chart.fullname\" . }} --template \"{{\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\"}}\")\n+  echo http://$SERVICE_IP:{{ .Values.service.port }}/graphium/api/status\n+{{- else if contains \"ClusterIP\" .Values.service.type }}\n+  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"graphium-chart.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n+  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n+  echo \"Visit http://127.0.0.1:8080/graphium/api/status to use your application\"\n+  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n+{{- end }}"
  },
  {
    "sha": "e199cd0417f2e790aa45abed642e57572009b4cc",
    "filename": "kubernetes/graphium-chart/templates/_helpers.tpl",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/_helpers.tpl",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/_helpers.tpl",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/templates/_helpers.tpl?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,62 @@\n+{{/*\n+Expand the name of the chart.\n+*/}}\n+{{- define \"graphium-chart.name\" -}}\n+{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" }}\n+{{- end }}\n+\n+{{/*\n+Create a default fully qualified app name.\n+We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\n+If release name contains chart name it will be used as a full name.\n+*/}}\n+{{- define \"graphium-chart.fullname\" -}}\n+{{- if .Values.fullnameOverride }}\n+{{- .Values.fullnameOverride | trunc 63 | trimSuffix \"-\" }}\n+{{- else }}\n+{{- $name := default .Chart.Name .Values.nameOverride }}\n+{{- if contains $name .Release.Name }}\n+{{- .Release.Name | trunc 63 | trimSuffix \"-\" }}\n+{{- else }}\n+{{- printf \"%s-%s\" .Release.Name $name | trunc 63 | trimSuffix \"-\" }}\n+{{- end }}\n+{{- end }}\n+{{- end }}\n+\n+{{/*\n+Create chart name and version as used by the chart label.\n+*/}}\n+{{- define \"graphium-chart.chart\" -}}\n+{{- printf \"%s-%s\" .Chart.Name .Chart.Version | replace \"+\" \"_\" | trunc 63 | trimSuffix \"-\" }}\n+{{- end }}\n+\n+{{/*\n+Common labels\n+*/}}\n+{{- define \"graphium-chart.labels\" -}}\n+helm.sh/chart: {{ include \"graphium-chart.chart\" . }}\n+{{ include \"graphium-chart.selectorLabels\" . }}\n+{{- if .Chart.AppVersion }}\n+app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}\n+{{- end }}\n+app.kubernetes.io/managed-by: {{ .Release.Service }}\n+{{- end }}\n+\n+{{/*\n+Selector labels\n+*/}}\n+{{- define \"graphium-chart.selectorLabels\" -}}\n+app.kubernetes.io/name: {{ include \"graphium-chart.name\" . }}\n+app.kubernetes.io/instance: {{ .Release.Name }}\n+{{- end }}\n+\n+{{/*\n+Create the name of the service account to use\n+*/}}\n+{{- define \"graphium-chart.serviceAccountName\" -}}\n+{{- if .Values.serviceAccount.create }}\n+{{- default (include \"graphium-chart.fullname\" .) .Values.serviceAccount.name }}\n+{{- else }}\n+{{- default \"default\" .Values.serviceAccount.name }}\n+{{- end }}\n+{{- end }}"
  },
  {
    "sha": "2aaee8b8c67f91a5bfb7d867239e4acf40583b89",
    "filename": "kubernetes/graphium-chart/templates/configmap-database.yaml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/configmap-database.yaml",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/configmap-database.yaml",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/templates/configmap-database.yaml?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,6 @@\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: {{ .Release.Name }}-postgis-init\n+data:\n+{{ (.Files.Glob \"postgis-init/*\").AsConfig | indent 2 }}\n\\ No newline at end of file"
  },
  {
    "sha": "53f9053bd467358961a9caff6f0ceda14ec4f20f",
    "filename": "kubernetes/graphium-chart/templates/deployment.yaml",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/deployment.yaml",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/deployment.yaml",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/templates/deployment.yaml?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,75 @@\n+apiVersion: apps/v1\n+kind: Deployment\n+metadata:\n+  name: {{ include \"graphium-chart.fullname\" . }}\n+  labels:\n+  {{- include \"graphium-chart.labels\" . | nindent 4 }}\n+spec:\n+  replicas: 1\n+  selector:\n+    matchLabels:\n+  {{- include \"graphium-chart.selectorLabels\" . | nindent 6 }}\n+  template:\n+    metadata:\n+      {{- with .Values.podAnnotations }}\n+      annotations:\n+      {{- toYaml . | nindent 8 }}\n+      {{- end }}\n+      labels:\n+    {{- include \"graphium-chart.selectorLabels\" . | nindent 8 }}\n+    spec:\n+      {{- with .Values.imagePullSecrets }}\n+      imagePullSecrets:\n+      {{- toYaml . | nindent 8 }}\n+      {{- end }}\n+      serviceAccountName: {{ include \"graphium-chart.serviceAccountName\" . }}\n+      securityContext:\n+      {{- toYaml .Values.podSecurityContext | nindent 8 }}\n+      containers:\n+        - name: {{ .Chart.Name }}\n+          securityContext:\n+          {{- toYaml .Values.securityContext | nindent 12 }}\n+          image: \"{{ .Values.image.repository }}:{{ .Values.image.tag }}\"\n+          imagePullPolicy: {{ .Values.image.pullPolicy }}\n+          ports:\n+            - name: http\n+              containerPort: 8080\n+              protocol: TCP\n+          env:\n+            {{- if .Values.database.enabled }}\n+            - name: \"db.url\"\n+              value: \"jdbc:postgresql://{{ .Release.Name }}-database:5432/{{ .Values.database.postgresDb }}\"\n+            - name: \"db.username\"\n+              value: \"{{ .Values.database.postgresUser }}\"\n+            - name: \"db.password\"\n+              value: \"{{ .Values.database.postgresPassword }}\"\n+            {{- else }}\n+            - name: \"db.url\"\n+              value: \"{{ .Values.graphiumCentral.dbUrl }}\"\n+            - name: \"db.username\"\n+              value: \"{{ .Values.graphiumCentral.dbUsername }}\"\n+            - name: \"db.password\"\n+              value: \"{{ .Values.graphiumCentral.dbPassword }}\"\n+          {{- end }}\n+          livenessProbe:\n+            httpGet:\n+              path: /graphium/api/status\n+              port: http\n+          readinessProbe:\n+            httpGet:\n+              path: /graphium/api/status\n+              port: http\n+          resources:\n+      {{- toYaml .Values.resources | nindent 12 }}\n+      {{- with .Values.nodeSelector }}\n+      nodeSelector:\n+      {{- toYaml . | nindent 8 }}\n+      {{- end }}\n+      {{- with .Values.affinity }}\n+      affinity:\n+      {{- toYaml . | nindent 8 }}\n+      {{- end }}\n+      {{- with .Values.tolerations }}\n+      tolerations:\n+      {{- toYaml . | nindent 8 }}\n+  {{- end }}"
  },
  {
    "sha": "b1aa5e55d70ccbb214627d780277d7b89394107c",
    "filename": "kubernetes/graphium-chart/templates/ingress.yaml",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/ingress.yaml",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/ingress.yaml",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/templates/ingress.yaml?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,41 @@\n+{{- if .Values.ingress.enabled -}}\n+{{- $fullName := include \"graphium-chart.fullname\" . -}}\n+{{- $svcPort := .Values.service.port -}}\n+{{- if semverCompare \">=1.14-0\" .Capabilities.KubeVersion.GitVersion -}}\n+apiVersion: networking.k8s.io/v1beta1\n+{{- else -}}\n+apiVersion: extensions/v1beta1\n+{{- end }}\n+kind: Ingress\n+metadata:\n+  name: {{ $fullName }}\n+  labels:\n+    {{- include \"graphium-chart.labels\" . | nindent 4 }}\n+  {{- with .Values.ingress.annotations }}\n+  annotations:\n+    {{- toYaml . | nindent 4 }}\n+  {{- end }}\n+spec:\n+  {{- if .Values.ingress.tls }}\n+  tls:\n+    {{- range .Values.ingress.tls }}\n+    - hosts:\n+        {{- range .hosts }}\n+        - {{ . | quote }}\n+        {{- end }}\n+      secretName: {{ .secretName }}\n+    {{- end }}\n+  {{- end }}\n+  rules:\n+    {{- range .Values.ingress.hosts }}\n+    - host: {{ .host | quote }}\n+      http:\n+        paths:\n+          {{- range .paths }}\n+          - path: {{ .path }}\n+            backend:\n+              serviceName: {{ $fullName }}\n+              servicePort: {{ $svcPort }}\n+          {{- end }}\n+    {{- end }}\n+  {{- end }}"
  },
  {
    "sha": "306b5f4b60bb509f843c9910cd2c5b8b8067cfaf",
    "filename": "kubernetes/graphium-chart/templates/service.yaml",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/service.yaml",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/service.yaml",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/templates/service.yaml?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,15 @@\n+apiVersion: v1\n+kind: Service\n+metadata:\n+  name: {{ include \"graphium-chart.fullname\" . }}\n+  labels:\n+    {{- include \"graphium-chart.labels\" . | nindent 4 }}\n+spec:\n+  type: {{ .Values.service.type }}\n+  ports:\n+    - port: {{ .Values.service.port }}\n+      targetPort: http\n+      protocol: TCP\n+      name: http\n+  selector:\n+    {{- include \"graphium-chart.selectorLabels\" . | nindent 4 }}"
  },
  {
    "sha": "afd5f937b8ccaea3be7382a29370996d4eb62281",
    "filename": "kubernetes/graphium-chart/templates/serviceaccount.yaml",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/serviceaccount.yaml",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/serviceaccount.yaml",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/templates/serviceaccount.yaml?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,12 @@\n+{{- if .Values.serviceAccount.create -}}\n+apiVersion: v1\n+kind: ServiceAccount\n+metadata:\n+  name: {{ include \"graphium-chart.serviceAccountName\" . }}\n+  labels:\n+    {{- include \"graphium-chart.labels\" . | nindent 4 }}\n+  {{- with .Values.serviceAccount.annotations }}\n+  annotations:\n+    {{- toYaml . | nindent 4 }}\n+  {{- end }}\n+{{- end }}"
  },
  {
    "sha": "2a28e79288b21257c12344ebae0d8f29c6d5283e",
    "filename": "kubernetes/graphium-chart/templates/statefulset-database.yaml",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/statefulset-database.yaml",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/templates/statefulset-database.yaml",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/templates/statefulset-database.yaml?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,61 @@\n+{{- if .Values.database.enabled -}}\n+apiVersion: v1\n+kind: Service\n+metadata:\n+  name: {{ .Release.Name }}-database\n+  labels:\n+    app: {{ .Release.Name }}-database\n+spec:\n+  ports:\n+    - name: postgis\n+      protocol: TCP\n+      port: 5432\n+  selector:\n+    app: {{ .Release.Name }}-database\n+---\n+apiVersion: apps/v1\n+kind: StatefulSet\n+metadata:\n+  name: {{ .Release.Name }}-database\n+spec:\n+  serviceName: {{ .Release.Name }}-database\n+  replicas: 1\n+  selector:\n+    matchLabels:\n+      app: {{ .Release.Name }}-database\n+  template:\n+    metadata:\n+      labels:\n+        app: {{ .Release.Name }}-database\n+    spec:\n+      volumes:\n+        - name: postgis-init\n+          configMap:\n+            name: {{ .Release.Name }}-postgis-init\n+      containers:\n+        - name: {{ .Release.Name }}-database\n+          image: {{ .Values.database.image }}\n+          ports:\n+            - containerPort: 5432\n+              name: postgis\n+          env:\n+            - name: POSTGRES_USER\n+              value: {{ .Values.database.postgresUser }}\n+            - name: POSTGRES_PASSWORD\n+              value: {{ .Values.database.postgresPassword }}\n+            - name: POSTGRES_DB\n+              value: {{ .Values.database.postgresDb }}\n+          volumeMounts:\n+            - name: pgdata\n+              mountPath: /var/lib/postgresql/data\n+            - name: postgis-init\n+              mountPath: \"/docker-entrypoint-initdb.d/\"\n+  volumeClaimTemplates:\n+    - metadata:\n+        name: pgdata\n+      spec:\n+        accessModes: [ \"ReadWriteOnce\" ]\n+        resources:\n+          requests:\n+            storage: {{ .Values.database.volumeSize }}\n+  {{- end }}\n\\ No newline at end of file"
  },
  {
    "sha": "2c075b878e8ed2543817e7ab11fe9e7417e205f7",
    "filename": "kubernetes/graphium-chart/values.yaml",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/graphium-project/graphium/blob/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/values.yaml",
    "raw_url": "https://github.com/graphium-project/graphium/raw/7ac85379c7a5c18f4aaf99b979f0f4e992b431a1/kubernetes/graphium-chart/values.yaml",
    "contents_url": "https://api.github.com/repos/graphium-project/graphium/contents/kubernetes/graphium-chart/values.yaml?ref=7ac85379c7a5c18f4aaf99b979f0f4e992b431a1",
    "patch": "@@ -0,0 +1,74 @@\n+image:\n+  repository: graphiumproject/graphium\n+  pullPolicy: IfNotPresent\n+  tag: \"v1.1.0\"\n+\n+imagePullSecrets: [ ]\n+nameOverride: \"\"\n+fullnameOverride: \"\"\n+\n+serviceAccount:\n+  # Specifies whether a service account should be created\n+  create: true\n+  # Annotations to add to the service account\n+  annotations: { }\n+  # The name of the service account to use.\n+  # If not set and create is true, a name is generated using the fullname template\n+  name: \"\"\n+\n+podAnnotations: { }\n+\n+podSecurityContext: { }\n+# fsGroup: 2000\n+\n+securityContext: { }\n+  # capabilities:\n+  #   drop:\n+  #   - ALL\n+  # readOnlyRootFilesystem: true\n+  # runAsNonRoot: true\n+# runAsUser: 1000\n+\n+service:\n+  type: ClusterIP\n+  port: 8080\n+\n+ingress:\n+  enabled: false\n+  annotations: { }\n+    # kubernetes.io/ingress.class: nginx\n+  # kubernetes.io/tls-acme: \"true\"\n+  hosts:\n+    - host: graphium-chart.local\n+      paths: [ ]\n+  tls: [ ]\n+  #  - secretName: chart-example-tls\n+  #    hosts:\n+  #      - chart-example.local\n+\n+resources: { }\n+  # limits:\n+  #   cpu: 100m\n+  #   memory: 128Mi\n+  # requests:\n+  #   cpu: 100m\n+#   memory: 128Mi\n+\n+nodeSelector: { }\n+\n+tolerations: [ ]\n+\n+affinity: { }\n+\n+graphiumCentral:\n+  dbUrl: \"jdbc:postgresql://database:5432/graphium\"\n+  dbUsername: \"graphium\"\n+  dbPassword: \"graphium\"\n+\n+database:\n+  enabled: true\n+  image: mdillon/postgis:11\n+  postgresUser: graphium\n+  postgresPassword: graphium\n+  postgresDb: graphium\n+  volumeSize: 1Gi\n\\ No newline at end of file"
  }
]
