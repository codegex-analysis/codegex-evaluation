[
  {
    "sha": "1e93c4d3b7d41bf096c75f9015f7fdcc18e9f9a6",
    "filename": "lib/logstash/filters/useragent.rb",
    "status": "modified",
    "additions": 23,
    "deletions": 21,
    "changes": 44,
    "blob_url": "https://github.com/logstash-plugins/logstash-filter-useragent/blob/452e19a8f211435eb58102b5734e8a3fd8cdb24c/lib/logstash/filters/useragent.rb",
    "raw_url": "https://github.com/logstash-plugins/logstash-filter-useragent/raw/452e19a8f211435eb58102b5734e8a3fd8cdb24c/lib/logstash/filters/useragent.rb",
    "contents_url": "https://api.github.com/repos/logstash-plugins/logstash-filter-useragent/contents/lib/logstash/filters/useragent.rb?ref=452e19a8f211435eb58102b5734e8a3fd8cdb24c",
    "patch": "@@ -1,9 +1,7 @@\n # encoding: utf-8\n-require \"java\"\n require \"logstash-filter-useragent_jars\"\n require \"logstash/filters/base\"\n require \"logstash/namespace\"\n-require \"tempfile\"\n require \"thread\"\n \n # Parse user agent strings into structured data based on BrowserScope data\n@@ -88,8 +86,10 @@ def filter(event)\n \n     begin\n       ua_data = lookup_useragent(useragent)\n-    rescue StandardError => e\n-      @logger.error(\"Uknown error while parsing user agent data\", :exception => e, :field => @source, :event => event)\n+    rescue => e\n+      @logger.error(\"Unknown error while parsing user agent data\",\n+                    :exception => e.class, :message => e.message, :backtrace => e.backtrace,\n+                    :field => @source, :event => event.to_hash)\n       return\n     end\n \n@@ -101,47 +101,49 @@ def filter(event)\n     filter_matched(event)\n   end\n \n-  # should be private but need to stay public for specs\n-  # TODO: (colin) the related specs should be refactored to not rely on private methods.\n-  def lookup_useragent(useragent)\n-    return unless useragent\n+  private\n \n+  def lookup_useragent(useragent)\n     # the UserAgentParser::Parser class is not thread safe, indications are that it is probably\n     # caused by the underlying JRuby regex code that is not thread safe.\n     # see https://github.com/logstash-plugins/logstash-filter-useragent/issues/25\n     @parser.parse(useragent)\n   end\n \n-  private\n-\n   def set_fields(event, ua_data)\n     # UserAgentParser outputs as US-ASCII.\n \n-    event.set(@prefixed_name, ua_data.userAgent.family.dup.force_encoding(Encoding::UTF_8))\n+    event.set(@prefixed_name, duped_string(ua_data.userAgent.family))\n \n     #OSX, Android and maybe iOS parse correctly, ua-agent parsing for Windows does not provide this level of detail\n \n     # Calls in here use #dup because there's potential for later filters to modify these values\n     # and corrupt the cache. See uap source here for details https://github.com/ua-parser/uap-ruby/tree/master/lib/user_agent_parser\n-    if (os = ua_data.os)\n+    os = ua_data.os\n+    if os\n       # The OS is a rich object\n-      event.set(@prefixed_os, ua_data.os.family.dup.force_encoding(Encoding::UTF_8))\n-      event.set(@prefixed_os_name, os.family.dup.force_encoding(Encoding::UTF_8)) if os.family\n+      event.set(@prefixed_os, duped_string(os.family))\n+      event.set(@prefixed_os_name, duped_string(os.family)) if os.family\n \n       # These are all strings\n       if os.minor && os.major\n-        event.set(@prefixed_os_major, os.major.dup.force_encoding(Encoding::UTF_8)) if os.major\n-        event.set(@prefixed_os_minor, os.minor.dup.force_encoding(Encoding::UTF_8)) if os.minor\n+        event.set(@prefixed_os_major, duped_string(os.major)) if os.major\n+        event.set(@prefixed_os_minor, duped_string(os.minor)) if os.minor\n       end\n     end\n \n     event.set(@prefixed_device, ua_data.device.to_s.dup.force_encoding(Encoding::UTF_8)) if ua_data.device\n \n-    if (ua_version = ua_data.userAgent)\n-      event.set(@prefixed_major, ua_version.major.dup.force_encoding(Encoding::UTF_8)) if ua_version.major\n-      event.set(@prefixed_minor, ua_version.minor.dup.force_encoding(Encoding::UTF_8)) if ua_version.minor\n-      event.set(@prefixed_patch, ua_version.patch.dup.force_encoding(Encoding::UTF_8)) if ua_version.patch\n-      event.set(@prefixed_build, ua_version.patchMinor.dup.force_encoding(Encoding::UTF_8)) if ua_version.patchMinor\n+    ua_version = ua_data.userAgent\n+    if ua_version\n+      event.set(@prefixed_major, duped_string(ua_version.major)) if ua_version.major\n+      event.set(@prefixed_minor, duped_string(ua_version.minor)) if ua_version.minor\n+      event.set(@prefixed_patch, duped_string(ua_version.patch)) if ua_version.patch\n+      event.set(@prefixed_build, duped_string(ua_version.patchMinor)) if ua_version.patchMinor\n     end\n   end\n+\n+  def duped_string(str)\n+    str.dup.force_encoding(Encoding::UTF_8)\n+  end\n end"
  },
  {
    "sha": "63a0f27b692e73607ac7d29b03ab60a4a5f30cef",
    "filename": "logstash-filter-useragent.gemspec",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/logstash-plugins/logstash-filter-useragent/blob/452e19a8f211435eb58102b5734e8a3fd8cdb24c/logstash-filter-useragent.gemspec",
    "raw_url": "https://github.com/logstash-plugins/logstash-filter-useragent/raw/452e19a8f211435eb58102b5734e8a3fd8cdb24c/logstash-filter-useragent.gemspec",
    "contents_url": "https://api.github.com/repos/logstash-plugins/logstash-filter-useragent/contents/logstash-filter-useragent.gemspec?ref=452e19a8f211435eb58102b5734e8a3fd8cdb24c",
    "patch": "@@ -23,6 +23,5 @@ Gem::Specification.new do |s|\n   # Gem dependencies\n   s.add_runtime_dependency \"logstash-core-plugin-api\", \">= 1.60\", \"<= 2.99\"\n   s.add_development_dependency 'logstash-devutils'\n-  s.add_development_dependency 'insist'\n end\n "
  },
  {
    "sha": "c594fcd13cca04485bc08adbb2c2d9da798afa17",
    "filename": "spec/filters/useragent_spec.rb",
    "status": "modified",
    "additions": 63,
    "deletions": 40,
    "changes": 103,
    "blob_url": "https://github.com/logstash-plugins/logstash-filter-useragent/blob/452e19a8f211435eb58102b5734e8a3fd8cdb24c/spec/filters/useragent_spec.rb",
    "raw_url": "https://github.com/logstash-plugins/logstash-filter-useragent/raw/452e19a8f211435eb58102b5734e8a3fd8cdb24c/spec/filters/useragent_spec.rb",
    "contents_url": "https://api.github.com/repos/logstash-plugins/logstash-filter-useragent/contents/spec/filters/useragent_spec.rb?ref=452e19a8f211435eb58102b5734e8a3fd8cdb24c",
    "patch": "@@ -1,11 +1,13 @@\n # encoding: utf-8\n-\n require \"logstash/devutils/rspec/spec_helper\"\n-require \"insist\"\n require \"logstash/filters/useragent\"\n \n describe LogStash::Filters::UserAgent do\n \n+  subject { LogStash::Filters::UserAgent.new(options) }\n+\n+  let(:options) { { \"source\" => \"foo\" } }\n+\n   describe \"defaults\" do\n     config <<-CONFIG\n       filter {\n@@ -17,22 +19,26 @@\n     CONFIG\n \n     sample \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31\" do\n-      insist { subject }.include?(\"ua\")\n-      insist { subject.get(\"[ua][name]\") } == \"Chrome\"\n-      insist { subject.get(\"[ua][os]\") } == \"Linux\"\n-      insist { subject.get(\"[ua][major]\") } == \"26\"\n-      insist { subject.get(\"[ua][minor]\") } == \"0\"\n+      expect( subject.to_hash ).to include(\"ua\")\n+      expect( subject.get(\"[ua][name]\") ).to eql \"Chrome\"\n+      expect( subject.get(\"[ua][os]\") ).to eql \"Linux\"\n+      expect( subject.get(\"[ua][major]\") ).to eql \"26\"\n+      expect( subject.get(\"[ua][minor]\") ).to eql \"0\"\n+\n+      expect( subject.get(\"[ua][minor]\").encoding ).to eql Encoding::UTF8\n     end\n \n     sample \"MacOutlook/16.24.0.190414 (Intelx64 Mac OS X Version 10.14.4 (Build 18E226))\" do\n-      insist { subject }.include?(\"ua\")\n-      insist { subject.get(\"[ua][name]\") } == \"MacOutlook\"\n-      insist { subject.get(\"[ua][major]\") } == \"16\"\n-      insist { subject.get(\"[ua][minor]\") } == \"24\"\n-      insist { subject.get(\"[ua][os]\") } == \"Mac OS X\"\n-      insist { subject.get(\"[ua][os_name]\") } == \"Mac OS X\"\n-      insist { subject.get(\"[ua][os_major]\") } == \"10\"\n-      insist { subject.get(\"[ua][os_minor]\") } == \"14\"\n+      expect( subject.to_hash ).to include(\"ua\")\n+      expect( subject.get(\"[ua][name]\") ).to eql \"MacOutlook\"\n+      expect( subject.get(\"[ua][major]\") ).to eql \"16\"\n+      expect( subject.get(\"[ua][minor]\") ).to eql \"24\"\n+      expect( subject.get(\"[ua][os]\") ).to eql \"Mac OS X\"\n+      expect( subject.get(\"[ua][os_name]\") ).to eql \"Mac OS X\"\n+      expect( subject.get(\"[ua][os_major]\") ).to eql \"10\"\n+      expect( subject.get(\"[ua][os_minor]\") ).to eql \"14\"\n+\n+      expect( subject.get(\"[ua][os_minor]\").encoding ).to eql Encoding::UTF8\n     end\n   end\n \n@@ -48,11 +54,11 @@\n     CONFIG\n \n     sample \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31\" do\n-      insist { subject }.include?(\"ua\")\n-      insist { subject.get(\"[ua][name]\") } == \"Chrome\"\n-      insist { subject.get(\"[ua][os]\") } == \"Linux\"\n-      insist { subject.get(\"[ua][major]\") } == \"26\"\n-      insist { subject.get(\"[ua][minor]\") } == \"0\"\n+      expect( subject.to_hash ).to include(\"ua\")\n+      expect( subject.get(\"[ua][name]\") ).to eql \"Chrome\"\n+      expect( subject.get(\"[ua][os]\") ).to eql \"Linux\"\n+      expect( subject.get(\"[ua][major]\") ).to eql \"26\"\n+      expect( subject.get(\"[ua][minor]\") ).to eql \"0\"\n     end\n   end\n   \n@@ -66,10 +72,10 @@\n     CONFIG\n \n     sample \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31\" do\n-      insist { subject.get(\"name\") } == \"Chrome\"\n-      insist { subject.get(\"os\") } == \"Linux\"\n-      insist { subject.get(\"major\") } == \"26\"\n-      insist { subject.get(\"minor\") } == \"0\"\n+      expect( subject.get(\"name\") ).to eql \"Chrome\"\n+      expect( subject.get(\"os\") ).to eql \"Linux\"\n+      expect( subject.get(\"major\") ).to eql \"26\"\n+      expect( subject.get(\"minor\") ).to eql \"0\"\n     end\n   end\n \n@@ -84,29 +90,28 @@\n     CONFIG\n \n     sample \"foo\" => \"bar\" do\n-      reject { subject }.include?(\"ua\")\n+      expect( subject.to_hash ).to_not include(\"ua\")\n     end\n \n     sample \"\" do\n-      reject { subject }.include?(\"ua\")\n+      expect( subject.to_hash ).to_not include(\"ua\")\n     end\n   end\n \n+  let(:ua_string) { \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\" }\n+  let(:event) { LogStash::Event.new(\"foo\" => ua_string) }\n+\n   describe \"LRU object identity\" do\n-    let(:ua_string) { \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\" }\n-    let(:uafilter) { LogStash::Filters::UserAgent.new(\"source\" => \"foo\") }\n-    let(:ua_data) { uafilter.lookup_useragent(ua_string) }\n \n-    subject(:target) { LogStash::Event.new(\"foo\" => ua_string) }\n+    let(:ua_data) { subject.send :lookup_useragent, ua_string }\n \n     before do\n-      uafilter.register\n+      subject.register\n \n       # Stub this out because this UA doesn't have this field\n       allow(ua_data.userAgent).to receive(:patchMinor).and_return(\"foo\")\n \n-      # expect(event).receive(:lookup_useragent)\n-      uafilter.filter(target)\n+      subject.filter(event)\n     end\n \n     {\n@@ -122,8 +127,8 @@\n       \"build\" => lambda {|uad| uad.userAgent.patchMinor}\n     }.each do |field, uad_getter|\n       context \"for the #{field} field\" do\n-        let(:value) {uad_getter.call(ua_data)}\n-        let(:target_field) { target.get(field)}\n+        let(:value) { uad_getter.call(ua_data) }\n+        let(:target_field) { event.get(field) }\n \n         it \"should not have a nil value\" do\n           expect(target_field).to be_truthy\n@@ -136,6 +141,10 @@\n         it \"should dup/clone the field to prevent cache corruption\" do\n           expect(target_field.object_id).not_to eql(value.object_id)\n         end\n+\n+        it \"should be an utf-8 string\" do\n+          expect(target_field.encoding).to be Encoding::UTF8\n+        end\n       end\n     end\n   end\n@@ -151,11 +160,25 @@\n     CONFIG\n \n     sample \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31\" do\n-      insist { subject.to_hash }.include?(\"message\")\n-      insist { subject.get(\"[message][name]\") } == \"Chrome\"\n-      insist { subject.get(\"[message][os]\") } == \"Linux\"\n-      insist { subject.get(\"[message][major]\") } == \"26\"\n-      insist { subject.get(\"[message][minor]\") } == \"0\"\n+      expect( subject.to_hash ).to include(\"message\")\n+      expect( subject.get(\"[message][name]\") ).to eql \"Chrome\"\n+      expect( subject.get(\"[message][os]\") ).to eql \"Linux\"\n+      expect( subject.get(\"[message][major]\") ).to eql \"26\"\n+      expect( subject.get(\"[message][minor]\") ).to eql \"0\"\n     end\n   end\n+\n+  context 'exception handling' do\n+\n+    before do\n+      subject.register\n+      expect(subject).to receive(:lookup_useragent).and_raise RuntimeError.new('this is a test')\n+    end\n+\n+    it 'errors do not propagate' do\n+      expect(subject.logger).to receive(:error).with(/Unknown error while parsing user agent data/, hash_including(exception: RuntimeError, message: 'this is a test'))\n+      expect { subject.filter(event) }.not_to raise_error\n+    end\n+\n+  end\n end"
  }
]
