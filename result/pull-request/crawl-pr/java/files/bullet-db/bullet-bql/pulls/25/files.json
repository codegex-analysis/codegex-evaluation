[
  {
    "sha": "ea2c93a38d60ccd0d2632c74c62bfd3146942e49",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/pom.xml",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/pom.xml",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/pom.xml?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -36,7 +36,7 @@\n         <java.version>1.8</java.version>\n         <maven.compiler.source>1.8</maven.compiler.source>\n         <maven.compiler.target>1.8</maven.compiler.target>\n-        <bullet.core.version>1.2.0</bullet.core.version>\n+        <bullet.core.version>1.2.1-SNAPSHOT</bullet.core.version>\n         <air.main.basedir>${project.basedir}</air.main.basedir>\n     </properties>\n "
  },
  {
    "sha": "d9ba3b4bb071ef6228634911a56c76e5dabff2b3",
    "filename": "src/main/antlr4/com/yahoo/bullet/bql/parser/BQLBase.g4",
    "status": "modified",
    "additions": 21,
    "deletions": 11,
    "changes": 32,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/antlr4/com/yahoo/bullet/bql/parser/BQLBase.g4",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/antlr4/com/yahoo/bullet/bql/parser/BQLBase.g4",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/antlr4/com/yahoo/bullet/bql/parser/BQLBase.g4?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -59,21 +59,22 @@ include\n \n expression\n     : valueExpression                                                                                                   #value\n-    | fieldExpression                                                                                                   #field\n+    | fieldExpression (':' fieldType)?                                                                                  #field\n+    | subFieldExpression (':' fieldType)?                                                                               #subField\n+    | subSubFieldExpression (':' fieldType)?                                                                            #subSubField\n     | listExpression                                                                                                    #list\n-    | expression IS NULL                                                                                                #nullPredicate\n-    | expression IS NOT NULL                                                                                            #nullPredicate\n     | unaryExpression                                                                                                   #unary\n     | functionExpression                                                                                                #function\n-    | left=expression modifier=NOT? op=IN right=expression                                                              #infix\n-    | left=expression op=RLIKE modifier=ANY? right=expression                                                           #infix\n+    | expression IS NOT? NULL                                                                                           #nullPredicate\n     | left=expression op=(ASTERISK | SLASH) right=expression                                                            #infix\n     | left=expression op=(PLUS | MINUS) right=expression                                                                #infix\n     | left=expression op=(LT | LTE | GT | GTE) modifier=(ANY | ALL)? right=expression                                   #infix\n     | left=expression op=(EQ | NEQ) modifier=(ANY | ALL)? right=expression                                              #infix\n     | left=expression op=AND right=expression                                                                           #infix\n     | left=expression op=XOR right=expression                                                                           #infix\n     | left=expression op=OR right=expression                                                                            #infix\n+    | left=expression NOT? op=RLIKE modifier=ANY? right=expression                                                      #infix\n+    | left=expression NOT? op=IN (right=expression | '(' expressions ')')                                               #infixIn\n     | '(' expression ')'                                                                                                #parentheses\n     ;\n \n@@ -89,11 +90,20 @@ valueExpression\n     ;\n \n fieldExpression\n-    : field=identifier (':' fieldType)?\n-    | field=identifier '[' index=INTEGER_VALUE ']' (':' fieldType)?\n-    | field=identifier '[' index=INTEGER_VALUE ']' '.' subKey=identifier (':' fieldType)?\n-    | field=identifier '.' key=identifier (':' fieldType)?\n-    | field=identifier '.' key=identifier '.' subKey=identifier (':' fieldType)?\n+    : field=identifier\n+    ;\n+\n+subFieldExpression\n+    : field=fieldExpression '[' index=INTEGER_VALUE ']'\n+    | field=fieldExpression '[' stringKey=STRING ']'\n+    | field=fieldExpression '[' expressionKey=expression ']'\n+    | field=fieldExpression '.' key=identifier\n+    ;\n+\n+subSubFieldExpression\n+    : subField=subFieldExpression '[' stringKey=STRING ']'\n+    | subField=subFieldExpression '[' expressionKey=expression ']'\n+    | subField=subFieldExpression '.' key=identifier\n     ;\n \n listExpression\n@@ -235,7 +245,7 @@ STRING_TYPE: 'STRING';\n LIST_TYPE: 'LIST';\n MAP_TYPE: 'MAP';\n \n-EQ  : '=';\n+EQ  : '=' | '==';\n NEQ : '<>' | '!=';\n LT  : '<';\n LTE : '<=';"
  },
  {
    "sha": "a59a2a2a1fd0484bae59a42726efaee4d7a2a940",
    "filename": "src/main/java/com/yahoo/bullet/bql/parser/ASTBuilder.java",
    "status": "modified",
    "additions": 90,
    "deletions": 27,
    "changes": 117,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/parser/ASTBuilder.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/parser/ASTBuilder.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/parser/ASTBuilder.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -128,26 +128,65 @@ public Node visitInclude(BQLBaseParser.IncludeContext context) {\n     @Override\n     public Node visitFieldExpression(BQLBaseParser.FieldExpressionContext context) {\n         IdentifierNode field = (IdentifierNode) visit(context.field);\n+        NodeLocation location = getLocation(context);\n+        return new FieldExpressionNode(field, null, location);\n+    }\n+\n+    @Override\n+    public Node visitSubFieldExpression(BQLBaseParser.SubFieldExpressionContext context) {\n+        FieldExpressionNode field = (FieldExpressionNode) visit(context.field);\n         Integer index = context.index != null ? Integer.valueOf(context.index.getText()) : null;\n         IdentifierNode key = (IdentifierNode) visitIfPresent(context.key);\n-        IdentifierNode subKey = (IdentifierNode) visitIfPresent(context.subKey);\n-        Type type = getType(context.fieldType());\n+        ExpressionNode expressionKey = (ExpressionNode) visitIfPresent(context.expressionKey);\n+        String stringKey = getTextIfPresent(context.stringKey);\n         NodeLocation location = getLocation(context);\n-        Type superType = type != null ? Type.UNKNOWN : null;\n-        /*\n-        Builds a subfield or a field expression node\n-        - abc[0].def has a subkey and is therefore a subfield of a subfield of a field\n-        - abc.def has just a key and is therefore a subfield of a field\n-        - abc[0] has just an index and is therefore a subfield of a field\n-        - abc is just a field\n-        */\n-        if (subKey != null) {\n-            return new SubFieldExpressionNode(new SubFieldExpressionNode(new FieldExpressionNode(field, superType, location), index, key, superType, location), null, subKey, type, location);\n-        } else if (index != null || key != null) {\n-            return new SubFieldExpressionNode(new FieldExpressionNode(field, superType, location), index, key, type, location);\n-        } else {\n-            return new FieldExpressionNode(field, type, location);\n+        return new SubFieldExpressionNode(field, index, key, expressionKey, stringKey != null ? unquoteSingle(stringKey) : null, null, location);\n+    }\n+\n+    @Override\n+    public Node visitSubSubFieldExpression(BQLBaseParser.SubSubFieldExpressionContext context) {\n+        SubFieldExpressionNode field = (SubFieldExpressionNode) visit(context.subField);\n+        IdentifierNode key = (IdentifierNode) visitIfPresent(context.key);\n+        ExpressionNode expressionKey = (ExpressionNode) visitIfPresent(context.expressionKey);\n+        String stringKey = getTextIfPresent(context.stringKey);\n+        NodeLocation location = getLocation(context);\n+        return new SubFieldExpressionNode(field, null, key, expressionKey, stringKey != null ? unquoteSingle(stringKey) : null, null, location);\n+    }\n+\n+    @Override\n+    public Node visitField(BQLBaseParser.FieldContext context) {\n+        FieldExpressionNode field = (FieldExpressionNode) visit(context.fieldExpression());\n+        Type type = getType(context.fieldType());\n+        if (type != null) {\n+            field.setType(type);\n+        }\n+        return field;\n+    }\n+\n+    @Override\n+    public Node visitSubField(BQLBaseParser.SubFieldContext context) {\n+        SubFieldExpressionNode subField = (SubFieldExpressionNode) visit(context.subFieldExpression());\n+        Type type = getType(context.fieldType());\n+        if (type != null) {\n+            FieldExpressionNode field = (FieldExpressionNode) subField.getField();\n+            subField.setType(type);\n+            field.setType(Type.UNKNOWN);\n         }\n+        return subField;\n+    }\n+\n+    @Override\n+    public Node visitSubSubField(BQLBaseParser.SubSubFieldContext context) {\n+        SubFieldExpressionNode subSubField = (SubFieldExpressionNode) visit(context.subSubFieldExpression());\n+        Type type = getType(context.fieldType());\n+        if (type != null) {\n+            SubFieldExpressionNode subField = (SubFieldExpressionNode) subSubField.getField();\n+            FieldExpressionNode field = (FieldExpressionNode) subField.getField();\n+            subSubField.setType(type);\n+            subField.setType(Type.UNKNOWN);\n+            field.setType(Type.UNKNOWN);\n+        }\n+        return subSubField;\n     }\n \n     @Override\n@@ -236,14 +275,35 @@ public Node visitCast(BQLBaseParser.CastContext context) {\n     public Node visitInfix(BQLBaseParser.InfixContext context) {\n         return new BinaryExpressionNode((ExpressionNode) visit(context.left),\n                                         (ExpressionNode) visit(context.right),\n-                                        getOperation(context.op, context.modifier),\n+                                        getOperation(context.op, context.modifier, context.NOT() != null),\n+                                        getLocation(context));\n+    }\n+\n+    @Override\n+    public Node visitInfixIn(BQLBaseParser.InfixInContext context) {\n+        ExpressionNode rightNode;\n+        if (context.right != null) {\n+            // If the right operand is a parentheses-wrapped expression, treat it as a singleton list.\n+            if (context.right instanceof BQLBaseParser.ParenthesesContext) {\n+                ExpressionNode innerNode = (ExpressionNode) visit(((BQLBaseParser.ParenthesesContext) context.right).expression());\n+                rightNode = new ListExpressionNode(Collections.singletonList(innerNode), true, getLocation(context.right));\n+            } else {\n+                rightNode = (ExpressionNode) visit(context.right);\n+            }\n+        } else {\n+            rightNode = new ListExpressionNode(visitExpressionsList(context.expressions()), true, getLocation(context.expressions()));\n+        }\n+        return new BinaryExpressionNode((ExpressionNode) visit(context.left),\n+                                        rightNode,\n+                                        getOperation(context.op, null, context.NOT() != null),\n                                         getLocation(context));\n     }\n \n     @Override\n     public Node visitParentheses(BQLBaseParser.ParenthesesContext context) {\n-        ExpressionNode expression = (ExpressionNode) visit(context.expression());\n-        if (expression instanceof BinaryExpressionNode) {\n+        BQLBaseParser.ExpressionContext expressionContext = context.expression();\n+        ExpressionNode expression = (ExpressionNode) visit(expressionContext);\n+        if (expressionContext instanceof BQLBaseParser.InfixContext || expressionContext instanceof BQLBaseParser.NullPredicateContext) {\n             return new ParenthesesExpressionNode(expression, getLocation(context));\n         }\n         return expression;\n@@ -313,12 +373,12 @@ private Node visitIfPresent(ParserRuleContext context) {\n     }\n \n     private static String unquoteSingle(String value) {\n-        // \"\" -> \"\n+        // '' -> '\n         return value.substring(1, value.length() - 1).replace(\"''\", \"'\");\n     }\n \n     private static String unquoteDouble(String value) {\n-        // '' -> '\n+        // \"\" -> \"\n         return value.substring(1, value.length() - 1).replace(\"\\\"\\\"\", \"\\\"\");\n     }\n \n@@ -376,8 +436,15 @@ private static Operation getOperation(Token token) {\n         return null;\n     }\n \n-    private static Operation getOperation(Token op, Token modifier) {\n+    private static Operation getOperation(Token op, Token modifier, boolean not) {\n         if (modifier == null) {\n+            if (not) {\n+                if (op.getType() == BQLBaseLexer.RLIKE) {\n+                    return Operation.NOT_REGEX_LIKE;\n+                } else if (op.getType() == BQLBaseLexer.IN) {\n+                    return Operation.NOT_IN;\n+                }\n+            }\n             return getOperation(op);\n         }\n         if (modifier.getType() == BQLBaseLexer.ANY) {\n@@ -395,7 +462,7 @@ private static Operation getOperation(Token op, Token modifier) {\n                 case BQLBaseLexer.LTE:\n                     return Operation.LESS_THAN_OR_EQUALS_ANY;\n                 case BQLBaseLexer.RLIKE:\n-                    return Operation.REGEX_LIKE_ANY;\n+                    return !not ? Operation.REGEX_LIKE_ANY : Operation.NOT_REGEX_LIKE_ANY;\n             }\n         } else if (modifier.getType() == BQLBaseLexer.ALL) {\n             switch (op.getType()) {\n@@ -412,10 +479,6 @@ private static Operation getOperation(Token op, Token modifier) {\n                 case BQLBaseLexer.LTE:\n                     return Operation.LESS_THAN_OR_EQUALS_ALL;\n             }\n-        } else if (modifier.getType() == BQLBaseLexer.NOT) {\n-            if (op.getType() == BQLBaseLexer.IN) {\n-                return Operation.NOT_IN;\n-            }\n         }\n         return getOperation(op);\n     }"
  },
  {
    "sha": "b1db5205e2975b5df15af50a6f8ff90262dac9f9",
    "filename": "src/main/java/com/yahoo/bullet/bql/query/ExpressionVisitor.java",
    "status": "modified",
    "additions": 11,
    "deletions": 11,
    "changes": 22,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/query/ExpressionVisitor.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/query/ExpressionVisitor.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/query/ExpressionVisitor.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -110,19 +110,19 @@ protected Expression visitFieldExpression(FieldExpressionNode node, LayeredSchem\n     @Override\n     protected Expression visitSubFieldExpression(SubFieldExpressionNode node, LayeredSchema layeredSchema) {\n         FieldExpression fieldExpression = (FieldExpression) process(node.getField(), layeredSchema);\n-        FieldExpression expression;\n-        if (fieldExpression.getIndex() != null) {\n-            expression = new FieldExpression(fieldExpression.getField(), fieldExpression.getIndex(), node.getKey().getValue());\n-        } else if (fieldExpression.getKey() != null) {\n-            expression = new FieldExpression(fieldExpression.getField(), fieldExpression.getKey(), node.getKey().getValue());\n-        } else if (node.getIndex() != null) {\n-            expression = new FieldExpression(fieldExpression.getField(), node.getIndex());\n+        FieldExpression subFieldExpression;\n+        if (node.getIndex() != null) {\n+            subFieldExpression = new FieldExpression(fieldExpression, node.getIndex());\n+        } else if (node.getKey() != null) {\n+            subFieldExpression = new FieldExpression(fieldExpression, node.getKey().getValue());\n+        } else if (node.getExpressionKey() != null) {\n+            subFieldExpression = new FieldExpression(fieldExpression, process(node.getExpressionKey(), layeredSchema));\n         } else {\n-            expression = new FieldExpression(fieldExpression.getField(), node.getKey().getValue());\n+            subFieldExpression = new FieldExpression(fieldExpression, node.getStringKey());\n         }\n-        setType(node, expression, fieldExpression, errors);\n-        mapping.put(node, expression);\n-        return expression;\n+        setType(node, subFieldExpression, fieldExpression, errors);\n+        mapping.put(node, subFieldExpression);\n+        return subFieldExpression;\n     }\n \n     @Override"
  },
  {
    "sha": "27ff7d3b796375be413f7629c89108a7efb9246e",
    "filename": "src/main/java/com/yahoo/bullet/bql/query/QueryError.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/query/QueryError.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/query/QueryError.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/query/QueryError.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -50,6 +50,9 @@\n \n     // Type checking\n     SUBFIELD_INVALID_DUE_TO_FIELD_TYPE(\"The subfield %s is invalid since the field %s has type: %s.\"),\n+    SUBFIELD_INDEX_INVALID_TYPE(\"The type of the index in the subfield %s must be INTEGER or LONG. Type given: %s.\"),\n+    SUBFIELD_KEY_INVALID_TYPE(\"The type of the key in the subfield %s must be STRING. Type given: %s.\"),\n+    SUBFIELD_SUB_KEY_INVALID_TYPE(\"The type of the subkey in the subfield %s must be STRING. Type given: %s.\"),\n     EMPTY_LISTS_NOT_SUPPORTED(\"Empty lists are currently not supported.\"),\n     LIST_HAS_MULTIPLE_TYPES(\"The list %s consists of objects of multiple types: %s.\"),\n     LIST_HAS_INVALID_SUBTYPE(\"The list %s must consist of objects of a single primitive or primitive map type. Subtype given: %s.\"),"
  },
  {
    "sha": "a736b4e8af836f653b3495f8c847426e152adaab",
    "filename": "src/main/java/com/yahoo/bullet/bql/query/TypeChecker.java",
    "status": "modified",
    "additions": 24,
    "deletions": 2,
    "changes": 26,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/query/TypeChecker.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/query/TypeChecker.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/query/TypeChecker.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -31,13 +31,33 @@\n import java.util.stream.Collectors;\n \n public class TypeChecker {\n-    static Optional<List<BulletError>> validateSubFieldType(SubFieldExpressionNode node, FieldExpression fieldExpression) {\n+    static Optional<List<BulletError>> validateSubFieldType(SubFieldExpressionNode node, FieldExpression subFieldExpression, FieldExpression fieldExpression) {\n         Type type = fieldExpression.getType();\n         if (Type.isUnknown(type)) {\n             return unknownError();\n-        } else if (!isCollection(type)) {\n+        } else if (!isCollection(type) || (Type.isList(type) && node.getIndex() == null && node.getExpressionKey() == null) || (Type.isMap(type) && node.getIndex() != null)) {\n             return makeError(node, QueryError.SUBFIELD_INVALID_DUE_TO_FIELD_TYPE, node, node.getField(), type);\n         }\n+        if (node.getExpressionKey() != null) {\n+            if (subFieldExpression.getVariableSubKey() != null) {\n+                Type keyType = subFieldExpression.getVariableSubKey().getType();\n+                if (!Type.isUnknown(keyType) && keyType != Type.STRING) {\n+                    return makeError(node, QueryError.SUBFIELD_SUB_KEY_INVALID_TYPE, node, keyType);\n+                }\n+            } else {\n+                Type keyType = subFieldExpression.getVariableKey().getType();\n+                if (Type.isUnknown(keyType)) {\n+                    return Optional.empty();\n+                }\n+                if (Type.isList(type)) {\n+                    if (keyType != Type.INTEGER && keyType != Type.LONG) {\n+                        return makeError(node, QueryError.SUBFIELD_INDEX_INVALID_TYPE, node, keyType);\n+                    }\n+                } else if (keyType != Type.STRING) {\n+                    return makeError(node, QueryError.SUBFIELD_KEY_INVALID_TYPE, node, keyType);\n+                }\n+            }\n+        }\n         return Optional.empty();\n     }\n \n@@ -197,11 +217,13 @@\n                 }\n                 return !errors.isEmpty() ? Optional.of(errors) : Optional.empty();\n             case REGEX_LIKE:\n+            case NOT_REGEX_LIKE:\n                 if (leftType != Type.STRING || rightType != Type.STRING) {\n                     return makeError(node, QueryError.BINARY_TYPES_NOT_STRING, node, leftType, rightType);\n                 }\n                 return Optional.empty();\n             case REGEX_LIKE_ANY:\n+            case NOT_REGEX_LIKE_ANY:\n                 if (leftType != Type.STRING) {\n                     errors.add(makeErrorOnly(node, QueryError.BINARY_LHS_NOT_STRING, node, leftType));\n                 }"
  },
  {
    "sha": "29fc461a6cc6abc0b7752f2b13c01a2388710d59",
    "filename": "src/main/java/com/yahoo/bullet/bql/query/TypeSetter.java",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/query/TypeSetter.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/query/TypeSetter.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/query/TypeSetter.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -40,12 +40,13 @@ static void setType(FieldExpressionNode node, FieldExpression fieldExpression, L\n     }\n \n     static void setType(SubFieldExpressionNode node, FieldExpression subFieldExpression, FieldExpression fieldExpression, List<BulletError> bulletErrors) {\n-        Optional<List<BulletError>> errors = TypeChecker.validateSubFieldType(node, fieldExpression);\n+        Optional<List<BulletError>> errors = TypeChecker.validateSubFieldType(node, subFieldExpression, fieldExpression);\n         errors.ifPresent(bulletErrors::addAll);\n-        if (errors.isPresent()) {\n+        Type type = fieldExpression.getType();\n+        if (!Type.isList(type) && !Type.isMap(type)) {\n             subFieldExpression.setType(Type.UNKNOWN);\n         } else {\n-            subFieldExpression.setType(fieldExpression.getType().getSubType());\n+            subFieldExpression.setType(type.getSubType());\n         }\n     }\n \n@@ -198,6 +199,8 @@ static void setBinaryType(BinaryExpression binaryExpression, boolean hasErrors)\n             case LESS_THAN_OR_EQUALS_ALL:\n             case REGEX_LIKE:\n             case REGEX_LIKE_ANY:\n+            case NOT_REGEX_LIKE:\n+            case NOT_REGEX_LIKE_ANY:\n             case SIZE_IS:\n             case CONTAINS_KEY:\n             case CONTAINS_VALUE:"
  },
  {
    "sha": "42bc195930c8c65c2a544a568b90672ebcad1b39",
    "filename": "src/main/java/com/yahoo/bullet/bql/tree/FieldExpressionNode.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/tree/FieldExpressionNode.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/tree/FieldExpressionNode.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/tree/FieldExpressionNode.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -7,14 +7,16 @@\n \n import com.yahoo.bullet.typesystem.Type;\n import lombok.Getter;\n+import lombok.Setter;\n \n import java.util.Objects;\n \n @Getter\n public class FieldExpressionNode extends ExpressionNode {\n     protected final IdentifierNode field;\n     // Types ignored for equals() and hashCode()\n-    private final Type type;\n+    @Setter\n+    private Type type;\n \n     public FieldExpressionNode(IdentifierNode field, Type type, NodeLocation nodeLocation) {\n         super(nodeLocation);"
  },
  {
    "sha": "f90c9d0b931f29b288ca019835514a448339c5ec",
    "filename": "src/main/java/com/yahoo/bullet/bql/tree/ListExpressionNode.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/tree/ListExpressionNode.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/tree/ListExpressionNode.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/tree/ListExpressionNode.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -13,10 +13,17 @@\n @Getter\n public class ListExpressionNode extends ExpressionNode {\n     private final List<ExpressionNode> expressions;\n+    // Not used for equals() and hashCode()\n+    private final boolean parenthesized;\n \n-    public ListExpressionNode(List<ExpressionNode> expressions, NodeLocation nodeLocation) {\n+    public ListExpressionNode(List<ExpressionNode> expressions, boolean parenthesized, NodeLocation nodeLocation) {\n         super(nodeLocation);\n         this.expressions = expressions;\n+        this.parenthesized = parenthesized;\n+    }\n+\n+    public ListExpressionNode(List<ExpressionNode> expressions, NodeLocation nodeLocation) {\n+        this(expressions, false, nodeLocation);\n     }\n \n     @Override"
  },
  {
    "sha": "3f1b10e7e2adea6bd0c51292fe407c293a302f8f",
    "filename": "src/main/java/com/yahoo/bullet/bql/tree/SubFieldExpressionNode.java",
    "status": "modified",
    "additions": 17,
    "deletions": 4,
    "changes": 21,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/tree/SubFieldExpressionNode.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/tree/SubFieldExpressionNode.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/tree/SubFieldExpressionNode.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -7,7 +7,9 @@\n \n import com.yahoo.bullet.typesystem.Type;\n import lombok.Getter;\n+import lombok.Setter;\n \n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n@@ -17,14 +19,20 @@\n     private final ExpressionNode field;\n     private final Integer index;\n     private final IdentifierNode key;\n+    private final ExpressionNode expressionKey;\n+    private final String stringKey;\n     // Types ignored for equals() and hashCode()\n-    private final Type type;\n+    @Setter\n+    private Type type;\n \n-    public SubFieldExpressionNode(ExpressionNode field, Integer index, IdentifierNode key, Type type, NodeLocation nodeLocation) {\n+    public SubFieldExpressionNode(ExpressionNode field, Integer index, IdentifierNode key, ExpressionNode expressionKey,\n+                                  String stringKey, Type type, NodeLocation nodeLocation) {\n         super(nodeLocation);\n         this.field = field;\n         this.index = index;\n         this.key = key;\n+        this.expressionKey = expressionKey;\n+        this.stringKey = stringKey;\n         this.type = type;\n     }\n \n@@ -35,6 +43,9 @@ public SubFieldExpressionNode(ExpressionNode field, Integer index, IdentifierNod\n \n     @Override\n     public List<ExpressionNode> getChildren() {\n+        if (expressionKey != null) {\n+            return Arrays.asList(field, expressionKey);\n+        }\n         return Collections.singletonList(field);\n     }\n \n@@ -49,11 +60,13 @@ public boolean equals(Object obj) {\n         SubFieldExpressionNode other = (SubFieldExpressionNode) obj;\n         return Objects.equals(field, other.field) &&\n                Objects.equals(index, other.index) &&\n-               Objects.equals(key, other.key);\n+               Objects.equals(key, other.key) &&\n+               Objects.equals(expressionKey, other.expressionKey) &&\n+               Objects.equals(stringKey, other.stringKey);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(field, index, key);\n+        return Objects.hash(field, index, key, expressionKey, stringKey);\n     }\n }"
  },
  {
    "sha": "949804b87857a6c3133775750624cfb0aa11698d",
    "filename": "src/main/java/com/yahoo/bullet/bql/util/ExpressionFormatter.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/util/ExpressionFormatter.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/main/java/com/yahoo/bullet/bql/util/ExpressionFormatter.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/main/java/com/yahoo/bullet/bql/util/ExpressionFormatter.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -155,14 +155,18 @@ protected String visitFieldExpression(FieldExpressionNode node, Void context) {\n         protected String visitSubFieldExpression(SubFieldExpressionNode node, Void context) {\n             if (node.getIndex() != null) {\n                 return process(node.getField()) + \"[\" + node.getIndex() + \"]\";\n-            } else {\n+            } else if (node.getKey() != null) {\n                 return process(node.getField()) + \".\" + process(node.getKey());\n+            } else if (node.getExpressionKey() != null) {\n+                return process(node.getField()) + \"[\" + process(node.getExpressionKey()) + \"]\";\n+            } else {\n+                return process(node.getField()) + \"['\" + node.getStringKey() + \"']\";\n             }\n         }\n \n         @Override\n         protected String visitListExpression(ListExpressionNode node, Void context) {\n-            return \"[\" + join(node.getExpressions()) + \"]\";\n+            return node.isParenthesized() ? \"(\" + join(node.getExpressions()) + \")\" : \"[\" + join(node.getExpressions()) + \"]\";\n         }\n \n         @Override\n@@ -248,6 +252,8 @@ protected String visitBinaryExpression(BinaryExpressionNode node, Void context)\n                 case LESS_THAN_OR_EQUALS_ALL:\n                 case REGEX_LIKE:\n                 case REGEX_LIKE_ANY:\n+                case NOT_REGEX_LIKE:\n+                case NOT_REGEX_LIKE_ANY:\n                 case IN:\n                 case NOT_IN:\n                 case AND:"
  },
  {
    "sha": "ac2974a15876f9529279df0a6478dcf5d3dc45bc",
    "filename": "src/test/java/com/yahoo/bullet/bql/integration/ExpressionTest.java",
    "status": "modified",
    "additions": 181,
    "deletions": 29,
    "changes": 210,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/integration/ExpressionTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/integration/ExpressionTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/test/java/com/yahoo/bullet/bql/integration/ExpressionTest.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -57,6 +57,30 @@ public void testFieldExpressionWithIndexAndSubKey() {\n         Assert.assertEquals(field.getValue().getType(), Type.STRING);\n     }\n \n+    @Test\n+    public void testFieldExpressionWithIndexAndStringSubKey() {\n+        build(\"SELECT aaa[0]['def'] FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 1);\n+\n+        Field field = query.getProjection().getFields().get(0);\n+\n+        Assert.assertEquals(field.getName(), \"aaa[0]['def']\");\n+        Assert.assertEquals(field.getValue(), field(\"aaa\", 0, \"def\", Type.STRING));\n+        Assert.assertEquals(field.getValue().getType(), Type.STRING);\n+    }\n+\n+    @Test\n+    public void testFieldExpressionWithIndexAndExpressionSubKey() {\n+        build(\"SELECT aaa[0][c] FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 1);\n+\n+        Field field = query.getProjection().getFields().get(0);\n+\n+        Assert.assertEquals(field.getName(), \"aaa[0][c]\");\n+        Assert.assertEquals(field.getValue(), field(\"aaa\", 0, field(\"c\", Type.STRING), Type.STRING));\n+        Assert.assertEquals(field.getValue().getType(), Type.STRING);\n+    }\n+\n     @Test\n     public void testFieldExpressionWithKey() {\n         build(\"SELECT bbb.def FROM STREAM()\");\n@@ -69,6 +93,30 @@ public void testFieldExpressionWithKey() {\n         Assert.assertEquals(field.getValue().getType(), Type.STRING_MAP);\n     }\n \n+    @Test\n+    public void testFieldExpressionWithStringKey() {\n+        build(\"SELECT bbb['def'] FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 1);\n+\n+        Field field = query.getProjection().getFields().get(0);\n+\n+        Assert.assertEquals(field.getName(), \"bbb['def']\");\n+        Assert.assertEquals(field.getValue(), field(\"bbb\", \"def\", Type.STRING_MAP));\n+        Assert.assertEquals(field.getValue().getType(), Type.STRING_MAP);\n+    }\n+\n+    @Test\n+    public void testFieldExpressionWithExpressionKey() {\n+        build(\"SELECT bbb[c] FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 1);\n+\n+        Field field = query.getProjection().getFields().get(0);\n+\n+        Assert.assertEquals(field.getName(), \"bbb[c]\");\n+        Assert.assertEquals(field.getValue(), field(\"bbb\", field(\"c\", Type.STRING), Type.STRING_MAP));\n+        Assert.assertEquals(field.getValue().getType(), Type.STRING_MAP);\n+    }\n+\n     @Test\n     public void testFieldExpressionWithKeyAndSubKey() {\n         build(\"SELECT bbb.def.one FROM STREAM()\");\n@@ -81,6 +129,42 @@ public void testFieldExpressionWithKeyAndSubKey() {\n         Assert.assertEquals(field.getValue().getType(), Type.STRING);\n     }\n \n+    @Test\n+    public void testFieldExpressionWithKeyAndBracketSubKey() {\n+        build(\"SELECT bbb.def['one'] FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 1);\n+\n+        Field field = query.getProjection().getFields().get(0);\n+\n+        Assert.assertEquals(field.getName(), \"bbb.def['one']\");\n+        Assert.assertEquals(field.getValue(), field(\"bbb\", \"def\", \"one\", Type.STRING));\n+        Assert.assertEquals(field.getValue().getType(), Type.STRING);\n+    }\n+\n+    @Test\n+    public void testFieldExpressionWithBracketKeyAndSubKey() {\n+        build(\"SELECT bbb['def'].one FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 1);\n+\n+        Field field = query.getProjection().getFields().get(0);\n+\n+        Assert.assertEquals(field.getName(), \"bbb['def'].one\");\n+        Assert.assertEquals(field.getValue(), field(\"bbb\", \"def\", \"one\", Type.STRING));\n+        Assert.assertEquals(field.getValue().getType(), Type.STRING);\n+    }\n+\n+    @Test\n+    public void testFieldExpressionWithBracketKeyAndBracketSubKey() {\n+        build(\"SELECT bbb['def']['one'] FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 1);\n+\n+        Field field = query.getProjection().getFields().get(0);\n+\n+        Assert.assertEquals(field.getName(), \"bbb['def']['one']\");\n+        Assert.assertEquals(field.getValue(), field(\"bbb\", \"def\", \"one\", Type.STRING));\n+        Assert.assertEquals(field.getValue().getType(), Type.STRING);\n+    }\n+\n     @Test\n     public void testQuotedFieldExpressionWithKeyAndSubKey() {\n         build(\"SELECT \\\"bbb\\\".\\\"def\\\".\\\"one\\\" FROM STREAM()\");\n@@ -217,55 +301,123 @@ public void testBinaryOperationsAnyAll() {\n                                                                                                         Type.BOOLEAN)));\n     }\n \n+    @Test\n+    public void testBinaryOperationsRegexLike() {\n+        build(\"SELECT c RLIKE 'abc', c RLIKE ANY ['abc'], c NOT RLIKE 'abc', c NOT RLIKE ANY ['abc'] FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 4);\n+        Assert.assertEquals(query.getProjection().getFields().get(0), new Field(\"c RLIKE 'abc'\",\n+                                                                                binary(field(\"c\", Type.STRING),\n+                                                                                       value(\"abc\"),\n+                                                                                       Operation.REGEX_LIKE,\n+                                                                                       Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(1), new Field(\"c RLIKE ANY ['abc']\",\n+                                                                                binary(field(\"c\", Type.STRING),\n+                                                                                       list(Type.STRING_LIST, value(\"abc\")),\n+                                                                                       Operation.REGEX_LIKE_ANY,\n+                                                                                       Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(2), new Field(\"c NOT RLIKE 'abc'\",\n+                                                                                binary(field(\"c\", Type.STRING),\n+                                                                                       value(\"abc\"),\n+                                                                                       Operation.NOT_REGEX_LIKE,\n+                                                                                       Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(3), new Field(\"c NOT RLIKE ANY ['abc']\",\n+                                                                                binary(field(\"c\", Type.STRING),\n+                                                                                       list(Type.STRING_LIST, value(\"abc\")),\n+                                                                                       Operation.NOT_REGEX_LIKE_ANY,\n+                                                                                       Type.BOOLEAN)));\n+    }\n+\n+    @Test\n+    public void testBinaryOperationsIn() {\n+        build(\"SELECT 'abc' IN aaa, 'abc' NOT IN aaa FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 2);\n+        Assert.assertEquals(query.getProjection().getFields().get(0), new Field(\"'abc' IN aaa\",\n+                                                                                binary(value(\"abc\"),\n+                                                                                       field(\"aaa\", Type.STRING_MAP_LIST),\n+                                                                                       Operation.IN,\n+                                                                                       Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(1), new Field(\"'abc' NOT IN aaa\",\n+                                                                                binary(value(\"abc\"),\n+                                                                                       field(\"aaa\", Type.STRING_MAP_LIST),\n+                                                                                       Operation.NOT_IN,\n+                                                                                       Type.BOOLEAN)));\n+    }\n+\n+    @Test\n+    public void testBinaryOperationsInWithParentheses() {\n+        build(\"SELECT 'abc' IN ('abc'), 'abc' NOT IN ('abc'), 'abc' IN('abc', 'def'), 'abc' NOT IN('abc', 'def') FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 4);\n+        Assert.assertEquals(query.getProjection().getFields().get(0), new Field(\"'abc' IN ('abc')\",\n+                                                                                binary(value(\"abc\"),\n+                                                                                       list(Type.STRING_LIST, value(\"abc\")),\n+                                                                                       Operation.IN,\n+                                                                                       Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(1), new Field(\"'abc' NOT IN ('abc')\",\n+                                                                                binary(value(\"abc\"),\n+                                                                                        list(Type.STRING_LIST, value(\"abc\")),\n+                                                                                       Operation.NOT_IN,\n+                                                                                       Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(2), new Field(\"'abc' IN ('abc', 'def')\",\n+                                                                                binary(value(\"abc\"),\n+                                                                                       list(Type.STRING_LIST, value(\"abc\"), value(\"def\")),\n+                                                                                       Operation.IN,\n+                                                                                       Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(3), new Field(\"'abc' NOT IN ('abc', 'def')\",\n+                                                                                binary(value(\"abc\"),\n+                                                                                       list(Type.STRING_LIST, value(\"abc\"), value(\"def\")),\n+                                                                                       Operation.NOT_IN,\n+                                                                                       Type.BOOLEAN)));\n+    }\n+\n     @Test\n     public void testBinaryOperationsMisc() {\n-        build(\"SELECT c RLIKE 'abc', c RLIKE ANY ['abc'], SIZEIS(c, 5), CONTAINSKEY(bbb, 'abc'), CONTAINSVALUE(aaa, 'abc'), \" +\n-              \"'abc' IN aaa, 'abc' NOT IN aaa, FILTER(aaa, [true, false]), b AND true, b OR false, b XOR true FROM STREAM()\");\n-        Assert.assertEquals(query.getProjection().getFields().size(), 11);\n-        Assert.assertEquals(query.getProjection().getFields().get(0), new Field(\"c RLIKE 'abc'\", binary(field(\"c\", Type.STRING),\n-                                                                                                        value(\"abc\"),\n-                                                                                                        Operation.REGEX_LIKE,\n-                                                                                                        Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(1), new Field(\"c RLIKE ANY ['abc']\", binary(field(\"c\", Type.STRING),\n-                                                                                                              list(Type.STRING_LIST, value(\"abc\")),\n-                                                                                                              Operation.REGEX_LIKE_ANY,\n-                                                                                                              Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(2), new Field(\"SIZEIS(c, 5)\", binary(field(\"c\", Type.STRING),\n+        build(\"SELECT SIZEIS(c, 5), CONTAINSKEY(bbb, 'abc'), CONTAINSVALUE(aaa, 'abc'), FILTER(aaa, [true, false]), \" +\n+              \"b AND true, b OR false, b XOR true FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 7);\n+        Assert.assertEquals(query.getProjection().getFields().get(0), new Field(\"SIZEIS(c, 5)\", binary(field(\"c\", Type.STRING),\n                                                                                                        value(5),\n                                                                                                        Operation.SIZE_IS,\n                                                                                                        Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(3), new Field(\"CONTAINSKEY(bbb, 'abc')\", binary(field(\"bbb\", Type.STRING_MAP_MAP),\n+        Assert.assertEquals(query.getProjection().getFields().get(1), new Field(\"CONTAINSKEY(bbb, 'abc')\", binary(field(\"bbb\", Type.STRING_MAP_MAP),\n                                                                                                                   value(\"abc\"),\n                                                                                                                   Operation.CONTAINS_KEY,\n                                                                                                                   Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(4), new Field(\"CONTAINSVALUE(aaa, 'abc')\", binary(field(\"aaa\", Type.STRING_MAP_LIST),\n+        Assert.assertEquals(query.getProjection().getFields().get(2), new Field(\"CONTAINSVALUE(aaa, 'abc')\", binary(field(\"aaa\", Type.STRING_MAP_LIST),\n                                                                                                                     value(\"abc\"),\n                                                                                                                     Operation.CONTAINS_VALUE,\n                                                                                                                     Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(5), new Field(\"'abc' IN aaa\", binary(value(\"abc\"),\n-                                                                                                       field(\"aaa\", Type.STRING_MAP_LIST),\n-                                                                                                       Operation.IN,\n-                                                                                                       Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(6), new Field(\"'abc' NOT IN aaa\", binary(value(\"abc\"),\n-                                                                                                           field(\"aaa\", Type.STRING_MAP_LIST),\n-                                                                                                           Operation.NOT_IN,\n-                                                                                                           Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(7), new Field(\"FILTER(aaa, [true, false])\", binary(field(\"aaa\", Type.STRING_MAP_LIST),\n+        Assert.assertEquals(query.getProjection().getFields().get(3), new Field(\"FILTER(aaa, [true, false])\", binary(field(\"aaa\", Type.STRING_MAP_LIST),\n                                                                                                                      list(Type.BOOLEAN_LIST, value(true), value(false)),\n                                                                                                                      Operation.FILTER,\n                                                                                                                      Type.STRING_MAP_LIST)));\n-        Assert.assertEquals(query.getProjection().getFields().get(8), new Field(\"b AND true\", binary(field(\"b\", Type.BOOLEAN),\n+        Assert.assertEquals(query.getProjection().getFields().get(4), new Field(\"b AND true\", binary(field(\"b\", Type.BOOLEAN),\n                                                                                                      value(true),\n                                                                                                      Operation.AND,\n                                                                                                      Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(9), new Field(\"b OR false\", binary(field(\"b\", Type.BOOLEAN),\n+        Assert.assertEquals(query.getProjection().getFields().get(5), new Field(\"b OR false\", binary(field(\"b\", Type.BOOLEAN),\n                                                                                                      value(false),\n                                                                                                      Operation.OR,\n                                                                                                      Type.BOOLEAN)));\n-        Assert.assertEquals(query.getProjection().getFields().get(10), new Field(\"b XOR true\", binary(field(\"b\", Type.BOOLEAN),\n-                                                                                                      value(true),\n-                                                                                                      Operation.XOR,\n-                                                                                                      Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(6), new Field(\"b XOR true\", binary(field(\"b\", Type.BOOLEAN),\n+                                                                                                     value(true),\n+                                                                                                     Operation.XOR,\n+                                                                                                     Type.BOOLEAN)));\n+    }\n+\n+    @Test\n+    public void testAlternativeEqualsAndNotEquals() {\n+        // a == 5 and a <> 5 are the exact same expressions as a = 5 and a != 5 respectively and are in fact rewritten\n+        // with the field names \"a = 5\" and \"a != 5\" in the record\n+        build(\"SELECT a == 5, a <> 5, a = 5, a != 5 FROM STREAM()\");\n+        Assert.assertEquals(query.getProjection().getFields().size(), 2);\n+        Assert.assertEquals(query.getProjection().getFields().get(0), new Field(\"a = 5\", binary(field(\"a\", Type.LONG),\n+                                                                                                value(5),\n+                                                                                                Operation.EQUALS,\n+                                                                                                Type.BOOLEAN)));\n+        Assert.assertEquals(query.getProjection().getFields().get(1), new Field(\"a != 5\", binary(field(\"a\", Type.LONG),\n+                                                                                                 value(5),\n+                                                                                                 Operation.NOT_EQUALS,\n+                                                                                                 Type.BOOLEAN)));\n     }\n \n     @Test"
  },
  {
    "sha": "6505f08fb394dcafead244e7621a262ba3ef0232",
    "filename": "src/test/java/com/yahoo/bullet/bql/integration/RawTest.java",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/integration/RawTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/integration/RawTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/test/java/com/yahoo/bullet/bql/integration/RawTest.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -48,6 +48,26 @@ public void testSubFieldTypeInvalid() {\n         build(\"SELECT ccc[0].def FROM STREAM()\");\n         Assert.assertEquals(errors.get(0).getError(), \"1:8: The subfield ccc[0].def is invalid since the field ccc[0] has type: INTEGER.\");\n         Assert.assertEquals(errors.size(), 1);\n+\n+        build(\"SELECT aaa.\\\"0\\\" FROM STREAM()\");\n+        Assert.assertEquals(errors.get(0).getError(), \"1:8: The subfield aaa.0 is invalid since the field aaa has type: STRING_MAP_LIST.\");\n+        Assert.assertEquals(errors.size(), 1);\n+\n+        build(\"SELECT ddd[0] FROM STREAM()\");\n+        Assert.assertEquals(errors.get(0).getError(), \"1:8: The subfield ddd[0] is invalid since the field ddd has type: STRING_MAP.\");\n+        Assert.assertEquals(errors.size(), 1);\n+\n+        build(\"SELECT ccc[c] FROM STREAM()\");\n+        Assert.assertEquals(errors.get(0).getError(), \"1:8: The type of the index in the subfield ccc[c] must be INTEGER or LONG. Type given: STRING.\");\n+        Assert.assertEquals(errors.size(), 1);\n+\n+        build(\"SELECT ddd[abc] FROM STREAM()\");\n+        Assert.assertEquals(errors.get(0).getError(), \"1:8: The type of the key in the subfield ddd[abc] must be STRING. Type given: INTEGER.\");\n+        Assert.assertEquals(errors.size(), 1);\n+\n+        build(\"SELECT aaa[0][abc] FROM STREAM()\");\n+        Assert.assertEquals(errors.get(0).getError(), \"1:8: The type of the subkey in the subfield aaa[0][abc] must be STRING. Type given: INTEGER.\");\n+        Assert.assertEquals(errors.size(), 1);\n     }\n \n     @Test"
  },
  {
    "sha": "1d5ac76c58fd7015f855c4560d1be4a57dcf9107",
    "filename": "src/test/java/com/yahoo/bullet/bql/integration/SchemaTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/integration/SchemaTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/integration/SchemaTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/test/java/com/yahoo/bullet/bql/integration/SchemaTest.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -68,13 +68,13 @@ public void testUnknowns() {\n         // coverage\n         build(\"SELECT [(SIZEIS(CAST(IF(foo IS NOT NULL, 5, 10) AS STRING), 10)) + 5], bar + foo, 5 + car FROM STREAM() WHERE foo\");\n         Assert.assertEquals(errors.get(0).getError(), \"1:111: The field foo does not exist in the schema.\");\n-        Assert.assertEquals(errors.get(1).getError(), \"1:9: The left and right operands in (SIZEIS(CAST(IF(foo IS NOT NULL, 5, 10) AS STRING), 10)) + 5 must be numeric. Types given: BOOLEAN, INTEGER.\");\n+        Assert.assertEquals(errors.get(1).getError(), \"1:9: The left and right operands in SIZEIS(CAST(IF(foo IS NOT NULL, 5, 10) AS STRING), 10) + 5 must be numeric. Types given: BOOLEAN, INTEGER.\");\n         Assert.assertEquals(errors.get(2).getError(), \"1:72: The field bar does not exist in the schema.\");\n         Assert.assertEquals(errors.get(3).getError(), \"1:87: The field car does not exist in the schema.\");\n         Assert.assertEquals(errors.size(), 4);\n \n         BQLResult result = noSchemaBuilder.buildQuery(\"SELECT [(SIZEIS(CAST(IF(foo IS NOT NULL, 5, 10) AS STRING), 10)) + 5], bar + foo, 5 + car FROM STREAM() WHERE foo\");\n-        Assert.assertEquals(result.getErrors().get(0).getError(), \"1:9: The left and right operands in (SIZEIS(CAST(IF(foo IS NOT NULL, 5, 10) AS STRING), 10)) + 5 must be numeric. Types given: BOOLEAN, INTEGER.\");\n+        Assert.assertEquals(result.getErrors().get(0).getError(), \"1:9: The left and right operands in SIZEIS(CAST(IF(foo IS NOT NULL, 5, 10) AS STRING), 10) + 5 must be numeric. Types given: BOOLEAN, INTEGER.\");\n         Assert.assertEquals(result.getErrors().size(), 1);\n     }\n }"
  },
  {
    "sha": "425890cfc2a2c5ad22dbcc4c1c3e6e6646338836",
    "filename": "src/test/java/com/yahoo/bullet/bql/integration/TypeCheckTest.java",
    "status": "modified",
    "additions": 17,
    "deletions": 4,
    "changes": 21,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/integration/TypeCheckTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/integration/TypeCheckTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/test/java/com/yahoo/bullet/bql/integration/TypeCheckTest.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -42,18 +42,22 @@ public void testTypeCheckComparisonModifier() {\n \n     @Test\n     public void testTypeCheckRegexLike() {\n-        build(\"SELECT 'foo' RLIKE 0, 0 RLIKE 'foo' FROM STREAM()\");\n+        build(\"SELECT 'foo' RLIKE 0, 0 RLIKE 'foo', 'foo' NOT RLIKE 0, 0 NOT RLIKE 'foo' FROM STREAM()\");\n         Assert.assertEquals(errors.get(0).getError(), \"1:8: The types of the arguments in 'foo' RLIKE 0 must be STRING. Types given: STRING, INTEGER.\");\n         Assert.assertEquals(errors.get(1).getError(), \"1:23: The types of the arguments in 0 RLIKE 'foo' must be STRING. Types given: INTEGER, STRING.\");\n-        Assert.assertEquals(errors.size(), 2);\n+        Assert.assertEquals(errors.get(2).getError(), \"1:38: The types of the arguments in 'foo' NOT RLIKE 0 must be STRING. Types given: STRING, INTEGER.\");\n+        Assert.assertEquals(errors.get(3).getError(), \"1:57: The types of the arguments in 0 NOT RLIKE 'foo' must be STRING. Types given: INTEGER, STRING.\");\n+        Assert.assertEquals(errors.size(), 4);\n     }\n \n     @Test\n     public void testTypeCheckRegexLikeAny() {\n-        build(\"SELECT 0 RLIKE ANY 'foo' FROM STREAM()\");\n+        build(\"SELECT 0 RLIKE ANY 'foo', 0 NOT RLIKE ANY 'foo' FROM STREAM()\");\n         Assert.assertEquals(errors.get(0).getError(), \"1:8: The type of the left operand in 0 RLIKE ANY 'foo' must be STRING. Type given: INTEGER.\");\n         Assert.assertEquals(errors.get(1).getError(), \"1:8: The type of the right operand in 0 RLIKE ANY 'foo' must be STRING_LIST. Type given: STRING.\");\n-        Assert.assertEquals(errors.size(), 2);\n+        Assert.assertEquals(errors.get(2).getError(), \"1:27: The type of the left operand in 0 NOT RLIKE ANY 'foo' must be STRING. Type given: INTEGER.\");\n+        Assert.assertEquals(errors.get(3).getError(), \"1:27: The type of the right operand in 0 NOT RLIKE ANY 'foo' must be STRING_LIST. Type given: STRING.\");\n+        Assert.assertEquals(errors.size(), 4);\n     }\n \n     @Test\n@@ -97,6 +101,15 @@ public void testTypeCheckIn() {\n         Assert.assertEquals(errors.size(), 8);\n     }\n \n+    @Test\n+    public void testTypeCheckInWithParentheses() {\n+        // Checking formatting of parentheses\n+        build(\"SELECT aaa IN ('foo', 'bar'), aaa IN (aaa, bbb, 'bar') FROM STREAM()\");\n+        Assert.assertEquals(errors.get(0).getError(), \"1:8: The type of the left operand in aaa IN ('foo', 'bar') must be primitive. Type given: STRING_MAP_LIST.\");\n+        Assert.assertTrue(errors.get(1).getError().startsWith(\"1:39: The list (aaa, bbb, 'bar') consists of objects of multiple types:\"));\n+        Assert.assertEquals(errors.size(), 2);\n+    }\n+\n     @Test\n     public void testTypeCheckBooleanComparison() {\n         build(\"SELECT 5 AND true, false OR 5, 'foo' XOR 5 FROM STREAM()\");"
  },
  {
    "sha": "e344863b387b7d04e347d972f41876ba5a3396c7",
    "filename": "src/test/java/com/yahoo/bullet/bql/query/TypeSetterTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/query/TypeSetterTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/query/TypeSetterTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/test/java/com/yahoo/bullet/bql/query/TypeSetterTest.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -16,6 +16,12 @@\n import java.util.Collections;\n \n public class TypeSetterTest {\n+    @Test\n+    public void testConstructor() {\n+        // coverage\n+        new TypeSetter();\n+    }\n+\n     @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"This is not a supported unary operation: \\\\+\")\n     public void testGetUnaryTypeNotUnary() {\n         // coverage"
  },
  {
    "sha": "350c8945faa3bc00f3d17b958ade82f25aabdf4a",
    "filename": "src/test/java/com/yahoo/bullet/bql/tree/ASTVisitorTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/tree/ASTVisitorTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/tree/ASTVisitorTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/test/java/com/yahoo/bullet/bql/tree/ASTVisitorTest.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -88,7 +88,7 @@ public void testVisitFieldExpression() {\n \n     @Test\n     public void testVisitSubFieldExpression() {\n-        SubFieldExpressionNode subFieldExpression = new SubFieldExpressionNode(null, null, null, null, null);\n+        SubFieldExpressionNode subFieldExpression = new SubFieldExpressionNode(null, null, null, null, null, null, null);\n         visitor.process(subFieldExpression);\n         Mockito.verify(visitor).visitSubFieldExpression(subFieldExpression, null);\n     }"
  },
  {
    "sha": "744692d77f85df503ab29b8374a94a8428201095",
    "filename": "src/test/java/com/yahoo/bullet/bql/tree/SubFieldExpressionNodeTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/tree/SubFieldExpressionNodeTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/tree/SubFieldExpressionNodeTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/test/java/com/yahoo/bullet/bql/tree/SubFieldExpressionNodeTest.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -14,16 +14,18 @@\n public class SubFieldExpressionNodeTest {\n     @Test\n     public void testEqualsAndHashCode() {\n-        NodeUtils.testEqualsAndHashCode(() -> new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"def\"), null, null),\n-                                        new SubFieldExpressionNode(identifier(\"---\"), 0, identifier(\"def\"), null, null),\n-                                        new SubFieldExpressionNode(identifier(\"abc\"), 1, identifier(\"def\"), null, null),\n-                                        new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"---\"), null, null));\n+        NodeUtils.testEqualsAndHashCode(() -> new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"def\"), identifier(\"ghi\"), \"jkl\", null, null),\n+                                        new SubFieldExpressionNode(identifier(\"---\"), 0, identifier(\"def\"), identifier(\"ghi\"), \"jkl\", null, null),\n+                                        new SubFieldExpressionNode(identifier(\"abc\"), 1, identifier(\"def\"), identifier(\"ghi\"), \"jkl\", null, null),\n+                                        new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"---\"), identifier(\"ghi\"), \"jkl\", null, null),\n+                                        new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"def\"), identifier(\"---\"), \"jkl\", null, null),\n+                                        new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"def\"), identifier(\"ghi\"), \"---\", null, null));\n     }\n \n     @Test\n     public void testEqualsAndHashCodeTypeDoesntMatter() {\n-        SubFieldExpressionNode a = new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"def\"), Type.STRING_MAP_LIST, null);\n-        SubFieldExpressionNode b = new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"def\"), Type.BOOLEAN, null);\n+        SubFieldExpressionNode a = new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"def\"), null, null, Type.STRING_MAP_LIST, null);\n+        SubFieldExpressionNode b = new SubFieldExpressionNode(identifier(\"abc\"), 0, identifier(\"def\"), null, null, Type.BOOLEAN, null);\n         Assert.assertEquals(a, b);\n         Assert.assertEquals(a.hashCode(), b.hashCode());\n     }"
  },
  {
    "sha": "79a5da4b44cb063d0218c890eebc386e0b383fde",
    "filename": "src/test/java/com/yahoo/bullet/bql/util/QueryUtil.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/bullet-db/bullet-bql/blob/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/util/QueryUtil.java",
    "raw_url": "https://github.com/bullet-db/bullet-bql/raw/98ca09996f5ce06a76a8890a2190f1070a9a2741/src/test/java/com/yahoo/bullet/bql/util/QueryUtil.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-bql/contents/src/test/java/com/yahoo/bullet/bql/util/QueryUtil.java?ref=98ca09996f5ce06a76a8890a2190f1070a9a2741",
    "patch": "@@ -52,12 +52,24 @@ public static FieldExpression field(String field, Integer index, String subKey,\n         return expression;\n     }\n \n+    public static FieldExpression field(String field, Integer index, Expression variableSubKey, Type type) {\n+        FieldExpression expression = new FieldExpression(field, index, variableSubKey);\n+        expression.setType(type);\n+        return expression;\n+    }\n+\n     public static FieldExpression field(String field, String key, Type type) {\n         FieldExpression expression = new FieldExpression(field, key);\n         expression.setType(type);\n         return expression;\n     }\n \n+    public static FieldExpression field(String field, Expression variableKey, Type type) {\n+        FieldExpression expression = new FieldExpression(field, variableKey);\n+        expression.setType(type);\n+        return expression;\n+    }\n+\n     public static FieldExpression field(String field, String key, String subKey, Type type) {\n         FieldExpression expression = new FieldExpression(field, key, subKey);\n         expression.setType(type);"
  }
]
