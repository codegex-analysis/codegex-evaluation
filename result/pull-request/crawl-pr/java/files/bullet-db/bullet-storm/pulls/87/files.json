[
  {
    "sha": "924399bdb7b9d150fbf9f24a3c8a55fee820c48e",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/pom.xml",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/pom.xml",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/pom.xml?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -4,7 +4,7 @@\n \n     <groupId>com.yahoo.bullet</groupId>\n     <artifactId>bullet-storm</artifactId>\n-    <version>1.0.2-SNAPSHOT</version>\n+    <version>1.1.0-SNAPSHOT</version>\n     <packaging>jar</packaging>\n     <name>bullet-storm</name>\n \n@@ -39,7 +39,7 @@\n         <storm.metrics.version>2.2.0</storm.metrics.version>\n         <jackson.core.version>2.10.2</jackson.core.version>\n         <bullet.core.version>1.2.0</bullet.core.version>\n-        <bullet.dsl.version>1.0.0</bullet.dsl.version>\n+        <bullet.dsl.version>1.1.1</bullet.dsl.version>\n     </properties>\n \n     <dependencies>"
  },
  {
    "sha": "dcc72276c7e4ca6469fbae890be4de58d4cff32c",
    "filename": "src/main/java/com/yahoo/bullet/storm/BulletStormConfig.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/BulletStormConfig.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/BulletStormConfig.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/main/java/com/yahoo/bullet/storm/BulletStormConfig.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -41,6 +41,8 @@\n     public static final String DSL_SPOUT_CPU_LOAD = \"bullet.topology.dsl.spout.cpu.load\";\n     public static final String DSL_SPOUT_MEMORY_ON_HEAP_LOAD = \"bullet.topology.dsl.spout.memory.on.heap.load\";\n     public static final String DSL_SPOUT_MEMORY_OFF_HEAP_LOAD = \"bullet.topology.dsl.spout.memory.off.heap.load\";\n+    public static final String DSL_SPOUT_CONNECTOR_CLASS_NAME = \"bullet.topology.dsl.spout.connector.class.name\";\n+    public static final String DSL_SPOUT_CONNECTOR_SPOUT_ENABLE = \"bullet.topology.dsl.spout.connector.as.spout.enable\";\n     public static final String DSL_BOLT_ENABLE = \"bullet.topology.dsl.bolt.enable\";\n     public static final String DSL_BOLT_PARALLELISM = \"bullet.topology.dsl.bolt.parallelism\";\n     public static final String DSL_BOLT_CPU_LOAD = \"bullet.topology.dsl.bolt.cpu.load\";\n@@ -107,6 +109,7 @@\n     public static final int DEFAULT_REPLAY_BATCH_SIZE = 10000;\n     public static final boolean DEFAULT_REPLAY_BATCH_COMPRESS_ENABLE = false;\n     public static final boolean DEFAULT_DSL_SPOUT_ENABLE = false;\n+    public static final boolean DEFAULT_DSL_SPOUT_CONNECTOR_SPOUT_ENABLE = false;\n     public static final int DEFAULT_DSL_SPOUT_PARALLELISM = 10;\n     public static final double DEFAULT_DSL_SPOUT_CPU_LOAD = 50.0;\n     public static final double DEFAULT_DSL_SPOUT_MEMORY_ON_HEAP_LOAD = 256.0;\n@@ -235,6 +238,13 @@\n                  .checkIf(Validator::isFloat)\n                  .defaultTo(DEFAULT_DSL_SPOUT_MEMORY_OFF_HEAP_LOAD)\n                  .castTo(Validator::asDouble);\n+        VALIDATOR.define(DSL_SPOUT_CONNECTOR_CLASS_NAME)\n+                 .checkIf(Validator::isClassName)\n+                 .orFail()\n+                 .unless(Validator::isNull);\n+        VALIDATOR.define(DSL_SPOUT_CONNECTOR_SPOUT_ENABLE)\n+                 .defaultTo(DEFAULT_DSL_SPOUT_CONNECTOR_SPOUT_ENABLE)\n+                 .checkIf(Validator::isBoolean);\n \n         VALIDATOR.define(DSL_BOLT_ENABLE)\n                  .defaultTo(DEFAULT_DSL_BOLT_ENABLE)"
  },
  {
    "sha": "686db6386d2607ae4856c703d6141b1d502c80fd",
    "filename": "src/main/java/com/yahoo/bullet/storm/DSLConnectorSpout.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/DSLConnectorSpout.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/DSLConnectorSpout.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/main/java/com/yahoo/bullet/storm/DSLConnectorSpout.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 2021, Yahoo Inc.\n+ *  Licensed under the terms of the Apache License, Version 2.0.\n+ *  See the LICENSE file associated with the project for terms.\n+ */\n+package com.yahoo.bullet.storm;\n+\n+import org.apache.storm.ICredentialsListener;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.apache.storm.task.TopologyContext;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class exists so that users can use the {@link SpoutConnector} as the DSLSpout itself. Users are expected to do\n+ * this if they wish to use an existing spout to read their data but still use other DSL components like a deserializer\n+ * or a converter. This class will proxy all calls for the spout interface including credentials (optionally) to the\n+ * {@link SpoutConnector} instance. It will not call the {@link SpoutConnector#initialize()}. It will use the spout\n+ * interfaces but not {@code nextTuple()} and it will use the {@link SpoutConnector#read()} and the\n+ * {@link SpoutConnector#close()} interfaces.\n+ */\n+public class DSLConnectorSpout extends DSLSpout<SpoutConnector> implements ICredentialsListener {\n+    private static final long serialVersionUID = -6238096209128244464L;\n+\n+    /**\n+     * Creates a DSLConnectorSpout with a given {@link BulletStormConfig}.\n+     *\n+     * @param bulletStormConfig The non-null BulletStormConfig to use. It should contain the settings to initialize\n+     *                          a {@link SpoutConnector} and a BulletRecordConverter.\n+     */\n+    public DSLConnectorSpout(BulletStormConfig bulletStormConfig) {\n+        super(bulletStormConfig);\n+    }\n+\n+    @Override\n+    public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector) {\n+        this.collector = collector;\n+        connector.open(conf, context, collector);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate();\n+        connector.activate();\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+        connector.deactivate();\n+    }\n+\n+    @Override\n+    public void ack(Object id) {\n+        connector.ack(id);\n+    }\n+\n+    @Override\n+    public void fail(Object id) {\n+        connector.fail(id);\n+    }\n+\n+    @Override\n+    public Map<String, Object> getComponentConfiguration() {\n+        return connector.getComponentConfiguration();\n+    }\n+\n+    @Override\n+    public void setCredentials(Map<String, String> credentials) {\n+        connector.setCredentials(credentials);\n+    }\n+}"
  },
  {
    "sha": "224cbdfbc77117edc79d933ab19d1d77d3cbc468",
    "filename": "src/main/java/com/yahoo/bullet/storm/DSLSpout.java",
    "status": "modified",
    "additions": 16,
    "deletions": 5,
    "changes": 21,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/DSLSpout.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/DSLSpout.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/main/java/com/yahoo/bullet/storm/DSLSpout.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -27,12 +27,12 @@\n import java.util.stream.Collectors;\n \n @Slf4j\n-public class DSLSpout extends ConfigComponent implements IRichSpout {\n+public class DSLSpout<T extends BulletConnector> extends ConfigComponent implements IRichSpout {\n     private static final long serialVersionUID = 9218045272408135524L;\n     private static final Long DUMMY_ID = 42L;\n \n-    private SpoutOutputCollector collector;\n-    private BulletConnector connector;\n+    protected transient SpoutOutputCollector collector;\n+    protected T connector;\n     private BulletRecordConverter converter;\n     private BulletDeserializer deserializer;\n     private boolean dslBoltEnable;\n@@ -45,7 +45,7 @@\n     public DSLSpout(BulletStormConfig bulletStormConfig) {\n         super(bulletStormConfig);\n         BulletDSLConfig config = new BulletDSLConfig(bulletStormConfig);\n-        connector = BulletConnector.from(config);\n+        connector = getConnector(config);\n         dslBoltEnable = config.getAs(BulletStormConfig.DSL_BOLT_ENABLE, Boolean.class);\n         if (!dslBoltEnable) {\n             boolean dslDeserializerEnable = config.getAs(BulletStormConfig.DSL_DESERIALIZER_ENABLE, Boolean.class);\n@@ -55,7 +55,7 @@ public DSLSpout(BulletStormConfig bulletStormConfig) {\n     }\n \n     @Override\n-    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n+    public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector) {\n         this.collector = collector;\n         try {\n             connector.initialize();\n@@ -129,4 +129,15 @@ public void close() {\n         }\n         log.info(\"DSLSpout closed\");\n     }\n+\n+    /**\n+     * Creates the {@link BulletConnector} of the given type from the config.\n+     *\n+     * @param config The {@link BulletDSLConfig} with the relevant settings.\n+     * @return An instance of the relevant {@link BulletConnector}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected T getConnector(BulletDSLConfig config) {\n+        return (T) BulletConnector.from(config);\n+    }\n }"
  },
  {
    "sha": "64ef965a3622beba668edbecdde990588f7cb3e3",
    "filename": "src/main/java/com/yahoo/bullet/storm/QuerySpout.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/QuerySpout.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/QuerySpout.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/main/java/com/yahoo/bullet/storm/QuerySpout.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -72,7 +72,7 @@ public QuerySpout(BulletStormConfig config) {\n     }\n \n     @Override\n-    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n+    public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector) {\n         // Add the Storm Config and the context as is, in case any PubSubs need it.\n         config.set(BulletStormConfig.STORM_CONFIG, conf);\n         config.set(BulletStormConfig.STORM_CONTEXT, context);"
  },
  {
    "sha": "0607d5df411ab94461a89fb12cc34d4818430200",
    "filename": "src/main/java/com/yahoo/bullet/storm/SpoutConnector.java",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/SpoutConnector.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/SpoutConnector.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/main/java/com/yahoo/bullet/storm/SpoutConnector.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -0,0 +1,138 @@\n+/*\n+ *  Copyright 2021, Yahoo Inc.\n+ *  Licensed under the terms of the Apache License, Version 2.0.\n+ *  See the LICENSE file associated with the project for terms.\n+ */\n+package com.yahoo.bullet.storm;\n+\n+import com.yahoo.bullet.common.BulletConfig;\n+import com.yahoo.bullet.dsl.connector.BulletConnector;\n+import lombok.Setter;\n+import org.apache.storm.ICredentialsListener;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.apache.storm.task.TopologyContext;\n+import org.apache.storm.topology.IRichSpout;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is a {@link BulletConnector} meant to compose an instance of a {@link IRichSpout} that can also optionally\n+ * implement the {@link ICredentialsListener} interface. The spout being composed must have a constructor that accepts a\n+ * {@link BulletConfig}. There are multiple ways to use this class but not all methods can be used in the same situation.\n+ * 1. This connector can be used in the DSL infrastructure if you wish to plug in an existing spout implementation that\n+ *    you already have but also wish to use a DSL converter (in a separate bolt or in the spout) and/or a DSL\n+ *    deserializer. In this case, you must implement the {@link #read()} method. The DSL spout will not invoke\n+ *    {@link #nextTuple()} and rely on the {@link #read()} to read and pass the read objects to the rest of the DSL\n+ *    infrastructure. It will not invoke the {@link #initialize()} method and instead call the {@link #activate()} and\n+ *    the {@link #open(Map, TopologyContext, SpoutOutputCollector)} in the appropriate methods in the spout.\n+ * 2. It can also be used as a {@link BulletConnector}. In this case, the {@link #initialize()} method will call\n+ *    {@link IRichSpout#open(Map, TopologyContext, SpoutOutputCollector)} and {@link IRichSpout#activate()} on the\n+ *    spout. You can use the {@code #setContext(TopologyContext)}, {@code #setOutputCollector(SpoutOutputCollector)} and\n+ *    {@code #setStormConfiguration(Map)} to pass in the arguments to the open. The {@link #close()} will invoke the\n+ *    {@link IRichSpout#deactivate()} method on the call. In this case, you must extend this class and override the\n+ *    {@link #read()} method to actually do the transfer of the data from the spout.\n+ * 3. This connector is itself a {@link IRichSpout} and can be used as one if needed. It would just behave as a proxy to\n+ *    the underlying spout in that case. The {@link ICredentialsListener} interface is also implemented if necessary.\n+ *    This usage is not really useful as you could have used the spout directly but it may be helpful to have a wrapper\n+ *    for your spout that works with the {@link BulletConfig}.\n+ *\n+ * The {@link #getSpout()} method is called on construction to create the composed spout. By default, it uses the\n+ * {@link BulletStormConfig#DSL_SPOUT_CONNECTOR_CLASS_NAME} from the {@link BulletConfig} and reflection to load the\n+ * spout. You may override it if you need a more elaborate creation mechanism.\n+ *\n+ * @param <T> The type of the spout being composed.\n+ */\n+public abstract class SpoutConnector<T extends IRichSpout> extends BulletConnector implements IRichSpout, ICredentialsListener {\n+    private static final long serialVersionUID = -4270291448244475213L;\n+\n+    protected T spout;\n+    @Setter\n+    protected Map<String, Object> stormConfiguration;\n+    @Setter\n+    protected transient TopologyContext context;\n+    @Setter\n+    protected transient SpoutOutputCollector outputCollector;\n+\n+    /**\n+     * Constructor that takes a {@link BulletConfig}.\n+     *\n+     * @param bulletConfig The {@link BulletConfig} to use.\n+     */\n+    public SpoutConnector(BulletConfig bulletConfig) {\n+        super(bulletConfig);\n+        spout = getSpout();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        spout.open(stormConfiguration, context, outputCollector);\n+        activate();\n+    }\n+\n+    @Override\n+    public void close() {\n+        deactivate();\n+    }\n+\n+    @Override\n+    public void nextTuple() {\n+        spout.nextTuple();\n+    }\n+\n+    @Override\n+    public void open(Map<String, Object> map, TopologyContext topologyContext, SpoutOutputCollector spoutOutputCollector) {\n+        stormConfiguration = map;\n+        context = topologyContext;\n+        outputCollector = spoutOutputCollector;\n+        spout.open(map, topologyContext, spoutOutputCollector);\n+    }\n+\n+    @Override\n+    public void setCredentials(Map<String, String> map) {\n+        if (spout instanceof ICredentialsListener) {\n+            ((ICredentialsListener) spout).setCredentials(map);\n+        }\n+    }\n+\n+    @Override\n+    public void activate() {\n+        spout.activate();\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        spout.deactivate();\n+    }\n+\n+    @Override\n+    public void ack(Object o) {\n+        spout.ack(o);\n+    }\n+\n+    @Override\n+    public void fail(Object o) {\n+        spout.fail(o);\n+    }\n+\n+    @Override\n+    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\n+        spout.declareOutputFields(outputFieldsDeclarer);\n+    }\n+\n+    @Override\n+    public Map<String, Object> getComponentConfiguration() {\n+        return spout.getComponentConfiguration();\n+    }\n+\n+    /**\n+     * Creates an instance of the composed spout. By default, uses the config to get the\n+     * {@link BulletStormConfig#DSL_SPOUT_CONNECTOR_CLASS_NAME} and reflection to initialize an instance of the spout.\n+     * The provided class must have a constructor that accepts a {@link BulletConfig}.\n+     *\n+     * @return The created spout.\n+     */\n+    protected T getSpout() {\n+        return this.config.loadConfiguredClass(BulletStormConfig.DSL_SPOUT_CONNECTOR_CLASS_NAME);\n+    }\n+}"
  },
  {
    "sha": "85969b8309d29c7962085526e4d8718446be2dcd",
    "filename": "src/main/java/com/yahoo/bullet/storm/StormUtils.java",
    "status": "modified",
    "additions": 87,
    "deletions": 61,
    "changes": 148,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/StormUtils.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/StormUtils.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/main/java/com/yahoo/bullet/storm/StormUtils.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -45,75 +45,76 @@\n      * topology and the {@link TopologyBuilder} used to create your topology should be provided. That topology\n      * will be wired up with Bullet reading from your component that produces the {@link com.yahoo.bullet.record.BulletRecord}.\n      *\n-     * @param config The non-null, validated {@link BulletStormConfig} that contains the necessary configuration.\n+     * @param bulletConfig The non-null, validated {@link BulletStormConfig} that contains the necessary configuration.\n      * @param recordComponent The non-null name of the component used in your topology that is the source of records for Bullet.\n      * @param builder The non-null {@link TopologyBuilder} that was used to create your topology.\n      * @param stormConfig The non-null Storm {@link Config} to use to submit the topology with.\n      * @throws Exception if there were issues creating the topology.\n      */\n-    public static void submit(BulletStormConfig config, String recordComponent, TopologyBuilder builder, Config stormConfig) throws Exception {\n-        Objects.requireNonNull(config);\n+    public static void submit(BulletStormConfig bulletConfig, String recordComponent, TopologyBuilder builder, Config stormConfig) throws Exception {\n+        Objects.requireNonNull(bulletConfig);\n         Objects.requireNonNull(recordComponent);\n         Objects.requireNonNull(builder);\n+        Objects.requireNonNull(stormConfig);\n \n-        String name = config.getAs(BulletStormConfig.TOPOLOGY_NAME, String.class);\n+        String name = bulletConfig.getAs(BulletStormConfig.TOPOLOGY_NAME, String.class);\n \n-        Number querySpoutParallelism = config.getAs(BulletStormConfig.QUERY_SPOUT_PARALLELISM, Number.class);\n-        Number querySpoutCPULoad = config.getAs(BulletStormConfig.QUERY_SPOUT_CPU_LOAD, Number.class);\n-        Number querySpoutMemoryOnHeapLoad = config.getAs(BulletStormConfig.QUERY_SPOUT_MEMORY_ON_HEAP_LOAD, Number.class);\n-        Number querySpoutMemoryOffHeapLoad = config.getAs(BulletStormConfig.QUERY_SPOUT_MEMORY_OFF_HEAP_LOAD, Number.class);\n+        Number querySpoutParallelism = bulletConfig.getAs(BulletStormConfig.QUERY_SPOUT_PARALLELISM, Number.class);\n+        Number querySpoutCPULoad = bulletConfig.getAs(BulletStormConfig.QUERY_SPOUT_CPU_LOAD, Number.class);\n+        Number querySpoutMemoryOnHeapLoad = bulletConfig.getAs(BulletStormConfig.QUERY_SPOUT_MEMORY_ON_HEAP_LOAD, Number.class);\n+        Number querySpoutMemoryOffHeapLoad = bulletConfig.getAs(BulletStormConfig.QUERY_SPOUT_MEMORY_OFF_HEAP_LOAD, Number.class);\n \n         // Tick parallelism must be 1 otherwise multiple ticks will get delivered to a component\n         Number tickSpoutParallelism = BulletStormConfig.TICK_SPOUT_PARALLELISM;\n-        Number tickSpoutCPULoad = config.getAs(BulletStormConfig.TICK_SPOUT_CPU_LOAD, Number.class);\n-        Number tickSpoutMemoryOnheapLoad = config.getAs(BulletStormConfig.TICK_SPOUT_MEMORY_ON_HEAP_LOAD, Number.class);\n-        Number tickSpoutMemoryOffHeapLoad = config.getAs(BulletStormConfig.TICK_SPOUT_MEMORY_OFF_HEAP_LOAD, Number.class);\n-\n-        Number filterBoltParallelism = config.getAs(BulletStormConfig.FILTER_BOLT_PARALLELISM, Number.class);\n-        Number filterBoltCPULoad = config.getAs(BulletStormConfig.FILTER_BOLT_CPU_LOAD, Number.class);\n-        Number filterBoltMemoryOnheapLoad = config.getAs(BulletStormConfig.FILTER_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n-        Number filterBoltMemoryOffHeapLoad = config.getAs(BulletStormConfig.FILTER_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n-\n-        Number joinBoltParallelism = config.getAs(BulletStormConfig.JOIN_BOLT_PARALLELISM, Number.class);\n-        Number joinBoltCPULoad = config.getAs(BulletStormConfig.JOIN_BOLT_CPU_LOAD, Number.class);\n-        Number joinBoltMemoryOnHeapLoad = config.getAs(BulletStormConfig.JOIN_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n-        Number joinBoltMemoryOffHeapLoad = config.getAs(BulletStormConfig.JOIN_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n-\n-        Number resultBoltParallelism = config.getAs(BulletStormConfig.RESULT_BOLT_PARALLELISM, Number.class);\n-        Number resultBoltCPULoad = config.getAs(BulletStormConfig.RESULT_BOLT_CPU_LOAD, Number.class);\n-        Number resultBoltMemoryOnHeapLoad = config.getAs(BulletStormConfig.RESULT_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n-        Number resultBoltMemoryOffHeapLoad = config.getAs(BulletStormConfig.RESULT_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n-\n-        Number loopBoltParallelism = config.getAs(BulletStormConfig.LOOP_BOLT_PARALLELISM, Number.class);\n-        Number loopBoltCPULoad = config.getAs(BulletStormConfig.LOOP_BOLT_CPU_LOAD, Number.class);\n-        Number loopBoltMemoryOnHeapLoad = config.getAs(BulletStormConfig.LOOP_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n-        Number loopBoltMemoryOffHeapLoad = config.getAs(BulletStormConfig.LOOP_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n-\n-        Number replayBoltParallelism = config.getAs(BulletStormConfig.REPLAY_BOLT_PARALLELISM, Number.class);\n-        Number replayBoltCPULoad = config.getAs(BulletStormConfig.REPLAY_BOLT_CPU_LOAD, Number.class);\n-        Number replayBoltMemoryOnHeapLoad = config.getAs(BulletStormConfig.REPLAY_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n-        Number replayBoltMemoryOffHeapLoad = config.getAs(BulletStormConfig.REPLAY_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n-\n-        boolean isWindowingDisabled = config.getAs(BulletConfig.WINDOW_DISABLE, Boolean.class);\n-        boolean isReplayEnabled = config.getAs(BulletStormConfig.REPLAY_ENABLE, Boolean.class);\n-\n-        builder.setSpout(QUERY_COMPONENT, new QuerySpout(config), querySpoutParallelism)\n+        Number tickSpoutCPULoad = bulletConfig.getAs(BulletStormConfig.TICK_SPOUT_CPU_LOAD, Number.class);\n+        Number tickSpoutMemoryOnheapLoad = bulletConfig.getAs(BulletStormConfig.TICK_SPOUT_MEMORY_ON_HEAP_LOAD, Number.class);\n+        Number tickSpoutMemoryOffHeapLoad = bulletConfig.getAs(BulletStormConfig.TICK_SPOUT_MEMORY_OFF_HEAP_LOAD, Number.class);\n+\n+        Number filterBoltParallelism = bulletConfig.getAs(BulletStormConfig.FILTER_BOLT_PARALLELISM, Number.class);\n+        Number filterBoltCPULoad = bulletConfig.getAs(BulletStormConfig.FILTER_BOLT_CPU_LOAD, Number.class);\n+        Number filterBoltMemoryOnheapLoad = bulletConfig.getAs(BulletStormConfig.FILTER_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n+        Number filterBoltMemoryOffHeapLoad = bulletConfig.getAs(BulletStormConfig.FILTER_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n+\n+        Number joinBoltParallelism = bulletConfig.getAs(BulletStormConfig.JOIN_BOLT_PARALLELISM, Number.class);\n+        Number joinBoltCPULoad = bulletConfig.getAs(BulletStormConfig.JOIN_BOLT_CPU_LOAD, Number.class);\n+        Number joinBoltMemoryOnHeapLoad = bulletConfig.getAs(BulletStormConfig.JOIN_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n+        Number joinBoltMemoryOffHeapLoad = bulletConfig.getAs(BulletStormConfig.JOIN_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n+\n+        Number resultBoltParallelism = bulletConfig.getAs(BulletStormConfig.RESULT_BOLT_PARALLELISM, Number.class);\n+        Number resultBoltCPULoad = bulletConfig.getAs(BulletStormConfig.RESULT_BOLT_CPU_LOAD, Number.class);\n+        Number resultBoltMemoryOnHeapLoad = bulletConfig.getAs(BulletStormConfig.RESULT_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n+        Number resultBoltMemoryOffHeapLoad = bulletConfig.getAs(BulletStormConfig.RESULT_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n+\n+        Number loopBoltParallelism = bulletConfig.getAs(BulletStormConfig.LOOP_BOLT_PARALLELISM, Number.class);\n+        Number loopBoltCPULoad = bulletConfig.getAs(BulletStormConfig.LOOP_BOLT_CPU_LOAD, Number.class);\n+        Number loopBoltMemoryOnHeapLoad = bulletConfig.getAs(BulletStormConfig.LOOP_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n+        Number loopBoltMemoryOffHeapLoad = bulletConfig.getAs(BulletStormConfig.LOOP_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n+\n+        Number replayBoltParallelism = bulletConfig.getAs(BulletStormConfig.REPLAY_BOLT_PARALLELISM, Number.class);\n+        Number replayBoltCPULoad = bulletConfig.getAs(BulletStormConfig.REPLAY_BOLT_CPU_LOAD, Number.class);\n+        Number replayBoltMemoryOnHeapLoad = bulletConfig.getAs(BulletStormConfig.REPLAY_BOLT_MEMORY_ON_HEAP_LOAD, Number.class);\n+        Number replayBoltMemoryOffHeapLoad = bulletConfig.getAs(BulletStormConfig.REPLAY_BOLT_MEMORY_OFF_HEAP_LOAD, Number.class);\n+\n+        boolean isWindowingDisabled = bulletConfig.getAs(BulletConfig.WINDOW_DISABLE, Boolean.class);\n+        boolean isReplayEnabled = bulletConfig.getAs(BulletStormConfig.REPLAY_ENABLE, Boolean.class);\n+\n+        builder.setSpout(QUERY_COMPONENT, new QuerySpout(bulletConfig), querySpoutParallelism)\n                .setCPULoad(querySpoutCPULoad).setMemoryLoad(querySpoutMemoryOnHeapLoad, querySpoutMemoryOffHeapLoad);\n \n-        builder.setSpout(TICK_COMPONENT, new TickSpout(config), tickSpoutParallelism)\n+        builder.setSpout(TICK_COMPONENT, new TickSpout(bulletConfig), tickSpoutParallelism)\n                .setCPULoad(tickSpoutCPULoad).setMemoryLoad(tickSpoutMemoryOnheapLoad, tickSpoutMemoryOffHeapLoad);\n \n         // Hook in the source of the BulletRecords\n         if (isReplayEnabled) {\n-            builder.setBolt(FILTER_COMPONENT, new FilterBolt(recordComponent, config), filterBoltParallelism)\n+            builder.setBolt(FILTER_COMPONENT, new FilterBolt(recordComponent, bulletConfig), filterBoltParallelism)\n                    .shuffleGrouping(recordComponent)\n                    .allGrouping(QUERY_COMPONENT, QUERY_STREAM)\n                    .allGrouping(QUERY_COMPONENT, METADATA_STREAM)\n                    .directGrouping(REPLAY_COMPONENT, REPLAY_STREAM)\n                    .allGrouping(TICK_COMPONENT, TICK_STREAM)\n                    .setCPULoad(filterBoltCPULoad).setMemoryLoad(filterBoltMemoryOnheapLoad, filterBoltMemoryOffHeapLoad);\n \n-            builder.setBolt(JOIN_COMPONENT, new JoinBolt(config), joinBoltParallelism)\n+            builder.setBolt(JOIN_COMPONENT, new JoinBolt(bulletConfig), joinBoltParallelism)\n                    .customGrouping(QUERY_COMPONENT, QUERY_STREAM, new IDGrouping())\n                    .allGrouping(QUERY_COMPONENT, METADATA_STREAM)\n                    .customGrouping(FILTER_COMPONENT, DATA_STREAM, new IDGrouping())\n@@ -123,20 +124,20 @@ public static void submit(BulletStormConfig config, String recordComponent, Topo\n                    .allGrouping(TICK_COMPONENT, TICK_STREAM)\n                    .setCPULoad(joinBoltCPULoad).setMemoryLoad(joinBoltMemoryOnHeapLoad, joinBoltMemoryOffHeapLoad);\n \n-            builder.setBolt(REPLAY_COMPONENT, new ReplayBolt(config), replayBoltParallelism)\n+            builder.setBolt(REPLAY_COMPONENT, new ReplayBolt(bulletConfig), replayBoltParallelism)\n                    .allGrouping(QUERY_COMPONENT, QUERY_STREAM)\n                    .allGrouping(QUERY_COMPONENT, METADATA_STREAM)\n                    .fieldsGrouping(QUERY_COMPONENT, REPLAY_STREAM, new Fields(ID_FIELD))\n                    .setCPULoad(replayBoltCPULoad).setMemoryLoad(replayBoltMemoryOnHeapLoad, replayBoltMemoryOffHeapLoad);\n         } else {\n-            builder.setBolt(FILTER_COMPONENT, new FilterBolt(recordComponent, config), filterBoltParallelism)\n+            builder.setBolt(FILTER_COMPONENT, new FilterBolt(recordComponent, bulletConfig), filterBoltParallelism)\n                    .shuffleGrouping(recordComponent)\n                    .allGrouping(QUERY_COMPONENT, QUERY_STREAM)\n                    .allGrouping(QUERY_COMPONENT, METADATA_STREAM)\n                    .allGrouping(TICK_COMPONENT, TICK_STREAM)\n                    .setCPULoad(filterBoltCPULoad).setMemoryLoad(filterBoltMemoryOnheapLoad, filterBoltMemoryOffHeapLoad);\n \n-            builder.setBolt(JOIN_COMPONENT, new JoinBolt(config), joinBoltParallelism)\n+            builder.setBolt(JOIN_COMPONENT, new JoinBolt(bulletConfig), joinBoltParallelism)\n                    .fieldsGrouping(QUERY_COMPONENT, QUERY_STREAM, new Fields(ID_FIELD))\n                    .fieldsGrouping(QUERY_COMPONENT, METADATA_STREAM, new Fields(ID_FIELD))\n                    .fieldsGrouping(FILTER_COMPONENT, DATA_STREAM, new Fields(ID_FIELD))\n@@ -145,30 +146,30 @@ public static void submit(BulletStormConfig config, String recordComponent, Topo\n                    .setCPULoad(joinBoltCPULoad).setMemoryLoad(joinBoltMemoryOnHeapLoad, joinBoltMemoryOffHeapLoad);\n         }\n \n-        builder.setBolt(TopologyConstants.RESULT_COMPONENT, new ResultBolt(config), resultBoltParallelism)\n+        builder.setBolt(TopologyConstants.RESULT_COMPONENT, new ResultBolt(bulletConfig), resultBoltParallelism)\n                .shuffleGrouping(JOIN_COMPONENT, RESULT_STREAM)\n                .setCPULoad(resultBoltCPULoad).setMemoryLoad(resultBoltMemoryOnHeapLoad, resultBoltMemoryOffHeapLoad);\n \n         // Hook in the Loop Bolt only if windowing or replay is enabled\n         if (isWindowingDisabled && !isReplayEnabled) {\n             log.info(\"Windowing and replay are disabled. Skipping hooking in the Loop Bolt...\");\n         } else {\n-            builder.setBolt(LOOP_COMPONENT, new LoopBolt(config), loopBoltParallelism)\n+            builder.setBolt(LOOP_COMPONENT, new LoopBolt(bulletConfig), loopBoltParallelism)\n                    .shuffleGrouping(FILTER_COMPONENT, FEEDBACK_STREAM)\n                    .shuffleGrouping(JOIN_COMPONENT, FEEDBACK_STREAM)\n                    .setCPULoad(loopBoltCPULoad).setMemoryLoad(loopBoltMemoryOnHeapLoad, loopBoltMemoryOffHeapLoad);\n         }\n \n         // Metrics\n-        Boolean enableMetrics = (Boolean) config.get(BulletStormConfig.TOPOLOGY_METRICS_ENABLE);\n+        Boolean enableMetrics = (Boolean) bulletConfig.get(BulletStormConfig.TOPOLOGY_METRICS_ENABLE);\n         if (enableMetrics) {\n             stormConfig.put(Config.TOPOLOGY_ENABLE_V2_METRICS_TICK, true);\n-            List<String> classNames = config.getAs(BulletStormConfig.TOPOLOGY_METRICS_CLASSES, List.class);\n-            classNames.forEach(className -> ReflectionUtils.registerMetricsConsumer(className, stormConfig, config));\n+            List<String> classNames = bulletConfig.getAs(BulletStormConfig.TOPOLOGY_METRICS_CLASSES, List.class);\n+            classNames.forEach(className -> ReflectionUtils.registerMetricsConsumer(className, stormConfig, bulletConfig));\n         }\n \n         // Put the rest of the other possible custom Storm settings without checking their types\n-        stormConfig.putAll(config.getCustomStormSettings());\n+        stormConfig.putAll(bulletConfig.getCustomStormSettings());\n \n         StormSubmitter.submitTopology(name, stormConfig, builder.createTopology());\n     }\n@@ -193,9 +194,19 @@ private static void addDSLSpout(BulletStormConfig config, TopologyBuilder builde\n         Number dslSpoutMemoryOnHeapLoad = config.getAs(BulletStormConfig.DSL_SPOUT_MEMORY_ON_HEAP_LOAD, Number.class);\n         Number dslSpoutMemoryOffHeapLoad = config.getAs(BulletStormConfig.DSL_SPOUT_MEMORY_OFF_HEAP_LOAD, Number.class);\n \n+        Boolean dslConnectorAsSpout = config.getAs(BulletStormConfig.DSL_SPOUT_CONNECTOR_SPOUT_ENABLE, Boolean.class);\n         Boolean dslBoltEnable = config.getAs(BulletStormConfig.DSL_BOLT_ENABLE, Boolean.class);\n \n-        builder.setSpout(dslBoltEnable ? TopologyConstants.DATA_COMPONENT : TopologyConstants.RECORD_COMPONENT, new DSLSpout(config), dslSpoutParallelism)\n+        DSLSpout spout;\n+        if (dslConnectorAsSpout) {\n+            String dslConnectorSpoutClass = config.getAs(BulletStormConfig.DSL_SPOUT_CONNECTOR_CLASS_NAME, String.class);\n+            log.info(\"Using the SpoutConnector with the spout {} as the DSLSpout\", dslConnectorSpoutClass);\n+            spout = new DSLConnectorSpout(config);\n+        } else {\n+            spout = new DSLSpout(config);\n+        }\n+\n+        builder.setSpout(dslBoltEnable ? TopologyConstants.DATA_COMPONENT : TopologyConstants.RECORD_COMPONENT, spout, dslSpoutParallelism)\n                .setCPULoad(dslSpoutCPULoad)\n                .setMemoryLoad(dslSpoutMemoryOnHeapLoad, dslSpoutMemoryOffHeapLoad);\n \n@@ -237,20 +248,35 @@ private static void addBulletSpout(BulletStormConfig config, TopologyBuilder bui\n     /**\n      * This submits a topology after loading the configured Spout (and optionally, Bolt), which is either the {@link DSLSpout}\n      * and {@link DSLBolt} or a custom Spout and Bolt. The topology is submitted with the given configuration as the source\n-     * of {@link com.yahoo.bullet.record.BulletRecord} using the given {@link TopologyBuilder}\n+     * of {@link com.yahoo.bullet.record.BulletRecord} using the given {@link TopologyBuilder}. Takes a {@link Config}\n+     * if any custom settings were added.\n      *\n-     * @param config The Storm settings for this Bullet topology.\n+     * @param bulletConfig The Bullet settings for this Bullet topology.\n      * @param builder The {@link TopologyBuilder} to use to add the topology to.\n+     * @param stormConfig The Storm {@link Config} to use for this topology.\n      * @throws Exception if there were any issues submitting the topology.\n      */\n-    public static void submit(BulletStormConfig config, TopologyBuilder builder) throws Exception {\n-        Boolean dslSpoutEnable = config.getAs(BulletStormConfig.DSL_SPOUT_ENABLE, Boolean.class);\n+    public static void submit(BulletStormConfig bulletConfig, TopologyBuilder builder, Config stormConfig) throws Exception {\n+        Boolean dslSpoutEnable = bulletConfig.getAs(BulletStormConfig.DSL_SPOUT_ENABLE, Boolean.class);\n         if (dslSpoutEnable) {\n-            addDSLSpout(config, builder);\n+            addDSLSpout(bulletConfig, builder);\n         } else {\n-            addBulletSpout(config, builder);\n+            addBulletSpout(bulletConfig, builder);\n         }\n-        submit(config, TopologyConstants.RECORD_COMPONENT, builder);\n+        submit(bulletConfig, TopologyConstants.RECORD_COMPONENT, builder, stormConfig);\n+    }\n+\n+    /**\n+     * This submits a topology after loading the configured Spout (and optionally, Bolt), which is either the {@link DSLSpout}\n+     * and {@link DSLBolt} or a custom Spout and Bolt. The topology is submitted with the given configuration as the source\n+     * of {@link com.yahoo.bullet.record.BulletRecord} using the given {@link TopologyBuilder}\n+     *\n+     * @param config The Bullet settings for this topology.\n+     * @param builder The {@link TopologyBuilder} to use to add the topology to.\n+     * @throws Exception if there were any issues submitting the topology.\n+     */\n+    public static void submit(BulletStormConfig config, TopologyBuilder builder) throws Exception {\n+        submit(config, builder, new Config());\n     }\n \n     /**"
  },
  {
    "sha": "0898cc65388fcaf116cb926a0e67c1b522f7429c",
    "filename": "src/main/java/com/yahoo/bullet/storm/TickSpout.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/TickSpout.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/java/com/yahoo/bullet/storm/TickSpout.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/main/java/com/yahoo/bullet/storm/TickSpout.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -49,7 +49,7 @@ public TickSpout(BulletStormConfig config) {\n     }\n \n     @Override\n-    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n+    public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector) {\n         this.collector = collector;\n         tick = 0;\n         lastTickTime = System.currentTimeMillis();"
  },
  {
    "sha": "f726812f63b5ab3ba71c97ef1a5fd91fc99b1716",
    "filename": "src/main/resources/bullet_storm_defaults.yaml",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/resources/bullet_storm_defaults.yaml",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/main/resources/bullet_storm_defaults.yaml",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/main/resources/bullet_storm_defaults.yaml?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -161,6 +161,16 @@ bullet.topology.tick.spout.interval.ms: 100\n #     bar: baz\n bullet.topology.loop.bolt.pubsub.overrides: {}\n \n+# Treats the Bullet connector provided to the DSL Spout (using bullet.dsl.connector.class.name) as a SpoutConnector\n+# and uses the provided class (provided using bullet.topology.dsl.spout.connector.class.name)  as the spout to load for\n+# the SpoutConnector. This exists so that you can use the DSL Spout with an existing spout that you do not wish to\n+# modify AND still hook in DSL components like a BulletRecordConverter or a BulletDeserializer (with or without a\n+# DSLBolt) . However, the SpoutConnector you pass with (bullet.dsl.connector.class.name) must implement the read\n+# interface to read data from your spout.\n+bullet.topology.dsl.spout.connector.as.spout.enable: false\n+# The name of the Spout to load if you are using a SpoutConnector as a Spout in your DSL Spout.\n+bullet.topology.dsl.spout.connector.class.name: null\n+\n ########################################################################################################################\n ################################################# Custom Storm Settings ################################################\n ########################################################################################################################"
  },
  {
    "sha": "bcc775e91d1be631d9dc098a36240b9eabd1679b",
    "filename": "src/test/java/com/yahoo/bullet/storm/BulletStormConfigTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/BulletStormConfigTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/BulletStormConfigTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/BulletStormConfigTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -40,7 +40,7 @@ public void testNoFiles() {\n \n     @Test\n     public void testCustomConfig() {\n-        BulletStormConfig config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        BulletStormConfig config = new BulletStormConfig(\"test_config.yaml\");\n         Assert.assertEquals(config.get(BulletStormConfig.TOPOLOGY_NAME), \"test\");\n         Assert.assertEquals(config.get(BulletStormConfig.QUERY_DEFAULT_DURATION), 1000L);\n         Assert.assertEquals(config.get(BulletStormConfig.QUERY_MAX_DURATION), 10000L);"
  },
  {
    "sha": "99ca21c5a430e59f05659581db13a34815e6e042",
    "filename": "src/test/java/com/yahoo/bullet/storm/DSLBoltTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/DSLBoltTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/DSLBoltTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/DSLBoltTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -28,7 +28,7 @@\n     @BeforeMethod\n     public void setup() {\n         collector = new CustomCollector();\n-        config = new BulletStormConfig(\"src/test/resources/test_dsl_config.yaml\");\n+        config = new BulletStormConfig(\"test_dsl_config.yaml\");\n         dslBolt = ComponentUtils.prepare(new DSLBolt(config), collector);\n     }\n "
  },
  {
    "sha": "f47eec4412416709d889826b0823f2a3c696cf01",
    "filename": "src/test/java/com/yahoo/bullet/storm/DSLConnectorSpoutTest.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/DSLConnectorSpoutTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/DSLConnectorSpoutTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/DSLConnectorSpoutTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -0,0 +1,71 @@\n+/*\n+ *  Copyright 2021, Yahoo Inc.\n+ *  Licensed under the terms of the Apache License, Version 2.0.\n+ *  See the LICENSE file associated with the project for terms.\n+ */\n+package com.yahoo.bullet.storm;\n+\n+import com.yahoo.bullet.dsl.BulletDSLConfig;\n+import com.yahoo.bullet.storm.testing.CallCountingCredentialsSpout;\n+import com.yahoo.bullet.storm.testing.CallCountingSpout;\n+import com.yahoo.bullet.storm.testing.CallCountingSpoutConnector;\n+import com.yahoo.bullet.storm.testing.CustomEmitter;\n+import com.yahoo.bullet.storm.testing.CustomOutputFieldsDeclarer;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+public class DSLConnectorSpoutTest {\n+    private DSLConnectorSpout spout;\n+    private CallCountingSpoutConnector connector;\n+\n+    @BeforeMethod\n+    public void setup() {\n+        BulletStormConfig config = new BulletStormConfig(\"test_dsl_config.yaml\");\n+        config.set(BulletDSLConfig.CONNECTOR_CLASS_NAME, CallCountingSpoutConnector.class.getName());\n+        config.set(BulletStormConfig.DSL_SPOUT_CONNECTOR_CLASS_NAME, CallCountingCredentialsSpout.class.getName());\n+        spout = new DSLConnectorSpout(config);\n+        connector = (CallCountingSpoutConnector) spout.connector;\n+    }\n+\n+    @Test\n+    public void testCreation() {\n+        CallCountingSpout spout = connector.getProxy();\n+        Assert.assertEquals(spout.getConfigurationCalls(), 0);\n+        Assert.assertEquals(spout.getDeclareCalls(), 0);\n+        Assert.assertEquals(spout.getCredentialCalls(), 0);\n+        Assert.assertEquals(spout.getOpenCalls(), 0);\n+        Assert.assertEquals(spout.getActivateCalls(), 0);\n+        Assert.assertEquals(spout.getNextTupleCalls(), 0);\n+        Assert.assertEquals(spout.getAckCalls(), 0);\n+        Assert.assertEquals(spout.getFailCalls(), 0);\n+        Assert.assertEquals(spout.getDeactivateCalls(), 0);\n+    }\n+\n+    @Test\n+    public void testProxyingOnlyCertainSpoutMethods() {\n+        CustomOutputFieldsDeclarer declarer = new CustomOutputFieldsDeclarer();\n+        CustomEmitter emitter = new CustomEmitter();\n+        spout.open(null, null, new SpoutOutputCollector(emitter));\n+        spout.getComponentConfiguration();\n+        spout.declareOutputFields(declarer);\n+        spout.setCredentials(null);\n+        spout.activate();\n+        spout.nextTuple();\n+        spout.ack(null);\n+        spout.fail(null);\n+        spout.deactivate();\n+        CallCountingSpout spout = connector.getProxy();\n+        Assert.assertEquals(spout.getConfigurationCalls(), 1);\n+        Assert.assertEquals(spout.getDeclareCalls(), 0);\n+        Assert.assertEquals(spout.getCredentialCalls(), 1);\n+        Assert.assertEquals(spout.getOpenCalls(), 1);\n+        Assert.assertEquals(spout.getActivateCalls(), 1);\n+        Assert.assertEquals(spout.getNextTupleCalls(), 0);\n+        Assert.assertEquals(spout.getAckCalls(), 1);\n+        Assert.assertEquals(spout.getFailCalls(), 1);\n+        Assert.assertEquals(spout.getDeactivateCalls(), 1);\n+        Assert.assertEquals(emitter.getEmitted().size(), 0);\n+    }\n+}"
  },
  {
    "sha": "babeed112a2061983099fa0fe281a0643d3422dc",
    "filename": "src/test/java/com/yahoo/bullet/storm/DSLSpoutTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/DSLSpoutTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/DSLSpoutTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/DSLSpoutTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -24,7 +24,7 @@\n     @BeforeMethod\n     public void setup() {\n         emitter = new CustomEmitter();\n-        config = new BulletStormConfig(\"src/test/resources/test_dsl_config.yaml\");\n+        config = new BulletStormConfig(\"test_dsl_config.yaml\");\n         dslSpout = ComponentUtils.open(new DSLSpout(config), emitter);\n         dslSpout.activate();\n     }"
  },
  {
    "sha": "456112b5d0e88afdc90feed98a3e5f6b40fb4c06",
    "filename": "src/test/java/com/yahoo/bullet/storm/FilterBoltTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/FilterBoltTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/FilterBoltTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/FilterBoltTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -990,7 +990,7 @@ public void testStatisticsReporting() {\n \n     @Test\n     public void testBatchTuple() {\n-        bolt = ComponentUtils.prepare(new FilterBolt(TopologyConstants.RECORD_COMPONENT, new BulletStormConfig(\"src/test/resources/test_config.yaml\")), collector);\n+        bolt = ComponentUtils.prepare(new FilterBolt(TopologyConstants.RECORD_COMPONENT, new BulletStormConfig(\"test_config.yaml\")), collector);\n         bolt.replayCompleted = true;\n \n         Tuple tuple = makeIDTuple(TupleClassifier.Type.BATCH_TUPLE, \"FilterBolt-18\");\n@@ -1001,7 +1001,7 @@ public void testBatchTuple() {\n \n     @Test\n     public void testBatchInitializeAndRemoveQuery() {\n-        bolt = ComponentUtils.prepare(new FilterBolt(TopologyConstants.RECORD_COMPONENT, new BulletStormConfig(\"src/test/resources/test_config.yaml\")), collector);\n+        bolt = ComponentUtils.prepare(new FilterBolt(TopologyConstants.RECORD_COMPONENT, new BulletStormConfig(\"test_config.yaml\")), collector);\n \n         Assert.assertEquals(bolt.replayedQueriesCount, 0);\n         Assert.assertEquals(bolt.getManager().size(), 0);"
  },
  {
    "sha": "2ac1750be0142c2af1de4f6a921d5e40fb2aa96e",
    "filename": "src/test/java/com/yahoo/bullet/storm/JoinBoltTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/JoinBoltTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/JoinBoltTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/JoinBoltTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -1390,7 +1390,7 @@ public void testQueryGettingDataWhileBeingDelayed() {\n \n     @Test\n     public void testBatchTuple() {\n-        bolt = ComponentUtils.prepare(new JoinBolt(new BulletStormConfig(\"src/test/resources/test_config.yaml\")), collector);\n+        bolt = ComponentUtils.prepare(new JoinBolt(new BulletStormConfig(\"test_config.yaml\")), collector);\n         bolt.replayCompleted = true;\n \n         Tuple tuple = makeIDTuple(TupleClassifier.Type.BATCH_TUPLE, \"JoinBolt-18\");\n@@ -1401,7 +1401,7 @@ public void testBatchTuple() {\n \n     @Test\n     public void testBatchInitializeAndRemoveQuery() {\n-        bolt = ComponentUtils.prepare(new JoinBolt(new BulletStormConfig(\"src/test/resources/test_config.yaml\")), collector);\n+        bolt = ComponentUtils.prepare(new JoinBolt(new BulletStormConfig(\"test_config.yaml\")), collector);\n \n         Assert.assertEquals(bolt.replayedQueriesCount, 0);\n         Assert.assertEquals(bolt.removedIds.size(), 0);"
  },
  {
    "sha": "c1b8a2cca551f2306c7d6bbeb046fe38a68925c7",
    "filename": "src/test/java/com/yahoo/bullet/storm/LoopBoltTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/LoopBoltTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/LoopBoltTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/LoopBoltTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -32,7 +32,7 @@\n \n     @BeforeMethod\n     public void setup() {\n-        config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        config = new BulletStormConfig(\"test_config.yaml\");\n         bolt = new LoopBolt(config);\n         collector = new CustomCollector();\n         ComponentUtils.prepare(bolt, collector);"
  },
  {
    "sha": "e60b23ad8e2f1e6e483adac9563c2fced6405851",
    "filename": "src/test/java/com/yahoo/bullet/storm/QueryBoltTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/QueryBoltTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/QueryBoltTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/QueryBoltTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -229,7 +229,7 @@ public void testNullMetaTupleIgnored() {\n     @Test\n     public void testBatchInitializeQuery() {\n         CustomCollector collector = new CustomCollector();\n-        TestQueryBolt bolt = new TestQueryBolt(new BulletStormConfig(\"src/test/resources/test_config.yaml\"));\n+        TestQueryBolt bolt = new TestQueryBolt(new BulletStormConfig(\"test_config.yaml\"));\n         ComponentUtils.prepare(bolt, collector);\n \n         Assert.assertEquals(bolt.replayedQueriesCount, 0);\n@@ -253,7 +253,7 @@ public void testBatchInitializeQuery() {\n     @Test\n     public void testBatchInitializeQueryWithCompression() {\n         CustomCollector collector = new CustomCollector();\n-        BulletStormConfig config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        BulletStormConfig config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletStormConfig.REPLAY_BATCH_COMPRESS_ENABLE, true);\n         config.validate();\n         TestQueryBolt bolt = new TestQueryBolt(config);\n@@ -283,7 +283,7 @@ public void testBatchInitializeQueryWithCompression() {\n     public void testBatchReplayCompleted() {\n         CustomTopologyContext context = new CustomTopologyContext();\n         CustomCollector collector = new CustomCollector();\n-        BulletStormConfig config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        BulletStormConfig config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletStormConfig.TOPOLOGY_METRICS_BUILT_IN_ENABLE, true);\n         config.validate();\n         TestQueryBolt bolt = new TestQueryBolt(config);\n@@ -302,7 +302,7 @@ public void testBatchReplayCompleted() {\n     public void testBatchNonMatchingTimestamp() {\n         CustomTopologyContext context = new CustomTopologyContext();\n         CustomCollector collector = new CustomCollector();\n-        BulletStormConfig config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        BulletStormConfig config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletStormConfig.TOPOLOGY_METRICS_BUILT_IN_ENABLE, true);\n         config.validate();\n         TestQueryBolt bolt = new TestQueryBolt(config);\n@@ -321,7 +321,7 @@ public void testBatchNonMatchingTimestamp() {\n     @Test\n     public void testBatchNullEndsReplay() {\n         CustomCollector collector = new CustomCollector();\n-        TestQueryBolt bolt = new TestQueryBolt(new BulletStormConfig(\"src/test/resources/test_config.yaml\"));\n+        TestQueryBolt bolt = new TestQueryBolt(new BulletStormConfig(\"test_config.yaml\"));\n         ComponentUtils.prepare(bolt, collector);\n \n         Assert.assertFalse(bolt.replayCompleted);\n@@ -338,7 +338,7 @@ public void testBatchNullEndsReplay() {\n     @Test\n     public void testEmitReplayRequest() {\n         CustomCollector collector = new CustomCollector();\n-        TestQueryBolt bolt = new TestQueryBolt(new BulletStormConfig(\"src/test/resources/test_config.yaml\"));\n+        TestQueryBolt bolt = new TestQueryBolt(new BulletStormConfig(\"test_config.yaml\"));\n \n         Assert.assertEquals(collector.getEmittedCount(), 0);\n "
  },
  {
    "sha": "33964e65427368aed434e8e44d34fbc90f2a35ce",
    "filename": "src/test/java/com/yahoo/bullet/storm/QuerySpoutTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/QuerySpoutTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/QuerySpoutTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/QuerySpoutTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -31,7 +31,7 @@\n     @BeforeMethod\n     public void setup() {\n         emitter = new CustomEmitter();\n-        BulletStormConfig config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        BulletStormConfig config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletStormConfig.TOPOLOGY_METRICS_BUILT_IN_ENABLE, true);\n         config.validate();\n         context = new CustomTopologyContext();\n@@ -42,7 +42,7 @@ public void setup() {\n \n     @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Cannot create PubSub.*\")\n     public void testFailingToCreatePubSub() {\n-        BulletStormConfig config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        BulletStormConfig config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletConfig.PUBSUB_CLASS_NAME, \"fake.class\");\n         QuerySpout spout = new QuerySpout(config);\n         ComponentUtils.open(spout, emitter);"
  },
  {
    "sha": "6cd6905100d48808369f9fe4e95ef1c038fd9255",
    "filename": "src/test/java/com/yahoo/bullet/storm/ReplayBoltTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/ReplayBoltTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/ReplayBoltTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/ReplayBoltTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -67,7 +67,7 @@ public ThrowingStorageManager(BulletConfig config) {\n     public void setup() {\n         collector = new CustomCollector();\n         context = new CustomTopologyContext();\n-        config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletStormConfig.TOPOLOGY_METRICS_BUILT_IN_ENABLE, true);\n         config.set(BulletConfig.STORAGE_CLASS_NAME, \"com.yahoo.bullet.storm.ReplayBoltTest$TestStorageManager\");\n         config.validate();\n@@ -102,15 +102,15 @@ public void testPrepare() {\n \n     @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \"Could not create StorageManager\\\\.\")\n     public void testPrepareCouldNotCreateStorageManager() {\n-        config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletConfig.STORAGE_CLASS_NAME, \"\");\n         config.validate();\n         bolt = ComponentUtils.prepare(new HashMap<>(), new ReplayBolt(config), new CustomTopologyContext(), new CustomCollector());\n     }\n \n     @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \"Failed to get queries from storage\\\\.\")\n     public void testPrepareCouldNotGetStoredQueries() {\n-        config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletConfig.STORAGE_CLASS_NAME, \"com.yahoo.bullet.storm.ReplayBoltTest$ThrowingStorageManager\");\n         config.validate();\n         bolt = ComponentUtils.prepare(new HashMap<>(), new ReplayBolt(config), new CustomTopologyContext(), new CustomCollector());\n@@ -328,7 +328,7 @@ public void testReplayJoinBolt() {\n \n     @Test\n     public void testReplayFilterBoltWithCompression() {\n-        config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletStormConfig.REPLAY_BATCH_COMPRESS_ENABLE, true);\n         config.validate();\n         bolt = ComponentUtils.prepare(new HashMap<>(), new ReplayBolt(config), context, collector);\n@@ -351,7 +351,7 @@ public void testReplayFilterBoltWithCompression() {\n \n     @Test\n     public void testReplayJoinBoltWithCompression() {\n-        config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletStormConfig.REPLAY_BATCH_COMPRESS_ENABLE, true);\n         config.validate();\n         bolt = ComponentUtils.prepare(new HashMap<>(), new ReplayBolt(config), context, collector);"
  },
  {
    "sha": "c81b30bd8002405053a3264309017fe203a2a88e",
    "filename": "src/test/java/com/yahoo/bullet/storm/ResultBoltTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/ResultBoltTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/ResultBoltTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/ResultBoltTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -30,7 +30,7 @@\n \n     @BeforeMethod\n     public void setup() {\n-        BulletStormConfig config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        BulletStormConfig config = new BulletStormConfig(\"test_config.yaml\");\n         bolt = new ResultBolt(config);\n         collector = new CustomCollector();\n         ComponentUtils.prepare(bolt, collector);\n@@ -39,7 +39,7 @@ public void setup() {\n \n     @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Cannot create PubSub.*\")\n     public void testFailingToCreatePubSub() {\n-        BulletStormConfig config = new BulletStormConfig(\"src/test/resources/test_config.yaml\");\n+        BulletStormConfig config = new BulletStormConfig(\"test_config.yaml\");\n         config.set(BulletConfig.PUBSUB_CLASS_NAME, \"fake.class\");\n         ComponentUtils.prepare(new ResultBolt(config), collector);\n     }"
  },
  {
    "sha": "f0bce7abdef4e173ff1dcf882c12bc393e49bb8f",
    "filename": "src/test/java/com/yahoo/bullet/storm/SpoutConnectorTest.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/SpoutConnectorTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/SpoutConnectorTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/SpoutConnectorTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -0,0 +1,122 @@\n+/*\n+ *  Copyright 2021, Yahoo Inc.\n+ *  Licensed under the terms of the Apache License, Version 2.0.\n+ *  See the LICENSE file associated with the project for terms.\n+ */\n+package com.yahoo.bullet.storm;\n+\n+import com.yahoo.bullet.storm.testing.CallCountingCredentialsSpout;\n+import com.yahoo.bullet.storm.testing.CallCountingSpout;\n+import com.yahoo.bullet.storm.testing.CallCountingSpoutConnector;\n+import com.yahoo.bullet.storm.testing.CustomTopologyContext;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.apache.storm.task.TopologyContext;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public class SpoutConnectorTest {\n+    private CallCountingSpoutConnector connector;\n+\n+    @BeforeMethod\n+    public void setup() {\n+        BulletStormConfig config = new BulletStormConfig();\n+        config.set(BulletStormConfig.DSL_SPOUT_CONNECTOR_CLASS_NAME, CallCountingCredentialsSpout.class.getName());\n+        connector = new CallCountingSpoutConnector(config);\n+    }\n+\n+    @Test\n+    public void testCreation() {\n+        Assert.assertNotNull(connector.getProxy());\n+    }\n+\n+    @Test\n+    public void testAsSpout() {\n+        connector.getComponentConfiguration();\n+        connector.declareOutputFields(null);\n+        connector.setCredentials(null);\n+        connector.open(null, null, null);\n+        connector.activate();\n+        connector.nextTuple();\n+        connector.ack(null);\n+        connector.fail(null);\n+        connector.deactivate();\n+        CallCountingSpout spout = connector.getProxy();\n+        Assert.assertEquals(spout.getConfigurationCalls(), 1);\n+        Assert.assertEquals(spout.getDeclareCalls(), 1);\n+        Assert.assertEquals(spout.getCredentialCalls(), 1);\n+        Assert.assertEquals(spout.getOpenCalls(), 1);\n+        Assert.assertEquals(spout.getActivateCalls(), 1);\n+        Assert.assertEquals(spout.getNextTupleCalls(), 1);\n+        Assert.assertEquals(spout.getAckCalls(), 1);\n+        Assert.assertEquals(spout.getFailCalls(), 1);\n+        Assert.assertEquals(spout.getDeactivateCalls(), 1);\n+    }\n+\n+    @Test\n+    public void testAsNoCredentialsSpout() {\n+        BulletStormConfig config = new BulletStormConfig();\n+        config.set(BulletStormConfig.DSL_SPOUT_CONNECTOR_CLASS_NAME, CallCountingSpout.class.getName());\n+        connector = new CallCountingSpoutConnector(config);\n+\n+        connector.getComponentConfiguration();\n+        connector.declareOutputFields(null);\n+        connector.setCredentials(null);\n+        connector.open(null, null, null);\n+        connector.activate();\n+        connector.nextTuple();\n+        connector.ack(null);\n+        connector.fail(null);\n+        connector.deactivate();\n+        CallCountingSpout spout = connector.getProxy();\n+        Assert.assertEquals(spout.getConfigurationCalls(), 1);\n+        Assert.assertEquals(spout.getDeclareCalls(), 1);\n+        Assert.assertEquals(spout.getOpenCalls(), 1);\n+        Assert.assertEquals(spout.getActivateCalls(), 1);\n+        Assert.assertEquals(spout.getCredentialCalls(), 0);\n+        Assert.assertEquals(spout.getNextTupleCalls(), 1);\n+        Assert.assertEquals(spout.getAckCalls(), 1);\n+        Assert.assertEquals(spout.getFailCalls(), 1);\n+        Assert.assertEquals(spout.getDeactivateCalls(), 1);\n+    }\n+\n+    @Test\n+    public void testProxyingToSpout() {\n+        Map<String, Object> config = Collections.emptyMap();\n+        TopologyContext context = new CustomTopologyContext();\n+        SpoutOutputCollector collector = new SpoutOutputCollector(null);\n+\n+        connector.initialize();\n+        connector.close();\n+        CallCountingSpout spout = connector.getProxy();\n+        Assert.assertEquals(spout.getConfigurationCalls(), 0);\n+        Assert.assertEquals(spout.getDeclareCalls(), 0);\n+        Assert.assertEquals(spout.getCredentialCalls(), 0);\n+        Assert.assertEquals(spout.getOpenCalls(), 1);\n+        Assert.assertEquals(spout.getActivateCalls(), 1);\n+        Assert.assertEquals(spout.getNextTupleCalls(), 0);\n+        Assert.assertEquals(spout.getAckCalls(), 0);\n+        Assert.assertEquals(spout.getFailCalls(), 0);\n+        Assert.assertEquals(spout.getDeactivateCalls(), 1);\n+\n+        connector.open(config, context, collector);\n+        Assert.assertEquals(spout.getOpenCalls(), 2);\n+        Assert.assertEquals(spout.getActivateCalls(), 1);\n+        Assert.assertSame(connector.getOpenMap(), config);\n+        Assert.assertSame(connector.getOpenContext(), context);\n+        Assert.assertSame(connector.getOpenCollector(), collector);\n+\n+        config = Collections.emptyMap();\n+        context = new CustomTopologyContext();\n+        collector = new SpoutOutputCollector(null);\n+        connector.setStormConfiguration(config);\n+        connector.setContext(context);\n+        connector.setOutputCollector(collector);\n+        Assert.assertSame(connector.getOpenMap(), config);\n+        Assert.assertSame(connector.getOpenContext(), context);\n+        Assert.assertSame(connector.getOpenCollector(), collector);\n+    }\n+}"
  },
  {
    "sha": "2e132adcdcb1f0f31e6b94176571d88e599e6f73",
    "filename": "src/test/java/com/yahoo/bullet/storm/StormUtilsTest.java",
    "status": "modified",
    "additions": 250,
    "deletions": 2,
    "changes": 252,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/StormUtilsTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/StormUtilsTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/StormUtilsTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -5,8 +5,11 @@\n  */\n package com.yahoo.bullet.storm;\n \n+import com.yahoo.bullet.dsl.BulletDSLConfig;\n import com.yahoo.bullet.storm.grouping.IDGrouping;\n import com.yahoo.bullet.storm.grouping.TaskIndexCaptureGrouping;\n+import com.yahoo.bullet.storm.testing.CallCountingCredentialsSpout;\n+import com.yahoo.bullet.storm.testing.CallCountingSpoutConnector;\n import com.yahoo.bullet.storm.testing.CustomBoltDeclarer;\n import com.yahoo.bullet.storm.testing.CustomIMetricsConsumer;\n import com.yahoo.bullet.storm.testing.CustomIRichSpout;\n@@ -362,7 +365,7 @@ public void testHookingWithReplay() {\n \n     @Test\n     public void testHookingInDSLSpout() {\n-        config = new BulletStormConfig(\"src/test/resources/test_dsl_config.yaml\");\n+        config = new BulletStormConfig(\"test_dsl_config.yaml\");\n         config.set(BulletStormConfig.DSL_SPOUT_ENABLE, true);\n \n         Assert.assertFalse(builder.isTopologyCreated());\n@@ -473,7 +476,7 @@ public void testHookingInDSLSpout() {\n \n     @Test\n     public void testHookingInDSLSpoutAndBolt() {\n-        config = new BulletStormConfig(\"src/test/resources/test_dsl_config.yaml\");\n+        config = new BulletStormConfig(\"test_dsl_config.yaml\");\n         config.set(BulletStormConfig.DSL_SPOUT_ENABLE, true);\n         config.set(BulletStormConfig.DSL_BOLT_ENABLE, true);\n \n@@ -598,6 +601,251 @@ public void testHookingInDSLSpoutAndBolt() {\n         Assert.assertNull(replayBolt);\n     }\n \n+    @Test\n+    public void testHookingInDSLConnectorSpout() {\n+        config = new BulletStormConfig(\"test_dsl_config.yaml\");\n+        config.set(BulletStormConfig.DSL_SPOUT_ENABLE, true);\n+        config.set(BulletStormConfig.DSL_SPOUT_CONNECTOR_SPOUT_ENABLE, true);\n+        config.set(BulletStormConfig.DSL_BOLT_ENABLE, false);\n+        config.set(BulletDSLConfig.CONNECTOR_CLASS_NAME, CallCountingSpoutConnector.class.getName());\n+        config.set(BulletStormConfig.DSL_SPOUT_CONNECTOR_CLASS_NAME, CallCountingCredentialsSpout.class.getName());\n+\n+        Assert.assertFalse(builder.isTopologyCreated());\n+        submitWithConfig(config);\n+\n+        Assert.assertTrue(builder.isTopologyCreated());\n+\n+        Assert.assertEquals(builder.getCreatedSpouts().size(), 3);\n+        Assert.assertEquals(builder.getCreatedBolts().size(), 4);\n+\n+        CustomSpoutDeclarer source = getSpout(RECORD_COMPONENT);\n+        Assert.assertNotNull(source);\n+        Assert.assertEquals(source.getSpout().getClass(), DSLConnectorSpout.class);\n+        Assert.assertEquals(source.getParallelism(), BulletStormConfig.DEFAULT_DSL_SPOUT_PARALLELISM);\n+        Assert.assertEquals(source.getCpuLoad(), BulletStormConfig.DEFAULT_DSL_SPOUT_CPU_LOAD);\n+        Assert.assertEquals(source.getOnHeap(), BulletStormConfig.DEFAULT_DSL_SPOUT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(source.getOffHeap(), BulletStormConfig.DEFAULT_DSL_SPOUT_MEMORY_OFF_HEAP_LOAD);\n+\n+        CustomSpoutDeclarer tickSpout = getSpout(TICK_COMPONENT);\n+        Assert.assertNotNull(tickSpout);\n+        Assert.assertEquals(tickSpout.getSpout().getClass(), TickSpout.class);\n+        Assert.assertEquals(tickSpout.getParallelism(), BulletStormConfig.TICK_SPOUT_PARALLELISM);\n+        Assert.assertEquals(tickSpout.getCpuLoad(), BulletStormConfig.DEFAULT_TICK_SPOUT_CPU_LOAD);\n+        Assert.assertEquals(tickSpout.getOnHeap(), BulletStormConfig.DEFAULT_TICK_SPOUT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(tickSpout.getOffHeap(), BulletStormConfig.DEFAULT_TICK_SPOUT_MEMORY_OFF_HEAP_LOAD);\n+\n+        CustomSpoutDeclarer querySpout = getSpout(QUERY_COMPONENT);\n+        Assert.assertNotNull(querySpout);\n+        Assert.assertEquals(querySpout.getSpout().getClass(), QuerySpout.class);\n+        Assert.assertEquals(querySpout.getParallelism(), BulletStormConfig.DEFAULT_QUERY_SPOUT_PARALLELISM);\n+        Assert.assertEquals(querySpout.getCpuLoad(), BulletStormConfig.DEFAULT_QUERY_SPOUT_CPU_LOAD);\n+        Assert.assertEquals(querySpout.getOnHeap(), BulletStormConfig.DEFAULT_QUERY_SPOUT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(querySpout.getOffHeap(), BulletStormConfig.DEFAULT_QUERY_SPOUT_MEMORY_OFF_HEAP_LOAD);\n+\n+        CustomBoltDeclarer filterBolt = getBolt(FILTER_COMPONENT);\n+        Assert.assertNotNull(filterBolt);\n+        Assert.assertEquals(filterBolt.getBolt().getClass(), FilterBolt.class);\n+        Assert.assertEquals(filterBolt.getParallelism(), BulletStormConfig.DEFAULT_FILTER_BOLT_PARALLELISM);\n+        Assert.assertEquals(filterBolt.getCpuLoad(), BulletStormConfig.DEFAULT_FILTER_BOLT_CPU_LOAD);\n+        Assert.assertEquals(filterBolt.getOnHeap(), BulletStormConfig.DEFAULT_FILTER_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(filterBolt.getOffHeap(), BulletStormConfig.DEFAULT_FILTER_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> filterAllGroupings = filterBolt.getAllGroupings();\n+        Assert.assertEquals(filterAllGroupings.size(), 3);\n+        assertContains(filterAllGroupings, TICK_COMPONENT, TICK_STREAM);\n+        assertContains(filterAllGroupings, QUERY_COMPONENT, QUERY_STREAM);\n+        assertContains(filterAllGroupings, QUERY_COMPONENT, METADATA_STREAM);\n+        List<Pair<String, String>> filterShuffleGroupings = filterBolt.getShuffleGroupings();\n+        Assert.assertEquals(filterShuffleGroupings.size(), 1);\n+        assertContains(filterShuffleGroupings, RECORD_COMPONENT, Utils.DEFAULT_STREAM_ID);\n+        Assert.assertTrue(filterBolt.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(filterBolt.getFieldsGroupings().isEmpty());\n+        Assert.assertTrue(filterBolt.getCustomGroupings().isEmpty());\n+\n+        CustomBoltDeclarer joinBolt = getBolt(JOIN_COMPONENT);\n+        Assert.assertNotNull(joinBolt);\n+        Assert.assertEquals(joinBolt.getBolt().getClass(), JoinBolt.class);\n+        Assert.assertEquals(joinBolt.getParallelism(), BulletStormConfig.DEFAULT_JOIN_BOLT_PARALLELISM);\n+        Assert.assertEquals(joinBolt.getCpuLoad(), BulletStormConfig.DEFAULT_JOIN_BOLT_CPU_LOAD);\n+        Assert.assertEquals(joinBolt.getOnHeap(), BulletStormConfig.DEFAULT_JOIN_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(joinBolt.getOffHeap(), BulletStormConfig.DEFAULT_JOIN_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> joinAllGroupings = joinBolt.getAllGroupings();\n+        Assert.assertEquals(joinAllGroupings.size(), 1);\n+        assertContains(joinAllGroupings, TICK_COMPONENT, TICK_STREAM);\n+        Map<Pair<String, String>, List<Fields>> joinFieldGroupings = joinBolt.getFieldsGroupings();\n+        Assert.assertEquals(joinFieldGroupings.size(), 4);\n+        assertContains(joinFieldGroupings, QUERY_COMPONENT, QUERY_STREAM, new Fields(ID_FIELD));\n+        assertContains(joinFieldGroupings, QUERY_COMPONENT, METADATA_STREAM, new Fields(ID_FIELD));\n+        assertContains(joinFieldGroupings, FILTER_COMPONENT, DATA_STREAM, new Fields(ID_FIELD));\n+        assertContains(joinFieldGroupings, FILTER_COMPONENT, ERROR_STREAM, new Fields(ID_FIELD));\n+        Assert.assertTrue(joinBolt.getShuffleGroupings().isEmpty());\n+        Assert.assertTrue(joinBolt.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(joinBolt.getCustomGroupings().isEmpty());\n+\n+        CustomBoltDeclarer resultBolt = getBolt(RESULT_COMPONENT);\n+        Assert.assertNotNull(resultBolt);\n+        Assert.assertEquals(resultBolt.getBolt().getClass(), ResultBolt.class);\n+        Assert.assertEquals(resultBolt.getParallelism(), BulletStormConfig.DEFAULT_RESULT_BOLT_PARALLELISM);\n+        Assert.assertEquals(resultBolt.getCpuLoad(), BulletStormConfig.DEFAULT_RESULT_BOLT_CPU_LOAD);\n+        Assert.assertEquals(resultBolt.getOnHeap(), BulletStormConfig.DEFAULT_RESULT_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(resultBolt.getOffHeap(), BulletStormConfig.DEFAULT_RESULT_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> resultShuffleGroupings = resultBolt.getShuffleGroupings();\n+        Assert.assertEquals(resultShuffleGroupings.size(), 1);\n+        assertContains(resultShuffleGroupings, JOIN_COMPONENT, RESULT_STREAM);\n+        Assert.assertTrue(resultBolt.getAllGroupings().isEmpty());\n+        Assert.assertTrue(resultBolt.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(resultBolt.getFieldsGroupings().isEmpty());\n+        Assert.assertTrue(resultBolt.getCustomGroupings().isEmpty());\n+\n+        CustomBoltDeclarer loopBolt = getBolt(LOOP_COMPONENT);\n+        Assert.assertNotNull(loopBolt);\n+        Assert.assertEquals(loopBolt.getBolt().getClass(), LoopBolt.class);\n+        Assert.assertEquals(loopBolt.getParallelism(), BulletStormConfig.DEFAULT_LOOP_BOLT_PARALLELISM);\n+        Assert.assertEquals(loopBolt.getCpuLoad(), BulletStormConfig.DEFAULT_LOOP_BOLT_CPU_LOAD);\n+        Assert.assertEquals(loopBolt.getOnHeap(), BulletStormConfig.DEFAULT_LOOP_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(loopBolt.getOffHeap(), BulletStormConfig.DEFAULT_LOOP_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> loopShuffleGroupings = loopBolt.getShuffleGroupings();\n+        Assert.assertEquals(loopShuffleGroupings.size(), 2);\n+        assertContains(loopShuffleGroupings, FILTER_COMPONENT, FEEDBACK_STREAM);\n+        assertContains(loopShuffleGroupings, JOIN_COMPONENT, FEEDBACK_STREAM);\n+        Assert.assertTrue(loopBolt.getAllGroupings().isEmpty());\n+        Assert.assertTrue(loopBolt.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(loopBolt.getFieldsGroupings().isEmpty());\n+        Assert.assertTrue(loopBolt.getCustomGroupings().isEmpty());\n+\n+        CustomBoltDeclarer replayBolt = getBolt(REPLAY_COMPONENT);\n+        Assert.assertNull(replayBolt);\n+    }\n+\n+    @Test\n+    public void testHookingInDSLConnectorSpoutAndBolt() {\n+        config = new BulletStormConfig(\"test_dsl_config.yaml\");\n+        config.set(BulletStormConfig.DSL_SPOUT_ENABLE, true);\n+        config.set(BulletStormConfig.DSL_SPOUT_CONNECTOR_SPOUT_ENABLE, true);\n+        config.set(BulletStormConfig.DSL_BOLT_ENABLE, true);\n+        config.set(BulletDSLConfig.CONNECTOR_CLASS_NAME, CallCountingSpoutConnector.class.getName());\n+        config.set(BulletStormConfig.DSL_SPOUT_CONNECTOR_CLASS_NAME, CallCountingCredentialsSpout.class.getName());\n+\n+        Assert.assertFalse(builder.isTopologyCreated());\n+        submitWithConfig(config);\n+\n+        Assert.assertTrue(builder.isTopologyCreated());\n+\n+        Assert.assertEquals(builder.getCreatedSpouts().size(), 3);\n+        Assert.assertEquals(builder.getCreatedBolts().size(), 5);\n+\n+        CustomSpoutDeclarer data = getSpout(DATA_COMPONENT);\n+        Assert.assertNotNull(data);\n+        Assert.assertEquals(data.getSpout().getClass(), DSLConnectorSpout.class);\n+        Assert.assertEquals(data.getParallelism(), BulletStormConfig.DEFAULT_DSL_SPOUT_PARALLELISM);\n+        Assert.assertEquals(data.getCpuLoad(), BulletStormConfig.DEFAULT_DSL_SPOUT_CPU_LOAD);\n+        Assert.assertEquals(data.getOnHeap(), BulletStormConfig.DEFAULT_DSL_SPOUT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(data.getOffHeap(), BulletStormConfig.DEFAULT_DSL_SPOUT_MEMORY_OFF_HEAP_LOAD);\n+\n+        CustomBoltDeclarer source = getBolt(RECORD_COMPONENT);\n+        Assert.assertNotNull(source);\n+        Assert.assertEquals(source.getBolt().getClass(), DSLBolt.class);\n+        Assert.assertEquals(source.getParallelism(), BulletStormConfig.DEFAULT_DSL_BOLT_PARALLELISM);\n+        Assert.assertEquals(source.getCpuLoad(), BulletStormConfig.DEFAULT_DSL_BOLT_CPU_LOAD);\n+        Assert.assertEquals(source.getOnHeap(), BulletStormConfig.DEFAULT_DSL_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(source.getOffHeap(), BulletStormConfig.DEFAULT_DSL_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> sourceShuffleGroupings = source.getShuffleGroupings();\n+        Assert.assertEquals(sourceShuffleGroupings.size(), 1);\n+        assertContains(sourceShuffleGroupings, DATA_COMPONENT, Utils.DEFAULT_STREAM_ID);\n+        Assert.assertTrue(source.getAllGroupings().isEmpty());\n+        Assert.assertTrue(source.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(source.getFieldsGroupings().isEmpty());\n+        Assert.assertTrue(source.getCustomGroupings().isEmpty());\n+\n+        CustomSpoutDeclarer tickSpout = getSpout(TICK_COMPONENT);\n+        Assert.assertNotNull(tickSpout);\n+        Assert.assertEquals(tickSpout.getSpout().getClass(), TickSpout.class);\n+        Assert.assertEquals(tickSpout.getParallelism(), BulletStormConfig.TICK_SPOUT_PARALLELISM);\n+        Assert.assertEquals(tickSpout.getCpuLoad(), BulletStormConfig.DEFAULT_TICK_SPOUT_CPU_LOAD);\n+        Assert.assertEquals(tickSpout.getOnHeap(), BulletStormConfig.DEFAULT_TICK_SPOUT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(tickSpout.getOffHeap(), BulletStormConfig.DEFAULT_TICK_SPOUT_MEMORY_OFF_HEAP_LOAD);\n+\n+        CustomSpoutDeclarer querySpout = getSpout(QUERY_COMPONENT);\n+        Assert.assertNotNull(querySpout);\n+        Assert.assertEquals(querySpout.getSpout().getClass(), QuerySpout.class);\n+        Assert.assertEquals(querySpout.getParallelism(), BulletStormConfig.DEFAULT_QUERY_SPOUT_PARALLELISM);\n+        Assert.assertEquals(querySpout.getCpuLoad(), BulletStormConfig.DEFAULT_QUERY_SPOUT_CPU_LOAD);\n+        Assert.assertEquals(querySpout.getOnHeap(), BulletStormConfig.DEFAULT_QUERY_SPOUT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(querySpout.getOffHeap(), BulletStormConfig.DEFAULT_QUERY_SPOUT_MEMORY_OFF_HEAP_LOAD);\n+\n+        CustomBoltDeclarer filterBolt = getBolt(FILTER_COMPONENT);\n+        Assert.assertNotNull(filterBolt);\n+        Assert.assertEquals(filterBolt.getBolt().getClass(), FilterBolt.class);\n+        Assert.assertEquals(filterBolt.getParallelism(), BulletStormConfig.DEFAULT_FILTER_BOLT_PARALLELISM);\n+        Assert.assertEquals(filterBolt.getCpuLoad(), BulletStormConfig.DEFAULT_FILTER_BOLT_CPU_LOAD);\n+        Assert.assertEquals(filterBolt.getOnHeap(), BulletStormConfig.DEFAULT_FILTER_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(filterBolt.getOffHeap(), BulletStormConfig.DEFAULT_FILTER_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> filterAllGroupings = filterBolt.getAllGroupings();\n+        Assert.assertEquals(filterAllGroupings.size(), 3);\n+        assertContains(filterAllGroupings, TICK_COMPONENT, TICK_STREAM);\n+        assertContains(filterAllGroupings, QUERY_COMPONENT, QUERY_STREAM);\n+        assertContains(filterAllGroupings, QUERY_COMPONENT, METADATA_STREAM);\n+        List<Pair<String, String>> filterShuffleGroupings = filterBolt.getShuffleGroupings();\n+        Assert.assertEquals(filterShuffleGroupings.size(), 1);\n+        assertContains(filterShuffleGroupings, RECORD_COMPONENT, Utils.DEFAULT_STREAM_ID);\n+        Assert.assertTrue(filterBolt.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(filterBolt.getFieldsGroupings().isEmpty());\n+        Assert.assertTrue(filterBolt.getCustomGroupings().isEmpty());\n+\n+        CustomBoltDeclarer joinBolt = getBolt(JOIN_COMPONENT);\n+        Assert.assertNotNull(joinBolt);\n+        Assert.assertEquals(joinBolt.getBolt().getClass(), JoinBolt.class);\n+        Assert.assertEquals(joinBolt.getParallelism(), BulletStormConfig.DEFAULT_JOIN_BOLT_PARALLELISM);\n+        Assert.assertEquals(joinBolt.getCpuLoad(), BulletStormConfig.DEFAULT_JOIN_BOLT_CPU_LOAD);\n+        Assert.assertEquals(joinBolt.getOnHeap(), BulletStormConfig.DEFAULT_JOIN_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(joinBolt.getOffHeap(), BulletStormConfig.DEFAULT_JOIN_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> joinAllGroupings = joinBolt.getAllGroupings();\n+        Assert.assertEquals(joinAllGroupings.size(), 1);\n+        assertContains(joinAllGroupings, TICK_COMPONENT, TICK_STREAM);\n+        Map<Pair<String, String>, List<Fields>> joinFieldGroupings = joinBolt.getFieldsGroupings();\n+        Assert.assertEquals(joinFieldGroupings.size(), 4);\n+        assertContains(joinFieldGroupings, QUERY_COMPONENT, QUERY_STREAM, new Fields(ID_FIELD));\n+        assertContains(joinFieldGroupings, QUERY_COMPONENT, METADATA_STREAM, new Fields(ID_FIELD));\n+        assertContains(joinFieldGroupings, FILTER_COMPONENT, DATA_STREAM, new Fields(ID_FIELD));\n+        assertContains(joinFieldGroupings, FILTER_COMPONENT, ERROR_STREAM, new Fields(ID_FIELD));\n+        Assert.assertTrue(joinBolt.getShuffleGroupings().isEmpty());\n+        Assert.assertTrue(joinBolt.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(joinBolt.getCustomGroupings().isEmpty());\n+\n+        CustomBoltDeclarer resultBolt = getBolt(RESULT_COMPONENT);\n+        Assert.assertNotNull(resultBolt);\n+        Assert.assertEquals(resultBolt.getBolt().getClass(), ResultBolt.class);\n+        Assert.assertEquals(resultBolt.getParallelism(), BulletStormConfig.DEFAULT_RESULT_BOLT_PARALLELISM);\n+        Assert.assertEquals(resultBolt.getCpuLoad(), BulletStormConfig.DEFAULT_RESULT_BOLT_CPU_LOAD);\n+        Assert.assertEquals(resultBolt.getOnHeap(), BulletStormConfig.DEFAULT_RESULT_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(resultBolt.getOffHeap(), BulletStormConfig.DEFAULT_RESULT_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> resultShuffleGroupings = resultBolt.getShuffleGroupings();\n+        Assert.assertEquals(resultShuffleGroupings.size(), 1);\n+        assertContains(resultShuffleGroupings, JOIN_COMPONENT, RESULT_STREAM);\n+        Assert.assertTrue(resultBolt.getAllGroupings().isEmpty());\n+        Assert.assertTrue(resultBolt.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(resultBolt.getFieldsGroupings().isEmpty());\n+        Assert.assertTrue(resultBolt.getCustomGroupings().isEmpty());\n+\n+        CustomBoltDeclarer loopBolt = getBolt(LOOP_COMPONENT);\n+        Assert.assertNotNull(loopBolt);\n+        Assert.assertEquals(loopBolt.getBolt().getClass(), LoopBolt.class);\n+        Assert.assertEquals(loopBolt.getParallelism(), BulletStormConfig.DEFAULT_LOOP_BOLT_PARALLELISM);\n+        Assert.assertEquals(loopBolt.getCpuLoad(), BulletStormConfig.DEFAULT_LOOP_BOLT_CPU_LOAD);\n+        Assert.assertEquals(loopBolt.getOnHeap(), BulletStormConfig.DEFAULT_LOOP_BOLT_MEMORY_ON_HEAP_LOAD);\n+        Assert.assertEquals(loopBolt.getOffHeap(), BulletStormConfig.DEFAULT_LOOP_BOLT_MEMORY_OFF_HEAP_LOAD);\n+        List<Pair<String, String>> loopShuffleGroupings = loopBolt.getShuffleGroupings();\n+        Assert.assertEquals(loopShuffleGroupings.size(), 2);\n+        assertContains(loopShuffleGroupings, FILTER_COMPONENT, FEEDBACK_STREAM);\n+        assertContains(loopShuffleGroupings, JOIN_COMPONENT, FEEDBACK_STREAM);\n+        Assert.assertTrue(loopBolt.getAllGroupings().isEmpty());\n+        Assert.assertTrue(loopBolt.getDirectGroupings().isEmpty());\n+        Assert.assertTrue(loopBolt.getFieldsGroupings().isEmpty());\n+        Assert.assertTrue(loopBolt.getCustomGroupings().isEmpty());\n+\n+        CustomBoltDeclarer replayBolt = getBolt(REPLAY_COMPONENT);\n+        Assert.assertNull(replayBolt);\n+    }\n+\n     @Test\n     public void testHookingInBulletSpout() {\n         config.set(BulletStormConfig.BULLET_SPOUT_CLASS_NAME, CustomIRichSpout.class.getName());"
  },
  {
    "sha": "1d1bb689e39e90ce07c2d2a3139c2cb0dc123f78",
    "filename": "src/test/java/com/yahoo/bullet/storm/drpc/DRPCConfigTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/drpc/DRPCConfigTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/drpc/DRPCConfigTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/drpc/DRPCConfigTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -34,7 +34,7 @@ public void testDefaultInitialization() {\n \n     @Test\n     public void testCustomConfig() {\n-        DRPCConfig config = new DRPCConfig(\"src/test/resources/test_drpc_config.yaml\");\n+        DRPCConfig config = new DRPCConfig(\"test_drpc_config.yaml\");\n         Assert.assertEquals(config.get(\"fake.setting\"), \"foo\");\n         Assert.assertEquals(config.get(DRPCConfig.DRPC_HTTP_CONNECT_RETRY_LIMIT), 1);\n "
  },
  {
    "sha": "15933d322a43c99939b381b8a7559a3f7783fbcc",
    "filename": "src/test/java/com/yahoo/bullet/storm/drpc/DRPCQueryResultPubscriberTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/drpc/DRPCQueryResultPubscriberTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/drpc/DRPCQueryResultPubscriberTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/drpc/DRPCQueryResultPubscriberTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -93,7 +93,7 @@ private PubSubMessage fetch() {\n \n     @BeforeMethod\n     public void setup() {\n-        BulletConfig config = new DRPCConfig(\"src/test/resources/test_drpc_config.yaml\");\n+        BulletConfig config = new DRPCConfig(\"test_drpc_config.yaml\");\n         config.set(DRPCConfig.DRPC_SERVERS, Collections.singletonList(\"foo.bar.bullet.drpc.com\"));\n \n         pubscriber = new DRPCQueryResultPubscriber(config);"
  },
  {
    "sha": "23196853900b2a05cbeef05c8d03b818847959a7",
    "filename": "src/test/java/com/yahoo/bullet/storm/drpc/DRPCResultPublisherTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/drpc/DRPCResultPublisherTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/drpc/DRPCResultPublisherTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/drpc/DRPCResultPublisherTest.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -26,9 +26,9 @@\n \n     @BeforeMethod\n     public void setup() {\n-        DRPCConfig config = new DRPCConfig(\"src/test/resources/test_drpc_config.yaml\");\n+        DRPCConfig config = new DRPCConfig(\"test_drpc_config.yaml\");\n \n-        Map stormConfig = new Config(\"src/test/resources/test_storm_config.yaml\").getAll(Optional.empty());\n+        Map stormConfig = new Config(\"test_storm_config.yaml\").getAll(Optional.empty());\n         config.set(DRPCConfig.STORM_CONFIG, stormConfig);\n \n         publisher = new DRPCResultPublisher(config);"
  },
  {
    "sha": "218d6859b7991c4bef29886245733ecb97910492",
    "filename": "src/test/java/com/yahoo/bullet/storm/testing/CallCountingCredentialsSpout.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/testing/CallCountingCredentialsSpout.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/testing/CallCountingCredentialsSpout.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/testing/CallCountingCredentialsSpout.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -0,0 +1,25 @@\n+/*\n+ *  Copyright 2021, Yahoo Inc.\n+ *  Licensed under the terms of the Apache License, Version 2.0.\n+ *  See the LICENSE file associated with the project for terms.\n+ */\n+package com.yahoo.bullet.storm.testing;\n+\n+import com.yahoo.bullet.common.BulletConfig;\n+import org.apache.storm.ICredentialsListener;\n+\n+import java.util.Map;\n+\n+public class CallCountingCredentialsSpout extends CallCountingSpout implements ICredentialsListener {\n+    private static final long serialVersionUID = 6959020155541556851L;\n+\n+    public CallCountingCredentialsSpout(BulletConfig config) {\n+        super(config);\n+    }\n+\n+    @Override\n+    public void setCredentials(Map<String, String> map) {\n+        // Explicitly adding this override to show why we have this spout - to call the non-interface parent method\n+        super.setCredentials(map);\n+    }\n+}"
  },
  {
    "sha": "da765b0650478aa05b691e5bb4b72f73232c53c9",
    "filename": "src/test/java/com/yahoo/bullet/storm/testing/CallCountingSpout.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/testing/CallCountingSpout.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/testing/CallCountingSpout.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/testing/CallCountingSpout.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -0,0 +1,84 @@\n+/*\n+ *  Copyright 2021, Yahoo Inc.\n+ *  Licensed under the terms of the Apache License, Version 2.0.\n+ *  See the LICENSE file associated with the project for terms.\n+ */\n+package com.yahoo.bullet.storm.testing;\n+\n+import com.yahoo.bullet.common.BulletConfig;\n+import lombok.Getter;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.apache.storm.task.TopologyContext;\n+import org.apache.storm.topology.IRichSpout;\n+import org.apache.storm.topology.OutputFieldsDeclarer;\n+\n+import java.util.Map;\n+\n+@Getter\n+public class CallCountingSpout implements IRichSpout {\n+    private static final long serialVersionUID = 4354648865963509383L;\n+\n+    private int credentialCalls = 0;\n+    private int openCalls = 0;\n+    private int closeCalls = 0;\n+    private int activateCalls = 0;\n+    private int deactivateCalls = 0;\n+    private int nextTupleCalls = 0;\n+    private int ackCalls = 0;\n+    private int failCalls = 0;\n+    private int declareCalls = 0;\n+    private int configurationCalls = 0;\n+\n+    public CallCountingSpout (BulletConfig config) {\n+    }\n+\n+    public void setCredentials(Map<String, String> map) {\n+        credentialCalls++;\n+    }\n+\n+    @Override\n+    public void open(Map<String, Object> map, TopologyContext topologyContext, SpoutOutputCollector spoutOutputCollector) {\n+        openCalls++;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closeCalls++;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        activateCalls++;\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        deactivateCalls++;\n+    }\n+\n+    @Override\n+    public void nextTuple() {\n+        nextTupleCalls++;\n+    }\n+\n+    @Override\n+    public void ack(Object o) {\n+        ackCalls++;\n+    }\n+\n+    @Override\n+    public void fail(Object o) {\n+        failCalls++;\n+    }\n+\n+    @Override\n+    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\n+        declareCalls++;\n+    }\n+\n+    @Override\n+    public Map<String, Object> getComponentConfiguration() {\n+        configurationCalls++;\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "0e027ea2d7045524cff4dcdd141ff5ab9f2a2142",
    "filename": "src/test/java/com/yahoo/bullet/storm/testing/CallCountingSpoutConnector.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/bullet-db/bullet-storm/blob/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/testing/CallCountingSpoutConnector.java",
    "raw_url": "https://github.com/bullet-db/bullet-storm/raw/8967500c7b24c62b449aebdccc63788de1e2a589/src/test/java/com/yahoo/bullet/storm/testing/CallCountingSpoutConnector.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-storm/contents/src/test/java/com/yahoo/bullet/storm/testing/CallCountingSpoutConnector.java?ref=8967500c7b24c62b449aebdccc63788de1e2a589",
    "patch": "@@ -0,0 +1,44 @@\n+/*\n+ *  Copyright 2021, Yahoo Inc.\n+ *  Licensed under the terms of the Apache License, Version 2.0.\n+ *  See the LICENSE file associated with the project for terms.\n+ */\n+package com.yahoo.bullet.storm.testing;\n+\n+import com.yahoo.bullet.common.BulletConfig;\n+import com.yahoo.bullet.storm.SpoutConnector;\n+import org.apache.storm.spout.SpoutOutputCollector;\n+import org.apache.storm.task.TopologyContext;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class CallCountingSpoutConnector extends SpoutConnector<CallCountingSpout> {\n+    private static final long serialVersionUID = 5538368781947223090L;\n+\n+    public CallCountingSpoutConnector(BulletConfig bulletConfig) {\n+        super(bulletConfig);\n+    }\n+\n+    @Override\n+    public List<Object> read() {\n+        return Collections.emptyList();\n+    }\n+\n+    public CallCountingSpout getProxy() {\n+        return this.spout;\n+    }\n+\n+    public Map<String, Object> getOpenMap() {\n+        return this.stormConfiguration;\n+    }\n+\n+    public TopologyContext getOpenContext() {\n+        return this.context;\n+    }\n+\n+    public SpoutOutputCollector getOpenCollector() {\n+        return this.outputCollector;\n+    }\n+}"
  }
]
