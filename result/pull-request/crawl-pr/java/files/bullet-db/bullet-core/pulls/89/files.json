[
  {
    "sha": "ade727a630b84e0229aab403d4b0e1f728414ecd",
    "filename": "src/main/java/com/yahoo/bullet/query/Projection.java",
    "status": "modified",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/query/Projection.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/query/Projection.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/query/Projection.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -6,16 +6,28 @@\n package com.yahoo.bullet.query;\n \n import com.yahoo.bullet.common.Utilities;\n+import com.yahoo.bullet.query.expressions.Expression;\n import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n \n import java.io.Serializable;\n import java.util.List;\n+import java.util.Objects;\n \n @Slf4j @Getter\n public class Projection implements Serializable {\n     private static final long serialVersionUID = -9194169391843941958L;\n \n+    @Getter\n+    @RequiredArgsConstructor\n+    public static class Explode {\n+        private final Expression field;\n+        private final String keyAlias;\n+        private final String valueAlias;\n+        private final boolean outerLateralView;\n+    }\n+\n     /**\n      * The type of the Projection decides how its fields are projected.\n      */\n@@ -26,13 +38,15 @@\n     }\n \n     private final List<Field> fields;\n+    private final Explode explode;\n     private final Type type;\n \n     /**\n      * Default constructor that creates a PASS_THROUGH projection.\n      */\n     public Projection() {\n         fields = null;\n+        explode = null;\n         type = Type.PASS_THROUGH;\n     }\n \n@@ -44,6 +58,20 @@ public Projection() {\n      */\n     public Projection(List<Field> fields, boolean copy) {\n         this.fields = Utilities.requireNonNull(fields);\n+        this.explode = null;\n+        this.type = copy ? Type.COPY : Type.NO_COPY;\n+    }\n+\n+    /**\n+     * Constructor that creates a COPY or NO_COPY projection with an exploded field.\n+     *\n+     * @param fields\n+     * @param explode\n+     * @param copy\n+     */\n+    public Projection(List<Field> fields, Explode explode, boolean copy) {\n+        this.fields = Utilities.requireNonNull(fields);\n+        this.explode = Objects.requireNonNull(explode);\n         this.type = copy ? Type.COPY : Type.NO_COPY;\n     }\n "
  },
  {
    "sha": "369915f63eb078744523b4d6fc54dc4425b6f998",
    "filename": "src/main/java/com/yahoo/bullet/query/expressions/FieldExpression.java",
    "status": "modified",
    "additions": 158,
    "deletions": 4,
    "changes": 162,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/query/expressions/FieldExpression.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/query/expressions/FieldExpression.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/query/expressions/FieldExpression.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -24,6 +24,8 @@\n     private Integer index;\n     private String key;\n     private String subKey;\n+    private Expression variableKey;\n+    private Expression variableSubKey;\n \n     /**\n      * Constructor that creates a field expression.\n@@ -56,6 +58,17 @@ public FieldExpression(String field, String key) {\n         this.key = Objects.requireNonNull(key);\n     }\n \n+    /**\n+     * Constructor that creates a field expression with a variable list index or map key.\n+     *\n+     * @param field The non-null field to get.\n+     * @param variableKey The non-null variable key to get from the field.\n+     */\n+    public FieldExpression(String field, Expression variableKey) {\n+        this.field = Objects.requireNonNull(field);\n+        this.variableKey = Objects.requireNonNull(variableKey);\n+    }\n+\n     /**\n      * Constructor that creates a field expression with a list index and a map subkey.\n      *\n@@ -70,7 +83,7 @@ public FieldExpression(String field, Integer index, String subKey) {\n     }\n \n     /**\n-     * Constructor that creates a field expression with map key and a map subkey.\n+     * Constructor that creates a field expression with a map key and a map subkey.\n      *\n      * @param field The non-null field to get.\n      * @param key The non-null key to get from the field.\n@@ -83,7 +96,131 @@ public FieldExpression(String field, String key, String subKey) {\n     }\n \n     /**\n-     * Gets the name of this field expression formatted with delimiters for any index and/or keys.\n+     * Constructor that creates a field expression with a variable list index or map key and a map subkey.\n+     *\n+     * @param field The non-null field to get.\n+     * @param variableKey The non-null variable key to get from the field.\n+     * @param subKey The non-null subkey to get from the field[key].\n+     */\n+    public FieldExpression(String field, Expression variableKey, String subKey) {\n+        this.field = Objects.requireNonNull(field);\n+        this.variableKey = Objects.requireNonNull(variableKey);\n+        this.subKey = Objects.requireNonNull(subKey);\n+    }\n+\n+    /**\n+     * Constructor that creates a field expression with a list index and a variable map subkey.\n+     *\n+     * @param field The non-null field to get.\n+     * @param index The non-null index to get from the field.\n+     * @param variableSubKey The non-null variable subkey to get from the field[index].\n+     */\n+    public FieldExpression(String field, Integer index, Expression variableSubKey) {\n+        this.field = Objects.requireNonNull(field);\n+        this.index = Objects.requireNonNull(index);\n+        this.variableSubKey = Objects.requireNonNull(variableSubKey);\n+    }\n+\n+    /**\n+     * Constructor that creates a field expression with a map key and a variable map subkey.\n+     *\n+     * @param field The non-null field to get.\n+     * @param key The non-null key to get from the field.\n+     * @param variableSubKey The non-null variable subkey to get from the field.key.\n+     */\n+    public FieldExpression(String field, String key, Expression variableSubKey) {\n+        this.field = Objects.requireNonNull(field);\n+        this.key = Objects.requireNonNull(key);\n+        this.variableSubKey = Objects.requireNonNull(variableSubKey);\n+    }\n+\n+    /**\n+     * Constructor that creates a field expression with map key and a map subkey.\n+     *\n+     * @param field The non-null field to get.\n+     * @param variableKey The non-null variable key to get from the field.\n+     * @param variableSubKey The non-null variable subkey to get from the field[key].\n+     */\n+    public FieldExpression(String field, Expression variableKey, Expression variableSubKey) {\n+        this.field = Objects.requireNonNull(field);\n+        this.variableKey = Objects.requireNonNull(variableKey);\n+        this.variableSubKey = Objects.requireNonNull(variableSubKey);\n+    }\n+\n+    /**\n+     * Constructor that creates a subfield expression from a field expression and a list index.\n+     *\n+     * @param other The non-null field expression to get a subfield from.\n+     * @param index The non-null index to get from the field expression.\n+     * @throws IllegalArgumentException if the field expression has an index or key and therefore cannot have another index.\n+     */\n+    public FieldExpression(FieldExpression other, Integer index) {\n+        Objects.requireNonNull(other);\n+        Objects.requireNonNull(index);\n+        if (other.index != null || other.key != null || other.variableKey != null || other.subKey != null || other.variableSubKey != null) {\n+            throw new IllegalArgumentException();\n+        }\n+        this.field = other.field;\n+        this.index = index;\n+    }\n+\n+    /**\n+     * Constructor that creates a subfield expression from a field expression and a map key.\n+     *\n+     * @param other The non-null field expression to get a subfield from.\n+     * @param key The non-null key to get from the field expression.\n+     * @throws IllegalArgumentException if the field expression has a subkey and therefore cannot have another key.\n+     */\n+    public FieldExpression(FieldExpression other, String key) {\n+        Objects.requireNonNull(other);\n+        Objects.requireNonNull(key);\n+        if (other.subKey != null || other.variableSubKey != null) {\n+            throw new IllegalArgumentException();\n+        } else if (other.index != null) {\n+            this.index = other.index;\n+            this.subKey = key;\n+        } else if (other.key != null) {\n+            this.key = other.key;\n+            this.subKey = key;\n+        } else if (other.variableKey != null) {\n+            this.variableKey = other.variableKey;\n+            this.subKey = key;\n+        } else {\n+            this.key = key;\n+        }\n+        this.field = other.field;\n+    }\n+\n+    /**\n+     * Constructor that creates a subfield expression from a field expression and a variable key.\n+     *\n+     * @param other The non-null field expression to get a subfield from.\n+     * @param variableKey The non-null variable key to get from the field expression.\n+     * @throws IllegalArgumentException if the field expression has a subkey and therefore cannot have another key.\n+     */\n+    public FieldExpression(FieldExpression other, Expression variableKey) {\n+        Objects.requireNonNull(other);\n+        Objects.requireNonNull(variableKey);\n+        if (other.subKey != null || other.variableSubKey != null) {\n+            throw new IllegalArgumentException();\n+        } else if (other.index != null) {\n+            this.index = other.index;\n+            this.variableSubKey = variableKey;\n+        } else if (other.key != null) {\n+            this.key = other.key;\n+            this.variableSubKey = variableKey;\n+        } else if (other.variableKey != null) {\n+            this.variableKey = other.variableKey;\n+            this.variableSubKey = variableKey;\n+        } else {\n+            this.variableKey = variableKey;\n+        }\n+        this.field = other.field;\n+    }\n+\n+    /**\n+     * Gets the name of this field expression formatted with delimiters for any index and/or keys. This name is used in\n+     * the {@link com.yahoo.bullet.querying.partitioning.SimpleEqualityPartitioner}.\n      *\n      * @return The name of this field expression.\n      */\n@@ -121,16 +258,33 @@ public boolean equals(Object obj) {\n                Objects.equals(index, other.index) &&\n                Objects.equals(key, other.key) &&\n                Objects.equals(subKey, other.subKey) &&\n+               Objects.equals(variableKey, other.variableKey) &&\n+               Objects.equals(variableSubKey, other.variableSubKey) &&\n                type == other.type;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(field, index, key, subKey, type);\n+        return Objects.hash(field, index, key, subKey, variableKey, variableSubKey, type);\n     }\n \n     @Override\n     public String toString() {\n-        return \"{field: \" + field + \", index: \" + index + \", key: \" + key + \", subKey: \" + subKey + \", \" + super.toString() + \"}\";\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(\"{field: \").append(field);\n+        if (index != null) {\n+            builder.append(\", index: \").append(index);\n+        } else if (key != null) {\n+            builder.append(\", key: \").append(key);\n+        } else if (variableKey != null) {\n+            builder.append(\", variableKey: \").append(variableKey);\n+        }\n+        if (subKey != null) {\n+            builder.append(\", subKey: \").append(subKey);\n+        } else if (variableSubKey != null) {\n+            builder.append(\", variableSubKey: \").append(variableSubKey);\n+        }\n+        builder.append(\", \").append(super.toString()).append(\"}\");\n+        return builder.toString();\n     }\n }"
  },
  {
    "sha": "8f591f2721c830d06380de282703cd58effdaead",
    "filename": "src/main/java/com/yahoo/bullet/query/expressions/Operation.java",
    "status": "modified",
    "additions": 13,
    "deletions": 4,
    "changes": 17,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/query/expressions/Operation.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/query/expressions/Operation.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/query/expressions/Operation.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -41,6 +41,8 @@\n     LESS_THAN_OR_EQUALS_ALL(\"<= ALL\"),\n     REGEX_LIKE(\"RLIKE\"),\n     REGEX_LIKE_ANY(\"RLIKE ANY\"),\n+    NOT_REGEX_LIKE(\"NOT RLIKE\"),\n+    NOT_REGEX_LIKE_ANY(\"NOT RLIKE ANY\"),\n     SIZE_IS(\"SIZEIS\"),\n     CONTAINS_KEY(\"CONTAINSKEY\"),\n     CONTAINS_VALUE(\"CONTAINSVALUE\"),\n@@ -54,17 +56,24 @@\n     SIZE_OF(\"SIZEOF\"),\n     IS_NULL(\"IS NULL\"),\n     IS_NOT_NULL(\"IS NOT NULL\"),\n-    IF(\"IF\");\n+    TRIM(\"TRIM\"),\n+    ABS(\"ABS\"),\n+    IF(\"IF\"),\n+    BETWEEN(\"BETWEEN\"),\n+    NOT_BETWEEN(\"NOT BETWEEN\"),\n+    SUBSTRING(\"SUBSTRING\"),\n+    UNIX_TIMESTAMP(\"UNIX_TIMESTAMP\");\n \n     public static final Set<Operation> BINARY_OPERATIONS =\n             new HashSet<>(asList(ADD, SUB, MUL, DIV,\n                                  EQUALS, EQUALS_ANY, EQUALS_ALL, NOT_EQUALS, NOT_EQUALS_ANY, NOT_EQUALS_ALL,\n                                  GREATER_THAN, GREATER_THAN_ANY, GREATER_THAN_ALL, LESS_THAN, LESS_THAN_ANY, LESS_THAN_ALL,\n                                  GREATER_THAN_OR_EQUALS, GREATER_THAN_OR_EQUALS_ANY, GREATER_THAN_OR_EQUALS_ALL,\n                                  LESS_THAN_OR_EQUALS, LESS_THAN_OR_EQUALS_ANY, LESS_THAN_OR_EQUALS_ALL, REGEX_LIKE, REGEX_LIKE_ANY,\n-                                 SIZE_IS, CONTAINS_KEY, CONTAINS_VALUE, IN, NOT_IN, AND, OR, XOR, FILTER));\n-    public static final Set<Operation> UNARY_OPERATIONS = new HashSet<>(asList(NOT, SIZE_OF, IS_NULL, IS_NOT_NULL));\n-    public static final Set<Operation> N_ARY_OPERATIONS = new HashSet<>(asList(AND, OR, IF));\n+                                 NOT_REGEX_LIKE, NOT_REGEX_LIKE_ANY, SIZE_IS, CONTAINS_KEY, CONTAINS_VALUE, IN, NOT_IN,\n+                                 AND, OR, XOR, FILTER));\n+    public static final Set<Operation> UNARY_OPERATIONS = new HashSet<>(asList(NOT, SIZE_OF, IS_NULL, IS_NOT_NULL, TRIM, ABS));\n+    public static final Set<Operation> N_ARY_OPERATIONS = new HashSet<>(asList(AND, OR, IF, BETWEEN, NOT_BETWEEN, SUBSTRING, UNIX_TIMESTAMP));\n \n     private String name;\n "
  },
  {
    "sha": "5d9b5ce97d955b9975e39d8c1e88f678cc555b4f",
    "filename": "src/main/java/com/yahoo/bullet/querying/BulletRecordWrapper.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/BulletRecordWrapper.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/BulletRecordWrapper.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/querying/BulletRecordWrapper.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2021, Yahoo Inc.\n+ *  Licensed under the terms of the Apache License, Version 2.0.\n+ *  See the LICENSE file associated with the project for terms.\n+ */\n+package com.yahoo.bullet.querying;\n+\n+import com.yahoo.bullet.record.BulletRecord;\n+import com.yahoo.bullet.typesystem.TypedObject;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+@RequiredArgsConstructor\n+public class BulletRecordWrapper extends BulletRecord {\n+    private static final long serialVersionUID = 2194169401061695144L;\n+\n+    private final BulletRecord baseRecord;\n+    private Map<String, TypedObject> map = new HashMap<>();\n+\n+    @Override\n+    public TypedObject typedGet(String field) {\n+        TypedObject value = map.get(field);\n+        if (value != null) {\n+            return value;\n+        }\n+        return baseRecord.typedGet(field);\n+    }\n+\n+    public void put(String field, Serializable value) {\n+        map.put(field, new TypedObject(value));\n+    }\n+\n+    @Override\n+    protected Serializable convert(Object o) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected BulletRecord rawSet(String s, Serializable serializable) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected Map<String, Serializable> getRawDataMap() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Serializable get(String s) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean hasField(String s) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int fieldCount() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Serializable getAndRemove(String s) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public BulletRecord remove(String s) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public BulletRecord copy() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Iterator iterator() {\n+        throw new UnsupportedOperationException();\n+    }\n+}"
  },
  {
    "sha": "2ed946318d95ea2c96cb60583d8baad91a7c6cb5",
    "filename": "src/main/java/com/yahoo/bullet/querying/Projection.java",
    "status": "modified",
    "additions": 116,
    "deletions": 12,
    "changes": 128,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/Projection.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/Projection.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/querying/Projection.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -11,9 +11,12 @@\n import com.yahoo.bullet.record.BulletRecordProvider;\n import com.yahoo.bullet.typesystem.TypedObject;\n \n+import java.io.Serializable;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n /**\n@@ -26,16 +29,36 @@\n  */\n public class Projection {\n     private final Map<String, Evaluator> evaluators;\n+    private Evaluator explodeEvaluator;\n+    private String keyAlias;\n+    private String valueAlias;\n+    private boolean outerLateralView = false;\n \n     /**\n      * Constructor that creates a Projection from the given fields.\n      *\n-     * @param fields The fields to create a Projection from. Will be non-null.\n+     * @param fields The non-null fields to create a Projection from.\n      */\n     public Projection(List<Field> fields) {\n         evaluators = fields.stream().collect(Collectors.toMap(Field::getName, Projection::getEvaluator));\n     }\n \n+    /**\n+     * Constructor that creates a Projection from the given {@link com.yahoo.bullet.query.Projection}.\n+     *\n+     * @param projection The non-null projection to create a Projection from.\n+     */\n+    public Projection(com.yahoo.bullet.query.Projection projection) {\n+        this(projection.getFields());\n+        com.yahoo.bullet.query.Projection.Explode explode = projection.getExplode();\n+        if (explode != null) {\n+            explodeEvaluator = explode.getField().getEvaluator();\n+            keyAlias = explode.getKeyAlias();\n+            valueAlias = explode.getValueAlias();\n+            outerLateralView = explode.isOuterLateralView();\n+        }\n+    }\n+\n     /**\n      * Projects onto a new BulletRecord.\n      *\n@@ -44,17 +67,7 @@ public Projection(List<Field> fields) {\n      * @return A new BulletRecord with fields projected onto it.\n      */\n     public BulletRecord project(BulletRecord record, BulletRecordProvider provider) {\n-        BulletRecord projected = provider.getInstance();\n-        evaluators.forEach((name, evaluator) -> {\n-            try {\n-                TypedObject value = evaluator.evaluate(record);\n-                if (!value.isNull()) {\n-                    projected.typedSet(name, value);\n-                }\n-            } catch (Exception ignored) {\n-            }\n-        });\n-        return projected;\n+        return projectRecord(record, provider::getInstance);\n     }\n \n     /**\n@@ -78,6 +91,97 @@ public BulletRecord project(BulletRecord record) {\n         return record;\n     }\n \n+    /**\n+     *\n+     *\n+     * @param record\n+     * @param provider\n+     * @return\n+     */\n+    public List<BulletRecord> explode(BulletRecord record, BulletRecordProvider provider) {\n+        TypedObject explodeField;\n+        try {\n+            explodeField = explodeEvaluator.evaluate(record);\n+        } catch (Exception e) {\n+            explodeField = TypedObject.NULL;\n+        }\n+        if (valueAlias != null) {\n+            return explodeMap(explodeField, record, provider::getInstance);\n+        } else {\n+            return explodeList(explodeField, record, provider::getInstance);\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param record\n+     * @return\n+     */\n+    public List<BulletRecord> explode(BulletRecord record) {\n+        TypedObject explodeField;\n+        try {\n+            explodeField = explodeEvaluator.evaluate(record);\n+        } catch (Exception e) {\n+            explodeField = TypedObject.NULL;\n+        }\n+        if (valueAlias != null) {\n+            return explodeMap(explodeField, record, record::copy);\n+        } else {\n+            return explodeList(explodeField, record, record::copy);\n+        }\n+    }\n+\n+    private List<BulletRecord> explodeList(TypedObject explodeField, BulletRecord record, Supplier<BulletRecord> supplier) {\n+        List<Serializable> explodedList;\n+        if (!explodeField.isList() || explodeField.size() == 0) {\n+            if (!outerLateralView) {\n+                return Collections.emptyList();\n+            }\n+            explodedList = Collections.singletonList(null);\n+        } else {\n+            explodedList = (List<Serializable>) explodeField.getValue();\n+        }\n+        BulletRecordWrapper wrapper = new BulletRecordWrapper(record);\n+        return explodedList.stream().map(s -> {\n+            wrapper.put(keyAlias, s);\n+            // TODO: Inefficient for evaluators that only depend on the base record\n+            return projectRecord(wrapper, supplier);\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private List<BulletRecord> explodeMap(TypedObject explodeField, BulletRecord record, Supplier<BulletRecord> supplier) {\n+        Map<String, Serializable> explodedMap;\n+        if (!explodeField.isList() || explodeField.size() == 0) {\n+            if (!outerLateralView) {\n+                return Collections.emptyList();\n+            }\n+            explodedMap = Collections.singletonMap(null, null);\n+        } else {\n+            explodedMap = (Map<String, Serializable>) explodeField.getValue();\n+        }\n+        BulletRecordWrapper wrapper = new BulletRecordWrapper(record);\n+        return explodedMap.entrySet().stream().map(entry -> {\n+            wrapper.put(keyAlias, entry.getKey());\n+            wrapper.put(valueAlias, entry.getValue());\n+            // TODO: Inefficient for evaluators that only depend on the base record\n+            return projectRecord(wrapper, supplier);\n+        }).collect(Collectors.toList());\n+    }\n+\n+    private BulletRecord projectRecord(BulletRecord record, Supplier<BulletRecord> supplier) {\n+        BulletRecord projected = supplier.get();\n+        evaluators.forEach((name, evaluator) -> {\n+            try {\n+                TypedObject value = evaluator.evaluate(record);\n+                if (!value.isNull()) {\n+                    projected.typedSet(name, value);\n+                }\n+            } catch (Exception ignored) {\n+            }\n+        });\n+        return projected;\n+    }\n+\n     private static Evaluator getEvaluator(Field field) {\n         return field.getValue().getEvaluator();\n     }"
  },
  {
    "sha": "8e881879f77332e4035045b78786f74a26da5553",
    "filename": "src/main/java/com/yahoo/bullet/querying/Querier.java",
    "status": "modified",
    "additions": 25,
    "deletions": 4,
    "changes": 29,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/Querier.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/Querier.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/querying/Querier.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -295,6 +295,8 @@\n     private Filter filter;\n \n     private Projection projection;\n+    private boolean copyRecord = false;\n+    private boolean explodeRecord = false;\n \n     // Transient field, DO NOT use it beyond constructor and initialize methods.\n     private transient BulletConfig config;\n@@ -364,6 +366,8 @@ private void start() {\n         com.yahoo.bullet.query.Projection projection = query.getProjection();\n         if (projection.getType() != PASS_THROUGH) {\n             this.projection = new Projection(projection.getFields());\n+            copyRecord = projection.getType() == COPY;\n+            explodeRecord = projection.getExplode() != null;\n         }\n \n         // Aggregation and Strategy are guaranteed to not be null.\n@@ -403,9 +407,18 @@ public void consume(BulletRecord record) {\n             return;\n         }\n         try {\n-            BulletRecord projected = project(record);\n-            window.consume(projected);\n-            hasNewData = true;\n+            if (explodeRecord) {\n+                List<BulletRecord> exploded = explode(record);\n+                if (exploded.isEmpty()) {\n+                    return;\n+                }\n+                exploded.forEach(window::consume);\n+                hasNewData = true;\n+            } else {\n+                BulletRecord projected = project(record);\n+                window.consume(projected);\n+                hasNewData = true;\n+            }\n         } catch (RuntimeException e) {\n             log.error(\"Unable to consume {} for query {}\", record, this);\n             log.error(\"Skipping due to\", e);\n@@ -625,13 +638,21 @@ private boolean filter(BulletRecord record) {\n     private BulletRecord project(BulletRecord record) {\n         if (projection == null) {\n             return record;\n-        } else if (runningQuery.getQuery().getProjection().getType() == COPY) {\n+        } else if (copyRecord) {\n             return projection.project(record.copy());\n         } else {\n             return projection.project(record, provider);\n         }\n     }\n \n+    private List<BulletRecord> explode(BulletRecord record) {\n+        if (copyRecord) {\n+            return projection.explode(record.copy());\n+        } else {\n+            return projection.explode(record, provider);\n+        }\n+    }\n+\n     private Clip postAggregate(Clip clip) {\n         if (postStrategies == null) {\n             return clip;"
  },
  {
    "sha": "8ec878e08e379d5e4d7a3f0413ec73e45a572b8c",
    "filename": "src/main/java/com/yahoo/bullet/querying/evaluators/BinaryOperations.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/evaluators/BinaryOperations.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/evaluators/BinaryOperations.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/querying/evaluators/BinaryOperations.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -57,6 +57,8 @@\n         BINARY_OPERATORS.put(Operation.LESS_THAN_OR_EQUALS_ALL, BinaryOperations::lessThanOrEqualsAll);\n         BINARY_OPERATORS.put(Operation.REGEX_LIKE, BinaryOperations::regexLike);\n         BINARY_OPERATORS.put(Operation.REGEX_LIKE_ANY, BinaryOperations::regexLikeAny);\n+        BINARY_OPERATORS.put(Operation.NOT_REGEX_LIKE, BinaryOperations::notRegexLike);\n+        BINARY_OPERATORS.put(Operation.NOT_REGEX_LIKE_ANY, BinaryOperations::notRegexLikeAny);\n         BINARY_OPERATORS.put(Operation.SIZE_IS, BinaryOperations::sizeIs);\n         BINARY_OPERATORS.put(Operation.CONTAINS_KEY, BinaryOperations::containsKey);\n         BINARY_OPERATORS.put(Operation.CONTAINS_VALUE, BinaryOperations::containsValue);\n@@ -227,6 +229,29 @@ static TypedObject regexLikeAny(Evaluator left, Evaluator right, BulletRecord re\n         });\n     }\n \n+    static TypedObject notRegexLike(Evaluator left, Evaluator right, BulletRecord record) {\n+        return checkNull(left, right, record, (leftValue, rightValue) ->\n+                TypedObject.valueOf(!Pattern.compile((String) rightValue.getValue())\n+                                            .matcher((String) leftValue.getValue())\n+                                            .matches()));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static TypedObject notRegexLikeAny(Evaluator left, Evaluator right, BulletRecord record) {\n+        return checkNull(left, right, record, (leftValue, rightValue) -> {\n+            String value = (String) leftValue.getValue();\n+            boolean containsNull = false;\n+            for (Serializable object : (List<? extends Serializable>) rightValue.getValue()) {\n+                if (object == null) {\n+                    containsNull = true;\n+                } else if (Pattern.compile((String) object).matcher(value).matches()) {\n+                    return TypedObject.FALSE;\n+                }\n+            }\n+            return !containsNull ? TypedObject.TRUE : TypedObject.NULL;\n+        });\n+    }\n+\n     static TypedObject sizeIs(Evaluator left, Evaluator right, BulletRecord record) {\n         return checkNull(left, right, record, (leftValue, rightValue) -> TypedObject.valueOf(leftValue.size() == (int) rightValue.getValue()));\n     }"
  },
  {
    "sha": "d3c76f00c6d3ac66613d8a42a7201e24d1132ccf",
    "filename": "src/main/java/com/yahoo/bullet/querying/evaluators/FieldEvaluator.java",
    "status": "modified",
    "additions": 68,
    "deletions": 2,
    "changes": 70,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/evaluators/FieldEvaluator.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/evaluators/FieldEvaluator.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/querying/evaluators/FieldEvaluator.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -7,6 +7,7 @@\n \n import com.yahoo.bullet.query.expressions.FieldExpression;\n import com.yahoo.bullet.record.BulletRecord;\n+import com.yahoo.bullet.typesystem.Type;\n import com.yahoo.bullet.typesystem.TypedObject;\n \n import java.io.Serializable;\n@@ -44,16 +45,81 @@ private static FieldExtractor getFieldExtractor(FieldExpression fieldExpression)\n         final Integer index = fieldExpression.getIndex();\n         final String key = fieldExpression.getKey();\n         final String subKey = fieldExpression.getSubKey();\n+        final Evaluator keyEvaluator = fieldExpression.getVariableKey() != null ? fieldExpression.getVariableKey().getEvaluator() : null;\n+        final Evaluator subKeyEvaluator = fieldExpression.getVariableSubKey() != null ? fieldExpression.getVariableSubKey().getEvaluator() : null;\n         if (index != null) {\n             if (subKey != null) {\n                 return record -> record.typedGet(field, index, subKey);\n+            } else if (subKeyEvaluator != null) {\n+                return record -> {\n+                    TypedObject subKeyArg = subKeyEvaluator.evaluate(record);\n+                    if (subKeyArg.isNull()) {\n+                        return TypedObject.NULL;\n+                    }\n+                    return record.typedGet(field, index, (String) subKeyArg.getValue());\n+                };\n+            } else {\n+                return record -> record.typedGet(field, index);\n             }\n-            return record -> record.typedGet(field, index);\n         } else if (key != null) {\n             if (subKey != null) {\n                 return record -> record.typedGet(field, key, subKey);\n+            } else if (subKeyEvaluator != null) {\n+                return record -> {\n+                    TypedObject subKeyArg = subKeyEvaluator.evaluate(record);\n+                    if (subKeyArg.isNull()) {\n+                        return TypedObject.NULL;\n+                    }\n+                    return record.typedGet(field, key, (String) subKeyArg.getValue());\n+                };\n+            } else {\n+                return record -> record.typedGet(field, key);\n+            }\n+        } else if (keyEvaluator != null) {\n+            if (subKey != null) {\n+                return record -> {\n+                    TypedObject keyArg = keyEvaluator.evaluate(record);\n+                    if (keyArg.isNull()) {\n+                        return TypedObject.NULL;\n+                    }\n+                    Type type = keyArg.getType();\n+                    if (Type.isNumeric(type)) {\n+                        return record.typedGet(field, ((Number) keyArg.getValue()).intValue(), subKey);\n+                    } else {\n+                        return record.typedGet(field, (String) keyArg.getValue(), subKey);\n+                    }\n+                };\n+            } else if (subKeyEvaluator != null) {\n+                return record -> {\n+                    TypedObject keyArg = keyEvaluator.evaluate(record);\n+                    if (keyArg.isNull()) {\n+                        return TypedObject.NULL;\n+                    }\n+                    TypedObject subKeyArg = subKeyEvaluator.evaluate(record);\n+                    if (subKeyArg.isNull()) {\n+                        return TypedObject.NULL;\n+                    }\n+                    Type type = keyArg.getType();\n+                    if (Type.isNumeric(type)) {\n+                        return record.typedGet(field, ((Number) keyArg.getValue()).intValue(), (String) subKeyArg.getValue());\n+                    } else {\n+                        return record.typedGet(field, (String) keyArg.getValue(), (String) subKeyArg.getValue());\n+                    }\n+                };\n+            } else {\n+                return record -> {\n+                    TypedObject keyArg = keyEvaluator.evaluate(record);\n+                    if (keyArg.isNull()) {\n+                        return TypedObject.NULL;\n+                    }\n+                    Type type = keyArg.getType();\n+                    if (Type.isNumeric(type)) {\n+                        return record.typedGet(field, ((Number) keyArg.getValue()).intValue());\n+                    } else {\n+                        return record.typedGet(field, (String) keyArg.getValue());\n+                    }\n+                };\n             }\n-            return record -> record.typedGet(field, key);\n         } else {\n             return record -> record.typedGet(field);\n         }"
  },
  {
    "sha": "9825988353299732547262fa7676e7616df8f7f5",
    "filename": "src/main/java/com/yahoo/bullet/querying/evaluators/NAryOperations.java",
    "status": "modified",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/evaluators/NAryOperations.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/evaluators/NAryOperations.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/querying/evaluators/NAryOperations.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -11,6 +11,10 @@\n import com.yahoo.bullet.typesystem.TypedObject;\n \n import java.io.Serializable;\n+import java.sql.Timestamp;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n import java.util.EnumMap;\n import java.util.List;\n import java.util.Map;\n@@ -27,6 +31,10 @@\n         N_ARY_OPERATORS.put(Operation.AND, NAryOperations::allMatch);\n         N_ARY_OPERATORS.put(Operation.OR, NAryOperations::anyMatch);\n         N_ARY_OPERATORS.put(Operation.IF, NAryOperations::ternary);\n+        N_ARY_OPERATORS.put(Operation.BETWEEN, NAryOperations::between);\n+        N_ARY_OPERATORS.put(Operation.NOT_BETWEEN, NAryOperations::notBetween);\n+        N_ARY_OPERATORS.put(Operation.SUBSTRING, NAryOperations::substring);\n+        N_ARY_OPERATORS.put(Operation.UNIX_TIMESTAMP, NAryOperations::unixTimestamp);\n     }\n \n     static TypedObject allMatch(List<Evaluator> evaluators, BulletRecord record) {\n@@ -60,4 +68,114 @@ static TypedObject ternary(List<Evaluator> evaluators, BulletRecord record) {\n         return !condition.isNull() && (Boolean) condition.getValue() ? evaluators.get(1).evaluate(record) :\n                                                                        evaluators.get(2).evaluate(record);\n     }\n+\n+    static TypedObject between(List<Evaluator> evaluators, BulletRecord record) {\n+        TypedObject valueArg = evaluators.get(0).evaluate(record);\n+        if (valueArg.isNull()) {\n+            return TypedObject.NULL;\n+        }\n+        double value = ((Number) valueArg.getValue()).doubleValue();\n+        TypedObject lowerArg = evaluators.get(1).evaluate(record);\n+        TypedObject upperArg = evaluators.get(2).evaluate(record);\n+        Number lower = (Number) lowerArg.getValue();\n+        Number upper = (Number) upperArg.getValue();\n+        if (lowerArg.isNull() && upperArg.isNull()) {\n+            return TypedObject.NULL;\n+        } else if (lowerArg.isNull()) {\n+            return upper.doubleValue() < value ? TypedObject.FALSE : TypedObject.NULL;\n+        } else if (upperArg.isNull()) {\n+            return value < lower.doubleValue() ? TypedObject.FALSE : TypedObject.NULL;\n+        }\n+        return TypedObject.valueOf(lower.doubleValue() <= value && value <= upper.doubleValue());\n+    }\n+\n+    static TypedObject notBetween(List<Evaluator> evaluators, BulletRecord record) {\n+        TypedObject valueArg = evaluators.get(0).evaluate(record);\n+        if (valueArg.isNull()) {\n+            return TypedObject.NULL;\n+        }\n+        double value = ((Number) valueArg.getValue()).doubleValue();\n+        TypedObject lowerArg = evaluators.get(1).evaluate(record);\n+        TypedObject upperArg = evaluators.get(2).evaluate(record);\n+        Number lower = (Number) lowerArg.getValue();\n+        Number upper = (Number) upperArg.getValue();\n+        if (lowerArg.isNull() && upperArg.isNull()) {\n+            return TypedObject.NULL;\n+        } else if (lowerArg.isNull()) {\n+            return upper.doubleValue() < value ? TypedObject.TRUE : TypedObject.NULL;\n+        } else if (upperArg.isNull()) {\n+            return value < lower.doubleValue() ? TypedObject.TRUE : TypedObject.NULL;\n+        }\n+        return TypedObject.valueOf(value < lower.doubleValue() || value > upper.doubleValue());\n+    }\n+\n+    static TypedObject substring(List<Evaluator> evaluators, BulletRecord record) {\n+        TypedObject stringArg = evaluators.get(0).evaluate(record);\n+        if (stringArg.isNull()) {\n+            return TypedObject.NULL;\n+        }\n+        TypedObject startArg = evaluators.get(1).evaluate(record);\n+        if (startArg.isNull()) {\n+            return TypedObject.NULL;\n+        }\n+        TypedObject lengthArg = null;\n+        if (evaluators.size() > 2) {\n+            lengthArg = evaluators.get(2).evaluate(record);\n+            if (lengthArg.isNull()) {\n+                return TypedObject.NULL;\n+            }\n+        }\n+        String string = (String) stringArg.getValue();\n+        if (string.isEmpty()) {\n+            return TypedObject.valueOf(\"\");\n+        }\n+        int start = ((Number) startArg.getValue()).intValue();\n+        if (start == 0 || Math.abs(start) > string.length()) {\n+            return TypedObject.valueOf(\"\");\n+        }\n+        // Change start to 0-index\n+        if (start > 0) {\n+            start--;\n+        } else {\n+            start += string.length();\n+        }\n+        if (evaluators.size() == 2) {\n+            return TypedObject.valueOf(string.substring(start));\n+        }\n+        int length = ((Number) lengthArg.getValue()).intValue();\n+        if (length <= 0) {\n+            return TypedObject.valueOf(\"\");\n+        }\n+        int end = Math.min(start + length, string.length());\n+        return TypedObject.valueOf(string.substring(start, end));\n+    }\n+\n+    static TypedObject unixTimestamp(List<Evaluator> evaluators, BulletRecord record) {\n+        if (evaluators.size() == 1) {\n+            TypedObject dateArg = evaluators.get(0).evaluate(record);\n+            if (dateArg.isNull()) {\n+                return TypedObject.NULL;\n+            }\n+            Timestamp timestamp = Timestamp.valueOf((String) dateArg.getValue());\n+            //long millisA = timestamp.toLocalDateTime().toEpochSecond(ZoneOffset.UTC);\n+            //long millisB = timestamp.getTime();\n+            return TypedObject.valueOf(timestamp.getTime() / 1000);\n+        } else if (evaluators.size() == 2) {\n+            TypedObject dateArg = evaluators.get(0).evaluate(record);\n+            if (dateArg.isNull()) {\n+                return TypedObject.NULL;\n+            }\n+            TypedObject patternArg = evaluators.get(1).evaluate(record);\n+            if (patternArg.isNull()) {\n+                return TypedObject.NULL;\n+            }\n+            // First argument can be a number\n+            String date = Type.isNumeric(dateArg.getType()) ? Long.toString(((Number) dateArg.getValue()).longValue()) : (String) dateArg.getValue();\n+            String pattern = (String) patternArg.getValue();\n+            LocalDateTime localDateTime = LocalDateTime.parse(date, DateTimeFormatter.ofPattern(pattern));\n+            //localDateTime.toEpochSecond(ZoneOffset.UTC)\n+            return TypedObject.valueOf(localDateTime.atZone(ZoneId.systemDefault()).toEpochSecond());\n+        }\n+        return TypedObject.valueOf(System.currentTimeMillis() / 1000);\n+    }\n }"
  },
  {
    "sha": "9ebf94a6265f674c9e07b02eff1c42ed9aad758e",
    "filename": "src/main/java/com/yahoo/bullet/querying/evaluators/UnaryOperations.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/evaluators/UnaryOperations.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/evaluators/UnaryOperations.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/querying/evaluators/UnaryOperations.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -31,6 +31,8 @@\n         UNARY_OPERATORS.put(Operation.SIZE_OF, UnaryOperations::sizeOf);\n         UNARY_OPERATORS.put(Operation.IS_NULL, UnaryOperations::isNull);\n         UNARY_OPERATORS.put(Operation.IS_NOT_NULL, UnaryOperations::isNotNull);\n+        UNARY_OPERATORS.put(Operation.TRIM, UnaryOperations::trim);\n+        UNARY_OPERATORS.put(Operation.ABS, UnaryOperations::abs);\n     }\n \n     static TypedObject not(Evaluator evaluator, BulletRecord record) {\n@@ -49,6 +51,29 @@ static TypedObject isNotNull(Evaluator evaluator, BulletRecord record) {\n         return TypedObject.valueOf(!evaluator.evaluate(record).isNull());\n     }\n \n+    static TypedObject trim(Evaluator evaluator, BulletRecord record) {\n+        return checkNull(evaluator, record, value -> {\n+            String str = (String) value.getValue();\n+            return TypedObject.valueOf(str.trim());\n+        });\n+    }\n+\n+    static TypedObject abs(Evaluator evaluator, BulletRecord record) {\n+        return checkNull(evaluator, record, value -> {\n+            Number number = (Number) value.getValue();\n+            switch (value.getType()) {\n+                case DOUBLE:\n+                    return TypedObject.valueOf(Math.abs(number.doubleValue()));\n+                case FLOAT:\n+                    return TypedObject.valueOf(Math.abs(number.floatValue()));\n+                case LONG:\n+                    return TypedObject.valueOf(Math.abs(number.longValue()));\n+                default:\n+                    return TypedObject.valueOf(Math.abs(number.intValue()));\n+            }\n+        });\n+    }\n+\n     private static TypedObject checkNull(Evaluator evaluator, BulletRecord record, Function<TypedObject, TypedObject> operator) {\n         TypedObject value = evaluator.evaluate(record);\n         if (value.isNull()) {"
  },
  {
    "sha": "bc6a71e54e0c3f5336c5ca8fd7ed998e63a61350",
    "filename": "src/main/java/com/yahoo/bullet/querying/partitioning/SimpleEqualityPartitioner.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/partitioning/SimpleEqualityPartitioner.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/main/java/com/yahoo/bullet/querying/partitioning/SimpleEqualityPartitioner.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/main/java/com/yahoo/bullet/querying/partitioning/SimpleEqualityPartitioner.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -161,6 +161,9 @@ private void mapFieldsToValues(Expression expression, Map<String, Set<Serializab\n     }\n \n     private void addFieldToMapping(FieldExpression fieldExpression, ValueExpression valueExpression, Map<String, Set<Serializable>> mapping) {\n+        if (fieldExpression.getVariableKey() != null || fieldExpression.getVariableSubKey() != null) {\n+            return;\n+        }\n         String field = fieldExpression.getName();\n         if (fieldSet.contains(field)) {\n             Serializable value = valueExpression.getValue();"
  },
  {
    "sha": "0660b7a8aab69d0a71847d5df8e642547b7e214f",
    "filename": "src/test/java/com/yahoo/bullet/query/expressions/FieldExpressionTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/query/expressions/FieldExpressionTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/query/expressions/FieldExpressionTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/test/java/com/yahoo/bullet/query/expressions/FieldExpressionTest.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -15,27 +15,27 @@\n     public void testConstructor() {\n         FieldExpression expression = new FieldExpression(\"abc\");\n         Assert.assertEquals(expression.getName(), \"abc\");\n-        Assert.assertEquals(expression.toString(), \"{field: abc, index: null, key: null, subKey: null, type: null}\");\n+        Assert.assertEquals(expression.toString(), \"{field: abc, type: null}\");\n         Assert.assertTrue(expression.getEvaluator() instanceof FieldEvaluator);\n \n         expression = new FieldExpression(\"abc\", 0);\n         Assert.assertEquals(expression.getName(), \"abc.0\");\n-        Assert.assertEquals(expression.toString(), \"{field: abc, index: 0, key: null, subKey: null, type: null}\");\n+        Assert.assertEquals(expression.toString(), \"{field: abc, index: 0, type: null}\");\n         Assert.assertTrue(expression.getEvaluator() instanceof FieldEvaluator);\n \n         expression = new FieldExpression(\"abc\", 0, \"def\");\n         Assert.assertEquals(expression.getName(), \"abc.0.def\");\n-        Assert.assertEquals(expression.toString(), \"{field: abc, index: 0, key: null, subKey: def, type: null}\");\n+        Assert.assertEquals(expression.toString(), \"{field: abc, index: 0, subKey: def, type: null}\");\n         Assert.assertTrue(expression.getEvaluator() instanceof FieldEvaluator);\n \n         expression = new FieldExpression(\"abc\", \"def\");\n         Assert.assertEquals(expression.getName(), \"abc.def\");\n-        Assert.assertEquals(expression.toString(), \"{field: abc, index: null, key: def, subKey: null, type: null}\");\n+        Assert.assertEquals(expression.toString(), \"{field: abc, key: def, type: null}\");\n         Assert.assertTrue(expression.getEvaluator() instanceof FieldEvaluator);\n \n         expression = new FieldExpression(\"abc\", \"def\", \"ghi\");\n         Assert.assertEquals(expression.getName(), \"abc.def.ghi\");\n-        Assert.assertEquals(expression.toString(), \"{field: abc, index: null, key: def, subKey: ghi, type: null}\");\n+        Assert.assertEquals(expression.toString(), \"{field: abc, key: def, subKey: ghi, type: null}\");\n         Assert.assertTrue(expression.getEvaluator() instanceof FieldEvaluator);\n     }\n "
  },
  {
    "sha": "6b1b1af863f05087398d80a2ec45911d4f09dfbc",
    "filename": "src/test/java/com/yahoo/bullet/query/postaggregations/OrderByTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/query/postaggregations/OrderByTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/query/postaggregations/OrderByTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/test/java/com/yahoo/bullet/query/postaggregations/OrderByTest.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -23,7 +23,7 @@ public void testOrderBy() {\n         Assert.assertEquals(orderBy.getFields().size(), 2);\n         Assert.assertEquals(orderBy.getType(), PostAggregationType.ORDER_BY);\n         Assert.assertTrue(orderBy.getPostStrategy() instanceof OrderByStrategy);\n-        Assert.assertEquals(orderBy.toString(), \"{type: ORDER_BY, fields: [{expression: {field: 1, index: null, key: null, subKey: null, type: null}, direction: ASC}, {expression: {field: 2, index: null, key: null, subKey: null, type: null}, direction: DESC}]}\");\n+        Assert.assertEquals(orderBy.toString(), \"{type: ORDER_BY, fields: [{expression: {field: 1, type: null}, direction: ASC}, {expression: {field: 2, type: null}, direction: DESC}]}\");\n     }\n \n     @Test(expectedExceptions = NullPointerException.class)"
  },
  {
    "sha": "5e723121fc292e92465a5acc489236a0c920e657",
    "filename": "src/test/java/com/yahoo/bullet/querying/evaluators/BinaryOperationsTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/querying/evaluators/BinaryOperationsTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/querying/evaluators/BinaryOperationsTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/test/java/com/yahoo/bullet/querying/evaluators/BinaryOperationsTest.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -295,6 +295,28 @@ public void testRegexLikeAny() {\n         Assert.assertEquals(BinaryOperations.regexLikeAny(valueEvaluator(\"abbc\"), listEvaluator(\".*abc\", null), null), TypedObject.NULL);\n     }\n \n+    @Test\n+    public void testNotRegexLike() {\n+        Assert.assertEquals(BinaryOperations.notRegexLike(valueEvaluator(\"aabc\"), valueEvaluator(\".*abc\"), null), TypedObject.FALSE);\n+        Assert.assertEquals(BinaryOperations.notRegexLike(valueEvaluator(\"abbc\"), valueEvaluator(\".*abc\"), null), TypedObject.TRUE);\n+        Assert.assertEquals(BinaryOperations.notRegexLike(valueEvaluator(null), valueEvaluator(\".*abc\"), null), TypedObject.NULL);\n+        Assert.assertEquals(BinaryOperations.notRegexLike(valueEvaluator(\"aabc\"), valueEvaluator(null), null), TypedObject.NULL);\n+        Assert.assertEquals(BinaryOperations.notRegexLike(valueEvaluator(null), valueEvaluator(null), null), TypedObject.NULL);\n+    }\n+\n+    @Test\n+    public void testNotRegexLikeAny() {\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(\"aabc\"), listEvaluator(\".*abc\"), null), TypedObject.FALSE);\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(\"abbc\"), listEvaluator(\".*abc\"), null), TypedObject.TRUE);\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(\"abbc\"), listEvaluator(\".*abc\", \".*bbc\"), null), TypedObject.FALSE);\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(\"abbc\"), listEvaluator(), null), TypedObject.TRUE);\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(null), listEvaluator(\".*abc\"), null), TypedObject.NULL);\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(\"abbc\"), valueEvaluator(null), null), TypedObject.NULL);\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(null), valueEvaluator(null), null), TypedObject.NULL);\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(\"abbc\"), listEvaluator(null, \".*bbc\"), null), TypedObject.FALSE);\n+        Assert.assertEquals(BinaryOperations.notRegexLikeAny(valueEvaluator(\"abbc\"), listEvaluator(\".*abc\", null), null), TypedObject.NULL);\n+    }\n+\n     @Test\n     public void testSizeIs() {\n         Assert.assertEquals(BinaryOperations.sizeIs(listEvaluator(1, 2, 3), valueEvaluator(3), null), TypedObject.TRUE);"
  },
  {
    "sha": "2c5fb6ddcf988c39fcc33a6da64daa162bc0e9f8",
    "filename": "src/test/java/com/yahoo/bullet/querying/evaluators/FieldEvaluatorTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/querying/evaluators/FieldEvaluatorTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/querying/evaluators/FieldEvaluatorTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/test/java/com/yahoo/bullet/querying/evaluators/FieldEvaluatorTest.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -17,7 +17,7 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n \n public class FieldEvaluatorTest {\n@@ -28,7 +28,6 @@\n     public void setup() {\n         map = new HashMap<>();\n         map.put(\"def\", 5);\n-\n         record = RecordBox.get().addListOfMaps(\"abc\", map)\n                                 .addMapOfMaps(\"aaa\", Pair.of(\"abc\", map))\n                                 .getRecord();\n@@ -37,7 +36,7 @@ public void setup() {\n     @Test\n     public void testConstructor() {\n         FieldEvaluator evaluator = new FieldEvaluator(new FieldExpression(\"abc\"));\n-        Assert.assertEquals(evaluator.evaluate(record), new TypedObject(Type.INTEGER_MAP_LIST, new ArrayList<>(Arrays.asList(map))));\n+        Assert.assertEquals(evaluator.evaluate(record), new TypedObject(Type.INTEGER_MAP_LIST, new ArrayList<>(Collections.singletonList(map))));\n \n         evaluator = new FieldEvaluator(new FieldExpression(\"abc\", 0));\n         Assert.assertEquals(evaluator.evaluate(record), new TypedObject(Type.INTEGER_MAP, map));"
  },
  {
    "sha": "80c9dc7099e0a4feb0aad91dc3e141e4f6f1a9ef",
    "filename": "src/test/java/com/yahoo/bullet/querying/evaluators/NAryOperationsTest.java",
    "status": "modified",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/querying/evaluators/NAryOperationsTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/querying/evaluators/NAryOperationsTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/test/java/com/yahoo/bullet/querying/evaluators/NAryOperationsTest.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -12,6 +12,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n \n import static com.yahoo.bullet.querying.evaluators.EvaluatorUtils.valueEvaluator;\n \n@@ -48,4 +49,87 @@ public void testIf() {\n         Assert.assertEquals(NAryOperations.ternary(Arrays.asList(valueEvaluator(false), valueEvaluator(1), valueEvaluator(2)), null), new TypedObject(Type.INTEGER, 2));\n         Assert.assertEquals(NAryOperations.ternary(Arrays.asList(valueEvaluator(null), valueEvaluator(1), valueEvaluator(2)), null), new TypedObject(Type.INTEGER, 2));\n     }\n+\n+    @Test\n+    public void testBetween() {\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(5), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.TRUE);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(7), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.TRUE);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(10), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.TRUE);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(4), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.FALSE);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(11), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.FALSE);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(7), valueEvaluator(10), valueEvaluator(5)), null), TypedObject.FALSE);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(null), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(null), valueEvaluator(10), valueEvaluator(5)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(10), valueEvaluator(null), valueEvaluator(10)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(11), valueEvaluator(null), valueEvaluator(10)), null), TypedObject.FALSE);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(5), valueEvaluator(5), valueEvaluator(null)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.between(Arrays.asList(valueEvaluator(4), valueEvaluator(5), valueEvaluator(null)), null), TypedObject.FALSE);\n+    }\n+\n+    @Test\n+    public void testNotBetween() {\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(5), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.FALSE);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(7), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.FALSE);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(10), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.FALSE);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(4), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.TRUE);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(11), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.TRUE);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(7), valueEvaluator(10), valueEvaluator(5)), null), TypedObject.TRUE);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(null), valueEvaluator(5), valueEvaluator(10)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(null), valueEvaluator(10), valueEvaluator(5)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(10), valueEvaluator(null), valueEvaluator(10)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(11), valueEvaluator(null), valueEvaluator(10)), null), TypedObject.TRUE);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(5), valueEvaluator(5), valueEvaluator(null)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.notBetween(Arrays.asList(valueEvaluator(4), valueEvaluator(5), valueEvaluator(null)), null), TypedObject.TRUE);\n+    }\n+\n+    @Test\n+    public void testSubstring() {\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(1)), null), TypedObject.valueOf(\"hello world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(7)), null), TypedObject.valueOf(\"world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(11)), null), TypedObject.valueOf(\"d\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(12)), null), TypedObject.valueOf(\"\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(-1)), null), TypedObject.valueOf(\"d\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(-5)), null), TypedObject.valueOf(\"world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(-11)), null), TypedObject.valueOf(\"hello world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(-12)), null), TypedObject.valueOf(\"\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(1), valueEvaluator(5)), null), TypedObject.valueOf(\"hello\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(1), valueEvaluator(11)), null), TypedObject.valueOf(\"hello world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(1), valueEvaluator(12)), null), TypedObject.valueOf(\"hello world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(6), valueEvaluator(1)), null), TypedObject.valueOf(\" \"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(-5), valueEvaluator(5)), null), TypedObject.valueOf(\"world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(-5), valueEvaluator(11)), null), TypedObject.valueOf(\"world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(-11), valueEvaluator(12)), null), TypedObject.valueOf(\"hello world\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(-6), valueEvaluator(1)), null), TypedObject.valueOf(\" \"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(1), valueEvaluator(0)), null), TypedObject.valueOf(\"\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(1), valueEvaluator(-1)), null), TypedObject.valueOf(\"\"));\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(null), valueEvaluator(1)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(null)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.substring(Arrays.asList(valueEvaluator(\"hello world\"), valueEvaluator(1), valueEvaluator(null)), null), TypedObject.NULL);\n+    }\n+\n+    @Test\n+    public void testUnixTimestamp() {\n+        long timeBefore = System.currentTimeMillis() / 1000;\n+        TypedObject unixTimestampA = NAryOperations.unixTimestamp(Collections.emptyList(), null);\n+        long timeA = ((Number) unixTimestampA.getValue()).longValue();\n+        long timeAfter = System.currentTimeMillis() / 1000;\n+        Assert.assertTrue(timeBefore <= timeA && timeA <= timeAfter);\n+\n+        TypedObject unixTimestampB = NAryOperations.unixTimestamp(Collections.singletonList(valueEvaluator(\"2021-01-01 00:00:00\")), null);\n+        long timeB = ((Number) unixTimestampB.getValue()).longValue();\n+        // Account for timezone range of system running the test. GMT-12 <= timeB <= GMT+12\n+        Assert.assertTrue(1609459200 - 12 * 60 * 60 <= timeB && timeB <= 1609459200 + 12 * 60 * 60);\n+\n+        TypedObject unixTimestampC = NAryOperations.unixTimestamp(Arrays.asList(valueEvaluator(\"2021010100\"), valueEvaluator(\"yyyyMMddHH\")), null);\n+        long timeC = ((Number) unixTimestampC.getValue()).longValue();\n+        Assert.assertEquals(timeC, timeB);\n+\n+        TypedObject unixTimestampD = NAryOperations.unixTimestamp(Arrays.asList(valueEvaluator(2021010100), valueEvaluator(\"yyyyMMddHH\")), null);\n+        long timeD = ((Number) unixTimestampD.getValue()).longValue();\n+        Assert.assertEquals(timeD, timeB);\n+\n+        Assert.assertEquals(NAryOperations.unixTimestamp(Collections.singletonList(valueEvaluator(null)), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.unixTimestamp(Arrays.asList(valueEvaluator(null), valueEvaluator(\"yyyyMMddHH\")), null), TypedObject.NULL);\n+        Assert.assertEquals(NAryOperations.unixTimestamp(Arrays.asList(valueEvaluator(\"2021030519\"), valueEvaluator(null)), null), TypedObject.NULL);\n+    }\n }"
  },
  {
    "sha": "89de7ec420a8d04bb8288bc93ba42533be4ed809",
    "filename": "src/test/java/com/yahoo/bullet/querying/evaluators/UnaryOperationsTest.java",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/bullet-db/bullet-core/blob/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/querying/evaluators/UnaryOperationsTest.java",
    "raw_url": "https://github.com/bullet-db/bullet-core/raw/edee35454dee8965b6612da6ca6e001d3e3ae491/src/test/java/com/yahoo/bullet/querying/evaluators/UnaryOperationsTest.java",
    "contents_url": "https://api.github.com/repos/bullet-db/bullet-core/contents/src/test/java/com/yahoo/bullet/querying/evaluators/UnaryOperationsTest.java?ref=edee35454dee8965b6612da6ca6e001d3e3ae491",
    "patch": "@@ -49,4 +49,24 @@ public void testIsNotNull() {\n         Assert.assertEquals(UnaryOperations.isNotNull(valueEvaluator(1), null), TypedObject.TRUE);\n         Assert.assertEquals(UnaryOperations.isNotNull(valueEvaluator(null), null), TypedObject.FALSE);\n     }\n+\n+    @Test\n+    public void testTrim() {\n+        Assert.assertEquals(UnaryOperations.trim(valueEvaluator(\"hello\"), null), TypedObject.valueOf(\"hello\"));\n+        Assert.assertEquals(UnaryOperations.trim(valueEvaluator(\" hello \"), null), TypedObject.valueOf(\"hello\"));\n+        Assert.assertEquals(UnaryOperations.trim(valueEvaluator(null), null), TypedObject.NULL);\n+    }\n+\n+    @Test\n+    public void testAbs() {\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(2.0), null), TypedObject.valueOf(2.0));\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(-2.0), null), TypedObject.valueOf(2.0));\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(2.0f), null), TypedObject.valueOf(2.0f));\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(-2.0f), null), TypedObject.valueOf(2.0f));\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(2L), null), TypedObject.valueOf(2L));\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(-2L), null), TypedObject.valueOf(2L));\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(2), null), TypedObject.valueOf(2));\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(-2), null), TypedObject.valueOf(2));\n+        Assert.assertEquals(UnaryOperations.abs(valueEvaluator(null), null), TypedObject.NULL);\n+    }\n }"
  }
]
