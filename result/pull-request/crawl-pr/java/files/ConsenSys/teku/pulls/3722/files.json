[
  {
    "sha": "04dd574550eb1be2c411d175577bbe31257c3abe",
    "filename": "data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/v1/beacon/GetBlockAttestationsIntegrationTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/v1/beacon/GetBlockAttestationsIntegrationTest.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/v1/beacon/GetBlockAttestationsIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/v1/beacon/GetBlockAttestationsIntegrationTest.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -42,7 +42,7 @@ public void shouldGetBlockAttestations() throws IOException {\n         jsonProvider.jsonToObject(response.body().string(), GetBlockAttestationsResponse.class);\n     final List<Attestation> data = body.data;\n     final List<Attestation> attestations =\n-        created.get(0).getBlock().getMessage().getBody().getAttestations().asList().stream()\n+        created.get(0).getBlock().getMessage().getBody().getAttestations().stream()\n             .map(Attestation::new)\n             .collect(toList());\n     assertThat(data).isEqualTo(attestations);"
  },
  {
    "sha": "290ea689f3cab12a5be9adc63147ef1a2179011f",
    "filename": "data/provider/src/test/java/tech/pegasys/teku/api/ChainDataProviderTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/provider/src/test/java/tech/pegasys/teku/api/ChainDataProviderTest.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/provider/src/test/java/tech/pegasys/teku/api/ChainDataProviderTest.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/provider/src/test/java/tech/pegasys/teku/api/ChainDataProviderTest.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -317,7 +317,7 @@ public void filteredValidatorsList_shouldFilterByValidatorPubkey() {\n         data.randomBeaconState(1024);\n     final ChainDataProvider provider =\n         new ChainDataProvider(spec, recentChainData, combinedChainDataClient);\n-    final String key = internalState.getValidators().get(12).getPubkey().toString();\n+    final String key = internalState.getValidators().get(12).getPubkeyBytes().toString();\n     final String missingKey = data.randomPublicKey().toString();\n     List<String> pubkeys =\n         provider.getFilteredValidatorList(internalState, List.of(key, missingKey), emptySet())"
  },
  {
    "sha": "b189c3277986f03c92c7e90107571a82791d32ec",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorBalanceResponse.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorBalanceResponse.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorBalanceResponse.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorBalanceResponse.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -52,7 +52,7 @@ public ValidatorBalanceResponse(\n       return Optional.empty();\n     }\n     return Optional.of(\n-        new ValidatorBalanceResponse(UInt64.valueOf(index), state.getBalances().get(index)));\n+        new ValidatorBalanceResponse(UInt64.valueOf(index), state.getBalances().getElement(index)));\n   }\n \n   @Override"
  },
  {
    "sha": "9ff4946180dcc613eae40408ae3be90f900774ed",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -74,7 +74,7 @@ public ValidatorResponse(\n     return Optional.of(\n         new ValidatorResponse(\n             UInt64.valueOf(index),\n-            state.getBalances().get(index),\n+            state.getBalances().getElement(index),\n             getValidatorStatus(epoch, validatorInternal, farFutureEpoch),\n             new Validator(validatorInternal)));\n   }"
  },
  {
    "sha": "63799df61237e30eb5c8914002bf15221516f1c7",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconBlockBody.java",
    "status": "modified",
    "additions": 22,
    "deletions": 30,
    "changes": 52,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconBlockBody.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconBlockBody.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconBlockBody.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -24,8 +24,7 @@\n import java.util.stream.Collectors;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.spec.SpecVersion;\n-import tech.pegasys.teku.spec.constants.SpecConstants;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodySchema;\n \n public class BeaconBlockBody {\n   @Schema(type = \"string\", format = \"byte\", description = DESCRIPTION_BYTES96)\n@@ -86,34 +85,27 @@ public BeaconBlockBody(\n \n   public tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBody\n       asInternalBeaconBlockBody(final SpecVersion spec) {\n-    final SpecConstants constants = spec.getConstants();\n-    return spec.getSchemaDefinitions()\n-        .getBeaconBlockBodySchema()\n-        .createBlockBody(\n-            randao_reveal.asInternalBLSSignature(),\n-            new tech.pegasys.teku.spec.datastructures.blocks.Eth1Data(\n-                eth1_data.deposit_root, eth1_data.deposit_count, eth1_data.block_hash),\n-            graffiti,\n-            SSZList.createMutable(\n-                proposer_slashings.stream().map(ProposerSlashing::asInternalProposerSlashing),\n-                constants.getMaxProposerSlashings(),\n-                tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing.class),\n-            SSZList.createMutable(\n-                attester_slashings.stream().map(AttesterSlashing::asInternalAttesterSlashing),\n-                constants.getMaxAttesterSlashings(),\n-                tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing.class),\n-            SSZList.createMutable(\n-                attestations.stream().map(Attestation::asInternalAttestation),\n-                constants.getMaxAttestations(),\n-                tech.pegasys.teku.spec.datastructures.operations.Attestation.class),\n-            SSZList.createMutable(\n-                deposits.stream().map(Deposit::asInternalDeposit),\n-                constants.getMaxDeposits(),\n-                tech.pegasys.teku.spec.datastructures.operations.Deposit.class),\n-            SSZList.createMutable(\n-                voluntary_exits.stream().map(SignedVoluntaryExit::asInternalSignedVoluntaryExit),\n-                constants.getMaxVoluntaryExits(),\n-                tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit.class));\n+    BeaconBlockBodySchema<?> schema = spec.getSchemaDefinitions().getBeaconBlockBodySchema();\n+    return schema.createBlockBody(\n+        randao_reveal.asInternalBLSSignature(),\n+        new tech.pegasys.teku.spec.datastructures.blocks.Eth1Data(\n+            eth1_data.deposit_root, eth1_data.deposit_count, eth1_data.block_hash),\n+        graffiti,\n+        proposer_slashings.stream()\n+            .map(ProposerSlashing::asInternalProposerSlashing)\n+            .collect(schema.getProposerSlashingsSchema().collector()),\n+        attester_slashings.stream()\n+            .map(AttesterSlashing::asInternalAttesterSlashing)\n+            .collect(schema.getAttesterSlashingsSchema().collector()),\n+        attestations.stream()\n+            .map(Attestation::asInternalAttestation)\n+            .collect(schema.getAttestationsSchema().collector()),\n+        deposits.stream()\n+            .map(Deposit::asInternalDeposit)\n+            .collect(schema.getDepositsSchema().collector()),\n+        voluntary_exits.stream()\n+            .map(SignedVoluntaryExit::asInternalSignedVoluntaryExit)\n+            .collect(schema.getVoluntaryExitsSchema().collector()));\n   }\n \n   @Override"
  },
  {
    "sha": "b0ba25ce256a3ebc67f12716ca4fbb73e1f4a5d6",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconState.java",
    "status": "modified",
    "additions": 31,
    "deletions": 55,
    "changes": 86,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconState.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconState.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconState.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -15,10 +15,6 @@\n \n import static tech.pegasys.teku.api.schema.SchemaConstants.DESCRIPTION_BYTES32;\n import static tech.pegasys.teku.api.schema.SchemaConstants.DESCRIPTION_BYTES_SSZ;\n-import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_ETH1_VOTING_PERIOD;\n-import static tech.pegasys.teku.util.config.Constants.HISTORICAL_ROOTS_LIMIT;\n-import static tech.pegasys.teku.util.config.Constants.MAX_ATTESTATIONS;\n-import static tech.pegasys.teku.util.config.Constants.VALIDATOR_REGISTRY_LIMIT;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -31,11 +27,9 @@\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n import tech.pegasys.teku.spec.Spec;\n import tech.pegasys.teku.spec.datastructures.blocks.BeaconBlockAndState;\n+import tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconStateSchema;\n import tech.pegasys.teku.spec.datastructures.state.beaconstate.versions.phase0.BeaconStatePhase0;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZVector;\n import tech.pegasys.teku.ssz.backing.collections.SszBitvector;\n-import tech.pegasys.teku.util.config.Constants;\n \n public class BeaconState {\n   @Schema(type = \"string\", format = \"uint64\")\n@@ -148,18 +142,18 @@ public BeaconState(\n     this.slot = beaconState.getSlot();\n     this.fork = new Fork(beaconState.getFork());\n     this.latest_block_header = new BeaconBlockHeader(beaconState.getLatest_block_header());\n-    this.block_roots = beaconState.getBlock_roots().stream().collect(Collectors.toList());\n-    this.state_roots = beaconState.getState_roots().stream().collect(Collectors.toList());\n-    this.historical_roots = beaconState.getHistorical_roots().stream().collect(Collectors.toList());\n+    this.block_roots = beaconState.getBlock_roots().asListUnboxed();\n+    this.state_roots = beaconState.getState_roots().asListUnboxed();\n+    this.historical_roots = beaconState.getHistorical_roots().asListUnboxed();\n     this.eth1_data = new Eth1Data(beaconState.getEth1_data());\n     this.eth1_data_votes =\n         beaconState.getEth1_data_votes().stream().map(Eth1Data::new).collect(Collectors.toList());\n     this.eth1_deposit_index = beaconState.getEth1_deposit_index();\n     this.validators =\n         beaconState.getValidators().stream().map(Validator::new).collect(Collectors.toList());\n-    this.balances = beaconState.getBalances().stream().collect(Collectors.toList());\n-    this.randao_mixes = beaconState.getRandao_mixes().stream().collect(Collectors.toList());\n-    this.slashings = beaconState.getSlashings().stream().collect(Collectors.toList());\n+    this.balances = beaconState.getBalances().asListUnboxed();\n+    this.randao_mixes = beaconState.getRandao_mixes().asListUnboxed();\n+    this.slashings = beaconState.getSlashings().asListUnboxed();\n     this.justification_bits = beaconState.getJustification_bits();\n     this.previous_justified_checkpoint =\n         new Checkpoint(beaconState.getPrevious_justified_checkpoint());\n@@ -187,9 +181,9 @@ public BeaconState(\n \n   public tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState asInternalBeaconState(\n       final Spec spec) {\n-    return spec.atSlot(slot)\n-        .getSchemaDefinitions()\n-        .getBeaconStateSchema()\n+    final BeaconStateSchema<?, ?> schema =\n+        spec.atSlot(slot).getSchemaDefinitions().getBeaconStateSchema();\n+    return schema\n         .createEmpty()\n         .updated(\n             state -> {\n@@ -198,39 +192,29 @@ public BeaconState(\n               state.setSlot(slot);\n               state.setFork(fork.asInternalFork());\n               state.setLatest_block_header(latest_block_header.asInternalBeaconBlockHeader());\n-              state.getBlock_roots().setAll(SSZVector.createMutable(block_roots, Bytes32.class));\n-              state.getState_roots().setAll(SSZVector.createMutable(state_roots, Bytes32.class));\n-              state\n-                  .getHistorical_roots()\n-                  .setAll(\n-                      SSZList.createMutable(\n-                          historical_roots, HISTORICAL_ROOTS_LIMIT, Bytes32.class));\n+              state.getBlock_roots().setAllElements(block_roots);\n+              state.getState_roots().setAllElements(state_roots);\n+              state.getHistorical_roots().setAllElements(historical_roots);\n               state.setEth1_data(eth1_data.asInternalEth1Data());\n               state\n                   .getEth1_data_votes()\n                   .setAll(\n-                      SSZList.createMutable(\n-                          eth1_data_votes.stream()\n-                              .map(Eth1Data::asInternalEth1Data)\n-                              .collect(Collectors.toList()),\n-                          EPOCHS_PER_ETH1_VOTING_PERIOD,\n-                          tech.pegasys.teku.spec.datastructures.blocks.Eth1Data.class));\n+                      eth1_data_votes.stream()\n+                          .map(Eth1Data::asInternalEth1Data)\n+                          .collect(Collectors.toList()));\n               state.setEth1_deposit_index(eth1_deposit_index);\n               state\n                   .getValidators()\n                   .setAll(\n-                      SSZList.createMutable(\n-                          validators.stream()\n-                              .map(Validator::asInternalValidator)\n-                              .collect(Collectors.toList()),\n-                          Constants.VALIDATOR_REGISTRY_LIMIT,\n-                          tech.pegasys.teku.spec.datastructures.state.Validator.class));\n-              state\n-                  .getBalances()\n-                  .setAll(SSZList.createMutable(balances, VALIDATOR_REGISTRY_LIMIT, UInt64.class));\n-              state.getRandao_mixes().setAll(SSZVector.createMutable(randao_mixes, Bytes32.class));\n-              state.getSlashings().setAll(SSZVector.createMutable(slashings, UInt64.class));\n-              state.setJustification_bits(justification_bits);\n+                      validators.stream()\n+                          .map(Validator::asInternalValidator)\n+                          .collect(Collectors.toList()));\n+              state.getBalances().setAllElements(balances);\n+              state.getRandao_mixes().setAllElements(randao_mixes);\n+              state.getSlashings().setAllElements(slashings);\n+              SszBitvector newJustificationBits =\n+                  schema.getJustificationBitsSchema().ofBits(justification_bits.getAllSetBits());\n+              state.setJustification_bits(newJustificationBits);\n               state.setPrevious_justified_checkpoint(\n                   previous_justified_checkpoint.asInternalCheckpoint());\n               state.setCurrent_justified_checkpoint(\n@@ -244,23 +228,15 @@ public BeaconState(\n                         genesisState\n                             .getPrevious_epoch_attestations()\n                             .setAll(\n-                                SSZList.createMutable(\n-                                    previous_epoch_attestations.stream()\n-                                        .map(PendingAttestation::asInternalPendingAttestation)\n-                                        .collect(Collectors.toList()),\n-                                    MAX_ATTESTATIONS,\n-                                    tech.pegasys.teku.spec.datastructures.state.PendingAttestation\n-                                        .class));\n+                                previous_epoch_attestations.stream()\n+                                    .map(PendingAttestation::asInternalPendingAttestation)\n+                                    .collect(Collectors.toList()));\n                         genesisState\n                             .getCurrent_epoch_attestations()\n                             .setAll(\n-                                SSZList.createMutable(\n-                                    current_epoch_attestations.stream()\n-                                        .map(PendingAttestation::asInternalPendingAttestation)\n-                                        .collect(Collectors.toList()),\n-                                    MAX_ATTESTATIONS,\n-                                    tech.pegasys.teku.spec.datastructures.state.PendingAttestation\n-                                        .class));\n+                                current_epoch_attestations.stream()\n+                                    .map(PendingAttestation::asInternalPendingAttestation)\n+                                    .collect(Collectors.toList()));\n                       });\n             });\n   }"
  },
  {
    "sha": "c841881bd297efe09b3d7659ccb94683b2c6c06a",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconValidators.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconValidators.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconValidators.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconValidators.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -54,7 +54,7 @@ public BeaconValidators(\n       final int pageToken) {\n     this(\n         state.getValidators().stream().map(Validator::new).collect(Collectors.toList()),\n-        state.getBalances().stream().collect(Collectors.toList()),\n+        state.getBalances().streamUnboxed().collect(Collectors.toList()),\n         activeOnly,\n         epoch,\n         pageSize,"
  },
  {
    "sha": "0273b915a8ca2093c1aecf4b0a57576817a65f7b",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/Deposit.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/Deposit.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/Deposit.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/schema/Deposit.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -23,7 +23,6 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZVector;\n \n public class Deposit {\n   @ArraySchema(\n@@ -33,7 +32,7 @@\n   public final DepositData data;\n \n   public Deposit(tech.pegasys.teku.spec.datastructures.operations.Deposit deposit) {\n-    this.proof = deposit.getProof().stream().collect(Collectors.toList());\n+    this.proof = deposit.getProof().streamUnboxed().collect(Collectors.toList());\n     this.data = new DepositData(deposit.getData());\n   }\n \n@@ -47,7 +46,10 @@ public Deposit(\n \n   public tech.pegasys.teku.spec.datastructures.operations.Deposit asInternalDeposit() {\n     return new tech.pegasys.teku.spec.datastructures.operations.Deposit(\n-        SSZVector.createMutable(proof, Bytes32.class), data.asInternalDepositData());\n+        tech.pegasys.teku.spec.datastructures.operations.Deposit.SSZ_SCHEMA\n+            .getProofSchema()\n+            .of(proof),\n+        data.asInternalDepositData());\n   }\n \n   @Override"
  },
  {
    "sha": "2e7eb53592f7c3fabdb577f0922534f9638b94ed",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/IndexedAttestation.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/IndexedAttestation.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/IndexedAttestation.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/schema/IndexedAttestation.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -14,7 +14,6 @@\n package tech.pegasys.teku.api.schema;\n \n import static tech.pegasys.teku.api.schema.SchemaConstants.DESCRIPTION_BYTES96;\n-import static tech.pegasys.teku.util.config.Constants.MAX_VALIDATORS_PER_COMMITTEE;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -24,7 +23,6 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n \n public class IndexedAttestation {\n   @ArraySchema(schema = @Schema(type = \"string\", format = \"uint64\"))\n@@ -38,7 +36,7 @@\n   public IndexedAttestation(\n       tech.pegasys.teku.spec.datastructures.operations.IndexedAttestation indexedAttestation) {\n     this.attesting_indices =\n-        indexedAttestation.getAttesting_indices().stream().collect(Collectors.toList());\n+        indexedAttestation.getAttesting_indices().streamUnboxed().collect(Collectors.toList());\n     this.data = new AttestationData(indexedAttestation.getData());\n     this.signature = new BLSSignature(indexedAttestation.getSignature());\n   }\n@@ -56,7 +54,9 @@ public IndexedAttestation(\n   public tech.pegasys.teku.spec.datastructures.operations.IndexedAttestation\n       asInternalIndexedAttestation() {\n     return new tech.pegasys.teku.spec.datastructures.operations.IndexedAttestation(\n-        SSZList.createMutable(attesting_indices, MAX_VALIDATORS_PER_COMMITTEE, UInt64.class),\n+        tech.pegasys.teku.spec.datastructures.operations.IndexedAttestation.SSZ_SCHEMA\n+            .getAttestingIndicesSchema()\n+            .of(attesting_indices),\n         data.asInternalAttestationData(),\n         signature.asInternalBLSSignature());\n   }"
  },
  {
    "sha": "9288579c501d2b725476f57b8ca24b324598f858",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/Validator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/Validator.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/main/java/tech/pegasys/teku/api/schema/Validator.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/schema/Validator.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -94,7 +94,7 @@ public Validator(\n   }\n \n   public Validator(final tech.pegasys.teku.spec.datastructures.state.Validator validator) {\n-    this.pubkey = new BLSPubKey(validator.getPubkey());\n+    this.pubkey = new BLSPubKey(validator.getPubkeyBytes());\n     this.withdrawal_credentials = validator.getWithdrawal_credentials();\n     this.effective_balance = validator.getEffective_balance();\n     this.slashed = validator.isSlashed();"
  },
  {
    "sha": "6d36ab1f111056fece988a20b6e0687bdd06e72f",
    "filename": "data/serializer/src/test/java/tech/pegasys/teku/api/schema/BeaconValidatorsTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/test/java/tech/pegasys/teku/api/schema/BeaconValidatorsTest.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/data/serializer/src/test/java/tech/pegasys/teku/api/schema/BeaconValidatorsTest.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/test/java/tech/pegasys/teku/api/schema/BeaconValidatorsTest.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -28,7 +28,7 @@\n import tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState;\n import tech.pegasys.teku.spec.logic.common.util.BeaconStateUtil;\n import tech.pegasys.teku.spec.util.DataStructureUtil;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.backing.SszList;\n import tech.pegasys.teku.util.config.Constants;\n \n class BeaconValidatorsTest {\n@@ -40,7 +40,7 @@\n   @Test\n   public void validatorsResponseShouldConformToDefaults() {\n     BeaconState beaconState = dataStructureUtil.randomBeaconState();\n-    SSZList<Validator> validatorList = beaconState.getValidators();\n+    SszList<Validator> validatorList = beaconState.getValidators();\n     BeaconValidators response = new BeaconValidators(beaconState, FAR_FUTURE_EPOCH);\n     assertThat(response.total_size).isEqualTo(beaconState.getValidators().size());\n     assertThat(response.validators.size())\n@@ -130,7 +130,7 @@ public void returnEmptyListIfPageParamsOutOfBounds() {\n   @Test\n   public void returnRemainderIfEdgeCasePageParams() {\n     BeaconState beaconState = dataStructureUtil.randomBeaconState();\n-    final SSZList<Validator> validators = beaconState.getValidators();\n+    final SszList<Validator> validators = beaconState.getValidators();\n     final int validatorsSize = validators.size();\n     final int suppliedPageSizeParam = validatorsSize / 10 - 1;\n     final int suppliedPageTokenParam = 11;\n@@ -157,7 +157,7 @@ public void getActiveValidatorsCount() {\n \n     System.out.println(beaconState.hashTreeRoot());\n \n-    SSZList<Validator> allValidators = beaconState.getValidators();\n+    SszList<Validator> allValidators = beaconState.getValidators();\n     long originalActiveValidatorCount =\n         BeaconValidators.getEffectiveListSize(\n             getValidators(beaconState),\n@@ -175,7 +175,7 @@ public void getActiveValidatorsCount() {\n             .withActivation_eligibility_epoch(UInt64.ZERO)\n             .withActivation_epoch(GENESIS_EPOCH);\n \n-    BeaconState beaconStateW = beaconState.updated(state -> state.getValidators().add(v));\n+    BeaconState beaconStateW = beaconState.updated(state -> state.getValidators().append(v));\n \n     int updatedValidatorCount = beaconStateW.getValidators().size();\n     long updatedActiveValidatorCount =\n@@ -184,7 +184,7 @@ public void getActiveValidatorsCount() {\n             true,\n             beaconStateUtil.computeEpochAtSlot(beaconStateW.getSlot()));\n \n-    SSZList<Validator> updatedValidators = beaconStateW.getValidators();\n+    SszList<Validator> updatedValidators = beaconStateW.getValidators();\n \n     assertThat(updatedValidators).contains(v);\n     assertThat(beaconStateW.getValidators()).contains(v);"
  },
  {
    "sha": "d74bd4b6703edd6a90751425381e57c2d6c95b17",
    "filename": "eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/ProfilingRun.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/ProfilingRun.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/ProfilingRun.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/ProfilingRun.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -85,10 +85,11 @@ public void importBlocks() throws Exception {\n \n     while (true) {\n       EventBus localEventBus = mock(EventBus.class);\n-      RecentChainData recentChainData = MemoryOnlyRecentChainData.create(localEventBus);\n-      BeaconChainUtil localChain = BeaconChainUtil.create(recentChainData, validatorKeys, false);\n+      RecentChainData recentChainData = MemoryOnlyRecentChainData.create(spec, localEventBus);\n       recentChainData.initializeFromGenesis(initialState, UInt64.ZERO);\n       ForkChoice forkChoice = ForkChoice.create(spec, new InlineEventThread(), recentChainData);\n+      BeaconChainUtil localChain =\n+          BeaconChainUtil.create(spec, recentChainData, validatorKeys, false);\n       BlockImporter blockImporter =\n           new BlockImporter(recentChainData, forkChoice, wsValidator, localEventBus);\n "
  },
  {
    "sha": "3c076d669ca47a9fcc675ca5ec1451fecd557bc1",
    "filename": "eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/TransitionBenchmark.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/TransitionBenchmark.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/TransitionBenchmark.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/TransitionBenchmark.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -86,10 +86,10 @@ public void init() throws Exception {\n     spec = SpecFactory.createMainnet();\n     wsValidator = WeakSubjectivityFactory.lenientValidator();\n     recentChainData = MemoryOnlyRecentChainData.create(spec, localEventBus);\n+    ForkChoice forkChoice = ForkChoice.create(spec, new InlineEventThread(), recentChainData);\n     localChain = BeaconChainUtil.create(spec, recentChainData, validatorKeys, false);\n     localChain.initializeStorage();\n \n-    ForkChoice forkChoice = ForkChoice.create(spec, new InlineEventThread(), recentChainData);\n     blockImporter = new BlockImporter(recentChainData, forkChoice, wsValidator, localEventBus);\n     blockIterator = BlockIO.createResourceReader(blocksFile).iterator();\n     System.out.println(\"Importing blocks from \" + blocksFile);"
  },
  {
    "sha": "38688940e243bac4c54f22e32387406d42e494b3",
    "filename": "eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/CustomRunner.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/CustomRunner.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/CustomRunner.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/CustomRunner.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.benchmarks.util;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+public class CustomRunner {\n+\n+  public static class RunResult {\n+    private final long nanos;\n+    private final long operationsCount;\n+\n+    public RunResult(long nanos, long operationsCount) {\n+      this.nanos = nanos;\n+      this.operationsCount = operationsCount;\n+    }\n+\n+    public double getOperationsPerSecond() {\n+      return operationsCount * 1_000_000_000d / nanos;\n+    }\n+\n+    public double getNanosPerOperations() {\n+      return ((double) nanos) / operationsCount;\n+    }\n+  }\n+\n+  private final Blackhole blackhole =\n+      new Blackhole(\n+          \"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n+  private final Map<String, Consumer<Blackhole>> benches = new LinkedHashMap<>();\n+  private int runIterations = 10;\n+  private int runsCount = 10;\n+\n+  public CustomRunner(int runIterations, int runsCount) {\n+    this.runIterations = runIterations;\n+    this.runsCount = runsCount;\n+  }\n+\n+  public CustomRunner withBench(String name, Consumer<Blackhole> bench) {\n+    benches.put(name, bench);\n+    return this;\n+  }\n+\n+  public CustomRunner withBench(Consumer<Blackhole> bench) {\n+    benches.put(\"bench-\" + benches.size(), bench);\n+    return this;\n+  }\n+\n+  public void run() {\n+    benches.forEach(\n+        (name, bench) -> {\n+          System.out.println(name);\n+          for (int i = 0; i < runsCount; i++) {\n+            RunResult result = runSingle(bench);\n+            System.out.printf(\"  %.2f ops/sec\\n\", result.getOperationsPerSecond());\n+          }\n+        });\n+  }\n+\n+  private RunResult runSingle(Consumer<Blackhole> bench) {\n+    long start = System.nanoTime();\n+    int iterations = runIterations;\n+    while (true) {\n+      bench.accept(blackhole);\n+\n+      if (iterations-- == 0) {\n+        break;\n+      }\n+    }\n+    return new RunResult(System.nanoTime() - start, runIterations);\n+  }\n+}"
  },
  {
    "sha": "36f5ad8ea8bcdefa3fdec8eb597d73ace8b47480",
    "filename": "eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/backing/BeaconStateBenchmark.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/backing/BeaconStateBenchmark.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/backing/BeaconStateBenchmark.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/backing/BeaconStateBenchmark.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -55,7 +55,7 @@ public void iterateValidators(Blackhole bh) {\n   public void iterateValidatorsWithMethods(Blackhole bh) {\n     for (Validator validator : beaconState.getValidators()) {\n       bh.consume(validator.isSlashed());\n-      bh.consume(validator.getPubkey());\n+      bh.consume(validator.getPubkeyBytes());\n       bh.consume(validator.getEffective_balance());\n       bh.consume(validator.getActivation_epoch());\n       bh.consume(validator.getExit_epoch());\n@@ -67,7 +67,7 @@ public void iterateValidatorsWithMethods(Blackhole bh) {\n   @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n   @Measurement(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n   public void iterateBalances(Blackhole bh) {\n-    for (UInt64 balance : beaconState.getBalances()) {\n+    for (UInt64 balance : beaconState.getBalances().asListUnboxed()) {\n       bh.consume(balance);\n     }\n   }\n@@ -82,7 +82,7 @@ public void updateBalancesAndHash(Blackhole bh) {\n               int size = state.getBalances().size();\n               UInt64 balance = UInt64.valueOf(777);\n               for (int i = 0; i < size; i++) {\n-                state.getBalances().set(i, balance);\n+                state.getBalances().setElement(i, balance);\n               }\n             });\n     bh.consume(stateW.hashTreeRoot());"
  },
  {
    "sha": "3481cf556493e98878de41d8f7b156c27476be54",
    "filename": "eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/backing/ListBenchmark.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/backing/ListBenchmark.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/backing/ListBenchmark.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/util/backing/ListBenchmark.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -50,7 +50,7 @@ public ListBenchmark() {\n \n     SszMutableList<SszUInt64> l2w = l1.createWritableCopy();\n     for (int i = 0; i < 1000000; i++) {\n-      l2w.append(new SszUInt64(UInt64.valueOf(1121212)));\n+      l2w.append(SszUInt64.of(UInt64.valueOf(1121212)));\n     }\n     l2r = l2w.commitChanges();\n \n@@ -81,15 +81,15 @@ public void createDefaultUIntList(Blackhole bh) {\n   @Warmup(iterations = 5, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n   @Measurement(iterations = 5, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n   public void append(Blackhole bh) {\n-    l1w.append(new SszUInt64(UInt64.valueOf(1121212)));\n+    l1w.append(SszUInt64.of(UInt64.valueOf(1121212)));\n   }\n \n   @Benchmark\n   @Warmup(iterations = 5, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n   @Measurement(iterations = 5, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n   public void incrementalHash(Blackhole bh) {\n     SszMutableList<SszUInt64> l2w = l2r.createWritableCopy();\n-    l2w.set(12345, new SszUInt64(UInt64.valueOf(77777)));\n+    l2w.set(12345, SszUInt64.of(UInt64.valueOf(77777)));\n     SszList<SszUInt64> l2r_ = l2w.commitChanges();\n     l2r_.hashTreeRoot();\n   }"
  },
  {
    "sha": "f3b15aedcbfd2eb55e8f0104aef96e48baa09647",
    "filename": "eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/operations/DefaultOperationProcessor.java",
    "status": "modified",
    "additions": 10,
    "deletions": 6,
    "changes": 16,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/operations/DefaultOperationProcessor.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/operations/DefaultOperationProcessor.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/operations/DefaultOperationProcessor.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -14,6 +14,7 @@\n package tech.pegasys.teku.reference.phase0.operations;\n \n import tech.pegasys.teku.spec.Spec;\n+import tech.pegasys.teku.spec.datastructures.blocks.BeaconBlockBody;\n import tech.pegasys.teku.spec.datastructures.blocks.BeaconBlockSummary;\n import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n@@ -22,7 +23,6 @@\n import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n import tech.pegasys.teku.spec.datastructures.state.beaconstate.MutableBeaconState;\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.BlockProcessingException;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n \n public class DefaultOperationProcessor implements OperationProcessor {\n   private final Spec spec;\n@@ -35,14 +35,16 @@ public DefaultOperationProcessor(final Spec spec) {\n   public void processAttesterSlashing(\n       final MutableBeaconState state, final AttesterSlashing attesterSlashings)\n       throws BlockProcessingException {\n-    spec.processAttesterSlashings(state, SSZList.singleton(attesterSlashings));\n+    spec.processAttesterSlashings(\n+        state, BeaconBlockBody.getSszSchema().getAttesterSlashingsSchema().of(attesterSlashings));\n   }\n \n   @Override\n   public void processProposerSlashing(\n       final MutableBeaconState state, final ProposerSlashing proposerSlashing)\n       throws BlockProcessingException {\n-    spec.processProposerSlashings(state, SSZList.singleton(proposerSlashing));\n+    spec.processProposerSlashings(\n+        state, BeaconBlockBody.getSszSchema().getProposerSlashingsSchema().of(proposerSlashing));\n   }\n \n   @Override\n@@ -55,19 +57,21 @@ public void processBlockHeader(\n   @Override\n   public void processDeposit(final MutableBeaconState state, final Deposit deposit)\n       throws BlockProcessingException {\n-    spec.processDeposits(state, SSZList.singleton(deposit));\n+    spec.processDeposits(state, BeaconBlockBody.getSszSchema().getDepositsSchema().of(deposit));\n   }\n \n   @Override\n   public void processVoluntaryExit(\n       final MutableBeaconState state, final SignedVoluntaryExit voluntaryExit)\n       throws BlockProcessingException {\n-    spec.processVoluntaryExits(state, SSZList.singleton(voluntaryExit));\n+    spec.processVoluntaryExits(\n+        state, BeaconBlockBody.getSszSchema().getVoluntaryExitsSchema().of(voluntaryExit));\n   }\n \n   @Override\n   public void processAttestation(final MutableBeaconState state, final Attestation attestation)\n       throws BlockProcessingException {\n-    spec.processAttestations(state, SSZList.singleton(attestation));\n+    spec.processAttestations(\n+        state, BeaconBlockBody.getSszSchema().getAttestationsSchema().of(attestation));\n   }\n }"
  },
  {
    "sha": "aac26b9cd911a489bea7924c74d959a8dd3223c3",
    "filename": "ethereum/core/src/test/java/tech/pegasys/teku/core/fuzz/FuzzRegressionTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/core/src/test/java/tech/pegasys/teku/core/fuzz/FuzzRegressionTest.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/core/src/test/java/tech/pegasys/teku/core/fuzz/FuzzRegressionTest.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/core/src/test/java/tech/pegasys/teku/core/fuzz/FuzzRegressionTest.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -23,9 +23,10 @@\n import tech.pegasys.teku.spec.SpecFactory;\n import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n import tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState;\n+import tech.pegasys.teku.spec.datastructures.util.BeaconBlockBodyLists;\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.BlockProcessingException;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n import tech.pegasys.teku.ssz.backing.SszData;\n+import tech.pegasys.teku.ssz.backing.SszList;\n import tech.pegasys.teku.ssz.backing.schema.SszSchema;\n \n public class FuzzRegressionTest {\n@@ -37,12 +38,12 @@ void shouldRejectAttesterSlashingWithInvalidValidatorIndex() throws Exception {\n         load(\"issue2345/state.ssz\", spec.getGenesisSchemaDefinitions().getBeaconStateSchema());\n     final AttesterSlashing slashing =\n         load(\"issue2345/attester_slashing.ssz\", AttesterSlashing.SSZ_SCHEMA);\n+    SszList<AttesterSlashing> slashings = BeaconBlockBodyLists.createAttesterSlashings(slashing);\n \n     assertThatThrownBy(\n             () ->\n                 state.updated(\n-                    mutableState ->\n-                        spec.processAttesterSlashings(mutableState, SSZList.singleton(slashing))))\n+                    mutableState -> spec.processAttesterSlashings(mutableState, slashings)))\n         .isInstanceOf(BlockProcessingException.class);\n   }\n "
  },
  {
    "sha": "0755fcf4eaaa45c543a0e11d19e9034dd0f01522",
    "filename": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/BlockProposalTestUtil.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/BlockProposalTestUtil.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/BlockProposalTestUtil.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/BlockProposalTestUtil.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -40,7 +40,7 @@\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.EpochProcessingException;\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.SlotProcessingException;\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.StateTransitionException;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.backing.SszList;\n \n public class BlockProposalTestUtil {\n   private final Spec spec;\n@@ -55,10 +55,10 @@ public SignedBlockAndState createNewBlock(\n       final BeaconState state,\n       final Bytes32 parentBlockSigningRoot,\n       final Eth1Data eth1Data,\n-      final SSZList<Attestation> attestations,\n-      final SSZList<ProposerSlashing> slashings,\n-      final SSZList<Deposit> deposits,\n-      final SSZList<SignedVoluntaryExit> exits)\n+      final SszList<Attestation> attestations,\n+      final SszList<ProposerSlashing> slashings,\n+      final SszList<Deposit> deposits,\n+      final SszList<SignedVoluntaryExit> exits)\n       throws StateTransitionException, EpochProcessingException, SlotProcessingException {\n \n     final UInt64 newEpoch = compute_epoch_at_slot(newSlot);\n@@ -94,9 +94,9 @@ public SignedBlockAndState createBlock(\n       final UInt64 newSlot,\n       final BeaconState previousState,\n       final Bytes32 parentBlockSigningRoot,\n-      final Optional<SSZList<Attestation>> attestations,\n-      final Optional<SSZList<Deposit>> deposits,\n-      final Optional<SSZList<SignedVoluntaryExit>> exits,\n+      final Optional<SszList<Attestation>> attestations,\n+      final Optional<SszList<Deposit>> deposits,\n+      final Optional<SszList<SignedVoluntaryExit>> exits,\n       final Optional<Eth1Data> eth1Data)\n       throws StateTransitionException, EpochProcessingException, SlotProcessingException {\n     final UInt64 newEpoch = compute_epoch_at_slot(newSlot);"
  },
  {
    "sha": "a70e5bcde8e7ca4ec4b685597db061539afaec5b",
    "filename": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/ChainBuilder.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/ChainBuilder.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/ChainBuilder.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/ChainBuilder.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -51,8 +51,8 @@\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.EpochProcessingException;\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.SlotProcessingException;\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.StateTransitionException;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.ssz.backing.SszList;\n+import tech.pegasys.teku.ssz.backing.SszMutableList;\n import tech.pegasys.teku.util.config.Constants;\n \n /** A utility for building small, valid chains of blocks with states for testing */\n@@ -408,7 +408,8 @@ private Signer getSigner(final int proposerIndex) {\n   }\n \n   public static final class BlockOptions {\n-    private SSZMutableList<Attestation> attestations = BeaconBlockBodyLists.createAttestations();\n+    private SszMutableList<Attestation> attestations =\n+        BeaconBlockBodyLists.createAttestations().createWritableCopy();\n     private Optional<Eth1Data> eth1Data = Optional.empty();\n \n     private BlockOptions() {}\n@@ -418,7 +419,7 @@ public static BlockOptions create() {\n     }\n \n     public BlockOptions addAttestation(final Attestation attestation) {\n-      attestations.add(attestation);\n+      attestations.append(attestation);\n       return this;\n     }\n \n@@ -427,7 +428,7 @@ public BlockOptions setEth1Data(final Eth1Data eth1Data) {\n       return this;\n     }\n \n-    private SSZList<Attestation> getAttestations() {\n+    private SszList<Attestation> getAttestations() {\n       return attestations;\n     }\n "
  },
  {
    "sha": "71075072d42b51dd3e75c79b4fb8c8952ddfe912",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/Spec.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/Spec.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/Spec.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/Spec.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -54,7 +54,7 @@\n import tech.pegasys.teku.spec.logic.common.util.BlockProcessorUtil;\n import tech.pegasys.teku.spec.schemas.SchemaDefinitions;\n import tech.pegasys.teku.ssz.SSZTypes.Bytes4;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.backing.SszList;\n import tech.pegasys.teku.ssz.backing.collections.SszBitlist;\n \n public class Spec {\n@@ -341,11 +341,11 @@ public BeaconBlockAndState createNewUnsignedBlock(\n       final Bytes32 parentBlockSigningRoot,\n       final Eth1Data eth1Data,\n       final Bytes32 graffiti,\n-      final SSZList<Attestation> attestations,\n-      final SSZList<ProposerSlashing> proposerSlashings,\n-      final SSZList<AttesterSlashing> attesterSlashings,\n-      final SSZList<Deposit> deposits,\n-      final SSZList<SignedVoluntaryExit> voluntaryExits)\n+      final SszList<Attestation> attestations,\n+      final SszList<ProposerSlashing> proposerSlashings,\n+      final SszList<AttesterSlashing> attesterSlashings,\n+      final SszList<Deposit> deposits,\n+      final SszList<SignedVoluntaryExit> voluntaryExits)\n       throws StateTransitionException {\n     return atSlot(newSlot)\n         .getBlockProposalUtil()\n@@ -371,38 +371,38 @@ public void processBlockHeader(MutableBeaconState state, BeaconBlockSummary bloc\n   }\n \n   public void processProposerSlashings(\n-      MutableBeaconState state, SSZList<ProposerSlashing> proposerSlashings)\n+      MutableBeaconState state, SszList<ProposerSlashing> proposerSlashings)\n       throws BlockProcessingException {\n     atState(state).getBlockProcessorUtil().processProposerSlashings(state, proposerSlashings);\n   }\n \n   public void processAttesterSlashings(\n-      MutableBeaconState state, SSZList<AttesterSlashing> attesterSlashings)\n+      MutableBeaconState state, SszList<AttesterSlashing> attesterSlashings)\n       throws BlockProcessingException {\n     atState(state).getBlockProcessorUtil().processAttesterSlashings(state, attesterSlashings);\n   }\n \n-  public void processAttestations(MutableBeaconState state, SSZList<Attestation> attestations)\n+  public void processAttestations(MutableBeaconState state, SszList<Attestation> attestations)\n       throws BlockProcessingException {\n     atState(state).getBlockProcessorUtil().processAttestations(state, attestations);\n   }\n \n   public void processAttestations(\n       MutableBeaconState state,\n-      SSZList<Attestation> attestations,\n+      SszList<Attestation> attestations,\n       IndexedAttestationCache indexedAttestationCache)\n       throws BlockProcessingException {\n     atState(state)\n         .getBlockProcessorUtil()\n         .processAttestations(state, attestations, indexedAttestationCache);\n   }\n \n-  public void processDeposits(MutableBeaconState state, SSZList<? extends Deposit> deposits)\n+  public void processDeposits(MutableBeaconState state, SszList<? extends Deposit> deposits)\n       throws BlockProcessingException {\n     atState(state).getBlockProcessorUtil().processDeposits(state, deposits);\n   }\n \n-  public void processVoluntaryExits(MutableBeaconState state, SSZList<SignedVoluntaryExit> exits)\n+  public void processVoluntaryExits(MutableBeaconState state, SszList<SignedVoluntaryExit> exits)\n       throws BlockProcessingException {\n     atState(state).getBlockProcessorUtil().processVoluntaryExits(state, exits);\n   }"
  },
  {
    "sha": "a5bcc480d0ae804292e9ea2eb0aa25f657fd51e2",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlock.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlock.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlock.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlock.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -86,10 +86,10 @@ public BeaconBlock(\n       BeaconBlockBody body) {\n     super(\n         type,\n-        new SszUInt64(slot),\n-        new SszUInt64(proposer_index),\n-        new SszBytes32(parent_root),\n-        new SszBytes32(state_root),\n+        SszUInt64.of(slot),\n+        SszUInt64.of(proposer_index),\n+        SszBytes32.of(parent_root),\n+        SszBytes32.of(state_root),\n         body);\n   }\n "
  },
  {
    "sha": "b24a0a358219cab75186f2c270b23ddf4bbf5447",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlockBody.java",
    "status": "added",
    "additions": 202,
    "deletions": 0,
    "changes": 202,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlockBody.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlockBody.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlockBody.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n+import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n+import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignatureSchema;\n+import tech.pegasys.teku.ssz.backing.SszList;\n+import tech.pegasys.teku.ssz.backing.containers.Container8;\n+import tech.pegasys.teku.ssz.backing.containers.ContainerSchema8;\n+import tech.pegasys.teku.ssz.backing.schema.SszListSchema;\n+import tech.pegasys.teku.ssz.backing.schema.SszPrimitiveSchemas;\n+import tech.pegasys.teku.ssz.backing.tree.TreeNode;\n+import tech.pegasys.teku.ssz.backing.view.SszPrimitives.SszBytes32;\n+import tech.pegasys.teku.util.config.Constants;\n+import tech.pegasys.teku.util.config.SpecDependent;\n+\n+/** A Beacon block body */\n+public class BeaconBlockBody\n+    extends Container8<\n+        BeaconBlockBody,\n+        SszSignature,\n+        Eth1Data,\n+        SszBytes32,\n+        SszList<ProposerSlashing>,\n+        SszList<AttesterSlashing>,\n+        SszList<Attestation>,\n+        SszList<Deposit>,\n+        SszList<SignedVoluntaryExit>> {\n+\n+  public static class BeaconBlockBodySchema\n+      extends ContainerSchema8<\n+          BeaconBlockBody,\n+          SszSignature,\n+          Eth1Data,\n+          SszBytes32,\n+          SszList<ProposerSlashing>,\n+          SszList<AttesterSlashing>,\n+          SszList<Attestation>,\n+          SszList<Deposit>,\n+          SszList<SignedVoluntaryExit>> {\n+\n+    public BeaconBlockBodySchema() {\n+      super(\n+          \"BeaconBlockBody\",\n+          namedSchema(\"randao_reveal\", SszSignatureSchema.INSTANCE),\n+          namedSchema(\"eth1_data\", Eth1Data.SSZ_SCHEMA),\n+          namedSchema(\"graffiti\", SszPrimitiveSchemas.BYTES32_SCHEMA),\n+          namedSchema(\n+              \"proposer_slashings\",\n+              SszListSchema.create(ProposerSlashing.SSZ_SCHEMA, Constants.MAX_PROPOSER_SLASHINGS)),\n+          namedSchema(\n+              \"attester_slashings\",\n+              SszListSchema.create(AttesterSlashing.SSZ_SCHEMA, Constants.MAX_ATTESTER_SLASHINGS)),\n+          namedSchema(\n+              \"attestations\",\n+              SszListSchema.create(Attestation.SSZ_SCHEMA, Constants.MAX_ATTESTATIONS)),\n+          namedSchema(\"deposits\", SszListSchema.create(Deposit.SSZ_SCHEMA, Constants.MAX_DEPOSITS)),\n+          namedSchema(\n+              \"voluntary_exits\",\n+              SszListSchema.create(SignedVoluntaryExit.SSZ_SCHEMA, Constants.MAX_VOLUNTARY_EXITS)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public SszListSchema<ProposerSlashing, ?> getProposerSlashingsSchema() {\n+      return (SszListSchema<ProposerSlashing, ?>) getFieldSchema3();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public SszListSchema<AttesterSlashing, ?> getAttesterSlashingsSchema() {\n+      return (SszListSchema<AttesterSlashing, ?>) getFieldSchema4();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public SszListSchema<Attestation, ?> getAttestationsSchema() {\n+      return (SszListSchema<Attestation, ?>) getFieldSchema5();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public SszListSchema<Deposit, ?> getDepositsSchema() {\n+      return (SszListSchema<Deposit, ?>) getFieldSchema6();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public SszListSchema<SignedVoluntaryExit, ?> getVoluntaryExitsSchema() {\n+      return (SszListSchema<SignedVoluntaryExit, ?>) getFieldSchema7();\n+    }\n+\n+    @Override\n+    public BeaconBlockBody createFromBackingNode(TreeNode node) {\n+      return new BeaconBlockBody(this, node);\n+    }\n+  }\n+\n+  public static BeaconBlockBodySchema getSszSchema() {\n+    return SSZ_SCHEMA.get();\n+  }\n+\n+  public static final SpecDependent<BeaconBlockBodySchema> SSZ_SCHEMA =\n+      SpecDependent.of(BeaconBlockBodySchema::new);\n+\n+  private BeaconBlockBody(BeaconBlockBodySchema type, TreeNode backingNode) {\n+    super(type, backingNode);\n+  }\n+\n+  @Deprecated // Use the constructor with type\n+  public BeaconBlockBody(\n+      BLSSignature randao_reveal,\n+      Eth1Data eth1_data,\n+      Bytes32 graffiti,\n+      SszList<ProposerSlashing> proposer_slashings,\n+      SszList<AttesterSlashing> attester_slashings,\n+      SszList<Attestation> attestations,\n+      SszList<Deposit> deposits,\n+      SszList<SignedVoluntaryExit> voluntary_exits) {\n+    this(\n+        SSZ_SCHEMA.get(),\n+        randao_reveal,\n+        eth1_data,\n+        graffiti,\n+        proposer_slashings,\n+        attester_slashings,\n+        attestations,\n+        deposits,\n+        voluntary_exits);\n+  }\n+\n+  public BeaconBlockBody(\n+      BeaconBlockBodySchema type,\n+      BLSSignature randao_reveal,\n+      Eth1Data eth1_data,\n+      Bytes32 graffiti,\n+      SszList<ProposerSlashing> proposer_slashings,\n+      SszList<AttesterSlashing> attester_slashings,\n+      SszList<Attestation> attestations,\n+      SszList<Deposit> deposits,\n+      SszList<SignedVoluntaryExit> voluntary_exits) {\n+    super(\n+        type,\n+        new SszSignature(randao_reveal),\n+        eth1_data,\n+        SszBytes32.of(graffiti),\n+        proposer_slashings,\n+        attester_slashings,\n+        attestations,\n+        deposits,\n+        voluntary_exits);\n+  }\n+\n+  public BeaconBlockBody() {\n+    super(SSZ_SCHEMA.get());\n+  }\n+\n+  public BLSSignature getRandao_reveal() {\n+    return getField0().getSignature();\n+  }\n+\n+  public Eth1Data getEth1_data() {\n+    return getField1();\n+  }\n+\n+  public Bytes32 getGraffiti() {\n+    return getField2().get();\n+  }\n+\n+  public SszList<ProposerSlashing> getProposer_slashings() {\n+    return getField3();\n+  }\n+\n+  public SszList<AttesterSlashing> getAttester_slashings() {\n+    return getField4();\n+  }\n+\n+  public SszList<Attestation> getAttestations() {\n+    return getField5();\n+  }\n+\n+  public SszList<Deposit> getDeposits() {\n+    return getField6();\n+  }\n+\n+  public SszList<SignedVoluntaryExit> getVoluntary_exits() {\n+    return getField7();\n+  }\n+}"
  },
  {
    "sha": "bf2e20c91e4946aecf3afc75e099ffcf976ce78a",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlockHeader.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlockHeader.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlockHeader.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/BeaconBlockHeader.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -61,11 +61,11 @@ public BeaconBlockHeader(\n       Bytes32 body_root) {\n     super(\n         SSZ_SCHEMA,\n-        new SszUInt64(slot),\n-        new SszUInt64(proposer_index),\n-        new SszBytes32(parent_root),\n-        new SszBytes32(state_root),\n-        new SszBytes32(body_root));\n+        SszUInt64.of(slot),\n+        SszUInt64.of(proposer_index),\n+        SszBytes32.of(parent_root),\n+        SszBytes32.of(state_root),\n+        SszBytes32.of(body_root));\n   }\n \n   public BeaconBlockHeader(BeaconBlockHeader header) {"
  },
  {
    "sha": "2ec97ed82d6d36d7053b92fdeb588e5b7d06812b",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/Eth1Data.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/Eth1Data.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/Eth1Data.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/Eth1Data.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -50,9 +50,9 @@ private Eth1Data(Eth1DataSchema type, TreeNode backingNode) {\n   public Eth1Data(Bytes32 deposit_root, UInt64 deposit_count, Bytes32 block_hash) {\n     super(\n         SSZ_SCHEMA,\n-        new SszBytes32(deposit_root),\n-        new SszUInt64(deposit_count),\n-        new SszBytes32(block_hash));\n+        SszBytes32.of(deposit_root),\n+        SszUInt64.of(deposit_count),\n+        SszBytes32.of(block_hash));\n   }\n \n   public Eth1Data() {"
  },
  {
    "sha": "92aa34a96bdaafc3d53ce25e207cd95e1e517ad6",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/SignedBeaconBlock.java",
    "status": "modified",
    "additions": 7,
    "deletions": 16,
    "changes": 23,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/SignedBeaconBlock.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/SignedBeaconBlock.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/SignedBeaconBlock.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -17,27 +17,24 @@\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.bls.BLSSignature;\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n-import tech.pegasys.teku.ssz.backing.SszVector;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignatureSchema;\n import tech.pegasys.teku.ssz.backing.containers.Container2;\n import tech.pegasys.teku.ssz.backing.containers.ContainerSchema2;\n-import tech.pegasys.teku.ssz.backing.schema.SszComplexSchemas;\n import tech.pegasys.teku.ssz.backing.tree.TreeNode;\n-import tech.pegasys.teku.ssz.backing.view.SszPrimitives.SszByte;\n-import tech.pegasys.teku.ssz.backing.view.SszUtils;\n import tech.pegasys.teku.util.config.SpecDependent;\n \n-public class SignedBeaconBlock\n-    extends Container2<SignedBeaconBlock, BeaconBlock, SszVector<SszByte>>\n+public class SignedBeaconBlock extends Container2<SignedBeaconBlock, BeaconBlock, SszSignature>\n     implements BeaconBlockSummary {\n \n   public static class SignedBeaconBlockSchema\n-      extends ContainerSchema2<SignedBeaconBlock, BeaconBlock, SszVector<SszByte>> {\n+      extends ContainerSchema2<SignedBeaconBlock, BeaconBlock, SszSignature> {\n \n     public SignedBeaconBlockSchema() {\n       super(\n           \"SignedBeaconBlock\",\n           namedSchema(\"message\", BeaconBlock.SSZ_SCHEMA.get()),\n-          namedSchema(\"signature\", SszComplexSchemas.BYTES_96_SCHEMA));\n+          namedSchema(\"signature\", SszSignatureSchema.INSTANCE));\n     }\n \n     @Override\n@@ -53,8 +50,6 @@ public static SignedBeaconBlockSchema getSszSchema() {\n   public static final SpecDependent<SignedBeaconBlockSchema> SSZ_SCHEMA =\n       SpecDependent.of(SignedBeaconBlockSchema::new);\n \n-  private BLSSignature signatureCache;\n-\n   private SignedBeaconBlock(SignedBeaconBlockSchema type, TreeNode backingNode) {\n     super(type, backingNode);\n   }\n@@ -66,19 +61,15 @@ public SignedBeaconBlock(final BeaconBlock message, final BLSSignature signature\n \n   public SignedBeaconBlock(\n       final SignedBeaconBlockSchema type, final BeaconBlock message, final BLSSignature signature) {\n-    super(type, message, SszUtils.toSszByteVector(signature.toBytesCompressed()));\n-    this.signatureCache = signature;\n+    super(type, message, new SszSignature(signature));\n   }\n \n   public BeaconBlock getMessage() {\n     return getField0();\n   }\n \n   public BLSSignature getSignature() {\n-    if (signatureCache == null) {\n-      signatureCache = BLSSignature.fromBytesCompressed(SszUtils.getAllBytes(getField1()));\n-    }\n-    return signatureCache;\n+    return getField1().getSignature();\n   }\n \n   @Override"
  },
  {
    "sha": "f15f14157beb6bf4b8fae1c24dbc07fe96ec110a",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/SignedBeaconBlockHeader.java",
    "status": "modified",
    "additions": 7,
    "deletions": 15,
    "changes": 22,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/SignedBeaconBlockHeader.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/SignedBeaconBlockHeader.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/SignedBeaconBlockHeader.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -14,25 +14,23 @@\n package tech.pegasys.teku.spec.datastructures.blocks;\n \n import tech.pegasys.teku.bls.BLSSignature;\n-import tech.pegasys.teku.ssz.backing.SszVector;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignatureSchema;\n import tech.pegasys.teku.ssz.backing.containers.Container2;\n import tech.pegasys.teku.ssz.backing.containers.ContainerSchema2;\n-import tech.pegasys.teku.ssz.backing.schema.SszComplexSchemas;\n import tech.pegasys.teku.ssz.backing.tree.TreeNode;\n-import tech.pegasys.teku.ssz.backing.view.SszPrimitives.SszByte;\n-import tech.pegasys.teku.ssz.backing.view.SszUtils;\n \n public class SignedBeaconBlockHeader\n-    extends Container2<SignedBeaconBlockHeader, BeaconBlockHeader, SszVector<SszByte>> {\n+    extends Container2<SignedBeaconBlockHeader, BeaconBlockHeader, SszSignature> {\n \n   public static class SignedBeaconBlockHeaderSchema\n-      extends ContainerSchema2<SignedBeaconBlockHeader, BeaconBlockHeader, SszVector<SszByte>> {\n+      extends ContainerSchema2<SignedBeaconBlockHeader, BeaconBlockHeader, SszSignature> {\n \n     public SignedBeaconBlockHeaderSchema() {\n       super(\n           \"SignedBeaconBlockHeader\",\n           namedSchema(\"message\", BeaconBlockHeader.SSZ_SCHEMA),\n-          namedSchema(\"signature\", SszComplexSchemas.BYTES_96_SCHEMA));\n+          namedSchema(\"signature\", SszSignatureSchema.INSTANCE));\n     }\n \n     @Override\n@@ -44,25 +42,19 @@ public SignedBeaconBlockHeader createFromBackingNode(TreeNode node) {\n   public static final SignedBeaconBlockHeaderSchema SSZ_SCHEMA =\n       new SignedBeaconBlockHeaderSchema();\n \n-  private BLSSignature signatureCache;\n-\n   private SignedBeaconBlockHeader(SignedBeaconBlockHeaderSchema type, TreeNode backingNode) {\n     super(type, backingNode);\n   }\n \n   public SignedBeaconBlockHeader(final BeaconBlockHeader message, final BLSSignature signature) {\n-    super(SSZ_SCHEMA, message, SszUtils.toSszByteVector(signature.toBytesCompressed()));\n-    signatureCache = signature;\n+    super(SSZ_SCHEMA, message, new SszSignature(signature));\n   }\n \n   public BeaconBlockHeader getMessage() {\n     return getField0();\n   }\n \n   public BLSSignature getSignature() {\n-    if (signatureCache == null) {\n-      signatureCache = BLSSignature.fromBytesCompressed(SszUtils.getAllBytes(getField1()));\n-    }\n-    return signatureCache;\n+    return getField1().getSignature();\n   }\n }"
  },
  {
    "sha": "629ef304683828ca73e05151a4548fa90a6ae001",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBody.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBody.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBody.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBody.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -21,8 +21,8 @@\n import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n import tech.pegasys.teku.ssz.backing.SszContainer;\n+import tech.pegasys.teku.ssz.backing.SszList;\n \n public interface BeaconBlockBody extends SszContainer {\n   BLSSignature getRandao_reveal();\n@@ -31,13 +31,16 @@\n \n   Bytes32 getGraffiti();\n \n-  SSZList<ProposerSlashing> getProposer_slashings();\n+  SszList<ProposerSlashing> getProposer_slashings();\n \n-  SSZList<AttesterSlashing> getAttester_slashings();\n+  SszList<AttesterSlashing> getAttester_slashings();\n \n-  SSZList<Attestation> getAttestations();\n+  SszList<Attestation> getAttestations();\n \n-  SSZList<Deposit> getDeposits();\n+  SszList<Deposit> getDeposits();\n \n-  SSZList<SignedVoluntaryExit> getVoluntary_exits();\n+  SszList<SignedVoluntaryExit> getVoluntary_exits();\n+\n+  @Override\n+  BeaconBlockBodySchema<? extends BeaconBlockBody> getSchema();\n }"
  },
  {
    "sha": "a384770ac672ad90c256f9bbac0a40ddc81c2a8e",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodySchema.java",
    "status": "modified",
    "additions": 17,
    "deletions": 6,
    "changes": 23,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodySchema.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodySchema.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodySchema.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -21,23 +21,34 @@\n import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.backing.SszList;\n import tech.pegasys.teku.ssz.backing.schema.SszContainerSchema;\n+import tech.pegasys.teku.ssz.backing.schema.SszListSchema;\n import tech.pegasys.teku.ssz.backing.tree.TreeNode;\n \n public interface BeaconBlockBodySchema<T extends BeaconBlockBody> extends SszContainerSchema<T> {\n   T createBlockBody(\n       BLSSignature randao_reveal,\n       Eth1Data eth1_data,\n       Bytes32 graffiti,\n-      SSZList<ProposerSlashing> proposer_slashings,\n-      SSZList<AttesterSlashing> attester_slashings,\n-      SSZList<Attestation> attestations,\n-      SSZList<Deposit> deposits,\n-      SSZList<SignedVoluntaryExit> voluntary_exits);\n+      SszList<ProposerSlashing> proposer_slashings,\n+      SszList<AttesterSlashing> attester_slashings,\n+      SszList<Attestation> attestations,\n+      SszList<Deposit> deposits,\n+      SszList<SignedVoluntaryExit> voluntary_exits);\n \n   T createEmpty();\n \n   @Override\n   T createFromBackingNode(TreeNode node);\n+\n+  SszListSchema<ProposerSlashing, ?> getProposerSlashingsSchema();\n+\n+  SszListSchema<AttesterSlashing, ?> getAttesterSlashingsSchema();\n+\n+  SszListSchema<Attestation, ?> getAttestationsSchema();\n+\n+  SszListSchema<Deposit, ?> getDepositsSchema();\n+\n+  SszListSchema<SignedVoluntaryExit, ?> getVoluntaryExitsSchema();\n }"
  },
  {
    "sha": "68273e5ac156dae8a30c51cfaff5c7014f49c5f3",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0.java",
    "status": "modified",
    "additions": 18,
    "deletions": 22,
    "changes": 40,
    "blob_url": "https://github.com/ConsenSys/teku/blob/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/1fd6edf6fe96eaac32e8da823630e2420c7e5824/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0.java?ref=1fd6edf6fe96eaac32e8da823630e2420c7e5824",
    "patch": "@@ -13,7 +13,6 @@\n \n package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.phase0;\n \n-import java.util.function.Function;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.bls.BLSSignature;\n import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n@@ -23,21 +22,18 @@\n import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZBackingList;\n-import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n import tech.pegasys.teku.ssz.backing.SszList;\n-import tech.pegasys.teku.ssz.backing.SszVector;\n import tech.pegasys.teku.ssz.backing.containers.Container8;\n import tech.pegasys.teku.ssz.backing.tree.TreeNode;\n-import tech.pegasys.teku.ssz.backing.view.SszPrimitives.SszByte;\n import tech.pegasys.teku.ssz.backing.view.SszPrimitives.SszBytes32;\n import tech.pegasys.teku.ssz.backing.view.SszUtils;\n \n /** A Beacon block body */\n class BeaconBlockBodyPhase0\n     extends Container8<\n         BeaconBlockBodyPhase0,\n-        SszVector<SszByte>,\n+        SszSignature,\n         Eth1Data,\n         SszBytes32,\n         SszList<ProposerSlashing>,\n@@ -59,7 +55,7 @@\n \n   BeaconBlockBodyPhase0(\n       BeaconBlockBodySchemaPhase0 type,\n-      SszVector<SszByte> randao_reveal,\n+      SszSignature randao_reveal,\n       Eth1Data eth1_data,\n       SszBytes32 graffiti,\n       SszList<ProposerSlashing> proposer_slashings,\n@@ -98,32 +94,32 @@ public Bytes32 getGraffiti() {\n   }\n \n   @Override\n-  public SSZList<ProposerSlashing> getProposer_slashings() {\n-    return new SSZBackingList<>(\n-        ProposerSlashing.class, getField3(), Function.identity(), Function.identity());\n+  public SszList<ProposerSlashing> getProposer_slashings() {\n+    return getField3();\n   }\n \n   @Override\n-  public SSZList<AttesterSlashing> getAttester_slashings() {\n-    return new SSZBackingList<>(\n-        AttesterSlashing.class, getField4(), Function.identity(), Function.identity());\n+  public SszList<AttesterSlashing> getAttester_slashings() {\n+    return getField4();\n   }\n \n   @Override\n-  public SSZList<Attestation> getAttestations() {\n-    return new SSZBackingList<>(\n-        Attestation.class, getField5(), Function.identity(), Function.identity());\n+  public SszList<Attestation> getAttestations() {\n+    return getField5();\n   }\n \n   @Override\n-  public SSZList<Deposit> getDeposits() {\n-    return new SSZBackingList<>(\n-        Deposit.class, getField6(), Function.identity(), Function.identity());\n+  public SszList<Deposit> getDeposits() {\n+    return getField6();\n   }\n \n   @Override\n-  public SSZList<SignedVoluntaryExit> getVoluntary_exits() {\n-    return new SSZBackingList<>(\n-        SignedVoluntaryExit.class, getField7(), Function.identity(), Function.identity());\n+  public SszList<SignedVoluntaryExit> getVoluntary_exits() {\n+    return getField7();\n+  }\n+\n+  @Override\n+  public BeaconBlockBodySchemaPhase0 getSchema() {\n+    return (BeaconBlockBodySchemaPhase0) super.getSchema();\n   }\n }"
  }
]
