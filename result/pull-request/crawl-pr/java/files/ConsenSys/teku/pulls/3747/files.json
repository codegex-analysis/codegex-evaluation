[
  {
    "sha": "74eb8738b10d721a12dd5f0652f8a1ccaffd549a",
    "filename": "bls/src/main/java/tech/pegasys/teku/bls/BLSSignature.java",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/bls/src/main/java/tech/pegasys/teku/bls/BLSSignature.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/bls/src/main/java/tech/pegasys/teku/bls/BLSSignature.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/bls/src/main/java/tech/pegasys/teku/bls/BLSSignature.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -25,9 +25,13 @@\n \n public class BLSSignature {\n \n-  // The number of SimpleSerialize basic types in this SSZ Container/POJO.\n-  public static final int SSZ_FIELD_COUNT = 1;\n   public static final int SSZ_BLS_SIGNATURE_SIZE = BLSConstants.BLS_SIGNATURE_SIZE;\n+  private static final Bytes INFINITY_BYTES =\n+      Bytes.fromHexString(\n+          \"0x\"\n+              + \"c000000000000000000000000000000000000000000000000000000000000000\"\n+              + \"0000000000000000000000000000000000000000000000000000000000000000\"\n+              + \"0000000000000000000000000000000000000000000000000000000000000000\");\n \n   /**\n    * Creates an empty signature (all zero bytes). Note that this is not a valid signature.\n@@ -38,6 +42,10 @@ public static BLSSignature empty() {\n     return BLSSignature.fromBytesCompressed(Bytes.wrap(new byte[SSZ_BLS_SIGNATURE_SIZE]));\n   }\n \n+  public static BLSSignature infinity() {\n+    return BLSSignature.fromBytesCompressed(INFINITY_BYTES);\n+  }\n+\n   public static BLSSignature fromBytesCompressed(Bytes bytes) {\n     checkArgument(\n         bytes.size() == BLSConstants.BLS_SIGNATURE_SIZE,"
  },
  {
    "sha": "3d786cbf92fd6762cc0e5d82a7f96c36fe0b8e95",
    "filename": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconBlockBody.java",
    "status": "modified",
    "additions": 27,
    "deletions": 19,
    "changes": 46,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconBlockBody.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconBlockBody.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/data/serializer/src/main/java/tech/pegasys/teku/api/schema/BeaconBlockBody.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -87,25 +87,33 @@ public BeaconBlockBody(\n       asInternalBeaconBlockBody(final SpecVersion spec) {\n     BeaconBlockBodySchema<?> schema = spec.getSchemaDefinitions().getBeaconBlockBodySchema();\n     return schema.createBlockBody(\n-        randao_reveal.asInternalBLSSignature(),\n-        new tech.pegasys.teku.spec.datastructures.blocks.Eth1Data(\n-            eth1_data.deposit_root, eth1_data.deposit_count, eth1_data.block_hash),\n-        graffiti,\n-        proposer_slashings.stream()\n-            .map(ProposerSlashing::asInternalProposerSlashing)\n-            .collect(schema.getProposerSlashingsSchema().collector()),\n-        attester_slashings.stream()\n-            .map(AttesterSlashing::asInternalAttesterSlashing)\n-            .collect(schema.getAttesterSlashingsSchema().collector()),\n-        attestations.stream()\n-            .map(Attestation::asInternalAttestation)\n-            .collect(schema.getAttestationsSchema().collector()),\n-        deposits.stream()\n-            .map(Deposit::asInternalDeposit)\n-            .collect(schema.getDepositsSchema().collector()),\n-        voluntary_exits.stream()\n-            .map(SignedVoluntaryExit::asInternalSignedVoluntaryExit)\n-            .collect(schema.getVoluntaryExitsSchema().collector()));\n+        builder ->\n+            builder\n+                .randaoReveal(randao_reveal.asInternalBLSSignature())\n+                .eth1Data(\n+                    new tech.pegasys.teku.spec.datastructures.blocks.Eth1Data(\n+                        eth1_data.deposit_root, eth1_data.deposit_count, eth1_data.block_hash))\n+                .graffiti(graffiti)\n+                .attestations(\n+                    attestations.stream()\n+                        .map(Attestation::asInternalAttestation)\n+                        .collect(schema.getAttestationsSchema().collector()))\n+                .proposerSlashings(\n+                    proposer_slashings.stream()\n+                        .map(ProposerSlashing::asInternalProposerSlashing)\n+                        .collect(schema.getProposerSlashingsSchema().collector()))\n+                .attesterSlashings(\n+                    attester_slashings.stream()\n+                        .map(AttesterSlashing::asInternalAttesterSlashing)\n+                        .collect(schema.getAttesterSlashingsSchema().collector()))\n+                .deposits(\n+                    deposits.stream()\n+                        .map(Deposit::asInternalDeposit)\n+                        .collect(schema.getDepositsSchema().collector()))\n+                .voluntaryExits(\n+                    voluntary_exits.stream()\n+                        .map(SignedVoluntaryExit::asInternalSignedVoluntaryExit)\n+                        .collect(schema.getVoluntaryExitsSchema().collector())));\n   }\n \n   @Override"
  },
  {
    "sha": "dd15861e563a9beadde1de99010ac544557b5db7",
    "filename": "eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/ssz/SszBeaconBlockBodyBenchmark.java",
    "status": "modified",
    "additions": 10,
    "deletions": 8,
    "changes": 18,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/ssz/SszBeaconBlockBodyBenchmark.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/ssz/SszBeaconBlockBodyBenchmark.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/eth-benchmark-tests/src/jmh/java/tech/pegasys/teku/benchmarks/ssz/SszBeaconBlockBodyBenchmark.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -32,14 +32,16 @@ protected BeaconBlockBody createContainer() {\n         .getSchemaDefinitions()\n         .getBeaconBlockBodySchema()\n         .createBlockBody(\n-            beaconBlockBody.getRandao_reveal(),\n-            beaconBlockBody.getEth1_data(),\n-            beaconBlockBody.getGraffiti(),\n-            beaconBlockBody.getProposer_slashings(),\n-            beaconBlockBody.getAttester_slashings(),\n-            beaconBlockBody.getAttestations(),\n-            beaconBlockBody.getDeposits(),\n-            beaconBlockBody.getVoluntary_exits());\n+            builder ->\n+                builder\n+                    .randaoReveal(beaconBlockBody.getRandao_reveal())\n+                    .eth1Data(beaconBlockBody.getEth1_data())\n+                    .graffiti(beaconBlockBody.getGraffiti())\n+                    .attestations(beaconBlockBody.getAttestations())\n+                    .proposerSlashings(beaconBlockBody.getProposer_slashings())\n+                    .attesterSlashings(beaconBlockBody.getAttester_slashings())\n+                    .deposits(beaconBlockBody.getDeposits())\n+                    .voluntaryExits(beaconBlockBody.getVoluntary_exits()));\n   }\n \n   @Override"
  },
  {
    "sha": "4866bae8aae3af0dc7ae90f1ffa411e477c09d78",
    "filename": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/BlockProposalTestUtil.java",
    "status": "modified",
    "additions": 10,
    "deletions": 8,
    "changes": 18,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/BlockProposalTestUtil.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/BlockProposalTestUtil.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/BlockProposalTestUtil.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -72,16 +72,18 @@ public SignedBlockAndState createNewBlock(\n         spec.createNewUnsignedBlock(\n             newSlot,\n             get_beacon_proposer_index(blockSlotState, newSlot),\n-            randaoReveal,\n             blockSlotState,\n             parentBlockSigningRoot,\n-            eth1Data,\n-            Bytes32.ZERO,\n-            attestations,\n-            slashings,\n-            blockBodyLists.createAttesterSlashings(),\n-            deposits,\n-            exits);\n+            builder ->\n+                builder\n+                    .randaoReveal(randaoReveal)\n+                    .eth1Data(eth1Data)\n+                    .graffiti(Bytes32.ZERO)\n+                    .attestations(attestations)\n+                    .proposerSlashings(slashings)\n+                    .attesterSlashings(blockBodyLists.createAttesterSlashings())\n+                    .deposits(deposits)\n+                    .voluntaryExits(exits));\n \n     // Sign block and set block signature\n     final BeaconBlock block = newBlockAndState.getBlock();"
  },
  {
    "sha": "b7fd260122522e42567e06acf3c55ae0c5ca7983",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/Spec.java",
    "status": "modified",
    "additions": 4,
    "deletions": 21,
    "changes": 25,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/Spec.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/Spec.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/Spec.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -18,10 +18,10 @@\n import java.util.NavigableMap;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.function.Consumer;\n import org.apache.tuweni.bytes.Bytes;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.bls.BLSPublicKey;\n-import tech.pegasys.teku.bls.BLSSignature;\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n import tech.pegasys.teku.spec.cache.IndexedAttestationCache;\n import tech.pegasys.teku.spec.config.SpecConfig;\n@@ -32,6 +32,7 @@\n import tech.pegasys.teku.spec.datastructures.blocks.BeaconBlockSummary;\n import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n import tech.pegasys.teku.spec.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n import tech.pegasys.teku.spec.datastructures.forkchoice.MutableStore;\n import tech.pegasys.teku.spec.datastructures.forkchoice.ReadOnlyForkChoiceStrategy;\n import tech.pegasys.teku.spec.datastructures.forkchoice.ReadOnlyStore;\n@@ -353,32 +354,14 @@ public BeaconState processSlots(BeaconState preState, UInt64 slot)\n   public BeaconBlockAndState createNewUnsignedBlock(\n       final UInt64 newSlot,\n       final int proposerIndex,\n-      final BLSSignature randaoReveal,\n       final BeaconState blockSlotState,\n       final Bytes32 parentBlockSigningRoot,\n-      final Eth1Data eth1Data,\n-      final Bytes32 graffiti,\n-      final SszList<Attestation> attestations,\n-      final SszList<ProposerSlashing> proposerSlashings,\n-      final SszList<AttesterSlashing> attesterSlashings,\n-      final SszList<Deposit> deposits,\n-      final SszList<SignedVoluntaryExit> voluntaryExits)\n+      final Consumer<BeaconBlockBodyContent> bodyBuilder)\n       throws StateTransitionException {\n     return atSlot(newSlot)\n         .getBlockProposalUtil()\n         .createNewUnsignedBlock(\n-            newSlot,\n-            proposerIndex,\n-            randaoReveal,\n-            blockSlotState,\n-            parentBlockSigningRoot,\n-            eth1Data,\n-            graffiti,\n-            attestations,\n-            proposerSlashings,\n-            attesterSlashings,\n-            deposits,\n-            voluntaryExits);\n+            newSlot, proposerIndex, blockSlotState, parentBlockSigningRoot, bodyBuilder);\n   }\n \n   // Block Processing Utils"
  },
  {
    "sha": "9f40f9f33885b66ff0088d7b5798fac1759bc663",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodyContent.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodyContent.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodyContent.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodyContent.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody;\n+\n+import java.util.function.Supplier;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair.SyncAggregate;\n+import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n+import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n+import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.ssz.SszList;\n+\n+public interface BeaconBlockBodyContent {\n+\n+  BeaconBlockBodyContent randaoReveal(BLSSignature randaoReveal);\n+\n+  BeaconBlockBodyContent eth1Data(Eth1Data eth1Data);\n+\n+  BeaconBlockBodyContent graffiti(Bytes32 graffiti);\n+\n+  BeaconBlockBodyContent attestations(SszList<Attestation> attestations);\n+\n+  BeaconBlockBodyContent proposerSlashings(SszList<ProposerSlashing> proposerSlashings);\n+\n+  BeaconBlockBodyContent attesterSlashings(SszList<AttesterSlashing> attesterSlashings);\n+\n+  BeaconBlockBodyContent deposits(SszList<Deposit> deposits);\n+\n+  BeaconBlockBodyContent voluntaryExits(SszList<SignedVoluntaryExit> voluntaryExits);\n+\n+  // Not required by all hard forks so provided via a Supplier that is only invoked when needed.\n+  BeaconBlockBodyContent syncAggregate(Supplier<SyncAggregate> syncAggregateSupplier);\n+}"
  },
  {
    "sha": "240f26d84c4010a880d4a0ec08c247d8fd16bbfc",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodySchema.java",
    "status": "modified",
    "additions": 2,
    "deletions": 13,
    "changes": 15,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodySchema.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodySchema.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/BeaconBlockBodySchema.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -13,29 +13,18 @@\n \n package tech.pegasys.teku.spec.datastructures.blocks.blockbody;\n \n-import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.teku.bls.BLSSignature;\n-import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n+import java.util.function.Consumer;\n import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n-import tech.pegasys.teku.ssz.SszList;\n import tech.pegasys.teku.ssz.schema.SszContainerSchema;\n import tech.pegasys.teku.ssz.schema.SszListSchema;\n import tech.pegasys.teku.ssz.tree.TreeNode;\n \n public interface BeaconBlockBodySchema<T extends BeaconBlockBody> extends SszContainerSchema<T> {\n-  T createBlockBody(\n-      BLSSignature randao_reveal,\n-      Eth1Data eth1_data,\n-      Bytes32 graffiti,\n-      SszList<ProposerSlashing> proposer_slashings,\n-      SszList<AttesterSlashing> attester_slashings,\n-      SszList<Attestation> attestations,\n-      SszList<Deposit> deposits,\n-      SszList<SignedVoluntaryExit> voluntary_exits);\n+  T createBlockBody(Consumer<BeaconBlockBodyContent> bodyBuilder);\n \n   T createEmpty();\n "
  },
  {
    "sha": "c0bb06aead9ce8a9b5c694fe46e48a93e9ff518c",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/AbstractBeaconBlockBodyContent.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/AbstractBeaconBlockBodyContent.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/AbstractBeaconBlockBodyContent.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/AbstractBeaconBlockBodyContent.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody.common;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n+import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n+import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n+import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.ssz.SszList;\n+\n+public abstract class AbstractBeaconBlockBodyContent implements BeaconBlockBodyContent {\n+\n+  protected BLSSignature randaoReveal;\n+  protected Eth1Data eth1Data;\n+  protected Bytes32 graffiti;\n+  protected SszList<Attestation> attestations;\n+  protected SszList<ProposerSlashing> proposerSlashings;\n+  protected SszList<AttesterSlashing> attesterSlashings;\n+  protected SszList<Deposit> deposits;\n+  protected SszList<SignedVoluntaryExit> voluntaryExits;\n+\n+  @Override\n+  public BeaconBlockBodyContent randaoReveal(final BLSSignature randaoReveal) {\n+    this.randaoReveal = randaoReveal;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent eth1Data(final Eth1Data eth1Data) {\n+    this.eth1Data = eth1Data;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent graffiti(final Bytes32 graffiti) {\n+    this.graffiti = graffiti;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent attestations(final SszList<Attestation> attestations) {\n+    this.attestations = attestations;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent proposerSlashings(\n+      final SszList<ProposerSlashing> proposerSlashings) {\n+    this.proposerSlashings = proposerSlashings;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent attesterSlashings(\n+      final SszList<AttesterSlashing> attesterSlashings) {\n+    this.attesterSlashings = attesterSlashings;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent deposits(final SszList<Deposit> deposits) {\n+    this.deposits = deposits;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent voluntaryExits(final SszList<SignedVoluntaryExit> voluntaryExits) {\n+    this.voluntaryExits = voluntaryExits;\n+    return this;\n+  }\n+\n+  protected void validate() {\n+    checkNotNull(randaoReveal, \"randaoReveal must be specified\");\n+    checkNotNull(eth1Data, \"eth1Data must be specified\");\n+    checkNotNull(graffiti, \"graffiti must be specified\");\n+    checkNotNull(attestations, \"attestations must be specified\");\n+    checkNotNull(proposerSlashings, \"proposerSlashings must be specified\");\n+    checkNotNull(attesterSlashings, \"attesterSlashings must be specified\");\n+    checkNotNull(deposits, \"deposits must be specified\");\n+    checkNotNull(voluntaryExits, \"voluntaryExits must be specified\");\n+  }\n+}"
  },
  {
    "sha": "3e31f0f47be4a05fa3740d427a2934adccf45653",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/BlockBodyFields.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/BlockBodyFields.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/BlockBodyFields.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/BlockBodyFields.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -21,5 +21,6 @@\n   ATTESTER_SLASHINGS,\n   ATTESTATIONS,\n   DEPOSITS,\n-  VOLUNTARY_EXITS\n+  VOLUNTARY_EXITS,\n+  SYNC_AGGREGATE\n }"
  },
  {
    "sha": "1f8dd7651874e5953b7eed77f37441d284c47fe3",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyAltair.java",
    "status": "added",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyAltair.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyAltair.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyAltair.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBody;\n+import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n+import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n+import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.ssz.SszList;\n+import tech.pegasys.teku.ssz.containers.Container9;\n+import tech.pegasys.teku.ssz.primitive.SszBytes32;\n+import tech.pegasys.teku.ssz.tree.TreeNode;\n+\n+/** A Beacon block body */\n+class BeaconBlockBodyAltair\n+    extends Container9<\n+        BeaconBlockBodyAltair,\n+        SszSignature,\n+        Eth1Data,\n+        SszBytes32,\n+        SszList<ProposerSlashing>,\n+        SszList<AttesterSlashing>,\n+        SszList<Attestation>,\n+        SszList<Deposit>,\n+        SszList<SignedVoluntaryExit>,\n+        SyncAggregate>\n+    implements BeaconBlockBody {\n+\n+  BeaconBlockBodyAltair(BeaconBlockBodySchemaAltair type) {\n+    super(type);\n+  }\n+\n+  BeaconBlockBodyAltair(BeaconBlockBodySchemaAltair type, TreeNode backingNode) {\n+    super(type, backingNode);\n+  }\n+\n+  BeaconBlockBodyAltair(\n+      BeaconBlockBodySchemaAltair type,\n+      SszSignature randaoReveal,\n+      Eth1Data eth1Data,\n+      SszBytes32 graffiti,\n+      SszList<ProposerSlashing> proposerSlashings,\n+      SszList<AttesterSlashing> attesterSlashings,\n+      SszList<Attestation> attestations,\n+      SszList<Deposit> deposits,\n+      SszList<SignedVoluntaryExit> voluntaryExits,\n+      SyncAggregate syncAggregate) {\n+    super(\n+        type,\n+        randaoReveal,\n+        eth1Data,\n+        graffiti,\n+        proposerSlashings,\n+        attesterSlashings,\n+        attestations,\n+        deposits,\n+        voluntaryExits,\n+        syncAggregate);\n+  }\n+\n+  @Override\n+  public BLSSignature getRandao_reveal() {\n+    return getField0().getSignature();\n+  }\n+\n+  @Override\n+  public Eth1Data getEth1_data() {\n+    return getField1();\n+  }\n+\n+  @Override\n+  public Bytes32 getGraffiti() {\n+    return getField2().get();\n+  }\n+\n+  @Override\n+  public SszList<ProposerSlashing> getProposer_slashings() {\n+    return getField3();\n+  }\n+\n+  @Override\n+  public SszList<AttesterSlashing> getAttester_slashings() {\n+    return getField4();\n+  }\n+\n+  @Override\n+  public SszList<Attestation> getAttestations() {\n+    return getField5();\n+  }\n+\n+  @Override\n+  public SszList<Deposit> getDeposits() {\n+    return getField6();\n+  }\n+\n+  @Override\n+  public SszList<SignedVoluntaryExit> getVoluntary_exits() {\n+    return getField7();\n+  }\n+\n+  public SyncAggregate getSyncAggregate() {\n+    return getField8();\n+  }\n+\n+  @Override\n+  public BeaconBlockBodySchemaAltair getSchema() {\n+    return (BeaconBlockBodySchemaAltair) super.getSchema();\n+  }\n+}"
  },
  {
    "sha": "75035db3219369bfee96d3e7956b28a66087a29c",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyContentAltair.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyContentAltair.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyContentAltair.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyContentAltair.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.function.Supplier;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.common.AbstractBeaconBlockBodyContent;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.ssz.primitive.SszBytes32;\n+\n+public class BeaconBlockBodyContentAltair extends AbstractBeaconBlockBodyContent {\n+\n+  private BeaconBlockBodySchemaAltair schema;\n+  private SyncAggregate syncAggregate;\n+\n+  public BeaconBlockBodyContentAltair schema(final BeaconBlockBodySchemaAltair schema) {\n+    this.schema = schema;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent syncAggregate(final Supplier<SyncAggregate> syncAggregateSupplier) {\n+    this.syncAggregate = syncAggregateSupplier.get();\n+    return this;\n+  }\n+\n+  @Override\n+  protected void validate() {\n+    super.validate();\n+    checkNotNull(schema, \"schema must be specified\");\n+    checkNotNull(syncAggregate, \"syncAggregate must be specified\");\n+  }\n+\n+  public BeaconBlockBodyAltair build() {\n+    validate();\n+\n+    return new BeaconBlockBodyAltair(\n+        schema,\n+        new SszSignature(randaoReveal),\n+        eth1Data,\n+        SszBytes32.of(graffiti),\n+        proposerSlashings,\n+        attesterSlashings,\n+        attestations,\n+        deposits,\n+        voluntaryExits,\n+        syncAggregate);\n+  }\n+}"
  },
  {
    "sha": "22da5ea1bbc819fe18a5eecdfddcb302b50aa85d",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodySchemaAltair.java",
    "status": "added",
    "additions": 165,
    "deletions": 0,
    "changes": 165,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodySchemaAltair.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodySchemaAltair.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodySchemaAltair.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair;\n+\n+import java.util.function.Consumer;\n+import tech.pegasys.teku.spec.config.SpecConfig;\n+import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodySchema;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.common.BlockBodyFields;\n+import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n+import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n+import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignatureSchema;\n+import tech.pegasys.teku.ssz.SszList;\n+import tech.pegasys.teku.ssz.containers.ContainerSchema9;\n+import tech.pegasys.teku.ssz.primitive.SszBytes32;\n+import tech.pegasys.teku.ssz.schema.SszListSchema;\n+import tech.pegasys.teku.ssz.schema.SszPrimitiveSchemas;\n+import tech.pegasys.teku.ssz.tree.TreeNode;\n+\n+public class BeaconBlockBodySchemaAltair\n+    extends ContainerSchema9<\n+        BeaconBlockBodyAltair,\n+        SszSignature,\n+        Eth1Data,\n+        SszBytes32,\n+        SszList<ProposerSlashing>,\n+        SszList<AttesterSlashing>,\n+        SszList<Attestation>,\n+        SszList<Deposit>,\n+        SszList<SignedVoluntaryExit>,\n+        SyncAggregate>\n+    implements BeaconBlockBodySchema<BeaconBlockBodyAltair> {\n+\n+  private BeaconBlockBodySchemaAltair(\n+      NamedSchema<SszSignature> randaoRevealSchema,\n+      NamedSchema<Eth1Data> eth1DataSchema,\n+      NamedSchema<SszBytes32> graffitiSchema,\n+      NamedSchema<SszList<ProposerSlashing>> proposerSlashingsSchema,\n+      NamedSchema<SszList<AttesterSlashing>> attesterSlashingsSchema,\n+      NamedSchema<SszList<Attestation>> attestationsSchema,\n+      NamedSchema<SszList<Deposit>> depositsSchema,\n+      NamedSchema<SszList<SignedVoluntaryExit>> voluntaryExitsSchema,\n+      NamedSchema<SyncAggregate> syncAggregateSchema) {\n+    super(\n+        \"BeaconBlockBody\",\n+        randaoRevealSchema,\n+        eth1DataSchema,\n+        graffitiSchema,\n+        proposerSlashingsSchema,\n+        attesterSlashingsSchema,\n+        attestationsSchema,\n+        depositsSchema,\n+        voluntaryExitsSchema,\n+        syncAggregateSchema);\n+  }\n+\n+  public static BeaconBlockBodySchemaAltair create(final SpecConfig specConfig) {\n+    return create(\n+        specConfig.getMaxProposerSlashings(),\n+        specConfig.getMaxAttesterSlashings(),\n+        specConfig.getMaxAttestations(),\n+        specConfig.getMaxDeposits(),\n+        specConfig.getMaxVoluntaryExits(),\n+        specConfig.toVersionAltair().orElseThrow().getSyncCommitteeSize());\n+  }\n+\n+  private static BeaconBlockBodySchemaAltair create(\n+      final long maxProposerSlashings,\n+      final long maxAttesterSlashings,\n+      final long maxAttestations,\n+      final long maxDeposits,\n+      final long maxVoluntaryExits,\n+      final int syncCommitteeSize) {\n+    return new BeaconBlockBodySchemaAltair(\n+        namedSchema(BlockBodyFields.RANDAO_REVEAL.name(), SszSignatureSchema.INSTANCE),\n+        namedSchema(BlockBodyFields.ETH1_DATA.name(), Eth1Data.SSZ_SCHEMA),\n+        namedSchema(BlockBodyFields.GRAFFITI.name(), SszPrimitiveSchemas.BYTES32_SCHEMA),\n+        namedSchema(\n+            BlockBodyFields.PROPOSER_SLASHINGS.name(),\n+            SszListSchema.create(ProposerSlashing.SSZ_SCHEMA, maxProposerSlashings)),\n+        namedSchema(\n+            BlockBodyFields.ATTESTER_SLASHINGS.name(),\n+            SszListSchema.create(AttesterSlashing.SSZ_SCHEMA, maxAttesterSlashings)),\n+        namedSchema(\n+            BlockBodyFields.ATTESTATIONS.name(),\n+            SszListSchema.create(Attestation.SSZ_SCHEMA, maxAttestations)),\n+        namedSchema(\n+            BlockBodyFields.DEPOSITS.name(), SszListSchema.create(Deposit.SSZ_SCHEMA, maxDeposits)),\n+        namedSchema(\n+            BlockBodyFields.VOLUNTARY_EXITS.name(),\n+            SszListSchema.create(SignedVoluntaryExit.SSZ_SCHEMA, maxVoluntaryExits)),\n+        namedSchema(\n+            BlockBodyFields.SYNC_AGGREGATE.name(), SyncAggregateSchema.create(syncCommitteeSize)));\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyAltair createBlockBody(final Consumer<BeaconBlockBodyContent> bodyBuilder) {\n+    final BeaconBlockBodyContentAltair bodyContent =\n+        new BeaconBlockBodyContentAltair().schema(this);\n+    // Provide a default empty sync aggregate\n+    bodyContent.syncAggregate(getSyncAggregateSchema()::createEmpty);\n+    bodyBuilder.accept(bodyContent);\n+    return bodyContent.build();\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyAltair createEmpty() {\n+    return new BeaconBlockBodyAltair(this);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public SszListSchema<ProposerSlashing, ?> getProposerSlashingsSchema() {\n+    return (SszListSchema<ProposerSlashing, ?>) getFieldSchema3();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public SszListSchema<AttesterSlashing, ?> getAttesterSlashingsSchema() {\n+    return (SszListSchema<AttesterSlashing, ?>) getFieldSchema4();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public SszListSchema<Attestation, ?> getAttestationsSchema() {\n+    return (SszListSchema<Attestation, ?>) getFieldSchema5();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public SszListSchema<Deposit, ?> getDepositsSchema() {\n+    return (SszListSchema<Deposit, ?>) getFieldSchema6();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public SszListSchema<SignedVoluntaryExit, ?> getVoluntaryExitsSchema() {\n+    return (SszListSchema<SignedVoluntaryExit, ?>) getFieldSchema7();\n+  }\n+\n+  public SyncAggregateSchema getSyncAggregateSchema() {\n+    return (SyncAggregateSchema) getFieldSchema8();\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyAltair createFromBackingNode(TreeNode node) {\n+    return new BeaconBlockBodyAltair(this, node);\n+  }\n+}"
  },
  {
    "sha": "6da73e43847aa79f79eff89e946924ac8dd89c52",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/SyncAggregate.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/SyncAggregate.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/SyncAggregate.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/SyncAggregate.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair;\n+\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.ssz.collections.SszBitvector;\n+import tech.pegasys.teku.ssz.containers.Container2;\n+import tech.pegasys.teku.ssz.tree.TreeNode;\n+\n+public class SyncAggregate extends Container2<SyncAggregate, SszBitvector, SszSignature> {\n+\n+  public SyncAggregate(final SyncAggregateSchema type, final TreeNode backingNode) {\n+    super(type, backingNode);\n+  }\n+\n+  public SyncAggregate(\n+      final SyncAggregateSchema type,\n+      final SszBitvector syncCommitteeBits,\n+      final SszSignature syncCommitteeSignature) {\n+    super(type, syncCommitteeBits, syncCommitteeSignature);\n+  }\n+\n+  public SszBitvector getSyncCommitteeBits() {\n+    return getField0();\n+  }\n+\n+  public SszSignature getSyncCommitteeSignature() {\n+    return getField1();\n+  }\n+}"
  },
  {
    "sha": "5aa676f58933850fff298515431c0195bbf2f116",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/SyncAggregateSchema.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/SyncAggregateSchema.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/SyncAggregateSchema.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/SyncAggregateSchema.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair;\n+\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignatureSchema;\n+import tech.pegasys.teku.ssz.collections.SszBitvector;\n+import tech.pegasys.teku.ssz.containers.ContainerSchema2;\n+import tech.pegasys.teku.ssz.schema.collections.SszBitvectorSchema;\n+import tech.pegasys.teku.ssz.tree.TreeNode;\n+\n+public class SyncAggregateSchema\n+    extends ContainerSchema2<SyncAggregate, SszBitvector, SszSignature> {\n+\n+  private SyncAggregateSchema(\n+      final NamedSchema<SszBitvector> syncCommitteeBitsSchema,\n+      final NamedSchema<SszSignature> sszSignatureSchema) {\n+    super(\"SyncAggregate\", syncCommitteeBitsSchema, sszSignatureSchema);\n+  }\n+\n+  public static SyncAggregateSchema create(final int syncCommitteeSize) {\n+    return new SyncAggregateSchema(\n+        namedSchema(\"sync_committee_bits\", SszBitvectorSchema.create(syncCommitteeSize)),\n+        namedSchema(\"sync_committee_signature\", SszSignatureSchema.INSTANCE));\n+  }\n+\n+  @Override\n+  public SyncAggregate createFromBackingNode(final TreeNode node) {\n+    return new SyncAggregate(this, node);\n+  }\n+\n+  public SszBitvectorSchema<SszBitvector> getSyncCommitteeBitsSchema() {\n+    return (SszBitvectorSchema<SszBitvector>) getFieldSchema0();\n+  }\n+\n+  public SyncAggregate createEmpty() {\n+    return new SyncAggregate(\n+        this, getSyncCommitteeBitsSchema().ofBits(), new SszSignature(BLSSignature.infinity()));\n+  }\n+}"
  },
  {
    "sha": "c69edca1d3e8f925bc30de74c69820956eb59e59",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyContentPhase0.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyContentPhase0.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyContentPhase0.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyContentPhase0.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.phase0;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.function.Supplier;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.common.AbstractBeaconBlockBodyContent;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair.SyncAggregate;\n+import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n+import tech.pegasys.teku.ssz.primitive.SszBytes32;\n+\n+public class BeaconBlockBodyContentPhase0 extends AbstractBeaconBlockBodyContent {\n+  private BeaconBlockBodySchemaPhase0 schema;\n+\n+  public BeaconBlockBodyContentPhase0 schema(final BeaconBlockBodySchemaPhase0 schema) {\n+    this.schema = schema;\n+    return this;\n+  }\n+\n+  @Override\n+  public BeaconBlockBodyContent syncAggregate(final Supplier<SyncAggregate> syncAggregateSupplier) {\n+    // No sync aggregate in phase 0\n+    return this;\n+  }\n+\n+  @Override\n+  protected void validate() {\n+    super.validate();\n+    checkNotNull(schema, \"schema must be specified\");\n+  }\n+\n+  public BeaconBlockBodyPhase0 build() {\n+    validate();\n+    return new BeaconBlockBodyPhase0(\n+        schema,\n+        new SszSignature(randaoReveal),\n+        eth1Data,\n+        SszBytes32.of(graffiti),\n+        proposerSlashings,\n+        attesterSlashings,\n+        attestations,\n+        deposits,\n+        voluntaryExits);\n+  }\n+}"
  },
  {
    "sha": "d7daea7217f6ef61884cd6b98aa30eac58718d53",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -25,7 +25,6 @@\n import tech.pegasys.teku.spec.datastructures.type.SszSignature;\n import tech.pegasys.teku.ssz.SszList;\n import tech.pegasys.teku.ssz.containers.Container8;\n-import tech.pegasys.teku.ssz.impl.SszUtils;\n import tech.pegasys.teku.ssz.primitive.SszBytes32;\n import tech.pegasys.teku.ssz.tree.TreeNode;\n \n@@ -43,8 +42,6 @@\n         SszList<SignedVoluntaryExit>>\n     implements BeaconBlockBody {\n \n-  private BLSSignature randaoRevealCache;\n-\n   BeaconBlockBodyPhase0(BeaconBlockBodySchemaPhase0 type) {\n     super(type);\n   }\n@@ -77,10 +74,7 @@\n \n   @Override\n   public BLSSignature getRandao_reveal() {\n-    if (randaoRevealCache == null) {\n-      randaoRevealCache = BLSSignature.fromBytesCompressed(SszUtils.getAllBytes(getField0()));\n-    }\n-    return randaoRevealCache;\n+    return getField0().getSignature();\n   }\n \n   @Override"
  },
  {
    "sha": "22118c991a2f86e36c2c893abb1fb60b2bf42c24",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodySchemaPhase0.java",
    "status": "modified",
    "additions": 6,
    "deletions": 38,
    "changes": 44,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodySchemaPhase0.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodySchemaPhase0.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodySchemaPhase0.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -13,10 +13,10 @@\n \n package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.phase0;\n \n-import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.teku.bls.BLSSignature;\n+import java.util.function.Consumer;\n import tech.pegasys.teku.spec.config.SpecConfig;\n import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodySchema;\n import tech.pegasys.teku.spec.datastructures.blocks.blockbody.common.BlockBodyFields;\n import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n@@ -32,8 +32,6 @@\n import tech.pegasys.teku.ssz.schema.SszListSchema;\n import tech.pegasys.teku.ssz.schema.SszPrimitiveSchemas;\n import tech.pegasys.teku.ssz.tree.TreeNode;\n-import tech.pegasys.teku.util.config.Constants;\n-import tech.pegasys.teku.util.config.SpecDependent;\n \n public class BeaconBlockBodySchemaPhase0\n     extends ContainerSchema8<\n@@ -48,12 +46,6 @@\n         SszList<SignedVoluntaryExit>>\n     implements BeaconBlockBodySchema<BeaconBlockBodyPhase0> {\n \n-  // TODO(#3648) - remove this field (version schemas that depend on this field through\n-  // SchemaDefinitions)\n-  @Deprecated\n-  public static final SpecDependent<BeaconBlockBodySchemaPhase0> SSZ_SCHEMA =\n-      SpecDependent.of(BeaconBlockBodySchemaPhase0::create);\n-\n   private BeaconBlockBodySchemaPhase0(\n       NamedSchema<SszSignature> randaoRevealSchema,\n       NamedSchema<Eth1Data> eth1DataSchema,\n@@ -84,16 +76,6 @@ public static BeaconBlockBodySchemaPhase0 create(final SpecConfig specConfig) {\n         specConfig.getMaxVoluntaryExits());\n   }\n \n-  @Deprecated\n-  public static BeaconBlockBodySchemaPhase0 create() {\n-    return create(\n-        Constants.MAX_PROPOSER_SLASHINGS,\n-        Constants.MAX_ATTESTER_SLASHINGS,\n-        Constants.MAX_ATTESTATIONS,\n-        Constants.MAX_DEPOSITS,\n-        Constants.MAX_VOLUNTARY_EXITS);\n-  }\n-\n   private static BeaconBlockBodySchemaPhase0 create(\n       final long maxProposerSlashings,\n       final long maxAttesterSlashings,\n@@ -122,24 +104,10 @@ private static BeaconBlockBodySchemaPhase0 create(\n \n   @Override\n   public BeaconBlockBodyPhase0 createBlockBody(\n-      BLSSignature randao_reveal,\n-      Eth1Data eth1_data,\n-      Bytes32 graffiti,\n-      SszList<ProposerSlashing> proposer_slashings,\n-      SszList<AttesterSlashing> attester_slashings,\n-      SszList<Attestation> attestations,\n-      SszList<Deposit> deposits,\n-      SszList<SignedVoluntaryExit> voluntary_exits) {\n-    return new BeaconBlockBodyPhase0(\n-        this,\n-        new SszSignature(randao_reveal),\n-        eth1_data,\n-        SszBytes32.of(graffiti),\n-        proposer_slashings,\n-        attester_slashings,\n-        attestations,\n-        deposits,\n-        voluntary_exits);\n+      final Consumer<BeaconBlockBodyContent> builderConsumer) {\n+    final BeaconBlockBodyContentPhase0 builder = new BeaconBlockBodyContentPhase0().schema(this);\n+    builderConsumer.accept(builder);\n+    return builder.build();\n   }\n \n   @Override"
  },
  {
    "sha": "218c0fb5c8d344a780ad724ee0c1002c67a763c4",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/logic/common/util/BlockProposalUtil.java",
    "status": "modified",
    "additions": 4,
    "deletions": 27,
    "changes": 31,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/logic/common/util/BlockProposalUtil.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/logic/common/util/BlockProposalUtil.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/logic/common/util/BlockProposalUtil.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -15,24 +15,18 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n \n+import java.util.function.Consumer;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.teku.bls.BLSSignature;\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n import tech.pegasys.teku.spec.datastructures.blocks.BeaconBlock;\n import tech.pegasys.teku.spec.datastructures.blocks.BeaconBlockAndState;\n-import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBody;\n-import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n-import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n-import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n-import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n-import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n import tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState;\n import tech.pegasys.teku.spec.logic.common.statetransition.StateTransition;\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.BlockProcessingException;\n import tech.pegasys.teku.spec.logic.common.statetransition.exceptions.StateTransitionException;\n import tech.pegasys.teku.spec.schemas.SchemaDefinitions;\n-import tech.pegasys.teku.ssz.SszList;\n \n public class BlockProposalUtil {\n \n@@ -48,16 +42,9 @@ public BlockProposalUtil(\n   public BeaconBlockAndState createNewUnsignedBlock(\n       final UInt64 newSlot,\n       final int proposerIndex,\n-      final BLSSignature randaoReveal,\n       final BeaconState blockSlotState,\n       final Bytes32 parentBlockSigningRoot,\n-      final Eth1Data eth1Data,\n-      final Bytes32 graffiti,\n-      final SszList<Attestation> attestations,\n-      final SszList<ProposerSlashing> proposerSlashings,\n-      final SszList<AttesterSlashing> attesterSlashings,\n-      final SszList<Deposit> deposits,\n-      final SszList<SignedVoluntaryExit> voluntaryExits)\n+      final Consumer<BeaconBlockBodyContent> bodyBuilder)\n       throws StateTransitionException {\n     checkArgument(\n         blockSlotState.getSlot().equals(newSlot),\n@@ -67,17 +54,7 @@ public BeaconBlockAndState createNewUnsignedBlock(\n \n     // Create block body\n     final BeaconBlockBody beaconBlockBody =\n-        schemaDefinitions\n-            .getBeaconBlockBodySchema()\n-            .createBlockBody(\n-                randaoReveal,\n-                eth1Data,\n-                graffiti,\n-                proposerSlashings,\n-                attesterSlashings,\n-                attestations,\n-                deposits,\n-                voluntaryExits);\n+        schemaDefinitions.getBeaconBlockBodySchema().createBlockBody(bodyBuilder);\n \n     // Create initial block with some stubs\n     final Bytes32 tmpStateRoot = Bytes32.ZERO;"
  },
  {
    "sha": "f6358293749bf0eb6498dbacd5fa37322183be78",
    "filename": "ethereum/spec/src/main/java/tech/pegasys/teku/spec/schemas/SchemaDefinitionsAltair.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/schemas/SchemaDefinitionsAltair.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/main/java/tech/pegasys/teku/spec/schemas/SchemaDefinitionsAltair.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/main/java/tech/pegasys/teku/spec/schemas/SchemaDefinitionsAltair.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -13,11 +13,11 @@\n \n package tech.pegasys.teku.spec.schemas;\n \n-import org.apache.commons.lang3.NotImplementedException;\n import tech.pegasys.teku.spec.config.SpecConfig;\n import tech.pegasys.teku.spec.datastructures.blocks.BeaconBlockSchema;\n import tech.pegasys.teku.spec.datastructures.blocks.SignedBeaconBlockSchema;\n import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodySchema;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair.BeaconBlockBodySchemaAltair;\n import tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconStateSchema;\n import tech.pegasys.teku.spec.datastructures.state.beaconstate.versions.altair.BeaconStateSchemaAltair;\n \n@@ -45,7 +45,6 @@ public BeaconBlockSchema getBeaconBlockSchema() {\n \n   @Override\n   public BeaconBlockBodySchema<?> getBeaconBlockBodySchema() {\n-    // TODO(#3648) - Implement altair block body\n-    throw new NotImplementedException();\n+    return BeaconBlockBodySchemaAltair.create(specConfig);\n   }\n }"
  },
  {
    "sha": "f747a80c3ffa950f46fe9a9f625381e8cdda726f",
    "filename": "ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/AbstractBeaconBlockBodyTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 83,
    "changes": 125,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/AbstractBeaconBlockBodyTest.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/AbstractBeaconBlockBodyTest.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/common/AbstractBeaconBlockBodyTest.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -19,6 +19,7 @@\n \n import java.util.Collections;\n import java.util.List;\n+import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.tuweni.bytes.Bytes32;\n@@ -28,6 +29,7 @@\n import tech.pegasys.teku.spec.SpecFactory;\n import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBody;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodySchema;\n import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n@@ -45,25 +47,25 @@\n \n   protected final DataStructureUtil dataStructureUtil = new DataStructureUtil(spec);\n \n-  private final BLSSignature blsSignature = dataStructureUtil.randomSignature();\n-  private final Eth1Data eth1Data = dataStructureUtil.randomEth1Data();\n-  private final Bytes32 graffiti = dataStructureUtil.randomBytes32();\n-  private final SszList<ProposerSlashing> proposerSlashings =\n+  protected BLSSignature randaoReveal = dataStructureUtil.randomSignature();\n+  protected Eth1Data eth1Data = dataStructureUtil.randomEth1Data();\n+  protected Bytes32 graffiti = dataStructureUtil.randomBytes32();\n+  protected SszList<ProposerSlashing> proposerSlashings =\n       blockBodyLists.createProposerSlashings(\n           dataStructureUtil.randomProposerSlashing(),\n           dataStructureUtil.randomProposerSlashing(),\n           dataStructureUtil.randomProposerSlashing());\n-  private final SszList<AttesterSlashing> attesterSlashings =\n+  protected SszList<AttesterSlashing> attesterSlashings =\n       blockBodyLists.createAttesterSlashings(dataStructureUtil.randomAttesterSlashing());\n-  private final SszList<Attestation> attestations =\n+  protected SszList<Attestation> attestations =\n       blockBodyLists.createAttestations(\n           dataStructureUtil.randomAttestation(),\n           dataStructureUtil.randomAttestation(),\n           dataStructureUtil.randomAttestation());\n-  private final SszList<Deposit> deposits =\n+  protected SszList<Deposit> deposits =\n       blockBodyLists.createDeposits(\n           dataStructureUtil.randomDeposits(MAX_DEPOSITS).toArray(new Deposit[0]));\n-  private final SszList<SignedVoluntaryExit> voluntaryExits =\n+  protected SszList<SignedVoluntaryExit> voluntaryExits =\n       blockBodyLists.createVoluntaryExits(\n           dataStructureUtil.randomSignedVoluntaryExit(),\n           dataStructureUtil.randomSignedVoluntaryExit(),\n@@ -72,28 +74,16 @@\n   private final T defaultBlockBody = createDefaultBlockBody();\n   BeaconBlockBodySchema<?> blockBodySchema = defaultBlockBody.getSchema();\n \n-  protected abstract T createBlockBody(\n-      BLSSignature randaoReveal,\n-      Eth1Data eth1Data,\n-      Bytes32 graffiti,\n-      SszList<ProposerSlashing> proposerSlashings,\n-      SszList<AttesterSlashing> attesterSlashings,\n-      SszList<Attestation> attestations,\n-      SszList<Deposit> deposits,\n-      SszList<SignedVoluntaryExit> voluntaryExits);\n+  private T createBlockBody() {\n+    return createBlockBody(createContentProvider());\n+  }\n+\n+  protected abstract T createBlockBody(final Consumer<BeaconBlockBodyContent> contentProvider);\n \n   protected abstract BeaconBlockBodySchema<T> getBlockBodySchema();\n \n   protected T createDefaultBlockBody() {\n-    return createBlockBody(\n-        blsSignature,\n-        eth1Data,\n-        graffiti,\n-        proposerSlashings,\n-        attesterSlashings,\n-        attestations,\n-        deposits,\n-        voluntaryExits);\n+    return createBlockBody();\n   }\n \n   @Test\n@@ -118,95 +108,51 @@ void equalsReturnsTrueWhenObjectFieldsAreEqual() {\n   @Test\n   void equalsReturnsFalseWhenProposerSlashingsAreDifferent() {\n     // Create copy of proposerSlashings and reverse to ensure it is different.\n-    T testBeaconBlockBody =\n-        createBlockBody(\n-            blsSignature,\n-            eth1Data,\n-            graffiti,\n-            reversed(proposerSlashings),\n-            attesterSlashings,\n-            attestations,\n-            deposits,\n-            voluntaryExits);\n+    this.proposerSlashings = reversed(proposerSlashings);\n+    T testBeaconBlockBody = createBlockBody();\n \n     assertNotEquals(defaultBlockBody, testBeaconBlockBody);\n   }\n \n   @Test\n   void equalsReturnsFalseWhenAttesterSlashingsAreDifferent() {\n     // Create copy of attesterSlashings and change the element to ensure it is different.\n-    SszList<AttesterSlashing> otherAttesterSlashings =\n+    attesterSlashings =\n         Stream.concat(\n                 Stream.of(dataStructureUtil.randomAttesterSlashing()), attesterSlashings.stream())\n             .collect(blockBodySchema.getAttesterSlashingsSchema().collector());\n \n-    T testBeaconBlockBody =\n-        createBlockBody(\n-            blsSignature,\n-            eth1Data,\n-            graffiti,\n-            proposerSlashings,\n-            otherAttesterSlashings,\n-            attestations,\n-            deposits,\n-            voluntaryExits);\n+    T testBeaconBlockBody = createBlockBody();\n \n     assertNotEquals(defaultBlockBody, testBeaconBlockBody);\n   }\n \n   @Test\n   void equalsReturnsFalseWhenAttestationsAreDifferent() {\n     // Create copy of attestations and reverse to ensure it is different.\n-    SszList<Attestation> reverseAttestations = reversed(attestations);\n-\n-    T testBeaconBlockBody =\n-        createBlockBody(\n-            blsSignature,\n-            eth1Data,\n-            graffiti,\n-            proposerSlashings,\n-            attesterSlashings,\n-            reverseAttestations,\n-            deposits,\n-            voluntaryExits);\n+    attestations = reversed(attestations);\n+\n+    T testBeaconBlockBody = createBlockBody();\n \n     assertNotEquals(defaultBlockBody, testBeaconBlockBody);\n   }\n \n   @Test\n   void equalsReturnsFalseWhenDepositsAreDifferent() {\n     // Create copy of deposits and reverse to ensure it is different.\n-    SszList<Deposit> reverseDeposits = reversed(deposits);\n-\n-    T testBeaconBlockBody =\n-        createBlockBody(\n-            blsSignature,\n-            eth1Data,\n-            graffiti,\n-            proposerSlashings,\n-            attesterSlashings,\n-            attestations,\n-            reverseDeposits,\n-            voluntaryExits);\n+    deposits = reversed(deposits);\n+\n+    T testBeaconBlockBody = createBlockBody();\n \n     assertNotEquals(defaultBlockBody, testBeaconBlockBody);\n   }\n \n   @Test\n   void equalsReturnsFalseWhenExitsAreDifferent() {\n     // Create copy of exits and reverse to ensure it is different.\n-    SszList<SignedVoluntaryExit> reverseVoluntaryExits = reversed(voluntaryExits);\n-\n-    T testBeaconBlockBody =\n-        createBlockBody(\n-            blsSignature,\n-            eth1Data,\n-            graffiti,\n-            proposerSlashings,\n-            attesterSlashings,\n-            attestations,\n-            deposits,\n-            reverseVoluntaryExits);\n+    voluntaryExits = reversed(voluntaryExits);\n+\n+    T testBeaconBlockBody = createBlockBody();\n \n     assertNotEquals(defaultBlockBody, testBeaconBlockBody);\n   }\n@@ -217,4 +163,17 @@ void roundTripsViaSsz() {\n         getBlockBodySchema().sszDeserialize(defaultBlockBody.sszSerialize());\n     assertEquals(defaultBlockBody, newBeaconBlockBody);\n   }\n+\n+  protected Consumer<BeaconBlockBodyContent> createContentProvider() {\n+    return builder ->\n+        builder\n+            .randaoReveal(randaoReveal)\n+            .eth1Data(eth1Data)\n+            .graffiti(graffiti)\n+            .attestations(attestations)\n+            .proposerSlashings(proposerSlashings)\n+            .attesterSlashings(attesterSlashings)\n+            .deposits(deposits)\n+            .voluntaryExits(voluntaryExits);\n+  }\n }"
  },
  {
    "sha": "a5b3b1aa3e2a5d9f1df4f20444e4a756b3922273",
    "filename": "ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyAltairTest.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyAltairTest.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyAltairTest.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/altair/BeaconBlockBodyAltairTest.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2021 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.altair;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.function.Consumer;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodySchema;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.common.AbstractBeaconBlockBodyTest;\n+\n+class BeaconBlockBodyAltairTest extends AbstractBeaconBlockBodyTest<BeaconBlockBodyAltair> {\n+\n+  @Test\n+  void shouldCreateWithEmtpySyncAggregate() {\n+    // This won't always be true but until we can calculate the actual SyncAggregate, use the empty\n+    // one to make the block valid\n+\n+    final BeaconBlockBodyAltair blockBody = createDefaultBlockBody();\n+    final SyncAggregate emptySyncAggregate =\n+        SyncAggregateSchema.create(\n+                spec.getGenesisSpecConfig().toVersionAltair().orElseThrow().getSyncCommitteeSize())\n+            .createEmpty();\n+    assertThat(blockBody.getSyncAggregate()).isEqualTo(emptySyncAggregate);\n+  }\n+\n+  @Override\n+  protected BeaconBlockBodyAltair createBlockBody(\n+      final Consumer<BeaconBlockBodyContent> contentProvider) {\n+    return getBlockBodySchema().createBlockBody(contentProvider);\n+  }\n+\n+  @Override\n+  protected BeaconBlockBodySchema<BeaconBlockBodyAltair> getBlockBodySchema() {\n+    return BeaconBlockBodySchemaAltair.create(spec.getGenesisSpecConfig());\n+  }\n+}"
  },
  {
    "sha": "15abf057b903131c11b555f867cd2f28f25f2161",
    "filename": "ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0Test.java",
    "status": "modified",
    "additions": 4,
    "deletions": 27,
    "changes": 31,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0Test.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0Test.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodyPhase0Test.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -13,40 +13,17 @@\n \n package tech.pegasys.teku.spec.datastructures.blocks.blockbody.versions.phase0;\n \n-import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.teku.bls.BLSSignature;\n-import tech.pegasys.teku.spec.datastructures.blocks.Eth1Data;\n+import java.util.function.Consumer;\n+import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodyContent;\n import tech.pegasys.teku.spec.datastructures.blocks.blockbody.BeaconBlockBodySchema;\n import tech.pegasys.teku.spec.datastructures.blocks.blockbody.common.AbstractBeaconBlockBodyTest;\n-import tech.pegasys.teku.spec.datastructures.operations.Attestation;\n-import tech.pegasys.teku.spec.datastructures.operations.AttesterSlashing;\n-import tech.pegasys.teku.spec.datastructures.operations.Deposit;\n-import tech.pegasys.teku.spec.datastructures.operations.ProposerSlashing;\n-import tech.pegasys.teku.spec.datastructures.operations.SignedVoluntaryExit;\n-import tech.pegasys.teku.ssz.SszList;\n \n public class BeaconBlockBodyPhase0Test extends AbstractBeaconBlockBodyTest<BeaconBlockBodyPhase0> {\n \n   @Override\n   protected BeaconBlockBodyPhase0 createBlockBody(\n-      final BLSSignature randaoReveal,\n-      final Eth1Data eth1Data,\n-      final Bytes32 graffiti,\n-      final SszList<ProposerSlashing> proposerSlashings,\n-      final SszList<AttesterSlashing> attesterSlashings,\n-      final SszList<Attestation> attestations,\n-      final SszList<Deposit> deposits,\n-      final SszList<SignedVoluntaryExit> voluntaryExits) {\n-    return getBlockBodySchema()\n-        .createBlockBody(\n-            randaoReveal,\n-            eth1Data,\n-            graffiti,\n-            proposerSlashings,\n-            attesterSlashings,\n-            attestations,\n-            deposits,\n-            voluntaryExits);\n+      final Consumer<BeaconBlockBodyContent> contentProvider) {\n+    return getBlockBodySchema().createBlockBody(contentProvider);\n   }\n \n   @Override"
  },
  {
    "sha": "6b707e17e4c2f426e0466c7e664a9fa90c29eebc",
    "filename": "ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodySchemaPhase0Test.java",
    "status": "modified",
    "additions": 9,
    "deletions": 26,
    "changes": 35,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodySchemaPhase0Test.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodySchemaPhase0Test.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/test/java/tech/pegasys/teku/spec/datastructures/blocks/blockbody/versions/phase0/BeaconBlockBodySchemaPhase0Test.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -18,44 +18,27 @@\n import org.junit.jupiter.api.Test;\n import tech.pegasys.teku.spec.Spec;\n import tech.pegasys.teku.spec.SpecFactory;\n-import tech.pegasys.teku.util.config.Constants;\n-import tech.pegasys.teku.util.config.SpecDependent;\n+import tech.pegasys.teku.spec.config.SpecConfig;\n \n public class BeaconBlockBodySchemaPhase0Test {\n-  public void tearDown() {\n-    Constants.setConstants(\"minimal\");\n-    SpecDependent.resetAll();\n-  }\n \n   @Test\n   public void create_minimal() {\n-    final Spec spec = setupMinimalSpec();\n-    final BeaconBlockBodySchemaPhase0 specA =\n-        BeaconBlockBodySchemaPhase0.create(spec.getGenesisSpecConfig());\n-    final BeaconBlockBodySchemaPhase0 specB = BeaconBlockBodySchemaPhase0.create();\n+    final Spec spec = SpecFactory.createMinimal();\n+    final SpecConfig specConfig = spec.getGenesisSpecConfig();\n+    final BeaconBlockBodySchemaPhase0 specA = BeaconBlockBodySchemaPhase0.create(specConfig);\n+    final BeaconBlockBodySchemaPhase0 specB = BeaconBlockBodySchemaPhase0.create(specConfig);\n \n     assertThat(specA).isEqualTo(specB);\n   }\n \n   @Test\n   public void create_mainnet() {\n-    final Spec spec = setupMainnetSpec();\n-    final BeaconBlockBodySchemaPhase0 specA =\n-        BeaconBlockBodySchemaPhase0.create(spec.getGenesisSpecConfig());\n-    final BeaconBlockBodySchemaPhase0 specB = BeaconBlockBodySchemaPhase0.create();\n+    final Spec spec = SpecFactory.createMainnet();\n+    final SpecConfig specConfig = spec.getGenesisSpecConfig();\n+    final BeaconBlockBodySchemaPhase0 specA = BeaconBlockBodySchemaPhase0.create(specConfig);\n+    final BeaconBlockBodySchemaPhase0 specB = BeaconBlockBodySchemaPhase0.create(specConfig);\n \n     assertThat(specA).isEqualTo(specB);\n   }\n-\n-  private Spec setupMinimalSpec() {\n-    Constants.setConstants(\"minimal\");\n-    SpecDependent.resetAll();\n-    return SpecFactory.createMinimal();\n-  }\n-\n-  private Spec setupMainnetSpec() {\n-    Constants.setConstants(\"mainnet\");\n-    SpecDependent.resetAll();\n-    return SpecFactory.createMainnet();\n-  }\n }"
  },
  {
    "sha": "329d653c92c4dddc61a757eefb47e0d8e33dbe94",
    "filename": "ethereum/spec/src/testFixtures/java/tech/pegasys/teku/spec/util/DataStructureUtil.java",
    "status": "modified",
    "additions": 36,
    "deletions": 16,
    "changes": 52,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/testFixtures/java/tech/pegasys/teku/spec/util/DataStructureUtil.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/ethereum/spec/src/testFixtures/java/tech/pegasys/teku/spec/util/DataStructureUtil.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/ethereum/spec/src/testFixtures/java/tech/pegasys/teku/spec/util/DataStructureUtil.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -523,28 +523,48 @@ public BeaconBlockBody randomBeaconBlockBody() {\n     BeaconBlockBodySchema<?> schema =\n         spec.getGenesisSpec().getSchemaDefinitions().getBeaconBlockBodySchema();\n     return schema.createBlockBody(\n-        randomSignature(),\n-        randomEth1Data(),\n-        Bytes32.ZERO,\n-        randomSszList(schema.getProposerSlashingsSchema(), this::randomProposerSlashing, 1),\n-        randomSszList(schema.getAttesterSlashingsSchema(), this::randomAttesterSlashing, 1),\n-        randomSszList(schema.getAttestationsSchema(), this::randomAttestation, 3),\n-        randomSszList(schema.getDepositsSchema(), this::randomDepositWithoutIndex, 1),\n-        randomSszList(schema.getVoluntaryExitsSchema(), this::randomSignedVoluntaryExit, 1));\n+        builder ->\n+            builder\n+                .randaoReveal(randomSignature())\n+                .eth1Data(randomEth1Data())\n+                .graffiti(Bytes32.ZERO)\n+                .attestations(\n+                    randomSszList(schema.getAttestationsSchema(), this::randomAttestation, 3))\n+                .proposerSlashings(\n+                    randomSszList(\n+                        schema.getProposerSlashingsSchema(), this::randomProposerSlashing, 1))\n+                .attesterSlashings(\n+                    randomSszList(\n+                        schema.getAttesterSlashingsSchema(), this::randomAttesterSlashing, 1))\n+                .deposits(\n+                    randomSszList(schema.getDepositsSchema(), this::randomDepositWithoutIndex, 1))\n+                .voluntaryExits(\n+                    randomSszList(\n+                        schema.getVoluntaryExitsSchema(), this::randomSignedVoluntaryExit, 1)));\n   }\n \n   public BeaconBlockBody randomFullBeaconBlockBody() {\n     BeaconBlockBodySchema<?> schema =\n         spec.getGenesisSpec().getSchemaDefinitions().getBeaconBlockBodySchema();\n     return schema.createBlockBody(\n-        randomSignature(),\n-        randomEth1Data(),\n-        Bytes32.ZERO,\n-        randomFullSszList(schema.getProposerSlashingsSchema(), this::randomProposerSlashing),\n-        randomFullSszList(schema.getAttesterSlashingsSchema(), this::randomAttesterSlashing),\n-        randomFullSszList(schema.getAttestationsSchema(), this::randomAttestation),\n-        randomFullSszList(schema.getDepositsSchema(), this::randomDepositWithoutIndex),\n-        randomFullSszList(schema.getVoluntaryExitsSchema(), this::randomSignedVoluntaryExit));\n+        builder ->\n+            builder\n+                .randaoReveal(randomSignature())\n+                .eth1Data(randomEth1Data())\n+                .graffiti(Bytes32.ZERO)\n+                .attestations(\n+                    randomFullSszList(schema.getAttestationsSchema(), this::randomAttestation))\n+                .proposerSlashings(\n+                    randomFullSszList(\n+                        schema.getProposerSlashingsSchema(), this::randomProposerSlashing))\n+                .attesterSlashings(\n+                    randomFullSszList(\n+                        schema.getAttesterSlashingsSchema(), this::randomAttesterSlashing))\n+                .deposits(\n+                    randomFullSszList(schema.getDepositsSchema(), this::randomDepositWithoutIndex))\n+                .voluntaryExits(\n+                    randomFullSszList(\n+                        schema.getVoluntaryExitsSchema(), this::randomSignedVoluntaryExit)));\n   }\n \n   public ProposerSlashing randomProposerSlashing() {"
  },
  {
    "sha": "5a38df04adcdea92ef1e30e12ab603d948dbad82",
    "filename": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/BlockFactory.java",
    "status": "modified",
    "additions": 11,
    "deletions": 8,
    "changes": 19,
    "blob_url": "https://github.com/ConsenSys/teku/blob/95e9840b596172c700169dae4fa901a7530978bb/validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/BlockFactory.java",
    "raw_url": "https://github.com/ConsenSys/teku/raw/95e9840b596172c700169dae4fa901a7530978bb/validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/BlockFactory.java",
    "contents_url": "https://api.github.com/repos/ConsenSys/teku/contents/validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/BlockFactory.java?ref=95e9840b596172c700169dae4fa901a7530978bb",
    "patch": "@@ -113,20 +113,23 @@ public BeaconBlock createUnsignedBlock(\n     final SszList<Deposit> deposits = depositProvider.getDeposits(blockPreState, eth1Data);\n \n     final Bytes32 parentRoot = spec.getBlockRootAtSlot(blockSlotState, slotBeforeBlock);\n+    final Eth1Data eth1Vote = eth1DataCache.getEth1Vote(blockPreState);\n \n     return spec.createNewUnsignedBlock(\n             newSlot,\n             spec.getBeaconProposerIndex(blockSlotState, newSlot),\n-            randaoReveal,\n             blockSlotState,\n             parentRoot,\n-            eth1Data,\n-            optionalGraffiti.orElse(graffiti),\n-            attestations,\n-            proposerSlashings,\n-            attesterSlashings,\n-            deposits,\n-            voluntaryExits)\n+            bodyBuilder ->\n+                bodyBuilder\n+                    .randaoReveal(randaoReveal)\n+                    .eth1Data(eth1Vote)\n+                    .graffiti(optionalGraffiti.orElse(graffiti))\n+                    .attestations(attestations)\n+                    .proposerSlashings(proposerSlashings)\n+                    .attesterSlashings(attesterSlashings)\n+                    .deposits(deposits)\n+                    .voluntaryExits(voluntaryExits))\n         .getBlock();\n   }\n }"
  }
]
