[
  {
    "sha": "ee35a1e8288fa8077f468386a0690daa894574bd",
    "filename": "core/src/main/java/org/pentaho/di/core/database/AzureSqlDataBaseMeta.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/maintell/pentaho-kettle/blob/746d96b10051c86b1f488b67ed19b359fb65ca1c/core/src/main/java/org/pentaho/di/core/database/AzureSqlDataBaseMeta.java",
    "raw_url": "https://github.com/maintell/pentaho-kettle/raw/746d96b10051c86b1f488b67ed19b359fb65ca1c/core/src/main/java/org/pentaho/di/core/database/AzureSqlDataBaseMeta.java",
    "contents_url": "https://api.github.com/repos/maintell/pentaho-kettle/contents/core/src/main/java/org/pentaho/di/core/database/AzureSqlDataBaseMeta.java?ref=746d96b10051c86b1f488b67ed19b359fb65ca1c",
    "patch": "@@ -0,0 +1,106 @@\n+/*! ******************************************************************************\n+ *\n+ * Pentaho Data Integration\n+ *\n+ * Copyright (C) 2002-2021 by Hitachi Vantara : http://www.pentaho.com\n+ *\n+ *******************************************************************************\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ ******************************************************************************/\n+package org.pentaho.di.core.database;\n+\n+import org.pentaho.di.core.exception.KettleDatabaseException;\n+import org.pentaho.di.core.row.ValueMetaInterface;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+/**\n+ * @author patitapaban19\n+ *\n+ */\n+public class AzureSqlDataBaseMeta extends MSSQLServerDatabaseMeta {\n+\n+  public static final String JDBC_AUTH_METHOD = \"jdbcAuthMethod\";\n+  public static final String IS_ALWAYS_ENCRYPTION_ENABLED = \"azureAlwaysEncryptionEnabled\";\n+  public static final String CLIENT_ID = \"azureClientSecretId\";\n+  public static final String CLIENT_SECRET_KEY = \"azureClientSecretKey\";\n+\n+  public static final String SQL_AUTHENTICATION = \"SQL Server Authentication\";\n+  public static final String ACTIVE_DIRECTORY_PASSWORD = \"Azure Active Directory - Password\";\n+  public static final String ACTIVE_DIRECTORY_MFA = \"Azure Active Directory - Universal With MFA\";\n+\n+\n+  @Override\n+  public int[] getAccessTypeList() {\n+    return new int[] { DatabaseMeta.TYPE_ACCESS_NATIVE, DatabaseMeta.TYPE_ACCESS_JNDI };\n+  }\n+\n+  @Override\n+  public String getDriverClass() {\n+    return \"com.microsoft.sqlserver.jdbc.SQLServerDriver\";\n+  }\n+\n+  @Override\n+  public String getURL( String hostname, String port, String databaseName ) {\n+    String url = \"jdbc:sqlserver://\" + hostname + \":\" + port + \";database=\" + databaseName + \";encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n+    if ( getAttribute( IS_ALWAYS_ENCRYPTION_ENABLED, \"\" ).equals( \"true\" ) ) {\n+      url += \"columnEncryptionSetting=Enabled;keyVaultProviderClientId=\" + getAttribute( CLIENT_ID, \"\" ) + \";keyVaultProviderClientKey=\" + getAttribute( CLIENT_SECRET_KEY, \"\" ) + \";\";\n+    }\n+    if ( ACTIVE_DIRECTORY_PASSWORD.equals( getAttribute( JDBC_AUTH_METHOD, \"\" ) ) ) {\n+      return url + \"authentication=ActiveDirectoryPassword;\";\n+    } else if ( ACTIVE_DIRECTORY_MFA.equals( getAttribute( JDBC_AUTH_METHOD, \"\" ) ) ) {\n+      return url + \"authentication=ActiveDirectoryInteractive;\";\n+    } else {\n+      return url;\n+    }\n+  }\n+\n+  /**\n+   * This method allows a database dialect to convert database specific data types to Kettle data types.\n+   *\n+   * @param rs\n+   *          The result set to use\n+   * @param val\n+   *          The description of the value to retrieve\n+   * @param index\n+   *          the index on which we need to retrieve the value, 0-based.\n+   * @return The correctly converted Kettle data type corresponding to the valueMeta description.\n+   * @throws KettleDatabaseException\n+   */\n+  @Override\n+  public Object getValueFromResultSet( ResultSet rs, ValueMetaInterface val, int index ) throws KettleDatabaseException {\n+    Object data;\n+    try {\n+      if ( val.getType() == ValueMetaInterface.TYPE_BINARY ) {\n+        data = rs.getString( index + 1 );\n+      } else {\n+        return super.getValueFromResultSet( rs, val, index );\n+      }\n+      if ( rs.wasNull() ) {\n+        data = null;\n+      }\n+    } catch ( SQLException e ) {\n+      throw new KettleDatabaseException( \"Unable to get value '\"\n+          + val.toStringMeta() + \"' from database resultset, index \" + index, e );\n+    }\n+    return data;\n+  }\n+\n+  @Override\n+  public String getXulOverlayFile() {\n+    return \"azuresqldb\";\n+  }\n+}"
  },
  {
    "sha": "685ed0ce4ff6a7f41229778003de0b9bd31b5a86",
    "filename": "core/src/main/java/org/pentaho/di/core/row/value/ValueMetaBase.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/maintell/pentaho-kettle/blob/746d96b10051c86b1f488b67ed19b359fb65ca1c/core/src/main/java/org/pentaho/di/core/row/value/ValueMetaBase.java",
    "raw_url": "https://github.com/maintell/pentaho-kettle/raw/746d96b10051c86b1f488b67ed19b359fb65ca1c/core/src/main/java/org/pentaho/di/core/row/value/ValueMetaBase.java",
    "contents_url": "https://api.github.com/repos/maintell/pentaho-kettle/contents/core/src/main/java/org/pentaho/di/core/row/value/ValueMetaBase.java?ref=746d96b10051c86b1f488b67ed19b359fb65ca1c",
    "patch": "@@ -1886,7 +1886,11 @@ public String getString( Object object ) throws KettleValueException {\n         case TYPE_BINARY:\n           switch ( storageType ) {\n             case STORAGE_TYPE_NORMAL:\n-              string = convertBinaryStringToString( (byte[]) object );\n+              if ( object instanceof java.lang.String ) {\n+                string = (String) object;\n+              } else {\n+                string = convertBinaryStringToString( (byte[]) object );\n+              }\n               break;\n             case STORAGE_TYPE_BINARY_STRING:\n               string = convertBinaryStringToString( (byte[]) object );"
  },
  {
    "sha": "e4471c4a13b2d06232733754854702cca8f72c87",
    "filename": "core/src/main/resources/kettle-database-types.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/maintell/pentaho-kettle/blob/746d96b10051c86b1f488b67ed19b359fb65ca1c/core/src/main/resources/kettle-database-types.xml",
    "raw_url": "https://github.com/maintell/pentaho-kettle/raw/746d96b10051c86b1f488b67ed19b359fb65ca1c/core/src/main/resources/kettle-database-types.xml",
    "contents_url": "https://api.github.com/repos/maintell/pentaho-kettle/contents/core/src/main/resources/kettle-database-types.xml?ref=746d96b10051c86b1f488b67ed19b359fb65ca1c",
    "patch": "@@ -225,4 +225,9 @@\n     <classname>org.pentaho.di.core.database.SnowflakeHVDatabaseMeta</classname>\n   </database-type>\n \n- </database-types>\n+  <database-type id=\"AZURESQLDB\">\n+    <description>Azure SQL DB</description>\n+    <classname>org.pentaho.di.core.database.AzureSqlDataBaseMeta</classname>\n+  </database-type>\n+\n+</database-types>"
  },
  {
    "sha": "118be73e5173bd7e2094df739acb77db0b8c236e",
    "filename": "core/src/test/java/org/pentaho/di/core/database/AzureSqlDataBaseMetaTest.java",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/maintell/pentaho-kettle/blob/746d96b10051c86b1f488b67ed19b359fb65ca1c/core/src/test/java/org/pentaho/di/core/database/AzureSqlDataBaseMetaTest.java",
    "raw_url": "https://github.com/maintell/pentaho-kettle/raw/746d96b10051c86b1f488b67ed19b359fb65ca1c/core/src/test/java/org/pentaho/di/core/database/AzureSqlDataBaseMetaTest.java",
    "contents_url": "https://api.github.com/repos/maintell/pentaho-kettle/contents/core/src/test/java/org/pentaho/di/core/database/AzureSqlDataBaseMetaTest.java?ref=746d96b10051c86b1f488b67ed19b359fb65ca1c",
    "patch": "@@ -0,0 +1,135 @@\n+/*! ******************************************************************************\n+ *\n+ * Pentaho Data Integration\n+ *\n+ * Copyright (C) 2002-2021 by Hitachi Vantara : http://www.pentaho.com\n+ *\n+ *******************************************************************************\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ ******************************************************************************/\n+package org.pentaho.di.core.database;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.pentaho.di.core.exception.KettleDatabaseException;\n+import org.pentaho.di.core.row.value.ValueMetaBinary;\n+import org.pentaho.di.core.row.value.ValueMetaString;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.mock;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.IS_ALWAYS_ENCRYPTION_ENABLED;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.CLIENT_ID;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.CLIENT_SECRET_KEY;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.JDBC_AUTH_METHOD;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.SQL_AUTHENTICATION;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.ACTIVE_DIRECTORY_MFA;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.ACTIVE_DIRECTORY_PASSWORD;\n+\n+public class AzureSqlDataBaseMetaTest {\n+\n+  private AzureSqlDataBaseMeta dbMeta;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    dbMeta = new AzureSqlDataBaseMeta();\n+    dbMeta.setAccessType( DatabaseMeta.TYPE_ACCESS_NATIVE );\n+  }\n+\n+  @Test\n+  public void testGetAccessTypeList() {\n+    int[] accessTypeList = dbMeta.getAccessTypeList();\n+    assertEquals( 0, accessTypeList[0] );\n+    assertEquals( 4, accessTypeList[1] );\n+  }\n+\n+  @Test\n+  public void testGetDriverClass() throws Exception {\n+    assertEquals( \"com.microsoft.sqlserver.jdbc.SQLServerDriver\", dbMeta.getDriverClass() );\n+  }\n+\n+  @Test\n+  public void testAlwaysEncryptionParameterIncludedInUrl() {\n+    dbMeta.setAccessType( DatabaseMeta.TYPE_ACCESS_NATIVE );\n+    dbMeta.addAttribute( IS_ALWAYS_ENCRYPTION_ENABLED, \"true\" );\n+    dbMeta.addAttribute( CLIENT_ID, \"dummy\" );\n+    dbMeta.addAttribute( CLIENT_SECRET_KEY, \"xxxxx\" );\n+    String expectedUrl = \"jdbc:sqlserver://abc.database.windows.net:1433;database=AzureDB;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;columnEncryptionSetting=Enabled;keyVaultProviderClientId=dummy;keyVaultProviderClientKey=xxxxx;\";\n+    String actualUrl = dbMeta.getURL( \"abc.database.windows.net\", \"1433\", \"AzureDB\" );\n+    assertEquals( expectedUrl, actualUrl );\n+  }\n+\n+  @Test\n+  public void testGetUrlWithSqlAuth(){\n+    dbMeta.setAccessType( DatabaseMeta.TYPE_ACCESS_NATIVE );\n+    dbMeta.addAttribute( IS_ALWAYS_ENCRYPTION_ENABLED, \"false\" );\n+    dbMeta.addAttribute( JDBC_AUTH_METHOD, SQL_AUTHENTICATION );\n+    String expectedUrl = \"jdbc:sqlserver://abc.database.windows.net:1433;database=AzureDB;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n+    String actualUrl = dbMeta.getURL( \"abc.database.windows.net\", \"1433\", \"AzureDB\" );\n+    assertEquals( expectedUrl, actualUrl );\n+  }\n+\n+  @Test\n+  public void testGetUrlWithAadPasswordAuth(){\n+    dbMeta.setAccessType( DatabaseMeta.TYPE_ACCESS_NATIVE );\n+    dbMeta.addAttribute( IS_ALWAYS_ENCRYPTION_ENABLED, \"false\" );\n+    dbMeta.addAttribute( JDBC_AUTH_METHOD, ACTIVE_DIRECTORY_PASSWORD );\n+    String expectedUrl = \"jdbc:sqlserver://abc.database.windows.net:1433;database=AzureDB;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;authentication=ActiveDirectoryPassword;\";\n+    String actualUrl = dbMeta.getURL( \"abc.database.windows.net\", \"1433\", \"AzureDB\" );\n+    assertEquals( expectedUrl, actualUrl );\n+  }\n+\n+  @Test\n+  public void testGetUrlWithAadMfaAuth(){\n+    dbMeta.setAccessType( DatabaseMeta.TYPE_ACCESS_NATIVE );\n+    dbMeta.addAttribute( IS_ALWAYS_ENCRYPTION_ENABLED, \"false\" );\n+    dbMeta.addAttribute( JDBC_AUTH_METHOD, ACTIVE_DIRECTORY_MFA );\n+    String expectedUrl = \"jdbc:sqlserver://abc.database.windows.net:1433;database=AzureDB;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;authentication=ActiveDirectoryInteractive;\";\n+    String actualUrl = dbMeta.getURL( \"abc.database.windows.net\", \"1433\", \"AzureDB\" );\n+    assertEquals( expectedUrl, actualUrl );\n+  }\n+\n+  @Test\n+  public void testGetValueFromResultSet() throws SQLException, KettleDatabaseException {\n+    ResultSet rs = mock( ResultSet.class );\n+    //Binary Data\n+    Mockito.when( rs.getString( 1 ) ).thenReturn( \"HODBACXXXXAAA\" );\n+    ValueMetaBinary tb = new ValueMetaBinary( \"HODBACXXXXAAA\" );\n+    assertEquals( \"HODBACXXXXAAA\", dbMeta.getValueFromResultSet( rs,tb,0 ) );\n+\n+   //Super class function calling\n+    Mockito.when( rs.getString( 2 ) ).thenReturn( \"AzureDB\" );\n+    ValueMetaString ts = new ValueMetaString( \"AzureDB\" );\n+    assertEquals( \"AzureDB\", dbMeta.getValueFromResultSet( rs,ts,1 ) );\n+\n+    //ResultSet was null\n+    Mockito.when( rs.wasNull() ).thenReturn( true );\n+    assertNull( dbMeta.getValueFromResultSet( rs,tb,2 ) );\n+\n+  }\n+\n+  @Test(expected = KettleDatabaseException.class)\n+  public void testGetValueFromResultSetWhenExceptionIsComing() throws SQLException, KettleDatabaseException {\n+    ResultSet rs = mock( ResultSet.class );\n+    Mockito.when( rs.getString( 3 ) ).thenThrow( SQLException.class );\n+    ValueMetaString ts = new ValueMetaString( \"AzureDB\" );\n+    dbMeta.getValueFromResultSet( rs,ts,2 );\n+  }\n+\n+}"
  },
  {
    "sha": "5b12da4206201ac0ca8ffdddd84918628b6cbafb",
    "filename": "dbdialog/src/main/java/org/pentaho/ui/database/event/DataHandler.java",
    "status": "modified",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/maintell/pentaho-kettle/blob/746d96b10051c86b1f488b67ed19b359fb65ca1c/dbdialog/src/main/java/org/pentaho/ui/database/event/DataHandler.java",
    "raw_url": "https://github.com/maintell/pentaho-kettle/raw/746d96b10051c86b1f488b67ed19b359fb65ca1c/dbdialog/src/main/java/org/pentaho/ui/database/event/DataHandler.java",
    "contents_url": "https://api.github.com/repos/maintell/pentaho-kettle/contents/dbdialog/src/main/java/org/pentaho/ui/database/event/DataHandler.java?ref=746d96b10051c86b1f488b67ed19b359fb65ca1c",
    "patch": "@@ -79,6 +79,10 @@\n import org.pentaho.ui.xul.containers.XulWindow;\n import org.pentaho.ui.xul.impl.AbstractXulEventHandler;\n \n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.CLIENT_SECRET_KEY;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.CLIENT_ID;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.IS_ALWAYS_ENCRYPTION_ENABLED;\n+import static org.pentaho.di.core.database.AzureSqlDataBaseMeta.SQL_AUTHENTICATION;\n import static org.pentaho.di.core.database.BaseDatabaseMeta.ATTRIBUTE_PREFIX_EXTRA_OPTION;\n import static org.pentaho.di.core.database.RedshiftDatabaseMeta.IAM_ACCESS_KEY_ID;\n import static org.pentaho.di.core.database.RedshiftDatabaseMeta.IAM_CREDENTIALS;\n@@ -272,6 +276,12 @@ public void databaseTypeRemoved( String pluginName ) {\n   private XulTextbox iamProfileName;\n   protected XulMenuList namedClusterList;\n \n+  //Azure SQL DB Variables\n+  private XulMenuList azureSqlDBJdbcAuthMethod;\n+  private XulCheckbox azureSqlDBAlwaysEncryptionEnabled;\n+  private XulTextbox azureSqlDBClientSecretId;\n+  private XulTextbox azureSqlDBClientSecretKey;\n+\n   public DataHandler() {\n     databaseDialects = new ArrayList<String>();\n     DatabaseInterface[] dialectMetas = DatabaseMeta.getDatabaseInterfaces();\n@@ -959,6 +969,25 @@ private void setInfo( DatabaseMeta meta ) {\n     setDeckChildIndex();\n     onPoolingCheck();\n     onClusterCheck();\n+    enableAzureSqlDBEncryption();\n+  }\n+\n+  public void setAzureSqlDBAuthRelatedFieldsVisible() {\n+    passwordBox.setDisabled( azureSqlDBJdbcAuthMethod != null && \"Azure Active Directory - Universal With MFA\".equals( azureSqlDBJdbcAuthMethod.getValue() ) );\n+  }\n+\n+  public void enableAzureSqlDBEncryption() {\n+    if ( azureSqlDBAlwaysEncryptionEnabled != null ) {\n+      boolean isAlwaysEncryptionEnabled = azureSqlDBAlwaysEncryptionEnabled.isChecked();\n+      if ( !isAlwaysEncryptionEnabled ) {\n+        azureSqlDBClientSecretId.setDisabled( true );\n+        azureSqlDBClientSecretKey.setDisabled( true );\n+      } else {\n+        azureSqlDBClientSecretId.setDisabled( false );\n+        azureSqlDBClientSecretKey.setDisabled( false );\n+      }\n+    }\n+\n   }\n \n   @SuppressWarnings ( \"unused\" )\n@@ -1374,6 +1403,25 @@ protected void getConnectionSpecificInfo( DatabaseMeta meta ) {\n         MSSQLServerNativeDatabaseMeta.ATTRIBUTE_USE_INTEGRATED_SECURITY,\n         useIntegratedSecurity != null ? useIntegratedSecurity.toString() : \"false\" );\n     }\n+    //Azure SQL DB\n+    if ( azureSqlDBJdbcAuthMethod != null ) {\n+      meta.getAttributes().put( JDBC_AUTH_METHOD, azureSqlDBJdbcAuthMethod.getValue() );\n+    }\n+\n+    if ( azureSqlDBClientSecretId != null ) {\n+      meta.getAttributes().put( CLIENT_ID, azureSqlDBClientSecretId.getValue() );\n+    }\n+    if ( azureSqlDBAlwaysEncryptionEnabled != null ) {\n+      if ( azureSqlDBAlwaysEncryptionEnabled.isChecked() ) {\n+        meta.getAttributes().put( IS_ALWAYS_ENCRYPTION_ENABLED, \"true\" );\n+      } else {\n+        meta.getAttributes().put( IS_ALWAYS_ENCRYPTION_ENABLED, \"false\" );\n+      }\n+    }\n+\n+    if ( azureSqlDBClientSecretKey != null ) {\n+      meta.getAttributes().put( CLIENT_SECRET_KEY, azureSqlDBClientSecretKey.getValue() );\n+    }\n \n     if ( jdbcAuthMethod != null ) {\n       meta.getAttributes().put( JDBC_AUTH_METHOD, jdbcAuthMethod.getValue() );\n@@ -1525,6 +1573,22 @@ protected void setConnectionSpecificInfo( DatabaseMeta meta ) {\n       }\n     }\n \n+    if ( azureSqlDBJdbcAuthMethod != null ) {\n+      azureSqlDBJdbcAuthMethod.setValue( meta.getAttributes().getProperty( JDBC_AUTH_METHOD, SQL_AUTHENTICATION ) );\n+    }\n+\n+    if ( azureSqlDBAlwaysEncryptionEnabled != null && meta.getAttributes().getProperty( IS_ALWAYS_ENCRYPTION_ENABLED ) != null ) {\n+      azureSqlDBAlwaysEncryptionEnabled.setChecked( meta.getAttributes().getProperty( IS_ALWAYS_ENCRYPTION_ENABLED ).equals( \"true\" ) );\n+    }\n+\n+    if ( azureSqlDBClientSecretId != null ) {\n+      azureSqlDBClientSecretId.setValue( meta.getAttributes().getProperty( CLIENT_ID ) );\n+    }\n+\n+    if ( azureSqlDBClientSecretKey != null ) {\n+      azureSqlDBClientSecretKey.setValue( meta.getAttributes().getProperty( CLIENT_SECRET_KEY ) );\n+    }\n+\n     if ( jdbcAuthMethod != null ) {\n       jdbcAuthMethod.setValue( meta.getAttributes().getProperty( JDBC_AUTH_METHOD, STANDARD_CREDENTIALS ) );\n       setAuthFieldsVisible();\n@@ -1614,6 +1678,11 @@ protected void getControls() {\n     iamSessionToken = (XulTextbox) document.getElementById( \"iam-session-token\" );\n     iamProfileName = (XulTextbox) document.getElementById( \"iam-profile-name\" );\n     namedClusterList = (XulMenuList) document.getElementById( \"named-cluster-list\" );\n+    //azure SQL DB\n+    azureSqlDBJdbcAuthMethod = (XulMenuList) document.getElementById( \"azure-sql-db-auth-method-list\" );\n+    azureSqlDBAlwaysEncryptionEnabled = (XulCheckbox) document.getElementById( \"azure-sql-db-enable-always-encryption-on\" );\n+    azureSqlDBClientSecretId = (XulTextbox) document.getElementById( \"azure-sql-db-client-id\" );\n+    azureSqlDBClientSecretKey = (XulTextbox) document.getElementById( \"azure-sql-db-client-secret-key\" );\n \n     if ( portNumberBox != null && serverInstanceBox != null ) {\n       if ( Boolean.parseBoolean( serverInstanceBox.getAttributeValue( \"shouldDisablePortIfPopulated\" ) ) ) {"
  },
  {
    "sha": "c1354d401029450891a04859c5c441a162c4b946",
    "filename": "dbdialog/src/main/resources/org/pentaho/ui/database/azuresqldb_native.xul",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/maintell/pentaho-kettle/blob/746d96b10051c86b1f488b67ed19b359fb65ca1c/dbdialog/src/main/resources/org/pentaho/ui/database/azuresqldb_native.xul",
    "raw_url": "https://github.com/maintell/pentaho-kettle/raw/746d96b10051c86b1f488b67ed19b359fb65ca1c/dbdialog/src/main/resources/org/pentaho/ui/database/azuresqldb_native.xul",
    "contents_url": "https://api.github.com/repos/maintell/pentaho-kettle/contents/dbdialog/src/main/resources/org/pentaho/ui/database/azuresqldb_native.xul?ref=746d96b10051c86b1f488b67ed19b359fb65ca1c",
    "patch": "@@ -0,0 +1,37 @@\n+<groupbox id=\"database-options-box\" orient=\"vertical\" flex=\"1\"\n+          xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n+          xmlns:pen=\"http://www.pentaho.org/2008/xul\">\n+    <caption label=\"${DatabaseDialog.USER_SETTINGS}\"/>\n+    <vbox style=\"overflow:auto;\">\n+        <label id=\"server-host-name-label\" value=\"${DatabaseDialog.label.ServerHostname}\" />\n+        <textbox pen:customclass=\"variabletextbox\" id=\"server-host-name-text\"  />\n+        <label id=\"database-name-label\" value=\"${DatabaseDialog.label.DatabaseName}\" />\n+        <textbox pen:customclass=\"variabletextbox\" id=\"database-name-text\"/>\n+        <label id=\"port-number-label\" value=\"${DatabaseDialog.label.PortNumber}\" />\n+        <textbox pen:customclass=\"variabletextbox\" id=\"port-number-text\" />\n+        <spacer height=\"7\"/>\n+        <separator/>\n+        <label id=\"auth-method-label\" value=\"${DatabaseDialog.label.AuthenticationMethod}\" />\n+        <menulist id=\"azure-sql-db-auth-method-list\" editable=\"true\" value = \"SQL Server Authentication\" oncommand=\"dataHandler.setAzureSqlDBAuthRelatedFieldsVisible()\">\n+            <menupopup>\n+                <menuitem label=\"SQL Server Authentication\"/>\n+                <menuitem label=\"Azure Active Directory - Universal With MFA\"/>\n+                <menuitem label=\"Azure Active Directory - Password\"/>\n+            </menupopup>\n+        </menulist>\n+        <label id=\"username-label\" value=\"${DatabaseDialog.label.Username}\" />\n+        <textbox pen:customclass=\"variabletextbox\" id=\"username-text\" />\n+        <vbox id=\"auth-controls\">\n+            <label id=\"password-label\" value=\"${DatabaseDialog.label.Password}\" />\n+            <textbox pen:customclass=\"variabletextbox\" id=\"password-text\" type=\"password\"/>\n+        </vbox>\n+        <spacer height=\"7\"/>\n+        <separator/>\n+        <checkbox id=\"azure-sql-db-enable-always-encryption-on\" label=\"${DatabaseDialog.label.AlwaysEncryptionEnable}\" checked=\"false\"\n+                  command = \"dataHandler.enableAzureSqlDBEncryption()\" />\n+        <label id=\"client-id-label\" value=\"${DatabaseDialog.label.ClientId}\" />\n+        <textbox pen:customclass=\"variabletextbox\" id=\"azure-sql-db-client-id\" disabled=\"true\" />\n+        <label id=\"client-secret-key-label\" value=\"${DatabaseDialog.label.ClientSecretKey}\" />\n+        <textbox pen:customclass=\"variabletextbox\" id=\"azure-sql-db-client-secret-key\" disabled=\"true\" />\n+    </vbox>\n+</groupbox>\n\\ No newline at end of file"
  },
  {
    "sha": "cddfea717f2f0c01a2816bea41f8357af078e88b",
    "filename": "dbdialog/src/main/resources/org/pentaho/ui/database/databasedialog.properties",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/maintell/pentaho-kettle/blob/746d96b10051c86b1f488b67ed19b359fb65ca1c/dbdialog/src/main/resources/org/pentaho/ui/database/databasedialog.properties",
    "raw_url": "https://github.com/maintell/pentaho-kettle/raw/746d96b10051c86b1f488b67ed19b359fb65ca1c/dbdialog/src/main/resources/org/pentaho/ui/database/databasedialog.properties",
    "contents_url": "https://api.github.com/repos/maintell/pentaho-kettle/contents/dbdialog/src/main/resources/org/pentaho/ui/database/databasedialog.properties?ref=746d96b10051c86b1f488b67ed19b359fb65ca1c",
    "patch": "@@ -132,3 +132,6 @@ DatabaseDialog.label.SecretAccessKey=Secret Access Key\\:\n DatabaseDialog.label.SessionToken=Session Token\\:\n DatabaseDialog.label.AuthenticationMethod=Authentication method\\:\n DatabaseDialog.label.Profile=Profile name\\:\n+DatabaseDialog.label.ClientId=Client id\\: \n+DatabaseDialog.label.ClientSecretKey=Client Secret Key\\:\n+DatabaseDialog.label.AlwaysEncryptionEnable=Always Encryption Enabled\\:"
  },
  {
    "sha": "e2f15d320b2e2fdade54028de9651dcddc0e6af3",
    "filename": "engine/src/main/java/org/pentaho/di/core/KettleEnvironment.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/maintell/pentaho-kettle/blob/746d96b10051c86b1f488b67ed19b359fb65ca1c/engine/src/main/java/org/pentaho/di/core/KettleEnvironment.java",
    "raw_url": "https://github.com/maintell/pentaho-kettle/raw/746d96b10051c86b1f488b67ed19b359fb65ca1c/engine/src/main/java/org/pentaho/di/core/KettleEnvironment.java",
    "contents_url": "https://api.github.com/repos/maintell/pentaho-kettle/contents/engine/src/main/java/org/pentaho/di/core/KettleEnvironment.java?ref=746d96b10051c86b1f488b67ed19b359fb65ca1c",
    "patch": "@@ -2,7 +2,7 @@\n  *\n  * Pentaho Data Integration\n  *\n- * Copyright (C) 2002-2019 by Hitachi Vantara : http://www.pentaho.com\n+ * Copyright (C) 2002-2021 by Hitachi Vantara : http://www.pentaho.com\n  *\n  *******************************************************************************\n  *\n@@ -151,7 +151,6 @@ public static void init( List<PluginTypeInterface> pluginClasses, boolean simple\n \n         // Update Variables for LoggingRegistry\n         LoggingRegistry.getInstance().updateFromProperties();\n-        LoggingRegistry.getInstance().reset();\n \n         // Initialize the Lifecycle Listeners\n         //\n@@ -251,6 +250,7 @@ public static void setExecutionInformation( ExecutorInterface executor, Reposito\n   // Note - this is only called from test cases\n   public static void reset() {\n     KettleClientEnvironment.reset();\n+    LoggingRegistry.getInstance().reset();\n     initialized.set( null );\n   }\n }"
  }
]
