[
  {
    "sha": "30e24209e8221f3e8ef03c8d209084c4bdc56457",
    "filename": "src/main/java/frc/robot/Robot.java",
    "status": "modified",
    "additions": 43,
    "deletions": 7,
    "changes": 50,
    "blob_url": "https://github.com/RAR1741/RA21_RobotCode/blob/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/Robot.java",
    "raw_url": "https://github.com/RAR1741/RA21_RobotCode/raw/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/Robot.java",
    "contents_url": "https://api.github.com/repos/RAR1741/RA21_RobotCode/contents/src/main/java/frc/robot/Robot.java?ref=9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8",
    "patch": "@@ -5,6 +5,9 @@\n package frc.robot;\n \n import edu.wpi.first.wpilibj.TimedRobot;\n+import frc.robot.logging.LoggableController;\n+import frc.robot.logging.LoggableTimer;\n+import frc.robot.logging.Logger;\n \n /**\n  * The VM is configured to automatically run this class, and to call the functions corresponding to\n@@ -13,30 +16,63 @@\n  * project.\n  */\n public class Robot extends TimedRobot {\n+  Logger logger;\n+  LoggableTimer timer;\n+  LoggableController driver;\n+\n   /**\n    * This function is run when the robot is first started up and should be used for any\n    * initialization code.\n    */\n   @Override\n-  public void robotInit() {}\n+  public void robotInit() {\n+    logger = new Logger();\n+    timer = new LoggableTimer();\n+    driver = new LoggableController(\"Driver\", 0);\n+\n+    logger.addLoggable(timer);\n+    logger.addLoggable(driver);\n+  }\n \n   @Override\n-  public void robotPeriodic() {}\n+  public void robotPeriodic() {\n+    logger.log();\n+  }\n \n   @Override\n-  public void autonomousInit() {}\n+  public void autonomousInit() {\n+    logger.open();\n+    logger.setup();\n+\n+    timer.reset();\n+    timer.start();\n+  }\n \n   @Override\n-  public void autonomousPeriodic() {}\n+  public void autonomousPeriodic() {\n+    logger.writeLine();\n+  }\n \n   @Override\n-  public void teleopInit() {}\n+  public void teleopInit() {\n+    logger.open();\n+    logger.setup();\n+\n+    timer.reset();\n+    timer.start();\n+  }\n \n   @Override\n-  public void teleopPeriodic() {}\n+  public void teleopPeriodic() {\n+    logger.writeLine();\n+  }\n \n   @Override\n-  public void disabledInit() {}\n+  public void disabledInit() {\n+    logger.close();\n+\n+    timer.stop();\n+  }\n \n   @Override\n   public void disabledPeriodic() {}"
  },
  {
    "sha": "f3b4015bf409ee3dbde310d3a37bed3c6e930501",
    "filename": "src/main/java/frc/robot/logging/Loggable.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/RAR1741/RA21_RobotCode/blob/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/logging/Loggable.java",
    "raw_url": "https://github.com/RAR1741/RA21_RobotCode/raw/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/logging/Loggable.java",
    "contents_url": "https://api.github.com/repos/RAR1741/RA21_RobotCode/contents/src/main/java/frc/robot/logging/Loggable.java?ref=9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8",
    "patch": "@@ -0,0 +1,18 @@\n+package frc.robot.logging;\n+\n+/** A class for a loggable subsystem. */\n+public interface Loggable {\n+\t/**\n+\t * Sets up all the keys in the given Logger object.\n+\t * \n+\t * @param logger Logger class to setup keys in\n+\t */\n+\tpublic abstract void setupLogging(Logger logger);\n+\n+\t/**\n+\t * Logs data in the given Logger object.\n+\t * \n+\t * @param logger Logger class to log data to\n+\t */\n+\tpublic abstract void log(Logger logger);\n+}"
  },
  {
    "sha": "fdd369ade990eb36bd3d17fdeb42224de739d0f4",
    "filename": "src/main/java/frc/robot/logging/LoggableController.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/RAR1741/RA21_RobotCode/blob/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/logging/LoggableController.java",
    "raw_url": "https://github.com/RAR1741/RA21_RobotCode/raw/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/logging/LoggableController.java",
    "contents_url": "https://api.github.com/repos/RAR1741/RA21_RobotCode/contents/src/main/java/frc/robot/logging/LoggableController.java?ref=9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8",
    "patch": "@@ -0,0 +1,24 @@\n+package frc.robot.logging;\n+\n+import edu.wpi.first.wpilibj.XboxController;\n+\n+public class LoggableController extends XboxController implements Loggable {\n+    public String name;\n+\n+    public LoggableController(String name, int port) {\n+        super(port);\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void setupLogging(Logger logger) {\n+        logger.addAttribute(name+\"/LeftX\");\n+    }\n+    \n+    @Override\n+    public void log(Logger logger) {\n+        logger.log(name+\"/LeftX\", this.getX(Hand.kLeft));\n+                \n+    }\n+    \n+}"
  },
  {
    "sha": "5e85db5280699c7c459e3db7c36ddbabe2de509a",
    "filename": "src/main/java/frc/robot/logging/LoggableTimer.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/RAR1741/RA21_RobotCode/blob/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/logging/LoggableTimer.java",
    "raw_url": "https://github.com/RAR1741/RA21_RobotCode/raw/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/logging/LoggableTimer.java",
    "contents_url": "https://api.github.com/repos/RAR1741/RA21_RobotCode/contents/src/main/java/frc/robot/logging/LoggableTimer.java?ref=9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8",
    "patch": "@@ -0,0 +1,17 @@\n+package frc.robot.logging;\n+\n+import edu.wpi.first.wpilibj.Timer;\n+\n+public class LoggableTimer extends Timer implements Loggable {\n+\n+    @Override\n+    public void setupLogging(Logger logger) {\n+        logger.addAttribute(\"Time\");        \n+    }\n+\n+    @Override\n+    public void log(Logger logger) {\n+        logger.log(\"Time\", this.get());\n+    }\n+    \n+}"
  },
  {
    "sha": "f68c37d957e37cfdb5132c7f7e5cc5c498b9127f",
    "filename": "src/main/java/frc/robot/logging/Logger.java",
    "status": "added",
    "additions": 234,
    "deletions": 0,
    "changes": 234,
    "blob_url": "https://github.com/RAR1741/RA21_RobotCode/blob/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/logging/Logger.java",
    "raw_url": "https://github.com/RAR1741/RA21_RobotCode/raw/9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8/src/main/java/frc/robot/logging/Logger.java",
    "contents_url": "https://api.github.com/repos/RAR1741/RA21_RobotCode/contents/src/main/java/frc/robot/logging/Logger.java?ref=9b0a0a4136a4b805ef49971962a2bae2d7d0e2f8",
    "patch": "@@ -0,0 +1,234 @@\n+package frc.robot.logging;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import edu.wpi.first.networktables.NetworkTable;\n+import edu.wpi.first.networktables.NetworkTableInstance;\n+\n+/** Manages NetworkTable and file logging. */\n+public class Logger {\n+\tprivate String filename;\n+\tprivate BufferedWriter log = null;\n+\tprivate Map<String, String> fields;\n+\tprivate List<Loggable> loggables;\n+\tprivate NetworkTable table;\n+\n+\tpublic Logger() {\n+\t\tfields = new LinkedHashMap<String, String>();\n+\t\tloggables = new ArrayList<>();\n+\t\ttable = NetworkTableInstance.getDefault().getTable(\"logging\");\n+\t\tfor (String s : table.getKeys()) {\n+\t\t\ttable.delete(s);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Opens a file with the name being the current date and time to log to.\n+\t * @return Whether opening the file succeeded\n+\t */\n+\tpublic boolean open() {\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tString dir = \"/home/lvuser/logs\";\n+\t\tnew File(dir).mkdirs();\n+\t\tif (new File(\"/media/sda\").exists()) {\n+\t\t\tdir = \"/media/sda\";\n+\t\t}\n+\t\tString name = dir + \"/log-\" + calendar.get(Calendar.YEAR) + \"-\" + calendar.get(Calendar.MONTH) + \"-\"\n+\t\t\t\t+ calendar.get(Calendar.DAY_OF_MONTH) + \"_\" + calendar.get(Calendar.HOUR_OF_DAY) + \"-\"\n+\t\t\t\t+ calendar.get(Calendar.MINUTE) + \"-\" + calendar.get(Calendar.SECOND) + \".csv\";\n+\t\tSystem.out.printf(\"Logging to file: '%s'%n\", new File(name).getAbsolutePath());\n+\t\treturn this.open(name);\n+\t}\n+\n+\t/**\n+\t * Opens a file to log to.\n+\t * @param filepath Path of the file to open\n+\t * @return Whether opening the file succeeded\n+\t */\n+\tpublic boolean open(String filepath) {\n+\t\tthis.filename = filepath;\n+\t\ttry {\n+\t\t\tlog = new BufferedWriter(new FileWriter(filepath));\n+\t\t} catch (IOException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Closes the current log file.\n+\t * @return Whether closing the file succeeded\n+\t */\n+\tpublic boolean close() {\n+\t\tif (log != null) {\n+\t\t\ttry {\n+\t\t\t\tlog.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * Resets the current log file.\n+\t * @return true\n+\t */\n+\tpublic boolean reset() {\n+\t\tclose();\n+\t\topen(this.filename);\n+\t\twriteAttributes();\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Checks to see if the logger already has a specific key.\n+\t * @param name Key to check\n+\t * @return Whether the key already exists\n+\t */\n+\tpublic boolean hasAttribute(String name) {\n+\t\treturn fields.containsKey(name);\n+\t}\n+\n+\t/**\n+\t * Adds an attribute to the logger.\n+\t * @param field\n+\t * @return\n+\t */\n+\tpublic boolean addAttribute(String field) {\n+\t\tif (hasAttribute(field)) {\n+\t\t\t// TODO: Output warning\n+\t\t\treturn false; // We already have this attribute\n+\t\t}\n+\n+\t\tfields.put(field, \"\");\n+\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Logs data to the Logger.\n+\t * @param field Key being logged\n+\t * @param data Number data to log\n+\t * @return Whether the operation succeeded\n+\t */\n+\tpublic boolean log(String field, double d) {\n+\t\ttable.getEntry(field).setDouble(d);\n+\t\treturn log(field, String.valueOf(d));\n+\t}\n+\n+\t/**\n+\t * Logs data to the Logger\n+\t * @param field key being logged\n+\t * @param data String data to log\n+\t * @return whether the operation succeeded\n+\t */\n+\tpublic boolean log(String field, String data) {\n+\t\tif (!hasAttribute(field))\n+\t\t\treturn false;\n+\n+\t\tfields.put(field, data);\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Logs data to the Logger\n+\t * @param field key being logged\n+\t * @param data data to log\n+\t * @return whether the operation succeeded\n+\t */\n+\tpublic boolean log(String field, Object data) {\n+\t\tif (!hasAttribute(field))\n+\t\t\treturn false;\n+\n+\t\tfields.put(field, data.toString());\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Writes the headers to the file.\n+\t * @return Whether the operation succeeded\n+\t */\n+\tpublic boolean writeAttributes() {\n+\t\ttry {\n+\t\t\tfor (Map.Entry<String, String> e : fields.entrySet()) {\n+\t\t\t\tlog.write(e.getKey() + ',');\n+\t\t\t}\n+\t\t\tlog.write(\"\\n\");\n+\t\t\tlog.flush();\n+\t\t} catch (IOException e1) {\n+\t\t\te1.printStackTrace();\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Writes the current values to the file.\n+\t * @return Whether the operation succeeded\n+\t */\n+\tpublic boolean writeLine() {\n+\t\ttry {\n+\t\t\tfor (Map.Entry<String, String> e : fields.entrySet()) {\n+\t\t\t\tlog.write(e.getValue() + ',');\n+\t\t\t}\n+\t\t\tlog.write(\"\\n\");\n+\t\t} catch (IOException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Normalizes the name of a key.\n+\t * @param str key name to normalize\n+\t * @return normalized key name\n+\t */\n+\tString normalize(String str) {\n+\t\treturn str.toLowerCase();\n+\t}\n+\n+\t/**\n+\t * Registers a Loggable with the Logger.\n+\t * @param l loggable to register\n+\t */\n+\tpublic void addLoggable(Loggable l) {\n+\t\tloggables.add(l);\n+\t}\n+\n+\t/**\n+\t * Calls the setupLogging method of all currently registered Loggables.\n+\t */\n+\tpublic void setupLoggables() {\n+\t\tfor (Loggable l : loggables) {\n+\t\t\tl.setupLogging(this);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Sets up all currently registered Loggables, along with writing the header to the file.\n+\t */\n+\tpublic void setup() {\n+\t\tthis.setupLoggables();\n+\t\tthis.writeAttributes();\n+\t}\n+\n+\t/**\n+\t * Calls the log method of all currently registered Loggables.\n+\t */\n+\tpublic void log() {\n+\t\tfor (Loggable l : loggables) {\n+\t\t\tl.log(this);\n+\t\t}\n+\t}\n+}"
  }
]
