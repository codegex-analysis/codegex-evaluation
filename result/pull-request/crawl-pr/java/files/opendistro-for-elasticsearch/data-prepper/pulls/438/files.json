[
  {
    "sha": "070e6e16336ea613ab06fbbfd4332d6f5224c0fa",
    "filename": "data-prepper-core/src/integrationTest/java/com/amazon/dataprepper/integration/EndToEndRawSpanTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/blob/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-core/src/integrationTest/java/com/amazon/dataprepper/integration/EndToEndRawSpanTest.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/raw/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-core/src/integrationTest/java/com/amazon/dataprepper/integration/EndToEndRawSpanTest.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/data-prepper/contents/data-prepper-core/src/integrationTest/java/com/amazon/dataprepper/integration/EndToEndRawSpanTest.java?ref=b040e6acadbeda06a1f7dfc1c7927e037d0b8148",
    "patch": "@@ -66,6 +66,8 @@ public void testPipelineEndToEnd() throws IOException, InterruptedException {\n         builder.withUsername(\"admin\");\n         builder.withPassword(\"admin\");\n         final RestHighLevelClient restHighLevelClient = builder.build().createClient();\n+        // Wait for otel-trace-raw-prepper by trace_flush_interval\n+        Thread.sleep(3000);\n         // Wait for data to flow through pipeline and be indexed by ES\n         await().atMost(10, TimeUnit.SECONDS).untilAsserted(\n                 () -> {"
  },
  {
    "sha": "bbcf04f9a804a90175ad8c95928d408d10c133d4",
    "filename": "data-prepper-plugins/otel-trace-raw-prepper/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/blob/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-plugins/otel-trace-raw-prepper/build.gradle",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/raw/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-plugins/otel-trace-raw-prepper/build.gradle",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/data-prepper/contents/data-prepper-plugins/otel-trace-raw-prepper/build.gradle?ref=b040e6acadbeda06a1f7dfc1c7927e037d0b8148",
    "patch": "@@ -13,6 +13,7 @@ dependencies {\n     implementation \"com.linecorp.armeria:armeria-grpc:1.5.0\"\n     implementation \"com.fasterxml.jackson.core:jackson-databind:2.12.2\"\n     implementation \"com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.2\"\n+    implementation group: 'com.google.guava', name: 'guava', version: '30.1-jre'\n     testImplementation 'org.assertj:assertj-core:3.19.0'\n     testImplementation \"org.mockito:mockito-inline:3.8.0\"\n     testImplementation \"org.hamcrest:hamcrest:2.2\""
  },
  {
    "sha": "ae409ac32b7b75c978782e03e24dad0cefbc4a1a",
    "filename": "data-prepper-plugins/otel-trace-raw-prepper/src/main/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OTelTraceRawPrepper.java",
    "status": "modified",
    "additions": 28,
    "deletions": 6,
    "changes": 34,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/blob/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-plugins/otel-trace-raw-prepper/src/main/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OTelTraceRawPrepper.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/raw/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-plugins/otel-trace-raw-prepper/src/main/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OTelTraceRawPrepper.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/data-prepper/contents/data-prepper-plugins/otel-trace-raw-prepper/src/main/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OTelTraceRawPrepper.java?ref=b040e6acadbeda06a1f7dfc1c7927e037d0b8148",
    "patch": "@@ -11,6 +11,8 @@\n import com.amazon.dataprepper.plugins.prepper.oteltrace.model.RawSpanSet;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.google.common.base.Preconditions;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n import com.google.common.primitives.Ints;\n import io.micrometer.core.instrument.Counter;\n import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n@@ -58,6 +60,8 @@\n     // TODO: introduce a gauge to monitor the size\n     private final Map<String, RawSpanSet> traceIdRawSpanSetMap = new ConcurrentHashMap<>();\n \n+    private final Cache<String, String> traceIdTraceGroupCache;\n+\n     private long lastTraceFlushTime = 0L;\n \n     private final ReentrantLock traceFlushLock = new ReentrantLock();\n@@ -66,11 +70,17 @@\n     public OTelTraceRawPrepper(final PluginSetting pluginSetting) {\n         super(pluginSetting);\n         traceFlushInterval = SEC_TO_MILLIS * pluginSetting.getLongOrDefault(\n-                OtelTraceRawPrepperConfig.TRACE_FLUSH_INTERVAL, OtelTraceRawPrepperConfig.DEFAULT_TG_FLUSH_INTERVAL);\n+                OtelTraceRawPrepperConfig.TRACE_FLUSH_INTERVAL, OtelTraceRawPrepperConfig.DEFAULT_TG_FLUSH_INTERVAL_SEC);\n         rootSpanFlushDelay = SEC_TO_MILLIS * pluginSetting.getLongOrDefault(\n-                OtelTraceRawPrepperConfig.ROOT_SPAN_FLUSH_DELAY, OtelTraceRawPrepperConfig.DEFAULT_ROOT_SPAN_FLUSH_DELAY);\n+                OtelTraceRawPrepperConfig.ROOT_SPAN_FLUSH_DELAY, OtelTraceRawPrepperConfig.DEFAULT_ROOT_SPAN_FLUSH_DELAY_SEC);\n         Preconditions.checkArgument(rootSpanFlushDelay <= traceFlushInterval,\n                 \"rootSpanSetFlushDelay should not be greater than traceFlushInterval.\");\n+        final int numProcessWorkers = pluginSetting.getNumberOfProcessWorkers();\n+        traceIdTraceGroupCache = CacheBuilder.newBuilder()\n+                .concurrencyLevel(numProcessWorkers)\n+                .maximumSize(OtelTraceRawPrepperConfig.MAX_TRACE_ID_CACHE_SIZE_PER_THREAD * numProcessWorkers)\n+                .expireAfterWrite(OtelTraceRawPrepperConfig.DEFAULT_TRACE_ID_TTL_SEC, TimeUnit.SECONDS)\n+                .build();\n         spanErrorsCounter = pluginMetrics.counter(SPAN_PROCESSING_ERRORS);\n         resourceSpanErrorsCounter = pluginMetrics.counter(RESOURCE_SPANS_PROCESSING_ERRORS);\n         totalProcessingErrorsCounter = pluginMetrics.counter(TOTAL_PROCESSING_ERRORS);\n@@ -122,6 +132,9 @@ private void processRawSpan(final RawSpan rawSpan) {\n     }\n \n     private void processRootRawSpan(final RawSpan rawSpan) {\n+        // TODO: flush descendants here to get rid of DelayQueue\n+        // TODO: safe-guard against null traceGroup for rootSpan?\n+        traceIdTraceGroupCache.put(rawSpan.getTraceId(), rawSpan.getTraceGroup());\n         final long now = System.currentTimeMillis();\n         final long nowPlusOffset = now + rootSpanFlushDelay;\n         final DelayedParentSpan delayedParentSpan = new DelayedParentSpan(rawSpan, nowPlusOffset);\n@@ -197,13 +210,22 @@ private void processDescendantRawSpan(final RawSpan rawSpan) {\n                     Iterator<Map.Entry<String, RawSpanSet>> entryIterator = traceIdRawSpanSetMap.entrySet().iterator();\n                     while (entryIterator.hasNext()) {\n                         Map.Entry<String, RawSpanSet> entry = entryIterator.next();\n+                        String traceId = entry.getKey();\n+                        String traceGroup = traceIdTraceGroupCache.getIfPresent(traceId);\n                         RawSpanSet rawSpanSet = entry.getValue();\n                         long traceTime = rawSpanSet.getTimeSeen();\n                         if (now - traceTime >= traceFlushInterval) {\n                             Set<RawSpan> rawSpans = rawSpanSet.getRawSpans();\n-                            for (RawSpan rawSpan : rawSpans) {\n-                                recordsToFlush.add(rawSpan);\n-                                log.warn(\"Missing root span for SpanId: {}\", rawSpan.getSpanId());\n+                            if (traceGroup != null) {\n+                                rawSpans.forEach(rawSpan -> {\n+                                    rawSpan.setTraceGroup(traceGroup);\n+                                    recordsToFlush.add(rawSpan);\n+                                });\n+                            } else {\n+                                rawSpans.forEach(rawSpan -> {\n+                                    recordsToFlush.add(rawSpan);\n+                                    log.warn(\"Missing trace group for SpanId: {}\", rawSpan.getSpanId());\n+                                });\n                             }\n \n                             entryIterator.remove();\n@@ -227,7 +249,7 @@ private boolean shouldGarbageCollect() {\n \n     @Override\n     public void shutdown() {\n-\n+        traceIdTraceGroupCache.cleanUp();\n     }\n \n     class DelayedParentSpan implements Delayed {"
  },
  {
    "sha": "4158a8c350f9401d2ccd3db2ab76f63b103e7ad6",
    "filename": "data-prepper-plugins/otel-trace-raw-prepper/src/main/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OtelTraceRawPrepperConfig.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/blob/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-plugins/otel-trace-raw-prepper/src/main/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OtelTraceRawPrepperConfig.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/raw/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-plugins/otel-trace-raw-prepper/src/main/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OtelTraceRawPrepperConfig.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/data-prepper/contents/data-prepper-plugins/otel-trace-raw-prepper/src/main/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OtelTraceRawPrepperConfig.java?ref=b040e6acadbeda06a1f7dfc1c7927e037d0b8148",
    "patch": "@@ -2,7 +2,9 @@\n \n public class OtelTraceRawPrepperConfig {\n     static final String TRACE_FLUSH_INTERVAL = \"trace_flush_interval\";\n-    static final long DEFAULT_TG_FLUSH_INTERVAL = 180L;\n+    static final long DEFAULT_TG_FLUSH_INTERVAL_SEC = 180L;\n     static final String ROOT_SPAN_FLUSH_DELAY = \"root_span_flush_delay\";\n-    static final long DEFAULT_ROOT_SPAN_FLUSH_DELAY = 30L;\n+    static final long DEFAULT_ROOT_SPAN_FLUSH_DELAY_SEC = 30L;\n+    static final long DEFAULT_TRACE_ID_TTL_SEC = 300L;\n+    static final long MAX_TRACE_ID_CACHE_SIZE_PER_THREAD = 10_0000L;\n }"
  },
  {
    "sha": "46b26ce248a066691017f71af80fcffb6b298eb1",
    "filename": "data-prepper-plugins/otel-trace-raw-prepper/src/test/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OTelTraceRawPrepperTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/blob/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-plugins/otel-trace-raw-prepper/src/test/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OTelTraceRawPrepperTest.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/data-prepper/raw/b040e6acadbeda06a1f7dfc1c7927e037d0b8148/data-prepper-plugins/otel-trace-raw-prepper/src/test/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OTelTraceRawPrepperTest.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/data-prepper/contents/data-prepper-plugins/otel-trace-raw-prepper/src/test/java/com/amazon/dataprepper/plugins/prepper/oteltrace/OTelTraceRawPrepperTest.java?ref=b040e6acadbeda06a1f7dfc1c7927e037d0b8148",
    "patch": "@@ -7,7 +7,6 @@\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.google.protobuf.InvalidProtocolBufferException;\n import com.google.protobuf.util.JsonFormat;\n import io.micrometer.core.instrument.Measurement;\n import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n@@ -49,6 +48,8 @@\n     private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n     private static final long TEST_TRACE_FLUSH_INTERVAL = 3L;\n     private static final long TEST_ROOT_SPAN_FLUSH_DELAY = 1L;\n+    private static final int TEST_CONCURRENCY_SCALE = 2;\n+\n     private static final String TEST_REQUEST_ONE_FULL_TRACE_GROUP_JSON_FILE = \"sample-request-one-full-trace-group.json\";\n     private static final String TEST_REQUEST_ONE_TRACE_GROUP_MISSING_ROOT_JSON_FILE = \"sample-request-one-trace-group-missing-root.json\";\n     private static final String TEST_REQUEST_TWO_FULL_TRACE_GROUP_JSON_FILE = \"sample-request-two-full-trace-group.json\";\n@@ -70,12 +71,14 @@ public void setup() {\n                     put(OtelTraceRawPrepperConfig.ROOT_SPAN_FLUSH_DELAY, TEST_ROOT_SPAN_FLUSH_DELAY);\n                 }});\n         pluginSetting.setPipelineName(\"pipelineOTelTrace\");\n+        pluginSetting.setProcessWorkers(TEST_CONCURRENCY_SCALE);\n         oTelTraceRawPrepper = new OTelTraceRawPrepper(pluginSetting);\n-        executorService = Executors.newFixedThreadPool(2);\n+        executorService = Executors.newFixedThreadPool(TEST_CONCURRENCY_SCALE);\n     }\n \n     @After\n     public void tearDown() {\n+        oTelTraceRawPrepper.shutdown();\n         executorService.shutdown();\n     }\n "
  }
]
