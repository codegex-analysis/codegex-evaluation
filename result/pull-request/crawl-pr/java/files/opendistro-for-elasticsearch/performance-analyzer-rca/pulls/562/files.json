[
  {
    "sha": "1bb7782d9dae94d357372d0e734ca0504fbf9c2b",
    "filename": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyCacheMaxSizeAction.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyCacheMaxSizeAction.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyCacheMaxSizeAction.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyCacheMaxSizeAction.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -177,6 +177,7 @@ public static long getThresholdInBytes(double threshold, long heapSize) {\n \n     private Long currentCacheMaxSizeInBytes;\n     private Long desiredCacheMaxSizeInBytes;\n+    private Long currentCacheActualSizeInByte;\n     private Long heapMaxSizeInBytes;\n     private final long upperBoundInBytes;\n     private final long lowerBoundInBytes;\n@@ -197,6 +198,8 @@ private Builder(\n \n       this.currentCacheMaxSizeInBytes = NodeConfigCacheReaderUtil.readCacheMaxSizeInBytes(\n           appContext.getNodeConfigCache(), esNode, cacheType);\n+      this.currentCacheActualSizeInByte = NodeConfigCacheReaderUtil.readCacheActualSizeInBytes(\n+          appContext.getNodeConfigCache(), esNode, cacheType);\n       this.heapMaxSizeInBytes = NodeConfigCacheReaderUtil.readHeapMaxSizeInBytes(\n           appContext.getNodeConfigCache(), esNode);\n       this.desiredCacheMaxSizeInBytes = null;\n@@ -261,6 +264,12 @@ public ModifyCacheMaxSizeAction build() {\n       // Ensure desired cache max size is within thresholds\n       desiredCacheMaxSizeInBytes = Math.max(Math.min(desiredCacheMaxSizeInBytes, upperBoundInBytes), lowerBoundInBytes);\n \n+      //ensure that we do not issue action to lower cache size if the actual cache size usage\n+      //is below the target lower bound in each bucket level\n+      if (!this.isIncrease && this.currentCacheActualSizeInByte != null\n+          && this.currentCacheActualSizeInByte <= lowerBoundInBytes) {\n+        this.canUpdate = false;\n+      }\n       return new ModifyCacheMaxSizeAction(esNode, cacheType, appContext,\n           desiredCacheMaxSizeInBytes, currentCacheMaxSizeInBytes, coolOffPeriodInMillis, canUpdate);\n     }"
  },
  {
    "sha": "17d82672bd74eae81f058ddbc10f4f31d3d98081",
    "filename": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -83,4 +83,23 @@ public static double readDataFromSqlResult(Result<Record> result, Field<String>\n     }\n     return ret;\n   }\n+\n+  /**\n+   * Sums up the SUM field of all tuples in the SQL result\n+   * @param records the record result from SQL query\n+   * @return sum value\n+   */\n+  public static Double readSumFromSqlResult(final Result<Record> records) {\n+    if (records == null) {\n+      LOG.error(\"sql result is null\");\n+      return Double.NaN;\n+    }\n+    double size = 0;\n+    // since the flow unit data is aggregated by index, summing the size across indices\n+    if (records.size() > 0) {\n+      size = records.stream().mapToDouble(\n+          record -> record.getValue(MetricsDB.SUM, Double.class)).sum();\n+    }\n+    return size;\n+  }\n }"
  },
  {
    "sha": "cc8a219f12153cbc5c8ce2d7468a86ba0cad0a80",
    "filename": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/ResourceUtil.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/ResourceUtil.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/ResourceUtil.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/ResourceUtil.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -89,6 +89,9 @@\n   public static final Resource FIELD_DATA_CACHE_MAX_SIZE = Resource.newBuilder()\n           .setResourceEnum(ResourceEnum.FIELD_DATA_CACHE)\n           .setMetricEnum(MetricEnum.CACHE_MAX_SIZE).build();\n+  public static final Resource FIELD_DATA_CACHE_ACTUAL_SIZE = Resource.newBuilder()\n+          .setResourceEnum(ResourceEnum.FIELD_DATA_CACHE)\n+          .setMetricEnum(MetricEnum.CACHE_ACTUAL_SIZE).build();\n   public static final Resource SHARD_REQUEST_CACHE_EVICTION = Resource.newBuilder()\n           .setResourceEnum(ResourceEnum.SHARD_REQUEST_CACHE)\n           .setMetricEnum(MetricEnum.CACHE_EVICTION).build();\n@@ -98,6 +101,9 @@\n   public static final Resource SHARD_REQUEST_CACHE_MAX_SIZE = Resource.newBuilder()\n           .setResourceEnum(ResourceEnum.SHARD_REQUEST_CACHE)\n           .setMetricEnum(MetricEnum.CACHE_MAX_SIZE).build();\n+  public static final Resource SHARD_REQUEST_CACHE_ACTUAL_SIZE = Resource.newBuilder()\n+          .setResourceEnum(ResourceEnum.SHARD_REQUEST_CACHE)\n+          .setMetricEnum(MetricEnum.CACHE_ACTUAL_SIZE).build();\n \n   /**\n    * Read the resourceType name from the ResourceType object"
  },
  {
    "sha": "a2465239715643e4c63951ada12ed4efd6407aff",
    "filename": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -239,20 +239,12 @@ public void construct() {\n     cacheMaxSize.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n     addLeaf(cacheMaxSize);\n \n-    NodeConfigCollector nodeConfigCollector = new NodeConfigCollector(RCA_PERIOD, queueCapacity, cacheMaxSize, heapMax);\n-    nodeConfigCollector.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n-    nodeConfigCollector.addAllUpstreams(Arrays.asList(queueCapacity, cacheMaxSize, heapMax));\n-    NodeConfigClusterCollector nodeConfigClusterCollector = new NodeConfigClusterCollector(nodeConfigCollector);\n-    nodeConfigClusterCollector.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n-    nodeConfigClusterCollector.addAllUpstreams(Collections.singletonList(nodeConfigCollector));\n-    nodeConfigClusterCollector.addTag(TAG_AGGREGATE_UPSTREAM, LOCUS_DATA_NODE);\n-\n     // Field Data Cache RCA\n     Metric fieldDataCacheEvictions = new Cache_FieldData_Eviction(EVALUATION_INTERVAL_SECONDS);\n     fieldDataCacheEvictions.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n     addLeaf(fieldDataCacheEvictions);\n \n-    Metric fieldDataCacheSizeGroupByOperation = new AggregateMetric(EVALUATION_INTERVAL_SECONDS,\n+    AggregateMetric fieldDataCacheSizeGroupByOperation = new AggregateMetric(EVALUATION_INTERVAL_SECONDS,\n             Cache_FieldData_Size.NAME,\n             AggregateFunction.SUM,\n             MetricsDB.MAX, ShardStatsDerivedDimension.INDEX_NAME.toString());\n@@ -278,7 +270,7 @@ public void construct() {\n     shardRequestHits.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n     addLeaf(shardRequestHits);\n \n-    Metric shardRequestCacheSizeGroupByOperation = new AggregateMetric(EVALUATION_INTERVAL_SECONDS,\n+    AggregateMetric shardRequestCacheSizeGroupByOperation = new AggregateMetric(EVALUATION_INTERVAL_SECONDS,\n             Cache_Request_Size.NAME,\n             AggregateFunction.SUM,\n             MetricsDB.MAX, ShardStatsDerivedDimension.INDEX_NAME.toString());\n@@ -298,6 +290,16 @@ public void construct() {\n     shardRequestCacheClusterRca.addAllUpstreams(Collections.singletonList(shardRequestCacheNodeRca));\n     shardRequestCacheClusterRca.addTag(TAG_AGGREGATE_UPSTREAM, LOCUS_DATA_NODE);\n \n+    //node config collector\n+    NodeConfigCollector nodeConfigCollector = new NodeConfigCollector(RCA_PERIOD, queueCapacity, cacheMaxSize, heapMax,\n+        fieldDataCacheSizeGroupByOperation, shardRequestCacheSizeGroupByOperation);\n+    nodeConfigCollector.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    nodeConfigCollector.addAllUpstreams(Arrays.asList(queueCapacity, cacheMaxSize, heapMax));\n+    NodeConfigClusterCollector nodeConfigClusterCollector = new NodeConfigClusterCollector(nodeConfigCollector);\n+    nodeConfigClusterCollector.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n+    nodeConfigClusterCollector.addAllUpstreams(Collections.singletonList(nodeConfigCollector));\n+    nodeConfigClusterCollector.addTag(TAG_AGGREGATE_UPSTREAM, LOCUS_DATA_NODE);\n+\n     // Cache Health Decider\n     CacheHealthDecider cacheHealthDecider = new CacheHealthDecider(\n             EVALUATION_INTERVAL_SECONDS, 12, fieldDataCacheClusterRca, shardRequestCacheClusterRca, highHeapUsageClusterRca);"
  },
  {
    "sha": "bdae19806cf08db2af60d953ce0c513464f38fb3",
    "filename": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -33,6 +33,8 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.AggregateMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cache.CacheUtil;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import java.util.HashMap;\n import org.apache.logging.log4j.LogManager;\n@@ -48,17 +50,23 @@\n   private final ThreadPool_QueueCapacity threadPool_queueCapacity;\n   private final Cache_Max_Size cacheMaxSize;\n   private final Heap_Max heapMaxSize;\n+  private final AggregateMetric fieldDataCacheSizeGroupByAggregation;\n+  private final AggregateMetric shardRequestCacheSizeGroupByAggregation;\n   private final int rcaPeriod;\n   private int counter;\n   private final HashMap<Resource, Double> configResult;\n \n   public NodeConfigCollector(int rcaPeriod,\n                              ThreadPool_QueueCapacity threadPool_queueCapacity,\n                              Cache_Max_Size cacheMaxSize,\n-                             Heap_Max heapMaxSize) {\n+                             Heap_Max heapMaxSize,\n+                             AggregateMetric fieldDataCacheSizeGroupByAggregation,\n+                             AggregateMetric shardRequestCacheSizeGroupByAggregation) {\n     this.threadPool_queueCapacity = threadPool_queueCapacity;\n     this.cacheMaxSize = cacheMaxSize;\n     this.heapMaxSize = heapMaxSize;\n+    this.fieldDataCacheSizeGroupByAggregation = fieldDataCacheSizeGroupByAggregation;\n+    this.shardRequestCacheSizeGroupByAggregation = shardRequestCacheSizeGroupByAggregation;\n     this.rcaPeriod = rcaPeriod;\n     this.counter = 0;\n     this.configResult = new HashMap<>();\n@@ -84,6 +92,16 @@ private void collectCacheMaxSize(MetricFlowUnit cacheMaxSize) {\n     collectAndPublishMetric(ResourceUtil.SHARD_REQUEST_CACHE_MAX_SIZE, shardRequestCacheMaxSize);\n   }\n \n+  private void collectFieldDataCacheActualSize(MetricFlowUnit fieldDataCacheSizeGroupByOperation) {\n+    final double fieldDataCacheActualSize = SQLParsingUtil.readSumFromSqlResult(fieldDataCacheSizeGroupByOperation.getData());\n+    collectAndPublishMetric(ResourceUtil.FIELD_DATA_CACHE_ACTUAL_SIZE, fieldDataCacheActualSize);\n+  }\n+\n+  private void collectShardRequestCacheActualSize(MetricFlowUnit shardRequestCacheSizeGroupByOperation) {\n+    final double shardRequestCacheActualSize = SQLParsingUtil.readSumFromSqlResult(shardRequestCacheSizeGroupByOperation.getData());\n+    collectAndPublishMetric(ResourceUtil.SHARD_REQUEST_CACHE_ACTUAL_SIZE, shardRequestCacheActualSize);\n+  }\n+\n   private void collectHeapStats(MetricFlowUnit heapMax) {\n     // total maximum heap size\n     final double heapMaxSize = SQLParsingUtil.readDataFromSqlResult(heapMax.getData(),\n@@ -140,6 +158,18 @@ public NodeConfigFlowUnit operate() {\n       }\n       collectHeapStats(flowUnit);\n     }\n+    for (MetricFlowUnit flowUnit : fieldDataCacheSizeGroupByAggregation.getFlowUnits()) {\n+      if (flowUnit.isEmpty()) {\n+        continue;\n+      }\n+      collectFieldDataCacheActualSize(flowUnit);\n+    }\n+    for (MetricFlowUnit flowUnit : shardRequestCacheSizeGroupByAggregation.getFlowUnits()) {\n+      if (flowUnit.isEmpty()) {\n+        continue;\n+      }\n+      collectShardRequestCacheActualSize(flowUnit);\n+    }\n \n     if (counter == rcaPeriod) {\n       counter = 0;"
  },
  {
    "sha": "f90ab39d72e0df7ee0036f7c96200954b7f42b00",
    "filename": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/cache/CacheUtil.java",
    "status": "modified",
    "additions": 7,
    "deletions": 13,
    "changes": 20,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/cache/CacheUtil.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/cache/CacheUtil.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/cache/CacheUtil.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -20,6 +20,7 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n@@ -33,27 +34,20 @@\n     public static final long MB_TO_BYTES = KB_TO_BYTES * 1024;\n     public static final long GB_TO_BYTES = MB_TO_BYTES * 1024;\n \n-    public static Double getTotalSizeInKB(final Metric cacheSizeGroupByOperation) {\n-        double totalSizeInKB = 0;\n+    public static Double getTotalSizeInKB(final Metric cacheSizeGroupByOperation) throws IllegalArgumentException {\n+        double totalSizeInByte = 0;\n \n         if (cacheSizeGroupByOperation.getFlowUnits().size() > 0) {\n             // we expect the Metric to have single flow unit since it is consumed locally\n             MetricFlowUnit flowUnit = cacheSizeGroupByOperation.getFlowUnits().get(0);\n             if (flowUnit.isEmpty() || flowUnit.getData() == null) {\n-                return totalSizeInKB;\n-            }\n-\n-            // since the flow unit data is aggregated by index, summing the size across indices\n-            if (flowUnit.getData().size() > 0) {\n-                Result<Record> records = flowUnit.getData();\n-                double size = records.stream().mapToDouble(\n-                        record -> record.getValue(MetricsDB.SUM, Double.class)).sum();\n-                totalSizeInKB += getSizeInKB(size);\n+                return totalSizeInByte;\n             }\n+            totalSizeInByte = SQLParsingUtil.readSumFromSqlResult(flowUnit.getData());\n         }\n \n-        if (!Double.isNaN(totalSizeInKB)) {\n-            return totalSizeInKB;\n+        if (!Double.isNaN(totalSizeInByte)) {\n+            return totalSizeInByte / ((double) KB_TO_BYTES);\n         } else {\n             throw new IllegalArgumentException(\"invalid value: {} in getTotalSizeInKB\" + Float.NaN);\n         }"
  },
  {
    "sha": "173826b893105d89fd25914f0ea71211b226c2ef",
    "filename": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/util/NodeConfigCacheReaderUtil.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/util/NodeConfigCacheReaderUtil.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/util/NodeConfigCacheReaderUtil.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/util/NodeConfigCacheReaderUtil.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -55,6 +55,19 @@ public static Long readCacheMaxSizeInBytes(\n     return null;\n   }\n \n+  public static Long readCacheActualSizeInBytes(\n+      final NodeConfigCache nodeConfigCache, final NodeKey esNode, final ResourceEnum cacheType) {\n+    try {\n+      if (cacheType.equals(ResourceEnum.FIELD_DATA_CACHE)) {\n+        return (long) nodeConfigCache.get(esNode, ResourceUtil.FIELD_DATA_CACHE_ACTUAL_SIZE);\n+      }\n+      return (long) nodeConfigCache.get(esNode, ResourceUtil.SHARD_REQUEST_CACHE_ACTUAL_SIZE);\n+    } catch (final IllegalArgumentException e) {\n+      LOG.error(\"Exception while reading cache actual size from Node Config Cache\", e);\n+    }\n+    return null;\n+  }\n+\n   public static Long readHeapMaxSizeInBytes(\n       final NodeConfigCache nodeConfigCache, final NodeKey esNode) {\n     try {"
  },
  {
    "sha": "45496c106d898a608d075915c298482776a17145",
    "filename": "src/main/proto/inter_node_rpc_service.proto",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/main/proto/inter_node_rpc_service.proto",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/main/proto/inter_node_rpc_service.proto",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/main/proto/inter_node_rpc_service.proto?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -98,6 +98,7 @@ enum MetricEnum {\n   CACHE_EVICTION = 10 [(additional_fields).name = \"cache eviction\", (additional_fields).description = \"cache eviction count\"];\n   CACHE_HIT = 11 [(additional_fields).name = \"cache hit\", (additional_fields).description = \"cache hit count\"];\n   CACHE_MAX_SIZE = 12 [(additional_fields).name = \"cache max size\", (additional_fields).description = \"max cache size in bytes\"];\n+  CACHE_ACTUAL_SIZE = 13 [(additional_fields).name = \"cache actual size\", (additional_fields).description = \"cache actual size in bytes\"];\n \n   // Heap\n   HEAP_MAX = 16 [(additional_fields).name = \"heap max\", (additional_fields).description = \"max heap size in bytes\"];"
  },
  {
    "sha": "a26aa37519a849492024f75395d64d9e1dc45287",
    "filename": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelOneActionBuilderTest.java",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelOneActionBuilderTest.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelOneActionBuilderTest.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelOneActionBuilderTest.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -139,4 +139,33 @@ public void testNoAvailableAction() {\n     List<Action> actions = LevelOneActionBuilder.newBuilder(node, testAppContext, rcaConf).build();\n     Assert.assertEquals(0, actions.size());\n   }\n+\n+  @Test\n+  public void testSuppressActionWhenCacheUsageIsLow() {\n+    final double fielddataCacheSizeInPercent = 0.3;\n+    final double shardRequestCacheSizeInPercent = 0.04;\n+    dummyCache.put(node, ResourceUtil.FIELD_DATA_CACHE_MAX_SIZE,\n+        (long)(heapMaxSizeInBytes * fielddataCacheSizeInPercent));\n+    dummyCache.put(node, ResourceUtil.SHARD_REQUEST_CACHE_MAX_SIZE,\n+        (long)(heapMaxSizeInBytes * shardRequestCacheSizeInPercent));\n+    final double fielddataCacheUsageInPercent = 0.02;\n+    final double shardRequestCacheUsageInPercent = 0.02;\n+    dummyCache.put(node, ResourceUtil.FIELD_DATA_CACHE_ACTUAL_SIZE,\n+        (long)(heapMaxSizeInBytes * fielddataCacheUsageInPercent));\n+    dummyCache.put(node, ResourceUtil.SHARD_REQUEST_CACHE_ACTUAL_SIZE,\n+        (long)(heapMaxSizeInBytes * shardRequestCacheUsageInPercent));\n+    List<Action> actions = LevelOneActionBuilder.newBuilder(node, testAppContext, rcaConf).build();\n+    deciderActionParser.addActions(actions);\n+\n+    Assert.assertEquals(1, actions.size());\n+    long expectedCacheSize;\n+    long currentCacheSize;\n+    ModifyCacheMaxSizeAction requestCacheAction = deciderActionParser.readCacheAction(ResourceEnum.SHARD_REQUEST_CACHE);\n+    Assert.assertNotNull(requestCacheAction);\n+    expectedCacheSize =\n+        (long) ((shardRequestCacheSizeInPercent - shardRequestCacheStepSize) * heapMaxSizeInBytes);\n+    currentCacheSize = (long) (shardRequestCacheSizeInPercent * heapMaxSizeInBytes);\n+    Assert.assertEquals(expectedCacheSize, requestCacheAction.getDesiredCacheMaxSizeInBytes(), 10);\n+    Assert.assertEquals(currentCacheSize, requestCacheAction.getCurrentCacheMaxSizeInBytes(), 10);\n+  }\n }"
  },
  {
    "sha": "70e4914d4a186432bc1058a1b3c30bad48b95d14",
    "filename": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelThreeActionBuilderTest.java",
    "status": "modified",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelThreeActionBuilderTest.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelThreeActionBuilderTest.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelThreeActionBuilderTest.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -25,6 +25,7 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs.CacheActionConfig;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs.QueueActionConfig;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.configs.jvm.LevelThreeActionBuilderConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.old_gen.LevelOneActionBuilder;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.old_gen.LevelThreeActionBuilder;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.test_utils.DeciderActionParserUtil;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n@@ -198,4 +199,38 @@ public void testDownSizeActionableResources() {\n     Assert.assertTrue(cacheClearAction.isActionable());\n     Assert.assertEquals(2, cacheClearAction.impactedNodes().size());\n   }\n+\n+  @Test\n+  public void testSuppressActionWhenCacheUsageIsLow() {\n+    final double fielddataCacheSizeInPercent = 0.3;\n+    final double shardRequestCacheSizeInPercent = 0.04;\n+    final int writeQueueSize = QueueActionConfig.DEFAULT_WRITE_QUEUE_LOWER_BOUND;\n+    final int searchQueueSize = 2000;\n+    dummyCache.put(node, ResourceUtil.FIELD_DATA_CACHE_MAX_SIZE,\n+        (long)(heapMaxSizeInBytes * fielddataCacheSizeInPercent));\n+    dummyCache.put(node, ResourceUtil.SHARD_REQUEST_CACHE_MAX_SIZE,\n+        (long)(heapMaxSizeInBytes * shardRequestCacheSizeInPercent));\n+    final double fielddataCacheUsageInPercent = 0.02;\n+    final double shardRequestCacheUsageInPercent = 0.02;\n+    dummyCache.put(node, ResourceUtil.FIELD_DATA_CACHE_ACTUAL_SIZE,\n+        (long)(heapMaxSizeInBytes * fielddataCacheUsageInPercent));\n+    dummyCache.put(node, ResourceUtil.SHARD_REQUEST_CACHE_ACTUAL_SIZE,\n+        (long)(heapMaxSizeInBytes * shardRequestCacheUsageInPercent));\n+    dummyCache.put(node, ResourceUtil.WRITE_QUEUE_CAPACITY, writeQueueSize);\n+    dummyCache.put(node, ResourceUtil.SEARCH_QUEUE_CAPACITY, searchQueueSize);\n+    List<Action> actions = LevelThreeActionBuilder.newBuilder(node, testAppContext, rcaConf).build();\n+    deciderActionParser.addActions(actions);\n+\n+    Assert.assertEquals(3, actions.size());\n+    long expectedCacheSize;\n+    long currentCacheSize;\n+    ModifyCacheMaxSizeAction requestCacheAction = deciderActionParser.readCacheAction(ResourceEnum.SHARD_REQUEST_CACHE);\n+    Assert.assertNotNull(requestCacheAction);\n+    expectedCacheSize = (long) (CacheActionConfig.DEFAULT_SHARD_REQUEST_CACHE_LOWER_BOUND * heapMaxSizeInBytes);\n+    currentCacheSize = (long) (shardRequestCacheSizeInPercent * heapMaxSizeInBytes);\n+    Assert.assertEquals(expectedCacheSize, requestCacheAction.getDesiredCacheMaxSizeInBytes(), 10);\n+    Assert.assertEquals(currentCacheSize, requestCacheAction.getCurrentCacheMaxSizeInBytes(), 10);\n+    ModifyCacheMaxSizeAction fielddatatCacheAction = deciderActionParser.readCacheAction(ResourceEnum.FIELD_DATA_CACHE);\n+    Assert.assertNull(fielddatatCacheAction);\n+  }\n }"
  },
  {
    "sha": "2a486a9a866928f7f9b13396b9e005e2e172dfce",
    "filename": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelTwoActionBuilderTest.java",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelTwoActionBuilderTest.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelTwoActionBuilderTest.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/LevelTwoActionBuilderTest.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -24,6 +24,7 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs.CacheActionConfig;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs.QueueActionConfig;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.configs.jvm.LevelTwoActionBuilderConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.old_gen.LevelOneActionBuilder;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.old_gen.LevelTwoActionBuilder;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.test_utils.DeciderActionParserUtil;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n@@ -353,4 +354,33 @@ public void testWriteQueueHasLargerBucketIndex() throws Exception {\n     Assert.assertEquals(expectedQueueSize, writeQueueAction.getDesiredCapacity());\n     Assert.assertEquals(writeQueueSize, writeQueueAction.getCurrentCapacity());\n   }\n+\n+  @Test\n+  public void testSuppressActionWhenCacheUsageIsLow() {\n+    final double fielddataCacheSizeInPercent = 0.3;\n+    final double shardRequestCacheSizeInPercent = 0.04;\n+    dummyCache.put(node, ResourceUtil.FIELD_DATA_CACHE_MAX_SIZE,\n+        (long)(heapMaxSizeInBytes * fielddataCacheSizeInPercent));\n+    dummyCache.put(node, ResourceUtil.SHARD_REQUEST_CACHE_MAX_SIZE,\n+        (long)(heapMaxSizeInBytes * shardRequestCacheSizeInPercent));\n+    final double fielddataCacheUsageInPercent = 0.02;\n+    final double shardRequestCacheUsageInPercent = 0.02;\n+    dummyCache.put(node, ResourceUtil.FIELD_DATA_CACHE_ACTUAL_SIZE,\n+        (long)(heapMaxSizeInBytes * fielddataCacheUsageInPercent));\n+    dummyCache.put(node, ResourceUtil.SHARD_REQUEST_CACHE_ACTUAL_SIZE,\n+        (long)(heapMaxSizeInBytes * shardRequestCacheUsageInPercent));\n+    List<Action> actions = LevelTwoActionBuilder.newBuilder(node, testAppContext, rcaConf).build();\n+    deciderActionParser.addActions(actions);\n+\n+    Assert.assertEquals(1, actions.size());\n+    long expectedCacheSize;\n+    long currentCacheSize;\n+    ModifyCacheMaxSizeAction requestCacheAction = deciderActionParser.readCacheAction(ResourceEnum.SHARD_REQUEST_CACHE);\n+    Assert.assertNotNull(requestCacheAction);\n+    expectedCacheSize =\n+        (long) ((shardRequestCacheSizeInPercent - shardRequestCacheStepSize) * heapMaxSizeInBytes);\n+    currentCacheSize = (long) (shardRequestCacheSizeInPercent * heapMaxSizeInBytes);\n+    Assert.assertEquals(expectedCacheSize, requestCacheAction.getDesiredCacheMaxSizeInBytes(), 10);\n+    Assert.assertEquals(currentCacheSize, requestCacheAction.getCurrentCacheMaxSizeInBytes(), 10);\n+  }\n }"
  },
  {
    "sha": "1280aca1b14464cc9b8903b9ef8636359fb3bade",
    "filename": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigClusterCollectorTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigClusterCollectorTest.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigClusterCollectorTest.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigClusterCollectorTest.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -39,7 +39,7 @@\n \n   @Before\n   public void init() {\n-    collector = new NodeConfigCollector(1, null, null, null);\n+    collector = new NodeConfigCollector(1, null, null, null, null, null);\n     clusterCollector = new NodeConfigClusterCollector(collector);\n     observer = new RcaTestHelper<>();\n     AppContext appContext = new AppContext();"
  },
  {
    "sha": "e22c98c3b8c09ca9344186f94a8cc1a31572ac54",
    "filename": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 1,
    "changes": 43,
    "blob_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java",
    "raw_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/raw/162113c9b88003023c5a60ce92287e637f76d158/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java",
    "contents_url": "https://api.github.com/repos/opendistro-for-elasticsearch/performance-analyzer-rca/contents/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java?ref=162113c9b88003023c5a60ce92287e637f76d158",
    "patch": "@@ -21,17 +21,22 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ShardStatsDerivedDimension;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.GradleTaskForRca;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.NodeConfigFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.flow_units.MetricFlowUnitTestHelper;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector.NodeConfigCollector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.AggregateMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.AggregateMetric.AggregateFunction;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n import java.util.Arrays;\n@@ -49,13 +54,24 @@\n   private Cache_Max_Size cacheMaxSize;\n   private Heap_Max heapMax;\n   private NodeConfigCollector nodeConfigCollector;\n+  private AggregateMetric fieldDataCacheSizeGroupByAggregation;\n+  private AggregateMetric shardRequestCacheSizeGroupByAggregation;\n \n   @Before\n   public void init() {\n     threadPool_QueueCapacity = new ThreadPool_QueueCapacity();\n     cacheMaxSize = new Cache_Max_Size(5);\n     heapMax = new Heap_Max(5);\n-    nodeConfigCollector = new NodeConfigCollector(1, threadPool_QueueCapacity, cacheMaxSize, heapMax);\n+    fieldDataCacheSizeGroupByAggregation =  new AggregateMetric(5,\n+        Cache_FieldData_Size.NAME,\n+        AggregateFunction.SUM,\n+        MetricsDB.MAX, ShardStatsDerivedDimension.INDEX_NAME.toString());\n+    shardRequestCacheSizeGroupByAggregation = new AggregateMetric(5,\n+        Cache_Request_Size.NAME,\n+        AggregateFunction.SUM,\n+        MetricsDB.MAX, ShardStatsDerivedDimension.INDEX_NAME.toString());\n+    nodeConfigCollector = new NodeConfigCollector(1, threadPool_QueueCapacity, cacheMaxSize, heapMax,\n+        fieldDataCacheSizeGroupByAggregation, shardRequestCacheSizeGroupByAggregation);\n \n     ClusterDetailsEventProcessor clusterDetailsEventProcessor = new ClusterDetailsEventProcessor();\n     ClusterDetailsEventProcessor.NodeDetails node1 =\n@@ -97,6 +113,21 @@ private void mockHeapMaxSizeFlowUnits(int heapMaxSize, int oldGenMaxSize, int ed\n     heapMax.setLocalFlowUnit(flowUnit);\n   }\n \n+  /**\n+   * generate flowunit and bind the flowunits it generate to metrics\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  private void mockFieldDataCacheSizeFlowUnits() {\n+    MetricFlowUnit flowUnit =\n+        MetricFlowUnitTestHelper.createFlowUnit(\n+            Arrays.asList(ShardStatsDerivedDimension.INDEX_NAME.toString(), MetricsDB.SUM),\n+            Arrays.asList(\"index1\", \"500\"),\n+            Arrays.asList(\"index2\", \"1500\"),\n+            Arrays.asList(\"index4\", \"900\")\n+        );\n+    fieldDataCacheSizeGroupByAggregation.setLocalFlowUnit(flowUnit);\n+  }\n+\n   @Test\n   public void testQueueCapacityMetricNotExist() {\n     threadPool_QueueCapacity.setLocalFlowUnit(MetricFlowUnit.generic());\n@@ -160,4 +191,14 @@ public void testHeapMaxSizeCollection() {\n     Assert.assertEquals(oldGenMaxSize, appContext.getNodeConfigCache().get(nodeKey, ResourceUtil.OLD_GEN_MAX_SIZE), 0.01);\n     Assert.assertEquals(expectedYoungGenMaxSize, appContext.getNodeConfigCache().get(nodeKey, ResourceUtil.YOUNG_GEN_MAX_SIZE), 0.01);\n   }\n+\n+  @Test\n+  public void testFieldDataCacheActualSizeCollection() {\n+    mockFieldDataCacheSizeFlowUnits();\n+    NodeConfigFlowUnit flowUnit = nodeConfigCollector.operate();\n+    Assert.assertFalse(flowUnit.isEmpty());\n+    Assert.assertTrue(flowUnit.hasConfig(ResourceUtil.FIELD_DATA_CACHE_ACTUAL_SIZE));\n+    Assert.assertEquals(2900, flowUnit.readConfig(ResourceUtil.FIELD_DATA_CACHE_ACTUAL_SIZE), 0.01);\n+    Assert.assertEquals(2900, appContext.getNodeConfigCache().get(nodeKey, ResourceUtil.FIELD_DATA_CACHE_ACTUAL_SIZE), 0.01);\n+  }\n }"
  }
]
