[
  {
    "sha": "10238028a42a21d8ccb7d240bf8d03f3757d7adf",
    "filename": "junit5/src/main/java/cz/xtf/junit5/extensions/OpenShiftRecorderHandler.java",
    "status": "modified",
    "additions": 26,
    "deletions": 457,
    "changes": 483,
    "blob_url": "https://github.com/xtf-cz/xtf/blob/1eabb05d73c69f1e0972c3925a1e8b51be68a1e2/junit5/src/main/java/cz/xtf/junit5/extensions/OpenShiftRecorderHandler.java",
    "raw_url": "https://github.com/xtf-cz/xtf/raw/1eabb05d73c69f1e0972c3925a1e8b51be68a1e2/junit5/src/main/java/cz/xtf/junit5/extensions/OpenShiftRecorderHandler.java",
    "contents_url": "https://api.github.com/repos/xtf-cz/xtf/contents/junit5/src/main/java/cz/xtf/junit5/extensions/OpenShiftRecorderHandler.java?ref=1eabb05d73c69f1e0972c3925a1e8b51be68a1e2",
    "patch": "@@ -1,220 +1,61 @@\n package cz.xtf.junit5.extensions;\n \n import java.io.IOException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.function.BiConsumer;\n \n import org.junit.jupiter.api.extension.BeforeAllCallback;\n import org.junit.jupiter.api.extension.BeforeEachCallback;\n import org.junit.jupiter.api.extension.ExtensionContext;\n-import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n-import org.junit.jupiter.api.extension.ExtensionContext.Store;\n import org.junit.jupiter.api.extension.LifecycleMethodExecutionExceptionHandler;\n import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n import org.junit.jupiter.api.extension.TestWatcher;\n-import org.junit.platform.commons.support.AnnotationSupport;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import cz.xtf.core.bm.BuildManagers;\n-import cz.xtf.core.openshift.OpenShift;\n-import cz.xtf.core.openshift.OpenShifts;\n-import cz.xtf.junit5.annotations.OpenShiftRecorder;\n import cz.xtf.junit5.config.JUnitConfig;\n-import cz.xtf.junit5.extensions.helpers.EventsFilterBuilder;\n-import cz.xtf.junit5.extensions.helpers.ResourcesFilterBuilder;\n-import cz.xtf.junit5.extensions.helpers.ResourcesPrinterHelper;\n-import cz.xtf.junit5.extensions.helpers.ResourcesTimestampHelper;\n-import io.fabric8.kubernetes.api.model.ConfigMap;\n-import io.fabric8.kubernetes.api.model.Event;\n-import io.fabric8.kubernetes.api.model.HasMetadata;\n-import io.fabric8.kubernetes.api.model.Pod;\n-import io.fabric8.kubernetes.api.model.Secret;\n-import io.fabric8.kubernetes.api.model.Service;\n-import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n-import io.fabric8.openshift.api.model.Build;\n-import io.fabric8.openshift.api.model.BuildConfig;\n-import io.fabric8.openshift.api.model.DeploymentConfig;\n-import io.fabric8.openshift.api.model.ImageStream;\n-import io.fabric8.openshift.api.model.Route;\n \n /**\n- * Record OpenShift isolated state relative to a test.\n- * Resources are filtered by name provided via {@link OpenShiftRecorder} annotation. Names are turned into regexes\n- * by adding {@code .*} as a suffix. If no name is provided, resources in namespaces (BM and master) are filtered automatically\n- * by recording what resources are seen before test and so on.\n+ * Implements JUnit lifecycle events handling in order to record OCP state for different purposes (e.g.: debug).\n+ * The operational logic to perform the steps to get the status from OCP is delegated to\n+ * {@link OpenShiftRecorderService}.\n+ *\n+ * Based on the type of the event that is being handled, an instance of this class will either call\n+ * {@link OpenShiftRecorderService#initFilters(ExtensionContext)} or\n+ * {@link OpenShiftRecorderService#updateFilters(ExtensionContext)}\n+ * or instead request to get an OCP state record via {@link OpenShiftRecorderService#recordState(ExtensionContext)}\n  * <p>\n- * Recorded resources:\n- * <ul>\n- * <li>pods states</li>\n- * <li>deployment configs states</li>\n- * <li>builds states</li>\n- * <li>build configs states</li>\n- * <li>image streams states</li>\n- * <li>stateful sets states</li>\n- * <li>routes states</li>\n- * <li>services states</li>\n- * <li>secrets states</li>\n- * <li>logs of pods</li>\n- * <li>events</li>\n- * </ul>\n- * <p>\n- * OpenShift state is recorded when a test throws an exception. If {@link JUnitConfig#recordAlways()} is true, state is\n- * recorded also when a test passes.\n+ * OpenShift state is recorded in the following cases:\n  * <p>\n- * Use {@link JUnitConfig#recordDir()} ()} to set the directory of records.\n+ * <ul>\n+ * <li>{@link TestExecutionExceptionHandler#handleTestExecutionException}</li>\n+ * <li>{@link LifecycleMethodExecutionExceptionHandler#handleBeforeAllMethodExecutionException(ExtensionContext, Throwable)}\n+ * and {@link LifecycleMethodExecutionExceptionHandler#handleBeforeEachMethodExecutionException(ExtensionContext, Throwable)}\n+ * in case {@code xtf.record.before} is set</li>\n+ * <li>{@link TestWatcher#testSuccessful(ExtensionContext)} in case {@code xtf.record.before} is set</li>\n  */\n public class OpenShiftRecorderHandler implements TestWatcher, TestExecutionExceptionHandler, BeforeAllCallback,\n         BeforeEachCallback, LifecycleMethodExecutionExceptionHandler {\n     private static final Logger log = LoggerFactory.getLogger(OpenShiftRecorderHandler.class);\n \n-    private static final String FILTER_FOR_BEFORE_ALL_DONE = \"RESOURCES_FOR_BEFORE_ALL_RECORDED\";\n+    private final OpenShiftRecorderService openShiftRecorderService;\n \n-    private static final String POD_FILTER_MASTER = \"POD_FILTER_MASTER\";\n-    private static final String DC_FILTER_MASTER = \"DC_FILTER_MASTER\";\n-    private static final String BUILD_FILTER_MASTER = \"BUILD_FILTER_MASTER\";\n-    private static final String BC_FILTER_MASTER = \"BC_FILTER_MASTER\";\n-    private static final String IS_FILTER_MASTER = \"IS_FILTER_MASTER\";\n-    private static final String SS_FILTER_MASTER = \"SS_FILTER_MASTER\";\n-    private static final String ROUTE_FILTER_MASTER = \"ROUTE_FILTER_MASTER\";\n-    private static final String CONFIGMAP_FILTER_MASTER = \"CONFIGMAP_FILTER_MASTER\";\n-    private static final String SERVICE_FILTER_MASTER = \"SERVICE_FILTER_MASTER\";\n-    private static final String EVENT_FILTER_MASTER = \"EVENT_FILTER_MASTER\";\n-\n-    private static final String POD_FILTER_BUILDS = \"POD_FILTER_BUILDS\";\n-    private static final String BUILD_FILTER_BUILDS = \"BUILD_METHOD_FILTER_BUILDS\";\n-    private static final String BC_FILTER_BUILDS = \"BC_FILTER_BUILDS\";\n-    private static final String IS_FILTER_BUILDS = \"IS_FILTER_BUILDS\";\n-    private static final String EVENT_FILTER_BUILDS = \"EVENT_FILTER_BUILDS\";\n+    public OpenShiftRecorderHandler() {\n+        openShiftRecorderService = new OpenShiftRecorderService();\n+    }\n \n     @Override\n     public void beforeAll(ExtensionContext context) {\n-        Store classStore = getClassStore(context);\n-        OpenShift master = OpenShifts.master();\n-        OpenShift bm = BuildManagers.get().openShift();\n-\n-        initClassFilter(context, POD_FILTER_MASTER, master, Pod.class);\n-        initClassFilter(context, DC_FILTER_MASTER, master, DeploymentConfig.class);\n-        initClassFilter(context, BUILD_FILTER_MASTER, master, Build.class);\n-        initClassFilter(context, BC_FILTER_MASTER, master, BuildConfig.class);\n-        initClassFilter(context, IS_FILTER_MASTER, master, ImageStream.class);\n-        initClassFilter(context, SS_FILTER_MASTER, master, StatefulSet.class);\n-        initClassFilter(context, ROUTE_FILTER_MASTER, master, Route.class);\n-        initClassFilter(context, CONFIGMAP_FILTER_MASTER, master, ConfigMap.class);\n-        initClassFilter(context, SERVICE_FILTER_MASTER, master, Service.class);\n-        classStore.put(EVENT_FILTER_MASTER,\n-                new EventsFilterBuilder().setExcludedUntil(ResourcesTimestampHelper.timeOfLastEvent(master)));\n-\n-        // builds namespace (if not same)\n-        if (!isMasterAndBuildNamespaceSame()) {\n-            initClassFilter(context, POD_FILTER_BUILDS, bm, Pod.class);\n-            initClassFilter(context, BUILD_FILTER_BUILDS, bm, Build.class);\n-            initClassFilter(context, BC_FILTER_BUILDS, bm, BuildConfig.class);\n-            initClassFilter(context, IS_FILTER_BUILDS, bm, ImageStream.class);\n-            classStore.put(EVENT_FILTER_BUILDS,\n-                    new EventsFilterBuilder().setExcludedUntil(ResourcesTimestampHelper.timeOfLastEvent(bm)));\n-        }\n-\n-        classStore.put(FILTER_FOR_BEFORE_ALL_DONE, new AtomicBoolean(false));\n-    }\n-\n-    private void initClassFilter(ExtensionContext context, String key, OpenShift openShift,\n-            Class<? extends HasMetadata> resourceClass) {\n-        Store classStore = getClassStore(context);\n-        classStore.put(key, new ResourcesFilterBuilder()\n-                .setExcludedUntil(ResourcesTimestampHelper.timeOfLastResourceOf(openShift, resourceClass)));\n-    }\n-\n-    private void updateClassFilterBeforeAllResources(ExtensionContext context, String key, OpenShift openShift,\n-            Class<? extends HasMetadata> resourceClass) {\n-        Store classStore = getClassStore(context);\n-        classStore.get(key, ResourcesFilterBuilder.class)\n-                .setIncludedAlwaysWindow(\n-                        classStore.get(key, ResourcesFilterBuilder.class).getExcludedUntil(),\n-                        ResourcesTimestampHelper.timeOfLastResourceOf(openShift, resourceClass))\n-                .setExcludedUntil(null);\n-    }\n-\n-    private void initMethodFilter(ExtensionContext context, String key, OpenShift openShift,\n-            Class<? extends HasMetadata> resourceClass) {\n-        Store classStore = getClassStore(context);\n-        Store methodStore = getMethodStore(context);\n-        try {\n-            methodStore.put(key, classStore.get(key, ResourcesFilterBuilder.class)\n-                    .clone()\n-                    .setExcludedUntil(ResourcesTimestampHelper.timeOfLastResourceOf(openShift, resourceClass)));\n-        } catch (CloneNotSupportedException e) {\n-            throw new RuntimeException(e);\n-        }\n+        openShiftRecorderService.initFilters(context);\n     }\n \n     @Override\n-    public void beforeEach(ExtensionContext context) throws Exception {\n-        Store classStore = getClassStore(context);\n-        Store methodStore = getMethodStore(context);\n-        OpenShift master = OpenShifts.master();\n-        OpenShift bm = BuildManagers.get().openShift();\n-        if (!classStore.get(FILTER_FOR_BEFORE_ALL_DONE, AtomicBoolean.class).get()) {\n-            // so far filters have filtered everything until _BEFORE_ALL_ - TIME_1\n-            // now we are before _BEFORE_EACH_ and implicitly _BEFORE_ALL_ is successful\n-            // set filter in a way everything created between TIME_1 and now will be captured - alwaysIncludedWindow\n-            // excluded until is set below\n-\n-            //master\n-            updateClassFilterBeforeAllResources(context, POD_FILTER_MASTER, master, Pod.class);\n-            updateClassFilterBeforeAllResources(context, DC_FILTER_MASTER, master, DeploymentConfig.class);\n-            updateClassFilterBeforeAllResources(context, BUILD_FILTER_MASTER, master, Build.class);\n-            updateClassFilterBeforeAllResources(context, BC_FILTER_MASTER, master, BuildConfig.class);\n-            updateClassFilterBeforeAllResources(context, IS_FILTER_MASTER, master, ImageStream.class);\n-            updateClassFilterBeforeAllResources(context, SS_FILTER_MASTER, master, StatefulSet.class);\n-            updateClassFilterBeforeAllResources(context, ROUTE_FILTER_MASTER, master, Route.class);\n-            updateClassFilterBeforeAllResources(context, CONFIGMAP_FILTER_MASTER, master, ConfigMap.class);\n-            updateClassFilterBeforeAllResources(context, SERVICE_FILTER_MASTER, master, Service.class);\n-            updateClassFilterBeforeAllResources(context, EVENT_FILTER_MASTER, master, Event.class);\n-\n-            // builds namespace (if not same)\n-            if (!isMasterAndBuildNamespaceSame()) {\n-                updateClassFilterBeforeAllResources(context, POD_FILTER_BUILDS, bm, Pod.class);\n-                updateClassFilterBeforeAllResources(context, BUILD_FILTER_BUILDS, bm, Build.class);\n-                updateClassFilterBeforeAllResources(context, BC_FILTER_BUILDS, bm, BuildConfig.class);\n-                updateClassFilterBeforeAllResources(context, IS_FILTER_BUILDS, bm, ImageStream.class);\n-                updateClassFilterBeforeAllResources(context, EVENT_FILTER_BUILDS, bm, Event.class);\n-            }\n-\n-            classStore.get(FILTER_FOR_BEFORE_ALL_DONE, AtomicBoolean.class).set(true);\n-        }\n-\n-        // RESOURCE_FILTERs are setup and now we are setting filter for specific tests\n-        // need to clone (shallow) it, since tests may run in a parallel way\n-\n-        // master\n-        initMethodFilter(context, POD_FILTER_MASTER, master, Pod.class);\n-        initMethodFilter(context, DC_FILTER_MASTER, master, DeploymentConfig.class);\n-        initMethodFilter(context, BUILD_FILTER_MASTER, master, Build.class);\n-        initMethodFilter(context, BC_FILTER_MASTER, master, BuildConfig.class);\n-        initMethodFilter(context, IS_FILTER_MASTER, master, ImageStream.class);\n-        initMethodFilter(context, SS_FILTER_MASTER, master, StatefulSet.class);\n-        initMethodFilter(context, ROUTE_FILTER_MASTER, master, Route.class);\n-        initMethodFilter(context, CONFIGMAP_FILTER_MASTER, master, Route.class);\n-        initMethodFilter(context, SERVICE_FILTER_MASTER, master, Service.class);\n-        initMethodFilter(context, EVENT_FILTER_MASTER, master, Event.class);\n-\n-        // builds namespace (if not same)\n-        if (!isMasterAndBuildNamespaceSame()) {\n-            initMethodFilter(context, POD_FILTER_BUILDS, bm, Pod.class);\n-            initMethodFilter(context, BUILD_FILTER_BUILDS, bm, Build.class);\n-            initMethodFilter(context, BC_FILTER_BUILDS, bm, BuildConfig.class);\n-            initMethodFilter(context, IS_FILTER_BUILDS, bm, ImageStream.class);\n-            initMethodFilter(context, EVENT_FILTER_BUILDS, bm, Event.class);\n-        }\n+    public void beforeEach(ExtensionContext context) {\n+        openShiftRecorderService.updateFilters(context);\n     }\n \n     @Override\n     public void handleTestExecutionException(ExtensionContext context, Throwable throwable) throws Throwable {\n         try {\n-            recordState(context);\n+            openShiftRecorderService.recordState(context);\n         } catch (Throwable t) {\n             log.error(\"Throwable: \", t);\n         } finally {\n@@ -227,7 +68,7 @@ public void handleBeforeAllMethodExecutionException(final ExtensionContext conte\n             throws Throwable {\n         try {\n             if (JUnitConfig.recordBefore()) {\n-                recordState(context);\n+                openShiftRecorderService.recordState(context);\n             }\n         } catch (Throwable t) {\n             log.error(\"Throwable: \", t);\n@@ -241,7 +82,7 @@ public void handleBeforeEachMethodExecutionException(final ExtensionContext cont\n             throws Throwable {\n         try {\n             if (JUnitConfig.recordBefore()) {\n-                recordState(context);\n+                openShiftRecorderService.recordState(context);\n             }\n         } catch (Throwable t) {\n             log.error(\"Throwable: \", t);\n@@ -254,282 +95,10 @@ public void handleBeforeEachMethodExecutionException(final ExtensionContext cont\n     public void testSuccessful(ExtensionContext context) {\n         if (JUnitConfig.recordAlways()) {\n             try {\n-                recordState(context);\n+                openShiftRecorderService.recordState(context);\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n         }\n     }\n-\n-    private void recordState(ExtensionContext context) throws IOException {\n-        savePods(context, getFilter(context, POD_FILTER_MASTER),\n-                !isMasterAndBuildNamespaceSame() ? getFilter(context, POD_FILTER_BUILDS) : null);\n-        saveDCs(context, getFilter(context, DC_FILTER_MASTER));\n-        saveBuilds(context, getFilter(context, BUILD_FILTER_MASTER),\n-                !isMasterAndBuildNamespaceSame() ? getFilter(context, BUILD_FILTER_BUILDS) : null);\n-        saveBCs(context, getFilter(context, BC_FILTER_MASTER),\n-                !isMasterAndBuildNamespaceSame() ? getFilter(context, BC_FILTER_BUILDS) : null);\n-        saveISs(context, getFilter(context, IS_FILTER_MASTER),\n-                !isMasterAndBuildNamespaceSame() ? getFilter(context, IS_FILTER_BUILDS) : null);\n-        saveStatefulsets(context, getFilter(context, SS_FILTER_MASTER));\n-        saveRoutes(context, getFilter(context, ROUTE_FILTER_MASTER));\n-        saveConfigMaps(context, getFilter(context, CONFIGMAP_FILTER_MASTER));\n-        saveServices(context, getFilter(context, SERVICE_FILTER_MASTER));\n-        saveSecrets(context);\n-        savePodLogs(context, getFilter(context, POD_FILTER_MASTER),\n-                !isMasterAndBuildNamespaceSame() ? getFilter(context, POD_FILTER_BUILDS) : null);\n-        saveEvents(context, getFilter(context, EVENT_FILTER_MASTER),\n-                !isMasterAndBuildNamespaceSame() ? getFilter(context, EVENT_FILTER_BUILDS) : null);\n-    }\n-\n-    private <E extends HasMetadata> ResourcesFilterBuilder<E> getFilter(ExtensionContext context, String key) {\n-        OpenShiftRecorder classOpenShiftRecorder = AnnotationSupport\n-                .findAnnotation(context.getRequiredTestClass(), OpenShiftRecorder.class).orElse(null);\n-        OpenShiftRecorder methodOpenShiftRecorder = AnnotationSupport\n-                .findAnnotation(context.getElement(), OpenShiftRecorder.class).orElse(null);\n-        OpenShiftRecorder openShiftRecorder = methodOpenShiftRecorder != null ? methodOpenShiftRecorder\n-                : classOpenShiftRecorder;\n-\n-        // annotation (openShiftRecorder is not null) or global include in META-INF.services - null\n-        String[] resourceNames = openShiftRecorder != null ? openShiftRecorder.resourceNames() : null;\n-\n-        ResourcesFilterBuilder<E> filter = context.getTestMethod().isPresent()\n-                ? (ResourcesFilterBuilder<E>) getMethodStore(context).get(key, ResourcesFilterBuilder.class)\n-                : (ResourcesFilterBuilder<E>) getClassStore(context).get(key, ResourcesFilterBuilder.class);\n-\n-        // OpenShiftRecorder (OpenShiftRecorderHandler) may be used in following ways\n-        // (1) A test is annotated by @OpenShiftRecorder - OpenShiftRecorder#resourcesNames is set to default value -\n-        //     an array of one empty string.\n-        // (2) A test is annotated by @OpenShiftRecorder(string [string]*) -\n-        //     OpenShiftRecorder#resourcesNames is an array of strings. null value is not allowed in an annotation.\n-        // (3) OpenShiftRecorderHandler is defined via SPI in resources/META-INF/services\n-        //     the annotation is not found for the test class and resourceNames is null\n-        if (resourceNames != null // exclude (3)\n-                && !(resourceNames.length == 1 && resourceNames[0].equals(\"\")) // exclude (1)\n-        ) {\n-            // option (2) list of resource names is present - filter by names\n-            filter.filterByResourceNames();\n-            filter.setResourceNames(resourceNames);\n-        } else {\n-            filter.filterByLastSeenResources();\n-        }\n-        return filter;\n-    }\n-\n-    private void saveStatefulsets(ExtensionContext context, ResourcesFilterBuilder<StatefulSet> masterFilter)\n-            throws IOException {\n-        final Path StatefulSetsLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"statefulSets.log\");\n-\n-        try (final ResourcesPrinterHelper<StatefulSet> printer = ResourcesPrinterHelper.forStatefulSet(StatefulSetsLogPath)) {\n-            OpenShifts.master().getStatefulSets().stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-    }\n-\n-    private void saveISs(ExtensionContext context, ResourcesFilterBuilder<ImageStream> masterFilter,\n-            ResourcesFilterBuilder<ImageStream> buildsFilter) throws IOException {\n-        // master namespace\n-        final Path imageStreamsMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                \"imageStreams-\" + OpenShifts.master().getNamespace() + \".log\");\n-        try (final ResourcesPrinterHelper<ImageStream> printer = ResourcesPrinterHelper.forISs(imageStreamsMasterLogPath)) {\n-            OpenShifts.master().getImageStreams().stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-        // builds namespace (if not same)\n-        if (!isMasterAndBuildNamespaceSame()) {\n-            final Path imageStreamsBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                    \"imageStreams-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n-            try (final ResourcesPrinterHelper<ImageStream> printer = ResourcesPrinterHelper.forISs(imageStreamsBMLogPath)) {\n-                BuildManagers.get().openShift().getImageStreams().stream()\n-                        .filter(buildsFilter.build())\n-                        .forEach(printer::row);\n-            }\n-        }\n-    }\n-\n-    private void saveBCs(ExtensionContext context, ResourcesFilterBuilder<BuildConfig> masterFilter,\n-            ResourcesFilterBuilder<BuildConfig> buildsFilter) throws IOException {\n-        final Path bcMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                \"buildConfigs-\" + OpenShifts.master().getNamespace() + \".log\");\n-        try (final ResourcesPrinterHelper<BuildConfig> printer = ResourcesPrinterHelper.forBCs(bcMasterLogPath)) {\n-            OpenShifts.master().getBuildConfigs().stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-        // builds namespace (if not same)\n-        if (!isMasterAndBuildNamespaceSame()) {\n-            final Path bcBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                    \"buildConfigs-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n-            try (final ResourcesPrinterHelper<BuildConfig> printer = ResourcesPrinterHelper.forBCs(bcBMLogPath)) {\n-                BuildManagers.get().openShift().getBuildConfigs().stream()\n-                        .filter(buildsFilter.build())\n-                        .forEach(printer::row);\n-            }\n-        }\n-    }\n-\n-    private void saveBuilds(ExtensionContext context, ResourcesFilterBuilder<Build> masterFilter,\n-            ResourcesFilterBuilder<Build> buildsFilter) throws IOException {\n-        // master namespace\n-        final Path buildsMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                \"builds-\" + OpenShifts.master().getNamespace() + \".log\");\n-        try (final ResourcesPrinterHelper<Build> printer = ResourcesPrinterHelper.forBuilds(buildsMasterLogPath)) {\n-            OpenShifts.master().getBuilds().stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-        // builds namespace (if not same)\n-        if (!isMasterAndBuildNamespaceSame()) {\n-            final Path buildsBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                    \"builds-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n-            try (final ResourcesPrinterHelper<Build> printer = ResourcesPrinterHelper.forBuilds(buildsBMLogPath)) {\n-                BuildManagers.get().openShift().getBuilds().stream()\n-                        .filter(buildsFilter.build())\n-                        .forEach(printer::row);\n-            }\n-        }\n-    }\n-\n-    private void saveSecrets(ExtensionContext context) throws IOException {\n-        final Path secretsLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"secrets.log\");\n-        try (final ResourcesPrinterHelper<Secret> printer = ResourcesPrinterHelper.forSecrets(secretsLogPath)) {\n-            OpenShifts.master().getSecrets()\n-                    .forEach(printer::row);\n-        }\n-    }\n-\n-    private void saveServices(ExtensionContext context, ResourcesFilterBuilder<Service> masterFilter) throws IOException {\n-        final Path servicesLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"services.log\");\n-        try (final ResourcesPrinterHelper<Service> printer = ResourcesPrinterHelper.forServices(servicesLogPath)) {\n-            OpenShifts.master().getServices().stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-    }\n-\n-    private void saveRoutes(ExtensionContext context, ResourcesFilterBuilder<Route> masterFilter) throws IOException {\n-        final Path routesLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"routes.log\");\n-        try (final ResourcesPrinterHelper<Route> printer = ResourcesPrinterHelper.forRoutes(routesLogPath)) {\n-            OpenShifts.master().getRoutes().stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-    }\n-\n-    private void saveConfigMaps(ExtensionContext context, ResourcesFilterBuilder<ConfigMap> masterFilter) throws IOException {\n-        final Path configMapsLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"configMaps.log\");\n-        try (final ResourcesPrinterHelper<ConfigMap> printer = ResourcesPrinterHelper.forConfigMaps(configMapsLogPath)) {\n-            OpenShifts.master().getConfigMaps().stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-    }\n-\n-    private void savePods(ExtensionContext context, ResourcesFilterBuilder<Pod> masterFilter,\n-            ResourcesFilterBuilder<Pod> buildsFilter) throws IOException {\n-        // master namespace\n-        final Path podsMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                \"pods-\" + OpenShifts.master().getNamespace() + \".log\");\n-        try (final ResourcesPrinterHelper<Pod> printer = ResourcesPrinterHelper.forPods(podsMasterLogPath)) {\n-            OpenShifts.master().getPods()\n-                    .stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-        // builds namespace (if not same)\n-        if (!isMasterAndBuildNamespaceSame()) {\n-            final Path podsBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                    \"pods-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n-            try (final ResourcesPrinterHelper<Pod> printer = ResourcesPrinterHelper.forPods(podsBMLogPath)) {\n-                BuildManagers.get().openShift().getPods()\n-                        .stream()\n-                        .filter(buildsFilter.build())\n-                        .forEach(printer::row);\n-            }\n-        }\n-    }\n-\n-    private void saveDCs(ExtensionContext context, ResourcesFilterBuilder<DeploymentConfig> masterFilter) throws IOException {\n-        final Path dcsLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"deploymentConfigs.log\");\n-        try (final ResourcesPrinterHelper<DeploymentConfig> printer = ResourcesPrinterHelper.forDCs(dcsLogPath)) {\n-            OpenShifts.master().getDeploymentConfigs().stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-\n-        }\n-    }\n-\n-    private Store getClassStore(ExtensionContext extensionContext) {\n-        return extensionContext.getStore(Namespace.create(extensionContext.getRequiredTestClass()));\n-    }\n-\n-    private Store getMethodStore(ExtensionContext extensionContext) {\n-        return extensionContext\n-                .getStore(Namespace.create(extensionContext.getRequiredTestClass(), extensionContext.getTestClass()));\n-    }\n-\n-    private void savePodLogs(ExtensionContext context, ResourcesFilterBuilder<Pod> masterFilter,\n-            ResourcesFilterBuilder<Pod> buildsFilter) {\n-        BiConsumer<OpenShift, ResourcesFilterBuilder<Pod>> podPrinter = (openShift, filter) -> openShift.getPods()\n-                .stream()\n-                .filter(filter.build())\n-                .forEach(pod -> {\n-                    try {\n-                        openShift.storePodLog(\n-                                pod,\n-                                Paths.get(attachmentsDir(), dirNameForTest(context)),\n-                                pod.getMetadata().getName() + \".log\");\n-                    } catch (IOException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                });\n-\n-        podPrinter.accept(OpenShifts.master(), masterFilter);\n-        if (!isMasterAndBuildNamespaceSame()) {\n-            podPrinter.accept(BuildManagers.get().openShift(), buildsFilter);\n-        }\n-    }\n-\n-    private String dirNameForTest(ExtensionContext context) {\n-        // if is test\n-        if (context.getTestMethod().isPresent()) {\n-            return context.getTestClass().get().getName() + \".\" + context.getDisplayName();\n-        } else {\n-            return context.getTestClass().get().getName();\n-        }\n-    }\n-\n-    private void saveEvents(ExtensionContext context, ResourcesFilterBuilder<Event> masterFilter,\n-            ResourcesFilterBuilder<Event> buildsFilter) throws IOException {\n-        // master namespace\n-        final Path eventsMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                \"events-\" + OpenShifts.master().getNamespace() + \".log\");\n-        try (final ResourcesPrinterHelper<Event> printer = ResourcesPrinterHelper.forEvents(eventsMasterLogPath)) {\n-            OpenShifts.master().getEvents()\n-                    .stream()\n-                    .filter(masterFilter.build())\n-                    .forEach(printer::row);\n-        }\n-        // builds namespace (if not same)\n-        if (!isMasterAndBuildNamespaceSame()) {\n-            final Path eventsBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n-                    \"events-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n-            try (final ResourcesPrinterHelper<Event> printer = ResourcesPrinterHelper.forEvents(eventsBMLogPath)) {\n-                BuildManagers.get().openShift().getEvents()\n-                        .stream()\n-                        .filter(buildsFilter.build())\n-                        .forEach(printer::row);\n-            }\n-        }\n-    }\n-\n-    private String attachmentsDir() {\n-        return JUnitConfig.recordDir() != null ? JUnitConfig.recordDir() : System.getProperty(\"user.dir\");\n-    }\n-\n-    private boolean isMasterAndBuildNamespaceSame() {\n-        return OpenShifts.master().getNamespace().equals(BuildManagers.get().openShift().getNamespace());\n-    }\n }"
  },
  {
    "sha": "c925d9a60c5d98ece8d9c956069ab1b28f637de2",
    "filename": "junit5/src/main/java/cz/xtf/junit5/extensions/OpenShiftRecorderService.java",
    "status": "added",
    "additions": 540,
    "deletions": 0,
    "changes": 540,
    "blob_url": "https://github.com/xtf-cz/xtf/blob/1eabb05d73c69f1e0972c3925a1e8b51be68a1e2/junit5/src/main/java/cz/xtf/junit5/extensions/OpenShiftRecorderService.java",
    "raw_url": "https://github.com/xtf-cz/xtf/raw/1eabb05d73c69f1e0972c3925a1e8b51be68a1e2/junit5/src/main/java/cz/xtf/junit5/extensions/OpenShiftRecorderService.java",
    "contents_url": "https://api.github.com/repos/xtf-cz/xtf/contents/junit5/src/main/java/cz/xtf/junit5/extensions/OpenShiftRecorderService.java?ref=1eabb05d73c69f1e0972c3925a1e8b51be68a1e2",
    "patch": "@@ -0,0 +1,540 @@\n+package cz.xtf.junit5.extensions;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiConsumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import cz.xtf.core.bm.BuildManagers;\n+import cz.xtf.core.openshift.OpenShift;\n+import cz.xtf.core.openshift.OpenShifts;\n+import cz.xtf.junit5.annotations.OpenShiftRecorder;\n+import cz.xtf.junit5.config.JUnitConfig;\n+import cz.xtf.junit5.extensions.helpers.EventsFilterBuilder;\n+import cz.xtf.junit5.extensions.helpers.ResourcesFilterBuilder;\n+import cz.xtf.junit5.extensions.helpers.ResourcesPrinterHelper;\n+import cz.xtf.junit5.extensions.helpers.ResourcesTimestampHelper;\n+import io.fabric8.kubernetes.api.model.ConfigMap;\n+import io.fabric8.kubernetes.api.model.Event;\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.fabric8.kubernetes.api.model.Secret;\n+import io.fabric8.kubernetes.api.model.Service;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n+import io.fabric8.openshift.api.model.Build;\n+import io.fabric8.openshift.api.model.BuildConfig;\n+import io.fabric8.openshift.api.model.DeploymentConfig;\n+import io.fabric8.openshift.api.model.ImageStream;\n+import io.fabric8.openshift.api.model.Route;\n+\n+/**\n+ * Record OpenShift isolated state relative to a test.\n+ * Provides an API and implementation for setting filtered resources and recording their state upon request.\n+ *\n+ * This service class can typically be used by classes that implement JUnit extension lifecycle interfaces,\n+ * e.g.: {@link org.junit.jupiter.api.extension.TestWatcher}, {@link org.junit.jupiter.api.extension.BeforeAllCallback}\n+ * etc.\n+ *\n+ * One example of such classes is {@link OpenShiftRecorderHandler} which initializes (and updates) filters or\n+ * records OCP state when handling different JUnit events.\n+ *\n+ * State recording is about downloading several resources logs from OCP.\n+ *\n+ * Resources are filtered by name provided via {@link OpenShiftRecorder} annotation. Names are turned into regexes\n+ * by adding {@code .*} as a suffix. If no name is provided, resources in namespaces (BM and master) are filtered\n+ * automatically by recording which resources are seen before test and so on.\n+ * <p>\n+ * Recorded resources:\n+ * <ul>\n+ * <li>pods states</li>\n+ * <li>deployment configs states</li>\n+ * <li>builds states</li>\n+ * <li>build configs states</li>\n+ * <li>image streams states</li>\n+ * <li>stateful sets states</li>\n+ * <li>routes states</li>\n+ * <li>services states</li>\n+ * <li>secrets states</li>\n+ * <li>logs of pods</li>\n+ * <li>logs of builds</li>\n+ * <li>events</li>\n+ * </ul>\n+ * <p>\n+ * Use {@link JUnitConfig#recordDir()} ()} to set the directory of records.\n+ */\n+public class OpenShiftRecorderService {\n+    private static final Logger log = LoggerFactory.getLogger(OpenShiftRecorderService.class);\n+\n+    private static final String FILTER_INITIALIZATION_DONE = \"FILTERS_INITIALIZATION_DONE\";\n+    private static final String POD_FILTER_MASTER = \"POD_FILTER_MASTER\";\n+    private static final String DC_FILTER_MASTER = \"DC_FILTER_MASTER\";\n+    private static final String BUILD_FILTER_MASTER = \"BUILD_FILTER_MASTER\";\n+    private static final String BC_FILTER_MASTER = \"BC_FILTER_MASTER\";\n+    private static final String IS_FILTER_MASTER = \"IS_FILTER_MASTER\";\n+    private static final String SS_FILTER_MASTER = \"SS_FILTER_MASTER\";\n+    private static final String ROUTE_FILTER_MASTER = \"ROUTE_FILTER_MASTER\";\n+    private static final String CONFIGMAP_FILTER_MASTER = \"CONFIGMAP_FILTER_MASTER\";\n+    private static final String SERVICE_FILTER_MASTER = \"SERVICE_FILTER_MASTER\";\n+    private static final String EVENT_FILTER_MASTER = \"EVENT_FILTER_MASTER\";\n+    private static final String POD_FILTER_BUILDS = \"POD_FILTER_BUILDS\";\n+    private static final String BUILD_FILTER_BUILDS = \"BUILD_METHOD_FILTER_BUILDS\";\n+    private static final String BC_FILTER_BUILDS = \"BC_FILTER_BUILDS\";\n+    private static final String IS_FILTER_BUILDS = \"IS_FILTER_BUILDS\";\n+    private static final String EVENT_FILTER_BUILDS = \"EVENT_FILTER_BUILDS\";\n+\n+    /**\n+     * Initialize filters by collecting information OCP resources which are relevant for the current test execution\n+     * context (e.g.: called by a {@link org.junit.jupiter.api.extension.BeforeAllCallback#beforeAll(ExtensionContext)}\n+     * implementation\n+     *\n+     * @param context The test execution context\n+     */\n+    public void initFilters(ExtensionContext context) {\n+        ExtensionContext.Store classStore = getClassStore(context);\n+        OpenShift master = OpenShifts.master();\n+        OpenShift bm = BuildManagers.get().openShift();\n+\n+        initClassFilter(context, POD_FILTER_MASTER, master, Pod.class);\n+        initClassFilter(context, DC_FILTER_MASTER, master, DeploymentConfig.class);\n+        initClassFilter(context, BUILD_FILTER_MASTER, master, Build.class);\n+        initClassFilter(context, BC_FILTER_MASTER, master, BuildConfig.class);\n+        initClassFilter(context, IS_FILTER_MASTER, master, ImageStream.class);\n+        initClassFilter(context, SS_FILTER_MASTER, master, StatefulSet.class);\n+        initClassFilter(context, ROUTE_FILTER_MASTER, master, Route.class);\n+        initClassFilter(context, CONFIGMAP_FILTER_MASTER, master, ConfigMap.class);\n+        initClassFilter(context, SERVICE_FILTER_MASTER, master, Service.class);\n+        classStore.put(EVENT_FILTER_MASTER,\n+                new EventsFilterBuilder().setExcludedUntil(ResourcesTimestampHelper.timeOfLastEvent(master)));\n+\n+        // builds namespace (if not same)\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            initClassFilter(context, POD_FILTER_BUILDS, bm, Pod.class);\n+            initClassFilter(context, BUILD_FILTER_BUILDS, bm, Build.class);\n+            initClassFilter(context, BC_FILTER_BUILDS, bm, BuildConfig.class);\n+            initClassFilter(context, IS_FILTER_BUILDS, bm, ImageStream.class);\n+            classStore.put(EVENT_FILTER_BUILDS,\n+                    new EventsFilterBuilder().setExcludedUntil(ResourcesTimestampHelper.timeOfLastEvent(bm)));\n+        }\n+\n+        setFiltersInitializationStatus(context, false);\n+    }\n+\n+    /**\n+     * Update filters by adding information OCP resources which are relevant for the current test execution\n+     * context (e.g.: called by a {@link org.junit.jupiter.api.extension.BeforeEachCallback#beforeEach(ExtensionContext)}\n+     * implementation\n+     *\n+     * @param context The test execution context\n+     */\n+    public void updateFilters(ExtensionContext context) {\n+        ExtensionContext.Store classStore = getClassStore(context);\n+        OpenShift master = OpenShifts.master();\n+        OpenShift bm = BuildManagers.get().openShift();\n+        if (!isFilterInitializationComplete(context)) {\n+            // set filter in a way everything created between filters initialization and now will be captured - alwaysIncludedWindow\n+            // excluded until is set below\n+\n+            //master\n+            updateClassFilter(context, POD_FILTER_MASTER, master, Pod.class);\n+            updateClassFilter(context, DC_FILTER_MASTER, master, DeploymentConfig.class);\n+            updateClassFilter(context, BUILD_FILTER_MASTER, master, Build.class);\n+            updateClassFilter(context, BC_FILTER_MASTER, master, BuildConfig.class);\n+            updateClassFilter(context, IS_FILTER_MASTER, master, ImageStream.class);\n+            updateClassFilter(context, SS_FILTER_MASTER, master, StatefulSet.class);\n+            updateClassFilter(context, ROUTE_FILTER_MASTER, master, Route.class);\n+            updateClassFilter(context, CONFIGMAP_FILTER_MASTER, master, ConfigMap.class);\n+            updateClassFilter(context, SERVICE_FILTER_MASTER, master, Service.class);\n+            updateClassFilter(context, EVENT_FILTER_MASTER, master, Event.class);\n+\n+            // builds namespace (if not same)\n+            if (!isMasterAndBuildNamespaceSame()) {\n+                updateClassFilter(context, POD_FILTER_BUILDS, bm, Pod.class);\n+                updateClassFilter(context, BUILD_FILTER_BUILDS, bm, Build.class);\n+                updateClassFilter(context, BC_FILTER_BUILDS, bm, BuildConfig.class);\n+                updateClassFilter(context, IS_FILTER_BUILDS, bm, ImageStream.class);\n+                updateClassFilter(context, EVENT_FILTER_BUILDS, bm, Event.class);\n+            }\n+\n+            setFiltersInitializationStatus(context, true);\n+        }\n+\n+        // RESOURCE_FILTERs are set and now we are setting filter for specific tests\n+        // need to clone (shallow) it, since tests may run in a parallel way\n+\n+        // master\n+        initMethodFilter(context, POD_FILTER_MASTER, master, Pod.class);\n+        initMethodFilter(context, DC_FILTER_MASTER, master, DeploymentConfig.class);\n+        initMethodFilter(context, BUILD_FILTER_MASTER, master, Build.class);\n+        initMethodFilter(context, BC_FILTER_MASTER, master, BuildConfig.class);\n+        initMethodFilter(context, IS_FILTER_MASTER, master, ImageStream.class);\n+        initMethodFilter(context, SS_FILTER_MASTER, master, StatefulSet.class);\n+        initMethodFilter(context, ROUTE_FILTER_MASTER, master, Route.class);\n+        initMethodFilter(context, CONFIGMAP_FILTER_MASTER, master, Route.class);\n+        initMethodFilter(context, SERVICE_FILTER_MASTER, master, Service.class);\n+        initMethodFilter(context, EVENT_FILTER_MASTER, master, Event.class);\n+\n+        // builds namespace (if not same)\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            initMethodFilter(context, POD_FILTER_BUILDS, bm, Pod.class);\n+            initMethodFilter(context, BUILD_FILTER_BUILDS, bm, Build.class);\n+            initMethodFilter(context, BC_FILTER_BUILDS, bm, BuildConfig.class);\n+            initMethodFilter(context, IS_FILTER_BUILDS, bm, ImageStream.class);\n+            initMethodFilter(context, EVENT_FILTER_BUILDS, bm, Event.class);\n+        }\n+    }\n+\n+    /**\n+     * Retrieves resources identified by filters\n+     */\n+    public void recordState(ExtensionContext context) throws IOException {\n+        savePods(context, getFilter(context, POD_FILTER_MASTER),\n+                !isMasterAndBuildNamespaceSame() ? getFilter(context, POD_FILTER_BUILDS) : null);\n+        saveDCs(context, getFilter(context, DC_FILTER_MASTER));\n+        saveBuilds(context, getFilter(context, BUILD_FILTER_MASTER),\n+                !isMasterAndBuildNamespaceSame() ? getFilter(context, BUILD_FILTER_BUILDS) : null);\n+        saveBCs(context, getFilter(context, BC_FILTER_MASTER),\n+                !isMasterAndBuildNamespaceSame() ? getFilter(context, BC_FILTER_BUILDS) : null);\n+        saveISs(context, getFilter(context, IS_FILTER_MASTER),\n+                !isMasterAndBuildNamespaceSame() ? getFilter(context, IS_FILTER_BUILDS) : null);\n+        saveStatefulSets(context, getFilter(context, SS_FILTER_MASTER));\n+        saveRoutes(context, getFilter(context, ROUTE_FILTER_MASTER));\n+        saveConfigMaps(context, getFilter(context, CONFIGMAP_FILTER_MASTER));\n+        saveServices(context, getFilter(context, SERVICE_FILTER_MASTER));\n+        saveSecrets(context);\n+        savePodLogs(context, getFilter(context, POD_FILTER_MASTER),\n+                !isMasterAndBuildNamespaceSame() ? getFilter(context, POD_FILTER_BUILDS) : null);\n+        saveBuildLogs(context, getFilter(context, BUILD_FILTER_MASTER),\n+                !isMasterAndBuildNamespaceSame() ? getFilter(context, BUILD_FILTER_MASTER) : null);\n+        saveEvents(context, getFilter(context, EVENT_FILTER_MASTER),\n+                !isMasterAndBuildNamespaceSame() ? getFilter(context, EVENT_FILTER_BUILDS) : null);\n+    }\n+\n+    private boolean isFilterInitializationComplete(ExtensionContext context) {\n+        ExtensionContext.Store classStore = getClassStore(context);\n+        return classStore.get(FILTER_INITIALIZATION_DONE, AtomicBoolean.class).get();\n+    }\n+\n+    private void setFiltersInitializationStatus(ExtensionContext context, boolean done) {\n+        ExtensionContext.Store classStore = getClassStore(context);\n+        classStore.put(FILTER_INITIALIZATION_DONE, new AtomicBoolean(done));\n+    }\n+\n+    private void initClassFilter(ExtensionContext context, String key, OpenShift openShift,\n+            Class<? extends HasMetadata> resourceClass) {\n+        ExtensionContext.Store classStore = getClassStore(context);\n+        classStore.put(key, new ResourcesFilterBuilder()\n+                .setExcludedUntil(ResourcesTimestampHelper.timeOfLastResourceOf(openShift, resourceClass)));\n+    }\n+\n+    private void updateClassFilter(ExtensionContext context, String key, OpenShift openShift,\n+            Class<? extends HasMetadata> resourceClass) {\n+        ExtensionContext.Store classStore = getClassStore(context);\n+        classStore.get(key, ResourcesFilterBuilder.class)\n+                .setIncludedAlwaysWindow(\n+                        classStore.get(key, ResourcesFilterBuilder.class).getExcludedUntil(),\n+                        ResourcesTimestampHelper.timeOfLastResourceOf(openShift, resourceClass))\n+                .setExcludedUntil(null);\n+    }\n+\n+    private void initMethodFilter(ExtensionContext context, String key, OpenShift openShift,\n+            Class<? extends HasMetadata> resourceClass) {\n+        ExtensionContext.Store classStore = getClassStore(context);\n+        ExtensionContext.Store methodStore = getMethodStore(context);\n+        try {\n+            methodStore.put(key, classStore.get(key, ResourcesFilterBuilder.class)\n+                    .clone()\n+                    .setExcludedUntil(ResourcesTimestampHelper.timeOfLastResourceOf(openShift, resourceClass)));\n+        } catch (CloneNotSupportedException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private ExtensionContext.Store getClassStore(ExtensionContext extensionContext) {\n+        return extensionContext.getStore(ExtensionContext.Namespace.create(extensionContext.getRequiredTestClass()));\n+    }\n+\n+    private ExtensionContext.Store getMethodStore(ExtensionContext extensionContext) {\n+        return extensionContext\n+                .getStore(ExtensionContext.Namespace.create(extensionContext.getRequiredTestClass(),\n+                        extensionContext.getTestClass()));\n+    }\n+\n+    private <E extends HasMetadata> ResourcesFilterBuilder<E> getFilter(ExtensionContext context, String key) {\n+        OpenShiftRecorder classOpenShiftRecorder = AnnotationSupport\n+                .findAnnotation(context.getRequiredTestClass(), OpenShiftRecorder.class).orElse(null);\n+        OpenShiftRecorder methodOpenShiftRecorder = AnnotationSupport\n+                .findAnnotation(context.getElement(), OpenShiftRecorder.class).orElse(null);\n+        OpenShiftRecorder openShiftRecorder = methodOpenShiftRecorder != null\n+                ? methodOpenShiftRecorder\n+                : classOpenShiftRecorder;\n+\n+        // annotation (openShiftRecorder is not null) or global include in META-INF.services - null\n+        String[] resourceNames = openShiftRecorder != null ? openShiftRecorder.resourceNames() : null;\n+\n+        ResourcesFilterBuilder<E> filter = context.getTestMethod().isPresent()\n+                ? (ResourcesFilterBuilder<E>) getMethodStore(context).get(key, ResourcesFilterBuilder.class)\n+                : (ResourcesFilterBuilder<E>) getClassStore(context).get(key, ResourcesFilterBuilder.class);\n+\n+        // OpenShiftRecorder (OpenShiftRecorderHandler) may be used in following ways\n+        // (1) A test is annotated by @OpenShiftRecorder - OpenShiftRecorder#resourcesNames is set to default value -\n+        //     an array of one empty string.\n+        // (2) A test is annotated by @OpenShiftRecorder(string [string]*) -\n+        //     OpenShiftRecorder#resourcesNames is an array of strings. null value is not allowed in an annotation.\n+        // (3) OpenShiftRecorderHandler is defined via SPI in resources/META-INF/services\n+        //     the annotation is not found for the test class and resourceNames is null\n+        if (resourceNames != null // exclude (3)\n+                && !(resourceNames.length == 1 && resourceNames[0].equals(\"\")) // exclude (1)\n+        ) {\n+            // option (2) list of resource names is present - filter by names\n+            filter.filterByResourceNames();\n+            filter.setResourceNames(resourceNames);\n+        } else {\n+            filter.filterByLastSeenResources();\n+        }\n+        return filter;\n+    }\n+\n+    protected void saveStatefulSets(ExtensionContext context, ResourcesFilterBuilder<StatefulSet> masterFilter)\n+            throws IOException {\n+        final Path StatefulSetsLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"statefulSets.log\");\n+\n+        try (final ResourcesPrinterHelper<StatefulSet> printer = ResourcesPrinterHelper.forStatefulSet(StatefulSetsLogPath)) {\n+            OpenShifts.master().getStatefulSets().stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+    }\n+\n+    protected void saveISs(ExtensionContext context, ResourcesFilterBuilder<ImageStream> masterFilter,\n+            ResourcesFilterBuilder<ImageStream> buildsFilter) throws IOException {\n+        // master namespace\n+        final Path imageStreamsMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                \"imageStreams-\" + OpenShifts.master().getNamespace() + \".log\");\n+        try (final ResourcesPrinterHelper<ImageStream> printer = ResourcesPrinterHelper.forISs(imageStreamsMasterLogPath)) {\n+            OpenShifts.master().getImageStreams().stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+        // builds namespace (if not same)\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            final Path imageStreamsBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                    \"imageStreams-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n+            try (final ResourcesPrinterHelper<ImageStream> printer = ResourcesPrinterHelper.forISs(imageStreamsBMLogPath)) {\n+                BuildManagers.get().openShift().getImageStreams().stream()\n+                        .filter(buildsFilter.build())\n+                        .forEach(printer::row);\n+            }\n+        }\n+    }\n+\n+    protected void saveBCs(ExtensionContext context, ResourcesFilterBuilder<BuildConfig> masterFilter,\n+            ResourcesFilterBuilder<BuildConfig> buildsFilter) throws IOException {\n+        final Path bcMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                \"buildConfigs-\" + OpenShifts.master().getNamespace() + \".log\");\n+        try (final ResourcesPrinterHelper<BuildConfig> printer = ResourcesPrinterHelper.forBCs(bcMasterLogPath)) {\n+            OpenShifts.master().getBuildConfigs().stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+        // builds namespace (if not same)\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            final Path bcBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                    \"buildConfigs-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n+            try (final ResourcesPrinterHelper<BuildConfig> printer = ResourcesPrinterHelper.forBCs(bcBMLogPath)) {\n+                BuildManagers.get().openShift().getBuildConfigs().stream()\n+                        .filter(buildsFilter.build())\n+                        .forEach(printer::row);\n+            }\n+        }\n+    }\n+\n+    protected void saveBuilds(ExtensionContext context, ResourcesFilterBuilder<Build> masterFilter,\n+            ResourcesFilterBuilder<Build> buildsFilter) throws IOException {\n+        // master namespace\n+        final Path buildsMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                \"builds-\" + OpenShifts.master().getNamespace() + \".log\");\n+        try (final ResourcesPrinterHelper<Build> printer = ResourcesPrinterHelper.forBuilds(buildsMasterLogPath)) {\n+            OpenShifts.master().getBuilds().stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+        // builds namespace (if not same)\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            final Path buildsBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                    \"builds-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n+            try (final ResourcesPrinterHelper<Build> printer = ResourcesPrinterHelper.forBuilds(buildsBMLogPath)) {\n+                BuildManagers.get().openShift().getBuilds().stream()\n+                        .filter(buildsFilter.build())\n+                        .forEach(printer::row);\n+            }\n+        }\n+    }\n+\n+    protected void saveSecrets(ExtensionContext context) throws IOException {\n+        final Path secretsLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"secrets.log\");\n+        try (final ResourcesPrinterHelper<Secret> printer = ResourcesPrinterHelper.forSecrets(secretsLogPath)) {\n+            OpenShifts.master().getSecrets()\n+                    .forEach(printer::row);\n+        }\n+    }\n+\n+    protected void saveServices(ExtensionContext context, ResourcesFilterBuilder<Service> masterFilter) throws IOException {\n+        final Path servicesLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"services.log\");\n+        try (final ResourcesPrinterHelper<Service> printer = ResourcesPrinterHelper.forServices(servicesLogPath)) {\n+            OpenShifts.master().getServices().stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+    }\n+\n+    protected void saveRoutes(ExtensionContext context, ResourcesFilterBuilder<Route> masterFilter) throws IOException {\n+        final Path routesLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"routes.log\");\n+        try (final ResourcesPrinterHelper<Route> printer = ResourcesPrinterHelper.forRoutes(routesLogPath)) {\n+            OpenShifts.master().getRoutes().stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+    }\n+\n+    protected void saveConfigMaps(ExtensionContext context, ResourcesFilterBuilder<ConfigMap> masterFilter) throws IOException {\n+        final Path configMapsLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"configMaps.log\");\n+        try (final ResourcesPrinterHelper<ConfigMap> printer = ResourcesPrinterHelper.forConfigMaps(configMapsLogPath)) {\n+            OpenShifts.master().getConfigMaps().stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+    }\n+\n+    protected void savePods(ExtensionContext context, ResourcesFilterBuilder<Pod> masterFilter,\n+            ResourcesFilterBuilder<Pod> buildsFilter) throws IOException {\n+        // master namespace\n+        final Path podsMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                \"pods-\" + OpenShifts.master().getNamespace() + \".log\");\n+        try (final ResourcesPrinterHelper<Pod> printer = ResourcesPrinterHelper.forPods(podsMasterLogPath)) {\n+            OpenShifts.master().getPods()\n+                    .stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+        // builds namespace (if not same)\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            final Path podsBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                    \"pods-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n+            try (final ResourcesPrinterHelper<Pod> printer = ResourcesPrinterHelper.forPods(podsBMLogPath)) {\n+                BuildManagers.get().openShift().getPods()\n+                        .stream()\n+                        .filter(buildsFilter.build())\n+                        .forEach(printer::row);\n+            }\n+        }\n+    }\n+\n+    protected void saveDCs(ExtensionContext context, ResourcesFilterBuilder<DeploymentConfig> masterFilter) throws IOException {\n+        final Path dcsLogPath = Paths.get(attachmentsDir(), dirNameForTest(context), \"deploymentConfigs.log\");\n+        try (final ResourcesPrinterHelper<DeploymentConfig> printer = ResourcesPrinterHelper.forDCs(dcsLogPath)) {\n+            OpenShifts.master().getDeploymentConfigs().stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+\n+        }\n+    }\n+\n+    protected void savePodLogs(ExtensionContext context, ResourcesFilterBuilder<Pod> masterFilter,\n+            ResourcesFilterBuilder<Pod> buildsFilter) {\n+        BiConsumer<OpenShift, ResourcesFilterBuilder<Pod>> podPrinter = (openShift, filter) -> openShift.getPods()\n+                .stream()\n+                .filter(filter.build())\n+                .filter(\n+                        // filter un-initialized pods out: those pods do not provide any log\n+                        pod -> pod.getStatus().getInitContainerStatuses().stream().filter(\n+                                containerStatus -> !(containerStatus.getState().getTerminated() != null\n+                                        &&\n+                                        \"Completed\".equalsIgnoreCase(\n+                                                containerStatus.getState().getTerminated().getReason())))\n+                                .count() == 0)\n+                .forEach(pod -> {\n+                    try {\n+                        openShift.storePodLog(\n+                                pod,\n+                                Paths.get(attachmentsDir(), dirNameForTest(context)),\n+                                pod.getMetadata().getName() + \".log\");\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                });\n+\n+        podPrinter.accept(OpenShifts.master(), masterFilter);\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            podPrinter.accept(BuildManagers.get().openShift(), buildsFilter);\n+        }\n+    }\n+\n+    protected void saveEvents(ExtensionContext context, ResourcesFilterBuilder<Event> masterFilter,\n+            ResourcesFilterBuilder<Event> buildsFilter) throws IOException {\n+        // master namespace\n+        final Path eventsMasterLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                \"events-\" + OpenShifts.master().getNamespace() + \".log\");\n+        try (final ResourcesPrinterHelper<Event> printer = ResourcesPrinterHelper.forEvents(eventsMasterLogPath)) {\n+            OpenShifts.master().getEvents()\n+                    .stream()\n+                    .filter(masterFilter.build())\n+                    .forEach(printer::row);\n+        }\n+        // builds namespace (if not same)\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            final Path eventsBMLogPath = Paths.get(attachmentsDir(), dirNameForTest(context),\n+                    \"events-\" + BuildManagers.get().openShift().getNamespace() + \".log\");\n+            try (final ResourcesPrinterHelper<Event> printer = ResourcesPrinterHelper.forEvents(eventsBMLogPath)) {\n+                BuildManagers.get().openShift().getEvents()\n+                        .stream()\n+                        .filter(buildsFilter.build())\n+                        .forEach(printer::row);\n+            }\n+        }\n+    }\n+\n+    protected void saveBuildLogs(ExtensionContext context, ResourcesFilterBuilder<Build> masterFilter,\n+            ResourcesFilterBuilder<Build> buildsFilter) {\n+        BiConsumer<OpenShift, ResourcesFilterBuilder<Build>> buildPrinter = (openShift, filter) -> openShift.getBuilds()\n+                .stream()\n+                .filter(filter.build())\n+                .forEach(build -> {\n+                    try {\n+                        openShift.storeBuildLog(\n+                                build,\n+                                Paths.get(attachmentsDir(), dirNameForTest(context)),\n+                                build.getMetadata().getName() + \".log\");\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                });\n+\n+        buildPrinter.accept(OpenShifts.master(), masterFilter);\n+        if (!isMasterAndBuildNamespaceSame()) {\n+            buildPrinter.accept(BuildManagers.get().openShift(), buildsFilter);\n+        }\n+    }\n+\n+    private String attachmentsDir() {\n+        return JUnitConfig.recordDir() != null ? JUnitConfig.recordDir() : System.getProperty(\"user.dir\");\n+    }\n+\n+    private boolean isMasterAndBuildNamespaceSame() {\n+        return OpenShifts.master().getNamespace().equals(BuildManagers.get().openShift().getNamespace());\n+    }\n+\n+    private String dirNameForTest(ExtensionContext context) {\n+        // if is test\n+        if (context.getTestMethod().isPresent()) {\n+            return context.getTestClass().get().getName() + \".\" + context.getDisplayName();\n+        } else {\n+            return context.getTestClass().get().getName();\n+        }\n+    }\n+}"
  }
]
