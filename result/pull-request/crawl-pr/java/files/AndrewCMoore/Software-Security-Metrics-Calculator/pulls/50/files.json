[
  {
    "sha": "91f315d20621e713ef32e0ba40b074dc373da1d4",
    "filename": "bin/.gitignore",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/.gitignore",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/.gitignore",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/bin/.gitignore?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e",
    "patch": "@@ -1,2 +1,7 @@\n+/ssmc/\n /Calculator/\n+<<<<<<< HEAD\n+/Report_Generation/\n+=======\n /ssmc/\n+>>>>>>> refs/remotes/origin/master"
  },
  {
    "sha": "f8f8ba070407cfb3150f47c2657930e3487f5063",
    "filename": "bin/Calculator/TertiaryMetrics.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/Calculator/TertiaryMetrics.class",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/Calculator/TertiaryMetrics.class",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/bin/Calculator/TertiaryMetrics.class?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e"
  },
  {
    "sha": "da819be21669da8aada40e87e72f43f0c458beaf",
    "filename": "bin/Report_Generation/GenerateHTML.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/Report_Generation/GenerateHTML.class",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/Report_Generation/GenerateHTML.class",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/bin/Report_Generation/GenerateHTML.class?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e"
  },
  {
    "sha": "be5de6809f561b43e344a401b65943d9cab37236",
    "filename": "bin/ssmc/Method.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/ssmc/Method.class",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/ssmc/Method.class",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/bin/ssmc/Method.class?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e"
  },
  {
    "sha": "d832ca07f6a669591c45660bbef3e12f4fe4b36e",
    "filename": "bin/ssmc/Software-Security-Metrics-Calculator2.uml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/ssmc/Software-Security-Metrics-Calculator2.uml",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/ssmc/Software-Security-Metrics-Calculator2.uml",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/bin/ssmc/Software-Security-Metrics-Calculator2.uml?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e",
    "patch": "@@ -1,2 +1,2 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<uml:Model xmi:version=\"20131001\" xmlns:xmi=\"http://www.omg.org/spec/XMI/20131001\" xmlns:uml=\"http://www.eclipse.org/uml2/5.0.0/UML\" xmi:id=\"_-gaHYFOQEeu3x7Xw8iZaow\" name=\"Software_Security_Metrics_Calculator2\"/>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<uml:Model xmi:version=\"20131001\" xmlns:xmi=\"http://www.omg.org/spec/XMI/20131001\" xmlns:uml=\"http://www.eclipse.org/uml2/5.0.0/UML\" xmi:id=\"_-gaHYFOQEeu3x7Xw8iZaow\" name=\"Software_Security_Metrics_Calculator2\"/>"
  },
  {
    "sha": "234e5bfe50d71aa926d62c89ec174bba15df474a",
    "filename": "bin/ssmc/handlers/ButtonHandler.class",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/ssmc/handlers/ButtonHandler.class",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/bin/ssmc/handlers/ButtonHandler.class",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/bin/ssmc/handlers/ButtonHandler.class?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e"
  },
  {
    "sha": "c2957ee93a4091b11a1e7e3b9ac4e146be32f4d9",
    "filename": "src/Calculator/TertiaryMetrics.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/src/Calculator/TertiaryMetrics.java",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/src/Calculator/TertiaryMetrics.java",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/src/Calculator/TertiaryMetrics.java?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e",
    "patch": "@@ -222,6 +222,7 @@ private void criticalClassesTotal(PulledValues pv, MurgePulledValues mpv) {\n \t\n \t//CCE project ratio thus Double.\n \tprivate void criticalClassesExtensibility(PulledValues pv, MurgePulledValues mpv) {\n+\t\tSystem.out.println(\"it is divividing it by\"+ mpv.getNumberOfCriticalClassesInProgram());\n \t\tcriticalClassesExtensibility=(double) (mpv.getNonFinalizedCriticalClasses().size() / mpv.getNumberOfCriticalClassesInProgram());\n \t}\n \t"
  },
  {
    "sha": "ca46e335dc0236ba3c6087aa04a128da04411209",
    "filename": "src/Report_Generation/GenerateHTML.java",
    "status": "added",
    "additions": 910,
    "deletions": 0,
    "changes": 910,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/src/Report_Generation/GenerateHTML.java",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/src/Report_Generation/GenerateHTML.java",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/src/Report_Generation/GenerateHTML.java?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e",
    "patch": "@@ -0,0 +1,910 @@\n+package Report_Generation;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileWriter;\r\n+import java.io.IOException;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import Calculator.Calculator;\r\n+\r\n+public class GenerateHTML {\r\n+\r\n+\tprivate final String FILENAME = \"../../index\";\r\n+\tprivate final String type = \".html\";\r\n+\tprivate File htmlFile;\r\n+\tprivate String fileName;\r\n+\tprivate Calculator calc;\r\n+\tprivate String flex;\r\n+\tString read;\r\n+\tString reuse;\r\n+\tString effect;\r\n+\tString extend;\r\n+\tString function;\r\n+\tString overall;\r\n+\t\r\n+\t// MAIN METHOD\r\n+\t\r\n+\tpublic GenerateHTML(Calculator c) {\r\n+\t\t// TODO access list of metrics\r\n+\t\t\r\n+\t\tSystem.out.println(\"============================================\");\r\n+\t\tSystem.out.println(\"============================================\");\r\n+\t\tthis.calc = c;\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\t flex = String.valueOf(generateAverage(classNames, calc.getQualityAttributes().getFlexibility()));\r\n+\t\t read = String.valueOf(generateAverage(classNames, calc.getQualityAttributes().getUnderstandability()));\r\n+\t\t reuse = String.valueOf(generateAverage(classNames, calc.getQualityAttributes().getReusability()));\r\n+\t\t effect = String.valueOf(generateAverage(classNames, calc.getQualityAttributes().getEffectiveness()));\r\n+\t\t extend = String.valueOf(generateAverage(classNames, calc.getQualityAttributes().getExtendability()));\r\n+\t\t function = String.valueOf(generateAverage(classNames, calc.getQualityAttributes().getFunctionality()));\r\n+\t\t overall = String.valueOf((generateAverage(classNames, calc.getQualityAttributes().getFlexibility())\r\n+\t\t\t\t+ generateAverage(classNames, calc.getQualityAttributes().getUnderstandability())\r\n+\t\t\t\t+ generateAverage(classNames, calc.getQualityAttributes().getReusability())\r\n+\t\t\t\t+ generateAverage(classNames, calc.getQualityAttributes().getEffectiveness())\r\n+\t\t\t\t+ generateAverage(classNames, calc.getQualityAttributes().getExtendability())\r\n+\t\t\t\t+ generateAverage(classNames, calc.getQualityAttributes().getFunctionality())) / 6);\r\n+\t\ttry {\r\n+\r\n+\t\t\thtmlFile = new File(FILENAME + type);\r\n+\t\t\tif (htmlFile.createNewFile()) {\r\n+\t\t\t\tfileName = FILENAME + type;\r\n+\t\t\t} else {\r\n+\t\t\t\tint extra = 1;\r\n+\t\t\t\thtmlFile = new File(FILENAME + extra + type);\r\n+\t\t\t\twhile (!htmlFile.createNewFile()) {\r\n+\t\t\t\t\textra++;\r\n+\t\t\t\t\thtmlFile = new File(FILENAME + extra + type);\r\n+\t\t\t\t}\r\n+\t\t\t\tfileName = FILENAME + extra + type;\r\n+\t\t\t}\r\n+\t\t\tFileWriter writer = new FileWriter(fileName);\r\n+\t\t\twriter.append(makeHead());\r\n+\t\t\twriter.append(makeNavBar());\r\n+\t\t\twriter.append(makeSplashPage());\r\n+\t\t\twriter.append(makeTableSection());\r\n+\t\t\twriter.append(makeDesignQualitiesBreakdown());\r\n+\t\t\twriter.append(makeJavaScriptSection());\r\n+\t\t\twriter.close();\r\n+\t\t} catch (IOException e) {\r\n+\t\t\te.printStackTrace();\r\n+\t\t}\r\n+\r\n+\t}\r\n+\r\n+\t//QUALITY ATTRIBUTES\r\n+\t\r\n+\tpublic String generateOverAllScore() {\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] overallTable = new String[7][6];\r\n+\t\tString section = makeCircle(\"Overall Score\", overall, \"c100 bigger orange overall besidesOverall p\"+overall, \"overall1\");\r\n+\t\toverallTable[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\toverallTable[1] = generateRow(classNames, calc.getQualityAttributes().getEffectiveness(), \"Effectiveness\");\r\n+\t\toverallTable[2] = generateRow(classNames, calc.getQualityAttributes().getFlexibility(), \"Flexability\");\r\n+\t\toverallTable[3] = generateRow(classNames, calc.getQualityAttributes().getFunctionality(), \"Functionality\");\r\n+\t\toverallTable[4] = generateRow(classNames, calc.getQualityAttributes().getExtendability(), \"Extendability\");\r\n+\t\toverallTable[6] = generateRow(classNames, calc.getQualityAttributes().getReusability(), \"Reusability\");\r\n+\t\toverallTable[6] = generateRow(classNames, calc.getQualityAttributes().getUnderstandability(), \"Readability\");\r\n+\t\tsection += makeTable(overallTable);\r\n+\t\tsection += \"</div>\\r\\n\" + \"</div>\\r\\n\" + \"</div>\";\r\n+\t\treturn section;\r\n+\t}\r\n+\r\n+\tpublic String generateEffectiveness() {\r\n+\t\tString section = makeCircle(\"Effectiveness\", effect, \"c100 big maroon effectiveness besides p\"+effect, \"effectiveness1\");\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] effectiveness = new String[6][6];\r\n+\t\teffectiveness[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\teffectiveness[1] = generateRow(classNames, calc.getDesignPrincipals().getAbstraction(), \"Abstraction\");\r\n+\t\teffectiveness[2] = generateRow(classNames, calc.getDesignPrincipals().getEncapsulation(), \"Encapsulation\");\r\n+\t\teffectiveness[3] = generateRow(classNames, calc.getDesignPrincipals().getComposition(), \"Composition\");\r\n+\t\teffectiveness[4] = generateRow(classNames, calc.getDesignPrincipals().getInheritance(), \"Inheritance\");\r\n+\t\teffectiveness[5] = generateRow(classNames, calc.getDesignPrincipals().getPolymorphism(), \"Polymorphism\");\r\n+\t\tsection += makeTable(effectiveness);\r\n+\t\treturn section;\r\n+\t}\r\n+\r\n+\tpublic String generateReusability() {\r\n+\t\tString section = makeCircle(\"Reusability\", reuse, \"c100 big green reusability besides p\"+reuse, \"reusability1\");\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] reusability = new String[5][6];\r\n+\t\treusability[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\treusability[1] = generateRow(classNames, calc.getDesignPrincipals().getCoupling(), \"Coupling\");\r\n+\t\treusability[2] = generateRow(classNames, calc.getDesignPrincipals().getCohesion(), \"Cohesion\");\r\n+\t\treusability[3] = generateRow(classNames, calc.getDesignPrincipals().getMessaging(), \"Messaging\");\r\n+\t\treusability[4] = generateRow(classNames, calc.getDesignPrincipals().getDesignSize(), \"Design Size\");\r\n+\t\tsection += makeTable(reusability);\r\n+\t\treturn section;\r\n+\t}\r\n+\r\n+\tpublic String generateUnderstandability() {\r\n+\t\tString section = makeCircle(\"Readability\", read, \"c100 big pink readability besides p\"+read, \"readability1\");\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] reusability = new String[8][6];\r\n+\t\treusability[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\treusability[1] = generateRow(classNames, calc.getDesignPrincipals().getAbstraction(), \"Abstraction\");\r\n+\t\treusability[2] = generateRow(classNames, calc.getDesignPrincipals().getEncapsulation(), \"Encapsulation\");\r\n+\t\treusability[3] = generateRow(classNames, calc.getDesignPrincipals().getCoupling(), \"Coupling\");\r\n+\t\treusability[4] = generateRow(classNames, calc.getDesignPrincipals().getCohesion(), \"Cohesion\");\r\n+\t\treusability[5] = generateRow(classNames, calc.getDesignPrincipals().getPolymorphism(), \"Polymorphism\");\r\n+\t\treusability[6] = generateRow(classNames, calc.getDesignPrincipals().getComplexity(), \"Complexity\");\r\n+\t\treusability[8] = generateRow(classNames, calc.getDesignPrincipals().getDesignSize(), \"Design Size\");\r\n+\t\tsection += makeTable(reusability);\r\n+\t\treturn section;\r\n+\t}\r\n+\r\n+\tpublic String generateFlexability() {\r\n+\t\tString section = makeCircle(\"Flexability\", flex, \"c100 big flexability besides p\"+flex, \"readability1\");\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] reusability = new String[5][6];\r\n+\t\treusability[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\treusability[1] = generateRow(classNames, calc.getDesignPrincipals().getEncapsulation(), \"Encapsulation\");\r\n+\t\treusability[2] = generateRow(classNames, calc.getDesignPrincipals().getCoupling(), \"Coupling\");\r\n+\t\treusability[3] = generateRow(classNames, calc.getDesignPrincipals().getComposition(), \"Composition\");\r\n+\t\treusability[4] = generateRow(classNames, calc.getDesignPrincipals().getPolymorphism(), \"Polymorphism\");\r\n+\t\tsection += makeTable(reusability);\r\n+\t\treturn section;\r\n+\t}\r\n+\r\n+\tpublic String generateFunctionality() {\r\n+\t\tString section = makeCircle(\"Functionality\", function, \"c100 big skyblue functionality besides p\"+function, \"functionality1\");\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] reusability = new String[6][6];\r\n+\t\treusability[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\treusability[1] = generateRow(classNames, calc.getDesignPrincipals().getCohesion(), \"Cohesion\");\r\n+\t\treusability[2] = generateRow(classNames, calc.getDesignPrincipals().getPolymorphism(), \"Polymorphism\");\r\n+\t\treusability[3] = generateRow(classNames, calc.getDesignPrincipals().getMessaging(), \"Messaging\");\r\n+\t\treusability[4] = generateRow(classNames, calc.getDesignPrincipals().getDesignSize(), \"Design Size\");\r\n+\t\treusability[5] = generateRow(classNames, calc.getDesignPrincipals().getHierarchies(), \"Hierarchies\");\r\n+\t\tsection += makeTable(reusability);\r\n+\t\treturn section;\r\n+\t}\r\n+\r\n+\tpublic String generateExtendability() {\r\n+\t\tString section = makeCircle(\"Extendability\", extend, \"c100 big blue extendability besides p\"+extend, \"extendability1\");\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] reusability = new String[6][6];\r\n+\t\treusability[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\treusability[1] = generateRow(classNames, calc.getDesignPrincipals().getAbstraction(), \"Abstraction\");\r\n+\t\treusability[2] = generateRow(classNames, calc.getDesignPrincipals().getCoupling(), \"Coupling\");\r\n+\t\treusability[3] = generateRow(classNames, calc.getDesignPrincipals().getMessaging(), \"Messaging\");\r\n+\t\treusability[4] = generateRow(classNames, calc.getDesignPrincipals().getDesignSize(), \"Design Size\");\r\n+\t\treusability[5] = generateRow(classNames, calc.getDesignPrincipals().getHierarchies(), \"Hierarchies\");\r\n+\t\tsection += makeTable(reusability);\r\n+\t\treturn section;\r\n+\t}\r\n+\t// HTML SECTIONS\r\n+\t\r\n+\t\r\n+\tpublic String makeHead() {\r\n+\t\tString head = \"<!DOCTYPE html>\\r\\n\" + \"<html>\\r\\n\" + \"<head>\\r\\n\" + \"<meta charset=\\\"utf-8\\\">\\r\\n\"\r\n+\t\t\t\t+ \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\r\\n\"\r\n+\t\t\t\t+ \"<title>Prototype</title>\\r\\n\" + \"<link rel=\\\"stylesheet\\\" href=\\\"circle.css\\\">\\r\\n\"\r\n+\t\t\t\t+ \"<link rel=\\\"stylesheet\\\" href=\\\"style.css\\\">\\r\\n\" + \"</head>\";\r\n+\t\treturn head;\r\n+\t}\r\n+\r\n+\tpublic String makeNavBar() {\r\n+\t\tString navBar = \"<nav class=\\\"navbar\\\">\" + \"<button class=\\\"navButton\\\" onclick=\\\"expand()\\\">Open Menu</button>\"\r\n+\t\t\t\t+ \"<ul id=\\\"navBar\\\" class=\\\"line collapse\\\">\" + \"<li class=\\\"lineItem\\\"><a>Flexability</a></li>\"\r\n+\t\t\t\t+ \"<li class=\\\"lineItem\\\"><a>Readability</a></li>\" + \"<li class=\\\"lineItem\\\"><a>Reusability</a></li>\"\r\n+\t\t\t\t+ \"<li class=\\\"lineItem\\\"><a>Effectiveness</a></li>\"\r\n+\t\t\t\t+ \"<li class=\\\"lineItem\\\"><a>Extendability</a></li>\"\r\n+\t\t\t\t+ \"<li class=\\\"lineItem\\\"><a>Functionality<a /></li>\"\r\n+\t\t\t\t+ \"<li class=\\\"lineItem\\\"><a>Overall Score</a></li>\" + \"</ul>\" + \"</nav>\";\r\n+\t\treturn navBar;\r\n+\t}\r\n+\r\n+\tpublic String makeSplashPage() {\r\n+\r\n+\t\tString splash = \"<div class=\\\"container\\\">\\r\\n\" + \"\t\t\t<div class=\\\"row\\\">\";\r\n+\r\n+\r\n+\r\n+\t\tsplash += makeCircle(\"Flexability\", flex, \"c100 big flexability p\" + flex, \"flexability\");\r\n+\t\tsplash += makeCircle(\"Reusability\", read, \"c100 big pink readability p\" + read, \"readability\");\r\n+\t\tsplash += makeCircle(\"Readability\", reuse, \"c100 big pink readability p\" + reuse, \"reusability\");\r\n+\t\tsplash += makeCircle(\"Effectiveness\", effect, \"c100 big maroon effectiveness p\" + effect, \"effectiveness\");\r\n+\t\tsplash += makeCircle(\"Extendability\", extend, \"c100 big maroon effectiveness p\" + extend, \"extendability\");\r\n+\t\tsplash += makeCircle(\"Functionality\", function, \"c100 big maroon effectiveness p\" + function, \"functionality\");\r\n+\t\tsplash += makeCircle(\"Overall Score\", overall, \"c100 big maroon effectiveness p\" + overall, \"overall\");\r\n+\t\tsplash +=\"</div>\\r\\n\"\r\n+\t\t\t\t+ \"\t\t</div>\";\r\n+\t\treturn splash;\r\n+\t}\r\n+\tpublic String makeTableSection() {\r\n+\t\tString section =\"<div class=\\\"tables\\\">\\r\\n\"\r\n+\t\t\t\t\t\t+\"<h2>Metrics BreakDown</h2>\"\r\n+\t\t\t\t\t\t+ \"<div id=\\\"overallscoreData\\\">\";\r\n+\t\tsection += makeCollapseSection(\"Overall Score\",generateOverAllScore());\r\n+\t\t\tsection += \"</div>\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t<div id=\\\"flexabilityData\\\">\";\r\n+\t\tsection += makeCollapseSection(\"Flexability\" ,generateFlexability());\r\n+\t\t\tsection +=\"</div>\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t<div id=\\\"readabilityData\\\">\";\r\n+\t\tsection += makeCollapseSection(\"Functionality\" ,generateFunctionality());\r\n+\t\t\tsection +=\"</div>\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t<div id=\\\"functionalityData\\\">\";\r\n+\t\tsection += makeCollapseSection(\"Extendability\" ,generateExtendability());\r\n+\t\t\tsection +=\"</div>\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t<div id=\\\"extendabilityData\\\">\";\r\n+\t\tsection += makeCollapseSection(\"Effectiveness\" ,generateEffectiveness());\r\n+\t\t\tsection +=\"</div>\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t\\r\\n\"\r\n+\t\t\t\t\t+ \"\t\t\t<div id=\\\"reusabilityData\\\">\";\r\n+\t\tsection += makeCollapseSection(\"Reusability\" ,generateReusability());\r\n+\t\t\tsection +=\"</div>\";\r\n+\t\treturn section;\r\n+\t}\r\n+\t\r\n+\tpublic String makeDesignQualitiesBreakdown() {\r\n+\t\tString section =\"<div class=\\\"tables\\\">\\r\\n\"\r\n+\t\t\t\t+\"<h2>Metrics BreakDown</h2>\"\r\n+\t\t\t\t+ \"<div id=\\\"apstractionData\\\">\";\r\n+\t\t\t\t\r\n+\t\tsection += \"</div>\\r\\n\";\r\n+\t\treturn section;\r\n+\t}\r\n+\r\n+\tpublic String makeCircle(String name, String number, String cssClass, String id) {\r\n+\t\tString c = \"\";\r\n+\t\tc += \"<div class=\\\"\" + cssClass + \"\\\"id=\\\"\" + id + \"\\\">\";\r\n+\t\tc += \"<span><span>\" + name + \"</span> <br>\";\r\n+\t\tc += \"<span class=\\\"number\\\">\" + number + \"</span></span><div class=\\\"slice\\\">\";\r\n+\t\tc += \"<div class=\\\"bar\\\"></div><div class=\\\"fill\\\"></div></div></div>\";\r\n+\t\treturn c;\r\n+\t}\r\n+\r\n+\tpublic String makeCollapseSection(String name, String content) {\r\n+\t\tString section = \"<button class=\\\"accordion\\\">\" + name + \"</button>\" + \"<div class=\\\"panel\\\">\"\r\n+\t\t\t\t+ \"<div style=\\\"padding: 20px;\\\">\";\r\n+\t\tsection += content;\r\n+\t\tsection += \"\t</div>\\r\\n\" + \"\t</div>\\r\\n\" + \"\t</div>\";\r\n+\r\n+\t\treturn section;\r\n+\t}\r\n+\r\n+\tpublic String makeTable(String[][] table) {\r\n+\t\tString t = \"\";\r\n+\t\tt += \"<table class=\\\"table\\\" cellpadding=\\\"10\\\" cellspacing=\\\"10\\\">\\n\";\r\n+\t\tfor (int i = 0; i < table.length; i++) {\r\n+\t\t\tif (i == 0) {\r\n+\t\t\t\tt += \"<thead>\\n<tr>\\n\";\r\n+\t\t\t} else {\r\n+\t\t\t\tt += \"<tr>\\n<thead>\\n\";\r\n+\t\t\t}\r\n+\t\t\tfor (int j = 0; j < table[i].length; j++) {\r\n+\t\t\t\tif (i == 0 || j == 0) {\r\n+\t\t\t\t\tt += \"<th>\" + table[i][j] + \"</th>\\n\";\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tt += \"<td>\" + table[i][j] + \"</td>\\n\";\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tt += \"<\\tr>\\n\";\r\n+\t\t}\r\n+\t\tt += \"</table>\\n\";\r\n+\t\treturn t;\r\n+\t}\r\n+\r\n+\tpublic String makeJavaScriptSection() {\r\n+\t\tString script = \"<script>\\r\\n\" + \"\t\t\tvar flexEncap = [\\\"10\\\",\\\"10\\\",\\\"10\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar flexCouple = [\\\"20\\\",\\\"20\\\",\\\"20\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar flexCompo = [\\\"60\\\",\\\"60\\\",\\\"60\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar flexPoly = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fe = 0; fe < flexEncap.length; fe++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"flexEncap\\\"+fe).innerHTML = flexEncap[fe];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fcu = 0; fcu < flexCouple.length; fcu++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"flexCouple\\\"+fcu).innerHTML = flexCouple[fcu];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fc = 0; fc < flexCompo.length; fc++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"flexCompo\\\"+fc).innerHTML = flexCompo[fc];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fp = 0; fp < flexPoly.length; fp++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"flexPoly\\\"+fp).innerHTML = flexPoly[fp];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\t\\r\\n\" + \"\t\t\tvar readAbstr = [\\\"10\\\",\\\"10\\\",\\\"10\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar readEncap = [\\\"10\\\",\\\"10\\\",\\\"10\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar readCouple = [\\\"20\\\",\\\"20\\\",\\\"20\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar readCohen = [\\\"60\\\",\\\"60\\\",\\\"60\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar readPoly = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar readComp = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar readDesign = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ra = 0; ra < readAbstr.length; ra++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"readAbstr\\\"+ra).innerHTML = readAbstr[ra];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var re = 0; re < readEncap.length; re++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"readEncap\\\"+re).innerHTML = readEncap[re];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rc = 0; rc < readCouple.length; rc++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"readCouple\\\"+rc).innerHTML = readCouple[rc];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rch = 0; rch < readCohen.length; rch++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"readCohen\\\"+rch).innerHTML = readCohen[rch];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rp = 0; rp < readPoly.length; rp++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"readPoly\\\"+rp).innerHTML = readPoly[rp];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rcmp = 0; rcmp < readComp.length; rcmp++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"readComp\\\"+rcmp).innerHTML = readComp[rcmp];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rd = 0; rd < readDesign.length; rd++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"readDesign\\\"+rd).innerHTML = readDesign[rd];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\\r\\n\" + \"\t\t\tvar funcCohen = [\\\"20\\\",\\\"20\\\",\\\"20\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar funcPoly = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar funcMsg = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar funcDesign = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar funcHier = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\t\t\t\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fc = 0; fc < funcCohen.length; fc++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"funcCohen\\\"+fc).innerHTML = funcCohen[fc];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fp = 0; fp < funcPoly.length; fp++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"funcPoly\\\"+fp).innerHTML = funcPoly[fp];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fm = 0; fm < funcMsg.length; fm++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"funcMsg\\\"+fm).innerHTML = funcMsg[fm];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fd = 0; fd < funcDesign.length; fd++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"funcDesign\\\"+fd).innerHTML = funcDesign[fd];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var fh = 0; fh < funcHier.length; fh++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"funcHier\\\"+fh).innerHTML = funcHier[fh];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\\r\\n\" + \"\t\t\tvar extendCohen = [\\\"20\\\",\\\"20\\\",\\\"20\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar extendPoly = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar extendMsg = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar extendDesign = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar extendHier = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\t\t\t\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ec = 0; ec < extendCohen.length; ec++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"extendCohen\\\"+ec).innerHTML = extendCohen[ec];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ep = 0; ep < extendPoly.length; ep++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"extendPoly\\\"+ep).innerHTML = extendPoly[ep];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var em = 0; em < extendMsg.length; em++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"extendMsg\\\"+em).innerHTML = extendMsg[em];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ed = 0; ed < extendDesign.length; ed++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"extendDesign\\\"+ed).innerHTML = extendDesign[ed];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var eh = 0; eh < extendHier.length; eh++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"extendHier\\\"+eh).innerHTML = extendHier[eh];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\\r\\n\" + \"\t\t\tvar effectAbstr = [\\\"20\\\",\\\"20\\\",\\\"20\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar effectEncap = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar effectCompo = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar effectInherit = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar effectPoly = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\t\t\t\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ea = 0; ea < effectAbstr.length; ea++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"effectAbstr\\\"+ea).innerHTML = effectAbstr[ea];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ee = 0; ee < effectEncap.length; ee++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"effectEncap\\\"+ee).innerHTML = effectEncap[ee];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ec = 0; ec < effectCompo.length; ec++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"effectCompo\\\"+ec).innerHTML = effectCompo[ec];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ei = 0; ei < effectInherit.length; ei++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"effectInherit\\\"+ei).innerHTML = effectInherit[ei];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ep = 0; ep < effectPoly.length; ep++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"effectPoly\\\"+ep).innerHTML = effectPoly[ep];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\\r\\n\" + \"\t\t\tvar reuseCouple = [\\\"20\\\",\\\"20\\\",\\\"20\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar reuseCohen = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar reuseMsg = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar reuseDesign = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rcp = 0; rcp < reuseCouple.length; rcp++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"reuseCouple\\\"+rcp).innerHTML = reuseCouple[rcp];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rc = 0; rc < reuseCohen.length; rc++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"reuseCohen\\\"+rc).innerHTML = reuseCohen[rc];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rm = 0; rm < reuseMsg.length; rm++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"reuseMsg\\\"+rm).innerHTML = reuseMsg[rm];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var rd = 0; rd < reuseDesign.length; rd++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"reuseDesign\\\"+rd).innerHTML = reuseDesign[rd];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\\r\\n\" + \"\t\t\tvar overallFlex = [\\\"20\\\",\\\"20\\\",\\\"20\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar overallRead = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar overallFunc = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar overallExtend = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar overallEffect = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar overallReuse = [\\\"50\\\",\\\"50\\\",\\\"50\\\"];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var ofx = 0; ofx < overallFlex.length; ofx++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"overallFlex\\\"+ofx).innerHTML = overallFlex[ofx];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var or = 0; or < overallRead.length; or++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"overallRead\\\"+or).innerHTML = overallRead[or];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var of = 0; of < overallFunc.length; of++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"overallFunc\\\"+of).innerHTML = overallFunc[of];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var oex = 0; oex < overallExtend.length; oex++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"overallExtend\\\"+oex).innerHTML = overallExtend[oex];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var oe = 0; oe < overallEffect.length; oe++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"overallEffect\\\"+oe).innerHTML = overallEffect[oe];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tfor(var oru = 0; oru < overallReuse.length; oru++)\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tdocument.getElementById(\\\"overallReuse\\\"+oru).innerHTML = overallReuse[oru];\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\t\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar flex = parseInt(document.getElementById(\\\"overallFlex0\\\").innerHTML);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar read = parseInt(document.getElementById(\\\"overallRead0\\\").innerHTML);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar funct = parseInt(document.getElementById(\\\"overallFunc0\\\").innerHTML);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar extend = parseInt(document.getElementById(\\\"overallExtend0\\\").innerHTML);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar effect = parseInt(document.getElementById(\\\"overallEffect0\\\").innerHTML);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar reuse = parseInt(document.getElementById(\\\"overallReuse0\\\").innerHTML);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar overall = (flex+read+funct+extend+effect+reuse)/6;\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"flexability\\\").classList.add(\\\"p\\\"+flex);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"flexability1\\\").classList.add(\\\"p\\\"+flex);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"readability\\\").classList.add(\\\"p\\\"+read);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"readability1\\\").classList.add(\\\"p\\\"+read);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"functionality\\\").classList.add(\\\"p\\\"+funct);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"functionality1\\\").classList.add(\\\"p\\\"+funct);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"extendability\\\").classList.add(\\\"p\\\"+extend);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"extendability1\\\").classList.add(\\\"p\\\"+extend);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"effectiveness\\\").classList.add(\\\"p\\\"+effect);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"effectiveness1\\\").classList.add(\\\"p\\\"+effect);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"reusability\\\").classList.add(\\\"p\\\"+reuse);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"reusability1\\\").classList.add(\\\"p\\\"+reuse);\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"overall\\\").classList.add(\\\"p\\\"+Math.ceil(overall));\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tdocument.getElementById(\\\"overall1\\\").classList.add(\\\"p\\\"+Math.ceil(overall));\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\\r\\n\" + \"\t\t\tvar acc = document.getElementsByClassName(\\\"accordion\\\");\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\tvar i;\\r\\n\" + \"\\r\\n\" + \"\t\t\tfor (i = 0; i < acc.length; i++) {\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t  acc[i].addEventListener(\\\"click\\\", function() {\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tthis.classList.toggle(\\\"active\\\");\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tvar panel = this.nextElementSibling;\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\tif (panel.style.maxHeight) {\\r\\n\" + \"\t\t\t\t  panel.style.maxHeight = null;\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\t} else {\\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t\t  panel.style.maxHeight = panel.scrollHeight + \\\"px\\\";\\r\\n\" + \"\t\t\t\t} \\r\\n\"\r\n+\t\t\t\t+ \"\t\t\t  });\\r\\n\" + \"\t\t\t}\\r\\n\" + \"\t\t</script>\";\r\n+\r\n+\t\treturn script;\r\n+\t}\r\n+\r\n+\tpublic String[] generateRowString(Set<String> classNames, HashMap<String, Double> results, String metric) {\r\n+\t\tString[] row = new String[6];\r\n+\t\trow[0] = metric;\r\n+\t\tdouble average = generateAverage(classNames, results);\r\n+\t\tdouble standardDeviation = generateStanderdDeviation(classNames, results, average);\r\n+\t\tdouble highest = getHigestValue(classNames, results);\r\n+\t\tdouble lowest = getLowestValue(classNames, results);\r\n+\t\tdouble count = getCount(classNames, results);\r\n+\t\trow[1] = Double.toString(average);\r\n+\t\trow[2] = Double.toString(standardDeviation);\r\n+\t\trow[3] = Double.toString(highest);\r\n+\t\trow[4] = Double.toString(lowest);\r\n+\t\trow[5] = Double.toString(count);\r\n+\t\treturn row;\r\n+\t}\r\n+\r\n+\tpublic String[] generateRow(Set<String> classNames, HashMap<String, Double> results, String metric) {\r\n+\t\tString[] row = new String[6];\r\n+\t\trow[0] = metric;\r\n+\t\tdouble average = generateAverage(classNames, results);\r\n+\t\tdouble standardDeviation = generateStanderdDeviation(classNames, results, average);\r\n+\t\tdouble highest = getHigestValue(classNames, results);\r\n+\t\tdouble lowest = getLowestValue(classNames, results);\r\n+\t\tdouble count = getCount(classNames, results);\r\n+\t\trow[1] = Double.toString(average);\r\n+\t\trow[2] = Double.toString(standardDeviation);\r\n+\t\trow[3] = Double.toString(highest);\r\n+\t\trow[4] = Double.toString(lowest);\r\n+\t\trow[5] = Double.toString(count);\r\n+\t\treturn row;\r\n+\t}\r\n+\r\n+\tpublic double getHigestValue(Set<String> classNames, HashMap<String, Double> results) {\r\n+\t\tdouble highest = Integer.MIN_VALUE;\r\n+\t\tfor (String key : classNames) {\r\n+\t\t\tString value = String.valueOf(results.get(key));\r\n+\t\t\tDouble d = Double.parseDouble(value);\r\n+\t\t\tif (d != null) {\r\n+\t\t\t\tif (highest < d) {\r\n+\t\t\t\t\thighest = d;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn highest;\r\n+\t}\r\n+\r\n+\tpublic double getLowestValue(Set<String> classNames, HashMap<String, Double> results) {\r\n+\t\tdouble lowest = Integer.MAX_VALUE;\r\n+\t\tfor (String key : classNames) {\r\n+\t\t\tString value = String.valueOf(results.get(key));\r\n+\t\t\tDouble d = Double.parseDouble(value);\r\n+\t\t\tif (d != null) {\r\n+\t\t\t\tif (lowest > d) {\r\n+\t\t\t\t\tlowest = d;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn lowest;\r\n+\t}\r\n+\r\n+\tpublic int getCount(Set<String> classNames, HashMap<String, Double> results) {\r\n+\t\tint size = 0;\r\n+\t\tfor (String key : classNames) {\r\n+\t\t\tString value = String.valueOf(results.get(key));\r\n+\t\t\tDouble d = Double.parseDouble(value);\r\n+\t\t\tif (d != null) {\r\n+\t\t\t\tsize++;\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn size;\r\n+\t}\r\n+\r\n+\tpublic double generateAverage(Set<String> classNames, HashMap<String, Double> results) {\r\n+\t\tdouble average = 0;\r\n+\t\tint size = 0;\r\n+\t\tfor (String key : classNames) {\r\n+\t\t\tString value = String.valueOf(results.get(key));\r\n+\t\t\tSystem.out.println(\"the value is \"+Double.parseDouble(value));\r\n+\t\t\tDouble d = Double.parseDouble(value);\r\n+\t\t\tif (d != null) {\r\n+\t\t\t\tSystem.out.println(\"We got here\");\r\n+\t\t\t\tsize++;\r\n+\t\t\t\taverage += d;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif(size!=0) {\r\n+\t\t\taverage /= size;\r\n+\t\t\treturn average;\r\n+\t\t}\r\n+\t\treturn 0;\r\n+\r\n+\t}\r\n+\r\n+\tpublic double generateStanderdDeviation(Set<String> classNames, HashMap<String, Double> results, double average) {\r\n+\t\tdouble standardDeviation = 0;\r\n+\t\tint size = 0;\r\n+\t\tfor (String key : classNames) {\r\n+\t\t\tString value = String.valueOf(results.get(key));\r\n+\t\t\tDouble d = Double.parseDouble(value);\r\n+\t\t\tif (d != null) {\r\n+\t\t\t\tsize++;\r\n+\t\t\t\tstandardDeviation += Math.pow((d - average), 2);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif(size!=0) {\r\n+\t\t\tstandardDeviation /= size;\r\n+\t\t\treturn standardDeviation;\r\n+\t\t}\r\n+\t\treturn 0;\r\n+\t}\r\n+\t// DESIGN QUALITY METRICS\r\n+\t\r\n+\tpublic String generateAbstraction() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] abstraction = new String[4][6];\r\n+\t\tabstraction[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\tabstraction[1] = generateRow(classNames,calc.getPrimaryMetrics().getAverageNumberOfAncestors(),\"Average Number of Ancestors\");\r\n+\t\tabstraction[2] = generateRow(classNames,calc.getPrimaryMetrics().getFailSafeDefaults(),\"Fail-Safe Defaults\");\r\n+\t\tabstraction[3] = generateRow(classNames,calc.getPrimaryMetrics().getReduceAttackSurface(),\"Reduce Attack Surface\");\r\n+\t\tsection += makeTable(abstraction);\r\n+\t\treturn section;\r\n+\t}\r\n+\tpublic String generateCohesion() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] cohesion = new String[3][6];\r\n+\t\tcohesion[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\tcohesion[1] = generateRow(classNames,calc.getPrimaryMetrics().getCohesionAmongMethodsInClass(),\"Cohesion Among Methods in a Class\");\r\n+\t\tcohesion[2] = generateRow(classNames,calc.getPrimaryMetrics().getLackOfCohesionOfMethods(),\"Lack of Cohesion of Methods\");\r\n+\t\tsection += makeTable(cohesion);\r\n+\t\treturn section;\r\n+\t}\r\n+\tpublic String generateCoupling() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] coupling = new String[10][6];\r\n+\t\tcoupling[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\tHashMap<String,Double> baseClasses = new HashMap<String,Double>();\r\n+\t\tbaseClasses.put(\"project\",calc.getPrimaryMetrics().getCountOfBaseClasses());\r\n+\t\tcoupling[1] = generateRow(classNames,baseClasses,\"Count of Base Classes\");\r\n+\t\tcoupling[2] = generateRow(classNames,calc.getPrimaryMetrics().getCouplingBetweenObjects(),\"Coupling Between Objects\");\r\n+\t\tcoupling[3] = generateRow(classNames,calc.getPrimaryMetrics().getCouplingCorruptionPropagation(),\"Coupling Corruption Propagation\");\r\n+\t\tcoupling[4] = generateRow(classNames,calc.getPrimaryMetrics().getDepthOfInheritanceTree(),\"Depth of Inheritance Tree\");\r\n+\t\tcoupling[5] = generateRow(classNames,calc.getPrimaryMetrics().getDirectClassCoupling(),\"Direct Class Coupling\");\r\n+\t\tcoupling[6] = generateRow(classNames,calc.getPrimaryMetrics().getFanIn(),\"Fan In\");\r\n+\t\tcoupling[7] = generateRow(classNames,calc.getPrimaryMetrics().getFanOut(),\"Fan Out\");\r\n+\t\tcoupling[8] = generateRow(classNames,calc.getPrimaryMetrics().getHenryKafura(),\"Henry Kafura\");\r\n+\t\tcoupling[9] = generateRow(classNames,calc.getPrimaryMetrics().getNumberOfChildren(),\"Number of Children\");\r\n+\t\tcoupling[9] = generateRow(classNames,calc.getPrimaryMetrics().getNumberOfChildren(),\"Responses set for a Class\");\r\n+\t\tsection += makeTable(coupling);\r\n+\t\treturn section;\r\n+\t}\r\n+\tpublic String DesignSize() {\r\n+\t\tSet<String> classes = new HashSet<String>();\r\n+\t\tclasses.add(\"project\");\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] coupling = new String[3][6];\r\n+\t\tcoupling[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\tHashMap<String,Double> stallRatio = new HashMap<String,Double>();\r\n+\t\tstallRatio.put(\"project\",calc.getPrimaryMetrics().getStallRatio());\r\n+\t\t\r\n+\t\tHashMap<String,Double> designSize = new HashMap<String,Double>();\r\n+\t\tdesignSize.put(\"project\",calc.getPrimaryMetrics().getDesignSizeInClasses());\r\n+\t\t\r\n+\t\t\r\n+\t\t\r\n+\t\tcoupling[1] = generateRow(classes,stallRatio,\"Stall Ration\");\r\n+\t\tcoupling[2] = generateRow(classes,designSize,\"Design Size in Classes\");\r\n+\t\t\r\n+\t\tsection += makeTable(coupling);\r\n+\t\treturn section;\r\n+\t}\r\n+\tpublic String encapsulation() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classes = new HashSet<String>();\r\n+\t\tclasses.add(\"project\");\r\n+\t\t\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] coupling = new String[7][6];\r\n+\t\tcoupling[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\t\r\n+\t\tHashMap<String,Double> heirarchies = new HashMap<String,Double>();\r\n+\t\theirarchies.put(\"project\",calc.getPrimaryMetrics().getNumberOfHierarchies());\r\n+\t\t\r\n+\t\tHashMap<String,Double> isolation = new HashMap<String,Double>();\r\n+\t\tisolation.put(\"project\",calc.getPrimaryMetrics().getIsolation());\r\n+\t\t\r\n+\t\tHashMap<String,Double> mechanism = new HashMap<String,Double>();\r\n+\t\tmechanism.put(\"project\",calc.getPrimaryMetrics().getLeastCommonMechanism());\r\n+\t\t\r\n+\t\tcoupling[1] = generateRow(classNames,calc.getPrimaryMetrics().getCriticalElementRatio(),\"Critical Element Ratio\");\r\n+\t\tcoupling[2] = generateRow(classNames,calc.getPrimaryMetrics().getDataAccessMetric(),\"Data Access Metric\");\r\n+\t\tcoupling[3] = generateRow(classNames,calc.getPrimaryMetrics().getGrantLeastPrivelage(),\"Grant Least Privilege\");\r\n+\t\tcoupling[4] = generateRow(classes,isolation,\"Isolation\");\t\t\r\n+\t\tcoupling[5] = generateRow(classes,mechanism,\"Least Common Mechanism\");\r\n+\t\tcoupling[6] = generateRow(classNames,heirarchies,\"Number of Hierarchies\");\r\n+\t\t\r\n+\t\tsection += makeTable(coupling);\r\n+\t\treturn section;\r\n+\t}\r\n+\tpublic String generateInheritance() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] inheritance = new String[2][6];\r\n+\t\tinheritance[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\tinheritance[1] = generateRow(classNames,calc.getPrimaryMetrics().getMeasureOfFunctionalAbtraction(),\"Measure of Functional Abstraction\");\r\n+\t\tsection += makeTable(inheritance);\r\n+\t\t\r\n+\t\treturn section;\r\n+\t}\r\n+\t\r\n+\tpublic String generateMessaging() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] inheritance = new String[2][6];\r\n+\t\tinheritance[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\tinheritance[1] = generateRow(classNames,calc.getPrimaryMetrics().getClassInterfaceSize(),\"Measure of Functional Abstraction\");\r\n+\t\tsection += makeTable(inheritance);\r\n+\t\t\r\n+\t\treturn section;\r\n+\t}\r\n+\t\r\n+\tpublic String generatePolymorphism() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] inheritance = new String[2][6];\r\n+\t\tinheritance[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\tinheritance[1] = generateRow(classNames,calc.getPrimaryMetrics().getClassInterfaceSize(),\"Measure of Functional Abstraction\");\r\n+\t\tsection += makeTable(inheritance);\r\n+\t\t\r\n+\t\treturn section;\r\n+\t}\r\n+\tpublic String generateComplexity() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] inheritance = new String[17][6];\r\n+\t\tinheritance[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\t\r\n+\t\tSet<String> classes = new HashSet<String>();\r\n+\t\tclasses.add(\"project\");\r\n+\t\tHashMap<String,Double> countofBase = new HashMap<String,Double>();\r\n+\t\tcountofBase.put(\"project\",calc.getPrimaryMetrics().getCountOfBaseClasses());\r\n+\t\tHashMap<String,Double> economyOfMechanism = new HashMap<String,Double>();\r\n+\t\tcountofBase.put(\"project\",calc.getPrimaryMetrics().getEconomyOfMechanism());\r\n+\t\t\r\n+\t\t\r\n+\t\tHashMap<String,Double> weakestLink = new HashMap<String,Double>();\r\n+\t\tweakestLink.put(\"project\",calc.getPrimaryMetrics().getSecureWeakestLink());\r\n+\t\t\r\n+\t\tHashMap<String,Double> linesOfCode = new HashMap<String,Double>();\r\n+\t\tweakestLink.put(\"project\",calc.getPrimaryMetrics().getSourceLinesOfCode());\r\n+\t\t\r\n+\t\t\r\n+\t\tinheritance[1] = generateRow(classNames,calc.getPrimaryMetrics().getCommentRatio(),\"Comment Ratio\");\r\n+\t\tinheritance[2] = generateRow(classNames,countofBase,\"Count of Base Classes\");\r\n+\t\tinheritance[3] = generateRow(classNames,calc.getPrimaryMetrics().getCyclomaticComplexity(),\"Cyclomatic Complexity\");\r\n+\t\tinheritance[4] = generateRow(classNames,calc.getPrimaryMetrics().getDepthOfInheritanceTree(),\"Depth of Inheritance\");\r\n+\t\tinheritance[5] = generateRow(classNames,calc.getPrimaryMetrics().getCountPath(),\"Count Path\");\r\n+\t\tinheritance[6] = generateRow(classNames,economyOfMechanism,\"Economy of Mechanism\");\r\n+\t\tinheritance[7] = generateRow(classNames,calc.getPrimaryMetrics().getMcCabesCyclomaticComplexity(),\"Mcabes Cyclomatic Complexity\");\r\n+\t\tinheritance[8] = generateRow(classNames,calc.getPrimaryMetrics().getModifiedCyclomaticComplexity(),\"Modified Cyclomatic Complexity\");\r\n+\t\t//inheritance[9] = generateRow(classNames,calc.getPrimaryMetrics().getNestingComplexity(),\"Nesting Complexity\");\r\n+\t\tinheritance[9] = generateRow(classNames,calc.getPrimaryMetrics().getNumberOfChildren(),\"Number of Children\");\r\n+\t\tinheritance[10]= generateRow(classNames,calc.getPrimaryMetrics().getNumberOfMethods(),\"Number of Methods\");\r\n+\t\tinheritance[11]= generateRow(classNames,calc.getPrimaryMetrics().getStrictCyclomaticComplexity(),\"Strict Cyclomatic Complexity\");\r\n+\t\tinheritance[12]= generateRow(classNames,weakestLink,\"Secure Weakest Link\");\r\n+\t\tinheritance[13]= generateRow(classNames,linesOfCode,\"Lines of Code\");\r\n+\t\tinheritance[14]= generateRow(classNames,calc.getPrimaryMetrics().getWeightedMethodsPerClass(),\"Weighted Methods per Class\");\r\n+\t\t\r\n+\t\t\r\n+\t\tsection += makeTable(inheritance);\r\n+\t\t\r\n+\t\treturn section;\r\n+\t}\r\n+\t\r\n+\tpublic String generateComposition() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] inheritance = new String[2][6];\r\n+\t\tinheritance[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\t\t\"Count\" };\r\n+\t\tinheritance[1] = generateRow(classNames,calc.getPrimaryMetrics().getMeasureOfAggregation(),\"Measure of Functional Abstraction\");\r\n+\t\tsection += makeTable(inheritance);\r\n+\t\t\r\n+\t\treturn section;\r\n+\t}\r\n+\t\r\n+\tpublic String generateAllMetricsBreakdown() {\r\n+\t\tString section = \"\";\r\n+\t\tSet<String> classNames = calc.getMurgePulledValues().getNumberOfClassesInProject();\r\n+\t\tString[][] metrics = new String[72][6];\r\n+\t\tmetrics[0] = new String[] { \"Metric\", \"Average\", \"Standerd Deviation\", \"Higeset Value\", \"Lowest Value\",\r\n+\t\t\"Count\" };\r\n+\t\t\r\n+\t\tSet<String> classes = new HashSet<String>();\r\n+\t\tHashMap<String,Double> countofBaseClasses = new HashMap<String,Double>();\r\n+\t\tcountofBaseClasses.put(\"project\",calc.getPrimaryMetrics().getCountOfBaseClasses());\r\n+\t\t\r\n+\t\tHashMap<String,Double> economyofMechanism = new HashMap<String,Double>();\r\n+\t\teconomyofMechanism.put(\"project\",calc.getPrimaryMetrics().getEconomyOfMechanism());\r\n+\t\t\r\n+\t\tHashMap<String,Double> secureWeakestLink = new HashMap<String,Double>();\r\n+\t\tsecureWeakestLink.put(\"project\",calc.getPrimaryMetrics().getSecureWeakestLink());\r\n+\t\t\r\n+\t\tHashMap<String,Double> linesOfCode = new HashMap<String,Double>();\r\n+\t\tlinesOfCode.put(\"project\",calc.getPrimaryMetrics().getSourceLinesOfCode());\r\n+\t\t\r\n+\t\tHashMap<String,Double> baseClass = new HashMap<String,Double>();\r\n+\t\tbaseClass.put(\"project\",calc.getPrimaryMetrics().getCountOfBaseClasses());\r\n+\t\t\r\n+\t\tHashMap<String,Double> stallRatio = new HashMap<String,Double>();\r\n+\t\tstallRatio.put(\"project\",calc.getPrimaryMetrics().getStallRatio());\r\n+\t\t\r\n+\t\tHashMap<String,Double> heirarchies = new HashMap<String,Double>();\r\n+\t\theirarchies.put(\"project\",calc.getPrimaryMetrics().getNumberOfHierarchies());\r\n+\t\t\r\n+\t\tHashMap<String,Double> sercurityAbsoulte = new HashMap<String,Double>();\r\n+\t\tsercurityAbsoulte.put(\"project\",calc.getSecondaryMetrics().getSecurityAbsoluteMeasurements());\r\n+\t\t\r\n+\t\tdouble totalAttributes = calc.getTertiaryMetrics().getClassifiedAttributesTotal();\r\n+\t\tdouble totalMethods = calc.getTertiaryMetrics().getClassifiedMethodsTotal();\r\n+\t\tdouble totalClass = calc.getTertiaryMetrics().getCriticalClassesTotal();\r\n+\t\t\r\n+\t\tHashMap<String,Double> classifiedAttricbute = new HashMap<String,Double>();\r\n+\t\tclassifiedAttricbute.put(\"project\",totalMethods);\r\n+\t\t\r\n+\t\tHashMap<String,Double> classifiedMethods = new HashMap<String,Double>();\r\n+\t\tclassifiedMethods.put(\"project\",totalAttributes);\r\n+\t\t\r\n+\t\tHashMap<String,Double> classifiedClasses = new HashMap<String,Double>();\r\n+\t\tclassifiedClasses.put(\"project\",totalClass);\r\n+\t\t\r\n+\t\tHashMap<String,Double> criticalClassCoupling = new HashMap<String,Double>();\r\n+\t\tcriticalClassCoupling.put(\"project\",(double)calc.getTertiaryMetrics().getCriticalClassesCoupling());\r\n+\t\t\r\n+\t\tHashMap<String,Double> seialized = new HashMap<String,Double>();\r\n+\t\tseialized.put(\"project\",(double)calc.getTertiaryMetrics().getCriticalSerializedClassesProportion());\r\n+\t\t\r\n+\t\t\r\n+\t\tHashMap<String,Double> superClass = new HashMap<String,Double>();\r\n+\t\tsuperClass.put(\"project\",(double)calc.getTertiaryMetrics().getCriticalSuperclassesInheritance());\r\n+\t\t\r\n+\r\n+\t\tHashMap<String,Double> accesserClass = new HashMap<String,Double>();\r\n+\t\taccesserClass.put(\"project\",(double)calc.getTertiaryMetrics().getUnusedCriticalAccessorClass());\r\n+\t\t\r\n+\t\tHashMap<String,Double> reflection = new HashMap<String,Double>();\r\n+\t\treflection.put(\"project\",(double)calc.getTertiaryMetrics().getReflectionPackageBoolean());\r\n+\t\t\r\n+\t\tHashMap<String,Double> partCriticalClasses = new HashMap<String,Double>();\r\n+\t\tpartCriticalClasses.put(\"project\",(double)calc.getTertiaryMetrics().getCompositePartCriticalClasses());\r\n+\t\t\r\n+\t\tHashMap<String,Double> criticalClassExtensibility = new HashMap<String,Double>();\r\n+\t\tcriticalClassExtensibility.put(\"project\",(double)calc.getTertiaryMetrics().getCriticalClassesExtensibility());\r\n+\t\t\r\n+\t\tHashMap<String,Double> criticalDesignProportion = new HashMap<String,Double>();\r\n+\t\tcriticalDesignProportion.put(\"project\",(double)calc.getTertiaryMetrics().getCriticalDesignProportion());\r\n+\t\t\r\n+\t\tHashMap<String,Double> criticalSuperClassProportion = new HashMap<String,Double>();\r\n+\t\tcriticalSuperClassProportion.put(\"project\",(double)calc.getTertiaryMetrics().getCriticalSuperclassesProportion());\r\n+\t\t\r\n+\t\tHashMap<String,Double> isolation = new HashMap<String,Double>();\r\n+\t\tisolation.put(\"project\",(double)calc.getPrimaryMetrics().getIsolation());\r\n+\t\t\r\n+\t\tHashMap<String,Double> designSize = new HashMap<String,Double>();\r\n+\t\tdesignSize.put(\"project\",(double)calc.getPrimaryMetrics().getDesignSizeInClasses());\r\n+\t\t\r\n+\t\tHashMap<String,Double> mechanism = new HashMap<String,Double>();\r\n+\t\tmechanism.put(\"project\",(double)calc.getPrimaryMetrics().getLeastCommonMechanism());\r\n+\t\t\r\n+\t\t//Primary Metrics\r\n+\t\tmetrics[1] = generateRow(classNames,calc.getPrimaryMetrics().getAverageNumberOfAncestors(),\"Average Number of Ancestors\");\r\n+\t\tmetrics[2] = generateRow(classNames,calc.getPrimaryMetrics().getFailSafeDefaults(),\"Fail Safe Defaults\");\r\n+\t\tmetrics[3] = generateRow(classNames,calc.getPrimaryMetrics().getReduceAttackSurface(),\"Reduce Attack Surface\");\r\n+\t\tmetrics[4] = generateRow(classNames,calc.getPrimaryMetrics().getLackOfCohesionOfMethods(),\"Lack of Cohesion Methods\");\r\n+\t\tmetrics[5] = generateRow(classNames,calc.getPrimaryMetrics().getCohesionAmongMethodsInClass(),\"Cohesion Among Methods in Class\");\r\n+\t\tmetrics[6] = generateRow(classNames,calc.getPrimaryMetrics().getCommentRatio(),\"Comment Ratio\");\r\n+\t\tmetrics[7] = generateRow(classes,countofBaseClasses,\"Count of Base Classes\");\r\n+\t\tmetrics[8] = generateRow(classNames,calc.getPrimaryMetrics().getCyclomaticComplexity(),\"Cyclomatic Complexity\");\r\n+\t\tmetrics[9] = generateRow(classNames,calc.getPrimaryMetrics().getDepthOfInheritanceTree(),\"Depth of Inheritance\");\r\n+\t\tmetrics[10]= generateRow(classNames,calc.getPrimaryMetrics().getCountPath(),\"Count Path\");\r\n+\t\tmetrics[11]= generateRow(classes,economyofMechanism,\"Economy of Mechanism\");\r\n+\t\tmetrics[12]= generateRow(classNames,calc.getPrimaryMetrics().getMcCabesCyclomaticComplexity(),\"McCabes Cyclomatic Complexity\");\r\n+\t\tmetrics[13]= generateRow(classNames,calc.getPrimaryMetrics().getModifiedCyclomaticComplexity(),\"Modified Cyclomatic Complexity\");\r\n+\t\t//metrics[14]= generateRow(classNames,calc.getPrimaryMetrics().getNestingComplexity(),\"Nesting Complexity\");\r\n+\t\tmetrics[14]= generateRow(classNames,calc.getPrimaryMetrics().getNumberOfChildren(),\"Number of Children\");\r\n+\t\tmetrics[15]= generateRow(classNames,calc.getPrimaryMetrics().getNumberOfMethods(),\"number of Methods\");\r\n+\t\tmetrics[16]= generateRow(classNames,calc.getPrimaryMetrics().getStrictCyclomaticComplexity(),\"Strict Cyclomatic Complexity\");\r\n+\t\tmetrics[17]= generateRow(classes,secureWeakestLink,\"Secure Weakest Link\");\r\n+\t\tmetrics[18]= generateRow(classes,linesOfCode,\"Lines of Code\");\r\n+\t\tmetrics[19]= generateRow(classNames,calc.getPrimaryMetrics().getWeightedMethodsPerClass(),\"Weighted Methods per Class\");\r\n+\t\tmetrics[20]= generateRow(classNames,calc.getPrimaryMetrics().getMeasureOfAggregation(),\"Measure of Aggregation\");\r\n+\t\tmetrics[21]= generateRow(classNames,baseClass,\"Count of Base Classes\");\r\n+\t\tmetrics[22]= generateRow(classNames,calc.getPrimaryMetrics().getCouplingBetweenObjects(),\"Coupling Between Objects\");\r\n+\t\tmetrics[23]= generateRow(classNames,calc.getPrimaryMetrics().getCouplingCorruptionPropagation(),\"Coupling Corruption Propagation\");\r\n+\t\tmetrics[24]= generateRow(classNames,calc.getPrimaryMetrics().getDepthOfInheritanceTree(),\"Depth of Inheritance Tree\");\r\n+\t\tmetrics[25]= generateRow(classNames,calc.getPrimaryMetrics().getDirectClassCoupling(),\"Direct Class Coupling\");\r\n+\t\tmetrics[26]= generateRow(classNames,calc.getPrimaryMetrics().getFanIn(),\"Fan in\");\r\n+\t\tmetrics[27]= generateRow(classNames,calc.getPrimaryMetrics().getFanOut(),\"Fan out\");\r\n+\t\tmetrics[28]= generateRow(classNames,calc.getPrimaryMetrics().getHenryKafura(),\"Henry Kafura\");\r\n+\t\tmetrics[29]= generateRow(classNames,calc.getPrimaryMetrics().getNumberOfChildren(),\"Number of Children\");\r\n+\t\tmetrics[30]= generateRow(classNames,calc.getPrimaryMetrics().getResponseSetForAClass(),\"Response Set for a Class\");\r\n+\t\tmetrics[31]= generateRow(classes,designSize,\"Design Size in Classes\");\r\n+\t\tmetrics[32]= generateRow(classes,stallRatio,\"Stall Ratio\");\r\n+\t\tmetrics[33]= generateRow(classNames,calc.getPrimaryMetrics().getCriticalElementRatio(),\"Critical Element Ratio\");\r\n+\t\tmetrics[34]= generateRow(classNames,calc.getPrimaryMetrics().getDataAccessMetric(),\"Data Access Metric\");\r\n+\t\tmetrics[35]= generateRow(classNames,calc.getPrimaryMetrics().getGrantLeastPrivelage(),\"Grant Least Privilage\");\r\n+\t\tmetrics[36]= generateRow(classes,isolation,\"Isolation\");\r\n+\t\tmetrics[37]= generateRow(classNames,mechanism,\"least Common Mechanism\");\r\n+\t\tmetrics[38]= generateRow(classes,heirarchies,\"Number of Hierarchies\");\r\n+\t\tmetrics[39]= generateRow(classNames,calc.getPrimaryMetrics().getMeasureOfFunctionalAbtraction(),\"Measure of Functional Abstraction\");\r\n+\t\tmetrics[40]= generateRow(classNames,calc.getPrimaryMetrics().getClassInterfaceSize(),\"Class Interface Size\");\r\n+\t\tmetrics[41]= generateRow(classNames,calc.getPrimaryMetrics().getNumberOfPolymorphicMethods(),\"number of PolyMorphic Methods\");\r\n+\t\tmetrics[42]= generateRow(classNames,calc.getSecondaryMetrics().getReadabilityOfClassifiedAttributes(),\"readability of Classified attributes\");\r\n+\t\tmetrics[43]= generateRow(classNames,calc.getSecondaryMetrics().getReadabilityOfClassifiedMethods(),\"Readability of Classified Methods\");\r\n+\t\tmetrics[44]= generateRow(classes,sercurityAbsoulte,\"Security Absolute Measurements\");\r\n+\t\tmetrics[45]= generateRow(classNames,calc.getSecondaryMetrics().getWritabilityOfClassifiedAttributes(),\"writability of Classified Attributes\");\r\n+\t\tmetrics[46]= generateRow(classNames,calc.getSecondaryMetrics().getWritabilityOfClassifiedMethods(),\"Writability of Classified Methods\");\r\n+\t\tmetrics[47]= generateRow(classNames,calc.getSecondaryMetrics().getWritabilityOfClassifiedClasses(),\"Writablility of Classified Classes\");\r\n+\t\tmetrics[48]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedInstanceDataAccessibility(),\"Classified Instance Data Accessibility\");\r\n+\t\tmetrics[49]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedClassDataAccessibility(),\"Classified Class Data Accessibility\");\r\n+\t\tmetrics[50]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedAttributesInheritance(),\"Classified Attributes Inheritance\");\r\n+\t\tmetrics[51]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedOperationAccessibility(),\"Classified Operation Accessibility\");\r\n+\t\tmetrics[52]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedMethodsExtensibility(),\"Classified Methods Extensibility\");\r\n+\t\tmetrics[53]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedMethodsInheritance(),\"Classified Methods Inheritance\");\r\n+\t\tmetrics[54]= generateRow(classes,classifiedAttricbute,\"Classified Attributes Total\");\r\n+\t\tmetrics[55]= generateRow(classes,classifiedMethods,\"Classified Methods Total\");\r\n+\t\tmetrics[55]= generateRow(classes,classifiedClasses,\"Critical Classes Total\");\r\n+\t\tmetrics[56]= generateRow(classNames,calc.getTertiaryMetrics().getUnaccessedAssignedClassifiedAttribute(),\"Unaccessed Assigned Classified Attribute\");\r\n+\t\tmetrics[57]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedAccessorAttributeInteractions(),\"Classified Accessor Attribute Interactions\");\r\n+\t\tmetrics[58]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedMutatorAttributeInteractions(),\"Classified Mutator Attribute Interactions\");\r\n+\t\tmetrics[59]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedAttributesInteractionWeight(),\"Classified Attributes Interaction Weight\");\r\n+\t\tmetrics[60]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedMethodsWeight(),\"Classified Methods Weight\");\r\n+\t\tmetrics[61]= generateRow(classNames,calc.getTertiaryMetrics().getClassifiedWritingMethodsProportion(),\"Classified Writing Methods Proportion\");\r\n+\t\tmetrics[62]= generateRow(classNames,calc.getTertiaryMetrics().getUncalledClassifiedAccessorMethod(),\"Uncalled Classified Accessor Methods\");\r\n+\t\tmetrics[63]= generateRow(classes,criticalClassCoupling,\"Critical Class Coupling\");\r\n+\t\tmetrics[64]= generateRow(classes,seialized,\"Critical Class Serialization\");\r\n+\t\tmetrics[65]= generateRow(classes,superClass,\"Critical Superclasses Inheritance\");\r\n+\t\tmetrics[66]= generateRow(classes,accesserClass,\"Unused Critical AccessorClass\");\r\n+\t\tmetrics[67]= generateRow(classes,reflection,\"Reflection Package Boolean\");\r\n+\t\tmetrics[68]= generateRow(classes,partCriticalClasses,\"Composite Part Critical Classes\");\r\n+\t\tmetrics[69]= generateRow(classes,criticalClassExtensibility,\"Critical Classes Extensibility\");\r\n+\t\tmetrics[70]= generateRow(classes,criticalDesignProportion,\"Critical Design Proportion\");\r\n+\t\tmetrics[71]= generateRow(classes,criticalSuperClassProportion,\"Critical Superclasses Proportion\");\r\n+\t\t\r\n+\t\tsection += makeTable(metrics);\r\n+\t\t\r\n+\t\treturn section;\r\n+\t}\r\n+\t\r\n+\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "78d6e29cd103b93e18d6663e55c319f3f1095c99",
    "filename": "src/ssmc/Method.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/src/ssmc/Method.java",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/src/ssmc/Method.java",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/src/ssmc/Method.java?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e",
    "patch": "@@ -90,7 +90,7 @@ public void isAccessor() {\n \t\t\t\t// The only statement within the method should be a ReturnStatement\r\n \t\t\t\tif(getStatements().get(0).getNode() instanceof ReturnStatement) {\r\n \t\t\t\t\t// At this point we have confirmed it is a getter method\r\n-\t\t\t\t\tSystem.out.println(\"Accessor: Method |||| Line \" + this.identifier + \" ||||| \" + this.getStartLine());\t\r\n+\t\t\t\t\t//System.out.println(\"Accessor: Method |||| Line \" + this.identifier + \" ||||| \" + this.getStartLine());\t\r\n \t\t\t\t\tsetAccessor();\r\n \t\t\t}\r\n \t\t}\t\r\n@@ -102,7 +102,7 @@ public void isMutator() {\n \t\tif(getIdentifier().startsWith(\"set\") && isVoid) {\r\n \t\t\t// Then we determine the number of variables it sets by the number of parameters\r\n \t\t\tsetMutator(this.parameters.size());\r\n-\t\t\tSystem.out.println(\"Mutator: Method |||| Line \" + this.identifier + \" ||||| \" + this.getStartLine() + \" Value: \" + this.mutator);\t\r\n+\t\t\t//System.out.println(\"Mutator: Method |||| Line \" + this.identifier + \" ||||| \" + this.getStartLine() + \" Value: \" + this.mutator);\t\r\n \t\t}\r\n \t}\r\n \tpublic boolean getAccessor() {\r\n@@ -488,7 +488,7 @@ public String toString() {\n \t\t\t}\r\n \t\t\t//The complexity of the Method is the sum of the current \r\n \t\t\t//complexity plus the Statment's complexity\r\n-\t\t\tSystem.out.println(\"statement: \" + s.getComplexity());\r\n+\t\t\t//System.out.println(\"statement: \" + s.getComplexity());\r\n \t\t\tstrictComplexity += s.getStrictComplexity();\r\n \t\t\tmodifiedComplexity += s.getModifiedComplexity();\r\n \t\t\tcyclomaticComplexity += s.getCyclomaticComplexity();\r"
  },
  {
    "sha": "bf32ea1aadc770cb6b027ed58c0169fb288b89a1",
    "filename": "src/ssmc/handlers/ButtonHandler.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/blob/1312b80043d0420275ff3f762bebc5abf7d4b31e/src/ssmc/handlers/ButtonHandler.java",
    "raw_url": "https://github.com/AndrewCMoore/Software-Security-Metrics-Calculator/raw/1312b80043d0420275ff3f762bebc5abf7d4b31e/src/ssmc/handlers/ButtonHandler.java",
    "contents_url": "https://api.github.com/repos/AndrewCMoore/Software-Security-Metrics-Calculator/contents/src/ssmc/handlers/ButtonHandler.java?ref=1312b80043d0420275ff3f762bebc5abf7d4b31e",
    "patch": "@@ -22,6 +22,7 @@\n import org.eclipse.ui.handlers.HandlerUtil;\r\n \r\n import Calculator.Calculator;\r\n+import Report_Generation.GenerateHTML;\r\n import Report_Generation.generateCSV;\r\n import tree.JDTree;\r\n \r\n@@ -117,9 +118,9 @@ public void addToTree() throws JavaModelException, CoreException {\n \t\t\tCalculator calc = new Calculator(myTree);\r\n \t\t\t//start calculating metrics\r\n \t\t\tcalc.calculate();\r\n-\t\t\t\r\n-\t\t\ttry {\r\n+\t\t\ttry {\t\t\t\r\n \t\t\t\tgenerateCSV CSV = new generateCSV(project, calc);\r\n+\t\t\t\tGenerateHTML generator = new GenerateHTML(calc);\r\n \t\t\t} catch (IOException e) {\r\n \t\t\t\t// TODO Auto-generated catch block\r\n \t\t\t\te.printStackTrace();\r"
  }
]
