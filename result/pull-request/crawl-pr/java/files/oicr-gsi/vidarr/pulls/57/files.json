[
  {
    "sha": "49f257c7bcbe105d03026143c48fb779f4102b15",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/oicr-gsi/vidarr/blob/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/pom.xml",
    "raw_url": "https://github.com/oicr-gsi/vidarr/raw/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/pom.xml",
    "contents_url": "https://api.github.com/repos/oicr-gsi/vidarr/contents/pom.xml?ref=a2f883d0a22dc34fb88590095ebaa14792ccfcf9",
    "patch": "@@ -126,6 +126,11 @@\n         <artifactId>HikariCP</artifactId>\n         <version>2.4.7</version>\n       </dependency>\n+      <dependency>\n+        <groupId>com.hierynomus</groupId>\n+        <artifactId>sshj</artifactId>\n+        <version>0.31.0</version>\n+      </dependency>\n     </dependencies>\n   </dependencyManagement>\n   <distributionManagement>\n@@ -147,6 +152,7 @@\n     <module>vidarr-server</module>\n     <module>vidarr-core</module>\n     <module>vidarr-cli</module>\n+    <module>vidarr-niassa</module>\n   </modules>\n   <build>\n     <plugins>"
  },
  {
    "sha": "c3569e156995b52bf66045333444d24249de27fa",
    "filename": "vidarr-niassa/pom.xml",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/oicr-gsi/vidarr/blob/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/pom.xml",
    "raw_url": "https://github.com/oicr-gsi/vidarr/raw/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/pom.xml",
    "contents_url": "https://api.github.com/repos/oicr-gsi/vidarr/contents/vidarr-niassa/pom.xml?ref=a2f883d0a22dc34fb88590095ebaa14792ccfcf9",
    "patch": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <dependencies>\n+        <dependency>\n+            <groupId>ca.on.oicr.gsi.vidarr</groupId>\n+            <artifactId>vidarr-pluginapi</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.hierynomus</groupId>\n+            <artifactId>sshj</artifactId>\n+        </dependency>\n+    </dependencies>\n+\n+    <parent>\n+        <groupId>ca.on.oicr.gsi.vidarr</groupId>\n+        <artifactId>vidarr</artifactId>\n+        <version>0.1.3-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>ca.on.oicr.gsi.vidarr</groupId>\n+    <artifactId>vidarr-niassa</artifactId>\n+    <version>0.1.3-SNAPSHOT</version>\n+\n+</project>"
  },
  {
    "sha": "6d09a532b7ff4580ee0799d5ef592dad7015da89",
    "filename": "vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaOutputProvisioner.java",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/oicr-gsi/vidarr/blob/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaOutputProvisioner.java",
    "raw_url": "https://github.com/oicr-gsi/vidarr/raw/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaOutputProvisioner.java",
    "contents_url": "https://api.github.com/repos/oicr-gsi/vidarr/contents/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaOutputProvisioner.java?ref=a2f883d0a22dc34fb88590095ebaa14792ccfcf9",
    "patch": "@@ -0,0 +1,182 @@\n+package ca.on.oicr.gsi.vidarr.niassa;\n+\n+import ca.on.oicr.gsi.Pair;\n+import ca.on.oicr.gsi.status.SectionRenderer;\n+import ca.on.oicr.gsi.vidarr.BasicType;\n+import ca.on.oicr.gsi.vidarr.OutputProvisionFormat;\n+import ca.on.oicr.gsi.vidarr.OutputProvisioner;\n+import ca.on.oicr.gsi.vidarr.WorkMonitor;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import net.schmizz.sshj.SSHClient;\n+import net.schmizz.sshj.sftp.SFTPClient;\n+\n+import javax.xml.stream.XMLStreamException;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Takes in information about Niassa files and symlinks them to a target directory received from Shesmu.\n+ * Also copies information about said files to Vidarr database.\n+ */\n+public class NiassaOutputProvisioner implements OutputProvisioner {\n+    /**\n+     * For cases where we need to substitute one file type for another.\n+     * TODO: why would we do this\n+     * TODO: define these\n+     */\n+    private final static Map<String,String> SUBSTITUTIONS = Map.of();\n+\n+    /**\n+     * Provides access to Jackson json interpretation methods.\n+     * Not private so NiassaOutputProvisionerProvider has access as well.\n+     */\n+    static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /**\n+     * If we recreated the source directory structure, it'd be way too deep. Chunk the file path and rebuild the path\n+     * by appending this information to the target directory defined in the plugin configuration.\n+     * For an example of this structure, please look at the .git directory.\n+     */\n+    private final int[] chunks;\n+\n+    /**\n+     * Manages SSH connection information.\n+     */\n+    private final SSHClient client;\n+\n+    /**\n+     * Required specifically for its symlink() method.\n+     */\n+    private final SFTPClient sftp;\n+\n+    /**\n+     * Set up the NiassaOutputProvisioner with a file path chunking and the SSH connection information provided by the\n+     * plugin configuration.\n+     * This constructor should only be called by NiassaOutputProvisionerProvider.readConfiguration().\n+     * @param chunks File path chunking to be appended to the target received from Shesmu\n+     * @param username Username for SSH connection from plugin configuration\n+     * @param hostname Hostname for SSH connection from plugin configuration\n+     * @param port Port for SSH connection from plugin configuration\n+     * @throws IOException when SSH connection fails\n+     */\n+    public NiassaOutputProvisioner(int[] chunks, String username, String hostname, short port) throws IOException {\n+        this.chunks = chunks;\n+        client = new SSHClient();\n+        client.loadKnownHosts();\n+        client.connect(hostname, port);\n+        client.authPublickey(username);\n+        sftp = client.newSFTPClient();\n+    }\n+\n+    @Override\n+    public boolean canProvision(OutputProvisionFormat format) {\n+        return format == OutputProvisionFormat.FILES;\n+    }\n+\n+    @Override\n+    public void configuration(SectionRenderer sectionRenderer) throws XMLStreamException {\n+        //skip\n+    }\n+\n+    @Override\n+    public JsonNode preflightCheck(JsonNode metadata, WorkMonitor<Boolean, JsonNode> monitor) {\n+        monitor.scheduleTask(() -> monitor.complete(true));\n+        return null;\n+    }\n+\n+\n+    @Override\n+    public void preflightRecover(JsonNode state, WorkMonitor<Boolean, JsonNode> monitor) {\n+        monitor.scheduleTask(() -> monitor.complete(true));\n+    }\n+\n+    /**\n+     * Build the path by appending the chunks to the TARGET directory provided by shesmu. Then use the SFTPClient\n+     * to symlink from the SOURCE to the TARGET. Log file metadata to the Vidarr database with monitor.complete()\n+     *\n+     * @param workflowRunId the workflow run ID assigned by Vidarr\n+     * @param data this is a json object inside a string, containing labels, md5, fileSize, path, and metatype.\n+     *             This comes from NiassaWorkflowEngine.\n+     * @param metadata the information coming from the submitter to direct provisioning.\n+     *                 This is a jsonobject which contains root of TARGET. Append chunks to this.\n+     *                 This is the 'outputDirectory' defined in typeFor and comes from shesmu\n+     * @param monitor the monitor structure for writing the output of the provisioning process\n+     * @return nullNode as monitor.complete() does all the work needed for this plugin.\n+     */\n+    @Override\n+    public JsonNode provision(String workflowRunId,\n+                              String data,\n+                              JsonNode metadata,\n+                              WorkMonitor<Result, JsonNode> monitor) {\n+        monitor.scheduleTask(() -> {\n+            // Set up all the data in the formats we need\n+            JsonNode dataAsJson;\n+            try {\n+                dataAsJson = MAPPER.readTree(data);\n+            } catch (JsonProcessingException e) {\n+                throw new RuntimeException(e);\n+            }\n+            String sourcePath = dataAsJson.get(\"path\").asText();\n+            Path targetPath = Path.of(metadata.get(\"outputDirectory\").asText());\n+\n+            // Append chunks to target directory by repeatedly resolving path with chunk added\n+            int startIndex = 0;\n+            for (final int length: chunks){\n+                if (length < 1) break;\n+                final int endIndex = Math.min(workflowRunId.length(), startIndex + length);\n+                if (endIndex == startIndex) break;\n+                targetPath = targetPath.resolve(workflowRunId.substring(startIndex, endIndex));\n+                startIndex = endIndex;\n+            }\n+\n+            // Use the sftp client to create symlink to the TARGET\n+            try {\n+                sftp.mkdirs(targetPath.toString());\n+                sftp.symlink(sourcePath, targetPath.toString());\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            // When done, monitor.complete with Result of type file describing symlinked file\n+            String metatype = dataAsJson.get(\"metatype\").asText();\n+            monitor.complete(Result.file(\n+                    dataAsJson.get(\"path\").asText(),\n+                    dataAsJson.get(\"md5\").asText(),\n+                    dataAsJson.get(\"fileSize\").asLong(),\n+                    SUBSTITUTIONS.getOrDefault(metatype, metatype)\n+            ));\n+        });\n+\n+        //Return nothing\n+        return MAPPER.nullNode();\n+    }\n+\n+    /**\n+     * Schedule a task that fails (permanentFailure) because we don't need to recover from database state\n+     * in this plugin.\n+     *\n+     * @param state the frozen database state\n+     * @param monitor the monitor structure for writing the output of the provisioning process\n+     */\n+    @Override\n+    public void recover(JsonNode state, WorkMonitor<Result, JsonNode> monitor) {\n+        monitor.scheduleTask(() -> monitor.permanentFailure(\"Dummy action.\"));\n+    }\n+\n+    @Override\n+    public String type() {\n+        return \"niassa\";\n+    }\n+\n+    @Override\n+    public BasicType typeFor(OutputProvisionFormat format) {\n+        if (format == OutputProvisionFormat.FILES) {\n+            return BasicType.object(new Pair<>(\"outputDirectory\", BasicType.STRING));\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot provision non-file output\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "340111c3996f7f79025ca7a5f0120903d4e03c1e",
    "filename": "vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaOutputProvisionerProvider.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/oicr-gsi/vidarr/blob/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaOutputProvisionerProvider.java",
    "raw_url": "https://github.com/oicr-gsi/vidarr/raw/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaOutputProvisionerProvider.java",
    "contents_url": "https://api.github.com/repos/oicr-gsi/vidarr/contents/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaOutputProvisionerProvider.java?ref=a2f883d0a22dc34fb88590095ebaa14792ccfcf9",
    "patch": "@@ -0,0 +1,36 @@\n+package ca.on.oicr.gsi.vidarr.niassa;\n+\n+import ca.on.oicr.gsi.vidarr.OutputProvisioner;\n+import ca.on.oicr.gsi.vidarr.OutputProvisionerProvider;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.io.IOException;\n+\n+import static ca.on.oicr.gsi.vidarr.niassa.NiassaOutputProvisioner.MAPPER;\n+\n+/**\n+ * Informs Vidarr that it is capable of using plugin type 'niassa'.\n+ * Reads JSON configuration and creates a new NiassaOutputProvisioner with that config\n+ */\n+public class NiassaOutputProvisionerProvider implements OutputProvisionerProvider {\n+    @Override\n+    public OutputProvisioner readConfiguration(ObjectNode node) {\n+        try {\n+            return new NiassaOutputProvisioner(\n+                    node.has(\"chunks\") ? MAPPER.treeToValue(node.get(\"chunks\"), int[].class) : new int[0],\n+                    node.get(\"username\").asText(),\n+                    node.get(\"hostname\").asText(),\n+                    node.get(\"port\").shortValue());\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public String type() {\n+        return \"niassa\";\n+    }\n+}"
  },
  {
    "sha": "a94c2750f25eb51f94b3b7ba03f399c2f45200ba",
    "filename": "vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaWorkflowEngine.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/oicr-gsi/vidarr/blob/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaWorkflowEngine.java",
    "raw_url": "https://github.com/oicr-gsi/vidarr/raw/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaWorkflowEngine.java",
    "contents_url": "https://api.github.com/repos/oicr-gsi/vidarr/contents/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaWorkflowEngine.java?ref=a2f883d0a22dc34fb88590095ebaa14792ccfcf9",
    "patch": "@@ -0,0 +1,58 @@\n+package ca.on.oicr.gsi.vidarr.niassa;\n+\n+import ca.on.oicr.gsi.Pair;\n+import ca.on.oicr.gsi.status.SectionRenderer;\n+import ca.on.oicr.gsi.vidarr.BasicType;\n+import ca.on.oicr.gsi.vidarr.WorkMonitor;\n+import ca.on.oicr.gsi.vidarr.WorkflowEngine;\n+import ca.on.oicr.gsi.vidarr.WorkflowLanguage;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import javax.xml.stream.XMLStreamException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class NiassaWorkflowEngine implements WorkflowEngine {\n+    @Override\n+    public JsonNode cleanup(JsonNode cleanupState, WorkMonitor<Void, JsonNode> monitor) {\n+        monitor.scheduleTask(() -> monitor.complete(null));\n+        return null;\n+    }\n+\n+    @Override\n+    public void configuration(SectionRenderer sectionRenderer) throws XMLStreamException {\n+\n+    }\n+\n+    @Override\n+    public Optional<BasicType> engineParameters() {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public void recover(JsonNode state, WorkMonitor<Result<JsonNode>, JsonNode> monitor) {\n+        monitor.scheduleTask(() -> monitor.permanentFailure(null));\n+    }\n+\n+    @Override\n+    public void recoverCleanup(JsonNode state, WorkMonitor<Void, JsonNode> monitor) {\n+        // TODO ???\n+    }\n+\n+    @Override\n+    public JsonNode run(WorkflowLanguage workflowLanguage,\n+                        String workflow,\n+                        Stream<Pair<String, String>> accessoryFiles,\n+                        String vidarrId,\n+                        ObjectNode workflowParameters,\n+                        JsonNode engineParameters,\n+                        WorkMonitor<Result<JsonNode>, JsonNode> monitor) {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean supports(WorkflowLanguage language) {\n+        return language == WorkflowLanguage.NIASSA;\n+    }\n+}"
  },
  {
    "sha": "7d8d0837060f9f330cda60af9115d8925eefe6ba",
    "filename": "vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaWorkflowEngineProvider.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/oicr-gsi/vidarr/blob/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaWorkflowEngineProvider.java",
    "raw_url": "https://github.com/oicr-gsi/vidarr/raw/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaWorkflowEngineProvider.java",
    "contents_url": "https://api.github.com/repos/oicr-gsi/vidarr/contents/vidarr-niassa/src/main/java/ca/on/oicr/gsi/vidarr/niassa/NiassaWorkflowEngineProvider.java?ref=a2f883d0a22dc34fb88590095ebaa14792ccfcf9",
    "patch": "@@ -0,0 +1,17 @@\n+package ca.on.oicr.gsi.vidarr.niassa;\n+\n+import ca.on.oicr.gsi.vidarr.WorkflowEngine;\n+import ca.on.oicr.gsi.vidarr.WorkflowEngineProvider;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public class NiassaWorkflowEngineProvider implements WorkflowEngineProvider {\n+    @Override\n+    public WorkflowEngine readConfiguration(ObjectNode node) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String type() {\n+        return \"niassa\";\n+    }\n+}"
  },
  {
    "sha": "74b78999178d59dbd2a1a78dd193b98851f6cf3d",
    "filename": "vidarr-niassa/src/main/java/module-info.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/oicr-gsi/vidarr/blob/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/module-info.java",
    "raw_url": "https://github.com/oicr-gsi/vidarr/raw/a2f883d0a22dc34fb88590095ebaa14792ccfcf9/vidarr-niassa/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/oicr-gsi/vidarr/contents/vidarr-niassa/src/main/java/module-info.java?ref=a2f883d0a22dc34fb88590095ebaa14792ccfcf9",
    "patch": "@@ -0,0 +1,10 @@\n+import ca.on.oicr.gsi.vidarr.OutputProvisionerProvider;\n+import ca.on.oicr.gsi.vidarr.niassa.NiassaOutputProvisionerProvider;\n+\n+module ca.on.oicr.gsi.vidarr.niassa {\n+    requires ca.on.oicr.gsi.vidarr.pluginapi;\n+    requires java.xml;\n+    requires sshj;\n+\n+    provides OutputProvisionerProvider with NiassaOutputProvisionerProvider;\n+}"
  }
]
