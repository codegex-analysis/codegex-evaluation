[
  {
    "sha": "97ca7a2fc11aec344e2f0623474b298a48451654",
    "filename": ".circleci/config.yml",
    "status": "modified",
    "additions": 80,
    "deletions": 177,
    "changes": 257,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/.circleci/config.yml",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/.circleci/config.yml",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/.circleci/config.yml?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -2,11 +2,11 @@ version: 2\n jobs:\n   j8_jvm_upgrade_dtests:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 1\n+    parallelism: 2\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -93,11 +93,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_cqlsh-dtests-py2-with-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -170,11 +170,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j11_unit_tests:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -262,11 +262,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j8_cqlsh-dtests-py38-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -339,11 +339,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j11_cqlsh-dtests-py3-with-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -417,11 +417,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j11_cqlsh-dtests-py3-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -495,11 +495,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j11_cqlsh-dtests-py38-with-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -573,11 +573,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j8_cqlsh-dtests-py3-with-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -650,11 +650,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_cqlsh-dtests-py2-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -727,11 +727,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j11_cqlsh-dtests-py2-with-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -805,11 +805,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j11_dtests-with-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -886,11 +886,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j8_dtests-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -944,11 +944,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_upgradetests-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1002,8 +1002,8 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   utests_stress:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n     parallelism: 1\n@@ -1047,11 +1047,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_unit_tests:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1138,11 +1138,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j11_jvm_dtests:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 1\n+    parallelism: 2\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1230,7 +1230,7 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j11_build:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n     resource_class: medium\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n@@ -1311,11 +1311,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j11_cqlsh-dtests-py2-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1389,7 +1389,7 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j11_cqlshlib_tests:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n     resource_class: medium\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n@@ -1426,11 +1426,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j8_dtests-with-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1484,11 +1484,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j11_cqlsh-dtests-py38-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1562,11 +1562,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   j8_jvm_dtests:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 1\n+    parallelism: 5\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1653,7 +1653,7 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_build:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n     resource_class: medium\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n@@ -1733,11 +1733,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_cqlsh-dtests-py3-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1810,11 +1810,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_cqlsh-dtests-py38-with-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -1887,8 +1887,8 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   utests_long:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n     parallelism: 1\n@@ -1932,7 +1932,7 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_cqlshlib_tests:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n     resource_class: medium\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n@@ -1968,8 +1968,8 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   utests_fqltool:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n     parallelism: 1\n@@ -2013,11 +2013,11 @@ jobs:\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j11_dtests-no-vnodes:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -2094,11 +2094,11 @@ jobs:\n     - CASSANDRA_USE_JDK11: true\n   utests_compression:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n+    resource_class: xlarge\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n+    parallelism: 100\n     steps:\n     - attach_workspace:\n         at: /home/cassandra\n@@ -2183,100 +2183,9 @@ jobs:\n     - CCM_HEAP_NEWSIZE: 256M\n     - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n     - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n-  utests_system_keyspace_directory:\n-    docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n-    resource_class: medium\n-    working_directory: ~/\n-    shell: /bin/bash -eo pipefail -l\n-    parallelism: 4\n-    steps:\n-    - attach_workspace:\n-        at: /home/cassandra\n-    - run:\n-        name: Determine unit Tests to Run\n-        command: |\n-          # reminder: this code (along with all the steps) is independently executed on every circle container\n-          # so the goal here is to get the circleci script to return the tests *this* container will run\n-          # which we do via the `circleci` cli tool.\n-\n-          rm -fr ~/cassandra-dtest/upgrade_tests\n-          echo \"***java tests***\"\n-\n-          # get all of our unit test filenames\n-          set -eo pipefail && circleci tests glob \"$HOME/cassandra/test/unit/**/*.java\" > /tmp/all_java_unit_tests.txt\n-\n-          # split up the unit tests into groups based on the number of containers we have\n-          set -eo pipefail && circleci tests split --split-by=timings --timings-type=filename --index=${CIRCLE_NODE_INDEX} --total=${CIRCLE_NODE_TOTAL} /tmp/all_java_unit_tests.txt > /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt\n-          set -eo pipefail && cat /tmp/java_tests_${CIRCLE_NODE_INDEX}.txt | sed \"s;^/home/cassandra/cassandra/test/unit/;;g\" | grep \"Test\\.java$\"  > /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\n-          echo \"** /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\"\n-          cat /tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt\n-        no_output_timeout: 15m\n-    - run:\n-        name: Log Environment Information\n-        command: |\n-          echo '*** id ***'\n-          id\n-          echo '*** cat /proc/cpuinfo ***'\n-          cat /proc/cpuinfo\n-          echo '*** free -m ***'\n-          free -m\n-          echo '*** df -m ***'\n-          df -m\n-          echo '*** ifconfig -a ***'\n-          ifconfig -a\n-          echo '*** uname -a ***'\n-          uname -a\n-          echo '*** mount ***'\n-          mount\n-          echo '*** env ***'\n-          env\n-          echo '*** java ***'\n-          which java\n-          java -version\n-    - run:\n-        name: Run Unit Tests (testclasslist-system-keyspace-directory)\n-        command: |\n-          set -x\n-          export PATH=$JAVA_HOME/bin:$PATH\n-          time mv ~/cassandra /tmp\n-          cd /tmp/cassandra\n-          if [ -d ~/dtest_jars ]; then\n-            cp ~/dtest_jars/dtest* /tmp/cassandra/build/\n-          fi\n-          test_timeout=$(grep 'name=\"test.unit.timeout\"' build.xml | awk -F'\"' '{print $4}' || true)\n-          if [ -z \"$test_timeout\" ]; then\n-            test_timeout=$(grep 'name=\"test.timeout\"' build.xml | awk -F'\"' '{print $4}')\n-          fi\n-          ant testclasslist-system-keyspace-directory -Dtest.timeout=\"$test_timeout\" -Dtest.classlistfile=/tmp/java_tests_${CIRCLE_NODE_INDEX}_final.txt  -Dtest.classlistprefix=unit\n-        no_output_timeout: 15m\n-    - store_test_results:\n-        path: /tmp/cassandra/build/test/output/\n-    - store_artifacts:\n-        path: /tmp/cassandra/build/test/output\n-        destination: junitxml\n-    - store_artifacts:\n-        path: /tmp/cassandra/build/test/logs\n-        destination: logs\n-    environment:\n-    - ANT_HOME: /usr/share/ant\n-    - LANG: en_US.UTF-8\n-    - KEEP_TEST_DIR: true\n-    - DEFAULT_DIR: /home/cassandra/cassandra-dtest\n-    - PYTHONIOENCODING: utf-8\n-    - PYTHONUNBUFFERED: true\n-    - CASS_DRIVER_NO_EXTENSIONS: true\n-    - CASS_DRIVER_NO_CYTHON: true\n-    - CASSANDRA_SKIP_SYNC: true\n-    - DTEST_REPO: git://github.com/apache/cassandra-dtest.git\n-    - DTEST_BRANCH: master\n-    - CCM_MAX_HEAP_SIZE: 1024M\n-    - CCM_HEAP_NEWSIZE: 256M\n-    - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n-    - JDK_HOME: /usr/lib/jvm/java-8-openjdk-amd64\n   j8_dtest_jars_build:\n     docker:\n-    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210105\n+    - image: apache/cassandra-testing-ubuntu2004-java11-w-dependencies:20210304\n     resource_class: medium\n     working_directory: ~/\n     shell: /bin/bash -eo pipefail -l\n@@ -2380,12 +2289,6 @@ workflows:\n         requires:\n         - start_utests_compression\n         - j8_build\n-    - start_utests_system_keyspace_directory:\n-        type: approval\n-    - utests_system_keyspace_directory:\n-        requires:\n-        - start_utests_system_keyspace_directory\n-        - j8_build\n     - start_utests_stress:\n         type: approval\n     - utests_stress:"
  },
  {
    "sha": "6370760b374203f41f3807b69a7e2a22257b81f4",
    "filename": "CHANGES.txt",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/CHANGES.txt",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/CHANGES.txt",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/CHANGES.txt?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -1,4 +1,7 @@\n 4.0-beta5\n+ * Reinstate removed ApplicationState padding (CASSANDRA-16484)\n+ * Expose data dirs to ColumnFamilyStoreMBean (CASSANDRA-16335)\n+ * Add possibility to copy SSTables in SSTableImporter instead of moving them (CASSANDRA-16407)\n  * Fix DESCRIBE statement for CUSTOM indices with options (CASSANDRA-16482)\n  * Fix cassandra-stress JMX connection (CASSANDRA-16473)\n  * Avoid processing redundant application states on endpoint changes (CASSANDRA-16381)"
  },
  {
    "sha": "0cb71a4da7b79e8c6d218181a16d174e70540ee8",
    "filename": "debian/control",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/debian/control",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/debian/control",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/debian/control?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -11,7 +11,7 @@ Standards-Version: 3.8.3\n \n Package: cassandra\n Architecture: all\n-Depends: openjdk-8-jre-headless | java8-runtime, adduser, python3 (>= 3.6), ${misc:Depends}, ${python3:Depends}\n+Depends: openjdk-8-jre-headless | java8-runtime, adduser, python3 (>= 3.6), ${misc:Depends}\n Recommends: ntp | time-daemon\n Suggests: cassandra-tools\n Conflicts: apache-cassandra1"
  },
  {
    "sha": "895746d25a9d745aa5be9dc994c45b6ee8f5f3d6",
    "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -495,6 +495,17 @@ public Directories getDirectories()\n         return directories;\n     }\n \n+    public List<String> getDataPaths() throws IOException\n+    {\n+        List<String> dataPaths = new ArrayList<>();\n+        for (File dataPath : directories.getCFDirectories())\n+        {\n+            dataPaths.add(dataPath.getCanonicalPath());\n+        }\n+\n+        return dataPaths;\n+    }\n+\n     public SSTableMultiWriter createSSTableMultiWriter(Descriptor descriptor, long keyCount, long repairedAt, UUID pendingRepair, boolean isTransient, int sstableLevel, SerializationHeader header, LifecycleNewTracker lifecycleNewTracker)\n     {\n         MetadataCollector collector = new MetadataCollector(metadata().comparator).sstableLevel(sstableLevel);\n@@ -709,19 +720,25 @@ public void loadNewSSTables()\n     /**\n      * #{@inheritDoc}\n      */\n-    public synchronized List<String> importNewSSTables(Set<String> srcPaths, boolean resetLevel, boolean clearRepaired, boolean verifySSTables, boolean verifyTokens, boolean invalidateCaches, boolean extendedVerify)\n+    public synchronized List<String> importNewSSTables(Set<String> srcPaths, boolean resetLevel, boolean clearRepaired, boolean verifySSTables, boolean verifyTokens, boolean invalidateCaches, boolean extendedVerify, boolean copyData)\n     {\n         SSTableImporter.Options options = SSTableImporter.Options.options(srcPaths)\n                                                                  .resetLevel(resetLevel)\n                                                                  .clearRepaired(clearRepaired)\n                                                                  .verifySSTables(verifySSTables)\n                                                                  .verifyTokens(verifyTokens)\n                                                                  .invalidateCaches(invalidateCaches)\n-                                                                 .extendedVerify(extendedVerify).build();\n+                                                                 .extendedVerify(extendedVerify)\n+                                                                 .copyData(copyData).build();\n \n         return sstableImporter.importNewSSTables(options);\n     }\n \n+    public List<String> importNewSSTables(Set<String> srcPaths, boolean resetLevel, boolean clearRepaired, boolean verifySSTables, boolean verifyTokens, boolean invalidateCaches, boolean extendedVerify)\n+    {\n+        return importNewSSTables(srcPaths, resetLevel, clearRepaired, verifySSTables, verifyTokens, invalidateCaches, extendedVerify, false);\n+    }\n+\n     Descriptor getUniqueDescriptorFor(Descriptor descriptor, File targetDirectory)\n     {\n         Descriptor newDescriptor;"
  },
  {
    "sha": "0360e344d16abcc7dd69d635f4022319978db2a9",
    "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java",
    "status": "modified",
    "additions": 28,
    "deletions": 2,
    "changes": 30,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -17,6 +17,7 @@\n  */\n package org.apache.cassandra.db;\n \n+import java.io.IOException;\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n@@ -152,18 +153,41 @@\n      * @param verifySSTables if the new sstables should be verified that they are not corrupt\n      * @param verifyTokens if the tokens in the new sstables should be verified that they are owned by the current node\n      * @param invalidateCaches if row cache should be invalidated for the keys in the new sstables\n-     * @param jbodCheck if the new sstables should be placed 'optimally' - count tokens and move the sstable to the directory where it has the most keys\n      * @param extendedVerify if we should run an extended verify checking all values in the new sstables\n      *\n      * @return list of failed import directories\n      */\n+    @Deprecated\n+    public List<String> importNewSSTables(Set<String> srcPaths,\n+                                           boolean resetLevel,\n+                                           boolean clearRepaired,\n+                                           boolean verifySSTables,\n+                                           boolean verifyTokens,\n+                                           boolean invalidateCaches,\n+                                           boolean extendedVerify);\n+\n+    /**\n+     * Load new sstables from the given directory\n+     *\n+     * @param srcPaths the path to the new sstables - if it is an empty set, the data directories will be scanned\n+     * @param resetLevel if the level should be reset to 0 on the new sstables\n+     * @param clearRepaired if repaired info should be wiped from the new sstables\n+     * @param verifySSTables if the new sstables should be verified that they are not corrupt\n+     * @param verifyTokens if the tokens in the new sstables should be verified that they are owned by the current node\n+     * @param invalidateCaches if row cache should be invalidated for the keys in the new sstables\n+     * @param extendedVerify if we should run an extended verify checking all values in the new sstables\n+     * @param copyData if we should copy data from source paths instead of moving them\n+     *\n+     * @return list of failed import directories\n+     */\n     public List<String> importNewSSTables(Set<String> srcPaths,\n                                           boolean resetLevel,\n                                           boolean clearRepaired,\n                                           boolean verifySSTables,\n                                           boolean verifyTokens,\n                                           boolean invalidateCaches,\n-                                          boolean extendedVerify);\n+                                          boolean extendedVerify,\n+                                          boolean copyData);\n \n     @Deprecated\n     public void loadNewSSTables();\n@@ -225,4 +249,6 @@\n      *         If all SSTables are correctly placed or the partitioner does not support splitting, it returns false.\n      */\n     public boolean hasMisplacedSSTables();\n+\n+    public List<String> getDataPaths() throws IOException;\n }"
  },
  {
    "sha": "989ff12297a7738294ef146b7982bb724f405e52",
    "filename": "src/java/org/apache/cassandra/db/SSTableImporter.java",
    "status": "modified",
    "additions": 40,
    "deletions": 7,
    "changes": 47,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/db/SSTableImporter.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/db/SSTableImporter.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/db/SSTableImporter.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -20,7 +20,6 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -40,9 +39,7 @@\n import org.apache.cassandra.io.sstable.KeyIterator;\n import org.apache.cassandra.io.sstable.format.SSTableReader;\n import org.apache.cassandra.io.sstable.format.SSTableWriter;\n-import org.apache.cassandra.io.util.RandomAccessReader;\n import org.apache.cassandra.service.ActiveRepairService;\n-import org.apache.cassandra.utils.ByteBufferUtil;\n import org.apache.cassandra.utils.Pair;\n import org.apache.cassandra.utils.concurrent.Refs;\n \n@@ -139,7 +136,7 @@ public SSTableImporter(ColumnFamilyStore cfs)\n                     Descriptor newDescriptor = cfs.getUniqueDescriptorFor(entry.getKey(), targetDir);\n                     maybeMutateMetadata(entry.getKey(), options);\n                     movedSSTables.add(new MovedSSTable(newDescriptor, entry.getKey(), entry.getValue()));\n-                    SSTableReader sstable = SSTableReader.moveAndOpenSSTable(cfs, entry.getKey(), newDescriptor, entry.getValue());\n+                    SSTableReader sstable = SSTableReader.moveAndOpenSSTable(cfs, entry.getKey(), newDescriptor, entry.getValue(), options.copyData);\n                     newSSTablesPerDirectory.add(sstable);\n                 }\n                 catch (Throwable t)\n@@ -149,7 +146,14 @@ public SSTableImporter(ColumnFamilyStore cfs)\n                     {\n                         logger.error(\"Failed importing sstables in directory {}\", dir, t);\n                         failedDirectories.add(dir);\n-                        moveSSTablesBack(movedSSTables);\n+                        if (options.copyData)\n+                        {\n+                            removeCopiedSSTables(movedSSTables);\n+                        }\n+                        else\n+                        {\n+                            moveSSTablesBack(movedSSTables);\n+                        }\n                         movedSSTables.clear();\n                         newSSTablesPerDirectory.clear();\n                         break;\n@@ -284,6 +288,25 @@ private void moveSSTablesBack(Set<MovedSSTable> movedSSTables)\n         }\n     }\n \n+    /**\n+     * Similarly for moving case, we need to delete all SSTables which were copied already but the\n+     * copying as a whole has failed so we do not leave any traces behind such failed import.\n+     *\n+     * @param movedSSTables tables we have moved already (by copying) which need to be removed\n+     */\n+    private void removeCopiedSSTables(Set<MovedSSTable> movedSSTables)\n+    {\n+        logger.debug(\"Removing copied SSTables which were left in data directories after failed SSTable import.\");\n+        for (MovedSSTable movedSSTable : movedSSTables)\n+        {\n+            if (new File(movedSSTable.newDescriptor.filenameFor(Component.DATA)).exists())\n+            {\n+                // no logging here as for moveSSTablesBack case above as logging is done in delete method\n+                SSTableWriter.delete(movedSSTable.newDescriptor, movedSSTable.components);\n+            }\n+        }\n+    }\n+\n     /**\n      * Iterates over all keys in the sstable index and invalidates the row cache\n      */\n@@ -365,8 +388,9 @@ private void maybeMutateMetadata(Descriptor descriptor, Options options) throws\n         private final boolean verifyTokens;\n         private final boolean invalidateCaches;\n         private final boolean extendedVerify;\n+        private final boolean copyData;\n \n-        public Options(Set<String> srcPaths, boolean resetLevel, boolean clearRepaired, boolean verifySSTables, boolean verifyTokens, boolean invalidateCaches, boolean extendedVerify)\n+        public Options(Set<String> srcPaths, boolean resetLevel, boolean clearRepaired, boolean verifySSTables, boolean verifyTokens, boolean invalidateCaches, boolean extendedVerify, boolean copyData)\n         {\n             this.srcPaths = srcPaths;\n             this.resetLevel = resetLevel;\n@@ -375,6 +399,7 @@ public Options(Set<String> srcPaths, boolean resetLevel, boolean clearRepaired,\n             this.verifyTokens = verifyTokens;\n             this.invalidateCaches = invalidateCaches;\n             this.extendedVerify = extendedVerify;\n+            this.copyData = copyData;\n         }\n \n         public static Builder options(String srcDir)\n@@ -403,6 +428,7 @@ public String toString()\n                    \", verifyTokens=\" + verifyTokens +\n                    \", invalidateCaches=\" + invalidateCaches +\n                    \", extendedVerify=\" + extendedVerify +\n+                   \", copyData= \" + copyData +\n                    '}';\n         }\n \n@@ -415,6 +441,7 @@ public String toString()\n             private boolean verifyTokens = false;\n             private boolean invalidateCaches = false;\n             private boolean extendedVerify = false;\n+            private boolean copyData = false;\n \n             private Builder(Set<String> srcPath)\n             {\n@@ -458,9 +485,15 @@ public Builder extendedVerify(boolean value)\n                 return this;\n             }\n \n+            public Builder copyData(boolean value)\n+            {\n+                copyData = value;\n+                return this;\n+            }\n+\n             public Options build()\n             {\n-                return new Options(srcPaths, resetLevel, clearRepaired, verifySSTables, verifyTokens, invalidateCaches, extendedVerify);\n+                return new Options(srcPaths, resetLevel, clearRepaired, verifySSTables, verifyTokens, invalidateCaches, extendedVerify, copyData);\n             }\n         }\n     }"
  },
  {
    "sha": "d31f50cef4dc19bdd9db952cee5d5e7f4ca2c02f",
    "filename": "src/java/org/apache/cassandra/gms/ApplicationState.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/gms/ApplicationState.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/gms/ApplicationState.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/gms/ApplicationState.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -19,6 +19,7 @@\n \n public enum ApplicationState\n {\n+    // never remove a state here, ordering matters.\n     @Deprecated STATUS, //Deprecated and unsued in 4.0, stop publishing in 5.0, reclaim in 6.0\n     LOAD,\n     SCHEMA,\n@@ -38,6 +39,9 @@\n     INTERNAL_ADDRESS_AND_PORT, //Replacement for INTERNAL_IP with up to two ports\n     NATIVE_ADDRESS_AND_PORT, //Replacement for RPC_ADDRESS\n     STATUS_WITH_PORT, //Replacement for STATUS\n+    // DO NOT EDIT OR REMOVE PADDING STATES BELOW - only add new states above.  See CASSANDRA-16484\n+    X1,\n+    X2,\n     X3,\n     X4,\n     X5,"
  },
  {
    "sha": "652d9c0e5b9e2722b3b6d4d1ff619170c4ec8073",
    "filename": "src/java/org/apache/cassandra/io/sstable/format/SSTableReader.java",
    "status": "modified",
    "additions": 20,
    "deletions": 3,
    "changes": 23,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/io/sstable/format/SSTableReader.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/io/sstable/format/SSTableReader.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/io/sstable/format/SSTableReader.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -55,6 +55,7 @@\n import org.apache.cassandra.exceptions.UnknownColumnException;\n import org.apache.cassandra.io.FSError;\n import org.apache.cassandra.io.FSReadError;\n+import org.apache.cassandra.io.FSWriteError;\n import org.apache.cassandra.io.compress.CompressionMetadata;\n import org.apache.cassandra.io.sstable.*;\n import org.apache.cassandra.io.sstable.metadata.*;\n@@ -2254,7 +2255,7 @@ public final boolean equals(Object o)\n      *\n      * All components given will be moved/renamed\n      */\n-    public static SSTableReader moveAndOpenSSTable(ColumnFamilyStore cfs, Descriptor oldDescriptor, Descriptor newDescriptor, Set<Component> components)\n+    public static SSTableReader moveAndOpenSSTable(ColumnFamilyStore cfs, Descriptor oldDescriptor, Descriptor newDescriptor, Set<Component> components, boolean copyData)\n     {\n         if (!oldDescriptor.isCompatible())\n             throw new RuntimeException(String.format(\"Can't open incompatible SSTable! Current version %s, found file: %s\",\n@@ -2276,8 +2277,24 @@ public static SSTableReader moveAndOpenSSTable(ColumnFamilyStore cfs, Descriptor\n             throw new RuntimeException(msg);\n         }\n \n-        logger.info(\"Renaming new SSTable {} to {}\", oldDescriptor, newDescriptor);\n-        SSTableWriter.rename(oldDescriptor, newDescriptor, components);\n+        if (copyData)\n+        {\n+            try\n+            {\n+                logger.info(\"Hardlinking new SSTable {} to {}\", oldDescriptor, newDescriptor);\n+                SSTableWriter.hardlink(oldDescriptor, newDescriptor, components);\n+            }\n+            catch (FSWriteError ex)\n+            {\n+                logger.warn(\"Unable to hardlink new SSTable {} to {}, falling back to copying\", oldDescriptor, newDescriptor, ex);\n+                SSTableWriter.copy(oldDescriptor, newDescriptor, components);\n+            }\n+        }\n+        else\n+        {\n+            logger.info(\"Moving new SSTable {} to {}\", oldDescriptor, newDescriptor);\n+            SSTableWriter.rename(oldDescriptor, newDescriptor, components);\n+        }\n \n         SSTableReader reader;\n         try"
  },
  {
    "sha": "cce5378f3c54897b81d8cd2793b75dbaa7a6faaf",
    "filename": "src/java/org/apache/cassandra/io/sstable/format/SSTableWriter.java",
    "status": "modified",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/io/sstable/format/SSTableWriter.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/io/sstable/format/SSTableWriter.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/io/sstable/format/SSTableWriter.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -344,6 +344,33 @@ public static void rename(Descriptor tmpdesc, Descriptor newdesc, Set<Component>\n         FileUtils.renameWithOutConfirm(tmpdesc.filenameFor(Component.SUMMARY), newdesc.filenameFor(Component.SUMMARY));\n     }\n \n+    public static void copy(Descriptor tmpdesc, Descriptor newdesc, Set<Component> components)\n+    {\n+        for (Component component : Sets.difference(components, Sets.newHashSet(Component.DATA, Component.SUMMARY)))\n+        {\n+            FileUtils.copyWithConfirm(tmpdesc.filenameFor(component), newdesc.filenameFor(component));\n+        }\n+\n+        // do -Data last because -Data present should mean the sstable was completely copied before crash\n+        FileUtils.copyWithConfirm(tmpdesc.filenameFor(Component.DATA), newdesc.filenameFor(Component.DATA));\n+\n+        // copy it without confirmation because summary can be available for loadNewSSTables but not for closeAndOpenReader\n+        FileUtils.copyWithOutConfirm(tmpdesc.filenameFor(Component.SUMMARY), newdesc.filenameFor(Component.SUMMARY));\n+    }\n+\n+    public static void hardlink(Descriptor tmpdesc, Descriptor newdesc, Set<Component> components)\n+    {\n+        for (Component component : Sets.difference(components, Sets.newHashSet(Component.DATA, Component.SUMMARY)))\n+        {\n+            FileUtils.createHardLinkWithConfirm(tmpdesc.filenameFor(component), newdesc.filenameFor(component));\n+        }\n+\n+        // do -Data last because -Data present should mean the sstable was completely copied before crash\n+        FileUtils.createHardLinkWithConfirm(tmpdesc.filenameFor(Component.DATA), newdesc.filenameFor(Component.DATA));\n+\n+        // copy it without confirmation because summary can be available for loadNewSSTables but not for closeAndOpenReader\n+        FileUtils.createHardLinkWithoutConfirm(tmpdesc.filenameFor(Component.SUMMARY), newdesc.filenameFor(Component.SUMMARY));\n+    }\n \n     public static abstract class Factory\n     {"
  },
  {
    "sha": "7798bd785d4d54c13b295359f2bd4718ff36e731",
    "filename": "src/java/org/apache/cassandra/io/util/FileUtils.java",
    "status": "modified",
    "additions": 92,
    "deletions": 23,
    "changes": 115,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/io/util/FileUtils.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/io/util/FileUtils.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/io/util/FileUtils.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -114,28 +114,6 @@\n         }\n     }\n \n-    public static void createHardLink(String from, String to)\n-    {\n-        createHardLink(new File(from), new File(to));\n-    }\n-\n-    public static void createHardLink(File from, File to)\n-    {\n-        if (to.exists())\n-            throw new RuntimeException(\"Tried to create duplicate hard link to \" + to);\n-        if (!from.exists())\n-            throw new RuntimeException(\"Tried to hard link to file that does not exist \" + from);\n-\n-        try\n-        {\n-            Files.createLink(to.toPath(), from.toPath());\n-        }\n-        catch (IOException e)\n-        {\n-            throw new FSWriteError(e, to);\n-        }\n-    }\n-\n     private static final File tempDir = new File(JAVA_IO_TMPDIR.getString());\n     private static final AtomicLong tempFileNum = new AtomicLong();\n \n@@ -193,6 +171,62 @@ public static File createDeletableTempFile(String prefix, String suffix)\n         return f;\n     }\n \n+    public static void createHardLink(String from, String to)\n+    {\n+        createHardLink(new File(from), new File(to));\n+    }\n+\n+    public static void createHardLink(File from, File to)\n+    {\n+        if (to.exists())\n+            throw new RuntimeException(\"Tried to create duplicate hard link to \" + to);\n+        if (!from.exists())\n+            throw new RuntimeException(\"Tried to hard link to file that does not exist \" + from);\n+\n+        try\n+        {\n+            Files.createLink(to.toPath(), from.toPath());\n+        }\n+        catch (IOException e)\n+        {\n+            throw new FSWriteError(e, to);\n+        }\n+    }\n+\n+    public static void createHardLinkWithConfirm(File from, File to)\n+    {\n+        try\n+        {\n+            createHardLink(from, to);\n+        }\n+        catch (FSWriteError ex)\n+        {\n+            throw ex;\n+        }\n+        catch (Throwable t)\n+        {\n+            throw new RuntimeException(String.format(\"Unable to hardlink from %s to %s\", from, to), t);\n+        }\n+    }\n+\n+    public static void createHardLinkWithConfirm(String from, String to)\n+    {\n+        createHardLinkWithConfirm(new File(from), new File(to));\n+    }\n+\n+    public static void createHardLinkWithoutConfirm(String from, String to)\n+    {\n+        try\n+        {\n+            createHardLink(new File(from), new File(to));\n+        }\n+        catch (FSWriteError fse)\n+        {\n+            if (logger.isTraceEnabled())\n+                logger.trace(\"Could not hardlink file \" + from + \" to \" + to, fse);\n+        }\n+    }\n+\n     public static Throwable deleteWithConfirm(String filePath, Throwable accumulate)\n     {\n         return deleteWithConfirm(new File(filePath), accumulate, null);\n@@ -244,6 +278,40 @@ public static void deleteWithConfirmWithThrottle(File file, RateLimiter rateLimi\n         maybeFail(deleteWithConfirm(file, null, rateLimiter));\n     }\n \n+    public static void copyWithOutConfirm(String from, String to)\n+    {\n+        try\n+        {\n+            Files.copy(Paths.get(from), Paths.get(to));\n+        }\n+        catch (IOException e)\n+        {\n+            if (logger.isTraceEnabled())\n+                logger.trace(\"Could not copy file\" + from + \" to \" + to, e);\n+        }\n+    }\n+\n+    public static void copyWithConfirm(String from, String to)\n+    {\n+        copyWithConfirm(new File(from), new File(to));\n+    }\n+\n+    public static void copyWithConfirm(File from, File to)\n+    {\n+        assert from.exists();\n+        if (logger.isTraceEnabled())\n+            logger.trace(\"Copying {} to {}\", from.getPath(), to.getPath());\n+\n+        try\n+        {\n+            Files.copy(from.toPath(), to.toPath());\n+        }\n+        catch (IOException e)\n+        {\n+            throw new FSWriteError(e, \"Could not copy file\" + from + \" to \" + to);\n+        }\n+    }\n+\n     public static void renameWithOutConfirm(String from, String to)\n     {\n         try\n@@ -298,6 +366,7 @@ private static void atomicMoveWithFallback(Path from, Path to) throws IOExceptio\n         }\n \n     }\n+\n     public static void truncate(String path, long size)\n     {\n         try(FileChannel channel = FileChannel.open(Paths.get(path), StandardOpenOption.READ, StandardOpenOption.WRITE))\n@@ -899,7 +968,7 @@ private FileUtils()\n      * signed long (2^63-1), if the filesystem is any bigger, then the size overflows. {@code SafeFileStore} will\n      * return {@code Long.MAX_VALUE} if the size overflow.</p>\n      *\n-     * @see https://bugs.openjdk.java.net/browse/JDK-8162520.\n+     * @see <a href=\"https://bugs.openjdk.java.net/browse/JDK-8162520\">JDK-8162520</a>.\n      */\n     private static final class SafeFileStore extends FileStore\n     {"
  },
  {
    "sha": "605edba16fe3a26c05d64e5b0bd68ac7ab82a9c6",
    "filename": "src/java/org/apache/cassandra/tools/NodeProbe.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/tools/NodeProbe.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/tools/NodeProbe.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/tools/NodeProbe.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -1216,9 +1216,9 @@ public void loadNewSSTables(String ksName, String cfName)\n         ssProxy.loadNewSSTables(ksName, cfName);\n     }\n \n-    public List<String> importNewSSTables(String ksName, String cfName, Set<String> srcPaths, boolean resetLevel, boolean clearRepaired, boolean verifySSTables, boolean verifyTokens, boolean invalidateCaches, boolean extendedVerify)\n+    public List<String> importNewSSTables(String ksName, String cfName, Set<String> srcPaths, boolean resetLevel, boolean clearRepaired, boolean verifySSTables, boolean verifyTokens, boolean invalidateCaches, boolean extendedVerify, boolean copyData)\n     {\n-        return getCfsProxy(ksName, cfName).importNewSSTables(srcPaths, resetLevel, clearRepaired, verifySSTables, verifyTokens, invalidateCaches, extendedVerify);\n+        return getCfsProxy(ksName, cfName).importNewSSTables(srcPaths, resetLevel, clearRepaired, verifySSTables, verifyTokens, invalidateCaches, extendedVerify, copyData);\n     }\n \n     public void rebuildIndex(String ksName, String cfName, String... idxNames)"
  },
  {
    "sha": "73fa3144bbd8825f39e2363cc58f64699d400ba7",
    "filename": "src/java/org/apache/cassandra/tools/nodetool/Import.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/tools/nodetool/Import.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/src/java/org/apache/cassandra/tools/nodetool/Import.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/src/java/org/apache/cassandra/tools/nodetool/Import.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -75,6 +75,11 @@\n             description = \"Run an extended verify, verifying all values in the new sstables\")\n     private boolean extendedVerify = false;\n \n+    @Option(title = \"copy_data\",\n+            name = {\"-p\", \"--copy-data\"},\n+            description = \"Copy data from source directories instead of moving them\")\n+    private boolean copyData = false;\n+\n     @Override\n     public void execute(NodeProbe probe)\n     {\n@@ -89,7 +94,7 @@ public void execute(NodeProbe probe)\n             extendedVerify = false;\n         }\n         List<String> srcPaths = Lists.newArrayList(args.subList(2, args.size()));\n-        List<String> failedDirs = probe.importNewSSTables(args.get(0), args.get(1), new HashSet<>(srcPaths), !keepLevel, !keepRepaired, !noVerify, !noVerifyTokens, !noInvalidateCaches, extendedVerify);\n+        List<String> failedDirs = probe.importNewSSTables(args.get(0), args.get(1), new HashSet<>(srcPaths), !keepLevel, !keepRepaired, !noVerify, !noVerifyTokens, !noInvalidateCaches, extendedVerify, copyData);\n         if (!failedDirs.isEmpty())\n         {\n             PrintStream err = probe.output().err;"
  },
  {
    "sha": "48ef580dd476624c72f61f7913761ab2ec100f26",
    "filename": "test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -22,8 +22,11 @@\n import java.io.FileReader;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.*;\n \n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Assume;\n import org.junit.BeforeClass;\n@@ -458,6 +461,22 @@ public void testSnapshotWithoutFlushWithSecondaryIndexes() throws Exception\n         assert indexTableFile.endsWith(baseTableFile);\n     }\n \n+    @Test\n+    public void testDataDirectoriesOfColumnFamily() throws Exception\n+    {\n+        ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);\n+        List<String> dataPaths = cfs.getDataPaths();\n+        Assert.assertFalse(dataPaths.isEmpty());\n+\n+        Path path = Paths.get(dataPaths.get(0));\n+\n+        String keyspace = path.getParent().getFileName().toString();\n+        String table = path.getFileName().toString().split(\"-\")[0];\n+\n+        Assert.assertEquals(cfs.getTableName(), table);\n+        Assert.assertEquals(KEYSPACE1, keyspace);\n+    }\n+\n     @Test\n     public void testScrubDataDirectories() throws Throwable\n     {"
  },
  {
    "sha": "c0c3799b858b1ba390dd8e5ed0b084132566fbc7",
    "filename": "test/unit/org/apache/cassandra/db/ImportTest.java",
    "status": "modified",
    "additions": 60,
    "deletions": 17,
    "changes": 77,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/test/unit/org/apache/cassandra/db/ImportTest.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/test/unit/org/apache/cassandra/db/ImportTest.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/test/unit/org/apache/cassandra/db/ImportTest.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -23,28 +23,23 @@\n import java.io.RandomAccessFile;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Random;\n import java.util.Set;\n \n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n-import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import org.apache.cassandra.cache.RowCacheKey;\n import org.apache.cassandra.cql3.CQLTester;\n import org.apache.cassandra.cql3.UntypedResultSet;\n import org.apache.cassandra.db.lifecycle.LifecycleTransaction;\n import org.apache.cassandra.dht.BootStrapper;\n-import org.apache.cassandra.dht.Murmur3Partitioner;\n-import org.apache.cassandra.dht.Token;\n import org.apache.cassandra.io.sstable.Component;\n import org.apache.cassandra.io.sstable.format.SSTableReader;\n import org.apache.cassandra.locator.InetAddressAndPort;\n@@ -53,32 +48,60 @@\n import org.apache.cassandra.service.StorageService;\n import org.apache.cassandra.utils.FBUtilities;\n \n-import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n public class ImportTest extends CQLTester\n {\n+\n+    @Test\n+    public void basicImportByMovingTest() throws Throwable\n+    {\n+        File backupDir = prepareBasicImporting();\n+        // copy is false - so importing will be done by moving\n+        importSSTables(SSTableImporter.Options.options(backupDir.toString()).copyData(false).build(), 10);\n+        // files were moved\n+        Assert.assertEquals(0, countFiles(backupDir));\n+    }\n+\n     @Test\n-    public void basicImportTest() throws Throwable\n+    public void basicImportByCopyingTest() throws Throwable\n+    {\n+        File backupDir = prepareBasicImporting();\n+        // copy is true - so importing will be done by copying\n+        importSSTables(SSTableImporter.Options.options(backupDir.toString()).copyData(true).build(), 10);\n+        // files are left there as they were just copied\n+        Assert.assertNotEquals(0, countFiles(backupDir));\n+    }\n+\n+    private File prepareBasicImporting() throws Throwable\n     {\n         createTable(\"create table %s (id int primary key, d int)\");\n+\n+\n         for (int i = 0; i < 10; i++)\n+        {\n             execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n+        }\n+\n         getCurrentColumnFamilyStore().forceBlockingFlush();\n+\n         Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n         getCurrentColumnFamilyStore().clearUnsafe();\n \n         File backupdir = moveToBackupDir(sstables);\n \n         assertEquals(0, execute(\"select * from %s\").size());\n \n-        SSTableImporter.Options options = SSTableImporter.Options.options(backupdir.toString()).build();\n-        SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n-        importer.importNewSSTables(options);\n+        return backupdir;\n+    }\n \n-        assertEquals(10, execute(\"select * from %s\").size());\n+    private List<String> importSSTables(SSTableImporter.Options options, int expectedRows) throws Throwable {\n+        SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n+        List<String> failedDirectories = importer.importNewSSTables(options);\n+        assertEquals(expectedRows, execute(\"select * from %s\").size());\n+        return failedDirectories;\n     }\n \n     @Test\n@@ -276,7 +299,7 @@ public void testGetCorrectDirectory() throws Throwable\n             sstable.selfRef().release();\n     }\n \n-    private void testCorruptHelper(boolean verify) throws Throwable\n+    private void testCorruptHelper(boolean verify, boolean copy) throws Throwable\n     {\n         createTable(\"create table %s (id int primary key, d int)\");\n         for (int i = 0; i < 10; i++)\n@@ -312,7 +335,7 @@ private void testCorruptHelper(boolean verify) throws Throwable\n         // first we moved out 2 sstables, one correct and one corrupt in to a single directory (backupdir)\n         // then we moved out 1 sstable, a correct one (in backupdirCorrect).\n         // now import should fail import on backupdir, but import the one in backupdirCorrect.\n-        SSTableImporter.Options options = SSTableImporter.Options.options(Sets.newHashSet(backupdir.toString(), backupdirCorrect.toString())).verifySSTables(verify).build();\n+        SSTableImporter.Options options = SSTableImporter.Options.options(Sets.newHashSet(backupdir.toString(), backupdirCorrect.toString())).copyData(copy).verifySSTables(verify).build();\n         SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n         List<String> failedDirectories = importer.importNewSSTables(options);\n         assertEquals(Collections.singletonList(backupdir.toString()), failedDirectories);\n@@ -324,7 +347,15 @@ private void testCorruptHelper(boolean verify) throws Throwable\n         }\n         assertEquals(\"Data dir should contain one file\", 1, countFiles(getCurrentColumnFamilyStore().getDirectories().getDirectoryForNewSSTables()));\n         assertEquals(\"backupdir contained 2 files before import, should still contain 2 after failing to import it\", beforeImport, Sets.newHashSet(backupdir.listFiles()));\n-        assertEquals(\"backupdirCorrect contained 1 file before import, should be empty after import\", 0, countFiles(backupdirCorrect));\n+        if (copy)\n+        {\n+            assertEquals(\"backupdirCorrect contained 1 file before import, should contain 1 after import too\", 1, countFiles(backupdirCorrect));\n+        }\n+        else\n+        {\n+            assertEquals(\"backupdirCorrect contained 1 file before import, should be empty after import\", 0, countFiles(backupdirCorrect));\n+        }\n+\n     }\n \n     private int countFiles(File dir)\n@@ -344,13 +375,25 @@ private int countFiles(File dir)\n     @Test\n     public void testImportCorrupt() throws Throwable\n     {\n-        testCorruptHelper(true);\n+        testCorruptHelper(true, false);\n+    }\n+\n+    @Test\n+    public void testImportCorruptWithCopying() throws Throwable\n+    {\n+        testCorruptHelper(true, true);\n     }\n \n     @Test\n     public void testImportCorruptWithoutValidation() throws Throwable\n     {\n-        testCorruptHelper(false);\n+        testCorruptHelper(false, false);\n+    }\n+\n+    @Test\n+    public void testImportCorruptWithoutValidationWithCopying() throws Throwable\n+    {\n+        testCorruptHelper(false, true);\n     }\n \n     @Test"
  },
  {
    "sha": "c7abb44f74cb3a85b0ffb45f6597c101ddcd39bc",
    "filename": "test/unit/org/apache/cassandra/gms/GossiperTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/test/unit/org/apache/cassandra/gms/GossiperTest.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/test/unit/org/apache/cassandra/gms/GossiperTest.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/test/unit/org/apache/cassandra/gms/GossiperTest.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -81,6 +81,22 @@ public void tearDown()\n         DatabaseDescriptor.setSeedProvider(originalSeedProvider);\n     }\n \n+    @Test\n+    public void testPaddingIntact() throws Exception\n+    {\n+        // sanity check that all 10 pads still exist\n+        assert ApplicationState.X1 == ApplicationState.X1;\n+        assert ApplicationState.X2 == ApplicationState.X2;\n+        assert ApplicationState.X3 == ApplicationState.X3;\n+        assert ApplicationState.X4 == ApplicationState.X4;\n+        assert ApplicationState.X5 == ApplicationState.X5;\n+        assert ApplicationState.X6 == ApplicationState.X6;\n+        assert ApplicationState.X7 == ApplicationState.X7;\n+        assert ApplicationState.X8 == ApplicationState.X8;\n+        assert ApplicationState.X9 == ApplicationState.X9;\n+        assert ApplicationState.X10 == ApplicationState.X10;\n+    }\n+\n     @Test\n     public void testHasVersion3Nodes() throws Exception\n     {"
  },
  {
    "sha": "0b64028c4d725ebbe833e2bb0e2fa566af378a77",
    "filename": "test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/aholmberg/cassandra/blob/209b71061ebced447c55ece2726407f1df0cde03/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java",
    "raw_url": "https://github.com/aholmberg/cassandra/raw/209b71061ebced447c55ece2726407f1df0cde03/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java",
    "contents_url": "https://api.github.com/repos/aholmberg/cassandra/contents/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java?ref=209b71061ebced447c55ece2726407f1df0cde03",
    "patch": "@@ -707,7 +707,7 @@ public void testMoveAndOpenLiveSSTable()\n         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(\"Standard1\");\n         SSTableReader sstable = getNewSSTable(cfs);\n         Descriptor notLiveDesc = new Descriptor(new File(\"/tmp\"), \"\", \"\", 0);\n-        SSTableReader.moveAndOpenSSTable(cfs, sstable.descriptor, notLiveDesc, sstable.components);\n+        SSTableReader.moveAndOpenSSTable(cfs, sstable.descriptor, notLiveDesc, sstable.components, false);\n     }\n \n     @Test(expected = RuntimeException.class)\n@@ -717,7 +717,7 @@ public void testMoveAndOpenLiveSSTable2()\n         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(\"Standard1\");\n         SSTableReader sstable = getNewSSTable(cfs);\n         Descriptor notLiveDesc = new Descriptor(new File(\"/tmp\"), \"\", \"\", 0);\n-        SSTableReader.moveAndOpenSSTable(cfs, notLiveDesc, sstable.descriptor, sstable.components);\n+        SSTableReader.moveAndOpenSSTable(cfs, notLiveDesc, sstable.descriptor, sstable.components, false);\n     }\n \n     @Test\n@@ -738,7 +738,7 @@ public void testMoveAndOpenSSTable() throws IOException\n             assertFalse(f.exists());\n             assertTrue(new File(sstable.descriptor.filenameFor(c)).exists());\n         }\n-        SSTableReader.moveAndOpenSSTable(cfs, sstable.descriptor, notLiveDesc, sstable.components);\n+        SSTableReader.moveAndOpenSSTable(cfs, sstable.descriptor, notLiveDesc, sstable.components, false);\n         // make sure the files were moved:\n         for (Component c : sstable.components)\n         {"
  }
]
