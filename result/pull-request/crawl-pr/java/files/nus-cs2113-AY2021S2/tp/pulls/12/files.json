[
  {
    "sha": "5a3bed0a0165342ddee4a62e9f66bc556ecb33f1",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/.gitignore",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/.gitignore",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/.gitignore?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -15,3 +15,5 @@ bin/\n \n /text-ui-test/ACTUAL.txt\n text-ui-test/EXPECTED-UNIX.TXT\n+duke.txt\n+data/DrugsInventoryList.txt"
  },
  {
    "sha": "e96b02b74ccce0dcfaf464dd9c315e3a793aaac2",
    "filename": "README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/README.md",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/README.md",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/README.md?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -9,6 +9,7 @@ Prerequisites: JDK 11 (use the exact version), update Intellij to the most recen\n 1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html).\n 1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html).\n 1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:\n+1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/drugsDuke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:\n    ```\n    > Task :compileJava\n    > Task :processResources NO-SOURCE\n@@ -40,6 +41,7 @@ Prerequisites: JDK 11 (use the exact version), update Intellij to the most recen\n ### JUnit tests\n \n * A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. \n+* A skeleton JUnit test (`src/test/java/seedu/drugsDuke/DukeTest.java`) is provided with this project template. \n * If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html).\n \n ## Checkstyle"
  },
  {
    "sha": "19390a823bbeca363f5a9b8eba5cbc049d864957",
    "filename": "Staff.txt",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/Staff.txt",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/Staff.txt",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/Staff.txt?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,3 @@\n+N45678|Sarrah|40|null\n+D12345|Mingshun|30|Pediatrician\n+D11111|Owen|21|Surgeon"
  },
  {
    "sha": "7d75c57d8b8aad1c795d5b01b07d0233ac19aad5",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/build.gradle",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/build.gradle",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/build.gradle?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -4,6 +4,13 @@ plugins {\n     id 'checkstyle'\n     id 'com.github.johnrengelman.shadow' version '5.1.0'\n }\n+jar {\n+    manifest {\n+        attributes(\n+                'Main-Class': 'seedu.duke.Duke'\n+        )\n+    }\n+}\n \n repositories {\n     mavenCentral()"
  },
  {
    "sha": "4fdbb7be6db0c5147689f85b75c035e38348ebef",
    "filename": "docs/AboutUs.md",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/docs/AboutUs.md",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/docs/AboutUs.md",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/docs/AboutUs.md?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -2,8 +2,9 @@\n \n Display | Name | Github Profile | Portfolio \n --------|:----:|:--------------:|:---------:\n-![](https://via.placeholder.com/100.png?text=Photo) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)\n+![](https://via.placeholder.com/100.png?text=Photo) | Owen | [Github](https://github.com/blank-bank) | [Portfolio](docs/team/johndoe.md)\n+![](https://via.placeholder.com/100.png?text=Photo) | Chiam Jia-En | [Github](https://github.com/Chiamjiaen/tp) | [Portfolio](docs/team/chiamjiaen.md)\n ![](https://via.placeholder.com/100.png?text=Photo) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)\n ![](https://via.placeholder.com/100.png?text=Photo) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)\n ![](https://via.placeholder.com/100.png?text=Photo) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)\n-![](https://via.placeholder.com/100.png?text=Photo) | Don Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)\n+![](https://via.placeholder.com/100.png?text=Photo) | Alexander Tan | [Github](https://github.com/AlexanderTanJunAn) | [Portfolio](docs/team/johndoe.md)"
  },
  {
    "sha": "44898c9314a7a3737a55ed83e1cdf5f71e3ccd92",
    "filename": "docs/UserGuide.md",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/docs/UserGuide.md",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/docs/UserGuide.md",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/docs/UserGuide.md?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -9,7 +9,7 @@\n {Give steps to get started quickly}\n \n 1. Ensure that you have Java 11 or above installed.\n-1. Down the latest version of `Duke` from [here](http://link.to/duke).\n+1. Down the latest version of `Duke` from [here](http://link.to/drugsDuke).\n \n ## Features \n "
  },
  {
    "sha": "c4192631f25b34d77a7f159aa0da0e3ae99c4ef4",
    "filename": "docs/_config.yml",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/docs/_config.yml",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/docs/_config.yml",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/docs/_config.yml?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1 @@\n+theme: jekyll-theme-cayman\n\\ No newline at end of file"
  },
  {
    "sha": "a71c88c6192f21b88ef1c5c16dee1fe1ffaed28e",
    "filename": "docs/team/chiamjiaen.md",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/docs/team/chiamjiaen.md",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/docs/team/chiamjiaen.md",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/docs/team/chiamjiaen.md?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,6 @@\n+# Chiam Jia-En - Project Portfolio Page\n+\n+## Overview\n+huh\n+\n+### Summary of Contributions"
  },
  {
    "sha": "19e86fe56e3036392d0377331b43d2899e574ed4",
    "filename": "src/main/java/META-INF/MANIFEST.MF",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/META-INF/MANIFEST.MF",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/META-INF/MANIFEST.MF",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/META-INF/MANIFEST.MF?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,3 @@\n+Manifest-Version: 1.0\n+Main-Class: seedu.duke.Duke\n+"
  },
  {
    "sha": "601bc7208b5f0d9628ee2545fd883dfed6f8c535",
    "filename": "src/main/java/seedu/doctorappointments/AppointmentActions.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/doctorappointments/AppointmentActions.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/doctorappointments/AppointmentActions.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/doctorappointments/AppointmentActions.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,77 @@\n+package seedu.doctorappointments;\n+\n+\n+import seedu.duke.exceptions.EmptyListException;\n+import seedu.duke.storage.DoctorAppointmentStorage;\n+import seedu.duke.ui.UI;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+public class AppointmentActions {\n+    public static ArrayList<DoctorAppointment> appointmentList;\n+    protected static DoctorAppointmentStorage storage = new DoctorAppointmentStorage(\"data/DoctorAppointmentList.txt\");\n+\n+    public AppointmentActions(ArrayList<DoctorAppointment> loadAppointments) {\n+        appointmentList = loadAppointments;\n+    }\n+\n+    public static void addAppointment(String input) throws IOException {\n+        String[] inputArray = input.split(\" \");\n+\n+        String iD = inputArray[1];\n+        String patientName = inputArray[2];\n+        String gender = inputArray[3];\n+        String date = inputArray[4];\n+\n+\n+        DoctorAppointment newAppointment = new DoctorAppointment(iD, patientName, gender, date);\n+\n+        System.out.println(\"Appointment Added\");\n+        appointmentList.add(newAppointment);\n+        storage.writeToFile(appointmentList);\n+    }\n+\n+    public static void listAppointment(String input) throws Exception {\n+        String[] inputArray = input.split(\" \");\n+\n+        String iD = inputArray[1];\n+        if (appointmentList.size() == 0) throw new EmptyListException();\n+        else {\n+            for (DoctorAppointment doc : appointmentList) {\n+                if (doc.getDoctorId().equals(iD)) {\n+                    System.out.println(\"ID: \" + doc.getDoctorId());\n+                    System.out.println(\"Patient's Name: \" + doc.getPatientsName());\n+                    System.out.println(\"Gender: \" + doc.getGender());\n+                    System.out.println(\"Date: \" + doc.getDateFormat(doc.getDate()));\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void deleteAppointment(String input) throws IOException {\n+        String[] inputArray = input.split(\" \");\n+        String iD = inputArray[1];\n+        int index = 999;\n+        int counter = 0;\n+\n+        for (DoctorAppointment doc : appointmentList) {\n+            if (doc.getDoctorId().equals(iD)) {\n+                index = counter;\n+            }\n+        }\n+        storage.writeToFile(appointmentList);\n+\n+        if (index == 999) System.out.println(\"ID number not found\");\n+        else {\n+            System.out.println(\"iD: \" + appointmentList.get(index).getDoctorId() + \" has been deleted!\");\n+            appointmentList.remove(index);\n+            storage.writeToFile(appointmentList);\n+        }\n+\n+    }\n+\n+    public static void helpAppointment() {\n+        UI.doctorAppointmentHelp();\n+    }\n+}"
  },
  {
    "sha": "0bbfb02909161c35fac7a5824e4094828ab586f5",
    "filename": "src/main/java/seedu/doctorappointments/DoctorAppointment.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/doctorappointments/DoctorAppointment.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/doctorappointments/DoctorAppointment.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/doctorappointments/DoctorAppointment.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,56 @@\n+package seedu.doctorappointments;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Date;\n+\n+public class DoctorAppointment {\n+    protected String doctorId;\n+    protected String patientsName;\n+    protected String gender;\n+    protected String date;\n+\n+    public DoctorAppointment(String doctorId, String name, String gender, String date) {\n+        this.doctorId = doctorId;\n+        this.patientsName = name;\n+        this.gender = gender;\n+        this.date = date;\n+    }\n+\n+\n+    public String getDoctorId() {\n+        return this.doctorId;\n+    }\n+\n+    public String getPatientsName() {\n+        return this.patientsName;\n+    }\n+\n+    public String getGender() {\n+        return this.gender;\n+    }\n+\n+    public String getDate() {\n+        return this.date;\n+    }\n+\n+    /*\n+        Date format = YYYY-MM-DD\n+    */\n+    public String getDateFormat(String inputDate) throws ParseException {\n+        SimpleDateFormat parser = new SimpleDateFormat(\"ddMMyyyy\");\n+        Date date = parser.parse(inputDate);\n+        SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyy\");\n+\n+        return formatter.format(date);\n+    }\n+\n+    public String saveTask() {\n+        return doctorId + \" | \" + patientsName + \" | \" + gender + \" | \" + date;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "5c6c3064aa5f8a4cf4851592f296acaa6d7a6038",
    "filename": "src/main/java/seedu/doctorappointments/DoctorAppointmentInstance.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/doctorappointments/DoctorAppointmentInstance.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/doctorappointments/DoctorAppointmentInstance.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/doctorappointments/DoctorAppointmentInstance.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,56 @@\n+package seedu.doctorappointments;\n+\n+\n+import seedu.duke.storage.DoctorAppointmentStorage;\n+import seedu.duke.ui.UI;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Scanner;\n+\n+public class DoctorAppointmentInstance {\n+\n+    private UI ui;\n+    private AppointmentActions details;\n+    private DoctorAppointmentStorage doctorAppointmentStorage;\n+    static final String PATIENT_FILE_PATH = \"data/DoctorAppointmentList.txt\";\n+\n+    public DoctorAppointmentInstance(String filepath) {\n+        ui = new UI();\n+        doctorAppointmentStorage = new DoctorAppointmentStorage(PATIENT_FILE_PATH);\n+        try {\n+            details = doctorAppointmentStorage.loadFile();\n+        } catch (FileNotFoundException e) {\n+            try {\n+                doctorAppointmentStorage.createFile();\n+                details = doctorAppointmentStorage.loadFile();\n+            } catch (IOException e1) {\n+                System.out.println(\"File cannot be created\");\n+            }\n+        }\n+    }\n+\n+    public void run() {\n+        UI.doctorAppointmentsWelcome();\n+        UI.showLine();\n+        boolean isReturnToStartMenu = false;\n+        Scanner userInput = new Scanner(System.in);\n+        while (!isReturnToStartMenu) {\n+            try {\n+                System.out.print(\"Appointments --> \");\n+                String input = userInput.nextLine();\n+                ui.showLine(); // show the divider line (\"_______\")\n+                isReturnToStartMenu = Parser.parse(input);\n+                if (isReturnToStartMenu) {\n+                    ui.returningToStartMenuMessage();\n+                }\n+                ui.showLine();\n+            } catch (NullPointerException e) {\n+                //Command C can return as null if an error is triggered in parser\n+                //Null Pointer Exception may hence occur, the catch statement is to ensure it does not exit the loop.\n+            } catch (Exception e) {\n+                System.out.println(\"OOPS something went wrong :0\");\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "34bc6e420b06fff34f520746af0240815c33b0b5",
    "filename": "src/main/java/seedu/doctorappointments/Parser.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/doctorappointments/Parser.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/doctorappointments/Parser.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/doctorappointments/Parser.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,29 @@\n+package seedu.doctorappointments;\n+\n+\n+public class Parser {\n+\n+    public static boolean parse(String input) throws Exception {\n+        String[] inputArray = input.split(\" \");\n+\n+        switch (inputArray[0]) {\n+        case \"add\":\n+            AppointmentActions.addAppointment(input);\n+            break;\n+        case \"list\":\n+            AppointmentActions.listAppointment(input);\n+            break;\n+        case \"delete\":\n+            AppointmentActions.deleteAppointment(input);\n+            break;\n+        case \"return\":\n+            return true;\n+        case \"help\":\n+            AppointmentActions.helpAppointment();\n+            break;\n+        default:\n+            System.out.println(\"Sorry, I don't know what that means :(\");\n+        }\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "2fc792e430de3ab0124cd8a8460776ae4dbb99e0",
    "filename": "src/main/java/seedu/drugs/Drug.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/drugs/Drug.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/drugs/Drug.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/drugs/Drug.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,30 @@\n+package seedu.drugs;\n+\n+public class Drug {\n+    protected String name;\n+    protected String price;\n+    protected String quantity;\n+\n+    public Drug(String name, String price, String quantity) {\n+        this.name = name;\n+        this.price = price;\n+        this.quantity = quantity;\n+\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public String getPrice() {\n+        return this.price;\n+    }\n+\n+    public String getQuantity() {\n+        return this.quantity;\n+    }\n+\n+    public String stringToSave() {\n+        return getName() + \" | \" + getPrice() + \" | \" + getQuantity();\n+    }\n+}"
  },
  {
    "sha": "a456ca689384f88d795be5c63f8992b67d09b35d",
    "filename": "src/main/java/seedu/drugs/DrugAction.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/drugs/DrugAction.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/drugs/DrugAction.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/drugs/DrugAction.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,62 @@\n+package seedu.drugs;\n+\n+import seedu.duke.Duke;\n+\n+import java.util.ArrayList;\n+\n+public class DrugAction {\n+    public ArrayList<Drug> Drugs = new ArrayList<>();\n+\n+    public void addDrugs(String description) {\n+        try {\n+            description = description.substring(4);\n+            String[] elements = description.split(\" \");\n+            Drugs.add(new Drug(elements[0], elements[1], elements[2]));\n+            System.out.println(\"Added \" + elements[elements.length - 1] + \" \" + elements[0] + \" to inventory!\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            System.out.println(\"The description of 'add' cannot be empty\");\n+            return;\n+        }\n+    }\n+\n+    public void deleteDrugs(String description) {\n+        try {\n+            description = description.substring(7);\n+            for (int i = 0; i < Drugs.size(); ++i) {\n+                if (Drugs.get(i).getName().contains(description)) {\n+                    System.out.println(\"Deleted \" + Drugs.get(i).getName() + \" from inventory!\");\n+                    Drugs.remove(Drugs.get(i));\n+                    break;\n+                }\n+            }\n+        } catch (StringIndexOutOfBoundsException e) {\n+            System.out.println(\"The description of 'delete' cannot be empty\");\n+            return;\n+        }\n+    }\n+\n+    public void printHelpMessage() {\n+        System.out.println(\"Here is a list of Drug commands: \");\n+        System.out.println(\"\\\"help\\\" brings up this list of commands!\");\n+        System.out.println(\"\\\"add [Name] [Price] [Quantity]\\\" adds a Drug to the drug list!\");\n+        System.out.println(\"\\\"list\\\" brings up the list of all current drugs!\");\n+        System.out.println(\"\\\"delete [Name]\\\" deletes the drug with the specific name from the list!\");\n+        System.out.println(\"\\\"return\\\" returns you to the Start Menu!\");\n+    }\n+\n+    public void printList() {\n+        if (Drugs.size() != 0) {\n+            System.out.println(\"Current Inventory: \");\n+            for (int i = 1; i <= Drugs.size(); ++i) {\n+                System.out.println(i + \". \" + Drugs.get(i - 1).getName() + \" \" + Drugs.get(i - 1).getPrice() + \" \" + Drugs.get(i - 1).getQuantity());\n+            }\n+        } else {\n+            System.out.println(\"You do not have any Drugs in your inventory:(\");\n+        }\n+    }\n+\n+}\n+\n+\n+\n+"
  },
  {
    "sha": "a99d812181ad2e9f36287d648675a760e15acf78",
    "filename": "src/main/java/seedu/drugs/DrugInstance.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/drugs/DrugInstance.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/drugs/DrugInstance.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/drugs/DrugInstance.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,33 @@\n+package seedu.drugs;\n+\n+import seedu.duke.storage.DrugStorage;\n+\n+import java.io.FileNotFoundException;\n+import java.util.ArrayList;\n+\n+public class DrugInstance {\n+\n+    /**\n+     * Main entry-point for the java.duke.DrugInstance application.\n+     */\n+    protected DrugStorage drugStorage;\n+    protected DrugAction drugAction;\n+    protected ArrayList<Drug> Drugs;\n+\n+    public DrugInstance(String filePath) {\n+        drugStorage = new DrugStorage(filePath);\n+        try {\n+            Drugs = drugStorage.uploadDrugs();\n+            drugAction = new DrugAction();\n+        } catch (FileNotFoundException e) {\n+            Drugs = drugStorage.createNewFile();\n+        }\n+    }\n+\n+    public void run() {\n+        Parser parser = new Parser(drugAction);\n+        parser.parseMethod();\n+        drugStorage.exitProgram();\n+    }\n+\n+}"
  },
  {
    "sha": "4f8a4e50ff2567a873931261493142fc1e956c0e",
    "filename": "src/main/java/seedu/drugs/Parser.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/drugs/Parser.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/drugs/Parser.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/drugs/Parser.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,35 @@\n+package seedu.drugs;\n+\n+import java.util.Scanner;\n+\n+public class Parser {\n+\n+    protected DrugAction drugAction;\n+\n+    public Parser(DrugAction drugAction) {\n+        this.drugAction = drugAction;\n+    }\n+\n+    public void parseMethod() {\n+        System.out.print(\"Drug --> \");\n+        Scanner myObj = new Scanner(System.in);\n+        String command = myObj.nextLine();\n+        while (!command.equals(\"bye\")) {\n+            if (command.equals(\"list\")) {\n+                drugAction.printList();\n+            } else if (command.contains(\"add\")) {\n+                drugAction.addDrugs(command);\n+            } else if (command.contains(\"delete\")) {\n+                drugAction.deleteDrugs(command);\n+            } else if (command.contains(\"help\")) {\n+                drugAction.printHelpMessage();\n+            } else if (command.contains(\"return\")) {\n+                return;\n+            } else {\n+                System.out.println(\"There is no such action! Please only enter the following: \");\n+                System.out.println(\"1) help\\r\\n2) add <...>\\r\\n3) list\\r\\n4) delete <...>\\r\\n5) return\");\n+            }\n+            command = myObj.nextLine();\n+        }\n+    }\n+}"
  },
  {
    "sha": "c44ab6d9436978243cc94f84490df55bc6e34cdd",
    "filename": "src/main/java/seedu/duke/Duke.java",
    "status": "modified",
    "additions": 85,
    "deletions": 13,
    "changes": 98,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/Duke.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/Duke.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/Duke.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -1,21 +1,93 @@\n package seedu.duke;\n \n-import java.util.Scanner;\n+import seedu.drugs.DrugInstance;\n+\n+import seedu.nurseschedules.NurseScheduleInstance;\n+import seedu.doctorappointments.DoctorAppointmentInstance;\n+import seedu.staff.Parser;\n+\n+import java.io.IOException;\n+\n+import seedu.duke.ui.UI;\n+import seedu.patient.PatientCommandInstance;\n \n public class Duke {\n+\n+    static final String PATIENT_FILE_PATH = \"data/PatientList.txt\";\n+    static final String APPOINTMENT_FILE_PATH = \"data/DoctorAppointmentList.txt\";\n+    static final String DRUG_FILE_PATH = \"data/DrugsInventoryList.txt\";\n+\n+    /**\n+     * Logic for the main loop that processes information\n+     */\n+    public static void run() {\n+        UI.printWelcome();\n+        UI.userNamePrompt();\n+        String Username = UI.scanInput();\n+        UI.printUserName(Username);\n+        UI.printStartMenu();\n+        boolean isExit = false;\n+        while (!isExit) {\n+            try {\n+                UI.startMenuPrompt();\n+                String startMenuCommand = UI.scanInput();\n+                String c = startMenuCommand.trim();\n+                switch (c) {\n+                case \"1\":\n+                    UI.showLine();\n+                    Parser.run();\n+                    break;\n+                case \"2\":\n+                    UI.showLine();\n+                    System.out.println(\"Patient Instance!\");\n+                    PatientCommandInstance patients = new PatientCommandInstance(PATIENT_FILE_PATH);\n+                    patients.run();\n+                    break;\n+                case \"3\":\n+                    UI.showLine();\n+                    System.out.println(\"Doctor's Appointment Instance!\");\n+                    DoctorAppointmentInstance appointments = new DoctorAppointmentInstance(APPOINTMENT_FILE_PATH);\n+                    appointments.run();\n+                    break;\n+                case \"4\":\n+                    UI.showLine();\n+                    NurseScheduleInstance.main();\n+                    break;\n+                case \"5\":\n+                    UI.showLine();\n+                    System.out.println(\"Drug Viewer Instance!\");\n+                    DrugInstance addict = new DrugInstance(DRUG_FILE_PATH);\n+                    addict.run();\n+                    break;\n+                case \"help\":\n+                    UI.showLine();\n+                    System.out.println(\"Here is the list of Start Menu commands!\");\n+                    UI.printStartMenu();\n+                    break;\n+                case \"bye\":\n+                    UI.showLine();\n+                    isExit = true;\n+                    UI.printGoodbye();\n+                    break;\n+                default:\n+                    UI.showLine();\n+                    System.out.println(\"OOPS! That is not a registered command! Please type \\\"help\\\" to see the list of commands\");\n+                    UI.showLine();\n+                    break;\n+                }\n+            } catch (NullPointerException | IOException e) {\n+                //Command C can return as null if an error is triggered in parser\n+                //Null Pointer Exception may hence occur, the catch statement is to ensure it does not exit the loop.\n+            }\n+        }\n+    }\n+\n     /**\n-     * Main entry-point for the java.duke.Duke application.\n+     * Calls for the running of a new Duke instance\n+     *\n+     * @param args Runtime arguments are unused\n      */\n     public static void main(String[] args) {\n-        String logo = \" ____        _        \\n\"\n-                + \"|  _ \\\\ _   _| | _____ \\n\"\n-                + \"| | | | | | | |/ / _ \\\\\\n\"\n-                + \"| |_| | |_| |   <  __/\\n\"\n-                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";\n-        System.out.println(\"Hello from\\n\" + logo);\n-        System.out.println(\"What is your name?\");\n-\n-        Scanner in = new Scanner(System.in);\n-        System.out.println(\"Hello \" + in.nextLine());\n+        Duke.run();\n     }\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "eaa1246d8eda9eaa1633ed183e9ef2b87b7a3e07",
    "filename": "src/main/java/seedu/duke/exceptions/DukeException.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/DukeException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/DukeException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/DukeException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,88 @@\n+package seedu.duke.exceptions;\n+\n+public class DukeException extends Exception {\n+\n+    protected String error;\n+\n+    /**\n+     * Instantiates this exception\n+     *\n+     * @param error error type\n+     */\n+    public DukeException(String error) {\n+        this.error = error;\n+    }\n+\n+    public DukeException() {\n+    }\n+\n+    /**\n+     * Shows the error encountered by the user\n+     *\n+     * @param input error type\n+     */\n+    public void getError(String input) {\n+        switch (error) {\n+        case \"loadFile\":\n+            System.out.println(\"OOPS! The file format is wrong! It may have been corrupted! \\n\" +\n+                    \"Please delete the file \\\"data/PatientList.txt\\\" so we can make a new file for you! \");\n+            break;\n+        case \"add\":\n+            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\" +\n+                    \"There should not be any space in the name! \\n\" +\n+                    \"There should only be 7 inputted terms including \\\"add\\\" \\n\" +\n+                    \"Please type \\\"help\\\" to see the right command format!\");\n+            break;\n+        case \"find\":\n+            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\" +\n+                    \"There should only be 2 inputted terms including \\\"find\\\" \\n\" +\n+                    \"Please type \\\"help\\\" to see the right command format!\");\n+            break;\n+        case \"delete\":\n+            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\" +\n+                    \"There should only be 2 inputted terms including \\\"delete\\\" \\n\" +\n+                    \"Please type \\\"help\\\" to see the right command format!\");\n+            break;\n+        case \"return\":\n+            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\" +\n+                    \"There should only be 1 inputted term which is \\\"return\\\" \\n\" +\n+                    \"Please type \\\"help\\\" to see the right command format!\");\n+            break;\n+        case \"help\":\n+            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\" +\n+                    \"There should only be 1 inputted term which is \\\"help\\\"\");\n+            break;\n+        case \"list\":\n+            System.out.println(\"OOPS! You have inputted the wrong number of parameters! \\n\" +\n+                    \"There should only be 1 inputted term which is \\\"list\\\" \\n\" +\n+                    \"Please type \\\"help\\\" to see the right command format!\");\n+            break;\n+        case \"IDLength\":\n+            System.out.println(\"OOPS! Looks like your ID length is incorrect! \\n\" +\n+                    \"Please ensure that the ID has 6 characters!\");\n+            break;\n+        case \"IDType\":\n+            System.out.println(\"OOPS! Looks like your ID type is incorrect! \\n\" +\n+                    \"Please ensure that the ID starts with \\\"P\\\"!\");\n+            break;\n+        case \"IDValue\":\n+            System.out.println(\"OOPS! Looks like your ID value is incorrect! \\n\" +\n+                    \"Please ensure that the ID includes 5 numbers after \\\"P\\\"! \\n\" +\n+                    \"eg. P12345 or P67891\");\n+            break;\n+        case \"IDTaken\":\n+            System.out.println(\"OOPS! Looks like the ID has been taken! \\n\" +\n+                    \"Try a different ID! You can use the \\\"list\\\" command to see which IDs have been taken!\");\n+            break;\n+        case \"IDDoesNotExist\":\n+            System.out.println(\"OOPS! Looks like the ID does not exist! \\n\" +\n+                    \"Check that you have inputted the right ID! \\n\" +\n+                    \"You can use the \\\"list\\\" command to see which IDs exist!\");\n+            break;\n+        default:\n+            System.out.println(\"OOPS! Your command may not be valid! \\n\" +\n+                    \"Please check the list of available commands using \\\"help\\\"\");\n+            break;\n+        }\n+    }\n+}"
  },
  {
    "sha": "995dd168c77d9f447ab5782f0b360a6f77caa4cd",
    "filename": "src/main/java/seedu/duke/exceptions/EmptyListException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/EmptyListException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/EmptyListException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/EmptyListException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,7 @@\n+package seedu.duke.exceptions;\n+\n+public class EmptyListException extends Exception {\n+    public String getMessage() {\n+        return \"OOPS!!! The list is empty!\";\n+    }\n+}"
  },
  {
    "sha": "6929c90b589894c74767a1ba0c3a721e02b32b7a",
    "filename": "src/main/java/seedu/duke/exceptions/NoInputException.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/NoInputException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/NoInputException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/NoInputException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,4 @@\n+package seedu.duke.exceptions;\n+\n+public class NoInputException extends Exception {\n+}"
  },
  {
    "sha": "e279a86794004c99bac758c6d533392ac482f5e0",
    "filename": "src/main/java/seedu/duke/exceptions/WrongListInputException.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/WrongListInputException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/WrongListInputException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/WrongListInputException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,4 @@\n+package seedu.duke.exceptions;\n+\n+public class WrongListInputException extends Exception {\n+}"
  },
  {
    "sha": "6fbd7a1ff3feb3e26644ac53f4fc48f6f1f4a92a",
    "filename": "src/main/java/seedu/duke/exceptions/WrongStaffIdException.java",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/WrongStaffIdException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/WrongStaffIdException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/WrongStaffIdException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,4 @@\n+package seedu.duke.exceptions;\n+\n+public class WrongStaffIdException extends Exception {\n+}"
  },
  {
    "sha": "0cdd3629e06826581fb7478216c7aba927d65c2c",
    "filename": "src/main/java/seedu/duke/exceptions/patient/duplicateIDException.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/duplicateIDException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/duplicateIDException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/patient/duplicateIDException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,15 @@\n+package seedu.duke.exceptions.patient;\n+\n+import seedu.duke.exceptions.DukeException;\n+\n+public class duplicateIDException extends DukeException {\n+\n+    public duplicateIDException(String error) {\n+        this.error = error;\n+    }\n+\n+    @Override\n+    public void getError(String input) {\n+        super.getError(input);\n+    }\n+}"
  },
  {
    "sha": "658146cf55358cb55622f43d574f825c2e72c9f3",
    "filename": "src/main/java/seedu/duke/exceptions/patient/invalidIDLengthException.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/invalidIDLengthException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/invalidIDLengthException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/patient/invalidIDLengthException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,15 @@\n+package seedu.duke.exceptions.patient;\n+\n+import seedu.duke.exceptions.DukeException;\n+\n+public class invalidIDLengthException extends DukeException {\n+\n+    public invalidIDLengthException(String error) {\n+        this.error = error;\n+    }\n+\n+    @Override\n+    public void getError(String input) {\n+        super.getError(input);\n+    }\n+}"
  },
  {
    "sha": "639af4f169abb124ad703030d69883917145e4ba",
    "filename": "src/main/java/seedu/duke/exceptions/patient/invalidIDTypeException.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/invalidIDTypeException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/invalidIDTypeException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/patient/invalidIDTypeException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,15 @@\n+package seedu.duke.exceptions.patient;\n+\n+import seedu.duke.exceptions.DukeException;\n+\n+public class invalidIDTypeException extends DukeException {\n+\n+    public invalidIDTypeException(String error) {\n+        this.error = error;\n+    }\n+\n+    @Override\n+    public void getError(String input) {\n+        super.getError(input);\n+    }\n+}"
  },
  {
    "sha": "08cf16a86c9abc6e2ef63e8f477e8b52570be564",
    "filename": "src/main/java/seedu/duke/exceptions/patient/invalidIDValueException.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/invalidIDValueException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/invalidIDValueException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/patient/invalidIDValueException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,14 @@\n+package seedu.duke.exceptions.patient;\n+\n+import seedu.duke.exceptions.DukeException;\n+\n+public class invalidIDValueException extends DukeException {\n+\n+    public invalidIDValueException(String error) {\n+        this.error = error;\n+    }\n+    @Override\n+    public void getError(String input) {\n+        super.getError(input);\n+    }\n+}"
  },
  {
    "sha": "b7f9e534cfa46803d0d45196f7b81fd0b87bcb51",
    "filename": "src/main/java/seedu/duke/exceptions/patient/nonexistentIDException.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/nonexistentIDException.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/exceptions/patient/nonexistentIDException.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/exceptions/patient/nonexistentIDException.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,15 @@\n+package seedu.duke.exceptions.patient;\n+\n+import seedu.duke.exceptions.DukeException;\n+\n+public class nonexistentIDException extends DukeException {\n+\n+    public nonexistentIDException(String error) {\n+        this.error = error;\n+    }\n+\n+    @Override\n+    public void getError(String input) {\n+        super.getError(input);\n+    }\n+}"
  },
  {
    "sha": "b4c17917486ea777b16f0f65376142ac956193f9",
    "filename": "src/main/java/seedu/duke/menuparser/MenuParser.java",
    "status": "added",
    "additions": 133,
    "deletions": 0,
    "changes": 133,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/menuparser/MenuParser.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/menuparser/MenuParser.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/menuparser/MenuParser.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,133 @@\n+package seedu.duke.menuparser;\n+\n+\n+import seedu.duke.exceptions.DukeException;\n+import seedu.duke.exceptions.patient.*;\n+import seedu.duke.ui.UI;\n+import seedu.patient.PatientList;\n+\n+public class MenuParser {\n+\n+    /**\n+     * Checks the number of tokens and throws an exception based on the command\n+     *\n+     * @param numberOfTokens number of tokens in the string\n+     * @param command        interpreted command from the user to be used in error finding\n+     * @throws DukeException exception based on command\n+     */\n+    public static void lengthCheck(int numberOfTokens, String command) throws DukeException {\n+        if (command.equals(\"add\") && numberOfTokens != 7) {\n+            throw new DukeException(command);\n+        } else if ((command.equals(\"delete\") || command.equals(\"find\")) && numberOfTokens != 2) {\n+            throw new DukeException(command);\n+        } else if ((command.equals(\"list\") || command.equals(\"return\") || command.equals(\"help\")) && numberOfTokens != 1) {\n+            throw new DukeException(command);\n+        }\n+    }\n+\n+    private static int numberOfIntegersInString(String userInput) {\n+        int numberOfIntegers = 0;\n+        for (int i = 0; i < userInput.length(); i++) {\n+            if (Character.isDigit(userInput.charAt(i))) {\n+                numberOfIntegers++;\n+            }\n+        }\n+        return numberOfIntegers;\n+    }\n+\n+    private static void isValidID(String userID) throws invalidIDLengthException, invalidIDTypeException, invalidIDValueException {\n+        if (userID.length() != 6) {\n+            throw new invalidIDLengthException(\"IDLength\");\n+        } else if (!(userID.charAt(0) == 'P')) {\n+            throw new invalidIDTypeException(\"IDType\");\n+        } else if (numberOfIntegersInString(userID) != 5) {\n+            throw new invalidIDValueException(\"IDValue\");\n+        }\n+    }\n+\n+    private static void isIDExist(String userID, PatientList patients, String command) throws nonexistentIDException, duplicateIDException {\n+        if (patients.isIDTaken(userID)) {\n+            if (command.equals(\"add\")) {\n+                throw new duplicateIDException(\"IDTaken\");\n+            }\n+        } else {\n+            if ((command.equals(\"delete\") || command.equals(\"find\"))) {\n+                throw new nonexistentIDException(\"IDDoesNotExist\");\n+            }\n+        }\n+    }\n+\n+    public static boolean patientParse(String fullCommand, PatientList patients) {\n+        String[] stringTokens = fullCommand.trim().split(\" \");\n+        int numberOfTokens = stringTokens.length;\n+        String command = stringTokens[0];\n+        try {\n+            switch (command) {\n+            case \"list\":\n+                lengthCheck(numberOfTokens, command);\n+                PatientList.listPatients();\n+                break;\n+            case \"add\":\n+                lengthCheck(numberOfTokens, command);\n+                if (iDParser(patients, stringTokens, command)) {\n+                    PatientList.addPatient(stringTokens[1], stringTokens[2], Integer.parseInt(stringTokens[3]),\n+                            stringTokens[4], stringTokens[5], stringTokens[6]);\n+                }\n+                break;\n+            case \"delete\":\n+                lengthCheck(numberOfTokens, command);\n+                if (iDParser(patients, stringTokens, command)) {\n+                    PatientList.deletePatient(stringTokens[1]);\n+                }\n+                break;\n+            case \"find\":\n+                lengthCheck(numberOfTokens, command);\n+                if (iDParser(patients, stringTokens, command)) {\n+                    PatientList.findPatient(stringTokens[1]);\n+                }\n+                break;\n+            case \"help\":\n+                lengthCheck(numberOfTokens, command);\n+                UI.printPatientHelpList();\n+                break;\n+            case \"return\":\n+                lengthCheck(numberOfTokens, command);\n+                UI.returningToStartMenuMessage();\n+                return true;\n+            default:\n+                UI.unrecognizedCommandMessage();\n+                break;\n+            }\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            UI.invalidFormatMessage();\n+        } catch (DukeException e) {\n+            e.getError(command);\n+        }\n+        return false;\n+    }\n+\n+    private static boolean iDParser(PatientList patients, String[] stringTokens, String command) {\n+        try {\n+            isValidID(stringTokens[1]);\n+            isIDExist(stringTokens[1], patients, command);\n+        } catch (invalidIDLengthException e) {\n+            e.getError(\"IDLength\");\n+            return false;\n+        } catch (invalidIDTypeException e) {\n+            e.getError(\"IDType\");\n+            return false;\n+        } catch (invalidIDValueException e) {\n+            e.getError(\"IDValue\");\n+            return false;\n+        } catch (nonexistentIDException e) {\n+            e.getError(\"IDDoesNotExist\");\n+            return false;\n+        } catch (duplicateIDException e) {\n+            e.getError(\"IDTaken\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "1aa4c13c3a0cb91f0152824578c5613e9ec881f3",
    "filename": "src/main/java/seedu/duke/storage/DoctorAppointmentStorage.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/nus-cs2113-AY2021S2/tp/blob/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/storage/DoctorAppointmentStorage.java",
    "raw_url": "https://github.com/nus-cs2113-AY2021S2/tp/raw/4e507be3d82db1727c47ca75dbffb76e5567a1ed/src/main/java/seedu/duke/storage/DoctorAppointmentStorage.java",
    "contents_url": "https://api.github.com/repos/nus-cs2113-AY2021S2/tp/contents/src/main/java/seedu/duke/storage/DoctorAppointmentStorage.java?ref=4e507be3d82db1727c47ca75dbffb76e5567a1ed",
    "patch": "@@ -0,0 +1,56 @@\n+package seedu.duke.storage;\n+\n+import seedu.doctorappointments.AppointmentActions;\n+import seedu.doctorappointments.DoctorAppointment;\n+import seedu.drugs.Drug;\n+\n+import javax.print.Doc;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Scanner;\n+\n+public class DoctorAppointmentStorage {\n+    private final String filePath;\n+    private final File file;\n+\n+    public DoctorAppointmentStorage(String filePath) {\n+        this.filePath = filePath;\n+        this.file = new File(filePath);\n+    }\n+\n+    public void createFile() throws IOException {\n+        Path pathToFile = Paths.get(filePath);\n+        Files.createDirectories(pathToFile.getParent());\n+        file.createNewFile();\n+    }\n+\n+    public AppointmentActions loadFile() throws FileNotFoundException {\n+        ArrayList<DoctorAppointment> loadAppointments = new ArrayList<>();\n+\n+        File fileName = new File(filePath);\n+        Scanner fileReader = new Scanner(fileName);\n+        while (fileReader.hasNextLine()) {\n+            String input = fileReader.nextLine();\n+            String[] data = input.split(\"\\\\s\\\\|\\\\s\", 4);\n+            loadAppointments.add(new DoctorAppointment(data[0], data[1], data[2], data[3]));\n+        }\n+        fileReader.close();\n+        return new AppointmentActions(loadAppointments);\n+    }\n+\n+    public void writeToFile(ArrayList<DoctorAppointment> taskList) throws IOException {\n+        FileWriter fileWriter = new FileWriter(filePath, false);\n+        fileWriter.write(\"\");\n+        for (DoctorAppointment task : taskList) {\n+            fileWriter.write(task.saveTask() + \"\\n\");\n+        }\n+        fileWriter.close();\n+    }\n+\n+}"
  }
]
