[
  {
    "sha": "4b0edf3313f8d46dc60c78557a9a0c8e4b5b0708",
    "filename": "Makefile",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/redis/jedis/blob/a30e163184fe32758543a62c05e5916638cf3202/Makefile",
    "raw_url": "https://github.com/redis/jedis/raw/a30e163184fe32758543a62c05e5916638cf3202/Makefile",
    "contents_url": "https://api.github.com/repos/redis/jedis/contents/Makefile?ref=a30e163184fe32758543a62c05e5916638cf3202",
    "patch": "@@ -254,6 +254,12 @@ pid = /tmp/stunnel.pid\n [redis]\n accept = 127.0.0.1:6390\n connect = 127.0.0.1:6379\n+[redis_3]\n+accept = 127.0.0.1:16381\n+connect = 127.0.0.1:6381\n+[redis_4]\n+accept = 127.0.0.1:16382\n+connect = 127.0.0.1:6382\n [redis_cluster_1]\n accept = 127.0.0.1:8379\n connect = 127.0.0.1:7379\n@@ -269,6 +275,18 @@ connect = 127.0.0.1:7382\n [redis_cluster_5]\n accept = 127.0.0.1:8383\n connect = 127.0.0.1:7383\n+[redis_sentinel_1]\n+accept = 127.0.0.1:36379\n+connect = 127.0.0.1:26379\n+[redis_sentinel_2]\n+accept = 127.0.0.1:36380\n+connect = 127.0.0.1:26380\n+[redis_sentinel_3]\n+accept = 127.0.0.1:36381\n+connect = 127.0.0.1:26381\n+[redis_sentinel_4]\n+accept = 127.0.0.1:36382\n+connect = 127.0.0.1:26382\n endef\n \n export REDIS1_CONF"
  },
  {
    "sha": "79e2dad6a9856f59488853bb50a003620d186120",
    "filename": "src/main/java/redis/clients/jedis/JedisSentinelPool.java",
    "status": "modified",
    "additions": 58,
    "deletions": 84,
    "changes": 142,
    "blob_url": "https://github.com/redis/jedis/blob/a30e163184fe32758543a62c05e5916638cf3202/src/main/java/redis/clients/jedis/JedisSentinelPool.java",
    "raw_url": "https://github.com/redis/jedis/raw/a30e163184fe32758543a62c05e5916638cf3202/src/main/java/redis/clients/jedis/JedisSentinelPool.java",
    "contents_url": "https://api.github.com/repos/redis/jedis/contents/src/main/java/redis/clients/jedis/JedisSentinelPool.java?ref=a30e163184fe32758543a62c05e5916638cf3202",
    "patch": "@@ -1,10 +1,12 @@\n package redis.clients.jedis;\n \n import java.util.Arrays;\n-import java.util.HashSet;\n+import java.util.Collection;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n \n import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n import org.slf4j.Logger;\n@@ -15,30 +17,15 @@\n \n public class JedisSentinelPool extends JedisPoolAbstract {\n \n-  /**\n-   * @deprecated This will be private in future.\n-   */\n-  @Deprecated\n-  protected static Logger log = LoggerFactory.getLogger(JedisSentinelPool.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(JedisSentinelPool.class);\n \n   protected final GenericObjectPoolConfig<Jedis> poolConfig;\n \n-  protected final int connectionTimeout;\n-  protected final int soTimeout;\n-  protected final int infiniteSoTimeout;\n+  protected final JedisClientConfig masterClientConfig;\n \n-  protected final String user;\n-  protected final String password;\n-  protected final int database;\n-  protected final String clientName;\n+  protected final JedisClientConfig sentinelClientConfig;\n \n-  protected int sentinelConnectionTimeout;\n-  protected int sentinelSoTimeout;\n-  protected String sentinelUser;\n-  protected String sentinelPassword;\n-  protected String sentinelClientName;\n-\n-  protected final Set<MasterListener> masterListeners = new HashSet<>();\n+  protected final Collection<MasterListener> masterListeners = new LinkedList<>();\n \n   private volatile JedisFactory factory;\n   private volatile HostAndPort currentHostMaster;\n@@ -160,25 +147,32 @@ public JedisSentinelPool(String masterName, Set<String> sentinels,\n       final String user, final String password, final int database, final String clientName,\n       final int sentinelConnectionTimeout, final int sentinelSoTimeout, final String sentinelUser,\n       final String sentinelPassword, final String sentinelClientName) {\n+    this(masterName, parseHostAndPorts(sentinels), poolConfig,\n+        DefaultJedisClientConfig.builder().withConnectionTimeoutMillis(connectionTimeout)\n+            .withSoTimeoutMillis(soTimeout).withInfiniteSoTimeoutMillis(infiniteSoTimeout).withUser(user)\n+            .withPassword(password).withDatabse(database).withClientName(clientName).build(),\n+        DefaultJedisClientConfig.builder().withConnectionTimeoutMillis(sentinelConnectionTimeout)\n+            .withSoTimeoutMillis(sentinelSoTimeout).withUser(sentinelUser).withPassword(sentinelPassword)\n+            .withClientName(sentinelClientName).build()\n+    );\n+  }\n+\n+  public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels,\n+      final GenericObjectPoolConfig<Jedis> poolConfig, final JedisClientConfig masteClientConfig,\n+      final JedisClientConfig sentinelClientConfig) {\n \n     this.poolConfig = poolConfig;\n-    this.connectionTimeout = connectionTimeout;\n-    this.soTimeout = soTimeout;\n-    this.infiniteSoTimeout = infiniteSoTimeout;\n-    this.user = user;\n-    this.password = password;\n-    this.database = database;\n-    this.clientName = clientName;\n-    this.sentinelConnectionTimeout = sentinelConnectionTimeout;\n-    this.sentinelSoTimeout = sentinelSoTimeout;\n-    this.sentinelUser = sentinelUser;\n-    this.sentinelPassword = sentinelPassword;\n-    this.sentinelClientName = sentinelClientName;\n+    this.masterClientConfig = masteClientConfig;\n+    this.sentinelClientConfig = sentinelClientConfig;\n \n     HostAndPort master = initSentinels(sentinels, masterName);\n     initPool(master);\n   }\n \n+  private static Set<HostAndPort> parseHostAndPorts(Set<String> strings) {\n+    return strings.parallelStream().map(str -> HostAndPort.parseString(str)).collect(Collectors.toSet());\n+  }\n+\n   @Override\n   public void destroy() {\n     for (MasterListener m : masterListeners) {\n@@ -192,13 +186,12 @@ public HostAndPort getCurrentHostMaster() {\n     return currentHostMaster;\n   }\n \n-  private void initPool(HostAndPort master) {\n-    synchronized(initPoolLock){\n+  private void initPool(final HostAndPort master) {\n+    synchronized (initPoolLock) {\n       if (!master.equals(currentHostMaster)) {\n         currentHostMaster = master;\n         if (factory == null) {\n-          factory = new JedisFactory(master.getHost(), master.getPort(), connectionTimeout,\n-              soTimeout, infiniteSoTimeout, user, password, database, clientName);\n+          factory = new JedisFactory(master, masterClientConfig);\n           initPool(poolConfig, factory);\n         } else {\n           factory.setHostAndPort(currentHostMaster);\n@@ -207,59 +200,48 @@ private void initPool(HostAndPort master) {\n           clearInternalPool();\n         }\n \n-        log.info(\"Created JedisPool to master at {}\", master);\n+        LOG.info(\"Created JedisSentinelPool to master at {}\", master);\n       }\n     }\n   }\n \n-  private HostAndPort initSentinels(Set<String> sentinels, final String masterName) {\n+  private HostAndPort initSentinels(Set<HostAndPort> sentinels, final String masterName) {\n \n     HostAndPort master = null;\n     boolean sentinelAvailable = false;\n \n-    log.info(\"Trying to find master from available Sentinels...\");\n+    LOG.info(\"Trying to find master from available Sentinels...\");\n \n-    for (String sentinel : sentinels) {\n-      final HostAndPort hap = HostAndPort.parseString(sentinel);\n+    for (HostAndPort sentinel : sentinels) {\n \n-      log.debug(\"Connecting to Sentinel {}\", hap);\n+      LOG.debug(\"Connecting to Sentinel {}\", sentinel);\n \n-      \n-      try (Jedis jedis = new Jedis(hap.getHost(), hap.getPort(), sentinelConnectionTimeout, sentinelSoTimeout)){\n-        if (sentinelUser != null) {\n-          jedis.auth(sentinelUser, sentinelPassword);\n-        } else if (sentinelPassword != null) {\n-          jedis.auth(sentinelPassword);\n-        }\n-        if (sentinelClientName != null) {\n-          jedis.clientSetname(sentinelClientName);\n-        }\n+      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {\n \n         List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);\n \n         // connected to sentinel...\n         sentinelAvailable = true;\n \n         if (masterAddr == null || masterAddr.size() != 2) {\n-          log.warn(\"Can not get master addr, master name: {}. Sentinel: {}\", masterName, hap);\n+          LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}\", masterName, sentinel);\n           continue;\n         }\n \n         master = toHostAndPort(masterAddr);\n-        log.debug(\"Found Redis master at {}\", master);\n+        LOG.debug(\"Found Redis master at {}\", master);\n         break;\n       } catch (JedisException e) {\n         // resolves #1036, it should handle JedisException there's another chance\n         // of raising JedisDataException\n-        log.warn(\n-          \"Cannot get master address from sentinel running @ {}. Reason: {}. Trying next one.\", hap, e);\n+        LOG.warn(\n+          \"Cannot get master address from sentinel running @ {}. Reason: {}. Trying next one.\", sentinel, e);\n       }\n     }\n \n     if (master == null) {\n       if (sentinelAvailable) {\n-        // can connect to sentinel, but master name seems to not\n-        // monitored\n+        // can connect to sentinel, but master name seems to not monitored\n         throw new JedisException(\"Can connect to sentinel, but \" + masterName\n             + \" seems to be not monitored...\");\n       } else {\n@@ -268,11 +250,11 @@ private HostAndPort initSentinels(Set<String> sentinels, final String masterName\n       }\n     }\n \n-    log.info(\"Redis master running at {}, starting Sentinel listeners...\", master);\n+    LOG.info(\"Redis master running at {}, starting Sentinel listeners...\", master);\n+\n+    for (HostAndPort sentinel : sentinels) {\n \n-    for (String sentinel : sentinels) {\n-      final HostAndPort hap = HostAndPort.parseString(sentinel);\n-      MasterListener masterListener = new MasterListener(masterName, hap.getHost(), hap.getPort());\n+      MasterListener masterListener = new MasterListener(masterName, sentinel.getHost(), sentinel.getPort());\n       // whether MasterListener threads are alive or not, process can be stopped\n       masterListener.setDaemon(true);\n       masterListeners.add(masterListener);\n@@ -317,7 +299,7 @@ public void returnResource(final Jedis resource) {\n         returnResourceObject(resource);\n       } catch (Exception e) {\n         returnBrokenResource(resource);\n-        log.debug(\"Resource is returned to the pool as broken\", e);\n+        LOG.debug(\"Resource is returned to the pool as broken\", e);\n       }\n     }\n   }\n@@ -360,28 +342,21 @@ public void run() {\n             break;\n           }\n           \n-          j = new Jedis(host, port, sentinelConnectionTimeout, sentinelSoTimeout);\n-          if (sentinelUser != null) {\n-            j.auth(sentinelUser, sentinelPassword);\n-          } else if (sentinelPassword != null) {\n-            j.auth(sentinelPassword);\n-          }\n-          if (sentinelClientName != null) {\n-            j.clientSetname(sentinelClientName);\n-          }\n+          final HostAndPort hostPort = new HostAndPort(host, port);\n+          j = new Jedis(hostPort, sentinelClientConfig);\n \n           // code for active refresh\n           List<String> masterAddr = j.sentinelGetMasterAddrByName(masterName);\n           if (masterAddr == null || masterAddr.size() != 2) {\n-            log.warn(\"Can not get master addr, master name: {}. Sentinel: {}:{}.\", masterName, host, port);\n+            LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}.\", masterName, hostPort);\n           } else {\n             initPool(toHostAndPort(masterAddr));\n           }\n \n           j.subscribe(new JedisPubSub() {\n             @Override\n             public void onMessage(String channel, String message) {\n-              log.debug(\"Sentinel {}:{} published: {}.\", host, port, message);\n+              LOG.debug(\"Sentinel {} published: {}.\", hostPort, message);\n \n               String[] switchMasterMsg = message.split(\" \");\n \n@@ -390,31 +365,30 @@ public void onMessage(String channel, String message) {\n                 if (masterName.equals(switchMasterMsg[0])) {\n                   initPool(toHostAndPort(Arrays.asList(switchMasterMsg[3], switchMasterMsg[4])));\n                 } else {\n-                  log.debug(\n+                  LOG.debug(\n                     \"Ignoring message on +switch-master for master name {}, our master name is {}\",\n                     switchMasterMsg[0], masterName);\n                 }\n \n               } else {\n-                log.error(\n-                  \"Invalid message received on Sentinel {}:{} on channel +switch-master: {}\", host,\n-                  port, message);\n+                LOG.error(\"Invalid message received on Sentinel {} on channel +switch-master: {}\",\n+                    hostPort, message);\n               }\n             }\n           }, \"+switch-master\");\n \n         } catch (JedisException e) {\n \n           if (running.get()) {\n-            log.error(\"Lost connection to Sentinel at {}:{}. Sleeping 5000ms and retrying.\", host,\n+            LOG.error(\"Lost connection to Sentinel at {}:{}. Sleeping 5000ms and retrying.\", host,\n               port, e);\n             try {\n               Thread.sleep(subscribeRetryWaitTimeMillis);\n             } catch (InterruptedException e1) {\n-              log.error(\"Sleep interrupted: \", e1);\n+              LOG.error(\"Sleep interrupted: \", e1);\n             }\n           } else {\n-            log.debug(\"Unsubscribing from Sentinel at {}:{}\", host, port);\n+            LOG.debug(\"Unsubscribing from Sentinel at {}:{}\", host, port);\n           }\n         } finally {\n           if (j != null) {\n@@ -426,14 +400,14 @@ public void onMessage(String channel, String message) {\n \n     public void shutdown() {\n       try {\n-        log.debug(\"Shutting down listener on {}:{}\", host, port);\n+        LOG.debug(\"Shutting down listener on {}:{}\", host, port);\n         running.set(false);\n         // This isn't good, the Jedis object is not thread safe\n         if (j != null) {\n-          j.disconnect();\n+          j.close();\n         }\n       } catch (Exception e) {\n-        log.error(\"Caught exception while shutting down: \", e);\n+        LOG.error(\"Caught exception while shutting down: \", e);\n       }\n     }\n   }"
  },
  {
    "sha": "6c582c67d5906cbc5e92f78c09482aa0eabca34f",
    "filename": "src/test/java/redis/clients/jedis/tests/SSLJedisSentinelPoolTest.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/redis/jedis/blob/a30e163184fe32758543a62c05e5916638cf3202/src/test/java/redis/clients/jedis/tests/SSLJedisSentinelPoolTest.java",
    "raw_url": "https://github.com/redis/jedis/raw/a30e163184fe32758543a62c05e5916638cf3202/src/test/java/redis/clients/jedis/tests/SSLJedisSentinelPoolTest.java",
    "contents_url": "https://api.github.com/repos/redis/jedis/contents/src/test/java/redis/clients/jedis/tests/SSLJedisSentinelPoolTest.java?ref=a30e163184fe32758543a62c05e5916638cf3202",
    "patch": "@@ -0,0 +1,76 @@\n+package redis.clients.jedis.tests;\n+\n+import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import redis.clients.jedis.DefaultJedisClientConfig;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.HostAndPortMapper;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.JedisSentinelPool;\n+\n+public class SSLJedisSentinelPoolTest {\n+\n+  private static final String MASTER_NAME = \"mymaster\";\n+\n+  private static Set<HostAndPort> sentinels = new HashSet<>();\n+\n+  private static final HostAndPortMapper SSL_PORT_MAPPER = (HostAndPort hap)\n+      -> new HostAndPort(hap.getHost(), hap.getPort() + 10000);\n+\n+  private static final GenericObjectPoolConfig<Jedis> POOL_CONFIG = new GenericObjectPoolConfig<>();\n+\n+  @BeforeClass\n+  public static void prepare() {\n+    SSLJedisTest.setupTrustStore();\n+\n+    sentinels.add(HostAndPortUtil.getSentinelServers().get(1));\n+    sentinels.add(HostAndPortUtil.getSentinelServers().get(3));\n+  }\n+\n+  @Test\n+  public void sentinelWithoutSslConnectsToRedisWithSsl() {\n+    DefaultJedisClientConfig masterConfig = DefaultJedisClientConfig.builder()\n+        .withPassword(\"foobared\").withClientName(\"sentinel-master-client\")\n+        .withSsl(true).withHostAndPortMapper(SSL_PORT_MAPPER).build();\n+    DefaultJedisClientConfig sentinelConfig = DefaultJedisClientConfig.builder()\n+        .withClientName(\"sentinel-client\")\n+        .withSsl(false).build();\n+    try (JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels, POOL_CONFIG,\n+        masterConfig, sentinelConfig)) {\n+      pool.getResource().close();\n+    }\n+  }\n+\n+  @Test\n+  public void sentinelWithSslConnectsToRedisWithoutSsl() {\n+    DefaultJedisClientConfig masterConfig = DefaultJedisClientConfig.builder()\n+        .withPassword(\"foobared\").withClientName(\"sentinel-master-client\")\n+        .withSsl(false).build();\n+    DefaultJedisClientConfig sentinelConfig = DefaultJedisClientConfig.builder()\n+        .withClientName(\"sentinel-client\")\n+        .withSsl(true).withHostAndPortMapper(SSL_PORT_MAPPER).build();\n+    try (JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels, POOL_CONFIG,\n+        masterConfig, sentinelConfig)) {\n+      pool.getResource().close();\n+    }\n+  }\n+\n+  @Test\n+  public void sentinelWithSslConnectsToRedisWithSsl() {\n+    DefaultJedisClientConfig masterConfig = DefaultJedisClientConfig.builder()\n+        .withPassword(\"foobared\").withClientName(\"sentinel-master-client\")\n+        .withSsl(true).withHostAndPortMapper(SSL_PORT_MAPPER).build();\n+    DefaultJedisClientConfig sentinelConfig = DefaultJedisClientConfig.builder()\n+        .withClientName(\"sentinel-client\")\n+        .withSsl(true).withHostAndPortMapper(SSL_PORT_MAPPER).build();\n+    try (JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels, POOL_CONFIG,\n+        masterConfig, sentinelConfig)) {\n+      pool.getResource().close();\n+    }\n+  }\n+\n+}"
  }
]
