[
  {
    "sha": "5ffacbda26ddfb3c412efb977168ef8ccf01cf37",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/build.gradle",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/build.gradle",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/build.gradle?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -6,7 +6,7 @@ plugins {\n     id 'jacoco'\n }\n \n-mainClassName = 'seedu.address.Main'\n+mainClassName = 'seedu.cakecollate.Main'\n \n sourceCompatibility = JavaVersion.VERSION_11\n targetCompatibility = JavaVersion.VERSION_11\n@@ -66,7 +66,7 @@ dependencies {\n }\n \n shadowJar {\n-    archiveName = 'addressbook.jar'\n+    archiveName = 'cakecollate.jar'\n }\n \n defaultTasks 'clean', 'test'"
  },
  {
    "sha": "dc9583f45ff88d617db42a582e57f4d9fc8a7ccb",
    "filename": "docs/DeveloperGuide.md",
    "status": "modified",
    "additions": 29,
    "deletions": 29,
    "changes": 58,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/DeveloperGuide.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/DeveloperGuide.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/DeveloperGuide.md?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -64,7 +64,7 @@ The sections below give more details of each component.\n **API** :\n [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)\n \n-The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.\n+The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `OrderListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.\n \n The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)\n \n@@ -80,9 +80,9 @@ The `UI` component,\n **API** :\n [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)\n \n-1. `Logic` uses the `AddressBookParser` class to parse the user command.\n+1. `Logic` uses the `CakeCollateParser` class to parse the user command.\n 1. This results in a `Command` object which is executed by the `LogicManager`.\n-1. The command execution can affect the `Model` (e.g. adding a person).\n+1. The command execution can affect the `Model` (e.g. adding a order).\n 1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.\n 1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.\n \n@@ -102,12 +102,12 @@ Given below is the Sequence Diagram for interactions within the `Logic` componen\n The `Model`,\n \n * stores a `UserPref` object that represents the user’s preferences.\n-* stores the address book data.\n-* exposes an unmodifiable `ObservableList<Person>` that can be 'observed' e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.\n+* stores the cakecollate data.\n+* exposes an unmodifiable `ObservableList<Order>` that can be 'observed' e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.\n * does not depend on any of the other three components.\n \n \n-<div markdown=\"span\" class=\"alert alert-info\">:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.<br>\n+<div markdown=\"span\" class=\"alert alert-info\">:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `CakeCollate`, which `Order` references. This allows `CakeCollate` to only require one `Tag` object per unique `Tag`, instead of each `Order` needing their own `Tag` object.<br>\n ![BetterModelClassDiagram](images/BetterModelClassDiagram.png)\n \n </div>\n@@ -121,11 +121,11 @@ The `Model`,\n \n The `Storage` component,\n * can save `UserPref` objects in json format and read it back.\n-* can save the address book data in json format and read it back.\n+* can save the cakecollate data in json format and read it back.\n \n ### Common classes\n \n-Classes used by multiple components are in the `seedu.addressbook.commons` package.\n+Classes used by multiple components are in the `seedu.cakecollate.commons` package.\n \n --------------------------------------------------------------------------------------------------------------------\n \n@@ -137,37 +137,37 @@ This section describes some noteworthy details on how certain features are imple\n \n #### Proposed Implementation\n \n-The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:\n+The proposed undo/redo mechanism is facilitated by `VersionedCakeCollate`. It extends `CakeCollate` with an undo/redo history, stored internally as an `cakeCollateStateList` and `currentStatePointer`. Additionally, it implements the following operations:\n \n-* `VersionedAddressBook#commit()` — Saves the current address book state in its history.\n-* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.\n-* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.\n+* `VersionedCakeCollate#commit()` — Saves the current cakecollate state in its history.\n+* `VersionedCakeCollate#undo()` — Restores the previous cakecollate state from its history.\n+* `VersionedCakeCollate#redo()` — Restores a previously undone cakecollate state from its history.\n \n-These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.\n+These operations are exposed in the `Model` interface as `Model#commitCakeCollate()`, `Model#undoCakeCollate()` and `Model#redoCakeCollate()` respectively.\n \n Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.\n \n-Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.\n+Step 1. The user launches the application for the first time. The `VersionedCakeCollate` will be initialized with the initial cakecollate state, and the `currentStatePointer` pointing to that single cakecollate state.\n \n ![UndoRedoState0](images/UndoRedoState0.png)\n \n-Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.\n+Step 2. The user executes `delete 5` command to delete the 5th order in the cakecollate. The `delete` command calls `Model#commitCakeCollate()`, causing the modified state of the cakecollate after the `delete 5` command executes to be saved in the `cakeCollateStateList`, and the `currentStatePointer` is shifted to the newly inserted cakecollate state.\n \n ![UndoRedoState1](images/UndoRedoState1.png)\n \n-Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.\n+Step 3. The user executes `add n/David …​` to add a new order. The `add` command also calls `Model#commitCakeCollate()`, causing another modified cakecollate state to be saved into the `cakeCollateStateList`.\n \n ![UndoRedoState2](images/UndoRedoState2.png)\n \n-<div markdown=\"span\" class=\"alert alert-info\">:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.\n+<div markdown=\"span\" class=\"alert alert-info\">:information_source: **Note:** If a command fails its execution, it will not call `Model#commitCakeCollate()`, so the cakecollate state will not be saved into the `cakeCollateStateList`.\n \n </div>\n \n-Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.\n+Step 4. The user now decides that adding the order was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoCakeCollate()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous cakecollate state, and restores the cakecollate to that state.\n \n ![UndoRedoState3](images/UndoRedoState3.png)\n \n-<div markdown=\"span\" class=\"alert alert-info\">:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather\n+<div markdown=\"span\" class=\"alert alert-info\">:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial CakeCollate state, then there are no previous CakeCollate states to restore. The `undo` command uses `Model#canUndoCakeCollate()` to check if this is the case. If so, it will return an error to the user rather\n than attempting to perform the undo.\n \n </div>\n@@ -180,17 +180,17 @@ The following sequence diagram shows how the undo operation works:\n \n </div>\n \n-The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.\n+The `redo` command does the opposite — it calls `Model#redoCakeCollate()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the cakecollate to that state.\n \n-<div markdown=\"span\" class=\"alert alert-info\">:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.\n+<div markdown=\"span\" class=\"alert alert-info\">:information_source: **Note:** If the `currentStatePointer` is at index `cakeCollateStateList.size() - 1`, pointing to the latest cakecollate state, then there are no undone CakeCollate states to restore. The `redo` command uses `Model#canRedoCakeCollate()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.\n \n </div>\n \n-Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.\n+Step 5. The user then decides to execute the command `list`. Commands that do not modify the cakecollate, such as `list`, will usually not call `Model#commitCakeCollate()`, `Model#undoCakeCollate()` or `Model#redoCakeCollate()`. Thus, the `cakeCollateStateList` remains unchanged.\n \n ![UndoRedoState4](images/UndoRedoState4.png)\n \n-Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.\n+Step 6. The user executes `clear`, which calls `Model#commitCakeCollate()`. Since the `currentStatePointer` is not pointing at the end of the `cakeCollateStateList`, all cakecollate states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.\n \n ![UndoRedoState5](images/UndoRedoState5.png)\n \n@@ -202,13 +202,13 @@ The following activity diagram summarizes what happens when a user executes a ne\n \n ##### Aspect: How undo & redo executes\n \n-* **Alternative 1 (current choice):** Saves the entire address book.\n+* **Alternative 1 (current choice):** Saves the entire cakecollate.\n   * Pros: Easy to implement.\n   * Cons: May have performance issues in terms of memory usage.\n \n * **Alternative 2:** Individual command knows how to undo/redo by\n   itself.\n-  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).\n+  * Pros: Will use less memory (e.g. for `delete`, just save the order being deleted).\n   * Cons: We must ensure that the implementation of each individual command are correct.\n \n _{more aspects and alternatives to be added}_\n@@ -395,17 +395,17 @@ testers are expected to do more *exploratory* testing.\n \n 1. _{ more test cases …​ }_\n \n-### Deleting a person\n+### Deleting a order\n \n-1. Deleting a person while all persons are being shown\n+1. Deleting a order while all orders are being shown\n \n-   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.\n+   1. Prerequisites: List all orders using the `list` command. Multiple orders in the list.\n \n    1. Test case: `delete 1`<br>\n       Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.\n \n    1. Test case: `delete 0`<br>\n-      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.\n+      Expected: No order is deleted. Error details shown in the status message. Status bar remains the same.\n \n    1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)<br>\n       Expected: Similar to previous."
  },
  {
    "sha": "768f1675997bfc944e2601c451c3a2641b06cc81",
    "filename": "docs/SettingUp.md",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/SettingUp.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/SettingUp.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/SettingUp.md?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -23,7 +23,7 @@ If you plan to use Intellij IDEA (highly recommended):\n 1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.<br>\n   :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.\n 1. **Verify the setup**:\n-   1. Run the `seedu.address.Main` and try a few commands.\n+   1. Run the `seedu.cakecollate.Main` and try a few commands.\n    1. [Run the tests](Testing.md) to ensure they all pass.\n \n --------------------------------------------------------------------------------------------------------------------\n@@ -45,7 +45,7 @@ If you plan to use Intellij IDEA (highly recommended):\n \n 1. **Learn the design**\n \n-   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).\n+   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [CakeCollate’s architecture](DeveloperGuide.md#architecture).\n \n 1. **Do the tutorials**\n    These tutorials will help you get acquainted with the codebase."
  },
  {
    "sha": "f5c4f196ada83334a141c8d570b879df87b8bdd3",
    "filename": "docs/Testing.md",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/Testing.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/Testing.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/Testing.md?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -29,8 +29,8 @@ There are two ways to run tests.\n This project has three types of tests:\n \n 1. *Unit tests* targeting the lowest level methods/classes.<br>\n-   e.g. `seedu.address.commons.StringUtilTest`\n+   e.g. `seedu.cakecollate.commons.StringUtilTest`\n 1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).<br>\n-   e.g. `seedu.address.storage.StorageManagerTest`\n+   e.g. `seedu.cakecollate.storage.StorageManagerTest`\n 1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.<br>\n-   e.g. `seedu.address.logic.LogicManagerTest`\n+   e.g. `seedu.cakecollate.logic.LogicManagerTest`"
  },
  {
    "sha": "91120426395d5ff8319a8f4878c33b328cd4fd1d",
    "filename": "docs/UserGuide.md",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/UserGuide.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/UserGuide.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/UserGuide.md?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -82,7 +82,7 @@ Adds an order to the CakeCollate database.\n Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] d/DELIVERY_DATE o/ORDER_DESCRIPTION`\n \n <div markdown=\"span\" class=\"alert alert-primary\">:bulb: **Tip:**\n-A person can have any number of tags (including 0)\n+A order can have any number of tags (including 0)\n </div>\n \n Examples:\n@@ -104,25 +104,25 @@ Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG] [d/DELIVERY\n * Edits the order at the specified `INDEX`. The index refers to the index number shown in the displayed order list. The index **must be a positive integer** 1, 2, 3, …​\n * At least one of the optional fields must be provided.\n * Existing values will be updated to the input values.\n-* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.\n+* When editing tags, the existing tags of the order will be removed i.e adding of tags is not cumulative.\n * You can remove all the order’s tags by typing `t/` without\n     specifying any tags after it.\n \n Examples:\n *  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st order to be `91234567` and `johndoe@example.com` respectively.\n *  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd order to be `Betsy Crower` and clears all existing tags.\n \n-### Locating persons by name: `find`\n+### Locating orders by name: `find`\n \n-Finds persons whose names contain any of the given keywords.\n+Finds orders whose names contain any of the given keywords.\n \n Format: `find KEYWORD [MORE_KEYWORDS]`\n \n * The search is case-insensitive. e.g `hans` will match `Hans`\n * The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`\n * Only the name is searched.\n * Only full words will be matched e.g. `Han` will not match `Hans`\n-* Persons matching at least one keyword will be returned (i.e. `OR` search).\n+* Orders matching at least one keyword will be returned (i.e. `OR` search).\n   e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`\n \n Examples:"
  },
  {
    "sha": "3835d05fdece577f6fff48fceb7ed0f5a7b6629d",
    "filename": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/ArchitectureSequenceDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/ArchitectureSequenceDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/ArchitectureSequenceDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -13,13 +13,13 @@ activate ui UI_COLOR\n ui -[UI_COLOR]> logic : execute(\"delete 1\")\n activate logic LOGIC_COLOR\n \n-logic -[LOGIC_COLOR]> model : deletePerson(p)\n+logic -[LOGIC_COLOR]> model : deleteOrder(p)\n activate model MODEL_COLOR\n \n model -[MODEL_COLOR]-> logic\n deactivate model\n \n-logic -[LOGIC_COLOR]> storage : saveAddressBook(addressBook)\n+logic -[LOGIC_COLOR]> storage : saveCakeCollate(cakeCollate)\n activate storage STORAGE_COLOR\n \n storage -[STORAGE_COLOR]> storage : Save to file"
  },
  {
    "sha": "9fce46c078c420406ff864d5bf0b0e040a920c46",
    "filename": "docs/diagrams/BetterModelClassDiagram.puml",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/BetterModelClassDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/BetterModelClassDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/BetterModelClassDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -4,18 +4,18 @@ skinparam arrowThickness 1.1\n skinparam arrowColor MODEL_COLOR\n skinparam classBackgroundColor MODEL_COLOR\n \n-AddressBook *-right-> \"1\" UniquePersonList\n-AddressBook *-right-> \"1\" UniqueTagList\n-UniqueTagList -[hidden]down- UniquePersonList\n-UniqueTagList -[hidden]down- UniquePersonList\n+CakeCollate *-right-> \"1\" UniqueOrderList\n+CakeCollate *-right-> \"1\" UniqueTagList\n+UniqueTagList -[hidden]down- UniqueOrderList\n+UniqueTagList -[hidden]down- UniqueOrderList\n \n UniqueTagList *-right-> \"*\" Tag\n-UniquePersonList o-right-> Person\n+UniqueOrderList o-right-> Order\n \n-Person -up-> \"*\" Tag\n+Order -up-> \"*\" Tag\n \n-Person *--> Name\n-Person *--> Phone\n-Person *--> Email\n-Person *--> Address\n+Order *--> Name\n+Order *--> Phone\n+Order *--> Email\n+Order *--> Address\n @enduml"
  },
  {
    "sha": "a1dd7883435fa1ed6eedef04fbe67ab0a9df87b3",
    "filename": "docs/diagrams/CommitActivityDiagram.puml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/CommitActivityDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/CommitActivityDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/CommitActivityDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -5,10 +5,10 @@ start\n 'Since the beta syntax does not support placing the condition outside the\n 'diamond we place it as the true branch instead.\n \n-if () then ([command commits AddressBook])\n+if () then ([command commits CakeCollate])\n     :Purge redundant states;\n-    :Save AddressBook to\n-    addressBookStateList;\n+    :Save CakeCollate to\n+    cakeCollateStateList;\n else ([else])\n endif\n stop"
  },
  {
    "sha": "e4440ec188466e77291b618511637d64962f8cd2",
    "filename": "docs/diagrams/DeleteSequenceDiagram.puml",
    "status": "modified",
    "additions": 11,
    "deletions": 11,
    "changes": 22,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/DeleteSequenceDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/DeleteSequenceDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/DeleteSequenceDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -3,7 +3,7 @@\n \n box Logic LOGIC_COLOR_T1\n participant \":LogicManager\" as LogicManager LOGIC_COLOR\n-participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR\n+participant \":CakeCollateParser\" as CakeCollateParser LOGIC_COLOR\n participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR\n participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR\n participant \":CommandResult\" as CommandResult LOGIC_COLOR\n@@ -16,17 +16,17 @@ end box\n [-> LogicManager : execute(\"delete 1\")\n activate LogicManager\n \n-LogicManager -> AddressBookParser : parseCommand(\"delete 1\")\n-activate AddressBookParser\n+LogicManager -> CakeCollateParser : parseCommand(\"delete 1\")\n+activate CakeCollateParser\n \n create DeleteCommandParser\n-AddressBookParser -> DeleteCommandParser\n+CakeCollateParser -> DeleteCommandParser\n activate DeleteCommandParser\n \n-DeleteCommandParser --> AddressBookParser\n+DeleteCommandParser --> CakeCollateParser\n deactivate DeleteCommandParser\n \n-AddressBookParser -> DeleteCommandParser : parse(\"1\")\n+CakeCollateParser -> DeleteCommandParser : parse(\"1\")\n activate DeleteCommandParser\n \n create DeleteCommand\n@@ -36,19 +36,19 @@ activate DeleteCommand\n DeleteCommand --> DeleteCommandParser : d\n deactivate DeleteCommand\n \n-DeleteCommandParser --> AddressBookParser : d\n+DeleteCommandParser --> CakeCollateParser : d\n deactivate DeleteCommandParser\n 'Hidden arrow to position the destroy marker below the end of the activation bar.\n-DeleteCommandParser -[hidden]-> AddressBookParser\n+DeleteCommandParser -[hidden]-> CakeCollateParser\n destroy DeleteCommandParser\n \n-AddressBookParser --> LogicManager : d\n-deactivate AddressBookParser\n+CakeCollateParser --> LogicManager : d\n+deactivate CakeCollateParser\n \n LogicManager -> DeleteCommand : execute()\n activate DeleteCommand\n \n-DeleteCommand -> Model : deletePerson(1)\n+DeleteCommand -> Model : deleteOrder(1)\n activate Model\n \n Model --> DeleteCommand"
  },
  {
    "sha": "08af2555f2e3073981912ba34f286c7f14d0022a",
    "filename": "docs/diagrams/LogicClassDiagram.puml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/LogicClassDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/LogicClassDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/LogicClassDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -8,7 +8,7 @@ package Logic {\n \n package Parser {\n Interface Parser <<Interface>>\n-Class AddressBookParser\n+Class CakeCollateParser\n Class XYZCommandParser\n Class CliSyntax\n Class ParserUtil\n@@ -35,8 +35,8 @@ Class HiddenOutside #FFFFFF\n HiddenOutside ..> Logic\n \n LogicManager .up.|> Logic\n-LogicManager -->\"1\" AddressBookParser\n-AddressBookParser .left.> XYZCommandParser: creates >\n+LogicManager -->\"1\" CakeCollateParser\n+CakeCollateParser .left.> XYZCommandParser: creates >\n \n XYZCommandParser ..> XYZCommand : creates >\n XYZCommandParser ..|> Parser"
  },
  {
    "sha": "b4f9bf95e59073a7de6aba8780434590868cf9ab",
    "filename": "docs/diagrams/ModelClassDiagram.puml",
    "status": "modified",
    "additions": 16,
    "deletions": 16,
    "changes": 32,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/ModelClassDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/ModelClassDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/ModelClassDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -5,23 +5,23 @@ skinparam arrowColor MODEL_COLOR\n skinparam classBackgroundColor MODEL_COLOR\n \n Package Model <<Rectangle>>{\n-Interface ReadOnlyAddressBook <<Interface>>\n+Interface ReadOnlyCakeCollate <<Interface>>\n Interface Model <<Interface>>\n Interface ObservableList <<Interface>>\n-Class AddressBook\n-Class ReadOnlyAddressBook\n+Class CakeCollate\n+Class ReadOnlyCakeCollate\n Class Model\n Class ModelManager\n Class UserPrefs\n Class ReadOnlyUserPrefs\n \n-Package Person {\n-Class Person\n+Package Order {\n+Class Order\n Class Address\n Class Email\n Class Name\n Class Phone\n-Class UniquePersonList\n+Class UniqueOrderList\n }\n \n Package Tag {\n@@ -32,25 +32,25 @@ Class Tag\n Class HiddenOutside #FFFFFF\n HiddenOutside ..> Model\n \n-AddressBook .up.|> ReadOnlyAddressBook\n+CakeCollate .up.|> ReadOnlyCakeCollate\n \n ModelManager .up.|> Model\n Model .right.> ObservableList\n-ModelManager o--> \"1\" AddressBook\n+ModelManager o--> \"1\" CakeCollate\n ModelManager o-left-> \"1\" UserPrefs\n UserPrefs .up.|> ReadOnlyUserPrefs\n \n-AddressBook *--> \"1\" UniquePersonList\n-UniquePersonList o--> \"*\" Person\n-Person *--> Name\n-Person *--> Phone\n-Person *--> Email\n-Person *--> Address\n-Person *--> \"*\" Tag\n+CakeCollate *--> \"1\" UniqueOrderList\n+UniqueOrderList o--> \"*\" Order\n+Order *--> Name\n+Order *--> Phone\n+Order *--> Email\n+Order *--> Address\n+Order *--> \"*\" Tag\n \n Name -[hidden]right-> Phone\n Phone -[hidden]right-> Address\n Address -[hidden]right-> Email\n \n-ModelManager ----->\" ~* filtered list\" Person\n+ModelManager ----->\" ~* filtered list\" Order\n @enduml"
  },
  {
    "sha": "96e7881f201372b7b4ed5f8493f6ec304e6435b5",
    "filename": "docs/diagrams/StorageClassDiagram.puml",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/StorageClassDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/StorageClassDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/StorageClassDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -6,19 +6,19 @@ skinparam classBackgroundColor STORAGE_COLOR\n \n Interface Storage <<Interface>>\n Interface UserPrefsStorage <<Interface>>\n-Interface AddressBookStorage <<Interface>>\n+Interface CakeCollateStorage <<Interface>>\n \n Class StorageManager\n Class JsonUserPrefsStorage\n-Class JsonAddressBookStorage\n+Class JsonCakeCollateStorage\n \n StorageManager .left.|> Storage\n StorageManager o-right-> UserPrefsStorage\n-StorageManager o--> AddressBookStorage\n+StorageManager o--> CakeCollateStorage\n \n JsonUserPrefsStorage .left.|> UserPrefsStorage\n-JsonAddressBookStorage .left.|> AddressBookStorage\n-JsonAddressBookStorage .down.> JsonSerializableAddressBookStorage\n-JsonSerializableAddressBookStorage .right.> JsonSerializablePerson\n-JsonSerializablePerson .right.> JsonAdaptedTag\n+JsonCakeCollateStorage .left.|> CakeCollateStorage\n+JsonCakeCollateStorage .down.> JsonSerializableCakeCollateStorage\n+JsonSerializableCakeCollateStorage .right.> JsonSerializableOrder\n+JsonSerializableOrder .right.> JsonAdaptedTag\n @enduml"
  },
  {
    "sha": "b2dba9d3e15e89d390b54ad2989d6086c135d397",
    "filename": "docs/diagrams/UiClassDiagram.puml",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UiClassDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UiClassDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/UiClassDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -11,8 +11,8 @@ Class UiManager\n Class MainWindow\n Class HelpWindow\n Class ResultDisplay\n-Class PersonListPanel\n-Class PersonCard\n+Class OrderListPanel\n+Class OrderCard\n Class StatusBarFooter\n Class CommandBox\n }\n@@ -33,25 +33,25 @@ UiManager -down-> MainWindow\n MainWindow --> HelpWindow\n MainWindow *-down-> CommandBox\n MainWindow *-down-> ResultDisplay\n-MainWindow *-down-> PersonListPanel\n+MainWindow *-down-> OrderListPanel\n MainWindow *-down-> StatusBarFooter\n \n-PersonListPanel -down-> PersonCard\n+OrderListPanel -down-> OrderCard\n \n MainWindow -left-|> UiPart\n \n ResultDisplay --|> UiPart\n CommandBox --|> UiPart\n-PersonListPanel --|> UiPart\n-PersonCard --|> UiPart\n+OrderListPanel --|> UiPart\n+OrderCard --|> UiPart\n StatusBarFooter --|> UiPart\n HelpWindow -down-|> UiPart\n \n-PersonCard ..> Model\n+OrderCard ..> Model\n UiManager -right-> Logic\n MainWindow -left-> Logic\n \n-PersonListPanel -[hidden]left- HelpWindow\n+OrderListPanel -[hidden]left- HelpWindow\n HelpWindow -[hidden]left- CommandBox\n CommandBox -[hidden]left- ResultDisplay\n ResultDisplay -[hidden]left- StatusBarFooter"
  },
  {
    "sha": "e944a37af1f168b72aba35bac964ace76808ec24",
    "filename": "docs/diagrams/UndoRedoState0.puml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState0.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState0.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/UndoRedoState0.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -6,9 +6,9 @@ skinparam ClassBorderColor #000000\n title Initial state\n \n package States {\n-    class State1 as \"__ab0:AddressBook__\"\n-    class State2 as \"__ab1:AddressBook__\"\n-    class State3 as \"__ab2:AddressBook__\"\n+    class State1 as \"__ab0:CakeCollate__\"\n+    class State2 as \"__ab1:CakeCollate__\"\n+    class State3 as \"__ab2:CakeCollate__\"\n }\n State1 -[hidden]right-> State2\n State2 -[hidden]right-> State3"
  },
  {
    "sha": "df7b37363ac68d8e0c4a969f62ba3d49c077a2cc",
    "filename": "docs/diagrams/UndoRedoState1.puml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState1.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState1.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/UndoRedoState1.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -6,9 +6,9 @@ skinparam ClassBorderColor #000000\n title After command \"delete 5\"\n \n package States <<rectangle>> {\n-    class State1 as \"__ab0:AddressBook__\"\n-    class State2 as \"__ab1:AddressBook__\"\n-    class State3 as \"__ab2:AddressBook__\"\n+    class State1 as \"__ab0:CakeCollate__\"\n+    class State2 as \"__ab1:CakeCollate__\"\n+    class State3 as \"__ab2:CakeCollate__\"\n }\n \n State1 -[hidden]right-> State2"
  },
  {
    "sha": "2a97f31a77ad46252b2f1ae0e5013bcf951034dd",
    "filename": "docs/diagrams/UndoRedoState2.puml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState2.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState2.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/UndoRedoState2.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -6,9 +6,9 @@ skinparam ClassBorderColor #000000\n title After command \"add n/David\"\n \n package States <<rectangle>> {\n-    class State1 as \"__ab0:AddressBook__\"\n-    class State2 as \"__ab1:AddressBook__\"\n-    class State3 as \"__ab2:AddressBook__\"\n+    class State1 as \"__ab0:CakeCollate__\"\n+    class State2 as \"__ab1:CakeCollate__\"\n+    class State3 as \"__ab2:CakeCollate__\"\n }\n \n State1 -[hidden]right-> State2"
  },
  {
    "sha": "8dcbc665dda4cada6559cc08f5d09aa84f057c7a",
    "filename": "docs/diagrams/UndoRedoState3.puml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState3.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState3.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/UndoRedoState3.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -6,9 +6,9 @@ skinparam ClassBorderColor #000000\n title After command \"undo\"\n \n package States <<rectangle>> {\n-    class State1 as \"__ab0:AddressBook__\"\n-    class State2 as \"__ab1:AddressBook__\"\n-    class State3 as \"__ab2:AddressBook__\"\n+    class State1 as \"__ab0:CakeCollate__\"\n+    class State2 as \"__ab1:CakeCollate__\"\n+    class State3 as \"__ab2:CakeCollate__\"\n }\n \n State1 -[hidden]right-> State2"
  },
  {
    "sha": "36c64ba7edde8909681ddd46e86161f525ffb4ab",
    "filename": "docs/diagrams/UndoRedoState4.puml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState4.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState4.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/UndoRedoState4.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -6,9 +6,9 @@ skinparam ClassBorderColor #000000\n title After command \"list\"\n \n package States <<rectangle>> {\n-    class State1 as \"__ab0:AddressBook__\"\n-    class State2 as \"__ab1:AddressBook__\"\n-    class State3 as \"__ab2:AddressBook__\"\n+    class State1 as \"__ab0:CakeCollate__\"\n+    class State2 as \"__ab1:CakeCollate__\"\n+    class State3 as \"__ab2:CakeCollate__\"\n }\n \n State1 -[hidden]right-> State2"
  },
  {
    "sha": "86df30f4712b102f99bb829156705b527d30abda",
    "filename": "docs/diagrams/UndoRedoState5.puml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState5.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoRedoState5.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/UndoRedoState5.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -6,9 +6,9 @@ skinparam ClassBorderColor #000000\n title After command \"clear\"\n \n package States <<rectangle>> {\n-    class State1 as \"__ab0:AddressBook__\"\n-    class State2 as \"__ab1:AddressBook__\"\n-    class State3 as \"__ab3:AddressBook__\"\n+    class State1 as \"__ab0:CakeCollate__\"\n+    class State2 as \"__ab1:CakeCollate__\"\n+    class State3 as \"__ab3:CakeCollate__\"\n }\n \n State1 -[hidden]right-> State2"
  },
  {
    "sha": "194318caee29c9b57ffa33719d327e507813ed54",
    "filename": "docs/diagrams/UndoSequenceDiagram.puml",
    "status": "modified",
    "additions": 14,
    "deletions": 14,
    "changes": 28,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoSequenceDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/UndoSequenceDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/UndoSequenceDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -3,42 +3,42 @@\n \n box Logic LOGIC_COLOR_T1\n participant \":LogicManager\" as LogicManager LOGIC_COLOR\n-participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR\n+participant \":CakeCollateParser\" as CakeCollateParser LOGIC_COLOR\n participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR\n end box\n \n box Model MODEL_COLOR_T1\n participant \":Model\" as Model MODEL_COLOR\n-participant \":VersionedAddressBook\" as VersionedAddressBook MODEL_COLOR\n+participant \":VersionedCakeCollate\" as VersionedCakeCollate MODEL_COLOR\n end box\n [-> LogicManager : execute(undo)\n activate LogicManager\n \n-LogicManager -> AddressBookParser : parseCommand(undo)\n-activate AddressBookParser\n+LogicManager -> CakeCollateParser : parseCommand(undo)\n+activate CakeCollateParser\n \n create UndoCommand\n-AddressBookParser -> UndoCommand\n+CakeCollateParser -> UndoCommand\n activate UndoCommand\n \n-UndoCommand --> AddressBookParser\n+UndoCommand --> CakeCollateParser\n deactivate UndoCommand\n \n-AddressBookParser --> LogicManager : u\n-deactivate AddressBookParser\n+CakeCollateParser --> LogicManager : u\n+deactivate CakeCollateParser\n \n LogicManager -> UndoCommand : execute()\n activate UndoCommand\n \n-UndoCommand -> Model : undoAddressBook()\n+UndoCommand -> Model : undoCakeCollate()\n activate Model\n \n-Model -> VersionedAddressBook : undo()\n-activate VersionedAddressBook\n+Model -> VersionedCakeCollate : undo()\n+activate VersionedCakeCollate\n \n-VersionedAddressBook -> VersionedAddressBook :resetData(ReadOnlyAddressBook)\n-VersionedAddressBook --> Model :\n-deactivate VersionedAddressBook\n+VersionedCakeCollate -> VersionedCakeCollate :resetData(ReadOnlyCakeCollate)\n+VersionedCakeCollate --> Model :\n+deactivate VersionedCakeCollate\n \n Model --> UndoCommand\n deactivate Model"
  },
  {
    "sha": "1da59dea3496f5e8755495c261c203f753cd3ee9",
    "filename": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/diagrams/tracing/LogicSequenceDiagram.puml?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -2,7 +2,7 @@\n !include ../style.puml\n \n Participant \":LogicManager\" as logic LOGIC_COLOR\n-Participant \":AddressBookParser\" as abp LOGIC_COLOR\n+Participant \":CakeCollateParser\" as abp LOGIC_COLOR\n Participant \":EditCommandParser\" as ecp LOGIC_COLOR\n Participant \"command:EditCommand\" as ec LOGIC_COLOR\n \n@@ -13,7 +13,7 @@ create ecp\n abp -> ecp\n abp -> ecp ++: parse(arguments)\n create ec\n-ecp -> ec ++: index, editPersonDescriptor\n+ecp -> ec ++: index, editOrderDescriptor\n ec --> ecp --\n ecp --> abp --: command\n abp --> logic --: command"
  },
  {
    "sha": "b9e56a9f3bbdd480f64cf5c04316334eaa765586",
    "filename": "docs/team/pavz02.md",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/team/pavz02.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/team/pavz02.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/team/pavz02.md?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -5,7 +5,7 @@ title: Pavitra's Project Portfolio Page\n \n ## Project: CakeCollate\n \n-AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.\n+CakeCollate - Level 3 is a desktop cakecollate application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.\n \n Given below are my contributions to the project.\n "
  },
  {
    "sha": "6494d0336600c2e6fcab0e0c5e4205b61f70ca2b",
    "filename": "docs/tutorials/AddRemark.md",
    "status": "modified",
    "additions": 48,
    "deletions": 48,
    "changes": 96,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/tutorials/AddRemark.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/tutorials/AddRemark.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/tutorials/AddRemark.md?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -5,7 +5,7 @@ title: \"Tutorial: Adding a command\"\n \n Let's walk you through the implementation of a new command — `remark`.\n \n-This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:\n+This command allows users of the CakeCollate application to add optional remarks to people in their cakecollate and edit it if required. The command should have the following format:\n \n `remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)\n \n@@ -23,12 +23,12 @@ For now, let’s keep `RemarkCommand` as simple as possible and print some outpu\n **`RemarkCommand.java`:**\n \n ``` java\n-package seedu.address.logic.commands;\n+package seedu.cakecollate.logic.commands;\n \n-import seedu.address.model.Model;\n+import seedu.cakecollate.model.Model;\n \n /**\n- * Changes the remark of an existing person in the address book.\n+ * Changes the remark of an existing order in the cakecollate.\n  */\n public class RemarkCommand extends Command {\n \n@@ -43,7 +43,7 @@ public class RemarkCommand extends Command {\n \n ### Hook `RemarkCommand` into the application\n \n-Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.\n+Now that we have our `RemarkCommand` ready to be executed, we need to update `CakeCollateParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.\n \n You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).\n \n@@ -64,8 +64,8 @@ Following the convention in other commands, we add relevant messages as constant\n **`RemarkCommand.java`:**\n \n ``` java\n-    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Edits the remark of the person identified \"\n-            + \"by the index number used in the last person listing. \"\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Edits the remark of the order identified \"\n+            + \"by the index number used in the last order listing. \"\n             + \"Existing remark will be overwritten by the input.\\n\"\n             + \"Parameters: INDEX (must be a positive integer) \"\n             + \"r/ [REMARK]\\n\"\n@@ -89,7 +89,7 @@ Let’s change `RemarkCommand` to parse input from the user.\n We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.\n \n ``` java\n-import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n+import static seedu.cakecollate.commons.util.CollectionUtil.requireAllNonNull;\n //...\n public class RemarkCommand extends Command {\n     //...\n@@ -99,8 +99,8 @@ public class RemarkCommand extends Command {\n     private final String remark;\n \n     /**\n-     * @param index of the person in the filtered person list to edit the remark\n-     * @param remark of the person to be updated to\n+     * @param index of the order in the filtered order list to edit the remark\n+     * @param remark of the order to be updated to\n      */\n     public RemarkCommand(Index index, String remark) {\n         requireAllNonNull(index, remark);\n@@ -139,7 +139,7 @@ Your code should look something like [this](https://github.com/se-edu/addressboo\n \n Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.\n \n-Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.\n+Create a `RemarkCommandParser` class in the `seedu.cakecollate.logic.parser` package. The class must extend the `Parser` interface.\n \n ![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)\n \n@@ -213,7 +213,7 @@ public RemarkCommand parse(String args) throws ParseException {\n \n <div markdown=\"span\" class=\"alert alert-primary\">\n \n-:information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!\n+:information_source: Don’t forget to update `CakeCollateParser` to use our new `RemarkCommandParser`!\n \n </div>\n \n@@ -222,11 +222,11 @@ If you are stuck, check out the sample\n \n ## Add `Remark` to the model\n \n-Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.\n+Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of order data. We achieve that by working with the `Order` model. Each field in a Order is implemented as a separate class (e.g. a `Name` object represents the order’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a order.\n \n ### Add a new `Remark` class\n \n-Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.\n+Create a new `Remark` in `seedu.cakecollate.model.order`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.\n \n A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input\n validation.\n@@ -237,11 +237,11 @@ Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark`\n \n ## Add a placeholder element for remark to the UI\n \n-Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.\n+Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each order.\n \n-Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).\n+Simply add the following to [`seedu.cakecollate.ui.OrderCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).\n \n-**`PersonCard.java`:**\n+**`OrderCard.java`:**\n \n ``` java\n @FXML\n@@ -251,9 +251,9 @@ private Label remark;\n \n `@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.\n \n-Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).\n+Then insert the following into [`main/resources/view/OrderListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).\n \n-**`PersonListCard.fxml`:**\n+**`OrderListCard.fxml`:**\n \n ``` xml\n <Label fx:id=\"remark\" styleClass=\"cell_small_label\" text=\"\\$remark\" />\n@@ -263,21 +263,21 @@ That’s it! Fire up the application again and you should see something like thi\n \n ![$remark shows up in each entry](../images/add-remark/$Remark.png)\n \n-## Modify `Person` to support a `Remark` field\n+## Modify `Order` to support a `Remark` field\n \n-Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!\n+Since `OrderCard` displays data from a `Order`, we need to update `Order` to get our `Remark` displayed!\n \n-### Modify `Person`\n+### Modify `Order`\n \n-We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.\n+We change the constructor of `Order` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.\n \n-### Update other usages of `Person`\n+### Update other usages of `Order`\n \n-Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!\n+Unfortunately, a change to `Order` will cause other commands to break, you will have to modify these commands to use the updated `Order`!\n \n <div markdown=\"span\" class=\"alert alert-primary\">\n \n-:bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.\n+:bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Order` class to find these commands.\n \n </div>\n \n@@ -286,13 +286,13 @@ Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998\n \n ## Updating Storage\n \n-AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!\n+CakeCollate stores data by serializing `JsonAdaptedOrder` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedOrder` to work with our new `Order`!\n \n While the changes to code may be minimal, the test data will have to be updated as well.\n \n <div markdown=\"span\" class=\"alert alert-warning\">\n \n-:exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!\n+:exclamation: You must delete CakeCollate’s storage file located at `/data/cakecollate.json` before running it! Not doing so will cause CakeCollate to default to an empty cakeCollate!\n \n </div>\n \n@@ -301,16 +301,16 @@ to see what the changes entail.\n \n ## Finalizing the UI\n \n-Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.\n+Now that we have finalized the `Order` class and its dependencies, we can now bind the `Remark` field to the UI.\n \n Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)\n \n-**`PersonCard.java`:**\n+**`OrderCard.java`:**\n \n ``` java\n-public PersonCard(Person person, int displayedIndex) {\n+public OrderCard(Order order, int displayedIndex) {\n     //...\n-    remark.setText(person.getRemark().value);\n+    remark.setText(order.getRemark().value);\n }\n ```\n \n@@ -322,41 +322,41 @@ After the previous step, we notice a peculiar regression — we went from di\n \n ### Update `RemarkCommand` and `RemarkCommandParser`\n \n-In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and\n-save it with `Model#setPerson()`.\n+In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Order`. Since all fields in a `Order` are immutable, we create a new instance of a `Order` with the values that we want and\n+save it with `Model#setOrder()`.\n \n **`RemarkCommand.java`:**\n \n ``` java\n //...\n-    public static final String MESSAGE_ADD_REMARK_SUCCESS = \"Added remark to Person: %1$s\";\n-    public static final String MESSAGE_DELETE_REMARK_SUCCESS = \"Removed remark from Person: %1$s\";\n+    public static final String MESSAGE_ADD_REMARK_SUCCESS = \"Added remark to Order: %1$s\";\n+    public static final String MESSAGE_DELETE_REMARK_SUCCESS = \"Removed remark from Order: %1$s\";\n //...\n     @Override\n     public CommandResult execute(Model model) throws CommandException {\n-        List<Person> lastShownList = model.getFilteredPersonList();\n+        List<Order> lastShownList = model.getFilteredOrderList();\n \n         if (index.getZeroBased() >= lastShownList.size()) {\n-            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);\n         }\n \n-        Person personToEdit = lastShownList.get(index.getZeroBased());\n-        Person editedPerson = new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),\n-                personToEdit.getAddress(), remark, personToEdit.getTags());\n+        Order orderToEdit = lastShownList.get(index.getZeroBased());\n+        Order editedOrder = new Order(orderToEdit.getName(), orderToEdit.getPhone(), orderToEdit.getEmail(),\n+                orderToEdit.getAddress(), remark, orderToEdit.getTags());\n \n-        model.setPerson(personToEdit, editedPerson);\n-        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n+        model.setOrder(orderToEdit, editedOrder);\n+        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);\n \n-        return new CommandResult(generateSuccessMessage(editedPerson));\n+        return new CommandResult(generateSuccessMessage(editedOrder));\n     }\n \n     /**\n      * Generates a command execution success message based on whether the remark is added to or removed from\n-     * {@code personToEdit}.\n+     * {@code orderToEdit}.\n      */\n-    private String generateSuccessMessage(Person personToEdit) {\n+    private String generateSuccessMessage(Order orderToEdit) {\n         String message = !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;\n-        return String.format(message, personToEdit);\n+        return String.format(message, orderToEdit);\n     }\n ```\n \n@@ -391,4 +391,4 @@ You should end up with a test that looks something like [this](https://github.co\n \n ## Conclusion\n \n-This concludes the tutorial for adding a new `Command` to AddressBook.\n+This concludes the tutorial for adding a new `Command` to CakeCollate."
  },
  {
    "sha": "6a897f12ffffc43a5e84f2a762f451a401b3c3a9",
    "filename": "docs/tutorials/RemovingFields.md",
    "status": "modified",
    "additions": 14,
    "deletions": 14,
    "changes": 28,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/tutorials/RemovingFields.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/tutorials/RemovingFields.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/tutorials/RemovingFields.md?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -7,9 +7,9 @@ title: \"Tutorial: Removing Fields\"\n >\n > —  Antoine de Saint-Exupery\n \n-When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case.\n+When working on CakeCollate, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Order` model to suit your use case.\n \n-In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`.\n+In this tutorial, we’ll do exactly just that and remove the `address` field from `Order`.\n \n * Table of Contents\n {:toc}\n@@ -20,19 +20,19 @@ Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify\n \n ### Assisted refactoring\n \n-The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`'s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\> `Safe Delete` through the menu.\n+The `address` field in `Order` is actually an instance of the `seedu.cakecollate.model.order.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`'s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\> `Safe Delete` through the menu.\n \n ![Usages detected](../images/remove/UnsafeDelete.png)\n \n Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.\n \n ![List of conflicts](../images/remove/SafeDeleteConflicts.png)\n \n-Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.\n+Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditOrderDescriptor` may require more careful inspection.\n \n-Let’s try removing references to `Address` in `EditPersonDescriptor`.\n+Let’s try removing references to `Address` in `EditOrderDescriptor`.\n \n-1. Safe delete the field `address` in `EditPersonDescriptor`.\n+1. Safe delete the field `address` in `EditOrderDescriptor`.\n \n 1. Select `Yes` when prompted to remove getters and setters.\n \n@@ -43,7 +43,7 @@ Let’s try removing references to `Address` in `EditPersonDescriptor`.\n \n    <div markdown=\"span\" class=\"alert alert-primary\">\n \n-   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.\n+   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Order` class will require you to modify its constructor.\n    </div>\n \n 1. Repeat the steps for the remaining usages of `Address`\n@@ -54,13 +54,13 @@ After you are done, verify that the application still works by compiling and run\n \n Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\> `Find` \\> `Find in path`).\n \n-Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.\n+Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `OrderCard` that has not been removed nor identified.\n \n ![$address](../images/remove/$address.png)\n \n-A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.\n+A quick look at the `OrderCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.\n \n-**`PersonCard.java`**\n+**`OrderCard.java`**\n \n ``` java\n ...\n@@ -69,7 +69,7 @@ private Label address;\n ...\n ```\n \n-**`PersonCard.fxml`**\n+**`OrderCard.fxml`**\n \n ``` xml\n ...\n@@ -87,12 +87,12 @@ At this point, your application is working as intended and all your tests are pa\n \n In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.\n \n-**`invalidPersonAddressBook.json`:**\n+**`invalidOrderCakeCollate.json`:**\n \n ```json\n {\n-  \"persons\": [ {\n-    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",\n+  \"orders\": [ {\n+    \"name\": \"Order with invalid name field: Ha!ns Mu@ster\",\n     \"phone\": \"9482424\",\n     \"email\": \"hans@example.com\",\n     \"address\": \"4th street\""
  },
  {
    "sha": "4a125f9c32563d9752ae4bd73d8d2574cdb49897",
    "filename": "docs/tutorials/TracingCode.md",
    "status": "modified",
    "additions": 27,
    "deletions": 27,
    "changes": 54,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/tutorials/TracingCode.md",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/8898edf8ada45421c1e6bbc5819a9bff9bacf3d6/docs/tutorials/TracingCode.md",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/docs/tutorials/TracingCode.md?ref=8898edf8ada45421c1e6bbc5819a9bff9bacf3d6",
    "patch": "@@ -32,7 +32,7 @@ Before we proceed, ensure that you have done the following:\n \n ## Setting a break point\n \n-As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`.\n+As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.cakecollate.ui.CommandBox.CommandExecutor`.\n \n ![Using the `Search for target by name` feature. `Navigate` \\> `Symbol`.](../images/tracing/Execute.png)\n \n@@ -83,14 +83,14 @@ Recall from the User Guide that the `edit` command has the format: `edit INDEX [\n \n         CommandResult commandResult;\n         //Parse user input from String to a Command\n-        Command command = addressBookParser.parseCommand(commandText);\n+        Command command = cakeCollateParser.parseCommand(commandText);\n         //Executes the Command and stores the result\n         commandResult = command.execute(model);\n \n         try {\n             //We can deduce that the previous line of code modifies model in some way\n             // since it's being stored here.\n-            storage.saveAddressBook(model.getAddressBook());\n+            storage.saveCakeCollate(model.getCakeCollate());\n         } catch (IOException ioe) {\n             throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);\n         }\n@@ -105,7 +105,7 @@ Recall from the User Guide that the `edit` command has the format: `edit INDEX [\n \n 1. `Step into` the line where user input in parsed from a String to a Command.\n \n-    **`AddressBookParser\\#parseCommand()`**\n+    **`CakeCollateParser\\#parseCommand()`**\n \n    ``` java\n    public Command parseCommand(String userInput) throws ParseException {\n@@ -120,7 +120,7 @@ Recall from the User Guide that the `edit` command has the format: `edit INDEX [\n \n 1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.\n \n-1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**\n+1. Stepping into the `switch`, we obviously stop at **`CakeCollateParser\\#parseCommand()`.**\n \n     ``` java\n     ...\n@@ -136,7 +136,7 @@ Recall from the User Guide that the `edit` command has the format: `edit INDEX [\n    <div markdown=\"span\" class=\"alert alert-primary\">:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!\n    </div>\n \n-1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.<br>\n+1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditOrderDescriptor`. Recall that we can verify the contents of `editOrderDesciptor` through the `Variable` tool window.<br>\n    ![EditCommand](../images/tracing/EditCommand.png)\n \n 1. Let’s continue stepping through until we return to `LogicManager#execute()`.\n@@ -152,43 +152,43 @@ Recall from the User Guide that the `edit` command has the format: `edit INDEX [\n    @Override\n    public CommandResult execute(Model model) throws CommandException {\n        ...\n-       Person personToEdit = lastShownList.get(index.getZeroBased());\n-       Person editedPerson = createEditedPerson(personToEdit, editPersonDescriptor);\n-       if (!personToEdit.isSamePerson(editedPerson) && model.hasPerson(editedPerson)) {\n-           throw new CommandException(MESSAGE_DUPLICATE_PERSON);\n+       Order orderToEdit = lastShownList.get(index.getZeroBased());\n+       Order editedOrder = createEditedOrder(orderToEdit, editOrderDescriptor);\n+       if (!orderToEdit.isSameOrder(editedOrder) && model.hasOrder(editedOrder)) {\n+           throw new CommandException(MESSAGE_DUPLICATE_ORDER);\n        }\n-       model.setPerson(personToEdit, editedPerson);\n-       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n-       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));\n+       model.setOrder(orderToEdit, editedOrder);\n+       model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);\n+       return new CommandResult(String.format(MESSAGE_EDIT_ORDER_SUCCESS, editedOrder));\n    }\n    ```\n \n 1. As suspected, `command#execute()` does indeed make changes to `model`.\n \n 1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at\n-    `JsonAddressBook#saveAddressBook()`.\n+    `JsonCakeCollate#saveCakeCollate()`.\n \n-1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`'s constructor.\n+1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableCakeCollate`'s constructor.\n \n-    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**\n+    **`JsonSerializableCakeCollate\\#JsonSerializableCakeCollate()`:**\n \n    ``` java\n    /**\n-    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.\n+    * Converts a given {@code ReadOnlyCakeCollate} into this class for Jackson use.\n     *\n     * @param source future changes to this will not affect the created\n-    * {@code JsonSerializableAddressBook}.\n+    * {@code JsonSerializableCakeCollate}.\n     */\n-   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {\n-       persons.addAll(\n-           source.getPersonList()\n+   public JsonSerializableCakeCollate(ReadOnlyCakeCollate source) {\n+       orders.addAll(\n+           source.getOrderList()\n                  .stream()\n-                 .map(JsonAdaptedPerson::new)\n+                 .map(JsonAdaptedOrder::new)\n                  .collect(Collectors.toList()));\n    }\n    ```\n \n-1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.\n+1. It appears that a `JsonAdaptedOrder` is created for each `Order` and then added to the `JsonSerializableCakeCollate`.\n \n 1. We can continue to step through until we return to `MainWindow#executeCommand()`.\n \n@@ -210,7 +210,7 @@ Recall from the User Guide that the `edit` command has the format: `edit INDEX [\n \n In this tutorial, we traced a valid edit command from raw user input to\n the result being displayed to the user. From this tutorial, you learned\n-more about the inner workings of AddressBook and how the various\n+more about the inner workings of CakeCollate and how the various\n components mesh together to form one cohesive product.\n \n Here are some quick questions you can try to answer based on your\n@@ -241,10 +241,10 @@ the given commands to find exactly what happens.\n \n     2.  Allow `delete` to remove more than one index at a time\n \n-    3.  Save the address book in the CSV format instead\n+    3.  Save the cakecollate in the CSV format instead\n \n     4.  Add a new command\n \n-    5.  Add a new field to `Person`\n+    5.  Add a new field to `Order`\n \n-    6.  Add a new entity to the address book\n+    6.  Add a new entity to the cakecollate"
  },
  {
    "sha": "1a943a0781a702e3a1de3d216eddd2aa17c938f9",
    "filename": "src/main/java/seedu/address/model/AddressBook.java",
    "status": "removed",
    "additions": 0,
    "deletions": 120,
    "changes": 120,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/AddressBook.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/AddressBook.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/src/main/java/seedu/address/model/AddressBook.java?ref=82e7b3867dfb3f484dde301b072f8c613bc3109c",
    "patch": "@@ -1,120 +0,0 @@\n-package seedu.address.model;\n-\n-import static java.util.Objects.requireNonNull;\n-\n-import java.util.List;\n-\n-import javafx.collections.ObservableList;\n-import seedu.address.model.person.Person;\n-import seedu.address.model.person.UniquePersonList;\n-\n-/**\n- * Wraps all data at the address-book level\n- * Duplicates are not allowed (by .isSamePerson comparison)\n- */\n-public class AddressBook implements ReadOnlyAddressBook {\n-\n-    private final UniquePersonList persons;\n-\n-    /*\n-     * The 'unusual' code block below is a non-static initialization block, sometimes used to avoid duplication\n-     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html\n-     *\n-     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication\n-     *   among constructors.\n-     */\n-    {\n-        persons = new UniquePersonList();\n-    }\n-\n-    public AddressBook() {}\n-\n-    /**\n-     * Creates an AddressBook using the Persons in the {@code toBeCopied}\n-     */\n-    public AddressBook(ReadOnlyAddressBook toBeCopied) {\n-        this();\n-        resetData(toBeCopied);\n-    }\n-\n-    //// list overwrite operations\n-\n-    /**\n-     * Replaces the contents of the person list with {@code persons}.\n-     * {@code persons} must not contain duplicate persons.\n-     */\n-    public void setPersons(List<Person> persons) {\n-        this.persons.setPersons(persons);\n-    }\n-\n-    /**\n-     * Resets the existing data of this {@code AddressBook} with {@code newData}.\n-     */\n-    public void resetData(ReadOnlyAddressBook newData) {\n-        requireNonNull(newData);\n-\n-        setPersons(newData.getPersonList());\n-    }\n-\n-    //// person-level operations\n-\n-    /**\n-     * Returns true if a person with the same identity as {@code person} exists in the address book.\n-     */\n-    public boolean hasPerson(Person person) {\n-        requireNonNull(person);\n-        return persons.contains(person);\n-    }\n-\n-    /**\n-     * Adds a person to the address book.\n-     * The person must not already exist in the address book.\n-     */\n-    public void addPerson(Person p) {\n-        persons.add(p);\n-    }\n-\n-    /**\n-     * Replaces the given person {@code target} in the list with {@code editedPerson}.\n-     * {@code target} must exist in the address book.\n-     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.\n-     */\n-    public void setPerson(Person target, Person editedPerson) {\n-        requireNonNull(editedPerson);\n-\n-        persons.setPerson(target, editedPerson);\n-    }\n-\n-    /**\n-     * Removes {@code key} from this {@code AddressBook}.\n-     * {@code key} must exist in the address book.\n-     */\n-    public void removePerson(Person key) {\n-        persons.remove(key);\n-    }\n-\n-    //// util methods\n-\n-    @Override\n-    public String toString() {\n-        return persons.asUnmodifiableObservableList().size() + \" persons\";\n-        // TODO: refine later\n-    }\n-\n-    @Override\n-    public ObservableList<Person> getPersonList() {\n-        return persons.asUnmodifiableObservableList();\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other == this // short circuit if same object\n-                || (other instanceof AddressBook // instanceof handles nulls\n-                && persons.equals(((AddressBook) other).persons));\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return persons.hashCode();\n-    }\n-}"
  },
  {
    "sha": "d54df471c1ffa4ef782af2669a5d56ad85949a72",
    "filename": "src/main/java/seedu/address/model/Model.java",
    "status": "removed",
    "additions": 0,
    "deletions": 87,
    "changes": 87,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/Model.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/Model.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/src/main/java/seedu/address/model/Model.java?ref=82e7b3867dfb3f484dde301b072f8c613bc3109c",
    "patch": "@@ -1,87 +0,0 @@\n-package seedu.address.model;\n-\n-import java.nio.file.Path;\n-import java.util.function.Predicate;\n-\n-import javafx.collections.ObservableList;\n-import seedu.address.commons.core.GuiSettings;\n-import seedu.address.model.person.Person;\n-\n-/**\n- * The API of the Model component.\n- */\n-public interface Model {\n-    /** {@code Predicate} that always evaluate to true */\n-    Predicate<Person> PREDICATE_SHOW_ALL_PERSONS = unused -> true;\n-\n-    /**\n-     * Replaces user prefs data with the data in {@code userPrefs}.\n-     */\n-    void setUserPrefs(ReadOnlyUserPrefs userPrefs);\n-\n-    /**\n-     * Returns the user prefs.\n-     */\n-    ReadOnlyUserPrefs getUserPrefs();\n-\n-    /**\n-     * Returns the user prefs' GUI settings.\n-     */\n-    GuiSettings getGuiSettings();\n-\n-    /**\n-     * Sets the user prefs' GUI settings.\n-     */\n-    void setGuiSettings(GuiSettings guiSettings);\n-\n-    /**\n-     * Returns the user prefs' address book file path.\n-     */\n-    Path getAddressBookFilePath();\n-\n-    /**\n-     * Sets the user prefs' address book file path.\n-     */\n-    void setAddressBookFilePath(Path addressBookFilePath);\n-\n-    /**\n-     * Replaces address book data with the data in {@code addressBook}.\n-     */\n-    void setAddressBook(ReadOnlyAddressBook addressBook);\n-\n-    /** Returns the AddressBook */\n-    ReadOnlyAddressBook getAddressBook();\n-\n-    /**\n-     * Returns true if a person with the same identity as {@code person} exists in the address book.\n-     */\n-    boolean hasPerson(Person person);\n-\n-    /**\n-     * Deletes the given person.\n-     * The person must exist in the address book.\n-     */\n-    void deletePerson(Person target);\n-\n-    /**\n-     * Adds the given person.\n-     * {@code person} must not already exist in the address book.\n-     */\n-    void addPerson(Person person);\n-\n-    /**\n-     * Replaces the given person {@code target} with {@code editedPerson}.\n-     * {@code target} must exist in the address book.\n-     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.\n-     */\n-    void setPerson(Person target, Person editedPerson);\n-\n-    /** Returns an unmodifiable view of the filtered person list */\n-    ObservableList<Person> getFilteredPersonList();\n-\n-    /**\n-     * Updates the filter of the filtered person list to filter by the given {@code predicate}.\n-     * @throws NullPointerException if {@code predicate} is null.\n-     */\n-    void updateFilteredPersonList(Predicate<Person> predicate);\n-}"
  },
  {
    "sha": "0650c954f5cae3a07e0486884adc7b7cba80bb8b",
    "filename": "src/main/java/seedu/address/model/ModelManager.java",
    "status": "removed",
    "additions": 0,
    "deletions": 151,
    "changes": 151,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/ModelManager.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/ModelManager.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/src/main/java/seedu/address/model/ModelManager.java?ref=82e7b3867dfb3f484dde301b072f8c613bc3109c",
    "patch": "@@ -1,151 +0,0 @@\n-package seedu.address.model;\n-\n-import static java.util.Objects.requireNonNull;\n-import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n-\n-import java.nio.file.Path;\n-import java.util.function.Predicate;\n-import java.util.logging.Logger;\n-\n-import javafx.collections.ObservableList;\n-import javafx.collections.transformation.FilteredList;\n-import seedu.address.commons.core.GuiSettings;\n-import seedu.address.commons.core.LogsCenter;\n-import seedu.address.model.person.Person;\n-\n-/**\n- * Represents the in-memory model of the address book data.\n- */\n-public class ModelManager implements Model {\n-    private static final Logger logger = LogsCenter.getLogger(ModelManager.class);\n-\n-    private final AddressBook addressBook;\n-    private final UserPrefs userPrefs;\n-    private final FilteredList<Person> filteredPersons;\n-\n-    /**\n-     * Initializes a ModelManager with the given addressBook and userPrefs.\n-     */\n-    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {\n-        super();\n-        requireAllNonNull(addressBook, userPrefs);\n-\n-        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);\n-\n-        this.addressBook = new AddressBook(addressBook);\n-        this.userPrefs = new UserPrefs(userPrefs);\n-        filteredPersons = new FilteredList<>(this.addressBook.getPersonList());\n-    }\n-\n-    public ModelManager() {\n-        this(new AddressBook(), new UserPrefs());\n-    }\n-\n-    //=========== UserPrefs ==================================================================================\n-\n-    @Override\n-    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {\n-        requireNonNull(userPrefs);\n-        this.userPrefs.resetData(userPrefs);\n-    }\n-\n-    @Override\n-    public ReadOnlyUserPrefs getUserPrefs() {\n-        return userPrefs;\n-    }\n-\n-    @Override\n-    public GuiSettings getGuiSettings() {\n-        return userPrefs.getGuiSettings();\n-    }\n-\n-    @Override\n-    public void setGuiSettings(GuiSettings guiSettings) {\n-        requireNonNull(guiSettings);\n-        userPrefs.setGuiSettings(guiSettings);\n-    }\n-\n-    @Override\n-    public Path getAddressBookFilePath() {\n-        return userPrefs.getAddressBookFilePath();\n-    }\n-\n-    @Override\n-    public void setAddressBookFilePath(Path addressBookFilePath) {\n-        requireNonNull(addressBookFilePath);\n-        userPrefs.setAddressBookFilePath(addressBookFilePath);\n-    }\n-\n-    //=========== AddressBook ================================================================================\n-\n-    @Override\n-    public void setAddressBook(ReadOnlyAddressBook addressBook) {\n-        this.addressBook.resetData(addressBook);\n-    }\n-\n-    @Override\n-    public ReadOnlyAddressBook getAddressBook() {\n-        return addressBook;\n-    }\n-\n-    @Override\n-    public boolean hasPerson(Person person) {\n-        requireNonNull(person);\n-        return addressBook.hasPerson(person);\n-    }\n-\n-    @Override\n-    public void deletePerson(Person target) {\n-        addressBook.removePerson(target);\n-    }\n-\n-    @Override\n-    public void addPerson(Person person) {\n-        addressBook.addPerson(person);\n-        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n-    }\n-\n-    @Override\n-    public void setPerson(Person target, Person editedPerson) {\n-        requireAllNonNull(target, editedPerson);\n-\n-        addressBook.setPerson(target, editedPerson);\n-    }\n-\n-    //=========== Filtered Person List Accessors =============================================================\n-\n-    /**\n-     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of\n-     * {@code versionedAddressBook}\n-     */\n-    @Override\n-    public ObservableList<Person> getFilteredPersonList() {\n-        return filteredPersons;\n-    }\n-\n-    @Override\n-    public void updateFilteredPersonList(Predicate<Person> predicate) {\n-        requireNonNull(predicate);\n-        filteredPersons.setPredicate(predicate);\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        // short circuit if same object\n-        if (obj == this) {\n-            return true;\n-        }\n-\n-        // instanceof handles nulls\n-        if (!(obj instanceof ModelManager)) {\n-            return false;\n-        }\n-\n-        // state check\n-        ModelManager other = (ModelManager) obj;\n-        return addressBook.equals(other.addressBook)\n-                && userPrefs.equals(other.userPrefs)\n-                && filteredPersons.equals(other.filteredPersons);\n-    }\n-\n-}"
  },
  {
    "sha": "6ddc2cd9a290380c49d8828f3c01e15b0c50a982",
    "filename": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "status": "removed",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/src/main/java/seedu/address/model/ReadOnlyAddressBook.java?ref=82e7b3867dfb3f484dde301b072f8c613bc3109c",
    "patch": "@@ -1,17 +0,0 @@\n-package seedu.address.model;\n-\n-import javafx.collections.ObservableList;\n-import seedu.address.model.person.Person;\n-\n-/**\n- * Unmodifiable view of an address book\n- */\n-public interface ReadOnlyAddressBook {\n-\n-    /**\n-     * Returns an unmodifiable view of the persons list.\n-     * This list will not contain any duplicate persons.\n-     */\n-    ObservableList<Person> getPersonList();\n-\n-}"
  },
  {
    "sha": "0fee4fe57e6be1993ce57808e1b118d58f6239b5",
    "filename": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "status": "removed",
    "additions": 0,
    "deletions": 137,
    "changes": 137,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/blob/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/person/UniquePersonList.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T11-4/tp/raw/82e7b3867dfb3f484dde301b072f8c613bc3109c/src/main/java/seedu/address/model/person/UniquePersonList.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T11-4/tp/contents/src/main/java/seedu/address/model/person/UniquePersonList.java?ref=82e7b3867dfb3f484dde301b072f8c613bc3109c",
    "patch": "@@ -1,137 +0,0 @@\n-package seedu.address.model.person;\n-\n-import static java.util.Objects.requireNonNull;\n-import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import seedu.address.model.person.exceptions.DuplicatePersonException;\n-import seedu.address.model.person.exceptions.PersonNotFoundException;\n-\n-/**\n- * A list of persons that enforces uniqueness between its elements and does not allow nulls.\n- * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of\n- * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is\n- * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so\n- * as to ensure that the person with exactly the same fields will be removed.\n- *\n- * Supports a minimal set of list operations.\n- *\n- * @see Person#isSamePerson(Person)\n- */\n-public class UniquePersonList implements Iterable<Person> {\n-\n-    private final ObservableList<Person> internalList = FXCollections.observableArrayList();\n-    private final ObservableList<Person> internalUnmodifiableList =\n-            FXCollections.unmodifiableObservableList(internalList);\n-\n-    /**\n-     * Returns true if the list contains an equivalent person as the given argument.\n-     */\n-    public boolean contains(Person toCheck) {\n-        requireNonNull(toCheck);\n-        return internalList.stream().anyMatch(toCheck::isSamePerson);\n-    }\n-\n-    /**\n-     * Adds a person to the list.\n-     * The person must not already exist in the list.\n-     */\n-    public void add(Person toAdd) {\n-        requireNonNull(toAdd);\n-        if (contains(toAdd)) {\n-            throw new DuplicatePersonException();\n-        }\n-        internalList.add(toAdd);\n-    }\n-\n-    /**\n-     * Replaces the person {@code target} in the list with {@code editedPerson}.\n-     * {@code target} must exist in the list.\n-     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.\n-     */\n-    public void setPerson(Person target, Person editedPerson) {\n-        requireAllNonNull(target, editedPerson);\n-\n-        int index = internalList.indexOf(target);\n-        if (index == -1) {\n-            throw new PersonNotFoundException();\n-        }\n-\n-        if (!target.isSamePerson(editedPerson) && contains(editedPerson)) {\n-            throw new DuplicatePersonException();\n-        }\n-\n-        internalList.set(index, editedPerson);\n-    }\n-\n-    /**\n-     * Removes the equivalent person from the list.\n-     * The person must exist in the list.\n-     */\n-    public void remove(Person toRemove) {\n-        requireNonNull(toRemove);\n-        if (!internalList.remove(toRemove)) {\n-            throw new PersonNotFoundException();\n-        }\n-    }\n-\n-    public void setPersons(UniquePersonList replacement) {\n-        requireNonNull(replacement);\n-        internalList.setAll(replacement.internalList);\n-    }\n-\n-    /**\n-     * Replaces the contents of this list with {@code persons}.\n-     * {@code persons} must not contain duplicate persons.\n-     */\n-    public void setPersons(List<Person> persons) {\n-        requireAllNonNull(persons);\n-        if (!personsAreUnique(persons)) {\n-            throw new DuplicatePersonException();\n-        }\n-\n-        internalList.setAll(persons);\n-    }\n-\n-    /**\n-     * Returns the backing list as an unmodifiable {@code ObservableList}.\n-     */\n-    public ObservableList<Person> asUnmodifiableObservableList() {\n-        return internalUnmodifiableList;\n-    }\n-\n-    @Override\n-    public Iterator<Person> iterator() {\n-        return internalList.iterator();\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other == this // short circuit if same object\n-                || (other instanceof UniquePersonList // instanceof handles nulls\n-                        && internalList.equals(((UniquePersonList) other).internalList));\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return internalList.hashCode();\n-    }\n-\n-    /**\n-     * Returns true if {@code persons} contains only unique persons.\n-     */\n-    private boolean personsAreUnique(List<Person> persons) {\n-        for (int i = 0; i < persons.size() - 1; i++) {\n-            for (int j = i + 1; j < persons.size(); j++) {\n-                if (persons.get(i).isSamePerson(persons.get(j))) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-}"
  }
]
