[
  {
    "sha": "a95fe580207835688850b11b1d3de1e2996bac60",
    "filename": "hw07/README.md",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/README.md",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/README.md",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/README.md?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,22 @@\n+# OTUS java 2020 12, курс \"Java Developer. Professional\"\n+\n+TODO\n+Домашнее задание\n+заполнить все //todo\n+\n+1. Добавить поля field11 - field13 (для field13 используйте класс ObjectForMessage)\n+\n+--сделано + обработчик вывода в случае, если field13==null\n+2. Сделать процессор, который поменяет местами значения field11 и field12\n+\n+--добавлен процессов ProcessorSwapFields11_12\n+3. Сделать процессор, который будет выбрасывать исключение в четную секунду (сделайте тест с гарантированным результатом)\n+        Секунда должна определяьться во время выполнения.\n+        \n+--добавлен процессор ProcessorEvenSecError с дополнительным методом getTime в надежде замокать его и в тестах передавать четное значение, но не вышло\n+--добавлен тест evenSecException (в его начало вставлен закоментированный код попытки замокать этот объект, не вышло, сделал грубо, но работает)\n+\n+4. Сделать Listener для ведения истории: старое сообщение - новое (подумайте, как сделать, чтобы сообщения не портились)\n+\n+--добавлен лиснер ListenerHistory, где для ведения истории введено поле static Map<Integer, List<Message>> history ( цифра - итерация, а лист - предыдущее и измененное значения)\n+--добавлен тест (его смысл я не понял, т.к. все объекты message в проекте генерируются builder-ом, т.е. представляют собой отдельные сущности. Но задание было - тест добавил.)"
  },
  {
    "sha": "3cee72159577de7623a8e0e759652f8c3b1a0b59",
    "filename": "hw07/build.gradle",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/build.gradle",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/build.gradle",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/build.gradle?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,28 @@\n+plugins {\n+    id 'java'\n+}\n+\n+sourceCompatibility = JavaVersion.VERSION_15\n+targetCompatibility = JavaVersion.VERSION_15\n+\n+dependencies {\n+    testImplementation ('org.junit.jupiter:junit-jupiter-api')\n+    testImplementation ('org.junit.jupiter:junit-jupiter-engine')\n+    testImplementation ('org.junit.jupiter:junit-jupiter-params')\n+    testImplementation ('org.assertj:assertj-core')\n+    testImplementation ('org.mockito:mockito-core')\n+    testImplementation ('org.mockito:mockito-junit-jupiter')\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    testLogging {\n+        events \"passed\", \"skipped\", \"failed\"\n+    }\n+}\n+\n+tasks.withType(JavaCompile) {\n+    options.with {\n+        encoding = 'UTF-8'\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a9c1bcaf69e4ec43324d454b0fd8d080256e7c7e",
    "filename": "hw07/src/main/java/ru/otus/Demo.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/Demo.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/Demo.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/Demo.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,34 @@\n+package ru.otus;//package ru.otus;\n+\n+import ru.otus.handler.ComplexProcessor;\n+import ru.otus.listener.ListenerPrinter;\n+import ru.otus.model.Message;\n+import ru.otus.processor.LoggerProcessor;\n+import ru.otus.processor.ProcessorConcatFields;\n+import ru.otus.processor.ProcessorUpperField10;\n+\n+import java.util.List;\n+\n+public class Demo {\n+    public static void main(String[] args) {\n+        var processors = List.of(new ProcessorConcatFields(),\n+                new LoggerProcessor(new ProcessorUpperField10()));\n+\n+        var complexProcessor = new ComplexProcessor(processors, (ex) -> {});\n+        var listenerPrinter = new ListenerPrinter();\n+        complexProcessor.addListener(listenerPrinter);\n+\n+        var message = new Message.Builder(1L)\n+                .field1(\"field1\")\n+                .field2(\"field2\")\n+                .field3(\"field3\")\n+                .field6(\"field6\")\n+                .field10(\"field10\")\n+                .build();\n+\n+        var result = complexProcessor.handle(message);\n+        System.out.println(\"result:\" + result);\n+\n+        complexProcessor.removeListener(listenerPrinter);\n+    }\n+}"
  },
  {
    "sha": "bf342502a980fe0d27dea6b43686183f58b24e37",
    "filename": "hw07/src/main/java/ru/otus/HomeWork.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/HomeWork.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/HomeWork.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/HomeWork.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,54 @@\n+package ru.otus;//package ru.otus;\n+\n+import ru.otus.handler.ComplexProcessor;\n+import ru.otus.listener.ListenerHistory;\n+import ru.otus.listener.ListenerPrinter;\n+import ru.otus.model.Message;\n+import ru.otus.model.ObjectForMessage;\n+import ru.otus.processor.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HomeWork {\n+\n+    /*\n+     Реализовать to do:\n+       1. Добавить поля field11 - field13 (для field13 используйте класс ObjectForMessage)\n+       2. Сделать процессор, который поменяет местами значения field11 и field12\n+       3. Сделать процессор, который будет выбрасывать исключение в четную секунду (сделайте тест с гарантированным результатом)\n+            Секунда должна определяьться во время выполнения.\n+       4. Сделать Listener для ведения истории: старое сообщение - новое (подумайте, как сделать, чтобы сообщения не портились)\n+     */\n+\n+    public static void main(String[] args) {\n+        List<Processor> processors = List.of(new ProcessorConcatFields(),\n+                new LoggerProcessor(new ProcessorUpperField10()),\n+                new ProcessorSwapFields11_12(), new ProcessorEvenSecError());\n+\n+        ComplexProcessor complexProcessor = new ComplexProcessor(processors, (ex) -> {});\n+        ListenerPrinter listenerPrinter = new ListenerPrinter();\n+        complexProcessor.addListener(listenerPrinter);\n+        complexProcessor.addListener(new ListenerHistory());\n+\n+        List<String> field13List = new ArrayList<>();\n+        field13List.add(\"field13\");\n+        ObjectForMessage field13 = new ObjectForMessage();\n+        field13.setData(field13List);\n+        var message = new Message.Builder(1L)\n+                .field1(\"field1\")\n+                .field2(\"field2\")\n+                .field3(\"field3\")\n+                .field6(\"field6\")\n+                .field10(\"field10\")\n+                .field11(\"field11\")\n+                .field12(\"field12\")\n+                .field13(field13)\n+                .build();\n+\n+        var result = complexProcessor.handle(message);\n+        System.out.println(\"result:\" + result);\n+\n+        complexProcessor.removeListener(listenerPrinter);\n+    }\n+}"
  },
  {
    "sha": "4f94a9b12ce0e41dc7ff61a3a008d2ccd48c3b11",
    "filename": "hw07/src/main/java/ru/otus/handler/ComplexProcessor.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/handler/ComplexProcessor.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/handler/ComplexProcessor.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/handler/ComplexProcessor.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,55 @@\n+package ru.otus.handler;\n+\n+import ru.otus.model.Message;\n+import ru.otus.listener.Listener;\n+import ru.otus.processor.Processor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+public class ComplexProcessor implements Handler {\n+\n+    private final List<Listener> listeners = new ArrayList<>();\n+    private final List<Processor> processors;\n+    private final Consumer<Exception> errorHandler;\n+\n+    public ComplexProcessor(List<Processor> processors, Consumer<Exception> errorHandler) {\n+        this.processors = processors;\n+        this.errorHandler = errorHandler;\n+    }\n+\n+    @Override\n+    public Message handle(Message msg) {\n+        Message newMsg = msg;\n+        for (Processor pros : processors) {\n+            try {\n+                newMsg = pros.process(newMsg);\n+            } catch (Exception ex) {\n+                errorHandler.accept(ex);\n+            }\n+        }\n+        notify(msg, newMsg);\n+        return newMsg;\n+    }\n+\n+    @Override\n+    public void addListener(Listener listener) {\n+        listeners.add(listener);\n+    }\n+\n+    @Override\n+    public void removeListener(Listener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+    private void notify(Message oldMsg, Message newMsg) {\n+        listeners.forEach(listener -> {\n+            try {\n+                listener.onUpdated(oldMsg, newMsg);\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+            }\n+        });\n+    }\n+}"
  },
  {
    "sha": "52cb90240aa7df72e6c84c82af288b556a174c7d",
    "filename": "hw07/src/main/java/ru/otus/handler/Handler.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/handler/Handler.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/handler/Handler.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/handler/Handler.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.otus.handler;\n+\n+import ru.otus.model.Message;\n+import ru.otus.listener.Listener;\n+\n+public interface Handler {\n+    Message handle(Message msg);\n+\n+    void addListener(Listener listener);\n+    void removeListener(Listener listener);\n+}"
  },
  {
    "sha": "00573326cd647d6cd445fb376eaa725abf5edb64",
    "filename": "hw07/src/main/java/ru/otus/listener/Listener.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/listener/Listener.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/listener/Listener.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/listener/Listener.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,16 @@\n+package ru.otus.listener;\n+\n+import ru.otus.model.Message;\n+\n+public interface Listener {\n+\n+    void onUpdated(Message oldMsg, Message newMsg);\n+\n+    //todo: 4. Сделать Listener для ведения истории: старое сообщение - новое (подумайте, как сделать, чтобы сообщения не портились)\n+    /*\n+     Сделайте такой тест:\n+        - положите сообщение в лисенер\n+        - поменяйте сообщение\n+        - проверьте, сто в лисенере сообщение не изменилось\n+    */\n+}"
  },
  {
    "sha": "123ee34ea309a85a987714345fa51bf7fddb0a63",
    "filename": "hw07/src/main/java/ru/otus/listener/ListenerHistory.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/listener/ListenerHistory.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/listener/ListenerHistory.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/listener/ListenerHistory.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.otus.listener;\n+\n+import ru.otus.model.Message;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ListenerHistory implements Listener {\n+    static Map<Integer, List<Message>> history = new HashMap<>();\n+    static int count = 0;\n+\n+    @Override\n+    public void onUpdated(Message oldMsg, Message newMsg) {\n+        history.put(count++, List.of(oldMsg, newMsg));\n+        System.out.println(\"Listener history:\\n\"+ history);\n+    }\n+\n+    public Map<Integer, List<Message>> getHistory(){\n+        return history;\n+    }\n+}"
  },
  {
    "sha": "2b0d733279e0334c365682a2f172e90e0b88e9c9",
    "filename": "hw07/src/main/java/ru/otus/listener/ListenerPrinter.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/listener/ListenerPrinter.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/listener/ListenerPrinter.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/listener/ListenerPrinter.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.otus.listener;\n+\n+import ru.otus.model.Message;\n+\n+public class ListenerPrinter implements Listener {\n+\n+    @Override\n+    public void onUpdated(Message oldMsg, Message newMsg) {\n+        var logString = String.format(\"oldMsg:%s,\\nnewMsg:%s\", oldMsg, newMsg);\n+        System.out.println(logString);\n+    }\n+}"
  },
  {
    "sha": "23fa977633c4ade90a747be6b8e55d9015bd064f",
    "filename": "hw07/src/main/java/ru/otus/model/Message.java",
    "status": "added",
    "additions": 247,
    "deletions": 0,
    "changes": 247,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/model/Message.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/model/Message.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/model/Message.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,247 @@\n+package ru.otus.model;\n+\n+public class Message {\n+    private final long id;\n+    private final String field1;\n+    private final String field2;\n+    private final String field3;\n+    private final String field4;\n+    private final String field5;\n+    private final String field6;\n+    private final String field7;\n+    private final String field8;\n+    private final String field9;\n+    private final String field10;\n+\n+    //***\n+    private final String field11;\n+    private final String field12;\n+    private final ObjectForMessage field13;\n+    //***\n+\n+    //todo: 1. Добавить поля field11 - field13 (для field13 используйте класс ObjectForMessage)\n+\n+    private Message(long id, String field1, String field2, String field3, String field4, String field5, String field6, String field7, String field8, String field9, String field10, String field11, String field12, ObjectForMessage field13) {\n+        this.id = id;\n+        this.field1 = field1;\n+        this.field2 = field2;\n+        this.field3 = field3;\n+        this.field4 = field4;\n+        this.field5 = field5;\n+        this.field6 = field6;\n+        this.field7 = field7;\n+        this.field8 = field8;\n+        this.field9 = field9;\n+        this.field10 = field10;\n+        this.field11 = field11;\n+        this.field12 = field12;\n+        this.field13 = field13;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+\n+        public String getField1 () {\n+        return field1;\n+    }\n+\n+        public String getField2 () {\n+        return field2;\n+    }\n+\n+        public String getField3 () {\n+        return field3;\n+    }\n+\n+        public String getField4 () {\n+        return field4;\n+    }\n+\n+        public String getField5 () {\n+        return field5;\n+    }\n+\n+        public String getField6 () {\n+        return field6;\n+    }\n+\n+        public String getField7 () {\n+        return field7;\n+    }\n+\n+        public String getField8 () {\n+        return field8;\n+    }\n+\n+        public String getField9 () {\n+        return field9;\n+    }\n+\n+        public String getField10 () {\n+        return field10;\n+    }\n+\n+        public String getField11 () {\n+        return field11;\n+    }\n+\n+        public String getField12 () {\n+        return field12;\n+    }\n+\n+        public ObjectForMessage getField13 () {\n+        return field13;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+\n+        Message message = (Message) o;\n+\n+        return id == message.id;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return (int) (id ^ (id >>> 32));\n+    }\n+\n+    public Builder toBuilder() {\n+        return new Builder(id, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String message = \"Message{\" +\n+                \"id=\" + id +\n+                \", field1='\" + field1 + '\\'' +\n+                \", field2='\" + field2 + '\\'' +\n+                \", field3='\" + field3 + '\\'' +\n+                \", field4='\" + field4 + '\\'' +\n+                \", field5='\" + field5 + '\\'' +\n+                \", field6='\" + field6 + '\\'' +\n+                \", field7='\" + field7 + '\\'' +\n+                \", field8='\" + field8 + '\\'' +\n+                \", field9='\" + field9 + '\\'' +\n+                \", field10='\" + field10 + '\\'' +\n+                \", field11='\" + field11 + '\\'' +\n+                \", field12='\" + field12 + '\\'';\n+        if(field13==null){\n+            return (message + \", field13='\" + null + '\\'' + '}');\n+        }\n+        else{\n+            return (message + \", field13='\" + field13.getData() + '\\'' + '}');\n+        }\n+    }\n+\n+    public static class Builder {\n+        private final long id;\n+        private String field1;\n+        private String field2;\n+        private String field3;\n+        private String field4;\n+        private String field5;\n+        private String field6;\n+        private String field7;\n+        private String field8;\n+        private String field9;\n+        private String field10;\n+        //***\n+        private String field11;\n+        private String field12;\n+        private ObjectForMessage field13 = null;\n+        //***\n+\n+        public Builder(long id) {\n+            this.id = id;\n+        }\n+\n+        private Builder(long id, String field1, String field2, String field3, String field4, String field5, String field6, String field7, String field8, String field9, String field10, String field11, String field12, ObjectForMessage field13) {\n+            this.id = id;\n+            this.field1 = field1;\n+            this.field2 = field2;\n+            this.field3 = field3;\n+            this.field4 = field4;\n+            this.field5 = field5;\n+            this.field6 = field6;\n+            this.field7 = field7;\n+            this.field8 = field8;\n+            this.field9 = field9;\n+            this.field10 = field10;\n+            this.field11 = field11;\n+            this.field12 = field12;\n+            this.field13 = field13;\n+        }\n+\n+        public Builder field1(String field1) {\n+            this.field1 = field1;\n+            return this;\n+        }\n+\n+        public Builder field2(String field2) {\n+            this.field2 = field2;\n+            return this;\n+        }\n+\n+        public Builder field3(String field3) {\n+            this.field3 = field3;\n+            return this;\n+        }\n+\n+        public Builder field4(String field4) {\n+            this.field4 = field4;\n+            return this;\n+        }\n+\n+        public Builder field5(String field5) {\n+            this.field5 = field5;\n+            return this;\n+        }\n+\n+        public Builder field6(String field6) {\n+            this.field6 = field6;\n+            return this;\n+        }\n+\n+        public Builder field7(String field7) {\n+            this.field7 = field7;\n+            return this;\n+        }\n+\n+        public Builder field8(String field8) {\n+            this.field8 = field8;\n+            return this;\n+        }\n+\n+        public Builder field9(String field9) {\n+            this.field9 = field9;\n+            return this;\n+        }\n+\n+        public Builder field10(String field10) {\n+            this.field10 = field10;\n+            return this;\n+        }\n+\n+        public Builder field11(String field11) {\n+            this.field11 = field11;\n+            return this;\n+        }\n+        public Builder field12(String field12) {\n+            this.field12 = field12;\n+            return this;\n+        }\n+        public Builder field13(ObjectForMessage field13) {\n+            this.field13 = field13;\n+            return this;\n+        }\n+\n+        public Message build() {\n+            return new Message(id, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13);\n+        }\n+    }\n+}"
  },
  {
    "sha": "1f62a9aa07ce854a0748d6ab1046b53bdcb3c799",
    "filename": "hw07/src/main/java/ru/otus/model/ObjectForMessage.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/model/ObjectForMessage.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/model/ObjectForMessage.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/model/ObjectForMessage.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.otus.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ObjectForMessage {\n+    private List<String> data;\n+\n+    public List<String> getData() {\n+        if(data == null){\n+\n+        }\n+        return data;\n+    }\n+\n+    public void setData(List<String> data) {\n+        this.data = data;\n+    }\n+}"
  },
  {
    "sha": "0a60fd8522117f41b15b0aebf0f5f9f024ba6a7a",
    "filename": "hw07/src/main/java/ru/otus/processor/LoggerProcessor.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/LoggerProcessor.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/LoggerProcessor.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/processor/LoggerProcessor.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.otus.processor;\n+\n+import ru.otus.model.Message;\n+\n+public class LoggerProcessor implements Processor {\n+\n+\n+    private final Processor processor;\n+\n+    public LoggerProcessor(Processor processor) {\n+        this.processor = processor;\n+    }\n+\n+    @Override\n+    public Message process(Message message) {\n+        System.out.println(\"log processing message:\" + message);\n+        return processor.process(message);\n+    }\n+}"
  },
  {
    "sha": "eeb80f4d6837172bca2ef106e848c68718d398b4",
    "filename": "hw07/src/main/java/ru/otus/processor/Processor.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/Processor.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/Processor.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/processor/Processor.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,14 @@\n+package ru.otus.processor;\n+\n+import ru.otus.model.Message;\n+\n+public interface Processor {\n+\n+    Message process(Message message);\n+\n+    //todo: 2. Сделать процессор, который поменяет местами значения field11 и field12\n+\n+    //todo: 3. Сделать процессор, который будет выбрасывать исключение в четную секунду (сделайте тест с гарантированным результатом)\n+    //         Секунда должна определяьться во время выполнения.\n+    //         Тест - важная часть задания\n+}"
  },
  {
    "sha": "da6952ce6b150ccffd634f876c89fd5238b8a024",
    "filename": "hw07/src/main/java/ru/otus/processor/ProcessorConcatFields.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/ProcessorConcatFields.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/ProcessorConcatFields.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/processor/ProcessorConcatFields.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,12 @@\n+package ru.otus.processor;\n+\n+import ru.otus.model.Message;\n+\n+public class ProcessorConcatFields implements Processor {\n+\n+    @Override\n+    public Message process(Message message) {\n+        var newFieldValue = String.join(\" \", \"concat:\", message.getField1(), message.getField2(), message.getField3());\n+        return message.toBuilder().field4(newFieldValue).build();\n+    }\n+}"
  },
  {
    "sha": "b96c0e3e4879e258cad0c5c328bb837904798bfd",
    "filename": "hw07/src/main/java/ru/otus/processor/ProcessorEvenSecError.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/ProcessorEvenSecError.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/ProcessorEvenSecError.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/processor/ProcessorEvenSecError.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,30 @@\n+package ru.otus.processor;\n+\n+import java.text.SimpleDateFormat;\n+import java.time.Clock;\n+import java.time.DateTimeException;\n+import java.time.LocalDateTime;\n+import java.util.Date;\n+\n+import ru.otus.model.Message;\n+\n+public class ProcessorEvenSecError implements Processor {\n+\n+    public int getTime(){\n+        return Integer.parseInt(new SimpleDateFormat(\"ss\").format(new Date()));\n+    }\n+\n+    @Override\n+    public Message process(Message message) {\n+        int second = getTime();\n+        if (second % 2 == 0) {\n+            throw new DateTimeException(\"even second\");\n+        }\n+        return message;\n+    }\n+\n+    public static void main(String[] args) {\n+        ProcessorEvenSecError p = new ProcessorEvenSecError();\n+        p.process(null);\n+    }\n+}"
  },
  {
    "sha": "97484bf06f68f26d93ff7b32a4897042c5821642",
    "filename": "hw07/src/main/java/ru/otus/processor/ProcessorSwapFields11_12.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/ProcessorSwapFields11_12.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/ProcessorSwapFields11_12.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/processor/ProcessorSwapFields11_12.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.otus.processor;\n+\n+import ru.otus.model.Message;\n+\n+public class ProcessorSwapFields11_12 implements Processor {\n+\n+    @Override\n+    public Message process(Message message) {\n+        String field11 = message.getField11();\n+        String field12 = message.getField12();\n+        return message.toBuilder().field12(field11).field11(field12).build();\n+    }\n+}"
  },
  {
    "sha": "aaa9adb56510a348868118e29b21142cde3f1d68",
    "filename": "hw07/src/main/java/ru/otus/processor/ProcessorUpperField10.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/ProcessorUpperField10.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/main/java/ru/otus/processor/ProcessorUpperField10.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/main/java/ru/otus/processor/ProcessorUpperField10.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.otus.processor;\n+\n+import ru.otus.model.Message;\n+\n+public class ProcessorUpperField10 implements Processor {\n+\n+    @Override\n+    public Message process(Message message) {\n+        return message.toBuilder().field4(message.getField10().toUpperCase()).build();\n+    }\n+}"
  },
  {
    "sha": "1f18d4f8203129bda034293941403217aa6dfa4f",
    "filename": "hw07/src/test/java/ru/otus/handler/ComplexProcessorTest.java",
    "status": "added",
    "additions": 145,
    "deletions": 0,
    "changes": 145,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/test/java/ru/otus/handler/ComplexProcessorTest.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/hw07/src/test/java/ru/otus/handler/ComplexProcessorTest.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw07/src/test/java/ru/otus/handler/ComplexProcessorTest.java?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -0,0 +1,145 @@\n+package ru.otus.handler;\n+\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.Executable;\n+import org.mockito.Mock;\n+import ru.otus.listener.ListenerHistory;\n+import ru.otus.model.Message;\n+import ru.otus.listener.Listener;\n+import ru.otus.processor.*;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.DateTimeException;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.*;\n+\n+class ComplexProcessorTest {\n+\n+    @Test\n+    @DisplayName(\"Тестируем вызовы процессоров\")\n+    void handleProcessorsTest() {\n+        //given\n+        var message = new Message.Builder(1L).field7(\"field7\").build();\n+\n+        var processor1 = mock(Processor.class);\n+        when(processor1.process(message)).thenReturn(message);\n+\n+        var processor2 = mock(Processor.class);\n+        when(processor2.process(message)).thenReturn(message);\n+\n+        var processors = List.of(processor1, processor2);\n+\n+        var complexProcessor = new ComplexProcessor(processors, (ex) -> {\n+        });\n+\n+        //when\n+        var result = complexProcessor.handle(message);\n+\n+        //then\n+        verify(processor1).process(message);\n+        verify(processor2).process(message);\n+        assertThat(result).isEqualTo(message);\n+    }\n+\n+    @Test\n+    @DisplayName(\"Тестируем обработку исключения\")\n+    void handleExceptionTest() {\n+        //given\n+        var message = new Message.Builder(1L).field8(\"field8\").build();\n+\n+        var processor1 = mock(Processor.class);\n+        when(processor1.process(message)).thenThrow(new RuntimeException(\"Test Exception\"));\n+\n+        var processor2 = mock(Processor.class);\n+        when(processor2.process(message)).thenReturn(message);\n+\n+        var processors = List.of(processor1, processor2);\n+\n+        var complexProcessor = new ComplexProcessor(processors, (ex) -> {\n+            throw new TestException(ex.getMessage());\n+        });\n+\n+        //when\n+        assertThatExceptionOfType(TestException.class).isThrownBy(() -> complexProcessor.handle(message));\n+\n+        //then\n+        verify(processor1, times(1)).process(message);\n+        verify(processor2, never()).process(message);\n+    }\n+\n+    @Test\n+    @DisplayName(\"Тестируем уведомления\")\n+    void notifyTest() {\n+        //given\n+        var message = new Message.Builder(1L).field9(\"field9\").build();\n+\n+        var listener = mock(Listener.class);\n+\n+        var complexProcessor = new ComplexProcessor(new ArrayList<>(), (ex) -> {\n+        });\n+\n+        complexProcessor.addListener(listener);\n+\n+        //when\n+        complexProcessor.handle(message);\n+        complexProcessor.removeListener(listener);\n+        complexProcessor.handle(message);\n+\n+        //then\n+        verify(listener, times(1)).onUpdated(message, message);\n+    }\n+\n+    private static class TestException extends RuntimeException {\n+        public TestException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    @Test\n+    @DisplayName(\"Тестируем ошибку четной секунды\")\n+    void evenSecException() throws ParseException, InterruptedException {\n+//        var processor1 = mock(ProcessorEvenSecError.class);\n+//        when(processor1.getTime()).thenReturn(2);\n+//        processor1.process(null);\n+//        assertThatExceptionOfType(DateTimeException.class).isThrownBy(() -> processor1.process(null));\n+//        try by mock, but didnt find, how to check throw of the DateTimeException\n+        while (true) {\n+            if (Integer.parseInt(new SimpleDateFormat(\"ss\").format(new Date())) % 2 == 0) {\n+                break;\n+            }\n+        }\n+\n+        DateTimeException exception = assertThrows(DateTimeException.class, () -> {\n+            new ProcessorEvenSecError().process(null);\n+        });\n+        assertEquals(\"even second\", exception.getMessage());\n+        Thread.sleep(1000);\n+        assertDoesNotThrow(() -> new ProcessorEvenSecError().process(null));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Тестируем listenerHistory четной секунды\")\n+    void testListener() {\n+        var message = new Message.Builder(1L).field11(\"fiel11\").field12(\"field12\").build();\n+        ListenerHistory history = new ListenerHistory();\n+        history.onUpdated(message, message);\n+        message = new ProcessorSwapFields11_12().process(message);\n+        Assertions.assertNotEquals(history.getHistory().get(0).get(0).toString(), message.toString());\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c5d76c7d6361369cc9f0e08ad7b1b93ba2842612",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/1e9bc8975d2838abf64c205aab05913e70e6ea34/settings.gradle",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/1e9bc8975d2838abf64c205aab05913e70e6ea34/settings.gradle",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/settings.gradle?ref=1e9bc8975d2838abf64c205aab05913e70e6ea34",
    "patch": "@@ -4,4 +4,6 @@ include 'hw02-collections'\n include 'hw03_diyTestFrameWork_annotations'\n include 'hw04_garbageCollectors'\n include 'hw05_aop'\n-include 'hw06_solid'\n\\ No newline at end of file\n+include 'hw06_solid'\n+include 'hw07'\n+"
  }
]
