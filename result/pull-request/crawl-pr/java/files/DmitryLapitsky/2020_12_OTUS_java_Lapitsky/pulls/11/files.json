[
  {
    "sha": "11179d10dc2e210b9a5bd620a9c54678ed719c9e",
    "filename": "hw08_json/build.gradle",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/build.gradle",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/build.gradle",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/build.gradle?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,36 @@\n+plugins {\n+    id 'java'\n+}\n+\n+sourceCompatibility = JavaVersion.VERSION_15\n+targetCompatibility = JavaVersion.VERSION_15\n+\n+dependencies {\n+    implementation 'com.google.guava:guava'\n+    implementation 'com.fasterxml.jackson.core:jackson-databind'\n+    implementation 'javax.json:javax.json-api'\n+    implementation 'org.glassfish:javax.json'\n+    implementation 'com.google.protobuf:protobuf-java-util'\n+\n+    testImplementation ('org.junit.jupiter:junit-jupiter-api')\n+    testImplementation ('org.junit.jupiter:junit-jupiter-engine')\n+    testImplementation ('org.junit.jupiter:junit-jupiter-params')\n+    testImplementation ('org.assertj:assertj-core')\n+    testImplementation ('org.mockito:mockito-core')\n+    testImplementation ('org.mockito:mockito-junit-jupiter')\n+    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.15.5'\n+    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    testLogging {\n+        events \"passed\", \"skipped\", \"failed\"\n+    }\n+}\n+\n+tasks.withType(JavaCompile) {\n+    options.with {\n+        encoding = 'UTF-8'\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0801742eb07d56f87fb302c220a9f68e84613fc0",
    "filename": "hw08_json/src/main/java/ru/otus/dataprocessor/FileLoader.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/FileLoader.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/FileLoader.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/main/java/ru/otus/dataprocessor/FileLoader.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,34 @@\n+package ru.otus.dataprocessor;\n+\n+import ru.otus.model.Measurement;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.Files;\n+import java.util.Arrays;\n+import java.util.List;\n+import com.google.gson.Gson;\n+\n+public class FileLoader implements Loader {\n+String fileName = \"\";\n+\n+    public FileLoader(String fileName) {\n+        this.fileName = fileName;\n+    }\n+\n+    @Override\n+    public List<Measurement> load() throws IOException {\n+        Path path = Paths.get(fileName);\n+        if(!Files.exists(path)){\n+            return null;\n+        }\n+\n+\n+        String read = new String(Files.readAllBytes(path));\n+\n+        Gson gson = new Gson();\n+        Measurement[] ms = gson.fromJson(read, Measurement[].class);\n+        return Arrays.asList(ms);\n+    }\n+}"
  },
  {
    "sha": "db06333df044c2ee5eff6171f4da777275e89eb5",
    "filename": "hw08_json/src/main/java/ru/otus/dataprocessor/FileProcessException.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/FileProcessException.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/FileProcessException.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/main/java/ru/otus/dataprocessor/FileProcessException.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.otus.dataprocessor;\n+\n+public class FileProcessException extends RuntimeException {\n+    public FileProcessException(Exception ex) {\n+        super(ex);\n+    }\n+\n+    public FileProcessException(String msg) {\n+        super(msg);\n+    }\n+}"
  },
  {
    "sha": "11ed2c36bd58fdd514f8a010747f58c1c038b68d",
    "filename": "hw08_json/src/main/java/ru/otus/dataprocessor/FileSerializer.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/FileSerializer.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/FileSerializer.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/main/java/ru/otus/dataprocessor/FileSerializer.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.otus.dataprocessor;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+\n+public class FileSerializer implements Serializer {\n+    String fileName = \"\";\n+\n+    public FileSerializer(String fileName) {\n+        this.fileName = fileName;\n+    }\n+\n+    @Override\n+    public void serialize(Map<String, Double> data) throws IOException {\n+        String jsonStr = new Gson().toJson(data);\n+        Path path = Paths.get(fileName);\n+        if(!Files.exists(path)){\n+            Files.write(path, jsonStr.getBytes());\n+        }\n+        //формирует результирующий json и сохраняет его в файл\n+    }\n+}"
  },
  {
    "sha": "41a2a7ad8426315756d6b5fa832d618aac8a50f8",
    "filename": "hw08_json/src/main/java/ru/otus/dataprocessor/Loader.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/Loader.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/Loader.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/main/java/ru/otus/dataprocessor/Loader.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.otus.dataprocessor;\n+\n+import ru.otus.model.Measurement;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public interface Loader {\n+\n+    List<Measurement> load() throws IOException;\n+}"
  },
  {
    "sha": "58e05a6c8dfe374b6d31f6015338bbcd86867dda",
    "filename": "hw08_json/src/main/java/ru/otus/dataprocessor/Processor.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/Processor.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/Processor.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/main/java/ru/otus/dataprocessor/Processor.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,11 @@\n+package ru.otus.dataprocessor;\n+\n+import ru.otus.model.Measurement;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface Processor {\n+\n+    Map<String, Double> process(List<Measurement> data);\n+}"
  },
  {
    "sha": "fa52f010f50e76ab61789c93bd58d3b5ac10495a",
    "filename": "hw08_json/src/main/java/ru/otus/dataprocessor/ProcessorAggregator.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/ProcessorAggregator.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/ProcessorAggregator.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/main/java/ru/otus/dataprocessor/ProcessorAggregator.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,26 @@\n+package ru.otus.dataprocessor;\n+\n+import ru.otus.model.Measurement;\n+\n+import java.util.*;\n+\n+public class ProcessorAggregator implements Processor {\n+\n+    @Override\n+    public Map<String, Double> process(List<Measurement> data) {\n+        //группирует выходящий список по name, при этом суммирует поля value\n+        Map<String, Double> map = new TreeMap<>();\n+\n+\n+\n+        for (Measurement m : data) {\n+            if (!map.keySet().contains(m.getName())) {\n+                map.put(m.getName(), m.getValue());\n+            } else {\n+                double summ = map.get(m.getName()) + m.getValue();\n+                map.put(m.getName(), summ);\n+            }\n+        }\n+        return map;\n+    }\n+}"
  },
  {
    "sha": "f99916d44219d4ffff5dfa92668f517c38c6e021",
    "filename": "hw08_json/src/main/java/ru/otus/dataprocessor/Serializer.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/Serializer.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/dataprocessor/Serializer.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/main/java/ru/otus/dataprocessor/Serializer.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.otus.dataprocessor;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public interface Serializer {\n+\n+    void serialize(Map<String, Double> data) throws IOException;\n+}"
  },
  {
    "sha": "3d82f8c55e7b997321a781c91540b6b4b22200d4",
    "filename": "hw08_json/src/main/java/ru/otus/model/Measurement.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/model/Measurement.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/main/java/ru/otus/model/Measurement.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/main/java/ru/otus/model/Measurement.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,29 @@\n+package ru.otus.model;\n+\n+\n+//Допустим, этот класс библиотечный, его нельзя менять\n+public class Measurement {\n+    private final String name;\n+    private final double value;\n+\n+    public Measurement(String name, double value) {\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public double getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Measurement{\" +\n+                \"name='\" + name + '\\'' +\n+                \", value=\" + value +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "2af7a63c08caf0a0af25a0e9e16f82e976c8bd03",
    "filename": "hw08_json/src/test/java/ru/otus/dataprocessor/ProcessorTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/test/java/ru/otus/dataprocessor/ProcessorTest.java",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/test/java/ru/otus/dataprocessor/ProcessorTest.java",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/test/java/ru/otus/dataprocessor/ProcessorTest.java?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1,53 @@\n+package ru.otus.dataprocessor;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.stream.Stream;\n+\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+class ProcessorTest {\n+\n+    //Надо реализовать методы классов и убедиться, что тест проходит\n+\n+    @Test\n+    @DisplayName(\"Из файла читается json, обрабатывается, результат сериализуется в строку\")\n+    void processingTest(@TempDir Path tempDir) throws IOException {\n+        System.out.println(\"tempDir\\t\" + tempDir);\n+\n+        //given\n+        var inputDataFileName = \"D:\\\\SelfLearn\\\\OTUS\\\\2020_12_OTUS_java_Lapitsky\\\\hw08_json\\\\src\\\\test\\\\resources\\\\inputData.json\";// \"inputData.json\";\n+        var outputDataFileName = \"outputData.json\";\n+        String fullOutputFilePath = String.format(\"%s%s%s\", tempDir, File.separator, outputDataFileName);\n+        System.out.println(\"fOutDir\\t\" + fullOutputFilePath);\n+\n+        FileLoader loader = new FileLoader(inputDataFileName);\n+        var processor = new ProcessorAggregator();\n+        var serializer = new FileSerializer(fullOutputFilePath);\n+\n+        //when\n+        var loadedMeasurements = loader.load();\n+        var aggregatedMeasurements = processor.process(loadedMeasurements);\n+        serializer.serialize(aggregatedMeasurements);\n+\n+        //then\n+        assertThat(loadedMeasurements.size()).isEqualTo(9);\n+        assertThat(aggregatedMeasurements.entrySet().size()).isEqualTo(3);\n+\n+\n+        var serializedOutput = new String(Files.readAllBytes(Paths.get(fullOutputFilePath)));\n+\n+        //обратите внимание: важен порядок ключей\n+        assertThat(serializedOutput).isEqualTo(\"{\\\"val1\\\":3.0,\\\"val2\\\":30.0,\\\"val3\\\":33.0}\");\n+    }\n+}"
  },
  {
    "sha": "f0482566f2beb603d48cc51ea079a07741976a76",
    "filename": "hw08_json/src/test/resources/inputData.json",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/test/resources/inputData.json",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/hw08_json/src/test/resources/inputData.json",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/hw08_json/src/test/resources/inputData.json?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -0,0 +1 @@\n+[{\"name\":\"val1\",\"value\":0.0},{\"name\":\"val1\",\"value\":1.0},{\"name\":\"val1\",\"value\":2.0},{\"name\":\"val2\",\"value\":0.0},{\"name\":\"val2\",\"value\":10.0},{\"name\":\"val2\",\"value\":20.0},{\"name\":\"val3\",\"value\":10.0},{\"name\":\"val3\",\"value\":11.0},{\"name\":\"val3\",\"value\":12.0}]"
  },
  {
    "sha": "819b5bd2f5c504573d62e09ca993f23bd3615037",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/blob/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/settings.gradle",
    "raw_url": "https://github.com/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/raw/e8ee5318dfd027af19de98bd87c4d8cb183c75a1/settings.gradle",
    "contents_url": "https://api.github.com/repos/DmitryLapitsky/2020_12_OTUS_java_Lapitsky/contents/settings.gradle?ref=e8ee5318dfd027af19de98bd87c4d8cb183c75a1",
    "patch": "@@ -4,4 +4,5 @@ include 'hw02-collections'\n include 'hw03_diyTestFrameWork_annotations'\n include 'hw04_garbageCollectors'\n include 'hw05_aop'\n-include 'hw06_solid'\n\\ No newline at end of file\n+include 'hw06_solid'\n+include 'hw08_json'\n\\ No newline at end of file"
  }
]
