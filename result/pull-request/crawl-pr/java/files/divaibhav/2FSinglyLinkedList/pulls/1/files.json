[
  {
    "sha": "02accb790491806fb59e458970c14571d7ea0999",
    "filename": "ShivamTiwari.md",
    "status": "added",
    "additions": 213,
    "deletions": 0,
    "changes": 213,
    "blob_url": "https://github.com/divaibhav/2FSinglyLinkedList/blob/bf6dc0f7fe4f5b8fc8e9d26bf04b1c1aa950ba11/ShivamTiwari.md",
    "raw_url": "https://github.com/divaibhav/2FSinglyLinkedList/raw/bf6dc0f7fe4f5b8fc8e9d26bf04b1c1aa950ba11/ShivamTiwari.md",
    "contents_url": "https://api.github.com/repos/divaibhav/2FSinglyLinkedList/contents/ShivamTiwari.md?ref=bf6dc0f7fe4f5b8fc8e9d26bf04b1c1aa950ba11",
    "patch": "@@ -0,0 +1,213 @@\n+package implementation;\n+\n+import myinterface.MySinglyLinkedList;\n+\n+\n+public class MyLinkedList implements MySinglyLinkedList {\n+    //head reference or start  of linked list or reference of first node\n+    private Node head;\n+    //tail reference or end  of linked list or reference of last node\n+    private Node tail;\n+    //store total number of elements in linked list\n+    private int size;\n+    //constructor\n+    public MyLinkedList(){\n+        head = null;\n+        tail = null;\n+        size = 0;\n+    }\n+\n+    @Override\n+    public int size(){\n+        return size;\n+    }\n+\n+    @Override\n+    public void addLast(int element) {\n+        Node node = new Node(element);\n+        if(isEmpty()){\n+            head = node;\n+            tail = node;\n+        }\n+        else{\n+            tail.setNext(node);\n+            // tail = node;there is an error\n+        }\n+        size++;\n+\n+    }\n+\n+    @Override\n+    public void addLastWithoutUsingTail(int element) {\n+        Node node = new Node(element);\n+        if(isEmpty()){\n+            head = node;\n+            tail = node;\n+        }\n+        else{\n+            Node temp = head;\n+            while(temp.getNext() != null){\n+                temp = temp.getNext();\n+            }\n+            //temp is last node\n+            temp.setNext(node);\n+            tail = node;\n+        }\n+        size++;\n+\n+    }\n+\n+    @Override\n+    public boolean isEmpty(){\n+        return head == null;\n+    }\n+    @Override\n+    public void addFirst(int element){\n+        Node node = new Node(element);\n+        if(isEmpty()){\n+            head = node;\n+            tail = node;\n+            size++;\n+        }\n+        else{\n+            node.setNext(head);\n+            head = node;\n+            size++;\n+        }\n+    }\n+    //traverse\n+    public void traverse() {\n+        if (!isEmpty()) {\n+            Node temp = head;\n+            System.out.print(\"head-->\");\n+            while (temp != null){\n+                System.out.print(temp.getData() +\"-->\");\n+                //updating temp value to refer next node of sequence\n+                temp = temp.getNext();\n+            }\n+            System.out.println(\"null\");\n+        }\n+        else{\n+            System.out.println(\"linked list empty\");\n+        }\n+    }\n+\n+    @Override\n+    public void addAfterGivenNode(int givenElement, int element) {\n+        Node node = new Node(element);\n+        if(!isEmpty()){\n+            //case 1, not needed\n+            if(head == tail){\n+                if(head.getData() == givenElement){\n+                    head.setNext(node);\n+                    tail = node;\n+                    size++;\n+                }\n+                else {\n+                    System.out.println(\"givenElement not found in list\");\n+                }\n+            }\n+            else{\n+                Node temp = head;\n+                while(temp != null && temp.getData() != givenElement){\n+                    temp = temp.getNext();\n+                }\n+                if(temp != null){\n+                   //case 2\n+                    node.setNext(temp.getNext());\n+                    temp.setNext(node);\n+                    size++;\n+                    if(temp == tail){\n+                        tail = node;\n+                    }\n+                }\n+                else{\n+                    System.out.println(\"givenElement not found in list\");\n+                }\n+            }\n+        }\n+        else{\n+            System.out.println(\"empty list\");\n+        }\n+    }\n+\n+    @Override\n+    public int removeFirst() {\n+        int response = 0;//considering 0 as invalid data\n+        if(!isEmpty()){\n+            response = head.getData();\n+            head = head.getNext();\n+            if(head == null){\n+                tail = null;\n+            }\n+            size--;\n+        }\n+        return response;\n+    }\n+\n+    @Override\n+    public int removeLast() {\n+        int response = 0;\n+        if(!isEmpty()){\n+            response = tail.getData();\n+            Node temp = head;\n+            Node previous = null;\n+            while(temp.getNext() != null){\n+                previous = temp;\n+                temp = temp.getNext();\n+            }\n+            //multiple nodes in linked list\n+            if(previous != null){\n+                previous.setNext(null);\n+                tail = previous;\n+            }\n+            //single node\n+            else {\n+                head = null;\n+                tail = null;\n+            }\n+            size--;\n+        }\n+        return response;\n+    }\n+\n+    @Override\n+    public int removeGivenNode(int givenElement) {\n+\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean search(int element) {\n+        return false;\n+    }\n+\n+    @Override\n+    public int first() {\n+        if(!isEmpty()){\n+            return head.getData();\n+        }\n+        return 0;\n+    }\n+\n+    @Override\n+    public int last() {\n+        if(!isEmpty()){\n+            return tail.getData();\n+        }\n+        return 0;\n+    }\n+\n+    public Node getHead() {\n+        return head;\n+    }\n+\n+    //printing linked list in reverse\n+    public void traverseReverse(Node node){\n+        if(node == null){\n+            return;\n+        }\n+        traverseReverse(node.getNext());\n+        System.out.print(node.getData() +\",\");\n+    }\n+}"
  }
]
