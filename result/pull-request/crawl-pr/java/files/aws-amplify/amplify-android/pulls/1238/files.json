[
  {
    "sha": "631d2de6b6d1e0a74f6099f2c26923a3d19d4400",
    "filename": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api-appsync/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequest.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api-appsync/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequest.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api-appsync/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequest.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -47,6 +47,7 @@\n     private final SelectionSet selectionSet;\n     private final Map<String, Object> variables;\n     private final Map<String, String> variableTypes;\n+    private final AuthorizationType authorizationType;\n \n     /**\n      * Constructor for AppSyncGraphQLRequest.\n@@ -58,6 +59,7 @@ private AppSyncGraphQLRequest(Builder builder) {\n         this.selectionSet = builder.selectionSet;\n         this.variables = Immutable.of(builder.variables);\n         this.variableTypes = Immutable.of(builder.variableTypes);\n+        this.authorizationType = builder.authorizationType;\n     }\n \n     /**\n@@ -81,6 +83,14 @@ public Operation getOperation() {\n         return Immutable.of(variables);\n     }\n \n+    /**\n+     * Returns the {@link AuthorizationType} for this request.\n+     * @return the {@link AuthorizationType} for this request.\n+     */\n+    public AuthorizationType getAuthorizationType() {\n+        return authorizationType;\n+    }\n+\n     /**\n      *  Returns String value used for GraphQL \"query\" in HTTP request body.\n      *\n@@ -205,6 +215,7 @@ public String toString() {\n         private GraphQLRequestOptions requestOptions;\n         private Type responseType;\n         private SelectionSet selectionSet;\n+        private AuthorizationType authorizationType;\n         private final Map<String, Object> variables;\n         private final Map<String, String> variableTypes;\n \n@@ -220,6 +231,7 @@ public String toString() {\n             this.selectionSet = new SelectionSet(request.selectionSet);\n             this.variables = new HashMap<>(request.variables);\n             this.variableTypes = new HashMap<>(request.variableTypes);\n+            this.authorizationType = request.authorizationType;\n         }\n \n         /**\n@@ -272,6 +284,16 @@ public Builder responseType(@NonNull Type responseType) {\n             return Builder.this;\n         }\n \n+        /**\n+         * Sets the authorization type for the request.\n+         * @param authorizationType the desired authorization type.\n+         * @return this builder instance.\n+         */\n+        public Builder authorizationType(@NonNull AuthorizationType authorizationType) {\n+            this.authorizationType = Objects.requireNonNull(authorizationType);\n+            return Builder.this;\n+        }\n+\n         /**\n          * Sets a variable and returns this builder.\n          * @param key the variable key."
  },
  {
    "sha": "48d135bf3aac5bcebd843e26bb2ae7d54143f3fe",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java",
    "status": "modified",
    "additions": 30,
    "deletions": 12,
    "changes": 42,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -23,6 +23,7 @@\n \n import com.amplifyframework.api.ApiException;\n import com.amplifyframework.api.ApiPlugin;\n+import com.amplifyframework.api.aws.auth.ApiRequestDecoratorFactory;\n import com.amplifyframework.api.aws.auth.AuthRuleRequestDecorator;\n import com.amplifyframework.api.aws.operation.AWSRestOperation;\n import com.amplifyframework.api.events.ApiEndpointStatusChangeEvent;\n@@ -130,26 +131,26 @@ public void configure(\n         AWSApiPluginConfiguration pluginConfig =\n                 AWSApiPluginConfigurationReader.readFrom(pluginConfiguration);\n \n-        final InterceptorFactory interceptorFactory =\n-                new AppSyncSigV4SignerInterceptorFactory(authProvider);\n-\n         for (Map.Entry<String, ApiConfiguration> entry : pluginConfig.getApis().entrySet()) {\n             final String apiName = entry.getKey();\n             final ApiConfiguration apiConfiguration = entry.getValue();\n             final EndpointType endpointType = apiConfiguration.getEndpointType();\n             final OkHttpClient.Builder builder = new OkHttpClient.Builder();\n             builder.addNetworkInterceptor(UserAgentInterceptor.using(UserAgent::string));\n             builder.eventListener(new ApiConnectionEventListener());\n-            if (apiConfiguration.getAuthorizationType() != AuthorizationType.NONE) {\n-                builder.addInterceptor(interceptorFactory.create(apiConfiguration));\n-            }\n \n             OkHttpConfigurator configurator = apiConfigurators.get(apiName);\n             if (configurator != null) {\n                 configurator.applyConfiguration(builder);\n             }\n             final OkHttpClient okHttpClient = builder.build();\n \n+            ApiRequestDecoratorFactory requestDecoratorFactory =\n+                new ApiRequestDecoratorFactory(authProvider,\n+                                               apiConfiguration.getAuthorizationType(),\n+                                               apiConfiguration.getRegion(),\n+                                               apiConfiguration.getApiKey());\n+\n             final SubscriptionAuthorizer subscriptionAuthorizer =\n                     new SubscriptionAuthorizer(apiConfiguration, authProvider);\n             final SubscriptionEndpoint subscriptionEndpoint =\n@@ -160,7 +161,10 @@ public void configure(\n             if (EndpointType.GRAPHQL.equals(endpointType)) {\n                 gqlApis.add(apiName);\n             }\n-            apiDetails.put(apiName, new ClientDetails(apiConfiguration, okHttpClient, subscriptionEndpoint));\n+            apiDetails.put(apiName, new ClientDetails(apiConfiguration,\n+                                                      okHttpClient,\n+                                                      subscriptionEndpoint,\n+                                                      requestDecoratorFactory));\n         }\n     }\n \n@@ -297,8 +301,13 @@ public String getVersion() {\n         // Decorate the request according to the auth rule parameters.\n         try {\n             AuthorizationType authType = clientDetails\n-                    .getApiConfiguration()\n-                    .getAuthorizationType();\n+                .getApiConfiguration()\n+                .getAuthorizationType();\n+            if (graphQLRequest instanceof AppSyncGraphQLRequest<?> &&\n+                ((AppSyncGraphQLRequest<?>) graphQLRequest).getAuthorizationType() != null) {\n+                authType = ((AppSyncGraphQLRequest<?>) graphQLRequest).getAuthorizationType();\n+            }\n+\n             authDecoratedRequest = requestDecorator.decorate(graphQLRequest, authType);\n         } catch (ApiException exception) {\n             onSubscriptionFailure.accept(exception);\n@@ -588,6 +597,7 @@ private String selectApiName(Set<String> apiClients) throws ApiException {\n                 .endpoint(clientDetails.getApiConfiguration().getEndpoint())\n                 .client(clientDetails.getOkHttpClient())\n                 .request(graphQLRequest)\n+                .apiRequestSignerFactory(clientDetails.getApiRequestDecoratorFactory())\n                 .responseFactory(gqlResponseFactory)\n                 .onResponse(onResponse)\n                 .onFailure(onFailure)\n@@ -649,6 +659,7 @@ private RestOperation createRestOperation(\n         AWSRestOperation operation = new AWSRestOperation(operationRequest,\n                 clientDetails.apiConfiguration.getEndpoint(),\n                 clientDetails.okHttpClient,\n+                clientDetails.apiRequestDecoratorFactory,\n                 onResponse,\n                 onFailure\n         );\n@@ -663,18 +674,21 @@ private RestOperation createRestOperation(\n         private final ApiConfiguration apiConfiguration;\n         private final OkHttpClient okHttpClient;\n         private final SubscriptionEndpoint subscriptionEndpoint;\n+        private final ApiRequestDecoratorFactory apiRequestDecoratorFactory;\n \n         /**\n          * Constructs a client detail object containing client and url.\n          * It associates a http client with its dedicated endpoint.\n          */\n         ClientDetails(\n-                final ApiConfiguration apiConfiguration,\n-                final OkHttpClient okHttpClient,\n-                final SubscriptionEndpoint subscriptionEndpoint) {\n+            final ApiConfiguration apiConfiguration,\n+            final OkHttpClient okHttpClient,\n+            final SubscriptionEndpoint subscriptionEndpoint,\n+            final ApiRequestDecoratorFactory apiRequestDecoratorFactory) {\n             this.apiConfiguration = apiConfiguration;\n             this.okHttpClient = okHttpClient;\n             this.subscriptionEndpoint = subscriptionEndpoint;\n+            this.apiRequestDecoratorFactory = apiRequestDecoratorFactory;\n         }\n \n         ApiConfiguration getApiConfiguration() {\n@@ -689,6 +703,10 @@ SubscriptionEndpoint getSubscriptionEndpoint() {\n             return subscriptionEndpoint;\n         }\n \n+        ApiRequestDecoratorFactory getApiRequestDecoratorFactory() {\n+            return apiRequestDecoratorFactory;\n+        }\n+\n         @Override\n         public boolean equals(Object thatObject) {\n             if (this == thatObject) {"
  },
  {
    "sha": "3f5cf9c1e17ea2cf75b0a96163602edcfed47983",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLOperation.java",
    "status": "modified",
    "additions": 35,
    "deletions": 6,
    "changes": 41,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLOperation.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLOperation.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLOperation.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -20,18 +20,23 @@\n \n import com.amplifyframework.AmplifyException;\n import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.auth.ApiRequestDecoratorFactory;\n+import com.amplifyframework.api.aws.auth.RequestDecorator;\n import com.amplifyframework.api.graphql.GraphQLOperation;\n import com.amplifyframework.api.graphql.GraphQLRequest;\n import com.amplifyframework.api.graphql.GraphQLResponse;\n import com.amplifyframework.core.Amplify;\n import com.amplifyframework.core.Consumer;\n import com.amplifyframework.logging.Logger;\n \n+import org.jetbrains.annotations.NotNull;\n+\n import java.io.IOException;\n import java.util.Objects;\n \n import okhttp3.Call;\n import okhttp3.Callback;\n+import okhttp3.Interceptor;\n import okhttp3.MediaType;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n@@ -53,6 +58,7 @@\n     private final OkHttpClient client;\n     private final Consumer<GraphQLResponse<R>> onResponse;\n     private final Consumer<ApiException> onFailure;\n+    private final ApiRequestDecoratorFactory apiRequestDecoratorFactory;\n \n     private Call ongoingCall;\n \n@@ -69,10 +75,12 @@ private AppSyncGraphQLOperation(\n             @NonNull String endpoint,\n             @NonNull OkHttpClient client,\n             @NonNull GraphQLRequest<R> request,\n+            @NonNull ApiRequestDecoratorFactory apiRequestDecoratorFactory,\n             @NonNull GraphQLResponse.Factory responseFactory,\n             @NonNull Consumer<GraphQLResponse<R>> onResponse,\n             @NonNull Consumer<ApiException> onFailure) {\n         super(request, responseFactory);\n+        this.apiRequestDecoratorFactory = apiRequestDecoratorFactory;\n         this.endpoint = endpoint;\n         this.client = client;\n         this.onResponse = onResponse;\n@@ -88,12 +96,25 @@ public void start() {\n \n         try {\n             LOG.debug(\"Request: \" + getRequest().getContent());\n-            ongoingCall = client.newCall(new Request.Builder()\n-                    .url(endpoint)\n-                    .addHeader(\"accept\", CONTENT_TYPE)\n-                    .addHeader(\"content-type\", CONTENT_TYPE)\n-                    .post(RequestBody.create(getRequest().getContent(), MediaType.parse(CONTENT_TYPE)))\n-                    .build());\n+            RequestDecorator requestDecorator = apiRequestDecoratorFactory.fromGraphQLRequest(getRequest());\n+            Request okHttpRequest = new Request.Builder()\n+                .url(endpoint)\n+                .addHeader(\"accept\", CONTENT_TYPE)\n+                .addHeader(\"content-type\", CONTENT_TYPE)\n+                .post(RequestBody.create(getRequest().getContent(), MediaType.parse(CONTENT_TYPE)))\n+                .build();\n+\n+            ongoingCall = client.newBuilder()\n+                .addInterceptor(new Interceptor() {\n+                    @NotNull\n+                    @Override\n+                    public Response intercept(@NotNull Chain chain) throws IOException {\n+                        return chain.proceed(requestDecorator.decorate(chain.request()));\n+                    }\n+                })\n+                .build()\n+                .newCall(okHttpRequest);\n+\n             ongoingCall.enqueue(new OkHttpCallback());\n         } catch (Exception error) {\n             // Cancel if possible\n@@ -156,6 +177,7 @@ public void onFailure(@NonNull Call call, @NonNull IOException exception) {\n         private OkHttpClient client;\n         private GraphQLRequest<R> request;\n         private GraphQLResponse.Factory responseFactory;\n+        private ApiRequestDecoratorFactory apiRequestDecoratorFactory;\n         private Consumer<GraphQLResponse<R>> onResponse;\n         private Consumer<ApiException> onFailure;\n \n@@ -189,16 +211,23 @@ public void onFailure(@NonNull Call call, @NonNull IOException exception) {\n             return this;\n         }\n \n+        Builder<R> apiRequestSignerFactory(ApiRequestDecoratorFactory apiRequestDecoratorFactory) {\n+            this.apiRequestDecoratorFactory = apiRequestDecoratorFactory;\n+            return this;\n+        }\n+\n         @SuppressLint(\"SyntheticAccessor\")\n         AppSyncGraphQLOperation<R> build() {\n             return new AppSyncGraphQLOperation<>(\n                 Objects.requireNonNull(endpoint),\n                 Objects.requireNonNull(client),\n                 Objects.requireNonNull(request),\n+                Objects.requireNonNull(apiRequestDecoratorFactory),\n                 Objects.requireNonNull(responseFactory),\n                 Objects.requireNonNull(onResponse),\n                 Objects.requireNonNull(onFailure)\n             );\n         }\n+\n     }\n }"
  },
  {
    "sha": "1ed461332f3c8e733e9fcbbce6326a1c38fafcfd",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -69,7 +69,12 @@ JSONObject createHeadersForConnection() throws ApiException {\n     }\n \n     private JSONObject createHeaders(GraphQLRequest<?> request, boolean connectionFlag) throws ApiException {\n-        switch (configuration.getAuthorizationType()) {\n+        AuthorizationType authType = configuration.getAuthorizationType();\n+        if (request instanceof AppSyncGraphQLRequest<?> &&\n+            ((AppSyncGraphQLRequest<?>) request).getAuthorizationType() != null) {\n+            authType = ((AppSyncGraphQLRequest<?>) request).getAuthorizationType();\n+        }\n+        switch (authType) {\n             case API_KEY:\n                 ApiKeyAuthProvider keyProvider = authProviders.getApiKeyAuthProvider();\n                 if (keyProvider == null) {"
  },
  {
    "sha": "51a8f33a684d2e8164462277a9f52d0ab580f00c",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/ApiKeyRequestDecorator.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/ApiKeyRequestDecorator.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/ApiKeyRequestDecorator.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/auth/ApiKeyRequestDecorator.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.api.aws.sigv4.ApiKeyAuthProvider;\n+\n+/**\n+ * Request signer that adds a header with the API key.\n+ */\n+public final class ApiKeyRequestDecorator implements RequestDecorator {\n+    private static final String X_API_KEY = \"x-api-key\";\n+    private final ApiKeyAuthProvider apiKeyProvider;\n+\n+    /**\n+     * Constructor that takes in the API key provider to be used when signing the request.\n+     * @param apiKeyProvider An implementation of the {@link ApiKeyAuthProvider} interface.\n+     */\n+    public ApiKeyRequestDecorator(@NonNull ApiKeyAuthProvider apiKeyProvider) {\n+        this.apiKeyProvider = apiKeyProvider;\n+    }\n+\n+    @Override\n+    public okhttp3.Request decorate(okhttp3.Request request) {\n+        return request.newBuilder()\n+                      .addHeader(X_API_KEY, apiKeyProvider.getAPIKey())\n+                      .build();\n+    }\n+}"
  },
  {
    "sha": "a97f3d16a703d72c4abe5bf480eca610859b57b8",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/ApiRequestDecoratorFactory.java",
    "status": "added",
    "additions": 144,
    "deletions": 0,
    "changes": 144,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/ApiRequestDecoratorFactory.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/ApiRequestDecoratorFactory.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/auth/ApiRequestDecoratorFactory.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.AppSyncV4Signer;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.rest.RestOperationRequest;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.Objects;\n+\n+import okhttp3.Request;\n+\n+/**\n+ * Factory class that creates instances of different implementations of {@link RequestDecorator}s.\n+ */\n+public final class ApiRequestDecoratorFactory {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-api\");\n+    private static final RequestDecorator NO_OP_REQUEST_SIGNER = new RequestDecorator() {\n+        @Override\n+        public Request decorate(Request request) {\n+            return request;\n+        }\n+    };\n+\n+    private final ApiAuthProviders apiAuthProviders;\n+    private final String region;\n+    private final AuthorizationType defaultAuthorizationType;\n+    private final String apiKey;\n+\n+    /**\n+     * Constructor that accepts the API auth providers to be used with their respective request signer.\n+     * @param apiAuthProviders An instance with fully configured auth providers for use when signing requests.\n+     * @param defaultAuthorizationType The authorization type to use as default.\n+     * @param region The AWS region where the API is deployed.\n+     */\n+    public ApiRequestDecoratorFactory(@NonNull ApiAuthProviders apiAuthProviders,\n+                                      @NonNull AuthorizationType defaultAuthorizationType,\n+                                      @NonNull String region) {\n+        this(apiAuthProviders, defaultAuthorizationType, region, null);\n+    }\n+\n+    /**\n+     * Constructor that accepts the API auth providers to be used with their respective request signer.\n+     * @param apiAuthProviders An instance with fully configured auth providers for use when signing requests.\n+     * @param defaultAuthorizationType The authorization type to use as default.\n+     * @param region The AWS region where the API is deployed.\n+     * @param apiKey The API key to use for APIs with API_KEY authentication type.\n+     */\n+    public ApiRequestDecoratorFactory(@NonNull ApiAuthProviders apiAuthProviders,\n+                                      @NonNull AuthorizationType defaultAuthorizationType,\n+                                      @NonNull String region,\n+                                      @Nullable String apiKey) {\n+        this.apiAuthProviders = Objects.requireNonNull(apiAuthProviders);\n+        this.defaultAuthorizationType = Objects.requireNonNull(defaultAuthorizationType);\n+        this.region = Objects.requireNonNull(region);\n+        this.apiKey = apiKey;\n+    }\n+\n+    /**\n+     * Return the appropriate request signer after inspecting the request.\n+     * @param graphQLRequest The graphQL request sent to the API.\n+     * @return The request signer\n+     * @throws ApiException If it's unable to retrieve the decorator for the given request.\n+     */\n+    public RequestDecorator fromGraphQLRequest(GraphQLRequest<?> graphQLRequest) throws ApiException {\n+        // If it's not a an instance of AppSyncGraphQLRequest OR\n+        // the request's authorization type is null\n+        AuthorizationType authType = defaultAuthorizationType;\n+        if (graphQLRequest instanceof AppSyncGraphQLRequest<?>\n+            && ((AppSyncGraphQLRequest<?>) graphQLRequest).getAuthorizationType() != null) {\n+            authType = ((AppSyncGraphQLRequest<?>) graphQLRequest).getAuthorizationType();\n+        }\n+        return forAuthType(authType);\n+    }\n+\n+    /**\n+     * For REST APIs, we just use the default auth type.\n+     * @param restOperationRequest The REST request sent to the API.\n+     * @return The request signer\n+     * @throws ApiException If it's unable to retrieve the decorator for the given request.\n+     */\n+    public RequestDecorator fromRestRequest(RestOperationRequest restOperationRequest) throws ApiException {\n+        return forAuthType(defaultAuthorizationType);\n+    }\n+\n+    /**\n+     * Given a authorization type, it returns the appropriate request signer.\n+     * @param authorizationType the authorization type to be used for the request.\n+     * @return the appropriate request signer for the given authorization type.\n+     */\n+    private RequestDecorator forAuthType(@NonNull AuthorizationType authorizationType) throws ApiException {\n+        if (AuthorizationType.AMAZON_COGNITO_USER_POOLS.equals(authorizationType) &&\n+            apiAuthProviders.getCognitoUserPoolsAuthProvider() != null) {\n+            // By calling getLatestAuthToken() here instead of inside the lambda block, makes the exception\n+            // handling a little bit cleaner. If getLatestAuthToken() is called from inside the lambda expression\n+            // below, we'd have to surround it with a try catch. By doing it this way, if there's a problem,\n+            // the ApiException will just be bubbled up. Same for OPENID_CONNECT.\n+            final String token = apiAuthProviders.getCognitoUserPoolsAuthProvider().getLatestAuthToken();\n+            return new JWTTokenRequestDecorator(() -> token);\n+        } else if (AuthorizationType.OPENID_CONNECT.equals(authorizationType) &&\n+            apiAuthProviders.getOidcAuthProvider() != null) {\n+            final String token = apiAuthProviders.getOidcAuthProvider().getLatestAuthToken();\n+            return new JWTTokenRequestDecorator(() -> token);\n+        } else if (AuthorizationType.API_KEY.equals(authorizationType)) {\n+            if (apiAuthProviders.getApiKeyAuthProvider() != null) {\n+                return new ApiKeyRequestDecorator(apiAuthProviders.getApiKeyAuthProvider());\n+            } else if (apiKey != null) {\n+                return new ApiKeyRequestDecorator(() -> apiKey);\n+            } else {\n+                throw new ApiException(\"Attempting to authentication type API_KEY without an API key provider or \" +\n+                                           \"an API key in the config file\", AmplifyException.TODO_RECOVERY_SUGGESTION);\n+            }\n+        } else if (AuthorizationType.AWS_IAM.equals(authorizationType) &&\n+            apiAuthProviders.getAWSCredentialsProvider() != null) {\n+            AppSyncV4Signer appSyncV4Signer = new AppSyncV4Signer(region);\n+            return new IamRequestDecorator(appSyncV4Signer, apiAuthProviders.getAWSCredentialsProvider());\n+        } else {\n+            return NO_OP_REQUEST_SIGNER;\n+        }\n+    }\n+}"
  },
  {
    "sha": "b080f895612cdc94f39e51e63430a80a25895b8f",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/IamRequestDecorator.java",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/IamRequestDecorator.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/IamRequestDecorator.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/auth/IamRequestDecorator.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import android.net.Uri;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.api.aws.sigv4.AppSyncV4Signer;\n+\n+import com.amazonaws.DefaultRequest;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.http.HttpMethodName;\n+import com.amazonaws.util.IOUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import okhttp3.MediaType;\n+import okhttp3.RequestBody;\n+import okio.Buffer;\n+\n+/**\n+ * Request signer implementatioon that uses AWS SigV4 signing.\n+ */\n+public class IamRequestDecorator implements RequestDecorator {\n+    private static final String CONTENT_TYPE = \"application/json\";\n+    private static final MediaType JSON_MEDIA_TYPE = MediaType.parse(CONTENT_TYPE);\n+    private static final String APP_SYNC_SERVICE_NAME = \"appsync\";\n+    private final AWSCredentialsProvider credentialsProvider;\n+    private final AppSyncV4Signer v4Signer;\n+\n+    /**\n+     * Constructor that takes in the necessary dependencies used to sign the requests.\n+     * @param v4Signer An instance of the {@link AppSyncV4Signer}.\n+     * @param credentialsProvider The AWS credentials provider to use when retrieving AWS credentials.\n+     */\n+    public IamRequestDecorator(AppSyncV4Signer v4Signer, AWSCredentialsProvider credentialsProvider) {\n+        this.v4Signer = v4Signer;\n+        this.credentialsProvider = credentialsProvider;\n+    }\n+\n+    /**\n+     * Adds the appropriate header to the provided HTTP request.\n+     * @param req The request to be signed.\n+     * @return A new instance of the request containing the signature headers.\n+     * @throws IOException If the signing process fails.\n+     */\n+    public final okhttp3.Request decorate(okhttp3.Request req) throws IOException {\n+        //Clone the request into a new DefaultRequest object and populate it with credentials\n+        final DefaultRequest<?> dr = new DefaultRequest<>(APP_SYNC_SERVICE_NAME);\n+        //set the endpoint\n+        dr.setEndpoint(req.url().uri());\n+        //copy all the headers\n+        for (String headerName : req.headers().names()) {\n+            dr.addHeader(headerName, req.header(headerName));\n+        }\n+        //set the http method\n+        dr.setHttpMethod(HttpMethodName.valueOf(req.method()));\n+\n+        //set the request body\n+        final byte[] bodyBytes;\n+        RequestBody body = req.body();\n+        if (body != null) {\n+            //write the body to a byte array.\n+            final Buffer buffer = new Buffer();\n+            body.writeTo(buffer);\n+            bodyBytes = IOUtils.toByteArray(buffer.inputStream());\n+        } else {\n+            bodyBytes = \"\".getBytes();\n+        }\n+        dr.setContent(new ByteArrayInputStream(bodyBytes));\n+\n+        //set the query string parameters\n+        dr.setParameters(splitQuery(req.url().url()));\n+\n+        v4Signer.sign(dr, credentialsProvider.getCredentials());\n+\n+        //Copy the signed/credentialed request back into an OKHTTP Request object.\n+        okhttp3.Request.Builder okReqBuilder = new okhttp3.Request.Builder();\n+\n+        //set the headers from default request, since it contains the signed headers as well.\n+        for (Map.Entry<String, String> e : dr.getHeaders().entrySet()) {\n+            okReqBuilder.addHeader(e.getKey(), e.getValue());\n+        }\n+\n+        //Set the URL and Method\n+        okReqBuilder.url(req.url());\n+        final RequestBody requestBody;\n+        if (req.body() != null && req.body().contentLength() > 0) {\n+            requestBody = RequestBody.create(bodyBytes, JSON_MEDIA_TYPE);\n+        } else {\n+            requestBody = null;\n+        }\n+\n+        okReqBuilder.method(req.method(), requestBody);\n+\n+        //continue with chain.\n+        return okReqBuilder.build();\n+    }\n+\n+    // Extracts query string parameters from a URL.\n+    @NonNull\n+    private static Map<String, String> splitQuery(URL url) throws IOException {\n+        Map<String, String> queryPairs = new LinkedHashMap<>();\n+        Uri uri = Uri.parse(url.toString());\n+        for (String paramName : uri.getQueryParameterNames()) {\n+            queryPairs.put(paramName, URLDecoder.decode(uri.getQueryParameter(paramName), \"UTF8\"));\n+        }\n+        return queryPairs;\n+    }\n+}"
  },
  {
    "sha": "d2ed6a4a94647123b09e1237d58d02a0648c6766",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/JWTTokenRequestDecorator.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/JWTTokenRequestDecorator.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/JWTTokenRequestDecorator.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/auth/JWTTokenRequestDecorator.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Request signer that adds a JWT token to the provided request.\n+ */\n+public class JWTTokenRequestDecorator implements RequestDecorator {\n+    private static final String AUTHORIZATION = \"authorization\";\n+    private final TokenSupplier tokenSupplier;\n+\n+    /**\n+     * Constructor that accepts a supplier function which will be used to retrieve the JWT token at runtime.\n+     * @param tokenSupplier Supplier function that returns the JWT token.\n+     */\n+    public JWTTokenRequestDecorator(TokenSupplier tokenSupplier) {\n+        this.tokenSupplier = tokenSupplier;\n+    }\n+\n+    /**\n+     * Adds the appropriate header to the provided HTTP request.\n+     * @param req The request to be signed.\n+     * @return A new instance of the request containing the signature headers.\n+     * @throws IOException If the signing process fails.\n+     */\n+    public final okhttp3.Request decorate(okhttp3.Request req) throws IOException {\n+        return req.newBuilder().addHeader(AUTHORIZATION, tokenSupplier.get()).build();\n+    }\n+\n+    /**\n+     * Defines a simple interface through which this decorator can retrieve the\n+     * JWT token to be added to the request.\n+     */\n+    public interface TokenSupplier {\n+        /**\n+         * Implementations of this method should return a JWT token ready to be added as an\n+         * HTTP request header.\n+         * @return The JWT token.\n+         */\n+        String get();\n+    }\n+}"
  },
  {
    "sha": "565f58e05727eb26275bf57490e288af661a2796",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/RequestDecorator.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/RequestDecorator.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/auth/RequestDecorator.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/auth/RequestDecorator.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import java.io.IOException;\n+\n+import okhttp3.Request;\n+\n+/**\n+ * Interface that defines some basic functionality with regards to decorating\n+ * HTTP requests that are going to be sent to AppSync\n+ * Implementations of this class should implement the {@link RequestDecorator#addAuthHeader(com.amazonaws.Request)}\n+ * method.\n+ */\n+public interface RequestDecorator {\n+\n+    /**\n+     * Method that takes in an instance of {@link Request}, transforms it as needed\n+     * and returns a new instance of {@link Request}.\n+     * @param request the HTTP request before modifications.\n+     * @return A new instance of the HTTP request after modifications (if any)\n+     * @throws IOException If an issue occurs during request transformation.\n+     */\n+    Request decorate(Request request) throws IOException;\n+}"
  },
  {
    "sha": "0af0366f638e4d1ea1bc6ab5571ae44632181d7c",
    "filename": "aws-api/src/main/java/com/amplifyframework/api/aws/operation/AWSRestOperation.java",
    "status": "modified",
    "additions": 21,
    "deletions": 1,
    "changes": 22,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/operation/AWSRestOperation.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/main/java/com/amplifyframework/api/aws/operation/AWSRestOperation.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/main/java/com/amplifyframework/api/aws/operation/AWSRestOperation.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -21,12 +21,16 @@\n \n import com.amplifyframework.AmplifyException;\n import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.auth.ApiRequestDecoratorFactory;\n+import com.amplifyframework.api.aws.auth.RequestDecorator;\n import com.amplifyframework.api.aws.utils.RestRequestFactory;\n import com.amplifyframework.api.rest.RestOperation;\n import com.amplifyframework.api.rest.RestOperationRequest;\n import com.amplifyframework.api.rest.RestResponse;\n import com.amplifyframework.core.Consumer;\n \n+import org.jetbrains.annotations.NotNull;\n+\n import java.io.IOException;\n import java.net.URL;\n import java.util.HashMap;\n@@ -36,6 +40,7 @@\n \n import okhttp3.Call;\n import okhttp3.Callback;\n+import okhttp3.Interceptor;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.Response;\n@@ -51,6 +56,7 @@\n     private final OkHttpClient client;\n     private final Consumer<RestResponse> onResponse;\n     private final Consumer<ApiException> onFailure;\n+    private final ApiRequestDecoratorFactory apiRequestDecoratorFactory;\n \n     private Call ongoingCall;\n \n@@ -59,18 +65,21 @@\n      * @param request REST request that contains the query and data.\n      * @param endpoint Endpoint against which the request to be made.\n      * @param client OKHTTPClient to be used for the request.\n+     * @param apiRequestDecoratorFactory The request decorator factory for the API.\n      * @param onResponse Callback to be invoked when a response is available from endpoint\n      * @param onFailure Callback to be invoked when there is a failure to obtain any response\n      */\n     public AWSRestOperation(\n             @NonNull RestOperationRequest request,\n             @NonNull String endpoint,\n             @NonNull OkHttpClient client,\n+            @NonNull ApiRequestDecoratorFactory apiRequestDecoratorFactory,\n             @NonNull Consumer<RestResponse> onResponse,\n             @NonNull Consumer<ApiException> onFailure) {\n         super(Objects.requireNonNull(request));\n         this.endpoint = Objects.requireNonNull(endpoint);\n         this.client = Objects.requireNonNull(client);\n+        this.apiRequestDecoratorFactory = apiRequestDecoratorFactory;\n         this.onResponse = Objects.requireNonNull(onResponse);\n         this.onFailure = Objects.requireNonNull(onFailure);\n     }\n@@ -82,14 +91,25 @@ public void start() {\n             return;\n         }\n         try {\n+            RequestDecorator requestDecorator = apiRequestDecoratorFactory.fromRestRequest(getRequest());\n             URL url = RestRequestFactory.createURL(endpoint,\n                     getRequest().getPath(),\n                     getRequest().getQueryParameters());\n             Request request = RestRequestFactory.createRequest(url,\n                     getRequest().getData(),\n                     getRequest().getHeaders(),\n                     getRequest().getHttpMethod());\n-            ongoingCall = client.newCall(request);\n+            ongoingCall = client.newBuilder()\n+                                .addInterceptor(new Interceptor() {\n+                                    @NotNull\n+                                    @Override\n+                                    public Response intercept(@NotNull Chain chain) throws IOException {\n+                                        Request decoratedRequest = requestDecorator.decorate(chain.request());\n+                                        return chain.proceed(decoratedRequest);\n+                                    }\n+                                })\n+                                .build()\n+                                .newCall(request);\n             ongoingCall.enqueue(new AWSRestOperation.OkHttpCallback());\n         } catch (Exception error) {\n             // Cancel if possible"
  },
  {
    "sha": "deed949ce6256bfe50f3400f53c988f0760a1dcb",
    "filename": "aws-api/src/test/java/com/amplifyframework/api/aws/AWSApiPluginTest.java",
    "status": "modified",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/test/java/com/amplifyframework/api/aws/AWSApiPluginTest.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/test/java/com/amplifyframework/api/aws/AWSApiPluginTest.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/test/java/com/amplifyframework/api/aws/AWSApiPluginTest.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -17,12 +17,15 @@\n \n import androidx.test.core.app.ApplicationProvider;\n \n+import com.amplifyframework.AmplifyException;\n import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n import com.amplifyframework.api.events.ApiChannelEventName;\n import com.amplifyframework.api.events.ApiEndpointStatusChangeEvent;\n import com.amplifyframework.api.graphql.GraphQLRequest;\n import com.amplifyframework.api.graphql.GraphQLResponse;\n import com.amplifyframework.api.graphql.PaginatedResult;\n+import com.amplifyframework.api.graphql.QueryType;\n import com.amplifyframework.api.graphql.model.ModelMutation;\n import com.amplifyframework.api.graphql.model.ModelPagination;\n import com.amplifyframework.api.graphql.model.ModelQuery;\n@@ -34,7 +37,11 @@\n import com.amplifyframework.testutils.HubAccumulator;\n import com.amplifyframework.testutils.Resources;\n import com.amplifyframework.testutils.random.RandomString;\n+import com.amplifyframework.util.TypeMaker;\n \n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n import org.json.JSONException;\n import org.json.JSONObject;\n import org.junit.After;\n@@ -44,6 +51,7 @@\n import org.robolectric.RobolectricTestRunner;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.Arrays;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n@@ -60,6 +68,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n /**\n@@ -91,6 +100,32 @@ public void setup() throws ApiException, IOException, JSONException {\n                 .put(\"authorizationType\", \"API_KEY\")\n                 .put(\"apiKey\", \"FAKE-API-KEY\"));\n \n+        ApiAuthProviders apiAuthProviders = ApiAuthProviders\n+            .builder()\n+            .awsCredentialsProvider(new AWSCredentialsProvider() {\n+                @Override\n+                public AWSCredentials getCredentials() {\n+                    return new BasicAWSCredentials(\"DUMMY_ID\", \"DUMMY_SECRET\");\n+                }\n+\n+                @Override\n+                public void refresh() {\n+\n+                }\n+            })\n+            .cognitoUserPoolsAuthProvider(new CognitoUserPoolsAuthProvider() {\n+                @Override\n+                public String getLatestAuthToken() throws ApiException {\n+                    return \"FAKE_TOKEN\";\n+                }\n+\n+                @Override\n+                public String getUsername() {\n+                    return \"FAKE_USER\";\n+                }\n+            })\n+            .build();\n+\n         this.plugin = AWSApiPlugin.builder()\n             .configureClient(\"graphQlApi\", builder -> {\n                 builder.addInterceptor(chain -> {\n@@ -101,6 +136,7 @@ public void setup() throws ApiException, IOException, JSONException {\n                 });\n                 builder.connectTimeout(10, TimeUnit.SECONDS);\n             })\n+            .apiAuthProviders(apiAuthProviders)\n             .build();\n         this.plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n     }\n@@ -282,4 +318,81 @@ public void headerInterceptorsAreConfigured() throws ApiException, InterruptedEx\n         assertNotNull(recordedRequest);\n         assertEquals(\"specialValue\", recordedRequest.getHeader(\"specialKey\"));\n     }\n+\n+    /**\n+     * If the auth mode is set for the individual request, ensure that the resulting request\n+     * to AppSync has the correct auth header.\n+     * @throws AmplifyException Not expected.\n+     * @throws InterruptedException Not expected.\n+     */\n+    @Test\n+    public void requestUsesCognitoForAuth() throws AmplifyException, InterruptedException {\n+        webServer.enqueue(new MockResponse()\n+                              .setBody(Resources.readAsString(\"blog-owners-query-results.json\")));\n+\n+        AppSyncGraphQLRequest<PaginatedResult<BlogOwner>> appSyncGraphQLRequest =\n+            createQueryRequestWithAuthMode(BlogOwner.class, AuthorizationType.AMAZON_COGNITO_USER_POOLS);\n+\n+        GraphQLResponse<PaginatedResult<BlogOwner>> actualResponse =\n+            Await.<GraphQLResponse<PaginatedResult<BlogOwner>>, ApiException>result(\n+                (onResult, onError) -> plugin.query(appSyncGraphQLRequest, onResult, onError)\n+            );\n+\n+        RecordedRequest recordedRequest = webServer.takeRequest();\n+        assertNull(recordedRequest.getHeader(\"x-api-key\"));\n+        assertNotNull(recordedRequest.getHeader(\"authorization\"));\n+        assertEquals(\"FAKE_TOKEN\", recordedRequest.getHeader(\"authorization\"));\n+        assertEquals(\n+            Arrays.asList(\"Curly\", \"Moe\", \"Larry\"),\n+            Observable.fromIterable(actualResponse.getData())\n+                      .map(BlogOwner::getName)\n+                      .toList()\n+                      .blockingGet()\n+        );\n+    }\n+\n+    /**\n+     * Ensure the auth mode used for the request is AWS_IAM. We verify this by\n+     * @throws AmplifyException Not expected.\n+     * @throws InterruptedException Not expected.\n+     */\n+    @Test\n+    public void requestUsesIamForAuth() throws AmplifyException, InterruptedException {\n+        webServer.enqueue(new MockResponse()\n+                              .setBody(Resources.readAsString(\"blog-owners-query-results.json\")));\n+\n+        AppSyncGraphQLRequest<PaginatedResult<BlogOwner>> appSyncGraphQLRequest =\n+            createQueryRequestWithAuthMode(BlogOwner.class, AuthorizationType.AWS_IAM);\n+\n+        GraphQLResponse<PaginatedResult<BlogOwner>> actualResponse =\n+            Await.<GraphQLResponse<PaginatedResult<BlogOwner>>, ApiException>result(\n+                (onResult, onError) -> plugin.query(appSyncGraphQLRequest, onResult, onError)\n+            );\n+\n+        RecordedRequest recordedRequest = webServer.takeRequest();\n+        assertNull(recordedRequest.getHeader(\"x-api-key\"));\n+        assertNotNull(recordedRequest.getHeader(\"authorization\"));\n+        assertTrue(recordedRequest.getHeader(\"authorization\").startsWith(\"AWS4-HMAC-SHA256\"));\n+        assertEquals(\n+            Arrays.asList(\"Curly\", \"Moe\", \"Larry\"),\n+            Observable.fromIterable(actualResponse.getData())\n+                      .map(BlogOwner::getName)\n+                      .toList()\n+                      .blockingGet()\n+        );\n+    }\n+\n+    private <R> AppSyncGraphQLRequest<PaginatedResult<R>>\n+                    createQueryRequestWithAuthMode(Type modelType,\n+                                                   AuthorizationType authMode) throws AmplifyException {\n+        Type responseType = TypeMaker.getParameterizedType(PaginatedResult.class, modelType);\n+        return AppSyncGraphQLRequest\n+            .builder()\n+            .authorizationType(authMode)\n+            .modelClass(BlogOwner.class)\n+            .responseType(responseType)\n+            .operation(QueryType.LIST)\n+            .requestOptions(new ApiGraphQLRequestOptions())\n+            .build();\n+    }\n }"
  },
  {
    "sha": "5f366058d2bb9146303ea16c0a2108330f4c07f8",
    "filename": "aws-api/src/test/java/com/amplifyframework/api/aws/operation/AWSRestOperationTest.java",
    "status": "modified",
    "additions": 31,
    "deletions": 4,
    "changes": 35,
    "blob_url": "https://github.com/aws-amplify/amplify-android/blob/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/test/java/com/amplifyframework/api/aws/operation/AWSRestOperationTest.java",
    "raw_url": "https://github.com/aws-amplify/amplify-android/raw/675c9565ffd763c7445f048e5caf6b70194eed37/aws-api/src/test/java/com/amplifyframework/api/aws/operation/AWSRestOperationTest.java",
    "contents_url": "https://api.github.com/repos/aws-amplify/amplify-android/contents/aws-api/src/test/java/com/amplifyframework/api/aws/operation/AWSRestOperationTest.java?ref=675c9565ffd763c7445f048e5caf6b70194eed37",
    "patch": "@@ -16,6 +16,9 @@\n package com.amplifyframework.api.aws.operation;\n \n import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.auth.ApiRequestDecoratorFactory;\n import com.amplifyframework.api.rest.HttpMethod;\n import com.amplifyframework.api.rest.RestOperationRequest;\n import com.amplifyframework.api.rest.RestResponse;\n@@ -98,11 +101,23 @@ public void cleanup() throws IOException {\n      */\n     @Test\n     public void responseEmittedWhenOperationSucceeds() throws ApiException {\n+        ApiRequestDecoratorFactory apiRequestDecoratorFactory =\n+            new ApiRequestDecoratorFactory(ApiAuthProviders.noProviderOverrides(),\n+                                           AuthorizationType.NONE,\n+                                           \"us-east-1\");\n         RestOperationRequest request =\n-            new RestOperationRequest(HttpMethod.GET, baseUrl.uri().getPath(), emptyMap(), emptyMap());\n+            new RestOperationRequest(HttpMethod.GET,\n+                                     baseUrl.uri().getPath(),\n+                                     emptyMap(),\n+                                     emptyMap());\n         RestResponse response = Await.<RestResponse, ApiException>result((onResult, onError) -> {\n             AWSRestOperation operation =\n-                new AWSRestOperation(request, baseUrl.url().toString(), client, onResult, onError);\n+                new AWSRestOperation(request,\n+                                     baseUrl.url().toString(),\n+                                     client,\n+                                     apiRequestDecoratorFactory,\n+                                     onResult,\n+                                     onError);\n             operation.start();\n         });\n         assertTrue(response.getCode().isSuccessful());\n@@ -119,13 +134,25 @@ public void responseEmittedWhenOperationSucceeds() throws ApiException {\n      */\n     @Test\n     public void noErrorEmittedIfOperationIsCancelled() {\n+        ApiRequestDecoratorFactory apiRequestDecoratorFactory =\n+            new ApiRequestDecoratorFactory(ApiAuthProviders.noProviderOverrides(),\n+                                           AuthorizationType.NONE,\n+                                           \"us-east-1\");\n         long timeToWaitForResponse = 300L;\n         RestOperationRequest request =\n-            new RestOperationRequest(HttpMethod.GET, baseUrl.uri().getPath(), emptyMap(), emptyMap());\n+            new RestOperationRequest(HttpMethod.GET,\n+                                     baseUrl.uri().getPath(),\n+                                     emptyMap(),\n+                                     emptyMap());\n         assertTimedOut(() ->\n             Await.<RestResponse, ApiException>result(timeToWaitForResponse, (onResult, onError) -> {\n                 AWSRestOperation operation =\n-                    new AWSRestOperation(request, baseUrl.url().toString(), client, onResult, onError);\n+                    new AWSRestOperation(request,\n+                                         baseUrl.url().toString(),\n+                                         client,\n+                                         apiRequestDecoratorFactory,\n+                                         onResult,\n+                                         onError);\n                 operation.start();\n                 operation.cancel();\n             })"
  }
]
