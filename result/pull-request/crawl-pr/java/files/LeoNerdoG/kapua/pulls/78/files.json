[
  {
    "sha": "f4f1450fd112777ffba145b38574a3a9c74c2193",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/exception/RestApiRuntimeExceptionTest.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/exception/RestApiRuntimeExceptionTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/exception/RestApiRuntimeExceptionTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/exception/RestApiRuntimeExceptionTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,118 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.exception;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class RestApiRuntimeExceptionTest extends Assert {\n+\n+    RestApiErrorCodes errorCode;\n+    Object stringObject, intObject, charObject;\n+    Throwable cause;\n+\n+    @Before\n+    public void initialize() {\n+        errorCode = RestApiErrorCodes.SESSION_NOT_POPULATED;\n+        stringObject = \"String Object\";\n+        intObject = 10;\n+        charObject = 'c';\n+        cause = new Throwable();\n+    }\n+\n+    @Test\n+    public void restApiRuntimeExceptionCodeTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(errorCode);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", RestApiErrorCodes.SESSION_NOT_POPULATED, restApiRuntimeException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Error: \", restApiRuntimeException.getMessage());\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCause());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void restApiRuntimeExceptionNullCodeTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(null);\n+\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCode());\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCause());\n+        restApiRuntimeException.getMessage();\n+    }\n+\n+    @Test\n+    public void restApiRuntimeExceptionCodeArgumentsTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(errorCode, stringObject, intObject, charObject);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", RestApiErrorCodes.SESSION_NOT_POPULATED, restApiRuntimeException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Error: \" + stringObject + \", \" + intObject + \", \" + charObject, restApiRuntimeException.getMessage());\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCause());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void restApiRuntimeExceptionNullCodeArgumentsTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(null, stringObject, intObject, charObject);\n+\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCode());\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCause());\n+        restApiRuntimeException.getMessage();\n+    }\n+\n+    @Test\n+    public void restApiRuntimeExceptionCodeNullArgumentsTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(errorCode, null);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", RestApiErrorCodes.SESSION_NOT_POPULATED, restApiRuntimeException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Error: \", restApiRuntimeException.getMessage());\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCause());\n+    }\n+\n+    @Test\n+    public void restApiRuntimeExceptionCodeCauseArgumentsTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(errorCode, cause, stringObject, intObject, charObject);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", RestApiErrorCodes.SESSION_NOT_POPULATED, restApiRuntimeException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Error: \" + stringObject + \", \" + intObject + \", \" + charObject, restApiRuntimeException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", cause, restApiRuntimeException.getCause());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void restApiRuntimeExceptionNullCodeCauseArgumentsTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(null, cause, stringObject, intObject, charObject);\n+\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", cause, restApiRuntimeException.getCause());\n+\n+        restApiRuntimeException.getMessage();\n+    }\n+\n+    @Test\n+    public void restApiRuntimeExceptionCodeNullCauseArgumentsTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(errorCode, null, stringObject, intObject, charObject);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", RestApiErrorCodes.SESSION_NOT_POPULATED, restApiRuntimeException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Error: \" + stringObject + \", \" + intObject + \", \" + charObject, restApiRuntimeException.getMessage());\n+        assertNull(\"Null expected.\", restApiRuntimeException.getCause());\n+    }\n+\n+    @Test\n+    public void restApiRuntimeExceptionCodeCauseNullArgumentsTest() {\n+        RestApiRuntimeException restApiRuntimeException = new RestApiRuntimeException(errorCode, cause, null);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", RestApiErrorCodes.SESSION_NOT_POPULATED, restApiRuntimeException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Error: \", restApiRuntimeException.getMessage());\n+        assertEquals(\"Expected and actual values should be the same.\", cause, restApiRuntimeException.getCause());\n+    }\n+}  \n\\ No newline at end of file"
  },
  {
    "sha": "257dc7d61691ca58610a3199e7adc8dd053f1412",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/exception/SessionNotPopulatedExceptionTest.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/exception/SessionNotPopulatedExceptionTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/exception/SessionNotPopulatedExceptionTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/exception/SessionNotPopulatedExceptionTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,31 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.exception;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class SessionNotPopulatedExceptionTest extends Assert {\n+\n+    @Test\n+    public void sessionNotPopulatedExceptionTest() {\n+        SessionNotPopulatedException sessionNotPopulatedException = new SessionNotPopulatedException();\n+\n+        assertEquals(\"Expected and actual values should be the same.\", RestApiErrorCodes.SESSION_NOT_POPULATED, sessionNotPopulatedException.getCode());\n+        assertEquals(\"Expected and actual values should be the same.\", \"Error: \", sessionNotPopulatedException.getMessage());\n+        assertNull(\"Null expected.\", sessionNotPopulatedException.getCause());\n+    }\n+}  \n\\ No newline at end of file"
  },
  {
    "sha": "1f2896bf521d2115f3674d5ac3976fece2a2969a",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/ByteArrayParamTest.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/ByteArrayParamTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/ByteArrayParamTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/ByteArrayParamTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ByteArrayParamTest extends Assert {\n+\n+    @Test\n+    public void byteArrayParamTest() {\n+        String[] base64encoded = {\"\", \"Some0-)9 t  ext    12\", \"1text5--=<>67890\", \"!@#$stri%^ng&12*()\", \"   _ +' string;.text,|<>\", \"  te5432<> string 98   <>..,,, d\", \" ,,:!2text 09 00238*&^  ,,\"};\n+        for (String encoded : base64encoded) {\n+            ByteArrayParam byteArrayParam = new ByteArrayParam(encoded);\n+            Assert.assertNotNull(\"NotNull expected.\", byteArrayParam.getValue());\n+        }\n+    }\n+\n+    @Test\n+    public void byteArrayParamNullTest() {\n+        ByteArrayParam byteArrayParam = new ByteArrayParam(null);\n+        Assert.assertNull(\"Null expected.\", byteArrayParam.getValue());\n+    }\n+} \n\\ No newline at end of file"
  },
  {
    "sha": "20712469fc3b27bdc0c23c092c5c306b73d7aa92",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/CountResultTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/CountResultTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/CountResultTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/CountResultTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,53 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class CountResultTest extends Assert {\n+\n+    @Test\n+    public void countResultWithoutParameterTest() {\n+        CountResult countResult = new CountResult();\n+        assertEquals(\"Expected and actual values should be the same.\", 0, countResult.getCount());\n+    }\n+\n+    @Test\n+    public void countResultWithParameterTest() {\n+        long[] countValues = {-9223372036854775808L, -10000000L, -10, -1L, 0L, 1L, 10, 9223372036854775807L};\n+\n+        for (long countValue : countValues) {\n+            CountResult countResult = new CountResult(countValue);\n+            assertEquals(\"Expected and actual values should be the same.\", countValue, countResult.getCount());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetCount() {\n+        long[] countValues = {-9223372036854775808L, -10000000L, -10L, -1L, 0L, 1L, 10L, 9223372036854775807L};\n+        CountResult countResult1 = new CountResult();\n+        CountResult countResult2 = new CountResult(100L);\n+\n+        for (long countValue : countValues) {\n+            countResult1.setCount(countValue);\n+            countResult2.setCount(countValue);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", countValue, countResult1.getCount());\n+            assertEquals(\"Expected and actual values should be the same.\", countValue, countResult2.getCount());\n+        }\n+    }\n+} \n\\ No newline at end of file"
  },
  {
    "sha": "7f3a57352c976c20c3853fc884f94f8b82424a90",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/DateParamTest.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/DateParamTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/DateParamTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/DateParamTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model;\n+\n+import org.eclipse.kapua.KapuaIllegalArgumentException;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class DateParamTest extends Assert {\n+\n+    @Test\n+    public void dateParamTest() throws KapuaIllegalArgumentException {\n+        String[] dates = {\"2020-10-27T21:32:52\", \" 2020-10-27T21:32:52+02:00\", \" 2020-10-27T19:32:52Z\", \" 2020-10-27T19:32:52+00:00\"};\n+\n+        for (int i = 0; i < dates.length; i++) {\n+            DateParam dateParam = new DateParam(dates[i]);\n+            assertNotNull(\"Null not expected.\", dateParam.getDate());\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void dateParamNullTest() throws KapuaIllegalArgumentException {\n+        DateParam dateParam = new DateParam(null);\n+\n+        dateParam.getDate();\n+    }\n+\n+    @Test(expected = KapuaIllegalArgumentException.class)\n+    public void dateParamInvalidDateTest() throws KapuaIllegalArgumentException {\n+        String[] invalidDates = {\"\", \"2020-10-27\", \" 2020-10-27T21:32 \", \" 2020-10-27T25:32:52+02:00\", \" 2020-10-27T21:32\"};\n+\n+        for (String invalidDate : invalidDates) {\n+            new DateParam(invalidDate);\n+        }\n+    }\n+} \n\\ No newline at end of file"
  },
  {
    "sha": "590a514beda8463ad70b73d4dee7241d3650d9a8",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/EntityIdTest.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/EntityIdTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/EntityIdTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/EntityIdTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,69 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.math.BigInteger;\n+\n+@Category(JUnitTests.class)\n+public class EntityIdTest extends Assert {\n+\n+    @Test\n+    public void entityIdTest() {\n+        String[] compactEntityId = {\"111\", \"entityId\", \"1000000\", \"-111\", \"12\"};\n+        String[] expectedValues = {\"-10403\", \"134670355735069\", \"-174798351539\", \"-303755\", \"-41\"};\n+\n+        for (int i = 0; i < compactEntityId.length; i++) {\n+            EntityId entityId = new EntityId(compactEntityId[i]);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", expectedValues[i], entityId.getId().toString());\n+            assertEquals(\"Expected and actual values should be the same.\", expectedValues[i], entityId.toString());\n+        }\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void entityIdNullTest() {\n+        new EntityId(null);\n+    }\n+\n+    @Test(expected = NumberFormatException.class)\n+    public void entityIdEmptyTest() {\n+        new EntityId(\"\");\n+    }\n+\n+    @Test\n+    public void setAndGetIdToStringTest() {\n+        EntityId entityId = new EntityId(\"111\");\n+\n+        assertEquals(\"Expected and actual values should be the same.\", \"-10403\", entityId.getId().toString());\n+        assertEquals(\"Expected and actual values should be the same.\", \"-10403\", entityId.toString());\n+\n+        entityId.setId(BigInteger.ONE);\n+        assertEquals(\"Expected and actual values should be the same.\", \"1\", entityId.getId().toString());\n+        assertEquals(\"Expected and actual values should be the same.\", \"1\", entityId.toString());\n+\n+        entityId.setId(null);\n+        assertNull(\"Null expected.\", entityId.getId());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void toStringNullIdTest() {\n+        EntityId entityId = new EntityId(\"111\");\n+        entityId.setId(null);\n+        entityId.toString();\n+    }\n+} \n\\ No newline at end of file"
  },
  {
    "sha": "afbd6bf5c248986569065b3df352ad20fbaa4a3c",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/MetricTypeTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/MetricTypeTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/MetricTypeTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/MetricTypeTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,53 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model;\n+\n+import org.eclipse.kapua.KapuaIllegalArgumentException;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class MetricTypeTest extends Assert {\n+\n+    @Test\n+    public void metricTypeTest() throws KapuaIllegalArgumentException {\n+        String[] types = {\"string\", \"integer\", \"int\", \"long\", \"float\", \"double\", \"boolean\", \"date\", \"binary\"};\n+        Class[] expectedClasses = {String.class, Integer.class, Integer.class, Long.class, Float.class, Double.class, Boolean.class, Date.class, byte[].class};\n+\n+        for (int i = 0; i < types.length; i++) {\n+            MetricType metricType = new MetricType(types[i]);\n+            assertEquals(\"Expected and actual values should be the same.\", expectedClasses[i], metricType.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void metricEmptyTypeTest() throws KapuaIllegalArgumentException {\n+        MetricType metricType = new MetricType(\"\");\n+        Assert.assertNull(\"Null expected.\", metricType.getType());\n+    }\n+\n+    @Test\n+    public void metricNullTypeTest() throws KapuaIllegalArgumentException {\n+        MetricType metricType = new MetricType(null);\n+        Assert.assertNull(\"Null expected.\", metricType.getType());\n+    }\n+\n+    @Test(expected = KapuaIllegalArgumentException.class)\n+    public void metricInvalidTypeTest() throws KapuaIllegalArgumentException {\n+        new MetricType(\"invalid type\");\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c44228106a46f3b5969d35efb6e79971be48b530",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/ScopeIdTest.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/ScopeIdTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/ScopeIdTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/ScopeIdTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,78 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model;\n+\n+import org.eclipse.kapua.app.api.core.exception.SessionNotPopulatedException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.math.BigInteger;\n+import java.util.Base64;\n+\n+@Category(JUnitTests.class)\n+public class ScopeIdTest extends Assert {\n+\n+    @Test(expected = NullPointerException.class)\n+    public void scopeIdNullTest() {\n+        new ScopeId(null);\n+    }\n+\n+    @Test\n+    public void scopeIdEqualIdsTest() {\n+        KapuaSession kapuaSession = Mockito.mock(KapuaSession.class);\n+        KapuaSecurityUtils.setSession(kapuaSession);\n+\n+        Mockito.when(kapuaSession.getScopeId()).thenReturn(KapuaId.ONE);\n+        ScopeId scopeId = new ScopeId(\"_\");\n+\n+        assertEquals(\"Expected and actual values should be the same.\", BigInteger.ONE, scopeId.getId());\n+    }\n+\n+    @Test\n+    public void scopeIdDifferentIdsTest() {\n+        ScopeId scopeId = new ScopeId(\"scopeID\");\n+\n+        assertEquals(\"Expected and actual values should be the same.\", new BigInteger(Base64.getUrlDecoder().decode(\"scopeID\")), scopeId.getId());\n+    }\n+\n+    @Test(expected = SessionNotPopulatedException.class)\n+    public void scopeIdNullSessionTest() {\n+        KapuaSecurityUtils.clearSession();\n+        new ScopeId(\"_\");\n+    }\n+\n+    @Test\n+    public void setAndGetIdToStringTest() {\n+        ScopeId scopeId = new ScopeId(\"scopeID\");\n+\n+        scopeId.setId(BigInteger.TEN);\n+        assertEquals(\"Expected and actual values should be the same.\", BigInteger.TEN, scopeId.getId());\n+        assertEquals(\"Expected and actual values should be the same.\", \"10\", scopeId.toString());\n+\n+        scopeId.setId(null);\n+        assertNull(\"Null expected.\", scopeId.getId());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void toStringNullIdTest() {\n+        ScopeId scopeId = new ScopeId(\"scopeID\");\n+        scopeId.setId(null);\n+        scopeId.toString();\n+    }\n+} \n\\ No newline at end of file"
  },
  {
    "sha": "1e26098eb27968a840b625fa2f59cb3cd41cf449",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/StorableEntityIdTest.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/StorableEntityIdTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/StorableEntityIdTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/StorableEntityIdTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class StorableEntityIdTest extends Assert {\n+\n+    @Test\n+    public void storableEntityIdWithParameterTest() {\n+        String[] ids = {\"id\", \"\", \"id123\", \"id!@#$%^123&*<>|\", \"  id 1  2;':...,, id ()   \", \"        !@#id '>? id ID ,,12$#  \", \"id*(-01.23 idID 0123!@@,.,,   \"};\n+\n+        for (String id : ids) {\n+            StorableEntityId storableEntityId = new StorableEntityId(id);\n+            assertEquals(\"Expected and actual values should be the same.\", id, storableEntityId.getId());\n+            assertEquals(\"Expected and actual values should be the same.\", id, storableEntityId.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void storableEntityIdWithNullParameterTest() {\n+        StorableEntityId storableEntityId = new StorableEntityId(null);\n+\n+        Assert.assertNull(\"Null expected.\", storableEntityId.getId());\n+        Assert.assertNull(\"Null expected.\", storableEntityId.toString());\n+    }\n+\n+    @Test\n+    public void storableEntityIdWithoutParameterTest() {\n+\n+        StorableEntityId storableEntityId = new StorableEntityId();\n+        Assert.assertNull(\"Null expected.\", storableEntityId.getId());\n+        Assert.assertNull(\"Null expected.\", storableEntityId.toString());\n+    }\n+\n+    @Test\n+    public void setAndGetIdTest() {\n+        StorableEntityId storableEntityId1 = new StorableEntityId();\n+        StorableEntityId storableEntityId2 = new StorableEntityId(\"id\");\n+\n+        String[] newIds = {null, \"\", \"idNEW12<>$*%7464\", \"\", \"id123-NEW 1  ^54IDnew 32^$%$\", \"idNEW    !@#$%^  123&*<>|  \", \"  id 12NEW;':...,, id ()   \", \"!@#id '>? id ID ,,12NEW1$#  \", \"idNew*(-0123 idID 0123!@@,.,,\"};\n+\n+        for (String id : newIds) {\n+            storableEntityId1.setId(id);\n+            storableEntityId2.setId(id);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", id, storableEntityId1.getId());\n+            assertEquals(\"Expected and actual values should be the same.\", id, storableEntityId1.toString());\n+\n+            assertEquals(\"Expected and actual values should be the same.\", id, storableEntityId2.getId());\n+            assertEquals(\"Expected and actual values should be the same.\", id, storableEntityId2.toString());\n+        }\n+    }\n+} \n\\ No newline at end of file"
  },
  {
    "sha": "253884b3b73544e2f7e6724d4bb2d82dabb4efe4",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/resources/AbstractKapuaResourceTest.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/resources/AbstractKapuaResourceTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/bcee45af734c72f1fbae9f3691be7496ccecb772/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/resources/AbstractKapuaResourceTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/resources/AbstractKapuaResourceTest.java?ref=bcee45af734c72f1fbae9f3691be7496ccecb772",
    "patch": "@@ -0,0 +1,76 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.resources;\n+\n+import org.eclipse.kapua.app.api.core.model.ScopeId;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Response;\n+\n+@Category(JUnitTests.class)\n+public class AbstractKapuaResourceTest extends Assert {\n+\n+    private class AbstractKapuaResourceImpl extends AbstractKapuaResource {\n+\n+    }\n+\n+    AbstractKapuaResource abstractKapuaResource;\n+    Object[] objects;\n+\n+    @Before\n+    public void initialize() {\n+        abstractKapuaResource = new AbstractKapuaResourceImpl();\n+        objects = new Object[]{new Object(), \"\", \"string\", 10, 'c', KapuaId.ONE, new Throwable(), new ScopeId(\"111\")};\n+    }\n+\n+    @Test\n+    public void returnNotNullEntityTest() {\n+        for (Object object : objects) {\n+            assertEquals(\"Expected and actual values should be the same.\", object, abstractKapuaResource.returnNotNullEntity(object));\n+        }\n+    }\n+\n+    @Test\n+    public void returnNotNullEntityNullTest() {\n+        try {\n+            abstractKapuaResource.returnNotNullEntity(null);\n+            fail(\"WebApplicationException expected.\");\n+        } catch (Exception e) {\n+            assertEquals(\"WebApplicationException expected.\", new WebApplicationException(Response.Status.NOT_FOUND).toString(), e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void returnOkTest() {\n+        assertEquals(\"Expected and actual values should be the same.\", \"OutboundJaxrsResponse{status=200, reason=OK, hasEntity=false, closed=false, buffered=false}\", abstractKapuaResource.returnOk().toString());\n+    }\n+\n+    @Test\n+    public void returnNoContentTest() {\n+        assertEquals(\"Expected and actual values should be the same.\", \"OutboundJaxrsResponse{status=204, reason=No Content, hasEntity=false, closed=false, buffered=false}\", abstractKapuaResource.returnNoContent().toString());\n+    }\n+\n+    @Test\n+    public void returnCreatedTest() {\n+        for (Object object : objects) {\n+            assertEquals(\"Expected and actual values should be the same.\", \"OutboundJaxrsResponse{status=201, reason=Created, hasEntity=true, closed=false, buffered=false}\", abstractKapuaResource.returnCreated(object).toString());\n+            assertEquals(\"Expected and actual values should be the same.\", object, abstractKapuaResource.returnCreated(object).getEntity());\n+        }\n+    }\n+}"
  }
]
