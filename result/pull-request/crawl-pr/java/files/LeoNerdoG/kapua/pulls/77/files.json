[
  {
    "sha": "24e54f14b628e058b1b44c983b2129e145374040",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/device/management/JsonGenericRequestMessageTest.java",
    "status": "added",
    "additions": 308,
    "deletions": 0,
    "changes": 308,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/e8a12ff53951fcc843097c2e4d17181d84331d35/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/device/management/JsonGenericRequestMessageTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/e8a12ff53951fcc843097c2e4d17181d84331d35/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/device/management/JsonGenericRequestMessageTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/device/management/JsonGenericRequestMessageTest.java?ref=e8a12ff53951fcc843097c2e4d17181d84331d35",
    "patch": "@@ -0,0 +1,308 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model.device.management;\n+\n+import org.eclipse.kapua.app.api.core.model.message.JsonKapuaPayload;\n+import org.eclipse.kapua.message.KapuaPayload;\n+import org.eclipse.kapua.message.KapuaPosition;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.eclipse.kapua.service.device.management.request.message.request.GenericRequestChannel;\n+import org.eclipse.kapua.service.device.management.request.message.request.GenericRequestMessage;\n+import org.eclipse.kapua.service.device.management.request.message.request.GenericRequestPayload;\n+import org.eclipse.kapua.service.storable.model.id.StorableId;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+@Category(JUnitTests.class)\n+public class JsonGenericRequestMessageTest extends Assert {\n+\n+    GenericRequestMessage genericRequestMessage;\n+    UUID id;\n+    StorableId storableId;\n+    Date timestamp, receivedOn, sentOn, capturedOn;\n+    Date[] dates;\n+    KapuaId scopeId, deviceId;\n+    String clientId;\n+    KapuaPosition kapuaPosition;\n+    GenericRequestChannel genericRequestChannel;\n+    GenericRequestPayload genericRequestPayload;\n+    JsonGenericRequestMessage jsonGenericRequestMessage1, jsonGenericRequestMessage2;\n+    KapuaPayload newKapuaPayload;\n+\n+    @Before\n+    public void initialize() {\n+        genericRequestMessage = Mockito.mock(GenericRequestMessage.class);\n+        id = new UUID(10L, 100L);\n+        storableId = Mockito.mock(StorableId.class);\n+        timestamp = new Date();\n+        scopeId = KapuaId.ONE;\n+        deviceId = KapuaId.ONE;\n+        clientId = \"clientID\";\n+        receivedOn = new Date();\n+        sentOn = new Date();\n+        capturedOn = new Date();\n+        dates = new Date[]{new Date(), new Date(99L), new Date(99999999999999L)};\n+        kapuaPosition = Mockito.mock(KapuaPosition.class);\n+        genericRequestChannel = Mockito.mock(GenericRequestChannel.class);\n+        genericRequestPayload = Mockito.mock(GenericRequestPayload.class);\n+        newKapuaPayload = Mockito.mock(KapuaPayload.class);\n+\n+        Mockito.when(genericRequestMessage.getId()).thenReturn(id);\n+        Mockito.when(genericRequestMessage.getScopeId()).thenReturn(scopeId);\n+        Mockito.when(genericRequestMessage.getDeviceId()).thenReturn(deviceId);\n+        Mockito.when(genericRequestMessage.getClientId()).thenReturn(clientId);\n+        Mockito.when(genericRequestMessage.getReceivedOn()).thenReturn(receivedOn);\n+        Mockito.when(genericRequestMessage.getSentOn()).thenReturn(sentOn);\n+        Mockito.when(genericRequestMessage.getCapturedOn()).thenReturn(capturedOn);\n+        Mockito.when(genericRequestMessage.getPosition()).thenReturn(kapuaPosition);\n+        Mockito.when(genericRequestMessage.getChannel()).thenReturn(genericRequestChannel);\n+        Mockito.when(genericRequestMessage.getPayload()).thenReturn(genericRequestPayload);\n+\n+        jsonGenericRequestMessage1 = new JsonGenericRequestMessage();\n+        jsonGenericRequestMessage2 = new JsonGenericRequestMessage(genericRequestMessage);\n+    }\n+\n+    @Test\n+    public void jsonGenericRequestMessageWithoutParameterTest() {\n+        JsonGenericRequestMessage jsonGenericRequestMessage = new JsonGenericRequestMessage();\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getId());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getScopeId());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getDeviceId());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getClientId());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getReceivedOn());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getSentOn());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getCapturedOn());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getPosition());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getChannel());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void jsonGenericRequestMessageWithParameterTest() {\n+        JsonGenericRequestMessage jsonGenericRequestMessage = new JsonGenericRequestMessage(genericRequestMessage);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", id, jsonGenericRequestMessage.getId());\n+        assertEquals(\"Expected and actual values should be the same.\", scopeId, jsonGenericRequestMessage.getScopeId());\n+        assertEquals(\"Expected and actual values should be the same.\", deviceId, jsonGenericRequestMessage.getDeviceId());\n+        assertEquals(\"Expected and actual values should be the same.\", clientId, jsonGenericRequestMessage.getClientId());\n+        assertEquals(\"Expected and actual values should be the same.\", receivedOn, jsonGenericRequestMessage.getReceivedOn());\n+        assertEquals(\"Expected and actual values should be the same.\", sentOn, jsonGenericRequestMessage.getSentOn());\n+        assertEquals(\"Expected and actual values should be the same.\", capturedOn, jsonGenericRequestMessage.getCapturedOn());\n+        assertEquals(\"Expected and actual values should be the same.\", kapuaPosition, jsonGenericRequestMessage.getPosition());\n+        assertEquals(\"Expected and actual values should be the same.\", genericRequestChannel, jsonGenericRequestMessage.getChannel());\n+        assertNotNull(\"NotNull expected.\", jsonGenericRequestMessage.getPayload());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void jsonGenericRequestMessageWithNullParameterTest() {\n+        new JsonGenericRequestMessage(null);\n+    }\n+\n+    @Test\n+    public void setAndGetIdTest() {\n+        UUID newId = new UUID(1L, 99L);\n+\n+        jsonGenericRequestMessage1.setId(newId);\n+        jsonGenericRequestMessage2.setId(newId);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newId, jsonGenericRequestMessage1.getId());\n+        assertEquals(\"Expected and actual values should be the same.\", newId, jsonGenericRequestMessage2.getId());\n+\n+        jsonGenericRequestMessage1.setId(null);\n+        jsonGenericRequestMessage2.setId(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getId());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getId());\n+    }\n+\n+    @Test\n+    public void setAndGetScopeIdTest() {\n+        KapuaId newScopeId = KapuaId.ANY;\n+\n+        jsonGenericRequestMessage1.setScopeId(newScopeId);\n+        jsonGenericRequestMessage2.setScopeId(newScopeId);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newScopeId, jsonGenericRequestMessage1.getScopeId());\n+        assertEquals(\"Expected and actual values should be the same.\", newScopeId, jsonGenericRequestMessage2.getScopeId());\n+\n+        jsonGenericRequestMessage1.setScopeId(null);\n+        jsonGenericRequestMessage2.setScopeId(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getScopeId());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getScopeId());\n+    }\n+\n+    @Test\n+    public void setAndGetDeviceIdTest() {\n+        KapuaId newDeviceId = KapuaId.ANY;\n+\n+        jsonGenericRequestMessage1.setDeviceId(newDeviceId);\n+        jsonGenericRequestMessage2.setDeviceId(newDeviceId);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newDeviceId, jsonGenericRequestMessage1.getDeviceId());\n+        assertEquals(\"Expected and actual values should be the same.\", newDeviceId, jsonGenericRequestMessage2.getDeviceId());\n+\n+        jsonGenericRequestMessage1.setDeviceId(null);\n+        jsonGenericRequestMessage2.setDeviceId(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getDeviceId());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getDeviceId());\n+    }\n+\n+    @Test\n+    public void setAndGetClientIdTest() {\n+        String[] newClientIDs = {\"ID\", \",.  id *&64930 new ID ,,,\", \"  NEW12 ,./)(*&%^% IDnew\", \"newID  98*90__=88id \", \",,,.id new ID 847&^3#@!  \"};\n+\n+        for (String newClientID : newClientIDs) {\n+            jsonGenericRequestMessage1.setClientId(newClientID);\n+            jsonGenericRequestMessage2.setClientId(newClientID);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", newClientID, jsonGenericRequestMessage1.getClientId());\n+            assertEquals(\"Expected and actual values should be the same.\", newClientID, jsonGenericRequestMessage2.getClientId());\n+        }\n+\n+        jsonGenericRequestMessage1.setClientId(null);\n+        jsonGenericRequestMessage2.setClientId(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getClientId());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getClientId());\n+    }\n+\n+    @Test\n+    public void setAndGetReceivedOnTest() {\n+        for (Date newReceivedOn : dates) {\n+            jsonGenericRequestMessage1.setReceivedOn(newReceivedOn);\n+            jsonGenericRequestMessage2.setReceivedOn(newReceivedOn);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", newReceivedOn, jsonGenericRequestMessage1.getReceivedOn());\n+            assertEquals(\"Expected and actual values should be the same.\", newReceivedOn, jsonGenericRequestMessage2.getReceivedOn());\n+        }\n+\n+        jsonGenericRequestMessage1.setReceivedOn(null);\n+        jsonGenericRequestMessage2.setReceivedOn(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getReceivedOn());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getReceivedOn());\n+    }\n+\n+    @Test\n+    public void setAndGetSentOnTest() {\n+        for (Date newSentOn : dates) {\n+            jsonGenericRequestMessage1.setSentOn(newSentOn);\n+            jsonGenericRequestMessage2.setSentOn(newSentOn);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", newSentOn, jsonGenericRequestMessage1.getSentOn());\n+            assertEquals(\"Expected and actual values should be the same.\", newSentOn, jsonGenericRequestMessage2.getSentOn());\n+        }\n+\n+        jsonGenericRequestMessage1.setSentOn(null);\n+        jsonGenericRequestMessage2.setSentOn(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getSentOn());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getSentOn());\n+    }\n+\n+    @Test\n+    public void setAndGetCapturedOnTest() {\n+        for (Date newCapturedOn : dates) {\n+            jsonGenericRequestMessage1.setCapturedOn(newCapturedOn);\n+            jsonGenericRequestMessage2.setCapturedOn(newCapturedOn);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", newCapturedOn, jsonGenericRequestMessage1.getCapturedOn());\n+            assertEquals(\"Expected and actual values should be the same.\", newCapturedOn, jsonGenericRequestMessage2.getCapturedOn());\n+        }\n+\n+        jsonGenericRequestMessage1.setCapturedOn(null);\n+        jsonGenericRequestMessage2.setCapturedOn(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getCapturedOn());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getCapturedOn());\n+    }\n+\n+    @Test\n+    public void setAndGetPositionTest() {\n+        KapuaPosition newPosition = Mockito.mock(KapuaPosition.class);\n+\n+        jsonGenericRequestMessage1.setPosition(newPosition);\n+        jsonGenericRequestMessage2.setPosition(newPosition);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newPosition, jsonGenericRequestMessage1.getPosition());\n+        assertEquals(\"Expected and actual values should be the same.\", newPosition, jsonGenericRequestMessage2.getPosition());\n+\n+        jsonGenericRequestMessage1.setPosition(null);\n+        jsonGenericRequestMessage2.setPosition(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getPosition());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getPosition());\n+    }\n+\n+    @Test\n+    public void setAndGetChannelTest() {\n+        GenericRequestChannel newGenericRequestChannel = Mockito.mock(GenericRequestChannel.class);\n+\n+        jsonGenericRequestMessage1.setChannel(newGenericRequestChannel);\n+        jsonGenericRequestMessage2.setChannel(newGenericRequestChannel);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newGenericRequestChannel, jsonGenericRequestMessage1.getChannel());\n+        assertEquals(\"Expected and actual values should be the same.\", newGenericRequestChannel, jsonGenericRequestMessage2.getChannel());\n+\n+        jsonGenericRequestMessage1.setChannel(null);\n+        jsonGenericRequestMessage2.setChannel(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getChannel());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getChannel());\n+    }\n+\n+    @Test\n+    public void setAndGetJsonKapuaPayloadTest() {\n+        JsonKapuaPayload newJsonKapuaPayload = Mockito.mock(JsonKapuaPayload.class);\n+\n+        jsonGenericRequestMessage1.setPayload(newJsonKapuaPayload);\n+        jsonGenericRequestMessage2.setPayload(newJsonKapuaPayload);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newJsonKapuaPayload, jsonGenericRequestMessage1.getPayload());\n+        assertEquals(\"Expected and actual values should be the same.\", newJsonKapuaPayload, jsonGenericRequestMessage2.getPayload());\n+\n+        jsonGenericRequestMessage1.setPayload((JsonKapuaPayload) null);\n+        jsonGenericRequestMessage2.setPayload((JsonKapuaPayload) null);\n+\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage1.getPayload());\n+        assertNull(\"Null expected.\", jsonGenericRequestMessage2.getPayload());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void setAndGetKapuaPayloadMessageWithoutParametersTest() {\n+        jsonGenericRequestMessage1.setPayload(newKapuaPayload);\n+\n+        assertNotNull(\"NotNull expected.\", jsonGenericRequestMessage1.getPayload());\n+\n+        jsonGenericRequestMessage1.setPayload((KapuaPayload) null);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void setAndGetKapuaPayloadMessageWithParameterTest() {\n+        jsonGenericRequestMessage2.setPayload(newKapuaPayload);\n+\n+        assertNotNull(\"NotNull expected.\", jsonGenericRequestMessage2.getPayload());\n+\n+        jsonGenericRequestMessage2.setPayload((KapuaPayload) null);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b0dd45db7456f25c569f014052e4f37b888d8b06",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/device/management/JsonGenericResponseMessageTest.java",
    "status": "added",
    "additions": 308,
    "deletions": 0,
    "changes": 308,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/e8a12ff53951fcc843097c2e4d17181d84331d35/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/device/management/JsonGenericResponseMessageTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/e8a12ff53951fcc843097c2e4d17181d84331d35/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/device/management/JsonGenericResponseMessageTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/device/management/JsonGenericResponseMessageTest.java?ref=e8a12ff53951fcc843097c2e4d17181d84331d35",
    "patch": "@@ -0,0 +1,308 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model.device.management;\n+\n+import org.eclipse.kapua.app.api.core.model.message.JsonKapuaPayload;\n+import org.eclipse.kapua.message.KapuaPayload;\n+import org.eclipse.kapua.message.KapuaPosition;\n+import org.eclipse.kapua.model.id.KapuaId;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.eclipse.kapua.service.device.management.request.message.response.GenericResponseChannel;\n+import org.eclipse.kapua.service.device.management.request.message.response.GenericResponseMessage;\n+import org.eclipse.kapua.service.device.management.request.message.response.GenericResponsePayload;\n+import org.eclipse.kapua.service.storable.model.id.StorableId;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+@Category(JUnitTests.class)\n+public class JsonGenericResponseMessageTest extends Assert {\n+\n+    GenericResponseMessage genericResponseMessage;\n+    UUID id;\n+    StorableId storableId;\n+    Date timestamp, receivedOn, sentOn, capturedOn;\n+    Date[] dates;\n+    KapuaId scopeId, deviceId;\n+    String clientId;\n+    KapuaPosition kapuaPosition;\n+    GenericResponseChannel genericResponseChannel;\n+    GenericResponsePayload genericResponsePayload;\n+    JsonGenericResponseMessage jsonGenericResponseMessage1, jsonGenericResponseMessage2;\n+    KapuaPayload newKapuaPayload;\n+\n+    @Before\n+    public void initialize() {\n+        genericResponseMessage = Mockito.mock(GenericResponseMessage.class);\n+        id = new UUID(10L, 100L);\n+        storableId = Mockito.mock(StorableId.class);\n+        timestamp = new Date();\n+        scopeId = KapuaId.ONE;\n+        deviceId = KapuaId.ONE;\n+        clientId = \"clientID\";\n+        receivedOn = new Date();\n+        sentOn = new Date();\n+        capturedOn = new Date();\n+        dates = new Date[]{new Date(), new Date(99L), new Date(99999999999999L)};\n+        kapuaPosition = Mockito.mock(KapuaPosition.class);\n+        genericResponseChannel = Mockito.mock(GenericResponseChannel.class);\n+        genericResponsePayload = Mockito.mock(GenericResponsePayload.class);\n+        newKapuaPayload = Mockito.mock(KapuaPayload.class);\n+\n+        Mockito.when(genericResponseMessage.getId()).thenReturn(id);\n+        Mockito.when(genericResponseMessage.getScopeId()).thenReturn(scopeId);\n+        Mockito.when(genericResponseMessage.getDeviceId()).thenReturn(deviceId);\n+        Mockito.when(genericResponseMessage.getClientId()).thenReturn(clientId);\n+        Mockito.when(genericResponseMessage.getReceivedOn()).thenReturn(receivedOn);\n+        Mockito.when(genericResponseMessage.getSentOn()).thenReturn(sentOn);\n+        Mockito.when(genericResponseMessage.getCapturedOn()).thenReturn(capturedOn);\n+        Mockito.when(genericResponseMessage.getPosition()).thenReturn(kapuaPosition);\n+        Mockito.when(genericResponseMessage.getChannel()).thenReturn(genericResponseChannel);\n+        Mockito.when(genericResponseMessage.getPayload()).thenReturn(genericResponsePayload);\n+\n+        jsonGenericResponseMessage1 = new JsonGenericResponseMessage();\n+        jsonGenericResponseMessage2 = new JsonGenericResponseMessage(genericResponseMessage);\n+    }\n+\n+    @Test\n+    public void jsonGenericResponseMessageWithoutParameterTest() {\n+        JsonGenericResponseMessage jsonGenericResponseMessage = new JsonGenericResponseMessage();\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getId());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getScopeId());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getDeviceId());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getClientId());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getReceivedOn());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getSentOn());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getCapturedOn());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getPosition());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getChannel());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage.getPayload());\n+    }\n+\n+    @Test\n+    public void jsonGenericResponseMessageWithParameterTest() {\n+        JsonGenericResponseMessage jsonGenericResponseMessage = new JsonGenericResponseMessage(genericResponseMessage);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", id, jsonGenericResponseMessage.getId());\n+        assertEquals(\"Expected and actual values should be the same.\", scopeId, jsonGenericResponseMessage.getScopeId());\n+        assertEquals(\"Expected and actual values should be the same.\", deviceId, jsonGenericResponseMessage.getDeviceId());\n+        assertEquals(\"Expected and actual values should be the same.\", clientId, jsonGenericResponseMessage.getClientId());\n+        assertEquals(\"Expected and actual values should be the same.\", receivedOn, jsonGenericResponseMessage.getReceivedOn());\n+        assertEquals(\"Expected and actual values should be the same.\", sentOn, jsonGenericResponseMessage.getSentOn());\n+        assertEquals(\"Expected and actual values should be the same.\", capturedOn, jsonGenericResponseMessage.getCapturedOn());\n+        assertEquals(\"Expected and actual values should be the same.\", kapuaPosition, jsonGenericResponseMessage.getPosition());\n+        assertEquals(\"Expected and actual values should be the same.\", genericResponseChannel, jsonGenericResponseMessage.getChannel());\n+        assertNotNull(\"NotNull expected.\", jsonGenericResponseMessage.getPayload());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void jsonGenericResponseMessageWithNullParameterTest() {\n+        new JsonGenericResponseMessage(null);\n+    }\n+\n+    @Test\n+    public void setAndGetIdTest() {\n+        UUID newId = new UUID(1L, 99L);\n+\n+        jsonGenericResponseMessage1.setId(newId);\n+        jsonGenericResponseMessage2.setId(newId);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newId, jsonGenericResponseMessage1.getId());\n+        assertEquals(\"Expected and actual values should be the same.\", newId, jsonGenericResponseMessage2.getId());\n+\n+        jsonGenericResponseMessage1.setId(null);\n+        jsonGenericResponseMessage2.setId(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getId());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getId());\n+    }\n+\n+    @Test\n+    public void setAndGetScopeIdTest() {\n+        KapuaId newScopeId = KapuaId.ANY;\n+\n+        jsonGenericResponseMessage1.setScopeId(newScopeId);\n+        jsonGenericResponseMessage2.setScopeId(newScopeId);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newScopeId, jsonGenericResponseMessage1.getScopeId());\n+        assertEquals(\"Expected and actual values should be the same.\", newScopeId, jsonGenericResponseMessage2.getScopeId());\n+\n+        jsonGenericResponseMessage1.setScopeId(null);\n+        jsonGenericResponseMessage2.setScopeId(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getScopeId());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getScopeId());\n+    }\n+\n+    @Test\n+    public void setAndGetDeviceIdTest() {\n+        KapuaId newDeviceId = KapuaId.ANY;\n+\n+        jsonGenericResponseMessage1.setDeviceId(newDeviceId);\n+        jsonGenericResponseMessage2.setDeviceId(newDeviceId);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newDeviceId, jsonGenericResponseMessage1.getDeviceId());\n+        assertEquals(\"Expected and actual values should be the same.\", newDeviceId, jsonGenericResponseMessage2.getDeviceId());\n+\n+        jsonGenericResponseMessage1.setDeviceId(null);\n+        jsonGenericResponseMessage2.setDeviceId(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getDeviceId());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getDeviceId());\n+    }\n+\n+    @Test\n+    public void setAndGetClientIdTest() {\n+        String[] newClientIDs = {\"ID\", \",.  id *&64930 new ID ,,,\", \"  NEW12 ,./)(*&%^% IDnew\", \"newID  98*90__=88id \", \",,,.id new ID 847&^3#@!  \"};\n+\n+        for (String newClientID : newClientIDs) {\n+            jsonGenericResponseMessage1.setClientId(newClientID);\n+            jsonGenericResponseMessage2.setClientId(newClientID);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", newClientID, jsonGenericResponseMessage1.getClientId());\n+            assertEquals(\"Expected and actual values should be the same.\", newClientID, jsonGenericResponseMessage2.getClientId());\n+        }\n+\n+        jsonGenericResponseMessage1.setClientId(null);\n+        jsonGenericResponseMessage2.setClientId(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getClientId());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getClientId());\n+    }\n+\n+    @Test\n+    public void setAndGetReceivedOnTest() {\n+        for (Date newReceivedOn : dates) {\n+            jsonGenericResponseMessage1.setReceivedOn(newReceivedOn);\n+            jsonGenericResponseMessage2.setReceivedOn(newReceivedOn);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", newReceivedOn, jsonGenericResponseMessage1.getReceivedOn());\n+            assertEquals(\"Expected and actual values should be the same.\", newReceivedOn, jsonGenericResponseMessage2.getReceivedOn());\n+        }\n+\n+        jsonGenericResponseMessage1.setReceivedOn(null);\n+        jsonGenericResponseMessage2.setReceivedOn(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getReceivedOn());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getReceivedOn());\n+    }\n+\n+    @Test\n+    public void setAndGetSentOnTest() {\n+        for (Date newSentOn : dates) {\n+            jsonGenericResponseMessage1.setSentOn(newSentOn);\n+            jsonGenericResponseMessage2.setSentOn(newSentOn);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", newSentOn, jsonGenericResponseMessage1.getSentOn());\n+            assertEquals(\"Expected and actual values should be the same.\", newSentOn, jsonGenericResponseMessage2.getSentOn());\n+        }\n+\n+        jsonGenericResponseMessage1.setSentOn(null);\n+        jsonGenericResponseMessage2.setSentOn(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getSentOn());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getSentOn());\n+    }\n+\n+    @Test\n+    public void setAndGetCapturedOnTest() {\n+        for (Date newCapturedOn : dates) {\n+            jsonGenericResponseMessage1.setCapturedOn(newCapturedOn);\n+            jsonGenericResponseMessage2.setCapturedOn(newCapturedOn);\n+\n+            assertEquals(\"Expected and actual values should be the same.\", newCapturedOn, jsonGenericResponseMessage1.getCapturedOn());\n+            assertEquals(\"Expected and actual values should be the same.\", newCapturedOn, jsonGenericResponseMessage2.getCapturedOn());\n+        }\n+\n+        jsonGenericResponseMessage1.setCapturedOn(null);\n+        jsonGenericResponseMessage2.setCapturedOn(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getCapturedOn());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getCapturedOn());\n+    }\n+\n+    @Test\n+    public void setAndGetPositionTest() {\n+        KapuaPosition newPosition = Mockito.mock(KapuaPosition.class);\n+\n+        jsonGenericResponseMessage1.setPosition(newPosition);\n+        jsonGenericResponseMessage2.setPosition(newPosition);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newPosition, jsonGenericResponseMessage1.getPosition());\n+        assertEquals(\"Expected and actual values should be the same.\", newPosition, jsonGenericResponseMessage2.getPosition());\n+\n+        jsonGenericResponseMessage1.setPosition(null);\n+        jsonGenericResponseMessage2.setPosition(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getPosition());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getPosition());\n+    }\n+\n+    @Test\n+    public void setAndGetChannelTest() {\n+        GenericResponseChannel newGenericResponseChannel = Mockito.mock(GenericResponseChannel.class);\n+\n+        jsonGenericResponseMessage1.setChannel(newGenericResponseChannel);\n+        jsonGenericResponseMessage2.setChannel(newGenericResponseChannel);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newGenericResponseChannel, jsonGenericResponseMessage1.getChannel());\n+        assertEquals(\"Expected and actual values should be the same.\", newGenericResponseChannel, jsonGenericResponseMessage2.getChannel());\n+\n+        jsonGenericResponseMessage1.setChannel(null);\n+        jsonGenericResponseMessage2.setChannel(null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getChannel());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getChannel());\n+    }\n+\n+    @Test\n+    public void setAndGetJsonKapuaPayloadTest() {\n+        JsonKapuaPayload newJsonKapuaPayload = Mockito.mock(JsonKapuaPayload.class);\n+\n+        jsonGenericResponseMessage1.setPayload(newJsonKapuaPayload);\n+        jsonGenericResponseMessage2.setPayload(newJsonKapuaPayload);\n+\n+        assertEquals(\"Expected and actual values should be the same.\", newJsonKapuaPayload, jsonGenericResponseMessage1.getPayload());\n+        assertEquals(\"Expected and actual values should be the same.\", newJsonKapuaPayload, jsonGenericResponseMessage2.getPayload());\n+\n+        jsonGenericResponseMessage1.setPayload((JsonKapuaPayload) null);\n+        jsonGenericResponseMessage2.setPayload((JsonKapuaPayload) null);\n+\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage1.getPayload());\n+        assertNull(\"Null expected.\", jsonGenericResponseMessage2.getPayload());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void setAndGetKapuaPayloadMessageWithoutParametersTest() {\n+        jsonGenericResponseMessage1.setPayload(newKapuaPayload);\n+\n+        assertNotNull(\"NotNull expected.\", jsonGenericResponseMessage1.getPayload());\n+\n+        jsonGenericResponseMessage1.setPayload((KapuaPayload) null);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void setAndGetKapuaPayloadMessageWithParameterTest() {\n+        jsonGenericResponseMessage2.setPayload(newKapuaPayload);\n+\n+        assertNotNull(\"NotNull expected.\", jsonGenericResponseMessage2.getPayload());\n+\n+        jsonGenericResponseMessage2.setPayload((KapuaPayload) null);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "49ee062e895bdd4117af5b516afc5828cdcf772d",
    "filename": "rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/message/JsonKapuaPayloadTest.java",
    "status": "added",
    "additions": 114,
    "deletions": 0,
    "changes": 114,
    "blob_url": "https://github.com/LeoNerdoG/kapua/blob/e8a12ff53951fcc843097c2e4d17181d84331d35/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/message/JsonKapuaPayloadTest.java",
    "raw_url": "https://github.com/LeoNerdoG/kapua/raw/e8a12ff53951fcc843097c2e4d17181d84331d35/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/message/JsonKapuaPayloadTest.java",
    "contents_url": "https://api.github.com/repos/LeoNerdoG/kapua/contents/rest-api/core/src/test/java/org/eclipse/kapua/app/api/core/model/message/JsonKapuaPayloadTest.java?ref=e8a12ff53951fcc843097c2e4d17181d84331d35",
    "patch": "@@ -0,0 +1,114 @@\n+/*******************************************************************************\n+ * Copyright (c) 2021 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.core.model.message;\n+\n+import org.eclipse.kapua.message.KapuaPayload;\n+import org.eclipse.kapua.message.xml.XmlAdaptedMetric;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Category(JUnitTests.class)\n+public class JsonKapuaPayloadTest extends Assert {\n+\n+    KapuaPayload kapuaPayload;\n+    byte[] body;\n+    Map<String, Object> map;\n+\n+    @Before\n+    public void initialize() {\n+        kapuaPayload = Mockito.mock(KapuaPayload.class);\n+        body = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9};\n+        map = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void jsonKapuaPayloadWithoutParameterTest() {\n+        JsonKapuaPayload jsonKapuaPayload = new JsonKapuaPayload();\n+\n+        assertTrue(\"True expected.\", jsonKapuaPayload.getMetrics().isEmpty());\n+        assertNull(\"Null expected.\", jsonKapuaPayload.getBody());\n+    }\n+\n+    @Test\n+    public void jsonKapuaPayloadWithParameterEmptyMapTest() {\n+        Mockito.when(kapuaPayload.getBody()).thenReturn(body);\n+        Mockito.when(kapuaPayload.getMetrics()).thenReturn(map);\n+\n+        JsonKapuaPayload jsonKapuaPayload = new JsonKapuaPayload(kapuaPayload);\n+\n+        assertTrue(\"True expected.\", jsonKapuaPayload.getMetrics().isEmpty());\n+        assertEquals(\"Expected and actual values should be the same.\", body, jsonKapuaPayload.getBody());\n+    }\n+\n+    @Test\n+    public void jsonKapuaPayloadWithParameterNullMapValuesTest() {\n+        map.put(null, null);\n+\n+        Mockito.when(kapuaPayload.getBody()).thenReturn(body);\n+        Mockito.when(kapuaPayload.getMetrics()).thenReturn(map);\n+\n+        JsonKapuaPayload jsonKapuaPayload = new JsonKapuaPayload(kapuaPayload);\n+        assertTrue(\"True expected.\", jsonKapuaPayload.getMetrics().isEmpty());\n+        assertEquals(\"Expected and actual values should be the same.\", body, jsonKapuaPayload.getBody());\n+    }\n+\n+    @Test\n+    public void jsonKapuaPayloadWithParameterTest() {\n+        map.put(\"key1\", \"value2\");\n+        map.put(\"key2\", \"value2\");\n+\n+        Mockito.when(kapuaPayload.getBody()).thenReturn(body);\n+        Mockito.when(kapuaPayload.getMetrics()).thenReturn(map);\n+\n+        JsonKapuaPayload jsonKapuaPayload = new JsonKapuaPayload(kapuaPayload);\n+        assertFalse(\"False expected.\", jsonKapuaPayload.getMetrics().isEmpty());\n+        assertEquals(\"Expected and actual values should be the same.\", body, jsonKapuaPayload.getBody());\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void jsonKapuaPayloadWithNullParameterTest() {\n+        new JsonKapuaPayload(null);\n+    }\n+\n+    @Test\n+    public void setAndGetMetricsTest() {\n+        JsonKapuaPayload jsonKapuaPayload = new JsonKapuaPayload(kapuaPayload);\n+        List<XmlAdaptedMetric> metrics = new LinkedList<>();\n+        XmlAdaptedMetric jsonMetric = Mockito.mock(XmlAdaptedMetric.class);\n+\n+        metrics.add(jsonMetric);\n+\n+        assertTrue(\"True expected.\", jsonKapuaPayload.getMetrics().isEmpty());\n+        jsonKapuaPayload.setMetrics(metrics);\n+        assertFalse(\"False expected.\", jsonKapuaPayload.getMetrics().isEmpty());\n+    }\n+\n+    @Test\n+    public void setAndGetBody() {\n+        JsonKapuaPayload jsonKapuaPayload = new JsonKapuaPayload(kapuaPayload);\n+        byte[] newBody = {1, 2, 3, 4, 5};\n+\n+        assertNull(\"Null expected.\", jsonKapuaPayload.getBody());\n+        jsonKapuaPayload.setBody(newBody);\n+        assertEquals(\"Expected and actual values should be the same.\", newBody, jsonKapuaPayload.getBody());\n+    }\n+}\n\\ No newline at end of file"
  }
]
