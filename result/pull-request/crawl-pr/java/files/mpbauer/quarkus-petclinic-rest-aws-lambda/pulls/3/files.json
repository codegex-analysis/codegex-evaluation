[
  {
    "sha": "8d67bc7a54329a980aaf7798171d52c2ace687ed",
    "filename": ".editorconfig",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/.editorconfig",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/.editorconfig",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/.editorconfig?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,12 @@\n+# top-most EditorConfig file\n+root = true\n+\n+[*]\n+charset = utf-8\n+end_of_line = lf\n+insert_final_newline = true\n+indent_style = space\n+\n+[*.{java,xml}]\n+indent_size = 4\n+trim_trailing_whitespace = true"
  },
  {
    "sha": "b9fa220fa0a9d395e99c5c848351bceebdfcd29e",
    "filename": "README.md",
    "status": "modified",
    "additions": 272,
    "deletions": 7,
    "changes": 279,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/README.md",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/README.md",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/README.md?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -2,24 +2,263 @@\n \n # Quarkus PetClinic Sample Application using AWS Lambda\n \n-Build with a specific Quarkus profile:\n+This project is a modified version\n+of [mpbauer/quarkus-petclinic-rest](https://github.com/mpbauer/quarkus-petclinic-rest) and splits the monolithic app\n+into several modules by using the `Services Pattern` according to\n+this [article](https://www.serverless.com/blog/serverless-architecture-code-patterns). Each module can de deployed\n+individually.\n+\n+## Understanding the Spring Petclinic application with a few diagrams\n+\n+[See the presentation of the Spring Petclinic Framework version](http://slideshare.net/AntoineRey/spring-framework-petclinic-sample-application)\n+\n+A local copy of the presentation can be found [here](docs/misc/springframeworkpetclinic-presentation.pdf)\n+\n+### Petclinic ER Model\n+\n+![alt petclinic-ermodel](docs/diagrams/petclinic-ermodel.png)\n+\n+## Running the petclinic application locally\n+\n+You can run your application in dev mode that enables live coding using:\n+\n+```shell script\n+mvn quarkus:dev\n+```\n+\n+## Packaging and running the application with JVM\n+\n+The application can be packaged using:\n+\n+```shell script\n+mvn package\n+```\n+\n+It produces the `quarkus-petclinic-rest-aws-lambda-<submodule>-1.0.0-SNAPSHOT-runner.jar` file in the `/target`\n+directory. Be aware that it’s not an _über-jar_ as the dependencies are copied into the `target/lib` directory.\n+Furthermore the included dependency `quarkus-amazon-lambda-http` produces a file called `function.zip` which contains\n+the application packaged and ready to deploy on\n+[AWS Lambda](https://aws.amazon.com/lambda/) as well as template files to deploy the application as a lambda function\n+with [AWS SAM](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html).\n+\n+## Creating a native executable\n+\n+Creating a native executable requires [GraalVM](https://www.graalvm.org/). Make sure to install and configure a\n+compatible version of GraalVM before you try to build a native image. For more information on how to build native\n+executables check\n+out [this](https://quarkus.io/guides/building-native-image#:~:text=While%20Oracle%20GraalVM%20is%20available,install%20the%20Java%2011%20version.)\n+link.\n+\n+You can create a native executable using:\n+\n+```shell script\n+mvn package -Pnative\n+```\n+\n+You can then execute your native executable with:\n+\n+```shell script\n+./target/quarkus-petclinic-rest-1.0.0-SNAPSHOT-runner\n+```\n+\n+**Optional:** If you don't have [GraalVM](https://www.graalvm.org/) installed, you can run the native executable build\n+in a container using:\n+\n+```shell script\n+mvn package -Pnative -Dquarkus.native.container-build=true\n+```\n+\n+:exclamation: Building native images with `-Dquarkus.native.container-build=true` requires a running Docker\n+installation. Keep in mind that the `Docker` build will be performed in a Linux container and will not be executable on\n+a MacOS or Windows machine.\n+\n+## Health Checks\n+\n+The `smallrye-health` dependency provides health checks out of the box. The following endpoints are provided:\n+\n+- `/q/health/live` - The application is up and running (liveness probe)\n+- `/q/health/ready` - The application is ready to serve requests (readiness probe)\n+- `/q/health` - Accumulating all health check procedures in the application\n+- `q/health-ui` - Provides a graphical user interface for health information\n+\n+Example:\n+\n+```\n+http://localhost:8080/petclinic/q/health\n+```\n+\n+## Metrics\n+\n+The `smallrye-metrics` dependency provides metrics which can be accessed through the `/q/metrics` endpoint.\n+\n+Example:\n+\n+```\n+http://localhost:8080/petclinic/q/metrics\n+```\n+\n+## Database configuration\n+\n+The database support for this version of\n+the [spring-petlinic-rest](https://github.com/spring-petclinic/spring-petclinic-rest) project was significantly reduced.\n+As of now this project only supports [PostgreSQL](https://www.postgresql.org/)\n+and [H2](https://www.h2database.com/html/main.html).\n+\n+In its default configuration a `PostgreSQL` database is required to run the application. For the execution of tests an\n+embedded `H2` is started.\n+\n+For local development you may want to start a `PostgreSQL` database with `Docker`:\n+\n+````\n+docker run --name petclinic -p 5432:5432 -e POSTGRES_PASSWORD=pass -d postgres\n+````\n+\n+## Security configuration\n+\n+A Role Based Access Control is enabled by default when running the application with the `prod` and `test` profile. When\n+you start the application in `dev` through `./mvnw quarkus:dev` authentication is disabled by default.\n+\n+### Disable Authentication\n+\n+In order to disable access control, you can turn it off by setting the following property in\n+the `application.properties` file:\n+\n+```\n+petclinic.security.enable=false\n+```\n+\n+### Authorization\n+\n+This will secure all APIs and in order to access them, basic authentication is required. Apart from authentication, APIs\n+also require authorization. This is done via roles that a user can have. The existing roles are listed below with the\n+corresponding permissions:\n+\n+Role         | Controller\n+----------   | ----------------\n+OWNER_ADMIN  | OwnerController<br/>PetController<br/>PetTypeController (`getAllPetTypes()` & `getPetType()`)\n+VET_ADMIN    | PetTypeController<br/>SpecialityController</br>VetController\n+ADMIN        | UserController\n+\n+### Roles Based Access Control with predefined JSON Web Tokens\n+\n+To make the use of this sample application as easy as possible a set of fixed JSON Web Tokens with different roles were\n+generated and signed with a private key that is located in `src/test/resources/privateKey.pem`. You can copy the token\n+and pass it via the `Authorization` header to the application.\n+\n+**Example:**\n+\n+```shell\n+curl --location --request GET 'http://localhost:8080/petclinic/api/owners' \\\n+--header 'Content-Type: application/json' \\\n+--header 'Accept: application/json' \\\n+--header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJncm91cHMiOlsiUk9MRV9PV05FUl9BRE1JTiJdLCJpYXQiOjE2MTQ4NTMxNDksImV4cCI6NDc3MDUyNjc0OSwianRpIjoiMGEwODZmZjItYjVmNC00MGQxLWEyZDUtMmM0YjA0ZTBkMDBhIiwiaXNzIjoiaHR0cHM6Ly9zcHJpbmctcGV0Y2xpbmljLmdpdGh1Yi5pby9pc3N1ZXIifQ.V0qEDupr5uOdi-re233jMEOWhP4w_yvCgWUrEapOcz-2WLe64fjvGFAXlpvdfjcslCGCSofB97CnQ8xzx0QPdWpDKN7E2b_JTYb7wFsrI71nIblw-2n7uyKFGKgSbjd4L7BNIbUP6Pcodgn1FsDZ6HPfJlEqWMf_ZEyZi9hA3qfPgpSgt9iQgW88gkyRZv7tJUwhr0ZY4qNB6ujbZtBF4Er0Wvm8VqR2_KK8PaKk2ydGnsTDmrPaXSVmTH0ZMMwMRrmM4OvT-WZdpcAzakA4adDBPC6URM_GIzKfVMZ3oVbUwBj6HOybbX8R9VSXegTfZTio1J-dF5fXlFYYILktpg'\n+```\n+\n+> :exclamation: IMPORTANT: Never push a private key in a Git repository. In case you do, make sure do add additional\n+> security by encrypting security relevant data first before you push them. This application is just for showcasing\n+> the use of JSON Web Tokens in the Petclinic application but it should never be done this way for real applications.\n+\n+#### List of valid JSON Web Tokens:\n+\n+Role: `OWNER_ADMIN`\n+\n+```\n+eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJncm91cHMiOlsiUk9MRV9PV05FUl9BRE1JTiJdLCJzdWIiOiJYMDAwMDEiLCJpYXQiOjE2MTQ4Nzg2NjgsImV4cCI6NDc3MDU1MjI2OCwianRpIjoiZDM0ZjYwM2ItNjhiYy00NTZmLThlNDUtMGY2M2FkMTIxODc0IiwiaXNzIjoiaHR0cHM6Ly9zcHJpbmctcGV0Y2xpbmljLmdpdGh1Yi5pby9pc3N1ZXIifQ.r3xIQDYMlOVqj4dxJvHAIgh7XTafxeE0vJ2SkVlZng85lH-OM-sCGlpgy1uCjUKggmx3BmvX86F0GNfDVSfntfTUM_N4Uq27_wOZQjQYPCI3FxDub2kvhf0Wz59_Ed1Ip6TgkIVJaQrdCnfMr8F8eRbXZnKUwkcndb1Z_PLIp8JPP095VGyax_ezGiM1171t5UcrD4rUpmN5LYJvN_DGpfscf71Z7hG9KUPuspEO-Tld-7_hrPQkHh6FFkOiPbIirzWtgSmDaEjnijQoBhDxco8Y_wXolmwLnIhAJeT0zYE3eXmMKbU6H59799AGrGm2kU7hHuDkQEx0OretgxOmpA\n+```\n+\n+Role: `VET_ADMIN`\n+\n ```\n-mvn clean package -Dquarkus-profile=<profile>\n+eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJncm91cHMiOlsiUk9MRV9WRVRfQURNSU4iXSwic3ViIjoiWDAwMDAyIiwiaWF0IjoxNjE0ODc4NjY5LCJleHAiOjQ3NzA1NTIyNjksImp0aSI6ImYzNDQxMjM0LWY1ZmYtNDdmYy1hMzgwLWVmMTNlZmU5ODBiNSIsImlzcyI6Imh0dHBzOi8vc3ByaW5nLXBldGNsaW5pYy5naXRodWIuaW8vaXNzdWVyIn0.nmn-DHn4Zkps2tqTz6hrsR94IO2Qfsbyio_EApEJ6BzReQ8wr4LBFHH391fWvYfFPXXg2_q1J8sL8RGRv76vfoR5S3BWCmrBkxkdGINS5R5r1xc7TljDyL2mX6a6MH1f8rUl_jZsieEwcpzZSB_d_aC1Uk8wCxS1DCpPWP2nLtzex_G1890V93wxoSVJpI9a9XcQhWPT-OkFU5gIw2H9GRTqFQGVYInEZv76oBUU0x52kSVqLuf-PJfFCaIEHnFdo8cxZOf4wOL6rXO0vEoV3tpzdKr1XNIgChgtW2gH16Di-r5_p9hc5zDgieYICgy8kEF4tA2yOuWtq3W2bOmutg\n ```\n \n+Role: `ADMIN`\n+\n+```\n+eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJncm91cHMiOlsiUk9MRV9BRE1JTiJdLCJzdWIiOiJYMDAwMDMiLCJpYXQiOjE2MTQ4Nzg2NjksImV4cCI6NDc3MDU1MjI2OSwianRpIjoiOWM0YjhmZGEtYjViYS00YmY0LWEzNjMtNGRhNzg3YWEyY2JjIiwiaXNzIjoiaHR0cHM6Ly9zcHJpbmctcGV0Y2xpbmljLmdpdGh1Yi5pby9pc3N1ZXIifQ.pFRf_BiIJyHVWynlZIi_MHZY5KDHu09VG4Eb4GrvFopure1cZiviva-yrrY7IdmwNkf1aM991YApCiFnjl9D40c0PG5G5_734LU5uhAKe8ACBAIVG8mWtiGbBpCAdg_ghWCjIhmP17xnpyTpfHeJLqeIDDbxJ75tFnFV4Lu1R-JyhdEZjX8Ulsls2sNde4iBOl1ZILT2CuBYueL070qcrowOBnh6POnHacp8Kt2ZSWq6wAqcgIJGYYY2S7JKau2Qv8ZF_lUmyP58pUYrwkgxl95zrQypjQaYjUVAJosayutjKJwEpDfptvo_9s0kgns1R2EF7XN8NyNCQxyO9Cdgyw\n+```\n+\n+Roles: `OWNER_ADMIN`, `VET_ADMIN`, `ADMIN`\n+\n+```\n+eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJncm91cHMiOlsiUk9MRV9BRE1JTiIsIlJPTEVfVkVUX0FETUlOIiwiUk9MRV9PV05FUl9BRE1JTiJdLCJzdWIiOiJYMDAwMDQiLCJpYXQiOjE2MTQ4Nzg2NjksImV4cCI6NDc3MDU1MjI2OSwianRpIjoiZjUwM2FkMWItMTkyNy00ZDQ0LTlhNjAtOWU4ZThmNDM2YTA2IiwiaXNzIjoiaHR0cHM6Ly9zcHJpbmctcGV0Y2xpbmljLmdpdGh1Yi5pby9pc3N1ZXIifQ.w2-po_4b9S6Y08tNuv1dn0J0jyd84QiP2qTlWKgj3pGY9VUeXefIKRq9-MTyP-LvkDXNgCyQ6DbDRUt-A7uRdxiDiteirdvg0-7aRKDQBMWtJmEIDAVqZfz20q7ycGMmu2wOEPnDxtSyWJoHLacDIHDQPXyR2AnUHZ1weuFnlipI5OGjeFw7aqT5QXhnj8RwMpw77bqofgIWBTRLLe-VJUYrP8ARiqpoqfPUM6oiS7spSMvItu9IFKWpbzHd0aEHxjfMk6gI8E0q8FEsqgn9l60vV0_FGQNiEXorgGZmPDXSCCK29kgGesvCBk0RYBKrR7LkNEj3uAsXITZKAs9bMA\n+```\n+\n+To see more details about the token you can decode on https://jwt.io\n+\n+### Create your own JWT Tokens\n+\n+If you don't want to use the already generated tokens you generate tokens with either your existing private key or by\n+creating a new keypair.\n+\n+1) Generating Keys with OpenSSL\n+\n+   It is also possible to generate a public and private key pair using the OpenSSL command line tool.\n+\n+   openssl commands for generating keys\n+    ```shell\n+    openssl genrsa -out rsaPrivateKey.pem 2048\n+    openssl rsa -pubout -in rsaPrivateKey.pem -out publicKey.pem\n+    ```\n+\n+   An additional step is needed for generating the private key for converting it into the PKCS#8 format.\n+\n+   openssl command for converting private key\n+    ```shell\n+    openssl pkcs8 -topk8 -nocrypt -inform pem -in rsaPrivateKey.pem -outform pem -out privateKey.pem\n+    ```\n+\n+2) Place the public key `publicKey.pem` to a point that is in the classpath like `META-INF/ressources` and configure the\n+   following property in `application.properties`:\n+\n+    ```\n+    mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem \n+    ```\n+\n+3) Generate a JWT Token\n+\n+   You can now generate your own JSON Web Token and sign it with your private key `privateKey.pem`. There are a lot of\n+   different options available on how to generate a JSON Web Token.\n+\n+   **GeneratorTokenTest**:\n+\n+   For this application a test class was written to generate new JSON Web Tokens on demand. You can generate new JSON\n+   Web Tokens by enabling the test class `com.mpbauer.serverless.samples.petclinic.security.GeneratorTokenTest.java`.\n+   The test classes will generate a new token with specific roles and print it to the console output.\n+\n+For more details check out the Quarkus [Security-JWT-Quickstart](https://quarkus.io/guides/security-jwt) guide.\n+\n+## GitHub Actions CI/CD configuration\n+\n+This section explains the necessary setup details to build and deploy the `quarkus-petclinic-rest-aws-lambda`\n+application to AWS Lambda.\n+\n+### IAM Accounts\n+\n+GitHub Actions is deploying the built applications to AWS Lambda. To do this with a CI/CD tool like\n+[GitHub Actions](https://docs.github.com/en/actions) we need to create an IAM accounts to manage and regulate access to\n+AWS ressources. You follow this [guide](https://www.serverless.com/framework/docs/providers/aws/guide/credentials/) in\n+order to create AWS credentials for AWS Lambda deployments.\n+\n ### GitHub configuration\n \n In GitHub, you need to set up the following secrets via your repositories settings tab:\n \n - `AWS_ACCESS_KEY_ID` - The AWS access key ID from the AWS credentials.csv file\n - `AWS_SECRET_ACCESS_KEY` - Your AWS secret access key\n - `AWS_REGION` - The AWS region of your Lambda function\n-- `AWS_DB_HOST` - The host name of the database\n-- `AWS_DB_PORT` - The port of the database it is running on\n-- `AWS_DB_DATABASE` - The name of the database\n-- `AWS_DB_USERNAME` - The username of the database\n-- `AWS_DB_PASSWORD` - The password of the database\n+- `AWS_DB_HOST` - The hostname or public IP address of the database server\n+- `AWS_DB_PORT` - The port of the database server\n+- `AWS_DB_DATABASE` - The database of your db server you are using for the application\n+- `AWS_DB_USERNAME` - The db username that is used within your application\n+- `AWS_DB_PASSWORD` - The db user password that is used within your application\n+- `AWS_LAMBDA_S3_BUCKET_DEV` - S3 Bucket that is used to upload your lambda code and templates for the `dev` environment\n+- `AWS_LAMBDA_S3_BUCKET_PROD`- S3 Bucket that is used to upload your lambda code and templates for the `prod`\n+  environment\n+\n+In the end your secrets should look like this:\n \n+[![SETUP_GITHUB_AWS_SECRETS_00](docs/screenshots/setup-github-secrets/setup_github_aws_secrets_00.png)](docs/screenshots/setup-github-secrets/setup_github_aws_secrets_00.png)\n \n ## URL Endpoints - Development\n \n@@ -46,3 +285,29 @@ In GitHub, you need to set up the following secrets via your repositories settin\n | User API         | https://xirmkhop1c.execute-api.eu-central-1.amazonaws.com/petclinic/api/users\n | Vet API          | https://xtfhwvw0p6.execute-api.eu-central-1.amazonaws.com/petclinic/api/vets\n | Visit API        | https://21ejizzesi.execute-api.eu-central-1.amazonaws.com/petclinic/api/visits\n+\n+## URL Endpoints - Production\n+\n+### Quarkus Lambda Functions running on JVM\n+\n+| Service          | URL\n+| ---------------- |:-------------:\n+| Owner API        | https://eotgj6qbt7.execute-api.eu-central-1.amazonaws.com/petclinic/api/owners\n+| Pet API          | https://4pga3amkn2.execute-api.eu-central-1.amazonaws.com/petclinic/api/pets\n+| Pet Types API    | https://yurnhe26y0.execute-api.eu-central-1.amazonaws.com/petclinic/api/pettypes\n+| Specialties API  | https://okxv7jysc3.execute-api.eu-central-1.amazonaws.com/petclinic/api/specialties\n+| User API         | https://chzfnqks24.execute-api.eu-central-1.amazonaws.com/petclinic/api/users\n+| Vet API          | https://xv542c2711.execute-api.eu-central-1.amazonaws.com/petclinic/api/vets\n+| Visit API        | https://rr6w41v3zh.execute-api.eu-central-1.amazonaws.com/petclinic/api/visits\n+\n+### Quarkus Lambda Functions running in Native Mode\n+\n+| Service          | URL\n+| ---------------- |:-------------:\n+| Owner API        | https://fapt1ip2ll.execute-api.eu-central-1.amazonaws.com/petclinic/api/owners\n+| Pet API          | https://4acnwr9r91.execute-api.eu-central-1.amazonaws.com/petclinic/api/pets\n+| Pet Types API    | https://z9vi81ziil.execute-api.eu-central-1.amazonaws.com/petclinic/api/pettypes\n+| Specialties API  | https://37ygmicgm0.execute-api.eu-central-1.amazonaws.com/petclinic/api/specialties\n+| User API         | https://flm2o00cjh.execute-api.eu-central-1.amazonaws.com/petclinic/api/users\n+| Vet API          | https://yvg4on8oz6.execute-api.eu-central-1.amazonaws.com/petclinic/api/vets\n+| Visit API        | https://d7rgyyzjle.execute-api.eu-central-1.amazonaws.com/petclinic/api/visits"
  },
  {
    "sha": "95314543839c0e9408461c78b7dc713016f3dc2d",
    "filename": "docs/screenshots/setup-github-secrets/setup_github_aws_secrets_00.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/docs/screenshots/setup-github-secrets/setup_github_aws_secrets_00.png",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/docs/screenshots/setup-github-secrets/setup_github_aws_secrets_00.png",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/docs/screenshots/setup-github-secrets/setup_github_aws_secrets_00.png?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0"
  },
  {
    "sha": "70053fdcf9d32bc0c28bab024f8314ebadf0c845",
    "filename": "owners/src/main/resources/META-INF/resources/publicKey.pem",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/main/resources/META-INF/resources/publicKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/main/resources/META-INF/resources/publicKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/owners/src/main/resources/META-INF/resources/publicKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,9 @@\n+-----BEGIN PUBLIC KEY-----\n+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2S1IpdnSxaeao+TdjJal\n+GNW9mzYssqax6W6goMpNoPF0yDxnXQII28lbKFDx3o8qtauOVWOe9pq10weH+Q5/\n+ZPbQEZDDahZvzISqXSelneQhnWolHUz6IadIzF1HmuSPu3Mw6FGpi7yOFiF+xPVg\n+UrNu/73qloYcNz5AUaKIhMTDL/sBvk6k7VRJKq7EIejuOZJ8dpmRr2Zt9qu0Z00c\n+Fp4raYRvE28ToltjceijLx/1g1EwVdymR9JLWxgZm6xZ1lJhm5HB/jXei5jQUldp\n+mImTYcy4oCHUadBPOSn2j1vm17ksc+KQNszHUqOm4huMCV5Lsnca0Ow4UiAnAsYC\n+vQIDAQAB\n+-----END PUBLIC KEY-----"
  },
  {
    "sha": "7c6c2715ae92e398ae0dc344db35fc48d05a8614",
    "filename": "owners/src/main/resources/application.properties",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/main/resources/application.properties",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/owners/src/main/resources/application.properties?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -16,7 +16,18 @@ quarkus.shutdown.timeout=3\n # ----------------------------------------------------------- #\n \n # Enable/Disable Security for Petclinic Application\n-petclinic.security.enable=false\n+petclinic.security.enable=true\n+%dev.petclinic.security.enable=false\n+%test.petclinic.security.enable=true\n+\n+mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem\n+mp.jwt.verify.issuer=https://spring-petclinic.github.io/issuer\n+\n+# Private signing key to generate and sign tokens for testing\n+%test.smallrye.jwt.sign.key.location=privateKey.pem\n+\n+# Token issuer which can be used to set an iss (issuer) claim value if this claim has not already been set\n+%test.smallrye.jwt.new-token.issuer=https://spring-petclinic.github.io/issuer\n \n # CORS Header Settings\n quarkus.http.cors=true"
  },
  {
    "sha": "e8c6ec25cb200381ead37b41080b11ec5a41ed9f",
    "filename": "owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/AbstractIntegrationTest.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/AbstractIntegrationTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/AbstractIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/AbstractIntegrationTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,27 @@\n+package com.mpbauer.serverless.samples.petclinic.owners;\n+\n+import com.mpbauer.serverless.samples.petclinic.owners.security.Roles;\n+import io.smallrye.jwt.build.Jwt;\n+\n+public abstract class AbstractIntegrationTest {\n+\n+    protected String generateValidOwnerAdminToken() {\n+        return Jwt\n+                .subject(\"X00001\")\n+                .groups(Roles.OWNER_ADMIN).sign();\n+    }\n+\n+    protected String generateValidVetAdminToken() {\n+        return Jwt\n+                .subject(\"X00002\")\n+                .groups(Roles.VET_ADMIN)\n+                .sign();\n+    }\n+\n+    protected String generateValidAdminToken() {\n+        return Jwt\n+                .subject(\"X00003\")\n+                .groups(Roles.ADMIN)\n+                .sign();\n+    }\n+}"
  },
  {
    "sha": "11998dd2fbcf68cb50ed3a050f943e8b9c4c322d",
    "filename": "owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/rest/OwnerRestControllerTests.java",
    "status": "modified",
    "additions": 135,
    "deletions": 148,
    "changes": 283,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/rest/OwnerRestControllerTests.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/rest/OwnerRestControllerTests.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/rest/OwnerRestControllerTests.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -17,6 +17,7 @@\n package com.mpbauer.serverless.samples.petclinic.owners.rest;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mpbauer.serverless.samples.petclinic.owners.AbstractIntegrationTest;\n import com.mpbauer.serverless.samples.petclinic.owners.model.Owner;\n import com.mpbauer.serverless.samples.petclinic.owners.model.Pet;\n import com.mpbauer.serverless.samples.petclinic.owners.model.PetType;\n@@ -46,7 +47,7 @@\n  */\n @QuarkusTest\n @QuarkusTestResource(H2DatabaseTestResource.class)\n-class OwnerRestControllerTests {\n+class OwnerRestControllerTests extends AbstractIntegrationTest {\n \n     @InjectMock\n     OwnerService ownerService;\n@@ -119,122 +120,114 @@ private Visit getTestVisitForPet(final Pet pet, final int id) {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\") // TODO\n     void testGetOwnerSuccess() {\n         given(this.ownerService.findOwnerById(1)).willReturn(owners.get(0));\n \n         given()\n-                .auth().none()  // TODO change to JWT Token Authentication\n-                .when()\n-                .get(\"/api/owners/1\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(ContentType.JSON)\n-                .body(\"id\", equalTo(1))\n-                .body(\"firstName\", equalTo(\"George\"));\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .when()\n+            .get(\"/api/owners/1\")\n+            .then()\n+            .statusCode(200)\n+            .contentType(ContentType.JSON)\n+            .body(\"id\", equalTo(1))\n+            .body(\"firstName\", equalTo(\"George\"));\n     }\n \n-    //@WithMockUser(roles = \"OWNER_ADMIN\")\n     @Test\n     void testGetOwnerNotFound() {\n         given(this.ownerService.findOwnerById(-1)).willReturn(null);\n         given()\n-                .auth().none() // TODO change to JWT Token Authentication\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/owners/-1\")\n-                .then()\n-                .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/owners/-1\")\n+            .then()\n+            .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testGetOwnersListSuccess() {\n         owners.remove(0);\n         owners.remove(1);\n         given(this.ownerService.findOwnerByLastName(\"Davis\")).willReturn(owners);\n         given()\n-                .auth().none() // TODO change to JWT Token Authentication\n-                .when()\n-                .get(\"/api/owners/*/lastname/Davis\")\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .body(\"[0].id\", equalTo(2))\n-                .body(\"[0].firstName\", equalTo(\"Betty\"))\n-                .body(\"[1].id\", equalTo(4))\n-                .body(\"[1].firstName\", equalTo(\"Harold\"));\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .when()\n+            .get(\"/api/owners/*/lastname/Davis\")\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .body(\"[0].id\", equalTo(2))\n+            .body(\"[0].firstName\", equalTo(\"Betty\"))\n+            .body(\"[1].id\", equalTo(4))\n+            .body(\"[1].firstName\", equalTo(\"Harold\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testGetOwnersListNotFound() {\n         owners.clear();\n         given(this.ownerService.findOwnerByLastName(\"0\")).willReturn(owners);\n         given()\n-                .auth().none() // TODO\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/owners/?lastName=0\")\n-                .then()\n-                .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/owners/?lastName=0\")\n+            .then()\n+            .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testGetAllOwnersSuccess() {\n         owners.remove(0);\n         owners.remove(1);\n         given(this.ownerService.findAllOwners()).willReturn(owners);\n         given()\n-                .auth().none() // TODO\n-                .when()\n-                .get(\"/api/owners/\")\n-                .then()\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .contentType(ContentType.JSON)\n-                .body(\"[0].id\", equalTo(2))\n-                .body(\"[0].firstName\", equalTo(\"Betty\"))\n-                .body(\"[1].id\", equalTo(4))\n-                .body(\"[1].firstName\", equalTo(\"Harold\"));\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .when()\n+            .get(\"/api/owners/\")\n+            .then()\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .contentType(ContentType.JSON)\n+            .body(\"[0].id\", equalTo(2))\n+            .body(\"[0].firstName\", equalTo(\"Betty\"))\n+            .body(\"[1].id\", equalTo(4))\n+            .body(\"[1].firstName\", equalTo(\"Harold\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testGetAllOwnersNotFound() {\n         owners.clear();\n         given(this.ownerService.findAllOwners()).willReturn(owners);\n         given()\n-                .auth().none() // TODO\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/owners/\")\n-                .then()\n-                .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/owners/\")\n+            .then()\n+            .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testCreateOwnerErrorIdSpecified() throws Exception {\n         Owner newOwner = owners.get(0);\n         newOwner.setId(999);\n         ObjectMapper mapper = new ObjectMapper();\n         String newOwnerAsJSON = mapper.writeValueAsString(newOwner);\n \n         given()\n-                .auth().none() // TODO\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newOwnerAsJSON)\n-                .when()\n-                .post(\"/api/owners/\")\n-                .then()\n-                .statusCode(Response.Status.BAD_REQUEST.getStatusCode())\n-                .header(\"errors\", \"[{\\\"objectName\\\":\\\"body\\\",\\\"fieldName\\\":\\\"id\\\",\\\"fieldValue\\\":\\\"999\\\",\\\"errorMessage\\\":\\\"must not be specified\\\"}]\");\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newOwnerAsJSON)\n+            .when()\n+            .post(\"/api/owners/\")\n+            .then()\n+            .statusCode(Response.Status.BAD_REQUEST.getStatusCode())\n+            .header(\"errors\", \"[{\\\"objectName\\\":\\\"body\\\",\\\"fieldName\\\":\\\"id\\\",\\\"fieldValue\\\":\\\"999\\\",\\\"errorMessage\\\":\\\"must not be specified\\\"}]\");\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testCreateOwnerError() throws Exception {\n         Owner newOwner = owners.get(0);\n         newOwner.setId(null);\n@@ -243,18 +236,17 @@ void testCreateOwnerError() throws Exception {\n         String newOwnerAsJSON = mapper.writeValueAsString(newOwner);\n \n         given()\n-                .auth().none() // TODO\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newOwnerAsJSON)\n-                .when()\n-                .post(\"/api/owners/\")\n-                .then()\n-                .statusCode(Response.Status.BAD_REQUEST.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newOwnerAsJSON)\n+            .when()\n+            .post(\"/api/owners/\")\n+            .then()\n+            .statusCode(Response.Status.BAD_REQUEST.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testUpdateOwnerSuccess() throws Exception {\n         given(this.ownerService.findOwnerById(1)).willReturn(owners.get(0));\n         int ownerId = owners.get(0).getId();\n@@ -270,30 +262,29 @@ void testUpdateOwnerSuccess() throws Exception {\n         String newOwnerAsJSON = mapper.writeValueAsString(updatedOwner);\n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newOwnerAsJSON)\n-                .when()\n-                .put(\"/api/owners/\" + ownerId)\n-                .then()\n-                .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newOwnerAsJSON)\n+            .when()\n+            .put(\"/api/owners/\" + ownerId)\n+            .then()\n+            .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .when()\n-                .get(\"/api/owners/\" + ownerId)\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .body(\"id\", equalTo(1))\n-                .body(\"firstName\", equalTo(\"George I\"));\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .when()\n+            .get(\"/api/owners/\" + ownerId)\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .body(\"id\", equalTo(1))\n+            .body(\"firstName\", equalTo(\"George I\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testUpdateOwnerSuccessNoBodyId() throws Exception {\n         given(this.ownerService.findOwnerById(1)).willReturn(owners.get(0));\n         int ownerId = owners.get(0).getId();\n@@ -307,30 +298,29 @@ void testUpdateOwnerSuccessNoBodyId() throws Exception {\n         String newOwnerAsJSON = mapper.writeValueAsString(updatedOwner);\n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newOwnerAsJSON)\n-                .when()\n-                .put(\"/api/owners/\" + ownerId)\n-                .then()\n-                .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newOwnerAsJSON)\n+            .when()\n+            .put(\"/api/owners/\" + ownerId)\n+            .then()\n+            .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .when()\n-                .get(\"/api/owners/\" + ownerId)\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .body(\"id\", equalTo(ownerId))\n-                .body(\"firstName\", equalTo(\"George I\"));\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .when()\n+            .get(\"/api/owners/\" + ownerId)\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .body(\"id\", equalTo(ownerId))\n+            .body(\"firstName\", equalTo(\"George I\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testUpdateOwnerErrorBodyIdMismatchWithPathId() throws Exception {\n         int ownerId = owners.get(0).getId();\n         Owner updatedOwner = new Owner();\n@@ -345,72 +335,69 @@ void testUpdateOwnerErrorBodyIdMismatchWithPathId() throws Exception {\n         String newOwnerAsJSON = mapper.writeValueAsString(updatedOwner);\n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newOwnerAsJSON)\n-                .when()\n-                .put(\"/api/owners/\" + ownerId)\n-                .then()\n-                .statusCode(Response.Status.BAD_REQUEST.getStatusCode())\n-                .header(\"errors\", \"[{\\\"objectName\\\":\\\"body\\\",\\\"fieldName\\\":\\\"id\\\",\\\"fieldValue\\\":\\\"-1\\\",\\\"errorMessage\\\":\\\"does not match pathId: 1\\\"}]\");\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newOwnerAsJSON)\n+            .when()\n+            .put(\"/api/owners/\" + ownerId)\n+            .then()\n+            .statusCode(Response.Status.BAD_REQUEST.getStatusCode())\n+            .header(\"errors\", \"[{\\\"objectName\\\":\\\"body\\\",\\\"fieldName\\\":\\\"id\\\",\\\"fieldValue\\\":\\\"-1\\\",\\\"errorMessage\\\":\\\"does not match pathId: 1\\\"}]\");\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testUpdateOwnerError() throws Exception {\n         Owner newOwner = owners.get(0);\n         newOwner.setFirstName(\"\");\n         ObjectMapper mapper = new ObjectMapper();\n         String newOwnerAsJSON = mapper.writeValueAsString(newOwner);\n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newOwnerAsJSON)\n-                .when()\n-                .put(\"/api/owners/1\")\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.BAD_REQUEST.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newOwnerAsJSON)\n+            .when()\n+            .put(\"/api/owners/1\")\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.BAD_REQUEST.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testDeleteOwnerSuccess() throws Exception {\n         Owner newOwner = owners.get(0);\n         ObjectMapper mapper = new ObjectMapper();\n         String newOwnerAsJSON = mapper.writeValueAsString(newOwner);\n         given(this.ownerService.findOwnerById(1)).willReturn(owners.get(0));\n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newOwnerAsJSON)\n-                .when()\n-                .delete(\"/api/owners/1\")\n-                .then()\n-                .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newOwnerAsJSON)\n+            .when()\n+            .delete(\"/api/owners/1\")\n+            .then()\n+            .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles = \"OWNER_ADMIN\")\n     void testDeleteOwnerError() throws Exception {\n         Owner newOwner = owners.get(0);\n         ObjectMapper mapper = new ObjectMapper();\n         String newOwnerAsJSON = mapper.writeValueAsString(newOwner);\n         given(this.ownerService.findOwnerById(-1)).willReturn(null);\n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newOwnerAsJSON)\n-                .when()\n-                .delete(\"/api/owners/-1\")\n-                .then()\n-                .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newOwnerAsJSON)\n+            .when()\n+            .delete(\"/api/owners/-1\")\n+            .then()\n+            .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n     }\n }"
  },
  {
    "sha": "d1687eb734b7793f3f7ef471c53f4483452d9147",
    "filename": "owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/security/GenerateTokenTest.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/security/GenerateTokenTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/security/GenerateTokenTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/owners/src/test/java/com/mpbauer/serverless/samples/petclinic/owners/security/GenerateTokenTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,62 @@\n+package com.mpbauer.serverless.samples.petclinic.owners.security;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.smallrye.jwt.build.Jwt;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+/**\n+ * A simple utility class to generate and print a JWT token string to stdout.\n+ */\n+@QuarkusTest\n+@Disabled(\"Enable for JWT Token generation\")\n+class GenerateTokenTest {\n+\n+    // Token expires after 100 years\n+    private static final Duration TOKEN_EXPIRATION = Duration.ofDays(ChronoUnit.DAYS.between(LocalDateTime.now(), LocalDateTime.now().plusYears(100)));\n+\n+    /**\n+     * Generate JWT token\n+     */\n+    @Test\n+    void generateOwnerAdminToken() {\n+        String token = Jwt.groups(Roles.OWNER_ADMIN)\n+            .subject(\"X00001\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateVetAdminToken() {\n+        String token = Jwt.groups(Roles.VET_ADMIN)\n+            .subject(\"X00002\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateAdminToken() {\n+        String token = Jwt.groups(Roles.ADMIN)\n+            .subject(\"X00003\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateTokenWithAllRoles() {\n+        String token = Jwt.groups(new HashSet<>(Arrays.asList(Roles.ADMIN, Roles.OWNER_ADMIN, Roles.VET_ADMIN)))\n+            .subject(\"X00004\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+}"
  },
  {
    "sha": "e17105ef87edb029dbce812368f90ad8aa8b8b19",
    "filename": "owners/src/test/resources/privateKey.pem",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/test/resources/privateKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/owners/src/test/resources/privateKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/owners/src/test/resources/privateKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDZLUil2dLFp5qj\n+5N2MlqUY1b2bNiyyprHpbqCgyk2g8XTIPGddAgjbyVsoUPHejyq1q45VY572mrXT\n+B4f5Dn9k9tARkMNqFm/MhKpdJ6Wd5CGdaiUdTPohp0jMXUea5I+7czDoUamLvI4W\n+IX7E9WBSs27/veqWhhw3PkBRooiExMMv+wG+TqTtVEkqrsQh6O45knx2mZGvZm32\n+q7RnTRwWnitphG8TbxOiW2Nx6KMvH/WDUTBV3KZH0ktbGBmbrFnWUmGbkcH+Nd6L\n+mNBSV2mYiZNhzLigIdRp0E85KfaPW+bXuSxz4pA2zMdSo6biG4wJXkuydxrQ7DhS\n+ICcCxgK9AgMBAAECggEARop96Vj6LDdHdGq3R5363Dk4z/xlwlWAvkivpepwEpG7\n+E/sCu+QYSoN5t3urRFYOUln57mRgUstnubbdhJkf6gR9CueRgZjuEWkaCQ4CrmlW\n+PdInYgAJ0vqKG89EndwVj5ZX0W4M+xVwtWGF0qW89r/PkwP1+ZRv/8WZkKqRW0YQ\n+ntONpEPfqtDVUSpd/vh+YBdRafYqo3tBs4s1pmWxm2rYVDsaMZ0dakLOdLjeOsA4\n+ySK8YpM9hTjjUWu1Ma/BdEXdjbYkJvxy68lwECTxQgtNkJirkPD28TnFn0nLfSpS\n+5IXIO5jrOnB30ihx+2gIUYbP/LJKEDG1MUMt0zsFxQKBgQD3yWlN99hIQm43kiqJ\n+HysfzlPyitG6a+pXN6lQscQk7TPHhnqW+pQwCrw0aO1u12bGCmWn5bUt+Vl9Wwu/\n+33eG35jDmTSKLnAwlhGbV/nNcfNqBvNpcPw9GMY7n+qOfTq/AI4W1J9rTqN11NC8\n+WzhNKcGO4+nzCcRiyYQDw0yumwKBgQDgYCIR90tSQbZV4U1p3EOUqZdkx++RZWZO\n+rphBtDhUjicnuzb8LcnujjoMJym1xbiKpmutUYc1b40Dm+HkFDO6XrkdPRdiTGEt\n+qV/b+kse+JR1Yp1q0yopk3BidAKCScnktmm+VPy1k6hSstgGiZr75K+KSoBTjyos\n+r/FgtWE9hwKBgQDFdqHPu5qFg0MYUAhLvCX+s8ucdtpKKOPYW4g3wWKhVtKzx8x7\n+8vcTDgsL7S6B7XB+lByM33cySwrw5hSH9MrpFdlEzxvansVTQtSHKmXtPkkQDrf+\n+KEcrXUnkjD09Djk5q3SQZyMgPcvwBAfQgxVsEMGqYKC4yOjTHOpyoTnDzwKBgQCt\n+yohZNhyHSBK9Dlfx6QQHgBydmSd8jPfjdeTE75y6EalOYvpB9g1004EurJ7oBo/c\n+BO9ePcnmn9KvuuwKx4MRlhD4DruwDc0vmwN+1a2d/ZiwG4QmnA0KSwM/nu/ajuDs\n+YEYjgJyE4Cv+cjxVQ/xho048ZVxkXH2kQ1tJNvRsvQKBgQDXdSTrF0FOqSL+o9NZ\n+mKytR4Ee1uYLToQjUgpvJra9mVoXoczciAuoCYOyT5l3uRxqYC6A3Fnzf4dddENL\n+nyOPEYhZpEMOE9XOFoC5LE5i5z/MXd5rnHKszxeOWXjBF7jKTKiTAF66tGBeVqEh\n+pG+nJC+tEOiafTJVXNqhJWcUFg==\n+-----END PRIVATE KEY-----"
  },
  {
    "sha": "70053fdcf9d32bc0c28bab024f8314ebadf0c845",
    "filename": "pets/src/main/resources/META-INF/resources/publicKey.pem",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/main/resources/META-INF/resources/publicKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/main/resources/META-INF/resources/publicKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pets/src/main/resources/META-INF/resources/publicKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,9 @@\n+-----BEGIN PUBLIC KEY-----\n+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2S1IpdnSxaeao+TdjJal\n+GNW9mzYssqax6W6goMpNoPF0yDxnXQII28lbKFDx3o8qtauOVWOe9pq10weH+Q5/\n+ZPbQEZDDahZvzISqXSelneQhnWolHUz6IadIzF1HmuSPu3Mw6FGpi7yOFiF+xPVg\n+UrNu/73qloYcNz5AUaKIhMTDL/sBvk6k7VRJKq7EIejuOZJ8dpmRr2Zt9qu0Z00c\n+Fp4raYRvE28ToltjceijLx/1g1EwVdymR9JLWxgZm6xZ1lJhm5HB/jXei5jQUldp\n+mImTYcy4oCHUadBPOSn2j1vm17ksc+KQNszHUqOm4huMCV5Lsnca0Ow4UiAnAsYC\n+vQIDAQAB\n+-----END PUBLIC KEY-----"
  },
  {
    "sha": "7c6c2715ae92e398ae0dc344db35fc48d05a8614",
    "filename": "pets/src/main/resources/application.properties",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/main/resources/application.properties",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pets/src/main/resources/application.properties?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -16,7 +16,18 @@ quarkus.shutdown.timeout=3\n # ----------------------------------------------------------- #\n \n # Enable/Disable Security for Petclinic Application\n-petclinic.security.enable=false\n+petclinic.security.enable=true\n+%dev.petclinic.security.enable=false\n+%test.petclinic.security.enable=true\n+\n+mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem\n+mp.jwt.verify.issuer=https://spring-petclinic.github.io/issuer\n+\n+# Private signing key to generate and sign tokens for testing\n+%test.smallrye.jwt.sign.key.location=privateKey.pem\n+\n+# Token issuer which can be used to set an iss (issuer) claim value if this claim has not already been set\n+%test.smallrye.jwt.new-token.issuer=https://spring-petclinic.github.io/issuer\n \n # CORS Header Settings\n quarkus.http.cors=true"
  },
  {
    "sha": "d07504b176503aef77560730d45eca3e32dd159f",
    "filename": "pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/AbstractIntegrationTest.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/AbstractIntegrationTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/AbstractIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/AbstractIntegrationTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,27 @@\n+package com.mpbauer.serverless.samples.petclinic.pets;\n+\n+import com.mpbauer.serverless.samples.petclinic.pets.security.Roles;\n+import io.smallrye.jwt.build.Jwt;\n+\n+public abstract class AbstractIntegrationTest {\n+\n+    protected String generateValidOwnerAdminToken() {\n+        return Jwt\n+            .subject(\"X00001\")\n+            .groups(Roles.OWNER_ADMIN).sign();\n+    }\n+\n+    protected String generateValidVetAdminToken() {\n+        return Jwt\n+            .subject(\"X00002\")\n+            .groups(Roles.VET_ADMIN)\n+            .sign();\n+    }\n+\n+    protected String generateValidAdminToken() {\n+        return Jwt\n+            .subject(\"X00003\")\n+            .groups(Roles.ADMIN)\n+            .sign();\n+    }\n+}"
  },
  {
    "sha": "5b50690ce1ea8db20170ca69da9f73b33bcf735b",
    "filename": "pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/rest/PetRestControllerTests.java",
    "status": "modified",
    "additions": 17,
    "deletions": 27,
    "changes": 44,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/rest/PetRestControllerTests.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/rest/PetRestControllerTests.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/rest/PetRestControllerTests.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -17,6 +17,7 @@\n package com.mpbauer.serverless.samples.petclinic.pets.rest;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mpbauer.serverless.samples.petclinic.pets.AbstractIntegrationTest;\n import com.mpbauer.serverless.samples.petclinic.pets.model.Owner;\n import com.mpbauer.serverless.samples.petclinic.pets.model.Pet;\n import com.mpbauer.serverless.samples.petclinic.pets.model.PetType;\n@@ -48,8 +49,7 @@\n \n @QuarkusTest\n @QuarkusTestResource(H2DatabaseTestResource.class)\n-    // TODO check if necessary for native image build\n-class PetRestControllerTests {\n+class PetRestControllerTests extends AbstractIntegrationTest {\n \n     @InjectMock\n     ClinicService clinicService;\n@@ -90,11 +90,10 @@ public void initPets() {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n-    void testGetPetSuccess() throws Exception {\n+    void testGetPetSuccess() {\n         given(this.clinicService.findPetById(3)).willReturn(pets.get(0));\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .when()\n             .accept(ContentType.JSON)\n             .get(\"/api/pets/3\")\n@@ -106,11 +105,10 @@ void testGetPetSuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n-    void testGetPetNotFound() throws Exception {\n+    void testGetPetNotFound() {\n         given(this.clinicService.findPetById(-1)).willReturn(null);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .when()\n             .get(\"/api/pets/-1\")\n@@ -119,11 +117,10 @@ void testGetPetNotFound() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n-    void testGetAllPetsSuccess() throws Exception {\n+    void testGetAllPetsSuccess() {\n         given(this.clinicService.findAllPets()).willReturn(pets);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .when()\n             .get(\"/api/pets/\")\n@@ -137,12 +134,11 @@ void testGetAllPetsSuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n-    void testGetAllPetsNotFound() throws Exception {\n+    void testGetAllPetsNotFound() {\n         pets.clear();\n         given(this.clinicService.findAllPets()).willReturn(pets);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .when()\n             .get(\"/api/pets/\")\n@@ -151,15 +147,14 @@ void testGetAllPetsNotFound() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n     void testCreatePetSuccess() throws Exception {\n         Pet newPet = pets.get(0);\n         newPet.setId(999);\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetAsJSON = mapper.writeValueAsString(newPet);\n \n         given()\n-            .auth().basic(\"admin\", \"admin\")\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newPetAsJSON)\n@@ -170,7 +165,6 @@ void testCreatePetSuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n     void testCreatePetError() throws Exception {\n         Pet newPet = pets.get(0);\n         newPet.setId(null);\n@@ -179,7 +173,7 @@ void testCreatePetError() throws Exception {\n         String newPetAsJSON = mapper.writeValueAsString(newPet);\n \n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newPetAsJSON)\n@@ -191,7 +185,6 @@ void testCreatePetError() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n     void testUpdatePetSuccess() throws Exception {\n         given(this.clinicService.findPetById(3)).willReturn(pets.get(0));\n         Pet newPet = pets.get(0);\n@@ -200,7 +193,7 @@ void testUpdatePetSuccess() throws Exception {\n         String newPetAsJSON = mapper.writeValueAsString(newPet);\n \n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newPetAsJSON)\n@@ -211,7 +204,7 @@ void testUpdatePetSuccess() throws Exception {\n             .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n \n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .when()\n             .get(\"/api/pets/3\")\n             .then()\n@@ -222,15 +215,14 @@ void testUpdatePetSuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n     void testUpdatePetError() throws Exception {\n         Pet newPet = pets.get(0);\n         newPet.setName(\"\");\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetAsJSON = mapper.writeValueAsString(newPet);\n \n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newPetAsJSON)\n@@ -241,14 +233,13 @@ void testUpdatePetError() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n     void testDeletePetSuccess() throws Exception {\n         Pet newPet = pets.get(0);\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetAsJSON = mapper.writeValueAsString(newPet);\n         given(this.clinicService.findPetById(3)).willReturn(pets.get(0));\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newPetAsJSON)\n@@ -259,14 +250,13 @@ void testDeletePetSuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n     void testDeletePetError() throws Exception {\n         Pet newPet = pets.get(0);\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetAsJSON = mapper.writeValueAsString(newPet);\n         given(this.clinicService.findPetById(-1)).willReturn(null);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidOwnerAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newPetAsJSON)"
  },
  {
    "sha": "622de5d4d78f3878c2d6f958dc9217ed2ef3ea6c",
    "filename": "pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/security/GenerateTokenTest.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/security/GenerateTokenTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/security/GenerateTokenTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pets/src/test/java/com/mpbauer/serverless/samples/petclinic/pets/security/GenerateTokenTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,62 @@\n+package com.mpbauer.serverless.samples.petclinic.pets.security;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.smallrye.jwt.build.Jwt;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+/**\n+ * A simple utility class to generate and print a JWT token string to stdout.\n+ */\n+@QuarkusTest\n+@Disabled(\"Enable for JWT Token generation\")\n+class GenerateTokenTest {\n+\n+    // Token expires after 100 years\n+    private static final Duration TOKEN_EXPIRATION = Duration.ofDays(ChronoUnit.DAYS.between(LocalDateTime.now(), LocalDateTime.now().plusYears(100)));\n+\n+    /**\n+     * Generate JWT token\n+     */\n+    @Test\n+    void generateOwnerAdminToken() {\n+        String token = Jwt.groups(Roles.OWNER_ADMIN)\n+            .subject(\"X00001\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateVetAdminToken() {\n+        String token = Jwt.groups(Roles.VET_ADMIN)\n+            .subject(\"X00002\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateAdminToken() {\n+        String token = Jwt.groups(Roles.ADMIN)\n+            .subject(\"X00003\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateTokenWithAllRoles() {\n+        String token = Jwt.groups(new HashSet<>(Arrays.asList(Roles.ADMIN, Roles.OWNER_ADMIN, Roles.VET_ADMIN)))\n+            .subject(\"X00004\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+}"
  },
  {
    "sha": "e17105ef87edb029dbce812368f90ad8aa8b8b19",
    "filename": "pets/src/test/resources/privateKey.pem",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/test/resources/privateKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pets/src/test/resources/privateKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pets/src/test/resources/privateKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDZLUil2dLFp5qj\n+5N2MlqUY1b2bNiyyprHpbqCgyk2g8XTIPGddAgjbyVsoUPHejyq1q45VY572mrXT\n+B4f5Dn9k9tARkMNqFm/MhKpdJ6Wd5CGdaiUdTPohp0jMXUea5I+7czDoUamLvI4W\n+IX7E9WBSs27/veqWhhw3PkBRooiExMMv+wG+TqTtVEkqrsQh6O45knx2mZGvZm32\n+q7RnTRwWnitphG8TbxOiW2Nx6KMvH/WDUTBV3KZH0ktbGBmbrFnWUmGbkcH+Nd6L\n+mNBSV2mYiZNhzLigIdRp0E85KfaPW+bXuSxz4pA2zMdSo6biG4wJXkuydxrQ7DhS\n+ICcCxgK9AgMBAAECggEARop96Vj6LDdHdGq3R5363Dk4z/xlwlWAvkivpepwEpG7\n+E/sCu+QYSoN5t3urRFYOUln57mRgUstnubbdhJkf6gR9CueRgZjuEWkaCQ4CrmlW\n+PdInYgAJ0vqKG89EndwVj5ZX0W4M+xVwtWGF0qW89r/PkwP1+ZRv/8WZkKqRW0YQ\n+ntONpEPfqtDVUSpd/vh+YBdRafYqo3tBs4s1pmWxm2rYVDsaMZ0dakLOdLjeOsA4\n+ySK8YpM9hTjjUWu1Ma/BdEXdjbYkJvxy68lwECTxQgtNkJirkPD28TnFn0nLfSpS\n+5IXIO5jrOnB30ihx+2gIUYbP/LJKEDG1MUMt0zsFxQKBgQD3yWlN99hIQm43kiqJ\n+HysfzlPyitG6a+pXN6lQscQk7TPHhnqW+pQwCrw0aO1u12bGCmWn5bUt+Vl9Wwu/\n+33eG35jDmTSKLnAwlhGbV/nNcfNqBvNpcPw9GMY7n+qOfTq/AI4W1J9rTqN11NC8\n+WzhNKcGO4+nzCcRiyYQDw0yumwKBgQDgYCIR90tSQbZV4U1p3EOUqZdkx++RZWZO\n+rphBtDhUjicnuzb8LcnujjoMJym1xbiKpmutUYc1b40Dm+HkFDO6XrkdPRdiTGEt\n+qV/b+kse+JR1Yp1q0yopk3BidAKCScnktmm+VPy1k6hSstgGiZr75K+KSoBTjyos\n+r/FgtWE9hwKBgQDFdqHPu5qFg0MYUAhLvCX+s8ucdtpKKOPYW4g3wWKhVtKzx8x7\n+8vcTDgsL7S6B7XB+lByM33cySwrw5hSH9MrpFdlEzxvansVTQtSHKmXtPkkQDrf+\n+KEcrXUnkjD09Djk5q3SQZyMgPcvwBAfQgxVsEMGqYKC4yOjTHOpyoTnDzwKBgQCt\n+yohZNhyHSBK9Dlfx6QQHgBydmSd8jPfjdeTE75y6EalOYvpB9g1004EurJ7oBo/c\n+BO9ePcnmn9KvuuwKx4MRlhD4DruwDc0vmwN+1a2d/ZiwG4QmnA0KSwM/nu/ajuDs\n+YEYjgJyE4Cv+cjxVQ/xho048ZVxkXH2kQ1tJNvRsvQKBgQDXdSTrF0FOqSL+o9NZ\n+mKytR4Ee1uYLToQjUgpvJra9mVoXoczciAuoCYOyT5l3uRxqYC6A3Fnzf4dddENL\n+nyOPEYhZpEMOE9XOFoC5LE5i5z/MXd5rnHKszxeOWXjBF7jKTKiTAF66tGBeVqEh\n+pG+nJC+tEOiafTJVXNqhJWcUFg==\n+-----END PRIVATE KEY-----"
  },
  {
    "sha": "70053fdcf9d32bc0c28bab024f8314ebadf0c845",
    "filename": "pettypes/src/main/resources/META-INF/resources/publicKey.pem",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/main/resources/META-INF/resources/publicKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/main/resources/META-INF/resources/publicKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pettypes/src/main/resources/META-INF/resources/publicKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,9 @@\n+-----BEGIN PUBLIC KEY-----\n+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2S1IpdnSxaeao+TdjJal\n+GNW9mzYssqax6W6goMpNoPF0yDxnXQII28lbKFDx3o8qtauOVWOe9pq10weH+Q5/\n+ZPbQEZDDahZvzISqXSelneQhnWolHUz6IadIzF1HmuSPu3Mw6FGpi7yOFiF+xPVg\n+UrNu/73qloYcNz5AUaKIhMTDL/sBvk6k7VRJKq7EIejuOZJ8dpmRr2Zt9qu0Z00c\n+Fp4raYRvE28ToltjceijLx/1g1EwVdymR9JLWxgZm6xZ1lJhm5HB/jXei5jQUldp\n+mImTYcy4oCHUadBPOSn2j1vm17ksc+KQNszHUqOm4huMCV5Lsnca0Ow4UiAnAsYC\n+vQIDAQAB\n+-----END PUBLIC KEY-----"
  },
  {
    "sha": "7c6c2715ae92e398ae0dc344db35fc48d05a8614",
    "filename": "pettypes/src/main/resources/application.properties",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/main/resources/application.properties",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pettypes/src/main/resources/application.properties?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -16,7 +16,18 @@ quarkus.shutdown.timeout=3\n # ----------------------------------------------------------- #\n \n # Enable/Disable Security for Petclinic Application\n-petclinic.security.enable=false\n+petclinic.security.enable=true\n+%dev.petclinic.security.enable=false\n+%test.petclinic.security.enable=true\n+\n+mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem\n+mp.jwt.verify.issuer=https://spring-petclinic.github.io/issuer\n+\n+# Private signing key to generate and sign tokens for testing\n+%test.smallrye.jwt.sign.key.location=privateKey.pem\n+\n+# Token issuer which can be used to set an iss (issuer) claim value if this claim has not already been set\n+%test.smallrye.jwt.new-token.issuer=https://spring-petclinic.github.io/issuer\n \n # CORS Header Settings\n quarkus.http.cors=true"
  },
  {
    "sha": "ed9180df18748ee64fa46d04c251e6fd3cd53cd9",
    "filename": "pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/AbstractIntegrationTest.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/AbstractIntegrationTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/AbstractIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/AbstractIntegrationTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,27 @@\n+package com.mpbauer.serverless.samples.petclinic.pettypes;\n+\n+import com.mpbauer.serverless.samples.petclinic.pettypes.security.Roles;\n+import io.smallrye.jwt.build.Jwt;\n+\n+public abstract class AbstractIntegrationTest {\n+\n+    protected String generateValidOwnerAdminToken() {\n+        return Jwt\n+            .subject(\"X00001\")\n+            .groups(Roles.OWNER_ADMIN).sign();\n+    }\n+\n+    protected String generateValidVetAdminToken() {\n+        return Jwt\n+            .subject(\"X00002\")\n+            .groups(Roles.VET_ADMIN)\n+            .sign();\n+    }\n+\n+    protected String generateValidAdminToken() {\n+        return Jwt\n+            .subject(\"X00003\")\n+            .groups(Roles.ADMIN)\n+            .sign();\n+    }\n+}"
  },
  {
    "sha": "117592f2e6fd813979a63a314462f5e6aeaaf495",
    "filename": "pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/rest/PetTypeRestControllerTests.java",
    "status": "modified",
    "additions": 119,
    "deletions": 132,
    "changes": 251,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/rest/PetTypeRestControllerTests.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/rest/PetTypeRestControllerTests.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/rest/PetTypeRestControllerTests.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -17,6 +17,7 @@\n package com.mpbauer.serverless.samples.petclinic.pettypes.rest;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mpbauer.serverless.samples.petclinic.pettypes.AbstractIntegrationTest;\n import com.mpbauer.serverless.samples.petclinic.pettypes.model.PetType;\n import com.mpbauer.serverless.samples.petclinic.pettypes.service.PetTypeService;\n import io.quarkus.test.common.QuarkusTestResource;\n@@ -44,8 +45,7 @@\n  */\n @QuarkusTest\n @QuarkusTestResource(H2DatabaseTestResource.class)\n-        // TODO check if necessary for native image build\n-class PetTypeRestControllerTests {\n+class PetTypeRestControllerTests extends AbstractIntegrationTest {\n \n     @InjectMock\n     PetTypeService petTypeService;\n@@ -78,227 +78,214 @@ public void initPetTypes() {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n-    void testGetPetTypeSuccessAsOwnerAdmin() throws Exception {\n+    void testGetPetTypeSuccessAsOwnerAdmin() {\n         given(this.petTypeService.findPetTypeById(1)).willReturn(petTypes.get(0));\n \n         RestAssured.given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/pettypes/1\")\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .body(\"id\", equalTo(1))\n-                .body(\"name\", equalTo(\"cat\"));\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/pettypes/1\")\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .body(\"id\", equalTo(1))\n+            .body(\"name\", equalTo(\"cat\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n-    void testGetPetTypeSuccessAsVetAdmin() throws Exception {\n+    void testGetPetTypeSuccessAsVetAdmin() {\n         given(this.petTypeService.findPetTypeById(1)).willReturn(petTypes.get(0));\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/pettypes/1\")\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .body(\"id\", equalTo(1))\n-                .body(\"name\", equalTo(\"cat\"));\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/pettypes/1\")\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .body(\"id\", equalTo(1))\n+            .body(\"name\", equalTo(\"cat\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n-    void testGetPetTypeNotFound() throws Exception {\n+    void testGetPetTypeNotFound() {\n         given(this.petTypeService.findPetTypeById(-1)).willReturn(null);\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/pettypes/-1\")\n-                .then()\n-                .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/pettypes/-1\")\n+            .then()\n+            .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"OWNER_ADMIN\")\n-    void testGetAllPetTypesSuccessAsOwnerAdmin() throws Exception {\n+    void testGetAllPetTypesSuccessAsOwnerAdmin() {\n         petTypes.remove(0);\n         petTypes.remove(1);\n         given(this.petTypeService.findAllPetTypes()).willReturn(petTypes);\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/pettypes/\")\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .body(\"[0].id\", equalTo(2))\n-                .body(\"[0].name\", equalTo(\"dog\"))\n-                .body(\"[1].id\", equalTo(4))\n-                .body(\"[1].name\", equalTo(\"snake\"));\n+            .auth().oauth2(generateValidOwnerAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/pettypes/\")\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .body(\"[0].id\", equalTo(2))\n+            .body(\"[0].name\", equalTo(\"dog\"))\n+            .body(\"[1].id\", equalTo(4))\n+            .body(\"[1].name\", equalTo(\"snake\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n-    void testGetAllPetTypesSuccessAsVetAdmin() throws Exception {\n+    void testGetAllPetTypesSuccessAsVetAdmin() {\n         petTypes.remove(0);\n         petTypes.remove(1);\n         given(this.petTypeService.findAllPetTypes()).willReturn(petTypes);\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/pettypes/\")\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .body(\"[0].id\", equalTo(2))\n-                .body(\"[0].name\", equalTo(\"dog\"))\n-                .body(\"[1].id\", equalTo(4))\n-                .body(\"[1].name\", equalTo(\"snake\"));\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/pettypes/\")\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .body(\"[0].id\", equalTo(2))\n+            .body(\"[0].name\", equalTo(\"dog\"))\n+            .body(\"[1].id\", equalTo(4))\n+            .body(\"[1].name\", equalTo(\"snake\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n-    void testGetAllPetTypesNotFound() throws Exception {\n+    void testGetAllPetTypesNotFound() {\n         petTypes.clear();\n         given(this.petTypeService.findAllPetTypes()).willReturn(petTypes);\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .when()\n-                .get(\"/api/pettypes/\")\n-                .then()\n-                .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .when()\n+            .get(\"/api/pettypes/\")\n+            .then()\n+            .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testCreatePetTypeSuccess() throws Exception {\n         PetType newPetType = petTypes.get(0);\n         newPetType.setId(999);\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetTypeAsJSON = mapper.writeValueAsString(newPetType);\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newPetTypeAsJSON)\n-                .when()\n-                .post(\"/api/pettypes/\")\n-                .then()\n-                .statusCode(Response.Status.CREATED.getStatusCode());\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newPetTypeAsJSON)\n+            .when()\n+            .post(\"/api/pettypes/\")\n+            .then()\n+            .statusCode(Response.Status.CREATED.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testCreatePetTypeError() throws Exception {\n         PetType newPetType = petTypes.get(0);\n         newPetType.setId(null);\n         newPetType.setName(null);\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetTypeAsJSON = mapper.writeValueAsString(newPetType);\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newPetTypeAsJSON)\n-                .when()\n-                .post(\"/api/pettypes/\")\n-                .then()\n-                .statusCode(Response.Status.BAD_REQUEST.getStatusCode());\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newPetTypeAsJSON)\n+            .when()\n+            .post(\"/api/pettypes/\")\n+            .then()\n+            .statusCode(Response.Status.BAD_REQUEST.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testUpdatePetTypeSuccess() throws Exception {\n         given(this.petTypeService.findPetTypeById(2)).willReturn(petTypes.get(1));\n         PetType newPetType = petTypes.get(1);\n         newPetType.setName(\"dog I\");\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetTypeAsJSON = mapper.writeValueAsString(newPetType);\n         given()\n-                .auth().basic(\"admin\", \"admin\")\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newPetTypeAsJSON)\n-                .when()\n-                .put(\"/api/pettypes/2\")\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newPetTypeAsJSON)\n+            .when()\n+            .put(\"/api/pettypes/2\")\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n \n \n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .when()\n-                .get(\"/api/pettypes/2\")\n-                .then()\n-                .contentType(ContentType.JSON)\n-                .statusCode(Response.Status.OK.getStatusCode())\n-                .body(\"id\", equalTo(2))\n-                .body(\"name\", equalTo(\"dog I\"));\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .when()\n+            .get(\"/api/pettypes/2\")\n+            .then()\n+            .contentType(ContentType.JSON)\n+            .statusCode(Response.Status.OK.getStatusCode())\n+            .body(\"id\", equalTo(2))\n+            .body(\"name\", equalTo(\"dog I\"));\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testUpdatePetTypeError() throws Exception {\n         PetType newPetType = petTypes.get(0);\n         newPetType.setName(\"\");\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetTypeAsJSON = mapper.writeValueAsString(newPetType);\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newPetTypeAsJSON)\n-                .when()\n-                .put(\"/api/pettypes/1\")\n-                .then()\n-                .statusCode(Response.Status.BAD_REQUEST.getStatusCode());\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newPetTypeAsJSON)\n+            .when()\n+            .put(\"/api/pettypes/1\")\n+            .then()\n+            .statusCode(Response.Status.BAD_REQUEST.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testDeletePetTypeSuccess() throws Exception {\n         PetType newPetType = petTypes.get(0);\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetTypeAsJSON = mapper.writeValueAsString(newPetType);\n         given(this.petTypeService.findPetTypeById(1)).willReturn(petTypes.get(0));\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newPetTypeAsJSON)\n-                .when()\n-                .delete(\"/api/pettypes/1\")\n-                .then()\n-                .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newPetTypeAsJSON)\n+            .when()\n+            .delete(\"/api/pettypes/1\")\n+            .then()\n+            .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testDeletePetTypeError() throws Exception {\n         PetType newPetType = petTypes.get(0);\n         ObjectMapper mapper = new ObjectMapper();\n         String newPetTypeAsJSON = mapper.writeValueAsString(newPetType);\n         given(this.petTypeService.findPetTypeById(-1)).willReturn(null);\n         given()\n-                .auth().none()\n-                .accept(ContentType.JSON)\n-                .contentType(ContentType.JSON)\n-                .body(newPetTypeAsJSON)\n-                .when()\n-                .delete(\"/api/pettypes/-1\")\n-                .then()\n-                .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n+            .auth().oauth2(generateValidVetAdminToken())\n+            .accept(ContentType.JSON)\n+            .contentType(ContentType.JSON)\n+            .body(newPetTypeAsJSON)\n+            .when()\n+            .delete(\"/api/pettypes/-1\")\n+            .then()\n+            .statusCode(Response.Status.NOT_FOUND.getStatusCode());\n     }\n-\n }"
  },
  {
    "sha": "5480b4ab09206681a52dd1f22094bc63366f75ae",
    "filename": "pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/security/GenerateTokenTest.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/security/GenerateTokenTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/security/GenerateTokenTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pettypes/src/test/java/com/mpbauer/serverless/samples/petclinic/pettypes/security/GenerateTokenTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,62 @@\n+package com.mpbauer.serverless.samples.petclinic.pettypes.security;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.smallrye.jwt.build.Jwt;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+/**\n+ * A simple utility class to generate and print a JWT token string to stdout.\n+ */\n+@QuarkusTest\n+@Disabled(\"Enable for JWT Token generation\")\n+class GenerateTokenTest {\n+\n+    // Token expires after 100 years\n+    private static final Duration TOKEN_EXPIRATION = Duration.ofDays(ChronoUnit.DAYS.between(LocalDateTime.now(), LocalDateTime.now().plusYears(100)));\n+\n+    /**\n+     * Generate JWT token\n+     */\n+    @Test\n+    void generateOwnerAdminToken() {\n+        String token = Jwt.groups(Roles.OWNER_ADMIN)\n+            .subject(\"X00001\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateVetAdminToken() {\n+        String token = Jwt.groups(Roles.VET_ADMIN)\n+            .subject(\"X00002\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateAdminToken() {\n+        String token = Jwt.groups(Roles.ADMIN)\n+            .subject(\"X00003\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateTokenWithAllRoles() {\n+        String token = Jwt.groups(new HashSet<>(Arrays.asList(Roles.ADMIN, Roles.OWNER_ADMIN, Roles.VET_ADMIN)))\n+            .subject(\"X00004\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+}"
  },
  {
    "sha": "e17105ef87edb029dbce812368f90ad8aa8b8b19",
    "filename": "pettypes/src/test/resources/privateKey.pem",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/test/resources/privateKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/pettypes/src/test/resources/privateKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/pettypes/src/test/resources/privateKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDZLUil2dLFp5qj\n+5N2MlqUY1b2bNiyyprHpbqCgyk2g8XTIPGddAgjbyVsoUPHejyq1q45VY572mrXT\n+B4f5Dn9k9tARkMNqFm/MhKpdJ6Wd5CGdaiUdTPohp0jMXUea5I+7czDoUamLvI4W\n+IX7E9WBSs27/veqWhhw3PkBRooiExMMv+wG+TqTtVEkqrsQh6O45knx2mZGvZm32\n+q7RnTRwWnitphG8TbxOiW2Nx6KMvH/WDUTBV3KZH0ktbGBmbrFnWUmGbkcH+Nd6L\n+mNBSV2mYiZNhzLigIdRp0E85KfaPW+bXuSxz4pA2zMdSo6biG4wJXkuydxrQ7DhS\n+ICcCxgK9AgMBAAECggEARop96Vj6LDdHdGq3R5363Dk4z/xlwlWAvkivpepwEpG7\n+E/sCu+QYSoN5t3urRFYOUln57mRgUstnubbdhJkf6gR9CueRgZjuEWkaCQ4CrmlW\n+PdInYgAJ0vqKG89EndwVj5ZX0W4M+xVwtWGF0qW89r/PkwP1+ZRv/8WZkKqRW0YQ\n+ntONpEPfqtDVUSpd/vh+YBdRafYqo3tBs4s1pmWxm2rYVDsaMZ0dakLOdLjeOsA4\n+ySK8YpM9hTjjUWu1Ma/BdEXdjbYkJvxy68lwECTxQgtNkJirkPD28TnFn0nLfSpS\n+5IXIO5jrOnB30ihx+2gIUYbP/LJKEDG1MUMt0zsFxQKBgQD3yWlN99hIQm43kiqJ\n+HysfzlPyitG6a+pXN6lQscQk7TPHhnqW+pQwCrw0aO1u12bGCmWn5bUt+Vl9Wwu/\n+33eG35jDmTSKLnAwlhGbV/nNcfNqBvNpcPw9GMY7n+qOfTq/AI4W1J9rTqN11NC8\n+WzhNKcGO4+nzCcRiyYQDw0yumwKBgQDgYCIR90tSQbZV4U1p3EOUqZdkx++RZWZO\n+rphBtDhUjicnuzb8LcnujjoMJym1xbiKpmutUYc1b40Dm+HkFDO6XrkdPRdiTGEt\n+qV/b+kse+JR1Yp1q0yopk3BidAKCScnktmm+VPy1k6hSstgGiZr75K+KSoBTjyos\n+r/FgtWE9hwKBgQDFdqHPu5qFg0MYUAhLvCX+s8ucdtpKKOPYW4g3wWKhVtKzx8x7\n+8vcTDgsL7S6B7XB+lByM33cySwrw5hSH9MrpFdlEzxvansVTQtSHKmXtPkkQDrf+\n+KEcrXUnkjD09Djk5q3SQZyMgPcvwBAfQgxVsEMGqYKC4yOjTHOpyoTnDzwKBgQCt\n+yohZNhyHSBK9Dlfx6QQHgBydmSd8jPfjdeTE75y6EalOYvpB9g1004EurJ7oBo/c\n+BO9ePcnmn9KvuuwKx4MRlhD4DruwDc0vmwN+1a2d/ZiwG4QmnA0KSwM/nu/ajuDs\n+YEYjgJyE4Cv+cjxVQ/xho048ZVxkXH2kQ1tJNvRsvQKBgQDXdSTrF0FOqSL+o9NZ\n+mKytR4Ee1uYLToQjUgpvJra9mVoXoczciAuoCYOyT5l3uRxqYC6A3Fnzf4dddENL\n+nyOPEYhZpEMOE9XOFoC5LE5i5z/MXd5rnHKszxeOWXjBF7jKTKiTAF66tGBeVqEh\n+pG+nJC+tEOiafTJVXNqhJWcUFg==\n+-----END PRIVATE KEY-----"
  },
  {
    "sha": "70053fdcf9d32bc0c28bab024f8314ebadf0c845",
    "filename": "specialties/src/main/resources/META-INF/resources/publicKey.pem",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/main/resources/META-INF/resources/publicKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/main/resources/META-INF/resources/publicKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/specialties/src/main/resources/META-INF/resources/publicKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,9 @@\n+-----BEGIN PUBLIC KEY-----\n+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2S1IpdnSxaeao+TdjJal\n+GNW9mzYssqax6W6goMpNoPF0yDxnXQII28lbKFDx3o8qtauOVWOe9pq10weH+Q5/\n+ZPbQEZDDahZvzISqXSelneQhnWolHUz6IadIzF1HmuSPu3Mw6FGpi7yOFiF+xPVg\n+UrNu/73qloYcNz5AUaKIhMTDL/sBvk6k7VRJKq7EIejuOZJ8dpmRr2Zt9qu0Z00c\n+Fp4raYRvE28ToltjceijLx/1g1EwVdymR9JLWxgZm6xZ1lJhm5HB/jXei5jQUldp\n+mImTYcy4oCHUadBPOSn2j1vm17ksc+KQNszHUqOm4huMCV5Lsnca0Ow4UiAnAsYC\n+vQIDAQAB\n+-----END PUBLIC KEY-----"
  },
  {
    "sha": "7c6c2715ae92e398ae0dc344db35fc48d05a8614",
    "filename": "specialties/src/main/resources/application.properties",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/main/resources/application.properties",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/specialties/src/main/resources/application.properties?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -16,7 +16,18 @@ quarkus.shutdown.timeout=3\n # ----------------------------------------------------------- #\n \n # Enable/Disable Security for Petclinic Application\n-petclinic.security.enable=false\n+petclinic.security.enable=true\n+%dev.petclinic.security.enable=false\n+%test.petclinic.security.enable=true\n+\n+mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem\n+mp.jwt.verify.issuer=https://spring-petclinic.github.io/issuer\n+\n+# Private signing key to generate and sign tokens for testing\n+%test.smallrye.jwt.sign.key.location=privateKey.pem\n+\n+# Token issuer which can be used to set an iss (issuer) claim value if this claim has not already been set\n+%test.smallrye.jwt.new-token.issuer=https://spring-petclinic.github.io/issuer\n \n # CORS Header Settings\n quarkus.http.cors=true"
  },
  {
    "sha": "d20fc53b2886600669d3822ca6b8ccd9f98c839b",
    "filename": "specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/AbstractIntegrationTest.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/AbstractIntegrationTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/AbstractIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/AbstractIntegrationTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,27 @@\n+package com.mpbauer.serverless.samples.petclinic.specialties;\n+\n+import com.mpbauer.serverless.samples.petclinic.specialties.security.Roles;\n+import io.smallrye.jwt.build.Jwt;\n+\n+public abstract class AbstractIntegrationTest {\n+\n+    protected String generateValidOwnerAdminToken() {\n+        return Jwt\n+            .subject(\"X00001\")\n+            .groups(Roles.OWNER_ADMIN).sign();\n+    }\n+\n+    protected String generateValidVetAdminToken() {\n+        return Jwt\n+            .subject(\"X00002\")\n+            .groups(Roles.VET_ADMIN)\n+            .sign();\n+    }\n+\n+    protected String generateValidAdminToken() {\n+        return Jwt\n+            .subject(\"X00003\")\n+            .groups(Roles.ADMIN)\n+            .sign();\n+    }\n+}"
  },
  {
    "sha": "06b47f589040021e9659c629a05625aa6a38292c",
    "filename": "specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/rest/SpecialtyRestControllerTests.java",
    "status": "modified",
    "additions": 17,
    "deletions": 27,
    "changes": 44,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/rest/SpecialtyRestControllerTests.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/rest/SpecialtyRestControllerTests.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/rest/SpecialtyRestControllerTests.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -17,6 +17,7 @@\n package com.mpbauer.serverless.samples.petclinic.specialties.rest;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mpbauer.serverless.samples.petclinic.specialties.AbstractIntegrationTest;\n import com.mpbauer.serverless.samples.petclinic.specialties.model.Specialty;\n import com.mpbauer.serverless.samples.petclinic.specialties.service.SpecialtyService;\n import io.quarkus.test.common.QuarkusTestResource;\n@@ -42,8 +43,7 @@\n  */\n @QuarkusTest\n @QuarkusTestResource(H2DatabaseTestResource.class)\n-    // TODO check if necessary for native image build\n-class SpecialtyRestControllerTests {\n+class SpecialtyRestControllerTests extends AbstractIntegrationTest {\n \n     @InjectMock\n     SpecialtyService specialtyService;\n@@ -71,11 +71,10 @@ public void initSpecialtys() {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n-    void testGetSpecialtySuccess() throws Exception {\n+    void testGetSpecialtySuccess() {\n         given(this.specialtyService.findSpecialtyById(1)).willReturn(specialties.get(0));\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .when()\n             .get(\"/api/specialties/1\")\n@@ -87,11 +86,10 @@ void testGetSpecialtySuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n-    void testGetSpecialtyNotFound() throws Exception {\n+    void testGetSpecialtyNotFound() {\n         given(this.specialtyService.findSpecialtyById(-1)).willReturn(null);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .when()\n             .get(\"/api/specialties/-1\")\n@@ -100,12 +98,11 @@ void testGetSpecialtyNotFound() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n-    void testGetAllSpecialtysSuccess() throws Exception {\n+    void testGetAllSpecialtysSuccess() {\n         specialties.remove(0);\n         given(this.specialtyService.findAllSpecialties()).willReturn(specialties);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .when()\n             .get(\"/api/specialties/\")\n@@ -119,12 +116,11 @@ void testGetAllSpecialtysSuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n-    void testGetAllSpecialtysNotFound() throws Exception {\n+    void testGetAllSpecialtysNotFound() {\n         specialties.clear();\n         given(this.specialtyService.findAllSpecialties()).willReturn(specialties);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .when()\n             .get(\"/api/specialties/\")\n@@ -133,14 +129,13 @@ void testGetAllSpecialtysNotFound() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testCreateSpecialtySuccess() throws Exception {\n         Specialty newSpecialty = specialties.get(0);\n         newSpecialty.setId(999);\n         ObjectMapper mapper = new ObjectMapper();\n         String newSpecialtyAsJSON = mapper.writeValueAsString(newSpecialty);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newSpecialtyAsJSON)\n@@ -151,15 +146,14 @@ void testCreateSpecialtySuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testCreateSpecialtyError() throws Exception {\n         Specialty newSpecialty = specialties.get(0);\n         newSpecialty.setId(null);\n         newSpecialty.setName(null);\n         ObjectMapper mapper = new ObjectMapper();\n         String newSpecialtyAsJSON = mapper.writeValueAsString(newSpecialty);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newSpecialtyAsJSON)\n@@ -170,7 +164,6 @@ void testCreateSpecialtyError() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testUpdateSpecialtySuccess() throws Exception {\n         given(this.specialtyService.findSpecialtyById(2)).willReturn(specialties.get(1));\n         Specialty newSpecialty = specialties.get(1);\n@@ -179,7 +172,7 @@ void testUpdateSpecialtySuccess() throws Exception {\n         String newSpecialtyAsJSON = mapper.writeValueAsString(newSpecialty);\n \n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newSpecialtyAsJSON)\n@@ -190,7 +183,7 @@ void testUpdateSpecialtySuccess() throws Exception {\n             .statusCode(Response.Status.NO_CONTENT.getStatusCode());\n \n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .when()\n@@ -203,14 +196,13 @@ void testUpdateSpecialtySuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testUpdateSpecialtyError() throws Exception {\n         Specialty newSpecialty = specialties.get(0);\n         newSpecialty.setName(\"\");\n         ObjectMapper mapper = new ObjectMapper();\n         String newSpecialtyAsJSON = mapper.writeValueAsString(newSpecialty);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newSpecialtyAsJSON)\n@@ -221,14 +213,13 @@ void testUpdateSpecialtyError() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testDeleteSpecialtySuccess() throws Exception {\n         Specialty newSpecialty = specialties.get(0);\n         ObjectMapper mapper = new ObjectMapper();\n         String newSpecialtyAsJSON = mapper.writeValueAsString(newSpecialty);\n         given(this.specialtyService.findSpecialtyById(1)).willReturn(specialties.get(0));\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newSpecialtyAsJSON)\n@@ -239,14 +230,13 @@ void testDeleteSpecialtySuccess() throws Exception {\n     }\n \n     @Test\n-        //@WithMockUser(roles=\"VET_ADMIN\")\n     void testDeleteSpecialtyError() throws Exception {\n         Specialty newSpecialty = specialties.get(0);\n         ObjectMapper mapper = new ObjectMapper();\n         String newSpecialtyAsJSON = mapper.writeValueAsString(newSpecialty);\n         given(this.specialtyService.findSpecialtyById(-1)).willReturn(null);\n         given()\n-            .auth().none()\n+            .auth().oauth2(generateValidVetAdminToken())\n             .accept(ContentType.JSON)\n             .contentType(ContentType.JSON)\n             .body(newSpecialtyAsJSON)"
  },
  {
    "sha": "43bb383e90882d232d424aea7b79a23be7c1c8ca",
    "filename": "specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/security/GenerateTokenTest.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/security/GenerateTokenTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/security/GenerateTokenTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/specialties/src/test/java/com/mpbauer/serverless/samples/petclinic/specialties/security/GenerateTokenTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,62 @@\n+package com.mpbauer.serverless.samples.petclinic.specialties.security;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.smallrye.jwt.build.Jwt;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+/**\n+ * A simple utility class to generate and print a JWT token string to stdout.\n+ */\n+@QuarkusTest\n+@Disabled(\"Enable for JWT Token generation\")\n+class GenerateTokenTest {\n+\n+    // Token expires after 100 years\n+    private static final Duration TOKEN_EXPIRATION = Duration.ofDays(ChronoUnit.DAYS.between(LocalDateTime.now(), LocalDateTime.now().plusYears(100)));\n+\n+    /**\n+     * Generate JWT token\n+     */\n+    @Test\n+    void generateOwnerAdminToken() {\n+        String token = Jwt.groups(Roles.OWNER_ADMIN)\n+            .subject(\"X00001\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateVetAdminToken() {\n+        String token = Jwt.groups(Roles.VET_ADMIN)\n+            .subject(\"X00002\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateAdminToken() {\n+        String token = Jwt.groups(Roles.ADMIN)\n+            .subject(\"X00003\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+\n+    @Test\n+    void generateTokenWithAllRoles() {\n+        String token = Jwt.groups(new HashSet<>(Arrays.asList(Roles.ADMIN, Roles.OWNER_ADMIN, Roles.VET_ADMIN)))\n+            .subject(\"X00004\")\n+            .expiresIn(TOKEN_EXPIRATION)\n+            .sign();\n+        System.out.println(token);\n+    }\n+}"
  },
  {
    "sha": "e17105ef87edb029dbce812368f90ad8aa8b8b19",
    "filename": "specialties/src/test/resources/privateKey.pem",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/test/resources/privateKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/specialties/src/test/resources/privateKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/specialties/src/test/resources/privateKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDZLUil2dLFp5qj\n+5N2MlqUY1b2bNiyyprHpbqCgyk2g8XTIPGddAgjbyVsoUPHejyq1q45VY572mrXT\n+B4f5Dn9k9tARkMNqFm/MhKpdJ6Wd5CGdaiUdTPohp0jMXUea5I+7czDoUamLvI4W\n+IX7E9WBSs27/veqWhhw3PkBRooiExMMv+wG+TqTtVEkqrsQh6O45knx2mZGvZm32\n+q7RnTRwWnitphG8TbxOiW2Nx6KMvH/WDUTBV3KZH0ktbGBmbrFnWUmGbkcH+Nd6L\n+mNBSV2mYiZNhzLigIdRp0E85KfaPW+bXuSxz4pA2zMdSo6biG4wJXkuydxrQ7DhS\n+ICcCxgK9AgMBAAECggEARop96Vj6LDdHdGq3R5363Dk4z/xlwlWAvkivpepwEpG7\n+E/sCu+QYSoN5t3urRFYOUln57mRgUstnubbdhJkf6gR9CueRgZjuEWkaCQ4CrmlW\n+PdInYgAJ0vqKG89EndwVj5ZX0W4M+xVwtWGF0qW89r/PkwP1+ZRv/8WZkKqRW0YQ\n+ntONpEPfqtDVUSpd/vh+YBdRafYqo3tBs4s1pmWxm2rYVDsaMZ0dakLOdLjeOsA4\n+ySK8YpM9hTjjUWu1Ma/BdEXdjbYkJvxy68lwECTxQgtNkJirkPD28TnFn0nLfSpS\n+5IXIO5jrOnB30ihx+2gIUYbP/LJKEDG1MUMt0zsFxQKBgQD3yWlN99hIQm43kiqJ\n+HysfzlPyitG6a+pXN6lQscQk7TPHhnqW+pQwCrw0aO1u12bGCmWn5bUt+Vl9Wwu/\n+33eG35jDmTSKLnAwlhGbV/nNcfNqBvNpcPw9GMY7n+qOfTq/AI4W1J9rTqN11NC8\n+WzhNKcGO4+nzCcRiyYQDw0yumwKBgQDgYCIR90tSQbZV4U1p3EOUqZdkx++RZWZO\n+rphBtDhUjicnuzb8LcnujjoMJym1xbiKpmutUYc1b40Dm+HkFDO6XrkdPRdiTGEt\n+qV/b+kse+JR1Yp1q0yopk3BidAKCScnktmm+VPy1k6hSstgGiZr75K+KSoBTjyos\n+r/FgtWE9hwKBgQDFdqHPu5qFg0MYUAhLvCX+s8ucdtpKKOPYW4g3wWKhVtKzx8x7\n+8vcTDgsL7S6B7XB+lByM33cySwrw5hSH9MrpFdlEzxvansVTQtSHKmXtPkkQDrf+\n+KEcrXUnkjD09Djk5q3SQZyMgPcvwBAfQgxVsEMGqYKC4yOjTHOpyoTnDzwKBgQCt\n+yohZNhyHSBK9Dlfx6QQHgBydmSd8jPfjdeTE75y6EalOYvpB9g1004EurJ7oBo/c\n+BO9ePcnmn9KvuuwKx4MRlhD4DruwDc0vmwN+1a2d/ZiwG4QmnA0KSwM/nu/ajuDs\n+YEYjgJyE4Cv+cjxVQ/xho048ZVxkXH2kQ1tJNvRsvQKBgQDXdSTrF0FOqSL+o9NZ\n+mKytR4Ee1uYLToQjUgpvJra9mVoXoczciAuoCYOyT5l3uRxqYC6A3Fnzf4dddENL\n+nyOPEYhZpEMOE9XOFoC5LE5i5z/MXd5rnHKszxeOWXjBF7jKTKiTAF66tGBeVqEh\n+pG+nJC+tEOiafTJVXNqhJWcUFg==\n+-----END PRIVATE KEY-----"
  },
  {
    "sha": "70053fdcf9d32bc0c28bab024f8314ebadf0c845",
    "filename": "users/src/main/resources/META-INF/resources/publicKey.pem",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/users/src/main/resources/META-INF/resources/publicKey.pem",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/users/src/main/resources/META-INF/resources/publicKey.pem",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/users/src/main/resources/META-INF/resources/publicKey.pem?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,9 @@\n+-----BEGIN PUBLIC KEY-----\n+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2S1IpdnSxaeao+TdjJal\n+GNW9mzYssqax6W6goMpNoPF0yDxnXQII28lbKFDx3o8qtauOVWOe9pq10weH+Q5/\n+ZPbQEZDDahZvzISqXSelneQhnWolHUz6IadIzF1HmuSPu3Mw6FGpi7yOFiF+xPVg\n+UrNu/73qloYcNz5AUaKIhMTDL/sBvk6k7VRJKq7EIejuOZJ8dpmRr2Zt9qu0Z00c\n+Fp4raYRvE28ToltjceijLx/1g1EwVdymR9JLWxgZm6xZ1lJhm5HB/jXei5jQUldp\n+mImTYcy4oCHUadBPOSn2j1vm17ksc+KQNszHUqOm4huMCV5Lsnca0Ow4UiAnAsYC\n+vQIDAQAB\n+-----END PUBLIC KEY-----"
  },
  {
    "sha": "7c6c2715ae92e398ae0dc344db35fc48d05a8614",
    "filename": "users/src/main/resources/application.properties",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/users/src/main/resources/application.properties",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/users/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/users/src/main/resources/application.properties?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -16,7 +16,18 @@ quarkus.shutdown.timeout=3\n # ----------------------------------------------------------- #\n \n # Enable/Disable Security for Petclinic Application\n-petclinic.security.enable=false\n+petclinic.security.enable=true\n+%dev.petclinic.security.enable=false\n+%test.petclinic.security.enable=true\n+\n+mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem\n+mp.jwt.verify.issuer=https://spring-petclinic.github.io/issuer\n+\n+# Private signing key to generate and sign tokens for testing\n+%test.smallrye.jwt.sign.key.location=privateKey.pem\n+\n+# Token issuer which can be used to set an iss (issuer) claim value if this claim has not already been set\n+%test.smallrye.jwt.new-token.issuer=https://spring-petclinic.github.io/issuer\n \n # CORS Header Settings\n quarkus.http.cors=true"
  },
  {
    "sha": "d8e66326ef5c26b5623afec15d849a23033c3183",
    "filename": "users/src/test/java/com/mpbauer/serverless/samples/petclinic/users/AbstractIntegrationTest.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/blob/2bbfb622bc4cb0d91714271072ec16743c9173e0/users/src/test/java/com/mpbauer/serverless/samples/petclinic/users/AbstractIntegrationTest.java",
    "raw_url": "https://github.com/mpbauer/quarkus-petclinic-rest-aws-lambda/raw/2bbfb622bc4cb0d91714271072ec16743c9173e0/users/src/test/java/com/mpbauer/serverless/samples/petclinic/users/AbstractIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/mpbauer/quarkus-petclinic-rest-aws-lambda/contents/users/src/test/java/com/mpbauer/serverless/samples/petclinic/users/AbstractIntegrationTest.java?ref=2bbfb622bc4cb0d91714271072ec16743c9173e0",
    "patch": "@@ -0,0 +1,27 @@\n+package com.mpbauer.serverless.samples.petclinic.users;\n+\n+import com.mpbauer.serverless.samples.petclinic.users.security.Roles;\n+import io.smallrye.jwt.build.Jwt;\n+\n+public abstract class AbstractIntegrationTest {\n+\n+    protected String generateValidOwnerAdminToken() {\n+        return Jwt\n+            .subject(\"X00001\")\n+            .groups(Roles.OWNER_ADMIN).sign();\n+    }\n+\n+    protected String generateValidVetAdminToken() {\n+        return Jwt\n+            .subject(\"X00002\")\n+            .groups(Roles.VET_ADMIN)\n+            .sign();\n+    }\n+\n+    protected String generateValidAdminToken() {\n+        return Jwt\n+            .subject(\"X00003\")\n+            .groups(Roles.ADMIN)\n+            .sign();\n+    }\n+}"
  }
]
