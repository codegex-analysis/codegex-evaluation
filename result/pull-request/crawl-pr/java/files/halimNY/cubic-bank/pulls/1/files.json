[
  {
    "sha": "fab830789e45b54654f48eb473b3d9cd91089890",
    "filename": "banking-api/src/main/java/com/rab3tech/employee/controller/EmployeeController.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-api/src/main/java/com/rab3tech/employee/controller/EmployeeController.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-api/src/main/java/com/rab3tech/employee/controller/EmployeeController.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-api/src/main/java/com/rab3tech/employee/controller/EmployeeController.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -61,6 +61,7 @@ public ApplicationResponseVO customerEnquiryApprove(@RequestParam int csaid,Http\n \t\tapplicationResponseVO.setMessage(\"Hi your registration link has been sent to your at email \"+customerSavingVO.getEmail());\n \t\treturn applicationResponseVO;\n \t}\n+\n \t@GetMapping(\"customer/lock/userid\")\n \tpublic String customerlock(@RequestParam(\"userid\")String userid   )  { \n \t\t customerService.updateCustomerLockStatus(userid, \"no\");    "
  },
  {
    "sha": "f5f6481af1b76c811193b4d09e52199bac9f09de",
    "filename": "banking-api/src/test/java/com/rab3tech/customer/controller/CustomerRestControllerTest.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-api/src/test/java/com/rab3tech/customer/controller/CustomerRestControllerTest.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-api/src/test/java/com/rab3tech/customer/controller/CustomerRestControllerTest.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-api/src/test/java/com/rab3tech/customer/controller/CustomerRestControllerTest.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -0,0 +1,92 @@\n+package com.rab3tech.customer.controller;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mail.javamail.JavaMailSender;\n+import org.springframework.web.bind.annotation.RequestBody;\n+\n+import com.rab3tech.customer.service.CustomerService;\n+import com.rab3tech.customer.service.LoginService;\n+import com.rab3tech.customer.service.impl.CustomerTransactionsServiceImpl;\n+import com.rab3tech.vo.ApplicationResponseVO;\n+import com.rab3tech.vo.ChangePasswordRequestVO;\n+\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CustomerRestControllerTest {\n+\t\n+\t@Mock\n+\tprivate LoginService loginService;\n+\t\n+\t@Mock\n+\tprivate JavaMailSender javaMailSender;\n+\t\n+\t@Mock\n+\tprivate CustomerService customerService;\n+\t@InjectMocks\n+      private CustomerRestController customerRestController;\n+\t\n+\t@Before\n+\tpublic void initializer(){\n+\t\n+\t\tMockitoAnnotations.initMocks(this); \n+\t}\n+\t\n+\t@Test\n+\tpublic void testUpdateCustomerPasswordIfSuccess() {\n+\t\t\n+\t\tChangePasswordRequestVO changePasswordRequestVO=new ChangePasswordRequestVO();\n+\t\tchangePasswordRequestVO.setLoginid(\"12345\");\n+\t\tchangePasswordRequestVO.setNewpassword(\"1234\");\n+\t\tchangePasswordRequestVO.setPasscode(\"1111\");\n+\t\tString status =\"success\" ;\n+\t\tApplicationResponseVO applicationResponseVO1=new ApplicationResponseVO();\n+\t\tapplicationResponseVO1.setCode(200);\n+\t\tapplicationResponseVO1.setStatus(\"success\");\n+\t\tapplicationResponseVO1.setMessage(\"Your password is updated successfully.\");\n+\t\t\n+\t\twhen( loginService.updatePassword(changePasswordRequestVO)).thenReturn(status);\n+\n+\t\tApplicationResponseVO applicationResponseVO=customerRestController.updateCustomerPassword( changePasswordRequestVO) ;\n+\t\tassertTrue(applicationResponseVO!=null);\n+\t\n+\t\tassertEquals(200, applicationResponseVO.getCode());\n+\t\tassertEquals(\"success\", applicationResponseVO.getStatus());\n+\t\tassertEquals(\"Your password is updated successfully.\", applicationResponseVO.getMessage());\n+\t}\n+\t@Test\n+\tpublic void testUpdateCustomerPasswordIfFail() {\n+\t\t\n+\t\tChangePasswordRequestVO changePasswordRequestVO=new ChangePasswordRequestVO();\n+\t\tchangePasswordRequestVO.setLoginid(\"12345\");\n+\t\tchangePasswordRequestVO.setNewpassword(\"1234\");\n+\t\tchangePasswordRequestVO.setPasscode(\"1111\");\n+\t\tString status =\"Sorry, ! your passcode is not correct!\" ;\n+\t\t\n+\t\tApplicationResponseVO applicationResponseVO1=new ApplicationResponseVO();\n+\t\tapplicationResponseVO1.setCode(0);\n+\t\tapplicationResponseVO1.setStatus(\"fail\");\n+\t\tapplicationResponseVO1.setMessage(status);\n+\t\t\n+\t\twhen( loginService.updatePassword(changePasswordRequestVO)).thenReturn(status);\n+\t\t\n+\t\tApplicationResponseVO applicationResponseVO=customerRestController.updateCustomerPassword( changePasswordRequestVO) ;\n+\t\tassertTrue(applicationResponseVO!=null);\n+\t\t\n+\t\tassertEquals(0, applicationResponseVO.getCode());\n+\t\tassertEquals(\"fail\", applicationResponseVO.getStatus());\n+\t\tassertEquals(\"Sorry, ! your passcode is not correct!\", applicationResponseVO.getMessage());\n+\t}\n+\t\n+\n+}"
  },
  {
    "sha": "5c5884fc4c9d2d1f0b98466a0fcd554bef16b0a4",
    "filename": "banking-dao/src/main/java/com/rab3tech/dao/entity/CustomerAccountInfo.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-dao/src/main/java/com/rab3tech/dao/entity/CustomerAccountInfo.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-dao/src/main/java/com/rab3tech/dao/entity/CustomerAccountInfo.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-dao/src/main/java/com/rab3tech/dao/entity/CustomerAccountInfo.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -96,7 +96,7 @@ public float getTavBalance() {\n \n \tpublic void setTavBalance(float tavBalance) {\n \t\tthis.tavBalance = tavBalance;\n-\t}\n+\t} \n \n \tpublic float getAvBalance() {\n \t\treturn avBalance;"
  },
  {
    "sha": "fb989cef6bba79c4575b8be7f8962c59ae5d2b09",
    "filename": "banking-service/src/main/java/com/rab3tech/customer/service/impl/CustomerEnquiryServiceImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/main/java/com/rab3tech/customer/service/impl/CustomerEnquiryServiceImpl.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/main/java/com/rab3tech/customer/service/impl/CustomerEnquiryServiceImpl.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-service/src/main/java/com/rab3tech/customer/service/impl/CustomerEnquiryServiceImpl.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -67,7 +67,7 @@ public CustomerSavingVO findAppStatus(String searchText){\n \t@TimeLogger\n \tpublic CustomerSavingVO save(CustomerSavingVO customerSavingVO) {\n \t\tcustomerSavingVO.setDoa(new Date());\n-\t\tcustomerSavingVO.setAppref(\"AS-\" + Utils.genRandomAlphaNum());\n+\t\tcustomerSavingVO.setAppref(\"AS-\" + Utils.genRandomAlphaNum()); \n \t\tboolean b = TransactionSynchronizationManager.isActualTransactionActive();\n \t\tif (b) {\n \t\t\tSystem.out.println(\"Ahahahahha tx is working!!!!!!!!!!!!!!\");"
  },
  {
    "sha": "5cb2020c3dfa5e786e1bb7e84f35ae4a2689866a",
    "filename": "banking-service/src/main/java/com/rab3tech/customer/service/impl/CustomerServiceImpl.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/main/java/com/rab3tech/customer/service/impl/CustomerServiceImpl.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/main/java/com/rab3tech/customer/service/impl/CustomerServiceImpl.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-service/src/main/java/com/rab3tech/customer/service/impl/CustomerServiceImpl.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -149,7 +149,7 @@ public CustomerVO createAccount(CustomerVO customerVO) {\n \t\tBeanUtils.copyProperties(customerVO, pcustomer);\n \t\tLogin login = new Login();\n \t\tlogin.setNoOfAttempt(3);\n-\t\tlogin.setLoginid(customerVO.getEmail());\n+\t\tlogin.setLoginid(customerVO.getEmail()); \n \t\tlogin.setName(customerVO.getName());\n \t\tString genPassword = PasswordGenerator.generateRandomPassword(8);\n \t\tcustomerVO.setPassword(genPassword);\n@@ -223,7 +223,7 @@ public void updateCustomerLockStatus(String userid,String status) {\n \t\t\t\t}\n \t\t }\n \t\t \n-\t\t \n+\t//\t List<CustomerVO> customerOnly =customerServiceImpl.findCustomers();\n \t\t \n \t\t return customerOnly;\n \t\t }else\n@@ -334,7 +334,7 @@ public CustomerAccountInfoVO findCustomerAccountInfo(String customerId){\n \t   accountInfoVO.setName(customerAccountInfo.getAccountType().getName());\n \t   accountInfoVO.setAcccountType(customerAccountInfo.getAccountType().getName());\n \t   \n-\t   return accountInfoVO;\n+\t   return accountInfoVO; \n    }\n \n       @Override\n@@ -343,8 +343,8 @@ public CustomerAccountInfoVO findCustomerAccountInfo(String customerId){\n \t     List<AccountTypeVO> accountsVO =  new ArrayList<AccountTypeVO>();\n \t     for(AccountType account : accounts) {\n \t\t    AccountTypeVO accountVO = new AccountTypeVO();\n-\t\t    BeanUtils.copyProperties(account, accountVO);\n-\t\t     accountsVO.add(accountVO);\n+\t\t    BeanUtils.copyProperties(account, accountVO); \n+\t\t     accountsVO.add(accountVO); \n \t      }\n     \treturn accountsVO;\n       }\n@@ -376,7 +376,7 @@ public void addPayee(PayeeInfoVO payeeInfoVO) {\n \t\t\t    piVO.setPayeeStatus(pi.getPayeeStatus().getName());\n \t\t\t    BeanUtils.copyProperties(pi, piVO);\n \t\t\t    return piVO;\n-\t\t   }).collect(Collectors.toList());\n+\t\t   }).collect(Collectors.toList()); \n \t\t   \n \t\t// List<PayeeInfo> payeeInfoList =  payeeRepository.findAll();\n /*\t\t   \n@@ -392,13 +392,13 @@ public void addPayee(PayeeInfoVO payeeInfoVO) {\n */\t   }\n \n \t @Override\n-\t public List<PayeeInfoVO> registeredPayeeList(String customerId){\n+\t public List<PayeeInfoVO> registeredPayeeList(String customerId){ \n \t\t   \n \t\t   List<PayeeInfo> payeeInfoList =  payeeRepository.findRegisteredPayee(customerId);\n \t\t   List<PayeeInfoVO> payeeInfoVOList = new ArrayList<PayeeInfoVO>();\n \t\t   for(PayeeInfo pi : payeeInfoList) {\n \t\t\t    PayeeInfoVO piVO = new PayeeInfoVO();\n-\t\t\t    piVO.setPayeeStatus(pi.getPayeeStatus().getName());\n+\t\t\t    piVO.setPayeeStatus(pi.getPayeeStatus().getName())  ;\n \t\t\t    BeanUtils.copyProperties(pi, piVO);\n \t\t\t    payeeInfoVOList.add(piVO);\n \t\t   }\n@@ -444,10 +444,8 @@ public void deletePayee(int payeeId) {\n \t@Override\n \tpublic  void deleteCustmoer(String email) {\n \t\t\n-\n \t customerRepository.deleteByEmail(email);\n-      \n-\t\n+\n \t}\n \n \t@Override\n@@ -458,7 +456,7 @@ public void deleteCustmoerAccount(long id) {\n \n \t@Override\n \tpublic CustomerVO findCustomer(String email) {\n-\t\tOptional<Customer> customer\t=customerRepository.findByEmail(email);\n+\t\tOptional<Customer> customer\t=customerRepository.findByEmail(email); \n \t\t CustomerVO customerVO = null;\n \t\t   if(customer.isPresent()) {\n \t\t\t   customerVO = new CustomerVO();"
  },
  {
    "sha": "dde04e9d2808dd1185e0d9970df049063c6ee802",
    "filename": "banking-service/src/main/java/com/rab3tech/vo/CustomerAccountInfoVO.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/main/java/com/rab3tech/vo/CustomerAccountInfoVO.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/main/java/com/rab3tech/vo/CustomerAccountInfoVO.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-service/src/main/java/com/rab3tech/vo/CustomerAccountInfoVO.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -22,7 +22,7 @@ public String getAcccountType() {\n \t}\n \n \tpublic void setAcccountType(String acccountType) {\n-\t\tthis.acccountType = acccountType;\n+\t\tthis.acccountType = acccountType; \n \t}\n \n \tpublic String getName() {"
  },
  {
    "sha": "e857243bfd6bac0e5de23931ed7566af640258f0",
    "filename": "banking-service/src/main/java/com/rab3tech/vo/CustomerTransactionVO.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/main/java/com/rab3tech/vo/CustomerTransactionVO.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/main/java/com/rab3tech/vo/CustomerTransactionVO.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-service/src/main/java/com/rab3tech/vo/CustomerTransactionVO.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -15,8 +15,15 @@\n     private String transactionSchedule;\n     private String txStatus;\n     private String bankName;\n+    private String transactionId;\n \t\n-    public int getTxid() {\n+    public String getTransactionId() {\n+\t\treturn transactionId;\n+\t}\n+\tpublic void setTransactionId(String transactionId) {\n+\t\tthis.transactionId = transactionId;\n+\t}\n+\tpublic int getTxid() {\n \t\treturn txid;\n \t}\n \tpublic void setTxid(int txid) {"
  },
  {
    "sha": "44a93a83d4baa695dac5e790fc71c7ddd1148cd2",
    "filename": "banking-service/src/test/java/com/rab3tech/customer/service/impl/CustomerServiceImplTest.java",
    "status": "added",
    "additions": 237,
    "deletions": 0,
    "changes": 237,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/test/java/com/rab3tech/customer/service/impl/CustomerServiceImplTest.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/test/java/com/rab3tech/customer/service/impl/CustomerServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-service/src/test/java/com/rab3tech/customer/service/impl/CustomerServiceImplTest.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -0,0 +1,237 @@\n+package com.rab3tech.customer.service.impl;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+\n+import com.rab3tech.admin.dao.repository.AccountStatusRepository;\n+import com.rab3tech.admin.dao.repository.AccountTypeRepository;\n+import com.rab3tech.admin.dao.repository.MagicCustomerRepository;\n+import com.rab3tech.customer.dao.repository.CustomerAccountApprovedRepository;\n+import com.rab3tech.customer.dao.repository.CustomerAccountEnquiryRepository;\n+import com.rab3tech.customer.dao.repository.CustomerAccountInfoRepository;\n+import com.rab3tech.customer.dao.repository.CustomerRepository;\n+import com.rab3tech.customer.dao.repository.CustomerTransactionRepository;\n+import com.rab3tech.customer.dao.repository.LoginRepository;\n+import com.rab3tech.customer.dao.repository.PayeeRepository;\n+import com.rab3tech.customer.dao.repository.RoleRepository;\n+import com.rab3tech.dao.entity.AccountType;\n+import com.rab3tech.dao.entity.Customer;\n+import com.rab3tech.dao.entity.CustomerAccountInfo;\n+import com.rab3tech.dao.entity.Login;\n+import com.rab3tech.dao.entity.PayeeInfo;\n+import com.rab3tech.dao.entity.PayeeStatus;\n+import com.rab3tech.dao.entity.Role;\n+import com.rab3tech.email.service.EmailService;\n+import com.rab3tech.vo.CustomerAccountInfoVO;\n+import com.rab3tech.vo.CustomerVO;\n+import com.rab3tech.vo.PayeeInfoVO;\n+\n+public class CustomerServiceImplTest {\n+\t@Mock\n+\tprivate MagicCustomerRepository customerRepository;\n+\n+\t@Mock\n+\tprivate RoleRepository roleRepository;\n+\n+\t@Mock\n+\tprivate AccountStatusRepository accountStatusRepository;\n+\n+\t@Mock\n+\tprivate AccountTypeRepository accountTypeRepository;\n+\n+\t@Mock\n+\tprivate BCryptPasswordEncoder bCryptPasswordEncoder;\n+\n+\t@Mock\n+\tprivate CustomerAccountEnquiryRepository customerAccountEnquiryRepository;\n+\n+\t@Mock\n+\tprivate CustomerAccountApprovedRepository customerAccountApprovedRepository;\n+\n+\t@Mock\n+\tprivate CustomerAccountInfoRepository customerAccountInfoRepository;\n+\t\n+\t@Mock\n+\tprivate CustomerRepository CustomerRepository;\n+\t\n+\t@Mock\n+\tprivate PayeeRepository payeeRepository;\n+\t\n+\t@Mock\n+\tprivate EmailService emailService;\n+\t\n+\t@Mock\n+\tprivate LoginRepository loginRepository;\n+\t//@Autowired\n+\t//private CustomerTransaction customerTransaction ;\n+\t@Mock\n+\tprivate CustomerTransactionRepository customerTransactionRepository ;\n+\t\n+\t@InjectMocks CustomerServiceImpl customerServiceImpl;\n+\t@Before\n+\tpublic void initializer(){\n+\t\n+\t\tMockitoAnnotations.initMocks(this); \n+\t}\n+\t@Test\n+\tpublic void  testShowCustomer() {\n+\t\t\n+\t\tList<Customer> customers = new ArrayList<Customer>() ;\t\n+\t//----------------------------------------------------\t\n+\t\tCustomer customer1 = new Customer();\t\n+\t\tSet<Role>  roles = new HashSet<>(); \n+\t\tRole Role = new Role();\n+\t\tRole.setRid(3);\n+\t\troles.add(Role);\n+\t\tOptional<Login> login=Optional.of(new Login());\t\n+\t\tlogin.get().setRoles(roles);\n+\t\t\n+\t\tcustomer1.setId(111);\n+\t\tcustomer1.setAge(23);\n+\t\tcustomer1.setGender(\"mal\");\n+\t\tcustomer1.setEmail(\"test@gmail.com\");\n+\t\tcustomer1.setLogin(login.get());\n+\t\tcustomers.add(customer1);\n+\n+\t\twhen(loginRepository.findByLoginid(\"test@gmail.com\")).thenReturn(login);\n+\t\n+\t//----------------------------------------------------\t\t\n+\t\n+\t\tCustomer customer2 = new Customer();\n+\t\tcustomer2.setId(222);\n+\t\tcustomer2.setAge(33);\n+\t\tcustomer2.setGender(\"mal\");\n+\t\tcustomer2.setEmail(\"walid@gmail.com\");\n+\t\tSet<Role>  roles1 = new HashSet<>(); \n+\t\tRole Role1 = new Role();\n+\t\tRole1.setRid(3);\n+\t\troles1.add(Role1);\n+\t\tOptional<Login> login1=Optional.of(new Login());\t\n+\t\tlogin1.get().setRoles(roles1);\n+\t\tcustomer2.setLogin(login1.get());\n+\t\tcustomers.add(customer2);\n+\n+\twhen(loginRepository.findByLoginid(\"walid@gmail.com\")).thenReturn(login1);\n+\t//----------------------------------------------------\t\t\t\n+\n+\t\n+\t  \n+\t\twhen(customerRepository.findAll()).thenReturn(customers);\n+\t\t\n+\t\tList<CustomerVO> customerOnly =customerServiceImpl.findCustomers();\n+\t\tassertTrue(customerOnly!=null);\n+\t\tassertTrue(customerOnly.size()==2);\n+\t\tassertEquals(\"test@gmail.com\", customerOnly.get(0).getEmail());\n+\t\tassertEquals(111, customerOnly.get(0).getId() );\n+\t\tassertEquals(23, customerOnly.get(0).getAge() );\n+\t\t\n+\t\tassertEquals(\"walid@gmail.com\", customerOnly.get(1).getEmail());\n+\t\tassertEquals(222, customerOnly.get(1).getId() );\n+\t    assertEquals(33, customerOnly.get(1).getAge() ); \t \n+\t}\n+\t\n+\t@Test\n+\tpublic void  testCustomersListEqualNull() {\n+\t\t\n+\t\tList<Customer> customers = new ArrayList<Customer>() ;\t\n+\t\tcustomers=null;\n+\t\twhen(customerRepository.findAll()).thenReturn(customers);\n+\t\tList<CustomerVO> customerOnly =customerServiceImpl.findCustomers();\n+\n+\n+\t\t  assertEquals(null, customerOnly );\n+\t}\n+\t@Test\n+\tpublic void  testRegisteredPayeeList() {\n+\t\t List<PayeeInfo> payeeInfoList = new ArrayList<PayeeInfo>() ;\n+\t\t PayeeStatus PayeeStatus =new PayeeStatus();\n+\t\t PayeeStatus.setId(11);\n+\t\t PayeeStatus.setName(\"saving\");\n+\t\t PayeeStatus.setCode(\"12345\");\n+\t\t \n+\t\t PayeeStatus PayeeStatus1 =new PayeeStatus(); \n+\t\t PayeeStatus1.setId(22);\n+\t\t PayeeStatus1.setName(\"cheking\");\n+\t\t PayeeStatus1.setCode(\"45678\");\n+\t\t \n+\t\tPayeeInfo payeeInfo1 = new PayeeInfo();\n+\t\tpayeeInfo1.setId(111);\n+\t\tpayeeInfo1.setPayeeName(\"halim\");\n+\t\tpayeeInfo1.setPayeeAccountNo(\"12121234\");\n+\t\tpayeeInfo1.setPayeeStatus(PayeeStatus);\n+\t\n+\t\t\n+\t\tPayeeInfo payeeInfo2 = new PayeeInfo() ;\n+\t\tpayeeInfo2.setId(222);\n+\t\tpayeeInfo2.setPayeeName(\"walid\");\n+\t\tpayeeInfo2.setPayeeAccountNo(\"23232323\");\t\n+\t\tpayeeInfo2.setPayeeStatus(PayeeStatus1);\n+\t\t\n+\t\t\n+\t\tpayeeInfoList.add(payeeInfo1);\n+\t\tpayeeInfoList.add(payeeInfo2);\n+\t\t\n+\t\t\n+\t\tString customerId=\"123\";\n+\t\t \n+\t\t \n+\t\t  when( payeeRepository.findRegisteredPayee(customerId)).thenReturn(payeeInfoList); \n+\t\t  \n+\t\t  \n+\t\t  \n+\t\t  List<PayeeInfoVO> payeeInfoVOList = customerServiceImpl.registeredPayeeList(customerId) ;\n+\t\t\n+\t\t assertTrue(payeeInfoVOList!=null);\n+\t\t\tassertTrue(payeeInfoVOList.size()==2);\n+\t\t\tassertEquals(\"12121234\", payeeInfoVOList.get(0).getPayeeAccountNo()) ;\n+\t\t\tassertEquals(111, payeeInfoVOList.get(0).getId() );\n+\t\t\tassertEquals(\"halim\", payeeInfoVOList.get(0).getPayeeName());\n+\t\t\t\n+\t\t\tassertEquals(\"23232323\", payeeInfoVOList.get(1).getPayeeAccountNo());\n+\t\t\tassertEquals(222, payeeInfoVOList.get(1).getId() );\n+\t\t\tassertEquals(\"walid\", payeeInfoVOList.get(1).getPayeeName());\n+\t\n+\t}\n+\t\n+\n+\t@Test\n+\tpublic void  testFindCustomerAccountInfo() {\n+\t\tAccountType AccountType = new AccountType();\n+\t\tAccountType.setCode(\"5684\");\n+\t\tAccountType.setName(\"saving\");\n+\t\tAccountType.setDescription(\"des\");\n+\t\n+\t\t   Optional<CustomerAccountInfo> customerAccountInfo=Optional.of(new CustomerAccountInfo());\n+\t\t   customerAccountInfo.get().setAccountNumber(\"1232343456\");\n+\t\t   customerAccountInfo.get().setAvBalance(1000);\n+\t\t   customerAccountInfo.get().setBranch(\"Fremont\");\n+\t\t   customerAccountInfo.get().setAccountType(AccountType);\t\n+\t\t  \n+\t\twhen( customerAccountInfoRepository.findByLoginId(\"3333\")).thenReturn(customerAccountInfo);\n+\t\t CustomerAccountInfoVO accountInfoVO =customerServiceImpl.findCustomerAccountInfo(\"3333\");\n+\t\t assertTrue(accountInfoVO!=null); \n+\n+\t\t\tassertEquals(\"1232343456\", accountInfoVO.getAccountNumber()) ;\n+\t\t\tassertEquals(\"Fremont\", accountInfoVO.getBranch()) ; \n+\t\t \n+\t}\n+\n+}"
  },
  {
    "sha": "fb361468e53fe24bfc3bad516103fc18cc435fff",
    "filename": "banking-service/src/test/java/com/rab3tech/customer/service/impl/CustomerTransactionsServiceImplTest.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/test/java/com/rab3tech/customer/service/impl/CustomerTransactionsServiceImplTest.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-service/src/test/java/com/rab3tech/customer/service/impl/CustomerTransactionsServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-service/src/test/java/com/rab3tech/customer/service/impl/CustomerTransactionsServiceImplTest.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -0,0 +1,85 @@\n+package com.rab3tech.customer.service.impl;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.beans.BeanUtils;\n+\n+import com.rab3tech.customer.dao.repository.CustomerAccountInfoRepository;\n+import com.rab3tech.customer.dao.repository.CustomerTransactionRepository;\n+import com.rab3tech.dao.entity.CustomerTransaction;\n+import com.rab3tech.utils.AccountStatusEnum;\n+import com.rab3tech.vo.CustomerTransactionVO;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CustomerTransactionsServiceImplTest {\n+\t\n+\t@Mock\n+\tprivate CustomerTransactionRepository customerTransactionRepository;\n+\n+\t@Mock\n+\tprivate CustomerAccountInfoRepository customerAccountInfoRepository;\n+\n+\t@InjectMocks\n+\tprivate CustomerTransactionsServiceImpl customerTransactionServiceImpl;\n+\t\n+\t@Before\n+\tpublic void initializer(){\n+\t\n+\t\tMockitoAnnotations.initMocks(this);  \n+\t}\n+\t@Test\n+\tpublic void testFindCustomerTransaction() {\n+\t\t/*\n+\t\t public List<CustomerTransactionVO> findAllTransactions(String fromAccount) {\n+\t\t List<CustomerTransactionVO> customerTransactionVOList = new  ArrayList<CustomerTransactionVO>();\n+\t\tList<CustomerTransaction> customerTransactionList=customerTransactionRepository.findByFromAccount(fromAccount);\n+\t\tfor (CustomerTransaction customerTransaction : customerTransactionList) {\n+\t\t\tCustomerTransactionVO customerTransactionVO= new CustomerTransactionVO();\n+\t\t\tBeanUtils.copyProperties(customerTransaction, customerTransactionVO);\n+\t\t\tcustomerTransactionVOList.add(customerTransactionVO);\n+\t\t}  return customerTransactionVOList; */\n+\t\t\n+\t\t//We are writing JUnit for findCustomerTransaction\n+\t\tList<CustomerTransaction> customerTransactionList = new ArrayList<CustomerTransaction>();\n+\t\tCustomerTransaction customerTransaction=new CustomerTransaction();\n+\t\tcustomerTransaction.setAmount(122);\n+\t\tcustomerTransaction.setBankName(\"Aba\"); \n+\t\tcustomerTransaction.setFromAccount(\"9383726262\");\n+\t\tcustomerTransaction.setTransactionId(\"Tx828272\");\n+\t\tcustomerTransactionList.add(customerTransaction);\n+\t\tCustomerTransaction customerTransaction2=new CustomerTransaction();\n+\t\tcustomerTransaction2.setAmount(34);\n+\t\tcustomerTransaction2.setBankName(\"Magic Tech\");\n+\t\tcustomerTransaction2.setFromAccount(\"9383726262\");\n+\t\tcustomerTransaction2.setTransactionId(\"tx723636633\");\n+\t\tcustomerTransactionList.add(customerTransaction2);\n+\n+\t\t\n+\t\twhen(customerTransactionRepository.findByFromAccount(\"9383726262\")).thenReturn(customerTransactionList);\n+\t\tList<CustomerTransactionVO> findAllTransactions=customerTransactionServiceImpl.findAllTransactions(\"9383726262\");\n+\t\tassertTrue(findAllTransactions!=null);\n+\t\tassertTrue(findAllTransactions.size()==2);\n+\t\tassertEquals(\"Tx828272\", findAllTransactions.get(0).getTransactionId());\n+\t\tassertEquals(\"Aba\", findAllTransactions.get(0).getBankName());\n+\t\tassertEquals(\"tx723636633\", findAllTransactions.get(1).getTransactionId());\n+\t\tassertEquals(\"Magic Tech\", findAllTransactions.get(1).getBankName());\n+\t\n+\t\t\n+\t\t\n+\t}\n+\t\n+\n+\t\n+}"
  },
  {
    "sha": "4ae9e1dfee91aad1f253a54bf02aa78c4e84fdfe",
    "filename": "banking-web/src/main/java/com/rab3tech/HalimTest.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-web/src/main/java/com/rab3tech/HalimTest.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-web/src/main/java/com/rab3tech/HalimTest.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-web/src/main/java/com/rab3tech/HalimTest.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -0,0 +1,10 @@\n+package com.rab3tech;\n+\n+public class HalimTest {\n+\n+   public void sms() {\n+\t   System.out.println(\"hello world\");\n+\t   System.out.println(\"hello world\");\n+\t   System.out.println(\"hello world\");\n+   }\n+}"
  },
  {
    "sha": "d4930769a3e57a83856d271c8e959201e42c68fb",
    "filename": "banking-web/src/main/java/com/rab3tech/customer/employee/controller/EmployeeUIController.java",
    "status": "modified",
    "additions": 2,
    "deletions": 13,
    "changes": 15,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-web/src/main/java/com/rab3tech/customer/employee/controller/EmployeeUIController.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-web/src/main/java/com/rab3tech/customer/employee/controller/EmployeeUIController.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-web/src/main/java/com/rab3tech/customer/employee/controller/EmployeeUIController.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -1,39 +1,28 @@\n package com.rab3tech.customer.employee.controller;\n \n-import java.io.UnsupportedEncodingException;\n-import java.util.ArrayList;\n-import java.util.Base64;\n-import java.util.Comparator;\n import java.util.List;\n-import java.util.Optional;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-\n+import org.springframework.web.bind.annotation.RequestParam; \n import com.rab3tech.customer.service.CustomerService;\n-import com.rab3tech.customer.service.LoginService;\n import com.rab3tech.customer.service.impl.CustomerEnquiryService;\n import com.rab3tech.email.service.EmailService;\n import com.rab3tech.utils.BankHttpUtils;\n import com.rab3tech.vo.CustomerAccountInfoVO;\n import com.rab3tech.vo.CustomerSavingVO;\n import com.rab3tech.vo.CustomerVO;\n import com.rab3tech.vo.EmailVO;\n-import com.rab3tech.vo.RoleVO;\n+ \n \n @Controller\n public class EmployeeUIController {"
  },
  {
    "sha": "fee025ad27024d083a0355bca22792ca15538728",
    "filename": "banking-web/src/main/resources/templates/employee/customers.html",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-web/src/main/resources/templates/employee/customers.html",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-web/src/main/resources/templates/employee/customers.html",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-web/src/main/resources/templates/employee/customers.html?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -264,14 +264,14 @@ <h2>Employee Dashboard Page\n   \n      <div th:switch=\"${customerVO.locked}\" >\n \t    <p th:case=\"'yes'\" >\n-\t        <a th:href=\"@{'/customer/unlock?userid='+${customerVO.userid}}\" id=\"userid\" onclick=\"unlock();\">\n-\t            <img th:src=\"@{/images/lock.png}\"/>\n+\t        <a th:href=\"@{'/customer/unlock?userid='+${customerVO.userid}}\" id=\"userid\">\n+\t            <img th:src=\"@{/images/lock.png}\"  onclick=\"unlock();\"/>\n \t        </a>\n \t     </p>\n \t        \n \t    <p th:case=\"'no'\"   >\n-\t        <a th:href=\"@{'/customer/lock?userid='+${customerVO.userid}}\" id=\"userid\" onclick=\"lock();\">\n-\t            <img th:src=\"@{/images/unlocked.png}\"/>\n+\t        <a th:href=\"@{'/customer/lock?userid='+${customerVO.userid}}\" id=\"userid\">\n+\t            <img th:src=\"@{/images/unlocked.png}\"  onclick=\"lock();\"/>\n \t        </a>\n         </p>\n       </div> "
  },
  {
    "sha": "a928d4cfefac58cd1f6511ccd687dfc6975a411f",
    "filename": "banking-web/src/test/java/com/rab3tech/customer/employee/controller/EmployeeControllerTest.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/halimNY/cubic-bank/blob/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-web/src/test/java/com/rab3tech/customer/employee/controller/EmployeeControllerTest.java",
    "raw_url": "https://github.com/halimNY/cubic-bank/raw/b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea/banking-web/src/test/java/com/rab3tech/customer/employee/controller/EmployeeControllerTest.java",
    "contents_url": "https://api.github.com/repos/halimNY/cubic-bank/contents/banking-web/src/test/java/com/rab3tech/customer/employee/controller/EmployeeControllerTest.java?ref=b7b972f3cdfe9b4193286fd8332eb76c1b73a3ea",
    "patch": "@@ -0,0 +1,48 @@\n+package com.rab3tech.customer.employee.controller;\n+\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.ui.Model;\n+\n+import com.rab3tech.customer.service.CustomerService;\n+import com.rab3tech.customer.service.impl.CustomerEnquiryService;\n+import com.rab3tech.email.service.EmailService;\n+import com.rab3tech.vo.CustomerVO;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EmployeeControllerTest {\n+\t\n+\t\n+\t\n+\t\t\n+\t @Mock\n+\t\tprivate CustomerEnquiryService customerEnquiryService;\n+\t\t\n+\t @Mock\n+\t\tprivate CustomerService customerService;\t\n+\t @Mock\n+\t\tprivate EmailService emailService;\n+\t @Before\n+\t\tpublic void initializer(){\n+\t\t\n+\t\t\tMockitoAnnotations.initMocks(this); \n+\t\t}\n+\t @Test\n+\t\tpublic void testShowCustome(){\n+\t/*\t public String showCustomer(Model model) {\t\n+\t\t\t\tList<CustomerVO> customerVOs=customerService.findCustomers();\n+\t\t\t\tSystem.out.println(\"customer list ::::::\"+customerVOs);\n+\t\t\t\tmodel.addAttribute(\"customerVOs\", customerVOs);\t\t\t\t\n+\t\t\t\treturn \"employee/customers-nv\";\n+\t\t\t}  */\n+\t\t \n+\t }\n+\t \n+\n+}"
  }
]
