[
  {
    "sha": "a0287fdc17cffe056c666f8afeebf406bc4d8c4d",
    "filename": "graphql-spring-boot-starter/src/main/java/org/springframework/graphql/boot/WebFluxGraphQLAutoConfiguration.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/1b0f0df83d2f8386011f3ca427d85edc00ad8cb4/graphql-spring-boot-starter/src/main/java/org/springframework/graphql/boot/WebFluxGraphQLAutoConfiguration.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/1b0f0df83d2f8386011f3ca427d85edc00ad8cb4/graphql-spring-boot-starter/src/main/java/org/springframework/graphql/boot/WebFluxGraphQLAutoConfiguration.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/graphql-spring-boot-starter/src/main/java/org/springframework/graphql/boot/WebFluxGraphQLAutoConfiguration.java?ref=1b0f0df83d2f8386011f3ca427d85edc00ad8cb4",
    "patch": "@@ -58,13 +58,16 @@\n \n \tprivate static final Log logger = LogFactory.getLog(WebFluxGraphQLAutoConfiguration.class);\n \n+\t@Bean\n+\tpublic GraphQL graphQL(GraphQL.Builder graphQLBuilder) {\n+\t\treturn graphQLBuilder.build();\n+\t}\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic GraphQLHttpHandler graphQLHandler(GraphQL.Builder graphQLBuilder, ObjectProvider<WebInterceptor> interceptors) {\n-\t\treturn new GraphQLHttpHandler(graphQLBuilder.build(), interceptors.orderedStream().collect(Collectors.toList()));\n+\tpublic GraphQLHttpHandler graphQLHandler(GraphQL graphQL, ObjectProvider<WebInterceptor> interceptors) {\n+\t\treturn new GraphQLHttpHandler(graphQL, interceptors.orderedStream().collect(Collectors.toList()));\n \t}\n-\n \t@Bean\n \tpublic RouterFunction<ServerResponse> graphQLEndpoint(\n \t\t\tGraphQLHttpHandler handler, GraphQLProperties properties, ResourceLoader resourceLoader) {\n@@ -88,11 +91,11 @@ public GraphQLHttpHandler graphQLHandler(GraphQL.Builder graphQLBuilder, ObjectP\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\tpublic GraphQLWebSocketHandler graphQLWebSocketHandler(\n-\t\t\t\tGraphQL.Builder graphQLBuilder, GraphQLProperties properties, ServerCodecConfigurer configurer,\n+\t\t\t\tGraphQL graphql, GraphQLProperties properties, ServerCodecConfigurer configurer,\n \t\t\t\tObjectProvider<WebInterceptor> interceptors) {\n \n \t\t\treturn new GraphQLWebSocketHandler(\n-\t\t\t\t\tgraphQLBuilder.build(), interceptors.orderedStream().collect(Collectors.toList()),\n+\t\t\t\t\tgraphql, interceptors.orderedStream().collect(Collectors.toList()),\n \t\t\t\t\tconfigurer, properties.getWebsocket().getConnectionInitTimeout()\n \t\t\t);\n \t\t}"
  },
  {
    "sha": "58b5d5cbfaac0995fcf326ef44676a63bf19f3ba",
    "filename": "graphql-spring-boot-starter/src/main/java/org/springframework/graphql/boot/WebMvcGraphQLAutoConfiguration.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/1b0f0df83d2f8386011f3ca427d85edc00ad8cb4/graphql-spring-boot-starter/src/main/java/org/springframework/graphql/boot/WebMvcGraphQLAutoConfiguration.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/1b0f0df83d2f8386011f3ca427d85edc00ad8cb4/graphql-spring-boot-starter/src/main/java/org/springframework/graphql/boot/WebMvcGraphQLAutoConfiguration.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/graphql-spring-boot-starter/src/main/java/org/springframework/graphql/boot/WebMvcGraphQLAutoConfiguration.java?ref=1b0f0df83d2f8386011f3ca427d85edc00ad8cb4",
    "patch": "@@ -65,12 +65,16 @@\n \n \tprivate static final Log logger = LogFactory.getLog(WebMvcGraphQLAutoConfiguration.class);\n \n+\t@Bean\n+\tpublic GraphQL graphQL(GraphQL.Builder graphQLBuilder) {\n+\t\treturn graphQLBuilder.build();\n+\t}\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic GraphQLHttpHandler graphQLHandler(GraphQL.Builder graphQLBuilder,\n+\tpublic GraphQLHttpHandler graphQLHandler(GraphQL graphQL,\n \t\t\tObjectProvider<WebInterceptor> interceptors) {\n-\t\treturn new GraphQLHttpHandler(graphQLBuilder.build(), interceptors.orderedStream().collect(Collectors.toList()));\n+\t\treturn new GraphQLHttpHandler(graphQL, interceptors.orderedStream().collect(Collectors.toList()));\n \t}\n \n \t@Bean\n@@ -98,7 +102,7 @@ public GraphQLHttpHandler graphQLHandler(GraphQL.Builder graphQLBuilder,\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\tpublic GraphQLWebSocketHandler graphQLWebSocketHandler(\n-\t\t\t\tGraphQL.Builder graphQLBuilder, GraphQLProperties properties, HttpMessageConverters converters,\n+\t\t\t\tGraphQL graphQL, GraphQLProperties properties, HttpMessageConverters converters,\n \t\t\t\tObjectProvider<WebInterceptor> interceptors) {\n \n \t\t\tHttpMessageConverter<?> converter = converters.getConverters().stream()\n@@ -107,7 +111,7 @@ public GraphQLWebSocketHandler graphQLWebSocketHandler(\n \t\t\t\t\t.orElseThrow(() -> new IllegalStateException(\"No JSON converter\"));\n \n \t\t\treturn new GraphQLWebSocketHandler(\n-\t\t\t\t\tgraphQLBuilder.build(), interceptors.orderedStream().collect(Collectors.toList()),\n+\t\t\t\t\tgraphQL, interceptors.orderedStream().collect(Collectors.toList()),\n \t\t\t\t\tconverter, properties.getWebsocket().getConnectionInitTimeout()\n \t\t\t);\n \t\t}"
  }
]
