[
  {
    "sha": "46f4265720212fa3ada66cc66f1e6dd2c2d700a4",
    "filename": "samples/employee-service/build.gradle",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/build.gradle",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/build.gradle",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/build.gradle?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,22 @@\n+plugins {\n+\tid 'org.springframework.boot' version '2.4.1'\n+\tid 'io.spring.dependency-management' version '1.0.10.RELEASE'\n+\tid 'java'\n+}\n+group = 'com.example'\n+version = '0.0.1-SNAPSHOT'\n+description = \"GraphQL webflux security example\"\n+sourceCompatibility = '1.8'\n+\n+dependencies {\n+\timplementation project(':graphql-spring-boot-starter')\n+\timplementation 'org.springframework.boot:spring-boot-starter-webflux'\n+\timplementation 'org.springframework.boot:spring-boot-starter-security'\n+\timplementation 'org.springframework.boot:spring-boot-starter-actuator'\n+\tdevelopmentOnly 'org.springframework.boot:spring-boot-devtools'\n+\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n+\ttestImplementation 'org.springframework.security:spring-security-test'\n+}\n+test {\n+\tuseJUnitPlatform()\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "19e1817b2a2afe73ff5ff8eb942497ed01191b18",
    "filename": "samples/employee-service/src/main/java/io/spring/sample/graphql/DataFetchers.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/DataFetchers.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/DataFetchers.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/java/io/spring/sample/graphql/DataFetchers.java?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,36 @@\n+package io.spring.sample.graphql;\n+\n+import graphql.schema.DataFetcher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.math.BigDecimal;\n+import java.util.Map;\n+\n+@Component\n+public class DataFetchers {\n+\n+    @Autowired\n+    EmployeeService employeeService;\n+\n+    @Autowired\n+    SalaryService salaryService;\n+\n+    public DataFetcher employeeDataFetcher = env -> {\n+        return employeeService.getAllEmployees();\n+    };\n+\n+    public DataFetcher salaryDataFetcher = env -> {\n+        Employee employee = env.getSource();\n+        return salaryService.getSalaryForEmployee(employee).toFuture();\n+    };\n+\n+    public DataFetcher updateSalaryFetcher = env -> {\n+        Map<String, String> input = env.getArgument(\"input\");\n+        String employeeId = input.get(\"employeeId\");\n+        BigDecimal newSalary = new BigDecimal(input.get(\"salary\"));\n+        salaryService.updateSalary(employeeId, newSalary);\n+        return null;\n+    };\n+\n+}"
  },
  {
    "sha": "e2bc9b697f03618956a58066431e746ccf90a390",
    "filename": "samples/employee-service/src/main/java/io/spring/sample/graphql/Employee.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/Employee.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/Employee.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/java/io/spring/sample/graphql/Employee.java?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,29 @@\n+package io.spring.sample.graphql;\n+\n+public class Employee {\n+\n+    private String id;\n+    private String name;\n+\n+    public Employee(String id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+}"
  },
  {
    "sha": "8d64597c22c8877dd3f22dc07b2b99b6bd1f112f",
    "filename": "samples/employee-service/src/main/java/io/spring/sample/graphql/EmployeeService.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/EmployeeService.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/EmployeeService.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/java/io/spring/sample/graphql/EmployeeService.java?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,15 @@\n+package io.spring.sample.graphql;\n+\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@Component\n+public class EmployeeService {\n+\n+    public List<Employee> getAllEmployees() {\n+        return Arrays.asList(new Employee(\"1\", \"Andi\"));\n+    }\n+\n+}"
  },
  {
    "sha": "2538c875e28369c2ca9a83b8245b872900722d5e",
    "filename": "samples/employee-service/src/main/java/io/spring/sample/graphql/EmployeeServiceApplication.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/EmployeeServiceApplication.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/EmployeeServiceApplication.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/java/io/spring/sample/graphql/EmployeeServiceApplication.java?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.spring.sample.graphql;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class EmployeeServiceApplication {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(EmployeeServiceApplication.class, args);\n+    }\n+}"
  },
  {
    "sha": "22f6f5e1e4de6e1c09b6d723546a1447d332aeb2",
    "filename": "samples/employee-service/src/main/java/io/spring/sample/graphql/GraphQLWiring.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/GraphQLWiring.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/GraphQLWiring.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/java/io/spring/sample/graphql/GraphQLWiring.java?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,33 @@\n+package io.spring.sample.graphql;\n+\n+import graphql.schema.idl.RuntimeWiring;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.graphql.boot.RuntimeWiringCustomizer;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class GraphQLWiring implements RuntimeWiringCustomizer {\n+\n+    @Autowired\n+    DataFetchers dataFetchers;\n+\n+    @Override\n+    public void customize(RuntimeWiring.Builder builder) {\n+        builder.type(\"Query\",\n+                wiringBuilder -> {\n+                    return wiringBuilder.\n+                            dataFetcher(\"employees\", dataFetchers.employeeDataFetcher);\n+                });\n+        builder.type(\"Employee\",\n+                wiringBuilder -> {\n+                    return wiringBuilder.\n+                            dataFetcher(\"salary\", dataFetchers.salaryDataFetcher);\n+                });\n+        builder.type(\"Mutation\",\n+                wiringBuilder -> {\n+                    return wiringBuilder.\n+                            dataFetcher(\"updateSalary\", dataFetchers.updateSalaryFetcher);\n+                });\n+\n+    }\n+}"
  },
  {
    "sha": "5a17b1b9e7b39e12b65f7cbbd287b87be4392070",
    "filename": "samples/employee-service/src/main/java/io/spring/sample/graphql/SalaryService.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/SalaryService.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/SalaryService.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/java/io/spring/sample/graphql/SalaryService.java?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,23 @@\n+package io.spring.sample.graphql;\n+\n+import org.springframework.security.access.annotation.Secured;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Mono;\n+\n+import java.math.BigDecimal;\n+\n+@Component\n+public class SalaryService {\n+\n+\n+    @PreAuthorize(\"hasRole('MANAGER')\")\n+    public Mono<BigDecimal> getSalaryForEmployee(Employee employee) {\n+        return Mono.just(new BigDecimal(\"42\"));\n+    }\n+\n+    @Secured({\"ROLE_HR\"})\n+    public void updateSalary(String employeeId, BigDecimal newSalary) {\n+\n+    }\n+}"
  },
  {
    "sha": "1794b02214cee3b0e39d94d997149ab48190ec91",
    "filename": "samples/employee-service/src/main/java/io/spring/sample/graphql/SecurityConfig.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/SecurityConfig.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/java/io/spring/sample/graphql/SecurityConfig.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/java/io/spring/sample/graphql/SecurityConfig.java?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,39 @@\n+package io.spring.sample.graphql;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;\n+import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.web.server.SecurityWebFilterChain;\n+\n+@Configuration\n+@EnableWebFluxSecurity\n+@EnableReactiveMethodSecurity\n+public class SecurityConfig {\n+\n+    @Bean\n+    SecurityWebFilterChain springWebFilterChain(ServerHttpSecurity http) throws Exception {\n+        http.csrf().disable();\n+        return http\n+                // Demonstrate that method security works\n+                // Best practice to use both for defense in depth\n+                .authorizeExchange()\n+                .anyExchange().permitAll()\n+                .and()\n+                .httpBasic().and()\n+                .build();\n+    }\n+\n+    @Bean\n+    public MapReactiveUserDetailsService userDetailsService() {\n+        User.UserBuilder userBuilder = User.withDefaultPasswordEncoder();\n+        UserDetails rob = userBuilder.username(\"rob\").password(\"rob\").roles(\"USER\").build();\n+        UserDetails admin = userBuilder.username(\"admin\").password(\"admin\").roles(\"USER\", \"ADMIN\").build();\n+        return new MapReactiveUserDetailsService(rob, admin);\n+    }\n+\n+}"
  },
  {
    "sha": "cc94084bc50ba910a60d3321ccc9fdc3c25e2d85",
    "filename": "samples/employee-service/src/main/resources/application.properties",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/resources/application.properties",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/resources/application.properties?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,7 @@\n+spring.graphql.websocket.path=/graphql\n+management.endpoints.web.exposure.include=health,metrics,info\n+logging.level.org.springframework.web=debug\n+logging.level.org.springframework.http=debug\n+logging.level.org.springframework.graphql=debug\n+logging.level.org.springframework.security=debug\n+logging.level.reactor.netty=debug\n\\ No newline at end of file"
  },
  {
    "sha": "7687c85415e80cbef3c7870e16697c3577216298",
    "filename": "samples/employee-service/src/main/resources/schema.graphqls",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/resources/schema.graphqls",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/main/resources/schema.graphqls",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/main/resources/schema.graphqls?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,22 @@\n+type Query {\n+    employees: [Employee]\n+}\n+type Mutation {\n+    # restricted\n+    updateSalary(input: UpdateSalaryInput!): UpdateSalaryPayload\n+}\n+type Employee {\n+    id: ID!\n+    name: String\n+    # restricted\n+    salary: String\n+}\n+\n+input UpdateSalaryInput {\n+    employeeId: ID!\n+    salary: String!\n+}\n+type UpdateSalaryPayload {\n+    success: Boolean!\n+    employee: Employee\n+}"
  },
  {
    "sha": "b2d1c4992216566e299a91d8b05aeb39c6ff53c4",
    "filename": "samples/employee-service/src/test/java/io/spring/sample/graphql/EmployeeServiceApplicationTest.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/test/java/io/spring/sample/graphql/EmployeeServiceApplicationTest.java",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/samples/employee-service/src/test/java/io/spring/sample/graphql/EmployeeServiceApplicationTest.java",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/samples/employee-service/src/test/java/io/spring/sample/graphql/EmployeeServiceApplicationTest.java?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -0,0 +1,98 @@\n+package io.spring.sample.graphql;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.reactive.context.ReactiveWebApplicationContext;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunctions;\n+\n+import java.util.Collections;\n+\n+@SpringBootTest()\n+class EmployeeServiceApplicationTest {\n+\n+    @Autowired\n+    private ReactiveWebApplicationContext context;\n+    private static final String BASE_URL = \"https://spring.example.org/graphql\";\n+\n+\n+    WebTestClient client;\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.client = WebTestClient\n+                .bindToApplicationContext(this.context)\n+                .apply(SecurityMockServerConfigurers.springSecurity())\n+                .configureClient()\n+                .filter(ExchangeFilterFunctions.basicAuthentication())\n+                .defaultHeaders(headers -> {\n+                    headers.setContentType(MediaType.APPLICATION_JSON);\n+                    headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+                })\n+                .baseUrl(BASE_URL)\n+                .build();\n+    }\n+\n+    @Test\n+    void canQueryName() {\n+        String query = \"{\" +\n+                \"  employees{ \" +\n+                \"    name\" +\n+                \"  }\" +\n+                \"}\";\n+\n+\n+        client.post().uri(\"\")\n+                .bodyValue(\"{  \\\"query\\\": \\\"\" + query + \"\\\"}\")\n+                .exchange()\n+                .expectStatus().isOk()\n+                .expectBody().jsonPath(\"data.employees[0].name\").isEqualTo(\"Andi\");\n+\n+    }\n+\n+    @Test\n+    void canNotQuerySalary() {\n+        String query = \"{\" +\n+                \"  employees{ \" +\n+                \"    name\" +\n+                \"    salary\" +\n+                \"  }\" +\n+                \"}\";\n+\n+\n+        client.post().uri(\"\")\n+                .bodyValue(\"{  \\\"query\\\": \\\"\" + query + \"\\\"}\")\n+                .exchange()\n+                .expectStatus().isOk()\n+                .expectBody()\n+                .jsonPath(\"data.employees[0].name\").isEqualTo(\"Andi\")\n+                .jsonPath(\"data.employees[0].salary\").doesNotExist();\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"MANAGER\")\n+    void canQuerySalaryAsManager() {\n+        String query = \"{\" +\n+                \"  employees{ \" +\n+                \"    name\" +\n+                \"    salary\" +\n+                \"  }\" +\n+                \"}\";\n+\n+\n+        client.post().uri(\"\")\n+                .bodyValue(\"{  \\\"query\\\": \\\"\" + query + \"\\\"}\")\n+                .exchange()\n+                .expectStatus().isOk()\n+                .expectBody()\n+                .jsonPath(\"data.employees[0].name\").isEqualTo(\"Andi\")\n+                .jsonPath(\"data.employees[0].salary\").isEqualTo(\"42\");\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e3de3f29b3e7813dc6e89478d8443736c6ee148d",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/spring-projects-experimental/spring-graphql/blob/3e19babcfcca92268a323098afaf101c5c18e5c9/settings.gradle",
    "raw_url": "https://github.com/spring-projects-experimental/spring-graphql/raw/3e19babcfcca92268a323098afaf101c5c18e5c9/settings.gradle",
    "contents_url": "https://api.github.com/repos/spring-projects-experimental/spring-graphql/contents/settings.gradle?ref=3e19babcfcca92268a323098afaf101c5c18e5c9",
    "patch": "@@ -14,4 +14,4 @@ pluginManagement {\n }\n \n rootProject.name = 'spring-graphql'\n-include 'spring-graphql-web', 'graphql-spring-boot-starter', 'samples:webmvc-http', 'samples:webflux-websocket'\n+include 'spring-graphql-web', 'graphql-spring-boot-starter', 'samples:webmvc-http', 'samples:webflux-websocket', 'samples:employee-service'"
  }
]
