[
  {
    "sha": "61d4587e00580a96f0abab10184430cd8a3119b9",
    "filename": "src/main/java/students/vitaly_porsev/lesson_8/level_7/task_31/Book.java",
    "status": "added",
    "additions": 222,
    "deletions": 0,
    "changes": 222,
    "blob_url": "https://github.com/konstantins-buts/jg-java-1-online-winter-january-wednesday-2021/blob/6ba757dc983c19bc17be47d71653af82246981d8/src/main/java/students/vitaly_porsev/lesson_8/level_7/task_31/Book.java",
    "raw_url": "https://github.com/konstantins-buts/jg-java-1-online-winter-january-wednesday-2021/raw/6ba757dc983c19bc17be47d71653af82246981d8/src/main/java/students/vitaly_porsev/lesson_8/level_7/task_31/Book.java",
    "contents_url": "https://api.github.com/repos/konstantins-buts/jg-java-1-online-winter-january-wednesday-2021/contents/src/main/java/students/vitaly_porsev/lesson_8/level_7/task_31/Book.java?ref=6ba757dc983c19bc17be47d71653af82246981d8",
    "patch": "@@ -0,0 +1,222 @@\n+package students.vitaly_porsev.lesson_8.level_7.task_31;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+\n+class Book {\n+\n+    private String title;\n+    private int penalty;\n+    private Date dateWhenBookTook;\n+    private Date whenBookShouldBeBack;\n+    private boolean inLibrary;\n+    private boolean reserve;\n+\n+    public Book() {\n+    }\n+\n+    public Book(String title) {\n+        this.title = title;\n+    }\n+\n+    void addBookToTheLibrary(Book[] books, String title) {\n+        for (int i = 0; i < books.length; i++) {\n+            if (books[i] == null) {\n+                books[i] = createNewBok(title);\n+                books[i].inLibrary = true;\n+                break;\n+            }\n+        }\n+    }\n+\n+    boolean equal(Book book, String title) {\n+        return book.title.toLowerCase(Locale.ROOT).equals(title.toLowerCase());\n+    }\n+\n+    void takeBookFromLibrary(Book[] books, String title, String whenBookShouldBeBack) throws ParseException {\n+        SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\n+        Date date = new Date();\n+        Date date1 = new SimpleDateFormat(\"dd/MM/yyyy\").parse(whenBookShouldBeBack);\n+        for (Book book : books) {\n+            if (book != null) {\n+                if (equal(book, title) && book.reserve\n+                        || equal(book, title) && !book.inLibrary) {\n+                    System.out.println(\"Книга недоступна!\");\n+                    break;\n+                } else if (equal(book, title)) {\n+                    book.inLibrary = false;\n+                    book.dateWhenBookTook = date;\n+                    book.whenBookShouldBeBack = date1;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    void returnBook(Book[] books, String title) throws ParseException {\n+        SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\n+        Date date = new Date();\n+        for (Book book : books) {\n+            if (book != null) {\n+                if (equal(book, title)) {\n+                    if (date.after(book.whenBookShouldBeBack)) {\n+                        book.penalty = 20;\n+                        System.out.println(\"Вы просрочили сдачу книги, ваш штраф: \" + book.penalty);\n+                    } else {\n+                        penalties(books, title);\n+                        System.out.println(\"Спасибо, что своевременно вернули книгу.\");\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    private void penalties(Book[] books, String title) {\n+        for (Book book : books) {\n+            if (book != null) {\n+                if (equal(book, title)) {\n+                    book.inLibrary = true;\n+                    book.dateWhenBookTook = null;\n+                    book.whenBookShouldBeBack = null;\n+                    book.penalty = 0;\n+                }\n+            }\n+        }\n+    }\n+\n+    void payForThePenalty(Book[] books, String title, int pay) {\n+        for (Book book : books) {\n+            if (book != null) {\n+                if (equal(book, title)) {\n+                    if (pay == book.penalty) {\n+                        penalties(books, title);\n+                        System.out.println(\"Спасибо за оплату!\");\n+                        break;\n+                    } else if (pay < book.penalty) {\n+                        book.penalty -= pay;\n+                        System.out.println(\"Вы должны доплатить ещё: \" + book.penalty);\n+                        break;\n+                    } else {\n+                        penalties(books, title);\n+                        System.out.println(\"Спасибо. Ваша сдача: \" + (pay - book.penalty));\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    void reserve(Book[] books, String title) {\n+        for (Book book : books) {\n+            if (book != null) {\n+                if (equal(book, title) && book.inLibrary && !book.reserve) {\n+                    book.reserve = true;\n+                    System.out.println(\"Ваша книга зарезервирована!\");\n+                } else {\n+                    System.out.println(\"Книга недоступна\");\n+                }\n+                break;\n+            }\n+        }\n+    }\n+\n+    void whenBooksShouldBeBack(Book[] books) {\n+        for (Book book : books) {\n+            if (book != null && book.whenBookShouldBeBack != null) {\n+                System.out.println(book.title + \" - книга должна быть возращена: \" + book.whenBookShouldBeBack);\n+            }\n+        }\n+    }\n+\n+    void deleteBookFromLibrary(Book[] books, String title) {\n+        for (int i = 0; i < books.length; i++) {\n+            if (books[i] != null) {\n+                if (equal(books[i], title)) {\n+                    books[i] = null;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    void checkBook(Book[] books, String title) {\n+        for (Book book : books) {\n+            if (book != null) {\n+                if (equal(book, title)) {\n+                    System.out.println(book.title + \" \" + book.whenBookShouldBeBack + \" \" + book.penalty);\n+                    break;\n+                }\n+            } else {\n+                System.out.println(\"Книга не найдена\");\n+                break;\n+            }\n+        }\n+    }\n+\n+    void checkAllBooks(Book[] books) {\n+        for (Book book : books) {\n+            if (book != null) {\n+                System.out.println(book);\n+            }\n+        }\n+    }\n+\n+    private Book createNewBok(String title) {\n+        return new Book(title);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Book{\" +\n+                \"title = '\" + title + '\\'' +\n+                \", penalty = \" + penalty +\n+                \", dateWhenBookTook = \" + dateWhenBookTook +\n+                \", whenBookShouldBeBack = \" + whenBookShouldBeBack +\n+                \", inLibrary = \" + inLibrary +\n+                \", reserve = \" + reserve +\n+                '}';\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public int getPenalty() {\n+        return penalty;\n+    }\n+\n+    public void setPenalty(int penalty) {\n+        this.penalty = penalty;\n+    }\n+\n+    public Date getDateWhenBookTook() {\n+        return dateWhenBookTook;\n+    }\n+\n+    public void setDateWhenBookTook(Date dateWhenBookTook) {\n+        this.dateWhenBookTook = dateWhenBookTook;\n+    }\n+\n+    public Date getWhenBookShouldBeBack() {\n+        return whenBookShouldBeBack;\n+    }\n+\n+    public void setWhenBookShouldBeBack(Date whenBookShouldBeBack) {\n+        this.whenBookShouldBeBack = whenBookShouldBeBack;\n+    }\n+\n+    public boolean isInLibrary() {\n+        return inLibrary;\n+    }\n+\n+    public void setInLibrary(boolean inLibrary) {\n+        this.inLibrary = inLibrary;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e0ef181915672d0495fd2c128a9cee9fe085d474",
    "filename": "src/main/java/students/vitaly_porsev/lesson_8/level_7/task_31/Library.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/konstantins-buts/jg-java-1-online-winter-january-wednesday-2021/blob/6ba757dc983c19bc17be47d71653af82246981d8/src/main/java/students/vitaly_porsev/lesson_8/level_7/task_31/Library.java",
    "raw_url": "https://github.com/konstantins-buts/jg-java-1-online-winter-january-wednesday-2021/raw/6ba757dc983c19bc17be47d71653af82246981d8/src/main/java/students/vitaly_porsev/lesson_8/level_7/task_31/Library.java",
    "contents_url": "https://api.github.com/repos/konstantins-buts/jg-java-1-online-winter-january-wednesday-2021/contents/src/main/java/students/vitaly_porsev/lesson_8/level_7/task_31/Library.java?ref=6ba757dc983c19bc17be47d71653af82246981d8",
    "patch": "@@ -0,0 +1,21 @@\n+package students.vitaly_porsev.lesson_8.level_7.task_31;\n+\n+import java.text.ParseException;\n+\n+class Library {\n+\n+    public static void main(String[] args) throws ParseException {\n+        Book method = new Book();\n+        Book[] library = new Book[10];\n+        method.addBookToTheLibrary(library, \"Война и Мир\");\n+        method.addBookToTheLibrary(library, \"Три товарища\");\n+        method.addBookToTheLibrary(library, \"Спартак\");\n+        method.addBookToTheLibrary(library, \"Head First Java\");\n+        method.addBookToTheLibrary(library, \"Муравьи\");\n+        method.takeBookFromLibrary(library, \"Спартак\", \"10/03/2021\");\n+        method.returnBook(library, \"Спартак\");\n+        method.payForThePenalty(library, \"Спартак\", 10);\n+        method.payForThePenalty(library, \"Спартак\", 10);\n+        method.checkBook(library, \"Спартак\");\n+    }\n+}\n\\ No newline at end of file"
  }
]
