[
  {
    "sha": "1be21faaded6aa67cbb81d56ce82bbeb9bb07a1f",
    "filename": "src/main/java/org/plumelib/util/StringsPlume.java",
    "status": "modified",
    "additions": 11,
    "deletions": 3,
    "changes": 14,
    "blob_url": "https://github.com/plume-lib/plume-util/blob/4231f636e3b15722dc612acdea2c27b98d8d2ad4/src/main/java/org/plumelib/util/StringsPlume.java",
    "raw_url": "https://github.com/plume-lib/plume-util/raw/4231f636e3b15722dc612acdea2c27b98d8d2ad4/src/main/java/org/plumelib/util/StringsPlume.java",
    "contents_url": "https://api.github.com/repos/plume-lib/plume-util/contents/src/main/java/org/plumelib/util/StringsPlume.java?ref=4231f636e3b15722dc612acdea2c27b98d8d2ad4",
    "patch": "@@ -308,6 +308,7 @@ public static String escapeJava(String orig) {\n       char c = orig.charAt(i);\n       switch (c) {\n         case '\\\"':\n+        case '\\'':\n         case '\\\\':\n         case '\\b':\n         case '\\f':\n@@ -372,6 +373,8 @@ public static String escapeJava(char c) {\n     switch (c) {\n       case '\\\"':\n         return \"\\\\\\\"\";\n+      case '\\'':\n+        return \"\\\\'\";\n       case '\\\\':\n         return \"\\\\\\\\\";\n       case '\\b':\n@@ -422,6 +425,8 @@ public static String escapeNonASCII(String orig) {\n   private static String escapeNonASCII(char c) {\n     if (c == '\"') {\n       return \"\\\\\\\"\";\n+    } else if (c == '\\''){\n+      return \"\\'\";\n     } else if (c == '\\\\') {\n       return \"\\\\\\\\\";\n     } else if (c == '\\n') { // not lineSep\n@@ -600,10 +605,11 @@ public static String removeWhitespaceAround(String arg, String delimiter) {\n    * @param arg string to remove whitespace in\n    * @param delimiter string to remove whitespace after\n    * @return version of arg, with whitespace after delimiter removed\n+   * @throws IllegalArgumentException if the second argument is an empty String\n    */\n   @SideEffectFree\n   public static String removeWhitespaceAfter(String arg, String delimiter) {\n-    if (delimiter == null || delimiter.equals(\"\")) {\n+    if (delimiter.isEmpty()) {\n       throw new IllegalArgumentException(\"Bad delimiter: \\\"\" + delimiter + \"\\\"\");\n     }\n     // String orig = arg;\n@@ -634,10 +640,11 @@ public static String removeWhitespaceAfter(String arg, String delimiter) {\n    * @param arg string to remove whitespace in\n    * @param delimiter string to remove whitespace before\n    * @return version of arg, with whitespace before delimiter removed\n+   * @throws IllegalArgumentException if the second argument is an empty String\n    */\n   @SideEffectFree\n   public static String removeWhitespaceBefore(String arg, String delimiter) {\n-    if (delimiter == null || delimiter.equals(\"\")) {\n+    if (delimiter.isEmpty()) {\n       throw new IllegalArgumentException(\"Bad delimiter: \\\"\" + delimiter + \"\\\"\");\n     }\n     // System.out.println(\"removeWhitespaceBefore(\\\"\" + arg + \"\\\", \\\"\" + delimiter + \"\\\")\");\n@@ -1110,11 +1117,12 @@ public static int count(String s, int ch) {\n    * @param s string to search in\n    * @param sub non-empty string to search for\n    * @return number of times the substring appears in the string\n+   * @throws IllegalArgumentException if the second argument is an empty String\n    */\n   @Pure\n   @StaticallyExecutable\n   public static int count(String s, String sub) {\n-    if (sub.equals(\"\")) {\n+    if (sub.isEmpty()) {\n       throw new IllegalArgumentException(\"second argument must not be empty\");\n     }\n     int result = 0;"
  }
]
