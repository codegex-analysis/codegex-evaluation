[
  {
    "sha": "8c295136860e7688c8ba5a81f4801e5813c69e46",
    "filename": "src/main/java/org/plumelib/util/MathPlume.java",
    "status": "modified",
    "additions": 15,
    "deletions": 8,
    "changes": 23,
    "blob_url": "https://github.com/plume-lib/plume-util/blob/f32cfca0c7051aab9069c5606bf2d6e1dde8cf03/src/main/java/org/plumelib/util/MathPlume.java",
    "raw_url": "https://github.com/plume-lib/plume-util/raw/f32cfca0c7051aab9069c5606bf2d6e1dde8cf03/src/main/java/org/plumelib/util/MathPlume.java",
    "contents_url": "https://api.github.com/repos/plume-lib/plume-util/contents/src/main/java/org/plumelib/util/MathPlume.java?ref=f32cfca0c7051aab9069c5606bf2d6e1dde8cf03",
    "patch": "@@ -16,6 +16,7 @@\n import org.checkerframework.common.value.qual.MinLen;\n import org.checkerframework.common.value.qual.StaticallyExecutable;\n import org.checkerframework.dataflow.qual.Pure;\n+import org.checkerframework.dataflow.qual.SideEffectFree;\n \n /** Mathematical utilities. */\n public final class MathPlume {\n@@ -840,8 +841,8 @@ public static double gcdDifferences(double[] a) {\n    * @return an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or\n    *     null if no such exists or the iterator contains fewer than 3 elements\n    */\n-  @Pure\n-  @StaticallyExecutable\n+  @SideEffectFree\n+  //@StaticallyExecutable\n   public static int @Nullable @ArrayLen(2) [] modulus(int[] nums) {\n     if (nums.length < 3) {\n       return null;\n@@ -870,6 +871,7 @@ public static double gcdDifferences(double[] a) {\n    *     null if no such exists or the iterator contains fewer than 3 elements\n    * @see #modulus(int[])\n    */\n+   @SideEffectFree\n   public static int @Nullable @ArrayLen(2) [] modulusInt(Iterator<Integer> itor) {\n     if (!itor.hasNext()) {\n       return null;\n@@ -919,8 +921,8 @@ public static double gcdDifferences(double[] a) {\n    * @return an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or\n    *     null if no such exists or the array contains fewer than 3 elements\n    */\n-  @Pure\n-  @StaticallyExecutable\n+  @SideEffectFree\n+  //@StaticallyExecutable\n   public static int @Nullable @ArrayLen(2) [] modulusStrict(int[] nums, boolean nonstrictEnds) {\n     if (nums.length < 3) {\n       return null;\n@@ -974,6 +976,7 @@ public static double gcdDifferences(double[] a) {\n    *     null if no such exists or the iterator contains fewer than 3 elements\n    * @see #modulusStrict(int[], boolean)\n    */\n+   @SideEffectFree\n   public static int @Nullable @ArrayLen(2) [] modulusStrictInt(\n       Iterator<Integer> itor, boolean nonstrictEnds) {\n     if (!itor.hasNext()) {\n@@ -1077,8 +1080,8 @@ public static double gcdDifferences(double[] a) {\n    * @return an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or\n    *     null if no such exists or the iterator contains fewer than 3 elements\n    */\n-  @Pure\n-  @StaticallyExecutable\n+  @SideEffectFree\n+  //@StaticallyExecutable\n   public static long @Nullable @ArrayLen(2) [] modulus(long[] nums) {\n     if (nums.length < 3) {\n       return null;\n@@ -1107,6 +1110,7 @@ public static double gcdDifferences(double[] a) {\n    *     null if no such exists or the iterator contains fewer than 3 elements\n    * @see #modulus(long[])\n    */\n+   @SideEffectFree\n   public static long @Nullable @ArrayLen(2) [] modulusLong(Iterator<Long> itor) {\n     if (!itor.hasNext()) {\n       return null;\n@@ -1156,8 +1160,8 @@ public static double gcdDifferences(double[] a) {\n    * @return an array of two integers (r,m) such that each number in NUMS is equal to r (mod m), or\n    *     null if no such exists or the array contains fewer than 3 elements\n    */\n-  @Pure\n-  @StaticallyExecutable\n+  @SideEffectFree\n+  //@StaticallyExecutable\n   public static long @Nullable @ArrayLen(2) [] modulusStrict(long[] nums, boolean nonstrictEnds) {\n     if (nums.length < 3) {\n       return null;\n@@ -1211,6 +1215,7 @@ public static double gcdDifferences(double[] a) {\n    *     null if no such exists or the iterator contains fewer than 3 elements\n    * @see #modulusStrict(int[], boolean)\n    */\n+   @SideEffectFree\n   public static long @Nullable @ArrayLen(2) [] modulusStrictLong(\n       Iterator<Long> itor, boolean nonstrictEnds) {\n     if (!itor.hasNext()) {\n@@ -1479,6 +1484,7 @@ public void remove(@GuardSatisfied MissingNumbersIteratorInt this) {\n    * @return value to be returned by {@link #nonmodulusStrict(int[])}: a tuple of (r,m) where all\n    *     numbers in {@code missing} are equal to r (ood m)\n    */\n+   @SideEffectFree\n   private static int @Nullable @ArrayLen(2) [] nonmodulusStrictIntInternal(\n       Iterator<Integer> missing) {\n     // Must not use regular modulus:  that can produce errors, eg\n@@ -1808,6 +1814,7 @@ public void remove(@GuardSatisfied MissingNumbersIteratorLong this) {\n    * @param missing the missing integers\n    * @return value to be returned by {@link #nonmodulusStrict(long[])}\n    */\n+   @SideEffectFree\n   private static long @Nullable @ArrayLen(2) [] nonmodulusStrictLongInternal(\n       Iterator<Long> missing) {\n     // Must not use regular modulus:  that can produce errors, eg"
  }
]
