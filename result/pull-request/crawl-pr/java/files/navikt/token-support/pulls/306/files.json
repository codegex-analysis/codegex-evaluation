[
  {
    "sha": "babdd8dc9c7ef96a73a91d8e933537c5a90e08ef",
    "filename": "token-validation-spring-test/src/main/java/no/nav/security/token/support/spring/test/MockLoginController.java",
    "status": "modified",
    "additions": 40,
    "deletions": 4,
    "changes": 44,
    "blob_url": "https://github.com/navikt/token-support/blob/c2696d7951c2a8cf8cf449d38910926423ee08cc/token-validation-spring-test/src/main/java/no/nav/security/token/support/spring/test/MockLoginController.java",
    "raw_url": "https://github.com/navikt/token-support/raw/c2696d7951c2a8cf8cf449d38910926423ee08cc/token-validation-spring-test/src/main/java/no/nav/security/token/support/spring/test/MockLoginController.java",
    "contents_url": "https://api.github.com/repos/navikt/token-support/contents/token-validation-spring-test/src/main/java/no/nav/security/token/support/spring/test/MockLoginController.java?ref=c2696d7951c2a8cf8cf449d38910926423ee08cc",
    "patch": "@@ -3,17 +3,16 @@\n import no.nav.security.mock.oauth2.MockOAuth2Server;\n import no.nav.security.mock.oauth2.token.DefaultOAuth2TokenCallback;\n import no.nav.security.token.support.core.api.Unprotected;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.*;\n \n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n @RestController\n @RequestMapping(\"/local\")\n@@ -60,4 +59,41 @@ public Cookie addCookie(\n         }\n         return cookie;\n     }\n+\n+    @Unprotected\n+    @PostMapping(\"/cookie\")\n+    public Cookie addCoaaokie(\n+        @RequestParam(value = \"issuerId\") String issuerId,\n+        @RequestParam(value = \"audience\") String audience,\n+        @RequestParam(value = \"subject\", defaultValue = \"12345678910\") String subject,\n+        @RequestParam(value = \"cookiename\", defaultValue = \"localhost-idtoken\") String cookieName,\n+        @RequestParam(value = \"redirect\", required = false) String redirect,\n+        @RequestParam(value = \"expiry\", required = false) String expiry,\n+        @RequestBody Map<String, Object> claims,\n+        HttpServletResponse response\n+    ) throws IOException {\n+        String token =\n+            mockOAuth2Server.issueToken(\n+                issuerId,\n+                MockLoginController.class.getSimpleName(),\n+                new DefaultOAuth2TokenCallback(\n+                    issuerId,\n+                    subject,\n+                    List.of(audience),\n+                    claims != null ? claims : Collections.emptyMap(),\n+                    expiry != null ? Long.parseLong(expiry) : 3600\n+                )\n+            ).serialize();\n+\n+        Cookie cookie = new Cookie(cookieName, token);\n+        cookie.setDomain(\"localhost\");\n+        cookie.setPath(\"/\");\n+        response.addCookie(cookie);\n+        if (redirect != null) {\n+            response.sendRedirect(redirect);\n+            return null;\n+        }\n+        return cookie;\n+    }\n+\n }"
  }
]
