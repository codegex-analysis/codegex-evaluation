[
  {
    "sha": "0e4df4df4e36333aeb6a72835be16ad130863042",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/.gitignore",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/.gitignore",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/.gitignore?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -159,3 +159,4 @@ imgui.ini\n .vscode/\n \n # End of https://www.gitignore.io/api/c++,java,linux,macos,gradle,windows,visualstudiocode\n+.idea"
  },
  {
    "sha": "a8ca3abee63dfbc58072556ed8a080359580cecb",
    "filename": "src/main/java/org/usfirst/frc/team2077/Constants.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/Constants.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/Constants.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/Constants.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -27,8 +27,9 @@\n     public final double STARDESTROYER_WHEELBASE = 20.375; // inches\n     public final double STARDESTROYER_TRACK_WIDTH = 22.625; // inches\n     public final double STARDESTROYER_WHEEL_RADIUS = 4.0; // inches\n+    public final double STARDESTROYER_SHOOTER_RADIUS = 2.0;\n     // TODO: move motor RPM limit back up and use acceleration and/or stick scaling to optimize driveability\n-    public final double STARDESTROYER_MOTOR_RPM_LIMIT = 3000; // (82 inches/second)\n+    public final double STARDESTROYER_MOTOR_RPM_LIMIT = 5500; // (82 inches/second)\n     // TODO: use acceleration constants where appropriate throughout other code\n     // TODO: different values for operator drive vs programmed motion vs short nudges, etc?\n     public final double STARDESTROYER_ACCELERATION_G_LIMIT = .1;"
  },
  {
    "sha": "c518fb2f709f26c76c55ecdf1b1ecf2a62fa9bd9",
    "filename": "src/main/java/org/usfirst/frc/team2077/DriveStation.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/DriveStation.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/DriveStation.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/DriveStation.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -8,15 +8,18 @@\n import edu.wpi.first.wpilibj.Joystick;\n import edu.wpi.first.wpilibj2.command.button.JoystickButton;\n import edu.wpi.first.wpilibj.XboxController;\n+import edu.wpi.first.wpilibj2.command.button.InternalButton;\n \n public class DriveStation {\n \n     public final Joystick primaryStick_ = new Joystick(0);\n     public final Joystick secondaryStick_ = new Joystick(1);\n     public final Joystick testingStick_ = new Joystick(5);\n-    public final Joystick Flight = new Joystick(2);\n+    public final XboxController X360 = new XboxController(2);\n \n \n+\n+    \n     \n     public final JoystickButton primaryTrigger_ = new JoystickButton(primaryStick_, 1); \n     public final JoystickButton primary2_ = new JoystickButton(primaryStick_, 2);"
  },
  {
    "sha": "21451f56833b9c52299ce51c19cff338483f33b9",
    "filename": "src/main/java/org/usfirst/frc/team2077/Robot.java",
    "status": "modified",
    "additions": 24,
    "deletions": 16,
    "changes": 40,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/Robot.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/Robot.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/Robot.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -37,6 +37,8 @@\n import org.usfirst.frc.team2077.subsystems.LauncherIF;\n import org.usfirst.frc.team2077.subsystems.Telemetry;\n import org.usfirst.frc.team2077.subsystems.TestGrabber;\n+import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n+\n \n import edu.wpi.first.networktables.NetworkTableInstance;\n import edu.wpi.first.wpilibj.AnalogInput;\n@@ -204,6 +206,17 @@ public void robotInit() {\n     \n     System.out.println(\"CROSSHAIRS:\" + crosshairs_);\n \n+    SmartDashboard.putBoolean(\"Run Autonomous\", false);\n+\n+    SmartDashboard.putBoolean(\"Galactic Search\", false);\n+    SmartDashboard.putBoolean(\"A\", false);\n+    SmartDashboard.putBoolean(\"Red\", false);\n+\n+    SmartDashboard.putBoolean(\"Barrel Racing\", false);\n+    SmartDashboard.putBoolean(\"Slalom\", false);\n+    SmartDashboard.putBoolean(\"Bounce\", false);\n+\n+    SmartDashboard.putString(\"errors\", \"value\");\n \n     \n     SmartDashboard.putBoolean(\"Run Autonomous\", false);\n@@ -234,27 +247,22 @@ public void robotInit() {\n     // CommandScheduler.getInstance().setDefaultCommand(launcher_, range_);\n \n \n-    driveStation_.primaryTrigger_.whileHeld(new RunGrabber(0.3));\n+    driveStation_.primaryTrigger_.whileHeld(new RunGrabber(0.6));\n+    // driveStation_.testing1_.whileHeld(new RunGrabber(0.3)); //for flysky controller\n \n \n     driveStation_.secondary2_.whileHeld(new SteerToCrosshairs());\n     //driveStation_.secondary3_.whenPressed(new RangeToCrosshairs(constants_.UPPER_TARGET_HEIGHT - constants_.DOUBLE_CAMERA_HEIGHT));\n-    //driveStation_.secondary3_.whenPressed(new SetAngleTest());\n     driveStation_.secondary4_.whenPressed(new LoadLauncherBack());\n-    driveStation_.secondary5_.whileHeld(new LoadLauncher());\n-    driveStation_.secondary6_.whenPressed(new LauncherSpinTest(200));\n-    driveStation_.secondary7_.whenPressed(new LauncherSpinTest(-200));\n-    //driveStation_.secondary8_.whileHeld(new LauncherSpinTest());\n-    driveStation_.secondary8_.whenPressed(new LauncherScrewTest(true));//launcher_.getScrewPosition() - 0.1)));\n-    driveStation_.secondary9_.whenPressed(new LauncherScrewTest(false));\n-    // driveStation_.secondary11_.whileHeld(new LauncherScrewTest(true));\n-    driveStation_.secondary11_.whileHeld(new LauncherScrewTest(false));\n-\n-    // driveStation_.secondaryTrigger_.whileHeld(new LoadLauncher());//HERE\n-    driveStation_.secondaryTrigger_.whenPressed(new ToggleLauncher());\n-    // driveStation_.secondaryTrigger_.whileHeld(new Launch());\n-    // driveStation_.secondaryTrigger_.whileHeld(new EmptyLoader());\n-    //driveStation_.secondaryTrigger_.whileActiveContinuous(new SteerToCrosshairs());\n+    driveStation_.secondaryTrigger_.whileHeld(new LoadLauncher());\n+      driveStation_.secondary7_.whenPressed(new LauncherSpinTest(-100));\n+      driveStation_.secondary6_.whenPressed(new LauncherSpinTest(100));\n+      driveStation_.secondary8_.whenPressed(new LauncherSpinTest(-10));\n+      driveStation_.secondary9_.whenPressed(new LauncherSpinTest(10));\n+      driveStation_.secondary10_.whileHeld(new LauncherScrewTest(false));\n+     driveStation_.secondary11_.whileHeld(new LauncherScrewTest(true));\n+\n+    driveStation_.secondary3_.whenPressed(new ToggleLauncher());\n     //driveStation_.secondaryTrigger_.whileHeld(new ContinousAimToTarget3());\n \n "
  },
  {
    "sha": "8ed0b0c7b84e781458efad5c5a4ef553a7ffab1f",
    "filename": "src/main/java/org/usfirst/frc/team2077/commands/AutoNavRoutes.java",
    "status": "modified",
    "additions": 71,
    "deletions": 3,
    "changes": 74,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/AutoNavRoutes.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/AutoNavRoutes.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/commands/AutoNavRoutes.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -13,7 +13,7 @@\n import org.usfirst.frc.team2077.subsystems.Launcher;//NEW\n \n public class AutoNavRoutes extends SequentialCommandGroup {\n-    ///---Mapping---///\n+///---Mapping---///\n     final private static double NORTH_MULTIPLIER = 1.0;\n     final private static double EAST_MULTIPLIER = 1.0;\n     final private static double ROTATION_MULTIPLIER = 1.0;\n@@ -33,7 +33,7 @@ private static double m3R(double rotation_){\n }\n //Callabration values needed.\n \n-    private static SequentialCommandGroup barrelRace() {\n+    private static SequentialCommandGroup barrelRaceOrig() {\n         double _unit = 21.5;\n         return (new SequentialCommandGroup(\n             // new Move2(m3N(0.0),m3E(0.0)), //North, East, Rotation\n@@ -58,7 +58,52 @@ private static SequentialCommandGroup barrelRace() {\n         );\n     }\n \n+    private static SequentialCommandGroup barrelRace() {\n+        return (new SequentialCommandGroup(\n+            new Move2(m3N(135.0),m3E(0.0)),\n+\n+            new Move2(m3N(0.0),m3E(53.0)),\n+            new Move2(m3N(-50.0),m3E(0.0)),\n+            new Move2(m3N(0.0),m3E(-50.0)),//Gets out of first hoop\n+            // new Move2(m3N(0.0),m3E(0.0),m3R(-0.25)),\n+            // new Move2(m3N(0.0),m3E(0.0),m3R(-0.125)),//\n+\n+            // new Move2(m3N(0.0),m3E(0.0),m3R(-5.0)),\n+            // new Move2(m3N(0.0),m3E(0.0),m3R(5.0)),\n+                // new Move2(-0.15)\n+                // new Move2(-1.0),\n+                // new Move2(-0.09),\n+            // new Move2(m3R(5.0)),\n+            new Move2(m3N(147.0),m3E(0.0)),\n+\n+            new Move2(m3N(0.0),m3E(-63.0)),\n+            new Move2(m3N(-55.0),m3E(0.0)),\n+            new Move2(m3N(0.0),m3E(127)),\n+\n+            // new Move2(m3N(90.0),m3E(135.0)),\n+            new Move2(m3N(105.0),m3E(0.0)),//\n+            // new Move2(m3N(70.0),m3E(0.0)),//\n+            // new Move2(m3N(0.0),m3E(80.0)),\n+            // new Move2(m3N(100.0),m3E(58.0)),\n+            // new Move2(m3N(10.0),m3E(0.0)),\n+            new Move2(m3N(0.0),m3E(-47.0)),\n+            new Move2(1),\n+            new Move2(m3N(-290.0),m3E(0.0))\n+\n+\n+            // new Move2(m3N(0.01),m3E(0.01))\n+            // new Move2(m3N(0.0),m3E(300.0))\n+            // )).schedule();\n+            )\n+        );\n+    }\n+\n+\n     private static SequentialCommandGroup slalomPath() {\n+        ///The file in \n+        ///C:\\Users\\robokm\\Desktop\\Local2020\\2020\\_StarDestroyer\\STARDESTROYER_1.8_(03-5-21)-Before\n+        ///contains the last used optimised code for the slalom path.\n+\n         //Robot will start with the center 16.5in behind the ende as close to the finish zone as posssalbe\n         // return (new SequentialCommandGroup(\n         //     new Move2(m3N(33),m3E(0)),\n@@ -109,6 +154,8 @@ private static SequentialCommandGroup slalomPath() {\n     }\n   \n     private static SequentialCommandGroup bouncePath() {\n+        boolean i = false;\n+        if(i){\n         return (new SequentialCommandGroup(\n             new Move2(m3N(40.0),m3E(0.0)),//center is 20 inches out\n             new Move2(m3N(10),m3E(-35)),//Hits first star\n@@ -119,13 +166,34 @@ private static SequentialCommandGroup bouncePath() {\n             new Move2(m3N(15),m3E(115.0)),\n             new Move2(m3N(30.0),m3E(0.0)),\n             new Move2(m3N(15),m3E(-115.0)),//Hits the third star\n-            new Move2(m3N(10),m3E(35)),//Hits first star\n+            new Move2(m3N(10),m3E(15)),//Hits first star\n             new Move2(m3N(40.0),m3E(0.0))//center is ~20 inches out\n             // new Move2(m3N(0),m3E(0))\n             // )).schedule();\n             )\n         );\n+        }else{\n+        return (new SequentialCommandGroup(\n+            new Move2(m3N(55.0),m3E(0.0)),\n+            new Move2(m3N(0.0),m3E(-55.0)),//Hits first cone\n+            new Move2(m3N(0.0),m3E(59.0)),//Out by D3\n+            new Move2(m3N(27.0),m3E(0.0)),\n+            new Move2(m3N(0.0),m3E(54.0)),//Below D5\n+            new Move2(m3N(55.0),m3E(0.0)),\n+            new Move2(m3N(0.0),m3E(-107.0)),//Hits the second spot\n+            new Move2(m3N(0.0),m3E(108.0)),\n+            new Move2(m3N(80.0),m3E(0.0)),//Second fill left moveup\n+            new Move2(m3N(0.0),m3E(-108.0)),//Should hit thrid location\n+            new Move2(m3N(0.0),m3E(63.0)),//Move to in frount of the finish zone\n+            new Move2(m3N(36.0),m3E(0.0))\n+\n+\n+            // new Move2(m3N(0.001),m3E(0.001))\n+            )\n+        );\n+\n         }\n+    }\n \n \n     public enum AutoNavRoute {"
  },
  {
    "sha": "6fb391fb66ee0279b511491b12081b10979d99ab",
    "filename": "src/main/java/org/usfirst/frc/team2077/commands/AutonomousCheck.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/AutonomousCheck.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/AutonomousCheck.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/commands/AutonomousCheck.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -16,9 +16,9 @@\n     private boolean galacticSearch;\n     private boolean a;\n     private boolean red;\n-    private boolean barrelRacing;\n-    private boolean slalom;\n-    private boolean bounce;\n+    private boolean barrelRacing = false;\n+    private boolean slalom = false;\n+    private boolean bounce = false;\n \n \n "
  },
  {
    "sha": "927fbad874efe1274f756bba8b7bebd00020076e",
    "filename": "src/main/java/org/usfirst/frc/team2077/commands/GalacticSearch.java",
    "status": "modified",
    "additions": 29,
    "deletions": 26,
    "changes": 55,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/GalacticSearch.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/GalacticSearch.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/commands/GalacticSearch.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -10,21 +10,20 @@\n \n     private static SequentialCommandGroup getMoveToPickUp(double north, double east, double rotation) {\n         int grabDistance = 20;\n-        if (rotation != 0) {\n-            return new SequentialCommandGroup(\n-                new Move2(rotation),  \n-                new Move2(north - grabDistance, east - grabDistance),\n-                new RunGrabberToggle(.3), //TODO: Look at this value\n-                new Move2(grabDistance, grabDistance),\n-                new RunGrabberToggle(0)\n-            );\n+        // if (rotation != 0) {\n+        //     return new SequentialCommandGroup(\n+        //         new Move2(rotation),  \n+        //         new Move2(north - grabDistance, 0),\n+        //         new RunGrabberToggle(.3), //TODO: Look at this value\n+        //         new Move2(grabDistance, 0),\n+        //         new RunGrabberToggle(0)\n+        //     );\n \n-        }\n+        // }\n         return new SequentialCommandGroup(\n-            \n-            new Move2(north - grabDistance, east - grabDistance),\n-            new RunGrabberToggle(.3), //TODO: Look at this value\n-            new Move2(grabDistance, grabDistance),\n+            new Move2(north - grabDistance, 0),\n+            new RunGrabberToggle(.6), //TODO: Look at this value\n+            new Move2(grabDistance, 0),\n             new RunGrabberToggle(0)\n         );\n     }\n@@ -34,12 +33,13 @@ public GalacticSearch(boolean a, boolean red) {\n     if (a) {\n         if (red) {\n             addCommands( //Path A red\n-                getMoveToPickUp(60, 0, 0),\n-                new Move2(0, 30),\n-                getMoveToPickUp(60, 0, 0),\n-                new Move2(0, -90),\n-                getMoveToPickUp(60, 0, 0),\n-                new Move2(180, 0)\n+                new RunGrabberToggle(.6),\n+                new Move2(60, 0),\n+                new Move2(0, 24),\n+                new Move2(30, 0),\n+                new Move2(-5, -70),\n+                new Move2(172, 0),\n+                new RunGrabberToggle(0)\n                 // getMoveToPickUp(90, 0, 0),\n                 // getMoveToPickUp(60, 30, 30),\n                 // getMoveToPickUp(30, -90, -101.56), //tan^-1((pi/2)/(pi/6)) + 30 == tan^-1(90/30) + 30\n@@ -53,7 +53,7 @@ public GalacticSearch(boolean a, boolean red) {\n                 getMoveToPickUp(30, 0, 0),\n                 new Move2(0, 30),\n                 getMoveToPickUp(60, 0, 0),\n-                new Move2(60, 0)\n+                new Move2(30, 0)\n                 // getMoveToPickUp(180, 0, 0),\n                 // getMoveToPickUp(30, -90, -71.56),\n                 // getMoveToPickUp(60, 30, 101.56),\n@@ -64,12 +64,15 @@ public GalacticSearch(boolean a, boolean red) {\n     } else {\n         if (red) {\n             addCommands( //Path B red\n-                getMoveToPickUp(60, 0, 0),\n-                new Move2(0, 60),\n-                getMoveToPickUp(60, 0, 0),\n-                new Move2(0, -60),\n-                getMoveToPickUp(60, 0, 0),\n-                new Move2(120, 0)\n+                new RunGrabberToggle(.5),\n+                new Move2(1, 0),\n+                new Move2(0, -26.5),\n+                new Move2(22, 0),\n+                new Move2(0, 65),\n+                new Move2(51, 0),\n+                new Move2(0, -70),\n+                new Move2(120, 0),\n+                new RunGrabberToggle(0)\n                 // getMoveToPickUp(60, 0, 0),\n                 // getMoveToPickUp(60, 60, 45),\n                 // getMoveToPickUp(60, -60, -90),"
  },
  {
    "sha": "f9660e33791e18148330bcbba2679470ab20be45",
    "filename": "src/main/java/org/usfirst/frc/team2077/commands/LauncherSpinTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/LauncherSpinTest.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/LauncherSpinTest.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/commands/LauncherSpinTest.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -21,8 +21,15 @@ public LauncherSpinTest(double increment) {\n   @Override\n   public void initialize() {\n     double i = Math.abs(increment_);\n-    double rpm = Math.round(robot_.testLauncher_.launcherRPM_ / i) * i + increment_;\n-    robot_.testLauncher_.setLauncherRPM(Math.max(i, Math.min(robot_.testLauncher_.launcherMaxRPM_, rpm)));\n+    // double rpm = Math.round(robot_.testLauncher_.launcherRPM_ / i) * i + increment_;\n+    double rpm = Math.max(robot_.testLauncher_.launcherRPM_ + increment_, 0);\n+    System.out.println(String.format(\"[LauncherSpinTest] Increment: %s, launcherRpm: %s\",\n+                                     increment_,\n+                                     robot_.testLauncher_.launcherRPM_));\n+    // robot_.testLauncher_.setLauncherRPM(Math.max(i, Math.min(robot_.testLauncher_.launcherMaxRPM_, rpm)));\n+    robot_.testLauncher_.setLauncherRPM(rpm);\n+    System.out.println(String.format(\"[LauncherSpinTest] launcherRpm: %s\",\n+                                     robot_.testLauncher_.launcherRPM_));\n   }\n \n   @Override"
  },
  {
    "sha": "d096964711f61c2cbef0dbcb1de65161be02c734",
    "filename": "src/main/java/org/usfirst/frc/team2077/commands/LoadLauncher.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/LoadLauncher.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/LoadLauncher.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/commands/LoadLauncher.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -20,7 +20,7 @@ public void initialize() {\n \n   @Override\n   public void execute() {\n-    robot_.testLauncher_.runLoader(1.0);\n+    robot_.testLauncher_.runLoader(.2);\n   }\n \n   @Override"
  },
  {
    "sha": "f58b141196efacbd32da80c4f93d39a33929c1e3",
    "filename": "src/main/java/org/usfirst/frc/team2077/commands/Move2.java",
    "status": "modified",
    "additions": 168,
    "deletions": 122,
    "changes": 290,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/Move2.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/Move2.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/commands/Move2.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -5,141 +5,187 @@\n \n package org.usfirst.frc.team2077.commands;\n \n-import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n import edu.wpi.first.wpilibj2.command.CommandBase;\n import edu.wpi.first.wpilibj2.command.Subsystem;\n-\n import org.usfirst.frc.team2077.math.Acceleration;\n import org.usfirst.frc.team2077.math.Position;\n \n-import static org.usfirst.frc.team2077.Robot.*;\n-\n-import java.util.Arrays;\n+import static org.usfirst.frc.team2077.Robot.robot_;\n \n \n public class Move2 extends CommandBase {\n \n-  private final double[] distanceTotal_; // {north, east, rotation} (signed)\n-  private final int method_; // 1 2 or 3 (#args to setVelocity/setRotation)\n-\n-  private double[] fast_; // {north, east, rotation} (signed)\n-  private double[] slow_; // {north, east, rotation} (signed)\n-  private double[][] acceleration_; // like getAccelerationLimits, but scaled\n-\n-  private double[] distanceRemaining_; // {north, east, rotation} (signed)\n-\n-  private boolean[] finished_; // {north, east, rotation}\n-\n-\n-  private Position origin_;\n-\n-  public static double bestRotation(double rotation) {\n-    double remainder = Math.abs(rotation % 180);\n-    int halfTurns = (int)rotation / 180;\n-    if (halfTurns % 2 == 1) {\n-      return -180 + remainder;\n-    }\n-    return remainder;\n-  }\n-\n-\n-  public Move2(double north, double east, double rotation) {\n-    this(north, east, rotation, 3, robot_.position_, robot_.heading_);\n-    // this(north, east, ation(rotation), 3, robot_.position_, robot_.heading_);\n-  }\n-\n-  public Move2(double north, double east) {\n-    this(north, east, 0, 2, robot_.position_);\n-  }\n-\n-  public Move2(double rotation) {\n-    this(0, 0, rotation, 1, robot_.heading_);\n-  }\n-\n-  private Move2(double north, double east, double rotation, int method, Subsystem... requirements) {\n-\n-    addRequirements(requirements);\n-    distanceTotal_ = new double[] {north, east * .68, rotation * 7/8}; //fudged values for the multipliers\n-    method_ = method;\n-    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 DISTANCE:\" + distanceTotal_[0] + \" \" + distanceTotal_[1] + \" \" + distanceTotal_[2] + \" (\" + method_ + \")\");\n-  }\n-\n-\n-  @Override\n-  public void initialize() {\n-\n-    double[] max = robot_.chassis_.getMaximumVelocity(); // {north, east, rotation}\n-    double[] min = robot_.chassis_.getMinimumVelocity(); // {north, east, rotation}\n-\n-    // scale factors for north/east/rotation by fraction of maximum velocity\n-    double[] scale = {Math.abs(distanceTotal_[0])/max[0], Math.abs(distanceTotal_[1])/max[1], Math.abs(distanceTotal_[2])/max[2]};\n-    double maxScale = Math.max(scale[0], Math.max(scale[1], scale[2]));\n-    scale = new double[] {scale[0]/maxScale, scale[1]/maxScale, scale[2]/maxScale}; // 0 - 1\n-    double[] sign = {Math.signum(distanceTotal_[0]), Math.signum(distanceTotal_[1]), Math.signum(distanceTotal_[02])};\n-\n-    // scale speeds and acceleration/deceleration\n-    fast_ = new double[] {\n-      Math.max(min[0], max[0]*scale[0]) * sign[0],\n-      Math.max(min[1], max[1]*scale[1]) * sign[1],\n-      Math.max(min[2], max[2]*scale[2]) * sign[2]}; // don't let maximum scale below minimum\n-    slow_ = new double[] {min[0] * sign[0], min[1] * sign[1], min[2] * sign[2]}; // don't scale below minimum\n-    acceleration_ = (new Acceleration(robot_.constants_.STARDESTROYER_ACCELERATION_G_LIMIT, robot_.constants_.STARDESTROYER_DECELERATION_G_LIMIT, robot_.chassis_, scale).get()); \n-\n-    origin_ = new Position(robot_.chassis_.getPosition());\n-    distanceRemaining_ = new double[] {distanceTotal_[0], distanceTotal_[1], distanceTotal_[2]};\n-    finished_ = new boolean[] {Math.abs(distanceRemaining_[0])==0., Math.abs(distanceRemaining_[1])==0., Math.abs(distanceRemaining_[2])==0.};\n-\n-    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 DISTANCE:\" + distanceTotal_[0] + \" \" + distanceTotal_[1] + \" \" + distanceTotal_[2] + \" (\" + method_ + \")\");\n-    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 SCALE:\" + scale[0] + \" \" + scale[1] + \" \" + scale[2]);\n-    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 FAST:\" + fast_[0] + \" \" + fast_[1] + \" \" + fast_[2]);\n-    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 SLOW:\" + slow_[0] + \" \" + slow_[1] + \" \" + slow_[2]);\n-    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL N:\" + acceleration_[0][0] + \" \" + acceleration_[0][1]);\n-    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL E:\" + acceleration_[1][0] + \" \" + acceleration_[1][1]);\n-    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL R:\" + acceleration_[2][0] + \" \" + acceleration_[2][1]);\n-  }\n-\n-  @Override\n-  public void execute() {\n-\n-    double[] vCurrent = robot_.chassis_.getVelocityCalculated();\n-    double[] vNew = {0, 0, 0};\n-    double[] distanceTraveled = (new Position(robot_.chassis_.getPosition())).distanceRelative(origin_);\n-    boolean[] slow = {false, false, false};\n-    for (int i = 0; i < 3; i++) {\n-      distanceRemaining_[i] = distanceTotal_[i] - distanceTraveled[i];\n-      double distanceToStop = vCurrent[i]*vCurrent[i] / acceleration_[i][1] / 2.;// exact absolute value per physics\n-      distanceToStop += Math.max(distanceToStop*.05, Math.abs(vCurrent[i])*.04); // pad just a bit to avoid overshoot\n-      slow[i] = finished_[i] || Math.abs(distanceRemaining_[i])<=distanceToStop; // slow down within padded stopping distance\n-    }\n-    boolean s = Math.abs(distanceTotal_[2])>0 ? slow[2] : (slow[0] && slow[1]);\n-    for (int i = 0; i < 3; i++) {\n-      vNew[i] = finished_[i] ? 0. : s ? slow_[i] : fast_[i];\n-    }\n+\tprivate final double[] distanceTotal_; // {north, east, rotation} (signed)\n+\tprivate final int method_; // 1 2 or 3 (#args to setVelocity/setRotation)\n+\n+\tprivate double[] fast_; // {north, east, rotation} (signed)\n+\tprivate double[] slow_; // {north, east, rotation} (signed)\n+\tprivate double[][] acceleration_; // like getAccelerationLimits, but scaled\n+\n+\tprivate double[] distanceRemaining_; // {north, east, rotation} (signed)\n+\n+\tprivate boolean[] finished_; // {north, east, rotation}\n+\n+\n+\tprivate Position origin_;\n+\n+\tpublic static double bestRotation(double rotation) {\n+\t\tdouble remainder = Math.abs(rotation % 180);\n+\t\tint halfTurns = (int) rotation / 180;\n+\t\tif(halfTurns % 2 == 1) {\n+\t\t\treturn -180 + remainder;\n+\t\t}\n+\t\treturn remainder;\n+\t}\n+\n+\n+\tpublic Move2(double north, double east, double rotation) {\n+\t\tthis(north, east, rotation, 3, robot_.position_, robot_.heading_);\n+\t\t// this(north, east, ation(rotation), 3, robot_.position_, robot_.heading_);\n+\t}\n+\n+\tpublic Move2(double north, double east) {\n+\t\tthis(north, east, 0, 2, robot_.position_);\n+\t}\n+\n+\tpublic Move2(double rotation) {\n+\t\tthis(0, 0, rotation, 1, robot_.heading_);\n+\t}\n+\n+\tprivate Move2(double north, double east, double rotation, int method, Subsystem... requirements) {\n+\n+\t\taddRequirements(requirements);\n+\t\t// distanceTotal_ = new double[] {north, east * .68, rotation * 7/8}; //fudged values for the multipliers\n+\t\tdistanceTotal_ = new double[]{north, east, rotation}; //fudged values for the multipliers\n+\t\tmethod_ = method;\n+\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 DISTANCE:\" +\n+\t\t\t\t\t\t   distanceTotal_[0] +\n+\t\t\t\t\t\t   \" \" +\n+\t\t\t\t\t\t   distanceTotal_[1] +\n+\t\t\t\t\t\t   \" \" +\n+\t\t\t\t\t\t   distanceTotal_[2] +\n+\t\t\t\t\t\t   \" (\" +\n+\t\t\t\t\t\t   method_ +\n+\t\t\t\t\t\t   \")\");\n+\t}\n+\n+\n+\t@Override\n+\tpublic void initialize() {\n+\n+\t\tdouble[] max = robot_.chassis_.getMaximumVelocity(); // {north, east, rotation}\n+\t\tdouble[] min = robot_.chassis_.getMinimumVelocity(); // {north, east, rotation}\n+\n+\t\t// scale factors for north/east/rotation by fraction of maximum velocity\n+\t\tdouble[] scale = {\n+\t\t\tMath.abs(distanceTotal_[0]) / max[0],\n+\t\t\tMath.abs(distanceTotal_[1]) / max[1],\n+\t\t\tMath.abs(distanceTotal_[2]) / max[2]\n+\t\t};\n+\t\tdouble maxScale = Math.max(scale[0], Math.max(scale[1], scale[2]));\n+\t\tscale = new double[]{scale[0] / maxScale, scale[1] / maxScale, scale[2] / maxScale}; // 0 - 1\n+\t\tdouble[] sign = {\n+\t\t\tMath.signum(distanceTotal_[0]),\n+\t\t\tMath.signum(distanceTotal_[1]),\n+\t\t\tMath.signum(distanceTotal_[02])\n+\t\t};\n+\n+\t\t// scale speeds and acceleration/deceleration\n+\t\tfast_ = new double[]{\n+\t\t\tMath.max(min[0], max[0] * scale[0]) * sign[0],\n+\t\t\tMath.max(min[1], max[1] * scale[1]) * sign[1],\n+\t\t\tMath.max(min[2], max[2] * scale[2]) * sign[2]\n+\t\t}; // don't let maximum scale below minimum\n+\t\tslow_ = new double[]{min[0] * sign[0], min[1] * sign[1], min[2] * sign[2]}; // don't scale below minimum\n+\t\tacceleration_ = (new Acceleration(\n+\t\t\trobot_.constants_.STARDESTROYER_ACCELERATION_G_LIMIT,\n+\t\t\trobot_.constants_.STARDESTROYER_DECELERATION_G_LIMIT,\n+\t\t\trobot_.chassis_,\n+\t\t\tscale\n+\t\t).get());\n+\n+\t\torigin_ = new Position(robot_.chassis_.getPosition());\n+\t\tdistanceRemaining_ = new double[]{distanceTotal_[0], distanceTotal_[1], distanceTotal_[2]};\n+\t\tfinished_ = new boolean[]{\n+\t\t\tMath.abs(distanceRemaining_[0]) == 0.,\n+\t\t\tMath.abs(distanceRemaining_[1]) == 0.,\n+\t\t\tMath.abs(distanceRemaining_[2]) == 0.\n+\t\t};\n+\n+\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 DISTANCE:\" +\n+\t\t\t\t\t\t   distanceTotal_[0] +\n+\t\t\t\t\t\t   \" \" +\n+\t\t\t\t\t\t   distanceTotal_[1] +\n+\t\t\t\t\t\t   \" \" +\n+\t\t\t\t\t\t   distanceTotal_[2] +\n+\t\t\t\t\t\t   \" (\" +\n+\t\t\t\t\t\t   method_ +\n+\t\t\t\t\t\t   \")\");\n+\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 SCALE:\" + scale[0] + \" \" + scale[1] + \" \" + scale[2]);\n+\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 FAST:\" + fast_[0] + \" \" + fast_[1] + \" \" + fast_[2]);\n+\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 SLOW:\" + slow_[0] + \" \" + slow_[1] + \" \" + slow_[2]);\n+\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL N:\" + acceleration_[0][0] + \" \" + acceleration_[0][1]);\n+\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL E:\" + acceleration_[1][0] + \" \" + acceleration_[1][1]);\n+\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL R:\" + acceleration_[2][0] + \" \" + acceleration_[2][1]);\n+\t}\n+\n+\tprivate double[] vCurrent;\n+\n+\t@Override\n+\tpublic void execute() {\n+\n+\t\tvCurrent = robot_.chassis_.getVelocityCalculated();\n+\t\tdouble[] vNew = {0, 0, 0};\n+\t\tdouble[] distanceTraveled = (new Position(robot_.chassis_.getPosition())).distanceRelative(origin_);\n+\t\tboolean[] slow = {false, false, false};\n+\t\tfor(int i = 0; i < 3; i++) {\n+\t\t\tdistanceRemaining_[i] = distanceTotal_[i] - distanceTraveled[i];\n+\t\t\tdouble distanceToStop = vCurrent[i] * vCurrent[i] /\n+\t\t\t\t\t\t\t\t\tacceleration_[i][1] /\n+\t\t\t\t\t\t\t\t\t2.;// exact absolute value per physics\n+\t\t\tdistanceToStop += Math.max(\n+\t\t\t\tdistanceToStop * .05,\n+\t\t\t\tMath.abs(vCurrent[i]) * .04\n+\t\t\t); // pad just a bit to avoid overshoot\n+\t\t\tslow[i] = finished_[i] ||\n+\t\t\t\t\t  Math.abs(distanceRemaining_[i]) <= distanceToStop; // slow down within padded stopping distance\n+\t\t}\n+\t\tboolean s = Math.abs(distanceTotal_[2]) > 0 ? slow[2] : (slow[0] && slow[1]);\n+\t\tfor(int i = 0; i < 3; i++) {\n+\t\t\tvNew[i] = finished_[i] ? 0. : s ? slow_[i] : fast_[i];\n+\t\t}\n /*\n     System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2:\"\n     + finished_[0] + \"/\" + finished_[1] + \"/\" + finished_[2] + \" \" + slow[0] + \"/\" + slow[1] + \"/\" + slow[2]\n     + Math.round(distanceTraveled[0]*10)/10. + \"/\" + Math.round(distanceTotal_[0]*10)/10. + \"@\" + Math.round(vNew[0]*10)/10. + \"   \"\n     + Math.round(distanceTraveled[1]*10)/10. + \"/\" + Math.round(distanceTotal_[1]*10)/10. + \"@\" + Math.round(vNew[1]*10)/10. + \"   \"\n     + Math.round(distanceTraveled[2]*10)/10. + \"/\" + Math.round(distanceTotal_[2]*10)/10. + \"@\" + Math.round(vNew[2]*10)/10. + robot_.angleSensor_.getAngle());\n */\n-    switch (method_) {\n-      case 3:\n-        robot_.chassis_.setVelocity(vNew[0], vNew[1], vNew[2], acceleration_);\n-        break;\n-      case 2:\n-        robot_.chassis_.setVelocity(vNew[0], vNew[1], acceleration_);\n-        break;\n-      case 1:\n-        robot_.chassis_.setRotation(vNew[2], acceleration_);\n-        break;\n-    }\n-  }\n-\n-  @Override\n-  public boolean isFinished() {\n-    for (int i = 0; i < 3; i++) {\n-      finished_[i] = finished_[i] || (Math.signum(distanceRemaining_[i]) != Math.signum(distanceTotal_[i]));\n-    }\n-    return Math.abs(distanceTotal_[2])>0 ? finished_[2] : (finished_[0] && finished_[1]);\n-  }\n-}\n+\t\tswitch(method_) {\n+\t\t\tcase 3:\n+\t\t\t\trobot_.chassis_.setVelocity(vNew[0], vNew[1], vNew[2], acceleration_);\n+\t\t\t\tbreak;\n+\t\t\tcase 2:\n+\t\t\t\trobot_.chassis_.setVelocity(vNew[0], vNew[1], acceleration_);\n+\t\t\t\tbreak;\n+\t\t\tcase 1:\n+\t\t\t\trobot_.chassis_.setRotation(vNew[2], acceleration_);\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isFinished() {\n+\t\tfor(int i = 0; i < 3; i++) {\n+\t\t\tfinished_[i] = finished_[i] || (Math.signum(distanceRemaining_[i]) != Math.signum(distanceTotal_[i]));\n+\t\t}\n+\t\tboolean reachedGoal = Math.abs(distanceTotal_[2]) > 0 ? finished_[2] : (finished_[0] && finished_[1]);\n+\n+\t\tboolean stoppedMoving = true;\n+\t\tfor(double velocity : vCurrent) {\n+\t\t\tstoppedMoving = stoppedMoving && Math.abs(velocity) <= 0.1;\n+\t\t}\n+\n+\t\treturn reachedGoal && stoppedMoving;\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "fb7d392b8ee0496e5ed149a1e4db9bb576525476",
    "filename": "src/main/java/org/usfirst/frc/team2077/commands/Move2.java.new",
    "status": "added",
    "additions": 159,
    "deletions": 0,
    "changes": 159,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/Move2.java.new",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/Move2.java.new",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/commands/Move2.java.new?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -0,0 +1,159 @@\n+/*----------------------------------------------------------------------------*/\n+/* Copyright (c) 2020 FRC Team 2077. All Rights Reserved.                     */\n+/* Open Source Software - may be modified and shared by FRC teams.            */\n+/*----------------------------------------------------------------------------*/\n+\n+package org.usfirst.frc.team2077.commands;\n+\n+import edu.wpi.first.wpilibj2.command.CommandBase;\n+import edu.wpi.first.wpilibj2.command.Subsystem;\n+\n+import org.usfirst.frc.team2077.math.Acceleration;\n+import org.usfirst.frc.team2077.math.Position;\n+\n+import static org.usfirst.frc.team2077.Robot.*;\n+\n+\n+public class Move2 extends CommandBase {\n+\n+  private final double[] distanceTotal_; // {north, east, rotation} (signed)\n+  private final Style method_; // 1 2 or 3 (#args to setVelocity/setRotation)\n+\n+  private double[] fast_; // {north, east, rotation} (signed)\n+  private double[] slow_; // {north, east, rotation} (signed)\n+  private double[][] acceleration_; // like getAccelerationLimits, but scaled\n+\n+  private double[] distanceRemaining_; // {north, east, rotation} (signed)\n+\n+  private boolean[] finished_; // {north, east, rotation}\n+\n+  public enum Style {\n+    MOVE_AND_ROTATE,\n+    MOVE,\n+    ROTATE\n+  }\n+\n+\n+  private Position origin_;\n+\n+  public static double bestRotation(double rotation) {\n+    double remainder = Math.abs(rotation % 180);\n+    int halfTurns = (int)rotation / 180;\n+    if (halfTurns % 2 == 1) {\n+      return -180 + remainder;\n+    }\n+    return remainder;\n+  }\n+\n+\n+  public Move2(double north, double east, double rotation) {\n+    this(north, east, rotation, Style.MOVE_AND_ROTATE, robot_.position_, robot_.heading_);\n+    // this(north, east, ation(rotation), 3, robot_.position_, robot_.heading_);\n+  }\n+\n+  public Move2(double north, double east) {\n+    this(north, east, 0, Style.MOVE, robot_.position_);\n+  }\n+\n+  public Move2(double rotation) {\n+    this(0, 0, rotation, Style.ROTATE, robot_.heading_);\n+  }\n+\n+  private Move2(double north, double east, double rotation, Style method, Subsystem... requirements) {\n+\n+    addRequirements(requirements);\n+    if (north != 0 && east != 0) {\n+      distanceTotal_ = new double[] {0, 0};\n+    } else {\n+      distanceTotal_ = new double[] {north, east * .68, rotation * 7/8};\n+    }\n+      method_ = method;\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 DISTANCE:\" + distanceTotal_[0] + \" \" + distanceTotal_[1] + \" \" + distanceTotal_[2] + \" (\" + method_ + \")\");\n+  }\n+\n+\n+  @Override\n+  public void initialize() {\n+\n+    double[] max = robot_.chassis_.getMaximumVelocity(); // {north, east, rotation}\n+    double[] min = robot_.chassis_.getMinimumVelocity(); // {north, east, rotation}\n+\n+    // scale factors for north/east/rotation by fraction of maximum velocity\n+    double[] scale = {Math.abs(distanceTotal_[0])/max[0], Math.abs(distanceTotal_[1])/max[1], Math.abs(distanceTotal_[2])/max[2]};\n+    double maxScale = Math.max(scale[0], Math.max(scale[1], scale[2]));\n+    scale = new double[] {scale[0]/maxScale, scale[1]/maxScale, scale[2]/maxScale}; // 0 - 1\n+    double[] sign = {Math.signum(distanceTotal_[0]), Math.signum(distanceTotal_[1]), Math.signum(distanceTotal_[02])};\n+\n+    // scale speeds and acceleration/deceleration\n+    fast_ = new double[] {\n+      Math.max(min[0], max[0]*scale[0]) * sign[0],\n+      Math.max(min[1], max[1]*scale[1]) * sign[1],\n+      Math.max(min[2], max[2]*scale[2]) * sign[2]}; // don't let maximum scale below minimum\n+    slow_ = new double[] {min[0] * sign[0], min[1] * sign[1], min[2] * sign[2]}; // don't scale below minimum\n+    acceleration_ = (new Acceleration(robot_.constants_.STARDESTROYER_ACCELERATION_G_LIMIT, robot_.constants_.STARDESTROYER_DECELERATION_G_LIMIT, robot_.chassis_, scale).get()); \n+\n+    origin_ = new Position(robot_.chassis_.getPosition());\n+    distanceRemaining_ = new double[] {distanceTotal_[0], distanceTotal_[1], distanceTotal_[2]};\n+    finished_ = new boolean[] {Math.abs(distanceRemaining_[0])==0., Math.abs(distanceRemaining_[1])==0., Math.abs(distanceRemaining_[2])==0.};\n+\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 DISTANCE:\" + distanceTotal_[0] + \" \" + distanceTotal_[1] + \" \" + distanceTotal_[2] + \" (\" + method_ + \")\");\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 SCALE:\" + scale[0] + \" \" + scale[1] + \" \" + scale[2]);\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 FAST:\" + fast_[0] + \" \" + fast_[1] + \" \" + fast_[2]);\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 SLOW:\" + slow_[0] + \" \" + slow_[1] + \" \" + slow_[2]);\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL N:\" + acceleration_[0][0] + \" \" + acceleration_[0][1]);\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL E:\" + acceleration_[1][0] + \" \" + acceleration_[1][1]);\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2 ACCEL R:\" + acceleration_[2][0] + \" \" + acceleration_[2][1]);\n+  }\n+\n+  double[] vCurrent;\n+  @Override\n+  public void execute() {\n+\n+    vCurrent = robot_.chassis_.getVelocityCalculated();\n+    double[] vNew = {0, 0, 0};\n+    double[] distanceTraveled = (new Position(robot_.chassis_.getPosition())).distanceRelative(origin_);\n+    boolean[] slow = {false, false, false};\n+    for (int i = 0; i < 3; i++) {\n+      distanceRemaining_[i] = distanceTotal_[i] - distanceTraveled[i];\n+      double distanceToStop = vCurrent[i]*vCurrent[i] / acceleration_[i][1] / 2.;// exact absolute value per physics\n+      distanceToStop += Math.max(distanceToStop*.05, Math.abs(vCurrent[i])*.04); // pad just a bit to avoid overshoot\n+      slow[i] = finished_[i] || Math.abs(distanceRemaining_[i])<=distanceToStop; // slow down within padded stopping distance\n+    }\n+    boolean s = Math.abs(distanceTotal_[2])>0 ? slow[2] : (slow[0] && slow[1]);\n+    for (int i = 0; i < 3; i++) {\n+      vNew[i] = finished_[i] ? 0. : s ? slow_[i] : fast_[i];\n+    }\n+/*\n+    System.out.println(\"$$$$$$$$$$$$$$$$$$ MOVE2:\"\n+    + finished_[0] + \"/\" + finished_[1] + \"/\" + finished_[2] + \" \" + slow[0] + \"/\" + slow[1] + \"/\" + slow[2]\n+    + Math.round(distanceTraveled[0]*10)/10. + \"/\" + Math.round(distanceTotal_[0]*10)/10. + \"@\" + Math.round(vNew[0]*10)/10. + \"   \"\n+    + Math.round(distanceTraveled[1]*10)/10. + \"/\" + Math.round(distanceTotal_[1]*10)/10. + \"@\" + Math.round(vNew[1]*10)/10. + \"   \"\n+    + Math.round(distanceTraveled[2]*10)/10. + \"/\" + Math.round(distanceTotal_[2]*10)/10. + \"@\" + Math.round(vNew[2]*10)/10. + robot_.angleSensor_.getAngle());\n+*/\n+    switch (method_) {\n+      case MOVE_AND_ROTATE:\n+        robot_.chassis_.setVelocity(vNew[0], vNew[1], vNew[2], acceleration_);\n+        break;\n+      case MOVE:\n+        robot_.chassis_.setVelocity(vNew[0], vNew[1], acceleration_);\n+        break;\n+      case ROTATE:\n+        robot_.chassis_.setRotation(vNew[2], acceleration_);\n+        break;\n+    }\n+  }\n+\n+  @Override\n+  public boolean isFinished() {\n+    for (int i = 0; i < 3; i++) {\n+      finished_[i] = finished_[i] || (Math.signum(distanceRemaining_[i]) != Math.signum(distanceTotal_[i]));\n+    }\n+    boolean reachedGoal = Math.abs(distanceTotal_[2])>0 ? finished_[2] : (finished_[0] && finished_[1]);\n+    boolean stoppedMoving = false;\n+    for(double velocity : vCurrent) {\n+      stoppedMoving = stoppedMoving || Math.abs(velocity) <= 0.1;\n+    }\n+\n+    return reachedGoal && stoppedMoving;\n+  }\n+}"
  },
  {
    "sha": "3c2979ff6603163682906a93698a024c70f81ab0",
    "filename": "src/main/java/org/usfirst/frc/team2077/commands/PrimaryStickDrive3Axis.java",
    "status": "modified",
    "additions": 14,
    "deletions": 8,
    "changes": 22,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/PrimaryStickDrive3Axis.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/commands/PrimaryStickDrive3Axis.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/commands/PrimaryStickDrive3Axis.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -52,26 +52,32 @@ public void execute() {\n       accelerationLimit = accelerationLimitMin + (accelerationLimitMax-accelerationLimitMin) * (1 - dialSetting[2]); // reverse dial\n       //decelerationLimit = Math.max(accelerationLimit, .25); // don't let this go too low for safety\n     }\n+    double throttle = 1 - robot_.driveStation_.secondaryStick_.getRawAxis(2);\n+    //double throttle = 1;\n     \n     robot_.chassis_.setGLimits(accelerationLimit, decelerationLimit);\n \n     // TODO: Who handles rotation updates if another command owns robot_position_?\n     // TODO: Check joystick/drive capabilities and merge w/2-axis.\n-    double north = DriveStation.adjustInputSensitivity( robot_.driveStation_.Flight.getY(), .025, 1);\n-    double east = DriveStation.adjustInputSensitivity(robot_.driveStation_.Flight.getX(), .01, 1);\n-    // double north = DriveStation.adjustInputSensitivity(-robot_.driveStation_.primaryStick_.getY(), .2, 2.5);\n-    // double east = DriveStation.adjustInputSensitivity(robot_.driveStation_.primaryStick_.getX(), .2, 2.5);\n+    // double north = DriveStation.adjustInputSensitivity( robot_.driveStation_.Flight.getY(), .025, 1);\n+    // double east = DriveStation.adjustInputSensitivity(robot_.driveStation_.Flight.getX(), .01, 1);\n+    double north = DriveStation.adjustInputSensitivity(-robot_.driveStation_.primaryStick_.getY(), .2, 2.5);\n+    double east = DriveStation.adjustInputSensitivity(robot_.driveStation_.primaryStick_.getX(), .2, 2.5);\n     if (CommandScheduler.getInstance().requiring(robot_.heading_) != null) {\n       // heading controlled elsewhere, just do position here\n       //System.out.println(\" STICK(3): \" + north + \" \\t\" + east);\n-      robot_.chassis_.setVelocity01(north * speedLimit, east * speedLimit);\n+      north = Math.abs(north) >= Math.abs(east) ? north : 0;\n+      east = Math.abs(east) > Math.abs(east) ? east : 0;\n+      robot_.chassis_.setVelocity01(north * speedLimit * throttle, east * speedLimit * throttle);\n     }\n     else {\n       // heading controlled here, do both position and rotation\n-      // double clockwise = DriveStation.adjustInputSensitivity(robot_.driveStation_.primaryStick_.getRawAxis(4), .2, 2.5);\n-      double clockwise = DriveStation.adjustInputSensitivity(robot_.driveStation_.Flight.getRawAxis(4), .025, 1);\n+      double clockwise = DriveStation.adjustInputSensitivity(robot_.driveStation_.primaryStick_.getRawAxis(2), .2, 2.5);\n+      // double clockwise = DriveStation.adjustInputSensitivity(robot_.driveStation_.Flight.getRawAxis(4), .025, 1);\n       //System.out.println(\" STICK(2): \" + north + \" \\t\" + east + \" \\t\" + clockwise);\n-      robot_.chassis_.setVelocity01(north * speedLimit, east * speedLimit, clockwise * rotationLimit);\n+      north = Math.abs(north) >= Math.abs(east) ? north : 0;  \n+      east = Math.abs(east) > Math.abs(north) ? east : 0;\n+      robot_.chassis_.setVelocity01(north * speedLimit * throttle, east * speedLimit * throttle, clockwise * rotationLimit * throttle);\n     }\n   }\n "
  },
  {
    "sha": "aa96f28edcdb0174b4571ffde525dac16b52ecae",
    "filename": "src/main/java/org/usfirst/frc/team2077/drivetrain/DifferentialChassis.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/drivetrain/DifferentialChassis.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/drivetrain/DifferentialChassis.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/drivetrain/DifferentialChassis.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -102,10 +102,6 @@ protected void updatePosition() {\n         if (debug_) {\n             double[] pS = positionSet_.get();\n             double[] pM = positionMeasured_.get();\n-            System.out.print(\"POSITION:{\"\n-                + Math.round(pS[0]*100.)/100. + \"(\" + Math.round(pM[0]*100.)/100. + \"), \"\n-                + Math.round(pS[1]*100.)/100. + \"(\" + Math.round(pM[1]*100.)/100. + \"), \"\n-                + Math.round(pS[2]*10.)/10. + \"(\" + Math.round(pM[2]*10.)/10. + \")}\");\n         }\n     }\n     "
  },
  {
    "sha": "ce6111a01a3974831de6ae22a0b0e9a8183e4254",
    "filename": "src/main/java/org/usfirst/frc/team2077/drivetrain/MecanumChassis.java",
    "status": "modified",
    "additions": 1,
    "deletions": 5,
    "changes": 6,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/drivetrain/MecanumChassis.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/drivetrain/MecanumChassis.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/drivetrain/MecanumChassis.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -112,10 +112,6 @@ protected void updatePosition() {\n         if (debug_) {\n             double[] pS = positionSet_.get();\n             double[] pM = positionMeasured_.get();\n-            System.out.print(\"POSITION:{\"\n-                + Math.round(pS[0]*100.)/100. + \"(\" + Math.round(pM[0]*100.)/100. + \"), \"\n-                + Math.round(pS[1]*100.)/100. + \"(\" + Math.round(pM[1]*100.)/100. + \"), \"\n-                + Math.round(pS[2]*10.)/10. + \"(\" + Math.round(pM[2]*10.)/10. + \")}\");\n         }\n     }\n \n@@ -140,7 +136,7 @@ protected void updateDriveModules() {\n             driveModule_[i].setVelocity(ws);\n     //        if (debug_ ) System.out.print(\" \" + Math.round(100.*ws)/100. + \"(\" + Math.round(100.*driveModule_[i].getVelocity())/100. + \")\");\n         }\n-        if (debug_ ) System.out.println(\" \" + this);\n+        // if (debug_ ) System.out.println(\" \" + this);\n     }\n \n     @Override"
  },
  {
    "sha": "17cad2de348753fc006adf0bb439c5aa060f216d",
    "filename": "src/main/java/org/usfirst/frc/team2077/drivetrain/SparkNeoDriveModule.java",
    "status": "modified",
    "additions": 24,
    "deletions": 5,
    "changes": 29,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/drivetrain/SparkNeoDriveModule.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/drivetrain/SparkNeoDriveModule.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/drivetrain/SparkNeoDriveModule.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -15,6 +15,8 @@\n         BACK_LEFT(4, false),\n         BACK_RIGHT(3, true) //true\n         ;\n+        private static final double gearRatio = 10.714;\n+        private static final double wheelRadius = 4;\n         public final int ID;\n         public final boolean INVERSE;\n         DrivePosition(int id, boolean inverse) {\n@@ -29,20 +31,23 @@\n     private double setPoint;\n     private final double circumference;\n     private final double maxRPM = robot_.constants_.STARDESTROYER_MOTOR_RPM_LIMIT;\n-    private final double gearRatio = 10.714; // 12.75\n+    private final double gearRatio; \n     private final boolean isReverse;\n+    private final double radius;\n \n     public SparkNeoDriveModule(final DrivePosition pos) {\n-        this(pos.ID, pos.INVERSE);\n+        this(pos.ID, pos.INVERSE, DrivePosition.gearRatio, DrivePosition.wheelRadius);\n     }\n     \n \n-    public SparkNeoDriveModule(final int deviceID, final boolean isReverse_) {\n+    public SparkNeoDriveModule(final int deviceID, final boolean isReverse_, double gearRatio,double radius) {\n         super(deviceID, MotorType.kBrushless);\n-        circumference = robot_.constants_.STARDESTROYER_WHEEL_RADIUS * 2 * Math.PI;\n+        circumference = radius * 2 * Math.PI;\n         pidController = this.getPIDController();\n         encoder = this.getEncoder();\n         isReverse = isReverse_;\n+        this.gearRatio = gearRatio;\n+        this.radius = radius;\n         pidController.setP(5e-5);\n         pidController.setI(1e-6);\n         pidController.setD(0);\n@@ -55,7 +60,7 @@ public SparkNeoDriveModule(final int deviceID, final boolean isReverse_) {\n     \n     @Override\n     public double getMaximumSpeed() {\n-        return (maxRPM/gearRatio) / (60 / (2 * Math.PI * robot_.constants_.STARDESTROYER_WHEEL_RADIUS));\n+        return (maxRPM/gearRatio) / (60 / (2 * Math.PI * radius));\n     }\n \n     /**\n@@ -69,13 +74,27 @@ public void setVelocity(final double velocity) {\n         if (setPoint > maxRPM) {\n             setPoint = maxRPM;\n         }\n+        setRPM(setPoint);\n+    }\n+\n+    public void setRPM(double rpm) {\n+        setPoint = Math.min(rpm, maxRPM);\n         if (isReverse) {\n             pidController.setReference(-setPoint, ControlType.kVelocity);\n         } else {\n             pidController.setReference(setPoint, ControlType.kVelocity);\n         }\n     }\n \n+    public double getRPM() {\n+        final double velocity = encoder.getVelocity();\n+        if (isReverse == true) {\n+            return -velocity;\n+        } else {\n+            return velocity;\n+        }\n+    }\n+\n \n     /**\n      * Current velocity for this wheel."
  },
  {
    "sha": "e4fb2edfc6013a9a2e2f497b7ef2f6e585257b13",
    "filename": "src/main/java/org/usfirst/frc/team2077/subsystems/Launcher.java",
    "status": "modified",
    "additions": 41,
    "deletions": 38,
    "changes": 79,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/subsystems/Launcher.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/subsystems/Launcher.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/subsystems/Launcher.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -4,6 +4,8 @@\n import com.ctre.phoenix.motorcontrol.FeedbackDevice;\n import com.ctre.phoenix.motorcontrol.can.TalonSRX;\n \n+import org.usfirst.frc.team2077.drivetrain.SparkNeoDriveModule;\n+\n import static org.usfirst.frc.team2077.Robot.*;\n \n import java.util.Arrays;\n@@ -14,21 +16,22 @@\n \n \n public class Launcher extends SubsystemBase implements LauncherIF {\n+    private static final double LAUNCHER_WHEEL_RADIUS = 2;\n \n     // motor controllers\n     private final TalonSRX screw_;\n-    private final TalonSRX shooterL_;\n-    private final TalonSRX shooterR_;\n+    private final SparkNeoDriveModule shooterL_;\n+    private final SparkNeoDriveModule shooterR_;\n     private final TalonSRX loader_;\n \n \n     // elevation screw\n \n     // Readings outside the safe range are assumed to be the result of broken or disconnected hardware.\n     // If the screw potentiometer reading is out of range the motor should not be operated.\n-    private final double[] safeVoltageRange_ = {.9, 4}; // TODO: Confirm this is a reasonable range or adjust as necessary.\n+    private final double[] safeVoltageRange_ = {1.4, 5.1}; // TODO: Confirm this is a reasonable range or adjust as necessary.\n \n-    private final double[] operatingVoltageRange_ = {1.2, 2.6};\n+    private final double[] operatingVoltageRange_ = {2.2, 4.9};\n \n     private final double powerValue_ = 1; // TODO: Confirm this is a reasonable value or adjust as necessary.\n \n@@ -44,11 +47,11 @@\n     public boolean launcherRunning_ = false;\n     public double launcherRPM_ = 0;\n    \n-    public final double launcherMaxRPM_ = 8000; // TODO: Put in Constants.\n+    public final double launcherMaxRPM_ = 4000; // TODO: Put in Constants.\n     \n     private final double rightLeftBias = 0.0;  // TODO: Put in Constants?  \n \n-    private final double unitsToRPM = (600. / 2048.); \n+    private final double unitsToRPM = 1; //(600. / 2048.); //TODO: Fix this\n     private final double kP = 0.1; // 0.1\n     private final double kI = 0.0001; // 0.0001\n     private final double kD = 0.0;\n@@ -136,31 +139,31 @@ public Launcher() {\n         loader_ = new TalonSRX(2);\n         loader_.configFactoryDefault();\n \n-        shooterL_ = new TalonSRX(0); //0\n-        shooterL_.configFactoryDefault();\n-        shooterL_.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder,0,0);\n-        shooterL_.setSensorPhase(true);\n-        shooterL_.configNominalOutputForward(0, 0);\n-\t\tshooterL_.configNominalOutputReverse(0, 0);\n-\t\tshooterL_.configPeakOutputForward(1, 0);\n-        shooterL_.configPeakOutputReverse(-1, 0);\n-        shooterL_.config_kF(0, 0.0, 0);\n-\t\tshooterL_.config_kP(0, kP, 0);\n-\t\tshooterL_.config_kI(0, kI, 0);\n-\t\tshooterL_.config_kD(0, kD, 0);\n-\n-        shooterR_ = new TalonSRX(1); //1\n-        shooterR_.configFactoryDefault();\n-        shooterR_.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder,0,0);\n-        shooterR_.setSensorPhase(true);\n-        shooterR_.configNominalOutputForward(0, 0);\n-\t\tshooterR_.configNominalOutputReverse(0, 0);\n-\t\tshooterR_.configPeakOutputForward(1, 0);\n-\t\tshooterR_.configPeakOutputReverse(-1, 0);\n-        shooterR_.config_kF(0, 0.0, 0);\n-\t\tshooterR_.config_kP(0, kP, 0);\n-\t\tshooterR_.config_kI(0, kI, 0);\n-\t\tshooterR_.config_kD(0, kD, 0);\n+        shooterL_ = new SparkNeoDriveModule(5, true, 1, LAUNCHER_WHEEL_RADIUS); //0\n+        // shooterL_.configFactoryDefault();\n+        // shooterL_.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder,0,0);\n+        // shooterL_.setSensorPhase(true);\n+        // shooterL_.configNominalOutputForward(0, 0);\n+\t\t// shooterL_.configNominalOutputReverse(0, 0);\n+\t\t// shooterL_.configPeakOutputForward(1, 0);\n+        // shooterL_.configPeakOutputReverse(-1, 0);\n+        // shooterL_.config_kF(0, 0.0, 0);\n+\t\t// shooterL_.config_kP(0, kP, 0);\n+\t\t// shooterL_.config_kI(0, kI, 0);\n+\t\t// shooterL_.config_kD(0, kD, 0);\n+\n+        shooterR_ = new SparkNeoDriveModule(6, false, 1, LAUNCHER_WHEEL_RADIUS); //1\n+        // shooterR_.configFactoryDefault();\n+        // shooterR_.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder,0,0);\n+        // shooterR_.setSensorPhase(true);\n+        // shooterR_.configNominalOutputForward(0, 0);\n+\t\t// shooterR_.configNominalOutputReverse(0, 0);\n+\t\t// shooterR_.configPeakOutputForward(1, 0);\n+\t\t// shooterR_.configPeakOutputReverse(-1, 0);\n+        // shooterR_.config_kF(0, 0.0, 0);\n+\t\t// shooterR_.config_kP(0, kP, 0);\n+\t\t// shooterR_.config_kI(0, kI, 0);\n+\t\t// shooterR_.config_kD(0, kD, 0);\n \n         launcherRunning_ = false;\n         launcherRPM_ = 0;\n@@ -305,24 +308,24 @@ private void runLauncher(double velocity) {\n             leftRPM = (velocity - bias) / unitsToRPM;\n             rightRPM = (velocity + bias) / unitsToRPM;\n         }\n-        shooterL_.set(ControlMode.Velocity, leftRPM);\n-        shooterR_.set(ControlMode.Velocity, -rightRPM);\n+        shooterL_.setRPM(leftRPM);\n+        shooterR_.setRPM(rightRPM);\n     }\n \n     @Deprecated\n     public double getLaunchVelL() {\n-        double res = shooterL_.getSelectedSensorVelocity(0) * unitsToRPM;\n+        double res = shooterL_.getRPM() * unitsToRPM;\n \n         \n         return res;\n     }\n     @Deprecated\n     public double getLaunchVelR() {\n-        return shooterR_.getSelectedSensorVelocity(0) * unitsToRPM;\n+        return shooterR_.getRPM() * unitsToRPM;\n     }\n \n     public double[] getLauncherSpeed() {\n-        return new double[] {shooterL_.getSelectedSensorVelocity(0) * unitsToRPM, shooterR_.getSelectedSensorVelocity(0) * unitsToRPM};\n+        return new double[] {shooterL_.getRPM() * unitsToRPM, shooterR_.getRPM() * unitsToRPM};\n     }\n \n \n@@ -337,8 +340,8 @@ public void stopLoader() {\n     }\n    \n     public void stopAll() {\n-        shooterL_.set(ControlMode.PercentOutput,0.0);\n-        shooterR_.set(ControlMode.PercentOutput,0.0);\n+        shooterL_.setVelocity(0.0);\n+        shooterR_.setVelocity(0.0);\n         loader_.set(ControlMode.PercentOutput,0.0);\n         screw_.set(ControlMode.PercentOutput,0.0);\n     }"
  },
  {
    "sha": "fe6c511419f4c6cb03346626f3d14ff5c68eb399",
    "filename": "src/main/java/org/usfirst/frc/team2077/subsystems/TestGrabber.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/kettlemorainerc/stardestroyer/blob/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/subsystems/TestGrabber.java",
    "raw_url": "https://github.com/kettlemorainerc/stardestroyer/raw/32acbaed31abd3635324281a9bc28ff741915224/src/main/java/org/usfirst/frc/team2077/subsystems/TestGrabber.java",
    "contents_url": "https://api.github.com/repos/kettlemorainerc/stardestroyer/contents/src/main/java/org/usfirst/frc/team2077/subsystems/TestGrabber.java?ref=32acbaed31abd3635324281a9bc28ff741915224",
    "patch": "@@ -172,13 +172,13 @@ public boolean emptyBottom() {\n     }\n \n     public boolean isBLoaded() { //bottom sensor loaded\n-        //return robot_.microSwitch_.getStatusIsLoaded();\n-        return robot_.infraredSensor_.getStatusIsLoaded();\n+        // return robot_.infraredSensor_.getStatusIsLoaded();\n+        return true;\n     }\n \n     public boolean isTLoaded() { //top sensor loaded\n-        //return robot_.microSwitch_.getStatusIsLoaded();\n-        return robot_.microSwitch_.getStatusIsLoaded();\n+        // return robot_.microSwitch_.getStatusIsLoaded();\n+        return true;\n     }\n \n "
  }
]
