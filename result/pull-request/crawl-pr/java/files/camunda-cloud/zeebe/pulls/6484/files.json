[
  {
    "sha": "206f8773b8c6c0efe7f8778ecfb1329dca7545f6",
    "filename": ".ci/podSpecs/distribution-template.yml",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/.ci/podSpecs/distribution-template.yml",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/.ci/podSpecs/distribution-template.yml",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/.ci/podSpecs/distribution-template.yml?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -70,9 +70,12 @@ spec:\n       securityContext:\n         privileged: true\n     - name: docker\n-      image: docker:19.03.13-dind\n+      image: docker:20.10.5-dind\n       args:\n         - --storage-driver=overlay\n+        - --ipv6\n+        - --fixed-cidr-v6\n+        - \"2001:db8:1::/64\"\n       env:\n         # The new dind versions expect secure access using cert\n         # Setting DOCKER_TLS_CERTDIR to empty string will disable the secure access"
  },
  {
    "sha": "e86b321d845ed21d28379e2873c8cdd2c9025d20",
    "filename": ".ci/podSpecs/integration-test-template.yml",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/.ci/podSpecs/integration-test-template.yml",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/.ci/podSpecs/integration-test-template.yml",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/.ci/podSpecs/integration-test-template.yml?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -37,9 +37,12 @@ spec:\n       securityContext:\n         privileged: true\n     - name: docker\n-      image: docker:19.03.13-dind\n+      image: docker:20.10.5-dind\n       args:\n         - --storage-driver=overlay\n+        - --ipv6\n+        - --fixed-cidr-v6\n+        - \"2001:db8:1::/64\"\n       env:\n         # The new dind versions expect secure access using cert\n         # Setting DOCKER_TLS_CERTDIR to empty string will disable the secure access"
  },
  {
    "sha": "9c31981aa1a17adb80532d2c791c1f1ed40e1105",
    "filename": "CONTRIBUTING.md",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/CONTRIBUTING.md",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/CONTRIBUTING.md",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/CONTRIBUTING.md?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -18,6 +18,8 @@ run the command: `mvn clean install -DskipTests` in the root folder.\n \n > NOTE: The Go client and zbctl are built and tested with Go 1.15\n \n+> NOTE: The Java and the Go modules are built and tested with Docker 20.10.5 [with IPv6 support](https://docs.docker.com/config/daemon/ipv6/).\n+\n The resulting Zeebe distribution can be found in the folder `dist/target`, i.e.\n ```\n dist/target/zeebe-distribution-X.Y.Z-SNAPSHOT.tar.gz"
  },
  {
    "sha": "27b049118c6b17371a3ebcbe9ca78e878820a86d",
    "filename": "atomix/core/src/test/java/io/atomix/core/AtomixRule.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/atomix/core/src/test/java/io/atomix/core/AtomixRule.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/atomix/core/src/test/java/io/atomix/core/AtomixRule.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/atomix/core/src/test/java/io/atomix/core/AtomixRule.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -101,7 +101,7 @@ private Address getAddress(final Integer memberId) {\n         memberId,\n         newId -> {\n           final var nextInetAddress = SocketUtil.getNextAddress();\n-          final var addressString = io.zeebe.util.SocketUtil.toHostAndPortString(nextInetAddress);\n+          final var addressString = Address.from(nextInetAddress).toString();\n           return Address.from(addressString);\n         });\n   }"
  },
  {
    "sha": "1807a11fe71345200e0e61dde048a3d4f54a111b",
    "filename": "atomix/utils/src/main/java/io/atomix/utils/net/Address.java",
    "status": "modified",
    "additions": 11,
    "deletions": 23,
    "changes": 34,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/atomix/utils/src/main/java/io/atomix/utils/net/Address.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/atomix/utils/src/main/java/io/atomix/utils/net/Address.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/atomix/utils/src/main/java/io/atomix/utils/net/Address.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -16,6 +16,7 @@\n  */\n package io.atomix.utils.net;\n \n+import com.google.common.net.HostAndPort;\n import java.net.Inet6Address;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n@@ -61,30 +62,13 @@ public static Address local() {\n    * @return the address\n    */\n   public static Address from(final String address) {\n-    final int lastColon = address.lastIndexOf(':');\n-    final int openBracket = address.indexOf('[');\n-    final int closeBracket = address.indexOf(']');\n-\n-    final String host;\n-    if (openBracket != -1 && closeBracket != -1) {\n-      host = address.substring(openBracket + 1, closeBracket);\n-    } else if (lastColon != -1) {\n-      host = address.substring(0, lastColon);\n-    } else {\n-      host = address;\n-    }\n-\n-    final int port;\n-    if (lastColon != -1) {\n-      try {\n-        port = Integer.parseInt(address.substring(lastColon + 1));\n-      } catch (final NumberFormatException e) {\n-        throw new MalformedAddressException(address, e);\n-      }\n-    } else {\n-      port = DEFAULT_PORT;\n+    try {\n+      final HostAndPort parsedAddress =\n+          HostAndPort.fromString(address).withDefaultPort(DEFAULT_PORT);\n+      return new Address(parsedAddress.getHost(), parsedAddress.getPort());\n+    } catch (final IllegalStateException e) {\n+      return from(DEFAULT_PORT);\n     }\n-    return new Address(host, port);\n   }\n \n   /**\n@@ -113,6 +97,10 @@ public static Address from(final int port) {\n     }\n   }\n \n+  public static Address from(final InetSocketAddress inetSocketAddress) {\n+    return from(inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n+  }\n+\n   /** Returns the local host. */\n   private static InetAddress getLocalAddress() throws UnknownHostException {\n     try {"
  },
  {
    "sha": "39e4354982ff2f008d49ebb8cc556d2187776823",
    "filename": "broker/src/main/java/io/zeebe/broker/Broker.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/broker/src/main/java/io/zeebe/broker/Broker.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/broker/src/main/java/io/zeebe/broker/Broker.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/broker/src/main/java/io/zeebe/broker/Broker.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -76,7 +76,6 @@\n import io.zeebe.transport.ServerTransport;\n import io.zeebe.transport.TransportFactory;\n import io.zeebe.util.LogUtil;\n-import io.zeebe.util.SocketUtil;\n import io.zeebe.util.VersionUtil;\n import io.zeebe.util.exception.UncheckedExecutionException;\n import io.zeebe.util.sched.Actor;\n@@ -199,7 +198,7 @@ private StartProcess initStart() {\n     final BrokerInfo localBroker =\n         new BrokerInfo(\n             clusterCfg.getNodeId(),\n-            SocketUtil.toHostAndPortString(networkCfg.getCommandApi().getAdvertisedAddress()));\n+            Address.from(networkCfg.getCommandApi().getAdvertisedAddress()).toString());\n \n     final StartProcess startContext = new StartProcess(\"Broker-\" + localBroker.getNodeId());\n "
  },
  {
    "sha": "0460d0b06393d95c7f78a5d0ab658baafd3ae4d5",
    "filename": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 5,
    "changes": 6,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -151,11 +151,7 @@ private static NodeDiscoveryProvider createDiscoveryProvider(\n     final List<Node> nodes = new ArrayList<>();\n     initialContactPoints.forEach(\n         contactAddress -> {\n-          final String[] address = contactAddress.split(\":\");\n-          final int memberPort = Integer.parseInt(address[1]);\n-\n-          final Node node =\n-              Node.builder().withAddress(Address.from(address[0], memberPort)).build();\n+          final Node node = Node.builder().withAddress(Address.from(contactAddress)).build();\n           LOG.debug(\"Member {} will contact node: {}\", localMemberId, node.address());\n           nodes.add(node);\n         });"
  },
  {
    "sha": "12af26b805d015f64d16bc66806d241f6d4662b7",
    "filename": "broker/src/main/java/io/zeebe/broker/system/configuration/EmbeddedGatewayCfg.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/broker/src/main/java/io/zeebe/broker/system/configuration/EmbeddedGatewayCfg.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/broker/src/main/java/io/zeebe/broker/system/configuration/EmbeddedGatewayCfg.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/broker/src/main/java/io/zeebe/broker/system/configuration/EmbeddedGatewayCfg.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -7,8 +7,8 @@\n  */\n package io.zeebe.broker.system.configuration;\n \n+import io.atomix.utils.net.Address;\n import io.zeebe.gateway.impl.configuration.GatewayCfg;\n-import io.zeebe.util.SocketUtil;\n \n public final class EmbeddedGatewayCfg extends GatewayCfg implements ConfigurationEntry {\n \n@@ -23,8 +23,7 @@ public void init(final BrokerCfg globalConfig, final String brokerBase) {\n     init(networkCfg.getHost());\n \n     // ensure embedded gateway can access local broker\n-    getCluster()\n-        .setContactPoint(SocketUtil.toHostAndPortString(networkCfg.getInternalApi().getAddress()));\n+    getCluster().setContactPoint(Address.from(networkCfg.getInternalApi().getAddress()).toString());\n \n     // configure embedded gateway based on broker config\n     getNetwork().setPort(getNetwork().getPort() + (networkCfg.getPortOffset() * 10));"
  },
  {
    "sha": "70785f319dece05eee2a9d1e7161ce70bbc5c743",
    "filename": "broker/src/test/java/io/zeebe/broker/system/partitions/BrokerSnapshotTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/broker/src/test/java/io/zeebe/broker/system/partitions/BrokerSnapshotTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/broker/src/test/java/io/zeebe/broker/system/partitions/BrokerSnapshotTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/broker/src/test/java/io/zeebe/broker/system/partitions/BrokerSnapshotTest.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -13,6 +13,7 @@\n import io.atomix.raft.partition.RaftPartition;\n import io.atomix.raft.storage.log.RaftLogReader;\n import io.atomix.raft.storage.log.RaftLogReader.Mode;\n+import io.atomix.utils.net.Address;\n import io.zeebe.broker.clustering.atomix.AtomixFactory;\n import io.zeebe.broker.system.management.BrokerAdminService;\n import io.zeebe.broker.system.management.PartitionStatus;\n@@ -52,8 +53,7 @@ public void setup() {\n     journalReader = raftPartition.getServer().openReader(1, Mode.COMMITS);\n     brokerAdminService = brokerRule.getBroker().getBrokerAdminService();\n \n-    final String contactPoint =\n-        io.zeebe.util.SocketUtil.toHostAndPortString(brokerRule.getGatewayAddress());\n+    final String contactPoint = Address.from(brokerRule.getGatewayAddress()).toString();\n     final ZeebeClientBuilder zeebeClientBuilder =\n         ZeebeClient.newClientBuilder().usePlaintext().gatewayAddress(contactPoint);\n     client = zeebeClientBuilder.build();"
  },
  {
    "sha": "b737842f8232d22b6fc7f0a6548c95521b9da9e1",
    "filename": "clients/go/cmd/zbctl/internal/commands/status.go",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/clients/go/cmd/zbctl/internal/commands/status.go",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/clients/go/cmd/zbctl/internal/commands/status.go",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/clients/go/cmd/zbctl/internal/commands/status.go?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -18,6 +18,7 @@ import (\n \t\"fmt\"\n \t\"github.com/camunda-cloud/zeebe/clients/go/pkg/pb\"\n \t\"github.com/spf13/cobra\"\n+\t\"net\"\n \t\"sort\"\n \t\"strings\"\n )\n@@ -48,8 +49,10 @@ func (s StatusResponseWrapper) human() (string, error) {\n \tsort.Sort(ByNodeID(resp.Brokers))\n \n \tfor _, broker := range resp.Brokers {\n-\t\tstringBuilder.WriteString(fmt.Sprintf(\"  Broker %d - %s:%d\\n\", broker.NodeId, broker.Host, broker.Port))\n-\n+\t\tstringBuilder.WriteString(fmt.Sprintf(\"  Broker %d - %s:%d\\n\",\n+\t\t\tbroker.NodeId,\n+\t\t\tformatIPAddress(broker.Host),\n+\t\t\tbroker.Port))\n \t\tversion := \"unavailable\"\n \t\tif broker.Version != \"\" {\n \t\t\tversion = broker.Version\n@@ -136,3 +139,11 @@ func healthToString(health pb.Partition_PartitionBrokerHealth) string {\n \t\treturn unknownState\n \t}\n }\n+\n+func formatIPAddress(ipAddress string) string {\n+\tip := net.ParseIP(ipAddress)\n+\tif ip.To4() != nil {\n+\t\treturn ip.String()\n+\t}\n+\treturn fmt.Sprintf(\"[%s]\", ip.String())\n+}"
  },
  {
    "sha": "3e911fc4d0eecde90f3d55245536de6ee8277c63",
    "filename": "clients/go/cmd/zbctl/main_test.go",
    "status": "modified",
    "additions": 21,
    "deletions": 2,
    "changes": 23,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/clients/go/cmd/zbctl/main_test.go",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/clients/go/cmd/zbctl/main_test.go",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/clients/go/cmd/zbctl/main_test.go?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -40,6 +40,11 @@ const (\n \t// NOTE: taken from https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\n \tsemVer = `(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*` +\n \t\t`|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?`\n+\n+\tipv6Regex         = `(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))`\n+\tipv6RegexWithPort = `\\[(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]`\n+\tipv4Regex         = `(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4})`\n+\tipRegex           = ipv6Regex + `|` + ipv6RegexWithPort + `|` + ipv4Regex\n )\n \n type integrationTestSuite struct {\n@@ -183,7 +188,7 @@ func assertEqText(t *testing.T, test testCase, golden, cmdOut []byte) {\n \twantLines := strings.Split(string(golden), \"\\n\")\n \tgotLines := strings.Split(string(cmdOut), \"\\n\")\n \n-\tif diff := cmp.Diff(wantLines, gotLines, cmp.Comparer(composeComparer(cmpIgnoreNums, cmpIgnoreVersion))); diff != \"\" {\n+\tif diff := cmp.Diff(wantLines, gotLines, cmp.Comparer(composeComparer(cmpIgnoreNums, cmpIgnoreVersion, cmpIgnoreIps))); diff != \"\" {\n \t\tt.Fatalf(\"%s: diff (-want +got):\\n%s\", test.name, diff)\n \t}\n }\n@@ -192,8 +197,13 @@ func assertEqJSON(t *testing.T, test testCase, golden, cmdOut []byte) {\n \twant := string(golden)\n \tgot := string(cmdOut)\n \n+\t// remove ips\n+\tignorePattern := regexp.MustCompile(ipRegex)\n+\twant = ignorePattern.ReplaceAllString(want, \"\")\n+\tgot = ignorePattern.ReplaceAllString(got, \"\")\n+\n \t// remove versions\n-\tignorePattern := regexp.MustCompile(semVer)\n+\tignorePattern = regexp.MustCompile(semVer)\n \twant = ignorePattern.ReplaceAllString(want, \"\")\n \tgot = ignorePattern.ReplaceAllString(got, \"\")\n \n@@ -233,6 +243,15 @@ func cmpIgnoreNums(x, y string) bool {\n \treturn newX == newY\n }\n \n+func cmpIgnoreIps(x, y string) bool {\n+\tipRegex := regexp.MustCompile(ipRegex)\n+\tnewX := ipRegex.ReplaceAllString(x, \"0.0.0.0\")\n+\tnewY := ipRegex.ReplaceAllString(y, \"0.0.0.0\")\n+\n+\tfmt.Printf(\"NewX: %s, NewY: %s\\n\", newX, newY)\n+\treturn newX == newY\n+}\n+\n // runCommand runs the zbctl command and returns the combined output from stdout and stderr\n func (s *integrationTestSuite) runCommand(command string, envVars ...string) ([]byte, error) {\n \tctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)"
  },
  {
    "sha": "068844367b2c69852c895e40ac0fc067646afc21",
    "filename": "clients/java/src/main/java/io/zeebe/client/impl/response/BrokerInfoImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/clients/java/src/main/java/io/zeebe/client/impl/response/BrokerInfoImpl.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/clients/java/src/main/java/io/zeebe/client/impl/response/BrokerInfoImpl.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/clients/java/src/main/java/io/zeebe/client/impl/response/BrokerInfoImpl.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -18,6 +18,7 @@\n import io.zeebe.client.api.response.BrokerInfo;\n import io.zeebe.client.api.response.PartitionInfo;\n import io.zeebe.gateway.protocol.GatewayOuterClass;\n+import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -58,7 +59,7 @@ public int getPort() {\n \n   @Override\n   public String getAddress() {\n-    return String.format(\"%s:%d\", host, port);\n+    return new InetSocketAddress(host, port).toString();\n   }\n \n   @Override"
  },
  {
    "sha": "ec6b055e290c0fd25ee9a4a9aec2095a8e7b3a71",
    "filename": "dist/src/main/resources/application.properties",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/dist/src/main/resources/application.properties",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/dist/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/dist/src/main/resources/application.properties?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -13,4 +13,3 @@ management.endpoint.health.group.liveness.show-details=never\n management.endpoint.loggers.enabled=true\n #Allow partitions api - this allows to trigger snapshots and pause processing\n management.endpoint.partitions.enabled=true\n-"
  },
  {
    "sha": "8e722e94978e6f62424520e29c22a95dd9dcb198",
    "filename": "docker/utils/startup.sh",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/docker/utils/startup.sh",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/docker/utils/startup.sh",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/docker/utils/startup.sh?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -3,7 +3,8 @@\n # legacy support\n # This environment variable was used to set the gatewway cluster host in standalone and embedded mode.\n # Now, there are two dedicated environment variables for the two different deployment scenarios.\n-export ZEEBE_HOST=${ZEEBE_HOST:-$(hostname -i)}\n+# Print only first address because if we use an IPv6 there could be more than one addresses\n+export ZEEBE_HOST=${ZEEBE_HOST:-$(hostname -i | awk '{print $1}')}\n # Legacy support\n \n if [ \"$ZEEBE_STANDALONE_GATEWAY\" = \"true\" ]; then"
  },
  {
    "sha": "651a47874102f2641815672c39638aedd7c4b491",
    "filename": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -7,6 +7,7 @@\n  */\n package io.zeebe.gateway;\n \n+import io.atomix.utils.net.Address;\n import io.grpc.Status;\n import io.grpc.StatusRuntimeException;\n import io.zeebe.gateway.ResponseMapper.BrokerResponseMapper;\n@@ -70,12 +71,13 @@ public EndpointManager(\n \n   private void addBrokerInfo(\n       final Builder brokerInfo, final Integer brokerId, final BrokerClusterState topology) {\n-    final String[] addressParts = topology.getBrokerAddress(brokerId).split(\":\");\n+    final String brokerAddress = topology.getBrokerAddress(brokerId);\n+    final Address address = Address.from(brokerAddress);\n \n     brokerInfo\n         .setNodeId(brokerId)\n-        .setHost(addressParts[0])\n-        .setPort(Integer.parseInt(addressParts[1]))\n+        .setHost(address.host())\n+        .setPort(address.port())\n         .setVersion(topology.getBrokerVersion(brokerId));\n   }\n "
  },
  {
    "sha": "5f89cb1584ec3e064d8fdcf06c769a32a2c50a63",
    "filename": "gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -11,6 +11,7 @@\n import static org.assertj.core.api.Assertions.assertThatCode;\n \n import io.atomix.cluster.AtomixCluster;\n+import io.atomix.utils.net.Address;\n import io.grpc.Status.Code;\n import io.zeebe.client.ZeebeClient;\n import io.zeebe.client.api.ZeebeFuture;\n@@ -56,8 +57,7 @@ static void setUp() throws IOException {\n     gateway = new Gateway(new GatewayCfg().setNetwork(networkCfg), cluster, actorScheduler);\n     gateway.start();\n \n-    final String gatewayAddress =\n-        io.zeebe.util.SocketUtil.toHostAndPortString(networkCfg.toSocketAddress());\n+    final String gatewayAddress = Address.from(networkCfg.toSocketAddress()).toString();\n     client = ZeebeClient.newClientBuilder().gatewayAddress(gatewayAddress).usePlaintext().build();\n   }\n "
  },
  {
    "sha": "a89df07080937b157e92b714e27b200cbaa9a23d",
    "filename": "gateway/src/test/java/io/zeebe/gateway/broker/BrokerClientTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/gateway/src/test/java/io/zeebe/gateway/broker/BrokerClientTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/gateway/src/test/java/io/zeebe/gateway/broker/BrokerClientTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/gateway/src/test/java/io/zeebe/gateway/broker/BrokerClientTest.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -73,7 +73,7 @@ public void setUp() {\n         .getCluster()\n         .setHost(\"0.0.0.0\")\n         .setPort(SocketUtil.getNextAddress().getPort())\n-        .setContactPoint(io.zeebe.util.SocketUtil.toHostAndPortString(broker.getSocketAddress()))\n+        .setContactPoint(Address.from(broker.getSocketAddress()).toString())\n         .setRequestTimeout(Duration.ofSeconds(3));\n     configuration.init();\n "
  },
  {
    "sha": "222915d5f2b5f1ce304f7d5076c6834689c94f4d",
    "filename": "qa/integration-tests/src/test/java/io/zeebe/broker/it/client/SecurityTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/client/SecurityTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/client/SecurityTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/qa/integration-tests/src/test/java/io/zeebe/broker/it/client/SecurityTest.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -9,12 +9,12 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import io.atomix.utils.net.Address;\n import io.zeebe.broker.it.clustering.ClusteringRule;\n import io.zeebe.broker.it.util.GrpcClientRule;\n import io.zeebe.client.ZeebeClientBuilder;\n import io.zeebe.client.api.response.Topology;\n import io.zeebe.gateway.impl.configuration.GatewayCfg;\n-import io.zeebe.util.SocketUtil;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.RuleChain;\n@@ -31,8 +31,7 @@\n       new GrpcClientRule(\n           cfg ->\n               configureClientForTls(\n-                  cfg.gatewayAddress(\n-                      SocketUtil.toHostAndPortString(clusteringRule.getGatewayAddress()))));\n+                  cfg.gatewayAddress(Address.from(clusteringRule.getGatewayAddress()).toString())));\n \n   @Rule\n   public RuleChain ruleChain ="
  },
  {
    "sha": "f578b26666d423986ec2b2e5de946e2f259b8d8d",
    "filename": "qa/integration-tests/src/test/java/io/zeebe/broker/it/client/command/LongPollingActivateJobsTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/client/command/LongPollingActivateJobsTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/client/command/LongPollingActivateJobsTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/qa/integration-tests/src/test/java/io/zeebe/broker/it/client/command/LongPollingActivateJobsTest.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -9,6 +9,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import io.atomix.utils.net.Address;\n import io.zeebe.broker.it.util.GrpcClientRule;\n import io.zeebe.broker.system.configuration.BrokerCfg;\n import io.zeebe.broker.test.EmbeddedBrokerRule;\n@@ -17,7 +18,6 @@\n import io.zeebe.client.api.response.ActivateJobsResponse;\n import io.zeebe.client.api.response.ActivatedJob;\n import io.zeebe.test.util.BrokerClassRuleHelper;\n-import io.zeebe.util.SocketUtil;\n import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n@@ -144,7 +144,7 @@ private void sendActivateRequestsAndClose(final String jobType, final int count)\n     for (int i = 0; i < count; i++) {\n       final ZeebeClient client =\n           ZeebeClient.newClientBuilder()\n-              .gatewayAddress(SocketUtil.toHostAndPortString(BROKER_RULE.getGatewayAddress()))\n+              .gatewayAddress(Address.from(BROKER_RULE.getGatewayAddress()).toString())\n               .usePlaintext()\n               .build();\n "
  },
  {
    "sha": "65ba181fb09adee8c1966b9ceee7d7e9d5b12611",
    "filename": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java",
    "status": "modified",
    "additions": 5,
    "deletions": 7,
    "changes": 12,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -203,7 +203,8 @@ protected void before() throws IOException {\n             .map(BrokerCfg::getNetwork)\n             .map(NetworkCfg::getInternalApi)\n             .map(SocketBindingCfg::getAddress)\n-            .map(io.zeebe.util.SocketUtil::toHostAndPortString)\n+            .map(Address::from)\n+            .map(Address::toString)\n             .toArray(String[]::new);\n \n     for (int nodeId = 0; nodeId < clusterSize; nodeId++) {\n@@ -305,8 +306,7 @@ private BrokerCfg createBrokerCfg(final int nodeId) {\n       // https://github.com/zeebe-io/zeebe/issues/2012\n \n       setInitialContactPoints(\n-              io.zeebe.util.SocketUtil.toHostAndPortString(\n-                  getBrokerCfg(0).getNetwork().getInternalApi().getAddress()))\n+              Address.from(getBrokerCfg(0).getNetwork().getInternalApi().getAddress()).toString())\n           .accept(brokerCfg);\n     }\n \n@@ -330,8 +330,7 @@ private File getBrokerBase(final int nodeId) {\n \n   private Gateway createGateway() {\n     final String contactPoint =\n-        io.zeebe.util.SocketUtil.toHostAndPortString(\n-            getBrokerCfg(0).getNetwork().getInternalApi().getAddress());\n+        Address.from(getBrokerCfg(0).getNetwork().getInternalApi().getAddress()).toString();\n \n     final GatewayCfg gatewayCfg = new GatewayCfg();\n     gatewayCfg.getCluster().setContactPoint(contactPoint).setClusterName(clusterName);\n@@ -375,8 +374,7 @@ private Gateway createGateway() {\n \n   private ZeebeClient createClient() {\n     final String contactPoint =\n-        io.zeebe.util.SocketUtil.toHostAndPortString(\n-            gateway.getGatewayCfg().getNetwork().toSocketAddress());\n+        Address.from(gateway.getGatewayCfg().getNetwork().toSocketAddress()).toString();\n     final ZeebeClientBuilder zeebeClientBuilder =\n         ZeebeClient.newClientBuilder().gatewayAddress(contactPoint);\n "
  },
  {
    "sha": "07194b082cd5254070639c663417b83171324c20",
    "filename": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/RestoreTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/RestoreTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/RestoreTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/RestoreTest.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -10,11 +10,11 @@\n import static io.zeebe.protocol.Protocol.START_PARTITION_ID;\n import static org.assertj.core.api.Assertions.assertThat;\n \n+import io.atomix.utils.net.Address;\n import io.zeebe.broker.Broker;\n import io.zeebe.broker.it.util.GrpcClientRule;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n-import io.zeebe.util.SocketUtil;\n import java.time.Duration;\n import java.util.Base64;\n import java.util.concurrent.ThreadLocalRandom;\n@@ -48,8 +48,7 @@\n       new GrpcClientRule(\n           config ->\n               config\n-                  .gatewayAddress(\n-                      SocketUtil.toHostAndPortString(clusteringRule.getGatewayAddress()))\n+                  .gatewayAddress(Address.from(clusteringRule.getGatewayAddress()).toString())\n                   .defaultRequestTimeout(Duration.ofMinutes(1))\n                   .usePlaintext());\n "
  },
  {
    "sha": "60f5153282fdd13dfdbb95b3488f31c829805d16",
    "filename": "qa/integration-tests/src/test/java/io/zeebe/broker/it/network/Ipv6IntegrationTest.java",
    "status": "added",
    "additions": 148,
    "deletions": 0,
    "changes": 148,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/network/Ipv6IntegrationTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/network/Ipv6IntegrationTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/qa/integration-tests/src/test/java/io/zeebe/broker/it/network/Ipv6IntegrationTest.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.network;\n+\n+import com.github.dockerjava.api.model.Network.Ipam;\n+import com.github.dockerjava.api.model.Network.Ipam.Config;\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.client.ZeebeClientBuilder;\n+import io.zeebe.client.api.response.Topology;\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeGatewayContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.containers.ZeebeTopologyWaitStrategy;\n+import io.zeebe.test.util.asserts.TopologyAssert;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+\n+public class Ipv6IntegrationTest {\n+\n+  private static final int CLUSTER_SIZE = 3;\n+  private static final int PARTITION_COUNT = 1;\n+  private static final int REPLICATION_FACTOR = 3;\n+  private static final String ZEEBE_IMAGE_VERSION = \"camunda/zeebe:current-test\";\n+  private static final String NETWORK_ALIAS = Ipv6IntegrationTest.class.getName();\n+  private static final String BASE_PART_OF_SUBNET = \"2081::aede:4844:fe00:\";\n+  private static final String SUBNET = BASE_PART_OF_SUBNET + \"0/123\";\n+  private static final String INADDR6_ANY = \"[::]\";\n+\n+  @Rule\n+  public final Network network =\n+      Network.builder()\n+          .createNetworkCmdModifier(\n+              createNetworkCmd ->\n+                  createNetworkCmd\n+                      .withIpam(new Ipam().withConfig(new Config().withSubnet(SUBNET)))\n+                      .withName(NETWORK_ALIAS))\n+          .enableIpv6(true)\n+          .build();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private List<String> initialContactPoints;\n+  private ZeebeGatewayContainer gateway;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints = new ArrayList<>();\n+    containers =\n+        IntStream.range(0, CLUSTER_SIZE)\n+            .mapToObj(i -> new ZeebeBrokerContainer(ZEEBE_IMAGE_VERSION).withNetwork(network))\n+            .collect(Collectors.toList());\n+\n+    gateway = new ZeebeGatewayContainer(ZEEBE_IMAGE_VERSION);\n+    IntStream.range(0, CLUSTER_SIZE).forEach(i -> configureBrokerContainer(i, containers));\n+    configureGatewayContainer(gateway, initialContactPoints.get(0));\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    containers.parallelStream().forEach(GenericContainer::stop);\n+  }\n+\n+  @Test\n+  public void shouldCommunicateOverIpv6() {\n+    // given\n+    containers.parallelStream().forEach(GenericContainer::start);\n+    gateway.start();\n+\n+    // when\n+    final ZeebeClientBuilder zeebeClientBuilder =\n+        ZeebeClient.newClientBuilder()\n+            .usePlaintext()\n+            .gatewayAddress(gateway.getExternalGatewayAddress());\n+    try (final var client = zeebeClientBuilder.build()) {\n+      final Topology topology = client.newTopologyRequest().send().join(5, TimeUnit.SECONDS);\n+      // then - can find each other\n+      TopologyAssert.assertThat(topology).isComplete(3, 1);\n+    }\n+  }\n+\n+  private void configureBrokerContainer(final int index, final List<ZeebeBrokerContainer> brokers) {\n+    final int clusterSize = brokers.size();\n+    final var broker = brokers.get(index);\n+    final var hostNameWithoutBraces = getIpv6AddressForIndex(index);\n+    final var hostName = String.format(\"[%s]\", hostNameWithoutBraces);\n+\n+    initialContactPoints.add(hostName + \":\" + ZeebePort.INTERNAL.getPort());\n+\n+    broker\n+        .withNetwork(network)\n+        .withNetworkAliases(NETWORK_ALIAS)\n+        .withCreateContainerCmdModifier(\n+            createContainerCmd ->\n+                createContainerCmd\n+                    .withIpv6Address(hostNameWithoutBraces)\n+                    .withHostName(hostNameWithoutBraces))\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_MAXMESSAGESIZE\", \"128KB\")\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_NODEID\", String.valueOf(index))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERSIZE\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR\", String.valueOf(REPLICATION_FACTOR))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_PARTITIONCOUNT\", String.valueOf(PARTITION_COUNT))\n+        .withEnv(\n+            \"ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS\", String.join(\",\", initialContactPoints))\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_ADVERTISEDHOST\", hostNameWithoutBraces)\n+        .withEnv(\"ZEEBE_LOG_LEVEL\", \"DEBUG\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_HOST\", INADDR6_ANY)\n+        .withEnv(\"ZEEBE_LOG_LEVEL\", \"DEBUG\")\n+        .withEnv(\"ATOMIX_LOG_LEVEL\", \"INFO\");\n+  }\n+\n+  private void configureGatewayContainer(\n+      final ZeebeGatewayContainer gateway, final String initialContactPoint) {\n+    final String address = getIpv6AddressForIndex(CLUSTER_SIZE);\n+    gateway\n+        .withEnv(\"ZEEBE_GATEWAY_CLUSTER_CONTACTPOINT\", initialContactPoint)\n+        .withTopologyCheck(\n+            new ZeebeTopologyWaitStrategy()\n+                .forBrokersCount(CLUSTER_SIZE)\n+                .forPartitionsCount(PARTITION_COUNT)\n+                .forReplicationFactor(REPLICATION_FACTOR))\n+        .withNetwork(network)\n+        .withNetworkAliases(NETWORK_ALIAS)\n+        .withEnv(\"ZEEBE_GATEWAY_NETWORK_HOST\", INADDR6_ANY)\n+        .withEnv(\"ZEEBE_GATEWAY_CLUSTER_HOST\", address)\n+        .withCreateContainerCmdModifier(\n+            createContainerCmd ->\n+                createContainerCmd.withIpv6Address(address).withHostName(address));\n+  }\n+\n+  private String getIpv6AddressForIndex(final int index) {\n+    // offset the index by 2 as indexes start at 0, and :1 is the gateway, so the first address\n+    // should start at :2\n+    return String.format(\"%s%d\", BASE_PART_OF_SUBNET, index + 2);\n+  }\n+}"
  },
  {
    "sha": "d886b5fd2f0102f7a868780b8f904646ee7bb3a5",
    "filename": "qa/integration-tests/src/test/java/io/zeebe/broker/it/util/GrpcClientRule.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/util/GrpcClientRule.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/qa/integration-tests/src/test/java/io/zeebe/broker/it/util/GrpcClientRule.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/qa/integration-tests/src/test/java/io/zeebe/broker/it/util/GrpcClientRule.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -10,6 +10,7 @@\n import static io.zeebe.test.util.TestUtil.waitUntil;\n import static org.assertj.core.api.Assertions.assertThat;\n \n+import io.atomix.utils.net.Address;\n import io.zeebe.broker.TestLoggers;\n import io.zeebe.broker.it.clustering.ClusteringRule;\n import io.zeebe.broker.test.EmbeddedBrokerRule;\n@@ -25,7 +26,6 @@\n import io.zeebe.protocol.record.intent.DeploymentIntent;\n import io.zeebe.protocol.record.intent.JobIntent;\n import io.zeebe.test.util.record.RecordingExporter;\n-import io.zeebe.util.SocketUtil;\n import java.time.Duration;\n import java.util.List;\n import java.util.function.Consumer;\n@@ -51,8 +51,7 @@ public GrpcClientRule(\n     this(\n         config -> {\n           config\n-              .gatewayAddress(\n-                  io.zeebe.util.SocketUtil.toHostAndPortString(brokerRule.getGatewayAddress()))\n+              .gatewayAddress(Address.from(brokerRule.getGatewayAddress()).toString())\n               .usePlaintext();\n           configurator.accept(config);\n         });\n@@ -62,7 +61,7 @@ public GrpcClientRule(final ClusteringRule clusteringRule) {\n     this(\n         config ->\n             config\n-                .gatewayAddress(SocketUtil.toHostAndPortString(clusteringRule.getGatewayAddress()))\n+                .gatewayAddress(Address.from(clusteringRule.getGatewayAddress()).toString())\n                 .usePlaintext());\n   }\n "
  },
  {
    "sha": "62729b9fb32725980938ac8f41999d1c16452ee7",
    "filename": "test/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/test/pom.xml",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/test/pom.xml",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/test/pom.xml?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -63,6 +63,11 @@\n       <artifactId>zeebe-logstreams</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>io.zeebe</groupId>\n+      <artifactId>atomix-utils</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>io.zeebe</groupId>\n       <artifactId>zeebe-test-util</artifactId>"
  },
  {
    "sha": "d092c3b4bed13eeefd63875e28ccc568f1e47e8f",
    "filename": "test/src/main/java/io/zeebe/test/ZeebeTestRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/test/src/main/java/io/zeebe/test/ZeebeTestRule.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/test/src/main/java/io/zeebe/test/ZeebeTestRule.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/test/src/main/java/io/zeebe/test/ZeebeTestRule.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -7,13 +7,13 @@\n  */\n package io.zeebe.test;\n \n+import io.atomix.utils.net.Address;\n import io.zeebe.broker.system.configuration.BrokerCfg;\n import io.zeebe.client.ClientProperties;\n import io.zeebe.client.ZeebeClient;\n import io.zeebe.client.api.response.ProcessInstanceEvent;\n import io.zeebe.test.util.record.RecordingExporter;\n import io.zeebe.test.util.record.RecordingExporterTestWatcher;\n-import io.zeebe.util.SocketUtil;\n import io.zeebe.util.sched.clock.ControlledActorClock;\n import java.util.Properties;\n import java.util.function.Supplier;\n@@ -40,7 +40,7 @@ public ZeebeTestRule(\n               final Properties properties = propertiesProvider.get();\n               properties.setProperty(\n                   ClientProperties.GATEWAY_ADDRESS,\n-                  SocketUtil.toHostAndPortString(brokerRule.getGatewayAddress()));\n+                  Address.from(brokerRule.getGatewayAddress()).toString());\n               properties.putIfAbsent(ClientProperties.USE_PLAINTEXT_CONNECTION, \"true\");\n \n               return properties;"
  },
  {
    "sha": "52d4778cbe1edcdded31d486119b3711f49aa871",
    "filename": "test/src/main/java/io/zeebe/test/exporter/ExporterIntegrationRule.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/3df1e3d86bb324e33227968fbec8eee84a65071f/test/src/main/java/io/zeebe/test/exporter/ExporterIntegrationRule.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/3df1e3d86bb324e33227968fbec8eee84a65071f/test/src/main/java/io/zeebe/test/exporter/ExporterIntegrationRule.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/test/src/main/java/io/zeebe/test/exporter/ExporterIntegrationRule.java?ref=3df1e3d86bb324e33227968fbec8eee84a65071f",
    "patch": "@@ -12,6 +12,7 @@\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.atomix.utils.net.Address;\n import io.zeebe.broker.system.configuration.BrokerCfg;\n import io.zeebe.broker.system.configuration.ExporterCfg;\n import io.zeebe.client.ClientProperties;\n@@ -29,7 +30,6 @@\n import io.zeebe.test.util.TestConfigurationFactory;\n import io.zeebe.test.util.TestUtil;\n import io.zeebe.test.util.record.RecordingExporter;\n-import io.zeebe.util.SocketUtil;\n import java.io.InputStream;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -384,8 +384,7 @@ private Properties newClientProperties() {\n     final Properties properties = new Properties();\n     properties.put(\n         ClientProperties.GATEWAY_ADDRESS,\n-        SocketUtil.toHostAndPortString(\n-            getBrokerConfig().getGateway().getNetwork().toSocketAddress()));\n+        Address.from(getBrokerConfig().getGateway().getNetwork().toSocketAddress()).toString());\n     properties.put(ClientProperties.USE_PLAINTEXT_CONNECTION, \"true\");\n \n     return properties;"
  },
  {
    "sha": "7a43cfaf5643b463d20ddbcc1d6e94f26a393c7f",
    "filename": "util/src/main/java/io/zeebe/util/SocketUtil.java",
    "status": "removed",
    "additions": 0,
    "deletions": 21,
    "changes": 21,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/438395eefcee78cbcc3b877d1b53fbaab797e9e7/util/src/main/java/io/zeebe/util/SocketUtil.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/438395eefcee78cbcc3b877d1b53fbaab797e9e7/util/src/main/java/io/zeebe/util/SocketUtil.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/util/src/main/java/io/zeebe/util/SocketUtil.java?ref=438395eefcee78cbcc3b877d1b53fbaab797e9e7",
    "patch": "@@ -1,21 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.1. You may not use this file\n- * except in compliance with the Zeebe Community License 1.1.\n- */\n-package io.zeebe.util;\n-\n-import java.net.InetSocketAddress;\n-\n-public final class SocketUtil {\n-  private static final String HOST_PORT_FORMAT = \"%s:%d\";\n-\n-  private SocketUtil() {}\n-\n-  public static String toHostAndPortString(InetSocketAddress inetSocketAddress) {\n-    return String.format(\n-        HOST_PORT_FORMAT, inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n-  }\n-}"
  }
]
