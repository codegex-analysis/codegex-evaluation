[
  {
    "sha": "6f4184988530fd4fed28b17e8dff2b20f3f03205",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/EngineProcessors.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/EngineProcessors.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/EngineProcessors.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/EngineProcessors.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -63,6 +63,7 @@ public static TypedRecordProcessors createEngineProcessors(\n         new ExpressionProcessor(\n             ExpressionLanguageFactory.createExpressionLanguage(), variablesState::getVariable);\n \n+    final DueDateTimerChecker timerChecker = new DueDateTimerChecker(zeebeState.getTimerState());\n     final CatchEventBehavior catchEventBehavior =\n         new CatchEventBehavior(\n             zeebeState,\n@@ -92,7 +93,8 @@ public static TypedRecordProcessors createEngineProcessors(\n             typedRecordProcessors,\n             subscriptionCommandSender,\n             catchEventBehavior,\n-            writers);\n+            writers,\n+            timerChecker);\n \n     addJobProcessors(\n         zeebeState, typedRecordProcessors, onJobsAvailableCallback, maxFragmentSize, writers);\n@@ -108,8 +110,8 @@ public static TypedRecordProcessors createEngineProcessors(\n       final TypedRecordProcessors typedRecordProcessors,\n       final SubscriptionCommandSender subscriptionCommandSender,\n       final CatchEventBehavior catchEventBehavior,\n-      final Writers writers) {\n-    final DueDateTimerChecker timerChecker = new DueDateTimerChecker(zeebeState.getTimerState());\n+      final Writers writers,\n+      final DueDateTimerChecker timerChecker) {\n     return ProcessEventProcessors.addProcessProcessors(\n         zeebeState,\n         expressionProcessor,"
  },
  {
    "sha": "4de0bce81911beeb622f711b65ca0ec33dca7068",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/ProcessEventProcessors.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/ProcessEventProcessors.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/ProcessEventProcessors.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/ProcessEventProcessors.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -68,7 +68,12 @@\n     addMessageStreamProcessors(\n         typedRecordProcessors, subscriptionState, subscriptionCommandSender, zeebeState, writers);\n     addTimerStreamProcessors(\n-        typedRecordProcessors, timerChecker, zeebeState, catchEventBehavior, expressionProcessor);\n+        typedRecordProcessors,\n+        timerChecker,\n+        zeebeState,\n+        catchEventBehavior,\n+        expressionProcessor,\n+        writers);\n     addVariableDocumentStreamProcessors(\n         typedRecordProcessors,\n         variableBehavior,\n@@ -146,11 +151,13 @@ private static void addTimerStreamProcessors(\n       final DueDateTimerChecker timerChecker,\n       final MutableZeebeState zeebeState,\n       final CatchEventBehavior catchEventOutput,\n-      final ExpressionProcessor expressionProcessor) {\n-\n+      final ExpressionProcessor expressionProcessor,\n+      final Writers writers) {\n     typedRecordProcessors\n         .onCommand(\n-            ValueType.TIMER, TimerIntent.CREATE, new CreateTimerProcessor(zeebeState, timerChecker))\n+            ValueType.TIMER,\n+            TimerIntent.CREATE,\n+            new CreateTimerProcessor(writers.state(), zeebeState.getKeyGenerator(), timerChecker))\n         .onCommand(\n             ValueType.TIMER,\n             TimerIntent.TRIGGER,"
  },
  {
    "sha": "b4b69bfbddab95f89de38c8227cb9201c93b47b3",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -94,7 +94,7 @@ public BpmnEventSubscriptionBehavior(\n       final T element, final BpmnElementContext context) {\n \n     try {\n-      catchEventBehavior.subscribeToEvents(context, element, commandWriter, sideEffects);\n+      catchEventBehavior.subscribeToEvents(context, element, sideEffects, commandWriter);\n       return Either.right(null);\n \n     } catch (final MessageCorrelationKeyException e) {"
  },
  {
    "sha": "2690bf164b43513b47c015e08fd47d2c0d8c80bf",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/common/CatchEventBehavior.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/common/CatchEventBehavior.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/common/CatchEventBehavior.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/common/CatchEventBehavior.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -94,8 +94,8 @@ public void unsubscribeFromEvents(\n   public void subscribeToEvents(\n       final BpmnElementContext context,\n       final ExecutableCatchEventSupplier supplier,\n-      final TypedCommandWriter commandWriter,\n-      final SideEffects sideEffects)\n+      final SideEffects sideEffects,\n+      final TypedCommandWriter commandWriter)\n       throws MessageCorrelationKeyException {\n \n     final List<ExecutableCatchEvent> events = supplier.getEvents();\n@@ -145,14 +145,16 @@ public void subscribeToTimerEvent(\n       final DirectBuffer handlerNodeId,\n       final Timer timer,\n       final TypedCommandWriter commandWriter) {\n+    final long dueDate = timer.getDueDate(ActorClock.currentTimeMillis());\n     timerRecord.reset();\n     timerRecord\n         .setRepetitions(timer.getRepetitions())\n-        .setDueDate(timer.getDueDate(ActorClock.currentTimeMillis()))\n+        .setDueDate(dueDate)\n         .setElementInstanceKey(elementInstanceKey)\n         .setProcessInstanceKey(processInstanceKey)\n         .setTargetElementId(handlerNodeId)\n         .setProcessDefinitionKey(processDefinitionKey);\n+\n     commandWriter.appendNewCommand(TimerIntent.CREATE, timerRecord);\n   }\n "
  },
  {
    "sha": "1627dfe5fdacc6dc56492592abb59cee2683e6da",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/deployment/DeploymentCreateProcessor.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/deployment/DeploymentCreateProcessor.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/deployment/DeploymentCreateProcessor.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/deployment/DeploymentCreateProcessor.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -91,7 +91,7 @@ public void processRecord(\n       final long key = keyGenerator.nextKey();\n \n       try {\n-        createTimerIfTimerStartEvent(command, streamWriter);\n+        createTimerIfTimerStartEvent(command, streamWriter, sideEffect);\n       } catch (final RuntimeException e) {\n         final String reason = String.format(COULD_NOT_CREATE_TIMER_MESSAGE, e.getMessage());\n         responseWriter.writeRejectionOnCommand(command, RejectionType.PROCESSING_ERROR, reason);\n@@ -119,7 +119,9 @@ public void processRecord(\n   }\n \n   private void createTimerIfTimerStartEvent(\n-      final TypedRecord<DeploymentRecord> record, final TypedStreamWriter streamWriter) {\n+      final TypedRecord<DeploymentRecord> record,\n+      final TypedStreamWriter streamWriter,\n+      Consumer<SideEffectProducer> sideEffects) {\n     for (final ProcessRecord processRecord : record.getValue().processes()) {\n       final List<ExecutableStartEvent> startEvents =\n           processState.getProcessByKey(processRecord.getKey()).getProcess().getStartEvents();"
  },
  {
    "sha": "20011d8e0041d15871d7423a6272a636c66675c9",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/MigratedStreamProcessors.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/MigratedStreamProcessors.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/MigratedStreamProcessors.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/MigratedStreamProcessors.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -11,6 +11,7 @@\n import io.zeebe.protocol.record.ValueType;\n import io.zeebe.protocol.record.intent.Intent;\n import io.zeebe.protocol.record.intent.JobIntent;\n+import io.zeebe.protocol.record.intent.TimerIntent;\n import io.zeebe.protocol.record.value.BpmnElementType;\n import java.util.ArrayList;\n import java.util.EnumMap;\n@@ -76,6 +77,9 @@\n     MIGRATED_VALUE_TYPES.put(ValueType.VARIABLE_DOCUMENT, MIGRATED);\n     MIGRATED_VALUE_TYPES.put(ValueType.VARIABLE, MIGRATED);\n     MIGRATED_VALUE_TYPES.put(ValueType.INCIDENT, MIGRATED);\n+    MIGRATED_VALUE_TYPES.put(\n+        ValueType.TIMER,\n+        MIGRATED_INTENT_FILTER_FACTORY.apply(List.of(TimerIntent.CREATE, TimerIntent.CREATED)));\n   }\n \n   private MigratedStreamProcessors() {}"
  },
  {
    "sha": "534d01526a351551a3b55eb683e2238351a80889",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/timer/CreateTimerProcessor.java",
    "status": "modified",
    "additions": 24,
    "deletions": 35,
    "changes": 59,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/timer/CreateTimerProcessor.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/timer/CreateTimerProcessor.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/timer/CreateTimerProcessor.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -10,29 +10,33 @@\n import io.zeebe.engine.processing.streamprocessor.TypedRecord;\n import io.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;\n import io.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;\n+import io.zeebe.engine.processing.streamprocessor.writers.StateWriter;\n import io.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;\n import io.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;\n import io.zeebe.engine.state.KeyGenerator;\n-import io.zeebe.engine.state.instance.TimerInstance;\n-import io.zeebe.engine.state.mutable.MutableTimerInstanceState;\n-import io.zeebe.engine.state.mutable.MutableZeebeState;\n import io.zeebe.protocol.impl.record.value.timer.TimerRecord;\n import io.zeebe.protocol.record.intent.TimerIntent;\n import java.util.function.Consumer;\n \n+/**\n+ * Temporary processor for timer creation. Currently necessary until all processors which may\n+ * produce Timer.CREATED have been migrated to event-sourcing, otherwise events may be applied\n+ * twice.\n+ *\n+ * <p>TODO(npepinpe): remove as part of https://github.com/camunda-cloud/zeebe/issues/6589\n+ */\n public final class CreateTimerProcessor implements TypedRecordProcessor<TimerRecord> {\n-\n-  private final DueDateTimerChecker timerChecker;\n-\n-  private final MutableTimerInstanceState timerInstanceState;\n-  private final TimerInstance timerInstance = new TimerInstance();\n+  private final StateWriter stateWriter;\n   private final KeyGenerator keyGenerator;\n+  private final DueDateTimerChecker dueDateTimerChecker;\n \n   public CreateTimerProcessor(\n-      final MutableZeebeState zeebeState, final DueDateTimerChecker timerChecker) {\n-    this.timerChecker = timerChecker;\n-    timerInstanceState = zeebeState.getTimerState();\n-    keyGenerator = zeebeState.getKeyGenerator();\n+      final StateWriter stateWriter,\n+      final KeyGenerator keyGenerator,\n+      final DueDateTimerChecker dueDateTimerChecker) {\n+    this.stateWriter = stateWriter;\n+    this.keyGenerator = keyGenerator;\n+    this.dueDateTimerChecker = dueDateTimerChecker;\n   }\n \n   @Override\n@@ -41,29 +45,14 @@ public void processRecord(\n       final TypedResponseWriter responseWriter,\n       final TypedStreamWriter streamWriter,\n       final Consumer<SideEffectProducer> sideEffect) {\n-\n-    final TimerRecord timer = record.getValue();\n-\n     final long timerKey = keyGenerator.nextKey();\n-\n-    timerInstance.setElementInstanceKey(timer.getElementInstanceKey());\n-    timerInstance.setDueDate(timer.getDueDate());\n-    timerInstance.setKey(timerKey);\n-    timerInstance.setHandlerNodeId(timer.getTargetElementIdBuffer());\n-    timerInstance.setRepetitions(timer.getRepetitions());\n-    timerInstance.setProcessDefinitionKey(timer.getProcessDefinitionKey());\n-    timerInstance.setProcessInstanceKey(timer.getProcessInstanceKey());\n-\n-    sideEffect.accept(this::scheduleTimer);\n-\n-    streamWriter.appendFollowUpEvent(timerKey, TimerIntent.CREATED, timer);\n-\n-    timerInstanceState.put(timerInstance);\n-  }\n-\n-  private boolean scheduleTimer() {\n-    timerChecker.scheduleTimer(timerInstance);\n-\n-    return true;\n+    final long dueDate = record.getValue().getDueDate();\n+    sideEffect.accept(\n+        () -> {\n+          dueDateTimerChecker.scheduleTimer(dueDate);\n+          return true;\n+        });\n+\n+    stateWriter.appendFollowUpEvent(timerKey, TimerIntent.CREATED, record.getValue());\n   }\n }"
  },
  {
    "sha": "f5210f3642d15ce61ba19625c1859fc74655230b",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/timer/DueDateTimerChecker.java",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/timer/DueDateTimerChecker.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/timer/DueDateTimerChecker.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/timer/DueDateTimerChecker.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -36,7 +36,7 @@ public DueDateTimerChecker(final TimerInstanceState timerInstanceState) {\n     this.timerInstanceState = timerInstanceState;\n   }\n \n-  public void scheduleTimer(final TimerInstance timer) {\n+  public void scheduleTimer(final long dueDate) {\n \n     // We schedule only one runnable for all timers.\n     // - The runnable is scheduled when the first timer is scheduled.\n@@ -45,18 +45,17 @@ public void scheduleTimer(final TimerInstance timer) {\n     // - Otherwise, we don't need to cancel the runnable. It will be rescheduled when it is\n     // executed.\n \n-    final Duration duration =\n-        Duration.ofMillis(timer.getDueDate() - ActorClock.currentTimeMillis());\n+    final Duration duration = Duration.ofMillis(dueDate - ActorClock.currentTimeMillis());\n \n     if (scheduledTimer == null) {\n       scheduledTimer = actor.runDelayed(duration, this::triggerTimers);\n-      nextDueDate = timer.getDueDate();\n+      nextDueDate = dueDate;\n \n-    } else if (nextDueDate - timer.getDueDate() > TIMER_RESOLUTION) {\n+    } else if (nextDueDate - dueDate > TIMER_RESOLUTION) {\n       scheduledTimer.cancel();\n \n       scheduledTimer = actor.runDelayed(duration, this::triggerTimers);\n-      nextDueDate = timer.getDueDate();\n+      nextDueDate = dueDate;\n     }\n   }\n "
  },
  {
    "sha": "36153217e8f979f21a1f9bfd42ec65a2ac32715b",
    "filename": "engine/src/main/java/io/zeebe/engine/processing/timer/TriggerTimerProcessor.java",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/timer/TriggerTimerProcessor.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/processing/timer/TriggerTimerProcessor.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/processing/timer/TriggerTimerProcessor.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -14,6 +14,8 @@\n import io.zeebe.engine.processing.deployment.model.element.ExecutableCatchEvent;\n import io.zeebe.engine.processing.streamprocessor.TypedRecord;\n import io.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;\n+import io.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;\n+import io.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;\n import io.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;\n import io.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;\n import io.zeebe.engine.state.immutable.ElementInstanceState;\n@@ -29,6 +31,7 @@\n import io.zeebe.protocol.record.intent.TimerIntent;\n import io.zeebe.util.Either;\n import io.zeebe.util.buffer.BufferUtil;\n+import java.util.function.Consumer;\n import org.agrona.DirectBuffer;\n import org.agrona.concurrent.UnsafeBuffer;\n \n@@ -65,7 +68,8 @@ public TriggerTimerProcessor(\n   public void processRecord(\n       final TypedRecord<TimerRecord> record,\n       final TypedResponseWriter responseWriter,\n-      final TypedStreamWriter streamWriter) {\n+      final TypedStreamWriter streamWriter,\n+      final Consumer<SideEffectProducer> sideEffects) {\n     final TimerRecord timer = record.getValue();\n     final long elementInstanceKey = timer.getElementInstanceKey();\n \n@@ -98,7 +102,7 @@ private void processTimerTrigger(\n       streamWriter.appendFollowUpEvent(record.getKey(), TimerIntent.TRIGGERED, timer);\n \n       if (shouldReschedule(timer)) {\n-        rescheduleTimer(timer, streamWriter, catchEvent);\n+        rescheduleTimer(timer, catchEvent, streamWriter);\n       }\n     } else {\n       streamWriter.appendRejection(\n@@ -139,7 +143,7 @@ private boolean shouldReschedule(final TimerRecord timer) {\n   }\n \n   private void rescheduleTimer(\n-      final TimerRecord record, final TypedStreamWriter writer, final ExecutableCatchEvent event) {\n+      final TimerRecord record, final ExecutableCatchEvent event, final TypedCommandWriter writer) {\n     final Either<Failure, Timer> timer =\n         event.getTimerFactory().apply(expressionProcessor, record.getElementInstanceKey());\n     if (timer.isLeft()) {"
  },
  {
    "sha": "829924b1105c017213ab4ce390e88aaaa1607936",
    "filename": "engine/src/main/java/io/zeebe/engine/state/appliers/EventAppliers.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/state/appliers/EventAppliers.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/state/appliers/EventAppliers.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/state/appliers/EventAppliers.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -24,6 +24,7 @@\n import io.zeebe.protocol.record.intent.ProcessInstanceIntent;\n import io.zeebe.protocol.record.intent.ProcessIntent;\n import io.zeebe.protocol.record.intent.ProcessMessageSubscriptionIntent;\n+import io.zeebe.protocol.record.intent.TimerIntent;\n import io.zeebe.protocol.record.intent.VariableIntent;\n import java.util.HashMap;\n import java.util.Map;\n@@ -66,6 +67,7 @@ public EventAppliers(final MutableZeebeState state) {\n     register(JobBatchIntent.ACTIVATED, new JobBatchActivatedApplier(state));\n     registerIncidentEventAppliers(state);\n     registerProcessMessageSubscriptionEventAppliers(state);\n+    register(TimerIntent.CREATED, new TimerCreatedApplier(state.getTimerState()));\n   }\n \n   private void registerDeploymentAppliers(final MutableZeebeState state) {"
  },
  {
    "sha": "fe8e42c30bf0caa38f79c693fa2f6afc9bbb6094",
    "filename": "engine/src/main/java/io/zeebe/engine/state/appliers/TimerCreatedApplier.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/state/appliers/TimerCreatedApplier.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/state/appliers/TimerCreatedApplier.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/state/appliers/TimerCreatedApplier.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.1. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.1.\n+ */\n+package io.zeebe.engine.state.appliers;\n+\n+import io.zeebe.engine.state.TypedEventApplier;\n+import io.zeebe.engine.state.instance.TimerInstance;\n+import io.zeebe.engine.state.mutable.MutableTimerInstanceState;\n+import io.zeebe.protocol.impl.record.value.timer.TimerRecord;\n+import io.zeebe.protocol.record.intent.TimerIntent;\n+\n+public final class TimerCreatedApplier implements TypedEventApplier<TimerIntent, TimerRecord> {\n+\n+  private final MutableTimerInstanceState timerInstanceState;\n+  private final TimerInstance timerInstance = new TimerInstance();\n+\n+  public TimerCreatedApplier(final MutableTimerInstanceState timerInstanceState) {\n+    this.timerInstanceState = timerInstanceState;\n+  }\n+\n+  @Override\n+  public void applyState(final long key, final TimerRecord value) {\n+    timerInstance.setElementInstanceKey(value.getElementInstanceKey());\n+    timerInstance.setDueDate(value.getDueDate());\n+    timerInstance.setKey(key);\n+    timerInstance.setHandlerNodeId(value.getTargetElementIdBuffer());\n+    timerInstance.setRepetitions(value.getRepetitions());\n+    timerInstance.setProcessDefinitionKey(value.getProcessDefinitionKey());\n+    timerInstance.setProcessInstanceKey(value.getProcessInstanceKey());\n+\n+    timerInstanceState.put(timerInstance);\n+  }\n+}"
  },
  {
    "sha": "7f386caa1b12c50242d4221322a7af2b8f96d275",
    "filename": "engine/src/main/java/io/zeebe/engine/state/instance/TimerInstance.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/state/instance/TimerInstance.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/main/java/io/zeebe/engine/state/instance/TimerInstance.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/main/java/io/zeebe/engine/state/instance/TimerInstance.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -17,7 +17,7 @@\n \n public final class TimerInstance extends UnpackedObject implements DbValue {\n \n-  public static final int NO_ELEMENT_INSTANCE = -1;\n+  public static final long NO_ELEMENT_INSTANCE = -1L;\n \n   private final StringProperty handlerNodeIdProp = new StringProperty(\"handlerNodeId\", \"\");\n   private final LongProperty processDefinitionKeyProp ="
  },
  {
    "sha": "57b316ef30997d44666053f2ea24e50d82dd0edf",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStreamProcessorRule.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStreamProcessorRule.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStreamProcessorRule.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStreamProcessorRule.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -112,6 +112,8 @@ protected void before() {\n                   variablesState::getVariable);\n \n           final var writers = processingContext.getWriters();\n+          final DueDateTimerChecker dueDateTimerChecker =\n+              new DueDateTimerChecker(zeebeState.getTimerState());\n           ProcessEventProcessors.addProcessProcessors(\n               zeebeState,\n               expressionProcessor,\n@@ -123,7 +125,7 @@ protected void before() {\n                   mockSubscriptionCommandSender,\n                   writers.state(),\n                   1),\n-              new DueDateTimerChecker(zeebeState.getTimerState()),\n+              dueDateTimerChecker,\n               writers);\n \n           JobEventProcessors.addJobProcessors("
  },
  {
    "sha": "d76cb333cbf7a59e1c017471818e22bdc65d0741",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStreamProcessorTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStreamProcessorTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStreamProcessorTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStreamProcessorTest.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -438,7 +438,6 @@ public void shouldNotTriggerBoundaryEventIfTaskIsCompleted() {\n     assertThat(envRule.events().onlyTimerRecords().collect(Collectors.toList()))\n         .extracting(r -> tuple(r.getRecordType(), r.getIntent()))\n         .containsSubsequence(\n-            tuple(RecordType.COMMAND, TimerIntent.CREATE),\n             tuple(RecordType.EVENT, TimerIntent.CREATED),\n             tuple(RecordType.COMMAND, TimerIntent.TRIGGER),\n             tuple(RecordType.COMMAND_REJECTION, TimerIntent.TRIGGER));"
  },
  {
    "sha": "262a6f288d06b7ad02a8b587316ab9579b774147",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/bpmn/boundary/BoundaryEventTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/bpmn/boundary/BoundaryEventTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/bpmn/boundary/BoundaryEventTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/bpmn/boundary/BoundaryEventTest.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -301,7 +301,7 @@ public void shouldNotTerminateActivityForNonInterruptingBoundaryEvents() {\n         .containsSubsequence(\n             tuple(ValueType.PROCESS_INSTANCE, ProcessInstanceIntent.EVENT_OCCURRED),\n             tuple(ValueType.TIMER, TimerIntent.TRIGGERED),\n-            tuple(ValueType.TIMER, TimerIntent.CREATE),\n+            tuple(ValueType.TIMER, TimerIntent.CREATED),\n             tuple(ValueType.JOB, JobIntent.COMPLETED),\n             tuple(ValueType.PROCESS_INSTANCE, ProcessInstanceIntent.ELEMENT_COMPLETING),\n             tuple(ValueType.TIMER, TimerIntent.CANCEL),"
  },
  {
    "sha": "91c9d0861e89ed92b542875b5333500f9860211d",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/bpmn/gateway/EventbasedGatewayTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/bpmn/gateway/EventbasedGatewayTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/bpmn/gateway/EventbasedGatewayTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/bpmn/gateway/EventbasedGatewayTest.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -262,7 +262,7 @@ public void shouldOnlyExecuteOneBranchWithEqualTimers() {\n \n     // then\n     final List<String> timers =\n-        RecordingExporter.timerRecords(TimerIntent.CREATE)\n+        RecordingExporter.timerRecords(TimerIntent.CREATED)\n             .withProcessInstanceKey(processInstanceKey)\n             .limit(2)\n             .map(r -> r.getValue().getTargetElementId())"
  },
  {
    "sha": "92f0e7fa66376f947048e715f72569cf222575dd",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/BlacklistInstanceTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/BlacklistInstanceTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/BlacklistInstanceTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/BlacklistInstanceTest.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -140,7 +140,6 @@\n       ////////////////////////////////////////\n       //////////////// TIMERS ////////////////\n       ////////////////////////////////////////\n-      {ValueType.TIMER, TimerIntent.CREATE, true},\n       {ValueType.TIMER, TimerIntent.CREATED, true},\n       {ValueType.TIMER, TimerIntent.TRIGGER, true},\n       {ValueType.TIMER, TimerIntent.TRIGGERED, true},"
  },
  {
    "sha": "5d2594042da4381fcdb09a054d7fe48012623702",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReplayStateTest.java",
    "status": "modified",
    "additions": 95,
    "deletions": 4,
    "changes": 99,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReplayStateTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReplayStateTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReplayStateTest.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -19,7 +19,9 @@\n import io.zeebe.protocol.record.intent.JobIntent;\n import io.zeebe.protocol.record.intent.MessageIntent;\n import io.zeebe.protocol.record.intent.ProcessInstanceIntent;\n+import io.zeebe.protocol.record.intent.TimerIntent;\n import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.TimerRecordValue;\n import io.zeebe.test.util.record.RecordingExporter;\n import java.time.Duration;\n import java.util.Collection;\n@@ -40,17 +42,15 @@\n public final class ReplayStateTest {\n \n   private static final String PROCESS_ID = \"process\";\n+  @Parameter public TestCase testCase;\n+  private long lastProcessedPosition = -1L;\n \n   @Rule\n   public final EngineRule engine =\n       EngineRule.singlePartition()\n           .withOnProcessedCallback(record -> lastProcessedPosition = record.getPosition())\n           .withOnSkippedCallback(record -> lastProcessedPosition = record.getPosition());\n \n-  @Parameter public TestCase testCase;\n-\n-  private long lastProcessedPosition = -1L;\n-\n   @Parameters(name = \"{0}\")\n   public static Collection<TestCase> testRecords() {\n     return List.of(\n@@ -88,6 +88,97 @@\n                           timeToLive.plus(MessageObserver.MESSAGE_TIME_TO_LIVE_CHECK_INTERVAL));\n \n                   return RecordingExporter.messageRecords(MessageIntent.EXPIRED).getFirst();\n+                }),\n+        // TODO(npepinpe): remove after https://github.com/camunda-cloud/zeebe/issues/6568\n+        testCase(\"timer start event\")\n+            .withProcess(\n+                Bpmn.createExecutableProcess(\"process\")\n+                    .startEvent(\"timer\")\n+                    .timerWithCycle(\"R/PT1M\")\n+                    .endEvent()\n+                    .done())\n+            .withExecution(\n+                engine -> RecordingExporter.timerRecords(TimerIntent.CREATED).getFirst()),\n+        // TODO(npepinpe): remove after https://github.com/camunda-cloud/zeebe/issues/6568\n+        testCase(\"intermediate timer catch event\")\n+            .withProcess(\n+                Bpmn.createExecutableProcess(\"process\")\n+                    .startEvent()\n+                    .intermediateCatchEvent(\"timer\")\n+                    .timerWithDuration(\"PT30S\")\n+                    .endEvent()\n+                    .done())\n+            .withExecution(\n+                engine -> {\n+                  final long piKey = engine.processInstance().ofBpmnProcessId(\"process\").create();\n+                  final Record<TimerRecordValue> timer =\n+                      RecordingExporter.timerRecords(TimerIntent.CREATED)\n+                          .withProcessInstanceKey(piKey)\n+                          .getFirst();\n+\n+                  assertThat(timer).as(\"timer start event was created\").isNotNull();\n+                  engine.getClock().addTime(Duration.ofSeconds(30));\n+\n+                  return RecordingExporter.processInstanceRecords(\n+                          ProcessInstanceIntent.ELEMENT_COMPLETED)\n+                      .withProcessInstanceKey(piKey)\n+                      .withElementType(BpmnElementType.PROCESS)\n+                      .getFirst();\n+                }),\n+        // TODO(npepinpe): remove after https://github.com/camunda-cloud/zeebe/issues/6568\n+        testCase(\"interrupting timer boundary event\")\n+            .withProcess(\n+                Bpmn.createExecutableProcess(\"process\")\n+                    .startEvent()\n+                    .serviceTask(\"task\", b -> b.zeebeJobType(\"type\"))\n+                    .boundaryEvent(\"timer\", b -> b.cancelActivity(true))\n+                    .timerWithDuration(\"PT30S\")\n+                    .endEvent(\"end\")\n+                    .done())\n+            .withExecution(\n+                engine -> {\n+                  final long piKey = engine.processInstance().ofBpmnProcessId(\"process\").create();\n+                  final Record<TimerRecordValue> timer =\n+                      RecordingExporter.timerRecords(TimerIntent.CREATED)\n+                          .withProcessInstanceKey(piKey)\n+                          .getFirst();\n+\n+                  assertThat(timer).as(\"timer start event was created\").isNotNull();\n+                  engine.getClock().addTime(Duration.ofSeconds(30));\n+\n+                  return RecordingExporter.processInstanceRecords(\n+                          ProcessInstanceIntent.ELEMENT_COMPLETED)\n+                      .withProcessInstanceKey(piKey)\n+                      .withElementType(BpmnElementType.PROCESS)\n+                      .getFirst();\n+                }),\n+        // TODO(npepinpe): remove after https://github.com/camunda-cloud/zeebe/issues/6568\n+        testCase(\"non-interrupting timer boundary event\")\n+            .withProcess(\n+                Bpmn.createExecutableProcess(\"process\")\n+                    .startEvent()\n+                    .serviceTask(\"task\", b -> b.zeebeJobType(\"type\"))\n+                    .boundaryEvent(\"timer\", b -> b.cancelActivity(false))\n+                    .timerWithCycle(\"R/PT30S\")\n+                    .endEvent(\"end\")\n+                    .done())\n+            .withExecution(\n+                engine -> {\n+                  final long piKey = engine.processInstance().ofBpmnProcessId(\"process\").create();\n+                  final Record<TimerRecordValue> timer =\n+                      RecordingExporter.timerRecords(TimerIntent.CREATED)\n+                          .withProcessInstanceKey(piKey)\n+                          .getFirst();\n+\n+                  assertThat(timer).as(\"timer start event was created\").isNotNull();\n+                  engine.getClock().addTime(Duration.ofSeconds(30));\n+\n+                  return RecordingExporter.processInstanceRecords(\n+                          ProcessInstanceIntent.ELEMENT_COMPLETED)\n+                      .withProcessInstanceKey(piKey)\n+                      .withElementType(BpmnElementType.END_EVENT)\n+                      .withElementId(\"end\")\n+                      .getFirst();\n                 }));\n   }\n "
  },
  {
    "sha": "ed962301efeef4a4e115a23569c24768872e453f",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/SkipFailingEventsTest.java",
    "status": "modified",
    "additions": 27,
    "deletions": 11,
    "changes": 38,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/SkipFailingEventsTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/SkipFailingEventsTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/SkipFailingEventsTest.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -31,14 +31,18 @@\n import io.zeebe.engine.util.TestStreams;\n import io.zeebe.logstreams.log.LoggedEvent;\n import io.zeebe.logstreams.util.SynchronousLogStream;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.protocol.impl.record.RecordMetadata;\n import io.zeebe.protocol.impl.record.UnifiedRecordValue;\n+import io.zeebe.protocol.impl.record.value.deployment.DeploymentRecord;\n import io.zeebe.protocol.impl.record.value.error.ErrorRecord;\n import io.zeebe.protocol.impl.record.value.job.JobRecord;\n import io.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;\n import io.zeebe.protocol.impl.record.value.timer.TimerRecord;\n import io.zeebe.protocol.record.RecordType;\n import io.zeebe.protocol.record.ValueType;\n+import io.zeebe.protocol.record.intent.DeploymentIntent;\n import io.zeebe.protocol.record.intent.ErrorIntent;\n import io.zeebe.protocol.record.intent.JobIntent;\n import io.zeebe.protocol.record.intent.ProcessInstanceIntent;\n@@ -384,23 +388,35 @@ public void shouldNotBlacklistInstanceAndIgnoreTimerStartEvents() {\n     // given\n     when(commandResponseWriter.tryWriteResponse(anyInt(), anyLong())).thenReturn(true);\n     final List<Long> processedInstances = new ArrayList<>();\n-    final TypedRecordProcessor<TimerRecord> errorProneProcessor =\n+    final TypedRecordProcessor<DeploymentRecord> errorProneProcessor =\n         new TypedRecordProcessor<>() {\n           @Override\n           public void processRecord(\n-              final TypedRecord<TimerRecord> record,\n+              final TypedRecord<DeploymentRecord> record,\n               final TypedResponseWriter responseWriter,\n               final TypedStreamWriter streamWriter) {\n             if (record.getKey() == 0) {\n               throw new RuntimeException(\"expected\");\n             }\n-            processedInstances.add(record.getValue().getProcessInstanceKey());\n+            processedInstances.add(TimerInstance.NO_ELEMENT_INSTANCE);\n             streamWriter.appendFollowUpEvent(\n                 record.getKey(),\n                 TimerIntent.CREATED,\n                 Records.timer(TimerInstance.NO_ELEMENT_INSTANCE));\n           }\n         };\n+    final BpmnModelInstance process =\n+        Bpmn.createExecutableProcess(\"process\")\n+            .startEvent()\n+            .timerWithDuration(\"PT1S\")\n+            .endEvent()\n+            .done();\n+    final DeploymentRecord deploymentRecord = new DeploymentRecord();\n+    deploymentRecord\n+        .resources()\n+        .add()\n+        .setResourceName(\"process.bpmn\")\n+        .setResource(Bpmn.convertToString(process).getBytes());\n \n     streams.startStreamProcessor(\n         STREAM_NAME,\n@@ -409,22 +425,22 @@ public void processRecord(\n           zeebeState = processingContext.getZeebeState();\n           return TypedRecordProcessors.processors(\n                   zeebeState.getKeyGenerator(), processingContext.getWriters())\n-              .onCommand(ValueType.TIMER, TimerIntent.CREATE, errorProneProcessor);\n+              .onCommand(ValueType.DEPLOYMENT, DeploymentIntent.CREATE, errorProneProcessor);\n         });\n \n     streams\n         .newRecord(STREAM_NAME)\n-        .event(Records.timer(TimerInstance.NO_ELEMENT_INSTANCE))\n+        .event(deploymentRecord)\n         .recordType(RecordType.COMMAND)\n-        .intent(TimerIntent.CREATE)\n-        .key(keyGenerator.nextKey())\n+        .intent(DeploymentIntent.CREATE)\n+        .key(0)\n         .write();\n     streams\n         .newRecord(STREAM_NAME)\n-        .event(Records.timer(TimerInstance.NO_ELEMENT_INSTANCE))\n+        .event(deploymentRecord)\n         .recordType(RecordType.COMMAND)\n-        .intent(TimerIntent.CREATE)\n-        .key(keyGenerator.nextKey())\n+        .intent(DeploymentIntent.CREATE)\n+        .key(1)\n         .write();\n \n     // when\n@@ -436,7 +452,7 @@ public void processRecord(\n     final MockTypedRecord<TimerRecord> mockTypedRecord =\n         new MockTypedRecord<>(0, metadata, Records.timer(TimerInstance.NO_ELEMENT_INSTANCE));\n     Assertions.assertThat(zeebeState.getBlackListState().isOnBlacklist(mockTypedRecord)).isFalse();\n-    assertThat(processedInstances).containsExactly((long) TimerInstance.NO_ELEMENT_INSTANCE);\n+    assertThat(processedInstances).containsExactly(TimerInstance.NO_ELEMENT_INSTANCE);\n   }\n \n   private void waitForRecordWhichSatisfies(final Predicate<LoggedEvent> filter) {"
  },
  {
    "sha": "3057d65dd4c356d39080de9021b09d4bddd50a64",
    "filename": "engine/src/test/java/io/zeebe/engine/processing/timer/TimerCatchEventTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/timer/TimerCatchEventTest.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/processing/timer/TimerCatchEventTest.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/processing/timer/TimerCatchEventTest.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -113,8 +113,7 @@ public void testLifeCycle() {\n     assertThat(\n             RecordingExporter.records().limitToProcessInstance(processInstanceKey).timerRecords())\n         .extracting(Record::getIntent)\n-        .containsSubsequence(\n-            TimerIntent.CREATE, TimerIntent.CREATED, TimerIntent.TRIGGER, TimerIntent.TRIGGERED);\n+        .containsSubsequence(TimerIntent.CREATED, TimerIntent.TRIGGER, TimerIntent.TRIGGERED);\n   }\n \n   @Test"
  },
  {
    "sha": "a8a47039c2839bfc3e8f6d383f7fa017cee594c0",
    "filename": "engine/src/test/java/io/zeebe/engine/util/Records.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/util/Records.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/engine/src/test/java/io/zeebe/engine/util/Records.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/engine/src/test/java/io/zeebe/engine/util/Records.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -166,7 +166,7 @@ public static JobRecord job(final int instanceKey) {\n     return event;\n   }\n \n-  public static TimerRecord timer(final int instanceKey) {\n+  public static TimerRecord timer(final long instanceKey) {\n     final TimerRecord event = new TimerRecord();\n     event\n         .setProcessInstanceKey(instanceKey)"
  },
  {
    "sha": "0a3e7d1e0116ac8a724342172cd4ddabe50b41a1",
    "filename": "protocol/src/main/java/io/zeebe/protocol/record/intent/TimerIntent.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/camunda-cloud/zeebe/blob/ebcf633b31948e5c967d3edae890334393a515ee/protocol/src/main/java/io/zeebe/protocol/record/intent/TimerIntent.java",
    "raw_url": "https://github.com/camunda-cloud/zeebe/raw/ebcf633b31948e5c967d3edae890334393a515ee/protocol/src/main/java/io/zeebe/protocol/record/intent/TimerIntent.java",
    "contents_url": "https://api.github.com/repos/camunda-cloud/zeebe/contents/protocol/src/main/java/io/zeebe/protocol/record/intent/TimerIntent.java?ref=ebcf633b31948e5c967d3edae890334393a515ee",
    "patch": "@@ -16,7 +16,10 @@\n package io.zeebe.protocol.record.intent;\n \n public enum TimerIntent implements ProcessInstanceRelatedIntent {\n+  // TODO(npepinpe): remove as part of https://github.com/camunda-cloud/zeebe/issues/6589\n+  @Deprecated\n   CREATE((short) 0),\n+\n   CREATED((short) 1),\n \n   TRIGGER((short) 2),"
  }
]
