[
  {
    "sha": "65ef678abb7f1f5c29562bdcf3f8a60c6191e139",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/pom.xml",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/pom.xml",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/pom.xml?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -59,6 +59,15 @@\n             <artifactId>modelmapper</artifactId>\n             <version>2.3.9</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.hibernate.validator</groupId>\n+            <artifactId>hibernate-validator</artifactId>\n+            <version>6.1.6.Final</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "ab443fa17d11fdc0bcd6bdb987858668eafd51ce",
    "filename": "src/main/java/com/core/config/SpringFoxConfig.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/config/SpringFoxConfig.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/config/SpringFoxConfig.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/config/SpringFoxConfig.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,22 @@\n+package com.core.config;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import springfox.documentation.builders.PathSelectors;\n+import springfox.documentation.builders.RequestHandlerSelectors;\n+import springfox.documentation.spi.DocumentationType;\n+import springfox.documentation.spring.web.plugins.Docket;\n+import springfox.documentation.swagger2.annotations.EnableSwagger2;\n+\n+@EnableSwagger2\n+@Configuration\n+public class SpringFoxConfig {                                    \n+    @Bean\n+    public Docket api() {\n+        return new Docket(DocumentationType.SWAGGER_2)\n+          .select()                                  \n+          .apis(RequestHandlerSelectors.any())\n+          .paths(PathSelectors.any())\n+          .build();                                           \n+    }\n+}"
  },
  {
    "sha": "5ae91ab0877d60bc0e290e42fd1c5c23c34dc071",
    "filename": "src/main/java/com/core/controller/AccountController.java",
    "status": "added",
    "additions": 94,
    "deletions": 0,
    "changes": 94,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/controller/AccountController.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/controller/AccountController.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/controller/AccountController.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,94 @@\n+package com.core.controller;\n+\n+import com.core.model.Account;\n+import com.core.model.dto.account.AccountRequestDto;\n+import com.core.model.dto.account.AccountResponseDto;\n+import com.core.model.dto.account.TopUpRequestDto;\n+import com.core.model.dto.transaction.TransactionRequestDto;\n+import com.core.model.dto.transaction.TransactionResponseDto;\n+import com.core.service.AccountService;\n+import com.core.service.TransactionService;\n+import com.core.service.mapper.account.AccountMapper;\n+import com.core.service.mapper.transaction.TransactionMapper;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.validation.Valid;\n+import lombok.AllArgsConstructor;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/accounts\")\n+@AllArgsConstructor\n+public class AccountController {\n+    private final AccountService accountService;\n+    private final AccountMapper accountMapper;\n+    private final TransactionService transactionService;\n+    private final TransactionMapper transactionMapper;\n+    \n+    @PostMapping\n+    public AccountResponseDto createNewAccount(@RequestBody @Valid AccountRequestDto dto) {\n+        Account account = accountMapper.mapToEntity(dto);\n+        accountService.createOrUpdate(account);\n+        return accountMapper.mapToDto(account);\n+    }\n+    \n+    @GetMapping(\"/by-phone\")\n+    public List<AccountResponseDto> getAllUsersAccounts(@RequestParam(\"phone\") String phoneNumber) {\n+        return accountService.getAllByPhone(phoneNumber).stream()\n+                .map(accountMapper::mapToDto)\n+                .collect(Collectors.toList());\n+    }\n+    \n+    @PostMapping(\"/transfer\")\n+    public List<TransactionResponseDto> transfer(@RequestBody @Valid TransactionRequestDto dto) {\n+        return accountService\n+                .transfer(accountService.getByNumber(dto.getFromAccount()),\n+                        accountService.getByNumber(dto.getToAccount()),\n+                        BigDecimal.valueOf(dto.getAmount()))\n+                .stream()\n+                .map(transactionMapper::mapToDto)\n+                .collect(Collectors.toList());\n+    }\n+    \n+    @GetMapping(\"/{accountNumber}\")\n+    public String getBalance(@PathVariable Long accountNumber) {\n+        Account byNumber = accountService.getByNumber(accountNumber);\n+        return byNumber.getBalance().toString().concat(\" \").concat(byNumber.getCurrency().name());\n+    }\n+    \n+    @GetMapping(\"/history/{accountNumber}\")\n+    public List<TransactionResponseDto> getAccountHistory(@PathVariable Long accountNumber,\n+                                                          @RequestParam(value = \"page\",\n+                                                                  defaultValue = \"0\") int page,\n+                                                          @RequestParam(value = \"size\",\n+                                                                  defaultValue = \"10\") int size) {\n+        return transactionService\n+                .getAllByAccount(accountService.getByNumber(accountNumber), page, size)\n+                .stream()\n+                .map(transactionMapper::mapToDto)\n+                .collect(Collectors.toList());\n+    }\n+    \n+    @PutMapping(\"/{accountNumber}\")\n+    public String topUpBalance(@PathVariable Long accountNumber,\n+                               @RequestBody @Valid TopUpRequestDto dto) {\n+        Account account = accountService.topUpBalance(accountService.getByNumber(accountNumber),\n+                BigDecimal.valueOf(dto.getTopUpAmount()));\n+        return account.getBalance().toString().concat(\" \").concat(account.getCurrency().name());\n+    }\n+    \n+    @PatchMapping(\"/{accountNumber}\")\n+    public String blockAccount(@PathVariable Long accountNumber) {\n+        accountService.blockAccount(accountNumber);\n+        return \"The account was blocked!\";\n+    }\n+}"
  },
  {
    "sha": "b7a3a165cb925f707993ce234f271a0d8590beff",
    "filename": "src/main/java/com/core/controller/UserController.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/controller/UserController.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/controller/UserController.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/controller/UserController.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,59 @@\n+package com.core.controller;\n+\n+import com.core.model.User;\n+import com.core.model.dto.user.UserRequestDto;\n+import com.core.model.dto.user.UserResponseDto;\n+import com.core.service.RoleService;\n+import com.core.service.UserService;\n+import com.core.service.mapper.user.UserMapper;\n+import java.util.Set;\n+import javax.validation.Valid;\n+import lombok.AllArgsConstructor;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/users\")\n+@AllArgsConstructor\n+public class UserController {\n+    private final UserService userService;\n+    private final RoleService roleService;\n+    private final UserMapper userMapper;\n+    \n+    @PostMapping\n+    public UserResponseDto createNewUser(@RequestBody @Valid UserRequestDto requestDto) {\n+        User user = userService.saveOrUpdate(userMapper.mapToEntity(requestDto));\n+        user.setRoles(Set.of(roleService.getByName(\"USER\")));\n+        return userMapper.mapToDto(user);\n+    }\n+    \n+    @PutMapping(\"/{id}\")\n+    public UserResponseDto updateUser(@PathVariable Long id,\n+                                      @RequestBody @Valid UserRequestDto requestDto) {\n+        User user = userMapper.mapToEntity(requestDto);\n+        user.setId(id);\n+        return userMapper.mapToDto(userService.saveOrUpdate(user));\n+    }\n+    \n+    @GetMapping(\"/{id}\")\n+    public UserResponseDto getUser(@PathVariable Long id) {\n+        return userMapper.mapToDto(userService.get(id));\n+    }\n+    \n+    @GetMapping(\"/by-phone\")\n+    public UserResponseDto getUserByPhoneNumber(@RequestParam(\"phone\") String phoneNumber) {\n+        return userMapper.mapToDto(userService.getByPhoneNumber(phoneNumber));\n+    }\n+    \n+    @DeleteMapping(\"/{id}\")\n+    public void removeUserById(@PathVariable Long id) {\n+        userService.remove(id);\n+    }\n+}"
  },
  {
    "sha": "cb588952cdec73cf5458fa50bad25f54ad41cf25",
    "filename": "src/main/java/com/core/controller/WelcomeController.java",
    "status": "modified",
    "additions": 7,
    "deletions": 25,
    "changes": 32,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/controller/WelcomeController.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/controller/WelcomeController.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/controller/WelcomeController.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -1,38 +1,26 @@\n package com.core.controller;\n \n-import com.core.model.Role;\n+import com.core.model.Currency;\n import com.core.model.User;\n-import com.core.model.dto.UserRequestDto;\n-import com.core.model.dto.UserResponseDto;\n import com.core.service.RoleService;\n import com.core.service.UserService;\n-import com.core.service.mapper.UserMapper;\n+import com.core.service.currency.CurrencyConversionService;\n import java.time.LocalDate;\n import java.util.Set;\n import lombok.AllArgsConstructor;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n-@RequestMapping(\"/users\")\n @RestController\n @AllArgsConstructor\n public class WelcomeController {\n     private final UserService userService;\n     private final RoleService roleService;\n-    private final UserMapper mapper;\n+    private final CurrencyConversionService currencyService;\n     \n     @GetMapping(\"/inject\")\n     public String dataInjector() {\n-        Role user = new Role();\n-        user.setRoleTitle(Role.RoleTitle.USER);\n-        roleService.save(user);\n-        Role admin = new Role();\n-        admin.setRoleTitle(Role.RoleTitle.ADMIN);\n-        roleService.save(admin);\n         User user1 = new User();\n         user1.setName(\"Oleh\");\n         user1.setPassword(\"1234\");\n@@ -48,14 +36,8 @@ public String getWelcomeMassage() {\n         return \"Welcome to our bank!\";\n     }\n     \n-    @GetMapping(\"/{id}\")\n-    public UserResponseDto getUserById(@PathVariable Long id) {\n-        return mapper.mapToDto(userService.get(id));\n-    }\n-    \n-    @PostMapping\n-    public UserResponseDto createNewUser(@RequestBody UserRequestDto dto) {\n-        User user = userService.saveOrUpdate(mapper.mapToEntity(dto));\n-        return mapper.mapToDto(user);\n+    @GetMapping(\"convert\")\n+    public String testExchangeApi(@RequestParam double amount) {\n+        return currencyService.convert(Currency.USD, Currency.UAH, amount) + \"\";\n     }\n }"
  },
  {
    "sha": "79b89b0b2b0bf9deefbc22450ef5c19313b1b8c2",
    "filename": "src/main/java/com/core/lib/ExternalApiRequestException.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/lib/ExternalApiRequestException.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/lib/ExternalApiRequestException.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/lib/ExternalApiRequestException.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,11 @@\n+package com.core.lib;\n+\n+public class ExternalApiRequestException extends RuntimeException {\n+    public ExternalApiRequestException(String message) {\n+        super(message);\n+    }\n+    \n+    public ExternalApiRequestException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}"
  },
  {
    "sha": "947f3a98cb1d88369ca5dc04773656d0884ace74",
    "filename": "src/main/java/com/core/lib/IllegalTransferException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/lib/IllegalTransferException.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/lib/IllegalTransferException.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/lib/IllegalTransferException.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,7 @@\n+package com.core.lib;\n+\n+public class IllegalTransferException extends RuntimeException {\n+    public IllegalTransferException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "0323aaae1a708c076c4ba96318359b21460f0be3",
    "filename": "src/main/java/com/core/model/Account.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/Account.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/Account.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/Account.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,33 @@\n+package com.core.model;\n+\n+import java.math.BigDecimal;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import lombok.Data;\n+import lombok.ToString;\n+\n+@Data\n+@Entity\n+@Table(name = \"accounts\")\n+public class Account {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+    @Column(name = \"account_number\", unique = true)\n+    private Long accountNumber;\n+    @Enumerated(EnumType.STRING)\n+    private Currency currency;\n+    private BigDecimal balance;\n+    @Column(name = \"is_active\")\n+    private boolean isActive;\n+    @ManyToOne\n+    @ToString.Exclude\n+    private User user;\n+}"
  },
  {
    "sha": "f498ef22b3593757780705e604144b91527b9258",
    "filename": "src/main/java/com/core/model/Currency.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/Currency.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/Currency.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/Currency.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,5 @@\n+package com.core.model;\n+\n+public enum Currency {\n+    USD, EUR, UAH\n+}"
  },
  {
    "sha": "13086199dc45862298aa2eeb157e73e5a3ad3b54",
    "filename": "src/main/java/com/core/model/Transaction.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/Transaction.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/Transaction.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/Transaction.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,34 @@\n+package com.core.model;\n+\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import lombok.Data;\n+\n+@Data\n+@Entity\n+@Table(name = \"transactions\")\n+public class Transaction {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+    @ManyToOne\n+    private Account fromAccount;\n+    @ManyToOne\n+    private Account toAccount;\n+    private LocalDateTime timeStamp;\n+    private BigDecimal amount;\n+    @Enumerated(EnumType.STRING)\n+    private Type type;\n+    \n+    public enum Type {\n+        INCOMING, OUTGOING, TOPUP\n+    }\n+}"
  },
  {
    "sha": "f89e3a254463ef45e51ea84aa0787a5d101b68b0",
    "filename": "src/main/java/com/core/model/dto/UserRequestDto.java",
    "status": "removed",
    "additions": 0,
    "deletions": 13,
    "changes": 13,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a6456360dc149495b012751b26b512315da8c6e6/src/main/java/com/core/model/dto/UserRequestDto.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a6456360dc149495b012751b26b512315da8c6e6/src/main/java/com/core/model/dto/UserRequestDto.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/dto/UserRequestDto.java?ref=a6456360dc149495b012751b26b512315da8c6e6",
    "patch": "@@ -1,13 +0,0 @@\n-package com.core.model.dto;\n-\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n-\n-@Data\n-@NoArgsConstructor\n-public class UserRequestDto {\n-    private Long id;\n-    private String name;\n-    private String dateOfBirth;\n-    private String phoneNumber;\n-}"
  },
  {
    "sha": "836eca84b0561b9be692b3b25ed401dd860ef970",
    "filename": "src/main/java/com/core/model/dto/account/AccountRequestDto.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/account/AccountRequestDto.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/account/AccountRequestDto.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/dto/account/AccountRequestDto.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,17 @@\n+package com.core.model.dto.account;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Positive;\n+import lombok.Data;\n+\n+@Data\n+public class AccountRequestDto {\n+    @Positive\n+    private long accountNumber;\n+    @NotBlank\n+    @NotNull\n+    private String currency;\n+    @Positive\n+    private long userId;\n+}"
  },
  {
    "sha": "253e4a3943199316b9adcba06a62001fa4e34ec9",
    "filename": "src/main/java/com/core/model/dto/account/AccountResponseDto.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/account/AccountResponseDto.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/account/AccountResponseDto.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/dto/account/AccountResponseDto.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,11 @@\n+package com.core.model.dto.account;\n+\n+import lombok.Data;\n+\n+@Data\n+public class AccountResponseDto {\n+    private String accountNumber;\n+    private String currency;\n+    private String balance;\n+    private String userPhoneNumber;\n+}"
  },
  {
    "sha": "4b42b85d71ed388828a0e061feff83d5603cb76a",
    "filename": "src/main/java/com/core/model/dto/account/TopUpRequestDto.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/account/TopUpRequestDto.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/account/TopUpRequestDto.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/dto/account/TopUpRequestDto.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,10 @@\n+package com.core.model.dto.account;\n+\n+import javax.validation.constraints.Positive;\n+import lombok.Data;\n+\n+@Data\n+public class TopUpRequestDto {\n+    @Positive\n+    private double topUpAmount;\n+}"
  },
  {
    "sha": "85b4fd35b33be7b41a0a33b0eb1ea711f3533ceb",
    "filename": "src/main/java/com/core/model/dto/transaction/TransactionRequestDto.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/transaction/TransactionRequestDto.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/transaction/TransactionRequestDto.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/dto/transaction/TransactionRequestDto.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,14 @@\n+package com.core.model.dto.transaction;\n+\n+import javax.validation.constraints.Positive;\n+import lombok.Data;\n+\n+@Data\n+public class TransactionRequestDto {\n+    @Positive\n+    private long fromAccount;\n+    @Positive\n+    private long toAccount;\n+    @Positive\n+    private double amount;\n+}"
  },
  {
    "sha": "5f5147528e10950f11e8643310acefee997d0647",
    "filename": "src/main/java/com/core/model/dto/transaction/TransactionResponseDto.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/transaction/TransactionResponseDto.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/transaction/TransactionResponseDto.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/dto/transaction/TransactionResponseDto.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,14 @@\n+package com.core.model.dto.transaction;\n+\n+import java.math.BigDecimal;\n+import lombok.Data;\n+\n+@Data\n+public class TransactionResponseDto {\n+    private Long id;\n+    private String fromAccount;\n+    private String toAccount;\n+    private String timeStamp;\n+    private BigDecimal amount;\n+    private String type;\n+}"
  },
  {
    "sha": "4c338e061f24de580eae50bdede1c6c8438e4277",
    "filename": "src/main/java/com/core/model/dto/user/UserRequestDto.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/user/UserRequestDto.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/user/UserRequestDto.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/dto/user/UserRequestDto.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,20 @@\n+package com.core.model.dto.user;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@NoArgsConstructor\n+public class UserRequestDto {\n+    @NotBlank\n+    @NotNull\n+    private String name;\n+    @NotBlank\n+    @NotNull\n+    private String dateOfBirth;\n+    @NotBlank\n+    @NotNull\n+    private String phoneNumber;\n+}"
  },
  {
    "sha": "ca3ff163dc857a9d696c5e1279c2022ce9782cfa",
    "filename": "src/main/java/com/core/model/dto/user/UserResponseDto.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/user/UserResponseDto.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/model/dto/user/UserResponseDto.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/model/dto/user/UserResponseDto.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -1,4 +1,4 @@\n-package com.core.model.dto;\n+package com.core.model.dto.user;\n \n import lombok.Data;\n import lombok.NoArgsConstructor;",
    "previous_filename": "src/main/java/com/core/model/dto/UserResponseDto.java"
  },
  {
    "sha": "7de677b2214d89397f0c3042a12a715c6e4950c2",
    "filename": "src/main/java/com/core/repository/AccountRepository.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/repository/AccountRepository.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/repository/AccountRepository.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/repository/AccountRepository.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,18 @@\n+package com.core.repository;\n+\n+import com.core.model.Account;\n+import java.util.List;\n+import java.util.Optional;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+\n+public interface AccountRepository extends JpaRepository<Account, Long> {\n+    List<Account> findAllByUserPhoneNumber(String phoneNumber);\n+    \n+    Optional<Account> getByAccountNumber(Long accountNumber);\n+    \n+    @Modifying\n+    @Query(\"update Account a set a.isActive = false where a.accountNumber = ?1\")\n+    void blockAccount(Long accountNumber);\n+}"
  },
  {
    "sha": "c8e0b1e6296cd001d5cb2052fe8b65c35a565355",
    "filename": "src/main/java/com/core/repository/TransactionRepository.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/repository/TransactionRepository.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/repository/TransactionRepository.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/repository/TransactionRepository.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,27 @@\n+package com.core.repository;\n+\n+import com.core.model.Account;\n+import com.core.model.Transaction;\n+import java.time.LocalDate;\n+import java.util.List;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+\n+public interface TransactionRepository extends JpaRepository<Transaction, Long> {\n+    @Query(\"from Transaction t where t.fromAccount = ?1 or t.toAccount =?1\")\n+    List<Transaction> findAllByAccount(Account account, Pageable pageable);\n+    \n+    @Query(\"from Transaction t where t.fromAccount = ?1 or t.toAccount =?1 and t.timeStamp >= ?2\")\n+    List<Transaction> findAllByAccountAndDateFrom(Account account,\n+                                                  LocalDate dateFrom,\n+                                                  Pageable pageable);\n+    \n+    @Query(\"from Transaction t where t.fromAccount = ?1 \"\n+             + \"or t.toAccount = ?1 and t.timeStamp >= ?2 \"\n+             + \"and t.timeStamp <= ?3\")\n+    List<Transaction> findAllByAccountAndBetweenDates(Account account,\n+                                                      LocalDate dateFrom,\n+                                                      LocalDate dateTo,\n+                                                      Pageable pageable);\n+}"
  },
  {
    "sha": "6dca0a7343dcb912793e57970b85df4a3fe852e5",
    "filename": "src/main/java/com/core/repository/UserRepository.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/repository/UserRepository.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/repository/UserRepository.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/repository/UserRepository.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -6,9 +6,9 @@\n import org.springframework.data.jpa.repository.Query;\n \n public interface UserRepository extends JpaRepository<User, Long> {\n-    @Query(\"from User u join fetch u.roles where u.phoneNumber = :number\")\n+    @Query(\"select u from User u left join fetch u.roles where u.phoneNumber = ?1\")\n     Optional<User> getUserByPhoneNumber(String number);\n     \n-    @Query(\"from User u join fetch u.roles where u.id = :id\")\n-    Optional<User> getById(Long id);\n+    @Query(\"select u from User u left join fetch u.roles where u.id = ?1\")\n+    Optional<User> findById(Long id);\n }"
  },
  {
    "sha": "57522af8e22c2669fc63309814e3448c8d075602",
    "filename": "src/main/java/com/core/service/AccountService.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/AccountService.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/AccountService.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/AccountService.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,20 @@\n+package com.core.service;\n+\n+import com.core.model.Account;\n+import com.core.model.Transaction;\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+public interface AccountService {\n+    Account createOrUpdate(Account account);\n+    \n+    List<Account> getAllByPhone(String phoneNumber);\n+    \n+    List<Transaction> transfer(Account fromAccount, Account toAccount, BigDecimal amount);\n+    \n+    Account topUpBalance(Account account, BigDecimal amount);\n+    \n+    Account getByNumber(Long accountNumber);\n+    \n+    void blockAccount(Long accountNumber);\n+}"
  },
  {
    "sha": "80f1ea094b8b3d07ef78df2468cee76109801fee",
    "filename": "src/main/java/com/core/service/ExceptionHandler.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/ExceptionHandler.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/ExceptionHandler.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/ExceptionHandler.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,49 @@\n+package com.core.service;\n+\n+import com.core.lib.DataProcessingException;\n+import com.core.lib.ExternalApiRequestException;\n+import com.core.lib.IllegalTransferException;\n+import java.time.LocalDateTime;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.springframework.context.support.DefaultMessageSourceResolvable;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.context.request.WebRequest;\n+import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n+\n+@ControllerAdvice\n+public class ExceptionHandler extends ResponseEntityExceptionHandler {\n+    @Override\n+    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException e,\n+                                                                  HttpHeaders headers,\n+                                                                  HttpStatus status,\n+                                                                  WebRequest request) {\n+        Map<String, Object> body = new LinkedHashMap<>();\n+        body.put(\"timestamp\", LocalDateTime.now().toString());\n+        body.put(\"status\", status.value());\n+        \n+        List<String> errors = e.getBindingResult()\n+                .getAllErrors()\n+                .stream()\n+                .map(DefaultMessageSourceResolvable::getDefaultMessage)\n+                .collect(Collectors.toList());\n+        body.put(\"errors\", errors);\n+        return new ResponseEntity<>(body, headers, status);\n+    }\n+    \n+    @org.springframework.web.bind.annotation.ExceptionHandler({DataProcessingException.class,\n+            ExternalApiRequestException.class, IllegalTransferException.class})\n+    public ResponseEntity<Object> customExceptionsHandler(Exception ex) {\n+        Map<String, Object> body = new LinkedHashMap<>();\n+        body.put(\"timestamp\", LocalDateTime.now().toString());\n+        body.put(\"status\", HttpStatus.BAD_REQUEST);\n+        body.put(\"message\", ex.getMessage());\n+        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);\n+    }\n+}"
  },
  {
    "sha": "9e00396699aef196b39d3104585728104ab8a695",
    "filename": "src/main/java/com/core/service/TransactionService.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/TransactionService.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/TransactionService.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/TransactionService.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,28 @@\n+package com.core.service;\n+\n+import com.core.model.Account;\n+import com.core.model.Transaction;\n+import java.time.LocalDate;\n+import java.util.List;\n+\n+public interface TransactionService {\n+    Transaction create(Transaction transaction);\n+    \n+    Transaction get(Long id);\n+    \n+    List<Transaction> getAllByAccount(Account account,\n+                                      int page, int pageSize);\n+    \n+    List<Transaction> getByAccountAndDateFrom(Account account,\n+                                              LocalDate dateFrom,\n+                                              int page, int pageSize);\n+    \n+    List<Transaction> getByAccountAndBetweenDates(Account account,\n+                                                 LocalDate dateFrom,\n+                                                 LocalDate dateTo,\n+                                                 int page, int pageSize);\n+    \n+    Transaction rollbackTransaction(Long id);\n+    \n+    void remove(Long id);\n+}"
  },
  {
    "sha": "dcac022c913f7003c954029dd6f3cfc0a3aaa865",
    "filename": "src/main/java/com/core/service/currency/CurrencyConversionService.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/currency/CurrencyConversionService.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/currency/CurrencyConversionService.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/currency/CurrencyConversionService.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,7 @@\n+package com.core.service.currency;\n+\n+import com.core.model.Currency;\n+\n+public interface CurrencyConversionService {\n+    double convert(Currency fromCurrency, Currency toCurrency, double amount);\n+}"
  },
  {
    "sha": "029f74edb3ba9fc21c4e5329216c17f190947e2e",
    "filename": "src/main/java/com/core/service/currency/CurrencyConversionServiceImpl.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/currency/CurrencyConversionServiceImpl.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/currency/CurrencyConversionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/currency/CurrencyConversionServiceImpl.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,48 @@\n+package com.core.service.currency;\n+\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+\n+import com.core.lib.ExternalApiRequestException;\n+import com.core.model.Currency;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class CurrencyConversionServiceImpl implements CurrencyConversionService {\n+    private static final String CONNECTION_EXCEPTION_MESSAGE =\n+            \"Couldn't proceed due to error, \"\n+            + \"please check of URL you're requesting is valid!\";\n+    private static final String EXCHANGE_RESULT_VALUE = \"result\";\n+    \n+    @Value(\"${currency-exchange-api-url-template}\")\n+    private String apiUrl;\n+    \n+    @Override\n+    public double convert(Currency fromCurrency, Currency toCurrency, double amount) {\n+        String uri = String.format(apiUrl, fromCurrency.name(),\n+                toCurrency.name(), amount);\n+        try {\n+            HttpRequest request = HttpRequest.newBuilder()\n+                    .uri(new URI(uri))\n+                    .timeout(Duration.of(10, SECONDS))\n+                    .GET()\n+                    .build();\n+            HttpResponse<String> response = HttpClient.newBuilder()\n+                    .build().send(request, HttpResponse.BodyHandlers.ofString());\n+            HashMap<String, Object> responseValues\n+                    = new ObjectMapper().readValue(response.body(), HashMap.class);\n+            return (double) responseValues.get(EXCHANGE_RESULT_VALUE);\n+        } catch (URISyntaxException | InterruptedException | IOException e) {\n+            throw new ExternalApiRequestException(CONNECTION_EXCEPTION_MESSAGE);\n+        }\n+    }\n+}"
  },
  {
    "sha": "fa1856af57db39b1d8ca018b6e324832bcd4dfce",
    "filename": "src/main/java/com/core/service/implementation/AccountServiceImpl.java",
    "status": "added",
    "additions": 101,
    "deletions": 0,
    "changes": 101,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/implementation/AccountServiceImpl.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/implementation/AccountServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/implementation/AccountServiceImpl.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,101 @@\n+package com.core.service.implementation;\n+\n+import com.core.lib.DataProcessingException;\n+import com.core.lib.IllegalTransferException;\n+import com.core.model.Account;\n+import com.core.model.Transaction;\n+import com.core.repository.AccountRepository;\n+import com.core.repository.TransactionRepository;\n+import com.core.service.AccountService;\n+import com.core.service.currency.CurrencyConversionService;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+@AllArgsConstructor\n+public class AccountServiceImpl implements AccountService {\n+    public static final String TRANSFER_EXCEPTION_MESSAGE = \"Wrong transfer amount of money.\";\n+    private final AccountRepository accountRepository;\n+    private final TransactionRepository transactionRepository;\n+    private final CurrencyConversionService currencyService;\n+    \n+    @Transactional\n+    @Override\n+    public Account createOrUpdate(Account account) {\n+        return accountRepository.save(account);\n+    }\n+    \n+    @Override\n+    public List<Account> getAllByPhone(String phoneNumber) {\n+        return accountRepository.findAllByUserPhoneNumber(phoneNumber);\n+    }\n+    \n+    @Transactional\n+    @Override\n+    public List<Transaction> transfer(Account fromAccount, Account toAccount, BigDecimal amount) {\n+        if (fromAccount.getBalance().compareTo(amount) <= 0) {\n+            throw new IllegalTransferException(TRANSFER_EXCEPTION_MESSAGE);\n+        }\n+        BigDecimal convertedAmount =\n+                BigDecimal.valueOf(currencyService.convert(fromAccount.getCurrency(),\n+                toAccount.getCurrency(), amount.doubleValue()));\n+        \n+        fromAccount.setBalance(fromAccount.getBalance().subtract(amount));\n+        toAccount.setBalance(toAccount.getBalance().add(convertedAmount));\n+        accountRepository.save(fromAccount);\n+        accountRepository.save(toAccount);\n+        return transactionRepository.saveAll(getTransactions(fromAccount,\n+                toAccount, amount, convertedAmount, LocalDateTime.now()));\n+    }\n+    \n+    @Transactional\n+    @Override\n+    public Account topUpBalance(Account account, BigDecimal amount) {\n+        Transaction topUp = new Transaction();\n+        topUp.setTimeStamp(LocalDateTime.now());\n+        topUp.setToAccount(account);\n+        topUp.setFromAccount(account);\n+        topUp.setAmount(amount);\n+        topUp.setType(Transaction.Type.TOPUP);\n+        account.setBalance(account.getBalance().add(amount));\n+        accountRepository.save(account);\n+        transactionRepository.save(topUp);\n+        return account;\n+    }\n+    \n+    @Override\n+    public Account getByNumber(Long accountNumber) {\n+        return accountRepository.getByAccountNumber(accountNumber).orElseThrow(() ->\n+                new DataProcessingException(String.format(\"Couldn't find account with number %d\",\n+                        accountNumber)));\n+    }\n+    \n+    @Transactional\n+    @Override\n+    public void blockAccount(Long accountNumber) {\n+        accountRepository.blockAccount(accountNumber);\n+    }\n+    \n+    private List<Transaction> getTransactions(Account from, Account to,\n+                                              BigDecimal amount, BigDecimal convertedAmount,\n+                                              LocalDateTime stamp) {\n+        Transaction outcoming = new Transaction();\n+        outcoming.setFromAccount(from);\n+        outcoming.setToAccount(to);\n+        outcoming.setType(Transaction.Type.OUTGOING);\n+        outcoming.setAmount(amount);\n+        outcoming.setTimeStamp(stamp);\n+        \n+        Transaction incoming = new Transaction();\n+        incoming.setFromAccount(from);\n+        incoming.setToAccount(to);\n+        incoming.setType(Transaction.Type.INCOMING);\n+        incoming.setTimeStamp(stamp);\n+        incoming.setAmount(convertedAmount);\n+        return List.of(incoming, outcoming);\n+    }\n+}"
  },
  {
    "sha": "d92d4502fc0833bf0e58ccf8a3a4157ce92db09a",
    "filename": "src/main/java/com/core/service/implementation/RoleServiceImpl.java",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/implementation/RoleServiceImpl.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/implementation/RoleServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/implementation/RoleServiceImpl.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -4,6 +4,7 @@\n import com.core.model.Role;\n import com.core.repository.RoleRepository;\n import com.core.service.RoleService;\n+import javax.annotation.PostConstruct;\n import lombok.AllArgsConstructor;\n import org.springframework.stereotype.Service;\n \n@@ -12,6 +13,16 @@\n public class RoleServiceImpl implements RoleService {\n     private final RoleRepository roleRepository;\n     \n+    @PostConstruct\n+    private void injectBasicRoles() {\n+        Role user = new Role();\n+        user.setRoleTitle(Role.RoleTitle.USER);\n+        roleRepository.save(user);\n+        Role admin = new Role();\n+        admin.setRoleTitle(Role.RoleTitle.ADMIN);\n+        roleRepository.save(admin);\n+    }\n+    \n     @Override\n     public Role save(Role role) {\n         return roleRepository.save(role);\n@@ -21,6 +32,6 @@ public Role save(Role role) {\n     public Role getByName(String name) {\n         return roleRepository.getRoleByRoleTitle(Role.RoleTitle.valueOf(name.toUpperCase()))\n                 .orElseThrow(() ->\n-                new DataProcessingException(String.format(\"No role with %s name\", name)));\n+                        new DataProcessingException(String.format(\"No role with %s name\", name)));\n     }\n }"
  },
  {
    "sha": "3d4d194e354a05865d33340d9417dd6db674afef",
    "filename": "src/main/java/com/core/service/implementation/TransactionServiceImpl.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/implementation/TransactionServiceImpl.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/implementation/TransactionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/implementation/TransactionServiceImpl.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -0,0 +1,76 @@\n+package com.core.service.implementation;\n+\n+import com.core.lib.DataProcessingException;\n+import com.core.model.Account;\n+import com.core.model.Transaction;\n+import com.core.repository.TransactionRepository;\n+import com.core.service.TransactionService;\n+import java.time.LocalDate;\n+import java.util.List;\n+import java.util.Optional;\n+import lombok.AllArgsConstructor;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+@AllArgsConstructor\n+public class TransactionServiceImpl implements TransactionService {\n+    private final TransactionRepository transactionRepository;\n+    \n+    @Override\n+    public Transaction create(Transaction transaction) {\n+        return transactionRepository.save(transaction);\n+    }\n+    \n+    @Override\n+    public Transaction get(Long id) {\n+        return transactionRepository.findById(id).orElseThrow(() ->\n+                new DataProcessingException(String.format(\"Transaction with id=%d wasn't found\",\n+                        id)));\n+    }\n+    \n+    @Override\n+    public List<Transaction> getAllByAccount(Account account,\n+                                             int page, int pageSize) {\n+        return transactionRepository.findAllByAccount(account,\n+                PageRequest.of(page, pageSize, Sort.by(\"timeStamp\").descending()));\n+    }\n+    \n+    @Override\n+    public List<Transaction> getByAccountAndDateFrom(Account account,\n+                                                     LocalDate dateFrom,\n+                                                     int page, int pageSize) {\n+        return transactionRepository.findAllByAccountAndDateFrom(account, dateFrom,\n+                PageRequest.of(page, pageSize, Sort.by(\"timeStamp\").descending()));\n+    }\n+    \n+    @Override\n+    public List<Transaction> getByAccountAndBetweenDates(Account account,\n+                                                        LocalDate dateFrom,\n+                                                        LocalDate dateTo,\n+                                                        int page, int pageSize) {\n+        return transactionRepository.findAllByAccountAndBetweenDates(account, dateFrom,\n+                dateTo, PageRequest.of(page, pageSize, Sort.by(\"timeStamp\").descending()));\n+    }\n+    \n+    @Override\n+    public Transaction rollbackTransaction(Long id) {\n+        Optional<Transaction> toRollback = transactionRepository.findById(id);\n+        if (toRollback.isPresent()) {\n+            Transaction transaction = toRollback.get();\n+            Account rollbackToAccount = transaction.getFromAccount();\n+            Account rollbackFromAccount = transaction.getToAccount();\n+            transaction.setId(null);\n+            transaction.setToAccount(rollbackToAccount);\n+            transaction.setFromAccount(rollbackFromAccount);\n+            return transactionRepository.save(transaction);\n+        }\n+        throw new DataProcessingException(String.format(\"Transaction with id=%d wasn't found\", id));\n+    }\n+    \n+    @Override\n+    public void remove(Long id) {\n+        transactionRepository.deleteById(id);\n+    }\n+}"
  },
  {
    "sha": "dbd24698071e22dd839ca3e34ac4ded6298c0b0a",
    "filename": "src/main/java/com/core/service/implementation/UserServiceImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Ketch92/BankService/blob/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/implementation/UserServiceImpl.java",
    "raw_url": "https://github.com/Ketch92/BankService/raw/a2f9aa072dd2863cb094a1ec63b4a461f5bb1764/src/main/java/com/core/service/implementation/UserServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Ketch92/BankService/contents/src/main/java/com/core/service/implementation/UserServiceImpl.java?ref=a2f9aa072dd2863cb094a1ec63b4a461f5bb1764",
    "patch": "@@ -19,7 +19,7 @@ public User saveOrUpdate(User user) {\n     \n     @Override\n     public User get(Long id) {\n-        return userRepository.getById(id).orElseThrow(() ->\n+        return userRepository.findById(id).orElseThrow(() ->\n                 new DataProcessingException(String.format(\"User with id=%d wasn't found.\", id)));\n     }\n     "
  }
]
