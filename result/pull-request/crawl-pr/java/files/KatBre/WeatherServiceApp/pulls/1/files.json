[
  {
    "sha": "143c9b287a1c90580c0ac876afbd39c9dd6697d8",
    "filename": "createLocation.html",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/createLocation.html",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/createLocation.html",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/createLocation.html?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,9 @@\n+POST http://localhost:8080/location\n+Content-Type: application/json\n+{\n+\"city\": \"Gdynia\",\n+\"region\": \"pomorskie\",\n+\"country\": \"Polska\",\n+\"latitude\": 54.50,\n+\"longitude\": 18.55\n+}"
  },
  {
    "sha": "051e873af3f95633bb80c05c323a7b7b80808a12",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/pom.xml",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/pom.xml",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/pom.xml?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -47,6 +47,11 @@\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.4</version>\n+        </dependency>\n     </dependencies>\n \n     <build>"
  },
  {
    "sha": "f32ad83b6bef8f7b8f520fae6286b587119ab3d0",
    "filename": "src/main/java/kb/weather/WeatherServiceApplication.java",
    "status": "renamed",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/WeatherServiceApplication.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/WeatherServiceApplication.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/WeatherServiceApplication.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -1,13 +1,12 @@\n-package kn.demo;\n+package kb.weather;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n \n @SpringBootApplication\n-public class DemoApplication {\n+public class WeatherServiceApplication {\n \n     public static void main(String[] args) {\n-        SpringApplication.run(DemoApplication.class, args);\n+        SpringApplication.run(WeatherServiceApplication.class, args);\n     }\n-\n }",
    "previous_filename": "src/main/java/kn/demo/DemoApplication.java"
  },
  {
    "sha": "aa731c437c96624e6d46832f312d7ab7cb121423",
    "filename": "src/main/java/kb/weather/exceptions/EmptyInputException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/exceptions/EmptyInputException.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/exceptions/EmptyInputException.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/exceptions/EmptyInputException.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,7 @@\n+package kb.weather.exceptions;\n+\n+public class EmptyInputException extends RuntimeException {\n+    public EmptyInputException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "a51f37dfd42ce9fee813f0d82c20be61f42a4765",
    "filename": "src/main/java/kb/weather/exceptions/ExceptionHandlerController.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/exceptions/ExceptionHandlerController.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/exceptions/ExceptionHandlerController.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/exceptions/ExceptionHandlerController.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,24 @@\n+package kb.weather.exceptions;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+\n+@ControllerAdvice\n+@Slf4j\n+public class ExceptionHandlerController {\n+    @ExceptionHandler(EmptyInputException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public void handleEmptyInputException(EmptyInputException e) {\n+        log.warn(e.getMessage());\n+    }\n+\n+    @ExceptionHandler(ValueOutOfRangeException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public void valueOutOfRangeException(ValueOutOfRangeException e) {\n+        log.warn(e.getMessage());\n+    }\n+}"
  },
  {
    "sha": "7b0668ed1bd8928c5ddb19fed70cc90693989eb0",
    "filename": "src/main/java/kb/weather/exceptions/ValueOutOfRangeException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/exceptions/ValueOutOfRangeException.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/exceptions/ValueOutOfRangeException.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/exceptions/ValueOutOfRangeException.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,7 @@\n+package kb.weather.exceptions;\n+\n+public class ValueOutOfRangeException extends RuntimeException {\n+    public ValueOutOfRangeException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "a8a5abfb5cd675bb683a83c41258887e9e9d3576",
    "filename": "src/main/java/kb/weather/location/CreateLocationRequest.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/CreateLocationRequest.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/CreateLocationRequest.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/location/CreateLocationRequest.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,16 @@\n+package kb.weather.location;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+public class CreateLocationRequest {\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}"
  },
  {
    "sha": "cfe3cfcf4010ecd64ee99b1ce770452597b6673f",
    "filename": "src/main/java/kb/weather/location/Location.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/Location.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/Location.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/location/Location.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,29 @@\n+package kb.weather.location;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.GenericGenerator;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Builder\n+public class Location {\n+\n+    @Id\n+    @GeneratedValue(generator = \"uuid\")\n+    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n+    private String id;\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}"
  },
  {
    "sha": "150ebaaf4adb532df388e03cfc30391ad7fafcfb",
    "filename": "src/main/java/kb/weather/location/LocationController.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/LocationController.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/LocationController.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/location/LocationController.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,29 @@\n+package kb.weather.location;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequiredArgsConstructor\n+public class LocationController {\n+\n+    private final LocationService locationService;\n+    private final LocationMapper locationMapper;\n+\n+    @PostMapping(\"/location\")\n+    ResponseEntity<NewLocationResponse> postLocation(@RequestBody CreateLocationRequest request) {\n+        Location location = locationService.createLocation(\n+                request.getCity(),\n+                request.getRegion(),\n+                request.getCountry(),\n+                request.getLatitude(),\n+                request.getLongitude());\n+\n+        return ResponseEntity.status(HttpStatus.CREATED)\n+                .body(locationMapper.mapLocationToNewLocationResponse(location));\n+    }\n+}"
  },
  {
    "sha": "5b5390c3e9f822f06a752eff1f98ffdb09b0f6a2",
    "filename": "src/main/java/kb/weather/location/LocationMapper.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/LocationMapper.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/LocationMapper.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/location/LocationMapper.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,17 @@\n+package kb.weather.location;\n+\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class LocationMapper {\n+    NewLocationResponse mapLocationToNewLocationResponse(Location location) {\n+        return NewLocationResponse.builder()\n+                .id(location.getId())\n+                .city(location.getCity())\n+                .region(location.getRegion())\n+                .country(location.getCountry())\n+                .latitude(location.getLatitude())\n+                .longitude(location.getLongitude())\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "09b527708435d7ba59d19bd7a9c791d266cbdf98",
    "filename": "src/main/java/kb/weather/location/LocationRepository.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/LocationRepository.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/LocationRepository.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/location/LocationRepository.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,7 @@\n+package kb.weather.location;\n+\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+public interface LocationRepository extends JpaRepository<Location, Long> {\n+}"
  },
  {
    "sha": "55d94f84d0783ac46270370e4a0fd0dc9dd4418b",
    "filename": "src/main/java/kb/weather/location/LocationService.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/LocationService.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/LocationService.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/location/LocationService.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,44 @@\n+package kb.weather.location;\n+\n+import kb.weather.exceptions.EmptyInputException;\n+import kb.weather.exceptions.ValueOutOfRangeException;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class LocationService {\n+    private final Double NORTH_LIMIT = 90.0;\n+    private final Double SOUTH_LIMIT = -90.0;\n+    private final Double EAST_LIMIT = 180.0;\n+    private final Double WEST_LIMIT = -180.0;\n+\n+    private final LocationRepository locationRepository;\n+\n+    Location createLocation(String city, String region, String country, Double latitude, Double longitude) {\n+        if (StringUtils.isBlank(city)) {\n+            throw new EmptyInputException(\"Empty city not accepted\");\n+        }\n+        if (StringUtils.isBlank(country)) {\n+            throw new EmptyInputException(\"Empty country not accepted\");\n+        }\n+        if (latitude < SOUTH_LIMIT || latitude > NORTH_LIMIT) {\n+            throw new ValueOutOfRangeException(\"Latitude out of range. Accepted value within the range -90 to 90.\");\n+        }\n+        if (longitude < WEST_LIMIT || longitude > EAST_LIMIT) {\n+            throw new ValueOutOfRangeException(\"Longitude out of range. Accepted value within the range -180 to 180.\");\n+        }\n+\n+        Location location = new Location();\n+        location.setCity(city);\n+        Optional.ofNullable(region).filter(Predicate.not(String::isBlank)).ifPresent(location::setRegion);\n+        location.setCountry(country);\n+        location.setLatitude(latitude);\n+        location.setLongitude(longitude);\n+        return locationRepository.save(location);\n+    }\n+}"
  },
  {
    "sha": "124dfb1da018237935d154c7bb843f2d436edd96",
    "filename": "src/main/java/kb/weather/location/NewLocationResponse.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/NewLocationResponse.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/java/kb/weather/location/NewLocationResponse.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/java/kb/weather/location/NewLocationResponse.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,17 @@\n+package kb.weather.location;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+@Builder\n+public class NewLocationResponse {\n+    private String id;\n+    private String city;\n+    private String region;\n+    private String country;\n+    private Double latitude;\n+    private Double longitude;\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ab26342574edadd85488455ec459d73606cd2c29",
    "filename": "src/main/resources/application.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/main/resources/application.properties",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/main/resources/application.properties",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/main/resources/application.properties?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -1 +1,4 @@\n-\n+spring.datasource.url=jdbc:mysql://localhost:3306/weather_service?serverTimezone=Europe/Warsaw\n+spring.datasource.username=root\n+spring.datasource.password=root\n+spring.jpa.hibernate.ddl-auto=update"
  },
  {
    "sha": "f9fbd868336f2aca8dc3d5bf27990ddbbcfaa5f1",
    "filename": "src/test/java/kb/weather/WeatherServiceApplicationTests.java",
    "status": "renamed",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/test/java/kb/weather/WeatherServiceApplicationTests.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/test/java/kb/weather/WeatherServiceApplicationTests.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/test/java/kb/weather/WeatherServiceApplicationTests.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -1,13 +1,12 @@\n-package kn.demo;\n+package kb.weather;\n \n import org.junit.jupiter.api.Test;\n import org.springframework.boot.test.context.SpringBootTest;\n \n @SpringBootTest\n-class DemoApplicationTests {\n+class WeatherServiceApplicationTests {\n \n     @Test\n     void contextLoads() {\n     }\n-\n }",
    "previous_filename": "src/test/java/kn/demo/DemoApplicationTests.java"
  },
  {
    "sha": "771d9f5372c55ea8eddfd7996356ab2101e4a020",
    "filename": "src/test/java/kb/weather/location/LocationServiceTests.java",
    "status": "added",
    "additions": 174,
    "deletions": 0,
    "changes": 174,
    "blob_url": "https://github.com/KatBre/WeatherServiceApp/blob/ea14db60472df0f66559a8cd958025174fe770e5/src/test/java/kb/weather/location/LocationServiceTests.java",
    "raw_url": "https://github.com/KatBre/WeatherServiceApp/raw/ea14db60472df0f66559a8cd958025174fe770e5/src/test/java/kb/weather/location/LocationServiceTests.java",
    "contents_url": "https://api.github.com/repos/KatBre/WeatherServiceApp/contents/src/test/java/kb/weather/location/LocationServiceTests.java?ref=ea14db60472df0f66559a8cd958025174fe770e5",
    "patch": "@@ -0,0 +1,174 @@\n+package kb.weather.location;\n+\n+import kb.weather.exceptions.EmptyInputException;\n+import kb.weather.exceptions.ValueOutOfRangeException;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class LocationServiceTests {\n+    @Mock\n+    LocationRepository locationRepository;\n+    @InjectMocks\n+    LocationService locationService;\n+\n+    @Test\n+    void createLocation_createsNewLocation() {\n+        //given\n+        Location testLocation = Location.builder()\n+                .city(\"Gdynia\")\n+                .region(\"pomeranian\")\n+                .country(\"Poland\")\n+                .latitude(54.5)\n+                .longitude(18.5)\n+                .build();\n+        when(locationRepository.save(any())).thenReturn(testLocation);\n+\n+        //when\n+        Location location = locationService.createLocation(\"Gdynia\", \"pomeranian\", \"Poland\", 54.5, 18.5);\n+\n+        //then\n+        assertThat(location.getCity()).isEqualTo(\"Gdynia\");\n+        assertThat(location.getRegion()).isEqualTo(\"pomeranian\");\n+        assertThat(location.getCountry()).isEqualTo(\"Poland\");\n+        assertThat(location.getLatitude()).isEqualTo(54.5);\n+        assertThat(location.getLongitude()).isEqualTo(18.5);\n+        verify(locationRepository).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCityIsEmpty_throwsEmptyInputException() {\n+        //when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"\", \"pomeranian\", \"Poland\", 54.5, 18.5));\n+\n+        //then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCityIsNull_throwsEmptyInputException() {\n+        //when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(null, \"pomeranian\", \"Poland\", 54.5, 18.5));\n+\n+        //then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCountryIsEmpty_throwsEmptyInputException() {\n+        //when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"Gdynia\", \"pomeranian\", \"\", 54.5, 18.5));\n+\n+        //then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenCountryIsNull_throwsEmptyInputException() {\n+        //when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"Gdynia\", \"pomeranian\", null, 54.5, 18.5));\n+\n+        //then\n+        assertThat(exception).isInstanceOf(EmptyInputException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLatitudeIsHigherThenLimit_throwsValueOutOfRangeException() {\n+        //when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"Gdynia\", \"pomeranian\", \"Poland\", 100.5, 18.5));\n+\n+        //then\n+        assertThat(exception).isInstanceOf(ValueOutOfRangeException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLatitudeIsLowerThenLimit_throwsValueOutOfRangeException() {\n+        //when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"Gdynia\", \"pomeranian\", \"Poland\", -100.5, 18.5));\n+\n+        //then\n+        assertThat(exception).isInstanceOf(ValueOutOfRangeException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLongitudeIsHigherThenLimit_throwsValueOutOfRangeException() {\n+        //when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"Gdynia\", \"pomeranian\", \"Poland\", 54.5, 200.5));\n+\n+        //then\n+        assertThat(exception).isInstanceOf(ValueOutOfRangeException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenLongitudeIsLowerThenLimit_throwsValueOutOfRangeException() {\n+        //when\n+        Throwable exception = catchThrowable(() -> locationService.createLocation(\"Gdynia\", \"pomeranian\", \"Poland\", 54.5, -200.5));\n+\n+        //then\n+        assertThat(exception).isInstanceOf(ValueOutOfRangeException.class);\n+        verify(locationRepository, times(0)).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenRegionIsEmpty_createNewLocationWithEmptyRegion() {\n+        Location testLocation = Location.builder()\n+                .city(\"Gdynia\")\n+                .region(\" \")\n+                .country(\"Poland\")\n+                .latitude(54.5)\n+                .longitude(18.5)\n+                .build();\n+        when(locationRepository.save(any())).thenReturn(testLocation);\n+\n+        //when\n+        Location location = locationService.createLocation(\"Gdynia\", \" \", \"Poland\", 54.5, 18.5);\n+\n+        //then\n+        assertThat(location.getCity()).isEqualTo(\"Gdynia\");\n+        assertThat(location.getRegion()).isEqualTo(\" \");\n+        assertThat(location.getCountry()).isEqualTo(\"Poland\");\n+        assertThat(location.getLatitude()).isEqualTo(54.5);\n+        assertThat(location.getLongitude()).isEqualTo(18.5);\n+        verify(locationRepository).save(any());\n+    }\n+\n+    @Test\n+    void createLocation_whenRegionIsNull_createNewLocationWithNullRegion() {\n+        Location testLocation = Location.builder()\n+                .city(\"Gdynia\")\n+                .region(null)\n+                .country(\"Poland\")\n+                .latitude(54.5)\n+                .longitude(18.5)\n+                .build();\n+        when(locationRepository.save(any())).thenReturn(testLocation);\n+\n+        //when\n+        Location location = locationService.createLocation(\"Gdynia\", null, \"Poland\", 54.5, 18.5);\n+\n+        //then\n+        assertThat(location.getCity()).isEqualTo(\"Gdynia\");\n+        assertThat(location.getRegion()).isEqualTo(null);\n+        assertThat(location.getCountry()).isEqualTo(\"Poland\");\n+        assertThat(location.getLatitude()).isEqualTo(54.5);\n+        assertThat(location.getLongitude()).isEqualTo(18.5);\n+        verify(locationRepository).save(any());\n+    }\n+\n+}"
  }
]
