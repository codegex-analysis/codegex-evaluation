[
  {
    "sha": "8adc824908b4dbea2ff2df4353e30f0510c058cd",
    "filename": "README.md",
    "status": "modified",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/README.md",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/README.md",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/README.md?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -45,6 +45,7 @@ Micronaut + Camunda = :heart:\n   * [Transaction Management](#transaction-management)\n   * [Process Tests](#process-tests)\n   * [Docker](#docker)\n+  * [Camunda Metrics](#camunda-metrics) \n   * [Pitfalls](#pitfalls)\n * [Releases](#releases)\n * [Contact](#contact)\n@@ -636,6 +637,61 @@ Run the Docker image:\n \n `docker run -p 8080:8080 <IMAGE>`\n \n+## Camunda Metrics\n+\n+To export Camunda Metrics via micronaut-micrometer you need to add the dependency and enable it __explicitly__ in your `application.yml`.\n+\n+We currently support all Camunda Build-In Metrics. See [Process Engine / Metrics](https://docs.camunda.org/manual/latest/user-guide/process-engine/metrics/)\n+\n+<details>\n+<summary>Click to show Gradle dependencies</summary>\n+\n+```groovy\n+implementation(\"io.micronaut.micrometer:micronaut-micrometer-core\")\n+\n+// optional enable http endpoint for metrics\n+implementation(\"io.micronaut:micronaut-management\")\n+```\n+</details>\n+\n+<details>\n+<summary>Click to show Maven dependencies</summary>\n+\n+```xml\n+<dependency>\n+  <groupId>io.micronaut.micrometer</groupId>\n+  <artifactId>micronaut-micrometer-core</artifactId>\n+</dependency>\n+\n+<!-- optional enable http endpoint for metrics -->\n+<dependency>\n+  <groupId>io.micronaut</groupId>\n+  <artifactId>micronaut-management</artifactId>\n+</dependency>\n+```\n+</details>\n+\n+<details>\n+<summary>Click to show configuration</summary>\n+\n+```yaml\n+micronaut:\n+  metrics:\n+    binders:\n+      camunda:\n+        bpmnExecution:\n+          enabled: true\n+        dmnExecution:\n+          enabled: true\n+        jobExecutor:\n+          enabled: true\n+        historyCleanUp:\n+          enabled: true\n+```\n+</details>\n+\n+One note about performance: Take into consideration the execution times of your metric collectors. Each metric collector is run as a standalone timer thread execution, but the more collectors you add, and the large the data processing and/or database query time/load the collector uses per execution, it can create large performance impacts on the engine.\n+\n ## Pitfalls\n \n ### No version information in Fat/Uber/Shadow JAR"
  },
  {
    "sha": "d1cf733db78392e7ad0b76e4bc1156f40546736c",
    "filename": "micronaut-camunda-bpm-example/README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/README.md",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/README.md",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/README.md?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -59,3 +59,5 @@ the data source's URL:\n `datasources.default.url: jdbc:h2:file:~/micronautdb;DB_CLOSE_ON_EXIT=FALSE`\n \n To reset the database simply delete the `micronautdb*` files in your home directory.\n+\n+## Monitoring\n\\ No newline at end of file"
  },
  {
    "sha": "adff9587e93af0edc93fb22de96cb633b4cab8aa",
    "filename": "micronaut-camunda-bpm-example/build.gradle",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/build.gradle",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/build.gradle",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/build.gradle?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -15,6 +15,18 @@ micronaut {\n \n dependencies {\n     implementation(project(\":micronaut-camunda-bpm-feature\"))\n+\n+    // imported to enable http endpoint for metrics\n+    implementation(\"io.micronaut:micronaut-management\")\n+\n+\n+    // imported to activate metrics\n+    // comes also with micronaut-micrometer-registry-prometheus, it's here just to make the example more verbose\n+    implementation(\"io.micronaut.micrometer:micronaut-micrometer-core\")\n+\n+    // just added to export metrics to prometheus, start it via docker-compose\n+    implementation(\"io.micronaut.micrometer:micronaut-micrometer-registry-prometheus\")\n+\n     runtimeOnly(\"com.h2database:h2\")\n     runtimeOnly(\"ch.qos.logback:logback-classic\")\n "
  },
  {
    "sha": "a06659e8735a179edbc712fa71b2a9c7aa367506",
    "filename": "micronaut-camunda-bpm-example/docker-compose.yml",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/docker-compose.yml",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/docker-compose.yml?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,23 @@\n+version: '3.8'\n+services:\n+\n+  prometheus:\n+    image: prom/prometheus:latest\n+    volumes:\n+      - ./src/test/resources/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n+    ports:\n+      - '9090:9090'\n+    network_mode: host\n+\n+  grafana:\n+    image: grafana/grafana:latest\n+    environment:\n+      - GF_SECURITY_ADMIN_PASSWORD=admin\n+    depends_on:\n+      - prometheus\n+    ports:\n+      - \"3000:3000\"\n+    network_mode: host\n+    user: $UID:$GID\n+    volumes:\n+      - ./src/test/resources/grafana/:/etc/grafana/provisioning/\n\\ No newline at end of file"
  },
  {
    "sha": "500a0ea3529381f7e2e013561f67180ead2d90db",
    "filename": "micronaut-camunda-bpm-example/src/main/resources/application.yml",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/main/resources/application.yml",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/src/main/resources/application.yml?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -1,6 +1,28 @@\n micronaut:\n   application:\n     name: micronaut-camunda-example\n+  metrics:\n+    export:\n+      logging:\n+        step: PT1M\n+        enabled: true\n+      prometheus:\n+        enabled: true\n+        step: PT1M\n+        descriptions: true\n+    binders:\n+      camunda:\n+        bpmnExecution:\n+          enabled: true\n+        dmnExecution:\n+          enabled: true\n+        jobExecutor:\n+          enabled: true\n+        historyCleanUp:\n+          enabled: true\n+endpoints:\n+  prometheus:\n+    sensitive: false\n camunda:\n   admin-user:\n     id: admin"
  },
  {
    "sha": "3302cd8fdaf3e49e56ab4b309503874af0fb4b91",
    "filename": "micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/JVM_Micrometer.json",
    "status": "added",
    "additions": 4722,
    "deletions": 0,
    "changes": 4722,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/JVM_Micrometer.json",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/JVM_Micrometer.json",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/JVM_Micrometer.json?ref=05c22af465627177b1b022b2b04c6c67ff8cb549"
  },
  {
    "sha": "15cf09cfb95cf2b00dba5b76cdc3598eba000210",
    "filename": "micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/camunda-metrics-alex.json",
    "status": "added",
    "additions": 190,
    "deletions": 0,
    "changes": 190,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/camunda-metrics-alex.json",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/camunda-metrics-alex.json",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/camunda-metrics-alex.json?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,190 @@\n+{\n+  \"annotations\": {\n+    \"list\": [\n+      {\n+        \"builtIn\": 1,\n+        \"datasource\": \"-- Grafana --\",\n+        \"enable\": true,\n+        \"hide\": true,\n+        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n+        \"name\": \"Annotations & Alerts\",\n+        \"type\": \"dashboard\"\n+      }\n+    ]\n+  },\n+  \"editable\": true,\n+  \"gnetId\": null,\n+  \"graphTooltip\": 0,\n+  \"id\": 6,\n+  \"links\": [],\n+  \"panels\": [\n+    {\n+      \"datasource\": \"DS_PROMETHEUS\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"color\": {\n+            \"mode\": \"thresholds\"\n+          },\n+          \"custom\": {},\n+          \"mappings\": [],\n+          \"thresholds\": {\n+            \"mode\": \"absolute\",\n+            \"steps\": [\n+              {\n+                \"color\": \"green\",\n+                \"value\": null\n+              },\n+              {\n+                \"color\": \"red\",\n+                \"value\": 80\n+              }\n+            ]\n+          }\n+        },\n+        \"overrides\": []\n+      },\n+      \"gridPos\": {\n+        \"h\": 9,\n+        \"w\": 12,\n+        \"x\": 0,\n+        \"y\": 0\n+      },\n+      \"id\": 2,\n+      \"interval\": \"1m\",\n+      \"options\": {\n+        \"colorMode\": \"value\",\n+        \"graphMode\": \"area\",\n+        \"justifyMode\": \"auto\",\n+        \"orientation\": \"auto\",\n+        \"reduceOptions\": {\n+          \"calcs\": [\n+            \"lastNotNull\"\n+          ],\n+          \"fields\": \"\",\n+          \"values\": false\n+        },\n+        \"text\": {},\n+        \"textMode\": \"auto\"\n+      },\n+      \"pluginVersion\": \"7.4.3\",\n+      \"targets\": [\n+        {\n+          \"expr\": \"camunda_bpmn_root_process_instance_start\",\n+          \"instant\": false,\n+          \"interval\": \"1m\",\n+          \"legendFormat\": \"\",\n+          \"refId\": \"A\"\n+        }\n+      ],\n+      \"timeFrom\": null,\n+      \"timeShift\": null,\n+      \"title\": \"Root Process Instance Start\",\n+      \"type\": \"stat\"\n+    },\n+    {\n+      \"datasource\": \"DS_PROMETHEUS\",\n+      \"fieldConfig\": {\n+        \"defaults\": {\n+          \"color\": {\n+            \"mode\": \"palette-classic\"\n+          },\n+          \"custom\": {\n+            \"axisLabel\": \"\",\n+            \"axisPlacement\": \"auto\",\n+            \"barAlignment\": 0,\n+            \"drawStyle\": \"line\",\n+            \"fillOpacity\": 0,\n+            \"gradientMode\": \"none\",\n+            \"hideFrom\": {\n+              \"graph\": false,\n+              \"legend\": false,\n+              \"tooltip\": false\n+            },\n+            \"lineInterpolation\": \"linear\",\n+            \"lineWidth\": 1,\n+            \"pointSize\": 6,\n+            \"scaleDistribution\": {\n+              \"type\": \"linear\"\n+            },\n+            \"showPoints\": \"always\",\n+            \"spanNulls\": true\n+          },\n+          \"mappings\": [],\n+          \"thresholds\": {\n+            \"mode\": \"absolute\",\n+            \"steps\": [\n+              {\n+                \"color\": \"green\",\n+                \"value\": null\n+              },\n+              {\n+                \"color\": \"red\",\n+                \"value\": 80\n+              }\n+            ]\n+          },\n+          \"unit\": \"short\"\n+        },\n+        \"overrides\": []\n+      },\n+      \"gridPos\": {\n+        \"h\": 8,\n+        \"w\": 12,\n+        \"x\": 12,\n+        \"y\": 0\n+      },\n+      \"id\": 4,\n+      \"interval\": \"1m\",\n+      \"options\": {\n+        \"graph\": {},\n+        \"legend\": {\n+          \"calcs\": [],\n+          \"displayMode\": \"list\",\n+          \"placement\": \"bottom\"\n+        },\n+        \"tooltipOptions\": {\n+          \"mode\": \"single\"\n+        }\n+      },\n+      \"pluginVersion\": \"7.4.3\",\n+      \"targets\": [\n+        {\n+          \"exemplar\": false,\n+          \"expr\": \"camunda_bpmn_activity_instance_start\",\n+          \"interval\": \"1m\",\n+          \"legendFormat\": \"\",\n+          \"refId\": \"A\"\n+        },\n+        {\n+          \"exemplar\": false,\n+          \"expr\": \"camunda_bpmn_activity_instance_end\",\n+          \"format\": \"time_series\",\n+          \"hide\": false,\n+          \"instant\": false,\n+          \"interval\": \"1m\",\n+          \"legendFormat\": \"\",\n+          \"refId\": \"B\"\n+        }\n+      ],\n+      \"timeFrom\": null,\n+      \"timeShift\": null,\n+      \"title\": \"activity instances start & end\",\n+      \"type\": \"timeseries\"\n+    }\n+  ],\n+  \"schemaVersion\": 27,\n+  \"style\": \"dark\",\n+  \"tags\": [],\n+  \"templating\": {\n+    \"list\": []\n+  },\n+  \"time\": {\n+    \"from\": \"now-5m\",\n+    \"to\": \"now\"\n+  },\n+  \"timepicker\": {},\n+  \"timezone\": \"\",\n+  \"title\": \"Camunda Metrics\",\n+  \"uid\": \"Z7E84ZwMz\",\n+  \"version\": 3\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0e4e892039cf27e6155abb83612f46772b408d8c",
    "filename": "micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/camunda-metrics-stephen.json",
    "status": "added",
    "additions": 6227,
    "deletions": 0,
    "changes": 6227,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/camunda-metrics-stephen.json",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/camunda-metrics-stephen.json",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/camunda-metrics-stephen.json?ref=05c22af465627177b1b022b2b04c6c67ff8cb549"
  },
  {
    "sha": "9f7232c9efce84e79ba4cbc1e8b8dd02beeed756",
    "filename": "micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/dashboard.yml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/dashboard.yml",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/dashboard.yml",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/src/test/resources/grafana/dashboards/dashboard.yml?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,11 @@\n+apiVersion: 1\n+\n+providers:\n+  - name: 'Prometheus'\n+    orgId: 1\n+    folder: ''\n+    type: file\n+    disableDeletion: false\n+    editable: true\n+    options:\n+      path: /etc/grafana/provisioning/dashboards\n\\ No newline at end of file"
  },
  {
    "sha": "6e6c10fb4df77c3327f0ac4a2742552492900ff0",
    "filename": "micronaut-camunda-bpm-example/src/test/resources/grafana/datasources/datasource.yml",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/datasources/datasource.yml",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/grafana/datasources/datasource.yml",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/src/test/resources/grafana/datasources/datasource.yml?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,40 @@\n+# config file version\n+apiVersion: 1\n+\n+# list of datasources that should be deleted from the database\n+deleteDatasources:\n+  - name: DS_PROMETHEUS\n+    orgId: 1\n+\n+# list of datasources to insert/update depending\n+# whats available in the database\n+datasources:\n+  # <string, required> name of the datasource. Required\n+  - name: DS_PROMETHEUS\n+    # <string, required> datasource type. Required\n+    type: prometheus\n+    # <string, required> access mode. direct or proxy. Required\n+    access: direct\n+    # <int> org id. will default to orgId 1 if not specified\n+    orgId: 1\n+    # <string> url\n+    url: http://localhost:9090\n+    # <string> database password, if used\n+    password:\n+    # <string> database user, if used\n+    user:\n+    # <string> database name, if used\n+    database:\n+    # <bool> enable/disable basic auth\n+    basicAuth: false\n+    # <string> basic auth username, if used\n+    basicAuthUser:\n+    # <string> basic auth password, if used\n+    basicAuthPassword:\n+    # <bool> enable/disable with credentials headers\n+    withCredentials:\n+    # <bool> mark as default datasource. Max one per org\n+    isDefault: true\n+    version: 1\n+    # <bool> allow users to edit datasources from the UI.\n+    editable: true"
  },
  {
    "sha": "2996b6c83277c7ef2a9dfe4a7a61b470512dbb5e",
    "filename": "micronaut-camunda-bpm-example/src/test/resources/prometheus/prometheus.yml",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/prometheus/prometheus.yml",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-example/src/test/resources/prometheus/prometheus.yml",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-example/src/test/resources/prometheus/prometheus.yml?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,19 @@\n+# prometheus.yml\n+global:\n+  scrape_interval: 15s\n+  external_labels:\n+    monitor: 'my-monitor'\n+scrape_configs:\n+  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n+  - job_name: 'prometheus'\n+\n+    # metrics_path defaults to '/metrics'\n+    # scheme defaults to 'http'.\n+\n+    static_configs:\n+      - targets: ['127.0.0.1:9090']\n+\n+  - job_name: 'micronaut-camunda-bpm-example'\n+    metrics_path: '/prometheus'\n+    static_configs:\n+      - targets: ['localhost:8080']\n\\ No newline at end of file"
  },
  {
    "sha": "5234d52533d695e1730a016c6a4f9b3f2553e045",
    "filename": "micronaut-camunda-bpm-feature/build.gradle",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/build.gradle",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/build.gradle",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/build.gradle?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -24,6 +24,7 @@ dependencies {\n     implementation(\"io.micronaut:micronaut-runtime\")\n     api(\"org.camunda.bpm:camunda-engine:$camundaVersion\")\n \n+    compileOnly(\"io.micronaut.micrometer:micronaut-micrometer-core\")\n     compileOnly(\"io.micronaut.servlet:micronaut-servlet-engine\")\n     compileOnly(\"io.micronaut:micronaut-http-server-netty\")\n     compileOnly(\"io.micronaut.servlet:micronaut-http-server-jetty\")\n@@ -56,11 +57,14 @@ dependencies {\n \n     // Test\n     testImplementation(\"org.junit.jupiter:junit-jupiter-params\")\n+    testImplementation(\"org.camunda.bpm.assert:camunda-bpm-assert:8.0.0\")\n     testImplementation(\"org.mockito:mockito-core:3.8.0\")\n     testImplementation(\"ch.qos.logback:logback-classic\")\n+    testImplementation(\"io.micronaut.micrometer:micronaut-micrometer-core\") // imported to test availability of bean MeterRegistry\n     testRuntimeOnly(\"com.h2database:h2\")\n     testRuntimeOnly(\"io.micronaut:micronaut-http-server-netty\")\n     testRuntimeOnly(\"org.codehaus.groovy:groovy-all:3.0.7\") // as script engine\n+    testRuntimeOnly(\"io.micronaut:micronaut-management\") // imported to enable metrics\n }\n \n java {"
  },
  {
    "sha": "445a265322c9fb254b82fee2c71f1040bae63052",
    "filename": "micronaut-camunda-bpm-feature/metrics-test/README.md",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/README.md",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/README.md",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/metrics-test/README.md?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,3 @@\n+# Metrics tests with micrometer\n+\n+Additional tests for metrics\n\\ No newline at end of file"
  },
  {
    "sha": "84f1d44b2d338cd8de5945147425c87c5d7b1ed3",
    "filename": "micronaut-camunda-bpm-feature/metrics-test/build.gradle",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/build.gradle",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/build.gradle",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/metrics-test/build.gradle?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,61 @@\n+plugins {\n+    id(\"io.micronaut.application\")\n+    id(\"org.jetbrains.kotlin.jvm\")\n+    id(\"org.jetbrains.kotlin.kapt\")\n+    id(\"org.jetbrains.kotlin.plugin.allopen\")\n+}\n+\n+micronaut {\n+    runtime(\"jetty\")\n+    testRuntime(\"junit5\")\n+    processing {\n+        incremental(true)\n+        annotations(\"micronaut.camunda.bpm.feature.metrics.test.*\")\n+    }\n+}\n+\n+dependencies {\n+    testImplementation(project(\":micronaut-camunda-bpm-feature\"))\n+    testRuntimeOnly(\"com.h2database:h2\")\n+    testRuntimeOnly(\"ch.qos.logback:logback-classic\")\n+\n+    kaptTest(platform(\"io.micronaut:micronaut-bom:$micronautVersion\"))\n+    kaptTest(\"io.micronaut.data:micronaut-data-processor\")\n+    kaptTest(\"io.micronaut:micronaut-inject-java:$micronautVersion\")\n+\n+    testCompileOnly(\"io.micronaut.servlet:micronaut-http-server-jetty\")\n+    testImplementation(\"org.assertj:assertj-core:3.19.0\")\n+    testImplementation(\"net.javacrumbs.json-unit:json-unit-assertj:2.25.0\")\n+    testImplementation(\"org.junit.jupiter:junit-jupiter-params\")\n+\n+\n+    testImplementation(\"io.micronaut:micronaut-http-client\")\n+    testImplementation(\"org.eclipse.jetty:jetty-server:$jettyVersion\")\n+    testImplementation(\"org.eclipse.jetty:jetty-servlet:$jettyVersion\")\n+\n+    // imported to enable metrics\n+    testImplementation(\"io.micronaut:micronaut-management\")\n+\n+    // imported to enable metrics\n+    // comes also with micronaut-micrometer-registry-prometheus, it's here just to make the example more verbose\n+    testImplementation(\"io.micronaut.micrometer:micronaut-micrometer-core\")\n+\n+    // just added to export metrics to prometheus\n+    testImplementation(\"io.micronaut.micrometer:micronaut-micrometer-registry-prometheus\")\n+}\n+\n+application {\n+    mainClass.set(\"info.novatec.micronaut.camunda.bpm.feature.metrics.test.Application\")\n+}\n+\n+java {\n+    sourceCompatibility = JavaVersion.toVersion(\"1.8\")\n+}\n+\n+tasks {\n+    compileTestKotlin {\n+        kotlinOptions {\n+            jvmTarget = \"1.8\"\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5c6ff3e46cf5757b777c62b0dd0df1db3616c6bc",
    "filename": "micronaut-camunda-bpm-feature/metrics-test/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/Application.kt",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/Application.kt",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/Application.kt",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/metrics-test/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/Application.kt?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics.test\n+\n+import io.micronaut.runtime.Micronaut.*\n+\n+fun main(args: Array<String>) {\n+    build()\n+            .args(*args)\n+            .packages(\"info.novatec.micronaut.camunda.bpm.feature.metrics.test\")\n+            .start()\n+}"
  },
  {
    "sha": "6d88510da7795f2b441f8760141b3d6e38446f88",
    "filename": "micronaut-camunda-bpm-feature/metrics-test/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/CamundaMetricsTest.kt",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/CamundaMetricsTest.kt",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/CamundaMetricsTest.kt",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/metrics-test/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/CamundaMetricsTest.kt?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics.test\n+\n+import info.novatec.micronaut.camunda.bpm.feature.metrics.*\n+import io.micronaut.context.ApplicationContext\n+import io.micronaut.context.annotation.Requires\n+import io.micronaut.http.HttpRequest\n+import io.micronaut.http.HttpRequest.GET\n+import io.micronaut.http.client.RxHttpClient\n+import io.micronaut.http.client.annotation.Client\n+import io.micronaut.test.extensions.junit5.annotation.MicronautTest\n+import net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson\n+import org.assertj.core.api.Assertions.assertThat\n+import org.eclipse.jetty.server.Server\n+import org.junit.jupiter.api.Test\n+import org.junit.jupiter.params.ParameterizedTest\n+import org.junit.jupiter.params.provider.ValueSource\n+import javax.inject.Inject\n+\n+@MicronautTest\n+@Requires(beans = [Server::class])\n+internal class CamundaMetricsTest {\n+\n+    @Inject\n+    lateinit var applicationContext: ApplicationContext\n+\n+    @Inject\n+    @field:Client(\"/\")\n+    lateinit var client: RxHttpClient\n+\n+    @Test\n+    fun `all Camunda Metrics should be available, when enabled in application-yml`() {\n+        assertThat(applicationContext.findBean(BpmnExecutionMetrics::class.java)).isPresent\n+        assertThat(applicationContext.findBean(BpmnExecutionMetricsBinder::class.java)).isPresent\n+        assertThat(applicationContext.findBean(DmnExecutionMetrics::class.java)).isPresent\n+        assertThat(applicationContext.findBean(DmnExecutionMetricsBinder::class.java)).isPresent\n+        assertThat(applicationContext.findBean(HistoryCleanUpMetrics::class.java)).isPresent\n+        assertThat(applicationContext.findBean(HistoryCleanUpMetricsBinder::class.java)).isPresent\n+        assertThat(applicationContext.findBean(JobExecutorMetrics::class.java)).isPresent\n+        assertThat(applicationContext.findBean(JobExecutorMetricsBinder::class.java)).isPresent\n+    }\n+\n+    @Test\n+    fun `should return all camunda metric names, when prometheus endpoint is called`() {\n+        val request: HttpRequest<String> = GET(\"/prometheus\")\n+        val body = client.toBlocking().retrieve(request)\n+\n+        assertThat(body).contains(\n+                \"camunda_bpmn_activity_instance_end\",\n+                \"camunda_bpmn_activity_instance_start\",\n+                \"camunda_bpmn_root_process_instance_start\",\n+                \"camunda_dmn_executed_decision_elements\",\n+                \"camunda_dmn_executed_decision_instances\",\n+                \"camunda_history_cleanup_removed_batch_operations\",\n+                \"camunda_history_cleanup_removed_decision_instances\",\n+                \"camunda_history_cleanup_removed_process_instances\",\n+                \"camunda_job_acquired_failure\",\n+                \"camunda_job_acquired_success\",\n+                \"camunda_job_acquisition_attempt\",\n+                \"camunda_job_execution_rejected\",\n+                \"camunda_job_failed\",\n+                \"camunda_job_locked_exclusive\",\n+                \"camunda_job_successful\"\n+        )\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = [\n+        \"camunda.bpmn.activity.instance.end\",\n+        \"camunda.bpmn.activity.instance.start\",\n+        \"camunda.bpmn.root.process.instance.start\",\n+        \"camunda.dmn.executed.decision.elements\",\n+        \"camunda.dmn.executed.decision.instances\",\n+        \"camunda.history.cleanup.removed.batch.operations\",\n+        \"camunda.history.cleanup.removed.decision.instances\",\n+        \"camunda.history.cleanup.removed.process.instances\",\n+        \"camunda.job.acquired.failure\",\n+        \"camunda.job.acquired.success\",\n+        \"camunda.job.acquisition.attempt\",\n+        \"camunda.job.execution.rejected\",\n+        \"camunda.job.failed\",\n+        \"camunda.job.locked.exclusive\",\n+        \"camunda.job.successful\"\n+    ])\n+    fun `should return zero, when camunda metrics endpoint is called`(metricName: String) {\n+        val request: HttpRequest<String> = GET(\"/metrics/$metricName\")\n+        val body = client.toBlocking().retrieve(request)\n+\n+        assertThatJson(body).inPath(\"measurements[0].statistic\").isString.isEqualTo(\"VALUE\")\n+        assertThatJson(body).inPath(\"measurements[0].value\").isNumber.asString().isEqualTo(\"0.0\")\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b33d53f7c98b37c6279d4de1b2f06753ee5a0c86",
    "filename": "micronaut-camunda-bpm-feature/metrics-test/src/test/resources/application.yml",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/src/test/resources/application.yml",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/metrics-test/src/test/resources/application.yml",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/metrics-test/src/test/resources/application.yml?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,22 @@\n+micronaut:\n+  application:\n+    name: metrics-test\n+  metrics:\n+    export:\n+      prometheus:\n+        enabled: true\n+        step: PT1M\n+        descriptions: true\n+    binders:\n+      camunda:\n+        bpmnExecution:\n+          enabled: true\n+        dmnExecution:\n+          enabled: true\n+        jobExecutor:\n+          enabled: true\n+        historyCleanUp:\n+          enabled: true\n+endpoints:\n+  prometheus:\n+    sensitive: false"
  },
  {
    "sha": "50da538bf431946eb8fcc2d37713e21c274bdb6d",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/BpmnExecutionMetrics.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/BpmnExecutionMetrics.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/BpmnExecutionMetrics.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/BpmnExecutionMetrics.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micronaut.configuration.metrics.annotation.RequiresMetrics;\n+import io.micronaut.context.BeanProvider;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import org.camunda.bpm.engine.ManagementService;\n+import org.camunda.bpm.engine.management.Metrics;\n+\n+import javax.inject.Singleton;\n+\n+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_BINDERS;\n+\n+/**\n+ * Holder class to count bpmn execution metrics.\n+ * <p>\n+ * It is not possible to execute the following code directly in BpmnExectionMetricsBinder\n+ * <code>\n+ * Gauge.builder(\"MyMetricName\", providerManagementService.get().createMetricsQuery().name(Metrics.ROOT_PROCESS_INSTANCE_START), MetricsQuery::sum).register(...)\n+ * </code>\n+ * therefore we have this HolderClass.\n+ */\n+@Singleton\n+@RequiresMetrics\n+@Requires(property = MICRONAUT_METRICS_BINDERS + \".camunda.bpmnExecution.enabled\", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)\n+public class BpmnExecutionMetrics extends CamundaMetrics {\n+\n+    public BpmnExecutionMetrics(BeanProvider<ManagementService> providerManagementService) {\n+        super(providerManagementService);\n+    }\n+\n+    public long countRootProcessInstanceStart() {\n+        return sumMetric(Metrics.ROOT_PROCESS_INSTANCE_START);\n+    }\n+\n+    public long countActivityInstanceStart() {\n+        return sumMetric(Metrics.ACTIVTY_INSTANCE_START);\n+    }\n+\n+    public long countActivityInstanceEnd() {\n+        return sumMetric(Metrics.ACTIVTY_INSTANCE_END);\n+    }\n+\n+}"
  },
  {
    "sha": "df5de3ef3cca055f87934d8f77c930c1b499e850",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/BpmnExecutionMetricsBinder.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/BpmnExecutionMetricsBinder.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/BpmnExecutionMetricsBinder.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/BpmnExecutionMetricsBinder.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tags;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+import io.micrometer.core.lang.NonNull;\n+import io.micronaut.configuration.metrics.annotation.RequiresMetrics;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import org.camunda.bpm.engine.management.Metrics;\n+\n+import javax.inject.Singleton;\n+\n+import static info.novatec.micronaut.camunda.bpm.feature.metrics.CamundaMetricsBinderTags.BPMN_EXECUTION_DEFAULT_TAGS;\n+import static info.novatec.micronaut.camunda.bpm.feature.metrics.CamundaMetricsBinderTags.TAG_KEY_NAME;\n+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_BINDERS;\n+\n+/**\n+ * Provides Metrics about BPMN Execution.\n+ */\n+@Singleton\n+@RequiresMetrics\n+@Requires(property = MICRONAUT_METRICS_BINDERS + \".camunda.bpmnExecution.enabled\", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)\n+public class BpmnExecutionMetricsBinder implements MeterBinder {\n+\n+    protected final BpmnExecutionMetrics bpmnExecutionMetrics;\n+\n+    public BpmnExecutionMetricsBinder(BpmnExecutionMetrics bpmnExecutionMetrics) {\n+        this.bpmnExecutionMetrics = bpmnExecutionMetrics;\n+    }\n+\n+    @Override\n+    public void bindTo(@NonNull MeterRegistry registry) {\n+\n+        /*\n+          This Code\n+\n+          Gauge.builder(\"camunda.bpmn.\" + Metrics.ROOT_PROCESS_INSTANCE_START.replace('-', '.'),\n+                providerManagementService.get().createMetricsQuery().name(Metrics.ROOT_PROCESS_INSTANCE_START),\n+                MetricsQuery::sum\n+          ).description(\"The number of root process instance executions started. This is also known as Root Process Instances (RPI). A root process instance has no parent process instance, i.e. it is a top-level execution.\")\n+           .tags(Tags.concat(BPMN_EXECUTION_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.ROOT_PROCESS_INSTANCE_START))\n+           .register(registry);\n+\n+          is executed to early and the bean for providerManagementService is not instanciated\n+          so that we would run into a boot loop and then the application crashes.\n+\n+          To avoid this, we implemented some \"holder\" objects. In this case info.novatec.micronaut.camunda.bpm.feature.metrics.BpmnExecutionMetrics\n+        */\n+        Gauge.builder(\n+            createMetricName(Metrics.ROOT_PROCESS_INSTANCE_START),\n+            bpmnExecutionMetrics,\n+            BpmnExecutionMetrics::countRootProcessInstanceStart\n+        )\n+            .description(\"The number of root process instance executions started. This is also known as Root Process Instances (RPI). A root process instance has no parent process instance, i.e. it is a top-level execution.\")\n+            .tags(Tags.concat(BPMN_EXECUTION_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.ROOT_PROCESS_INSTANCE_START))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.ACTIVTY_INSTANCE_START),\n+            bpmnExecutionMetrics,\n+            BpmnExecutionMetrics::countActivityInstanceStart\n+        )\n+            .description(\"The number of activity instances started. This is also known as flow node instances (FNI).\")\n+            .tags(Tags.concat(BPMN_EXECUTION_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.ACTIVTY_INSTANCE_START))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.ACTIVTY_INSTANCE_END),\n+            bpmnExecutionMetrics,\n+            BpmnExecutionMetrics::countActivityInstanceEnd\n+        )\n+            .description(\"The number of activity instances ended.\")\n+            .tags(Tags.concat(BPMN_EXECUTION_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.ACTIVTY_INSTANCE_END))\n+            .register(registry);\n+    }\n+\n+    private String createMetricName(String camundaName) {\n+        return \"camunda.bpmn.\" + camundaName.replace('-', '.');\n+    }\n+\n+}"
  },
  {
    "sha": "3f75d47cbbb3a448e1fe1bd16ff423fa22903ca7",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/CamundaMetrics.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/CamundaMetrics.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/CamundaMetrics.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/CamundaMetrics.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micronaut.context.BeanProvider;\n+import io.micronaut.context.exceptions.BeanInstantiationException;\n+import org.camunda.bpm.engine.ManagementService;\n+import org.camunda.bpm.engine.management.MetricsQuery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Base class to use inbuild camunda metrics.\n+ * see also https://docs.camunda.org/manual/latest/user-guide/process-engine/metrics/\n+ */\n+abstract public class CamundaMetrics {\n+\n+    protected final BeanProvider<ManagementService> providerManagementService;\n+\n+    protected final Map<String, MetricsQuery> metricsQueryMap = new HashMap<>();\n+\n+    protected CamundaMetrics(BeanProvider<ManagementService> providerManagementService) {\n+        this.providerManagementService = providerManagementService;\n+    }\n+\n+    protected long sumMetric(String metricName) {\n+        MetricsQuery metricsQuery = getMetricsQuery(metricName);\n+        if (metricsQuery != null) {\n+            return metricsQuery.sum();\n+        }\n+        throw new BeanInstantiationException(\"Camunda MetricsQuery is null\");\n+    }\n+\n+    protected MetricsQuery getMetricsQuery(String metricName) {\n+        if (metricsQueryMap.containsKey(metricName)) {\n+            return metricsQueryMap.get(metricName);\n+        }\n+        MetricsQuery metricsQuery = providerManagementService.get().createMetricsQuery().name(metricName);\n+        metricsQueryMap.put(metricName, metricsQuery); // does not return the initialized metrics query\n+        return metricsQuery;\n+    }\n+\n+}"
  },
  {
    "sha": "f07786b9207dc96138a1ca604bb9ca0e012024ac",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/CamundaMetricsBinderTags.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/CamundaMetricsBinderTags.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/CamundaMetricsBinderTags.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/CamundaMetricsBinderTags.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micrometer.core.instrument.Tag;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Constants for our MetricsBinders.\n+ */\n+public final class CamundaMetricsBinderTags {\n+\n+    static final String TAG_KEY_NAME = \"name\";\n+\n+    static final String TAG_KEY_CATEGORY = \"category\";\n+\n+    static final Tag TAG_CLASS_CAMUNDA = Tag.of(\"class\", \"camunda\");\n+\n+    static final Iterable<Tag> JOB_EXECUTOR_DEFAULT_TAGS = Arrays.asList(TAG_CLASS_CAMUNDA, Tag.of(TAG_KEY_CATEGORY, \"job-executor\"));\n+\n+    static final Iterable<Tag> DMN_EXECUTION_DEFAULT_TAGS = Arrays.asList(TAG_CLASS_CAMUNDA, Tag.of(TAG_KEY_CATEGORY, \"dmn-execution\"));\n+\n+    static final Iterable<Tag> BPMN_EXECUTION_DEFAULT_TAGS = Arrays.asList(TAG_CLASS_CAMUNDA, Tag.of(TAG_KEY_CATEGORY, \"bpmn-execution\"));\n+\n+    static final Iterable<Tag> HISTORY_CLEAN_UP_DEFAULT_TAGS = Arrays.asList(TAG_CLASS_CAMUNDA, Tag.of(TAG_KEY_CATEGORY, \"history-clean-up\"));\n+\n+    private CamundaMetricsBinderTags() {}\n+}"
  },
  {
    "sha": "5c6dd93794ab038b448e793d0b66fc81680c7a8a",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/DmnExecutionMetrics.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/DmnExecutionMetrics.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/DmnExecutionMetrics.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/DmnExecutionMetrics.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micronaut.configuration.metrics.annotation.RequiresMetrics;\n+import io.micronaut.context.BeanProvider;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import org.camunda.bpm.engine.ManagementService;\n+import org.camunda.bpm.engine.management.Metrics;\n+\n+import javax.inject.Singleton;\n+\n+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_BINDERS;\n+\n+/**\n+ * Holder class to count dmn execution metrics.\n+ */\n+@Singleton\n+@RequiresMetrics\n+@Requires(property = MICRONAUT_METRICS_BINDERS + \".camunda.dmnExecution.enabled\", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)\n+public class DmnExecutionMetrics extends CamundaMetrics {\n+\n+    public DmnExecutionMetrics(BeanProvider<ManagementService> providerManagementService) {\n+        super(providerManagementService);\n+    }\n+\n+    public long countExecutedDecisionInstances() {\n+        return sumMetric(Metrics.EXECUTED_DECISION_INSTANCES);\n+    }\n+\n+    public long countExecutedDecisionElements() {\n+        return sumMetric(Metrics.EXECUTED_DECISION_ELEMENTS);\n+    }\n+\n+}"
  },
  {
    "sha": "59b4d5ac4a032cb4bf1c2dd906950378a5ba0ba7",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/DmnExecutionMetricsBinder.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/DmnExecutionMetricsBinder.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/DmnExecutionMetricsBinder.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/DmnExecutionMetricsBinder.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tags;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+import io.micrometer.core.lang.NonNull;\n+import io.micronaut.configuration.metrics.annotation.RequiresMetrics;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import org.camunda.bpm.engine.management.Metrics;\n+\n+import javax.inject.Singleton;\n+\n+import static info.novatec.micronaut.camunda.bpm.feature.metrics.CamundaMetricsBinderTags.DMN_EXECUTION_DEFAULT_TAGS;\n+import static info.novatec.micronaut.camunda.bpm.feature.metrics.CamundaMetricsBinderTags.TAG_KEY_NAME;\n+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_BINDERS;\n+\n+/**\n+ * Provides Metrics about DMN Execution.\n+ */\n+@Singleton\n+@RequiresMetrics\n+@Requires(property = MICRONAUT_METRICS_BINDERS + \".camunda.dmnExecution.enabled\", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)\n+public class DmnExecutionMetricsBinder implements MeterBinder {\n+\n+    protected final DmnExecutionMetrics dmnExecutionMetrics;\n+\n+    public DmnExecutionMetricsBinder(DmnExecutionMetrics dmnExecutionMetrics) {\n+        this.dmnExecutionMetrics = dmnExecutionMetrics;\n+    }\n+\n+    @Override\n+    public void bindTo(@NonNull MeterRegistry registry) {\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.EXECUTED_DECISION_INSTANCES),\n+            dmnExecutionMetrics,\n+            DmnExecutionMetrics::countExecutedDecisionInstances\n+        )\n+            .description(\"The number of evaluated decision instances (EDI). A decision instance is a DMN decision table or a DMN Literal Expression.\")\n+            .tags(Tags.concat(DMN_EXECUTION_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.EXECUTED_DECISION_INSTANCES))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.EXECUTED_DECISION_ELEMENTS),\n+            dmnExecutionMetrics,\n+            DmnExecutionMetrics::countExecutedDecisionElements\n+        )\n+            .description(\"The number of decision elements executed during evaluation of DMN decision tables. For one table, this is calculated as the number of clauses multiplied by the number of rules.\")\n+            .tags(Tags.concat(DMN_EXECUTION_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.EXECUTED_DECISION_ELEMENTS))\n+            .register(registry);\n+    }\n+\n+    private String createMetricName(String camundaName) {\n+        return \"camunda.dmn.\" + camundaName.replace('-', '.');\n+    }\n+\n+}"
  },
  {
    "sha": "fc1fc4200645f6eadfd7bcaf3fa0a7a6f033102f",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/HistoryCleanUpMetrics.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/HistoryCleanUpMetrics.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/HistoryCleanUpMetrics.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/HistoryCleanUpMetrics.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micronaut.configuration.metrics.annotation.RequiresMetrics;\n+import io.micronaut.context.BeanProvider;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import org.camunda.bpm.engine.ManagementService;\n+import org.camunda.bpm.engine.management.Metrics;\n+\n+import javax.inject.Singleton;\n+\n+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_BINDERS;\n+\n+/**\n+ * Holder class to count history cleanup execution metrics.\n+ */\n+@Singleton\n+@RequiresMetrics\n+@Requires(property = MICRONAUT_METRICS_BINDERS + \".camunda.historyCleanUp.enabled\", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)\n+public class HistoryCleanUpMetrics extends CamundaMetrics {\n+\n+    public HistoryCleanUpMetrics(BeanProvider<ManagementService> providerManagementService) {\n+        super(providerManagementService);\n+    }\n+\n+    public long getRemovedProcessInstances() {\n+        return sumMetric(Metrics.HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES);\n+    }\n+\n+    public long getRemovedDecisionInstances() {\n+        return sumMetric(Metrics.HISTORY_CLEANUP_REMOVED_DECISION_INSTANCES);\n+    }\n+\n+    public long getRemovedBatchOperations() {\n+        return sumMetric(Metrics.HISTORY_CLEANUP_REMOVED_BATCH_OPERATIONS);\n+    }\n+\n+}"
  },
  {
    "sha": "10e7166015835b7c073613da753391f569b66c50",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/HistoryCleanUpMetricsBinder.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/HistoryCleanUpMetricsBinder.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/HistoryCleanUpMetricsBinder.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/HistoryCleanUpMetricsBinder.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tags;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+import io.micrometer.core.lang.NonNull;\n+import io.micronaut.configuration.metrics.annotation.RequiresMetrics;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import org.camunda.bpm.engine.management.Metrics;\n+\n+import javax.inject.Singleton;\n+\n+import static info.novatec.micronaut.camunda.bpm.feature.metrics.CamundaMetricsBinderTags.HISTORY_CLEAN_UP_DEFAULT_TAGS;\n+import static info.novatec.micronaut.camunda.bpm.feature.metrics.CamundaMetricsBinderTags.TAG_KEY_NAME;\n+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_BINDERS;\n+\n+/**\n+ * Provides Metrics about History Cleanup Execution.\n+ */\n+@Singleton\n+@RequiresMetrics\n+@Requires(property = MICRONAUT_METRICS_BINDERS + \".camunda.historyCleanUp.enabled\", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)\n+public class HistoryCleanUpMetricsBinder implements MeterBinder {\n+\n+    protected final HistoryCleanUpMetrics historyCleanUpMetrics;\n+\n+    public HistoryCleanUpMetricsBinder(HistoryCleanUpMetrics historyCleanUpMetrics) {\n+        this.historyCleanUpMetrics = historyCleanUpMetrics;\n+    }\n+\n+    @Override\n+    public void bindTo(@NonNull MeterRegistry registry) {\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES),\n+            historyCleanUpMetrics,\n+            HistoryCleanUpMetrics::getRemovedProcessInstances\n+        )\n+            .description(\"The number of process instances removed by history clean up.\")\n+            .tags(Tags.concat(HISTORY_CLEAN_UP_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.HISTORY_CLEANUP_REMOVED_DECISION_INSTANCES),\n+            historyCleanUpMetrics,\n+            HistoryCleanUpMetrics::getRemovedDecisionInstances\n+        )\n+            .description(\"The number of decision instances removed by history clean up.\")\n+            .tags(Tags.concat(HISTORY_CLEAN_UP_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.HISTORY_CLEANUP_REMOVED_DECISION_INSTANCES))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.HISTORY_CLEANUP_REMOVED_BATCH_OPERATIONS),\n+            historyCleanUpMetrics,\n+            HistoryCleanUpMetrics::getRemovedBatchOperations\n+        )\n+            .description(\"The number of batch operations removed by history clean up.\")\n+            .tags(Tags.concat(HISTORY_CLEAN_UP_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.HISTORY_CLEANUP_REMOVED_BATCH_OPERATIONS))\n+            .register(registry);\n+    }\n+\n+    private String createMetricName(String camundaName) {\n+        return \"camunda.\" + camundaName.replace('-', '.');\n+    }\n+\n+}"
  },
  {
    "sha": "41c43e9aa1fdbabdb3cda34fcf19e4662d0c5336",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/JobExecutorMetrics.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/JobExecutorMetrics.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/JobExecutorMetrics.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/JobExecutorMetrics.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micronaut.configuration.metrics.annotation.RequiresMetrics;\n+import io.micronaut.context.BeanProvider;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import org.camunda.bpm.engine.ManagementService;\n+import org.camunda.bpm.engine.management.Metrics;\n+\n+import javax.inject.Provider;\n+import javax.inject.Singleton;\n+\n+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_BINDERS;\n+\n+/**\n+ * Holder class to count job execution metrics.\n+ */\n+@Singleton\n+@RequiresMetrics\n+@Requires(property = MICRONAUT_METRICS_BINDERS + \".camunda.jobExecutor.enabled\", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)\n+public class JobExecutorMetrics extends CamundaMetrics {\n+\n+    public JobExecutorMetrics(BeanProvider<ManagementService> providerManagementService) {\n+        super(providerManagementService);\n+    }\n+\n+    public long countJobSuccessful() {\n+        return sumMetric(Metrics.JOB_SUCCESSFUL);\n+    }\n+\n+    public long countJobFailed() {\n+        return sumMetric(Metrics.JOB_FAILED);\n+    }\n+\n+    public long countJobAcquiredSuccess() {\n+        return sumMetric(Metrics.JOB_ACQUISITION_ATTEMPT);\n+    }\n+\n+    public long countJobAcquisitionAttempt() {\n+        return sumMetric(Metrics.JOB_ACQUIRED_SUCCESS);\n+    }\n+\n+    public long countJobAcquiredFailure() {\n+        return sumMetric(Metrics.JOB_ACQUIRED_FAILURE);\n+    }\n+\n+    public long countJobExecutionRejected() {\n+        return sumMetric(Metrics.JOB_EXECUTION_REJECTED);\n+    }\n+\n+    public long countJobLockedExclusive() {\n+        return sumMetric(Metrics.JOB_LOCKED_EXCLUSIVE);\n+    }\n+\n+}"
  },
  {
    "sha": "3a2976f97b41144c5338871c05fa5c92110eaac5",
    "filename": "micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/JobExecutorMetricsBinder.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/JobExecutorMetricsBinder.java",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/JobExecutorMetricsBinder.java",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/main/java/info/novatec/micronaut/camunda/bpm/feature/metrics/JobExecutorMetricsBinder.java?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tags;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+import io.micrometer.core.lang.NonNull;\n+import io.micronaut.configuration.metrics.annotation.RequiresMetrics;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import org.camunda.bpm.engine.management.Metrics;\n+\n+import javax.inject.Singleton;\n+\n+import static info.novatec.micronaut.camunda.bpm.feature.metrics.CamundaMetricsBinderTags.JOB_EXECUTOR_DEFAULT_TAGS;\n+import static info.novatec.micronaut.camunda.bpm.feature.metrics.CamundaMetricsBinderTags.TAG_KEY_NAME;\n+import static io.micronaut.configuration.metrics.micrometer.MeterRegistryFactory.MICRONAUT_METRICS_BINDERS;\n+\n+/**\n+ * Provides Metrics about Job Execution.\n+ */\n+@Singleton\n+@RequiresMetrics\n+@Requires(property = MICRONAUT_METRICS_BINDERS + \".camunda.jobExecutor.enabled\", value = StringUtils.TRUE, defaultValue = StringUtils.FALSE)\n+public class JobExecutorMetricsBinder implements MeterBinder {\n+\n+    protected final JobExecutorMetrics jobExecutorMetrics;\n+\n+    public JobExecutorMetricsBinder(JobExecutorMetrics jobExecutorMetrics) {\n+        this.jobExecutorMetrics = jobExecutorMetrics;\n+    }\n+\n+    @Override\n+    public void bindTo(@NonNull MeterRegistry registry) {\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.JOB_SUCCESSFUL),\n+            jobExecutorMetrics,\n+            JobExecutorMetrics::countJobSuccessful\n+        )\n+            .description(\"The number of jobs successfully executed.\")\n+            .tags(Tags.concat(JOB_EXECUTOR_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.JOB_SUCCESSFUL))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.JOB_FAILED),\n+            jobExecutorMetrics,\n+            JobExecutorMetrics::countJobFailed\n+        )\n+            .description(\"The number of jobs that failed to execute and that were submitted for retry. Every failed attempt to execute a job is counted.\")\n+            .tags(Tags.concat(JOB_EXECUTOR_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.JOB_FAILED))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.JOB_ACQUISITION_ATTEMPT),\n+            jobExecutorMetrics,\n+            JobExecutorMetrics::countJobAcquisitionAttempt\n+        )\n+            .description(\"The number of job acquisition cycles performed.\")\n+            .tags(Tags.concat(JOB_EXECUTOR_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.JOB_ACQUISITION_ATTEMPT))\n+            .register(registry);\n+        Gauge.builder(\n+            createMetricName(Metrics.JOB_ACQUIRED_SUCCESS),\n+            jobExecutorMetrics,\n+            JobExecutorMetrics::countJobAcquiredSuccess\n+        )\n+            .description(\"The number of jobs that were acquired and successfully locked for execution.\")\n+            .tags(Tags.concat(JOB_EXECUTOR_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.JOB_ACQUIRED_SUCCESS))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.JOB_ACQUIRED_FAILURE),\n+            jobExecutorMetrics,\n+            JobExecutorMetrics::countJobAcquiredFailure\n+        )\n+            .description(\"The number of jobs that were acquired but could not be locked for execution due to another job executor locking/executing the jobs in parallel.\")\n+            .tags(Tags.concat(JOB_EXECUTOR_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.JOB_ACQUIRED_FAILURE))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.JOB_EXECUTION_REJECTED),\n+            jobExecutorMetrics,\n+            JobExecutorMetrics::countJobExecutionRejected\n+        )\n+            .description(\"The number of successfully acquired jobs submitted for execution that were rejected due to saturated execution resources. This is an indicator that the execution thread pool's job queue is full.\")\n+            .tags(Tags.concat(JOB_EXECUTOR_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.JOB_EXECUTION_REJECTED))\n+            .register(registry);\n+\n+        Gauge.builder(\n+            createMetricName(Metrics.JOB_LOCKED_EXCLUSIVE),\n+            jobExecutorMetrics,\n+            JobExecutorMetrics::countJobLockedExclusive\n+        )\n+            .description(\"The number of exclusive jobs that are immediately locked and executed.\")\n+            .tags(Tags.concat(JOB_EXECUTOR_DEFAULT_TAGS, TAG_KEY_NAME, Metrics.JOB_LOCKED_EXCLUSIVE))\n+            .register(registry);\n+    }\n+\n+    private String createMetricName(String camundaName) {\n+        return \"camunda.\" + camundaName.replace('-', '.');\n+    }\n+\n+}"
  },
  {
    "sha": "5c2315e21f0ffe8ce6033b4e32790164c224752a",
    "filename": "micronaut-camunda-bpm-feature/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/CamundaMetricsNotEnabledByDefaultTest.kt",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/CamundaMetricsNotEnabledByDefaultTest.kt",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/micronaut-camunda-bpm-feature/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/CamundaMetricsNotEnabledByDefaultTest.kt",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/micronaut-camunda-bpm-feature/src/test/kotlin/info/novatec/micronaut/camunda/bpm/feature/metrics/test/CamundaMetricsNotEnabledByDefaultTest.kt?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2021 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package info.novatec.micronaut.camunda.bpm.feature.metrics.test\n+\n+import info.novatec.micronaut.camunda.bpm.feature.metrics.*\n+import io.micrometer.core.instrument.MeterRegistry\n+import io.micronaut.context.ApplicationContext\n+import io.micronaut.test.extensions.junit5.annotation.MicronautTest\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Assertions.assertFalse\n+import org.junit.jupiter.api.Test\n+import javax.inject.Inject\n+\n+\n+@MicronautTest\n+internal class CamundaMetricsNotEnabledByDefaultTest {\n+\n+    @Inject\n+    lateinit var applicationContext: ApplicationContext\n+\n+    @Test\n+    fun `Camunda Metrics should not be available, when only micrometer jar is included`() {\n+        // meter registry is available\n+        assertTrue(applicationContext.findBean(MeterRegistry::class.java).isPresent)\n+\n+        // all provided camunda metrics are not available by default\n+        assertFalse(applicationContext.findBean(BpmnExecutionMetrics::class.java).isPresent)\n+        assertFalse(applicationContext.findBean(BpmnExecutionMetricsBinder::class.java).isPresent)\n+        assertFalse(applicationContext.findBean(DmnExecutionMetrics::class.java).isPresent)\n+        assertFalse(applicationContext.findBean(DmnExecutionMetricsBinder::class.java).isPresent)\n+        assertFalse(applicationContext.findBean(HistoryCleanUpMetrics::class.java).isPresent)\n+        assertFalse(applicationContext.findBean(HistoryCleanUpMetricsBinder::class.java).isPresent)\n+        assertFalse(applicationContext.findBean(JobExecutorMetrics::class.java).isPresent)\n+        assertFalse(applicationContext.findBean(JobExecutorMetricsBinder::class.java).isPresent)\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1db5c59ca2dcbdefda8d4a536beba2457ddcc3f4",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/blob/05c22af465627177b1b022b2b04c6c67ff8cb549/settings.gradle",
    "raw_url": "https://github.com/NovatecConsulting/micronaut-camunda-bpm/raw/05c22af465627177b1b022b2b04c6c67ff8cb549/settings.gradle",
    "contents_url": "https://api.github.com/repos/NovatecConsulting/micronaut-camunda-bpm/contents/settings.gradle?ref=05c22af465627177b1b022b2b04c6c67ff8cb549",
    "patch": "@@ -13,5 +13,6 @@ rootProject.name = 'micronaut-camunda-bpm'\n include ':micronaut-camunda-bpm-feature'\n include ':micronaut-camunda-bpm-example'\n include ':micronaut-camunda-bpm-feature:transactional-test-data-jdbc'\n+include ':micronaut-camunda-bpm-feature:metrics-test'\n include ':micronaut-camunda-bpm-feature:jetty-webapp-and-rest'\n include ':example-external-task-worker'"
  }
]
