[
  {
    "sha": "ac62c8c20c3bfdff10faf53fdb14b4ea1f541f35",
    "filename": ".github/workflows/ci.yml",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/.github/workflows/ci.yml",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/.github/workflows/ci.yml",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/.github/workflows/ci.yml?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -0,0 +1,24 @@\n+name: Java CI\n+on: [push, pull_request]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      matrix:\n+        # test against latest update of each major Java version, as well as specific updates of LTS versions:\n+        java: [ 1.8, 11 ]\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Set up Java\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: ${{ matrix.java }}\n+      - name: Cache Maven packages\n+        uses: actions/cache@v2\n+        with:\n+          path: ~/.m2\n+          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n+          restore-keys: ${{ runner.os }}-m2\n+      - name: Build and run tests with Maven\n+        run: mvn -B verify --file pom.xml"
  },
  {
    "sha": "02e64ae861136ad22314f05f90693a096d52d2d1",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 117,
    "deletions": 12,
    "changes": 129,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/pom.xml",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/pom.xml",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/pom.xml?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -13,11 +13,22 @@\n         <maven>3.3.0</maven>\n     </prerequisites>\n \n+    <properties>\n+        <java-release.version>8</java-release.version>\n+        <java.version>1.${java-release.version}</java.version>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <freemarker.version>2.3.26-incubating</freemarker.version>\n+        <junit5.version>5.7.1</junit5.version>\n+        <junit-platform-runner.version>1.7.1</junit-platform-runner.version>\n+        <groovy.version>2.5.14</groovy.version>\n+        <spock.version>2.0-M4-groovy-2.5</spock.version>\n+    </properties>\n+\n     <dependencies>\n         <dependency>\n             <groupId>org.freemarker</groupId>\n             <artifactId>freemarker</artifactId>\n-            <version>2.3.26-incubating</version>\n+            <version>${freemarker.version}</version>\n             <type>jar</type>\n         </dependency>\n \n@@ -35,6 +46,40 @@\n             <scope>provided</scope>\n         </dependency>\n \n+        <!-- test dependencies -->\n+        <dependency>\n+            <groupId>org.spockframework</groupId>\n+            <artifactId>spock-core</artifactId>\n+            <version>${spock.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.codehaus.groovy</groupId>\n+            <artifactId>groovy</artifactId>\n+            <version>${groovy.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <version>${junit5.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-params</artifactId>\n+            <version>${junit5.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.junit.platform</groupId>\n+            <artifactId>junit-platform-engine</artifactId>\n+            <version>${junit-platform-runner.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n     <build>\n@@ -53,11 +98,46 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n-                <version>3.5.1</version>\n+                <version>3.8.1</version>\n                 <configuration>\n-                    <source>1.8</source>\n-                    <target>1.8</target>\n+                    <source>${java.version}</source>\n+                    <target>${java.version}</target>\n+                    <compilerId>groovy-eclipse-compiler</compilerId>\n+                    <compilerArguments>\n+                        <indy />\n+                    </compilerArguments>\n                 </configuration>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>org.codehaus.groovy</groupId>\n+                        <artifactId>groovy-eclipse-compiler</artifactId>\n+                        <version>3.4.0-01</version>\n+                    </dependency>\n+                    <dependency>\n+                        <groupId>org.codehaus.groovy</groupId>\n+                        <artifactId>groovy-eclipse-batch</artifactId>\n+                        <version>2.5.9-01</version>\n+                    </dependency>\n+                </dependencies>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>build-helper-maven-plugin</artifactId>\n+                <version>3.2.0</version>\n+                <executions>\n+                    <execution>\n+                        <id>add-test-source</id>\n+                        <phase>generate-test-sources</phase>\n+                        <goals>\n+                            <goal>add-test-source</goal>\n+                        </goals>\n+                        <configuration>\n+                            <sources>\n+                                <source>src/test/groovy</source>\n+                            </sources>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n             </plugin>\n         </plugins>\n         <pluginManagement>\n@@ -80,6 +160,17 @@\n                         </execution>\n                     </executions>\n                 </plugin>\n+                <plugin>\n+                    <artifactId>maven-surefire-plugin</artifactId>\n+                    <version>3.0.0-M4</version>\n+                    <configuration>\n+                        <useFile>false</useFile>\n+                        <includes>\n+                            <include>**/*Test.java</include>\n+                            <include>**/*Spec.java</include>\n+                        </includes>\n+                    </configuration>\n+                </plugin>\n             </plugins>\n         </pluginManagement>\n     </build>\n@@ -105,8 +196,8 @@\n         <connection>scm:git:git://github.com/mattsheppard/ftldoc.git</connection>\n         <developerConnection>scm:git:ssh://github.com:mattsheppard/ftldoc.git</developerConnection>\n         <url>http://github.com/mattsheppard/ftldoc/tree/master</url>\n-      <tag>ftldoc-maven-plugin-0.0.2</tag>\n-  </scm>\n+        <tag>ftldoc-maven-plugin-0.0.2</tag>\n+    </scm>\n \n     <distributionManagement>\n         <snapshotRepository>\n@@ -119,19 +210,33 @@\n         </repository>\n     </distributionManagement>\n \n-    <properties>\n-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    </properties>\n-\n     <profiles>\n+        <profile>\n+            <id>modern-jdk</id>\n+            <activation><jdk>[1.9,]</jdk></activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <artifactId>maven-compiler-plugin</artifactId>\n+                        <configuration combine.self=\"override\">\n+                            <release>${java-release.version}</release>\n+                            <compilerId>groovy-eclipse-compiler</compilerId>\n+                            <compilerArguments>\n+                                <indy />\n+                            </compilerArguments>\n+                        </configuration>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n         <profile>\n             <id>release</id>\n             <build>\n                 <plugins>\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-source-plugin</artifactId>\n-                        <version>2.2.1</version>\n+                        <version>3.0.1</version>\n                         <executions>\n                             <execution>\n                                 <id>attach-sources</id>\n@@ -144,7 +249,7 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-javadoc-plugin</artifactId>\n-                        <version>2.9.1</version>\n+                        <version>3.1.1</version>\n                         <executions>\n                             <execution>\n                                 <id>attach-javadocs</id>"
  },
  {
    "sha": "02e8073fe974e30adf40dbb4d609e3f17e165fe5",
    "filename": "src/main/java/freemarker/tools/ftldoc/FtlDoc.java",
    "status": "modified",
    "additions": 260,
    "deletions": 338,
    "changes": 598,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/main/java/freemarker/tools/ftldoc/FtlDoc.java",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/main/java/freemarker/tools/ftldoc/FtlDoc.java",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/src/main/java/freemarker/tools/ftldoc/FtlDoc.java?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -15,13 +15,10 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Set;\n import java.util.SortedMap;\n import java.util.Stack;\n import java.util.TreeMap;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n import javax.swing.tree.TreeNode;\n \n@@ -35,48 +32,27 @@\n import freemarker.core.TextBlock;\n import freemarker.template.Configuration;\n import freemarker.template.SimpleHash;\n-import freemarker.template.SimpleSequence;\n import freemarker.template.Template;\n-import freemarker.template.Version;\n-\n \n /**\n  * Main ftldoc class (includes command line tool).\n  * \n  * @author Stephan Mueller - stephan at chaquotay dot net\n  */\n-public class FtlDoc {\n-    \n-    private static final String EXT_FTL = \".ftl\";\n+public class FtlDoc\n+{\n+    static final String EXT_FTL = \".ftl\";\n     private static final String OUTPUT_ENCODING = \"UTF-8\";\n-    \n+\n     private static final Comparator<Map<String, Object>> MACRO_COMPARATOR = new Comparator<Map<String, Object>>() {\n         @Override\n-        public int compare(Map<String, Object> lhs, Map<String, Object> rhs) {\n+        public int compare(Map<String, Object> lhs, Map<String, Object> rhs)\n+        {\n             return lhs.get(\"name\").toString().toLowerCase()\n-                    .compareTo(rhs.get(\"name\").toString().toLowerCase());\n+                .compareTo(rhs.get(\"name\").toString().toLowerCase());\n         }\n     };\n \n-    private static final Pattern LINESPLIT_PATTERN = Pattern.compile(\"(\\\\r\\\\n)|(\\\\r)|(\\\\n)\");\n-    private static final Pattern PARAM_PATTERN = Pattern.compile(\"^\\\\s*(?:--)?\\\\s*@param\\\\s*(\\\\w*)\\\\s*(.*)$\");\n-    private static final Pattern AT_PATTERN = Pattern.compile(\"^\\\\s*(?:--)?\\\\s*(@\\\\w+)\\\\s*(.*)$\");\n-    private static final Pattern TEXT_PATTERN = Pattern.compile(\"^\\\\s*(?:--)?(.*)$\");\n-\n-    private static enum Templates {\n-        file(\"file\"),index(\"index\"),indexAllCat(\"index-all-cat\"),\n-        indexAllAlpha(\"index-all-alpha\"), overview(\"overview\"), filelist(\"filelist\");\n-        \n-        private final String fileName;\n-        private Templates(String fileName) {\n-            this.fileName = fileName;\n-        }\n-         \n-        public String fileName() {\n-            return fileName + EXT_FTL;\n-        }\n-    }\n-\n     private SortedMap<String, List<Map<String, Object>>> allCategories = null;\n     private SortedMap<String, List<Map<String, Object>>> categories = null;\n     private List<Map<String, Object>> allMacros = null;\n@@ -86,470 +62,416 @@ public String fileName() {\n     private List<SimpleHash> fParsedFiles;\n     private Set<File> fAllDirectories;\n     private File fAltTemplatesFolder;\n-    \n-    List<CategoryRegion> regions = new LinkedList<CategoryRegion>();\n-    \n+\n+    List<CategoryRegion> regions = new LinkedList<>();\n+\n     private Configuration cfg = null;\n-    \n-    \n-    public FtlDoc(List<File> files, File outputDir, File altTemplatesFolder) {\n-        cfg = new Configuration(Configuration.VERSION_2_3_26); // TODO parametrice version compatibility\n-        cfg.setWhitespaceStripping(false);\n-        cfg.setOutputEncoding(OUTPUT_ENCODING);\n-        \n-        fOutDir = outputDir;\n-        fFiles = files;\n-        fAltTemplatesFolder = altTemplatesFolder;\n-        \n+\n+    public FtlDoc(List<File> files, File outputDir, File altTemplatesFolder)\n+    {\n+        this.cfg = new Configuration(Configuration.VERSION_2_3_26); // TODO parametrice version compatibility\n+        this.cfg.setWhitespaceStripping(false);\n+        this.cfg.setOutputEncoding(OUTPUT_ENCODING);\n+\n+        this.fOutDir = outputDir;\n+        this.fFiles = files;\n+        this.fAltTemplatesFolder = altTemplatesFolder;\n+\n         // extracting parent directories of all files\n-        fAllDirectories = new HashSet<File>();\n+        this.fAllDirectories = new HashSet<>();\n         for (File f : files) {\n-            fAllDirectories.add(f.getParentFile());\n+            this.fAllDirectories.add(f.getParentFile());\n         }\n-        \n+\n     }\n-    \n-    private void addCategory(String name) {\n-        if(!categories.containsKey(name)) {\n-            categories.put(name,new ArrayList<Map<String, Object>>());\n+\n+    private void addCategory(String name)\n+    {\n+        if (!this.categories.containsKey(name)) {\n+            this.categories.put(name, new ArrayList<Map<String, Object>>());\n         }\n-        if(!allCategories.containsKey(name)) {\n-            allCategories.put(name,new ArrayList<Map<String, Object>>());\n+        if (!this.allCategories.containsKey(name)) {\n+            this.allCategories.put(name, new ArrayList<Map<String, Object>>());\n         }\n     }\n-    \n-    private void createCategoryRegions(Template t) {\n-        regions = new LinkedList<CategoryRegion>();\n-        \n+\n+    private void createCategoryRegions(Template t)\n+    {\n+        this.regions = new LinkedList<>();\n+\n         TemplateElement te = t.getRootTreeNode();\n         Map<String, Serializable> pc;\n         Comment c;\n         Comment regionStart = null;\n-        \n+\n         String name = null;\n         int begincol = 0;\n         int beginline = 0;\n-        \n-        Stack<TreeNode> nodes = new Stack<TreeNode>();\n+\n+        Stack<TreeNode> nodes = new Stack<>();\n         nodes.push(te);\n-        while(!nodes.isEmpty()) {\n-            te=(TemplateElement)nodes.pop();\n-            for(int i = te.getChildCount()-1;i>=0;i--) {\n+        while (!nodes.isEmpty()) {\n+            te = (TemplateElement)nodes.pop();\n+            for (int i = te.getChildCount() - 1; i >= 0; i--) {\n                 nodes.push(te.getChildAt(i));\n             }\n-            \n-            if(te instanceof Comment) {\n+\n+            if (te instanceof Comment) {\n                 c = (Comment)te;\n-                pc = parse(c);\n-                \n-                if(pc.get(\"@begin\")!=null) {\n-                    if(regionStart!=null) {\n+                pc = this.parse(c);\n+\n+                if (pc.get(\"@begin\") != null) {\n+                    if (regionStart != null) {\n                         System.err.println(\"WARNING: nested @begin-s\");\n-                        CategoryRegion cc = new CategoryRegion(name, begincol,beginline,c.getBeginColumn(),c.getBeginLine());\n-                        regions.add(cc);\n-                        addCategory(name);\n+                        CategoryRegion cc =\n+                            new CategoryRegion(name, begincol, beginline, c.getBeginColumn(), c.getBeginLine());\n+                        this.regions.add(cc);\n+                        this.addCategory(name);\n                     }\n                     name = pc.get(\"@begin\").toString().trim();\n                     begincol = c.getBeginColumn();\n                     beginline = c.getBeginLine();\n-                    \n-                    \n+\n                     regionStart = c;\n                 }\n-                if(pc.get(\"@end\")!=null) {\n-                    if(regionStart==null) {\n+                if (pc.get(\"@end\") != null) {\n+                    if (regionStart == null) {\n                         System.err.println(\"WARNING: @end without @begin!\");\n                     } else {\n-                        CategoryRegion cc = new CategoryRegion(name, begincol,beginline,c.getEndColumn(),c.getEndLine());\n-                        regions.add(cc);\n-                        addCategory(name);\n+                        CategoryRegion cc =\n+                            new CategoryRegion(name, begincol, beginline, c.getEndColumn(), c.getEndLine());\n+                        this.regions.add(cc);\n+                        this.addCategory(name);\n                         regionStart = null;\n                     }\n                 }\n-                \n-                \n+\n             }\n         }\n-        if(regionStart!=null) {\n+        if (regionStart != null) {\n             System.err.println(\"WARNING: missing @end (EOF)\");\n-            CategoryRegion cc = new CategoryRegion(name, begincol,beginline,Integer.MAX_VALUE,Integer.MAX_VALUE);\n-            addCategory(name);\n-            regions.add(cc);\n+            CategoryRegion cc = new CategoryRegion(name, begincol, beginline, Integer.MAX_VALUE, Integer.MAX_VALUE);\n+            this.addCategory(name);\n+            this.regions.add(cc);\n         }\n     }\n-    \n-    private void addMacro(Map<String, Object> macro) {\n-        macros.add(macro);\n-        allMacros.add(macro);\n+\n+    private void addMacro(Map<String, Object> macro)\n+    {\n+        this.macros.add(macro);\n+        this.allMacros.add(macro);\n         String key = (String)macro.get(\"category\");\n-        if(key==null) key = \"\";\n-        List<Map<String, Object>> cat = categories.get(key);\n-        if(cat==null) {\n-            cat = new ArrayList<Map<String, Object>>();\n-            categories.put(key,cat);\n+        if (key == null) {\n+            key = \"\";\n+        }\n+        List<Map<String, Object>> cat = this.categories.get(key);\n+        if (cat == null) {\n+            cat = new ArrayList<>();\n+            this.categories.put(key, cat);\n         }\n         cat.add(macro);\n-        List<Map<String, Object>> allCat = allCategories.get(key);\n-        if(allCat==null) {\n-            allCat = new ArrayList<Map<String, Object>>();\n-            allCategories.put(key,allCat);\n+        List<Map<String, Object>> allCat = this.allCategories.get(key);\n+        if (allCat == null) {\n+            allCat = new ArrayList<>();\n+            this.allCategories.put(key, allCat);\n         }\n         allCat.add(macro);\n     }\n-    \n-    private void createFilePage(File file) {\n+\n+    private void createFilePage(File file)\n+    {\n         try {\n-            File htmlFile = new File(fOutDir,file.getName()+\".html\");\n+            File htmlFile = new File(this.fOutDir, file.getName() + \".html\");\n             System.out.println(\"Generating \" + htmlFile.getCanonicalFile() + \"...\");\n-            \n-            Template t_out = cfg.getTemplate(Templates.file.fileName());\n-            categories = new TreeMap<String, List<Map<String, Object>>>();\n+\n+            Template t_out = this.cfg.getTemplate(Templates.file.fileName());\n+            this.categories = new TreeMap<>();\n             TemplateElement te = null;\n             Comment globalComment = null;\n-            Template t = cfg.getTemplate(file.getName());\n-            macros = new ArrayList<Map<String, Object>>();\n-            Set<Comment> comments = new HashSet<Comment>();\n+            Template t = this.cfg.getTemplate(file.getName());\n+            this.macros = new ArrayList<>();\n+            Set<Comment> comments = new HashSet<>();\n             Map ms = t.getMacros();\n-            \n-            createCategoryRegions(t);\n-            \n+\n+            this.createCategoryRegions(t);\n+\n             Iterator macroIter = ms.values().iterator();\n-            while(macroIter.hasNext()) {\n+            while (macroIter.hasNext()) {\n                 Macro macro = (Macro)macroIter.next();\n                 int k = macro.getParent().getIndex(macro);\n-                for(int j=k-1;j>=0;j--) {\n+                for (int j = k - 1; j >= 0; j--) {\n                     te = (TemplateElement)macro.getParent().getChildAt(j);\n-                    if(te instanceof TextBlock) {\n-                        if(((TextBlock)te).getSource().trim().length()==0) {\n+                    if (te instanceof TextBlock) {\n+                        if (((TextBlock)te).getSource().trim().length() == 0) {\n                             continue;\n                         } else {\n-                            addMacro(createCommentedMacro(macro,null,file));\n+                            this.addMacro(this.createCommentedMacro(macro, null, file));\n                             break;\n                         }\n-                    } else if(te instanceof Comment) {\n+                    } else if (te instanceof Comment) {\n                         Comment c = (Comment)te;\n                         comments.add(c);\n-                        if(c.getText().startsWith(\"-\")) {\n-                            addMacro(createCommentedMacro(macro,c,file));\n+                        if (c.getText().startsWith(\"-\")) {\n+                            this.addMacro(this.createCommentedMacro(macro, c, file));\n                             break;\n                         }\n                     } else {\n-                        addMacro(createCommentedMacro(macro,null,file));\n+                        this.addMacro(this.createCommentedMacro(macro, null, file));\n                         break;\n                     }\n                 }\n             }\n-            \n-            \n+\n             te = t.getRootTreeNode();\n-            if(te.getClass().getName().endsWith(\"MixedContent\")) {\n+            if (te.getClass().getName().endsWith(\"MixedContent\")) {\n                 Enumeration children = te.children();\n-                while (children.hasMoreElements())\n-                {\n+                while (children.hasMoreElements()) {\n                     Object element = children.nextElement();\n-                    if(element instanceof Comment) {\n+                    if (element instanceof Comment) {\n                         Comment candidate = (Comment)element;\n-                        if(candidate.getText().startsWith(\"-\")) {\n-                            if(!comments.contains(candidate)) {\n+                        if (candidate.getText().startsWith(\"-\")) {\n+                            if (!comments.contains(candidate)) {\n                                 globalComment = candidate;\n                             }\n                             break;\n                         }\n                     }\n                 }\n             }\n-            \n-            Collections.sort(macros, MACRO_COMPARATOR);\n-            for (List<Map<String, Object>> l : categories.values()) {\n+\n+            Collections.sort(this.macros, MACRO_COMPARATOR);\n+            for (List<Map<String, Object>> l : this.categories.values()) {\n                 Collections.sort(l, MACRO_COMPARATOR);\n             }\n-            \n+\n             SimpleHash root = new SimpleHash();\n-            root.put(\"macros\",macros);\n-            if(null!=globalComment) {\n-                root.put(\"comment\",parse(globalComment));\n+            root.put(\"macros\", this.macros);\n+            if (null != globalComment) {\n+                root.put(\"comment\", this.parse(globalComment));\n             } else {\n-                root.put(\"comment\",new SimpleHash());\n+                root.put(\"comment\", new SimpleHash());\n             }\n-            root.put(\"filename\",t.getName());\n-            root.put(\"categories\",categories);\n-            \n-            try (OutputStreamWriter outputStream = new OutputStreamWriter (\n-                    new FileOutputStream (htmlFile), Charset.forName(OUTPUT_ENCODING).newEncoder()))\n-            {\n+            root.put(\"filename\", t.getName());\n+            root.put(\"categories\", this.categories);\n+\n+            try (OutputStreamWriter outputStream = new OutputStreamWriter(\n+                new FileOutputStream(htmlFile), Charset.forName(OUTPUT_ENCODING).newEncoder())) {\n                 t_out.process(root, outputStream);\n             }\n-            fParsedFiles.add(root);\n+            this.fParsedFiles.add(root);\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n     }\n-    \n+\n     /**\n      * Starts the ftldoc generation.\n      *\n      */\n-    public void run() {\n-     \n+    public void run()\n+    {\n+\n         try {\n             // init global collections\n-            allCategories = new TreeMap<String, List<Map<String, Object>>>();\n-            allMacros = new ArrayList<Map<String, Object>>();\n-            fParsedFiles = new ArrayList<SimpleHash>();\n-            \n-            \n-            TemplateLoader[] loaders = new TemplateLoader[fAllDirectories.size()+1];\n+            this.allCategories = new TreeMap<>();\n+            this.allMacros = new ArrayList<>();\n+            this.fParsedFiles = new ArrayList<>();\n+\n+            TemplateLoader[] loaders = new TemplateLoader[this.fAllDirectories.size() + 1];\n \n             // loader for ftldoc templates\n-            if (fAltTemplatesFolder != null) {\n-                loaders[0] = new FileTemplateLoader(fAltTemplatesFolder);\n+            if (this.fAltTemplatesFolder != null) {\n+                loaders[0] = new FileTemplateLoader(this.fAltTemplatesFolder);\n             } else {\n                 loaders[0] = new ClassTemplateLoader(this.getClass(), \"/default\");\n             }\n-            \n-            \n+\n             // add loader for every directory\n             int i = 1;\n-            for (Iterator<File> it = fAllDirectories.iterator(); it.hasNext(); i++) {\n+            for (Iterator<File> it = this.fAllDirectories.iterator(); it.hasNext(); i++) {\n                 loaders[i] = new FileTemplateLoader(it.next());\n             }\n-            \n+\n             TemplateLoader loader = new MultiTemplateLoader(loaders);\n-            cfg.setTemplateLoader(loader);\n-            \n+            this.cfg.setTemplateLoader(loader);\n+\n             // create template for file page\n-            \n-            \n+\n             // create file pages\n-            for(int n=0;n<fFiles.size();n++) {\n-                createFilePage((File)fFiles.get(n));\n+            for (File element : this.fFiles) {\n+                this.createFilePage(element);\n             }\n-            \n+\n             // sort categories\n-            for (List<Map<String, Object>> l : allCategories.values()) {\n+            for (List<Map<String, Object>> l : this.allCategories.values()) {\n                 Collections.sort(l, MACRO_COMPARATOR);\n             }\n-            \n+\n             // create the rest\n-            createFileListPage(\".html\");\n-            createIndexPage();\n-            createAllCatPage();\n-            createAllAlphaPage();\n-            createOverviewPage();\n+            this.createFileListPage(\".html\");\n+            this.createIndexPage();\n+            this.createAllCatPage();\n+            this.createAllAlphaPage();\n+            this.createOverviewPage();\n+        }\n+        catch (Exception ex) {\n+            ex.printStackTrace();\n         }\n-        \n-        catch (Exception e) {e.printStackTrace();}\n     }\n-    \n-    private void createIndexPage() {\n-        File indexFile = new File(fOutDir,\"index.html\");\n-        try (OutputStreamWriter outputStream = new OutputStreamWriter (\n-                    new FileOutputStream (indexFile), Charset.forName(OUTPUT_ENCODING).newEncoder()))\n-        {\n-            Template template = cfg.getTemplate(Templates.index.fileName());\n+\n+    private void createIndexPage()\n+    {\n+        File indexFile = new File(this.fOutDir, \"index.html\");\n+        try (OutputStreamWriter outputStream = new OutputStreamWriter(\n+            new FileOutputStream(indexFile), Charset.forName(OUTPUT_ENCODING).newEncoder())) {\n+            Template template = this.cfg.getTemplate(Templates.index.fileName());\n             template.process(null, outputStream);\n-        } catch (java.io.IOException | freemarker.template.TemplateException ex) {}\n+        } catch (java.io.IOException | freemarker.template.TemplateException ex) {\n+        }\n     }\n-    \n-    private void createAllCatPage() {\n-        File categoryFile = new File(fOutDir,\"index-all-cat.html\");\n-        try (OutputStreamWriter outputStream = new OutputStreamWriter (\n-                    new FileOutputStream (categoryFile), Charset.forName(OUTPUT_ENCODING).newEncoder()))\n-        {\n+\n+    private void createAllCatPage()\n+    {\n+        File categoryFile = new File(this.fOutDir, \"index-all-cat.html\");\n+        try (OutputStreamWriter outputStream = new OutputStreamWriter(\n+            new FileOutputStream(categoryFile), Charset.forName(OUTPUT_ENCODING).newEncoder())) {\n             SimpleHash root = new SimpleHash();\n-            root.put(\"categories\", allCategories);\n-            Template template = cfg.getTemplate(Templates.indexAllCat.fileName());\n+            root.put(\"categories\", this.allCategories);\n+            Template template = this.cfg.getTemplate(Templates.indexAllCat.fileName());\n             template.process(root, outputStream);\n-        } catch (java.io.IOException | freemarker.template.TemplateException ex) {}\n+        } catch (java.io.IOException | freemarker.template.TemplateException ex) {\n+        }\n     }\n-    \n-    private void createAllAlphaPage() {\n-        File allAlphaFile = new File(fOutDir,\"index-all-alpha.html\");\n-        try (OutputStreamWriter outputStream = new OutputStreamWriter (\n-                    new FileOutputStream (allAlphaFile), Charset.forName(OUTPUT_ENCODING).newEncoder()))\n-        {\n+\n+    private void createAllAlphaPage()\n+    {\n+        File allAlphaFile = new File(this.fOutDir, \"index-all-alpha.html\");\n+        try (OutputStreamWriter outputStream = new OutputStreamWriter(\n+            new FileOutputStream(allAlphaFile), Charset.forName(OUTPUT_ENCODING).newEncoder())) {\n             SimpleHash root = new SimpleHash();\n-            Collections.sort(allMacros, MACRO_COMPARATOR);\n-            root.put(\"macros\", allMacros);\n-            Template template = cfg.getTemplate(Templates.indexAllAlpha.fileName());\n+            Collections.sort(this.allMacros, MACRO_COMPARATOR);\n+            root.put(\"macros\", this.allMacros);\n+            Template template = this.cfg.getTemplate(Templates.indexAllAlpha.fileName());\n             template.process(root, outputStream);\n-        } catch (java.io.IOException | freemarker.template.TemplateException ex) {}\n+        } catch (java.io.IOException | freemarker.template.TemplateException ex) {\n+        }\n     }\n-    \n-    private void createOverviewPage() {\n-        File overviewFile = new File(fOutDir,\"overview.html\");\n-        try (OutputStreamWriter outputStream = new OutputStreamWriter (\n-                    new FileOutputStream (overviewFile), Charset.forName(OUTPUT_ENCODING).newEncoder()))\n-        {\n-            Template template = cfg.getTemplate(Templates.overview.fileName());\n-            Map<String, List> root = new HashMap<String, List>();\n-            root.put(\"files\",fParsedFiles);\n+\n+    private void createOverviewPage()\n+    {\n+        File overviewFile = new File(this.fOutDir, \"overview.html\");\n+        try (OutputStreamWriter outputStream = new OutputStreamWriter(\n+            new FileOutputStream(overviewFile), Charset.forName(OUTPUT_ENCODING).newEncoder())) {\n+            Template template = this.cfg.getTemplate(Templates.overview.fileName());\n+            Map<String, List> root = new HashMap<>();\n+            root.put(\"files\", this.fParsedFiles);\n             template.process(root, outputStream);\n-        } catch (java.io.IOException | freemarker.template.TemplateException ex) {}\n+        } catch (java.io.IOException | freemarker.template.TemplateException ex) {\n+        }\n     }\n-    \n-    private void createFileListPage(String suffix) {\n-        Collections.sort(fFiles, new Comparator<File>() {\n-            public int compare(File lhs, File rhs) {\n+\n+    private void createFileListPage(String suffix)\n+    {\n+        Collections.sort(this.fFiles, new Comparator<File>() {\n+            @Override\n+            public int compare(File lhs, File rhs)\n+            {\n                 return lhs.getName().compareTo(rhs.getName());\n             }\n         });\n-        \n-        File filelistFile = new File(fOutDir,\"files.html\");\n-        try (OutputStreamWriter outputStream = new OutputStreamWriter (\n-                    new FileOutputStream (filelistFile), Charset.forName(OUTPUT_ENCODING).newEncoder()))\n-        {\n+\n+        File filelistFile = new File(this.fOutDir, \"files.html\");\n+        try (OutputStreamWriter outputStream = new OutputStreamWriter(\n+            new FileOutputStream(filelistFile), Charset.forName(OUTPUT_ENCODING).newEncoder())) {\n             SimpleHash root = new SimpleHash();\n-            root.put(\"suffix\",suffix);\n-            root.put(\"files\",fFiles);\n-            Template template = cfg.getTemplate(Templates.filelist.fileName());\n+            root.put(\"suffix\", suffix);\n+            root.put(\"files\", this.fFiles);\n+            Template template = this.cfg.getTemplate(Templates.filelist.fileName());\n             template.process(root, outputStream);\n-        } catch (java.io.IOException | freemarker.template.TemplateException ex) {}\n+        } catch (java.io.IOException | freemarker.template.TemplateException ex) {\n+        }\n     }\n-    \n-    private Map<String, Object> createCommentedMacro(Macro macro, Comment comment, File file) {\n-        Map<String, Object> result = new HashMap<String, Object>();\n-        if( macro == null ) {\n+\n+    private Map<String, Object> createCommentedMacro(Macro macro, Comment comment, File file)\n+    {\n+        Map<String, Object> result = new HashMap<>();\n+        if (macro == null) {\n             throw new IllegalArgumentException(\"macro == null\");\n         }\n-        \n-        CategoryRegion cc = findCategory(macro);\n+\n+        CategoryRegion cc = this.findCategory(macro);\n         String cat = null;\n-        if(cc!=null) {\n+        if (cc != null) {\n             cat = cc.toString();\n         }\n-        \n-        result.putAll(parse(comment));\n-        result.put(\"category\",cat);\n-        result.put(\"name\",macro.getName());\n-        result.put(\"code\",macro.getSource());\n+\n+        result.putAll(this.parse(comment));\n+        result.put(\"category\", cat);\n+        result.put(\"name\", macro.getName());\n+        result.put(\"code\", macro.getSource());\n         result.put(\"isfunction\", new Boolean(macro.isFunction()));\n-        result.put(\"type\",macro.isFunction()?\"function\":\"macro\");\n-        result.put(\"arguments\",macro.getArgumentNames());\n+        result.put(\"type\", macro.isFunction() ? \"function\" : \"macro\");\n+        result.put(\"arguments\", macro.getArgumentNames());\n         result.put(\"catchall\", macro.getCatchAll());\n-        result.put(\"node\",new TemplateElementModel(macro));\n+        result.put(\"node\", new TemplateElementModel(macro));\n         result.put(\"filename\", file.getName());\n         return result;\n     }\n-    \n-    private Map<String, Serializable> parse(Comment comment) {\n-        Map<String, Serializable> result = new HashMap<String, Serializable>();\n-        \n-        \n-        // always return a hash, even if doesn't have any content\n-        if(null==comment) {\n-            return result;\n-        }\n-        \n-        Map<String, String> paramsCache = new HashMap<>();\n-        \n-        Matcher m;\n-        // remove leading hyphen (last hyphen of '<#---')\n-        String fixedComment = comment.getText().substring(1);\n-        StringBuffer bufText = new StringBuffer();\n-\n-        String[] lines = LINESPLIT_PATTERN.split(fixedComment);\n-        String line;\n-\n-        String lastParamName = \"\";\n-        for(int i = 0;i<lines.length;i++) {\n-            line = lines[i];\n-            if ((m = PARAM_PATTERN.matcher(line)).matches()) {\n-                lastParamName = m.group(1);\n-                paramsCache.put(lastParamName, m.group(2));\n-                \n-            } else if((m = AT_PATTERN.matcher(line)).matches()) {\n-                result.put(m.group(1),m.group(2));\n-                \n-            } else if ((m = TEXT_PATTERN.matcher(line)).matches()) {\n-                String text;\n-                if (line.matches(\"^\\\\s+.*$\")) {\n-                    // Line started with spaces, collapse them\n-                    // in a single one\n-                    text = \" \" + m.group(1);\n-                } else {\n-                    text = m.group(1);\n-                }\n-                text += \"\\n\";\n-                if (lastParamName.length() > 0) {\n-                    // We are on a @param block. Append text to it.\n-                    String paramDescription = paramsCache.get(lastParamName);\n-                    paramDescription += text;\n-                    paramsCache.put(lastParamName, paramDescription);\n-                \n-                } else {\n-                    bufText.append(text);\n-                }\n-                \n-            } else {\n-                // one can prove (with some automat theory) that the\n-                // TEXT_PATTERN regex matches *every* string. Under normal\n-                // circumstances this else block can never be reached.\n-                System.err.println(\"WARNING: reached unreachable point: \" + line);\n+\n+    private CategoryRegion findCategory(TemplateElement te)\n+    {\n+        Iterator<CategoryRegion> iter = this.regions.iterator();\n+        while (iter.hasNext()) {\n+            CategoryRegion cc = iter.next();\n+            if (cc.contains(te)) {\n+                return cc;\n             }\n         }\n-        String text = bufText.toString().replaceAll(\"\\n\",\"\");\n-        \n-        SimpleSequence params = new SimpleSequence();\n-        for (Entry<String, String> paramEntry : paramsCache.entrySet()) {\n-            SimpleHash param = new SimpleHash();\n-            param.put(\"name\", paramEntry.getKey());\n-            param.put(\"description\", paramEntry.getValue());\n-            params.add(param);\n-        }\n-        \n-        result.put(\"@param\",params);\n-        result.put(\"comment\",text);\n-        // extract first sentence for \"Macro and Function Summary\" table\n-        int endOfSentence = text.indexOf(\".\");\n-        if(endOfSentence>0) {\n-            result.put(\"short_comment\",text.substring(0,endOfSentence+1));\n-        } else {\n-            result.put(\"short_comment\",text);\n-        }\n-        \n-        return result;\n+        return null;\n     }\n-    \n-    private CategoryRegion findCategory(TemplateElement te) {\n-        Iterator<CategoryRegion> iter = regions.iterator();\n-        while (iter.hasNext())\n-        {\n-            CategoryRegion cc = iter.next();\n-            if(cc.contains(te)) return cc;\n+\n+    private Map<String, Serializable> parse(Comment comment)\n+    {\n+        String commentText = null;\n+        if (comment != null) {\n+            commentText = comment.getText();\n         }\n-        return null;\n+        return ParseFtlDocComment.parse(commentText);\n     }\n-    \n-    private class CategoryRegion{\n-        \n+\n+    private class CategoryRegion\n+    {\n         String name;\n         int begincol;\n         int beginline;\n         int endcol;\n         int endline;\n-        \n-        CategoryRegion (String name, int begincol, int beginline,\n-                        int endcol, int endline) {\n-            this.name=name;\n+\n+        CategoryRegion(String name, int begincol, int beginline,\n+            int endcol, int endline)\n+        {\n+            this.name = name;\n             this.begincol = begincol;\n             this.beginline = beginline;\n             this.endcol = endcol;\n             this.endline = endline;\n         }\n-        \n-        public boolean contains(TemplateElement te) {\n+\n+        public boolean contains(TemplateElement te)\n+        {\n             int bc = te.getBeginColumn();\n             int bl = te.getBeginLine();\n             int ec = te.getEndColumn();\n             int el = te.getEndLine();\n-            boolean checkStart = ((bl>beginline) || (bl==beginline && bc>begincol));\n-            boolean checkEnd = ((el<endline) || (el==endline && ec < endcol));\n-            return  (checkStart && checkEnd);\n+            boolean checkStart = ((bl > this.beginline) || (bl == this.beginline && bc > this.begincol));\n+            boolean checkEnd = ((el < this.endline) || (el == this.endline && ec < this.endcol));\n+            return (checkStart && checkEnd);\n         }\n-        \n-        public String toString() {\n-            return name;\n+\n+        @Override\n+        public String toString()\n+        {\n+            return this.name;\n         }\n     }\n }"
  },
  {
    "sha": "80a9023af0e397b9057d77e4f23796559e44e226",
    "filename": "src/main/java/freemarker/tools/ftldoc/ParseFtlDocComment.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/main/java/freemarker/tools/ftldoc/ParseFtlDocComment.java",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/main/java/freemarker/tools/ftldoc/ParseFtlDocComment.java",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/src/main/java/freemarker/tools/ftldoc/ParseFtlDocComment.java?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -0,0 +1,124 @@\n+/*\r\n+ * ParseFtlDocComment.java\r\n+ */\r\n+package freemarker.tools.ftldoc;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.regex.Matcher;\r\n+import java.util.regex.Pattern;\r\n+\r\n+import org.apache.commons.lang3.StringUtils;\r\n+\r\n+import freemarker.template.SimpleHash;\r\n+import freemarker.template.SimpleSequence;\r\n+\r\n+/**\r\n+ * Helper class to parse a Comment with FTLDoc anotations\r\n+ */\r\n+class ParseFtlDocComment\r\n+{\r\n+    private static final Pattern LINESPLIT_PATTERN = Pattern.compile(\"(\\\\r\\\\n)|(\\\\r)|(\\\\n)\");\r\n+\r\n+    // Regex that detectes a \"@param XXXX YYYY\", where group 1 is XXXX and group 2 it's YYYY\r\n+    private static final Pattern PARAM_PATTERN = Pattern.compile(\"^\\\\s*(?:--)?\\\\s*@param\\\\s*(\\\\w*)\\\\s*(.*)$\");\r\n+    // Regex that detectes a \"@XXXX YYYY\", where group 1 is XXXX and group 2 it's YYYY\r\n+    private static final Pattern AT_PATTERN = Pattern.compile(\"^\\\\s*(?:--)?\\\\s*(@\\\\w+)\\\\s*(.*)$\");\r\n+    // Regex that detectes a text line\r\n+    private static final Pattern TEXT_PATTERN = Pattern.compile(\"^\\\\s*(?:--)?(.*)$\");\r\n+\r\n+    private static final String PARAM_KEYWORD = \"@param\";\r\n+    private static final String DESCRIPTION = \"description\";\r\n+    private static final String NAME = \"name\";\r\n+    private static final String SHORT_COMMENT = \"short_comment\";\r\n+    private static final String COMMENT = \"comment\";\r\n+\r\n+    private ParseFtlDocComment()\r\n+    {\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses a string containg the comment text\r\n+     */\r\n+    static Map<String, Serializable> parse(String commentText)\r\n+    {\r\n+        // always return a hash, even if doesn't have any content\r\n+        if (StringUtils.isEmpty(commentText)) {\r\n+            return Collections.emptyMap();\r\n+        }\r\n+\r\n+        Map<String, Serializable> result = new HashMap<>();\r\n+        Map<String, String> paramsCache = new HashMap<>();\r\n+\r\n+        Matcher m;\r\n+        // remove leading hyphen (last hyphen of '<#---')\r\n+        String fixedComment = commentText.substring(1);\r\n+        StringBuffer bufText = new StringBuffer();\r\n+\r\n+        String[] lines = LINESPLIT_PATTERN.split(fixedComment);\r\n+        String line;\r\n+\r\n+        String lastParamName = \"\";\r\n+        for (String line2 : lines) {\r\n+            line = line2;\r\n+            if ((m = PARAM_PATTERN.matcher(line)).matches()) {\r\n+                lastParamName = m.group(1);\r\n+                paramsCache.put(lastParamName, m.group(2));\r\n+\r\n+            } else if ((m = AT_PATTERN.matcher(line)).matches()) {\r\n+                result.put(m.group(1), m.group(2));\r\n+\r\n+            } else if ((m = TEXT_PATTERN.matcher(line)).matches()) {\r\n+                String text;\r\n+                if (line.matches(\"^\\\\s+.*$\")) {\r\n+                    // Line started with spaces, collapse them\r\n+                    // in a single one\r\n+                    text = \" \" + m.group(1);\r\n+                } else {\r\n+                    text = m.group(1);\r\n+                }\r\n+                text += \"\\n\";\r\n+                if (lastParamName.length() > 0) {\r\n+                    // We are on a @param block. Append text to it.\r\n+                    String paramDescription = paramsCache.get(lastParamName);\r\n+                    paramDescription += text;\r\n+                    paramsCache.put(lastParamName, paramDescription);\r\n+\r\n+                } else {\r\n+                    bufText.append(text);\r\n+                }\r\n+\r\n+            } else {\r\n+                // one can prove (with some automat theory) that the\r\n+                // TEXT_PATTERN regex matches *every* string. Under normal\r\n+                // circumstances this else block can never be reached.\r\n+                System.err.println(\"WARNING: reached unreachable point: \" + line);\r\n+            }\r\n+        }\r\n+        String text = bufText.toString().replaceAll(\"\\n\", \"\");\r\n+\r\n+        SimpleSequence params = new SimpleSequence();\r\n+        for (Entry<String, String> paramEntry : paramsCache.entrySet()) {\r\n+            SimpleHash param = new SimpleHash();\r\n+            param.put(NAME, paramEntry.getKey());\r\n+            param.put(DESCRIPTION, paramEntry.getValue());\r\n+            params.add(param);\r\n+        }\r\n+\r\n+        result.put(PARAM_KEYWORD, params);\r\n+        result.put(COMMENT, text);\r\n+        // extract first sentence for \"Macro and Function Summary\" table\r\n+        int endOfSentence = text.indexOf(\".\");\r\n+        if (endOfSentence > 0) {\r\n+            result.put(SHORT_COMMENT, text.substring(0, endOfSentence + 1));\r\n+        } else {\r\n+            result.put(SHORT_COMMENT, text);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "b2301f959856ac5a09168177517d42218feda54d",
    "filename": "src/main/java/freemarker/tools/ftldoc/Templates.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/main/java/freemarker/tools/ftldoc/Templates.java",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/main/java/freemarker/tools/ftldoc/Templates.java",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/src/main/java/freemarker/tools/ftldoc/Templates.java?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -0,0 +1,29 @@\n+/*\r\n+ * Templates.java\r\n+ */\r\n+package freemarker.tools.ftldoc;\r\n+\r\n+/**\r\n+ * List of templates to be procesed to generated output documentation\r\n+ */\r\n+enum Templates\r\n+{\r\n+    file(\"file\"),\r\n+    index(\"index\"),\r\n+    indexAllCat(\"index-all-cat\"),\r\n+    indexAllAlpha(\"index-all-alpha\"),\r\n+    overview(\"overview\"),\r\n+    filelist(\"filelist\");\r\n+\r\n+    private final String fileName;\r\n+\r\n+    private Templates(String fileName)\r\n+    {\r\n+        this.fileName = fileName;\r\n+    }\r\n+\r\n+    public String fileName()\r\n+    {\r\n+        return this.fileName + FtlDoc.EXT_FTL;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "99bf532239fc39227f2a2a4222e61656b710d5f5",
    "filename": "src/test/groovy/freemarker/tools/ftldoc/FtlDocSpec.groovy",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/test/groovy/freemarker/tools/ftldoc/FtlDocSpec.groovy",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/test/groovy/freemarker/tools/ftldoc/FtlDocSpec.groovy",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/src/test/groovy/freemarker/tools/ftldoc/FtlDocSpec.groovy?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -0,0 +1,47 @@\n+/**\r\n+ * FtlDocSpec.groovy\r\n+ */\r\n+package freemarker.tools.ftldoc\r\n+\r\n+import spock.lang.Specification\r\n+\r\n+/**\r\n+ * Unit tests for FtlDoc class\r\n+ */\r\n+class FtlDocSpec extends Specification {\r\n+\r\n+    final temporalFolderString = new File(System.getProperty(\"java.io.tmpdir\"))\r\n+    final outputFolder = new File(temporalFolderString, \"/FtlDocSpec/\")\r\n+\r\n+    def setup() {\r\n+        outputFolder.mkdirs()\r\n+    }\r\n+\r\n+    def cleanup() {\r\n+        outputFolder.delete()\r\n+    }\r\n+\r\n+    def \"Generating output files\"() {\r\n+        given: \"A simple FTL file with FTLDoc markups\"\r\n+        List<File> files = [this.getFileResource(\"test/simple_test.ftl\")]\r\n+        def ftlDoc = new FtlDoc(files, outputFolder, null)\r\n+\r\n+        when: \"We run FtlDoc parsing\"\r\n+        ftlDoc.run()\r\n+\r\n+        then: \"Generates the expected output files on the output folder\"\r\n+        def outputFiles = outputFolder.list()\r\n+        outputFiles.contains(\"index.html\")\r\n+        outputFiles.contains(\"files.html\")\r\n+        outputFiles.contains(\"simple_test.ftl.html\")\r\n+        outputFiles.contains(\"overview.html\")\r\n+        outputFiles.contains(\"index-all-alpha.html\")\r\n+        outputFiles.contains(\"index-all-cat.html\")\r\n+\r\n+        (new File(outputFolder, \"simple_test.ftl.html\")).text == getFileResource(\"expected/simple_test.ftl.html\").text\r\n+    }\r\n+\r\n+    private File getFileResource(path) {\r\n+        return new File(getClass().getClassLoader().getResource(path).toURI())\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "eb2f48105a5ba65a448a91a3ccd2d76d1b88c825",
    "filename": "src/test/groovy/freemarker/tools/ftldoc/ParseFtlDocCommentSpec.groovy",
    "status": "added",
    "additions": 123,
    "deletions": 0,
    "changes": 123,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/test/groovy/freemarker/tools/ftldoc/ParseFtlDocCommentSpec.groovy",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/test/groovy/freemarker/tools/ftldoc/ParseFtlDocCommentSpec.groovy",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/src/test/groovy/freemarker/tools/ftldoc/ParseFtlDocCommentSpec.groovy?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -0,0 +1,123 @@\n+/**\r\n+ * ParseFtlDocCommentSpec.groovy\r\n+ */\r\n+package freemarker.tools.ftldoc\r\n+\r\n+import freemarker.template.SimpleHash\r\n+import freemarker.template.SimpleSequence\r\n+import spock.lang.Specification\r\n+import spock.lang.Unroll\r\n+\r\n+/**\r\n+ * Unit tests for ParseFtlDocComment class\r\n+ */\r\n+class ParseFtlDocCommentSpec extends Specification {\r\n+\r\n+    def \"Parsing a empty comment\"() {\r\n+        given:\r\n+        def emptyString = \"\"\r\n+\r\n+        when:\r\n+        def output = ParseFtlDocComment.parse(emptyString)\r\n+\r\n+        then:\r\n+        output != null\r\n+        output.isEmpty()\r\n+    }\r\n+\r\n+    @Unroll\r\n+    def \"Parsing #comment\"() {\r\n+        given:\r\n+        def fullComment = \"-\" + comment\r\n+\r\n+        when:\r\n+        def output = ParseFtlDocComment.parse(fullComment)\r\n+\r\n+        then:\r\n+        !(output.isEmpty())\r\n+        output.get(\"short_comment\") != null\r\n+        output.get(\"comment\") != null\r\n+        def params = output.get(\"@param\") as SimpleSequence\r\n+        def param = params.get(0) as SimpleHash\r\n+        param.get(\"name\").toString() == name\r\n+        param.get(\"description\").toString() == description\r\n+\r\n+        where:\r\n+        comment                                                             || name             | description\r\n+        \"@param arg Description\"                                            || \"arg\"            | \"Description\"\r\n+        \"          @param arg Description\"                                  || \"arg\"            | \"Description\"\r\n+        \"@param    arg Description\"                                         || \"arg\"            | \"Description\"\r\n+        \"@param arg        Description\"                                     || \"arg\"            | \"Description\"\r\n+        \"@param arg2 Ludo ergo sum\"                                         || \"arg2\"           | \"Ludo ergo sum\"\r\n+    }\r\n+\r\n+    @Unroll\r\n+    def \"Parsing #keywordComment\"() {\r\n+        given:\r\n+        def fullComment = \"-\" + keywordComment\r\n+\r\n+        when:\r\n+        def output = ParseFtlDocComment.parse(fullComment)\r\n+\r\n+        then:\r\n+        !(output.isEmpty())\r\n+        output.get(\"short_comment\") != null\r\n+        output.get(\"comment\") != null\r\n+        output.get(\"@\" + keyword).toString()== text\r\n+\r\n+        where:\r\n+        keywordComment                                                      || keyword          | text\r\n+        \"@author Fulano\"                                                    || \"author\"         | \"Fulano\"\r\n+        \"   @author     Fulano\"                                             || \"author\"         | \"Fulano\"\r\n+        \"@copyright 2021 Mocosoft Inc.\"                                     || \"copyright\"      | \"2021 Mocosoft Inc.\"\r\n+    }\r\n+\r\n+    def \"Multiline @param\"() {\r\n+        given:\r\n+        def fullComment = \"\"\"-\r\n+    @param arg Long description\r\n+        that continues on another line\r\n+\"\"\"\r\n+\r\n+        when:\r\n+        def output = ParseFtlDocComment.parse(fullComment)\r\n+\r\n+        then:\r\n+        !(output.isEmpty())\r\n+        output.get(\"short_comment\") != null\r\n+        output.get(\"comment\") != null\r\n+        def params = output.get(\"@param\") as SimpleSequence\r\n+        def param = params.get(0) as SimpleHash\r\n+        param.get(\"name\").toString() == \"arg\"\r\n+        param.get(\"description\").toString() == \"Long description that continues on another line\\n\"\r\n+    }\r\n+\r\n+    def \"Mixed @param, @keyword and alone comments\"() {\r\n+        given:\r\n+        def fullComment = \"\"\"-\r\n+-- This is a function.\r\n+--\r\n+-- Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\r\n+-- aliqua.\r\n+--\r\n+-- @author Someone\r\n+--\r\n+-- @param arg Long description\r\n+--      that continues on another line\r\n+-- @return something\r\n+\"\"\"\r\n+\r\n+        when:\r\n+        def output = ParseFtlDocComment.parse(fullComment)\r\n+\r\n+        then:\r\n+        !(output.isEmpty())\r\n+        output.get(\"short_comment\").toString() == \" This is a function.\"\r\n+        output.get(\"comment\").toString() == \" This is a function. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\r\n+        output.get(\"@author\").toString()== \"Someone\"\r\n+        def params = output.get(\"@param\") as SimpleSequence\r\n+        def param = params.get(0) as SimpleHash\r\n+        param.get(\"name\").toString() == \"arg\"\r\n+        param.get(\"description\").toString() == \"Long description      that continues on another line\\n\"\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5a53b99eeab1ce4239f2a2a71dd1fb2d0771b70b",
    "filename": "src/test/resources/expected/simple_test.ftl.html",
    "status": "added",
    "additions": 776,
    "deletions": 0,
    "changes": 776,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/test/resources/expected/simple_test.ftl.html",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/test/resources/expected/simple_test.ftl.html",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/src/test/resources/expected/simple_test.ftl.html?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -0,0 +1,776 @@\n+\n+\n+<html>\n+<head>\n+    <meta charset=\"UTF-8\" />\n+    <title>ftldoc</title>\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"eclipse.css\" />\n+    <style>\n+        table {\n+            width: 100%;\n+        }\n+        td {\n+            background-color: White;\n+        }\n+        td.heading {\n+            padding: 3px;\n+            font-weight: bold;\n+            font-size: 18px;\n+            background-color: #CCCCFF;\n+        }\n+        td.category {\n+            padding: 3px;\n+            font-weight: bold;\n+            font-size: 14px;\n+            background-color: #DDDDFF;\n+        }\n+        div.sourcecode {\n+            display: none;\n+            border : 1px solid Black;\n+            background-color : #DDDDDD; /* #E8E8E8; */\n+            padding : 3px;\n+            margin-top : 8px;\n+        }\n+\n+\n+        span {font-family:Courier; font-size:12px}\n+        span.directive {color:blue}\n+        span.userdirective {color:red}\n+        span.interpolation {color:green}\n+        span.textblock {color:black}\n+        span.comment {color:brown}\n+    </style>\n+    <script language=\"javascript\">\n+        function toggle(id) {\n+            elem = document.getElementById(id);\n+            if(elem.style.display==\"block\") {\n+                elem.style.display=\"none\";\n+            } else {\n+                elem.style.display=\"block\";\n+            }\n+        }\n+\n+        function setTitle() {\n+            parent.document.title=\"simple_test.ftl\";\n+        }\n+    </script>\n+</head>\n+<body onLoad=\"setTitle();\">\n+\n+\n+\n+<div style=\"padding: 3px; font-weight: bold; background-color: #DDDDFF;\">\n+    <a href=\"overview.html\">Overview</a>\n+    <a href=\"index-all-cat.html\">Index (categorical)</a>\n+    <a href=\"index-all-alpha.html\">Index (alphabetical)</a>\n+</div>\n+\n+\n+\n+<h3>simple_test.ftl</h3>\n+\n+     File header<br>\n+\n+<dl>\n+    \n+    \n+\n+    \n+    \n+\n+</dl>\n+\n+\n+\n+<table border=\"1\" cellpadding=\"4\">\n+    <tr><td colspan=\"2\" class=\"heading\">Macro and Function Summary</td></tr>\n+        \n+            \n+                <tr><td colspan=\"2\" class=\"category\">\n+                \n+                    Category Opening a section\n+                \n+                </td></tr>\n+                \n+                    <tr>\n+                        <td width=\"100px\" valign=\"top\">\n+                            <code>macro</code>\n+                        </td>\n+                        <td>\n+                            <dl>\n+                                <dt>\n+                                    <code>\n+                                        <b><a href=\"#putOnArray\">\n+                                            putOnArray</a>\n+                                        </b>\n+                                        \n+    \n+        \n+            arrayVar\n+        \n+            content\n+        \n+    \n+\n+                                    </code>\n+                                </dt>\n+                                <dd>\n+                                     Macro that put a value on a array\n+                                </dd>\n+                            </dl>\n+                        </td>\n+                    </tr>\n+                \n+            \n+        \n+            \n+                <tr><td colspan=\"2\" class=\"category\">\n+                \n+                    Category Opening another section\n+                \n+                </td></tr>\n+                \n+                    <tr>\n+                        <td width=\"100px\" valign=\"top\">\n+                            <code>macro</code>\n+                        </td>\n+                        <td>\n+                            <dl>\n+                                <dt>\n+                                    <code>\n+                                        <b><a href=\"#carry_atribs\">\n+                                            carry_atribs</a>\n+                                        </b>\n+                                        \n+    \n+        \n+            vars\n+        \n+            exclude\n+        \n+    \n+\n+                                    </code>\n+                                </dt>\n+                                <dd>\n+                                     Macro to generate HTML attributes from a hash cintaint <AttributeName : Value> Attribute names are normalized, replacing '_' by '-'\n+                                </dd>\n+                            </dl>\n+                        </td>\n+                    </tr>\n+                \n+                    <tr>\n+                        <td width=\"100px\" valign=\"top\">\n+                            <code>macro</code>\n+                        </td>\n+                        <td>\n+                            <dl>\n+                                <dt>\n+                                    <code>\n+                                        <b><a href=\"#data_atribs\">\n+                                            data_atribs</a>\n+                                        </b>\n+                                        \n+    \n+        \n+            data\n+        \n+    \n+\n+                                    </code>\n+                                </dt>\n+                                <dd>\n+                                     Macro to generate data-XXX HTML attributes\n+                                </dd>\n+                            </dl>\n+                        </td>\n+                    </tr>\n+                \n+                    <tr>\n+                        <td width=\"100px\" valign=\"top\">\n+                            <code>function</code>\n+                        </td>\n+                        <td>\n+                            <dl>\n+                                <dt>\n+                                    <code>\n+                                        <b><a href=\"#iif\">\n+                                            iif</a>\n+                                        </b>\n+                                        \n+    \n+        (\n+        \n+            condicion\n+            ,\n+        \n+            valor1\n+            ,\n+        \n+            valor2\n+            \n+        \n+        )\n+    \n+\n+                                    </code>\n+                                </dt>\n+                                <dd>\n+                                     Function that emulates C/Java '?' operator\n+                                </dd>\n+                            </dl>\n+                        </td>\n+                    </tr>\n+                \n+                    <tr>\n+                        <td width=\"100px\" valign=\"top\">\n+                            <code>function</code>\n+                        </td>\n+                        <td>\n+                            <dl>\n+                                <dt>\n+                                    <code>\n+                                        <b><a href=\"#isStringNumber\">\n+                                            isStringNumber</a>\n+                                        </b>\n+                                        \n+    \n+        (\n+        \n+            variable\n+            \n+        \n+        )\n+    \n+\n+                                    </code>\n+                                </dt>\n+                                <dd>\n+                                     Checks if a String value it's a number\n+                                </dd>\n+                            </dl>\n+                        </td>\n+                    </tr>\n+                \n+                    <tr>\n+                        <td width=\"100px\" valign=\"top\">\n+                            <code>function</code>\n+                        </td>\n+                        <td>\n+                            <dl>\n+                                <dt>\n+                                    <code>\n+                                        <b><a href=\"#join\">\n+                                            join</a>\n+                                        </b>\n+                                        \n+    \n+        (\n+        \n+            seq\n+            ,\n+        \n+            separator\n+            \n+        \n+        )\n+    \n+\n+                                    </code>\n+                                </dt>\n+                                <dd>\n+                                     Function that generates a string from a sequence, putting a separator bettwen elements\n+                                </dd>\n+                            </dl>\n+                        </td>\n+                    </tr>\n+                \n+                    <tr>\n+                        <td width=\"100px\" valign=\"top\">\n+                            <code>function</code>\n+                        </td>\n+                        <td>\n+                            <dl>\n+                                <dt>\n+                                    <code>\n+                                        <b><a href=\"#toBool\">\n+                                            toBool</a>\n+                                        </b>\n+                                        \n+    \n+        (\n+        \n+            input\n+            \n+        \n+        )\n+    \n+\n+                                    </code>\n+                                </dt>\n+                                <dd>\n+                                     Function that converts a value to a Boolean\n+                                </dd>\n+                            </dl>\n+                        </td>\n+                    </tr>\n+                \n+            \n+        \n+</table>\n+\n+\n+<br>\n+\n+\n+<table border=\"1\" cellpadding=\"4\">\n+    <tr><td colspan=\"2\" class=\"heading\">Macro and Function Detail</td></tr>\n+</table>\n+\n+    <dl>\n+        <dt><code>macro <b><a name=\"carry_atribs\">carry_atribs</a></b>\n+                \n+    \n+        \n+            vars\n+        \n+            exclude\n+        \n+    \n+\n+        </code></dt>\n+        <dd>\n+            <br>\n+        \n+            \n+                 Macro to generate HTML attributes from a hash cintaint <AttributeName : Value> Attribute names are normalized, replacing '_' by '-'<br><br>\n+            \n+            <dl>\n+                \n+    \n+        <dt><b>Category</b></dt>\n+        <dd>Opening another section</dd>\n+    \n+\n+                \n+    \n+        <dt><b>Parameters</b></dt>\n+        <dd>\n+            \n+                <code>exclude</code> - (Optional) A list of attrbute to be ignored \n+<br>\n+            \n+                <code>vars</code> - {Hash} Map with pais attribute name - value<br>\n+            \n+        </dd>\n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    <dt><a href=\"javascript:toggle('sc_carry_atribs');\">Source Code</a></dt>\n+    <dd>\n+        <div class=\"sourcecode\" id=\"sc_carry_atribs\">\n+            \n+\n+\n+\n+<span class=\"directive\">&lt;#macro&nbsp;carry_atribs&nbsp;vars&nbsp;exclude=[]&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"userdirective\">&lt;@compress&nbsp;single_line=true&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;vars?is_sequence&gt;</span><span class=\"directive\">&lt;#return&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#list&nbsp;vars?keys&nbsp;as&nbsp;k&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;!exclude?seq_contains(k)&nbsp;&amp;&amp;&nbsp;(k&nbsp;!=&nbsp;&quot;temp&quot;)\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;(k&nbsp;!=&nbsp;&quot;data&quot;)&nbsp;&amp;&amp;&nbsp;(k&nbsp;!=&nbsp;&quot;attrs&quot;)&nbsp;&amp;&amp;&nbsp;(k&nbsp;!=&nbsp;&quot;dynattrs&quot;)&nbsp;&amp;&amp;&nbsp;(k&nbsp;!=&nbsp;&quot;aria&quot;)&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;vars[k]?is_sequence&gt;</span><span class=\"textblock\">\r<br></span><span class=\"directive\">&lt;#if&nbsp;vars[k]?size&nbsp;&amp;gt;&nbsp;0&gt;&lt;#t&gt;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"interpolation\">${k?replace(&#39;_&#39;,&nbsp;&#39;-&#39;)}</span><span class=\"textblock\">=&quot;</span><span class=\"directive\">&lt;#list&nbsp;vars[k]&nbsp;as&nbsp;temp&gt;&lt;#t&gt;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;temp&nbsp;!=&nbsp;&quot;&quot;&gt;&lt;#t&gt;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;temp?is_number&nbsp;||&nbsp;temp?is_boolean&nbsp;&gt;</span><span class=\"directive\">&lt;#local&nbsp;temp=temp?c&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"interpolation\">${temp}</span><span class=\"textblock\">&nbsp;</span><span class=\"directive\">&lt;#t&gt;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/#if&gt;</span><span class=\"directive\">&lt;#t&gt;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/#list&gt;</span><span class=\"textblock\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;</span><span class=\"textblock\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#else&gt;</span><span class=\"textblock\">\r<br></span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;vars[k]?is_number&nbsp;||&nbsp;vars[k]?is_boolean&nbsp;&gt;</span><span class=\"directive\">&lt;#local&nbsp;temp=vars[k]?c&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#t&gt;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#else&gt;</span><span class=\"directive\">&lt;#local&nbsp;temp&nbsp;=&nbsp;vars[k]?string&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#t&gt;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;temp&nbsp;!=&nbsp;&quot;&quot;&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"interpolation\">${k?replace(&#39;_&#39;,&nbsp;&#39;-&#39;)}</span><span class=\"textblock\">=&quot;</span><span class=\"interpolation\">${temp}</span><span class=\"textblock\">&quot;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#list&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"userdirective\">&lt;/@compress&gt;</span><span class=\"textblock\">\r<br></span><span class=\"directive\">&lt;/#macro&gt;</span>\n+\n+\n+\n+        </div>\n+    </dd>\n+\n+            </dl>\n+        </dd>\n+    </dl>\n+    <hr>\n+\n+    <dl>\n+        <dt><code>macro <b><a name=\"data_atribs\">data_atribs</a></b>\n+                \n+    \n+        \n+            data\n+        \n+    \n+\n+        </code></dt>\n+        <dd>\n+            <br>\n+        \n+            \n+                 Macro to generate data-XXX HTML attributes<br><br>\n+            \n+            <dl>\n+                \n+    \n+        <dt><b>Category</b></dt>\n+        <dd>Opening another section</dd>\n+    \n+\n+                \n+    \n+        <dt><b>Parameters</b></dt>\n+        <dd>\n+            \n+                <code>data</code> - {Hash} Map with pais XXX field - value \n+<br>\n+            \n+        </dd>\n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    <dt><a href=\"javascript:toggle('sc_data_atribs');\">Source Code</a></dt>\n+    <dd>\n+        <div class=\"sourcecode\" id=\"sc_data_atribs\">\n+            \n+\n+\n+\n+<span class=\"directive\">&lt;#macro&nbsp;data_atribs&nbsp;data={}&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;data?is_hash&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#list&nbsp;data&nbsp;as&nbsp;key,&nbsp;value&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;value?is_number&nbsp;||&nbsp;value?is_boolean&gt;</span><span class=\"directive\">&lt;#local&nbsp;temp=value?c&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"directive\"></span><span class=\"directive\">&lt;#else&gt;</span><span class=\"directive\">&lt;#local&nbsp;temp=value?string&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data-</span><span class=\"interpolation\">${key}</span><span class=\"textblock\">=&quot;</span><span class=\"interpolation\">${temp}</span><span class=\"textblock\">&quot;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#list&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br></span><span class=\"directive\">&lt;/#macro&gt;</span>\n+\n+\n+\n+        </div>\n+    </dd>\n+\n+            </dl>\n+        </dd>\n+    </dl>\n+    <hr>\n+\n+    <dl>\n+        <dt><code>function <b><a name=\"iif\">iif</a></b>\n+                \n+    \n+        (\n+        \n+            condicion\n+            ,\n+        \n+            valor1\n+            ,\n+        \n+            valor2\n+            \n+        \n+        )\n+    \n+\n+        </code></dt>\n+        <dd>\n+            <br>\n+        \n+            \n+                 Function that emulates C/Java '?' operator<br><br>\n+            \n+            <dl>\n+                \n+    \n+        <dt><b>Category</b></dt>\n+        <dd>Opening another section</dd>\n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    <dt><a href=\"javascript:toggle('sc_iif');\">Source Code</a></dt>\n+    <dd>\n+        <div class=\"sourcecode\" id=\"sc_iif\">\n+            \n+\n+\n+\n+<span class=\"directive\">&lt;#function&nbsp;iif&nbsp;condicion&nbsp;valor1&nbsp;valor2&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;condicion&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;valor1&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#else&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;valor2&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br></span><span class=\"directive\">&lt;/#function&gt;</span>\n+\n+\n+\n+        </div>\n+    </dd>\n+\n+            </dl>\n+        </dd>\n+    </dl>\n+    <hr>\n+\n+    <dl>\n+        <dt><code>function <b><a name=\"isStringNumber\">isStringNumber</a></b>\n+                \n+    \n+        (\n+        \n+            variable\n+            \n+        \n+        )\n+    \n+\n+        </code></dt>\n+        <dd>\n+            <br>\n+        \n+            \n+                 Checks if a String value it's a number<br><br>\n+            \n+            <dl>\n+                \n+    \n+        <dt><b>Category</b></dt>\n+        <dd>Opening another section</dd>\n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    <dt><a href=\"javascript:toggle('sc_isStringNumber');\">Source Code</a></dt>\n+    <dd>\n+        <div class=\"sourcecode\" id=\"sc_isStringNumber\">\n+            \n+\n+\n+\n+<span class=\"directive\">&lt;#function&nbsp;isStringNumber&nbsp;variable&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#attempt&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#assign&nbsp;numberVariable&nbsp;=&nbsp;variable?number&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;numberVariable?is_number&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#recover&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;false&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#attempt&gt;</span><span class=\"textblock\">\r<br></span><span class=\"directive\">&lt;/#function&gt;</span>\n+\n+\n+\n+        </div>\n+    </dd>\n+\n+            </dl>\n+        </dd>\n+    </dl>\n+    <hr>\n+\n+    <dl>\n+        <dt><code>function <b><a name=\"join\">join</a></b>\n+                \n+    \n+        (\n+        \n+            seq\n+            ,\n+        \n+            separator\n+            \n+        \n+        )\n+    \n+\n+        </code></dt>\n+        <dd>\n+            <br>\n+        \n+            \n+                 Function that generates a string from a sequence, putting a separator bettwen elements<br><br>\n+            \n+            <dl>\n+                \n+    \n+        <dt><b>Category</b></dt>\n+        <dd>Opening another section</dd>\n+    \n+\n+                \n+    \n+        <dt><b>Parameters</b></dt>\n+        <dd>\n+            \n+                <code>separador</code> - (Optional) Seperator element. By default it's a space (\" \")<br>\n+            \n+                <code>seq</code> - {Sequence} Sequecen to be converted to String<br>\n+            \n+        </dd>\n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    <dt><a href=\"javascript:toggle('sc_join');\">Source Code</a></dt>\n+    <dd>\n+        <div class=\"sourcecode\" id=\"sc_join\">\n+            \n+\n+\n+\n+<span class=\"directive\">&lt;#function&nbsp;join&nbsp;seq&nbsp;separator&nbsp;=&nbsp;&quot;&nbsp;&quot;&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#local&nbsp;res&nbsp;=&nbsp;&quot;&quot;&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#list&nbsp;seq&nbsp;as&nbsp;e&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;e_index&nbsp;==&nbsp;0&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#local&nbsp;res&nbsp;=&nbsp;res&nbsp;+&nbsp;e&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#else&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#local&nbsp;res&nbsp;=&nbsp;res&nbsp;+&nbsp;separator&nbsp;+&nbsp;e&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#list&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;res&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br></span><span class=\"directive\">&lt;/#function&gt;</span>\n+\n+\n+\n+        </div>\n+    </dd>\n+\n+            </dl>\n+        </dd>\n+    </dl>\n+    <hr>\n+\n+    <dl>\n+        <dt><code>macro <b><a name=\"putOnArray\">putOnArray</a></b>\n+                \n+    \n+        \n+            arrayVar\n+        \n+            content\n+        \n+    \n+\n+        </code></dt>\n+        <dd>\n+            <br>\n+        \n+            \n+                 Macro that put a value on a array<br><br>\n+            \n+            <dl>\n+                \n+    \n+        <dt><b>Category</b></dt>\n+        <dd>Opening a section</dd>\n+    \n+\n+                \n+    \n+        <dt><b>Parameters</b></dt>\n+        <dd>\n+            \n+                <code>arrayVar</code> - {String} Variable name that must be a sequence<br>\n+            \n+                <code>content</code> - (Optinal) Content to be appened to the array pointer by arrayVar<br>\n+            \n+        </dd>\n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    <dt><a href=\"javascript:toggle('sc_putOnArray');\">Source Code</a></dt>\n+    <dd>\n+        <div class=\"sourcecode\" id=\"sc_putOnArray\">\n+            \n+\n+\n+\n+<span class=\"directive\">&lt;#macro&nbsp;putOnArray&nbsp;arrayVar&nbsp;content=&quot;&quot;&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;content?is_string&nbsp;&amp;&amp;&nbsp;content&nbsp;==&nbsp;&quot;&quot;&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#local&nbsp;content&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#nested&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#local&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment\">&lt;#--&nbsp;freemarker&nbsp;parseando&nbsp;una&nbsp;cadena&nbsp;para&nbsp;generar&nbsp;codigo&nbsp;freemarker&nbsp;que&nbsp;va&nbsp;a&nbsp;ejecutar&nbsp;(metaprograming)&nbsp;--&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;content?is_string&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"userdirective\">&lt;@&quot;&lt;#assign&nbsp;${arrayVar}&nbsp;=&nbsp;(${arrayVar}![])&nbsp;+&nbsp;[content]&gt;&quot;?interpret&nbsp;/&gt;</span><span class=\"userdirective\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#elseif&nbsp;content?is_enumerable&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"userdirective\">&lt;@&quot;&lt;#assign&nbsp;${arrayVar}&nbsp;=&nbsp;(${arrayVar}![])&nbsp;+&nbsp;content&gt;&quot;?interpret&nbsp;/&gt;</span><span class=\"userdirective\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br></span><span class=\"directive\">&lt;/#macro&gt;</span>\n+\n+\n+\n+        </div>\n+    </dd>\n+\n+            </dl>\n+        </dd>\n+    </dl>\n+    <hr>\n+\n+    <dl>\n+        <dt><code>function <b><a name=\"toBool\">toBool</a></b>\n+                \n+    \n+        (\n+        \n+            input\n+            \n+        \n+        )\n+    \n+\n+        </code></dt>\n+        <dd>\n+            <br>\n+        \n+            \n+                 Function that converts a value to a Boolean<br><br>\n+            \n+            <dl>\n+                \n+    \n+        <dt><b>Category</b></dt>\n+        <dd>Opening another section</dd>\n+    \n+\n+                \n+    \n+        <dt><b>Parameters</b></dt>\n+        <dd>\n+            \n+                <code>Input</code> - String or Number to be converted to Boolean<br>\n+            \n+        </dd>\n+    \n+\n+                \n+    \n+\n+                \n+    \n+\n+                \n+    <dt><a href=\"javascript:toggle('sc_toBool');\">Source Code</a></dt>\n+    <dd>\n+        <div class=\"sourcecode\" id=\"sc_toBool\">\n+            \n+\n+\n+\n+<span class=\"directive\">&lt;#function&nbsp;toBool&nbsp;input&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;input?is_boolean&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;input&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment\">&lt;#--&nbsp;Number&nbsp;--&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;input?is_number&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;input&nbsp;!=&nbsp;0&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;true&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#else&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;false&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment\">&lt;#--&nbsp;String&nbsp;--&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#if&nbsp;input?is_string&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;input&nbsp;==&nbsp;&quot;&quot;&nbsp;||&nbsp;input&nbsp;==&nbsp;&quot;false&quot;||&nbsp;input&nbsp;==&nbsp;&quot;not&quot;&nbsp;&nbsp;||&nbsp;input&nbsp;==&nbsp;&quot;no&quot;&nbsp;||&nbsp;input&nbsp;==&nbsp;&quot;n&quot;&nbsp;||&nbsp;input&nbsp;==&nbsp;&quot;f&quot;&nbsp;&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;false&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#else&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;true&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment\">&lt;#--&nbsp;!=&nbsp;Null&nbsp;or&nbsp;not&nbsp;has&nbsp;content&nbsp;--&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#if&nbsp;input??&nbsp;&amp;&amp;&nbsp;input?has_content&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;true&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;#else&gt;</span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\">&lt;#return&nbsp;false&nbsp;/&gt;</span><span class=\"directive\"></span><span class=\"textblock\">\r<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"directive\"></span><span class=\"directive\">&lt;/#if&gt;</span><span class=\"textblock\">\r<br></span><span class=\"directive\">&lt;/#function&gt;</span>\n+\n+\n+\n+        </div>\n+    </dd>\n+\n+            </dl>\n+        </dd>\n+    </dl>\n+    \n+\n+\n+\n+\n+</body>\n+</html>\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "ce4cd644306e93e6817b9f2a043b90229c2edddd",
    "filename": "src/test/resources/test/simple_test.ftl",
    "status": "added",
    "additions": 159,
    "deletions": 0,
    "changes": 159,
    "blob_url": "https://github.com/FunnelbackPtyLtd/ftldoc/blob/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/test/resources/test/simple_test.ftl",
    "raw_url": "https://github.com/FunnelbackPtyLtd/ftldoc/raw/9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a/src/test/resources/test/simple_test.ftl",
    "contents_url": "https://api.github.com/repos/FunnelbackPtyLtd/ftldoc/contents/src/test/resources/test/simple_test.ftl?ref=9cbb67a52c2c6ec16fea3d46a121c9e76e96fb9a",
    "patch": "@@ -0,0 +1,159 @@\n+<#ftl encoding=\"ISO-8859-1\" />\r\n+<#---\r\n+    File header\r\n+    @copyright bla bla bla 2021\r\n+-->\r\n+\r\n+<#--********************************************************************************** -->\r\n+<#-- @begin Opening a section -->\r\n+<#--********************************************************************************** -->\r\n+\r\n+<#---\r\n+    Macro that put a value on a array\r\n+    @param arrayVar {String} Variable name that must be a sequence\r\n+    @param content (Optinal) Content to be appened to the array pointer by arrayVar\r\n+-->\r\n+<#macro putOnArray arrayVar content=\"\">\r\n+    <#if content?is_string && content == \"\">\r\n+        <#local content>\r\n+            <#nested />\r\n+        </#local>\r\n+    </#if>\r\n+    <#-- freemarker parseando una cadena para generar codigo freemarker que va a ejecutar (metaprograming) -->\r\n+    <#if content?is_string>\r\n+        <@\"<#assign ${arrayVar} = (${arrayVar}![]) + [content]>\"?interpret />\r\n+    <#elseif content?is_enumerable>\r\n+        <@\"<#assign ${arrayVar} = (${arrayVar}![]) + content>\"?interpret />\r\n+    </#if>\r\n+</#macro>\r\n+\r\n+<#-- @end -->\r\n+\r\n+<#--*********************************************************************** -->\r\n+<#-- @begin Opening another section -->\r\n+<#--*********************************************************************** -->\r\n+<#---\r\n+    Macro to generate HTML attributes from a hash cintaint <AttributeName : Value>\r\n+    Attribute names are normalized, replacing '_' by '-'\r\n+    @param vars {Hash} Map with pais attribute name - value\r\n+    @param exclude (Optional) A list of attrbute to be ignored\r\n+ -->\r\n+<#macro carry_atribs vars exclude=[]>\r\n+    <@compress single_line=true>\r\n+        <#if vars?is_sequence><#return /></#if>\r\n+        <#list vars?keys as k>\r\n+            <#if !exclude?seq_contains(k) && (k != \"temp\")\r\n+                    && (k != \"data\") && (k != \"attrs\") && (k != \"dynattrs\") && (k != \"aria\")>\r\n+                <#if vars[k]?is_sequence>\r\n+                    <#if vars[k]?size &gt; 0><#t>\r\n+                    ${k?replace('_', '-')}=\"<#t>\r\n+                    <#list vars[k] as temp><#t>\r\n+                        <#if temp != \"\"><#t>\r\n+                            <#if temp?is_number || temp?is_boolean ><#local temp=temp?c /></#if><#t>\r\n+                            ${temp} <#t>\r\n+                        </#if><#t>\r\n+                    </#list><#t>\r\n+                    \"<#t>\r\n+                    </#if>\r\n+                <#else>\r\n+                    <#if vars[k]?is_number || vars[k]?is_boolean ><#local temp=vars[k]?c /><#t>\r\n+                    <#else><#local temp = vars[k]?string /><#t>\r\n+                    </#if><#t>\r\n+                    <#if temp != \"\">\r\n+                        ${k?replace('_', '-')}=\"${temp}\"\r\n+                    </#if>\r\n+                </#if>\r\n+            </#if>\r\n+        </#list>\r\n+    </@compress>\r\n+</#macro>\r\n+\r\n+<#---\r\n+    Macro to generate data-XXX HTML attributes\r\n+    @param data {Hash} Map with pais XXX field - value\r\n+ -->\r\n+<#macro data_atribs data={}>\r\n+    <#if data?is_hash>\r\n+        <#list data as key, value>\r\n+            <#if value?is_number || value?is_boolean><#local temp=value?c /><#else><#local temp=value?string /></#if>\r\n+            data-${key}=\"${temp}\"\r\n+        </#list>\r\n+    </#if>\r\n+</#macro>\r\n+\r\n+<#---\r\n+    Function that emulates C/Java '?' operator\r\n+-->\r\n+<#function iif condicion valor1 valor2>\r\n+    <#if condicion>\r\n+        <#return valor1 />\r\n+    <#else>\r\n+        <#return valor2 />\r\n+    </#if>\r\n+</#function>\r\n+\r\n+<#---\r\n+    Function that generates a string from a sequence, putting a separator bettwen elements\r\n+    @param seq {Sequence} Sequecen to be converted to String\r\n+    @param separador (Optional) Seperator element. By default it's a space (\" \")\r\n+-->\r\n+<#function join seq separator = \" \">\r\n+    <#local res = \"\" />\r\n+    <#list seq as e>\r\n+        <#if e_index == 0>\r\n+            <#local res = res + e />\r\n+        <#else>\r\n+            <#local res = res + separator + e />\r\n+        </#if>\r\n+    </#list>\r\n+    <#return res />\r\n+</#function>\r\n+\r\n+<#---\r\n+    Function that converts a value to a Boolean\r\n+    @param Input String or Number to be converted to Boolean\r\n+-->\r\n+<#function toBool input>\r\n+    <#if input?is_boolean>\r\n+        <#return input />\r\n+    </#if>\r\n+\r\n+    <#-- Number -->\r\n+    <#if input?is_number>\r\n+        <#if input != 0>\r\n+            <#return true />\r\n+        <#else>\r\n+            <#return false />\r\n+        </#if>\r\n+    </#if>\r\n+\r\n+    <#-- String -->\r\n+    <#if input?is_string>\r\n+        <#if input == \"\" || input == \"false\"|| input == \"not\"  || input == \"no\" || input == \"n\" || input == \"f\" >\r\n+            <#return false />\r\n+        <#else>\r\n+            <#return true />\r\n+        </#if>\r\n+    </#if>\r\n+    \r\n+    <#-- != Null or not has content -->\r\n+    <#if input?? && input?has_content>\r\n+        <#return true />\r\n+    <#else>\r\n+        <#return false />\r\n+    </#if>\r\n+</#function>\r\n+\r\n+<#---\r\n+    Checks if a String value it's a number\r\n+-->\r\n+<#function isStringNumber variable>\r\n+    <#attempt>\r\n+      <#assign numberVariable = variable?number />\r\n+      <#return numberVariable?is_number />\r\n+    <#recover>\r\n+      <#return false />\r\n+    </#attempt>\r\n+</#function>\r\n+\r\n+<#-- @end -->\r"
  }
]
